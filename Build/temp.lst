
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	0000105b 	.word	0x0000105b
  10:	0000105d 	.word	0x0000105d
  14:	0000105f 	.word	0x0000105f
  18:	00001061 	.word	0x00001061
	...
  2c:	00001063 	.word	0x00001063
  30:	00001065 	.word	0x00001065
  34:	00000000 	.word	0x00000000
  38:	00001067 	.word	0x00001067
  3c:	00001069 	.word	0x00001069
  40:	0000106b 	.word	0x0000106b
  44:	0000106b 	.word	0x0000106b
  48:	0000106b 	.word	0x0000106b
  4c:	0000106b 	.word	0x0000106b
  50:	0000106b 	.word	0x0000106b
  54:	0000106b 	.word	0x0000106b
  58:	0000106b 	.word	0x0000106b
  5c:	0000106b 	.word	0x0000106b
  60:	0000106b 	.word	0x0000106b
  64:	0000106b 	.word	0x0000106b
  68:	0000106b 	.word	0x0000106b
  6c:	0000106b 	.word	0x0000106b
  70:	0000106b 	.word	0x0000106b
  74:	0000106b 	.word	0x0000106b
  78:	0000106b 	.word	0x0000106b
  7c:	0000106b 	.word	0x0000106b
  80:	0000106b 	.word	0x0000106b
  84:	0000106b 	.word	0x0000106b
  88:	0000106b 	.word	0x0000106b
  8c:	0000106b 	.word	0x0000106b
  90:	0000106b 	.word	0x0000106b
  94:	0000106b 	.word	0x0000106b
  98:	0000106b 	.word	0x0000106b
  9c:	0000106b 	.word	0x0000106b
  a0:	0000106b 	.word	0x0000106b
  a4:	0000106b 	.word	0x0000106b
  a8:	0000106b 	.word	0x0000106b
  ac:	0000106b 	.word	0x0000106b
  b0:	0000106b 	.word	0x0000106b
  b4:	0000106b 	.word	0x0000106b
  b8:	0000106b 	.word	0x0000106b
  bc:	0000106b 	.word	0x0000106b
  c0:	0000106b 	.word	0x0000106b
  c4:	0000106b 	.word	0x0000106b
  c8:	0000106b 	.word	0x0000106b
  cc:	0000106b 	.word	0x0000106b
  d0:	0000106b 	.word	0x0000106b
  d4:	0000106b 	.word	0x0000106b
  d8:	0000106b 	.word	0x0000106b
  dc:	0000106b 	.word	0x0000106b
  e0:	0000106b 	.word	0x0000106b
  e4:	0000106b 	.word	0x0000106b
  e8:	0000106b 	.word	0x0000106b
  ec:	0000106b 	.word	0x0000106b
  f0:	0000106b 	.word	0x0000106b
  f4:	0000106b 	.word	0x0000106b
  f8:	0000106b 	.word	0x0000106b
  fc:	0000106b 	.word	0x0000106b
 100:	0000106b 	.word	0x0000106b
 104:	0000106b 	.word	0x0000106b
 108:	0000106b 	.word	0x0000106b
 10c:	0000106b 	.word	0x0000106b
 110:	0000106b 	.word	0x0000106b
 114:	0000106b 	.word	0x0000106b
 118:	0000106b 	.word	0x0000106b
 11c:	0000106b 	.word	0x0000106b
 120:	0000106b 	.word	0x0000106b
 124:	0000106b 	.word	0x0000106b
 128:	0000106b 	.word	0x0000106b
 12c:	0000106b 	.word	0x0000106b
 130:	0000106b 	.word	0x0000106b
 134:	0000106b 	.word	0x0000106b
 138:	0000106b 	.word	0x0000106b
 13c:	0000106b 	.word	0x0000106b
 140:	0000106b 	.word	0x0000106b
 144:	0000106b 	.word	0x0000106b
 148:	0000106b 	.word	0x0000106b
 14c:	0000106b 	.word	0x0000106b
 150:	0000106b 	.word	0x0000106b
 154:	0000106b 	.word	0x0000106b
 158:	0000106b 	.word	0x0000106b
 15c:	0000106b 	.word	0x0000106b
 160:	0000106b 	.word	0x0000106b
 164:	0000106b 	.word	0x0000106b
 168:	0000106b 	.word	0x0000106b
 16c:	0000106b 	.word	0x0000106b
 170:	0000106b 	.word	0x0000106b
 174:	0000106b 	.word	0x0000106b
 178:	0000106b 	.word	0x0000106b
 17c:	0000106b 	.word	0x0000106b
 180:	0000106b 	.word	0x0000106b
 184:	0000106b 	.word	0x0000106b
 188:	0000106b 	.word	0x0000106b
 18c:	0000106b 	.word	0x0000106b
 190:	0000106b 	.word	0x0000106b
 194:	0000106b 	.word	0x0000106b
 198:	0000106b 	.word	0x0000106b
 19c:	0000106b 	.word	0x0000106b
 1a0:	0000106b 	.word	0x0000106b
 1a4:	0000106b 	.word	0x0000106b
 1a8:	0000106b 	.word	0x0000106b
 1ac:	0000106b 	.word	0x0000106b
 1b0:	0000106b 	.word	0x0000106b
 1b4:	0000106b 	.word	0x0000106b
 1b8:	0000106b 	.word	0x0000106b
 1bc:	0000106b 	.word	0x0000106b
 1c0:	0000106b 	.word	0x0000106b
 1c4:	0000106b 	.word	0x0000106b
 1c8:	0000106b 	.word	0x0000106b
 1cc:	0000106b 	.word	0x0000106b
 1d0:	0000106b 	.word	0x0000106b
 1d4:	0000106b 	.word	0x0000106b
 1d8:	0000106b 	.word	0x0000106b
 1dc:	0000106b 	.word	0x0000106b
 1e0:	0000106b 	.word	0x0000106b
 1e4:	0000106b 	.word	0x0000106b
 1e8:	0000106b 	.word	0x0000106b
 1ec:	0000106b 	.word	0x0000106b
 1f0:	0000106b 	.word	0x0000106b
 1f4:	0000106b 	.word	0x0000106b
 1f8:	0000106b 	.word	0x0000106b
 1fc:	0000106b 	.word	0x0000106b
 200:	0000106b 	.word	0x0000106b
 204:	0000106b 	.word	0x0000106b
 208:	0000106b 	.word	0x0000106b
 20c:	0000106b 	.word	0x0000106b
 210:	0000106b 	.word	0x0000106b
 214:	0000106b 	.word	0x0000106b
 218:	0000106b 	.word	0x0000106b
 21c:	0000106b 	.word	0x0000106b
 220:	0000106b 	.word	0x0000106b
 224:	0000106b 	.word	0x0000106b
 228:	0000106b 	.word	0x0000106b
 22c:	0000106b 	.word	0x0000106b
 230:	0000106b 	.word	0x0000106b
 234:	0000106b 	.word	0x0000106b
 238:	0000106b 	.word	0x0000106b
 23c:	0000106b 	.word	0x0000106b
 240:	0000106b 	.word	0x0000106b
 244:	0000106b 	.word	0x0000106b
 248:	0000106b 	.word	0x0000106b
 24c:	0000106b 	.word	0x0000106b
 250:	0000106b 	.word	0x0000106b
 254:	0000106b 	.word	0x0000106b
 258:	0000106b 	.word	0x0000106b
 25c:	0000106b 	.word	0x0000106b
 260:	0000106b 	.word	0x0000106b
 264:	0000106b 	.word	0x0000106b
 268:	0000106b 	.word	0x0000106b
 26c:	0000106b 	.word	0x0000106b
 270:	0000106b 	.word	0x0000106b
 274:	0000106b 	.word	0x0000106b
 278:	0000106b 	.word	0x0000106b
 27c:	0000106b 	.word	0x0000106b
 280:	0000106b 	.word	0x0000106b
 284:	0000106b 	.word	0x0000106b
 288:	0000106b 	.word	0x0000106b
 28c:	0000106b 	.word	0x0000106b
 290:	0000106b 	.word	0x0000106b
 294:	0000106b 	.word	0x0000106b
 298:	0000106b 	.word	0x0000106b
 29c:	0000106b 	.word	0x0000106b
 2a0:	0000106b 	.word	0x0000106b
 2a4:	0000106b 	.word	0x0000106b
 2a8:	0000106b 	.word	0x0000106b
 2ac:	0000106b 	.word	0x0000106b
 2b0:	0000106b 	.word	0x0000106b
 2b4:	0000106b 	.word	0x0000106b
 2b8:	0000106b 	.word	0x0000106b
 2bc:	0000106b 	.word	0x0000106b
 2c0:	0000106b 	.word	0x0000106b
 2c4:	0000106b 	.word	0x0000106b
 2c8:	0000106b 	.word	0x0000106b
 2cc:	0000106b 	.word	0x0000106b
 2d0:	0000106b 	.word	0x0000106b
 2d4:	0000106b 	.word	0x0000106b
 2d8:	0000106b 	.word	0x0000106b
 2dc:	0000106b 	.word	0x0000106b
 2e0:	0000106b 	.word	0x0000106b
 2e4:	0000106b 	.word	0x0000106b
 2e8:	0000106b 	.word	0x0000106b
 2ec:	0000106b 	.word	0x0000106b
 2f0:	0000106b 	.word	0x0000106b
 2f4:	0000106b 	.word	0x0000106b
 2f8:	0000106b 	.word	0x0000106b
 2fc:	0000106b 	.word	0x0000106b
 300:	0000106b 	.word	0x0000106b
 304:	0000106b 	.word	0x0000106b
 308:	0000106b 	.word	0x0000106b
 30c:	0000106b 	.word	0x0000106b

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fd21 	bl	ec8 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fde0 	bl	1050 <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff8e24 	.word	0x1fff8e24

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 fd2b 	bl	ff4 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * 
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void ) {
     8b0:	b508      	push	{r3, lr}

    EcuM_Init();    //MCU configuration.
     8b2:	f000 fbe9 	bl	1088 <EcuM_Init>
    Scheduler_Init( &Scheduler_Control );   //Initializing control structure 2 for scheduler.
     8b6:	4803      	ldr	r0, [pc, #12]	; (8c4 <main+0x14>)
     8b8:	f000 f8b8 	bl	a2c <Scheduler_Init>
    
    while( 1u ) {
        Scheduler_MainFunction();
     8bc:	f000 fa40 	bl	d40 <Scheduler_MainFunction>
     8c0:	e7fc      	b.n	8bc <main+0xc>
     8c2:	bf00      	nop
     8c4:	1fff8e04 	.word	0x1fff8e04

000008c8 <Dio_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Dio_schm_read_msr(void)
{
     8c8:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     8ca:	f3ef 8310 	mrs	r3, PRIMASK
     8ce:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     8d0:	4623      	mov	r3, r4
}
     8d2:	4618      	mov	r0, r3
     8d4:	f85d 4b04 	ldr.w	r4, [sp], #4
     8d8:	4770      	bx	lr

000008da <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     8da:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     8dc:	f3ef 8310 	mrs	r3, PRIMASK
     8e0:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     8e2:	4623      	mov	r3, r4
}
     8e4:	4618      	mov	r0, r3
     8e6:	f85d 4b04 	ldr.w	r4, [sp], #4
     8ea:	4770      	bx	lr

000008ec <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     8ec:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     8ee:	f3ef 8310 	mrs	r3, PRIMASK
     8f2:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     8f4:	4623      	mov	r3, r4
}
     8f6:	4618      	mov	r0, r3
     8f8:	f85d 4b04 	ldr.w	r4, [sp], #4
     8fc:	4770      	bx	lr

000008fe <Task1_callback>:
/**
 * @brief This is the callback function for the task 1.
 *
 * This function executes the state machine every 50ms.
 */
void Task1_callback( void ) {
     8fe:	b508      	push	{r3, lr}
    DoubleClick_stMachine();
     900:	f000 fbd0 	bl	10a4 <DoubleClick_stMachine>
}
     904:	bf00      	nop
     906:	bd08      	pop	{r3, pc}

00000908 <Task2_callback>:
/**
 * @brief This is the callback function for the task 2.
 *
 * This function is called every 100ms and toggles a led according to the kind of click detected in the state machine.
 */
void Task2_callback( void ) {
     908:	b508      	push	{r3, lr}
    //Checking actual state.
    switch ( click ) {
     90a:	4b11      	ldr	r3, [pc, #68]	; (950 <Task2_callback+0x48>)
     90c:	781b      	ldrb	r3, [r3, #0]
     90e:	2b03      	cmp	r3, #3
     910:	d014      	beq.n	93c <Task2_callback+0x34>
     912:	2b03      	cmp	r3, #3
     914:	dc19      	bgt.n	94a <Task2_callback+0x42>
     916:	2b01      	cmp	r3, #1
     918:	d002      	beq.n	920 <Task2_callback+0x18>
     91a:	2b02      	cmp	r3, #2
     91c:	d007      	beq.n	92e <Task2_callback+0x26>
        case HOLD_CLICK: 
            Dio_FlipChannel( DioConf_DioChannel_PTC10 );
            click = NO_CLICK; 
        break;
        default: 
        break; //No click detected
     91e:	e014      	b.n	94a <Task2_callback+0x42>
            Dio_FlipChannel( DioConf_DioChannel_PTC8 );
     920:	2048      	movs	r0, #72	; 0x48
     922:	f005 fb2e 	bl	5f82 <Dio_FlipChannel>
            click = NO_CLICK; 
     926:	4b0a      	ldr	r3, [pc, #40]	; (950 <Task2_callback+0x48>)
     928:	2200      	movs	r2, #0
     92a:	701a      	strb	r2, [r3, #0]
        break;
     92c:	e00e      	b.n	94c <Task2_callback+0x44>
            Dio_FlipChannel( DioConf_DioChannel_PTC9 );
     92e:	2049      	movs	r0, #73	; 0x49
     930:	f005 fb27 	bl	5f82 <Dio_FlipChannel>
            click = NO_CLICK; 
     934:	4b06      	ldr	r3, [pc, #24]	; (950 <Task2_callback+0x48>)
     936:	2200      	movs	r2, #0
     938:	701a      	strb	r2, [r3, #0]
        break;
     93a:	e007      	b.n	94c <Task2_callback+0x44>
            Dio_FlipChannel( DioConf_DioChannel_PTC10 );
     93c:	204a      	movs	r0, #74	; 0x4a
     93e:	f005 fb20 	bl	5f82 <Dio_FlipChannel>
            click = NO_CLICK; 
     942:	4b03      	ldr	r3, [pc, #12]	; (950 <Task2_callback+0x48>)
     944:	2200      	movs	r2, #0
     946:	701a      	strb	r2, [r3, #0]
        break;
     948:	e000      	b.n	94c <Task2_callback+0x44>
        break; //No click detected
     94a:	bf00      	nop
    }
}
     94c:	bf00      	nop
     94e:	bd08      	pop	{r3, pc}
     950:	1fff8b40 	.word	0x1fff8b40

00000954 <Timer1_callback>:
/**
 * @brief This is the callback function for the timer 1.
 *
 * This function is called when the timer counts to 300ms. This is for detecting the timeout in the state machine.
 */
void Timer1_callback( void ) {    
     954:	b508      	push	{r3, lr}
    Scheduler_StopTimer( SCHEDULER_TIMER1_ID );    //Stoping timer.
     956:	2001      	movs	r0, #1
     958:	f000 f94a 	bl	bf0 <Scheduler_StopTimer>
}
     95c:	bf00      	nop
     95e:	bd08      	pop	{r3, pc}

00000960 <Bfx_SetBit_u32u8>:
 * @param[in] BitPn Bit position.
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_SetBit_u32u8( uint32* Data, uint8 BitPn ) {
     960:	b082      	sub	sp, #8
     962:	9001      	str	r0, [sp, #4]
     964:	460b      	mov	r3, r1
     966:	f88d 3003 	strb.w	r3, [sp, #3]
    *Data |= ( 1 << BitPn ); 
     96a:	9b01      	ldr	r3, [sp, #4]
     96c:	681b      	ldr	r3, [r3, #0]
     96e:	f89d 2003 	ldrb.w	r2, [sp, #3]
     972:	2101      	movs	r1, #1
     974:	fa01 f202 	lsl.w	r2, r1, r2
     978:	431a      	orrs	r2, r3
     97a:	9b01      	ldr	r3, [sp, #4]
     97c:	601a      	str	r2, [r3, #0]
}
     97e:	bf00      	nop
     980:	b002      	add	sp, #8
     982:	4770      	bx	lr

00000984 <Bfx_ClrBit_u32u8>:
 * @param[in] BitPn Bit position.
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_ClrBit_u32u8( uint32* Data, uint8 BitPn ) {
     984:	b082      	sub	sp, #8
     986:	9001      	str	r0, [sp, #4]
     988:	460b      	mov	r3, r1
     98a:	f88d 3003 	strb.w	r3, [sp, #3]
    *Data &= ~( 1 << BitPn );
     98e:	9b01      	ldr	r3, [sp, #4]
     990:	681b      	ldr	r3, [r3, #0]
     992:	f89d 2003 	ldrb.w	r2, [sp, #3]
     996:	2101      	movs	r1, #1
     998:	fa01 f202 	lsl.w	r2, r1, r2
     99c:	43d2      	mvns	r2, r2
     99e:	401a      	ands	r2, r3
     9a0:	9b01      	ldr	r3, [sp, #4]
     9a2:	601a      	str	r2, [r3, #0]
}
     9a4:	bf00      	nop
     9a6:	b002      	add	sp, #8
     9a8:	4770      	bx	lr

000009aa <Bfx_GetBit_u32u8_u8>:
 * @param[in] BitPn Bit position.
 * @retval Result It indicates the value of the bit of interest.
 * 
 * @note The max BitPn value is 31
 */
static inline boolean Bfx_GetBit_u32u8_u8( uint32 Data, uint8 BitPn ) {
     9aa:	b084      	sub	sp, #16
     9ac:	9001      	str	r0, [sp, #4]
     9ae:	460b      	mov	r3, r1
     9b0:	f88d 3003 	strb.w	r3, [sp, #3]
    //local data.
    boolean Result = FALSE;
     9b4:	2300      	movs	r3, #0
     9b6:	f88d 300f 	strb.w	r3, [sp, #15]
    
    Result = ( Data & ( 1 << BitPn ) ) != 0;
     9ba:	f89d 3003 	ldrb.w	r3, [sp, #3]
     9be:	2201      	movs	r2, #1
     9c0:	fa02 f303 	lsl.w	r3, r2, r3
     9c4:	461a      	mov	r2, r3
     9c6:	9b01      	ldr	r3, [sp, #4]
     9c8:	4013      	ands	r3, r2
     9ca:	2b00      	cmp	r3, #0
     9cc:	bf14      	ite	ne
     9ce:	2301      	movne	r3, #1
     9d0:	2300      	moveq	r3, #0
     9d2:	f88d 300f 	strb.w	r3, [sp, #15]
    return Result;
     9d6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     9da:	4618      	mov	r0, r3
     9dc:	b004      	add	sp, #16
     9de:	4770      	bx	lr

000009e0 <Bfx_PutBit_u32u8u8>:
 * @param[in] Status Status value (TRUE or FALSE).
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_PutBit_u32u8u8( uint32* Data, uint8 BitPn, boolean Status ) {
     9e0:	b082      	sub	sp, #8
     9e2:	9001      	str	r0, [sp, #4]
     9e4:	460b      	mov	r3, r1
     9e6:	f88d 3003 	strb.w	r3, [sp, #3]
     9ea:	4613      	mov	r3, r2
     9ec:	f88d 3002 	strb.w	r3, [sp, #2]
    if ( Status == TRUE ) { //Setting bit.
     9f0:	f89d 3002 	ldrb.w	r3, [sp, #2]
     9f4:	2b00      	cmp	r3, #0
     9f6:	d00a      	beq.n	a0e <Bfx_PutBit_u32u8u8+0x2e>
        *Data |= ( 1 << BitPn ); 
     9f8:	9b01      	ldr	r3, [sp, #4]
     9fa:	681b      	ldr	r3, [r3, #0]
     9fc:	f89d 2003 	ldrb.w	r2, [sp, #3]
     a00:	2101      	movs	r1, #1
     a02:	fa01 f202 	lsl.w	r2, r1, r2
     a06:	431a      	orrs	r2, r3
     a08:	9b01      	ldr	r3, [sp, #4]
     a0a:	601a      	str	r2, [r3, #0]
    }

    else { //Clearing bit.
        *Data &= ~( 1 << BitPn );
    }
}
     a0c:	e00a      	b.n	a24 <Bfx_PutBit_u32u8u8+0x44>
        *Data &= ~( 1 << BitPn );
     a0e:	9b01      	ldr	r3, [sp, #4]
     a10:	681b      	ldr	r3, [r3, #0]
     a12:	f89d 2003 	ldrb.w	r2, [sp, #3]
     a16:	2101      	movs	r1, #1
     a18:	fa01 f202 	lsl.w	r2, r1, r2
     a1c:	43d2      	mvns	r2, r2
     a1e:	401a      	ands	r2, r3
     a20:	9b01      	ldr	r3, [sp, #4]
     a22:	601a      	str	r2, [r3, #0]
}
     a24:	bf00      	nop
     a26:	b002      	add	sp, #8
     a28:	4770      	bx	lr
	...

00000a2c <Scheduler_Init>:
 *
 * @note The timeout and periodicity values are the initial values registered in the buffers.
 * @note The elapsed and count values are initialized to 0 and timeout values respectively.
 * @note All the flags are initialiced to the initial values registered in the buffers.
 */
Std_ReturnType Scheduler_Init( Scheduler_CtrlType *SchedulerPtr ) {
     a2c:	b500      	push	{lr}
     a2e:	b085      	sub	sp, #20
     a30:	9001      	str	r0, [sp, #4]
    //local data 
    Std_ReturnType status = TRUE;
     a32:	2301      	movs	r3, #1
     a34:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8 i = 0;
     a38:	2300      	movs	r3, #0
     a3a:	f88d 300f 	strb.w	r3, [sp, #15]

    //Initializing tasks related parameters.
    for ( i = 0; i < SCHEDULER_TASKS; i++ ) {
     a3e:	2300      	movs	r3, #0
     a40:	f88d 300f 	strb.w	r3, [sp, #15]
     a44:	e033      	b.n	aae <Scheduler_Init+0x82>
        SchedulerPtr->TaskPeriod[i] = SchedulerConfig_Ptr->TaskPtr[i].InitPeriod;   //Registering initial periodicity value of each task.
     a46:	4b43      	ldr	r3, [pc, #268]	; (b54 <Scheduler_Init+0x128>)
     a48:	681b      	ldr	r3, [r3, #0]
     a4a:	6899      	ldr	r1, [r3, #8]
     a4c:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a50:	4613      	mov	r3, r2
     a52:	005b      	lsls	r3, r3, #1
     a54:	4413      	add	r3, r2
     a56:	009b      	lsls	r3, r3, #2
     a58:	440b      	add	r3, r1
     a5a:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a5e:	6819      	ldr	r1, [r3, #0]
     a60:	9b01      	ldr	r3, [sp, #4]
     a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        SchedulerPtr->TaskElapsed[i] = 0;   //Initializing time follow up of each task.
     a66:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a6a:	9b01      	ldr	r3, [sp, #4]
     a6c:	3202      	adds	r2, #2
     a6e:	2100      	movs	r1, #0
     a70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        Bfx_PutBit_u32u8u8( &SchedulerPtr->TaskFlags, i, SchedulerConfig_Ptr->TaskPtr[i].InitFlag  );   //Registering initial flag of each task. 
     a74:	9b01      	ldr	r3, [sp, #4]
     a76:	f103 0018 	add.w	r0, r3, #24
     a7a:	4b36      	ldr	r3, [pc, #216]	; (b54 <Scheduler_Init+0x128>)
     a7c:	681b      	ldr	r3, [r3, #0]
     a7e:	6899      	ldr	r1, [r3, #8]
     a80:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a84:	4613      	mov	r3, r2
     a86:	005b      	lsls	r3, r3, #1
     a88:	4413      	add	r3, r2
     a8a:	009b      	lsls	r3, r3, #2
     a8c:	440b      	add	r3, r1
     a8e:	791b      	ldrb	r3, [r3, #4]
     a90:	2b00      	cmp	r3, #0
     a92:	bf14      	ite	ne
     a94:	2301      	movne	r3, #1
     a96:	2300      	moveq	r3, #0
     a98:	b2da      	uxtb	r2, r3
     a9a:	f89d 300f 	ldrb.w	r3, [sp, #15]
     a9e:	4619      	mov	r1, r3
     aa0:	f7ff ff9e 	bl	9e0 <Bfx_PutBit_u32u8u8>
    for ( i = 0; i < SCHEDULER_TASKS; i++ ) {
     aa4:	f89d 300f 	ldrb.w	r3, [sp, #15]
     aa8:	3301      	adds	r3, #1
     aaa:	f88d 300f 	strb.w	r3, [sp, #15]
     aae:	f89d 300f 	ldrb.w	r3, [sp, #15]
     ab2:	2b01      	cmp	r3, #1
     ab4:	d9c7      	bls.n	a46 <Scheduler_Init+0x1a>
    }

    //Initializing timers related parameters.
    for ( i = 0; i < SCHEDULER_TIMERS; i++ ) {
     ab6:	2300      	movs	r3, #0
     ab8:	f88d 300f 	strb.w	r3, [sp, #15]
     abc:	e03f      	b.n	b3e <Scheduler_Init+0x112>
        SchedulerPtr->TimerTimeout[i] = SchedulerConfig_Ptr->TimerPtr[i].InitTimeout;   //Registering initial timeout value of each timer.
     abe:	4b25      	ldr	r3, [pc, #148]	; (b54 <Scheduler_Init+0x128>)
     ac0:	681b      	ldr	r3, [r3, #0]
     ac2:	6919      	ldr	r1, [r3, #16]
     ac4:	f89d 200f 	ldrb.w	r2, [sp, #15]
     ac8:	4613      	mov	r3, r2
     aca:	005b      	lsls	r3, r3, #1
     acc:	4413      	add	r3, r2
     ace:	009b      	lsls	r3, r3, #2
     ad0:	440b      	add	r3, r1
     ad2:	f89d 200f 	ldrb.w	r2, [sp, #15]
     ad6:	6819      	ldr	r1, [r3, #0]
     ad8:	9b01      	ldr	r3, [sp, #4]
     ada:	3204      	adds	r2, #4
     adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        SchedulerPtr->TimerCount[i] = SchedulerConfig_Ptr->TimerPtr[i].InitTimeout; //Initializing timer count of each timer.
     ae0:	4b1c      	ldr	r3, [pc, #112]	; (b54 <Scheduler_Init+0x128>)
     ae2:	681b      	ldr	r3, [r3, #0]
     ae4:	6919      	ldr	r1, [r3, #16]
     ae6:	f89d 200f 	ldrb.w	r2, [sp, #15]
     aea:	4613      	mov	r3, r2
     aec:	005b      	lsls	r3, r3, #1
     aee:	4413      	add	r3, r2
     af0:	009b      	lsls	r3, r3, #2
     af2:	18ca      	adds	r2, r1, r3
     af4:	f89d 300f 	ldrb.w	r3, [sp, #15]
     af8:	6812      	ldr	r2, [r2, #0]
     afa:	9901      	ldr	r1, [sp, #4]
     afc:	3304      	adds	r3, #4
     afe:	009b      	lsls	r3, r3, #2
     b00:	440b      	add	r3, r1
     b02:	605a      	str	r2, [r3, #4]
        Bfx_PutBit_u32u8u8( &SchedulerPtr->TimerFlags, i, SchedulerConfig_Ptr->TimerPtr[i].InitFlag  );   //Registering initial flag of each timer.
     b04:	9b01      	ldr	r3, [sp, #4]
     b06:	f103 001c 	add.w	r0, r3, #28
     b0a:	4b12      	ldr	r3, [pc, #72]	; (b54 <Scheduler_Init+0x128>)
     b0c:	681b      	ldr	r3, [r3, #0]
     b0e:	6919      	ldr	r1, [r3, #16]
     b10:	f89d 200f 	ldrb.w	r2, [sp, #15]
     b14:	4613      	mov	r3, r2
     b16:	005b      	lsls	r3, r3, #1
     b18:	4413      	add	r3, r2
     b1a:	009b      	lsls	r3, r3, #2
     b1c:	440b      	add	r3, r1
     b1e:	791b      	ldrb	r3, [r3, #4]
     b20:	2b00      	cmp	r3, #0
     b22:	bf14      	ite	ne
     b24:	2301      	movne	r3, #1
     b26:	2300      	moveq	r3, #0
     b28:	b2da      	uxtb	r2, r3
     b2a:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b2e:	4619      	mov	r1, r3
     b30:	f7ff ff56 	bl	9e0 <Bfx_PutBit_u32u8u8>
    for ( i = 0; i < SCHEDULER_TIMERS; i++ ) {
     b34:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b38:	3301      	adds	r3, #1
     b3a:	f88d 300f 	strb.w	r3, [sp, #15]
     b3e:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b42:	2b00      	cmp	r3, #0
     b44:	d0bb      	beq.n	abe <Scheduler_Init+0x92>
    }    

    return status;
     b46:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
     b4a:	4618      	mov	r0, r3
     b4c:	b005      	add	sp, #20
     b4e:	f85d fb04 	ldr.w	pc, [sp], #4
     b52:	bf00      	nop
     b54:	1fff8b38 	.word	0x1fff8b38

00000b58 <Scheduler_StartTimer>:
 *
 * @retval status Status of the operation, successfull 1 or not 0. 
 *
 * @note The timer ID must be valid.
 */
Std_ReturnType Scheduler_StartTimer( TimerType Timer ) {
     b58:	b500      	push	{lr}
     b5a:	b085      	sub	sp, #20
     b5c:	4603      	mov	r3, r0
     b5e:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data
    Std_ReturnType status = FALSE;
     b62:	2300      	movs	r3, #0
     b64:	f88d 300f 	strb.w	r3, [sp, #15]

    //Verifying if the timer ID is valid.
    if ( ( Timer != 0 ) && ( Timer <= SchedulerConfig_Ptr->Timers ) ) { //valid ID
     b68:	f89d 3007 	ldrb.w	r3, [sp, #7]
     b6c:	2b00      	cmp	r3, #0
     b6e:	d032      	beq.n	bd6 <Scheduler_StartTimer+0x7e>
     b70:	4b1d      	ldr	r3, [pc, #116]	; (be8 <Scheduler_StartTimer+0x90>)
     b72:	681b      	ldr	r3, [r3, #0]
     b74:	7b1b      	ldrb	r3, [r3, #12]
     b76:	f89d 2007 	ldrb.w	r2, [sp, #7]
     b7a:	429a      	cmp	r2, r3
     b7c:	d82b      	bhi.n	bd6 <Scheduler_StartTimer+0x7e>
        Bfx_SetBit_u32u8( &SchedulerCtrl_Ptr->TimerFlags , Timer - 1 ); 
     b7e:	4b1b      	ldr	r3, [pc, #108]	; (bec <Scheduler_StartTimer+0x94>)
     b80:	681b      	ldr	r3, [r3, #0]
     b82:	f103 021c 	add.w	r2, r3, #28
     b86:	f89d 3007 	ldrb.w	r3, [sp, #7]
     b8a:	3b01      	subs	r3, #1
     b8c:	b2db      	uxtb	r3, r3
     b8e:	4619      	mov	r1, r3
     b90:	4610      	mov	r0, r2
     b92:	f7ff fee5 	bl	960 <Bfx_SetBit_u32u8>

        //Verifying if timer has reach 0.
        if ( SchedulerCtrl_Ptr->TimerCount[ Timer - 1 ] == 0 ) {
     b96:	4b15      	ldr	r3, [pc, #84]	; (bec <Scheduler_StartTimer+0x94>)
     b98:	681a      	ldr	r2, [r3, #0]
     b9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     b9e:	3b01      	subs	r3, #1
     ba0:	3304      	adds	r3, #4
     ba2:	009b      	lsls	r3, r3, #2
     ba4:	4413      	add	r3, r2
     ba6:	685b      	ldr	r3, [r3, #4]
     ba8:	2b00      	cmp	r3, #0
     baa:	d110      	bne.n	bce <Scheduler_StartTimer+0x76>
             SchedulerCtrl_Ptr->TimerCount[ Timer - 1 ] = SchedulerCtrl_Ptr->TimerTimeout[ Timer - 1 ]; //restarting timer.
     bac:	4b0f      	ldr	r3, [pc, #60]	; (bec <Scheduler_StartTimer+0x94>)
     bae:	681a      	ldr	r2, [r3, #0]
     bb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
     bb4:	1e58      	subs	r0, r3, #1
     bb6:	4b0d      	ldr	r3, [pc, #52]	; (bec <Scheduler_StartTimer+0x94>)
     bb8:	6819      	ldr	r1, [r3, #0]
     bba:	f89d 3007 	ldrb.w	r3, [sp, #7]
     bbe:	3b01      	subs	r3, #1
     bc0:	3004      	adds	r0, #4
     bc2:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
     bc6:	3304      	adds	r3, #4
     bc8:	009b      	lsls	r3, r3, #2
     bca:	440b      	add	r3, r1
     bcc:	605a      	str	r2, [r3, #4]
        }

        status = TRUE;
     bce:	2301      	movs	r3, #1
     bd0:	f88d 300f 	strb.w	r3, [sp, #15]
     bd4:	e002      	b.n	bdc <Scheduler_StartTimer+0x84>
    }

    else {
        status = FALSE; //invalid ID.
     bd6:	2300      	movs	r3, #0
     bd8:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    return status;
     bdc:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     be0:	4618      	mov	r0, r3
     be2:	b005      	add	sp, #20
     be4:	f85d fb04 	ldr.w	pc, [sp], #4
     be8:	1fff8b38 	.word	0x1fff8b38
     bec:	1fff8b3c 	.word	0x1fff8b3c

00000bf0 <Scheduler_StopTimer>:
 *
 * @retval status Status of the operation, successfull 1 or not 0. 
 *
 * @note The timer ID must be valid.
 */
Std_ReturnType Scheduler_StopTimer( TimerType Timer ) {
     bf0:	b500      	push	{lr}
     bf2:	b085      	sub	sp, #20
     bf4:	4603      	mov	r3, r0
     bf6:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data
    Std_ReturnType status = FALSE; 
     bfa:	2300      	movs	r3, #0
     bfc:	f88d 300f 	strb.w	r3, [sp, #15]

    //Verifying if the timer ID is valid.
    if ( ( Timer != 0 ) && ( Timer <= SchedulerConfig_Ptr->Timers ) ) {//valid ID
     c00:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c04:	2b00      	cmp	r3, #0
     c06:	d016      	beq.n	c36 <Scheduler_StopTimer+0x46>
     c08:	4b0f      	ldr	r3, [pc, #60]	; (c48 <Scheduler_StopTimer+0x58>)
     c0a:	681b      	ldr	r3, [r3, #0]
     c0c:	7b1b      	ldrb	r3, [r3, #12]
     c0e:	f89d 2007 	ldrb.w	r2, [sp, #7]
     c12:	429a      	cmp	r2, r3
     c14:	d80f      	bhi.n	c36 <Scheduler_StopTimer+0x46>
        Bfx_ClrBit_u32u8( &SchedulerCtrl_Ptr->TimerFlags , Timer - 1 );
     c16:	4b0d      	ldr	r3, [pc, #52]	; (c4c <Scheduler_StopTimer+0x5c>)
     c18:	681b      	ldr	r3, [r3, #0]
     c1a:	f103 021c 	add.w	r2, r3, #28
     c1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c22:	3b01      	subs	r3, #1
     c24:	b2db      	uxtb	r3, r3
     c26:	4619      	mov	r1, r3
     c28:	4610      	mov	r0, r2
     c2a:	f7ff feab 	bl	984 <Bfx_ClrBit_u32u8>
        status = TRUE;
     c2e:	2301      	movs	r3, #1
     c30:	f88d 300f 	strb.w	r3, [sp, #15]
     c34:	e002      	b.n	c3c <Scheduler_StopTimer+0x4c>
    }

    else {
        status = FALSE;//invalid ID.
     c36:	2300      	movs	r3, #0
     c38:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    return status;
     c3c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     c40:	4618      	mov	r0, r3
     c42:	b005      	add	sp, #20
     c44:	f85d fb04 	ldr.w	pc, [sp], #4
     c48:	1fff8b38 	.word	0x1fff8b38
     c4c:	1fff8b3c 	.word	0x1fff8b3c

00000c50 <Scheduler_GetTimer>:
 *
 * @retval counter_value Actual count value of timer, if operation was a success counter_value = n, otherwise 0. 
 *
 * @note The timer ID must be valid.
 */
uint32 Scheduler_GetTimer( TimerType Timer ) {
     c50:	b084      	sub	sp, #16
     c52:	4603      	mov	r3, r0
     c54:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data
    uint32 counter_value = 0;
     c58:	2300      	movs	r3, #0
     c5a:	9303      	str	r3, [sp, #12]

    //Verifying if the timer ID is valid.
    if ( ( Timer != 0 ) && ( Timer <= SchedulerConfig_Ptr->Timers ) ) { //valid ID
     c5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c60:	2b00      	cmp	r3, #0
     c62:	d011      	beq.n	c88 <Scheduler_GetTimer+0x38>
     c64:	4b0b      	ldr	r3, [pc, #44]	; (c94 <Scheduler_GetTimer+0x44>)
     c66:	681b      	ldr	r3, [r3, #0]
     c68:	7b1b      	ldrb	r3, [r3, #12]
     c6a:	f89d 2007 	ldrb.w	r2, [sp, #7]
     c6e:	429a      	cmp	r2, r3
     c70:	d80a      	bhi.n	c88 <Scheduler_GetTimer+0x38>
        counter_value = SchedulerCtrl_Ptr->TimerCount[ Timer - 1 ];
     c72:	4b09      	ldr	r3, [pc, #36]	; (c98 <Scheduler_GetTimer+0x48>)
     c74:	681a      	ldr	r2, [r3, #0]
     c76:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c7a:	3b01      	subs	r3, #1
     c7c:	3304      	adds	r3, #4
     c7e:	009b      	lsls	r3, r3, #2
     c80:	4413      	add	r3, r2
     c82:	685b      	ldr	r3, [r3, #4]
     c84:	9303      	str	r3, [sp, #12]
     c86:	e001      	b.n	c8c <Scheduler_GetTimer+0x3c>
    }

    else {
        counter_value = FALSE;  //invalid ID.
     c88:	2300      	movs	r3, #0
     c8a:	9303      	str	r3, [sp, #12]
    }

    return counter_value;
     c8c:	9b03      	ldr	r3, [sp, #12]
}
     c8e:	4618      	mov	r0, r3
     c90:	b004      	add	sp, #16
     c92:	4770      	bx	lr
     c94:	1fff8b38 	.word	0x1fff8b38
     c98:	1fff8b3c 	.word	0x1fff8b3c

00000c9c <Scheduler_ReloadTimer>:
 * @retval status Status of the operation, successfull 1 or not 0. 
 *
 * @note The timeout value must be >= tick and a multiple of tick.
 * @note The timer ID must be valid.
 */
Std_ReturnType Scheduler_ReloadTimer( TimerType Timer, uint32 NewTimeout ) {
     c9c:	b500      	push	{lr}
     c9e:	b085      	sub	sp, #20
     ca0:	4603      	mov	r3, r0
     ca2:	9100      	str	r1, [sp, #0]
     ca4:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data
    Std_ReturnType status = FALSE;
     ca8:	2300      	movs	r3, #0
     caa:	f88d 300f 	strb.w	r3, [sp, #15]

    //Verifying if the timer ID is valid.
    if ( ( Timer != 0 ) && ( Timer <= SchedulerConfig_Ptr->Timers ) ) { //valid ID
     cae:	f89d 3007 	ldrb.w	r3, [sp, #7]
     cb2:	2b00      	cmp	r3, #0
     cb4:	d037      	beq.n	d26 <Scheduler_ReloadTimer+0x8a>
     cb6:	4b20      	ldr	r3, [pc, #128]	; (d38 <Scheduler_ReloadTimer+0x9c>)
     cb8:	681b      	ldr	r3, [r3, #0]
     cba:	7b1b      	ldrb	r3, [r3, #12]
     cbc:	f89d 2007 	ldrb.w	r2, [sp, #7]
     cc0:	429a      	cmp	r2, r3
     cc2:	d830      	bhi.n	d26 <Scheduler_ReloadTimer+0x8a>
        //Verifying if timeout value is valid according to tick value. timeout >= tick, timeout must be multiple of tick.
        if ( ( NewTimeout >= SchedulerConfig_Ptr->Tick ) && ( NewTimeout % SchedulerConfig_Ptr->Tick == 0 ) ) { //valid timeout.
     cc4:	4b1c      	ldr	r3, [pc, #112]	; (d38 <Scheduler_ReloadTimer+0x9c>)
     cc6:	681b      	ldr	r3, [r3, #0]
     cc8:	681b      	ldr	r3, [r3, #0]
     cca:	9a00      	ldr	r2, [sp, #0]
     ccc:	429a      	cmp	r2, r3
     cce:	d326      	bcc.n	d1e <Scheduler_ReloadTimer+0x82>
     cd0:	4b19      	ldr	r3, [pc, #100]	; (d38 <Scheduler_ReloadTimer+0x9c>)
     cd2:	681b      	ldr	r3, [r3, #0]
     cd4:	681a      	ldr	r2, [r3, #0]
     cd6:	9b00      	ldr	r3, [sp, #0]
     cd8:	fbb3 f1f2 	udiv	r1, r3, r2
     cdc:	fb01 f202 	mul.w	r2, r1, r2
     ce0:	1a9b      	subs	r3, r3, r2
     ce2:	2b00      	cmp	r3, #0
     ce4:	d11b      	bne.n	d1e <Scheduler_ReloadTimer+0x82>
            SchedulerCtrl_Ptr->TimerTimeout[ Timer - 1 ] = NewTimeout;
     ce6:	4b15      	ldr	r3, [pc, #84]	; (d3c <Scheduler_ReloadTimer+0xa0>)
     ce8:	681b      	ldr	r3, [r3, #0]
     cea:	f89d 2007 	ldrb.w	r2, [sp, #7]
     cee:	3a01      	subs	r2, #1
     cf0:	3204      	adds	r2, #4
     cf2:	9900      	ldr	r1, [sp, #0]
     cf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            SchedulerCtrl_Ptr->TimerCount[ Timer - 1 ]  = NewTimeout; //reseting timer to new reference value.
     cf8:	4b10      	ldr	r3, [pc, #64]	; (d3c <Scheduler_ReloadTimer+0xa0>)
     cfa:	681a      	ldr	r2, [r3, #0]
     cfc:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d00:	3b01      	subs	r3, #1
     d02:	3304      	adds	r3, #4
     d04:	009b      	lsls	r3, r3, #2
     d06:	4413      	add	r3, r2
     d08:	9a00      	ldr	r2, [sp, #0]
     d0a:	605a      	str	r2, [r3, #4]
            Scheduler_StartTimer( Timer );
     d0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d10:	4618      	mov	r0, r3
     d12:	f7ff ff21 	bl	b58 <Scheduler_StartTimer>
            status = TRUE;
     d16:	2301      	movs	r3, #1
     d18:	f88d 300f 	strb.w	r3, [sp, #15]
        if ( ( NewTimeout >= SchedulerConfig_Ptr->Tick ) && ( NewTimeout % SchedulerConfig_Ptr->Tick == 0 ) ) { //valid timeout.
     d1c:	e006      	b.n	d2c <Scheduler_ReloadTimer+0x90>
        }

        else {
            status = FALSE; //Invalid timeout.
     d1e:	2300      	movs	r3, #0
     d20:	f88d 300f 	strb.w	r3, [sp, #15]
        if ( ( NewTimeout >= SchedulerConfig_Ptr->Tick ) && ( NewTimeout % SchedulerConfig_Ptr->Tick == 0 ) ) { //valid timeout.
     d24:	e002      	b.n	d2c <Scheduler_ReloadTimer+0x90>
        }
     }

    else {
        status = FALSE; //invalid ID.
     d26:	2300      	movs	r3, #0
     d28:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    return status;
     d2c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     d30:	4618      	mov	r0, r3
     d32:	b005      	add	sp, #20
     d34:	f85d fb04 	ldr.w	pc, [sp], #4
     d38:	1fff8b38 	.word	0x1fff8b38
     d3c:	1fff8b3c 	.word	0x1fff8b3c

00000d40 <Scheduler_MainFunction>:
 *
 * @note At least 1 timer and 1 task needs to be register in order to the scheduler to work.
 * @note After a timer reaches 0 is important to restart, stop or reload that timer else it will still decrement --> risk of overflow.
 * @note It´s important that previous to using the scheduler the buffers for the timers and task must be correctly defined, specially their flags.
 */
void Scheduler_MainFunction( void ) {
     d40:	b500      	push	{lr}
     d42:	b085      	sub	sp, #20
    //local data
    uint32 tick_value = OsIf_MicrosToTicks( SchedulerConfig_Ptr->Tick * 1000, OSIF_COUNTER_SYSTEM );    //Translating tick value from us to counter increments.
     d44:	4b5e      	ldr	r3, [pc, #376]	; (ec0 <Scheduler_MainFunction+0x180>)
     d46:	681b      	ldr	r3, [r3, #0]
     d48:	681b      	ldr	r3, [r3, #0]
     d4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     d4e:	fb02 f303 	mul.w	r3, r2, r3
     d52:	2101      	movs	r1, #1
     d54:	4618      	mov	r0, r3
     d56:	f000 fa92 	bl	127e <OsIf_MicrosToTicks>
     d5a:	9001      	str	r0, [sp, #4]
    uint32 count_value = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );    //First counter value capture.
     d5c:	2001      	movs	r0, #1
     d5e:	f000 fa42 	bl	11e6 <OsIf_GetCounter>
     d62:	4603      	mov	r3, r0
     d64:	9300      	str	r3, [sp, #0]
    uint32 elapsed_time = 0;    //Time follow up for tick (timer increments).
     d66:	2300      	movs	r3, #0
     d68:	9303      	str	r3, [sp, #12]
    uint8 i = 0;
     d6a:	2300      	movs	r3, #0
     d6c:	f88d 300b 	strb.w	r3, [sp, #11]

    while( 1 ) {    //tasks are executed during timeout.
        //Time follow up update for tick.
        elapsed_time += OsIf_GetElapsed( &count_value, OSIF_COUNTER_SYSTEM );   //time capture update
     d70:	466b      	mov	r3, sp
     d72:	2101      	movs	r1, #1
     d74:	4618      	mov	r0, r3
     d76:	f000 fa4f 	bl	1218 <OsIf_GetElapsed>
     d7a:	4602      	mov	r2, r0
     d7c:	9b03      	ldr	r3, [sp, #12]
     d7e:	4413      	add	r3, r2
     d80:	9303      	str	r3, [sp, #12]
        
        //Verifying if a scheduler´s tick has occurred.
        if ( elapsed_time >= tick_value ) {          
     d82:	9a03      	ldr	r2, [sp, #12]
     d84:	9b01      	ldr	r3, [sp, #4]
     d86:	429a      	cmp	r2, r3
     d88:	d3f2      	bcc.n	d70 <Scheduler_MainFunction+0x30>
            
            //Executing timers
            for ( i = 0; i < SchedulerConfig_Ptr->Timers; i++ ) {
     d8a:	2300      	movs	r3, #0
     d8c:	f88d 300b 	strb.w	r3, [sp, #11]
     d90:	e03a      	b.n	e08 <Scheduler_MainFunction+0xc8>
                //Verifying execution of timer i
                if ( Bfx_GetBit_u32u8_u8( SchedulerCtrl_Ptr->TimerFlags, i ) == TRUE ) {    //timer activated
     d92:	4b4c      	ldr	r3, [pc, #304]	; (ec4 <Scheduler_MainFunction+0x184>)
     d94:	681b      	ldr	r3, [r3, #0]
     d96:	69db      	ldr	r3, [r3, #28]
     d98:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d9c:	4611      	mov	r1, r2
     d9e:	4618      	mov	r0, r3
     da0:	f7ff fe03 	bl	9aa <Bfx_GetBit_u32u8_u8>
     da4:	4603      	mov	r3, r0
     da6:	2b00      	cmp	r3, #0
     da8:	d029      	beq.n	dfe <Scheduler_MainFunction+0xbe>
                    SchedulerCtrl_Ptr->TimerCount[i] -= SchedulerConfig_Ptr->Tick;    //decrement
     daa:	4b46      	ldr	r3, [pc, #280]	; (ec4 <Scheduler_MainFunction+0x184>)
     dac:	681a      	ldr	r2, [r3, #0]
     dae:	f89d 300b 	ldrb.w	r3, [sp, #11]
     db2:	3304      	adds	r3, #4
     db4:	009b      	lsls	r3, r3, #2
     db6:	4413      	add	r3, r2
     db8:	6858      	ldr	r0, [r3, #4]
     dba:	4b41      	ldr	r3, [pc, #260]	; (ec0 <Scheduler_MainFunction+0x180>)
     dbc:	681b      	ldr	r3, [r3, #0]
     dbe:	681a      	ldr	r2, [r3, #0]
     dc0:	4b40      	ldr	r3, [pc, #256]	; (ec4 <Scheduler_MainFunction+0x184>)
     dc2:	6819      	ldr	r1, [r3, #0]
     dc4:	f89d 300b 	ldrb.w	r3, [sp, #11]
     dc8:	1a82      	subs	r2, r0, r2
     dca:	3304      	adds	r3, #4
     dcc:	009b      	lsls	r3, r3, #2
     dce:	440b      	add	r3, r1
     dd0:	605a      	str	r2, [r3, #4]
                    
                    //Verifying execution of callback i
                    if ( Scheduler_GetTimer( i + 1 ) == 0 ) {   //timeout achieved.
     dd2:	f89d 300b 	ldrb.w	r3, [sp, #11]
     dd6:	3301      	adds	r3, #1
     dd8:	b2db      	uxtb	r3, r3
     dda:	4618      	mov	r0, r3
     ddc:	f7ff ff38 	bl	c50 <Scheduler_GetTimer>
     de0:	4603      	mov	r3, r0
     de2:	2b00      	cmp	r3, #0
     de4:	d10b      	bne.n	dfe <Scheduler_MainFunction+0xbe>
                        SchedulerConfig_Ptr->TimerPtr[i].CallbackFunc();
     de6:	4b36      	ldr	r3, [pc, #216]	; (ec0 <Scheduler_MainFunction+0x180>)
     de8:	681b      	ldr	r3, [r3, #0]
     dea:	6919      	ldr	r1, [r3, #16]
     dec:	f89d 200b 	ldrb.w	r2, [sp, #11]
     df0:	4613      	mov	r3, r2
     df2:	005b      	lsls	r3, r3, #1
     df4:	4413      	add	r3, r2
     df6:	009b      	lsls	r3, r3, #2
     df8:	440b      	add	r3, r1
     dfa:	689b      	ldr	r3, [r3, #8]
     dfc:	4798      	blx	r3
            for ( i = 0; i < SchedulerConfig_Ptr->Timers; i++ ) {
     dfe:	f89d 300b 	ldrb.w	r3, [sp, #11]
     e02:	3301      	adds	r3, #1
     e04:	f88d 300b 	strb.w	r3, [sp, #11]
     e08:	4b2d      	ldr	r3, [pc, #180]	; (ec0 <Scheduler_MainFunction+0x180>)
     e0a:	681b      	ldr	r3, [r3, #0]
     e0c:	7b1b      	ldrb	r3, [r3, #12]
     e0e:	f89d 200b 	ldrb.w	r2, [sp, #11]
     e12:	429a      	cmp	r2, r3
     e14:	d3bd      	bcc.n	d92 <Scheduler_MainFunction+0x52>
                    }
                }
            }

            //Executing tasks.
            for ( i = 0; i < SchedulerConfig_Ptr->Tasks; i++ ) {
     e16:	2300      	movs	r3, #0
     e18:	f88d 300b 	strb.w	r3, [sp, #11]
     e1c:	e045      	b.n	eaa <Scheduler_MainFunction+0x16a>
                //Verifying execution of task i
                if ( Bfx_GetBit_u32u8_u8( SchedulerCtrl_Ptr->TaskFlags, i ) == TRUE ) {
     e1e:	4b29      	ldr	r3, [pc, #164]	; (ec4 <Scheduler_MainFunction+0x184>)
     e20:	681b      	ldr	r3, [r3, #0]
     e22:	699b      	ldr	r3, [r3, #24]
     e24:	f89d 200b 	ldrb.w	r2, [sp, #11]
     e28:	4611      	mov	r1, r2
     e2a:	4618      	mov	r0, r3
     e2c:	f7ff fdbd 	bl	9aa <Bfx_GetBit_u32u8_u8>
     e30:	4603      	mov	r3, r0
     e32:	2b00      	cmp	r3, #0
     e34:	d034      	beq.n	ea0 <Scheduler_MainFunction+0x160>
                    SchedulerCtrl_Ptr->TaskElapsed[i] += SchedulerConfig_Ptr->Tick;   //Time follow-up update for task i.
     e36:	4b23      	ldr	r3, [pc, #140]	; (ec4 <Scheduler_MainFunction+0x184>)
     e38:	681b      	ldr	r3, [r3, #0]
     e3a:	f89d 200b 	ldrb.w	r2, [sp, #11]
     e3e:	3202      	adds	r2, #2
     e40:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
     e44:	4b1e      	ldr	r3, [pc, #120]	; (ec0 <Scheduler_MainFunction+0x180>)
     e46:	681b      	ldr	r3, [r3, #0]
     e48:	6819      	ldr	r1, [r3, #0]
     e4a:	4b1e      	ldr	r3, [pc, #120]	; (ec4 <Scheduler_MainFunction+0x184>)
     e4c:	681b      	ldr	r3, [r3, #0]
     e4e:	f89d 200b 	ldrb.w	r2, [sp, #11]
     e52:	4401      	add	r1, r0
     e54:	3202      	adds	r2, #2
     e56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                
                    //Verifying the execution of callback i.
                    if ( SchedulerCtrl_Ptr->TaskElapsed[i] >= SchedulerCtrl_Ptr->TaskPeriod[i] ) {  //periodicity achieved.
     e5a:	4b1a      	ldr	r3, [pc, #104]	; (ec4 <Scheduler_MainFunction+0x184>)
     e5c:	681b      	ldr	r3, [r3, #0]
     e5e:	f89d 200b 	ldrb.w	r2, [sp, #11]
     e62:	3202      	adds	r2, #2
     e64:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
     e68:	4b16      	ldr	r3, [pc, #88]	; (ec4 <Scheduler_MainFunction+0x184>)
     e6a:	681b      	ldr	r3, [r3, #0]
     e6c:	f89d 100b 	ldrb.w	r1, [sp, #11]
     e70:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
     e74:	429a      	cmp	r2, r3
     e76:	d313      	bcc.n	ea0 <Scheduler_MainFunction+0x160>
                        SchedulerConfig_Ptr->TaskPtr[i].TaskFunc();
     e78:	4b11      	ldr	r3, [pc, #68]	; (ec0 <Scheduler_MainFunction+0x180>)
     e7a:	681b      	ldr	r3, [r3, #0]
     e7c:	6899      	ldr	r1, [r3, #8]
     e7e:	f89d 200b 	ldrb.w	r2, [sp, #11]
     e82:	4613      	mov	r3, r2
     e84:	005b      	lsls	r3, r3, #1
     e86:	4413      	add	r3, r2
     e88:	009b      	lsls	r3, r3, #2
     e8a:	440b      	add	r3, r1
     e8c:	689b      	ldr	r3, [r3, #8]
     e8e:	4798      	blx	r3
                        SchedulerCtrl_Ptr->TaskElapsed[i] = 0;  //Time follow-up reset for task i.
     e90:	4b0c      	ldr	r3, [pc, #48]	; (ec4 <Scheduler_MainFunction+0x184>)
     e92:	681b      	ldr	r3, [r3, #0]
     e94:	f89d 200b 	ldrb.w	r2, [sp, #11]
     e98:	3202      	adds	r2, #2
     e9a:	2100      	movs	r1, #0
     e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for ( i = 0; i < SchedulerConfig_Ptr->Tasks; i++ ) {
     ea0:	f89d 300b 	ldrb.w	r3, [sp, #11]
     ea4:	3301      	adds	r3, #1
     ea6:	f88d 300b 	strb.w	r3, [sp, #11]
     eaa:	4b05      	ldr	r3, [pc, #20]	; (ec0 <Scheduler_MainFunction+0x180>)
     eac:	681b      	ldr	r3, [r3, #0]
     eae:	791b      	ldrb	r3, [r3, #4]
     eb0:	f89d 200b 	ldrb.w	r2, [sp, #11]
     eb4:	429a      	cmp	r2, r3
     eb6:	d3b2      	bcc.n	e1e <Scheduler_MainFunction+0xde>
                    }
                }
            }

            elapsed_time = 0;   //Reset time follow up for tick.
     eb8:	2300      	movs	r3, #0
     eba:	9303      	str	r3, [sp, #12]
        elapsed_time += OsIf_GetElapsed( &count_value, OSIF_COUNTER_SYSTEM );   //time capture update
     ebc:	e758      	b.n	d70 <Scheduler_MainFunction+0x30>
     ebe:	bf00      	nop
     ec0:	1fff8b38 	.word	0x1fff8b38
     ec4:	1fff8b3c 	.word	0x1fff8b3c

00000ec8 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     ec8:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     eca:	2300      	movs	r3, #0
     ecc:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     ece:	2300      	movs	r3, #0
     ed0:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     ed2:	2300      	movs	r3, #0
     ed4:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     ed6:	2300      	movs	r3, #0
     ed8:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     eda:	4b44      	ldr	r3, [pc, #272]	; (fec <init_data_bss+0x124>)
     edc:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     ede:	4b44      	ldr	r3, [pc, #272]	; (ff0 <init_data_bss+0x128>)
     ee0:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     ee2:	9b05      	ldr	r3, [sp, #20]
     ee4:	681b      	ldr	r3, [r3, #0]
     ee6:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     ee8:	9b05      	ldr	r3, [sp, #20]
     eea:	3304      	adds	r3, #4
     eec:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     eee:	9b05      	ldr	r3, [sp, #20]
     ef0:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     ef2:	2300      	movs	r3, #0
     ef4:	9309      	str	r3, [sp, #36]	; 0x24
     ef6:	e03d      	b.n	f74 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
     ef8:	9a09      	ldr	r2, [sp, #36]	; 0x24
     efa:	4613      	mov	r3, r2
     efc:	005b      	lsls	r3, r3, #1
     efe:	4413      	add	r3, r2
     f00:	009b      	lsls	r3, r3, #2
     f02:	461a      	mov	r2, r3
     f04:	9b03      	ldr	r3, [sp, #12]
     f06:	4413      	add	r3, r2
     f08:	685b      	ldr	r3, [r3, #4]
     f0a:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     f0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     f0e:	4613      	mov	r3, r2
     f10:	005b      	lsls	r3, r3, #1
     f12:	4413      	add	r3, r2
     f14:	009b      	lsls	r3, r3, #2
     f16:	461a      	mov	r2, r3
     f18:	9b03      	ldr	r3, [sp, #12]
     f1a:	4413      	add	r3, r2
     f1c:	681b      	ldr	r3, [r3, #0]
     f1e:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     f20:	9a09      	ldr	r2, [sp, #36]	; 0x24
     f22:	4613      	mov	r3, r2
     f24:	005b      	lsls	r3, r3, #1
     f26:	4413      	add	r3, r2
     f28:	009b      	lsls	r3, r3, #2
     f2a:	461a      	mov	r2, r3
     f2c:	9b03      	ldr	r3, [sp, #12]
     f2e:	4413      	add	r3, r2
     f30:	689b      	ldr	r3, [r3, #8]
     f32:	4619      	mov	r1, r3
     f34:	9a09      	ldr	r2, [sp, #36]	; 0x24
     f36:	4613      	mov	r3, r2
     f38:	005b      	lsls	r3, r3, #1
     f3a:	4413      	add	r3, r2
     f3c:	009b      	lsls	r3, r3, #2
     f3e:	461a      	mov	r2, r3
     f40:	9b03      	ldr	r3, [sp, #12]
     f42:	4413      	add	r3, r2
     f44:	685b      	ldr	r3, [r3, #4]
     f46:	1acb      	subs	r3, r1, r3
     f48:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     f4a:	2300      	movs	r3, #0
     f4c:	9308      	str	r3, [sp, #32]
     f4e:	e00a      	b.n	f66 <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
     f50:	9a00      	ldr	r2, [sp, #0]
     f52:	9b08      	ldr	r3, [sp, #32]
     f54:	441a      	add	r2, r3
     f56:	9901      	ldr	r1, [sp, #4]
     f58:	9b08      	ldr	r3, [sp, #32]
     f5a:	440b      	add	r3, r1
     f5c:	7812      	ldrb	r2, [r2, #0]
     f5e:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     f60:	9b08      	ldr	r3, [sp, #32]
     f62:	3301      	adds	r3, #1
     f64:	9308      	str	r3, [sp, #32]
     f66:	9a08      	ldr	r2, [sp, #32]
     f68:	9b06      	ldr	r3, [sp, #24]
     f6a:	429a      	cmp	r2, r3
     f6c:	d3f0      	bcc.n	f50 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
     f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     f70:	3301      	adds	r3, #1
     f72:	9309      	str	r3, [sp, #36]	; 0x24
     f74:	9a09      	ldr	r2, [sp, #36]	; 0x24
     f76:	9b07      	ldr	r3, [sp, #28]
     f78:	429a      	cmp	r2, r3
     f7a:	d3bd      	bcc.n	ef8 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     f7c:	9b04      	ldr	r3, [sp, #16]
     f7e:	681b      	ldr	r3, [r3, #0]
     f80:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     f82:	9b04      	ldr	r3, [sp, #16]
     f84:	3304      	adds	r3, #4
     f86:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     f88:	9b04      	ldr	r3, [sp, #16]
     f8a:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     f8c:	2300      	movs	r3, #0
     f8e:	9309      	str	r3, [sp, #36]	; 0x24
     f90:	e024      	b.n	fdc <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
     f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
     f94:	00db      	lsls	r3, r3, #3
     f96:	9a02      	ldr	r2, [sp, #8]
     f98:	4413      	add	r3, r2
     f9a:	681b      	ldr	r3, [r3, #0]
     f9c:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
     f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     fa0:	00db      	lsls	r3, r3, #3
     fa2:	9a02      	ldr	r2, [sp, #8]
     fa4:	4413      	add	r3, r2
     fa6:	685b      	ldr	r3, [r3, #4]
     fa8:	4619      	mov	r1, r3
     faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
     fac:	00db      	lsls	r3, r3, #3
     fae:	9a02      	ldr	r2, [sp, #8]
     fb0:	4413      	add	r3, r2
     fb2:	681b      	ldr	r3, [r3, #0]
     fb4:	1acb      	subs	r3, r1, r3
     fb6:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     fb8:	2300      	movs	r3, #0
     fba:	9308      	str	r3, [sp, #32]
     fbc:	e007      	b.n	fce <init_data_bss+0x106>
        {
            ram[j] = 0U;
     fbe:	9a01      	ldr	r2, [sp, #4]
     fc0:	9b08      	ldr	r3, [sp, #32]
     fc2:	4413      	add	r3, r2
     fc4:	2200      	movs	r2, #0
     fc6:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     fc8:	9b08      	ldr	r3, [sp, #32]
     fca:	3301      	adds	r3, #1
     fcc:	9308      	str	r3, [sp, #32]
     fce:	9a08      	ldr	r2, [sp, #32]
     fd0:	9b06      	ldr	r3, [sp, #24]
     fd2:	429a      	cmp	r2, r3
     fd4:	d3f3      	bcc.n	fbe <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
     fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
     fd8:	3301      	adds	r3, #1
     fda:	9309      	str	r3, [sp, #36]	; 0x24
     fdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
     fde:	9b07      	ldr	r3, [sp, #28]
     fe0:	429a      	cmp	r2, r3
     fe2:	d3d6      	bcc.n	f92 <init_data_bss+0xca>
        }
    }
}
     fe4:	bf00      	nop
     fe6:	bf00      	nop
     fe8:	b00a      	add	sp, #40	; 0x28
     fea:	4770      	bx	lr
     fec:	00008674 	.word	0x00008674
     ff0:	00008690 	.word	0x00008690

00000ff4 <sys_m4_cache_init>:
{
     ff4:	b084      	sub	sp, #16
     ff6:	4603      	mov	r3, r0
     ff8:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
     ffc:	2300      	movs	r3, #0
     ffe:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
    1002:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1006:	2b00      	cmp	r3, #0
    1008:	d118      	bne.n	103c <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
    100a:	4b10      	ldr	r3, [pc, #64]	; (104c <sys_m4_cache_init+0x58>)
    100c:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
    1010:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
    1012:	4b0e      	ldr	r3, [pc, #56]	; (104c <sys_m4_cache_init+0x58>)
    1014:	681b      	ldr	r3, [r3, #0]
    1016:	4a0d      	ldr	r2, [pc, #52]	; (104c <sys_m4_cache_init+0x58>)
    1018:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    101c:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
    101e:	bf00      	nop
    1020:	4b0a      	ldr	r3, [pc, #40]	; (104c <sys_m4_cache_init+0x58>)
    1022:	681b      	ldr	r3, [r3, #0]
    1024:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    1028:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    102c:	d0f8      	beq.n	1020 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
    102e:	4b07      	ldr	r3, [pc, #28]	; (104c <sys_m4_cache_init+0x58>)
    1030:	681b      	ldr	r3, [r3, #0]
    1032:	4a06      	ldr	r2, [pc, #24]	; (104c <sys_m4_cache_init+0x58>)
    1034:	f043 0301 	orr.w	r3, r3, #1
    1038:	6013      	str	r3, [r2, #0]
    103a:	e002      	b.n	1042 <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
    103c:	2301      	movs	r3, #1
    103e:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
    1042:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1046:	4618      	mov	r0, r3
    1048:	b004      	add	sp, #16
    104a:	4770      	bx	lr
    104c:	e0082000 	.word	0xe0082000

00001050 <startup_go_to_user_mode>:
}
    1050:	bf00      	nop
    1052:	4770      	bx	lr

00001054 <Sys_GetCoreID>:
    return 0U;
    1054:	2300      	movs	r3, #0
}
    1056:	4618      	mov	r0, r3
    1058:	4770      	bx	lr

0000105a <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
    105a:	e7fe      	b.n	105a <HardFault_Handler>

0000105c <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
    105c:	e7fe      	b.n	105c <MemManage_Handler>

0000105e <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
    105e:	e7fe      	b.n	105e <BusFault_Handler>

00001060 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
    1060:	e7fe      	b.n	1060 <UsageFault_Handler>

00001062 <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
    1062:	e7fe      	b.n	1062 <SVC_Handler>

00001064 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
    1064:	e7fe      	b.n	1064 <DebugMon_Handler>

00001066 <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
    1066:	e7fe      	b.n	1066 <PendSV_Handler>

00001068 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
    1068:	e7fe      	b.n	1068 <SysTick_Handler>

0000106a <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
    106a:	e7fe      	b.n	106a <undefined_handler>

0000106c <MCU_clocks>:
 *  -SIRCDIV1_CLK -->1 Mhz.
 *  -SIRCDIV2_CLK -->Disabled
 *  -SOSCDIV1_CLK  -->Disabled
 *  -SOSCDIV2_CLK  -->Disabled
 */
void MCU_clocks( void ) {
    106c:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );//Initializing MCU driver
    106e:	4805      	ldr	r0, [pc, #20]	; (1084 <MCU_clocks+0x18>)
    1070:	f003 fe46 	bl	4d00 <Mcu_Init>
    Mcu_SetMode( Run_mode );//MCU on run mode.
    1074:	2000      	movs	r0, #0
    1076:	f003 febb 	bl	4df0 <Mcu_SetMode>
    Mcu_InitClock( Clocks_conf_0 );//Executing clock configurations established in container.
    107a:	2000      	movs	r0, #0
    107c:	f003 fe94 	bl	4da8 <Mcu_InitClock>
    
    //Configuring Pll clock.
    /*while ( Mcu_GetPllStatus() != MCU_PLL_LOCKED );//Waiting until PLL is locked.
    Mcu_DistributePllClock();//Executing pll clock configuration established in container.*/
}
    1080:	bf00      	nop
    1082:	bd08      	pop	{r3, pc}
    1084:	00008410 	.word	0x00008410

00001088 <EcuM_Init>:
 * @brief This function initialize the microcontroller and the peripherals
 * 
 * 
 */
void EcuM_Init( void )
{   
    1088:	b508      	push	{r3, lr}
    MCU_clocks();
    108a:	f7ff ffef 	bl	106c <MCU_clocks>
    OsIf_Init( NULL_PTR );//Init Osif timer.
    108e:	2000      	movs	r0, #0
    1090:	f000 f8a0 	bl	11d4 <OsIf_Init>
    Port_Init( &Port_Config );//Init port driver and configuration.
    1094:	4802      	ldr	r0, [pc, #8]	; (10a0 <EcuM_Init+0x18>)
    1096:	f004 fa35 	bl	5504 <Port_Init>
    109a:	bf00      	nop
    109c:	bd08      	pop	{r3, pc}
    109e:	bf00      	nop
    10a0:	00008628 	.word	0x00008628

000010a4 <DoubleClick_stMachine>:

/**
 * @brief This function is the double click state machine.
 * 
 */
void DoubleClick_stMachine( void ) {
    10a4:	b508      	push	{r3, lr}
    //local data
    static uint8 state = IDLE;

    switch( state ) {
    10a6:	4b3f      	ldr	r3, [pc, #252]	; (11a4 <DoubleClick_stMachine+0x100>)
    10a8:	781b      	ldrb	r3, [r3, #0]
    10aa:	2b04      	cmp	r3, #4
    10ac:	d86c      	bhi.n	1188 <DoubleClick_stMachine+0xe4>
    10ae:	a201      	add	r2, pc, #4	; (adr r2, 10b4 <DoubleClick_stMachine+0x10>)
    10b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    10b4:	000010c9 	.word	0x000010c9
    10b8:	000010e7 	.word	0x000010e7
    10bc:	0000110d 	.word	0x0000110d
    10c0:	00001143 	.word	0x00001143
    10c4:	0000116f 	.word	0x0000116f
        case IDLE :
            //Checks if the button is pressed.
            if ( Dio_ReadChannel( DioConf_DioChannel_PTE12 ) == STD_LOW ) {
    10c8:	208c      	movs	r0, #140	; 0x8c
    10ca:	f004 ff2f 	bl	5f2c <Dio_ReadChannel>
    10ce:	4603      	mov	r3, r0
    10d0:	2b00      	cmp	r3, #0
    10d2:	d15b      	bne.n	118c <DoubleClick_stMachine+0xe8>
                Scheduler_ReloadTimer( SCHEDULER_TIMER1_ID, SCHEDULER_TIMER1_TIMEOUT_300MS );   //Starting timer 300ms.
    10d4:	f44f 7196 	mov.w	r1, #300	; 0x12c
    10d8:	2001      	movs	r0, #1
    10da:	f7ff fddf 	bl	c9c <Scheduler_ReloadTimer>
                state = SINGLE_PRESS;
    10de:	4b31      	ldr	r3, [pc, #196]	; (11a4 <DoubleClick_stMachine+0x100>)
    10e0:	2201      	movs	r2, #1
    10e2:	701a      	strb	r2, [r3, #0]
            }
        break;
    10e4:	e052      	b.n	118c <DoubleClick_stMachine+0xe8>
        
        case SINGLE_PRESS :
            //Checking timer timeout.
            if ( Scheduler_GetTimer( SCHEDULER_TIMER1_ID ) == 0 ) {
    10e6:	2001      	movs	r0, #1
    10e8:	f7ff fdb2 	bl	c50 <Scheduler_GetTimer>
    10ec:	4603      	mov	r3, r0
    10ee:	2b00      	cmp	r3, #0
    10f0:	d102      	bne.n	10f8 <DoubleClick_stMachine+0x54>
                state = HOLD;
    10f2:	4b2c      	ldr	r3, [pc, #176]	; (11a4 <DoubleClick_stMachine+0x100>)
    10f4:	2204      	movs	r2, #4
    10f6:	701a      	strb	r2, [r3, #0]
            }

            //Checking if the button is released.
            if ( Dio_ReadChannel( DioConf_DioChannel_PTE12 ) == STD_HIGH ) {
    10f8:	208c      	movs	r0, #140	; 0x8c
    10fa:	f004 ff17 	bl	5f2c <Dio_ReadChannel>
    10fe:	4603      	mov	r3, r0
    1100:	2b01      	cmp	r3, #1
    1102:	d145      	bne.n	1190 <DoubleClick_stMachine+0xec>
                state = SINGLE_RELEASE;
    1104:	4b27      	ldr	r3, [pc, #156]	; (11a4 <DoubleClick_stMachine+0x100>)
    1106:	2202      	movs	r2, #2
    1108:	701a      	strb	r2, [r3, #0]
            }
        break;
    110a:	e041      	b.n	1190 <DoubleClick_stMachine+0xec>
        
        case SINGLE_RELEASE :
            //Checking timer timeout.
            if ( Scheduler_GetTimer( SCHEDULER_TIMER1_ID ) == 0 ) { //Single click
    110c:	2001      	movs	r0, #1
    110e:	f7ff fd9f 	bl	c50 <Scheduler_GetTimer>
    1112:	4603      	mov	r3, r0
    1114:	2b00      	cmp	r3, #0
    1116:	d105      	bne.n	1124 <DoubleClick_stMachine+0x80>
                click = SINGLE_CLICK;
    1118:	4b23      	ldr	r3, [pc, #140]	; (11a8 <DoubleClick_stMachine+0x104>)
    111a:	2201      	movs	r2, #1
    111c:	701a      	strb	r2, [r3, #0]
                state = IDLE;
    111e:	4b21      	ldr	r3, [pc, #132]	; (11a4 <DoubleClick_stMachine+0x100>)
    1120:	2200      	movs	r2, #0
    1122:	701a      	strb	r2, [r3, #0]
            }

            //Checks if the button is pressed.
            if ( Dio_ReadChannel( DioConf_DioChannel_PTE12 ) == STD_LOW ) {
    1124:	208c      	movs	r0, #140	; 0x8c
    1126:	f004 ff01 	bl	5f2c <Dio_ReadChannel>
    112a:	4603      	mov	r3, r0
    112c:	2b00      	cmp	r3, #0
    112e:	d131      	bne.n	1194 <DoubleClick_stMachine+0xf0>
                Scheduler_ReloadTimer( SCHEDULER_TIMER1_ID, SCHEDULER_TIMER1_TIMEOUT_300MS );   //Starting timer 300ms.
    1130:	f44f 7196 	mov.w	r1, #300	; 0x12c
    1134:	2001      	movs	r0, #1
    1136:	f7ff fdb1 	bl	c9c <Scheduler_ReloadTimer>
                state = DOUBLE_PRESS;
    113a:	4b1a      	ldr	r3, [pc, #104]	; (11a4 <DoubleClick_stMachine+0x100>)
    113c:	2203      	movs	r2, #3
    113e:	701a      	strb	r2, [r3, #0]
            }
        break;
    1140:	e028      	b.n	1194 <DoubleClick_stMachine+0xf0>
        
        case DOUBLE_PRESS :
            //Checking timer timeout.
            if ( Scheduler_GetTimer( SCHEDULER_TIMER1_ID ) == 0 ) {
    1142:	2001      	movs	r0, #1
    1144:	f7ff fd84 	bl	c50 <Scheduler_GetTimer>
    1148:	4603      	mov	r3, r0
    114a:	2b00      	cmp	r3, #0
    114c:	d102      	bne.n	1154 <DoubleClick_stMachine+0xb0>
                state = HOLD;
    114e:	4b15      	ldr	r3, [pc, #84]	; (11a4 <DoubleClick_stMachine+0x100>)
    1150:	2204      	movs	r2, #4
    1152:	701a      	strb	r2, [r3, #0]
            }

            //Checking if the button is released.
            if ( Dio_ReadChannel( DioConf_DioChannel_PTE12 ) == STD_HIGH ) {//Double click.
    1154:	208c      	movs	r0, #140	; 0x8c
    1156:	f004 fee9 	bl	5f2c <Dio_ReadChannel>
    115a:	4603      	mov	r3, r0
    115c:	2b01      	cmp	r3, #1
    115e:	d11b      	bne.n	1198 <DoubleClick_stMachine+0xf4>
                click = DOUBLE_CLICK;
    1160:	4b11      	ldr	r3, [pc, #68]	; (11a8 <DoubleClick_stMachine+0x104>)
    1162:	2202      	movs	r2, #2
    1164:	701a      	strb	r2, [r3, #0]
                state = IDLE;
    1166:	4b0f      	ldr	r3, [pc, #60]	; (11a4 <DoubleClick_stMachine+0x100>)
    1168:	2200      	movs	r2, #0
    116a:	701a      	strb	r2, [r3, #0]
            }
        break;
    116c:	e014      	b.n	1198 <DoubleClick_stMachine+0xf4>
        
        case HOLD ://Hold click.
            //Checking if the button is released.
            if ( Dio_ReadChannel( DioConf_DioChannel_PTE12 ) == STD_HIGH ) {
    116e:	208c      	movs	r0, #140	; 0x8c
    1170:	f004 fedc 	bl	5f2c <Dio_ReadChannel>
    1174:	4603      	mov	r3, r0
    1176:	2b01      	cmp	r3, #1
    1178:	d110      	bne.n	119c <DoubleClick_stMachine+0xf8>
                click = HOLD_CLICK;
    117a:	4b0b      	ldr	r3, [pc, #44]	; (11a8 <DoubleClick_stMachine+0x104>)
    117c:	2203      	movs	r2, #3
    117e:	701a      	strb	r2, [r3, #0]
                state = IDLE;
    1180:	4b08      	ldr	r3, [pc, #32]	; (11a4 <DoubleClick_stMachine+0x100>)
    1182:	2200      	movs	r2, #0
    1184:	701a      	strb	r2, [r3, #0]
            }
        break;
    1186:	e009      	b.n	119c <DoubleClick_stMachine+0xf8>
        
        default :
        break;
    1188:	bf00      	nop
    118a:	e008      	b.n	119e <DoubleClick_stMachine+0xfa>
        break;
    118c:	bf00      	nop
    118e:	e006      	b.n	119e <DoubleClick_stMachine+0xfa>
        break;
    1190:	bf00      	nop
    1192:	e004      	b.n	119e <DoubleClick_stMachine+0xfa>
        break;
    1194:	bf00      	nop
    1196:	e002      	b.n	119e <DoubleClick_stMachine+0xfa>
        break;
    1198:	bf00      	nop
    119a:	e000      	b.n	119e <DoubleClick_stMachine+0xfa>
        break;
    119c:	bf00      	nop
    }
}
    119e:	bf00      	nop
    11a0:	bd08      	pop	{r3, pc}
    11a2:	bf00      	nop
    11a4:	1fff8e28 	.word	0x1fff8e28
    11a8:	1fff8b40 	.word	0x1fff8b40

000011ac <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    11ac:	2300      	movs	r3, #0
}
    11ae:	4618      	mov	r0, r3
    11b0:	4770      	bx	lr

000011b2 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    11b2:	b082      	sub	sp, #8
    11b4:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    11b6:	2301      	movs	r3, #1
}
    11b8:	4618      	mov	r0, r3
    11ba:	b002      	add	sp, #8
    11bc:	4770      	bx	lr

000011be <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    11be:	b082      	sub	sp, #8
    11c0:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    11c2:	bf00      	nop
    11c4:	b002      	add	sp, #8
    11c6:	4770      	bx	lr

000011c8 <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    11c8:	b082      	sub	sp, #8
    11ca:	9001      	str	r0, [sp, #4]
    return Micros;
    11cc:	9b01      	ldr	r3, [sp, #4]
}
    11ce:	4618      	mov	r0, r3
    11d0:	b002      	add	sp, #8
    11d2:	4770      	bx	lr

000011d4 <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    11d4:	b500      	push	{lr}
    11d6:	b083      	sub	sp, #12
    11d8:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    11da:	f000 f86d 	bl	12b8 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    11de:	bf00      	nop
    11e0:	b003      	add	sp, #12
    11e2:	f85d fb04 	ldr.w	pc, [sp], #4

000011e6 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    11e6:	b500      	push	{lr}
    11e8:	b085      	sub	sp, #20
    11ea:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    11ec:	2300      	movs	r3, #0
    11ee:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    11f0:	9b01      	ldr	r3, [sp, #4]
    11f2:	2b00      	cmp	r3, #0
    11f4:	d003      	beq.n	11fe <OsIf_GetCounter+0x18>
    11f6:	9b01      	ldr	r3, [sp, #4]
    11f8:	2b01      	cmp	r3, #1
    11fa:	d004      	beq.n	1206 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    11fc:	e007      	b.n	120e <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    11fe:	f7ff ffd5 	bl	11ac <OsIf_Timer_Dummy_GetCounter>
    1202:	9003      	str	r0, [sp, #12]
            break;
    1204:	e003      	b.n	120e <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    1206:	f000 f873 	bl	12f0 <OsIf_Timer_System_GetCounter>
    120a:	9003      	str	r0, [sp, #12]
            break;
    120c:	bf00      	nop
    }

    return Value;
    120e:	9b03      	ldr	r3, [sp, #12]
}
    1210:	4618      	mov	r0, r3
    1212:	b005      	add	sp, #20
    1214:	f85d fb04 	ldr.w	pc, [sp], #4

00001218 <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    1218:	b500      	push	{lr}
    121a:	b085      	sub	sp, #20
    121c:	9001      	str	r0, [sp, #4]
    121e:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1220:	2300      	movs	r3, #0
    1222:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1224:	9b00      	ldr	r3, [sp, #0]
    1226:	2b00      	cmp	r3, #0
    1228:	d003      	beq.n	1232 <OsIf_GetElapsed+0x1a>
    122a:	9b00      	ldr	r3, [sp, #0]
    122c:	2b01      	cmp	r3, #1
    122e:	d005      	beq.n	123c <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1230:	e009      	b.n	1246 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    1232:	9801      	ldr	r0, [sp, #4]
    1234:	f7ff ffbd 	bl	11b2 <OsIf_Timer_Dummy_GetElapsed>
    1238:	9003      	str	r0, [sp, #12]
            break;
    123a:	e004      	b.n	1246 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    123c:	9801      	ldr	r0, [sp, #4]
    123e:	f000 f865 	bl	130c <OsIf_Timer_System_GetElapsed>
    1242:	9003      	str	r0, [sp, #12]
            break;
    1244:	bf00      	nop
    }

    return Value;
    1246:	9b03      	ldr	r3, [sp, #12]
}
    1248:	4618      	mov	r0, r3
    124a:	b005      	add	sp, #20
    124c:	f85d fb04 	ldr.w	pc, [sp], #4

00001250 <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    1250:	b500      	push	{lr}
    1252:	b083      	sub	sp, #12
    1254:	9001      	str	r0, [sp, #4]
    1256:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    1258:	9b00      	ldr	r3, [sp, #0]
    125a:	2b00      	cmp	r3, #0
    125c:	d003      	beq.n	1266 <OsIf_SetTimerFrequency+0x16>
    125e:	9b00      	ldr	r3, [sp, #0]
    1260:	2b01      	cmp	r3, #1
    1262:	d004      	beq.n	126e <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1264:	e007      	b.n	1276 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    1266:	9801      	ldr	r0, [sp, #4]
    1268:	f7ff ffa9 	bl	11be <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    126c:	e003      	b.n	1276 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    126e:	9801      	ldr	r0, [sp, #4]
    1270:	f000 f85c 	bl	132c <OsIf_Timer_System_SetTimerFrequency>
            break;
    1274:	bf00      	nop
    }
}
    1276:	bf00      	nop
    1278:	b003      	add	sp, #12
    127a:	f85d fb04 	ldr.w	pc, [sp], #4

0000127e <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    127e:	b500      	push	{lr}
    1280:	b085      	sub	sp, #20
    1282:	9001      	str	r0, [sp, #4]
    1284:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1286:	2300      	movs	r3, #0
    1288:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    128a:	9b00      	ldr	r3, [sp, #0]
    128c:	2b00      	cmp	r3, #0
    128e:	d003      	beq.n	1298 <OsIf_MicrosToTicks+0x1a>
    1290:	9b00      	ldr	r3, [sp, #0]
    1292:	2b01      	cmp	r3, #1
    1294:	d005      	beq.n	12a2 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1296:	e009      	b.n	12ac <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    1298:	9801      	ldr	r0, [sp, #4]
    129a:	f7ff ff95 	bl	11c8 <OsIf_Timer_Dummy_MicrosToTicks>
    129e:	9003      	str	r0, [sp, #12]
            break;
    12a0:	e004      	b.n	12ac <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    12a2:	9801      	ldr	r0, [sp, #4]
    12a4:	f000 f850 	bl	1348 <OsIf_Timer_System_MicrosToTicks>
    12a8:	9003      	str	r0, [sp, #12]
            break;
    12aa:	bf00      	nop
    }

    return Value;
    12ac:	9b03      	ldr	r3, [sp, #12]
}
    12ae:	4618      	mov	r0, r3
    12b0:	b005      	add	sp, #20
    12b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000012b8 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    12b8:	b500      	push	{lr}
    12ba:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    12bc:	2300      	movs	r3, #0
    12be:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    12c0:	4a09      	ldr	r2, [pc, #36]	; (12e8 <OsIf_Timer_System_Init+0x30>)
    12c2:	9b01      	ldr	r3, [sp, #4]
    12c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    12c8:	685a      	ldr	r2, [r3, #4]
    12ca:	4908      	ldr	r1, [pc, #32]	; (12ec <OsIf_Timer_System_Init+0x34>)
    12cc:	9b01      	ldr	r3, [sp, #4]
    12ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    12d2:	4a06      	ldr	r2, [pc, #24]	; (12ec <OsIf_Timer_System_Init+0x34>)
    12d4:	9b01      	ldr	r3, [sp, #4]
    12d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    12da:	4618      	mov	r0, r3
    12dc:	f000 f868 	bl	13b0 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    12e0:	bf00      	nop
    12e2:	b003      	add	sp, #12
    12e4:	f85d fb04 	ldr.w	pc, [sp], #4
    12e8:	00008434 	.word	0x00008434
    12ec:	1fff8b44 	.word	0x1fff8b44

000012f0 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    12f0:	b500      	push	{lr}
    12f2:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    12f4:	2300      	movs	r3, #0
    12f6:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    12f8:	2300      	movs	r3, #0
    12fa:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    12fc:	f000 f86c 	bl	13d8 <OsIf_Timer_System_Internal_GetCounter>
    1300:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    1302:	9b01      	ldr	r3, [sp, #4]
}
    1304:	4618      	mov	r0, r3
    1306:	b003      	add	sp, #12
    1308:	f85d fb04 	ldr.w	pc, [sp], #4

0000130c <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    130c:	b500      	push	{lr}
    130e:	b085      	sub	sp, #20
    1310:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    1312:	2300      	movs	r3, #0
    1314:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    1316:	2300      	movs	r3, #0
    1318:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    131a:	9801      	ldr	r0, [sp, #4]
    131c:	f000 f864 	bl	13e8 <OsIf_Timer_System_Internal_GetElapsed>
    1320:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    1322:	9b03      	ldr	r3, [sp, #12]
}
    1324:	4618      	mov	r0, r3
    1326:	b005      	add	sp, #20
    1328:	f85d fb04 	ldr.w	pc, [sp], #4

0000132c <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    132c:	b084      	sub	sp, #16
    132e:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1330:	2300      	movs	r3, #0
    1332:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    1334:	4903      	ldr	r1, [pc, #12]	; (1344 <OsIf_Timer_System_SetTimerFrequency+0x18>)
    1336:	9b03      	ldr	r3, [sp, #12]
    1338:	9a01      	ldr	r2, [sp, #4]
    133a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    133e:	bf00      	nop
    1340:	b004      	add	sp, #16
    1342:	4770      	bx	lr
    1344:	1fff8b44 	.word	0x1fff8b44

00001348 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    1348:	b5f0      	push	{r4, r5, r6, r7, lr}
    134a:	b087      	sub	sp, #28
    134c:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    134e:	2100      	movs	r1, #0
    1350:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    1352:	2100      	movs	r1, #0
    1354:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    1356:	9901      	ldr	r1, [sp, #4]
    1358:	2000      	movs	r0, #0
    135a:	460e      	mov	r6, r1
    135c:	4607      	mov	r7, r0
    135e:	4812      	ldr	r0, [pc, #72]	; (13a8 <OsIf_Timer_System_MicrosToTicks+0x60>)
    1360:	9904      	ldr	r1, [sp, #16]
    1362:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    1366:	2000      	movs	r0, #0
    1368:	460c      	mov	r4, r1
    136a:	4605      	mov	r5, r0
    136c:	fb04 f007 	mul.w	r0, r4, r7
    1370:	fb06 f105 	mul.w	r1, r6, r5
    1374:	4401      	add	r1, r0
    1376:	fba6 2304 	umull	r2, r3, r6, r4
    137a:	4419      	add	r1, r3
    137c:	460b      	mov	r3, r1
    137e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    1382:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    1386:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    138a:	4a08      	ldr	r2, [pc, #32]	; (13ac <OsIf_Timer_System_MicrosToTicks+0x64>)
    138c:	f04f 0300 	mov.w	r3, #0
    1390:	f7ff f908 	bl	5a4 <__aeabi_uldivmod>
    1394:	4602      	mov	r2, r0
    1396:	460b      	mov	r3, r1
    1398:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    139c:	9b02      	ldr	r3, [sp, #8]
    139e:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    13a0:	9b05      	ldr	r3, [sp, #20]
}
    13a2:	4618      	mov	r0, r3
    13a4:	b007      	add	sp, #28
    13a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13a8:	1fff8b44 	.word	0x1fff8b44
    13ac:	000f4240 	.word	0x000f4240

000013b0 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    13b0:	b082      	sub	sp, #8
    13b2:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    13b4:	4b07      	ldr	r3, [pc, #28]	; (13d4 <OsIf_Timer_System_Internal_Init+0x24>)
    13b6:	2200      	movs	r2, #0
    13b8:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    13ba:	4b06      	ldr	r3, [pc, #24]	; (13d4 <OsIf_Timer_System_Internal_Init+0x24>)
    13bc:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    13c0:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    13c2:	4b04      	ldr	r3, [pc, #16]	; (13d4 <OsIf_Timer_System_Internal_Init+0x24>)
    13c4:	2200      	movs	r2, #0
    13c6:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    13c8:	4b02      	ldr	r3, [pc, #8]	; (13d4 <OsIf_Timer_System_Internal_Init+0x24>)
    13ca:	2205      	movs	r2, #5
    13cc:	601a      	str	r2, [r3, #0]
}
    13ce:	bf00      	nop
    13d0:	b002      	add	sp, #8
    13d2:	4770      	bx	lr
    13d4:	e000e010 	.word	0xe000e010

000013d8 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    13d8:	4b02      	ldr	r3, [pc, #8]	; (13e4 <OsIf_Timer_System_Internal_GetCounter+0xc>)
    13da:	689b      	ldr	r3, [r3, #8]
    13dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    13e0:	4618      	mov	r0, r3
    13e2:	4770      	bx	lr
    13e4:	e000e010 	.word	0xe000e010

000013e8 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    13e8:	b084      	sub	sp, #16
    13ea:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    13ec:	4b10      	ldr	r3, [pc, #64]	; (1430 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    13ee:	689b      	ldr	r3, [r3, #8]
    13f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    13f4:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    13f6:	2300      	movs	r3, #0
    13f8:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    13fa:	9b01      	ldr	r3, [sp, #4]
    13fc:	681b      	ldr	r3, [r3, #0]
    13fe:	9a02      	ldr	r2, [sp, #8]
    1400:	429a      	cmp	r2, r3
    1402:	d909      	bls.n	1418 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    1404:	9b01      	ldr	r3, [sp, #4]
    1406:	681a      	ldr	r2, [r3, #0]
    1408:	9b02      	ldr	r3, [sp, #8]
    140a:	1ad3      	subs	r3, r2, r3
    140c:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    1410:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    1414:	9303      	str	r3, [sp, #12]
    1416:	e004      	b.n	1422 <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    1418:	9b01      	ldr	r3, [sp, #4]
    141a:	681a      	ldr	r2, [r3, #0]
    141c:	9b02      	ldr	r3, [sp, #8]
    141e:	1ad3      	subs	r3, r2, r3
    1420:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    1422:	9b01      	ldr	r3, [sp, #4]
    1424:	9a02      	ldr	r2, [sp, #8]
    1426:	601a      	str	r2, [r3, #0]

    return dif;
    1428:	9b03      	ldr	r3, [sp, #12]
}
    142a:	4618      	mov	r0, r3
    142c:	b004      	add	sp, #16
    142e:	4770      	bx	lr
    1430:	e000e010 	.word	0xe000e010

00001434 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    1434:	b082      	sub	sp, #8
    1436:	9001      	str	r0, [sp, #4]
    1438:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    143a:	bf00      	nop
    143c:	b002      	add	sp, #8
    143e:	4770      	bx	lr

00001440 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    1440:	b500      	push	{lr}
    1442:	b085      	sub	sp, #20
    1444:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    1446:	4b24      	ldr	r3, [pc, #144]	; (14d8 <Clock_Ip_UpdateDriverContext+0x98>)
    1448:	2201      	movs	r2, #1
    144a:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    144c:	4b23      	ldr	r3, [pc, #140]	; (14dc <Clock_Ip_UpdateDriverContext+0x9c>)
    144e:	681b      	ldr	r3, [r3, #0]
    1450:	2102      	movs	r1, #2
    1452:	4618      	mov	r0, r3
    1454:	f003 fc32 	bl	4cbc <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1458:	2300      	movs	r3, #0
    145a:	f88d 300f 	strb.w	r3, [sp, #15]
    145e:	e015      	b.n	148c <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    1460:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1464:	9a01      	ldr	r2, [sp, #4]
    1466:	334a      	adds	r3, #74	; 0x4a
    1468:	00db      	lsls	r3, r3, #3
    146a:	4413      	add	r3, r2
    146c:	6858      	ldr	r0, [r3, #4]
    146e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1472:	9a01      	ldr	r2, [sp, #4]
    1474:	334a      	adds	r3, #74	; 0x4a
    1476:	00db      	lsls	r3, r3, #3
    1478:	4413      	add	r3, r2
    147a:	689b      	ldr	r3, [r3, #8]
    147c:	4619      	mov	r1, r3
    147e:	f001 fadc 	bl	2a3a <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1482:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1486:	3301      	adds	r3, #1
    1488:	f88d 300f 	strb.w	r3, [sp, #15]
    148c:	9b01      	ldr	r3, [sp, #4]
    148e:	7bdb      	ldrb	r3, [r3, #15]
    1490:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1494:	429a      	cmp	r2, r3
    1496:	d3e3      	bcc.n	1460 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    1498:	f000 f824 	bl	14e4 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    149c:	2301      	movs	r3, #1
    149e:	f88d 300f 	strb.w	r3, [sp, #15]
    14a2:	e00e      	b.n	14c2 <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    14a4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    14a8:	9b01      	ldr	r3, [sp, #4]
    14aa:	327e      	adds	r2, #126	; 0x7e
    14ac:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    14b0:	490b      	ldr	r1, [pc, #44]	; (14e0 <Clock_Ip_UpdateDriverContext+0xa0>)
    14b2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    14b6:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    14b8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    14bc:	3301      	adds	r3, #1
    14be:	f88d 300f 	strb.w	r3, [sp, #15]
    14c2:	9b01      	ldr	r3, [sp, #4]
    14c4:	7cdb      	ldrb	r3, [r3, #19]
    14c6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    14ca:	429a      	cmp	r2, r3
    14cc:	d3ea      	bcc.n	14a4 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    14ce:	bf00      	nop
    14d0:	bf00      	nop
    14d2:	b005      	add	sp, #20
    14d4:	f85d fb04 	ldr.w	pc, [sp], #4
    14d8:	1fff8b10 	.word	0x1fff8b10
    14dc:	1fff8b48 	.word	0x1fff8b48
    14e0:	1fff8b54 	.word	0x1fff8b54

000014e4 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    14e4:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    14e6:	4b23      	ldr	r3, [pc, #140]	; (1574 <Clock_Ip_CallEmptyCallbacks+0x90>)
    14e8:	781b      	ldrb	r3, [r3, #0]
    14ea:	f083 0301 	eor.w	r3, r3, #1
    14ee:	b2db      	uxtb	r3, r3
    14f0:	2b00      	cmp	r3, #0
    14f2:	d03d      	beq.n	1570 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    14f4:	4b1f      	ldr	r3, [pc, #124]	; (1574 <Clock_Ip_CallEmptyCallbacks+0x90>)
    14f6:	2201      	movs	r2, #1
    14f8:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    14fa:	4b1f      	ldr	r3, [pc, #124]	; (1578 <Clock_Ip_CallEmptyCallbacks+0x94>)
    14fc:	685b      	ldr	r3, [r3, #4]
    14fe:	2100      	movs	r1, #0
    1500:	2000      	movs	r0, #0
    1502:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    1504:	4b1c      	ldr	r3, [pc, #112]	; (1578 <Clock_Ip_CallEmptyCallbacks+0x94>)
    1506:	689b      	ldr	r3, [r3, #8]
    1508:	2057      	movs	r0, #87	; 0x57
    150a:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    150c:	4b1b      	ldr	r3, [pc, #108]	; (157c <Clock_Ip_CallEmptyCallbacks+0x98>)
    150e:	681b      	ldr	r3, [r3, #0]
    1510:	2000      	movs	r0, #0
    1512:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    1514:	4b1a      	ldr	r3, [pc, #104]	; (1580 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    1516:	681b      	ldr	r3, [r3, #0]
    1518:	2000      	movs	r0, #0
    151a:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    151c:	4b19      	ldr	r3, [pc, #100]	; (1584 <Clock_Ip_CallEmptyCallbacks+0xa0>)
    151e:	681b      	ldr	r3, [r3, #0]
    1520:	2000      	movs	r0, #0
    1522:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1524:	4b18      	ldr	r3, [pc, #96]	; (1588 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1526:	685b      	ldr	r3, [r3, #4]
    1528:	2000      	movs	r0, #0
    152a:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    152c:	4b16      	ldr	r3, [pc, #88]	; (1588 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    152e:	689b      	ldr	r3, [r3, #8]
    1530:	2057      	movs	r0, #87	; 0x57
    1532:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1534:	4b15      	ldr	r3, [pc, #84]	; (158c <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1536:	681b      	ldr	r3, [r3, #0]
    1538:	2000      	movs	r0, #0
    153a:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    153c:	4b13      	ldr	r3, [pc, #76]	; (158c <Clock_Ip_CallEmptyCallbacks+0xa8>)
    153e:	685b      	ldr	r3, [r3, #4]
    1540:	2100      	movs	r1, #0
    1542:	2057      	movs	r0, #87	; 0x57
    1544:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1546:	4b12      	ldr	r3, [pc, #72]	; (1590 <Clock_Ip_CallEmptyCallbacks+0xac>)
    1548:	681b      	ldr	r3, [r3, #0]
    154a:	2000      	movs	r0, #0
    154c:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    154e:	4b11      	ldr	r3, [pc, #68]	; (1594 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1550:	685b      	ldr	r3, [r3, #4]
    1552:	2000      	movs	r0, #0
    1554:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1556:	4b0f      	ldr	r3, [pc, #60]	; (1594 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1558:	689b      	ldr	r3, [r3, #8]
    155a:	2057      	movs	r0, #87	; 0x57
    155c:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    155e:	4b0e      	ldr	r3, [pc, #56]	; (1598 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    1560:	685b      	ldr	r3, [r3, #4]
    1562:	2000      	movs	r0, #0
    1564:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1566:	4b0d      	ldr	r3, [pc, #52]	; (159c <Clock_Ip_CallEmptyCallbacks+0xb8>)
    1568:	681b      	ldr	r3, [r3, #0]
    156a:	2100      	movs	r1, #0
    156c:	2000      	movs	r0, #0
    156e:	4798      	blx	r3
    }
}
    1570:	bf00      	nop
    1572:	bd08      	pop	{r3, pc}
    1574:	1fff8b4c 	.word	0x1fff8b4c
    1578:	00007ecc 	.word	0x00007ecc
    157c:	00007de0 	.word	0x00007de0
    1580:	00007e1c 	.word	0x00007e1c
    1584:	00007e24 	.word	0x00007e24
    1588:	00007e4c 	.word	0x00007e4c
    158c:	00007e58 	.word	0x00007e58
    1590:	00007e90 	.word	0x00007e90
    1594:	00007edc 	.word	0x00007edc
    1598:	00007f08 	.word	0x00007f08
    159c:	00007f04 	.word	0x00007f04

000015a0 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    15a0:	b500      	push	{lr}
    15a2:	b085      	sub	sp, #20
    15a4:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    15a6:	9b01      	ldr	r3, [sp, #4]
    15a8:	7adb      	ldrb	r3, [r3, #11]
    15aa:	9303      	str	r3, [sp, #12]
    15ac:	e01f      	b.n	15ee <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    15ae:	9b03      	ldr	r3, [sp, #12]
    15b0:	1e5a      	subs	r2, r3, #1
    15b2:	9b01      	ldr	r3, [sp, #4]
    15b4:	320d      	adds	r2, #13
    15b6:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    15ba:	495a      	ldr	r1, [pc, #360]	; (1724 <Clock_Ip_ResetClockConfiguration+0x184>)
    15bc:	4613      	mov	r3, r2
    15be:	00db      	lsls	r3, r3, #3
    15c0:	4413      	add	r3, r2
    15c2:	440b      	add	r3, r1
    15c4:	3301      	adds	r3, #1
    15c6:	781b      	ldrb	r3, [r3, #0]
    15c8:	461a      	mov	r2, r3
    15ca:	4b57      	ldr	r3, [pc, #348]	; (1728 <Clock_Ip_ResetClockConfiguration+0x188>)
    15cc:	5c9b      	ldrb	r3, [r3, r2]
    15ce:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    15d0:	4a56      	ldr	r2, [pc, #344]	; (172c <Clock_Ip_ResetClockConfiguration+0x18c>)
    15d2:	9b02      	ldr	r3, [sp, #8]
    15d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    15d8:	9a03      	ldr	r2, [sp, #12]
    15da:	3a01      	subs	r2, #1
    15dc:	320d      	adds	r2, #13
    15de:	00d2      	lsls	r2, r2, #3
    15e0:	9901      	ldr	r1, [sp, #4]
    15e2:	440a      	add	r2, r1
    15e4:	4610      	mov	r0, r2
    15e6:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    15e8:	9b03      	ldr	r3, [sp, #12]
    15ea:	3b01      	subs	r3, #1
    15ec:	9303      	str	r3, [sp, #12]
    15ee:	9b03      	ldr	r3, [sp, #12]
    15f0:	2b00      	cmp	r3, #0
    15f2:	d1dc      	bne.n	15ae <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    15f4:	9b01      	ldr	r3, [sp, #4]
    15f6:	7b9b      	ldrb	r3, [r3, #14]
    15f8:	9303      	str	r3, [sp, #12]
    15fa:	e026      	b.n	164a <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    15fc:	9b03      	ldr	r3, [sp, #12]
    15fe:	3b01      	subs	r3, #1
    1600:	9a01      	ldr	r2, [sp, #4]
    1602:	3324      	adds	r3, #36	; 0x24
    1604:	011b      	lsls	r3, r3, #4
    1606:	4413      	add	r3, r2
    1608:	3304      	adds	r3, #4
    160a:	681a      	ldr	r2, [r3, #0]
    160c:	4945      	ldr	r1, [pc, #276]	; (1724 <Clock_Ip_ResetClockConfiguration+0x184>)
    160e:	4613      	mov	r3, r2
    1610:	00db      	lsls	r3, r3, #3
    1612:	4413      	add	r3, r2
    1614:	440b      	add	r3, r1
    1616:	3301      	adds	r3, #1
    1618:	781b      	ldrb	r3, [r3, #0]
    161a:	461a      	mov	r2, r3
    161c:	4b44      	ldr	r3, [pc, #272]	; (1730 <Clock_Ip_ResetClockConfiguration+0x190>)
    161e:	5c9b      	ldrb	r3, [r3, r2]
    1620:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    1622:	4944      	ldr	r1, [pc, #272]	; (1734 <Clock_Ip_ResetClockConfiguration+0x194>)
    1624:	9a02      	ldr	r2, [sp, #8]
    1626:	4613      	mov	r3, r2
    1628:	005b      	lsls	r3, r3, #1
    162a:	4413      	add	r3, r2
    162c:	009b      	lsls	r3, r3, #2
    162e:	440b      	add	r3, r1
    1630:	681b      	ldr	r3, [r3, #0]
    1632:	9a03      	ldr	r2, [sp, #12]
    1634:	3a01      	subs	r2, #1
    1636:	3224      	adds	r2, #36	; 0x24
    1638:	0112      	lsls	r2, r2, #4
    163a:	9901      	ldr	r1, [sp, #4]
    163c:	440a      	add	r2, r1
    163e:	3204      	adds	r2, #4
    1640:	4610      	mov	r0, r2
    1642:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1644:	9b03      	ldr	r3, [sp, #12]
    1646:	3b01      	subs	r3, #1
    1648:	9303      	str	r3, [sp, #12]
    164a:	9b03      	ldr	r3, [sp, #12]
    164c:	2b00      	cmp	r3, #0
    164e:	d1d5      	bne.n	15fc <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1650:	9b01      	ldr	r3, [sp, #4]
    1652:	7a9b      	ldrb	r3, [r3, #10]
    1654:	9303      	str	r3, [sp, #12]
    1656:	e02a      	b.n	16ae <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1658:	9b03      	ldr	r3, [sp, #12]
    165a:	1e5a      	subs	r2, r3, #1
    165c:	9901      	ldr	r1, [sp, #4]
    165e:	4613      	mov	r3, r2
    1660:	009b      	lsls	r3, r3, #2
    1662:	4413      	add	r3, r2
    1664:	00db      	lsls	r3, r3, #3
    1666:	440b      	add	r3, r1
    1668:	3340      	adds	r3, #64	; 0x40
    166a:	681a      	ldr	r2, [r3, #0]
    166c:	492d      	ldr	r1, [pc, #180]	; (1724 <Clock_Ip_ResetClockConfiguration+0x184>)
    166e:	4613      	mov	r3, r2
    1670:	00db      	lsls	r3, r3, #3
    1672:	4413      	add	r3, r2
    1674:	440b      	add	r3, r1
    1676:	3301      	adds	r3, #1
    1678:	781b      	ldrb	r3, [r3, #0]
    167a:	461a      	mov	r2, r3
    167c:	4b2e      	ldr	r3, [pc, #184]	; (1738 <Clock_Ip_ResetClockConfiguration+0x198>)
    167e:	5c9b      	ldrb	r3, [r3, r2]
    1680:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    1682:	492e      	ldr	r1, [pc, #184]	; (173c <Clock_Ip_ResetClockConfiguration+0x19c>)
    1684:	9a02      	ldr	r2, [sp, #8]
    1686:	4613      	mov	r3, r2
    1688:	009b      	lsls	r3, r3, #2
    168a:	4413      	add	r3, r2
    168c:	009b      	lsls	r3, r3, #2
    168e:	440b      	add	r3, r1
    1690:	6819      	ldr	r1, [r3, #0]
    1692:	9b03      	ldr	r3, [sp, #12]
    1694:	1e5a      	subs	r2, r3, #1
    1696:	4613      	mov	r3, r2
    1698:	009b      	lsls	r3, r3, #2
    169a:	4413      	add	r3, r2
    169c:	00db      	lsls	r3, r3, #3
    169e:	3340      	adds	r3, #64	; 0x40
    16a0:	9a01      	ldr	r2, [sp, #4]
    16a2:	4413      	add	r3, r2
    16a4:	4618      	mov	r0, r3
    16a6:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    16a8:	9b03      	ldr	r3, [sp, #12]
    16aa:	3b01      	subs	r3, #1
    16ac:	9303      	str	r3, [sp, #12]
    16ae:	9b03      	ldr	r3, [sp, #12]
    16b0:	2b00      	cmp	r3, #0
    16b2:	d1d1      	bne.n	1658 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    16b4:	9b01      	ldr	r3, [sp, #4]
    16b6:	7a5b      	ldrb	r3, [r3, #9]
    16b8:	9303      	str	r3, [sp, #12]
    16ba:	e02b      	b.n	1714 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    16bc:	9b03      	ldr	r3, [sp, #12]
    16be:	1e5a      	subs	r2, r3, #1
    16c0:	9901      	ldr	r1, [sp, #4]
    16c2:	4613      	mov	r3, r2
    16c4:	009b      	lsls	r3, r3, #2
    16c6:	4413      	add	r3, r2
    16c8:	009b      	lsls	r3, r3, #2
    16ca:	440b      	add	r3, r1
    16cc:	332c      	adds	r3, #44	; 0x2c
    16ce:	681a      	ldr	r2, [r3, #0]
    16d0:	4914      	ldr	r1, [pc, #80]	; (1724 <Clock_Ip_ResetClockConfiguration+0x184>)
    16d2:	4613      	mov	r3, r2
    16d4:	00db      	lsls	r3, r3, #3
    16d6:	4413      	add	r3, r2
    16d8:	440b      	add	r3, r1
    16da:	3301      	adds	r3, #1
    16dc:	781b      	ldrb	r3, [r3, #0]
    16de:	461a      	mov	r2, r3
    16e0:	4b17      	ldr	r3, [pc, #92]	; (1740 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    16e2:	5c9b      	ldrb	r3, [r3, r2]
    16e4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    16e6:	4917      	ldr	r1, [pc, #92]	; (1744 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    16e8:	9a02      	ldr	r2, [sp, #8]
    16ea:	4613      	mov	r3, r2
    16ec:	009b      	lsls	r3, r3, #2
    16ee:	4413      	add	r3, r2
    16f0:	009b      	lsls	r3, r3, #2
    16f2:	440b      	add	r3, r1
    16f4:	6819      	ldr	r1, [r3, #0]
    16f6:	9b03      	ldr	r3, [sp, #12]
    16f8:	1e5a      	subs	r2, r3, #1
    16fa:	4613      	mov	r3, r2
    16fc:	009b      	lsls	r3, r3, #2
    16fe:	4413      	add	r3, r2
    1700:	009b      	lsls	r3, r3, #2
    1702:	3328      	adds	r3, #40	; 0x28
    1704:	9a01      	ldr	r2, [sp, #4]
    1706:	4413      	add	r3, r2
    1708:	3304      	adds	r3, #4
    170a:	4618      	mov	r0, r3
    170c:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    170e:	9b03      	ldr	r3, [sp, #12]
    1710:	3b01      	subs	r3, #1
    1712:	9303      	str	r3, [sp, #12]
    1714:	9b03      	ldr	r3, [sp, #12]
    1716:	2b00      	cmp	r3, #0
    1718:	d1d0      	bne.n	16bc <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    171a:	bf00      	nop
    171c:	bf00      	nop
    171e:	b005      	add	sp, #20
    1720:	f85d fb04 	ldr.w	pc, [sp], #4
    1724:	000078d0 	.word	0x000078d0
    1728:	000078a0 	.word	0x000078a0
    172c:	00007f08 	.word	0x00007f08
    1730:	00007880 	.word	0x00007880
    1734:	00007e4c 	.word	0x00007e4c
    1738:	00007890 	.word	0x00007890
    173c:	00007edc 	.word	0x00007edc
    1740:	00007850 	.word	0x00007850
    1744:	00007e24 	.word	0x00007e24

00001748 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    1748:	b500      	push	{lr}
    174a:	b085      	sub	sp, #20
    174c:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    174e:	2301      	movs	r3, #1
    1750:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    1752:	9801      	ldr	r0, [sp, #4]
    1754:	f000 f818 	bl	1788 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    1758:	4b0a      	ldr	r3, [pc, #40]	; (1784 <Clock_Ip_Init+0x3c>)
    175a:	781b      	ldrb	r3, [r3, #0]
    175c:	2b00      	cmp	r3, #0
    175e:	d00a      	beq.n	1776 <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    1760:	f000 fb74 	bl	1e4c <Clock_Ip_GetPllStatus>
    1764:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    1766:	9b02      	ldr	r3, [sp, #8]
    1768:	2b00      	cmp	r3, #0
    176a:	d106      	bne.n	177a <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    176c:	f000 fbf2 	bl	1f54 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    1770:	2300      	movs	r3, #0
    1772:	9303      	str	r3, [sp, #12]
    1774:	e001      	b.n	177a <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    1776:	2300      	movs	r3, #0
    1778:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    177a:	9b03      	ldr	r3, [sp, #12]
}
    177c:	4618      	mov	r0, r3
    177e:	b005      	add	sp, #20
    1780:	f85d fb04 	ldr.w	pc, [sp], #4
    1784:	1fff8b50 	.word	0x1fff8b50

00001788 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    1788:	b510      	push	{r4, lr}
    178a:	b084      	sub	sp, #16
    178c:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    178e:	4a9f      	ldr	r2, [pc, #636]	; (1a0c <Clock_Ip_InitClock+0x284>)
    1790:	9b01      	ldr	r3, [sp, #4]
    1792:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    1794:	2101      	movs	r1, #1
    1796:	9801      	ldr	r0, [sp, #4]
    1798:	f003 fa90 	bl	4cbc <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    179c:	4b9b      	ldr	r3, [pc, #620]	; (1a0c <Clock_Ip_InitClock+0x284>)
    179e:	681b      	ldr	r3, [r3, #0]
    17a0:	2b00      	cmp	r3, #0
    17a2:	d030      	beq.n	1806 <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    17a4:	2300      	movs	r3, #0
    17a6:	9303      	str	r3, [sp, #12]
    17a8:	e027      	b.n	17fa <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    17aa:	9901      	ldr	r1, [sp, #4]
    17ac:	9a03      	ldr	r2, [sp, #12]
    17ae:	4613      	mov	r3, r2
    17b0:	009b      	lsls	r3, r3, #2
    17b2:	4413      	add	r3, r2
    17b4:	009b      	lsls	r3, r3, #2
    17b6:	440b      	add	r3, r1
    17b8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    17bc:	681a      	ldr	r2, [r3, #0]
    17be:	4994      	ldr	r1, [pc, #592]	; (1a10 <Clock_Ip_InitClock+0x288>)
    17c0:	4613      	mov	r3, r2
    17c2:	00db      	lsls	r3, r3, #3
    17c4:	4413      	add	r3, r2
    17c6:	440b      	add	r3, r1
    17c8:	3301      	adds	r3, #1
    17ca:	781b      	ldrb	r3, [r3, #0]
    17cc:	461a      	mov	r2, r3
    17ce:	4b91      	ldr	r3, [pc, #580]	; (1a14 <Clock_Ip_InitClock+0x28c>)
    17d0:	5c9b      	ldrb	r3, [r3, r2]
    17d2:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    17d4:	4a90      	ldr	r2, [pc, #576]	; (1a18 <Clock_Ip_InitClock+0x290>)
    17d6:	9b02      	ldr	r3, [sp, #8]
    17d8:	011b      	lsls	r3, r3, #4
    17da:	4413      	add	r3, r2
    17dc:	6819      	ldr	r1, [r3, #0]
    17de:	9a03      	ldr	r2, [sp, #12]
    17e0:	4613      	mov	r3, r2
    17e2:	009b      	lsls	r3, r3, #2
    17e4:	4413      	add	r3, r2
    17e6:	009b      	lsls	r3, r3, #2
    17e8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    17ec:	9a01      	ldr	r2, [sp, #4]
    17ee:	4413      	add	r3, r2
    17f0:	4618      	mov	r0, r3
    17f2:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    17f4:	9b03      	ldr	r3, [sp, #12]
    17f6:	3301      	adds	r3, #1
    17f8:	9303      	str	r3, [sp, #12]
    17fa:	9b01      	ldr	r3, [sp, #4]
    17fc:	7c9b      	ldrb	r3, [r3, #18]
    17fe:	461a      	mov	r2, r3
    1800:	9b03      	ldr	r3, [sp, #12]
    1802:	4293      	cmp	r3, r2
    1804:	d3d1      	bcc.n	17aa <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    1806:	9801      	ldr	r0, [sp, #4]
    1808:	f7ff feca 	bl	15a0 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    180c:	2300      	movs	r3, #0
    180e:	9303      	str	r3, [sp, #12]
    1810:	e029      	b.n	1866 <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1812:	9901      	ldr	r1, [sp, #4]
    1814:	9a03      	ldr	r2, [sp, #12]
    1816:	4613      	mov	r3, r2
    1818:	005b      	lsls	r3, r3, #1
    181a:	4413      	add	r3, r2
    181c:	009b      	lsls	r3, r3, #2
    181e:	440b      	add	r3, r1
    1820:	3314      	adds	r3, #20
    1822:	681a      	ldr	r2, [r3, #0]
    1824:	497a      	ldr	r1, [pc, #488]	; (1a10 <Clock_Ip_InitClock+0x288>)
    1826:	4613      	mov	r3, r2
    1828:	00db      	lsls	r3, r3, #3
    182a:	4413      	add	r3, r2
    182c:	440b      	add	r3, r1
    182e:	3301      	adds	r3, #1
    1830:	781b      	ldrb	r3, [r3, #0]
    1832:	461a      	mov	r2, r3
    1834:	4b79      	ldr	r3, [pc, #484]	; (1a1c <Clock_Ip_InitClock+0x294>)
    1836:	5c9b      	ldrb	r3, [r3, r2]
    1838:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    183a:	4979      	ldr	r1, [pc, #484]	; (1a20 <Clock_Ip_InitClock+0x298>)
    183c:	9a02      	ldr	r2, [sp, #8]
    183e:	4613      	mov	r3, r2
    1840:	005b      	lsls	r3, r3, #1
    1842:	4413      	add	r3, r2
    1844:	009b      	lsls	r3, r3, #2
    1846:	440b      	add	r3, r1
    1848:	6819      	ldr	r1, [r3, #0]
    184a:	9a03      	ldr	r2, [sp, #12]
    184c:	4613      	mov	r3, r2
    184e:	005b      	lsls	r3, r3, #1
    1850:	4413      	add	r3, r2
    1852:	009b      	lsls	r3, r3, #2
    1854:	3310      	adds	r3, #16
    1856:	9a01      	ldr	r2, [sp, #4]
    1858:	4413      	add	r3, r2
    185a:	3304      	adds	r3, #4
    185c:	4618      	mov	r0, r3
    185e:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    1860:	9b03      	ldr	r3, [sp, #12]
    1862:	3301      	adds	r3, #1
    1864:	9303      	str	r3, [sp, #12]
    1866:	9b01      	ldr	r3, [sp, #4]
    1868:	7a1b      	ldrb	r3, [r3, #8]
    186a:	461a      	mov	r2, r3
    186c:	9b03      	ldr	r3, [sp, #12]
    186e:	4293      	cmp	r3, r2
    1870:	d3cf      	bcc.n	1812 <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    1872:	2300      	movs	r3, #0
    1874:	9303      	str	r3, [sp, #12]
    1876:	e02a      	b.n	18ce <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1878:	9901      	ldr	r1, [sp, #4]
    187a:	9a03      	ldr	r2, [sp, #12]
    187c:	4613      	mov	r3, r2
    187e:	009b      	lsls	r3, r3, #2
    1880:	4413      	add	r3, r2
    1882:	009b      	lsls	r3, r3, #2
    1884:	440b      	add	r3, r1
    1886:	332c      	adds	r3, #44	; 0x2c
    1888:	681a      	ldr	r2, [r3, #0]
    188a:	4961      	ldr	r1, [pc, #388]	; (1a10 <Clock_Ip_InitClock+0x288>)
    188c:	4613      	mov	r3, r2
    188e:	00db      	lsls	r3, r3, #3
    1890:	4413      	add	r3, r2
    1892:	440b      	add	r3, r1
    1894:	3301      	adds	r3, #1
    1896:	781b      	ldrb	r3, [r3, #0]
    1898:	461a      	mov	r2, r3
    189a:	4b62      	ldr	r3, [pc, #392]	; (1a24 <Clock_Ip_InitClock+0x29c>)
    189c:	5c9b      	ldrb	r3, [r3, r2]
    189e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    18a0:	4961      	ldr	r1, [pc, #388]	; (1a28 <Clock_Ip_InitClock+0x2a0>)
    18a2:	9a02      	ldr	r2, [sp, #8]
    18a4:	4613      	mov	r3, r2
    18a6:	009b      	lsls	r3, r3, #2
    18a8:	4413      	add	r3, r2
    18aa:	009b      	lsls	r3, r3, #2
    18ac:	440b      	add	r3, r1
    18ae:	3304      	adds	r3, #4
    18b0:	6819      	ldr	r1, [r3, #0]
    18b2:	9a03      	ldr	r2, [sp, #12]
    18b4:	4613      	mov	r3, r2
    18b6:	009b      	lsls	r3, r3, #2
    18b8:	4413      	add	r3, r2
    18ba:	009b      	lsls	r3, r3, #2
    18bc:	3328      	adds	r3, #40	; 0x28
    18be:	9a01      	ldr	r2, [sp, #4]
    18c0:	4413      	add	r3, r2
    18c2:	3304      	adds	r3, #4
    18c4:	4618      	mov	r0, r3
    18c6:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    18c8:	9b03      	ldr	r3, [sp, #12]
    18ca:	3301      	adds	r3, #1
    18cc:	9303      	str	r3, [sp, #12]
    18ce:	9b01      	ldr	r3, [sp, #4]
    18d0:	7a5b      	ldrb	r3, [r3, #9]
    18d2:	461a      	mov	r2, r3
    18d4:	9b03      	ldr	r3, [sp, #12]
    18d6:	4293      	cmp	r3, r2
    18d8:	d3ce      	bcc.n	1878 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    18da:	9801      	ldr	r0, [sp, #4]
    18dc:	f7ff fdb0 	bl	1440 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    18e0:	2300      	movs	r3, #0
    18e2:	9303      	str	r3, [sp, #12]
    18e4:	e028      	b.n	1938 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    18e6:	9901      	ldr	r1, [sp, #4]
    18e8:	9a03      	ldr	r2, [sp, #12]
    18ea:	4613      	mov	r3, r2
    18ec:	009b      	lsls	r3, r3, #2
    18ee:	4413      	add	r3, r2
    18f0:	009b      	lsls	r3, r3, #2
    18f2:	440b      	add	r3, r1
    18f4:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    18f8:	681a      	ldr	r2, [r3, #0]
    18fa:	4945      	ldr	r1, [pc, #276]	; (1a10 <Clock_Ip_InitClock+0x288>)
    18fc:	4613      	mov	r3, r2
    18fe:	00db      	lsls	r3, r3, #3
    1900:	4413      	add	r3, r2
    1902:	440b      	add	r3, r1
    1904:	3301      	adds	r3, #1
    1906:	781b      	ldrb	r3, [r3, #0]
    1908:	461a      	mov	r2, r3
    190a:	4b48      	ldr	r3, [pc, #288]	; (1a2c <Clock_Ip_InitClock+0x2a4>)
    190c:	5c9b      	ldrb	r3, [r3, r2]
    190e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    1910:	4a47      	ldr	r2, [pc, #284]	; (1a30 <Clock_Ip_InitClock+0x2a8>)
    1912:	9b02      	ldr	r3, [sp, #8]
    1914:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    1918:	9a03      	ldr	r2, [sp, #12]
    191a:	4613      	mov	r3, r2
    191c:	009b      	lsls	r3, r3, #2
    191e:	4413      	add	r3, r2
    1920:	009b      	lsls	r3, r3, #2
    1922:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    1926:	9a01      	ldr	r2, [sp, #4]
    1928:	4413      	add	r3, r2
    192a:	3304      	adds	r3, #4
    192c:	9903      	ldr	r1, [sp, #12]
    192e:	4618      	mov	r0, r3
    1930:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    1932:	9b03      	ldr	r3, [sp, #12]
    1934:	3301      	adds	r3, #1
    1936:	9303      	str	r3, [sp, #12]
    1938:	9b01      	ldr	r3, [sp, #4]
    193a:	7c5b      	ldrb	r3, [r3, #17]
    193c:	461a      	mov	r2, r3
    193e:	9b03      	ldr	r3, [sp, #12]
    1940:	4293      	cmp	r3, r2
    1942:	d3d0      	bcc.n	18e6 <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1944:	2300      	movs	r3, #0
    1946:	9303      	str	r3, [sp, #12]
    1948:	e026      	b.n	1998 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    194a:	9901      	ldr	r1, [sp, #4]
    194c:	9a03      	ldr	r2, [sp, #12]
    194e:	4613      	mov	r3, r2
    1950:	005b      	lsls	r3, r3, #1
    1952:	4413      	add	r3, r2
    1954:	009b      	lsls	r3, r3, #2
    1956:	440b      	add	r3, r1
    1958:	f503 730e 	add.w	r3, r3, #568	; 0x238
    195c:	681a      	ldr	r2, [r3, #0]
    195e:	492c      	ldr	r1, [pc, #176]	; (1a10 <Clock_Ip_InitClock+0x288>)
    1960:	4613      	mov	r3, r2
    1962:	00db      	lsls	r3, r3, #3
    1964:	4413      	add	r3, r2
    1966:	440b      	add	r3, r1
    1968:	3301      	adds	r3, #1
    196a:	781b      	ldrb	r3, [r3, #0]
    196c:	461a      	mov	r2, r3
    196e:	4b31      	ldr	r3, [pc, #196]	; (1a34 <Clock_Ip_InitClock+0x2ac>)
    1970:	5c9b      	ldrb	r3, [r3, r2]
    1972:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    1974:	4a30      	ldr	r2, [pc, #192]	; (1a38 <Clock_Ip_InitClock+0x2b0>)
    1976:	9b02      	ldr	r3, [sp, #8]
    1978:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    197c:	9a03      	ldr	r2, [sp, #12]
    197e:	4613      	mov	r3, r2
    1980:	005b      	lsls	r3, r3, #1
    1982:	4413      	add	r3, r2
    1984:	009b      	lsls	r3, r3, #2
    1986:	f503 730e 	add.w	r3, r3, #568	; 0x238
    198a:	9a01      	ldr	r2, [sp, #4]
    198c:	4413      	add	r3, r2
    198e:	4618      	mov	r0, r3
    1990:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1992:	9b03      	ldr	r3, [sp, #12]
    1994:	3301      	adds	r3, #1
    1996:	9303      	str	r3, [sp, #12]
    1998:	9b01      	ldr	r3, [sp, #4]
    199a:	7b5b      	ldrb	r3, [r3, #13]
    199c:	461a      	mov	r2, r3
    199e:	9b03      	ldr	r3, [sp, #12]
    19a0:	4293      	cmp	r3, r2
    19a2:	d3d2      	bcc.n	194a <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    19a4:	2300      	movs	r3, #0
    19a6:	9303      	str	r3, [sp, #12]
    19a8:	e026      	b.n	19f8 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    19aa:	9901      	ldr	r1, [sp, #4]
    19ac:	9a03      	ldr	r2, [sp, #12]
    19ae:	4613      	mov	r3, r2
    19b0:	005b      	lsls	r3, r3, #1
    19b2:	4413      	add	r3, r2
    19b4:	009b      	lsls	r3, r3, #2
    19b6:	440b      	add	r3, r1
    19b8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    19bc:	681a      	ldr	r2, [r3, #0]
    19be:	4914      	ldr	r1, [pc, #80]	; (1a10 <Clock_Ip_InitClock+0x288>)
    19c0:	4613      	mov	r3, r2
    19c2:	00db      	lsls	r3, r3, #3
    19c4:	4413      	add	r3, r2
    19c6:	440b      	add	r3, r1
    19c8:	3301      	adds	r3, #1
    19ca:	781b      	ldrb	r3, [r3, #0]
    19cc:	461a      	mov	r2, r3
    19ce:	4b1b      	ldr	r3, [pc, #108]	; (1a3c <Clock_Ip_InitClock+0x2b4>)
    19d0:	5c9b      	ldrb	r3, [r3, r2]
    19d2:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    19d4:	4a1a      	ldr	r2, [pc, #104]	; (1a40 <Clock_Ip_InitClock+0x2b8>)
    19d6:	9b02      	ldr	r3, [sp, #8]
    19d8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    19dc:	9a03      	ldr	r2, [sp, #12]
    19de:	4613      	mov	r3, r2
    19e0:	005b      	lsls	r3, r3, #1
    19e2:	4413      	add	r3, r2
    19e4:	009b      	lsls	r3, r3, #2
    19e6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    19ea:	9a01      	ldr	r2, [sp, #4]
    19ec:	4413      	add	r3, r2
    19ee:	4618      	mov	r0, r3
    19f0:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    19f2:	9b03      	ldr	r3, [sp, #12]
    19f4:	3301      	adds	r3, #1
    19f6:	9303      	str	r3, [sp, #12]
    19f8:	9b01      	ldr	r3, [sp, #4]
    19fa:	7b1b      	ldrb	r3, [r3, #12]
    19fc:	461a      	mov	r2, r3
    19fe:	9b03      	ldr	r3, [sp, #12]
    1a00:	4293      	cmp	r3, r2
    1a02:	d3d2      	bcc.n	19aa <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1a04:	2300      	movs	r3, #0
    1a06:	9303      	str	r3, [sp, #12]
    1a08:	e044      	b.n	1a94 <Clock_Ip_InitClock+0x30c>
    1a0a:	bf00      	nop
    1a0c:	1fff8b48 	.word	0x1fff8b48
    1a10:	000078d0 	.word	0x000078d0
    1a14:	000078c0 	.word	0x000078c0
    1a18:	00007ecc 	.word	0x00007ecc
    1a1c:	00007860 	.word	0x00007860
    1a20:	00007e90 	.word	0x00007e90
    1a24:	00007850 	.word	0x00007850
    1a28:	00007e24 	.word	0x00007e24
    1a2c:	000078b0 	.word	0x000078b0
    1a30:	00007f04 	.word	0x00007f04
    1a34:	00007840 	.word	0x00007840
    1a38:	00007e1c 	.word	0x00007e1c
    1a3c:	00007830 	.word	0x00007830
    1a40:	00007de0 	.word	0x00007de0
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    1a44:	9901      	ldr	r1, [sp, #4]
    1a46:	9a03      	ldr	r2, [sp, #12]
    1a48:	4613      	mov	r3, r2
    1a4a:	005b      	lsls	r3, r3, #1
    1a4c:	4413      	add	r3, r2
    1a4e:	009b      	lsls	r3, r3, #2
    1a50:	440b      	add	r3, r1
    1a52:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1a56:	681a      	ldr	r2, [r3, #0]
    1a58:	49ac      	ldr	r1, [pc, #688]	; (1d0c <Clock_Ip_InitClock+0x584>)
    1a5a:	4613      	mov	r3, r2
    1a5c:	00db      	lsls	r3, r3, #3
    1a5e:	4413      	add	r3, r2
    1a60:	440b      	add	r3, r1
    1a62:	3301      	adds	r3, #1
    1a64:	781b      	ldrb	r3, [r3, #0]
    1a66:	461a      	mov	r2, r3
    1a68:	4ba9      	ldr	r3, [pc, #676]	; (1d10 <Clock_Ip_InitClock+0x588>)
    1a6a:	5c9b      	ldrb	r3, [r3, r2]
    1a6c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    1a6e:	4aa9      	ldr	r2, [pc, #676]	; (1d14 <Clock_Ip_InitClock+0x58c>)
    1a70:	9b02      	ldr	r3, [sp, #8]
    1a72:	00db      	lsls	r3, r3, #3
    1a74:	4413      	add	r3, r2
    1a76:	6859      	ldr	r1, [r3, #4]
    1a78:	9a03      	ldr	r2, [sp, #12]
    1a7a:	4613      	mov	r3, r2
    1a7c:	005b      	lsls	r3, r3, #1
    1a7e:	4413      	add	r3, r2
    1a80:	009b      	lsls	r3, r3, #2
    1a82:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1a86:	9a01      	ldr	r2, [sp, #4]
    1a88:	4413      	add	r3, r2
    1a8a:	4618      	mov	r0, r3
    1a8c:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1a8e:	9b03      	ldr	r3, [sp, #12]
    1a90:	3301      	adds	r3, #1
    1a92:	9303      	str	r3, [sp, #12]
    1a94:	9b01      	ldr	r3, [sp, #4]
    1a96:	7b5b      	ldrb	r3, [r3, #13]
    1a98:	461a      	mov	r2, r3
    1a9a:	9b03      	ldr	r3, [sp, #12]
    1a9c:	4293      	cmp	r3, r2
    1a9e:	d3d1      	bcc.n	1a44 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    1aa0:	2300      	movs	r3, #0
    1aa2:	9303      	str	r3, [sp, #12]
    1aa4:	e029      	b.n	1afa <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    1aa6:	9901      	ldr	r1, [sp, #4]
    1aa8:	9a03      	ldr	r2, [sp, #12]
    1aaa:	4613      	mov	r3, r2
    1aac:	009b      	lsls	r3, r3, #2
    1aae:	4413      	add	r3, r2
    1ab0:	00db      	lsls	r3, r3, #3
    1ab2:	440b      	add	r3, r1
    1ab4:	3340      	adds	r3, #64	; 0x40
    1ab6:	681a      	ldr	r2, [r3, #0]
    1ab8:	4994      	ldr	r1, [pc, #592]	; (1d0c <Clock_Ip_InitClock+0x584>)
    1aba:	4613      	mov	r3, r2
    1abc:	00db      	lsls	r3, r3, #3
    1abe:	4413      	add	r3, r2
    1ac0:	440b      	add	r3, r1
    1ac2:	3301      	adds	r3, #1
    1ac4:	781b      	ldrb	r3, [r3, #0]
    1ac6:	461a      	mov	r2, r3
    1ac8:	4b93      	ldr	r3, [pc, #588]	; (1d18 <Clock_Ip_InitClock+0x590>)
    1aca:	5c9b      	ldrb	r3, [r3, r2]
    1acc:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    1ace:	4993      	ldr	r1, [pc, #588]	; (1d1c <Clock_Ip_InitClock+0x594>)
    1ad0:	9a02      	ldr	r2, [sp, #8]
    1ad2:	4613      	mov	r3, r2
    1ad4:	009b      	lsls	r3, r3, #2
    1ad6:	4413      	add	r3, r2
    1ad8:	009b      	lsls	r3, r3, #2
    1ada:	440b      	add	r3, r1
    1adc:	3304      	adds	r3, #4
    1ade:	6819      	ldr	r1, [r3, #0]
    1ae0:	9a03      	ldr	r2, [sp, #12]
    1ae2:	4613      	mov	r3, r2
    1ae4:	009b      	lsls	r3, r3, #2
    1ae6:	4413      	add	r3, r2
    1ae8:	00db      	lsls	r3, r3, #3
    1aea:	3340      	adds	r3, #64	; 0x40
    1aec:	9a01      	ldr	r2, [sp, #4]
    1aee:	4413      	add	r3, r2
    1af0:	4618      	mov	r0, r3
    1af2:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    1af4:	9b03      	ldr	r3, [sp, #12]
    1af6:	3301      	adds	r3, #1
    1af8:	9303      	str	r3, [sp, #12]
    1afa:	9b01      	ldr	r3, [sp, #4]
    1afc:	7a9b      	ldrb	r3, [r3, #10]
    1afe:	461a      	mov	r2, r3
    1b00:	9b03      	ldr	r3, [sp, #12]
    1b02:	4293      	cmp	r3, r2
    1b04:	d3cf      	bcc.n	1aa6 <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    1b06:	2300      	movs	r3, #0
    1b08:	9303      	str	r3, [sp, #12]
    1b0a:	e029      	b.n	1b60 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1b0c:	9901      	ldr	r1, [sp, #4]
    1b0e:	9a03      	ldr	r2, [sp, #12]
    1b10:	4613      	mov	r3, r2
    1b12:	009b      	lsls	r3, r3, #2
    1b14:	4413      	add	r3, r2
    1b16:	009b      	lsls	r3, r3, #2
    1b18:	440b      	add	r3, r1
    1b1a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1b1e:	681a      	ldr	r2, [r3, #0]
    1b20:	497a      	ldr	r1, [pc, #488]	; (1d0c <Clock_Ip_InitClock+0x584>)
    1b22:	4613      	mov	r3, r2
    1b24:	00db      	lsls	r3, r3, #3
    1b26:	4413      	add	r3, r2
    1b28:	440b      	add	r3, r1
    1b2a:	3301      	adds	r3, #1
    1b2c:	781b      	ldrb	r3, [r3, #0]
    1b2e:	461a      	mov	r2, r3
    1b30:	4b7b      	ldr	r3, [pc, #492]	; (1d20 <Clock_Ip_InitClock+0x598>)
    1b32:	5c9b      	ldrb	r3, [r3, r2]
    1b34:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    1b36:	4a7b      	ldr	r2, [pc, #492]	; (1d24 <Clock_Ip_InitClock+0x59c>)
    1b38:	9b02      	ldr	r3, [sp, #8]
    1b3a:	011b      	lsls	r3, r3, #4
    1b3c:	4413      	add	r3, r2
    1b3e:	3304      	adds	r3, #4
    1b40:	681c      	ldr	r4, [r3, #0]
    1b42:	9a03      	ldr	r2, [sp, #12]
    1b44:	4613      	mov	r3, r2
    1b46:	009b      	lsls	r3, r3, #2
    1b48:	4413      	add	r3, r2
    1b4a:	009b      	lsls	r3, r3, #2
    1b4c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1b50:	9a01      	ldr	r2, [sp, #4]
    1b52:	4413      	add	r3, r2
    1b54:	9903      	ldr	r1, [sp, #12]
    1b56:	4618      	mov	r0, r3
    1b58:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    1b5a:	9b03      	ldr	r3, [sp, #12]
    1b5c:	3301      	adds	r3, #1
    1b5e:	9303      	str	r3, [sp, #12]
    1b60:	9b01      	ldr	r3, [sp, #4]
    1b62:	7c9b      	ldrb	r3, [r3, #18]
    1b64:	461a      	mov	r2, r3
    1b66:	9b03      	ldr	r3, [sp, #12]
    1b68:	4293      	cmp	r3, r2
    1b6a:	d3cf      	bcc.n	1b0c <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    1b6c:	2300      	movs	r3, #0
    1b6e:	9303      	str	r3, [sp, #12]
    1b70:	e02a      	b.n	1bc8 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1b72:	9901      	ldr	r1, [sp, #4]
    1b74:	9a03      	ldr	r2, [sp, #12]
    1b76:	4613      	mov	r3, r2
    1b78:	009b      	lsls	r3, r3, #2
    1b7a:	4413      	add	r3, r2
    1b7c:	009b      	lsls	r3, r3, #2
    1b7e:	440b      	add	r3, r1
    1b80:	332c      	adds	r3, #44	; 0x2c
    1b82:	681a      	ldr	r2, [r3, #0]
    1b84:	4961      	ldr	r1, [pc, #388]	; (1d0c <Clock_Ip_InitClock+0x584>)
    1b86:	4613      	mov	r3, r2
    1b88:	00db      	lsls	r3, r3, #3
    1b8a:	4413      	add	r3, r2
    1b8c:	440b      	add	r3, r1
    1b8e:	3301      	adds	r3, #1
    1b90:	781b      	ldrb	r3, [r3, #0]
    1b92:	461a      	mov	r2, r3
    1b94:	4b64      	ldr	r3, [pc, #400]	; (1d28 <Clock_Ip_InitClock+0x5a0>)
    1b96:	5c9b      	ldrb	r3, [r3, r2]
    1b98:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    1b9a:	4964      	ldr	r1, [pc, #400]	; (1d2c <Clock_Ip_InitClock+0x5a4>)
    1b9c:	9a02      	ldr	r2, [sp, #8]
    1b9e:	4613      	mov	r3, r2
    1ba0:	009b      	lsls	r3, r3, #2
    1ba2:	4413      	add	r3, r2
    1ba4:	009b      	lsls	r3, r3, #2
    1ba6:	440b      	add	r3, r1
    1ba8:	3308      	adds	r3, #8
    1baa:	6819      	ldr	r1, [r3, #0]
    1bac:	9a03      	ldr	r2, [sp, #12]
    1bae:	4613      	mov	r3, r2
    1bb0:	009b      	lsls	r3, r3, #2
    1bb2:	4413      	add	r3, r2
    1bb4:	009b      	lsls	r3, r3, #2
    1bb6:	3328      	adds	r3, #40	; 0x28
    1bb8:	9a01      	ldr	r2, [sp, #4]
    1bba:	4413      	add	r3, r2
    1bbc:	3304      	adds	r3, #4
    1bbe:	4618      	mov	r0, r3
    1bc0:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    1bc2:	9b03      	ldr	r3, [sp, #12]
    1bc4:	3301      	adds	r3, #1
    1bc6:	9303      	str	r3, [sp, #12]
    1bc8:	9b01      	ldr	r3, [sp, #4]
    1bca:	7a5b      	ldrb	r3, [r3, #9]
    1bcc:	461a      	mov	r2, r3
    1bce:	9b03      	ldr	r3, [sp, #12]
    1bd0:	4293      	cmp	r3, r2
    1bd2:	d3ce      	bcc.n	1b72 <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    1bd4:	2300      	movs	r3, #0
    1bd6:	9303      	str	r3, [sp, #12]
    1bd8:	e029      	b.n	1c2e <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    1bda:	9901      	ldr	r1, [sp, #4]
    1bdc:	9a03      	ldr	r2, [sp, #12]
    1bde:	4613      	mov	r3, r2
    1be0:	009b      	lsls	r3, r3, #2
    1be2:	4413      	add	r3, r2
    1be4:	00db      	lsls	r3, r3, #3
    1be6:	440b      	add	r3, r1
    1be8:	3340      	adds	r3, #64	; 0x40
    1bea:	681a      	ldr	r2, [r3, #0]
    1bec:	4947      	ldr	r1, [pc, #284]	; (1d0c <Clock_Ip_InitClock+0x584>)
    1bee:	4613      	mov	r3, r2
    1bf0:	00db      	lsls	r3, r3, #3
    1bf2:	4413      	add	r3, r2
    1bf4:	440b      	add	r3, r1
    1bf6:	3301      	adds	r3, #1
    1bf8:	781b      	ldrb	r3, [r3, #0]
    1bfa:	461a      	mov	r2, r3
    1bfc:	4b46      	ldr	r3, [pc, #280]	; (1d18 <Clock_Ip_InitClock+0x590>)
    1bfe:	5c9b      	ldrb	r3, [r3, r2]
    1c00:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    1c02:	4946      	ldr	r1, [pc, #280]	; (1d1c <Clock_Ip_InitClock+0x594>)
    1c04:	9a02      	ldr	r2, [sp, #8]
    1c06:	4613      	mov	r3, r2
    1c08:	009b      	lsls	r3, r3, #2
    1c0a:	4413      	add	r3, r2
    1c0c:	009b      	lsls	r3, r3, #2
    1c0e:	440b      	add	r3, r1
    1c10:	330c      	adds	r3, #12
    1c12:	6819      	ldr	r1, [r3, #0]
    1c14:	9a03      	ldr	r2, [sp, #12]
    1c16:	4613      	mov	r3, r2
    1c18:	009b      	lsls	r3, r3, #2
    1c1a:	4413      	add	r3, r2
    1c1c:	00db      	lsls	r3, r3, #3
    1c1e:	3340      	adds	r3, #64	; 0x40
    1c20:	9a01      	ldr	r2, [sp, #4]
    1c22:	4413      	add	r3, r2
    1c24:	4618      	mov	r0, r3
    1c26:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    1c28:	9b03      	ldr	r3, [sp, #12]
    1c2a:	3301      	adds	r3, #1
    1c2c:	9303      	str	r3, [sp, #12]
    1c2e:	9b01      	ldr	r3, [sp, #4]
    1c30:	7a9b      	ldrb	r3, [r3, #10]
    1c32:	461a      	mov	r2, r3
    1c34:	9b03      	ldr	r3, [sp, #12]
    1c36:	4293      	cmp	r3, r2
    1c38:	d3cf      	bcc.n	1bda <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    1c3a:	2300      	movs	r3, #0
    1c3c:	9303      	str	r3, [sp, #12]
    1c3e:	e025      	b.n	1c8c <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    1c40:	9a01      	ldr	r2, [sp, #4]
    1c42:	9b03      	ldr	r3, [sp, #12]
    1c44:	3324      	adds	r3, #36	; 0x24
    1c46:	011b      	lsls	r3, r3, #4
    1c48:	4413      	add	r3, r2
    1c4a:	3304      	adds	r3, #4
    1c4c:	681a      	ldr	r2, [r3, #0]
    1c4e:	492f      	ldr	r1, [pc, #188]	; (1d0c <Clock_Ip_InitClock+0x584>)
    1c50:	4613      	mov	r3, r2
    1c52:	00db      	lsls	r3, r3, #3
    1c54:	4413      	add	r3, r2
    1c56:	440b      	add	r3, r1
    1c58:	3301      	adds	r3, #1
    1c5a:	781b      	ldrb	r3, [r3, #0]
    1c5c:	461a      	mov	r2, r3
    1c5e:	4b34      	ldr	r3, [pc, #208]	; (1d30 <Clock_Ip_InitClock+0x5a8>)
    1c60:	5c9b      	ldrb	r3, [r3, r2]
    1c62:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    1c64:	4933      	ldr	r1, [pc, #204]	; (1d34 <Clock_Ip_InitClock+0x5ac>)
    1c66:	9a02      	ldr	r2, [sp, #8]
    1c68:	4613      	mov	r3, r2
    1c6a:	005b      	lsls	r3, r3, #1
    1c6c:	4413      	add	r3, r2
    1c6e:	009b      	lsls	r3, r3, #2
    1c70:	440b      	add	r3, r1
    1c72:	3304      	adds	r3, #4
    1c74:	681b      	ldr	r3, [r3, #0]
    1c76:	9a03      	ldr	r2, [sp, #12]
    1c78:	3224      	adds	r2, #36	; 0x24
    1c7a:	0112      	lsls	r2, r2, #4
    1c7c:	9901      	ldr	r1, [sp, #4]
    1c7e:	440a      	add	r2, r1
    1c80:	3204      	adds	r2, #4
    1c82:	4610      	mov	r0, r2
    1c84:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    1c86:	9b03      	ldr	r3, [sp, #12]
    1c88:	3301      	adds	r3, #1
    1c8a:	9303      	str	r3, [sp, #12]
    1c8c:	9b01      	ldr	r3, [sp, #4]
    1c8e:	7b9b      	ldrb	r3, [r3, #14]
    1c90:	461a      	mov	r2, r3
    1c92:	9b03      	ldr	r3, [sp, #12]
    1c94:	4293      	cmp	r3, r2
    1c96:	d3d3      	bcc.n	1c40 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    1c98:	4b27      	ldr	r3, [pc, #156]	; (1d38 <Clock_Ip_InitClock+0x5b0>)
    1c9a:	2200      	movs	r2, #0
    1c9c:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    1c9e:	4b26      	ldr	r3, [pc, #152]	; (1d38 <Clock_Ip_InitClock+0x5b0>)
    1ca0:	2200      	movs	r2, #0
    1ca2:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    1ca4:	4b24      	ldr	r3, [pc, #144]	; (1d38 <Clock_Ip_InitClock+0x5b0>)
    1ca6:	2201      	movs	r2, #1
    1ca8:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    1caa:	4b23      	ldr	r3, [pc, #140]	; (1d38 <Clock_Ip_InitClock+0x5b0>)
    1cac:	2200      	movs	r2, #0
    1cae:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    1cb0:	f000 fa9c 	bl	21ec <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    1cb4:	2300      	movs	r3, #0
    1cb6:	9303      	str	r3, [sp, #12]
    1cb8:	e04c      	b.n	1d54 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    1cba:	9a01      	ldr	r2, [sp, #4]
    1cbc:	9b03      	ldr	r3, [sp, #12]
    1cbe:	330d      	adds	r3, #13
    1cc0:	00db      	lsls	r3, r3, #3
    1cc2:	4413      	add	r3, r2
    1cc4:	685b      	ldr	r3, [r3, #4]
    1cc6:	4a1d      	ldr	r2, [pc, #116]	; (1d3c <Clock_Ip_InitClock+0x5b4>)
    1cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1ccc:	2b03      	cmp	r3, #3
    1cce:	d03b      	beq.n	1d48 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    1cd0:	9b01      	ldr	r3, [sp, #4]
    1cd2:	9a03      	ldr	r2, [sp, #12]
    1cd4:	320d      	adds	r2, #13
    1cd6:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1cda:	490c      	ldr	r1, [pc, #48]	; (1d0c <Clock_Ip_InitClock+0x584>)
    1cdc:	4613      	mov	r3, r2
    1cde:	00db      	lsls	r3, r3, #3
    1ce0:	4413      	add	r3, r2
    1ce2:	440b      	add	r3, r1
    1ce4:	3301      	adds	r3, #1
    1ce6:	781b      	ldrb	r3, [r3, #0]
    1ce8:	461a      	mov	r2, r3
    1cea:	4b15      	ldr	r3, [pc, #84]	; (1d40 <Clock_Ip_InitClock+0x5b8>)
    1cec:	5c9b      	ldrb	r3, [r3, r2]
    1cee:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    1cf0:	4a14      	ldr	r2, [pc, #80]	; (1d44 <Clock_Ip_InitClock+0x5bc>)
    1cf2:	9b02      	ldr	r3, [sp, #8]
    1cf4:	00db      	lsls	r3, r3, #3
    1cf6:	4413      	add	r3, r2
    1cf8:	685b      	ldr	r3, [r3, #4]
    1cfa:	9a03      	ldr	r2, [sp, #12]
    1cfc:	320d      	adds	r2, #13
    1cfe:	00d2      	lsls	r2, r2, #3
    1d00:	9901      	ldr	r1, [sp, #4]
    1d02:	440a      	add	r2, r1
    1d04:	4610      	mov	r0, r2
    1d06:	4798      	blx	r3
    1d08:	e021      	b.n	1d4e <Clock_Ip_InitClock+0x5c6>
    1d0a:	bf00      	nop
    1d0c:	000078d0 	.word	0x000078d0
    1d10:	00007840 	.word	0x00007840
    1d14:	00007e1c 	.word	0x00007e1c
    1d18:	00007890 	.word	0x00007890
    1d1c:	00007edc 	.word	0x00007edc
    1d20:	000078c0 	.word	0x000078c0
    1d24:	00007ecc 	.word	0x00007ecc
    1d28:	00007850 	.word	0x00007850
    1d2c:	00007e24 	.word	0x00007e24
    1d30:	00007880 	.word	0x00007880
    1d34:	00007e4c 	.word	0x00007e4c
    1d38:	1fff8b50 	.word	0x1fff8b50
    1d3c:	00007d1c 	.word	0x00007d1c
    1d40:	000078a0 	.word	0x000078a0
    1d44:	00007f08 	.word	0x00007f08
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    1d48:	4b3a      	ldr	r3, [pc, #232]	; (1e34 <Clock_Ip_InitClock+0x6ac>)
    1d4a:	2201      	movs	r2, #1
    1d4c:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    1d4e:	9b03      	ldr	r3, [sp, #12]
    1d50:	3301      	adds	r3, #1
    1d52:	9303      	str	r3, [sp, #12]
    1d54:	9b01      	ldr	r3, [sp, #4]
    1d56:	7adb      	ldrb	r3, [r3, #11]
    1d58:	461a      	mov	r2, r3
    1d5a:	9b03      	ldr	r3, [sp, #12]
    1d5c:	4293      	cmp	r3, r2
    1d5e:	d3ac      	bcc.n	1cba <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    1d60:	4b34      	ldr	r3, [pc, #208]	; (1e34 <Clock_Ip_InitClock+0x6ac>)
    1d62:	781b      	ldrb	r3, [r3, #0]
    1d64:	f083 0301 	eor.w	r3, r3, #1
    1d68:	b2db      	uxtb	r3, r3
    1d6a:	2b00      	cmp	r3, #0
    1d6c:	d05e      	beq.n	1e2c <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1d6e:	2300      	movs	r3, #0
    1d70:	9303      	str	r3, [sp, #12]
    1d72:	e01f      	b.n	1db4 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    1d74:	9a01      	ldr	r2, [sp, #4]
    1d76:	9b03      	ldr	r3, [sp, #12]
    1d78:	334e      	adds	r3, #78	; 0x4e
    1d7a:	00db      	lsls	r3, r3, #3
    1d7c:	4413      	add	r3, r2
    1d7e:	685a      	ldr	r2, [r3, #4]
    1d80:	492d      	ldr	r1, [pc, #180]	; (1e38 <Clock_Ip_InitClock+0x6b0>)
    1d82:	4613      	mov	r3, r2
    1d84:	00db      	lsls	r3, r3, #3
    1d86:	4413      	add	r3, r2
    1d88:	440b      	add	r3, r1
    1d8a:	3301      	adds	r3, #1
    1d8c:	781b      	ldrb	r3, [r3, #0]
    1d8e:	461a      	mov	r2, r3
    1d90:	4b2a      	ldr	r3, [pc, #168]	; (1e3c <Clock_Ip_InitClock+0x6b4>)
    1d92:	5c9b      	ldrb	r3, [r3, r2]
    1d94:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    1d96:	4a2a      	ldr	r2, [pc, #168]	; (1e40 <Clock_Ip_InitClock+0x6b8>)
    1d98:	9b02      	ldr	r3, [sp, #8]
    1d9a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1d9e:	9a03      	ldr	r2, [sp, #12]
    1da0:	324e      	adds	r2, #78	; 0x4e
    1da2:	00d2      	lsls	r2, r2, #3
    1da4:	9901      	ldr	r1, [sp, #4]
    1da6:	440a      	add	r2, r1
    1da8:	3204      	adds	r2, #4
    1daa:	4610      	mov	r0, r2
    1dac:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1dae:	9b03      	ldr	r3, [sp, #12]
    1db0:	3301      	adds	r3, #1
    1db2:	9303      	str	r3, [sp, #12]
    1db4:	9b01      	ldr	r3, [sp, #4]
    1db6:	7c1b      	ldrb	r3, [r3, #16]
    1db8:	461a      	mov	r2, r3
    1dba:	9b03      	ldr	r3, [sp, #12]
    1dbc:	4293      	cmp	r3, r2
    1dbe:	d3d9      	bcc.n	1d74 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    1dc0:	2300      	movs	r3, #0
    1dc2:	9303      	str	r3, [sp, #12]
    1dc4:	e028      	b.n	1e18 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1dc6:	9901      	ldr	r1, [sp, #4]
    1dc8:	9a03      	ldr	r2, [sp, #12]
    1dca:	4613      	mov	r3, r2
    1dcc:	009b      	lsls	r3, r3, #2
    1dce:	4413      	add	r3, r2
    1dd0:	009b      	lsls	r3, r3, #2
    1dd2:	440b      	add	r3, r1
    1dd4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1dd8:	681a      	ldr	r2, [r3, #0]
    1dda:	4917      	ldr	r1, [pc, #92]	; (1e38 <Clock_Ip_InitClock+0x6b0>)
    1ddc:	4613      	mov	r3, r2
    1dde:	00db      	lsls	r3, r3, #3
    1de0:	4413      	add	r3, r2
    1de2:	440b      	add	r3, r1
    1de4:	3301      	adds	r3, #1
    1de6:	781b      	ldrb	r3, [r3, #0]
    1de8:	461a      	mov	r2, r3
    1dea:	4b16      	ldr	r3, [pc, #88]	; (1e44 <Clock_Ip_InitClock+0x6bc>)
    1dec:	5c9b      	ldrb	r3, [r3, r2]
    1dee:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    1df0:	4a15      	ldr	r2, [pc, #84]	; (1e48 <Clock_Ip_InitClock+0x6c0>)
    1df2:	9b02      	ldr	r3, [sp, #8]
    1df4:	011b      	lsls	r3, r3, #4
    1df6:	4413      	add	r3, r2
    1df8:	330c      	adds	r3, #12
    1dfa:	6819      	ldr	r1, [r3, #0]
    1dfc:	9a03      	ldr	r2, [sp, #12]
    1dfe:	4613      	mov	r3, r2
    1e00:	009b      	lsls	r3, r3, #2
    1e02:	4413      	add	r3, r2
    1e04:	009b      	lsls	r3, r3, #2
    1e06:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1e0a:	9a01      	ldr	r2, [sp, #4]
    1e0c:	4413      	add	r3, r2
    1e0e:	4618      	mov	r0, r3
    1e10:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    1e12:	9b03      	ldr	r3, [sp, #12]
    1e14:	3301      	adds	r3, #1
    1e16:	9303      	str	r3, [sp, #12]
    1e18:	9b01      	ldr	r3, [sp, #4]
    1e1a:	7c9b      	ldrb	r3, [r3, #18]
    1e1c:	461a      	mov	r2, r3
    1e1e:	9b03      	ldr	r3, [sp, #12]
    1e20:	4293      	cmp	r3, r2
    1e22:	d3d0      	bcc.n	1dc6 <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    1e24:	2104      	movs	r1, #4
    1e26:	9801      	ldr	r0, [sp, #4]
    1e28:	f002 ff48 	bl	4cbc <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    1e2c:	bf00      	nop
    1e2e:	b004      	add	sp, #16
    1e30:	bd10      	pop	{r4, pc}
    1e32:	bf00      	nop
    1e34:	1fff8b50 	.word	0x1fff8b50
    1e38:	000078d0 	.word	0x000078d0
    1e3c:	00007870 	.word	0x00007870
    1e40:	00007e58 	.word	0x00007e58
    1e44:	000078c0 	.word	0x000078c0
    1e48:	00007ecc 	.word	0x00007ecc

00001e4c <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    1e4c:	b500      	push	{lr}
    1e4e:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    1e50:	2302      	movs	r3, #2
    1e52:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    1e54:	2300      	movs	r3, #0
    1e56:	9304      	str	r3, [sp, #16]
    1e58:	e02c      	b.n	1eb4 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    1e5a:	4a36      	ldr	r2, [pc, #216]	; (1f34 <Clock_Ip_GetPllStatus+0xe8>)
    1e5c:	9b04      	ldr	r3, [sp, #16]
    1e5e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1e62:	4935      	ldr	r1, [pc, #212]	; (1f38 <Clock_Ip_GetPllStatus+0xec>)
    1e64:	4613      	mov	r3, r2
    1e66:	00db      	lsls	r3, r3, #3
    1e68:	4413      	add	r3, r2
    1e6a:	440b      	add	r3, r1
    1e6c:	3301      	adds	r3, #1
    1e6e:	781b      	ldrb	r3, [r3, #0]
    1e70:	461a      	mov	r2, r3
    1e72:	4b32      	ldr	r3, [pc, #200]	; (1f3c <Clock_Ip_GetPllStatus+0xf0>)
    1e74:	5c9b      	ldrb	r3, [r3, r2]
    1e76:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    1e78:	4931      	ldr	r1, [pc, #196]	; (1f40 <Clock_Ip_GetPllStatus+0xf4>)
    1e7a:	9a03      	ldr	r2, [sp, #12]
    1e7c:	4613      	mov	r3, r2
    1e7e:	009b      	lsls	r3, r3, #2
    1e80:	4413      	add	r3, r2
    1e82:	009b      	lsls	r3, r3, #2
    1e84:	440b      	add	r3, r1
    1e86:	3308      	adds	r3, #8
    1e88:	681b      	ldr	r3, [r3, #0]
    1e8a:	492a      	ldr	r1, [pc, #168]	; (1f34 <Clock_Ip_GetPllStatus+0xe8>)
    1e8c:	9a04      	ldr	r2, [sp, #16]
    1e8e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1e92:	4610      	mov	r0, r2
    1e94:	4798      	blx	r3
    1e96:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    1e98:	9b02      	ldr	r3, [sp, #8]
    1e9a:	2b01      	cmp	r3, #1
    1e9c:	d102      	bne.n	1ea4 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    1e9e:	2301      	movs	r3, #1
    1ea0:	9305      	str	r3, [sp, #20]
            break;
    1ea2:	e00d      	b.n	1ec0 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    1ea4:	9b02      	ldr	r3, [sp, #8]
    1ea6:	2b02      	cmp	r3, #2
    1ea8:	d101      	bne.n	1eae <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    1eaa:	2300      	movs	r3, #0
    1eac:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    1eae:	9b04      	ldr	r3, [sp, #16]
    1eb0:	3301      	adds	r3, #1
    1eb2:	9304      	str	r3, [sp, #16]
    1eb4:	4b23      	ldr	r3, [pc, #140]	; (1f44 <Clock_Ip_GetPllStatus+0xf8>)
    1eb6:	789b      	ldrb	r3, [r3, #2]
    1eb8:	461a      	mov	r2, r3
    1eba:	9b04      	ldr	r3, [sp, #16]
    1ebc:	4293      	cmp	r3, r2
    1ebe:	d3cc      	bcc.n	1e5a <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    1ec0:	9b05      	ldr	r3, [sp, #20]
    1ec2:	2b00      	cmp	r3, #0
    1ec4:	d130      	bne.n	1f28 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    1ec6:	2300      	movs	r3, #0
    1ec8:	9304      	str	r3, [sp, #16]
    1eca:	e027      	b.n	1f1c <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    1ecc:	4a1e      	ldr	r2, [pc, #120]	; (1f48 <Clock_Ip_GetPllStatus+0xfc>)
    1ece:	9b04      	ldr	r3, [sp, #16]
    1ed0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1ed4:	4918      	ldr	r1, [pc, #96]	; (1f38 <Clock_Ip_GetPllStatus+0xec>)
    1ed6:	4613      	mov	r3, r2
    1ed8:	00db      	lsls	r3, r3, #3
    1eda:	4413      	add	r3, r2
    1edc:	440b      	add	r3, r1
    1ede:	3301      	adds	r3, #1
    1ee0:	781b      	ldrb	r3, [r3, #0]
    1ee2:	461a      	mov	r2, r3
    1ee4:	4b19      	ldr	r3, [pc, #100]	; (1f4c <Clock_Ip_GetPllStatus+0x100>)
    1ee6:	5c9b      	ldrb	r3, [r3, r2]
    1ee8:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    1eea:	4919      	ldr	r1, [pc, #100]	; (1f50 <Clock_Ip_GetPllStatus+0x104>)
    1eec:	9a03      	ldr	r2, [sp, #12]
    1eee:	4613      	mov	r3, r2
    1ef0:	005b      	lsls	r3, r3, #1
    1ef2:	4413      	add	r3, r2
    1ef4:	009b      	lsls	r3, r3, #2
    1ef6:	440b      	add	r3, r1
    1ef8:	3308      	adds	r3, #8
    1efa:	681b      	ldr	r3, [r3, #0]
    1efc:	4912      	ldr	r1, [pc, #72]	; (1f48 <Clock_Ip_GetPllStatus+0xfc>)
    1efe:	9a04      	ldr	r2, [sp, #16]
    1f00:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1f04:	4610      	mov	r0, r2
    1f06:	4798      	blx	r3
    1f08:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    1f0a:	9b01      	ldr	r3, [sp, #4]
    1f0c:	2b01      	cmp	r3, #1
    1f0e:	d102      	bne.n	1f16 <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    1f10:	2301      	movs	r3, #1
    1f12:	9305      	str	r3, [sp, #20]
                break;
    1f14:	e008      	b.n	1f28 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    1f16:	9b04      	ldr	r3, [sp, #16]
    1f18:	3301      	adds	r3, #1
    1f1a:	9304      	str	r3, [sp, #16]
    1f1c:	4b09      	ldr	r3, [pc, #36]	; (1f44 <Clock_Ip_GetPllStatus+0xf8>)
    1f1e:	78db      	ldrb	r3, [r3, #3]
    1f20:	461a      	mov	r2, r3
    1f22:	9b04      	ldr	r3, [sp, #16]
    1f24:	4293      	cmp	r3, r2
    1f26:	d3d1      	bcc.n	1ecc <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    1f28:	9b05      	ldr	r3, [sp, #20]
}
    1f2a:	4618      	mov	r0, r3
    1f2c:	b007      	add	sp, #28
    1f2e:	f85d fb04 	ldr.w	pc, [sp], #4
    1f32:	bf00      	nop
    1f34:	00007dd8 	.word	0x00007dd8
    1f38:	000078d0 	.word	0x000078d0
    1f3c:	00007890 	.word	0x00007890
    1f40:	00007edc 	.word	0x00007edc
    1f44:	1fff8b50 	.word	0x1fff8b50
    1f48:	00007ddc 	.word	0x00007ddc
    1f4c:	00007880 	.word	0x00007880
    1f50:	00007e4c 	.word	0x00007e4c

00001f54 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    1f54:	b500      	push	{lr}
    1f56:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    1f58:	4b55      	ldr	r3, [pc, #340]	; (20b0 <Clock_Ip_DistributePll+0x15c>)
    1f5a:	681b      	ldr	r3, [r3, #0]
    1f5c:	2b00      	cmp	r3, #0
    1f5e:	f000 80a2 	beq.w	20a6 <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    1f62:	2300      	movs	r3, #0
    1f64:	9301      	str	r3, [sp, #4]
    1f66:	e02c      	b.n	1fc2 <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    1f68:	4b51      	ldr	r3, [pc, #324]	; (20b0 <Clock_Ip_DistributePll+0x15c>)
    1f6a:	681a      	ldr	r2, [r3, #0]
    1f6c:	9b01      	ldr	r3, [sp, #4]
    1f6e:	330d      	adds	r3, #13
    1f70:	00db      	lsls	r3, r3, #3
    1f72:	4413      	add	r3, r2
    1f74:	685b      	ldr	r3, [r3, #4]
    1f76:	4a4f      	ldr	r2, [pc, #316]	; (20b4 <Clock_Ip_DistributePll+0x160>)
    1f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1f7c:	2b03      	cmp	r3, #3
    1f7e:	d11d      	bne.n	1fbc <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    1f80:	4b4b      	ldr	r3, [pc, #300]	; (20b0 <Clock_Ip_DistributePll+0x15c>)
    1f82:	681b      	ldr	r3, [r3, #0]
    1f84:	9a01      	ldr	r2, [sp, #4]
    1f86:	320d      	adds	r2, #13
    1f88:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1f8c:	494a      	ldr	r1, [pc, #296]	; (20b8 <Clock_Ip_DistributePll+0x164>)
    1f8e:	4613      	mov	r3, r2
    1f90:	00db      	lsls	r3, r3, #3
    1f92:	4413      	add	r3, r2
    1f94:	440b      	add	r3, r1
    1f96:	3301      	adds	r3, #1
    1f98:	781b      	ldrb	r3, [r3, #0]
    1f9a:	461a      	mov	r2, r3
    1f9c:	4b47      	ldr	r3, [pc, #284]	; (20bc <Clock_Ip_DistributePll+0x168>)
    1f9e:	5c9b      	ldrb	r3, [r3, r2]
    1fa0:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    1fa2:	4a47      	ldr	r2, [pc, #284]	; (20c0 <Clock_Ip_DistributePll+0x16c>)
    1fa4:	9b00      	ldr	r3, [sp, #0]
    1fa6:	00db      	lsls	r3, r3, #3
    1fa8:	4413      	add	r3, r2
    1faa:	685b      	ldr	r3, [r3, #4]
    1fac:	4a40      	ldr	r2, [pc, #256]	; (20b0 <Clock_Ip_DistributePll+0x15c>)
    1fae:	6811      	ldr	r1, [r2, #0]
    1fb0:	9a01      	ldr	r2, [sp, #4]
    1fb2:	320d      	adds	r2, #13
    1fb4:	00d2      	lsls	r2, r2, #3
    1fb6:	440a      	add	r2, r1
    1fb8:	4610      	mov	r0, r2
    1fba:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    1fbc:	9b01      	ldr	r3, [sp, #4]
    1fbe:	3301      	adds	r3, #1
    1fc0:	9301      	str	r3, [sp, #4]
    1fc2:	4b3b      	ldr	r3, [pc, #236]	; (20b0 <Clock_Ip_DistributePll+0x15c>)
    1fc4:	681b      	ldr	r3, [r3, #0]
    1fc6:	7adb      	ldrb	r3, [r3, #11]
    1fc8:	461a      	mov	r2, r3
    1fca:	9b01      	ldr	r3, [sp, #4]
    1fcc:	4293      	cmp	r3, r2
    1fce:	d3cb      	bcc.n	1f68 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    1fd0:	4b3c      	ldr	r3, [pc, #240]	; (20c4 <Clock_Ip_DistributePll+0x170>)
    1fd2:	781b      	ldrb	r3, [r3, #0]
    1fd4:	2b00      	cmp	r3, #0
    1fd6:	d066      	beq.n	20a6 <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1fd8:	2300      	movs	r3, #0
    1fda:	9301      	str	r3, [sp, #4]
    1fdc:	e021      	b.n	2022 <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    1fde:	4b34      	ldr	r3, [pc, #208]	; (20b0 <Clock_Ip_DistributePll+0x15c>)
    1fe0:	681a      	ldr	r2, [r3, #0]
    1fe2:	9b01      	ldr	r3, [sp, #4]
    1fe4:	334e      	adds	r3, #78	; 0x4e
    1fe6:	00db      	lsls	r3, r3, #3
    1fe8:	4413      	add	r3, r2
    1fea:	685a      	ldr	r2, [r3, #4]
    1fec:	4932      	ldr	r1, [pc, #200]	; (20b8 <Clock_Ip_DistributePll+0x164>)
    1fee:	4613      	mov	r3, r2
    1ff0:	00db      	lsls	r3, r3, #3
    1ff2:	4413      	add	r3, r2
    1ff4:	440b      	add	r3, r1
    1ff6:	3301      	adds	r3, #1
    1ff8:	781b      	ldrb	r3, [r3, #0]
    1ffa:	461a      	mov	r2, r3
    1ffc:	4b32      	ldr	r3, [pc, #200]	; (20c8 <Clock_Ip_DistributePll+0x174>)
    1ffe:	5c9b      	ldrb	r3, [r3, r2]
    2000:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    2002:	4a32      	ldr	r2, [pc, #200]	; (20cc <Clock_Ip_DistributePll+0x178>)
    2004:	9b00      	ldr	r3, [sp, #0]
    2006:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    200a:	4a29      	ldr	r2, [pc, #164]	; (20b0 <Clock_Ip_DistributePll+0x15c>)
    200c:	6811      	ldr	r1, [r2, #0]
    200e:	9a01      	ldr	r2, [sp, #4]
    2010:	324e      	adds	r2, #78	; 0x4e
    2012:	00d2      	lsls	r2, r2, #3
    2014:	440a      	add	r2, r1
    2016:	3204      	adds	r2, #4
    2018:	4610      	mov	r0, r2
    201a:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    201c:	9b01      	ldr	r3, [sp, #4]
    201e:	3301      	adds	r3, #1
    2020:	9301      	str	r3, [sp, #4]
    2022:	4b23      	ldr	r3, [pc, #140]	; (20b0 <Clock_Ip_DistributePll+0x15c>)
    2024:	681b      	ldr	r3, [r3, #0]
    2026:	7c1b      	ldrb	r3, [r3, #16]
    2028:	461a      	mov	r2, r3
    202a:	9b01      	ldr	r3, [sp, #4]
    202c:	4293      	cmp	r3, r2
    202e:	d3d6      	bcc.n	1fde <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2030:	2300      	movs	r3, #0
    2032:	9301      	str	r3, [sp, #4]
    2034:	e02a      	b.n	208c <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2036:	4b1e      	ldr	r3, [pc, #120]	; (20b0 <Clock_Ip_DistributePll+0x15c>)
    2038:	6819      	ldr	r1, [r3, #0]
    203a:	9a01      	ldr	r2, [sp, #4]
    203c:	4613      	mov	r3, r2
    203e:	009b      	lsls	r3, r3, #2
    2040:	4413      	add	r3, r2
    2042:	009b      	lsls	r3, r3, #2
    2044:	440b      	add	r3, r1
    2046:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    204a:	681a      	ldr	r2, [r3, #0]
    204c:	491a      	ldr	r1, [pc, #104]	; (20b8 <Clock_Ip_DistributePll+0x164>)
    204e:	4613      	mov	r3, r2
    2050:	00db      	lsls	r3, r3, #3
    2052:	4413      	add	r3, r2
    2054:	440b      	add	r3, r1
    2056:	3301      	adds	r3, #1
    2058:	781b      	ldrb	r3, [r3, #0]
    205a:	461a      	mov	r2, r3
    205c:	4b1c      	ldr	r3, [pc, #112]	; (20d0 <Clock_Ip_DistributePll+0x17c>)
    205e:	5c9b      	ldrb	r3, [r3, r2]
    2060:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    2062:	4a1c      	ldr	r2, [pc, #112]	; (20d4 <Clock_Ip_DistributePll+0x180>)
    2064:	9b00      	ldr	r3, [sp, #0]
    2066:	011b      	lsls	r3, r3, #4
    2068:	4413      	add	r3, r2
    206a:	330c      	adds	r3, #12
    206c:	6819      	ldr	r1, [r3, #0]
    206e:	4b10      	ldr	r3, [pc, #64]	; (20b0 <Clock_Ip_DistributePll+0x15c>)
    2070:	6818      	ldr	r0, [r3, #0]
    2072:	9a01      	ldr	r2, [sp, #4]
    2074:	4613      	mov	r3, r2
    2076:	009b      	lsls	r3, r3, #2
    2078:	4413      	add	r3, r2
    207a:	009b      	lsls	r3, r3, #2
    207c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2080:	4403      	add	r3, r0
    2082:	4618      	mov	r0, r3
    2084:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2086:	9b01      	ldr	r3, [sp, #4]
    2088:	3301      	adds	r3, #1
    208a:	9301      	str	r3, [sp, #4]
    208c:	4b08      	ldr	r3, [pc, #32]	; (20b0 <Clock_Ip_DistributePll+0x15c>)
    208e:	681b      	ldr	r3, [r3, #0]
    2090:	7c9b      	ldrb	r3, [r3, #18]
    2092:	461a      	mov	r2, r3
    2094:	9b01      	ldr	r3, [sp, #4]
    2096:	4293      	cmp	r3, r2
    2098:	d3cd      	bcc.n	2036 <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    209a:	4b05      	ldr	r3, [pc, #20]	; (20b0 <Clock_Ip_DistributePll+0x15c>)
    209c:	681b      	ldr	r3, [r3, #0]
    209e:	2104      	movs	r1, #4
    20a0:	4618      	mov	r0, r3
    20a2:	f002 fe0b 	bl	4cbc <Clock_Ip_Command>
        }
    }
}
    20a6:	bf00      	nop
    20a8:	b003      	add	sp, #12
    20aa:	f85d fb04 	ldr.w	pc, [sp], #4
    20ae:	bf00      	nop
    20b0:	1fff8b48 	.word	0x1fff8b48
    20b4:	00007d1c 	.word	0x00007d1c
    20b8:	000078d0 	.word	0x000078d0
    20bc:	000078a0 	.word	0x000078a0
    20c0:	00007f08 	.word	0x00007f08
    20c4:	1fff8b50 	.word	0x1fff8b50
    20c8:	00007870 	.word	0x00007870
    20cc:	00007e58 	.word	0x00007e58
    20d0:	000078c0 	.word	0x000078c0
    20d4:	00007ecc 	.word	0x00007ecc

000020d8 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    20d8:	b500      	push	{lr}
    20da:	b085      	sub	sp, #20
    20dc:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    20de:	490c      	ldr	r1, [pc, #48]	; (2110 <Clock_Ip_DisableClockMonitor+0x38>)
    20e0:	9a01      	ldr	r2, [sp, #4]
    20e2:	4613      	mov	r3, r2
    20e4:	00db      	lsls	r3, r3, #3
    20e6:	4413      	add	r3, r2
    20e8:	440b      	add	r3, r1
    20ea:	3301      	adds	r3, #1
    20ec:	781b      	ldrb	r3, [r3, #0]
    20ee:	461a      	mov	r2, r3
    20f0:	4b08      	ldr	r3, [pc, #32]	; (2114 <Clock_Ip_DisableClockMonitor+0x3c>)
    20f2:	5c9b      	ldrb	r3, [r3, r2]
    20f4:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    20f6:	4a08      	ldr	r2, [pc, #32]	; (2118 <Clock_Ip_DisableClockMonitor+0x40>)
    20f8:	9b03      	ldr	r3, [sp, #12]
    20fa:	011b      	lsls	r3, r3, #4
    20fc:	4413      	add	r3, r2
    20fe:	3308      	adds	r3, #8
    2100:	681b      	ldr	r3, [r3, #0]
    2102:	9801      	ldr	r0, [sp, #4]
    2104:	4798      	blx	r3
}
    2106:	bf00      	nop
    2108:	b005      	add	sp, #20
    210a:	f85d fb04 	ldr.w	pc, [sp], #4
    210e:	bf00      	nop
    2110:	000078d0 	.word	0x000078d0
    2114:	000078c0 	.word	0x000078c0
    2118:	00007ecc 	.word	0x00007ecc

0000211c <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    211c:	b082      	sub	sp, #8
    211e:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    2120:	4a02      	ldr	r2, [pc, #8]	; (212c <Clock_Ip_InstallNotificationsCallback+0x10>)
    2122:	9b01      	ldr	r3, [sp, #4]
    2124:	6013      	str	r3, [r2, #0]
}
    2126:	bf00      	nop
    2128:	b002      	add	sp, #8
    212a:	4770      	bx	lr
    212c:	1fff8b14 	.word	0x1fff8b14

00002130 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    2130:	b500      	push	{lr}
    2132:	b085      	sub	sp, #20
    2134:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2136:	490c      	ldr	r1, [pc, #48]	; (2168 <Clock_Ip_DisableModuleClock+0x38>)
    2138:	9a01      	ldr	r2, [sp, #4]
    213a:	4613      	mov	r3, r2
    213c:	00db      	lsls	r3, r3, #3
    213e:	4413      	add	r3, r2
    2140:	440b      	add	r3, r1
    2142:	3301      	adds	r3, #1
    2144:	781b      	ldrb	r3, [r3, #0]
    2146:	461a      	mov	r2, r3
    2148:	4b08      	ldr	r3, [pc, #32]	; (216c <Clock_Ip_DisableModuleClock+0x3c>)
    214a:	5c9b      	ldrb	r3, [r3, r2]
    214c:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    214e:	4a08      	ldr	r2, [pc, #32]	; (2170 <Clock_Ip_DisableModuleClock+0x40>)
    2150:	9b03      	ldr	r3, [sp, #12]
    2152:	00db      	lsls	r3, r3, #3
    2154:	4413      	add	r3, r2
    2156:	685b      	ldr	r3, [r3, #4]
    2158:	2101      	movs	r1, #1
    215a:	9801      	ldr	r0, [sp, #4]
    215c:	4798      	blx	r3
}
    215e:	bf00      	nop
    2160:	b005      	add	sp, #20
    2162:	f85d fb04 	ldr.w	pc, [sp], #4
    2166:	bf00      	nop
    2168:	000078d0 	.word	0x000078d0
    216c:	00007870 	.word	0x00007870
    2170:	00007e58 	.word	0x00007e58

00002174 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    2174:	b500      	push	{lr}
    2176:	b085      	sub	sp, #20
    2178:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    217a:	490c      	ldr	r1, [pc, #48]	; (21ac <Clock_Ip_EnableModuleClock+0x38>)
    217c:	9a01      	ldr	r2, [sp, #4]
    217e:	4613      	mov	r3, r2
    2180:	00db      	lsls	r3, r3, #3
    2182:	4413      	add	r3, r2
    2184:	440b      	add	r3, r1
    2186:	3301      	adds	r3, #1
    2188:	781b      	ldrb	r3, [r3, #0]
    218a:	461a      	mov	r2, r3
    218c:	4b08      	ldr	r3, [pc, #32]	; (21b0 <Clock_Ip_EnableModuleClock+0x3c>)
    218e:	5c9b      	ldrb	r3, [r3, r2]
    2190:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    2192:	4a08      	ldr	r2, [pc, #32]	; (21b4 <Clock_Ip_EnableModuleClock+0x40>)
    2194:	9b03      	ldr	r3, [sp, #12]
    2196:	00db      	lsls	r3, r3, #3
    2198:	4413      	add	r3, r2
    219a:	685b      	ldr	r3, [r3, #4]
    219c:	2100      	movs	r1, #0
    219e:	9801      	ldr	r0, [sp, #4]
    21a0:	4798      	blx	r3
}
    21a2:	bf00      	nop
    21a4:	b005      	add	sp, #20
    21a6:	f85d fb04 	ldr.w	pc, [sp], #4
    21aa:	bf00      	nop
    21ac:	000078d0 	.word	0x000078d0
    21b0:	00007870 	.word	0x00007870
    21b4:	00007e58 	.word	0x00007e58

000021b8 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    21b8:	b500      	push	{lr}
    21ba:	b083      	sub	sp, #12
    21bc:	9001      	str	r0, [sp, #4]
    21be:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    21c0:	4b08      	ldr	r3, [pc, #32]	; (21e4 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    21c2:	2200      	movs	r2, #0
    21c4:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    21c6:	4b08      	ldr	r3, [pc, #32]	; (21e8 <Clock_Ip_PowerModeChangeNotification+0x30>)
    21c8:	681b      	ldr	r3, [r3, #0]
    21ca:	2102      	movs	r1, #2
    21cc:	4618      	mov	r0, r3
    21ce:	f002 fd75 	bl	4cbc <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    21d2:	9900      	ldr	r1, [sp, #0]
    21d4:	9801      	ldr	r0, [sp, #4]
    21d6:	f002 fc51 	bl	4a7c <Clock_Ip_ClockPowerModeChangeNotification>
}
    21da:	bf00      	nop
    21dc:	b003      	add	sp, #12
    21de:	f85d fb04 	ldr.w	pc, [sp], #4
    21e2:	bf00      	nop
    21e4:	1fff8b10 	.word	0x1fff8b10
    21e8:	1fff8b48 	.word	0x1fff8b48

000021ec <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    21ec:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    21ee:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    21f2:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    21f4:	4b06      	ldr	r3, [pc, #24]	; (2210 <Clock_Ip_SetWaitStates+0x24>)
    21f6:	785b      	ldrb	r3, [r3, #1]
    21f8:	2b00      	cmp	r3, #0
    21fa:	d005      	beq.n	2208 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    21fc:	9b01      	ldr	r3, [sp, #4]
    21fe:	3b01      	subs	r3, #1
    2200:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    2202:	9b01      	ldr	r3, [sp, #4]
    2204:	2b00      	cmp	r3, #0
    2206:	d1f9      	bne.n	21fc <Clock_Ip_SetWaitStates+0x10>
    }
}
    2208:	bf00      	nop
    220a:	b002      	add	sp, #8
    220c:	4770      	bx	lr
    220e:	bf00      	nop
    2210:	1fff8b50 	.word	0x1fff8b50

00002214 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    2214:	b500      	push	{lr}
    2216:	b083      	sub	sp, #12
    2218:	9001      	str	r0, [sp, #4]
    221a:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    221c:	4b04      	ldr	r3, [pc, #16]	; (2230 <Clock_Ip_ReportClockErrors+0x1c>)
    221e:	681b      	ldr	r3, [r3, #0]
    2220:	9900      	ldr	r1, [sp, #0]
    2222:	9801      	ldr	r0, [sp, #4]
    2224:	4798      	blx	r3
}
    2226:	bf00      	nop
    2228:	b003      	add	sp, #12
    222a:	f85d fb04 	ldr.w	pc, [sp], #4
    222e:	bf00      	nop
    2230:	1fff8b14 	.word	0x1fff8b14

00002234 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    2234:	b500      	push	{lr}
    2236:	b085      	sub	sp, #20
    2238:	9003      	str	r0, [sp, #12]
    223a:	9102      	str	r1, [sp, #8]
    223c:	9201      	str	r2, [sp, #4]
    223e:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    2240:	2000      	movs	r0, #0
    2242:	f7fe ffd0 	bl	11e6 <OsIf_GetCounter>
    2246:	4602      	mov	r2, r0
    2248:	9b03      	ldr	r3, [sp, #12]
    224a:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    224c:	9b02      	ldr	r3, [sp, #8]
    224e:	2200      	movs	r2, #0
    2250:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    2252:	2100      	movs	r1, #0
    2254:	9800      	ldr	r0, [sp, #0]
    2256:	f7ff f812 	bl	127e <OsIf_MicrosToTicks>
    225a:	4602      	mov	r2, r0
    225c:	9b01      	ldr	r3, [sp, #4]
    225e:	601a      	str	r2, [r3, #0]
}
    2260:	bf00      	nop
    2262:	b005      	add	sp, #20
    2264:	f85d fb04 	ldr.w	pc, [sp], #4

00002268 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    2268:	b500      	push	{lr}
    226a:	b087      	sub	sp, #28
    226c:	9003      	str	r0, [sp, #12]
    226e:	9102      	str	r1, [sp, #8]
    2270:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    2272:	2300      	movs	r3, #0
    2274:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    2278:	2100      	movs	r1, #0
    227a:	9803      	ldr	r0, [sp, #12]
    227c:	f7fe ffcc 	bl	1218 <OsIf_GetElapsed>
    2280:	4602      	mov	r2, r0
    2282:	9b02      	ldr	r3, [sp, #8]
    2284:	681b      	ldr	r3, [r3, #0]
    2286:	441a      	add	r2, r3
    2288:	9b02      	ldr	r3, [sp, #8]
    228a:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    228c:	9b02      	ldr	r3, [sp, #8]
    228e:	681b      	ldr	r3, [r3, #0]
    2290:	9a01      	ldr	r2, [sp, #4]
    2292:	429a      	cmp	r2, r3
    2294:	d802      	bhi.n	229c <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    2296:	2301      	movs	r3, #1
    2298:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    229c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    22a0:	4618      	mov	r0, r3
    22a2:	b007      	add	sp, #28
    22a4:	f85d fb04 	ldr.w	pc, [sp], #4

000022a8 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    22a8:	b082      	sub	sp, #8
    22aa:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    22ac:	bf00      	nop
    22ae:	b002      	add	sp, #8
    22b0:	4770      	bx	lr

000022b2 <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    22b2:	b500      	push	{lr}
    22b4:	b083      	sub	sp, #12
    22b6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    22b8:	9b01      	ldr	r3, [sp, #4]
    22ba:	2b00      	cmp	r3, #0
    22bc:	d002      	beq.n	22c4 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    22be:	9801      	ldr	r0, [sp, #4]
    22c0:	f000 f8ad 	bl	241e <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    22c4:	bf00      	nop
    22c6:	b003      	add	sp, #12
    22c8:	f85d fb04 	ldr.w	pc, [sp], #4

000022cc <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    22cc:	b500      	push	{lr}
    22ce:	b083      	sub	sp, #12
    22d0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    22d2:	9b01      	ldr	r3, [sp, #4]
    22d4:	2b00      	cmp	r3, #0
    22d6:	d002      	beq.n	22de <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    22d8:	9801      	ldr	r0, [sp, #4]
    22da:	f000 f8cd 	bl	2478 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    22de:	bf00      	nop
    22e0:	b003      	add	sp, #12
    22e2:	f85d fb04 	ldr.w	pc, [sp], #4

000022e6 <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    22e6:	b500      	push	{lr}
    22e8:	b083      	sub	sp, #12
    22ea:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    22ec:	9b01      	ldr	r3, [sp, #4]
    22ee:	2b00      	cmp	r3, #0
    22f0:	d002      	beq.n	22f8 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    22f2:	9801      	ldr	r0, [sp, #4]
    22f4:	f000 f8ee 	bl	24d4 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    22f8:	bf00      	nop
    22fa:	b003      	add	sp, #12
    22fc:	f85d fb04 	ldr.w	pc, [sp], #4

00002300 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2300:	b500      	push	{lr}
    2302:	b083      	sub	sp, #12
    2304:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2306:	9b01      	ldr	r3, [sp, #4]
    2308:	2b00      	cmp	r3, #0
    230a:	d002      	beq.n	2312 <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    230c:	9801      	ldr	r0, [sp, #4]
    230e:	f000 f8f9 	bl	2504 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2312:	bf00      	nop
    2314:	b003      	add	sp, #12
    2316:	f85d fb04 	ldr.w	pc, [sp], #4

0000231a <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    231a:	b500      	push	{lr}
    231c:	b083      	sub	sp, #12
    231e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2320:	9b01      	ldr	r3, [sp, #4]
    2322:	2b00      	cmp	r3, #0
    2324:	d002      	beq.n	232c <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    2326:	9801      	ldr	r0, [sp, #4]
    2328:	f000 f904 	bl	2534 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    232c:	bf00      	nop
    232e:	b003      	add	sp, #12
    2330:	f85d fb04 	ldr.w	pc, [sp], #4

00002334 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2334:	b500      	push	{lr}
    2336:	b083      	sub	sp, #12
    2338:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    233a:	9b01      	ldr	r3, [sp, #4]
    233c:	2b00      	cmp	r3, #0
    233e:	d002      	beq.n	2346 <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    2340:	9801      	ldr	r0, [sp, #4]
    2342:	f000 f90f 	bl	2564 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2346:	bf00      	nop
    2348:	b003      	add	sp, #12
    234a:	f85d fb04 	ldr.w	pc, [sp], #4

0000234e <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    234e:	b500      	push	{lr}
    2350:	b083      	sub	sp, #12
    2352:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2354:	9b01      	ldr	r3, [sp, #4]
    2356:	2b00      	cmp	r3, #0
    2358:	d002      	beq.n	2360 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    235a:	9801      	ldr	r0, [sp, #4]
    235c:	f000 f91a 	bl	2594 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2360:	bf00      	nop
    2362:	b003      	add	sp, #12
    2364:	f85d fb04 	ldr.w	pc, [sp], #4

00002368 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2368:	b500      	push	{lr}
    236a:	b083      	sub	sp, #12
    236c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    236e:	9b01      	ldr	r3, [sp, #4]
    2370:	2b00      	cmp	r3, #0
    2372:	d002      	beq.n	237a <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    2374:	9801      	ldr	r0, [sp, #4]
    2376:	f000 f925 	bl	25c4 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    237a:	bf00      	nop
    237c:	b003      	add	sp, #12
    237e:	f85d fb04 	ldr.w	pc, [sp], #4

00002382 <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2382:	b500      	push	{lr}
    2384:	b083      	sub	sp, #12
    2386:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2388:	9b01      	ldr	r3, [sp, #4]
    238a:	2b00      	cmp	r3, #0
    238c:	d002      	beq.n	2394 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    238e:	9801      	ldr	r0, [sp, #4]
    2390:	f000 f930 	bl	25f4 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2394:	bf00      	nop
    2396:	b003      	add	sp, #12
    2398:	f85d fb04 	ldr.w	pc, [sp], #4

0000239c <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    239c:	b500      	push	{lr}
    239e:	b083      	sub	sp, #12
    23a0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    23a2:	9b01      	ldr	r3, [sp, #4]
    23a4:	2b00      	cmp	r3, #0
    23a6:	d002      	beq.n	23ae <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    23a8:	9801      	ldr	r0, [sp, #4]
    23aa:	f000 f93b 	bl	2624 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    23ae:	bf00      	nop
    23b0:	b003      	add	sp, #12
    23b2:	f85d fb04 	ldr.w	pc, [sp], #4

000023b6 <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    23b6:	b500      	push	{lr}
    23b8:	b083      	sub	sp, #12
    23ba:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    23bc:	9b01      	ldr	r3, [sp, #4]
    23be:	2b00      	cmp	r3, #0
    23c0:	d002      	beq.n	23c8 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    23c2:	9801      	ldr	r0, [sp, #4]
    23c4:	f000 f946 	bl	2654 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    23c8:	bf00      	nop
    23ca:	b003      	add	sp, #12
    23cc:	f85d fb04 	ldr.w	pc, [sp], #4

000023d0 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    23d0:	b500      	push	{lr}
    23d2:	b083      	sub	sp, #12
    23d4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    23d6:	9b01      	ldr	r3, [sp, #4]
    23d8:	2b00      	cmp	r3, #0
    23da:	d002      	beq.n	23e2 <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    23dc:	9801      	ldr	r0, [sp, #4]
    23de:	f000 f951 	bl	2684 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    23e2:	bf00      	nop
    23e4:	b003      	add	sp, #12
    23e6:	f85d fb04 	ldr.w	pc, [sp], #4

000023ea <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    23ea:	b500      	push	{lr}
    23ec:	b083      	sub	sp, #12
    23ee:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    23f0:	9b01      	ldr	r3, [sp, #4]
    23f2:	2b00      	cmp	r3, #0
    23f4:	d002      	beq.n	23fc <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    23f6:	9801      	ldr	r0, [sp, #4]
    23f8:	f000 f95e 	bl	26b8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    23fc:	bf00      	nop
    23fe:	b003      	add	sp, #12
    2400:	f85d fb04 	ldr.w	pc, [sp], #4

00002404 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    2404:	b500      	push	{lr}
    2406:	b083      	sub	sp, #12
    2408:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    240a:	9b01      	ldr	r3, [sp, #4]
    240c:	2b00      	cmp	r3, #0
    240e:	d002      	beq.n	2416 <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    2410:	9801      	ldr	r0, [sp, #4]
    2412:	f000 f98b 	bl	272c <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2416:	bf00      	nop
    2418:	b003      	add	sp, #12
    241a:	f85d fb04 	ldr.w	pc, [sp], #4

0000241e <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    241e:	b086      	sub	sp, #24
    2420:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2422:	9b01      	ldr	r3, [sp, #4]
    2424:	681a      	ldr	r2, [r3, #0]
    2426:	4911      	ldr	r1, [pc, #68]	; (246c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    2428:	4613      	mov	r3, r2
    242a:	00db      	lsls	r3, r3, #3
    242c:	4413      	add	r3, r2
    242e:	440b      	add	r3, r1
    2430:	781b      	ldrb	r3, [r3, #0]
    2432:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2434:	9b01      	ldr	r3, [sp, #4]
    2436:	685b      	ldr	r3, [r3, #4]
    2438:	4a0d      	ldr	r2, [pc, #52]	; (2470 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    243a:	5cd3      	ldrb	r3, [r2, r3]
    243c:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    243e:	4a0d      	ldr	r2, [pc, #52]	; (2474 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2440:	9b05      	ldr	r3, [sp, #20]
    2442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2446:	681b      	ldr	r3, [r3, #0]
    2448:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    244a:	9b03      	ldr	r3, [sp, #12]
    244c:	f023 0307 	bic.w	r3, r3, #7
    2450:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    2452:	9a03      	ldr	r2, [sp, #12]
    2454:	9b04      	ldr	r3, [sp, #16]
    2456:	4313      	orrs	r3, r2
    2458:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    245a:	4a06      	ldr	r2, [pc, #24]	; (2474 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    245c:	9b05      	ldr	r3, [sp, #20]
    245e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2462:	9a03      	ldr	r2, [sp, #12]
    2464:	601a      	str	r2, [r3, #0]
}
    2466:	bf00      	nop
    2468:	b006      	add	sp, #24
    246a:	4770      	bx	lr
    246c:	000078d0 	.word	0x000078d0
    2470:	00007cc8 	.word	0x00007cc8
    2474:	00007d0c 	.word	0x00007d0c

00002478 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2478:	b086      	sub	sp, #24
    247a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    247c:	9b01      	ldr	r3, [sp, #4]
    247e:	681a      	ldr	r2, [r3, #0]
    2480:	4911      	ldr	r1, [pc, #68]	; (24c8 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    2482:	4613      	mov	r3, r2
    2484:	00db      	lsls	r3, r3, #3
    2486:	4413      	add	r3, r2
    2488:	440b      	add	r3, r1
    248a:	781b      	ldrb	r3, [r3, #0]
    248c:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    248e:	9b01      	ldr	r3, [sp, #4]
    2490:	685b      	ldr	r3, [r3, #4]
    2492:	4a0e      	ldr	r2, [pc, #56]	; (24cc <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    2494:	5cd3      	ldrb	r3, [r2, r3]
    2496:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2498:	4a0d      	ldr	r2, [pc, #52]	; (24d0 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    249a:	9b05      	ldr	r3, [sp, #20]
    249c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    24a0:	681b      	ldr	r3, [r3, #0]
    24a2:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    24a4:	9b03      	ldr	r3, [sp, #12]
    24a6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    24aa:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    24ac:	9b04      	ldr	r3, [sp, #16]
    24ae:	021b      	lsls	r3, r3, #8
    24b0:	9a03      	ldr	r2, [sp, #12]
    24b2:	4313      	orrs	r3, r2
    24b4:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    24b6:	4a06      	ldr	r2, [pc, #24]	; (24d0 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    24b8:	9b05      	ldr	r3, [sp, #20]
    24ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    24be:	9a03      	ldr	r2, [sp, #12]
    24c0:	601a      	str	r2, [r3, #0]
}
    24c2:	bf00      	nop
    24c4:	b006      	add	sp, #24
    24c6:	4770      	bx	lr
    24c8:	000078d0 	.word	0x000078d0
    24cc:	00007cc8 	.word	0x00007cc8
    24d0:	00007d0c 	.word	0x00007d0c

000024d4 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    24d4:	b084      	sub	sp, #16
    24d6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    24d8:	4b09      	ldr	r3, [pc, #36]	; (2500 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    24da:	695b      	ldr	r3, [r3, #20]
    24dc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    24de:	9b03      	ldr	r3, [sp, #12]
    24e0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    24e4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    24e6:	9b01      	ldr	r3, [sp, #4]
    24e8:	685b      	ldr	r3, [r3, #4]
    24ea:	3b01      	subs	r3, #1
    24ec:	041b      	lsls	r3, r3, #16
    24ee:	9a03      	ldr	r2, [sp, #12]
    24f0:	4313      	orrs	r3, r2
    24f2:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    24f4:	4a02      	ldr	r2, [pc, #8]	; (2500 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    24f6:	9b03      	ldr	r3, [sp, #12]
    24f8:	6153      	str	r3, [r2, #20]
}
    24fa:	bf00      	nop
    24fc:	b004      	add	sp, #16
    24fe:	4770      	bx	lr
    2500:	40064000 	.word	0x40064000

00002504 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2504:	b084      	sub	sp, #16
    2506:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2508:	4b09      	ldr	r3, [pc, #36]	; (2530 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    250a:	695b      	ldr	r3, [r3, #20]
    250c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    250e:	9b03      	ldr	r3, [sp, #12]
    2510:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2514:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    2516:	9b01      	ldr	r3, [sp, #4]
    2518:	685b      	ldr	r3, [r3, #4]
    251a:	3b01      	subs	r3, #1
    251c:	011b      	lsls	r3, r3, #4
    251e:	9a03      	ldr	r2, [sp, #12]
    2520:	4313      	orrs	r3, r2
    2522:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2524:	4a02      	ldr	r2, [pc, #8]	; (2530 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2526:	9b03      	ldr	r3, [sp, #12]
    2528:	6153      	str	r3, [r2, #20]
}
    252a:	bf00      	nop
    252c:	b004      	add	sp, #16
    252e:	4770      	bx	lr
    2530:	40064000 	.word	0x40064000

00002534 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2534:	b084      	sub	sp, #16
    2536:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2538:	4b09      	ldr	r3, [pc, #36]	; (2560 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    253a:	695b      	ldr	r3, [r3, #20]
    253c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    253e:	9b03      	ldr	r3, [sp, #12]
    2540:	f023 030f 	bic.w	r3, r3, #15
    2544:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    2546:	9b01      	ldr	r3, [sp, #4]
    2548:	685b      	ldr	r3, [r3, #4]
    254a:	3b01      	subs	r3, #1
    254c:	9a03      	ldr	r2, [sp, #12]
    254e:	4313      	orrs	r3, r2
    2550:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2552:	4a03      	ldr	r2, [pc, #12]	; (2560 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2554:	9b03      	ldr	r3, [sp, #12]
    2556:	6153      	str	r3, [r2, #20]
}
    2558:	bf00      	nop
    255a:	b004      	add	sp, #16
    255c:	4770      	bx	lr
    255e:	bf00      	nop
    2560:	40064000 	.word	0x40064000

00002564 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2564:	b084      	sub	sp, #16
    2566:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2568:	4b09      	ldr	r3, [pc, #36]	; (2590 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    256a:	699b      	ldr	r3, [r3, #24]
    256c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    256e:	9b03      	ldr	r3, [sp, #12]
    2570:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2574:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    2576:	9b01      	ldr	r3, [sp, #4]
    2578:	685b      	ldr	r3, [r3, #4]
    257a:	3b01      	subs	r3, #1
    257c:	041b      	lsls	r3, r3, #16
    257e:	9a03      	ldr	r2, [sp, #12]
    2580:	4313      	orrs	r3, r2
    2582:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2584:	4a02      	ldr	r2, [pc, #8]	; (2590 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2586:	9b03      	ldr	r3, [sp, #12]
    2588:	6193      	str	r3, [r2, #24]
}
    258a:	bf00      	nop
    258c:	b004      	add	sp, #16
    258e:	4770      	bx	lr
    2590:	40064000 	.word	0x40064000

00002594 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2594:	b084      	sub	sp, #16
    2596:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2598:	4b09      	ldr	r3, [pc, #36]	; (25c0 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    259a:	699b      	ldr	r3, [r3, #24]
    259c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    259e:	9b03      	ldr	r3, [sp, #12]
    25a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    25a4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    25a6:	9b01      	ldr	r3, [sp, #4]
    25a8:	685b      	ldr	r3, [r3, #4]
    25aa:	3b01      	subs	r3, #1
    25ac:	011b      	lsls	r3, r3, #4
    25ae:	9a03      	ldr	r2, [sp, #12]
    25b0:	4313      	orrs	r3, r2
    25b2:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    25b4:	4a02      	ldr	r2, [pc, #8]	; (25c0 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    25b6:	9b03      	ldr	r3, [sp, #12]
    25b8:	6193      	str	r3, [r2, #24]
}
    25ba:	bf00      	nop
    25bc:	b004      	add	sp, #16
    25be:	4770      	bx	lr
    25c0:	40064000 	.word	0x40064000

000025c4 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    25c4:	b084      	sub	sp, #16
    25c6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    25c8:	4b09      	ldr	r3, [pc, #36]	; (25f0 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    25ca:	699b      	ldr	r3, [r3, #24]
    25cc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    25ce:	9b03      	ldr	r3, [sp, #12]
    25d0:	f023 030f 	bic.w	r3, r3, #15
    25d4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    25d6:	9b01      	ldr	r3, [sp, #4]
    25d8:	685b      	ldr	r3, [r3, #4]
    25da:	3b01      	subs	r3, #1
    25dc:	9a03      	ldr	r2, [sp, #12]
    25de:	4313      	orrs	r3, r2
    25e0:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    25e2:	4a03      	ldr	r2, [pc, #12]	; (25f0 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    25e4:	9b03      	ldr	r3, [sp, #12]
    25e6:	6193      	str	r3, [r2, #24]
}
    25e8:	bf00      	nop
    25ea:	b004      	add	sp, #16
    25ec:	4770      	bx	lr
    25ee:	bf00      	nop
    25f0:	40064000 	.word	0x40064000

000025f4 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    25f4:	b084      	sub	sp, #16
    25f6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    25f8:	4b09      	ldr	r3, [pc, #36]	; (2620 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    25fa:	69db      	ldr	r3, [r3, #28]
    25fc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    25fe:	9b03      	ldr	r3, [sp, #12]
    2600:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2604:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    2606:	9b01      	ldr	r3, [sp, #4]
    2608:	685b      	ldr	r3, [r3, #4]
    260a:	3b01      	subs	r3, #1
    260c:	041b      	lsls	r3, r3, #16
    260e:	9a03      	ldr	r2, [sp, #12]
    2610:	4313      	orrs	r3, r2
    2612:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2614:	4a02      	ldr	r2, [pc, #8]	; (2620 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2616:	9b03      	ldr	r3, [sp, #12]
    2618:	61d3      	str	r3, [r2, #28]
}
    261a:	bf00      	nop
    261c:	b004      	add	sp, #16
    261e:	4770      	bx	lr
    2620:	40064000 	.word	0x40064000

00002624 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2624:	b084      	sub	sp, #16
    2626:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2628:	4b09      	ldr	r3, [pc, #36]	; (2650 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    262a:	69db      	ldr	r3, [r3, #28]
    262c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    262e:	9b03      	ldr	r3, [sp, #12]
    2630:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2634:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    2636:	9b01      	ldr	r3, [sp, #4]
    2638:	685b      	ldr	r3, [r3, #4]
    263a:	3b01      	subs	r3, #1
    263c:	011b      	lsls	r3, r3, #4
    263e:	9a03      	ldr	r2, [sp, #12]
    2640:	4313      	orrs	r3, r2
    2642:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2644:	4a02      	ldr	r2, [pc, #8]	; (2650 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2646:	9b03      	ldr	r3, [sp, #12]
    2648:	61d3      	str	r3, [r2, #28]
}
    264a:	bf00      	nop
    264c:	b004      	add	sp, #16
    264e:	4770      	bx	lr
    2650:	40064000 	.word	0x40064000

00002654 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2654:	b084      	sub	sp, #16
    2656:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2658:	4b09      	ldr	r3, [pc, #36]	; (2680 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    265a:	69db      	ldr	r3, [r3, #28]
    265c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    265e:	9b03      	ldr	r3, [sp, #12]
    2660:	f023 030f 	bic.w	r3, r3, #15
    2664:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    2666:	9b01      	ldr	r3, [sp, #4]
    2668:	685b      	ldr	r3, [r3, #4]
    266a:	3b01      	subs	r3, #1
    266c:	9a03      	ldr	r2, [sp, #12]
    266e:	4313      	orrs	r3, r2
    2670:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2672:	4a03      	ldr	r2, [pc, #12]	; (2680 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    2674:	9b03      	ldr	r3, [sp, #12]
    2676:	61d3      	str	r3, [r2, #28]
}
    2678:	bf00      	nop
    267a:	b004      	add	sp, #16
    267c:	4770      	bx	lr
    267e:	bf00      	nop
    2680:	40064000 	.word	0x40064000

00002684 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    2684:	b084      	sub	sp, #16
    2686:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    2688:	4b0a      	ldr	r3, [pc, #40]	; (26b4 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    268a:	685b      	ldr	r3, [r3, #4]
    268c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    268e:	9b03      	ldr	r3, [sp, #12]
    2690:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2694:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    2696:	9b01      	ldr	r3, [sp, #4]
    2698:	685b      	ldr	r3, [r3, #4]
    269a:	3b01      	subs	r3, #1
    269c:	021b      	lsls	r3, r3, #8
    269e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    26a2:	9a03      	ldr	r2, [sp, #12]
    26a4:	4313      	orrs	r3, r2
    26a6:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    26a8:	4a02      	ldr	r2, [pc, #8]	; (26b4 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    26aa:	9b03      	ldr	r3, [sp, #12]
    26ac:	6053      	str	r3, [r2, #4]
}
    26ae:	bf00      	nop
    26b0:	b004      	add	sp, #16
    26b2:	4770      	bx	lr
    26b4:	40048000 	.word	0x40048000

000026b8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    26b8:	b084      	sub	sp, #16
    26ba:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    26bc:	4919      	ldr	r1, [pc, #100]	; (2724 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    26be:	9b01      	ldr	r3, [sp, #4]
    26c0:	681a      	ldr	r2, [r3, #0]
    26c2:	4819      	ldr	r0, [pc, #100]	; (2728 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    26c4:	4613      	mov	r3, r2
    26c6:	00db      	lsls	r3, r3, #3
    26c8:	4413      	add	r3, r2
    26ca:	4403      	add	r3, r0
    26cc:	3305      	adds	r3, #5
    26ce:	781b      	ldrb	r3, [r3, #0]
    26d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    26d4:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    26d6:	9b03      	ldr	r3, [sp, #12]
    26d8:	f023 030f 	bic.w	r3, r3, #15
    26dc:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    26de:	9b01      	ldr	r3, [sp, #4]
    26e0:	685b      	ldr	r3, [r3, #4]
    26e2:	3b01      	subs	r3, #1
    26e4:	f003 0307 	and.w	r3, r3, #7
    26e8:	9a03      	ldr	r2, [sp, #12]
    26ea:	4313      	orrs	r3, r2
    26ec:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    26ee:	9b01      	ldr	r3, [sp, #4]
    26f0:	7a1b      	ldrb	r3, [r3, #8]
    26f2:	3b01      	subs	r3, #1
    26f4:	00db      	lsls	r3, r3, #3
    26f6:	f003 0308 	and.w	r3, r3, #8
    26fa:	9a03      	ldr	r2, [sp, #12]
    26fc:	4313      	orrs	r3, r2
    26fe:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    2700:	4908      	ldr	r1, [pc, #32]	; (2724 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    2702:	9b01      	ldr	r3, [sp, #4]
    2704:	681a      	ldr	r2, [r3, #0]
    2706:	4808      	ldr	r0, [pc, #32]	; (2728 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2708:	4613      	mov	r3, r2
    270a:	00db      	lsls	r3, r3, #3
    270c:	4413      	add	r3, r2
    270e:	4403      	add	r3, r0
    2710:	3305      	adds	r3, #5
    2712:	781b      	ldrb	r3, [r3, #0]
    2714:	461a      	mov	r2, r3
    2716:	9b03      	ldr	r3, [sp, #12]
    2718:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    271c:	bf00      	nop
    271e:	b004      	add	sp, #16
    2720:	4770      	bx	lr
    2722:	bf00      	nop
    2724:	40065000 	.word	0x40065000
    2728:	000078d0 	.word	0x000078d0

0000272c <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    272c:	b084      	sub	sp, #16
    272e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    2730:	4b10      	ldr	r3, [pc, #64]	; (2774 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2732:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2734:	4a0f      	ldr	r2, [pc, #60]	; (2774 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2736:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    273a:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    273c:	4b0d      	ldr	r3, [pc, #52]	; (2774 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    273e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2740:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    2742:	9b03      	ldr	r3, [sp, #12]
    2744:	f023 030f 	bic.w	r3, r3, #15
    2748:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    274a:	9b01      	ldr	r3, [sp, #4]
    274c:	685b      	ldr	r3, [r3, #4]
    274e:	3b01      	subs	r3, #1
    2750:	005b      	lsls	r3, r3, #1
    2752:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    2756:	9b01      	ldr	r3, [sp, #4]
    2758:	7a1b      	ldrb	r3, [r3, #8]
    275a:	3b01      	subs	r3, #1
    275c:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    2760:	4313      	orrs	r3, r2
    2762:	9a03      	ldr	r2, [sp, #12]
    2764:	4313      	orrs	r3, r2
    2766:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    2768:	4a02      	ldr	r2, [pc, #8]	; (2774 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    276a:	9b03      	ldr	r3, [sp, #12]
    276c:	6693      	str	r3, [r2, #104]	; 0x68
}
    276e:	bf00      	nop
    2770:	b004      	add	sp, #16
    2772:	4770      	bx	lr
    2774:	40048000 	.word	0x40048000

00002778 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    2778:	b082      	sub	sp, #8
    277a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    277c:	bf00      	nop
    277e:	b002      	add	sp, #8
    2780:	4770      	bx	lr
	...

00002784 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    2784:	b082      	sub	sp, #8
    2786:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2788:	bf00      	nop
    278a:	b002      	add	sp, #8
    278c:	4770      	bx	lr

0000278e <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    278e:	b082      	sub	sp, #8
    2790:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    2792:	bf00      	nop
    2794:	b002      	add	sp, #8
    2796:	4770      	bx	lr

00002798 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2798:	b500      	push	{lr}
    279a:	b083      	sub	sp, #12
    279c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    279e:	9b01      	ldr	r3, [sp, #4]
    27a0:	2b00      	cmp	r3, #0
    27a2:	d002      	beq.n	27aa <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    27a4:	9801      	ldr	r0, [sp, #4]
    27a6:	f000 f86a 	bl	287e <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    27aa:	bf00      	nop
    27ac:	b003      	add	sp, #12
    27ae:	f85d fb04 	ldr.w	pc, [sp], #4

000027b2 <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    27b2:	b500      	push	{lr}
    27b4:	b083      	sub	sp, #12
    27b6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    27b8:	9b01      	ldr	r3, [sp, #4]
    27ba:	2b00      	cmp	r3, #0
    27bc:	d002      	beq.n	27c4 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    27be:	9801      	ldr	r0, [sp, #4]
    27c0:	f000 f884 	bl	28cc <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    27c4:	bf00      	nop
    27c6:	b003      	add	sp, #12
    27c8:	f85d fb04 	ldr.w	pc, [sp], #4

000027cc <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    27cc:	b500      	push	{lr}
    27ce:	b089      	sub	sp, #36	; 0x24
    27d0:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    27d2:	2300      	movs	r3, #0
    27d4:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    27d8:	9b01      	ldr	r3, [sp, #4]
    27da:	2b00      	cmp	r3, #0
    27dc:	d031      	beq.n	2842 <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    27de:	4b1b      	ldr	r3, [pc, #108]	; (284c <Clock_Ip_CompleteSOSC+0x80>)
    27e0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    27e4:	f003 0301 	and.w	r3, r3, #1
    27e8:	2b00      	cmp	r3, #0
    27ea:	d02a      	beq.n	2842 <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    27ec:	aa03      	add	r2, sp, #12
    27ee:	a904      	add	r1, sp, #16
    27f0:	a805      	add	r0, sp, #20
    27f2:	f24c 3350 	movw	r3, #50000	; 0xc350
    27f6:	f7ff fd1d 	bl	2234 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    27fa:	4b14      	ldr	r3, [pc, #80]	; (284c <Clock_Ip_CompleteSOSC+0x80>)
    27fc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2800:	0e1b      	lsrs	r3, r3, #24
    2802:	f003 0301 	and.w	r3, r3, #1
    2806:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2808:	9a03      	ldr	r2, [sp, #12]
    280a:	a904      	add	r1, sp, #16
    280c:	ab05      	add	r3, sp, #20
    280e:	4618      	mov	r0, r3
    2810:	f7ff fd2a 	bl	2268 <Clock_Ip_TimeoutExpired>
    2814:	4603      	mov	r3, r0
    2816:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    281a:	9b06      	ldr	r3, [sp, #24]
    281c:	2b00      	cmp	r3, #0
    281e:	d106      	bne.n	282e <Clock_Ip_CompleteSOSC+0x62>
    2820:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2824:	f083 0301 	eor.w	r3, r3, #1
    2828:	b2db      	uxtb	r3, r3
    282a:	2b00      	cmp	r3, #0
    282c:	d1e5      	bne.n	27fa <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    282e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2832:	2b00      	cmp	r3, #0
    2834:	d005      	beq.n	2842 <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    2836:	9b01      	ldr	r3, [sp, #4]
    2838:	681b      	ldr	r3, [r3, #0]
    283a:	4619      	mov	r1, r3
    283c:	2001      	movs	r0, #1
    283e:	f7ff fce9 	bl	2214 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    2842:	bf00      	nop
    2844:	b009      	add	sp, #36	; 0x24
    2846:	f85d fb04 	ldr.w	pc, [sp], #4
    284a:	bf00      	nop
    284c:	40064000 	.word	0x40064000

00002850 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    2850:	b500      	push	{lr}
    2852:	b083      	sub	sp, #12
    2854:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    2856:	9801      	ldr	r0, [sp, #4]
    2858:	f000 f8c0 	bl	29dc <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    285c:	bf00      	nop
    285e:	b003      	add	sp, #12
    2860:	f85d fb04 	ldr.w	pc, [sp], #4

00002864 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2864:	b500      	push	{lr}
    2866:	b083      	sub	sp, #12
    2868:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    286a:	9b01      	ldr	r3, [sp, #4]
    286c:	2b00      	cmp	r3, #0
    286e:	d002      	beq.n	2876 <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    2870:	9801      	ldr	r0, [sp, #4]
    2872:	f000 f8c3 	bl	29fc <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2876:	bf00      	nop
    2878:	b003      	add	sp, #12
    287a:	f85d fb04 	ldr.w	pc, [sp], #4

0000287e <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    287e:	b082      	sub	sp, #8
    2880:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    2882:	4b11      	ldr	r3, [pc, #68]	; (28c8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2884:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2888:	4a0f      	ldr	r2, [pc, #60]	; (28c8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    288a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    288e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    2892:	4b0d      	ldr	r3, [pc, #52]	; (28c8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2894:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2898:	4a0b      	ldr	r2, [pc, #44]	; (28c8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    289a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    289e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    28a2:	4b09      	ldr	r3, [pc, #36]	; (28c8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    28a4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    28a8:	4a07      	ldr	r2, [pc, #28]	; (28c8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    28aa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    28ae:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    28b2:	4b05      	ldr	r3, [pc, #20]	; (28c8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    28b4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    28b8:	4a03      	ldr	r2, [pc, #12]	; (28c8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    28ba:	f023 0301 	bic.w	r3, r3, #1
    28be:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    28c2:	bf00      	nop
    28c4:	b002      	add	sp, #8
    28c6:	4770      	bx	lr
    28c8:	40064000 	.word	0x40064000

000028cc <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    28cc:	b082      	sub	sp, #8
    28ce:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    28d0:	9b01      	ldr	r3, [sp, #4]
    28d2:	891b      	ldrh	r3, [r3, #8]
    28d4:	2b01      	cmp	r3, #1
    28d6:	d174      	bne.n	29c2 <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    28d8:	9b01      	ldr	r3, [sp, #4]
    28da:	7bdb      	ldrb	r3, [r3, #15]
    28dc:	2b00      	cmp	r3, #0
    28de:	d002      	beq.n	28e6 <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    28e0:	2b01      	cmp	r3, #1
    28e2:	d009      	beq.n	28f8 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    28e4:	e011      	b.n	290a <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    28e6:	4b39      	ldr	r3, [pc, #228]	; (29cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    28ec:	4a37      	ldr	r2, [pc, #220]	; (29cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28ee:	f023 0308 	bic.w	r3, r3, #8
    28f2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    28f6:	e008      	b.n	290a <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    28f8:	4b34      	ldr	r3, [pc, #208]	; (29cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    28fe:	4a33      	ldr	r2, [pc, #204]	; (29cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2900:	f043 0308 	orr.w	r3, r3, #8
    2904:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    2908:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    290a:	4b30      	ldr	r3, [pc, #192]	; (29cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    290c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2910:	4a2e      	ldr	r2, [pc, #184]	; (29cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2912:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    2916:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    291a:	9b01      	ldr	r3, [sp, #4]
    291c:	685b      	ldr	r3, [r3, #4]
    291e:	4a2c      	ldr	r2, [pc, #176]	; (29d0 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    2920:	4293      	cmp	r3, r2
    2922:	d90d      	bls.n	2940 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    2924:	9b01      	ldr	r3, [sp, #4]
    2926:	685b      	ldr	r3, [r3, #4]
    2928:	4a2a      	ldr	r2, [pc, #168]	; (29d4 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    292a:	4293      	cmp	r3, r2
    292c:	d208      	bcs.n	2940 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    292e:	4b27      	ldr	r3, [pc, #156]	; (29cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2930:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2934:	4a25      	ldr	r2, [pc, #148]	; (29cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2936:	f043 0320 	orr.w	r3, r3, #32
    293a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    293e:	e007      	b.n	2950 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    2940:	4b22      	ldr	r3, [pc, #136]	; (29cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2942:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2946:	4a21      	ldr	r2, [pc, #132]	; (29cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2948:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    294c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    2950:	9b01      	ldr	r3, [sp, #4]
    2952:	7b1b      	ldrb	r3, [r3, #12]
    2954:	2b00      	cmp	r3, #0
    2956:	d108      	bne.n	296a <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    2958:	4b1c      	ldr	r3, [pc, #112]	; (29cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    295a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    295e:	4a1b      	ldr	r2, [pc, #108]	; (29cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2960:	f043 0304 	orr.w	r3, r3, #4
    2964:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    2968:	e007      	b.n	297a <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    296a:	4b18      	ldr	r3, [pc, #96]	; (29cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    296c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2970:	4a16      	ldr	r2, [pc, #88]	; (29cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2972:	f023 0304 	bic.w	r3, r3, #4
    2976:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    297a:	9b01      	ldr	r3, [sp, #4]
    297c:	7c1b      	ldrb	r3, [r3, #16]
    297e:	2b02      	cmp	r3, #2
    2980:	d011      	beq.n	29a6 <Clock_Ip_SetSOSC_TrustedCall+0xda>
    2982:	2b02      	cmp	r3, #2
    2984:	dc14      	bgt.n	29b0 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    2986:	2b00      	cmp	r3, #0
    2988:	d002      	beq.n	2990 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    298a:	2b01      	cmp	r3, #1
    298c:	d005      	beq.n	299a <Clock_Ip_SetSOSC_TrustedCall+0xce>
    298e:	e00f      	b.n	29b0 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    2990:	4b0e      	ldr	r3, [pc, #56]	; (29cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2992:	2201      	movs	r2, #1
    2994:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    2998:	e014      	b.n	29c4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    299a:	4b0c      	ldr	r3, [pc, #48]	; (29cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    299c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    29a0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    29a4:	e00e      	b.n	29c4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    29a6:	4b09      	ldr	r3, [pc, #36]	; (29cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    29a8:	4a0b      	ldr	r2, [pc, #44]	; (29d8 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    29aa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    29ae:	e009      	b.n	29c4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    29b0:	4b06      	ldr	r3, [pc, #24]	; (29cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    29b2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    29b6:	4a05      	ldr	r2, [pc, #20]	; (29cc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    29b8:	f043 0301 	orr.w	r3, r3, #1
    29bc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    29c0:	e000      	b.n	29c4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    29c2:	bf00      	nop
}
    29c4:	bf00      	nop
    29c6:	b002      	add	sp, #8
    29c8:	4770      	bx	lr
    29ca:	bf00      	nop
    29cc:	40064000 	.word	0x40064000
    29d0:	003d08ff 	.word	0x003d08ff
    29d4:	007a1200 	.word	0x007a1200
    29d8:	00030001 	.word	0x00030001

000029dc <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    29dc:	b082      	sub	sp, #8
    29de:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    29e0:	4b05      	ldr	r3, [pc, #20]	; (29f8 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    29e2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    29e6:	4a04      	ldr	r2, [pc, #16]	; (29f8 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    29e8:	f023 0301 	bic.w	r3, r3, #1
    29ec:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    29f0:	bf00      	nop
    29f2:	b002      	add	sp, #8
    29f4:	4770      	bx	lr
    29f6:	bf00      	nop
    29f8:	40064000 	.word	0x40064000

000029fc <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    29fc:	b082      	sub	sp, #8
    29fe:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    2a00:	9b01      	ldr	r3, [sp, #4]
    2a02:	891b      	ldrh	r3, [r3, #8]
    2a04:	2b01      	cmp	r3, #1
    2a06:	d107      	bne.n	2a18 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    2a08:	4b05      	ldr	r3, [pc, #20]	; (2a20 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    2a0a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2a0e:	4a04      	ldr	r2, [pc, #16]	; (2a20 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    2a10:	f043 0301 	orr.w	r3, r3, #1
    2a14:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    2a18:	bf00      	nop
    2a1a:	b002      	add	sp, #8
    2a1c:	4770      	bx	lr
    2a1e:	bf00      	nop
    2a20:	40064000 	.word	0x40064000

00002a24 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    2a24:	b082      	sub	sp, #8
    2a26:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2a28:	bf00      	nop
    2a2a:	b002      	add	sp, #8
    2a2c:	4770      	bx	lr

00002a2e <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    2a2e:	b082      	sub	sp, #8
    2a30:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    2a32:	2300      	movs	r3, #0
}
    2a34:	4618      	mov	r0, r3
    2a36:	b002      	add	sp, #8
    2a38:	4770      	bx	lr

00002a3a <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    2a3a:	b082      	sub	sp, #8
    2a3c:	9001      	str	r0, [sp, #4]
    2a3e:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    2a40:	bf00      	nop
    2a42:	b002      	add	sp, #8
    2a44:	4770      	bx	lr
	...

00002a48 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    2a48:	b082      	sub	sp, #8
    2a4a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2a4c:	bf00      	nop
    2a4e:	b002      	add	sp, #8
    2a50:	4770      	bx	lr

00002a52 <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    2a52:	b082      	sub	sp, #8
    2a54:	9001      	str	r0, [sp, #4]
    2a56:	460b      	mov	r3, r1
    2a58:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    2a5c:	bf00      	nop
    2a5e:	b002      	add	sp, #8
    2a60:	4770      	bx	lr

00002a62 <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    2a62:	b500      	push	{lr}
    2a64:	b083      	sub	sp, #12
    2a66:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2a68:	9b01      	ldr	r3, [sp, #4]
    2a6a:	2b00      	cmp	r3, #0
    2a6c:	d002      	beq.n	2a74 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    2a6e:	9801      	ldr	r0, [sp, #4]
    2a70:	f000 f8e7 	bl	2c42 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2a74:	bf00      	nop
    2a76:	b003      	add	sp, #12
    2a78:	f85d fb04 	ldr.w	pc, [sp], #4

00002a7c <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2a7c:	b500      	push	{lr}
    2a7e:	b085      	sub	sp, #20
    2a80:	9001      	str	r0, [sp, #4]
    2a82:	460b      	mov	r3, r1
    2a84:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2a88:	9b01      	ldr	r3, [sp, #4]
    2a8a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2a8c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2a90:	2b00      	cmp	r3, #0
    2a92:	d003      	beq.n	2a9c <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    2a94:	2300      	movs	r3, #0
    2a96:	f8ad 300c 	strh.w	r3, [sp, #12]
    2a9a:	e002      	b.n	2aa2 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2a9c:	2301      	movs	r3, #1
    2a9e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    2aa2:	ab02      	add	r3, sp, #8
    2aa4:	4618      	mov	r0, r3
    2aa6:	f7ff ffdc 	bl	2a62 <Clock_Ip_ClockSetSimLPO1KEnable>
}
    2aaa:	bf00      	nop
    2aac:	b005      	add	sp, #20
    2aae:	f85d fb04 	ldr.w	pc, [sp], #4

00002ab2 <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    2ab2:	b500      	push	{lr}
    2ab4:	b083      	sub	sp, #12
    2ab6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ab8:	9b01      	ldr	r3, [sp, #4]
    2aba:	2b00      	cmp	r3, #0
    2abc:	d002      	beq.n	2ac4 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    2abe:	9801      	ldr	r0, [sp, #4]
    2ac0:	f000 f8d6 	bl	2c70 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ac4:	bf00      	nop
    2ac6:	b003      	add	sp, #12
    2ac8:	f85d fb04 	ldr.w	pc, [sp], #4

00002acc <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2acc:	b500      	push	{lr}
    2ace:	b085      	sub	sp, #20
    2ad0:	9001      	str	r0, [sp, #4]
    2ad2:	460b      	mov	r3, r1
    2ad4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2ad8:	9b01      	ldr	r3, [sp, #4]
    2ada:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2adc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2ae0:	2b00      	cmp	r3, #0
    2ae2:	d003      	beq.n	2aec <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    2ae4:	2300      	movs	r3, #0
    2ae6:	f8ad 300c 	strh.w	r3, [sp, #12]
    2aea:	e002      	b.n	2af2 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2aec:	2301      	movs	r3, #1
    2aee:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    2af2:	ab02      	add	r3, sp, #8
    2af4:	4618      	mov	r0, r3
    2af6:	f7ff ffdc 	bl	2ab2 <Clock_Ip_ClockSetSimLPO32KEnable>
}
    2afa:	bf00      	nop
    2afc:	b005      	add	sp, #20
    2afe:	f85d fb04 	ldr.w	pc, [sp], #4

00002b02 <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    2b02:	b500      	push	{lr}
    2b04:	b083      	sub	sp, #12
    2b06:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2b08:	9b01      	ldr	r3, [sp, #4]
    2b0a:	2b00      	cmp	r3, #0
    2b0c:	d002      	beq.n	2b14 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    2b0e:	9801      	ldr	r0, [sp, #4]
    2b10:	f000 f8c6 	bl	2ca0 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2b14:	bf00      	nop
    2b16:	b003      	add	sp, #12
    2b18:	f85d fb04 	ldr.w	pc, [sp], #4

00002b1c <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2b1c:	b500      	push	{lr}
    2b1e:	b085      	sub	sp, #20
    2b20:	9001      	str	r0, [sp, #4]
    2b22:	460b      	mov	r3, r1
    2b24:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2b28:	9b01      	ldr	r3, [sp, #4]
    2b2a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2b2c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2b30:	2b00      	cmp	r3, #0
    2b32:	d003      	beq.n	2b3c <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    2b34:	2300      	movs	r3, #0
    2b36:	f8ad 300c 	strh.w	r3, [sp, #12]
    2b3a:	e002      	b.n	2b42 <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2b3c:	2301      	movs	r3, #1
    2b3e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    2b42:	ab02      	add	r3, sp, #8
    2b44:	4618      	mov	r0, r3
    2b46:	f7ff ffdc 	bl	2b02 <Clock_Ip_ClockSetSimClkoutEnable>
}
    2b4a:	bf00      	nop
    2b4c:	b005      	add	sp, #20
    2b4e:	f85d fb04 	ldr.w	pc, [sp], #4

00002b52 <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    2b52:	b500      	push	{lr}
    2b54:	b083      	sub	sp, #12
    2b56:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2b58:	9b01      	ldr	r3, [sp, #4]
    2b5a:	2b00      	cmp	r3, #0
    2b5c:	d002      	beq.n	2b64 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    2b5e:	9801      	ldr	r0, [sp, #4]
    2b60:	f000 f8b6 	bl	2cd0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2b64:	bf00      	nop
    2b66:	b003      	add	sp, #12
    2b68:	f85d fb04 	ldr.w	pc, [sp], #4

00002b6c <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2b6c:	b500      	push	{lr}
    2b6e:	b085      	sub	sp, #20
    2b70:	9001      	str	r0, [sp, #4]
    2b72:	460b      	mov	r3, r1
    2b74:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2b78:	9b01      	ldr	r3, [sp, #4]
    2b7a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2b7c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2b80:	2b00      	cmp	r3, #0
    2b82:	d003      	beq.n	2b8c <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    2b84:	2300      	movs	r3, #0
    2b86:	f8ad 300c 	strh.w	r3, [sp, #12]
    2b8a:	e002      	b.n	2b92 <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2b8c:	2301      	movs	r3, #1
    2b8e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    2b92:	ab02      	add	r3, sp, #8
    2b94:	4618      	mov	r0, r3
    2b96:	f7ff ffdc 	bl	2b52 <Clock_Ip_ClockSetPccCgcEnable>
}
    2b9a:	bf00      	nop
    2b9c:	b005      	add	sp, #20
    2b9e:	f85d fb04 	ldr.w	pc, [sp], #4

00002ba2 <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    2ba2:	b500      	push	{lr}
    2ba4:	b083      	sub	sp, #12
    2ba6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ba8:	9b01      	ldr	r3, [sp, #4]
    2baa:	2b00      	cmp	r3, #0
    2bac:	d002      	beq.n	2bb4 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    2bae:	9801      	ldr	r0, [sp, #4]
    2bb0:	f000 f8bc 	bl	2d2c <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2bb4:	bf00      	nop
    2bb6:	b003      	add	sp, #12
    2bb8:	f85d fb04 	ldr.w	pc, [sp], #4

00002bbc <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    2bbc:	b500      	push	{lr}
    2bbe:	b085      	sub	sp, #20
    2bc0:	9001      	str	r0, [sp, #4]
    2bc2:	460b      	mov	r3, r1
    2bc4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2bc8:	9b01      	ldr	r3, [sp, #4]
    2bca:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2bcc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2bd0:	2b00      	cmp	r3, #0
    2bd2:	d003      	beq.n	2bdc <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    2bd4:	2300      	movs	r3, #0
    2bd6:	f8ad 300c 	strh.w	r3, [sp, #12]
    2bda:	e002      	b.n	2be2 <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2bdc:	2301      	movs	r3, #1
    2bde:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    2be2:	ab02      	add	r3, sp, #8
    2be4:	4618      	mov	r0, r3
    2be6:	f7ff ffdc 	bl	2ba2 <Clock_Ip_ClockSetSimGate>
}
    2bea:	bf00      	nop
    2bec:	b005      	add	sp, #20
    2bee:	f85d fb04 	ldr.w	pc, [sp], #4

00002bf2 <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    2bf2:	b500      	push	{lr}
    2bf4:	b083      	sub	sp, #12
    2bf6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2bf8:	9b01      	ldr	r3, [sp, #4]
    2bfa:	2b00      	cmp	r3, #0
    2bfc:	d002      	beq.n	2c04 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    2bfe:	9801      	ldr	r0, [sp, #4]
    2c00:	f000 f8c0 	bl	2d84 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c04:	bf00      	nop
    2c06:	b003      	add	sp, #12
    2c08:	f85d fb04 	ldr.w	pc, [sp], #4

00002c0c <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2c0c:	b500      	push	{lr}
    2c0e:	b085      	sub	sp, #20
    2c10:	9001      	str	r0, [sp, #4]
    2c12:	460b      	mov	r3, r1
    2c14:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2c18:	9b01      	ldr	r3, [sp, #4]
    2c1a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2c1c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2c20:	2b00      	cmp	r3, #0
    2c22:	d003      	beq.n	2c2c <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    2c24:	2300      	movs	r3, #0
    2c26:	f8ad 300c 	strh.w	r3, [sp, #12]
    2c2a:	e002      	b.n	2c32 <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2c2c:	2301      	movs	r3, #1
    2c2e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    2c32:	ab02      	add	r3, sp, #8
    2c34:	4618      	mov	r0, r3
    2c36:	f7ff ffdc 	bl	2bf2 <Clock_Ip_ClockSetSimTraceEnable>
}
    2c3a:	bf00      	nop
    2c3c:	b005      	add	sp, #20
    2c3e:	f85d fb04 	ldr.w	pc, [sp], #4

00002c42 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2c42:	b084      	sub	sp, #16
    2c44:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    2c46:	4b09      	ldr	r3, [pc, #36]	; (2c6c <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    2c48:	691b      	ldr	r3, [r3, #16]
    2c4a:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    2c4c:	9b03      	ldr	r3, [sp, #12]
    2c4e:	f023 0301 	bic.w	r3, r3, #1
    2c52:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    2c54:	9b01      	ldr	r3, [sp, #4]
    2c56:	889b      	ldrh	r3, [r3, #4]
    2c58:	461a      	mov	r2, r3
    2c5a:	9b03      	ldr	r3, [sp, #12]
    2c5c:	4313      	orrs	r3, r2
    2c5e:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    2c60:	4a02      	ldr	r2, [pc, #8]	; (2c6c <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    2c62:	9b03      	ldr	r3, [sp, #12]
    2c64:	6113      	str	r3, [r2, #16]
}
    2c66:	bf00      	nop
    2c68:	b004      	add	sp, #16
    2c6a:	4770      	bx	lr
    2c6c:	40048000 	.word	0x40048000

00002c70 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2c70:	b084      	sub	sp, #16
    2c72:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    2c74:	4b09      	ldr	r3, [pc, #36]	; (2c9c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    2c76:	691b      	ldr	r3, [r3, #16]
    2c78:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    2c7a:	9b03      	ldr	r3, [sp, #12]
    2c7c:	f023 0302 	bic.w	r3, r3, #2
    2c80:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    2c82:	9b01      	ldr	r3, [sp, #4]
    2c84:	889b      	ldrh	r3, [r3, #4]
    2c86:	005b      	lsls	r3, r3, #1
    2c88:	9a03      	ldr	r2, [sp, #12]
    2c8a:	4313      	orrs	r3, r2
    2c8c:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    2c8e:	4a03      	ldr	r2, [pc, #12]	; (2c9c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    2c90:	9b03      	ldr	r3, [sp, #12]
    2c92:	6113      	str	r3, [r2, #16]
}
    2c94:	bf00      	nop
    2c96:	b004      	add	sp, #16
    2c98:	4770      	bx	lr
    2c9a:	bf00      	nop
    2c9c:	40048000 	.word	0x40048000

00002ca0 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2ca0:	b084      	sub	sp, #16
    2ca2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    2ca4:	4b09      	ldr	r3, [pc, #36]	; (2ccc <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    2ca6:	685b      	ldr	r3, [r3, #4]
    2ca8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    2caa:	9b03      	ldr	r3, [sp, #12]
    2cac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    2cb0:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    2cb2:	9b01      	ldr	r3, [sp, #4]
    2cb4:	889b      	ldrh	r3, [r3, #4]
    2cb6:	02db      	lsls	r3, r3, #11
    2cb8:	9a03      	ldr	r2, [sp, #12]
    2cba:	4313      	orrs	r3, r2
    2cbc:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    2cbe:	4a03      	ldr	r2, [pc, #12]	; (2ccc <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    2cc0:	9b03      	ldr	r3, [sp, #12]
    2cc2:	6053      	str	r3, [r2, #4]
}
    2cc4:	bf00      	nop
    2cc6:	b004      	add	sp, #16
    2cc8:	4770      	bx	lr
    2cca:	bf00      	nop
    2ccc:	40048000 	.word	0x40048000

00002cd0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2cd0:	b084      	sub	sp, #16
    2cd2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    2cd4:	4913      	ldr	r1, [pc, #76]	; (2d24 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    2cd6:	9b01      	ldr	r3, [sp, #4]
    2cd8:	681a      	ldr	r2, [r3, #0]
    2cda:	4813      	ldr	r0, [pc, #76]	; (2d28 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    2cdc:	4613      	mov	r3, r2
    2cde:	00db      	lsls	r3, r3, #3
    2ce0:	4413      	add	r3, r2
    2ce2:	4403      	add	r3, r0
    2ce4:	3306      	adds	r3, #6
    2ce6:	781b      	ldrb	r3, [r3, #0]
    2ce8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    2cec:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    2cee:	9b03      	ldr	r3, [sp, #12]
    2cf0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    2cf4:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    2cf6:	9b01      	ldr	r3, [sp, #4]
    2cf8:	889b      	ldrh	r3, [r3, #4]
    2cfa:	079b      	lsls	r3, r3, #30
    2cfc:	9a03      	ldr	r2, [sp, #12]
    2cfe:	4313      	orrs	r3, r2
    2d00:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    2d02:	4908      	ldr	r1, [pc, #32]	; (2d24 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    2d04:	9b01      	ldr	r3, [sp, #4]
    2d06:	681a      	ldr	r2, [r3, #0]
    2d08:	4807      	ldr	r0, [pc, #28]	; (2d28 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    2d0a:	4613      	mov	r3, r2
    2d0c:	00db      	lsls	r3, r3, #3
    2d0e:	4413      	add	r3, r2
    2d10:	4403      	add	r3, r0
    2d12:	3306      	adds	r3, #6
    2d14:	781b      	ldrb	r3, [r3, #0]
    2d16:	461a      	mov	r2, r3
    2d18:	9b03      	ldr	r3, [sp, #12]
    2d1a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    2d1e:	bf00      	nop
    2d20:	b004      	add	sp, #16
    2d22:	4770      	bx	lr
    2d24:	40065000 	.word	0x40065000
    2d28:	000078d0 	.word	0x000078d0

00002d2c <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2d2c:	b086      	sub	sp, #24
    2d2e:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    2d30:	9b01      	ldr	r3, [sp, #4]
    2d32:	889b      	ldrh	r3, [r3, #4]
    2d34:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    2d36:	9b01      	ldr	r3, [sp, #4]
    2d38:	681a      	ldr	r2, [r3, #0]
    2d3a:	4910      	ldr	r1, [pc, #64]	; (2d7c <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    2d3c:	4613      	mov	r3, r2
    2d3e:	00db      	lsls	r3, r3, #3
    2d40:	4413      	add	r3, r2
    2d42:	440b      	add	r3, r1
    2d44:	3306      	adds	r3, #6
    2d46:	781b      	ldrb	r3, [r3, #0]
    2d48:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    2d4a:	4b0d      	ldr	r3, [pc, #52]	; (2d80 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    2d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2d4e:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    2d50:	2201      	movs	r2, #1
    2d52:	9b04      	ldr	r3, [sp, #16]
    2d54:	fa02 f303 	lsl.w	r3, r2, r3
    2d58:	43db      	mvns	r3, r3
    2d5a:	9a03      	ldr	r2, [sp, #12]
    2d5c:	4013      	ands	r3, r2
    2d5e:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    2d60:	9a05      	ldr	r2, [sp, #20]
    2d62:	9b04      	ldr	r3, [sp, #16]
    2d64:	fa02 f303 	lsl.w	r3, r2, r3
    2d68:	9a03      	ldr	r2, [sp, #12]
    2d6a:	4313      	orrs	r3, r2
    2d6c:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    2d6e:	4a04      	ldr	r2, [pc, #16]	; (2d80 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    2d70:	9b03      	ldr	r3, [sp, #12]
    2d72:	6413      	str	r3, [r2, #64]	; 0x40
}
    2d74:	bf00      	nop
    2d76:	b006      	add	sp, #24
    2d78:	4770      	bx	lr
    2d7a:	bf00      	nop
    2d7c:	000078d0 	.word	0x000078d0
    2d80:	40048000 	.word	0x40048000

00002d84 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2d84:	b084      	sub	sp, #16
    2d86:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    2d88:	4b0a      	ldr	r3, [pc, #40]	; (2db4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    2d8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2d8c:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    2d8e:	9b01      	ldr	r3, [sp, #4]
    2d90:	889b      	ldrh	r3, [r3, #4]
    2d92:	2b01      	cmp	r3, #1
    2d94:	d104      	bne.n	2da0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    2d96:	9b03      	ldr	r3, [sp, #12]
    2d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2d9c:	9303      	str	r3, [sp, #12]
    2d9e:	e003      	b.n	2da8 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    2da0:	9b03      	ldr	r3, [sp, #12]
    2da2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    2da6:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    2da8:	4a02      	ldr	r2, [pc, #8]	; (2db4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    2daa:	9b03      	ldr	r3, [sp, #12]
    2dac:	6693      	str	r3, [r2, #104]	; 0x68
}
    2dae:	bf00      	nop
    2db0:	b004      	add	sp, #16
    2db2:	4770      	bx	lr
    2db4:	40048000 	.word	0x40048000

00002db8 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    2db8:	b082      	sub	sp, #8
    2dba:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2dbc:	bf00      	nop
    2dbe:	b002      	add	sp, #8
    2dc0:	4770      	bx	lr

00002dc2 <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    2dc2:	b082      	sub	sp, #8
    2dc4:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    2dc6:	bf00      	nop
    2dc8:	b002      	add	sp, #8
    2dca:	4770      	bx	lr

00002dcc <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2dcc:	b500      	push	{lr}
    2dce:	b083      	sub	sp, #12
    2dd0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2dd2:	9b01      	ldr	r3, [sp, #4]
    2dd4:	2b00      	cmp	r3, #0
    2dd6:	d002      	beq.n	2dde <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    2dd8:	9801      	ldr	r0, [sp, #4]
    2dda:	f000 f8d1 	bl	2f80 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2dde:	bf00      	nop
    2de0:	b003      	add	sp, #12
    2de2:	f85d fb04 	ldr.w	pc, [sp], #4

00002de6 <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2de6:	b500      	push	{lr}
    2de8:	b083      	sub	sp, #12
    2dea:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2dec:	9b01      	ldr	r3, [sp, #4]
    2dee:	2b00      	cmp	r3, #0
    2df0:	d002      	beq.n	2df8 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    2df2:	9801      	ldr	r0, [sp, #4]
    2df4:	f000 f950 	bl	3098 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2df8:	bf00      	nop
    2dfa:	b003      	add	sp, #12
    2dfc:	f85d fb04 	ldr.w	pc, [sp], #4

00002e00 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    2e00:	b500      	push	{lr}
    2e02:	b083      	sub	sp, #12
    2e04:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    2e06:	9801      	ldr	r0, [sp, #4]
    2e08:	f000 f98e 	bl	3128 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2e0c:	bf00      	nop
    2e0e:	b003      	add	sp, #12
    2e10:	f85d fb04 	ldr.w	pc, [sp], #4

00002e14 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    2e14:	b500      	push	{lr}
    2e16:	b083      	sub	sp, #12
    2e18:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e1a:	9b01      	ldr	r3, [sp, #4]
    2e1c:	2b00      	cmp	r3, #0
    2e1e:	d002      	beq.n	2e26 <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    2e20:	9801      	ldr	r0, [sp, #4]
    2e22:	f000 f999 	bl	3158 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2e26:	bf00      	nop
    2e28:	b003      	add	sp, #12
    2e2a:	f85d fb04 	ldr.w	pc, [sp], #4

00002e2e <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    2e2e:	b500      	push	{lr}
    2e30:	b083      	sub	sp, #12
    2e32:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e34:	9b01      	ldr	r3, [sp, #4]
    2e36:	2b00      	cmp	r3, #0
    2e38:	d002      	beq.n	2e40 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    2e3a:	9801      	ldr	r0, [sp, #4]
    2e3c:	f000 f9b0 	bl	31a0 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2e40:	bf00      	nop
    2e42:	b003      	add	sp, #12
    2e44:	f85d fb04 	ldr.w	pc, [sp], #4

00002e48 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    2e48:	b500      	push	{lr}
    2e4a:	b083      	sub	sp, #12
    2e4c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    2e4e:	9801      	ldr	r0, [sp, #4]
    2e50:	f000 f9ba 	bl	31c8 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2e54:	bf00      	nop
    2e56:	b003      	add	sp, #12
    2e58:	f85d fb04 	ldr.w	pc, [sp], #4

00002e5c <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    2e5c:	b500      	push	{lr}
    2e5e:	b083      	sub	sp, #12
    2e60:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e62:	9b01      	ldr	r3, [sp, #4]
    2e64:	2b00      	cmp	r3, #0
    2e66:	d002      	beq.n	2e6e <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    2e68:	9801      	ldr	r0, [sp, #4]
    2e6a:	f000 f9bd 	bl	31e8 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2e6e:	bf00      	nop
    2e70:	b003      	add	sp, #12
    2e72:	f85d fb04 	ldr.w	pc, [sp], #4

00002e76 <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    2e76:	b500      	push	{lr}
    2e78:	b083      	sub	sp, #12
    2e7a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e7c:	9b01      	ldr	r3, [sp, #4]
    2e7e:	2b00      	cmp	r3, #0
    2e80:	d002      	beq.n	2e88 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    2e82:	9801      	ldr	r0, [sp, #4]
    2e84:	f000 f9d4 	bl	3230 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2e88:	bf00      	nop
    2e8a:	b003      	add	sp, #12
    2e8c:	f85d fb04 	ldr.w	pc, [sp], #4

00002e90 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    2e90:	b500      	push	{lr}
    2e92:	b083      	sub	sp, #12
    2e94:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    2e96:	9801      	ldr	r0, [sp, #4]
    2e98:	f000 f9de 	bl	3258 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2e9c:	bf00      	nop
    2e9e:	b003      	add	sp, #12
    2ea0:	f85d fb04 	ldr.w	pc, [sp], #4

00002ea4 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    2ea4:	b500      	push	{lr}
    2ea6:	b089      	sub	sp, #36	; 0x24
    2ea8:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    2eaa:	2300      	movs	r3, #0
    2eac:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    2eb0:	4b20      	ldr	r3, [pc, #128]	; (2f34 <SetInputSouceSytemClock+0x90>)
    2eb2:	695b      	ldr	r3, [r3, #20]
    2eb4:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    2eb6:	9b06      	ldr	r3, [sp, #24]
    2eb8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    2ebc:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    2ebe:	9b01      	ldr	r3, [sp, #4]
    2ec0:	061b      	lsls	r3, r3, #24
    2ec2:	9a06      	ldr	r2, [sp, #24]
    2ec4:	4313      	orrs	r3, r2
    2ec6:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    2ec8:	4a1a      	ldr	r2, [pc, #104]	; (2f34 <SetInputSouceSytemClock+0x90>)
    2eca:	9b06      	ldr	r3, [sp, #24]
    2ecc:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2ece:	aa02      	add	r2, sp, #8
    2ed0:	a903      	add	r1, sp, #12
    2ed2:	a804      	add	r0, sp, #16
    2ed4:	f24c 3350 	movw	r3, #50000	; 0xc350
    2ed8:	f7ff f9ac 	bl	2234 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    2edc:	4b15      	ldr	r3, [pc, #84]	; (2f34 <SetInputSouceSytemClock+0x90>)
    2ede:	691b      	ldr	r3, [r3, #16]
    2ee0:	0e1b      	lsrs	r3, r3, #24
    2ee2:	f003 030f 	and.w	r3, r3, #15
    2ee6:	9a01      	ldr	r2, [sp, #4]
    2ee8:	429a      	cmp	r2, r3
    2eea:	bf0c      	ite	eq
    2eec:	2301      	moveq	r3, #1
    2eee:	2300      	movne	r3, #0
    2ef0:	b2db      	uxtb	r3, r3
    2ef2:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2ef4:	9a02      	ldr	r2, [sp, #8]
    2ef6:	a903      	add	r1, sp, #12
    2ef8:	ab04      	add	r3, sp, #16
    2efa:	4618      	mov	r0, r3
    2efc:	f7ff f9b4 	bl	2268 <Clock_Ip_TimeoutExpired>
    2f00:	4603      	mov	r3, r0
    2f02:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    2f06:	9b05      	ldr	r3, [sp, #20]
    2f08:	2b00      	cmp	r3, #0
    2f0a:	d106      	bne.n	2f1a <SetInputSouceSytemClock+0x76>
    2f0c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2f10:	f083 0301 	eor.w	r3, r3, #1
    2f14:	b2db      	uxtb	r3, r3
    2f16:	2b00      	cmp	r3, #0
    2f18:	d1e0      	bne.n	2edc <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    2f1a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2f1e:	2b00      	cmp	r3, #0
    2f20:	d003      	beq.n	2f2a <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    2f22:	2105      	movs	r1, #5
    2f24:	2001      	movs	r0, #1
    2f26:	f7ff f975 	bl	2214 <Clock_Ip_ReportClockErrors>
    }
}
    2f2a:	bf00      	nop
    2f2c:	b009      	add	sp, #36	; 0x24
    2f2e:	f85d fb04 	ldr.w	pc, [sp], #4
    2f32:	bf00      	nop
    2f34:	40064000 	.word	0x40064000

00002f38 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2f38:	b500      	push	{lr}
    2f3a:	b083      	sub	sp, #12
    2f3c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f3e:	9b01      	ldr	r3, [sp, #4]
    2f40:	2b00      	cmp	r3, #0
    2f42:	d002      	beq.n	2f4a <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    2f44:	9801      	ldr	r0, [sp, #4]
    2f46:	f000 f997 	bl	3278 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f4a:	bf00      	nop
    2f4c:	b003      	add	sp, #12
    2f4e:	f85d fb04 	ldr.w	pc, [sp], #4

00002f52 <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2f52:	b500      	push	{lr}
    2f54:	b083      	sub	sp, #12
    2f56:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f58:	9b01      	ldr	r3, [sp, #4]
    2f5a:	2b00      	cmp	r3, #0
    2f5c:	d002      	beq.n	2f64 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    2f5e:	9801      	ldr	r0, [sp, #4]
    2f60:	f000 fa7e 	bl	3460 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f64:	bf00      	nop
    2f66:	b003      	add	sp, #12
    2f68:	f85d fb04 	ldr.w	pc, [sp], #4

00002f6c <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    2f6c:	b500      	push	{lr}
    2f6e:	b083      	sub	sp, #12
    2f70:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    2f72:	9801      	ldr	r0, [sp, #4]
    2f74:	f000 fab8 	bl	34e8 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2f78:	bf00      	nop
    2f7a:	b003      	add	sp, #12
    2f7c:	f85d fb04 	ldr.w	pc, [sp], #4

00002f80 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2f80:	b500      	push	{lr}
    2f82:	b08b      	sub	sp, #44	; 0x2c
    2f84:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2f86:	2300      	movs	r3, #0
    2f88:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    2f8c:	9b01      	ldr	r3, [sp, #4]
    2f8e:	2b00      	cmp	r3, #0
    2f90:	d10b      	bne.n	2faa <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    2f92:	2305      	movs	r3, #5
    2f94:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    2f96:	2301      	movs	r3, #1
    2f98:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    2f9c:	2301      	movs	r3, #1
    2f9e:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    2fa2:	2301      	movs	r3, #1
    2fa4:	f88d 3010 	strb.w	r3, [sp, #16]
    2fa8:	e00e      	b.n	2fc8 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    2faa:	9b01      	ldr	r3, [sp, #4]
    2fac:	681b      	ldr	r3, [r3, #0]
    2fae:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    2fb0:	9b01      	ldr	r3, [sp, #4]
    2fb2:	79db      	ldrb	r3, [r3, #7]
    2fb4:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    2fb8:	9b01      	ldr	r3, [sp, #4]
    2fba:	889b      	ldrh	r3, [r3, #4]
    2fbc:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    2fc0:	9b01      	ldr	r3, [sp, #4]
    2fc2:	7a1b      	ldrb	r3, [r3, #8]
    2fc4:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    2fc8:	4b32      	ldr	r3, [pc, #200]	; (3094 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2fca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2fce:	4a31      	ldr	r2, [pc, #196]	; (3094 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2fd0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2fd4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    2fd8:	4b2e      	ldr	r3, [pc, #184]	; (3094 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2fda:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2fde:	4a2d      	ldr	r2, [pc, #180]	; (3094 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2fe0:	f023 0301 	bic.w	r3, r3, #1
    2fe4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    2fe8:	4b2a      	ldr	r3, [pc, #168]	; (3094 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2fea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2fee:	4a29      	ldr	r2, [pc, #164]	; (3094 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2ff0:	f023 0304 	bic.w	r3, r3, #4
    2ff4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    2ff8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    2ffc:	2b01      	cmp	r3, #1
    2ffe:	d144      	bne.n	308a <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    3000:	f89d 300f 	ldrb.w	r3, [sp, #15]
    3004:	4a23      	ldr	r2, [pc, #140]	; (3094 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3006:	f003 0301 	and.w	r3, r3, #1
    300a:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    300e:	4b21      	ldr	r3, [pc, #132]	; (3094 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3010:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3014:	4a1f      	ldr	r2, [pc, #124]	; (3094 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3016:	f043 0301 	orr.w	r3, r3, #1
    301a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    301e:	4b1d      	ldr	r3, [pc, #116]	; (3094 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3020:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3024:	f89d 3010 	ldrb.w	r3, [sp, #16]
    3028:	009b      	lsls	r3, r3, #2
    302a:	f003 0304 	and.w	r3, r3, #4
    302e:	4919      	ldr	r1, [pc, #100]	; (3094 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3030:	4313      	orrs	r3, r2
    3032:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3036:	aa05      	add	r2, sp, #20
    3038:	a906      	add	r1, sp, #24
    303a:	a807      	add	r0, sp, #28
    303c:	f24c 3350 	movw	r3, #50000	; 0xc350
    3040:	f7ff f8f8 	bl	2234 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3044:	4b13      	ldr	r3, [pc, #76]	; (3094 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3046:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    304a:	0e1b      	lsrs	r3, r3, #24
    304c:	f003 0301 	and.w	r3, r3, #1
    3050:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3052:	9a05      	ldr	r2, [sp, #20]
    3054:	a906      	add	r1, sp, #24
    3056:	ab07      	add	r3, sp, #28
    3058:	4618      	mov	r0, r3
    305a:	f7ff f905 	bl	2268 <Clock_Ip_TimeoutExpired>
    305e:	4603      	mov	r3, r0
    3060:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3064:	9b08      	ldr	r3, [sp, #32]
    3066:	2b00      	cmp	r3, #0
    3068:	d106      	bne.n	3078 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    306a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    306e:	f083 0301 	eor.w	r3, r3, #1
    3072:	b2db      	uxtb	r3, r3
    3074:	2b00      	cmp	r3, #0
    3076:	d1e5      	bne.n	3044 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    3078:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    307c:	2b00      	cmp	r3, #0
    307e:	d004      	beq.n	308a <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    3080:	9b02      	ldr	r3, [sp, #8]
    3082:	4619      	mov	r1, r3
    3084:	2001      	movs	r0, #1
    3086:	f7ff f8c5 	bl	2214 <Clock_Ip_ReportClockErrors>
        }
    }
}
    308a:	bf00      	nop
    308c:	b00b      	add	sp, #44	; 0x2c
    308e:	f85d fb04 	ldr.w	pc, [sp], #4
    3092:	bf00      	nop
    3094:	40064000 	.word	0x40064000

00003098 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3098:	b500      	push	{lr}
    309a:	b089      	sub	sp, #36	; 0x24
    309c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    309e:	2300      	movs	r3, #0
    30a0:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    30a4:	4b1f      	ldr	r3, [pc, #124]	; (3124 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    30a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    30aa:	4a1e      	ldr	r2, [pc, #120]	; (3124 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    30ac:	f043 0301 	orr.w	r3, r3, #1
    30b0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    30b4:	4b1b      	ldr	r3, [pc, #108]	; (3124 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    30b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    30ba:	4a1a      	ldr	r2, [pc, #104]	; (3124 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    30bc:	f043 0304 	orr.w	r3, r3, #4
    30c0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    30c4:	aa03      	add	r2, sp, #12
    30c6:	a904      	add	r1, sp, #16
    30c8:	a805      	add	r0, sp, #20
    30ca:	f24c 3350 	movw	r3, #50000	; 0xc350
    30ce:	f7ff f8b1 	bl	2234 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    30d2:	4b14      	ldr	r3, [pc, #80]	; (3124 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    30d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    30d8:	0e1b      	lsrs	r3, r3, #24
    30da:	f003 0301 	and.w	r3, r3, #1
    30de:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    30e0:	9a03      	ldr	r2, [sp, #12]
    30e2:	a904      	add	r1, sp, #16
    30e4:	ab05      	add	r3, sp, #20
    30e6:	4618      	mov	r0, r3
    30e8:	f7ff f8be 	bl	2268 <Clock_Ip_TimeoutExpired>
    30ec:	4603      	mov	r3, r0
    30ee:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    30f2:	9b06      	ldr	r3, [sp, #24]
    30f4:	2b00      	cmp	r3, #0
    30f6:	d106      	bne.n	3106 <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    30f8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    30fc:	f083 0301 	eor.w	r3, r3, #1
    3100:	b2db      	uxtb	r3, r3
    3102:	2b00      	cmp	r3, #0
    3104:	d1e5      	bne.n	30d2 <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    3106:	f89d 301f 	ldrb.w	r3, [sp, #31]
    310a:	2b00      	cmp	r3, #0
    310c:	d005      	beq.n	311a <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    310e:	9b01      	ldr	r3, [sp, #4]
    3110:	681b      	ldr	r3, [r3, #0]
    3112:	4619      	mov	r1, r3
    3114:	2001      	movs	r0, #1
    3116:	f7ff f87d 	bl	2214 <Clock_Ip_ReportClockErrors>
    }
}
    311a:	bf00      	nop
    311c:	b009      	add	sp, #36	; 0x24
    311e:	f85d fb04 	ldr.w	pc, [sp], #4
    3122:	bf00      	nop
    3124:	40064000 	.word	0x40064000

00003128 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    3128:	b082      	sub	sp, #8
    312a:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    312c:	4b09      	ldr	r3, [pc, #36]	; (3154 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    312e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3132:	4a08      	ldr	r2, [pc, #32]	; (3154 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3134:	f023 0301 	bic.w	r3, r3, #1
    3138:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    313c:	4b05      	ldr	r3, [pc, #20]	; (3154 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    313e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3142:	4a04      	ldr	r2, [pc, #16]	; (3154 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3144:	f023 0304 	bic.w	r3, r3, #4
    3148:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    314c:	bf00      	nop
    314e:	b002      	add	sp, #8
    3150:	4770      	bx	lr
    3152:	bf00      	nop
    3154:	40064000 	.word	0x40064000

00003158 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3158:	b082      	sub	sp, #8
    315a:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    315c:	4b0f      	ldr	r3, [pc, #60]	; (319c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    315e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3162:	4a0e      	ldr	r2, [pc, #56]	; (319c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3164:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3168:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    316c:	4b0b      	ldr	r3, [pc, #44]	; (319c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    316e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3172:	4a0a      	ldr	r2, [pc, #40]	; (319c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3174:	f023 0304 	bic.w	r3, r3, #4
    3178:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    317c:	4b07      	ldr	r3, [pc, #28]	; (319c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    317e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3182:	9b01      	ldr	r3, [sp, #4]
    3184:	7a1b      	ldrb	r3, [r3, #8]
    3186:	009b      	lsls	r3, r3, #2
    3188:	f003 0304 	and.w	r3, r3, #4
    318c:	4903      	ldr	r1, [pc, #12]	; (319c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    318e:	4313      	orrs	r3, r2
    3190:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3194:	bf00      	nop
    3196:	b002      	add	sp, #8
    3198:	4770      	bx	lr
    319a:	bf00      	nop
    319c:	40064000 	.word	0x40064000

000031a0 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    31a0:	b082      	sub	sp, #8
    31a2:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    31a4:	9b01      	ldr	r3, [sp, #4]
    31a6:	889b      	ldrh	r3, [r3, #4]
    31a8:	2b01      	cmp	r3, #1
    31aa:	d107      	bne.n	31bc <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    31ac:	4b05      	ldr	r3, [pc, #20]	; (31c4 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    31ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    31b2:	4a04      	ldr	r2, [pc, #16]	; (31c4 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    31b4:	f043 0304 	orr.w	r3, r3, #4
    31b8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    31bc:	bf00      	nop
    31be:	b002      	add	sp, #8
    31c0:	4770      	bx	lr
    31c2:	bf00      	nop
    31c4:	40064000 	.word	0x40064000

000031c8 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    31c8:	b082      	sub	sp, #8
    31ca:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    31cc:	4b05      	ldr	r3, [pc, #20]	; (31e4 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    31ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    31d2:	4a04      	ldr	r2, [pc, #16]	; (31e4 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    31d4:	f023 0304 	bic.w	r3, r3, #4
    31d8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    31dc:	bf00      	nop
    31de:	b002      	add	sp, #8
    31e0:	4770      	bx	lr
    31e2:	bf00      	nop
    31e4:	40064000 	.word	0x40064000

000031e8 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    31e8:	b082      	sub	sp, #8
    31ea:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    31ec:	4b0f      	ldr	r3, [pc, #60]	; (322c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    31ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    31f2:	4a0e      	ldr	r2, [pc, #56]	; (322c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    31f4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    31f8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    31fc:	4b0b      	ldr	r3, [pc, #44]	; (322c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    31fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3202:	4a0a      	ldr	r2, [pc, #40]	; (322c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3204:	f023 0302 	bic.w	r3, r3, #2
    3208:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    320c:	4b07      	ldr	r3, [pc, #28]	; (322c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    320e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3212:	9b01      	ldr	r3, [sp, #4]
    3214:	7a5b      	ldrb	r3, [r3, #9]
    3216:	005b      	lsls	r3, r3, #1
    3218:	f003 0302 	and.w	r3, r3, #2
    321c:	4903      	ldr	r1, [pc, #12]	; (322c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    321e:	4313      	orrs	r3, r2
    3220:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3224:	bf00      	nop
    3226:	b002      	add	sp, #8
    3228:	4770      	bx	lr
    322a:	bf00      	nop
    322c:	40064000 	.word	0x40064000

00003230 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3230:	b082      	sub	sp, #8
    3232:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3234:	9b01      	ldr	r3, [sp, #4]
    3236:	889b      	ldrh	r3, [r3, #4]
    3238:	2b01      	cmp	r3, #1
    323a:	d107      	bne.n	324c <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    323c:	4b05      	ldr	r3, [pc, #20]	; (3254 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    323e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3242:	4a04      	ldr	r2, [pc, #16]	; (3254 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3244:	f043 0302 	orr.w	r3, r3, #2
    3248:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    324c:	bf00      	nop
    324e:	b002      	add	sp, #8
    3250:	4770      	bx	lr
    3252:	bf00      	nop
    3254:	40064000 	.word	0x40064000

00003258 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    3258:	b082      	sub	sp, #8
    325a:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    325c:	4b05      	ldr	r3, [pc, #20]	; (3274 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    325e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3262:	4a04      	ldr	r2, [pc, #16]	; (3274 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3264:	f023 0302 	bic.w	r3, r3, #2
    3268:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    326c:	bf00      	nop
    326e:	b002      	add	sp, #8
    3270:	4770      	bx	lr
    3272:	bf00      	nop
    3274:	40064000 	.word	0x40064000

00003278 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3278:	b500      	push	{lr}
    327a:	b08b      	sub	sp, #44	; 0x2c
    327c:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    327e:	9b01      	ldr	r3, [sp, #4]
    3280:	681a      	ldr	r2, [r3, #0]
    3282:	4975      	ldr	r1, [pc, #468]	; (3458 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    3284:	4613      	mov	r3, r2
    3286:	00db      	lsls	r3, r3, #3
    3288:	4413      	add	r3, r2
    328a:	440b      	add	r3, r1
    328c:	781b      	ldrb	r3, [r3, #0]
    328e:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    3290:	2300      	movs	r3, #0
    3292:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    3296:	2300      	movs	r3, #0
    3298:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    329c:	4b6f      	ldr	r3, [pc, #444]	; (345c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    329e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    32a2:	4a6e      	ldr	r2, [pc, #440]	; (345c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32a4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    32a8:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    32ac:	4b6b      	ldr	r3, [pc, #428]	; (345c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    32b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    32b6:	2b00      	cmp	r3, #0
    32b8:	d07d      	beq.n	33b6 <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    32ba:	9b01      	ldr	r3, [sp, #4]
    32bc:	79db      	ldrb	r3, [r3, #7]
    32be:	461a      	mov	r2, r3
    32c0:	4b66      	ldr	r3, [pc, #408]	; (345c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32c2:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    32c6:	f003 0303 	and.w	r3, r3, #3
    32ca:	429a      	cmp	r2, r3
    32cc:	d10b      	bne.n	32e6 <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    32ce:	9b01      	ldr	r3, [sp, #4]
    32d0:	799b      	ldrb	r3, [r3, #6]
    32d2:	461a      	mov	r2, r3
    32d4:	4b61      	ldr	r3, [pc, #388]	; (345c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    32da:	08db      	lsrs	r3, r3, #3
    32dc:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    32e0:	429a      	cmp	r2, r3
    32e2:	f000 80b4 	beq.w	344e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    32e6:	4b5d      	ldr	r3, [pc, #372]	; (345c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    32ec:	f003 0301 	and.w	r3, r3, #1
    32f0:	2b00      	cmp	r3, #0
    32f2:	d105      	bne.n	3300 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    32f4:	2301      	movs	r3, #1
    32f6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    32fa:	2000      	movs	r0, #0
    32fc:	f7ff fd66 	bl	2dcc <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    3300:	2002      	movs	r0, #2
    3302:	f7ff fdcf 	bl	2ea4 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3306:	4b55      	ldr	r3, [pc, #340]	; (345c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3308:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    330c:	4a53      	ldr	r2, [pc, #332]	; (345c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    330e:	f023 0301 	bic.w	r3, r3, #1
    3312:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    3316:	9b01      	ldr	r3, [sp, #4]
    3318:	889b      	ldrh	r3, [r3, #4]
    331a:	2b01      	cmp	r3, #1
    331c:	f040 8097 	bne.w	344e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3320:	9b01      	ldr	r3, [sp, #4]
    3322:	79db      	ldrb	r3, [r3, #7]
    3324:	4a4d      	ldr	r2, [pc, #308]	; (345c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3326:	f003 0303 	and.w	r3, r3, #3
    332a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    332e:	4b4b      	ldr	r3, [pc, #300]	; (345c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3330:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3334:	9b01      	ldr	r3, [sp, #4]
    3336:	799b      	ldrb	r3, [r3, #6]
    3338:	00db      	lsls	r3, r3, #3
    333a:	f003 0308 	and.w	r3, r3, #8
    333e:	4313      	orrs	r3, r2
    3340:	4a46      	ldr	r2, [pc, #280]	; (345c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3342:	f043 0301 	orr.w	r3, r3, #1
    3346:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    334a:	aa03      	add	r2, sp, #12
    334c:	a904      	add	r1, sp, #16
    334e:	a805      	add	r0, sp, #20
    3350:	f24c 3350 	movw	r3, #50000	; 0xc350
    3354:	f7fe ff6e 	bl	2234 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3358:	4b40      	ldr	r3, [pc, #256]	; (345c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    335a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    335e:	0e1b      	lsrs	r3, r3, #24
    3360:	f003 0301 	and.w	r3, r3, #1
    3364:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3366:	9a03      	ldr	r2, [sp, #12]
    3368:	a904      	add	r1, sp, #16
    336a:	ab05      	add	r3, sp, #20
    336c:	4618      	mov	r0, r3
    336e:	f7fe ff7b 	bl	2268 <Clock_Ip_TimeoutExpired>
    3372:	4603      	mov	r3, r0
    3374:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3378:	9b06      	ldr	r3, [sp, #24]
    337a:	2b00      	cmp	r3, #0
    337c:	d106      	bne.n	338c <Clock_Ip_SetFirc_TrustedCall+0x114>
    337e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3382:	f083 0301 	eor.w	r3, r3, #1
    3386:	b2db      	uxtb	r3, r3
    3388:	2b00      	cmp	r3, #0
    338a:	d1e5      	bne.n	3358 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    338c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3390:	2b00      	cmp	r3, #0
    3392:	d005      	beq.n	33a0 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3394:	9b01      	ldr	r3, [sp, #4]
    3396:	681b      	ldr	r3, [r3, #0]
    3398:	4619      	mov	r1, r3
    339a:	2001      	movs	r0, #1
    339c:	f7fe ff3a 	bl	2214 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    33a0:	2003      	movs	r0, #3
    33a2:	f7ff fd7f 	bl	2ea4 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    33a6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    33aa:	2b00      	cmp	r3, #0
    33ac:	d04f      	beq.n	344e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    33ae:	2002      	movs	r0, #2
    33b0:	f7ff fd26 	bl	2e00 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    33b4:	e04b      	b.n	344e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    33b6:	4b29      	ldr	r3, [pc, #164]	; (345c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    33b8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    33bc:	4a27      	ldr	r2, [pc, #156]	; (345c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    33be:	f023 0301 	bic.w	r3, r3, #1
    33c2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    33c6:	9b01      	ldr	r3, [sp, #4]
    33c8:	889b      	ldrh	r3, [r3, #4]
    33ca:	2b01      	cmp	r3, #1
    33cc:	d13f      	bne.n	344e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    33ce:	9b01      	ldr	r3, [sp, #4]
    33d0:	79db      	ldrb	r3, [r3, #7]
    33d2:	4a22      	ldr	r2, [pc, #136]	; (345c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    33d4:	f003 0303 	and.w	r3, r3, #3
    33d8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    33dc:	4b1f      	ldr	r3, [pc, #124]	; (345c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    33de:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    33e2:	9b01      	ldr	r3, [sp, #4]
    33e4:	799b      	ldrb	r3, [r3, #6]
    33e6:	00db      	lsls	r3, r3, #3
    33e8:	f003 0308 	and.w	r3, r3, #8
    33ec:	4313      	orrs	r3, r2
    33ee:	4a1b      	ldr	r2, [pc, #108]	; (345c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    33f0:	f043 0301 	orr.w	r3, r3, #1
    33f4:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    33f8:	aa03      	add	r2, sp, #12
    33fa:	a904      	add	r1, sp, #16
    33fc:	a805      	add	r0, sp, #20
    33fe:	f24c 3350 	movw	r3, #50000	; 0xc350
    3402:	f7fe ff17 	bl	2234 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3406:	4b15      	ldr	r3, [pc, #84]	; (345c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3408:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    340c:	0e1b      	lsrs	r3, r3, #24
    340e:	f003 0301 	and.w	r3, r3, #1
    3412:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3414:	9a03      	ldr	r2, [sp, #12]
    3416:	a904      	add	r1, sp, #16
    3418:	ab05      	add	r3, sp, #20
    341a:	4618      	mov	r0, r3
    341c:	f7fe ff24 	bl	2268 <Clock_Ip_TimeoutExpired>
    3420:	4603      	mov	r3, r0
    3422:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3426:	9b06      	ldr	r3, [sp, #24]
    3428:	2b00      	cmp	r3, #0
    342a:	d106      	bne.n	343a <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    342c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3430:	f083 0301 	eor.w	r3, r3, #1
    3434:	b2db      	uxtb	r3, r3
    3436:	2b00      	cmp	r3, #0
    3438:	d1e5      	bne.n	3406 <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    343a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    343e:	2b00      	cmp	r3, #0
    3440:	d005      	beq.n	344e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3442:	9b01      	ldr	r3, [sp, #4]
    3444:	681b      	ldr	r3, [r3, #0]
    3446:	4619      	mov	r1, r3
    3448:	2001      	movs	r0, #1
    344a:	f7fe fee3 	bl	2214 <Clock_Ip_ReportClockErrors>
}
    344e:	bf00      	nop
    3450:	b00b      	add	sp, #44	; 0x2c
    3452:	f85d fb04 	ldr.w	pc, [sp], #4
    3456:	bf00      	nop
    3458:	000078d0 	.word	0x000078d0
    345c:	40064000 	.word	0x40064000

00003460 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3460:	b500      	push	{lr}
    3462:	b089      	sub	sp, #36	; 0x24
    3464:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3466:	2300      	movs	r3, #0
    3468:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    346c:	9b01      	ldr	r3, [sp, #4]
    346e:	889b      	ldrh	r3, [r3, #4]
    3470:	2b01      	cmp	r3, #1
    3472:	d132      	bne.n	34da <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    3474:	4b1b      	ldr	r3, [pc, #108]	; (34e4 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3476:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    347a:	4a1a      	ldr	r2, [pc, #104]	; (34e4 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    347c:	f043 0301 	orr.w	r3, r3, #1
    3480:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3484:	aa03      	add	r2, sp, #12
    3486:	a904      	add	r1, sp, #16
    3488:	a805      	add	r0, sp, #20
    348a:	f24c 3350 	movw	r3, #50000	; 0xc350
    348e:	f7fe fed1 	bl	2234 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3492:	4b14      	ldr	r3, [pc, #80]	; (34e4 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3494:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3498:	0e1b      	lsrs	r3, r3, #24
    349a:	f003 0301 	and.w	r3, r3, #1
    349e:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    34a0:	9a03      	ldr	r2, [sp, #12]
    34a2:	a904      	add	r1, sp, #16
    34a4:	ab05      	add	r3, sp, #20
    34a6:	4618      	mov	r0, r3
    34a8:	f7fe fede 	bl	2268 <Clock_Ip_TimeoutExpired>
    34ac:	4603      	mov	r3, r0
    34ae:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    34b2:	9b06      	ldr	r3, [sp, #24]
    34b4:	2b00      	cmp	r3, #0
    34b6:	d106      	bne.n	34c6 <Clock_Ip_EnableFirc_TrustedCall+0x66>
    34b8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    34bc:	f083 0301 	eor.w	r3, r3, #1
    34c0:	b2db      	uxtb	r3, r3
    34c2:	2b00      	cmp	r3, #0
    34c4:	d1e5      	bne.n	3492 <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    34c6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    34ca:	2b00      	cmp	r3, #0
    34cc:	d005      	beq.n	34da <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    34ce:	9b01      	ldr	r3, [sp, #4]
    34d0:	681b      	ldr	r3, [r3, #0]
    34d2:	4619      	mov	r1, r3
    34d4:	2001      	movs	r0, #1
    34d6:	f7fe fe9d 	bl	2214 <Clock_Ip_ReportClockErrors>
        }
    }
}
    34da:	bf00      	nop
    34dc:	b009      	add	sp, #36	; 0x24
    34de:	f85d fb04 	ldr.w	pc, [sp], #4
    34e2:	bf00      	nop
    34e4:	40064000 	.word	0x40064000

000034e8 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    34e8:	b082      	sub	sp, #8
    34ea:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    34ec:	4b05      	ldr	r3, [pc, #20]	; (3504 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    34ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    34f2:	4a04      	ldr	r2, [pc, #16]	; (3504 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    34f4:	f023 0301 	bic.w	r3, r3, #1
    34f8:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    34fc:	bf00      	nop
    34fe:	b002      	add	sp, #8
    3500:	4770      	bx	lr
    3502:	bf00      	nop
    3504:	40064000 	.word	0x40064000

00003508 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    3508:	b082      	sub	sp, #8
    350a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    350c:	bf00      	nop
    350e:	b002      	add	sp, #8
    3510:	4770      	bx	lr

00003512 <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    3512:	b082      	sub	sp, #8
    3514:	9001      	str	r0, [sp, #4]
    3516:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    3518:	bf00      	nop
    351a:	b002      	add	sp, #8
    351c:	4770      	bx	lr

0000351e <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    351e:	b082      	sub	sp, #8
    3520:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    3522:	bf00      	nop
    3524:	b002      	add	sp, #8
    3526:	4770      	bx	lr

00003528 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    3528:	b082      	sub	sp, #8
    352a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    352c:	bf00      	nop
    352e:	b002      	add	sp, #8
    3530:	4770      	bx	lr

00003532 <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    3532:	b082      	sub	sp, #8
    3534:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    3536:	2302      	movs	r3, #2
}
    3538:	4618      	mov	r0, r3
    353a:	b002      	add	sp, #8
    353c:	4770      	bx	lr

0000353e <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    353e:	b082      	sub	sp, #8
    3540:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    3542:	bf00      	nop
    3544:	b002      	add	sp, #8
    3546:	4770      	bx	lr

00003548 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    3548:	b500      	push	{lr}
    354a:	b083      	sub	sp, #12
    354c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    354e:	9b01      	ldr	r3, [sp, #4]
    3550:	2b00      	cmp	r3, #0
    3552:	d002      	beq.n	355a <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    3554:	9801      	ldr	r0, [sp, #4]
    3556:	f000 f870 	bl	363a <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    355a:	bf00      	nop
    355c:	b003      	add	sp, #12
    355e:	f85d fb04 	ldr.w	pc, [sp], #4

00003562 <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    3562:	b500      	push	{lr}
    3564:	b083      	sub	sp, #12
    3566:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3568:	9b01      	ldr	r3, [sp, #4]
    356a:	2b00      	cmp	r3, #0
    356c:	d002      	beq.n	3574 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    356e:	9801      	ldr	r0, [sp, #4]
    3570:	f000 f89a 	bl	36a8 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3574:	bf00      	nop
    3576:	b003      	add	sp, #12
    3578:	f85d fb04 	ldr.w	pc, [sp], #4

0000357c <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    357c:	b500      	push	{lr}
    357e:	b089      	sub	sp, #36	; 0x24
    3580:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    3582:	2301      	movs	r3, #1
    3584:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    3586:	2300      	movs	r3, #0
    3588:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    358c:	4b1e      	ldr	r3, [pc, #120]	; (3608 <Clock_Ip_CompleteSpll+0x8c>)
    358e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3592:	f003 0301 	and.w	r3, r3, #1
    3596:	2b00      	cmp	r3, #0
    3598:	d02f      	beq.n	35fa <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    359a:	aa02      	add	r2, sp, #8
    359c:	a903      	add	r1, sp, #12
    359e:	a804      	add	r0, sp, #16
    35a0:	f24c 3350 	movw	r3, #50000	; 0xc350
    35a4:	f7fe fe46 	bl	2234 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    35a8:	4b17      	ldr	r3, [pc, #92]	; (3608 <Clock_Ip_CompleteSpll+0x8c>)
    35aa:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    35ae:	0e1b      	lsrs	r3, r3, #24
    35b0:	f003 0301 	and.w	r3, r3, #1
    35b4:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    35b6:	9a02      	ldr	r2, [sp, #8]
    35b8:	a903      	add	r1, sp, #12
    35ba:	ab04      	add	r3, sp, #16
    35bc:	4618      	mov	r0, r3
    35be:	f7fe fe53 	bl	2268 <Clock_Ip_TimeoutExpired>
    35c2:	4603      	mov	r3, r0
    35c4:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    35c8:	9b05      	ldr	r3, [sp, #20]
    35ca:	2b00      	cmp	r3, #0
    35cc:	d106      	bne.n	35dc <Clock_Ip_CompleteSpll+0x60>
    35ce:	f89d 301b 	ldrb.w	r3, [sp, #27]
    35d2:	f083 0301 	eor.w	r3, r3, #1
    35d6:	b2db      	uxtb	r3, r3
    35d8:	2b00      	cmp	r3, #0
    35da:	d1e5      	bne.n	35a8 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    35dc:	f89d 301b 	ldrb.w	r3, [sp, #27]
    35e0:	f083 0301 	eor.w	r3, r3, #1
    35e4:	b2db      	uxtb	r3, r3
    35e6:	2b00      	cmp	r3, #0
    35e8:	d002      	beq.n	35f0 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    35ea:	2302      	movs	r3, #2
    35ec:	9307      	str	r3, [sp, #28]
    35ee:	e006      	b.n	35fe <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    35f0:	9901      	ldr	r1, [sp, #4]
    35f2:	2001      	movs	r0, #1
    35f4:	f7fe fe0e 	bl	2214 <Clock_Ip_ReportClockErrors>
    35f8:	e001      	b.n	35fe <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    35fa:	2300      	movs	r3, #0
    35fc:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    35fe:	9b07      	ldr	r3, [sp, #28]
}
    3600:	4618      	mov	r0, r3
    3602:	b009      	add	sp, #36	; 0x24
    3604:	f85d fb04 	ldr.w	pc, [sp], #4
    3608:	40064000 	.word	0x40064000

0000360c <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    360c:	b500      	push	{lr}
    360e:	b083      	sub	sp, #12
    3610:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    3612:	9801      	ldr	r0, [sp, #4]
    3614:	f000 f886 	bl	3724 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3618:	bf00      	nop
    361a:	b003      	add	sp, #12
    361c:	f85d fb04 	ldr.w	pc, [sp], #4

00003620 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    3620:	b500      	push	{lr}
    3622:	b083      	sub	sp, #12
    3624:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3626:	9b01      	ldr	r3, [sp, #4]
    3628:	2b00      	cmp	r3, #0
    362a:	d002      	beq.n	3632 <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    362c:	9801      	ldr	r0, [sp, #4]
    362e:	f000 f891 	bl	3754 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3632:	bf00      	nop
    3634:	b003      	add	sp, #12
    3636:	f85d fb04 	ldr.w	pc, [sp], #4

0000363a <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    363a:	b082      	sub	sp, #8
    363c:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    363e:	4b19      	ldr	r3, [pc, #100]	; (36a4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3640:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3644:	4a17      	ldr	r2, [pc, #92]	; (36a4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3646:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    364a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    364e:	4b15      	ldr	r3, [pc, #84]	; (36a4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3650:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3654:	4a13      	ldr	r2, [pc, #76]	; (36a4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    365a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    365e:	4b11      	ldr	r3, [pc, #68]	; (36a4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3660:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3664:	4a0f      	ldr	r2, [pc, #60]	; (36a4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3666:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    366a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    366e:	4b0d      	ldr	r3, [pc, #52]	; (36a4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3670:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3674:	4a0b      	ldr	r2, [pc, #44]	; (36a4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3676:	f023 0301 	bic.w	r3, r3, #1
    367a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    367e:	4b09      	ldr	r3, [pc, #36]	; (36a4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3680:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3684:	4a07      	ldr	r2, [pc, #28]	; (36a4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3686:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    368a:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    368e:	4b05      	ldr	r3, [pc, #20]	; (36a4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3690:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3694:	4a03      	ldr	r2, [pc, #12]	; (36a4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3696:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    369a:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    369e:	bf00      	nop
    36a0:	b002      	add	sp, #8
    36a2:	4770      	bx	lr
    36a4:	40064000 	.word	0x40064000

000036a8 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    36a8:	b082      	sub	sp, #8
    36aa:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    36ac:	9b01      	ldr	r3, [sp, #4]
    36ae:	889b      	ldrh	r3, [r3, #4]
    36b0:	2b01      	cmp	r3, #1
    36b2:	d12f      	bne.n	3714 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    36b4:	4b1a      	ldr	r3, [pc, #104]	; (3720 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    36b6:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    36ba:	9b01      	ldr	r3, [sp, #4]
    36bc:	7b5b      	ldrb	r3, [r3, #13]
    36be:	3b01      	subs	r3, #1
    36c0:	021b      	lsls	r3, r3, #8
    36c2:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    36c6:	9b01      	ldr	r3, [sp, #4]
    36c8:	7d1b      	ldrb	r3, [r3, #20]
    36ca:	3b10      	subs	r3, #16
    36cc:	041b      	lsls	r3, r3, #16
    36ce:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    36d2:	430b      	orrs	r3, r1
    36d4:	4912      	ldr	r1, [pc, #72]	; (3720 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    36d6:	4313      	orrs	r3, r2
    36d8:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    36dc:	9b01      	ldr	r3, [sp, #4]
    36de:	7fdb      	ldrb	r3, [r3, #31]
    36e0:	2b02      	cmp	r3, #2
    36e2:	d011      	beq.n	3708 <Clock_Ip_SetSpll_TrustedCall+0x60>
    36e4:	2b02      	cmp	r3, #2
    36e6:	dc17      	bgt.n	3718 <Clock_Ip_SetSpll_TrustedCall+0x70>
    36e8:	2b00      	cmp	r3, #0
    36ea:	d002      	beq.n	36f2 <Clock_Ip_SetSpll_TrustedCall+0x4a>
    36ec:	2b01      	cmp	r3, #1
    36ee:	d005      	beq.n	36fc <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    36f0:	e012      	b.n	3718 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    36f2:	4b0b      	ldr	r3, [pc, #44]	; (3720 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    36f4:	2200      	movs	r2, #0
    36f6:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    36fa:	e00e      	b.n	371a <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    36fc:	4b08      	ldr	r3, [pc, #32]	; (3720 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    36fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3702:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3706:	e008      	b.n	371a <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    3708:	4b05      	ldr	r3, [pc, #20]	; (3720 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    370a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    370e:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3712:	e002      	b.n	371a <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    3714:	bf00      	nop
    3716:	e000      	b.n	371a <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    3718:	bf00      	nop
}
    371a:	bf00      	nop
    371c:	b002      	add	sp, #8
    371e:	4770      	bx	lr
    3720:	40064000 	.word	0x40064000

00003724 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    3724:	b082      	sub	sp, #8
    3726:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    3728:	4b09      	ldr	r3, [pc, #36]	; (3750 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    372a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    372e:	4a08      	ldr	r2, [pc, #32]	; (3750 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3730:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3734:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    3738:	4b05      	ldr	r3, [pc, #20]	; (3750 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    373a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    373e:	4a04      	ldr	r2, [pc, #16]	; (3750 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3740:	f023 0301 	bic.w	r3, r3, #1
    3744:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    3748:	bf00      	nop
    374a:	b002      	add	sp, #8
    374c:	4770      	bx	lr
    374e:	bf00      	nop
    3750:	40064000 	.word	0x40064000

00003754 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3754:	b082      	sub	sp, #8
    3756:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    3758:	9b01      	ldr	r3, [sp, #4]
    375a:	889b      	ldrh	r3, [r3, #4]
    375c:	2b01      	cmp	r3, #1
    375e:	d107      	bne.n	3770 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    3760:	4b05      	ldr	r3, [pc, #20]	; (3778 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    3762:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3766:	4a04      	ldr	r2, [pc, #16]	; (3778 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    3768:	f043 0301 	orr.w	r3, r3, #1
    376c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    3770:	bf00      	nop
    3772:	b002      	add	sp, #8
    3774:	4770      	bx	lr
    3776:	bf00      	nop
    3778:	40064000 	.word	0x40064000

0000377c <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    377c:	b082      	sub	sp, #8
    377e:	9001      	str	r0, [sp, #4]
    3780:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    3782:	bf00      	nop
    3784:	b002      	add	sp, #8
    3786:	4770      	bx	lr

00003788 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    3788:	b082      	sub	sp, #8
    378a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    378c:	bf00      	nop
    378e:	b002      	add	sp, #8
    3790:	4770      	bx	lr

00003792 <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3792:	b500      	push	{lr}
    3794:	b083      	sub	sp, #12
    3796:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3798:	9b01      	ldr	r3, [sp, #4]
    379a:	2b00      	cmp	r3, #0
    379c:	d002      	beq.n	37a4 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    379e:	9801      	ldr	r0, [sp, #4]
    37a0:	f000 f8ee 	bl	3980 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37a4:	bf00      	nop
    37a6:	b003      	add	sp, #12
    37a8:	f85d fb04 	ldr.w	pc, [sp], #4

000037ac <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    37ac:	b500      	push	{lr}
    37ae:	b083      	sub	sp, #12
    37b0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37b2:	9b01      	ldr	r3, [sp, #4]
    37b4:	2b00      	cmp	r3, #0
    37b6:	d002      	beq.n	37be <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    37b8:	9801      	ldr	r0, [sp, #4]
    37ba:	f000 f8ff 	bl	39bc <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37be:	bf00      	nop
    37c0:	b003      	add	sp, #12
    37c2:	f85d fb04 	ldr.w	pc, [sp], #4

000037c6 <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    37c6:	b500      	push	{lr}
    37c8:	b083      	sub	sp, #12
    37ca:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37cc:	9b01      	ldr	r3, [sp, #4]
    37ce:	2b00      	cmp	r3, #0
    37d0:	d002      	beq.n	37d8 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    37d2:	9801      	ldr	r0, [sp, #4]
    37d4:	f000 f912 	bl	39fc <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37d8:	bf00      	nop
    37da:	b003      	add	sp, #12
    37dc:	f85d fb04 	ldr.w	pc, [sp], #4

000037e0 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    37e0:	b500      	push	{lr}
    37e2:	b083      	sub	sp, #12
    37e4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37e6:	9b01      	ldr	r3, [sp, #4]
    37e8:	2b00      	cmp	r3, #0
    37ea:	d002      	beq.n	37f2 <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    37ec:	9801      	ldr	r0, [sp, #4]
    37ee:	f000 f925 	bl	3a3c <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37f2:	bf00      	nop
    37f4:	b003      	add	sp, #12
    37f6:	f85d fb04 	ldr.w	pc, [sp], #4

000037fa <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    37fa:	b500      	push	{lr}
    37fc:	b083      	sub	sp, #12
    37fe:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3800:	9b01      	ldr	r3, [sp, #4]
    3802:	2b00      	cmp	r3, #0
    3804:	d002      	beq.n	380c <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    3806:	9801      	ldr	r0, [sp, #4]
    3808:	f000 f936 	bl	3a78 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    380c:	bf00      	nop
    380e:	b003      	add	sp, #12
    3810:	f85d fb04 	ldr.w	pc, [sp], #4

00003814 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    3814:	b500      	push	{lr}
    3816:	b083      	sub	sp, #12
    3818:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    381a:	9b01      	ldr	r3, [sp, #4]
    381c:	2b00      	cmp	r3, #0
    381e:	d002      	beq.n	3826 <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    3820:	9801      	ldr	r0, [sp, #4]
    3822:	f000 f949 	bl	3ab8 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3826:	bf00      	nop
    3828:	b003      	add	sp, #12
    382a:	f85d fb04 	ldr.w	pc, [sp], #4

0000382e <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    382e:	b500      	push	{lr}
    3830:	b083      	sub	sp, #12
    3832:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3834:	9b01      	ldr	r3, [sp, #4]
    3836:	2b00      	cmp	r3, #0
    3838:	d002      	beq.n	3840 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    383a:	9801      	ldr	r0, [sp, #4]
    383c:	f000 f958 	bl	3af0 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3840:	bf00      	nop
    3842:	b003      	add	sp, #12
    3844:	f85d fb04 	ldr.w	pc, [sp], #4

00003848 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    3848:	b500      	push	{lr}
    384a:	b083      	sub	sp, #12
    384c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    384e:	9b01      	ldr	r3, [sp, #4]
    3850:	2b00      	cmp	r3, #0
    3852:	d002      	beq.n	385a <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    3854:	9801      	ldr	r0, [sp, #4]
    3856:	f000 f969 	bl	3b2c <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    385a:	bf00      	nop
    385c:	b003      	add	sp, #12
    385e:	f85d fb04 	ldr.w	pc, [sp], #4

00003862 <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    3862:	b500      	push	{lr}
    3864:	b083      	sub	sp, #12
    3866:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3868:	9b01      	ldr	r3, [sp, #4]
    386a:	2b00      	cmp	r3, #0
    386c:	d002      	beq.n	3874 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    386e:	9801      	ldr	r0, [sp, #4]
    3870:	f000 f978 	bl	3b64 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3874:	bf00      	nop
    3876:	b003      	add	sp, #12
    3878:	f85d fb04 	ldr.w	pc, [sp], #4

0000387c <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    387c:	b500      	push	{lr}
    387e:	b083      	sub	sp, #12
    3880:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3882:	9b01      	ldr	r3, [sp, #4]
    3884:	2b00      	cmp	r3, #0
    3886:	d002      	beq.n	388e <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    3888:	9801      	ldr	r0, [sp, #4]
    388a:	f000 f989 	bl	3ba0 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    388e:	bf00      	nop
    3890:	b003      	add	sp, #12
    3892:	f85d fb04 	ldr.w	pc, [sp], #4

00003896 <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3896:	b500      	push	{lr}
    3898:	b083      	sub	sp, #12
    389a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    389c:	9b01      	ldr	r3, [sp, #4]
    389e:	2b00      	cmp	r3, #0
    38a0:	d002      	beq.n	38a8 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    38a2:	9801      	ldr	r0, [sp, #4]
    38a4:	f000 f998 	bl	3bd8 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38a8:	bf00      	nop
    38aa:	b003      	add	sp, #12
    38ac:	f85d fb04 	ldr.w	pc, [sp], #4

000038b0 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    38b0:	b500      	push	{lr}
    38b2:	b083      	sub	sp, #12
    38b4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38b6:	9b01      	ldr	r3, [sp, #4]
    38b8:	2b00      	cmp	r3, #0
    38ba:	d002      	beq.n	38c2 <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    38bc:	9801      	ldr	r0, [sp, #4]
    38be:	f000 f9a9 	bl	3c14 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38c2:	bf00      	nop
    38c4:	b003      	add	sp, #12
    38c6:	f85d fb04 	ldr.w	pc, [sp], #4

000038ca <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    38ca:	b500      	push	{lr}
    38cc:	b083      	sub	sp, #12
    38ce:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38d0:	9b01      	ldr	r3, [sp, #4]
    38d2:	2b00      	cmp	r3, #0
    38d4:	d002      	beq.n	38dc <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    38d6:	9801      	ldr	r0, [sp, #4]
    38d8:	f000 f9e6 	bl	3ca8 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38dc:	bf00      	nop
    38de:	b003      	add	sp, #12
    38e0:	f85d fb04 	ldr.w	pc, [sp], #4

000038e4 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    38e4:	b500      	push	{lr}
    38e6:	b083      	sub	sp, #12
    38e8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38ea:	9b01      	ldr	r3, [sp, #4]
    38ec:	2b00      	cmp	r3, #0
    38ee:	d002      	beq.n	38f6 <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    38f0:	9801      	ldr	r0, [sp, #4]
    38f2:	f000 fa25 	bl	3d40 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38f6:	bf00      	nop
    38f8:	b003      	add	sp, #12
    38fa:	f85d fb04 	ldr.w	pc, [sp], #4

000038fe <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    38fe:	b500      	push	{lr}
    3900:	b083      	sub	sp, #12
    3902:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3904:	9b01      	ldr	r3, [sp, #4]
    3906:	2b00      	cmp	r3, #0
    3908:	d002      	beq.n	3910 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    390a:	9801      	ldr	r0, [sp, #4]
    390c:	f000 fa2a 	bl	3d64 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3910:	bf00      	nop
    3912:	b003      	add	sp, #12
    3914:	f85d fb04 	ldr.w	pc, [sp], #4

00003918 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    3918:	b500      	push	{lr}
    391a:	b083      	sub	sp, #12
    391c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    391e:	9b01      	ldr	r3, [sp, #4]
    3920:	2b00      	cmp	r3, #0
    3922:	d002      	beq.n	392a <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    3924:	9801      	ldr	r0, [sp, #4]
    3926:	f000 fa3b 	bl	3da0 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    392a:	bf00      	nop
    392c:	b003      	add	sp, #12
    392e:	f85d fb04 	ldr.w	pc, [sp], #4

00003932 <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    3932:	b500      	push	{lr}
    3934:	b083      	sub	sp, #12
    3936:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3938:	9b01      	ldr	r3, [sp, #4]
    393a:	2b00      	cmp	r3, #0
    393c:	d002      	beq.n	3944 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    393e:	9801      	ldr	r0, [sp, #4]
    3940:	f000 fa56 	bl	3df0 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3944:	bf00      	nop
    3946:	b003      	add	sp, #12
    3948:	f85d fb04 	ldr.w	pc, [sp], #4

0000394c <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    394c:	b500      	push	{lr}
    394e:	b083      	sub	sp, #12
    3950:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3952:	9b01      	ldr	r3, [sp, #4]
    3954:	2b00      	cmp	r3, #0
    3956:	d002      	beq.n	395e <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    3958:	9801      	ldr	r0, [sp, #4]
    395a:	f000 fa79 	bl	3e50 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    395e:	bf00      	nop
    3960:	b003      	add	sp, #12
    3962:	f85d fb04 	ldr.w	pc, [sp], #4

00003966 <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    3966:	b500      	push	{lr}
    3968:	b083      	sub	sp, #12
    396a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    396c:	9b01      	ldr	r3, [sp, #4]
    396e:	2b00      	cmp	r3, #0
    3970:	d002      	beq.n	3978 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    3972:	9801      	ldr	r0, [sp, #4]
    3974:	f000 fa8a 	bl	3e8c <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3978:	bf00      	nop
    397a:	b003      	add	sp, #12
    397c:	f85d fb04 	ldr.w	pc, [sp], #4

00003980 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3980:	b084      	sub	sp, #16
    3982:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3984:	4b0b      	ldr	r3, [pc, #44]	; (39b4 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    3986:	795b      	ldrb	r3, [r3, #5]
    3988:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    398a:	4b0b      	ldr	r3, [pc, #44]	; (39b8 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    398c:	695b      	ldr	r3, [r3, #20]
    398e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    3990:	9b02      	ldr	r3, [sp, #8]
    3992:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3996:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    3998:	9b03      	ldr	r3, [sp, #12]
    399a:	061b      	lsls	r3, r3, #24
    399c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    39a0:	9a02      	ldr	r2, [sp, #8]
    39a2:	4313      	orrs	r3, r2
    39a4:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    39a6:	4a04      	ldr	r2, [pc, #16]	; (39b8 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    39a8:	9b02      	ldr	r3, [sp, #8]
    39aa:	6153      	str	r3, [r2, #20]
}
    39ac:	bf00      	nop
    39ae:	b004      	add	sp, #16
    39b0:	4770      	bx	lr
    39b2:	bf00      	nop
    39b4:	00007c38 	.word	0x00007c38
    39b8:	40064000 	.word	0x40064000

000039bc <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    39bc:	b084      	sub	sp, #16
    39be:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    39c0:	9b01      	ldr	r3, [sp, #4]
    39c2:	685b      	ldr	r3, [r3, #4]
    39c4:	4a0b      	ldr	r2, [pc, #44]	; (39f4 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    39c6:	5cd3      	ldrb	r3, [r2, r3]
    39c8:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    39ca:	4b0b      	ldr	r3, [pc, #44]	; (39f8 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    39cc:	695b      	ldr	r3, [r3, #20]
    39ce:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    39d0:	9b02      	ldr	r3, [sp, #8]
    39d2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    39d6:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    39d8:	9b03      	ldr	r3, [sp, #12]
    39da:	061b      	lsls	r3, r3, #24
    39dc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    39e0:	9a02      	ldr	r2, [sp, #8]
    39e2:	4313      	orrs	r3, r2
    39e4:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    39e6:	4a04      	ldr	r2, [pc, #16]	; (39f8 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    39e8:	9b02      	ldr	r3, [sp, #8]
    39ea:	6153      	str	r3, [r2, #20]
}
    39ec:	bf00      	nop
    39ee:	b004      	add	sp, #16
    39f0:	4770      	bx	lr
    39f2:	bf00      	nop
    39f4:	00007c38 	.word	0x00007c38
    39f8:	40064000 	.word	0x40064000

000039fc <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    39fc:	b084      	sub	sp, #16
    39fe:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3a00:	9b01      	ldr	r3, [sp, #4]
    3a02:	685b      	ldr	r3, [r3, #4]
    3a04:	4a0b      	ldr	r2, [pc, #44]	; (3a34 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    3a06:	5cd3      	ldrb	r3, [r2, r3]
    3a08:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    3a0a:	4b0b      	ldr	r3, [pc, #44]	; (3a38 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    3a0c:	699b      	ldr	r3, [r3, #24]
    3a0e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    3a10:	9b02      	ldr	r3, [sp, #8]
    3a12:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3a16:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    3a18:	9b03      	ldr	r3, [sp, #12]
    3a1a:	061b      	lsls	r3, r3, #24
    3a1c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3a20:	9a02      	ldr	r2, [sp, #8]
    3a22:	4313      	orrs	r3, r2
    3a24:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    3a26:	4a04      	ldr	r2, [pc, #16]	; (3a38 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    3a28:	9b02      	ldr	r3, [sp, #8]
    3a2a:	6193      	str	r3, [r2, #24]
}
    3a2c:	bf00      	nop
    3a2e:	b004      	add	sp, #16
    3a30:	4770      	bx	lr
    3a32:	bf00      	nop
    3a34:	00007c38 	.word	0x00007c38
    3a38:	40064000 	.word	0x40064000

00003a3c <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3a3c:	b084      	sub	sp, #16
    3a3e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3a40:	4b0b      	ldr	r3, [pc, #44]	; (3a70 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    3a42:	795b      	ldrb	r3, [r3, #5]
    3a44:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    3a46:	4b0b      	ldr	r3, [pc, #44]	; (3a74 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    3a48:	69db      	ldr	r3, [r3, #28]
    3a4a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    3a4c:	9b02      	ldr	r3, [sp, #8]
    3a4e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3a52:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    3a54:	9b03      	ldr	r3, [sp, #12]
    3a56:	061b      	lsls	r3, r3, #24
    3a58:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3a5c:	9a02      	ldr	r2, [sp, #8]
    3a5e:	4313      	orrs	r3, r2
    3a60:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    3a62:	4a04      	ldr	r2, [pc, #16]	; (3a74 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    3a64:	9b02      	ldr	r3, [sp, #8]
    3a66:	61d3      	str	r3, [r2, #28]
}
    3a68:	bf00      	nop
    3a6a:	b004      	add	sp, #16
    3a6c:	4770      	bx	lr
    3a6e:	bf00      	nop
    3a70:	00007c38 	.word	0x00007c38
    3a74:	40064000 	.word	0x40064000

00003a78 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3a78:	b084      	sub	sp, #16
    3a7a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3a7c:	9b01      	ldr	r3, [sp, #4]
    3a7e:	685b      	ldr	r3, [r3, #4]
    3a80:	4a0b      	ldr	r2, [pc, #44]	; (3ab0 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    3a82:	5cd3      	ldrb	r3, [r2, r3]
    3a84:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    3a86:	4b0b      	ldr	r3, [pc, #44]	; (3ab4 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    3a88:	69db      	ldr	r3, [r3, #28]
    3a8a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    3a8c:	9b02      	ldr	r3, [sp, #8]
    3a8e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3a92:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    3a94:	9b03      	ldr	r3, [sp, #12]
    3a96:	061b      	lsls	r3, r3, #24
    3a98:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3a9c:	9a02      	ldr	r2, [sp, #8]
    3a9e:	4313      	orrs	r3, r2
    3aa0:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    3aa2:	4a04      	ldr	r2, [pc, #16]	; (3ab4 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    3aa4:	9b02      	ldr	r3, [sp, #8]
    3aa6:	61d3      	str	r3, [r2, #28]
}
    3aa8:	bf00      	nop
    3aaa:	b004      	add	sp, #16
    3aac:	4770      	bx	lr
    3aae:	bf00      	nop
    3ab0:	00007c38 	.word	0x00007c38
    3ab4:	40064000 	.word	0x40064000

00003ab8 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3ab8:	b084      	sub	sp, #16
    3aba:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3abc:	4b0a      	ldr	r3, [pc, #40]	; (3ae8 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    3abe:	7b9b      	ldrb	r3, [r3, #14]
    3ac0:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3ac2:	4b0a      	ldr	r3, [pc, #40]	; (3aec <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    3ac4:	691b      	ldr	r3, [r3, #16]
    3ac6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    3ac8:	9b02      	ldr	r3, [sp, #8]
    3aca:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3ace:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3ad0:	9b03      	ldr	r3, [sp, #12]
    3ad2:	011b      	lsls	r3, r3, #4
    3ad4:	9a02      	ldr	r2, [sp, #8]
    3ad6:	4313      	orrs	r3, r2
    3ad8:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3ada:	4a04      	ldr	r2, [pc, #16]	; (3aec <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    3adc:	9b02      	ldr	r3, [sp, #8]
    3ade:	6113      	str	r3, [r2, #16]
}
    3ae0:	bf00      	nop
    3ae2:	b004      	add	sp, #16
    3ae4:	4770      	bx	lr
    3ae6:	bf00      	nop
    3ae8:	00007be0 	.word	0x00007be0
    3aec:	40048000 	.word	0x40048000

00003af0 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3af0:	b084      	sub	sp, #16
    3af2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3af4:	9b01      	ldr	r3, [sp, #4]
    3af6:	685b      	ldr	r3, [r3, #4]
    3af8:	4a0a      	ldr	r2, [pc, #40]	; (3b24 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    3afa:	5cd3      	ldrb	r3, [r2, r3]
    3afc:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    3afe:	4b0a      	ldr	r3, [pc, #40]	; (3b28 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    3b00:	691b      	ldr	r3, [r3, #16]
    3b02:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    3b04:	9b02      	ldr	r3, [sp, #8]
    3b06:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3b0a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3b0c:	9b03      	ldr	r3, [sp, #12]
    3b0e:	011b      	lsls	r3, r3, #4
    3b10:	9a02      	ldr	r2, [sp, #8]
    3b12:	4313      	orrs	r3, r2
    3b14:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3b16:	4a04      	ldr	r2, [pc, #16]	; (3b28 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    3b18:	9b02      	ldr	r3, [sp, #8]
    3b1a:	6113      	str	r3, [r2, #16]
}
    3b1c:	bf00      	nop
    3b1e:	b004      	add	sp, #16
    3b20:	4770      	bx	lr
    3b22:	bf00      	nop
    3b24:	00007be0 	.word	0x00007be0
    3b28:	40048000 	.word	0x40048000

00003b2c <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3b2c:	b084      	sub	sp, #16
    3b2e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3b30:	4b0a      	ldr	r3, [pc, #40]	; (3b5c <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    3b32:	785b      	ldrb	r3, [r3, #1]
    3b34:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3b36:	4b0a      	ldr	r3, [pc, #40]	; (3b60 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    3b38:	691b      	ldr	r3, [r3, #16]
    3b3a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    3b3c:	9b02      	ldr	r3, [sp, #8]
    3b3e:	f023 030c 	bic.w	r3, r3, #12
    3b42:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3b44:	9b03      	ldr	r3, [sp, #12]
    3b46:	009b      	lsls	r3, r3, #2
    3b48:	9a02      	ldr	r2, [sp, #8]
    3b4a:	4313      	orrs	r3, r2
    3b4c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3b4e:	4a04      	ldr	r2, [pc, #16]	; (3b60 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    3b50:	9b02      	ldr	r3, [sp, #8]
    3b52:	6113      	str	r3, [r2, #16]
}
    3b54:	bf00      	nop
    3b56:	b004      	add	sp, #16
    3b58:	4770      	bx	lr
    3b5a:	bf00      	nop
    3b5c:	00007c98 	.word	0x00007c98
    3b60:	40048000 	.word	0x40048000

00003b64 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3b64:	b084      	sub	sp, #16
    3b66:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3b68:	9b01      	ldr	r3, [sp, #4]
    3b6a:	685b      	ldr	r3, [r3, #4]
    3b6c:	4a0a      	ldr	r2, [pc, #40]	; (3b98 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    3b6e:	5cd3      	ldrb	r3, [r2, r3]
    3b70:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3b72:	4b0a      	ldr	r3, [pc, #40]	; (3b9c <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    3b74:	691b      	ldr	r3, [r3, #16]
    3b76:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    3b78:	9b02      	ldr	r3, [sp, #8]
    3b7a:	f023 030c 	bic.w	r3, r3, #12
    3b7e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3b80:	9b03      	ldr	r3, [sp, #12]
    3b82:	009b      	lsls	r3, r3, #2
    3b84:	9a02      	ldr	r2, [sp, #8]
    3b86:	4313      	orrs	r3, r2
    3b88:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3b8a:	4a04      	ldr	r2, [pc, #16]	; (3b9c <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    3b8c:	9b02      	ldr	r3, [sp, #8]
    3b8e:	6113      	str	r3, [r2, #16]
}
    3b90:	bf00      	nop
    3b92:	b004      	add	sp, #16
    3b94:	4770      	bx	lr
    3b96:	bf00      	nop
    3b98:	00007c98 	.word	0x00007c98
    3b9c:	40048000 	.word	0x40048000

00003ba0 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3ba0:	b084      	sub	sp, #16
    3ba2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3ba4:	4b0a      	ldr	r3, [pc, #40]	; (3bd0 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    3ba6:	795b      	ldrb	r3, [r3, #5]
    3ba8:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    3baa:	4b0a      	ldr	r3, [pc, #40]	; (3bd4 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    3bac:	6a1b      	ldr	r3, [r3, #32]
    3bae:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    3bb0:	9b02      	ldr	r3, [sp, #8]
    3bb2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3bb6:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    3bb8:	9b03      	ldr	r3, [sp, #12]
    3bba:	061b      	lsls	r3, r3, #24
    3bbc:	9a02      	ldr	r2, [sp, #8]
    3bbe:	4313      	orrs	r3, r2
    3bc0:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    3bc2:	4a04      	ldr	r2, [pc, #16]	; (3bd4 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    3bc4:	9b02      	ldr	r3, [sp, #8]
    3bc6:	6213      	str	r3, [r2, #32]
}
    3bc8:	bf00      	nop
    3bca:	b004      	add	sp, #16
    3bcc:	4770      	bx	lr
    3bce:	bf00      	nop
    3bd0:	00007c38 	.word	0x00007c38
    3bd4:	40064000 	.word	0x40064000

00003bd8 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3bd8:	b084      	sub	sp, #16
    3bda:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3bdc:	9b01      	ldr	r3, [sp, #4]
    3bde:	685b      	ldr	r3, [r3, #4]
    3be0:	4a0a      	ldr	r2, [pc, #40]	; (3c0c <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    3be2:	5cd3      	ldrb	r3, [r2, r3]
    3be4:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    3be6:	4b0a      	ldr	r3, [pc, #40]	; (3c10 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    3be8:	6a1b      	ldr	r3, [r3, #32]
    3bea:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    3bec:	9b02      	ldr	r3, [sp, #8]
    3bee:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3bf2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    3bf4:	9b03      	ldr	r3, [sp, #12]
    3bf6:	061b      	lsls	r3, r3, #24
    3bf8:	9a02      	ldr	r2, [sp, #8]
    3bfa:	4313      	orrs	r3, r2
    3bfc:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    3bfe:	4a04      	ldr	r2, [pc, #16]	; (3c10 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    3c00:	9b02      	ldr	r3, [sp, #8]
    3c02:	6213      	str	r3, [r2, #32]
}
    3c04:	bf00      	nop
    3c06:	b004      	add	sp, #16
    3c08:	4770      	bx	lr
    3c0a:	bf00      	nop
    3c0c:	00007c38 	.word	0x00007c38
    3c10:	40064000 	.word	0x40064000

00003c14 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3c14:	b086      	sub	sp, #24
    3c16:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3c18:	4b20      	ldr	r3, [pc, #128]	; (3c9c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    3c1a:	795b      	ldrb	r3, [r3, #5]
    3c1c:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3c1e:	9b01      	ldr	r3, [sp, #4]
    3c20:	681a      	ldr	r2, [r3, #0]
    3c22:	491f      	ldr	r1, [pc, #124]	; (3ca0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    3c24:	4613      	mov	r3, r2
    3c26:	00db      	lsls	r3, r3, #3
    3c28:	4413      	add	r3, r2
    3c2a:	440b      	add	r3, r1
    3c2c:	781b      	ldrb	r3, [r3, #0]
    3c2e:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    3c30:	4b1c      	ldr	r3, [pc, #112]	; (3ca4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    3c32:	68db      	ldr	r3, [r3, #12]
    3c34:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    3c36:	9b03      	ldr	r3, [sp, #12]
    3c38:	2b03      	cmp	r3, #3
    3c3a:	d813      	bhi.n	3c64 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    3c3c:	9b03      	ldr	r3, [sp, #12]
    3c3e:	005b      	lsls	r3, r3, #1
    3c40:	3318      	adds	r3, #24
    3c42:	2203      	movs	r2, #3
    3c44:	fa02 f303 	lsl.w	r3, r2, r3
    3c48:	43db      	mvns	r3, r3
    3c4a:	9a05      	ldr	r2, [sp, #20]
    3c4c:	4013      	ands	r3, r2
    3c4e:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    3c50:	9b03      	ldr	r3, [sp, #12]
    3c52:	005b      	lsls	r3, r3, #1
    3c54:	3318      	adds	r3, #24
    3c56:	9a04      	ldr	r2, [sp, #16]
    3c58:	fa02 f303 	lsl.w	r3, r2, r3
    3c5c:	9a05      	ldr	r2, [sp, #20]
    3c5e:	4313      	orrs	r3, r2
    3c60:	9305      	str	r3, [sp, #20]
    3c62:	e014      	b.n	3c8e <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    3c64:	9b03      	ldr	r3, [sp, #12]
    3c66:	3b04      	subs	r3, #4
    3c68:	005b      	lsls	r3, r3, #1
    3c6a:	3310      	adds	r3, #16
    3c6c:	2203      	movs	r2, #3
    3c6e:	fa02 f303 	lsl.w	r3, r2, r3
    3c72:	43db      	mvns	r3, r3
    3c74:	9a05      	ldr	r2, [sp, #20]
    3c76:	4013      	ands	r3, r2
    3c78:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    3c7a:	9b03      	ldr	r3, [sp, #12]
    3c7c:	3b04      	subs	r3, #4
    3c7e:	005b      	lsls	r3, r3, #1
    3c80:	3310      	adds	r3, #16
    3c82:	9a04      	ldr	r2, [sp, #16]
    3c84:	fa02 f303 	lsl.w	r3, r2, r3
    3c88:	9a05      	ldr	r2, [sp, #20]
    3c8a:	4313      	orrs	r3, r2
    3c8c:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    3c8e:	4a05      	ldr	r2, [pc, #20]	; (3ca4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    3c90:	9b05      	ldr	r3, [sp, #20]
    3c92:	60d3      	str	r3, [r2, #12]
}
    3c94:	bf00      	nop
    3c96:	b006      	add	sp, #24
    3c98:	4770      	bx	lr
    3c9a:	bf00      	nop
    3c9c:	00007be0 	.word	0x00007be0
    3ca0:	000078d0 	.word	0x000078d0
    3ca4:	40048000 	.word	0x40048000

00003ca8 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3ca8:	b086      	sub	sp, #24
    3caa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3cac:	9b01      	ldr	r3, [sp, #4]
    3cae:	685b      	ldr	r3, [r3, #4]
    3cb0:	4a20      	ldr	r2, [pc, #128]	; (3d34 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    3cb2:	5cd3      	ldrb	r3, [r2, r3]
    3cb4:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3cb6:	9b01      	ldr	r3, [sp, #4]
    3cb8:	681a      	ldr	r2, [r3, #0]
    3cba:	491f      	ldr	r1, [pc, #124]	; (3d38 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    3cbc:	4613      	mov	r3, r2
    3cbe:	00db      	lsls	r3, r3, #3
    3cc0:	4413      	add	r3, r2
    3cc2:	440b      	add	r3, r1
    3cc4:	781b      	ldrb	r3, [r3, #0]
    3cc6:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    3cc8:	4b1c      	ldr	r3, [pc, #112]	; (3d3c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    3cca:	68db      	ldr	r3, [r3, #12]
    3ccc:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    3cce:	9b03      	ldr	r3, [sp, #12]
    3cd0:	2b03      	cmp	r3, #3
    3cd2:	d813      	bhi.n	3cfc <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    3cd4:	9b03      	ldr	r3, [sp, #12]
    3cd6:	005b      	lsls	r3, r3, #1
    3cd8:	3318      	adds	r3, #24
    3cda:	2203      	movs	r2, #3
    3cdc:	fa02 f303 	lsl.w	r3, r2, r3
    3ce0:	43db      	mvns	r3, r3
    3ce2:	9a05      	ldr	r2, [sp, #20]
    3ce4:	4013      	ands	r3, r2
    3ce6:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    3ce8:	9b03      	ldr	r3, [sp, #12]
    3cea:	005b      	lsls	r3, r3, #1
    3cec:	3318      	adds	r3, #24
    3cee:	9a04      	ldr	r2, [sp, #16]
    3cf0:	fa02 f303 	lsl.w	r3, r2, r3
    3cf4:	9a05      	ldr	r2, [sp, #20]
    3cf6:	4313      	orrs	r3, r2
    3cf8:	9305      	str	r3, [sp, #20]
    3cfa:	e014      	b.n	3d26 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    3cfc:	9b03      	ldr	r3, [sp, #12]
    3cfe:	3b04      	subs	r3, #4
    3d00:	005b      	lsls	r3, r3, #1
    3d02:	3310      	adds	r3, #16
    3d04:	2203      	movs	r2, #3
    3d06:	fa02 f303 	lsl.w	r3, r2, r3
    3d0a:	43db      	mvns	r3, r3
    3d0c:	9a05      	ldr	r2, [sp, #20]
    3d0e:	4013      	ands	r3, r2
    3d10:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    3d12:	9b03      	ldr	r3, [sp, #12]
    3d14:	3b04      	subs	r3, #4
    3d16:	005b      	lsls	r3, r3, #1
    3d18:	3310      	adds	r3, #16
    3d1a:	9a04      	ldr	r2, [sp, #16]
    3d1c:	fa02 f303 	lsl.w	r3, r2, r3
    3d20:	9a05      	ldr	r2, [sp, #20]
    3d22:	4313      	orrs	r3, r2
    3d24:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    3d26:	4a05      	ldr	r2, [pc, #20]	; (3d3c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    3d28:	9b05      	ldr	r3, [sp, #20]
    3d2a:	60d3      	str	r3, [r2, #12]
}
    3d2c:	bf00      	nop
    3d2e:	b006      	add	sp, #24
    3d30:	4770      	bx	lr
    3d32:	bf00      	nop
    3d34:	00007be0 	.word	0x00007be0
    3d38:	000078d0 	.word	0x000078d0
    3d3c:	40048000 	.word	0x40048000

00003d40 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3d40:	b084      	sub	sp, #16
    3d42:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    3d44:	4b06      	ldr	r3, [pc, #24]	; (3d60 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    3d46:	685b      	ldr	r3, [r3, #4]
    3d48:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    3d4a:	9b03      	ldr	r3, [sp, #12]
    3d4c:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    3d50:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3d52:	4a03      	ldr	r2, [pc, #12]	; (3d60 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    3d54:	9b03      	ldr	r3, [sp, #12]
    3d56:	6053      	str	r3, [r2, #4]
}
    3d58:	bf00      	nop
    3d5a:	b004      	add	sp, #16
    3d5c:	4770      	bx	lr
    3d5e:	bf00      	nop
    3d60:	40048000 	.word	0x40048000

00003d64 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3d64:	b084      	sub	sp, #16
    3d66:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3d68:	9b01      	ldr	r3, [sp, #4]
    3d6a:	685b      	ldr	r3, [r3, #4]
    3d6c:	4a0a      	ldr	r2, [pc, #40]	; (3d98 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    3d6e:	5cd3      	ldrb	r3, [r2, r3]
    3d70:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    3d72:	4b0a      	ldr	r3, [pc, #40]	; (3d9c <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    3d74:	685b      	ldr	r3, [r3, #4]
    3d76:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    3d78:	9b02      	ldr	r3, [sp, #8]
    3d7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3d7e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    3d80:	9b03      	ldr	r3, [sp, #12]
    3d82:	011b      	lsls	r3, r3, #4
    3d84:	9a02      	ldr	r2, [sp, #8]
    3d86:	4313      	orrs	r3, r2
    3d88:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    3d8a:	4a04      	ldr	r2, [pc, #16]	; (3d9c <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    3d8c:	9b02      	ldr	r3, [sp, #8]
    3d8e:	6053      	str	r3, [r2, #4]
}
    3d90:	bf00      	nop
    3d92:	b004      	add	sp, #16
    3d94:	4770      	bx	lr
    3d96:	bf00      	nop
    3d98:	00007be0 	.word	0x00007be0
    3d9c:	40048000 	.word	0x40048000

00003da0 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3da0:	b084      	sub	sp, #16
    3da2:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    3da4:	9b01      	ldr	r3, [sp, #4]
    3da6:	681a      	ldr	r2, [r3, #0]
    3da8:	490f      	ldr	r1, [pc, #60]	; (3de8 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    3daa:	4613      	mov	r3, r2
    3dac:	00db      	lsls	r3, r3, #3
    3dae:	4413      	add	r3, r2
    3db0:	440b      	add	r3, r1
    3db2:	3304      	adds	r3, #4
    3db4:	781b      	ldrb	r3, [r3, #0]
    3db6:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    3db8:	4a0c      	ldr	r2, [pc, #48]	; (3dec <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3dba:	9b03      	ldr	r3, [sp, #12]
    3dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3dc0:	490a      	ldr	r1, [pc, #40]	; (3dec <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3dc2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    3dc6:	9b03      	ldr	r3, [sp, #12]
    3dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    3dcc:	4a07      	ldr	r2, [pc, #28]	; (3dec <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3dce:	9b03      	ldr	r3, [sp, #12]
    3dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3dd4:	4905      	ldr	r1, [pc, #20]	; (3dec <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3dd6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    3dda:	9b03      	ldr	r3, [sp, #12]
    3ddc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3de0:	bf00      	nop
    3de2:	b004      	add	sp, #16
    3de4:	4770      	bx	lr
    3de6:	bf00      	nop
    3de8:	000078d0 	.word	0x000078d0
    3dec:	40065000 	.word	0x40065000

00003df0 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3df0:	b086      	sub	sp, #24
    3df2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    3df4:	9b01      	ldr	r3, [sp, #4]
    3df6:	681a      	ldr	r2, [r3, #0]
    3df8:	4912      	ldr	r1, [pc, #72]	; (3e44 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    3dfa:	4613      	mov	r3, r2
    3dfc:	00db      	lsls	r3, r3, #3
    3dfe:	4413      	add	r3, r2
    3e00:	440b      	add	r3, r1
    3e02:	3304      	adds	r3, #4
    3e04:	781b      	ldrb	r3, [r3, #0]
    3e06:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3e08:	9b01      	ldr	r3, [sp, #4]
    3e0a:	685b      	ldr	r3, [r3, #4]
    3e0c:	4a0e      	ldr	r2, [pc, #56]	; (3e48 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    3e0e:	5cd3      	ldrb	r3, [r2, r3]
    3e10:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    3e12:	4a0e      	ldr	r2, [pc, #56]	; (3e4c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    3e14:	9b05      	ldr	r3, [sp, #20]
    3e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3e1a:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    3e1c:	9b03      	ldr	r3, [sp, #12]
    3e1e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    3e22:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    3e24:	9b04      	ldr	r3, [sp, #16]
    3e26:	061b      	lsls	r3, r3, #24
    3e28:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    3e2c:	9a03      	ldr	r2, [sp, #12]
    3e2e:	4313      	orrs	r3, r2
    3e30:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    3e32:	4906      	ldr	r1, [pc, #24]	; (3e4c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    3e34:	9b05      	ldr	r3, [sp, #20]
    3e36:	9a03      	ldr	r2, [sp, #12]
    3e38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3e3c:	bf00      	nop
    3e3e:	b006      	add	sp, #24
    3e40:	4770      	bx	lr
    3e42:	bf00      	nop
    3e44:	000078d0 	.word	0x000078d0
    3e48:	00007c68 	.word	0x00007c68
    3e4c:	40065000 	.word	0x40065000

00003e50 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3e50:	b084      	sub	sp, #16
    3e52:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3e54:	4b0b      	ldr	r3, [pc, #44]	; (3e84 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    3e56:	7f1b      	ldrb	r3, [r3, #28]
    3e58:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    3e5a:	4b0b      	ldr	r3, [pc, #44]	; (3e88 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    3e5c:	685b      	ldr	r3, [r3, #4]
    3e5e:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    3e60:	9b02      	ldr	r3, [sp, #8]
    3e62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3e66:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    3e68:	9b03      	ldr	r3, [sp, #12]
    3e6a:	031b      	lsls	r3, r3, #12
    3e6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    3e70:	9a02      	ldr	r2, [sp, #8]
    3e72:	4313      	orrs	r3, r2
    3e74:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    3e76:	4a04      	ldr	r2, [pc, #16]	; (3e88 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    3e78:	9b02      	ldr	r3, [sp, #8]
    3e7a:	6053      	str	r3, [r2, #4]
}
    3e7c:	bf00      	nop
    3e7e:	b004      	add	sp, #16
    3e80:	4770      	bx	lr
    3e82:	bf00      	nop
    3e84:	00007be0 	.word	0x00007be0
    3e88:	40048000 	.word	0x40048000

00003e8c <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3e8c:	b084      	sub	sp, #16
    3e8e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3e90:	9b01      	ldr	r3, [sp, #4]
    3e92:	685b      	ldr	r3, [r3, #4]
    3e94:	4a0b      	ldr	r2, [pc, #44]	; (3ec4 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    3e96:	5cd3      	ldrb	r3, [r2, r3]
    3e98:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    3e9a:	4b0b      	ldr	r3, [pc, #44]	; (3ec8 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    3e9c:	685b      	ldr	r3, [r3, #4]
    3e9e:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    3ea0:	9b02      	ldr	r3, [sp, #8]
    3ea2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3ea6:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    3ea8:	9b03      	ldr	r3, [sp, #12]
    3eaa:	031b      	lsls	r3, r3, #12
    3eac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    3eb0:	9a02      	ldr	r2, [sp, #8]
    3eb2:	4313      	orrs	r3, r2
    3eb4:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    3eb6:	4a04      	ldr	r2, [pc, #16]	; (3ec8 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    3eb8:	9b02      	ldr	r3, [sp, #8]
    3eba:	6053      	str	r3, [r2, #4]
}
    3ebc:	bf00      	nop
    3ebe:	b004      	add	sp, #16
    3ec0:	4770      	bx	lr
    3ec2:	bf00      	nop
    3ec4:	00007be0 	.word	0x00007be0
    3ec8:	40048000 	.word	0x40048000

00003ecc <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    3ecc:	b500      	push	{lr}
    3ece:	b085      	sub	sp, #20
    3ed0:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    3ed2:	2300      	movs	r3, #0
    3ed4:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    3ed8:	9b01      	ldr	r3, [sp, #4]
    3eda:	2b00      	cmp	r3, #0
    3edc:	d037      	beq.n	3f4e <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3ede:	2300      	movs	r3, #0
    3ee0:	9303      	str	r3, [sp, #12]
    3ee2:	e02b      	b.n	3f3c <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    3ee4:	4b29      	ldr	r3, [pc, #164]	; (3f8c <DisableSafeClock+0xc0>)
    3ee6:	6819      	ldr	r1, [r3, #0]
    3ee8:	9a03      	ldr	r2, [sp, #12]
    3eea:	4613      	mov	r3, r2
    3eec:	005b      	lsls	r3, r3, #1
    3eee:	4413      	add	r3, r2
    3ef0:	009b      	lsls	r3, r3, #2
    3ef2:	440b      	add	r3, r1
    3ef4:	3314      	adds	r3, #20
    3ef6:	681b      	ldr	r3, [r3, #0]
    3ef8:	2b05      	cmp	r3, #5
    3efa:	d11c      	bne.n	3f36 <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    3efc:	2301      	movs	r3, #1
    3efe:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    3f02:	4b22      	ldr	r3, [pc, #136]	; (3f8c <DisableSafeClock+0xc0>)
    3f04:	6819      	ldr	r1, [r3, #0]
    3f06:	9a03      	ldr	r2, [sp, #12]
    3f08:	4613      	mov	r3, r2
    3f0a:	005b      	lsls	r3, r3, #1
    3f0c:	4413      	add	r3, r2
    3f0e:	009b      	lsls	r3, r3, #2
    3f10:	440b      	add	r3, r1
    3f12:	3318      	adds	r3, #24
    3f14:	881b      	ldrh	r3, [r3, #0]
    3f16:	2b00      	cmp	r3, #0
    3f18:	d118      	bne.n	3f4c <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    3f1a:	4b1d      	ldr	r3, [pc, #116]	; (3f90 <DisableSafeClock+0xc4>)
    3f1c:	791b      	ldrb	r3, [r3, #4]
    3f1e:	4619      	mov	r1, r3
    3f20:	4a1c      	ldr	r2, [pc, #112]	; (3f94 <DisableSafeClock+0xc8>)
    3f22:	460b      	mov	r3, r1
    3f24:	005b      	lsls	r3, r3, #1
    3f26:	440b      	add	r3, r1
    3f28:	009b      	lsls	r3, r3, #2
    3f2a:	4413      	add	r3, r2
    3f2c:	3308      	adds	r3, #8
    3f2e:	681b      	ldr	r3, [r3, #0]
    3f30:	2005      	movs	r0, #5
    3f32:	4798      	blx	r3
                }
                break;
    3f34:	e00a      	b.n	3f4c <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3f36:	9b03      	ldr	r3, [sp, #12]
    3f38:	3301      	adds	r3, #1
    3f3a:	9303      	str	r3, [sp, #12]
    3f3c:	4b13      	ldr	r3, [pc, #76]	; (3f8c <DisableSafeClock+0xc0>)
    3f3e:	681b      	ldr	r3, [r3, #0]
    3f40:	7a1b      	ldrb	r3, [r3, #8]
    3f42:	461a      	mov	r2, r3
    3f44:	9b03      	ldr	r3, [sp, #12]
    3f46:	4293      	cmp	r3, r2
    3f48:	d3cc      	bcc.n	3ee4 <DisableSafeClock+0x18>
    3f4a:	e000      	b.n	3f4e <DisableSafeClock+0x82>
                break;
    3f4c:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    3f4e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    3f52:	f083 0301 	eor.w	r3, r3, #1
    3f56:	b2db      	uxtb	r3, r3
    3f58:	2b00      	cmp	r3, #0
    3f5a:	d013      	beq.n	3f84 <DisableSafeClock+0xb8>
    3f5c:	4b0e      	ldr	r3, [pc, #56]	; (3f98 <DisableSafeClock+0xcc>)
    3f5e:	781b      	ldrb	r3, [r3, #0]
    3f60:	f083 0301 	eor.w	r3, r3, #1
    3f64:	b2db      	uxtb	r3, r3
    3f66:	2b00      	cmp	r3, #0
    3f68:	d00c      	beq.n	3f84 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    3f6a:	4b09      	ldr	r3, [pc, #36]	; (3f90 <DisableSafeClock+0xc4>)
    3f6c:	791b      	ldrb	r3, [r3, #4]
    3f6e:	4619      	mov	r1, r3
    3f70:	4a08      	ldr	r2, [pc, #32]	; (3f94 <DisableSafeClock+0xc8>)
    3f72:	460b      	mov	r3, r1
    3f74:	005b      	lsls	r3, r3, #1
    3f76:	440b      	add	r3, r1
    3f78:	009b      	lsls	r3, r3, #2
    3f7a:	4413      	add	r3, r2
    3f7c:	3308      	adds	r3, #8
    3f7e:	681b      	ldr	r3, [r3, #0]
    3f80:	2005      	movs	r0, #5
    3f82:	4798      	blx	r3
    }
}
    3f84:	bf00      	nop
    3f86:	b005      	add	sp, #20
    3f88:	f85d fb04 	ldr.w	pc, [sp], #4
    3f8c:	1fff8bac 	.word	0x1fff8bac
    3f90:	00007860 	.word	0x00007860
    3f94:	00007e90 	.word	0x00007e90
    3f98:	1fff8b18 	.word	0x1fff8b18

00003f9c <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    3f9c:	4b06      	ldr	r3, [pc, #24]	; (3fb8 <SetFircToResetValue_TrustedCall+0x1c>)
    3f9e:	2200      	movs	r2, #0
    3fa0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    3fa4:	4b04      	ldr	r3, [pc, #16]	; (3fb8 <SetFircToResetValue_TrustedCall+0x1c>)
    3fa6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3faa:	4a03      	ldr	r2, [pc, #12]	; (3fb8 <SetFircToResetValue_TrustedCall+0x1c>)
    3fac:	f043 0301 	orr.w	r3, r3, #1
    3fb0:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    3fb4:	bf00      	nop
    3fb6:	4770      	bx	lr
    3fb8:	40064000 	.word	0x40064000

00003fbc <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    3fbc:	b084      	sub	sp, #16
    3fbe:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    3fc0:	2303      	movs	r3, #3
    3fc2:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    3fc4:	2300      	movs	r3, #0
    3fc6:	9302      	str	r3, [sp, #8]
    3fc8:	e028      	b.n	401c <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    3fca:	9b01      	ldr	r3, [sp, #4]
    3fcc:	9a02      	ldr	r2, [sp, #8]
    3fce:	320d      	adds	r2, #13
    3fd0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3fd4:	2b28      	cmp	r3, #40	; 0x28
    3fd6:	d10b      	bne.n	3ff0 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3fd8:	9a01      	ldr	r2, [sp, #4]
    3fda:	9b02      	ldr	r3, [sp, #8]
    3fdc:	330d      	adds	r3, #13
    3fde:	00db      	lsls	r3, r3, #3
    3fe0:	4413      	add	r3, r2
    3fe2:	685b      	ldr	r3, [r3, #4]
    3fe4:	4a2b      	ldr	r2, [pc, #172]	; (4094 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    3fe6:	5cd3      	ldrb	r3, [r2, r3]
    3fe8:	011b      	lsls	r3, r3, #4
    3fea:	9a03      	ldr	r2, [sp, #12]
    3fec:	4313      	orrs	r3, r2
    3fee:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    3ff0:	9b01      	ldr	r3, [sp, #4]
    3ff2:	9a02      	ldr	r2, [sp, #8]
    3ff4:	320d      	adds	r2, #13
    3ff6:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3ffa:	2b29      	cmp	r3, #41	; 0x29
    3ffc:	d10b      	bne.n	4016 <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3ffe:	9a01      	ldr	r2, [sp, #4]
    4000:	9b02      	ldr	r3, [sp, #8]
    4002:	330d      	adds	r3, #13
    4004:	00db      	lsls	r3, r3, #3
    4006:	4413      	add	r3, r2
    4008:	685b      	ldr	r3, [r3, #4]
    400a:	4a23      	ldr	r2, [pc, #140]	; (4098 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    400c:	5cd3      	ldrb	r3, [r2, r3]
    400e:	009b      	lsls	r3, r3, #2
    4010:	9a03      	ldr	r2, [sp, #12]
    4012:	4313      	orrs	r3, r2
    4014:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4016:	9b02      	ldr	r3, [sp, #8]
    4018:	3301      	adds	r3, #1
    401a:	9302      	str	r3, [sp, #8]
    401c:	9b01      	ldr	r3, [sp, #4]
    401e:	7adb      	ldrb	r3, [r3, #11]
    4020:	461a      	mov	r2, r3
    4022:	9b02      	ldr	r3, [sp, #8]
    4024:	4293      	cmp	r3, r2
    4026:	d3d0      	bcc.n	3fca <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4028:	2300      	movs	r3, #0
    402a:	9302      	str	r3, [sp, #8]
    402c:	e026      	b.n	407c <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    402e:	9a01      	ldr	r2, [sp, #4]
    4030:	9b02      	ldr	r3, [sp, #8]
    4032:	334e      	adds	r3, #78	; 0x4e
    4034:	00db      	lsls	r3, r3, #3
    4036:	4413      	add	r3, r2
    4038:	685b      	ldr	r3, [r3, #4]
    403a:	2b12      	cmp	r3, #18
    403c:	d109      	bne.n	4052 <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    403e:	9a01      	ldr	r2, [sp, #4]
    4040:	9b02      	ldr	r3, [sp, #8]
    4042:	334e      	adds	r3, #78	; 0x4e
    4044:	00db      	lsls	r3, r3, #3
    4046:	4413      	add	r3, r2
    4048:	891b      	ldrh	r3, [r3, #8]
    404a:	005b      	lsls	r3, r3, #1
    404c:	9a03      	ldr	r2, [sp, #12]
    404e:	4313      	orrs	r3, r2
    4050:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    4052:	9a01      	ldr	r2, [sp, #4]
    4054:	9b02      	ldr	r3, [sp, #8]
    4056:	334e      	adds	r3, #78	; 0x4e
    4058:	00db      	lsls	r3, r3, #3
    405a:	4413      	add	r3, r2
    405c:	685b      	ldr	r3, [r3, #4]
    405e:	2b13      	cmp	r3, #19
    4060:	d109      	bne.n	4076 <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    4062:	9a01      	ldr	r2, [sp, #4]
    4064:	9b02      	ldr	r3, [sp, #8]
    4066:	334e      	adds	r3, #78	; 0x4e
    4068:	00db      	lsls	r3, r3, #3
    406a:	4413      	add	r3, r2
    406c:	891b      	ldrh	r3, [r3, #8]
    406e:	461a      	mov	r2, r3
    4070:	9b03      	ldr	r3, [sp, #12]
    4072:	4313      	orrs	r3, r2
    4074:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4076:	9b02      	ldr	r3, [sp, #8]
    4078:	3301      	adds	r3, #1
    407a:	9302      	str	r3, [sp, #8]
    407c:	9b01      	ldr	r3, [sp, #4]
    407e:	7c1b      	ldrb	r3, [r3, #16]
    4080:	461a      	mov	r2, r3
    4082:	9b02      	ldr	r3, [sp, #8]
    4084:	4293      	cmp	r3, r2
    4086:	d3d2      	bcc.n	402e <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    4088:	4a04      	ldr	r2, [pc, #16]	; (409c <SetSimLpoclksRegister_TrustedCall+0xe0>)
    408a:	9b03      	ldr	r3, [sp, #12]
    408c:	6113      	str	r3, [r2, #16]
}
    408e:	bf00      	nop
    4090:	b004      	add	sp, #16
    4092:	4770      	bx	lr
    4094:	00007be0 	.word	0x00007be0
    4098:	00007c98 	.word	0x00007c98
    409c:	40048000 	.word	0x40048000

000040a0 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    40a0:	b500      	push	{lr}
    40a2:	b089      	sub	sp, #36	; 0x24
    40a4:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    40a6:	2300      	movs	r3, #0
    40a8:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    40ac:	4a21      	ldr	r2, [pc, #132]	; (4134 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    40ae:	9b01      	ldr	r3, [sp, #4]
    40b0:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    40b2:	4b21      	ldr	r3, [pc, #132]	; (4138 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    40b4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    40b8:	f003 0301 	and.w	r3, r3, #1
    40bc:	2b00      	cmp	r3, #0
    40be:	d12e      	bne.n	411e <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    40c0:	4b1e      	ldr	r3, [pc, #120]	; (413c <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    40c2:	2200      	movs	r2, #0
    40c4:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    40c6:	f7ff ff69 	bl	3f9c <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    40ca:	aa03      	add	r2, sp, #12
    40cc:	a904      	add	r1, sp, #16
    40ce:	a805      	add	r0, sp, #20
    40d0:	f24c 3350 	movw	r3, #50000	; 0xc350
    40d4:	f7fe f8ae 	bl	2234 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    40d8:	4b17      	ldr	r3, [pc, #92]	; (4138 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    40da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    40de:	0e1b      	lsrs	r3, r3, #24
    40e0:	f003 0301 	and.w	r3, r3, #1
    40e4:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    40e6:	9a03      	ldr	r2, [sp, #12]
    40e8:	a904      	add	r1, sp, #16
    40ea:	ab05      	add	r3, sp, #20
    40ec:	4618      	mov	r0, r3
    40ee:	f7fe f8bb 	bl	2268 <Clock_Ip_TimeoutExpired>
    40f2:	4603      	mov	r3, r0
    40f4:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    40f8:	9b06      	ldr	r3, [sp, #24]
    40fa:	2b00      	cmp	r3, #0
    40fc:	d106      	bne.n	410c <Clock_Ip_SpecificPlatformInitClock+0x6c>
    40fe:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4102:	f083 0301 	eor.w	r3, r3, #1
    4106:	b2db      	uxtb	r3, r3
    4108:	2b00      	cmp	r3, #0
    410a:	d1e5      	bne.n	40d8 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    410c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4110:	2b00      	cmp	r3, #0
    4112:	d007      	beq.n	4124 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    4114:	2105      	movs	r1, #5
    4116:	2001      	movs	r0, #1
    4118:	f7fe f87c 	bl	2214 <Clock_Ip_ReportClockErrors>
    411c:	e002      	b.n	4124 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    411e:	4b07      	ldr	r3, [pc, #28]	; (413c <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4120:	2201      	movs	r2, #1
    4122:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    4124:	9801      	ldr	r0, [sp, #4]
    4126:	f7ff ff49 	bl	3fbc <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    412a:	bf00      	nop
    412c:	b009      	add	sp, #36	; 0x24
    412e:	f85d fb04 	ldr.w	pc, [sp], #4
    4132:	bf00      	nop
    4134:	1fff8bac 	.word	0x1fff8bac
    4138:	40064000 	.word	0x40064000
    413c:	1fff8b18 	.word	0x1fff8b18

00004140 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    4140:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    4142:	2300      	movs	r3, #0
    4144:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4146:	4b29      	ldr	r3, [pc, #164]	; (41ec <getFircConfig+0xac>)
    4148:	681b      	ldr	r3, [r3, #0]
    414a:	2b00      	cmp	r3, #0
    414c:	d024      	beq.n	4198 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    414e:	2300      	movs	r3, #0
    4150:	9301      	str	r3, [sp, #4]
    4152:	e01a      	b.n	418a <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4154:	4b25      	ldr	r3, [pc, #148]	; (41ec <getFircConfig+0xac>)
    4156:	6819      	ldr	r1, [r3, #0]
    4158:	9a01      	ldr	r2, [sp, #4]
    415a:	4613      	mov	r3, r2
    415c:	005b      	lsls	r3, r3, #1
    415e:	4413      	add	r3, r2
    4160:	009b      	lsls	r3, r3, #2
    4162:	440b      	add	r3, r1
    4164:	3314      	adds	r3, #20
    4166:	681b      	ldr	r3, [r3, #0]
    4168:	2b05      	cmp	r3, #5
    416a:	d10b      	bne.n	4184 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    416c:	4b1f      	ldr	r3, [pc, #124]	; (41ec <getFircConfig+0xac>)
    416e:	6819      	ldr	r1, [r3, #0]
    4170:	9a01      	ldr	r2, [sp, #4]
    4172:	4613      	mov	r3, r2
    4174:	005b      	lsls	r3, r3, #1
    4176:	4413      	add	r3, r2
    4178:	009b      	lsls	r3, r3, #2
    417a:	3310      	adds	r3, #16
    417c:	440b      	add	r3, r1
    417e:	3304      	adds	r3, #4
    4180:	9300      	str	r3, [sp, #0]
                break;
    4182:	e009      	b.n	4198 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4184:	9b01      	ldr	r3, [sp, #4]
    4186:	3301      	adds	r3, #1
    4188:	9301      	str	r3, [sp, #4]
    418a:	4b18      	ldr	r3, [pc, #96]	; (41ec <getFircConfig+0xac>)
    418c:	681b      	ldr	r3, [r3, #0]
    418e:	7a1b      	ldrb	r3, [r3, #8]
    4190:	461a      	mov	r2, r3
    4192:	9b01      	ldr	r3, [sp, #4]
    4194:	4293      	cmp	r3, r2
    4196:	d3dd      	bcc.n	4154 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4198:	9b00      	ldr	r3, [sp, #0]
    419a:	2b00      	cmp	r3, #0
    419c:	d121      	bne.n	41e2 <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    419e:	4b14      	ldr	r3, [pc, #80]	; (41f0 <getFircConfig+0xb0>)
    41a0:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    41a2:	4b13      	ldr	r3, [pc, #76]	; (41f0 <getFircConfig+0xb0>)
    41a4:	2205      	movs	r2, #5
    41a6:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    41a8:	4b12      	ldr	r3, [pc, #72]	; (41f4 <getFircConfig+0xb4>)
    41aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    41ae:	b29b      	uxth	r3, r3
    41b0:	f003 0301 	and.w	r3, r3, #1
    41b4:	b29a      	uxth	r2, r3
    41b6:	4b0e      	ldr	r3, [pc, #56]	; (41f0 <getFircConfig+0xb0>)
    41b8:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    41ba:	4b0e      	ldr	r3, [pc, #56]	; (41f4 <getFircConfig+0xb4>)
    41bc:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    41c0:	b2db      	uxtb	r3, r3
    41c2:	f003 0303 	and.w	r3, r3, #3
    41c6:	b2da      	uxtb	r2, r3
    41c8:	4b09      	ldr	r3, [pc, #36]	; (41f0 <getFircConfig+0xb0>)
    41ca:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    41cc:	4b09      	ldr	r3, [pc, #36]	; (41f4 <getFircConfig+0xb4>)
    41ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    41d2:	b2db      	uxtb	r3, r3
    41d4:	10db      	asrs	r3, r3, #3
    41d6:	b2db      	uxtb	r3, r3
    41d8:	f003 0301 	and.w	r3, r3, #1
    41dc:	b2da      	uxtb	r2, r3
    41de:	4b04      	ldr	r3, [pc, #16]	; (41f0 <getFircConfig+0xb0>)
    41e0:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    41e2:	9b00      	ldr	r3, [sp, #0]
}
    41e4:	4618      	mov	r0, r3
    41e6:	b002      	add	sp, #8
    41e8:	4770      	bx	lr
    41ea:	bf00      	nop
    41ec:	1fff8bac 	.word	0x1fff8bac
    41f0:	1fff8c18 	.word	0x1fff8c18
    41f4:	40064000 	.word	0x40064000

000041f8 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    41f8:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    41fa:	2300      	movs	r3, #0
    41fc:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    41fe:	4b20      	ldr	r3, [pc, #128]	; (4280 <getSoscConfig+0x88>)
    4200:	681b      	ldr	r3, [r3, #0]
    4202:	2b00      	cmp	r3, #0
    4204:	d024      	beq.n	4250 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4206:	2300      	movs	r3, #0
    4208:	9301      	str	r3, [sp, #4]
    420a:	e01a      	b.n	4242 <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    420c:	4b1c      	ldr	r3, [pc, #112]	; (4280 <getSoscConfig+0x88>)
    420e:	6819      	ldr	r1, [r3, #0]
    4210:	9a01      	ldr	r2, [sp, #4]
    4212:	4613      	mov	r3, r2
    4214:	009b      	lsls	r3, r3, #2
    4216:	4413      	add	r3, r2
    4218:	009b      	lsls	r3, r3, #2
    421a:	440b      	add	r3, r1
    421c:	332c      	adds	r3, #44	; 0x2c
    421e:	681b      	ldr	r3, [r3, #0]
    4220:	2b08      	cmp	r3, #8
    4222:	d10b      	bne.n	423c <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    4224:	4b16      	ldr	r3, [pc, #88]	; (4280 <getSoscConfig+0x88>)
    4226:	6819      	ldr	r1, [r3, #0]
    4228:	9a01      	ldr	r2, [sp, #4]
    422a:	4613      	mov	r3, r2
    422c:	009b      	lsls	r3, r3, #2
    422e:	4413      	add	r3, r2
    4230:	009b      	lsls	r3, r3, #2
    4232:	3328      	adds	r3, #40	; 0x28
    4234:	440b      	add	r3, r1
    4236:	3304      	adds	r3, #4
    4238:	9300      	str	r3, [sp, #0]
                break;
    423a:	e009      	b.n	4250 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    423c:	9b01      	ldr	r3, [sp, #4]
    423e:	3301      	adds	r3, #1
    4240:	9301      	str	r3, [sp, #4]
    4242:	4b0f      	ldr	r3, [pc, #60]	; (4280 <getSoscConfig+0x88>)
    4244:	681b      	ldr	r3, [r3, #0]
    4246:	7a5b      	ldrb	r3, [r3, #9]
    4248:	461a      	mov	r2, r3
    424a:	9b01      	ldr	r3, [sp, #4]
    424c:	4293      	cmp	r3, r2
    424e:	d3dd      	bcc.n	420c <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4250:	9b00      	ldr	r3, [sp, #0]
    4252:	2b00      	cmp	r3, #0
    4254:	d110      	bne.n	4278 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    4256:	4b0b      	ldr	r3, [pc, #44]	; (4284 <getSoscConfig+0x8c>)
    4258:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    425a:	4b0a      	ldr	r3, [pc, #40]	; (4284 <getSoscConfig+0x8c>)
    425c:	2208      	movs	r2, #8
    425e:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    4260:	4b09      	ldr	r3, [pc, #36]	; (4288 <getSoscConfig+0x90>)
    4262:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4266:	b29b      	uxth	r3, r3
    4268:	f003 0301 	and.w	r3, r3, #1
    426c:	b29a      	uxth	r2, r3
    426e:	4b05      	ldr	r3, [pc, #20]	; (4284 <getSoscConfig+0x8c>)
    4270:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    4272:	4b04      	ldr	r3, [pc, #16]	; (4284 <getSoscConfig+0x8c>)
    4274:	4a05      	ldr	r2, [pc, #20]	; (428c <getSoscConfig+0x94>)
    4276:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    4278:	9b00      	ldr	r3, [sp, #0]
}
    427a:	4618      	mov	r0, r3
    427c:	b002      	add	sp, #8
    427e:	4770      	bx	lr
    4280:	1fff8bac 	.word	0x1fff8bac
    4284:	1fff8c24 	.word	0x1fff8c24
    4288:	40064000 	.word	0x40064000
    428c:	02625a00 	.word	0x02625a00

00004290 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    4290:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    4292:	2300      	movs	r3, #0
    4294:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4296:	4b28      	ldr	r3, [pc, #160]	; (4338 <getSpllConfig+0xa8>)
    4298:	681b      	ldr	r3, [r3, #0]
    429a:	2b00      	cmp	r3, #0
    429c:	d023      	beq.n	42e6 <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    429e:	2300      	movs	r3, #0
    42a0:	9301      	str	r3, [sp, #4]
    42a2:	e019      	b.n	42d8 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    42a4:	4b24      	ldr	r3, [pc, #144]	; (4338 <getSpllConfig+0xa8>)
    42a6:	6819      	ldr	r1, [r3, #0]
    42a8:	9a01      	ldr	r2, [sp, #4]
    42aa:	4613      	mov	r3, r2
    42ac:	009b      	lsls	r3, r3, #2
    42ae:	4413      	add	r3, r2
    42b0:	00db      	lsls	r3, r3, #3
    42b2:	440b      	add	r3, r1
    42b4:	3340      	adds	r3, #64	; 0x40
    42b6:	681b      	ldr	r3, [r3, #0]
    42b8:	2b09      	cmp	r3, #9
    42ba:	d10a      	bne.n	42d2 <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    42bc:	4b1e      	ldr	r3, [pc, #120]	; (4338 <getSpllConfig+0xa8>)
    42be:	6819      	ldr	r1, [r3, #0]
    42c0:	9a01      	ldr	r2, [sp, #4]
    42c2:	4613      	mov	r3, r2
    42c4:	009b      	lsls	r3, r3, #2
    42c6:	4413      	add	r3, r2
    42c8:	00db      	lsls	r3, r3, #3
    42ca:	3340      	adds	r3, #64	; 0x40
    42cc:	440b      	add	r3, r1
    42ce:	9300      	str	r3, [sp, #0]
                break;
    42d0:	e009      	b.n	42e6 <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    42d2:	9b01      	ldr	r3, [sp, #4]
    42d4:	3301      	adds	r3, #1
    42d6:	9301      	str	r3, [sp, #4]
    42d8:	4b17      	ldr	r3, [pc, #92]	; (4338 <getSpllConfig+0xa8>)
    42da:	681b      	ldr	r3, [r3, #0]
    42dc:	7a9b      	ldrb	r3, [r3, #10]
    42de:	461a      	mov	r2, r3
    42e0:	9b01      	ldr	r3, [sp, #4]
    42e2:	4293      	cmp	r3, r2
    42e4:	d3de      	bcc.n	42a4 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    42e6:	9b00      	ldr	r3, [sp, #0]
    42e8:	2b00      	cmp	r3, #0
    42ea:	d121      	bne.n	4330 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    42ec:	4b13      	ldr	r3, [pc, #76]	; (433c <getSpllConfig+0xac>)
    42ee:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    42f0:	4b12      	ldr	r3, [pc, #72]	; (433c <getSpllConfig+0xac>)
    42f2:	2209      	movs	r2, #9
    42f4:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    42f6:	4b12      	ldr	r3, [pc, #72]	; (4340 <getSpllConfig+0xb0>)
    42f8:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    42fc:	b29b      	uxth	r3, r3
    42fe:	f003 0301 	and.w	r3, r3, #1
    4302:	b29a      	uxth	r2, r3
    4304:	4b0d      	ldr	r3, [pc, #52]	; (433c <getSpllConfig+0xac>)
    4306:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    4308:	4b0d      	ldr	r3, [pc, #52]	; (4340 <getSpllConfig+0xb0>)
    430a:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    430e:	0a1b      	lsrs	r3, r3, #8
    4310:	b2db      	uxtb	r3, r3
    4312:	f003 0307 	and.w	r3, r3, #7
    4316:	b2da      	uxtb	r2, r3
    4318:	4b08      	ldr	r3, [pc, #32]	; (433c <getSpllConfig+0xac>)
    431a:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    431c:	4b08      	ldr	r3, [pc, #32]	; (4340 <getSpllConfig+0xb0>)
    431e:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4322:	0c1b      	lsrs	r3, r3, #16
    4324:	b2db      	uxtb	r3, r3
    4326:	f003 031f 	and.w	r3, r3, #31
    432a:	b2da      	uxtb	r2, r3
    432c:	4b03      	ldr	r3, [pc, #12]	; (433c <getSpllConfig+0xac>)
    432e:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    4330:	9b00      	ldr	r3, [sp, #0]
}
    4332:	4618      	mov	r0, r3
    4334:	b002      	add	sp, #8
    4336:	4770      	bx	lr
    4338:	1fff8bac 	.word	0x1fff8bac
    433c:	1fff8c38 	.word	0x1fff8c38
    4340:	40064000 	.word	0x40064000

00004344 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    4344:	b086      	sub	sp, #24
    4346:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    4348:	2300      	movs	r3, #0
    434a:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    434c:	9b01      	ldr	r3, [sp, #4]
    434e:	2b1b      	cmp	r3, #27
    4350:	d00f      	beq.n	4372 <getSelectorConfig+0x2e>
    4352:	9b01      	ldr	r3, [sp, #4]
    4354:	2b1b      	cmp	r3, #27
    4356:	d80f      	bhi.n	4378 <getSelectorConfig+0x34>
    4358:	9b01      	ldr	r3, [sp, #4]
    435a:	2b19      	cmp	r3, #25
    435c:	d003      	beq.n	4366 <getSelectorConfig+0x22>
    435e:	9b01      	ldr	r3, [sp, #4]
    4360:	2b1a      	cmp	r3, #26
    4362:	d003      	beq.n	436c <getSelectorConfig+0x28>
    4364:	e008      	b.n	4378 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    4366:	2300      	movs	r3, #0
    4368:	9304      	str	r3, [sp, #16]
            break;
    436a:	e008      	b.n	437e <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    436c:	2301      	movs	r3, #1
    436e:	9304      	str	r3, [sp, #16]
            break;
    4370:	e005      	b.n	437e <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    4372:	2302      	movs	r3, #2
    4374:	9304      	str	r3, [sp, #16]
            break;
    4376:	e002      	b.n	437e <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    4378:	2300      	movs	r3, #0
    437a:	9304      	str	r3, [sp, #16]
            break;
    437c:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    437e:	4b36      	ldr	r3, [pc, #216]	; (4458 <getSelectorConfig+0x114>)
    4380:	681b      	ldr	r3, [r3, #0]
    4382:	2b00      	cmp	r3, #0
    4384:	d01d      	beq.n	43c2 <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4386:	2300      	movs	r3, #0
    4388:	9303      	str	r3, [sp, #12]
    438a:	e013      	b.n	43b4 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    438c:	4b32      	ldr	r3, [pc, #200]	; (4458 <getSelectorConfig+0x114>)
    438e:	681b      	ldr	r3, [r3, #0]
    4390:	9a03      	ldr	r2, [sp, #12]
    4392:	320d      	adds	r2, #13
    4394:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4398:	9a01      	ldr	r2, [sp, #4]
    439a:	429a      	cmp	r2, r3
    439c:	d107      	bne.n	43ae <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    439e:	4b2e      	ldr	r3, [pc, #184]	; (4458 <getSelectorConfig+0x114>)
    43a0:	681a      	ldr	r2, [r3, #0]
    43a2:	9b03      	ldr	r3, [sp, #12]
    43a4:	330d      	adds	r3, #13
    43a6:	00db      	lsls	r3, r3, #3
    43a8:	4413      	add	r3, r2
    43aa:	9305      	str	r3, [sp, #20]
                break;
    43ac:	e009      	b.n	43c2 <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    43ae:	9b03      	ldr	r3, [sp, #12]
    43b0:	3301      	adds	r3, #1
    43b2:	9303      	str	r3, [sp, #12]
    43b4:	4b28      	ldr	r3, [pc, #160]	; (4458 <getSelectorConfig+0x114>)
    43b6:	681b      	ldr	r3, [r3, #0]
    43b8:	7adb      	ldrb	r3, [r3, #11]
    43ba:	461a      	mov	r2, r3
    43bc:	9b03      	ldr	r3, [sp, #12]
    43be:	4293      	cmp	r3, r2
    43c0:	d3e4      	bcc.n	438c <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    43c2:	9b05      	ldr	r3, [sp, #20]
    43c4:	2b00      	cmp	r3, #0
    43c6:	d140      	bne.n	444a <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    43c8:	9b04      	ldr	r3, [sp, #16]
    43ca:	00db      	lsls	r3, r3, #3
    43cc:	4a23      	ldr	r2, [pc, #140]	; (445c <getSelectorConfig+0x118>)
    43ce:	4413      	add	r3, r2
    43d0:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    43d2:	4922      	ldr	r1, [pc, #136]	; (445c <getSelectorConfig+0x118>)
    43d4:	9b04      	ldr	r3, [sp, #16]
    43d6:	9a01      	ldr	r2, [sp, #4]
    43d8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    43dc:	9b01      	ldr	r3, [sp, #4]
    43de:	2b1b      	cmp	r3, #27
    43e0:	d025      	beq.n	442e <getSelectorConfig+0xea>
    43e2:	9b01      	ldr	r3, [sp, #4]
    43e4:	2b1b      	cmp	r3, #27
    43e6:	d832      	bhi.n	444e <getSelectorConfig+0x10a>
    43e8:	9b01      	ldr	r3, [sp, #4]
    43ea:	2b19      	cmp	r3, #25
    43ec:	d003      	beq.n	43f6 <getSelectorConfig+0xb2>
    43ee:	9b01      	ldr	r3, [sp, #4]
    43f0:	2b1a      	cmp	r3, #26
    43f2:	d00e      	beq.n	4412 <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    43f4:	e02b      	b.n	444e <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    43f6:	4b1a      	ldr	r3, [pc, #104]	; (4460 <getSelectorConfig+0x11c>)
    43f8:	695b      	ldr	r3, [r3, #20]
    43fa:	0e1b      	lsrs	r3, r3, #24
    43fc:	f003 030f 	and.w	r3, r3, #15
    4400:	4a18      	ldr	r2, [pc, #96]	; (4464 <getSelectorConfig+0x120>)
    4402:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4406:	4915      	ldr	r1, [pc, #84]	; (445c <getSelectorConfig+0x118>)
    4408:	9b04      	ldr	r3, [sp, #16]
    440a:	00db      	lsls	r3, r3, #3
    440c:	440b      	add	r3, r1
    440e:	605a      	str	r2, [r3, #4]
                break;
    4410:	e01e      	b.n	4450 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    4412:	4b13      	ldr	r3, [pc, #76]	; (4460 <getSelectorConfig+0x11c>)
    4414:	699b      	ldr	r3, [r3, #24]
    4416:	0e1b      	lsrs	r3, r3, #24
    4418:	f003 030f 	and.w	r3, r3, #15
    441c:	4a11      	ldr	r2, [pc, #68]	; (4464 <getSelectorConfig+0x120>)
    441e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4422:	490e      	ldr	r1, [pc, #56]	; (445c <getSelectorConfig+0x118>)
    4424:	9b04      	ldr	r3, [sp, #16]
    4426:	00db      	lsls	r3, r3, #3
    4428:	440b      	add	r3, r1
    442a:	605a      	str	r2, [r3, #4]
                break;
    442c:	e010      	b.n	4450 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    442e:	4b0c      	ldr	r3, [pc, #48]	; (4460 <getSelectorConfig+0x11c>)
    4430:	69db      	ldr	r3, [r3, #28]
    4432:	0e1b      	lsrs	r3, r3, #24
    4434:	f003 030f 	and.w	r3, r3, #15
    4438:	4a0a      	ldr	r2, [pc, #40]	; (4464 <getSelectorConfig+0x120>)
    443a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    443e:	4907      	ldr	r1, [pc, #28]	; (445c <getSelectorConfig+0x118>)
    4440:	9b04      	ldr	r3, [sp, #16]
    4442:	00db      	lsls	r3, r3, #3
    4444:	440b      	add	r3, r1
    4446:	605a      	str	r2, [r3, #4]
                break;
    4448:	e002      	b.n	4450 <getSelectorConfig+0x10c>
        }
    }
    444a:	bf00      	nop
    444c:	e000      	b.n	4450 <getSelectorConfig+0x10c>
                break;
    444e:	bf00      	nop

    return ReturnValue;
    4450:	9b05      	ldr	r3, [sp, #20]
}
    4452:	4618      	mov	r0, r3
    4454:	b006      	add	sp, #24
    4456:	4770      	bx	lr
    4458:	1fff8bac 	.word	0x1fff8bac
    445c:	1fff8c60 	.word	0x1fff8c60
    4460:	40064000 	.word	0x40064000
    4464:	00007f60 	.word	0x00007f60

00004468 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    4468:	b086      	sub	sp, #24
    446a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    446c:	2300      	movs	r3, #0
    446e:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4470:	2300      	movs	r3, #0
    4472:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4474:	9b01      	ldr	r3, [sp, #4]
    4476:	2b1f      	cmp	r3, #31
    4478:	d00f      	beq.n	449a <getCoreDividerConfig+0x32>
    447a:	9b01      	ldr	r3, [sp, #4]
    447c:	2b1f      	cmp	r3, #31
    447e:	d80f      	bhi.n	44a0 <getCoreDividerConfig+0x38>
    4480:	9b01      	ldr	r3, [sp, #4]
    4482:	2b1d      	cmp	r3, #29
    4484:	d003      	beq.n	448e <getCoreDividerConfig+0x26>
    4486:	9b01      	ldr	r3, [sp, #4]
    4488:	2b1e      	cmp	r3, #30
    448a:	d003      	beq.n	4494 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    448c:	e008      	b.n	44a0 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    448e:	2300      	movs	r3, #0
    4490:	9304      	str	r3, [sp, #16]
            break;
    4492:	e006      	b.n	44a2 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4494:	2301      	movs	r3, #1
    4496:	9304      	str	r3, [sp, #16]
            break;
    4498:	e003      	b.n	44a2 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    449a:	2302      	movs	r3, #2
    449c:	9304      	str	r3, [sp, #16]
            break;
    449e:	e000      	b.n	44a2 <getCoreDividerConfig+0x3a>
                break;
    44a0:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    44a2:	4b41      	ldr	r3, [pc, #260]	; (45a8 <getCoreDividerConfig+0x140>)
    44a4:	681b      	ldr	r3, [r3, #0]
    44a6:	2b00      	cmp	r3, #0
    44a8:	d026      	beq.n	44f8 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    44aa:	2300      	movs	r3, #0
    44ac:	9303      	str	r3, [sp, #12]
    44ae:	e01c      	b.n	44ea <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    44b0:	4b3d      	ldr	r3, [pc, #244]	; (45a8 <getCoreDividerConfig+0x140>)
    44b2:	6819      	ldr	r1, [r3, #0]
    44b4:	9a03      	ldr	r2, [sp, #12]
    44b6:	4613      	mov	r3, r2
    44b8:	005b      	lsls	r3, r3, #1
    44ba:	4413      	add	r3, r2
    44bc:	009b      	lsls	r3, r3, #2
    44be:	440b      	add	r3, r1
    44c0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    44c4:	681b      	ldr	r3, [r3, #0]
    44c6:	9a01      	ldr	r2, [sp, #4]
    44c8:	429a      	cmp	r2, r3
    44ca:	d10b      	bne.n	44e4 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    44cc:	4b36      	ldr	r3, [pc, #216]	; (45a8 <getCoreDividerConfig+0x140>)
    44ce:	6819      	ldr	r1, [r3, #0]
    44d0:	9a03      	ldr	r2, [sp, #12]
    44d2:	4613      	mov	r3, r2
    44d4:	005b      	lsls	r3, r3, #1
    44d6:	4413      	add	r3, r2
    44d8:	009b      	lsls	r3, r3, #2
    44da:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    44de:	440b      	add	r3, r1
    44e0:	9305      	str	r3, [sp, #20]
                break;
    44e2:	e009      	b.n	44f8 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    44e4:	9b03      	ldr	r3, [sp, #12]
    44e6:	3301      	adds	r3, #1
    44e8:	9303      	str	r3, [sp, #12]
    44ea:	4b2f      	ldr	r3, [pc, #188]	; (45a8 <getCoreDividerConfig+0x140>)
    44ec:	681b      	ldr	r3, [r3, #0]
    44ee:	7b1b      	ldrb	r3, [r3, #12]
    44f0:	461a      	mov	r2, r3
    44f2:	9b03      	ldr	r3, [sp, #12]
    44f4:	4293      	cmp	r3, r2
    44f6:	d3db      	bcc.n	44b0 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    44f8:	9b05      	ldr	r3, [sp, #20]
    44fa:	2b00      	cmp	r3, #0
    44fc:	d14d      	bne.n	459a <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    44fe:	9a04      	ldr	r2, [sp, #16]
    4500:	4613      	mov	r3, r2
    4502:	005b      	lsls	r3, r3, #1
    4504:	4413      	add	r3, r2
    4506:	009b      	lsls	r3, r3, #2
    4508:	4a28      	ldr	r2, [pc, #160]	; (45ac <getCoreDividerConfig+0x144>)
    450a:	4413      	add	r3, r2
    450c:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    450e:	4927      	ldr	r1, [pc, #156]	; (45ac <getCoreDividerConfig+0x144>)
    4510:	9a04      	ldr	r2, [sp, #16]
    4512:	4613      	mov	r3, r2
    4514:	005b      	lsls	r3, r3, #1
    4516:	4413      	add	r3, r2
    4518:	009b      	lsls	r3, r3, #2
    451a:	440b      	add	r3, r1
    451c:	9a01      	ldr	r2, [sp, #4]
    451e:	601a      	str	r2, [r3, #0]
        switch(Name)
    4520:	9b01      	ldr	r3, [sp, #4]
    4522:	2b1f      	cmp	r3, #31
    4524:	d029      	beq.n	457a <getCoreDividerConfig+0x112>
    4526:	9b01      	ldr	r3, [sp, #4]
    4528:	2b1f      	cmp	r3, #31
    452a:	d838      	bhi.n	459e <getCoreDividerConfig+0x136>
    452c:	9b01      	ldr	r3, [sp, #4]
    452e:	2b1d      	cmp	r3, #29
    4530:	d003      	beq.n	453a <getCoreDividerConfig+0xd2>
    4532:	9b01      	ldr	r3, [sp, #4]
    4534:	2b1e      	cmp	r3, #30
    4536:	d010      	beq.n	455a <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4538:	e031      	b.n	459e <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    453a:	4b1d      	ldr	r3, [pc, #116]	; (45b0 <getCoreDividerConfig+0x148>)
    453c:	695b      	ldr	r3, [r3, #20]
    453e:	0c1b      	lsrs	r3, r3, #16
    4540:	f003 030f 	and.w	r3, r3, #15
    4544:	1c59      	adds	r1, r3, #1
    4546:	4819      	ldr	r0, [pc, #100]	; (45ac <getCoreDividerConfig+0x144>)
    4548:	9a04      	ldr	r2, [sp, #16]
    454a:	4613      	mov	r3, r2
    454c:	005b      	lsls	r3, r3, #1
    454e:	4413      	add	r3, r2
    4550:	009b      	lsls	r3, r3, #2
    4552:	4403      	add	r3, r0
    4554:	3304      	adds	r3, #4
    4556:	6019      	str	r1, [r3, #0]
                break;
    4558:	e022      	b.n	45a0 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    455a:	4b15      	ldr	r3, [pc, #84]	; (45b0 <getCoreDividerConfig+0x148>)
    455c:	699b      	ldr	r3, [r3, #24]
    455e:	0c1b      	lsrs	r3, r3, #16
    4560:	f003 030f 	and.w	r3, r3, #15
    4564:	1c59      	adds	r1, r3, #1
    4566:	4811      	ldr	r0, [pc, #68]	; (45ac <getCoreDividerConfig+0x144>)
    4568:	9a04      	ldr	r2, [sp, #16]
    456a:	4613      	mov	r3, r2
    456c:	005b      	lsls	r3, r3, #1
    456e:	4413      	add	r3, r2
    4570:	009b      	lsls	r3, r3, #2
    4572:	4403      	add	r3, r0
    4574:	3304      	adds	r3, #4
    4576:	6019      	str	r1, [r3, #0]
                break;
    4578:	e012      	b.n	45a0 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    457a:	4b0d      	ldr	r3, [pc, #52]	; (45b0 <getCoreDividerConfig+0x148>)
    457c:	69db      	ldr	r3, [r3, #28]
    457e:	0c1b      	lsrs	r3, r3, #16
    4580:	f003 030f 	and.w	r3, r3, #15
    4584:	1c59      	adds	r1, r3, #1
    4586:	4809      	ldr	r0, [pc, #36]	; (45ac <getCoreDividerConfig+0x144>)
    4588:	9a04      	ldr	r2, [sp, #16]
    458a:	4613      	mov	r3, r2
    458c:	005b      	lsls	r3, r3, #1
    458e:	4413      	add	r3, r2
    4590:	009b      	lsls	r3, r3, #2
    4592:	4403      	add	r3, r0
    4594:	3304      	adds	r3, #4
    4596:	6019      	str	r1, [r3, #0]
                break;
    4598:	e002      	b.n	45a0 <getCoreDividerConfig+0x138>
        }
    }
    459a:	bf00      	nop
    459c:	e000      	b.n	45a0 <getCoreDividerConfig+0x138>
                break;
    459e:	bf00      	nop

    return ReturnValue;
    45a0:	9b05      	ldr	r3, [sp, #20]
}
    45a2:	4618      	mov	r0, r3
    45a4:	b006      	add	sp, #24
    45a6:	4770      	bx	lr
    45a8:	1fff8bac 	.word	0x1fff8bac
    45ac:	1fff8c78 	.word	0x1fff8c78
    45b0:	40064000 	.word	0x40064000

000045b4 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    45b4:	b086      	sub	sp, #24
    45b6:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    45b8:	2300      	movs	r3, #0
    45ba:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    45bc:	2300      	movs	r3, #0
    45be:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    45c0:	9b01      	ldr	r3, [sp, #4]
    45c2:	2b23      	cmp	r3, #35	; 0x23
    45c4:	d00f      	beq.n	45e6 <getBusDividerConfig+0x32>
    45c6:	9b01      	ldr	r3, [sp, #4]
    45c8:	2b23      	cmp	r3, #35	; 0x23
    45ca:	d80f      	bhi.n	45ec <getBusDividerConfig+0x38>
    45cc:	9b01      	ldr	r3, [sp, #4]
    45ce:	2b21      	cmp	r3, #33	; 0x21
    45d0:	d003      	beq.n	45da <getBusDividerConfig+0x26>
    45d2:	9b01      	ldr	r3, [sp, #4]
    45d4:	2b22      	cmp	r3, #34	; 0x22
    45d6:	d003      	beq.n	45e0 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    45d8:	e008      	b.n	45ec <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    45da:	2300      	movs	r3, #0
    45dc:	9304      	str	r3, [sp, #16]
            break;
    45de:	e006      	b.n	45ee <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    45e0:	2301      	movs	r3, #1
    45e2:	9304      	str	r3, [sp, #16]
            break;
    45e4:	e003      	b.n	45ee <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    45e6:	2302      	movs	r3, #2
    45e8:	9304      	str	r3, [sp, #16]
            break;
    45ea:	e000      	b.n	45ee <getBusDividerConfig+0x3a>
                break;
    45ec:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    45ee:	4b41      	ldr	r3, [pc, #260]	; (46f4 <getBusDividerConfig+0x140>)
    45f0:	681b      	ldr	r3, [r3, #0]
    45f2:	2b00      	cmp	r3, #0
    45f4:	d026      	beq.n	4644 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    45f6:	2300      	movs	r3, #0
    45f8:	9303      	str	r3, [sp, #12]
    45fa:	e01c      	b.n	4636 <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    45fc:	4b3d      	ldr	r3, [pc, #244]	; (46f4 <getBusDividerConfig+0x140>)
    45fe:	6819      	ldr	r1, [r3, #0]
    4600:	9a03      	ldr	r2, [sp, #12]
    4602:	4613      	mov	r3, r2
    4604:	005b      	lsls	r3, r3, #1
    4606:	4413      	add	r3, r2
    4608:	009b      	lsls	r3, r3, #2
    460a:	440b      	add	r3, r1
    460c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4610:	681b      	ldr	r3, [r3, #0]
    4612:	9a01      	ldr	r2, [sp, #4]
    4614:	429a      	cmp	r2, r3
    4616:	d10b      	bne.n	4630 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4618:	4b36      	ldr	r3, [pc, #216]	; (46f4 <getBusDividerConfig+0x140>)
    461a:	6819      	ldr	r1, [r3, #0]
    461c:	9a03      	ldr	r2, [sp, #12]
    461e:	4613      	mov	r3, r2
    4620:	005b      	lsls	r3, r3, #1
    4622:	4413      	add	r3, r2
    4624:	009b      	lsls	r3, r3, #2
    4626:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    462a:	440b      	add	r3, r1
    462c:	9305      	str	r3, [sp, #20]
                break;
    462e:	e009      	b.n	4644 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4630:	9b03      	ldr	r3, [sp, #12]
    4632:	3301      	adds	r3, #1
    4634:	9303      	str	r3, [sp, #12]
    4636:	4b2f      	ldr	r3, [pc, #188]	; (46f4 <getBusDividerConfig+0x140>)
    4638:	681b      	ldr	r3, [r3, #0]
    463a:	7b1b      	ldrb	r3, [r3, #12]
    463c:	461a      	mov	r2, r3
    463e:	9b03      	ldr	r3, [sp, #12]
    4640:	4293      	cmp	r3, r2
    4642:	d3db      	bcc.n	45fc <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4644:	9b05      	ldr	r3, [sp, #20]
    4646:	2b00      	cmp	r3, #0
    4648:	d14d      	bne.n	46e6 <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    464a:	9a04      	ldr	r2, [sp, #16]
    464c:	4613      	mov	r3, r2
    464e:	005b      	lsls	r3, r3, #1
    4650:	4413      	add	r3, r2
    4652:	009b      	lsls	r3, r3, #2
    4654:	4a28      	ldr	r2, [pc, #160]	; (46f8 <getBusDividerConfig+0x144>)
    4656:	4413      	add	r3, r2
    4658:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    465a:	4927      	ldr	r1, [pc, #156]	; (46f8 <getBusDividerConfig+0x144>)
    465c:	9a04      	ldr	r2, [sp, #16]
    465e:	4613      	mov	r3, r2
    4660:	005b      	lsls	r3, r3, #1
    4662:	4413      	add	r3, r2
    4664:	009b      	lsls	r3, r3, #2
    4666:	440b      	add	r3, r1
    4668:	9a01      	ldr	r2, [sp, #4]
    466a:	601a      	str	r2, [r3, #0]
        switch(Name)
    466c:	9b01      	ldr	r3, [sp, #4]
    466e:	2b23      	cmp	r3, #35	; 0x23
    4670:	d029      	beq.n	46c6 <getBusDividerConfig+0x112>
    4672:	9b01      	ldr	r3, [sp, #4]
    4674:	2b23      	cmp	r3, #35	; 0x23
    4676:	d838      	bhi.n	46ea <getBusDividerConfig+0x136>
    4678:	9b01      	ldr	r3, [sp, #4]
    467a:	2b21      	cmp	r3, #33	; 0x21
    467c:	d003      	beq.n	4686 <getBusDividerConfig+0xd2>
    467e:	9b01      	ldr	r3, [sp, #4]
    4680:	2b22      	cmp	r3, #34	; 0x22
    4682:	d010      	beq.n	46a6 <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4684:	e031      	b.n	46ea <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    4686:	4b1d      	ldr	r3, [pc, #116]	; (46fc <getBusDividerConfig+0x148>)
    4688:	695b      	ldr	r3, [r3, #20]
    468a:	091b      	lsrs	r3, r3, #4
    468c:	f003 030f 	and.w	r3, r3, #15
    4690:	1c59      	adds	r1, r3, #1
    4692:	4819      	ldr	r0, [pc, #100]	; (46f8 <getBusDividerConfig+0x144>)
    4694:	9a04      	ldr	r2, [sp, #16]
    4696:	4613      	mov	r3, r2
    4698:	005b      	lsls	r3, r3, #1
    469a:	4413      	add	r3, r2
    469c:	009b      	lsls	r3, r3, #2
    469e:	4403      	add	r3, r0
    46a0:	3304      	adds	r3, #4
    46a2:	6019      	str	r1, [r3, #0]
                break;
    46a4:	e022      	b.n	46ec <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    46a6:	4b15      	ldr	r3, [pc, #84]	; (46fc <getBusDividerConfig+0x148>)
    46a8:	699b      	ldr	r3, [r3, #24]
    46aa:	091b      	lsrs	r3, r3, #4
    46ac:	f003 030f 	and.w	r3, r3, #15
    46b0:	1c59      	adds	r1, r3, #1
    46b2:	4811      	ldr	r0, [pc, #68]	; (46f8 <getBusDividerConfig+0x144>)
    46b4:	9a04      	ldr	r2, [sp, #16]
    46b6:	4613      	mov	r3, r2
    46b8:	005b      	lsls	r3, r3, #1
    46ba:	4413      	add	r3, r2
    46bc:	009b      	lsls	r3, r3, #2
    46be:	4403      	add	r3, r0
    46c0:	3304      	adds	r3, #4
    46c2:	6019      	str	r1, [r3, #0]
                break;
    46c4:	e012      	b.n	46ec <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    46c6:	4b0d      	ldr	r3, [pc, #52]	; (46fc <getBusDividerConfig+0x148>)
    46c8:	69db      	ldr	r3, [r3, #28]
    46ca:	091b      	lsrs	r3, r3, #4
    46cc:	f003 030f 	and.w	r3, r3, #15
    46d0:	1c59      	adds	r1, r3, #1
    46d2:	4809      	ldr	r0, [pc, #36]	; (46f8 <getBusDividerConfig+0x144>)
    46d4:	9a04      	ldr	r2, [sp, #16]
    46d6:	4613      	mov	r3, r2
    46d8:	005b      	lsls	r3, r3, #1
    46da:	4413      	add	r3, r2
    46dc:	009b      	lsls	r3, r3, #2
    46de:	4403      	add	r3, r0
    46e0:	3304      	adds	r3, #4
    46e2:	6019      	str	r1, [r3, #0]
                break;
    46e4:	e002      	b.n	46ec <getBusDividerConfig+0x138>
        }
    }
    46e6:	bf00      	nop
    46e8:	e000      	b.n	46ec <getBusDividerConfig+0x138>
                break;
    46ea:	bf00      	nop

    return ReturnValue;
    46ec:	9b05      	ldr	r3, [sp, #20]
}
    46ee:	4618      	mov	r0, r3
    46f0:	b006      	add	sp, #24
    46f2:	4770      	bx	lr
    46f4:	1fff8bac 	.word	0x1fff8bac
    46f8:	1fff8c9c 	.word	0x1fff8c9c
    46fc:	40064000 	.word	0x40064000

00004700 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    4700:	b086      	sub	sp, #24
    4702:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4704:	2300      	movs	r3, #0
    4706:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4708:	2300      	movs	r3, #0
    470a:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    470c:	9b01      	ldr	r3, [sp, #4]
    470e:	2b27      	cmp	r3, #39	; 0x27
    4710:	d00f      	beq.n	4732 <getSlowDividerConfig+0x32>
    4712:	9b01      	ldr	r3, [sp, #4]
    4714:	2b27      	cmp	r3, #39	; 0x27
    4716:	d80f      	bhi.n	4738 <getSlowDividerConfig+0x38>
    4718:	9b01      	ldr	r3, [sp, #4]
    471a:	2b25      	cmp	r3, #37	; 0x25
    471c:	d003      	beq.n	4726 <getSlowDividerConfig+0x26>
    471e:	9b01      	ldr	r3, [sp, #4]
    4720:	2b26      	cmp	r3, #38	; 0x26
    4722:	d003      	beq.n	472c <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4724:	e008      	b.n	4738 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4726:	2300      	movs	r3, #0
    4728:	9304      	str	r3, [sp, #16]
            break;
    472a:	e006      	b.n	473a <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    472c:	2301      	movs	r3, #1
    472e:	9304      	str	r3, [sp, #16]
            break;
    4730:	e003      	b.n	473a <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4732:	2302      	movs	r3, #2
    4734:	9304      	str	r3, [sp, #16]
            break;
    4736:	e000      	b.n	473a <getSlowDividerConfig+0x3a>
                break;
    4738:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    473a:	4b40      	ldr	r3, [pc, #256]	; (483c <getSlowDividerConfig+0x13c>)
    473c:	681b      	ldr	r3, [r3, #0]
    473e:	2b00      	cmp	r3, #0
    4740:	d026      	beq.n	4790 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4742:	2300      	movs	r3, #0
    4744:	9303      	str	r3, [sp, #12]
    4746:	e01c      	b.n	4782 <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4748:	4b3c      	ldr	r3, [pc, #240]	; (483c <getSlowDividerConfig+0x13c>)
    474a:	6819      	ldr	r1, [r3, #0]
    474c:	9a03      	ldr	r2, [sp, #12]
    474e:	4613      	mov	r3, r2
    4750:	005b      	lsls	r3, r3, #1
    4752:	4413      	add	r3, r2
    4754:	009b      	lsls	r3, r3, #2
    4756:	440b      	add	r3, r1
    4758:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    475c:	681b      	ldr	r3, [r3, #0]
    475e:	9a01      	ldr	r2, [sp, #4]
    4760:	429a      	cmp	r2, r3
    4762:	d10b      	bne.n	477c <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4764:	4b35      	ldr	r3, [pc, #212]	; (483c <getSlowDividerConfig+0x13c>)
    4766:	6819      	ldr	r1, [r3, #0]
    4768:	9a03      	ldr	r2, [sp, #12]
    476a:	4613      	mov	r3, r2
    476c:	005b      	lsls	r3, r3, #1
    476e:	4413      	add	r3, r2
    4770:	009b      	lsls	r3, r3, #2
    4772:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4776:	440b      	add	r3, r1
    4778:	9305      	str	r3, [sp, #20]
                break;
    477a:	e009      	b.n	4790 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    477c:	9b03      	ldr	r3, [sp, #12]
    477e:	3301      	adds	r3, #1
    4780:	9303      	str	r3, [sp, #12]
    4782:	4b2e      	ldr	r3, [pc, #184]	; (483c <getSlowDividerConfig+0x13c>)
    4784:	681b      	ldr	r3, [r3, #0]
    4786:	7b1b      	ldrb	r3, [r3, #12]
    4788:	461a      	mov	r2, r3
    478a:	9b03      	ldr	r3, [sp, #12]
    478c:	4293      	cmp	r3, r2
    478e:	d3db      	bcc.n	4748 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4790:	9b05      	ldr	r3, [sp, #20]
    4792:	2b00      	cmp	r3, #0
    4794:	d14a      	bne.n	482c <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    4796:	9a04      	ldr	r2, [sp, #16]
    4798:	4613      	mov	r3, r2
    479a:	005b      	lsls	r3, r3, #1
    479c:	4413      	add	r3, r2
    479e:	009b      	lsls	r3, r3, #2
    47a0:	4a27      	ldr	r2, [pc, #156]	; (4840 <getSlowDividerConfig+0x140>)
    47a2:	4413      	add	r3, r2
    47a4:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    47a6:	4926      	ldr	r1, [pc, #152]	; (4840 <getSlowDividerConfig+0x140>)
    47a8:	9a04      	ldr	r2, [sp, #16]
    47aa:	4613      	mov	r3, r2
    47ac:	005b      	lsls	r3, r3, #1
    47ae:	4413      	add	r3, r2
    47b0:	009b      	lsls	r3, r3, #2
    47b2:	440b      	add	r3, r1
    47b4:	9a01      	ldr	r2, [sp, #4]
    47b6:	601a      	str	r2, [r3, #0]
        switch(Name)
    47b8:	9b01      	ldr	r3, [sp, #4]
    47ba:	2b27      	cmp	r3, #39	; 0x27
    47bc:	d027      	beq.n	480e <getSlowDividerConfig+0x10e>
    47be:	9b01      	ldr	r3, [sp, #4]
    47c0:	2b27      	cmp	r3, #39	; 0x27
    47c2:	d835      	bhi.n	4830 <getSlowDividerConfig+0x130>
    47c4:	9b01      	ldr	r3, [sp, #4]
    47c6:	2b25      	cmp	r3, #37	; 0x25
    47c8:	d003      	beq.n	47d2 <getSlowDividerConfig+0xd2>
    47ca:	9b01      	ldr	r3, [sp, #4]
    47cc:	2b26      	cmp	r3, #38	; 0x26
    47ce:	d00f      	beq.n	47f0 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    47d0:	e02e      	b.n	4830 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    47d2:	4b1c      	ldr	r3, [pc, #112]	; (4844 <getSlowDividerConfig+0x144>)
    47d4:	695b      	ldr	r3, [r3, #20]
    47d6:	f003 030f 	and.w	r3, r3, #15
    47da:	1c59      	adds	r1, r3, #1
    47dc:	4818      	ldr	r0, [pc, #96]	; (4840 <getSlowDividerConfig+0x140>)
    47de:	9a04      	ldr	r2, [sp, #16]
    47e0:	4613      	mov	r3, r2
    47e2:	005b      	lsls	r3, r3, #1
    47e4:	4413      	add	r3, r2
    47e6:	009b      	lsls	r3, r3, #2
    47e8:	4403      	add	r3, r0
    47ea:	3304      	adds	r3, #4
    47ec:	6019      	str	r1, [r3, #0]
                break;
    47ee:	e020      	b.n	4832 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    47f0:	4b14      	ldr	r3, [pc, #80]	; (4844 <getSlowDividerConfig+0x144>)
    47f2:	699b      	ldr	r3, [r3, #24]
    47f4:	f003 030f 	and.w	r3, r3, #15
    47f8:	1c59      	adds	r1, r3, #1
    47fa:	4811      	ldr	r0, [pc, #68]	; (4840 <getSlowDividerConfig+0x140>)
    47fc:	9a04      	ldr	r2, [sp, #16]
    47fe:	4613      	mov	r3, r2
    4800:	005b      	lsls	r3, r3, #1
    4802:	4413      	add	r3, r2
    4804:	009b      	lsls	r3, r3, #2
    4806:	4403      	add	r3, r0
    4808:	3304      	adds	r3, #4
    480a:	6019      	str	r1, [r3, #0]
                break;
    480c:	e011      	b.n	4832 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    480e:	4b0d      	ldr	r3, [pc, #52]	; (4844 <getSlowDividerConfig+0x144>)
    4810:	69db      	ldr	r3, [r3, #28]
    4812:	f003 030f 	and.w	r3, r3, #15
    4816:	1c59      	adds	r1, r3, #1
    4818:	4809      	ldr	r0, [pc, #36]	; (4840 <getSlowDividerConfig+0x140>)
    481a:	9a04      	ldr	r2, [sp, #16]
    481c:	4613      	mov	r3, r2
    481e:	005b      	lsls	r3, r3, #1
    4820:	4413      	add	r3, r2
    4822:	009b      	lsls	r3, r3, #2
    4824:	4403      	add	r3, r0
    4826:	3304      	adds	r3, #4
    4828:	6019      	str	r1, [r3, #0]
                break;
    482a:	e002      	b.n	4832 <getSlowDividerConfig+0x132>
        }
    }
    482c:	bf00      	nop
    482e:	e000      	b.n	4832 <getSlowDividerConfig+0x132>
                break;
    4830:	bf00      	nop

    return ReturnValue;
    4832:	9b05      	ldr	r3, [sp, #20]
}
    4834:	4618      	mov	r0, r3
    4836:	b006      	add	sp, #24
    4838:	4770      	bx	lr
    483a:	bf00      	nop
    483c:	1fff8bac 	.word	0x1fff8bac
    4840:	1fff8cc0 	.word	0x1fff8cc0
    4844:	40064000 	.word	0x40064000

00004848 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    4848:	b500      	push	{lr}
    484a:	b083      	sub	sp, #12
    484c:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    484e:	4b64      	ldr	r3, [pc, #400]	; (49e0 <Clock_Ip_ClockInitializeObjects+0x198>)
    4850:	781b      	ldrb	r3, [r3, #0]
    4852:	f083 0301 	eor.w	r3, r3, #1
    4856:	b2db      	uxtb	r3, r3
    4858:	2b00      	cmp	r3, #0
    485a:	d05b      	beq.n	4914 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    485c:	4b60      	ldr	r3, [pc, #384]	; (49e0 <Clock_Ip_ClockInitializeObjects+0x198>)
    485e:	2201      	movs	r2, #1
    4860:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    4862:	4b60      	ldr	r3, [pc, #384]	; (49e4 <Clock_Ip_ClockInitializeObjects+0x19c>)
    4864:	785b      	ldrb	r3, [r3, #1]
    4866:	461a      	mov	r2, r3
    4868:	4613      	mov	r3, r2
    486a:	009b      	lsls	r3, r3, #2
    486c:	4413      	add	r3, r2
    486e:	009b      	lsls	r3, r3, #2
    4870:	4a5d      	ldr	r2, [pc, #372]	; (49e8 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    4872:	4413      	add	r3, r2
    4874:	4a5d      	ldr	r2, [pc, #372]	; (49ec <Clock_Ip_ClockInitializeObjects+0x1a4>)
    4876:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    4878:	4b5d      	ldr	r3, [pc, #372]	; (49f0 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    487a:	785b      	ldrb	r3, [r3, #1]
    487c:	461a      	mov	r2, r3
    487e:	4613      	mov	r3, r2
    4880:	009b      	lsls	r3, r3, #2
    4882:	4413      	add	r3, r2
    4884:	009b      	lsls	r3, r3, #2
    4886:	4a5b      	ldr	r2, [pc, #364]	; (49f4 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    4888:	4413      	add	r3, r2
    488a:	4a5b      	ldr	r2, [pc, #364]	; (49f8 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    488c:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    488e:	4b5b      	ldr	r3, [pc, #364]	; (49fc <Clock_Ip_ClockInitializeObjects+0x1b4>)
    4890:	791b      	ldrb	r3, [r3, #4]
    4892:	461a      	mov	r2, r3
    4894:	4613      	mov	r3, r2
    4896:	005b      	lsls	r3, r3, #1
    4898:	4413      	add	r3, r2
    489a:	009b      	lsls	r3, r3, #2
    489c:	4a58      	ldr	r2, [pc, #352]	; (4a00 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    489e:	4413      	add	r3, r2
    48a0:	4a58      	ldr	r2, [pc, #352]	; (4a04 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    48a2:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    48a4:	4b58      	ldr	r3, [pc, #352]	; (4a08 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    48a6:	795b      	ldrb	r3, [r3, #5]
    48a8:	00db      	lsls	r3, r3, #3
    48aa:	4a58      	ldr	r2, [pc, #352]	; (4a0c <Clock_Ip_ClockInitializeObjects+0x1c4>)
    48ac:	4413      	add	r3, r2
    48ae:	4a58      	ldr	r2, [pc, #352]	; (4a10 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    48b0:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    48b2:	4b55      	ldr	r3, [pc, #340]	; (4a08 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    48b4:	79db      	ldrb	r3, [r3, #7]
    48b6:	00db      	lsls	r3, r3, #3
    48b8:	4a54      	ldr	r2, [pc, #336]	; (4a0c <Clock_Ip_ClockInitializeObjects+0x1c4>)
    48ba:	4413      	add	r3, r2
    48bc:	4a55      	ldr	r2, [pc, #340]	; (4a14 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    48be:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    48c0:	4b55      	ldr	r3, [pc, #340]	; (4a18 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    48c2:	799b      	ldrb	r3, [r3, #6]
    48c4:	009b      	lsls	r3, r3, #2
    48c6:	4a55      	ldr	r2, [pc, #340]	; (4a1c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    48c8:	4413      	add	r3, r2
    48ca:	4a55      	ldr	r2, [pc, #340]	; (4a20 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    48cc:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    48ce:	4b52      	ldr	r3, [pc, #328]	; (4a18 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    48d0:	7a1b      	ldrb	r3, [r3, #8]
    48d2:	009b      	lsls	r3, r3, #2
    48d4:	4a51      	ldr	r2, [pc, #324]	; (4a1c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    48d6:	4413      	add	r3, r2
    48d8:	4a52      	ldr	r2, [pc, #328]	; (4a24 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    48da:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    48dc:	4b4e      	ldr	r3, [pc, #312]	; (4a18 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    48de:	7a5b      	ldrb	r3, [r3, #9]
    48e0:	009b      	lsls	r3, r3, #2
    48e2:	4a4e      	ldr	r2, [pc, #312]	; (4a1c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    48e4:	4413      	add	r3, r2
    48e6:	4a50      	ldr	r2, [pc, #320]	; (4a28 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    48e8:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    48ea:	4b4b      	ldr	r3, [pc, #300]	; (4a18 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    48ec:	7adb      	ldrb	r3, [r3, #11]
    48ee:	009b      	lsls	r3, r3, #2
    48f0:	4a4a      	ldr	r2, [pc, #296]	; (4a1c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    48f2:	4413      	add	r3, r2
    48f4:	4a4d      	ldr	r2, [pc, #308]	; (4a2c <Clock_Ip_ClockInitializeObjects+0x1e4>)
    48f6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    48f8:	4b47      	ldr	r3, [pc, #284]	; (4a18 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    48fa:	7b1b      	ldrb	r3, [r3, #12]
    48fc:	009b      	lsls	r3, r3, #2
    48fe:	4a47      	ldr	r2, [pc, #284]	; (4a1c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4900:	4413      	add	r3, r2
    4902:	4a4b      	ldr	r2, [pc, #300]	; (4a30 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    4904:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    4906:	4b44      	ldr	r3, [pc, #272]	; (4a18 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4908:	7b9b      	ldrb	r3, [r3, #14]
    490a:	009b      	lsls	r3, r3, #2
    490c:	4a43      	ldr	r2, [pc, #268]	; (4a1c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    490e:	4413      	add	r3, r2
    4910:	4a48      	ldr	r2, [pc, #288]	; (4a34 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    4912:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    4914:	4b48      	ldr	r3, [pc, #288]	; (4a38 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    4916:	781b      	ldrb	r3, [r3, #0]
    4918:	2b00      	cmp	r3, #0
    491a:	d002      	beq.n	4922 <Clock_Ip_ClockInitializeObjects+0xda>
    491c:	9b01      	ldr	r3, [sp, #4]
    491e:	2b00      	cmp	r3, #0
    4920:	d003      	beq.n	492a <Clock_Ip_ClockInitializeObjects+0xe2>
    4922:	4b46      	ldr	r3, [pc, #280]	; (4a3c <Clock_Ip_ClockInitializeObjects+0x1f4>)
    4924:	781b      	ldrb	r3, [r3, #0]
    4926:	2b00      	cmp	r3, #0
    4928:	d056      	beq.n	49d8 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    492a:	f7ff fc09 	bl	4140 <getFircConfig>
    492e:	4603      	mov	r3, r0
    4930:	4a43      	ldr	r2, [pc, #268]	; (4a40 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    4932:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    4934:	f7ff fc60 	bl	41f8 <getSoscConfig>
    4938:	4603      	mov	r3, r0
    493a:	4a42      	ldr	r2, [pc, #264]	; (4a44 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    493c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    493e:	f7ff fca7 	bl	4290 <getSpllConfig>
    4942:	4603      	mov	r3, r0
    4944:	4a40      	ldr	r2, [pc, #256]	; (4a48 <Clock_Ip_ClockInitializeObjects+0x200>)
    4946:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    4948:	2019      	movs	r0, #25
    494a:	f7ff fcfb 	bl	4344 <getSelectorConfig>
    494e:	4603      	mov	r3, r0
    4950:	4a3e      	ldr	r2, [pc, #248]	; (4a4c <Clock_Ip_ClockInitializeObjects+0x204>)
    4952:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    4954:	201a      	movs	r0, #26
    4956:	f7ff fcf5 	bl	4344 <getSelectorConfig>
    495a:	4603      	mov	r3, r0
    495c:	4a3c      	ldr	r2, [pc, #240]	; (4a50 <Clock_Ip_ClockInitializeObjects+0x208>)
    495e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    4960:	201b      	movs	r0, #27
    4962:	f7ff fcef 	bl	4344 <getSelectorConfig>
    4966:	4603      	mov	r3, r0
    4968:	4a3a      	ldr	r2, [pc, #232]	; (4a54 <Clock_Ip_ClockInitializeObjects+0x20c>)
    496a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    496c:	201d      	movs	r0, #29
    496e:	f7ff fd7b 	bl	4468 <getCoreDividerConfig>
    4972:	4603      	mov	r3, r0
    4974:	4a38      	ldr	r2, [pc, #224]	; (4a58 <Clock_Ip_ClockInitializeObjects+0x210>)
    4976:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    4978:	201e      	movs	r0, #30
    497a:	f7ff fd75 	bl	4468 <getCoreDividerConfig>
    497e:	4603      	mov	r3, r0
    4980:	4a36      	ldr	r2, [pc, #216]	; (4a5c <Clock_Ip_ClockInitializeObjects+0x214>)
    4982:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    4984:	201f      	movs	r0, #31
    4986:	f7ff fd6f 	bl	4468 <getCoreDividerConfig>
    498a:	4603      	mov	r3, r0
    498c:	4a34      	ldr	r2, [pc, #208]	; (4a60 <Clock_Ip_ClockInitializeObjects+0x218>)
    498e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    4990:	2021      	movs	r0, #33	; 0x21
    4992:	f7ff fe0f 	bl	45b4 <getBusDividerConfig>
    4996:	4603      	mov	r3, r0
    4998:	4a32      	ldr	r2, [pc, #200]	; (4a64 <Clock_Ip_ClockInitializeObjects+0x21c>)
    499a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    499c:	2022      	movs	r0, #34	; 0x22
    499e:	f7ff fe09 	bl	45b4 <getBusDividerConfig>
    49a2:	4603      	mov	r3, r0
    49a4:	4a30      	ldr	r2, [pc, #192]	; (4a68 <Clock_Ip_ClockInitializeObjects+0x220>)
    49a6:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    49a8:	2023      	movs	r0, #35	; 0x23
    49aa:	f7ff fe03 	bl	45b4 <getBusDividerConfig>
    49ae:	4603      	mov	r3, r0
    49b0:	4a2e      	ldr	r2, [pc, #184]	; (4a6c <Clock_Ip_ClockInitializeObjects+0x224>)
    49b2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    49b4:	2025      	movs	r0, #37	; 0x25
    49b6:	f7ff fea3 	bl	4700 <getSlowDividerConfig>
    49ba:	4603      	mov	r3, r0
    49bc:	4a2c      	ldr	r2, [pc, #176]	; (4a70 <Clock_Ip_ClockInitializeObjects+0x228>)
    49be:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    49c0:	2026      	movs	r0, #38	; 0x26
    49c2:	f7ff fe9d 	bl	4700 <getSlowDividerConfig>
    49c6:	4603      	mov	r3, r0
    49c8:	4a2a      	ldr	r2, [pc, #168]	; (4a74 <Clock_Ip_ClockInitializeObjects+0x22c>)
    49ca:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    49cc:	2027      	movs	r0, #39	; 0x27
    49ce:	f7ff fe97 	bl	4700 <getSlowDividerConfig>
    49d2:	4603      	mov	r3, r0
    49d4:	4a28      	ldr	r2, [pc, #160]	; (4a78 <Clock_Ip_ClockInitializeObjects+0x230>)
    49d6:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    49d8:	bf00      	nop
    49da:	b003      	add	sp, #12
    49dc:	f85d fb04 	ldr.w	pc, [sp], #4
    49e0:	1fff8ce4 	.word	0x1fff8ce4
    49e4:	00007890 	.word	0x00007890
    49e8:	00007edc 	.word	0x00007edc
    49ec:	1fff8bb0 	.word	0x1fff8bb0
    49f0:	00007850 	.word	0x00007850
    49f4:	00007e24 	.word	0x00007e24
    49f8:	1fff8bb4 	.word	0x1fff8bb4
    49fc:	00007860 	.word	0x00007860
    4a00:	00007e90 	.word	0x00007e90
    4a04:	1fff8bb8 	.word	0x1fff8bb8
    4a08:	000078a0 	.word	0x000078a0
    4a0c:	00007f08 	.word	0x00007f08
    4a10:	1fff8bbc 	.word	0x1fff8bbc
    4a14:	1fff8bf8 	.word	0x1fff8bf8
    4a18:	00007830 	.word	0x00007830
    4a1c:	00007de0 	.word	0x00007de0
    4a20:	1fff8bc0 	.word	0x1fff8bc0
    4a24:	1fff8bfc 	.word	0x1fff8bfc
    4a28:	1fff8bc4 	.word	0x1fff8bc4
    4a2c:	1fff8c00 	.word	0x1fff8c00
    4a30:	1fff8bc8 	.word	0x1fff8bc8
    4a34:	1fff8c04 	.word	0x1fff8c04
    4a38:	1fff8b19 	.word	0x1fff8b19
    4a3c:	1fff8b10 	.word	0x1fff8b10
    4a40:	1fff8bcc 	.word	0x1fff8bcc
    4a44:	1fff8bd0 	.word	0x1fff8bd0
    4a48:	1fff8bd4 	.word	0x1fff8bd4
    4a4c:	1fff8bd8 	.word	0x1fff8bd8
    4a50:	1fff8bdc 	.word	0x1fff8bdc
    4a54:	1fff8c08 	.word	0x1fff8c08
    4a58:	1fff8be0 	.word	0x1fff8be0
    4a5c:	1fff8be4 	.word	0x1fff8be4
    4a60:	1fff8c0c 	.word	0x1fff8c0c
    4a64:	1fff8be8 	.word	0x1fff8be8
    4a68:	1fff8bec 	.word	0x1fff8bec
    4a6c:	1fff8c10 	.word	0x1fff8c10
    4a70:	1fff8bf0 	.word	0x1fff8bf0
    4a74:	1fff8bf4 	.word	0x1fff8bf4
    4a78:	1fff8c14 	.word	0x1fff8c14

00004a7c <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    4a7c:	b500      	push	{lr}
    4a7e:	b083      	sub	sp, #12
    4a80:	9001      	str	r0, [sp, #4]
    4a82:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    4a84:	9b01      	ldr	r3, [sp, #4]
    4a86:	2b03      	cmp	r3, #3
    4a88:	f000 8090 	beq.w	4bac <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    4a8c:	9b01      	ldr	r3, [sp, #4]
    4a8e:	2b03      	cmp	r3, #3
    4a90:	f200 80d3 	bhi.w	4c3a <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    4a94:	9b01      	ldr	r3, [sp, #4]
    4a96:	2b00      	cmp	r3, #0
    4a98:	d040      	beq.n	4b1c <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    4a9a:	9b01      	ldr	r3, [sp, #4]
    4a9c:	3b01      	subs	r3, #1
    4a9e:	2b01      	cmp	r3, #1
    4aa0:	f200 80cb 	bhi.w	4c3a <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    4aa4:	9b00      	ldr	r3, [sp, #0]
    4aa6:	2b00      	cmp	r3, #0
    4aa8:	f040 80c9 	bne.w	4c3e <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    4aac:	4b68      	ldr	r3, [pc, #416]	; (4c50 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4aae:	2200      	movs	r2, #0
    4ab0:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    4ab2:	4b68      	ldr	r3, [pc, #416]	; (4c54 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    4ab4:	681b      	ldr	r3, [r3, #0]
    4ab6:	685b      	ldr	r3, [r3, #4]
    4ab8:	4a67      	ldr	r2, [pc, #412]	; (4c58 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    4aba:	6812      	ldr	r2, [r2, #0]
    4abc:	4610      	mov	r0, r2
    4abe:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    4ac0:	4b66      	ldr	r3, [pc, #408]	; (4c5c <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    4ac2:	681b      	ldr	r3, [r3, #0]
    4ac4:	681b      	ldr	r3, [r3, #0]
    4ac6:	4a66      	ldr	r2, [pc, #408]	; (4c60 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    4ac8:	6812      	ldr	r2, [r2, #0]
    4aca:	4610      	mov	r0, r2
    4acc:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    4ace:	4b65      	ldr	r3, [pc, #404]	; (4c64 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    4ad0:	681b      	ldr	r3, [r3, #0]
    4ad2:	681b      	ldr	r3, [r3, #0]
    4ad4:	4a64      	ldr	r2, [pc, #400]	; (4c68 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    4ad6:	6812      	ldr	r2, [r2, #0]
    4ad8:	4610      	mov	r0, r2
    4ada:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    4adc:	4b63      	ldr	r3, [pc, #396]	; (4c6c <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    4ade:	681b      	ldr	r3, [r3, #0]
    4ae0:	681b      	ldr	r3, [r3, #0]
    4ae2:	4a63      	ldr	r2, [pc, #396]	; (4c70 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    4ae4:	6812      	ldr	r2, [r2, #0]
    4ae6:	4610      	mov	r0, r2
    4ae8:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    4aea:	4b62      	ldr	r3, [pc, #392]	; (4c74 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4aec:	681b      	ldr	r3, [r3, #0]
    4aee:	691b      	ldr	r3, [r3, #16]
    4af0:	4a61      	ldr	r2, [pc, #388]	; (4c78 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4af2:	6812      	ldr	r2, [r2, #0]
    4af4:	6812      	ldr	r2, [r2, #0]
    4af6:	4610      	mov	r0, r2
    4af8:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    4afa:	4b60      	ldr	r3, [pc, #384]	; (4c7c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4afc:	681b      	ldr	r3, [r3, #0]
    4afe:	68db      	ldr	r3, [r3, #12]
    4b00:	4a5f      	ldr	r2, [pc, #380]	; (4c80 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4b02:	6812      	ldr	r2, [r2, #0]
    4b04:	6812      	ldr	r2, [r2, #0]
    4b06:	4610      	mov	r0, r2
    4b08:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    4b0a:	4b5e      	ldr	r3, [pc, #376]	; (4c84 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4b0c:	681b      	ldr	r3, [r3, #0]
    4b0e:	689b      	ldr	r3, [r3, #8]
    4b10:	4a5d      	ldr	r2, [pc, #372]	; (4c88 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4b12:	6812      	ldr	r2, [r2, #0]
    4b14:	6812      	ldr	r2, [r2, #0]
    4b16:	4610      	mov	r0, r2
    4b18:	4798      	blx	r3
            }
        }
        break;
    4b1a:	e090      	b.n	4c3e <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    4b1c:	9b00      	ldr	r3, [sp, #0]
    4b1e:	2b02      	cmp	r3, #2
    4b20:	f040 808f 	bne.w	4c42 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    4b24:	4b4a      	ldr	r3, [pc, #296]	; (4c50 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4b26:	2201      	movs	r2, #1
    4b28:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    4b2a:	4b56      	ldr	r3, [pc, #344]	; (4c84 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4b2c:	681b      	ldr	r3, [r3, #0]
    4b2e:	685b      	ldr	r3, [r3, #4]
    4b30:	4a55      	ldr	r2, [pc, #340]	; (4c88 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4b32:	6812      	ldr	r2, [r2, #0]
    4b34:	4610      	mov	r0, r2
    4b36:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    4b38:	4b50      	ldr	r3, [pc, #320]	; (4c7c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4b3a:	681b      	ldr	r3, [r3, #0]
    4b3c:	691b      	ldr	r3, [r3, #16]
    4b3e:	4a50      	ldr	r2, [pc, #320]	; (4c80 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4b40:	6812      	ldr	r2, [r2, #0]
    4b42:	4610      	mov	r0, r2
    4b44:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    4b46:	4b4d      	ldr	r3, [pc, #308]	; (4c7c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4b48:	681b      	ldr	r3, [r3, #0]
    4b4a:	689b      	ldr	r3, [r3, #8]
    4b4c:	4a4c      	ldr	r2, [pc, #304]	; (4c80 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4b4e:	6812      	ldr	r2, [r2, #0]
    4b50:	4610      	mov	r0, r2
    4b52:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    4b54:	4b47      	ldr	r3, [pc, #284]	; (4c74 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4b56:	681b      	ldr	r3, [r3, #0]
    4b58:	68db      	ldr	r3, [r3, #12]
    4b5a:	4a47      	ldr	r2, [pc, #284]	; (4c78 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4b5c:	6812      	ldr	r2, [r2, #0]
    4b5e:	4610      	mov	r0, r2
    4b60:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    4b62:	4b44      	ldr	r3, [pc, #272]	; (4c74 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4b64:	681b      	ldr	r3, [r3, #0]
    4b66:	689b      	ldr	r3, [r3, #8]
    4b68:	4a43      	ldr	r2, [pc, #268]	; (4c78 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4b6a:	6812      	ldr	r2, [r2, #0]
    4b6c:	6812      	ldr	r2, [r2, #0]
    4b6e:	4610      	mov	r0, r2
    4b70:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    4b72:	4b38      	ldr	r3, [pc, #224]	; (4c54 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    4b74:	681b      	ldr	r3, [r3, #0]
    4b76:	685b      	ldr	r3, [r3, #4]
    4b78:	4a44      	ldr	r2, [pc, #272]	; (4c8c <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    4b7a:	6812      	ldr	r2, [r2, #0]
    4b7c:	4610      	mov	r0, r2
    4b7e:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    4b80:	4b36      	ldr	r3, [pc, #216]	; (4c5c <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    4b82:	681b      	ldr	r3, [r3, #0]
    4b84:	681b      	ldr	r3, [r3, #0]
    4b86:	4a42      	ldr	r2, [pc, #264]	; (4c90 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    4b88:	6812      	ldr	r2, [r2, #0]
    4b8a:	4610      	mov	r0, r2
    4b8c:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    4b8e:	4b35      	ldr	r3, [pc, #212]	; (4c64 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    4b90:	681b      	ldr	r3, [r3, #0]
    4b92:	681b      	ldr	r3, [r3, #0]
    4b94:	4a3f      	ldr	r2, [pc, #252]	; (4c94 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    4b96:	6812      	ldr	r2, [r2, #0]
    4b98:	4610      	mov	r0, r2
    4b9a:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    4b9c:	4b33      	ldr	r3, [pc, #204]	; (4c6c <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    4b9e:	681b      	ldr	r3, [r3, #0]
    4ba0:	681b      	ldr	r3, [r3, #0]
    4ba2:	4a3d      	ldr	r2, [pc, #244]	; (4c98 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    4ba4:	6812      	ldr	r2, [r2, #0]
    4ba6:	4610      	mov	r0, r2
    4ba8:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    4baa:	e04a      	b.n	4c42 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    4bac:	9b00      	ldr	r3, [sp, #0]
    4bae:	2b02      	cmp	r3, #2
    4bb0:	d149      	bne.n	4c46 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    4bb2:	4b27      	ldr	r3, [pc, #156]	; (4c50 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4bb4:	2201      	movs	r2, #1
    4bb6:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    4bb8:	4b32      	ldr	r3, [pc, #200]	; (4c84 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4bba:	681b      	ldr	r3, [r3, #0]
    4bbc:	685b      	ldr	r3, [r3, #4]
    4bbe:	4a32      	ldr	r2, [pc, #200]	; (4c88 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4bc0:	6812      	ldr	r2, [r2, #0]
    4bc2:	4610      	mov	r0, r2
    4bc4:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    4bc6:	4b2d      	ldr	r3, [pc, #180]	; (4c7c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4bc8:	681b      	ldr	r3, [r3, #0]
    4bca:	691b      	ldr	r3, [r3, #16]
    4bcc:	4a2c      	ldr	r2, [pc, #176]	; (4c80 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4bce:	6812      	ldr	r2, [r2, #0]
    4bd0:	4610      	mov	r0, r2
    4bd2:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    4bd4:	4b29      	ldr	r3, [pc, #164]	; (4c7c <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4bd6:	681b      	ldr	r3, [r3, #0]
    4bd8:	689b      	ldr	r3, [r3, #8]
    4bda:	4a29      	ldr	r2, [pc, #164]	; (4c80 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4bdc:	6812      	ldr	r2, [r2, #0]
    4bde:	4610      	mov	r0, r2
    4be0:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    4be2:	4b24      	ldr	r3, [pc, #144]	; (4c74 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4be4:	681b      	ldr	r3, [r3, #0]
    4be6:	68db      	ldr	r3, [r3, #12]
    4be8:	4a23      	ldr	r2, [pc, #140]	; (4c78 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4bea:	6812      	ldr	r2, [r2, #0]
    4bec:	4610      	mov	r0, r2
    4bee:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    4bf0:	4b20      	ldr	r3, [pc, #128]	; (4c74 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4bf2:	681b      	ldr	r3, [r3, #0]
    4bf4:	689b      	ldr	r3, [r3, #8]
    4bf6:	4a20      	ldr	r2, [pc, #128]	; (4c78 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4bf8:	6812      	ldr	r2, [r2, #0]
    4bfa:	6812      	ldr	r2, [r2, #0]
    4bfc:	4610      	mov	r0, r2
    4bfe:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    4c00:	4b26      	ldr	r3, [pc, #152]	; (4c9c <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    4c02:	681b      	ldr	r3, [r3, #0]
    4c04:	685b      	ldr	r3, [r3, #4]
    4c06:	4a26      	ldr	r2, [pc, #152]	; (4ca0 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    4c08:	6812      	ldr	r2, [r2, #0]
    4c0a:	4610      	mov	r0, r2
    4c0c:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    4c0e:	4b25      	ldr	r3, [pc, #148]	; (4ca4 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    4c10:	681b      	ldr	r3, [r3, #0]
    4c12:	681b      	ldr	r3, [r3, #0]
    4c14:	4a24      	ldr	r2, [pc, #144]	; (4ca8 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    4c16:	6812      	ldr	r2, [r2, #0]
    4c18:	4610      	mov	r0, r2
    4c1a:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    4c1c:	4b23      	ldr	r3, [pc, #140]	; (4cac <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    4c1e:	681b      	ldr	r3, [r3, #0]
    4c20:	681b      	ldr	r3, [r3, #0]
    4c22:	4a23      	ldr	r2, [pc, #140]	; (4cb0 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    4c24:	6812      	ldr	r2, [r2, #0]
    4c26:	4610      	mov	r0, r2
    4c28:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    4c2a:	4b22      	ldr	r3, [pc, #136]	; (4cb4 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    4c2c:	681b      	ldr	r3, [r3, #0]
    4c2e:	681b      	ldr	r3, [r3, #0]
    4c30:	4a21      	ldr	r2, [pc, #132]	; (4cb8 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    4c32:	6812      	ldr	r2, [r2, #0]
    4c34:	4610      	mov	r0, r2
    4c36:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    4c38:	e005      	b.n	4c46 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    4c3a:	bf00      	nop
    4c3c:	e004      	b.n	4c48 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4c3e:	bf00      	nop
    4c40:	e002      	b.n	4c48 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4c42:	bf00      	nop
    4c44:	e000      	b.n	4c48 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4c46:	bf00      	nop
    }

}
    4c48:	bf00      	nop
    4c4a:	b003      	add	sp, #12
    4c4c:	f85d fb04 	ldr.w	pc, [sp], #4
    4c50:	1fff8b19 	.word	0x1fff8b19
    4c54:	1fff8bbc 	.word	0x1fff8bbc
    4c58:	1fff8bdc 	.word	0x1fff8bdc
    4c5c:	1fff8bc0 	.word	0x1fff8bc0
    4c60:	1fff8be4 	.word	0x1fff8be4
    4c64:	1fff8bc4 	.word	0x1fff8bc4
    4c68:	1fff8bec 	.word	0x1fff8bec
    4c6c:	1fff8bc8 	.word	0x1fff8bc8
    4c70:	1fff8bf4 	.word	0x1fff8bf4
    4c74:	1fff8bb0 	.word	0x1fff8bb0
    4c78:	1fff8bd4 	.word	0x1fff8bd4
    4c7c:	1fff8bb4 	.word	0x1fff8bb4
    4c80:	1fff8bd0 	.word	0x1fff8bd0
    4c84:	1fff8bb8 	.word	0x1fff8bb8
    4c88:	1fff8bcc 	.word	0x1fff8bcc
    4c8c:	1fff8bd8 	.word	0x1fff8bd8
    4c90:	1fff8be0 	.word	0x1fff8be0
    4c94:	1fff8be8 	.word	0x1fff8be8
    4c98:	1fff8bf0 	.word	0x1fff8bf0
    4c9c:	1fff8bf8 	.word	0x1fff8bf8
    4ca0:	1fff8c08 	.word	0x1fff8c08
    4ca4:	1fff8bfc 	.word	0x1fff8bfc
    4ca8:	1fff8c0c 	.word	0x1fff8c0c
    4cac:	1fff8c00 	.word	0x1fff8c00
    4cb0:	1fff8c10 	.word	0x1fff8c10
    4cb4:	1fff8c04 	.word	0x1fff8c04
    4cb8:	1fff8c14 	.word	0x1fff8c14

00004cbc <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    4cbc:	b500      	push	{lr}
    4cbe:	b083      	sub	sp, #12
    4cc0:	9001      	str	r0, [sp, #4]
    4cc2:	9100      	str	r1, [sp, #0]
    switch(Command)
    4cc4:	9b00      	ldr	r3, [sp, #0]
    4cc6:	2b04      	cmp	r3, #4
    4cc8:	d010      	beq.n	4cec <Clock_Ip_Command+0x30>
    4cca:	9b00      	ldr	r3, [sp, #0]
    4ccc:	2b04      	cmp	r3, #4
    4cce:	d811      	bhi.n	4cf4 <Clock_Ip_Command+0x38>
    4cd0:	9b00      	ldr	r3, [sp, #0]
    4cd2:	2b01      	cmp	r3, #1
    4cd4:	d006      	beq.n	4ce4 <Clock_Ip_Command+0x28>
    4cd6:	9b00      	ldr	r3, [sp, #0]
    4cd8:	2b02      	cmp	r3, #2
    4cda:	d10b      	bne.n	4cf4 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    4cdc:	9801      	ldr	r0, [sp, #4]
    4cde:	f7ff fdb3 	bl	4848 <Clock_Ip_ClockInitializeObjects>
            break;
    4ce2:	e008      	b.n	4cf6 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    4ce4:	9801      	ldr	r0, [sp, #4]
    4ce6:	f7ff f9db 	bl	40a0 <Clock_Ip_SpecificPlatformInitClock>
            break;
    4cea:	e004      	b.n	4cf6 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    4cec:	9801      	ldr	r0, [sp, #4]
    4cee:	f7ff f8ed 	bl	3ecc <DisableSafeClock>
            break;
    4cf2:	e000      	b.n	4cf6 <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    4cf4:	bf00      	nop
    }
}
    4cf6:	bf00      	nop
    4cf8:	b003      	add	sp, #12
    4cfa:	f85d fb04 	ldr.w	pc, [sp], #4
    4cfe:	bf00      	nop

00004d00 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    4d00:	b500      	push	{lr}
    4d02:	b085      	sub	sp, #20
    4d04:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    4d06:	4a20      	ldr	r2, [pc, #128]	; (4d88 <Mcu_Init+0x88>)
    4d08:	9b01      	ldr	r3, [sp, #4]
    4d0a:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    4d0c:	2300      	movs	r3, #0
    4d0e:	9303      	str	r3, [sp, #12]
    4d10:	e010      	b.n	4d34 <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    4d12:	4b1d      	ldr	r3, [pc, #116]	; (4d88 <Mcu_Init+0x88>)
    4d14:	681b      	ldr	r3, [r3, #0]
    4d16:	6919      	ldr	r1, [r3, #16]
    4d18:	9a03      	ldr	r2, [sp, #12]
    4d1a:	4613      	mov	r3, r2
    4d1c:	005b      	lsls	r3, r3, #1
    4d1e:	4413      	add	r3, r2
    4d20:	009b      	lsls	r3, r3, #2
    4d22:	440b      	add	r3, r1
    4d24:	681b      	ldr	r3, [r3, #0]
    4d26:	9a03      	ldr	r2, [sp, #12]
    4d28:	b2d1      	uxtb	r1, r2
    4d2a:	4a18      	ldr	r2, [pc, #96]	; (4d8c <Mcu_Init+0x8c>)
    4d2c:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    4d2e:	9b03      	ldr	r3, [sp, #12]
    4d30:	3301      	adds	r3, #1
    4d32:	9303      	str	r3, [sp, #12]
    4d34:	4b14      	ldr	r3, [pc, #80]	; (4d88 <Mcu_Init+0x88>)
    4d36:	681b      	ldr	r3, [r3, #0]
    4d38:	689b      	ldr	r3, [r3, #8]
    4d3a:	9a03      	ldr	r2, [sp, #12]
    4d3c:	429a      	cmp	r2, r3
    4d3e:	d3e8      	bcc.n	4d12 <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    4d40:	2300      	movs	r3, #0
    4d42:	9303      	str	r3, [sp, #12]
    4d44:	e010      	b.n	4d68 <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    4d46:	4b10      	ldr	r3, [pc, #64]	; (4d88 <Mcu_Init+0x88>)
    4d48:	681b      	ldr	r3, [r3, #0]
    4d4a:	6959      	ldr	r1, [r3, #20]
    4d4c:	9a03      	ldr	r2, [sp, #12]
    4d4e:	4613      	mov	r3, r2
    4d50:	01db      	lsls	r3, r3, #7
    4d52:	1a9b      	subs	r3, r3, r2
    4d54:	00db      	lsls	r3, r3, #3
    4d56:	440b      	add	r3, r1
    4d58:	681b      	ldr	r3, [r3, #0]
    4d5a:	9a03      	ldr	r2, [sp, #12]
    4d5c:	b2d1      	uxtb	r1, r2
    4d5e:	4a0c      	ldr	r2, [pc, #48]	; (4d90 <Mcu_Init+0x90>)
    4d60:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    4d62:	9b03      	ldr	r3, [sp, #12]
    4d64:	3301      	adds	r3, #1
    4d66:	9303      	str	r3, [sp, #12]
    4d68:	4b07      	ldr	r3, [pc, #28]	; (4d88 <Mcu_Init+0x88>)
    4d6a:	681b      	ldr	r3, [r3, #0]
    4d6c:	68db      	ldr	r3, [r3, #12]
    4d6e:	9a03      	ldr	r2, [sp, #12]
    4d70:	429a      	cmp	r2, r3
    4d72:	d3e8      	bcc.n	4d46 <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    4d74:	4b04      	ldr	r3, [pc, #16]	; (4d88 <Mcu_Init+0x88>)
    4d76:	681b      	ldr	r3, [r3, #0]
    4d78:	699b      	ldr	r3, [r3, #24]
    4d7a:	4618      	mov	r0, r3
    4d7c:	f000 f88a 	bl	4e94 <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    4d80:	bf00      	nop
    4d82:	b005      	add	sp, #20
    4d84:	f85d fb04 	ldr.w	pc, [sp], #4
    4d88:	1fff8cf0 	.word	0x1fff8cf0
    4d8c:	1fff8cec 	.word	0x1fff8cec
    4d90:	1fff8ce8 	.word	0x1fff8ce8

00004d94 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    4d94:	b084      	sub	sp, #16
    4d96:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    4d98:	2301      	movs	r3, #1
    4d9a:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    4d9e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    4da2:	4618      	mov	r0, r3
    4da4:	b004      	add	sp, #16
    4da6:	4770      	bx	lr

00004da8 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    4da8:	b500      	push	{lr}
    4daa:	b085      	sub	sp, #20
    4dac:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    4dae:	4a0e      	ldr	r2, [pc, #56]	; (4de8 <Mcu_InitClock+0x40>)
    4db0:	9b01      	ldr	r3, [sp, #4]
    4db2:	4413      	add	r3, r2
    4db4:	781b      	ldrb	r3, [r3, #0]
    4db6:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    4dba:	4b0c      	ldr	r3, [pc, #48]	; (4dec <Mcu_InitClock+0x44>)
    4dbc:	681b      	ldr	r3, [r3, #0]
    4dbe:	6959      	ldr	r1, [r3, #20]
    4dc0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    4dc4:	4613      	mov	r3, r2
    4dc6:	01db      	lsls	r3, r3, #7
    4dc8:	1a9b      	subs	r3, r3, r2
    4dca:	00db      	lsls	r3, r3, #3
    4dcc:	440b      	add	r3, r1
    4dce:	4618      	mov	r0, r3
    4dd0:	f000 f86a 	bl	4ea8 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    4dd4:	2300      	movs	r3, #0
    4dd6:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    4dda:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    4dde:	4618      	mov	r0, r3
    4de0:	b005      	add	sp, #20
    4de2:	f85d fb04 	ldr.w	pc, [sp], #4
    4de6:	bf00      	nop
    4de8:	1fff8ce8 	.word	0x1fff8ce8
    4dec:	1fff8cf0 	.word	0x1fff8cf0

00004df0 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    4df0:	b500      	push	{lr}
    4df2:	b085      	sub	sp, #20
    4df4:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    4df6:	4a0d      	ldr	r2, [pc, #52]	; (4e2c <Mcu_SetMode+0x3c>)
    4df8:	9b01      	ldr	r3, [sp, #4]
    4dfa:	4413      	add	r3, r2
    4dfc:	781b      	ldrb	r3, [r3, #0]
    4dfe:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    4e02:	f001 fb27 	bl	6454 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    4e06:	4b0a      	ldr	r3, [pc, #40]	; (4e30 <Mcu_SetMode+0x40>)
    4e08:	681b      	ldr	r3, [r3, #0]
    4e0a:	6919      	ldr	r1, [r3, #16]
    4e0c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    4e10:	4613      	mov	r3, r2
    4e12:	005b      	lsls	r3, r3, #1
    4e14:	4413      	add	r3, r2
    4e16:	009b      	lsls	r3, r3, #2
    4e18:	440b      	add	r3, r1
    4e1a:	4618      	mov	r0, r3
    4e1c:	f000 f84e 	bl	4ebc <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    4e20:	f001 fb44 	bl	64ac <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    4e24:	bf00      	nop
    4e26:	b005      	add	sp, #20
    4e28:	f85d fb04 	ldr.w	pc, [sp], #4
    4e2c:	1fff8cec 	.word	0x1fff8cec
    4e30:	1fff8cf0 	.word	0x1fff8cf0

00004e34 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    4e34:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    4e36:	2302      	movs	r3, #2
    4e38:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    4e3a:	9b01      	ldr	r3, [sp, #4]
}
    4e3c:	4618      	mov	r0, r3
    4e3e:	b002      	add	sp, #8
    4e40:	4770      	bx	lr

00004e42 <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    4e42:	b500      	push	{lr}
    4e44:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    4e46:	f000 f843 	bl	4ed0 <Mcu_Ipw_GetResetReason>
    4e4a:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    4e4c:	9b01      	ldr	r3, [sp, #4]
}
    4e4e:	4618      	mov	r0, r3
    4e50:	b003      	add	sp, #12
    4e52:	f85d fb04 	ldr.w	pc, [sp], #4

00004e56 <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    4e56:	b500      	push	{lr}
    4e58:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    4e5a:	f000 f83f 	bl	4edc <Mcu_Ipw_GetResetRawValue>
    4e5e:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    4e60:	9b01      	ldr	r3, [sp, #4]
}
    4e62:	4618      	mov	r0, r3
    4e64:	b003      	add	sp, #12
    4e66:	f85d fb04 	ldr.w	pc, [sp], #4

00004e6a <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    4e6a:	b500      	push	{lr}
    4e6c:	b083      	sub	sp, #12
    4e6e:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    4e70:	9801      	ldr	r0, [sp, #4]
    4e72:	f000 f839 	bl	4ee8 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    4e76:	bf00      	nop
    4e78:	b003      	add	sp, #12
    4e7a:	f85d fb04 	ldr.w	pc, [sp], #4

00004e7e <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    4e7e:	b082      	sub	sp, #8
    4e80:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    4e82:	4b03      	ldr	r3, [pc, #12]	; (4e90 <Mcu_ClkSrcFailureNotification+0x12>)
    4e84:	681b      	ldr	r3, [r3, #0]
    4e86:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    4e88:	bf00      	nop
    4e8a:	b002      	add	sp, #8
    4e8c:	4770      	bx	lr
    4e8e:	bf00      	nop
    4e90:	1fff8cf0 	.word	0x1fff8cf0

00004e94 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    4e94:	b500      	push	{lr}
    4e96:	b083      	sub	sp, #12
    4e98:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    4e9a:	9801      	ldr	r0, [sp, #4]
    4e9c:	f000 f882 	bl	4fa4 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    4ea0:	bf00      	nop
    4ea2:	b003      	add	sp, #12
    4ea4:	f85d fb04 	ldr.w	pc, [sp], #4

00004ea8 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    4ea8:	b500      	push	{lr}
    4eaa:	b083      	sub	sp, #12
    4eac:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    4eae:	9801      	ldr	r0, [sp, #4]
    4eb0:	f7fc fc6a 	bl	1788 <Clock_Ip_InitClock>
}
    4eb4:	bf00      	nop
    4eb6:	b003      	add	sp, #12
    4eb8:	f85d fb04 	ldr.w	pc, [sp], #4

00004ebc <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    4ebc:	b500      	push	{lr}
    4ebe:	b083      	sub	sp, #12
    4ec0:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    4ec2:	9801      	ldr	r0, [sp, #4]
    4ec4:	f000 f820 	bl	4f08 <Power_Ip_SetMode>
}
    4ec8:	bf00      	nop
    4eca:	b003      	add	sp, #12
    4ecc:	f85d fb04 	ldr.w	pc, [sp], #4

00004ed0 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    4ed0:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    4ed2:	f000 f84f 	bl	4f74 <Power_Ip_GetResetReason>
    4ed6:	4603      	mov	r3, r0
}
    4ed8:	4618      	mov	r0, r3
    4eda:	bd08      	pop	{r3, pc}

00004edc <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    4edc:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    4ede:	f000 f857 	bl	4f90 <Power_Ip_GetResetRawValue>
    4ee2:	4603      	mov	r3, r0
}
    4ee4:	4618      	mov	r0, r3
    4ee6:	bd08      	pop	{r3, pc}

00004ee8 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    4ee8:	b500      	push	{lr}
    4eea:	b083      	sub	sp, #12
    4eec:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    4eee:	9b01      	ldr	r3, [sp, #4]
    4ef0:	2b00      	cmp	r3, #0
    4ef2:	d102      	bne.n	4efa <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    4ef4:	f000 f86c 	bl	4fd0 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    4ef8:	e001      	b.n	4efe <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    4efa:	f000 f86e 	bl	4fda <Power_Ip_EnableSleepOnExit>
}
    4efe:	bf00      	nop
    4f00:	b003      	add	sp, #12
    4f02:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00004f08 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    4f08:	b500      	push	{lr}
    4f0a:	b085      	sub	sp, #20
    4f0c:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    4f0e:	9b01      	ldr	r3, [sp, #4]
    4f10:	685b      	ldr	r3, [r3, #4]
    4f12:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    4f14:	9802      	ldr	r0, [sp, #8]
    4f16:	f000 f9f5 	bl	5304 <Power_Ip_SMC_ModeCheckEntry>
    4f1a:	4603      	mov	r3, r0
    4f1c:	2b00      	cmp	r3, #0
    4f1e:	d002      	beq.n	4f26 <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4f20:	2301      	movs	r3, #1
    4f22:	9303      	str	r3, [sp, #12]
    4f24:	e003      	b.n	4f2e <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    4f26:	9801      	ldr	r0, [sp, #4]
    4f28:	f000 fa1e 	bl	5368 <Power_Ip_SMC_ModeConfig>
    4f2c:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    4f2e:	9b03      	ldr	r3, [sp, #12]
    4f30:	2b01      	cmp	r3, #1
    4f32:	d103      	bne.n	4f3c <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    4f34:	21ff      	movs	r1, #255	; 0xff
    4f36:	2003      	movs	r0, #3
    4f38:	f000 f8f4 	bl	5124 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    4f3c:	bf00      	nop
    4f3e:	b005      	add	sp, #20
    4f40:	f85d fb04 	ldr.w	pc, [sp], #4

00004f44 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    4f44:	b084      	sub	sp, #16
    4f46:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    4f48:	230c      	movs	r3, #12
    4f4a:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    4f4c:	4a08      	ldr	r2, [pc, #32]	; (4f70 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    4f4e:	9b01      	ldr	r3, [sp, #4]
    4f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4f54:	2b0e      	cmp	r3, #14
    4f56:	d805      	bhi.n	4f64 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    4f58:	4a05      	ldr	r2, [pc, #20]	; (4f70 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    4f5a:	9b01      	ldr	r3, [sp, #4]
    4f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4f60:	9303      	str	r3, [sp, #12]
    4f62:	e001      	b.n	4f68 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    4f64:	230c      	movs	r3, #12
    4f66:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    4f68:	9b03      	ldr	r3, [sp, #12]
}
    4f6a:	4618      	mov	r0, r3
    4f6c:	b004      	add	sp, #16
    4f6e:	4770      	bx	lr
    4f70:	00007f7c 	.word	0x00007f7c

00004f74 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    4f74:	b500      	push	{lr}
    4f76:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    4f78:	f000 f940 	bl	51fc <Power_Ip_RCM_GetResetReason>
    4f7c:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    4f7e:	9801      	ldr	r0, [sp, #4]
    4f80:	f7ff ffe0 	bl	4f44 <Power_Ip_ConvertIntergeToResetType>
    4f84:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    4f86:	9b00      	ldr	r3, [sp, #0]
}
    4f88:	4618      	mov	r0, r3
    4f8a:	b003      	add	sp, #12
    4f8c:	f85d fb04 	ldr.w	pc, [sp], #4

00004f90 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    4f90:	b500      	push	{lr}
    4f92:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    4f94:	f000 f98a 	bl	52ac <Power_Ip_RCM_GetResetRawValue>
    4f98:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    4f9a:	9b01      	ldr	r3, [sp, #4]
}
    4f9c:	4618      	mov	r0, r3
    4f9e:	b003      	add	sp, #12
    4fa0:	f85d fb04 	ldr.w	pc, [sp], #4

00004fa4 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    4fa4:	b500      	push	{lr}
    4fa6:	b083      	sub	sp, #12
    4fa8:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    4faa:	9b01      	ldr	r3, [sp, #4]
    4fac:	681b      	ldr	r3, [r3, #0]
    4fae:	4618      	mov	r0, r3
    4fb0:	f000 f90e 	bl	51d0 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    4fb4:	9b01      	ldr	r3, [sp, #4]
    4fb6:	685b      	ldr	r3, [r3, #4]
    4fb8:	4618      	mov	r0, r3
    4fba:	f000 f86d 	bl	5098 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    4fbe:	9b01      	ldr	r3, [sp, #4]
    4fc0:	689b      	ldr	r3, [r3, #8]
    4fc2:	4618      	mov	r0, r3
    4fc4:	f000 f990 	bl	52e8 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    4fc8:	bf00      	nop
    4fca:	b003      	add	sp, #12
    4fcc:	f85d fb04 	ldr.w	pc, [sp], #4

00004fd0 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    4fd0:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    4fd2:	f000 f811 	bl	4ff8 <Power_Ip_CM4_DisableSleepOnExit>
}
    4fd6:	bf00      	nop
    4fd8:	bd08      	pop	{r3, pc}

00004fda <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    4fda:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    4fdc:	f000 f820 	bl	5020 <Power_Ip_CM4_EnableSleepOnExit>
}
    4fe0:	bf00      	nop
    4fe2:	bd08      	pop	{r3, pc}

00004fe4 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    4fe4:	b082      	sub	sp, #8
    4fe6:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    4fe8:	4a02      	ldr	r2, [pc, #8]	; (4ff4 <Power_Ip_InstallNotificationsCallback+0x10>)
    4fea:	9b01      	ldr	r3, [sp, #4]
    4fec:	6013      	str	r3, [r2, #0]
}
    4fee:	bf00      	nop
    4ff0:	b002      	add	sp, #8
    4ff2:	4770      	bx	lr
    4ff4:	1fff8b1c 	.word	0x1fff8b1c

00004ff8 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    4ff8:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4ffa:	2300      	movs	r3, #0
    4ffc:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4ffe:	4b07      	ldr	r3, [pc, #28]	; (501c <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5000:	681b      	ldr	r3, [r3, #0]
    5002:	685b      	ldr	r3, [r3, #4]
    5004:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    5006:	9b01      	ldr	r3, [sp, #4]
    5008:	f023 0302 	bic.w	r3, r3, #2
    500c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    500e:	4b03      	ldr	r3, [pc, #12]	; (501c <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5010:	681b      	ldr	r3, [r3, #0]
    5012:	9a01      	ldr	r2, [sp, #4]
    5014:	605a      	str	r2, [r3, #4]
}
    5016:	bf00      	nop
    5018:	b002      	add	sp, #8
    501a:	4770      	bx	lr
    501c:	1fff8b20 	.word	0x1fff8b20

00005020 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    5020:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5022:	2300      	movs	r3, #0
    5024:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5026:	4b07      	ldr	r3, [pc, #28]	; (5044 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5028:	681b      	ldr	r3, [r3, #0]
    502a:	685b      	ldr	r3, [r3, #4]
    502c:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    502e:	9b01      	ldr	r3, [sp, #4]
    5030:	f043 0302 	orr.w	r3, r3, #2
    5034:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5036:	4b03      	ldr	r3, [pc, #12]	; (5044 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5038:	681b      	ldr	r3, [r3, #0]
    503a:	9a01      	ldr	r2, [sp, #4]
    503c:	605a      	str	r2, [r3, #4]
}
    503e:	bf00      	nop
    5040:	b002      	add	sp, #8
    5042:	4770      	bx	lr
    5044:	1fff8b20 	.word	0x1fff8b20

00005048 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    5048:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    504a:	2300      	movs	r3, #0
    504c:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    504e:	4b07      	ldr	r3, [pc, #28]	; (506c <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5050:	681b      	ldr	r3, [r3, #0]
    5052:	685b      	ldr	r3, [r3, #4]
    5054:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    5056:	9b01      	ldr	r3, [sp, #4]
    5058:	f043 0304 	orr.w	r3, r3, #4
    505c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    505e:	4b03      	ldr	r3, [pc, #12]	; (506c <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5060:	681b      	ldr	r3, [r3, #0]
    5062:	9a01      	ldr	r2, [sp, #4]
    5064:	605a      	str	r2, [r3, #4]
}
    5066:	bf00      	nop
    5068:	b002      	add	sp, #8
    506a:	4770      	bx	lr
    506c:	1fff8b20 	.word	0x1fff8b20

00005070 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    5070:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5072:	2300      	movs	r3, #0
    5074:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5076:	4b07      	ldr	r3, [pc, #28]	; (5094 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5078:	681b      	ldr	r3, [r3, #0]
    507a:	685b      	ldr	r3, [r3, #4]
    507c:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    507e:	9b01      	ldr	r3, [sp, #4]
    5080:	f023 0304 	bic.w	r3, r3, #4
    5084:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5086:	4b03      	ldr	r3, [pc, #12]	; (5094 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5088:	681b      	ldr	r3, [r3, #0]
    508a:	9a01      	ldr	r2, [sp, #4]
    508c:	605a      	str	r2, [r3, #4]
}
    508e:	bf00      	nop
    5090:	b002      	add	sp, #8
    5092:	4770      	bx	lr
    5094:	1fff8b20 	.word	0x1fff8b20

00005098 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    5098:	b084      	sub	sp, #16
    509a:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    509c:	4b20      	ldr	r3, [pc, #128]	; (5120 <Power_Ip_PMC_PowerInit+0x88>)
    509e:	781b      	ldrb	r3, [r3, #0]
    50a0:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    50a4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    50a8:	f003 030f 	and.w	r3, r3, #15
    50ac:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    50b0:	9b01      	ldr	r3, [sp, #4]
    50b2:	781a      	ldrb	r2, [r3, #0]
    50b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    50b8:	4313      	orrs	r3, r2
    50ba:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    50be:	4a18      	ldr	r2, [pc, #96]	; (5120 <Power_Ip_PMC_PowerInit+0x88>)
    50c0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    50c4:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    50c6:	4b16      	ldr	r3, [pc, #88]	; (5120 <Power_Ip_PMC_PowerInit+0x88>)
    50c8:	785b      	ldrb	r3, [r3, #1]
    50ca:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    50ce:	f89d 300f 	ldrb.w	r3, [sp, #15]
    50d2:	f003 031f 	and.w	r3, r3, #31
    50d6:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    50da:	9b01      	ldr	r3, [sp, #4]
    50dc:	785a      	ldrb	r2, [r3, #1]
    50de:	f89d 300f 	ldrb.w	r3, [sp, #15]
    50e2:	4313      	orrs	r3, r2
    50e4:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    50e8:	4a0d      	ldr	r2, [pc, #52]	; (5120 <Power_Ip_PMC_PowerInit+0x88>)
    50ea:	f89d 300f 	ldrb.w	r3, [sp, #15]
    50ee:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    50f0:	4b0b      	ldr	r3, [pc, #44]	; (5120 <Power_Ip_PMC_PowerInit+0x88>)
    50f2:	789b      	ldrb	r3, [r3, #2]
    50f4:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    50f8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    50fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
    5100:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    5104:	9b01      	ldr	r3, [sp, #4]
    5106:	789a      	ldrb	r2, [r3, #2]
    5108:	f89d 300f 	ldrb.w	r3, [sp, #15]
    510c:	4313      	orrs	r3, r2
    510e:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    5112:	4a03      	ldr	r2, [pc, #12]	; (5120 <Power_Ip_PMC_PowerInit+0x88>)
    5114:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5118:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    511a:	bf00      	nop
    511c:	b004      	add	sp, #16
    511e:	4770      	bx	lr
    5120:	4007d000 	.word	0x4007d000

00005124 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5124:	b500      	push	{lr}
    5126:	b083      	sub	sp, #12
    5128:	9001      	str	r0, [sp, #4]
    512a:	460b      	mov	r3, r1
    512c:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    5130:	4b05      	ldr	r3, [pc, #20]	; (5148 <Power_Ip_ReportPowerErrors+0x24>)
    5132:	681b      	ldr	r3, [r3, #0]
    5134:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5138:	4611      	mov	r1, r2
    513a:	9801      	ldr	r0, [sp, #4]
    513c:	4798      	blx	r3
}
    513e:	bf00      	nop
    5140:	b003      	add	sp, #12
    5142:	f85d fb04 	ldr.w	pc, [sp], #4
    5146:	bf00      	nop
    5148:	1fff8b1c 	.word	0x1fff8b1c

0000514c <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    514c:	b082      	sub	sp, #8
    514e:	9001      	str	r0, [sp, #4]
    5150:	460b      	mov	r3, r1
    5152:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    5156:	bf00      	nop
    5158:	b002      	add	sp, #8
    515a:	4770      	bx	lr

0000515c <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    515c:	b500      	push	{lr}
    515e:	b085      	sub	sp, #20
    5160:	9003      	str	r0, [sp, #12]
    5162:	9102      	str	r1, [sp, #8]
    5164:	9201      	str	r2, [sp, #4]
    5166:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    5168:	2000      	movs	r0, #0
    516a:	f7fc f83c 	bl	11e6 <OsIf_GetCounter>
    516e:	4602      	mov	r2, r0
    5170:	9b03      	ldr	r3, [sp, #12]
    5172:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    5174:	9b02      	ldr	r3, [sp, #8]
    5176:	2200      	movs	r2, #0
    5178:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    517a:	2100      	movs	r1, #0
    517c:	9800      	ldr	r0, [sp, #0]
    517e:	f7fc f87e 	bl	127e <OsIf_MicrosToTicks>
    5182:	4602      	mov	r2, r0
    5184:	9b01      	ldr	r3, [sp, #4]
    5186:	601a      	str	r2, [r3, #0]
}
    5188:	bf00      	nop
    518a:	b005      	add	sp, #20
    518c:	f85d fb04 	ldr.w	pc, [sp], #4

00005190 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    5190:	b500      	push	{lr}
    5192:	b087      	sub	sp, #28
    5194:	9003      	str	r0, [sp, #12]
    5196:	9102      	str	r1, [sp, #8]
    5198:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    519a:	2300      	movs	r3, #0
    519c:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    51a0:	2100      	movs	r1, #0
    51a2:	9803      	ldr	r0, [sp, #12]
    51a4:	f7fc f838 	bl	1218 <OsIf_GetElapsed>
    51a8:	4602      	mov	r2, r0
    51aa:	9b02      	ldr	r3, [sp, #8]
    51ac:	681b      	ldr	r3, [r3, #0]
    51ae:	441a      	add	r2, r3
    51b0:	9b02      	ldr	r3, [sp, #8]
    51b2:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    51b4:	9b02      	ldr	r3, [sp, #8]
    51b6:	681b      	ldr	r3, [r3, #0]
    51b8:	9a01      	ldr	r2, [sp, #4]
    51ba:	429a      	cmp	r2, r3
    51bc:	d802      	bhi.n	51c4 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    51be:	2301      	movs	r3, #1
    51c0:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    51c4:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    51c8:	4618      	mov	r0, r3
    51ca:	b007      	add	sp, #28
    51cc:	f85d fb04 	ldr.w	pc, [sp], #4

000051d0 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    51d0:	b082      	sub	sp, #8
    51d2:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    51d4:	9b01      	ldr	r3, [sp, #4]
    51d6:	681a      	ldr	r2, [r3, #0]
    51d8:	4907      	ldr	r1, [pc, #28]	; (51f8 <Power_Ip_RCM_ResetInit+0x28>)
    51da:	f641 7307 	movw	r3, #7943	; 0x1f07
    51de:	4013      	ands	r3, r2
    51e0:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    51e2:	9b01      	ldr	r3, [sp, #4]
    51e4:	685a      	ldr	r2, [r3, #4]
    51e6:	4904      	ldr	r1, [pc, #16]	; (51f8 <Power_Ip_RCM_ResetInit+0x28>)
    51e8:	f642 73ff 	movw	r3, #12287	; 0x2fff
    51ec:	4013      	ands	r3, r2
    51ee:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    51f0:	bf00      	nop
    51f2:	b002      	add	sp, #8
    51f4:	4770      	bx	lr
    51f6:	bf00      	nop
    51f8:	4007f000 	.word	0x4007f000

000051fc <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    51fc:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    51fe:	230c      	movs	r3, #12
    5200:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    5202:	2300      	movs	r3, #0
    5204:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    5206:	2300      	movs	r3, #0
    5208:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    520a:	2300      	movs	r3, #0
    520c:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    520e:	4b25      	ldr	r3, [pc, #148]	; (52a4 <Power_Ip_RCM_GetResetReason+0xa8>)
    5210:	699a      	ldr	r2, [r3, #24]
    5212:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5216:	4013      	ands	r3, r2
    5218:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    521a:	9b03      	ldr	r3, [sp, #12]
    521c:	2b00      	cmp	r3, #0
    521e:	d008      	beq.n	5232 <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5220:	4920      	ldr	r1, [pc, #128]	; (52a4 <Power_Ip_RCM_GetResetReason+0xa8>)
    5222:	9a03      	ldr	r2, [sp, #12]
    5224:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5228:	4013      	ands	r3, r2
    522a:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    522c:	4a1e      	ldr	r2, [pc, #120]	; (52a8 <Power_Ip_RCM_GetResetReason+0xac>)
    522e:	9b03      	ldr	r3, [sp, #12]
    5230:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    5232:	4b1d      	ldr	r3, [pc, #116]	; (52a8 <Power_Ip_RCM_GetResetReason+0xac>)
    5234:	681b      	ldr	r3, [r3, #0]
    5236:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    5238:	9a02      	ldr	r2, [sp, #8]
    523a:	f642 73ee 	movw	r3, #12270	; 0x2fee
    523e:	4013      	ands	r3, r2
    5240:	2b82      	cmp	r3, #130	; 0x82
    5242:	d102      	bne.n	524a <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    5244:	2305      	movs	r3, #5
    5246:	9307      	str	r3, [sp, #28]
    5248:	e027      	b.n	529a <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    524a:	2300      	movs	r3, #0
    524c:	9306      	str	r3, [sp, #24]
    524e:	e021      	b.n	5294 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    5250:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5254:	9b06      	ldr	r3, [sp, #24]
    5256:	fa22 f303 	lsr.w	r3, r2, r3
    525a:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    525c:	9a01      	ldr	r2, [sp, #4]
    525e:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    5262:	4013      	ands	r3, r2
    5264:	2b00      	cmp	r3, #0
    5266:	d012      	beq.n	528e <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    5268:	9a01      	ldr	r2, [sp, #4]
    526a:	9b02      	ldr	r3, [sp, #8]
    526c:	4013      	ands	r3, r2
    526e:	2b00      	cmp	r3, #0
    5270:	d00a      	beq.n	5288 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    5272:	9b05      	ldr	r3, [sp, #20]
    5274:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    5276:	9b04      	ldr	r3, [sp, #16]
    5278:	3301      	adds	r3, #1
    527a:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    527c:	9b04      	ldr	r3, [sp, #16]
    527e:	2b01      	cmp	r3, #1
    5280:	d902      	bls.n	5288 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    5282:	230d      	movs	r3, #13
    5284:	9307      	str	r3, [sp, #28]
                        break;
    5286:	e008      	b.n	529a <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    5288:	9b05      	ldr	r3, [sp, #20]
    528a:	3301      	adds	r3, #1
    528c:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    528e:	9b06      	ldr	r3, [sp, #24]
    5290:	3301      	adds	r3, #1
    5292:	9306      	str	r3, [sp, #24]
    5294:	9b06      	ldr	r3, [sp, #24]
    5296:	2b1f      	cmp	r3, #31
    5298:	d9da      	bls.n	5250 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    529a:	9b07      	ldr	r3, [sp, #28]
}
    529c:	4618      	mov	r0, r3
    529e:	b008      	add	sp, #32
    52a0:	4770      	bx	lr
    52a2:	bf00      	nop
    52a4:	4007f000 	.word	0x4007f000
    52a8:	1fff8cf4 	.word	0x1fff8cf4

000052ac <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    52ac:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    52ae:	4b0c      	ldr	r3, [pc, #48]	; (52e0 <Power_Ip_RCM_GetResetRawValue+0x34>)
    52b0:	699a      	ldr	r2, [r3, #24]
    52b2:	f642 73ee 	movw	r3, #12270	; 0x2fee
    52b6:	4013      	ands	r3, r2
    52b8:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    52ba:	9b01      	ldr	r3, [sp, #4]
    52bc:	2b00      	cmp	r3, #0
    52be:	d008      	beq.n	52d2 <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    52c0:	4907      	ldr	r1, [pc, #28]	; (52e0 <Power_Ip_RCM_GetResetRawValue+0x34>)
    52c2:	9a01      	ldr	r2, [sp, #4]
    52c4:	f642 73ee 	movw	r3, #12270	; 0x2fee
    52c8:	4013      	ands	r3, r2
    52ca:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    52cc:	4a05      	ldr	r2, [pc, #20]	; (52e4 <Power_Ip_RCM_GetResetRawValue+0x38>)
    52ce:	9b01      	ldr	r3, [sp, #4]
    52d0:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    52d2:	4b04      	ldr	r3, [pc, #16]	; (52e4 <Power_Ip_RCM_GetResetRawValue+0x38>)
    52d4:	681b      	ldr	r3, [r3, #0]
    52d6:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    52d8:	9b00      	ldr	r3, [sp, #0]
}
    52da:	4618      	mov	r0, r3
    52dc:	b002      	add	sp, #8
    52de:	4770      	bx	lr
    52e0:	4007f000 	.word	0x4007f000
    52e4:	1fff8cf4 	.word	0x1fff8cf4

000052e8 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    52e8:	b082      	sub	sp, #8
    52ea:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    52ec:	9b01      	ldr	r3, [sp, #4]
    52ee:	681b      	ldr	r3, [r3, #0]
    52f0:	4a03      	ldr	r2, [pc, #12]	; (5300 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    52f2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    52f6:	6093      	str	r3, [r2, #8]
}
    52f8:	bf00      	nop
    52fa:	b002      	add	sp, #8
    52fc:	4770      	bx	lr
    52fe:	bf00      	nop
    5300:	4007e000 	.word	0x4007e000

00005304 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    5304:	b084      	sub	sp, #16
    5306:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    5308:	2301      	movs	r3, #1
    530a:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    530c:	4b15      	ldr	r3, [pc, #84]	; (5364 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    530e:	695b      	ldr	r3, [r3, #20]
    5310:	b2db      	uxtb	r3, r3
    5312:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    5314:	9b01      	ldr	r3, [sp, #4]
    5316:	2b02      	cmp	r3, #2
    5318:	d012      	beq.n	5340 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    531a:	9b01      	ldr	r3, [sp, #4]
    531c:	2b02      	cmp	r3, #2
    531e:	d818      	bhi.n	5352 <Power_Ip_SMC_ModeCheckEntry+0x4e>
    5320:	9b01      	ldr	r3, [sp, #4]
    5322:	2b00      	cmp	r3, #0
    5324:	d003      	beq.n	532e <Power_Ip_SMC_ModeCheckEntry+0x2a>
    5326:	9b01      	ldr	r3, [sp, #4]
    5328:	2b01      	cmp	r3, #1
    532a:	d003      	beq.n	5334 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    532c:	e011      	b.n	5352 <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    532e:	2300      	movs	r3, #0
    5330:	9303      	str	r3, [sp, #12]
            break;
    5332:	e013      	b.n	535c <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    5334:	9b02      	ldr	r3, [sp, #8]
    5336:	2b01      	cmp	r3, #1
    5338:	d10d      	bne.n	5356 <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    533a:	2300      	movs	r3, #0
    533c:	9303      	str	r3, [sp, #12]
            break;
    533e:	e00a      	b.n	5356 <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    5340:	9b02      	ldr	r3, [sp, #8]
    5342:	2b01      	cmp	r3, #1
    5344:	d002      	beq.n	534c <Power_Ip_SMC_ModeCheckEntry+0x48>
    5346:	9b02      	ldr	r3, [sp, #8]
    5348:	2b10      	cmp	r3, #16
    534a:	d106      	bne.n	535a <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    534c:	2300      	movs	r3, #0
    534e:	9303      	str	r3, [sp, #12]
            break;
    5350:	e003      	b.n	535a <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    5352:	bf00      	nop
    5354:	e002      	b.n	535c <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5356:	bf00      	nop
    5358:	e000      	b.n	535c <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    535a:	bf00      	nop
        }
    }

    return PowerModeCheck;
    535c:	9b03      	ldr	r3, [sp, #12]
}
    535e:	4618      	mov	r0, r3
    5360:	b004      	add	sp, #16
    5362:	4770      	bx	lr
    5364:	4007e000 	.word	0x4007e000

00005368 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5368:	b500      	push	{lr}
    536a:	b08b      	sub	sp, #44	; 0x2c
    536c:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    536e:	2300      	movs	r3, #0
    5370:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    5372:	2300      	movs	r3, #0
    5374:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    5376:	2300      	movs	r3, #0
    5378:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    537c:	9b01      	ldr	r3, [sp, #4]
    537e:	685b      	ldr	r3, [r3, #4]
    5380:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    5382:	9b08      	ldr	r3, [sp, #32]
    5384:	2b02      	cmp	r3, #2
    5386:	d076      	beq.n	5476 <Power_Ip_SMC_ModeConfig+0x10e>
    5388:	9b08      	ldr	r3, [sp, #32]
    538a:	2b02      	cmp	r3, #2
    538c:	f200 80ab 	bhi.w	54e6 <Power_Ip_SMC_ModeConfig+0x17e>
    5390:	9b08      	ldr	r3, [sp, #32]
    5392:	2b00      	cmp	r3, #0
    5394:	d003      	beq.n	539e <Power_Ip_SMC_ModeConfig+0x36>
    5396:	9b08      	ldr	r3, [sp, #32]
    5398:	2b01      	cmp	r3, #1
    539a:	d034      	beq.n	5406 <Power_Ip_SMC_ModeConfig+0x9e>
    539c:	e0a3      	b.n	54e6 <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    539e:	4b58      	ldr	r3, [pc, #352]	; (5500 <Power_Ip_SMC_ModeConfig+0x198>)
    53a0:	68db      	ldr	r3, [r3, #12]
    53a2:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    53a4:	9b06      	ldr	r3, [sp, #24]
    53a6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    53aa:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    53ac:	4a54      	ldr	r2, [pc, #336]	; (5500 <Power_Ip_SMC_ModeConfig+0x198>)
    53ae:	9b06      	ldr	r3, [sp, #24]
    53b0:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    53b2:	aa02      	add	r2, sp, #8
    53b4:	a903      	add	r1, sp, #12
    53b6:	a804      	add	r0, sp, #16
    53b8:	f24c 3350 	movw	r3, #50000	; 0xc350
    53bc:	f7ff fece 	bl	515c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    53c0:	9a02      	ldr	r2, [sp, #8]
    53c2:	a903      	add	r1, sp, #12
    53c4:	ab04      	add	r3, sp, #16
    53c6:	4618      	mov	r0, r3
    53c8:	f7ff fee2 	bl	5190 <Power_Ip_TimeoutExpired>
    53cc:	4603      	mov	r3, r0
    53ce:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    53d2:	4b4b      	ldr	r3, [pc, #300]	; (5500 <Power_Ip_SMC_ModeConfig+0x198>)
    53d4:	695b      	ldr	r3, [r3, #20]
    53d6:	f003 0301 	and.w	r3, r3, #1
    53da:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    53dc:	9b05      	ldr	r3, [sp, #20]
    53de:	2b01      	cmp	r3, #1
    53e0:	d006      	beq.n	53f0 <Power_Ip_SMC_ModeConfig+0x88>
    53e2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    53e6:	f083 0301 	eor.w	r3, r3, #1
    53ea:	b2db      	uxtb	r3, r3
    53ec:	2b00      	cmp	r3, #0
    53ee:	d1e7      	bne.n	53c0 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    53f0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    53f4:	2b00      	cmp	r3, #0
    53f6:	d079      	beq.n	54ec <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    53f8:	2301      	movs	r3, #1
    53fa:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    53fc:	21ff      	movs	r1, #255	; 0xff
    53fe:	2000      	movs	r0, #0
    5400:	f7ff fe90 	bl	5124 <Power_Ip_ReportPowerErrors>
            }

            break;
    5404:	e072      	b.n	54ec <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    5406:	4b3e      	ldr	r3, [pc, #248]	; (5500 <Power_Ip_SMC_ModeConfig+0x198>)
    5408:	68db      	ldr	r3, [r3, #12]
    540a:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    540c:	9b06      	ldr	r3, [sp, #24]
    540e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5412:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    5414:	9b06      	ldr	r3, [sp, #24]
    5416:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    541a:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    541c:	4a38      	ldr	r2, [pc, #224]	; (5500 <Power_Ip_SMC_ModeConfig+0x198>)
    541e:	9b06      	ldr	r3, [sp, #24]
    5420:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5422:	aa02      	add	r2, sp, #8
    5424:	a903      	add	r1, sp, #12
    5426:	a804      	add	r0, sp, #16
    5428:	f24c 3350 	movw	r3, #50000	; 0xc350
    542c:	f7ff fe96 	bl	515c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5430:	9a02      	ldr	r2, [sp, #8]
    5432:	a903      	add	r1, sp, #12
    5434:	ab04      	add	r3, sp, #16
    5436:	4618      	mov	r0, r3
    5438:	f7ff feaa 	bl	5190 <Power_Ip_TimeoutExpired>
    543c:	4603      	mov	r3, r0
    543e:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    5442:	4b2f      	ldr	r3, [pc, #188]	; (5500 <Power_Ip_SMC_ModeConfig+0x198>)
    5444:	695b      	ldr	r3, [r3, #20]
    5446:	f003 0380 	and.w	r3, r3, #128	; 0x80
    544a:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    544c:	9b05      	ldr	r3, [sp, #20]
    544e:	2b80      	cmp	r3, #128	; 0x80
    5450:	d006      	beq.n	5460 <Power_Ip_SMC_ModeConfig+0xf8>
    5452:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5456:	f083 0301 	eor.w	r3, r3, #1
    545a:	b2db      	uxtb	r3, r3
    545c:	2b00      	cmp	r3, #0
    545e:	d1e7      	bne.n	5430 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    5460:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5464:	2b00      	cmp	r3, #0
    5466:	d043      	beq.n	54f0 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5468:	2301      	movs	r3, #1
    546a:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    546c:	21ff      	movs	r1, #255	; 0xff
    546e:	2000      	movs	r0, #0
    5470:	f7ff fe58 	bl	5124 <Power_Ip_ReportPowerErrors>
            }

            break;
    5474:	e03c      	b.n	54f0 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    5476:	4b22      	ldr	r3, [pc, #136]	; (5500 <Power_Ip_SMC_ModeConfig+0x198>)
    5478:	68db      	ldr	r3, [r3, #12]
    547a:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    547c:	9b06      	ldr	r3, [sp, #24]
    547e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5482:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    5484:	9b06      	ldr	r3, [sp, #24]
    5486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    548a:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    548c:	4a1c      	ldr	r2, [pc, #112]	; (5500 <Power_Ip_SMC_ModeConfig+0x198>)
    548e:	9b06      	ldr	r3, [sp, #24]
    5490:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5492:	aa02      	add	r2, sp, #8
    5494:	a903      	add	r1, sp, #12
    5496:	a804      	add	r0, sp, #16
    5498:	f24c 3350 	movw	r3, #50000	; 0xc350
    549c:	f7ff fe5e 	bl	515c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    54a0:	9a02      	ldr	r2, [sp, #8]
    54a2:	a903      	add	r1, sp, #12
    54a4:	ab04      	add	r3, sp, #16
    54a6:	4618      	mov	r0, r3
    54a8:	f7ff fe72 	bl	5190 <Power_Ip_TimeoutExpired>
    54ac:	4603      	mov	r3, r0
    54ae:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    54b2:	4b13      	ldr	r3, [pc, #76]	; (5500 <Power_Ip_SMC_ModeConfig+0x198>)
    54b4:	695b      	ldr	r3, [r3, #20]
    54b6:	f003 0304 	and.w	r3, r3, #4
    54ba:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    54bc:	9b05      	ldr	r3, [sp, #20]
    54be:	2b04      	cmp	r3, #4
    54c0:	d006      	beq.n	54d0 <Power_Ip_SMC_ModeConfig+0x168>
    54c2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    54c6:	f083 0301 	eor.w	r3, r3, #1
    54ca:	b2db      	uxtb	r3, r3
    54cc:	2b00      	cmp	r3, #0
    54ce:	d1e7      	bne.n	54a0 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    54d0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    54d4:	2b00      	cmp	r3, #0
    54d6:	d00d      	beq.n	54f4 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    54d8:	2301      	movs	r3, #1
    54da:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    54dc:	21ff      	movs	r1, #255	; 0xff
    54de:	2000      	movs	r0, #0
    54e0:	f7ff fe20 	bl	5124 <Power_Ip_ReportPowerErrors>
            }

            break;
    54e4:	e006      	b.n	54f4 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    54e6:	2301      	movs	r3, #1
    54e8:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    54ea:	e004      	b.n	54f6 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    54ec:	bf00      	nop
    54ee:	e002      	b.n	54f6 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    54f0:	bf00      	nop
    54f2:	e000      	b.n	54f6 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    54f4:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    54f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    54f8:	4618      	mov	r0, r3
    54fa:	b00b      	add	sp, #44	; 0x2c
    54fc:	f85d fb04 	ldr.w	pc, [sp], #4
    5500:	4007e000 	.word	0x4007e000

00005504 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    5504:	b500      	push	{lr}
    5506:	b085      	sub	sp, #20
    5508:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    550a:	9b01      	ldr	r3, [sp, #4]
    550c:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    550e:	9803      	ldr	r0, [sp, #12]
    5510:	f000 fbc8 	bl	5ca4 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    5514:	4a03      	ldr	r2, [pc, #12]	; (5524 <Port_Init+0x20>)
    5516:	9b03      	ldr	r3, [sp, #12]
    5518:	6013      	str	r3, [r2, #0]
        }
    }
}
    551a:	bf00      	nop
    551c:	b005      	add	sp, #20
    551e:	f85d fb04 	ldr.w	pc, [sp], #4
    5522:	bf00      	nop
    5524:	1fff8cf8 	.word	0x1fff8cf8

00005528 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    5528:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    552a:	4b03      	ldr	r3, [pc, #12]	; (5538 <Port_RefreshPortDirection+0x10>)
    552c:	681b      	ldr	r3, [r3, #0]
    552e:	4618      	mov	r0, r3
    5530:	f000 fc10 	bl	5d54 <Port_Ipw_RefreshPortDirection>
    }
}
    5534:	bf00      	nop
    5536:	bd08      	pop	{r3, pc}
    5538:	1fff8cf8 	.word	0x1fff8cf8

0000553c <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    553c:	b086      	sub	sp, #24
    553e:	9003      	str	r0, [sp, #12]
    5540:	9102      	str	r1, [sp, #8]
    5542:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    5544:	23ff      	movs	r3, #255	; 0xff
    5546:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    5548:	9b03      	ldr	r3, [sp, #12]
    554a:	4a39      	ldr	r2, [pc, #228]	; (5630 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    554c:	4293      	cmp	r3, r2
    554e:	d151      	bne.n	55f4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    5550:	9b02      	ldr	r3, [sp, #8]
    5552:	2b10      	cmp	r3, #16
    5554:	d867      	bhi.n	5626 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    5556:	a201      	add	r2, pc, #4	; (adr r2, 555c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    5558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    555c:	000055a1 	.word	0x000055a1
    5560:	000055af 	.word	0x000055af
    5564:	00005627 	.word	0x00005627
    5568:	00005627 	.word	0x00005627
    556c:	00005627 	.word	0x00005627
    5570:	00005627 	.word	0x00005627
    5574:	00005627 	.word	0x00005627
    5578:	00005627 	.word	0x00005627
    557c:	00005627 	.word	0x00005627
    5580:	00005627 	.word	0x00005627
    5584:	00005627 	.word	0x00005627
    5588:	00005627 	.word	0x00005627
    558c:	00005627 	.word	0x00005627
    5590:	000055bd 	.word	0x000055bd
    5594:	000055cb 	.word	0x000055cb
    5598:	000055d9 	.word	0x000055d9
    559c:	000055e7 	.word	0x000055e7
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    55a0:	2301      	movs	r3, #1
    55a2:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    55a4:	9a05      	ldr	r2, [sp, #20]
    55a6:	9b01      	ldr	r3, [sp, #4]
    55a8:	4313      	orrs	r3, r2
    55aa:	9305      	str	r3, [sp, #20]
                break;
    55ac:	e03c      	b.n	5628 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    55ae:	2302      	movs	r3, #2
    55b0:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    55b2:	9a05      	ldr	r2, [sp, #20]
    55b4:	9b01      	ldr	r3, [sp, #4]
    55b6:	4313      	orrs	r3, r2
    55b8:	9305      	str	r3, [sp, #20]
                break;
    55ba:	e035      	b.n	5628 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    55bc:	2304      	movs	r3, #4
    55be:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    55c0:	9a05      	ldr	r2, [sp, #20]
    55c2:	9b01      	ldr	r3, [sp, #4]
    55c4:	4313      	orrs	r3, r2
    55c6:	9305      	str	r3, [sp, #20]
                break;
    55c8:	e02e      	b.n	5628 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    55ca:	2308      	movs	r3, #8
    55cc:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    55ce:	9a05      	ldr	r2, [sp, #20]
    55d0:	9b01      	ldr	r3, [sp, #4]
    55d2:	4313      	orrs	r3, r2
    55d4:	9305      	str	r3, [sp, #20]
                break;
    55d6:	e027      	b.n	5628 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    55d8:	230e      	movs	r3, #14
    55da:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    55dc:	9a05      	ldr	r2, [sp, #20]
    55de:	9b01      	ldr	r3, [sp, #4]
    55e0:	4013      	ands	r3, r2
    55e2:	9305      	str	r3, [sp, #20]
                break;
    55e4:	e020      	b.n	5628 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    55e6:	230d      	movs	r3, #13
    55e8:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    55ea:	9a05      	ldr	r2, [sp, #20]
    55ec:	9b01      	ldr	r3, [sp, #4]
    55ee:	4013      	ands	r3, r2
    55f0:	9305      	str	r3, [sp, #20]
                break;
    55f2:	e019      	b.n	5628 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    55f4:	9b03      	ldr	r3, [sp, #12]
    55f6:	4a0f      	ldr	r2, [pc, #60]	; (5634 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    55f8:	4293      	cmp	r3, r2
    55fa:	d115      	bne.n	5628 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    55fc:	9b02      	ldr	r3, [sp, #8]
    55fe:	2b00      	cmp	r3, #0
    5600:	d003      	beq.n	560a <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    5602:	9b02      	ldr	r3, [sp, #8]
    5604:	2b01      	cmp	r3, #1
    5606:	d007      	beq.n	5618 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    5608:	e00e      	b.n	5628 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    560a:	230b      	movs	r3, #11
    560c:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    560e:	9a05      	ldr	r2, [sp, #20]
    5610:	9b01      	ldr	r3, [sp, #4]
    5612:	4013      	ands	r3, r2
    5614:	9305      	str	r3, [sp, #20]
                break;
    5616:	e007      	b.n	5628 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    5618:	2307      	movs	r3, #7
    561a:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    561c:	9a05      	ldr	r2, [sp, #20]
    561e:	9b01      	ldr	r3, [sp, #4]
    5620:	4013      	ands	r3, r2
    5622:	9305      	str	r3, [sp, #20]
                break;
    5624:	e000      	b.n	5628 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    5626:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    5628:	9b05      	ldr	r3, [sp, #20]
}
    562a:	4618      	mov	r0, r3
    562c:	b006      	add	sp, #24
    562e:	4770      	bx	lr
    5630:	4004a000 	.word	0x4004a000
    5634:	4004b000 	.word	0x4004b000

00005638 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    5638:	b500      	push	{lr}
    563a:	b089      	sub	sp, #36	; 0x24
    563c:	9003      	str	r0, [sp, #12]
    563e:	9102      	str	r1, [sp, #8]
    5640:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    5642:	9b01      	ldr	r3, [sp, #4]
    5644:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    5646:	9b01      	ldr	r3, [sp, #4]
    5648:	2b08      	cmp	r3, #8
    564a:	d121      	bne.n	5690 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    564c:	4b13      	ldr	r3, [pc, #76]	; (569c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    564e:	685b      	ldr	r3, [r3, #4]
    5650:	f003 030f 	and.w	r3, r3, #15
    5654:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    5656:	9a06      	ldr	r2, [sp, #24]
    5658:	9902      	ldr	r1, [sp, #8]
    565a:	9803      	ldr	r0, [sp, #12]
    565c:	f7ff ff6e 	bl	553c <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    5660:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    5662:	9b05      	ldr	r3, [sp, #20]
    5664:	2bff      	cmp	r3, #255	; 0xff
    5666:	d011      	beq.n	568c <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    5668:	f001 f984 	bl	6974 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    566c:	4b0b      	ldr	r3, [pc, #44]	; (569c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    566e:	685b      	ldr	r3, [r3, #4]
    5670:	4a0a      	ldr	r2, [pc, #40]	; (569c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5672:	f023 030f 	bic.w	r3, r3, #15
    5676:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    5678:	4b08      	ldr	r3, [pc, #32]	; (569c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    567a:	685a      	ldr	r2, [r3, #4]
    567c:	9b05      	ldr	r3, [sp, #20]
    567e:	f003 030f 	and.w	r3, r3, #15
    5682:	4906      	ldr	r1, [pc, #24]	; (569c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5684:	4313      	orrs	r3, r2
    5686:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    5688:	f001 f9a0 	bl	69cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    568c:	2300      	movs	r3, #0
    568e:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    5690:	9b07      	ldr	r3, [sp, #28]
}
    5692:	4618      	mov	r0, r3
    5694:	b009      	add	sp, #36	; 0x24
    5696:	f85d fb04 	ldr.w	pc, [sp], #4
    569a:	bf00      	nop
    569c:	40048000 	.word	0x40048000

000056a0 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    56a0:	b500      	push	{lr}
    56a2:	b087      	sub	sp, #28
    56a4:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    56a6:	2300      	movs	r3, #0
    56a8:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    56aa:	2300      	movs	r3, #0
    56ac:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    56ae:	2300      	movs	r3, #0
    56b0:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    56b2:	9b01      	ldr	r3, [sp, #4]
    56b4:	68db      	ldr	r3, [r3, #12]
    56b6:	2b02      	cmp	r3, #2
    56b8:	d00a      	beq.n	56d0 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    56ba:	9b05      	ldr	r3, [sp, #20]
    56bc:	f043 0302 	orr.w	r3, r3, #2
    56c0:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    56c2:	9b01      	ldr	r3, [sp, #4]
    56c4:	68db      	ldr	r3, [r3, #12]
    56c6:	f003 0301 	and.w	r3, r3, #1
    56ca:	9a05      	ldr	r2, [sp, #20]
    56cc:	4313      	orrs	r3, r2
    56ce:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    56d0:	9b01      	ldr	r3, [sp, #4]
    56d2:	699b      	ldr	r3, [r3, #24]
    56d4:	019b      	lsls	r3, r3, #6
    56d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    56da:	9a05      	ldr	r2, [sp, #20]
    56dc:	4313      	orrs	r3, r2
    56de:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    56e0:	9b01      	ldr	r3, [sp, #4]
    56e2:	6a1b      	ldr	r3, [r3, #32]
    56e4:	03db      	lsls	r3, r3, #15
    56e6:	b29b      	uxth	r3, r3
    56e8:	9a05      	ldr	r2, [sp, #20]
    56ea:	4313      	orrs	r3, r2
    56ec:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    56ee:	9b01      	ldr	r3, [sp, #4]
    56f0:	7f1b      	ldrb	r3, [r3, #28]
    56f2:	2b00      	cmp	r3, #0
    56f4:	d001      	beq.n	56fa <Port_Ci_Port_Ip_PinInit+0x5a>
    56f6:	2310      	movs	r3, #16
    56f8:	e000      	b.n	56fc <Port_Ci_Port_Ip_PinInit+0x5c>
    56fa:	2300      	movs	r3, #0
    56fc:	9a05      	ldr	r2, [sp, #20]
    56fe:	4313      	orrs	r3, r2
    5700:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    5702:	9b01      	ldr	r3, [sp, #4]
    5704:	691b      	ldr	r3, [r3, #16]
    5706:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    5708:	9b01      	ldr	r3, [sp, #4]
    570a:	6818      	ldr	r0, [r3, #0]
    570c:	9b01      	ldr	r3, [sp, #4]
    570e:	689b      	ldr	r3, [r3, #8]
    5710:	9a04      	ldr	r2, [sp, #16]
    5712:	4619      	mov	r1, r3
    5714:	f7ff ff90 	bl	5638 <Port_Ci_Port_Ip_ConfigureInterleave>
    5718:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    571a:	9b03      	ldr	r3, [sp, #12]
    571c:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    571e:	9b04      	ldr	r3, [sp, #16]
    5720:	021b      	lsls	r3, r3, #8
    5722:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    5726:	9a05      	ldr	r2, [sp, #20]
    5728:	4313      	orrs	r3, r2
    572a:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    572c:	f000 ff88 	bl	6640 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    5730:	9b01      	ldr	r3, [sp, #4]
    5732:	681b      	ldr	r3, [r3, #0]
    5734:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    5738:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    573a:	9b01      	ldr	r3, [sp, #4]
    573c:	689b      	ldr	r3, [r3, #8]
    573e:	2201      	movs	r2, #1
    5740:	fa02 f303 	lsl.w	r3, r2, r3
    5744:	43db      	mvns	r3, r3
    5746:	9a02      	ldr	r2, [sp, #8]
    5748:	4013      	ands	r3, r2
    574a:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    574c:	9b01      	ldr	r3, [sp, #4]
    574e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    5752:	2b00      	cmp	r3, #0
    5754:	d001      	beq.n	575a <Port_Ci_Port_Ip_PinInit+0xba>
    5756:	2201      	movs	r2, #1
    5758:	e000      	b.n	575c <Port_Ci_Port_Ip_PinInit+0xbc>
    575a:	2200      	movs	r2, #0
    575c:	9b01      	ldr	r3, [sp, #4]
    575e:	689b      	ldr	r3, [r3, #8]
    5760:	fa02 f303 	lsl.w	r3, r2, r3
    5764:	9a02      	ldr	r2, [sp, #8]
    5766:	4313      	orrs	r3, r2
    5768:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    576a:	9b01      	ldr	r3, [sp, #4]
    576c:	681b      	ldr	r3, [r3, #0]
    576e:	9a02      	ldr	r2, [sp, #8]
    5770:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    5774:	f000 ff90 	bl	6698 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    5778:	9b04      	ldr	r3, [sp, #16]
    577a:	2b01      	cmp	r3, #1
    577c:	d16d      	bne.n	585a <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    577e:	9b01      	ldr	r3, [sp, #4]
    5780:	695b      	ldr	r3, [r3, #20]
    5782:	2b02      	cmp	r3, #2
    5784:	d138      	bne.n	57f8 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    5786:	9b01      	ldr	r3, [sp, #4]
    5788:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    578c:	2b01      	cmp	r3, #1
    578e:	d10f      	bne.n	57b0 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    5790:	f000 ffa8 	bl	66e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    5794:	9b01      	ldr	r3, [sp, #4]
    5796:	685b      	ldr	r3, [r3, #4]
    5798:	6859      	ldr	r1, [r3, #4]
    579a:	9b01      	ldr	r3, [sp, #4]
    579c:	689b      	ldr	r3, [r3, #8]
    579e:	2201      	movs	r2, #1
    57a0:	409a      	lsls	r2, r3
    57a2:	9b01      	ldr	r3, [sp, #4]
    57a4:	685b      	ldr	r3, [r3, #4]
    57a6:	430a      	orrs	r2, r1
    57a8:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    57aa:	f000 ffc7 	bl	673c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    57ae:	e013      	b.n	57d8 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    57b0:	9b01      	ldr	r3, [sp, #4]
    57b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    57b6:	2b00      	cmp	r3, #0
    57b8:	d10e      	bne.n	57d8 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    57ba:	f000 ffe5 	bl	6788 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    57be:	9b01      	ldr	r3, [sp, #4]
    57c0:	685b      	ldr	r3, [r3, #4]
    57c2:	6899      	ldr	r1, [r3, #8]
    57c4:	9b01      	ldr	r3, [sp, #4]
    57c6:	689b      	ldr	r3, [r3, #8]
    57c8:	2201      	movs	r2, #1
    57ca:	409a      	lsls	r2, r3
    57cc:	9b01      	ldr	r3, [sp, #4]
    57ce:	685b      	ldr	r3, [r3, #4]
    57d0:	430a      	orrs	r2, r1
    57d2:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    57d4:	f001 f804 	bl	67e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    57d8:	f001 f828 	bl	682c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    57dc:	9b01      	ldr	r3, [sp, #4]
    57de:	685b      	ldr	r3, [r3, #4]
    57e0:	6959      	ldr	r1, [r3, #20]
    57e2:	9b01      	ldr	r3, [sp, #4]
    57e4:	689b      	ldr	r3, [r3, #8]
    57e6:	2201      	movs	r2, #1
    57e8:	409a      	lsls	r2, r3
    57ea:	9b01      	ldr	r3, [sp, #4]
    57ec:	685b      	ldr	r3, [r3, #4]
    57ee:	430a      	orrs	r2, r1
    57f0:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    57f2:	f001 f847 	bl	6884 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    57f6:	e030      	b.n	585a <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    57f8:	f001 f818 	bl	682c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    57fc:	9b01      	ldr	r3, [sp, #4]
    57fe:	685b      	ldr	r3, [r3, #4]
    5800:	6959      	ldr	r1, [r3, #20]
    5802:	9b01      	ldr	r3, [sp, #4]
    5804:	689b      	ldr	r3, [r3, #8]
    5806:	2201      	movs	r2, #1
    5808:	fa02 f303 	lsl.w	r3, r2, r3
    580c:	43da      	mvns	r2, r3
    580e:	9b01      	ldr	r3, [sp, #4]
    5810:	685b      	ldr	r3, [r3, #4]
    5812:	400a      	ands	r2, r1
    5814:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    5816:	f001 f835 	bl	6884 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    581a:	f001 f859 	bl	68d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    581e:	9b01      	ldr	r3, [sp, #4]
    5820:	685b      	ldr	r3, [r3, #4]
    5822:	6999      	ldr	r1, [r3, #24]
    5824:	9b01      	ldr	r3, [sp, #4]
    5826:	689b      	ldr	r3, [r3, #8]
    5828:	2201      	movs	r2, #1
    582a:	fa02 f303 	lsl.w	r3, r2, r3
    582e:	43da      	mvns	r2, r3
    5830:	9b01      	ldr	r3, [sp, #4]
    5832:	685b      	ldr	r3, [r3, #4]
    5834:	400a      	ands	r2, r1
    5836:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    5838:	9b01      	ldr	r3, [sp, #4]
    583a:	695b      	ldr	r3, [r3, #20]
    583c:	2b03      	cmp	r3, #3
    583e:	d10a      	bne.n	5856 <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    5840:	9b01      	ldr	r3, [sp, #4]
    5842:	685b      	ldr	r3, [r3, #4]
    5844:	6999      	ldr	r1, [r3, #24]
    5846:	9b01      	ldr	r3, [sp, #4]
    5848:	689b      	ldr	r3, [r3, #8]
    584a:	2201      	movs	r2, #1
    584c:	409a      	lsls	r2, r3
    584e:	9b01      	ldr	r3, [sp, #4]
    5850:	685b      	ldr	r3, [r3, #4]
    5852:	430a      	orrs	r2, r1
    5854:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    5856:	f001 f867 	bl	6928 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    585a:	9b01      	ldr	r3, [sp, #4]
    585c:	681b      	ldr	r3, [r3, #0]
    585e:	9a01      	ldr	r2, [sp, #4]
    5860:	6892      	ldr	r2, [r2, #8]
    5862:	9905      	ldr	r1, [sp, #20]
    5864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    5868:	bf00      	nop
    586a:	b007      	add	sp, #28
    586c:	f85d fb04 	ldr.w	pc, [sp], #4

00005870 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    5870:	b500      	push	{lr}
    5872:	b085      	sub	sp, #20
    5874:	9001      	str	r0, [sp, #4]
    5876:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    5878:	2300      	movs	r3, #0
    587a:	9303      	str	r3, [sp, #12]
    587c:	e00d      	b.n	589a <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    587e:	9a03      	ldr	r2, [sp, #12]
    5880:	4613      	mov	r3, r2
    5882:	009b      	lsls	r3, r3, #2
    5884:	4413      	add	r3, r2
    5886:	00db      	lsls	r3, r3, #3
    5888:	461a      	mov	r2, r3
    588a:	9b00      	ldr	r3, [sp, #0]
    588c:	4413      	add	r3, r2
    588e:	4618      	mov	r0, r3
    5890:	f7ff ff06 	bl	56a0 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    5894:	9b03      	ldr	r3, [sp, #12]
    5896:	3301      	adds	r3, #1
    5898:	9303      	str	r3, [sp, #12]
    589a:	9a03      	ldr	r2, [sp, #12]
    589c:	9b01      	ldr	r3, [sp, #4]
    589e:	429a      	cmp	r2, r3
    58a0:	d3ed      	bcc.n	587e <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    58a2:	2300      	movs	r3, #0
}
    58a4:	4618      	mov	r0, r3
    58a6:	b005      	add	sp, #20
    58a8:	f85d fb04 	ldr.w	pc, [sp], #4

000058ac <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    58ac:	b500      	push	{lr}
    58ae:	b087      	sub	sp, #28
    58b0:	9003      	str	r0, [sp, #12]
    58b2:	9102      	str	r1, [sp, #8]
    58b4:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    58b6:	9a01      	ldr	r2, [sp, #4]
    58b8:	9902      	ldr	r1, [sp, #8]
    58ba:	9803      	ldr	r0, [sp, #12]
    58bc:	f7ff febc 	bl	5638 <Port_Ci_Port_Ip_ConfigureInterleave>
    58c0:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    58c2:	f001 f8a9 	bl	6a18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    58c6:	9b03      	ldr	r3, [sp, #12]
    58c8:	9a02      	ldr	r2, [sp, #8]
    58ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    58ce:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    58d0:	9b04      	ldr	r3, [sp, #16]
    58d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    58d6:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    58d8:	9b05      	ldr	r3, [sp, #20]
    58da:	021b      	lsls	r3, r3, #8
    58dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    58e0:	9a04      	ldr	r2, [sp, #16]
    58e2:	4313      	orrs	r3, r2
    58e4:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    58e6:	9b03      	ldr	r3, [sp, #12]
    58e8:	9a02      	ldr	r2, [sp, #8]
    58ea:	9904      	ldr	r1, [sp, #16]
    58ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    58f0:	f001 f8be 	bl	6a70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    58f4:	bf00      	nop
    58f6:	b007      	add	sp, #28
    58f8:	f85d fb04 	ldr.w	pc, [sp], #4

000058fc <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    58fc:	b500      	push	{lr}
    58fe:	b083      	sub	sp, #12
    5900:	9001      	str	r0, [sp, #4]
    5902:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    5904:	f001 f8da 	bl	6abc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    5908:	9b01      	ldr	r3, [sp, #4]
    590a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    590e:	2101      	movs	r1, #1
    5910:	9b00      	ldr	r3, [sp, #0]
    5912:	fa01 f303 	lsl.w	r3, r1, r3
    5916:	431a      	orrs	r2, r3
    5918:	9b01      	ldr	r3, [sp, #4]
    591a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    591e:	f001 f8f9 	bl	6b14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    5922:	bf00      	nop
    5924:	b003      	add	sp, #12
    5926:	f85d fb04 	ldr.w	pc, [sp], #4

0000592a <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    592a:	b500      	push	{lr}
    592c:	b083      	sub	sp, #12
    592e:	9001      	str	r0, [sp, #4]
    5930:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    5932:	f001 f915 	bl	6b60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    5936:	9b01      	ldr	r3, [sp, #4]
    5938:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    593c:	2101      	movs	r1, #1
    593e:	9b00      	ldr	r3, [sp, #0]
    5940:	fa01 f303 	lsl.w	r3, r1, r3
    5944:	43db      	mvns	r3, r3
    5946:	401a      	ands	r2, r3
    5948:	9b01      	ldr	r3, [sp, #4]
    594a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    594e:	f001 f933 	bl	6bb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    5952:	bf00      	nop
    5954:	b003      	add	sp, #12
    5956:	f85d fb04 	ldr.w	pc, [sp], #4

0000595a <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    595a:	b082      	sub	sp, #8
    595c:	9001      	str	r0, [sp, #4]
    595e:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    5960:	9b00      	ldr	r3, [sp, #0]
    5962:	785b      	ldrb	r3, [r3, #1]
    5964:	f003 0201 	and.w	r2, r3, #1
    5968:	9b01      	ldr	r3, [sp, #4]
    596a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    596e:	9b00      	ldr	r3, [sp, #0]
    5970:	789b      	ldrb	r3, [r3, #2]
    5972:	f003 021f 	and.w	r2, r3, #31
    5976:	9b01      	ldr	r3, [sp, #4]
    5978:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    597c:	bf00      	nop
    597e:	b002      	add	sp, #8
    5980:	4770      	bx	lr

00005982 <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    5982:	b086      	sub	sp, #24
    5984:	9003      	str	r0, [sp, #12]
    5986:	9301      	str	r3, [sp, #4]
    5988:	460b      	mov	r3, r1
    598a:	f8ad 300a 	strh.w	r3, [sp, #10]
    598e:	4613      	mov	r3, r2
    5990:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    5994:	2300      	movs	r3, #0
    5996:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    599a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    599e:	f043 0301 	orr.w	r3, r3, #1
    59a2:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    59a6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    59aa:	f043 0302 	orr.w	r3, r3, #2
    59ae:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    59b2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    59b6:	f043 0310 	orr.w	r3, r3, #16
    59ba:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    59be:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    59c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    59c6:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    59ca:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    59ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    59d2:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    59d6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    59da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    59de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    59e2:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    59e6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    59ea:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    59ee:	4013      	ands	r3, r2
    59f0:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    59f4:	9b01      	ldr	r3, [sp, #4]
    59f6:	2b00      	cmp	r3, #0
    59f8:	d003      	beq.n	5a02 <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    59fa:	9b01      	ldr	r3, [sp, #4]
    59fc:	2b01      	cmp	r3, #1
    59fe:	d00a      	beq.n	5a16 <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    5a00:	e013      	b.n	5a2a <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    5a02:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5a06:	041a      	lsls	r2, r3, #16
    5a08:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a0c:	431a      	orrs	r2, r3
    5a0e:	9b03      	ldr	r3, [sp, #12]
    5a10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    5a14:	e009      	b.n	5a2a <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    5a16:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5a1a:	041a      	lsls	r2, r3, #16
    5a1c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a20:	431a      	orrs	r2, r3
    5a22:	9b03      	ldr	r3, [sp, #12]
    5a24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    5a28:	bf00      	nop
    }
}
    5a2a:	bf00      	nop
    5a2c:	b006      	add	sp, #24
    5a2e:	4770      	bx	lr

00005a30 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    5a30:	b500      	push	{lr}
    5a32:	b087      	sub	sp, #28
    5a34:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    5a36:	9b01      	ldr	r3, [sp, #4]
    5a38:	885b      	ldrh	r3, [r3, #2]
    5a3a:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    5a3e:	9b01      	ldr	r3, [sp, #4]
    5a40:	689b      	ldr	r3, [r3, #8]
    5a42:	7a1b      	ldrb	r3, [r3, #8]
    5a44:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    5a48:	9b01      	ldr	r3, [sp, #4]
    5a4a:	689b      	ldr	r3, [r3, #8]
    5a4c:	681b      	ldr	r3, [r3, #0]
    5a4e:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    5a50:	9b01      	ldr	r3, [sp, #4]
    5a52:	689b      	ldr	r3, [r3, #8]
    5a54:	685b      	ldr	r3, [r3, #4]
    5a56:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    5a58:	2300      	movs	r3, #0
    5a5a:	f8ad 3016 	strh.w	r3, [sp, #22]
    5a5e:	e111      	b.n	5c84 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    5a60:	9b02      	ldr	r3, [sp, #8]
    5a62:	2b02      	cmp	r3, #2
    5a64:	d169      	bne.n	5b3a <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    5a66:	f89d 3013 	ldrb.w	r3, [sp, #19]
    5a6a:	2b01      	cmp	r3, #1
    5a6c:	d11a      	bne.n	5aa4 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5a6e:	9b01      	ldr	r3, [sp, #4]
    5a70:	685a      	ldr	r2, [r3, #4]
    5a72:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a76:	005b      	lsls	r3, r3, #1
    5a78:	4413      	add	r3, r2
    5a7a:	881b      	ldrh	r3, [r3, #0]
    5a7c:	f003 021f 	and.w	r2, r3, #31
    5a80:	9b01      	ldr	r3, [sp, #4]
    5a82:	6859      	ldr	r1, [r3, #4]
    5a84:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a88:	005b      	lsls	r3, r3, #1
    5a8a:	440b      	add	r3, r1
    5a8c:	881b      	ldrh	r3, [r3, #0]
    5a8e:	095b      	lsrs	r3, r3, #5
    5a90:	b29b      	uxth	r3, r3
    5a92:	4619      	mov	r1, r3
    5a94:	4b81      	ldr	r3, [pc, #516]	; (5c9c <Port_Ipw_Init_UnusedPins+0x26c>)
    5a96:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    5a9a:	2101      	movs	r1, #1
    5a9c:	fa01 f202 	lsl.w	r2, r1, r2
    5aa0:	605a      	str	r2, [r3, #4]
    5aa2:	e01d      	b.n	5ae0 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    5aa4:	f89d 3013 	ldrb.w	r3, [sp, #19]
    5aa8:	2b00      	cmp	r3, #0
    5aaa:	d119      	bne.n	5ae0 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5aac:	9b01      	ldr	r3, [sp, #4]
    5aae:	685a      	ldr	r2, [r3, #4]
    5ab0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5ab4:	005b      	lsls	r3, r3, #1
    5ab6:	4413      	add	r3, r2
    5ab8:	881b      	ldrh	r3, [r3, #0]
    5aba:	f003 021f 	and.w	r2, r3, #31
    5abe:	9b01      	ldr	r3, [sp, #4]
    5ac0:	6859      	ldr	r1, [r3, #4]
    5ac2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5ac6:	005b      	lsls	r3, r3, #1
    5ac8:	440b      	add	r3, r1
    5aca:	881b      	ldrh	r3, [r3, #0]
    5acc:	095b      	lsrs	r3, r3, #5
    5ace:	b29b      	uxth	r3, r3
    5ad0:	4619      	mov	r1, r3
    5ad2:	4b72      	ldr	r3, [pc, #456]	; (5c9c <Port_Ipw_Init_UnusedPins+0x26c>)
    5ad4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    5ad8:	2101      	movs	r1, #1
    5ada:	fa01 f202 	lsl.w	r2, r1, r2
    5ade:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    5ae0:	f001 f890 	bl	6c04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5ae4:	9b01      	ldr	r3, [sp, #4]
    5ae6:	685a      	ldr	r2, [r3, #4]
    5ae8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5aec:	005b      	lsls	r3, r3, #1
    5aee:	4413      	add	r3, r2
    5af0:	881b      	ldrh	r3, [r3, #0]
    5af2:	095b      	lsrs	r3, r3, #5
    5af4:	b29b      	uxth	r3, r3
    5af6:	461a      	mov	r2, r3
    5af8:	4b68      	ldr	r3, [pc, #416]	; (5c9c <Port_Ipw_Init_UnusedPins+0x26c>)
    5afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5afe:	6959      	ldr	r1, [r3, #20]
    5b00:	9b01      	ldr	r3, [sp, #4]
    5b02:	685a      	ldr	r2, [r3, #4]
    5b04:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b08:	005b      	lsls	r3, r3, #1
    5b0a:	4413      	add	r3, r2
    5b0c:	881b      	ldrh	r3, [r3, #0]
    5b0e:	f003 031f 	and.w	r3, r3, #31
    5b12:	2201      	movs	r2, #1
    5b14:	409a      	lsls	r2, r3
    5b16:	9b01      	ldr	r3, [sp, #4]
    5b18:	6858      	ldr	r0, [r3, #4]
    5b1a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b1e:	005b      	lsls	r3, r3, #1
    5b20:	4403      	add	r3, r0
    5b22:	881b      	ldrh	r3, [r3, #0]
    5b24:	095b      	lsrs	r3, r3, #5
    5b26:	b29b      	uxth	r3, r3
    5b28:	4618      	mov	r0, r3
    5b2a:	4b5c      	ldr	r3, [pc, #368]	; (5c9c <Port_Ipw_Init_UnusedPins+0x26c>)
    5b2c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5b30:	430a      	orrs	r2, r1
    5b32:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    5b34:	f001 f892 	bl	6c5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    5b38:	e086      	b.n	5c48 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    5b3a:	f001 f863 	bl	6c04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    5b3e:	9b01      	ldr	r3, [sp, #4]
    5b40:	685a      	ldr	r2, [r3, #4]
    5b42:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b46:	005b      	lsls	r3, r3, #1
    5b48:	4413      	add	r3, r2
    5b4a:	881b      	ldrh	r3, [r3, #0]
    5b4c:	095b      	lsrs	r3, r3, #5
    5b4e:	b29b      	uxth	r3, r3
    5b50:	461a      	mov	r2, r3
    5b52:	4b52      	ldr	r3, [pc, #328]	; (5c9c <Port_Ipw_Init_UnusedPins+0x26c>)
    5b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5b58:	6959      	ldr	r1, [r3, #20]
    5b5a:	9b01      	ldr	r3, [sp, #4]
    5b5c:	685a      	ldr	r2, [r3, #4]
    5b5e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b62:	005b      	lsls	r3, r3, #1
    5b64:	4413      	add	r3, r2
    5b66:	881b      	ldrh	r3, [r3, #0]
    5b68:	f003 031f 	and.w	r3, r3, #31
    5b6c:	2201      	movs	r2, #1
    5b6e:	fa02 f303 	lsl.w	r3, r2, r3
    5b72:	43da      	mvns	r2, r3
    5b74:	9b01      	ldr	r3, [sp, #4]
    5b76:	6858      	ldr	r0, [r3, #4]
    5b78:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b7c:	005b      	lsls	r3, r3, #1
    5b7e:	4403      	add	r3, r0
    5b80:	881b      	ldrh	r3, [r3, #0]
    5b82:	095b      	lsrs	r3, r3, #5
    5b84:	b29b      	uxth	r3, r3
    5b86:	4618      	mov	r0, r3
    5b88:	4b44      	ldr	r3, [pc, #272]	; (5c9c <Port_Ipw_Init_UnusedPins+0x26c>)
    5b8a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5b8e:	400a      	ands	r2, r1
    5b90:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    5b92:	f001 f863 	bl	6c5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    5b96:	f001 f887 	bl	6ca8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5b9a:	9b01      	ldr	r3, [sp, #4]
    5b9c:	685a      	ldr	r2, [r3, #4]
    5b9e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5ba2:	005b      	lsls	r3, r3, #1
    5ba4:	4413      	add	r3, r2
    5ba6:	881b      	ldrh	r3, [r3, #0]
    5ba8:	095b      	lsrs	r3, r3, #5
    5baa:	b29b      	uxth	r3, r3
    5bac:	461a      	mov	r2, r3
    5bae:	4b3b      	ldr	r3, [pc, #236]	; (5c9c <Port_Ipw_Init_UnusedPins+0x26c>)
    5bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5bb4:	6999      	ldr	r1, [r3, #24]
    5bb6:	9b01      	ldr	r3, [sp, #4]
    5bb8:	685a      	ldr	r2, [r3, #4]
    5bba:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5bbe:	005b      	lsls	r3, r3, #1
    5bc0:	4413      	add	r3, r2
    5bc2:	881b      	ldrh	r3, [r3, #0]
    5bc4:	f003 031f 	and.w	r3, r3, #31
    5bc8:	2201      	movs	r2, #1
    5bca:	fa02 f303 	lsl.w	r3, r2, r3
    5bce:	43da      	mvns	r2, r3
    5bd0:	9b01      	ldr	r3, [sp, #4]
    5bd2:	6858      	ldr	r0, [r3, #4]
    5bd4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5bd8:	005b      	lsls	r3, r3, #1
    5bda:	4403      	add	r3, r0
    5bdc:	881b      	ldrh	r3, [r3, #0]
    5bde:	095b      	lsrs	r3, r3, #5
    5be0:	b29b      	uxth	r3, r3
    5be2:	4618      	mov	r0, r3
    5be4:	4b2d      	ldr	r3, [pc, #180]	; (5c9c <Port_Ipw_Init_UnusedPins+0x26c>)
    5be6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5bea:	400a      	ands	r2, r1
    5bec:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    5bee:	9b02      	ldr	r3, [sp, #8]
    5bf0:	2b03      	cmp	r3, #3
    5bf2:	d127      	bne.n	5c44 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5bf4:	9b01      	ldr	r3, [sp, #4]
    5bf6:	685a      	ldr	r2, [r3, #4]
    5bf8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5bfc:	005b      	lsls	r3, r3, #1
    5bfe:	4413      	add	r3, r2
    5c00:	881b      	ldrh	r3, [r3, #0]
    5c02:	095b      	lsrs	r3, r3, #5
    5c04:	b29b      	uxth	r3, r3
    5c06:	461a      	mov	r2, r3
    5c08:	4b24      	ldr	r3, [pc, #144]	; (5c9c <Port_Ipw_Init_UnusedPins+0x26c>)
    5c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5c0e:	6999      	ldr	r1, [r3, #24]
    5c10:	9b01      	ldr	r3, [sp, #4]
    5c12:	685a      	ldr	r2, [r3, #4]
    5c14:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5c18:	005b      	lsls	r3, r3, #1
    5c1a:	4413      	add	r3, r2
    5c1c:	881b      	ldrh	r3, [r3, #0]
    5c1e:	f003 031f 	and.w	r3, r3, #31
    5c22:	2201      	movs	r2, #1
    5c24:	409a      	lsls	r2, r3
    5c26:	9b01      	ldr	r3, [sp, #4]
    5c28:	6858      	ldr	r0, [r3, #4]
    5c2a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5c2e:	005b      	lsls	r3, r3, #1
    5c30:	4403      	add	r3, r0
    5c32:	881b      	ldrh	r3, [r3, #0]
    5c34:	095b      	lsrs	r3, r3, #5
    5c36:	b29b      	uxth	r3, r3
    5c38:	4618      	mov	r0, r3
    5c3a:	4b18      	ldr	r3, [pc, #96]	; (5c9c <Port_Ipw_Init_UnusedPins+0x26c>)
    5c3c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5c40:	430a      	orrs	r2, r1
    5c42:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    5c44:	f001 f85c 	bl	6d00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    5c48:	9b01      	ldr	r3, [sp, #4]
    5c4a:	685a      	ldr	r2, [r3, #4]
    5c4c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5c50:	005b      	lsls	r3, r3, #1
    5c52:	4413      	add	r3, r2
    5c54:	881b      	ldrh	r3, [r3, #0]
    5c56:	095b      	lsrs	r3, r3, #5
    5c58:	b29b      	uxth	r3, r3
    5c5a:	461a      	mov	r2, r3
    5c5c:	4b10      	ldr	r3, [pc, #64]	; (5ca0 <Port_Ipw_Init_UnusedPins+0x270>)
    5c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5c62:	9a01      	ldr	r2, [sp, #4]
    5c64:	6851      	ldr	r1, [r2, #4]
    5c66:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5c6a:	0052      	lsls	r2, r2, #1
    5c6c:	440a      	add	r2, r1
    5c6e:	8812      	ldrh	r2, [r2, #0]
    5c70:	f002 021f 	and.w	r2, r2, #31
    5c74:	9903      	ldr	r1, [sp, #12]
    5c76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    5c7a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5c7e:	3301      	adds	r3, #1
    5c80:	f8ad 3016 	strh.w	r3, [sp, #22]
    5c84:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5c88:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    5c8c:	429a      	cmp	r2, r3
    5c8e:	f4ff aee7 	bcc.w	5a60 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    5c92:	bf00      	nop
    5c94:	bf00      	nop
    5c96:	b007      	add	sp, #28
    5c98:	f85d fb04 	ldr.w	pc, [sp], #4
    5c9c:	00007fcc 	.word	0x00007fcc
    5ca0:	00007fb8 	.word	0x00007fb8

00005ca4 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    5ca4:	b500      	push	{lr}
    5ca6:	b085      	sub	sp, #20
    5ca8:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    5caa:	9b01      	ldr	r3, [sp, #4]
    5cac:	7c1b      	ldrb	r3, [r3, #16]
    5cae:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    5cb2:	2300      	movs	r3, #0
    5cb4:	f8ad 300e 	strh.w	r3, [sp, #14]
    5cb8:	e035      	b.n	5d26 <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    5cba:	9b01      	ldr	r3, [sp, #4]
    5cbc:	695a      	ldr	r2, [r3, #20]
    5cbe:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5cc2:	00db      	lsls	r3, r3, #3
    5cc4:	4413      	add	r3, r2
    5cc6:	781b      	ldrb	r3, [r3, #0]
    5cc8:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    5ccc:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5cd0:	4a1f      	ldr	r2, [pc, #124]	; (5d50 <Port_Ipw_Init+0xac>)
    5cd2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    5cd6:	9b01      	ldr	r3, [sp, #4]
    5cd8:	695a      	ldr	r2, [r3, #20]
    5cda:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5cde:	00db      	lsls	r3, r3, #3
    5ce0:	4413      	add	r3, r2
    5ce2:	4619      	mov	r1, r3
    5ce4:	f7ff fe39 	bl	595a <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    5ce8:	f001 f978 	bl	6fdc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    5cec:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5cf0:	4a17      	ldr	r2, [pc, #92]	; (5d50 <Port_Ipw_Init+0xac>)
    5cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5cf6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    5cfa:	9b01      	ldr	r3, [sp, #4]
    5cfc:	695a      	ldr	r2, [r3, #20]
    5cfe:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5d02:	00db      	lsls	r3, r3, #3
    5d04:	4413      	add	r3, r2
    5d06:	685a      	ldr	r2, [r3, #4]
    5d08:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5d0c:	4810      	ldr	r0, [pc, #64]	; (5d50 <Port_Ipw_Init+0xac>)
    5d0e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    5d12:	430a      	orrs	r2, r1
    5d14:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    5d18:	f001 f98c 	bl	7034 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    5d1c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5d20:	3301      	adds	r3, #1
    5d22:	f8ad 300e 	strh.w	r3, [sp, #14]
    5d26:	f89d 300d 	ldrb.w	r3, [sp, #13]
    5d2a:	b29b      	uxth	r3, r3
    5d2c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5d30:	429a      	cmp	r2, r3
    5d32:	d3c2      	bcc.n	5cba <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    5d34:	9b01      	ldr	r3, [sp, #4]
    5d36:	6a1b      	ldr	r3, [r3, #32]
    5d38:	4619      	mov	r1, r3
    5d3a:	2005      	movs	r0, #5
    5d3c:	f7ff fd98 	bl	5870 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    5d40:	9801      	ldr	r0, [sp, #4]
    5d42:	f7ff fe75 	bl	5a30 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    5d46:	bf00      	nop
    5d48:	b005      	add	sp, #20
    5d4a:	f85d fb04 	ldr.w	pc, [sp], #4
    5d4e:	bf00      	nop
    5d50:	00007fb8 	.word	0x00007fb8

00005d54 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    5d54:	b500      	push	{lr}
    5d56:	b085      	sub	sp, #20
    5d58:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    5d5a:	9b01      	ldr	r3, [sp, #4]
    5d5c:	881b      	ldrh	r3, [r3, #0]
    5d5e:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    5d62:	2300      	movs	r3, #0
    5d64:	f8ad 300e 	strh.w	r3, [sp, #14]
    5d68:	e0d2      	b.n	5f10 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    5d6a:	9b01      	ldr	r3, [sp, #4]
    5d6c:	68d9      	ldr	r1, [r3, #12]
    5d6e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5d72:	4613      	mov	r3, r2
    5d74:	009b      	lsls	r3, r3, #2
    5d76:	4413      	add	r3, r2
    5d78:	009b      	lsls	r3, r3, #2
    5d7a:	440b      	add	r3, r1
    5d7c:	7c5b      	ldrb	r3, [r3, #17]
    5d7e:	f083 0301 	eor.w	r3, r3, #1
    5d82:	b2db      	uxtb	r3, r3
    5d84:	2b00      	cmp	r3, #0
    5d86:	f000 80be 	beq.w	5f06 <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    5d8a:	9b01      	ldr	r3, [sp, #4]
    5d8c:	68d9      	ldr	r1, [r3, #12]
    5d8e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5d92:	4613      	mov	r3, r2
    5d94:	009b      	lsls	r3, r3, #2
    5d96:	4413      	add	r3, r2
    5d98:	009b      	lsls	r3, r3, #2
    5d9a:	440b      	add	r3, r1
    5d9c:	7c1b      	ldrb	r3, [r3, #16]
    5d9e:	2b00      	cmp	r3, #0
    5da0:	f000 80b1 	beq.w	5f06 <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    5da4:	9b01      	ldr	r3, [sp, #4]
    5da6:	68d9      	ldr	r1, [r3, #12]
    5da8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5dac:	4613      	mov	r3, r2
    5dae:	009b      	lsls	r3, r3, #2
    5db0:	4413      	add	r3, r2
    5db2:	009b      	lsls	r3, r3, #2
    5db4:	440b      	add	r3, r1
    5db6:	881b      	ldrh	r3, [r3, #0]
    5db8:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    5dbc:	9b01      	ldr	r3, [sp, #4]
    5dbe:	68d9      	ldr	r1, [r3, #12]
    5dc0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5dc4:	4613      	mov	r3, r2
    5dc6:	009b      	lsls	r3, r3, #2
    5dc8:	4413      	add	r3, r2
    5dca:	009b      	lsls	r3, r3, #2
    5dcc:	440b      	add	r3, r1
    5dce:	68db      	ldr	r3, [r3, #12]
    5dd0:	2b02      	cmp	r3, #2
    5dd2:	d11d      	bne.n	5e10 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    5dd4:	f001 fa4a 	bl	726c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5dd8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5ddc:	095b      	lsrs	r3, r3, #5
    5dde:	b29b      	uxth	r3, r3
    5de0:	461a      	mov	r2, r3
    5de2:	4b51      	ldr	r3, [pc, #324]	; (5f28 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5de8:	6959      	ldr	r1, [r3, #20]
    5dea:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5dee:	f003 031f 	and.w	r3, r3, #31
    5df2:	2201      	movs	r2, #1
    5df4:	409a      	lsls	r2, r3
    5df6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5dfa:	095b      	lsrs	r3, r3, #5
    5dfc:	b29b      	uxth	r3, r3
    5dfe:	4618      	mov	r0, r3
    5e00:	4b49      	ldr	r3, [pc, #292]	; (5f28 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5e02:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5e06:	430a      	orrs	r2, r1
    5e08:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    5e0a:	f001 fa5b 	bl	72c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    5e0e:	e07a      	b.n	5f06 <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    5e10:	9b01      	ldr	r3, [sp, #4]
    5e12:	68d9      	ldr	r1, [r3, #12]
    5e14:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5e18:	4613      	mov	r3, r2
    5e1a:	009b      	lsls	r3, r3, #2
    5e1c:	4413      	add	r3, r2
    5e1e:	009b      	lsls	r3, r3, #2
    5e20:	440b      	add	r3, r1
    5e22:	68db      	ldr	r3, [r3, #12]
    5e24:	2b01      	cmp	r3, #1
    5e26:	d00b      	beq.n	5e40 <Port_Ipw_RefreshPortDirection+0xec>
    5e28:	9b01      	ldr	r3, [sp, #4]
    5e2a:	68d9      	ldr	r1, [r3, #12]
    5e2c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5e30:	4613      	mov	r3, r2
    5e32:	009b      	lsls	r3, r3, #2
    5e34:	4413      	add	r3, r2
    5e36:	009b      	lsls	r3, r3, #2
    5e38:	440b      	add	r3, r1
    5e3a:	68db      	ldr	r3, [r3, #12]
    5e3c:	2b03      	cmp	r3, #3
    5e3e:	d162      	bne.n	5f06 <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    5e40:	f001 fa14 	bl	726c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5e44:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5e48:	095b      	lsrs	r3, r3, #5
    5e4a:	b29b      	uxth	r3, r3
    5e4c:	461a      	mov	r2, r3
    5e4e:	4b36      	ldr	r3, [pc, #216]	; (5f28 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5e54:	6959      	ldr	r1, [r3, #20]
    5e56:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5e5a:	f003 031f 	and.w	r3, r3, #31
    5e5e:	2201      	movs	r2, #1
    5e60:	fa02 f303 	lsl.w	r3, r2, r3
    5e64:	43da      	mvns	r2, r3
    5e66:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5e6a:	095b      	lsrs	r3, r3, #5
    5e6c:	b29b      	uxth	r3, r3
    5e6e:	4618      	mov	r0, r3
    5e70:	4b2d      	ldr	r3, [pc, #180]	; (5f28 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5e72:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5e76:	400a      	ands	r2, r1
    5e78:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    5e7a:	f001 fa23 	bl	72c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    5e7e:	f001 fa47 	bl	7310 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5e82:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5e86:	095b      	lsrs	r3, r3, #5
    5e88:	b29b      	uxth	r3, r3
    5e8a:	461a      	mov	r2, r3
    5e8c:	4b26      	ldr	r3, [pc, #152]	; (5f28 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5e92:	6999      	ldr	r1, [r3, #24]
    5e94:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5e98:	f003 031f 	and.w	r3, r3, #31
    5e9c:	2201      	movs	r2, #1
    5e9e:	fa02 f303 	lsl.w	r3, r2, r3
    5ea2:	43da      	mvns	r2, r3
    5ea4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5ea8:	095b      	lsrs	r3, r3, #5
    5eaa:	b29b      	uxth	r3, r3
    5eac:	4618      	mov	r0, r3
    5eae:	4b1e      	ldr	r3, [pc, #120]	; (5f28 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5eb0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5eb4:	400a      	ands	r2, r1
    5eb6:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    5eb8:	9b01      	ldr	r3, [sp, #4]
    5eba:	68d9      	ldr	r1, [r3, #12]
    5ebc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5ec0:	4613      	mov	r3, r2
    5ec2:	009b      	lsls	r3, r3, #2
    5ec4:	4413      	add	r3, r2
    5ec6:	009b      	lsls	r3, r3, #2
    5ec8:	440b      	add	r3, r1
    5eca:	68db      	ldr	r3, [r3, #12]
    5ecc:	2b03      	cmp	r3, #3
    5ece:	d118      	bne.n	5f02 <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5ed0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5ed4:	095b      	lsrs	r3, r3, #5
    5ed6:	b29b      	uxth	r3, r3
    5ed8:	461a      	mov	r2, r3
    5eda:	4b13      	ldr	r3, [pc, #76]	; (5f28 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5ee0:	6999      	ldr	r1, [r3, #24]
    5ee2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5ee6:	f003 031f 	and.w	r3, r3, #31
    5eea:	2201      	movs	r2, #1
    5eec:	409a      	lsls	r2, r3
    5eee:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5ef2:	095b      	lsrs	r3, r3, #5
    5ef4:	b29b      	uxth	r3, r3
    5ef6:	4618      	mov	r0, r3
    5ef8:	4b0b      	ldr	r3, [pc, #44]	; (5f28 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5efa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5efe:	430a      	orrs	r2, r1
    5f00:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    5f02:	f001 fa31 	bl	7368 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    5f06:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5f0a:	3301      	adds	r3, #1
    5f0c:	f8ad 300e 	strh.w	r3, [sp, #14]
    5f10:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5f14:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    5f18:	429a      	cmp	r2, r3
    5f1a:	f4ff af26 	bcc.w	5d6a <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    5f1e:	bf00      	nop
    5f20:	bf00      	nop
    5f22:	b005      	add	sp, #20
    5f24:	f85d fb04 	ldr.w	pc, [sp], #4
    5f28:	00007fcc 	.word	0x00007fcc

00005f2c <Dio_ReadChannel>:
*/
Dio_LevelType Dio_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    5f2c:	b500      	push	{lr}
    5f2e:	b085      	sub	sp, #20
    5f30:	4603      	mov	r3, r0
    5f32:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    5f36:	2300      	movs	r3, #0
    5f38:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForRead(ChannelId, DIO_READCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_ReadChannel(ChannelId);
    5f3c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5f40:	4618      	mov	r0, r3
    5f42:	f000 f871 	bl	6028 <Dio_Ipw_ReadChannel>
    5f46:	4603      	mov	r3, r0
    5f48:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return ChannelLevel;
    5f4c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5f50:	4618      	mov	r0, r3
    5f52:	b005      	add	sp, #20
    5f54:	f85d fb04 	ldr.w	pc, [sp], #4

00005f58 <Dio_WriteChannel>:
void Dio_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    5f58:	b500      	push	{lr}
    5f5a:	b083      	sub	sp, #12
    5f5c:	4603      	mov	r3, r0
    5f5e:	460a      	mov	r2, r1
    5f60:	f8ad 3006 	strh.w	r3, [sp, #6]
    5f64:	4613      	mov	r3, r2
    5f66:	f88d 3005 	strb.w	r3, [sp, #5]
    {
        Valid = Dio_ValidateChannelLevel(Level);
        if ((Std_ReturnType) E_OK == Valid)
        {
#endif
            Dio_Ipw_WriteChannel(ChannelId, Level);
    5f6a:	f89d 2005 	ldrb.w	r2, [sp, #5]
    5f6e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5f72:	4611      	mov	r1, r2
    5f74:	4618      	mov	r0, r3
    5f76:	f000 f87d 	bl	6074 <Dio_Ipw_WriteChannel>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
        }
    }
#endif

}
    5f7a:	bf00      	nop
    5f7c:	b003      	add	sp, #12
    5f7e:	f85d fb04 	ldr.w	pc, [sp], #4

00005f82 <Dio_FlipChannel>:
*/
Dio_LevelType Dio_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    5f82:	b500      	push	{lr}
    5f84:	b085      	sub	sp, #20
    5f86:	4603      	mov	r3, r0
    5f88:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    5f8c:	2300      	movs	r3, #0
    5f8e:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForWrite(ChannelId, DIO_FLIPCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_FlipChannel(ChannelId);
    5f92:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5f96:	4618      	mov	r0, r3
    5f98:	f000 f892 	bl	60c0 <Dio_Ipw_FlipChannel>
    5f9c:	4603      	mov	r3, r0
    5f9e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

   return ChannelLevel;
    5fa2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5fa6:	4618      	mov	r0, r3
    5fa8:	b005      	add	sp, #20
    5faa:	f85d fb04 	ldr.w	pc, [sp], #4

00005fae <Dio_ReadPort>:
*/
Dio_PortLevelType Dio_ReadPort
(
    Dio_PortType PortId
)
{
    5fae:	b500      	push	{lr}
    5fb0:	b085      	sub	sp, #20
    5fb2:	4603      	mov	r3, r0
    5fb4:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    5fb8:	2300      	movs	r3, #0
    5fba:	9303      	str	r3, [sp, #12]
    Std_ReturnType Valid = Dio_ValidatePortForRead(PortId, DIO_READPORT_ID);

    if ((Std_ReturnType) E_OK == Valid)
    {
#endif
        PortLevel = Dio_Ipw_ReadPort(PortId);
    5fbc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5fc0:	4618      	mov	r0, r3
    5fc2:	f000 f8b3 	bl	612c <Dio_Ipw_ReadPort>
    5fc6:	9003      	str	r0, [sp, #12]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return PortLevel;
    5fc8:	9b03      	ldr	r3, [sp, #12]
}
    5fca:	4618      	mov	r0, r3
    5fcc:	b005      	add	sp, #20
    5fce:	f85d fb04 	ldr.w	pc, [sp], #4

00005fd2 <Dio_WritePort>:
void Dio_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    5fd2:	b500      	push	{lr}
    5fd4:	b083      	sub	sp, #12
    5fd6:	4603      	mov	r3, r0
    5fd8:	9100      	str	r1, [sp, #0]
    5fda:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType Valid = Dio_ValidatePortForWrite(PortId, DIO_WRITEPORT_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        Dio_Ipw_WritePort(PortId, Level);
    5fde:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5fe2:	9900      	ldr	r1, [sp, #0]
    5fe4:	4618      	mov	r0, r3
    5fe6:	f000 f8b9 	bl	615c <Dio_Ipw_WritePort>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif
}
    5fea:	bf00      	nop
    5fec:	b003      	add	sp, #12
    5fee:	f85d fb04 	ldr.w	pc, [sp], #4

00005ff2 <Dio_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_ReadChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr
)
{
    5ff2:	b500      	push	{lr}
    5ff4:	b085      	sub	sp, #20
    5ff6:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    5ff8:	2300      	movs	r3, #0
    5ffa:	9303      	str	r3, [sp, #12]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            PortLevel = Dio_Ipw_ReadChannelGroup(ChannelGroupIdPtr);
    5ffc:	9801      	ldr	r0, [sp, #4]
    5ffe:	f000 f8c5 	bl	618c <Dio_Ipw_ReadChannelGroup>
    6002:	9003      	str	r0, [sp, #12]
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */

    return PortLevel;
    6004:	9b03      	ldr	r3, [sp, #12]
}
    6006:	4618      	mov	r0, r3
    6008:	b005      	add	sp, #20
    600a:	f85d fb04 	ldr.w	pc, [sp], #4

0000600e <Dio_WriteChannelGroup>:
void Dio_WriteChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr,
    Dio_PortLevelType Level
)
{
    600e:	b500      	push	{lr}
    6010:	b083      	sub	sp, #12
    6012:	9001      	str	r0, [sp, #4]
    6014:	9100      	str	r1, [sp, #0]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            Dio_Ipw_WriteChannelGroup(ChannelGroupIdPtr, Level);
    6016:	9900      	ldr	r1, [sp, #0]
    6018:	9801      	ldr	r0, [sp, #4]
    601a:	f000 f8d7 	bl	61cc <Dio_Ipw_WriteChannelGroup>
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNELGROUP_ID, DIO_E_PARAM_CONFIG);
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */
}
    601e:	bf00      	nop
    6020:	b003      	add	sp, #12
    6022:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00006028 <Dio_Ipw_ReadChannel>:
*/
Dio_LevelType Dio_Ipw_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    6028:	b500      	push	{lr}
    602a:	b087      	sub	sp, #28
    602c:	4603      	mov	r3, r0
    602e:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType) STD_LOW;
    6032:	2300      	movs	r3, #0
    6034:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    6038:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    603c:	095b      	lsrs	r3, r3, #5
    603e:	b29b      	uxth	r3, r3
    6040:	9304      	str	r3, [sp, #16]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    6042:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6046:	f003 031f 	and.w	r3, r3, #31
    604a:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    604c:	4a08      	ldr	r2, [pc, #32]	; (6070 <Dio_Ipw_ReadChannel+0x48>)
    604e:	9b04      	ldr	r3, [sp, #16]
    6050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6054:	9302      	str	r3, [sp, #8]

    ChannelLevel = Gpio_Dio_Ip_ReadPin(GpioBase, u32PinIndex);
    6056:	9903      	ldr	r1, [sp, #12]
    6058:	9802      	ldr	r0, [sp, #8]
    605a:	f000 f940 	bl	62de <Gpio_Dio_Ip_ReadPin>
    605e:	4603      	mov	r3, r0
    6060:	f88d 3017 	strb.w	r3, [sp, #23]
    return ChannelLevel;
    6064:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    6068:	4618      	mov	r0, r3
    606a:	b007      	add	sp, #28
    606c:	f85d fb04 	ldr.w	pc, [sp], #4
    6070:	1fff8b24 	.word	0x1fff8b24

00006074 <Dio_Ipw_WriteChannel>:
void Dio_Ipw_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    6074:	b500      	push	{lr}
    6076:	b087      	sub	sp, #28
    6078:	4603      	mov	r3, r0
    607a:	460a      	mov	r2, r1
    607c:	f8ad 3006 	strh.w	r3, [sp, #6]
    6080:	4613      	mov	r3, r2
    6082:	f88d 3005 	strb.w	r3, [sp, #5]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    6086:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    608a:	095b      	lsrs	r3, r3, #5
    608c:	b29b      	uxth	r3, r3
    608e:	9305      	str	r3, [sp, #20]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    6090:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6094:	f003 031f 	and.w	r3, r3, #31
    6098:	9304      	str	r3, [sp, #16]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    609a:	4a08      	ldr	r2, [pc, #32]	; (60bc <Dio_Ipw_WriteChannel+0x48>)
    609c:	9b05      	ldr	r3, [sp, #20]
    609e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    60a2:	9303      	str	r3, [sp, #12]

    Gpio_Dio_Ip_WritePin(GpioBase, u32PinIndex, Level);
    60a4:	f89d 3005 	ldrb.w	r3, [sp, #5]
    60a8:	461a      	mov	r2, r3
    60aa:	9904      	ldr	r1, [sp, #16]
    60ac:	9803      	ldr	r0, [sp, #12]
    60ae:	f000 f8b7 	bl	6220 <Gpio_Dio_Ip_WritePin>
}
    60b2:	bf00      	nop
    60b4:	b007      	add	sp, #28
    60b6:	f85d fb04 	ldr.w	pc, [sp], #4
    60ba:	bf00      	nop
    60bc:	1fff8b24 	.word	0x1fff8b24

000060c0 <Dio_Ipw_FlipChannel>:
*/
Dio_LevelType Dio_Ipw_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    60c0:	b500      	push	{lr}
    60c2:	b089      	sub	sp, #36	; 0x24
    60c4:	4603      	mov	r3, r0
    60c6:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    60ca:	2300      	movs	r3, #0
    60cc:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;
    uint32 u32PortOutPutLevel;
    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    60d0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    60d4:	095b      	lsrs	r3, r3, #5
    60d6:	b29b      	uxth	r3, r3
    60d8:	9306      	str	r3, [sp, #24]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    60da:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    60de:	f003 031f 	and.w	r3, r3, #31
    60e2:	9305      	str	r3, [sp, #20]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    60e4:	4a10      	ldr	r2, [pc, #64]	; (6128 <Dio_Ipw_FlipChannel+0x68>)
    60e6:	9b06      	ldr	r3, [sp, #24]
    60e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    60ec:	9304      	str	r3, [sp, #16]

    Gpio_Dio_Ip_TogglePins(GpioBase, ((uint32)1U << u32PinIndex));
    60ee:	2201      	movs	r2, #1
    60f0:	9b05      	ldr	r3, [sp, #20]
    60f2:	fa02 f303 	lsl.w	r3, r2, r3
    60f6:	4619      	mov	r1, r3
    60f8:	9804      	ldr	r0, [sp, #16]
    60fa:	f000 f8dc 	bl	62b6 <Gpio_Dio_Ip_TogglePins>

    u32PortOutPutLevel = Gpio_Dio_Ip_GetPinsOutput(GpioBase);
    60fe:	9804      	ldr	r0, [sp, #16]
    6100:	f000 f8bc 	bl	627c <Gpio_Dio_Ip_GetPinsOutput>
    6104:	9003      	str	r0, [sp, #12]
    ChannelLevel = (Dio_LevelType)((u32PortOutPutLevel & ((uint32)1U << u32PinIndex)) >> u32PinIndex);
    6106:	2201      	movs	r2, #1
    6108:	9b05      	ldr	r3, [sp, #20]
    610a:	409a      	lsls	r2, r3
    610c:	9b03      	ldr	r3, [sp, #12]
    610e:	401a      	ands	r2, r3
    6110:	9b05      	ldr	r3, [sp, #20]
    6112:	fa22 f303 	lsr.w	r3, r2, r3
    6116:	f88d 301f 	strb.w	r3, [sp, #31]

    return ChannelLevel;
    611a:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    611e:	4618      	mov	r0, r3
    6120:	b009      	add	sp, #36	; 0x24
    6122:	f85d fb04 	ldr.w	pc, [sp], #4
    6126:	bf00      	nop
    6128:	1fff8b24 	.word	0x1fff8b24

0000612c <Dio_Ipw_ReadPort>:
*/
Dio_PortLevelType Dio_Ipw_ReadPort
(
    Dio_PortType PortId
)
{
    612c:	b500      	push	{lr}
    612e:	b085      	sub	sp, #20
    6130:	4603      	mov	r3, r0
    6132:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6136:	2300      	movs	r3, #0
    6138:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    613a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    613e:	4a06      	ldr	r2, [pc, #24]	; (6158 <Dio_Ipw_ReadPort+0x2c>)
    6140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6144:	9302      	str	r3, [sp, #8]

    PortLevel = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    6146:	9802      	ldr	r0, [sp, #8]
    6148:	f000 f8be 	bl	62c8 <Gpio_Dio_Ip_ReadPins>
    614c:	9003      	str	r0, [sp, #12]
#endif
#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#endif

    return PortLevel;
    614e:	9b03      	ldr	r3, [sp, #12]
}
    6150:	4618      	mov	r0, r3
    6152:	b005      	add	sp, #20
    6154:	f85d fb04 	ldr.w	pc, [sp], #4
    6158:	1fff8b24 	.word	0x1fff8b24

0000615c <Dio_Ipw_WritePort>:
void Dio_Ipw_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    615c:	b500      	push	{lr}
    615e:	b085      	sub	sp, #20
    6160:	4603      	mov	r3, r0
    6162:	9100      	str	r1, [sp, #0]
    6164:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType CrtLevel = Level;
    6168:	9b00      	ldr	r3, [sp, #0]
    616a:	9303      	str	r3, [sp, #12]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    616c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6170:	4a05      	ldr	r2, [pc, #20]	; (6188 <Dio_Ipw_WritePort+0x2c>)
    6172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6176:	9302      	str	r3, [sp, #8]

#if (STD_ON == DIO_REVERSEPORTBITS)
    CrtLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(CrtLevel));
#endif /* STD_ON == DIO_REVERSEPORTBITS */
    Gpio_Dio_Ip_WritePins(GpioBase, CrtLevel);
    6178:	9903      	ldr	r1, [sp, #12]
    617a:	9802      	ldr	r0, [sp, #8]
    617c:	f000 f875 	bl	626a <Gpio_Dio_Ip_WritePins>
}
    6180:	bf00      	nop
    6182:	b005      	add	sp, #20
    6184:	f85d fb04 	ldr.w	pc, [sp], #4
    6188:	1fff8b24 	.word	0x1fff8b24

0000618c <Dio_Ipw_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_Ipw_ReadChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr
)
{
    618c:	b500      	push	{lr}
    618e:	b087      	sub	sp, #28
    6190:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6192:	2300      	movs	r3, #0
    6194:	9305      	str	r3, [sp, #20]
    Dio_PortLevelType pinsValue;
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    6196:	9b01      	ldr	r3, [sp, #4]
    6198:	781b      	ldrb	r3, [r3, #0]
    619a:	461a      	mov	r2, r3
    619c:	4b0a      	ldr	r3, [pc, #40]	; (61c8 <Dio_Ipw_ReadChannelGroup+0x3c>)
    619e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    61a2:	9304      	str	r3, [sp, #16]

    pinsValue = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    61a4:	9804      	ldr	r0, [sp, #16]
    61a6:	f000 f88f 	bl	62c8 <Gpio_Dio_Ip_ReadPins>
    61aa:	9003      	str	r0, [sp, #12]

#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) << (pChannelGroupIdPtr->u8offset));
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#else
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) >> (pChannelGroupIdPtr->u8offset));
    61ac:	9b01      	ldr	r3, [sp, #4]
    61ae:	685a      	ldr	r2, [r3, #4]
    61b0:	9b03      	ldr	r3, [sp, #12]
    61b2:	4013      	ands	r3, r2
    61b4:	9a01      	ldr	r2, [sp, #4]
    61b6:	7852      	ldrb	r2, [r2, #1]
    61b8:	40d3      	lsrs	r3, r2
    61ba:	9305      	str	r3, [sp, #20]
#endif

    return PortLevel;
    61bc:	9b05      	ldr	r3, [sp, #20]
}
    61be:	4618      	mov	r0, r3
    61c0:	b007      	add	sp, #28
    61c2:	f85d fb04 	ldr.w	pc, [sp], #4
    61c6:	bf00      	nop
    61c8:	1fff8b24 	.word	0x1fff8b24

000061cc <Dio_Ipw_WriteChannelGroup>:
void Dio_Ipw_WriteChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr,
    Dio_PortLevelType                 Level
)
{
    61cc:	b500      	push	{lr}
    61ce:	b087      	sub	sp, #28
    61d0:	9001      	str	r0, [sp, #4]
    61d2:	9100      	str	r1, [sp, #0]
    Dio_PortLevelType ValueSet;
    Dio_PortLevelType ValueClear;

    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    61d4:	9b01      	ldr	r3, [sp, #4]
    61d6:	781b      	ldrb	r3, [r3, #0]
    61d8:	461a      	mov	r2, r3
    61da:	4b10      	ldr	r3, [pc, #64]	; (621c <Dio_Ipw_WriteChannelGroup+0x50>)
    61dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    61e0:	9305      	str	r3, [sp, #20]

#if (STD_ON == DIO_REVERSEPORTBITS)
    ValueSet = (((Dio_PortLevelType)(Dio_Ipw_ReverseBits(Level)) >> (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
#else
    ValueSet = (((Dio_PortLevelType)(Level) << (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
    61e2:	9b01      	ldr	r3, [sp, #4]
    61e4:	785b      	ldrb	r3, [r3, #1]
    61e6:	461a      	mov	r2, r3
    61e8:	9b00      	ldr	r3, [sp, #0]
    61ea:	fa03 f202 	lsl.w	r2, r3, r2
    61ee:	9b01      	ldr	r3, [sp, #4]
    61f0:	685b      	ldr	r3, [r3, #4]
    61f2:	4013      	ands	r3, r2
    61f4:	9304      	str	r3, [sp, #16]
#endif

    Gpio_Dio_Ip_SetPins(GpioBase, ValueSet);
    61f6:	9904      	ldr	r1, [sp, #16]
    61f8:	9805      	ldr	r0, [sp, #20]
    61fa:	f000 f84a 	bl	6292 <Gpio_Dio_Ip_SetPins>
    ValueClear = (~ValueSet) & pChannelGroupIdPtr->mask;
    61fe:	9b04      	ldr	r3, [sp, #16]
    6200:	43da      	mvns	r2, r3
    6202:	9b01      	ldr	r3, [sp, #4]
    6204:	685b      	ldr	r3, [r3, #4]
    6206:	4013      	ands	r3, r2
    6208:	9303      	str	r3, [sp, #12]
    Gpio_Dio_Ip_ClearPins(GpioBase, ValueClear);
    620a:	9903      	ldr	r1, [sp, #12]
    620c:	9805      	ldr	r0, [sp, #20]
    620e:	f000 f849 	bl	62a4 <Gpio_Dio_Ip_ClearPins>

}
    6212:	bf00      	nop
    6214:	b007      	add	sp, #28
    6216:	f85d fb04 	ldr.w	pc, [sp], #4
    621a:	bf00      	nop
    621c:	1fff8b24 	.word	0x1fff8b24

00006220 <Gpio_Dio_Ip_WritePin>:
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pin,
    Gpio_Dio_Ip_PinsLevelType value
)
{
    6220:	b500      	push	{lr}
    6222:	b087      	sub	sp, #28
    6224:	9003      	str	r0, [sp, #12]
    6226:	9102      	str	r1, [sp, #8]
    6228:	4613      	mov	r3, r2
    622a:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Enter critical region */
    SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00();
    622e:	f000 f86d 	bl	630c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>
    Gpio_Dio_Ip_PinsChannelType pinsValues = (Gpio_Dio_Ip_PinsChannelType)base->PDOR;
    6232:	9b03      	ldr	r3, [sp, #12]
    6234:	681b      	ldr	r3, [r3, #0]
    6236:	9305      	str	r3, [sp, #20]
    pinsValues &= (Gpio_Dio_Ip_PinsChannelType)(~((Gpio_Dio_Ip_PinsChannelType)1U << pin));
    6238:	2201      	movs	r2, #1
    623a:	9b02      	ldr	r3, [sp, #8]
    623c:	fa02 f303 	lsl.w	r3, r2, r3
    6240:	43db      	mvns	r3, r3
    6242:	9a05      	ldr	r2, [sp, #20]
    6244:	4013      	ands	r3, r2
    6246:	9305      	str	r3, [sp, #20]
    pinsValues |= (Gpio_Dio_Ip_PinsChannelType)((Gpio_Dio_Ip_PinsChannelType)value << pin);
    6248:	f89d 2007 	ldrb.w	r2, [sp, #7]
    624c:	9b02      	ldr	r3, [sp, #8]
    624e:	fa02 f303 	lsl.w	r3, r2, r3
    6252:	9a05      	ldr	r2, [sp, #20]
    6254:	4313      	orrs	r3, r2
    6256:	9305      	str	r3, [sp, #20]
    base->PDOR = GPIO_PDOR_PDO(pinsValues);
    6258:	9b03      	ldr	r3, [sp, #12]
    625a:	9a05      	ldr	r2, [sp, #20]
    625c:	601a      	str	r2, [r3, #0]
    /* Exit critical region */
    SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00();
    625e:	f000 f881 	bl	6364 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>
}
    6262:	bf00      	nop
    6264:	b007      	add	sp, #28
    6266:	f85d fb04 	ldr.w	pc, [sp], #4

0000626a <Gpio_Dio_Ip_WritePins>:
void Gpio_Dio_Ip_WritePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    626a:	b082      	sub	sp, #8
    626c:	9001      	str	r0, [sp, #4]
    626e:	9100      	str	r1, [sp, #0]
    base->PDOR = GPIO_PDOR_PDO(pins);
    6270:	9b01      	ldr	r3, [sp, #4]
    6272:	9a00      	ldr	r2, [sp, #0]
    6274:	601a      	str	r2, [r3, #0]
}
    6276:	bf00      	nop
    6278:	b002      	add	sp, #8
    627a:	4770      	bx	lr

0000627c <Gpio_Dio_Ip_GetPinsOutput>:
 * that are configured as output will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_GetPinsOutput_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_GetPinsOutput(const GPIO_Type * const base)
{
    627c:	b084      	sub	sp, #16
    627e:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    6280:	2300      	movs	r3, #0
    6282:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDOR);
    6284:	9b01      	ldr	r3, [sp, #4]
    6286:	681b      	ldr	r3, [r3, #0]
    6288:	9303      	str	r3, [sp, #12]
    return returnValue;
    628a:	9b03      	ldr	r3, [sp, #12]
}
    628c:	4618      	mov	r0, r3
    628e:	b004      	add	sp, #16
    6290:	4770      	bx	lr

00006292 <Gpio_Dio_Ip_SetPins>:
void Gpio_Dio_Ip_SetPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6292:	b082      	sub	sp, #8
    6294:	9001      	str	r0, [sp, #4]
    6296:	9100      	str	r1, [sp, #0]
    base->PSOR = GPIO_PSOR_PTSO(pins);
    6298:	9b01      	ldr	r3, [sp, #4]
    629a:	9a00      	ldr	r2, [sp, #0]
    629c:	605a      	str	r2, [r3, #4]
}
    629e:	bf00      	nop
    62a0:	b002      	add	sp, #8
    62a2:	4770      	bx	lr

000062a4 <Gpio_Dio_Ip_ClearPins>:
void Gpio_Dio_Ip_ClearPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    62a4:	b082      	sub	sp, #8
    62a6:	9001      	str	r0, [sp, #4]
    62a8:	9100      	str	r1, [sp, #0]
    base->PCOR = GPIO_PCOR_PTCO(pins);
    62aa:	9b01      	ldr	r3, [sp, #4]
    62ac:	9a00      	ldr	r2, [sp, #0]
    62ae:	609a      	str	r2, [r3, #8]
}
    62b0:	bf00      	nop
    62b2:	b002      	add	sp, #8
    62b4:	4770      	bx	lr

000062b6 <Gpio_Dio_Ip_TogglePins>:
void Gpio_Dio_Ip_TogglePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    62b6:	b082      	sub	sp, #8
    62b8:	9001      	str	r0, [sp, #4]
    62ba:	9100      	str	r1, [sp, #0]
    base->PTOR = GPIO_PTOR_PTTO(pins);
    62bc:	9b01      	ldr	r3, [sp, #4]
    62be:	9a00      	ldr	r2, [sp, #0]
    62c0:	60da      	str	r2, [r3, #12]
}
    62c2:	bf00      	nop
    62c4:	b002      	add	sp, #8
    62c6:	4770      	bx	lr

000062c8 <Gpio_Dio_Ip_ReadPins>:
 * configured as input will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_ReadPins_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_ReadPins(const GPIO_Type * const base)
{
    62c8:	b084      	sub	sp, #16
    62ca:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    62cc:	2300      	movs	r3, #0
    62ce:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDIR);
    62d0:	9b01      	ldr	r3, [sp, #4]
    62d2:	691b      	ldr	r3, [r3, #16]
    62d4:	9303      	str	r3, [sp, #12]
    return returnValue;
    62d6:	9b03      	ldr	r3, [sp, #12]
}
    62d8:	4618      	mov	r0, r3
    62da:	b004      	add	sp, #16
    62dc:	4770      	bx	lr

000062de <Gpio_Dio_Ip_ReadPin>:
 * configured as input will have meaningful value.
 *
 * @implements    Gpio_Dio_Ip_ReadPin_Activity
 */
Gpio_Dio_Ip_PinsLevelType Gpio_Dio_Ip_ReadPin(const GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pin)
{
    62de:	b084      	sub	sp, #16
    62e0:	9001      	str	r0, [sp, #4]
    62e2:	9100      	str	r1, [sp, #0]
    Gpio_Dio_Ip_PinsLevelType returnValue = 0U;
    62e4:	2300      	movs	r3, #0
    62e6:	f88d 300f 	strb.w	r3, [sp, #15]
    returnValue  = (Gpio_Dio_Ip_PinsLevelType)(((base->PDIR)&((uint32)1<<pin))>>(pin));
    62ea:	9b01      	ldr	r3, [sp, #4]
    62ec:	691a      	ldr	r2, [r3, #16]
    62ee:	2101      	movs	r1, #1
    62f0:	9b00      	ldr	r3, [sp, #0]
    62f2:	fa01 f303 	lsl.w	r3, r1, r3
    62f6:	401a      	ands	r2, r3
    62f8:	9b00      	ldr	r3, [sp, #0]
    62fa:	fa22 f303 	lsr.w	r3, r2, r3
    62fe:	f88d 300f 	strb.w	r3, [sp, #15]

    return returnValue;
    6302:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6306:	4618      	mov	r0, r3
    6308:	b004      	add	sp, #16
    630a:	4770      	bx	lr

0000630c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    630c:	b500      	push	{lr}
    630e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6310:	f7fa fea0 	bl	1054 <Sys_GetCoreID>
    6314:	4603      	mov	r3, r0
    6316:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId])
    6318:	4a10      	ldr	r2, [pc, #64]	; (635c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    631a:	9b01      	ldr	r3, [sp, #4]
    631c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6320:	2b00      	cmp	r3, #0
    6322:	d10d      	bne.n	6340 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6324:	f7fa fad0 	bl	8c8 <Dio_schm_read_msr>
    6328:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    632a:	9b00      	ldr	r3, [sp, #0]
    632c:	f003 0301 	and.w	r3, r3, #1
    6330:	2b00      	cmp	r3, #0
    6332:	d100      	bne.n	6336 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6334:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    6336:	490a      	ldr	r1, [pc, #40]	; (6360 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x54>)
    6338:	9b01      	ldr	r3, [sp, #4]
    633a:	9a00      	ldr	r2, [sp, #0]
    633c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]++;
    6340:	4a06      	ldr	r2, [pc, #24]	; (635c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    6342:	9b01      	ldr	r3, [sp, #4]
    6344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6348:	1c5a      	adds	r2, r3, #1
    634a:	4904      	ldr	r1, [pc, #16]	; (635c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    634c:	9b01      	ldr	r3, [sp, #4]
    634e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6352:	bf00      	nop
    6354:	b003      	add	sp, #12
    6356:	f85d fb04 	ldr.w	pc, [sp], #4
    635a:	bf00      	nop
    635c:	1fff8d00 	.word	0x1fff8d00
    6360:	1fff8cfc 	.word	0x1fff8cfc

00006364 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    6364:	b500      	push	{lr}
    6366:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6368:	f7fa fe74 	bl	1054 <Sys_GetCoreID>
    636c:	4603      	mov	r3, r0
    636e:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]--;
    6370:	4a0d      	ldr	r2, [pc, #52]	; (63a8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    6372:	9b01      	ldr	r3, [sp, #4]
    6374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6378:	1e5a      	subs	r2, r3, #1
    637a:	490b      	ldr	r1, [pc, #44]	; (63a8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    637c:	9b01      	ldr	r3, [sp, #4]
    637e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    6382:	4a0a      	ldr	r2, [pc, #40]	; (63ac <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x48>)
    6384:	9b01      	ldr	r3, [sp, #4]
    6386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    638a:	f003 0301 	and.w	r3, r3, #1
    638e:	2b00      	cmp	r3, #0
    6390:	d106      	bne.n	63a0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    6392:	4a05      	ldr	r2, [pc, #20]	; (63a8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    6394:	9b01      	ldr	r3, [sp, #4]
    6396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    639a:	2b00      	cmp	r3, #0
    639c:	d100      	bne.n	63a0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    639e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    63a0:	bf00      	nop
    63a2:	b003      	add	sp, #12
    63a4:	f85d fb04 	ldr.w	pc, [sp], #4
    63a8:	1fff8d00 	.word	0x1fff8d00
    63ac:	1fff8cfc 	.word	0x1fff8cfc

000063b0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    63b0:	b500      	push	{lr}
    63b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    63b4:	f7fa fe4e 	bl	1054 <Sys_GetCoreID>
    63b8:	4603      	mov	r3, r0
    63ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId])
    63bc:	4a10      	ldr	r2, [pc, #64]	; (6400 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    63be:	9b01      	ldr	r3, [sp, #4]
    63c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    63c4:	2b00      	cmp	r3, #0
    63c6:	d10d      	bne.n	63e4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    63c8:	f7fa fa7e 	bl	8c8 <Dio_schm_read_msr>
    63cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    63ce:	9b00      	ldr	r3, [sp, #0]
    63d0:	f003 0301 	and.w	r3, r3, #1
    63d4:	2b00      	cmp	r3, #0
    63d6:	d100      	bne.n	63da <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    63d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    63da:	490a      	ldr	r1, [pc, #40]	; (6404 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x54>)
    63dc:	9b01      	ldr	r3, [sp, #4]
    63de:	9a00      	ldr	r2, [sp, #0]
    63e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]++;
    63e4:	4a06      	ldr	r2, [pc, #24]	; (6400 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    63e6:	9b01      	ldr	r3, [sp, #4]
    63e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    63ec:	1c5a      	adds	r2, r3, #1
    63ee:	4904      	ldr	r1, [pc, #16]	; (6400 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    63f0:	9b01      	ldr	r3, [sp, #4]
    63f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    63f6:	bf00      	nop
    63f8:	b003      	add	sp, #12
    63fa:	f85d fb04 	ldr.w	pc, [sp], #4
    63fe:	bf00      	nop
    6400:	1fff8d08 	.word	0x1fff8d08
    6404:	1fff8d04 	.word	0x1fff8d04

00006408 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    6408:	b500      	push	{lr}
    640a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    640c:	f7fa fe22 	bl	1054 <Sys_GetCoreID>
    6410:	4603      	mov	r3, r0
    6412:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]--;
    6414:	4a0d      	ldr	r2, [pc, #52]	; (644c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    6416:	9b01      	ldr	r3, [sp, #4]
    6418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    641c:	1e5a      	subs	r2, r3, #1
    641e:	490b      	ldr	r1, [pc, #44]	; (644c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    6420:	9b01      	ldr	r3, [sp, #4]
    6422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    6426:	4a0a      	ldr	r2, [pc, #40]	; (6450 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x48>)
    6428:	9b01      	ldr	r3, [sp, #4]
    642a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    642e:	f003 0301 	and.w	r3, r3, #1
    6432:	2b00      	cmp	r3, #0
    6434:	d106      	bne.n	6444 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    6436:	4a05      	ldr	r2, [pc, #20]	; (644c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    6438:	9b01      	ldr	r3, [sp, #4]
    643a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    643e:	2b00      	cmp	r3, #0
    6440:	d100      	bne.n	6444 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6442:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6444:	bf00      	nop
    6446:	b003      	add	sp, #12
    6448:	f85d fb04 	ldr.w	pc, [sp], #4
    644c:	1fff8d08 	.word	0x1fff8d08
    6450:	1fff8d04 	.word	0x1fff8d04

00006454 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    6454:	b500      	push	{lr}
    6456:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6458:	f7fa fdfc 	bl	1054 <Sys_GetCoreID>
    645c:	4603      	mov	r3, r0
    645e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    6460:	4a10      	ldr	r2, [pc, #64]	; (64a4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    6462:	9b01      	ldr	r3, [sp, #4]
    6464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6468:	2b00      	cmp	r3, #0
    646a:	d10d      	bne.n	6488 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    646c:	f7fa fa35 	bl	8da <Mcu_schm_read_msr>
    6470:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6472:	9b00      	ldr	r3, [sp, #0]
    6474:	f003 0301 	and.w	r3, r3, #1
    6478:	2b00      	cmp	r3, #0
    647a:	d100      	bne.n	647e <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    647c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    647e:	490a      	ldr	r1, [pc, #40]	; (64a8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    6480:	9b01      	ldr	r3, [sp, #4]
    6482:	9a00      	ldr	r2, [sp, #0]
    6484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    6488:	4a06      	ldr	r2, [pc, #24]	; (64a4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    648a:	9b01      	ldr	r3, [sp, #4]
    648c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6490:	1c5a      	adds	r2, r3, #1
    6492:	4904      	ldr	r1, [pc, #16]	; (64a4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    6494:	9b01      	ldr	r3, [sp, #4]
    6496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    649a:	bf00      	nop
    649c:	b003      	add	sp, #12
    649e:	f85d fb04 	ldr.w	pc, [sp], #4
    64a2:	bf00      	nop
    64a4:	1fff8d10 	.word	0x1fff8d10
    64a8:	1fff8d0c 	.word	0x1fff8d0c

000064ac <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    64ac:	b500      	push	{lr}
    64ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    64b0:	f7fa fdd0 	bl	1054 <Sys_GetCoreID>
    64b4:	4603      	mov	r3, r0
    64b6:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    64b8:	4a0d      	ldr	r2, [pc, #52]	; (64f0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    64ba:	9b01      	ldr	r3, [sp, #4]
    64bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    64c0:	1e5a      	subs	r2, r3, #1
    64c2:	490b      	ldr	r1, [pc, #44]	; (64f0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    64c4:	9b01      	ldr	r3, [sp, #4]
    64c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    64ca:	4a0a      	ldr	r2, [pc, #40]	; (64f4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    64cc:	9b01      	ldr	r3, [sp, #4]
    64ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    64d2:	f003 0301 	and.w	r3, r3, #1
    64d6:	2b00      	cmp	r3, #0
    64d8:	d106      	bne.n	64e8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    64da:	4a05      	ldr	r2, [pc, #20]	; (64f0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    64dc:	9b01      	ldr	r3, [sp, #4]
    64de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    64e2:	2b00      	cmp	r3, #0
    64e4:	d100      	bne.n	64e8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    64e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    64e8:	bf00      	nop
    64ea:	b003      	add	sp, #12
    64ec:	f85d fb04 	ldr.w	pc, [sp], #4
    64f0:	1fff8d10 	.word	0x1fff8d10
    64f4:	1fff8d0c 	.word	0x1fff8d0c

000064f8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    64f8:	b500      	push	{lr}
    64fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    64fc:	f7fa fdaa 	bl	1054 <Sys_GetCoreID>
    6500:	4603      	mov	r3, r0
    6502:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    6504:	4a10      	ldr	r2, [pc, #64]	; (6548 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    6506:	9b01      	ldr	r3, [sp, #4]
    6508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    650c:	2b00      	cmp	r3, #0
    650e:	d10d      	bne.n	652c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6510:	f7fa f9e3 	bl	8da <Mcu_schm_read_msr>
    6514:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6516:	9b00      	ldr	r3, [sp, #0]
    6518:	f003 0301 	and.w	r3, r3, #1
    651c:	2b00      	cmp	r3, #0
    651e:	d100      	bne.n	6522 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6520:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    6522:	490a      	ldr	r1, [pc, #40]	; (654c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    6524:	9b01      	ldr	r3, [sp, #4]
    6526:	9a00      	ldr	r2, [sp, #0]
    6528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    652c:	4a06      	ldr	r2, [pc, #24]	; (6548 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    652e:	9b01      	ldr	r3, [sp, #4]
    6530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6534:	1c5a      	adds	r2, r3, #1
    6536:	4904      	ldr	r1, [pc, #16]	; (6548 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    6538:	9b01      	ldr	r3, [sp, #4]
    653a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    653e:	bf00      	nop
    6540:	b003      	add	sp, #12
    6542:	f85d fb04 	ldr.w	pc, [sp], #4
    6546:	bf00      	nop
    6548:	1fff8d18 	.word	0x1fff8d18
    654c:	1fff8d14 	.word	0x1fff8d14

00006550 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    6550:	b500      	push	{lr}
    6552:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6554:	f7fa fd7e 	bl	1054 <Sys_GetCoreID>
    6558:	4603      	mov	r3, r0
    655a:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    655c:	4a0d      	ldr	r2, [pc, #52]	; (6594 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    655e:	9b01      	ldr	r3, [sp, #4]
    6560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6564:	1e5a      	subs	r2, r3, #1
    6566:	490b      	ldr	r1, [pc, #44]	; (6594 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    6568:	9b01      	ldr	r3, [sp, #4]
    656a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    656e:	4a0a      	ldr	r2, [pc, #40]	; (6598 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    6570:	9b01      	ldr	r3, [sp, #4]
    6572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6576:	f003 0301 	and.w	r3, r3, #1
    657a:	2b00      	cmp	r3, #0
    657c:	d106      	bne.n	658c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    657e:	4a05      	ldr	r2, [pc, #20]	; (6594 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    6580:	9b01      	ldr	r3, [sp, #4]
    6582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6586:	2b00      	cmp	r3, #0
    6588:	d100      	bne.n	658c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    658a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    658c:	bf00      	nop
    658e:	b003      	add	sp, #12
    6590:	f85d fb04 	ldr.w	pc, [sp], #4
    6594:	1fff8d18 	.word	0x1fff8d18
    6598:	1fff8d14 	.word	0x1fff8d14

0000659c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    659c:	b500      	push	{lr}
    659e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    65a0:	f7fa fd58 	bl	1054 <Sys_GetCoreID>
    65a4:	4603      	mov	r3, r0
    65a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    65a8:	4a10      	ldr	r2, [pc, #64]	; (65ec <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    65aa:	9b01      	ldr	r3, [sp, #4]
    65ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    65b0:	2b00      	cmp	r3, #0
    65b2:	d10d      	bne.n	65d0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    65b4:	f7fa f991 	bl	8da <Mcu_schm_read_msr>
    65b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    65ba:	9b00      	ldr	r3, [sp, #0]
    65bc:	f003 0301 	and.w	r3, r3, #1
    65c0:	2b00      	cmp	r3, #0
    65c2:	d100      	bne.n	65c6 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    65c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    65c6:	490a      	ldr	r1, [pc, #40]	; (65f0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    65c8:	9b01      	ldr	r3, [sp, #4]
    65ca:	9a00      	ldr	r2, [sp, #0]
    65cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    65d0:	4a06      	ldr	r2, [pc, #24]	; (65ec <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    65d2:	9b01      	ldr	r3, [sp, #4]
    65d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    65d8:	1c5a      	adds	r2, r3, #1
    65da:	4904      	ldr	r1, [pc, #16]	; (65ec <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    65dc:	9b01      	ldr	r3, [sp, #4]
    65de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    65e2:	bf00      	nop
    65e4:	b003      	add	sp, #12
    65e6:	f85d fb04 	ldr.w	pc, [sp], #4
    65ea:	bf00      	nop
    65ec:	1fff8d20 	.word	0x1fff8d20
    65f0:	1fff8d1c 	.word	0x1fff8d1c

000065f4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    65f4:	b500      	push	{lr}
    65f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    65f8:	f7fa fd2c 	bl	1054 <Sys_GetCoreID>
    65fc:	4603      	mov	r3, r0
    65fe:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    6600:	4a0d      	ldr	r2, [pc, #52]	; (6638 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    6602:	9b01      	ldr	r3, [sp, #4]
    6604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6608:	1e5a      	subs	r2, r3, #1
    660a:	490b      	ldr	r1, [pc, #44]	; (6638 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    660c:	9b01      	ldr	r3, [sp, #4]
    660e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    6612:	4a0a      	ldr	r2, [pc, #40]	; (663c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    6614:	9b01      	ldr	r3, [sp, #4]
    6616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    661a:	f003 0301 	and.w	r3, r3, #1
    661e:	2b00      	cmp	r3, #0
    6620:	d106      	bne.n	6630 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    6622:	4a05      	ldr	r2, [pc, #20]	; (6638 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    6624:	9b01      	ldr	r3, [sp, #4]
    6626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    662a:	2b00      	cmp	r3, #0
    662c:	d100      	bne.n	6630 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    662e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6630:	bf00      	nop
    6632:	b003      	add	sp, #12
    6634:	f85d fb04 	ldr.w	pc, [sp], #4
    6638:	1fff8d20 	.word	0x1fff8d20
    663c:	1fff8d1c 	.word	0x1fff8d1c

00006640 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    6640:	b500      	push	{lr}
    6642:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6644:	f7fa fd06 	bl	1054 <Sys_GetCoreID>
    6648:	4603      	mov	r3, r0
    664a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    664c:	4a10      	ldr	r2, [pc, #64]	; (6690 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    664e:	9b01      	ldr	r3, [sp, #4]
    6650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6654:	2b00      	cmp	r3, #0
    6656:	d10d      	bne.n	6674 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6658:	f7fa f948 	bl	8ec <Port_schm_read_msr>
    665c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    665e:	9b00      	ldr	r3, [sp, #0]
    6660:	f003 0301 	and.w	r3, r3, #1
    6664:	2b00      	cmp	r3, #0
    6666:	d100      	bne.n	666a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6668:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    666a:	490a      	ldr	r1, [pc, #40]	; (6694 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    666c:	9b01      	ldr	r3, [sp, #4]
    666e:	9a00      	ldr	r2, [sp, #0]
    6670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    6674:	4a06      	ldr	r2, [pc, #24]	; (6690 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    6676:	9b01      	ldr	r3, [sp, #4]
    6678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    667c:	1c5a      	adds	r2, r3, #1
    667e:	4904      	ldr	r1, [pc, #16]	; (6690 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    6680:	9b01      	ldr	r3, [sp, #4]
    6682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6686:	bf00      	nop
    6688:	b003      	add	sp, #12
    668a:	f85d fb04 	ldr.w	pc, [sp], #4
    668e:	bf00      	nop
    6690:	1fff8d28 	.word	0x1fff8d28
    6694:	1fff8d24 	.word	0x1fff8d24

00006698 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    6698:	b500      	push	{lr}
    669a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    669c:	f7fa fcda 	bl	1054 <Sys_GetCoreID>
    66a0:	4603      	mov	r3, r0
    66a2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    66a4:	4a0d      	ldr	r2, [pc, #52]	; (66dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    66a6:	9b01      	ldr	r3, [sp, #4]
    66a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    66ac:	1e5a      	subs	r2, r3, #1
    66ae:	490b      	ldr	r1, [pc, #44]	; (66dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    66b0:	9b01      	ldr	r3, [sp, #4]
    66b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    66b6:	4a0a      	ldr	r2, [pc, #40]	; (66e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    66b8:	9b01      	ldr	r3, [sp, #4]
    66ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    66be:	f003 0301 	and.w	r3, r3, #1
    66c2:	2b00      	cmp	r3, #0
    66c4:	d106      	bne.n	66d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    66c6:	4a05      	ldr	r2, [pc, #20]	; (66dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    66c8:	9b01      	ldr	r3, [sp, #4]
    66ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    66ce:	2b00      	cmp	r3, #0
    66d0:	d100      	bne.n	66d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    66d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    66d4:	bf00      	nop
    66d6:	b003      	add	sp, #12
    66d8:	f85d fb04 	ldr.w	pc, [sp], #4
    66dc:	1fff8d28 	.word	0x1fff8d28
    66e0:	1fff8d24 	.word	0x1fff8d24

000066e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    66e4:	b500      	push	{lr}
    66e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    66e8:	f7fa fcb4 	bl	1054 <Sys_GetCoreID>
    66ec:	4603      	mov	r3, r0
    66ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    66f0:	4a10      	ldr	r2, [pc, #64]	; (6734 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    66f2:	9b01      	ldr	r3, [sp, #4]
    66f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    66f8:	2b00      	cmp	r3, #0
    66fa:	d10d      	bne.n	6718 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    66fc:	f7fa f8f6 	bl	8ec <Port_schm_read_msr>
    6700:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6702:	9b00      	ldr	r3, [sp, #0]
    6704:	f003 0301 	and.w	r3, r3, #1
    6708:	2b00      	cmp	r3, #0
    670a:	d100      	bne.n	670e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    670c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    670e:	490a      	ldr	r1, [pc, #40]	; (6738 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    6710:	9b01      	ldr	r3, [sp, #4]
    6712:	9a00      	ldr	r2, [sp, #0]
    6714:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    6718:	4a06      	ldr	r2, [pc, #24]	; (6734 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    671a:	9b01      	ldr	r3, [sp, #4]
    671c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6720:	1c5a      	adds	r2, r3, #1
    6722:	4904      	ldr	r1, [pc, #16]	; (6734 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    6724:	9b01      	ldr	r3, [sp, #4]
    6726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    672a:	bf00      	nop
    672c:	b003      	add	sp, #12
    672e:	f85d fb04 	ldr.w	pc, [sp], #4
    6732:	bf00      	nop
    6734:	1fff8d30 	.word	0x1fff8d30
    6738:	1fff8d2c 	.word	0x1fff8d2c

0000673c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    673c:	b500      	push	{lr}
    673e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6740:	f7fa fc88 	bl	1054 <Sys_GetCoreID>
    6744:	4603      	mov	r3, r0
    6746:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    6748:	4a0d      	ldr	r2, [pc, #52]	; (6780 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    674a:	9b01      	ldr	r3, [sp, #4]
    674c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6750:	1e5a      	subs	r2, r3, #1
    6752:	490b      	ldr	r1, [pc, #44]	; (6780 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    6754:	9b01      	ldr	r3, [sp, #4]
    6756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    675a:	4a0a      	ldr	r2, [pc, #40]	; (6784 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    675c:	9b01      	ldr	r3, [sp, #4]
    675e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6762:	f003 0301 	and.w	r3, r3, #1
    6766:	2b00      	cmp	r3, #0
    6768:	d106      	bne.n	6778 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    676a:	4a05      	ldr	r2, [pc, #20]	; (6780 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    676c:	9b01      	ldr	r3, [sp, #4]
    676e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6772:	2b00      	cmp	r3, #0
    6774:	d100      	bne.n	6778 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6776:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6778:	bf00      	nop
    677a:	b003      	add	sp, #12
    677c:	f85d fb04 	ldr.w	pc, [sp], #4
    6780:	1fff8d30 	.word	0x1fff8d30
    6784:	1fff8d2c 	.word	0x1fff8d2c

00006788 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    6788:	b500      	push	{lr}
    678a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    678c:	f7fa fc62 	bl	1054 <Sys_GetCoreID>
    6790:	4603      	mov	r3, r0
    6792:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    6794:	4a10      	ldr	r2, [pc, #64]	; (67d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    6796:	9b01      	ldr	r3, [sp, #4]
    6798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    679c:	2b00      	cmp	r3, #0
    679e:	d10d      	bne.n	67bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    67a0:	f7fa f8a4 	bl	8ec <Port_schm_read_msr>
    67a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    67a6:	9b00      	ldr	r3, [sp, #0]
    67a8:	f003 0301 	and.w	r3, r3, #1
    67ac:	2b00      	cmp	r3, #0
    67ae:	d100      	bne.n	67b2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    67b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    67b2:	490a      	ldr	r1, [pc, #40]	; (67dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    67b4:	9b01      	ldr	r3, [sp, #4]
    67b6:	9a00      	ldr	r2, [sp, #0]
    67b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    67bc:	4a06      	ldr	r2, [pc, #24]	; (67d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    67be:	9b01      	ldr	r3, [sp, #4]
    67c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    67c4:	1c5a      	adds	r2, r3, #1
    67c6:	4904      	ldr	r1, [pc, #16]	; (67d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    67c8:	9b01      	ldr	r3, [sp, #4]
    67ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    67ce:	bf00      	nop
    67d0:	b003      	add	sp, #12
    67d2:	f85d fb04 	ldr.w	pc, [sp], #4
    67d6:	bf00      	nop
    67d8:	1fff8d38 	.word	0x1fff8d38
    67dc:	1fff8d34 	.word	0x1fff8d34

000067e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    67e0:	b500      	push	{lr}
    67e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    67e4:	f7fa fc36 	bl	1054 <Sys_GetCoreID>
    67e8:	4603      	mov	r3, r0
    67ea:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    67ec:	4a0d      	ldr	r2, [pc, #52]	; (6824 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    67ee:	9b01      	ldr	r3, [sp, #4]
    67f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    67f4:	1e5a      	subs	r2, r3, #1
    67f6:	490b      	ldr	r1, [pc, #44]	; (6824 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    67f8:	9b01      	ldr	r3, [sp, #4]
    67fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    67fe:	4a0a      	ldr	r2, [pc, #40]	; (6828 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    6800:	9b01      	ldr	r3, [sp, #4]
    6802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6806:	f003 0301 	and.w	r3, r3, #1
    680a:	2b00      	cmp	r3, #0
    680c:	d106      	bne.n	681c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    680e:	4a05      	ldr	r2, [pc, #20]	; (6824 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    6810:	9b01      	ldr	r3, [sp, #4]
    6812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6816:	2b00      	cmp	r3, #0
    6818:	d100      	bne.n	681c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    681a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    681c:	bf00      	nop
    681e:	b003      	add	sp, #12
    6820:	f85d fb04 	ldr.w	pc, [sp], #4
    6824:	1fff8d38 	.word	0x1fff8d38
    6828:	1fff8d34 	.word	0x1fff8d34

0000682c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    682c:	b500      	push	{lr}
    682e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6830:	f7fa fc10 	bl	1054 <Sys_GetCoreID>
    6834:	4603      	mov	r3, r0
    6836:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    6838:	4a10      	ldr	r2, [pc, #64]	; (687c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    683a:	9b01      	ldr	r3, [sp, #4]
    683c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6840:	2b00      	cmp	r3, #0
    6842:	d10d      	bne.n	6860 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6844:	f7fa f852 	bl	8ec <Port_schm_read_msr>
    6848:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    684a:	9b00      	ldr	r3, [sp, #0]
    684c:	f003 0301 	and.w	r3, r3, #1
    6850:	2b00      	cmp	r3, #0
    6852:	d100      	bne.n	6856 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6854:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    6856:	490a      	ldr	r1, [pc, #40]	; (6880 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    6858:	9b01      	ldr	r3, [sp, #4]
    685a:	9a00      	ldr	r2, [sp, #0]
    685c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    6860:	4a06      	ldr	r2, [pc, #24]	; (687c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    6862:	9b01      	ldr	r3, [sp, #4]
    6864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6868:	1c5a      	adds	r2, r3, #1
    686a:	4904      	ldr	r1, [pc, #16]	; (687c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    686c:	9b01      	ldr	r3, [sp, #4]
    686e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6872:	bf00      	nop
    6874:	b003      	add	sp, #12
    6876:	f85d fb04 	ldr.w	pc, [sp], #4
    687a:	bf00      	nop
    687c:	1fff8d40 	.word	0x1fff8d40
    6880:	1fff8d3c 	.word	0x1fff8d3c

00006884 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    6884:	b500      	push	{lr}
    6886:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6888:	f7fa fbe4 	bl	1054 <Sys_GetCoreID>
    688c:	4603      	mov	r3, r0
    688e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    6890:	4a0d      	ldr	r2, [pc, #52]	; (68c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    6892:	9b01      	ldr	r3, [sp, #4]
    6894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6898:	1e5a      	subs	r2, r3, #1
    689a:	490b      	ldr	r1, [pc, #44]	; (68c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    689c:	9b01      	ldr	r3, [sp, #4]
    689e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    68a2:	4a0a      	ldr	r2, [pc, #40]	; (68cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    68a4:	9b01      	ldr	r3, [sp, #4]
    68a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    68aa:	f003 0301 	and.w	r3, r3, #1
    68ae:	2b00      	cmp	r3, #0
    68b0:	d106      	bne.n	68c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    68b2:	4a05      	ldr	r2, [pc, #20]	; (68c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    68b4:	9b01      	ldr	r3, [sp, #4]
    68b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    68ba:	2b00      	cmp	r3, #0
    68bc:	d100      	bne.n	68c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    68be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    68c0:	bf00      	nop
    68c2:	b003      	add	sp, #12
    68c4:	f85d fb04 	ldr.w	pc, [sp], #4
    68c8:	1fff8d40 	.word	0x1fff8d40
    68cc:	1fff8d3c 	.word	0x1fff8d3c

000068d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    68d0:	b500      	push	{lr}
    68d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    68d4:	f7fa fbbe 	bl	1054 <Sys_GetCoreID>
    68d8:	4603      	mov	r3, r0
    68da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    68dc:	4a10      	ldr	r2, [pc, #64]	; (6920 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    68de:	9b01      	ldr	r3, [sp, #4]
    68e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    68e4:	2b00      	cmp	r3, #0
    68e6:	d10d      	bne.n	6904 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    68e8:	f7fa f800 	bl	8ec <Port_schm_read_msr>
    68ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    68ee:	9b00      	ldr	r3, [sp, #0]
    68f0:	f003 0301 	and.w	r3, r3, #1
    68f4:	2b00      	cmp	r3, #0
    68f6:	d100      	bne.n	68fa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    68f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    68fa:	490a      	ldr	r1, [pc, #40]	; (6924 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    68fc:	9b01      	ldr	r3, [sp, #4]
    68fe:	9a00      	ldr	r2, [sp, #0]
    6900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    6904:	4a06      	ldr	r2, [pc, #24]	; (6920 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    6906:	9b01      	ldr	r3, [sp, #4]
    6908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    690c:	1c5a      	adds	r2, r3, #1
    690e:	4904      	ldr	r1, [pc, #16]	; (6920 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    6910:	9b01      	ldr	r3, [sp, #4]
    6912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6916:	bf00      	nop
    6918:	b003      	add	sp, #12
    691a:	f85d fb04 	ldr.w	pc, [sp], #4
    691e:	bf00      	nop
    6920:	1fff8d48 	.word	0x1fff8d48
    6924:	1fff8d44 	.word	0x1fff8d44

00006928 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    6928:	b500      	push	{lr}
    692a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    692c:	f7fa fb92 	bl	1054 <Sys_GetCoreID>
    6930:	4603      	mov	r3, r0
    6932:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    6934:	4a0d      	ldr	r2, [pc, #52]	; (696c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    6936:	9b01      	ldr	r3, [sp, #4]
    6938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    693c:	1e5a      	subs	r2, r3, #1
    693e:	490b      	ldr	r1, [pc, #44]	; (696c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    6940:	9b01      	ldr	r3, [sp, #4]
    6942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    6946:	4a0a      	ldr	r2, [pc, #40]	; (6970 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    6948:	9b01      	ldr	r3, [sp, #4]
    694a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    694e:	f003 0301 	and.w	r3, r3, #1
    6952:	2b00      	cmp	r3, #0
    6954:	d106      	bne.n	6964 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    6956:	4a05      	ldr	r2, [pc, #20]	; (696c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    6958:	9b01      	ldr	r3, [sp, #4]
    695a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    695e:	2b00      	cmp	r3, #0
    6960:	d100      	bne.n	6964 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6962:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6964:	bf00      	nop
    6966:	b003      	add	sp, #12
    6968:	f85d fb04 	ldr.w	pc, [sp], #4
    696c:	1fff8d48 	.word	0x1fff8d48
    6970:	1fff8d44 	.word	0x1fff8d44

00006974 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    6974:	b500      	push	{lr}
    6976:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6978:	f7fa fb6c 	bl	1054 <Sys_GetCoreID>
    697c:	4603      	mov	r3, r0
    697e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    6980:	4a10      	ldr	r2, [pc, #64]	; (69c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    6982:	9b01      	ldr	r3, [sp, #4]
    6984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6988:	2b00      	cmp	r3, #0
    698a:	d10d      	bne.n	69a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    698c:	f7f9 ffae 	bl	8ec <Port_schm_read_msr>
    6990:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6992:	9b00      	ldr	r3, [sp, #0]
    6994:	f003 0301 	and.w	r3, r3, #1
    6998:	2b00      	cmp	r3, #0
    699a:	d100      	bne.n	699e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    699c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    699e:	490a      	ldr	r1, [pc, #40]	; (69c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    69a0:	9b01      	ldr	r3, [sp, #4]
    69a2:	9a00      	ldr	r2, [sp, #0]
    69a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    69a8:	4a06      	ldr	r2, [pc, #24]	; (69c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    69aa:	9b01      	ldr	r3, [sp, #4]
    69ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69b0:	1c5a      	adds	r2, r3, #1
    69b2:	4904      	ldr	r1, [pc, #16]	; (69c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    69b4:	9b01      	ldr	r3, [sp, #4]
    69b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    69ba:	bf00      	nop
    69bc:	b003      	add	sp, #12
    69be:	f85d fb04 	ldr.w	pc, [sp], #4
    69c2:	bf00      	nop
    69c4:	1fff8d50 	.word	0x1fff8d50
    69c8:	1fff8d4c 	.word	0x1fff8d4c

000069cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    69cc:	b500      	push	{lr}
    69ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    69d0:	f7fa fb40 	bl	1054 <Sys_GetCoreID>
    69d4:	4603      	mov	r3, r0
    69d6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    69d8:	4a0d      	ldr	r2, [pc, #52]	; (6a10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    69da:	9b01      	ldr	r3, [sp, #4]
    69dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69e0:	1e5a      	subs	r2, r3, #1
    69e2:	490b      	ldr	r1, [pc, #44]	; (6a10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    69e4:	9b01      	ldr	r3, [sp, #4]
    69e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    69ea:	4a0a      	ldr	r2, [pc, #40]	; (6a14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    69ec:	9b01      	ldr	r3, [sp, #4]
    69ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69f2:	f003 0301 	and.w	r3, r3, #1
    69f6:	2b00      	cmp	r3, #0
    69f8:	d106      	bne.n	6a08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    69fa:	4a05      	ldr	r2, [pc, #20]	; (6a10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    69fc:	9b01      	ldr	r3, [sp, #4]
    69fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a02:	2b00      	cmp	r3, #0
    6a04:	d100      	bne.n	6a08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6a06:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6a08:	bf00      	nop
    6a0a:	b003      	add	sp, #12
    6a0c:	f85d fb04 	ldr.w	pc, [sp], #4
    6a10:	1fff8d50 	.word	0x1fff8d50
    6a14:	1fff8d4c 	.word	0x1fff8d4c

00006a18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    6a18:	b500      	push	{lr}
    6a1a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6a1c:	f7fa fb1a 	bl	1054 <Sys_GetCoreID>
    6a20:	4603      	mov	r3, r0
    6a22:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    6a24:	4a10      	ldr	r2, [pc, #64]	; (6a68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    6a26:	9b01      	ldr	r3, [sp, #4]
    6a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a2c:	2b00      	cmp	r3, #0
    6a2e:	d10d      	bne.n	6a4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6a30:	f7f9 ff5c 	bl	8ec <Port_schm_read_msr>
    6a34:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6a36:	9b00      	ldr	r3, [sp, #0]
    6a38:	f003 0301 	and.w	r3, r3, #1
    6a3c:	2b00      	cmp	r3, #0
    6a3e:	d100      	bne.n	6a42 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6a40:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    6a42:	490a      	ldr	r1, [pc, #40]	; (6a6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    6a44:	9b01      	ldr	r3, [sp, #4]
    6a46:	9a00      	ldr	r2, [sp, #0]
    6a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    6a4c:	4a06      	ldr	r2, [pc, #24]	; (6a68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    6a4e:	9b01      	ldr	r3, [sp, #4]
    6a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a54:	1c5a      	adds	r2, r3, #1
    6a56:	4904      	ldr	r1, [pc, #16]	; (6a68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    6a58:	9b01      	ldr	r3, [sp, #4]
    6a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6a5e:	bf00      	nop
    6a60:	b003      	add	sp, #12
    6a62:	f85d fb04 	ldr.w	pc, [sp], #4
    6a66:	bf00      	nop
    6a68:	1fff8d58 	.word	0x1fff8d58
    6a6c:	1fff8d54 	.word	0x1fff8d54

00006a70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    6a70:	b500      	push	{lr}
    6a72:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6a74:	f7fa faee 	bl	1054 <Sys_GetCoreID>
    6a78:	4603      	mov	r3, r0
    6a7a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    6a7c:	4a0d      	ldr	r2, [pc, #52]	; (6ab4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    6a7e:	9b01      	ldr	r3, [sp, #4]
    6a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a84:	1e5a      	subs	r2, r3, #1
    6a86:	490b      	ldr	r1, [pc, #44]	; (6ab4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    6a88:	9b01      	ldr	r3, [sp, #4]
    6a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    6a8e:	4a0a      	ldr	r2, [pc, #40]	; (6ab8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    6a90:	9b01      	ldr	r3, [sp, #4]
    6a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a96:	f003 0301 	and.w	r3, r3, #1
    6a9a:	2b00      	cmp	r3, #0
    6a9c:	d106      	bne.n	6aac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    6a9e:	4a05      	ldr	r2, [pc, #20]	; (6ab4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    6aa0:	9b01      	ldr	r3, [sp, #4]
    6aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6aa6:	2b00      	cmp	r3, #0
    6aa8:	d100      	bne.n	6aac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6aaa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6aac:	bf00      	nop
    6aae:	b003      	add	sp, #12
    6ab0:	f85d fb04 	ldr.w	pc, [sp], #4
    6ab4:	1fff8d58 	.word	0x1fff8d58
    6ab8:	1fff8d54 	.word	0x1fff8d54

00006abc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    6abc:	b500      	push	{lr}
    6abe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6ac0:	f7fa fac8 	bl	1054 <Sys_GetCoreID>
    6ac4:	4603      	mov	r3, r0
    6ac6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    6ac8:	4a10      	ldr	r2, [pc, #64]	; (6b0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    6aca:	9b01      	ldr	r3, [sp, #4]
    6acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ad0:	2b00      	cmp	r3, #0
    6ad2:	d10d      	bne.n	6af0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6ad4:	f7f9 ff0a 	bl	8ec <Port_schm_read_msr>
    6ad8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6ada:	9b00      	ldr	r3, [sp, #0]
    6adc:	f003 0301 	and.w	r3, r3, #1
    6ae0:	2b00      	cmp	r3, #0
    6ae2:	d100      	bne.n	6ae6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6ae4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    6ae6:	490a      	ldr	r1, [pc, #40]	; (6b10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    6ae8:	9b01      	ldr	r3, [sp, #4]
    6aea:	9a00      	ldr	r2, [sp, #0]
    6aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    6af0:	4a06      	ldr	r2, [pc, #24]	; (6b0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    6af2:	9b01      	ldr	r3, [sp, #4]
    6af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6af8:	1c5a      	adds	r2, r3, #1
    6afa:	4904      	ldr	r1, [pc, #16]	; (6b0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    6afc:	9b01      	ldr	r3, [sp, #4]
    6afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6b02:	bf00      	nop
    6b04:	b003      	add	sp, #12
    6b06:	f85d fb04 	ldr.w	pc, [sp], #4
    6b0a:	bf00      	nop
    6b0c:	1fff8d60 	.word	0x1fff8d60
    6b10:	1fff8d5c 	.word	0x1fff8d5c

00006b14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    6b14:	b500      	push	{lr}
    6b16:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6b18:	f7fa fa9c 	bl	1054 <Sys_GetCoreID>
    6b1c:	4603      	mov	r3, r0
    6b1e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    6b20:	4a0d      	ldr	r2, [pc, #52]	; (6b58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    6b22:	9b01      	ldr	r3, [sp, #4]
    6b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b28:	1e5a      	subs	r2, r3, #1
    6b2a:	490b      	ldr	r1, [pc, #44]	; (6b58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    6b2c:	9b01      	ldr	r3, [sp, #4]
    6b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    6b32:	4a0a      	ldr	r2, [pc, #40]	; (6b5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    6b34:	9b01      	ldr	r3, [sp, #4]
    6b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b3a:	f003 0301 	and.w	r3, r3, #1
    6b3e:	2b00      	cmp	r3, #0
    6b40:	d106      	bne.n	6b50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    6b42:	4a05      	ldr	r2, [pc, #20]	; (6b58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    6b44:	9b01      	ldr	r3, [sp, #4]
    6b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b4a:	2b00      	cmp	r3, #0
    6b4c:	d100      	bne.n	6b50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6b4e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6b50:	bf00      	nop
    6b52:	b003      	add	sp, #12
    6b54:	f85d fb04 	ldr.w	pc, [sp], #4
    6b58:	1fff8d60 	.word	0x1fff8d60
    6b5c:	1fff8d5c 	.word	0x1fff8d5c

00006b60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    6b60:	b500      	push	{lr}
    6b62:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6b64:	f7fa fa76 	bl	1054 <Sys_GetCoreID>
    6b68:	4603      	mov	r3, r0
    6b6a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    6b6c:	4a10      	ldr	r2, [pc, #64]	; (6bb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    6b6e:	9b01      	ldr	r3, [sp, #4]
    6b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b74:	2b00      	cmp	r3, #0
    6b76:	d10d      	bne.n	6b94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6b78:	f7f9 feb8 	bl	8ec <Port_schm_read_msr>
    6b7c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6b7e:	9b00      	ldr	r3, [sp, #0]
    6b80:	f003 0301 	and.w	r3, r3, #1
    6b84:	2b00      	cmp	r3, #0
    6b86:	d100      	bne.n	6b8a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6b88:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    6b8a:	490a      	ldr	r1, [pc, #40]	; (6bb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    6b8c:	9b01      	ldr	r3, [sp, #4]
    6b8e:	9a00      	ldr	r2, [sp, #0]
    6b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    6b94:	4a06      	ldr	r2, [pc, #24]	; (6bb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    6b96:	9b01      	ldr	r3, [sp, #4]
    6b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b9c:	1c5a      	adds	r2, r3, #1
    6b9e:	4904      	ldr	r1, [pc, #16]	; (6bb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    6ba0:	9b01      	ldr	r3, [sp, #4]
    6ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6ba6:	bf00      	nop
    6ba8:	b003      	add	sp, #12
    6baa:	f85d fb04 	ldr.w	pc, [sp], #4
    6bae:	bf00      	nop
    6bb0:	1fff8d68 	.word	0x1fff8d68
    6bb4:	1fff8d64 	.word	0x1fff8d64

00006bb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    6bb8:	b500      	push	{lr}
    6bba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6bbc:	f7fa fa4a 	bl	1054 <Sys_GetCoreID>
    6bc0:	4603      	mov	r3, r0
    6bc2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    6bc4:	4a0d      	ldr	r2, [pc, #52]	; (6bfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    6bc6:	9b01      	ldr	r3, [sp, #4]
    6bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6bcc:	1e5a      	subs	r2, r3, #1
    6bce:	490b      	ldr	r1, [pc, #44]	; (6bfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    6bd0:	9b01      	ldr	r3, [sp, #4]
    6bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    6bd6:	4a0a      	ldr	r2, [pc, #40]	; (6c00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    6bd8:	9b01      	ldr	r3, [sp, #4]
    6bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6bde:	f003 0301 	and.w	r3, r3, #1
    6be2:	2b00      	cmp	r3, #0
    6be4:	d106      	bne.n	6bf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    6be6:	4a05      	ldr	r2, [pc, #20]	; (6bfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    6be8:	9b01      	ldr	r3, [sp, #4]
    6bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6bee:	2b00      	cmp	r3, #0
    6bf0:	d100      	bne.n	6bf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6bf2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6bf4:	bf00      	nop
    6bf6:	b003      	add	sp, #12
    6bf8:	f85d fb04 	ldr.w	pc, [sp], #4
    6bfc:	1fff8d68 	.word	0x1fff8d68
    6c00:	1fff8d64 	.word	0x1fff8d64

00006c04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    6c04:	b500      	push	{lr}
    6c06:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6c08:	f7fa fa24 	bl	1054 <Sys_GetCoreID>
    6c0c:	4603      	mov	r3, r0
    6c0e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    6c10:	4a10      	ldr	r2, [pc, #64]	; (6c54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    6c12:	9b01      	ldr	r3, [sp, #4]
    6c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c18:	2b00      	cmp	r3, #0
    6c1a:	d10d      	bne.n	6c38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6c1c:	f7f9 fe66 	bl	8ec <Port_schm_read_msr>
    6c20:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6c22:	9b00      	ldr	r3, [sp, #0]
    6c24:	f003 0301 	and.w	r3, r3, #1
    6c28:	2b00      	cmp	r3, #0
    6c2a:	d100      	bne.n	6c2e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6c2c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    6c2e:	490a      	ldr	r1, [pc, #40]	; (6c58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    6c30:	9b01      	ldr	r3, [sp, #4]
    6c32:	9a00      	ldr	r2, [sp, #0]
    6c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    6c38:	4a06      	ldr	r2, [pc, #24]	; (6c54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    6c3a:	9b01      	ldr	r3, [sp, #4]
    6c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c40:	1c5a      	adds	r2, r3, #1
    6c42:	4904      	ldr	r1, [pc, #16]	; (6c54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    6c44:	9b01      	ldr	r3, [sp, #4]
    6c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6c4a:	bf00      	nop
    6c4c:	b003      	add	sp, #12
    6c4e:	f85d fb04 	ldr.w	pc, [sp], #4
    6c52:	bf00      	nop
    6c54:	1fff8d70 	.word	0x1fff8d70
    6c58:	1fff8d6c 	.word	0x1fff8d6c

00006c5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    6c5c:	b500      	push	{lr}
    6c5e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6c60:	f7fa f9f8 	bl	1054 <Sys_GetCoreID>
    6c64:	4603      	mov	r3, r0
    6c66:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    6c68:	4a0d      	ldr	r2, [pc, #52]	; (6ca0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    6c6a:	9b01      	ldr	r3, [sp, #4]
    6c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c70:	1e5a      	subs	r2, r3, #1
    6c72:	490b      	ldr	r1, [pc, #44]	; (6ca0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    6c74:	9b01      	ldr	r3, [sp, #4]
    6c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    6c7a:	4a0a      	ldr	r2, [pc, #40]	; (6ca4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    6c7c:	9b01      	ldr	r3, [sp, #4]
    6c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c82:	f003 0301 	and.w	r3, r3, #1
    6c86:	2b00      	cmp	r3, #0
    6c88:	d106      	bne.n	6c98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    6c8a:	4a05      	ldr	r2, [pc, #20]	; (6ca0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    6c8c:	9b01      	ldr	r3, [sp, #4]
    6c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c92:	2b00      	cmp	r3, #0
    6c94:	d100      	bne.n	6c98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6c96:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6c98:	bf00      	nop
    6c9a:	b003      	add	sp, #12
    6c9c:	f85d fb04 	ldr.w	pc, [sp], #4
    6ca0:	1fff8d70 	.word	0x1fff8d70
    6ca4:	1fff8d6c 	.word	0x1fff8d6c

00006ca8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    6ca8:	b500      	push	{lr}
    6caa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6cac:	f7fa f9d2 	bl	1054 <Sys_GetCoreID>
    6cb0:	4603      	mov	r3, r0
    6cb2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    6cb4:	4a10      	ldr	r2, [pc, #64]	; (6cf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    6cb6:	9b01      	ldr	r3, [sp, #4]
    6cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cbc:	2b00      	cmp	r3, #0
    6cbe:	d10d      	bne.n	6cdc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6cc0:	f7f9 fe14 	bl	8ec <Port_schm_read_msr>
    6cc4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6cc6:	9b00      	ldr	r3, [sp, #0]
    6cc8:	f003 0301 	and.w	r3, r3, #1
    6ccc:	2b00      	cmp	r3, #0
    6cce:	d100      	bne.n	6cd2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6cd0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    6cd2:	490a      	ldr	r1, [pc, #40]	; (6cfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    6cd4:	9b01      	ldr	r3, [sp, #4]
    6cd6:	9a00      	ldr	r2, [sp, #0]
    6cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    6cdc:	4a06      	ldr	r2, [pc, #24]	; (6cf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    6cde:	9b01      	ldr	r3, [sp, #4]
    6ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ce4:	1c5a      	adds	r2, r3, #1
    6ce6:	4904      	ldr	r1, [pc, #16]	; (6cf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    6ce8:	9b01      	ldr	r3, [sp, #4]
    6cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6cee:	bf00      	nop
    6cf0:	b003      	add	sp, #12
    6cf2:	f85d fb04 	ldr.w	pc, [sp], #4
    6cf6:	bf00      	nop
    6cf8:	1fff8d78 	.word	0x1fff8d78
    6cfc:	1fff8d74 	.word	0x1fff8d74

00006d00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    6d00:	b500      	push	{lr}
    6d02:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6d04:	f7fa f9a6 	bl	1054 <Sys_GetCoreID>
    6d08:	4603      	mov	r3, r0
    6d0a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    6d0c:	4a0d      	ldr	r2, [pc, #52]	; (6d44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    6d0e:	9b01      	ldr	r3, [sp, #4]
    6d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d14:	1e5a      	subs	r2, r3, #1
    6d16:	490b      	ldr	r1, [pc, #44]	; (6d44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    6d18:	9b01      	ldr	r3, [sp, #4]
    6d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    6d1e:	4a0a      	ldr	r2, [pc, #40]	; (6d48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    6d20:	9b01      	ldr	r3, [sp, #4]
    6d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d26:	f003 0301 	and.w	r3, r3, #1
    6d2a:	2b00      	cmp	r3, #0
    6d2c:	d106      	bne.n	6d3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    6d2e:	4a05      	ldr	r2, [pc, #20]	; (6d44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    6d30:	9b01      	ldr	r3, [sp, #4]
    6d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d36:	2b00      	cmp	r3, #0
    6d38:	d100      	bne.n	6d3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6d3a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6d3c:	bf00      	nop
    6d3e:	b003      	add	sp, #12
    6d40:	f85d fb04 	ldr.w	pc, [sp], #4
    6d44:	1fff8d78 	.word	0x1fff8d78
    6d48:	1fff8d74 	.word	0x1fff8d74

00006d4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    6d4c:	b500      	push	{lr}
    6d4e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6d50:	f7fa f980 	bl	1054 <Sys_GetCoreID>
    6d54:	4603      	mov	r3, r0
    6d56:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    6d58:	4a10      	ldr	r2, [pc, #64]	; (6d9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    6d5a:	9b01      	ldr	r3, [sp, #4]
    6d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d60:	2b00      	cmp	r3, #0
    6d62:	d10d      	bne.n	6d80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6d64:	f7f9 fdc2 	bl	8ec <Port_schm_read_msr>
    6d68:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6d6a:	9b00      	ldr	r3, [sp, #0]
    6d6c:	f003 0301 	and.w	r3, r3, #1
    6d70:	2b00      	cmp	r3, #0
    6d72:	d100      	bne.n	6d76 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6d74:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    6d76:	490a      	ldr	r1, [pc, #40]	; (6da0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    6d78:	9b01      	ldr	r3, [sp, #4]
    6d7a:	9a00      	ldr	r2, [sp, #0]
    6d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    6d80:	4a06      	ldr	r2, [pc, #24]	; (6d9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    6d82:	9b01      	ldr	r3, [sp, #4]
    6d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d88:	1c5a      	adds	r2, r3, #1
    6d8a:	4904      	ldr	r1, [pc, #16]	; (6d9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    6d8c:	9b01      	ldr	r3, [sp, #4]
    6d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6d92:	bf00      	nop
    6d94:	b003      	add	sp, #12
    6d96:	f85d fb04 	ldr.w	pc, [sp], #4
    6d9a:	bf00      	nop
    6d9c:	1fff8d80 	.word	0x1fff8d80
    6da0:	1fff8d7c 	.word	0x1fff8d7c

00006da4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    6da4:	b500      	push	{lr}
    6da6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6da8:	f7fa f954 	bl	1054 <Sys_GetCoreID>
    6dac:	4603      	mov	r3, r0
    6dae:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    6db0:	4a0d      	ldr	r2, [pc, #52]	; (6de8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    6db2:	9b01      	ldr	r3, [sp, #4]
    6db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6db8:	1e5a      	subs	r2, r3, #1
    6dba:	490b      	ldr	r1, [pc, #44]	; (6de8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    6dbc:	9b01      	ldr	r3, [sp, #4]
    6dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    6dc2:	4a0a      	ldr	r2, [pc, #40]	; (6dec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    6dc4:	9b01      	ldr	r3, [sp, #4]
    6dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6dca:	f003 0301 	and.w	r3, r3, #1
    6dce:	2b00      	cmp	r3, #0
    6dd0:	d106      	bne.n	6de0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    6dd2:	4a05      	ldr	r2, [pc, #20]	; (6de8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    6dd4:	9b01      	ldr	r3, [sp, #4]
    6dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6dda:	2b00      	cmp	r3, #0
    6ddc:	d100      	bne.n	6de0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6dde:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6de0:	bf00      	nop
    6de2:	b003      	add	sp, #12
    6de4:	f85d fb04 	ldr.w	pc, [sp], #4
    6de8:	1fff8d80 	.word	0x1fff8d80
    6dec:	1fff8d7c 	.word	0x1fff8d7c

00006df0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    6df0:	b500      	push	{lr}
    6df2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6df4:	f7fa f92e 	bl	1054 <Sys_GetCoreID>
    6df8:	4603      	mov	r3, r0
    6dfa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    6dfc:	4a10      	ldr	r2, [pc, #64]	; (6e40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    6dfe:	9b01      	ldr	r3, [sp, #4]
    6e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e04:	2b00      	cmp	r3, #0
    6e06:	d10d      	bne.n	6e24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6e08:	f7f9 fd70 	bl	8ec <Port_schm_read_msr>
    6e0c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6e0e:	9b00      	ldr	r3, [sp, #0]
    6e10:	f003 0301 	and.w	r3, r3, #1
    6e14:	2b00      	cmp	r3, #0
    6e16:	d100      	bne.n	6e1a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6e18:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    6e1a:	490a      	ldr	r1, [pc, #40]	; (6e44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    6e1c:	9b01      	ldr	r3, [sp, #4]
    6e1e:	9a00      	ldr	r2, [sp, #0]
    6e20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    6e24:	4a06      	ldr	r2, [pc, #24]	; (6e40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    6e26:	9b01      	ldr	r3, [sp, #4]
    6e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e2c:	1c5a      	adds	r2, r3, #1
    6e2e:	4904      	ldr	r1, [pc, #16]	; (6e40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    6e30:	9b01      	ldr	r3, [sp, #4]
    6e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6e36:	bf00      	nop
    6e38:	b003      	add	sp, #12
    6e3a:	f85d fb04 	ldr.w	pc, [sp], #4
    6e3e:	bf00      	nop
    6e40:	1fff8d88 	.word	0x1fff8d88
    6e44:	1fff8d84 	.word	0x1fff8d84

00006e48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    6e48:	b500      	push	{lr}
    6e4a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6e4c:	f7fa f902 	bl	1054 <Sys_GetCoreID>
    6e50:	4603      	mov	r3, r0
    6e52:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    6e54:	4a0d      	ldr	r2, [pc, #52]	; (6e8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    6e56:	9b01      	ldr	r3, [sp, #4]
    6e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e5c:	1e5a      	subs	r2, r3, #1
    6e5e:	490b      	ldr	r1, [pc, #44]	; (6e8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    6e60:	9b01      	ldr	r3, [sp, #4]
    6e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    6e66:	4a0a      	ldr	r2, [pc, #40]	; (6e90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    6e68:	9b01      	ldr	r3, [sp, #4]
    6e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e6e:	f003 0301 	and.w	r3, r3, #1
    6e72:	2b00      	cmp	r3, #0
    6e74:	d106      	bne.n	6e84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    6e76:	4a05      	ldr	r2, [pc, #20]	; (6e8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    6e78:	9b01      	ldr	r3, [sp, #4]
    6e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e7e:	2b00      	cmp	r3, #0
    6e80:	d100      	bne.n	6e84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6e82:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6e84:	bf00      	nop
    6e86:	b003      	add	sp, #12
    6e88:	f85d fb04 	ldr.w	pc, [sp], #4
    6e8c:	1fff8d88 	.word	0x1fff8d88
    6e90:	1fff8d84 	.word	0x1fff8d84

00006e94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    6e94:	b500      	push	{lr}
    6e96:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6e98:	f7fa f8dc 	bl	1054 <Sys_GetCoreID>
    6e9c:	4603      	mov	r3, r0
    6e9e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    6ea0:	4a10      	ldr	r2, [pc, #64]	; (6ee4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    6ea2:	9b01      	ldr	r3, [sp, #4]
    6ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ea8:	2b00      	cmp	r3, #0
    6eaa:	d10d      	bne.n	6ec8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6eac:	f7f9 fd1e 	bl	8ec <Port_schm_read_msr>
    6eb0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6eb2:	9b00      	ldr	r3, [sp, #0]
    6eb4:	f003 0301 	and.w	r3, r3, #1
    6eb8:	2b00      	cmp	r3, #0
    6eba:	d100      	bne.n	6ebe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6ebc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    6ebe:	490a      	ldr	r1, [pc, #40]	; (6ee8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    6ec0:	9b01      	ldr	r3, [sp, #4]
    6ec2:	9a00      	ldr	r2, [sp, #0]
    6ec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    6ec8:	4a06      	ldr	r2, [pc, #24]	; (6ee4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    6eca:	9b01      	ldr	r3, [sp, #4]
    6ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ed0:	1c5a      	adds	r2, r3, #1
    6ed2:	4904      	ldr	r1, [pc, #16]	; (6ee4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    6ed4:	9b01      	ldr	r3, [sp, #4]
    6ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6eda:	bf00      	nop
    6edc:	b003      	add	sp, #12
    6ede:	f85d fb04 	ldr.w	pc, [sp], #4
    6ee2:	bf00      	nop
    6ee4:	1fff8d90 	.word	0x1fff8d90
    6ee8:	1fff8d8c 	.word	0x1fff8d8c

00006eec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    6eec:	b500      	push	{lr}
    6eee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6ef0:	f7fa f8b0 	bl	1054 <Sys_GetCoreID>
    6ef4:	4603      	mov	r3, r0
    6ef6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    6ef8:	4a0d      	ldr	r2, [pc, #52]	; (6f30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    6efa:	9b01      	ldr	r3, [sp, #4]
    6efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f00:	1e5a      	subs	r2, r3, #1
    6f02:	490b      	ldr	r1, [pc, #44]	; (6f30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    6f04:	9b01      	ldr	r3, [sp, #4]
    6f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    6f0a:	4a0a      	ldr	r2, [pc, #40]	; (6f34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    6f0c:	9b01      	ldr	r3, [sp, #4]
    6f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f12:	f003 0301 	and.w	r3, r3, #1
    6f16:	2b00      	cmp	r3, #0
    6f18:	d106      	bne.n	6f28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    6f1a:	4a05      	ldr	r2, [pc, #20]	; (6f30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    6f1c:	9b01      	ldr	r3, [sp, #4]
    6f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f22:	2b00      	cmp	r3, #0
    6f24:	d100      	bne.n	6f28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6f26:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6f28:	bf00      	nop
    6f2a:	b003      	add	sp, #12
    6f2c:	f85d fb04 	ldr.w	pc, [sp], #4
    6f30:	1fff8d90 	.word	0x1fff8d90
    6f34:	1fff8d8c 	.word	0x1fff8d8c

00006f38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    6f38:	b500      	push	{lr}
    6f3a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6f3c:	f7fa f88a 	bl	1054 <Sys_GetCoreID>
    6f40:	4603      	mov	r3, r0
    6f42:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    6f44:	4a10      	ldr	r2, [pc, #64]	; (6f88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    6f46:	9b01      	ldr	r3, [sp, #4]
    6f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f4c:	2b00      	cmp	r3, #0
    6f4e:	d10d      	bne.n	6f6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6f50:	f7f9 fccc 	bl	8ec <Port_schm_read_msr>
    6f54:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6f56:	9b00      	ldr	r3, [sp, #0]
    6f58:	f003 0301 	and.w	r3, r3, #1
    6f5c:	2b00      	cmp	r3, #0
    6f5e:	d100      	bne.n	6f62 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6f60:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    6f62:	490a      	ldr	r1, [pc, #40]	; (6f8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    6f64:	9b01      	ldr	r3, [sp, #4]
    6f66:	9a00      	ldr	r2, [sp, #0]
    6f68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    6f6c:	4a06      	ldr	r2, [pc, #24]	; (6f88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    6f6e:	9b01      	ldr	r3, [sp, #4]
    6f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f74:	1c5a      	adds	r2, r3, #1
    6f76:	4904      	ldr	r1, [pc, #16]	; (6f88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    6f78:	9b01      	ldr	r3, [sp, #4]
    6f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6f7e:	bf00      	nop
    6f80:	b003      	add	sp, #12
    6f82:	f85d fb04 	ldr.w	pc, [sp], #4
    6f86:	bf00      	nop
    6f88:	1fff8d98 	.word	0x1fff8d98
    6f8c:	1fff8d94 	.word	0x1fff8d94

00006f90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    6f90:	b500      	push	{lr}
    6f92:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6f94:	f7fa f85e 	bl	1054 <Sys_GetCoreID>
    6f98:	4603      	mov	r3, r0
    6f9a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    6f9c:	4a0d      	ldr	r2, [pc, #52]	; (6fd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    6f9e:	9b01      	ldr	r3, [sp, #4]
    6fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fa4:	1e5a      	subs	r2, r3, #1
    6fa6:	490b      	ldr	r1, [pc, #44]	; (6fd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    6fa8:	9b01      	ldr	r3, [sp, #4]
    6faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    6fae:	4a0a      	ldr	r2, [pc, #40]	; (6fd8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    6fb0:	9b01      	ldr	r3, [sp, #4]
    6fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fb6:	f003 0301 	and.w	r3, r3, #1
    6fba:	2b00      	cmp	r3, #0
    6fbc:	d106      	bne.n	6fcc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    6fbe:	4a05      	ldr	r2, [pc, #20]	; (6fd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    6fc0:	9b01      	ldr	r3, [sp, #4]
    6fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fc6:	2b00      	cmp	r3, #0
    6fc8:	d100      	bne.n	6fcc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6fca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6fcc:	bf00      	nop
    6fce:	b003      	add	sp, #12
    6fd0:	f85d fb04 	ldr.w	pc, [sp], #4
    6fd4:	1fff8d98 	.word	0x1fff8d98
    6fd8:	1fff8d94 	.word	0x1fff8d94

00006fdc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    6fdc:	b500      	push	{lr}
    6fde:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6fe0:	f7fa f838 	bl	1054 <Sys_GetCoreID>
    6fe4:	4603      	mov	r3, r0
    6fe6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    6fe8:	4a10      	ldr	r2, [pc, #64]	; (702c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    6fea:	9b01      	ldr	r3, [sp, #4]
    6fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ff0:	2b00      	cmp	r3, #0
    6ff2:	d10d      	bne.n	7010 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6ff4:	f7f9 fc7a 	bl	8ec <Port_schm_read_msr>
    6ff8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6ffa:	9b00      	ldr	r3, [sp, #0]
    6ffc:	f003 0301 	and.w	r3, r3, #1
    7000:	2b00      	cmp	r3, #0
    7002:	d100      	bne.n	7006 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7004:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    7006:	490a      	ldr	r1, [pc, #40]	; (7030 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    7008:	9b01      	ldr	r3, [sp, #4]
    700a:	9a00      	ldr	r2, [sp, #0]
    700c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    7010:	4a06      	ldr	r2, [pc, #24]	; (702c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    7012:	9b01      	ldr	r3, [sp, #4]
    7014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7018:	1c5a      	adds	r2, r3, #1
    701a:	4904      	ldr	r1, [pc, #16]	; (702c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    701c:	9b01      	ldr	r3, [sp, #4]
    701e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7022:	bf00      	nop
    7024:	b003      	add	sp, #12
    7026:	f85d fb04 	ldr.w	pc, [sp], #4
    702a:	bf00      	nop
    702c:	1fff8da0 	.word	0x1fff8da0
    7030:	1fff8d9c 	.word	0x1fff8d9c

00007034 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    7034:	b500      	push	{lr}
    7036:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7038:	f7fa f80c 	bl	1054 <Sys_GetCoreID>
    703c:	4603      	mov	r3, r0
    703e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    7040:	4a0d      	ldr	r2, [pc, #52]	; (7078 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    7042:	9b01      	ldr	r3, [sp, #4]
    7044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7048:	1e5a      	subs	r2, r3, #1
    704a:	490b      	ldr	r1, [pc, #44]	; (7078 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    704c:	9b01      	ldr	r3, [sp, #4]
    704e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    7052:	4a0a      	ldr	r2, [pc, #40]	; (707c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    7054:	9b01      	ldr	r3, [sp, #4]
    7056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    705a:	f003 0301 	and.w	r3, r3, #1
    705e:	2b00      	cmp	r3, #0
    7060:	d106      	bne.n	7070 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    7062:	4a05      	ldr	r2, [pc, #20]	; (7078 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    7064:	9b01      	ldr	r3, [sp, #4]
    7066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    706a:	2b00      	cmp	r3, #0
    706c:	d100      	bne.n	7070 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    706e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7070:	bf00      	nop
    7072:	b003      	add	sp, #12
    7074:	f85d fb04 	ldr.w	pc, [sp], #4
    7078:	1fff8da0 	.word	0x1fff8da0
    707c:	1fff8d9c 	.word	0x1fff8d9c

00007080 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    7080:	b500      	push	{lr}
    7082:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7084:	f7f9 ffe6 	bl	1054 <Sys_GetCoreID>
    7088:	4603      	mov	r3, r0
    708a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    708c:	4a10      	ldr	r2, [pc, #64]	; (70d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    708e:	9b01      	ldr	r3, [sp, #4]
    7090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7094:	2b00      	cmp	r3, #0
    7096:	d10d      	bne.n	70b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7098:	f7f9 fc28 	bl	8ec <Port_schm_read_msr>
    709c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    709e:	9b00      	ldr	r3, [sp, #0]
    70a0:	f003 0301 	and.w	r3, r3, #1
    70a4:	2b00      	cmp	r3, #0
    70a6:	d100      	bne.n	70aa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    70a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    70aa:	490a      	ldr	r1, [pc, #40]	; (70d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    70ac:	9b01      	ldr	r3, [sp, #4]
    70ae:	9a00      	ldr	r2, [sp, #0]
    70b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    70b4:	4a06      	ldr	r2, [pc, #24]	; (70d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    70b6:	9b01      	ldr	r3, [sp, #4]
    70b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70bc:	1c5a      	adds	r2, r3, #1
    70be:	4904      	ldr	r1, [pc, #16]	; (70d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    70c0:	9b01      	ldr	r3, [sp, #4]
    70c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    70c6:	bf00      	nop
    70c8:	b003      	add	sp, #12
    70ca:	f85d fb04 	ldr.w	pc, [sp], #4
    70ce:	bf00      	nop
    70d0:	1fff8da8 	.word	0x1fff8da8
    70d4:	1fff8da4 	.word	0x1fff8da4

000070d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    70d8:	b500      	push	{lr}
    70da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    70dc:	f7f9 ffba 	bl	1054 <Sys_GetCoreID>
    70e0:	4603      	mov	r3, r0
    70e2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    70e4:	4a0d      	ldr	r2, [pc, #52]	; (711c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    70e6:	9b01      	ldr	r3, [sp, #4]
    70e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70ec:	1e5a      	subs	r2, r3, #1
    70ee:	490b      	ldr	r1, [pc, #44]	; (711c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    70f0:	9b01      	ldr	r3, [sp, #4]
    70f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    70f6:	4a0a      	ldr	r2, [pc, #40]	; (7120 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    70f8:	9b01      	ldr	r3, [sp, #4]
    70fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70fe:	f003 0301 	and.w	r3, r3, #1
    7102:	2b00      	cmp	r3, #0
    7104:	d106      	bne.n	7114 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    7106:	4a05      	ldr	r2, [pc, #20]	; (711c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    7108:	9b01      	ldr	r3, [sp, #4]
    710a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    710e:	2b00      	cmp	r3, #0
    7110:	d100      	bne.n	7114 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7112:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7114:	bf00      	nop
    7116:	b003      	add	sp, #12
    7118:	f85d fb04 	ldr.w	pc, [sp], #4
    711c:	1fff8da8 	.word	0x1fff8da8
    7120:	1fff8da4 	.word	0x1fff8da4

00007124 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    7124:	b500      	push	{lr}
    7126:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7128:	f7f9 ff94 	bl	1054 <Sys_GetCoreID>
    712c:	4603      	mov	r3, r0
    712e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    7130:	4a10      	ldr	r2, [pc, #64]	; (7174 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    7132:	9b01      	ldr	r3, [sp, #4]
    7134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7138:	2b00      	cmp	r3, #0
    713a:	d10d      	bne.n	7158 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    713c:	f7f9 fbd6 	bl	8ec <Port_schm_read_msr>
    7140:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7142:	9b00      	ldr	r3, [sp, #0]
    7144:	f003 0301 	and.w	r3, r3, #1
    7148:	2b00      	cmp	r3, #0
    714a:	d100      	bne.n	714e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    714c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    714e:	490a      	ldr	r1, [pc, #40]	; (7178 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    7150:	9b01      	ldr	r3, [sp, #4]
    7152:	9a00      	ldr	r2, [sp, #0]
    7154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    7158:	4a06      	ldr	r2, [pc, #24]	; (7174 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    715a:	9b01      	ldr	r3, [sp, #4]
    715c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7160:	1c5a      	adds	r2, r3, #1
    7162:	4904      	ldr	r1, [pc, #16]	; (7174 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    7164:	9b01      	ldr	r3, [sp, #4]
    7166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    716a:	bf00      	nop
    716c:	b003      	add	sp, #12
    716e:	f85d fb04 	ldr.w	pc, [sp], #4
    7172:	bf00      	nop
    7174:	1fff8db0 	.word	0x1fff8db0
    7178:	1fff8dac 	.word	0x1fff8dac

0000717c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    717c:	b500      	push	{lr}
    717e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7180:	f7f9 ff68 	bl	1054 <Sys_GetCoreID>
    7184:	4603      	mov	r3, r0
    7186:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    7188:	4a0d      	ldr	r2, [pc, #52]	; (71c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    718a:	9b01      	ldr	r3, [sp, #4]
    718c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7190:	1e5a      	subs	r2, r3, #1
    7192:	490b      	ldr	r1, [pc, #44]	; (71c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    7194:	9b01      	ldr	r3, [sp, #4]
    7196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    719a:	4a0a      	ldr	r2, [pc, #40]	; (71c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    719c:	9b01      	ldr	r3, [sp, #4]
    719e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71a2:	f003 0301 	and.w	r3, r3, #1
    71a6:	2b00      	cmp	r3, #0
    71a8:	d106      	bne.n	71b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    71aa:	4a05      	ldr	r2, [pc, #20]	; (71c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    71ac:	9b01      	ldr	r3, [sp, #4]
    71ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71b2:	2b00      	cmp	r3, #0
    71b4:	d100      	bne.n	71b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    71b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    71b8:	bf00      	nop
    71ba:	b003      	add	sp, #12
    71bc:	f85d fb04 	ldr.w	pc, [sp], #4
    71c0:	1fff8db0 	.word	0x1fff8db0
    71c4:	1fff8dac 	.word	0x1fff8dac

000071c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    71c8:	b500      	push	{lr}
    71ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    71cc:	f7f9 ff42 	bl	1054 <Sys_GetCoreID>
    71d0:	4603      	mov	r3, r0
    71d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    71d4:	4a10      	ldr	r2, [pc, #64]	; (7218 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    71d6:	9b01      	ldr	r3, [sp, #4]
    71d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71dc:	2b00      	cmp	r3, #0
    71de:	d10d      	bne.n	71fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    71e0:	f7f9 fb84 	bl	8ec <Port_schm_read_msr>
    71e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    71e6:	9b00      	ldr	r3, [sp, #0]
    71e8:	f003 0301 	and.w	r3, r3, #1
    71ec:	2b00      	cmp	r3, #0
    71ee:	d100      	bne.n	71f2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    71f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    71f2:	490a      	ldr	r1, [pc, #40]	; (721c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    71f4:	9b01      	ldr	r3, [sp, #4]
    71f6:	9a00      	ldr	r2, [sp, #0]
    71f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    71fc:	4a06      	ldr	r2, [pc, #24]	; (7218 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    71fe:	9b01      	ldr	r3, [sp, #4]
    7200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7204:	1c5a      	adds	r2, r3, #1
    7206:	4904      	ldr	r1, [pc, #16]	; (7218 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    7208:	9b01      	ldr	r3, [sp, #4]
    720a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    720e:	bf00      	nop
    7210:	b003      	add	sp, #12
    7212:	f85d fb04 	ldr.w	pc, [sp], #4
    7216:	bf00      	nop
    7218:	1fff8db8 	.word	0x1fff8db8
    721c:	1fff8db4 	.word	0x1fff8db4

00007220 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    7220:	b500      	push	{lr}
    7222:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7224:	f7f9 ff16 	bl	1054 <Sys_GetCoreID>
    7228:	4603      	mov	r3, r0
    722a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    722c:	4a0d      	ldr	r2, [pc, #52]	; (7264 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    722e:	9b01      	ldr	r3, [sp, #4]
    7230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7234:	1e5a      	subs	r2, r3, #1
    7236:	490b      	ldr	r1, [pc, #44]	; (7264 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    7238:	9b01      	ldr	r3, [sp, #4]
    723a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    723e:	4a0a      	ldr	r2, [pc, #40]	; (7268 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    7240:	9b01      	ldr	r3, [sp, #4]
    7242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7246:	f003 0301 	and.w	r3, r3, #1
    724a:	2b00      	cmp	r3, #0
    724c:	d106      	bne.n	725c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    724e:	4a05      	ldr	r2, [pc, #20]	; (7264 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    7250:	9b01      	ldr	r3, [sp, #4]
    7252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7256:	2b00      	cmp	r3, #0
    7258:	d100      	bne.n	725c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    725a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    725c:	bf00      	nop
    725e:	b003      	add	sp, #12
    7260:	f85d fb04 	ldr.w	pc, [sp], #4
    7264:	1fff8db8 	.word	0x1fff8db8
    7268:	1fff8db4 	.word	0x1fff8db4

0000726c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    726c:	b500      	push	{lr}
    726e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7270:	f7f9 fef0 	bl	1054 <Sys_GetCoreID>
    7274:	4603      	mov	r3, r0
    7276:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    7278:	4a10      	ldr	r2, [pc, #64]	; (72bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    727a:	9b01      	ldr	r3, [sp, #4]
    727c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7280:	2b00      	cmp	r3, #0
    7282:	d10d      	bne.n	72a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7284:	f7f9 fb32 	bl	8ec <Port_schm_read_msr>
    7288:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    728a:	9b00      	ldr	r3, [sp, #0]
    728c:	f003 0301 	and.w	r3, r3, #1
    7290:	2b00      	cmp	r3, #0
    7292:	d100      	bne.n	7296 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7294:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    7296:	490a      	ldr	r1, [pc, #40]	; (72c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    7298:	9b01      	ldr	r3, [sp, #4]
    729a:	9a00      	ldr	r2, [sp, #0]
    729c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    72a0:	4a06      	ldr	r2, [pc, #24]	; (72bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    72a2:	9b01      	ldr	r3, [sp, #4]
    72a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72a8:	1c5a      	adds	r2, r3, #1
    72aa:	4904      	ldr	r1, [pc, #16]	; (72bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    72ac:	9b01      	ldr	r3, [sp, #4]
    72ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    72b2:	bf00      	nop
    72b4:	b003      	add	sp, #12
    72b6:	f85d fb04 	ldr.w	pc, [sp], #4
    72ba:	bf00      	nop
    72bc:	1fff8dc0 	.word	0x1fff8dc0
    72c0:	1fff8dbc 	.word	0x1fff8dbc

000072c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    72c4:	b500      	push	{lr}
    72c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    72c8:	f7f9 fec4 	bl	1054 <Sys_GetCoreID>
    72cc:	4603      	mov	r3, r0
    72ce:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    72d0:	4a0d      	ldr	r2, [pc, #52]	; (7308 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    72d2:	9b01      	ldr	r3, [sp, #4]
    72d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72d8:	1e5a      	subs	r2, r3, #1
    72da:	490b      	ldr	r1, [pc, #44]	; (7308 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    72dc:	9b01      	ldr	r3, [sp, #4]
    72de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    72e2:	4a0a      	ldr	r2, [pc, #40]	; (730c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    72e4:	9b01      	ldr	r3, [sp, #4]
    72e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72ea:	f003 0301 	and.w	r3, r3, #1
    72ee:	2b00      	cmp	r3, #0
    72f0:	d106      	bne.n	7300 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    72f2:	4a05      	ldr	r2, [pc, #20]	; (7308 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    72f4:	9b01      	ldr	r3, [sp, #4]
    72f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72fa:	2b00      	cmp	r3, #0
    72fc:	d100      	bne.n	7300 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    72fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7300:	bf00      	nop
    7302:	b003      	add	sp, #12
    7304:	f85d fb04 	ldr.w	pc, [sp], #4
    7308:	1fff8dc0 	.word	0x1fff8dc0
    730c:	1fff8dbc 	.word	0x1fff8dbc

00007310 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    7310:	b500      	push	{lr}
    7312:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7314:	f7f9 fe9e 	bl	1054 <Sys_GetCoreID>
    7318:	4603      	mov	r3, r0
    731a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
    731c:	4a10      	ldr	r2, [pc, #64]	; (7360 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    731e:	9b01      	ldr	r3, [sp, #4]
    7320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7324:	2b00      	cmp	r3, #0
    7326:	d10d      	bne.n	7344 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7328:	f7f9 fae0 	bl	8ec <Port_schm_read_msr>
    732c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    732e:	9b00      	ldr	r3, [sp, #0]
    7330:	f003 0301 	and.w	r3, r3, #1
    7334:	2b00      	cmp	r3, #0
    7336:	d100      	bne.n	733a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7338:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    733a:	490a      	ldr	r1, [pc, #40]	; (7364 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    733c:	9b01      	ldr	r3, [sp, #4]
    733e:	9a00      	ldr	r2, [sp, #0]
    7340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
    7344:	4a06      	ldr	r2, [pc, #24]	; (7360 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    7346:	9b01      	ldr	r3, [sp, #4]
    7348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    734c:	1c5a      	adds	r2, r3, #1
    734e:	4904      	ldr	r1, [pc, #16]	; (7360 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    7350:	9b01      	ldr	r3, [sp, #4]
    7352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7356:	bf00      	nop
    7358:	b003      	add	sp, #12
    735a:	f85d fb04 	ldr.w	pc, [sp], #4
    735e:	bf00      	nop
    7360:	1fff8dc8 	.word	0x1fff8dc8
    7364:	1fff8dc4 	.word	0x1fff8dc4

00007368 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    7368:	b500      	push	{lr}
    736a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    736c:	f7f9 fe72 	bl	1054 <Sys_GetCoreID>
    7370:	4603      	mov	r3, r0
    7372:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
    7374:	4a0d      	ldr	r2, [pc, #52]	; (73ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    7376:	9b01      	ldr	r3, [sp, #4]
    7378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    737c:	1e5a      	subs	r2, r3, #1
    737e:	490b      	ldr	r1, [pc, #44]	; (73ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    7380:	9b01      	ldr	r3, [sp, #4]
    7382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    7386:	4a0a      	ldr	r2, [pc, #40]	; (73b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    7388:	9b01      	ldr	r3, [sp, #4]
    738a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    738e:	f003 0301 	and.w	r3, r3, #1
    7392:	2b00      	cmp	r3, #0
    7394:	d106      	bne.n	73a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    7396:	4a05      	ldr	r2, [pc, #20]	; (73ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    7398:	9b01      	ldr	r3, [sp, #4]
    739a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    739e:	2b00      	cmp	r3, #0
    73a0:	d100      	bne.n	73a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    73a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    73a4:	bf00      	nop
    73a6:	b003      	add	sp, #12
    73a8:	f85d fb04 	ldr.w	pc, [sp], #4
    73ac:	1fff8dc8 	.word	0x1fff8dc8
    73b0:	1fff8dc4 	.word	0x1fff8dc4

000073b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    73b4:	b500      	push	{lr}
    73b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    73b8:	f7f9 fe4c 	bl	1054 <Sys_GetCoreID>
    73bc:	4603      	mov	r3, r0
    73be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
    73c0:	4a10      	ldr	r2, [pc, #64]	; (7404 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    73c2:	9b01      	ldr	r3, [sp, #4]
    73c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73c8:	2b00      	cmp	r3, #0
    73ca:	d10d      	bne.n	73e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    73cc:	f7f9 fa8e 	bl	8ec <Port_schm_read_msr>
    73d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    73d2:	9b00      	ldr	r3, [sp, #0]
    73d4:	f003 0301 	and.w	r3, r3, #1
    73d8:	2b00      	cmp	r3, #0
    73da:	d100      	bne.n	73de <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    73dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    73de:	490a      	ldr	r1, [pc, #40]	; (7408 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    73e0:	9b01      	ldr	r3, [sp, #4]
    73e2:	9a00      	ldr	r2, [sp, #0]
    73e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
    73e8:	4a06      	ldr	r2, [pc, #24]	; (7404 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    73ea:	9b01      	ldr	r3, [sp, #4]
    73ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73f0:	1c5a      	adds	r2, r3, #1
    73f2:	4904      	ldr	r1, [pc, #16]	; (7404 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    73f4:	9b01      	ldr	r3, [sp, #4]
    73f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    73fa:	bf00      	nop
    73fc:	b003      	add	sp, #12
    73fe:	f85d fb04 	ldr.w	pc, [sp], #4
    7402:	bf00      	nop
    7404:	1fff8dd0 	.word	0x1fff8dd0
    7408:	1fff8dcc 	.word	0x1fff8dcc

0000740c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    740c:	b500      	push	{lr}
    740e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7410:	f7f9 fe20 	bl	1054 <Sys_GetCoreID>
    7414:	4603      	mov	r3, r0
    7416:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
    7418:	4a0d      	ldr	r2, [pc, #52]	; (7450 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    741a:	9b01      	ldr	r3, [sp, #4]
    741c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7420:	1e5a      	subs	r2, r3, #1
    7422:	490b      	ldr	r1, [pc, #44]	; (7450 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    7424:	9b01      	ldr	r3, [sp, #4]
    7426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    742a:	4a0a      	ldr	r2, [pc, #40]	; (7454 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    742c:	9b01      	ldr	r3, [sp, #4]
    742e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7432:	f003 0301 	and.w	r3, r3, #1
    7436:	2b00      	cmp	r3, #0
    7438:	d106      	bne.n	7448 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    743a:	4a05      	ldr	r2, [pc, #20]	; (7450 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    743c:	9b01      	ldr	r3, [sp, #4]
    743e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7442:	2b00      	cmp	r3, #0
    7444:	d100      	bne.n	7448 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7446:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7448:	bf00      	nop
    744a:	b003      	add	sp, #12
    744c:	f85d fb04 	ldr.w	pc, [sp], #4
    7450:	1fff8dd0 	.word	0x1fff8dd0
    7454:	1fff8dcc 	.word	0x1fff8dcc

00007458 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    7458:	b500      	push	{lr}
    745a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    745c:	f7f9 fdfa 	bl	1054 <Sys_GetCoreID>
    7460:	4603      	mov	r3, r0
    7462:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
    7464:	4a10      	ldr	r2, [pc, #64]	; (74a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    7466:	9b01      	ldr	r3, [sp, #4]
    7468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    746c:	2b00      	cmp	r3, #0
    746e:	d10d      	bne.n	748c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7470:	f7f9 fa3c 	bl	8ec <Port_schm_read_msr>
    7474:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7476:	9b00      	ldr	r3, [sp, #0]
    7478:	f003 0301 	and.w	r3, r3, #1
    747c:	2b00      	cmp	r3, #0
    747e:	d100      	bne.n	7482 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7480:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    7482:	490a      	ldr	r1, [pc, #40]	; (74ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    7484:	9b01      	ldr	r3, [sp, #4]
    7486:	9a00      	ldr	r2, [sp, #0]
    7488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
    748c:	4a06      	ldr	r2, [pc, #24]	; (74a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    748e:	9b01      	ldr	r3, [sp, #4]
    7490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7494:	1c5a      	adds	r2, r3, #1
    7496:	4904      	ldr	r1, [pc, #16]	; (74a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    7498:	9b01      	ldr	r3, [sp, #4]
    749a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    749e:	bf00      	nop
    74a0:	b003      	add	sp, #12
    74a2:	f85d fb04 	ldr.w	pc, [sp], #4
    74a6:	bf00      	nop
    74a8:	1fff8dd8 	.word	0x1fff8dd8
    74ac:	1fff8dd4 	.word	0x1fff8dd4

000074b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    74b0:	b500      	push	{lr}
    74b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    74b4:	f7f9 fdce 	bl	1054 <Sys_GetCoreID>
    74b8:	4603      	mov	r3, r0
    74ba:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
    74bc:	4a0d      	ldr	r2, [pc, #52]	; (74f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    74be:	9b01      	ldr	r3, [sp, #4]
    74c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74c4:	1e5a      	subs	r2, r3, #1
    74c6:	490b      	ldr	r1, [pc, #44]	; (74f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    74c8:	9b01      	ldr	r3, [sp, #4]
    74ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    74ce:	4a0a      	ldr	r2, [pc, #40]	; (74f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    74d0:	9b01      	ldr	r3, [sp, #4]
    74d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74d6:	f003 0301 	and.w	r3, r3, #1
    74da:	2b00      	cmp	r3, #0
    74dc:	d106      	bne.n	74ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    74de:	4a05      	ldr	r2, [pc, #20]	; (74f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    74e0:	9b01      	ldr	r3, [sp, #4]
    74e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74e6:	2b00      	cmp	r3, #0
    74e8:	d100      	bne.n	74ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    74ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    74ec:	bf00      	nop
    74ee:	b003      	add	sp, #12
    74f0:	f85d fb04 	ldr.w	pc, [sp], #4
    74f4:	1fff8dd8 	.word	0x1fff8dd8
    74f8:	1fff8dd4 	.word	0x1fff8dd4

000074fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    74fc:	b500      	push	{lr}
    74fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7500:	f7f9 fda8 	bl	1054 <Sys_GetCoreID>
    7504:	4603      	mov	r3, r0
    7506:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
    7508:	4a10      	ldr	r2, [pc, #64]	; (754c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    750a:	9b01      	ldr	r3, [sp, #4]
    750c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7510:	2b00      	cmp	r3, #0
    7512:	d10d      	bne.n	7530 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7514:	f7f9 f9ea 	bl	8ec <Port_schm_read_msr>
    7518:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    751a:	9b00      	ldr	r3, [sp, #0]
    751c:	f003 0301 	and.w	r3, r3, #1
    7520:	2b00      	cmp	r3, #0
    7522:	d100      	bne.n	7526 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7524:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    7526:	490a      	ldr	r1, [pc, #40]	; (7550 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    7528:	9b01      	ldr	r3, [sp, #4]
    752a:	9a00      	ldr	r2, [sp, #0]
    752c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
    7530:	4a06      	ldr	r2, [pc, #24]	; (754c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    7532:	9b01      	ldr	r3, [sp, #4]
    7534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7538:	1c5a      	adds	r2, r3, #1
    753a:	4904      	ldr	r1, [pc, #16]	; (754c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    753c:	9b01      	ldr	r3, [sp, #4]
    753e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7542:	bf00      	nop
    7544:	b003      	add	sp, #12
    7546:	f85d fb04 	ldr.w	pc, [sp], #4
    754a:	bf00      	nop
    754c:	1fff8de0 	.word	0x1fff8de0
    7550:	1fff8ddc 	.word	0x1fff8ddc

00007554 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    7554:	b500      	push	{lr}
    7556:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7558:	f7f9 fd7c 	bl	1054 <Sys_GetCoreID>
    755c:	4603      	mov	r3, r0
    755e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
    7560:	4a0d      	ldr	r2, [pc, #52]	; (7598 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    7562:	9b01      	ldr	r3, [sp, #4]
    7564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7568:	1e5a      	subs	r2, r3, #1
    756a:	490b      	ldr	r1, [pc, #44]	; (7598 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    756c:	9b01      	ldr	r3, [sp, #4]
    756e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    7572:	4a0a      	ldr	r2, [pc, #40]	; (759c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    7574:	9b01      	ldr	r3, [sp, #4]
    7576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    757a:	f003 0301 	and.w	r3, r3, #1
    757e:	2b00      	cmp	r3, #0
    7580:	d106      	bne.n	7590 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    7582:	4a05      	ldr	r2, [pc, #20]	; (7598 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    7584:	9b01      	ldr	r3, [sp, #4]
    7586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    758a:	2b00      	cmp	r3, #0
    758c:	d100      	bne.n	7590 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    758e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7590:	bf00      	nop
    7592:	b003      	add	sp, #12
    7594:	f85d fb04 	ldr.w	pc, [sp], #4
    7598:	1fff8de0 	.word	0x1fff8de0
    759c:	1fff8ddc 	.word	0x1fff8ddc

000075a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    75a0:	b500      	push	{lr}
    75a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    75a4:	f7f9 fd56 	bl	1054 <Sys_GetCoreID>
    75a8:	4603      	mov	r3, r0
    75aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
    75ac:	4a10      	ldr	r2, [pc, #64]	; (75f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    75ae:	9b01      	ldr	r3, [sp, #4]
    75b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75b4:	2b00      	cmp	r3, #0
    75b6:	d10d      	bne.n	75d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    75b8:	f7f9 f998 	bl	8ec <Port_schm_read_msr>
    75bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    75be:	9b00      	ldr	r3, [sp, #0]
    75c0:	f003 0301 	and.w	r3, r3, #1
    75c4:	2b00      	cmp	r3, #0
    75c6:	d100      	bne.n	75ca <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    75c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    75ca:	490a      	ldr	r1, [pc, #40]	; (75f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    75cc:	9b01      	ldr	r3, [sp, #4]
    75ce:	9a00      	ldr	r2, [sp, #0]
    75d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
    75d4:	4a06      	ldr	r2, [pc, #24]	; (75f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    75d6:	9b01      	ldr	r3, [sp, #4]
    75d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75dc:	1c5a      	adds	r2, r3, #1
    75de:	4904      	ldr	r1, [pc, #16]	; (75f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    75e0:	9b01      	ldr	r3, [sp, #4]
    75e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    75e6:	bf00      	nop
    75e8:	b003      	add	sp, #12
    75ea:	f85d fb04 	ldr.w	pc, [sp], #4
    75ee:	bf00      	nop
    75f0:	1fff8de8 	.word	0x1fff8de8
    75f4:	1fff8de4 	.word	0x1fff8de4

000075f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    75f8:	b500      	push	{lr}
    75fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    75fc:	f7f9 fd2a 	bl	1054 <Sys_GetCoreID>
    7600:	4603      	mov	r3, r0
    7602:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
    7604:	4a0d      	ldr	r2, [pc, #52]	; (763c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    7606:	9b01      	ldr	r3, [sp, #4]
    7608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    760c:	1e5a      	subs	r2, r3, #1
    760e:	490b      	ldr	r1, [pc, #44]	; (763c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    7610:	9b01      	ldr	r3, [sp, #4]
    7612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    7616:	4a0a      	ldr	r2, [pc, #40]	; (7640 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    7618:	9b01      	ldr	r3, [sp, #4]
    761a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    761e:	f003 0301 	and.w	r3, r3, #1
    7622:	2b00      	cmp	r3, #0
    7624:	d106      	bne.n	7634 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    7626:	4a05      	ldr	r2, [pc, #20]	; (763c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    7628:	9b01      	ldr	r3, [sp, #4]
    762a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    762e:	2b00      	cmp	r3, #0
    7630:	d100      	bne.n	7634 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7632:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7634:	bf00      	nop
    7636:	b003      	add	sp, #12
    7638:	f85d fb04 	ldr.w	pc, [sp], #4
    763c:	1fff8de8 	.word	0x1fff8de8
    7640:	1fff8de4 	.word	0x1fff8de4

00007644 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    7644:	b500      	push	{lr}
    7646:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7648:	f7f9 fd04 	bl	1054 <Sys_GetCoreID>
    764c:	4603      	mov	r3, r0
    764e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
    7650:	4a10      	ldr	r2, [pc, #64]	; (7694 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    7652:	9b01      	ldr	r3, [sp, #4]
    7654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7658:	2b00      	cmp	r3, #0
    765a:	d10d      	bne.n	7678 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    765c:	f7f9 f946 	bl	8ec <Port_schm_read_msr>
    7660:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7662:	9b00      	ldr	r3, [sp, #0]
    7664:	f003 0301 	and.w	r3, r3, #1
    7668:	2b00      	cmp	r3, #0
    766a:	d100      	bne.n	766e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    766c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    766e:	490a      	ldr	r1, [pc, #40]	; (7698 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    7670:	9b01      	ldr	r3, [sp, #4]
    7672:	9a00      	ldr	r2, [sp, #0]
    7674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
    7678:	4a06      	ldr	r2, [pc, #24]	; (7694 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    767a:	9b01      	ldr	r3, [sp, #4]
    767c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7680:	1c5a      	adds	r2, r3, #1
    7682:	4904      	ldr	r1, [pc, #16]	; (7694 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    7684:	9b01      	ldr	r3, [sp, #4]
    7686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    768a:	bf00      	nop
    768c:	b003      	add	sp, #12
    768e:	f85d fb04 	ldr.w	pc, [sp], #4
    7692:	bf00      	nop
    7694:	1fff8df0 	.word	0x1fff8df0
    7698:	1fff8dec 	.word	0x1fff8dec

0000769c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    769c:	b500      	push	{lr}
    769e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    76a0:	f7f9 fcd8 	bl	1054 <Sys_GetCoreID>
    76a4:	4603      	mov	r3, r0
    76a6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
    76a8:	4a0d      	ldr	r2, [pc, #52]	; (76e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    76aa:	9b01      	ldr	r3, [sp, #4]
    76ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76b0:	1e5a      	subs	r2, r3, #1
    76b2:	490b      	ldr	r1, [pc, #44]	; (76e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    76b4:	9b01      	ldr	r3, [sp, #4]
    76b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    76ba:	4a0a      	ldr	r2, [pc, #40]	; (76e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    76bc:	9b01      	ldr	r3, [sp, #4]
    76be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76c2:	f003 0301 	and.w	r3, r3, #1
    76c6:	2b00      	cmp	r3, #0
    76c8:	d106      	bne.n	76d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    76ca:	4a05      	ldr	r2, [pc, #20]	; (76e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    76cc:	9b01      	ldr	r3, [sp, #4]
    76ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76d2:	2b00      	cmp	r3, #0
    76d4:	d100      	bne.n	76d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    76d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    76d8:	bf00      	nop
    76da:	b003      	add	sp, #12
    76dc:	f85d fb04 	ldr.w	pc, [sp], #4
    76e0:	1fff8df0 	.word	0x1fff8df0
    76e4:	1fff8dec 	.word	0x1fff8dec

000076e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    76e8:	b500      	push	{lr}
    76ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    76ec:	f7f9 fcb2 	bl	1054 <Sys_GetCoreID>
    76f0:	4603      	mov	r3, r0
    76f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
    76f4:	4a10      	ldr	r2, [pc, #64]	; (7738 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    76f6:	9b01      	ldr	r3, [sp, #4]
    76f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76fc:	2b00      	cmp	r3, #0
    76fe:	d10d      	bne.n	771c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7700:	f7f9 f8f4 	bl	8ec <Port_schm_read_msr>
    7704:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7706:	9b00      	ldr	r3, [sp, #0]
    7708:	f003 0301 	and.w	r3, r3, #1
    770c:	2b00      	cmp	r3, #0
    770e:	d100      	bne.n	7712 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7710:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    7712:	490a      	ldr	r1, [pc, #40]	; (773c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    7714:	9b01      	ldr	r3, [sp, #4]
    7716:	9a00      	ldr	r2, [sp, #0]
    7718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
    771c:	4a06      	ldr	r2, [pc, #24]	; (7738 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    771e:	9b01      	ldr	r3, [sp, #4]
    7720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7724:	1c5a      	adds	r2, r3, #1
    7726:	4904      	ldr	r1, [pc, #16]	; (7738 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    7728:	9b01      	ldr	r3, [sp, #4]
    772a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    772e:	bf00      	nop
    7730:	b003      	add	sp, #12
    7732:	f85d fb04 	ldr.w	pc, [sp], #4
    7736:	bf00      	nop
    7738:	1fff8df8 	.word	0x1fff8df8
    773c:	1fff8df4 	.word	0x1fff8df4

00007740 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    7740:	b500      	push	{lr}
    7742:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7744:	f7f9 fc86 	bl	1054 <Sys_GetCoreID>
    7748:	4603      	mov	r3, r0
    774a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
    774c:	4a0d      	ldr	r2, [pc, #52]	; (7784 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    774e:	9b01      	ldr	r3, [sp, #4]
    7750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7754:	1e5a      	subs	r2, r3, #1
    7756:	490b      	ldr	r1, [pc, #44]	; (7784 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    7758:	9b01      	ldr	r3, [sp, #4]
    775a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    775e:	4a0a      	ldr	r2, [pc, #40]	; (7788 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    7760:	9b01      	ldr	r3, [sp, #4]
    7762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7766:	f003 0301 	and.w	r3, r3, #1
    776a:	2b00      	cmp	r3, #0
    776c:	d106      	bne.n	777c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    776e:	4a05      	ldr	r2, [pc, #20]	; (7784 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    7770:	9b01      	ldr	r3, [sp, #4]
    7772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7776:	2b00      	cmp	r3, #0
    7778:	d100      	bne.n	777c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    777a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    777c:	bf00      	nop
    777e:	b003      	add	sp, #12
    7780:	f85d fb04 	ldr.w	pc, [sp], #4
    7784:	1fff8df8 	.word	0x1fff8df8
    7788:	1fff8df4 	.word	0x1fff8df4

0000778c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    778c:	b500      	push	{lr}
    778e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7790:	f7f9 fc60 	bl	1054 <Sys_GetCoreID>
    7794:	4603      	mov	r3, r0
    7796:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
    7798:	4a10      	ldr	r2, [pc, #64]	; (77dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    779a:	9b01      	ldr	r3, [sp, #4]
    779c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77a0:	2b00      	cmp	r3, #0
    77a2:	d10d      	bne.n	77c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    77a4:	f7f9 f8a2 	bl	8ec <Port_schm_read_msr>
    77a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    77aa:	9b00      	ldr	r3, [sp, #0]
    77ac:	f003 0301 	and.w	r3, r3, #1
    77b0:	2b00      	cmp	r3, #0
    77b2:	d100      	bne.n	77b6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    77b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    77b6:	490a      	ldr	r1, [pc, #40]	; (77e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    77b8:	9b01      	ldr	r3, [sp, #4]
    77ba:	9a00      	ldr	r2, [sp, #0]
    77bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
    77c0:	4a06      	ldr	r2, [pc, #24]	; (77dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    77c2:	9b01      	ldr	r3, [sp, #4]
    77c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77c8:	1c5a      	adds	r2, r3, #1
    77ca:	4904      	ldr	r1, [pc, #16]	; (77dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    77cc:	9b01      	ldr	r3, [sp, #4]
    77ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    77d2:	bf00      	nop
    77d4:	b003      	add	sp, #12
    77d6:	f85d fb04 	ldr.w	pc, [sp], #4
    77da:	bf00      	nop
    77dc:	1fff8e00 	.word	0x1fff8e00
    77e0:	1fff8dfc 	.word	0x1fff8dfc

000077e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    77e4:	b500      	push	{lr}
    77e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    77e8:	f7f9 fc34 	bl	1054 <Sys_GetCoreID>
    77ec:	4603      	mov	r3, r0
    77ee:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
    77f0:	4a0d      	ldr	r2, [pc, #52]	; (7828 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    77f2:	9b01      	ldr	r3, [sp, #4]
    77f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77f8:	1e5a      	subs	r2, r3, #1
    77fa:	490b      	ldr	r1, [pc, #44]	; (7828 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    77fc:	9b01      	ldr	r3, [sp, #4]
    77fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    7802:	4a0a      	ldr	r2, [pc, #40]	; (782c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    7804:	9b01      	ldr	r3, [sp, #4]
    7806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    780a:	f003 0301 	and.w	r3, r3, #1
    780e:	2b00      	cmp	r3, #0
    7810:	d106      	bne.n	7820 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    7812:	4a05      	ldr	r2, [pc, #20]	; (7828 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    7814:	9b01      	ldr	r3, [sp, #4]
    7816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    781a:	2b00      	cmp	r3, #0
    781c:	d100      	bne.n	7820 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    781e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7820:	bf00      	nop
    7822:	b003      	add	sp, #12
    7824:	f85d fb04 	ldr.w	pc, [sp], #4
    7828:	1fff8e00 	.word	0x1fff8e00
    782c:	1fff8dfc 	.word	0x1fff8dfc

00007830 <Clock_Ip_au8DividerCallbackIndex>:
    7830:	0e0d0c00 06030201 0a070409 000b0805     ................

00007840 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

00007850 <Clock_Ip_au8XoscCallbackIndex>:
    7850:	00000100 00000000 00000000 00000000     ................

00007860 <Clock_Ip_au8IrcoscCallbackIndex>:
    7860:	03020100 00000004 00000000 00000000     ................

00007870 <Clock_Ip_au8GateCallbackIndex>:
    7870:	06010200 01040301 00000500 00000000     ................

00007880 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

00007890 <Clock_Ip_au8PllCallbackIndex>:
    7890:	00000100 00000000 00000000 00000000     ................

000078a0 <Clock_Ip_au8SelectorCallbackIndex>:
    78a0:	0a090800 03020109 07060504 00000000     ................

000078b0 <Clock_Ip_au8PcfsCallbackIndex>:
	...

000078c0 <Clock_Ip_au8CmuCallbackIndex>:
	...

000078d0 <Clock_Ip_au8ClockFeatures>:
	...
    78e0:	01000000 00000000 00000000 00000002     ................
    78f0:	00000000 00000300 00000000 00040000     ................
    7900:	00000000 05000000 00000000 00000000     ................
    7910:	00000006 00000000 00000100 00000000     ................
    7920:	00010000 00000000 04000000 00000000     ................
    7930:	00000000 00000005 00000001 00000401     ................
    7940:	00000200 00050100 00030000 04020000     ................
    7950:	04000000 02000000 00000005 00000005     ................
    7960:	00000403 00000600 00050300 00070000     ................
    7970:	05000000 00000000 00000000 00000006     ................
	...
    79b0:	00050000 00000000 06000000 00000100     ................
    79c0:	00000000 00030007 00000000 00000000     ................
    79d0:	00000000 00060000 00000000 07000000     ................
    79e0:	00000100 00000000 00030008 00000000     ................
	...
    79f8:	00090000 00000000 0a000000 00000100     ................
    7a08:	00000000 0003000b 00000000 00000000     ................
    7a18:	00000000 000c0000 00000000 0d000000     ................
    7a28:	00000100 00000000 0003000e 00000000     ................
    7a38:	00000800 00000000 00090000 00000000     ................
    7a48:	0a000000 00000000 00000000 0000000b     ................
    7a58:	00000000 00000b01 00000000 000b0200     ................
    7a68:	00000000 0b030000 00000000 00000000     ................
	...
    7a80:	00000400 003b003b 00040000 27002700     ....;.;......'.'
    7a90:	01000000 00000000 00000000 00000007     ................
    7aa0:	00007300 00000700 00320000 00090000     .s........2.....
    7ab0:	02000000 07000000 00000000 00000021     ............!...
    7ac0:	00000009 00000400 00000900 00030000     ................
    7ad0:	00070000 61000000 07000000 00000000     .......a........
    7ae0:	00000024 00000007 00002500 00000700     $........%......
    7af0:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
    7b00:	00000000 00000020 38000004 00003800     .... ......8.8..
    7b10:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
    7b20:	04000000 00260000 00000026 66000004     ......&.&......f
    7b30:	00006600 00000400 00370037 00040000     .f......7.7.....
    7b40:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
    7b50:	2e000004 00002e00 00000200 00404040     ............@@@.
    7b60:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
    7b70:	0000006b 6c000004 00006c00 00000900     k......l.l......
    7b80:	00010000 00090000 00000000 07000000     ................
    7b90:	00000000 00000036 00000007 00003100     ....6........1..
    7ba0:	00000700 00490000 00070000 4a000000     ......I........J
    7bb0:	07000000 00000000 0000004b 00000007     ........K.......
    7bc0:	00004c00 00000700 004d0000 00070000     .L........M.....
    7bd0:	3d000000 03000000 00000000 00000000     ...=............

00007be0 <Clock_Ip_au16SelectorEntryHardwareValue>:
    7be0:	01010a03 01010001 04040002 02000603     ................
    7bf0:	00010810 02020100 00000000 00000007     ................
    7c00:	00000009 00000000 00000c0e 00000000     ................
	...

00007c38 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
    7c38:	00020000 00000300 00000601 00000000     ................
	...

00007c68 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
    7c68:	00000700 00000000 02020000 01010303     ................
    7c78:	03020606 00000000 00000000 00000000     ................
	...

00007c98 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
    7c98:	00000001 00000000 02020000 01010303     ................
    7ca8:	03020606 00000000 00000000 00000000     ................
	...

00007cc8 <Clock_Ip_au8DividerValueHardwareValue>:
    7cc8:	00020100 00000003 00000004 00000000     ................
    7cd8:	00000005 00000000 00000000 00000000     ................
    7ce8:	00000006 00000000 00000000 00000000     ................
	...
    7d08:	00000007                                ....

00007d0c <Clock_Ip_apxScgPeriphAsyncDivs>:
    7d0c:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

00007d1c <Clock_Ip_aeSourceTypeClockName>:
    7d1c:	00000000 00000001 00000001 00000001     ................
    7d2c:	00000001 00000001 00000001 00000001     ................
    7d3c:	00000002 00000003 00000001 00000001     ................
    7d4c:	00000001 00000001 00000002 00000002     ................
    7d5c:	00000003 00000003 00000001 00000001     ................
    7d6c:	00000004 00000004 00000004 00000004     ................
	...

00007dd8 <Clock_Ip_aeHwPllName>:
    7dd8:	00000009                                ....

00007ddc <Clock_Ip_aeHwDfsName>:
    7ddc:	00000057                                W...

00007de0 <Clock_Ip_axDividerCallbacks>:
    7de0:	000022a9 000022b3 000022cd 000022e7     ."..."..."..."..
    7df0:	00002301 0000231b 00002335 0000234f     .#...#..5#..O#..
    7e00:	00002369 00002383 0000239d 000023b7     i#...#...#...#..
    7e10:	000023d1 000023eb 00002405              .#...#...$..

00007e1c <Clock_Ip_axDividerTriggerCallbacks>:
    7e1c:	00002779 00002779                       y'..y'..

00007e24 <Clock_Ip_axExtOscCallbacks>:
    7e24:	00002785 00002785 00002785 0000278f     .'...'...'...'..
    7e34:	00002785 00002799 000027b3 000027cd     .'...'...'...'..
    7e44:	00002851 00002865                       Q(..e(..

00007e4c <Clock_Ip_axFracDivCallbacks>:
    7e4c:	00002a25 00002a25 00002a2f              %*..%*../*..

00007e58 <Clock_Ip_axGateCallbacks>:
    7e58:	00002a49 00002a53 00002b53 00002b6d     I*..S*..S+..m+..
    7e68:	00002b03 00002b1d 00002ab3 00002acd     .+...+...*...*..
    7e78:	00002a63 00002a7d 00002ba3 00002bbd     c*..}*...+...+..
    7e88:	00002bf3 00002c0d                       .+...,..

00007e90 <Clock_Ip_axIntOscCallbacks>:
    7e90:	00002db9 00002db9 00002dc3 00002dcd     .-...-...-...-..
    7ea0:	00002de7 00002e01 00002e15 00002e2f     .-........../...
    7eb0:	00002e49 00002e5d 00002e77 00002e91     I...]...w.......
    7ec0:	00002f39 00002f53 00002f6d              9/..S/..m/..

00007ecc <Clock_Ip_axCmuCallbacks>:
    7ecc:	00003509 00003513 0000351f 00003509     .5...5...5...5..

00007edc <Clock_Ip_axPllCallbacks>:
    7edc:	00003529 00003529 00003533 00003529     )5..)5..35..)5..
    7eec:	0000353f 00003549 00003563 0000357d     ?5..I5..c5..}5..
    7efc:	00003621 0000360d                       !6...6..

00007f04 <Clock_Ip_axPcfsCallbacks>:
    7f04:	0000377d                                }7..

00007f08 <Clock_Ip_axSelectorCallbacks>:
    7f08:	00003789 00003789 00003793 000037ad     .7...7...7...7..
    7f18:	00003789 000037c7 000037e1 000037fb     .7...7...7...7..
    7f28:	00003815 0000382f 00003849 00003863     .8../8..I8..c8..
    7f38:	0000387d 00003897 000038b1 000038cb     }8...8...8...8..
    7f48:	000038e5 000038ff 00003919 00003933     .8...8...9..39..
    7f58:	0000394d 00003967                       M9..g9..

00007f60 <ClockSource>:
    7f60:	00000000 00000008 00000002 00000005     ................
	...
    7f78:	00000009                                ....

00007f7c <ResetReasonArray>:
    7f7c:	00000000 00000001 00000002 00000003     ................
    7f8c:	00000004 00000005 00000006 00000007     ................
    7f9c:	00000008 00000009 0000000a 0000000b     ................
    7fac:	0000000c 0000000d 0000000e              ............

00007fb8 <Port_au32PortCiPortBaseAddr>:
    7fb8:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
    7fc8:	4004d000                                ...@

00007fcc <Port_au32PortCiGpioBaseAddr>:
    7fcc:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
    7fdc:	400ff100                                ...@

00007fe0 <Task_Config>:
    7fe0:	00000032 00000001 000008ff 00000064     2...........d...
    7ff0:	00000001 00000909                       ........

00007ff8 <Timer_Config>:
    7ff8:	0000012c 00000000 00000955              ,.......U...

00008004 <Scheduler_Config>:
    8004:	0000000a 00000002 00007fe0 00000001     ................
    8014:	00007ff8                                ....

00008018 <Mcu_aClockConfigPB>:
	...
    8020:	14000002 0400000e 01000020 00000002     ........ .......
    8030:	01000001 00000001 00000005 00000001     ................
    8040:	00000000 00000057 00000000 00000000     ....W...........
	...
    8058:	00000057 00000000 00000057 00000000     W.......W.......
	...
    8080:	00000019 00000005 0000001a 00000002     ................
    8090:	0000001b 00000005 0000002a 00000002     ........*.......
    80a0:	0000003f 0000000a 00000040 00000000     ?.......@.......
    80b0:	00000041 00000000 00000042 00000000     A.......B.......
    80c0:	00000031 00000000 00000045 00000000     1.......E.......
    80d0:	00000046 00000000 00000047 00000000     F.......G.......
    80e0:	00000044 00000000 00000030 00000000     D.......0.......
    80f0:	0000003d 00000000 00000043 00000000     =.......C.......
    8100:	00000049 00000000 0000004a 00000000     I.......J.......
    8110:	0000004b 00000000 00000048 00000000     K.......H.......
    8120:	00000057 00000057 00000057 00000057     W...W...W...W...
    8130:	00000057 00000057 00000057 00000057     W...W...W...W...
    8140:	00000057 00000057 00000057 00000057     W...W...W...W...
    8150:	00000057 00000057 00000057 00000057     W...W...W...W...
    8160:	0000000a 00000008 00000000 0000000b     ................
    8170:	00000001 00000000 0000000c 00000001     ................
    8180:	00000000 0000000d 00000001 00000000     ................
    8190:	0000001d 00000001 00000000 0000001e     ................
    81a0:	00000002 00000000 0000001f 00000001     ................
    81b0:	00000000 00000021 00000001 00000000     ....!...........
    81c0:	00000022 00000002 00000000 00000023     "...........#...
    81d0:	00000001 00000000 00000025 00000002     ........%.......
    81e0:	00000000 00000026 00000004 00000000     ....&...........
    81f0:	00000027 00000002 00000000 00000048     '...........H...
    8200:	00000001 00000001 00000057 00000000     ........W.......
    8210:	00000000 00000057 00000000 00000000     ....W...........
    8220:	00000057 00000000 00000000 00000057     W...........W...
	...
    8238:	00000057 00000000 00000000 00000057     W...........W...
	...
    8250:	00000057 00000000 00000057 00000057     W.......W...W...
	...
    826c:	00000014 00007d00 00000015 00007d00     .....}.......}..
    827c:	00000016 00007d00 00000017 00008000     .....}..........
    828c:	00000030 00000000 00000031 00000000     0.......1.......
    829c:	00000033 00000000 00000034 00000000     3.......4.......
    82ac:	00000036 00000000 00000039 00000000     6.......9.......
    82bc:	0000003a 00000000 0000003b 00000000     :.......;.......
    82cc:	0000003c 00000000 0000003d 00000000     <.......=.......
    82dc:	0000003e 00000000 0000003f 00000000     >.......?.......
    82ec:	00000040 00000000 00000041 00000000     @.......A.......
    82fc:	00000042 00000000 00000043 00000000     B.......C.......
    830c:	00000044 00000000 00000045 00000000     D.......E.......
    831c:	00000046 00000000 00000047 00000000     F.......G.......
    832c:	00000048 00000000 00000049 00000000     H.......I.......
    833c:	0000004a 00000000 0000004b 00000000     J.......K.......
    834c:	0000004e 00000000 0000004f 00000000     N.......O.......
    835c:	00000050 00000001 00000051 00000001     P.......Q.......
    836c:	00000052 00000001 00000053 00000001     R.......S.......
    837c:	00000054 00000001 00000055 00000000     T.......U.......
    838c:	00000057 00000000 00000057 00000000     W.......W.......
    839c:	00000057 00000000 00000057 00000000     W.......W.......
    83ac:	00000057 00000000 00000057 00000000     W.......W.......
    83bc:	00000057 00000000 00000057 00000000     W.......W.......
    83cc:	00000057 00000000 00000057 00000000     W.......W.......
    83dc:	00000000 00000057 00000000 00000057     ....W.......W...
	...

00008410 <Mcu_Config>:
    8410:	0000005a 00000000 00000001 00000001     Z...............
    8420:	0000865c 00008018 00008668              \.......h...

0000842c <OsIf_xPredefinedConfig>:
    842c:	00000000 02dc6c00                       .....l..

00008434 <OsIf_apxPredefinedConfig>:
    8434:	0000842c                                ,...

00008438 <g_pin_mux_InitConfigArr>:
    8438:	4004b000 400ff080 00000008 00000002     ...@...@........
    8448:	00000001 00000002 00000000 00000000     ................
	...
    8460:	4004b000 400ff080 00000009 00000002     ...@...@........
    8470:	00000001 00000002 00000000 00000000     ................
	...
    8488:	4004b000 400ff080 0000000a 00000002     ...@...@........
    8498:	00000001 00000002 00000000 00000000     ................
	...
    84b0:	4004b000 400ff080 0000000b 00000002     ...@...@........
    84c0:	00000001 00000002 00000000 00000000     ................
	...
    84d8:	4004d000 400ff100 0000000c 00000002     ...@...@........
    84e8:	00000001 00000001 00000000 00000000     ................
	...

00008500 <au8Port_PartitionList>:
    8500:	00000001                                ....

00008504 <au32Port_PinToPartitionMap>:
    8504:	00000001 00000001 00000001 00000001     ................
    8514:	00000001                                ....

00008518 <Port_au16NoUnUsedPadsArrayDefault>:
    8518:	00010000 00030002 00070006 00090008     ................
    8528:	000c000b 000e000d 0010000f 00200011     .............. .
    8538:	00220021 00240023 00260025 00280027     !.".#.$.%.&.'.(.
    8548:	002a0029 002c002b 002e002d 0030002f     ).*.+.,.-.../.0.
    8558:	00400031 00420041 00460043 004c0047     1.@.A.B.C.F.G.L.
    8568:	004e004d 0050004f 00600051 00620061     M.N.O.P.Q.`.a.b.
    8578:	00640063 00660065 00680067 006a0069     c.d.e.f.g.h.i.j.
    8588:	006c006b 006e006d 0070006f 00800071     k.l.m.n.o.p.q...
    8598:	00820081 00840083 00860085 00880087     ................
    85a8:	008a0089 008d008b 008f008e 00000090     ................

000085b8 <Port_UnUsedPin>:
    85b8:	00000000 00000001 00000000              ............

000085c4 <Port_aPinConfigDefault>:
    85c4:	00000048 00000100 00000000 00000002     H...............
    85d4:	00010001 00000049 00000100 00000000     ....I...........
    85e4:	00000002 00010101 0000004a 00000100     ........J.......
    85f4:	00000000 00000002 00010101 0000008c     ................
    8604:	00000100 00000000 00000001 00010101     ................
    8614:	0000004b 00000100 00000000 00000002     K...............
    8624:	00010101                                ....

00008628 <Port_Config>:
    8628:	004f0005 00008518 000085b8 000085c4     ..O.............
	...
    8640:	00008504 00008500 00008438              ........8...

0000864c <Power_Ip_RCM_ConfigPB>:
	...

00008654 <Power_Ip_PMC_ConfigPB>:
    8654:	00000000                                ....

00008658 <Power_Ip_SMC_ConfigPB>:
    8658:	00000000                                ....

0000865c <Power_Ip_aModeConfigPB>:
	...

00008668 <Power_Ip_HwIPsConfigPB>:
    8668:	0000864c 00008654 00008658              L...T...X...

00008674 <__INIT_TABLE>:
    8674:	00000002 	.word	0x00000002
    8678:	1fff8b10 	.word	0x1fff8b10
    867c:	0000869c 	.word	0x0000869c
    8680:	000086cc 	.word	0x000086cc
    8684:	1fff8800 	.word	0x1fff8800
    8688:	00000000 	.word	0x00000000
    868c:	00000310 	.word	0x00000310

00008690 <__ZERO_TABLE>:
    8690:	00000001 	.word	0x00000001
    8694:	1fff8b40 	.word	0x1fff8b40
    8698:	1fff8e30 	.word	0x1fff8e30
