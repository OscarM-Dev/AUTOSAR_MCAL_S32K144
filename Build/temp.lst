
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00001a4b 	.word	0x00001a4b
  10:	00001a4d 	.word	0x00001a4d
  14:	00001a4f 	.word	0x00001a4f
  18:	00001a51 	.word	0x00001a51
	...
  2c:	00001a53 	.word	0x00001a53
  30:	00001a55 	.word	0x00001a55
  34:	00000000 	.word	0x00000000
  38:	00001a57 	.word	0x00001a57
  3c:	00001a59 	.word	0x00001a59
  40:	00001a5b 	.word	0x00001a5b
  44:	00001a5b 	.word	0x00001a5b
  48:	00001a5b 	.word	0x00001a5b
  4c:	00001a5b 	.word	0x00001a5b
  50:	00001a5b 	.word	0x00001a5b
  54:	00001a5b 	.word	0x00001a5b
  58:	00001a5b 	.word	0x00001a5b
  5c:	00001a5b 	.word	0x00001a5b
  60:	00001a5b 	.word	0x00001a5b
  64:	00001a5b 	.word	0x00001a5b
  68:	00001a5b 	.word	0x00001a5b
  6c:	00001a5b 	.word	0x00001a5b
  70:	00001a5b 	.word	0x00001a5b
  74:	00001a5b 	.word	0x00001a5b
  78:	00001a5b 	.word	0x00001a5b
  7c:	00001a5b 	.word	0x00001a5b
  80:	00001a5b 	.word	0x00001a5b
  84:	00001a5b 	.word	0x00001a5b
  88:	00001a5b 	.word	0x00001a5b
  8c:	00001a5b 	.word	0x00001a5b
  90:	00001a5b 	.word	0x00001a5b
  94:	00001a5b 	.word	0x00001a5b
  98:	00001a5b 	.word	0x00001a5b
  9c:	00001a5b 	.word	0x00001a5b
  a0:	00001a5b 	.word	0x00001a5b
  a4:	00001a5b 	.word	0x00001a5b
  a8:	00001a5b 	.word	0x00001a5b
  ac:	00001a5b 	.word	0x00001a5b
  b0:	00001a5b 	.word	0x00001a5b
  b4:	00001a5b 	.word	0x00001a5b
  b8:	00001a5b 	.word	0x00001a5b
  bc:	00001a5b 	.word	0x00001a5b
  c0:	00001a5b 	.word	0x00001a5b
  c4:	00001a5b 	.word	0x00001a5b
  c8:	00001a5b 	.word	0x00001a5b
  cc:	00001a5b 	.word	0x00001a5b
  d0:	00001a5b 	.word	0x00001a5b
  d4:	00001a5b 	.word	0x00001a5b
  d8:	00001a5b 	.word	0x00001a5b
  dc:	00001a5b 	.word	0x00001a5b
  e0:	00001a5b 	.word	0x00001a5b
  e4:	00001a5b 	.word	0x00001a5b
  e8:	00001a5b 	.word	0x00001a5b
  ec:	00001a5b 	.word	0x00001a5b
  f0:	00001a5b 	.word	0x00001a5b
  f4:	00001a5b 	.word	0x00001a5b
  f8:	00001a5b 	.word	0x00001a5b
  fc:	00001a5b 	.word	0x00001a5b
 100:	00001a5b 	.word	0x00001a5b
 104:	00001a5b 	.word	0x00001a5b
 108:	00001a5b 	.word	0x00001a5b
 10c:	00001a5b 	.word	0x00001a5b
 110:	00001a5b 	.word	0x00001a5b
 114:	00001a5b 	.word	0x00001a5b
 118:	00001a5b 	.word	0x00001a5b
 11c:	00001a5b 	.word	0x00001a5b
 120:	00001a5b 	.word	0x00001a5b
 124:	00001a5b 	.word	0x00001a5b
 128:	00001a5b 	.word	0x00001a5b
 12c:	00001a5b 	.word	0x00001a5b
 130:	00001a5b 	.word	0x00001a5b
 134:	00001a5b 	.word	0x00001a5b
 138:	00001a5b 	.word	0x00001a5b
 13c:	00001a5b 	.word	0x00001a5b
 140:	00001a5b 	.word	0x00001a5b
 144:	00001a5b 	.word	0x00001a5b
 148:	00001a5b 	.word	0x00001a5b
 14c:	00001a5b 	.word	0x00001a5b
 150:	00001a5b 	.word	0x00001a5b
 154:	00001a5b 	.word	0x00001a5b
 158:	00001a5b 	.word	0x00001a5b
 15c:	00001a5b 	.word	0x00001a5b
 160:	00001a5b 	.word	0x00001a5b
 164:	00001a5b 	.word	0x00001a5b
 168:	00001a5b 	.word	0x00001a5b
 16c:	00001a5b 	.word	0x00001a5b
 170:	00001a5b 	.word	0x00001a5b
 174:	00001a5b 	.word	0x00001a5b
 178:	00001a5b 	.word	0x00001a5b
 17c:	00001a5b 	.word	0x00001a5b
 180:	00001a5b 	.word	0x00001a5b
 184:	00001a5b 	.word	0x00001a5b
 188:	00001a5b 	.word	0x00001a5b
 18c:	00001a5b 	.word	0x00001a5b
 190:	00001a5b 	.word	0x00001a5b
 194:	00001a5b 	.word	0x00001a5b
 198:	00001a5b 	.word	0x00001a5b
 19c:	00001a5b 	.word	0x00001a5b
 1a0:	00001a5b 	.word	0x00001a5b
 1a4:	00001a5b 	.word	0x00001a5b
 1a8:	00001a5b 	.word	0x00001a5b
 1ac:	00001a5b 	.word	0x00001a5b
 1b0:	00001a5b 	.word	0x00001a5b
 1b4:	00001a5b 	.word	0x00001a5b
 1b8:	00001a5b 	.word	0x00001a5b
 1bc:	00001a5b 	.word	0x00001a5b
 1c0:	00001a5b 	.word	0x00001a5b
 1c4:	00001a5b 	.word	0x00001a5b
 1c8:	00001a5b 	.word	0x00001a5b
 1cc:	00001a5b 	.word	0x00001a5b
 1d0:	00001a5b 	.word	0x00001a5b
 1d4:	00001a5b 	.word	0x00001a5b
 1d8:	00001a5b 	.word	0x00001a5b
 1dc:	00001a5b 	.word	0x00001a5b
 1e0:	00001a5b 	.word	0x00001a5b
 1e4:	00001a5b 	.word	0x00001a5b
 1e8:	00001a5b 	.word	0x00001a5b
 1ec:	00001a5b 	.word	0x00001a5b
 1f0:	00001a5b 	.word	0x00001a5b
 1f4:	00001a5b 	.word	0x00001a5b
 1f8:	00001a5b 	.word	0x00001a5b
 1fc:	00001a5b 	.word	0x00001a5b
 200:	00001a5b 	.word	0x00001a5b
 204:	00001a5b 	.word	0x00001a5b
 208:	00001a5b 	.word	0x00001a5b
 20c:	00001a5b 	.word	0x00001a5b
 210:	00001a5b 	.word	0x00001a5b
 214:	00001a5b 	.word	0x00001a5b
 218:	00001a5b 	.word	0x00001a5b
 21c:	00001a5b 	.word	0x00001a5b
 220:	00001a5b 	.word	0x00001a5b
 224:	00001a5b 	.word	0x00001a5b
 228:	00001a5b 	.word	0x00001a5b
 22c:	00001a5b 	.word	0x00001a5b
 230:	00001a5b 	.word	0x00001a5b
 234:	00001a5b 	.word	0x00001a5b
 238:	00001a5b 	.word	0x00001a5b
 23c:	00001a5b 	.word	0x00001a5b
 240:	00001a5b 	.word	0x00001a5b
 244:	00001a5b 	.word	0x00001a5b
 248:	00001a5b 	.word	0x00001a5b
 24c:	00001a5b 	.word	0x00001a5b
 250:	00001a5b 	.word	0x00001a5b
 254:	00001a5b 	.word	0x00001a5b
 258:	00001a5b 	.word	0x00001a5b
 25c:	00001a5b 	.word	0x00001a5b
 260:	00001a5b 	.word	0x00001a5b
 264:	00001a5b 	.word	0x00001a5b
 268:	00001a5b 	.word	0x00001a5b
 26c:	00001a5b 	.word	0x00001a5b
 270:	00001a5b 	.word	0x00001a5b
 274:	00001a5b 	.word	0x00001a5b
 278:	00001a5b 	.word	0x00001a5b
 27c:	00001a5b 	.word	0x00001a5b
 280:	00001a5b 	.word	0x00001a5b
 284:	00001a5b 	.word	0x00001a5b
 288:	00001a5b 	.word	0x00001a5b
 28c:	00001a5b 	.word	0x00001a5b
 290:	00001a5b 	.word	0x00001a5b
 294:	00001a5b 	.word	0x00001a5b
 298:	00001a5b 	.word	0x00001a5b
 29c:	00001a5b 	.word	0x00001a5b
 2a0:	00001a5b 	.word	0x00001a5b
 2a4:	00001a5b 	.word	0x00001a5b
 2a8:	00001a5b 	.word	0x00001a5b
 2ac:	00001a5b 	.word	0x00001a5b
 2b0:	00001a5b 	.word	0x00001a5b
 2b4:	00001a5b 	.word	0x00001a5b
 2b8:	00001a5b 	.word	0x00001a5b
 2bc:	00001a5b 	.word	0x00001a5b
 2c0:	00001a5b 	.word	0x00001a5b
 2c4:	00001a5b 	.word	0x00001a5b
 2c8:	00001a5b 	.word	0x00001a5b
 2cc:	00001a5b 	.word	0x00001a5b
 2d0:	00001a5b 	.word	0x00001a5b
 2d4:	00001a5b 	.word	0x00001a5b
 2d8:	00001a5b 	.word	0x00001a5b
 2dc:	00001a5b 	.word	0x00001a5b
 2e0:	00001a5b 	.word	0x00001a5b
 2e4:	00001a5b 	.word	0x00001a5b
 2e8:	00001a5b 	.word	0x00001a5b
 2ec:	00001a5b 	.word	0x00001a5b
 2f0:	00001a5b 	.word	0x00001a5b
 2f4:	00001a5b 	.word	0x00001a5b
 2f8:	00001a5b 	.word	0x00001a5b
 2fc:	00001a5b 	.word	0x00001a5b
 300:	00001a5b 	.word	0x00001a5b
 304:	00001a5b 	.word	0x00001a5b
 308:	00001a5b 	.word	0x00001a5b
 30c:	00001a5b 	.word	0x00001a5b

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f001 fa19 	bl	18b8 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f001 fad8 	bl	1a40 <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff97e4 	.word	0x1fff97e4

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f001 fa23 	bl	19e4 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * 
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void ) {
     8b0:	b508      	push	{r3, lr}
    EcuM_Init();    //MCU configuration.
     8b2:	f001 fdef 	bl	2494 <EcuM_Init>
    Scheduler_Init( &Scheduler_Control );   //Initializing control structure for scheduler.
     8b6:	4803      	ldr	r0, [pc, #12]	; (8c4 <main+0x14>)
     8b8:	f000 f8ec 	bl	a94 <Scheduler_Init>

    while( 1u ) {
        Scheduler_MainFunction();
     8bc:	f000 f9e0 	bl	c80 <Scheduler_MainFunction>
     8c0:	e7fc      	b.n	8bc <main+0xc>
     8c2:	bf00      	nop
     8c4:	1fff9774 	.word	0x1fff9774

000008c8 <DevAssert>:
    #error "Unsupported architecture!"
#endif

/* Implement default assert macro */
static inline void DevAssert(volatile boolean x)
{
     8c8:	b082      	sub	sp, #8
     8ca:	4603      	mov	r3, r0
     8cc:	f88d 3007 	strb.w	r3, [sp, #7]
    if(x) { } else { for(;;) {ASM_KEYWORD(BREAKPOINT_INSTR);} }
     8d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
     8d4:	b2db      	uxtb	r3, r3
     8d6:	2b00      	cmp	r3, #0
     8d8:	d101      	bne.n	8de <DevAssert+0x16>
     8da:	be00      	bkpt	0x0000
     8dc:	e7fd      	b.n	8da <DevAssert+0x12>
}
     8de:	bf00      	nop
     8e0:	b002      	add	sp, #8
     8e2:	4770      	bx	lr

000008e4 <DevAssert>:
{
     8e4:	b082      	sub	sp, #8
     8e6:	4603      	mov	r3, r0
     8e8:	f88d 3007 	strb.w	r3, [sp, #7]
    if(x) { } else { for(;;) {ASM_KEYWORD(BREAKPOINT_INSTR);} }
     8ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
     8f0:	b2db      	uxtb	r3, r3
     8f2:	2b00      	cmp	r3, #0
     8f4:	d101      	bne.n	8fa <DevAssert+0x16>
     8f6:	be00      	bkpt	0x0000
     8f8:	e7fd      	b.n	8f6 <DevAssert+0x12>
}
     8fa:	bf00      	nop
     8fc:	b002      	add	sp, #8
     8fe:	4770      	bx	lr

00000900 <Adc_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Adc_schm_read_msr(void)
{
     900:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     902:	f3ef 8310 	mrs	r3, PRIMASK
     906:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     908:	4623      	mov	r3, r4
}
     90a:	4618      	mov	r0, r3
     90c:	f85d 4b04 	ldr.w	r4, [sp], #4
     910:	4770      	bx	lr

00000912 <Dio_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Dio_schm_read_msr(void)
{
     912:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     914:	f3ef 8310 	mrs	r3, PRIMASK
     918:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     91a:	4623      	mov	r3, r4
}
     91c:	4618      	mov	r0, r3
     91e:	f85d 4b04 	ldr.w	r4, [sp], #4
     922:	4770      	bx	lr

00000924 <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     924:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     926:	f3ef 8310 	mrs	r3, PRIMASK
     92a:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     92c:	4623      	mov	r3, r4
}
     92e:	4618      	mov	r0, r3
     930:	f85d 4b04 	ldr.w	r4, [sp], #4
     934:	4770      	bx	lr

00000936 <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     936:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     938:	f3ef 8310 	mrs	r3, PRIMASK
     93c:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     93e:	4623      	mov	r3, r4
}
     940:	4618      	mov	r0, r3
     942:	f85d 4b04 	ldr.w	r4, [sp], #4
     946:	4770      	bx	lr

00000948 <Pwm_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Pwm_schm_read_msr(void)
{
     948:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     94a:	f3ef 8310 	mrs	r3, PRIMASK
     94e:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     950:	4623      	mov	r3, r4
}
     952:	4618      	mov	r0, r3
     954:	f85d 4b04 	ldr.w	r4, [sp], #4
     958:	4770      	bx	lr

0000095a <Bfx_SetBit_u32u8>:
 * @param[in] BitPn Bit position.
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_SetBit_u32u8( uint32* Data, uint8 BitPn ) {
     95a:	b082      	sub	sp, #8
     95c:	9001      	str	r0, [sp, #4]
     95e:	460b      	mov	r3, r1
     960:	f88d 3003 	strb.w	r3, [sp, #3]
    *Data |= ( 1 << BitPn ); 
     964:	9b01      	ldr	r3, [sp, #4]
     966:	681b      	ldr	r3, [r3, #0]
     968:	f89d 2003 	ldrb.w	r2, [sp, #3]
     96c:	2101      	movs	r1, #1
     96e:	fa01 f202 	lsl.w	r2, r1, r2
     972:	431a      	orrs	r2, r3
     974:	9b01      	ldr	r3, [sp, #4]
     976:	601a      	str	r2, [r3, #0]
}
     978:	bf00      	nop
     97a:	b002      	add	sp, #8
     97c:	4770      	bx	lr

0000097e <Bfx_ClrBit_u32u8>:
 * @param[in] BitPn Bit position.
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_ClrBit_u32u8( uint32* Data, uint8 BitPn ) {
     97e:	b082      	sub	sp, #8
     980:	9001      	str	r0, [sp, #4]
     982:	460b      	mov	r3, r1
     984:	f88d 3003 	strb.w	r3, [sp, #3]
    *Data &= ~( 1 << BitPn );
     988:	9b01      	ldr	r3, [sp, #4]
     98a:	681b      	ldr	r3, [r3, #0]
     98c:	f89d 2003 	ldrb.w	r2, [sp, #3]
     990:	2101      	movs	r1, #1
     992:	fa01 f202 	lsl.w	r2, r1, r2
     996:	43d2      	mvns	r2, r2
     998:	401a      	ands	r2, r3
     99a:	9b01      	ldr	r3, [sp, #4]
     99c:	601a      	str	r2, [r3, #0]
}
     99e:	bf00      	nop
     9a0:	b002      	add	sp, #8
     9a2:	4770      	bx	lr

000009a4 <Bfx_GetBit_u32u8_u8>:
 * @param[in] BitPn Bit position.
 * @retval Result It indicates the value of the bit of interest.
 * 
 * @note The max BitPn value is 31
 */
static inline boolean Bfx_GetBit_u32u8_u8( uint32 Data, uint8 BitPn ) {
     9a4:	b084      	sub	sp, #16
     9a6:	9001      	str	r0, [sp, #4]
     9a8:	460b      	mov	r3, r1
     9aa:	f88d 3003 	strb.w	r3, [sp, #3]
    //local data.
    boolean Result = FALSE;
     9ae:	2300      	movs	r3, #0
     9b0:	f88d 300f 	strb.w	r3, [sp, #15]
    
    Result = ( Data & ( 1 << BitPn ) ) != 0;
     9b4:	f89d 3003 	ldrb.w	r3, [sp, #3]
     9b8:	2201      	movs	r2, #1
     9ba:	fa02 f303 	lsl.w	r3, r2, r3
     9be:	461a      	mov	r2, r3
     9c0:	9b01      	ldr	r3, [sp, #4]
     9c2:	4013      	ands	r3, r2
     9c4:	2b00      	cmp	r3, #0
     9c6:	bf14      	ite	ne
     9c8:	2301      	movne	r3, #1
     9ca:	2300      	moveq	r3, #0
     9cc:	f88d 300f 	strb.w	r3, [sp, #15]
    return Result;
     9d0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     9d4:	4618      	mov	r0, r3
     9d6:	b004      	add	sp, #16
     9d8:	4770      	bx	lr

000009da <Bfx_PutBit_u32u8u8>:
 * @param[in] Status Status value (TRUE or FALSE).
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_PutBit_u32u8u8( uint32* Data, uint8 BitPn, boolean Status ) {
     9da:	b082      	sub	sp, #8
     9dc:	9001      	str	r0, [sp, #4]
     9de:	460b      	mov	r3, r1
     9e0:	f88d 3003 	strb.w	r3, [sp, #3]
     9e4:	4613      	mov	r3, r2
     9e6:	f88d 3002 	strb.w	r3, [sp, #2]
    if ( Status == TRUE ) { //Setting bit.
     9ea:	f89d 3002 	ldrb.w	r3, [sp, #2]
     9ee:	2b00      	cmp	r3, #0
     9f0:	d00a      	beq.n	a08 <Bfx_PutBit_u32u8u8+0x2e>
        *Data |= ( 1 << BitPn ); 
     9f2:	9b01      	ldr	r3, [sp, #4]
     9f4:	681b      	ldr	r3, [r3, #0]
     9f6:	f89d 2003 	ldrb.w	r2, [sp, #3]
     9fa:	2101      	movs	r1, #1
     9fc:	fa01 f202 	lsl.w	r2, r1, r2
     a00:	431a      	orrs	r2, r3
     a02:	9b01      	ldr	r3, [sp, #4]
     a04:	601a      	str	r2, [r3, #0]
    }

    else { //Clearing bit.
        *Data &= ~( 1 << BitPn );
    }
}
     a06:	e00a      	b.n	a1e <Bfx_PutBit_u32u8u8+0x44>
        *Data &= ~( 1 << BitPn );
     a08:	9b01      	ldr	r3, [sp, #4]
     a0a:	681b      	ldr	r3, [r3, #0]
     a0c:	f89d 2003 	ldrb.w	r2, [sp, #3]
     a10:	2101      	movs	r1, #1
     a12:	fa01 f202 	lsl.w	r2, r1, r2
     a16:	43d2      	mvns	r2, r2
     a18:	401a      	ands	r2, r3
     a1a:	9b01      	ldr	r3, [sp, #4]
     a1c:	601a      	str	r2, [r3, #0]
}
     a1e:	bf00      	nop
     a20:	b002      	add	sp, #8
     a22:	4770      	bx	lr

00000a24 <Scheduler_InitQueue>:
/**
 * @brief This function initialices the queue buffer control members.
 * 
 * @param[in] SchedulerPtr Ptr to control struct instance, it allows the init of the members.
 */
void Scheduler_InitQueue( Scheduler_CtrlType *SchedulerPtr ) {
     a24:	b500      	push	{lr}
     a26:	b085      	sub	sp, #20
     a28:	9001      	str	r0, [sp, #4]
    //local data.
    uint8 i = 0;
     a2a:	2300      	movs	r3, #0
     a2c:	f88d 300f 	strb.w	r3, [sp, #15]

    //Initializing members.
    for ( i = 0; i < SCHEDULER_MAX_QUEUES; i++ ) {
     a30:	2300      	movs	r3, #0
     a32:	f88d 300f 	strb.w	r3, [sp, #15]
     a36:	e023      	b.n	a80 <Scheduler_InitQueue+0x5c>
        SchedulerPtr->QueueHeads[i] = 0;
     a38:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a3c:	9b01      	ldr	r3, [sp, #4]
     a3e:	3208      	adds	r2, #8
     a40:	2100      	movs	r1, #0
     a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        SchedulerPtr->QueueTails[i] = 0;
     a46:	f89d 300f 	ldrb.w	r3, [sp, #15]
     a4a:	9a01      	ldr	r2, [sp, #4]
     a4c:	3308      	adds	r3, #8
     a4e:	009b      	lsls	r3, r3, #2
     a50:	4413      	add	r3, r2
     a52:	2200      	movs	r2, #0
     a54:	605a      	str	r2, [r3, #4]
        Bfx_ClrBit_u32u8( &SchedulerPtr->QueueFulls, i );
     a56:	9b01      	ldr	r3, [sp, #4]
     a58:	332c      	adds	r3, #44	; 0x2c
     a5a:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a5e:	4611      	mov	r1, r2
     a60:	4618      	mov	r0, r3
     a62:	f7ff ff8c 	bl	97e <Bfx_ClrBit_u32u8>
        Bfx_SetBit_u32u8( &SchedulerPtr->QueueEmpties, i );
     a66:	9b01      	ldr	r3, [sp, #4]
     a68:	3328      	adds	r3, #40	; 0x28
     a6a:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a6e:	4611      	mov	r1, r2
     a70:	4618      	mov	r0, r3
     a72:	f7ff ff72 	bl	95a <Bfx_SetBit_u32u8>
    for ( i = 0; i < SCHEDULER_MAX_QUEUES; i++ ) {
     a76:	f89d 300f 	ldrb.w	r3, [sp, #15]
     a7a:	3301      	adds	r3, #1
     a7c:	f88d 300f 	strb.w	r3, [sp, #15]
     a80:	f89d 300f 	ldrb.w	r3, [sp, #15]
     a84:	2b00      	cmp	r3, #0
     a86:	d0d7      	beq.n	a38 <Scheduler_InitQueue+0x14>
    }
}
     a88:	bf00      	nop
     a8a:	bf00      	nop
     a8c:	b005      	add	sp, #20
     a8e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00000a94 <Scheduler_Init>:
 *
 * @note The timeout and periodicity values are the initial values registered in the buffers.
 * @note The elapsed and count values are initialized to 0 and timeout values respectively.
 * @note All the flags are initialiced to the initial values registered in the buffers.
 */
Std_ReturnType Scheduler_Init( Scheduler_CtrlType *SchedulerPtr ) {
     a94:	b500      	push	{lr}
     a96:	b085      	sub	sp, #20
     a98:	9001      	str	r0, [sp, #4]
    //local data 
    Std_ReturnType status = E_OK;
     a9a:	2300      	movs	r3, #0
     a9c:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 i = 0;
     aa0:	2300      	movs	r3, #0
     aa2:	f88d 300e 	strb.w	r3, [sp, #14]

    //Verifying config pointer.
    #if ( SCHEDULER_DEV_ERROR_DETECT == STD_ON )
        if ( SchedulerPtr == NULL_PTR ) { //Invalid pointer
     aa6:	9b01      	ldr	r3, [sp, #4]
     aa8:	2b00      	cmp	r3, #0
     aaa:	d109      	bne.n	ac0 <Scheduler_Init+0x2c>
            Det_ReportError( SCHEDULER_MODULE_ID, SCHEDULER_INSTANCE_ID, SCHEDULER_INIT_ID, SCHEDULER_E_PARAM_CONFIG );
     aac:	2300      	movs	r3, #0
     aae:	2200      	movs	r2, #0
     ab0:	2100      	movs	r1, #0
     ab2:	f44f 7096 	mov.w	r0, #300	; 0x12c
     ab6:	f017 fcad 	bl	18414 <Det_ReportError>
            status = E_NOT_OK;
     aba:	2301      	movs	r3, #1
     abc:	f88d 300f 	strb.w	r3, [sp, #15]
        }
    #endif

    if ( status == E_OK ) {
     ac0:	f89d 300f 	ldrb.w	r3, [sp, #15]
     ac4:	2b00      	cmp	r3, #0
     ac6:	f040 808b 	bne.w	be0 <Scheduler_Init+0x14c>
        //Initializing tasks related parameters.
        for ( i = 0; i < SCHEDULER_MAX_TASKS; i++ ) {
     aca:	2300      	movs	r3, #0
     acc:	f88d 300e 	strb.w	r3, [sp, #14]
     ad0:	e033      	b.n	b3a <Scheduler_Init+0xa6>
            SchedulerPtr->TaskPeriod[i] = SchedulerConfig_Ptr->TaskPtr[i].InitPeriod;   //Registering initial periodicity value of each task.
     ad2:	4b46      	ldr	r3, [pc, #280]	; (bec <Scheduler_Init+0x158>)
     ad4:	681b      	ldr	r3, [r3, #0]
     ad6:	6899      	ldr	r1, [r3, #8]
     ad8:	f89d 200e 	ldrb.w	r2, [sp, #14]
     adc:	4613      	mov	r3, r2
     ade:	005b      	lsls	r3, r3, #1
     ae0:	4413      	add	r3, r2
     ae2:	009b      	lsls	r3, r3, #2
     ae4:	440b      	add	r3, r1
     ae6:	f89d 200e 	ldrb.w	r2, [sp, #14]
     aea:	6819      	ldr	r1, [r3, #0]
     aec:	9b01      	ldr	r3, [sp, #4]
     aee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            SchedulerPtr->TaskElapsed[i] = 0;   //Initializing time follow up of each task.
     af2:	f89d 200e 	ldrb.w	r2, [sp, #14]
     af6:	9b01      	ldr	r3, [sp, #4]
     af8:	3202      	adds	r2, #2
     afa:	2100      	movs	r1, #0
     afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            Bfx_PutBit_u32u8u8( &SchedulerPtr->TaskFlags, i, SchedulerConfig_Ptr->TaskPtr[i].InitFlag  );   //Registering initial flag of each task. 
     b00:	9b01      	ldr	r3, [sp, #4]
     b02:	f103 0018 	add.w	r0, r3, #24
     b06:	4b39      	ldr	r3, [pc, #228]	; (bec <Scheduler_Init+0x158>)
     b08:	681b      	ldr	r3, [r3, #0]
     b0a:	6899      	ldr	r1, [r3, #8]
     b0c:	f89d 200e 	ldrb.w	r2, [sp, #14]
     b10:	4613      	mov	r3, r2
     b12:	005b      	lsls	r3, r3, #1
     b14:	4413      	add	r3, r2
     b16:	009b      	lsls	r3, r3, #2
     b18:	440b      	add	r3, r1
     b1a:	791b      	ldrb	r3, [r3, #4]
     b1c:	2b00      	cmp	r3, #0
     b1e:	bf14      	ite	ne
     b20:	2301      	movne	r3, #1
     b22:	2300      	moveq	r3, #0
     b24:	b2da      	uxtb	r2, r3
     b26:	f89d 300e 	ldrb.w	r3, [sp, #14]
     b2a:	4619      	mov	r1, r3
     b2c:	f7ff ff55 	bl	9da <Bfx_PutBit_u32u8u8>
        for ( i = 0; i < SCHEDULER_MAX_TASKS; i++ ) {
     b30:	f89d 300e 	ldrb.w	r3, [sp, #14]
     b34:	3301      	adds	r3, #1
     b36:	f88d 300e 	strb.w	r3, [sp, #14]
     b3a:	f89d 300e 	ldrb.w	r3, [sp, #14]
     b3e:	2b01      	cmp	r3, #1
     b40:	d9c7      	bls.n	ad2 <Scheduler_Init+0x3e>
        }

        //Initializing timers related parameters.
        for ( i = 0; i < SCHEDULER_MAX_TIMERS; i++ ) {
     b42:	2300      	movs	r3, #0
     b44:	f88d 300e 	strb.w	r3, [sp, #14]
     b48:	e03f      	b.n	bca <Scheduler_Init+0x136>
            SchedulerPtr->TimerTimeout[i] = SchedulerConfig_Ptr->TimerPtr[i].InitTimeout;   //Registering initial timeout value of each timer.
     b4a:	4b28      	ldr	r3, [pc, #160]	; (bec <Scheduler_Init+0x158>)
     b4c:	681b      	ldr	r3, [r3, #0]
     b4e:	6919      	ldr	r1, [r3, #16]
     b50:	f89d 200e 	ldrb.w	r2, [sp, #14]
     b54:	4613      	mov	r3, r2
     b56:	005b      	lsls	r3, r3, #1
     b58:	4413      	add	r3, r2
     b5a:	009b      	lsls	r3, r3, #2
     b5c:	440b      	add	r3, r1
     b5e:	f89d 200e 	ldrb.w	r2, [sp, #14]
     b62:	6819      	ldr	r1, [r3, #0]
     b64:	9b01      	ldr	r3, [sp, #4]
     b66:	3204      	adds	r2, #4
     b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            SchedulerPtr->TimerCount[i] = SchedulerConfig_Ptr->TimerPtr[i].InitTimeout; //Initializing timer count of each timer.
     b6c:	4b1f      	ldr	r3, [pc, #124]	; (bec <Scheduler_Init+0x158>)
     b6e:	681b      	ldr	r3, [r3, #0]
     b70:	6919      	ldr	r1, [r3, #16]
     b72:	f89d 200e 	ldrb.w	r2, [sp, #14]
     b76:	4613      	mov	r3, r2
     b78:	005b      	lsls	r3, r3, #1
     b7a:	4413      	add	r3, r2
     b7c:	009b      	lsls	r3, r3, #2
     b7e:	18ca      	adds	r2, r1, r3
     b80:	f89d 300e 	ldrb.w	r3, [sp, #14]
     b84:	6812      	ldr	r2, [r2, #0]
     b86:	9901      	ldr	r1, [sp, #4]
     b88:	3304      	adds	r3, #4
     b8a:	009b      	lsls	r3, r3, #2
     b8c:	440b      	add	r3, r1
     b8e:	605a      	str	r2, [r3, #4]
            Bfx_PutBit_u32u8u8( &SchedulerPtr->TimerFlags, i, SchedulerConfig_Ptr->TimerPtr[i].InitFlag  );   //Registering initial flag of each timer.
     b90:	9b01      	ldr	r3, [sp, #4]
     b92:	f103 001c 	add.w	r0, r3, #28
     b96:	4b15      	ldr	r3, [pc, #84]	; (bec <Scheduler_Init+0x158>)
     b98:	681b      	ldr	r3, [r3, #0]
     b9a:	6919      	ldr	r1, [r3, #16]
     b9c:	f89d 200e 	ldrb.w	r2, [sp, #14]
     ba0:	4613      	mov	r3, r2
     ba2:	005b      	lsls	r3, r3, #1
     ba4:	4413      	add	r3, r2
     ba6:	009b      	lsls	r3, r3, #2
     ba8:	440b      	add	r3, r1
     baa:	791b      	ldrb	r3, [r3, #4]
     bac:	2b00      	cmp	r3, #0
     bae:	bf14      	ite	ne
     bb0:	2301      	movne	r3, #1
     bb2:	2300      	moveq	r3, #0
     bb4:	b2da      	uxtb	r2, r3
     bb6:	f89d 300e 	ldrb.w	r3, [sp, #14]
     bba:	4619      	mov	r1, r3
     bbc:	f7ff ff0d 	bl	9da <Bfx_PutBit_u32u8u8>
        for ( i = 0; i < SCHEDULER_MAX_TIMERS; i++ ) {
     bc0:	f89d 300e 	ldrb.w	r3, [sp, #14]
     bc4:	3301      	adds	r3, #1
     bc6:	f88d 300e 	strb.w	r3, [sp, #14]
     bca:	f89d 300e 	ldrb.w	r3, [sp, #14]
     bce:	2b00      	cmp	r3, #0
     bd0:	d0bb      	beq.n	b4a <Scheduler_Init+0xb6>
        } 

        Scheduler_InitQueue( SchedulerPtr ); //Initializing queues related parameters.
     bd2:	9801      	ldr	r0, [sp, #4]
     bd4:	f7ff ff26 	bl	a24 <Scheduler_InitQueue>
        SchedulerPtr->SchedulerInit = TRUE;   
     bd8:	9b01      	ldr	r3, [sp, #4]
     bda:	2201      	movs	r2, #1
     bdc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    }

    return status;
     be0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     be4:	4618      	mov	r0, r3
     be6:	b005      	add	sp, #20
     be8:	f85d fb04 	ldr.w	pc, [sp], #4
     bec:	1fff8b54 	.word	0x1fff8b54

00000bf0 <Scheduler_GetTimer>:
 *
 * @retval counter_value Actual count value of timer, if operation was a success counter_value = n, otherwise 1. 
 *
 * @note The timer ID must be valid.
 */
uint32 Scheduler_GetTimer( TimerType Timer ) {
     bf0:	b500      	push	{lr}
     bf2:	b085      	sub	sp, #20
     bf4:	4603      	mov	r3, r0
     bf6:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data
    uint32 counter_value = 0;
     bfa:	2300      	movs	r3, #0
     bfc:	9303      	str	r3, [sp, #12]
    uint8 status = E_OK;
     bfe:	2300      	movs	r3, #0
     c00:	f88d 300b 	strb.w	r3, [sp, #11]

    #if ( SCHEDULER_DEV_ERROR_DETECT == STD_ON )
        if ( SchedulerCtrl_Ptr->SchedulerInit  == FALSE ) { //Scheduler not initialized.
     c04:	4b1c      	ldr	r3, [pc, #112]	; (c78 <Scheduler_GetTimer+0x88>)
     c06:	681b      	ldr	r3, [r3, #0]
     c08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
     c0c:	f083 0301 	eor.w	r3, r3, #1
     c10:	b2db      	uxtb	r3, r3
     c12:	2b00      	cmp	r3, #0
     c14:	d00b      	beq.n	c2e <Scheduler_GetTimer+0x3e>
            Det_ReportError( SCHEDULER_MODULE_ID, SCHEDULER_INSTANCE_ID, SCHEDULER_GETTIMER_ID, SCHEDULER_E_UNINIT );
     c16:	2306      	movs	r3, #6
     c18:	220b      	movs	r2, #11
     c1a:	2100      	movs	r1, #0
     c1c:	f44f 7096 	mov.w	r0, #300	; 0x12c
     c20:	f017 fbf8 	bl	18414 <Det_ReportError>
            status = E_NOT_OK;
     c24:	2301      	movs	r3, #1
     c26:	f88d 300b 	strb.w	r3, [sp, #11]
            counter_value = E_NOT_OK;
     c2a:	2301      	movs	r3, #1
     c2c:	9303      	str	r3, [sp, #12]
        }

        if ( Timer > SchedulerConfig_Ptr->Timers - 1 ) {    //Invalid timer id.
     c2e:	4b13      	ldr	r3, [pc, #76]	; (c7c <Scheduler_GetTimer+0x8c>)
     c30:	681b      	ldr	r3, [r3, #0]
     c32:	7b1b      	ldrb	r3, [r3, #12]
     c34:	f89d 2007 	ldrb.w	r2, [sp, #7]
     c38:	429a      	cmp	r2, r3
     c3a:	d30b      	bcc.n	c54 <Scheduler_GetTimer+0x64>
            Det_ReportError( SCHEDULER_MODULE_ID, SCHEDULER_INSTANCE_ID, SCHEDULER_GETTIMER_ID, SCHEDULER_E_TIMER_ID );
     c3c:	2305      	movs	r3, #5
     c3e:	220b      	movs	r2, #11
     c40:	2100      	movs	r1, #0
     c42:	f44f 7096 	mov.w	r0, #300	; 0x12c
     c46:	f017 fbe5 	bl	18414 <Det_ReportError>
            status = E_NOT_OK;
     c4a:	2301      	movs	r3, #1
     c4c:	f88d 300b 	strb.w	r3, [sp, #11]
            counter_value = E_NOT_OK;
     c50:	2301      	movs	r3, #1
     c52:	9303      	str	r3, [sp, #12]
        }
    #endif

    if ( status == E_OK ) {
     c54:	f89d 300b 	ldrb.w	r3, [sp, #11]
     c58:	2b00      	cmp	r3, #0
     c5a:	d108      	bne.n	c6e <Scheduler_GetTimer+0x7e>
        counter_value = SchedulerCtrl_Ptr->TimerCount[ Timer ];
     c5c:	4b06      	ldr	r3, [pc, #24]	; (c78 <Scheduler_GetTimer+0x88>)
     c5e:	681a      	ldr	r2, [r3, #0]
     c60:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c64:	3304      	adds	r3, #4
     c66:	009b      	lsls	r3, r3, #2
     c68:	4413      	add	r3, r2
     c6a:	685b      	ldr	r3, [r3, #4]
     c6c:	9303      	str	r3, [sp, #12]
    }

    return counter_value;
     c6e:	9b03      	ldr	r3, [sp, #12]
}
     c70:	4618      	mov	r0, r3
     c72:	b005      	add	sp, #20
     c74:	f85d fb04 	ldr.w	pc, [sp], #4
     c78:	1fff8b58 	.word	0x1fff8b58
     c7c:	1fff8b54 	.word	0x1fff8b54

00000c80 <Scheduler_MainFunction>:
 *
 * @note At least 1 timer and 1 task needs to be register in order to the scheduler to work.
 * @note After a timer reaches 0 is important to restart, stop or reload that timer else it will still decrement --> risk of overflow.
 * @note It´s important that previous to using the scheduler the buffers for the timers and task must be correctly defined, specially their flags.
 */
void Scheduler_MainFunction( void ) {
     c80:	b500      	push	{lr}
     c82:	b085      	sub	sp, #20
    //local data
    uint32 tick_value = OsIf_MicrosToTicks( SchedulerConfig_Ptr->Tick * 1000, OSIF_COUNTER_SYSTEM );    //Translating tick value from us to counter increments.
     c84:	4b6c      	ldr	r3, [pc, #432]	; (e38 <Scheduler_MainFunction+0x1b8>)
     c86:	681b      	ldr	r3, [r3, #0]
     c88:	681b      	ldr	r3, [r3, #0]
     c8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     c8e:	fb02 f303 	mul.w	r3, r2, r3
     c92:	2101      	movs	r1, #1
     c94:	4618      	mov	r0, r3
     c96:	f002 f80f 	bl	2cb8 <OsIf_MicrosToTicks>
     c9a:	9001      	str	r0, [sp, #4]
    uint32 count_value = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );    //First counter value capture.
     c9c:	2001      	movs	r0, #1
     c9e:	f001 ffbf 	bl	2c20 <OsIf_GetCounter>
     ca2:	4603      	mov	r3, r0
     ca4:	9300      	str	r3, [sp, #0]
    uint32 elapsed_time = 0;    //Time follow up for tick (timer increments).
     ca6:	2300      	movs	r3, #0
     ca8:	9303      	str	r3, [sp, #12]
    uint8 i = 0;
     caa:	2300      	movs	r3, #0
     cac:	f88d 300b 	strb.w	r3, [sp, #11]
    uint8 status = E_OK;
     cb0:	2300      	movs	r3, #0
     cb2:	f88d 300a 	strb.w	r3, [sp, #10]

    #if ( SCHEDULER_DEV_ERROR_DETECT == STD_ON )
        if ( SchedulerCtrl_Ptr->SchedulerInit  == FALSE ) { //Scheduler not initialized.
     cb6:	4b61      	ldr	r3, [pc, #388]	; (e3c <Scheduler_MainFunction+0x1bc>)
     cb8:	681b      	ldr	r3, [r3, #0]
     cba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
     cbe:	f083 0301 	eor.w	r3, r3, #1
     cc2:	b2db      	uxtb	r3, r3
     cc4:	2b00      	cmp	r3, #0
     cc6:	d009      	beq.n	cdc <Scheduler_MainFunction+0x5c>
            Det_ReportError( SCHEDULER_MODULE_ID, SCHEDULER_INSTANCE_ID, SCHEDULER_MAINFUNCTION_ID, SCHEDULER_E_UNINIT );
     cc8:	2306      	movs	r3, #6
     cca:	220d      	movs	r2, #13
     ccc:	2100      	movs	r1, #0
     cce:	f44f 7096 	mov.w	r0, #300	; 0x12c
     cd2:	f017 fb9f 	bl	18414 <Det_ReportError>
            status = E_NOT_OK;
     cd6:	2301      	movs	r3, #1
     cd8:	f88d 300a 	strb.w	r3, [sp, #10]
        }
    #endif
      
    if ( status == E_OK ) {
     cdc:	f89d 300a 	ldrb.w	r3, [sp, #10]
     ce0:	2b00      	cmp	r3, #0
     ce2:	f040 80a5 	bne.w	e30 <Scheduler_MainFunction+0x1b0>
        while( 1 ) {    //tasks are executed during timeout.
            //Time follow up update for tick.
            elapsed_time += OsIf_GetElapsed( &count_value, OSIF_COUNTER_SYSTEM );   //time capture update
     ce6:	466b      	mov	r3, sp
     ce8:	2101      	movs	r1, #1
     cea:	4618      	mov	r0, r3
     cec:	f001 ffb1 	bl	2c52 <OsIf_GetElapsed>
     cf0:	4602      	mov	r2, r0
     cf2:	9b03      	ldr	r3, [sp, #12]
     cf4:	4413      	add	r3, r2
     cf6:	9303      	str	r3, [sp, #12]
        
            //Verifying if a scheduler´s tick has occurred.
            if ( elapsed_time >= tick_value ) {          
     cf8:	9a03      	ldr	r2, [sp, #12]
     cfa:	9b01      	ldr	r3, [sp, #4]
     cfc:	429a      	cmp	r2, r3
     cfe:	d3f2      	bcc.n	ce6 <Scheduler_MainFunction+0x66>
            
                //Executing timers
                for ( i = 0; i < SchedulerConfig_Ptr->Timers; i++ ) {
     d00:	2300      	movs	r3, #0
     d02:	f88d 300b 	strb.w	r3, [sp, #11]
     d06:	e038      	b.n	d7a <Scheduler_MainFunction+0xfa>
                    //Verifying execution of timer i
                    if ( Bfx_GetBit_u32u8_u8( SchedulerCtrl_Ptr->TimerFlags, i ) == TRUE ) {    //timer activated
     d08:	4b4c      	ldr	r3, [pc, #304]	; (e3c <Scheduler_MainFunction+0x1bc>)
     d0a:	681b      	ldr	r3, [r3, #0]
     d0c:	69db      	ldr	r3, [r3, #28]
     d0e:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d12:	4611      	mov	r1, r2
     d14:	4618      	mov	r0, r3
     d16:	f7ff fe45 	bl	9a4 <Bfx_GetBit_u32u8_u8>
     d1a:	4603      	mov	r3, r0
     d1c:	2b00      	cmp	r3, #0
     d1e:	d027      	beq.n	d70 <Scheduler_MainFunction+0xf0>
                        SchedulerCtrl_Ptr->TimerCount[i] -= SchedulerConfig_Ptr->Tick;    //decrement
     d20:	4b46      	ldr	r3, [pc, #280]	; (e3c <Scheduler_MainFunction+0x1bc>)
     d22:	681a      	ldr	r2, [r3, #0]
     d24:	f89d 300b 	ldrb.w	r3, [sp, #11]
     d28:	3304      	adds	r3, #4
     d2a:	009b      	lsls	r3, r3, #2
     d2c:	4413      	add	r3, r2
     d2e:	6858      	ldr	r0, [r3, #4]
     d30:	4b41      	ldr	r3, [pc, #260]	; (e38 <Scheduler_MainFunction+0x1b8>)
     d32:	681b      	ldr	r3, [r3, #0]
     d34:	681a      	ldr	r2, [r3, #0]
     d36:	4b41      	ldr	r3, [pc, #260]	; (e3c <Scheduler_MainFunction+0x1bc>)
     d38:	6819      	ldr	r1, [r3, #0]
     d3a:	f89d 300b 	ldrb.w	r3, [sp, #11]
     d3e:	1a82      	subs	r2, r0, r2
     d40:	3304      	adds	r3, #4
     d42:	009b      	lsls	r3, r3, #2
     d44:	440b      	add	r3, r1
     d46:	605a      	str	r2, [r3, #4]
                    
                        //Verifying execution of callback i
                        if ( Scheduler_GetTimer( i ) == 0 ) {   //timeout achieved.
     d48:	f89d 300b 	ldrb.w	r3, [sp, #11]
     d4c:	4618      	mov	r0, r3
     d4e:	f7ff ff4f 	bl	bf0 <Scheduler_GetTimer>
     d52:	4603      	mov	r3, r0
     d54:	2b00      	cmp	r3, #0
     d56:	d10b      	bne.n	d70 <Scheduler_MainFunction+0xf0>
                            SchedulerConfig_Ptr->TimerPtr[i].CallbackFunc();
     d58:	4b37      	ldr	r3, [pc, #220]	; (e38 <Scheduler_MainFunction+0x1b8>)
     d5a:	681b      	ldr	r3, [r3, #0]
     d5c:	6919      	ldr	r1, [r3, #16]
     d5e:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d62:	4613      	mov	r3, r2
     d64:	005b      	lsls	r3, r3, #1
     d66:	4413      	add	r3, r2
     d68:	009b      	lsls	r3, r3, #2
     d6a:	440b      	add	r3, r1
     d6c:	689b      	ldr	r3, [r3, #8]
     d6e:	4798      	blx	r3
                for ( i = 0; i < SchedulerConfig_Ptr->Timers; i++ ) {
     d70:	f89d 300b 	ldrb.w	r3, [sp, #11]
     d74:	3301      	adds	r3, #1
     d76:	f88d 300b 	strb.w	r3, [sp, #11]
     d7a:	4b2f      	ldr	r3, [pc, #188]	; (e38 <Scheduler_MainFunction+0x1b8>)
     d7c:	681b      	ldr	r3, [r3, #0]
     d7e:	7b1b      	ldrb	r3, [r3, #12]
     d80:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d84:	429a      	cmp	r2, r3
     d86:	d3bf      	bcc.n	d08 <Scheduler_MainFunction+0x88>
                        }
                    }
                }

                //Executing tasks.
                for ( i = 0; i < SchedulerConfig_Ptr->Tasks; i++ ) {
     d88:	2300      	movs	r3, #0
     d8a:	f88d 300b 	strb.w	r3, [sp, #11]
     d8e:	e045      	b.n	e1c <Scheduler_MainFunction+0x19c>
                    //Verifying execution of task i
                    if ( Bfx_GetBit_u32u8_u8( SchedulerCtrl_Ptr->TaskFlags, i ) == TRUE ) {
     d90:	4b2a      	ldr	r3, [pc, #168]	; (e3c <Scheduler_MainFunction+0x1bc>)
     d92:	681b      	ldr	r3, [r3, #0]
     d94:	699b      	ldr	r3, [r3, #24]
     d96:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d9a:	4611      	mov	r1, r2
     d9c:	4618      	mov	r0, r3
     d9e:	f7ff fe01 	bl	9a4 <Bfx_GetBit_u32u8_u8>
     da2:	4603      	mov	r3, r0
     da4:	2b00      	cmp	r3, #0
     da6:	d034      	beq.n	e12 <Scheduler_MainFunction+0x192>
                        SchedulerCtrl_Ptr->TaskElapsed[i] += SchedulerConfig_Ptr->Tick;   //Time follow-up update for task i.
     da8:	4b24      	ldr	r3, [pc, #144]	; (e3c <Scheduler_MainFunction+0x1bc>)
     daa:	681b      	ldr	r3, [r3, #0]
     dac:	f89d 200b 	ldrb.w	r2, [sp, #11]
     db0:	3202      	adds	r2, #2
     db2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
     db6:	4b20      	ldr	r3, [pc, #128]	; (e38 <Scheduler_MainFunction+0x1b8>)
     db8:	681b      	ldr	r3, [r3, #0]
     dba:	6819      	ldr	r1, [r3, #0]
     dbc:	4b1f      	ldr	r3, [pc, #124]	; (e3c <Scheduler_MainFunction+0x1bc>)
     dbe:	681b      	ldr	r3, [r3, #0]
     dc0:	f89d 200b 	ldrb.w	r2, [sp, #11]
     dc4:	4401      	add	r1, r0
     dc6:	3202      	adds	r2, #2
     dc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                
                        //Verifying the execution of callback i.
                        if ( SchedulerCtrl_Ptr->TaskElapsed[i] >= SchedulerCtrl_Ptr->TaskPeriod[i] ) {  //periodicity achieved.
     dcc:	4b1b      	ldr	r3, [pc, #108]	; (e3c <Scheduler_MainFunction+0x1bc>)
     dce:	681b      	ldr	r3, [r3, #0]
     dd0:	f89d 200b 	ldrb.w	r2, [sp, #11]
     dd4:	3202      	adds	r2, #2
     dd6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
     dda:	4b18      	ldr	r3, [pc, #96]	; (e3c <Scheduler_MainFunction+0x1bc>)
     ddc:	681b      	ldr	r3, [r3, #0]
     dde:	f89d 100b 	ldrb.w	r1, [sp, #11]
     de2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
     de6:	429a      	cmp	r2, r3
     de8:	d313      	bcc.n	e12 <Scheduler_MainFunction+0x192>
                            SchedulerConfig_Ptr->TaskPtr[i].TaskFunc();
     dea:	4b13      	ldr	r3, [pc, #76]	; (e38 <Scheduler_MainFunction+0x1b8>)
     dec:	681b      	ldr	r3, [r3, #0]
     dee:	6899      	ldr	r1, [r3, #8]
     df0:	f89d 200b 	ldrb.w	r2, [sp, #11]
     df4:	4613      	mov	r3, r2
     df6:	005b      	lsls	r3, r3, #1
     df8:	4413      	add	r3, r2
     dfa:	009b      	lsls	r3, r3, #2
     dfc:	440b      	add	r3, r1
     dfe:	689b      	ldr	r3, [r3, #8]
     e00:	4798      	blx	r3
                            SchedulerCtrl_Ptr->TaskElapsed[i] = 0;  //Time follow-up reset for task i.
     e02:	4b0e      	ldr	r3, [pc, #56]	; (e3c <Scheduler_MainFunction+0x1bc>)
     e04:	681b      	ldr	r3, [r3, #0]
     e06:	f89d 200b 	ldrb.w	r2, [sp, #11]
     e0a:	3202      	adds	r2, #2
     e0c:	2100      	movs	r1, #0
     e0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                for ( i = 0; i < SchedulerConfig_Ptr->Tasks; i++ ) {
     e12:	f89d 300b 	ldrb.w	r3, [sp, #11]
     e16:	3301      	adds	r3, #1
     e18:	f88d 300b 	strb.w	r3, [sp, #11]
     e1c:	4b06      	ldr	r3, [pc, #24]	; (e38 <Scheduler_MainFunction+0x1b8>)
     e1e:	681b      	ldr	r3, [r3, #0]
     e20:	791b      	ldrb	r3, [r3, #4]
     e22:	f89d 200b 	ldrb.w	r2, [sp, #11]
     e26:	429a      	cmp	r2, r3
     e28:	d3b2      	bcc.n	d90 <Scheduler_MainFunction+0x110>
                        }
                    }
                }

                elapsed_time = 0;   //Reset time follow up for tick.
     e2a:	2300      	movs	r3, #0
     e2c:	9303      	str	r3, [sp, #12]
            elapsed_time += OsIf_GetElapsed( &count_value, OSIF_COUNTER_SYSTEM );   //time capture update
     e2e:	e75a      	b.n	ce6 <Scheduler_MainFunction+0x66>
            }
        }
    }
}
     e30:	bf00      	nop
     e32:	b005      	add	sp, #20
     e34:	f85d fb04 	ldr.w	pc, [sp], #4
     e38:	1fff8b54 	.word	0x1fff8b54
     e3c:	1fff8b58 	.word	0x1fff8b58

00000e40 <Task1_callback>:
/**
 * @brief This is the callback function for the task 1.
 *
 * This function executes the state machine every 50ms.
 */
void Task1_callback( void ) {
     e40:	b508      	push	{r3, lr}
    HwIoAb_Buttons_MainFunction();
     e42:	f000 f9a3 	bl	118c <HwIoAb_Buttons_MainFunction>
}
     e46:	bf00      	nop
     e48:	bd08      	pop	{r3, pc}
	...

00000e4c <Task2_callback>:
 * @note Button 1, Single click toggle only led0 (PTC8), double click prints ohms value of pot 1 main, hold click tone 1 for buzzer, release stops buzzer.
 * @note Button 2, Single click toggle only led1 (PTC9), double click prints ohms value of pot 2 main, hold click tone 2 for buzzer, release stops buzzer.
 * @note Button 3, Single click toggle only led2 (PTC10), double click prints ohms values of pot1 and pot 2 alter , hold click tone 3 for buzzer, release stops buzzer.
 * @note The tone of the buzzer is always the last activated.
 */
void Task2_callback( void ) {
     e4c:	b500      	push	{lr}
     e4e:	b083      	sub	sp, #12
    //local data.
    static boolean flags[3] = { TRUE, TRUE, TRUE }; //Flags for executing buzzer tones.
    uint8 i = 0;
     e50:	2300      	movs	r3, #0
     e52:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 actual_event = 0; //Actual event of button.
     e56:	2300      	movs	r3, #0
     e58:	f88d 3006 	strb.w	r3, [sp, #6]

    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) { //Checking each button and its event detected.
     e5c:	2300      	movs	r3, #0
     e5e:	f88d 3007 	strb.w	r3, [sp, #7]
     e62:	e0de      	b.n	1022 <Task2_callback+0x1d6>
        actual_event =  HwIoAb_Buttons_GetEvent( i );   //Obtaining event of actual button.
     e64:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e68:	4618      	mov	r0, r3
     e6a:	f000 f93f 	bl	10ec <HwIoAb_Buttons_GetEvent>
     e6e:	4603      	mov	r3, r0
     e70:	f88d 3006 	strb.w	r3, [sp, #6]
        
        if ( actual_event != HWIOAB_BTN_EVENT_IDLE ) {  //A click was detected.
     e74:	f89d 3006 	ldrb.w	r3, [sp, #6]
     e78:	2b00      	cmp	r3, #0
     e7a:	f000 80ca 	beq.w	1012 <Task2_callback+0x1c6>
            switch ( i ) {    
     e7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e82:	2b02      	cmp	r3, #2
     e84:	f000 8084 	beq.w	f90 <Task2_callback+0x144>
     e88:	2b02      	cmp	r3, #2
     e8a:	f300 80c4 	bgt.w	1016 <Task2_callback+0x1ca>
     e8e:	2b00      	cmp	r3, #0
     e90:	d002      	beq.n	e98 <Task2_callback+0x4c>
     e92:	2b01      	cmp	r3, #1
     e94:	d03e      	beq.n	f14 <Task2_callback+0xc8>
                            break;
                        }
                break;

                default:    //Invalid button.
                break;
     e96:	e0be      	b.n	1016 <Task2_callback+0x1ca>
                    switch ( actual_event ) {
     e98:	f89d 3006 	ldrb.w	r3, [sp, #6]
     e9c:	3b01      	subs	r3, #1
     e9e:	2b03      	cmp	r3, #3
     ea0:	d834      	bhi.n	f0c <Task2_callback+0xc0>
     ea2:	a201      	add	r2, pc, #4	; (adr r2, ea8 <Task2_callback+0x5c>)
     ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     ea8:	00000eb9 	.word	0x00000eb9
     eac:	00000ec1 	.word	0x00000ec1
     eb0:	00000edf 	.word	0x00000edf
     eb4:	00000efd 	.word	0x00000efd
                            HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_0_ID );
     eb8:	2000      	movs	r0, #0
     eba:	f000 fb2b 	bl	1514 <HwIoAb_Leds_TurnToggle>
                        break;
     ebe:	e028      	b.n	f12 <Task2_callback+0xc6>
                            HwIoAb_Pots_GetValue( HWIOAB_POTS_MAIN_RESULTS );
     ec0:	4b5e      	ldr	r3, [pc, #376]	; (103c <Task2_callback+0x1f0>)
     ec2:	681b      	ldr	r3, [r3, #0]
     ec4:	330a      	adds	r3, #10
     ec6:	4618      	mov	r0, r3
     ec8:	f000 fb8e 	bl	15e8 <HwIoAb_Pots_GetValue>
                            SEGGER_RTT_printf( 0, "Pot 1 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_main[0] );
     ecc:	4b5b      	ldr	r3, [pc, #364]	; (103c <Task2_callback+0x1f0>)
     ece:	681b      	ldr	r3, [r3, #0]
     ed0:	895b      	ldrh	r3, [r3, #10]
     ed2:	461a      	mov	r2, r3
     ed4:	495a      	ldr	r1, [pc, #360]	; (1040 <Task2_callback+0x1f4>)
     ed6:	2000      	movs	r0, #0
     ed8:	f001 faba 	bl	2450 <SEGGER_RTT_printf>
                        break;
     edc:	e019      	b.n	f12 <Task2_callback+0xc6>
                            if ( flags[i]  == TRUE ) {  //Just executes the first time it was detected.
     ede:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ee2:	4a58      	ldr	r2, [pc, #352]	; (1044 <Task2_callback+0x1f8>)
     ee4:	5cd3      	ldrb	r3, [r2, r3]
     ee6:	2b00      	cmp	r3, #0
     ee8:	d012      	beq.n	f10 <Task2_callback+0xc4>
                                HwIoAb_Buzzer_Beep( HWIOAB_BUZZER_TONE_1 );
     eea:	2000      	movs	r0, #0
     eec:	f000 fc91 	bl	1812 <HwIoAb_Buzzer_Beep>
                                flags[i] = FALSE;
     ef0:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ef4:	4a53      	ldr	r2, [pc, #332]	; (1044 <Task2_callback+0x1f8>)
     ef6:	2100      	movs	r1, #0
     ef8:	54d1      	strb	r1, [r2, r3]
                        break;
     efa:	e009      	b.n	f10 <Task2_callback+0xc4>
                            HwIoAb_Buzzer_Stop();
     efc:	f000 fcbd 	bl	187a <HwIoAb_Buzzer_Stop>
                            flags[i] = TRUE;
     f00:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f04:	4a4f      	ldr	r2, [pc, #316]	; (1044 <Task2_callback+0x1f8>)
     f06:	2101      	movs	r1, #1
     f08:	54d1      	strb	r1, [r2, r3]
                        break;
     f0a:	e002      	b.n	f12 <Task2_callback+0xc6>
                        break;
     f0c:	bf00      	nop
     f0e:	e083      	b.n	1018 <Task2_callback+0x1cc>
                        break;
     f10:	bf00      	nop
                break;
     f12:	e081      	b.n	1018 <Task2_callback+0x1cc>
                    switch ( actual_event ) {
     f14:	f89d 3006 	ldrb.w	r3, [sp, #6]
     f18:	3b01      	subs	r3, #1
     f1a:	2b03      	cmp	r3, #3
     f1c:	d834      	bhi.n	f88 <Task2_callback+0x13c>
     f1e:	a201      	add	r2, pc, #4	; (adr r2, f24 <Task2_callback+0xd8>)
     f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     f24:	00000f35 	.word	0x00000f35
     f28:	00000f3d 	.word	0x00000f3d
     f2c:	00000f5b 	.word	0x00000f5b
     f30:	00000f79 	.word	0x00000f79
                            HwIoAb_Leds_TurnToggle( HWI0AB_LEDS_1_ID );
     f34:	2001      	movs	r0, #1
     f36:	f000 faed 	bl	1514 <HwIoAb_Leds_TurnToggle>
                        break;
     f3a:	e028      	b.n	f8e <Task2_callback+0x142>
                            HwIoAb_Pots_GetValue( HWIOAB_POTS_MAIN_RESULTS );
     f3c:	4b3f      	ldr	r3, [pc, #252]	; (103c <Task2_callback+0x1f0>)
     f3e:	681b      	ldr	r3, [r3, #0]
     f40:	330a      	adds	r3, #10
     f42:	4618      	mov	r0, r3
     f44:	f000 fb50 	bl	15e8 <HwIoAb_Pots_GetValue>
                            SEGGER_RTT_printf( 0, "Pot 2 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_main[1] );
     f48:	4b3c      	ldr	r3, [pc, #240]	; (103c <Task2_callback+0x1f0>)
     f4a:	681b      	ldr	r3, [r3, #0]
     f4c:	899b      	ldrh	r3, [r3, #12]
     f4e:	461a      	mov	r2, r3
     f50:	493d      	ldr	r1, [pc, #244]	; (1048 <Task2_callback+0x1fc>)
     f52:	2000      	movs	r0, #0
     f54:	f001 fa7c 	bl	2450 <SEGGER_RTT_printf>
                        break;
     f58:	e019      	b.n	f8e <Task2_callback+0x142>
                            if ( flags[i]  == TRUE ) {  //Just executes the first time it was detected.
     f5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f5e:	4a39      	ldr	r2, [pc, #228]	; (1044 <Task2_callback+0x1f8>)
     f60:	5cd3      	ldrb	r3, [r2, r3]
     f62:	2b00      	cmp	r3, #0
     f64:	d012      	beq.n	f8c <Task2_callback+0x140>
                                HwIoAb_Buzzer_Beep( HWIOAB_BUZZER_TONE_2 );
     f66:	2001      	movs	r0, #1
     f68:	f000 fc53 	bl	1812 <HwIoAb_Buzzer_Beep>
                                flags[i] = FALSE;
     f6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f70:	4a34      	ldr	r2, [pc, #208]	; (1044 <Task2_callback+0x1f8>)
     f72:	2100      	movs	r1, #0
     f74:	54d1      	strb	r1, [r2, r3]
                        break;
     f76:	e009      	b.n	f8c <Task2_callback+0x140>
                            HwIoAb_Buzzer_Stop();
     f78:	f000 fc7f 	bl	187a <HwIoAb_Buzzer_Stop>
                            flags[i] = TRUE;
     f7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f80:	4a30      	ldr	r2, [pc, #192]	; (1044 <Task2_callback+0x1f8>)
     f82:	2101      	movs	r1, #1
     f84:	54d1      	strb	r1, [r2, r3]
                        break;
     f86:	e002      	b.n	f8e <Task2_callback+0x142>
                        break;
     f88:	bf00      	nop
     f8a:	e045      	b.n	1018 <Task2_callback+0x1cc>
                        break;
     f8c:	bf00      	nop
                break;
     f8e:	e043      	b.n	1018 <Task2_callback+0x1cc>
                        switch ( actual_event ) {
     f90:	f89d 3006 	ldrb.w	r3, [sp, #6]
     f94:	3b01      	subs	r3, #1
     f96:	2b03      	cmp	r3, #3
     f98:	d837      	bhi.n	100a <Task2_callback+0x1be>
     f9a:	a201      	add	r2, pc, #4	; (adr r2, fa0 <Task2_callback+0x154>)
     f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     fa0:	00000fb1 	.word	0x00000fb1
     fa4:	00000fb9 	.word	0x00000fb9
     fa8:	00000fdd 	.word	0x00000fdd
     fac:	00000ffb 	.word	0x00000ffb
                                HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_2_ID );
     fb0:	2002      	movs	r0, #2
     fb2:	f000 faaf 	bl	1514 <HwIoAb_Leds_TurnToggle>
                            break;
     fb6:	e02b      	b.n	1010 <Task2_callback+0x1c4>
                                HwIoAb_Pots_GetAltValue( HWIOAB_POTS_ALTER_RESULTS );
     fb8:	4b20      	ldr	r3, [pc, #128]	; (103c <Task2_callback+0x1f0>)
     fba:	681b      	ldr	r3, [r3, #0]
     fbc:	330e      	adds	r3, #14
     fbe:	4618      	mov	r0, r3
     fc0:	f000 fb9a 	bl	16f8 <HwIoAb_Pots_GetAltValue>
                                    PotsControl_Ptr->Ohms_results_alter[0], PotsControl_Ptr->Ohms_results_alter[1] );
     fc4:	4b1d      	ldr	r3, [pc, #116]	; (103c <Task2_callback+0x1f0>)
     fc6:	681b      	ldr	r3, [r3, #0]
     fc8:	89db      	ldrh	r3, [r3, #14]
                                SEGGER_RTT_printf( 0, "Pot 1 resistance value in ohms: %d, Pot 2 resistance value in ohms: %d\n", 
     fca:	461a      	mov	r2, r3
                                    PotsControl_Ptr->Ohms_results_alter[0], PotsControl_Ptr->Ohms_results_alter[1] );
     fcc:	4b1b      	ldr	r3, [pc, #108]	; (103c <Task2_callback+0x1f0>)
     fce:	681b      	ldr	r3, [r3, #0]
     fd0:	8a1b      	ldrh	r3, [r3, #16]
                                SEGGER_RTT_printf( 0, "Pot 1 resistance value in ohms: %d, Pot 2 resistance value in ohms: %d\n", 
     fd2:	491e      	ldr	r1, [pc, #120]	; (104c <Task2_callback+0x200>)
     fd4:	2000      	movs	r0, #0
     fd6:	f001 fa3b 	bl	2450 <SEGGER_RTT_printf>
                            break;
     fda:	e019      	b.n	1010 <Task2_callback+0x1c4>
                                if ( flags[i]  == TRUE ) {  //Just executes the first time it was detected.
     fdc:	f89d 3007 	ldrb.w	r3, [sp, #7]
     fe0:	4a18      	ldr	r2, [pc, #96]	; (1044 <Task2_callback+0x1f8>)
     fe2:	5cd3      	ldrb	r3, [r2, r3]
     fe4:	2b00      	cmp	r3, #0
     fe6:	d012      	beq.n	100e <Task2_callback+0x1c2>
                                    HwIoAb_Buzzer_Beep( HWIOAB_BUZZER_TONE_3 );
     fe8:	2002      	movs	r0, #2
     fea:	f000 fc12 	bl	1812 <HwIoAb_Buzzer_Beep>
                                    flags[i] = FALSE;
     fee:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ff2:	4a14      	ldr	r2, [pc, #80]	; (1044 <Task2_callback+0x1f8>)
     ff4:	2100      	movs	r1, #0
     ff6:	54d1      	strb	r1, [r2, r3]
                            break;
     ff8:	e009      	b.n	100e <Task2_callback+0x1c2>
                                HwIoAb_Buzzer_Stop();
     ffa:	f000 fc3e 	bl	187a <HwIoAb_Buzzer_Stop>
                                flags[i] = TRUE;
     ffe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1002:	4a10      	ldr	r2, [pc, #64]	; (1044 <Task2_callback+0x1f8>)
    1004:	2101      	movs	r1, #1
    1006:	54d1      	strb	r1, [r2, r3]
                            break;
    1008:	e002      	b.n	1010 <Task2_callback+0x1c4>
                            break;
    100a:	bf00      	nop
    100c:	e004      	b.n	1018 <Task2_callback+0x1cc>
                            break;
    100e:	bf00      	nop
                break;
    1010:	e002      	b.n	1018 <Task2_callback+0x1cc>
            }
        }
    1012:	bf00      	nop
    1014:	e000      	b.n	1018 <Task2_callback+0x1cc>
                break;
    1016:	bf00      	nop
    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) { //Checking each button and its event detected.
    1018:	f89d 3007 	ldrb.w	r3, [sp, #7]
    101c:	3301      	adds	r3, #1
    101e:	f88d 3007 	strb.w	r3, [sp, #7]
    1022:	4b0b      	ldr	r3, [pc, #44]	; (1050 <Task2_callback+0x204>)
    1024:	681b      	ldr	r3, [r3, #0]
    1026:	781b      	ldrb	r3, [r3, #0]
    1028:	f89d 2007 	ldrb.w	r2, [sp, #7]
    102c:	429a      	cmp	r2, r3
    102e:	f4ff af19 	bcc.w	e64 <Task2_callback+0x18>
    }
}
    1032:	bf00      	nop
    1034:	bf00      	nop
    1036:	b003      	add	sp, #12
    1038:	f85d fb04 	ldr.w	pc, [sp], #4
    103c:	1fff8b68 	.word	0x1fff8b68
    1040:	00018f9c 	.word	0x00018f9c
    1044:	1fff8b5c 	.word	0x1fff8b5c
    1048:	00018fc0 	.word	0x00018fc0
    104c:	00018fe4 	.word	0x00018fe4
    1050:	1fff8b60 	.word	0x1fff8b60

00001054 <Timer1_callback>:
/**
 * @brief This is the callback function for the timer 1.
 *
 */
void Timer1_callback( void ) {
}
    1054:	bf00      	nop
    1056:	4770      	bx	lr

00001058 <HwIoAb_Buttons_Init>:
 * @brief This function initialices the control structure for the double click state machine. 
 * 
 * @param Buttons_Config Pointer to configuration array.
 * 
 */
void HwIoAb_Buttons_Init( const HwIoAb_Buttons_Config *Buttons_Config ) {
    1058:	b500      	push	{lr}
    105a:	b085      	sub	sp, #20
    105c:	9001      	str	r0, [sp, #4]
    //local data 
    uint8 i = 0;
    105e:	2300      	movs	r3, #0
    1060:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 status = E_OK;
    1064:	2300      	movs	r3, #0
    1066:	f88d 300e 	strb.w	r3, [sp, #14]

    #if ( HWIOAB_BUTTONS_DEV_ERROR_DETECT == STD_ON )
            if ( Buttons_Config == NULL_PTR ) {
    106a:	9b01      	ldr	r3, [sp, #4]
    106c:	2b00      	cmp	r3, #0
    106e:	d109      	bne.n	1084 <HwIoAb_Buttons_Init+0x2c>
                Det_ReportError( HWIOAB_BUTTONS_MODULE_ID, HWIOAB_BUTTONS_INSTANCE_ID, HWIOAB_BUTTONS_INIT_ID, HWIOAB_BUTTONS_E_CONFIG );
    1070:	2300      	movs	r3, #0
    1072:	2200      	movs	r2, #0
    1074:	2100      	movs	r1, #0
    1076:	f240 102d 	movw	r0, #301	; 0x12d
    107a:	f017 f9cb 	bl	18414 <Det_ReportError>
                status = E_NOT_OK;
    107e:	2301      	movs	r3, #1
    1080:	f88d 300e 	strb.w	r3, [sp, #14]
            }
    #endif

    if ( status == E_OK ) {
    1084:	f89d 300e 	ldrb.w	r3, [sp, #14]
    1088:	2b00      	cmp	r3, #0
    108a:	d129      	bne.n	10e0 <HwIoAb_Buttons_Init+0x88>
        //Initializing members.
        ButtonsControl_Ptr->Buttons = HWIOAB_BUTTONS_MAX;
    108c:	4b16      	ldr	r3, [pc, #88]	; (10e8 <HwIoAb_Buttons_Init+0x90>)
    108e:	681b      	ldr	r3, [r3, #0]
    1090:	2203      	movs	r2, #3
    1092:	701a      	strb	r2, [r3, #0]
        ButtonsControl_Ptr->ButtonsConfig_Ptr = Buttons_Config;
    1094:	4b14      	ldr	r3, [pc, #80]	; (10e8 <HwIoAb_Buttons_Init+0x90>)
    1096:	681b      	ldr	r3, [r3, #0]
    1098:	9a01      	ldr	r2, [sp, #4]
    109a:	605a      	str	r2, [r3, #4]

        for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) {   //All button states and events to IDLE.
    109c:	2300      	movs	r3, #0
    109e:	f88d 300f 	strb.w	r3, [sp, #15]
    10a2:	e012      	b.n	10ca <HwIoAb_Buttons_Init+0x72>
            ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
    10a4:	4b10      	ldr	r3, [pc, #64]	; (10e8 <HwIoAb_Buttons_Init+0x90>)
    10a6:	681a      	ldr	r2, [r3, #0]
    10a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    10ac:	4413      	add	r3, r2
    10ae:	2200      	movs	r2, #0
    10b0:	721a      	strb	r2, [r3, #8]
            ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_IDLE;
    10b2:	4b0d      	ldr	r3, [pc, #52]	; (10e8 <HwIoAb_Buttons_Init+0x90>)
    10b4:	681a      	ldr	r2, [r3, #0]
    10b6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    10ba:	4413      	add	r3, r2
    10bc:	2200      	movs	r2, #0
    10be:	72da      	strb	r2, [r3, #11]
        for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) {   //All button states and events to IDLE.
    10c0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    10c4:	3301      	adds	r3, #1
    10c6:	f88d 300f 	strb.w	r3, [sp, #15]
    10ca:	4b07      	ldr	r3, [pc, #28]	; (10e8 <HwIoAb_Buttons_Init+0x90>)
    10cc:	681b      	ldr	r3, [r3, #0]
    10ce:	781b      	ldrb	r3, [r3, #0]
    10d0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    10d4:	429a      	cmp	r2, r3
    10d6:	d3e5      	bcc.n	10a4 <HwIoAb_Buttons_Init+0x4c>
        }

        ButtonsControl_Ptr->Buttons_init = TRUE;
    10d8:	4b03      	ldr	r3, [pc, #12]	; (10e8 <HwIoAb_Buttons_Init+0x90>)
    10da:	681b      	ldr	r3, [r3, #0]
    10dc:	2201      	movs	r2, #1
    10de:	739a      	strb	r2, [r3, #14]
    }
}
    10e0:	bf00      	nop
    10e2:	b005      	add	sp, #20
    10e4:	f85d fb04 	ldr.w	pc, [sp], #4
    10e8:	1fff8b60 	.word	0x1fff8b60

000010ec <HwIoAb_Buttons_GetEvent>:
 * @param Button Button ID. 
 * @return event Last event detected in button.
 * 
 * @note The Button ID must be valid.
 */
uint8 HwIoAb_Buttons_GetEvent( uint8 Button ) {
    10ec:	b500      	push	{lr}
    10ee:	b085      	sub	sp, #20
    10f0:	4603      	mov	r3, r0
    10f2:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data.
    uint8 status = E_OK;
    10f6:	2300      	movs	r3, #0
    10f8:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 event = 0;
    10fc:	2300      	movs	r3, #0
    10fe:	f88d 300e 	strb.w	r3, [sp, #14]

    #if ( HWIOAB_BUTTONS_DEV_ERROR_DETECT == STD_ON )
        if ( ButtonsControl_Ptr->Buttons_init == FALSE ) {
    1102:	4b21      	ldr	r3, [pc, #132]	; (1188 <__BSS_SRAM_SIZE+0x58>)
    1104:	681b      	ldr	r3, [r3, #0]
    1106:	7b9b      	ldrb	r3, [r3, #14]
    1108:	f083 0301 	eor.w	r3, r3, #1
    110c:	b2db      	uxtb	r3, r3
    110e:	2b00      	cmp	r3, #0
    1110:	d00c      	beq.n	112c <HwIoAb_Buttons_GetEvent+0x40>
            Det_ReportError( HWIOAB_BUTTONS_MODULE_ID, HWIOAB_BUTTONS_INSTANCE_ID, HWIOAB_BUTTONS_GETEVENT_ID, HWIOAB_BUTTONS_E_UNINIT );
    1112:	2303      	movs	r3, #3
    1114:	2201      	movs	r2, #1
    1116:	2100      	movs	r1, #0
    1118:	f240 102d 	movw	r0, #301	; 0x12d
    111c:	f017 f97a 	bl	18414 <Det_ReportError>
            status = E_NOT_OK;
    1120:	2301      	movs	r3, #1
    1122:	f88d 300f 	strb.w	r3, [sp, #15]
            event = HWIOAB_BTN_EVENT_NULL;
    1126:	2332      	movs	r3, #50	; 0x32
    1128:	f88d 300e 	strb.w	r3, [sp, #14]
        }

        if ( Button > ButtonsControl_Ptr->Buttons - 1 ) {
    112c:	4b16      	ldr	r3, [pc, #88]	; (1188 <__BSS_SRAM_SIZE+0x58>)
    112e:	681b      	ldr	r3, [r3, #0]
    1130:	781b      	ldrb	r3, [r3, #0]
    1132:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1136:	429a      	cmp	r2, r3
    1138:	d30c      	bcc.n	1154 <__BSS_SRAM_SIZE+0x24>
             Det_ReportError( HWIOAB_BUTTONS_MODULE_ID, HWIOAB_BUTTONS_INSTANCE_ID, HWIOAB_BUTTONS_GETEVENT_ID, HWIOAB_BUTTONS_E_BUTTON_ID );
    113a:	2301      	movs	r3, #1
    113c:	2201      	movs	r2, #1
    113e:	2100      	movs	r1, #0
    1140:	f240 102d 	movw	r0, #301	; 0x12d
    1144:	f017 f966 	bl	18414 <Det_ReportError>
             status = E_NOT_OK;
    1148:	2301      	movs	r3, #1
    114a:	f88d 300f 	strb.w	r3, [sp, #15]
             event = HWIOAB_BTN_EVENT_NULL;
    114e:	2332      	movs	r3, #50	; 0x32
    1150:	f88d 300e 	strb.w	r3, [sp, #14]
        }
    #endif

    if ( status == E_OK ) {
    1154:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1158:	2b00      	cmp	r3, #0
    115a:	d10e      	bne.n	117a <__BSS_SRAM_SIZE+0x4a>
        event = ButtonsControl_Ptr->Events[ Button ]; //Obtaining last event.
    115c:	4b0a      	ldr	r3, [pc, #40]	; (1188 <__BSS_SRAM_SIZE+0x58>)
    115e:	681a      	ldr	r2, [r3, #0]
    1160:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1164:	4413      	add	r3, r2
    1166:	7adb      	ldrb	r3, [r3, #11]
    1168:	f88d 300e 	strb.w	r3, [sp, #14]
        ButtonsControl_Ptr->Events[ Button ] = HWIOAB_BTN_EVENT_IDLE;   //Clearing event of button.
    116c:	4b06      	ldr	r3, [pc, #24]	; (1188 <__BSS_SRAM_SIZE+0x58>)
    116e:	681a      	ldr	r2, [r3, #0]
    1170:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1174:	4413      	add	r3, r2
    1176:	2200      	movs	r2, #0
    1178:	72da      	strb	r2, [r3, #11]
    }

    return event;
    117a:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    117e:	4618      	mov	r0, r3
    1180:	b005      	add	sp, #20
    1182:	f85d fb04 	ldr.w	pc, [sp], #4
    1186:	bf00      	nop
    1188:	1fff8b60 	.word	0x1fff8b60

0000118c <HwIoAb_Buttons_MainFunction>:
 * @note This function is called every HWIOAB_BUTTONS_PERIOD.
 * @note Remember that the timeout count is for detecting a hold click when the button is pressed 1 and 2 times.
 * @note Each button has its own dedicated count.
 * 
 */
void HwIoAb_Buttons_MainFunction( void ) {
    118c:	b500      	push	{lr}
    118e:	b083      	sub	sp, #12
    //local data
    static uint32 count[ HWIOAB_BUTTONS_MAX ] = { 0, 0, 0 };
    uint8 i = 0;
    1190:	2300      	movs	r3, #0
    1192:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 status = E_OK;
    1196:	2300      	movs	r3, #0
    1198:	f88d 3006 	strb.w	r3, [sp, #6]

    #if ( HWIOAB_BUTTONS_DEV_ERROR_DETECT == STD_ON )
        if ( ButtonsControl_Ptr->Buttons_init == FALSE ) {
    119c:	4bba      	ldr	r3, [pc, #744]	; (1488 <HwIoAb_Buttons_MainFunction+0x2fc>)
    119e:	681b      	ldr	r3, [r3, #0]
    11a0:	7b9b      	ldrb	r3, [r3, #14]
    11a2:	f083 0301 	eor.w	r3, r3, #1
    11a6:	b2db      	uxtb	r3, r3
    11a8:	2b00      	cmp	r3, #0
    11aa:	d009      	beq.n	11c0 <HwIoAb_Buttons_MainFunction+0x34>
            Det_ReportError( HWIOAB_BUTTONS_MODULE_ID, HWIOAB_BUTTONS_INSTANCE_ID, HWIOAB_BUTTONS_MAINFUNCTION_ID, HWIOAB_BUTTONS_E_UNINIT );
    11ac:	2303      	movs	r3, #3
    11ae:	2202      	movs	r2, #2
    11b0:	2100      	movs	r1, #0
    11b2:	f240 102d 	movw	r0, #301	; 0x12d
    11b6:	f017 f92d 	bl	18414 <Det_ReportError>
            status = E_NOT_OK;
    11ba:	2301      	movs	r3, #1
    11bc:	f88d 3006 	strb.w	r3, [sp, #6]
        }
    #endif

    if ( status == E_OK ) {
    11c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    11c4:	2b00      	cmp	r3, #0
    11c6:	f040 8175 	bne.w	14b4 <HwIoAb_Buttons_MainFunction+0x328>
        for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) { //Executing state machine for each button.
    11ca:	2300      	movs	r3, #0
    11cc:	f88d 3007 	strb.w	r3, [sp, #7]
    11d0:	e168      	b.n	14a4 <HwIoAb_Buttons_MainFunction+0x318>
            switch( ButtonsControl_Ptr->States[i] ) {
    11d2:	4bad      	ldr	r3, [pc, #692]	; (1488 <HwIoAb_Buttons_MainFunction+0x2fc>)
    11d4:	681a      	ldr	r2, [r3, #0]
    11d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11da:	4413      	add	r3, r2
    11dc:	7a1b      	ldrb	r3, [r3, #8]
    11de:	2b04      	cmp	r3, #4
    11e0:	f200 8146 	bhi.w	1470 <HwIoAb_Buttons_MainFunction+0x2e4>
    11e4:	a201      	add	r2, pc, #4	; (adr r2, 11ec <HwIoAb_Buttons_MainFunction+0x60>)
    11e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    11ea:	bf00      	nop
    11ec:	00001201 	.word	0x00001201
    11f0:	0000124d 	.word	0x0000124d
    11f4:	00001375 	.word	0x00001375
    11f8:	0000140d 	.word	0x0000140d
    11fc:	000012d9 	.word	0x000012d9
                case HWIOAB_BTN_STATE_IDLE :
                    //Checks if the button is pressed.
                    if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active ) {
    1200:	4ba1      	ldr	r3, [pc, #644]	; (1488 <HwIoAb_Buttons_MainFunction+0x2fc>)
    1202:	681b      	ldr	r3, [r3, #0]
    1204:	685a      	ldr	r2, [r3, #4]
    1206:	f89d 3007 	ldrb.w	r3, [sp, #7]
    120a:	00db      	lsls	r3, r3, #3
    120c:	4413      	add	r3, r2
    120e:	881b      	ldrh	r3, [r3, #0]
    1210:	4618      	mov	r0, r3
    1212:	f007 fa57 	bl	86c4 <Dio_ReadChannel>
    1216:	4603      	mov	r3, r0
    1218:	4619      	mov	r1, r3
    121a:	4b9b      	ldr	r3, [pc, #620]	; (1488 <HwIoAb_Buttons_MainFunction+0x2fc>)
    121c:	681b      	ldr	r3, [r3, #0]
    121e:	685a      	ldr	r2, [r3, #4]
    1220:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1224:	00db      	lsls	r3, r3, #3
    1226:	4413      	add	r3, r2
    1228:	789b      	ldrb	r3, [r3, #2]
    122a:	4299      	cmp	r1, r3
    122c:	f040 8128 	bne.w	1480 <HwIoAb_Buttons_MainFunction+0x2f4>
                        count[i] = 0;   //Restarting count.
    1230:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1234:	4a95      	ldr	r2, [pc, #596]	; (148c <HwIoAb_Buttons_MainFunction+0x300>)
    1236:	2100      	movs	r1, #0
    1238:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                        ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_SINGLE_PRESS;
    123c:	4b92      	ldr	r3, [pc, #584]	; (1488 <HwIoAb_Buttons_MainFunction+0x2fc>)
    123e:	681a      	ldr	r2, [r3, #0]
    1240:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1244:	4413      	add	r3, r2
    1246:	2201      	movs	r2, #1
    1248:	721a      	strb	r2, [r3, #8]
                    }
                break;
    124a:	e119      	b.n	1480 <HwIoAb_Buttons_MainFunction+0x2f4>
        
                case HWIOAB_BTN_STATE_SINGLE_PRESS :
                    count[i] += HWIOAB_BUTTONS_PERIOD;
    124c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1250:	4a8e      	ldr	r2, [pc, #568]	; (148c <HwIoAb_Buttons_MainFunction+0x300>)
    1252:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1256:	f89d 3007 	ldrb.w	r3, [sp, #7]
    125a:	3232      	adds	r2, #50	; 0x32
    125c:	498b      	ldr	r1, [pc, #556]	; (148c <HwIoAb_Buttons_MainFunction+0x300>)
    125e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                
                    //Checking count timeout.
                    if ( count[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout ) {
    1262:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1266:	4a89      	ldr	r2, [pc, #548]	; (148c <HwIoAb_Buttons_MainFunction+0x300>)
    1268:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    126c:	4b86      	ldr	r3, [pc, #536]	; (1488 <HwIoAb_Buttons_MainFunction+0x2fc>)
    126e:	681b      	ldr	r3, [r3, #0]
    1270:	6859      	ldr	r1, [r3, #4]
    1272:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1276:	00db      	lsls	r3, r3, #3
    1278:	440b      	add	r3, r1
    127a:	685b      	ldr	r3, [r3, #4]
    127c:	429a      	cmp	r2, r3
    127e:	d106      	bne.n	128e <HwIoAb_Buttons_MainFunction+0x102>
                        ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_HOLD_PRESS;
    1280:	4b81      	ldr	r3, [pc, #516]	; (1488 <HwIoAb_Buttons_MainFunction+0x2fc>)
    1282:	681a      	ldr	r2, [r3, #0]
    1284:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1288:	4413      	add	r3, r2
    128a:	2203      	movs	r2, #3
    128c:	721a      	strb	r2, [r3, #8]
                    }

                    //Checking if the button is released.
                    if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active  ) {
    128e:	4b7e      	ldr	r3, [pc, #504]	; (1488 <HwIoAb_Buttons_MainFunction+0x2fc>)
    1290:	681b      	ldr	r3, [r3, #0]
    1292:	685a      	ldr	r2, [r3, #4]
    1294:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1298:	00db      	lsls	r3, r3, #3
    129a:	4413      	add	r3, r2
    129c:	881b      	ldrh	r3, [r3, #0]
    129e:	4618      	mov	r0, r3
    12a0:	f007 fa10 	bl	86c4 <Dio_ReadChannel>
    12a4:	4603      	mov	r3, r0
    12a6:	4619      	mov	r1, r3
    12a8:	4b77      	ldr	r3, [pc, #476]	; (1488 <HwIoAb_Buttons_MainFunction+0x2fc>)
    12aa:	681b      	ldr	r3, [r3, #0]
    12ac:	685a      	ldr	r2, [r3, #4]
    12ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    12b2:	00db      	lsls	r3, r3, #3
    12b4:	4413      	add	r3, r2
    12b6:	789b      	ldrb	r3, [r3, #2]
    12b8:	2b00      	cmp	r3, #0
    12ba:	bf0c      	ite	eq
    12bc:	2301      	moveq	r3, #1
    12be:	2300      	movne	r3, #0
    12c0:	b2db      	uxtb	r3, r3
    12c2:	4299      	cmp	r1, r3
    12c4:	f040 80de 	bne.w	1484 <HwIoAb_Buttons_MainFunction+0x2f8>
                        ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_RELEASE;
    12c8:	4b6f      	ldr	r3, [pc, #444]	; (1488 <HwIoAb_Buttons_MainFunction+0x2fc>)
    12ca:	681a      	ldr	r2, [r3, #0]
    12cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    12d0:	4413      	add	r3, r2
    12d2:	2204      	movs	r2, #4
    12d4:	721a      	strb	r2, [r3, #8]
                    }
                break;
    12d6:	e0d5      	b.n	1484 <HwIoAb_Buttons_MainFunction+0x2f8>
        
                case HWIOAB_BTN_STATE_RELEASE :
                    count[i] += HWIOAB_BUTTONS_PERIOD;
    12d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    12dc:	4a6b      	ldr	r2, [pc, #428]	; (148c <HwIoAb_Buttons_MainFunction+0x300>)
    12de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    12e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    12e6:	3232      	adds	r2, #50	; 0x32
    12e8:	4968      	ldr	r1, [pc, #416]	; (148c <HwIoAb_Buttons_MainFunction+0x300>)
    12ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    //Checking count timeout.
                    if ( count[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout ) { //Single click
    12ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    12f2:	4a66      	ldr	r2, [pc, #408]	; (148c <HwIoAb_Buttons_MainFunction+0x300>)
    12f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    12f8:	4b63      	ldr	r3, [pc, #396]	; (1488 <HwIoAb_Buttons_MainFunction+0x2fc>)
    12fa:	681b      	ldr	r3, [r3, #0]
    12fc:	6859      	ldr	r1, [r3, #4]
    12fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1302:	00db      	lsls	r3, r3, #3
    1304:	440b      	add	r3, r1
    1306:	685b      	ldr	r3, [r3, #4]
    1308:	429a      	cmp	r2, r3
    130a:	d10d      	bne.n	1328 <HwIoAb_Buttons_MainFunction+0x19c>
                        ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_SINGLE_CLICK;
    130c:	4b5e      	ldr	r3, [pc, #376]	; (1488 <HwIoAb_Buttons_MainFunction+0x2fc>)
    130e:	681a      	ldr	r2, [r3, #0]
    1310:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1314:	4413      	add	r3, r2
    1316:	2201      	movs	r2, #1
    1318:	72da      	strb	r2, [r3, #11]
                        ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
    131a:	4b5b      	ldr	r3, [pc, #364]	; (1488 <HwIoAb_Buttons_MainFunction+0x2fc>)
    131c:	681a      	ldr	r2, [r3, #0]
    131e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1322:	4413      	add	r3, r2
    1324:	2200      	movs	r2, #0
    1326:	721a      	strb	r2, [r3, #8]
                    }

                    //Checks if the button is pressed.
                    if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active  ) {
    1328:	4b57      	ldr	r3, [pc, #348]	; (1488 <HwIoAb_Buttons_MainFunction+0x2fc>)
    132a:	681b      	ldr	r3, [r3, #0]
    132c:	685a      	ldr	r2, [r3, #4]
    132e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1332:	00db      	lsls	r3, r3, #3
    1334:	4413      	add	r3, r2
    1336:	881b      	ldrh	r3, [r3, #0]
    1338:	4618      	mov	r0, r3
    133a:	f007 f9c3 	bl	86c4 <Dio_ReadChannel>
    133e:	4603      	mov	r3, r0
    1340:	4619      	mov	r1, r3
    1342:	4b51      	ldr	r3, [pc, #324]	; (1488 <HwIoAb_Buttons_MainFunction+0x2fc>)
    1344:	681b      	ldr	r3, [r3, #0]
    1346:	685a      	ldr	r2, [r3, #4]
    1348:	f89d 3007 	ldrb.w	r3, [sp, #7]
    134c:	00db      	lsls	r3, r3, #3
    134e:	4413      	add	r3, r2
    1350:	789b      	ldrb	r3, [r3, #2]
    1352:	4299      	cmp	r1, r3
    1354:	f040 809c 	bne.w	1490 <HwIoAb_Buttons_MainFunction+0x304>
                        count[i] = 0;   //Restarting count.
    1358:	f89d 3007 	ldrb.w	r3, [sp, #7]
    135c:	4a4b      	ldr	r2, [pc, #300]	; (148c <HwIoAb_Buttons_MainFunction+0x300>)
    135e:	2100      	movs	r1, #0
    1360:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                        ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_DOUBLE_PRESS;
    1364:	4b48      	ldr	r3, [pc, #288]	; (1488 <HwIoAb_Buttons_MainFunction+0x2fc>)
    1366:	681a      	ldr	r2, [r3, #0]
    1368:	f89d 3007 	ldrb.w	r3, [sp, #7]
    136c:	4413      	add	r3, r2
    136e:	2202      	movs	r2, #2
    1370:	721a      	strb	r2, [r3, #8]
                    }
                break;
    1372:	e08d      	b.n	1490 <HwIoAb_Buttons_MainFunction+0x304>
        
                case HWIOAB_BTN_STATE_DOUBLE_PRESS :
                    count[i] += HWIOAB_BUTTONS_PERIOD;
    1374:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1378:	4a44      	ldr	r2, [pc, #272]	; (148c <HwIoAb_Buttons_MainFunction+0x300>)
    137a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    137e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1382:	3232      	adds	r2, #50	; 0x32
    1384:	4941      	ldr	r1, [pc, #260]	; (148c <HwIoAb_Buttons_MainFunction+0x300>)
    1386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    //Checking count timeout.
                    if ( count[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout ) {
    138a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    138e:	4a3f      	ldr	r2, [pc, #252]	; (148c <HwIoAb_Buttons_MainFunction+0x300>)
    1390:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1394:	4b3c      	ldr	r3, [pc, #240]	; (1488 <HwIoAb_Buttons_MainFunction+0x2fc>)
    1396:	681b      	ldr	r3, [r3, #0]
    1398:	6859      	ldr	r1, [r3, #4]
    139a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    139e:	00db      	lsls	r3, r3, #3
    13a0:	440b      	add	r3, r1
    13a2:	685b      	ldr	r3, [r3, #4]
    13a4:	429a      	cmp	r2, r3
    13a6:	d106      	bne.n	13b6 <HwIoAb_Buttons_MainFunction+0x22a>
                        ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_HOLD_PRESS;
    13a8:	4b37      	ldr	r3, [pc, #220]	; (1488 <HwIoAb_Buttons_MainFunction+0x2fc>)
    13aa:	681a      	ldr	r2, [r3, #0]
    13ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    13b0:	4413      	add	r3, r2
    13b2:	2203      	movs	r2, #3
    13b4:	721a      	strb	r2, [r3, #8]
                    }

                    //Checking if the button is released.
                    if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active ) {  //Double click.
    13b6:	4b34      	ldr	r3, [pc, #208]	; (1488 <HwIoAb_Buttons_MainFunction+0x2fc>)
    13b8:	681b      	ldr	r3, [r3, #0]
    13ba:	685a      	ldr	r2, [r3, #4]
    13bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    13c0:	00db      	lsls	r3, r3, #3
    13c2:	4413      	add	r3, r2
    13c4:	881b      	ldrh	r3, [r3, #0]
    13c6:	4618      	mov	r0, r3
    13c8:	f007 f97c 	bl	86c4 <Dio_ReadChannel>
    13cc:	4603      	mov	r3, r0
    13ce:	4619      	mov	r1, r3
    13d0:	4b2d      	ldr	r3, [pc, #180]	; (1488 <HwIoAb_Buttons_MainFunction+0x2fc>)
    13d2:	681b      	ldr	r3, [r3, #0]
    13d4:	685a      	ldr	r2, [r3, #4]
    13d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    13da:	00db      	lsls	r3, r3, #3
    13dc:	4413      	add	r3, r2
    13de:	789b      	ldrb	r3, [r3, #2]
    13e0:	2b00      	cmp	r3, #0
    13e2:	bf0c      	ite	eq
    13e4:	2301      	moveq	r3, #1
    13e6:	2300      	movne	r3, #0
    13e8:	b2db      	uxtb	r3, r3
    13ea:	4299      	cmp	r1, r3
    13ec:	d152      	bne.n	1494 <HwIoAb_Buttons_MainFunction+0x308>
                        ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_DOUBLE_CLICK;
    13ee:	4b26      	ldr	r3, [pc, #152]	; (1488 <HwIoAb_Buttons_MainFunction+0x2fc>)
    13f0:	681a      	ldr	r2, [r3, #0]
    13f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    13f6:	4413      	add	r3, r2
    13f8:	2202      	movs	r2, #2
    13fa:	72da      	strb	r2, [r3, #11]
                        ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
    13fc:	4b22      	ldr	r3, [pc, #136]	; (1488 <HwIoAb_Buttons_MainFunction+0x2fc>)
    13fe:	681a      	ldr	r2, [r3, #0]
    1400:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1404:	4413      	add	r3, r2
    1406:	2200      	movs	r2, #0
    1408:	721a      	strb	r2, [r3, #8]
                    }
                break;
    140a:	e043      	b.n	1494 <HwIoAb_Buttons_MainFunction+0x308>
        
                case HWIOAB_BTN_STATE_HOLD_PRESS :  //Hold click.
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_HOLD_CLICK;
    140c:	4b1e      	ldr	r3, [pc, #120]	; (1488 <HwIoAb_Buttons_MainFunction+0x2fc>)
    140e:	681a      	ldr	r2, [r3, #0]
    1410:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1414:	4413      	add	r3, r2
    1416:	2203      	movs	r2, #3
    1418:	72da      	strb	r2, [r3, #11]
                    //Checking if the button is released.
                    if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active ) {
    141a:	4b1b      	ldr	r3, [pc, #108]	; (1488 <HwIoAb_Buttons_MainFunction+0x2fc>)
    141c:	681b      	ldr	r3, [r3, #0]
    141e:	685a      	ldr	r2, [r3, #4]
    1420:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1424:	00db      	lsls	r3, r3, #3
    1426:	4413      	add	r3, r2
    1428:	881b      	ldrh	r3, [r3, #0]
    142a:	4618      	mov	r0, r3
    142c:	f007 f94a 	bl	86c4 <Dio_ReadChannel>
    1430:	4603      	mov	r3, r0
    1432:	4619      	mov	r1, r3
    1434:	4b14      	ldr	r3, [pc, #80]	; (1488 <HwIoAb_Buttons_MainFunction+0x2fc>)
    1436:	681b      	ldr	r3, [r3, #0]
    1438:	685a      	ldr	r2, [r3, #4]
    143a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    143e:	00db      	lsls	r3, r3, #3
    1440:	4413      	add	r3, r2
    1442:	789b      	ldrb	r3, [r3, #2]
    1444:	2b00      	cmp	r3, #0
    1446:	bf0c      	ite	eq
    1448:	2301      	moveq	r3, #1
    144a:	2300      	movne	r3, #0
    144c:	b2db      	uxtb	r3, r3
    144e:	4299      	cmp	r1, r3
    1450:	d122      	bne.n	1498 <HwIoAb_Buttons_MainFunction+0x30c>
                        ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_RELEASE;
    1452:	4b0d      	ldr	r3, [pc, #52]	; (1488 <HwIoAb_Buttons_MainFunction+0x2fc>)
    1454:	681a      	ldr	r2, [r3, #0]
    1456:	f89d 3007 	ldrb.w	r3, [sp, #7]
    145a:	4413      	add	r3, r2
    145c:	2204      	movs	r2, #4
    145e:	72da      	strb	r2, [r3, #11]
                        ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
    1460:	4b09      	ldr	r3, [pc, #36]	; (1488 <HwIoAb_Buttons_MainFunction+0x2fc>)
    1462:	681a      	ldr	r2, [r3, #0]
    1464:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1468:	4413      	add	r3, r2
    146a:	2200      	movs	r2, #0
    146c:	721a      	strb	r2, [r3, #8]
                    }
                break;
    146e:	e013      	b.n	1498 <HwIoAb_Buttons_MainFunction+0x30c>
        
                default: //Invalid state
                    #if ( HWIOAB_BUTTONS_DEV_ERROR_DETECT == STD_ON )
                        Det_ReportError( HWIOAB_BUTTONS_MODULE_ID, HWIOAB_BUTTONS_INSTANCE_ID, HWIOAB_BUTTONS_MAINFUNCTION_ID, HWIOAB_BUTTONS_E_STATE );
    1470:	2302      	movs	r3, #2
    1472:	2202      	movs	r2, #2
    1474:	2100      	movs	r1, #0
    1476:	f240 102d 	movw	r0, #301	; 0x12d
    147a:	f016 ffcb 	bl	18414 <Det_ReportError>
                    #endif
                break;
    147e:	e00c      	b.n	149a <HwIoAb_Buttons_MainFunction+0x30e>
                break;
    1480:	bf00      	nop
    1482:	e00a      	b.n	149a <HwIoAb_Buttons_MainFunction+0x30e>
                break;
    1484:	bf00      	nop
    1486:	e008      	b.n	149a <HwIoAb_Buttons_MainFunction+0x30e>
    1488:	1fff8b60 	.word	0x1fff8b60
    148c:	1fff97a8 	.word	0x1fff97a8
                break;
    1490:	bf00      	nop
    1492:	e002      	b.n	149a <HwIoAb_Buttons_MainFunction+0x30e>
                break;
    1494:	bf00      	nop
    1496:	e000      	b.n	149a <HwIoAb_Buttons_MainFunction+0x30e>
                break;
    1498:	bf00      	nop
        for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) { //Executing state machine for each button.
    149a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    149e:	3301      	adds	r3, #1
    14a0:	f88d 3007 	strb.w	r3, [sp, #7]
    14a4:	4b05      	ldr	r3, [pc, #20]	; (14bc <HwIoAb_Buttons_MainFunction+0x330>)
    14a6:	681b      	ldr	r3, [r3, #0]
    14a8:	781b      	ldrb	r3, [r3, #0]
    14aa:	f89d 2007 	ldrb.w	r2, [sp, #7]
    14ae:	429a      	cmp	r2, r3
    14b0:	f4ff ae8f 	bcc.w	11d2 <HwIoAb_Buttons_MainFunction+0x46>
            }
        }
    }
}
    14b4:	bf00      	nop
    14b6:	b003      	add	sp, #12
    14b8:	f85d fb04 	ldr.w	pc, [sp], #4
    14bc:	1fff8b60 	.word	0x1fff8b60

000014c0 <HwIoAb_Leds_Init>:
/**
 * @brief This function initialices the control structure for the leds.
 * 
 * @param [in] Leds_Config Pointer to configuration array.
 */
void HwIoAb_Leds_Init( const HwIoAb_Leds_Config *Leds_Config ) {
    14c0:	b500      	push	{lr}
    14c2:	b085      	sub	sp, #20
    14c4:	9001      	str	r0, [sp, #4]
    //local data.
    uint8 status = E_OK;
    14c6:	2300      	movs	r3, #0
    14c8:	f88d 300f 	strb.w	r3, [sp, #15]
    
    #if ( HWIOAB_LEDS_DEV_ERROR_DETECT == STD_ON )
        if ( Leds_Config == NULL_PTR ) {
    14cc:	9b01      	ldr	r3, [sp, #4]
    14ce:	2b00      	cmp	r3, #0
    14d0:	d109      	bne.n	14e6 <HwIoAb_Leds_Init+0x26>
            Det_ReportError( HWIOAB_LEDS_MODULE_ID, HWIOAB_LEDS_INSTANCE_ID, HWIOAB_LEDS_INIT_ID, HWIOAB_LEDS_E_CONFIG );
    14d2:	2300      	movs	r3, #0
    14d4:	2200      	movs	r2, #0
    14d6:	2100      	movs	r1, #0
    14d8:	f44f 7097 	mov.w	r0, #302	; 0x12e
    14dc:	f016 ff9a 	bl	18414 <Det_ReportError>
            status = E_NOT_OK;
    14e0:	2301      	movs	r3, #1
    14e2:	f88d 300f 	strb.w	r3, [sp, #15]
        }
    #endif
    
    if ( status == E_OK ) {
    14e6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    14ea:	2b00      	cmp	r3, #0
    14ec:	d10b      	bne.n	1506 <HwIoAb_Leds_Init+0x46>
        //Initializing members.
        LedsControl_Ptr->Leds = HWIOAB_LEDS;
    14ee:	4b08      	ldr	r3, [pc, #32]	; (1510 <HwIoAb_Leds_Init+0x50>)
    14f0:	681b      	ldr	r3, [r3, #0]
    14f2:	2203      	movs	r2, #3
    14f4:	701a      	strb	r2, [r3, #0]
        LedsControl_Ptr->LedsConfig_Ptr = Leds_Config;
    14f6:	4b06      	ldr	r3, [pc, #24]	; (1510 <HwIoAb_Leds_Init+0x50>)
    14f8:	681b      	ldr	r3, [r3, #0]
    14fa:	9a01      	ldr	r2, [sp, #4]
    14fc:	605a      	str	r2, [r3, #4]
        LedsControl_Ptr->Leds_init = TRUE;
    14fe:	4b04      	ldr	r3, [pc, #16]	; (1510 <HwIoAb_Leds_Init+0x50>)
    1500:	681b      	ldr	r3, [r3, #0]
    1502:	2201      	movs	r2, #1
    1504:	721a      	strb	r2, [r3, #8]
    }
}
    1506:	bf00      	nop
    1508:	b005      	add	sp, #20
    150a:	f85d fb04 	ldr.w	pc, [sp], #4
    150e:	bf00      	nop
    1510:	1fff8b64 	.word	0x1fff8b64

00001514 <HwIoAb_Leds_TurnToggle>:
 * 
 * @param Led Led ID.
 * 
 * @note The led ID must be valid.
 */
void HwIoAb_Leds_TurnToggle( uint8 Led ) {
    1514:	b500      	push	{lr}
    1516:	b085      	sub	sp, #20
    1518:	4603      	mov	r3, r0
    151a:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data.
    uint8 status = E_OK;    
    151e:	2300      	movs	r3, #0
    1520:	f88d 300f 	strb.w	r3, [sp, #15]

    #if ( HWIOAB_LEDS_DEV_ERROR_DETECT == STD_ON )
        if ( LedsControl_Ptr->Leds_init == FALSE ) {
    1524:	4b1a      	ldr	r3, [pc, #104]	; (1590 <HwIoAb_Leds_TurnToggle+0x7c>)
    1526:	681b      	ldr	r3, [r3, #0]
    1528:	7a1b      	ldrb	r3, [r3, #8]
    152a:	f083 0301 	eor.w	r3, r3, #1
    152e:	b2db      	uxtb	r3, r3
    1530:	2b00      	cmp	r3, #0
    1532:	d009      	beq.n	1548 <HwIoAb_Leds_TurnToggle+0x34>
            Det_ReportError( HWIOAB_LEDS_MODULE_ID, HWIOAB_LEDS_INSTANCE_ID, HWIOAB_LEDS_TURNTOGGLE_ID, HWIOAB_LEDS_E_UNINIT );
    1534:	2302      	movs	r3, #2
    1536:	2203      	movs	r2, #3
    1538:	2100      	movs	r1, #0
    153a:	f44f 7097 	mov.w	r0, #302	; 0x12e
    153e:	f016 ff69 	bl	18414 <Det_ReportError>
            status = E_NOT_OK;
    1542:	2301      	movs	r3, #1
    1544:	f88d 300f 	strb.w	r3, [sp, #15]
        }

        if ( Led > LedsControl_Ptr->Leds - 1 ) {
    1548:	4b11      	ldr	r3, [pc, #68]	; (1590 <HwIoAb_Leds_TurnToggle+0x7c>)
    154a:	681b      	ldr	r3, [r3, #0]
    154c:	781b      	ldrb	r3, [r3, #0]
    154e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1552:	429a      	cmp	r2, r3
    1554:	d309      	bcc.n	156a <HwIoAb_Leds_TurnToggle+0x56>
            Det_ReportError( HWIOAB_LEDS_MODULE_ID, HWIOAB_LEDS_INSTANCE_ID, HWIOAB_LEDS_TURNTOGGLE_ID, HWIOAB_LEDS_E_LED_ID );
    1556:	2301      	movs	r3, #1
    1558:	2203      	movs	r2, #3
    155a:	2100      	movs	r1, #0
    155c:	f44f 7097 	mov.w	r0, #302	; 0x12e
    1560:	f016 ff58 	bl	18414 <Det_ReportError>
            status = E_NOT_OK;
    1564:	2301      	movs	r3, #1
    1566:	f88d 300f 	strb.w	r3, [sp, #15]
        }
    #endif

    if ( status == E_OK ) {
    156a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    156e:	2b00      	cmp	r3, #0
    1570:	d10a      	bne.n	1588 <HwIoAb_Leds_TurnToggle+0x74>
        Dio_FlipChannel( LedsControl_Ptr->LedsConfig_Ptr[ Led ].Led );
    1572:	4b07      	ldr	r3, [pc, #28]	; (1590 <HwIoAb_Leds_TurnToggle+0x7c>)
    1574:	681b      	ldr	r3, [r3, #0]
    1576:	685a      	ldr	r2, [r3, #4]
    1578:	f89d 3007 	ldrb.w	r3, [sp, #7]
    157c:	009b      	lsls	r3, r3, #2
    157e:	4413      	add	r3, r2
    1580:	881b      	ldrh	r3, [r3, #0]
    1582:	4618      	mov	r0, r3
    1584:	f007 f8ef 	bl	8766 <Dio_FlipChannel>
    }
}
    1588:	bf00      	nop
    158a:	b005      	add	sp, #20
    158c:	f85d fb04 	ldr.w	pc, [sp], #4
    1590:	1fff8b64 	.word	0x1fff8b64

00001594 <HwIoAb_Pots_Init>:
 * 
 * It calibrates both ADC modules and initialices the raw results arrays for the conversions.
 * 
 * @param Pots_Config Pointer to configuration structure instance, in this case is not use. 
 */
void HwIoAb_Pots_Init( const HwIoAb_Pots_Config *Pots_Config ) {
    1594:	b500      	push	{lr}
    1596:	b085      	sub	sp, #20
    1598:	9001      	str	r0, [sp, #4]
    //local data.
    Adc_CalibrationStatusType Calib_Status_ADC0;
    Adc_CalibrationStatusType Calib_Status_ADC1;

    //Calibrating ADC modules.
    Adc_Calibrate( Adc0, &Calib_Status_ADC0 );
    159a:	ab03      	add	r3, sp, #12
    159c:	4619      	mov	r1, r3
    159e:	2000      	movs	r0, #0
    15a0:	f009 f837 	bl	a612 <Adc_Calibrate>
    Adc_Calibrate( Adc1, &Calib_Status_ADC1 );
    15a4:	ab02      	add	r3, sp, #8
    15a6:	4619      	mov	r1, r3
    15a8:	2001      	movs	r0, #1
    15aa:	f009 f832 	bl	a612 <Adc_Calibrate>

    //Initializing raw results array.
    Adc_SetupResultBuffer( Adc0Group_0, HWIOAB_POTS_MAIN_RAW_RESULTS );
    15ae:	4b0d      	ldr	r3, [pc, #52]	; (15e4 <HwIoAb_Pots_Init+0x50>)
    15b0:	681b      	ldr	r3, [r3, #0]
    15b2:	3302      	adds	r3, #2
    15b4:	4619      	mov	r1, r3
    15b6:	2000      	movs	r0, #0
    15b8:	f008 fd24 	bl	a004 <Adc_SetupResultBuffer>
    Adc_SetupResultBuffer( Adc1Group_0, HWIOAB_POTS_ALTER_RAW_RESULTS );
    15bc:	4b09      	ldr	r3, [pc, #36]	; (15e4 <HwIoAb_Pots_Init+0x50>)
    15be:	681b      	ldr	r3, [r3, #0]
    15c0:	3306      	adds	r3, #6
    15c2:	4619      	mov	r1, r3
    15c4:	2001      	movs	r0, #1
    15c6:	f008 fd1d 	bl	a004 <Adc_SetupResultBuffer>

    PotsControl_Ptr->Pots = HWIOAB_POTS;
    15ca:	4b06      	ldr	r3, [pc, #24]	; (15e4 <HwIoAb_Pots_Init+0x50>)
    15cc:	681b      	ldr	r3, [r3, #0]
    15ce:	2202      	movs	r2, #2
    15d0:	701a      	strb	r2, [r3, #0]
    PotsControl_Ptr->Pots_init = TRUE;
    15d2:	4b04      	ldr	r3, [pc, #16]	; (15e4 <HwIoAb_Pots_Init+0x50>)
    15d4:	681b      	ldr	r3, [r3, #0]
    15d6:	2201      	movs	r2, #1
    15d8:	749a      	strb	r2, [r3, #18]
}
    15da:	bf00      	nop
    15dc:	b005      	add	sp, #20
    15de:	f85d fb04 	ldr.w	pc, [sp], #4
    15e2:	bf00      	nop
    15e4:	1fff8b68 	.word	0x1fff8b68

000015e8 <HwIoAb_Pots_GetValue>:
 * @param Pots Pointer to array of results in Ohms.
 * 
 * @note The group uses hardware average of 4 samples. 
 * @note The total conversion time is 117.42us
 */
void HwIoAb_Pots_GetValue( uint16 *Pots ) {
    15e8:	b500      	push	{lr}
    15ea:	b085      	sub	sp, #20
    15ec:	9001      	str	r0, [sp, #4]
    //local data.
    uint8 i = 0;
    15ee:	2300      	movs	r3, #0
    15f0:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 status = E_OK;
    15f4:	2300      	movs	r3, #0
    15f6:	f88d 300e 	strb.w	r3, [sp, #14]

    #if ( HWIOAB_POTS_DEV_ERROR_DETECT == STD_ON )
        if ( PotsControl_Ptr->Pots_init == FALSE ) {
    15fa:	4b3c      	ldr	r3, [pc, #240]	; (16ec <HwIoAb_Pots_GetValue+0x104>)
    15fc:	681b      	ldr	r3, [r3, #0]
    15fe:	7c9b      	ldrb	r3, [r3, #18]
    1600:	f083 0301 	eor.w	r3, r3, #1
    1604:	b2db      	uxtb	r3, r3
    1606:	2b00      	cmp	r3, #0
    1608:	d009      	beq.n	161e <HwIoAb_Pots_GetValue+0x36>
            Det_ReportError( HWIOAB_POTS_MODULE_ID, HWIOAB_POTS_INSTANCE_ID, HWIOAB_POTS_GETVALUE_ID, HWIOAB_POTS_E_UNINIT );
    160a:	2301      	movs	r3, #1
    160c:	2201      	movs	r2, #1
    160e:	2100      	movs	r1, #0
    1610:	f240 102f 	movw	r0, #303	; 0x12f
    1614:	f016 fefe 	bl	18414 <Det_ReportError>
            status = E_NOT_OK;
    1618:	2301      	movs	r3, #1
    161a:	f88d 300e 	strb.w	r3, [sp, #14]
        }

        if ( Pots == NULL_PTR ) {
    161e:	9b01      	ldr	r3, [sp, #4]
    1620:	2b00      	cmp	r3, #0
    1622:	d109      	bne.n	1638 <HwIoAb_Pots_GetValue+0x50>
            Det_ReportError( HWIOAB_POTS_MODULE_ID, HWIOAB_POTS_INSTANCE_ID, HWIOAB_POTS_GETVALUE_ID, HWIOAB_POTS_E_PARAM );
    1624:	2300      	movs	r3, #0
    1626:	2201      	movs	r2, #1
    1628:	2100      	movs	r1, #0
    162a:	f240 102f 	movw	r0, #303	; 0x12f
    162e:	f016 fef1 	bl	18414 <Det_ReportError>
            status = E_NOT_OK;
    1632:	2301      	movs	r3, #1
    1634:	f88d 300e 	strb.w	r3, [sp, #14]
        }
    #endif

    if ( status == E_OK ) {
    1638:	f89d 300e 	ldrb.w	r3, [sp, #14]
    163c:	2b00      	cmp	r3, #0
    163e:	d150      	bne.n	16e2 <HwIoAb_Pots_GetValue+0xfa>
        Adc_StartGroupConversion( Adc0Group_0 );    //Triggering group conversion.
    1640:	2000      	movs	r0, #0
    1642:	f008 fdad 	bl	a1a0 <Adc_StartGroupConversion>
        while( Adc_GetGroupStatus( Adc0Group_0 ) == ADC_BUSY ); //Wating until group conversion is done.
    1646:	bf00      	nop
    1648:	2000      	movs	r0, #0
    164a:	f008 fec9 	bl	a3e0 <Adc_GetGroupStatus>
    164e:	4603      	mov	r3, r0
    1650:	2b01      	cmp	r3, #1
    1652:	d0f9      	beq.n	1648 <HwIoAb_Pots_GetValue+0x60>
        Adc_ReadGroup( Adc0Group_0, HWIOAB_POTS_MAIN_RAW_RESULTS ); //Reading group conversion values and storing them to the raw result array.
    1654:	4b25      	ldr	r3, [pc, #148]	; (16ec <HwIoAb_Pots_GetValue+0x104>)
    1656:	681b      	ldr	r3, [r3, #0]
    1658:	3302      	adds	r3, #2
    165a:	4619      	mov	r1, r3
    165c:	2000      	movs	r0, #0
    165e:	f008 fe67 	bl	a330 <Adc_ReadGroup>

        //Calculating resistance of each Pot.
        for ( i = 0; i < PotsControl_Ptr->Pots; i++ ) {
    1662:	2300      	movs	r3, #0
    1664:	f88d 300f 	strb.w	r3, [sp, #15]
    1668:	e034      	b.n	16d4 <HwIoAb_Pots_GetValue+0xec>
            Pots[i] = HWIOAB_POTS_TOTAL_RESISTANCE * 
            ( ( float ) PotsControl_Ptr->Raw_results_main[i] / HWIOAB_MAX_ADC_VALUE_12_B );
    166a:	4b20      	ldr	r3, [pc, #128]	; (16ec <HwIoAb_Pots_GetValue+0x104>)
    166c:	681a      	ldr	r2, [r3, #0]
    166e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1672:	005b      	lsls	r3, r3, #1
    1674:	4413      	add	r3, r2
    1676:	885b      	ldrh	r3, [r3, #2]
    1678:	ee07 3a90 	vmov	s15, r3
    167c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    1680:	eddf 6a1b 	vldr	s13, [pc, #108]	; 16f0 <HwIoAb_Pots_GetValue+0x108>
    1684:	eec7 7a26 	vdiv.f32	s15, s14, s13
            Pots[i] = HWIOAB_POTS_TOTAL_RESISTANCE * 
    1688:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 16f4 <HwIoAb_Pots_GetValue+0x10c>
    168c:	ee67 7a87 	vmul.f32	s15, s15, s14
    1690:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1694:	005b      	lsls	r3, r3, #1
    1696:	9a01      	ldr	r2, [sp, #4]
    1698:	4413      	add	r3, r2
    169a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    169e:	ee17 2a90 	vmov	r2, s15
    16a2:	b292      	uxth	r2, r2
    16a4:	801a      	strh	r2, [r3, #0]

            if ( Pots[i] > HWIOAB_POTS_TOTAL_RESISTANCE ) { //Saturating value if needed.
    16a6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    16aa:	005b      	lsls	r3, r3, #1
    16ac:	9a01      	ldr	r2, [sp, #4]
    16ae:	4413      	add	r3, r2
    16b0:	881b      	ldrh	r3, [r3, #0]
    16b2:	f242 7210 	movw	r2, #10000	; 0x2710
    16b6:	4293      	cmp	r3, r2
    16b8:	d907      	bls.n	16ca <HwIoAb_Pots_GetValue+0xe2>
                Pots[i] = HWIOAB_POTS_TOTAL_RESISTANCE;
    16ba:	f89d 300f 	ldrb.w	r3, [sp, #15]
    16be:	005b      	lsls	r3, r3, #1
    16c0:	9a01      	ldr	r2, [sp, #4]
    16c2:	4413      	add	r3, r2
    16c4:	f242 7210 	movw	r2, #10000	; 0x2710
    16c8:	801a      	strh	r2, [r3, #0]
        for ( i = 0; i < PotsControl_Ptr->Pots; i++ ) {
    16ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
    16ce:	3301      	adds	r3, #1
    16d0:	f88d 300f 	strb.w	r3, [sp, #15]
    16d4:	4b05      	ldr	r3, [pc, #20]	; (16ec <HwIoAb_Pots_GetValue+0x104>)
    16d6:	681b      	ldr	r3, [r3, #0]
    16d8:	781b      	ldrb	r3, [r3, #0]
    16da:	f89d 200f 	ldrb.w	r2, [sp, #15]
    16de:	429a      	cmp	r2, r3
    16e0:	d3c3      	bcc.n	166a <HwIoAb_Pots_GetValue+0x82>
            }
        }
    }
}
    16e2:	bf00      	nop
    16e4:	b005      	add	sp, #20
    16e6:	f85d fb04 	ldr.w	pc, [sp], #4
    16ea:	bf00      	nop
    16ec:	1fff8b68 	.word	0x1fff8b68
    16f0:	45310000 	.word	0x45310000
    16f4:	461c4000 	.word	0x461c4000

000016f8 <HwIoAb_Pots_GetAltValue>:
 * @param AltPots Pointer to array of results in Ohms.
 * 
 * @note The group uses hardware average of 4 samples.
 * @note The total conversion time is 117.42us
 */
void HwIoAb_Pots_GetAltValue( uint16 *AltPots ) {
    16f8:	b500      	push	{lr}
    16fa:	b085      	sub	sp, #20
    16fc:	9001      	str	r0, [sp, #4]
    //local data.
    uint8 i = 0;
    16fe:	2300      	movs	r3, #0
    1700:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 status = E_OK;
    1704:	2300      	movs	r3, #0
    1706:	f88d 300e 	strb.w	r3, [sp, #14]

    #if ( HWIOAB_POTS_DEV_ERROR_DETECT == STD_ON )
        if ( PotsControl_Ptr->Pots_init == FALSE ) {
    170a:	4b3c      	ldr	r3, [pc, #240]	; (17fc <HwIoAb_Pots_GetAltValue+0x104>)
    170c:	681b      	ldr	r3, [r3, #0]
    170e:	7c9b      	ldrb	r3, [r3, #18]
    1710:	f083 0301 	eor.w	r3, r3, #1
    1714:	b2db      	uxtb	r3, r3
    1716:	2b00      	cmp	r3, #0
    1718:	d009      	beq.n	172e <HwIoAb_Pots_GetAltValue+0x36>
            Det_ReportError( HWIOAB_POTS_MODULE_ID, HWIOAB_POTS_INSTANCE_ID, HWIOAB_POTS_GETALTVALUE_ID, HWIOAB_POTS_E_UNINIT );
    171a:	2301      	movs	r3, #1
    171c:	2202      	movs	r2, #2
    171e:	2100      	movs	r1, #0
    1720:	f240 102f 	movw	r0, #303	; 0x12f
    1724:	f016 fe76 	bl	18414 <Det_ReportError>
            status = E_NOT_OK;
    1728:	2301      	movs	r3, #1
    172a:	f88d 300e 	strb.w	r3, [sp, #14]
        }

        if ( AltPots == NULL_PTR ) {
    172e:	9b01      	ldr	r3, [sp, #4]
    1730:	2b00      	cmp	r3, #0
    1732:	d109      	bne.n	1748 <HwIoAb_Pots_GetAltValue+0x50>
            Det_ReportError( HWIOAB_POTS_MODULE_ID, HWIOAB_POTS_INSTANCE_ID, HWIOAB_POTS_GETALTVALUE_ID, HWIOAB_POTS_E_PARAM );
    1734:	2300      	movs	r3, #0
    1736:	2202      	movs	r2, #2
    1738:	2100      	movs	r1, #0
    173a:	f240 102f 	movw	r0, #303	; 0x12f
    173e:	f016 fe69 	bl	18414 <Det_ReportError>
            status = E_NOT_OK;
    1742:	2301      	movs	r3, #1
    1744:	f88d 300e 	strb.w	r3, [sp, #14]
        }
    #endif

    if ( status == E_OK ) {
    1748:	f89d 300e 	ldrb.w	r3, [sp, #14]
    174c:	2b00      	cmp	r3, #0
    174e:	d150      	bne.n	17f2 <HwIoAb_Pots_GetAltValue+0xfa>
        Adc_StartGroupConversion( Adc1Group_0 );    //Triggering group conversion.
    1750:	2001      	movs	r0, #1
    1752:	f008 fd25 	bl	a1a0 <Adc_StartGroupConversion>
        while( Adc_GetGroupStatus( Adc1Group_0 ) == ADC_BUSY ); //Wating until group conversion is done.
    1756:	bf00      	nop
    1758:	2001      	movs	r0, #1
    175a:	f008 fe41 	bl	a3e0 <Adc_GetGroupStatus>
    175e:	4603      	mov	r3, r0
    1760:	2b01      	cmp	r3, #1
    1762:	d0f9      	beq.n	1758 <HwIoAb_Pots_GetAltValue+0x60>
        Adc_ReadGroup( Adc1Group_0, HWIOAB_POTS_ALTER_RAW_RESULTS ); //Reading group conversion values and storing them to the raw result array.
    1764:	4b25      	ldr	r3, [pc, #148]	; (17fc <HwIoAb_Pots_GetAltValue+0x104>)
    1766:	681b      	ldr	r3, [r3, #0]
    1768:	3306      	adds	r3, #6
    176a:	4619      	mov	r1, r3
    176c:	2001      	movs	r0, #1
    176e:	f008 fddf 	bl	a330 <Adc_ReadGroup>

        //Calculating resistance of each Pot.
        for ( i = 0; i < PotsControl_Ptr->Pots; i++ ) {
    1772:	2300      	movs	r3, #0
    1774:	f88d 300f 	strb.w	r3, [sp, #15]
    1778:	e034      	b.n	17e4 <HwIoAb_Pots_GetAltValue+0xec>
            AltPots[i] = HWIOAB_POTS_TOTAL_RESISTANCE *
            ( ( float ) PotsControl_Ptr->Raw_results_alter[i] / HWIOAB_MAX_ADC_VALUE_12_B );
    177a:	4b20      	ldr	r3, [pc, #128]	; (17fc <HwIoAb_Pots_GetAltValue+0x104>)
    177c:	681a      	ldr	r2, [r3, #0]
    177e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1782:	005b      	lsls	r3, r3, #1
    1784:	4413      	add	r3, r2
    1786:	88db      	ldrh	r3, [r3, #6]
    1788:	ee07 3a90 	vmov	s15, r3
    178c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    1790:	eddf 6a1b 	vldr	s13, [pc, #108]	; 1800 <HwIoAb_Pots_GetAltValue+0x108>
    1794:	eec7 7a26 	vdiv.f32	s15, s14, s13
            AltPots[i] = HWIOAB_POTS_TOTAL_RESISTANCE *
    1798:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 1804 <HwIoAb_Pots_GetAltValue+0x10c>
    179c:	ee67 7a87 	vmul.f32	s15, s15, s14
    17a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    17a4:	005b      	lsls	r3, r3, #1
    17a6:	9a01      	ldr	r2, [sp, #4]
    17a8:	4413      	add	r3, r2
    17aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    17ae:	ee17 2a90 	vmov	r2, s15
    17b2:	b292      	uxth	r2, r2
    17b4:	801a      	strh	r2, [r3, #0]

            if ( AltPots[i] > HWIOAB_POTS_TOTAL_RESISTANCE ) { //Saturating value if needed.
    17b6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    17ba:	005b      	lsls	r3, r3, #1
    17bc:	9a01      	ldr	r2, [sp, #4]
    17be:	4413      	add	r3, r2
    17c0:	881b      	ldrh	r3, [r3, #0]
    17c2:	f242 7210 	movw	r2, #10000	; 0x2710
    17c6:	4293      	cmp	r3, r2
    17c8:	d907      	bls.n	17da <HwIoAb_Pots_GetAltValue+0xe2>
                AltPots[i] = HWIOAB_POTS_TOTAL_RESISTANCE;
    17ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
    17ce:	005b      	lsls	r3, r3, #1
    17d0:	9a01      	ldr	r2, [sp, #4]
    17d2:	4413      	add	r3, r2
    17d4:	f242 7210 	movw	r2, #10000	; 0x2710
    17d8:	801a      	strh	r2, [r3, #0]
        for ( i = 0; i < PotsControl_Ptr->Pots; i++ ) {
    17da:	f89d 300f 	ldrb.w	r3, [sp, #15]
    17de:	3301      	adds	r3, #1
    17e0:	f88d 300f 	strb.w	r3, [sp, #15]
    17e4:	4b05      	ldr	r3, [pc, #20]	; (17fc <HwIoAb_Pots_GetAltValue+0x104>)
    17e6:	681b      	ldr	r3, [r3, #0]
    17e8:	781b      	ldrb	r3, [r3, #0]
    17ea:	f89d 200f 	ldrb.w	r2, [sp, #15]
    17ee:	429a      	cmp	r2, r3
    17f0:	d3c3      	bcc.n	177a <HwIoAb_Pots_GetAltValue+0x82>
            }
        }
    }
    17f2:	bf00      	nop
    17f4:	b005      	add	sp, #20
    17f6:	f85d fb04 	ldr.w	pc, [sp], #4
    17fa:	bf00      	nop
    17fc:	1fff8b68 	.word	0x1fff8b68
    1800:	45310000 	.word	0x45310000
    1804:	461c4000 	.word	0x461c4000

00001808 <HwIoAb_Buzzer_Init>:
 * It does the configurations neccesary for using the buzzer.
 * In this case no configurations are needeed.
 * 
 * @param Buzzer_Config Pointer to config structure instance, in this case is not use.
 */
void HwIoAb_Buzzer_Init( const HwIoAb_Buzzer_Config *Buzzer_Config ) {
    1808:	b082      	sub	sp, #8
    180a:	9001      	str	r0, [sp, #4]

}
    180c:	bf00      	nop
    180e:	b002      	add	sp, #8
    1810:	4770      	bx	lr

00001812 <HwIoAb_Buzzer_Beep>:
/**
 * @brief This function beeps the buzzer according to the tone given.
 * 
 * @param Tone Tone of interest.
 */
void HwIoAb_Buzzer_Beep( uint8 Tone ) {
    1812:	b500      	push	{lr}
    1814:	b083      	sub	sp, #12
    1816:	4603      	mov	r3, r0
    1818:	f88d 3007 	strb.w	r3, [sp, #7]
    switch ( Tone ) {
    181c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1820:	2b02      	cmp	r3, #2
    1822:	d016      	beq.n	1852 <HwIoAb_Buzzer_Beep+0x40>
    1824:	2b02      	cmp	r3, #2
    1826:	dc1c      	bgt.n	1862 <HwIoAb_Buzzer_Beep+0x50>
    1828:	2b00      	cmp	r3, #0
    182a:	d002      	beq.n	1832 <HwIoAb_Buzzer_Beep+0x20>
    182c:	2b01      	cmp	r3, #1
    182e:	d008      	beq.n	1842 <HwIoAb_Buzzer_Beep+0x30>
    1830:	e017      	b.n	1862 <HwIoAb_Buzzer_Beep+0x50>
        case HWIOAB_BUZZER_TONE_1:  //Setting frequency to 1.5Khz and 25% duty cycle.
            Pwm_SetPeriodAndDuty( HWIOAB_BUZZER_CH, HWIOAB_BUZZER_PERIOD_1, HWIOAB_BUZZER_25_DUTY_CYCLE );
    1832:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    1836:	f241 41d5 	movw	r1, #5333	; 0x14d5
    183a:	2000      	movs	r0, #0
    183c:	f00f fcd4 	bl	111e8 <Pwm_SetPeriodAndDuty>
        break;
    1840:	e017      	b.n	1872 <HwIoAb_Buzzer_Beep+0x60>
        case HWIOAB_BUZZER_TONE_2:  //Setting frequency to 3Khz and 25% duty cycle.
            Pwm_SetPeriodAndDuty( HWIOAB_BUZZER_CH, HWIOAB_BUZZER_PERIOD_2, HWIOAB_BUZZER_25_DUTY_CYCLE );
    1842:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    1846:	f640 216a 	movw	r1, #2666	; 0xa6a
    184a:	2000      	movs	r0, #0
    184c:	f00f fccc 	bl	111e8 <Pwm_SetPeriodAndDuty>
        break;
    1850:	e00f      	b.n	1872 <HwIoAb_Buzzer_Beep+0x60>
        case HWIOAB_BUZZER_TONE_3:  //Setting frequency to 5Khz and 25% duty cycle.
            Pwm_SetPeriodAndDuty( HWIOAB_BUZZER_CH, HWIOAB_BUZZER_PERIOD_3, HWIOAB_BUZZER_25_DUTY_CYCLE );
    1852:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    1856:	f44f 61c8 	mov.w	r1, #1600	; 0x640
    185a:	2000      	movs	r0, #0
    185c:	f00f fcc4 	bl	111e8 <Pwm_SetPeriodAndDuty>
        break;
    1860:	e007      	b.n	1872 <HwIoAb_Buzzer_Beep+0x60>
        default:    //Invalid tone.
            #if ( HWIOAB_BUZZER_DEV_ERROR_DETECT == STD_ON )
                Det_ReportError( HWIOAB_BUZZER_MODULE_ID, HWIOAB_BUZZER_INSTANCE_ID, HWIOAB_BUZZER_BEEP_ID, HWIOAB_BUZZER_E_TONE );
    1862:	2300      	movs	r3, #0
    1864:	2201      	movs	r2, #1
    1866:	2100      	movs	r1, #0
    1868:	f44f 7098 	mov.w	r0, #304	; 0x130
    186c:	f016 fdd2 	bl	18414 <Det_ReportError>
           #endif
        break;
    1870:	bf00      	nop
    }
}
    1872:	bf00      	nop
    1874:	b003      	add	sp, #12
    1876:	f85d fb04 	ldr.w	pc, [sp], #4

0000187a <HwIoAb_Buzzer_Stop>:

/**
 * @brief This function stops the beep of the buzzer.
 * 
 */
void HwIoAb_Buzzer_Stop( void ) {
    187a:	b508      	push	{r3, lr}
    Pwm_SetOutputToIdle( HWIOAB_BUZZER_CH );    //Stopping buzzer.
    187c:	2000      	movs	r0, #0
    187e:	f00f fd1d 	bl	112bc <Pwm_SetOutputToIdle>
}
    1882:	bf00      	nop
    1884:	bd08      	pop	{r3, pc}
	...

00001888 <IoHwAb_Init0>:
/**
 * @brief This function initialices all the IO hardware abstractions.
 * 
 * @param ConfigPtr Pointer to configuration structure instance, in this case is not used.
 */
void IoHwAb_Init0( const IoHwAb0_ConfigType* ConfigPtr ) {
    1888:	b500      	push	{lr}
    188a:	b083      	sub	sp, #12
    188c:	9001      	str	r0, [sp, #4]
    HwIoAb_Buttons_Init( ButtonsCfg );  //Buttons init.
    188e:	4808      	ldr	r0, [pc, #32]	; (18b0 <IoHwAb_Init0+0x28>)
    1890:	f7ff fbe2 	bl	1058 <HwIoAb_Buttons_Init>
    HwIoAb_Leds_Init( LedsCfg );    //Leds init.
    1894:	4807      	ldr	r0, [pc, #28]	; (18b4 <IoHwAb_Init0+0x2c>)
    1896:	f7ff fe13 	bl	14c0 <HwIoAb_Leds_Init>
    HwIoAb_Pots_Init( NULL_PTR );   //Pots init.
    189a:	2000      	movs	r0, #0
    189c:	f7ff fe7a 	bl	1594 <HwIoAb_Pots_Init>
    HwIoAb_Buzzer_Init( NULL_PTR ); //Buzzer init.
    18a0:	2000      	movs	r0, #0
    18a2:	f7ff ffb1 	bl	1808 <HwIoAb_Buzzer_Init>
}
    18a6:	bf00      	nop
    18a8:	b003      	add	sp, #12
    18aa:	f85d fb04 	ldr.w	pc, [sp], #4
    18ae:	bf00      	nop
    18b0:	00019cf4 	.word	0x00019cf4
    18b4:	00019d0c 	.word	0x00019d0c

000018b8 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
    18b8:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
    18ba:	2300      	movs	r3, #0
    18bc:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
    18be:	2300      	movs	r3, #0
    18c0:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
    18c2:	2300      	movs	r3, #0
    18c4:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
    18c6:	2300      	movs	r3, #0
    18c8:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
    18ca:	4b44      	ldr	r3, [pc, #272]	; (19dc <init_data_bss+0x124>)
    18cc:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
    18ce:	4b44      	ldr	r3, [pc, #272]	; (19e0 <init_data_bss+0x128>)
    18d0:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
    18d2:	9b05      	ldr	r3, [sp, #20]
    18d4:	681b      	ldr	r3, [r3, #0]
    18d6:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
    18d8:	9b05      	ldr	r3, [sp, #20]
    18da:	3304      	adds	r3, #4
    18dc:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
    18de:	9b05      	ldr	r3, [sp, #20]
    18e0:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
    18e2:	2300      	movs	r3, #0
    18e4:	9309      	str	r3, [sp, #36]	; 0x24
    18e6:	e03d      	b.n	1964 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
    18e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    18ea:	4613      	mov	r3, r2
    18ec:	005b      	lsls	r3, r3, #1
    18ee:	4413      	add	r3, r2
    18f0:	009b      	lsls	r3, r3, #2
    18f2:	461a      	mov	r2, r3
    18f4:	9b03      	ldr	r3, [sp, #12]
    18f6:	4413      	add	r3, r2
    18f8:	685b      	ldr	r3, [r3, #4]
    18fa:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
    18fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    18fe:	4613      	mov	r3, r2
    1900:	005b      	lsls	r3, r3, #1
    1902:	4413      	add	r3, r2
    1904:	009b      	lsls	r3, r3, #2
    1906:	461a      	mov	r2, r3
    1908:	9b03      	ldr	r3, [sp, #12]
    190a:	4413      	add	r3, r2
    190c:	681b      	ldr	r3, [r3, #0]
    190e:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
    1910:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1912:	4613      	mov	r3, r2
    1914:	005b      	lsls	r3, r3, #1
    1916:	4413      	add	r3, r2
    1918:	009b      	lsls	r3, r3, #2
    191a:	461a      	mov	r2, r3
    191c:	9b03      	ldr	r3, [sp, #12]
    191e:	4413      	add	r3, r2
    1920:	689b      	ldr	r3, [r3, #8]
    1922:	4619      	mov	r1, r3
    1924:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1926:	4613      	mov	r3, r2
    1928:	005b      	lsls	r3, r3, #1
    192a:	4413      	add	r3, r2
    192c:	009b      	lsls	r3, r3, #2
    192e:	461a      	mov	r2, r3
    1930:	9b03      	ldr	r3, [sp, #12]
    1932:	4413      	add	r3, r2
    1934:	685b      	ldr	r3, [r3, #4]
    1936:	1acb      	subs	r3, r1, r3
    1938:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    193a:	2300      	movs	r3, #0
    193c:	9308      	str	r3, [sp, #32]
    193e:	e00a      	b.n	1956 <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
    1940:	9a00      	ldr	r2, [sp, #0]
    1942:	9b08      	ldr	r3, [sp, #32]
    1944:	441a      	add	r2, r3
    1946:	9901      	ldr	r1, [sp, #4]
    1948:	9b08      	ldr	r3, [sp, #32]
    194a:	440b      	add	r3, r1
    194c:	7812      	ldrb	r2, [r2, #0]
    194e:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    1950:	9b08      	ldr	r3, [sp, #32]
    1952:	3301      	adds	r3, #1
    1954:	9308      	str	r3, [sp, #32]
    1956:	9a08      	ldr	r2, [sp, #32]
    1958:	9b06      	ldr	r3, [sp, #24]
    195a:	429a      	cmp	r2, r3
    195c:	d3f0      	bcc.n	1940 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
    195e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1960:	3301      	adds	r3, #1
    1962:	9309      	str	r3, [sp, #36]	; 0x24
    1964:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1966:	9b07      	ldr	r3, [sp, #28]
    1968:	429a      	cmp	r2, r3
    196a:	d3bd      	bcc.n	18e8 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
    196c:	9b04      	ldr	r3, [sp, #16]
    196e:	681b      	ldr	r3, [r3, #0]
    1970:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
    1972:	9b04      	ldr	r3, [sp, #16]
    1974:	3304      	adds	r3, #4
    1976:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
    1978:	9b04      	ldr	r3, [sp, #16]
    197a:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
    197c:	2300      	movs	r3, #0
    197e:	9309      	str	r3, [sp, #36]	; 0x24
    1980:	e024      	b.n	19cc <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
    1982:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1984:	00db      	lsls	r3, r3, #3
    1986:	9a02      	ldr	r2, [sp, #8]
    1988:	4413      	add	r3, r2
    198a:	681b      	ldr	r3, [r3, #0]
    198c:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
    198e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1990:	00db      	lsls	r3, r3, #3
    1992:	9a02      	ldr	r2, [sp, #8]
    1994:	4413      	add	r3, r2
    1996:	685b      	ldr	r3, [r3, #4]
    1998:	4619      	mov	r1, r3
    199a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    199c:	00db      	lsls	r3, r3, #3
    199e:	9a02      	ldr	r2, [sp, #8]
    19a0:	4413      	add	r3, r2
    19a2:	681b      	ldr	r3, [r3, #0]
    19a4:	1acb      	subs	r3, r1, r3
    19a6:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    19a8:	2300      	movs	r3, #0
    19aa:	9308      	str	r3, [sp, #32]
    19ac:	e007      	b.n	19be <init_data_bss+0x106>
        {
            ram[j] = 0U;
    19ae:	9a01      	ldr	r2, [sp, #4]
    19b0:	9b08      	ldr	r3, [sp, #32]
    19b2:	4413      	add	r3, r2
    19b4:	2200      	movs	r2, #0
    19b6:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    19b8:	9b08      	ldr	r3, [sp, #32]
    19ba:	3301      	adds	r3, #1
    19bc:	9308      	str	r3, [sp, #32]
    19be:	9a08      	ldr	r2, [sp, #32]
    19c0:	9b06      	ldr	r3, [sp, #24]
    19c2:	429a      	cmp	r2, r3
    19c4:	d3f3      	bcc.n	19ae <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
    19c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    19c8:	3301      	adds	r3, #1
    19ca:	9309      	str	r3, [sp, #36]	; 0x24
    19cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    19ce:	9b07      	ldr	r3, [sp, #28]
    19d0:	429a      	cmp	r2, r3
    19d2:	d3d6      	bcc.n	1982 <init_data_bss+0xca>
        }
    }
}
    19d4:	bf00      	nop
    19d6:	bf00      	nop
    19d8:	b00a      	add	sp, #40	; 0x28
    19da:	4770      	bx	lr
    19dc:	0001ab54 	.word	0x0001ab54
    19e0:	0001ab70 	.word	0x0001ab70

000019e4 <sys_m4_cache_init>:
{
    19e4:	b084      	sub	sp, #16
    19e6:	4603      	mov	r3, r0
    19e8:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
    19ec:	2300      	movs	r3, #0
    19ee:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
    19f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    19f6:	2b00      	cmp	r3, #0
    19f8:	d118      	bne.n	1a2c <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
    19fa:	4b10      	ldr	r3, [pc, #64]	; (1a3c <sys_m4_cache_init+0x58>)
    19fc:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
    1a00:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
    1a02:	4b0e      	ldr	r3, [pc, #56]	; (1a3c <sys_m4_cache_init+0x58>)
    1a04:	681b      	ldr	r3, [r3, #0]
    1a06:	4a0d      	ldr	r2, [pc, #52]	; (1a3c <sys_m4_cache_init+0x58>)
    1a08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1a0c:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
    1a0e:	bf00      	nop
    1a10:	4b0a      	ldr	r3, [pc, #40]	; (1a3c <sys_m4_cache_init+0x58>)
    1a12:	681b      	ldr	r3, [r3, #0]
    1a14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    1a18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    1a1c:	d0f8      	beq.n	1a10 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
    1a1e:	4b07      	ldr	r3, [pc, #28]	; (1a3c <sys_m4_cache_init+0x58>)
    1a20:	681b      	ldr	r3, [r3, #0]
    1a22:	4a06      	ldr	r2, [pc, #24]	; (1a3c <sys_m4_cache_init+0x58>)
    1a24:	f043 0301 	orr.w	r3, r3, #1
    1a28:	6013      	str	r3, [r2, #0]
    1a2a:	e002      	b.n	1a32 <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
    1a2c:	2301      	movs	r3, #1
    1a2e:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
    1a32:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1a36:	4618      	mov	r0, r3
    1a38:	b004      	add	sp, #16
    1a3a:	4770      	bx	lr
    1a3c:	e0082000 	.word	0xe0082000

00001a40 <startup_go_to_user_mode>:
}
    1a40:	bf00      	nop
    1a42:	4770      	bx	lr

00001a44 <Sys_GetCoreID>:
    return 0U;
    1a44:	2300      	movs	r3, #0
}
    1a46:	4618      	mov	r0, r3
    1a48:	4770      	bx	lr

00001a4a <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
    1a4a:	e7fe      	b.n	1a4a <HardFault_Handler>

00001a4c <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
    1a4c:	e7fe      	b.n	1a4c <MemManage_Handler>

00001a4e <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
    1a4e:	e7fe      	b.n	1a4e <BusFault_Handler>

00001a50 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
    1a50:	e7fe      	b.n	1a50 <UsageFault_Handler>

00001a52 <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
    1a52:	e7fe      	b.n	1a52 <SVC_Handler>

00001a54 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
    1a54:	e7fe      	b.n	1a54 <DebugMon_Handler>

00001a56 <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
    1a56:	e7fe      	b.n	1a56 <PendSV_Handler>

00001a58 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
    1a58:	e7fe      	b.n	1a58 <SysTick_Handler>

00001a5a <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
    1a5a:	e7fe      	b.n	1a5a <undefined_handler>

00001a5c <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
    1a5c:	b500      	push	{lr}
    1a5e:	b083      	sub	sp, #12
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
    1a60:	4b26      	ldr	r3, [pc, #152]	; (1afc <_DoInit+0xa0>)
    1a62:	9300      	str	r3, [sp, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
    1a64:	22a8      	movs	r2, #168	; 0xa8
    1a66:	2100      	movs	r1, #0
    1a68:	9800      	ldr	r0, [sp, #0]
    1a6a:	f000 fd4d 	bl	2508 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    1a6e:	9b00      	ldr	r3, [sp, #0]
    1a70:	2203      	movs	r2, #3
    1a72:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    1a74:	9b00      	ldr	r3, [sp, #0]
    1a76:	2203      	movs	r2, #3
    1a78:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    1a7a:	9b00      	ldr	r3, [sp, #0]
    1a7c:	4a20      	ldr	r2, [pc, #128]	; (1b00 <_DoInit+0xa4>)
    1a7e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    1a80:	9b00      	ldr	r3, [sp, #0]
    1a82:	4a20      	ldr	r2, [pc, #128]	; (1b04 <_DoInit+0xa8>)
    1a84:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    1a86:	9b00      	ldr	r3, [sp, #0]
    1a88:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1a8c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
    1a8e:	9b00      	ldr	r3, [sp, #0]
    1a90:	2200      	movs	r2, #0
    1a92:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    1a94:	9b00      	ldr	r3, [sp, #0]
    1a96:	2200      	movs	r2, #0
    1a98:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    1a9a:	9b00      	ldr	r3, [sp, #0]
    1a9c:	2200      	movs	r2, #0
    1a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    1aa0:	9b00      	ldr	r3, [sp, #0]
    1aa2:	4a17      	ldr	r2, [pc, #92]	; (1b00 <_DoInit+0xa4>)
    1aa4:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    1aa6:	9b00      	ldr	r3, [sp, #0]
    1aa8:	4a17      	ldr	r2, [pc, #92]	; (1b08 <_DoInit+0xac>)
    1aaa:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    1aac:	9b00      	ldr	r3, [sp, #0]
    1aae:	2210      	movs	r2, #16
    1ab0:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    1ab2:	9b00      	ldr	r3, [sp, #0]
    1ab4:	2200      	movs	r2, #0
    1ab6:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    1ab8:	9b00      	ldr	r3, [sp, #0]
    1aba:	2200      	movs	r2, #0
    1abc:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    1abe:	9b00      	ldr	r3, [sp, #0]
    1ac0:	2200      	movs	r2, #0
    1ac2:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
    1ac4:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
    1ac8:	2300      	movs	r3, #0
    1aca:	9301      	str	r3, [sp, #4]
    1acc:	e00c      	b.n	1ae8 <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
    1ace:	9b01      	ldr	r3, [sp, #4]
    1ad0:	f1c3 030f 	rsb	r3, r3, #15
    1ad4:	4a0d      	ldr	r2, [pc, #52]	; (1b0c <_DoInit+0xb0>)
    1ad6:	5cd1      	ldrb	r1, [r2, r3]
    1ad8:	9a00      	ldr	r2, [sp, #0]
    1ada:	9b01      	ldr	r3, [sp, #4]
    1adc:	4413      	add	r3, r2
    1ade:	460a      	mov	r2, r1
    1ae0:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
    1ae2:	9b01      	ldr	r3, [sp, #4]
    1ae4:	3301      	adds	r3, #1
    1ae6:	9301      	str	r3, [sp, #4]
    1ae8:	9b01      	ldr	r3, [sp, #4]
    1aea:	2b0f      	cmp	r3, #15
    1aec:	d9ef      	bls.n	1ace <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
    1aee:	f3bf 8f5f 	dmb	sy
}
    1af2:	bf00      	nop
    1af4:	b003      	add	sp, #12
    1af6:	f85d fb04 	ldr.w	pc, [sp], #4
    1afa:	bf00      	nop
    1afc:	1fff97e8 	.word	0x1fff97e8
    1b00:	0001902c 	.word	0x0001902c
    1b04:	1fff9890 	.word	0x1fff9890
    1b08:	1fff9c90 	.word	0x1fff9c90
    1b0c:	0001ab30 	.word	0x0001ab30

00001b10 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    1b10:	b500      	push	{lr}
    1b12:	b08b      	sub	sp, #44	; 0x2c
    1b14:	9003      	str	r0, [sp, #12]
    1b16:	9102      	str	r1, [sp, #8]
    1b18:	9201      	str	r2, [sp, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
    1b1a:	2300      	movs	r3, #0
    1b1c:	9308      	str	r3, [sp, #32]
  WrOff = pRing->WrOff;
    1b1e:	9b03      	ldr	r3, [sp, #12]
    1b20:	68db      	ldr	r3, [r3, #12]
    1b22:	9307      	str	r3, [sp, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    1b24:	9b03      	ldr	r3, [sp, #12]
    1b26:	691b      	ldr	r3, [r3, #16]
    1b28:	9306      	str	r3, [sp, #24]
    if (RdOff > WrOff) {
    1b2a:	9a06      	ldr	r2, [sp, #24]
    1b2c:	9b07      	ldr	r3, [sp, #28]
    1b2e:	429a      	cmp	r2, r3
    1b30:	d905      	bls.n	1b3e <_WriteBlocking+0x2e>
      NumBytesToWrite = RdOff - WrOff - 1u;
    1b32:	9a06      	ldr	r2, [sp, #24]
    1b34:	9b07      	ldr	r3, [sp, #28]
    1b36:	1ad3      	subs	r3, r2, r3
    1b38:	3b01      	subs	r3, #1
    1b3a:	9309      	str	r3, [sp, #36]	; 0x24
    1b3c:	e007      	b.n	1b4e <_WriteBlocking+0x3e>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    1b3e:	9b03      	ldr	r3, [sp, #12]
    1b40:	689a      	ldr	r2, [r3, #8]
    1b42:	9906      	ldr	r1, [sp, #24]
    1b44:	9b07      	ldr	r3, [sp, #28]
    1b46:	1acb      	subs	r3, r1, r3
    1b48:	4413      	add	r3, r2
    1b4a:	3b01      	subs	r3, #1
    1b4c:	9309      	str	r3, [sp, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    1b4e:	9b03      	ldr	r3, [sp, #12]
    1b50:	689a      	ldr	r2, [r3, #8]
    1b52:	9b07      	ldr	r3, [sp, #28]
    1b54:	1ad3      	subs	r3, r2, r3
    1b56:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1b58:	4293      	cmp	r3, r2
    1b5a:	bf28      	it	cs
    1b5c:	4613      	movcs	r3, r2
    1b5e:	9309      	str	r3, [sp, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    1b60:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1b62:	9b01      	ldr	r3, [sp, #4]
    1b64:	4293      	cmp	r3, r2
    1b66:	bf28      	it	cs
    1b68:	4613      	movcs	r3, r2
    1b6a:	9309      	str	r3, [sp, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    1b6c:	9b03      	ldr	r3, [sp, #12]
    1b6e:	685a      	ldr	r2, [r3, #4]
    1b70:	9b07      	ldr	r3, [sp, #28]
    1b72:	4413      	add	r3, r2
    1b74:	9305      	str	r3, [sp, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    1b76:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1b78:	9902      	ldr	r1, [sp, #8]
    1b7a:	9805      	ldr	r0, [sp, #20]
    1b7c:	f000 fcb6 	bl	24ec <memcpy>
    NumBytesWritten += NumBytesToWrite;
    1b80:	9a08      	ldr	r2, [sp, #32]
    1b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1b84:	4413      	add	r3, r2
    1b86:	9308      	str	r3, [sp, #32]
    pBuffer         += NumBytesToWrite;
    1b88:	9a02      	ldr	r2, [sp, #8]
    1b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1b8c:	4413      	add	r3, r2
    1b8e:	9302      	str	r3, [sp, #8]
    NumBytes        -= NumBytesToWrite;
    1b90:	9a01      	ldr	r2, [sp, #4]
    1b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1b94:	1ad3      	subs	r3, r2, r3
    1b96:	9301      	str	r3, [sp, #4]
    WrOff           += NumBytesToWrite;
    1b98:	9a07      	ldr	r2, [sp, #28]
    1b9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1b9c:	4413      	add	r3, r2
    1b9e:	9307      	str	r3, [sp, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
    1ba0:	9b03      	ldr	r3, [sp, #12]
    1ba2:	689b      	ldr	r3, [r3, #8]
    1ba4:	9a07      	ldr	r2, [sp, #28]
    1ba6:	429a      	cmp	r2, r3
    1ba8:	d101      	bne.n	1bae <_WriteBlocking+0x9e>
      WrOff = 0u;
    1baa:	2300      	movs	r3, #0
    1bac:	9307      	str	r3, [sp, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    1bae:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
    1bb2:	9b03      	ldr	r3, [sp, #12]
    1bb4:	9a07      	ldr	r2, [sp, #28]
    1bb6:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
    1bb8:	9b01      	ldr	r3, [sp, #4]
    1bba:	2b00      	cmp	r3, #0
    1bbc:	d1b2      	bne.n	1b24 <_WriteBlocking+0x14>
  return NumBytesWritten;
    1bbe:	9b08      	ldr	r3, [sp, #32]
}
    1bc0:	4618      	mov	r0, r3
    1bc2:	b00b      	add	sp, #44	; 0x2c
    1bc4:	f85d fb04 	ldr.w	pc, [sp], #4

00001bc8 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    1bc8:	b500      	push	{lr}
    1bca:	b089      	sub	sp, #36	; 0x24
    1bcc:	9003      	str	r0, [sp, #12]
    1bce:	9102      	str	r1, [sp, #8]
    1bd0:	9201      	str	r2, [sp, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
    1bd2:	9b03      	ldr	r3, [sp, #12]
    1bd4:	68db      	ldr	r3, [r3, #12]
    1bd6:	9307      	str	r3, [sp, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
    1bd8:	9b03      	ldr	r3, [sp, #12]
    1bda:	689a      	ldr	r2, [r3, #8]
    1bdc:	9b07      	ldr	r3, [sp, #28]
    1bde:	1ad3      	subs	r3, r2, r3
    1be0:	9306      	str	r3, [sp, #24]
  if (Rem > NumBytes) {
    1be2:	9a06      	ldr	r2, [sp, #24]
    1be4:	9b01      	ldr	r3, [sp, #4]
    1be6:	429a      	cmp	r2, r3
    1be8:	d911      	bls.n	1c0e <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    1bea:	9b03      	ldr	r3, [sp, #12]
    1bec:	685a      	ldr	r2, [r3, #4]
    1bee:	9b07      	ldr	r3, [sp, #28]
    1bf0:	4413      	add	r3, r2
    1bf2:	9304      	str	r3, [sp, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
    1bf4:	9a01      	ldr	r2, [sp, #4]
    1bf6:	9902      	ldr	r1, [sp, #8]
    1bf8:	9804      	ldr	r0, [sp, #16]
    1bfa:	f000 fc77 	bl	24ec <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    1bfe:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
    1c02:	9a07      	ldr	r2, [sp, #28]
    1c04:	9b01      	ldr	r3, [sp, #4]
    1c06:	441a      	add	r2, r3
    1c08:	9b03      	ldr	r3, [sp, #12]
    1c0a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
    1c0c:	e01f      	b.n	1c4e <_WriteNoCheck+0x86>
    NumBytesAtOnce = Rem;
    1c0e:	9b06      	ldr	r3, [sp, #24]
    1c10:	9305      	str	r3, [sp, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    1c12:	9b03      	ldr	r3, [sp, #12]
    1c14:	685a      	ldr	r2, [r3, #4]
    1c16:	9b07      	ldr	r3, [sp, #28]
    1c18:	4413      	add	r3, r2
    1c1a:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    1c1c:	9a05      	ldr	r2, [sp, #20]
    1c1e:	9902      	ldr	r1, [sp, #8]
    1c20:	9804      	ldr	r0, [sp, #16]
    1c22:	f000 fc63 	bl	24ec <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
    1c26:	9a01      	ldr	r2, [sp, #4]
    1c28:	9b06      	ldr	r3, [sp, #24]
    1c2a:	1ad3      	subs	r3, r2, r3
    1c2c:	9305      	str	r3, [sp, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    1c2e:	9b03      	ldr	r3, [sp, #12]
    1c30:	685b      	ldr	r3, [r3, #4]
    1c32:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    1c34:	9a02      	ldr	r2, [sp, #8]
    1c36:	9b06      	ldr	r3, [sp, #24]
    1c38:	4413      	add	r3, r2
    1c3a:	9a05      	ldr	r2, [sp, #20]
    1c3c:	4619      	mov	r1, r3
    1c3e:	9804      	ldr	r0, [sp, #16]
    1c40:	f000 fc54 	bl	24ec <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    1c44:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
    1c48:	9b03      	ldr	r3, [sp, #12]
    1c4a:	9a05      	ldr	r2, [sp, #20]
    1c4c:	60da      	str	r2, [r3, #12]
}
    1c4e:	bf00      	nop
    1c50:	b009      	add	sp, #36	; 0x24
    1c52:	f85d fb04 	ldr.w	pc, [sp], #4

00001c56 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
    1c56:	b086      	sub	sp, #24
    1c58:	9001      	str	r0, [sp, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
    1c5a:	9b01      	ldr	r3, [sp, #4]
    1c5c:	691b      	ldr	r3, [r3, #16]
    1c5e:	9304      	str	r3, [sp, #16]
  WrOff = pRing->WrOff;
    1c60:	9b01      	ldr	r3, [sp, #4]
    1c62:	68db      	ldr	r3, [r3, #12]
    1c64:	9303      	str	r3, [sp, #12]
  if (RdOff <= WrOff) {
    1c66:	9a04      	ldr	r2, [sp, #16]
    1c68:	9b03      	ldr	r3, [sp, #12]
    1c6a:	429a      	cmp	r2, r3
    1c6c:	d808      	bhi.n	1c80 <_GetAvailWriteSpace+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    1c6e:	9b01      	ldr	r3, [sp, #4]
    1c70:	689a      	ldr	r2, [r3, #8]
    1c72:	9b03      	ldr	r3, [sp, #12]
    1c74:	1ad2      	subs	r2, r2, r3
    1c76:	9b04      	ldr	r3, [sp, #16]
    1c78:	4413      	add	r3, r2
    1c7a:	3b01      	subs	r3, #1
    1c7c:	9305      	str	r3, [sp, #20]
    1c7e:	e004      	b.n	1c8a <_GetAvailWriteSpace+0x34>
  } else {
    r = RdOff - WrOff - 1u;
    1c80:	9a04      	ldr	r2, [sp, #16]
    1c82:	9b03      	ldr	r3, [sp, #12]
    1c84:	1ad3      	subs	r3, r2, r3
    1c86:	3b01      	subs	r3, #1
    1c88:	9305      	str	r3, [sp, #20]
  }
  return r;
    1c8a:	9b05      	ldr	r3, [sp, #20]
}
    1c8c:	4618      	mov	r0, r3
    1c8e:	b006      	add	sp, #24
    1c90:	4770      	bx	lr
	...

00001c94 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1c94:	b500      	push	{lr}
    1c96:	b089      	sub	sp, #36	; 0x24
    1c98:	9003      	str	r0, [sp, #12]
    1c9a:	9102      	str	r1, [sp, #8]
    1c9c:	9201      	str	r2, [sp, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
    1c9e:	9b02      	ldr	r3, [sp, #8]
    1ca0:	9306      	str	r3, [sp, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    1ca2:	9b03      	ldr	r3, [sp, #12]
    1ca4:	1c5a      	adds	r2, r3, #1
    1ca6:	4613      	mov	r3, r2
    1ca8:	005b      	lsls	r3, r3, #1
    1caa:	4413      	add	r3, r2
    1cac:	00db      	lsls	r3, r3, #3
    1cae:	4a20      	ldr	r2, [pc, #128]	; (1d30 <SEGGER_RTT_WriteNoLock+0x9c>)
    1cb0:	4413      	add	r3, r2
    1cb2:	9305      	str	r3, [sp, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    1cb4:	9b05      	ldr	r3, [sp, #20]
    1cb6:	695b      	ldr	r3, [r3, #20]
    1cb8:	2b02      	cmp	r3, #2
    1cba:	d029      	beq.n	1d10 <SEGGER_RTT_WriteNoLock+0x7c>
    1cbc:	2b02      	cmp	r3, #2
    1cbe:	d82e      	bhi.n	1d1e <SEGGER_RTT_WriteNoLock+0x8a>
    1cc0:	2b00      	cmp	r3, #0
    1cc2:	d002      	beq.n	1cca <SEGGER_RTT_WriteNoLock+0x36>
    1cc4:	2b01      	cmp	r3, #1
    1cc6:	d013      	beq.n	1cf0 <SEGGER_RTT_WriteNoLock+0x5c>
    1cc8:	e029      	b.n	1d1e <SEGGER_RTT_WriteNoLock+0x8a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    1cca:	9805      	ldr	r0, [sp, #20]
    1ccc:	f7ff ffc3 	bl	1c56 <_GetAvailWriteSpace>
    1cd0:	9004      	str	r0, [sp, #16]
    if (Avail < NumBytes) {
    1cd2:	9a04      	ldr	r2, [sp, #16]
    1cd4:	9b01      	ldr	r3, [sp, #4]
    1cd6:	429a      	cmp	r2, r3
    1cd8:	d202      	bcs.n	1ce0 <SEGGER_RTT_WriteNoLock+0x4c>
      Status = 0u;
    1cda:	2300      	movs	r3, #0
    1cdc:	9307      	str	r3, [sp, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
    1cde:	e021      	b.n	1d24 <SEGGER_RTT_WriteNoLock+0x90>
      Status = NumBytes;
    1ce0:	9b01      	ldr	r3, [sp, #4]
    1ce2:	9307      	str	r3, [sp, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
    1ce4:	9a01      	ldr	r2, [sp, #4]
    1ce6:	9906      	ldr	r1, [sp, #24]
    1ce8:	9805      	ldr	r0, [sp, #20]
    1cea:	f7ff ff6d 	bl	1bc8 <_WriteNoCheck>
    break;
    1cee:	e019      	b.n	1d24 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
    1cf0:	9805      	ldr	r0, [sp, #20]
    1cf2:	f7ff ffb0 	bl	1c56 <_GetAvailWriteSpace>
    1cf6:	9004      	str	r0, [sp, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
    1cf8:	9a01      	ldr	r2, [sp, #4]
    1cfa:	9b04      	ldr	r3, [sp, #16]
    1cfc:	4293      	cmp	r3, r2
    1cfe:	bf28      	it	cs
    1d00:	4613      	movcs	r3, r2
    1d02:	9307      	str	r3, [sp, #28]
    _WriteNoCheck(pRing, pData, Status);
    1d04:	9a07      	ldr	r2, [sp, #28]
    1d06:	9906      	ldr	r1, [sp, #24]
    1d08:	9805      	ldr	r0, [sp, #20]
    1d0a:	f7ff ff5d 	bl	1bc8 <_WriteNoCheck>
    break;
    1d0e:	e009      	b.n	1d24 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    1d10:	9a01      	ldr	r2, [sp, #4]
    1d12:	9906      	ldr	r1, [sp, #24]
    1d14:	9805      	ldr	r0, [sp, #20]
    1d16:	f7ff fefb 	bl	1b10 <_WriteBlocking>
    1d1a:	9007      	str	r0, [sp, #28]
    break;
    1d1c:	e002      	b.n	1d24 <SEGGER_RTT_WriteNoLock+0x90>
  default:
    Status = 0u;
    1d1e:	2300      	movs	r3, #0
    1d20:	9307      	str	r3, [sp, #28]
    break;
    1d22:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
    1d24:	9b07      	ldr	r3, [sp, #28]
}
    1d26:	4618      	mov	r0, r3
    1d28:	b009      	add	sp, #36	; 0x24
    1d2a:	f85d fb04 	ldr.w	pc, [sp], #4
    1d2e:	bf00      	nop
    1d30:	1fff97e8 	.word	0x1fff97e8

00001d34 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1d34:	b500      	push	{lr}
    1d36:	b089      	sub	sp, #36	; 0x24
    1d38:	9003      	str	r0, [sp, #12]
    1d3a:	9102      	str	r1, [sp, #8]
    1d3c:	9201      	str	r2, [sp, #4]
  unsigned Status;

  INIT();
    1d3e:	4b0f      	ldr	r3, [pc, #60]	; (1d7c <SEGGER_RTT_Write+0x48>)
    1d40:	9307      	str	r3, [sp, #28]
    1d42:	9b07      	ldr	r3, [sp, #28]
    1d44:	781b      	ldrb	r3, [r3, #0]
    1d46:	b2db      	uxtb	r3, r3
    1d48:	2b53      	cmp	r3, #83	; 0x53
    1d4a:	d001      	beq.n	1d50 <SEGGER_RTT_Write+0x1c>
    1d4c:	f7ff fe86 	bl	1a5c <_DoInit>
  SEGGER_RTT_LOCK();
    1d50:	f3ef 8311 	mrs	r3, BASEPRI
    1d54:	f04f 0120 	mov.w	r1, #32
    1d58:	f381 8811 	msr	BASEPRI, r1
    1d5c:	9306      	str	r3, [sp, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
    1d5e:	9a01      	ldr	r2, [sp, #4]
    1d60:	9902      	ldr	r1, [sp, #8]
    1d62:	9803      	ldr	r0, [sp, #12]
    1d64:	f7ff ff96 	bl	1c94 <SEGGER_RTT_WriteNoLock>
    1d68:	9005      	str	r0, [sp, #20]
  SEGGER_RTT_UNLOCK();
    1d6a:	9b06      	ldr	r3, [sp, #24]
    1d6c:	f383 8811 	msr	BASEPRI, r3
  return Status;
    1d70:	9b05      	ldr	r3, [sp, #20]
}
    1d72:	4618      	mov	r0, r3
    1d74:	b009      	add	sp, #36	; 0x24
    1d76:	f85d fb04 	ldr.w	pc, [sp], #4
    1d7a:	bf00      	nop
    1d7c:	1fff97e8 	.word	0x1fff97e8

00001d80 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    1d80:	b508      	push	{r3, lr}
  _DoInit();
    1d82:	f7ff fe6b 	bl	1a5c <_DoInit>
}
    1d86:	bf00      	nop
    1d88:	bd08      	pop	{r3, pc}

00001d8a <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
    1d8a:	b500      	push	{lr}
    1d8c:	b085      	sub	sp, #20
    1d8e:	9001      	str	r0, [sp, #4]
    1d90:	460b      	mov	r3, r1
    1d92:	f88d 3003 	strb.w	r3, [sp, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
    1d96:	9b01      	ldr	r3, [sp, #4]
    1d98:	689b      	ldr	r3, [r3, #8]
    1d9a:	9303      	str	r3, [sp, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
    1d9c:	9b03      	ldr	r3, [sp, #12]
    1d9e:	1c5a      	adds	r2, r3, #1
    1da0:	9b01      	ldr	r3, [sp, #4]
    1da2:	685b      	ldr	r3, [r3, #4]
    1da4:	429a      	cmp	r2, r3
    1da6:	d80f      	bhi.n	1dc8 <_StoreChar+0x3e>
    *(p->pBuffer + Cnt) = c;
    1da8:	9b01      	ldr	r3, [sp, #4]
    1daa:	681a      	ldr	r2, [r3, #0]
    1dac:	9b03      	ldr	r3, [sp, #12]
    1dae:	4413      	add	r3, r2
    1db0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    1db4:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
    1db6:	9b03      	ldr	r3, [sp, #12]
    1db8:	1c5a      	adds	r2, r3, #1
    1dba:	9b01      	ldr	r3, [sp, #4]
    1dbc:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
    1dbe:	9b01      	ldr	r3, [sp, #4]
    1dc0:	68db      	ldr	r3, [r3, #12]
    1dc2:	1c5a      	adds	r2, r3, #1
    1dc4:	9b01      	ldr	r3, [sp, #4]
    1dc6:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
    1dc8:	9b01      	ldr	r3, [sp, #4]
    1dca:	689a      	ldr	r2, [r3, #8]
    1dcc:	9b01      	ldr	r3, [sp, #4]
    1dce:	685b      	ldr	r3, [r3, #4]
    1dd0:	429a      	cmp	r2, r3
    1dd2:	d115      	bne.n	1e00 <_StoreChar+0x76>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
    1dd4:	9b01      	ldr	r3, [sp, #4]
    1dd6:	6918      	ldr	r0, [r3, #16]
    1dd8:	9b01      	ldr	r3, [sp, #4]
    1dda:	6819      	ldr	r1, [r3, #0]
    1ddc:	9b01      	ldr	r3, [sp, #4]
    1dde:	689b      	ldr	r3, [r3, #8]
    1de0:	461a      	mov	r2, r3
    1de2:	f7ff ffa7 	bl	1d34 <SEGGER_RTT_Write>
    1de6:	4602      	mov	r2, r0
    1de8:	9b01      	ldr	r3, [sp, #4]
    1dea:	689b      	ldr	r3, [r3, #8]
    1dec:	429a      	cmp	r2, r3
    1dee:	d004      	beq.n	1dfa <_StoreChar+0x70>
      p->ReturnValue = -1;
    1df0:	9b01      	ldr	r3, [sp, #4]
    1df2:	f04f 32ff 	mov.w	r2, #4294967295
    1df6:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
    1df8:	e002      	b.n	1e00 <_StoreChar+0x76>
      p->Cnt = 0u;
    1dfa:	9b01      	ldr	r3, [sp, #4]
    1dfc:	2200      	movs	r2, #0
    1dfe:	609a      	str	r2, [r3, #8]
}
    1e00:	bf00      	nop
    1e02:	b005      	add	sp, #20
    1e04:	f85d fb04 	ldr.w	pc, [sp], #4

00001e08 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    1e08:	b500      	push	{lr}
    1e0a:	b08b      	sub	sp, #44	; 0x2c
    1e0c:	9003      	str	r0, [sp, #12]
    1e0e:	9102      	str	r1, [sp, #8]
    1e10:	9201      	str	r2, [sp, #4]
    1e12:	9300      	str	r3, [sp, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
    1e14:	9b02      	ldr	r3, [sp, #8]
    1e16:	9308      	str	r3, [sp, #32]
  Digit = 1u;
    1e18:	2301      	movs	r3, #1
    1e1a:	9309      	str	r3, [sp, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
    1e1c:	2301      	movs	r3, #1
    1e1e:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    1e20:	e007      	b.n	1e32 <_PrintUnsigned+0x2a>
    Number = (Number / Base);
    1e22:	9a08      	ldr	r2, [sp, #32]
    1e24:	9b01      	ldr	r3, [sp, #4]
    1e26:	fbb2 f3f3 	udiv	r3, r2, r3
    1e2a:	9308      	str	r3, [sp, #32]
    Width++;
    1e2c:	9b07      	ldr	r3, [sp, #28]
    1e2e:	3301      	adds	r3, #1
    1e30:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    1e32:	9a08      	ldr	r2, [sp, #32]
    1e34:	9b01      	ldr	r3, [sp, #4]
    1e36:	429a      	cmp	r2, r3
    1e38:	d2f3      	bcs.n	1e22 <_PrintUnsigned+0x1a>
  }
  if (NumDigits > Width) {
    1e3a:	9a00      	ldr	r2, [sp, #0]
    1e3c:	9b07      	ldr	r3, [sp, #28]
    1e3e:	429a      	cmp	r2, r3
    1e40:	d901      	bls.n	1e46 <_PrintUnsigned+0x3e>
    Width = NumDigits;
    1e42:	9b00      	ldr	r3, [sp, #0]
    1e44:	9307      	str	r3, [sp, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
    1e46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1e48:	f003 0301 	and.w	r3, r3, #1
    1e4c:	2b00      	cmp	r3, #0
    1e4e:	d128      	bne.n	1ea2 <_PrintUnsigned+0x9a>
    if (FieldWidth != 0u) {
    1e50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1e52:	2b00      	cmp	r3, #0
    1e54:	d025      	beq.n	1ea2 <_PrintUnsigned+0x9a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
    1e56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1e58:	f003 0302 	and.w	r3, r3, #2
    1e5c:	2b00      	cmp	r3, #0
    1e5e:	d006      	beq.n	1e6e <_PrintUnsigned+0x66>
    1e60:	9b00      	ldr	r3, [sp, #0]
    1e62:	2b00      	cmp	r3, #0
    1e64:	d103      	bne.n	1e6e <_PrintUnsigned+0x66>
        c = '0';
    1e66:	2330      	movs	r3, #48	; 0x30
    1e68:	f88d 301b 	strb.w	r3, [sp, #27]
    1e6c:	e002      	b.n	1e74 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
    1e6e:	2320      	movs	r3, #32
    1e70:	f88d 301b 	strb.w	r3, [sp, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1e74:	e00c      	b.n	1e90 <_PrintUnsigned+0x88>
        FieldWidth--;
    1e76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1e78:	3b01      	subs	r3, #1
    1e7a:	930c      	str	r3, [sp, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
    1e7c:	f89d 301b 	ldrb.w	r3, [sp, #27]
    1e80:	4619      	mov	r1, r3
    1e82:	9803      	ldr	r0, [sp, #12]
    1e84:	f7ff ff81 	bl	1d8a <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1e88:	9b03      	ldr	r3, [sp, #12]
    1e8a:	68db      	ldr	r3, [r3, #12]
    1e8c:	2b00      	cmp	r3, #0
    1e8e:	db07      	blt.n	1ea0 <_PrintUnsigned+0x98>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1e90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1e92:	2b00      	cmp	r3, #0
    1e94:	d005      	beq.n	1ea2 <_PrintUnsigned+0x9a>
    1e96:	9a07      	ldr	r2, [sp, #28]
    1e98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1e9a:	429a      	cmp	r2, r3
    1e9c:	d3eb      	bcc.n	1e76 <_PrintUnsigned+0x6e>
    1e9e:	e000      	b.n	1ea2 <_PrintUnsigned+0x9a>
          break;
    1ea0:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
    1ea2:	9b03      	ldr	r3, [sp, #12]
    1ea4:	68db      	ldr	r3, [r3, #12]
    1ea6:	2b00      	cmp	r3, #0
    1ea8:	db55      	blt.n	1f56 <_PrintUnsigned+0x14e>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    1eaa:	9b00      	ldr	r3, [sp, #0]
    1eac:	2b01      	cmp	r3, #1
    1eae:	d903      	bls.n	1eb8 <_PrintUnsigned+0xb0>
        NumDigits--;
    1eb0:	9b00      	ldr	r3, [sp, #0]
    1eb2:	3b01      	subs	r3, #1
    1eb4:	9300      	str	r3, [sp, #0]
    1eb6:	e009      	b.n	1ecc <_PrintUnsigned+0xc4>
      } else {
        Div = v / Digit;
    1eb8:	9a02      	ldr	r2, [sp, #8]
    1eba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1ebc:	fbb2 f3f3 	udiv	r3, r2, r3
    1ec0:	9305      	str	r3, [sp, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
    1ec2:	9a05      	ldr	r2, [sp, #20]
    1ec4:	9b01      	ldr	r3, [sp, #4]
    1ec6:	429a      	cmp	r2, r3
    1ec8:	d200      	bcs.n	1ecc <_PrintUnsigned+0xc4>
          break;
    1eca:	e005      	b.n	1ed8 <_PrintUnsigned+0xd0>
        }
      }
      Digit *= Base;
    1ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1ece:	9a01      	ldr	r2, [sp, #4]
    1ed0:	fb02 f303 	mul.w	r3, r2, r3
    1ed4:	9309      	str	r3, [sp, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    1ed6:	e7e8      	b.n	1eaa <_PrintUnsigned+0xa2>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
    1ed8:	9a02      	ldr	r2, [sp, #8]
    1eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1edc:	fbb2 f3f3 	udiv	r3, r2, r3
    1ee0:	9305      	str	r3, [sp, #20]
      v -= Div * Digit;
    1ee2:	9b05      	ldr	r3, [sp, #20]
    1ee4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1ee6:	fb02 f303 	mul.w	r3, r2, r3
    1eea:	9a02      	ldr	r2, [sp, #8]
    1eec:	1ad3      	subs	r3, r2, r3
    1eee:	9302      	str	r3, [sp, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
    1ef0:	4a1b      	ldr	r2, [pc, #108]	; (1f60 <_PrintUnsigned+0x158>)
    1ef2:	9b05      	ldr	r3, [sp, #20]
    1ef4:	4413      	add	r3, r2
    1ef6:	781b      	ldrb	r3, [r3, #0]
    1ef8:	4619      	mov	r1, r3
    1efa:	9803      	ldr	r0, [sp, #12]
    1efc:	f7ff ff45 	bl	1d8a <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
    1f00:	9b03      	ldr	r3, [sp, #12]
    1f02:	68db      	ldr	r3, [r3, #12]
    1f04:	2b00      	cmp	r3, #0
    1f06:	db08      	blt.n	1f1a <_PrintUnsigned+0x112>
        break;
      }
      Digit /= Base;
    1f08:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1f0a:	9b01      	ldr	r3, [sp, #4]
    1f0c:	fbb2 f3f3 	udiv	r3, r2, r3
    1f10:	9309      	str	r3, [sp, #36]	; 0x24
    } while (Digit);
    1f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1f14:	2b00      	cmp	r3, #0
    1f16:	d1df      	bne.n	1ed8 <_PrintUnsigned+0xd0>
    1f18:	e000      	b.n	1f1c <_PrintUnsigned+0x114>
        break;
    1f1a:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    1f1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1f1e:	f003 0301 	and.w	r3, r3, #1
    1f22:	2b00      	cmp	r3, #0
    1f24:	d017      	beq.n	1f56 <_PrintUnsigned+0x14e>
      if (FieldWidth != 0u) {
    1f26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1f28:	2b00      	cmp	r3, #0
    1f2a:	d014      	beq.n	1f56 <_PrintUnsigned+0x14e>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1f2c:	e00a      	b.n	1f44 <_PrintUnsigned+0x13c>
          FieldWidth--;
    1f2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1f30:	3b01      	subs	r3, #1
    1f32:	930c      	str	r3, [sp, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
    1f34:	2120      	movs	r1, #32
    1f36:	9803      	ldr	r0, [sp, #12]
    1f38:	f7ff ff27 	bl	1d8a <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
    1f3c:	9b03      	ldr	r3, [sp, #12]
    1f3e:	68db      	ldr	r3, [r3, #12]
    1f40:	2b00      	cmp	r3, #0
    1f42:	db07      	blt.n	1f54 <_PrintUnsigned+0x14c>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1f44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1f46:	2b00      	cmp	r3, #0
    1f48:	d005      	beq.n	1f56 <_PrintUnsigned+0x14e>
    1f4a:	9a07      	ldr	r2, [sp, #28]
    1f4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1f4e:	429a      	cmp	r2, r3
    1f50:	d3ed      	bcc.n	1f2e <_PrintUnsigned+0x126>
          }
        }
      }
    }
  }
}
    1f52:	e000      	b.n	1f56 <_PrintUnsigned+0x14e>
            break;
    1f54:	bf00      	nop
}
    1f56:	bf00      	nop
    1f58:	b00b      	add	sp, #44	; 0x2c
    1f5a:	f85d fb04 	ldr.w	pc, [sp], #4
    1f5e:	bf00      	nop
    1f60:	0001ab44 	.word	0x0001ab44

00001f64 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    1f64:	b500      	push	{lr}
    1f66:	b089      	sub	sp, #36	; 0x24
    1f68:	9005      	str	r0, [sp, #20]
    1f6a:	9104      	str	r1, [sp, #16]
    1f6c:	9203      	str	r2, [sp, #12]
    1f6e:	9302      	str	r3, [sp, #8]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
    1f70:	9b04      	ldr	r3, [sp, #16]
    1f72:	2b00      	cmp	r3, #0
    1f74:	bfb8      	it	lt
    1f76:	425b      	neglt	r3, r3
    1f78:	9306      	str	r3, [sp, #24]

  //
  // Get actual field width
  //
  Width = 1u;
    1f7a:	2301      	movs	r3, #1
    1f7c:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1f7e:	e007      	b.n	1f90 <_PrintInt+0x2c>
    Number = (Number / (int)Base);
    1f80:	9b03      	ldr	r3, [sp, #12]
    1f82:	9a06      	ldr	r2, [sp, #24]
    1f84:	fb92 f3f3 	sdiv	r3, r2, r3
    1f88:	9306      	str	r3, [sp, #24]
    Width++;
    1f8a:	9b07      	ldr	r3, [sp, #28]
    1f8c:	3301      	adds	r3, #1
    1f8e:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1f90:	9b03      	ldr	r3, [sp, #12]
    1f92:	9a06      	ldr	r2, [sp, #24]
    1f94:	429a      	cmp	r2, r3
    1f96:	daf3      	bge.n	1f80 <_PrintInt+0x1c>
  }
  if (NumDigits > Width) {
    1f98:	9a02      	ldr	r2, [sp, #8]
    1f9a:	9b07      	ldr	r3, [sp, #28]
    1f9c:	429a      	cmp	r2, r3
    1f9e:	d901      	bls.n	1fa4 <_PrintInt+0x40>
    Width = NumDigits;
    1fa0:	9b02      	ldr	r3, [sp, #8]
    1fa2:	9307      	str	r3, [sp, #28]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    1fa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1fa6:	2b00      	cmp	r3, #0
    1fa8:	d00a      	beq.n	1fc0 <_PrintInt+0x5c>
    1faa:	9b04      	ldr	r3, [sp, #16]
    1fac:	2b00      	cmp	r3, #0
    1fae:	db04      	blt.n	1fba <_PrintInt+0x56>
    1fb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1fb2:	f003 0304 	and.w	r3, r3, #4
    1fb6:	2b00      	cmp	r3, #0
    1fb8:	d002      	beq.n	1fc0 <_PrintInt+0x5c>
    FieldWidth--;
    1fba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1fbc:	3b01      	subs	r3, #1
    1fbe:	930a      	str	r3, [sp, #40]	; 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    1fc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1fc2:	f003 0302 	and.w	r3, r3, #2
    1fc6:	2b00      	cmp	r3, #0
    1fc8:	d002      	beq.n	1fd0 <_PrintInt+0x6c>
    1fca:	9b02      	ldr	r3, [sp, #8]
    1fcc:	2b00      	cmp	r3, #0
    1fce:	d01c      	beq.n	200a <_PrintInt+0xa6>
    1fd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1fd2:	f003 0301 	and.w	r3, r3, #1
    1fd6:	2b00      	cmp	r3, #0
    1fd8:	d117      	bne.n	200a <_PrintInt+0xa6>
    if (FieldWidth != 0u) {
    1fda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1fdc:	2b00      	cmp	r3, #0
    1fde:	d014      	beq.n	200a <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1fe0:	e00a      	b.n	1ff8 <_PrintInt+0x94>
        FieldWidth--;
    1fe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1fe4:	3b01      	subs	r3, #1
    1fe6:	930a      	str	r3, [sp, #40]	; 0x28
        _StoreChar(pBufferDesc, ' ');
    1fe8:	2120      	movs	r1, #32
    1fea:	9805      	ldr	r0, [sp, #20]
    1fec:	f7ff fecd 	bl	1d8a <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1ff0:	9b05      	ldr	r3, [sp, #20]
    1ff2:	68db      	ldr	r3, [r3, #12]
    1ff4:	2b00      	cmp	r3, #0
    1ff6:	db07      	blt.n	2008 <_PrintInt+0xa4>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1ff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1ffa:	2b00      	cmp	r3, #0
    1ffc:	d005      	beq.n	200a <_PrintInt+0xa6>
    1ffe:	9a07      	ldr	r2, [sp, #28]
    2000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2002:	429a      	cmp	r2, r3
    2004:	d3ed      	bcc.n	1fe2 <_PrintInt+0x7e>
    2006:	e000      	b.n	200a <_PrintInt+0xa6>
          break;
    2008:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
    200a:	9b05      	ldr	r3, [sp, #20]
    200c:	68db      	ldr	r3, [r3, #12]
    200e:	2b00      	cmp	r3, #0
    2010:	db4a      	blt.n	20a8 <_PrintInt+0x144>
    if (v < 0) {
    2012:	9b04      	ldr	r3, [sp, #16]
    2014:	2b00      	cmp	r3, #0
    2016:	da07      	bge.n	2028 <_PrintInt+0xc4>
      v = -v;
    2018:	9b04      	ldr	r3, [sp, #16]
    201a:	425b      	negs	r3, r3
    201c:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '-');
    201e:	212d      	movs	r1, #45	; 0x2d
    2020:	9805      	ldr	r0, [sp, #20]
    2022:	f7ff feb2 	bl	1d8a <_StoreChar>
    2026:	e008      	b.n	203a <_PrintInt+0xd6>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    2028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    202a:	f003 0304 	and.w	r3, r3, #4
    202e:	2b00      	cmp	r3, #0
    2030:	d003      	beq.n	203a <_PrintInt+0xd6>
      _StoreChar(pBufferDesc, '+');
    2032:	212b      	movs	r1, #43	; 0x2b
    2034:	9805      	ldr	r0, [sp, #20]
    2036:	f7ff fea8 	bl	1d8a <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
    203a:	9b05      	ldr	r3, [sp, #20]
    203c:	68db      	ldr	r3, [r3, #12]
    203e:	2b00      	cmp	r3, #0
    2040:	db32      	blt.n	20a8 <_PrintInt+0x144>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    2042:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2044:	f003 0302 	and.w	r3, r3, #2
    2048:	2b00      	cmp	r3, #0
    204a:	d01f      	beq.n	208c <_PrintInt+0x128>
    204c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    204e:	f003 0301 	and.w	r3, r3, #1
    2052:	2b00      	cmp	r3, #0
    2054:	d11a      	bne.n	208c <_PrintInt+0x128>
    2056:	9b02      	ldr	r3, [sp, #8]
    2058:	2b00      	cmp	r3, #0
    205a:	d117      	bne.n	208c <_PrintInt+0x128>
        if (FieldWidth != 0u) {
    205c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    205e:	2b00      	cmp	r3, #0
    2060:	d014      	beq.n	208c <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    2062:	e00a      	b.n	207a <_PrintInt+0x116>
            FieldWidth--;
    2064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2066:	3b01      	subs	r3, #1
    2068:	930a      	str	r3, [sp, #40]	; 0x28
            _StoreChar(pBufferDesc, '0');
    206a:	2130      	movs	r1, #48	; 0x30
    206c:	9805      	ldr	r0, [sp, #20]
    206e:	f7ff fe8c 	bl	1d8a <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
    2072:	9b05      	ldr	r3, [sp, #20]
    2074:	68db      	ldr	r3, [r3, #12]
    2076:	2b00      	cmp	r3, #0
    2078:	db07      	blt.n	208a <_PrintInt+0x126>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    207a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    207c:	2b00      	cmp	r3, #0
    207e:	d005      	beq.n	208c <_PrintInt+0x128>
    2080:	9a07      	ldr	r2, [sp, #28]
    2082:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2084:	429a      	cmp	r2, r3
    2086:	d3ed      	bcc.n	2064 <_PrintInt+0x100>
    2088:	e000      	b.n	208c <_PrintInt+0x128>
              break;
    208a:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
    208c:	9b05      	ldr	r3, [sp, #20]
    208e:	68db      	ldr	r3, [r3, #12]
    2090:	2b00      	cmp	r3, #0
    2092:	db09      	blt.n	20a8 <_PrintInt+0x144>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    2094:	9904      	ldr	r1, [sp, #16]
    2096:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2098:	9301      	str	r3, [sp, #4]
    209a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    209c:	9300      	str	r3, [sp, #0]
    209e:	9b02      	ldr	r3, [sp, #8]
    20a0:	9a03      	ldr	r2, [sp, #12]
    20a2:	9805      	ldr	r0, [sp, #20]
    20a4:	f7ff feb0 	bl	1e08 <_PrintUnsigned>
      }
    }
  }
}
    20a8:	bf00      	nop
    20aa:	b009      	add	sp, #36	; 0x24
    20ac:	f85d fb04 	ldr.w	pc, [sp], #4

000020b0 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
    20b0:	b500      	push	{lr}
    20b2:	b0a3      	sub	sp, #140	; 0x8c
    20b4:	9005      	str	r0, [sp, #20]
    20b6:	9104      	str	r1, [sp, #16]
    20b8:	9203      	str	r2, [sp, #12]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
    20ba:	ab06      	add	r3, sp, #24
    20bc:	9316      	str	r3, [sp, #88]	; 0x58
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    20be:	2340      	movs	r3, #64	; 0x40
    20c0:	9317      	str	r3, [sp, #92]	; 0x5c
  BufferDesc.Cnt            = 0u;
    20c2:	2300      	movs	r3, #0
    20c4:	9318      	str	r3, [sp, #96]	; 0x60
  BufferDesc.RTTBufferIndex = BufferIndex;
    20c6:	9b05      	ldr	r3, [sp, #20]
    20c8:	931a      	str	r3, [sp, #104]	; 0x68
  BufferDesc.ReturnValue    = 0;
    20ca:	2300      	movs	r3, #0
    20cc:	9319      	str	r3, [sp, #100]	; 0x64

  do {
    c = *sFormat;
    20ce:	9b04      	ldr	r3, [sp, #16]
    20d0:	781b      	ldrb	r3, [r3, #0]
    20d2:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    sFormat++;
    20d6:	9b04      	ldr	r3, [sp, #16]
    20d8:	3301      	adds	r3, #1
    20da:	9304      	str	r3, [sp, #16]
    if (c == 0u) {
    20dc:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    20e0:	2b00      	cmp	r3, #0
    20e2:	f000 819c 	beq.w	241e <SEGGER_RTT_vprintf+0x36e>
      break;
    }
    if (c == '%') {
    20e6:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    20ea:	2b25      	cmp	r3, #37	; 0x25
    20ec:	f040 818b 	bne.w	2406 <SEGGER_RTT_vprintf+0x356>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
    20f0:	2300      	movs	r3, #0
    20f2:	931e      	str	r3, [sp, #120]	; 0x78
      v = 1;
    20f4:	2301      	movs	r3, #1
    20f6:	9320      	str	r3, [sp, #128]	; 0x80
      do {
        c = *sFormat;
    20f8:	9b04      	ldr	r3, [sp, #16]
    20fa:	781b      	ldrb	r3, [r3, #0]
    20fc:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        switch (c) {
    2100:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    2104:	3b23      	subs	r3, #35	; 0x23
    2106:	2b0d      	cmp	r3, #13
    2108:	d83e      	bhi.n	2188 <SEGGER_RTT_vprintf+0xd8>
    210a:	a201      	add	r2, pc, #4	; (adr r2, 2110 <SEGGER_RTT_vprintf+0x60>)
    210c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2110:	00002179 	.word	0x00002179
    2114:	00002189 	.word	0x00002189
    2118:	00002189 	.word	0x00002189
    211c:	00002189 	.word	0x00002189
    2120:	00002189 	.word	0x00002189
    2124:	00002189 	.word	0x00002189
    2128:	00002189 	.word	0x00002189
    212c:	00002189 	.word	0x00002189
    2130:	00002169 	.word	0x00002169
    2134:	00002189 	.word	0x00002189
    2138:	00002149 	.word	0x00002149
    213c:	00002189 	.word	0x00002189
    2140:	00002189 	.word	0x00002189
    2144:	00002159 	.word	0x00002159
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    2148:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    214a:	f043 0301 	orr.w	r3, r3, #1
    214e:	931e      	str	r3, [sp, #120]	; 0x78
    2150:	9b04      	ldr	r3, [sp, #16]
    2152:	3301      	adds	r3, #1
    2154:	9304      	str	r3, [sp, #16]
    2156:	e01a      	b.n	218e <SEGGER_RTT_vprintf+0xde>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    2158:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    215a:	f043 0302 	orr.w	r3, r3, #2
    215e:	931e      	str	r3, [sp, #120]	; 0x78
    2160:	9b04      	ldr	r3, [sp, #16]
    2162:	3301      	adds	r3, #1
    2164:	9304      	str	r3, [sp, #16]
    2166:	e012      	b.n	218e <SEGGER_RTT_vprintf+0xde>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    2168:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    216a:	f043 0304 	orr.w	r3, r3, #4
    216e:	931e      	str	r3, [sp, #120]	; 0x78
    2170:	9b04      	ldr	r3, [sp, #16]
    2172:	3301      	adds	r3, #1
    2174:	9304      	str	r3, [sp, #16]
    2176:	e00a      	b.n	218e <SEGGER_RTT_vprintf+0xde>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    2178:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    217a:	f043 0308 	orr.w	r3, r3, #8
    217e:	931e      	str	r3, [sp, #120]	; 0x78
    2180:	9b04      	ldr	r3, [sp, #16]
    2182:	3301      	adds	r3, #1
    2184:	9304      	str	r3, [sp, #16]
    2186:	e002      	b.n	218e <SEGGER_RTT_vprintf+0xde>
        default:  v = 0; break;
    2188:	2300      	movs	r3, #0
    218a:	9320      	str	r3, [sp, #128]	; 0x80
    218c:	bf00      	nop
        }
      } while (v);
    218e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    2190:	2b00      	cmp	r3, #0
    2192:	d1b1      	bne.n	20f8 <SEGGER_RTT_vprintf+0x48>
      //
      // filter out field with
      //
      FieldWidth = 0u;
    2194:	2300      	movs	r3, #0
    2196:	931d      	str	r3, [sp, #116]	; 0x74
      do {
        c = *sFormat;
    2198:	9b04      	ldr	r3, [sp, #16]
    219a:	781b      	ldrb	r3, [r3, #0]
    219c:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c < '0') || (c > '9')) {
    21a0:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    21a4:	2b2f      	cmp	r3, #47	; 0x2f
    21a6:	d912      	bls.n	21ce <SEGGER_RTT_vprintf+0x11e>
    21a8:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    21ac:	2b39      	cmp	r3, #57	; 0x39
    21ae:	d80e      	bhi.n	21ce <SEGGER_RTT_vprintf+0x11e>
          break;
        }
        sFormat++;
    21b0:	9b04      	ldr	r3, [sp, #16]
    21b2:	3301      	adds	r3, #1
    21b4:	9304      	str	r3, [sp, #16]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    21b6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    21b8:	4613      	mov	r3, r2
    21ba:	009b      	lsls	r3, r3, #2
    21bc:	4413      	add	r3, r2
    21be:	005b      	lsls	r3, r3, #1
    21c0:	461a      	mov	r2, r3
    21c2:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    21c6:	4413      	add	r3, r2
    21c8:	3b30      	subs	r3, #48	; 0x30
    21ca:	931d      	str	r3, [sp, #116]	; 0x74
        c = *sFormat;
    21cc:	e7e4      	b.n	2198 <SEGGER_RTT_vprintf+0xe8>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
    21ce:	2300      	movs	r3, #0
    21d0:	931f      	str	r3, [sp, #124]	; 0x7c
      c = *sFormat;
    21d2:	9b04      	ldr	r3, [sp, #16]
    21d4:	781b      	ldrb	r3, [r3, #0]
    21d6:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      if (c == '.') {
    21da:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    21de:	2b2e      	cmp	r3, #46	; 0x2e
    21e0:	d11d      	bne.n	221e <SEGGER_RTT_vprintf+0x16e>
        sFormat++;
    21e2:	9b04      	ldr	r3, [sp, #16]
    21e4:	3301      	adds	r3, #1
    21e6:	9304      	str	r3, [sp, #16]
        do {
          c = *sFormat;
    21e8:	9b04      	ldr	r3, [sp, #16]
    21ea:	781b      	ldrb	r3, [r3, #0]
    21ec:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
          if ((c < '0') || (c > '9')) {
    21f0:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    21f4:	2b2f      	cmp	r3, #47	; 0x2f
    21f6:	d912      	bls.n	221e <SEGGER_RTT_vprintf+0x16e>
    21f8:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    21fc:	2b39      	cmp	r3, #57	; 0x39
    21fe:	d80e      	bhi.n	221e <SEGGER_RTT_vprintf+0x16e>
            break;
          }
          sFormat++;
    2200:	9b04      	ldr	r3, [sp, #16]
    2202:	3301      	adds	r3, #1
    2204:	9304      	str	r3, [sp, #16]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
    2206:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    2208:	4613      	mov	r3, r2
    220a:	009b      	lsls	r3, r3, #2
    220c:	4413      	add	r3, r2
    220e:	005b      	lsls	r3, r3, #1
    2210:	461a      	mov	r2, r3
    2212:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    2216:	4413      	add	r3, r2
    2218:	3b30      	subs	r3, #48	; 0x30
    221a:	931f      	str	r3, [sp, #124]	; 0x7c
          c = *sFormat;
    221c:	e7e4      	b.n	21e8 <SEGGER_RTT_vprintf+0x138>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
    221e:	9b04      	ldr	r3, [sp, #16]
    2220:	781b      	ldrb	r3, [r3, #0]
    2222:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
    2226:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    222a:	2b6c      	cmp	r3, #108	; 0x6c
    222c:	d003      	beq.n	2236 <SEGGER_RTT_vprintf+0x186>
    222e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    2232:	2b68      	cmp	r3, #104	; 0x68
    2234:	d107      	bne.n	2246 <SEGGER_RTT_vprintf+0x196>
          sFormat++;
    2236:	9b04      	ldr	r3, [sp, #16]
    2238:	3301      	adds	r3, #1
    223a:	9304      	str	r3, [sp, #16]
          c = *sFormat;
    223c:	9b04      	ldr	r3, [sp, #16]
    223e:	781b      	ldrb	r3, [r3, #0]
    2240:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c == 'l') || (c == 'h')) {
    2244:	e7ef      	b.n	2226 <SEGGER_RTT_vprintf+0x176>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    2246:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    224a:	2b25      	cmp	r3, #37	; 0x25
    224c:	f000 80d0 	beq.w	23f0 <SEGGER_RTT_vprintf+0x340>
    2250:	2b25      	cmp	r3, #37	; 0x25
    2252:	f2c0 80d3 	blt.w	23fc <SEGGER_RTT_vprintf+0x34c>
    2256:	2b78      	cmp	r3, #120	; 0x78
    2258:	f300 80d0 	bgt.w	23fc <SEGGER_RTT_vprintf+0x34c>
    225c:	2b58      	cmp	r3, #88	; 0x58
    225e:	f2c0 80cd 	blt.w	23fc <SEGGER_RTT_vprintf+0x34c>
    2262:	3b58      	subs	r3, #88	; 0x58
    2264:	2b20      	cmp	r3, #32
    2266:	f200 80c9 	bhi.w	23fc <SEGGER_RTT_vprintf+0x34c>
    226a:	a201      	add	r2, pc, #4	; (adr r2, 2270 <SEGGER_RTT_vprintf+0x1c0>)
    226c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2270:	00002361 	.word	0x00002361
    2274:	000023fd 	.word	0x000023fd
    2278:	000023fd 	.word	0x000023fd
    227c:	000023fd 	.word	0x000023fd
    2280:	000023fd 	.word	0x000023fd
    2284:	000023fd 	.word	0x000023fd
    2288:	000023fd 	.word	0x000023fd
    228c:	000023fd 	.word	0x000023fd
    2290:	000023fd 	.word	0x000023fd
    2294:	000023fd 	.word	0x000023fd
    2298:	000023fd 	.word	0x000023fd
    229c:	000022f5 	.word	0x000022f5
    22a0:	00002319 	.word	0x00002319
    22a4:	000023fd 	.word	0x000023fd
    22a8:	000023fd 	.word	0x000023fd
    22ac:	000023fd 	.word	0x000023fd
    22b0:	000023fd 	.word	0x000023fd
    22b4:	000023fd 	.word	0x000023fd
    22b8:	000023fd 	.word	0x000023fd
    22bc:	000023fd 	.word	0x000023fd
    22c0:	000023fd 	.word	0x000023fd
    22c4:	000023fd 	.word	0x000023fd
    22c8:	000023fd 	.word	0x000023fd
    22cc:	000023fd 	.word	0x000023fd
    22d0:	000023cd 	.word	0x000023cd
    22d4:	000023fd 	.word	0x000023fd
    22d8:	000023fd 	.word	0x000023fd
    22dc:	00002385 	.word	0x00002385
    22e0:	000023fd 	.word	0x000023fd
    22e4:	0000233d 	.word	0x0000233d
    22e8:	000023fd 	.word	0x000023fd
    22ec:	000023fd 	.word	0x000023fd
    22f0:	00002361 	.word	0x00002361
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
    22f4:	9b03      	ldr	r3, [sp, #12]
    22f6:	681b      	ldr	r3, [r3, #0]
    22f8:	1d19      	adds	r1, r3, #4
    22fa:	9a03      	ldr	r2, [sp, #12]
    22fc:	6011      	str	r1, [r2, #0]
    22fe:	681b      	ldr	r3, [r3, #0]
    2300:	9320      	str	r3, [sp, #128]	; 0x80
        c0 = (char)v;
    2302:	9b20      	ldr	r3, [sp, #128]	; 0x80
    2304:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
        _StoreChar(&BufferDesc, c0);
    2308:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    230c:	ab16      	add	r3, sp, #88	; 0x58
    230e:	4611      	mov	r1, r2
    2310:	4618      	mov	r0, r3
    2312:	f7ff fd3a 	bl	1d8a <_StoreChar>
        break;
    2316:	e072      	b.n	23fe <SEGGER_RTT_vprintf+0x34e>
      }
      case 'd':
        v = va_arg(*pParamList, int);
    2318:	9b03      	ldr	r3, [sp, #12]
    231a:	681b      	ldr	r3, [r3, #0]
    231c:	1d19      	adds	r1, r3, #4
    231e:	9a03      	ldr	r2, [sp, #12]
    2320:	6011      	str	r1, [r2, #0]
    2322:	681b      	ldr	r3, [r3, #0]
    2324:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
    2326:	a816      	add	r0, sp, #88	; 0x58
    2328:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    232a:	9301      	str	r3, [sp, #4]
    232c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    232e:	9300      	str	r3, [sp, #0]
    2330:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    2332:	220a      	movs	r2, #10
    2334:	9920      	ldr	r1, [sp, #128]	; 0x80
    2336:	f7ff fe15 	bl	1f64 <_PrintInt>
        break;
    233a:	e060      	b.n	23fe <SEGGER_RTT_vprintf+0x34e>
      case 'u':
        v = va_arg(*pParamList, int);
    233c:	9b03      	ldr	r3, [sp, #12]
    233e:	681b      	ldr	r3, [r3, #0]
    2340:	1d19      	adds	r1, r3, #4
    2342:	9a03      	ldr	r2, [sp, #12]
    2344:	6011      	str	r1, [r2, #0]
    2346:	681b      	ldr	r3, [r3, #0]
    2348:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
    234a:	9920      	ldr	r1, [sp, #128]	; 0x80
    234c:	a816      	add	r0, sp, #88	; 0x58
    234e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    2350:	9301      	str	r3, [sp, #4]
    2352:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    2354:	9300      	str	r3, [sp, #0]
    2356:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    2358:	220a      	movs	r2, #10
    235a:	f7ff fd55 	bl	1e08 <_PrintUnsigned>
        break;
    235e:	e04e      	b.n	23fe <SEGGER_RTT_vprintf+0x34e>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
    2360:	9b03      	ldr	r3, [sp, #12]
    2362:	681b      	ldr	r3, [r3, #0]
    2364:	1d19      	adds	r1, r3, #4
    2366:	9a03      	ldr	r2, [sp, #12]
    2368:	6011      	str	r1, [r2, #0]
    236a:	681b      	ldr	r3, [r3, #0]
    236c:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
    236e:	9920      	ldr	r1, [sp, #128]	; 0x80
    2370:	a816      	add	r0, sp, #88	; 0x58
    2372:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    2374:	9301      	str	r3, [sp, #4]
    2376:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    2378:	9300      	str	r3, [sp, #0]
    237a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    237c:	2210      	movs	r2, #16
    237e:	f7ff fd43 	bl	1e08 <_PrintUnsigned>
        break;
    2382:	e03c      	b.n	23fe <SEGGER_RTT_vprintf+0x34e>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
    2384:	9b03      	ldr	r3, [sp, #12]
    2386:	681b      	ldr	r3, [r3, #0]
    2388:	1d19      	adds	r1, r3, #4
    238a:	9a03      	ldr	r2, [sp, #12]
    238c:	6011      	str	r1, [r2, #0]
    238e:	681b      	ldr	r3, [r3, #0]
    2390:	931c      	str	r3, [sp, #112]	; 0x70
          if (s == NULL) {
    2392:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    2394:	2b00      	cmp	r3, #0
    2396:	d101      	bne.n	239c <SEGGER_RTT_vprintf+0x2ec>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
    2398:	4b2c      	ldr	r3, [pc, #176]	; (244c <SEGGER_RTT_vprintf+0x39c>)
    239a:	931c      	str	r3, [sp, #112]	; 0x70
          }
          do {
            c = *s;
    239c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    239e:	781b      	ldrb	r3, [r3, #0]
    23a0:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
            s++;
    23a4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    23a6:	3301      	adds	r3, #1
    23a8:	931c      	str	r3, [sp, #112]	; 0x70
            if (c == '\0') {
    23aa:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    23ae:	2b00      	cmp	r3, #0
    23b0:	d00a      	beq.n	23c8 <SEGGER_RTT_vprintf+0x318>
              break;
            }
           _StoreChar(&BufferDesc, c);
    23b2:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    23b6:	ab16      	add	r3, sp, #88	; 0x58
    23b8:	4611      	mov	r1, r2
    23ba:	4618      	mov	r0, r3
    23bc:	f7ff fce5 	bl	1d8a <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
    23c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    23c2:	2b00      	cmp	r3, #0
    23c4:	daea      	bge.n	239c <SEGGER_RTT_vprintf+0x2ec>
        }
        break;
    23c6:	e01a      	b.n	23fe <SEGGER_RTT_vprintf+0x34e>
              break;
    23c8:	bf00      	nop
        break;
    23ca:	e018      	b.n	23fe <SEGGER_RTT_vprintf+0x34e>
      case 'p':
        v = va_arg(*pParamList, int);
    23cc:	9b03      	ldr	r3, [sp, #12]
    23ce:	681b      	ldr	r3, [r3, #0]
    23d0:	1d19      	adds	r1, r3, #4
    23d2:	9a03      	ldr	r2, [sp, #12]
    23d4:	6011      	str	r1, [r2, #0]
    23d6:	681b      	ldr	r3, [r3, #0]
    23d8:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    23da:	9920      	ldr	r1, [sp, #128]	; 0x80
    23dc:	a816      	add	r0, sp, #88	; 0x58
    23de:	2300      	movs	r3, #0
    23e0:	9301      	str	r3, [sp, #4]
    23e2:	2308      	movs	r3, #8
    23e4:	9300      	str	r3, [sp, #0]
    23e6:	2308      	movs	r3, #8
    23e8:	2210      	movs	r2, #16
    23ea:	f7ff fd0d 	bl	1e08 <_PrintUnsigned>
        break;
    23ee:	e006      	b.n	23fe <SEGGER_RTT_vprintf+0x34e>
      case '%':
        _StoreChar(&BufferDesc, '%');
    23f0:	ab16      	add	r3, sp, #88	; 0x58
    23f2:	2125      	movs	r1, #37	; 0x25
    23f4:	4618      	mov	r0, r3
    23f6:	f7ff fcc8 	bl	1d8a <_StoreChar>
        break;
    23fa:	e000      	b.n	23fe <SEGGER_RTT_vprintf+0x34e>
      default:
        break;
    23fc:	bf00      	nop
      }
      sFormat++;
    23fe:	9b04      	ldr	r3, [sp, #16]
    2400:	3301      	adds	r3, #1
    2402:	9304      	str	r3, [sp, #16]
    2404:	e006      	b.n	2414 <SEGGER_RTT_vprintf+0x364>
    } else {
      _StoreChar(&BufferDesc, c);
    2406:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    240a:	ab16      	add	r3, sp, #88	; 0x58
    240c:	4611      	mov	r1, r2
    240e:	4618      	mov	r0, r3
    2410:	f7ff fcbb 	bl	1d8a <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
    2414:	9b19      	ldr	r3, [sp, #100]	; 0x64
    2416:	2b00      	cmp	r3, #0
    2418:	f6bf ae59 	bge.w	20ce <SEGGER_RTT_vprintf+0x1e>
    241c:	e000      	b.n	2420 <SEGGER_RTT_vprintf+0x370>
      break;
    241e:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
    2420:	9b19      	ldr	r3, [sp, #100]	; 0x64
    2422:	2b00      	cmp	r3, #0
    2424:	dd0c      	ble.n	2440 <SEGGER_RTT_vprintf+0x390>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
    2426:	9b18      	ldr	r3, [sp, #96]	; 0x60
    2428:	2b00      	cmp	r3, #0
    242a:	d005      	beq.n	2438 <SEGGER_RTT_vprintf+0x388>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    242c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    242e:	ab06      	add	r3, sp, #24
    2430:	4619      	mov	r1, r3
    2432:	9805      	ldr	r0, [sp, #20]
    2434:	f7ff fc7e 	bl	1d34 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
    2438:	9b19      	ldr	r3, [sp, #100]	; 0x64
    243a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    243c:	4413      	add	r3, r2
    243e:	9319      	str	r3, [sp, #100]	; 0x64
  }
  return BufferDesc.ReturnValue;
    2440:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
    2442:	4618      	mov	r0, r3
    2444:	b023      	add	sp, #140	; 0x8c
    2446:	f85d fb04 	ldr.w	pc, [sp], #4
    244a:	bf00      	nop
    244c:	00019038 	.word	0x00019038

00002450 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
    2450:	b40e      	push	{r1, r2, r3}
    2452:	b500      	push	{lr}
    2454:	b084      	sub	sp, #16
    2456:	9001      	str	r0, [sp, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
    2458:	ab06      	add	r3, sp, #24
    245a:	9302      	str	r3, [sp, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
    245c:	ab02      	add	r3, sp, #8
    245e:	461a      	mov	r2, r3
    2460:	9905      	ldr	r1, [sp, #20]
    2462:	9801      	ldr	r0, [sp, #4]
    2464:	f7ff fe24 	bl	20b0 <SEGGER_RTT_vprintf>
    2468:	9003      	str	r0, [sp, #12]
  va_end(ParamList);
  return r;
    246a:	9b03      	ldr	r3, [sp, #12]
}
    246c:	4618      	mov	r0, r3
    246e:	b004      	add	sp, #16
    2470:	f85d eb04 	ldr.w	lr, [sp], #4
    2474:	b003      	add	sp, #12
    2476:	4770      	bx	lr

00002478 <MCU_clocks>:
 *  -SIRCDIV1_CLK -->8 Mhz
 *  -SIRCDIV2_CLK -->8 Mhz
 *  -SOSCDIV1_CLK  -->Disabled
 *  -SOSCDIV2_CLK  -->Disabled
 */
void MCU_clocks( void ) {
    2478:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );//Initializing MCU driver
    247a:	4805      	ldr	r0, [pc, #20]	; (2490 <MCU_clocks+0x18>)
    247c:	f004 fa1e 	bl	68bc <Mcu_Init>
    Mcu_SetMode( Run_mode );//MCU on run mode.
    2480:	2000      	movs	r0, #0
    2482:	f004 facf 	bl	6a24 <Mcu_SetMode>
    Mcu_InitClock( Clocks_conf_0 );//Executing clock configurations established in container.
    2486:	2000      	movs	r0, #0
    2488:	f004 fa96 	bl	69b8 <Mcu_InitClock>

    //Configuring Pll clock.
    /*while ( Mcu_GetPllStatus() != MCU_PLL_LOCKED );//Waiting until PLL is locked.
    Mcu_DistributePllClock();//Executing pll clock configuration established in container.*/
}
    248c:	bf00      	nop
    248e:	bd08      	pop	{r3, pc}
    2490:	0001a5f8 	.word	0x0001a5f8

00002494 <EcuM_Init>:
/**
 * @brief This function initialices the microcontroller and the peripherals
 * 
 * 
 */
void EcuM_Init( void ) {   
    2494:	b508      	push	{r3, lr}
    MCU_clocks();
    2496:	f7ff ffef 	bl	2478 <MCU_clocks>
    OsIf_Init( NULL_PTR );  //Init Osif timer.
    249a:	2000      	movs	r0, #0
    249c:	f000 fbb7 	bl	2c0e <OsIf_Init>
    Platform_Init( NULL_PTR );  //Init platform driver and configuration.
    24a0:	2000      	movs	r0, #0
    24a2:	f000 fa57 	bl	2954 <Platform_Init>
    Port_Init( &Port_Config );  //Init port driver and configuration.
    24a6:	480d      	ldr	r0, [pc, #52]	; (24dc <EcuM_Init+0x48>)
    24a8:	f004 fea0 	bl	71ec <Port_Init>
    Adc_Init( &Adc_Config );    //Init Adc driver and configuration.
    24ac:	480c      	ldr	r0, [pc, #48]	; (24e0 <EcuM_Init+0x4c>)
    24ae:	f007 fd2f 	bl	9f10 <Adc_Init>
    Pwm_Init( &Pwm_Config );    //Init Pwm driver and configuration.
    24b2:	480c      	ldr	r0, [pc, #48]	; (24e4 <EcuM_Init+0x50>)
    24b4:	f00e fcec 	bl	10e90 <Pwm_Init>
    
    //Configuring interleave for PTB1 and PTB13.
    Port_Ci_Port_Ip_SetMuxModeSel( IP_PORTB, 1, PORT_MUX_ADC_INTERLEAVE );
    24b8:	2208      	movs	r2, #8
    24ba:	2101      	movs	r1, #1
    24bc:	480a      	ldr	r0, [pc, #40]	; (24e8 <EcuM_Init+0x54>)
    24be:	f005 f921 	bl	7704 <Port_Ci_Port_Ip_SetMuxModeSel>
    Port_Ci_Port_Ip_SetMuxModeSel( IP_PORTB, 13, PORT_MUX_ADC_INTERLEAVE );
    24c2:	2208      	movs	r2, #8
    24c4:	210d      	movs	r1, #13
    24c6:	4808      	ldr	r0, [pc, #32]	; (24e8 <EcuM_Init+0x54>)
    24c8:	f005 f91c 	bl	7704 <Port_Ci_Port_Ip_SetMuxModeSel>

    IoHwAb_Init0( NULL_PTR );  //Initializing IO hardware abstractions.
    24cc:	2000      	movs	r0, #0
    24ce:	f7ff f9db 	bl	1888 <IoHwAb_Init0>
    Det_Init(); //Initializing det.
    24d2:	f015 fe5b 	bl	1818c <Det_Init>
}
    24d6:	bf00      	nop
    24d8:	bd08      	pop	{r3, pc}
    24da:	bf00      	nop
    24dc:	0001aab0 	.word	0x0001aab0
    24e0:	00019e84 	.word	0x00019e84
    24e4:	0001ab20 	.word	0x0001ab20
    24e8:	4004a000 	.word	0x4004a000

000024ec <memcpy>:
    24ec:	440a      	add	r2, r1
    24ee:	4291      	cmp	r1, r2
    24f0:	f100 33ff 	add.w	r3, r0, #4294967295
    24f4:	d100      	bne.n	24f8 <memcpy+0xc>
    24f6:	4770      	bx	lr
    24f8:	b510      	push	{r4, lr}
    24fa:	f811 4b01 	ldrb.w	r4, [r1], #1
    24fe:	f803 4f01 	strb.w	r4, [r3, #1]!
    2502:	4291      	cmp	r1, r2
    2504:	d1f9      	bne.n	24fa <memcpy+0xe>
    2506:	bd10      	pop	{r4, pc}

00002508 <memset>:
    2508:	4402      	add	r2, r0
    250a:	4603      	mov	r3, r0
    250c:	4293      	cmp	r3, r2
    250e:	d100      	bne.n	2512 <memset+0xa>
    2510:	4770      	bx	lr
    2512:	f803 1b01 	strb.w	r1, [r3], #1
    2516:	e7f9      	b.n	250c <memset+0x4>

00002518 <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    2518:	b500      	push	{lr}
    251a:	b087      	sub	sp, #28
    251c:	9003      	str	r0, [sp, #12]
    251e:	9102      	str	r1, [sp, #8]
    2520:	9201      	str	r2, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number - dev_irqNumber is used to avoid compiler warning */
    sint32 dev_irqNumber = (sint32)eIrqNumber;
    2522:	9b03      	ldr	r3, [sp, #12]
    2524:	9305      	str	r3, [sp, #20]
    DevAssert((sint32)INT_CTRL_IP_IRQ_MIN <= dev_irqNumber);
    2526:	9b05      	ldr	r3, [sp, #20]
    2528:	43db      	mvns	r3, r3
    252a:	0fdb      	lsrs	r3, r3, #31
    252c:	b2db      	uxtb	r3, r3
    252e:	4618      	mov	r0, r3
    2530:	f7fe f9ca 	bl	8c8 <DevAssert>
    DevAssert(dev_irqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    2534:	9b05      	ldr	r3, [sp, #20]
    2536:	2b7a      	cmp	r3, #122	; 0x7a
    2538:	bfd4      	ite	le
    253a:	2301      	movle	r3, #1
    253c:	2300      	movgt	r3, #0
    253e:	b2db      	uxtb	r3, r3
    2540:	4618      	mov	r0, r3
    2542:	f7fe f9c1 	bl	8c8 <DevAssert>
#if (MCAL_PLATFORM_ARM == MCAL_ARM_MARCH)
#if defined(S32K3XX) || defined(SAF85) || defined(S32R41)
    DevAssert(S32_SCB->VTOR >= (uint32)__RAM_INTERRUPT_START);
#else
    DevAssert(S32_SCB->VTOR >= (uint32)__INT_SRAM_START);
    2546:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    254a:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    254e:	4a14      	ldr	r2, [pc, #80]	; (25a0 <IntCtrl_Ip_InstallHandlerPrivileged+0x88>)
    2550:	4293      	cmp	r3, r2
    2552:	bf2c      	ite	cs
    2554:	2301      	movcs	r3, #1
    2556:	2300      	movcc	r3, #0
    2558:	b2db      	uxtb	r3, r3
    255a:	4618      	mov	r0, r3
    255c:	f7fe f9b4 	bl	8c8 <DevAssert>

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
    2560:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2564:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    2568:	9304      	str	r3, [sp, #16]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
    256a:	9b01      	ldr	r3, [sp, #4]
    256c:	2b00      	cmp	r3, #0
    256e:	d007      	beq.n	2580 <IntCtrl_Ip_InstallHandlerPrivileged+0x68>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
    2570:	9b03      	ldr	r3, [sp, #12]
    2572:	3310      	adds	r3, #16
    2574:	009b      	lsls	r3, r3, #2
    2576:	9a04      	ldr	r2, [sp, #16]
    2578:	4413      	add	r3, r2
    257a:	681a      	ldr	r2, [r3, #0]
    257c:	9b01      	ldr	r3, [sp, #4]
    257e:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
    2580:	9b03      	ldr	r3, [sp, #12]
    2582:	3310      	adds	r3, #16
    2584:	009b      	lsls	r3, r3, #2
    2586:	9a04      	ldr	r2, [sp, #16]
    2588:	4413      	add	r3, r2
    258a:	9a02      	ldr	r2, [sp, #8]
    258c:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
    258e:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
    2592:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
    2596:	bf00      	nop
    2598:	b007      	add	sp, #28
    259a:	f85d fb04 	ldr.w	pc, [sp], #4
    259e:	bf00      	nop
    25a0:	1fff8000 	.word	0x1fff8000

000025a4 <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
    25a4:	b500      	push	{lr}
    25a6:	b083      	sub	sp, #12
    25a8:	9001      	str	r0, [sp, #4]

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number - dev_irqNumber is used to avoid compiler warning */
    DevAssert(0 <= (sint32)eIrqNumber);
    25aa:	9b01      	ldr	r3, [sp, #4]
    25ac:	43db      	mvns	r3, r3
    25ae:	0fdb      	lsrs	r3, r3, #31
    25b0:	b2db      	uxtb	r3, r3
    25b2:	4618      	mov	r0, r3
    25b4:	f7fe f988 	bl	8c8 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    25b8:	9b01      	ldr	r3, [sp, #4]
    25ba:	2b7a      	cmp	r3, #122	; 0x7a
    25bc:	bfd4      	ite	le
    25be:	2301      	movle	r3, #1
    25c0:	2300      	movgt	r3, #0
    25c2:	b2db      	uxtb	r3, r3
    25c4:	4618      	mov	r0, r3
    25c6:	f7fe f97f 	bl	8c8 <DevAssert>
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    25ca:	9b01      	ldr	r3, [sp, #4]
    25cc:	f003 021f 	and.w	r2, r3, #31
    25d0:	4905      	ldr	r1, [pc, #20]	; (25e8 <IntCtrl_Ip_EnableIrqPrivileged+0x44>)
    25d2:	9b01      	ldr	r3, [sp, #4]
    25d4:	095b      	lsrs	r3, r3, #5
    25d6:	2001      	movs	r0, #1
    25d8:	fa00 f202 	lsl.w	r2, r0, r2
    25dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    25e0:	bf00      	nop
    25e2:	b003      	add	sp, #12
    25e4:	f85d fb04 	ldr.w	pc, [sp], #4
    25e8:	e000e100 	.word	0xe000e100

000025ec <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
    25ec:	b500      	push	{lr}
    25ee:	b083      	sub	sp, #12
    25f0:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number - dev_irqNumber is used to avoid compiler warning */
    DevAssert(0 <= (sint32)eIrqNumber);
    25f2:	9b01      	ldr	r3, [sp, #4]
    25f4:	43db      	mvns	r3, r3
    25f6:	0fdb      	lsrs	r3, r3, #31
    25f8:	b2db      	uxtb	r3, r3
    25fa:	4618      	mov	r0, r3
    25fc:	f7fe f964 	bl	8c8 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    2600:	9b01      	ldr	r3, [sp, #4]
    2602:	2b7a      	cmp	r3, #122	; 0x7a
    2604:	bfd4      	ite	le
    2606:	2301      	movle	r3, #1
    2608:	2300      	movgt	r3, #0
    260a:	b2db      	uxtb	r3, r3
    260c:	4618      	mov	r0, r3
    260e:	f7fe f95b 	bl	8c8 <DevAssert>
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    2612:	9b01      	ldr	r3, [sp, #4]
    2614:	f003 021f 	and.w	r2, r3, #31
    2618:	4906      	ldr	r1, [pc, #24]	; (2634 <IntCtrl_Ip_DisableIrqPrivileged+0x48>)
    261a:	9b01      	ldr	r3, [sp, #4]
    261c:	095b      	lsrs	r3, r3, #5
    261e:	2001      	movs	r0, #1
    2620:	fa00 f202 	lsl.w	r2, r0, r2
    2624:	3320      	adds	r3, #32
    2626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    262a:	bf00      	nop
    262c:	b003      	add	sp, #12
    262e:	f85d fb04 	ldr.w	pc, [sp], #4
    2632:	bf00      	nop
    2634:	e000e100 	.word	0xe000e100

00002638 <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    2638:	b500      	push	{lr}
    263a:	b085      	sub	sp, #20
    263c:	9001      	str	r0, [sp, #4]
    263e:	460b      	mov	r3, r1
    2640:	f88d 3003 	strb.w	r3, [sp, #3]

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)

    /* Check IRQ number and priority - dev_irqNumber is used to avoid compiler warning */
    DevAssert((sint32)INT_CTRL_IP_IRQ_MIN <= (sint32)eIrqNumber);
    2644:	9b01      	ldr	r3, [sp, #4]
    2646:	43db      	mvns	r3, r3
    2648:	0fdb      	lsrs	r3, r3, #31
    264a:	b2db      	uxtb	r3, r3
    264c:	4618      	mov	r0, r3
    264e:	f7fe f93b 	bl	8c8 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    2652:	9b01      	ldr	r3, [sp, #4]
    2654:	2b7a      	cmp	r3, #122	; 0x7a
    2656:	bfd4      	ite	le
    2658:	2301      	movle	r3, #1
    265a:	2300      	movgt	r3, #0
    265c:	b2db      	uxtb	r3, r3
    265e:	4618      	mov	r0, r3
    2660:	f7fe f932 	bl	8c8 <DevAssert>
#if (INT_CTRL_IP_CORTEXM == STD_ON)
    DevAssert(u8Priority < (uint8)(1U << INT_CTRL_IP_NVIC_PRIO_BITS));
    2664:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2668:	2b0f      	cmp	r3, #15
    266a:	bf94      	ite	ls
    266c:	2301      	movls	r3, #1
    266e:	2300      	movhi	r3, #0
    2670:	b2db      	uxtb	r3, r3
    2672:	4618      	mov	r0, r3
    2674:	f7fe f928 	bl	8c8 <DevAssert>
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    2678:	2304      	movs	r3, #4
    267a:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
    267e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    2682:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2686:	fa02 f103 	lsl.w	r1, r2, r3
    268a:	4a05      	ldr	r2, [pc, #20]	; (26a0 <IntCtrl_Ip_SetPriorityPrivileged+0x68>)
    268c:	9b01      	ldr	r3, [sp, #4]
    268e:	b2c9      	uxtb	r1, r1
    2690:	4413      	add	r3, r2
    2692:	460a      	mov	r2, r1
    2694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
    2698:	bf00      	nop
    269a:	b005      	add	sp, #20
    269c:	f85d fb04 	ldr.w	pc, [sp], #4
    26a0:	e000e100 	.word	0xe000e100

000026a4 <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
    26a4:	b500      	push	{lr}
    26a6:	b085      	sub	sp, #20
    26a8:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)

    /* Check IRQ number */
    DevAssert(INT_CTRL_IP_IRQ_MIN <= eIrqNumber);
    26aa:	9b01      	ldr	r3, [sp, #4]
    26ac:	43db      	mvns	r3, r3
    26ae:	0fdb      	lsrs	r3, r3, #31
    26b0:	b2db      	uxtb	r3, r3
    26b2:	4618      	mov	r0, r3
    26b4:	f7fe f908 	bl	8c8 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    26b8:	9b01      	ldr	r3, [sp, #4]
    26ba:	2b7a      	cmp	r3, #122	; 0x7a
    26bc:	bfd4      	ite	le
    26be:	2301      	movle	r3, #1
    26c0:	2300      	movgt	r3, #0
    26c2:	b2db      	uxtb	r3, r3
    26c4:	4618      	mov	r0, r3
    26c6:	f7fe f8ff 	bl	8c8 <DevAssert>

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    26ca:	2304      	movs	r3, #4
    26cc:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
    26d0:	4a09      	ldr	r2, [pc, #36]	; (26f8 <IntCtrl_Ip_GetPriorityPrivileged+0x54>)
    26d2:	9b01      	ldr	r3, [sp, #4]
    26d4:	4413      	add	r3, r2
    26d6:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
    26da:	b2db      	uxtb	r3, r3
    26dc:	461a      	mov	r2, r3
    26de:	f89d 300f 	ldrb.w	r3, [sp, #15]
    26e2:	fa42 f303 	asr.w	r3, r2, r3
    26e6:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
    26ea:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    26ee:	4618      	mov	r0, r3
    26f0:	b005      	add	sp, #20
    26f2:	f85d fb04 	ldr.w	pc, [sp], #4
    26f6:	bf00      	nop
    26f8:	e000e100 	.word	0xe000e100

000026fc <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
    26fc:	b500      	push	{lr}
    26fe:	b083      	sub	sp, #12
    2700:	9001      	str	r0, [sp, #4]

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number */
    DevAssert(0 <= (sint32)eIrqNumber);
    2702:	9b01      	ldr	r3, [sp, #4]
    2704:	43db      	mvns	r3, r3
    2706:	0fdb      	lsrs	r3, r3, #31
    2708:	b2db      	uxtb	r3, r3
    270a:	4618      	mov	r0, r3
    270c:	f7fe f8dc 	bl	8c8 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    2710:	9b01      	ldr	r3, [sp, #4]
    2712:	2b7a      	cmp	r3, #122	; 0x7a
    2714:	bfd4      	ite	le
    2716:	2301      	movle	r3, #1
    2718:	2300      	movgt	r3, #0
    271a:	b2db      	uxtb	r3, r3
    271c:	4618      	mov	r0, r3
    271e:	f7fe f8d3 	bl	8c8 <DevAssert>
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    2722:	9b01      	ldr	r3, [sp, #4]
    2724:	f003 021f 	and.w	r2, r3, #31
    2728:	4906      	ldr	r1, [pc, #24]	; (2744 <IntCtrl_Ip_ClearPendingPrivileged+0x48>)
    272a:	9b01      	ldr	r3, [sp, #4]
    272c:	095b      	lsrs	r3, r3, #5
    272e:	2001      	movs	r0, #1
    2730:	fa00 f202 	lsl.w	r2, r0, r2
    2734:	3360      	adds	r3, #96	; 0x60
    2736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
    273a:	bf00      	nop
    273c:	b003      	add	sp, #12
    273e:	f85d fb04 	ldr.w	pc, [sp], #4
    2742:	bf00      	nop
    2744:	e000e100 	.word	0xe000e100

00002748 <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    2748:	b500      	push	{lr}
    274a:	b085      	sub	sp, #20
    274c:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_ENABLE_VTOR_CONFIG == STD_ON)
    S32_SCB->VTOR = pIntCtrlCtrlConfig->u32VectorTableAddress;
#endif

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    274e:	9b01      	ldr	r3, [sp, #4]
    2750:	2b00      	cmp	r3, #0
    2752:	bf14      	ite	ne
    2754:	2301      	movne	r3, #1
    2756:	2300      	moveq	r3, #0
    2758:	b2db      	uxtb	r3, r3
    275a:	4618      	mov	r0, r3
    275c:	f7fe f8b4 	bl	8c8 <DevAssert>
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
    2760:	9b01      	ldr	r3, [sp, #4]
    2762:	681b      	ldr	r3, [r3, #0]
    2764:	2b59      	cmp	r3, #89	; 0x59
    2766:	bf94      	ite	ls
    2768:	2301      	movls	r3, #1
    276a:	2300      	movhi	r3, #0
    276c:	b2db      	uxtb	r3, r3
    276e:	4618      	mov	r0, r3
    2770:	f7fe f8aa 	bl	8c8 <DevAssert>
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    2774:	2300      	movs	r3, #0
    2776:	9303      	str	r3, [sp, #12]
    2778:	e05d      	b.n	2836 <IntCtrl_Ip_Init+0xee>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    277a:	9b01      	ldr	r3, [sp, #4]
    277c:	6859      	ldr	r1, [r3, #4]
    277e:	9a03      	ldr	r2, [sp, #12]
    2780:	4613      	mov	r3, r2
    2782:	005b      	lsls	r3, r3, #1
    2784:	4413      	add	r3, r2
    2786:	009b      	lsls	r3, r3, #2
    2788:	440b      	add	r3, r1
    278a:	681b      	ldr	r3, [r3, #0]
    278c:	4618      	mov	r0, r3
    278e:	f000 f899 	bl	28c4 <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    2792:	9b01      	ldr	r3, [sp, #4]
    2794:	6859      	ldr	r1, [r3, #4]
    2796:	9a03      	ldr	r2, [sp, #12]
    2798:	4613      	mov	r3, r2
    279a:	005b      	lsls	r3, r3, #1
    279c:	4413      	add	r3, r2
    279e:	009b      	lsls	r3, r3, #2
    27a0:	440b      	add	r3, r1
    27a2:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    27a4:	9b01      	ldr	r3, [sp, #4]
    27a6:	6859      	ldr	r1, [r3, #4]
    27a8:	9a03      	ldr	r2, [sp, #12]
    27aa:	4613      	mov	r3, r2
    27ac:	005b      	lsls	r3, r3, #1
    27ae:	4413      	add	r3, r2
    27b0:	009b      	lsls	r3, r3, #2
    27b2:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    27b4:	795b      	ldrb	r3, [r3, #5]
    27b6:	4619      	mov	r1, r3
    27b8:	f000 f869 	bl	288e <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    27bc:	9b01      	ldr	r3, [sp, #4]
    27be:	6859      	ldr	r1, [r3, #4]
    27c0:	9a03      	ldr	r2, [sp, #12]
    27c2:	4613      	mov	r3, r2
    27c4:	005b      	lsls	r3, r3, #1
    27c6:	4413      	add	r3, r2
    27c8:	009b      	lsls	r3, r3, #2
    27ca:	440b      	add	r3, r1
    27cc:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    27ce:	9b01      	ldr	r3, [sp, #4]
    27d0:	6859      	ldr	r1, [r3, #4]
    27d2:	9a03      	ldr	r2, [sp, #12]
    27d4:	4613      	mov	r3, r2
    27d6:	005b      	lsls	r3, r3, #1
    27d8:	4413      	add	r3, r2
    27da:	009b      	lsls	r3, r3, #2
    27dc:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    27de:	689b      	ldr	r3, [r3, #8]
    27e0:	2200      	movs	r2, #0
    27e2:	4619      	mov	r1, r3
    27e4:	f000 f831 	bl	284a <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    27e8:	9b01      	ldr	r3, [sp, #4]
    27ea:	6859      	ldr	r1, [r3, #4]
    27ec:	9a03      	ldr	r2, [sp, #12]
    27ee:	4613      	mov	r3, r2
    27f0:	005b      	lsls	r3, r3, #1
    27f2:	4413      	add	r3, r2
    27f4:	009b      	lsls	r3, r3, #2
    27f6:	440b      	add	r3, r1
    27f8:	791b      	ldrb	r3, [r3, #4]
    27fa:	2b00      	cmp	r3, #0
    27fc:	d00c      	beq.n	2818 <IntCtrl_Ip_Init+0xd0>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    27fe:	9b01      	ldr	r3, [sp, #4]
    2800:	6859      	ldr	r1, [r3, #4]
    2802:	9a03      	ldr	r2, [sp, #12]
    2804:	4613      	mov	r3, r2
    2806:	005b      	lsls	r3, r3, #1
    2808:	4413      	add	r3, r2
    280a:	009b      	lsls	r3, r3, #2
    280c:	440b      	add	r3, r1
    280e:	681b      	ldr	r3, [r3, #0]
    2810:	4618      	mov	r0, r3
    2812:	f000 f828 	bl	2866 <IntCtrl_Ip_EnableIrq>
    2816:	e00b      	b.n	2830 <IntCtrl_Ip_Init+0xe8>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    2818:	9b01      	ldr	r3, [sp, #4]
    281a:	6859      	ldr	r1, [r3, #4]
    281c:	9a03      	ldr	r2, [sp, #12]
    281e:	4613      	mov	r3, r2
    2820:	005b      	lsls	r3, r3, #1
    2822:	4413      	add	r3, r2
    2824:	009b      	lsls	r3, r3, #2
    2826:	440b      	add	r3, r1
    2828:	681b      	ldr	r3, [r3, #0]
    282a:	4618      	mov	r0, r3
    282c:	f000 f825 	bl	287a <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    2830:	9b03      	ldr	r3, [sp, #12]
    2832:	3301      	adds	r3, #1
    2834:	9303      	str	r3, [sp, #12]
    2836:	9b01      	ldr	r3, [sp, #4]
    2838:	681b      	ldr	r3, [r3, #0]
    283a:	9a03      	ldr	r2, [sp, #12]
    283c:	429a      	cmp	r2, r3
    283e:	d39c      	bcc.n	277a <IntCtrl_Ip_Init+0x32>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
    2840:	2300      	movs	r3, #0
}
    2842:	4618      	mov	r0, r3
    2844:	b005      	add	sp, #20
    2846:	f85d fb04 	ldr.w	pc, [sp], #4

0000284a <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    284a:	b500      	push	{lr}
    284c:	b085      	sub	sp, #20
    284e:	9003      	str	r0, [sp, #12]
    2850:	9102      	str	r1, [sp, #8]
    2852:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
    2854:	9a01      	ldr	r2, [sp, #4]
    2856:	9902      	ldr	r1, [sp, #8]
    2858:	9803      	ldr	r0, [sp, #12]
    285a:	f7ff fe5d 	bl	2518 <IntCtrl_Ip_InstallHandlerPrivileged>
}
    285e:	bf00      	nop
    2860:	b005      	add	sp, #20
    2862:	f85d fb04 	ldr.w	pc, [sp], #4

00002866 <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
    2866:	b500      	push	{lr}
    2868:	b083      	sub	sp, #12
    286a:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
    286c:	9801      	ldr	r0, [sp, #4]
    286e:	f7ff fe99 	bl	25a4 <IntCtrl_Ip_EnableIrqPrivileged>
}
    2872:	bf00      	nop
    2874:	b003      	add	sp, #12
    2876:	f85d fb04 	ldr.w	pc, [sp], #4

0000287a <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
    287a:	b500      	push	{lr}
    287c:	b083      	sub	sp, #12
    287e:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
    2880:	9801      	ldr	r0, [sp, #4]
    2882:	f7ff feb3 	bl	25ec <IntCtrl_Ip_DisableIrqPrivileged>
}
    2886:	bf00      	nop
    2888:	b003      	add	sp, #12
    288a:	f85d fb04 	ldr.w	pc, [sp], #4

0000288e <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    288e:	b500      	push	{lr}
    2890:	b083      	sub	sp, #12
    2892:	9001      	str	r0, [sp, #4]
    2894:	460b      	mov	r3, r1
    2896:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
    289a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    289e:	4619      	mov	r1, r3
    28a0:	9801      	ldr	r0, [sp, #4]
    28a2:	f7ff fec9 	bl	2638 <IntCtrl_Ip_SetPriorityPrivileged>
}
    28a6:	bf00      	nop
    28a8:	b003      	add	sp, #12
    28aa:	f85d fb04 	ldr.w	pc, [sp], #4

000028ae <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
    28ae:	b500      	push	{lr}
    28b0:	b083      	sub	sp, #12
    28b2:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
    28b4:	9801      	ldr	r0, [sp, #4]
    28b6:	f7ff fef5 	bl	26a4 <IntCtrl_Ip_GetPriorityPrivileged>
    28ba:	4603      	mov	r3, r0
}
    28bc:	4618      	mov	r0, r3
    28be:	b003      	add	sp, #12
    28c0:	f85d fb04 	ldr.w	pc, [sp], #4

000028c4 <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
    28c4:	b500      	push	{lr}
    28c6:	b083      	sub	sp, #12
    28c8:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
    28ca:	9801      	ldr	r0, [sp, #4]
    28cc:	f7ff ff16 	bl	26fc <IntCtrl_Ip_ClearPendingPrivileged>
}
    28d0:	bf00      	nop
    28d2:	b003      	add	sp, #12
    28d4:	f85d fb04 	ldr.w	pc, [sp], #4

000028d8 <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    28d8:	b500      	push	{lr}
    28da:	b083      	sub	sp, #12
    28dc:	9001      	str	r0, [sp, #4]
    28de:	460b      	mov	r3, r1
    28e0:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
    28e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    28e8:	2b00      	cmp	r3, #0
    28ea:	d003      	beq.n	28f4 <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
    28ec:	9801      	ldr	r0, [sp, #4]
    28ee:	f7ff ffba 	bl	2866 <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
    28f2:	e002      	b.n	28fa <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    28f4:	9801      	ldr	r0, [sp, #4]
    28f6:	f7ff ffc0 	bl	287a <IntCtrl_Ip_DisableIrq>
}
    28fa:	bf00      	nop
    28fc:	b003      	add	sp, #12
    28fe:	f85d fb04 	ldr.w	pc, [sp], #4

00002902 <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    2902:	b500      	push	{lr}
    2904:	b083      	sub	sp, #12
    2906:	9001      	str	r0, [sp, #4]
    2908:	460b      	mov	r3, r1
    290a:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
    290e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2912:	4619      	mov	r1, r3
    2914:	9801      	ldr	r0, [sp, #4]
    2916:	f7ff ffba 	bl	288e <IntCtrl_Ip_SetPriority>
}
    291a:	bf00      	nop
    291c:	b003      	add	sp, #12
    291e:	f85d fb04 	ldr.w	pc, [sp], #4

00002922 <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
    2922:	b500      	push	{lr}
    2924:	b083      	sub	sp, #12
    2926:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
    2928:	9801      	ldr	r0, [sp, #4]
    292a:	f7ff ffc0 	bl	28ae <IntCtrl_Ip_GetPriority>
    292e:	4603      	mov	r3, r0
}
    2930:	4618      	mov	r0, r3
    2932:	b003      	add	sp, #12
    2934:	f85d fb04 	ldr.w	pc, [sp], #4

00002938 <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    2938:	b500      	push	{lr}
    293a:	b085      	sub	sp, #20
    293c:	9003      	str	r0, [sp, #12]
    293e:	9102      	str	r1, [sp, #8]
    2940:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    2942:	9a01      	ldr	r2, [sp, #4]
    2944:	9902      	ldr	r1, [sp, #8]
    2946:	9803      	ldr	r0, [sp, #12]
    2948:	f7ff ff7f 	bl	284a <IntCtrl_Ip_InstallHandler>
}
    294c:	bf00      	nop
    294e:	b005      	add	sp, #20
    2950:	f85d fb04 	ldr.w	pc, [sp], #4

00002954 <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
    2954:	b500      	push	{lr}
    2956:	b085      	sub	sp, #20
    2958:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
    295a:	2300      	movs	r3, #0
    295c:	f88d 300f 	strb.w	r3, [sp, #15]
    (void)pConfig;
#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (NULL_PTR != pConfig)
    2960:	9b01      	ldr	r3, [sp, #4]
    2962:	2b00      	cmp	r3, #0
    2964:	d006      	beq.n	2974 <Platform_Init+0x20>
    {
        (void)Det_ReportError((uint16)CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_INIT_ID, PLATFORM_E_PARAM_POINTER);
    2966:	2301      	movs	r3, #1
    2968:	2220      	movs	r2, #32
    296a:	2100      	movs	r1, #0
    296c:	20ff      	movs	r0, #255	; 0xff
    296e:	f015 fd51 	bl	18414 <Det_ReportError>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
    2972:	e008      	b.n	2986 <Platform_Init+0x32>
            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
    2974:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2978:	4a05      	ldr	r2, [pc, #20]	; (2990 <Platform_Init+0x3c>)
    297a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    297e:	681b      	ldr	r3, [r3, #0]
    2980:	4618      	mov	r0, r3
    2982:	f000 f917 	bl	2bb4 <Platform_Ipw_Init>
}
    2986:	bf00      	nop
    2988:	b005      	add	sp, #20
    298a:	f85d fb04 	ldr.w	pc, [sp], #4
    298e:	bf00      	nop
    2990:	0001a664 	.word	0x0001a664

00002994 <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    2994:	b500      	push	{lr}
    2996:	b085      	sub	sp, #20
    2998:	9001      	str	r0, [sp, #4]
    299a:	460b      	mov	r3, r1
    299c:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    29a0:	2300      	movs	r3, #0
    29a2:	f88d 300f 	strb.w	r3, [sp, #15]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    29a6:	9b01      	ldr	r3, [sp, #4]
    29a8:	2b7a      	cmp	r3, #122	; 0x7a
    29aa:	dc02      	bgt.n	29b2 <Platform_SetIrq+0x1e>
    29ac:	9b01      	ldr	r3, [sp, #4]
    29ae:	2b00      	cmp	r3, #0
    29b0:	da09      	bge.n	29c6 <Platform_SetIrq+0x32>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber))
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_SET_IRQ_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    29b2:	2302      	movs	r3, #2
    29b4:	2221      	movs	r2, #33	; 0x21
    29b6:	2100      	movs	r1, #0
    29b8:	20ff      	movs	r0, #255	; 0xff
    29ba:	f015 fd2b 	bl	18414 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    29be:	2301      	movs	r3, #1
    29c0:	f88d 300f 	strb.w	r3, [sp, #15]
    29c4:	e005      	b.n	29d2 <Platform_SetIrq+0x3e>
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
    29c6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    29ca:	4619      	mov	r1, r3
    29cc:	9801      	ldr	r0, [sp, #4]
    29ce:	f7ff ff83 	bl	28d8 <Platform_Ipw_SetIrq>
    }
    return RetValue;
    29d2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    29d6:	4618      	mov	r0, r3
    29d8:	b005      	add	sp, #20
    29da:	f85d fb04 	ldr.w	pc, [sp], #4

000029de <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    29de:	b500      	push	{lr}
    29e0:	b085      	sub	sp, #20
    29e2:	9001      	str	r0, [sp, #4]
    29e4:	460b      	mov	r3, r1
    29e6:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    29ea:	2300      	movs	r3, #0
    29ec:	f88d 300f 	strb.w	r3, [sp, #15]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
#if (INT_CTRL_IP_CORTEXM == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    29f0:	9b01      	ldr	r3, [sp, #4]
    29f2:	2b7a      	cmp	r3, #122	; 0x7a
    29f4:	dc06      	bgt.n	2a04 <Platform_SetIrqPriority+0x26>
    29f6:	9b01      	ldr	r3, [sp, #4]
    29f8:	2b00      	cmp	r3, #0
    29fa:	db03      	blt.n	2a04 <Platform_SetIrqPriority+0x26>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber) || \
    29fc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2a00:	2b0f      	cmp	r3, #15
    2a02:	d909      	bls.n	2a18 <Platform_SetIrqPriority+0x3a>
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber) || \
        (u8Priority >= (uint8)(1U << INT_CTRL_IP_GIC_PRIO_BITS)))
#endif
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_SET_IRQ_PRIO_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    2a04:	2302      	movs	r3, #2
    2a06:	2222      	movs	r2, #34	; 0x22
    2a08:	2100      	movs	r1, #0
    2a0a:	20ff      	movs	r0, #255	; 0xff
    2a0c:	f015 fd02 	bl	18414 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    2a10:	2301      	movs	r3, #1
    2a12:	f88d 300f 	strb.w	r3, [sp, #15]
    2a16:	e005      	b.n	2a24 <Platform_SetIrqPriority+0x46>
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
    2a18:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2a1c:	4619      	mov	r1, r3
    2a1e:	9801      	ldr	r0, [sp, #4]
    2a20:	f7ff ff6f 	bl	2902 <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
    2a24:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    2a28:	4618      	mov	r0, r3
    2a2a:	b005      	add	sp, #20
    2a2c:	f85d fb04 	ldr.w	pc, [sp], #4

00002a30 <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
    2a30:	b500      	push	{lr}
    2a32:	b085      	sub	sp, #20
    2a34:	9001      	str	r0, [sp, #4]
    2a36:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    2a38:	2300      	movs	r3, #0
    2a3a:	f88d 300f 	strb.w	r3, [sp, #15]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    2a3e:	9b01      	ldr	r3, [sp, #4]
    2a40:	2b7a      	cmp	r3, #122	; 0x7a
    2a42:	dc02      	bgt.n	2a4a <Platform_GetIrqPriority+0x1a>
    2a44:	9b01      	ldr	r3, [sp, #4]
    2a46:	2b00      	cmp	r3, #0
    2a48:	da09      	bge.n	2a5e <Platform_GetIrqPriority+0x2e>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber))
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_GET_IRQ_PRIO_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    2a4a:	2302      	movs	r3, #2
    2a4c:	2223      	movs	r2, #35	; 0x23
    2a4e:	2100      	movs	r1, #0
    2a50:	20ff      	movs	r0, #255	; 0xff
    2a52:	f015 fcdf 	bl	18414 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    2a56:	2301      	movs	r3, #1
    2a58:	f88d 300f 	strb.w	r3, [sp, #15]
    2a5c:	e013      	b.n	2a86 <Platform_GetIrqPriority+0x56>
    }
    else if (u8Priority == NULL_PTR)
    2a5e:	9b00      	ldr	r3, [sp, #0]
    2a60:	2b00      	cmp	r3, #0
    2a62:	d109      	bne.n	2a78 <Platform_GetIrqPriority+0x48>
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_GET_IRQ_PRIO_ID, PLATFORM_E_PARAM_POINTER);
    2a64:	2301      	movs	r3, #1
    2a66:	2223      	movs	r2, #35	; 0x23
    2a68:	2100      	movs	r1, #0
    2a6a:	20ff      	movs	r0, #255	; 0xff
    2a6c:	f015 fcd2 	bl	18414 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    2a70:	2301      	movs	r3, #1
    2a72:	f88d 300f 	strb.w	r3, [sp, #15]
    2a76:	e006      	b.n	2a86 <Platform_GetIrqPriority+0x56>
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
    2a78:	9801      	ldr	r0, [sp, #4]
    2a7a:	f7ff ff52 	bl	2922 <Platform_Ipw_GetIrqPriority>
    2a7e:	4603      	mov	r3, r0
    2a80:	461a      	mov	r2, r3
    2a82:	9b00      	ldr	r3, [sp, #0]
    2a84:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
    2a86:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    2a8a:	4618      	mov	r0, r3
    2a8c:	b005      	add	sp, #20
    2a8e:	f85d fb04 	ldr.w	pc, [sp], #4

00002a92 <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
    2a92:	b500      	push	{lr}
    2a94:	b087      	sub	sp, #28
    2a96:	9003      	str	r0, [sp, #12]
    2a98:	9102      	str	r1, [sp, #8]
    2a9a:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    2a9c:	2300      	movs	r3, #0
    2a9e:	f88d 3017 	strb.w	r3, [sp, #23]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    2aa2:	9b03      	ldr	r3, [sp, #12]
    2aa4:	2b7a      	cmp	r3, #122	; 0x7a
    2aa6:	dc02      	bgt.n	2aae <Platform_InstallIrqHandler+0x1c>
    2aa8:	9b03      	ldr	r3, [sp, #12]
    2aaa:	2b00      	cmp	r3, #0
    2aac:	da09      	bge.n	2ac2 <Platform_InstallIrqHandler+0x30>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber))
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_INSTALL_HANDLER_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    2aae:	2302      	movs	r3, #2
    2ab0:	2224      	movs	r2, #36	; 0x24
    2ab2:	2100      	movs	r1, #0
    2ab4:	20ff      	movs	r0, #255	; 0xff
    2ab6:	f015 fcad 	bl	18414 <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    2aba:	2301      	movs	r3, #1
    2abc:	f88d 3017 	strb.w	r3, [sp, #23]
    2ac0:	e004      	b.n	2acc <Platform_InstallIrqHandler+0x3a>
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    2ac2:	9a01      	ldr	r2, [sp, #4]
    2ac4:	9902      	ldr	r1, [sp, #8]
    2ac6:	9803      	ldr	r0, [sp, #12]
    2ac8:	f7ff ff36 	bl	2938 <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
    2acc:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    2ad0:	4618      	mov	r0, r3
    2ad2:	b007      	add	sp, #28
    2ad4:	f85d fb04 	ldr.w	pc, [sp], #4

00002ad8 <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    2ad8:	b500      	push	{lr}
    2ada:	b085      	sub	sp, #20
    2adc:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    2ade:	2300      	movs	r3, #0
    2ae0:	9303      	str	r3, [sp, #12]
    2ae2:	e05d      	b.n	2ba0 <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    2ae4:	9b01      	ldr	r3, [sp, #4]
    2ae6:	6859      	ldr	r1, [r3, #4]
    2ae8:	9a03      	ldr	r2, [sp, #12]
    2aea:	4613      	mov	r3, r2
    2aec:	005b      	lsls	r3, r3, #1
    2aee:	4413      	add	r3, r2
    2af0:	009b      	lsls	r3, r3, #2
    2af2:	440b      	add	r3, r1
    2af4:	681b      	ldr	r3, [r3, #0]
    2af6:	4618      	mov	r0, r3
    2af8:	f7ff fee4 	bl	28c4 <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    2afc:	9b01      	ldr	r3, [sp, #4]
    2afe:	6859      	ldr	r1, [r3, #4]
    2b00:	9a03      	ldr	r2, [sp, #12]
    2b02:	4613      	mov	r3, r2
    2b04:	005b      	lsls	r3, r3, #1
    2b06:	4413      	add	r3, r2
    2b08:	009b      	lsls	r3, r3, #2
    2b0a:	440b      	add	r3, r1
    2b0c:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    2b0e:	9b01      	ldr	r3, [sp, #4]
    2b10:	6859      	ldr	r1, [r3, #4]
    2b12:	9a03      	ldr	r2, [sp, #12]
    2b14:	4613      	mov	r3, r2
    2b16:	005b      	lsls	r3, r3, #1
    2b18:	4413      	add	r3, r2
    2b1a:	009b      	lsls	r3, r3, #2
    2b1c:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    2b1e:	795b      	ldrb	r3, [r3, #5]
    2b20:	4619      	mov	r1, r3
    2b22:	f7ff feb4 	bl	288e <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    2b26:	9b01      	ldr	r3, [sp, #4]
    2b28:	6859      	ldr	r1, [r3, #4]
    2b2a:	9a03      	ldr	r2, [sp, #12]
    2b2c:	4613      	mov	r3, r2
    2b2e:	005b      	lsls	r3, r3, #1
    2b30:	4413      	add	r3, r2
    2b32:	009b      	lsls	r3, r3, #2
    2b34:	440b      	add	r3, r1
    2b36:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    2b38:	9b01      	ldr	r3, [sp, #4]
    2b3a:	6859      	ldr	r1, [r3, #4]
    2b3c:	9a03      	ldr	r2, [sp, #12]
    2b3e:	4613      	mov	r3, r2
    2b40:	005b      	lsls	r3, r3, #1
    2b42:	4413      	add	r3, r2
    2b44:	009b      	lsls	r3, r3, #2
    2b46:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    2b48:	689b      	ldr	r3, [r3, #8]
    2b4a:	2200      	movs	r2, #0
    2b4c:	4619      	mov	r1, r3
    2b4e:	f7ff fe7c 	bl	284a <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    2b52:	9b01      	ldr	r3, [sp, #4]
    2b54:	6859      	ldr	r1, [r3, #4]
    2b56:	9a03      	ldr	r2, [sp, #12]
    2b58:	4613      	mov	r3, r2
    2b5a:	005b      	lsls	r3, r3, #1
    2b5c:	4413      	add	r3, r2
    2b5e:	009b      	lsls	r3, r3, #2
    2b60:	440b      	add	r3, r1
    2b62:	791b      	ldrb	r3, [r3, #4]
    2b64:	2b00      	cmp	r3, #0
    2b66:	d00c      	beq.n	2b82 <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    2b68:	9b01      	ldr	r3, [sp, #4]
    2b6a:	6859      	ldr	r1, [r3, #4]
    2b6c:	9a03      	ldr	r2, [sp, #12]
    2b6e:	4613      	mov	r3, r2
    2b70:	005b      	lsls	r3, r3, #1
    2b72:	4413      	add	r3, r2
    2b74:	009b      	lsls	r3, r3, #2
    2b76:	440b      	add	r3, r1
    2b78:	681b      	ldr	r3, [r3, #0]
    2b7a:	4618      	mov	r0, r3
    2b7c:	f7ff fe73 	bl	2866 <IntCtrl_Ip_EnableIrq>
    2b80:	e00b      	b.n	2b9a <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    2b82:	9b01      	ldr	r3, [sp, #4]
    2b84:	6859      	ldr	r1, [r3, #4]
    2b86:	9a03      	ldr	r2, [sp, #12]
    2b88:	4613      	mov	r3, r2
    2b8a:	005b      	lsls	r3, r3, #1
    2b8c:	4413      	add	r3, r2
    2b8e:	009b      	lsls	r3, r3, #2
    2b90:	440b      	add	r3, r1
    2b92:	681b      	ldr	r3, [r3, #0]
    2b94:	4618      	mov	r0, r3
    2b96:	f7ff fe70 	bl	287a <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    2b9a:	9b03      	ldr	r3, [sp, #12]
    2b9c:	3301      	adds	r3, #1
    2b9e:	9303      	str	r3, [sp, #12]
    2ba0:	9b01      	ldr	r3, [sp, #4]
    2ba2:	681b      	ldr	r3, [r3, #0]
    2ba4:	9a03      	ldr	r2, [sp, #12]
    2ba6:	429a      	cmp	r2, r3
    2ba8:	d39c      	bcc.n	2ae4 <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    2baa:	2300      	movs	r3, #0
}
    2bac:	4618      	mov	r0, r3
    2bae:	b005      	add	sp, #20
    2bb0:	f85d fb04 	ldr.w	pc, [sp], #4

00002bb4 <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    2bb4:	b500      	push	{lr}
    2bb6:	b085      	sub	sp, #20
    2bb8:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    2bba:	2300      	movs	r3, #0
    2bbc:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    2bc0:	9b01      	ldr	r3, [sp, #4]
    2bc2:	681b      	ldr	r3, [r3, #0]
    2bc4:	2b00      	cmp	r3, #0
    2bc6:	d007      	beq.n	2bd8 <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    2bc8:	9b01      	ldr	r3, [sp, #4]
    2bca:	681b      	ldr	r3, [r3, #0]
    2bcc:	4618      	mov	r0, r3
    2bce:	f7ff ff83 	bl	2ad8 <Platform_Ipw_InitIntCtrl>
    2bd2:	4603      	mov	r3, r0
    2bd4:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    2bd8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2bdc:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    2bde:	bf00      	nop
    2be0:	b005      	add	sp, #20
    2be2:	f85d fb04 	ldr.w	pc, [sp], #4

00002be6 <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    2be6:	2300      	movs	r3, #0
}
    2be8:	4618      	mov	r0, r3
    2bea:	4770      	bx	lr

00002bec <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    2bec:	b082      	sub	sp, #8
    2bee:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    2bf0:	2301      	movs	r3, #1
}
    2bf2:	4618      	mov	r0, r3
    2bf4:	b002      	add	sp, #8
    2bf6:	4770      	bx	lr

00002bf8 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    2bf8:	b082      	sub	sp, #8
    2bfa:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    2bfc:	bf00      	nop
    2bfe:	b002      	add	sp, #8
    2c00:	4770      	bx	lr

00002c02 <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    2c02:	b082      	sub	sp, #8
    2c04:	9001      	str	r0, [sp, #4]
    return Micros;
    2c06:	9b01      	ldr	r3, [sp, #4]
}
    2c08:	4618      	mov	r0, r3
    2c0a:	b002      	add	sp, #8
    2c0c:	4770      	bx	lr

00002c0e <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    2c0e:	b500      	push	{lr}
    2c10:	b083      	sub	sp, #12
    2c12:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    2c14:	f000 f86c 	bl	2cf0 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    2c18:	bf00      	nop
    2c1a:	b003      	add	sp, #12
    2c1c:	f85d fb04 	ldr.w	pc, [sp], #4

00002c20 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    2c20:	b500      	push	{lr}
    2c22:	b085      	sub	sp, #20
    2c24:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    2c26:	2300      	movs	r3, #0
    2c28:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    2c2a:	9b01      	ldr	r3, [sp, #4]
    2c2c:	2b00      	cmp	r3, #0
    2c2e:	d003      	beq.n	2c38 <OsIf_GetCounter+0x18>
    2c30:	9b01      	ldr	r3, [sp, #4]
    2c32:	2b01      	cmp	r3, #1
    2c34:	d004      	beq.n	2c40 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    2c36:	e007      	b.n	2c48 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    2c38:	f7ff ffd5 	bl	2be6 <OsIf_Timer_Dummy_GetCounter>
    2c3c:	9003      	str	r0, [sp, #12]
            break;
    2c3e:	e003      	b.n	2c48 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    2c40:	f000 f872 	bl	2d28 <OsIf_Timer_System_GetCounter>
    2c44:	9003      	str	r0, [sp, #12]
            break;
    2c46:	bf00      	nop
    }

    return Value;
    2c48:	9b03      	ldr	r3, [sp, #12]
}
    2c4a:	4618      	mov	r0, r3
    2c4c:	b005      	add	sp, #20
    2c4e:	f85d fb04 	ldr.w	pc, [sp], #4

00002c52 <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    2c52:	b500      	push	{lr}
    2c54:	b085      	sub	sp, #20
    2c56:	9001      	str	r0, [sp, #4]
    2c58:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    2c5a:	2300      	movs	r3, #0
    2c5c:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    2c5e:	9b00      	ldr	r3, [sp, #0]
    2c60:	2b00      	cmp	r3, #0
    2c62:	d003      	beq.n	2c6c <OsIf_GetElapsed+0x1a>
    2c64:	9b00      	ldr	r3, [sp, #0]
    2c66:	2b01      	cmp	r3, #1
    2c68:	d005      	beq.n	2c76 <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    2c6a:	e009      	b.n	2c80 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    2c6c:	9801      	ldr	r0, [sp, #4]
    2c6e:	f7ff ffbd 	bl	2bec <OsIf_Timer_Dummy_GetElapsed>
    2c72:	9003      	str	r0, [sp, #12]
            break;
    2c74:	e004      	b.n	2c80 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    2c76:	9801      	ldr	r0, [sp, #4]
    2c78:	f000 f864 	bl	2d44 <OsIf_Timer_System_GetElapsed>
    2c7c:	9003      	str	r0, [sp, #12]
            break;
    2c7e:	bf00      	nop
    }

    return Value;
    2c80:	9b03      	ldr	r3, [sp, #12]
}
    2c82:	4618      	mov	r0, r3
    2c84:	b005      	add	sp, #20
    2c86:	f85d fb04 	ldr.w	pc, [sp], #4

00002c8a <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    2c8a:	b500      	push	{lr}
    2c8c:	b083      	sub	sp, #12
    2c8e:	9001      	str	r0, [sp, #4]
    2c90:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    2c92:	9b00      	ldr	r3, [sp, #0]
    2c94:	2b00      	cmp	r3, #0
    2c96:	d003      	beq.n	2ca0 <OsIf_SetTimerFrequency+0x16>
    2c98:	9b00      	ldr	r3, [sp, #0]
    2c9a:	2b01      	cmp	r3, #1
    2c9c:	d004      	beq.n	2ca8 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    2c9e:	e007      	b.n	2cb0 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    2ca0:	9801      	ldr	r0, [sp, #4]
    2ca2:	f7ff ffa9 	bl	2bf8 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    2ca6:	e003      	b.n	2cb0 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    2ca8:	9801      	ldr	r0, [sp, #4]
    2caa:	f000 f85b 	bl	2d64 <OsIf_Timer_System_SetTimerFrequency>
            break;
    2cae:	bf00      	nop
    }
}
    2cb0:	bf00      	nop
    2cb2:	b003      	add	sp, #12
    2cb4:	f85d fb04 	ldr.w	pc, [sp], #4

00002cb8 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    2cb8:	b500      	push	{lr}
    2cba:	b085      	sub	sp, #20
    2cbc:	9001      	str	r0, [sp, #4]
    2cbe:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    2cc0:	2300      	movs	r3, #0
    2cc2:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    2cc4:	9b00      	ldr	r3, [sp, #0]
    2cc6:	2b00      	cmp	r3, #0
    2cc8:	d003      	beq.n	2cd2 <OsIf_MicrosToTicks+0x1a>
    2cca:	9b00      	ldr	r3, [sp, #0]
    2ccc:	2b01      	cmp	r3, #1
    2cce:	d005      	beq.n	2cdc <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    2cd0:	e009      	b.n	2ce6 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    2cd2:	9801      	ldr	r0, [sp, #4]
    2cd4:	f7ff ff95 	bl	2c02 <OsIf_Timer_Dummy_MicrosToTicks>
    2cd8:	9003      	str	r0, [sp, #12]
            break;
    2cda:	e004      	b.n	2ce6 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    2cdc:	9801      	ldr	r0, [sp, #4]
    2cde:	f000 f84f 	bl	2d80 <OsIf_Timer_System_MicrosToTicks>
    2ce2:	9003      	str	r0, [sp, #12]
            break;
    2ce4:	bf00      	nop
    }

    return Value;
    2ce6:	9b03      	ldr	r3, [sp, #12]
}
    2ce8:	4618      	mov	r0, r3
    2cea:	b005      	add	sp, #20
    2cec:	f85d fb04 	ldr.w	pc, [sp], #4

00002cf0 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    2cf0:	b500      	push	{lr}
    2cf2:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    2cf4:	2300      	movs	r3, #0
    2cf6:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    2cf8:	4a09      	ldr	r2, [pc, #36]	; (2d20 <OsIf_Timer_System_Init+0x30>)
    2cfa:	9b01      	ldr	r3, [sp, #4]
    2cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2d00:	685a      	ldr	r2, [r3, #4]
    2d02:	4908      	ldr	r1, [pc, #32]	; (2d24 <OsIf_Timer_System_Init+0x34>)
    2d04:	9b01      	ldr	r3, [sp, #4]
    2d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    2d0a:	4a06      	ldr	r2, [pc, #24]	; (2d24 <OsIf_Timer_System_Init+0x34>)
    2d0c:	9b01      	ldr	r3, [sp, #4]
    2d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2d12:	4618      	mov	r0, r3
    2d14:	f000 f868 	bl	2de8 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    2d18:	bf00      	nop
    2d1a:	b003      	add	sp, #12
    2d1c:	f85d fb04 	ldr.w	pc, [sp], #4
    2d20:	0001a61c 	.word	0x0001a61c
    2d24:	1fff8b74 	.word	0x1fff8b74

00002d28 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    2d28:	b500      	push	{lr}
    2d2a:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    2d2c:	2300      	movs	r3, #0
    2d2e:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    2d30:	2300      	movs	r3, #0
    2d32:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    2d34:	f000 f86c 	bl	2e10 <OsIf_Timer_System_Internal_GetCounter>
    2d38:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    2d3a:	9b01      	ldr	r3, [sp, #4]
}
    2d3c:	4618      	mov	r0, r3
    2d3e:	b003      	add	sp, #12
    2d40:	f85d fb04 	ldr.w	pc, [sp], #4

00002d44 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    2d44:	b500      	push	{lr}
    2d46:	b085      	sub	sp, #20
    2d48:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    2d4a:	2300      	movs	r3, #0
    2d4c:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    2d4e:	2300      	movs	r3, #0
    2d50:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    2d52:	9801      	ldr	r0, [sp, #4]
    2d54:	f000 f864 	bl	2e20 <OsIf_Timer_System_Internal_GetElapsed>
    2d58:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    2d5a:	9b03      	ldr	r3, [sp, #12]
}
    2d5c:	4618      	mov	r0, r3
    2d5e:	b005      	add	sp, #20
    2d60:	f85d fb04 	ldr.w	pc, [sp], #4

00002d64 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    2d64:	b084      	sub	sp, #16
    2d66:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    2d68:	2300      	movs	r3, #0
    2d6a:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    2d6c:	4903      	ldr	r1, [pc, #12]	; (2d7c <OsIf_Timer_System_SetTimerFrequency+0x18>)
    2d6e:	9b03      	ldr	r3, [sp, #12]
    2d70:	9a01      	ldr	r2, [sp, #4]
    2d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    2d76:	bf00      	nop
    2d78:	b004      	add	sp, #16
    2d7a:	4770      	bx	lr
    2d7c:	1fff8b74 	.word	0x1fff8b74

00002d80 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    2d80:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d82:	b087      	sub	sp, #28
    2d84:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    2d86:	2100      	movs	r1, #0
    2d88:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    2d8a:	2100      	movs	r1, #0
    2d8c:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    2d8e:	9901      	ldr	r1, [sp, #4]
    2d90:	2000      	movs	r0, #0
    2d92:	460e      	mov	r6, r1
    2d94:	4607      	mov	r7, r0
    2d96:	4812      	ldr	r0, [pc, #72]	; (2de0 <OsIf_Timer_System_MicrosToTicks+0x60>)
    2d98:	9904      	ldr	r1, [sp, #16]
    2d9a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    2d9e:	2000      	movs	r0, #0
    2da0:	460c      	mov	r4, r1
    2da2:	4605      	mov	r5, r0
    2da4:	fb04 f007 	mul.w	r0, r4, r7
    2da8:	fb06 f105 	mul.w	r1, r6, r5
    2dac:	4401      	add	r1, r0
    2dae:	fba6 2304 	umull	r2, r3, r6, r4
    2db2:	4419      	add	r1, r3
    2db4:	460b      	mov	r3, r1
    2db6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    2dba:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    2dbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    2dc2:	4a08      	ldr	r2, [pc, #32]	; (2de4 <OsIf_Timer_System_MicrosToTicks+0x64>)
    2dc4:	f04f 0300 	mov.w	r3, #0
    2dc8:	f7fd fbec 	bl	5a4 <__aeabi_uldivmod>
    2dcc:	4602      	mov	r2, r0
    2dce:	460b      	mov	r3, r1
    2dd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    2dd4:	9b02      	ldr	r3, [sp, #8]
    2dd6:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    2dd8:	9b05      	ldr	r3, [sp, #20]
}
    2dda:	4618      	mov	r0, r3
    2ddc:	b007      	add	sp, #28
    2dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2de0:	1fff8b74 	.word	0x1fff8b74
    2de4:	000f4240 	.word	0x000f4240

00002de8 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    2de8:	b082      	sub	sp, #8
    2dea:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    2dec:	4b07      	ldr	r3, [pc, #28]	; (2e0c <OsIf_Timer_System_Internal_Init+0x24>)
    2dee:	2200      	movs	r2, #0
    2df0:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    2df2:	4b06      	ldr	r3, [pc, #24]	; (2e0c <OsIf_Timer_System_Internal_Init+0x24>)
    2df4:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    2df8:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    2dfa:	4b04      	ldr	r3, [pc, #16]	; (2e0c <OsIf_Timer_System_Internal_Init+0x24>)
    2dfc:	2200      	movs	r2, #0
    2dfe:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    2e00:	4b02      	ldr	r3, [pc, #8]	; (2e0c <OsIf_Timer_System_Internal_Init+0x24>)
    2e02:	2205      	movs	r2, #5
    2e04:	601a      	str	r2, [r3, #0]
}
    2e06:	bf00      	nop
    2e08:	b002      	add	sp, #8
    2e0a:	4770      	bx	lr
    2e0c:	e000e010 	.word	0xe000e010

00002e10 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    2e10:	4b02      	ldr	r3, [pc, #8]	; (2e1c <OsIf_Timer_System_Internal_GetCounter+0xc>)
    2e12:	689b      	ldr	r3, [r3, #8]
    2e14:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    2e18:	4618      	mov	r0, r3
    2e1a:	4770      	bx	lr
    2e1c:	e000e010 	.word	0xe000e010

00002e20 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    2e20:	b084      	sub	sp, #16
    2e22:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    2e24:	4b10      	ldr	r3, [pc, #64]	; (2e68 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    2e26:	689b      	ldr	r3, [r3, #8]
    2e28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2e2c:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    2e2e:	2300      	movs	r3, #0
    2e30:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    2e32:	9b01      	ldr	r3, [sp, #4]
    2e34:	681b      	ldr	r3, [r3, #0]
    2e36:	9a02      	ldr	r2, [sp, #8]
    2e38:	429a      	cmp	r2, r3
    2e3a:	d909      	bls.n	2e50 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    2e3c:	9b01      	ldr	r3, [sp, #4]
    2e3e:	681a      	ldr	r2, [r3, #0]
    2e40:	9b02      	ldr	r3, [sp, #8]
    2e42:	1ad3      	subs	r3, r2, r3
    2e44:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    2e48:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    2e4c:	9303      	str	r3, [sp, #12]
    2e4e:	e004      	b.n	2e5a <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    2e50:	9b01      	ldr	r3, [sp, #4]
    2e52:	681a      	ldr	r2, [r3, #0]
    2e54:	9b02      	ldr	r3, [sp, #8]
    2e56:	1ad3      	subs	r3, r2, r3
    2e58:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    2e5a:	9b01      	ldr	r3, [sp, #4]
    2e5c:	9a02      	ldr	r2, [sp, #8]
    2e5e:	601a      	str	r2, [r3, #0]

    return dif;
    2e60:	9b03      	ldr	r3, [sp, #12]
}
    2e62:	4618      	mov	r0, r3
    2e64:	b004      	add	sp, #16
    2e66:	4770      	bx	lr
    2e68:	e000e010 	.word	0xe000e010

00002e6c <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    2e6c:	b082      	sub	sp, #8
    2e6e:	9001      	str	r0, [sp, #4]
    2e70:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    2e72:	bf00      	nop
    2e74:	b002      	add	sp, #8
    2e76:	4770      	bx	lr

00002e78 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    2e78:	b500      	push	{lr}
    2e7a:	b085      	sub	sp, #20
    2e7c:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    2e7e:	4b24      	ldr	r3, [pc, #144]	; (2f10 <Clock_Ip_UpdateDriverContext+0x98>)
    2e80:	2201      	movs	r2, #1
    2e82:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2e84:	4b23      	ldr	r3, [pc, #140]	; (2f14 <Clock_Ip_UpdateDriverContext+0x9c>)
    2e86:	681b      	ldr	r3, [r3, #0]
    2e88:	2102      	movs	r1, #2
    2e8a:	4618      	mov	r0, r3
    2e8c:	f003 fc32 	bl	66f4 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    2e90:	2300      	movs	r3, #0
    2e92:	f88d 300f 	strb.w	r3, [sp, #15]
    2e96:	e015      	b.n	2ec4 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    2e98:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2e9c:	9a01      	ldr	r2, [sp, #4]
    2e9e:	334a      	adds	r3, #74	; 0x4a
    2ea0:	00db      	lsls	r3, r3, #3
    2ea2:	4413      	add	r3, r2
    2ea4:	6858      	ldr	r0, [r3, #4]
    2ea6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2eaa:	9a01      	ldr	r2, [sp, #4]
    2eac:	334a      	adds	r3, #74	; 0x4a
    2eae:	00db      	lsls	r3, r3, #3
    2eb0:	4413      	add	r3, r2
    2eb2:	689b      	ldr	r3, [r3, #8]
    2eb4:	4619      	mov	r1, r3
    2eb6:	f001 fadc 	bl	4472 <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    2eba:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2ebe:	3301      	adds	r3, #1
    2ec0:	f88d 300f 	strb.w	r3, [sp, #15]
    2ec4:	9b01      	ldr	r3, [sp, #4]
    2ec6:	7bdb      	ldrb	r3, [r3, #15]
    2ec8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2ecc:	429a      	cmp	r2, r3
    2ece:	d3e3      	bcc.n	2e98 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    2ed0:	f000 f824 	bl	2f1c <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    2ed4:	2301      	movs	r3, #1
    2ed6:	f88d 300f 	strb.w	r3, [sp, #15]
    2eda:	e00e      	b.n	2efa <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    2edc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2ee0:	9b01      	ldr	r3, [sp, #4]
    2ee2:	327e      	adds	r2, #126	; 0x7e
    2ee4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    2ee8:	490b      	ldr	r1, [pc, #44]	; (2f18 <Clock_Ip_UpdateDriverContext+0xa0>)
    2eea:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2eee:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    2ef0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2ef4:	3301      	adds	r3, #1
    2ef6:	f88d 300f 	strb.w	r3, [sp, #15]
    2efa:	9b01      	ldr	r3, [sp, #4]
    2efc:	7cdb      	ldrb	r3, [r3, #19]
    2efe:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2f02:	429a      	cmp	r2, r3
    2f04:	d3ea      	bcc.n	2edc <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    2f06:	bf00      	nop
    2f08:	bf00      	nop
    2f0a:	b005      	add	sp, #20
    2f0c:	f85d fb04 	ldr.w	pc, [sp], #4
    2f10:	1fff8b10 	.word	0x1fff8b10
    2f14:	1fff8b78 	.word	0x1fff8b78
    2f18:	1fff8b84 	.word	0x1fff8b84

00002f1c <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    2f1c:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    2f1e:	4b23      	ldr	r3, [pc, #140]	; (2fac <Clock_Ip_CallEmptyCallbacks+0x90>)
    2f20:	781b      	ldrb	r3, [r3, #0]
    2f22:	f083 0301 	eor.w	r3, r3, #1
    2f26:	b2db      	uxtb	r3, r3
    2f28:	2b00      	cmp	r3, #0
    2f2a:	d03d      	beq.n	2fa8 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    2f2c:	4b1f      	ldr	r3, [pc, #124]	; (2fac <Clock_Ip_CallEmptyCallbacks+0x90>)
    2f2e:	2201      	movs	r2, #1
    2f30:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    2f32:	4b1f      	ldr	r3, [pc, #124]	; (2fb0 <Clock_Ip_CallEmptyCallbacks+0x94>)
    2f34:	685b      	ldr	r3, [r3, #4]
    2f36:	2100      	movs	r1, #0
    2f38:	2000      	movs	r0, #0
    2f3a:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    2f3c:	4b1c      	ldr	r3, [pc, #112]	; (2fb0 <Clock_Ip_CallEmptyCallbacks+0x94>)
    2f3e:	689b      	ldr	r3, [r3, #8]
    2f40:	2057      	movs	r0, #87	; 0x57
    2f42:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2f44:	4b1b      	ldr	r3, [pc, #108]	; (2fb4 <Clock_Ip_CallEmptyCallbacks+0x98>)
    2f46:	681b      	ldr	r3, [r3, #0]
    2f48:	2000      	movs	r0, #0
    2f4a:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    2f4c:	4b1a      	ldr	r3, [pc, #104]	; (2fb8 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    2f4e:	681b      	ldr	r3, [r3, #0]
    2f50:	2000      	movs	r0, #0
    2f52:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    2f54:	4b19      	ldr	r3, [pc, #100]	; (2fbc <Clock_Ip_CallEmptyCallbacks+0xa0>)
    2f56:	681b      	ldr	r3, [r3, #0]
    2f58:	2000      	movs	r0, #0
    2f5a:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2f5c:	4b18      	ldr	r3, [pc, #96]	; (2fc0 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    2f5e:	685b      	ldr	r3, [r3, #4]
    2f60:	2000      	movs	r0, #0
    2f62:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    2f64:	4b16      	ldr	r3, [pc, #88]	; (2fc0 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    2f66:	689b      	ldr	r3, [r3, #8]
    2f68:	2057      	movs	r0, #87	; 0x57
    2f6a:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2f6c:	4b15      	ldr	r3, [pc, #84]	; (2fc4 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    2f6e:	681b      	ldr	r3, [r3, #0]
    2f70:	2000      	movs	r0, #0
    2f72:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    2f74:	4b13      	ldr	r3, [pc, #76]	; (2fc4 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    2f76:	685b      	ldr	r3, [r3, #4]
    2f78:	2100      	movs	r1, #0
    2f7a:	2057      	movs	r0, #87	; 0x57
    2f7c:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2f7e:	4b12      	ldr	r3, [pc, #72]	; (2fc8 <Clock_Ip_CallEmptyCallbacks+0xac>)
    2f80:	681b      	ldr	r3, [r3, #0]
    2f82:	2000      	movs	r0, #0
    2f84:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2f86:	4b11      	ldr	r3, [pc, #68]	; (2fcc <Clock_Ip_CallEmptyCallbacks+0xb0>)
    2f88:	685b      	ldr	r3, [r3, #4]
    2f8a:	2000      	movs	r0, #0
    2f8c:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    2f8e:	4b0f      	ldr	r3, [pc, #60]	; (2fcc <Clock_Ip_CallEmptyCallbacks+0xb0>)
    2f90:	689b      	ldr	r3, [r3, #8]
    2f92:	2057      	movs	r0, #87	; 0x57
    2f94:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2f96:	4b0e      	ldr	r3, [pc, #56]	; (2fd0 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    2f98:	685b      	ldr	r3, [r3, #4]
    2f9a:	2000      	movs	r0, #0
    2f9c:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    2f9e:	4b0d      	ldr	r3, [pc, #52]	; (2fd4 <Clock_Ip_CallEmptyCallbacks+0xb8>)
    2fa0:	681b      	ldr	r3, [r3, #0]
    2fa2:	2100      	movs	r1, #0
    2fa4:	2000      	movs	r0, #0
    2fa6:	4798      	blx	r3
    }
}
    2fa8:	bf00      	nop
    2faa:	bd08      	pop	{r3, pc}
    2fac:	1fff8b7c 	.word	0x1fff8b7c
    2fb0:	000196dc 	.word	0x000196dc
    2fb4:	000195f0 	.word	0x000195f0
    2fb8:	0001962c 	.word	0x0001962c
    2fbc:	00019634 	.word	0x00019634
    2fc0:	0001965c 	.word	0x0001965c
    2fc4:	00019668 	.word	0x00019668
    2fc8:	000196a0 	.word	0x000196a0
    2fcc:	000196ec 	.word	0x000196ec
    2fd0:	00019718 	.word	0x00019718
    2fd4:	00019714 	.word	0x00019714

00002fd8 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    2fd8:	b500      	push	{lr}
    2fda:	b085      	sub	sp, #20
    2fdc:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    2fde:	9b01      	ldr	r3, [sp, #4]
    2fe0:	7adb      	ldrb	r3, [r3, #11]
    2fe2:	9303      	str	r3, [sp, #12]
    2fe4:	e01f      	b.n	3026 <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2fe6:	9b03      	ldr	r3, [sp, #12]
    2fe8:	1e5a      	subs	r2, r3, #1
    2fea:	9b01      	ldr	r3, [sp, #4]
    2fec:	320d      	adds	r2, #13
    2fee:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2ff2:	495a      	ldr	r1, [pc, #360]	; (315c <Clock_Ip_ResetClockConfiguration+0x184>)
    2ff4:	4613      	mov	r3, r2
    2ff6:	00db      	lsls	r3, r3, #3
    2ff8:	4413      	add	r3, r2
    2ffa:	440b      	add	r3, r1
    2ffc:	3301      	adds	r3, #1
    2ffe:	781b      	ldrb	r3, [r3, #0]
    3000:	461a      	mov	r2, r3
    3002:	4b57      	ldr	r3, [pc, #348]	; (3160 <Clock_Ip_ResetClockConfiguration+0x188>)
    3004:	5c9b      	ldrb	r3, [r3, r2]
    3006:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    3008:	4a56      	ldr	r2, [pc, #344]	; (3164 <Clock_Ip_ResetClockConfiguration+0x18c>)
    300a:	9b02      	ldr	r3, [sp, #8]
    300c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    3010:	9a03      	ldr	r2, [sp, #12]
    3012:	3a01      	subs	r2, #1
    3014:	320d      	adds	r2, #13
    3016:	00d2      	lsls	r2, r2, #3
    3018:	9901      	ldr	r1, [sp, #4]
    301a:	440a      	add	r2, r1
    301c:	4610      	mov	r0, r2
    301e:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    3020:	9b03      	ldr	r3, [sp, #12]
    3022:	3b01      	subs	r3, #1
    3024:	9303      	str	r3, [sp, #12]
    3026:	9b03      	ldr	r3, [sp, #12]
    3028:	2b00      	cmp	r3, #0
    302a:	d1dc      	bne.n	2fe6 <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    302c:	9b01      	ldr	r3, [sp, #4]
    302e:	7b9b      	ldrb	r3, [r3, #14]
    3030:	9303      	str	r3, [sp, #12]
    3032:	e026      	b.n	3082 <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    3034:	9b03      	ldr	r3, [sp, #12]
    3036:	3b01      	subs	r3, #1
    3038:	9a01      	ldr	r2, [sp, #4]
    303a:	3324      	adds	r3, #36	; 0x24
    303c:	011b      	lsls	r3, r3, #4
    303e:	4413      	add	r3, r2
    3040:	3304      	adds	r3, #4
    3042:	681a      	ldr	r2, [r3, #0]
    3044:	4945      	ldr	r1, [pc, #276]	; (315c <Clock_Ip_ResetClockConfiguration+0x184>)
    3046:	4613      	mov	r3, r2
    3048:	00db      	lsls	r3, r3, #3
    304a:	4413      	add	r3, r2
    304c:	440b      	add	r3, r1
    304e:	3301      	adds	r3, #1
    3050:	781b      	ldrb	r3, [r3, #0]
    3052:	461a      	mov	r2, r3
    3054:	4b44      	ldr	r3, [pc, #272]	; (3168 <Clock_Ip_ResetClockConfiguration+0x190>)
    3056:	5c9b      	ldrb	r3, [r3, r2]
    3058:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    305a:	4944      	ldr	r1, [pc, #272]	; (316c <Clock_Ip_ResetClockConfiguration+0x194>)
    305c:	9a02      	ldr	r2, [sp, #8]
    305e:	4613      	mov	r3, r2
    3060:	005b      	lsls	r3, r3, #1
    3062:	4413      	add	r3, r2
    3064:	009b      	lsls	r3, r3, #2
    3066:	440b      	add	r3, r1
    3068:	681b      	ldr	r3, [r3, #0]
    306a:	9a03      	ldr	r2, [sp, #12]
    306c:	3a01      	subs	r2, #1
    306e:	3224      	adds	r2, #36	; 0x24
    3070:	0112      	lsls	r2, r2, #4
    3072:	9901      	ldr	r1, [sp, #4]
    3074:	440a      	add	r2, r1
    3076:	3204      	adds	r2, #4
    3078:	4610      	mov	r0, r2
    307a:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    307c:	9b03      	ldr	r3, [sp, #12]
    307e:	3b01      	subs	r3, #1
    3080:	9303      	str	r3, [sp, #12]
    3082:	9b03      	ldr	r3, [sp, #12]
    3084:	2b00      	cmp	r3, #0
    3086:	d1d5      	bne.n	3034 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    3088:	9b01      	ldr	r3, [sp, #4]
    308a:	7a9b      	ldrb	r3, [r3, #10]
    308c:	9303      	str	r3, [sp, #12]
    308e:	e02a      	b.n	30e6 <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    3090:	9b03      	ldr	r3, [sp, #12]
    3092:	1e5a      	subs	r2, r3, #1
    3094:	9901      	ldr	r1, [sp, #4]
    3096:	4613      	mov	r3, r2
    3098:	009b      	lsls	r3, r3, #2
    309a:	4413      	add	r3, r2
    309c:	00db      	lsls	r3, r3, #3
    309e:	440b      	add	r3, r1
    30a0:	3340      	adds	r3, #64	; 0x40
    30a2:	681a      	ldr	r2, [r3, #0]
    30a4:	492d      	ldr	r1, [pc, #180]	; (315c <Clock_Ip_ResetClockConfiguration+0x184>)
    30a6:	4613      	mov	r3, r2
    30a8:	00db      	lsls	r3, r3, #3
    30aa:	4413      	add	r3, r2
    30ac:	440b      	add	r3, r1
    30ae:	3301      	adds	r3, #1
    30b0:	781b      	ldrb	r3, [r3, #0]
    30b2:	461a      	mov	r2, r3
    30b4:	4b2e      	ldr	r3, [pc, #184]	; (3170 <Clock_Ip_ResetClockConfiguration+0x198>)
    30b6:	5c9b      	ldrb	r3, [r3, r2]
    30b8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    30ba:	492e      	ldr	r1, [pc, #184]	; (3174 <Clock_Ip_ResetClockConfiguration+0x19c>)
    30bc:	9a02      	ldr	r2, [sp, #8]
    30be:	4613      	mov	r3, r2
    30c0:	009b      	lsls	r3, r3, #2
    30c2:	4413      	add	r3, r2
    30c4:	009b      	lsls	r3, r3, #2
    30c6:	440b      	add	r3, r1
    30c8:	6819      	ldr	r1, [r3, #0]
    30ca:	9b03      	ldr	r3, [sp, #12]
    30cc:	1e5a      	subs	r2, r3, #1
    30ce:	4613      	mov	r3, r2
    30d0:	009b      	lsls	r3, r3, #2
    30d2:	4413      	add	r3, r2
    30d4:	00db      	lsls	r3, r3, #3
    30d6:	3340      	adds	r3, #64	; 0x40
    30d8:	9a01      	ldr	r2, [sp, #4]
    30da:	4413      	add	r3, r2
    30dc:	4618      	mov	r0, r3
    30de:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    30e0:	9b03      	ldr	r3, [sp, #12]
    30e2:	3b01      	subs	r3, #1
    30e4:	9303      	str	r3, [sp, #12]
    30e6:	9b03      	ldr	r3, [sp, #12]
    30e8:	2b00      	cmp	r3, #0
    30ea:	d1d1      	bne.n	3090 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    30ec:	9b01      	ldr	r3, [sp, #4]
    30ee:	7a5b      	ldrb	r3, [r3, #9]
    30f0:	9303      	str	r3, [sp, #12]
    30f2:	e02b      	b.n	314c <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    30f4:	9b03      	ldr	r3, [sp, #12]
    30f6:	1e5a      	subs	r2, r3, #1
    30f8:	9901      	ldr	r1, [sp, #4]
    30fa:	4613      	mov	r3, r2
    30fc:	009b      	lsls	r3, r3, #2
    30fe:	4413      	add	r3, r2
    3100:	009b      	lsls	r3, r3, #2
    3102:	440b      	add	r3, r1
    3104:	332c      	adds	r3, #44	; 0x2c
    3106:	681a      	ldr	r2, [r3, #0]
    3108:	4914      	ldr	r1, [pc, #80]	; (315c <Clock_Ip_ResetClockConfiguration+0x184>)
    310a:	4613      	mov	r3, r2
    310c:	00db      	lsls	r3, r3, #3
    310e:	4413      	add	r3, r2
    3110:	440b      	add	r3, r1
    3112:	3301      	adds	r3, #1
    3114:	781b      	ldrb	r3, [r3, #0]
    3116:	461a      	mov	r2, r3
    3118:	4b17      	ldr	r3, [pc, #92]	; (3178 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    311a:	5c9b      	ldrb	r3, [r3, r2]
    311c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    311e:	4917      	ldr	r1, [pc, #92]	; (317c <Clock_Ip_ResetClockConfiguration+0x1a4>)
    3120:	9a02      	ldr	r2, [sp, #8]
    3122:	4613      	mov	r3, r2
    3124:	009b      	lsls	r3, r3, #2
    3126:	4413      	add	r3, r2
    3128:	009b      	lsls	r3, r3, #2
    312a:	440b      	add	r3, r1
    312c:	6819      	ldr	r1, [r3, #0]
    312e:	9b03      	ldr	r3, [sp, #12]
    3130:	1e5a      	subs	r2, r3, #1
    3132:	4613      	mov	r3, r2
    3134:	009b      	lsls	r3, r3, #2
    3136:	4413      	add	r3, r2
    3138:	009b      	lsls	r3, r3, #2
    313a:	3328      	adds	r3, #40	; 0x28
    313c:	9a01      	ldr	r2, [sp, #4]
    313e:	4413      	add	r3, r2
    3140:	3304      	adds	r3, #4
    3142:	4618      	mov	r0, r3
    3144:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    3146:	9b03      	ldr	r3, [sp, #12]
    3148:	3b01      	subs	r3, #1
    314a:	9303      	str	r3, [sp, #12]
    314c:	9b03      	ldr	r3, [sp, #12]
    314e:	2b00      	cmp	r3, #0
    3150:	d1d0      	bne.n	30f4 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    3152:	bf00      	nop
    3154:	bf00      	nop
    3156:	b005      	add	sp, #20
    3158:	f85d fb04 	ldr.w	pc, [sp], #4
    315c:	000190e0 	.word	0x000190e0
    3160:	000190b0 	.word	0x000190b0
    3164:	00019718 	.word	0x00019718
    3168:	00019090 	.word	0x00019090
    316c:	0001965c 	.word	0x0001965c
    3170:	000190a0 	.word	0x000190a0
    3174:	000196ec 	.word	0x000196ec
    3178:	00019060 	.word	0x00019060
    317c:	00019634 	.word	0x00019634

00003180 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    3180:	b500      	push	{lr}
    3182:	b085      	sub	sp, #20
    3184:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    3186:	2301      	movs	r3, #1
    3188:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    318a:	9801      	ldr	r0, [sp, #4]
    318c:	f000 f818 	bl	31c0 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    3190:	4b0a      	ldr	r3, [pc, #40]	; (31bc <Clock_Ip_Init+0x3c>)
    3192:	781b      	ldrb	r3, [r3, #0]
    3194:	2b00      	cmp	r3, #0
    3196:	d00a      	beq.n	31ae <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    3198:	f000 fb74 	bl	3884 <Clock_Ip_GetPllStatus>
    319c:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    319e:	9b02      	ldr	r3, [sp, #8]
    31a0:	2b00      	cmp	r3, #0
    31a2:	d106      	bne.n	31b2 <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    31a4:	f000 fbf2 	bl	398c <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    31a8:	2300      	movs	r3, #0
    31aa:	9303      	str	r3, [sp, #12]
    31ac:	e001      	b.n	31b2 <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    31ae:	2300      	movs	r3, #0
    31b0:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    31b2:	9b03      	ldr	r3, [sp, #12]
}
    31b4:	4618      	mov	r0, r3
    31b6:	b005      	add	sp, #20
    31b8:	f85d fb04 	ldr.w	pc, [sp], #4
    31bc:	1fff8b80 	.word	0x1fff8b80

000031c0 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    31c0:	b510      	push	{r4, lr}
    31c2:	b084      	sub	sp, #16
    31c4:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    31c6:	4a9f      	ldr	r2, [pc, #636]	; (3444 <Clock_Ip_InitClock+0x284>)
    31c8:	9b01      	ldr	r3, [sp, #4]
    31ca:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    31cc:	2101      	movs	r1, #1
    31ce:	9801      	ldr	r0, [sp, #4]
    31d0:	f003 fa90 	bl	66f4 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    31d4:	4b9b      	ldr	r3, [pc, #620]	; (3444 <Clock_Ip_InitClock+0x284>)
    31d6:	681b      	ldr	r3, [r3, #0]
    31d8:	2b00      	cmp	r3, #0
    31da:	d030      	beq.n	323e <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    31dc:	2300      	movs	r3, #0
    31de:	9303      	str	r3, [sp, #12]
    31e0:	e027      	b.n	3232 <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    31e2:	9901      	ldr	r1, [sp, #4]
    31e4:	9a03      	ldr	r2, [sp, #12]
    31e6:	4613      	mov	r3, r2
    31e8:	009b      	lsls	r3, r3, #2
    31ea:	4413      	add	r3, r2
    31ec:	009b      	lsls	r3, r3, #2
    31ee:	440b      	add	r3, r1
    31f0:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    31f4:	681a      	ldr	r2, [r3, #0]
    31f6:	4994      	ldr	r1, [pc, #592]	; (3448 <Clock_Ip_InitClock+0x288>)
    31f8:	4613      	mov	r3, r2
    31fa:	00db      	lsls	r3, r3, #3
    31fc:	4413      	add	r3, r2
    31fe:	440b      	add	r3, r1
    3200:	3301      	adds	r3, #1
    3202:	781b      	ldrb	r3, [r3, #0]
    3204:	461a      	mov	r2, r3
    3206:	4b91      	ldr	r3, [pc, #580]	; (344c <Clock_Ip_InitClock+0x28c>)
    3208:	5c9b      	ldrb	r3, [r3, r2]
    320a:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    320c:	4a90      	ldr	r2, [pc, #576]	; (3450 <Clock_Ip_InitClock+0x290>)
    320e:	9b02      	ldr	r3, [sp, #8]
    3210:	011b      	lsls	r3, r3, #4
    3212:	4413      	add	r3, r2
    3214:	6819      	ldr	r1, [r3, #0]
    3216:	9a03      	ldr	r2, [sp, #12]
    3218:	4613      	mov	r3, r2
    321a:	009b      	lsls	r3, r3, #2
    321c:	4413      	add	r3, r2
    321e:	009b      	lsls	r3, r3, #2
    3220:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    3224:	9a01      	ldr	r2, [sp, #4]
    3226:	4413      	add	r3, r2
    3228:	4618      	mov	r0, r3
    322a:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    322c:	9b03      	ldr	r3, [sp, #12]
    322e:	3301      	adds	r3, #1
    3230:	9303      	str	r3, [sp, #12]
    3232:	9b01      	ldr	r3, [sp, #4]
    3234:	7c9b      	ldrb	r3, [r3, #18]
    3236:	461a      	mov	r2, r3
    3238:	9b03      	ldr	r3, [sp, #12]
    323a:	4293      	cmp	r3, r2
    323c:	d3d1      	bcc.n	31e2 <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    323e:	9801      	ldr	r0, [sp, #4]
    3240:	f7ff feca 	bl	2fd8 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    3244:	2300      	movs	r3, #0
    3246:	9303      	str	r3, [sp, #12]
    3248:	e029      	b.n	329e <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    324a:	9901      	ldr	r1, [sp, #4]
    324c:	9a03      	ldr	r2, [sp, #12]
    324e:	4613      	mov	r3, r2
    3250:	005b      	lsls	r3, r3, #1
    3252:	4413      	add	r3, r2
    3254:	009b      	lsls	r3, r3, #2
    3256:	440b      	add	r3, r1
    3258:	3314      	adds	r3, #20
    325a:	681a      	ldr	r2, [r3, #0]
    325c:	497a      	ldr	r1, [pc, #488]	; (3448 <Clock_Ip_InitClock+0x288>)
    325e:	4613      	mov	r3, r2
    3260:	00db      	lsls	r3, r3, #3
    3262:	4413      	add	r3, r2
    3264:	440b      	add	r3, r1
    3266:	3301      	adds	r3, #1
    3268:	781b      	ldrb	r3, [r3, #0]
    326a:	461a      	mov	r2, r3
    326c:	4b79      	ldr	r3, [pc, #484]	; (3454 <Clock_Ip_InitClock+0x294>)
    326e:	5c9b      	ldrb	r3, [r3, r2]
    3270:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    3272:	4979      	ldr	r1, [pc, #484]	; (3458 <Clock_Ip_InitClock+0x298>)
    3274:	9a02      	ldr	r2, [sp, #8]
    3276:	4613      	mov	r3, r2
    3278:	005b      	lsls	r3, r3, #1
    327a:	4413      	add	r3, r2
    327c:	009b      	lsls	r3, r3, #2
    327e:	440b      	add	r3, r1
    3280:	6819      	ldr	r1, [r3, #0]
    3282:	9a03      	ldr	r2, [sp, #12]
    3284:	4613      	mov	r3, r2
    3286:	005b      	lsls	r3, r3, #1
    3288:	4413      	add	r3, r2
    328a:	009b      	lsls	r3, r3, #2
    328c:	3310      	adds	r3, #16
    328e:	9a01      	ldr	r2, [sp, #4]
    3290:	4413      	add	r3, r2
    3292:	3304      	adds	r3, #4
    3294:	4618      	mov	r0, r3
    3296:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    3298:	9b03      	ldr	r3, [sp, #12]
    329a:	3301      	adds	r3, #1
    329c:	9303      	str	r3, [sp, #12]
    329e:	9b01      	ldr	r3, [sp, #4]
    32a0:	7a1b      	ldrb	r3, [r3, #8]
    32a2:	461a      	mov	r2, r3
    32a4:	9b03      	ldr	r3, [sp, #12]
    32a6:	4293      	cmp	r3, r2
    32a8:	d3cf      	bcc.n	324a <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    32aa:	2300      	movs	r3, #0
    32ac:	9303      	str	r3, [sp, #12]
    32ae:	e02a      	b.n	3306 <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    32b0:	9901      	ldr	r1, [sp, #4]
    32b2:	9a03      	ldr	r2, [sp, #12]
    32b4:	4613      	mov	r3, r2
    32b6:	009b      	lsls	r3, r3, #2
    32b8:	4413      	add	r3, r2
    32ba:	009b      	lsls	r3, r3, #2
    32bc:	440b      	add	r3, r1
    32be:	332c      	adds	r3, #44	; 0x2c
    32c0:	681a      	ldr	r2, [r3, #0]
    32c2:	4961      	ldr	r1, [pc, #388]	; (3448 <Clock_Ip_InitClock+0x288>)
    32c4:	4613      	mov	r3, r2
    32c6:	00db      	lsls	r3, r3, #3
    32c8:	4413      	add	r3, r2
    32ca:	440b      	add	r3, r1
    32cc:	3301      	adds	r3, #1
    32ce:	781b      	ldrb	r3, [r3, #0]
    32d0:	461a      	mov	r2, r3
    32d2:	4b62      	ldr	r3, [pc, #392]	; (345c <Clock_Ip_InitClock+0x29c>)
    32d4:	5c9b      	ldrb	r3, [r3, r2]
    32d6:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    32d8:	4961      	ldr	r1, [pc, #388]	; (3460 <Clock_Ip_InitClock+0x2a0>)
    32da:	9a02      	ldr	r2, [sp, #8]
    32dc:	4613      	mov	r3, r2
    32de:	009b      	lsls	r3, r3, #2
    32e0:	4413      	add	r3, r2
    32e2:	009b      	lsls	r3, r3, #2
    32e4:	440b      	add	r3, r1
    32e6:	3304      	adds	r3, #4
    32e8:	6819      	ldr	r1, [r3, #0]
    32ea:	9a03      	ldr	r2, [sp, #12]
    32ec:	4613      	mov	r3, r2
    32ee:	009b      	lsls	r3, r3, #2
    32f0:	4413      	add	r3, r2
    32f2:	009b      	lsls	r3, r3, #2
    32f4:	3328      	adds	r3, #40	; 0x28
    32f6:	9a01      	ldr	r2, [sp, #4]
    32f8:	4413      	add	r3, r2
    32fa:	3304      	adds	r3, #4
    32fc:	4618      	mov	r0, r3
    32fe:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    3300:	9b03      	ldr	r3, [sp, #12]
    3302:	3301      	adds	r3, #1
    3304:	9303      	str	r3, [sp, #12]
    3306:	9b01      	ldr	r3, [sp, #4]
    3308:	7a5b      	ldrb	r3, [r3, #9]
    330a:	461a      	mov	r2, r3
    330c:	9b03      	ldr	r3, [sp, #12]
    330e:	4293      	cmp	r3, r2
    3310:	d3ce      	bcc.n	32b0 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    3312:	9801      	ldr	r0, [sp, #4]
    3314:	f7ff fdb0 	bl	2e78 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    3318:	2300      	movs	r3, #0
    331a:	9303      	str	r3, [sp, #12]
    331c:	e028      	b.n	3370 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    331e:	9901      	ldr	r1, [sp, #4]
    3320:	9a03      	ldr	r2, [sp, #12]
    3322:	4613      	mov	r3, r2
    3324:	009b      	lsls	r3, r3, #2
    3326:	4413      	add	r3, r2
    3328:	009b      	lsls	r3, r3, #2
    332a:	440b      	add	r3, r1
    332c:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    3330:	681a      	ldr	r2, [r3, #0]
    3332:	4945      	ldr	r1, [pc, #276]	; (3448 <Clock_Ip_InitClock+0x288>)
    3334:	4613      	mov	r3, r2
    3336:	00db      	lsls	r3, r3, #3
    3338:	4413      	add	r3, r2
    333a:	440b      	add	r3, r1
    333c:	3301      	adds	r3, #1
    333e:	781b      	ldrb	r3, [r3, #0]
    3340:	461a      	mov	r2, r3
    3342:	4b48      	ldr	r3, [pc, #288]	; (3464 <Clock_Ip_InitClock+0x2a4>)
    3344:	5c9b      	ldrb	r3, [r3, r2]
    3346:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    3348:	4a47      	ldr	r2, [pc, #284]	; (3468 <Clock_Ip_InitClock+0x2a8>)
    334a:	9b02      	ldr	r3, [sp, #8]
    334c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    3350:	9a03      	ldr	r2, [sp, #12]
    3352:	4613      	mov	r3, r2
    3354:	009b      	lsls	r3, r3, #2
    3356:	4413      	add	r3, r2
    3358:	009b      	lsls	r3, r3, #2
    335a:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    335e:	9a01      	ldr	r2, [sp, #4]
    3360:	4413      	add	r3, r2
    3362:	3304      	adds	r3, #4
    3364:	9903      	ldr	r1, [sp, #12]
    3366:	4618      	mov	r0, r3
    3368:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    336a:	9b03      	ldr	r3, [sp, #12]
    336c:	3301      	adds	r3, #1
    336e:	9303      	str	r3, [sp, #12]
    3370:	9b01      	ldr	r3, [sp, #4]
    3372:	7c5b      	ldrb	r3, [r3, #17]
    3374:	461a      	mov	r2, r3
    3376:	9b03      	ldr	r3, [sp, #12]
    3378:	4293      	cmp	r3, r2
    337a:	d3d0      	bcc.n	331e <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    337c:	2300      	movs	r3, #0
    337e:	9303      	str	r3, [sp, #12]
    3380:	e026      	b.n	33d0 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    3382:	9901      	ldr	r1, [sp, #4]
    3384:	9a03      	ldr	r2, [sp, #12]
    3386:	4613      	mov	r3, r2
    3388:	005b      	lsls	r3, r3, #1
    338a:	4413      	add	r3, r2
    338c:	009b      	lsls	r3, r3, #2
    338e:	440b      	add	r3, r1
    3390:	f503 730e 	add.w	r3, r3, #568	; 0x238
    3394:	681a      	ldr	r2, [r3, #0]
    3396:	492c      	ldr	r1, [pc, #176]	; (3448 <Clock_Ip_InitClock+0x288>)
    3398:	4613      	mov	r3, r2
    339a:	00db      	lsls	r3, r3, #3
    339c:	4413      	add	r3, r2
    339e:	440b      	add	r3, r1
    33a0:	3301      	adds	r3, #1
    33a2:	781b      	ldrb	r3, [r3, #0]
    33a4:	461a      	mov	r2, r3
    33a6:	4b31      	ldr	r3, [pc, #196]	; (346c <Clock_Ip_InitClock+0x2ac>)
    33a8:	5c9b      	ldrb	r3, [r3, r2]
    33aa:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    33ac:	4a30      	ldr	r2, [pc, #192]	; (3470 <Clock_Ip_InitClock+0x2b0>)
    33ae:	9b02      	ldr	r3, [sp, #8]
    33b0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    33b4:	9a03      	ldr	r2, [sp, #12]
    33b6:	4613      	mov	r3, r2
    33b8:	005b      	lsls	r3, r3, #1
    33ba:	4413      	add	r3, r2
    33bc:	009b      	lsls	r3, r3, #2
    33be:	f503 730e 	add.w	r3, r3, #568	; 0x238
    33c2:	9a01      	ldr	r2, [sp, #4]
    33c4:	4413      	add	r3, r2
    33c6:	4618      	mov	r0, r3
    33c8:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    33ca:	9b03      	ldr	r3, [sp, #12]
    33cc:	3301      	adds	r3, #1
    33ce:	9303      	str	r3, [sp, #12]
    33d0:	9b01      	ldr	r3, [sp, #4]
    33d2:	7b5b      	ldrb	r3, [r3, #13]
    33d4:	461a      	mov	r2, r3
    33d6:	9b03      	ldr	r3, [sp, #12]
    33d8:	4293      	cmp	r3, r2
    33da:	d3d2      	bcc.n	3382 <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    33dc:	2300      	movs	r3, #0
    33de:	9303      	str	r3, [sp, #12]
    33e0:	e026      	b.n	3430 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    33e2:	9901      	ldr	r1, [sp, #4]
    33e4:	9a03      	ldr	r2, [sp, #12]
    33e6:	4613      	mov	r3, r2
    33e8:	005b      	lsls	r3, r3, #1
    33ea:	4413      	add	r3, r2
    33ec:	009b      	lsls	r3, r3, #2
    33ee:	440b      	add	r3, r1
    33f0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    33f4:	681a      	ldr	r2, [r3, #0]
    33f6:	4914      	ldr	r1, [pc, #80]	; (3448 <Clock_Ip_InitClock+0x288>)
    33f8:	4613      	mov	r3, r2
    33fa:	00db      	lsls	r3, r3, #3
    33fc:	4413      	add	r3, r2
    33fe:	440b      	add	r3, r1
    3400:	3301      	adds	r3, #1
    3402:	781b      	ldrb	r3, [r3, #0]
    3404:	461a      	mov	r2, r3
    3406:	4b1b      	ldr	r3, [pc, #108]	; (3474 <Clock_Ip_InitClock+0x2b4>)
    3408:	5c9b      	ldrb	r3, [r3, r2]
    340a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    340c:	4a1a      	ldr	r2, [pc, #104]	; (3478 <Clock_Ip_InitClock+0x2b8>)
    340e:	9b02      	ldr	r3, [sp, #8]
    3410:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    3414:	9a03      	ldr	r2, [sp, #12]
    3416:	4613      	mov	r3, r2
    3418:	005b      	lsls	r3, r3, #1
    341a:	4413      	add	r3, r2
    341c:	009b      	lsls	r3, r3, #2
    341e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    3422:	9a01      	ldr	r2, [sp, #4]
    3424:	4413      	add	r3, r2
    3426:	4618      	mov	r0, r3
    3428:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    342a:	9b03      	ldr	r3, [sp, #12]
    342c:	3301      	adds	r3, #1
    342e:	9303      	str	r3, [sp, #12]
    3430:	9b01      	ldr	r3, [sp, #4]
    3432:	7b1b      	ldrb	r3, [r3, #12]
    3434:	461a      	mov	r2, r3
    3436:	9b03      	ldr	r3, [sp, #12]
    3438:	4293      	cmp	r3, r2
    343a:	d3d2      	bcc.n	33e2 <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    343c:	2300      	movs	r3, #0
    343e:	9303      	str	r3, [sp, #12]
    3440:	e044      	b.n	34cc <Clock_Ip_InitClock+0x30c>
    3442:	bf00      	nop
    3444:	1fff8b78 	.word	0x1fff8b78
    3448:	000190e0 	.word	0x000190e0
    344c:	000190d0 	.word	0x000190d0
    3450:	000196dc 	.word	0x000196dc
    3454:	00019070 	.word	0x00019070
    3458:	000196a0 	.word	0x000196a0
    345c:	00019060 	.word	0x00019060
    3460:	00019634 	.word	0x00019634
    3464:	000190c0 	.word	0x000190c0
    3468:	00019714 	.word	0x00019714
    346c:	00019050 	.word	0x00019050
    3470:	0001962c 	.word	0x0001962c
    3474:	00019040 	.word	0x00019040
    3478:	000195f0 	.word	0x000195f0
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    347c:	9901      	ldr	r1, [sp, #4]
    347e:	9a03      	ldr	r2, [sp, #12]
    3480:	4613      	mov	r3, r2
    3482:	005b      	lsls	r3, r3, #1
    3484:	4413      	add	r3, r2
    3486:	009b      	lsls	r3, r3, #2
    3488:	440b      	add	r3, r1
    348a:	f503 730e 	add.w	r3, r3, #568	; 0x238
    348e:	681a      	ldr	r2, [r3, #0]
    3490:	49ac      	ldr	r1, [pc, #688]	; (3744 <Clock_Ip_InitClock+0x584>)
    3492:	4613      	mov	r3, r2
    3494:	00db      	lsls	r3, r3, #3
    3496:	4413      	add	r3, r2
    3498:	440b      	add	r3, r1
    349a:	3301      	adds	r3, #1
    349c:	781b      	ldrb	r3, [r3, #0]
    349e:	461a      	mov	r2, r3
    34a0:	4ba9      	ldr	r3, [pc, #676]	; (3748 <Clock_Ip_InitClock+0x588>)
    34a2:	5c9b      	ldrb	r3, [r3, r2]
    34a4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    34a6:	4aa9      	ldr	r2, [pc, #676]	; (374c <Clock_Ip_InitClock+0x58c>)
    34a8:	9b02      	ldr	r3, [sp, #8]
    34aa:	00db      	lsls	r3, r3, #3
    34ac:	4413      	add	r3, r2
    34ae:	6859      	ldr	r1, [r3, #4]
    34b0:	9a03      	ldr	r2, [sp, #12]
    34b2:	4613      	mov	r3, r2
    34b4:	005b      	lsls	r3, r3, #1
    34b6:	4413      	add	r3, r2
    34b8:	009b      	lsls	r3, r3, #2
    34ba:	f503 730e 	add.w	r3, r3, #568	; 0x238
    34be:	9a01      	ldr	r2, [sp, #4]
    34c0:	4413      	add	r3, r2
    34c2:	4618      	mov	r0, r3
    34c4:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    34c6:	9b03      	ldr	r3, [sp, #12]
    34c8:	3301      	adds	r3, #1
    34ca:	9303      	str	r3, [sp, #12]
    34cc:	9b01      	ldr	r3, [sp, #4]
    34ce:	7b5b      	ldrb	r3, [r3, #13]
    34d0:	461a      	mov	r2, r3
    34d2:	9b03      	ldr	r3, [sp, #12]
    34d4:	4293      	cmp	r3, r2
    34d6:	d3d1      	bcc.n	347c <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    34d8:	2300      	movs	r3, #0
    34da:	9303      	str	r3, [sp, #12]
    34dc:	e029      	b.n	3532 <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    34de:	9901      	ldr	r1, [sp, #4]
    34e0:	9a03      	ldr	r2, [sp, #12]
    34e2:	4613      	mov	r3, r2
    34e4:	009b      	lsls	r3, r3, #2
    34e6:	4413      	add	r3, r2
    34e8:	00db      	lsls	r3, r3, #3
    34ea:	440b      	add	r3, r1
    34ec:	3340      	adds	r3, #64	; 0x40
    34ee:	681a      	ldr	r2, [r3, #0]
    34f0:	4994      	ldr	r1, [pc, #592]	; (3744 <Clock_Ip_InitClock+0x584>)
    34f2:	4613      	mov	r3, r2
    34f4:	00db      	lsls	r3, r3, #3
    34f6:	4413      	add	r3, r2
    34f8:	440b      	add	r3, r1
    34fa:	3301      	adds	r3, #1
    34fc:	781b      	ldrb	r3, [r3, #0]
    34fe:	461a      	mov	r2, r3
    3500:	4b93      	ldr	r3, [pc, #588]	; (3750 <Clock_Ip_InitClock+0x590>)
    3502:	5c9b      	ldrb	r3, [r3, r2]
    3504:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    3506:	4993      	ldr	r1, [pc, #588]	; (3754 <Clock_Ip_InitClock+0x594>)
    3508:	9a02      	ldr	r2, [sp, #8]
    350a:	4613      	mov	r3, r2
    350c:	009b      	lsls	r3, r3, #2
    350e:	4413      	add	r3, r2
    3510:	009b      	lsls	r3, r3, #2
    3512:	440b      	add	r3, r1
    3514:	3304      	adds	r3, #4
    3516:	6819      	ldr	r1, [r3, #0]
    3518:	9a03      	ldr	r2, [sp, #12]
    351a:	4613      	mov	r3, r2
    351c:	009b      	lsls	r3, r3, #2
    351e:	4413      	add	r3, r2
    3520:	00db      	lsls	r3, r3, #3
    3522:	3340      	adds	r3, #64	; 0x40
    3524:	9a01      	ldr	r2, [sp, #4]
    3526:	4413      	add	r3, r2
    3528:	4618      	mov	r0, r3
    352a:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    352c:	9b03      	ldr	r3, [sp, #12]
    352e:	3301      	adds	r3, #1
    3530:	9303      	str	r3, [sp, #12]
    3532:	9b01      	ldr	r3, [sp, #4]
    3534:	7a9b      	ldrb	r3, [r3, #10]
    3536:	461a      	mov	r2, r3
    3538:	9b03      	ldr	r3, [sp, #12]
    353a:	4293      	cmp	r3, r2
    353c:	d3cf      	bcc.n	34de <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    353e:	2300      	movs	r3, #0
    3540:	9303      	str	r3, [sp, #12]
    3542:	e029      	b.n	3598 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    3544:	9901      	ldr	r1, [sp, #4]
    3546:	9a03      	ldr	r2, [sp, #12]
    3548:	4613      	mov	r3, r2
    354a:	009b      	lsls	r3, r3, #2
    354c:	4413      	add	r3, r2
    354e:	009b      	lsls	r3, r3, #2
    3550:	440b      	add	r3, r1
    3552:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    3556:	681a      	ldr	r2, [r3, #0]
    3558:	497a      	ldr	r1, [pc, #488]	; (3744 <Clock_Ip_InitClock+0x584>)
    355a:	4613      	mov	r3, r2
    355c:	00db      	lsls	r3, r3, #3
    355e:	4413      	add	r3, r2
    3560:	440b      	add	r3, r1
    3562:	3301      	adds	r3, #1
    3564:	781b      	ldrb	r3, [r3, #0]
    3566:	461a      	mov	r2, r3
    3568:	4b7b      	ldr	r3, [pc, #492]	; (3758 <Clock_Ip_InitClock+0x598>)
    356a:	5c9b      	ldrb	r3, [r3, r2]
    356c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    356e:	4a7b      	ldr	r2, [pc, #492]	; (375c <Clock_Ip_InitClock+0x59c>)
    3570:	9b02      	ldr	r3, [sp, #8]
    3572:	011b      	lsls	r3, r3, #4
    3574:	4413      	add	r3, r2
    3576:	3304      	adds	r3, #4
    3578:	681c      	ldr	r4, [r3, #0]
    357a:	9a03      	ldr	r2, [sp, #12]
    357c:	4613      	mov	r3, r2
    357e:	009b      	lsls	r3, r3, #2
    3580:	4413      	add	r3, r2
    3582:	009b      	lsls	r3, r3, #2
    3584:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    3588:	9a01      	ldr	r2, [sp, #4]
    358a:	4413      	add	r3, r2
    358c:	9903      	ldr	r1, [sp, #12]
    358e:	4618      	mov	r0, r3
    3590:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    3592:	9b03      	ldr	r3, [sp, #12]
    3594:	3301      	adds	r3, #1
    3596:	9303      	str	r3, [sp, #12]
    3598:	9b01      	ldr	r3, [sp, #4]
    359a:	7c9b      	ldrb	r3, [r3, #18]
    359c:	461a      	mov	r2, r3
    359e:	9b03      	ldr	r3, [sp, #12]
    35a0:	4293      	cmp	r3, r2
    35a2:	d3cf      	bcc.n	3544 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    35a4:	2300      	movs	r3, #0
    35a6:	9303      	str	r3, [sp, #12]
    35a8:	e02a      	b.n	3600 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    35aa:	9901      	ldr	r1, [sp, #4]
    35ac:	9a03      	ldr	r2, [sp, #12]
    35ae:	4613      	mov	r3, r2
    35b0:	009b      	lsls	r3, r3, #2
    35b2:	4413      	add	r3, r2
    35b4:	009b      	lsls	r3, r3, #2
    35b6:	440b      	add	r3, r1
    35b8:	332c      	adds	r3, #44	; 0x2c
    35ba:	681a      	ldr	r2, [r3, #0]
    35bc:	4961      	ldr	r1, [pc, #388]	; (3744 <Clock_Ip_InitClock+0x584>)
    35be:	4613      	mov	r3, r2
    35c0:	00db      	lsls	r3, r3, #3
    35c2:	4413      	add	r3, r2
    35c4:	440b      	add	r3, r1
    35c6:	3301      	adds	r3, #1
    35c8:	781b      	ldrb	r3, [r3, #0]
    35ca:	461a      	mov	r2, r3
    35cc:	4b64      	ldr	r3, [pc, #400]	; (3760 <Clock_Ip_InitClock+0x5a0>)
    35ce:	5c9b      	ldrb	r3, [r3, r2]
    35d0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    35d2:	4964      	ldr	r1, [pc, #400]	; (3764 <Clock_Ip_InitClock+0x5a4>)
    35d4:	9a02      	ldr	r2, [sp, #8]
    35d6:	4613      	mov	r3, r2
    35d8:	009b      	lsls	r3, r3, #2
    35da:	4413      	add	r3, r2
    35dc:	009b      	lsls	r3, r3, #2
    35de:	440b      	add	r3, r1
    35e0:	3308      	adds	r3, #8
    35e2:	6819      	ldr	r1, [r3, #0]
    35e4:	9a03      	ldr	r2, [sp, #12]
    35e6:	4613      	mov	r3, r2
    35e8:	009b      	lsls	r3, r3, #2
    35ea:	4413      	add	r3, r2
    35ec:	009b      	lsls	r3, r3, #2
    35ee:	3328      	adds	r3, #40	; 0x28
    35f0:	9a01      	ldr	r2, [sp, #4]
    35f2:	4413      	add	r3, r2
    35f4:	3304      	adds	r3, #4
    35f6:	4618      	mov	r0, r3
    35f8:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    35fa:	9b03      	ldr	r3, [sp, #12]
    35fc:	3301      	adds	r3, #1
    35fe:	9303      	str	r3, [sp, #12]
    3600:	9b01      	ldr	r3, [sp, #4]
    3602:	7a5b      	ldrb	r3, [r3, #9]
    3604:	461a      	mov	r2, r3
    3606:	9b03      	ldr	r3, [sp, #12]
    3608:	4293      	cmp	r3, r2
    360a:	d3ce      	bcc.n	35aa <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    360c:	2300      	movs	r3, #0
    360e:	9303      	str	r3, [sp, #12]
    3610:	e029      	b.n	3666 <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    3612:	9901      	ldr	r1, [sp, #4]
    3614:	9a03      	ldr	r2, [sp, #12]
    3616:	4613      	mov	r3, r2
    3618:	009b      	lsls	r3, r3, #2
    361a:	4413      	add	r3, r2
    361c:	00db      	lsls	r3, r3, #3
    361e:	440b      	add	r3, r1
    3620:	3340      	adds	r3, #64	; 0x40
    3622:	681a      	ldr	r2, [r3, #0]
    3624:	4947      	ldr	r1, [pc, #284]	; (3744 <Clock_Ip_InitClock+0x584>)
    3626:	4613      	mov	r3, r2
    3628:	00db      	lsls	r3, r3, #3
    362a:	4413      	add	r3, r2
    362c:	440b      	add	r3, r1
    362e:	3301      	adds	r3, #1
    3630:	781b      	ldrb	r3, [r3, #0]
    3632:	461a      	mov	r2, r3
    3634:	4b46      	ldr	r3, [pc, #280]	; (3750 <Clock_Ip_InitClock+0x590>)
    3636:	5c9b      	ldrb	r3, [r3, r2]
    3638:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    363a:	4946      	ldr	r1, [pc, #280]	; (3754 <Clock_Ip_InitClock+0x594>)
    363c:	9a02      	ldr	r2, [sp, #8]
    363e:	4613      	mov	r3, r2
    3640:	009b      	lsls	r3, r3, #2
    3642:	4413      	add	r3, r2
    3644:	009b      	lsls	r3, r3, #2
    3646:	440b      	add	r3, r1
    3648:	330c      	adds	r3, #12
    364a:	6819      	ldr	r1, [r3, #0]
    364c:	9a03      	ldr	r2, [sp, #12]
    364e:	4613      	mov	r3, r2
    3650:	009b      	lsls	r3, r3, #2
    3652:	4413      	add	r3, r2
    3654:	00db      	lsls	r3, r3, #3
    3656:	3340      	adds	r3, #64	; 0x40
    3658:	9a01      	ldr	r2, [sp, #4]
    365a:	4413      	add	r3, r2
    365c:	4618      	mov	r0, r3
    365e:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    3660:	9b03      	ldr	r3, [sp, #12]
    3662:	3301      	adds	r3, #1
    3664:	9303      	str	r3, [sp, #12]
    3666:	9b01      	ldr	r3, [sp, #4]
    3668:	7a9b      	ldrb	r3, [r3, #10]
    366a:	461a      	mov	r2, r3
    366c:	9b03      	ldr	r3, [sp, #12]
    366e:	4293      	cmp	r3, r2
    3670:	d3cf      	bcc.n	3612 <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    3672:	2300      	movs	r3, #0
    3674:	9303      	str	r3, [sp, #12]
    3676:	e025      	b.n	36c4 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    3678:	9a01      	ldr	r2, [sp, #4]
    367a:	9b03      	ldr	r3, [sp, #12]
    367c:	3324      	adds	r3, #36	; 0x24
    367e:	011b      	lsls	r3, r3, #4
    3680:	4413      	add	r3, r2
    3682:	3304      	adds	r3, #4
    3684:	681a      	ldr	r2, [r3, #0]
    3686:	492f      	ldr	r1, [pc, #188]	; (3744 <Clock_Ip_InitClock+0x584>)
    3688:	4613      	mov	r3, r2
    368a:	00db      	lsls	r3, r3, #3
    368c:	4413      	add	r3, r2
    368e:	440b      	add	r3, r1
    3690:	3301      	adds	r3, #1
    3692:	781b      	ldrb	r3, [r3, #0]
    3694:	461a      	mov	r2, r3
    3696:	4b34      	ldr	r3, [pc, #208]	; (3768 <Clock_Ip_InitClock+0x5a8>)
    3698:	5c9b      	ldrb	r3, [r3, r2]
    369a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    369c:	4933      	ldr	r1, [pc, #204]	; (376c <Clock_Ip_InitClock+0x5ac>)
    369e:	9a02      	ldr	r2, [sp, #8]
    36a0:	4613      	mov	r3, r2
    36a2:	005b      	lsls	r3, r3, #1
    36a4:	4413      	add	r3, r2
    36a6:	009b      	lsls	r3, r3, #2
    36a8:	440b      	add	r3, r1
    36aa:	3304      	adds	r3, #4
    36ac:	681b      	ldr	r3, [r3, #0]
    36ae:	9a03      	ldr	r2, [sp, #12]
    36b0:	3224      	adds	r2, #36	; 0x24
    36b2:	0112      	lsls	r2, r2, #4
    36b4:	9901      	ldr	r1, [sp, #4]
    36b6:	440a      	add	r2, r1
    36b8:	3204      	adds	r2, #4
    36ba:	4610      	mov	r0, r2
    36bc:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    36be:	9b03      	ldr	r3, [sp, #12]
    36c0:	3301      	adds	r3, #1
    36c2:	9303      	str	r3, [sp, #12]
    36c4:	9b01      	ldr	r3, [sp, #4]
    36c6:	7b9b      	ldrb	r3, [r3, #14]
    36c8:	461a      	mov	r2, r3
    36ca:	9b03      	ldr	r3, [sp, #12]
    36cc:	4293      	cmp	r3, r2
    36ce:	d3d3      	bcc.n	3678 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    36d0:	4b27      	ldr	r3, [pc, #156]	; (3770 <Clock_Ip_InitClock+0x5b0>)
    36d2:	2200      	movs	r2, #0
    36d4:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    36d6:	4b26      	ldr	r3, [pc, #152]	; (3770 <Clock_Ip_InitClock+0x5b0>)
    36d8:	2200      	movs	r2, #0
    36da:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    36dc:	4b24      	ldr	r3, [pc, #144]	; (3770 <Clock_Ip_InitClock+0x5b0>)
    36de:	2201      	movs	r2, #1
    36e0:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    36e2:	4b23      	ldr	r3, [pc, #140]	; (3770 <Clock_Ip_InitClock+0x5b0>)
    36e4:	2200      	movs	r2, #0
    36e6:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    36e8:	f000 fa9c 	bl	3c24 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    36ec:	2300      	movs	r3, #0
    36ee:	9303      	str	r3, [sp, #12]
    36f0:	e04c      	b.n	378c <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    36f2:	9a01      	ldr	r2, [sp, #4]
    36f4:	9b03      	ldr	r3, [sp, #12]
    36f6:	330d      	adds	r3, #13
    36f8:	00db      	lsls	r3, r3, #3
    36fa:	4413      	add	r3, r2
    36fc:	685b      	ldr	r3, [r3, #4]
    36fe:	4a1d      	ldr	r2, [pc, #116]	; (3774 <Clock_Ip_InitClock+0x5b4>)
    3700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3704:	2b03      	cmp	r3, #3
    3706:	d03b      	beq.n	3780 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    3708:	9b01      	ldr	r3, [sp, #4]
    370a:	9a03      	ldr	r2, [sp, #12]
    370c:	320d      	adds	r2, #13
    370e:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    3712:	490c      	ldr	r1, [pc, #48]	; (3744 <Clock_Ip_InitClock+0x584>)
    3714:	4613      	mov	r3, r2
    3716:	00db      	lsls	r3, r3, #3
    3718:	4413      	add	r3, r2
    371a:	440b      	add	r3, r1
    371c:	3301      	adds	r3, #1
    371e:	781b      	ldrb	r3, [r3, #0]
    3720:	461a      	mov	r2, r3
    3722:	4b15      	ldr	r3, [pc, #84]	; (3778 <Clock_Ip_InitClock+0x5b8>)
    3724:	5c9b      	ldrb	r3, [r3, r2]
    3726:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    3728:	4a14      	ldr	r2, [pc, #80]	; (377c <Clock_Ip_InitClock+0x5bc>)
    372a:	9b02      	ldr	r3, [sp, #8]
    372c:	00db      	lsls	r3, r3, #3
    372e:	4413      	add	r3, r2
    3730:	685b      	ldr	r3, [r3, #4]
    3732:	9a03      	ldr	r2, [sp, #12]
    3734:	320d      	adds	r2, #13
    3736:	00d2      	lsls	r2, r2, #3
    3738:	9901      	ldr	r1, [sp, #4]
    373a:	440a      	add	r2, r1
    373c:	4610      	mov	r0, r2
    373e:	4798      	blx	r3
    3740:	e021      	b.n	3786 <Clock_Ip_InitClock+0x5c6>
    3742:	bf00      	nop
    3744:	000190e0 	.word	0x000190e0
    3748:	00019050 	.word	0x00019050
    374c:	0001962c 	.word	0x0001962c
    3750:	000190a0 	.word	0x000190a0
    3754:	000196ec 	.word	0x000196ec
    3758:	000190d0 	.word	0x000190d0
    375c:	000196dc 	.word	0x000196dc
    3760:	00019060 	.word	0x00019060
    3764:	00019634 	.word	0x00019634
    3768:	00019090 	.word	0x00019090
    376c:	0001965c 	.word	0x0001965c
    3770:	1fff8b80 	.word	0x1fff8b80
    3774:	0001952c 	.word	0x0001952c
    3778:	000190b0 	.word	0x000190b0
    377c:	00019718 	.word	0x00019718
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    3780:	4b3a      	ldr	r3, [pc, #232]	; (386c <Clock_Ip_InitClock+0x6ac>)
    3782:	2201      	movs	r2, #1
    3784:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    3786:	9b03      	ldr	r3, [sp, #12]
    3788:	3301      	adds	r3, #1
    378a:	9303      	str	r3, [sp, #12]
    378c:	9b01      	ldr	r3, [sp, #4]
    378e:	7adb      	ldrb	r3, [r3, #11]
    3790:	461a      	mov	r2, r3
    3792:	9b03      	ldr	r3, [sp, #12]
    3794:	4293      	cmp	r3, r2
    3796:	d3ac      	bcc.n	36f2 <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    3798:	4b34      	ldr	r3, [pc, #208]	; (386c <Clock_Ip_InitClock+0x6ac>)
    379a:	781b      	ldrb	r3, [r3, #0]
    379c:	f083 0301 	eor.w	r3, r3, #1
    37a0:	b2db      	uxtb	r3, r3
    37a2:	2b00      	cmp	r3, #0
    37a4:	d05e      	beq.n	3864 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    37a6:	2300      	movs	r3, #0
    37a8:	9303      	str	r3, [sp, #12]
    37aa:	e01f      	b.n	37ec <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    37ac:	9a01      	ldr	r2, [sp, #4]
    37ae:	9b03      	ldr	r3, [sp, #12]
    37b0:	334e      	adds	r3, #78	; 0x4e
    37b2:	00db      	lsls	r3, r3, #3
    37b4:	4413      	add	r3, r2
    37b6:	685a      	ldr	r2, [r3, #4]
    37b8:	492d      	ldr	r1, [pc, #180]	; (3870 <Clock_Ip_InitClock+0x6b0>)
    37ba:	4613      	mov	r3, r2
    37bc:	00db      	lsls	r3, r3, #3
    37be:	4413      	add	r3, r2
    37c0:	440b      	add	r3, r1
    37c2:	3301      	adds	r3, #1
    37c4:	781b      	ldrb	r3, [r3, #0]
    37c6:	461a      	mov	r2, r3
    37c8:	4b2a      	ldr	r3, [pc, #168]	; (3874 <Clock_Ip_InitClock+0x6b4>)
    37ca:	5c9b      	ldrb	r3, [r3, r2]
    37cc:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    37ce:	4a2a      	ldr	r2, [pc, #168]	; (3878 <Clock_Ip_InitClock+0x6b8>)
    37d0:	9b02      	ldr	r3, [sp, #8]
    37d2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    37d6:	9a03      	ldr	r2, [sp, #12]
    37d8:	324e      	adds	r2, #78	; 0x4e
    37da:	00d2      	lsls	r2, r2, #3
    37dc:	9901      	ldr	r1, [sp, #4]
    37de:	440a      	add	r2, r1
    37e0:	3204      	adds	r2, #4
    37e2:	4610      	mov	r0, r2
    37e4:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    37e6:	9b03      	ldr	r3, [sp, #12]
    37e8:	3301      	adds	r3, #1
    37ea:	9303      	str	r3, [sp, #12]
    37ec:	9b01      	ldr	r3, [sp, #4]
    37ee:	7c1b      	ldrb	r3, [r3, #16]
    37f0:	461a      	mov	r2, r3
    37f2:	9b03      	ldr	r3, [sp, #12]
    37f4:	4293      	cmp	r3, r2
    37f6:	d3d9      	bcc.n	37ac <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    37f8:	2300      	movs	r3, #0
    37fa:	9303      	str	r3, [sp, #12]
    37fc:	e028      	b.n	3850 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    37fe:	9901      	ldr	r1, [sp, #4]
    3800:	9a03      	ldr	r2, [sp, #12]
    3802:	4613      	mov	r3, r2
    3804:	009b      	lsls	r3, r3, #2
    3806:	4413      	add	r3, r2
    3808:	009b      	lsls	r3, r3, #2
    380a:	440b      	add	r3, r1
    380c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    3810:	681a      	ldr	r2, [r3, #0]
    3812:	4917      	ldr	r1, [pc, #92]	; (3870 <Clock_Ip_InitClock+0x6b0>)
    3814:	4613      	mov	r3, r2
    3816:	00db      	lsls	r3, r3, #3
    3818:	4413      	add	r3, r2
    381a:	440b      	add	r3, r1
    381c:	3301      	adds	r3, #1
    381e:	781b      	ldrb	r3, [r3, #0]
    3820:	461a      	mov	r2, r3
    3822:	4b16      	ldr	r3, [pc, #88]	; (387c <Clock_Ip_InitClock+0x6bc>)
    3824:	5c9b      	ldrb	r3, [r3, r2]
    3826:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    3828:	4a15      	ldr	r2, [pc, #84]	; (3880 <Clock_Ip_InitClock+0x6c0>)
    382a:	9b02      	ldr	r3, [sp, #8]
    382c:	011b      	lsls	r3, r3, #4
    382e:	4413      	add	r3, r2
    3830:	330c      	adds	r3, #12
    3832:	6819      	ldr	r1, [r3, #0]
    3834:	9a03      	ldr	r2, [sp, #12]
    3836:	4613      	mov	r3, r2
    3838:	009b      	lsls	r3, r3, #2
    383a:	4413      	add	r3, r2
    383c:	009b      	lsls	r3, r3, #2
    383e:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    3842:	9a01      	ldr	r2, [sp, #4]
    3844:	4413      	add	r3, r2
    3846:	4618      	mov	r0, r3
    3848:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    384a:	9b03      	ldr	r3, [sp, #12]
    384c:	3301      	adds	r3, #1
    384e:	9303      	str	r3, [sp, #12]
    3850:	9b01      	ldr	r3, [sp, #4]
    3852:	7c9b      	ldrb	r3, [r3, #18]
    3854:	461a      	mov	r2, r3
    3856:	9b03      	ldr	r3, [sp, #12]
    3858:	4293      	cmp	r3, r2
    385a:	d3d0      	bcc.n	37fe <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    385c:	2104      	movs	r1, #4
    385e:	9801      	ldr	r0, [sp, #4]
    3860:	f002 ff48 	bl	66f4 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    3864:	bf00      	nop
    3866:	b004      	add	sp, #16
    3868:	bd10      	pop	{r4, pc}
    386a:	bf00      	nop
    386c:	1fff8b80 	.word	0x1fff8b80
    3870:	000190e0 	.word	0x000190e0
    3874:	00019080 	.word	0x00019080
    3878:	00019668 	.word	0x00019668
    387c:	000190d0 	.word	0x000190d0
    3880:	000196dc 	.word	0x000196dc

00003884 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    3884:	b500      	push	{lr}
    3886:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    3888:	2302      	movs	r3, #2
    388a:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    388c:	2300      	movs	r3, #0
    388e:	9304      	str	r3, [sp, #16]
    3890:	e02c      	b.n	38ec <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    3892:	4a36      	ldr	r2, [pc, #216]	; (396c <Clock_Ip_GetPllStatus+0xe8>)
    3894:	9b04      	ldr	r3, [sp, #16]
    3896:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    389a:	4935      	ldr	r1, [pc, #212]	; (3970 <Clock_Ip_GetPllStatus+0xec>)
    389c:	4613      	mov	r3, r2
    389e:	00db      	lsls	r3, r3, #3
    38a0:	4413      	add	r3, r2
    38a2:	440b      	add	r3, r1
    38a4:	3301      	adds	r3, #1
    38a6:	781b      	ldrb	r3, [r3, #0]
    38a8:	461a      	mov	r2, r3
    38aa:	4b32      	ldr	r3, [pc, #200]	; (3974 <Clock_Ip_GetPllStatus+0xf0>)
    38ac:	5c9b      	ldrb	r3, [r3, r2]
    38ae:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    38b0:	4931      	ldr	r1, [pc, #196]	; (3978 <Clock_Ip_GetPllStatus+0xf4>)
    38b2:	9a03      	ldr	r2, [sp, #12]
    38b4:	4613      	mov	r3, r2
    38b6:	009b      	lsls	r3, r3, #2
    38b8:	4413      	add	r3, r2
    38ba:	009b      	lsls	r3, r3, #2
    38bc:	440b      	add	r3, r1
    38be:	3308      	adds	r3, #8
    38c0:	681b      	ldr	r3, [r3, #0]
    38c2:	492a      	ldr	r1, [pc, #168]	; (396c <Clock_Ip_GetPllStatus+0xe8>)
    38c4:	9a04      	ldr	r2, [sp, #16]
    38c6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    38ca:	4610      	mov	r0, r2
    38cc:	4798      	blx	r3
    38ce:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    38d0:	9b02      	ldr	r3, [sp, #8]
    38d2:	2b01      	cmp	r3, #1
    38d4:	d102      	bne.n	38dc <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    38d6:	2301      	movs	r3, #1
    38d8:	9305      	str	r3, [sp, #20]
            break;
    38da:	e00d      	b.n	38f8 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    38dc:	9b02      	ldr	r3, [sp, #8]
    38de:	2b02      	cmp	r3, #2
    38e0:	d101      	bne.n	38e6 <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    38e2:	2300      	movs	r3, #0
    38e4:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    38e6:	9b04      	ldr	r3, [sp, #16]
    38e8:	3301      	adds	r3, #1
    38ea:	9304      	str	r3, [sp, #16]
    38ec:	4b23      	ldr	r3, [pc, #140]	; (397c <Clock_Ip_GetPllStatus+0xf8>)
    38ee:	789b      	ldrb	r3, [r3, #2]
    38f0:	461a      	mov	r2, r3
    38f2:	9b04      	ldr	r3, [sp, #16]
    38f4:	4293      	cmp	r3, r2
    38f6:	d3cc      	bcc.n	3892 <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    38f8:	9b05      	ldr	r3, [sp, #20]
    38fa:	2b00      	cmp	r3, #0
    38fc:	d130      	bne.n	3960 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    38fe:	2300      	movs	r3, #0
    3900:	9304      	str	r3, [sp, #16]
    3902:	e027      	b.n	3954 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    3904:	4a1e      	ldr	r2, [pc, #120]	; (3980 <Clock_Ip_GetPllStatus+0xfc>)
    3906:	9b04      	ldr	r3, [sp, #16]
    3908:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    390c:	4918      	ldr	r1, [pc, #96]	; (3970 <Clock_Ip_GetPllStatus+0xec>)
    390e:	4613      	mov	r3, r2
    3910:	00db      	lsls	r3, r3, #3
    3912:	4413      	add	r3, r2
    3914:	440b      	add	r3, r1
    3916:	3301      	adds	r3, #1
    3918:	781b      	ldrb	r3, [r3, #0]
    391a:	461a      	mov	r2, r3
    391c:	4b19      	ldr	r3, [pc, #100]	; (3984 <Clock_Ip_GetPllStatus+0x100>)
    391e:	5c9b      	ldrb	r3, [r3, r2]
    3920:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    3922:	4919      	ldr	r1, [pc, #100]	; (3988 <Clock_Ip_GetPllStatus+0x104>)
    3924:	9a03      	ldr	r2, [sp, #12]
    3926:	4613      	mov	r3, r2
    3928:	005b      	lsls	r3, r3, #1
    392a:	4413      	add	r3, r2
    392c:	009b      	lsls	r3, r3, #2
    392e:	440b      	add	r3, r1
    3930:	3308      	adds	r3, #8
    3932:	681b      	ldr	r3, [r3, #0]
    3934:	4912      	ldr	r1, [pc, #72]	; (3980 <Clock_Ip_GetPllStatus+0xfc>)
    3936:	9a04      	ldr	r2, [sp, #16]
    3938:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    393c:	4610      	mov	r0, r2
    393e:	4798      	blx	r3
    3940:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    3942:	9b01      	ldr	r3, [sp, #4]
    3944:	2b01      	cmp	r3, #1
    3946:	d102      	bne.n	394e <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    3948:	2301      	movs	r3, #1
    394a:	9305      	str	r3, [sp, #20]
                break;
    394c:	e008      	b.n	3960 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    394e:	9b04      	ldr	r3, [sp, #16]
    3950:	3301      	adds	r3, #1
    3952:	9304      	str	r3, [sp, #16]
    3954:	4b09      	ldr	r3, [pc, #36]	; (397c <Clock_Ip_GetPllStatus+0xf8>)
    3956:	78db      	ldrb	r3, [r3, #3]
    3958:	461a      	mov	r2, r3
    395a:	9b04      	ldr	r3, [sp, #16]
    395c:	4293      	cmp	r3, r2
    395e:	d3d1      	bcc.n	3904 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    3960:	9b05      	ldr	r3, [sp, #20]
}
    3962:	4618      	mov	r0, r3
    3964:	b007      	add	sp, #28
    3966:	f85d fb04 	ldr.w	pc, [sp], #4
    396a:	bf00      	nop
    396c:	000195e8 	.word	0x000195e8
    3970:	000190e0 	.word	0x000190e0
    3974:	000190a0 	.word	0x000190a0
    3978:	000196ec 	.word	0x000196ec
    397c:	1fff8b80 	.word	0x1fff8b80
    3980:	000195ec 	.word	0x000195ec
    3984:	00019090 	.word	0x00019090
    3988:	0001965c 	.word	0x0001965c

0000398c <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    398c:	b500      	push	{lr}
    398e:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    3990:	4b55      	ldr	r3, [pc, #340]	; (3ae8 <Clock_Ip_DistributePll+0x15c>)
    3992:	681b      	ldr	r3, [r3, #0]
    3994:	2b00      	cmp	r3, #0
    3996:	f000 80a2 	beq.w	3ade <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    399a:	2300      	movs	r3, #0
    399c:	9301      	str	r3, [sp, #4]
    399e:	e02c      	b.n	39fa <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    39a0:	4b51      	ldr	r3, [pc, #324]	; (3ae8 <Clock_Ip_DistributePll+0x15c>)
    39a2:	681a      	ldr	r2, [r3, #0]
    39a4:	9b01      	ldr	r3, [sp, #4]
    39a6:	330d      	adds	r3, #13
    39a8:	00db      	lsls	r3, r3, #3
    39aa:	4413      	add	r3, r2
    39ac:	685b      	ldr	r3, [r3, #4]
    39ae:	4a4f      	ldr	r2, [pc, #316]	; (3aec <Clock_Ip_DistributePll+0x160>)
    39b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    39b4:	2b03      	cmp	r3, #3
    39b6:	d11d      	bne.n	39f4 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    39b8:	4b4b      	ldr	r3, [pc, #300]	; (3ae8 <Clock_Ip_DistributePll+0x15c>)
    39ba:	681b      	ldr	r3, [r3, #0]
    39bc:	9a01      	ldr	r2, [sp, #4]
    39be:	320d      	adds	r2, #13
    39c0:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    39c4:	494a      	ldr	r1, [pc, #296]	; (3af0 <Clock_Ip_DistributePll+0x164>)
    39c6:	4613      	mov	r3, r2
    39c8:	00db      	lsls	r3, r3, #3
    39ca:	4413      	add	r3, r2
    39cc:	440b      	add	r3, r1
    39ce:	3301      	adds	r3, #1
    39d0:	781b      	ldrb	r3, [r3, #0]
    39d2:	461a      	mov	r2, r3
    39d4:	4b47      	ldr	r3, [pc, #284]	; (3af4 <Clock_Ip_DistributePll+0x168>)
    39d6:	5c9b      	ldrb	r3, [r3, r2]
    39d8:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    39da:	4a47      	ldr	r2, [pc, #284]	; (3af8 <Clock_Ip_DistributePll+0x16c>)
    39dc:	9b00      	ldr	r3, [sp, #0]
    39de:	00db      	lsls	r3, r3, #3
    39e0:	4413      	add	r3, r2
    39e2:	685b      	ldr	r3, [r3, #4]
    39e4:	4a40      	ldr	r2, [pc, #256]	; (3ae8 <Clock_Ip_DistributePll+0x15c>)
    39e6:	6811      	ldr	r1, [r2, #0]
    39e8:	9a01      	ldr	r2, [sp, #4]
    39ea:	320d      	adds	r2, #13
    39ec:	00d2      	lsls	r2, r2, #3
    39ee:	440a      	add	r2, r1
    39f0:	4610      	mov	r0, r2
    39f2:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    39f4:	9b01      	ldr	r3, [sp, #4]
    39f6:	3301      	adds	r3, #1
    39f8:	9301      	str	r3, [sp, #4]
    39fa:	4b3b      	ldr	r3, [pc, #236]	; (3ae8 <Clock_Ip_DistributePll+0x15c>)
    39fc:	681b      	ldr	r3, [r3, #0]
    39fe:	7adb      	ldrb	r3, [r3, #11]
    3a00:	461a      	mov	r2, r3
    3a02:	9b01      	ldr	r3, [sp, #4]
    3a04:	4293      	cmp	r3, r2
    3a06:	d3cb      	bcc.n	39a0 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    3a08:	4b3c      	ldr	r3, [pc, #240]	; (3afc <Clock_Ip_DistributePll+0x170>)
    3a0a:	781b      	ldrb	r3, [r3, #0]
    3a0c:	2b00      	cmp	r3, #0
    3a0e:	d066      	beq.n	3ade <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3a10:	2300      	movs	r3, #0
    3a12:	9301      	str	r3, [sp, #4]
    3a14:	e021      	b.n	3a5a <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    3a16:	4b34      	ldr	r3, [pc, #208]	; (3ae8 <Clock_Ip_DistributePll+0x15c>)
    3a18:	681a      	ldr	r2, [r3, #0]
    3a1a:	9b01      	ldr	r3, [sp, #4]
    3a1c:	334e      	adds	r3, #78	; 0x4e
    3a1e:	00db      	lsls	r3, r3, #3
    3a20:	4413      	add	r3, r2
    3a22:	685a      	ldr	r2, [r3, #4]
    3a24:	4932      	ldr	r1, [pc, #200]	; (3af0 <Clock_Ip_DistributePll+0x164>)
    3a26:	4613      	mov	r3, r2
    3a28:	00db      	lsls	r3, r3, #3
    3a2a:	4413      	add	r3, r2
    3a2c:	440b      	add	r3, r1
    3a2e:	3301      	adds	r3, #1
    3a30:	781b      	ldrb	r3, [r3, #0]
    3a32:	461a      	mov	r2, r3
    3a34:	4b32      	ldr	r3, [pc, #200]	; (3b00 <Clock_Ip_DistributePll+0x174>)
    3a36:	5c9b      	ldrb	r3, [r3, r2]
    3a38:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    3a3a:	4a32      	ldr	r2, [pc, #200]	; (3b04 <Clock_Ip_DistributePll+0x178>)
    3a3c:	9b00      	ldr	r3, [sp, #0]
    3a3e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    3a42:	4a29      	ldr	r2, [pc, #164]	; (3ae8 <Clock_Ip_DistributePll+0x15c>)
    3a44:	6811      	ldr	r1, [r2, #0]
    3a46:	9a01      	ldr	r2, [sp, #4]
    3a48:	324e      	adds	r2, #78	; 0x4e
    3a4a:	00d2      	lsls	r2, r2, #3
    3a4c:	440a      	add	r2, r1
    3a4e:	3204      	adds	r2, #4
    3a50:	4610      	mov	r0, r2
    3a52:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3a54:	9b01      	ldr	r3, [sp, #4]
    3a56:	3301      	adds	r3, #1
    3a58:	9301      	str	r3, [sp, #4]
    3a5a:	4b23      	ldr	r3, [pc, #140]	; (3ae8 <Clock_Ip_DistributePll+0x15c>)
    3a5c:	681b      	ldr	r3, [r3, #0]
    3a5e:	7c1b      	ldrb	r3, [r3, #16]
    3a60:	461a      	mov	r2, r3
    3a62:	9b01      	ldr	r3, [sp, #4]
    3a64:	4293      	cmp	r3, r2
    3a66:	d3d6      	bcc.n	3a16 <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    3a68:	2300      	movs	r3, #0
    3a6a:	9301      	str	r3, [sp, #4]
    3a6c:	e02a      	b.n	3ac4 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    3a6e:	4b1e      	ldr	r3, [pc, #120]	; (3ae8 <Clock_Ip_DistributePll+0x15c>)
    3a70:	6819      	ldr	r1, [r3, #0]
    3a72:	9a01      	ldr	r2, [sp, #4]
    3a74:	4613      	mov	r3, r2
    3a76:	009b      	lsls	r3, r3, #2
    3a78:	4413      	add	r3, r2
    3a7a:	009b      	lsls	r3, r3, #2
    3a7c:	440b      	add	r3, r1
    3a7e:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    3a82:	681a      	ldr	r2, [r3, #0]
    3a84:	491a      	ldr	r1, [pc, #104]	; (3af0 <Clock_Ip_DistributePll+0x164>)
    3a86:	4613      	mov	r3, r2
    3a88:	00db      	lsls	r3, r3, #3
    3a8a:	4413      	add	r3, r2
    3a8c:	440b      	add	r3, r1
    3a8e:	3301      	adds	r3, #1
    3a90:	781b      	ldrb	r3, [r3, #0]
    3a92:	461a      	mov	r2, r3
    3a94:	4b1c      	ldr	r3, [pc, #112]	; (3b08 <Clock_Ip_DistributePll+0x17c>)
    3a96:	5c9b      	ldrb	r3, [r3, r2]
    3a98:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    3a9a:	4a1c      	ldr	r2, [pc, #112]	; (3b0c <Clock_Ip_DistributePll+0x180>)
    3a9c:	9b00      	ldr	r3, [sp, #0]
    3a9e:	011b      	lsls	r3, r3, #4
    3aa0:	4413      	add	r3, r2
    3aa2:	330c      	adds	r3, #12
    3aa4:	6819      	ldr	r1, [r3, #0]
    3aa6:	4b10      	ldr	r3, [pc, #64]	; (3ae8 <Clock_Ip_DistributePll+0x15c>)
    3aa8:	6818      	ldr	r0, [r3, #0]
    3aaa:	9a01      	ldr	r2, [sp, #4]
    3aac:	4613      	mov	r3, r2
    3aae:	009b      	lsls	r3, r3, #2
    3ab0:	4413      	add	r3, r2
    3ab2:	009b      	lsls	r3, r3, #2
    3ab4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    3ab8:	4403      	add	r3, r0
    3aba:	4618      	mov	r0, r3
    3abc:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    3abe:	9b01      	ldr	r3, [sp, #4]
    3ac0:	3301      	adds	r3, #1
    3ac2:	9301      	str	r3, [sp, #4]
    3ac4:	4b08      	ldr	r3, [pc, #32]	; (3ae8 <Clock_Ip_DistributePll+0x15c>)
    3ac6:	681b      	ldr	r3, [r3, #0]
    3ac8:	7c9b      	ldrb	r3, [r3, #18]
    3aca:	461a      	mov	r2, r3
    3acc:	9b01      	ldr	r3, [sp, #4]
    3ace:	4293      	cmp	r3, r2
    3ad0:	d3cd      	bcc.n	3a6e <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    3ad2:	4b05      	ldr	r3, [pc, #20]	; (3ae8 <Clock_Ip_DistributePll+0x15c>)
    3ad4:	681b      	ldr	r3, [r3, #0]
    3ad6:	2104      	movs	r1, #4
    3ad8:	4618      	mov	r0, r3
    3ada:	f002 fe0b 	bl	66f4 <Clock_Ip_Command>
        }
    }
}
    3ade:	bf00      	nop
    3ae0:	b003      	add	sp, #12
    3ae2:	f85d fb04 	ldr.w	pc, [sp], #4
    3ae6:	bf00      	nop
    3ae8:	1fff8b78 	.word	0x1fff8b78
    3aec:	0001952c 	.word	0x0001952c
    3af0:	000190e0 	.word	0x000190e0
    3af4:	000190b0 	.word	0x000190b0
    3af8:	00019718 	.word	0x00019718
    3afc:	1fff8b80 	.word	0x1fff8b80
    3b00:	00019080 	.word	0x00019080
    3b04:	00019668 	.word	0x00019668
    3b08:	000190d0 	.word	0x000190d0
    3b0c:	000196dc 	.word	0x000196dc

00003b10 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    3b10:	b500      	push	{lr}
    3b12:	b085      	sub	sp, #20
    3b14:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    3b16:	490c      	ldr	r1, [pc, #48]	; (3b48 <Clock_Ip_DisableClockMonitor+0x38>)
    3b18:	9a01      	ldr	r2, [sp, #4]
    3b1a:	4613      	mov	r3, r2
    3b1c:	00db      	lsls	r3, r3, #3
    3b1e:	4413      	add	r3, r2
    3b20:	440b      	add	r3, r1
    3b22:	3301      	adds	r3, #1
    3b24:	781b      	ldrb	r3, [r3, #0]
    3b26:	461a      	mov	r2, r3
    3b28:	4b08      	ldr	r3, [pc, #32]	; (3b4c <Clock_Ip_DisableClockMonitor+0x3c>)
    3b2a:	5c9b      	ldrb	r3, [r3, r2]
    3b2c:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    3b2e:	4a08      	ldr	r2, [pc, #32]	; (3b50 <Clock_Ip_DisableClockMonitor+0x40>)
    3b30:	9b03      	ldr	r3, [sp, #12]
    3b32:	011b      	lsls	r3, r3, #4
    3b34:	4413      	add	r3, r2
    3b36:	3308      	adds	r3, #8
    3b38:	681b      	ldr	r3, [r3, #0]
    3b3a:	9801      	ldr	r0, [sp, #4]
    3b3c:	4798      	blx	r3
}
    3b3e:	bf00      	nop
    3b40:	b005      	add	sp, #20
    3b42:	f85d fb04 	ldr.w	pc, [sp], #4
    3b46:	bf00      	nop
    3b48:	000190e0 	.word	0x000190e0
    3b4c:	000190d0 	.word	0x000190d0
    3b50:	000196dc 	.word	0x000196dc

00003b54 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    3b54:	b082      	sub	sp, #8
    3b56:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    3b58:	4a02      	ldr	r2, [pc, #8]	; (3b64 <Clock_Ip_InstallNotificationsCallback+0x10>)
    3b5a:	9b01      	ldr	r3, [sp, #4]
    3b5c:	6013      	str	r3, [r2, #0]
}
    3b5e:	bf00      	nop
    3b60:	b002      	add	sp, #8
    3b62:	4770      	bx	lr
    3b64:	1fff8b14 	.word	0x1fff8b14

00003b68 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    3b68:	b500      	push	{lr}
    3b6a:	b085      	sub	sp, #20
    3b6c:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    3b6e:	490c      	ldr	r1, [pc, #48]	; (3ba0 <Clock_Ip_DisableModuleClock+0x38>)
    3b70:	9a01      	ldr	r2, [sp, #4]
    3b72:	4613      	mov	r3, r2
    3b74:	00db      	lsls	r3, r3, #3
    3b76:	4413      	add	r3, r2
    3b78:	440b      	add	r3, r1
    3b7a:	3301      	adds	r3, #1
    3b7c:	781b      	ldrb	r3, [r3, #0]
    3b7e:	461a      	mov	r2, r3
    3b80:	4b08      	ldr	r3, [pc, #32]	; (3ba4 <Clock_Ip_DisableModuleClock+0x3c>)
    3b82:	5c9b      	ldrb	r3, [r3, r2]
    3b84:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    3b86:	4a08      	ldr	r2, [pc, #32]	; (3ba8 <Clock_Ip_DisableModuleClock+0x40>)
    3b88:	9b03      	ldr	r3, [sp, #12]
    3b8a:	00db      	lsls	r3, r3, #3
    3b8c:	4413      	add	r3, r2
    3b8e:	685b      	ldr	r3, [r3, #4]
    3b90:	2101      	movs	r1, #1
    3b92:	9801      	ldr	r0, [sp, #4]
    3b94:	4798      	blx	r3
}
    3b96:	bf00      	nop
    3b98:	b005      	add	sp, #20
    3b9a:	f85d fb04 	ldr.w	pc, [sp], #4
    3b9e:	bf00      	nop
    3ba0:	000190e0 	.word	0x000190e0
    3ba4:	00019080 	.word	0x00019080
    3ba8:	00019668 	.word	0x00019668

00003bac <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    3bac:	b500      	push	{lr}
    3bae:	b085      	sub	sp, #20
    3bb0:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    3bb2:	490c      	ldr	r1, [pc, #48]	; (3be4 <Clock_Ip_EnableModuleClock+0x38>)
    3bb4:	9a01      	ldr	r2, [sp, #4]
    3bb6:	4613      	mov	r3, r2
    3bb8:	00db      	lsls	r3, r3, #3
    3bba:	4413      	add	r3, r2
    3bbc:	440b      	add	r3, r1
    3bbe:	3301      	adds	r3, #1
    3bc0:	781b      	ldrb	r3, [r3, #0]
    3bc2:	461a      	mov	r2, r3
    3bc4:	4b08      	ldr	r3, [pc, #32]	; (3be8 <Clock_Ip_EnableModuleClock+0x3c>)
    3bc6:	5c9b      	ldrb	r3, [r3, r2]
    3bc8:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    3bca:	4a08      	ldr	r2, [pc, #32]	; (3bec <Clock_Ip_EnableModuleClock+0x40>)
    3bcc:	9b03      	ldr	r3, [sp, #12]
    3bce:	00db      	lsls	r3, r3, #3
    3bd0:	4413      	add	r3, r2
    3bd2:	685b      	ldr	r3, [r3, #4]
    3bd4:	2100      	movs	r1, #0
    3bd6:	9801      	ldr	r0, [sp, #4]
    3bd8:	4798      	blx	r3
}
    3bda:	bf00      	nop
    3bdc:	b005      	add	sp, #20
    3bde:	f85d fb04 	ldr.w	pc, [sp], #4
    3be2:	bf00      	nop
    3be4:	000190e0 	.word	0x000190e0
    3be8:	00019080 	.word	0x00019080
    3bec:	00019668 	.word	0x00019668

00003bf0 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    3bf0:	b500      	push	{lr}
    3bf2:	b083      	sub	sp, #12
    3bf4:	9001      	str	r0, [sp, #4]
    3bf6:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    3bf8:	4b08      	ldr	r3, [pc, #32]	; (3c1c <Clock_Ip_PowerModeChangeNotification+0x2c>)
    3bfa:	2200      	movs	r2, #0
    3bfc:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    3bfe:	4b08      	ldr	r3, [pc, #32]	; (3c20 <Clock_Ip_PowerModeChangeNotification+0x30>)
    3c00:	681b      	ldr	r3, [r3, #0]
    3c02:	2102      	movs	r1, #2
    3c04:	4618      	mov	r0, r3
    3c06:	f002 fd75 	bl	66f4 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    3c0a:	9900      	ldr	r1, [sp, #0]
    3c0c:	9801      	ldr	r0, [sp, #4]
    3c0e:	f002 fc51 	bl	64b4 <Clock_Ip_ClockPowerModeChangeNotification>
}
    3c12:	bf00      	nop
    3c14:	b003      	add	sp, #12
    3c16:	f85d fb04 	ldr.w	pc, [sp], #4
    3c1a:	bf00      	nop
    3c1c:	1fff8b10 	.word	0x1fff8b10
    3c20:	1fff8b78 	.word	0x1fff8b78

00003c24 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    3c24:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    3c26:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    3c2a:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    3c2c:	4b06      	ldr	r3, [pc, #24]	; (3c48 <Clock_Ip_SetWaitStates+0x24>)
    3c2e:	785b      	ldrb	r3, [r3, #1]
    3c30:	2b00      	cmp	r3, #0
    3c32:	d005      	beq.n	3c40 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    3c34:	9b01      	ldr	r3, [sp, #4]
    3c36:	3b01      	subs	r3, #1
    3c38:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    3c3a:	9b01      	ldr	r3, [sp, #4]
    3c3c:	2b00      	cmp	r3, #0
    3c3e:	d1f9      	bne.n	3c34 <Clock_Ip_SetWaitStates+0x10>
    }
}
    3c40:	bf00      	nop
    3c42:	b002      	add	sp, #8
    3c44:	4770      	bx	lr
    3c46:	bf00      	nop
    3c48:	1fff8b80 	.word	0x1fff8b80

00003c4c <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    3c4c:	b500      	push	{lr}
    3c4e:	b083      	sub	sp, #12
    3c50:	9001      	str	r0, [sp, #4]
    3c52:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    3c54:	4b04      	ldr	r3, [pc, #16]	; (3c68 <Clock_Ip_ReportClockErrors+0x1c>)
    3c56:	681b      	ldr	r3, [r3, #0]
    3c58:	9900      	ldr	r1, [sp, #0]
    3c5a:	9801      	ldr	r0, [sp, #4]
    3c5c:	4798      	blx	r3
}
    3c5e:	bf00      	nop
    3c60:	b003      	add	sp, #12
    3c62:	f85d fb04 	ldr.w	pc, [sp], #4
    3c66:	bf00      	nop
    3c68:	1fff8b14 	.word	0x1fff8b14

00003c6c <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    3c6c:	b500      	push	{lr}
    3c6e:	b085      	sub	sp, #20
    3c70:	9003      	str	r0, [sp, #12]
    3c72:	9102      	str	r1, [sp, #8]
    3c74:	9201      	str	r2, [sp, #4]
    3c76:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    3c78:	2000      	movs	r0, #0
    3c7a:	f7fe ffd1 	bl	2c20 <OsIf_GetCounter>
    3c7e:	4602      	mov	r2, r0
    3c80:	9b03      	ldr	r3, [sp, #12]
    3c82:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    3c84:	9b02      	ldr	r3, [sp, #8]
    3c86:	2200      	movs	r2, #0
    3c88:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    3c8a:	2100      	movs	r1, #0
    3c8c:	9800      	ldr	r0, [sp, #0]
    3c8e:	f7ff f813 	bl	2cb8 <OsIf_MicrosToTicks>
    3c92:	4602      	mov	r2, r0
    3c94:	9b01      	ldr	r3, [sp, #4]
    3c96:	601a      	str	r2, [r3, #0]
}
    3c98:	bf00      	nop
    3c9a:	b005      	add	sp, #20
    3c9c:	f85d fb04 	ldr.w	pc, [sp], #4

00003ca0 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    3ca0:	b500      	push	{lr}
    3ca2:	b087      	sub	sp, #28
    3ca4:	9003      	str	r0, [sp, #12]
    3ca6:	9102      	str	r1, [sp, #8]
    3ca8:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    3caa:	2300      	movs	r3, #0
    3cac:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    3cb0:	2100      	movs	r1, #0
    3cb2:	9803      	ldr	r0, [sp, #12]
    3cb4:	f7fe ffcd 	bl	2c52 <OsIf_GetElapsed>
    3cb8:	4602      	mov	r2, r0
    3cba:	9b02      	ldr	r3, [sp, #8]
    3cbc:	681b      	ldr	r3, [r3, #0]
    3cbe:	441a      	add	r2, r3
    3cc0:	9b02      	ldr	r3, [sp, #8]
    3cc2:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    3cc4:	9b02      	ldr	r3, [sp, #8]
    3cc6:	681b      	ldr	r3, [r3, #0]
    3cc8:	9a01      	ldr	r2, [sp, #4]
    3cca:	429a      	cmp	r2, r3
    3ccc:	d802      	bhi.n	3cd4 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    3cce:	2301      	movs	r3, #1
    3cd0:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    3cd4:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    3cd8:	4618      	mov	r0, r3
    3cda:	b007      	add	sp, #28
    3cdc:	f85d fb04 	ldr.w	pc, [sp], #4

00003ce0 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    3ce0:	b082      	sub	sp, #8
    3ce2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3ce4:	bf00      	nop
    3ce6:	b002      	add	sp, #8
    3ce8:	4770      	bx	lr

00003cea <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    3cea:	b500      	push	{lr}
    3cec:	b083      	sub	sp, #12
    3cee:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3cf0:	9b01      	ldr	r3, [sp, #4]
    3cf2:	2b00      	cmp	r3, #0
    3cf4:	d002      	beq.n	3cfc <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    3cf6:	9801      	ldr	r0, [sp, #4]
    3cf8:	f000 f8ad 	bl	3e56 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3cfc:	bf00      	nop
    3cfe:	b003      	add	sp, #12
    3d00:	f85d fb04 	ldr.w	pc, [sp], #4

00003d04 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    3d04:	b500      	push	{lr}
    3d06:	b083      	sub	sp, #12
    3d08:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3d0a:	9b01      	ldr	r3, [sp, #4]
    3d0c:	2b00      	cmp	r3, #0
    3d0e:	d002      	beq.n	3d16 <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    3d10:	9801      	ldr	r0, [sp, #4]
    3d12:	f000 f8cd 	bl	3eb0 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3d16:	bf00      	nop
    3d18:	b003      	add	sp, #12
    3d1a:	f85d fb04 	ldr.w	pc, [sp], #4

00003d1e <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    3d1e:	b500      	push	{lr}
    3d20:	b083      	sub	sp, #12
    3d22:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3d24:	9b01      	ldr	r3, [sp, #4]
    3d26:	2b00      	cmp	r3, #0
    3d28:	d002      	beq.n	3d30 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    3d2a:	9801      	ldr	r0, [sp, #4]
    3d2c:	f000 f8ee 	bl	3f0c <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3d30:	bf00      	nop
    3d32:	b003      	add	sp, #12
    3d34:	f85d fb04 	ldr.w	pc, [sp], #4

00003d38 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    3d38:	b500      	push	{lr}
    3d3a:	b083      	sub	sp, #12
    3d3c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3d3e:	9b01      	ldr	r3, [sp, #4]
    3d40:	2b00      	cmp	r3, #0
    3d42:	d002      	beq.n	3d4a <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    3d44:	9801      	ldr	r0, [sp, #4]
    3d46:	f000 f8f9 	bl	3f3c <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3d4a:	bf00      	nop
    3d4c:	b003      	add	sp, #12
    3d4e:	f85d fb04 	ldr.w	pc, [sp], #4

00003d52 <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    3d52:	b500      	push	{lr}
    3d54:	b083      	sub	sp, #12
    3d56:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3d58:	9b01      	ldr	r3, [sp, #4]
    3d5a:	2b00      	cmp	r3, #0
    3d5c:	d002      	beq.n	3d64 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    3d5e:	9801      	ldr	r0, [sp, #4]
    3d60:	f000 f904 	bl	3f6c <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3d64:	bf00      	nop
    3d66:	b003      	add	sp, #12
    3d68:	f85d fb04 	ldr.w	pc, [sp], #4

00003d6c <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    3d6c:	b500      	push	{lr}
    3d6e:	b083      	sub	sp, #12
    3d70:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3d72:	9b01      	ldr	r3, [sp, #4]
    3d74:	2b00      	cmp	r3, #0
    3d76:	d002      	beq.n	3d7e <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    3d78:	9801      	ldr	r0, [sp, #4]
    3d7a:	f000 f90f 	bl	3f9c <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3d7e:	bf00      	nop
    3d80:	b003      	add	sp, #12
    3d82:	f85d fb04 	ldr.w	pc, [sp], #4

00003d86 <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    3d86:	b500      	push	{lr}
    3d88:	b083      	sub	sp, #12
    3d8a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3d8c:	9b01      	ldr	r3, [sp, #4]
    3d8e:	2b00      	cmp	r3, #0
    3d90:	d002      	beq.n	3d98 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    3d92:	9801      	ldr	r0, [sp, #4]
    3d94:	f000 f91a 	bl	3fcc <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3d98:	bf00      	nop
    3d9a:	b003      	add	sp, #12
    3d9c:	f85d fb04 	ldr.w	pc, [sp], #4

00003da0 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    3da0:	b500      	push	{lr}
    3da2:	b083      	sub	sp, #12
    3da4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3da6:	9b01      	ldr	r3, [sp, #4]
    3da8:	2b00      	cmp	r3, #0
    3daa:	d002      	beq.n	3db2 <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    3dac:	9801      	ldr	r0, [sp, #4]
    3dae:	f000 f925 	bl	3ffc <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3db2:	bf00      	nop
    3db4:	b003      	add	sp, #12
    3db6:	f85d fb04 	ldr.w	pc, [sp], #4

00003dba <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    3dba:	b500      	push	{lr}
    3dbc:	b083      	sub	sp, #12
    3dbe:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3dc0:	9b01      	ldr	r3, [sp, #4]
    3dc2:	2b00      	cmp	r3, #0
    3dc4:	d002      	beq.n	3dcc <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    3dc6:	9801      	ldr	r0, [sp, #4]
    3dc8:	f000 f930 	bl	402c <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3dcc:	bf00      	nop
    3dce:	b003      	add	sp, #12
    3dd0:	f85d fb04 	ldr.w	pc, [sp], #4

00003dd4 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    3dd4:	b500      	push	{lr}
    3dd6:	b083      	sub	sp, #12
    3dd8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3dda:	9b01      	ldr	r3, [sp, #4]
    3ddc:	2b00      	cmp	r3, #0
    3dde:	d002      	beq.n	3de6 <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    3de0:	9801      	ldr	r0, [sp, #4]
    3de2:	f000 f93b 	bl	405c <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3de6:	bf00      	nop
    3de8:	b003      	add	sp, #12
    3dea:	f85d fb04 	ldr.w	pc, [sp], #4

00003dee <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    3dee:	b500      	push	{lr}
    3df0:	b083      	sub	sp, #12
    3df2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3df4:	9b01      	ldr	r3, [sp, #4]
    3df6:	2b00      	cmp	r3, #0
    3df8:	d002      	beq.n	3e00 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    3dfa:	9801      	ldr	r0, [sp, #4]
    3dfc:	f000 f946 	bl	408c <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3e00:	bf00      	nop
    3e02:	b003      	add	sp, #12
    3e04:	f85d fb04 	ldr.w	pc, [sp], #4

00003e08 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    3e08:	b500      	push	{lr}
    3e0a:	b083      	sub	sp, #12
    3e0c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3e0e:	9b01      	ldr	r3, [sp, #4]
    3e10:	2b00      	cmp	r3, #0
    3e12:	d002      	beq.n	3e1a <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    3e14:	9801      	ldr	r0, [sp, #4]
    3e16:	f000 f951 	bl	40bc <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3e1a:	bf00      	nop
    3e1c:	b003      	add	sp, #12
    3e1e:	f85d fb04 	ldr.w	pc, [sp], #4

00003e22 <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    3e22:	b500      	push	{lr}
    3e24:	b083      	sub	sp, #12
    3e26:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3e28:	9b01      	ldr	r3, [sp, #4]
    3e2a:	2b00      	cmp	r3, #0
    3e2c:	d002      	beq.n	3e34 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    3e2e:	9801      	ldr	r0, [sp, #4]
    3e30:	f000 f95e 	bl	40f0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3e34:	bf00      	nop
    3e36:	b003      	add	sp, #12
    3e38:	f85d fb04 	ldr.w	pc, [sp], #4

00003e3c <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    3e3c:	b500      	push	{lr}
    3e3e:	b083      	sub	sp, #12
    3e40:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3e42:	9b01      	ldr	r3, [sp, #4]
    3e44:	2b00      	cmp	r3, #0
    3e46:	d002      	beq.n	3e4e <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    3e48:	9801      	ldr	r0, [sp, #4]
    3e4a:	f000 f98b 	bl	4164 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3e4e:	bf00      	nop
    3e50:	b003      	add	sp, #12
    3e52:	f85d fb04 	ldr.w	pc, [sp], #4

00003e56 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3e56:	b086      	sub	sp, #24
    3e58:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3e5a:	9b01      	ldr	r3, [sp, #4]
    3e5c:	681a      	ldr	r2, [r3, #0]
    3e5e:	4911      	ldr	r1, [pc, #68]	; (3ea4 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    3e60:	4613      	mov	r3, r2
    3e62:	00db      	lsls	r3, r3, #3
    3e64:	4413      	add	r3, r2
    3e66:	440b      	add	r3, r1
    3e68:	781b      	ldrb	r3, [r3, #0]
    3e6a:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    3e6c:	9b01      	ldr	r3, [sp, #4]
    3e6e:	685b      	ldr	r3, [r3, #4]
    3e70:	4a0d      	ldr	r2, [pc, #52]	; (3ea8 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    3e72:	5cd3      	ldrb	r3, [r2, r3]
    3e74:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    3e76:	4a0d      	ldr	r2, [pc, #52]	; (3eac <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    3e78:	9b05      	ldr	r3, [sp, #20]
    3e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3e7e:	681b      	ldr	r3, [r3, #0]
    3e80:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    3e82:	9b03      	ldr	r3, [sp, #12]
    3e84:	f023 0307 	bic.w	r3, r3, #7
    3e88:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    3e8a:	9a03      	ldr	r2, [sp, #12]
    3e8c:	9b04      	ldr	r3, [sp, #16]
    3e8e:	4313      	orrs	r3, r2
    3e90:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    3e92:	4a06      	ldr	r2, [pc, #24]	; (3eac <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    3e94:	9b05      	ldr	r3, [sp, #20]
    3e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3e9a:	9a03      	ldr	r2, [sp, #12]
    3e9c:	601a      	str	r2, [r3, #0]
}
    3e9e:	bf00      	nop
    3ea0:	b006      	add	sp, #24
    3ea2:	4770      	bx	lr
    3ea4:	000190e0 	.word	0x000190e0
    3ea8:	000194d8 	.word	0x000194d8
    3eac:	0001951c 	.word	0x0001951c

00003eb0 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3eb0:	b086      	sub	sp, #24
    3eb2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3eb4:	9b01      	ldr	r3, [sp, #4]
    3eb6:	681a      	ldr	r2, [r3, #0]
    3eb8:	4911      	ldr	r1, [pc, #68]	; (3f00 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    3eba:	4613      	mov	r3, r2
    3ebc:	00db      	lsls	r3, r3, #3
    3ebe:	4413      	add	r3, r2
    3ec0:	440b      	add	r3, r1
    3ec2:	781b      	ldrb	r3, [r3, #0]
    3ec4:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    3ec6:	9b01      	ldr	r3, [sp, #4]
    3ec8:	685b      	ldr	r3, [r3, #4]
    3eca:	4a0e      	ldr	r2, [pc, #56]	; (3f04 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    3ecc:	5cd3      	ldrb	r3, [r2, r3]
    3ece:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    3ed0:	4a0d      	ldr	r2, [pc, #52]	; (3f08 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    3ed2:	9b05      	ldr	r3, [sp, #20]
    3ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3ed8:	681b      	ldr	r3, [r3, #0]
    3eda:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    3edc:	9b03      	ldr	r3, [sp, #12]
    3ede:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3ee2:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    3ee4:	9b04      	ldr	r3, [sp, #16]
    3ee6:	021b      	lsls	r3, r3, #8
    3ee8:	9a03      	ldr	r2, [sp, #12]
    3eea:	4313      	orrs	r3, r2
    3eec:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    3eee:	4a06      	ldr	r2, [pc, #24]	; (3f08 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    3ef0:	9b05      	ldr	r3, [sp, #20]
    3ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3ef6:	9a03      	ldr	r2, [sp, #12]
    3ef8:	601a      	str	r2, [r3, #0]
}
    3efa:	bf00      	nop
    3efc:	b006      	add	sp, #24
    3efe:	4770      	bx	lr
    3f00:	000190e0 	.word	0x000190e0
    3f04:	000194d8 	.word	0x000194d8
    3f08:	0001951c 	.word	0x0001951c

00003f0c <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3f0c:	b084      	sub	sp, #16
    3f0e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    3f10:	4b09      	ldr	r3, [pc, #36]	; (3f38 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    3f12:	695b      	ldr	r3, [r3, #20]
    3f14:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    3f16:	9b03      	ldr	r3, [sp, #12]
    3f18:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3f1c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    3f1e:	9b01      	ldr	r3, [sp, #4]
    3f20:	685b      	ldr	r3, [r3, #4]
    3f22:	3b01      	subs	r3, #1
    3f24:	041b      	lsls	r3, r3, #16
    3f26:	9a03      	ldr	r2, [sp, #12]
    3f28:	4313      	orrs	r3, r2
    3f2a:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    3f2c:	4a02      	ldr	r2, [pc, #8]	; (3f38 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    3f2e:	9b03      	ldr	r3, [sp, #12]
    3f30:	6153      	str	r3, [r2, #20]
}
    3f32:	bf00      	nop
    3f34:	b004      	add	sp, #16
    3f36:	4770      	bx	lr
    3f38:	40064000 	.word	0x40064000

00003f3c <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3f3c:	b084      	sub	sp, #16
    3f3e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    3f40:	4b09      	ldr	r3, [pc, #36]	; (3f68 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    3f42:	695b      	ldr	r3, [r3, #20]
    3f44:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    3f46:	9b03      	ldr	r3, [sp, #12]
    3f48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3f4c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    3f4e:	9b01      	ldr	r3, [sp, #4]
    3f50:	685b      	ldr	r3, [r3, #4]
    3f52:	3b01      	subs	r3, #1
    3f54:	011b      	lsls	r3, r3, #4
    3f56:	9a03      	ldr	r2, [sp, #12]
    3f58:	4313      	orrs	r3, r2
    3f5a:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    3f5c:	4a02      	ldr	r2, [pc, #8]	; (3f68 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    3f5e:	9b03      	ldr	r3, [sp, #12]
    3f60:	6153      	str	r3, [r2, #20]
}
    3f62:	bf00      	nop
    3f64:	b004      	add	sp, #16
    3f66:	4770      	bx	lr
    3f68:	40064000 	.word	0x40064000

00003f6c <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3f6c:	b084      	sub	sp, #16
    3f6e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    3f70:	4b09      	ldr	r3, [pc, #36]	; (3f98 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    3f72:	695b      	ldr	r3, [r3, #20]
    3f74:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    3f76:	9b03      	ldr	r3, [sp, #12]
    3f78:	f023 030f 	bic.w	r3, r3, #15
    3f7c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    3f7e:	9b01      	ldr	r3, [sp, #4]
    3f80:	685b      	ldr	r3, [r3, #4]
    3f82:	3b01      	subs	r3, #1
    3f84:	9a03      	ldr	r2, [sp, #12]
    3f86:	4313      	orrs	r3, r2
    3f88:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    3f8a:	4a03      	ldr	r2, [pc, #12]	; (3f98 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    3f8c:	9b03      	ldr	r3, [sp, #12]
    3f8e:	6153      	str	r3, [r2, #20]
}
    3f90:	bf00      	nop
    3f92:	b004      	add	sp, #16
    3f94:	4770      	bx	lr
    3f96:	bf00      	nop
    3f98:	40064000 	.word	0x40064000

00003f9c <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3f9c:	b084      	sub	sp, #16
    3f9e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3fa0:	4b09      	ldr	r3, [pc, #36]	; (3fc8 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    3fa2:	699b      	ldr	r3, [r3, #24]
    3fa4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    3fa6:	9b03      	ldr	r3, [sp, #12]
    3fa8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3fac:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    3fae:	9b01      	ldr	r3, [sp, #4]
    3fb0:	685b      	ldr	r3, [r3, #4]
    3fb2:	3b01      	subs	r3, #1
    3fb4:	041b      	lsls	r3, r3, #16
    3fb6:	9a03      	ldr	r2, [sp, #12]
    3fb8:	4313      	orrs	r3, r2
    3fba:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    3fbc:	4a02      	ldr	r2, [pc, #8]	; (3fc8 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    3fbe:	9b03      	ldr	r3, [sp, #12]
    3fc0:	6193      	str	r3, [r2, #24]
}
    3fc2:	bf00      	nop
    3fc4:	b004      	add	sp, #16
    3fc6:	4770      	bx	lr
    3fc8:	40064000 	.word	0x40064000

00003fcc <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3fcc:	b084      	sub	sp, #16
    3fce:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3fd0:	4b09      	ldr	r3, [pc, #36]	; (3ff8 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    3fd2:	699b      	ldr	r3, [r3, #24]
    3fd4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    3fd6:	9b03      	ldr	r3, [sp, #12]
    3fd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3fdc:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    3fde:	9b01      	ldr	r3, [sp, #4]
    3fe0:	685b      	ldr	r3, [r3, #4]
    3fe2:	3b01      	subs	r3, #1
    3fe4:	011b      	lsls	r3, r3, #4
    3fe6:	9a03      	ldr	r2, [sp, #12]
    3fe8:	4313      	orrs	r3, r2
    3fea:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    3fec:	4a02      	ldr	r2, [pc, #8]	; (3ff8 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    3fee:	9b03      	ldr	r3, [sp, #12]
    3ff0:	6193      	str	r3, [r2, #24]
}
    3ff2:	bf00      	nop
    3ff4:	b004      	add	sp, #16
    3ff6:	4770      	bx	lr
    3ff8:	40064000 	.word	0x40064000

00003ffc <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3ffc:	b084      	sub	sp, #16
    3ffe:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    4000:	4b09      	ldr	r3, [pc, #36]	; (4028 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    4002:	699b      	ldr	r3, [r3, #24]
    4004:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    4006:	9b03      	ldr	r3, [sp, #12]
    4008:	f023 030f 	bic.w	r3, r3, #15
    400c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    400e:	9b01      	ldr	r3, [sp, #4]
    4010:	685b      	ldr	r3, [r3, #4]
    4012:	3b01      	subs	r3, #1
    4014:	9a03      	ldr	r2, [sp, #12]
    4016:	4313      	orrs	r3, r2
    4018:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    401a:	4a03      	ldr	r2, [pc, #12]	; (4028 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    401c:	9b03      	ldr	r3, [sp, #12]
    401e:	6193      	str	r3, [r2, #24]
}
    4020:	bf00      	nop
    4022:	b004      	add	sp, #16
    4024:	4770      	bx	lr
    4026:	bf00      	nop
    4028:	40064000 	.word	0x40064000

0000402c <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    402c:	b084      	sub	sp, #16
    402e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    4030:	4b09      	ldr	r3, [pc, #36]	; (4058 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    4032:	69db      	ldr	r3, [r3, #28]
    4034:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    4036:	9b03      	ldr	r3, [sp, #12]
    4038:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    403c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    403e:	9b01      	ldr	r3, [sp, #4]
    4040:	685b      	ldr	r3, [r3, #4]
    4042:	3b01      	subs	r3, #1
    4044:	041b      	lsls	r3, r3, #16
    4046:	9a03      	ldr	r2, [sp, #12]
    4048:	4313      	orrs	r3, r2
    404a:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    404c:	4a02      	ldr	r2, [pc, #8]	; (4058 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    404e:	9b03      	ldr	r3, [sp, #12]
    4050:	61d3      	str	r3, [r2, #28]
}
    4052:	bf00      	nop
    4054:	b004      	add	sp, #16
    4056:	4770      	bx	lr
    4058:	40064000 	.word	0x40064000

0000405c <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    405c:	b084      	sub	sp, #16
    405e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    4060:	4b09      	ldr	r3, [pc, #36]	; (4088 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    4062:	69db      	ldr	r3, [r3, #28]
    4064:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    4066:	9b03      	ldr	r3, [sp, #12]
    4068:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    406c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    406e:	9b01      	ldr	r3, [sp, #4]
    4070:	685b      	ldr	r3, [r3, #4]
    4072:	3b01      	subs	r3, #1
    4074:	011b      	lsls	r3, r3, #4
    4076:	9a03      	ldr	r2, [sp, #12]
    4078:	4313      	orrs	r3, r2
    407a:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    407c:	4a02      	ldr	r2, [pc, #8]	; (4088 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    407e:	9b03      	ldr	r3, [sp, #12]
    4080:	61d3      	str	r3, [r2, #28]
}
    4082:	bf00      	nop
    4084:	b004      	add	sp, #16
    4086:	4770      	bx	lr
    4088:	40064000 	.word	0x40064000

0000408c <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    408c:	b084      	sub	sp, #16
    408e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    4090:	4b09      	ldr	r3, [pc, #36]	; (40b8 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    4092:	69db      	ldr	r3, [r3, #28]
    4094:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    4096:	9b03      	ldr	r3, [sp, #12]
    4098:	f023 030f 	bic.w	r3, r3, #15
    409c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    409e:	9b01      	ldr	r3, [sp, #4]
    40a0:	685b      	ldr	r3, [r3, #4]
    40a2:	3b01      	subs	r3, #1
    40a4:	9a03      	ldr	r2, [sp, #12]
    40a6:	4313      	orrs	r3, r2
    40a8:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    40aa:	4a03      	ldr	r2, [pc, #12]	; (40b8 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    40ac:	9b03      	ldr	r3, [sp, #12]
    40ae:	61d3      	str	r3, [r2, #28]
}
    40b0:	bf00      	nop
    40b2:	b004      	add	sp, #16
    40b4:	4770      	bx	lr
    40b6:	bf00      	nop
    40b8:	40064000 	.word	0x40064000

000040bc <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    40bc:	b084      	sub	sp, #16
    40be:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    40c0:	4b0a      	ldr	r3, [pc, #40]	; (40ec <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    40c2:	685b      	ldr	r3, [r3, #4]
    40c4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    40c6:	9b03      	ldr	r3, [sp, #12]
    40c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    40cc:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    40ce:	9b01      	ldr	r3, [sp, #4]
    40d0:	685b      	ldr	r3, [r3, #4]
    40d2:	3b01      	subs	r3, #1
    40d4:	021b      	lsls	r3, r3, #8
    40d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    40da:	9a03      	ldr	r2, [sp, #12]
    40dc:	4313      	orrs	r3, r2
    40de:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    40e0:	4a02      	ldr	r2, [pc, #8]	; (40ec <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    40e2:	9b03      	ldr	r3, [sp, #12]
    40e4:	6053      	str	r3, [r2, #4]
}
    40e6:	bf00      	nop
    40e8:	b004      	add	sp, #16
    40ea:	4770      	bx	lr
    40ec:	40048000 	.word	0x40048000

000040f0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    40f0:	b084      	sub	sp, #16
    40f2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    40f4:	4919      	ldr	r1, [pc, #100]	; (415c <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    40f6:	9b01      	ldr	r3, [sp, #4]
    40f8:	681a      	ldr	r2, [r3, #0]
    40fa:	4819      	ldr	r0, [pc, #100]	; (4160 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    40fc:	4613      	mov	r3, r2
    40fe:	00db      	lsls	r3, r3, #3
    4100:	4413      	add	r3, r2
    4102:	4403      	add	r3, r0
    4104:	3305      	adds	r3, #5
    4106:	781b      	ldrb	r3, [r3, #0]
    4108:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    410c:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    410e:	9b03      	ldr	r3, [sp, #12]
    4110:	f023 030f 	bic.w	r3, r3, #15
    4114:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    4116:	9b01      	ldr	r3, [sp, #4]
    4118:	685b      	ldr	r3, [r3, #4]
    411a:	3b01      	subs	r3, #1
    411c:	f003 0307 	and.w	r3, r3, #7
    4120:	9a03      	ldr	r2, [sp, #12]
    4122:	4313      	orrs	r3, r2
    4124:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    4126:	9b01      	ldr	r3, [sp, #4]
    4128:	7a1b      	ldrb	r3, [r3, #8]
    412a:	3b01      	subs	r3, #1
    412c:	00db      	lsls	r3, r3, #3
    412e:	f003 0308 	and.w	r3, r3, #8
    4132:	9a03      	ldr	r2, [sp, #12]
    4134:	4313      	orrs	r3, r2
    4136:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    4138:	4908      	ldr	r1, [pc, #32]	; (415c <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    413a:	9b01      	ldr	r3, [sp, #4]
    413c:	681a      	ldr	r2, [r3, #0]
    413e:	4808      	ldr	r0, [pc, #32]	; (4160 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    4140:	4613      	mov	r3, r2
    4142:	00db      	lsls	r3, r3, #3
    4144:	4413      	add	r3, r2
    4146:	4403      	add	r3, r0
    4148:	3305      	adds	r3, #5
    414a:	781b      	ldrb	r3, [r3, #0]
    414c:	461a      	mov	r2, r3
    414e:	9b03      	ldr	r3, [sp, #12]
    4150:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    4154:	bf00      	nop
    4156:	b004      	add	sp, #16
    4158:	4770      	bx	lr
    415a:	bf00      	nop
    415c:	40065000 	.word	0x40065000
    4160:	000190e0 	.word	0x000190e0

00004164 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    4164:	b084      	sub	sp, #16
    4166:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    4168:	4b10      	ldr	r3, [pc, #64]	; (41ac <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    416a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    416c:	4a0f      	ldr	r2, [pc, #60]	; (41ac <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    416e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    4172:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    4174:	4b0d      	ldr	r3, [pc, #52]	; (41ac <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    4176:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    4178:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    417a:	9b03      	ldr	r3, [sp, #12]
    417c:	f023 030f 	bic.w	r3, r3, #15
    4180:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    4182:	9b01      	ldr	r3, [sp, #4]
    4184:	685b      	ldr	r3, [r3, #4]
    4186:	3b01      	subs	r3, #1
    4188:	005b      	lsls	r3, r3, #1
    418a:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    418e:	9b01      	ldr	r3, [sp, #4]
    4190:	7a1b      	ldrb	r3, [r3, #8]
    4192:	3b01      	subs	r3, #1
    4194:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    4198:	4313      	orrs	r3, r2
    419a:	9a03      	ldr	r2, [sp, #12]
    419c:	4313      	orrs	r3, r2
    419e:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    41a0:	4a02      	ldr	r2, [pc, #8]	; (41ac <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    41a2:	9b03      	ldr	r3, [sp, #12]
    41a4:	6693      	str	r3, [r2, #104]	; 0x68
}
    41a6:	bf00      	nop
    41a8:	b004      	add	sp, #16
    41aa:	4770      	bx	lr
    41ac:	40048000 	.word	0x40048000

000041b0 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    41b0:	b082      	sub	sp, #8
    41b2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    41b4:	bf00      	nop
    41b6:	b002      	add	sp, #8
    41b8:	4770      	bx	lr
	...

000041bc <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    41bc:	b082      	sub	sp, #8
    41be:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    41c0:	bf00      	nop
    41c2:	b002      	add	sp, #8
    41c4:	4770      	bx	lr

000041c6 <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    41c6:	b082      	sub	sp, #8
    41c8:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    41ca:	bf00      	nop
    41cc:	b002      	add	sp, #8
    41ce:	4770      	bx	lr

000041d0 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    41d0:	b500      	push	{lr}
    41d2:	b083      	sub	sp, #12
    41d4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41d6:	9b01      	ldr	r3, [sp, #4]
    41d8:	2b00      	cmp	r3, #0
    41da:	d002      	beq.n	41e2 <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    41dc:	9801      	ldr	r0, [sp, #4]
    41de:	f000 f86a 	bl	42b6 <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41e2:	bf00      	nop
    41e4:	b003      	add	sp, #12
    41e6:	f85d fb04 	ldr.w	pc, [sp], #4

000041ea <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    41ea:	b500      	push	{lr}
    41ec:	b083      	sub	sp, #12
    41ee:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41f0:	9b01      	ldr	r3, [sp, #4]
    41f2:	2b00      	cmp	r3, #0
    41f4:	d002      	beq.n	41fc <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    41f6:	9801      	ldr	r0, [sp, #4]
    41f8:	f000 f884 	bl	4304 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    41fc:	bf00      	nop
    41fe:	b003      	add	sp, #12
    4200:	f85d fb04 	ldr.w	pc, [sp], #4

00004204 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    4204:	b500      	push	{lr}
    4206:	b089      	sub	sp, #36	; 0x24
    4208:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    420a:	2300      	movs	r3, #0
    420c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    4210:	9b01      	ldr	r3, [sp, #4]
    4212:	2b00      	cmp	r3, #0
    4214:	d031      	beq.n	427a <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    4216:	4b1b      	ldr	r3, [pc, #108]	; (4284 <Clock_Ip_CompleteSOSC+0x80>)
    4218:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    421c:	f003 0301 	and.w	r3, r3, #1
    4220:	2b00      	cmp	r3, #0
    4222:	d02a      	beq.n	427a <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4224:	aa03      	add	r2, sp, #12
    4226:	a904      	add	r1, sp, #16
    4228:	a805      	add	r0, sp, #20
    422a:	f24c 3350 	movw	r3, #50000	; 0xc350
    422e:	f7ff fd1d 	bl	3c6c <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    4232:	4b14      	ldr	r3, [pc, #80]	; (4284 <Clock_Ip_CompleteSOSC+0x80>)
    4234:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4238:	0e1b      	lsrs	r3, r3, #24
    423a:	f003 0301 	and.w	r3, r3, #1
    423e:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4240:	9a03      	ldr	r2, [sp, #12]
    4242:	a904      	add	r1, sp, #16
    4244:	ab05      	add	r3, sp, #20
    4246:	4618      	mov	r0, r3
    4248:	f7ff fd2a 	bl	3ca0 <Clock_Ip_TimeoutExpired>
    424c:	4603      	mov	r3, r0
    424e:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    4252:	9b06      	ldr	r3, [sp, #24]
    4254:	2b00      	cmp	r3, #0
    4256:	d106      	bne.n	4266 <Clock_Ip_CompleteSOSC+0x62>
    4258:	f89d 301f 	ldrb.w	r3, [sp, #31]
    425c:	f083 0301 	eor.w	r3, r3, #1
    4260:	b2db      	uxtb	r3, r3
    4262:	2b00      	cmp	r3, #0
    4264:	d1e5      	bne.n	4232 <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    4266:	f89d 301f 	ldrb.w	r3, [sp, #31]
    426a:	2b00      	cmp	r3, #0
    426c:	d005      	beq.n	427a <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    426e:	9b01      	ldr	r3, [sp, #4]
    4270:	681b      	ldr	r3, [r3, #0]
    4272:	4619      	mov	r1, r3
    4274:	2001      	movs	r0, #1
    4276:	f7ff fce9 	bl	3c4c <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    427a:	bf00      	nop
    427c:	b009      	add	sp, #36	; 0x24
    427e:	f85d fb04 	ldr.w	pc, [sp], #4
    4282:	bf00      	nop
    4284:	40064000 	.word	0x40064000

00004288 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    4288:	b500      	push	{lr}
    428a:	b083      	sub	sp, #12
    428c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    428e:	9801      	ldr	r0, [sp, #4]
    4290:	f000 f8c0 	bl	4414 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    4294:	bf00      	nop
    4296:	b003      	add	sp, #12
    4298:	f85d fb04 	ldr.w	pc, [sp], #4

0000429c <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    429c:	b500      	push	{lr}
    429e:	b083      	sub	sp, #12
    42a0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42a2:	9b01      	ldr	r3, [sp, #4]
    42a4:	2b00      	cmp	r3, #0
    42a6:	d002      	beq.n	42ae <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    42a8:	9801      	ldr	r0, [sp, #4]
    42aa:	f000 f8c3 	bl	4434 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42ae:	bf00      	nop
    42b0:	b003      	add	sp, #12
    42b2:	f85d fb04 	ldr.w	pc, [sp], #4

000042b6 <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    42b6:	b082      	sub	sp, #8
    42b8:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    42ba:	4b11      	ldr	r3, [pc, #68]	; (4300 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    42bc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    42c0:	4a0f      	ldr	r2, [pc, #60]	; (4300 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    42c2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    42c6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    42ca:	4b0d      	ldr	r3, [pc, #52]	; (4300 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    42cc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    42d0:	4a0b      	ldr	r2, [pc, #44]	; (4300 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    42d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    42d6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    42da:	4b09      	ldr	r3, [pc, #36]	; (4300 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    42dc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    42e0:	4a07      	ldr	r2, [pc, #28]	; (4300 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    42e2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    42e6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    42ea:	4b05      	ldr	r3, [pc, #20]	; (4300 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    42ec:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    42f0:	4a03      	ldr	r2, [pc, #12]	; (4300 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    42f2:	f023 0301 	bic.w	r3, r3, #1
    42f6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    42fa:	bf00      	nop
    42fc:	b002      	add	sp, #8
    42fe:	4770      	bx	lr
    4300:	40064000 	.word	0x40064000

00004304 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    4304:	b082      	sub	sp, #8
    4306:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    4308:	9b01      	ldr	r3, [sp, #4]
    430a:	891b      	ldrh	r3, [r3, #8]
    430c:	2b01      	cmp	r3, #1
    430e:	d174      	bne.n	43fa <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    4310:	9b01      	ldr	r3, [sp, #4]
    4312:	7bdb      	ldrb	r3, [r3, #15]
    4314:	2b00      	cmp	r3, #0
    4316:	d002      	beq.n	431e <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    4318:	2b01      	cmp	r3, #1
    431a:	d009      	beq.n	4330 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    431c:	e011      	b.n	4342 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    431e:	4b39      	ldr	r3, [pc, #228]	; (4404 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    4320:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    4324:	4a37      	ldr	r2, [pc, #220]	; (4404 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    4326:	f023 0308 	bic.w	r3, r3, #8
    432a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    432e:	e008      	b.n	4342 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    4330:	4b34      	ldr	r3, [pc, #208]	; (4404 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    4332:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    4336:	4a33      	ldr	r2, [pc, #204]	; (4404 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    4338:	f043 0308 	orr.w	r3, r3, #8
    433c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    4340:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    4342:	4b30      	ldr	r3, [pc, #192]	; (4404 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    4344:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    4348:	4a2e      	ldr	r2, [pc, #184]	; (4404 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    434a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    434e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    4352:	9b01      	ldr	r3, [sp, #4]
    4354:	685b      	ldr	r3, [r3, #4]
    4356:	4a2c      	ldr	r2, [pc, #176]	; (4408 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    4358:	4293      	cmp	r3, r2
    435a:	d90d      	bls.n	4378 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    435c:	9b01      	ldr	r3, [sp, #4]
    435e:	685b      	ldr	r3, [r3, #4]
    4360:	4a2a      	ldr	r2, [pc, #168]	; (440c <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    4362:	4293      	cmp	r3, r2
    4364:	d208      	bcs.n	4378 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    4366:	4b27      	ldr	r3, [pc, #156]	; (4404 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    4368:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    436c:	4a25      	ldr	r2, [pc, #148]	; (4404 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    436e:	f043 0320 	orr.w	r3, r3, #32
    4372:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    4376:	e007      	b.n	4388 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    4378:	4b22      	ldr	r3, [pc, #136]	; (4404 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    437a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    437e:	4a21      	ldr	r2, [pc, #132]	; (4404 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    4380:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    4384:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    4388:	9b01      	ldr	r3, [sp, #4]
    438a:	7b1b      	ldrb	r3, [r3, #12]
    438c:	2b00      	cmp	r3, #0
    438e:	d108      	bne.n	43a2 <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    4390:	4b1c      	ldr	r3, [pc, #112]	; (4404 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    4392:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    4396:	4a1b      	ldr	r2, [pc, #108]	; (4404 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    4398:	f043 0304 	orr.w	r3, r3, #4
    439c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    43a0:	e007      	b.n	43b2 <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    43a2:	4b18      	ldr	r3, [pc, #96]	; (4404 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    43a4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    43a8:	4a16      	ldr	r2, [pc, #88]	; (4404 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    43aa:	f023 0304 	bic.w	r3, r3, #4
    43ae:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    43b2:	9b01      	ldr	r3, [sp, #4]
    43b4:	7c1b      	ldrb	r3, [r3, #16]
    43b6:	2b02      	cmp	r3, #2
    43b8:	d011      	beq.n	43de <Clock_Ip_SetSOSC_TrustedCall+0xda>
    43ba:	2b02      	cmp	r3, #2
    43bc:	dc14      	bgt.n	43e8 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    43be:	2b00      	cmp	r3, #0
    43c0:	d002      	beq.n	43c8 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    43c2:	2b01      	cmp	r3, #1
    43c4:	d005      	beq.n	43d2 <Clock_Ip_SetSOSC_TrustedCall+0xce>
    43c6:	e00f      	b.n	43e8 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    43c8:	4b0e      	ldr	r3, [pc, #56]	; (4404 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    43ca:	2201      	movs	r2, #1
    43cc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    43d0:	e014      	b.n	43fc <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    43d2:	4b0c      	ldr	r3, [pc, #48]	; (4404 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    43d4:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    43d8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    43dc:	e00e      	b.n	43fc <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    43de:	4b09      	ldr	r3, [pc, #36]	; (4404 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    43e0:	4a0b      	ldr	r2, [pc, #44]	; (4410 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    43e2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    43e6:	e009      	b.n	43fc <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    43e8:	4b06      	ldr	r3, [pc, #24]	; (4404 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    43ea:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    43ee:	4a05      	ldr	r2, [pc, #20]	; (4404 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    43f0:	f043 0301 	orr.w	r3, r3, #1
    43f4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    43f8:	e000      	b.n	43fc <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    43fa:	bf00      	nop
}
    43fc:	bf00      	nop
    43fe:	b002      	add	sp, #8
    4400:	4770      	bx	lr
    4402:	bf00      	nop
    4404:	40064000 	.word	0x40064000
    4408:	003d08ff 	.word	0x003d08ff
    440c:	007a1200 	.word	0x007a1200
    4410:	00030001 	.word	0x00030001

00004414 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    4414:	b082      	sub	sp, #8
    4416:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    4418:	4b05      	ldr	r3, [pc, #20]	; (4430 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    441a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    441e:	4a04      	ldr	r2, [pc, #16]	; (4430 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    4420:	f023 0301 	bic.w	r3, r3, #1
    4424:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    4428:	bf00      	nop
    442a:	b002      	add	sp, #8
    442c:	4770      	bx	lr
    442e:	bf00      	nop
    4430:	40064000 	.word	0x40064000

00004434 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    4434:	b082      	sub	sp, #8
    4436:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    4438:	9b01      	ldr	r3, [sp, #4]
    443a:	891b      	ldrh	r3, [r3, #8]
    443c:	2b01      	cmp	r3, #1
    443e:	d107      	bne.n	4450 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    4440:	4b05      	ldr	r3, [pc, #20]	; (4458 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    4442:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4446:	4a04      	ldr	r2, [pc, #16]	; (4458 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    4448:	f043 0301 	orr.w	r3, r3, #1
    444c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    4450:	bf00      	nop
    4452:	b002      	add	sp, #8
    4454:	4770      	bx	lr
    4456:	bf00      	nop
    4458:	40064000 	.word	0x40064000

0000445c <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    445c:	b082      	sub	sp, #8
    445e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4460:	bf00      	nop
    4462:	b002      	add	sp, #8
    4464:	4770      	bx	lr

00004466 <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    4466:	b082      	sub	sp, #8
    4468:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    446a:	2300      	movs	r3, #0
}
    446c:	4618      	mov	r0, r3
    446e:	b002      	add	sp, #8
    4470:	4770      	bx	lr

00004472 <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    4472:	b082      	sub	sp, #8
    4474:	9001      	str	r0, [sp, #4]
    4476:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    4478:	bf00      	nop
    447a:	b002      	add	sp, #8
    447c:	4770      	bx	lr
	...

00004480 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    4480:	b082      	sub	sp, #8
    4482:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4484:	bf00      	nop
    4486:	b002      	add	sp, #8
    4488:	4770      	bx	lr

0000448a <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    448a:	b082      	sub	sp, #8
    448c:	9001      	str	r0, [sp, #4]
    448e:	460b      	mov	r3, r1
    4490:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    4494:	bf00      	nop
    4496:	b002      	add	sp, #8
    4498:	4770      	bx	lr

0000449a <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    449a:	b500      	push	{lr}
    449c:	b083      	sub	sp, #12
    449e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    44a0:	9b01      	ldr	r3, [sp, #4]
    44a2:	2b00      	cmp	r3, #0
    44a4:	d002      	beq.n	44ac <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    44a6:	9801      	ldr	r0, [sp, #4]
    44a8:	f000 f8e7 	bl	467a <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    44ac:	bf00      	nop
    44ae:	b003      	add	sp, #12
    44b0:	f85d fb04 	ldr.w	pc, [sp], #4

000044b4 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    44b4:	b500      	push	{lr}
    44b6:	b085      	sub	sp, #20
    44b8:	9001      	str	r0, [sp, #4]
    44ba:	460b      	mov	r3, r1
    44bc:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    44c0:	9b01      	ldr	r3, [sp, #4]
    44c2:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    44c4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    44c8:	2b00      	cmp	r3, #0
    44ca:	d003      	beq.n	44d4 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    44cc:	2300      	movs	r3, #0
    44ce:	f8ad 300c 	strh.w	r3, [sp, #12]
    44d2:	e002      	b.n	44da <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    44d4:	2301      	movs	r3, #1
    44d6:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    44da:	ab02      	add	r3, sp, #8
    44dc:	4618      	mov	r0, r3
    44de:	f7ff ffdc 	bl	449a <Clock_Ip_ClockSetSimLPO1KEnable>
}
    44e2:	bf00      	nop
    44e4:	b005      	add	sp, #20
    44e6:	f85d fb04 	ldr.w	pc, [sp], #4

000044ea <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    44ea:	b500      	push	{lr}
    44ec:	b083      	sub	sp, #12
    44ee:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    44f0:	9b01      	ldr	r3, [sp, #4]
    44f2:	2b00      	cmp	r3, #0
    44f4:	d002      	beq.n	44fc <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    44f6:	9801      	ldr	r0, [sp, #4]
    44f8:	f000 f8d6 	bl	46a8 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    44fc:	bf00      	nop
    44fe:	b003      	add	sp, #12
    4500:	f85d fb04 	ldr.w	pc, [sp], #4

00004504 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    4504:	b500      	push	{lr}
    4506:	b085      	sub	sp, #20
    4508:	9001      	str	r0, [sp, #4]
    450a:	460b      	mov	r3, r1
    450c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    4510:	9b01      	ldr	r3, [sp, #4]
    4512:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    4514:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4518:	2b00      	cmp	r3, #0
    451a:	d003      	beq.n	4524 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    451c:	2300      	movs	r3, #0
    451e:	f8ad 300c 	strh.w	r3, [sp, #12]
    4522:	e002      	b.n	452a <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    4524:	2301      	movs	r3, #1
    4526:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    452a:	ab02      	add	r3, sp, #8
    452c:	4618      	mov	r0, r3
    452e:	f7ff ffdc 	bl	44ea <Clock_Ip_ClockSetSimLPO32KEnable>
}
    4532:	bf00      	nop
    4534:	b005      	add	sp, #20
    4536:	f85d fb04 	ldr.w	pc, [sp], #4

0000453a <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    453a:	b500      	push	{lr}
    453c:	b083      	sub	sp, #12
    453e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4540:	9b01      	ldr	r3, [sp, #4]
    4542:	2b00      	cmp	r3, #0
    4544:	d002      	beq.n	454c <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    4546:	9801      	ldr	r0, [sp, #4]
    4548:	f000 f8c6 	bl	46d8 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    454c:	bf00      	nop
    454e:	b003      	add	sp, #12
    4550:	f85d fb04 	ldr.w	pc, [sp], #4

00004554 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    4554:	b500      	push	{lr}
    4556:	b085      	sub	sp, #20
    4558:	9001      	str	r0, [sp, #4]
    455a:	460b      	mov	r3, r1
    455c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    4560:	9b01      	ldr	r3, [sp, #4]
    4562:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    4564:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4568:	2b00      	cmp	r3, #0
    456a:	d003      	beq.n	4574 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    456c:	2300      	movs	r3, #0
    456e:	f8ad 300c 	strh.w	r3, [sp, #12]
    4572:	e002      	b.n	457a <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    4574:	2301      	movs	r3, #1
    4576:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    457a:	ab02      	add	r3, sp, #8
    457c:	4618      	mov	r0, r3
    457e:	f7ff ffdc 	bl	453a <Clock_Ip_ClockSetSimClkoutEnable>
}
    4582:	bf00      	nop
    4584:	b005      	add	sp, #20
    4586:	f85d fb04 	ldr.w	pc, [sp], #4

0000458a <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    458a:	b500      	push	{lr}
    458c:	b083      	sub	sp, #12
    458e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4590:	9b01      	ldr	r3, [sp, #4]
    4592:	2b00      	cmp	r3, #0
    4594:	d002      	beq.n	459c <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    4596:	9801      	ldr	r0, [sp, #4]
    4598:	f000 f8b6 	bl	4708 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    459c:	bf00      	nop
    459e:	b003      	add	sp, #12
    45a0:	f85d fb04 	ldr.w	pc, [sp], #4

000045a4 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    45a4:	b500      	push	{lr}
    45a6:	b085      	sub	sp, #20
    45a8:	9001      	str	r0, [sp, #4]
    45aa:	460b      	mov	r3, r1
    45ac:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    45b0:	9b01      	ldr	r3, [sp, #4]
    45b2:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    45b4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    45b8:	2b00      	cmp	r3, #0
    45ba:	d003      	beq.n	45c4 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    45bc:	2300      	movs	r3, #0
    45be:	f8ad 300c 	strh.w	r3, [sp, #12]
    45c2:	e002      	b.n	45ca <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    45c4:	2301      	movs	r3, #1
    45c6:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    45ca:	ab02      	add	r3, sp, #8
    45cc:	4618      	mov	r0, r3
    45ce:	f7ff ffdc 	bl	458a <Clock_Ip_ClockSetPccCgcEnable>
}
    45d2:	bf00      	nop
    45d4:	b005      	add	sp, #20
    45d6:	f85d fb04 	ldr.w	pc, [sp], #4

000045da <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    45da:	b500      	push	{lr}
    45dc:	b083      	sub	sp, #12
    45de:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    45e0:	9b01      	ldr	r3, [sp, #4]
    45e2:	2b00      	cmp	r3, #0
    45e4:	d002      	beq.n	45ec <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    45e6:	9801      	ldr	r0, [sp, #4]
    45e8:	f000 f8bc 	bl	4764 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    45ec:	bf00      	nop
    45ee:	b003      	add	sp, #12
    45f0:	f85d fb04 	ldr.w	pc, [sp], #4

000045f4 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    45f4:	b500      	push	{lr}
    45f6:	b085      	sub	sp, #20
    45f8:	9001      	str	r0, [sp, #4]
    45fa:	460b      	mov	r3, r1
    45fc:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    4600:	9b01      	ldr	r3, [sp, #4]
    4602:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    4604:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4608:	2b00      	cmp	r3, #0
    460a:	d003      	beq.n	4614 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    460c:	2300      	movs	r3, #0
    460e:	f8ad 300c 	strh.w	r3, [sp, #12]
    4612:	e002      	b.n	461a <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    4614:	2301      	movs	r3, #1
    4616:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    461a:	ab02      	add	r3, sp, #8
    461c:	4618      	mov	r0, r3
    461e:	f7ff ffdc 	bl	45da <Clock_Ip_ClockSetSimGate>
}
    4622:	bf00      	nop
    4624:	b005      	add	sp, #20
    4626:	f85d fb04 	ldr.w	pc, [sp], #4

0000462a <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    462a:	b500      	push	{lr}
    462c:	b083      	sub	sp, #12
    462e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4630:	9b01      	ldr	r3, [sp, #4]
    4632:	2b00      	cmp	r3, #0
    4634:	d002      	beq.n	463c <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    4636:	9801      	ldr	r0, [sp, #4]
    4638:	f000 f8c0 	bl	47bc <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    463c:	bf00      	nop
    463e:	b003      	add	sp, #12
    4640:	f85d fb04 	ldr.w	pc, [sp], #4

00004644 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    4644:	b500      	push	{lr}
    4646:	b085      	sub	sp, #20
    4648:	9001      	str	r0, [sp, #4]
    464a:	460b      	mov	r3, r1
    464c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    4650:	9b01      	ldr	r3, [sp, #4]
    4652:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    4654:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4658:	2b00      	cmp	r3, #0
    465a:	d003      	beq.n	4664 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    465c:	2300      	movs	r3, #0
    465e:	f8ad 300c 	strh.w	r3, [sp, #12]
    4662:	e002      	b.n	466a <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    4664:	2301      	movs	r3, #1
    4666:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    466a:	ab02      	add	r3, sp, #8
    466c:	4618      	mov	r0, r3
    466e:	f7ff ffdc 	bl	462a <Clock_Ip_ClockSetSimTraceEnable>
}
    4672:	bf00      	nop
    4674:	b005      	add	sp, #20
    4676:	f85d fb04 	ldr.w	pc, [sp], #4

0000467a <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    467a:	b084      	sub	sp, #16
    467c:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    467e:	4b09      	ldr	r3, [pc, #36]	; (46a4 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    4680:	691b      	ldr	r3, [r3, #16]
    4682:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    4684:	9b03      	ldr	r3, [sp, #12]
    4686:	f023 0301 	bic.w	r3, r3, #1
    468a:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    468c:	9b01      	ldr	r3, [sp, #4]
    468e:	889b      	ldrh	r3, [r3, #4]
    4690:	461a      	mov	r2, r3
    4692:	9b03      	ldr	r3, [sp, #12]
    4694:	4313      	orrs	r3, r2
    4696:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    4698:	4a02      	ldr	r2, [pc, #8]	; (46a4 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    469a:	9b03      	ldr	r3, [sp, #12]
    469c:	6113      	str	r3, [r2, #16]
}
    469e:	bf00      	nop
    46a0:	b004      	add	sp, #16
    46a2:	4770      	bx	lr
    46a4:	40048000 	.word	0x40048000

000046a8 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    46a8:	b084      	sub	sp, #16
    46aa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    46ac:	4b09      	ldr	r3, [pc, #36]	; (46d4 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    46ae:	691b      	ldr	r3, [r3, #16]
    46b0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    46b2:	9b03      	ldr	r3, [sp, #12]
    46b4:	f023 0302 	bic.w	r3, r3, #2
    46b8:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    46ba:	9b01      	ldr	r3, [sp, #4]
    46bc:	889b      	ldrh	r3, [r3, #4]
    46be:	005b      	lsls	r3, r3, #1
    46c0:	9a03      	ldr	r2, [sp, #12]
    46c2:	4313      	orrs	r3, r2
    46c4:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    46c6:	4a03      	ldr	r2, [pc, #12]	; (46d4 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    46c8:	9b03      	ldr	r3, [sp, #12]
    46ca:	6113      	str	r3, [r2, #16]
}
    46cc:	bf00      	nop
    46ce:	b004      	add	sp, #16
    46d0:	4770      	bx	lr
    46d2:	bf00      	nop
    46d4:	40048000 	.word	0x40048000

000046d8 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    46d8:	b084      	sub	sp, #16
    46da:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    46dc:	4b09      	ldr	r3, [pc, #36]	; (4704 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    46de:	685b      	ldr	r3, [r3, #4]
    46e0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    46e2:	9b03      	ldr	r3, [sp, #12]
    46e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    46e8:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    46ea:	9b01      	ldr	r3, [sp, #4]
    46ec:	889b      	ldrh	r3, [r3, #4]
    46ee:	02db      	lsls	r3, r3, #11
    46f0:	9a03      	ldr	r2, [sp, #12]
    46f2:	4313      	orrs	r3, r2
    46f4:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    46f6:	4a03      	ldr	r2, [pc, #12]	; (4704 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    46f8:	9b03      	ldr	r3, [sp, #12]
    46fa:	6053      	str	r3, [r2, #4]
}
    46fc:	bf00      	nop
    46fe:	b004      	add	sp, #16
    4700:	4770      	bx	lr
    4702:	bf00      	nop
    4704:	40048000 	.word	0x40048000

00004708 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    4708:	b084      	sub	sp, #16
    470a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    470c:	4913      	ldr	r1, [pc, #76]	; (475c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    470e:	9b01      	ldr	r3, [sp, #4]
    4710:	681a      	ldr	r2, [r3, #0]
    4712:	4813      	ldr	r0, [pc, #76]	; (4760 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    4714:	4613      	mov	r3, r2
    4716:	00db      	lsls	r3, r3, #3
    4718:	4413      	add	r3, r2
    471a:	4403      	add	r3, r0
    471c:	3306      	adds	r3, #6
    471e:	781b      	ldrb	r3, [r3, #0]
    4720:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    4724:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    4726:	9b03      	ldr	r3, [sp, #12]
    4728:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    472c:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    472e:	9b01      	ldr	r3, [sp, #4]
    4730:	889b      	ldrh	r3, [r3, #4]
    4732:	079b      	lsls	r3, r3, #30
    4734:	9a03      	ldr	r2, [sp, #12]
    4736:	4313      	orrs	r3, r2
    4738:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    473a:	4908      	ldr	r1, [pc, #32]	; (475c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    473c:	9b01      	ldr	r3, [sp, #4]
    473e:	681a      	ldr	r2, [r3, #0]
    4740:	4807      	ldr	r0, [pc, #28]	; (4760 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    4742:	4613      	mov	r3, r2
    4744:	00db      	lsls	r3, r3, #3
    4746:	4413      	add	r3, r2
    4748:	4403      	add	r3, r0
    474a:	3306      	adds	r3, #6
    474c:	781b      	ldrb	r3, [r3, #0]
    474e:	461a      	mov	r2, r3
    4750:	9b03      	ldr	r3, [sp, #12]
    4752:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    4756:	bf00      	nop
    4758:	b004      	add	sp, #16
    475a:	4770      	bx	lr
    475c:	40065000 	.word	0x40065000
    4760:	000190e0 	.word	0x000190e0

00004764 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    4764:	b086      	sub	sp, #24
    4766:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    4768:	9b01      	ldr	r3, [sp, #4]
    476a:	889b      	ldrh	r3, [r3, #4]
    476c:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    476e:	9b01      	ldr	r3, [sp, #4]
    4770:	681a      	ldr	r2, [r3, #0]
    4772:	4910      	ldr	r1, [pc, #64]	; (47b4 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    4774:	4613      	mov	r3, r2
    4776:	00db      	lsls	r3, r3, #3
    4778:	4413      	add	r3, r2
    477a:	440b      	add	r3, r1
    477c:	3306      	adds	r3, #6
    477e:	781b      	ldrb	r3, [r3, #0]
    4780:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    4782:	4b0d      	ldr	r3, [pc, #52]	; (47b8 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    4784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4786:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    4788:	2201      	movs	r2, #1
    478a:	9b04      	ldr	r3, [sp, #16]
    478c:	fa02 f303 	lsl.w	r3, r2, r3
    4790:	43db      	mvns	r3, r3
    4792:	9a03      	ldr	r2, [sp, #12]
    4794:	4013      	ands	r3, r2
    4796:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    4798:	9a05      	ldr	r2, [sp, #20]
    479a:	9b04      	ldr	r3, [sp, #16]
    479c:	fa02 f303 	lsl.w	r3, r2, r3
    47a0:	9a03      	ldr	r2, [sp, #12]
    47a2:	4313      	orrs	r3, r2
    47a4:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    47a6:	4a04      	ldr	r2, [pc, #16]	; (47b8 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    47a8:	9b03      	ldr	r3, [sp, #12]
    47aa:	6413      	str	r3, [r2, #64]	; 0x40
}
    47ac:	bf00      	nop
    47ae:	b006      	add	sp, #24
    47b0:	4770      	bx	lr
    47b2:	bf00      	nop
    47b4:	000190e0 	.word	0x000190e0
    47b8:	40048000 	.word	0x40048000

000047bc <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    47bc:	b084      	sub	sp, #16
    47be:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    47c0:	4b0a      	ldr	r3, [pc, #40]	; (47ec <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    47c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    47c4:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    47c6:	9b01      	ldr	r3, [sp, #4]
    47c8:	889b      	ldrh	r3, [r3, #4]
    47ca:	2b01      	cmp	r3, #1
    47cc:	d104      	bne.n	47d8 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    47ce:	9b03      	ldr	r3, [sp, #12]
    47d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    47d4:	9303      	str	r3, [sp, #12]
    47d6:	e003      	b.n	47e0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    47d8:	9b03      	ldr	r3, [sp, #12]
    47da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    47de:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    47e0:	4a02      	ldr	r2, [pc, #8]	; (47ec <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    47e2:	9b03      	ldr	r3, [sp, #12]
    47e4:	6693      	str	r3, [r2, #104]	; 0x68
}
    47e6:	bf00      	nop
    47e8:	b004      	add	sp, #16
    47ea:	4770      	bx	lr
    47ec:	40048000 	.word	0x40048000

000047f0 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    47f0:	b082      	sub	sp, #8
    47f2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    47f4:	bf00      	nop
    47f6:	b002      	add	sp, #8
    47f8:	4770      	bx	lr

000047fa <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    47fa:	b082      	sub	sp, #8
    47fc:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    47fe:	bf00      	nop
    4800:	b002      	add	sp, #8
    4802:	4770      	bx	lr

00004804 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    4804:	b500      	push	{lr}
    4806:	b083      	sub	sp, #12
    4808:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    480a:	9b01      	ldr	r3, [sp, #4]
    480c:	2b00      	cmp	r3, #0
    480e:	d002      	beq.n	4816 <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    4810:	9801      	ldr	r0, [sp, #4]
    4812:	f000 f8d1 	bl	49b8 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4816:	bf00      	nop
    4818:	b003      	add	sp, #12
    481a:	f85d fb04 	ldr.w	pc, [sp], #4

0000481e <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    481e:	b500      	push	{lr}
    4820:	b083      	sub	sp, #12
    4822:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4824:	9b01      	ldr	r3, [sp, #4]
    4826:	2b00      	cmp	r3, #0
    4828:	d002      	beq.n	4830 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    482a:	9801      	ldr	r0, [sp, #4]
    482c:	f000 f950 	bl	4ad0 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4830:	bf00      	nop
    4832:	b003      	add	sp, #12
    4834:	f85d fb04 	ldr.w	pc, [sp], #4

00004838 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    4838:	b500      	push	{lr}
    483a:	b083      	sub	sp, #12
    483c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    483e:	9801      	ldr	r0, [sp, #4]
    4840:	f000 f98e 	bl	4b60 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    4844:	bf00      	nop
    4846:	b003      	add	sp, #12
    4848:	f85d fb04 	ldr.w	pc, [sp], #4

0000484c <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    484c:	b500      	push	{lr}
    484e:	b083      	sub	sp, #12
    4850:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4852:	9b01      	ldr	r3, [sp, #4]
    4854:	2b00      	cmp	r3, #0
    4856:	d002      	beq.n	485e <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    4858:	9801      	ldr	r0, [sp, #4]
    485a:	f000 f999 	bl	4b90 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    485e:	bf00      	nop
    4860:	b003      	add	sp, #12
    4862:	f85d fb04 	ldr.w	pc, [sp], #4

00004866 <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    4866:	b500      	push	{lr}
    4868:	b083      	sub	sp, #12
    486a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    486c:	9b01      	ldr	r3, [sp, #4]
    486e:	2b00      	cmp	r3, #0
    4870:	d002      	beq.n	4878 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    4872:	9801      	ldr	r0, [sp, #4]
    4874:	f000 f9b0 	bl	4bd8 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4878:	bf00      	nop
    487a:	b003      	add	sp, #12
    487c:	f85d fb04 	ldr.w	pc, [sp], #4

00004880 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    4880:	b500      	push	{lr}
    4882:	b083      	sub	sp, #12
    4884:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    4886:	9801      	ldr	r0, [sp, #4]
    4888:	f000 f9ba 	bl	4c00 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    488c:	bf00      	nop
    488e:	b003      	add	sp, #12
    4890:	f85d fb04 	ldr.w	pc, [sp], #4

00004894 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    4894:	b500      	push	{lr}
    4896:	b083      	sub	sp, #12
    4898:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    489a:	9b01      	ldr	r3, [sp, #4]
    489c:	2b00      	cmp	r3, #0
    489e:	d002      	beq.n	48a6 <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    48a0:	9801      	ldr	r0, [sp, #4]
    48a2:	f000 f9bd 	bl	4c20 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    48a6:	bf00      	nop
    48a8:	b003      	add	sp, #12
    48aa:	f85d fb04 	ldr.w	pc, [sp], #4

000048ae <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    48ae:	b500      	push	{lr}
    48b0:	b083      	sub	sp, #12
    48b2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    48b4:	9b01      	ldr	r3, [sp, #4]
    48b6:	2b00      	cmp	r3, #0
    48b8:	d002      	beq.n	48c0 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    48ba:	9801      	ldr	r0, [sp, #4]
    48bc:	f000 f9d4 	bl	4c68 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    48c0:	bf00      	nop
    48c2:	b003      	add	sp, #12
    48c4:	f85d fb04 	ldr.w	pc, [sp], #4

000048c8 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    48c8:	b500      	push	{lr}
    48ca:	b083      	sub	sp, #12
    48cc:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    48ce:	9801      	ldr	r0, [sp, #4]
    48d0:	f000 f9de 	bl	4c90 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    48d4:	bf00      	nop
    48d6:	b003      	add	sp, #12
    48d8:	f85d fb04 	ldr.w	pc, [sp], #4

000048dc <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    48dc:	b500      	push	{lr}
    48de:	b089      	sub	sp, #36	; 0x24
    48e0:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    48e2:	2300      	movs	r3, #0
    48e4:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    48e8:	4b20      	ldr	r3, [pc, #128]	; (496c <SetInputSouceSytemClock+0x90>)
    48ea:	695b      	ldr	r3, [r3, #20]
    48ec:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    48ee:	9b06      	ldr	r3, [sp, #24]
    48f0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    48f4:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    48f6:	9b01      	ldr	r3, [sp, #4]
    48f8:	061b      	lsls	r3, r3, #24
    48fa:	9a06      	ldr	r2, [sp, #24]
    48fc:	4313      	orrs	r3, r2
    48fe:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    4900:	4a1a      	ldr	r2, [pc, #104]	; (496c <SetInputSouceSytemClock+0x90>)
    4902:	9b06      	ldr	r3, [sp, #24]
    4904:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4906:	aa02      	add	r2, sp, #8
    4908:	a903      	add	r1, sp, #12
    490a:	a804      	add	r0, sp, #16
    490c:	f24c 3350 	movw	r3, #50000	; 0xc350
    4910:	f7ff f9ac 	bl	3c6c <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    4914:	4b15      	ldr	r3, [pc, #84]	; (496c <SetInputSouceSytemClock+0x90>)
    4916:	691b      	ldr	r3, [r3, #16]
    4918:	0e1b      	lsrs	r3, r3, #24
    491a:	f003 030f 	and.w	r3, r3, #15
    491e:	9a01      	ldr	r2, [sp, #4]
    4920:	429a      	cmp	r2, r3
    4922:	bf0c      	ite	eq
    4924:	2301      	moveq	r3, #1
    4926:	2300      	movne	r3, #0
    4928:	b2db      	uxtb	r3, r3
    492a:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    492c:	9a02      	ldr	r2, [sp, #8]
    492e:	a903      	add	r1, sp, #12
    4930:	ab04      	add	r3, sp, #16
    4932:	4618      	mov	r0, r3
    4934:	f7ff f9b4 	bl	3ca0 <Clock_Ip_TimeoutExpired>
    4938:	4603      	mov	r3, r0
    493a:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    493e:	9b05      	ldr	r3, [sp, #20]
    4940:	2b00      	cmp	r3, #0
    4942:	d106      	bne.n	4952 <SetInputSouceSytemClock+0x76>
    4944:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4948:	f083 0301 	eor.w	r3, r3, #1
    494c:	b2db      	uxtb	r3, r3
    494e:	2b00      	cmp	r3, #0
    4950:	d1e0      	bne.n	4914 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    4952:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4956:	2b00      	cmp	r3, #0
    4958:	d003      	beq.n	4962 <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    495a:	2105      	movs	r1, #5
    495c:	2001      	movs	r0, #1
    495e:	f7ff f975 	bl	3c4c <Clock_Ip_ReportClockErrors>
    }
}
    4962:	bf00      	nop
    4964:	b009      	add	sp, #36	; 0x24
    4966:	f85d fb04 	ldr.w	pc, [sp], #4
    496a:	bf00      	nop
    496c:	40064000 	.word	0x40064000

00004970 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    4970:	b500      	push	{lr}
    4972:	b083      	sub	sp, #12
    4974:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4976:	9b01      	ldr	r3, [sp, #4]
    4978:	2b00      	cmp	r3, #0
    497a:	d002      	beq.n	4982 <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    497c:	9801      	ldr	r0, [sp, #4]
    497e:	f000 f997 	bl	4cb0 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4982:	bf00      	nop
    4984:	b003      	add	sp, #12
    4986:	f85d fb04 	ldr.w	pc, [sp], #4

0000498a <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    498a:	b500      	push	{lr}
    498c:	b083      	sub	sp, #12
    498e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4990:	9b01      	ldr	r3, [sp, #4]
    4992:	2b00      	cmp	r3, #0
    4994:	d002      	beq.n	499c <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    4996:	9801      	ldr	r0, [sp, #4]
    4998:	f000 fa7e 	bl	4e98 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    499c:	bf00      	nop
    499e:	b003      	add	sp, #12
    49a0:	f85d fb04 	ldr.w	pc, [sp], #4

000049a4 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    49a4:	b500      	push	{lr}
    49a6:	b083      	sub	sp, #12
    49a8:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    49aa:	9801      	ldr	r0, [sp, #4]
    49ac:	f000 fab8 	bl	4f20 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    49b0:	bf00      	nop
    49b2:	b003      	add	sp, #12
    49b4:	f85d fb04 	ldr.w	pc, [sp], #4

000049b8 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    49b8:	b500      	push	{lr}
    49ba:	b08b      	sub	sp, #44	; 0x2c
    49bc:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    49be:	2300      	movs	r3, #0
    49c0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    49c4:	9b01      	ldr	r3, [sp, #4]
    49c6:	2b00      	cmp	r3, #0
    49c8:	d10b      	bne.n	49e2 <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    49ca:	2305      	movs	r3, #5
    49cc:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    49ce:	2301      	movs	r3, #1
    49d0:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    49d4:	2301      	movs	r3, #1
    49d6:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    49da:	2301      	movs	r3, #1
    49dc:	f88d 3010 	strb.w	r3, [sp, #16]
    49e0:	e00e      	b.n	4a00 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    49e2:	9b01      	ldr	r3, [sp, #4]
    49e4:	681b      	ldr	r3, [r3, #0]
    49e6:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    49e8:	9b01      	ldr	r3, [sp, #4]
    49ea:	79db      	ldrb	r3, [r3, #7]
    49ec:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    49f0:	9b01      	ldr	r3, [sp, #4]
    49f2:	889b      	ldrh	r3, [r3, #4]
    49f4:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    49f8:	9b01      	ldr	r3, [sp, #4]
    49fa:	7a1b      	ldrb	r3, [r3, #8]
    49fc:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    4a00:	4b32      	ldr	r3, [pc, #200]	; (4acc <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4a02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4a06:	4a31      	ldr	r2, [pc, #196]	; (4acc <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4a08:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4a0c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    4a10:	4b2e      	ldr	r3, [pc, #184]	; (4acc <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4a12:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4a16:	4a2d      	ldr	r2, [pc, #180]	; (4acc <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4a18:	f023 0301 	bic.w	r3, r3, #1
    4a1c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    4a20:	4b2a      	ldr	r3, [pc, #168]	; (4acc <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4a22:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4a26:	4a29      	ldr	r2, [pc, #164]	; (4acc <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4a28:	f023 0304 	bic.w	r3, r3, #4
    4a2c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    4a30:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    4a34:	2b01      	cmp	r3, #1
    4a36:	d144      	bne.n	4ac2 <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    4a38:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4a3c:	4a23      	ldr	r2, [pc, #140]	; (4acc <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4a3e:	f003 0301 	and.w	r3, r3, #1
    4a42:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    4a46:	4b21      	ldr	r3, [pc, #132]	; (4acc <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4a48:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4a4c:	4a1f      	ldr	r2, [pc, #124]	; (4acc <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4a4e:	f043 0301 	orr.w	r3, r3, #1
    4a52:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    4a56:	4b1d      	ldr	r3, [pc, #116]	; (4acc <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4a58:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4a5c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    4a60:	009b      	lsls	r3, r3, #2
    4a62:	f003 0304 	and.w	r3, r3, #4
    4a66:	4919      	ldr	r1, [pc, #100]	; (4acc <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4a68:	4313      	orrs	r3, r2
    4a6a:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4a6e:	aa05      	add	r2, sp, #20
    4a70:	a906      	add	r1, sp, #24
    4a72:	a807      	add	r0, sp, #28
    4a74:	f24c 3350 	movw	r3, #50000	; 0xc350
    4a78:	f7ff f8f8 	bl	3c6c <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    4a7c:	4b13      	ldr	r3, [pc, #76]	; (4acc <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4a7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4a82:	0e1b      	lsrs	r3, r3, #24
    4a84:	f003 0301 	and.w	r3, r3, #1
    4a88:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4a8a:	9a05      	ldr	r2, [sp, #20]
    4a8c:	a906      	add	r1, sp, #24
    4a8e:	ab07      	add	r3, sp, #28
    4a90:	4618      	mov	r0, r3
    4a92:	f7ff f905 	bl	3ca0 <Clock_Ip_TimeoutExpired>
    4a96:	4603      	mov	r3, r0
    4a98:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4a9c:	9b08      	ldr	r3, [sp, #32]
    4a9e:	2b00      	cmp	r3, #0
    4aa0:	d106      	bne.n	4ab0 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    4aa2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    4aa6:	f083 0301 	eor.w	r3, r3, #1
    4aaa:	b2db      	uxtb	r3, r3
    4aac:	2b00      	cmp	r3, #0
    4aae:	d1e5      	bne.n	4a7c <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    4ab0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    4ab4:	2b00      	cmp	r3, #0
    4ab6:	d004      	beq.n	4ac2 <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    4ab8:	9b02      	ldr	r3, [sp, #8]
    4aba:	4619      	mov	r1, r3
    4abc:	2001      	movs	r0, #1
    4abe:	f7ff f8c5 	bl	3c4c <Clock_Ip_ReportClockErrors>
        }
    }
}
    4ac2:	bf00      	nop
    4ac4:	b00b      	add	sp, #44	; 0x2c
    4ac6:	f85d fb04 	ldr.w	pc, [sp], #4
    4aca:	bf00      	nop
    4acc:	40064000 	.word	0x40064000

00004ad0 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4ad0:	b500      	push	{lr}
    4ad2:	b089      	sub	sp, #36	; 0x24
    4ad4:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4ad6:	2300      	movs	r3, #0
    4ad8:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    4adc:	4b1f      	ldr	r3, [pc, #124]	; (4b5c <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    4ade:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4ae2:	4a1e      	ldr	r2, [pc, #120]	; (4b5c <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    4ae4:	f043 0301 	orr.w	r3, r3, #1
    4ae8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    4aec:	4b1b      	ldr	r3, [pc, #108]	; (4b5c <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    4aee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4af2:	4a1a      	ldr	r2, [pc, #104]	; (4b5c <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    4af4:	f043 0304 	orr.w	r3, r3, #4
    4af8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4afc:	aa03      	add	r2, sp, #12
    4afe:	a904      	add	r1, sp, #16
    4b00:	a805      	add	r0, sp, #20
    4b02:	f24c 3350 	movw	r3, #50000	; 0xc350
    4b06:	f7ff f8b1 	bl	3c6c <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    4b0a:	4b14      	ldr	r3, [pc, #80]	; (4b5c <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    4b0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4b10:	0e1b      	lsrs	r3, r3, #24
    4b12:	f003 0301 	and.w	r3, r3, #1
    4b16:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4b18:	9a03      	ldr	r2, [sp, #12]
    4b1a:	a904      	add	r1, sp, #16
    4b1c:	ab05      	add	r3, sp, #20
    4b1e:	4618      	mov	r0, r3
    4b20:	f7ff f8be 	bl	3ca0 <Clock_Ip_TimeoutExpired>
    4b24:	4603      	mov	r3, r0
    4b26:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4b2a:	9b06      	ldr	r3, [sp, #24]
    4b2c:	2b00      	cmp	r3, #0
    4b2e:	d106      	bne.n	4b3e <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    4b30:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4b34:	f083 0301 	eor.w	r3, r3, #1
    4b38:	b2db      	uxtb	r3, r3
    4b3a:	2b00      	cmp	r3, #0
    4b3c:	d1e5      	bne.n	4b0a <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    4b3e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4b42:	2b00      	cmp	r3, #0
    4b44:	d005      	beq.n	4b52 <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4b46:	9b01      	ldr	r3, [sp, #4]
    4b48:	681b      	ldr	r3, [r3, #0]
    4b4a:	4619      	mov	r1, r3
    4b4c:	2001      	movs	r0, #1
    4b4e:	f7ff f87d 	bl	3c4c <Clock_Ip_ReportClockErrors>
    }
}
    4b52:	bf00      	nop
    4b54:	b009      	add	sp, #36	; 0x24
    4b56:	f85d fb04 	ldr.w	pc, [sp], #4
    4b5a:	bf00      	nop
    4b5c:	40064000 	.word	0x40064000

00004b60 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    4b60:	b082      	sub	sp, #8
    4b62:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    4b64:	4b09      	ldr	r3, [pc, #36]	; (4b8c <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    4b66:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4b6a:	4a08      	ldr	r2, [pc, #32]	; (4b8c <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    4b6c:	f023 0301 	bic.w	r3, r3, #1
    4b70:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    4b74:	4b05      	ldr	r3, [pc, #20]	; (4b8c <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    4b76:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4b7a:	4a04      	ldr	r2, [pc, #16]	; (4b8c <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    4b7c:	f023 0304 	bic.w	r3, r3, #4
    4b80:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    4b84:	bf00      	nop
    4b86:	b002      	add	sp, #8
    4b88:	4770      	bx	lr
    4b8a:	bf00      	nop
    4b8c:	40064000 	.word	0x40064000

00004b90 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4b90:	b082      	sub	sp, #8
    4b92:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    4b94:	4b0f      	ldr	r3, [pc, #60]	; (4bd4 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4b96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4b9a:	4a0e      	ldr	r2, [pc, #56]	; (4bd4 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4b9c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4ba0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    4ba4:	4b0b      	ldr	r3, [pc, #44]	; (4bd4 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4ba6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4baa:	4a0a      	ldr	r2, [pc, #40]	; (4bd4 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4bac:	f023 0304 	bic.w	r3, r3, #4
    4bb0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    4bb4:	4b07      	ldr	r3, [pc, #28]	; (4bd4 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4bb6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4bba:	9b01      	ldr	r3, [sp, #4]
    4bbc:	7a1b      	ldrb	r3, [r3, #8]
    4bbe:	009b      	lsls	r3, r3, #2
    4bc0:	f003 0304 	and.w	r3, r3, #4
    4bc4:	4903      	ldr	r1, [pc, #12]	; (4bd4 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4bc6:	4313      	orrs	r3, r2
    4bc8:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    4bcc:	bf00      	nop
    4bce:	b002      	add	sp, #8
    4bd0:	4770      	bx	lr
    4bd2:	bf00      	nop
    4bd4:	40064000 	.word	0x40064000

00004bd8 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4bd8:	b082      	sub	sp, #8
    4bda:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    4bdc:	9b01      	ldr	r3, [sp, #4]
    4bde:	889b      	ldrh	r3, [r3, #4]
    4be0:	2b01      	cmp	r3, #1
    4be2:	d107      	bne.n	4bf4 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    4be4:	4b05      	ldr	r3, [pc, #20]	; (4bfc <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    4be6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4bea:	4a04      	ldr	r2, [pc, #16]	; (4bfc <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    4bec:	f043 0304 	orr.w	r3, r3, #4
    4bf0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    4bf4:	bf00      	nop
    4bf6:	b002      	add	sp, #8
    4bf8:	4770      	bx	lr
    4bfa:	bf00      	nop
    4bfc:	40064000 	.word	0x40064000

00004c00 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    4c00:	b082      	sub	sp, #8
    4c02:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    4c04:	4b05      	ldr	r3, [pc, #20]	; (4c1c <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    4c06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4c0a:	4a04      	ldr	r2, [pc, #16]	; (4c1c <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    4c0c:	f023 0304 	bic.w	r3, r3, #4
    4c10:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    4c14:	bf00      	nop
    4c16:	b002      	add	sp, #8
    4c18:	4770      	bx	lr
    4c1a:	bf00      	nop
    4c1c:	40064000 	.word	0x40064000

00004c20 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4c20:	b082      	sub	sp, #8
    4c22:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    4c24:	4b0f      	ldr	r3, [pc, #60]	; (4c64 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    4c26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4c2a:	4a0e      	ldr	r2, [pc, #56]	; (4c64 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    4c2c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4c30:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    4c34:	4b0b      	ldr	r3, [pc, #44]	; (4c64 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    4c36:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4c3a:	4a0a      	ldr	r2, [pc, #40]	; (4c64 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    4c3c:	f023 0302 	bic.w	r3, r3, #2
    4c40:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    4c44:	4b07      	ldr	r3, [pc, #28]	; (4c64 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    4c46:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4c4a:	9b01      	ldr	r3, [sp, #4]
    4c4c:	7a5b      	ldrb	r3, [r3, #9]
    4c4e:	005b      	lsls	r3, r3, #1
    4c50:	f003 0302 	and.w	r3, r3, #2
    4c54:	4903      	ldr	r1, [pc, #12]	; (4c64 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    4c56:	4313      	orrs	r3, r2
    4c58:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    4c5c:	bf00      	nop
    4c5e:	b002      	add	sp, #8
    4c60:	4770      	bx	lr
    4c62:	bf00      	nop
    4c64:	40064000 	.word	0x40064000

00004c68 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4c68:	b082      	sub	sp, #8
    4c6a:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    4c6c:	9b01      	ldr	r3, [sp, #4]
    4c6e:	889b      	ldrh	r3, [r3, #4]
    4c70:	2b01      	cmp	r3, #1
    4c72:	d107      	bne.n	4c84 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    4c74:	4b05      	ldr	r3, [pc, #20]	; (4c8c <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    4c76:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4c7a:	4a04      	ldr	r2, [pc, #16]	; (4c8c <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    4c7c:	f043 0302 	orr.w	r3, r3, #2
    4c80:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    4c84:	bf00      	nop
    4c86:	b002      	add	sp, #8
    4c88:	4770      	bx	lr
    4c8a:	bf00      	nop
    4c8c:	40064000 	.word	0x40064000

00004c90 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    4c90:	b082      	sub	sp, #8
    4c92:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    4c94:	4b05      	ldr	r3, [pc, #20]	; (4cac <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    4c96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4c9a:	4a04      	ldr	r2, [pc, #16]	; (4cac <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    4c9c:	f023 0302 	bic.w	r3, r3, #2
    4ca0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    4ca4:	bf00      	nop
    4ca6:	b002      	add	sp, #8
    4ca8:	4770      	bx	lr
    4caa:	bf00      	nop
    4cac:	40064000 	.word	0x40064000

00004cb0 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4cb0:	b500      	push	{lr}
    4cb2:	b08b      	sub	sp, #44	; 0x2c
    4cb4:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    4cb6:	9b01      	ldr	r3, [sp, #4]
    4cb8:	681a      	ldr	r2, [r3, #0]
    4cba:	4975      	ldr	r1, [pc, #468]	; (4e90 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    4cbc:	4613      	mov	r3, r2
    4cbe:	00db      	lsls	r3, r3, #3
    4cc0:	4413      	add	r3, r2
    4cc2:	440b      	add	r3, r1
    4cc4:	781b      	ldrb	r3, [r3, #0]
    4cc6:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    4cc8:	2300      	movs	r3, #0
    4cca:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    4cce:	2300      	movs	r3, #0
    4cd0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    4cd4:	4b6f      	ldr	r3, [pc, #444]	; (4e94 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4cd6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4cda:	4a6e      	ldr	r2, [pc, #440]	; (4e94 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4cdc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4ce0:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    4ce4:	4b6b      	ldr	r3, [pc, #428]	; (4e94 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4ce6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    4cee:	2b00      	cmp	r3, #0
    4cf0:	d07d      	beq.n	4dee <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    4cf2:	9b01      	ldr	r3, [sp, #4]
    4cf4:	79db      	ldrb	r3, [r3, #7]
    4cf6:	461a      	mov	r2, r3
    4cf8:	4b66      	ldr	r3, [pc, #408]	; (4e94 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4cfa:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    4cfe:	f003 0303 	and.w	r3, r3, #3
    4d02:	429a      	cmp	r2, r3
    4d04:	d10b      	bne.n	4d1e <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    4d06:	9b01      	ldr	r3, [sp, #4]
    4d08:	799b      	ldrb	r3, [r3, #6]
    4d0a:	461a      	mov	r2, r3
    4d0c:	4b61      	ldr	r3, [pc, #388]	; (4e94 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4d0e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4d12:	08db      	lsrs	r3, r3, #3
    4d14:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    4d18:	429a      	cmp	r2, r3
    4d1a:	f000 80b4 	beq.w	4e86 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    4d1e:	4b5d      	ldr	r3, [pc, #372]	; (4e94 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4d20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4d24:	f003 0301 	and.w	r3, r3, #1
    4d28:	2b00      	cmp	r3, #0
    4d2a:	d105      	bne.n	4d38 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    4d2c:	2301      	movs	r3, #1
    4d2e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    4d32:	2000      	movs	r0, #0
    4d34:	f7ff fd66 	bl	4804 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    4d38:	2002      	movs	r0, #2
    4d3a:	f7ff fdcf 	bl	48dc <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    4d3e:	4b55      	ldr	r3, [pc, #340]	; (4e94 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4d40:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4d44:	4a53      	ldr	r2, [pc, #332]	; (4e94 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4d46:	f023 0301 	bic.w	r3, r3, #1
    4d4a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    4d4e:	9b01      	ldr	r3, [sp, #4]
    4d50:	889b      	ldrh	r3, [r3, #4]
    4d52:	2b01      	cmp	r3, #1
    4d54:	f040 8097 	bne.w	4e86 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    4d58:	9b01      	ldr	r3, [sp, #4]
    4d5a:	79db      	ldrb	r3, [r3, #7]
    4d5c:	4a4d      	ldr	r2, [pc, #308]	; (4e94 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4d5e:	f003 0303 	and.w	r3, r3, #3
    4d62:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    4d66:	4b4b      	ldr	r3, [pc, #300]	; (4e94 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4d68:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    4d6c:	9b01      	ldr	r3, [sp, #4]
    4d6e:	799b      	ldrb	r3, [r3, #6]
    4d70:	00db      	lsls	r3, r3, #3
    4d72:	f003 0308 	and.w	r3, r3, #8
    4d76:	4313      	orrs	r3, r2
    4d78:	4a46      	ldr	r2, [pc, #280]	; (4e94 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4d7a:	f043 0301 	orr.w	r3, r3, #1
    4d7e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4d82:	aa03      	add	r2, sp, #12
    4d84:	a904      	add	r1, sp, #16
    4d86:	a805      	add	r0, sp, #20
    4d88:	f24c 3350 	movw	r3, #50000	; 0xc350
    4d8c:	f7fe ff6e 	bl	3c6c <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4d90:	4b40      	ldr	r3, [pc, #256]	; (4e94 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4d92:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4d96:	0e1b      	lsrs	r3, r3, #24
    4d98:	f003 0301 	and.w	r3, r3, #1
    4d9c:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4d9e:	9a03      	ldr	r2, [sp, #12]
    4da0:	a904      	add	r1, sp, #16
    4da2:	ab05      	add	r3, sp, #20
    4da4:	4618      	mov	r0, r3
    4da6:	f7fe ff7b 	bl	3ca0 <Clock_Ip_TimeoutExpired>
    4daa:	4603      	mov	r3, r0
    4dac:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4db0:	9b06      	ldr	r3, [sp, #24]
    4db2:	2b00      	cmp	r3, #0
    4db4:	d106      	bne.n	4dc4 <Clock_Ip_SetFirc_TrustedCall+0x114>
    4db6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4dba:	f083 0301 	eor.w	r3, r3, #1
    4dbe:	b2db      	uxtb	r3, r3
    4dc0:	2b00      	cmp	r3, #0
    4dc2:	d1e5      	bne.n	4d90 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    4dc4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4dc8:	2b00      	cmp	r3, #0
    4dca:	d005      	beq.n	4dd8 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4dcc:	9b01      	ldr	r3, [sp, #4]
    4dce:	681b      	ldr	r3, [r3, #0]
    4dd0:	4619      	mov	r1, r3
    4dd2:	2001      	movs	r0, #1
    4dd4:	f7fe ff3a 	bl	3c4c <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    4dd8:	2003      	movs	r0, #3
    4dda:	f7ff fd7f 	bl	48dc <SetInputSouceSytemClock>

                if (SircWasDisabled)
    4dde:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    4de2:	2b00      	cmp	r3, #0
    4de4:	d04f      	beq.n	4e86 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    4de6:	2002      	movs	r0, #2
    4de8:	f7ff fd26 	bl	4838 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    4dec:	e04b      	b.n	4e86 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    4dee:	4b29      	ldr	r3, [pc, #164]	; (4e94 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4df0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4df4:	4a27      	ldr	r2, [pc, #156]	; (4e94 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4df6:	f023 0301 	bic.w	r3, r3, #1
    4dfa:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    4dfe:	9b01      	ldr	r3, [sp, #4]
    4e00:	889b      	ldrh	r3, [r3, #4]
    4e02:	2b01      	cmp	r3, #1
    4e04:	d13f      	bne.n	4e86 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    4e06:	9b01      	ldr	r3, [sp, #4]
    4e08:	79db      	ldrb	r3, [r3, #7]
    4e0a:	4a22      	ldr	r2, [pc, #136]	; (4e94 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4e0c:	f003 0303 	and.w	r3, r3, #3
    4e10:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    4e14:	4b1f      	ldr	r3, [pc, #124]	; (4e94 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4e16:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    4e1a:	9b01      	ldr	r3, [sp, #4]
    4e1c:	799b      	ldrb	r3, [r3, #6]
    4e1e:	00db      	lsls	r3, r3, #3
    4e20:	f003 0308 	and.w	r3, r3, #8
    4e24:	4313      	orrs	r3, r2
    4e26:	4a1b      	ldr	r2, [pc, #108]	; (4e94 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4e28:	f043 0301 	orr.w	r3, r3, #1
    4e2c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4e30:	aa03      	add	r2, sp, #12
    4e32:	a904      	add	r1, sp, #16
    4e34:	a805      	add	r0, sp, #20
    4e36:	f24c 3350 	movw	r3, #50000	; 0xc350
    4e3a:	f7fe ff17 	bl	3c6c <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4e3e:	4b15      	ldr	r3, [pc, #84]	; (4e94 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4e40:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4e44:	0e1b      	lsrs	r3, r3, #24
    4e46:	f003 0301 	and.w	r3, r3, #1
    4e4a:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4e4c:	9a03      	ldr	r2, [sp, #12]
    4e4e:	a904      	add	r1, sp, #16
    4e50:	ab05      	add	r3, sp, #20
    4e52:	4618      	mov	r0, r3
    4e54:	f7fe ff24 	bl	3ca0 <Clock_Ip_TimeoutExpired>
    4e58:	4603      	mov	r3, r0
    4e5a:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4e5e:	9b06      	ldr	r3, [sp, #24]
    4e60:	2b00      	cmp	r3, #0
    4e62:	d106      	bne.n	4e72 <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    4e64:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4e68:	f083 0301 	eor.w	r3, r3, #1
    4e6c:	b2db      	uxtb	r3, r3
    4e6e:	2b00      	cmp	r3, #0
    4e70:	d1e5      	bne.n	4e3e <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    4e72:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4e76:	2b00      	cmp	r3, #0
    4e78:	d005      	beq.n	4e86 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4e7a:	9b01      	ldr	r3, [sp, #4]
    4e7c:	681b      	ldr	r3, [r3, #0]
    4e7e:	4619      	mov	r1, r3
    4e80:	2001      	movs	r0, #1
    4e82:	f7fe fee3 	bl	3c4c <Clock_Ip_ReportClockErrors>
}
    4e86:	bf00      	nop
    4e88:	b00b      	add	sp, #44	; 0x2c
    4e8a:	f85d fb04 	ldr.w	pc, [sp], #4
    4e8e:	bf00      	nop
    4e90:	000190e0 	.word	0x000190e0
    4e94:	40064000 	.word	0x40064000

00004e98 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4e98:	b500      	push	{lr}
    4e9a:	b089      	sub	sp, #36	; 0x24
    4e9c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4e9e:	2300      	movs	r3, #0
    4ea0:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    4ea4:	9b01      	ldr	r3, [sp, #4]
    4ea6:	889b      	ldrh	r3, [r3, #4]
    4ea8:	2b01      	cmp	r3, #1
    4eaa:	d132      	bne.n	4f12 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    4eac:	4b1b      	ldr	r3, [pc, #108]	; (4f1c <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4eae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4eb2:	4a1a      	ldr	r2, [pc, #104]	; (4f1c <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4eb4:	f043 0301 	orr.w	r3, r3, #1
    4eb8:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4ebc:	aa03      	add	r2, sp, #12
    4ebe:	a904      	add	r1, sp, #16
    4ec0:	a805      	add	r0, sp, #20
    4ec2:	f24c 3350 	movw	r3, #50000	; 0xc350
    4ec6:	f7fe fed1 	bl	3c6c <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4eca:	4b14      	ldr	r3, [pc, #80]	; (4f1c <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4ecc:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4ed0:	0e1b      	lsrs	r3, r3, #24
    4ed2:	f003 0301 	and.w	r3, r3, #1
    4ed6:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4ed8:	9a03      	ldr	r2, [sp, #12]
    4eda:	a904      	add	r1, sp, #16
    4edc:	ab05      	add	r3, sp, #20
    4ede:	4618      	mov	r0, r3
    4ee0:	f7fe fede 	bl	3ca0 <Clock_Ip_TimeoutExpired>
    4ee4:	4603      	mov	r3, r0
    4ee6:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4eea:	9b06      	ldr	r3, [sp, #24]
    4eec:	2b00      	cmp	r3, #0
    4eee:	d106      	bne.n	4efe <Clock_Ip_EnableFirc_TrustedCall+0x66>
    4ef0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4ef4:	f083 0301 	eor.w	r3, r3, #1
    4ef8:	b2db      	uxtb	r3, r3
    4efa:	2b00      	cmp	r3, #0
    4efc:	d1e5      	bne.n	4eca <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    4efe:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4f02:	2b00      	cmp	r3, #0
    4f04:	d005      	beq.n	4f12 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4f06:	9b01      	ldr	r3, [sp, #4]
    4f08:	681b      	ldr	r3, [r3, #0]
    4f0a:	4619      	mov	r1, r3
    4f0c:	2001      	movs	r0, #1
    4f0e:	f7fe fe9d 	bl	3c4c <Clock_Ip_ReportClockErrors>
        }
    }
}
    4f12:	bf00      	nop
    4f14:	b009      	add	sp, #36	; 0x24
    4f16:	f85d fb04 	ldr.w	pc, [sp], #4
    4f1a:	bf00      	nop
    4f1c:	40064000 	.word	0x40064000

00004f20 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    4f20:	b082      	sub	sp, #8
    4f22:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    4f24:	4b05      	ldr	r3, [pc, #20]	; (4f3c <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    4f26:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4f2a:	4a04      	ldr	r2, [pc, #16]	; (4f3c <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    4f2c:	f023 0301 	bic.w	r3, r3, #1
    4f30:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    4f34:	bf00      	nop
    4f36:	b002      	add	sp, #8
    4f38:	4770      	bx	lr
    4f3a:	bf00      	nop
    4f3c:	40064000 	.word	0x40064000

00004f40 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    4f40:	b082      	sub	sp, #8
    4f42:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4f44:	bf00      	nop
    4f46:	b002      	add	sp, #8
    4f48:	4770      	bx	lr

00004f4a <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    4f4a:	b082      	sub	sp, #8
    4f4c:	9001      	str	r0, [sp, #4]
    4f4e:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    4f50:	bf00      	nop
    4f52:	b002      	add	sp, #8
    4f54:	4770      	bx	lr

00004f56 <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    4f56:	b082      	sub	sp, #8
    4f58:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    4f5a:	bf00      	nop
    4f5c:	b002      	add	sp, #8
    4f5e:	4770      	bx	lr

00004f60 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    4f60:	b082      	sub	sp, #8
    4f62:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4f64:	bf00      	nop
    4f66:	b002      	add	sp, #8
    4f68:	4770      	bx	lr

00004f6a <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    4f6a:	b082      	sub	sp, #8
    4f6c:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    4f6e:	2302      	movs	r3, #2
}
    4f70:	4618      	mov	r0, r3
    4f72:	b002      	add	sp, #8
    4f74:	4770      	bx	lr

00004f76 <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    4f76:	b082      	sub	sp, #8
    4f78:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    4f7a:	bf00      	nop
    4f7c:	b002      	add	sp, #8
    4f7e:	4770      	bx	lr

00004f80 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    4f80:	b500      	push	{lr}
    4f82:	b083      	sub	sp, #12
    4f84:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4f86:	9b01      	ldr	r3, [sp, #4]
    4f88:	2b00      	cmp	r3, #0
    4f8a:	d002      	beq.n	4f92 <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    4f8c:	9801      	ldr	r0, [sp, #4]
    4f8e:	f000 f870 	bl	5072 <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4f92:	bf00      	nop
    4f94:	b003      	add	sp, #12
    4f96:	f85d fb04 	ldr.w	pc, [sp], #4

00004f9a <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    4f9a:	b500      	push	{lr}
    4f9c:	b083      	sub	sp, #12
    4f9e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4fa0:	9b01      	ldr	r3, [sp, #4]
    4fa2:	2b00      	cmp	r3, #0
    4fa4:	d002      	beq.n	4fac <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    4fa6:	9801      	ldr	r0, [sp, #4]
    4fa8:	f000 f89a 	bl	50e0 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4fac:	bf00      	nop
    4fae:	b003      	add	sp, #12
    4fb0:	f85d fb04 	ldr.w	pc, [sp], #4

00004fb4 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    4fb4:	b500      	push	{lr}
    4fb6:	b089      	sub	sp, #36	; 0x24
    4fb8:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    4fba:	2301      	movs	r3, #1
    4fbc:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    4fbe:	2300      	movs	r3, #0
    4fc0:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    4fc4:	4b1e      	ldr	r3, [pc, #120]	; (5040 <Clock_Ip_CompleteSpll+0x8c>)
    4fc6:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4fca:	f003 0301 	and.w	r3, r3, #1
    4fce:	2b00      	cmp	r3, #0
    4fd0:	d02f      	beq.n	5032 <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4fd2:	aa02      	add	r2, sp, #8
    4fd4:	a903      	add	r1, sp, #12
    4fd6:	a804      	add	r0, sp, #16
    4fd8:	f24c 3350 	movw	r3, #50000	; 0xc350
    4fdc:	f7fe fe46 	bl	3c6c <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    4fe0:	4b17      	ldr	r3, [pc, #92]	; (5040 <Clock_Ip_CompleteSpll+0x8c>)
    4fe2:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4fe6:	0e1b      	lsrs	r3, r3, #24
    4fe8:	f003 0301 	and.w	r3, r3, #1
    4fec:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4fee:	9a02      	ldr	r2, [sp, #8]
    4ff0:	a903      	add	r1, sp, #12
    4ff2:	ab04      	add	r3, sp, #16
    4ff4:	4618      	mov	r0, r3
    4ff6:	f7fe fe53 	bl	3ca0 <Clock_Ip_TimeoutExpired>
    4ffa:	4603      	mov	r3, r0
    4ffc:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    5000:	9b05      	ldr	r3, [sp, #20]
    5002:	2b00      	cmp	r3, #0
    5004:	d106      	bne.n	5014 <Clock_Ip_CompleteSpll+0x60>
    5006:	f89d 301b 	ldrb.w	r3, [sp, #27]
    500a:	f083 0301 	eor.w	r3, r3, #1
    500e:	b2db      	uxtb	r3, r3
    5010:	2b00      	cmp	r3, #0
    5012:	d1e5      	bne.n	4fe0 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    5014:	f89d 301b 	ldrb.w	r3, [sp, #27]
    5018:	f083 0301 	eor.w	r3, r3, #1
    501c:	b2db      	uxtb	r3, r3
    501e:	2b00      	cmp	r3, #0
    5020:	d002      	beq.n	5028 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    5022:	2302      	movs	r3, #2
    5024:	9307      	str	r3, [sp, #28]
    5026:	e006      	b.n	5036 <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    5028:	9901      	ldr	r1, [sp, #4]
    502a:	2001      	movs	r0, #1
    502c:	f7fe fe0e 	bl	3c4c <Clock_Ip_ReportClockErrors>
    5030:	e001      	b.n	5036 <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    5032:	2300      	movs	r3, #0
    5034:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    5036:	9b07      	ldr	r3, [sp, #28]
}
    5038:	4618      	mov	r0, r3
    503a:	b009      	add	sp, #36	; 0x24
    503c:	f85d fb04 	ldr.w	pc, [sp], #4
    5040:	40064000 	.word	0x40064000

00005044 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    5044:	b500      	push	{lr}
    5046:	b083      	sub	sp, #12
    5048:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    504a:	9801      	ldr	r0, [sp, #4]
    504c:	f000 f886 	bl	515c <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    5050:	bf00      	nop
    5052:	b003      	add	sp, #12
    5054:	f85d fb04 	ldr.w	pc, [sp], #4

00005058 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    5058:	b500      	push	{lr}
    505a:	b083      	sub	sp, #12
    505c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    505e:	9b01      	ldr	r3, [sp, #4]
    5060:	2b00      	cmp	r3, #0
    5062:	d002      	beq.n	506a <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    5064:	9801      	ldr	r0, [sp, #4]
    5066:	f000 f891 	bl	518c <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    506a:	bf00      	nop
    506c:	b003      	add	sp, #12
    506e:	f85d fb04 	ldr.w	pc, [sp], #4

00005072 <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    5072:	b082      	sub	sp, #8
    5074:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    5076:	4b19      	ldr	r3, [pc, #100]	; (50dc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    5078:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    507c:	4a17      	ldr	r2, [pc, #92]	; (50dc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    507e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    5082:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    5086:	4b15      	ldr	r3, [pc, #84]	; (50dc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    5088:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    508c:	4a13      	ldr	r2, [pc, #76]	; (50dc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    508e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    5092:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    5096:	4b11      	ldr	r3, [pc, #68]	; (50dc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    5098:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    509c:	4a0f      	ldr	r2, [pc, #60]	; (50dc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    509e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    50a2:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    50a6:	4b0d      	ldr	r3, [pc, #52]	; (50dc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    50a8:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    50ac:	4a0b      	ldr	r2, [pc, #44]	; (50dc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    50ae:	f023 0301 	bic.w	r3, r3, #1
    50b2:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    50b6:	4b09      	ldr	r3, [pc, #36]	; (50dc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    50b8:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    50bc:	4a07      	ldr	r2, [pc, #28]	; (50dc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    50be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    50c2:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    50c6:	4b05      	ldr	r3, [pc, #20]	; (50dc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    50c8:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    50cc:	4a03      	ldr	r2, [pc, #12]	; (50dc <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    50ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    50d2:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    50d6:	bf00      	nop
    50d8:	b002      	add	sp, #8
    50da:	4770      	bx	lr
    50dc:	40064000 	.word	0x40064000

000050e0 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    50e0:	b082      	sub	sp, #8
    50e2:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    50e4:	9b01      	ldr	r3, [sp, #4]
    50e6:	889b      	ldrh	r3, [r3, #4]
    50e8:	2b01      	cmp	r3, #1
    50ea:	d12f      	bne.n	514c <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    50ec:	4b1a      	ldr	r3, [pc, #104]	; (5158 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    50ee:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    50f2:	9b01      	ldr	r3, [sp, #4]
    50f4:	7b5b      	ldrb	r3, [r3, #13]
    50f6:	3b01      	subs	r3, #1
    50f8:	021b      	lsls	r3, r3, #8
    50fa:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    50fe:	9b01      	ldr	r3, [sp, #4]
    5100:	7d1b      	ldrb	r3, [r3, #20]
    5102:	3b10      	subs	r3, #16
    5104:	041b      	lsls	r3, r3, #16
    5106:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    510a:	430b      	orrs	r3, r1
    510c:	4912      	ldr	r1, [pc, #72]	; (5158 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    510e:	4313      	orrs	r3, r2
    5110:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    5114:	9b01      	ldr	r3, [sp, #4]
    5116:	7fdb      	ldrb	r3, [r3, #31]
    5118:	2b02      	cmp	r3, #2
    511a:	d011      	beq.n	5140 <Clock_Ip_SetSpll_TrustedCall+0x60>
    511c:	2b02      	cmp	r3, #2
    511e:	dc17      	bgt.n	5150 <Clock_Ip_SetSpll_TrustedCall+0x70>
    5120:	2b00      	cmp	r3, #0
    5122:	d002      	beq.n	512a <Clock_Ip_SetSpll_TrustedCall+0x4a>
    5124:	2b01      	cmp	r3, #1
    5126:	d005      	beq.n	5134 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    5128:	e012      	b.n	5150 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    512a:	4b0b      	ldr	r3, [pc, #44]	; (5158 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    512c:	2200      	movs	r2, #0
    512e:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    5132:	e00e      	b.n	5152 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    5134:	4b08      	ldr	r3, [pc, #32]	; (5158 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    5136:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    513a:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    513e:	e008      	b.n	5152 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    5140:	4b05      	ldr	r3, [pc, #20]	; (5158 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    5142:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    5146:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    514a:	e002      	b.n	5152 <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    514c:	bf00      	nop
    514e:	e000      	b.n	5152 <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    5150:	bf00      	nop
}
    5152:	bf00      	nop
    5154:	b002      	add	sp, #8
    5156:	4770      	bx	lr
    5158:	40064000 	.word	0x40064000

0000515c <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    515c:	b082      	sub	sp, #8
    515e:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    5160:	4b09      	ldr	r3, [pc, #36]	; (5188 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    5162:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    5166:	4a08      	ldr	r2, [pc, #32]	; (5188 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    5168:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    516c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    5170:	4b05      	ldr	r3, [pc, #20]	; (5188 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    5172:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    5176:	4a04      	ldr	r2, [pc, #16]	; (5188 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    5178:	f023 0301 	bic.w	r3, r3, #1
    517c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    5180:	bf00      	nop
    5182:	b002      	add	sp, #8
    5184:	4770      	bx	lr
    5186:	bf00      	nop
    5188:	40064000 	.word	0x40064000

0000518c <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    518c:	b082      	sub	sp, #8
    518e:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    5190:	9b01      	ldr	r3, [sp, #4]
    5192:	889b      	ldrh	r3, [r3, #4]
    5194:	2b01      	cmp	r3, #1
    5196:	d107      	bne.n	51a8 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    5198:	4b05      	ldr	r3, [pc, #20]	; (51b0 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    519a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    519e:	4a04      	ldr	r2, [pc, #16]	; (51b0 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    51a0:	f043 0301 	orr.w	r3, r3, #1
    51a4:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    51a8:	bf00      	nop
    51aa:	b002      	add	sp, #8
    51ac:	4770      	bx	lr
    51ae:	bf00      	nop
    51b0:	40064000 	.word	0x40064000

000051b4 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    51b4:	b082      	sub	sp, #8
    51b6:	9001      	str	r0, [sp, #4]
    51b8:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    51ba:	bf00      	nop
    51bc:	b002      	add	sp, #8
    51be:	4770      	bx	lr

000051c0 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    51c0:	b082      	sub	sp, #8
    51c2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    51c4:	bf00      	nop
    51c6:	b002      	add	sp, #8
    51c8:	4770      	bx	lr

000051ca <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    51ca:	b500      	push	{lr}
    51cc:	b083      	sub	sp, #12
    51ce:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    51d0:	9b01      	ldr	r3, [sp, #4]
    51d2:	2b00      	cmp	r3, #0
    51d4:	d002      	beq.n	51dc <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    51d6:	9801      	ldr	r0, [sp, #4]
    51d8:	f000 f8ee 	bl	53b8 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    51dc:	bf00      	nop
    51de:	b003      	add	sp, #12
    51e0:	f85d fb04 	ldr.w	pc, [sp], #4

000051e4 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    51e4:	b500      	push	{lr}
    51e6:	b083      	sub	sp, #12
    51e8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    51ea:	9b01      	ldr	r3, [sp, #4]
    51ec:	2b00      	cmp	r3, #0
    51ee:	d002      	beq.n	51f6 <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    51f0:	9801      	ldr	r0, [sp, #4]
    51f2:	f000 f8ff 	bl	53f4 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    51f6:	bf00      	nop
    51f8:	b003      	add	sp, #12
    51fa:	f85d fb04 	ldr.w	pc, [sp], #4

000051fe <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    51fe:	b500      	push	{lr}
    5200:	b083      	sub	sp, #12
    5202:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    5204:	9b01      	ldr	r3, [sp, #4]
    5206:	2b00      	cmp	r3, #0
    5208:	d002      	beq.n	5210 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    520a:	9801      	ldr	r0, [sp, #4]
    520c:	f000 f912 	bl	5434 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    5210:	bf00      	nop
    5212:	b003      	add	sp, #12
    5214:	f85d fb04 	ldr.w	pc, [sp], #4

00005218 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    5218:	b500      	push	{lr}
    521a:	b083      	sub	sp, #12
    521c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    521e:	9b01      	ldr	r3, [sp, #4]
    5220:	2b00      	cmp	r3, #0
    5222:	d002      	beq.n	522a <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    5224:	9801      	ldr	r0, [sp, #4]
    5226:	f000 f925 	bl	5474 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    522a:	bf00      	nop
    522c:	b003      	add	sp, #12
    522e:	f85d fb04 	ldr.w	pc, [sp], #4

00005232 <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    5232:	b500      	push	{lr}
    5234:	b083      	sub	sp, #12
    5236:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    5238:	9b01      	ldr	r3, [sp, #4]
    523a:	2b00      	cmp	r3, #0
    523c:	d002      	beq.n	5244 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    523e:	9801      	ldr	r0, [sp, #4]
    5240:	f000 f936 	bl	54b0 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    5244:	bf00      	nop
    5246:	b003      	add	sp, #12
    5248:	f85d fb04 	ldr.w	pc, [sp], #4

0000524c <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    524c:	b500      	push	{lr}
    524e:	b083      	sub	sp, #12
    5250:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    5252:	9b01      	ldr	r3, [sp, #4]
    5254:	2b00      	cmp	r3, #0
    5256:	d002      	beq.n	525e <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    5258:	9801      	ldr	r0, [sp, #4]
    525a:	f000 f949 	bl	54f0 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    525e:	bf00      	nop
    5260:	b003      	add	sp, #12
    5262:	f85d fb04 	ldr.w	pc, [sp], #4

00005266 <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    5266:	b500      	push	{lr}
    5268:	b083      	sub	sp, #12
    526a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    526c:	9b01      	ldr	r3, [sp, #4]
    526e:	2b00      	cmp	r3, #0
    5270:	d002      	beq.n	5278 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    5272:	9801      	ldr	r0, [sp, #4]
    5274:	f000 f958 	bl	5528 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    5278:	bf00      	nop
    527a:	b003      	add	sp, #12
    527c:	f85d fb04 	ldr.w	pc, [sp], #4

00005280 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    5280:	b500      	push	{lr}
    5282:	b083      	sub	sp, #12
    5284:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    5286:	9b01      	ldr	r3, [sp, #4]
    5288:	2b00      	cmp	r3, #0
    528a:	d002      	beq.n	5292 <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    528c:	9801      	ldr	r0, [sp, #4]
    528e:	f000 f969 	bl	5564 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    5292:	bf00      	nop
    5294:	b003      	add	sp, #12
    5296:	f85d fb04 	ldr.w	pc, [sp], #4

0000529a <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    529a:	b500      	push	{lr}
    529c:	b083      	sub	sp, #12
    529e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    52a0:	9b01      	ldr	r3, [sp, #4]
    52a2:	2b00      	cmp	r3, #0
    52a4:	d002      	beq.n	52ac <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    52a6:	9801      	ldr	r0, [sp, #4]
    52a8:	f000 f978 	bl	559c <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    52ac:	bf00      	nop
    52ae:	b003      	add	sp, #12
    52b0:	f85d fb04 	ldr.w	pc, [sp], #4

000052b4 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    52b4:	b500      	push	{lr}
    52b6:	b083      	sub	sp, #12
    52b8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    52ba:	9b01      	ldr	r3, [sp, #4]
    52bc:	2b00      	cmp	r3, #0
    52be:	d002      	beq.n	52c6 <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    52c0:	9801      	ldr	r0, [sp, #4]
    52c2:	f000 f989 	bl	55d8 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    52c6:	bf00      	nop
    52c8:	b003      	add	sp, #12
    52ca:	f85d fb04 	ldr.w	pc, [sp], #4

000052ce <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    52ce:	b500      	push	{lr}
    52d0:	b083      	sub	sp, #12
    52d2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    52d4:	9b01      	ldr	r3, [sp, #4]
    52d6:	2b00      	cmp	r3, #0
    52d8:	d002      	beq.n	52e0 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    52da:	9801      	ldr	r0, [sp, #4]
    52dc:	f000 f998 	bl	5610 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    52e0:	bf00      	nop
    52e2:	b003      	add	sp, #12
    52e4:	f85d fb04 	ldr.w	pc, [sp], #4

000052e8 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    52e8:	b500      	push	{lr}
    52ea:	b083      	sub	sp, #12
    52ec:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    52ee:	9b01      	ldr	r3, [sp, #4]
    52f0:	2b00      	cmp	r3, #0
    52f2:	d002      	beq.n	52fa <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    52f4:	9801      	ldr	r0, [sp, #4]
    52f6:	f000 f9a9 	bl	564c <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    52fa:	bf00      	nop
    52fc:	b003      	add	sp, #12
    52fe:	f85d fb04 	ldr.w	pc, [sp], #4

00005302 <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    5302:	b500      	push	{lr}
    5304:	b083      	sub	sp, #12
    5306:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    5308:	9b01      	ldr	r3, [sp, #4]
    530a:	2b00      	cmp	r3, #0
    530c:	d002      	beq.n	5314 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    530e:	9801      	ldr	r0, [sp, #4]
    5310:	f000 f9e6 	bl	56e0 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    5314:	bf00      	nop
    5316:	b003      	add	sp, #12
    5318:	f85d fb04 	ldr.w	pc, [sp], #4

0000531c <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    531c:	b500      	push	{lr}
    531e:	b083      	sub	sp, #12
    5320:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    5322:	9b01      	ldr	r3, [sp, #4]
    5324:	2b00      	cmp	r3, #0
    5326:	d002      	beq.n	532e <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    5328:	9801      	ldr	r0, [sp, #4]
    532a:	f000 fa25 	bl	5778 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    532e:	bf00      	nop
    5330:	b003      	add	sp, #12
    5332:	f85d fb04 	ldr.w	pc, [sp], #4

00005336 <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    5336:	b500      	push	{lr}
    5338:	b083      	sub	sp, #12
    533a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    533c:	9b01      	ldr	r3, [sp, #4]
    533e:	2b00      	cmp	r3, #0
    5340:	d002      	beq.n	5348 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    5342:	9801      	ldr	r0, [sp, #4]
    5344:	f000 fa2a 	bl	579c <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    5348:	bf00      	nop
    534a:	b003      	add	sp, #12
    534c:	f85d fb04 	ldr.w	pc, [sp], #4

00005350 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    5350:	b500      	push	{lr}
    5352:	b083      	sub	sp, #12
    5354:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    5356:	9b01      	ldr	r3, [sp, #4]
    5358:	2b00      	cmp	r3, #0
    535a:	d002      	beq.n	5362 <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    535c:	9801      	ldr	r0, [sp, #4]
    535e:	f000 fa3b 	bl	57d8 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    5362:	bf00      	nop
    5364:	b003      	add	sp, #12
    5366:	f85d fb04 	ldr.w	pc, [sp], #4

0000536a <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    536a:	b500      	push	{lr}
    536c:	b083      	sub	sp, #12
    536e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    5370:	9b01      	ldr	r3, [sp, #4]
    5372:	2b00      	cmp	r3, #0
    5374:	d002      	beq.n	537c <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    5376:	9801      	ldr	r0, [sp, #4]
    5378:	f000 fa56 	bl	5828 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    537c:	bf00      	nop
    537e:	b003      	add	sp, #12
    5380:	f85d fb04 	ldr.w	pc, [sp], #4

00005384 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    5384:	b500      	push	{lr}
    5386:	b083      	sub	sp, #12
    5388:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    538a:	9b01      	ldr	r3, [sp, #4]
    538c:	2b00      	cmp	r3, #0
    538e:	d002      	beq.n	5396 <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    5390:	9801      	ldr	r0, [sp, #4]
    5392:	f000 fa79 	bl	5888 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    5396:	bf00      	nop
    5398:	b003      	add	sp, #12
    539a:	f85d fb04 	ldr.w	pc, [sp], #4

0000539e <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    539e:	b500      	push	{lr}
    53a0:	b083      	sub	sp, #12
    53a2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    53a4:	9b01      	ldr	r3, [sp, #4]
    53a6:	2b00      	cmp	r3, #0
    53a8:	d002      	beq.n	53b0 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    53aa:	9801      	ldr	r0, [sp, #4]
    53ac:	f000 fa8a 	bl	58c4 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    53b0:	bf00      	nop
    53b2:	b003      	add	sp, #12
    53b4:	f85d fb04 	ldr.w	pc, [sp], #4

000053b8 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    53b8:	b084      	sub	sp, #16
    53ba:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    53bc:	4b0b      	ldr	r3, [pc, #44]	; (53ec <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    53be:	795b      	ldrb	r3, [r3, #5]
    53c0:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    53c2:	4b0b      	ldr	r3, [pc, #44]	; (53f0 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    53c4:	695b      	ldr	r3, [r3, #20]
    53c6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    53c8:	9b02      	ldr	r3, [sp, #8]
    53ca:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    53ce:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    53d0:	9b03      	ldr	r3, [sp, #12]
    53d2:	061b      	lsls	r3, r3, #24
    53d4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    53d8:	9a02      	ldr	r2, [sp, #8]
    53da:	4313      	orrs	r3, r2
    53dc:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    53de:	4a04      	ldr	r2, [pc, #16]	; (53f0 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    53e0:	9b02      	ldr	r3, [sp, #8]
    53e2:	6153      	str	r3, [r2, #20]
}
    53e4:	bf00      	nop
    53e6:	b004      	add	sp, #16
    53e8:	4770      	bx	lr
    53ea:	bf00      	nop
    53ec:	00019448 	.word	0x00019448
    53f0:	40064000 	.word	0x40064000

000053f4 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    53f4:	b084      	sub	sp, #16
    53f6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    53f8:	9b01      	ldr	r3, [sp, #4]
    53fa:	685b      	ldr	r3, [r3, #4]
    53fc:	4a0b      	ldr	r2, [pc, #44]	; (542c <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    53fe:	5cd3      	ldrb	r3, [r2, r3]
    5400:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    5402:	4b0b      	ldr	r3, [pc, #44]	; (5430 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    5404:	695b      	ldr	r3, [r3, #20]
    5406:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    5408:	9b02      	ldr	r3, [sp, #8]
    540a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    540e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    5410:	9b03      	ldr	r3, [sp, #12]
    5412:	061b      	lsls	r3, r3, #24
    5414:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    5418:	9a02      	ldr	r2, [sp, #8]
    541a:	4313      	orrs	r3, r2
    541c:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    541e:	4a04      	ldr	r2, [pc, #16]	; (5430 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    5420:	9b02      	ldr	r3, [sp, #8]
    5422:	6153      	str	r3, [r2, #20]
}
    5424:	bf00      	nop
    5426:	b004      	add	sp, #16
    5428:	4770      	bx	lr
    542a:	bf00      	nop
    542c:	00019448 	.word	0x00019448
    5430:	40064000 	.word	0x40064000

00005434 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5434:	b084      	sub	sp, #16
    5436:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5438:	9b01      	ldr	r3, [sp, #4]
    543a:	685b      	ldr	r3, [r3, #4]
    543c:	4a0b      	ldr	r2, [pc, #44]	; (546c <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    543e:	5cd3      	ldrb	r3, [r2, r3]
    5440:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    5442:	4b0b      	ldr	r3, [pc, #44]	; (5470 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    5444:	699b      	ldr	r3, [r3, #24]
    5446:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    5448:	9b02      	ldr	r3, [sp, #8]
    544a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    544e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    5450:	9b03      	ldr	r3, [sp, #12]
    5452:	061b      	lsls	r3, r3, #24
    5454:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    5458:	9a02      	ldr	r2, [sp, #8]
    545a:	4313      	orrs	r3, r2
    545c:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    545e:	4a04      	ldr	r2, [pc, #16]	; (5470 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    5460:	9b02      	ldr	r3, [sp, #8]
    5462:	6193      	str	r3, [r2, #24]
}
    5464:	bf00      	nop
    5466:	b004      	add	sp, #16
    5468:	4770      	bx	lr
    546a:	bf00      	nop
    546c:	00019448 	.word	0x00019448
    5470:	40064000 	.word	0x40064000

00005474 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5474:	b084      	sub	sp, #16
    5476:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5478:	4b0b      	ldr	r3, [pc, #44]	; (54a8 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    547a:	795b      	ldrb	r3, [r3, #5]
    547c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    547e:	4b0b      	ldr	r3, [pc, #44]	; (54ac <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    5480:	69db      	ldr	r3, [r3, #28]
    5482:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    5484:	9b02      	ldr	r3, [sp, #8]
    5486:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    548a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    548c:	9b03      	ldr	r3, [sp, #12]
    548e:	061b      	lsls	r3, r3, #24
    5490:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    5494:	9a02      	ldr	r2, [sp, #8]
    5496:	4313      	orrs	r3, r2
    5498:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    549a:	4a04      	ldr	r2, [pc, #16]	; (54ac <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    549c:	9b02      	ldr	r3, [sp, #8]
    549e:	61d3      	str	r3, [r2, #28]
}
    54a0:	bf00      	nop
    54a2:	b004      	add	sp, #16
    54a4:	4770      	bx	lr
    54a6:	bf00      	nop
    54a8:	00019448 	.word	0x00019448
    54ac:	40064000 	.word	0x40064000

000054b0 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    54b0:	b084      	sub	sp, #16
    54b2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    54b4:	9b01      	ldr	r3, [sp, #4]
    54b6:	685b      	ldr	r3, [r3, #4]
    54b8:	4a0b      	ldr	r2, [pc, #44]	; (54e8 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    54ba:	5cd3      	ldrb	r3, [r2, r3]
    54bc:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    54be:	4b0b      	ldr	r3, [pc, #44]	; (54ec <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    54c0:	69db      	ldr	r3, [r3, #28]
    54c2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    54c4:	9b02      	ldr	r3, [sp, #8]
    54c6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    54ca:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    54cc:	9b03      	ldr	r3, [sp, #12]
    54ce:	061b      	lsls	r3, r3, #24
    54d0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    54d4:	9a02      	ldr	r2, [sp, #8]
    54d6:	4313      	orrs	r3, r2
    54d8:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    54da:	4a04      	ldr	r2, [pc, #16]	; (54ec <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    54dc:	9b02      	ldr	r3, [sp, #8]
    54de:	61d3      	str	r3, [r2, #28]
}
    54e0:	bf00      	nop
    54e2:	b004      	add	sp, #16
    54e4:	4770      	bx	lr
    54e6:	bf00      	nop
    54e8:	00019448 	.word	0x00019448
    54ec:	40064000 	.word	0x40064000

000054f0 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    54f0:	b084      	sub	sp, #16
    54f2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    54f4:	4b0a      	ldr	r3, [pc, #40]	; (5520 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    54f6:	7b9b      	ldrb	r3, [r3, #14]
    54f8:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    54fa:	4b0a      	ldr	r3, [pc, #40]	; (5524 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    54fc:	691b      	ldr	r3, [r3, #16]
    54fe:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    5500:	9b02      	ldr	r3, [sp, #8]
    5502:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    5506:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    5508:	9b03      	ldr	r3, [sp, #12]
    550a:	011b      	lsls	r3, r3, #4
    550c:	9a02      	ldr	r2, [sp, #8]
    550e:	4313      	orrs	r3, r2
    5510:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    5512:	4a04      	ldr	r2, [pc, #16]	; (5524 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    5514:	9b02      	ldr	r3, [sp, #8]
    5516:	6113      	str	r3, [r2, #16]
}
    5518:	bf00      	nop
    551a:	b004      	add	sp, #16
    551c:	4770      	bx	lr
    551e:	bf00      	nop
    5520:	000193f0 	.word	0x000193f0
    5524:	40048000 	.word	0x40048000

00005528 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5528:	b084      	sub	sp, #16
    552a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    552c:	9b01      	ldr	r3, [sp, #4]
    552e:	685b      	ldr	r3, [r3, #4]
    5530:	4a0a      	ldr	r2, [pc, #40]	; (555c <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    5532:	5cd3      	ldrb	r3, [r2, r3]
    5534:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    5536:	4b0a      	ldr	r3, [pc, #40]	; (5560 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    5538:	691b      	ldr	r3, [r3, #16]
    553a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    553c:	9b02      	ldr	r3, [sp, #8]
    553e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    5542:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    5544:	9b03      	ldr	r3, [sp, #12]
    5546:	011b      	lsls	r3, r3, #4
    5548:	9a02      	ldr	r2, [sp, #8]
    554a:	4313      	orrs	r3, r2
    554c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    554e:	4a04      	ldr	r2, [pc, #16]	; (5560 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    5550:	9b02      	ldr	r3, [sp, #8]
    5552:	6113      	str	r3, [r2, #16]
}
    5554:	bf00      	nop
    5556:	b004      	add	sp, #16
    5558:	4770      	bx	lr
    555a:	bf00      	nop
    555c:	000193f0 	.word	0x000193f0
    5560:	40048000 	.word	0x40048000

00005564 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5564:	b084      	sub	sp, #16
    5566:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5568:	4b0a      	ldr	r3, [pc, #40]	; (5594 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    556a:	785b      	ldrb	r3, [r3, #1]
    556c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    556e:	4b0a      	ldr	r3, [pc, #40]	; (5598 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    5570:	691b      	ldr	r3, [r3, #16]
    5572:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    5574:	9b02      	ldr	r3, [sp, #8]
    5576:	f023 030c 	bic.w	r3, r3, #12
    557a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    557c:	9b03      	ldr	r3, [sp, #12]
    557e:	009b      	lsls	r3, r3, #2
    5580:	9a02      	ldr	r2, [sp, #8]
    5582:	4313      	orrs	r3, r2
    5584:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    5586:	4a04      	ldr	r2, [pc, #16]	; (5598 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    5588:	9b02      	ldr	r3, [sp, #8]
    558a:	6113      	str	r3, [r2, #16]
}
    558c:	bf00      	nop
    558e:	b004      	add	sp, #16
    5590:	4770      	bx	lr
    5592:	bf00      	nop
    5594:	000194a8 	.word	0x000194a8
    5598:	40048000 	.word	0x40048000

0000559c <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    559c:	b084      	sub	sp, #16
    559e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    55a0:	9b01      	ldr	r3, [sp, #4]
    55a2:	685b      	ldr	r3, [r3, #4]
    55a4:	4a0a      	ldr	r2, [pc, #40]	; (55d0 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    55a6:	5cd3      	ldrb	r3, [r2, r3]
    55a8:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    55aa:	4b0a      	ldr	r3, [pc, #40]	; (55d4 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    55ac:	691b      	ldr	r3, [r3, #16]
    55ae:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    55b0:	9b02      	ldr	r3, [sp, #8]
    55b2:	f023 030c 	bic.w	r3, r3, #12
    55b6:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    55b8:	9b03      	ldr	r3, [sp, #12]
    55ba:	009b      	lsls	r3, r3, #2
    55bc:	9a02      	ldr	r2, [sp, #8]
    55be:	4313      	orrs	r3, r2
    55c0:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    55c2:	4a04      	ldr	r2, [pc, #16]	; (55d4 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    55c4:	9b02      	ldr	r3, [sp, #8]
    55c6:	6113      	str	r3, [r2, #16]
}
    55c8:	bf00      	nop
    55ca:	b004      	add	sp, #16
    55cc:	4770      	bx	lr
    55ce:	bf00      	nop
    55d0:	000194a8 	.word	0x000194a8
    55d4:	40048000 	.word	0x40048000

000055d8 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    55d8:	b084      	sub	sp, #16
    55da:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    55dc:	4b0a      	ldr	r3, [pc, #40]	; (5608 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    55de:	795b      	ldrb	r3, [r3, #5]
    55e0:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    55e2:	4b0a      	ldr	r3, [pc, #40]	; (560c <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    55e4:	6a1b      	ldr	r3, [r3, #32]
    55e6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    55e8:	9b02      	ldr	r3, [sp, #8]
    55ea:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    55ee:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    55f0:	9b03      	ldr	r3, [sp, #12]
    55f2:	061b      	lsls	r3, r3, #24
    55f4:	9a02      	ldr	r2, [sp, #8]
    55f6:	4313      	orrs	r3, r2
    55f8:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    55fa:	4a04      	ldr	r2, [pc, #16]	; (560c <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    55fc:	9b02      	ldr	r3, [sp, #8]
    55fe:	6213      	str	r3, [r2, #32]
}
    5600:	bf00      	nop
    5602:	b004      	add	sp, #16
    5604:	4770      	bx	lr
    5606:	bf00      	nop
    5608:	00019448 	.word	0x00019448
    560c:	40064000 	.word	0x40064000

00005610 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5610:	b084      	sub	sp, #16
    5612:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5614:	9b01      	ldr	r3, [sp, #4]
    5616:	685b      	ldr	r3, [r3, #4]
    5618:	4a0a      	ldr	r2, [pc, #40]	; (5644 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    561a:	5cd3      	ldrb	r3, [r2, r3]
    561c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    561e:	4b0a      	ldr	r3, [pc, #40]	; (5648 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    5620:	6a1b      	ldr	r3, [r3, #32]
    5622:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    5624:	9b02      	ldr	r3, [sp, #8]
    5626:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    562a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    562c:	9b03      	ldr	r3, [sp, #12]
    562e:	061b      	lsls	r3, r3, #24
    5630:	9a02      	ldr	r2, [sp, #8]
    5632:	4313      	orrs	r3, r2
    5634:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    5636:	4a04      	ldr	r2, [pc, #16]	; (5648 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    5638:	9b02      	ldr	r3, [sp, #8]
    563a:	6213      	str	r3, [r2, #32]
}
    563c:	bf00      	nop
    563e:	b004      	add	sp, #16
    5640:	4770      	bx	lr
    5642:	bf00      	nop
    5644:	00019448 	.word	0x00019448
    5648:	40064000 	.word	0x40064000

0000564c <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    564c:	b086      	sub	sp, #24
    564e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5650:	4b20      	ldr	r3, [pc, #128]	; (56d4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    5652:	795b      	ldrb	r3, [r3, #5]
    5654:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    5656:	9b01      	ldr	r3, [sp, #4]
    5658:	681a      	ldr	r2, [r3, #0]
    565a:	491f      	ldr	r1, [pc, #124]	; (56d8 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    565c:	4613      	mov	r3, r2
    565e:	00db      	lsls	r3, r3, #3
    5660:	4413      	add	r3, r2
    5662:	440b      	add	r3, r1
    5664:	781b      	ldrb	r3, [r3, #0]
    5666:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    5668:	4b1c      	ldr	r3, [pc, #112]	; (56dc <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    566a:	68db      	ldr	r3, [r3, #12]
    566c:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    566e:	9b03      	ldr	r3, [sp, #12]
    5670:	2b03      	cmp	r3, #3
    5672:	d813      	bhi.n	569c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    5674:	9b03      	ldr	r3, [sp, #12]
    5676:	005b      	lsls	r3, r3, #1
    5678:	3318      	adds	r3, #24
    567a:	2203      	movs	r2, #3
    567c:	fa02 f303 	lsl.w	r3, r2, r3
    5680:	43db      	mvns	r3, r3
    5682:	9a05      	ldr	r2, [sp, #20]
    5684:	4013      	ands	r3, r2
    5686:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    5688:	9b03      	ldr	r3, [sp, #12]
    568a:	005b      	lsls	r3, r3, #1
    568c:	3318      	adds	r3, #24
    568e:	9a04      	ldr	r2, [sp, #16]
    5690:	fa02 f303 	lsl.w	r3, r2, r3
    5694:	9a05      	ldr	r2, [sp, #20]
    5696:	4313      	orrs	r3, r2
    5698:	9305      	str	r3, [sp, #20]
    569a:	e014      	b.n	56c6 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    569c:	9b03      	ldr	r3, [sp, #12]
    569e:	3b04      	subs	r3, #4
    56a0:	005b      	lsls	r3, r3, #1
    56a2:	3310      	adds	r3, #16
    56a4:	2203      	movs	r2, #3
    56a6:	fa02 f303 	lsl.w	r3, r2, r3
    56aa:	43db      	mvns	r3, r3
    56ac:	9a05      	ldr	r2, [sp, #20]
    56ae:	4013      	ands	r3, r2
    56b0:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    56b2:	9b03      	ldr	r3, [sp, #12]
    56b4:	3b04      	subs	r3, #4
    56b6:	005b      	lsls	r3, r3, #1
    56b8:	3310      	adds	r3, #16
    56ba:	9a04      	ldr	r2, [sp, #16]
    56bc:	fa02 f303 	lsl.w	r3, r2, r3
    56c0:	9a05      	ldr	r2, [sp, #20]
    56c2:	4313      	orrs	r3, r2
    56c4:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    56c6:	4a05      	ldr	r2, [pc, #20]	; (56dc <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    56c8:	9b05      	ldr	r3, [sp, #20]
    56ca:	60d3      	str	r3, [r2, #12]
}
    56cc:	bf00      	nop
    56ce:	b006      	add	sp, #24
    56d0:	4770      	bx	lr
    56d2:	bf00      	nop
    56d4:	000193f0 	.word	0x000193f0
    56d8:	000190e0 	.word	0x000190e0
    56dc:	40048000 	.word	0x40048000

000056e0 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    56e0:	b086      	sub	sp, #24
    56e2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    56e4:	9b01      	ldr	r3, [sp, #4]
    56e6:	685b      	ldr	r3, [r3, #4]
    56e8:	4a20      	ldr	r2, [pc, #128]	; (576c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    56ea:	5cd3      	ldrb	r3, [r2, r3]
    56ec:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    56ee:	9b01      	ldr	r3, [sp, #4]
    56f0:	681a      	ldr	r2, [r3, #0]
    56f2:	491f      	ldr	r1, [pc, #124]	; (5770 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    56f4:	4613      	mov	r3, r2
    56f6:	00db      	lsls	r3, r3, #3
    56f8:	4413      	add	r3, r2
    56fa:	440b      	add	r3, r1
    56fc:	781b      	ldrb	r3, [r3, #0]
    56fe:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    5700:	4b1c      	ldr	r3, [pc, #112]	; (5774 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    5702:	68db      	ldr	r3, [r3, #12]
    5704:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    5706:	9b03      	ldr	r3, [sp, #12]
    5708:	2b03      	cmp	r3, #3
    570a:	d813      	bhi.n	5734 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    570c:	9b03      	ldr	r3, [sp, #12]
    570e:	005b      	lsls	r3, r3, #1
    5710:	3318      	adds	r3, #24
    5712:	2203      	movs	r2, #3
    5714:	fa02 f303 	lsl.w	r3, r2, r3
    5718:	43db      	mvns	r3, r3
    571a:	9a05      	ldr	r2, [sp, #20]
    571c:	4013      	ands	r3, r2
    571e:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    5720:	9b03      	ldr	r3, [sp, #12]
    5722:	005b      	lsls	r3, r3, #1
    5724:	3318      	adds	r3, #24
    5726:	9a04      	ldr	r2, [sp, #16]
    5728:	fa02 f303 	lsl.w	r3, r2, r3
    572c:	9a05      	ldr	r2, [sp, #20]
    572e:	4313      	orrs	r3, r2
    5730:	9305      	str	r3, [sp, #20]
    5732:	e014      	b.n	575e <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    5734:	9b03      	ldr	r3, [sp, #12]
    5736:	3b04      	subs	r3, #4
    5738:	005b      	lsls	r3, r3, #1
    573a:	3310      	adds	r3, #16
    573c:	2203      	movs	r2, #3
    573e:	fa02 f303 	lsl.w	r3, r2, r3
    5742:	43db      	mvns	r3, r3
    5744:	9a05      	ldr	r2, [sp, #20]
    5746:	4013      	ands	r3, r2
    5748:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    574a:	9b03      	ldr	r3, [sp, #12]
    574c:	3b04      	subs	r3, #4
    574e:	005b      	lsls	r3, r3, #1
    5750:	3310      	adds	r3, #16
    5752:	9a04      	ldr	r2, [sp, #16]
    5754:	fa02 f303 	lsl.w	r3, r2, r3
    5758:	9a05      	ldr	r2, [sp, #20]
    575a:	4313      	orrs	r3, r2
    575c:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    575e:	4a05      	ldr	r2, [pc, #20]	; (5774 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    5760:	9b05      	ldr	r3, [sp, #20]
    5762:	60d3      	str	r3, [r2, #12]
}
    5764:	bf00      	nop
    5766:	b006      	add	sp, #24
    5768:	4770      	bx	lr
    576a:	bf00      	nop
    576c:	000193f0 	.word	0x000193f0
    5770:	000190e0 	.word	0x000190e0
    5774:	40048000 	.word	0x40048000

00005778 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5778:	b084      	sub	sp, #16
    577a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    577c:	4b06      	ldr	r3, [pc, #24]	; (5798 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    577e:	685b      	ldr	r3, [r3, #4]
    5780:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    5782:	9b03      	ldr	r3, [sp, #12]
    5784:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    5788:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    578a:	4a03      	ldr	r2, [pc, #12]	; (5798 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    578c:	9b03      	ldr	r3, [sp, #12]
    578e:	6053      	str	r3, [r2, #4]
}
    5790:	bf00      	nop
    5792:	b004      	add	sp, #16
    5794:	4770      	bx	lr
    5796:	bf00      	nop
    5798:	40048000 	.word	0x40048000

0000579c <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    579c:	b084      	sub	sp, #16
    579e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    57a0:	9b01      	ldr	r3, [sp, #4]
    57a2:	685b      	ldr	r3, [r3, #4]
    57a4:	4a0a      	ldr	r2, [pc, #40]	; (57d0 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    57a6:	5cd3      	ldrb	r3, [r2, r3]
    57a8:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    57aa:	4b0a      	ldr	r3, [pc, #40]	; (57d4 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    57ac:	685b      	ldr	r3, [r3, #4]
    57ae:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    57b0:	9b02      	ldr	r3, [sp, #8]
    57b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    57b6:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    57b8:	9b03      	ldr	r3, [sp, #12]
    57ba:	011b      	lsls	r3, r3, #4
    57bc:	9a02      	ldr	r2, [sp, #8]
    57be:	4313      	orrs	r3, r2
    57c0:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    57c2:	4a04      	ldr	r2, [pc, #16]	; (57d4 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    57c4:	9b02      	ldr	r3, [sp, #8]
    57c6:	6053      	str	r3, [r2, #4]
}
    57c8:	bf00      	nop
    57ca:	b004      	add	sp, #16
    57cc:	4770      	bx	lr
    57ce:	bf00      	nop
    57d0:	000193f0 	.word	0x000193f0
    57d4:	40048000 	.word	0x40048000

000057d8 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    57d8:	b084      	sub	sp, #16
    57da:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    57dc:	9b01      	ldr	r3, [sp, #4]
    57de:	681a      	ldr	r2, [r3, #0]
    57e0:	490f      	ldr	r1, [pc, #60]	; (5820 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    57e2:	4613      	mov	r3, r2
    57e4:	00db      	lsls	r3, r3, #3
    57e6:	4413      	add	r3, r2
    57e8:	440b      	add	r3, r1
    57ea:	3304      	adds	r3, #4
    57ec:	781b      	ldrb	r3, [r3, #0]
    57ee:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    57f0:	4a0c      	ldr	r2, [pc, #48]	; (5824 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    57f2:	9b03      	ldr	r3, [sp, #12]
    57f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    57f8:	490a      	ldr	r1, [pc, #40]	; (5824 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    57fa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    57fe:	9b03      	ldr	r3, [sp, #12]
    5800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    5804:	4a07      	ldr	r2, [pc, #28]	; (5824 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    5806:	9b03      	ldr	r3, [sp, #12]
    5808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    580c:	4905      	ldr	r1, [pc, #20]	; (5824 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    580e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    5812:	9b03      	ldr	r3, [sp, #12]
    5814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5818:	bf00      	nop
    581a:	b004      	add	sp, #16
    581c:	4770      	bx	lr
    581e:	bf00      	nop
    5820:	000190e0 	.word	0x000190e0
    5824:	40065000 	.word	0x40065000

00005828 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5828:	b086      	sub	sp, #24
    582a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    582c:	9b01      	ldr	r3, [sp, #4]
    582e:	681a      	ldr	r2, [r3, #0]
    5830:	4912      	ldr	r1, [pc, #72]	; (587c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    5832:	4613      	mov	r3, r2
    5834:	00db      	lsls	r3, r3, #3
    5836:	4413      	add	r3, r2
    5838:	440b      	add	r3, r1
    583a:	3304      	adds	r3, #4
    583c:	781b      	ldrb	r3, [r3, #0]
    583e:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5840:	9b01      	ldr	r3, [sp, #4]
    5842:	685b      	ldr	r3, [r3, #4]
    5844:	4a0e      	ldr	r2, [pc, #56]	; (5880 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    5846:	5cd3      	ldrb	r3, [r2, r3]
    5848:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    584a:	4a0e      	ldr	r2, [pc, #56]	; (5884 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    584c:	9b05      	ldr	r3, [sp, #20]
    584e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5852:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    5854:	9b03      	ldr	r3, [sp, #12]
    5856:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    585a:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    585c:	9b04      	ldr	r3, [sp, #16]
    585e:	061b      	lsls	r3, r3, #24
    5860:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    5864:	9a03      	ldr	r2, [sp, #12]
    5866:	4313      	orrs	r3, r2
    5868:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    586a:	4906      	ldr	r1, [pc, #24]	; (5884 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    586c:	9b05      	ldr	r3, [sp, #20]
    586e:	9a03      	ldr	r2, [sp, #12]
    5870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5874:	bf00      	nop
    5876:	b006      	add	sp, #24
    5878:	4770      	bx	lr
    587a:	bf00      	nop
    587c:	000190e0 	.word	0x000190e0
    5880:	00019478 	.word	0x00019478
    5884:	40065000 	.word	0x40065000

00005888 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5888:	b084      	sub	sp, #16
    588a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    588c:	4b0b      	ldr	r3, [pc, #44]	; (58bc <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    588e:	7f1b      	ldrb	r3, [r3, #28]
    5890:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    5892:	4b0b      	ldr	r3, [pc, #44]	; (58c0 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    5894:	685b      	ldr	r3, [r3, #4]
    5896:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    5898:	9b02      	ldr	r3, [sp, #8]
    589a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    589e:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    58a0:	9b03      	ldr	r3, [sp, #12]
    58a2:	031b      	lsls	r3, r3, #12
    58a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    58a8:	9a02      	ldr	r2, [sp, #8]
    58aa:	4313      	orrs	r3, r2
    58ac:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    58ae:	4a04      	ldr	r2, [pc, #16]	; (58c0 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    58b0:	9b02      	ldr	r3, [sp, #8]
    58b2:	6053      	str	r3, [r2, #4]
}
    58b4:	bf00      	nop
    58b6:	b004      	add	sp, #16
    58b8:	4770      	bx	lr
    58ba:	bf00      	nop
    58bc:	000193f0 	.word	0x000193f0
    58c0:	40048000 	.word	0x40048000

000058c4 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    58c4:	b084      	sub	sp, #16
    58c6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    58c8:	9b01      	ldr	r3, [sp, #4]
    58ca:	685b      	ldr	r3, [r3, #4]
    58cc:	4a0b      	ldr	r2, [pc, #44]	; (58fc <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    58ce:	5cd3      	ldrb	r3, [r2, r3]
    58d0:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    58d2:	4b0b      	ldr	r3, [pc, #44]	; (5900 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    58d4:	685b      	ldr	r3, [r3, #4]
    58d6:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    58d8:	9b02      	ldr	r3, [sp, #8]
    58da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    58de:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    58e0:	9b03      	ldr	r3, [sp, #12]
    58e2:	031b      	lsls	r3, r3, #12
    58e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    58e8:	9a02      	ldr	r2, [sp, #8]
    58ea:	4313      	orrs	r3, r2
    58ec:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    58ee:	4a04      	ldr	r2, [pc, #16]	; (5900 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    58f0:	9b02      	ldr	r3, [sp, #8]
    58f2:	6053      	str	r3, [r2, #4]
}
    58f4:	bf00      	nop
    58f6:	b004      	add	sp, #16
    58f8:	4770      	bx	lr
    58fa:	bf00      	nop
    58fc:	000193f0 	.word	0x000193f0
    5900:	40048000 	.word	0x40048000

00005904 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    5904:	b500      	push	{lr}
    5906:	b085      	sub	sp, #20
    5908:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    590a:	2300      	movs	r3, #0
    590c:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    5910:	9b01      	ldr	r3, [sp, #4]
    5912:	2b00      	cmp	r3, #0
    5914:	d037      	beq.n	5986 <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    5916:	2300      	movs	r3, #0
    5918:	9303      	str	r3, [sp, #12]
    591a:	e02b      	b.n	5974 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    591c:	4b29      	ldr	r3, [pc, #164]	; (59c4 <DisableSafeClock+0xc0>)
    591e:	6819      	ldr	r1, [r3, #0]
    5920:	9a03      	ldr	r2, [sp, #12]
    5922:	4613      	mov	r3, r2
    5924:	005b      	lsls	r3, r3, #1
    5926:	4413      	add	r3, r2
    5928:	009b      	lsls	r3, r3, #2
    592a:	440b      	add	r3, r1
    592c:	3314      	adds	r3, #20
    592e:	681b      	ldr	r3, [r3, #0]
    5930:	2b05      	cmp	r3, #5
    5932:	d11c      	bne.n	596e <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    5934:	2301      	movs	r3, #1
    5936:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    593a:	4b22      	ldr	r3, [pc, #136]	; (59c4 <DisableSafeClock+0xc0>)
    593c:	6819      	ldr	r1, [r3, #0]
    593e:	9a03      	ldr	r2, [sp, #12]
    5940:	4613      	mov	r3, r2
    5942:	005b      	lsls	r3, r3, #1
    5944:	4413      	add	r3, r2
    5946:	009b      	lsls	r3, r3, #2
    5948:	440b      	add	r3, r1
    594a:	3318      	adds	r3, #24
    594c:	881b      	ldrh	r3, [r3, #0]
    594e:	2b00      	cmp	r3, #0
    5950:	d118      	bne.n	5984 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    5952:	4b1d      	ldr	r3, [pc, #116]	; (59c8 <DisableSafeClock+0xc4>)
    5954:	791b      	ldrb	r3, [r3, #4]
    5956:	4619      	mov	r1, r3
    5958:	4a1c      	ldr	r2, [pc, #112]	; (59cc <DisableSafeClock+0xc8>)
    595a:	460b      	mov	r3, r1
    595c:	005b      	lsls	r3, r3, #1
    595e:	440b      	add	r3, r1
    5960:	009b      	lsls	r3, r3, #2
    5962:	4413      	add	r3, r2
    5964:	3308      	adds	r3, #8
    5966:	681b      	ldr	r3, [r3, #0]
    5968:	2005      	movs	r0, #5
    596a:	4798      	blx	r3
                }
                break;
    596c:	e00a      	b.n	5984 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    596e:	9b03      	ldr	r3, [sp, #12]
    5970:	3301      	adds	r3, #1
    5972:	9303      	str	r3, [sp, #12]
    5974:	4b13      	ldr	r3, [pc, #76]	; (59c4 <DisableSafeClock+0xc0>)
    5976:	681b      	ldr	r3, [r3, #0]
    5978:	7a1b      	ldrb	r3, [r3, #8]
    597a:	461a      	mov	r2, r3
    597c:	9b03      	ldr	r3, [sp, #12]
    597e:	4293      	cmp	r3, r2
    5980:	d3cc      	bcc.n	591c <DisableSafeClock+0x18>
    5982:	e000      	b.n	5986 <DisableSafeClock+0x82>
                break;
    5984:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    5986:	f89d 300b 	ldrb.w	r3, [sp, #11]
    598a:	f083 0301 	eor.w	r3, r3, #1
    598e:	b2db      	uxtb	r3, r3
    5990:	2b00      	cmp	r3, #0
    5992:	d013      	beq.n	59bc <DisableSafeClock+0xb8>
    5994:	4b0e      	ldr	r3, [pc, #56]	; (59d0 <DisableSafeClock+0xcc>)
    5996:	781b      	ldrb	r3, [r3, #0]
    5998:	f083 0301 	eor.w	r3, r3, #1
    599c:	b2db      	uxtb	r3, r3
    599e:	2b00      	cmp	r3, #0
    59a0:	d00c      	beq.n	59bc <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    59a2:	4b09      	ldr	r3, [pc, #36]	; (59c8 <DisableSafeClock+0xc4>)
    59a4:	791b      	ldrb	r3, [r3, #4]
    59a6:	4619      	mov	r1, r3
    59a8:	4a08      	ldr	r2, [pc, #32]	; (59cc <DisableSafeClock+0xc8>)
    59aa:	460b      	mov	r3, r1
    59ac:	005b      	lsls	r3, r3, #1
    59ae:	440b      	add	r3, r1
    59b0:	009b      	lsls	r3, r3, #2
    59b2:	4413      	add	r3, r2
    59b4:	3308      	adds	r3, #8
    59b6:	681b      	ldr	r3, [r3, #0]
    59b8:	2005      	movs	r0, #5
    59ba:	4798      	blx	r3
    }
}
    59bc:	bf00      	nop
    59be:	b005      	add	sp, #20
    59c0:	f85d fb04 	ldr.w	pc, [sp], #4
    59c4:	1fff8bdc 	.word	0x1fff8bdc
    59c8:	00019070 	.word	0x00019070
    59cc:	000196a0 	.word	0x000196a0
    59d0:	1fff8b18 	.word	0x1fff8b18

000059d4 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    59d4:	4b06      	ldr	r3, [pc, #24]	; (59f0 <SetFircToResetValue_TrustedCall+0x1c>)
    59d6:	2200      	movs	r2, #0
    59d8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    59dc:	4b04      	ldr	r3, [pc, #16]	; (59f0 <SetFircToResetValue_TrustedCall+0x1c>)
    59de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    59e2:	4a03      	ldr	r2, [pc, #12]	; (59f0 <SetFircToResetValue_TrustedCall+0x1c>)
    59e4:	f043 0301 	orr.w	r3, r3, #1
    59e8:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    59ec:	bf00      	nop
    59ee:	4770      	bx	lr
    59f0:	40064000 	.word	0x40064000

000059f4 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    59f4:	b084      	sub	sp, #16
    59f6:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    59f8:	2303      	movs	r3, #3
    59fa:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    59fc:	2300      	movs	r3, #0
    59fe:	9302      	str	r3, [sp, #8]
    5a00:	e028      	b.n	5a54 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    5a02:	9b01      	ldr	r3, [sp, #4]
    5a04:	9a02      	ldr	r2, [sp, #8]
    5a06:	320d      	adds	r2, #13
    5a08:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    5a0c:	2b28      	cmp	r3, #40	; 0x28
    5a0e:	d10b      	bne.n	5a28 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    5a10:	9a01      	ldr	r2, [sp, #4]
    5a12:	9b02      	ldr	r3, [sp, #8]
    5a14:	330d      	adds	r3, #13
    5a16:	00db      	lsls	r3, r3, #3
    5a18:	4413      	add	r3, r2
    5a1a:	685b      	ldr	r3, [r3, #4]
    5a1c:	4a2b      	ldr	r2, [pc, #172]	; (5acc <SetSimLpoclksRegister_TrustedCall+0xd8>)
    5a1e:	5cd3      	ldrb	r3, [r2, r3]
    5a20:	011b      	lsls	r3, r3, #4
    5a22:	9a03      	ldr	r2, [sp, #12]
    5a24:	4313      	orrs	r3, r2
    5a26:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    5a28:	9b01      	ldr	r3, [sp, #4]
    5a2a:	9a02      	ldr	r2, [sp, #8]
    5a2c:	320d      	adds	r2, #13
    5a2e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    5a32:	2b29      	cmp	r3, #41	; 0x29
    5a34:	d10b      	bne.n	5a4e <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    5a36:	9a01      	ldr	r2, [sp, #4]
    5a38:	9b02      	ldr	r3, [sp, #8]
    5a3a:	330d      	adds	r3, #13
    5a3c:	00db      	lsls	r3, r3, #3
    5a3e:	4413      	add	r3, r2
    5a40:	685b      	ldr	r3, [r3, #4]
    5a42:	4a23      	ldr	r2, [pc, #140]	; (5ad0 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    5a44:	5cd3      	ldrb	r3, [r2, r3]
    5a46:	009b      	lsls	r3, r3, #2
    5a48:	9a03      	ldr	r2, [sp, #12]
    5a4a:	4313      	orrs	r3, r2
    5a4c:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    5a4e:	9b02      	ldr	r3, [sp, #8]
    5a50:	3301      	adds	r3, #1
    5a52:	9302      	str	r3, [sp, #8]
    5a54:	9b01      	ldr	r3, [sp, #4]
    5a56:	7adb      	ldrb	r3, [r3, #11]
    5a58:	461a      	mov	r2, r3
    5a5a:	9b02      	ldr	r3, [sp, #8]
    5a5c:	4293      	cmp	r3, r2
    5a5e:	d3d0      	bcc.n	5a02 <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    5a60:	2300      	movs	r3, #0
    5a62:	9302      	str	r3, [sp, #8]
    5a64:	e026      	b.n	5ab4 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    5a66:	9a01      	ldr	r2, [sp, #4]
    5a68:	9b02      	ldr	r3, [sp, #8]
    5a6a:	334e      	adds	r3, #78	; 0x4e
    5a6c:	00db      	lsls	r3, r3, #3
    5a6e:	4413      	add	r3, r2
    5a70:	685b      	ldr	r3, [r3, #4]
    5a72:	2b12      	cmp	r3, #18
    5a74:	d109      	bne.n	5a8a <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    5a76:	9a01      	ldr	r2, [sp, #4]
    5a78:	9b02      	ldr	r3, [sp, #8]
    5a7a:	334e      	adds	r3, #78	; 0x4e
    5a7c:	00db      	lsls	r3, r3, #3
    5a7e:	4413      	add	r3, r2
    5a80:	891b      	ldrh	r3, [r3, #8]
    5a82:	005b      	lsls	r3, r3, #1
    5a84:	9a03      	ldr	r2, [sp, #12]
    5a86:	4313      	orrs	r3, r2
    5a88:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    5a8a:	9a01      	ldr	r2, [sp, #4]
    5a8c:	9b02      	ldr	r3, [sp, #8]
    5a8e:	334e      	adds	r3, #78	; 0x4e
    5a90:	00db      	lsls	r3, r3, #3
    5a92:	4413      	add	r3, r2
    5a94:	685b      	ldr	r3, [r3, #4]
    5a96:	2b13      	cmp	r3, #19
    5a98:	d109      	bne.n	5aae <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    5a9a:	9a01      	ldr	r2, [sp, #4]
    5a9c:	9b02      	ldr	r3, [sp, #8]
    5a9e:	334e      	adds	r3, #78	; 0x4e
    5aa0:	00db      	lsls	r3, r3, #3
    5aa2:	4413      	add	r3, r2
    5aa4:	891b      	ldrh	r3, [r3, #8]
    5aa6:	461a      	mov	r2, r3
    5aa8:	9b03      	ldr	r3, [sp, #12]
    5aaa:	4313      	orrs	r3, r2
    5aac:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    5aae:	9b02      	ldr	r3, [sp, #8]
    5ab0:	3301      	adds	r3, #1
    5ab2:	9302      	str	r3, [sp, #8]
    5ab4:	9b01      	ldr	r3, [sp, #4]
    5ab6:	7c1b      	ldrb	r3, [r3, #16]
    5ab8:	461a      	mov	r2, r3
    5aba:	9b02      	ldr	r3, [sp, #8]
    5abc:	4293      	cmp	r3, r2
    5abe:	d3d2      	bcc.n	5a66 <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    5ac0:	4a04      	ldr	r2, [pc, #16]	; (5ad4 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    5ac2:	9b03      	ldr	r3, [sp, #12]
    5ac4:	6113      	str	r3, [r2, #16]
}
    5ac6:	bf00      	nop
    5ac8:	b004      	add	sp, #16
    5aca:	4770      	bx	lr
    5acc:	000193f0 	.word	0x000193f0
    5ad0:	000194a8 	.word	0x000194a8
    5ad4:	40048000 	.word	0x40048000

00005ad8 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    5ad8:	b500      	push	{lr}
    5ada:	b089      	sub	sp, #36	; 0x24
    5adc:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    5ade:	2300      	movs	r3, #0
    5ae0:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    5ae4:	4a21      	ldr	r2, [pc, #132]	; (5b6c <Clock_Ip_SpecificPlatformInitClock+0x94>)
    5ae6:	9b01      	ldr	r3, [sp, #4]
    5ae8:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    5aea:	4b21      	ldr	r3, [pc, #132]	; (5b70 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    5aec:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    5af0:	f003 0301 	and.w	r3, r3, #1
    5af4:	2b00      	cmp	r3, #0
    5af6:	d12e      	bne.n	5b56 <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    5af8:	4b1e      	ldr	r3, [pc, #120]	; (5b74 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    5afa:	2200      	movs	r2, #0
    5afc:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    5afe:	f7ff ff69 	bl	59d4 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    5b02:	aa03      	add	r2, sp, #12
    5b04:	a904      	add	r1, sp, #16
    5b06:	a805      	add	r0, sp, #20
    5b08:	f24c 3350 	movw	r3, #50000	; 0xc350
    5b0c:	f7fe f8ae 	bl	3c6c <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    5b10:	4b17      	ldr	r3, [pc, #92]	; (5b70 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    5b12:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    5b16:	0e1b      	lsrs	r3, r3, #24
    5b18:	f003 0301 	and.w	r3, r3, #1
    5b1c:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5b1e:	9a03      	ldr	r2, [sp, #12]
    5b20:	a904      	add	r1, sp, #16
    5b22:	ab05      	add	r3, sp, #20
    5b24:	4618      	mov	r0, r3
    5b26:	f7fe f8bb 	bl	3ca0 <Clock_Ip_TimeoutExpired>
    5b2a:	4603      	mov	r3, r0
    5b2c:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    5b30:	9b06      	ldr	r3, [sp, #24]
    5b32:	2b00      	cmp	r3, #0
    5b34:	d106      	bne.n	5b44 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    5b36:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5b3a:	f083 0301 	eor.w	r3, r3, #1
    5b3e:	b2db      	uxtb	r3, r3
    5b40:	2b00      	cmp	r3, #0
    5b42:	d1e5      	bne.n	5b10 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    5b44:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5b48:	2b00      	cmp	r3, #0
    5b4a:	d007      	beq.n	5b5c <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    5b4c:	2105      	movs	r1, #5
    5b4e:	2001      	movs	r0, #1
    5b50:	f7fe f87c 	bl	3c4c <Clock_Ip_ReportClockErrors>
    5b54:	e002      	b.n	5b5c <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    5b56:	4b07      	ldr	r3, [pc, #28]	; (5b74 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    5b58:	2201      	movs	r2, #1
    5b5a:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    5b5c:	9801      	ldr	r0, [sp, #4]
    5b5e:	f7ff ff49 	bl	59f4 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    5b62:	bf00      	nop
    5b64:	b009      	add	sp, #36	; 0x24
    5b66:	f85d fb04 	ldr.w	pc, [sp], #4
    5b6a:	bf00      	nop
    5b6c:	1fff8bdc 	.word	0x1fff8bdc
    5b70:	40064000 	.word	0x40064000
    5b74:	1fff8b18 	.word	0x1fff8b18

00005b78 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    5b78:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    5b7a:	2300      	movs	r3, #0
    5b7c:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    5b7e:	4b29      	ldr	r3, [pc, #164]	; (5c24 <getFircConfig+0xac>)
    5b80:	681b      	ldr	r3, [r3, #0]
    5b82:	2b00      	cmp	r3, #0
    5b84:	d024      	beq.n	5bd0 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    5b86:	2300      	movs	r3, #0
    5b88:	9301      	str	r3, [sp, #4]
    5b8a:	e01a      	b.n	5bc2 <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    5b8c:	4b25      	ldr	r3, [pc, #148]	; (5c24 <getFircConfig+0xac>)
    5b8e:	6819      	ldr	r1, [r3, #0]
    5b90:	9a01      	ldr	r2, [sp, #4]
    5b92:	4613      	mov	r3, r2
    5b94:	005b      	lsls	r3, r3, #1
    5b96:	4413      	add	r3, r2
    5b98:	009b      	lsls	r3, r3, #2
    5b9a:	440b      	add	r3, r1
    5b9c:	3314      	adds	r3, #20
    5b9e:	681b      	ldr	r3, [r3, #0]
    5ba0:	2b05      	cmp	r3, #5
    5ba2:	d10b      	bne.n	5bbc <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    5ba4:	4b1f      	ldr	r3, [pc, #124]	; (5c24 <getFircConfig+0xac>)
    5ba6:	6819      	ldr	r1, [r3, #0]
    5ba8:	9a01      	ldr	r2, [sp, #4]
    5baa:	4613      	mov	r3, r2
    5bac:	005b      	lsls	r3, r3, #1
    5bae:	4413      	add	r3, r2
    5bb0:	009b      	lsls	r3, r3, #2
    5bb2:	3310      	adds	r3, #16
    5bb4:	440b      	add	r3, r1
    5bb6:	3304      	adds	r3, #4
    5bb8:	9300      	str	r3, [sp, #0]
                break;
    5bba:	e009      	b.n	5bd0 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    5bbc:	9b01      	ldr	r3, [sp, #4]
    5bbe:	3301      	adds	r3, #1
    5bc0:	9301      	str	r3, [sp, #4]
    5bc2:	4b18      	ldr	r3, [pc, #96]	; (5c24 <getFircConfig+0xac>)
    5bc4:	681b      	ldr	r3, [r3, #0]
    5bc6:	7a1b      	ldrb	r3, [r3, #8]
    5bc8:	461a      	mov	r2, r3
    5bca:	9b01      	ldr	r3, [sp, #4]
    5bcc:	4293      	cmp	r3, r2
    5bce:	d3dd      	bcc.n	5b8c <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5bd0:	9b00      	ldr	r3, [sp, #0]
    5bd2:	2b00      	cmp	r3, #0
    5bd4:	d121      	bne.n	5c1a <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    5bd6:	4b14      	ldr	r3, [pc, #80]	; (5c28 <getFircConfig+0xb0>)
    5bd8:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    5bda:	4b13      	ldr	r3, [pc, #76]	; (5c28 <getFircConfig+0xb0>)
    5bdc:	2205      	movs	r2, #5
    5bde:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    5be0:	4b12      	ldr	r3, [pc, #72]	; (5c2c <getFircConfig+0xb4>)
    5be2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    5be6:	b29b      	uxth	r3, r3
    5be8:	f003 0301 	and.w	r3, r3, #1
    5bec:	b29a      	uxth	r2, r3
    5bee:	4b0e      	ldr	r3, [pc, #56]	; (5c28 <getFircConfig+0xb0>)
    5bf0:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    5bf2:	4b0e      	ldr	r3, [pc, #56]	; (5c2c <getFircConfig+0xb4>)
    5bf4:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    5bf8:	b2db      	uxtb	r3, r3
    5bfa:	f003 0303 	and.w	r3, r3, #3
    5bfe:	b2da      	uxtb	r2, r3
    5c00:	4b09      	ldr	r3, [pc, #36]	; (5c28 <getFircConfig+0xb0>)
    5c02:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    5c04:	4b09      	ldr	r3, [pc, #36]	; (5c2c <getFircConfig+0xb4>)
    5c06:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    5c0a:	b2db      	uxtb	r3, r3
    5c0c:	10db      	asrs	r3, r3, #3
    5c0e:	b2db      	uxtb	r3, r3
    5c10:	f003 0301 	and.w	r3, r3, #1
    5c14:	b2da      	uxtb	r2, r3
    5c16:	4b04      	ldr	r3, [pc, #16]	; (5c28 <getFircConfig+0xb0>)
    5c18:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    5c1a:	9b00      	ldr	r3, [sp, #0]
}
    5c1c:	4618      	mov	r0, r3
    5c1e:	b002      	add	sp, #8
    5c20:	4770      	bx	lr
    5c22:	bf00      	nop
    5c24:	1fff8bdc 	.word	0x1fff8bdc
    5c28:	1fff8c48 	.word	0x1fff8c48
    5c2c:	40064000 	.word	0x40064000

00005c30 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    5c30:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    5c32:	2300      	movs	r3, #0
    5c34:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    5c36:	4b20      	ldr	r3, [pc, #128]	; (5cb8 <getSoscConfig+0x88>)
    5c38:	681b      	ldr	r3, [r3, #0]
    5c3a:	2b00      	cmp	r3, #0
    5c3c:	d024      	beq.n	5c88 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    5c3e:	2300      	movs	r3, #0
    5c40:	9301      	str	r3, [sp, #4]
    5c42:	e01a      	b.n	5c7a <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    5c44:	4b1c      	ldr	r3, [pc, #112]	; (5cb8 <getSoscConfig+0x88>)
    5c46:	6819      	ldr	r1, [r3, #0]
    5c48:	9a01      	ldr	r2, [sp, #4]
    5c4a:	4613      	mov	r3, r2
    5c4c:	009b      	lsls	r3, r3, #2
    5c4e:	4413      	add	r3, r2
    5c50:	009b      	lsls	r3, r3, #2
    5c52:	440b      	add	r3, r1
    5c54:	332c      	adds	r3, #44	; 0x2c
    5c56:	681b      	ldr	r3, [r3, #0]
    5c58:	2b08      	cmp	r3, #8
    5c5a:	d10b      	bne.n	5c74 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    5c5c:	4b16      	ldr	r3, [pc, #88]	; (5cb8 <getSoscConfig+0x88>)
    5c5e:	6819      	ldr	r1, [r3, #0]
    5c60:	9a01      	ldr	r2, [sp, #4]
    5c62:	4613      	mov	r3, r2
    5c64:	009b      	lsls	r3, r3, #2
    5c66:	4413      	add	r3, r2
    5c68:	009b      	lsls	r3, r3, #2
    5c6a:	3328      	adds	r3, #40	; 0x28
    5c6c:	440b      	add	r3, r1
    5c6e:	3304      	adds	r3, #4
    5c70:	9300      	str	r3, [sp, #0]
                break;
    5c72:	e009      	b.n	5c88 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    5c74:	9b01      	ldr	r3, [sp, #4]
    5c76:	3301      	adds	r3, #1
    5c78:	9301      	str	r3, [sp, #4]
    5c7a:	4b0f      	ldr	r3, [pc, #60]	; (5cb8 <getSoscConfig+0x88>)
    5c7c:	681b      	ldr	r3, [r3, #0]
    5c7e:	7a5b      	ldrb	r3, [r3, #9]
    5c80:	461a      	mov	r2, r3
    5c82:	9b01      	ldr	r3, [sp, #4]
    5c84:	4293      	cmp	r3, r2
    5c86:	d3dd      	bcc.n	5c44 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5c88:	9b00      	ldr	r3, [sp, #0]
    5c8a:	2b00      	cmp	r3, #0
    5c8c:	d110      	bne.n	5cb0 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    5c8e:	4b0b      	ldr	r3, [pc, #44]	; (5cbc <getSoscConfig+0x8c>)
    5c90:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    5c92:	4b0a      	ldr	r3, [pc, #40]	; (5cbc <getSoscConfig+0x8c>)
    5c94:	2208      	movs	r2, #8
    5c96:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    5c98:	4b09      	ldr	r3, [pc, #36]	; (5cc0 <getSoscConfig+0x90>)
    5c9a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    5c9e:	b29b      	uxth	r3, r3
    5ca0:	f003 0301 	and.w	r3, r3, #1
    5ca4:	b29a      	uxth	r2, r3
    5ca6:	4b05      	ldr	r3, [pc, #20]	; (5cbc <getSoscConfig+0x8c>)
    5ca8:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    5caa:	4b04      	ldr	r3, [pc, #16]	; (5cbc <getSoscConfig+0x8c>)
    5cac:	4a05      	ldr	r2, [pc, #20]	; (5cc4 <getSoscConfig+0x94>)
    5cae:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    5cb0:	9b00      	ldr	r3, [sp, #0]
}
    5cb2:	4618      	mov	r0, r3
    5cb4:	b002      	add	sp, #8
    5cb6:	4770      	bx	lr
    5cb8:	1fff8bdc 	.word	0x1fff8bdc
    5cbc:	1fff8c54 	.word	0x1fff8c54
    5cc0:	40064000 	.word	0x40064000
    5cc4:	02625a00 	.word	0x02625a00

00005cc8 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    5cc8:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    5cca:	2300      	movs	r3, #0
    5ccc:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    5cce:	4b28      	ldr	r3, [pc, #160]	; (5d70 <getSpllConfig+0xa8>)
    5cd0:	681b      	ldr	r3, [r3, #0]
    5cd2:	2b00      	cmp	r3, #0
    5cd4:	d023      	beq.n	5d1e <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    5cd6:	2300      	movs	r3, #0
    5cd8:	9301      	str	r3, [sp, #4]
    5cda:	e019      	b.n	5d10 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    5cdc:	4b24      	ldr	r3, [pc, #144]	; (5d70 <getSpllConfig+0xa8>)
    5cde:	6819      	ldr	r1, [r3, #0]
    5ce0:	9a01      	ldr	r2, [sp, #4]
    5ce2:	4613      	mov	r3, r2
    5ce4:	009b      	lsls	r3, r3, #2
    5ce6:	4413      	add	r3, r2
    5ce8:	00db      	lsls	r3, r3, #3
    5cea:	440b      	add	r3, r1
    5cec:	3340      	adds	r3, #64	; 0x40
    5cee:	681b      	ldr	r3, [r3, #0]
    5cf0:	2b09      	cmp	r3, #9
    5cf2:	d10a      	bne.n	5d0a <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    5cf4:	4b1e      	ldr	r3, [pc, #120]	; (5d70 <getSpllConfig+0xa8>)
    5cf6:	6819      	ldr	r1, [r3, #0]
    5cf8:	9a01      	ldr	r2, [sp, #4]
    5cfa:	4613      	mov	r3, r2
    5cfc:	009b      	lsls	r3, r3, #2
    5cfe:	4413      	add	r3, r2
    5d00:	00db      	lsls	r3, r3, #3
    5d02:	3340      	adds	r3, #64	; 0x40
    5d04:	440b      	add	r3, r1
    5d06:	9300      	str	r3, [sp, #0]
                break;
    5d08:	e009      	b.n	5d1e <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    5d0a:	9b01      	ldr	r3, [sp, #4]
    5d0c:	3301      	adds	r3, #1
    5d0e:	9301      	str	r3, [sp, #4]
    5d10:	4b17      	ldr	r3, [pc, #92]	; (5d70 <getSpllConfig+0xa8>)
    5d12:	681b      	ldr	r3, [r3, #0]
    5d14:	7a9b      	ldrb	r3, [r3, #10]
    5d16:	461a      	mov	r2, r3
    5d18:	9b01      	ldr	r3, [sp, #4]
    5d1a:	4293      	cmp	r3, r2
    5d1c:	d3de      	bcc.n	5cdc <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5d1e:	9b00      	ldr	r3, [sp, #0]
    5d20:	2b00      	cmp	r3, #0
    5d22:	d121      	bne.n	5d68 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    5d24:	4b13      	ldr	r3, [pc, #76]	; (5d74 <getSpllConfig+0xac>)
    5d26:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    5d28:	4b12      	ldr	r3, [pc, #72]	; (5d74 <getSpllConfig+0xac>)
    5d2a:	2209      	movs	r2, #9
    5d2c:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    5d2e:	4b12      	ldr	r3, [pc, #72]	; (5d78 <getSpllConfig+0xb0>)
    5d30:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    5d34:	b29b      	uxth	r3, r3
    5d36:	f003 0301 	and.w	r3, r3, #1
    5d3a:	b29a      	uxth	r2, r3
    5d3c:	4b0d      	ldr	r3, [pc, #52]	; (5d74 <getSpllConfig+0xac>)
    5d3e:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    5d40:	4b0d      	ldr	r3, [pc, #52]	; (5d78 <getSpllConfig+0xb0>)
    5d42:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    5d46:	0a1b      	lsrs	r3, r3, #8
    5d48:	b2db      	uxtb	r3, r3
    5d4a:	f003 0307 	and.w	r3, r3, #7
    5d4e:	b2da      	uxtb	r2, r3
    5d50:	4b08      	ldr	r3, [pc, #32]	; (5d74 <getSpllConfig+0xac>)
    5d52:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    5d54:	4b08      	ldr	r3, [pc, #32]	; (5d78 <getSpllConfig+0xb0>)
    5d56:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    5d5a:	0c1b      	lsrs	r3, r3, #16
    5d5c:	b2db      	uxtb	r3, r3
    5d5e:	f003 031f 	and.w	r3, r3, #31
    5d62:	b2da      	uxtb	r2, r3
    5d64:	4b03      	ldr	r3, [pc, #12]	; (5d74 <getSpllConfig+0xac>)
    5d66:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    5d68:	9b00      	ldr	r3, [sp, #0]
}
    5d6a:	4618      	mov	r0, r3
    5d6c:	b002      	add	sp, #8
    5d6e:	4770      	bx	lr
    5d70:	1fff8bdc 	.word	0x1fff8bdc
    5d74:	1fff8c68 	.word	0x1fff8c68
    5d78:	40064000 	.word	0x40064000

00005d7c <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    5d7c:	b086      	sub	sp, #24
    5d7e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    5d80:	2300      	movs	r3, #0
    5d82:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    5d84:	9b01      	ldr	r3, [sp, #4]
    5d86:	2b1b      	cmp	r3, #27
    5d88:	d00f      	beq.n	5daa <getSelectorConfig+0x2e>
    5d8a:	9b01      	ldr	r3, [sp, #4]
    5d8c:	2b1b      	cmp	r3, #27
    5d8e:	d80f      	bhi.n	5db0 <getSelectorConfig+0x34>
    5d90:	9b01      	ldr	r3, [sp, #4]
    5d92:	2b19      	cmp	r3, #25
    5d94:	d003      	beq.n	5d9e <getSelectorConfig+0x22>
    5d96:	9b01      	ldr	r3, [sp, #4]
    5d98:	2b1a      	cmp	r3, #26
    5d9a:	d003      	beq.n	5da4 <getSelectorConfig+0x28>
    5d9c:	e008      	b.n	5db0 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    5d9e:	2300      	movs	r3, #0
    5da0:	9304      	str	r3, [sp, #16]
            break;
    5da2:	e008      	b.n	5db6 <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    5da4:	2301      	movs	r3, #1
    5da6:	9304      	str	r3, [sp, #16]
            break;
    5da8:	e005      	b.n	5db6 <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    5daa:	2302      	movs	r3, #2
    5dac:	9304      	str	r3, [sp, #16]
            break;
    5dae:	e002      	b.n	5db6 <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    5db0:	2300      	movs	r3, #0
    5db2:	9304      	str	r3, [sp, #16]
            break;
    5db4:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5db6:	4b36      	ldr	r3, [pc, #216]	; (5e90 <getSelectorConfig+0x114>)
    5db8:	681b      	ldr	r3, [r3, #0]
    5dba:	2b00      	cmp	r3, #0
    5dbc:	d01d      	beq.n	5dfa <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    5dbe:	2300      	movs	r3, #0
    5dc0:	9303      	str	r3, [sp, #12]
    5dc2:	e013      	b.n	5dec <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    5dc4:	4b32      	ldr	r3, [pc, #200]	; (5e90 <getSelectorConfig+0x114>)
    5dc6:	681b      	ldr	r3, [r3, #0]
    5dc8:	9a03      	ldr	r2, [sp, #12]
    5dca:	320d      	adds	r2, #13
    5dcc:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    5dd0:	9a01      	ldr	r2, [sp, #4]
    5dd2:	429a      	cmp	r2, r3
    5dd4:	d107      	bne.n	5de6 <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    5dd6:	4b2e      	ldr	r3, [pc, #184]	; (5e90 <getSelectorConfig+0x114>)
    5dd8:	681a      	ldr	r2, [r3, #0]
    5dda:	9b03      	ldr	r3, [sp, #12]
    5ddc:	330d      	adds	r3, #13
    5dde:	00db      	lsls	r3, r3, #3
    5de0:	4413      	add	r3, r2
    5de2:	9305      	str	r3, [sp, #20]
                break;
    5de4:	e009      	b.n	5dfa <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    5de6:	9b03      	ldr	r3, [sp, #12]
    5de8:	3301      	adds	r3, #1
    5dea:	9303      	str	r3, [sp, #12]
    5dec:	4b28      	ldr	r3, [pc, #160]	; (5e90 <getSelectorConfig+0x114>)
    5dee:	681b      	ldr	r3, [r3, #0]
    5df0:	7adb      	ldrb	r3, [r3, #11]
    5df2:	461a      	mov	r2, r3
    5df4:	9b03      	ldr	r3, [sp, #12]
    5df6:	4293      	cmp	r3, r2
    5df8:	d3e4      	bcc.n	5dc4 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5dfa:	9b05      	ldr	r3, [sp, #20]
    5dfc:	2b00      	cmp	r3, #0
    5dfe:	d140      	bne.n	5e82 <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    5e00:	9b04      	ldr	r3, [sp, #16]
    5e02:	00db      	lsls	r3, r3, #3
    5e04:	4a23      	ldr	r2, [pc, #140]	; (5e94 <getSelectorConfig+0x118>)
    5e06:	4413      	add	r3, r2
    5e08:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    5e0a:	4922      	ldr	r1, [pc, #136]	; (5e94 <getSelectorConfig+0x118>)
    5e0c:	9b04      	ldr	r3, [sp, #16]
    5e0e:	9a01      	ldr	r2, [sp, #4]
    5e10:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    5e14:	9b01      	ldr	r3, [sp, #4]
    5e16:	2b1b      	cmp	r3, #27
    5e18:	d025      	beq.n	5e66 <getSelectorConfig+0xea>
    5e1a:	9b01      	ldr	r3, [sp, #4]
    5e1c:	2b1b      	cmp	r3, #27
    5e1e:	d832      	bhi.n	5e86 <getSelectorConfig+0x10a>
    5e20:	9b01      	ldr	r3, [sp, #4]
    5e22:	2b19      	cmp	r3, #25
    5e24:	d003      	beq.n	5e2e <getSelectorConfig+0xb2>
    5e26:	9b01      	ldr	r3, [sp, #4]
    5e28:	2b1a      	cmp	r3, #26
    5e2a:	d00e      	beq.n	5e4a <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5e2c:	e02b      	b.n	5e86 <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    5e2e:	4b1a      	ldr	r3, [pc, #104]	; (5e98 <getSelectorConfig+0x11c>)
    5e30:	695b      	ldr	r3, [r3, #20]
    5e32:	0e1b      	lsrs	r3, r3, #24
    5e34:	f003 030f 	and.w	r3, r3, #15
    5e38:	4a18      	ldr	r2, [pc, #96]	; (5e9c <getSelectorConfig+0x120>)
    5e3a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5e3e:	4915      	ldr	r1, [pc, #84]	; (5e94 <getSelectorConfig+0x118>)
    5e40:	9b04      	ldr	r3, [sp, #16]
    5e42:	00db      	lsls	r3, r3, #3
    5e44:	440b      	add	r3, r1
    5e46:	605a      	str	r2, [r3, #4]
                break;
    5e48:	e01e      	b.n	5e88 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    5e4a:	4b13      	ldr	r3, [pc, #76]	; (5e98 <getSelectorConfig+0x11c>)
    5e4c:	699b      	ldr	r3, [r3, #24]
    5e4e:	0e1b      	lsrs	r3, r3, #24
    5e50:	f003 030f 	and.w	r3, r3, #15
    5e54:	4a11      	ldr	r2, [pc, #68]	; (5e9c <getSelectorConfig+0x120>)
    5e56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5e5a:	490e      	ldr	r1, [pc, #56]	; (5e94 <getSelectorConfig+0x118>)
    5e5c:	9b04      	ldr	r3, [sp, #16]
    5e5e:	00db      	lsls	r3, r3, #3
    5e60:	440b      	add	r3, r1
    5e62:	605a      	str	r2, [r3, #4]
                break;
    5e64:	e010      	b.n	5e88 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    5e66:	4b0c      	ldr	r3, [pc, #48]	; (5e98 <getSelectorConfig+0x11c>)
    5e68:	69db      	ldr	r3, [r3, #28]
    5e6a:	0e1b      	lsrs	r3, r3, #24
    5e6c:	f003 030f 	and.w	r3, r3, #15
    5e70:	4a0a      	ldr	r2, [pc, #40]	; (5e9c <getSelectorConfig+0x120>)
    5e72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5e76:	4907      	ldr	r1, [pc, #28]	; (5e94 <getSelectorConfig+0x118>)
    5e78:	9b04      	ldr	r3, [sp, #16]
    5e7a:	00db      	lsls	r3, r3, #3
    5e7c:	440b      	add	r3, r1
    5e7e:	605a      	str	r2, [r3, #4]
                break;
    5e80:	e002      	b.n	5e88 <getSelectorConfig+0x10c>
        }
    }
    5e82:	bf00      	nop
    5e84:	e000      	b.n	5e88 <getSelectorConfig+0x10c>
                break;
    5e86:	bf00      	nop

    return ReturnValue;
    5e88:	9b05      	ldr	r3, [sp, #20]
}
    5e8a:	4618      	mov	r0, r3
    5e8c:	b006      	add	sp, #24
    5e8e:	4770      	bx	lr
    5e90:	1fff8bdc 	.word	0x1fff8bdc
    5e94:	1fff8c90 	.word	0x1fff8c90
    5e98:	40064000 	.word	0x40064000
    5e9c:	00019770 	.word	0x00019770

00005ea0 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    5ea0:	b086      	sub	sp, #24
    5ea2:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5ea4:	2300      	movs	r3, #0
    5ea6:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5ea8:	2300      	movs	r3, #0
    5eaa:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5eac:	9b01      	ldr	r3, [sp, #4]
    5eae:	2b1f      	cmp	r3, #31
    5eb0:	d00f      	beq.n	5ed2 <getCoreDividerConfig+0x32>
    5eb2:	9b01      	ldr	r3, [sp, #4]
    5eb4:	2b1f      	cmp	r3, #31
    5eb6:	d80f      	bhi.n	5ed8 <getCoreDividerConfig+0x38>
    5eb8:	9b01      	ldr	r3, [sp, #4]
    5eba:	2b1d      	cmp	r3, #29
    5ebc:	d003      	beq.n	5ec6 <getCoreDividerConfig+0x26>
    5ebe:	9b01      	ldr	r3, [sp, #4]
    5ec0:	2b1e      	cmp	r3, #30
    5ec2:	d003      	beq.n	5ecc <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5ec4:	e008      	b.n	5ed8 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    5ec6:	2300      	movs	r3, #0
    5ec8:	9304      	str	r3, [sp, #16]
            break;
    5eca:	e006      	b.n	5eda <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5ecc:	2301      	movs	r3, #1
    5ece:	9304      	str	r3, [sp, #16]
            break;
    5ed0:	e003      	b.n	5eda <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    5ed2:	2302      	movs	r3, #2
    5ed4:	9304      	str	r3, [sp, #16]
            break;
    5ed6:	e000      	b.n	5eda <getCoreDividerConfig+0x3a>
                break;
    5ed8:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5eda:	4b41      	ldr	r3, [pc, #260]	; (5fe0 <getCoreDividerConfig+0x140>)
    5edc:	681b      	ldr	r3, [r3, #0]
    5ede:	2b00      	cmp	r3, #0
    5ee0:	d026      	beq.n	5f30 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5ee2:	2300      	movs	r3, #0
    5ee4:	9303      	str	r3, [sp, #12]
    5ee6:	e01c      	b.n	5f22 <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5ee8:	4b3d      	ldr	r3, [pc, #244]	; (5fe0 <getCoreDividerConfig+0x140>)
    5eea:	6819      	ldr	r1, [r3, #0]
    5eec:	9a03      	ldr	r2, [sp, #12]
    5eee:	4613      	mov	r3, r2
    5ef0:	005b      	lsls	r3, r3, #1
    5ef2:	4413      	add	r3, r2
    5ef4:	009b      	lsls	r3, r3, #2
    5ef6:	440b      	add	r3, r1
    5ef8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5efc:	681b      	ldr	r3, [r3, #0]
    5efe:	9a01      	ldr	r2, [sp, #4]
    5f00:	429a      	cmp	r2, r3
    5f02:	d10b      	bne.n	5f1c <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5f04:	4b36      	ldr	r3, [pc, #216]	; (5fe0 <getCoreDividerConfig+0x140>)
    5f06:	6819      	ldr	r1, [r3, #0]
    5f08:	9a03      	ldr	r2, [sp, #12]
    5f0a:	4613      	mov	r3, r2
    5f0c:	005b      	lsls	r3, r3, #1
    5f0e:	4413      	add	r3, r2
    5f10:	009b      	lsls	r3, r3, #2
    5f12:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5f16:	440b      	add	r3, r1
    5f18:	9305      	str	r3, [sp, #20]
                break;
    5f1a:	e009      	b.n	5f30 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5f1c:	9b03      	ldr	r3, [sp, #12]
    5f1e:	3301      	adds	r3, #1
    5f20:	9303      	str	r3, [sp, #12]
    5f22:	4b2f      	ldr	r3, [pc, #188]	; (5fe0 <getCoreDividerConfig+0x140>)
    5f24:	681b      	ldr	r3, [r3, #0]
    5f26:	7b1b      	ldrb	r3, [r3, #12]
    5f28:	461a      	mov	r2, r3
    5f2a:	9b03      	ldr	r3, [sp, #12]
    5f2c:	4293      	cmp	r3, r2
    5f2e:	d3db      	bcc.n	5ee8 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5f30:	9b05      	ldr	r3, [sp, #20]
    5f32:	2b00      	cmp	r3, #0
    5f34:	d14d      	bne.n	5fd2 <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    5f36:	9a04      	ldr	r2, [sp, #16]
    5f38:	4613      	mov	r3, r2
    5f3a:	005b      	lsls	r3, r3, #1
    5f3c:	4413      	add	r3, r2
    5f3e:	009b      	lsls	r3, r3, #2
    5f40:	4a28      	ldr	r2, [pc, #160]	; (5fe4 <getCoreDividerConfig+0x144>)
    5f42:	4413      	add	r3, r2
    5f44:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    5f46:	4927      	ldr	r1, [pc, #156]	; (5fe4 <getCoreDividerConfig+0x144>)
    5f48:	9a04      	ldr	r2, [sp, #16]
    5f4a:	4613      	mov	r3, r2
    5f4c:	005b      	lsls	r3, r3, #1
    5f4e:	4413      	add	r3, r2
    5f50:	009b      	lsls	r3, r3, #2
    5f52:	440b      	add	r3, r1
    5f54:	9a01      	ldr	r2, [sp, #4]
    5f56:	601a      	str	r2, [r3, #0]
        switch(Name)
    5f58:	9b01      	ldr	r3, [sp, #4]
    5f5a:	2b1f      	cmp	r3, #31
    5f5c:	d029      	beq.n	5fb2 <getCoreDividerConfig+0x112>
    5f5e:	9b01      	ldr	r3, [sp, #4]
    5f60:	2b1f      	cmp	r3, #31
    5f62:	d838      	bhi.n	5fd6 <getCoreDividerConfig+0x136>
    5f64:	9b01      	ldr	r3, [sp, #4]
    5f66:	2b1d      	cmp	r3, #29
    5f68:	d003      	beq.n	5f72 <getCoreDividerConfig+0xd2>
    5f6a:	9b01      	ldr	r3, [sp, #4]
    5f6c:	2b1e      	cmp	r3, #30
    5f6e:	d010      	beq.n	5f92 <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5f70:	e031      	b.n	5fd6 <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    5f72:	4b1d      	ldr	r3, [pc, #116]	; (5fe8 <getCoreDividerConfig+0x148>)
    5f74:	695b      	ldr	r3, [r3, #20]
    5f76:	0c1b      	lsrs	r3, r3, #16
    5f78:	f003 030f 	and.w	r3, r3, #15
    5f7c:	1c59      	adds	r1, r3, #1
    5f7e:	4819      	ldr	r0, [pc, #100]	; (5fe4 <getCoreDividerConfig+0x144>)
    5f80:	9a04      	ldr	r2, [sp, #16]
    5f82:	4613      	mov	r3, r2
    5f84:	005b      	lsls	r3, r3, #1
    5f86:	4413      	add	r3, r2
    5f88:	009b      	lsls	r3, r3, #2
    5f8a:	4403      	add	r3, r0
    5f8c:	3304      	adds	r3, #4
    5f8e:	6019      	str	r1, [r3, #0]
                break;
    5f90:	e022      	b.n	5fd8 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    5f92:	4b15      	ldr	r3, [pc, #84]	; (5fe8 <getCoreDividerConfig+0x148>)
    5f94:	699b      	ldr	r3, [r3, #24]
    5f96:	0c1b      	lsrs	r3, r3, #16
    5f98:	f003 030f 	and.w	r3, r3, #15
    5f9c:	1c59      	adds	r1, r3, #1
    5f9e:	4811      	ldr	r0, [pc, #68]	; (5fe4 <getCoreDividerConfig+0x144>)
    5fa0:	9a04      	ldr	r2, [sp, #16]
    5fa2:	4613      	mov	r3, r2
    5fa4:	005b      	lsls	r3, r3, #1
    5fa6:	4413      	add	r3, r2
    5fa8:	009b      	lsls	r3, r3, #2
    5faa:	4403      	add	r3, r0
    5fac:	3304      	adds	r3, #4
    5fae:	6019      	str	r1, [r3, #0]
                break;
    5fb0:	e012      	b.n	5fd8 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    5fb2:	4b0d      	ldr	r3, [pc, #52]	; (5fe8 <getCoreDividerConfig+0x148>)
    5fb4:	69db      	ldr	r3, [r3, #28]
    5fb6:	0c1b      	lsrs	r3, r3, #16
    5fb8:	f003 030f 	and.w	r3, r3, #15
    5fbc:	1c59      	adds	r1, r3, #1
    5fbe:	4809      	ldr	r0, [pc, #36]	; (5fe4 <getCoreDividerConfig+0x144>)
    5fc0:	9a04      	ldr	r2, [sp, #16]
    5fc2:	4613      	mov	r3, r2
    5fc4:	005b      	lsls	r3, r3, #1
    5fc6:	4413      	add	r3, r2
    5fc8:	009b      	lsls	r3, r3, #2
    5fca:	4403      	add	r3, r0
    5fcc:	3304      	adds	r3, #4
    5fce:	6019      	str	r1, [r3, #0]
                break;
    5fd0:	e002      	b.n	5fd8 <getCoreDividerConfig+0x138>
        }
    }
    5fd2:	bf00      	nop
    5fd4:	e000      	b.n	5fd8 <getCoreDividerConfig+0x138>
                break;
    5fd6:	bf00      	nop

    return ReturnValue;
    5fd8:	9b05      	ldr	r3, [sp, #20]
}
    5fda:	4618      	mov	r0, r3
    5fdc:	b006      	add	sp, #24
    5fde:	4770      	bx	lr
    5fe0:	1fff8bdc 	.word	0x1fff8bdc
    5fe4:	1fff8ca8 	.word	0x1fff8ca8
    5fe8:	40064000 	.word	0x40064000

00005fec <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    5fec:	b086      	sub	sp, #24
    5fee:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5ff0:	2300      	movs	r3, #0
    5ff2:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5ff4:	2300      	movs	r3, #0
    5ff6:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5ff8:	9b01      	ldr	r3, [sp, #4]
    5ffa:	2b23      	cmp	r3, #35	; 0x23
    5ffc:	d00f      	beq.n	601e <getBusDividerConfig+0x32>
    5ffe:	9b01      	ldr	r3, [sp, #4]
    6000:	2b23      	cmp	r3, #35	; 0x23
    6002:	d80f      	bhi.n	6024 <getBusDividerConfig+0x38>
    6004:	9b01      	ldr	r3, [sp, #4]
    6006:	2b21      	cmp	r3, #33	; 0x21
    6008:	d003      	beq.n	6012 <getBusDividerConfig+0x26>
    600a:	9b01      	ldr	r3, [sp, #4]
    600c:	2b22      	cmp	r3, #34	; 0x22
    600e:	d003      	beq.n	6018 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    6010:	e008      	b.n	6024 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    6012:	2300      	movs	r3, #0
    6014:	9304      	str	r3, [sp, #16]
            break;
    6016:	e006      	b.n	6026 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    6018:	2301      	movs	r3, #1
    601a:	9304      	str	r3, [sp, #16]
            break;
    601c:	e003      	b.n	6026 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    601e:	2302      	movs	r3, #2
    6020:	9304      	str	r3, [sp, #16]
            break;
    6022:	e000      	b.n	6026 <getBusDividerConfig+0x3a>
                break;
    6024:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    6026:	4b41      	ldr	r3, [pc, #260]	; (612c <getBusDividerConfig+0x140>)
    6028:	681b      	ldr	r3, [r3, #0]
    602a:	2b00      	cmp	r3, #0
    602c:	d026      	beq.n	607c <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    602e:	2300      	movs	r3, #0
    6030:	9303      	str	r3, [sp, #12]
    6032:	e01c      	b.n	606e <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    6034:	4b3d      	ldr	r3, [pc, #244]	; (612c <getBusDividerConfig+0x140>)
    6036:	6819      	ldr	r1, [r3, #0]
    6038:	9a03      	ldr	r2, [sp, #12]
    603a:	4613      	mov	r3, r2
    603c:	005b      	lsls	r3, r3, #1
    603e:	4413      	add	r3, r2
    6040:	009b      	lsls	r3, r3, #2
    6042:	440b      	add	r3, r1
    6044:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    6048:	681b      	ldr	r3, [r3, #0]
    604a:	9a01      	ldr	r2, [sp, #4]
    604c:	429a      	cmp	r2, r3
    604e:	d10b      	bne.n	6068 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    6050:	4b36      	ldr	r3, [pc, #216]	; (612c <getBusDividerConfig+0x140>)
    6052:	6819      	ldr	r1, [r3, #0]
    6054:	9a03      	ldr	r2, [sp, #12]
    6056:	4613      	mov	r3, r2
    6058:	005b      	lsls	r3, r3, #1
    605a:	4413      	add	r3, r2
    605c:	009b      	lsls	r3, r3, #2
    605e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    6062:	440b      	add	r3, r1
    6064:	9305      	str	r3, [sp, #20]
                break;
    6066:	e009      	b.n	607c <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    6068:	9b03      	ldr	r3, [sp, #12]
    606a:	3301      	adds	r3, #1
    606c:	9303      	str	r3, [sp, #12]
    606e:	4b2f      	ldr	r3, [pc, #188]	; (612c <getBusDividerConfig+0x140>)
    6070:	681b      	ldr	r3, [r3, #0]
    6072:	7b1b      	ldrb	r3, [r3, #12]
    6074:	461a      	mov	r2, r3
    6076:	9b03      	ldr	r3, [sp, #12]
    6078:	4293      	cmp	r3, r2
    607a:	d3db      	bcc.n	6034 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    607c:	9b05      	ldr	r3, [sp, #20]
    607e:	2b00      	cmp	r3, #0
    6080:	d14d      	bne.n	611e <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    6082:	9a04      	ldr	r2, [sp, #16]
    6084:	4613      	mov	r3, r2
    6086:	005b      	lsls	r3, r3, #1
    6088:	4413      	add	r3, r2
    608a:	009b      	lsls	r3, r3, #2
    608c:	4a28      	ldr	r2, [pc, #160]	; (6130 <getBusDividerConfig+0x144>)
    608e:	4413      	add	r3, r2
    6090:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    6092:	4927      	ldr	r1, [pc, #156]	; (6130 <getBusDividerConfig+0x144>)
    6094:	9a04      	ldr	r2, [sp, #16]
    6096:	4613      	mov	r3, r2
    6098:	005b      	lsls	r3, r3, #1
    609a:	4413      	add	r3, r2
    609c:	009b      	lsls	r3, r3, #2
    609e:	440b      	add	r3, r1
    60a0:	9a01      	ldr	r2, [sp, #4]
    60a2:	601a      	str	r2, [r3, #0]
        switch(Name)
    60a4:	9b01      	ldr	r3, [sp, #4]
    60a6:	2b23      	cmp	r3, #35	; 0x23
    60a8:	d029      	beq.n	60fe <getBusDividerConfig+0x112>
    60aa:	9b01      	ldr	r3, [sp, #4]
    60ac:	2b23      	cmp	r3, #35	; 0x23
    60ae:	d838      	bhi.n	6122 <getBusDividerConfig+0x136>
    60b0:	9b01      	ldr	r3, [sp, #4]
    60b2:	2b21      	cmp	r3, #33	; 0x21
    60b4:	d003      	beq.n	60be <getBusDividerConfig+0xd2>
    60b6:	9b01      	ldr	r3, [sp, #4]
    60b8:	2b22      	cmp	r3, #34	; 0x22
    60ba:	d010      	beq.n	60de <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    60bc:	e031      	b.n	6122 <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    60be:	4b1d      	ldr	r3, [pc, #116]	; (6134 <getBusDividerConfig+0x148>)
    60c0:	695b      	ldr	r3, [r3, #20]
    60c2:	091b      	lsrs	r3, r3, #4
    60c4:	f003 030f 	and.w	r3, r3, #15
    60c8:	1c59      	adds	r1, r3, #1
    60ca:	4819      	ldr	r0, [pc, #100]	; (6130 <getBusDividerConfig+0x144>)
    60cc:	9a04      	ldr	r2, [sp, #16]
    60ce:	4613      	mov	r3, r2
    60d0:	005b      	lsls	r3, r3, #1
    60d2:	4413      	add	r3, r2
    60d4:	009b      	lsls	r3, r3, #2
    60d6:	4403      	add	r3, r0
    60d8:	3304      	adds	r3, #4
    60da:	6019      	str	r1, [r3, #0]
                break;
    60dc:	e022      	b.n	6124 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    60de:	4b15      	ldr	r3, [pc, #84]	; (6134 <getBusDividerConfig+0x148>)
    60e0:	699b      	ldr	r3, [r3, #24]
    60e2:	091b      	lsrs	r3, r3, #4
    60e4:	f003 030f 	and.w	r3, r3, #15
    60e8:	1c59      	adds	r1, r3, #1
    60ea:	4811      	ldr	r0, [pc, #68]	; (6130 <getBusDividerConfig+0x144>)
    60ec:	9a04      	ldr	r2, [sp, #16]
    60ee:	4613      	mov	r3, r2
    60f0:	005b      	lsls	r3, r3, #1
    60f2:	4413      	add	r3, r2
    60f4:	009b      	lsls	r3, r3, #2
    60f6:	4403      	add	r3, r0
    60f8:	3304      	adds	r3, #4
    60fa:	6019      	str	r1, [r3, #0]
                break;
    60fc:	e012      	b.n	6124 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    60fe:	4b0d      	ldr	r3, [pc, #52]	; (6134 <getBusDividerConfig+0x148>)
    6100:	69db      	ldr	r3, [r3, #28]
    6102:	091b      	lsrs	r3, r3, #4
    6104:	f003 030f 	and.w	r3, r3, #15
    6108:	1c59      	adds	r1, r3, #1
    610a:	4809      	ldr	r0, [pc, #36]	; (6130 <getBusDividerConfig+0x144>)
    610c:	9a04      	ldr	r2, [sp, #16]
    610e:	4613      	mov	r3, r2
    6110:	005b      	lsls	r3, r3, #1
    6112:	4413      	add	r3, r2
    6114:	009b      	lsls	r3, r3, #2
    6116:	4403      	add	r3, r0
    6118:	3304      	adds	r3, #4
    611a:	6019      	str	r1, [r3, #0]
                break;
    611c:	e002      	b.n	6124 <getBusDividerConfig+0x138>
        }
    }
    611e:	bf00      	nop
    6120:	e000      	b.n	6124 <getBusDividerConfig+0x138>
                break;
    6122:	bf00      	nop

    return ReturnValue;
    6124:	9b05      	ldr	r3, [sp, #20]
}
    6126:	4618      	mov	r0, r3
    6128:	b006      	add	sp, #24
    612a:	4770      	bx	lr
    612c:	1fff8bdc 	.word	0x1fff8bdc
    6130:	1fff8ccc 	.word	0x1fff8ccc
    6134:	40064000 	.word	0x40064000

00006138 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    6138:	b086      	sub	sp, #24
    613a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    613c:	2300      	movs	r3, #0
    613e:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    6140:	2300      	movs	r3, #0
    6142:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    6144:	9b01      	ldr	r3, [sp, #4]
    6146:	2b27      	cmp	r3, #39	; 0x27
    6148:	d00f      	beq.n	616a <getSlowDividerConfig+0x32>
    614a:	9b01      	ldr	r3, [sp, #4]
    614c:	2b27      	cmp	r3, #39	; 0x27
    614e:	d80f      	bhi.n	6170 <getSlowDividerConfig+0x38>
    6150:	9b01      	ldr	r3, [sp, #4]
    6152:	2b25      	cmp	r3, #37	; 0x25
    6154:	d003      	beq.n	615e <getSlowDividerConfig+0x26>
    6156:	9b01      	ldr	r3, [sp, #4]
    6158:	2b26      	cmp	r3, #38	; 0x26
    615a:	d003      	beq.n	6164 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    615c:	e008      	b.n	6170 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    615e:	2300      	movs	r3, #0
    6160:	9304      	str	r3, [sp, #16]
            break;
    6162:	e006      	b.n	6172 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    6164:	2301      	movs	r3, #1
    6166:	9304      	str	r3, [sp, #16]
            break;
    6168:	e003      	b.n	6172 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    616a:	2302      	movs	r3, #2
    616c:	9304      	str	r3, [sp, #16]
            break;
    616e:	e000      	b.n	6172 <getSlowDividerConfig+0x3a>
                break;
    6170:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    6172:	4b40      	ldr	r3, [pc, #256]	; (6274 <getSlowDividerConfig+0x13c>)
    6174:	681b      	ldr	r3, [r3, #0]
    6176:	2b00      	cmp	r3, #0
    6178:	d026      	beq.n	61c8 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    617a:	2300      	movs	r3, #0
    617c:	9303      	str	r3, [sp, #12]
    617e:	e01c      	b.n	61ba <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    6180:	4b3c      	ldr	r3, [pc, #240]	; (6274 <getSlowDividerConfig+0x13c>)
    6182:	6819      	ldr	r1, [r3, #0]
    6184:	9a03      	ldr	r2, [sp, #12]
    6186:	4613      	mov	r3, r2
    6188:	005b      	lsls	r3, r3, #1
    618a:	4413      	add	r3, r2
    618c:	009b      	lsls	r3, r3, #2
    618e:	440b      	add	r3, r1
    6190:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    6194:	681b      	ldr	r3, [r3, #0]
    6196:	9a01      	ldr	r2, [sp, #4]
    6198:	429a      	cmp	r2, r3
    619a:	d10b      	bne.n	61b4 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    619c:	4b35      	ldr	r3, [pc, #212]	; (6274 <getSlowDividerConfig+0x13c>)
    619e:	6819      	ldr	r1, [r3, #0]
    61a0:	9a03      	ldr	r2, [sp, #12]
    61a2:	4613      	mov	r3, r2
    61a4:	005b      	lsls	r3, r3, #1
    61a6:	4413      	add	r3, r2
    61a8:	009b      	lsls	r3, r3, #2
    61aa:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    61ae:	440b      	add	r3, r1
    61b0:	9305      	str	r3, [sp, #20]
                break;
    61b2:	e009      	b.n	61c8 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    61b4:	9b03      	ldr	r3, [sp, #12]
    61b6:	3301      	adds	r3, #1
    61b8:	9303      	str	r3, [sp, #12]
    61ba:	4b2e      	ldr	r3, [pc, #184]	; (6274 <getSlowDividerConfig+0x13c>)
    61bc:	681b      	ldr	r3, [r3, #0]
    61be:	7b1b      	ldrb	r3, [r3, #12]
    61c0:	461a      	mov	r2, r3
    61c2:	9b03      	ldr	r3, [sp, #12]
    61c4:	4293      	cmp	r3, r2
    61c6:	d3db      	bcc.n	6180 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    61c8:	9b05      	ldr	r3, [sp, #20]
    61ca:	2b00      	cmp	r3, #0
    61cc:	d14a      	bne.n	6264 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    61ce:	9a04      	ldr	r2, [sp, #16]
    61d0:	4613      	mov	r3, r2
    61d2:	005b      	lsls	r3, r3, #1
    61d4:	4413      	add	r3, r2
    61d6:	009b      	lsls	r3, r3, #2
    61d8:	4a27      	ldr	r2, [pc, #156]	; (6278 <getSlowDividerConfig+0x140>)
    61da:	4413      	add	r3, r2
    61dc:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    61de:	4926      	ldr	r1, [pc, #152]	; (6278 <getSlowDividerConfig+0x140>)
    61e0:	9a04      	ldr	r2, [sp, #16]
    61e2:	4613      	mov	r3, r2
    61e4:	005b      	lsls	r3, r3, #1
    61e6:	4413      	add	r3, r2
    61e8:	009b      	lsls	r3, r3, #2
    61ea:	440b      	add	r3, r1
    61ec:	9a01      	ldr	r2, [sp, #4]
    61ee:	601a      	str	r2, [r3, #0]
        switch(Name)
    61f0:	9b01      	ldr	r3, [sp, #4]
    61f2:	2b27      	cmp	r3, #39	; 0x27
    61f4:	d027      	beq.n	6246 <getSlowDividerConfig+0x10e>
    61f6:	9b01      	ldr	r3, [sp, #4]
    61f8:	2b27      	cmp	r3, #39	; 0x27
    61fa:	d835      	bhi.n	6268 <getSlowDividerConfig+0x130>
    61fc:	9b01      	ldr	r3, [sp, #4]
    61fe:	2b25      	cmp	r3, #37	; 0x25
    6200:	d003      	beq.n	620a <getSlowDividerConfig+0xd2>
    6202:	9b01      	ldr	r3, [sp, #4]
    6204:	2b26      	cmp	r3, #38	; 0x26
    6206:	d00f      	beq.n	6228 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    6208:	e02e      	b.n	6268 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    620a:	4b1c      	ldr	r3, [pc, #112]	; (627c <getSlowDividerConfig+0x144>)
    620c:	695b      	ldr	r3, [r3, #20]
    620e:	f003 030f 	and.w	r3, r3, #15
    6212:	1c59      	adds	r1, r3, #1
    6214:	4818      	ldr	r0, [pc, #96]	; (6278 <getSlowDividerConfig+0x140>)
    6216:	9a04      	ldr	r2, [sp, #16]
    6218:	4613      	mov	r3, r2
    621a:	005b      	lsls	r3, r3, #1
    621c:	4413      	add	r3, r2
    621e:	009b      	lsls	r3, r3, #2
    6220:	4403      	add	r3, r0
    6222:	3304      	adds	r3, #4
    6224:	6019      	str	r1, [r3, #0]
                break;
    6226:	e020      	b.n	626a <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    6228:	4b14      	ldr	r3, [pc, #80]	; (627c <getSlowDividerConfig+0x144>)
    622a:	699b      	ldr	r3, [r3, #24]
    622c:	f003 030f 	and.w	r3, r3, #15
    6230:	1c59      	adds	r1, r3, #1
    6232:	4811      	ldr	r0, [pc, #68]	; (6278 <getSlowDividerConfig+0x140>)
    6234:	9a04      	ldr	r2, [sp, #16]
    6236:	4613      	mov	r3, r2
    6238:	005b      	lsls	r3, r3, #1
    623a:	4413      	add	r3, r2
    623c:	009b      	lsls	r3, r3, #2
    623e:	4403      	add	r3, r0
    6240:	3304      	adds	r3, #4
    6242:	6019      	str	r1, [r3, #0]
                break;
    6244:	e011      	b.n	626a <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    6246:	4b0d      	ldr	r3, [pc, #52]	; (627c <getSlowDividerConfig+0x144>)
    6248:	69db      	ldr	r3, [r3, #28]
    624a:	f003 030f 	and.w	r3, r3, #15
    624e:	1c59      	adds	r1, r3, #1
    6250:	4809      	ldr	r0, [pc, #36]	; (6278 <getSlowDividerConfig+0x140>)
    6252:	9a04      	ldr	r2, [sp, #16]
    6254:	4613      	mov	r3, r2
    6256:	005b      	lsls	r3, r3, #1
    6258:	4413      	add	r3, r2
    625a:	009b      	lsls	r3, r3, #2
    625c:	4403      	add	r3, r0
    625e:	3304      	adds	r3, #4
    6260:	6019      	str	r1, [r3, #0]
                break;
    6262:	e002      	b.n	626a <getSlowDividerConfig+0x132>
        }
    }
    6264:	bf00      	nop
    6266:	e000      	b.n	626a <getSlowDividerConfig+0x132>
                break;
    6268:	bf00      	nop

    return ReturnValue;
    626a:	9b05      	ldr	r3, [sp, #20]
}
    626c:	4618      	mov	r0, r3
    626e:	b006      	add	sp, #24
    6270:	4770      	bx	lr
    6272:	bf00      	nop
    6274:	1fff8bdc 	.word	0x1fff8bdc
    6278:	1fff8cf0 	.word	0x1fff8cf0
    627c:	40064000 	.word	0x40064000

00006280 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    6280:	b500      	push	{lr}
    6282:	b083      	sub	sp, #12
    6284:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    6286:	4b64      	ldr	r3, [pc, #400]	; (6418 <Clock_Ip_ClockInitializeObjects+0x198>)
    6288:	781b      	ldrb	r3, [r3, #0]
    628a:	f083 0301 	eor.w	r3, r3, #1
    628e:	b2db      	uxtb	r3, r3
    6290:	2b00      	cmp	r3, #0
    6292:	d05b      	beq.n	634c <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    6294:	4b60      	ldr	r3, [pc, #384]	; (6418 <Clock_Ip_ClockInitializeObjects+0x198>)
    6296:	2201      	movs	r2, #1
    6298:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    629a:	4b60      	ldr	r3, [pc, #384]	; (641c <Clock_Ip_ClockInitializeObjects+0x19c>)
    629c:	785b      	ldrb	r3, [r3, #1]
    629e:	461a      	mov	r2, r3
    62a0:	4613      	mov	r3, r2
    62a2:	009b      	lsls	r3, r3, #2
    62a4:	4413      	add	r3, r2
    62a6:	009b      	lsls	r3, r3, #2
    62a8:	4a5d      	ldr	r2, [pc, #372]	; (6420 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    62aa:	4413      	add	r3, r2
    62ac:	4a5d      	ldr	r2, [pc, #372]	; (6424 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    62ae:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    62b0:	4b5d      	ldr	r3, [pc, #372]	; (6428 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    62b2:	785b      	ldrb	r3, [r3, #1]
    62b4:	461a      	mov	r2, r3
    62b6:	4613      	mov	r3, r2
    62b8:	009b      	lsls	r3, r3, #2
    62ba:	4413      	add	r3, r2
    62bc:	009b      	lsls	r3, r3, #2
    62be:	4a5b      	ldr	r2, [pc, #364]	; (642c <Clock_Ip_ClockInitializeObjects+0x1ac>)
    62c0:	4413      	add	r3, r2
    62c2:	4a5b      	ldr	r2, [pc, #364]	; (6430 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    62c4:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    62c6:	4b5b      	ldr	r3, [pc, #364]	; (6434 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    62c8:	791b      	ldrb	r3, [r3, #4]
    62ca:	461a      	mov	r2, r3
    62cc:	4613      	mov	r3, r2
    62ce:	005b      	lsls	r3, r3, #1
    62d0:	4413      	add	r3, r2
    62d2:	009b      	lsls	r3, r3, #2
    62d4:	4a58      	ldr	r2, [pc, #352]	; (6438 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    62d6:	4413      	add	r3, r2
    62d8:	4a58      	ldr	r2, [pc, #352]	; (643c <Clock_Ip_ClockInitializeObjects+0x1bc>)
    62da:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    62dc:	4b58      	ldr	r3, [pc, #352]	; (6440 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    62de:	795b      	ldrb	r3, [r3, #5]
    62e0:	00db      	lsls	r3, r3, #3
    62e2:	4a58      	ldr	r2, [pc, #352]	; (6444 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    62e4:	4413      	add	r3, r2
    62e6:	4a58      	ldr	r2, [pc, #352]	; (6448 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    62e8:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    62ea:	4b55      	ldr	r3, [pc, #340]	; (6440 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    62ec:	79db      	ldrb	r3, [r3, #7]
    62ee:	00db      	lsls	r3, r3, #3
    62f0:	4a54      	ldr	r2, [pc, #336]	; (6444 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    62f2:	4413      	add	r3, r2
    62f4:	4a55      	ldr	r2, [pc, #340]	; (644c <Clock_Ip_ClockInitializeObjects+0x1cc>)
    62f6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    62f8:	4b55      	ldr	r3, [pc, #340]	; (6450 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    62fa:	799b      	ldrb	r3, [r3, #6]
    62fc:	009b      	lsls	r3, r3, #2
    62fe:	4a55      	ldr	r2, [pc, #340]	; (6454 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    6300:	4413      	add	r3, r2
    6302:	4a55      	ldr	r2, [pc, #340]	; (6458 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    6304:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    6306:	4b52      	ldr	r3, [pc, #328]	; (6450 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    6308:	7a1b      	ldrb	r3, [r3, #8]
    630a:	009b      	lsls	r3, r3, #2
    630c:	4a51      	ldr	r2, [pc, #324]	; (6454 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    630e:	4413      	add	r3, r2
    6310:	4a52      	ldr	r2, [pc, #328]	; (645c <Clock_Ip_ClockInitializeObjects+0x1dc>)
    6312:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    6314:	4b4e      	ldr	r3, [pc, #312]	; (6450 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    6316:	7a5b      	ldrb	r3, [r3, #9]
    6318:	009b      	lsls	r3, r3, #2
    631a:	4a4e      	ldr	r2, [pc, #312]	; (6454 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    631c:	4413      	add	r3, r2
    631e:	4a50      	ldr	r2, [pc, #320]	; (6460 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    6320:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    6322:	4b4b      	ldr	r3, [pc, #300]	; (6450 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    6324:	7adb      	ldrb	r3, [r3, #11]
    6326:	009b      	lsls	r3, r3, #2
    6328:	4a4a      	ldr	r2, [pc, #296]	; (6454 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    632a:	4413      	add	r3, r2
    632c:	4a4d      	ldr	r2, [pc, #308]	; (6464 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    632e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    6330:	4b47      	ldr	r3, [pc, #284]	; (6450 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    6332:	7b1b      	ldrb	r3, [r3, #12]
    6334:	009b      	lsls	r3, r3, #2
    6336:	4a47      	ldr	r2, [pc, #284]	; (6454 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    6338:	4413      	add	r3, r2
    633a:	4a4b      	ldr	r2, [pc, #300]	; (6468 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    633c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    633e:	4b44      	ldr	r3, [pc, #272]	; (6450 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    6340:	7b9b      	ldrb	r3, [r3, #14]
    6342:	009b      	lsls	r3, r3, #2
    6344:	4a43      	ldr	r2, [pc, #268]	; (6454 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    6346:	4413      	add	r3, r2
    6348:	4a48      	ldr	r2, [pc, #288]	; (646c <Clock_Ip_ClockInitializeObjects+0x1ec>)
    634a:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    634c:	4b48      	ldr	r3, [pc, #288]	; (6470 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    634e:	781b      	ldrb	r3, [r3, #0]
    6350:	2b00      	cmp	r3, #0
    6352:	d002      	beq.n	635a <Clock_Ip_ClockInitializeObjects+0xda>
    6354:	9b01      	ldr	r3, [sp, #4]
    6356:	2b00      	cmp	r3, #0
    6358:	d003      	beq.n	6362 <Clock_Ip_ClockInitializeObjects+0xe2>
    635a:	4b46      	ldr	r3, [pc, #280]	; (6474 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    635c:	781b      	ldrb	r3, [r3, #0]
    635e:	2b00      	cmp	r3, #0
    6360:	d056      	beq.n	6410 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    6362:	f7ff fc09 	bl	5b78 <getFircConfig>
    6366:	4603      	mov	r3, r0
    6368:	4a43      	ldr	r2, [pc, #268]	; (6478 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    636a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    636c:	f7ff fc60 	bl	5c30 <getSoscConfig>
    6370:	4603      	mov	r3, r0
    6372:	4a42      	ldr	r2, [pc, #264]	; (647c <Clock_Ip_ClockInitializeObjects+0x1fc>)
    6374:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    6376:	f7ff fca7 	bl	5cc8 <getSpllConfig>
    637a:	4603      	mov	r3, r0
    637c:	4a40      	ldr	r2, [pc, #256]	; (6480 <Clock_Ip_ClockInitializeObjects+0x200>)
    637e:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    6380:	2019      	movs	r0, #25
    6382:	f7ff fcfb 	bl	5d7c <getSelectorConfig>
    6386:	4603      	mov	r3, r0
    6388:	4a3e      	ldr	r2, [pc, #248]	; (6484 <Clock_Ip_ClockInitializeObjects+0x204>)
    638a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    638c:	201a      	movs	r0, #26
    638e:	f7ff fcf5 	bl	5d7c <getSelectorConfig>
    6392:	4603      	mov	r3, r0
    6394:	4a3c      	ldr	r2, [pc, #240]	; (6488 <Clock_Ip_ClockInitializeObjects+0x208>)
    6396:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    6398:	201b      	movs	r0, #27
    639a:	f7ff fcef 	bl	5d7c <getSelectorConfig>
    639e:	4603      	mov	r3, r0
    63a0:	4a3a      	ldr	r2, [pc, #232]	; (648c <Clock_Ip_ClockInitializeObjects+0x20c>)
    63a2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    63a4:	201d      	movs	r0, #29
    63a6:	f7ff fd7b 	bl	5ea0 <getCoreDividerConfig>
    63aa:	4603      	mov	r3, r0
    63ac:	4a38      	ldr	r2, [pc, #224]	; (6490 <Clock_Ip_ClockInitializeObjects+0x210>)
    63ae:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    63b0:	201e      	movs	r0, #30
    63b2:	f7ff fd75 	bl	5ea0 <getCoreDividerConfig>
    63b6:	4603      	mov	r3, r0
    63b8:	4a36      	ldr	r2, [pc, #216]	; (6494 <Clock_Ip_ClockInitializeObjects+0x214>)
    63ba:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    63bc:	201f      	movs	r0, #31
    63be:	f7ff fd6f 	bl	5ea0 <getCoreDividerConfig>
    63c2:	4603      	mov	r3, r0
    63c4:	4a34      	ldr	r2, [pc, #208]	; (6498 <Clock_Ip_ClockInitializeObjects+0x218>)
    63c6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    63c8:	2021      	movs	r0, #33	; 0x21
    63ca:	f7ff fe0f 	bl	5fec <getBusDividerConfig>
    63ce:	4603      	mov	r3, r0
    63d0:	4a32      	ldr	r2, [pc, #200]	; (649c <Clock_Ip_ClockInitializeObjects+0x21c>)
    63d2:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    63d4:	2022      	movs	r0, #34	; 0x22
    63d6:	f7ff fe09 	bl	5fec <getBusDividerConfig>
    63da:	4603      	mov	r3, r0
    63dc:	4a30      	ldr	r2, [pc, #192]	; (64a0 <Clock_Ip_ClockInitializeObjects+0x220>)
    63de:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    63e0:	2023      	movs	r0, #35	; 0x23
    63e2:	f7ff fe03 	bl	5fec <getBusDividerConfig>
    63e6:	4603      	mov	r3, r0
    63e8:	4a2e      	ldr	r2, [pc, #184]	; (64a4 <Clock_Ip_ClockInitializeObjects+0x224>)
    63ea:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    63ec:	2025      	movs	r0, #37	; 0x25
    63ee:	f7ff fea3 	bl	6138 <getSlowDividerConfig>
    63f2:	4603      	mov	r3, r0
    63f4:	4a2c      	ldr	r2, [pc, #176]	; (64a8 <Clock_Ip_ClockInitializeObjects+0x228>)
    63f6:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    63f8:	2026      	movs	r0, #38	; 0x26
    63fa:	f7ff fe9d 	bl	6138 <getSlowDividerConfig>
    63fe:	4603      	mov	r3, r0
    6400:	4a2a      	ldr	r2, [pc, #168]	; (64ac <Clock_Ip_ClockInitializeObjects+0x22c>)
    6402:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    6404:	2027      	movs	r0, #39	; 0x27
    6406:	f7ff fe97 	bl	6138 <getSlowDividerConfig>
    640a:	4603      	mov	r3, r0
    640c:	4a28      	ldr	r2, [pc, #160]	; (64b0 <Clock_Ip_ClockInitializeObjects+0x230>)
    640e:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    6410:	bf00      	nop
    6412:	b003      	add	sp, #12
    6414:	f85d fb04 	ldr.w	pc, [sp], #4
    6418:	1fff8d14 	.word	0x1fff8d14
    641c:	000190a0 	.word	0x000190a0
    6420:	000196ec 	.word	0x000196ec
    6424:	1fff8be0 	.word	0x1fff8be0
    6428:	00019060 	.word	0x00019060
    642c:	00019634 	.word	0x00019634
    6430:	1fff8be4 	.word	0x1fff8be4
    6434:	00019070 	.word	0x00019070
    6438:	000196a0 	.word	0x000196a0
    643c:	1fff8be8 	.word	0x1fff8be8
    6440:	000190b0 	.word	0x000190b0
    6444:	00019718 	.word	0x00019718
    6448:	1fff8bec 	.word	0x1fff8bec
    644c:	1fff8c28 	.word	0x1fff8c28
    6450:	00019040 	.word	0x00019040
    6454:	000195f0 	.word	0x000195f0
    6458:	1fff8bf0 	.word	0x1fff8bf0
    645c:	1fff8c2c 	.word	0x1fff8c2c
    6460:	1fff8bf4 	.word	0x1fff8bf4
    6464:	1fff8c30 	.word	0x1fff8c30
    6468:	1fff8bf8 	.word	0x1fff8bf8
    646c:	1fff8c34 	.word	0x1fff8c34
    6470:	1fff8b19 	.word	0x1fff8b19
    6474:	1fff8b10 	.word	0x1fff8b10
    6478:	1fff8bfc 	.word	0x1fff8bfc
    647c:	1fff8c00 	.word	0x1fff8c00
    6480:	1fff8c04 	.word	0x1fff8c04
    6484:	1fff8c08 	.word	0x1fff8c08
    6488:	1fff8c0c 	.word	0x1fff8c0c
    648c:	1fff8c38 	.word	0x1fff8c38
    6490:	1fff8c10 	.word	0x1fff8c10
    6494:	1fff8c14 	.word	0x1fff8c14
    6498:	1fff8c3c 	.word	0x1fff8c3c
    649c:	1fff8c18 	.word	0x1fff8c18
    64a0:	1fff8c1c 	.word	0x1fff8c1c
    64a4:	1fff8c40 	.word	0x1fff8c40
    64a8:	1fff8c20 	.word	0x1fff8c20
    64ac:	1fff8c24 	.word	0x1fff8c24
    64b0:	1fff8c44 	.word	0x1fff8c44

000064b4 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    64b4:	b500      	push	{lr}
    64b6:	b083      	sub	sp, #12
    64b8:	9001      	str	r0, [sp, #4]
    64ba:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    64bc:	9b01      	ldr	r3, [sp, #4]
    64be:	2b03      	cmp	r3, #3
    64c0:	f000 8090 	beq.w	65e4 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    64c4:	9b01      	ldr	r3, [sp, #4]
    64c6:	2b03      	cmp	r3, #3
    64c8:	f200 80d3 	bhi.w	6672 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    64cc:	9b01      	ldr	r3, [sp, #4]
    64ce:	2b00      	cmp	r3, #0
    64d0:	d040      	beq.n	6554 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    64d2:	9b01      	ldr	r3, [sp, #4]
    64d4:	3b01      	subs	r3, #1
    64d6:	2b01      	cmp	r3, #1
    64d8:	f200 80cb 	bhi.w	6672 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    64dc:	9b00      	ldr	r3, [sp, #0]
    64de:	2b00      	cmp	r3, #0
    64e0:	f040 80c9 	bne.w	6676 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    64e4:	4b68      	ldr	r3, [pc, #416]	; (6688 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    64e6:	2200      	movs	r2, #0
    64e8:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    64ea:	4b68      	ldr	r3, [pc, #416]	; (668c <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    64ec:	681b      	ldr	r3, [r3, #0]
    64ee:	685b      	ldr	r3, [r3, #4]
    64f0:	4a67      	ldr	r2, [pc, #412]	; (6690 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    64f2:	6812      	ldr	r2, [r2, #0]
    64f4:	4610      	mov	r0, r2
    64f6:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    64f8:	4b66      	ldr	r3, [pc, #408]	; (6694 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    64fa:	681b      	ldr	r3, [r3, #0]
    64fc:	681b      	ldr	r3, [r3, #0]
    64fe:	4a66      	ldr	r2, [pc, #408]	; (6698 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    6500:	6812      	ldr	r2, [r2, #0]
    6502:	4610      	mov	r0, r2
    6504:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    6506:	4b65      	ldr	r3, [pc, #404]	; (669c <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    6508:	681b      	ldr	r3, [r3, #0]
    650a:	681b      	ldr	r3, [r3, #0]
    650c:	4a64      	ldr	r2, [pc, #400]	; (66a0 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    650e:	6812      	ldr	r2, [r2, #0]
    6510:	4610      	mov	r0, r2
    6512:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    6514:	4b63      	ldr	r3, [pc, #396]	; (66a4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    6516:	681b      	ldr	r3, [r3, #0]
    6518:	681b      	ldr	r3, [r3, #0]
    651a:	4a63      	ldr	r2, [pc, #396]	; (66a8 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    651c:	6812      	ldr	r2, [r2, #0]
    651e:	4610      	mov	r0, r2
    6520:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    6522:	4b62      	ldr	r3, [pc, #392]	; (66ac <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    6524:	681b      	ldr	r3, [r3, #0]
    6526:	691b      	ldr	r3, [r3, #16]
    6528:	4a61      	ldr	r2, [pc, #388]	; (66b0 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    652a:	6812      	ldr	r2, [r2, #0]
    652c:	6812      	ldr	r2, [r2, #0]
    652e:	4610      	mov	r0, r2
    6530:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    6532:	4b60      	ldr	r3, [pc, #384]	; (66b4 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    6534:	681b      	ldr	r3, [r3, #0]
    6536:	68db      	ldr	r3, [r3, #12]
    6538:	4a5f      	ldr	r2, [pc, #380]	; (66b8 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    653a:	6812      	ldr	r2, [r2, #0]
    653c:	6812      	ldr	r2, [r2, #0]
    653e:	4610      	mov	r0, r2
    6540:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    6542:	4b5e      	ldr	r3, [pc, #376]	; (66bc <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    6544:	681b      	ldr	r3, [r3, #0]
    6546:	689b      	ldr	r3, [r3, #8]
    6548:	4a5d      	ldr	r2, [pc, #372]	; (66c0 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    654a:	6812      	ldr	r2, [r2, #0]
    654c:	6812      	ldr	r2, [r2, #0]
    654e:	4610      	mov	r0, r2
    6550:	4798      	blx	r3
            }
        }
        break;
    6552:	e090      	b.n	6676 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    6554:	9b00      	ldr	r3, [sp, #0]
    6556:	2b02      	cmp	r3, #2
    6558:	f040 808f 	bne.w	667a <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    655c:	4b4a      	ldr	r3, [pc, #296]	; (6688 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    655e:	2201      	movs	r2, #1
    6560:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    6562:	4b56      	ldr	r3, [pc, #344]	; (66bc <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    6564:	681b      	ldr	r3, [r3, #0]
    6566:	685b      	ldr	r3, [r3, #4]
    6568:	4a55      	ldr	r2, [pc, #340]	; (66c0 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    656a:	6812      	ldr	r2, [r2, #0]
    656c:	4610      	mov	r0, r2
    656e:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    6570:	4b50      	ldr	r3, [pc, #320]	; (66b4 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    6572:	681b      	ldr	r3, [r3, #0]
    6574:	691b      	ldr	r3, [r3, #16]
    6576:	4a50      	ldr	r2, [pc, #320]	; (66b8 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    6578:	6812      	ldr	r2, [r2, #0]
    657a:	4610      	mov	r0, r2
    657c:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    657e:	4b4d      	ldr	r3, [pc, #308]	; (66b4 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    6580:	681b      	ldr	r3, [r3, #0]
    6582:	689b      	ldr	r3, [r3, #8]
    6584:	4a4c      	ldr	r2, [pc, #304]	; (66b8 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    6586:	6812      	ldr	r2, [r2, #0]
    6588:	4610      	mov	r0, r2
    658a:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    658c:	4b47      	ldr	r3, [pc, #284]	; (66ac <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    658e:	681b      	ldr	r3, [r3, #0]
    6590:	68db      	ldr	r3, [r3, #12]
    6592:	4a47      	ldr	r2, [pc, #284]	; (66b0 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    6594:	6812      	ldr	r2, [r2, #0]
    6596:	4610      	mov	r0, r2
    6598:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    659a:	4b44      	ldr	r3, [pc, #272]	; (66ac <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    659c:	681b      	ldr	r3, [r3, #0]
    659e:	689b      	ldr	r3, [r3, #8]
    65a0:	4a43      	ldr	r2, [pc, #268]	; (66b0 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    65a2:	6812      	ldr	r2, [r2, #0]
    65a4:	6812      	ldr	r2, [r2, #0]
    65a6:	4610      	mov	r0, r2
    65a8:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    65aa:	4b38      	ldr	r3, [pc, #224]	; (668c <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    65ac:	681b      	ldr	r3, [r3, #0]
    65ae:	685b      	ldr	r3, [r3, #4]
    65b0:	4a44      	ldr	r2, [pc, #272]	; (66c4 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    65b2:	6812      	ldr	r2, [r2, #0]
    65b4:	4610      	mov	r0, r2
    65b6:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    65b8:	4b36      	ldr	r3, [pc, #216]	; (6694 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    65ba:	681b      	ldr	r3, [r3, #0]
    65bc:	681b      	ldr	r3, [r3, #0]
    65be:	4a42      	ldr	r2, [pc, #264]	; (66c8 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    65c0:	6812      	ldr	r2, [r2, #0]
    65c2:	4610      	mov	r0, r2
    65c4:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    65c6:	4b35      	ldr	r3, [pc, #212]	; (669c <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    65c8:	681b      	ldr	r3, [r3, #0]
    65ca:	681b      	ldr	r3, [r3, #0]
    65cc:	4a3f      	ldr	r2, [pc, #252]	; (66cc <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    65ce:	6812      	ldr	r2, [r2, #0]
    65d0:	4610      	mov	r0, r2
    65d2:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    65d4:	4b33      	ldr	r3, [pc, #204]	; (66a4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    65d6:	681b      	ldr	r3, [r3, #0]
    65d8:	681b      	ldr	r3, [r3, #0]
    65da:	4a3d      	ldr	r2, [pc, #244]	; (66d0 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    65dc:	6812      	ldr	r2, [r2, #0]
    65de:	4610      	mov	r0, r2
    65e0:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    65e2:	e04a      	b.n	667a <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    65e4:	9b00      	ldr	r3, [sp, #0]
    65e6:	2b02      	cmp	r3, #2
    65e8:	d149      	bne.n	667e <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    65ea:	4b27      	ldr	r3, [pc, #156]	; (6688 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    65ec:	2201      	movs	r2, #1
    65ee:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    65f0:	4b32      	ldr	r3, [pc, #200]	; (66bc <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    65f2:	681b      	ldr	r3, [r3, #0]
    65f4:	685b      	ldr	r3, [r3, #4]
    65f6:	4a32      	ldr	r2, [pc, #200]	; (66c0 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    65f8:	6812      	ldr	r2, [r2, #0]
    65fa:	4610      	mov	r0, r2
    65fc:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    65fe:	4b2d      	ldr	r3, [pc, #180]	; (66b4 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    6600:	681b      	ldr	r3, [r3, #0]
    6602:	691b      	ldr	r3, [r3, #16]
    6604:	4a2c      	ldr	r2, [pc, #176]	; (66b8 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    6606:	6812      	ldr	r2, [r2, #0]
    6608:	4610      	mov	r0, r2
    660a:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    660c:	4b29      	ldr	r3, [pc, #164]	; (66b4 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    660e:	681b      	ldr	r3, [r3, #0]
    6610:	689b      	ldr	r3, [r3, #8]
    6612:	4a29      	ldr	r2, [pc, #164]	; (66b8 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    6614:	6812      	ldr	r2, [r2, #0]
    6616:	4610      	mov	r0, r2
    6618:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    661a:	4b24      	ldr	r3, [pc, #144]	; (66ac <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    661c:	681b      	ldr	r3, [r3, #0]
    661e:	68db      	ldr	r3, [r3, #12]
    6620:	4a23      	ldr	r2, [pc, #140]	; (66b0 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    6622:	6812      	ldr	r2, [r2, #0]
    6624:	4610      	mov	r0, r2
    6626:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    6628:	4b20      	ldr	r3, [pc, #128]	; (66ac <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    662a:	681b      	ldr	r3, [r3, #0]
    662c:	689b      	ldr	r3, [r3, #8]
    662e:	4a20      	ldr	r2, [pc, #128]	; (66b0 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    6630:	6812      	ldr	r2, [r2, #0]
    6632:	6812      	ldr	r2, [r2, #0]
    6634:	4610      	mov	r0, r2
    6636:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    6638:	4b26      	ldr	r3, [pc, #152]	; (66d4 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    663a:	681b      	ldr	r3, [r3, #0]
    663c:	685b      	ldr	r3, [r3, #4]
    663e:	4a26      	ldr	r2, [pc, #152]	; (66d8 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    6640:	6812      	ldr	r2, [r2, #0]
    6642:	4610      	mov	r0, r2
    6644:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    6646:	4b25      	ldr	r3, [pc, #148]	; (66dc <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    6648:	681b      	ldr	r3, [r3, #0]
    664a:	681b      	ldr	r3, [r3, #0]
    664c:	4a24      	ldr	r2, [pc, #144]	; (66e0 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    664e:	6812      	ldr	r2, [r2, #0]
    6650:	4610      	mov	r0, r2
    6652:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    6654:	4b23      	ldr	r3, [pc, #140]	; (66e4 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    6656:	681b      	ldr	r3, [r3, #0]
    6658:	681b      	ldr	r3, [r3, #0]
    665a:	4a23      	ldr	r2, [pc, #140]	; (66e8 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    665c:	6812      	ldr	r2, [r2, #0]
    665e:	4610      	mov	r0, r2
    6660:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    6662:	4b22      	ldr	r3, [pc, #136]	; (66ec <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    6664:	681b      	ldr	r3, [r3, #0]
    6666:	681b      	ldr	r3, [r3, #0]
    6668:	4a21      	ldr	r2, [pc, #132]	; (66f0 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    666a:	6812      	ldr	r2, [r2, #0]
    666c:	4610      	mov	r0, r2
    666e:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    6670:	e005      	b.n	667e <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    6672:	bf00      	nop
    6674:	e004      	b.n	6680 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    6676:	bf00      	nop
    6678:	e002      	b.n	6680 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    667a:	bf00      	nop
    667c:	e000      	b.n	6680 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    667e:	bf00      	nop
    }

}
    6680:	bf00      	nop
    6682:	b003      	add	sp, #12
    6684:	f85d fb04 	ldr.w	pc, [sp], #4
    6688:	1fff8b19 	.word	0x1fff8b19
    668c:	1fff8bec 	.word	0x1fff8bec
    6690:	1fff8c0c 	.word	0x1fff8c0c
    6694:	1fff8bf0 	.word	0x1fff8bf0
    6698:	1fff8c14 	.word	0x1fff8c14
    669c:	1fff8bf4 	.word	0x1fff8bf4
    66a0:	1fff8c1c 	.word	0x1fff8c1c
    66a4:	1fff8bf8 	.word	0x1fff8bf8
    66a8:	1fff8c24 	.word	0x1fff8c24
    66ac:	1fff8be0 	.word	0x1fff8be0
    66b0:	1fff8c04 	.word	0x1fff8c04
    66b4:	1fff8be4 	.word	0x1fff8be4
    66b8:	1fff8c00 	.word	0x1fff8c00
    66bc:	1fff8be8 	.word	0x1fff8be8
    66c0:	1fff8bfc 	.word	0x1fff8bfc
    66c4:	1fff8c08 	.word	0x1fff8c08
    66c8:	1fff8c10 	.word	0x1fff8c10
    66cc:	1fff8c18 	.word	0x1fff8c18
    66d0:	1fff8c20 	.word	0x1fff8c20
    66d4:	1fff8c28 	.word	0x1fff8c28
    66d8:	1fff8c38 	.word	0x1fff8c38
    66dc:	1fff8c2c 	.word	0x1fff8c2c
    66e0:	1fff8c3c 	.word	0x1fff8c3c
    66e4:	1fff8c30 	.word	0x1fff8c30
    66e8:	1fff8c40 	.word	0x1fff8c40
    66ec:	1fff8c34 	.word	0x1fff8c34
    66f0:	1fff8c44 	.word	0x1fff8c44

000066f4 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    66f4:	b500      	push	{lr}
    66f6:	b083      	sub	sp, #12
    66f8:	9001      	str	r0, [sp, #4]
    66fa:	9100      	str	r1, [sp, #0]
    switch(Command)
    66fc:	9b00      	ldr	r3, [sp, #0]
    66fe:	2b04      	cmp	r3, #4
    6700:	d010      	beq.n	6724 <Clock_Ip_Command+0x30>
    6702:	9b00      	ldr	r3, [sp, #0]
    6704:	2b04      	cmp	r3, #4
    6706:	d811      	bhi.n	672c <Clock_Ip_Command+0x38>
    6708:	9b00      	ldr	r3, [sp, #0]
    670a:	2b01      	cmp	r3, #1
    670c:	d006      	beq.n	671c <Clock_Ip_Command+0x28>
    670e:	9b00      	ldr	r3, [sp, #0]
    6710:	2b02      	cmp	r3, #2
    6712:	d10b      	bne.n	672c <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    6714:	9801      	ldr	r0, [sp, #4]
    6716:	f7ff fdb3 	bl	6280 <Clock_Ip_ClockInitializeObjects>
            break;
    671a:	e008      	b.n	672e <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    671c:	9801      	ldr	r0, [sp, #4]
    671e:	f7ff f9db 	bl	5ad8 <Clock_Ip_SpecificPlatformInitClock>
            break;
    6722:	e004      	b.n	672e <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    6724:	9801      	ldr	r0, [sp, #4]
    6726:	f7ff f8ed 	bl	5904 <DisableSafeClock>
            break;
    672a:	e000      	b.n	672e <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    672c:	bf00      	nop
    }
}
    672e:	bf00      	nop
    6730:	b003      	add	sp, #12
    6732:	f85d fb04 	ldr.w	pc, [sp], #4
    6736:	bf00      	nop

00006738 <Mcu_CheckInit>:
/**
* @brief Mcu_CheckInit - checks for Mcu_Init
* @implements Mcu_CheckInit_Activity
*/
static Std_ReturnType Mcu_CheckInit(const Mcu_ConfigType * ConfigPtr)
{
    6738:	b500      	push	{lr}
    673a:	b085      	sub	sp, #20
    673c:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    673e:	2300      	movs	r3, #0
    6740:	f88d 300f 	strb.w	r3, [sp, #15]

#if (MCU_PRECOMPILE_SUPPORT == STD_OFF)
    if (NULL_PTR == ConfigPtr)
    6744:	9b01      	ldr	r3, [sp, #4]
    6746:	2b00      	cmp	r3, #0
    6748:	d108      	bne.n	675c <Mcu_CheckInit+0x24>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    674a:	2301      	movs	r3, #1
    674c:	f88d 300f 	strb.w	r3, [sp, #15]

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_INIT_ID, MCU_E_INIT_FAILED);
    6750:	2311      	movs	r3, #17
    6752:	2200      	movs	r2, #0
    6754:	2100      	movs	r1, #0
    6756:	2065      	movs	r0, #101	; 0x65
    6758:	f011 fe5c 	bl	18414 <Det_ReportError>

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_INIT_ID, MCU_E_INIT_FAILED);
    }
#endif /* (MCU_PRECOMPILE_SUPPORT == STD_ON) */

    return CheckStatus;
    675c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6760:	4618      	mov	r0, r3
    6762:	b005      	add	sp, #20
    6764:	f85d fb04 	ldr.w	pc, [sp], #4

00006768 <Mcu_CheckInitClock>:
/**
* @brief Mcu_CheckInitClock - checks for Mcu_InitClock
* @implements Mcu_CheckInitClock_Activity
*/
static Std_ReturnType Mcu_CheckInitClock(Mcu_ClockType ClockSetting)
{
    6768:	b500      	push	{lr}
    676a:	b085      	sub	sp, #20
    676c:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    676e:	2300      	movs	r3, #0
    6770:	f88d 300f 	strb.w	r3, [sp, #15]

    if (ClockSetting >= Mcu_pConfigPtr->NoClkConfigs)
    6774:	4b0a      	ldr	r3, [pc, #40]	; (67a0 <Mcu_CheckInitClock+0x38>)
    6776:	681b      	ldr	r3, [r3, #0]
    6778:	68db      	ldr	r3, [r3, #12]
    677a:	9a01      	ldr	r2, [sp, #4]
    677c:	429a      	cmp	r2, r3
    677e:	d308      	bcc.n	6792 <Mcu_CheckInitClock+0x2a>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    6780:	2301      	movs	r3, #1
    6782:	f88d 300f 	strb.w	r3, [sp, #15]

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_INITCLOCK_ID, MCU_E_PARAM_CLOCK);
    6786:	230b      	movs	r3, #11
    6788:	2202      	movs	r2, #2
    678a:	2100      	movs	r1, #0
    678c:	2065      	movs	r0, #101	; 0x65
    678e:	f011 fe41 	bl	18414 <Det_ReportError>
    }

    return CheckStatus;
    6792:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6796:	4618      	mov	r0, r3
    6798:	b005      	add	sp, #20
    679a:	f85d fb04 	ldr.w	pc, [sp], #4
    679e:	bf00      	nop
    67a0:	1fff8d20 	.word	0x1fff8d20

000067a4 <Mcu_CheckSetMode>:
/**
* @brief Mcu_CheckSetMode - checks for Mcu_SetMode
* @implements Mcu_CheckSetMode_Activity
*/
static Std_ReturnType Mcu_CheckSetMode(Power_Ip_ModeType McuMode)
{
    67a4:	b500      	push	{lr}
    67a6:	b085      	sub	sp, #20
    67a8:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    67aa:	2300      	movs	r3, #0
    67ac:	f88d 300f 	strb.w	r3, [sp, #15]

    if (McuMode >= Mcu_pConfigPtr->NoModeConfigs)
    67b0:	4b0a      	ldr	r3, [pc, #40]	; (67dc <Mcu_CheckSetMode+0x38>)
    67b2:	681b      	ldr	r3, [r3, #0]
    67b4:	689b      	ldr	r3, [r3, #8]
    67b6:	9a01      	ldr	r2, [sp, #4]
    67b8:	429a      	cmp	r2, r3
    67ba:	d308      	bcc.n	67ce <Mcu_CheckSetMode+0x2a>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    67bc:	2301      	movs	r3, #1
    67be:	f88d 300f 	strb.w	r3, [sp, #15]

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_SETMODE_ID, MCU_E_PARAM_MODE);
    67c2:	230c      	movs	r3, #12
    67c4:	2208      	movs	r2, #8
    67c6:	2100      	movs	r1, #0
    67c8:	2065      	movs	r0, #101	; 0x65
    67ca:	f011 fe23 	bl	18414 <Det_ReportError>
    }

    return CheckStatus;
    67ce:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    67d2:	4618      	mov	r0, r3
    67d4:	b005      	add	sp, #20
    67d6:	f85d fb04 	ldr.w	pc, [sp], #4
    67da:	bf00      	nop
    67dc:	1fff8d20 	.word	0x1fff8d20

000067e0 <Mcu_CheckGetVersionInfo>:
/**
* @brief Mcu_CheckGetVersionInfo - checks for Mcu_GetVersionInfo
* @implements Mcu_CheckGetVersionInfo_Activity
*/
static Std_ReturnType Mcu_CheckGetVersionInfo(const Std_VersionInfoType * VersionInfo)
{
    67e0:	b500      	push	{lr}
    67e2:	b085      	sub	sp, #20
    67e4:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    67e6:	2300      	movs	r3, #0
    67e8:	f88d 300f 	strb.w	r3, [sp, #15]

    if (NULL_PTR == VersionInfo)
    67ec:	9b01      	ldr	r3, [sp, #4]
    67ee:	2b00      	cmp	r3, #0
    67f0:	d108      	bne.n	6804 <Mcu_CheckGetVersionInfo+0x24>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    67f2:	2301      	movs	r3, #1
    67f4:	f88d 300f 	strb.w	r3, [sp, #15]

        (void)Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_GETVERSIONINFO_ID, MCU_E_PARAM_POINTER);
    67f8:	2310      	movs	r3, #16
    67fa:	2209      	movs	r2, #9
    67fc:	2100      	movs	r1, #0
    67fe:	2065      	movs	r0, #101	; 0x65
    6800:	f011 fe08 	bl	18414 <Det_ReportError>
    }

    return CheckStatus;
    6804:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6808:	4618      	mov	r0, r3
    680a:	b005      	add	sp, #20
    680c:	f85d fb04 	ldr.w	pc, [sp], #4

00006810 <Mcu_HLDChecksEntry>:
/**
* @brief Mcu_HLDChecksEntry - checks for invalid mode transitions.
* @implements Mcu_HLDChecksEntry_Activity
*/
static Std_ReturnType Mcu_HLDChecksEntry(uint8 McuServiceID)
{
    6810:	b500      	push	{lr}
    6812:	b085      	sub	sp, #20
    6814:	4603      	mov	r3, r0
    6816:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    681a:	2300      	movs	r3, #0
    681c:	f88d 300f 	strb.w	r3, [sp, #15]

    if (MCU_INIT_ID == McuServiceID)
    6820:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6824:	2b00      	cmp	r3, #0
    6826:	d10e      	bne.n	6846 <Mcu_HLDChecksEntry+0x36>
    {
        if (MCU_UNINIT != Mcu_eStatus) /* If "Mcu_Init" was already called (i.e. driver is initialized). */
    6828:	4b13      	ldr	r3, [pc, #76]	; (6878 <Mcu_HLDChecksEntry+0x68>)
    682a:	681b      	ldr	r3, [r3, #0]
    682c:	2b03      	cmp	r3, #3
    682e:	d01c      	beq.n	686a <Mcu_HLDChecksEntry+0x5a>
        {
            CheckStatus = (Std_ReturnType)E_NOT_OK;
    6830:	2301      	movs	r3, #1
    6832:	f88d 300f 	strb.w	r3, [sp, #15]
            (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, McuServiceID, MCU_E_ALREADY_INITIALIZED);
    6836:	f89d 2007 	ldrb.w	r2, [sp, #7]
    683a:	2313      	movs	r3, #19
    683c:	2100      	movs	r1, #0
    683e:	2065      	movs	r0, #101	; 0x65
    6840:	f011 fde8 	bl	18414 <Det_ReportError>
    6844:	e011      	b.n	686a <Mcu_HLDChecksEntry+0x5a>
        }
    }
    else
    {
        if (MCU_UNINIT == Mcu_eStatus) /* If "Mcu_Init" was not called (i.e driver is uninitialized). */
    6846:	4b0c      	ldr	r3, [pc, #48]	; (6878 <Mcu_HLDChecksEntry+0x68>)
    6848:	681b      	ldr	r3, [r3, #0]
    684a:	2b03      	cmp	r3, #3
    684c:	d10a      	bne.n	6864 <Mcu_HLDChecksEntry+0x54>
        {
            CheckStatus = (Std_ReturnType)E_NOT_OK;
    684e:	2301      	movs	r3, #1
    6850:	f88d 300f 	strb.w	r3, [sp, #15]
            (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, McuServiceID, MCU_E_UNINIT);
    6854:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6858:	230f      	movs	r3, #15
    685a:	2100      	movs	r1, #0
    685c:	2065      	movs	r0, #101	; 0x65
    685e:	f011 fdd9 	bl	18414 <Det_ReportError>
    6862:	e002      	b.n	686a <Mcu_HLDChecksEntry+0x5a>
        }
        else
        {
            Mcu_eStatus = MCU_BUSY;
    6864:	4b04      	ldr	r3, [pc, #16]	; (6878 <Mcu_HLDChecksEntry+0x68>)
    6866:	220a      	movs	r2, #10
    6868:	601a      	str	r2, [r3, #0]
        }
    }

    return CheckStatus;
    686a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    686e:	4618      	mov	r0, r3
    6870:	b005      	add	sp, #20
    6872:	f85d fb04 	ldr.w	pc, [sp], #4
    6876:	bf00      	nop
    6878:	1fff8b1c 	.word	0x1fff8b1c

0000687c <Mcu_HLDChecksExit>:
* @implements Mcu_HLDChecksExit_Activity
*/
static void Mcu_HLDChecksExit(  Std_ReturnType RetStatus,
                                uint8 McuServiceID
                              )
{
    687c:	b082      	sub	sp, #8
    687e:	4603      	mov	r3, r0
    6880:	460a      	mov	r2, r1
    6882:	f88d 3007 	strb.w	r3, [sp, #7]
    6886:	4613      	mov	r3, r2
    6888:	f88d 3006 	strb.w	r3, [sp, #6]
    if (MCU_INIT_ID == McuServiceID)
    688c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6890:	2b00      	cmp	r3, #0
    6892:	d10b      	bne.n	68ac <Mcu_HLDChecksExit+0x30>
    {
        if ((Std_ReturnType)E_OK == (Std_ReturnType)RetStatus)
    6894:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6898:	2b00      	cmp	r3, #0
    689a:	d103      	bne.n	68a4 <Mcu_HLDChecksExit+0x28>
        {
            Mcu_eStatus = MCU_IDLE;
    689c:	4b06      	ldr	r3, [pc, #24]	; (68b8 <Mcu_HLDChecksExit+0x3c>)
    689e:	220c      	movs	r2, #12
    68a0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        Mcu_eStatus = MCU_IDLE;
    }
}
    68a2:	e006      	b.n	68b2 <Mcu_HLDChecksExit+0x36>
            Mcu_eStatus = MCU_UNINIT;
    68a4:	4b04      	ldr	r3, [pc, #16]	; (68b8 <Mcu_HLDChecksExit+0x3c>)
    68a6:	2203      	movs	r2, #3
    68a8:	601a      	str	r2, [r3, #0]
}
    68aa:	e002      	b.n	68b2 <Mcu_HLDChecksExit+0x36>
        Mcu_eStatus = MCU_IDLE;
    68ac:	4b02      	ldr	r3, [pc, #8]	; (68b8 <Mcu_HLDChecksExit+0x3c>)
    68ae:	220c      	movs	r2, #12
    68b0:	601a      	str	r2, [r3, #0]
}
    68b2:	bf00      	nop
    68b4:	b002      	add	sp, #8
    68b6:	4770      	bx	lr
    68b8:	1fff8b1c 	.word	0x1fff8b1c

000068bc <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    68bc:	b500      	push	{lr}
    68be:	b085      	sub	sp, #20
    68c0:	9001      	str	r0, [sp, #4]
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_PARAM_CHECK == STD_ON) )
    Std_ReturnType CheckStatus;
#endif /* ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_PARAM_CHECK == STD_ON) ) */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    CheckStatus = (Std_ReturnType) Mcu_HLDChecksEntry(MCU_INIT_ID);
    68c2:	2000      	movs	r0, #0
    68c4:	f7ff ffa4 	bl	6810 <Mcu_HLDChecksEntry>
    68c8:	4603      	mov	r3, r0
    68ca:	f88d 300b 	strb.w	r3, [sp, #11]

    if ( (Std_ReturnType)E_OK == CheckStatus )
    68ce:	f89d 300b 	ldrb.w	r3, [sp, #11]
    68d2:	2b00      	cmp	r3, #0
    68d4:	d150      	bne.n	6978 <Mcu_Init+0xbc>

#if (MCU_PARAM_CHECK == STD_ON)
        /* When PostBuild is used and #(Variants) > 1, the input parameter 'ConfigPtr' is mandatory
         * to be different than NULL_PTR. */
        /* Check the config. In case of error, return immediately. The "Mcu_CheckInit" function will report DET errors. */
        CheckStatus = Mcu_CheckInit(ConfigPtr);
    68d6:	9801      	ldr	r0, [sp, #4]
    68d8:	f7ff ff2e 	bl	6738 <Mcu_CheckInit>
    68dc:	4603      	mov	r3, r0
    68de:	f88d 300b 	strb.w	r3, [sp, #11]

        if ((Std_ReturnType)E_OK == CheckStatus)
    68e2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    68e6:	2b00      	cmp	r3, #0
    68e8:	d13d      	bne.n	6966 <Mcu_Init+0xaa>

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    68ea:	4a25      	ldr	r2, [pc, #148]	; (6980 <Mcu_Init+0xc4>)
    68ec:	9b01      	ldr	r3, [sp, #4]
    68ee:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    68f0:	2300      	movs	r3, #0
    68f2:	9303      	str	r3, [sp, #12]
    68f4:	e010      	b.n	6918 <Mcu_Init+0x5c>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    68f6:	4b22      	ldr	r3, [pc, #136]	; (6980 <Mcu_Init+0xc4>)
    68f8:	681b      	ldr	r3, [r3, #0]
    68fa:	6919      	ldr	r1, [r3, #16]
    68fc:	9a03      	ldr	r2, [sp, #12]
    68fe:	4613      	mov	r3, r2
    6900:	005b      	lsls	r3, r3, #1
    6902:	4413      	add	r3, r2
    6904:	009b      	lsls	r3, r3, #2
    6906:	440b      	add	r3, r1
    6908:	681b      	ldr	r3, [r3, #0]
    690a:	9a03      	ldr	r2, [sp, #12]
    690c:	b2d1      	uxtb	r1, r2
    690e:	4a1d      	ldr	r2, [pc, #116]	; (6984 <Mcu_Init+0xc8>)
    6910:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    6912:	9b03      	ldr	r3, [sp, #12]
    6914:	3301      	adds	r3, #1
    6916:	9303      	str	r3, [sp, #12]
    6918:	4b19      	ldr	r3, [pc, #100]	; (6980 <Mcu_Init+0xc4>)
    691a:	681b      	ldr	r3, [r3, #0]
    691c:	689b      	ldr	r3, [r3, #8]
    691e:	9a03      	ldr	r2, [sp, #12]
    6920:	429a      	cmp	r2, r3
    6922:	d3e8      	bcc.n	68f6 <Mcu_Init+0x3a>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    6924:	2300      	movs	r3, #0
    6926:	9303      	str	r3, [sp, #12]
    6928:	e010      	b.n	694c <Mcu_Init+0x90>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    692a:	4b15      	ldr	r3, [pc, #84]	; (6980 <Mcu_Init+0xc4>)
    692c:	681b      	ldr	r3, [r3, #0]
    692e:	6959      	ldr	r1, [r3, #20]
    6930:	9a03      	ldr	r2, [sp, #12]
    6932:	4613      	mov	r3, r2
    6934:	01db      	lsls	r3, r3, #7
    6936:	1a9b      	subs	r3, r3, r2
    6938:	00db      	lsls	r3, r3, #3
    693a:	440b      	add	r3, r1
    693c:	681b      	ldr	r3, [r3, #0]
    693e:	9a03      	ldr	r2, [sp, #12]
    6940:	b2d1      	uxtb	r1, r2
    6942:	4a11      	ldr	r2, [pc, #68]	; (6988 <Mcu_Init+0xcc>)
    6944:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    6946:	9b03      	ldr	r3, [sp, #12]
    6948:	3301      	adds	r3, #1
    694a:	9303      	str	r3, [sp, #12]
    694c:	4b0c      	ldr	r3, [pc, #48]	; (6980 <Mcu_Init+0xc4>)
    694e:	681b      	ldr	r3, [r3, #0]
    6950:	68db      	ldr	r3, [r3, #12]
    6952:	9a03      	ldr	r2, [sp, #12]
    6954:	429a      	cmp	r2, r3
    6956:	d3e8      	bcc.n	692a <Mcu_Init+0x6e>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    6958:	4b09      	ldr	r3, [pc, #36]	; (6980 <Mcu_Init+0xc4>)
    695a:	681b      	ldr	r3, [r3, #0]
    695c:	699b      	ldr	r3, [r3, #24]
    695e:	4618      	mov	r0, r3
    6960:	f000 f90c 	bl	6b7c <Mcu_Ipw_Init>
    6964:	e002      	b.n	696c <Mcu_Init+0xb0>
#if (MCU_PARAM_CHECK == STD_ON)
        }
        else
        {
            /* Clean the init pointer in case of an error. */
            Mcu_pConfigPtr = NULL_PTR;
    6966:	4b06      	ldr	r3, [pc, #24]	; (6980 <Mcu_Init+0xc4>)
    6968:	2200      	movs	r2, #0
    696a:	601a      	str	r2, [r3, #0]
#endif /* (MCU_PARAM_CHECK == STD_ON) */


#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    696c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6970:	2100      	movs	r1, #0
    6972:	4618      	mov	r0, r3
    6974:	f7ff ff82 	bl	687c <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    6978:	bf00      	nop
    697a:	b005      	add	sp, #20
    697c:	f85d fb04 	ldr.w	pc, [sp], #4
    6980:	1fff8d20 	.word	0x1fff8d20
    6984:	1fff8d1c 	.word	0x1fff8d1c
    6988:	1fff8d18 	.word	0x1fff8d18

0000698c <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    698c:	b500      	push	{lr}
    698e:	b085      	sub	sp, #20
    6990:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    6992:	2301      	movs	r3, #1
    6994:	f88d 300f 	strb.w	r3, [sp, #15]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    /* Check if the driver is initialized. */
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_INITRAMSECTION_ID) )
    6998:	2001      	movs	r0, #1
    699a:	f7ff ff39 	bl	6810 <Mcu_HLDChecksEntry>
    699e:	4603      	mov	r3, r0
    69a0:	2b00      	cmp	r3, #0
    69a2:	d103      	bne.n	69ac <Mcu_InitRamSection+0x20>
        /* To avoid compiler warning. */
        MCU_PARAM_UNUSED(RamSection);
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    69a4:	2101      	movs	r1, #1
    69a6:	2000      	movs	r0, #0
    69a8:	f7ff ff68 	bl	687c <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    69ac:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    69b0:	4618      	mov	r0, r3
    69b2:	b005      	add	sp, #20
    69b4:	f85d fb04 	ldr.w	pc, [sp], #4

000069b8 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    69b8:	b500      	push	{lr}
    69ba:	b085      	sub	sp, #20
    69bc:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    69be:	4a17      	ldr	r2, [pc, #92]	; (6a1c <Mcu_InitClock+0x64>)
    69c0:	9b01      	ldr	r3, [sp, #4]
    69c2:	4413      	add	r3, r2
    69c4:	781b      	ldrb	r3, [r3, #0]
    69c6:	f88d 300e 	strb.w	r3, [sp, #14]
    /* Return the success of the clock initalization operation. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_PARAM_CHECK == STD_ON) )
    Std_ReturnType ClockStatus = (Std_ReturnType)E_NOT_OK;
    69ca:	2301      	movs	r3, #1
    69cc:	f88d 300f 	strb.w	r3, [sp, #15]
#else
    Std_ReturnType ClockStatus;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_INITCLOCK_ID) )
    69d0:	2002      	movs	r0, #2
    69d2:	f7ff ff1d 	bl	6810 <Mcu_HLDChecksEntry>
    69d6:	4603      	mov	r3, r0
    69d8:	2b00      	cmp	r3, #0
    69da:	d119      	bne.n	6a10 <Mcu_InitClock+0x58>
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
    69dc:	9801      	ldr	r0, [sp, #4]
    69de:	f7ff fec3 	bl	6768 <Mcu_CheckInitClock>
    69e2:	4603      	mov	r3, r0
    69e4:	2b00      	cmp	r3, #0
    69e6:	d10f      	bne.n	6a08 <Mcu_InitClock+0x50>
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    69e8:	4b0d      	ldr	r3, [pc, #52]	; (6a20 <Mcu_InitClock+0x68>)
    69ea:	681b      	ldr	r3, [r3, #0]
    69ec:	6959      	ldr	r1, [r3, #20]
    69ee:	f89d 200e 	ldrb.w	r2, [sp, #14]
    69f2:	4613      	mov	r3, r2
    69f4:	01db      	lsls	r3, r3, #7
    69f6:	1a9b      	subs	r3, r3, r2
    69f8:	00db      	lsls	r3, r3, #3
    69fa:	440b      	add	r3, r1
    69fc:	4618      	mov	r0, r3
    69fe:	f000 f8c7 	bl	6b90 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    6a02:	2300      	movs	r3, #0
    6a04:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_PARAM_CHECK == STD_ON)
        }
#endif /* (MCU_PARAM_CHECK == STD_ON) */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    6a08:	2102      	movs	r1, #2
    6a0a:	2000      	movs	r0, #0
    6a0c:	f7ff ff36 	bl	687c <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    6a10:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6a14:	4618      	mov	r0, r3
    6a16:	b005      	add	sp, #20
    6a18:	f85d fb04 	ldr.w	pc, [sp], #4
    6a1c:	1fff8d18 	.word	0x1fff8d18
    6a20:	1fff8d20 	.word	0x1fff8d20

00006a24 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    6a24:	b500      	push	{lr}
    6a26:	b085      	sub	sp, #20
    6a28:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    6a2a:	4a15      	ldr	r2, [pc, #84]	; (6a80 <Mcu_SetMode+0x5c>)
    6a2c:	9b01      	ldr	r3, [sp, #4]
    6a2e:	4413      	add	r3, r2
    6a30:	781b      	ldrb	r3, [r3, #0]
    6a32:	f88d 300f 	strb.w	r3, [sp, #15]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_SETMODE_ID) )
    6a36:	2008      	movs	r0, #8
    6a38:	f7ff feea 	bl	6810 <Mcu_HLDChecksEntry>
    6a3c:	4603      	mov	r3, r0
    6a3e:	2b00      	cmp	r3, #0
    6a40:	d11a      	bne.n	6a78 <Mcu_SetMode+0x54>
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

#if (MCU_PARAM_CHECK == STD_ON)
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
    6a42:	9801      	ldr	r0, [sp, #4]
    6a44:	f7ff feae 	bl	67a4 <Mcu_CheckSetMode>
    6a48:	4603      	mov	r3, r0
    6a4a:	2b00      	cmp	r3, #0
    6a4c:	d110      	bne.n	6a70 <Mcu_SetMode+0x4c>
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    6a4e:	f00e fe79 	bl	15744 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    6a52:	4b0c      	ldr	r3, [pc, #48]	; (6a84 <Mcu_SetMode+0x60>)
    6a54:	681b      	ldr	r3, [r3, #0]
    6a56:	6919      	ldr	r1, [r3, #16]
    6a58:	f89d 200f 	ldrb.w	r2, [sp, #15]
    6a5c:	4613      	mov	r3, r2
    6a5e:	005b      	lsls	r3, r3, #1
    6a60:	4413      	add	r3, r2
    6a62:	009b      	lsls	r3, r3, #2
    6a64:	440b      	add	r3, r1
    6a66:	4618      	mov	r0, r3
    6a68:	f000 f89c 	bl	6ba4 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    6a6c:	f00e fe96 	bl	1579c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>
        }
#endif /* (MCU_PARAM_CHECK == STD_ON) */


#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    6a70:	2108      	movs	r1, #8
    6a72:	2000      	movs	r0, #0
    6a74:	f7ff ff02 	bl	687c <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    6a78:	bf00      	nop
    6a7a:	b005      	add	sp, #20
    6a7c:	f85d fb04 	ldr.w	pc, [sp], #4
    6a80:	1fff8d1c 	.word	0x1fff8d1c
    6a84:	1fff8d20 	.word	0x1fff8d20

00006a88 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    6a88:	b500      	push	{lr}
    6a8a:	b083      	sub	sp, #12
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    6a8c:	2302      	movs	r3, #2
    6a8e:	9301      	str	r3, [sp, #4]
#else
    Mcu_PllStatusType PllStatus;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETPLLSTATUS_ID) )
    6a90:	2004      	movs	r0, #4
    6a92:	f7ff febd 	bl	6810 <Mcu_HLDChecksEntry>
    6a96:	4603      	mov	r3, r0
    6a98:	2b00      	cmp	r3, #0
    6a9a:	d103      	bne.n	6aa4 <Mcu_GetPllStatus+0x1c>
           At this point, the return value can be only MCU_PLL_LOCKED or MCU_PLL_UNLOCKED. */
        PllStatus = Mcu_Ipw_GetPllStatus();
#endif /* (MCU_NO_PLL == STD_OFF) */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    6a9c:	2104      	movs	r1, #4
    6a9e:	2000      	movs	r0, #0
    6aa0:	f7ff feec 	bl	687c <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    6aa4:	9b01      	ldr	r3, [sp, #4]
}
    6aa6:	4618      	mov	r0, r3
    6aa8:	b003      	add	sp, #12
    6aaa:	f85d fb04 	ldr.w	pc, [sp], #4

00006aae <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    6aae:	b500      	push	{lr}
    6ab0:	b083      	sub	sp, #12
    /* Return value of the function. */
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    Mcu_ResetType ResetReason = MCU_RESET_UNDEFINED;
    6ab2:	230e      	movs	r3, #14
    6ab4:	9301      	str	r3, [sp, #4]
#else
    Mcu_ResetType ResetReason;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    6ab6:	2005      	movs	r0, #5
    6ab8:	f7ff feaa 	bl	6810 <Mcu_HLDChecksEntry>
    6abc:	4603      	mov	r3, r0
    6abe:	2b00      	cmp	r3, #0
    6ac0:	d106      	bne.n	6ad0 <Mcu_GetResetReason+0x22>
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    6ac2:	f000 f879 	bl	6bb8 <Mcu_Ipw_GetResetReason>
    6ac6:	9001      	str	r0, [sp, #4]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    6ac8:	2105      	movs	r1, #5
    6aca:	2000      	movs	r0, #0
    6acc:	f7ff fed6 	bl	687c <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    6ad0:	9b01      	ldr	r3, [sp, #4]
}
    6ad2:	4618      	mov	r0, r3
    6ad4:	b003      	add	sp, #12
    6ad6:	f85d fb04 	ldr.w	pc, [sp], #4

00006ada <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    6ada:	b500      	push	{lr}
    6adc:	b083      	sub	sp, #12
    /* Return value of the function. */
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    Mcu_RawResetType RawResetValue = MCU_RAW_RESET_DEFAULT;
    6ade:	f04f 33ff 	mov.w	r3, #4294967295
    6ae2:	9301      	str	r3, [sp, #4]
#else
    Mcu_RawResetType RawResetValue;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    6ae4:	2006      	movs	r0, #6
    6ae6:	f7ff fe93 	bl	6810 <Mcu_HLDChecksEntry>
    6aea:	4603      	mov	r3, r0
    6aec:	2b00      	cmp	r3, #0
    6aee:	d106      	bne.n	6afe <Mcu_GetResetRawValue+0x24>
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    6af0:	f000 f868 	bl	6bc4 <Mcu_Ipw_GetResetRawValue>
    6af4:	9001      	str	r0, [sp, #4]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    6af6:	2106      	movs	r1, #6
    6af8:	2000      	movs	r0, #0
    6afa:	f7ff febf 	bl	687c <Mcu_HLDChecksExit>
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    6afe:	9b01      	ldr	r3, [sp, #4]
}
    6b00:	4618      	mov	r0, r3
    6b02:	b003      	add	sp, #12
    6b04:	f85d fb04 	ldr.w	pc, [sp], #4

00006b08 <Mcu_GetVersionInfo>:
* @api
*
* @implements Mcu_GetVersionInfo_Activity
*/
void Mcu_GetVersionInfo(Std_VersionInfoType * versioninfo)
{
    6b08:	b500      	push	{lr}
    6b0a:	b083      	sub	sp, #12
    6b0c:	9001      	str	r0, [sp, #4]
#if (MCU_PARAM_CHECK == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckGetVersionInfo(versioninfo) )
    6b0e:	9801      	ldr	r0, [sp, #4]
    6b10:	f7ff fe66 	bl	67e0 <Mcu_CheckGetVersionInfo>
    6b14:	4603      	mov	r3, r0
    6b16:	2b00      	cmp	r3, #0
    6b18:	d10e      	bne.n	6b38 <Mcu_GetVersionInfo+0x30>
    {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
        (versioninfo)->vendorID = (uint16)MCU_VENDOR_ID;
    6b1a:	9b01      	ldr	r3, [sp, #4]
    6b1c:	222b      	movs	r2, #43	; 0x2b
    6b1e:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID = (uint8)MCU_MODULE_ID;
    6b20:	9b01      	ldr	r3, [sp, #4]
    6b22:	2265      	movs	r2, #101	; 0x65
    6b24:	805a      	strh	r2, [r3, #2]
        (versioninfo)->sw_major_version = (uint8)MCU_SW_MAJOR_VERSION;
    6b26:	9b01      	ldr	r3, [sp, #4]
    6b28:	2202      	movs	r2, #2
    6b2a:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)MCU_SW_MINOR_VERSION;
    6b2c:	9b01      	ldr	r3, [sp, #4]
    6b2e:	2200      	movs	r2, #0
    6b30:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)MCU_SW_PATCH_VERSION;
    6b32:	9b01      	ldr	r3, [sp, #4]
    6b34:	2200      	movs	r2, #0
    6b36:	719a      	strb	r2, [r3, #6]
#if (MCU_PARAM_CHECK == STD_ON)
    }
#endif /* (MCU_PARAM_CHECK == STD_ON) */
}
    6b38:	bf00      	nop
    6b3a:	b003      	add	sp, #12
    6b3c:	f85d fb04 	ldr.w	pc, [sp], #4

00006b40 <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    6b40:	b500      	push	{lr}
    6b42:	b083      	sub	sp, #12
    6b44:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    6b46:	201a      	movs	r0, #26
    6b48:	f7ff fe62 	bl	6810 <Mcu_HLDChecksEntry>
    6b4c:	4603      	mov	r3, r0
    6b4e:	2b00      	cmp	r3, #0
    6b50:	d106      	bne.n	6b60 <Mcu_SleepOnExit+0x20>
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    6b52:	9801      	ldr	r0, [sp, #4]
    6b54:	f000 f83c 	bl	6bd0 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    6b58:	211a      	movs	r1, #26
    6b5a:	2000      	movs	r0, #0
    6b5c:	f7ff fe8e 	bl	687c <Mcu_HLDChecksExit>
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    6b60:	bf00      	nop
    6b62:	b003      	add	sp, #12
    6b64:	f85d fb04 	ldr.w	pc, [sp], #4

00006b68 <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    6b68:	b082      	sub	sp, #8
    6b6a:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    6b6c:	4b02      	ldr	r3, [pc, #8]	; (6b78 <Mcu_ClkSrcFailureNotification+0x10>)
    6b6e:	681b      	ldr	r3, [r3, #0]
    6b70:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    6b72:	bf00      	nop
    6b74:	b002      	add	sp, #8
    6b76:	4770      	bx	lr
    6b78:	1fff8d20 	.word	0x1fff8d20

00006b7c <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    6b7c:	b500      	push	{lr}
    6b7e:	b083      	sub	sp, #12
    6b80:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    6b82:	9801      	ldr	r0, [sp, #4]
    6b84:	f000 f882 	bl	6c8c <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    6b88:	bf00      	nop
    6b8a:	b003      	add	sp, #12
    6b8c:	f85d fb04 	ldr.w	pc, [sp], #4

00006b90 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    6b90:	b500      	push	{lr}
    6b92:	b083      	sub	sp, #12
    6b94:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    6b96:	9801      	ldr	r0, [sp, #4]
    6b98:	f7fc fb12 	bl	31c0 <Clock_Ip_InitClock>
}
    6b9c:	bf00      	nop
    6b9e:	b003      	add	sp, #12
    6ba0:	f85d fb04 	ldr.w	pc, [sp], #4

00006ba4 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    6ba4:	b500      	push	{lr}
    6ba6:	b083      	sub	sp, #12
    6ba8:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    6baa:	9801      	ldr	r0, [sp, #4]
    6bac:	f000 f820 	bl	6bf0 <Power_Ip_SetMode>
}
    6bb0:	bf00      	nop
    6bb2:	b003      	add	sp, #12
    6bb4:	f85d fb04 	ldr.w	pc, [sp], #4

00006bb8 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    6bb8:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    6bba:	f000 f84f 	bl	6c5c <Power_Ip_GetResetReason>
    6bbe:	4603      	mov	r3, r0
}
    6bc0:	4618      	mov	r0, r3
    6bc2:	bd08      	pop	{r3, pc}

00006bc4 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    6bc4:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    6bc6:	f000 f857 	bl	6c78 <Power_Ip_GetResetRawValue>
    6bca:	4603      	mov	r3, r0
}
    6bcc:	4618      	mov	r0, r3
    6bce:	bd08      	pop	{r3, pc}

00006bd0 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    6bd0:	b500      	push	{lr}
    6bd2:	b083      	sub	sp, #12
    6bd4:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    6bd6:	9b01      	ldr	r3, [sp, #4]
    6bd8:	2b00      	cmp	r3, #0
    6bda:	d102      	bne.n	6be2 <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    6bdc:	f000 f86c 	bl	6cb8 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    6be0:	e001      	b.n	6be6 <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    6be2:	f000 f86e 	bl	6cc2 <Power_Ip_EnableSleepOnExit>
}
    6be6:	bf00      	nop
    6be8:	b003      	add	sp, #12
    6bea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00006bf0 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    6bf0:	b500      	push	{lr}
    6bf2:	b085      	sub	sp, #20
    6bf4:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    6bf6:	9b01      	ldr	r3, [sp, #4]
    6bf8:	685b      	ldr	r3, [r3, #4]
    6bfa:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    6bfc:	9802      	ldr	r0, [sp, #8]
    6bfe:	f000 f9f5 	bl	6fec <Power_Ip_SMC_ModeCheckEntry>
    6c02:	4603      	mov	r3, r0
    6c04:	2b00      	cmp	r3, #0
    6c06:	d002      	beq.n	6c0e <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6c08:	2301      	movs	r3, #1
    6c0a:	9303      	str	r3, [sp, #12]
    6c0c:	e003      	b.n	6c16 <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    6c0e:	9801      	ldr	r0, [sp, #4]
    6c10:	f000 fa1e 	bl	7050 <Power_Ip_SMC_ModeConfig>
    6c14:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    6c16:	9b03      	ldr	r3, [sp, #12]
    6c18:	2b01      	cmp	r3, #1
    6c1a:	d103      	bne.n	6c24 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6c1c:	21ff      	movs	r1, #255	; 0xff
    6c1e:	2003      	movs	r0, #3
    6c20:	f000 f8f4 	bl	6e0c <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    6c24:	bf00      	nop
    6c26:	b005      	add	sp, #20
    6c28:	f85d fb04 	ldr.w	pc, [sp], #4

00006c2c <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    6c2c:	b084      	sub	sp, #16
    6c2e:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    6c30:	230c      	movs	r3, #12
    6c32:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    6c34:	4a08      	ldr	r2, [pc, #32]	; (6c58 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    6c36:	9b01      	ldr	r3, [sp, #4]
    6c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c3c:	2b0e      	cmp	r3, #14
    6c3e:	d805      	bhi.n	6c4c <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    6c40:	4a05      	ldr	r2, [pc, #20]	; (6c58 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    6c42:	9b01      	ldr	r3, [sp, #4]
    6c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c48:	9303      	str	r3, [sp, #12]
    6c4a:	e001      	b.n	6c50 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    6c4c:	230c      	movs	r3, #12
    6c4e:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    6c50:	9b03      	ldr	r3, [sp, #12]
}
    6c52:	4618      	mov	r0, r3
    6c54:	b004      	add	sp, #16
    6c56:	4770      	bx	lr
    6c58:	0001978c 	.word	0x0001978c

00006c5c <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    6c5c:	b500      	push	{lr}
    6c5e:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    6c60:	f000 f940 	bl	6ee4 <Power_Ip_RCM_GetResetReason>
    6c64:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    6c66:	9801      	ldr	r0, [sp, #4]
    6c68:	f7ff ffe0 	bl	6c2c <Power_Ip_ConvertIntergeToResetType>
    6c6c:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    6c6e:	9b00      	ldr	r3, [sp, #0]
}
    6c70:	4618      	mov	r0, r3
    6c72:	b003      	add	sp, #12
    6c74:	f85d fb04 	ldr.w	pc, [sp], #4

00006c78 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    6c78:	b500      	push	{lr}
    6c7a:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    6c7c:	f000 f98a 	bl	6f94 <Power_Ip_RCM_GetResetRawValue>
    6c80:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    6c82:	9b01      	ldr	r3, [sp, #4]
}
    6c84:	4618      	mov	r0, r3
    6c86:	b003      	add	sp, #12
    6c88:	f85d fb04 	ldr.w	pc, [sp], #4

00006c8c <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    6c8c:	b500      	push	{lr}
    6c8e:	b083      	sub	sp, #12
    6c90:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    6c92:	9b01      	ldr	r3, [sp, #4]
    6c94:	681b      	ldr	r3, [r3, #0]
    6c96:	4618      	mov	r0, r3
    6c98:	f000 f90e 	bl	6eb8 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    6c9c:	9b01      	ldr	r3, [sp, #4]
    6c9e:	685b      	ldr	r3, [r3, #4]
    6ca0:	4618      	mov	r0, r3
    6ca2:	f000 f86d 	bl	6d80 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    6ca6:	9b01      	ldr	r3, [sp, #4]
    6ca8:	689b      	ldr	r3, [r3, #8]
    6caa:	4618      	mov	r0, r3
    6cac:	f000 f990 	bl	6fd0 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    6cb0:	bf00      	nop
    6cb2:	b003      	add	sp, #12
    6cb4:	f85d fb04 	ldr.w	pc, [sp], #4

00006cb8 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    6cb8:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    6cba:	f000 f811 	bl	6ce0 <Power_Ip_CM4_DisableSleepOnExit>
}
    6cbe:	bf00      	nop
    6cc0:	bd08      	pop	{r3, pc}

00006cc2 <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    6cc2:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    6cc4:	f000 f820 	bl	6d08 <Power_Ip_CM4_EnableSleepOnExit>
}
    6cc8:	bf00      	nop
    6cca:	bd08      	pop	{r3, pc}

00006ccc <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    6ccc:	b082      	sub	sp, #8
    6cce:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    6cd0:	4a02      	ldr	r2, [pc, #8]	; (6cdc <Power_Ip_InstallNotificationsCallback+0x10>)
    6cd2:	9b01      	ldr	r3, [sp, #4]
    6cd4:	6013      	str	r3, [r2, #0]
}
    6cd6:	bf00      	nop
    6cd8:	b002      	add	sp, #8
    6cda:	4770      	bx	lr
    6cdc:	1fff8b20 	.word	0x1fff8b20

00006ce0 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    6ce0:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    6ce2:	2300      	movs	r3, #0
    6ce4:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    6ce6:	4b07      	ldr	r3, [pc, #28]	; (6d04 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    6ce8:	681b      	ldr	r3, [r3, #0]
    6cea:	685b      	ldr	r3, [r3, #4]
    6cec:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    6cee:	9b01      	ldr	r3, [sp, #4]
    6cf0:	f023 0302 	bic.w	r3, r3, #2
    6cf4:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    6cf6:	4b03      	ldr	r3, [pc, #12]	; (6d04 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    6cf8:	681b      	ldr	r3, [r3, #0]
    6cfa:	9a01      	ldr	r2, [sp, #4]
    6cfc:	605a      	str	r2, [r3, #4]
}
    6cfe:	bf00      	nop
    6d00:	b002      	add	sp, #8
    6d02:	4770      	bx	lr
    6d04:	1fff8b24 	.word	0x1fff8b24

00006d08 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    6d08:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    6d0a:	2300      	movs	r3, #0
    6d0c:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    6d0e:	4b07      	ldr	r3, [pc, #28]	; (6d2c <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    6d10:	681b      	ldr	r3, [r3, #0]
    6d12:	685b      	ldr	r3, [r3, #4]
    6d14:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    6d16:	9b01      	ldr	r3, [sp, #4]
    6d18:	f043 0302 	orr.w	r3, r3, #2
    6d1c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    6d1e:	4b03      	ldr	r3, [pc, #12]	; (6d2c <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    6d20:	681b      	ldr	r3, [r3, #0]
    6d22:	9a01      	ldr	r2, [sp, #4]
    6d24:	605a      	str	r2, [r3, #4]
}
    6d26:	bf00      	nop
    6d28:	b002      	add	sp, #8
    6d2a:	4770      	bx	lr
    6d2c:	1fff8b24 	.word	0x1fff8b24

00006d30 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    6d30:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    6d32:	2300      	movs	r3, #0
    6d34:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    6d36:	4b07      	ldr	r3, [pc, #28]	; (6d54 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    6d38:	681b      	ldr	r3, [r3, #0]
    6d3a:	685b      	ldr	r3, [r3, #4]
    6d3c:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    6d3e:	9b01      	ldr	r3, [sp, #4]
    6d40:	f043 0304 	orr.w	r3, r3, #4
    6d44:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    6d46:	4b03      	ldr	r3, [pc, #12]	; (6d54 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    6d48:	681b      	ldr	r3, [r3, #0]
    6d4a:	9a01      	ldr	r2, [sp, #4]
    6d4c:	605a      	str	r2, [r3, #4]
}
    6d4e:	bf00      	nop
    6d50:	b002      	add	sp, #8
    6d52:	4770      	bx	lr
    6d54:	1fff8b24 	.word	0x1fff8b24

00006d58 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    6d58:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    6d5a:	2300      	movs	r3, #0
    6d5c:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    6d5e:	4b07      	ldr	r3, [pc, #28]	; (6d7c <Power_Ip_CM4_DisableDeepSleep+0x24>)
    6d60:	681b      	ldr	r3, [r3, #0]
    6d62:	685b      	ldr	r3, [r3, #4]
    6d64:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    6d66:	9b01      	ldr	r3, [sp, #4]
    6d68:	f023 0304 	bic.w	r3, r3, #4
    6d6c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    6d6e:	4b03      	ldr	r3, [pc, #12]	; (6d7c <Power_Ip_CM4_DisableDeepSleep+0x24>)
    6d70:	681b      	ldr	r3, [r3, #0]
    6d72:	9a01      	ldr	r2, [sp, #4]
    6d74:	605a      	str	r2, [r3, #4]
}
    6d76:	bf00      	nop
    6d78:	b002      	add	sp, #8
    6d7a:	4770      	bx	lr
    6d7c:	1fff8b24 	.word	0x1fff8b24

00006d80 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    6d80:	b084      	sub	sp, #16
    6d82:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    6d84:	4b20      	ldr	r3, [pc, #128]	; (6e08 <Power_Ip_PMC_PowerInit+0x88>)
    6d86:	781b      	ldrb	r3, [r3, #0]
    6d88:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    6d8c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6d90:	f003 030f 	and.w	r3, r3, #15
    6d94:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    6d98:	9b01      	ldr	r3, [sp, #4]
    6d9a:	781a      	ldrb	r2, [r3, #0]
    6d9c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6da0:	4313      	orrs	r3, r2
    6da2:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    6da6:	4a18      	ldr	r2, [pc, #96]	; (6e08 <Power_Ip_PMC_PowerInit+0x88>)
    6da8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6dac:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    6dae:	4b16      	ldr	r3, [pc, #88]	; (6e08 <Power_Ip_PMC_PowerInit+0x88>)
    6db0:	785b      	ldrb	r3, [r3, #1]
    6db2:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    6db6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6dba:	f003 031f 	and.w	r3, r3, #31
    6dbe:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    6dc2:	9b01      	ldr	r3, [sp, #4]
    6dc4:	785a      	ldrb	r2, [r3, #1]
    6dc6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6dca:	4313      	orrs	r3, r2
    6dcc:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    6dd0:	4a0d      	ldr	r2, [pc, #52]	; (6e08 <Power_Ip_PMC_PowerInit+0x88>)
    6dd2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6dd6:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    6dd8:	4b0b      	ldr	r3, [pc, #44]	; (6e08 <Power_Ip_PMC_PowerInit+0x88>)
    6dda:	789b      	ldrb	r3, [r3, #2]
    6ddc:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    6de0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6de4:	f003 0338 	and.w	r3, r3, #56	; 0x38
    6de8:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    6dec:	9b01      	ldr	r3, [sp, #4]
    6dee:	789a      	ldrb	r2, [r3, #2]
    6df0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6df4:	4313      	orrs	r3, r2
    6df6:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    6dfa:	4a03      	ldr	r2, [pc, #12]	; (6e08 <Power_Ip_PMC_PowerInit+0x88>)
    6dfc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6e00:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    6e02:	bf00      	nop
    6e04:	b004      	add	sp, #16
    6e06:	4770      	bx	lr
    6e08:	4007d000 	.word	0x4007d000

00006e0c <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    6e0c:	b500      	push	{lr}
    6e0e:	b083      	sub	sp, #12
    6e10:	9001      	str	r0, [sp, #4]
    6e12:	460b      	mov	r3, r1
    6e14:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    6e18:	4b05      	ldr	r3, [pc, #20]	; (6e30 <Power_Ip_ReportPowerErrors+0x24>)
    6e1a:	681b      	ldr	r3, [r3, #0]
    6e1c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6e20:	4611      	mov	r1, r2
    6e22:	9801      	ldr	r0, [sp, #4]
    6e24:	4798      	blx	r3
}
    6e26:	bf00      	nop
    6e28:	b003      	add	sp, #12
    6e2a:	f85d fb04 	ldr.w	pc, [sp], #4
    6e2e:	bf00      	nop
    6e30:	1fff8b20 	.word	0x1fff8b20

00006e34 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    6e34:	b082      	sub	sp, #8
    6e36:	9001      	str	r0, [sp, #4]
    6e38:	460b      	mov	r3, r1
    6e3a:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    6e3e:	bf00      	nop
    6e40:	b002      	add	sp, #8
    6e42:	4770      	bx	lr

00006e44 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    6e44:	b500      	push	{lr}
    6e46:	b085      	sub	sp, #20
    6e48:	9003      	str	r0, [sp, #12]
    6e4a:	9102      	str	r1, [sp, #8]
    6e4c:	9201      	str	r2, [sp, #4]
    6e4e:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    6e50:	2000      	movs	r0, #0
    6e52:	f7fb fee5 	bl	2c20 <OsIf_GetCounter>
    6e56:	4602      	mov	r2, r0
    6e58:	9b03      	ldr	r3, [sp, #12]
    6e5a:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    6e5c:	9b02      	ldr	r3, [sp, #8]
    6e5e:	2200      	movs	r2, #0
    6e60:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    6e62:	2100      	movs	r1, #0
    6e64:	9800      	ldr	r0, [sp, #0]
    6e66:	f7fb ff27 	bl	2cb8 <OsIf_MicrosToTicks>
    6e6a:	4602      	mov	r2, r0
    6e6c:	9b01      	ldr	r3, [sp, #4]
    6e6e:	601a      	str	r2, [r3, #0]
}
    6e70:	bf00      	nop
    6e72:	b005      	add	sp, #20
    6e74:	f85d fb04 	ldr.w	pc, [sp], #4

00006e78 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    6e78:	b500      	push	{lr}
    6e7a:	b087      	sub	sp, #28
    6e7c:	9003      	str	r0, [sp, #12]
    6e7e:	9102      	str	r1, [sp, #8]
    6e80:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    6e82:	2300      	movs	r3, #0
    6e84:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    6e88:	2100      	movs	r1, #0
    6e8a:	9803      	ldr	r0, [sp, #12]
    6e8c:	f7fb fee1 	bl	2c52 <OsIf_GetElapsed>
    6e90:	4602      	mov	r2, r0
    6e92:	9b02      	ldr	r3, [sp, #8]
    6e94:	681b      	ldr	r3, [r3, #0]
    6e96:	441a      	add	r2, r3
    6e98:	9b02      	ldr	r3, [sp, #8]
    6e9a:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    6e9c:	9b02      	ldr	r3, [sp, #8]
    6e9e:	681b      	ldr	r3, [r3, #0]
    6ea0:	9a01      	ldr	r2, [sp, #4]
    6ea2:	429a      	cmp	r2, r3
    6ea4:	d802      	bhi.n	6eac <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    6ea6:	2301      	movs	r3, #1
    6ea8:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    6eac:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    6eb0:	4618      	mov	r0, r3
    6eb2:	b007      	add	sp, #28
    6eb4:	f85d fb04 	ldr.w	pc, [sp], #4

00006eb8 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    6eb8:	b082      	sub	sp, #8
    6eba:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    6ebc:	9b01      	ldr	r3, [sp, #4]
    6ebe:	681a      	ldr	r2, [r3, #0]
    6ec0:	4907      	ldr	r1, [pc, #28]	; (6ee0 <Power_Ip_RCM_ResetInit+0x28>)
    6ec2:	f641 7307 	movw	r3, #7943	; 0x1f07
    6ec6:	4013      	ands	r3, r2
    6ec8:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    6eca:	9b01      	ldr	r3, [sp, #4]
    6ecc:	685a      	ldr	r2, [r3, #4]
    6ece:	4904      	ldr	r1, [pc, #16]	; (6ee0 <Power_Ip_RCM_ResetInit+0x28>)
    6ed0:	f642 73ff 	movw	r3, #12287	; 0x2fff
    6ed4:	4013      	ands	r3, r2
    6ed6:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    6ed8:	bf00      	nop
    6eda:	b002      	add	sp, #8
    6edc:	4770      	bx	lr
    6ede:	bf00      	nop
    6ee0:	4007f000 	.word	0x4007f000

00006ee4 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    6ee4:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    6ee6:	230c      	movs	r3, #12
    6ee8:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    6eea:	2300      	movs	r3, #0
    6eec:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    6eee:	2300      	movs	r3, #0
    6ef0:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    6ef2:	2300      	movs	r3, #0
    6ef4:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    6ef6:	4b25      	ldr	r3, [pc, #148]	; (6f8c <Power_Ip_RCM_GetResetReason+0xa8>)
    6ef8:	699a      	ldr	r2, [r3, #24]
    6efa:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6efe:	4013      	ands	r3, r2
    6f00:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    6f02:	9b03      	ldr	r3, [sp, #12]
    6f04:	2b00      	cmp	r3, #0
    6f06:	d008      	beq.n	6f1a <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    6f08:	4920      	ldr	r1, [pc, #128]	; (6f8c <Power_Ip_RCM_GetResetReason+0xa8>)
    6f0a:	9a03      	ldr	r2, [sp, #12]
    6f0c:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6f10:	4013      	ands	r3, r2
    6f12:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    6f14:	4a1e      	ldr	r2, [pc, #120]	; (6f90 <Power_Ip_RCM_GetResetReason+0xac>)
    6f16:	9b03      	ldr	r3, [sp, #12]
    6f18:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    6f1a:	4b1d      	ldr	r3, [pc, #116]	; (6f90 <Power_Ip_RCM_GetResetReason+0xac>)
    6f1c:	681b      	ldr	r3, [r3, #0]
    6f1e:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    6f20:	9a02      	ldr	r2, [sp, #8]
    6f22:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6f26:	4013      	ands	r3, r2
    6f28:	2b82      	cmp	r3, #130	; 0x82
    6f2a:	d102      	bne.n	6f32 <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    6f2c:	2305      	movs	r3, #5
    6f2e:	9307      	str	r3, [sp, #28]
    6f30:	e027      	b.n	6f82 <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    6f32:	2300      	movs	r3, #0
    6f34:	9306      	str	r3, [sp, #24]
    6f36:	e021      	b.n	6f7c <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    6f38:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6f3c:	9b06      	ldr	r3, [sp, #24]
    6f3e:	fa22 f303 	lsr.w	r3, r2, r3
    6f42:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    6f44:	9a01      	ldr	r2, [sp, #4]
    6f46:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    6f4a:	4013      	ands	r3, r2
    6f4c:	2b00      	cmp	r3, #0
    6f4e:	d012      	beq.n	6f76 <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    6f50:	9a01      	ldr	r2, [sp, #4]
    6f52:	9b02      	ldr	r3, [sp, #8]
    6f54:	4013      	ands	r3, r2
    6f56:	2b00      	cmp	r3, #0
    6f58:	d00a      	beq.n	6f70 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    6f5a:	9b05      	ldr	r3, [sp, #20]
    6f5c:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    6f5e:	9b04      	ldr	r3, [sp, #16]
    6f60:	3301      	adds	r3, #1
    6f62:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    6f64:	9b04      	ldr	r3, [sp, #16]
    6f66:	2b01      	cmp	r3, #1
    6f68:	d902      	bls.n	6f70 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    6f6a:	230d      	movs	r3, #13
    6f6c:	9307      	str	r3, [sp, #28]
                        break;
    6f6e:	e008      	b.n	6f82 <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    6f70:	9b05      	ldr	r3, [sp, #20]
    6f72:	3301      	adds	r3, #1
    6f74:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    6f76:	9b06      	ldr	r3, [sp, #24]
    6f78:	3301      	adds	r3, #1
    6f7a:	9306      	str	r3, [sp, #24]
    6f7c:	9b06      	ldr	r3, [sp, #24]
    6f7e:	2b1f      	cmp	r3, #31
    6f80:	d9da      	bls.n	6f38 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    6f82:	9b07      	ldr	r3, [sp, #28]
}
    6f84:	4618      	mov	r0, r3
    6f86:	b008      	add	sp, #32
    6f88:	4770      	bx	lr
    6f8a:	bf00      	nop
    6f8c:	4007f000 	.word	0x4007f000
    6f90:	1fff8d24 	.word	0x1fff8d24

00006f94 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    6f94:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    6f96:	4b0c      	ldr	r3, [pc, #48]	; (6fc8 <Power_Ip_RCM_GetResetRawValue+0x34>)
    6f98:	699a      	ldr	r2, [r3, #24]
    6f9a:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6f9e:	4013      	ands	r3, r2
    6fa0:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    6fa2:	9b01      	ldr	r3, [sp, #4]
    6fa4:	2b00      	cmp	r3, #0
    6fa6:	d008      	beq.n	6fba <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    6fa8:	4907      	ldr	r1, [pc, #28]	; (6fc8 <Power_Ip_RCM_GetResetRawValue+0x34>)
    6faa:	9a01      	ldr	r2, [sp, #4]
    6fac:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6fb0:	4013      	ands	r3, r2
    6fb2:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    6fb4:	4a05      	ldr	r2, [pc, #20]	; (6fcc <Power_Ip_RCM_GetResetRawValue+0x38>)
    6fb6:	9b01      	ldr	r3, [sp, #4]
    6fb8:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    6fba:	4b04      	ldr	r3, [pc, #16]	; (6fcc <Power_Ip_RCM_GetResetRawValue+0x38>)
    6fbc:	681b      	ldr	r3, [r3, #0]
    6fbe:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    6fc0:	9b00      	ldr	r3, [sp, #0]
}
    6fc2:	4618      	mov	r0, r3
    6fc4:	b002      	add	sp, #8
    6fc6:	4770      	bx	lr
    6fc8:	4007f000 	.word	0x4007f000
    6fcc:	1fff8d24 	.word	0x1fff8d24

00006fd0 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    6fd0:	b082      	sub	sp, #8
    6fd2:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    6fd4:	9b01      	ldr	r3, [sp, #4]
    6fd6:	681b      	ldr	r3, [r3, #0]
    6fd8:	4a03      	ldr	r2, [pc, #12]	; (6fe8 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    6fda:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    6fde:	6093      	str	r3, [r2, #8]
}
    6fe0:	bf00      	nop
    6fe2:	b002      	add	sp, #8
    6fe4:	4770      	bx	lr
    6fe6:	bf00      	nop
    6fe8:	4007e000 	.word	0x4007e000

00006fec <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    6fec:	b084      	sub	sp, #16
    6fee:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    6ff0:	2301      	movs	r3, #1
    6ff2:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    6ff4:	4b15      	ldr	r3, [pc, #84]	; (704c <Power_Ip_SMC_ModeCheckEntry+0x60>)
    6ff6:	695b      	ldr	r3, [r3, #20]
    6ff8:	b2db      	uxtb	r3, r3
    6ffa:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    6ffc:	9b01      	ldr	r3, [sp, #4]
    6ffe:	2b02      	cmp	r3, #2
    7000:	d012      	beq.n	7028 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    7002:	9b01      	ldr	r3, [sp, #4]
    7004:	2b02      	cmp	r3, #2
    7006:	d818      	bhi.n	703a <Power_Ip_SMC_ModeCheckEntry+0x4e>
    7008:	9b01      	ldr	r3, [sp, #4]
    700a:	2b00      	cmp	r3, #0
    700c:	d003      	beq.n	7016 <Power_Ip_SMC_ModeCheckEntry+0x2a>
    700e:	9b01      	ldr	r3, [sp, #4]
    7010:	2b01      	cmp	r3, #1
    7012:	d003      	beq.n	701c <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    7014:	e011      	b.n	703a <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    7016:	2300      	movs	r3, #0
    7018:	9303      	str	r3, [sp, #12]
            break;
    701a:	e013      	b.n	7044 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    701c:	9b02      	ldr	r3, [sp, #8]
    701e:	2b01      	cmp	r3, #1
    7020:	d10d      	bne.n	703e <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    7022:	2300      	movs	r3, #0
    7024:	9303      	str	r3, [sp, #12]
            break;
    7026:	e00a      	b.n	703e <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    7028:	9b02      	ldr	r3, [sp, #8]
    702a:	2b01      	cmp	r3, #1
    702c:	d002      	beq.n	7034 <Power_Ip_SMC_ModeCheckEntry+0x48>
    702e:	9b02      	ldr	r3, [sp, #8]
    7030:	2b10      	cmp	r3, #16
    7032:	d106      	bne.n	7042 <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    7034:	2300      	movs	r3, #0
    7036:	9303      	str	r3, [sp, #12]
            break;
    7038:	e003      	b.n	7042 <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    703a:	bf00      	nop
    703c:	e002      	b.n	7044 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    703e:	bf00      	nop
    7040:	e000      	b.n	7044 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    7042:	bf00      	nop
        }
    }

    return PowerModeCheck;
    7044:	9b03      	ldr	r3, [sp, #12]
}
    7046:	4618      	mov	r0, r3
    7048:	b004      	add	sp, #16
    704a:	4770      	bx	lr
    704c:	4007e000 	.word	0x4007e000

00007050 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    7050:	b500      	push	{lr}
    7052:	b08b      	sub	sp, #44	; 0x2c
    7054:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    7056:	2300      	movs	r3, #0
    7058:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    705a:	2300      	movs	r3, #0
    705c:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    705e:	2300      	movs	r3, #0
    7060:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    7064:	9b01      	ldr	r3, [sp, #4]
    7066:	685b      	ldr	r3, [r3, #4]
    7068:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    706a:	9b08      	ldr	r3, [sp, #32]
    706c:	2b02      	cmp	r3, #2
    706e:	d076      	beq.n	715e <Power_Ip_SMC_ModeConfig+0x10e>
    7070:	9b08      	ldr	r3, [sp, #32]
    7072:	2b02      	cmp	r3, #2
    7074:	f200 80ab 	bhi.w	71ce <Power_Ip_SMC_ModeConfig+0x17e>
    7078:	9b08      	ldr	r3, [sp, #32]
    707a:	2b00      	cmp	r3, #0
    707c:	d003      	beq.n	7086 <Power_Ip_SMC_ModeConfig+0x36>
    707e:	9b08      	ldr	r3, [sp, #32]
    7080:	2b01      	cmp	r3, #1
    7082:	d034      	beq.n	70ee <Power_Ip_SMC_ModeConfig+0x9e>
    7084:	e0a3      	b.n	71ce <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    7086:	4b58      	ldr	r3, [pc, #352]	; (71e8 <Power_Ip_SMC_ModeConfig+0x198>)
    7088:	68db      	ldr	r3, [r3, #12]
    708a:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    708c:	9b06      	ldr	r3, [sp, #24]
    708e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    7092:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    7094:	4a54      	ldr	r2, [pc, #336]	; (71e8 <Power_Ip_SMC_ModeConfig+0x198>)
    7096:	9b06      	ldr	r3, [sp, #24]
    7098:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    709a:	aa02      	add	r2, sp, #8
    709c:	a903      	add	r1, sp, #12
    709e:	a804      	add	r0, sp, #16
    70a0:	f24c 3350 	movw	r3, #50000	; 0xc350
    70a4:	f7ff fece 	bl	6e44 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    70a8:	9a02      	ldr	r2, [sp, #8]
    70aa:	a903      	add	r1, sp, #12
    70ac:	ab04      	add	r3, sp, #16
    70ae:	4618      	mov	r0, r3
    70b0:	f7ff fee2 	bl	6e78 <Power_Ip_TimeoutExpired>
    70b4:	4603      	mov	r3, r0
    70b6:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    70ba:	4b4b      	ldr	r3, [pc, #300]	; (71e8 <Power_Ip_SMC_ModeConfig+0x198>)
    70bc:	695b      	ldr	r3, [r3, #20]
    70be:	f003 0301 	and.w	r3, r3, #1
    70c2:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    70c4:	9b05      	ldr	r3, [sp, #20]
    70c6:	2b01      	cmp	r3, #1
    70c8:	d006      	beq.n	70d8 <Power_Ip_SMC_ModeConfig+0x88>
    70ca:	f89d 301f 	ldrb.w	r3, [sp, #31]
    70ce:	f083 0301 	eor.w	r3, r3, #1
    70d2:	b2db      	uxtb	r3, r3
    70d4:	2b00      	cmp	r3, #0
    70d6:	d1e7      	bne.n	70a8 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    70d8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    70dc:	2b00      	cmp	r3, #0
    70de:	d079      	beq.n	71d4 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    70e0:	2301      	movs	r3, #1
    70e2:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    70e4:	21ff      	movs	r1, #255	; 0xff
    70e6:	2000      	movs	r0, #0
    70e8:	f7ff fe90 	bl	6e0c <Power_Ip_ReportPowerErrors>
            }

            break;
    70ec:	e072      	b.n	71d4 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    70ee:	4b3e      	ldr	r3, [pc, #248]	; (71e8 <Power_Ip_SMC_ModeConfig+0x198>)
    70f0:	68db      	ldr	r3, [r3, #12]
    70f2:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    70f4:	9b06      	ldr	r3, [sp, #24]
    70f6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    70fa:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    70fc:	9b06      	ldr	r3, [sp, #24]
    70fe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    7102:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    7104:	4a38      	ldr	r2, [pc, #224]	; (71e8 <Power_Ip_SMC_ModeConfig+0x198>)
    7106:	9b06      	ldr	r3, [sp, #24]
    7108:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    710a:	aa02      	add	r2, sp, #8
    710c:	a903      	add	r1, sp, #12
    710e:	a804      	add	r0, sp, #16
    7110:	f24c 3350 	movw	r3, #50000	; 0xc350
    7114:	f7ff fe96 	bl	6e44 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    7118:	9a02      	ldr	r2, [sp, #8]
    711a:	a903      	add	r1, sp, #12
    711c:	ab04      	add	r3, sp, #16
    711e:	4618      	mov	r0, r3
    7120:	f7ff feaa 	bl	6e78 <Power_Ip_TimeoutExpired>
    7124:	4603      	mov	r3, r0
    7126:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    712a:	4b2f      	ldr	r3, [pc, #188]	; (71e8 <Power_Ip_SMC_ModeConfig+0x198>)
    712c:	695b      	ldr	r3, [r3, #20]
    712e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7132:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    7134:	9b05      	ldr	r3, [sp, #20]
    7136:	2b80      	cmp	r3, #128	; 0x80
    7138:	d006      	beq.n	7148 <Power_Ip_SMC_ModeConfig+0xf8>
    713a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    713e:	f083 0301 	eor.w	r3, r3, #1
    7142:	b2db      	uxtb	r3, r3
    7144:	2b00      	cmp	r3, #0
    7146:	d1e7      	bne.n	7118 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    7148:	f89d 301f 	ldrb.w	r3, [sp, #31]
    714c:	2b00      	cmp	r3, #0
    714e:	d043      	beq.n	71d8 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    7150:	2301      	movs	r3, #1
    7152:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    7154:	21ff      	movs	r1, #255	; 0xff
    7156:	2000      	movs	r0, #0
    7158:	f7ff fe58 	bl	6e0c <Power_Ip_ReportPowerErrors>
            }

            break;
    715c:	e03c      	b.n	71d8 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    715e:	4b22      	ldr	r3, [pc, #136]	; (71e8 <Power_Ip_SMC_ModeConfig+0x198>)
    7160:	68db      	ldr	r3, [r3, #12]
    7162:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    7164:	9b06      	ldr	r3, [sp, #24]
    7166:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    716a:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    716c:	9b06      	ldr	r3, [sp, #24]
    716e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7172:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    7174:	4a1c      	ldr	r2, [pc, #112]	; (71e8 <Power_Ip_SMC_ModeConfig+0x198>)
    7176:	9b06      	ldr	r3, [sp, #24]
    7178:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    717a:	aa02      	add	r2, sp, #8
    717c:	a903      	add	r1, sp, #12
    717e:	a804      	add	r0, sp, #16
    7180:	f24c 3350 	movw	r3, #50000	; 0xc350
    7184:	f7ff fe5e 	bl	6e44 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    7188:	9a02      	ldr	r2, [sp, #8]
    718a:	a903      	add	r1, sp, #12
    718c:	ab04      	add	r3, sp, #16
    718e:	4618      	mov	r0, r3
    7190:	f7ff fe72 	bl	6e78 <Power_Ip_TimeoutExpired>
    7194:	4603      	mov	r3, r0
    7196:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    719a:	4b13      	ldr	r3, [pc, #76]	; (71e8 <Power_Ip_SMC_ModeConfig+0x198>)
    719c:	695b      	ldr	r3, [r3, #20]
    719e:	f003 0304 	and.w	r3, r3, #4
    71a2:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    71a4:	9b05      	ldr	r3, [sp, #20]
    71a6:	2b04      	cmp	r3, #4
    71a8:	d006      	beq.n	71b8 <Power_Ip_SMC_ModeConfig+0x168>
    71aa:	f89d 301f 	ldrb.w	r3, [sp, #31]
    71ae:	f083 0301 	eor.w	r3, r3, #1
    71b2:	b2db      	uxtb	r3, r3
    71b4:	2b00      	cmp	r3, #0
    71b6:	d1e7      	bne.n	7188 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    71b8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    71bc:	2b00      	cmp	r3, #0
    71be:	d00d      	beq.n	71dc <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    71c0:	2301      	movs	r3, #1
    71c2:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    71c4:	21ff      	movs	r1, #255	; 0xff
    71c6:	2000      	movs	r0, #0
    71c8:	f7ff fe20 	bl	6e0c <Power_Ip_ReportPowerErrors>
            }

            break;
    71cc:	e006      	b.n	71dc <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    71ce:	2301      	movs	r3, #1
    71d0:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    71d2:	e004      	b.n	71de <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    71d4:	bf00      	nop
    71d6:	e002      	b.n	71de <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    71d8:	bf00      	nop
    71da:	e000      	b.n	71de <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    71dc:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    71de:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    71e0:	4618      	mov	r0, r3
    71e2:	b00b      	add	sp, #44	; 0x2c
    71e4:	f85d fb04 	ldr.w	pc, [sp], #4
    71e8:	4007e000 	.word	0x4007e000

000071ec <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    71ec:	b500      	push	{lr}
    71ee:	b085      	sub	sp, #20
    71f0:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    71f2:	9b01      	ldr	r3, [sp, #4]
    71f4:	9303      	str	r3, [sp, #12]
#endif /* (STD_ON == PORT_PRECOMPILE_SUPPORT) */

#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;

    CoreId = (uint8)Port_GetCoreID();
    71f6:	2300      	movs	r3, #0
    71f8:	f88d 300b 	strb.w	r3, [sp, #11]
#if (STD_OFF == PORT_PRECOMPILE_SUPPORT)
    if (NULL_PTR == ConfigPtr)
    71fc:	9b01      	ldr	r3, [sp, #4]
    71fe:	2b00      	cmp	r3, #0
    7200:	d106      	bne.n	7210 <Port_Init+0x24>
#else /*(STD_OFF == PORT_PRECOMPILE_SUPPORT) */
    if (NULL_PTR != ConfigPtr)
#endif /* (STD_OFF == PORT_PRECOMPILE_SUPPORT) */
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_INIT_FAILED);
    7202:	230c      	movs	r3, #12
    7204:	2200      	movs	r2, #0
    7206:	2100      	movs	r1, #0
    7208:	207c      	movs	r0, #124	; 0x7c
    720a:	f011 f903 	bl	18414 <Det_ReportError>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
        }
    }
}
    720e:	e014      	b.n	723a <Port_Init+0x4e>
        if ((uint32)1 != pLocalConfigPtr->pau8Port_PartitionList[CoreId])
    7210:	9b03      	ldr	r3, [sp, #12]
    7212:	69da      	ldr	r2, [r3, #28]
    7214:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7218:	4413      	add	r3, r2
    721a:	781b      	ldrb	r3, [r3, #0]
    721c:	2b01      	cmp	r3, #1
    721e:	d006      	beq.n	722e <Port_Init+0x42>
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
    7220:	23f0      	movs	r3, #240	; 0xf0
    7222:	2200      	movs	r2, #0
    7224:	2100      	movs	r1, #0
    7226:	207c      	movs	r0, #124	; 0x7c
    7228:	f011 f8f4 	bl	18414 <Det_ReportError>
}
    722c:	e005      	b.n	723a <Port_Init+0x4e>
            Port_Ipw_Init(pLocalConfigPtr);
    722e:	9803      	ldr	r0, [sp, #12]
    7230:	f000 fc64 	bl	7afc <Port_Ipw_Init>
            Port_pConfigPtr = pLocalConfigPtr;
    7234:	4a03      	ldr	r2, [pc, #12]	; (7244 <Port_Init+0x58>)
    7236:	9b03      	ldr	r3, [sp, #12]
    7238:	6013      	str	r3, [r2, #0]
}
    723a:	bf00      	nop
    723c:	b005      	add	sp, #20
    723e:	f85d fb04 	ldr.w	pc, [sp], #4
    7242:	bf00      	nop
    7244:	1fff8d28 	.word	0x1fff8d28

00007248 <Port_SetPinDirection>:
void Port_SetPinDirection
(
    Port_PinType Pin,
    Port_PinDirectionType Direction
)
{
    7248:	b500      	push	{lr}
    724a:	b085      	sub	sp, #20
    724c:	9001      	str	r0, [sp, #4]
    724e:	9100      	str	r1, [sp, #0]
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    /* Variable used to store current error status */
    Std_ReturnType ErrStatus;

    /* Check if Port module is initialized */
    if (NULL_PTR == Port_pConfigPtr)
    7250:	4b11      	ldr	r3, [pc, #68]	; (7298 <Port_SetPinDirection+0x50>)
    7252:	681b      	ldr	r3, [r3, #0]
    7254:	2b00      	cmp	r3, #0
    7256:	d106      	bne.n	7266 <Port_SetPinDirection+0x1e>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_UNINIT);
    7258:	230f      	movs	r3, #15
    725a:	2201      	movs	r2, #1
    725c:	2100      	movs	r1, #0
    725e:	207c      	movs	r0, #124	; 0x7c
    7260:	f011 f8d8 	bl	18414 <Det_ReportError>
        {
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_DIRECTION_UNCHANGEABLE);
        }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    }
}
    7264:	e013      	b.n	728e <Port_SetPinDirection+0x46>
        ErrStatus = Port_Ipw_SetPinDirection(Pin, Direction, Port_pConfigPtr);
    7266:	4b0c      	ldr	r3, [pc, #48]	; (7298 <Port_SetPinDirection+0x50>)
    7268:	681b      	ldr	r3, [r3, #0]
    726a:	461a      	mov	r2, r3
    726c:	9900      	ldr	r1, [sp, #0]
    726e:	9801      	ldr	r0, [sp, #4]
    7270:	f000 fcb2 	bl	7bd8 <Port_Ipw_SetPinDirection>
    7274:	4603      	mov	r3, r0
    7276:	f88d 300f 	strb.w	r3, [sp, #15]
        if ((Std_ReturnType)E_NOT_OK == ErrStatus)
    727a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    727e:	2b01      	cmp	r3, #1
    7280:	d105      	bne.n	728e <Port_SetPinDirection+0x46>
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_DIRECTION_UNCHANGEABLE);
    7282:	230b      	movs	r3, #11
    7284:	2201      	movs	r2, #1
    7286:	2100      	movs	r1, #0
    7288:	207c      	movs	r0, #124	; 0x7c
    728a:	f011 f8c3 	bl	18414 <Det_ReportError>
}
    728e:	bf00      	nop
    7290:	b005      	add	sp, #20
    7292:	f85d fb04 	ldr.w	pc, [sp], #4
    7296:	bf00      	nop
    7298:	1fff8d28 	.word	0x1fff8d28

0000729c <Port_SetPinMode>:
void Port_SetPinMode
(
    Port_PinType Pin,
    Port_PinModeType Mode
)
{
    729c:	b500      	push	{lr}
    729e:	b085      	sub	sp, #20
    72a0:	9001      	str	r0, [sp, #4]
    72a2:	460b      	mov	r3, r1
    72a4:	f88d 3003 	strb.w	r3, [sp, #3]
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 u8PinModeError = (uint8)0U;
    72a8:	2300      	movs	r3, #0
    72aa:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Check if port is initialized */
    if (NULL_PTR == Port_pConfigPtr)
    72ae:	4b12      	ldr	r3, [pc, #72]	; (72f8 <Port_SetPinMode+0x5c>)
    72b0:	681b      	ldr	r3, [r3, #0]
    72b2:	2b00      	cmp	r3, #0
    72b4:	d106      	bne.n	72c4 <Port_SetPinMode+0x28>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_UNINIT);
    72b6:	230f      	movs	r3, #15
    72b8:	2204      	movs	r2, #4
    72ba:	2100      	movs	r1, #0
    72bc:	207c      	movs	r0, #124	; 0x7c
    72be:	f011 f8a9 	bl	18414 <Det_ReportError>
        {
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_INVALID_MODE);
        }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    }
}
    72c2:	e014      	b.n	72ee <Port_SetPinMode+0x52>
        u8PinModeError = (uint8)Port_Ipw_SetPinMode(Pin, Mode, Port_pConfigPtr);
    72c4:	4b0c      	ldr	r3, [pc, #48]	; (72f8 <Port_SetPinMode+0x5c>)
    72c6:	681a      	ldr	r2, [r3, #0]
    72c8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    72cc:	4619      	mov	r1, r3
    72ce:	9801      	ldr	r0, [sp, #4]
    72d0:	f000 fd7a 	bl	7dc8 <Port_Ipw_SetPinMode>
    72d4:	4603      	mov	r3, r0
    72d6:	f88d 300f 	strb.w	r3, [sp, #15]
        if (PORT_E_PARAM_INVALID_MODE == u8PinModeError)
    72da:	f89d 300f 	ldrb.w	r3, [sp, #15]
    72de:	2b0d      	cmp	r3, #13
    72e0:	d105      	bne.n	72ee <Port_SetPinMode+0x52>
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_INVALID_MODE);
    72e2:	230d      	movs	r3, #13
    72e4:	2204      	movs	r2, #4
    72e6:	2100      	movs	r1, #0
    72e8:	207c      	movs	r0, #124	; 0x7c
    72ea:	f011 f893 	bl	18414 <Det_ReportError>
}
    72ee:	bf00      	nop
    72f0:	b005      	add	sp, #20
    72f2:	f85d fb04 	ldr.w	pc, [sp], #4
    72f6:	bf00      	nop
    72f8:	1fff8d28 	.word	0x1fff8d28

000072fc <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    72fc:	b500      	push	{lr}
    72fe:	b083      	sub	sp, #12
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;

    CoreId = (uint8)Port_GetCoreID();
    7300:	2300      	movs	r3, #0
    7302:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Check if Port module is initialized */
    if (NULL_PTR == Port_pConfigPtr)
    7306:	4b12      	ldr	r3, [pc, #72]	; (7350 <Port_RefreshPortDirection+0x54>)
    7308:	681b      	ldr	r3, [r3, #0]
    730a:	2b00      	cmp	r3, #0
    730c:	d106      	bne.n	731c <Port_RefreshPortDirection+0x20>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_UNINIT);
    730e:	230f      	movs	r3, #15
    7310:	2202      	movs	r2, #2
    7312:	2100      	movs	r1, #0
    7314:	207c      	movs	r0, #124	; 0x7c
    7316:	f011 f87d 	bl	18414 <Det_ReportError>
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    }
}
    731a:	e014      	b.n	7346 <Port_RefreshPortDirection+0x4a>
    else if ((uint32)1 != Port_pConfigPtr->pau8Port_PartitionList[CoreId])
    731c:	4b0c      	ldr	r3, [pc, #48]	; (7350 <Port_RefreshPortDirection+0x54>)
    731e:	681b      	ldr	r3, [r3, #0]
    7320:	69da      	ldr	r2, [r3, #28]
    7322:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7326:	4413      	add	r3, r2
    7328:	781b      	ldrb	r3, [r3, #0]
    732a:	2b01      	cmp	r3, #1
    732c:	d006      	beq.n	733c <Port_RefreshPortDirection+0x40>
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    732e:	23f0      	movs	r3, #240	; 0xf0
    7330:	2202      	movs	r2, #2
    7332:	2100      	movs	r1, #0
    7334:	207c      	movs	r0, #124	; 0x7c
    7336:	f011 f86d 	bl	18414 <Det_ReportError>
}
    733a:	e004      	b.n	7346 <Port_RefreshPortDirection+0x4a>
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    733c:	4b04      	ldr	r3, [pc, #16]	; (7350 <Port_RefreshPortDirection+0x54>)
    733e:	681b      	ldr	r3, [r3, #0]
    7340:	4618      	mov	r0, r3
    7342:	f000 febf 	bl	80c4 <Port_Ipw_RefreshPortDirection>
}
    7346:	bf00      	nop
    7348:	b003      	add	sp, #12
    734a:	f85d fb04 	ldr.w	pc, [sp], #4
    734e:	bf00      	nop
    7350:	1fff8d28 	.word	0x1fff8d28

00007354 <Port_GetVersionInfo>:
*/
void Port_GetVersionInfo
(
    Std_VersionInfoType * versioninfo
)
{
    7354:	b500      	push	{lr}
    7356:	b083      	sub	sp, #12
    7358:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    if (NULL_PTR == versioninfo)
    735a:	9b01      	ldr	r3, [sp, #4]
    735c:	2b00      	cmp	r3, #0
    735e:	d106      	bne.n	736e <Port_GetVersionInfo+0x1a>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_GETVERSIONINFO_ID, (uint8)PORT_E_PARAM_POINTER);
    7360:	2310      	movs	r3, #16
    7362:	2203      	movs	r2, #3
    7364:	2100      	movs	r1, #0
    7366:	207c      	movs	r0, #124	; 0x7c
    7368:	f011 f854 	bl	18414 <Det_ReportError>
        (versioninfo)->moduleID         = (uint16)PORT_MODULE_ID;
        (versioninfo)->sw_major_version = (uint8)PORT_SW_MAJOR_VERSION;
        (versioninfo)->sw_minor_version = (uint8)PORT_SW_MINOR_VERSION;
        (versioninfo)->sw_patch_version = (uint8)PORT_SW_PATCH_VERSION;
    }
}
    736c:	e00e      	b.n	738c <Port_GetVersionInfo+0x38>
        (versioninfo)->vendorID         = (uint16)PORT_VENDOR_ID;
    736e:	9b01      	ldr	r3, [sp, #4]
    7370:	222b      	movs	r2, #43	; 0x2b
    7372:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID         = (uint16)PORT_MODULE_ID;
    7374:	9b01      	ldr	r3, [sp, #4]
    7376:	227c      	movs	r2, #124	; 0x7c
    7378:	805a      	strh	r2, [r3, #2]
        (versioninfo)->sw_major_version = (uint8)PORT_SW_MAJOR_VERSION;
    737a:	9b01      	ldr	r3, [sp, #4]
    737c:	2202      	movs	r2, #2
    737e:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)PORT_SW_MINOR_VERSION;
    7380:	9b01      	ldr	r3, [sp, #4]
    7382:	2200      	movs	r2, #0
    7384:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)PORT_SW_PATCH_VERSION;
    7386:	9b01      	ldr	r3, [sp, #4]
    7388:	2200      	movs	r2, #0
    738a:	719a      	strb	r2, [r3, #6]
}
    738c:	bf00      	nop
    738e:	b003      	add	sp, #12
    7390:	f85d fb04 	ldr.w	pc, [sp], #4

00007394 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    7394:	b086      	sub	sp, #24
    7396:	9003      	str	r0, [sp, #12]
    7398:	9102      	str	r1, [sp, #8]
    739a:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    739c:	23ff      	movs	r3, #255	; 0xff
    739e:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    73a0:	9b03      	ldr	r3, [sp, #12]
    73a2:	4a39      	ldr	r2, [pc, #228]	; (7488 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    73a4:	4293      	cmp	r3, r2
    73a6:	d151      	bne.n	744c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    73a8:	9b02      	ldr	r3, [sp, #8]
    73aa:	2b10      	cmp	r3, #16
    73ac:	d867      	bhi.n	747e <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    73ae:	a201      	add	r2, pc, #4	; (adr r2, 73b4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    73b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    73b4:	000073f9 	.word	0x000073f9
    73b8:	00007407 	.word	0x00007407
    73bc:	0000747f 	.word	0x0000747f
    73c0:	0000747f 	.word	0x0000747f
    73c4:	0000747f 	.word	0x0000747f
    73c8:	0000747f 	.word	0x0000747f
    73cc:	0000747f 	.word	0x0000747f
    73d0:	0000747f 	.word	0x0000747f
    73d4:	0000747f 	.word	0x0000747f
    73d8:	0000747f 	.word	0x0000747f
    73dc:	0000747f 	.word	0x0000747f
    73e0:	0000747f 	.word	0x0000747f
    73e4:	0000747f 	.word	0x0000747f
    73e8:	00007415 	.word	0x00007415
    73ec:	00007423 	.word	0x00007423
    73f0:	00007431 	.word	0x00007431
    73f4:	0000743f 	.word	0x0000743f
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    73f8:	2301      	movs	r3, #1
    73fa:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    73fc:	9a05      	ldr	r2, [sp, #20]
    73fe:	9b01      	ldr	r3, [sp, #4]
    7400:	4313      	orrs	r3, r2
    7402:	9305      	str	r3, [sp, #20]
                break;
    7404:	e03c      	b.n	7480 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    7406:	2302      	movs	r3, #2
    7408:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    740a:	9a05      	ldr	r2, [sp, #20]
    740c:	9b01      	ldr	r3, [sp, #4]
    740e:	4313      	orrs	r3, r2
    7410:	9305      	str	r3, [sp, #20]
                break;
    7412:	e035      	b.n	7480 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    7414:	2304      	movs	r3, #4
    7416:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    7418:	9a05      	ldr	r2, [sp, #20]
    741a:	9b01      	ldr	r3, [sp, #4]
    741c:	4313      	orrs	r3, r2
    741e:	9305      	str	r3, [sp, #20]
                break;
    7420:	e02e      	b.n	7480 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    7422:	2308      	movs	r3, #8
    7424:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    7426:	9a05      	ldr	r2, [sp, #20]
    7428:	9b01      	ldr	r3, [sp, #4]
    742a:	4313      	orrs	r3, r2
    742c:	9305      	str	r3, [sp, #20]
                break;
    742e:	e027      	b.n	7480 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    7430:	230e      	movs	r3, #14
    7432:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    7434:	9a05      	ldr	r2, [sp, #20]
    7436:	9b01      	ldr	r3, [sp, #4]
    7438:	4013      	ands	r3, r2
    743a:	9305      	str	r3, [sp, #20]
                break;
    743c:	e020      	b.n	7480 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    743e:	230d      	movs	r3, #13
    7440:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    7442:	9a05      	ldr	r2, [sp, #20]
    7444:	9b01      	ldr	r3, [sp, #4]
    7446:	4013      	ands	r3, r2
    7448:	9305      	str	r3, [sp, #20]
                break;
    744a:	e019      	b.n	7480 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    744c:	9b03      	ldr	r3, [sp, #12]
    744e:	4a0f      	ldr	r2, [pc, #60]	; (748c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    7450:	4293      	cmp	r3, r2
    7452:	d115      	bne.n	7480 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    7454:	9b02      	ldr	r3, [sp, #8]
    7456:	2b00      	cmp	r3, #0
    7458:	d003      	beq.n	7462 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    745a:	9b02      	ldr	r3, [sp, #8]
    745c:	2b01      	cmp	r3, #1
    745e:	d007      	beq.n	7470 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    7460:	e00e      	b.n	7480 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    7462:	230b      	movs	r3, #11
    7464:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    7466:	9a05      	ldr	r2, [sp, #20]
    7468:	9b01      	ldr	r3, [sp, #4]
    746a:	4013      	ands	r3, r2
    746c:	9305      	str	r3, [sp, #20]
                break;
    746e:	e007      	b.n	7480 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    7470:	2307      	movs	r3, #7
    7472:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    7474:	9a05      	ldr	r2, [sp, #20]
    7476:	9b01      	ldr	r3, [sp, #4]
    7478:	4013      	ands	r3, r2
    747a:	9305      	str	r3, [sp, #20]
                break;
    747c:	e000      	b.n	7480 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    747e:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    7480:	9b05      	ldr	r3, [sp, #20]
}
    7482:	4618      	mov	r0, r3
    7484:	b006      	add	sp, #24
    7486:	4770      	bx	lr
    7488:	4004a000 	.word	0x4004a000
    748c:	4004b000 	.word	0x4004b000

00007490 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    7490:	b500      	push	{lr}
    7492:	b089      	sub	sp, #36	; 0x24
    7494:	9003      	str	r0, [sp, #12]
    7496:	9102      	str	r1, [sp, #8]
    7498:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    749a:	9b01      	ldr	r3, [sp, #4]
    749c:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    749e:	9b01      	ldr	r3, [sp, #4]
    74a0:	2b08      	cmp	r3, #8
    74a2:	d121      	bne.n	74e8 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    74a4:	4b13      	ldr	r3, [pc, #76]	; (74f4 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    74a6:	685b      	ldr	r3, [r3, #4]
    74a8:	f003 030f 	and.w	r3, r3, #15
    74ac:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    74ae:	9a06      	ldr	r2, [sp, #24]
    74b0:	9902      	ldr	r1, [sp, #8]
    74b2:	9803      	ldr	r0, [sp, #12]
    74b4:	f7ff ff6e 	bl	7394 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    74b8:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    74ba:	9b05      	ldr	r3, [sp, #20]
    74bc:	2bff      	cmp	r3, #255	; 0xff
    74be:	d011      	beq.n	74e4 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    74c0:	f00e fbd0 	bl	15c64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    74c4:	4b0b      	ldr	r3, [pc, #44]	; (74f4 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    74c6:	685b      	ldr	r3, [r3, #4]
    74c8:	4a0a      	ldr	r2, [pc, #40]	; (74f4 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    74ca:	f023 030f 	bic.w	r3, r3, #15
    74ce:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    74d0:	4b08      	ldr	r3, [pc, #32]	; (74f4 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    74d2:	685a      	ldr	r2, [r3, #4]
    74d4:	9b05      	ldr	r3, [sp, #20]
    74d6:	f003 030f 	and.w	r3, r3, #15
    74da:	4906      	ldr	r1, [pc, #24]	; (74f4 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    74dc:	4313      	orrs	r3, r2
    74de:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    74e0:	f00e fbec 	bl	15cbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    74e4:	2300      	movs	r3, #0
    74e6:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    74e8:	9b07      	ldr	r3, [sp, #28]
}
    74ea:	4618      	mov	r0, r3
    74ec:	b009      	add	sp, #36	; 0x24
    74ee:	f85d fb04 	ldr.w	pc, [sp], #4
    74f2:	bf00      	nop
    74f4:	40048000 	.word	0x40048000

000074f8 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    74f8:	b500      	push	{lr}
    74fa:	b087      	sub	sp, #28
    74fc:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    74fe:	2300      	movs	r3, #0
    7500:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    7502:	2300      	movs	r3, #0
    7504:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    7506:	2300      	movs	r3, #0
    7508:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    750a:	9b01      	ldr	r3, [sp, #4]
    750c:	68db      	ldr	r3, [r3, #12]
    750e:	2b02      	cmp	r3, #2
    7510:	d00a      	beq.n	7528 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    7512:	9b05      	ldr	r3, [sp, #20]
    7514:	f043 0302 	orr.w	r3, r3, #2
    7518:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    751a:	9b01      	ldr	r3, [sp, #4]
    751c:	68db      	ldr	r3, [r3, #12]
    751e:	f003 0301 	and.w	r3, r3, #1
    7522:	9a05      	ldr	r2, [sp, #20]
    7524:	4313      	orrs	r3, r2
    7526:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    7528:	9b01      	ldr	r3, [sp, #4]
    752a:	699b      	ldr	r3, [r3, #24]
    752c:	019b      	lsls	r3, r3, #6
    752e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7532:	9a05      	ldr	r2, [sp, #20]
    7534:	4313      	orrs	r3, r2
    7536:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    7538:	9b01      	ldr	r3, [sp, #4]
    753a:	6a1b      	ldr	r3, [r3, #32]
    753c:	03db      	lsls	r3, r3, #15
    753e:	b29b      	uxth	r3, r3
    7540:	9a05      	ldr	r2, [sp, #20]
    7542:	4313      	orrs	r3, r2
    7544:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    7546:	9b01      	ldr	r3, [sp, #4]
    7548:	7f1b      	ldrb	r3, [r3, #28]
    754a:	2b00      	cmp	r3, #0
    754c:	d001      	beq.n	7552 <Port_Ci_Port_Ip_PinInit+0x5a>
    754e:	2310      	movs	r3, #16
    7550:	e000      	b.n	7554 <Port_Ci_Port_Ip_PinInit+0x5c>
    7552:	2300      	movs	r3, #0
    7554:	9a05      	ldr	r2, [sp, #20]
    7556:	4313      	orrs	r3, r2
    7558:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    755a:	9b01      	ldr	r3, [sp, #4]
    755c:	691b      	ldr	r3, [r3, #16]
    755e:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    7560:	9b01      	ldr	r3, [sp, #4]
    7562:	6818      	ldr	r0, [r3, #0]
    7564:	9b01      	ldr	r3, [sp, #4]
    7566:	689b      	ldr	r3, [r3, #8]
    7568:	9a04      	ldr	r2, [sp, #16]
    756a:	4619      	mov	r1, r3
    756c:	f7ff ff90 	bl	7490 <Port_Ci_Port_Ip_ConfigureInterleave>
    7570:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    7572:	9b03      	ldr	r3, [sp, #12]
    7574:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    7576:	9b04      	ldr	r3, [sp, #16]
    7578:	021b      	lsls	r3, r3, #8
    757a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    757e:	9a05      	ldr	r2, [sp, #20]
    7580:	4313      	orrs	r3, r2
    7582:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    7584:	f00e f9d4 	bl	15930 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    7588:	9b01      	ldr	r3, [sp, #4]
    758a:	681b      	ldr	r3, [r3, #0]
    758c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    7590:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    7592:	9b01      	ldr	r3, [sp, #4]
    7594:	689b      	ldr	r3, [r3, #8]
    7596:	2201      	movs	r2, #1
    7598:	fa02 f303 	lsl.w	r3, r2, r3
    759c:	43db      	mvns	r3, r3
    759e:	9a02      	ldr	r2, [sp, #8]
    75a0:	4013      	ands	r3, r2
    75a2:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    75a4:	9b01      	ldr	r3, [sp, #4]
    75a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    75aa:	2b00      	cmp	r3, #0
    75ac:	d001      	beq.n	75b2 <Port_Ci_Port_Ip_PinInit+0xba>
    75ae:	2201      	movs	r2, #1
    75b0:	e000      	b.n	75b4 <Port_Ci_Port_Ip_PinInit+0xbc>
    75b2:	2200      	movs	r2, #0
    75b4:	9b01      	ldr	r3, [sp, #4]
    75b6:	689b      	ldr	r3, [r3, #8]
    75b8:	fa02 f303 	lsl.w	r3, r2, r3
    75bc:	9a02      	ldr	r2, [sp, #8]
    75be:	4313      	orrs	r3, r2
    75c0:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    75c2:	9b01      	ldr	r3, [sp, #4]
    75c4:	681b      	ldr	r3, [r3, #0]
    75c6:	9a02      	ldr	r2, [sp, #8]
    75c8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    75cc:	f00e f9dc 	bl	15988 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    75d0:	9b04      	ldr	r3, [sp, #16]
    75d2:	2b01      	cmp	r3, #1
    75d4:	d16d      	bne.n	76b2 <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    75d6:	9b01      	ldr	r3, [sp, #4]
    75d8:	695b      	ldr	r3, [r3, #20]
    75da:	2b02      	cmp	r3, #2
    75dc:	d138      	bne.n	7650 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    75de:	9b01      	ldr	r3, [sp, #4]
    75e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    75e4:	2b01      	cmp	r3, #1
    75e6:	d10f      	bne.n	7608 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    75e8:	f00e f9f4 	bl	159d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    75ec:	9b01      	ldr	r3, [sp, #4]
    75ee:	685b      	ldr	r3, [r3, #4]
    75f0:	6859      	ldr	r1, [r3, #4]
    75f2:	9b01      	ldr	r3, [sp, #4]
    75f4:	689b      	ldr	r3, [r3, #8]
    75f6:	2201      	movs	r2, #1
    75f8:	409a      	lsls	r2, r3
    75fa:	9b01      	ldr	r3, [sp, #4]
    75fc:	685b      	ldr	r3, [r3, #4]
    75fe:	430a      	orrs	r2, r1
    7600:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    7602:	f00e fa13 	bl	15a2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    7606:	e013      	b.n	7630 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    7608:	9b01      	ldr	r3, [sp, #4]
    760a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    760e:	2b00      	cmp	r3, #0
    7610:	d10e      	bne.n	7630 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    7612:	f00e fa31 	bl	15a78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    7616:	9b01      	ldr	r3, [sp, #4]
    7618:	685b      	ldr	r3, [r3, #4]
    761a:	6899      	ldr	r1, [r3, #8]
    761c:	9b01      	ldr	r3, [sp, #4]
    761e:	689b      	ldr	r3, [r3, #8]
    7620:	2201      	movs	r2, #1
    7622:	409a      	lsls	r2, r3
    7624:	9b01      	ldr	r3, [sp, #4]
    7626:	685b      	ldr	r3, [r3, #4]
    7628:	430a      	orrs	r2, r1
    762a:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    762c:	f00e fa50 	bl	15ad0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    7630:	f00e fa74 	bl	15b1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    7634:	9b01      	ldr	r3, [sp, #4]
    7636:	685b      	ldr	r3, [r3, #4]
    7638:	6959      	ldr	r1, [r3, #20]
    763a:	9b01      	ldr	r3, [sp, #4]
    763c:	689b      	ldr	r3, [r3, #8]
    763e:	2201      	movs	r2, #1
    7640:	409a      	lsls	r2, r3
    7642:	9b01      	ldr	r3, [sp, #4]
    7644:	685b      	ldr	r3, [r3, #4]
    7646:	430a      	orrs	r2, r1
    7648:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    764a:	f00e fa93 	bl	15b74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    764e:	e030      	b.n	76b2 <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    7650:	f00e fa64 	bl	15b1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    7654:	9b01      	ldr	r3, [sp, #4]
    7656:	685b      	ldr	r3, [r3, #4]
    7658:	6959      	ldr	r1, [r3, #20]
    765a:	9b01      	ldr	r3, [sp, #4]
    765c:	689b      	ldr	r3, [r3, #8]
    765e:	2201      	movs	r2, #1
    7660:	fa02 f303 	lsl.w	r3, r2, r3
    7664:	43da      	mvns	r2, r3
    7666:	9b01      	ldr	r3, [sp, #4]
    7668:	685b      	ldr	r3, [r3, #4]
    766a:	400a      	ands	r2, r1
    766c:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    766e:	f00e fa81 	bl	15b74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    7672:	f00e faa5 	bl	15bc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    7676:	9b01      	ldr	r3, [sp, #4]
    7678:	685b      	ldr	r3, [r3, #4]
    767a:	6999      	ldr	r1, [r3, #24]
    767c:	9b01      	ldr	r3, [sp, #4]
    767e:	689b      	ldr	r3, [r3, #8]
    7680:	2201      	movs	r2, #1
    7682:	fa02 f303 	lsl.w	r3, r2, r3
    7686:	43da      	mvns	r2, r3
    7688:	9b01      	ldr	r3, [sp, #4]
    768a:	685b      	ldr	r3, [r3, #4]
    768c:	400a      	ands	r2, r1
    768e:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    7690:	9b01      	ldr	r3, [sp, #4]
    7692:	695b      	ldr	r3, [r3, #20]
    7694:	2b03      	cmp	r3, #3
    7696:	d10a      	bne.n	76ae <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    7698:	9b01      	ldr	r3, [sp, #4]
    769a:	685b      	ldr	r3, [r3, #4]
    769c:	6999      	ldr	r1, [r3, #24]
    769e:	9b01      	ldr	r3, [sp, #4]
    76a0:	689b      	ldr	r3, [r3, #8]
    76a2:	2201      	movs	r2, #1
    76a4:	409a      	lsls	r2, r3
    76a6:	9b01      	ldr	r3, [sp, #4]
    76a8:	685b      	ldr	r3, [r3, #4]
    76aa:	430a      	orrs	r2, r1
    76ac:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    76ae:	f00e fab3 	bl	15c18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    76b2:	9b01      	ldr	r3, [sp, #4]
    76b4:	681b      	ldr	r3, [r3, #0]
    76b6:	9a01      	ldr	r2, [sp, #4]
    76b8:	6892      	ldr	r2, [r2, #8]
    76ba:	9905      	ldr	r1, [sp, #20]
    76bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    76c0:	bf00      	nop
    76c2:	b007      	add	sp, #28
    76c4:	f85d fb04 	ldr.w	pc, [sp], #4

000076c8 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    76c8:	b500      	push	{lr}
    76ca:	b085      	sub	sp, #20
    76cc:	9001      	str	r0, [sp, #4]
    76ce:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    76d0:	2300      	movs	r3, #0
    76d2:	9303      	str	r3, [sp, #12]
    76d4:	e00d      	b.n	76f2 <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    76d6:	9a03      	ldr	r2, [sp, #12]
    76d8:	4613      	mov	r3, r2
    76da:	009b      	lsls	r3, r3, #2
    76dc:	4413      	add	r3, r2
    76de:	00db      	lsls	r3, r3, #3
    76e0:	461a      	mov	r2, r3
    76e2:	9b00      	ldr	r3, [sp, #0]
    76e4:	4413      	add	r3, r2
    76e6:	4618      	mov	r0, r3
    76e8:	f7ff ff06 	bl	74f8 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    76ec:	9b03      	ldr	r3, [sp, #12]
    76ee:	3301      	adds	r3, #1
    76f0:	9303      	str	r3, [sp, #12]
    76f2:	9a03      	ldr	r2, [sp, #12]
    76f4:	9b01      	ldr	r3, [sp, #4]
    76f6:	429a      	cmp	r2, r3
    76f8:	d3ed      	bcc.n	76d6 <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    76fa:	2300      	movs	r3, #0
}
    76fc:	4618      	mov	r0, r3
    76fe:	b005      	add	sp, #20
    7700:	f85d fb04 	ldr.w	pc, [sp], #4

00007704 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    7704:	b500      	push	{lr}
    7706:	b087      	sub	sp, #28
    7708:	9003      	str	r0, [sp, #12]
    770a:	9102      	str	r1, [sp, #8]
    770c:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    770e:	9a01      	ldr	r2, [sp, #4]
    7710:	9902      	ldr	r1, [sp, #8]
    7712:	9803      	ldr	r0, [sp, #12]
    7714:	f7ff febc 	bl	7490 <Port_Ci_Port_Ip_ConfigureInterleave>
    7718:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    771a:	f00e faf5 	bl	15d08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    771e:	9b03      	ldr	r3, [sp, #12]
    7720:	9a02      	ldr	r2, [sp, #8]
    7722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7726:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    7728:	9b04      	ldr	r3, [sp, #16]
    772a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    772e:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    7730:	9b05      	ldr	r3, [sp, #20]
    7732:	021b      	lsls	r3, r3, #8
    7734:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    7738:	9a04      	ldr	r2, [sp, #16]
    773a:	4313      	orrs	r3, r2
    773c:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    773e:	9b03      	ldr	r3, [sp, #12]
    7740:	9a02      	ldr	r2, [sp, #8]
    7742:	9904      	ldr	r1, [sp, #16]
    7744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    7748:	f00e fb0a 	bl	15d60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    774c:	bf00      	nop
    774e:	b007      	add	sp, #28
    7750:	f85d fb04 	ldr.w	pc, [sp], #4

00007754 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    7754:	b500      	push	{lr}
    7756:	b083      	sub	sp, #12
    7758:	9001      	str	r0, [sp, #4]
    775a:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    775c:	f00e fb26 	bl	15dac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    7760:	9b01      	ldr	r3, [sp, #4]
    7762:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    7766:	2101      	movs	r1, #1
    7768:	9b00      	ldr	r3, [sp, #0]
    776a:	fa01 f303 	lsl.w	r3, r1, r3
    776e:	431a      	orrs	r2, r3
    7770:	9b01      	ldr	r3, [sp, #4]
    7772:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    7776:	f00e fb45 	bl	15e04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    777a:	bf00      	nop
    777c:	b003      	add	sp, #12
    777e:	f85d fb04 	ldr.w	pc, [sp], #4

00007782 <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    7782:	b500      	push	{lr}
    7784:	b083      	sub	sp, #12
    7786:	9001      	str	r0, [sp, #4]
    7788:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    778a:	f00e fb61 	bl	15e50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    778e:	9b01      	ldr	r3, [sp, #4]
    7790:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    7794:	2101      	movs	r1, #1
    7796:	9b00      	ldr	r3, [sp, #0]
    7798:	fa01 f303 	lsl.w	r3, r1, r3
    779c:	43db      	mvns	r3, r3
    779e:	401a      	ands	r2, r3
    77a0:	9b01      	ldr	r3, [sp, #4]
    77a2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    77a6:	f00e fb7f 	bl	15ea8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    77aa:	bf00      	nop
    77ac:	b003      	add	sp, #12
    77ae:	f85d fb04 	ldr.w	pc, [sp], #4

000077b2 <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    77b2:	b082      	sub	sp, #8
    77b4:	9001      	str	r0, [sp, #4]
    77b6:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    77b8:	9b00      	ldr	r3, [sp, #0]
    77ba:	785b      	ldrb	r3, [r3, #1]
    77bc:	f003 0201 	and.w	r2, r3, #1
    77c0:	9b01      	ldr	r3, [sp, #4]
    77c2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    77c6:	9b00      	ldr	r3, [sp, #0]
    77c8:	789b      	ldrb	r3, [r3, #2]
    77ca:	f003 021f 	and.w	r2, r3, #31
    77ce:	9b01      	ldr	r3, [sp, #4]
    77d0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    77d4:	bf00      	nop
    77d6:	b002      	add	sp, #8
    77d8:	4770      	bx	lr

000077da <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    77da:	b086      	sub	sp, #24
    77dc:	9003      	str	r0, [sp, #12]
    77de:	9301      	str	r3, [sp, #4]
    77e0:	460b      	mov	r3, r1
    77e2:	f8ad 300a 	strh.w	r3, [sp, #10]
    77e6:	4613      	mov	r3, r2
    77e8:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    77ec:	2300      	movs	r3, #0
    77ee:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    77f2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    77f6:	f043 0301 	orr.w	r3, r3, #1
    77fa:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    77fe:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7802:	f043 0302 	orr.w	r3, r3, #2
    7806:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    780a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    780e:	f043 0310 	orr.w	r3, r3, #16
    7812:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    7816:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    781a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    781e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    7822:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7826:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    782a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    782e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    7836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    783a:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    783e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    7842:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    7846:	4013      	ands	r3, r2
    7848:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    784c:	9b01      	ldr	r3, [sp, #4]
    784e:	2b00      	cmp	r3, #0
    7850:	d003      	beq.n	785a <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    7852:	9b01      	ldr	r3, [sp, #4]
    7854:	2b01      	cmp	r3, #1
    7856:	d00a      	beq.n	786e <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    7858:	e013      	b.n	7882 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    785a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    785e:	041a      	lsls	r2, r3, #16
    7860:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7864:	431a      	orrs	r2, r3
    7866:	9b03      	ldr	r3, [sp, #12]
    7868:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    786c:	e009      	b.n	7882 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    786e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7872:	041a      	lsls	r2, r3, #16
    7874:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7878:	431a      	orrs	r2, r3
    787a:	9b03      	ldr	r3, [sp, #12]
    787c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    7880:	bf00      	nop
    }
}
    7882:	bf00      	nop
    7884:	b006      	add	sp, #24
    7886:	4770      	bx	lr

00007888 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    7888:	b500      	push	{lr}
    788a:	b087      	sub	sp, #28
    788c:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    788e:	9b01      	ldr	r3, [sp, #4]
    7890:	885b      	ldrh	r3, [r3, #2]
    7892:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    7896:	9b01      	ldr	r3, [sp, #4]
    7898:	689b      	ldr	r3, [r3, #8]
    789a:	7a1b      	ldrb	r3, [r3, #8]
    789c:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    78a0:	9b01      	ldr	r3, [sp, #4]
    78a2:	689b      	ldr	r3, [r3, #8]
    78a4:	681b      	ldr	r3, [r3, #0]
    78a6:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    78a8:	9b01      	ldr	r3, [sp, #4]
    78aa:	689b      	ldr	r3, [r3, #8]
    78ac:	685b      	ldr	r3, [r3, #4]
    78ae:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    78b0:	2300      	movs	r3, #0
    78b2:	f8ad 3016 	strh.w	r3, [sp, #22]
    78b6:	e111      	b.n	7adc <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    78b8:	9b02      	ldr	r3, [sp, #8]
    78ba:	2b02      	cmp	r3, #2
    78bc:	d169      	bne.n	7992 <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    78be:	f89d 3013 	ldrb.w	r3, [sp, #19]
    78c2:	2b01      	cmp	r3, #1
    78c4:	d11a      	bne.n	78fc <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    78c6:	9b01      	ldr	r3, [sp, #4]
    78c8:	685a      	ldr	r2, [r3, #4]
    78ca:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    78ce:	005b      	lsls	r3, r3, #1
    78d0:	4413      	add	r3, r2
    78d2:	881b      	ldrh	r3, [r3, #0]
    78d4:	f003 021f 	and.w	r2, r3, #31
    78d8:	9b01      	ldr	r3, [sp, #4]
    78da:	6859      	ldr	r1, [r3, #4]
    78dc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    78e0:	005b      	lsls	r3, r3, #1
    78e2:	440b      	add	r3, r1
    78e4:	881b      	ldrh	r3, [r3, #0]
    78e6:	095b      	lsrs	r3, r3, #5
    78e8:	b29b      	uxth	r3, r3
    78ea:	4619      	mov	r1, r3
    78ec:	4b81      	ldr	r3, [pc, #516]	; (7af4 <Port_Ipw_Init_UnusedPins+0x26c>)
    78ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    78f2:	2101      	movs	r1, #1
    78f4:	fa01 f202 	lsl.w	r2, r1, r2
    78f8:	605a      	str	r2, [r3, #4]
    78fa:	e01d      	b.n	7938 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    78fc:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7900:	2b00      	cmp	r3, #0
    7902:	d119      	bne.n	7938 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    7904:	9b01      	ldr	r3, [sp, #4]
    7906:	685a      	ldr	r2, [r3, #4]
    7908:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    790c:	005b      	lsls	r3, r3, #1
    790e:	4413      	add	r3, r2
    7910:	881b      	ldrh	r3, [r3, #0]
    7912:	f003 021f 	and.w	r2, r3, #31
    7916:	9b01      	ldr	r3, [sp, #4]
    7918:	6859      	ldr	r1, [r3, #4]
    791a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    791e:	005b      	lsls	r3, r3, #1
    7920:	440b      	add	r3, r1
    7922:	881b      	ldrh	r3, [r3, #0]
    7924:	095b      	lsrs	r3, r3, #5
    7926:	b29b      	uxth	r3, r3
    7928:	4619      	mov	r1, r3
    792a:	4b72      	ldr	r3, [pc, #456]	; (7af4 <Port_Ipw_Init_UnusedPins+0x26c>)
    792c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    7930:	2101      	movs	r1, #1
    7932:	fa01 f202 	lsl.w	r2, r1, r2
    7936:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    7938:	f00e fadc 	bl	15ef4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    793c:	9b01      	ldr	r3, [sp, #4]
    793e:	685a      	ldr	r2, [r3, #4]
    7940:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7944:	005b      	lsls	r3, r3, #1
    7946:	4413      	add	r3, r2
    7948:	881b      	ldrh	r3, [r3, #0]
    794a:	095b      	lsrs	r3, r3, #5
    794c:	b29b      	uxth	r3, r3
    794e:	461a      	mov	r2, r3
    7950:	4b68      	ldr	r3, [pc, #416]	; (7af4 <Port_Ipw_Init_UnusedPins+0x26c>)
    7952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7956:	6959      	ldr	r1, [r3, #20]
    7958:	9b01      	ldr	r3, [sp, #4]
    795a:	685a      	ldr	r2, [r3, #4]
    795c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7960:	005b      	lsls	r3, r3, #1
    7962:	4413      	add	r3, r2
    7964:	881b      	ldrh	r3, [r3, #0]
    7966:	f003 031f 	and.w	r3, r3, #31
    796a:	2201      	movs	r2, #1
    796c:	409a      	lsls	r2, r3
    796e:	9b01      	ldr	r3, [sp, #4]
    7970:	6858      	ldr	r0, [r3, #4]
    7972:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7976:	005b      	lsls	r3, r3, #1
    7978:	4403      	add	r3, r0
    797a:	881b      	ldrh	r3, [r3, #0]
    797c:	095b      	lsrs	r3, r3, #5
    797e:	b29b      	uxth	r3, r3
    7980:	4618      	mov	r0, r3
    7982:	4b5c      	ldr	r3, [pc, #368]	; (7af4 <Port_Ipw_Init_UnusedPins+0x26c>)
    7984:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7988:	430a      	orrs	r2, r1
    798a:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    798c:	f00e fade 	bl	15f4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    7990:	e086      	b.n	7aa0 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    7992:	f00e faaf 	bl	15ef4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    7996:	9b01      	ldr	r3, [sp, #4]
    7998:	685a      	ldr	r2, [r3, #4]
    799a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    799e:	005b      	lsls	r3, r3, #1
    79a0:	4413      	add	r3, r2
    79a2:	881b      	ldrh	r3, [r3, #0]
    79a4:	095b      	lsrs	r3, r3, #5
    79a6:	b29b      	uxth	r3, r3
    79a8:	461a      	mov	r2, r3
    79aa:	4b52      	ldr	r3, [pc, #328]	; (7af4 <Port_Ipw_Init_UnusedPins+0x26c>)
    79ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    79b0:	6959      	ldr	r1, [r3, #20]
    79b2:	9b01      	ldr	r3, [sp, #4]
    79b4:	685a      	ldr	r2, [r3, #4]
    79b6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    79ba:	005b      	lsls	r3, r3, #1
    79bc:	4413      	add	r3, r2
    79be:	881b      	ldrh	r3, [r3, #0]
    79c0:	f003 031f 	and.w	r3, r3, #31
    79c4:	2201      	movs	r2, #1
    79c6:	fa02 f303 	lsl.w	r3, r2, r3
    79ca:	43da      	mvns	r2, r3
    79cc:	9b01      	ldr	r3, [sp, #4]
    79ce:	6858      	ldr	r0, [r3, #4]
    79d0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    79d4:	005b      	lsls	r3, r3, #1
    79d6:	4403      	add	r3, r0
    79d8:	881b      	ldrh	r3, [r3, #0]
    79da:	095b      	lsrs	r3, r3, #5
    79dc:	b29b      	uxth	r3, r3
    79de:	4618      	mov	r0, r3
    79e0:	4b44      	ldr	r3, [pc, #272]	; (7af4 <Port_Ipw_Init_UnusedPins+0x26c>)
    79e2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    79e6:	400a      	ands	r2, r1
    79e8:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    79ea:	f00e faaf 	bl	15f4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    79ee:	f00e fad3 	bl	15f98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    79f2:	9b01      	ldr	r3, [sp, #4]
    79f4:	685a      	ldr	r2, [r3, #4]
    79f6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    79fa:	005b      	lsls	r3, r3, #1
    79fc:	4413      	add	r3, r2
    79fe:	881b      	ldrh	r3, [r3, #0]
    7a00:	095b      	lsrs	r3, r3, #5
    7a02:	b29b      	uxth	r3, r3
    7a04:	461a      	mov	r2, r3
    7a06:	4b3b      	ldr	r3, [pc, #236]	; (7af4 <Port_Ipw_Init_UnusedPins+0x26c>)
    7a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7a0c:	6999      	ldr	r1, [r3, #24]
    7a0e:	9b01      	ldr	r3, [sp, #4]
    7a10:	685a      	ldr	r2, [r3, #4]
    7a12:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7a16:	005b      	lsls	r3, r3, #1
    7a18:	4413      	add	r3, r2
    7a1a:	881b      	ldrh	r3, [r3, #0]
    7a1c:	f003 031f 	and.w	r3, r3, #31
    7a20:	2201      	movs	r2, #1
    7a22:	fa02 f303 	lsl.w	r3, r2, r3
    7a26:	43da      	mvns	r2, r3
    7a28:	9b01      	ldr	r3, [sp, #4]
    7a2a:	6858      	ldr	r0, [r3, #4]
    7a2c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7a30:	005b      	lsls	r3, r3, #1
    7a32:	4403      	add	r3, r0
    7a34:	881b      	ldrh	r3, [r3, #0]
    7a36:	095b      	lsrs	r3, r3, #5
    7a38:	b29b      	uxth	r3, r3
    7a3a:	4618      	mov	r0, r3
    7a3c:	4b2d      	ldr	r3, [pc, #180]	; (7af4 <Port_Ipw_Init_UnusedPins+0x26c>)
    7a3e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7a42:	400a      	ands	r2, r1
    7a44:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    7a46:	9b02      	ldr	r3, [sp, #8]
    7a48:	2b03      	cmp	r3, #3
    7a4a:	d127      	bne.n	7a9c <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    7a4c:	9b01      	ldr	r3, [sp, #4]
    7a4e:	685a      	ldr	r2, [r3, #4]
    7a50:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7a54:	005b      	lsls	r3, r3, #1
    7a56:	4413      	add	r3, r2
    7a58:	881b      	ldrh	r3, [r3, #0]
    7a5a:	095b      	lsrs	r3, r3, #5
    7a5c:	b29b      	uxth	r3, r3
    7a5e:	461a      	mov	r2, r3
    7a60:	4b24      	ldr	r3, [pc, #144]	; (7af4 <Port_Ipw_Init_UnusedPins+0x26c>)
    7a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7a66:	6999      	ldr	r1, [r3, #24]
    7a68:	9b01      	ldr	r3, [sp, #4]
    7a6a:	685a      	ldr	r2, [r3, #4]
    7a6c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7a70:	005b      	lsls	r3, r3, #1
    7a72:	4413      	add	r3, r2
    7a74:	881b      	ldrh	r3, [r3, #0]
    7a76:	f003 031f 	and.w	r3, r3, #31
    7a7a:	2201      	movs	r2, #1
    7a7c:	409a      	lsls	r2, r3
    7a7e:	9b01      	ldr	r3, [sp, #4]
    7a80:	6858      	ldr	r0, [r3, #4]
    7a82:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7a86:	005b      	lsls	r3, r3, #1
    7a88:	4403      	add	r3, r0
    7a8a:	881b      	ldrh	r3, [r3, #0]
    7a8c:	095b      	lsrs	r3, r3, #5
    7a8e:	b29b      	uxth	r3, r3
    7a90:	4618      	mov	r0, r3
    7a92:	4b18      	ldr	r3, [pc, #96]	; (7af4 <Port_Ipw_Init_UnusedPins+0x26c>)
    7a94:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7a98:	430a      	orrs	r2, r1
    7a9a:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    7a9c:	f00e faa8 	bl	15ff0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    7aa0:	9b01      	ldr	r3, [sp, #4]
    7aa2:	685a      	ldr	r2, [r3, #4]
    7aa4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7aa8:	005b      	lsls	r3, r3, #1
    7aaa:	4413      	add	r3, r2
    7aac:	881b      	ldrh	r3, [r3, #0]
    7aae:	095b      	lsrs	r3, r3, #5
    7ab0:	b29b      	uxth	r3, r3
    7ab2:	461a      	mov	r2, r3
    7ab4:	4b10      	ldr	r3, [pc, #64]	; (7af8 <Port_Ipw_Init_UnusedPins+0x270>)
    7ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7aba:	9a01      	ldr	r2, [sp, #4]
    7abc:	6851      	ldr	r1, [r2, #4]
    7abe:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    7ac2:	0052      	lsls	r2, r2, #1
    7ac4:	440a      	add	r2, r1
    7ac6:	8812      	ldrh	r2, [r2, #0]
    7ac8:	f002 021f 	and.w	r2, r2, #31
    7acc:	9903      	ldr	r1, [sp, #12]
    7ace:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    7ad2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7ad6:	3301      	adds	r3, #1
    7ad8:	f8ad 3016 	strh.w	r3, [sp, #22]
    7adc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    7ae0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7ae4:	429a      	cmp	r2, r3
    7ae6:	f4ff aee7 	bcc.w	78b8 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    7aea:	bf00      	nop
    7aec:	bf00      	nop
    7aee:	b007      	add	sp, #28
    7af0:	f85d fb04 	ldr.w	pc, [sp], #4
    7af4:	000197dc 	.word	0x000197dc
    7af8:	000197c8 	.word	0x000197c8

00007afc <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    7afc:	b500      	push	{lr}
    7afe:	b085      	sub	sp, #20
    7b00:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    7b02:	9b01      	ldr	r3, [sp, #4]
    7b04:	7c1b      	ldrb	r3, [r3, #16]
    7b06:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    7b0a:	2300      	movs	r3, #0
    7b0c:	f8ad 300e 	strh.w	r3, [sp, #14]
    7b10:	e035      	b.n	7b7e <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    7b12:	9b01      	ldr	r3, [sp, #4]
    7b14:	695a      	ldr	r2, [r3, #20]
    7b16:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7b1a:	00db      	lsls	r3, r3, #3
    7b1c:	4413      	add	r3, r2
    7b1e:	781b      	ldrb	r3, [r3, #0]
    7b20:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    7b24:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7b28:	4a29      	ldr	r2, [pc, #164]	; (7bd0 <Port_Ipw_Init+0xd4>)
    7b2a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    7b2e:	9b01      	ldr	r3, [sp, #4]
    7b30:	695a      	ldr	r2, [r3, #20]
    7b32:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7b36:	00db      	lsls	r3, r3, #3
    7b38:	4413      	add	r3, r2
    7b3a:	4619      	mov	r1, r3
    7b3c:	f7ff fe39 	bl	77b2 <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    7b40:	f00e fbc4 	bl	162cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    7b44:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7b48:	4a21      	ldr	r2, [pc, #132]	; (7bd0 <Port_Ipw_Init+0xd4>)
    7b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b4e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    7b52:	9b01      	ldr	r3, [sp, #4]
    7b54:	695a      	ldr	r2, [r3, #20]
    7b56:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7b5a:	00db      	lsls	r3, r3, #3
    7b5c:	4413      	add	r3, r2
    7b5e:	685a      	ldr	r2, [r3, #4]
    7b60:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7b64:	481a      	ldr	r0, [pc, #104]	; (7bd0 <Port_Ipw_Init+0xd4>)
    7b66:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    7b6a:	430a      	orrs	r2, r1
    7b6c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    7b70:	f00e fbd8 	bl	16324 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    7b74:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7b78:	3301      	adds	r3, #1
    7b7a:	f8ad 300e 	strh.w	r3, [sp, #14]
    7b7e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7b82:	b29b      	uxth	r3, r3
    7b84:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7b88:	429a      	cmp	r2, r3
    7b8a:	d3c2      	bcc.n	7b12 <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    7b8c:	9b01      	ldr	r3, [sp, #4]
    7b8e:	6a1b      	ldr	r3, [r3, #32]
    7b90:	4619      	mov	r1, r3
    7b92:	200c      	movs	r0, #12
    7b94:	f7ff fd98 	bl	76c8 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    7b98:	9801      	ldr	r0, [sp, #4]
    7b9a:	f7ff fe75 	bl	7888 <Port_Ipw_Init_UnusedPins>
     (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
    )
    /* Port_Ipw_au16GpioDirChangeability is only used by Port_Ci_Port_Ip_SetPinDirection, Port_Ci_Port_Ip_Set2PinsDirection
       and Port_Ci_Port_Ip_SetPinMode functions */
    /* Initialize the Array with Change Direction Flags for GPIO */
    for (u16PinIndex = (uint16)0U; u16PinIndex < PAD_16BLOCK_NO_U8; u16PinIndex++)
    7b9e:	2300      	movs	r3, #0
    7ba0:	f8ad 300e 	strh.w	r3, [sp, #14]
    7ba4:	e00a      	b.n	7bbc <Port_Ipw_Init+0xc0>
    {
        Port_Ipw_au16GpioDirChangeability[u16PinIndex] = (uint16)0UL;
    7ba6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7baa:	4a0a      	ldr	r2, [pc, #40]	; (7bd4 <Port_Ipw_Init+0xd8>)
    7bac:	2100      	movs	r1, #0
    7bae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (u16PinIndex = (uint16)0U; u16PinIndex < PAD_16BLOCK_NO_U8; u16PinIndex++)
    7bb2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7bb6:	3301      	adds	r3, #1
    7bb8:	f8ad 300e 	strh.w	r3, [sp, #14]
    7bbc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7bc0:	2b09      	cmp	r3, #9
    7bc2:	d9f0      	bls.n	7ba6 <Port_Ipw_Init+0xaa>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    7bc4:	bf00      	nop
    7bc6:	bf00      	nop
    7bc8:	b005      	add	sp, #20
    7bca:	f85d fb04 	ldr.w	pc, [sp], #4
    7bce:	bf00      	nop
    7bd0:	000197c8 	.word	0x000197c8
    7bd4:	1fff8d2c 	.word	0x1fff8d2c

00007bd8 <Port_Ipw_SetPinDirection>:
(
    Port_PinType            PinIndex,
    Port_PinDirectionType   eDirection,
    const Port_ConfigType * pConfigPtr
)
{
    7bd8:	b500      	push	{lr}
    7bda:	b087      	sub	sp, #28
    7bdc:	9003      	str	r0, [sp, #12]
    7bde:	9102      	str	r1, [sp, #8]
    7be0:	9201      	str	r2, [sp, #4]
    /* Point to the Port Pin PCR register address */
    uint16 Pin = pConfigPtr->pUsedPadConfig[PinIndex].Pin;
    7be2:	9b01      	ldr	r3, [sp, #4]
    7be4:	68d9      	ldr	r1, [r3, #12]
    7be6:	9a03      	ldr	r2, [sp, #12]
    7be8:	4613      	mov	r3, r2
    7bea:	009b      	lsls	r3, r3, #2
    7bec:	4413      	add	r3, r2
    7bee:	009b      	lsls	r3, r3, #2
    7bf0:	440b      	add	r3, r1
    7bf2:	881b      	ldrh	r3, [r3, #0]
    7bf4:	f8ad 3014 	strh.w	r3, [sp, #20]
    /* Return value */
    Std_ReturnType PinDirError             = (Std_ReturnType)E_OK;
    7bf8:	2300      	movs	r3, #0
    7bfa:	f88d 3017 	strb.w	r3, [sp, #23]

#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;
    CoreId = (uint8)Port_GetCoreID();
    7bfe:	2300      	movs	r3, #0
    7c00:	f88d 3013 	strb.w	r3, [sp, #19]

    if ((PinIndex >= (Port_PinType)pConfigPtr->u16NumPins))
    7c04:	9b01      	ldr	r3, [sp, #4]
    7c06:	881b      	ldrh	r3, [r3, #0]
    7c08:	461a      	mov	r2, r3
    7c0a:	9b03      	ldr	r3, [sp, #12]
    7c0c:	4293      	cmp	r3, r2
    7c0e:	d306      	bcc.n	7c1e <Port_Ipw_SetPinDirection+0x46>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_PARAM_PIN);
    7c10:	230a      	movs	r3, #10
    7c12:	2201      	movs	r2, #1
    7c14:	2100      	movs	r1, #0
    7c16:	207c      	movs	r0, #124	; 0x7c
    7c18:	f010 fbfc 	bl	18414 <Det_ReportError>
    7c1c:	e0c9      	b.n	7db2 <Port_Ipw_SetPinDirection+0x1da>
    }
    /* Check port pin validity */
    else if ((uint32)1 != (((pConfigPtr->pau32Port_PinToPartitionMap[PinIndex]) & ((uint32)1 << CoreId)) >> CoreId))
    7c1e:	9b01      	ldr	r3, [sp, #4]
    7c20:	699a      	ldr	r2, [r3, #24]
    7c22:	9b03      	ldr	r3, [sp, #12]
    7c24:	009b      	lsls	r3, r3, #2
    7c26:	4413      	add	r3, r2
    7c28:	681a      	ldr	r2, [r3, #0]
    7c2a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7c2e:	2101      	movs	r1, #1
    7c30:	fa01 f303 	lsl.w	r3, r1, r3
    7c34:	401a      	ands	r2, r3
    7c36:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7c3a:	fa22 f303 	lsr.w	r3, r2, r3
    7c3e:	2b01      	cmp	r3, #1
    7c40:	d006      	beq.n	7c50 <Port_Ipw_SetPinDirection+0x78>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    7c42:	23f0      	movs	r3, #240	; 0xf0
    7c44:	2201      	movs	r2, #1
    7c46:	2100      	movs	r1, #0
    7c48:	207c      	movs	r0, #124	; 0x7c
    7c4a:	f010 fbe3 	bl	18414 <Det_ReportError>
    7c4e:	e0b0      	b.n	7db2 <Port_Ipw_SetPinDirection+0x1da>
    }
    else
    {
        /* Bit Offset and Table value for change direction flag word */
        uint8 u8PinDescBitOffset       = (uint8)(Pin & PORT_CI_BIT_OFFSET_MASK_U8);
    7c50:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7c54:	b2db      	uxtb	r3, r3
    7c56:	f003 030f 	and.w	r3, r3, #15
    7c5a:	f88d 3012 	strb.w	r3, [sp, #18]
        /* Number of block 16 */
        uint16 u16PinChangeDirFlagWord  = Port_Ipw_au16GpioDirChangeability[(uint8)(Pin >> 4)];
    7c5e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7c62:	091b      	lsrs	r3, r3, #4
    7c64:	b29b      	uxth	r3, r3
    7c66:	b2db      	uxtb	r3, r3
    7c68:	461a      	mov	r2, r3
    7c6a:	4b55      	ldr	r3, [pc, #340]	; (7dc0 <Port_Ipw_SetPinDirection+0x1e8>)
    7c6c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    7c70:	f8ad 3010 	strh.w	r3, [sp, #16]

        /* Check the Direction changeability option */
        if ((TRUE == pConfigPtr->pUsedPadConfig[PinIndex].bDC) || ((uint16)0 != (u16PinChangeDirFlagWord & (uint16)(1UL << u8PinDescBitOffset))))
    7c74:	9b01      	ldr	r3, [sp, #4]
    7c76:	68d9      	ldr	r1, [r3, #12]
    7c78:	9a03      	ldr	r2, [sp, #12]
    7c7a:	4613      	mov	r3, r2
    7c7c:	009b      	lsls	r3, r3, #2
    7c7e:	4413      	add	r3, r2
    7c80:	009b      	lsls	r3, r3, #2
    7c82:	440b      	add	r3, r1
    7c84:	7c5b      	ldrb	r3, [r3, #17]
    7c86:	2b00      	cmp	r3, #0
    7c88:	d10c      	bne.n	7ca4 <Port_Ipw_SetPinDirection+0xcc>
    7c8a:	f89d 3012 	ldrb.w	r3, [sp, #18]
    7c8e:	2201      	movs	r2, #1
    7c90:	fa02 f303 	lsl.w	r3, r2, r3
    7c94:	b29a      	uxth	r2, r3
    7c96:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    7c9a:	4013      	ands	r3, r2
    7c9c:	b29b      	uxth	r3, r3
    7c9e:	2b00      	cmp	r3, #0
    7ca0:	f000 8082 	beq.w	7da8 <Port_Ipw_SetPinDirection+0x1d0>
        {
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
            /* Configures Port Pin as Output */
            if (PORT_PIN_OUT == eDirection)
    7ca4:	9b02      	ldr	r3, [sp, #8]
    7ca6:	2b02      	cmp	r3, #2
    7ca8:	d11d      	bne.n	7ce6 <Port_Ipw_SetPinDirection+0x10e>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16();
    7caa:	f00e fb61 	bl	16370 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PDDR |= (uint32)(1UL << GPIO_CHANNEL_U32(Pin));
    7cae:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7cb2:	095b      	lsrs	r3, r3, #5
    7cb4:	b29b      	uxth	r3, r3
    7cb6:	461a      	mov	r2, r3
    7cb8:	4b42      	ldr	r3, [pc, #264]	; (7dc4 <Port_Ipw_SetPinDirection+0x1ec>)
    7cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7cbe:	6959      	ldr	r1, [r3, #20]
    7cc0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7cc4:	f003 031f 	and.w	r3, r3, #31
    7cc8:	2201      	movs	r2, #1
    7cca:	409a      	lsls	r2, r3
    7ccc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7cd0:	095b      	lsrs	r3, r3, #5
    7cd2:	b29b      	uxth	r3, r3
    7cd4:	4618      	mov	r0, r3
    7cd6:	4b3b      	ldr	r3, [pc, #236]	; (7dc4 <Port_Ipw_SetPinDirection+0x1ec>)
    7cd8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7cdc:	430a      	orrs	r2, r1
    7cde:	615a      	str	r2, [r3, #20]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16();
    7ce0:	f00e fb72 	bl	163c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>
            if (PORT_PIN_OUT == eDirection)
    7ce4:	e064      	b.n	7db0 <Port_Ipw_SetPinDirection+0x1d8>
            }
            /* Configures Port Pin as Input or High-Z*/
            else if ((PORT_PIN_IN == eDirection) || (PORT_PIN_HIGH_Z == eDirection))
    7ce6:	9b02      	ldr	r3, [sp, #8]
    7ce8:	2b01      	cmp	r3, #1
    7cea:	d002      	beq.n	7cf2 <Port_Ipw_SetPinDirection+0x11a>
    7cec:	9b02      	ldr	r3, [sp, #8]
    7cee:	2b03      	cmp	r3, #3
    7cf0:	d15e      	bne.n	7db0 <Port_Ipw_SetPinDirection+0x1d8>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16();
    7cf2:	f00e fb3d 	bl	16370 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PDDR &= ~((uint32)(1UL << GPIO_CHANNEL_U32(Pin)));
    7cf6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7cfa:	095b      	lsrs	r3, r3, #5
    7cfc:	b29b      	uxth	r3, r3
    7cfe:	461a      	mov	r2, r3
    7d00:	4b30      	ldr	r3, [pc, #192]	; (7dc4 <Port_Ipw_SetPinDirection+0x1ec>)
    7d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7d06:	6959      	ldr	r1, [r3, #20]
    7d08:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7d0c:	f003 031f 	and.w	r3, r3, #31
    7d10:	2201      	movs	r2, #1
    7d12:	fa02 f303 	lsl.w	r3, r2, r3
    7d16:	43da      	mvns	r2, r3
    7d18:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7d1c:	095b      	lsrs	r3, r3, #5
    7d1e:	b29b      	uxth	r3, r3
    7d20:	4618      	mov	r0, r3
    7d22:	4b28      	ldr	r3, [pc, #160]	; (7dc4 <Port_Ipw_SetPinDirection+0x1ec>)
    7d24:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7d28:	400a      	ands	r2, r1
    7d2a:	615a      	str	r2, [r3, #20]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16();
    7d2c:	f00e fb4c 	bl	163c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17();
    7d30:	f00e fb70 	bl	16414 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PIDR &= ~((uint32)(1UL << GPIO_CHANNEL_U32(Pin)));
    7d34:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7d38:	095b      	lsrs	r3, r3, #5
    7d3a:	b29b      	uxth	r3, r3
    7d3c:	461a      	mov	r2, r3
    7d3e:	4b21      	ldr	r3, [pc, #132]	; (7dc4 <Port_Ipw_SetPinDirection+0x1ec>)
    7d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7d44:	6999      	ldr	r1, [r3, #24]
    7d46:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7d4a:	f003 031f 	and.w	r3, r3, #31
    7d4e:	2201      	movs	r2, #1
    7d50:	fa02 f303 	lsl.w	r3, r2, r3
    7d54:	43da      	mvns	r2, r3
    7d56:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7d5a:	095b      	lsrs	r3, r3, #5
    7d5c:	b29b      	uxth	r3, r3
    7d5e:	4618      	mov	r0, r3
    7d60:	4b18      	ldr	r3, [pc, #96]	; (7dc4 <Port_Ipw_SetPinDirection+0x1ec>)
    7d62:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7d66:	400a      	ands	r2, r1
    7d68:	619a      	str	r2, [r3, #24]

                /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                if (PORT_PIN_HIGH_Z == eDirection)
    7d6a:	9b02      	ldr	r3, [sp, #8]
    7d6c:	2b03      	cmp	r3, #3
    7d6e:	d118      	bne.n	7da2 <Port_Ipw_SetPinDirection+0x1ca>
                {
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PIDR |= ((uint32)(1UL << GPIO_CHANNEL_U32(Pin)));
    7d70:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7d74:	095b      	lsrs	r3, r3, #5
    7d76:	b29b      	uxth	r3, r3
    7d78:	461a      	mov	r2, r3
    7d7a:	4b12      	ldr	r3, [pc, #72]	; (7dc4 <Port_Ipw_SetPinDirection+0x1ec>)
    7d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7d80:	6999      	ldr	r1, [r3, #24]
    7d82:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7d86:	f003 031f 	and.w	r3, r3, #31
    7d8a:	2201      	movs	r2, #1
    7d8c:	409a      	lsls	r2, r3
    7d8e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7d92:	095b      	lsrs	r3, r3, #5
    7d94:	b29b      	uxth	r3, r3
    7d96:	4618      	mov	r0, r3
    7d98:	4b0a      	ldr	r3, [pc, #40]	; (7dc4 <Port_Ipw_SetPinDirection+0x1ec>)
    7d9a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7d9e:	430a      	orrs	r2, r1
    7da0:	619a      	str	r2, [r3, #24]
                }
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17();
    7da2:	f00e fb63 	bl	1646c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>
            if (PORT_PIN_OUT == eDirection)
    7da6:	e003      	b.n	7db0 <Port_Ipw_SetPinDirection+0x1d8>
#if (STD_ON == PORT_DEV_ERROR_DETECT)
        }
        /* Direction changeability is NOT supported */
        else
        {
            PinDirError = (Std_ReturnType)E_NOT_OK;
    7da8:	2301      	movs	r3, #1
    7daa:	f88d 3017 	strb.w	r3, [sp, #23]
    7dae:	e000      	b.n	7db2 <Port_Ipw_SetPinDirection+0x1da>
            if (PORT_PIN_OUT == eDirection)
    7db0:	bf00      	nop
        }
    }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

    return PinDirError;
    7db2:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    7db6:	4618      	mov	r0, r3
    7db8:	b007      	add	sp, #28
    7dba:	f85d fb04 	ldr.w	pc, [sp], #4
    7dbe:	bf00      	nop
    7dc0:	1fff8d2c 	.word	0x1fff8d2c
    7dc4:	000197dc 	.word	0x000197dc

00007dc8 <Port_Ipw_SetPinMode>:
(
    Port_PinType PinIndex,
    Port_PinModeType PinMode,
    const Port_ConfigType * pConfigPtr
)
{
    7dc8:	b500      	push	{lr}
    7dca:	b08b      	sub	sp, #44	; 0x2c
    7dcc:	9003      	str	r0, [sp, #12]
    7dce:	460b      	mov	r3, r1
    7dd0:	9201      	str	r2, [sp, #4]
    7dd2:	f88d 300b 	strb.w	r3, [sp, #11]
    Std_ReturnType PinModeError             = (Std_ReturnType)0UL;
    7dd6:	2300      	movs	r3, #0
    7dd8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint16 PinPad                           = pConfigPtr->pUsedPadConfig[PinIndex].Pin;
    7ddc:	9b01      	ldr	r3, [sp, #4]
    7dde:	68d9      	ldr	r1, [r3, #12]
    7de0:	9a03      	ldr	r2, [sp, #12]
    7de2:	4613      	mov	r3, r2
    7de4:	009b      	lsls	r3, r3, #2
    7de6:	4413      	add	r3, r2
    7de8:	009b      	lsls	r3, r3, #2
    7dea:	440b      	add	r3, r1
    7dec:	881b      	ldrh	r3, [r3, #0]
    7dee:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    Port_PinModeType PinCfgRegValue         = (Port_PinModeType)PinMode;
    7df2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7df6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint16 u16PinDescBitOffset;
    /* Variable used to clear and updated PCR register */
    uint32 u32LocalPCR;
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;
    CoreId = (uint8)Port_GetCoreID();
    7dfa:	2300      	movs	r3, #0
    7dfc:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22

    if ((PinIndex >= (Port_PinType)pConfigPtr->u16NumPins))
    7e00:	9b01      	ldr	r3, [sp, #4]
    7e02:	881b      	ldrh	r3, [r3, #0]
    7e04:	461a      	mov	r2, r3
    7e06:	9b03      	ldr	r3, [sp, #12]
    7e08:	4293      	cmp	r3, r2
    7e0a:	d306      	bcc.n	7e1a <Port_Ipw_SetPinMode+0x52>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_PIN);
    7e0c:	230a      	movs	r3, #10
    7e0e:	2204      	movs	r2, #4
    7e10:	2100      	movs	r1, #0
    7e12:	207c      	movs	r0, #124	; 0x7c
    7e14:	f010 fafe 	bl	18414 <Det_ReportError>
    7e18:	e0b3      	b.n	7f82 <Port_Ipw_SetPinMode+0x1ba>
    }
    /* Check if this function was called with wrong core */
    else if ((uint32)1 != (((pConfigPtr->pau32Port_PinToPartitionMap[PinIndex]) & ((uint32)1 << CoreId)) >> CoreId))
    7e1a:	9b01      	ldr	r3, [sp, #4]
    7e1c:	699a      	ldr	r2, [r3, #24]
    7e1e:	9b03      	ldr	r3, [sp, #12]
    7e20:	009b      	lsls	r3, r3, #2
    7e22:	4413      	add	r3, r2
    7e24:	681a      	ldr	r2, [r3, #0]
    7e26:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    7e2a:	2101      	movs	r1, #1
    7e2c:	fa01 f303 	lsl.w	r3, r1, r3
    7e30:	401a      	ands	r2, r3
    7e32:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    7e36:	fa22 f303 	lsr.w	r3, r2, r3
    7e3a:	2b01      	cmp	r3, #1
    7e3c:	d006      	beq.n	7e4c <Port_Ipw_SetPinMode+0x84>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_CONFIG);
    7e3e:	23f0      	movs	r3, #240	; 0xf0
    7e40:	2204      	movs	r2, #4
    7e42:	2100      	movs	r1, #0
    7e44:	207c      	movs	r0, #124	; 0x7c
    7e46:	f010 fae5 	bl	18414 <Det_ReportError>
    7e4a:	e09a      	b.n	7f82 <Port_Ipw_SetPinMode+0x1ba>
    }
    /* Check port pin mode Unchangeable */
    else if (FALSE ==  pConfigPtr->pUsedPadConfig[PinIndex].bMC)
    7e4c:	9b01      	ldr	r3, [sp, #4]
    7e4e:	68d9      	ldr	r1, [r3, #12]
    7e50:	9a03      	ldr	r2, [sp, #12]
    7e52:	4613      	mov	r3, r2
    7e54:	009b      	lsls	r3, r3, #2
    7e56:	4413      	add	r3, r2
    7e58:	009b      	lsls	r3, r3, #2
    7e5a:	440b      	add	r3, r1
    7e5c:	7c9b      	ldrb	r3, [r3, #18]
    7e5e:	f083 0301 	eor.w	r3, r3, #1
    7e62:	b2db      	uxtb	r3, r3
    7e64:	2b00      	cmp	r3, #0
    7e66:	d006      	beq.n	7e76 <Port_Ipw_SetPinMode+0xae>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_MODE_UNCHANGEABLE);
    7e68:	230e      	movs	r3, #14
    7e6a:	2204      	movs	r2, #4
    7e6c:	2100      	movs	r1, #0
    7e6e:	207c      	movs	r0, #124	; 0x7c
    7e70:	f010 fad0 	bl	18414 <Det_ReportError>
    7e74:	e085      	b.n	7f82 <Port_Ipw_SetPinMode+0x1ba>
    }
    else
    {
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

        if (PAD_MODE_OPTIONS_U8 <= PinMode)
    7e76:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7e7a:	2b07      	cmp	r3, #7
    7e7c:	d903      	bls.n	7e86 <Port_Ipw_SetPinMode+0xbe>
        {
            PinModeError = PORT_E_PARAM_INVALID_MODE;
    7e7e:	230d      	movs	r3, #13
    7e80:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    7e84:	e07d      	b.n	7f82 <Port_Ipw_SetPinMode+0x1ba>
        }
        else
        {
            Port_PinDirectionType ePadDirection = PORT_PIN_DISABLED;
    7e86:	2300      	movs	r3, #0
    7e88:	9307      	str	r3, [sp, #28]

            /* Bit offset of Pin index inside the pin description matrix */
            u16PinDescBitOffset = PinPad & PORT_MODE_BIT_OFFSET_MASK_U8;
    7e8a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7e8e:	f003 030f 	and.w	r3, r3, #15
    7e92:	f8ad 301a 	strh.w	r3, [sp, #26]
            /* Selected word inside the pin description matrix */
            u16PinDescWord = (uint16)Port_au16PinDescription[(uint8)PinMode][PinPad >> 4U];
    7e96:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7e9a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7e9e:	091b      	lsrs	r3, r3, #4
    7ea0:	b29b      	uxth	r3, r3
    7ea2:	4618      	mov	r0, r3
    7ea4:	493a      	ldr	r1, [pc, #232]	; (7f90 <Port_Ipw_SetPinMode+0x1c8>)
    7ea6:	4613      	mov	r3, r2
    7ea8:	009b      	lsls	r3, r3, #2
    7eaa:	4413      	add	r3, r2
    7eac:	005b      	lsls	r3, r3, #1
    7eae:	4403      	add	r3, r0
    7eb0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    7eb4:	f8ad 3018 	strh.w	r3, [sp, #24]

            /* Check if desired mode is valid for selected pin */
            if ((u16PinDescWord & ((uint16)1UL<<u16PinDescBitOffset)) != (uint16)0U)
    7eb8:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    7ebc:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    7ec0:	fa42 f303 	asr.w	r3, r2, r3
    7ec4:	f003 0301 	and.w	r3, r3, #1
    7ec8:	2b00      	cmp	r3, #0
    7eca:	d057      	beq.n	7f7c <Port_Ipw_SetPinMode+0x1b4>
            {
                switch(PinMode)
    7ecc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7ed0:	2b01      	cmp	r3, #1
    7ed2:	d11f      	bne.n	7f14 <Port_Ipw_SetPinMode+0x14c>
                {
                    case PORT_GPIO_MODE:
#if (STD_ON == PORT_DEV_ERROR_DETECT)
                        Port_Ipw_SetGpioDirChangeability(PinPad, TRUE);
    7ed4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7ed8:	2101      	movs	r1, #1
    7eda:	4618      	mov	r0, r3
    7edc:	f000 f85c 	bl	7f98 <Port_Ipw_SetGpioDirChangeability>
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
                        ePadDirection = pConfigPtr->pUsedPadConfig[PinIndex].ePadDir;
    7ee0:	9b01      	ldr	r3, [sp, #4]
    7ee2:	68d9      	ldr	r1, [r3, #12]
    7ee4:	9a03      	ldr	r2, [sp, #12]
    7ee6:	4613      	mov	r3, r2
    7ee8:	009b      	lsls	r3, r3, #2
    7eea:	4413      	add	r3, r2
    7eec:	009b      	lsls	r3, r3, #2
    7eee:	440b      	add	r3, r1
    7ef0:	68db      	ldr	r3, [r3, #12]
    7ef2:	9307      	str	r3, [sp, #28]
#if (STD_OFF == PORT_SETPINMODE_DOES_NOT_TOUCH_GPIO_LEVEL)
                        if ((PORT_PIN_IN != ePadDirection) && (PORT_PIN_HIGH_Z != ePadDirection))
    7ef4:	9b07      	ldr	r3, [sp, #28]
    7ef6:	2b01      	cmp	r3, #1
    7ef8:	d006      	beq.n	7f08 <Port_Ipw_SetPinMode+0x140>
    7efa:	9b07      	ldr	r3, [sp, #28]
    7efc:	2b03      	cmp	r3, #3
    7efe:	d003      	beq.n	7f08 <Port_Ipw_SetPinMode+0x140>
                        {
                            Port_Ipw_SetGpioPadOutput(PinIndex, pConfigPtr);
    7f00:	9901      	ldr	r1, [sp, #4]
    7f02:	9803      	ldr	r0, [sp, #12]
    7f04:	f000 f896 	bl	8034 <Port_Ipw_SetGpioPadOutput>
                        }
#endif /* (STD_OFF == PORT_SETPINMODE_DOES_NOT_TOUCH_GPIO_LEVEL) */
                        (void)Port_Ipw_SetPinDirection(PinIndex, ePadDirection, pConfigPtr);
    7f08:	9a01      	ldr	r2, [sp, #4]
    7f0a:	9907      	ldr	r1, [sp, #28]
    7f0c:	9803      	ldr	r0, [sp, #12]
    7f0e:	f7ff fe63 	bl	7bd8 <Port_Ipw_SetPinDirection>
                        break;
    7f12:	e006      	b.n	7f22 <Port_Ipw_SetPinMode+0x15a>

                    default:
#if (STD_ON == PORT_DEV_ERROR_DETECT)
                    /* All the ALT modes except GPIO*/
                        Port_Ipw_SetGpioDirChangeability(PinPad,FALSE);
    7f14:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7f18:	2100      	movs	r1, #0
    7f1a:	4618      	mov	r0, r3
    7f1c:	f000 f83c 	bl	7f98 <Port_Ipw_SetGpioDirChangeability>
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
                        break;
    7f20:	bf00      	nop
                }
                /* Sets the port pin mode */
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27();
    7f22:	f00e fdab 	bl	16a7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>
                u32LocalPCR  = (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(PinPad)])->PCR[GPIO_CHANNEL_U32(PinPad)];
    7f26:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7f2a:	095b      	lsrs	r3, r3, #5
    7f2c:	b29b      	uxth	r3, r3
    7f2e:	461a      	mov	r2, r3
    7f30:	4b18      	ldr	r3, [pc, #96]	; (7f94 <Port_Ipw_SetPinMode+0x1cc>)
    7f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7f36:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    7f3a:	f002 021f 	and.w	r2, r2, #31
    7f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7f42:	9305      	str	r3, [sp, #20]

                u32LocalPCR &= ~(PORT_CI_PCR_ALT_MODE_U32);
    7f44:	9b05      	ldr	r3, [sp, #20]
    7f46:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    7f4a:	9305      	str	r3, [sp, #20]
                u32LocalPCR |= ((uint32)PinCfgRegValue << PORT_CI_PCR_ALT_MODE_OFFSET_U32);
    7f4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    7f50:	021b      	lsls	r3, r3, #8
    7f52:	9a05      	ldr	r2, [sp, #20]
    7f54:	4313      	orrs	r3, r2
    7f56:	9305      	str	r3, [sp, #20]

                (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(PinPad)])->PCR[GPIO_CHANNEL_U32(PinPad)] = u32LocalPCR;
    7f58:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7f5c:	095b      	lsrs	r3, r3, #5
    7f5e:	b29b      	uxth	r3, r3
    7f60:	461a      	mov	r2, r3
    7f62:	4b0c      	ldr	r3, [pc, #48]	; (7f94 <Port_Ipw_SetPinMode+0x1cc>)
    7f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7f68:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    7f6c:	f002 021f 	and.w	r2, r2, #31
    7f70:	9905      	ldr	r1, [sp, #20]
    7f72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27();
    7f76:	f00e fdad 	bl	16ad4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>
    7f7a:	e002      	b.n	7f82 <Port_Ipw_SetPinMode+0x1ba>
            }
            else
            {
                PinModeError = PORT_E_PARAM_INVALID_MODE;
    7f7c:	230d      	movs	r3, #13
    7f7e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

    return PinModeError;
    7f82:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
    7f86:	4618      	mov	r0, r3
    7f88:	b00b      	add	sp, #44	; 0x2c
    7f8a:	f85d fb04 	ldr.w	pc, [sp], #4
    7f8e:	bf00      	nop
    7f90:	0001a670 	.word	0x0001a670
    7f94:	000197c8 	.word	0x000197c8

00007f98 <Port_Ipw_SetGpioDirChangeability>:
void Port_Ipw_SetGpioDirChangeability
(
    uint16 PadID,
    boolean bStatus
)
{
    7f98:	b500      	push	{lr}
    7f9a:	b085      	sub	sp, #20
    7f9c:	4603      	mov	r3, r0
    7f9e:	460a      	mov	r2, r1
    7fa0:	f8ad 3006 	strh.w	r3, [sp, #6]
    7fa4:	4613      	mov	r3, r2
    7fa6:	f88d 3005 	strb.w	r3, [sp, #5]
    /* Pin description variables */
    uint8 u8PinBitOffset;
    uint16 u16PinDirFlagWord;

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18();
    7faa:	f00e fa85 	bl	164b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>
    /* Bit offset of Pin index inside the pin description matrix */
    u8PinBitOffset      = (uint8)((uint8)PadID & PORT_CI_BIT_OFFSET_MASK_U8);
    7fae:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7fb2:	b2db      	uxtb	r3, r3
    7fb4:	f003 030f 	and.w	r3, r3, #15
    7fb8:	f88d 300d 	strb.w	r3, [sp, #13]
    u16PinDirFlagWord   = Port_Ipw_au16GpioDirChangeability[(uint8)((uint8)PadID >> 4)];
    7fbc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7fc0:	b2db      	uxtb	r3, r3
    7fc2:	091b      	lsrs	r3, r3, #4
    7fc4:	b2db      	uxtb	r3, r3
    7fc6:	461a      	mov	r2, r3
    7fc8:	4b19      	ldr	r3, [pc, #100]	; (8030 <Port_Ipw_SetGpioDirChangeability+0x98>)
    7fca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    7fce:	f8ad 300e 	strh.w	r3, [sp, #14]

    if (TRUE == bStatus)
    7fd2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7fd6:	2b00      	cmp	r3, #0
    7fd8:	d00b      	beq.n	7ff2 <Port_Ipw_SetGpioDirChangeability+0x5a>
    {
        /* Set the change direction flag */
        u16PinDirFlagWord |= (uint16)(1UL<<u8PinBitOffset);
    7fda:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7fde:	2201      	movs	r2, #1
    7fe0:	fa02 f303 	lsl.w	r3, r2, r3
    7fe4:	b29a      	uxth	r2, r3
    7fe6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7fea:	4313      	orrs	r3, r2
    7fec:	f8ad 300e 	strh.w	r3, [sp, #14]
    7ff0:	e00c      	b.n	800c <Port_Ipw_SetGpioDirChangeability+0x74>
    }
    else
    {
        /* Reset the change direction flag */
        u16PinDirFlagWord &= (uint16)(~((uint16)(1UL<<u8PinBitOffset)));
    7ff2:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7ff6:	2201      	movs	r2, #1
    7ff8:	fa02 f303 	lsl.w	r3, r2, r3
    7ffc:	b29b      	uxth	r3, r3
    7ffe:	43db      	mvns	r3, r3
    8000:	b29a      	uxth	r2, r3
    8002:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8006:	4013      	ands	r3, r2
    8008:	f8ad 300e 	strh.w	r3, [sp, #14]
    }
    Port_Ipw_au16GpioDirChangeability[(uint8)((uint8)PadID >> 4)] = u16PinDirFlagWord;
    800c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8010:	b2db      	uxtb	r3, r3
    8012:	091b      	lsrs	r3, r3, #4
    8014:	b2db      	uxtb	r3, r3
    8016:	4619      	mov	r1, r3
    8018:	4a05      	ldr	r2, [pc, #20]	; (8030 <Port_Ipw_SetGpioDirChangeability+0x98>)
    801a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    801e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    /* Exit critical region */
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18();
    8022:	f00e fa75 	bl	16510 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>
}
    8026:	bf00      	nop
    8028:	b005      	add	sp, #20
    802a:	f85d fb04 	ldr.w	pc, [sp], #4
    802e:	bf00      	nop
    8030:	1fff8d2c 	.word	0x1fff8d2c

00008034 <Port_Ipw_SetGpioPadOutput>:
void Port_Ipw_SetGpioPadOutput
(
    Port_PinType            PinIndex,
    const Port_ConfigType * pConfigPtr
)
{
    8034:	b084      	sub	sp, #16
    8036:	9001      	str	r0, [sp, #4]
    8038:	9100      	str	r1, [sp, #0]
    uint16 Pin = pConfigPtr->pUsedPadConfig[PinIndex].Pin;
    803a:	9b00      	ldr	r3, [sp, #0]
    803c:	68d9      	ldr	r1, [r3, #12]
    803e:	9a01      	ldr	r2, [sp, #4]
    8040:	4613      	mov	r3, r2
    8042:	009b      	lsls	r3, r3, #2
    8044:	4413      	add	r3, r2
    8046:	009b      	lsls	r3, r3, #2
    8048:	440b      	add	r3, r1
    804a:	881b      	ldrh	r3, [r3, #0]
    804c:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint8 u8LocalPDO = pConfigPtr->pUsedPadConfig[PinIndex].u8PDO;
    8050:	9b00      	ldr	r3, [sp, #0]
    8052:	68d9      	ldr	r1, [r3, #12]
    8054:	9a01      	ldr	r2, [sp, #4]
    8056:	4613      	mov	r3, r2
    8058:	009b      	lsls	r3, r3, #2
    805a:	4413      	add	r3, r2
    805c:	009b      	lsls	r3, r3, #2
    805e:	440b      	add	r3, r1
    8060:	7a1b      	ldrb	r3, [r3, #8]
    8062:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Set pin to High value */
    if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    8066:	f89d 300d 	ldrb.w	r3, [sp, #13]
    806a:	2b01      	cmp	r3, #1
    806c:	d110      	bne.n	8090 <Port_Ipw_SetGpioPadOutput+0x5c>
    {
        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(Pin));
    806e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8072:	f003 021f 	and.w	r2, r3, #31
    8076:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    807a:	095b      	lsrs	r3, r3, #5
    807c:	b29b      	uxth	r3, r3
    807e:	4619      	mov	r1, r3
    8080:	4b0f      	ldr	r3, [pc, #60]	; (80c0 <Port_Ipw_SetGpioPadOutput+0x8c>)
    8082:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    8086:	2101      	movs	r1, #1
    8088:	fa01 f202 	lsl.w	r2, r1, r2
    808c:	605a      	str	r2, [r3, #4]
    }
    else
    {
        /* No action to be done */
    }
}
    808e:	e013      	b.n	80b8 <Port_Ipw_SetGpioPadOutput+0x84>
    else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    8090:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8094:	2b00      	cmp	r3, #0
    8096:	d10f      	bne.n	80b8 <Port_Ipw_SetGpioPadOutput+0x84>
        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(Pin));
    8098:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    809c:	f003 021f 	and.w	r2, r3, #31
    80a0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    80a4:	095b      	lsrs	r3, r3, #5
    80a6:	b29b      	uxth	r3, r3
    80a8:	4619      	mov	r1, r3
    80aa:	4b05      	ldr	r3, [pc, #20]	; (80c0 <Port_Ipw_SetGpioPadOutput+0x8c>)
    80ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    80b0:	2101      	movs	r1, #1
    80b2:	fa01 f202 	lsl.w	r2, r1, r2
    80b6:	609a      	str	r2, [r3, #8]
}
    80b8:	bf00      	nop
    80ba:	b004      	add	sp, #16
    80bc:	4770      	bx	lr
    80be:	bf00      	nop
    80c0:	000197dc 	.word	0x000197dc

000080c4 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    80c4:	b500      	push	{lr}
    80c6:	b085      	sub	sp, #20
    80c8:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    80ca:	9b01      	ldr	r3, [sp, #4]
    80cc:	881b      	ldrh	r3, [r3, #0]
    80ce:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    80d2:	2300      	movs	r3, #0
    80d4:	f8ad 300e 	strh.w	r3, [sp, #14]
    80d8:	e0d2      	b.n	8280 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    80da:	9b01      	ldr	r3, [sp, #4]
    80dc:	68d9      	ldr	r1, [r3, #12]
    80de:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    80e2:	4613      	mov	r3, r2
    80e4:	009b      	lsls	r3, r3, #2
    80e6:	4413      	add	r3, r2
    80e8:	009b      	lsls	r3, r3, #2
    80ea:	440b      	add	r3, r1
    80ec:	7c5b      	ldrb	r3, [r3, #17]
    80ee:	f083 0301 	eor.w	r3, r3, #1
    80f2:	b2db      	uxtb	r3, r3
    80f4:	2b00      	cmp	r3, #0
    80f6:	f000 80be 	beq.w	8276 <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    80fa:	9b01      	ldr	r3, [sp, #4]
    80fc:	68d9      	ldr	r1, [r3, #12]
    80fe:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    8102:	4613      	mov	r3, r2
    8104:	009b      	lsls	r3, r3, #2
    8106:	4413      	add	r3, r2
    8108:	009b      	lsls	r3, r3, #2
    810a:	440b      	add	r3, r1
    810c:	7c1b      	ldrb	r3, [r3, #16]
    810e:	2b00      	cmp	r3, #0
    8110:	f000 80b1 	beq.w	8276 <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    8114:	9b01      	ldr	r3, [sp, #4]
    8116:	68d9      	ldr	r1, [r3, #12]
    8118:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    811c:	4613      	mov	r3, r2
    811e:	009b      	lsls	r3, r3, #2
    8120:	4413      	add	r3, r2
    8122:	009b      	lsls	r3, r3, #2
    8124:	440b      	add	r3, r1
    8126:	881b      	ldrh	r3, [r3, #0]
    8128:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    812c:	9b01      	ldr	r3, [sp, #4]
    812e:	68d9      	ldr	r1, [r3, #12]
    8130:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    8134:	4613      	mov	r3, r2
    8136:	009b      	lsls	r3, r3, #2
    8138:	4413      	add	r3, r2
    813a:	009b      	lsls	r3, r3, #2
    813c:	440b      	add	r3, r1
    813e:	68db      	ldr	r3, [r3, #12]
    8140:	2b02      	cmp	r3, #2
    8142:	d11d      	bne.n	8180 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    8144:	f00e fa0a 	bl	1655c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    8148:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    814c:	095b      	lsrs	r3, r3, #5
    814e:	b29b      	uxth	r3, r3
    8150:	461a      	mov	r2, r3
    8152:	4b51      	ldr	r3, [pc, #324]	; (8298 <Port_Ipw_RefreshPortDirection+0x1d4>)
    8154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8158:	6959      	ldr	r1, [r3, #20]
    815a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    815e:	f003 031f 	and.w	r3, r3, #31
    8162:	2201      	movs	r2, #1
    8164:	409a      	lsls	r2, r3
    8166:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    816a:	095b      	lsrs	r3, r3, #5
    816c:	b29b      	uxth	r3, r3
    816e:	4618      	mov	r0, r3
    8170:	4b49      	ldr	r3, [pc, #292]	; (8298 <Port_Ipw_RefreshPortDirection+0x1d4>)
    8172:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    8176:	430a      	orrs	r2, r1
    8178:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    817a:	f00e fa1b 	bl	165b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    817e:	e07a      	b.n	8276 <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    8180:	9b01      	ldr	r3, [sp, #4]
    8182:	68d9      	ldr	r1, [r3, #12]
    8184:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    8188:	4613      	mov	r3, r2
    818a:	009b      	lsls	r3, r3, #2
    818c:	4413      	add	r3, r2
    818e:	009b      	lsls	r3, r3, #2
    8190:	440b      	add	r3, r1
    8192:	68db      	ldr	r3, [r3, #12]
    8194:	2b01      	cmp	r3, #1
    8196:	d00b      	beq.n	81b0 <Port_Ipw_RefreshPortDirection+0xec>
    8198:	9b01      	ldr	r3, [sp, #4]
    819a:	68d9      	ldr	r1, [r3, #12]
    819c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    81a0:	4613      	mov	r3, r2
    81a2:	009b      	lsls	r3, r3, #2
    81a4:	4413      	add	r3, r2
    81a6:	009b      	lsls	r3, r3, #2
    81a8:	440b      	add	r3, r1
    81aa:	68db      	ldr	r3, [r3, #12]
    81ac:	2b03      	cmp	r3, #3
    81ae:	d162      	bne.n	8276 <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    81b0:	f00e f9d4 	bl	1655c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    81b4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    81b8:	095b      	lsrs	r3, r3, #5
    81ba:	b29b      	uxth	r3, r3
    81bc:	461a      	mov	r2, r3
    81be:	4b36      	ldr	r3, [pc, #216]	; (8298 <Port_Ipw_RefreshPortDirection+0x1d4>)
    81c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    81c4:	6959      	ldr	r1, [r3, #20]
    81c6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    81ca:	f003 031f 	and.w	r3, r3, #31
    81ce:	2201      	movs	r2, #1
    81d0:	fa02 f303 	lsl.w	r3, r2, r3
    81d4:	43da      	mvns	r2, r3
    81d6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    81da:	095b      	lsrs	r3, r3, #5
    81dc:	b29b      	uxth	r3, r3
    81de:	4618      	mov	r0, r3
    81e0:	4b2d      	ldr	r3, [pc, #180]	; (8298 <Port_Ipw_RefreshPortDirection+0x1d4>)
    81e2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    81e6:	400a      	ands	r2, r1
    81e8:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    81ea:	f00e f9e3 	bl	165b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    81ee:	f00e fa07 	bl	16600 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    81f2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    81f6:	095b      	lsrs	r3, r3, #5
    81f8:	b29b      	uxth	r3, r3
    81fa:	461a      	mov	r2, r3
    81fc:	4b26      	ldr	r3, [pc, #152]	; (8298 <Port_Ipw_RefreshPortDirection+0x1d4>)
    81fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8202:	6999      	ldr	r1, [r3, #24]
    8204:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8208:	f003 031f 	and.w	r3, r3, #31
    820c:	2201      	movs	r2, #1
    820e:	fa02 f303 	lsl.w	r3, r2, r3
    8212:	43da      	mvns	r2, r3
    8214:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8218:	095b      	lsrs	r3, r3, #5
    821a:	b29b      	uxth	r3, r3
    821c:	4618      	mov	r0, r3
    821e:	4b1e      	ldr	r3, [pc, #120]	; (8298 <Port_Ipw_RefreshPortDirection+0x1d4>)
    8220:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    8224:	400a      	ands	r2, r1
    8226:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    8228:	9b01      	ldr	r3, [sp, #4]
    822a:	68d9      	ldr	r1, [r3, #12]
    822c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    8230:	4613      	mov	r3, r2
    8232:	009b      	lsls	r3, r3, #2
    8234:	4413      	add	r3, r2
    8236:	009b      	lsls	r3, r3, #2
    8238:	440b      	add	r3, r1
    823a:	68db      	ldr	r3, [r3, #12]
    823c:	2b03      	cmp	r3, #3
    823e:	d118      	bne.n	8272 <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    8240:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8244:	095b      	lsrs	r3, r3, #5
    8246:	b29b      	uxth	r3, r3
    8248:	461a      	mov	r2, r3
    824a:	4b13      	ldr	r3, [pc, #76]	; (8298 <Port_Ipw_RefreshPortDirection+0x1d4>)
    824c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8250:	6999      	ldr	r1, [r3, #24]
    8252:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8256:	f003 031f 	and.w	r3, r3, #31
    825a:	2201      	movs	r2, #1
    825c:	409a      	lsls	r2, r3
    825e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8262:	095b      	lsrs	r3, r3, #5
    8264:	b29b      	uxth	r3, r3
    8266:	4618      	mov	r0, r3
    8268:	4b0b      	ldr	r3, [pc, #44]	; (8298 <Port_Ipw_RefreshPortDirection+0x1d4>)
    826a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    826e:	430a      	orrs	r2, r1
    8270:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    8272:	f00e f9f1 	bl	16658 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    8276:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    827a:	3301      	adds	r3, #1
    827c:	f8ad 300e 	strh.w	r3, [sp, #14]
    8280:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    8284:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8288:	429a      	cmp	r2, r3
    828a:	f4ff af26 	bcc.w	80da <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    828e:	bf00      	nop
    8290:	bf00      	nop
    8292:	b005      	add	sp, #20
    8294:	f85d fb04 	ldr.w	pc, [sp], #4
    8298:	000197dc 	.word	0x000197dc

0000829c <Dio_ValidateChannelLevel>:
 */
static inline Std_ReturnType Dio_ValidateChannelLevel
(
    Dio_LevelType Level
)
{
    829c:	b500      	push	{lr}
    829e:	b085      	sub	sp, #20
    82a0:	4603      	mov	r3, r0
    82a2:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType Valid = (Std_ReturnType)E_NOT_OK;
    82a6:	2301      	movs	r3, #1
    82a8:	f88d 300f 	strb.w	r3, [sp, #15]

    if (((Dio_LevelType)STD_HIGH == Level) || ((Dio_LevelType)STD_LOW == Level))
    82ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    82b0:	2b01      	cmp	r3, #1
    82b2:	d003      	beq.n	82bc <Dio_ValidateChannelLevel+0x20>
    82b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    82b8:	2b00      	cmp	r3, #0
    82ba:	d103      	bne.n	82c4 <Dio_ValidateChannelLevel+0x28>
    {
        Valid = (Std_ReturnType)E_OK;
    82bc:	2300      	movs	r3, #0
    82be:	f88d 300f 	strb.w	r3, [sp, #15]
    82c2:	e005      	b.n	82d0 <Dio_ValidateChannelLevel+0x34>
    }
    else
    {
        (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNEL_ID, DIO_E_PARAM_LEVEL);
    82c4:	2321      	movs	r3, #33	; 0x21
    82c6:	2201      	movs	r2, #1
    82c8:	2100      	movs	r1, #0
    82ca:	2078      	movs	r0, #120	; 0x78
    82cc:	f010 f8a2 	bl	18414 <Det_ReportError>
    }

    return Valid;
    82d0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    82d4:	4618      	mov	r0, r3
    82d6:	b005      	add	sp, #20
    82d8:	f85d fb04 	ldr.w	pc, [sp], #4

000082dc <Dio_ValidateChannelForWrite>:
static inline Std_ReturnType Dio_ValidateChannelForWrite
(
    Dio_ChannelType ChannelId,
    uint8 u8ServiceId
)
{
    82dc:	b500      	push	{lr}
    82de:	b085      	sub	sp, #20
    82e0:	4603      	mov	r3, r0
    82e2:	460a      	mov	r2, r1
    82e4:	f8ad 3006 	strh.w	r3, [sp, #6]
    82e8:	4613      	mov	r3, r2
    82ea:	f88d 3005 	strb.w	r3, [sp, #5]
    Std_ReturnType Valid = (Std_ReturnType)E_NOT_OK;
    82ee:	2301      	movs	r3, #1
    82f0:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 CoreId = (uint8)Dio_GetCoreID();
    82f4:	2300      	movs	r3, #0
    82f6:	f88d 300e 	strb.w	r3, [sp, #14]
    Dio_ChannelType maxChannelId = (Dio_ChannelType)DIO_NUM_CHANNELS_U16;
    82fa:	2390      	movs	r3, #144	; 0x90
    82fc:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (SIUL2_DIO_IP_MAX_MSCR_REGISTERS <= ChannelId)
    {
        maxChannelId = (Dio_ChannelType)(SIUL2_DIO_IP_MAX_MSCR_REGISTERS + SIUL2_DIO_IP_MAX_SIUL2_AE_CHANNELS);
    }
#endif /* SIUL2_DIO_IP_HAS_SIUL2_AE_INSTANCE */
    if ((((Dio_ChannelType)(ChannelId) <= (Dio_ChannelType)maxChannelId)) &&
    8300:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8304:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8308:	429a      	cmp	r2, r3
    830a:	d831      	bhi.n	8370 <Dio_ValidateChannelForWrite+0x94>
        ((Dio_PortLevelType)0 != (Dio_aAvailablePinsForWrite[(DIO_IPW_PORTID_EXTRACT(ChannelId))] &
    830c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8310:	095b      	lsrs	r3, r3, #5
    8312:	b29b      	uxth	r3, r3
    8314:	461a      	mov	r2, r3
    8316:	4b1d      	ldr	r3, [pc, #116]	; (838c <Dio_ValidateChannelForWrite+0xb0>)
    8318:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                                                    (DIO_IPW_CHECK_CHANNEL_VALIDITY((uint16)ChannelId))
    831c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8320:	f003 031f 	and.w	r3, r3, #31
        ((Dio_PortLevelType)0 != (Dio_aAvailablePinsForWrite[(DIO_IPW_PORTID_EXTRACT(ChannelId))] &
    8324:	fa22 f303 	lsr.w	r3, r2, r3
    8328:	f003 0301 	and.w	r3, r3, #1
    if ((((Dio_ChannelType)(ChannelId) <= (Dio_ChannelType)maxChannelId)) &&
    832c:	2b00      	cmp	r3, #0
    832e:	d01f      	beq.n	8370 <Dio_ValidateChannelForWrite+0x94>
        else
        {
            u32ChannelToPartitionMap = Dio_ConfigPC.pau32Dio_ChannelToPartitionMap[ChannelId];
        }
#else
        u32ChannelToPartitionMap = Dio_ConfigPC.pau32Dio_ChannelToPartitionMap[ChannelId];
    8330:	4b17      	ldr	r3, [pc, #92]	; (8390 <Dio_ValidateChannelForWrite+0xb4>)
    8332:	689a      	ldr	r2, [r3, #8]
    8334:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8338:	009b      	lsls	r3, r3, #2
    833a:	4413      	add	r3, r2
    833c:	681b      	ldr	r3, [r3, #0]
    833e:	9302      	str	r3, [sp, #8]
#endif /* SIUL2_DIO_IP_HAS_SIUL2_AE_INSTANCE */
        if ((uint32)1 == ((u32ChannelToPartitionMap & ((uint32)1 << CoreId)) >> CoreId))
    8340:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8344:	2201      	movs	r2, #1
    8346:	409a      	lsls	r2, r3
    8348:	9b02      	ldr	r3, [sp, #8]
    834a:	401a      	ands	r2, r3
    834c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8350:	fa22 f303 	lsr.w	r3, r2, r3
    8354:	2b01      	cmp	r3, #1
    8356:	d103      	bne.n	8360 <Dio_ValidateChannelForWrite+0x84>
        {
            Valid = (Std_ReturnType)E_OK;
    8358:	2300      	movs	r3, #0
    835a:	f88d 300f 	strb.w	r3, [sp, #15]
        if ((uint32)1 == ((u32ChannelToPartitionMap & ((uint32)1 << CoreId)) >> CoreId))
    835e:	e00e      	b.n	837e <Dio_ValidateChannelForWrite+0xa2>
        }
        else
        {
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_CONFIG);
    8360:	f89d 2005 	ldrb.w	r2, [sp, #5]
    8364:	23f0      	movs	r3, #240	; 0xf0
    8366:	2100      	movs	r1, #0
    8368:	2078      	movs	r0, #120	; 0x78
    836a:	f010 f853 	bl	18414 <Det_ReportError>
        if ((uint32)1 == ((u32ChannelToPartitionMap & ((uint32)1 << CoreId)) >> CoreId))
    836e:	e006      	b.n	837e <Dio_ValidateChannelForWrite+0xa2>
        }
    }
    else
    {
        (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_INVALID_CHANNEL_ID);
    8370:	f89d 2005 	ldrb.w	r2, [sp, #5]
    8374:	230a      	movs	r3, #10
    8376:	2100      	movs	r1, #0
    8378:	2078      	movs	r0, #120	; 0x78
    837a:	f010 f84b 	bl	18414 <Det_ReportError>
    }

    return Valid;
    837e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8382:	4618      	mov	r0, r3
    8384:	b005      	add	sp, #20
    8386:	f85d fb04 	ldr.w	pc, [sp], #4
    838a:	bf00      	nop
    838c:	0001a4f0 	.word	0x0001a4f0
    8390:	0001a518 	.word	0x0001a518

00008394 <Dio_ValidateChannelForRead>:
static inline Std_ReturnType Dio_ValidateChannelForRead
(
    Dio_ChannelType ChannelId,
    uint8 u8ServiceId
)
{
    8394:	b500      	push	{lr}
    8396:	b085      	sub	sp, #20
    8398:	4603      	mov	r3, r0
    839a:	460a      	mov	r2, r1
    839c:	f8ad 3006 	strh.w	r3, [sp, #6]
    83a0:	4613      	mov	r3, r2
    83a2:	f88d 3005 	strb.w	r3, [sp, #5]
    Std_ReturnType Valid  = (Std_ReturnType)E_NOT_OK;
    83a6:	2301      	movs	r3, #1
    83a8:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 CoreId = (uint8)Dio_GetCoreID();
    83ac:	2300      	movs	r3, #0
    83ae:	f88d 300e 	strb.w	r3, [sp, #14]
    Dio_ChannelType maxChannelId = (Dio_ChannelType)DIO_NUM_CHANNELS_U16;
    83b2:	2390      	movs	r3, #144	; 0x90
    83b4:	f8ad 300c 	strh.w	r3, [sp, #12]
        maxChannelId = (Dio_ChannelType)(SIUL2_DIO_IP_MAX_MSCR_REGISTERS + SIUL2_DIO_IP_MAX_SIUL2_AE_CHANNELS);
    }
#endif /* SIUL2_DIO_IP_HAS_SIUL2_AE_INSTANCE */

    /* Check if that channel ID is available for read */
    if ((((Dio_ChannelType)(ChannelId) <= (Dio_ChannelType)maxChannelId)) &&
    83b8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    83bc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    83c0:	429a      	cmp	r2, r3
    83c2:	d831      	bhi.n	8428 <Dio_ValidateChannelForRead+0x94>
        ((Dio_PortLevelType)0 != (Dio_aAvailablePinsForRead[(DIO_IPW_PORTID_EXTRACT(ChannelId))] &
    83c4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    83c8:	095b      	lsrs	r3, r3, #5
    83ca:	b29b      	uxth	r3, r3
    83cc:	461a      	mov	r2, r3
    83ce:	4b1d      	ldr	r3, [pc, #116]	; (8444 <Dio_ValidateChannelForRead+0xb0>)
    83d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                                  (DIO_IPW_CHECK_CHANNEL_VALIDITY((uint16)ChannelId))
    83d4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    83d8:	f003 031f 	and.w	r3, r3, #31
        ((Dio_PortLevelType)0 != (Dio_aAvailablePinsForRead[(DIO_IPW_PORTID_EXTRACT(ChannelId))] &
    83dc:	fa22 f303 	lsr.w	r3, r2, r3
    83e0:	f003 0301 	and.w	r3, r3, #1
    if ((((Dio_ChannelType)(ChannelId) <= (Dio_ChannelType)maxChannelId)) &&
    83e4:	2b00      	cmp	r3, #0
    83e6:	d01f      	beq.n	8428 <Dio_ValidateChannelForRead+0x94>
        else
        {
            u32ChannelToPartitionMap = Dio_ConfigPC.pau32Dio_ChannelToPartitionMap[ChannelId];
        }
#else
        u32ChannelToPartitionMap = Dio_ConfigPC.pau32Dio_ChannelToPartitionMap[ChannelId];
    83e8:	4b17      	ldr	r3, [pc, #92]	; (8448 <Dio_ValidateChannelForRead+0xb4>)
    83ea:	689a      	ldr	r2, [r3, #8]
    83ec:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    83f0:	009b      	lsls	r3, r3, #2
    83f2:	4413      	add	r3, r2
    83f4:	681b      	ldr	r3, [r3, #0]
    83f6:	9302      	str	r3, [sp, #8]
#endif /* SIUL2_DIO_IP_HAS_SIUL2_AE_INSTANCE */
        /* Check if port was assigned to the current coreID */
        if ((uint32)1 == ((u32ChannelToPartitionMap & ((uint32)1 << CoreId)) >> CoreId))
    83f8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    83fc:	2201      	movs	r2, #1
    83fe:	409a      	lsls	r2, r3
    8400:	9b02      	ldr	r3, [sp, #8]
    8402:	401a      	ands	r2, r3
    8404:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8408:	fa22 f303 	lsr.w	r3, r2, r3
    840c:	2b01      	cmp	r3, #1
    840e:	d103      	bne.n	8418 <Dio_ValidateChannelForRead+0x84>
        {
            Valid = (Std_ReturnType)E_OK;
    8410:	2300      	movs	r3, #0
    8412:	f88d 300f 	strb.w	r3, [sp, #15]
        if ((uint32)1 == ((u32ChannelToPartitionMap & ((uint32)1 << CoreId)) >> CoreId))
    8416:	e00e      	b.n	8436 <Dio_ValidateChannelForRead+0xa2>
        }
        else
        {
            /* Raise Det error when invalid serviceID */
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_CONFIG);
    8418:	f89d 2005 	ldrb.w	r2, [sp, #5]
    841c:	23f0      	movs	r3, #240	; 0xf0
    841e:	2100      	movs	r1, #0
    8420:	2078      	movs	r0, #120	; 0x78
    8422:	f00f fff7 	bl	18414 <Det_ReportError>
        if ((uint32)1 == ((u32ChannelToPartitionMap & ((uint32)1 << CoreId)) >> CoreId))
    8426:	e006      	b.n	8436 <Dio_ValidateChannelForRead+0xa2>
        }
    }
    else
    {
        /* Raise Det error when invalid channel ID */
        (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_INVALID_CHANNEL_ID);
    8428:	f89d 2005 	ldrb.w	r2, [sp, #5]
    842c:	230a      	movs	r3, #10
    842e:	2100      	movs	r1, #0
    8430:	2078      	movs	r0, #120	; 0x78
    8432:	f00f ffef 	bl	18414 <Det_ReportError>
    }

    return Valid;
    8436:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    843a:	4618      	mov	r0, r3
    843c:	b005      	add	sp, #20
    843e:	f85d fb04 	ldr.w	pc, [sp], #4
    8442:	bf00      	nop
    8444:	0001a504 	.word	0x0001a504
    8448:	0001a518 	.word	0x0001a518

0000844c <Dio_ValidatePortForWrite>:
static inline Std_ReturnType Dio_ValidatePortForWrite
(
    Dio_PortType PortId,
    uint8 u8ServiceId
)
{
    844c:	b500      	push	{lr}
    844e:	b085      	sub	sp, #20
    8450:	4603      	mov	r3, r0
    8452:	460a      	mov	r2, r1
    8454:	f88d 3007 	strb.w	r3, [sp, #7]
    8458:	4613      	mov	r3, r2
    845a:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType Valid  = (Std_ReturnType)E_NOT_OK;
    845e:	2301      	movs	r3, #1
    8460:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 CoreId = (uint8)Dio_GetCoreID();
    8464:	2300      	movs	r3, #0
    8466:	f88d 300e 	strb.w	r3, [sp, #14]

    if (((uint8)(PortId) < DIO_NUM_PORTS_U16) &&
    846a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    846e:	2b04      	cmp	r3, #4
    8470:	d825      	bhi.n	84be <Dio_ValidatePortForWrite+0x72>
        (Dio_aAvailablePinsForWrite[(uint8)(PortId)] != DIO_NO_AVAILABLE_CHANNELS_U16)
    8472:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8476:	4a18      	ldr	r2, [pc, #96]	; (84d8 <Dio_ValidatePortForWrite+0x8c>)
    8478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (((uint8)(PortId) < DIO_NUM_PORTS_U16) &&
    847c:	2b00      	cmp	r3, #0
    847e:	d01e      	beq.n	84be <Dio_ValidatePortForWrite+0x72>
       )
    {
        if ((uint32)1 == ((Dio_ConfigPC.pau32Dio_PortToPartitionMap[PortId] & ((uint32)1 << CoreId)) >> CoreId))
    8480:	4b16      	ldr	r3, [pc, #88]	; (84dc <Dio_ValidatePortForWrite+0x90>)
    8482:	68da      	ldr	r2, [r3, #12]
    8484:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8488:	009b      	lsls	r3, r3, #2
    848a:	4413      	add	r3, r2
    848c:	681a      	ldr	r2, [r3, #0]
    848e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8492:	2101      	movs	r1, #1
    8494:	fa01 f303 	lsl.w	r3, r1, r3
    8498:	401a      	ands	r2, r3
    849a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    849e:	fa22 f303 	lsr.w	r3, r2, r3
    84a2:	2b01      	cmp	r3, #1
    84a4:	d103      	bne.n	84ae <Dio_ValidatePortForWrite+0x62>
        {
            Valid = ( Std_ReturnType)E_OK;
    84a6:	2300      	movs	r3, #0
    84a8:	f88d 300f 	strb.w	r3, [sp, #15]
        if ((uint32)1 == ((Dio_ConfigPC.pau32Dio_PortToPartitionMap[PortId] & ((uint32)1 << CoreId)) >> CoreId))
    84ac:	e00e      	b.n	84cc <Dio_ValidatePortForWrite+0x80>
        }
        else
        {
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_CONFIG);
    84ae:	f89d 2006 	ldrb.w	r2, [sp, #6]
    84b2:	23f0      	movs	r3, #240	; 0xf0
    84b4:	2100      	movs	r1, #0
    84b6:	2078      	movs	r0, #120	; 0x78
    84b8:	f00f ffac 	bl	18414 <Det_ReportError>
        if ((uint32)1 == ((Dio_ConfigPC.pau32Dio_PortToPartitionMap[PortId] & ((uint32)1 << CoreId)) >> CoreId))
    84bc:	e006      	b.n	84cc <Dio_ValidatePortForWrite+0x80>
        }
    }
    else
    {
        (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_INVALID_PORT_ID);
    84be:	f89d 2006 	ldrb.w	r2, [sp, #6]
    84c2:	2314      	movs	r3, #20
    84c4:	2100      	movs	r1, #0
    84c6:	2078      	movs	r0, #120	; 0x78
    84c8:	f00f ffa4 	bl	18414 <Det_ReportError>
    }

    return Valid;
    84cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    84d0:	4618      	mov	r0, r3
    84d2:	b005      	add	sp, #20
    84d4:	f85d fb04 	ldr.w	pc, [sp], #4
    84d8:	0001a4f0 	.word	0x0001a4f0
    84dc:	0001a518 	.word	0x0001a518

000084e0 <Dio_ValidatePortForRead>:
static inline Std_ReturnType Dio_ValidatePortForRead
(
    Dio_PortType PortId,
    uint8 u8ServiceId
)
{
    84e0:	b500      	push	{lr}
    84e2:	b085      	sub	sp, #20
    84e4:	4603      	mov	r3, r0
    84e6:	460a      	mov	r2, r1
    84e8:	f88d 3007 	strb.w	r3, [sp, #7]
    84ec:	4613      	mov	r3, r2
    84ee:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType Valid  = (Std_ReturnType)E_NOT_OK;
    84f2:	2301      	movs	r3, #1
    84f4:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 CoreId = (uint8)Dio_GetCoreID();
    84f8:	2300      	movs	r3, #0
    84fa:	f88d 300e 	strb.w	r3, [sp, #14]

    /* Check input parameters are available for read */
    if (((uint8)(PortId) < DIO_NUM_PORTS_U16) &&
    84fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8502:	2b04      	cmp	r3, #4
    8504:	d825      	bhi.n	8552 <Dio_ValidatePortForRead+0x72>
        (Dio_aAvailablePinsForRead[(uint8)(PortId)] != DIO_NO_AVAILABLE_CHANNELS_U16)
    8506:	f89d 3007 	ldrb.w	r3, [sp, #7]
    850a:	4a18      	ldr	r2, [pc, #96]	; (856c <Dio_ValidatePortForRead+0x8c>)
    850c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (((uint8)(PortId) < DIO_NUM_PORTS_U16) &&
    8510:	2b00      	cmp	r3, #0
    8512:	d01e      	beq.n	8552 <Dio_ValidatePortForRead+0x72>
       )
    {
        /* Check if Port was assigned to the current coreID */
        if ((uint32)1 == ((Dio_ConfigPC.pau32Dio_PortToPartitionMap[PortId] & ((uint32)1 << CoreId)) >> CoreId))
    8514:	4b16      	ldr	r3, [pc, #88]	; (8570 <Dio_ValidatePortForRead+0x90>)
    8516:	68da      	ldr	r2, [r3, #12]
    8518:	f89d 3007 	ldrb.w	r3, [sp, #7]
    851c:	009b      	lsls	r3, r3, #2
    851e:	4413      	add	r3, r2
    8520:	681a      	ldr	r2, [r3, #0]
    8522:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8526:	2101      	movs	r1, #1
    8528:	fa01 f303 	lsl.w	r3, r1, r3
    852c:	401a      	ands	r2, r3
    852e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8532:	fa22 f303 	lsr.w	r3, r2, r3
    8536:	2b01      	cmp	r3, #1
    8538:	d103      	bne.n	8542 <Dio_ValidatePortForRead+0x62>
        {
            Valid = ( Std_ReturnType)E_OK;
    853a:	2300      	movs	r3, #0
    853c:	f88d 300f 	strb.w	r3, [sp, #15]
        if ((uint32)1 == ((Dio_ConfigPC.pau32Dio_PortToPartitionMap[PortId] & ((uint32)1 << CoreId)) >> CoreId))
    8540:	e00e      	b.n	8560 <Dio_ValidatePortForRead+0x80>
        }
        else
        {
            /* Raise Det error when invalid serviceID */
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_CONFIG);
    8542:	f89d 2006 	ldrb.w	r2, [sp, #6]
    8546:	23f0      	movs	r3, #240	; 0xf0
    8548:	2100      	movs	r1, #0
    854a:	2078      	movs	r0, #120	; 0x78
    854c:	f00f ff62 	bl	18414 <Det_ReportError>
        if ((uint32)1 == ((Dio_ConfigPC.pau32Dio_PortToPartitionMap[PortId] & ((uint32)1 << CoreId)) >> CoreId))
    8550:	e006      	b.n	8560 <Dio_ValidatePortForRead+0x80>
        }
    }
    else
    {
        /* Raise Det error when invalid port ID */
        (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_INVALID_PORT_ID);
    8552:	f89d 2006 	ldrb.w	r2, [sp, #6]
    8556:	2314      	movs	r3, #20
    8558:	2100      	movs	r1, #0
    855a:	2078      	movs	r0, #120	; 0x78
    855c:	f00f ff5a 	bl	18414 <Det_ReportError>
    }

    return Valid;
    8560:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8564:	4618      	mov	r0, r3
    8566:	b005      	add	sp, #20
    8568:	f85d fb04 	ldr.w	pc, [sp], #4
    856c:	0001a504 	.word	0x0001a504
    8570:	0001a518 	.word	0x0001a518

00008574 <Dio_ValidateChannelGroupForWrite>:
static inline Std_ReturnType Dio_ValidateChannelGroupForWrite
(
    const Dio_ChannelGroupType * pChannelGroup,
    uint8                u8ServiceId
)
{
    8574:	b500      	push	{lr}
    8576:	b085      	sub	sp, #20
    8578:	9001      	str	r0, [sp, #4]
    857a:	460b      	mov	r3, r1
    857c:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType Valid = (Std_ReturnType)E_NOT_OK;
    8580:	2301      	movs	r3, #1
    8582:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ChannelGroup = pChannelGroup->port;
    8586:	9b01      	ldr	r3, [sp, #4]
    8588:	781b      	ldrb	r3, [r3, #0]
    858a:	f88d 300e 	strb.w	r3, [sp, #14]

    /* Compiler_Warning: Pointer to channel group is converted to unsigned long in order for it to
                          be compared with the boundaries of the channel group list. */
    if ((((pointerSizeType)(pChannelGroup)) >= ((pointerSizeType)Dio_ConfigPC.pChannelGroupList))                                  &&  \
    858e:	4b19      	ldr	r3, [pc, #100]	; (85f4 <Dio_ValidateChannelGroupForWrite+0x80>)
    8590:	685b      	ldr	r3, [r3, #4]
    8592:	461a      	mov	r2, r3
    8594:	9b01      	ldr	r3, [sp, #4]
    8596:	429a      	cmp	r2, r3
    8598:	d81f      	bhi.n	85da <Dio_ValidateChannelGroupForWrite+0x66>
        (((pointerSizeType)(pChannelGroup)) <= (pointerSizeType)(&Dio_ConfigPC.pChannelGroupList[Dio_ConfigPC.u8NumChannelGroups - 1U])) &&  \
    859a:	4b16      	ldr	r3, [pc, #88]	; (85f4 <Dio_ValidateChannelGroupForWrite+0x80>)
    859c:	685a      	ldr	r2, [r3, #4]
    859e:	4b15      	ldr	r3, [pc, #84]	; (85f4 <Dio_ValidateChannelGroupForWrite+0x80>)
    85a0:	781b      	ldrb	r3, [r3, #0]
    85a2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    85a6:	3b01      	subs	r3, #1
    85a8:	00db      	lsls	r3, r3, #3
    85aa:	4413      	add	r3, r2
    85ac:	461a      	mov	r2, r3
    85ae:	9b01      	ldr	r3, [sp, #4]
    if ((((pointerSizeType)(pChannelGroup)) >= ((pointerSizeType)Dio_ConfigPC.pChannelGroupList))                                  &&  \
    85b0:	429a      	cmp	r2, r3
    85b2:	d312      	bcc.n	85da <Dio_ValidateChannelGroupForWrite+0x66>
        (((pointerSizeType)(pChannelGroup)) <= (pointerSizeType)(&Dio_ConfigPC.pChannelGroupList[Dio_ConfigPC.u8NumChannelGroups - 1U])) &&  \
    85b4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    85b8:	2b04      	cmp	r3, #4
    85ba:	d80e      	bhi.n	85da <Dio_ValidateChannelGroupForWrite+0x66>
        (u8ChannelGroup < DIO_NUM_PORTS_U16)                                                       &&  \
        (Dio_aAvailablePinsForWrite[u8ChannelGroup] != DIO_NO_AVAILABLE_CHANNELS_U16)              &&  \
    85bc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    85c0:	4a0d      	ldr	r2, [pc, #52]	; (85f8 <Dio_ValidateChannelGroupForWrite+0x84>)
    85c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        (u8ChannelGroup < DIO_NUM_PORTS_U16)                                                       &&  \
    85c6:	2b00      	cmp	r3, #0
    85c8:	d007      	beq.n	85da <Dio_ValidateChannelGroupForWrite+0x66>
        ((uint8)(pChannelGroup->u8offset) <= DIO_MAX_VALID_OFFSET_U8)
    85ca:	9b01      	ldr	r3, [sp, #4]
    85cc:	785b      	ldrb	r3, [r3, #1]
        (Dio_aAvailablePinsForWrite[u8ChannelGroup] != DIO_NO_AVAILABLE_CHANNELS_U16)              &&  \
    85ce:	2b1f      	cmp	r3, #31
    85d0:	d803      	bhi.n	85da <Dio_ValidateChannelGroupForWrite+0x66>
       )
    {
        Valid = (Std_ReturnType)E_OK;
    85d2:	2300      	movs	r3, #0
    85d4:	f88d 300f 	strb.w	r3, [sp, #15]
    85d8:	e006      	b.n	85e8 <Dio_ValidateChannelGroupForWrite+0x74>
    }
    else
    {
        (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_INVALID_GROUP_ID);
    85da:	f89d 2003 	ldrb.w	r2, [sp, #3]
    85de:	231f      	movs	r3, #31
    85e0:	2100      	movs	r1, #0
    85e2:	2078      	movs	r0, #120	; 0x78
    85e4:	f00f ff16 	bl	18414 <Det_ReportError>
    }

    return Valid;
    85e8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    85ec:	4618      	mov	r0, r3
    85ee:	b005      	add	sp, #20
    85f0:	f85d fb04 	ldr.w	pc, [sp], #4
    85f4:	0001a518 	.word	0x0001a518
    85f8:	0001a4f0 	.word	0x0001a4f0

000085fc <Dio_ValidateChannelGroupForRead>:
static inline Std_ReturnType Dio_ValidateChannelGroupForRead
(
    const Dio_ChannelGroupType * pChannelGroup,
    uint8                 u8ServiceId
)
{
    85fc:	b500      	push	{lr}
    85fe:	b085      	sub	sp, #20
    8600:	9001      	str	r0, [sp, #4]
    8602:	460b      	mov	r3, r1
    8604:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType Valid = (Std_ReturnType)E_NOT_OK;
    8608:	2301      	movs	r3, #1
    860a:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ChannelGroup = pChannelGroup->port;
    860e:	9b01      	ldr	r3, [sp, #4]
    8610:	781b      	ldrb	r3, [r3, #0]
    8612:	f88d 300e 	strb.w	r3, [sp, #14]

    /* Compiler_Warning: Pointer to channel group is converted to unsigned long in order for it to
                          be compared with the boundaries of the channel group list. */
    if ((((pointerSizeType)(pChannelGroup)) >= ((pointerSizeType)Dio_ConfigPC.pChannelGroupList))                                  &&  \
    8616:	4b19      	ldr	r3, [pc, #100]	; (867c <Dio_ValidateChannelGroupForRead+0x80>)
    8618:	685b      	ldr	r3, [r3, #4]
    861a:	461a      	mov	r2, r3
    861c:	9b01      	ldr	r3, [sp, #4]
    861e:	429a      	cmp	r2, r3
    8620:	d81f      	bhi.n	8662 <Dio_ValidateChannelGroupForRead+0x66>
        (((pointerSizeType)(pChannelGroup)) <= (pointerSizeType)(&Dio_ConfigPC.pChannelGroupList[Dio_ConfigPC.u8NumChannelGroups - 1U])) &&  \
    8622:	4b16      	ldr	r3, [pc, #88]	; (867c <Dio_ValidateChannelGroupForRead+0x80>)
    8624:	685a      	ldr	r2, [r3, #4]
    8626:	4b15      	ldr	r3, [pc, #84]	; (867c <Dio_ValidateChannelGroupForRead+0x80>)
    8628:	781b      	ldrb	r3, [r3, #0]
    862a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    862e:	3b01      	subs	r3, #1
    8630:	00db      	lsls	r3, r3, #3
    8632:	4413      	add	r3, r2
    8634:	461a      	mov	r2, r3
    8636:	9b01      	ldr	r3, [sp, #4]
    if ((((pointerSizeType)(pChannelGroup)) >= ((pointerSizeType)Dio_ConfigPC.pChannelGroupList))                                  &&  \
    8638:	429a      	cmp	r2, r3
    863a:	d312      	bcc.n	8662 <Dio_ValidateChannelGroupForRead+0x66>
        (((pointerSizeType)(pChannelGroup)) <= (pointerSizeType)(&Dio_ConfigPC.pChannelGroupList[Dio_ConfigPC.u8NumChannelGroups - 1U])) &&  \
    863c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8640:	2b04      	cmp	r3, #4
    8642:	d80e      	bhi.n	8662 <Dio_ValidateChannelGroupForRead+0x66>
        (u8ChannelGroup < DIO_NUM_PORTS_U16)                                                       &&  \
        (Dio_aAvailablePinsForRead[u8ChannelGroup] != DIO_NO_AVAILABLE_CHANNELS_U16)               &&  \
    8644:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8648:	4a0d      	ldr	r2, [pc, #52]	; (8680 <Dio_ValidateChannelGroupForRead+0x84>)
    864a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        (u8ChannelGroup < DIO_NUM_PORTS_U16)                                                       &&  \
    864e:	2b00      	cmp	r3, #0
    8650:	d007      	beq.n	8662 <Dio_ValidateChannelGroupForRead+0x66>
        ((uint8)(pChannelGroup->u8offset) <= DIO_MAX_VALID_OFFSET_U8)
    8652:	9b01      	ldr	r3, [sp, #4]
    8654:	785b      	ldrb	r3, [r3, #1]
        (Dio_aAvailablePinsForRead[u8ChannelGroup] != DIO_NO_AVAILABLE_CHANNELS_U16)               &&  \
    8656:	2b1f      	cmp	r3, #31
    8658:	d803      	bhi.n	8662 <Dio_ValidateChannelGroupForRead+0x66>
       )
    {
        Valid = (Std_ReturnType)E_OK;
    865a:	2300      	movs	r3, #0
    865c:	f88d 300f 	strb.w	r3, [sp, #15]
    8660:	e006      	b.n	8670 <Dio_ValidateChannelGroupForRead+0x74>
    }
    else
    {
        (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_INVALID_GROUP_ID);
    8662:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8666:	231f      	movs	r3, #31
    8668:	2100      	movs	r1, #0
    866a:	2078      	movs	r0, #120	; 0x78
    866c:	f00f fed2 	bl	18414 <Det_ReportError>
    }

    return Valid;
    8670:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8674:	4618      	mov	r0, r3
    8676:	b005      	add	sp, #20
    8678:	f85d fb04 	ldr.w	pc, [sp], #4
    867c:	0001a518 	.word	0x0001a518
    8680:	0001a504 	.word	0x0001a504

00008684 <Dio_GetVersionInfo>:
*/
void Dio_GetVersionInfo
(
    Std_VersionInfoType * VersionInfo
)
{
    8684:	b500      	push	{lr}
    8686:	b083      	sub	sp, #12
    8688:	9001      	str	r0, [sp, #4]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    if (NULL_PTR == VersionInfo)
    868a:	9b01      	ldr	r3, [sp, #4]
    868c:	2b00      	cmp	r3, #0
    868e:	d106      	bne.n	869e <Dio_GetVersionInfo+0x1a>
    {
        (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_GETVERSIONINFO_ID, DIO_E_PARAM_POINTER);
    8690:	2320      	movs	r3, #32
    8692:	2212      	movs	r2, #18
    8694:	2100      	movs	r1, #0
    8696:	2078      	movs	r0, #120	; 0x78
    8698:	f00f febc 	bl	18414 <Det_ReportError>
        VersionInfo->moduleID         = (uint16)DIO_MODULE_ID;
        VersionInfo->sw_major_version = (uint8)DIO_SW_MAJOR_VERSION;
        VersionInfo->sw_minor_version = (uint8)DIO_SW_MINOR_VERSION;
        VersionInfo->sw_patch_version = (uint8)DIO_SW_PATCH_VERSION;
    }
}
    869c:	e00e      	b.n	86bc <Dio_GetVersionInfo+0x38>
        VersionInfo->vendorID         = (uint16)DIO_VENDOR_ID;
    869e:	9b01      	ldr	r3, [sp, #4]
    86a0:	222b      	movs	r2, #43	; 0x2b
    86a2:	801a      	strh	r2, [r3, #0]
        VersionInfo->moduleID         = (uint16)DIO_MODULE_ID;
    86a4:	9b01      	ldr	r3, [sp, #4]
    86a6:	2278      	movs	r2, #120	; 0x78
    86a8:	805a      	strh	r2, [r3, #2]
        VersionInfo->sw_major_version = (uint8)DIO_SW_MAJOR_VERSION;
    86aa:	9b01      	ldr	r3, [sp, #4]
    86ac:	2202      	movs	r2, #2
    86ae:	711a      	strb	r2, [r3, #4]
        VersionInfo->sw_minor_version = (uint8)DIO_SW_MINOR_VERSION;
    86b0:	9b01      	ldr	r3, [sp, #4]
    86b2:	2200      	movs	r2, #0
    86b4:	715a      	strb	r2, [r3, #5]
        VersionInfo->sw_patch_version = (uint8)DIO_SW_PATCH_VERSION;
    86b6:	9b01      	ldr	r3, [sp, #4]
    86b8:	2200      	movs	r2, #0
    86ba:	719a      	strb	r2, [r3, #6]
}
    86bc:	bf00      	nop
    86be:	b003      	add	sp, #12
    86c0:	f85d fb04 	ldr.w	pc, [sp], #4

000086c4 <Dio_ReadChannel>:
*/
Dio_LevelType Dio_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    86c4:	b500      	push	{lr}
    86c6:	b085      	sub	sp, #20
    86c8:	4603      	mov	r3, r0
    86ca:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    86ce:	2300      	movs	r3, #0
    86d0:	f88d 300f 	strb.w	r3, [sp, #15]

#if (STD_ON == DIO_DEV_ERROR_DETECT)
    Std_ReturnType Valid = Dio_ValidateChannelForRead(ChannelId, DIO_READCHANNEL_ID);
    86d4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    86d8:	2100      	movs	r1, #0
    86da:	4618      	mov	r0, r3
    86dc:	f7ff fe5a 	bl	8394 <Dio_ValidateChannelForRead>
    86e0:	4603      	mov	r3, r0
    86e2:	f88d 300e 	strb.w	r3, [sp, #14]

    if ((Std_ReturnType)E_OK == Valid)
    86e6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    86ea:	2b00      	cmp	r3, #0
    86ec:	d107      	bne.n	86fe <Dio_ReadChannel+0x3a>
    {
#endif
        ChannelLevel = Dio_Ipw_ReadChannel(ChannelId);
    86ee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    86f2:	4618      	mov	r0, r3
    86f4:	f000 f8c6 	bl	8884 <Dio_Ipw_ReadChannel>
    86f8:	4603      	mov	r3, r0
    86fa:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return ChannelLevel;
    86fe:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8702:	4618      	mov	r0, r3
    8704:	b005      	add	sp, #20
    8706:	f85d fb04 	ldr.w	pc, [sp], #4

0000870a <Dio_WriteChannel>:
void Dio_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    870a:	b500      	push	{lr}
    870c:	b085      	sub	sp, #20
    870e:	4603      	mov	r3, r0
    8710:	460a      	mov	r2, r1
    8712:	f8ad 3006 	strh.w	r3, [sp, #6]
    8716:	4613      	mov	r3, r2
    8718:	f88d 3005 	strb.w	r3, [sp, #5]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    Std_ReturnType Valid = Dio_ValidateChannelForWrite(ChannelId, DIO_WRITECHANNEL_ID);
    871c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8720:	2101      	movs	r1, #1
    8722:	4618      	mov	r0, r3
    8724:	f7ff fdda 	bl	82dc <Dio_ValidateChannelForWrite>
    8728:	4603      	mov	r3, r0
    872a:	f88d 300f 	strb.w	r3, [sp, #15]

    if ((Std_ReturnType) E_OK == Valid)
    872e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8732:	2b00      	cmp	r3, #0
    8734:	d113      	bne.n	875e <Dio_WriteChannel+0x54>
    {
        Valid = Dio_ValidateChannelLevel(Level);
    8736:	f89d 3005 	ldrb.w	r3, [sp, #5]
    873a:	4618      	mov	r0, r3
    873c:	f7ff fdae 	bl	829c <Dio_ValidateChannelLevel>
    8740:	4603      	mov	r3, r0
    8742:	f88d 300f 	strb.w	r3, [sp, #15]
        if ((Std_ReturnType) E_OK == Valid)
    8746:	f89d 300f 	ldrb.w	r3, [sp, #15]
    874a:	2b00      	cmp	r3, #0
    874c:	d107      	bne.n	875e <Dio_WriteChannel+0x54>
        {
#endif
            Dio_Ipw_WriteChannel(ChannelId, Level);
    874e:	f89d 2005 	ldrb.w	r2, [sp, #5]
    8752:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8756:	4611      	mov	r1, r2
    8758:	4618      	mov	r0, r3
    875a:	f000 f8b9 	bl	88d0 <Dio_Ipw_WriteChannel>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
        }
    }
#endif

}
    875e:	bf00      	nop
    8760:	b005      	add	sp, #20
    8762:	f85d fb04 	ldr.w	pc, [sp], #4

00008766 <Dio_FlipChannel>:
*/
Dio_LevelType Dio_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    8766:	b500      	push	{lr}
    8768:	b085      	sub	sp, #20
    876a:	4603      	mov	r3, r0
    876c:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    8770:	2300      	movs	r3, #0
    8772:	f88d 300f 	strb.w	r3, [sp, #15]

#if (STD_ON == DIO_DEV_ERROR_DETECT)
    Std_ReturnType Valid = Dio_ValidateChannelForWrite(ChannelId, DIO_FLIPCHANNEL_ID);
    8776:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    877a:	2111      	movs	r1, #17
    877c:	4618      	mov	r0, r3
    877e:	f7ff fdad 	bl	82dc <Dio_ValidateChannelForWrite>
    8782:	4603      	mov	r3, r0
    8784:	f88d 300e 	strb.w	r3, [sp, #14]

    if ((Std_ReturnType)E_OK == Valid)
    8788:	f89d 300e 	ldrb.w	r3, [sp, #14]
    878c:	2b00      	cmp	r3, #0
    878e:	d107      	bne.n	87a0 <Dio_FlipChannel+0x3a>
    {
#endif
        ChannelLevel = Dio_Ipw_FlipChannel(ChannelId);
    8790:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8794:	4618      	mov	r0, r3
    8796:	f000 f8c1 	bl	891c <Dio_Ipw_FlipChannel>
    879a:	4603      	mov	r3, r0
    879c:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

   return ChannelLevel;
    87a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    87a4:	4618      	mov	r0, r3
    87a6:	b005      	add	sp, #20
    87a8:	f85d fb04 	ldr.w	pc, [sp], #4

000087ac <Dio_ReadPort>:
*/
Dio_PortLevelType Dio_ReadPort
(
    Dio_PortType PortId
)
{
    87ac:	b500      	push	{lr}
    87ae:	b085      	sub	sp, #20
    87b0:	4603      	mov	r3, r0
    87b2:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    87b6:	2300      	movs	r3, #0
    87b8:	9303      	str	r3, [sp, #12]

#if (STD_ON == DIO_DEV_ERROR_DETECT)
    Std_ReturnType Valid = Dio_ValidatePortForRead(PortId, DIO_READPORT_ID);
    87ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    87be:	2102      	movs	r1, #2
    87c0:	4618      	mov	r0, r3
    87c2:	f7ff fe8d 	bl	84e0 <Dio_ValidatePortForRead>
    87c6:	4603      	mov	r3, r0
    87c8:	f88d 300b 	strb.w	r3, [sp, #11]

    if ((Std_ReturnType) E_OK == Valid)
    87cc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    87d0:	2b00      	cmp	r3, #0
    87d2:	d105      	bne.n	87e0 <Dio_ReadPort+0x34>
    {
#endif
        PortLevel = Dio_Ipw_ReadPort(PortId);
    87d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    87d8:	4618      	mov	r0, r3
    87da:	f000 f8d5 	bl	8988 <Dio_Ipw_ReadPort>
    87de:	9003      	str	r0, [sp, #12]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return PortLevel;
    87e0:	9b03      	ldr	r3, [sp, #12]
}
    87e2:	4618      	mov	r0, r3
    87e4:	b005      	add	sp, #20
    87e6:	f85d fb04 	ldr.w	pc, [sp], #4

000087ea <Dio_WritePort>:
void Dio_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    87ea:	b500      	push	{lr}
    87ec:	b085      	sub	sp, #20
    87ee:	4603      	mov	r3, r0
    87f0:	9100      	str	r1, [sp, #0]
    87f2:	f88d 3007 	strb.w	r3, [sp, #7]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    Std_ReturnType Valid = Dio_ValidatePortForWrite(PortId, DIO_WRITEPORT_ID);
    87f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    87fa:	2103      	movs	r1, #3
    87fc:	4618      	mov	r0, r3
    87fe:	f7ff fe25 	bl	844c <Dio_ValidatePortForWrite>
    8802:	4603      	mov	r3, r0
    8804:	f88d 300f 	strb.w	r3, [sp, #15]

    if ((Std_ReturnType)E_OK == Valid)
    8808:	f89d 300f 	ldrb.w	r3, [sp, #15]
    880c:	2b00      	cmp	r3, #0
    880e:	d105      	bne.n	881c <Dio_WritePort+0x32>
    {
#endif
        Dio_Ipw_WritePort(PortId, Level);
    8810:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8814:	9900      	ldr	r1, [sp, #0]
    8816:	4618      	mov	r0, r3
    8818:	f000 f8ce 	bl	89b8 <Dio_Ipw_WritePort>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif
}
    881c:	bf00      	nop
    881e:	b005      	add	sp, #20
    8820:	f85d fb04 	ldr.w	pc, [sp], #4

00008824 <Dio_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_ReadChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr
)
{
    8824:	b500      	push	{lr}
    8826:	b085      	sub	sp, #20
    8828:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    882a:	2300      	movs	r3, #0
    882c:	9303      	str	r3, [sp, #12]
    Std_ReturnType Valid;

#ifdef DIO_CHANNEL_GROUPS_AVAILABLE
    CoreId = (uint8)Dio_GetCoreID();
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    Valid = Dio_ValidateChannelGroupForRead(ChannelGroupIdPtr, DIO_READCHANNELGROUP_ID);
    882e:	2104      	movs	r1, #4
    8830:	9801      	ldr	r0, [sp, #4]
    8832:	f7ff fee3 	bl	85fc <Dio_ValidateChannelGroupForRead>
    8836:	4603      	mov	r3, r0
    8838:	f88d 300b 	strb.w	r3, [sp, #11]

    if ((Std_ReturnType)E_OK == Valid)
    883c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8840:	2b00      	cmp	r3, #0
    8842:	d103      	bne.n	884c <Dio_ReadChannelGroup+0x28>
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            PortLevel = Dio_Ipw_ReadChannelGroup(ChannelGroupIdPtr);
    8844:	9801      	ldr	r0, [sp, #4]
    8846:	f000 f8cf 	bl	89e8 <Dio_Ipw_ReadChannelGroup>
    884a:	9003      	str	r0, [sp, #12]
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */

    return PortLevel;
    884c:	9b03      	ldr	r3, [sp, #12]
}
    884e:	4618      	mov	r0, r3
    8850:	b005      	add	sp, #20
    8852:	f85d fb04 	ldr.w	pc, [sp], #4

00008856 <Dio_WriteChannelGroup>:
void Dio_WriteChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr,
    Dio_PortLevelType Level
)
{
    8856:	b500      	push	{lr}
    8858:	b085      	sub	sp, #20
    885a:	9001      	str	r0, [sp, #4]
    885c:	9100      	str	r1, [sp, #0]

#ifdef DIO_CHANNEL_GROUPS_AVAILABLE
    CoreId = (uint8)Dio_GetCoreID();
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */

    Valid = Dio_ValidateChannelGroupForWrite(ChannelGroupIdPtr, DIO_WRITECHANNELGROUP_ID);
    885e:	2105      	movs	r1, #5
    8860:	9801      	ldr	r0, [sp, #4]
    8862:	f7ff fe87 	bl	8574 <Dio_ValidateChannelGroupForWrite>
    8866:	4603      	mov	r3, r0
    8868:	f88d 300f 	strb.w	r3, [sp, #15]

    if ((Std_ReturnType)E_OK == Valid)
    886c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8870:	2b00      	cmp	r3, #0
    8872:	d103      	bne.n	887c <Dio_WriteChannelGroup+0x26>
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            Dio_Ipw_WriteChannelGroup(ChannelGroupIdPtr, Level);
    8874:	9900      	ldr	r1, [sp, #0]
    8876:	9801      	ldr	r0, [sp, #4]
    8878:	f000 f8d6 	bl	8a28 <Dio_Ipw_WriteChannelGroup>
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNELGROUP_ID, DIO_E_PARAM_CONFIG);
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */
}
    887c:	bf00      	nop
    887e:	b005      	add	sp, #20
    8880:	f85d fb04 	ldr.w	pc, [sp], #4

00008884 <Dio_Ipw_ReadChannel>:
*/
Dio_LevelType Dio_Ipw_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    8884:	b500      	push	{lr}
    8886:	b087      	sub	sp, #28
    8888:	4603      	mov	r3, r0
    888a:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType) STD_LOW;
    888e:	2300      	movs	r3, #0
    8890:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    8894:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8898:	095b      	lsrs	r3, r3, #5
    889a:	b29b      	uxth	r3, r3
    889c:	9304      	str	r3, [sp, #16]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    889e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    88a2:	f003 031f 	and.w	r3, r3, #31
    88a6:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    88a8:	4a08      	ldr	r2, [pc, #32]	; (88cc <Dio_Ipw_ReadChannel+0x48>)
    88aa:	9b04      	ldr	r3, [sp, #16]
    88ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88b0:	9302      	str	r3, [sp, #8]

    ChannelLevel = Gpio_Dio_Ip_ReadPin(GpioBase, u32PinIndex);
    88b2:	9903      	ldr	r1, [sp, #12]
    88b4:	9802      	ldr	r0, [sp, #8]
    88b6:	f000 f940 	bl	8b3a <Gpio_Dio_Ip_ReadPin>
    88ba:	4603      	mov	r3, r0
    88bc:	f88d 3017 	strb.w	r3, [sp, #23]
    return ChannelLevel;
    88c0:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    88c4:	4618      	mov	r0, r3
    88c6:	b007      	add	sp, #28
    88c8:	f85d fb04 	ldr.w	pc, [sp], #4
    88cc:	1fff8b28 	.word	0x1fff8b28

000088d0 <Dio_Ipw_WriteChannel>:
void Dio_Ipw_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    88d0:	b500      	push	{lr}
    88d2:	b087      	sub	sp, #28
    88d4:	4603      	mov	r3, r0
    88d6:	460a      	mov	r2, r1
    88d8:	f8ad 3006 	strh.w	r3, [sp, #6]
    88dc:	4613      	mov	r3, r2
    88de:	f88d 3005 	strb.w	r3, [sp, #5]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    88e2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    88e6:	095b      	lsrs	r3, r3, #5
    88e8:	b29b      	uxth	r3, r3
    88ea:	9305      	str	r3, [sp, #20]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    88ec:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    88f0:	f003 031f 	and.w	r3, r3, #31
    88f4:	9304      	str	r3, [sp, #16]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    88f6:	4a08      	ldr	r2, [pc, #32]	; (8918 <Dio_Ipw_WriteChannel+0x48>)
    88f8:	9b05      	ldr	r3, [sp, #20]
    88fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88fe:	9303      	str	r3, [sp, #12]

    Gpio_Dio_Ip_WritePin(GpioBase, u32PinIndex, Level);
    8900:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8904:	461a      	mov	r2, r3
    8906:	9904      	ldr	r1, [sp, #16]
    8908:	9803      	ldr	r0, [sp, #12]
    890a:	f000 f8b7 	bl	8a7c <Gpio_Dio_Ip_WritePin>
}
    890e:	bf00      	nop
    8910:	b007      	add	sp, #28
    8912:	f85d fb04 	ldr.w	pc, [sp], #4
    8916:	bf00      	nop
    8918:	1fff8b28 	.word	0x1fff8b28

0000891c <Dio_Ipw_FlipChannel>:
*/
Dio_LevelType Dio_Ipw_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    891c:	b500      	push	{lr}
    891e:	b089      	sub	sp, #36	; 0x24
    8920:	4603      	mov	r3, r0
    8922:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    8926:	2300      	movs	r3, #0
    8928:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;
    uint32 u32PortOutPutLevel;
    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    892c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8930:	095b      	lsrs	r3, r3, #5
    8932:	b29b      	uxth	r3, r3
    8934:	9306      	str	r3, [sp, #24]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    8936:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    893a:	f003 031f 	and.w	r3, r3, #31
    893e:	9305      	str	r3, [sp, #20]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    8940:	4a10      	ldr	r2, [pc, #64]	; (8984 <Dio_Ipw_FlipChannel+0x68>)
    8942:	9b06      	ldr	r3, [sp, #24]
    8944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8948:	9304      	str	r3, [sp, #16]

    Gpio_Dio_Ip_TogglePins(GpioBase, ((uint32)1U << u32PinIndex));
    894a:	2201      	movs	r2, #1
    894c:	9b05      	ldr	r3, [sp, #20]
    894e:	fa02 f303 	lsl.w	r3, r2, r3
    8952:	4619      	mov	r1, r3
    8954:	9804      	ldr	r0, [sp, #16]
    8956:	f000 f8dc 	bl	8b12 <Gpio_Dio_Ip_TogglePins>

    u32PortOutPutLevel = Gpio_Dio_Ip_GetPinsOutput(GpioBase);
    895a:	9804      	ldr	r0, [sp, #16]
    895c:	f000 f8bc 	bl	8ad8 <Gpio_Dio_Ip_GetPinsOutput>
    8960:	9003      	str	r0, [sp, #12]
    ChannelLevel = (Dio_LevelType)((u32PortOutPutLevel & ((uint32)1U << u32PinIndex)) >> u32PinIndex);
    8962:	2201      	movs	r2, #1
    8964:	9b05      	ldr	r3, [sp, #20]
    8966:	409a      	lsls	r2, r3
    8968:	9b03      	ldr	r3, [sp, #12]
    896a:	401a      	ands	r2, r3
    896c:	9b05      	ldr	r3, [sp, #20]
    896e:	fa22 f303 	lsr.w	r3, r2, r3
    8972:	f88d 301f 	strb.w	r3, [sp, #31]

    return ChannelLevel;
    8976:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    897a:	4618      	mov	r0, r3
    897c:	b009      	add	sp, #36	; 0x24
    897e:	f85d fb04 	ldr.w	pc, [sp], #4
    8982:	bf00      	nop
    8984:	1fff8b28 	.word	0x1fff8b28

00008988 <Dio_Ipw_ReadPort>:
*/
Dio_PortLevelType Dio_Ipw_ReadPort
(
    Dio_PortType PortId
)
{
    8988:	b500      	push	{lr}
    898a:	b085      	sub	sp, #20
    898c:	4603      	mov	r3, r0
    898e:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    8992:	2300      	movs	r3, #0
    8994:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    8996:	f89d 3007 	ldrb.w	r3, [sp, #7]
    899a:	4a06      	ldr	r2, [pc, #24]	; (89b4 <Dio_Ipw_ReadPort+0x2c>)
    899c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89a0:	9302      	str	r3, [sp, #8]

    PortLevel = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    89a2:	9802      	ldr	r0, [sp, #8]
    89a4:	f000 f8be 	bl	8b24 <Gpio_Dio_Ip_ReadPins>
    89a8:	9003      	str	r0, [sp, #12]
#endif
#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#endif

    return PortLevel;
    89aa:	9b03      	ldr	r3, [sp, #12]
}
    89ac:	4618      	mov	r0, r3
    89ae:	b005      	add	sp, #20
    89b0:	f85d fb04 	ldr.w	pc, [sp], #4
    89b4:	1fff8b28 	.word	0x1fff8b28

000089b8 <Dio_Ipw_WritePort>:
void Dio_Ipw_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    89b8:	b500      	push	{lr}
    89ba:	b085      	sub	sp, #20
    89bc:	4603      	mov	r3, r0
    89be:	9100      	str	r1, [sp, #0]
    89c0:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType CrtLevel = Level;
    89c4:	9b00      	ldr	r3, [sp, #0]
    89c6:	9303      	str	r3, [sp, #12]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    89c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    89cc:	4a05      	ldr	r2, [pc, #20]	; (89e4 <Dio_Ipw_WritePort+0x2c>)
    89ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89d2:	9302      	str	r3, [sp, #8]

#if (STD_ON == DIO_REVERSEPORTBITS)
    CrtLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(CrtLevel));
#endif /* STD_ON == DIO_REVERSEPORTBITS */
    Gpio_Dio_Ip_WritePins(GpioBase, CrtLevel);
    89d4:	9903      	ldr	r1, [sp, #12]
    89d6:	9802      	ldr	r0, [sp, #8]
    89d8:	f000 f875 	bl	8ac6 <Gpio_Dio_Ip_WritePins>
}
    89dc:	bf00      	nop
    89de:	b005      	add	sp, #20
    89e0:	f85d fb04 	ldr.w	pc, [sp], #4
    89e4:	1fff8b28 	.word	0x1fff8b28

000089e8 <Dio_Ipw_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_Ipw_ReadChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr
)
{
    89e8:	b500      	push	{lr}
    89ea:	b087      	sub	sp, #28
    89ec:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    89ee:	2300      	movs	r3, #0
    89f0:	9305      	str	r3, [sp, #20]
    Dio_PortLevelType pinsValue;
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    89f2:	9b01      	ldr	r3, [sp, #4]
    89f4:	781b      	ldrb	r3, [r3, #0]
    89f6:	461a      	mov	r2, r3
    89f8:	4b0a      	ldr	r3, [pc, #40]	; (8a24 <Dio_Ipw_ReadChannelGroup+0x3c>)
    89fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    89fe:	9304      	str	r3, [sp, #16]

    pinsValue = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    8a00:	9804      	ldr	r0, [sp, #16]
    8a02:	f000 f88f 	bl	8b24 <Gpio_Dio_Ip_ReadPins>
    8a06:	9003      	str	r0, [sp, #12]

#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) << (pChannelGroupIdPtr->u8offset));
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#else
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) >> (pChannelGroupIdPtr->u8offset));
    8a08:	9b01      	ldr	r3, [sp, #4]
    8a0a:	685a      	ldr	r2, [r3, #4]
    8a0c:	9b03      	ldr	r3, [sp, #12]
    8a0e:	4013      	ands	r3, r2
    8a10:	9a01      	ldr	r2, [sp, #4]
    8a12:	7852      	ldrb	r2, [r2, #1]
    8a14:	40d3      	lsrs	r3, r2
    8a16:	9305      	str	r3, [sp, #20]
#endif

    return PortLevel;
    8a18:	9b05      	ldr	r3, [sp, #20]
}
    8a1a:	4618      	mov	r0, r3
    8a1c:	b007      	add	sp, #28
    8a1e:	f85d fb04 	ldr.w	pc, [sp], #4
    8a22:	bf00      	nop
    8a24:	1fff8b28 	.word	0x1fff8b28

00008a28 <Dio_Ipw_WriteChannelGroup>:
void Dio_Ipw_WriteChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr,
    Dio_PortLevelType                 Level
)
{
    8a28:	b500      	push	{lr}
    8a2a:	b087      	sub	sp, #28
    8a2c:	9001      	str	r0, [sp, #4]
    8a2e:	9100      	str	r1, [sp, #0]
    Dio_PortLevelType ValueSet;
    Dio_PortLevelType ValueClear;

    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    8a30:	9b01      	ldr	r3, [sp, #4]
    8a32:	781b      	ldrb	r3, [r3, #0]
    8a34:	461a      	mov	r2, r3
    8a36:	4b10      	ldr	r3, [pc, #64]	; (8a78 <Dio_Ipw_WriteChannelGroup+0x50>)
    8a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8a3c:	9305      	str	r3, [sp, #20]

#if (STD_ON == DIO_REVERSEPORTBITS)
    ValueSet = (((Dio_PortLevelType)(Dio_Ipw_ReverseBits(Level)) >> (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
#else
    ValueSet = (((Dio_PortLevelType)(Level) << (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
    8a3e:	9b01      	ldr	r3, [sp, #4]
    8a40:	785b      	ldrb	r3, [r3, #1]
    8a42:	461a      	mov	r2, r3
    8a44:	9b00      	ldr	r3, [sp, #0]
    8a46:	fa03 f202 	lsl.w	r2, r3, r2
    8a4a:	9b01      	ldr	r3, [sp, #4]
    8a4c:	685b      	ldr	r3, [r3, #4]
    8a4e:	4013      	ands	r3, r2
    8a50:	9304      	str	r3, [sp, #16]
#endif

    Gpio_Dio_Ip_SetPins(GpioBase, ValueSet);
    8a52:	9904      	ldr	r1, [sp, #16]
    8a54:	9805      	ldr	r0, [sp, #20]
    8a56:	f000 f84a 	bl	8aee <Gpio_Dio_Ip_SetPins>
    ValueClear = (~ValueSet) & pChannelGroupIdPtr->mask;
    8a5a:	9b04      	ldr	r3, [sp, #16]
    8a5c:	43da      	mvns	r2, r3
    8a5e:	9b01      	ldr	r3, [sp, #4]
    8a60:	685b      	ldr	r3, [r3, #4]
    8a62:	4013      	ands	r3, r2
    8a64:	9303      	str	r3, [sp, #12]
    Gpio_Dio_Ip_ClearPins(GpioBase, ValueClear);
    8a66:	9903      	ldr	r1, [sp, #12]
    8a68:	9805      	ldr	r0, [sp, #20]
    8a6a:	f000 f849 	bl	8b00 <Gpio_Dio_Ip_ClearPins>

}
    8a6e:	bf00      	nop
    8a70:	b007      	add	sp, #28
    8a72:	f85d fb04 	ldr.w	pc, [sp], #4
    8a76:	bf00      	nop
    8a78:	1fff8b28 	.word	0x1fff8b28

00008a7c <Gpio_Dio_Ip_WritePin>:
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pin,
    Gpio_Dio_Ip_PinsLevelType value
)
{
    8a7c:	b500      	push	{lr}
    8a7e:	b087      	sub	sp, #28
    8a80:	9003      	str	r0, [sp, #12]
    8a82:	9102      	str	r1, [sp, #8]
    8a84:	4613      	mov	r3, r2
    8a86:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Enter critical region */
    SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00();
    8a8a:	f00c fdb7 	bl	155fc <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>
    Gpio_Dio_Ip_PinsChannelType pinsValues = (Gpio_Dio_Ip_PinsChannelType)base->PDOR;
    8a8e:	9b03      	ldr	r3, [sp, #12]
    8a90:	681b      	ldr	r3, [r3, #0]
    8a92:	9305      	str	r3, [sp, #20]
    pinsValues &= (Gpio_Dio_Ip_PinsChannelType)(~((Gpio_Dio_Ip_PinsChannelType)1U << pin));
    8a94:	2201      	movs	r2, #1
    8a96:	9b02      	ldr	r3, [sp, #8]
    8a98:	fa02 f303 	lsl.w	r3, r2, r3
    8a9c:	43db      	mvns	r3, r3
    8a9e:	9a05      	ldr	r2, [sp, #20]
    8aa0:	4013      	ands	r3, r2
    8aa2:	9305      	str	r3, [sp, #20]
    pinsValues |= (Gpio_Dio_Ip_PinsChannelType)((Gpio_Dio_Ip_PinsChannelType)value << pin);
    8aa4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8aa8:	9b02      	ldr	r3, [sp, #8]
    8aaa:	fa02 f303 	lsl.w	r3, r2, r3
    8aae:	9a05      	ldr	r2, [sp, #20]
    8ab0:	4313      	orrs	r3, r2
    8ab2:	9305      	str	r3, [sp, #20]
    base->PDOR = GPIO_PDOR_PDO(pinsValues);
    8ab4:	9b03      	ldr	r3, [sp, #12]
    8ab6:	9a05      	ldr	r2, [sp, #20]
    8ab8:	601a      	str	r2, [r3, #0]
    /* Exit critical region */
    SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00();
    8aba:	f00c fdcb 	bl	15654 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>
}
    8abe:	bf00      	nop
    8ac0:	b007      	add	sp, #28
    8ac2:	f85d fb04 	ldr.w	pc, [sp], #4

00008ac6 <Gpio_Dio_Ip_WritePins>:
void Gpio_Dio_Ip_WritePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    8ac6:	b082      	sub	sp, #8
    8ac8:	9001      	str	r0, [sp, #4]
    8aca:	9100      	str	r1, [sp, #0]
    base->PDOR = GPIO_PDOR_PDO(pins);
    8acc:	9b01      	ldr	r3, [sp, #4]
    8ace:	9a00      	ldr	r2, [sp, #0]
    8ad0:	601a      	str	r2, [r3, #0]
}
    8ad2:	bf00      	nop
    8ad4:	b002      	add	sp, #8
    8ad6:	4770      	bx	lr

00008ad8 <Gpio_Dio_Ip_GetPinsOutput>:
 * that are configured as output will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_GetPinsOutput_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_GetPinsOutput(const GPIO_Type * const base)
{
    8ad8:	b084      	sub	sp, #16
    8ada:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    8adc:	2300      	movs	r3, #0
    8ade:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDOR);
    8ae0:	9b01      	ldr	r3, [sp, #4]
    8ae2:	681b      	ldr	r3, [r3, #0]
    8ae4:	9303      	str	r3, [sp, #12]
    return returnValue;
    8ae6:	9b03      	ldr	r3, [sp, #12]
}
    8ae8:	4618      	mov	r0, r3
    8aea:	b004      	add	sp, #16
    8aec:	4770      	bx	lr

00008aee <Gpio_Dio_Ip_SetPins>:
void Gpio_Dio_Ip_SetPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    8aee:	b082      	sub	sp, #8
    8af0:	9001      	str	r0, [sp, #4]
    8af2:	9100      	str	r1, [sp, #0]
    base->PSOR = GPIO_PSOR_PTSO(pins);
    8af4:	9b01      	ldr	r3, [sp, #4]
    8af6:	9a00      	ldr	r2, [sp, #0]
    8af8:	605a      	str	r2, [r3, #4]
}
    8afa:	bf00      	nop
    8afc:	b002      	add	sp, #8
    8afe:	4770      	bx	lr

00008b00 <Gpio_Dio_Ip_ClearPins>:
void Gpio_Dio_Ip_ClearPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    8b00:	b082      	sub	sp, #8
    8b02:	9001      	str	r0, [sp, #4]
    8b04:	9100      	str	r1, [sp, #0]
    base->PCOR = GPIO_PCOR_PTCO(pins);
    8b06:	9b01      	ldr	r3, [sp, #4]
    8b08:	9a00      	ldr	r2, [sp, #0]
    8b0a:	609a      	str	r2, [r3, #8]
}
    8b0c:	bf00      	nop
    8b0e:	b002      	add	sp, #8
    8b10:	4770      	bx	lr

00008b12 <Gpio_Dio_Ip_TogglePins>:
void Gpio_Dio_Ip_TogglePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    8b12:	b082      	sub	sp, #8
    8b14:	9001      	str	r0, [sp, #4]
    8b16:	9100      	str	r1, [sp, #0]
    base->PTOR = GPIO_PTOR_PTTO(pins);
    8b18:	9b01      	ldr	r3, [sp, #4]
    8b1a:	9a00      	ldr	r2, [sp, #0]
    8b1c:	60da      	str	r2, [r3, #12]
}
    8b1e:	bf00      	nop
    8b20:	b002      	add	sp, #8
    8b22:	4770      	bx	lr

00008b24 <Gpio_Dio_Ip_ReadPins>:
 * configured as input will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_ReadPins_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_ReadPins(const GPIO_Type * const base)
{
    8b24:	b084      	sub	sp, #16
    8b26:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    8b28:	2300      	movs	r3, #0
    8b2a:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDIR);
    8b2c:	9b01      	ldr	r3, [sp, #4]
    8b2e:	691b      	ldr	r3, [r3, #16]
    8b30:	9303      	str	r3, [sp, #12]
    return returnValue;
    8b32:	9b03      	ldr	r3, [sp, #12]
}
    8b34:	4618      	mov	r0, r3
    8b36:	b004      	add	sp, #16
    8b38:	4770      	bx	lr

00008b3a <Gpio_Dio_Ip_ReadPin>:
 * configured as input will have meaningful value.
 *
 * @implements    Gpio_Dio_Ip_ReadPin_Activity
 */
Gpio_Dio_Ip_PinsLevelType Gpio_Dio_Ip_ReadPin(const GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pin)
{
    8b3a:	b084      	sub	sp, #16
    8b3c:	9001      	str	r0, [sp, #4]
    8b3e:	9100      	str	r1, [sp, #0]
    Gpio_Dio_Ip_PinsLevelType returnValue = 0U;
    8b40:	2300      	movs	r3, #0
    8b42:	f88d 300f 	strb.w	r3, [sp, #15]
    returnValue  = (Gpio_Dio_Ip_PinsLevelType)(((base->PDIR)&((uint32)1<<pin))>>(pin));
    8b46:	9b01      	ldr	r3, [sp, #4]
    8b48:	691a      	ldr	r2, [r3, #16]
    8b4a:	2101      	movs	r1, #1
    8b4c:	9b00      	ldr	r3, [sp, #0]
    8b4e:	fa01 f303 	lsl.w	r3, r1, r3
    8b52:	401a      	ands	r2, r3
    8b54:	9b00      	ldr	r3, [sp, #0]
    8b56:	fa22 f303 	lsr.w	r3, r2, r3
    8b5a:	f88d 300f 	strb.w	r3, [sp, #15]

    return returnValue;
    8b5e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8b62:	4618      	mov	r0, r3
    8b64:	b004      	add	sp, #16
    8b66:	4770      	bx	lr

00008b68 <Adc_ReportDetError>:
* @return     void
* SWS_Adc_00377
*/
static inline void Adc_ReportDetError(uint8 ServiceId,
                                      uint8 ErrorId)
{
    8b68:	b500      	push	{lr}
    8b6a:	b083      	sub	sp, #12
    8b6c:	4603      	mov	r3, r0
    8b6e:	460a      	mov	r2, r1
    8b70:	f88d 3007 	strb.w	r3, [sp, #7]
    8b74:	4613      	mov	r3, r2
    8b76:	f88d 3006 	strb.w	r3, [sp, #6]
    (void)Det_ReportError((uint16)ADC_MODULE_ID, (uint8)0U, ServiceId, ErrorId);
    8b7a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8b7e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8b82:	2100      	movs	r1, #0
    8b84:	207b      	movs	r0, #123	; 0x7b
    8b86:	f00f fc45 	bl	18414 <Det_ReportError>
}
    8b8a:	bf00      	nop
    8b8c:	b003      	add	sp, #12
    8b8e:	f85d fb04 	ldr.w	pc, [sp], #4

00008b92 <Adc_ReportDetRuntimeError>:
* @return     void
* SWS_Adc_00530
*/
static inline void Adc_ReportDetRuntimeError(uint8 ServiceId,
                                             uint8 ErrorId)
{
    8b92:	b500      	push	{lr}
    8b94:	b083      	sub	sp, #12
    8b96:	4603      	mov	r3, r0
    8b98:	460a      	mov	r2, r1
    8b9a:	f88d 3007 	strb.w	r3, [sp, #7]
    8b9e:	4613      	mov	r3, r2
    8ba0:	f88d 3006 	strb.w	r3, [sp, #6]
    (void)Det_ReportRuntimeError((uint16)ADC_MODULE_ID, (uint8)0U, ServiceId, ErrorId);
    8ba4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8ba8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8bac:	2100      	movs	r1, #0
    8bae:	207b      	movs	r0, #123	; 0x7b
    8bb0:	f00f fc94 	bl	184dc <Det_ReportRuntimeError>
}
    8bb4:	bf00      	nop
    8bb6:	b003      	add	sp, #12
    8bb8:	f85d fb04 	ldr.w	pc, [sp], #4

00008bbc <Adc_ReportValidationError>:
* @return     void
*/
static void Adc_ReportValidationError(Adc_ValidationResultType * Result,
                                      uint8 ServiceId,
                                      uint8 ErrorId)
{
    8bbc:	b500      	push	{lr}
    8bbe:	b083      	sub	sp, #12
    8bc0:	9001      	str	r0, [sp, #4]
    8bc2:	460b      	mov	r3, r1
    8bc4:	f88d 3003 	strb.w	r3, [sp, #3]
    8bc8:	4613      	mov	r3, r2
    8bca:	f88d 3002 	strb.w	r3, [sp, #2]
    Result->EndValidations = TRUE;
    8bce:	9b01      	ldr	r3, [sp, #4]
    8bd0:	2201      	movs	r2, #1
    8bd2:	701a      	strb	r2, [r3, #0]
    Result->ValidParams = (Std_ReturnType)E_NOT_OK;
    8bd4:	9b01      	ldr	r3, [sp, #4]
    8bd6:	2201      	movs	r2, #1
    8bd8:	705a      	strb	r2, [r3, #1]

    Adc_ReportDetError(ServiceId, ErrorId);
    8bda:	f89d 2002 	ldrb.w	r2, [sp, #2]
    8bde:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8be2:	4611      	mov	r1, r2
    8be4:	4618      	mov	r0, r3
    8be6:	f7ff ffbf 	bl	8b68 <Adc_ReportDetError>
}
    8bea:	bf00      	nop
    8bec:	b003      	add	sp, #12
    8bee:	f85d fb04 	ldr.w	pc, [sp], #4

00008bf2 <Adc_ValidateGloballCall>:
* @implements  Adc_ValidateGlobalCall_Activity
*
*/
static inline Std_ReturnType Adc_ValidateGloballCall(uint8 ServiceId,
                                                     uint8 CoreId)
{
    8bf2:	b500      	push	{lr}
    8bf4:	b085      	sub	sp, #20
    8bf6:	4603      	mov	r3, r0
    8bf8:	460a      	mov	r2, r1
    8bfa:	f88d 3007 	strb.w	r3, [sp, #7]
    8bfe:	4613      	mov	r3, r2
    8c00:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    8c04:	2301      	movs	r3, #1
    8c06:	f88d 300f 	strb.w	r3, [sp, #15]

    if (ADC_STATE_UNINIT == Adc_aeGlobalState[CoreId])
    8c0a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8c0e:	4a14      	ldr	r2, [pc, #80]	; (8c60 <Adc_ValidateGloballCall+0x6e>)
    8c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c14:	2b00      	cmp	r3, #0
    8c16:	d10e      	bne.n	8c36 <Adc_ValidateGloballCall+0x44>
    {
        if (ADC_INIT_ID == ServiceId)
    8c18:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8c1c:	2b00      	cmp	r3, #0
    8c1e:	d103      	bne.n	8c28 <Adc_ValidateGloballCall+0x36>
        {
            ValidState = (Std_ReturnType)E_OK;
    8c20:	2300      	movs	r3, #0
    8c22:	f88d 300f 	strb.w	r3, [sp, #15]
    8c26:	e014      	b.n	8c52 <Adc_ValidateGloballCall+0x60>
        }
        else
        {
            /* SWS_Adc_00154 */
            Adc_ReportDetError(ServiceId, (uint8)ADC_E_UNINIT);
    8c28:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8c2c:	210a      	movs	r1, #10
    8c2e:	4618      	mov	r0, r3
    8c30:	f7ff ff9a 	bl	8b68 <Adc_ReportDetError>
    8c34:	e00d      	b.n	8c52 <Adc_ValidateGloballCall+0x60>
        }
    }
    else
    {
        if (ADC_INIT_ID == ServiceId)
    8c36:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8c3a:	2b00      	cmp	r3, #0
    8c3c:	d106      	bne.n	8c4c <Adc_ValidateGloballCall+0x5a>
        {
            /* Error: ADC already initialized */
            /* SWS_Adc_00107 */
            Adc_ReportDetError(ServiceId, (uint8)ADC_E_ALREADY_INITIALIZED);
    8c3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8c42:	210d      	movs	r1, #13
    8c44:	4618      	mov	r0, r3
    8c46:	f7ff ff8f 	bl	8b68 <Adc_ReportDetError>
    8c4a:	e002      	b.n	8c52 <Adc_ValidateGloballCall+0x60>
        }
        else
        {
            ValidState = (Std_ReturnType)E_OK;
    8c4c:	2300      	movs	r3, #0
    8c4e:	f88d 300f 	strb.w	r3, [sp, #15]
        }
    }

    return ValidState;
    8c52:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8c56:	4618      	mov	r0, r3
    8c58:	b005      	add	sp, #20
    8c5a:	f85d fb04 	ldr.w	pc, [sp], #4
    8c5e:	bf00      	nop
    8c60:	1fff8d44 	.word	0x1fff8d44

00008c64 <Adc_ValidatePtrInit>:
*
* @note       Non Reentrant function.
*
*/
static inline Std_ReturnType Adc_ValidatePtrInit(const Adc_ConfigType * ConfigPtr)
{
    8c64:	b500      	push	{lr}
    8c66:	b085      	sub	sp, #20
    8c68:	9001      	str	r0, [sp, #4]
    Std_ReturnType ValidPtr = (Std_ReturnType)E_OK;
    8c6a:	2300      	movs	r3, #0
    8c6c:	f88d 300f 	strb.w	r3, [sp, #15]
#if (ADC_PRECOMPILE_SUPPORT == STD_ON)
    /* ADC344 */
    if (NULL_PTR != ConfigPtr)
#else
    /* ADC343 */
    if (NULL_PTR == ConfigPtr)
    8c70:	9b01      	ldr	r3, [sp, #4]
    8c72:	2b00      	cmp	r3, #0
    8c74:	d106      	bne.n	8c84 <Adc_ValidatePtrInit+0x20>
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
    {
        ValidPtr = (Std_ReturnType)E_NOT_OK;
    8c76:	2301      	movs	r3, #1
    8c78:	f88d 300f 	strb.w	r3, [sp, #15]
        Adc_ReportDetError((uint8)ADC_INIT_ID, (uint8) ADC_E_PARAM_POINTER);
    8c7c:	2114      	movs	r1, #20
    8c7e:	2000      	movs	r0, #0
    8c80:	f7ff ff72 	bl	8b68 <Adc_ReportDetError>
    }
    return ValidPtr;
    8c84:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8c88:	4618      	mov	r0, r3
    8c8a:	b005      	add	sp, #20
    8c8c:	f85d fb04 	ldr.w	pc, [sp], #4

00008c90 <Adc_ValidatePtr>:
* @note       ...
* ADC_VALUEREADGROUP_ID
*/
static inline Std_ReturnType Adc_ValidatePtr(uint8 ServiceId,
                                             const void * PtrVal)
{
    8c90:	b500      	push	{lr}
    8c92:	b085      	sub	sp, #20
    8c94:	4603      	mov	r3, r0
    8c96:	9100      	str	r1, [sp, #0]
    8c98:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType ValidPtr = (Std_ReturnType)E_OK;
    8c9c:	2300      	movs	r3, #0
    8c9e:	f88d 300f 	strb.w	r3, [sp, #15]

    /* SWS_Adc_00458, SWS_Adc_00457, CPR_RTD_00264.adc */
    if (NULL_PTR == PtrVal)
    8ca2:	9b00      	ldr	r3, [sp, #0]
    8ca4:	2b00      	cmp	r3, #0
    8ca6:	d108      	bne.n	8cba <Adc_ValidatePtr+0x2a>
    {
        ValidPtr = (Std_ReturnType)E_NOT_OK;
    8ca8:	2301      	movs	r3, #1
    8caa:	f88d 300f 	strb.w	r3, [sp, #15]
        Adc_ReportDetError(ServiceId, (uint8)ADC_E_PARAM_POINTER);
    8cae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8cb2:	2114      	movs	r1, #20
    8cb4:	4618      	mov	r0, r3
    8cb6:	f7ff ff57 	bl	8b68 <Adc_ReportDetError>
    }

    return ValidPtr;
    8cba:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8cbe:	4618      	mov	r0, r3
    8cc0:	b005      	add	sp, #20
    8cc2:	f85d fb04 	ldr.w	pc, [sp], #4

00008cc6 <Adc_ValidateBufferUninit>:

#if ((ADC_ENABLE_START_STOP_GROUP_API == STD_ON) || (ADC_HW_TRIGGER_API == STD_ON))
static inline void Adc_ValidateBufferUninit(Adc_ValidationResultType * ReturnValue,
                                            uint8 ServiceId,
                                            Adc_GroupType Group)
{
    8cc6:	b500      	push	{lr}
    8cc8:	b083      	sub	sp, #12
    8cca:	9001      	str	r0, [sp, #4]
    8ccc:	460b      	mov	r3, r1
    8cce:	f88d 3003 	strb.w	r3, [sp, #3]
    8cd2:	4613      	mov	r3, r2
    8cd4:	f8ad 3000 	strh.w	r3, [sp]
    switch (ServiceId)
    8cd8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8cdc:	2b02      	cmp	r3, #2
    8cde:	d113      	bne.n	8d08 <Adc_ValidateBufferUninit+0x42>
#if (ADC_HW_TRIGGER_API == STD_ON)
        /* fall-through */
        case ADC_ENABLEHARDWARETRIGGER_ID:
#endif /* ADC_HW_TRIGGER_API == STD_ON */
        {
            if (NULL_PTR == Adc_axGroupStatus[Group].ResultsBufferPtr)
    8ce0:	f8bd 2000 	ldrh.w	r2, [sp]
    8ce4:	490c      	ldr	r1, [pc, #48]	; (8d18 <Adc_ValidateBufferUninit+0x52>)
    8ce6:	4613      	mov	r3, r2
    8ce8:	009b      	lsls	r3, r3, #2
    8cea:	4413      	add	r3, r2
    8cec:	009b      	lsls	r3, r3, #2
    8cee:	440b      	add	r3, r1
    8cf0:	330c      	adds	r3, #12
    8cf2:	681b      	ldr	r3, [r3, #0]
    8cf4:	2b00      	cmp	r3, #0
    8cf6:	d109      	bne.n	8d0c <Adc_ValidateBufferUninit+0x46>
            {
                /* SWS_Adc_00425, SWS_Adc_00424 */
                Adc_ReportValidationError(ReturnValue, ServiceId, (uint8)ADC_E_BUFFER_UNINIT);
    8cf8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8cfc:	2219      	movs	r2, #25
    8cfe:	4619      	mov	r1, r3
    8d00:	9801      	ldr	r0, [sp, #4]
    8d02:	f7ff ff5b 	bl	8bbc <Adc_ReportValidationError>
            }
            break;
    8d06:	e001      	b.n	8d0c <Adc_ValidateBufferUninit+0x46>
        }
        default:
        {
            ; /* no-op */
            break;
    8d08:	bf00      	nop
    8d0a:	e000      	b.n	8d0e <Adc_ValidateBufferUninit+0x48>
            break;
    8d0c:	bf00      	nop
        }
    }
}
    8d0e:	bf00      	nop
    8d10:	b003      	add	sp, #12
    8d12:	f85d fb04 	ldr.w	pc, [sp], #4
    8d16:	bf00      	nop
    8d18:	1fff8d48 	.word	0x1fff8d48

00008d1c <Adc_ValidateTriggerSrc>:
    )
static inline void Adc_ValidateTriggerSrc(Adc_ValidationResultType * ReturnValue,
                                          uint8 ServiceId,
                                          Adc_GroupType Group,
                                          uint8 CoreId)
{
    8d1c:	b500      	push	{lr}
    8d1e:	b085      	sub	sp, #20
    8d20:	9001      	str	r0, [sp, #4]
    8d22:	4608      	mov	r0, r1
    8d24:	4611      	mov	r1, r2
    8d26:	461a      	mov	r2, r3
    8d28:	4603      	mov	r3, r0
    8d2a:	f88d 3003 	strb.w	r3, [sp, #3]
    8d2e:	460b      	mov	r3, r1
    8d30:	f8ad 3000 	strh.w	r3, [sp]
    8d34:	4613      	mov	r3, r2
    8d36:	f88d 3002 	strb.w	r3, [sp, #2]
    /* Get the mapping index of group in the current partition */
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    8d3a:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8d3e:	4a17      	ldr	r2, [pc, #92]	; (8d9c <Adc_ValidateTriggerSrc+0x80>)
    8d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d44:	68da      	ldr	r2, [r3, #12]
    8d46:	f8bd 3000 	ldrh.w	r3, [sp]
    8d4a:	005b      	lsls	r3, r3, #1
    8d4c:	4413      	add	r3, r2
    8d4e:	881b      	ldrh	r3, [r3, #0]
    8d50:	f8ad 300e 	strh.w	r3, [sp, #14]

    switch (ServiceId)
    8d54:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8d58:	3b02      	subs	r3, #2
    8d5a:	2b01      	cmp	r3, #1
    8d5c:	d816      	bhi.n	8d8c <Adc_ValidateTriggerSrc+0x70>
#if (ADC_ENABLE_CH_DISABLE_CH_NONAUTO_API == STD_ON)
        case ADC_ENABLE_CHANNEL_ID:
        case ADC_DISABLE_CHANNEL_ID:
#endif /* ADC_ENABLE_CH_DISABLE_CH_NONAUTO_API == STD_ON */
        {
            if (ADC_TRIGG_SRC_SW != Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    8d5e:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8d62:	4a0e      	ldr	r2, [pc, #56]	; (8d9c <Adc_ValidateTriggerSrc+0x80>)
    8d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d68:	685a      	ldr	r2, [r3, #4]
    8d6a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8d6e:	2134      	movs	r1, #52	; 0x34
    8d70:	fb01 f303 	mul.w	r3, r1, r3
    8d74:	4413      	add	r3, r2
    8d76:	695b      	ldr	r3, [r3, #20]
    8d78:	2b00      	cmp	r3, #0
    8d7a:	d009      	beq.n	8d90 <Adc_ValidateTriggerSrc+0x74>
            {
                /* SWS_Adc_00164, SWS_Adc_00133 */
                Adc_ReportValidationError(ReturnValue, ServiceId, (uint8)ADC_E_WRONG_TRIGG_SRC);
    8d7c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8d80:	2217      	movs	r2, #23
    8d82:	4619      	mov	r1, r3
    8d84:	9801      	ldr	r0, [sp, #4]
    8d86:	f7ff ff19 	bl	8bbc <Adc_ReportValidationError>
            }
            break;
    8d8a:	e001      	b.n	8d90 <Adc_ValidateTriggerSrc+0x74>
        }
#endif /* ADC_HW_TRIGGER_API == STD_ON */
        default:
        {
            ; /* no-op */
            break;
    8d8c:	bf00      	nop
    8d8e:	e000      	b.n	8d92 <Adc_ValidateTriggerSrc+0x76>
            break;
    8d90:	bf00      	nop
        }
    }
}
    8d92:	bf00      	nop
    8d94:	b005      	add	sp, #20
    8d96:	f85d fb04 	ldr.w	pc, [sp], #4
    8d9a:	bf00      	nop
    8d9c:	1fff8d40 	.word	0x1fff8d40

00008da0 <Adc_ValidateQueueNotFull>:
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
static inline void Adc_ValidateQueueNotFull(Adc_ValidationResultType * ReturnValue,
                                            uint8 ServiceId,
                                            Adc_GroupType Group,
                                            uint8 CoreId)
{
    8da0:	b500      	push	{lr}
    8da2:	b085      	sub	sp, #20
    8da4:	9001      	str	r0, [sp, #4]
    8da6:	4608      	mov	r0, r1
    8da8:	4611      	mov	r1, r2
    8daa:	461a      	mov	r2, r3
    8dac:	4603      	mov	r3, r0
    8dae:	f88d 3003 	strb.w	r3, [sp, #3]
    8db2:	460b      	mov	r3, r1
    8db4:	f8ad 3000 	strh.w	r3, [sp]
    8db8:	4613      	mov	r3, r2
    8dba:	f88d 3002 	strb.w	r3, [sp, #2]
    Adc_GroupType GroupIndex;
    Adc_HwUnitType LogicalHwUnitId = 0U;
    8dbe:	2300      	movs	r3, #0
    8dc0:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Get the mapping index of group in the current partition */
    GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    8dc4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8dc8:	4a21      	ldr	r2, [pc, #132]	; (8e50 <Adc_ValidateQueueNotFull+0xb0>)
    8dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8dce:	68da      	ldr	r2, [r3, #12]
    8dd0:	f8bd 3000 	ldrh.w	r3, [sp]
    8dd4:	005b      	lsls	r3, r3, #1
    8dd6:	4413      	add	r3, r2
    8dd8:	881b      	ldrh	r3, [r3, #0]
    8dda:	f8ad 300c 	strh.w	r3, [sp, #12]
    LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    8dde:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8de2:	4a1b      	ldr	r2, [pc, #108]	; (8e50 <Adc_ValidateQueueNotFull+0xb0>)
    8de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8de8:	685a      	ldr	r2, [r3, #4]
    8dea:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8dee:	2134      	movs	r1, #52	; 0x34
    8df0:	fb01 f303 	mul.w	r3, r1, r3
    8df4:	4413      	add	r3, r2
    8df6:	789b      	ldrb	r3, [r3, #2]
    8df8:	f88d 300f 	strb.w	r3, [sp, #15]

    switch (ServiceId)
    8dfc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8e00:	2b02      	cmp	r3, #2
    8e02:	d11e      	bne.n	8e42 <Adc_ValidateQueueNotFull+0xa2>
    {
        case ADC_STARTGROUPCONVERSION_ID:
        {
            if (ADC_CONV_TYPE_NORMAL == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Type)
    8e04:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8e08:	4a11      	ldr	r2, [pc, #68]	; (8e50 <Adc_ValidateQueueNotFull+0xb0>)
    8e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e0e:	685a      	ldr	r2, [r3, #4]
    8e10:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8e14:	2134      	movs	r1, #52	; 0x34
    8e16:	fb01 f303 	mul.w	r3, r1, r3
    8e1a:	4413      	add	r3, r2
    8e1c:	68db      	ldr	r3, [r3, #12]
    8e1e:	2b00      	cmp	r3, #0
    8e20:	d111      	bne.n	8e46 <Adc_ValidateQueueNotFull+0xa6>
            {
                if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex >= ADC_QUEUE_MAX_DEPTH_MAX)
    8e22:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8e26:	4a0b      	ldr	r2, [pc, #44]	; (8e54 <Adc_ValidateQueueNotFull+0xb4>)
    8e28:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    8e2c:	b29b      	uxth	r3, r3
    8e2e:	2b01      	cmp	r3, #1
    8e30:	d909      	bls.n	8e46 <Adc_ValidateQueueNotFull+0xa6>
                {
                    Adc_ReportValidationError(ReturnValue, ServiceId, (uint8)ADC_E_QUEUE_FULL);
    8e32:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8e36:	2220      	movs	r2, #32
    8e38:	4619      	mov	r1, r3
    8e3a:	9801      	ldr	r0, [sp, #4]
    8e3c:	f7ff febe 	bl	8bbc <Adc_ReportValidationError>
                }
            }
            break;
    8e40:	e001      	b.n	8e46 <Adc_ValidateQueueNotFull+0xa6>
        }

        default:
        {
            ; /* no-op */
            break;
    8e42:	bf00      	nop
    8e44:	e000      	b.n	8e48 <Adc_ValidateQueueNotFull+0xa8>
            break;
    8e46:	bf00      	nop
        }
    }
}
    8e48:	bf00      	nop
    8e4a:	b005      	add	sp, #20
    8e4c:	f85d fb04 	ldr.w	pc, [sp], #4
    8e50:	1fff8d40 	.word	0x1fff8d40
    8e54:	1fff8d70 	.word	0x1fff8d70

00008e58 <Adc_ValidateExtraParams>:
    )
static inline Std_ReturnType Adc_ValidateExtraParams(uint8 ServiceId,
                                                     uint32 ErrorIdList,
                                                     Adc_GroupType Group,
                                                     uint8 CoreId)
{
    8e58:	b500      	push	{lr}
    8e5a:	b085      	sub	sp, #20
    8e5c:	9100      	str	r1, [sp, #0]
    8e5e:	4611      	mov	r1, r2
    8e60:	461a      	mov	r2, r3
    8e62:	4603      	mov	r3, r0
    8e64:	f88d 3007 	strb.w	r3, [sp, #7]
    8e68:	460b      	mov	r3, r1
    8e6a:	f8ad 3004 	strh.w	r3, [sp, #4]
    8e6e:	4613      	mov	r3, r2
    8e70:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_ValidationResultType ValidationStatus;

    ValidationStatus.EndValidations = FALSE;
    8e74:	2300      	movs	r3, #0
    8e76:	f88d 300c 	strb.w	r3, [sp, #12]
    ValidationStatus.ValidParams = (Std_ReturnType)E_OK;
    8e7a:	2300      	movs	r3, #0
    8e7c:	f88d 300d 	strb.w	r3, [sp, #13]

#if ((ADC_ENABLE_START_STOP_GROUP_API == STD_ON) || (ADC_HW_TRIGGER_API == STD_ON))
    if ((0U != (ErrorIdList&ADC_E_BUFFER_UNINIT_LIST)) && (FALSE == ValidationStatus.EndValidations))
    8e80:	9b00      	ldr	r3, [sp, #0]
    8e82:	f003 0301 	and.w	r3, r3, #1
    8e86:	2b00      	cmp	r3, #0
    8e88:	d00e      	beq.n	8ea8 <Adc_ValidateExtraParams+0x50>
    8e8a:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8e8e:	f083 0301 	eor.w	r3, r3, #1
    8e92:	b2db      	uxtb	r3, r3
    8e94:	2b00      	cmp	r3, #0
    8e96:	d007      	beq.n	8ea8 <Adc_ValidateExtraParams+0x50>
    {
        Adc_ValidateBufferUninit(&ValidationStatus, ServiceId, Group);
    8e98:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    8e9c:	f89d 1007 	ldrb.w	r1, [sp, #7]
    8ea0:	ab03      	add	r3, sp, #12
    8ea2:	4618      	mov	r0, r3
    8ea4:	f7ff ff0f 	bl	8cc6 <Adc_ValidateBufferUninit>
    }
#endif
    if ((0U != (ErrorIdList&ADC_E_WRONG_TRIGG_SRC_LIST)) && (FALSE == ValidationStatus.EndValidations))
    8ea8:	9b00      	ldr	r3, [sp, #0]
    8eaa:	f003 0302 	and.w	r3, r3, #2
    8eae:	2b00      	cmp	r3, #0
    8eb0:	d00f      	beq.n	8ed2 <Adc_ValidateExtraParams+0x7a>
    8eb2:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8eb6:	f083 0301 	eor.w	r3, r3, #1
    8eba:	b2db      	uxtb	r3, r3
    8ebc:	2b00      	cmp	r3, #0
    8ebe:	d008      	beq.n	8ed2 <Adc_ValidateExtraParams+0x7a>
    {
       Adc_ValidateTriggerSrc(&ValidationStatus, ServiceId, Group, CoreId);
    8ec0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8ec4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    8ec8:	f89d 1007 	ldrb.w	r1, [sp, #7]
    8ecc:	a803      	add	r0, sp, #12
    8ece:	f7ff ff25 	bl	8d1c <Adc_ValidateTriggerSrc>
    }
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
    if ((0U != (ErrorIdList&ADC_E_QUEUE_FULL_LIST)) && (FALSE == ValidationStatus.EndValidations))
    8ed2:	9b00      	ldr	r3, [sp, #0]
    8ed4:	f003 0304 	and.w	r3, r3, #4
    8ed8:	2b00      	cmp	r3, #0
    8eda:	d00f      	beq.n	8efc <Adc_ValidateExtraParams+0xa4>
    8edc:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8ee0:	f083 0301 	eor.w	r3, r3, #1
    8ee4:	b2db      	uxtb	r3, r3
    8ee6:	2b00      	cmp	r3, #0
    8ee8:	d008      	beq.n	8efc <Adc_ValidateExtraParams+0xa4>
    {
        Adc_ValidateQueueNotFull(&ValidationStatus, ServiceId, Group, CoreId);
    8eea:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8eee:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    8ef2:	f89d 1007 	ldrb.w	r1, [sp, #7]
    8ef6:	a803      	add	r0, sp, #12
    8ef8:	f7ff ff52 	bl	8da0 <Adc_ValidateQueueNotFull>
    {
        Adc_ValidateEnableDisbleGroupList(&ValidationStatus, ServiceId, Group, CoreId);
    }
#endif /* ADC_ENABLE_CH_DISABLE_CH_NONAUTO_API == STD_ON */

    return ValidationStatus.ValidParams;
    8efc:	f89d 300d 	ldrb.w	r3, [sp, #13]
}
    8f00:	4618      	mov	r0, r3
    8f02:	b005      	add	sp, #20
    8f04:	f85d fb04 	ldr.w	pc, [sp], #4

00008f08 <Adc_EndValidateGloballCall>:
* @return void
*/
static inline void Adc_EndValidateGloballCall(Std_ReturnType ValidCall,
                                              uint8 ServiceId,
                                              uint8 CoreId)
{
    8f08:	b082      	sub	sp, #8
    8f0a:	4603      	mov	r3, r0
    8f0c:	f88d 3007 	strb.w	r3, [sp, #7]
    8f10:	460b      	mov	r3, r1
    8f12:	f88d 3006 	strb.w	r3, [sp, #6]
    8f16:	4613      	mov	r3, r2
    8f18:	f88d 3005 	strb.w	r3, [sp, #5]
    if ((Std_ReturnType)E_OK == ValidCall)
    8f1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8f20:	2b00      	cmp	r3, #0
    8f22:	d110      	bne.n	8f46 <Adc_EndValidateGloballCall+0x3e>
    {
        if (ADC_DEINIT_ID == ServiceId)
    8f24:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8f28:	2b01      	cmp	r3, #1
    8f2a:	d106      	bne.n	8f3a <Adc_EndValidateGloballCall+0x32>
        {
            Adc_aeGlobalState[CoreId] = ADC_STATE_UNINIT;
    8f2c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8f30:	4a06      	ldr	r2, [pc, #24]	; (8f4c <Adc_EndValidateGloballCall+0x44>)
    8f32:	2100      	movs	r1, #0
    8f34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        else
        {
            Adc_aeGlobalState[CoreId] = ADC_STATE_IDLE;
        }
    }
}
    8f38:	e005      	b.n	8f46 <Adc_EndValidateGloballCall+0x3e>
            Adc_aeGlobalState[CoreId] = ADC_STATE_IDLE;
    8f3a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8f3e:	4a03      	ldr	r2, [pc, #12]	; (8f4c <Adc_EndValidateGloballCall+0x44>)
    8f40:	2102      	movs	r1, #2
    8f42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    8f46:	bf00      	nop
    8f48:	b002      	add	sp, #8
    8f4a:	4770      	bx	lr
    8f4c:	1fff8d44 	.word	0x1fff8d44

00008f50 <Adc_ValidateNotBusyNoQueue>:
* @retval     E_OK:           The call means that unit is not busy
* @retval     E_NOT_OK:       The call means that unit is busy
*/
static inline Std_ReturnType Adc_ValidateNotBusyNoQueue(Adc_HwUnitType Unit,
                                                        uint8 ServiceId)
{
    8f50:	b500      	push	{lr}
    8f52:	b085      	sub	sp, #20
    8f54:	4603      	mov	r3, r0
    8f56:	460a      	mov	r2, r1
    8f58:	f88d 3007 	strb.w	r3, [sp, #7]
    8f5c:	4613      	mov	r3, r2
    8f5e:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    8f62:	2300      	movs	r3, #0
    8f64:	f88d 300f 	strb.w	r3, [sp, #15]
#if (ADC_HW_TRIGGER_API == STD_ON)
    Adc_GroupType OngoingHwGroupId;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    const Adc_QueueIndexType NoGroupsInSwNormalQueue = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    8f68:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8f6c:	4a0b      	ldr	r2, [pc, #44]	; (8f9c <Adc_ValidateNotBusyNoQueue+0x4c>)
    8f6e:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    8f72:	f8ad 300c 	strh.w	r3, [sp, #12]
#if (ADC_HW_TRIGGER_API == STD_ON)
    OngoingHwGroupId = Adc_axUnitStatus[Unit].OngoingHwGroup;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    /* CPR_RTD_00035.adc, CPR_RTD_00325.adc, CPR_RTD_00326.adc, CPR_RTD_00327.adc */
    /* Check for ongoing conversions */
    if ((NoGroupsInSwNormalQueue > (Adc_QueueIndexType)0U)
    8f76:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8f7a:	2b00      	cmp	r3, #0
    8f7c:	d008      	beq.n	8f90 <Adc_ValidateNotBusyNoQueue+0x40>
        || (OngoingHwGroupId != ADC_INVALID_HW_GROUP_ID)
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
       )
    {
        /* SWS_Adc_00321, SWS_Adc_00346, SWS_Adc_00426 */
        Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
    8f7e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8f82:	210b      	movs	r1, #11
    8f84:	4618      	mov	r0, r3
    8f86:	f7ff fe04 	bl	8b92 <Adc_ReportDetRuntimeError>
        ErrorFound = (Std_ReturnType)E_NOT_OK;
    8f8a:	2301      	movs	r3, #1
    8f8c:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return ErrorFound;
    8f90:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8f94:	4618      	mov	r0, r3
    8f96:	b005      	add	sp, #20
    8f98:	f85d fb04 	ldr.w	pc, [sp], #4
    8f9c:	1fff8d70 	.word	0x1fff8d70

00008fa0 <Adc_ValidateNotBusyNoPrio>:
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateNotBusyNoPrio(Adc_GroupType Group,
                                                       boolean Implicitly,
                                                       uint8 CoreId)
{
    8fa0:	b500      	push	{lr}
    8fa2:	b085      	sub	sp, #20
    8fa4:	4603      	mov	r3, r0
    8fa6:	f8ad 3006 	strh.w	r3, [sp, #6]
    8faa:	460b      	mov	r3, r1
    8fac:	f88d 3005 	strb.w	r3, [sp, #5]
    8fb0:	4613      	mov	r3, r2
    8fb2:	f88d 3004 	strb.w	r3, [sp, #4]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    8fb6:	2301      	movs	r3, #1
    8fb8:	f88d 300f 	strb.w	r3, [sp, #15]
    ValidState =  Adc_ValidateNotBusyNoQueue(LogicalHwUnitId, ADC_STARTGROUPCONVERSION_ID);

    (void)Implicitly;
    (void)Group;
#else /* ADC_ENABLE_QUEUING == STD_ON */
    Conversion = Adc_axGroupStatus[Group].Conversion;
    8fbc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8fc0:	4917      	ldr	r1, [pc, #92]	; (9020 <Adc_ValidateNotBusyNoPrio+0x80>)
    8fc2:	4613      	mov	r3, r2
    8fc4:	009b      	lsls	r3, r3, #2
    8fc6:	4413      	add	r3, r2
    8fc8:	009b      	lsls	r3, r3, #2
    8fca:	440b      	add	r3, r1
    8fcc:	681b      	ldr	r3, [r3, #0]
    8fce:	9302      	str	r3, [sp, #8]
    /* SWS_Adc_00351 */
    if ((FALSE == Implicitly) && (ADC_IDLE != Conversion))
    8fd0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8fd4:	f083 0301 	eor.w	r3, r3, #1
    8fd8:	b2db      	uxtb	r3, r3
    8fda:	2b00      	cmp	r3, #0
    8fdc:	d007      	beq.n	8fee <Adc_ValidateNotBusyNoPrio+0x4e>
    8fde:	9b02      	ldr	r3, [sp, #8]
    8fe0:	2b00      	cmp	r3, #0
    8fe2:	d004      	beq.n	8fee <Adc_ValidateNotBusyNoPrio+0x4e>
    {
        Adc_ReportDetRuntimeError((uint8)ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    8fe4:	210b      	movs	r1, #11
    8fe6:	2002      	movs	r0, #2
    8fe8:	f7ff fdd3 	bl	8b92 <Adc_ReportDetRuntimeError>
    8fec:	e011      	b.n	9012 <Adc_ValidateNotBusyNoPrio+0x72>
    }
    /* SWS_Adc_00428 */
    else if ((TRUE == Implicitly) && (ADC_IDLE != Conversion) && \
    8fee:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8ff2:	2b00      	cmp	r3, #0
    8ff4:	d00a      	beq.n	900c <Adc_ValidateNotBusyNoPrio+0x6c>
    8ff6:	9b02      	ldr	r3, [sp, #8]
    8ff8:	2b00      	cmp	r3, #0
    8ffa:	d007      	beq.n	900c <Adc_ValidateNotBusyNoPrio+0x6c>
    8ffc:	9b02      	ldr	r3, [sp, #8]
    8ffe:	2b03      	cmp	r3, #3
    9000:	d004      	beq.n	900c <Adc_ValidateNotBusyNoPrio+0x6c>
             (ADC_STREAM_COMPLETED != Conversion) \
            )
    {
        Adc_ReportDetRuntimeError((uint8)ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    9002:	210b      	movs	r1, #11
    9004:	2002      	movs	r0, #2
    9006:	f7ff fdc4 	bl	8b92 <Adc_ReportDetRuntimeError>
    900a:	e002      	b.n	9012 <Adc_ValidateNotBusyNoPrio+0x72>
    }
    else
    {
        ValidState = (Std_ReturnType)E_OK;
    900c:	2300      	movs	r3, #0
    900e:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    (void)CoreId;
#endif /* ADC_ENABLE_QUEUING */

    return ValidState;
    9012:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    9016:	4618      	mov	r0, r3
    9018:	b005      	add	sp, #20
    901a:	f85d fb04 	ldr.w	pc, [sp], #4
    901e:	bf00      	nop
    9020:	1fff8d48 	.word	0x1fff8d48

00009024 <Adc_ValidateCheckGroupNotConversion>:
* @retval       E_OK:           The call means that at least one group is not busy
* @retval       E_NOT_OK:       The call means that at least one group is busy
*/
static inline Std_ReturnType Adc_ValidateCheckGroupNotConversion(uint8 ServiceId,
                                                                 uint8 CoreId)
{
    9024:	b500      	push	{lr}
    9026:	b087      	sub	sp, #28
    9028:	4603      	mov	r3, r0
    902a:	460a      	mov	r2, r1
    902c:	f88d 3007 	strb.w	r3, [sp, #7]
    9030:	4613      	mov	r3, r2
    9032:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_StatusType Conversion;
    Adc_GroupType GroupIter;
    Adc_GroupType GroupId;
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    9036:	2300      	movs	r3, #0
    9038:	f88d 3015 	strb.w	r3, [sp, #21]

    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    903c:	2300      	movs	r3, #0
    903e:	f8ad 3016 	strh.w	r3, [sp, #22]
    9042:	e02c      	b.n	909e <Adc_ValidateCheckGroupNotConversion+0x7a>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIter].GroupId;
    9044:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9048:	4a1d      	ldr	r2, [pc, #116]	; (90c0 <Adc_ValidateCheckGroupNotConversion+0x9c>)
    904a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    904e:	685a      	ldr	r2, [r3, #4]
    9050:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    9054:	2134      	movs	r1, #52	; 0x34
    9056:	fb01 f303 	mul.w	r3, r1, r3
    905a:	4413      	add	r3, r2
    905c:	881b      	ldrh	r3, [r3, #0]
    905e:	f8ad 3012 	strh.w	r3, [sp, #18]
        Conversion = Adc_axGroupStatus[GroupId].Conversion;
    9062:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    9066:	4917      	ldr	r1, [pc, #92]	; (90c4 <Adc_ValidateCheckGroupNotConversion+0xa0>)
    9068:	4613      	mov	r3, r2
    906a:	009b      	lsls	r3, r3, #2
    906c:	4413      	add	r3, r2
    906e:	009b      	lsls	r3, r3, #2
    9070:	440b      	add	r3, r1
    9072:	681b      	ldr	r3, [r3, #0]
    9074:	9303      	str	r3, [sp, #12]
        /*  Check if ADC is still converting */
        /* SWS_Adc_00112 */
        if ((ADC_IDLE != Conversion) && (ADC_STREAM_COMPLETED != Conversion))
    9076:	9b03      	ldr	r3, [sp, #12]
    9078:	2b00      	cmp	r3, #0
    907a:	d00b      	beq.n	9094 <Adc_ValidateCheckGroupNotConversion+0x70>
    907c:	9b03      	ldr	r3, [sp, #12]
    907e:	2b03      	cmp	r3, #3
    9080:	d008      	beq.n	9094 <Adc_ValidateCheckGroupNotConversion+0x70>
        {
            Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
    9082:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9086:	210b      	movs	r1, #11
    9088:	4618      	mov	r0, r3
    908a:	f7ff fd82 	bl	8b92 <Adc_ReportDetRuntimeError>
            ErrorFound = (Std_ReturnType)E_NOT_OK;
    908e:	2301      	movs	r3, #1
    9090:	f88d 3015 	strb.w	r3, [sp, #21]
    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    9094:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    9098:	3301      	adds	r3, #1
    909a:	f8ad 3016 	strh.w	r3, [sp, #22]
    909e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    90a2:	4a07      	ldr	r2, [pc, #28]	; (90c0 <Adc_ValidateCheckGroupNotConversion+0x9c>)
    90a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90a8:	891b      	ldrh	r3, [r3, #8]
    90aa:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    90ae:	429a      	cmp	r2, r3
    90b0:	d3c8      	bcc.n	9044 <Adc_ValidateCheckGroupNotConversion+0x20>
        }
    }
    return ErrorFound;
    90b2:	f89d 3015 	ldrb.w	r3, [sp, #21]
}
    90b6:	4618      	mov	r0, r3
    90b8:	b007      	add	sp, #28
    90ba:	f85d fb04 	ldr.w	pc, [sp], #4
    90be:	bf00      	nop
    90c0:	1fff8d40 	.word	0x1fff8d40
    90c4:	1fff8d48 	.word	0x1fff8d48

000090c8 <Adc_ValidateDeInitNotBusy>:
* @return     Std_ReturnType  Standard return type.
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateDeInitNotBusy(uint8 CoreId)
{
    90c8:	b500      	push	{lr}
    90ca:	b085      	sub	sp, #20
    90cc:	4603      	mov	r3, r0
    90ce:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    90d2:	2300      	movs	r3, #0
    90d4:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    90d8:	2301      	movs	r3, #1
    90da:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    90de:	2300      	movs	r3, #0
    90e0:	f88d 300d 	strb.w	r3, [sp, #13]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    90e4:	2300      	movs	r3, #0
    90e6:	f88d 300d 	strb.w	r3, [sp, #13]
    90ea:	e01d      	b.n	9128 <Adc_ValidateDeInitNotBusy+0x60>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    90ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    90f0:	4a1b      	ldr	r2, [pc, #108]	; (9160 <Adc_ValidateDeInitNotBusy+0x98>)
    90f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90f6:	681a      	ldr	r2, [r3, #0]
    90f8:	f89d 300d 	ldrb.w	r3, [sp, #13]
    90fc:	4413      	add	r3, r2
    90fe:	7f9b      	ldrb	r3, [r3, #30]
    9100:	2b01      	cmp	r3, #1
    9102:	d10c      	bne.n	911e <Adc_ValidateDeInitNotBusy+0x56>
        {
            ErrorFound = Adc_ValidateNotBusyNoQueue(LogicalHwUnitId, ADC_DEINIT_ID);
    9104:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9108:	2101      	movs	r1, #1
    910a:	4618      	mov	r0, r3
    910c:	f7ff ff20 	bl	8f50 <Adc_ValidateNotBusyNoQueue>
    9110:	4603      	mov	r3, r0
    9112:	f88d 300f 	strb.w	r3, [sp, #15]
            if ((Std_ReturnType)E_NOT_OK == ErrorFound)
    9116:	f89d 300f 	ldrb.w	r3, [sp, #15]
    911a:	2b01      	cmp	r3, #1
    911c:	d009      	beq.n	9132 <Adc_ValidateDeInitNotBusy+0x6a>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    911e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9122:	3301      	adds	r3, #1
    9124:	f88d 300d 	strb.w	r3, [sp, #13]
    9128:	f89d 300d 	ldrb.w	r3, [sp, #13]
    912c:	2b01      	cmp	r3, #1
    912e:	d9dd      	bls.n	90ec <Adc_ValidateDeInitNotBusy+0x24>
    9130:	e000      	b.n	9134 <Adc_ValidateDeInitNotBusy+0x6c>
            {
                break;
    9132:	bf00      	nop
            }
        }
    }
    if ((Std_ReturnType)E_OK == ErrorFound)
    9134:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9138:	2b00      	cmp	r3, #0
    913a:	d10b      	bne.n	9154 <Adc_ValidateDeInitNotBusy+0x8c>
    {
        if ((Std_ReturnType)E_OK == Adc_ValidateCheckGroupNotConversion(ADC_DEINIT_ID, CoreId))
    913c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9140:	4619      	mov	r1, r3
    9142:	2001      	movs	r0, #1
    9144:	f7ff ff6e 	bl	9024 <Adc_ValidateCheckGroupNotConversion>
    9148:	4603      	mov	r3, r0
    914a:	2b00      	cmp	r3, #0
    914c:	d102      	bne.n	9154 <Adc_ValidateDeInitNotBusy+0x8c>
        {
            ValidState = (Std_ReturnType)E_OK;
    914e:	2300      	movs	r3, #0
    9150:	f88d 300e 	strb.w	r3, [sp, #14]
        }
    }

    return ValidState;
    9154:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    9158:	4618      	mov	r0, r3
    915a:	b005      	add	sp, #20
    915c:	f85d fb04 	ldr.w	pc, [sp], #4
    9160:	1fff8d40 	.word	0x1fff8d40

00009164 <Adc_ValidateSetupBufferNotBusy>:
* @return     Std_ReturnType  Standard return type.
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateSetupBufferNotBusy(Adc_GroupType Group)
{
    9164:	b500      	push	{lr}
    9166:	b085      	sub	sp, #20
    9168:	4603      	mov	r3, r0
    916a:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    916e:	2301      	movs	r3, #1
    9170:	f88d 300f 	strb.w	r3, [sp, #15]

    if (ADC_IDLE != Adc_axGroupStatus[Group].Conversion)
    9174:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9178:	490b      	ldr	r1, [pc, #44]	; (91a8 <Adc_ValidateSetupBufferNotBusy+0x44>)
    917a:	4613      	mov	r3, r2
    917c:	009b      	lsls	r3, r3, #2
    917e:	4413      	add	r3, r2
    9180:	009b      	lsls	r3, r3, #2
    9182:	440b      	add	r3, r1
    9184:	681b      	ldr	r3, [r3, #0]
    9186:	2b00      	cmp	r3, #0
    9188:	d004      	beq.n	9194 <Adc_ValidateSetupBufferNotBusy+0x30>
    {
        /* SWS_Adc_00433 */
        Adc_ReportDetRuntimeError(ADC_SETUPRESULTBUFFER_ID, (uint8)ADC_E_BUSY);
    918a:	210b      	movs	r1, #11
    918c:	200c      	movs	r0, #12
    918e:	f7ff fd00 	bl	8b92 <Adc_ReportDetRuntimeError>
    9192:	e002      	b.n	919a <Adc_ValidateSetupBufferNotBusy+0x36>
    }
    else
    {
        ValidState = (Std_ReturnType)E_OK;
    9194:	2300      	movs	r3, #0
    9196:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return ValidState;
    919a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    919e:	4618      	mov	r0, r3
    91a0:	b005      	add	sp, #20
    91a2:	f85d fb04 	ldr.w	pc, [sp], #4
    91a6:	bf00      	nop
    91a8:	1fff8d48 	.word	0x1fff8d48

000091ac <Adc_ValidateStateStartGroupConvNotBusy>:
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateStateStartGroupConvNotBusy(Adc_GroupType Group,
                                                                    uint8 CoreId)
{
    91ac:	b500      	push	{lr}
    91ae:	b085      	sub	sp, #20
    91b0:	4603      	mov	r3, r0
    91b2:	460a      	mov	r2, r1
    91b4:	f8ad 3006 	strh.w	r3, [sp, #6]
    91b8:	4613      	mov	r3, r2
    91ba:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex;
    Std_ReturnType ValidState = (Std_ReturnType)E_OK;
    91be:	2300      	movs	r3, #0
    91c0:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean Implicitly = FALSE;
    91c4:	2300      	movs	r3, #0
    91c6:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType HwGroupId;
    Adc_GroupConvType TypeHwGroup;
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */

    /* Get the mapping index of group in the current partition */
    GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    91ca:	f89d 3005 	ldrb.w	r3, [sp, #5]
    91ce:	4a32      	ldr	r2, [pc, #200]	; (9298 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    91d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91d4:	68da      	ldr	r2, [r3, #12]
    91d6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    91da:	005b      	lsls	r3, r3, #1
    91dc:	4413      	add	r3, r2
    91de:	881b      	ldrh	r3, [r3, #0]
    91e0:	f8ad 300c 	strh.w	r3, [sp, #12]
    if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    91e4:	f89d 3005 	ldrb.w	r3, [sp, #5]
    91e8:	4a2b      	ldr	r2, [pc, #172]	; (9298 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    91ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91ee:	685a      	ldr	r2, [r3, #4]
    91f0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    91f4:	2134      	movs	r1, #52	; 0x34
    91f6:	fb01 f303 	mul.w	r3, r1, r3
    91fa:	4413      	add	r3, r2
    91fc:	689b      	ldr	r3, [r3, #8]
    91fe:	2b00      	cmp	r3, #0
    9200:	d02c      	beq.n	925c <Adc_ValidateStateStartGroupConvNotBusy+0xb0>
        ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    9202:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9206:	4a24      	ldr	r2, [pc, #144]	; (9298 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    9208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    920c:	685a      	ldr	r2, [r3, #4]
    920e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9212:	2134      	movs	r1, #52	; 0x34
    9214:	fb01 f303 	mul.w	r3, r1, r3
    9218:	4413      	add	r3, r2
    921a:	689b      	ldr	r3, [r3, #8]
    if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    921c:	2b01      	cmp	r3, #1
    921e:	d120      	bne.n	9262 <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    9220:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9224:	4a1c      	ldr	r2, [pc, #112]	; (9298 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    9226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    922a:	685a      	ldr	r2, [r3, #4]
    922c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9230:	2134      	movs	r1, #52	; 0x34
    9232:	fb01 f303 	mul.w	r3, r1, r3
    9236:	4413      	add	r3, r2
    9238:	685b      	ldr	r3, [r3, #4]
        ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    923a:	2b01      	cmp	r3, #1
    923c:	d111      	bne.n	9262 <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode)
    923e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9242:	4a15      	ldr	r2, [pc, #84]	; (9298 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    9244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9248:	685a      	ldr	r2, [r3, #4]
    924a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    924e:	2134      	movs	r1, #52	; 0x34
    9250:	fb01 f303 	mul.w	r3, r1, r3
    9254:	4413      	add	r3, r2
    9256:	699b      	ldr	r3, [r3, #24]
        (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    9258:	2b00      	cmp	r3, #0
    925a:	d102      	bne.n	9262 <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        )
       )
    {
        /* The current group can be implicitly stopped */
        Implicitly = TRUE;
    925c:	2301      	movs	r3, #1
    925e:	f88d 300e 	strb.w	r3, [sp, #14]
    {
        ValidState = (Std_ReturnType)E_NOT_OK;
    }
#endif /* (ADC_ENABLE_CTU_CONTROL_MODE_API == STD_ON) */

    if ((Std_ReturnType)E_NOT_OK == ValidState)
    9262:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9266:	2b01      	cmp	r3, #1
    9268:	d104      	bne.n	9274 <Adc_ValidateStateStartGroupConvNotBusy+0xc8>
    {
        Adc_ReportDetRuntimeError(ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    926a:	210b      	movs	r1, #11
    926c:	2002      	movs	r0, #2
    926e:	f7ff fc90 	bl	8b92 <Adc_ReportDetRuntimeError>
    9272:	e00b      	b.n	928c <Adc_ValidateStateStartGroupConvNotBusy+0xe0>
    }
    else
    {
#if (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE)
        ValidState = Adc_ValidateNotBusyNoPrio(Group, Implicitly, CoreId);
    9274:	f89d 2005 	ldrb.w	r2, [sp, #5]
    9278:	f89d 100e 	ldrb.w	r1, [sp, #14]
    927c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9280:	4618      	mov	r0, r3
    9282:	f7ff fe8d 	bl	8fa0 <Adc_ValidateNotBusyNoPrio>
    9286:	4603      	mov	r3, r0
    9288:	f88d 300f 	strb.w	r3, [sp, #15]
#else /* ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE */
        ValidState = Adc_ValidateNotBusyWithPrio(Group, Implicitly, CoreId);
#endif  /* ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE */
    }
    return ValidState;
    928c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    9290:	4618      	mov	r0, r3
    9292:	b005      	add	sp, #20
    9294:	f85d fb04 	ldr.w	pc, [sp], #4
    9298:	1fff8d40 	.word	0x1fff8d40

0000929c <Adc_ValidateStateNotIdle>:
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateStateNotIdle(uint8 ServiceId,
                                                      Adc_GroupType Group,
                                                      uint8 CoreId)
{
    929c:	b500      	push	{lr}
    929e:	b085      	sub	sp, #20
    92a0:	4603      	mov	r3, r0
    92a2:	f88d 3007 	strb.w	r3, [sp, #7]
    92a6:	460b      	mov	r3, r1
    92a8:	f8ad 3004 	strh.w	r3, [sp, #4]
    92ac:	4613      	mov	r3, r2
    92ae:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_OK;
    92b2:	2300      	movs	r3, #0
    92b4:	f88d 300f 	strb.w	r3, [sp, #15]
    SwInjectedQueueIndex = Adc_axUnitStatus[LogicalHwUnitId].SwInjectedQueueIndex;
#else
    (void)CoreId;
#endif /* (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON) */

    switch (ServiceId)
    92b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    92bc:	2b0b      	cmp	r3, #11
    92be:	d03b      	beq.n	9338 <Adc_ValidateStateNotIdle+0x9c>
    92c0:	2b0b      	cmp	r3, #11
    92c2:	dc4e      	bgt.n	9362 <Adc_ValidateStateNotIdle+0xc6>
    92c4:	2b03      	cmp	r3, #3
    92c6:	d022      	beq.n	930e <Adc_ValidateStateNotIdle+0x72>
    92c8:	2b04      	cmp	r3, #4
    92ca:	d14a      	bne.n	9362 <Adc_ValidateStateNotIdle+0xc6>
    {
#if (ADC_READ_GROUP_API == STD_ON)
        case ADC_VALUEREADGROUP_ID:
        {
            if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    92cc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    92d0:	492a      	ldr	r1, [pc, #168]	; (937c <Adc_ValidateStateNotIdle+0xe0>)
    92d2:	4613      	mov	r3, r2
    92d4:	009b      	lsls	r3, r3, #2
    92d6:	4413      	add	r3, r2
    92d8:	009b      	lsls	r3, r3, #2
    92da:	440b      	add	r3, r1
    92dc:	681b      	ldr	r3, [r3, #0]
    92de:	2b00      	cmp	r3, #0
    92e0:	d141      	bne.n	9366 <Adc_ValidateStateNotIdle+0xca>
            {
                if (ADC_NOT_YET_CONVERTED == Adc_axGroupStatus[Group].AlreadyConverted)
    92e2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    92e6:	4925      	ldr	r1, [pc, #148]	; (937c <Adc_ValidateStateNotIdle+0xe0>)
    92e8:	4613      	mov	r3, r2
    92ea:	009b      	lsls	r3, r3, #2
    92ec:	4413      	add	r3, r2
    92ee:	009b      	lsls	r3, r3, #2
    92f0:	440b      	add	r3, r1
    92f2:	3304      	adds	r3, #4
    92f4:	681b      	ldr	r3, [r3, #0]
    92f6:	2b00      	cmp	r3, #0
    92f8:	d135      	bne.n	9366 <Adc_ValidateStateNotIdle+0xca>
                {
                    /* SWS_Adc_00388 */
                    Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    92fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    92fe:	210c      	movs	r1, #12
    9300:	4618      	mov	r0, r3
    9302:	f7ff fc46 	bl	8b92 <Adc_ReportDetRuntimeError>
                    ValidState = (Std_ReturnType)E_NOT_OK;
    9306:	2301      	movs	r3, #1
    9308:	f88d 300f 	strb.w	r3, [sp, #15]
                }
            }
            break;
    930c:	e02b      	b.n	9366 <Adc_ValidateStateNotIdle+0xca>
        }
#endif /* ADC_READ_GROUP_API == STD_ON */
        case ADC_STOPGROUPCONVERSION_ID:
        {
            if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    930e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9312:	491a      	ldr	r1, [pc, #104]	; (937c <Adc_ValidateStateNotIdle+0xe0>)
    9314:	4613      	mov	r3, r2
    9316:	009b      	lsls	r3, r3, #2
    9318:	4413      	add	r3, r2
    931a:	009b      	lsls	r3, r3, #2
    931c:	440b      	add	r3, r1
    931e:	681b      	ldr	r3, [r3, #0]
    9320:	2b00      	cmp	r3, #0
    9322:	d122      	bne.n	936a <Adc_ValidateStateNotIdle+0xce>
            {
                /* SWS_Adc_00241 */
                Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    9324:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9328:	210c      	movs	r1, #12
    932a:	4618      	mov	r0, r3
    932c:	f7ff fc31 	bl	8b92 <Adc_ReportDetRuntimeError>
                ValidState = (Std_ReturnType)E_NOT_OK;
    9330:	2301      	movs	r3, #1
    9332:	f88d 300f 	strb.w	r3, [sp, #15]
                    Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
                    ValidState = (Std_ReturnType)E_NOT_OK;
                }
#endif /* (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON) */
            }
            break;
    9336:	e018      	b.n	936a <Adc_ValidateStateNotIdle+0xce>
            break;
        }
#endif /* ADC_HW_TRIGGER_API == STD_ON */
        case ADC_GETSTREAMLASTPOINTER_ID:
        {
             if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    9338:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    933c:	490f      	ldr	r1, [pc, #60]	; (937c <Adc_ValidateStateNotIdle+0xe0>)
    933e:	4613      	mov	r3, r2
    9340:	009b      	lsls	r3, r3, #2
    9342:	4413      	add	r3, r2
    9344:	009b      	lsls	r3, r3, #2
    9346:	440b      	add	r3, r1
    9348:	681b      	ldr	r3, [r3, #0]
    934a:	2b00      	cmp	r3, #0
    934c:	d10f      	bne.n	936e <Adc_ValidateStateNotIdle+0xd2>
             {
                 /* SWS_Adc_00215 */
                 Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    934e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9352:	210c      	movs	r1, #12
    9354:	4618      	mov	r0, r3
    9356:	f7ff fc1c 	bl	8b92 <Adc_ReportDetRuntimeError>
                 ValidState = (Std_ReturnType)E_NOT_OK;
    935a:	2301      	movs	r3, #1
    935c:	f88d 300f 	strb.w	r3, [sp, #15]
             }
            break;
    9360:	e005      	b.n	936e <Adc_ValidateStateNotIdle+0xd2>
        }
        default:
        {
            ; /* no-op */
            break;
    9362:	bf00      	nop
    9364:	e004      	b.n	9370 <Adc_ValidateStateNotIdle+0xd4>
            break;
    9366:	bf00      	nop
    9368:	e002      	b.n	9370 <Adc_ValidateStateNotIdle+0xd4>
            break;
    936a:	bf00      	nop
    936c:	e000      	b.n	9370 <Adc_ValidateStateNotIdle+0xd4>
            break;
    936e:	bf00      	nop
        }
    }

    return ValidState;
    9370:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    9374:	4618      	mov	r0, r3
    9376:	b005      	add	sp, #20
    9378:	f85d fb04 	ldr.w	pc, [sp], #4
    937c:	1fff8d48 	.word	0x1fff8d48

00009380 <Adc_ValidateCallAndGroup>:
* @implements     Adc_ValidateCallAndGroup_Activity
*/
static inline Std_ReturnType Adc_ValidateCallAndGroup(uint8 ServiceId,
                                                      Adc_GroupType Group,
                                                      uint8 CoreId)
{
    9380:	b500      	push	{lr}
    9382:	b085      	sub	sp, #20
    9384:	4603      	mov	r3, r0
    9386:	f88d 3007 	strb.w	r3, [sp, #7]
    938a:	460b      	mov	r3, r1
    938c:	f8ad 3004 	strh.w	r3, [sp, #4]
    9390:	4613      	mov	r3, r2
    9392:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ValidCallAndGroup = (Std_ReturnType)E_NOT_OK;
    9396:	2301      	movs	r3, #1
    9398:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidCoreId = (Std_ReturnType)E_NOT_OK;
    939c:	2301      	movs	r3, #1
    939e:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType GroupIndex = 0U;
    93a2:	2300      	movs	r3, #0
    93a4:	f8ad 300c 	strh.w	r3, [sp, #12]

    if (NULL_PTR == Adc_apxCfgPtr[CoreId])
    93a8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    93ac:	4a2e      	ldr	r2, [pc, #184]	; (9468 <Adc_ValidateCallAndGroup+0xe8>)
    93ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93b2:	2b00      	cmp	r3, #0
    93b4:	d106      	bne.n	93c4 <Adc_ValidateCallAndGroup+0x44>
    {
        /* SWS_Adc_00300, SWS_Adc_00301, SWS_Adc_00302, SWS_Adc_00299, SWS_Adc_00298, SWS_Adc_00297, SWS_Adc_00296, SWS_Adc_00295, SWS_Adc_00294, SWS_Adc_00434 */
        Adc_ReportDetError(ServiceId, (uint8)ADC_E_UNINIT);
    93b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    93ba:	210a      	movs	r1, #10
    93bc:	4618      	mov	r0, r3
    93be:	f7ff fbd3 	bl	8b68 <Adc_ReportDetError>
    93c2:	e04b      	b.n	945c <Adc_ValidateCallAndGroup+0xdc>
        (void)GroupIndex;
        (void)ValidCoreId;
    }
    else
    {
        ValidCoreId = Adc_CheckCurrentCoreId(Adc_apxCfgPtr[CoreId], CoreId);
    93c4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    93c8:	4a27      	ldr	r2, [pc, #156]	; (9468 <Adc_ValidateCallAndGroup+0xe8>)
    93ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93ce:	f89d 2006 	ldrb.w	r2, [sp, #6]
    93d2:	4611      	mov	r1, r2
    93d4:	4618      	mov	r0, r3
    93d6:	f000 f961 	bl	969c <Adc_CheckCurrentCoreId>
    93da:	4603      	mov	r3, r0
    93dc:	f88d 300e 	strb.w	r3, [sp, #14]
        if ((Std_ReturnType)E_OK == ValidCoreId)
    93e0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    93e4:	2b00      	cmp	r3, #0
    93e6:	d133      	bne.n	9450 <Adc_ValidateCallAndGroup+0xd0>
        {
            if (Group >= ADC_MAX_GROUPS)
    93e8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    93ec:	2b01      	cmp	r3, #1
    93ee:	d906      	bls.n	93fe <Adc_ValidateCallAndGroup+0x7e>
            {
                /* SWS_Adc_00218, SWS_Adc_00225, SWS_Adc_00131, SWS_Adc_00130, SWS_Adc_00129, SWS_Adc_00128, SWS_Adc_00152, SWS_Adc_00126, SWS_Adc_00125, SWS_Adc_00423 */
                Adc_ReportDetError(ServiceId, (uint8)ADC_E_PARAM_GROUP);
    93f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    93f4:	2115      	movs	r1, #21
    93f6:	4618      	mov	r0, r3
    93f8:	f7ff fbb6 	bl	8b68 <Adc_ReportDetError>
    93fc:	e02e      	b.n	945c <Adc_ValidateCallAndGroup+0xdc>
                (void)GroupIndex;
            }
            else
            {
                /* Get the mapping index of group in the current partition */
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    93fe:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9402:	4a19      	ldr	r2, [pc, #100]	; (9468 <Adc_ValidateCallAndGroup+0xe8>)
    9404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9408:	68da      	ldr	r2, [r3, #12]
    940a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    940e:	005b      	lsls	r3, r3, #1
    9410:	4413      	add	r3, r2
    9412:	881b      	ldrh	r3, [r3, #0]
    9414:	f8ad 300c 	strh.w	r3, [sp, #12]
                if (Group != Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].GroupId)
    9418:	f89d 3006 	ldrb.w	r3, [sp, #6]
    941c:	4a12      	ldr	r2, [pc, #72]	; (9468 <Adc_ValidateCallAndGroup+0xe8>)
    941e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9422:	685a      	ldr	r2, [r3, #4]
    9424:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9428:	2134      	movs	r1, #52	; 0x34
    942a:	fb01 f303 	mul.w	r3, r1, r3
    942e:	4413      	add	r3, r2
    9430:	881b      	ldrh	r3, [r3, #0]
    9432:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9436:	429a      	cmp	r2, r3
    9438:	d006      	beq.n	9448 <Adc_ValidateCallAndGroup+0xc8>
                {
                    /* Group doesn't belong to current core */
                    Adc_ReportDetError(ServiceId, (uint8)ADC_E_PARAM_CONFIG);
    943a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    943e:	210e      	movs	r1, #14
    9440:	4618      	mov	r0, r3
    9442:	f7ff fb91 	bl	8b68 <Adc_ReportDetError>
    9446:	e009      	b.n	945c <Adc_ValidateCallAndGroup+0xdc>
                }
                else
                {
                    ValidCallAndGroup = (Std_ReturnType)E_OK;
    9448:	2300      	movs	r3, #0
    944a:	f88d 300f 	strb.w	r3, [sp, #15]
    944e:	e005      	b.n	945c <Adc_ValidateCallAndGroup+0xdc>
            }
        }
        else
        {
            /* CPR_RTD_00420.adc */
            Adc_ReportDetError(ServiceId, (uint8)ADC_E_PARAM_CONFIG);
    9450:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9454:	210e      	movs	r1, #14
    9456:	4618      	mov	r0, r3
    9458:	f7ff fb86 	bl	8b68 <Adc_ReportDetError>
        }
    }

    return ValidCallAndGroup;
    945c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    9460:	4618      	mov	r0, r3
    9462:	b005      	add	sp, #20
    9464:	f85d fb04 	ldr.w	pc, [sp], #4
    9468:	1fff8d40 	.word	0x1fff8d40

0000946c <Adc_ValidateCallAndUnit>:
* @implements     Adc_ValidateCallAndUnit_Activity
*/
static inline Std_ReturnType Adc_ValidateCallAndUnit(uint8 ServiceId,
                                                     Adc_HwUnitType Unit,
                                                     uint8 CoreId)
{
    946c:	b500      	push	{lr}
    946e:	b085      	sub	sp, #20
    9470:	4603      	mov	r3, r0
    9472:	f88d 3007 	strb.w	r3, [sp, #7]
    9476:	460b      	mov	r3, r1
    9478:	f88d 3006 	strb.w	r3, [sp, #6]
    947c:	4613      	mov	r3, r2
    947e:	f88d 3005 	strb.w	r3, [sp, #5]
    Std_ReturnType ValidCallAndUnit = (Std_ReturnType)E_NOT_OK;
    9482:	2301      	movs	r3, #1
    9484:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidCoreId;

    if (NULL_PTR == Adc_apxCfgPtr[CoreId])
    9488:	f89d 3005 	ldrb.w	r3, [sp, #5]
    948c:	4a25      	ldr	r2, [pc, #148]	; (9524 <Adc_ValidateCallAndUnit+0xb8>)
    948e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9492:	2b00      	cmp	r3, #0
    9494:	d106      	bne.n	94a4 <Adc_ValidateCallAndUnit+0x38>
    {
        /* CPR_RTD_00272.adc, CPR_RTD_00273.adc */
        Adc_ReportDetError(ServiceId, (uint8)ADC_E_UNINIT);
    9496:	f89d 3007 	ldrb.w	r3, [sp, #7]
    949a:	210a      	movs	r1, #10
    949c:	4618      	mov	r0, r3
    949e:	f7ff fb63 	bl	8b68 <Adc_ReportDetError>
    94a2:	e039      	b.n	9518 <Adc_ValidateCallAndUnit+0xac>
    }
    else if (Unit >= ADC_IPW_MAX_HW_UNITS_CFG)
    94a4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    94a8:	2b01      	cmp	r3, #1
    94aa:	d906      	bls.n	94ba <Adc_ValidateCallAndUnit+0x4e>
    {
        Adc_ReportDetError(ServiceId, (uint8)ADC_E_PARAM_UNIT);
    94ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    94b0:	2126      	movs	r1, #38	; 0x26
    94b2:	4618      	mov	r0, r3
    94b4:	f7ff fb58 	bl	8b68 <Adc_ReportDetError>
    94b8:	e02e      	b.n	9518 <Adc_ValidateCallAndUnit+0xac>
    }
    else
    {
        ValidCoreId = Adc_CheckCurrentCoreId(Adc_apxCfgPtr[CoreId], CoreId);
    94ba:	f89d 3005 	ldrb.w	r3, [sp, #5]
    94be:	4a19      	ldr	r2, [pc, #100]	; (9524 <Adc_ValidateCallAndUnit+0xb8>)
    94c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94c4:	f89d 2005 	ldrb.w	r2, [sp, #5]
    94c8:	4611      	mov	r1, r2
    94ca:	4618      	mov	r0, r3
    94cc:	f000 f8e6 	bl	969c <Adc_CheckCurrentCoreId>
    94d0:	4603      	mov	r3, r0
    94d2:	f88d 300e 	strb.w	r3, [sp, #14]
        if ((Std_ReturnType)E_OK == ValidCoreId)
    94d6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    94da:	2b00      	cmp	r3, #0
    94dc:	d116      	bne.n	950c <Adc_ValidateCallAndUnit+0xa0>
        {
            if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[Unit] == (uint8)STD_ON) /* HW unit enabled on current partition */
    94de:	f89d 3005 	ldrb.w	r3, [sp, #5]
    94e2:	4a10      	ldr	r2, [pc, #64]	; (9524 <Adc_ValidateCallAndUnit+0xb8>)
    94e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94e8:	681a      	ldr	r2, [r3, #0]
    94ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
    94ee:	4413      	add	r3, r2
    94f0:	7f9b      	ldrb	r3, [r3, #30]
    94f2:	2b01      	cmp	r3, #1
    94f4:	d103      	bne.n	94fe <Adc_ValidateCallAndUnit+0x92>
            {
                ValidCallAndUnit = (Std_ReturnType)E_OK;
    94f6:	2300      	movs	r3, #0
    94f8:	f88d 300f 	strb.w	r3, [sp, #15]
    94fc:	e00c      	b.n	9518 <Adc_ValidateCallAndUnit+0xac>
            }
            else
            {
                Adc_ReportDetError(ServiceId, (uint8)ADC_E_PARAM_CONFIG);
    94fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9502:	210e      	movs	r1, #14
    9504:	4618      	mov	r0, r3
    9506:	f7ff fb2f 	bl	8b68 <Adc_ReportDetError>
    950a:	e005      	b.n	9518 <Adc_ValidateCallAndUnit+0xac>
            }
        }
        else
        {
            /* CPR_RTD_00420.adc */
            Adc_ReportDetError(ServiceId, (uint8)ADC_E_PARAM_CONFIG);
    950c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9510:	210e      	movs	r1, #14
    9512:	4618      	mov	r0, r3
    9514:	f7ff fb28 	bl	8b68 <Adc_ReportDetError>
        }
    }

    return ValidCallAndUnit;
    9518:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    951c:	4618      	mov	r0, r3
    951e:	b005      	add	sp, #20
    9520:	f85d fb04 	ldr.w	pc, [sp], #4
    9524:	1fff8d40 	.word	0x1fff8d40

00009528 <Adc_InitGroupsStatus>:
* @return         void
*
* @pre            Driver must be initialized.
*/
static inline void Adc_InitGroupsStatus(uint8 CoreId)
{
    9528:	b084      	sub	sp, #16
    952a:	4603      	mov	r3, r0
    952c:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_GroupType GroupCnt = 0U;
    9530:	2300      	movs	r3, #0
    9532:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_GroupType GroupId = 0U;
    9536:	2300      	movs	r3, #0
    9538:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Initialize Group Status structures to beginning values */
    for (GroupCnt = 0U; GroupCnt < Adc_apxCfgPtr[CoreId]->GroupCount; GroupCnt++)
    953c:	2300      	movs	r3, #0
    953e:	f8ad 300e 	strh.w	r3, [sp, #14]
    9542:	e049      	b.n	95d8 <Adc_InitGroupsStatus+0xb0>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupCnt].GroupId;
    9544:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9548:	4a2a      	ldr	r2, [pc, #168]	; (95f4 <Adc_InitGroupsStatus+0xcc>)
    954a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    954e:	685a      	ldr	r2, [r3, #4]
    9550:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9554:	2134      	movs	r1, #52	; 0x34
    9556:	fb01 f303 	mul.w	r3, r1, r3
    955a:	4413      	add	r3, r2
    955c:	881b      	ldrh	r3, [r3, #0]
    955e:	f8ad 300c 	strh.w	r3, [sp, #12]
        /* SWS_Adc_00221, SWS_Adc_00307 */
        Adc_axGroupStatus[GroupId].Conversion = ADC_IDLE;
    9562:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9566:	4924      	ldr	r1, [pc, #144]	; (95f8 <Adc_InitGroupsStatus+0xd0>)
    9568:	4613      	mov	r3, r2
    956a:	009b      	lsls	r3, r3, #2
    956c:	4413      	add	r3, r2
    956e:	009b      	lsls	r3, r3, #2
    9570:	440b      	add	r3, r1
    9572:	2200      	movs	r2, #0
    9574:	601a      	str	r2, [r3, #0]
        /* this group was not converted yet */
        Adc_axGroupStatus[GroupId].AlreadyConverted = ADC_NOT_YET_CONVERTED;
    9576:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    957a:	491f      	ldr	r1, [pc, #124]	; (95f8 <Adc_InitGroupsStatus+0xd0>)
    957c:	4613      	mov	r3, r2
    957e:	009b      	lsls	r3, r3, #2
    9580:	4413      	add	r3, r2
    9582:	009b      	lsls	r3, r3, #2
    9584:	440b      	add	r3, r1
    9586:	3304      	adds	r3, #4
    9588:	2200      	movs	r2, #0
    958a:	601a      	str	r2, [r3, #0]

        Adc_axGroupStatus[GroupId].ResultIndex = 0U;
    958c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9590:	4919      	ldr	r1, [pc, #100]	; (95f8 <Adc_InitGroupsStatus+0xd0>)
    9592:	4613      	mov	r3, r2
    9594:	009b      	lsls	r3, r3, #2
    9596:	4413      	add	r3, r2
    9598:	009b      	lsls	r3, r3, #2
    959a:	440b      	add	r3, r1
    959c:	3308      	adds	r3, #8
    959e:	2200      	movs	r2, #0
    95a0:	801a      	strh	r2, [r3, #0]
        Adc_axGroupStatus[GroupId].ResultsBufferPtr = NULL_PTR;
    95a2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    95a6:	4914      	ldr	r1, [pc, #80]	; (95f8 <Adc_InitGroupsStatus+0xd0>)
    95a8:	4613      	mov	r3, r2
    95aa:	009b      	lsls	r3, r3, #2
    95ac:	4413      	add	r3, r2
    95ae:	009b      	lsls	r3, r3, #2
    95b0:	440b      	add	r3, r1
    95b2:	330c      	adds	r3, #12
    95b4:	2200      	movs	r2, #0
    95b6:	601a      	str	r2, [r3, #0]
#ifdef ADC_CURRENT_CHANNEL_USED
        Adc_axGroupStatus[GroupId].CurrentChannel = 0U;
    95b8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    95bc:	490e      	ldr	r1, [pc, #56]	; (95f8 <Adc_InitGroupsStatus+0xd0>)
    95be:	4613      	mov	r3, r2
    95c0:	009b      	lsls	r3, r3, #2
    95c2:	4413      	add	r3, r2
    95c4:	009b      	lsls	r3, r3, #2
    95c6:	440b      	add	r3, r1
    95c8:	3310      	adds	r3, #16
    95ca:	2200      	movs	r2, #0
    95cc:	701a      	strb	r2, [r3, #0]
    for (GroupCnt = 0U; GroupCnt < Adc_apxCfgPtr[CoreId]->GroupCount; GroupCnt++)
    95ce:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    95d2:	3301      	adds	r3, #1
    95d4:	f8ad 300e 	strh.w	r3, [sp, #14]
    95d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    95dc:	4a05      	ldr	r2, [pc, #20]	; (95f4 <Adc_InitGroupsStatus+0xcc>)
    95de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95e2:	891b      	ldrh	r3, [r3, #8]
    95e4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    95e8:	429a      	cmp	r2, r3
    95ea:	d3ab      	bcc.n	9544 <Adc_InitGroupsStatus+0x1c>
        Adc_axRuntimeGroupChannel[GroupId].RuntimeChanMask = 0xFFFFFFFFUL;
#endif /* (ADC_IPW_PDB_AVAILABLE == STD_ON) */
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    }
}
    95ec:	bf00      	nop
    95ee:	bf00      	nop
    95f0:	b004      	add	sp, #16
    95f2:	4770      	bx	lr
    95f4:	1fff8d40 	.word	0x1fff8d40
    95f8:	1fff8d48 	.word	0x1fff8d48

000095fc <Adc_InitUnitStatus>:
* @return         void
*
* @pre            Driver must be initialized.
*/
static inline void Adc_InitUnitStatus(uint8 CoreId)
{
    95fc:	b084      	sub	sp, #16
    95fe:	4603      	mov	r3, r0
    9600:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    9604:	2300      	movs	r3, #0
    9606:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_QueueIndexType QueueIdx = 0U;
    960a:	2300      	movs	r3, #0
    960c:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Loop for all configured hardware units in current partition */
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    9610:	2300      	movs	r3, #0
    9612:	f88d 300f 	strb.w	r3, [sp, #15]
    9616:	e035      	b.n	9684 <Adc_InitUnitStatus+0x88>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    9618:	f89d 3007 	ldrb.w	r3, [sp, #7]
    961c:	4a1d      	ldr	r2, [pc, #116]	; (9694 <Adc_InitUnitStatus+0x98>)
    961e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9622:	681a      	ldr	r2, [r3, #0]
    9624:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9628:	4413      	add	r3, r2
    962a:	7f9b      	ldrb	r3, [r3, #30]
    962c:	2b01      	cmp	r3, #1
    962e:	d124      	bne.n	967a <Adc_InitUnitStatus+0x7e>
        {
            /* Filled slots in the queue */
            Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex = 0U;
    9630:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9634:	4a18      	ldr	r2, [pc, #96]	; (9698 <Adc_InitUnitStatus+0x9c>)
    9636:	2100      	movs	r1, #0
    9638:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            /* Mark all the queue slots as "empty" */
            for (QueueIdx = 0U; QueueIdx < ADC_QUEUE_MAX_DEPTH_MAX; QueueIdx++)
    963c:	2300      	movs	r3, #0
    963e:	f8ad 300c 	strh.w	r3, [sp, #12]
    9642:	e00f      	b.n	9664 <Adc_InitUnitStatus+0x68>
            {
                Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[QueueIdx] = 0U;
    9644:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9648:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    964c:	4912      	ldr	r1, [pc, #72]	; (9698 <Adc_InitUnitStatus+0x9c>)
    964e:	0092      	lsls	r2, r2, #2
    9650:	4413      	add	r3, r2
    9652:	005b      	lsls	r3, r3, #1
    9654:	440b      	add	r3, r1
    9656:	2200      	movs	r2, #0
    9658:	805a      	strh	r2, [r3, #2]
            for (QueueIdx = 0U; QueueIdx < ADC_QUEUE_MAX_DEPTH_MAX; QueueIdx++)
    965a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    965e:	3301      	adds	r3, #1
    9660:	f8ad 300c 	strh.w	r3, [sp, #12]
    9664:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9668:	2b01      	cmp	r3, #1
    966a:	d9eb      	bls.n	9644 <Adc_InitUnitStatus+0x48>
            /* If there is no ongoing HW group then HW trigger capability is disabled */
            Adc_axUnitStatus[LogicalHwUnitId].OngoingHwGroup = ADC_INVALID_HW_GROUP_ID;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */

#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
            Adc_axUnitStatus[LogicalHwUnitId].Sc1Used = 0U;
    966c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9670:	4a09      	ldr	r2, [pc, #36]	; (9698 <Adc_InitUnitStatus+0x9c>)
    9672:	00db      	lsls	r3, r3, #3
    9674:	4413      	add	r3, r2
    9676:	2200      	movs	r2, #0
    9678:	719a      	strb	r2, [r3, #6]
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    967a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    967e:	3301      	adds	r3, #1
    9680:	f88d 300f 	strb.w	r3, [sp, #15]
    9684:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9688:	2b01      	cmp	r3, #1
    968a:	d9c5      	bls.n	9618 <Adc_InitUnitStatus+0x1c>
#if (ADC_DUAL_CLOCK_MODE == STD_ON)
#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
    Adc_aeClockMode[CoreId] = ADC_NORMAL;
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */
}
    968c:	bf00      	nop
    968e:	bf00      	nop
    9690:	b004      	add	sp, #16
    9692:	4770      	bx	lr
    9694:	1fff8d40 	.word	0x1fff8d40
    9698:	1fff8d70 	.word	0x1fff8d70

0000969c <Adc_CheckCurrentCoreId>:
* @retval       E_OK:           CoreId is valid
* @retval       E_NOT_OK:       CoreId is not valid
*/
static inline Std_ReturnType Adc_CheckCurrentCoreId(const Adc_ConfigType * CfgPtr,
                                                    uint8 CoreId)
{
    969c:	b084      	sub	sp, #16
    969e:	9001      	str	r0, [sp, #4]
    96a0:	460b      	mov	r3, r1
    96a2:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 Index = 0U;
    96a6:	2300      	movs	r3, #0
    96a8:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidCoreId = (Std_ReturnType)E_NOT_OK;
    96ac:	2301      	movs	r3, #1
    96ae:	f88d 300e 	strb.w	r3, [sp, #14]

    if (CoreId == CfgPtr->CoreId)
    96b2:	9b01      	ldr	r3, [sp, #4]
    96b4:	7c1b      	ldrb	r3, [r3, #16]
    96b6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    96ba:	429a      	cmp	r2, r3
    96bc:	d11c      	bne.n	96f8 <Adc_CheckCurrentCoreId+0x5c>
    {
        for (Index = 0U; Index < CfgPtr->AssignedPartitionCount; Index++)
    96be:	2300      	movs	r3, #0
    96c0:	f88d 300f 	strb.w	r3, [sp, #15]
    96c4:	e012      	b.n	96ec <Adc_CheckCurrentCoreId+0x50>
        {
            if (CoreId == CfgPtr->AssignmentPartitionPtr[Index])
    96c6:	9b01      	ldr	r3, [sp, #4]
    96c8:	695a      	ldr	r2, [r3, #20]
    96ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
    96ce:	4413      	add	r3, r2
    96d0:	781b      	ldrb	r3, [r3, #0]
    96d2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    96d6:	429a      	cmp	r2, r3
    96d8:	d103      	bne.n	96e2 <Adc_CheckCurrentCoreId+0x46>
            {
                ValidCoreId = (Std_ReturnType)E_OK;
    96da:	2300      	movs	r3, #0
    96dc:	f88d 300e 	strb.w	r3, [sp, #14]
                break;
    96e0:	e00a      	b.n	96f8 <Adc_CheckCurrentCoreId+0x5c>
        for (Index = 0U; Index < CfgPtr->AssignedPartitionCount; Index++)
    96e2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    96e6:	3301      	adds	r3, #1
    96e8:	f88d 300f 	strb.w	r3, [sp, #15]
    96ec:	9b01      	ldr	r3, [sp, #4]
    96ee:	7e1b      	ldrb	r3, [r3, #24]
    96f0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    96f4:	429a      	cmp	r2, r3
    96f6:	d3e6      	bcc.n	96c6 <Adc_CheckCurrentCoreId+0x2a>
            }
        }
    }

    return ValidCoreId;
    96f8:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    96fc:	4618      	mov	r0, r3
    96fe:	b004      	add	sp, #16
    9700:	4770      	bx	lr

00009702 <Adc_UpdateStatusStartConversion>:
* SWS_Adc_00335
*/
static inline void Adc_UpdateStatusStartConversion(const Adc_GroupType Group,
                                                   const Adc_HwUnitType Unit,
                                                   uint8 CoreId)
{
    9702:	b500      	push	{lr}
    9704:	b085      	sub	sp, #20
    9706:	4603      	mov	r3, r0
    9708:	f8ad 3006 	strh.w	r3, [sp, #6]
    970c:	460b      	mov	r3, r1
    970e:	f88d 3005 	strb.w	r3, [sp, #5]
    9712:	4613      	mov	r3, r2
    9714:	f88d 3004 	strb.w	r3, [sp, #4]
#if (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON)
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    /* First available slot in the Queue */
#if ((ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE) || ((ADC_ENABLE_QUEUING == STD_ON) && (ADC_QUEUE_MAX_DEPTH_MAX != 1U)))
    Adc_QueueIndexType QueueIndex = 0U;
    9718:	2300      	movs	r3, #0
    971a:	f8ad 300e 	strh.w	r3, [sp, #14]
#endif
#if (ADC_ENABLE_QUEUING == STD_ON)
    Adc_QueueIndexType SwNormalQueueIndex;
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    971e:	2300      	movs	r3, #0
    9720:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Mark the Group as BUSY when the Group goes to the Queue or gets started */
    /* SWS_Adc_00222 */
    Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    9724:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9728:	493e      	ldr	r1, [pc, #248]	; (9824 <Adc_UpdateStatusStartConversion+0x122>)
    972a:	4613      	mov	r3, r2
    972c:	009b      	lsls	r3, r3, #2
    972e:	4413      	add	r3, r2
    9730:	009b      	lsls	r3, r3, #2
    9732:	440b      	add	r3, r1
    9734:	2201      	movs	r2, #1
    9736:	601a      	str	r2, [r3, #0]
    /* SWS_Adc_00431 */
    Adc_axGroupStatus[Group].ResultIndex = 0U;
    9738:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    973c:	4939      	ldr	r1, [pc, #228]	; (9824 <Adc_UpdateStatusStartConversion+0x122>)
    973e:	4613      	mov	r3, r2
    9740:	009b      	lsls	r3, r3, #2
    9742:	4413      	add	r3, r2
    9744:	009b      	lsls	r3, r3, #2
    9746:	440b      	add	r3, r1
    9748:	3308      	adds	r3, #8
    974a:	2200      	movs	r2, #0
    974c:	801a      	strh	r2, [r3, #0]
            }
        }
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
#else /* ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE */
#if (ADC_ENABLE_QUEUING == STD_ON) && (ADC_QUEUE_MAX_DEPTH_MAX != 1U)
        SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01();
    974e:	f008 f843 	bl	117d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>
        QueueIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    9752:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9756:	4a34      	ldr	r2, [pc, #208]	; (9828 <Adc_UpdateStatusStartConversion+0x126>)
    9758:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    975c:	f8ad 300e 	strh.w	r3, [sp, #14]
        if (QueueIndex > (Adc_QueueIndexType)0U)
    9760:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9764:	2b00      	cmp	r3, #0
    9766:	d016      	beq.n	9796 <Adc_UpdateStatusStartConversion+0x94>
        {
            /* Place the Group in the Queue */
            Adc_axUnitStatus[Unit].SwNormalQueue[QueueIndex] = Group;
    9768:	f89d 2005 	ldrb.w	r2, [sp, #5]
    976c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9770:	492d      	ldr	r1, [pc, #180]	; (9828 <Adc_UpdateStatusStartConversion+0x126>)
    9772:	0092      	lsls	r2, r2, #2
    9774:	4413      	add	r3, r2
    9776:	005b      	lsls	r3, r3, #1
    9778:	440b      	add	r3, r1
    977a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    977e:	805a      	strh	r2, [r3, #2]
            /* Increase the Queue Index */
            Adc_axUnitStatus[Unit].SwNormalQueueIndex++;
    9780:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9784:	4a28      	ldr	r2, [pc, #160]	; (9828 <Adc_UpdateStatusStartConversion+0x126>)
    9786:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    978a:	b292      	uxth	r2, r2
    978c:	3201      	adds	r2, #1
    978e:	b291      	uxth	r1, r2
    9790:	4a25      	ldr	r2, [pc, #148]	; (9828 <Adc_UpdateStatusStartConversion+0x126>)
    9792:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
        }
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    9796:	f008 f84b 	bl	11830 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
#else /* ADC_ENABLE_QUEUING == STD_OFF*/
    /* In this case all the StartConversion should be rejected by DET */
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
#endif /* ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE */

        SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01();
    979a:	f008 f81d 	bl	117d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>
#if (ADC_ENABLE_QUEUING == STD_ON)
        SwNormalQueueIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    979e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    97a2:	4a21      	ldr	r2, [pc, #132]	; (9828 <Adc_UpdateStatusStartConversion+0x126>)
    97a4:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    97a8:	f8ad 300a 	strh.w	r3, [sp, #10]
        /* SWS_Adc_00338, SWS_Adc_00417 */
        if ((Adc_axUnitStatus[Unit].SwNormalQueue[0U] == Group) || (0U == SwNormalQueueIndex))
    97ac:	f89d 3005 	ldrb.w	r3, [sp, #5]
    97b0:	4a1d      	ldr	r2, [pc, #116]	; (9828 <Adc_UpdateStatusStartConversion+0x126>)
    97b2:	00db      	lsls	r3, r3, #3
    97b4:	4413      	add	r3, r2
    97b6:	885b      	ldrh	r3, [r3, #2]
    97b8:	b29b      	uxth	r3, r3
    97ba:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    97be:	429a      	cmp	r2, r3
    97c0:	d003      	beq.n	97ca <Adc_UpdateStatusStartConversion+0xc8>
    97c2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    97c6:	2b00      	cmp	r3, #0
    97c8:	d125      	bne.n	9816 <Adc_UpdateStatusStartConversion+0x114>
        {
            /* No_priorities OR Queue_is_empty */
            /* Indicate a new group was added to the queue */
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
            if (0U == Adc_axUnitStatus[Unit].SwNormalQueueIndex)
    97ca:	f89d 3005 	ldrb.w	r3, [sp, #5]
    97ce:	4a16      	ldr	r2, [pc, #88]	; (9828 <Adc_UpdateStatusStartConversion+0x126>)
    97d0:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    97d4:	b29b      	uxth	r3, r3
    97d6:	2b00      	cmp	r3, #0
    97d8:	d112      	bne.n	9800 <Adc_UpdateStatusStartConversion+0xfe>
            {
                /* Place the Group in the Queue */
                Adc_axUnitStatus[Unit].SwNormalQueue[0U] = Group;
    97da:	f89d 3005 	ldrb.w	r3, [sp, #5]
    97de:	4a12      	ldr	r2, [pc, #72]	; (9828 <Adc_UpdateStatusStartConversion+0x126>)
    97e0:	00db      	lsls	r3, r3, #3
    97e2:	4413      	add	r3, r2
    97e4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    97e8:	805a      	strh	r2, [r3, #2]
                Adc_axUnitStatus[Unit].SwNormalQueueIndex++;
    97ea:	f89d 3005 	ldrb.w	r3, [sp, #5]
    97ee:	4a0e      	ldr	r2, [pc, #56]	; (9828 <Adc_UpdateStatusStartConversion+0x126>)
    97f0:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    97f4:	b292      	uxth	r2, r2
    97f6:	3201      	adds	r2, #1
    97f8:	b291      	uxth	r1, r2
    97fa:	4a0b      	ldr	r2, [pc, #44]	; (9828 <Adc_UpdateStatusStartConversion+0x126>)
    97fc:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            }
            /* exit critical region */
            SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    9800:	f008 f816 	bl	11830 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
            /* ADC will not be running - no ISR can occur now */
            Adc_Ipw_StartNormalConversion(Unit, CoreId);
    9804:	f89d 2004 	ldrb.w	r2, [sp, #4]
    9808:	f89d 3005 	ldrb.w	r3, [sp, #5]
    980c:	4611      	mov	r1, r2
    980e:	4618      	mov	r0, r3
    9810:	f002 fcda 	bl	c1c8 <Adc_Ipw_StartNormalConversion>
    9814:	e002      	b.n	981c <Adc_UpdateStatusStartConversion+0x11a>
#if (ADC_ENABLE_QUEUING == STD_ON)
        }
        else
        {
        /* exit critical region */
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    9816:	f008 f80b 	bl	11830 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
        }
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    }
    (void)TimeOutStatus;
}
    981a:	bf00      	nop
    981c:	bf00      	nop
    981e:	b005      	add	sp, #20
    9820:	f85d fb04 	ldr.w	pc, [sp], #4
    9824:	1fff8d48 	.word	0x1fff8d48
    9828:	1fff8d70 	.word	0x1fff8d70

0000982c <Adc_StopSwGroupConversion>:
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Adc_GroupType Group,
    Adc_HwUnitType Unit,
    uint8 CoreId
)
{
    982c:	b500      	push	{lr}
    982e:	b085      	sub	sp, #20
    9830:	9001      	str	r0, [sp, #4]
    9832:	4608      	mov	r0, r1
    9834:	4611      	mov	r1, r2
    9836:	461a      	mov	r2, r3
    9838:	4603      	mov	r3, r0
    983a:	f8ad 3002 	strh.w	r3, [sp, #2]
    983e:	460b      	mov	r3, r1
    9840:	f88d 3001 	strb.w	r3, [sp, #1]
    9844:	4613      	mov	r3, r2
    9846:	f88d 3000 	strb.w	r3, [sp]
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    984a:	2300      	movs	r3, #0
    984c:	f88d 300f 	strb.w	r3, [sp, #15]
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    {
#if (ADC_ENABLE_QUEUING == STD_ON)
        /* SWS_Adc_00437 */
        /* Find the Group in the Queue */
        *RemovedPos = Adc_axUnitStatus[Unit].SwNormalQueueIndex;  /* initialize with something invalid */
    9850:	f89d 3001 	ldrb.w	r3, [sp, #1]
    9854:	4a26      	ldr	r2, [pc, #152]	; (98f0 <Adc_StopSwGroupConversion+0xc4>)
    9856:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    985a:	b29a      	uxth	r2, r3
    985c:	9b01      	ldr	r3, [sp, #4]
    985e:	801a      	strh	r2, [r3, #0]
        NumOfSwNormalQueue = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    9860:	f89d 3001 	ldrb.w	r3, [sp, #1]
    9864:	4a22      	ldr	r2, [pc, #136]	; (98f0 <Adc_StopSwGroupConversion+0xc4>)
    9866:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    986a:	f8ad 300a 	strh.w	r3, [sp, #10]
        for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    986e:	2300      	movs	r3, #0
    9870:	f8ad 300c 	strh.w	r3, [sp, #12]
    9874:	e02f      	b.n	98d6 <Adc_StopSwGroupConversion+0xaa>
        {
            if (Group == Adc_axUnitStatus[Unit].SwNormalQueue[SwNormalQueueIndex])
    9876:	f89d 2001 	ldrb.w	r2, [sp, #1]
    987a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    987e:	491c      	ldr	r1, [pc, #112]	; (98f0 <Adc_StopSwGroupConversion+0xc4>)
    9880:	0092      	lsls	r2, r2, #2
    9882:	4413      	add	r3, r2
    9884:	005b      	lsls	r3, r3, #1
    9886:	440b      	add	r3, r1
    9888:	885b      	ldrh	r3, [r3, #2]
    988a:	b29b      	uxth	r3, r3
    988c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    9890:	429a      	cmp	r2, r3
    9892:	d11b      	bne.n	98cc <Adc_StopSwGroupConversion+0xa0>
            {
                /* The group is found in the Queue */
                /* Store the position of the group to be removed */
                *RemovedPos = SwNormalQueueIndex;
    9894:	9b01      	ldr	r3, [sp, #4]
    9896:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    989a:	801a      	strh	r2, [r3, #0]

                /* Stop the conversion of all channels belonging to this group */
                if ((Adc_QueueIndexType)0U == SwNormalQueueIndex) /* In this case the group might be under conversion */
    989c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    98a0:	2b00      	cmp	r3, #0
    98a2:	d10b      	bne.n	98bc <Adc_StopSwGroupConversion+0x90>
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
                {
                    /* SWS_Adc_00386 */
                    TimeOutStatus = Adc_Ipw_StopCurrentConversion(Unit, Group, CoreId);
    98a4:	f89d 2000 	ldrb.w	r2, [sp]
    98a8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    98ac:	f89d 3001 	ldrb.w	r3, [sp, #1]
    98b0:	4618      	mov	r0, r3
    98b2:	f002 fd33 	bl	c31c <Adc_Ipw_StopCurrentConversion>
    98b6:	4603      	mov	r3, r0
    98b8:	f88d 300f 	strb.w	r3, [sp, #15]
                }
#if (ADC_ENABLE_QUEUING == STD_ON)
                /* SWS_Adc_00438 */
                /* Remove group from Queue */
                Adc_Ipw_RemoveFromQueue(Unit, SwNormalQueueIndex);
    98bc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    98c0:	f89d 3001 	ldrb.w	r3, [sp, #1]
    98c4:	4611      	mov	r1, r2
    98c6:	4618      	mov	r0, r3
    98c8:	f001 fe70 	bl	b5ac <Adc_Ipw_RemoveFromQueue>
        for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    98cc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    98d0:	3301      	adds	r3, #1
    98d2:	f8ad 300c 	strh.w	r3, [sp, #12]
    98d6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    98da:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    98de:	429a      	cmp	r2, r3
    98e0:	d3c9      	bcc.n	9876 <Adc_StopSwGroupConversion+0x4a>
        /* No element will be present in the queue */
        Adc_axUnitStatus[Unit].SwNormalQueueIndex = 0U;
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    }

    return TimeOutStatus;
    98e2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    98e6:	4618      	mov	r0, r3
    98e8:	b005      	add	sp, #20
    98ea:	f85d fb04 	ldr.w	pc, [sp], #4
    98ee:	bf00      	nop
    98f0:	1fff8d70 	.word	0x1fff8d70

000098f4 <Adc_UpdateStatusStopConversion>:
* SWS_Adc_00437
*/
static inline void Adc_UpdateStatusStopConversion(Adc_GroupType Group,
                                                  Adc_HwUnitType Unit,
                                                  uint8 CoreId)
{
    98f4:	b500      	push	{lr}
    98f6:	b089      	sub	sp, #36	; 0x24
    98f8:	4603      	mov	r3, r0
    98fa:	f8ad 3006 	strh.w	r3, [sp, #6]
    98fe:	460b      	mov	r3, r1
    9900:	f88d 3005 	strb.w	r3, [sp, #5]
    9904:	4613      	mov	r3, r2
    9906:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    990a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    990e:	4a4f      	ldr	r2, [pc, #316]	; (9a4c <Adc_UpdateStatusStopConversion+0x158>)
    9910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9914:	68da      	ldr	r2, [r3, #12]
    9916:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    991a:	005b      	lsls	r3, r3, #1
    991c:	4413      	add	r3, r2
    991e:	881b      	ldrh	r3, [r3, #0]
    9920:	f8ad 301e 	strh.w	r3, [sp, #30]
#if (ADC_ENABLE_QUEUING == STD_ON)
    Adc_QueueIndexType RemovedPos = 0U;
    9924:	2300      	movs	r3, #0
    9926:	f8ad 300a 	strh.w	r3, [sp, #10]
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    992a:	2300      	movs	r3, #0
    992c:	f88d 301d 	strb.w	r3, [sp, #29]

#if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
    Adc_axGroupStatus[Group].LimitCheckFailed = FALSE;
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_ON */

    Mode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode;
    9930:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9934:	4a45      	ldr	r2, [pc, #276]	; (9a4c <Adc_UpdateStatusStopConversion+0x158>)
    9936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    993a:	685a      	ldr	r2, [r3, #4]
    993c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    9940:	2134      	movs	r1, #52	; 0x34
    9942:	fb01 f303 	mul.w	r3, r1, r3
    9946:	4413      	add	r3, r2
    9948:	689b      	ldr	r3, [r3, #8]
    994a:	9306      	str	r3, [sp, #24]
    AccessMode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode;
    994c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9950:	4a3e      	ldr	r2, [pc, #248]	; (9a4c <Adc_UpdateStatusStopConversion+0x158>)
    9952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9956:	685a      	ldr	r2, [r3, #4]
    9958:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    995c:	2134      	movs	r1, #52	; 0x34
    995e:	fb01 f303 	mul.w	r3, r1, r3
    9962:	4413      	add	r3, r2
    9964:	685b      	ldr	r3, [r3, #4]
    9966:	9305      	str	r3, [sp, #20]
    BufferMode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode;
    9968:	f89d 3004 	ldrb.w	r3, [sp, #4]
    996c:	4a37      	ldr	r2, [pc, #220]	; (9a4c <Adc_UpdateStatusStopConversion+0x158>)
    996e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9972:	685a      	ldr	r2, [r3, #4]
    9974:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    9978:	2134      	movs	r1, #52	; 0x34
    997a:	fb01 f303 	mul.w	r3, r1, r3
    997e:	4413      	add	r3, r2
    9980:	699b      	ldr	r3, [r3, #24]
    9982:	9304      	str	r3, [sp, #16]
    Conversion = Adc_axGroupStatus[Group].Conversion;
    9984:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9988:	4931      	ldr	r1, [pc, #196]	; (9a50 <Adc_UpdateStatusStopConversion+0x15c>)
    998a:	4613      	mov	r3, r2
    998c:	009b      	lsls	r3, r3, #2
    998e:	4413      	add	r3, r2
    9990:	009b      	lsls	r3, r3, #2
    9992:	440b      	add	r3, r1
    9994:	681b      	ldr	r3, [r3, #0]
    9996:	9303      	str	r3, [sp, #12]

     /* FD reset number of samples completed */
     Adc_axGroupStatus[Group].ResultIndex = 0U;
    9998:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    999c:	492c      	ldr	r1, [pc, #176]	; (9a50 <Adc_UpdateStatusStopConversion+0x15c>)
    999e:	4613      	mov	r3, r2
    99a0:	009b      	lsls	r3, r3, #2
    99a2:	4413      	add	r3, r2
    99a4:	009b      	lsls	r3, r3, #2
    99a6:	440b      	add	r3, r1
    99a8:	3308      	adds	r3, #8
    99aa:	2200      	movs	r2, #0
    99ac:	801a      	strh	r2, [r3, #0]
     Adc_axGroupStatus[Group].Notification = ADC_NOTIFICATION_DISABLED;
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */
#if ((ADC_SETCHANNEL_API == STD_ON) && (ADC_IPW_PDB_AVAILABLE == STD_ON))
     Adc_axRuntimeGroupChannel[Group].RuntimeChanMask = 0xFFFFFFFFUL;
#endif /* ((ADC_SETCHANNEL_API == STD_ON) && (ADC_IPW_PDB_AVAILABLE == STD_ON)) */
    if (((ADC_CONV_MODE_ONESHOT == Mode) || \
    99ae:	9b06      	ldr	r3, [sp, #24]
    99b0:	2b00      	cmp	r3, #0
    99b2:	d005      	beq.n	99c0 <Adc_UpdateStatusStopConversion+0xcc>
    99b4:	9b05      	ldr	r3, [sp, #20]
    99b6:	2b01      	cmp	r3, #1
    99b8:	d110      	bne.n	99dc <Adc_UpdateStatusStopConversion+0xe8>
        ((ADC_ACCESS_MODE_STREAMING == AccessMode) && (ADC_STREAM_BUFFER_LINEAR == BufferMode)) \
    99ba:	9b04      	ldr	r3, [sp, #16]
    99bc:	2b00      	cmp	r3, #0
    99be:	d10d      	bne.n	99dc <Adc_UpdateStatusStopConversion+0xe8>
       ) && (ADC_STREAM_COMPLETED == Conversion) \
    99c0:	9b03      	ldr	r3, [sp, #12]
    99c2:	2b03      	cmp	r3, #3
    99c4:	d10a      	bne.n	99dc <Adc_UpdateStatusStopConversion+0xe8>
      )
    {
        /* SWS_Adc_00221, SWS_Adc_00360 */
        /* group is stopped, change its status to IDLE  */
        Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    99c6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    99ca:	4921      	ldr	r1, [pc, #132]	; (9a50 <Adc_UpdateStatusStopConversion+0x15c>)
    99cc:	4613      	mov	r3, r2
    99ce:	009b      	lsls	r3, r3, #2
    99d0:	4413      	add	r3, r2
    99d2:	009b      	lsls	r3, r3, #2
    99d4:	440b      	add	r3, r1
    99d6:	2200      	movs	r2, #0
    99d8:	601a      	str	r2, [r3, #0]
        {
            /* Timeout is expired.*/
            Adc_ReportDetRuntimeError((uint8)ADC_STOPGROUPCONVERSION_ID, (uint8)ADC_E_TIMEOUT);
        }
    }
}
    99da:	e032      	b.n	9a42 <Adc_UpdateStatusStopConversion+0x14e>
        TimeOutStatus = Adc_StopSwGroupConversion(&RemovedPos, Group, Unit, CoreId);
    99dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
    99e0:	f89d 2005 	ldrb.w	r2, [sp, #5]
    99e4:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    99e8:	f10d 000a 	add.w	r0, sp, #10
    99ec:	f7ff ff1e 	bl	982c <Adc_StopSwGroupConversion>
    99f0:	4603      	mov	r3, r0
    99f2:	f88d 301d 	strb.w	r3, [sp, #29]
        Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    99f6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    99fa:	4915      	ldr	r1, [pc, #84]	; (9a50 <Adc_UpdateStatusStopConversion+0x15c>)
    99fc:	4613      	mov	r3, r2
    99fe:	009b      	lsls	r3, r3, #2
    9a00:	4413      	add	r3, r2
    9a02:	009b      	lsls	r3, r3, #2
    9a04:	440b      	add	r3, r1
    9a06:	2200      	movs	r2, #0
    9a08:	601a      	str	r2, [r3, #0]
        if ((Adc_QueueIndexType)0U == RemovedPos)
    9a0a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    9a0e:	2b00      	cmp	r3, #0
    9a10:	d10f      	bne.n	9a32 <Adc_UpdateStatusStopConversion+0x13e>
            if (Adc_axUnitStatus[Unit].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    9a12:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9a16:	4a0f      	ldr	r2, [pc, #60]	; (9a54 <Adc_UpdateStatusStopConversion+0x160>)
    9a18:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    9a1c:	b29b      	uxth	r3, r3
    9a1e:	2b00      	cmp	r3, #0
    9a20:	d007      	beq.n	9a32 <Adc_UpdateStatusStopConversion+0x13e>
                Adc_Ipw_StartNormalConversion(Unit, CoreId);
    9a22:	f89d 2004 	ldrb.w	r2, [sp, #4]
    9a26:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9a2a:	4611      	mov	r1, r2
    9a2c:	4618      	mov	r0, r3
    9a2e:	f002 fbcb 	bl	c1c8 <Adc_Ipw_StartNormalConversion>
        if ((Std_ReturnType)E_NOT_OK == TimeOutStatus)
    9a32:	f89d 301d 	ldrb.w	r3, [sp, #29]
    9a36:	2b01      	cmp	r3, #1
    9a38:	d103      	bne.n	9a42 <Adc_UpdateStatusStopConversion+0x14e>
            Adc_ReportDetRuntimeError((uint8)ADC_STOPGROUPCONVERSION_ID, (uint8)ADC_E_TIMEOUT);
    9a3a:	212b      	movs	r1, #43	; 0x2b
    9a3c:	2003      	movs	r0, #3
    9a3e:	f7ff f8a8 	bl	8b92 <Adc_ReportDetRuntimeError>
}
    9a42:	bf00      	nop
    9a44:	b009      	add	sp, #36	; 0x24
    9a46:	f85d fb04 	ldr.w	pc, [sp], #4
    9a4a:	bf00      	nop
    9a4c:	1fff8d40 	.word	0x1fff8d40
    9a50:	1fff8d48 	.word	0x1fff8d48
    9a54:	1fff8d70 	.word	0x1fff8d70

00009a58 <Adc_UpdateStatusReadGroup>:
*
*/
static inline void Adc_UpdateStatusReadGroup(const Adc_GroupType Group,
                                             const boolean Flag,
                                             uint8 CoreId)
{
    9a58:	b500      	push	{lr}
    9a5a:	b085      	sub	sp, #20
    9a5c:	4603      	mov	r3, r0
    9a5e:	f8ad 3006 	strh.w	r3, [sp, #6]
    9a62:	460b      	mov	r3, r1
    9a64:	f88d 3005 	strb.w	r3, [sp, #5]
    9a68:	4613      	mov	r3, r2
    9a6a:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9a6e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9a72:	4a18      	ldr	r2, [pc, #96]	; (9ad4 <Adc_UpdateStatusReadGroup+0x7c>)
    9a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a78:	68da      	ldr	r2, [r3, #12]
    9a7a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9a7e:	005b      	lsls	r3, r3, #1
    9a80:	4413      	add	r3, r2
    9a82:	881b      	ldrh	r3, [r3, #0]
    9a84:	f8ad 300e 	strh.w	r3, [sp, #14]
    if ((uint8)STD_ON == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcWithoutInterrupt)
    9a88:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9a8c:	4a11      	ldr	r2, [pc, #68]	; (9ad4 <Adc_UpdateStatusReadGroup+0x7c>)
    9a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a92:	685a      	ldr	r2, [r3, #4]
    9a94:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9a98:	2134      	movs	r1, #52	; 0x34
    9a9a:	fb01 f303 	mul.w	r3, r1, r3
    9a9e:	4413      	add	r3, r2
    9aa0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    9aa4:	2b01      	cmp	r3, #1
    9aa6:	d109      	bne.n	9abc <Adc_UpdateStatusReadGroup+0x64>
    {
        Adc_UpdateStatusReadGroupNoInt(Group, Flag, CoreId);
    9aa8:	f89d 2004 	ldrb.w	r2, [sp, #4]
    9aac:	f89d 1005 	ldrb.w	r1, [sp, #5]
    9ab0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9ab4:	4618      	mov	r0, r3
    9ab6:	f000 f80f 	bl	9ad8 <Adc_UpdateStatusReadGroupNoInt>
    }
    else
    {
        Adc_UpdateStatusReadGroupInt(Group, CoreId);
    }
}
    9aba:	e007      	b.n	9acc <Adc_UpdateStatusReadGroup+0x74>
        Adc_UpdateStatusReadGroupInt(Group, CoreId);
    9abc:	f89d 2004 	ldrb.w	r2, [sp, #4]
    9ac0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9ac4:	4611      	mov	r1, r2
    9ac6:	4618      	mov	r0, r3
    9ac8:	f000 f8e8 	bl	9c9c <Adc_UpdateStatusReadGroupInt>
}
    9acc:	bf00      	nop
    9ace:	b005      	add	sp, #20
    9ad0:	f85d fb04 	ldr.w	pc, [sp], #4
    9ad4:	1fff8d40 	.word	0x1fff8d40

00009ad8 <Adc_UpdateStatusReadGroupNoInt>:

static inline void Adc_UpdateStatusReadGroupNoInt(const Adc_GroupType Group,
                                                  const boolean Flag,
                                                  uint8 CoreId)
{
    9ad8:	b500      	push	{lr}
    9ada:	b085      	sub	sp, #20
    9adc:	4603      	mov	r3, r0
    9ade:	f8ad 3006 	strh.w	r3, [sp, #6]
    9ae2:	460b      	mov	r3, r1
    9ae4:	f88d 3005 	strb.w	r3, [sp, #5]
    9ae8:	4613      	mov	r3, r2
    9aea:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9aee:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9af2:	4a2c      	ldr	r2, [pc, #176]	; (9ba4 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    9af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9af8:	68da      	ldr	r2, [r3, #12]
    9afa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9afe:	005b      	lsls	r3, r3, #1
    9b00:	4413      	add	r3, r2
    9b02:	881b      	ldrh	r3, [r3, #0]
    9b04:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* at least once the group was converted */
    Adc_axGroupStatus[Group].AlreadyConverted = ADC_ALREADY_CONVERTED;
    9b08:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9b0c:	4926      	ldr	r1, [pc, #152]	; (9ba8 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    9b0e:	4613      	mov	r3, r2
    9b10:	009b      	lsls	r3, r3, #2
    9b12:	4413      	add	r3, r2
    9b14:	009b      	lsls	r3, r3, #2
    9b16:	440b      	add	r3, r1
    9b18:	3304      	adds	r3, #4
    9b1a:	2201      	movs	r2, #1
    9b1c:	601a      	str	r2, [r3, #0]
    /* Update conversion status*/
    /* Conversion values are not in the configured range */
    if (TRUE == Flag)
    9b1e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9b22:	2b00      	cmp	r3, #0
    9b24:	d03a      	beq.n	9b9c <Adc_UpdateStatusReadGroupNoInt+0xc4>
    {
        /* NOTE: Streaming groups are NOT allowed without interrupts in configuration */
        if (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)
    9b26:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9b2a:	4a1e      	ldr	r2, [pc, #120]	; (9ba4 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    9b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b30:	685a      	ldr	r2, [r3, #4]
    9b32:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9b36:	2134      	movs	r1, #52	; 0x34
    9b38:	fb01 f303 	mul.w	r3, r1, r3
    9b3c:	4413      	add	r3, r2
    9b3e:	689b      	ldr	r3, [r3, #8]
    9b40:	2b01      	cmp	r3, #1
    9b42:	d10a      	bne.n	9b5a <Adc_UpdateStatusReadGroupNoInt+0x82>
        {
            Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    9b44:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9b48:	4917      	ldr	r1, [pc, #92]	; (9ba8 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    9b4a:	4613      	mov	r3, r2
    9b4c:	009b      	lsls	r3, r3, #2
    9b4e:	4413      	add	r3, r2
    9b50:	009b      	lsls	r3, r3, #2
    9b52:	440b      	add	r3, r1
    9b54:	2201      	movs	r2, #1
    9b56:	601a      	str	r2, [r3, #0]
            /* SWS_Adc_00449, SWS_Adc_00450 */
            Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
        }
    }
    #endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
}
    9b58:	e020      	b.n	9b9c <Adc_UpdateStatusReadGroupNoInt+0xc4>
            if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    9b5a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9b5e:	4a11      	ldr	r2, [pc, #68]	; (9ba4 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    9b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b64:	685a      	ldr	r2, [r3, #4]
    9b66:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9b6a:	2134      	movs	r1, #52	; 0x34
    9b6c:	fb01 f303 	mul.w	r3, r1, r3
    9b70:	4413      	add	r3, r2
    9b72:	695b      	ldr	r3, [r3, #20]
    9b74:	2b00      	cmp	r3, #0
    9b76:	d111      	bne.n	9b9c <Adc_UpdateStatusReadGroupNoInt+0xc4>
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    9b78:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9b7c:	490a      	ldr	r1, [pc, #40]	; (9ba8 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    9b7e:	4613      	mov	r3, r2
    9b80:	009b      	lsls	r3, r3, #2
    9b82:	4413      	add	r3, r2
    9b84:	009b      	lsls	r3, r3, #2
    9b86:	440b      	add	r3, r1
    9b88:	2200      	movs	r2, #0
    9b8a:	601a      	str	r2, [r3, #0]
                Adc_UpdateSwQueueIndexNoInt(Group, CoreId);
    9b8c:	f89d 2004 	ldrb.w	r2, [sp, #4]
    9b90:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9b94:	4611      	mov	r1, r2
    9b96:	4618      	mov	r0, r3
    9b98:	f000 f808 	bl	9bac <Adc_UpdateSwQueueIndexNoInt>
}
    9b9c:	bf00      	nop
    9b9e:	b005      	add	sp, #20
    9ba0:	f85d fb04 	ldr.w	pc, [sp], #4
    9ba4:	1fff8d40 	.word	0x1fff8d40
    9ba8:	1fff8d48 	.word	0x1fff8d48

00009bac <Adc_UpdateSwQueueIndexNoInt>:

static inline void Adc_UpdateSwQueueIndexNoInt(const Adc_GroupType Group,
                                               uint8 CoreId)
{
    9bac:	b500      	push	{lr}
    9bae:	b085      	sub	sp, #20
    9bb0:	4603      	mov	r3, r0
    9bb2:	460a      	mov	r2, r1
    9bb4:	f8ad 3006 	strh.w	r3, [sp, #6]
    9bb8:	4613      	mov	r3, r2
    9bba:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9bbe:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9bc2:	4a34      	ldr	r2, [pc, #208]	; (9c94 <Adc_UpdateSwQueueIndexNoInt+0xe8>)
    9bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bc8:	68da      	ldr	r2, [r3, #12]
    9bca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9bce:	005b      	lsls	r3, r3, #1
    9bd0:	4413      	add	r3, r2
    9bd2:	881b      	ldrh	r3, [r3, #0]
    9bd4:	f8ad 300c 	strh.w	r3, [sp, #12]
    Adc_HwUnitType LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcLogicalUnitId;
    9bd8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9bdc:	4a2d      	ldr	r2, [pc, #180]	; (9c94 <Adc_UpdateSwQueueIndexNoInt+0xe8>)
    9bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9be2:	685a      	ldr	r2, [r3, #4]
    9be4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9be8:	2134      	movs	r1, #52	; 0x34
    9bea:	fb01 f303 	mul.w	r3, r1, r3
    9bee:	4413      	add	r3, r2
    9bf0:	789b      	ldrb	r3, [r3, #2]
    9bf2:	f88d 300b 	strb.w	r3, [sp, #11]
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03();
    }
    else /* SW NORMAL CONVERSION */
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    {
        if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    9bf6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9bfa:	4a27      	ldr	r2, [pc, #156]	; (9c98 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    9bfc:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    9c00:	b29b      	uxth	r3, r3
    9c02:	2b00      	cmp	r3, #0
    9c04:	d041      	beq.n	9c8a <Adc_UpdateSwQueueIndexNoInt+0xde>
        {
#if (ADC_ENABLE_QUEUING == STD_ON)
            /* remove group without interrupts from queue  */
            NumOfSwNormalQueue = Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex;
    9c06:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9c0a:	4a23      	ldr	r2, [pc, #140]	; (9c98 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    9c0c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    9c10:	f8ad 3008 	strh.w	r3, [sp, #8]
            for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    9c14:	2300      	movs	r3, #0
    9c16:	f8ad 300e 	strh.w	r3, [sp, #14]
    9c1a:	e01c      	b.n	9c56 <Adc_UpdateSwQueueIndexNoInt+0xaa>
            {
                if (Group == Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[SwNormalQueueIndex])
    9c1c:	f89d 200b 	ldrb.w	r2, [sp, #11]
    9c20:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9c24:	491c      	ldr	r1, [pc, #112]	; (9c98 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    9c26:	0092      	lsls	r2, r2, #2
    9c28:	4413      	add	r3, r2
    9c2a:	005b      	lsls	r3, r3, #1
    9c2c:	440b      	add	r3, r1
    9c2e:	885b      	ldrh	r3, [r3, #2]
    9c30:	b29b      	uxth	r3, r3
    9c32:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9c36:	429a      	cmp	r2, r3
    9c38:	d108      	bne.n	9c4c <Adc_UpdateSwQueueIndexNoInt+0xa0>
                {
                    /* The group is found in the Queue */
                    Adc_Ipw_RemoveFromQueue(LogicalHwUnitId, SwNormalQueueIndex);
    9c3a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9c3e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9c42:	4611      	mov	r1, r2
    9c44:	4618      	mov	r0, r3
    9c46:	f001 fcb1 	bl	b5ac <Adc_Ipw_RemoveFromQueue>
                    break;
    9c4a:	e00a      	b.n	9c62 <Adc_UpdateSwQueueIndexNoInt+0xb6>
            for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    9c4c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9c50:	3301      	adds	r3, #1
    9c52:	f8ad 300e 	strh.w	r3, [sp, #14]
    9c56:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9c5a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    9c5e:	429a      	cmp	r2, r3
    9c60:	d3dc      	bcc.n	9c1c <Adc_UpdateSwQueueIndexNoInt+0x70>
                }
            }
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
            /* Start / restore next conversion in the queue*/
            if (0U == SwNormalQueueIndex)
    9c62:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9c66:	2b00      	cmp	r3, #0
    9c68:	d10f      	bne.n	9c8a <Adc_UpdateSwQueueIndexNoInt+0xde>
            {
                if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > 0U)
    9c6a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9c6e:	4a0a      	ldr	r2, [pc, #40]	; (9c98 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    9c70:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    9c74:	b29b      	uxth	r3, r3
    9c76:	2b00      	cmp	r3, #0
    9c78:	d007      	beq.n	9c8a <Adc_UpdateSwQueueIndexNoInt+0xde>
                {
                    Adc_Ipw_StartNormalConversion(LogicalHwUnitId, CoreId);
    9c7a:	f89d 2005 	ldrb.w	r2, [sp, #5]
    9c7e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9c82:	4611      	mov	r1, r2
    9c84:	4618      	mov	r0, r3
    9c86:	f002 fa9f 	bl	c1c8 <Adc_Ipw_StartNormalConversion>
#else
            Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex--;
#endif
        }
    }
}
    9c8a:	bf00      	nop
    9c8c:	b005      	add	sp, #20
    9c8e:	f85d fb04 	ldr.w	pc, [sp], #4
    9c92:	bf00      	nop
    9c94:	1fff8d40 	.word	0x1fff8d40
    9c98:	1fff8d70 	.word	0x1fff8d70

00009c9c <Adc_UpdateStatusReadGroupInt>:

static inline void Adc_UpdateStatusReadGroupInt(const Adc_GroupType Group,
                                                uint8 CoreId)
{
    9c9c:	b084      	sub	sp, #16
    9c9e:	4603      	mov	r3, r0
    9ca0:	460a      	mov	r2, r1
    9ca2:	f8ad 3006 	strh.w	r3, [sp, #6]
    9ca6:	4613      	mov	r3, r2
    9ca8:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9cac:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9cb0:	4a47      	ldr	r2, [pc, #284]	; (9dd0 <Adc_UpdateStatusReadGroupInt+0x134>)
    9cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cb6:	68da      	ldr	r2, [r3, #12]
    9cb8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9cbc:	005b      	lsls	r3, r3, #1
    9cbe:	4413      	add	r3, r2
    9cc0:	881b      	ldrh	r3, [r3, #0]
    9cc2:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* The following code has been added to respect the State Diagram of Streaming Access Mode */
    if (ADC_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    9cc6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9cca:	4942      	ldr	r1, [pc, #264]	; (9dd4 <Adc_UpdateStatusReadGroupInt+0x138>)
    9ccc:	4613      	mov	r3, r2
    9cce:	009b      	lsls	r3, r3, #2
    9cd0:	4413      	add	r3, r2
    9cd2:	009b      	lsls	r3, r3, #2
    9cd4:	440b      	add	r3, r1
    9cd6:	681b      	ldr	r3, [r3, #0]
    9cd8:	2b02      	cmp	r3, #2
    9cda:	d10a      	bne.n	9cf2 <Adc_UpdateStatusReadGroupInt+0x56>
    {
        /* SWS_Adc_00331 -- SWS_Adc_00222 */
        Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    9cdc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9ce0:	493c      	ldr	r1, [pc, #240]	; (9dd4 <Adc_UpdateStatusReadGroupInt+0x138>)
    9ce2:	4613      	mov	r3, r2
    9ce4:	009b      	lsls	r3, r3, #2
    9ce6:	4413      	add	r3, r2
    9ce8:	009b      	lsls	r3, r3, #2
    9cea:	440b      	add	r3, r1
    9cec:	2201      	movs	r2, #1
    9cee:	601a      	str	r2, [r3, #0]
    }
    else
    {
        ; /* Empty else branch to avoid MISRA */
    }
}
    9cf0:	e06a      	b.n	9dc8 <Adc_UpdateStatusReadGroupInt+0x12c>
    else if (ADC_STREAM_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    9cf2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9cf6:	4937      	ldr	r1, [pc, #220]	; (9dd4 <Adc_UpdateStatusReadGroupInt+0x138>)
    9cf8:	4613      	mov	r3, r2
    9cfa:	009b      	lsls	r3, r3, #2
    9cfc:	4413      	add	r3, r2
    9cfe:	009b      	lsls	r3, r3, #2
    9d00:	440b      	add	r3, r1
    9d02:	681b      	ldr	r3, [r3, #0]
    9d04:	2b03      	cmp	r3, #3
    9d06:	d15f      	bne.n	9dc8 <Adc_UpdateStatusReadGroupInt+0x12c>
        if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    9d08:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9d0c:	4a30      	ldr	r2, [pc, #192]	; (9dd0 <Adc_UpdateStatusReadGroupInt+0x134>)
    9d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d12:	685a      	ldr	r2, [r3, #4]
    9d14:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9d18:	2134      	movs	r1, #52	; 0x34
    9d1a:	fb01 f303 	mul.w	r3, r1, r3
    9d1e:	4413      	add	r3, r2
    9d20:	695b      	ldr	r3, [r3, #20]
    9d22:	2b00      	cmp	r3, #0
    9d24:	d150      	bne.n	9dc8 <Adc_UpdateStatusReadGroupInt+0x12c>
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)|| \
    9d26:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9d2a:	4a29      	ldr	r2, [pc, #164]	; (9dd0 <Adc_UpdateStatusReadGroupInt+0x134>)
    9d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d30:	685a      	ldr	r2, [r3, #4]
    9d32:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9d36:	2134      	movs	r1, #52	; 0x34
    9d38:	fb01 f303 	mul.w	r3, r1, r3
    9d3c:	4413      	add	r3, r2
    9d3e:	689b      	ldr	r3, [r3, #8]
    9d40:	2b00      	cmp	r3, #0
    9d42:	d02c      	beq.n	9d9e <Adc_UpdateStatusReadGroupInt+0x102>
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    9d44:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9d48:	4a21      	ldr	r2, [pc, #132]	; (9dd0 <Adc_UpdateStatusReadGroupInt+0x134>)
    9d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d4e:	685a      	ldr	r2, [r3, #4]
    9d50:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9d54:	2134      	movs	r1, #52	; 0x34
    9d56:	fb01 f303 	mul.w	r3, r1, r3
    9d5a:	4413      	add	r3, r2
    9d5c:	689b      	ldr	r3, [r3, #8]
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)|| \
    9d5e:	2b01      	cmp	r3, #1
    9d60:	d128      	bne.n	9db4 <Adc_UpdateStatusReadGroupInt+0x118>
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    9d62:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9d66:	4a1a      	ldr	r2, [pc, #104]	; (9dd0 <Adc_UpdateStatusReadGroupInt+0x134>)
    9d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d6c:	685a      	ldr	r2, [r3, #4]
    9d6e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9d72:	2134      	movs	r1, #52	; 0x34
    9d74:	fb01 f303 	mul.w	r3, r1, r3
    9d78:	4413      	add	r3, r2
    9d7a:	685b      	ldr	r3, [r3, #4]
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    9d7c:	2b01      	cmp	r3, #1
    9d7e:	d119      	bne.n	9db4 <Adc_UpdateStatusReadGroupInt+0x118>
                (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) \
    9d80:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9d84:	4a12      	ldr	r2, [pc, #72]	; (9dd0 <Adc_UpdateStatusReadGroupInt+0x134>)
    9d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d8a:	685a      	ldr	r2, [r3, #4]
    9d8c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9d90:	2134      	movs	r1, #52	; 0x34
    9d92:	fb01 f303 	mul.w	r3, r1, r3
    9d96:	4413      	add	r3, r2
    9d98:	699b      	ldr	r3, [r3, #24]
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    9d9a:	2b00      	cmp	r3, #0
    9d9c:	d10a      	bne.n	9db4 <Adc_UpdateStatusReadGroupInt+0x118>
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    9d9e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9da2:	490c      	ldr	r1, [pc, #48]	; (9dd4 <Adc_UpdateStatusReadGroupInt+0x138>)
    9da4:	4613      	mov	r3, r2
    9da6:	009b      	lsls	r3, r3, #2
    9da8:	4413      	add	r3, r2
    9daa:	009b      	lsls	r3, r3, #2
    9dac:	440b      	add	r3, r1
    9dae:	2200      	movs	r2, #0
    9db0:	601a      	str	r2, [r3, #0]
}
    9db2:	e009      	b.n	9dc8 <Adc_UpdateStatusReadGroupInt+0x12c>
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    9db4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9db8:	4906      	ldr	r1, [pc, #24]	; (9dd4 <Adc_UpdateStatusReadGroupInt+0x138>)
    9dba:	4613      	mov	r3, r2
    9dbc:	009b      	lsls	r3, r3, #2
    9dbe:	4413      	add	r3, r2
    9dc0:	009b      	lsls	r3, r3, #2
    9dc2:	440b      	add	r3, r1
    9dc4:	2201      	movs	r2, #1
    9dc6:	601a      	str	r2, [r3, #0]
}
    9dc8:	bf00      	nop
    9dca:	b004      	add	sp, #16
    9dcc:	4770      	bx	lr
    9dce:	bf00      	nop
    9dd0:	1fff8d40 	.word	0x1fff8d40
    9dd4:	1fff8d48 	.word	0x1fff8d48

00009dd8 <Adc_UpdateStatusAfterGetStream>:
* @return         void
*
*/
static inline void Adc_UpdateStatusAfterGetStream(Adc_GroupType Group,
                                                  uint8 CoreId)
{
    9dd8:	b084      	sub	sp, #16
    9dda:	4603      	mov	r3, r0
    9ddc:	460a      	mov	r2, r1
    9dde:	f8ad 3006 	strh.w	r3, [sp, #6]
    9de2:	4613      	mov	r3, r2
    9de4:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9de8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9dec:	4a46      	ldr	r2, [pc, #280]	; (9f08 <Adc_UpdateStatusAfterGetStream+0x130>)
    9dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9df2:	68da      	ldr	r2, [r3, #12]
    9df4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9df8:	005b      	lsls	r3, r3, #1
    9dfa:	4413      	add	r3, r2
    9dfc:	881b      	ldrh	r3, [r3, #0]
    9dfe:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* The following code has been added to respect the State Diagram of Streaming Access Mode */
    if (ADC_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    9e02:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9e06:	4941      	ldr	r1, [pc, #260]	; (9f0c <Adc_UpdateStatusAfterGetStream+0x134>)
    9e08:	4613      	mov	r3, r2
    9e0a:	009b      	lsls	r3, r3, #2
    9e0c:	4413      	add	r3, r2
    9e0e:	009b      	lsls	r3, r3, #2
    9e10:	440b      	add	r3, r1
    9e12:	681b      	ldr	r3, [r3, #0]
    9e14:	2b02      	cmp	r3, #2
    9e16:	d109      	bne.n	9e2c <Adc_UpdateStatusAfterGetStream+0x54>
    {
        /* SWS_Adc_00328 -- SWS_Adc_00222 */
        Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    9e18:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9e1c:	493b      	ldr	r1, [pc, #236]	; (9f0c <Adc_UpdateStatusAfterGetStream+0x134>)
    9e1e:	4613      	mov	r3, r2
    9e20:	009b      	lsls	r3, r3, #2
    9e22:	4413      	add	r3, r2
    9e24:	009b      	lsls	r3, r3, #2
    9e26:	440b      	add	r3, r1
    9e28:	2201      	movs	r2, #1
    9e2a:	601a      	str	r2, [r3, #0]
    }

    if (ADC_STREAM_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    9e2c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9e30:	4936      	ldr	r1, [pc, #216]	; (9f0c <Adc_UpdateStatusAfterGetStream+0x134>)
    9e32:	4613      	mov	r3, r2
    9e34:	009b      	lsls	r3, r3, #2
    9e36:	4413      	add	r3, r2
    9e38:	009b      	lsls	r3, r3, #2
    9e3a:	440b      	add	r3, r1
    9e3c:	681b      	ldr	r3, [r3, #0]
    9e3e:	2b03      	cmp	r3, #3
    9e40:	d15f      	bne.n	9f02 <Adc_UpdateStatusAfterGetStream+0x12a>
    {
        /* Compliance with State Diagram */
        if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    9e42:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9e46:	4a30      	ldr	r2, [pc, #192]	; (9f08 <Adc_UpdateStatusAfterGetStream+0x130>)
    9e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e4c:	685a      	ldr	r2, [r3, #4]
    9e4e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9e52:	2134      	movs	r1, #52	; 0x34
    9e54:	fb01 f303 	mul.w	r3, r1, r3
    9e58:	4413      	add	r3, r2
    9e5a:	695b      	ldr	r3, [r3, #20]
    9e5c:	2b00      	cmp	r3, #0
    9e5e:	d150      	bne.n	9f02 <Adc_UpdateStatusAfterGetStream+0x12a>
        {
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    9e60:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9e64:	4a28      	ldr	r2, [pc, #160]	; (9f08 <Adc_UpdateStatusAfterGetStream+0x130>)
    9e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e6a:	685a      	ldr	r2, [r3, #4]
    9e6c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9e70:	2134      	movs	r1, #52	; 0x34
    9e72:	fb01 f303 	mul.w	r3, r1, r3
    9e76:	4413      	add	r3, r2
    9e78:	689b      	ldr	r3, [r3, #8]
    9e7a:	2b00      	cmp	r3, #0
    9e7c:	d02c      	beq.n	9ed8 <Adc_UpdateStatusAfterGetStream+0x100>
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    9e7e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9e82:	4a21      	ldr	r2, [pc, #132]	; (9f08 <Adc_UpdateStatusAfterGetStream+0x130>)
    9e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e88:	685a      	ldr	r2, [r3, #4]
    9e8a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9e8e:	2134      	movs	r1, #52	; 0x34
    9e90:	fb01 f303 	mul.w	r3, r1, r3
    9e94:	4413      	add	r3, r2
    9e96:	689b      	ldr	r3, [r3, #8]
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    9e98:	2b01      	cmp	r3, #1
    9e9a:	d128      	bne.n	9eee <Adc_UpdateStatusAfterGetStream+0x116>
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    9e9c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9ea0:	4a19      	ldr	r2, [pc, #100]	; (9f08 <Adc_UpdateStatusAfterGetStream+0x130>)
    9ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ea6:	685a      	ldr	r2, [r3, #4]
    9ea8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9eac:	2134      	movs	r1, #52	; 0x34
    9eae:	fb01 f303 	mul.w	r3, r1, r3
    9eb2:	4413      	add	r3, r2
    9eb4:	685b      	ldr	r3, [r3, #4]
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    9eb6:	2b01      	cmp	r3, #1
    9eb8:	d119      	bne.n	9eee <Adc_UpdateStatusAfterGetStream+0x116>
                (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) \
    9eba:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9ebe:	4a12      	ldr	r2, [pc, #72]	; (9f08 <Adc_UpdateStatusAfterGetStream+0x130>)
    9ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ec4:	685a      	ldr	r2, [r3, #4]
    9ec6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9eca:	2134      	movs	r1, #52	; 0x34
    9ecc:	fb01 f303 	mul.w	r3, r1, r3
    9ed0:	4413      	add	r3, r2
    9ed2:	699b      	ldr	r3, [r3, #24]
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    9ed4:	2b00      	cmp	r3, #0
    9ed6:	d10a      	bne.n	9eee <Adc_UpdateStatusAfterGetStream+0x116>
               )
              )
            {
                /* SWS_Adc_00327 -- SWS_Adc_00221 */
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    9ed8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9edc:	490b      	ldr	r1, [pc, #44]	; (9f0c <Adc_UpdateStatusAfterGetStream+0x134>)
    9ede:	4613      	mov	r3, r2
    9ee0:	009b      	lsls	r3, r3, #2
    9ee2:	4413      	add	r3, r2
    9ee4:	009b      	lsls	r3, r3, #2
    9ee6:	440b      	add	r3, r1
    9ee8:	2200      	movs	r2, #0
    9eea:	601a      	str	r2, [r3, #0]
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
            }
        }
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */
    }
}
    9eec:	e009      	b.n	9f02 <Adc_UpdateStatusAfterGetStream+0x12a>
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    9eee:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9ef2:	4906      	ldr	r1, [pc, #24]	; (9f0c <Adc_UpdateStatusAfterGetStream+0x134>)
    9ef4:	4613      	mov	r3, r2
    9ef6:	009b      	lsls	r3, r3, #2
    9ef8:	4413      	add	r3, r2
    9efa:	009b      	lsls	r3, r3, #2
    9efc:	440b      	add	r3, r1
    9efe:	2201      	movs	r2, #1
    9f00:	601a      	str	r2, [r3, #0]
}
    9f02:	bf00      	nop
    9f04:	b004      	add	sp, #16
    9f06:	4770      	bx	lr
    9f08:	1fff8d40 	.word	0x1fff8d40
    9f0c:	1fff8d48 	.word	0x1fff8d48

00009f10 <Adc_Init>:
                                       GLOBAL FUNCTIONS
==================================================================================================*/
/* SWS_Adc_00365, SWS_Adc_00246, SWS_Adc_00056 */
/** @implements      Adc_Init_Activity */
void Adc_Init(const Adc_ConfigType * ConfigPtr)
{
    9f10:	b500      	push	{lr}
    9f12:	b085      	sub	sp, #20
    9f14:	9001      	str	r0, [sp, #4]
    Std_ReturnType TimeOutStatus;
#if (ADC_DEV_ERROR_DETECT == STD_ON) && ((ADC_VALIDATE_GLOBAL_CALL == STD_ON) || (ADC_VALIDATE_PARAMS == STD_ON))
    Std_ReturnType ValidStatus;
#endif

    CoreId = Adc_GetCoreID();
    9f16:	f002 fb43 	bl	c5a0 <Adc_GetCoreID>
    9f1a:	4603      	mov	r3, r0
    9f1c:	f88d 300b 	strb.w	r3, [sp, #11]
    CoreIdTemp = CoreId; /* Used to avoid MISRA */
    9f20:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9f24:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_GLOBAL_CALL == STD_ON)
        ValidStatus = Adc_ValidateGloballCall(ADC_INIT_ID, CoreId);
    9f28:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9f2c:	b2db      	uxtb	r3, r3
    9f2e:	4619      	mov	r1, r3
    9f30:	2000      	movs	r0, #0
    9f32:	f7fe fe5e 	bl	8bf2 <Adc_ValidateGloballCall>
    9f36:	4603      	mov	r3, r0
    9f38:	f88d 300f 	strb.w	r3, [sp, #15]
        if ((Std_ReturnType)E_OK == ValidStatus)
    9f3c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9f40:	2b00      	cmp	r3, #0
    9f42:	d14c      	bne.n	9fde <Adc_Init+0xce>
        {
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_GLOBAL_CALL == STD_ON) */

#if (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_PARAMS == STD_ON)
            ValidStatus = Adc_ValidatePtrInit(ConfigPtr);
    9f44:	9801      	ldr	r0, [sp, #4]
    9f46:	f7fe fe8d 	bl	8c64 <Adc_ValidatePtrInit>
    9f4a:	4603      	mov	r3, r0
    9f4c:	f88d 300f 	strb.w	r3, [sp, #15]
            if ((Std_ReturnType)E_OK == ValidStatus)
    9f50:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9f54:	2b00      	cmp	r3, #0
    9f56:	d142      	bne.n	9fde <Adc_Init+0xce>
            {
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_PARAMS == STD_ON) */
#if (ADC_PRECOMPILE_SUPPORT == STD_ON)
                ValidCoreId = Adc_CheckCurrentCoreId(Adc_ConfigVariantPredefined[CoreId], CoreIdTemp);
#else
                ValidCoreId = Adc_CheckCurrentCoreId(ConfigPtr, CoreId);
    9f58:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9f5c:	b2db      	uxtb	r3, r3
    9f5e:	4619      	mov	r1, r3
    9f60:	9801      	ldr	r0, [sp, #4]
    9f62:	f7ff fb9b 	bl	969c <Adc_CheckCurrentCoreId>
    9f66:	4603      	mov	r3, r0
    9f68:	f88d 300d 	strb.w	r3, [sp, #13]
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
                if ((Std_ReturnType)E_OK == ValidCoreId)
    9f6c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9f70:	2b00      	cmp	r3, #0
    9f72:	d12d      	bne.n	9fd0 <Adc_Init+0xc0>
                    /* ADC342 */
                    const Adc_ConfigType * predefined = Adc_ConfigVariantPredefined[CoreId];
                    Adc_apxCfgPtr[CoreId] = predefined;
#else
                    /* SWS_Adc_00054 */
                    Adc_apxCfgPtr[CoreId] = ConfigPtr;
    9f74:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9f78:	b2db      	uxtb	r3, r3
    9f7a:	4619      	mov	r1, r3
    9f7c:	4a20      	ldr	r2, [pc, #128]	; (a000 <Adc_Init+0xf0>)
    9f7e:	9b01      	ldr	r3, [sp, #4]
    9f80:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
                    /* Initialize the unit status for all units */
                    Adc_InitUnitStatus(CoreId);
    9f84:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9f88:	b2db      	uxtb	r3, r3
    9f8a:	4618      	mov	r0, r3
    9f8c:	f7ff fb36 	bl	95fc <Adc_InitUnitStatus>
                    /* Initialize the group status for all groups */
                    Adc_InitGroupsStatus(CoreId);
    9f90:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9f94:	b2db      	uxtb	r3, r3
    9f96:	4618      	mov	r0, r3
    9f98:	f7ff fac6 	bl	9528 <Adc_InitGroupsStatus>
                    /* Call the low level function to initialize driver */
                    TimeOutStatus = Adc_Ipw_Init(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr, CoreIdTemp);
    9f9c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9fa0:	b2db      	uxtb	r3, r3
    9fa2:	461a      	mov	r2, r3
    9fa4:	4b16      	ldr	r3, [pc, #88]	; (a000 <Adc_Init+0xf0>)
    9fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9faa:	681b      	ldr	r3, [r3, #0]
    9fac:	f89d 200e 	ldrb.w	r2, [sp, #14]
    9fb0:	4611      	mov	r1, r2
    9fb2:	4618      	mov	r0, r3
    9fb4:	f002 f848 	bl	c048 <Adc_Ipw_Init>
    9fb8:	4603      	mov	r3, r0
    9fba:	f88d 300c 	strb.w	r3, [sp, #12]

                    if ((Std_ReturnType)E_NOT_OK == TimeOutStatus)
    9fbe:	f89d 300c 	ldrb.w	r3, [sp, #12]
    9fc2:	2b01      	cmp	r3, #1
    9fc4:	d10b      	bne.n	9fde <Adc_Init+0xce>
                    {
                        /* Timeout is expired.*/
                        Adc_ReportDetRuntimeError((uint8)ADC_INIT_ID, (uint8)ADC_E_TIMEOUT);
    9fc6:	212b      	movs	r1, #43	; 0x2b
    9fc8:	2000      	movs	r0, #0
    9fca:	f7fe fde2 	bl	8b92 <Adc_ReportDetRuntimeError>
    9fce:	e006      	b.n	9fde <Adc_Init+0xce>
#endif /* ((ADC_ENABLE_TEMPSENSE_API == STD_ON) && (ADC_POWER_ON_TEMPSENSE == STD_ON)) */
                }
#if (ADC_DEV_ERROR_DETECT == STD_ON)
                else
                {
                    ValidStatus = (Std_ReturnType)E_NOT_OK;
    9fd0:	2301      	movs	r3, #1
    9fd2:	f88d 300f 	strb.w	r3, [sp, #15]
                    /* CPR_RTD_00420.adc */
                    Adc_ReportDetError((uint8)ADC_INIT_ID, (uint8)ADC_E_PARAM_CONFIG);
    9fd6:	210e      	movs	r1, #14
    9fd8:	2000      	movs	r0, #0
    9fda:	f7fe fdc5 	bl	8b68 <Adc_ReportDetError>
            }
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

#if (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_GLOBAL_CALL == STD_ON)
        }
        if ((Std_ReturnType)E_OK == ValidStatus)
    9fde:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9fe2:	2b00      	cmp	r3, #0
    9fe4:	d108      	bne.n	9ff8 <Adc_Init+0xe8>
        {
            Adc_EndValidateGloballCall(ValidStatus, ADC_INIT_ID, CoreId);
    9fe6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9fea:	b2da      	uxtb	r2, r3
    9fec:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9ff0:	2100      	movs	r1, #0
    9ff2:	4618      	mov	r0, r3
    9ff4:	f7fe ff88 	bl	8f08 <Adc_EndValidateGloballCall>
        }
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    9ff8:	bf00      	nop
    9ffa:	b005      	add	sp, #20
    9ffc:	f85d fb04 	ldr.w	pc, [sp], #4
    a000:	1fff8d40 	.word	0x1fff8d40

0000a004 <Adc_SetupResultBuffer>:

/* SWS_Adc_00419 */
/** @implements      Adc_SetupResultBuffer_Activity */
Std_ReturnType Adc_SetupResultBuffer(Adc_GroupType Group,
                                     Adc_ValueGroupType * const DataBufferPtr)
{
    a004:	b500      	push	{lr}
    a006:	b085      	sub	sp, #20
    a008:	4603      	mov	r3, r0
    a00a:	9100      	str	r1, [sp, #0]
    a00c:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType TempReturn = (Std_ReturnType)E_NOT_OK;
    a010:	2301      	movs	r3, #1
    a012:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_GroupType GroupIndex;
    const Adc_GroupConfigurationType * GroupPtr = NULL_PTR;
#endif /* ADC_DMA_SUPPORTED */
#if ((ADC_VALIDATE_CALL_AND_GROUP == STD_ON) || (defined(ADC_DMA_SUPPORTED)))
    volatile uint8 CoreId;
    CoreId = Adc_GetCoreID();
    a016:	f002 fac3 	bl	c5a0 <Adc_GetCoreID>
    a01a:	4603      	mov	r3, r0
    a01c:	f88d 300e 	strb.w	r3, [sp, #14]
#endif /* ((ADC_VALIDATE_CALL_AND_GROUP == STD_ON) || (defined(ADC_DMA_SUPPORTED))) */
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_SETUPRESULTBUFFER_ID, Group, CoreId))
    a020:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a024:	b2da      	uxtb	r2, r3
    a026:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a02a:	4619      	mov	r1, r3
    a02c:	200c      	movs	r0, #12
    a02e:	f7ff f9a7 	bl	9380 <Adc_ValidateCallAndGroup>
    a032:	4603      	mov	r3, r0
    a034:	2b00      	cmp	r3, #0
    a036:	d11c      	bne.n	a072 <Adc_SetupResultBuffer+0x6e>
           to avoid false detection of CWE AUDIT.SPECULATIVE_EXECUTION_DATA_LEAK */
        GroupPtr = &Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex];
#endif /* ADC_DMA_SUPPORTED */

#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_SETUPRESULTBUFFER_ID, DataBufferPtr))
    a038:	9900      	ldr	r1, [sp, #0]
    a03a:	200c      	movs	r0, #12
    a03c:	f7fe fe28 	bl	8c90 <Adc_ValidatePtr>
    a040:	4603      	mov	r3, r0
    a042:	2b00      	cmp	r3, #0
    a044:	d115      	bne.n	a072 <Adc_SetupResultBuffer+0x6e>
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
            if ((Std_ReturnType)E_OK == Adc_ValidateSetupBufferNotBusy(Group))
    a046:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a04a:	4618      	mov	r0, r3
    a04c:	f7ff f88a 	bl	9164 <Adc_ValidateSetupBufferNotBusy>
    a050:	4603      	mov	r3, r0
    a052:	2b00      	cmp	r3, #0
    a054:	d10d      	bne.n	a072 <Adc_SetupResultBuffer+0x6e>
            {
                /* SWS_Adc_00420 */
                Adc_axGroupStatus[Group].ResultsBufferPtr = DataBufferPtr;
    a056:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a05a:	4909      	ldr	r1, [pc, #36]	; (a080 <Adc_SetupResultBuffer+0x7c>)
    a05c:	4613      	mov	r3, r2
    a05e:	009b      	lsls	r3, r3, #2
    a060:	4413      	add	r3, r2
    a062:	009b      	lsls	r3, r3, #2
    a064:	440b      	add	r3, r1
    a066:	330c      	adds	r3, #12
    a068:	9a00      	ldr	r2, [sp, #0]
    a06a:	601a      	str	r2, [r3, #0]
                    /* Need to reset last buffer to invalid value before starting conversion. Because since External Dma Channel is used,
                    last buffer will be used to check by Adc_ReadGroup to make sure the results of all channel was available. */
                    DataBufferPtr[(GroupPtr->AssignedChannelCount - (Adc_ChannelIndexType)1U)] = ADC_IPW_INVALID_DATA_RESULT_DMA;
                }
#endif /* ADC_DMA_SUPPORTED */
                TempReturn = (Std_ReturnType)E_OK;
    a06c:	2300      	movs	r3, #0
    a06e:	f88d 300f 	strb.w	r3, [sp, #15]

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return TempReturn;
    a072:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    a076:	4618      	mov	r0, r3
    a078:	b005      	add	sp, #20
    a07a:	f85d fb04 	ldr.w	pc, [sp], #4
    a07e:	bf00      	nop
    a080:	1fff8d48 	.word	0x1fff8d48

0000a084 <Adc_DeInit>:

#if (ADC_DEINIT_API == STD_ON)
/* SWS_Adc_00366, SWS_Adc_00111, SWS_Adc_00110 */
/** @implements      Adc_DeInit_Activity */
void Adc_DeInit(void)
{
    a084:	b500      	push	{lr}
    a086:	b083      	sub	sp, #12
    volatile uint8 CoreId;
#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
    Adc_HwUnitType LogicalHwUnitId = 0U;
    a088:	2300      	movs	r3, #0
    a08a:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 CoreIdTemp;
    Std_ReturnType TempReturn;

    Std_ReturnType ValidStatus;

    CoreId = Adc_GetCoreID();
    a08e:	f002 fa87 	bl	c5a0 <Adc_GetCoreID>
    a092:	4603      	mov	r3, r0
    a094:	f88d 3002 	strb.w	r3, [sp, #2]
    CoreIdTemp = CoreId; /* Used to avoid MISRA */
    a098:	f89d 3002 	ldrb.w	r3, [sp, #2]
    a09c:	f88d 3005 	strb.w	r3, [sp, #5]
#if (ADC_VALIDATE_GLOBAL_CALL == STD_ON)
    ValidStatus = Adc_ValidateGloballCall(ADC_DEINIT_ID, CoreId);
    a0a0:	f89d 3002 	ldrb.w	r3, [sp, #2]
    a0a4:	b2db      	uxtb	r3, r3
    a0a6:	4619      	mov	r1, r3
    a0a8:	2001      	movs	r0, #1
    a0aa:	f7fe fda2 	bl	8bf2 <Adc_ValidateGloballCall>
    a0ae:	4603      	mov	r3, r0
    a0b0:	f88d 3006 	strb.w	r3, [sp, #6]
    if ((Std_ReturnType)E_OK == ValidStatus)
    a0b4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a0b8:	2b00      	cmp	r3, #0
    a0ba:	d160      	bne.n	a17e <Adc_DeInit+0xfa>
    {
#endif /* ADC_VALIDATE_GLOBAL_CALL == STD_ON */
        ValidCoreId = Adc_CheckCurrentCoreId(Adc_apxCfgPtr[CoreId], CoreIdTemp);
    a0bc:	f89d 3002 	ldrb.w	r3, [sp, #2]
    a0c0:	b2db      	uxtb	r3, r3
    a0c2:	461a      	mov	r2, r3
    a0c4:	4b34      	ldr	r3, [pc, #208]	; (a198 <Adc_DeInit+0x114>)
    a0c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a0ca:	f89d 2005 	ldrb.w	r2, [sp, #5]
    a0ce:	4611      	mov	r1, r2
    a0d0:	4618      	mov	r0, r3
    a0d2:	f7ff fae3 	bl	969c <Adc_CheckCurrentCoreId>
    a0d6:	4603      	mov	r3, r0
    a0d8:	f88d 3004 	strb.w	r3, [sp, #4]
        if ((Std_ReturnType)E_OK == ValidCoreId)
    a0dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
    a0e0:	2b00      	cmp	r3, #0
    a0e2:	d148      	bne.n	a176 <Adc_DeInit+0xf2>
        {
            ValidStatus = Adc_ValidateDeInitNotBusy(CoreId);
    a0e4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    a0e8:	b2db      	uxtb	r3, r3
    a0ea:	4618      	mov	r0, r3
    a0ec:	f7fe ffec 	bl	90c8 <Adc_ValidateDeInitNotBusy>
    a0f0:	4603      	mov	r3, r0
    a0f2:	f88d 3006 	strb.w	r3, [sp, #6]
            if ((Std_ReturnType)E_OK == ValidStatus)
    a0f6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a0fa:	2b00      	cmp	r3, #0
    a0fc:	d13f      	bne.n	a17e <Adc_DeInit+0xfa>
            {

                TempReturn = Adc_Ipw_DeInit(CoreId);
    a0fe:	f89d 3002 	ldrb.w	r3, [sp, #2]
    a102:	b2db      	uxtb	r3, r3
    a104:	4618      	mov	r0, r3
    a106:	f001 ffe4 	bl	c0d2 <Adc_Ipw_DeInit>
    a10a:	4603      	mov	r3, r0
    a10c:	f88d 3003 	strb.w	r3, [sp, #3]
                if ((Std_ReturnType)E_NOT_OK == TempReturn)
    a110:	f89d 3003 	ldrb.w	r3, [sp, #3]
    a114:	2b01      	cmp	r3, #1
    a116:	d103      	bne.n	a120 <Adc_DeInit+0x9c>
                {
                    Adc_ReportDetRuntimeError((uint8)ADC_DEINIT_ID, (uint8)ADC_E_TIMEOUT);
    a118:	212b      	movs	r1, #43	; 0x2b
    a11a:	2001      	movs	r0, #1
    a11c:	f7fe fd39 	bl	8b92 <Adc_ReportDetRuntimeError>
                }
#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
                for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    a120:	2300      	movs	r3, #0
    a122:	f88d 3007 	strb.w	r3, [sp, #7]
    a126:	e019      	b.n	a15c <Adc_DeInit+0xd8>
                {
                    if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    a128:	f89d 3002 	ldrb.w	r3, [sp, #2]
    a12c:	b2db      	uxtb	r3, r3
    a12e:	461a      	mov	r2, r3
    a130:	4b19      	ldr	r3, [pc, #100]	; (a198 <Adc_DeInit+0x114>)
    a132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a136:	681a      	ldr	r2, [r3, #0]
    a138:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a13c:	4413      	add	r3, r2
    a13e:	7f9b      	ldrb	r3, [r3, #30]
    a140:	2b01      	cmp	r3, #1
    a142:	d106      	bne.n	a152 <Adc_DeInit+0xce>
                    {
                        Adc_axUnitStatus[LogicalHwUnitId].Sc1Used = 0U;
    a144:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a148:	4a14      	ldr	r2, [pc, #80]	; (a19c <Adc_DeInit+0x118>)
    a14a:	00db      	lsls	r3, r3, #3
    a14c:	4413      	add	r3, r2
    a14e:	2200      	movs	r2, #0
    a150:	719a      	strb	r2, [r3, #6]
                for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    a152:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a156:	3301      	adds	r3, #1
    a158:	f88d 3007 	strb.w	r3, [sp, #7]
    a15c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a160:	2b01      	cmp	r3, #1
    a162:	d9e1      	bls.n	a128 <Adc_DeInit+0xa4>
                    }
                }
#endif /* (ADC_IPW_PDB_AVAILABLE == STD_ON) */
                /* Undefined the global pointer to the configuration */
                Adc_apxCfgPtr[CoreId] = NULL_PTR;
    a164:	f89d 3002 	ldrb.w	r3, [sp, #2]
    a168:	b2db      	uxtb	r3, r3
    a16a:	4619      	mov	r1, r3
    a16c:	4b0a      	ldr	r3, [pc, #40]	; (a198 <Adc_DeInit+0x114>)
    a16e:	2200      	movs	r2, #0
    a170:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    a174:	e003      	b.n	a17e <Adc_DeInit+0xfa>
        }
#if (ADC_VALIDATE_GLOBAL_CALL == STD_ON)
        else
        {
            /* CPR_RTD_00420.adc */
            Adc_ReportDetError(ADC_DEINIT_ID, (uint8)ADC_E_PARAM_CONFIG);
    a176:	210e      	movs	r1, #14
    a178:	2001      	movs	r0, #1
    a17a:	f7fe fcf5 	bl	8b68 <Adc_ReportDetError>
        }
    }
    Adc_EndValidateGloballCall(ValidStatus, ADC_DEINIT_ID, CoreId);
    a17e:	f89d 3002 	ldrb.w	r3, [sp, #2]
    a182:	b2da      	uxtb	r2, r3
    a184:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a188:	2101      	movs	r1, #1
    a18a:	4618      	mov	r0, r3
    a18c:	f7fe febc 	bl	8f08 <Adc_EndValidateGloballCall>
#endif /* ADC_VALIDATE_GLOBAL_CALL == STD_ON */
}
    a190:	bf00      	nop
    a192:	b003      	add	sp, #12
    a194:	f85d fb04 	ldr.w	pc, [sp], #4
    a198:	1fff8d40 	.word	0x1fff8d40
    a19c:	1fff8d70 	.word	0x1fff8d70

0000a1a0 <Adc_StartGroupConversion>:

#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
/* SWS_Adc_00367, SWS_Adc_00356, SWS_Adc_00156, SWS_Adc_00061, SWS_Adc_00413 */
/** @implements      Adc_StartGroupConversion_Activity */
void Adc_StartGroupConversion(Adc_GroupType Group)
{
    a1a0:	b500      	push	{lr}
    a1a2:	b085      	sub	sp, #20
    a1a4:	4603      	mov	r3, r0
    a1a6:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId;
    Adc_GroupType GroupIndex = 0U;
    a1aa:	2300      	movs	r3, #0
    a1ac:	f8ad 300e 	strh.w	r3, [sp, #14]
    /* ADC Hardware unit on which the requested group will run */
    Adc_HwUnitType LogicalHwUnitId = 0U;
    a1b0:	2300      	movs	r3, #0
    a1b2:	f88d 300d 	strb.w	r3, [sp, #13]

    CoreId = Adc_GetCoreID();
    a1b6:	f002 f9f3 	bl	c5a0 <Adc_GetCoreID>
    a1ba:	4603      	mov	r3, r0
    a1bc:	f88d 300c 	strb.w	r3, [sp, #12]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_STARTGROUPCONVERSION_ID, Group, CoreId))
    a1c0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    a1c4:	b2da      	uxtb	r2, r3
    a1c6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a1ca:	4619      	mov	r1, r3
    a1cc:	2002      	movs	r0, #2
    a1ce:	f7ff f8d7 	bl	9380 <Adc_ValidateCallAndGroup>
    a1d2:	4603      	mov	r3, r0
    a1d4:	2b00      	cmp	r3, #0
    a1d6:	d141      	bne.n	a25c <Adc_StartGroupConversion+0xbc>
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
        /* Get the mapping index of group in the current partition */
        GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a1d8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    a1dc:	b2db      	uxtb	r3, r3
    a1de:	461a      	mov	r2, r3
    a1e0:	4b20      	ldr	r3, [pc, #128]	; (a264 <Adc_StartGroupConversion+0xc4>)
    a1e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a1e6:	68da      	ldr	r2, [r3, #12]
    a1e8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a1ec:	005b      	lsls	r3, r3, #1
    a1ee:	4413      	add	r3, r2
    a1f0:	881b      	ldrh	r3, [r3, #0]
    a1f2:	f8ad 300e 	strh.w	r3, [sp, #14]

        if ((Std_ReturnType)E_OK == Adc_ValidateStateStartGroupConvNotBusy(Group, CoreId))
    a1f6:	f89d 300c 	ldrb.w	r3, [sp, #12]
    a1fa:	b2da      	uxtb	r2, r3
    a1fc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a200:	4611      	mov	r1, r2
    a202:	4618      	mov	r0, r3
    a204:	f7fe ffd2 	bl	91ac <Adc_ValidateStateStartGroupConvNotBusy>
    a208:	4603      	mov	r3, r0
    a20a:	2b00      	cmp	r3, #0
    a20c:	d126      	bne.n	a25c <Adc_StartGroupConversion+0xbc>
        {
#if (ADC_VALIDATE_PARAMS == STD_ON)
            if ((Std_ReturnType)E_OK == Adc_ValidateExtraParams(ADC_STARTGROUPCONVERSION_ID,
    a20e:	f89d 300c 	ldrb.w	r3, [sp, #12]
    a212:	b2db      	uxtb	r3, r3
    a214:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a218:	2107      	movs	r1, #7
    a21a:	2002      	movs	r0, #2
    a21c:	f7fe fe1c 	bl	8e58 <Adc_ValidateExtraParams>
    a220:	4603      	mov	r3, r0
    a222:	2b00      	cmp	r3, #0
    a224:	d11a      	bne.n	a25c <Adc_StartGroupConversion+0xbc>
               )
            {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

                /* Get the unit to which the group belongs to */
                LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    a226:	f89d 300c 	ldrb.w	r3, [sp, #12]
    a22a:	b2db      	uxtb	r3, r3
    a22c:	461a      	mov	r2, r3
    a22e:	4b0d      	ldr	r3, [pc, #52]	; (a264 <Adc_StartGroupConversion+0xc4>)
    a230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a234:	685a      	ldr	r2, [r3, #4]
    a236:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    a23a:	2134      	movs	r1, #52	; 0x34
    a23c:	fb01 f303 	mul.w	r3, r1, r3
    a240:	4413      	add	r3, r2
    a242:	789b      	ldrb	r3, [r3, #2]
    a244:	f88d 300d 	strb.w	r3, [sp, #13]
                /* Update queue */
                Adc_UpdateStatusStartConversion(Group, LogicalHwUnitId, CoreId);
    a248:	f89d 300c 	ldrb.w	r3, [sp, #12]
    a24c:	b2da      	uxtb	r2, r3
    a24e:	f89d 100d 	ldrb.w	r1, [sp, #13]
    a252:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a256:	4618      	mov	r0, r3
    a258:	f7ff fa53 	bl	9702 <Adc_UpdateStatusStartConversion>
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
        }
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    a25c:	bf00      	nop
    a25e:	b005      	add	sp, #20
    a260:	f85d fb04 	ldr.w	pc, [sp], #4
    a264:	1fff8d40 	.word	0x1fff8d40

0000a268 <Adc_StopGroupConversion>:

/* SWS_Adc_00368, SWS_Adc_00356, SWS_Adc_00413 */
/** @implements      Adc_StopGroupConversion_Activity */
void Adc_StopGroupConversion(Adc_GroupType Group)
{
    a268:	b500      	push	{lr}
    a26a:	b085      	sub	sp, #20
    a26c:	4603      	mov	r3, r0
    a26e:	f8ad 3006 	strh.w	r3, [sp, #6]
    /* ADC Logical Unit Id on which the requested group will run */
    Adc_HwUnitType LogicalHwUnitId = 0U;
    a272:	2300      	movs	r3, #0
    a274:	f88d 300f 	strb.w	r3, [sp, #15]
    volatile uint8 CoreId;
    Adc_GroupType GroupIndex = 0U;
    a278:	2300      	movs	r3, #0
    a27a:	f8ad 300c 	strh.w	r3, [sp, #12]

    CoreId = Adc_GetCoreID();
    a27e:	f002 f98f 	bl	c5a0 <Adc_GetCoreID>
    a282:	4603      	mov	r3, r0
    a284:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_STOPGROUPCONVERSION_ID, Group, CoreId))
    a288:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a28c:	b2da      	uxtb	r2, r3
    a28e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a292:	4619      	mov	r1, r3
    a294:	2003      	movs	r0, #3
    a296:	f7ff f873 	bl	9380 <Adc_ValidateCallAndGroup>
    a29a:	4603      	mov	r3, r0
    a29c:	2b00      	cmp	r3, #0
    a29e:	d141      	bne.n	a324 <Adc_StopGroupConversion+0xbc>
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

        if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_STOPGROUPCONVERSION_ID, Group, CoreId))
    a2a0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a2a4:	b2da      	uxtb	r2, r3
    a2a6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a2aa:	4619      	mov	r1, r3
    a2ac:	2003      	movs	r0, #3
    a2ae:	f7fe fff5 	bl	929c <Adc_ValidateStateNotIdle>
    a2b2:	4603      	mov	r3, r0
    a2b4:	2b00      	cmp	r3, #0
    a2b6:	d135      	bne.n	a324 <Adc_StopGroupConversion+0xbc>
        {
#if (ADC_VALIDATE_PARAMS == STD_ON)
            if ((Std_ReturnType)E_OK == Adc_ValidateExtraParams(ADC_STOPGROUPCONVERSION_ID,
    a2b8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a2bc:	b2db      	uxtb	r3, r3
    a2be:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a2c2:	2102      	movs	r1, #2
    a2c4:	2003      	movs	r0, #3
    a2c6:	f7fe fdc7 	bl	8e58 <Adc_ValidateExtraParams>
    a2ca:	4603      	mov	r3, r0
    a2cc:	2b00      	cmp	r3, #0
    a2ce:	d129      	bne.n	a324 <Adc_StopGroupConversion+0xbc>
                                                                CoreId
                                                               )
               )
            {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a2d0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a2d4:	b2db      	uxtb	r3, r3
    a2d6:	461a      	mov	r2, r3
    a2d8:	4b14      	ldr	r3, [pc, #80]	; (a32c <Adc_StopGroupConversion+0xc4>)
    a2da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a2de:	68da      	ldr	r2, [r3, #12]
    a2e0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a2e4:	005b      	lsls	r3, r3, #1
    a2e6:	4413      	add	r3, r2
    a2e8:	881b      	ldrh	r3, [r3, #0]
    a2ea:	f8ad 300c 	strh.w	r3, [sp, #12]
                /* Get the unit to which the group belongs to */
                LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    a2ee:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a2f2:	b2db      	uxtb	r3, r3
    a2f4:	461a      	mov	r2, r3
    a2f6:	4b0d      	ldr	r3, [pc, #52]	; (a32c <Adc_StopGroupConversion+0xc4>)
    a2f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a2fc:	685a      	ldr	r2, [r3, #4]
    a2fe:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    a302:	2134      	movs	r1, #52	; 0x34
    a304:	fb01 f303 	mul.w	r3, r1, r3
    a308:	4413      	add	r3, r2
    a30a:	789b      	ldrb	r3, [r3, #2]
    a30c:	f88d 300f 	strb.w	r3, [sp, #15]
                Adc_UpdateStatusStopConversion(Group, LogicalHwUnitId, CoreId);
    a310:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a314:	b2da      	uxtb	r2, r3
    a316:	f89d 100f 	ldrb.w	r1, [sp, #15]
    a31a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a31e:	4618      	mov	r0, r3
    a320:	f7ff fae8 	bl	98f4 <Adc_UpdateStatusStopConversion>
        }

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    a324:	bf00      	nop
    a326:	b005      	add	sp, #20
    a328:	f85d fb04 	ldr.w	pc, [sp], #4
    a32c:	1fff8d40 	.word	0x1fff8d40

0000a330 <Adc_ReadGroup>:
#if (ADC_READ_GROUP_API == STD_ON)
/* SWS_Adc_00369, SWS_Adc_00383, SWS_Adc_00503 */
/** @implements      Adc_ReadGroup_Activity */
Std_ReturnType Adc_ReadGroup(Adc_GroupType Group,
                             Adc_ValueGroupType * DataBufferPtr)
{
    a330:	b500      	push	{lr}
    a332:	b085      	sub	sp, #20
    a334:	4603      	mov	r3, r0
    a336:	9100      	str	r1, [sp, #0]
    a338:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId;
    /* Return Value */
    Std_ReturnType GroupRet = (Std_ReturnType)E_NOT_OK;
    a33c:	2301      	movs	r3, #1
    a33e:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean Flag = TRUE;
    a342:	2301      	movs	r3, #1
    a344:	f88d 300d 	strb.w	r3, [sp, #13]

    CoreId = Adc_GetCoreID();
    a348:	f002 f92a 	bl	c5a0 <Adc_GetCoreID>
    a34c:	4603      	mov	r3, r0
    a34e:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_VALUEREADGROUP_ID, Group, CoreId))
    a352:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a356:	b2da      	uxtb	r2, r3
    a358:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a35c:	4619      	mov	r1, r3
    a35e:	2004      	movs	r0, #4
    a360:	f7ff f80e 	bl	9380 <Adc_ValidateCallAndGroup>
    a364:	4603      	mov	r3, r0
    a366:	2b00      	cmp	r3, #0
    a368:	d134      	bne.n	a3d4 <Adc_ReadGroup+0xa4>
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_VALUEREADGROUP_ID, DataBufferPtr))
    a36a:	9900      	ldr	r1, [sp, #0]
    a36c:	2004      	movs	r0, #4
    a36e:	f7fe fc8f 	bl	8c90 <Adc_ValidatePtr>
    a372:	4603      	mov	r3, r0
    a374:	2b00      	cmp	r3, #0
    a376:	d12d      	bne.n	a3d4 <Adc_ReadGroup+0xa4>
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

            if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_VALUEREADGROUP_ID, Group, CoreId))
    a378:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a37c:	b2da      	uxtb	r2, r3
    a37e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a382:	4619      	mov	r1, r3
    a384:	2004      	movs	r0, #4
    a386:	f7fe ff89 	bl	929c <Adc_ValidateStateNotIdle>
    a38a:	4603      	mov	r3, r0
    a38c:	2b00      	cmp	r3, #0
    a38e:	d121      	bne.n	a3d4 <Adc_ReadGroup+0xa4>
            {
                /* SWS_Adc_00447 */
                GroupRet = Adc_Ipw_ReadGroup(Group, DataBufferPtr, &Flag, CoreId);
    a390:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a394:	b2db      	uxtb	r3, r3
    a396:	f10d 020d 	add.w	r2, sp, #13
    a39a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    a39e:	9900      	ldr	r1, [sp, #0]
    a3a0:	f002 f857 	bl	c452 <Adc_Ipw_ReadGroup>
    a3a4:	4603      	mov	r3, r0
    a3a6:	f88d 300f 	strb.w	r3, [sp, #15]
                /*if the conversion is finished or if the limit checking was failed for the group without interrupts*/
                if (((Std_ReturnType)E_OK == GroupRet) || (FALSE == Flag))
    a3aa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a3ae:	2b00      	cmp	r3, #0
    a3b0:	d006      	beq.n	a3c0 <Adc_ReadGroup+0x90>
    a3b2:	f89d 300d 	ldrb.w	r3, [sp, #13]
    a3b6:	f083 0301 	eor.w	r3, r3, #1
    a3ba:	b2db      	uxtb	r3, r3
    a3bc:	2b00      	cmp	r3, #0
    a3be:	d009      	beq.n	a3d4 <Adc_ReadGroup+0xa4>
                {
                    Adc_UpdateStatusReadGroup(Group, Flag, CoreId);
    a3c0:	f89d 100d 	ldrb.w	r1, [sp, #13]
    a3c4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a3c8:	b2da      	uxtb	r2, r3
    a3ca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a3ce:	4618      	mov	r0, r3
    a3d0:	f7ff fb42 	bl	9a58 <Adc_UpdateStatusReadGroup>

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return GroupRet;
    a3d4:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    a3d8:	4618      	mov	r0, r3
    a3da:	b005      	add	sp, #20
    a3dc:	f85d fb04 	ldr.w	pc, [sp], #4

0000a3e0 <Adc_GetGroupStatus>:
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */

/* SWS_Adc_00374, SWS_Adc_00140, SWS_Adc_00503, SWS_Adc_00413 */
/** @implements      Adc_GetGroupStatus_Activity */
Adc_StatusType Adc_GetGroupStatus(Adc_GroupType Group)
{
    a3e0:	b500      	push	{lr}
    a3e2:	b085      	sub	sp, #20
    a3e4:	4603      	mov	r3, r0
    a3e6:	f8ad 3006 	strh.w	r3, [sp, #6]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    volatile uint8 CoreId;
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
    Adc_StatusType TempReturn = ADC_IDLE;
    a3ea:	2300      	movs	r3, #0
    a3ec:	9303      	str	r3, [sp, #12]

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    CoreId = Adc_GetCoreID();
    a3ee:	f002 f8d7 	bl	c5a0 <Adc_GetCoreID>
    a3f2:	4603      	mov	r3, r0
    a3f4:	f88d 300b 	strb.w	r3, [sp, #11]
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_GETGROUPSTATUS_ID, Group, CoreId))
    a3f8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a3fc:	b2da      	uxtb	r2, r3
    a3fe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a402:	4619      	mov	r1, r3
    a404:	2009      	movs	r0, #9
    a406:	f7fe ffbb 	bl	9380 <Adc_ValidateCallAndGroup>
    a40a:	4603      	mov	r3, r0
    a40c:	2b00      	cmp	r3, #0
    a40e:	d109      	bne.n	a424 <Adc_GetGroupStatus+0x44>
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
        /* SWS_Adc_00220 */
        TempReturn = Adc_axGroupStatus[Group].Conversion;
    a410:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a414:	4906      	ldr	r1, [pc, #24]	; (a430 <Adc_GetGroupStatus+0x50>)
    a416:	4613      	mov	r3, r2
    a418:	009b      	lsls	r3, r3, #2
    a41a:	4413      	add	r3, r2
    a41c:	009b      	lsls	r3, r3, #2
    a41e:	440b      	add	r3, r1
    a420:	681b      	ldr	r3, [r3, #0]
    a422:	9303      	str	r3, [sp, #12]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return(TempReturn);
    a424:	9b03      	ldr	r3, [sp, #12]
}
    a426:	4618      	mov	r0, r3
    a428:	b005      	add	sp, #20
    a42a:	f85d fb04 	ldr.w	pc, [sp], #4
    a42e:	bf00      	nop
    a430:	1fff8d48 	.word	0x1fff8d48

0000a434 <Adc_GetStreamLastPointer>:

/* SWS_Adc_00375, SWS_Adc_00382 */
/** @implements      Adc_GetStreamLastPointer_Activity */
Adc_StreamNumSampleType Adc_GetStreamLastPointer(Adc_GroupType Group,
                                                 Adc_ValueGroupType ** PtrToSamplePtr)
{
    a434:	b500      	push	{lr}
    a436:	b085      	sub	sp, #20
    a438:	4603      	mov	r3, r0
    a43a:	9100      	str	r1, [sp, #0]
    a43c:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId = Adc_GetCoreID();
    a440:	f002 f8ae 	bl	c5a0 <Adc_GetCoreID>
    a444:	4603      	mov	r3, r0
    a446:	f88d 3008 	strb.w	r3, [sp, #8]
    Adc_GroupType GroupIndex = 0U;
    a44a:	2300      	movs	r3, #0
    a44c:	f8ad 300a 	strh.w	r3, [sp, #10]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    const Adc_GroupConfigurationType * GroupPtr;
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
    /* Number of samples to return */
    Adc_StreamNumSampleType NumberOfResults = 0U;
    a450:	2300      	movs	r3, #0
    a452:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_StreamNumSampleType ResultIndex = 0U;
    a456:	2300      	movs	r3, #0
    a458:	f8ad 300c 	strh.w	r3, [sp, #12]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    Adc_ChannelIndexType ChannelCount;
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    Std_ReturnType ValidStatus = Adc_ValidateCallAndGroup(ADC_GETSTREAMLASTPOINTER_ID, Group, CoreId);
    a45c:	f89d 3008 	ldrb.w	r3, [sp, #8]
    a460:	b2da      	uxtb	r2, r3
    a462:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a466:	4619      	mov	r1, r3
    a468:	200b      	movs	r0, #11
    a46a:	f7fe ff89 	bl	9380 <Adc_ValidateCallAndGroup>
    a46e:	4603      	mov	r3, r0
    a470:	f88d 3009 	strb.w	r3, [sp, #9]
    if (ValidStatus == (Std_ReturnType)E_OK)
    a474:	f89d 3009 	ldrb.w	r3, [sp, #9]
    a478:	2b00      	cmp	r3, #0
    a47a:	f040 809f 	bne.w	a5bc <Adc_GetStreamLastPointer+0x188>
        /* Get channel count from configuration */
        ChannelCount = GroupPtr->AssignedChannelCount;
#endif
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

        if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_GETSTREAMLASTPOINTER_ID, Group, CoreId))
    a47e:	f89d 3008 	ldrb.w	r3, [sp, #8]
    a482:	b2da      	uxtb	r2, r3
    a484:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a488:	4619      	mov	r1, r3
    a48a:	200b      	movs	r0, #11
    a48c:	f7fe ff06 	bl	929c <Adc_ValidateStateNotIdle>
    a490:	4603      	mov	r3, r0
    a492:	2b00      	cmp	r3, #0
    a494:	f040 808e 	bne.w	a5b4 <Adc_GetStreamLastPointer+0x180>
        {
            *PtrToSamplePtr = NULL_PTR;
    a498:	9b00      	ldr	r3, [sp, #0]
    a49a:	2200      	movs	r2, #0
    a49c:	601a      	str	r2, [r3, #0]

            if ((ADC_IDLE != Adc_axGroupStatus[Group].Conversion) && \
    a49e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a4a2:	494b      	ldr	r1, [pc, #300]	; (a5d0 <Adc_GetStreamLastPointer+0x19c>)
    a4a4:	4613      	mov	r3, r2
    a4a6:	009b      	lsls	r3, r3, #2
    a4a8:	4413      	add	r3, r2
    a4aa:	009b      	lsls	r3, r3, #2
    a4ac:	440b      	add	r3, r1
    a4ae:	681b      	ldr	r3, [r3, #0]
    a4b0:	2b00      	cmp	r3, #0
    a4b2:	f000 8086 	beq.w	a5c2 <Adc_GetStreamLastPointer+0x18e>
                (ADC_BUSY != Adc_axGroupStatus[Group].Conversion)) /* SWS_Adc_00216 */
    a4b6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a4ba:	4945      	ldr	r1, [pc, #276]	; (a5d0 <Adc_GetStreamLastPointer+0x19c>)
    a4bc:	4613      	mov	r3, r2
    a4be:	009b      	lsls	r3, r3, #2
    a4c0:	4413      	add	r3, r2
    a4c2:	009b      	lsls	r3, r3, #2
    a4c4:	440b      	add	r3, r1
    a4c6:	681b      	ldr	r3, [r3, #0]
            if ((ADC_IDLE != Adc_axGroupStatus[Group].Conversion) && \
    a4c8:	2b01      	cmp	r3, #1
    a4ca:	d07a      	beq.n	a5c2 <Adc_GetStreamLastPointer+0x18e>
            {
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a4cc:	f89d 3008 	ldrb.w	r3, [sp, #8]
    a4d0:	b2db      	uxtb	r3, r3
    a4d2:	461a      	mov	r2, r3
    a4d4:	4b3f      	ldr	r3, [pc, #252]	; (a5d4 <Adc_GetStreamLastPointer+0x1a0>)
    a4d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a4da:	68da      	ldr	r2, [r3, #12]
    a4dc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a4e0:	005b      	lsls	r3, r3, #1
    a4e2:	4413      	add	r3, r2
    a4e4:	881b      	ldrh	r3, [r3, #0]
    a4e6:	f8ad 300a 	strh.w	r3, [sp, #10]
                if ((Adc_StreamNumSampleType)0U == Adc_axGroupStatus[Group].ResultIndex)
    a4ea:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a4ee:	4938      	ldr	r1, [pc, #224]	; (a5d0 <Adc_GetStreamLastPointer+0x19c>)
    a4f0:	4613      	mov	r3, r2
    a4f2:	009b      	lsls	r3, r3, #2
    a4f4:	4413      	add	r3, r2
    a4f6:	009b      	lsls	r3, r3, #2
    a4f8:	440b      	add	r3, r1
    a4fa:	3308      	adds	r3, #8
    a4fc:	881b      	ldrh	r3, [r3, #0]
    a4fe:	b29b      	uxth	r3, r3
    a500:	2b00      	cmp	r3, #0
    a502:	d123      	bne.n	a54c <Adc_GetStreamLastPointer+0x118>
                {
                    ResultIndex = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].NumSamples - (Adc_StreamNumSampleType)1U;
    a504:	f89d 3008 	ldrb.w	r3, [sp, #8]
    a508:	b2db      	uxtb	r3, r3
    a50a:	461a      	mov	r2, r3
    a50c:	4b31      	ldr	r3, [pc, #196]	; (a5d4 <Adc_GetStreamLastPointer+0x1a0>)
    a50e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a512:	685a      	ldr	r2, [r3, #4]
    a514:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    a518:	2134      	movs	r1, #52	; 0x34
    a51a:	fb01 f303 	mul.w	r3, r1, r3
    a51e:	4413      	add	r3, r2
    a520:	8b9b      	ldrh	r3, [r3, #28]
    a522:	3b01      	subs	r3, #1
    a524:	f8ad 300c 	strh.w	r3, [sp, #12]
                    /* SWS_Adc_00387 */
                    NumberOfResults = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].NumSamples;
    a528:	f89d 3008 	ldrb.w	r3, [sp, #8]
    a52c:	b2db      	uxtb	r3, r3
    a52e:	461a      	mov	r2, r3
    a530:	4b28      	ldr	r3, [pc, #160]	; (a5d4 <Adc_GetStreamLastPointer+0x1a0>)
    a532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a536:	685a      	ldr	r2, [r3, #4]
    a538:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    a53c:	2134      	movs	r1, #52	; 0x34
    a53e:	fb01 f303 	mul.w	r3, r1, r3
    a542:	4413      	add	r3, r2
    a544:	8b9b      	ldrh	r3, [r3, #28]
    a546:	f8ad 300e 	strh.w	r3, [sp, #14]
    a54a:	e019      	b.n	a580 <Adc_GetStreamLastPointer+0x14c>
                }
                else
                {
                    ResultIndex = Adc_axGroupStatus[Group].ResultIndex - (Adc_StreamNumSampleType)1U;
    a54c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a550:	491f      	ldr	r1, [pc, #124]	; (a5d0 <Adc_GetStreamLastPointer+0x19c>)
    a552:	4613      	mov	r3, r2
    a554:	009b      	lsls	r3, r3, #2
    a556:	4413      	add	r3, r2
    a558:	009b      	lsls	r3, r3, #2
    a55a:	440b      	add	r3, r1
    a55c:	3308      	adds	r3, #8
    a55e:	881b      	ldrh	r3, [r3, #0]
    a560:	b29b      	uxth	r3, r3
    a562:	3b01      	subs	r3, #1
    a564:	f8ad 300c 	strh.w	r3, [sp, #12]
                    /* SWS_Adc_00387 */
                    NumberOfResults = Adc_axGroupStatus[Group].ResultIndex;
    a568:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a56c:	4918      	ldr	r1, [pc, #96]	; (a5d0 <Adc_GetStreamLastPointer+0x19c>)
    a56e:	4613      	mov	r3, r2
    a570:	009b      	lsls	r3, r3, #2
    a572:	4413      	add	r3, r2
    a574:	009b      	lsls	r3, r3, #2
    a576:	440b      	add	r3, r1
    a578:	3308      	adds	r3, #8
    a57a:	881b      	ldrh	r3, [r3, #0]
    a57c:	f8ad 300e 	strh.w	r3, [sp, #14]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
                /* SWS_Adc_00214 -- SWS_Adc_00418 -- ADC382 */
                if (FALSE == GroupPtr->StreamResultGroupMultiSets)
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
                {
                    *PtrToSamplePtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex]));
    a580:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a584:	4912      	ldr	r1, [pc, #72]	; (a5d0 <Adc_GetStreamLastPointer+0x19c>)
    a586:	4613      	mov	r3, r2
    a588:	009b      	lsls	r3, r3, #2
    a58a:	4413      	add	r3, r2
    a58c:	009b      	lsls	r3, r3, #2
    a58e:	440b      	add	r3, r1
    a590:	330c      	adds	r3, #12
    a592:	681a      	ldr	r2, [r3, #0]
    a594:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    a598:	005b      	lsls	r3, r3, #1
    a59a:	441a      	add	r2, r3
    a59c:	9b00      	ldr	r3, [sp, #0]
    a59e:	601a      	str	r2, [r3, #0]
                else
                {
                    *PtrToSamplePtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex * ChannelCount]));
                }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
                Adc_UpdateStatusAfterGetStream(Group, CoreId);
    a5a0:	f89d 3008 	ldrb.w	r3, [sp, #8]
    a5a4:	b2da      	uxtb	r2, r3
    a5a6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a5aa:	4611      	mov	r1, r2
    a5ac:	4618      	mov	r0, r3
    a5ae:	f7ff fc13 	bl	9dd8 <Adc_UpdateStatusAfterGetStream>
    a5b2:	e006      	b.n	a5c2 <Adc_GetStreamLastPointer+0x18e>
            }
        }
        else
        {
            *PtrToSamplePtr = NULL_PTR;
    a5b4:	9b00      	ldr	r3, [sp, #0]
    a5b6:	2200      	movs	r2, #0
    a5b8:	601a      	str	r2, [r3, #0]
    a5ba:	e002      	b.n	a5c2 <Adc_GetStreamLastPointer+0x18e>
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
    else
    {
        /* SWS_Adc_00302, SWS_Adc_00218 */
        *PtrToSamplePtr = NULL_PTR;
    a5bc:	9b00      	ldr	r3, [sp, #0]
    a5be:	2200      	movs	r2, #0
    a5c0:	601a      	str	r2, [r3, #0]
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return NumberOfResults;
    a5c2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    a5c6:	4618      	mov	r0, r3
    a5c8:	b005      	add	sp, #20
    a5ca:	f85d fb04 	ldr.w	pc, [sp], #4
    a5ce:	bf00      	nop
    a5d0:	1fff8d48 	.word	0x1fff8d48
    a5d4:	1fff8d40 	.word	0x1fff8d40

0000a5d8 <Adc_GetVersionInfo>:

#if (ADC_VERSION_INFO_API == STD_ON)
/* SWS_Adc_00376 */
/** @implements      Adc_GetVersionInfo_Activity */
void Adc_GetVersionInfo(Std_VersionInfoType * versioninfo)
{
    a5d8:	b500      	push	{lr}
    a5da:	b083      	sub	sp, #12
    a5dc:	9001      	str	r0, [sp, #4]
#if (ADC_VALIDATE_PARAMS == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_GETVERSIONINFO_ID, versioninfo))
    a5de:	9901      	ldr	r1, [sp, #4]
    a5e0:	200a      	movs	r0, #10
    a5e2:	f7fe fb55 	bl	8c90 <Adc_ValidatePtr>
    a5e6:	4603      	mov	r3, r0
    a5e8:	2b00      	cmp	r3, #0
    a5ea:	d10e      	bne.n	a60a <Adc_GetVersionInfo+0x32>
    {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

        (versioninfo)->vendorID = (uint16)ADC_VENDOR_ID;
    a5ec:	9b01      	ldr	r3, [sp, #4]
    a5ee:	222b      	movs	r2, #43	; 0x2b
    a5f0:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID = (uint16)ADC_MODULE_ID;
    a5f2:	9b01      	ldr	r3, [sp, #4]
    a5f4:	227b      	movs	r2, #123	; 0x7b
    a5f6:	805a      	strh	r2, [r3, #2]
        (versioninfo)->sw_major_version = (uint8)ADC_SW_MAJOR_VERSION;
    a5f8:	9b01      	ldr	r3, [sp, #4]
    a5fa:	2202      	movs	r2, #2
    a5fc:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)ADC_SW_MINOR_VERSION;
    a5fe:	9b01      	ldr	r3, [sp, #4]
    a600:	2200      	movs	r2, #0
    a602:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)ADC_SW_PATCH_VERSION;
    a604:	9b01      	ldr	r3, [sp, #4]
    a606:	2200      	movs	r2, #0
    a608:	719a      	strb	r2, [r3, #6]

#if (ADC_VALIDATE_PARAMS == STD_ON)
    }
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
}
    a60a:	bf00      	nop
    a60c:	b003      	add	sp, #12
    a60e:	f85d fb04 	ldr.w	pc, [sp], #4

0000a612 <Adc_Calibrate>:
#if (ADC_CALIBRATION == STD_ON)
/* CPR_RTD_00014.adc, CPR_RTD_00029.adc */
/** @implements      Adc_Calibrate_Activity */
void Adc_Calibrate(Adc_HwUnitType Unit,
                   Adc_CalibrationStatusType * pStatus)
{
    a612:	b500      	push	{lr}
    a614:	b085      	sub	sp, #20
    a616:	4603      	mov	r3, r0
    a618:	9100      	str	r1, [sp, #0]
    a61a:	f88d 3007 	strb.w	r3, [sp, #7]
    volatile uint8 CoreId;
    boolean IsCalibrateCalled = FALSE;
    a61e:	2300      	movs	r3, #0
    a620:	f88d 300f 	strb.w	r3, [sp, #15]

    CoreId = Adc_GetCoreID();
    a624:	f001 ffbc 	bl	c5a0 <Adc_GetCoreID>
    a628:	4603      	mov	r3, r0
    a62a:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_VALIDATE_CALL_AND_UNIT == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndUnit(ADC_CALIBRATE_ID, Unit, CoreId))
    a62e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a632:	b2da      	uxtb	r2, r3
    a634:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a638:	4619      	mov	r1, r3
    a63a:	2029      	movs	r0, #41	; 0x29
    a63c:	f7fe ff16 	bl	946c <Adc_ValidateCallAndUnit>
    a640:	4603      	mov	r3, r0
    a642:	2b00      	cmp	r3, #0
    a644:	d134      	bne.n	a6b0 <Adc_Calibrate+0x9e>
    {
#endif /* ADC_VALIDATE_CALL_AND_UNIT == STD_ON */

#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_CALIBRATE_ID, pStatus))
    a646:	9900      	ldr	r1, [sp, #0]
    a648:	2029      	movs	r0, #41	; 0x29
    a64a:	f7fe fb21 	bl	8c90 <Adc_ValidatePtr>
    a64e:	4603      	mov	r3, r0
    a650:	2b00      	cmp	r3, #0
    a652:	d12d      	bne.n	a6b0 <Adc_Calibrate+0x9e>
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
            /* Reset status before executing the calibration */
            pStatus->AdcUnitSelfTestStatus = E_NOT_OK;
    a654:	9b00      	ldr	r3, [sp, #0]
    a656:	2201      	movs	r2, #1
    a658:	701a      	strb	r2, [r3, #0]
            if ((Std_ReturnType)E_OK == Adc_ValidateNotBusyNoQueue(Unit, ADC_CALIBRATE_ID))
    a65a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a65e:	2129      	movs	r1, #41	; 0x29
    a660:	4618      	mov	r0, r3
    a662:	f7fe fc75 	bl	8f50 <Adc_ValidateNotBusyNoQueue>
    a666:	4603      	mov	r3, r0
    a668:	2b00      	cmp	r3, #0
    a66a:	d115      	bne.n	a698 <Adc_Calibrate+0x86>
            {
                if ((Std_ReturnType)E_OK == Adc_ValidateCheckGroupNotConversion(ADC_CALIBRATE_ID, CoreId))
    a66c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a670:	b2db      	uxtb	r3, r3
    a672:	4619      	mov	r1, r3
    a674:	2029      	movs	r0, #41	; 0x29
    a676:	f7fe fcd5 	bl	9024 <Adc_ValidateCheckGroupNotConversion>
    a67a:	4603      	mov	r3, r0
    a67c:	2b00      	cmp	r3, #0
    a67e:	d10b      	bne.n	a698 <Adc_Calibrate+0x86>
                {
                    Adc_Ipw_Calibrate(Unit, pStatus, CoreId);
    a680:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a684:	b2da      	uxtb	r2, r3
    a686:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a68a:	9900      	ldr	r1, [sp, #0]
    a68c:	4618      	mov	r0, r3
    a68e:	f001 ff5d 	bl	c54c <Adc_Ipw_Calibrate>
                    IsCalibrateCalled = TRUE;
    a692:	2301      	movs	r3, #1
    a694:	f88d 300f 	strb.w	r3, [sp, #15]
                }
            }
            if (TRUE == IsCalibrateCalled)
    a698:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a69c:	2b00      	cmp	r3, #0
    a69e:	d007      	beq.n	a6b0 <Adc_Calibrate+0x9e>
            {
                if ((Std_ReturnType)E_NOT_OK == pStatus->AdcUnitSelfTestStatus)
    a6a0:	9b00      	ldr	r3, [sp, #0]
    a6a2:	781b      	ldrb	r3, [r3, #0]
    a6a4:	2b01      	cmp	r3, #1
    a6a6:	d103      	bne.n	a6b0 <Adc_Calibrate+0x9e>
                {
                    Adc_ReportDetRuntimeError((uint8)ADC_CALIBRATE_ID, (uint8)ADC_E_TIMEOUT);
    a6a8:	212b      	movs	r1, #43	; 0x2b
    a6aa:	2029      	movs	r0, #41	; 0x29
    a6ac:	f7fe fa71 	bl	8b92 <Adc_ReportDetRuntimeError>
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

#if (ADC_VALIDATE_CALL_AND_UNIT == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_UNIT == STD_ON */
}
    a6b0:	bf00      	nop
    a6b2:	b005      	add	sp, #20
    a6b4:	f85d fb04 	ldr.w	pc, [sp], #4

0000a6b8 <Adc_HwAcc_SetSC2Reg>:
#include "Adc_MemMap.h"

static inline void Adc_HwAcc_SetSC2Reg(ADC_Type * const Base,
                                       const uint32 ClearMask,
                                       const uint32 Value)
{
    a6b8:	b086      	sub	sp, #24
    a6ba:	9003      	str	r0, [sp, #12]
    a6bc:	9102      	str	r1, [sp, #8]
    a6be:	9201      	str	r2, [sp, #4]
    /* Clear and set SC2 register based on ClearMask and Value */
    uint32 Sc2Reg = Base->SC2;
    a6c0:	9b03      	ldr	r3, [sp, #12]
    a6c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    a6c6:	9305      	str	r3, [sp, #20]
    Sc2Reg &= ~(ClearMask);
    a6c8:	9b02      	ldr	r3, [sp, #8]
    a6ca:	43db      	mvns	r3, r3
    a6cc:	9a05      	ldr	r2, [sp, #20]
    a6ce:	4013      	ands	r3, r2
    a6d0:	9305      	str	r3, [sp, #20]
    Sc2Reg |= Value;
    a6d2:	9a05      	ldr	r2, [sp, #20]
    a6d4:	9b01      	ldr	r3, [sp, #4]
    a6d6:	4313      	orrs	r3, r2
    a6d8:	9305      	str	r3, [sp, #20]
    Base->SC2 = Sc2Reg;
    a6da:	9b03      	ldr	r3, [sp, #12]
    a6dc:	9a05      	ldr	r2, [sp, #20]
    a6de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    a6e2:	bf00      	nop
    a6e4:	b006      	add	sp, #24
    a6e6:	4770      	bx	lr

0000a6e8 <Adc_HwAcc_SetClock>:

static inline void Adc_HwAcc_SetClock(ADC_Type * const Base,
                                      const Adc_Ip_ClockSelType ClockDivide,
                                      const Adc_Ip_ClkSourceType InputClock)
{
    a6e8:	b086      	sub	sp, #24
    a6ea:	9003      	str	r0, [sp, #12]
    a6ec:	9102      	str	r1, [sp, #8]
    a6ee:	9201      	str	r2, [sp, #4]
    /* Update ClockDivide and InputClock values found in CFG1 register */
    uint32 Cfg1Reg = Base->CFG1;
    a6f0:	9b03      	ldr	r3, [sp, #12]
    a6f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    a6f4:	9305      	str	r3, [sp, #20]
    Cfg1Reg &= ~(ADC_CFG1_ADIV_MASK | ADC_CFG1_ADICLK_MASK);
    a6f6:	9b05      	ldr	r3, [sp, #20]
    a6f8:	f023 0363 	bic.w	r3, r3, #99	; 0x63
    a6fc:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADIV(ClockDivide);
    a6fe:	9b02      	ldr	r3, [sp, #8]
    a700:	015b      	lsls	r3, r3, #5
    a702:	f003 0360 	and.w	r3, r3, #96	; 0x60
    a706:	9a05      	ldr	r2, [sp, #20]
    a708:	4313      	orrs	r3, r2
    a70a:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADICLK(InputClock);
    a70c:	9b01      	ldr	r3, [sp, #4]
    a70e:	f003 0303 	and.w	r3, r3, #3
    a712:	9a05      	ldr	r2, [sp, #20]
    a714:	4313      	orrs	r3, r2
    a716:	9305      	str	r3, [sp, #20]
    Base->CFG1 = Cfg1Reg;
    a718:	9b03      	ldr	r3, [sp, #12]
    a71a:	9a05      	ldr	r2, [sp, #20]
    a71c:	641a      	str	r2, [r3, #64]	; 0x40
}
    a71e:	bf00      	nop
    a720:	b006      	add	sp, #24
    a722:	4770      	bx	lr

0000a724 <Adc_HwAcc_GetClockDivide>:

static inline Adc_Ip_ClockSelType Adc_HwAcc_GetClockDivide(const uint32 Reg)
{
    a724:	b084      	sub	sp, #16
    a726:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve ClockDivide value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClockSelType ReturnValue = ADC_IP_CLK_FULL_BUS;
    a728:	2300      	movs	r3, #0
    a72a:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADIV_MASK) >> ADC_CFG1_ADIV_SHIFT)
    a72c:	9b01      	ldr	r3, [sp, #4]
    a72e:	095b      	lsrs	r3, r3, #5
    a730:	f003 0303 	and.w	r3, r3, #3
    a734:	2b03      	cmp	r3, #3
    a736:	d00c      	beq.n	a752 <Adc_HwAcc_GetClockDivide+0x2e>
    a738:	2b03      	cmp	r3, #3
    a73a:	d80d      	bhi.n	a758 <Adc_HwAcc_GetClockDivide+0x34>
    a73c:	2b01      	cmp	r3, #1
    a73e:	d002      	beq.n	a746 <Adc_HwAcc_GetClockDivide+0x22>
    a740:	2b02      	cmp	r3, #2
    a742:	d003      	beq.n	a74c <Adc_HwAcc_GetClockDivide+0x28>
        case 3u:
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
            break;
        default:
            ; /* no-op */
            break;
    a744:	e008      	b.n	a758 <Adc_HwAcc_GetClockDivide+0x34>
            ReturnValue = ADC_IP_CLK_HALF_BUS;
    a746:	2301      	movs	r3, #1
    a748:	9303      	str	r3, [sp, #12]
            break;
    a74a:	e006      	b.n	a75a <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_QUARTER_BUS;
    a74c:	2302      	movs	r3, #2
    a74e:	9303      	str	r3, [sp, #12]
            break;
    a750:	e003      	b.n	a75a <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
    a752:	2303      	movs	r3, #3
    a754:	9303      	str	r3, [sp, #12]
            break;
    a756:	e000      	b.n	a75a <Adc_HwAcc_GetClockDivide+0x36>
            break;
    a758:	bf00      	nop
    }
    return ReturnValue;
    a75a:	9b03      	ldr	r3, [sp, #12]
}
    a75c:	4618      	mov	r0, r3
    a75e:	b004      	add	sp, #16
    a760:	4770      	bx	lr

0000a762 <Adc_HwAcc_GetInputClock>:

static inline Adc_Ip_ClkSourceType Adc_HwAcc_GetInputClock(const uint32 Reg)
{
    a762:	b084      	sub	sp, #16
    a764:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve InputClock value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClkSourceType ReturnValue = ADC_IP_CLK_ALT_1;
    a766:	2300      	movs	r3, #0
    a768:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADICLK_MASK) >> ADC_CFG1_ADICLK_SHIFT)
    a76a:	9b01      	ldr	r3, [sp, #4]
    a76c:	f003 0303 	and.w	r3, r3, #3
    a770:	2b03      	cmp	r3, #3
    a772:	d00c      	beq.n	a78e <Adc_HwAcc_GetInputClock+0x2c>
    a774:	2b03      	cmp	r3, #3
    a776:	d80d      	bhi.n	a794 <Adc_HwAcc_GetInputClock+0x32>
    a778:	2b01      	cmp	r3, #1
    a77a:	d002      	beq.n	a782 <Adc_HwAcc_GetInputClock+0x20>
    a77c:	2b02      	cmp	r3, #2
    a77e:	d003      	beq.n	a788 <Adc_HwAcc_GetInputClock+0x26>
        case 3u:
            ReturnValue = ADC_IP_CLK_ALT_4;
            break;
        default:
            ; /* no-op */
            break;
    a780:	e008      	b.n	a794 <Adc_HwAcc_GetInputClock+0x32>
            ReturnValue = ADC_IP_CLK_ALT_2;
    a782:	2301      	movs	r3, #1
    a784:	9303      	str	r3, [sp, #12]
            break;
    a786:	e006      	b.n	a796 <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_3;
    a788:	2302      	movs	r3, #2
    a78a:	9303      	str	r3, [sp, #12]
            break;
    a78c:	e003      	b.n	a796 <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_4;
    a78e:	2303      	movs	r3, #3
    a790:	9303      	str	r3, [sp, #12]
            break;
    a792:	e000      	b.n	a796 <Adc_HwAcc_GetInputClock+0x34>
            break;
    a794:	bf00      	nop
    }
    return ReturnValue;
    a796:	9b03      	ldr	r3, [sp, #12]
}
    a798:	4618      	mov	r0, r3
    a79a:	b004      	add	sp, #16
    a79c:	4770      	bx	lr

0000a79e <Adc_HwAcc_SetSampleTime>:

static inline void Adc_HwAcc_SetSampleTime(ADC_Type * const Base,
                                           const uint8 SampleTime)
{
    a79e:	b084      	sub	sp, #16
    a7a0:	9001      	str	r0, [sp, #4]
    a7a2:	460b      	mov	r3, r1
    a7a4:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Clip sample time to minimum value */
    uint8 ClippedSampleTime = (uint8)((SampleTime > 0U) ? SampleTime : 1U);
    a7a8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    a7ac:	2b00      	cmp	r3, #0
    a7ae:	d002      	beq.n	a7b6 <Adc_HwAcc_SetSampleTime+0x18>
    a7b0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    a7b4:	e000      	b.n	a7b8 <Adc_HwAcc_SetSampleTime+0x1a>
    a7b6:	2301      	movs	r3, #1
    a7b8:	f88d 300f 	strb.w	r3, [sp, #15]
    /* Update SampleTime values found in SC3 register */
    uint32 Cfg2Reg = Base->CFG2;
    a7bc:	9b01      	ldr	r3, [sp, #4]
    a7be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    a7c0:	9302      	str	r3, [sp, #8]
    Cfg2Reg &= ~(ADC_CFG2_SMPLTS_MASK);
    a7c2:	9b02      	ldr	r3, [sp, #8]
    a7c4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    a7c8:	9302      	str	r3, [sp, #8]
    Cfg2Reg |= ADC_CFG2_SMPLTS(ClippedSampleTime);
    a7ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a7ce:	9a02      	ldr	r2, [sp, #8]
    a7d0:	4313      	orrs	r3, r2
    a7d2:	9302      	str	r3, [sp, #8]
    Base->CFG2 = Cfg2Reg;
    a7d4:	9b01      	ldr	r3, [sp, #4]
    a7d6:	9a02      	ldr	r2, [sp, #8]
    a7d8:	645a      	str	r2, [r3, #68]	; 0x44
}
    a7da:	bf00      	nop
    a7dc:	b004      	add	sp, #16
    a7de:	4770      	bx	lr

0000a7e0 <Adc_HwAcc_SetAveraging>:

static inline void Adc_HwAcc_SetAveraging(ADC_Type * const Base,
                                          const boolean AvgEn,
                                          const Adc_Ip_AvgSelectType AvgSel)
{
    a7e0:	b086      	sub	sp, #24
    a7e2:	9003      	str	r0, [sp, #12]
    a7e4:	460b      	mov	r3, r1
    a7e6:	9201      	str	r2, [sp, #4]
    a7e8:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Update AvgEn and AvgSel values found in SC3 register */
    uint32 Sc3Reg = Base->SC3;
    a7ec:	9b03      	ldr	r3, [sp, #12]
    a7ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    a7f2:	9305      	str	r3, [sp, #20]
    Sc3Reg &= ~(ADC_SC3_AVGE_MASK | ADC_SC3_AVGS_MASK);
    a7f4:	9b05      	ldr	r3, [sp, #20]
    a7f6:	f023 0307 	bic.w	r3, r3, #7
    a7fa:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGE(AvgEn ? 1u : 0u);
    a7fc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a800:	2b00      	cmp	r3, #0
    a802:	d001      	beq.n	a808 <Adc_HwAcc_SetAveraging+0x28>
    a804:	2304      	movs	r3, #4
    a806:	e000      	b.n	a80a <Adc_HwAcc_SetAveraging+0x2a>
    a808:	2300      	movs	r3, #0
    a80a:	9a05      	ldr	r2, [sp, #20]
    a80c:	4313      	orrs	r3, r2
    a80e:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGS(AvgSel);
    a810:	9b01      	ldr	r3, [sp, #4]
    a812:	f003 0303 	and.w	r3, r3, #3
    a816:	9a05      	ldr	r2, [sp, #20]
    a818:	4313      	orrs	r3, r2
    a81a:	9305      	str	r3, [sp, #20]
    Base->SC3 = Sc3Reg;
    a81c:	9b03      	ldr	r3, [sp, #12]
    a81e:	9a05      	ldr	r2, [sp, #20]
    a820:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    a824:	bf00      	nop
    a826:	b006      	add	sp, #24
    a828:	4770      	bx	lr

0000a82a <Adc_HwAcc_GetAverageSelect>:

static inline Adc_Ip_AvgSelectType Adc_HwAcc_GetAverageSelect(const uint32 Reg)
{
    a82a:	b084      	sub	sp, #16
    a82c:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve AvgSelect value found in SC3 register
     * Note: Reg should be the value of SC3 register
     */
    Adc_Ip_AvgSelectType ReturnValue = ADC_IP_AVG_4_CONV;
    a82e:	2300      	movs	r3, #0
    a830:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_SC3_AVGS_MASK) >> ADC_SC3_AVGS_SHIFT)
    a832:	9b01      	ldr	r3, [sp, #4]
    a834:	f003 0303 	and.w	r3, r3, #3
    a838:	2b03      	cmp	r3, #3
    a83a:	d00c      	beq.n	a856 <Adc_HwAcc_GetAverageSelect+0x2c>
    a83c:	2b03      	cmp	r3, #3
    a83e:	d80d      	bhi.n	a85c <Adc_HwAcc_GetAverageSelect+0x32>
    a840:	2b01      	cmp	r3, #1
    a842:	d002      	beq.n	a84a <Adc_HwAcc_GetAverageSelect+0x20>
    a844:	2b02      	cmp	r3, #2
    a846:	d003      	beq.n	a850 <Adc_HwAcc_GetAverageSelect+0x26>
        case 3u:
            ReturnValue = ADC_IP_AVG_32_CONV;
            break;
        default:
            ; /* no-op */
            break;
    a848:	e008      	b.n	a85c <Adc_HwAcc_GetAverageSelect+0x32>
            ReturnValue = ADC_IP_AVG_8_CONV;
    a84a:	2301      	movs	r3, #1
    a84c:	9303      	str	r3, [sp, #12]
            break;
    a84e:	e006      	b.n	a85e <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_16_CONV;
    a850:	2302      	movs	r3, #2
    a852:	9303      	str	r3, [sp, #12]
            break;
    a854:	e003      	b.n	a85e <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_32_CONV;
    a856:	2303      	movs	r3, #3
    a858:	9303      	str	r3, [sp, #12]
            break;
    a85a:	e000      	b.n	a85e <Adc_HwAcc_GetAverageSelect+0x34>
            break;
    a85c:	bf00      	nop
    }
    return ReturnValue;
    a85e:	9b03      	ldr	r3, [sp, #12]
}
    a860:	4618      	mov	r0, r3
    a862:	b004      	add	sp, #16
    a864:	4770      	bx	lr

0000a866 <Adc_HwAcc_SetTriggerMode>:

static inline void Adc_HwAcc_SetTriggerMode(ADC_Type * const Base,
                                            const Adc_Ip_TrigType TriggerMode)
{
    a866:	b084      	sub	sp, #16
    a868:	9001      	str	r0, [sp, #4]
    a86a:	9100      	str	r1, [sp, #0]
    /* Update TriggerMode value found in SC2 register */
    uint32 Sc2Reg = Base->SC2;
    a86c:	9b01      	ldr	r3, [sp, #4]
    a86e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    a872:	9303      	str	r3, [sp, #12]
    Sc2Reg &= ~(ADC_SC2_ADTRG_MASK);
    a874:	9b03      	ldr	r3, [sp, #12]
    a876:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    a87a:	9303      	str	r3, [sp, #12]
    Sc2Reg |= ADC_SC2_ADTRG(TriggerMode);
    a87c:	9b00      	ldr	r3, [sp, #0]
    a87e:	019b      	lsls	r3, r3, #6
    a880:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a884:	9a03      	ldr	r2, [sp, #12]
    a886:	4313      	orrs	r3, r2
    a888:	9303      	str	r3, [sp, #12]
    Base->SC2 = Sc2Reg;
    a88a:	9b01      	ldr	r3, [sp, #4]
    a88c:	9a03      	ldr	r2, [sp, #12]
    a88e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    a892:	bf00      	nop
    a894:	b004      	add	sp, #16
    a896:	4770      	bx	lr

0000a898 <Adc_HwAcc_GetTriggerMode>:

static inline Adc_Ip_TrigType Adc_HwAcc_GetTriggerMode(const uint32 Reg)
{
    a898:	b084      	sub	sp, #16
    a89a:	9001      	str	r0, [sp, #4]
    /* Retrieve TriggerMode value found in SC2 register */
    Adc_Ip_TrigType ReturnValue = ADC_IP_TRIGGER_SOFTWARE;
    a89c:	2300      	movs	r3, #0
    a89e:	9303      	str	r3, [sp, #12]
    if (((Reg & ADC_SC2_ADTRG_MASK) >> ADC_SC2_ADTRG_SHIFT) == 1u)
    a8a0:	9b01      	ldr	r3, [sp, #4]
    a8a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a8a6:	2b00      	cmp	r3, #0
    a8a8:	d001      	beq.n	a8ae <Adc_HwAcc_GetTriggerMode+0x16>
    {
        ReturnValue = ADC_IP_TRIGGER_HARDWARE;
    a8aa:	2301      	movs	r3, #1
    a8ac:	9303      	str	r3, [sp, #12]
    }
    return ReturnValue;
    a8ae:	9b03      	ldr	r3, [sp, #12]
}
    a8b0:	4618      	mov	r0, r3
    a8b2:	b004      	add	sp, #16
    a8b4:	4770      	bx	lr

0000a8b6 <Adc_HwAcc_SetChannel>:

static inline void Adc_HwAcc_SetChannel(ADC_Type * const Base,
                                        const uint8 ChnIdx,
                                        const Adc_Ip_InputChannelType InputChannel,
                                        const boolean InterruptEnable)
{
    a8b6:	b086      	sub	sp, #24
    a8b8:	9003      	str	r0, [sp, #12]
    a8ba:	9201      	str	r2, [sp, #4]
    a8bc:	461a      	mov	r2, r3
    a8be:	460b      	mov	r3, r1
    a8c0:	f88d 300b 	strb.w	r3, [sp, #11]
    a8c4:	4613      	mov	r3, r2
    a8c6:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Configure channel by writing all SC1n register fields */
    uint32 Sc1Reg = SC1(Base, ChnIdx);
    a8ca:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a8ce:	9b03      	ldr	r3, [sp, #12]
    a8d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a8d4:	9305      	str	r3, [sp, #20]
    Sc1Reg &= ~(ADC_SC1_ADCH_MASK | ADC_SC1_AIEN_MASK);
    a8d6:	9b05      	ldr	r3, [sp, #20]
    a8d8:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
    a8dc:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_ADCH(InputChannel);
    a8de:	9b01      	ldr	r3, [sp, #4]
    a8e0:	f003 031f 	and.w	r3, r3, #31
    a8e4:	9a05      	ldr	r2, [sp, #20]
    a8e6:	4313      	orrs	r3, r2
    a8e8:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_AIEN(InterruptEnable ? 1u : 0u);
    a8ea:	f89d 300a 	ldrb.w	r3, [sp, #10]
    a8ee:	2b00      	cmp	r3, #0
    a8f0:	d001      	beq.n	a8f6 <Adc_HwAcc_SetChannel+0x40>
    a8f2:	2340      	movs	r3, #64	; 0x40
    a8f4:	e000      	b.n	a8f8 <Adc_HwAcc_SetChannel+0x42>
    a8f6:	2300      	movs	r3, #0
    a8f8:	9a05      	ldr	r2, [sp, #20]
    a8fa:	4313      	orrs	r3, r2
    a8fc:	9305      	str	r3, [sp, #20]
    SC1(Base, ChnIdx) = Sc1Reg;
    a8fe:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a902:	9b03      	ldr	r3, [sp, #12]
    a904:	9905      	ldr	r1, [sp, #20]
    a906:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    a90a:	bf00      	nop
    a90c:	b006      	add	sp, #24
    a90e:	4770      	bx	lr

0000a910 <Adc_HwAcc_SetUserGainAndOffset>:

static inline void Adc_HwAcc_SetUserGainAndOffset(ADC_Type * const Base,
                                                  const uint16 UsrGain,
                                                  const uint16 UsrOffset)
{
    a910:	b082      	sub	sp, #8
    a912:	9001      	str	r0, [sp, #4]
    a914:	460b      	mov	r3, r1
    a916:	f8ad 3002 	strh.w	r3, [sp, #2]
    a91a:	4613      	mov	r3, r2
    a91c:	f8ad 3000 	strh.w	r3, [sp]
     * 2. RegVal <- Sum & 0xF800U
     * 3. if RegVal != 0x0000U then RegVal <- 0xFFFFU
     * 4. Base->G <- RegVal
     */

    Base->USR_OFS = ADC_USR_OFS_USR_OFS(UsrOffset);
    a920:	f8bd 3000 	ldrh.w	r3, [sp]
    a924:	b2da      	uxtb	r2, r3
    a926:	9b01      	ldr	r3, [sp, #4]
    a928:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    Base->UG = ADC_UG_UG(UsrGain);
    a92c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    a930:	f3c3 0209 	ubfx	r2, r3, #0, #10
    a934:	9b01      	ldr	r3, [sp, #4]
    a936:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
    a93a:	bf00      	nop
    a93c:	b002      	add	sp, #8
    a93e:	4770      	bx	lr

0000a940 <Adc_HwAcc_GetAIEN>:

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
static inline boolean Adc_HwAcc_GetAIEN(const uint32 Reg)
{
    a940:	b082      	sub	sp, #8
    a942:	9001      	str	r0, [sp, #4]
    /* Retrive AIEN flag from given SC1 register */
    return (((Reg & ADC_SC1_AIEN_MASK) >> ADC_SC1_AIEN_SHIFT) != 0u) ? TRUE : FALSE;
    a944:	9b01      	ldr	r3, [sp, #4]
    a946:	099b      	lsrs	r3, r3, #6
    a948:	f003 0301 	and.w	r3, r3, #1
    a94c:	2b00      	cmp	r3, #0
    a94e:	bf14      	ite	ne
    a950:	2301      	movne	r3, #1
    a952:	2300      	moveq	r3, #0
    a954:	b2db      	uxtb	r3, r3
}
    a956:	4618      	mov	r0, r3
    a958:	b002      	add	sp, #8
    a95a:	4770      	bx	lr

0000a95c <Adc_HwAcc_GetCOCO>:
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

static inline boolean Adc_HwAcc_GetCOCO(const uint32 Reg)
{
    a95c:	b082      	sub	sp, #8
    a95e:	9001      	str	r0, [sp, #4]
    /* Retrive COCO flag from given SC1 register */
    return (((Reg & ADC_SC1_COCO_MASK) >> ADC_SC1_COCO_SHIFT) != 0u) ? TRUE : FALSE;
    a960:	9b01      	ldr	r3, [sp, #4]
    a962:	09db      	lsrs	r3, r3, #7
    a964:	f003 0301 	and.w	r3, r3, #1
    a968:	2b00      	cmp	r3, #0
    a96a:	bf14      	ite	ne
    a96c:	2301      	movne	r3, #1
    a96e:	2300      	moveq	r3, #0
    a970:	b2db      	uxtb	r3, r3
}
    a972:	4618      	mov	r0, r3
    a974:	b002      	add	sp, #8
    a976:	4770      	bx	lr

0000a978 <Adc_HwAcc_GetData>:

static inline uint16 Adc_HwAcc_GetData(const ADC_Type * const Base,
                                       const uint8 ChnIdx)
{
    a978:	b084      	sub	sp, #16
    a97a:	9001      	str	r0, [sp, #4]
    a97c:	460b      	mov	r3, r1
    a97e:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Retrieve the conversion result of a given channel */
    uint16 Result = (uint16) R(Base, ChnIdx);
    a982:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a986:	9b01      	ldr	r3, [sp, #4]
    a988:	3212      	adds	r2, #18
    a98a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a98e:	f8ad 300e 	strh.w	r3, [sp, #14]
    Result = (uint16) ((Result & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    a992:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    a996:	f3c3 030b 	ubfx	r3, r3, #0, #12
    a99a:	f8ad 300e 	strh.w	r3, [sp, #14]
    return Result;
    a99e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    a9a2:	4618      	mov	r0, r3
    a9a4:	b004      	add	sp, #16
    a9a6:	4770      	bx	lr

0000a9a8 <ADC_DoCalibration_SetParams>:
*
* END**************************************************************************/
static inline void ADC_DoCalibration_SetParams(ADC_Type * const Base,
                                               const Adc_Ip_ClockConfigType * const Config,
                                               const Adc_Ip_TrigType TriggerMode)
{
    a9a8:	b500      	push	{lr}
    a9aa:	b085      	sub	sp, #20
    a9ac:	9003      	str	r0, [sp, #12]
    a9ae:	9102      	str	r1, [sp, #8]
    a9b0:	9201      	str	r2, [sp, #4]
    /* Configure averaging */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    a9b2:	f008 f809 	bl	129c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    a9b6:	9b02      	ldr	r3, [sp, #8]
    a9b8:	7a59      	ldrb	r1, [r3, #9]
    a9ba:	9b02      	ldr	r3, [sp, #8]
    a9bc:	68db      	ldr	r3, [r3, #12]
    a9be:	461a      	mov	r2, r3
    a9c0:	9803      	ldr	r0, [sp, #12]
    a9c2:	f7ff ff0d 	bl	a7e0 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    a9c6:	f008 f82b 	bl	12a20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Configure trigger mode */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24();
    a9ca:	f007 fe63 	bl	12694 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    a9ce:	9901      	ldr	r1, [sp, #4]
    a9d0:	9803      	ldr	r0, [sp, #12]
    a9d2:	f7ff ff48 	bl	a866 <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24();
    a9d6:	f007 fe89 	bl	126ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>

    /* Configure sample time */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15();
    a9da:	f007 fb79 	bl	120d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    a9de:	9b02      	ldr	r3, [sp, #8]
    a9e0:	7a1b      	ldrb	r3, [r3, #8]
    a9e2:	4619      	mov	r1, r3
    a9e4:	9803      	ldr	r0, [sp, #12]
    a9e6:	f7ff feda 	bl	a79e <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15();
    a9ea:	f007 fb9d 	bl	12128 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>

    /* Configure input clock */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13();
    a9ee:	f007 facb 	bl	11f88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    a9f2:	9b02      	ldr	r3, [sp, #8]
    a9f4:	6819      	ldr	r1, [r3, #0]
    a9f6:	9b02      	ldr	r3, [sp, #8]
    a9f8:	685b      	ldr	r3, [r3, #4]
    a9fa:	461a      	mov	r2, r3
    a9fc:	9803      	ldr	r0, [sp, #12]
    a9fe:	f7ff fe73 	bl	a6e8 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13();
    aa02:	f007 faed 	bl	11fe0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>
}
    aa06:	bf00      	nop
    aa08:	b005      	add	sp, #20
    aa0a:	f85d fb04 	ldr.w	pc, [sp], #4

0000aa0e <Adc_Ip_Init>:
*
* @implements     Adc_Ip_Init_Activity
* END**************************************************************************/
void Adc_Ip_Init(const uint32 Instance,
                 const Adc_Ip_ConfigType * const Config)
{
    aa0e:	b500      	push	{lr}
    aa10:	b087      	sub	sp, #28
    aa12:	9001      	str	r0, [sp, #4]
    aa14:	9100      	str	r1, [sp, #0]
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
    DevAssert(Config->NumChannels <= ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    aa16:	4a67      	ldr	r2, [pc, #412]	; (abb4 <Adc_Ip_Init+0x1a6>)
    aa18:	9b01      	ldr	r3, [sp, #4]
    aa1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa1e:	9302      	str	r3, [sp, #8]
    uint32 SC2Reg = 0u;
    aa20:	2300      	movs	r3, #0
    aa22:	9305      	str	r3, [sp, #20]
    uint32 SC2ClearMask = 0u;
    aa24:	2300      	movs	r3, #0
    aa26:	9304      	str	r3, [sp, #16]
    uint8 Index;

    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    aa28:	9b00      	ldr	r3, [sp, #0]
    aa2a:	6819      	ldr	r1, [r3, #0]
    aa2c:	9b00      	ldr	r3, [sp, #0]
    aa2e:	689b      	ldr	r3, [r3, #8]
    aa30:	461a      	mov	r2, r3
    aa32:	9802      	ldr	r0, [sp, #8]
    aa34:	f7ff fe58 	bl	a6e8 <Adc_HwAcc_SetClock>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    aa38:	9b00      	ldr	r3, [sp, #0]
    aa3a:	7b1b      	ldrb	r3, [r3, #12]
    aa3c:	4619      	mov	r1, r3
    aa3e:	9802      	ldr	r0, [sp, #8]
    aa40:	f7ff fead 	bl	a79e <Adc_HwAcc_SetSampleTime>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    aa44:	9b00      	ldr	r3, [sp, #0]
    aa46:	7b59      	ldrb	r1, [r3, #13]
    aa48:	9b00      	ldr	r3, [sp, #0]
    aa4a:	691b      	ldr	r3, [r3, #16]
    aa4c:	461a      	mov	r2, r3
    aa4e:	9802      	ldr	r0, [sp, #8]
    aa50:	f7ff fec6 	bl	a7e0 <Adc_HwAcc_SetAveraging>

    Adc_Ip_SetResolution(Instance, Config->Resolution);
    aa54:	9b00      	ldr	r3, [sp, #0]
    aa56:	695b      	ldr	r3, [r3, #20]
    aa58:	4619      	mov	r1, r3
    aa5a:	9801      	ldr	r0, [sp, #4]
    aa5c:	f000 f9ea 	bl	ae34 <Adc_Ip_SetResolution>
        ADC_SetSupplyMonitoringEnable(Config->SupplyMonitoringEnable);
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    /* Configure trigger mode */
    SC2ClearMask |= ADC_SC2_ADTRG_MASK;
    aa60:	9b04      	ldr	r3, [sp, #16]
    aa62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    aa66:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ADTRG(Config->TriggerMode);
    aa68:	9b00      	ldr	r3, [sp, #0]
    aa6a:	699b      	ldr	r3, [r3, #24]
    aa6c:	019b      	lsls	r3, r3, #6
    aa6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    aa72:	9a05      	ldr	r2, [sp, #20]
    aa74:	4313      	orrs	r3, r2
    aa76:	9305      	str	r3, [sp, #20]

    /* Configure DMA enable */
    if (Config->DmaEnable)
    aa78:	9b00      	ldr	r3, [sp, #0]
    aa7a:	7f1b      	ldrb	r3, [r3, #28]
    aa7c:	2b00      	cmp	r3, #0
    aa7e:	d004      	beq.n	aa8a <Adc_Ip_Init+0x7c>
    {
        SC2Reg |= ADC_SC2_DMAEN_MASK;
    aa80:	9b05      	ldr	r3, [sp, #20]
    aa82:	f043 0304 	orr.w	r3, r3, #4
    aa86:	9305      	str	r3, [sp, #20]
    aa88:	e003      	b.n	aa92 <Adc_Ip_Init+0x84>
    }
    else
    {
        SC2ClearMask |= ADC_SC2_DMAEN_MASK;
    aa8a:	9b04      	ldr	r3, [sp, #16]
    aa8c:	f043 0304 	orr.w	r3, r3, #4
    aa90:	9304      	str	r3, [sp, #16]
    }

    /* Configure voltage reference selector */
    SC2ClearMask |= ADC_SC2_REFSEL_MASK;
    aa92:	9b04      	ldr	r3, [sp, #16]
    aa94:	f043 0303 	orr.w	r3, r3, #3
    aa98:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_REFSEL(Config->VoltageRef);
    aa9a:	9b00      	ldr	r3, [sp, #0]
    aa9c:	6a1b      	ldr	r3, [r3, #32]
    aa9e:	f003 0303 	and.w	r3, r3, #3
    aaa2:	9a05      	ldr	r2, [sp, #20]
    aaa4:	4313      	orrs	r3, r2
    aaa6:	9305      	str	r3, [sp, #20]

    /* Configure compare enables and values */
    SC2ClearMask |= ADC_SC2_ACFE_MASK | ADC_SC2_ACFGT_MASK | ADC_SC2_ACREN_MASK;
    aaa8:	9b04      	ldr	r3, [sp, #16]
    aaaa:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    aaae:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ACFE(Config->CompareEnable ? 1u : 0u);
    aab0:	9b00      	ldr	r3, [sp, #0]
    aab2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    aab6:	2b00      	cmp	r3, #0
    aab8:	d001      	beq.n	aabe <Adc_Ip_Init+0xb0>
    aaba:	2320      	movs	r3, #32
    aabc:	e000      	b.n	aac0 <Adc_Ip_Init+0xb2>
    aabe:	2300      	movs	r3, #0
    aac0:	9a05      	ldr	r2, [sp, #20]
    aac2:	4313      	orrs	r3, r2
    aac4:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACFGT(Config->CompareGreaterThanEnable ? 1u : 0u);
    aac6:	9b00      	ldr	r3, [sp, #0]
    aac8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    aacc:	2b00      	cmp	r3, #0
    aace:	d001      	beq.n	aad4 <Adc_Ip_Init+0xc6>
    aad0:	2310      	movs	r3, #16
    aad2:	e000      	b.n	aad6 <Adc_Ip_Init+0xc8>
    aad4:	2300      	movs	r3, #0
    aad6:	9a05      	ldr	r2, [sp, #20]
    aad8:	4313      	orrs	r3, r2
    aada:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACREN(Config->CompareRangeFuncEnable ? 1u : 0u);
    aadc:	9b00      	ldr	r3, [sp, #0]
    aade:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    aae2:	2b00      	cmp	r3, #0
    aae4:	d001      	beq.n	aaea <Adc_Ip_Init+0xdc>
    aae6:	2308      	movs	r3, #8
    aae8:	e000      	b.n	aaec <Adc_Ip_Init+0xde>
    aaea:	2300      	movs	r3, #0
    aaec:	9a05      	ldr	r2, [sp, #20]
    aaee:	4313      	orrs	r3, r2
    aaf0:	9305      	str	r3, [sp, #20]
    Base->CV[0u] = ADC_CV_CV(Config->CompVal1);
    aaf2:	9b00      	ldr	r3, [sp, #0]
    aaf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    aaf6:	461a      	mov	r2, r3
    aaf8:	9b02      	ldr	r3, [sp, #8]
    aafa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Base->CV[1u] = ADC_CV_CV(Config->CompVal2);
    aafe:	9b00      	ldr	r3, [sp, #0]
    ab00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    ab02:	461a      	mov	r2, r3
    ab04:	9b02      	ldr	r3, [sp, #8]
    ab06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    Adc_HwAcc_SetSC2Reg(Base, SC2ClearMask, SC2Reg);
    ab0a:	9a05      	ldr	r2, [sp, #20]
    ab0c:	9904      	ldr	r1, [sp, #16]
    ab0e:	9802      	ldr	r0, [sp, #8]
    ab10:	f7ff fdd2 	bl	a6b8 <Adc_HwAcc_SetSC2Reg>

    Adc_HwAcc_SetUserGainAndOffset(Base, Config->UsrGain, Config->UsrOffset);
    ab14:	9b00      	ldr	r3, [sp, #0]
    ab16:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
    ab18:	9b00      	ldr	r3, [sp, #0]
    ab1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    ab1c:	461a      	mov	r2, r3
    ab1e:	9802      	ldr	r0, [sp, #8]
    ab20:	f7ff fef6 	bl	a910 <Adc_HwAcc_SetUserGainAndOffset>

    Adc_Ip_SetContinuousMode(Instance, Config->ContinuousConvEnable);
    ab24:	9b00      	ldr	r3, [sp, #0]
    ab26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    ab2a:	4619      	mov	r1, r3
    ab2c:	9801      	ldr	r0, [sp, #4]
    ab2e:	f000 f955 	bl	addc <Adc_Ip_SetContinuousMode>

    if (Config->ChannelConfigs != NULL_PTR)
    ab32:	9b00      	ldr	r3, [sp, #0]
    ab34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    ab36:	2b00      	cmp	r3, #0
    ab38:	d01c      	beq.n	ab74 <Adc_Ip_Init+0x166>
    {
        for (Index = 0u; Index < Config->NumChannels; Index++)
    ab3a:	2300      	movs	r3, #0
    ab3c:	f88d 300f 	strb.w	r3, [sp, #15]
    ab40:	e011      	b.n	ab66 <Adc_Ip_Init+0x158>
        {
            Adc_Ip_ConfigChannel(Instance, &(Config->ChannelConfigs[Index]));
    ab42:	9b00      	ldr	r3, [sp, #0]
    ab44:	6b59      	ldr	r1, [r3, #52]	; 0x34
    ab46:	f89d 200f 	ldrb.w	r2, [sp, #15]
    ab4a:	4613      	mov	r3, r2
    ab4c:	005b      	lsls	r3, r3, #1
    ab4e:	4413      	add	r3, r2
    ab50:	009b      	lsls	r3, r3, #2
    ab52:	440b      	add	r3, r1
    ab54:	4619      	mov	r1, r3
    ab56:	9801      	ldr	r0, [sp, #4]
    ab58:	f000 f9c2 	bl	aee0 <Adc_Ip_ConfigChannel>
        for (Index = 0u; Index < Config->NumChannels; Index++)
    ab5c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ab60:	3301      	adds	r3, #1
    ab62:	f88d 300f 	strb.w	r3, [sp, #15]
    ab66:	9b00      	ldr	r3, [sp, #0]
    ab68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    ab6c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    ab70:	429a      	cmp	r2, r3
    ab72:	d3e6      	bcc.n	ab42 <Adc_Ip_Init+0x134>
        }
    }

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_Ip_axState[Instance].ConversionCompleteNotification = Config->ConversionCompleteNotification;
    ab74:	9b00      	ldr	r3, [sp, #0]
    ab76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    ab78:	490f      	ldr	r1, [pc, #60]	; (abb8 <Adc_Ip_Init+0x1aa>)
    ab7a:	9b01      	ldr	r3, [sp, #4]
    ab7c:	204c      	movs	r0, #76	; 0x4c
    ab7e:	fb00 f303 	mul.w	r3, r0, r3
    ab82:	440b      	add	r3, r1
    ab84:	3308      	adds	r3, #8
    ab86:	601a      	str	r2, [r3, #0]
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    Adc_Ip_axState[Instance].CalibrationClockDivide = Config->CalibrationClockDivide;
    ab88:	9b00      	ldr	r3, [sp, #0]
    ab8a:	685a      	ldr	r2, [r3, #4]
    ab8c:	490a      	ldr	r1, [pc, #40]	; (abb8 <Adc_Ip_Init+0x1aa>)
    ab8e:	9b01      	ldr	r3, [sp, #4]
    ab90:	204c      	movs	r0, #76	; 0x4c
    ab92:	fb00 f303 	mul.w	r3, r0, r3
    ab96:	440b      	add	r3, r1
    ab98:	3304      	adds	r3, #4
    ab9a:	601a      	str	r2, [r3, #0]
    Adc_Ip_axState[Instance].Init = TRUE;
    ab9c:	4a06      	ldr	r2, [pc, #24]	; (abb8 <Adc_Ip_Init+0x1aa>)
    ab9e:	9b01      	ldr	r3, [sp, #4]
    aba0:	214c      	movs	r1, #76	; 0x4c
    aba2:	fb01 f303 	mul.w	r3, r1, r3
    aba6:	4413      	add	r3, r2
    aba8:	2201      	movs	r2, #1
    abaa:	701a      	strb	r2, [r3, #0]
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    Adc_Ip_axState[Instance].PretriggerSel = Config->PretriggerSel;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
}
    abac:	bf00      	nop
    abae:	b007      	add	sp, #28
    abb0:	f85d fb04 	ldr.w	pc, [sp], #4
    abb4:	000197f0 	.word	0x000197f0
    abb8:	1fff8d80 	.word	0x1fff8d80

0000abbc <Adc_Ip_DeInit>:
* Description   : This function resets the ADC internal registers to default values.
*
* @implements     Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Adc_Ip_DeInit(const uint32 Instance)
{
    abbc:	b500      	push	{lr}
    abbe:	b0c3      	sub	sp, #268	; 0x10c
    abc0:	ab42      	add	r3, sp, #264	; 0x108
    abc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    abc6:	6018      	str	r0, [r3, #0]

    Adc_Ip_ConfigType DefaultConfig;
    Adc_Ip_ChanConfigType ChannelConfigs[ADC_MAX_CHAN_COUNT];
    uint8 Index;

    DefaultConfig.ClockDivide = ADC_IP_CLK_FULL_BUS;
    abc8:	2300      	movs	r3, #0
    abca:	9332      	str	r3, [sp, #200]	; 0xc8
    DefaultConfig.CalibrationClockDivide = ADC_IP_CLK_EIGHTH_BUS;
    abcc:	2303      	movs	r3, #3
    abce:	9333      	str	r3, [sp, #204]	; 0xcc
    DefaultConfig.InputClock = ADC_IP_CLK_ALT_1;
    abd0:	2300      	movs	r3, #0
    abd2:	9334      	str	r3, [sp, #208]	; 0xd0
    DefaultConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    abd4:	230c      	movs	r3, #12
    abd6:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
    DefaultConfig.AvgEn = FALSE;
    abda:	2300      	movs	r3, #0
    abdc:	f88d 30d5 	strb.w	r3, [sp, #213]	; 0xd5
    DefaultConfig.AvgSel = ADC_IP_AVG_4_CONV;
    abe0:	2300      	movs	r3, #0
    abe2:	9336      	str	r3, [sp, #216]	; 0xd8
    DefaultConfig.Resolution = ADC_IP_RESOLUTION_8BIT;
    abe4:	2300      	movs	r3, #0
    abe6:	9337      	str	r3, [sp, #220]	; 0xdc
    DefaultConfig.TriggerMode = ADC_IP_TRIGGER_SOFTWARE;
    abe8:	2300      	movs	r3, #0
    abea:	9338      	str	r3, [sp, #224]	; 0xe0
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    DefaultConfig.PretriggerSel = ADC_IP_PRETRIGGER_SEL_PDB;
    DefaultConfig.TriggerSel = ADC_IP_TRIGGER_SEL_PDB;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
    DefaultConfig.DmaEnable = FALSE;
    abec:	2300      	movs	r3, #0
    abee:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
    DefaultConfig.VoltageRef = ADC_IP_VOLTAGEREF_VREF;
    abf2:	2300      	movs	r3, #0
    abf4:	933a      	str	r3, [sp, #232]	; 0xe8
    DefaultConfig.ContinuousConvEnable = FALSE;
    abf6:	2300      	movs	r3, #0
    abf8:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DefaultConfig.SupplyMonitoringEnable = FALSE;
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    DefaultConfig.CompareEnable = FALSE;
    abfc:	2300      	movs	r3, #0
    abfe:	f88d 30ed 	strb.w	r3, [sp, #237]	; 0xed
    DefaultConfig.CompareGreaterThanEnable = FALSE;
    ac02:	2300      	movs	r3, #0
    ac04:	f88d 30ee 	strb.w	r3, [sp, #238]	; 0xee
    DefaultConfig.CompareRangeFuncEnable = FALSE;
    ac08:	2300      	movs	r3, #0
    ac0a:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
    DefaultConfig.CompVal1 = 0u;
    ac0e:	2300      	movs	r3, #0
    ac10:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
    DefaultConfig.CompVal2 = 0u;
    ac14:	2300      	movs	r3, #0
    ac16:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
    DefaultConfig.UsrGain = ADC_IP_DEFAULT_USER_GAIN;
    ac1a:	2304      	movs	r3, #4
    ac1c:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
    DefaultConfig.UsrOffset = 0u;
    ac20:	2300      	movs	r3, #0
    ac22:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6
    DefaultConfig.NumChannels = ADC_MAX_CHAN_COUNT;
    ac26:	2310      	movs	r3, #16
    ac28:	f88d 30f8 	strb.w	r3, [sp, #248]	; 0xf8
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    ac2c:	2300      	movs	r3, #0
    ac2e:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    ac32:	e02b      	b.n	ac8c <Adc_Ip_DeInit+0xd0>
    {
        ChannelConfigs[Index].ChnIdx = Index;
    ac34:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    ac38:	ab42      	add	r3, sp, #264	; 0x108
    ac3a:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    ac3e:	4613      	mov	r3, r2
    ac40:	005b      	lsls	r3, r3, #1
    ac42:	4413      	add	r3, r2
    ac44:	009b      	lsls	r3, r3, #2
    ac46:	440b      	add	r3, r1
    ac48:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    ac4c:	701a      	strb	r2, [r3, #0]
        ChannelConfigs[Index].Channel = ADC_IP_INPUTCHAN_DISABLED;
    ac4e:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    ac52:	ab42      	add	r3, sp, #264	; 0x108
    ac54:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    ac58:	4613      	mov	r3, r2
    ac5a:	005b      	lsls	r3, r3, #1
    ac5c:	4413      	add	r3, r2
    ac5e:	009b      	lsls	r3, r3, #2
    ac60:	440b      	add	r3, r1
    ac62:	3304      	adds	r3, #4
    ac64:	221f      	movs	r2, #31
    ac66:	601a      	str	r2, [r3, #0]
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
        ChannelConfigs[Index].InterruptEnable = FALSE;
    ac68:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    ac6c:	ab42      	add	r3, sp, #264	; 0x108
    ac6e:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    ac72:	4613      	mov	r3, r2
    ac74:	005b      	lsls	r3, r3, #1
    ac76:	4413      	add	r3, r2
    ac78:	009b      	lsls	r3, r3, #2
    ac7a:	440b      	add	r3, r1
    ac7c:	3308      	adds	r3, #8
    ac7e:	2200      	movs	r2, #0
    ac80:	701a      	strb	r2, [r3, #0]
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    ac82:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    ac86:	3301      	adds	r3, #1
    ac88:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    ac8c:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    ac90:	2b0f      	cmp	r3, #15
    ac92:	d9cf      	bls.n	ac34 <Adc_Ip_DeInit+0x78>
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    }
    DefaultConfig.ChannelConfigs = ChannelConfigs;
    ac94:	ab02      	add	r3, sp, #8
    ac96:	933f      	str	r3, [sp, #252]	; 0xfc
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    DefaultConfig.ConversionCompleteNotification = NULL_PTR;
    ac98:	2300      	movs	r3, #0
    ac9a:	9340      	str	r3, [sp, #256]	; 0x100
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

    Adc_Ip_Init(Instance, &DefaultConfig);
    ac9c:	aa32      	add	r2, sp, #200	; 0xc8
    ac9e:	ab42      	add	r3, sp, #264	; 0x108
    aca0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    aca4:	4611      	mov	r1, r2
    aca6:	6818      	ldr	r0, [r3, #0]
    aca8:	f7ff feb1 	bl	aa0e <Adc_Ip_Init>
    {
        ADC_ResetSupplyMonitoringChannel();
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    Adc_Ip_axState[Instance].Init = FALSE;
    acac:	4a07      	ldr	r2, [pc, #28]	; (accc <Adc_Ip_DeInit+0x110>)
    acae:	ab42      	add	r3, sp, #264	; 0x108
    acb0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    acb4:	681b      	ldr	r3, [r3, #0]
    acb6:	214c      	movs	r1, #76	; 0x4c
    acb8:	fb01 f303 	mul.w	r3, r1, r3
    acbc:	4413      	add	r3, r2
    acbe:	2200      	movs	r2, #0
    acc0:	701a      	strb	r2, [r3, #0]
}
    acc2:	bf00      	nop
    acc4:	b043      	add	sp, #268	; 0x10c
    acc6:	f85d fb04 	ldr.w	pc, [sp], #4
    acca:	bf00      	nop
    accc:	1fff8d80 	.word	0x1fff8d80

0000acd0 <Adc_Ip_SetAveraging>:
* @implements     Adc_Ip_SetAveraging_Activity
* END**************************************************************************/
void Adc_Ip_SetAveraging(const uint32 Instance,
                         const boolean AvgEn,
                         const Adc_Ip_AvgSelectType AvgSel)
{
    acd0:	b500      	push	{lr}
    acd2:	b087      	sub	sp, #28
    acd4:	9003      	str	r0, [sp, #12]
    acd6:	460b      	mov	r3, r1
    acd8:	9201      	str	r2, [sp, #4]
    acda:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    acde:	4a0a      	ldr	r2, [pc, #40]	; (ad08 <Adc_Ip_SetAveraging+0x38>)
    ace0:	9b03      	ldr	r3, [sp, #12]
    ace2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ace6:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27();
    ace8:	f007 fdca 	bl	12880 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>
    Adc_HwAcc_SetAveraging(Base, AvgEn, AvgSel);
    acec:	f89d 300b 	ldrb.w	r3, [sp, #11]
    acf0:	9a01      	ldr	r2, [sp, #4]
    acf2:	4619      	mov	r1, r3
    acf4:	9805      	ldr	r0, [sp, #20]
    acf6:	f7ff fd73 	bl	a7e0 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27();
    acfa:	f007 fded 	bl	128d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>
}
    acfe:	bf00      	nop
    ad00:	b007      	add	sp, #28
    ad02:	f85d fb04 	ldr.w	pc, [sp], #4
    ad06:	bf00      	nop
    ad08:	000197f0 	.word	0x000197f0

0000ad0c <Adc_Ip_SetSampleTime>:
*
* @implements     Adc_Ip_SetSampleTime_Activity
* END**************************************************************************/
void Adc_Ip_SetSampleTime(const uint32 Instance,
                          const uint8 SampleTime)
{
    ad0c:	b500      	push	{lr}
    ad0e:	b085      	sub	sp, #20
    ad10:	9001      	str	r0, [sp, #4]
    ad12:	460b      	mov	r3, r1
    ad14:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    ad18:	4a09      	ldr	r2, [pc, #36]	; (ad40 <Adc_Ip_SetSampleTime+0x34>)
    ad1a:	9b01      	ldr	r3, [sp, #4]
    ad1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad20:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16();
    ad22:	f007 fa27 	bl	12174 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>
    Adc_HwAcc_SetSampleTime(Base, SampleTime);
    ad26:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ad2a:	4619      	mov	r1, r3
    ad2c:	9803      	ldr	r0, [sp, #12]
    ad2e:	f7ff fd36 	bl	a79e <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16();
    ad32:	f007 fa4b 	bl	121cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>
}
    ad36:	bf00      	nop
    ad38:	b005      	add	sp, #20
    ad3a:	f85d fb04 	ldr.w	pc, [sp], #4
    ad3e:	bf00      	nop
    ad40:	000197f0 	.word	0x000197f0

0000ad44 <Adc_Ip_EnableDma>:
* Description   : This function enables DMA.
*
* @implements     Adc_Ip_EnableDma_Activity
* END**************************************************************************/
void Adc_Ip_EnableDma(const uint32 Instance)
{
    ad44:	b500      	push	{lr}
    ad46:	b085      	sub	sp, #20
    ad48:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    ad4a:	4a0a      	ldr	r2, [pc, #40]	; (ad74 <Adc_Ip_EnableDma+0x30>)
    ad4c:	9b01      	ldr	r3, [sp, #4]
    ad4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad52:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26();
    ad54:	f007 fd42 	bl	127dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>
    Base->SC2 |= ADC_SC2_DMAEN_MASK;
    ad58:	9b03      	ldr	r3, [sp, #12]
    ad5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    ad5e:	f043 0204 	orr.w	r2, r3, #4
    ad62:	9b03      	ldr	r3, [sp, #12]
    ad64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26();
    ad68:	f007 fd64 	bl	12834 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>
}
    ad6c:	bf00      	nop
    ad6e:	b005      	add	sp, #20
    ad70:	f85d fb04 	ldr.w	pc, [sp], #4
    ad74:	000197f0 	.word	0x000197f0

0000ad78 <Adc_Ip_DisableDma>:
* Description   : This function disables DMA.
*
* @implements     Adc_Ip_DisableDma_Activity
* END**************************************************************************/
void Adc_Ip_DisableDma(const uint32 Instance)
{
    ad78:	b500      	push	{lr}
    ad7a:	b085      	sub	sp, #20
    ad7c:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    ad7e:	4a0a      	ldr	r2, [pc, #40]	; (ada8 <Adc_Ip_DisableDma+0x30>)
    ad80:	9b01      	ldr	r3, [sp, #4]
    ad82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad86:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22();
    ad88:	f007 fbe0 	bl	1254c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>
    Base->SC2 &= ~(ADC_SC2_DMAEN_MASK);
    ad8c:	9b03      	ldr	r3, [sp, #12]
    ad8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    ad92:	f023 0204 	bic.w	r2, r3, #4
    ad96:	9b03      	ldr	r3, [sp, #12]
    ad98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22();
    ad9c:	f007 fc02 	bl	125a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>
}
    ada0:	bf00      	nop
    ada2:	b005      	add	sp, #20
    ada4:	f85d fb04 	ldr.w	pc, [sp], #4
    ada8:	000197f0 	.word	0x000197f0

0000adac <Adc_Ip_SetTriggerMode>:
*
* @implements     Adc_Ip_SetTriggerMode_Activity
* END**************************************************************************/
void Adc_Ip_SetTriggerMode(const uint32 Instance,
                           const Adc_Ip_TrigType TriggerMode)
{
    adac:	b500      	push	{lr}
    adae:	b085      	sub	sp, #20
    adb0:	9001      	str	r0, [sp, #4]
    adb2:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    adb4:	4a08      	ldr	r2, [pc, #32]	; (add8 <Adc_Ip_SetTriggerMode+0x2c>)
    adb6:	9b01      	ldr	r3, [sp, #4]
    adb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adbc:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23();
    adbe:	f007 fc17 	bl	125f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    adc2:	9900      	ldr	r1, [sp, #0]
    adc4:	9803      	ldr	r0, [sp, #12]
    adc6:	f7ff fd4e 	bl	a866 <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23();
    adca:	f007 fc3d 	bl	12648 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>
}
    adce:	bf00      	nop
    add0:	b005      	add	sp, #20
    add2:	f85d fb04 	ldr.w	pc, [sp], #4
    add6:	bf00      	nop
    add8:	000197f0 	.word	0x000197f0

0000addc <Adc_Ip_SetContinuousMode>:
*
* @implements     Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Adc_Ip_SetContinuousMode(const uint32 Instance,
                              const boolean ContinuousModeEnable)
{
    addc:	b500      	push	{lr}
    adde:	b085      	sub	sp, #20
    ade0:	9001      	str	r0, [sp, #4]
    ade2:	460b      	mov	r3, r1
    ade4:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    ade8:	4a11      	ldr	r2, [pc, #68]	; (ae30 <Adc_Ip_SetContinuousMode+0x54>)
    adea:	9b01      	ldr	r3, [sp, #4]
    adec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adf0:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30();
    adf2:	f007 fe3b 	bl	12a6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>
    uint32 Sc3Reg = Base->SC3;
    adf6:	9b03      	ldr	r3, [sp, #12]
    adf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    adfc:	9302      	str	r3, [sp, #8]
    Sc3Reg &= ~(ADC_SC3_ADCO_MASK);
    adfe:	9b02      	ldr	r3, [sp, #8]
    ae00:	f023 0308 	bic.w	r3, r3, #8
    ae04:	9302      	str	r3, [sp, #8]
    Sc3Reg |= ADC_SC3_ADCO(ContinuousModeEnable ? 1u : 0u);
    ae06:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ae0a:	2b00      	cmp	r3, #0
    ae0c:	d001      	beq.n	ae12 <Adc_Ip_SetContinuousMode+0x36>
    ae0e:	2308      	movs	r3, #8
    ae10:	e000      	b.n	ae14 <Adc_Ip_SetContinuousMode+0x38>
    ae12:	2300      	movs	r3, #0
    ae14:	9a02      	ldr	r2, [sp, #8]
    ae16:	4313      	orrs	r3, r2
    ae18:	9302      	str	r3, [sp, #8]
    Base->SC3 = Sc3Reg;
    ae1a:	9b03      	ldr	r3, [sp, #12]
    ae1c:	9a02      	ldr	r2, [sp, #8]
    ae1e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30();
    ae22:	f007 fe4f 	bl	12ac4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>
}
    ae26:	bf00      	nop
    ae28:	b005      	add	sp, #20
    ae2a:	f85d fb04 	ldr.w	pc, [sp], #4
    ae2e:	bf00      	nop
    ae30:	000197f0 	.word	0x000197f0

0000ae34 <Adc_Ip_SetResolution>:
*
* @implements     Adc_Ip_SetResolution_Activity
* END**************************************************************************/
void Adc_Ip_SetResolution(const uint32 Instance,
                          const Adc_Ip_ResolutionType Resolution)
{
    ae34:	b500      	push	{lr}
    ae36:	b085      	sub	sp, #20
    ae38:	9001      	str	r0, [sp, #4]
    ae3a:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    ae3c:	4a0e      	ldr	r2, [pc, #56]	; (ae78 <Adc_Ip_SetResolution+0x44>)
    ae3e:	9b01      	ldr	r3, [sp, #4]
    ae40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae44:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10();
    ae46:	f006 fe61 	bl	11b0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>
    uint32 Cfg1Reg = Base->CFG1;
    ae4a:	9b03      	ldr	r3, [sp, #12]
    ae4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    ae4e:	9302      	str	r3, [sp, #8]
    Cfg1Reg &= ~(ADC_CFG1_MODE_MASK);
    ae50:	9b02      	ldr	r3, [sp, #8]
    ae52:	f023 030c 	bic.w	r3, r3, #12
    ae56:	9302      	str	r3, [sp, #8]
    Cfg1Reg |= ADC_CFG1_MODE(Resolution);
    ae58:	9b00      	ldr	r3, [sp, #0]
    ae5a:	009b      	lsls	r3, r3, #2
    ae5c:	f003 030c 	and.w	r3, r3, #12
    ae60:	9a02      	ldr	r2, [sp, #8]
    ae62:	4313      	orrs	r3, r2
    ae64:	9302      	str	r3, [sp, #8]
    Base->CFG1 = Cfg1Reg;
    ae66:	9b03      	ldr	r3, [sp, #12]
    ae68:	9a02      	ldr	r2, [sp, #8]
    ae6a:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10();
    ae6c:	f006 fe7a 	bl	11b64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>
}
    ae70:	bf00      	nop
    ae72:	b005      	add	sp, #20
    ae74:	f85d fb04 	ldr.w	pc, [sp], #4
    ae78:	000197f0 	.word	0x000197f0

0000ae7c <Adc_Ip_SetClockMode>:
*
* @implements     Adc_Ip_SetClockMode_Activity
* END**************************************************************************/
void Adc_Ip_SetClockMode(const uint32 Instance,
                         const Adc_Ip_ClockConfigType * const Config)
{
    ae7c:	b500      	push	{lr}
    ae7e:	b085      	sub	sp, #20
    ae80:	9001      	str	r0, [sp, #4]
    ae82:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    ae84:	4a15      	ldr	r2, [pc, #84]	; (aedc <Adc_Ip_SetClockMode+0x60>)
    ae86:	9b01      	ldr	r3, [sp, #4]
    ae88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae8c:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11();
    ae8e:	f006 ffd7 	bl	11e40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    ae92:	9b00      	ldr	r3, [sp, #0]
    ae94:	6819      	ldr	r1, [r3, #0]
    ae96:	9b00      	ldr	r3, [sp, #0]
    ae98:	685b      	ldr	r3, [r3, #4]
    ae9a:	461a      	mov	r2, r3
    ae9c:	9803      	ldr	r0, [sp, #12]
    ae9e:	f7ff fc23 	bl	a6e8 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11();
    aea2:	f006 fff9 	bl	11e98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14();
    aea6:	f007 f8c1 	bl	1202c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    aeaa:	9b00      	ldr	r3, [sp, #0]
    aeac:	7a1b      	ldrb	r3, [r3, #8]
    aeae:	4619      	mov	r1, r3
    aeb0:	9803      	ldr	r0, [sp, #12]
    aeb2:	f7ff fc74 	bl	a79e <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14();
    aeb6:	f007 f8e5 	bl	12084 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28();
    aeba:	f007 fd33 	bl	12924 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    aebe:	9b00      	ldr	r3, [sp, #0]
    aec0:	7a59      	ldrb	r1, [r3, #9]
    aec2:	9b00      	ldr	r3, [sp, #0]
    aec4:	68db      	ldr	r3, [r3, #12]
    aec6:	461a      	mov	r2, r3
    aec8:	9803      	ldr	r0, [sp, #12]
    aeca:	f7ff fc89 	bl	a7e0 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28();
    aece:	f007 fd55 	bl	1297c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>
}
    aed2:	bf00      	nop
    aed4:	b005      	add	sp, #20
    aed6:	f85d fb04 	ldr.w	pc, [sp], #4
    aeda:	bf00      	nop
    aedc:	000197f0 	.word	0x000197f0

0000aee0 <Adc_Ip_ConfigChannel>:
*
* @implements     Adc_Ip_ConfigChannel_Activity
* END**************************************************************************/
void Adc_Ip_ConfigChannel(const uint32 Instance,
                          const Adc_Ip_ChanConfigType * const ChanConfig)
{
    aee0:	b510      	push	{r4, lr}
    aee2:	b084      	sub	sp, #16
    aee4:	9001      	str	r0, [sp, #4]
    aee6:	9100      	str	r1, [sp, #0]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)ChanConfig->Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    aee8:	4a13      	ldr	r2, [pc, #76]	; (af38 <Adc_Ip_ConfigChannel+0x58>)
    aeea:	9b01      	ldr	r3, [sp, #4]
    aeec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aef0:	9303      	str	r3, [sp, #12]
        InputChanDemapped = ADC_IP_INPUTCHAN_INT0;
    }
    else
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    {
        InputChanDemapped = ChanConfig->Channel;
    aef2:	9b00      	ldr	r3, [sp, #0]
    aef4:	685b      	ldr	r3, [r3, #4]
    aef6:	9302      	str	r3, [sp, #8]
    }

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21();
    aef8:	f007 fad6 	bl	124a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, ChanConfig->InterruptEnable);
    aefc:	9b00      	ldr	r3, [sp, #0]
    aefe:	7819      	ldrb	r1, [r3, #0]
    af00:	9b00      	ldr	r3, [sp, #0]
    af02:	7a1b      	ldrb	r3, [r3, #8]
    af04:	9a02      	ldr	r2, [sp, #8]
    af06:	9803      	ldr	r0, [sp, #12]
    af08:	f7ff fcd5 	bl	a8b6 <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, FALSE);
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21();
    af0c:	f007 faf8 	bl	12500 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>

    /* Also update in state structure */
    Adc_Ip_axState[Instance].ChannelConfig[ChanConfig->ChnIdx] = ChanConfig->Channel;
    af10:	9b00      	ldr	r3, [sp, #0]
    af12:	781b      	ldrb	r3, [r3, #0]
    af14:	461c      	mov	r4, r3
    af16:	9b00      	ldr	r3, [sp, #0]
    af18:	6859      	ldr	r1, [r3, #4]
    af1a:	4808      	ldr	r0, [pc, #32]	; (af3c <Adc_Ip_ConfigChannel+0x5c>)
    af1c:	9a01      	ldr	r2, [sp, #4]
    af1e:	4613      	mov	r3, r2
    af20:	00db      	lsls	r3, r3, #3
    af22:	4413      	add	r3, r2
    af24:	005b      	lsls	r3, r3, #1
    af26:	4413      	add	r3, r2
    af28:	4423      	add	r3, r4
    af2a:	3302      	adds	r3, #2
    af2c:	009b      	lsls	r3, r3, #2
    af2e:	4403      	add	r3, r0
    af30:	6059      	str	r1, [r3, #4]
}
    af32:	bf00      	nop
    af34:	b004      	add	sp, #16
    af36:	bd10      	pop	{r4, pc}
    af38:	000197f0 	.word	0x000197f0
    af3c:	1fff8d80 	.word	0x1fff8d80

0000af40 <Adc_Ip_SetDisabledChannel>:
* @implements     Adc_Ip_SetDisabledChannel_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_SetDisabledChannel(const uint32 Instance,
                                            const uint8 ControlChanIdx,
                                            const boolean WithTimeout)
{
    af40:	b500      	push	{lr}
    af42:	b089      	sub	sp, #36	; 0x24
    af44:	9001      	str	r0, [sp, #4]
    af46:	460b      	mov	r3, r1
    af48:	f88d 3003 	strb.w	r3, [sp, #3]
    af4c:	4613      	mov	r3, r2
    af4e:	f88d 3002 	strb.w	r3, [sp, #2]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    af52:	4a24      	ldr	r2, [pc, #144]	; (afe4 <Adc_Ip_SetDisabledChannel+0xa4>)
    af54:	9b01      	ldr	r3, [sp, #4]
    af56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af5a:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    af5c:	2300      	movs	r3, #0
    af5e:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    af60:	2100      	movs	r1, #0
    af62:	4821      	ldr	r0, [pc, #132]	; (afe8 <Adc_Ip_SetDisabledChannel+0xa8>)
    af64:	f7f7 fea8 	bl	2cb8 <OsIf_MicrosToTicks>
    af68:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    af6a:	2000      	movs	r0, #0
    af6c:	f7f7 fe58 	bl	2c20 <OsIf_GetCounter>
    af70:	4603      	mov	r3, r0
    af72:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    af74:	2300      	movs	r3, #0
    af76:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17();
    af78:	f007 f94e 	bl	12218 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>
    /* Set input channel select to disabled */
    SC1(Base, ControlChanIdx) |= ADC_SC1_ADCH_MASK;
    af7c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    af80:	9b05      	ldr	r3, [sp, #20]
    af82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    af86:	f89d 2003 	ldrb.w	r2, [sp, #3]
    af8a:	f043 011f 	orr.w	r1, r3, #31
    af8e:	9b05      	ldr	r3, [sp, #20]
    af90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17();
    af94:	f007 f96c 	bl	12270 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>

    if (WithTimeout == TRUE)
    af98:	f89d 3002 	ldrb.w	r3, [sp, #2]
    af9c:	2b00      	cmp	r3, #0
    af9e:	d01c      	beq.n	afda <Adc_Ip_SetDisabledChannel+0x9a>
    {
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    afa0:	e008      	b.n	afb4 <Adc_Ip_SetDisabledChannel+0x74>
        {
            ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    afa2:	ab03      	add	r3, sp, #12
    afa4:	2100      	movs	r1, #0
    afa6:	4618      	mov	r0, r3
    afa8:	f7f7 fe53 	bl	2c52 <OsIf_GetElapsed>
    afac:	4602      	mov	r2, r0
    afae:	9b06      	ldr	r3, [sp, #24]
    afb0:	4413      	add	r3, r2
    afb2:	9306      	str	r3, [sp, #24]
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    afb4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    afb8:	9b05      	ldr	r3, [sp, #20]
    afba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    afbe:	f003 031f 	and.w	r3, r3, #31
    afc2:	2b1f      	cmp	r3, #31
    afc4:	d003      	beq.n	afce <Adc_Ip_SetDisabledChannel+0x8e>
    afc6:	9a06      	ldr	r2, [sp, #24]
    afc8:	9b04      	ldr	r3, [sp, #16]
    afca:	429a      	cmp	r2, r3
    afcc:	d3e9      	bcc.n	afa2 <Adc_Ip_SetDisabledChannel+0x62>
        }
        if (ElapsedTicks >= TimeoutTicks)
    afce:	9a06      	ldr	r2, [sp, #24]
    afd0:	9b04      	ldr	r3, [sp, #16]
    afd2:	429a      	cmp	r2, r3
    afd4:	d301      	bcc.n	afda <Adc_Ip_SetDisabledChannel+0x9a>
        {
            Status = ADC_IP_STATUS_TIMEOUT;
    afd6:	2302      	movs	r3, #2
    afd8:	9307      	str	r3, [sp, #28]
        }
    }

    return Status;
    afda:	9b07      	ldr	r3, [sp, #28]
}
    afdc:	4618      	mov	r0, r3
    afde:	b009      	add	sp, #36	; 0x24
    afe0:	f85d fb04 	ldr.w	pc, [sp], #4
    afe4:	000197f0 	.word	0x000197f0
    afe8:	000186a0 	.word	0x000186a0

0000afec <Adc_Ip_StartConversion>:
* @implements     Adc_Ip_StartConversion_Activity
* END**************************************************************************/
void Adc_Ip_StartConversion(const uint32 Instance,
                            Adc_Ip_InputChannelType InputChannel,
                            const boolean InterruptEnable)
{
    afec:	b500      	push	{lr}
    afee:	b087      	sub	sp, #28
    aff0:	9003      	str	r0, [sp, #12]
    aff2:	9102      	str	r1, [sp, #8]
    aff4:	4613      	mov	r3, r2
    aff6:	f88d 3007 	strb.w	r3, [sp, #7]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    affa:	4a0a      	ldr	r2, [pc, #40]	; (b024 <Adc_Ip_StartConversion+0x38>)
    affc:	9b03      	ldr	r3, [sp, #12]
    affe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b002:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18();
    b004:	f007 f95a 	bl	122bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>
    /* Configure SC1A register */
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, InterruptEnable);
    b008:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b00c:	9a02      	ldr	r2, [sp, #8]
    b00e:	2100      	movs	r1, #0
    b010:	9805      	ldr	r0, [sp, #20]
    b012:	f7ff fc50 	bl	a8b6 <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, FALSE);
    (void)InterruptEnable;
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18();
    b016:	f007 f97d 	bl	12314 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>
}
    b01a:	bf00      	nop
    b01c:	b007      	add	sp, #28
    b01e:	f85d fb04 	ldr.w	pc, [sp], #4
    b022:	bf00      	nop
    b024:	000197f0 	.word	0x000197f0

0000b028 <Adc_Ip_GetConvActiveFlag>:
* Description   : Reads and return conversion active flag status.
*
* @implements     Adc_Ip_GetConvActiveFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvActiveFlag(const uint32 Instance)
{
    b028:	b084      	sub	sp, #16
    b02a:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    b02c:	4a0b      	ldr	r2, [pc, #44]	; (b05c <Adc_Ip_GetConvActiveFlag+0x34>)
    b02e:	9b01      	ldr	r3, [sp, #4]
    b030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b034:	9303      	str	r3, [sp, #12]
    uint32 Sc2Reg = Base->SC2;
    b036:	9b03      	ldr	r3, [sp, #12]
    b038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    b03c:	9302      	str	r3, [sp, #8]

    Sc2Reg = (Sc2Reg & ADC_SC2_ADACT_MASK) >> ADC_SC2_ADACT_SHIFT;
    b03e:	9b02      	ldr	r3, [sp, #8]
    b040:	09db      	lsrs	r3, r3, #7
    b042:	f003 0301 	and.w	r3, r3, #1
    b046:	9302      	str	r3, [sp, #8]

    return (Sc2Reg != 0u) ? TRUE : FALSE;
    b048:	9b02      	ldr	r3, [sp, #8]
    b04a:	2b00      	cmp	r3, #0
    b04c:	bf14      	ite	ne
    b04e:	2301      	movne	r3, #1
    b050:	2300      	moveq	r3, #0
    b052:	b2db      	uxtb	r3, r3
}
    b054:	4618      	mov	r0, r3
    b056:	b004      	add	sp, #16
    b058:	4770      	bx	lr
    b05a:	bf00      	nop
    b05c:	000197f0 	.word	0x000197f0

0000b060 <Adc_Ip_GetChanInterrupt>:
*
* @implements     Adc_Ip_GetChanInterrupt_Activity
* END**************************************************************************/
boolean Adc_Ip_GetChanInterrupt(const uint32 Instance,
                                const uint8 ControlChanIdx)
{
    b060:	b500      	push	{lr}
    b062:	b085      	sub	sp, #20
    b064:	9001      	str	r0, [sp, #4]
    b066:	460b      	mov	r3, r1
    b068:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    b06c:	4a08      	ldr	r2, [pc, #32]	; (b090 <Adc_Ip_GetChanInterrupt+0x30>)
    b06e:	9b01      	ldr	r3, [sp, #4]
    b070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b074:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b07c:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetAIEN(Sc1Reg);
    b07e:	9803      	ldr	r0, [sp, #12]
    b080:	f7ff fc5e 	bl	a940 <Adc_HwAcc_GetAIEN>
    b084:	4603      	mov	r3, r0
}
    b086:	4618      	mov	r0, r3
    b088:	b005      	add	sp, #20
    b08a:	f85d fb04 	ldr.w	pc, [sp], #4
    b08e:	bf00      	nop
    b090:	000197f0 	.word	0x000197f0

0000b094 <Adc_Ip_GetConvCompleteFlag>:
*
* @implements     Adc_Ip_GetConvCompleteFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvCompleteFlag(const uint32 Instance,
                                   const uint8 ControlChanIdx)
{
    b094:	b500      	push	{lr}
    b096:	b085      	sub	sp, #20
    b098:	9001      	str	r0, [sp, #4]
    b09a:	460b      	mov	r3, r1
    b09c:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    b0a0:	4a08      	ldr	r2, [pc, #32]	; (b0c4 <Adc_Ip_GetConvCompleteFlag+0x30>)
    b0a2:	9b01      	ldr	r3, [sp, #4]
    b0a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0a8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b0ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b0b0:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetCOCO(Sc1Reg);
    b0b2:	9803      	ldr	r0, [sp, #12]
    b0b4:	f7ff fc52 	bl	a95c <Adc_HwAcc_GetCOCO>
    b0b8:	4603      	mov	r3, r0
}
    b0ba:	4618      	mov	r0, r3
    b0bc:	b005      	add	sp, #20
    b0be:	f85d fb04 	ldr.w	pc, [sp], #4
    b0c2:	bf00      	nop
    b0c4:	000197f0 	.word	0x000197f0

0000b0c8 <Adc_Ip_GetConvData>:
*
* @implements     Adc_Ip_GetConvData_Activity
* END**************************************************************************/
uint16 Adc_Ip_GetConvData(const uint32 Instance,
                          const uint8 ControlChanIdx)
{
    b0c8:	b500      	push	{lr}
    b0ca:	b085      	sub	sp, #20
    b0cc:	9001      	str	r0, [sp, #4]
    b0ce:	460b      	mov	r3, r1
    b0d0:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    b0d4:	4a07      	ldr	r2, [pc, #28]	; (b0f4 <Adc_Ip_GetConvData+0x2c>)
    b0d6:	9b01      	ldr	r3, [sp, #4]
    b0d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0dc:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetData(Base, ControlChanIdx);
    b0de:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b0e2:	4619      	mov	r1, r3
    b0e4:	9803      	ldr	r0, [sp, #12]
    b0e6:	f7ff fc47 	bl	a978 <Adc_HwAcc_GetData>
    b0ea:	4603      	mov	r3, r0
}
    b0ec:	4618      	mov	r0, r3
    b0ee:	b005      	add	sp, #20
    b0f0:	f85d fb04 	ldr.w	pc, [sp], #4
    b0f4:	000197f0 	.word	0x000197f0

0000b0f8 <Adc_Ip_DoCalibration>:
* specified frequency (50Mhz) and greater than minimum specified frequency (20Mhz).
*
* @implements     Adc_Ip_DoCalibration_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_DoCalibration(const uint32 Instance)
{
    b0f8:	b500      	push	{lr}
    b0fa:	b093      	sub	sp, #76	; 0x4c
    b0fc:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    b0fe:	4a59      	ldr	r2, [pc, #356]	; (b264 <Adc_Ip_DoCalibration+0x16c>)
    b100:	9b01      	ldr	r3, [sp, #4]
    b102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b106:	930f      	str	r3, [sp, #60]	; 0x3c
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    b108:	2300      	movs	r3, #0
    b10a:	9311      	str	r3, [sp, #68]	; 0x44
    Adc_Ip_TrigType TriggerMode;
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    b10c:	2100      	movs	r1, #0
    b10e:	4856      	ldr	r0, [pc, #344]	; (b268 <Adc_Ip_DoCalibration+0x170>)
    b110:	f7f7 fdd2 	bl	2cb8 <OsIf_MicrosToTicks>
    b114:	900e      	str	r0, [sp, #56]	; 0x38
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    b116:	2000      	movs	r0, #0
    b118:	f7f7 fd82 	bl	2c20 <OsIf_GetCounter>
    b11c:	4603      	mov	r3, r0
    b11e:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 ElapsedTicks = 0u;
    b120:	2300      	movs	r3, #0
    b122:	9310      	str	r3, [sp, #64]	; 0x40
    uint32 Reg;
    Adc_Ip_ClockConfigType PreClockConfig;
    Adc_Ip_ClockConfigType CalClockConfig;

    /* Store settings before calibration */
    Reg = Base->SC3;
    b124:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    b12a:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.AvgEn = ((Reg & ADC_SC3_AVGE_MASK) != 0u) ? TRUE : FALSE;
    b12c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b12e:	089b      	lsrs	r3, r3, #2
    b130:	f003 0301 	and.w	r3, r3, #1
    b134:	2b00      	cmp	r3, #0
    b136:	bf14      	ite	ne
    b138:	2301      	movne	r3, #1
    b13a:	2300      	moveq	r3, #0
    b13c:	b2db      	uxtb	r3, r3
    b13e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    PreClockConfig.AvgSel = Adc_HwAcc_GetAverageSelect(Reg);
    b142:	980d      	ldr	r0, [sp, #52]	; 0x34
    b144:	f7ff fb71 	bl	a82a <Adc_HwAcc_GetAverageSelect>
    b148:	4603      	mov	r3, r0
    b14a:	930a      	str	r3, [sp, #40]	; 0x28

    Reg = Base->CFG2;
    b14c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b14e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    b150:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.SampleTime = (uint8) ((Reg & ADC_CFG2_SMPLTS_MASK) >> ADC_CFG2_SMPLTS_SHIFT);
    b152:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b154:	b2db      	uxtb	r3, r3
    b156:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    TriggerMode = Adc_HwAcc_GetTriggerMode(Base->SC2);
    b15a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b15c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    b160:	4618      	mov	r0, r3
    b162:	f7ff fb99 	bl	a898 <Adc_HwAcc_GetTriggerMode>
    b166:	900c      	str	r0, [sp, #48]	; 0x30

    Reg = Base->CFG1;
    b168:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b16a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b16c:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.ClockDivide = Adc_HwAcc_GetClockDivide(Reg);
    b16e:	980d      	ldr	r0, [sp, #52]	; 0x34
    b170:	f7ff fad8 	bl	a724 <Adc_HwAcc_GetClockDivide>
    b174:	4603      	mov	r3, r0
    b176:	9307      	str	r3, [sp, #28]
    PreClockConfig.InputClock = Adc_HwAcc_GetInputClock(Reg);
    b178:	980d      	ldr	r0, [sp, #52]	; 0x34
    b17a:	f7ff faf2 	bl	a762 <Adc_HwAcc_GetInputClock>
    b17e:	4603      	mov	r3, r0
    b180:	9308      	str	r3, [sp, #32]

    CalClockConfig.AvgEn = TRUE;
    b182:	2301      	movs	r3, #1
    b184:	f88d 3015 	strb.w	r3, [sp, #21]
    CalClockConfig.AvgSel = ADC_IP_AVG_32_CONV;
    b188:	2303      	movs	r3, #3
    b18a:	9306      	str	r3, [sp, #24]
    CalClockConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    b18c:	230c      	movs	r3, #12
    b18e:	f88d 3014 	strb.w	r3, [sp, #20]
    CalClockConfig.ClockDivide = Adc_Ip_axState[Instance].CalibrationClockDivide;
    b192:	4a36      	ldr	r2, [pc, #216]	; (b26c <Adc_Ip_DoCalibration+0x174>)
    b194:	9b01      	ldr	r3, [sp, #4]
    b196:	214c      	movs	r1, #76	; 0x4c
    b198:	fb01 f303 	mul.w	r3, r1, r3
    b19c:	4413      	add	r3, r2
    b19e:	3304      	adds	r3, #4
    b1a0:	681b      	ldr	r3, [r3, #0]
    b1a2:	9303      	str	r3, [sp, #12]
    CalClockConfig.InputClock = PreClockConfig.InputClock;
    b1a4:	9b08      	ldr	r3, [sp, #32]
    b1a6:	9304      	str	r3, [sp, #16]

    /* Prepare required settings for calibration. */
    ADC_DoCalibration_SetParams(Base, &CalClockConfig, ADC_IP_TRIGGER_SOFTWARE);
    b1a8:	ab03      	add	r3, sp, #12
    b1aa:	2200      	movs	r2, #0
    b1ac:	4619      	mov	r1, r3
    b1ae:	980f      	ldr	r0, [sp, #60]	; 0x3c
    b1b0:	f7ff fbfa 	bl	a9a8 <ADC_DoCalibration_SetParams>

    Base->CLPS = 0u;
    b1b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b1b6:	2200      	movs	r2, #0
    b1b8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    Base->CLP3 = 0u;
    b1bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b1be:	2200      	movs	r2, #0
    b1c0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    Base->CLP2 = 0u;
    b1c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b1c6:	2200      	movs	r2, #0
    b1c8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    Base->CLP1 = 0u;
    b1cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b1ce:	2200      	movs	r2, #0
    b1d0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    Base->CLP0 = 0u;
    b1d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b1d6:	2200      	movs	r2, #0
    b1d8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    Base->CLPX = 0u;
    b1dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b1de:	2200      	movs	r2, #0
    b1e0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    Base->CLP9 = 0u;
    b1e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b1e6:	2200      	movs	r2, #0
    b1e8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Start calibration by writing to the calibration field */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    b1ec:	f007 fbec 	bl	129c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Reg = Base->SC3;
    b1f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b1f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    b1f6:	930d      	str	r3, [sp, #52]	; 0x34
    Reg &= ~(ADC_SC3_CAL_MASK);
    b1f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b1fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    b1fe:	930d      	str	r3, [sp, #52]	; 0x34
    Reg |= ADC_SC3_CAL(1u);
    b200:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b206:	930d      	str	r3, [sp, #52]	; 0x34
    Base->SC3 = Reg;
    b208:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b20a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    b20c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    b210:	f007 fc06 	bl	12a20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Wait for the calibration to finish */
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    b214:	e008      	b.n	b228 <Adc_Ip_DoCalibration+0x130>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    b216:	ab0b      	add	r3, sp, #44	; 0x2c
    b218:	2100      	movs	r1, #0
    b21a:	4618      	mov	r0, r3
    b21c:	f7f7 fd19 	bl	2c52 <OsIf_GetElapsed>
    b220:	4602      	mov	r2, r0
    b222:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b224:	4413      	add	r3, r2
    b226:	9310      	str	r3, [sp, #64]	; 0x40
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    b228:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b22a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    b22e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b232:	2b00      	cmp	r3, #0
    b234:	d003      	beq.n	b23e <Adc_Ip_DoCalibration+0x146>
    b236:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b238:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b23a:	429a      	cmp	r2, r3
    b23c:	d3eb      	bcc.n	b216 <Adc_Ip_DoCalibration+0x11e>
    }
    if (ElapsedTicks >= TimeoutTicks)
    b23e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b240:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b242:	429a      	cmp	r2, r3
    b244:	d301      	bcc.n	b24a <Adc_Ip_DoCalibration+0x152>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    b246:	2302      	movs	r3, #2
    b248:	9311      	str	r3, [sp, #68]	; 0x44
    }

    /* Revert settings as same as before calibration. */
    ADC_DoCalibration_SetParams(Base, &PreClockConfig, TriggerMode);
    b24a:	ab07      	add	r3, sp, #28
    b24c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b24e:	4619      	mov	r1, r3
    b250:	980f      	ldr	r0, [sp, #60]	; 0x3c
    b252:	f7ff fba9 	bl	a9a8 <ADC_DoCalibration_SetParams>

    /* Clear COCO flag */
    (void) R(Base, 0u);
    b256:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b258:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return Status;
    b25a:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    b25c:	4618      	mov	r0, r3
    b25e:	b013      	add	sp, #76	; 0x4c
    b260:	f85d fb04 	ldr.w	pc, [sp], #4
    b264:	000197f0 	.word	0x000197f0
    b268:	000186a0 	.word	0x000186a0
    b26c:	1fff8d80 	.word	0x1fff8d80

0000b270 <Adc_Ip_ClearLatchedTriggers>:
* has been deactivated.
*
* @implements     Adc_Ip_ClearLatchedTriggers_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_ClearLatchedTriggers(const uint32 Instance)
{
    b270:	b500      	push	{lr}
    b272:	b089      	sub	sp, #36	; 0x24
    b274:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    b276:	4a1e      	ldr	r2, [pc, #120]	; (b2f0 <Adc_Ip_ClearLatchedTriggers+0x80>)
    b278:	9b01      	ldr	r3, [sp, #4]
    b27a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b27e:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    b280:	2300      	movs	r3, #0
    b282:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    b284:	2100      	movs	r1, #0
    b286:	481b      	ldr	r0, [pc, #108]	; (b2f4 <Adc_Ip_ClearLatchedTriggers+0x84>)
    b288:	f7f7 fd16 	bl	2cb8 <OsIf_MicrosToTicks>
    b28c:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    b28e:	2000      	movs	r0, #0
    b290:	f7f7 fcc6 	bl	2c20 <OsIf_GetCounter>
    b294:	4603      	mov	r3, r0
    b296:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    b298:	2300      	movs	r3, #0
    b29a:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12();
    b29c:	f006 fe22 	bl	11ee4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>
    /* Write bit to clear latched triggers */
    Base->CFG1 |= ADC_CFG1_CLRLTRG(0x01u);
    b2a0:	9b05      	ldr	r3, [sp, #20]
    b2a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b2a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    b2a8:	9b05      	ldr	r3, [sp, #20]
    b2aa:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12();
    b2ac:	f006 fe46 	bl	11f3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>

    /* Wait for latched triggers to be cleared */
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    b2b0:	e008      	b.n	b2c4 <Adc_Ip_ClearLatchedTriggers+0x54>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    b2b2:	ab03      	add	r3, sp, #12
    b2b4:	2100      	movs	r1, #0
    b2b6:	4618      	mov	r0, r3
    b2b8:	f7f7 fccb 	bl	2c52 <OsIf_GetElapsed>
    b2bc:	4602      	mov	r2, r0
    b2be:	9b06      	ldr	r3, [sp, #24]
    b2c0:	4413      	add	r3, r2
    b2c2:	9306      	str	r3, [sp, #24]
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    b2c4:	9b05      	ldr	r3, [sp, #20]
    b2c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    b2ca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    b2ce:	2b00      	cmp	r3, #0
    b2d0:	d003      	beq.n	b2da <Adc_Ip_ClearLatchedTriggers+0x6a>
    b2d2:	9a06      	ldr	r2, [sp, #24]
    b2d4:	9b04      	ldr	r3, [sp, #16]
    b2d6:	429a      	cmp	r2, r3
    b2d8:	d3eb      	bcc.n	b2b2 <Adc_Ip_ClearLatchedTriggers+0x42>
    }
    if (ElapsedTicks >= TimeoutTicks)
    b2da:	9a06      	ldr	r2, [sp, #24]
    b2dc:	9b04      	ldr	r3, [sp, #16]
    b2de:	429a      	cmp	r2, r3
    b2e0:	d301      	bcc.n	b2e6 <Adc_Ip_ClearLatchedTriggers+0x76>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    b2e2:	2302      	movs	r3, #2
    b2e4:	9307      	str	r3, [sp, #28]
    }

    return Status;
    b2e6:	9b07      	ldr	r3, [sp, #28]
}
    b2e8:	4618      	mov	r0, r3
    b2ea:	b009      	add	sp, #36	; 0x24
    b2ec:	f85d fb04 	ldr.w	pc, [sp], #4
    b2f0:	000197f0 	.word	0x000197f0
    b2f4:	000186a0 	.word	0x000186a0

0000b2f8 <Adc_Ip_EnableChannelNotification>:
*
* @implements     Adc_Ip_EnableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_EnableChannelNotification(const uint32 Instance,
                                      const uint8 ControlChanIdx)
{
    b2f8:	b500      	push	{lr}
    b2fa:	b085      	sub	sp, #20
    b2fc:	9001      	str	r0, [sp, #4]
    b2fe:	460b      	mov	r3, r1
    b300:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    b304:	4a0c      	ldr	r2, [pc, #48]	; (b338 <Adc_Ip_EnableChannelNotification+0x40>)
    b306:	9b01      	ldr	r3, [sp, #4]
    b308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b30c:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19();
    b30e:	f007 f827 	bl	12360 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>
    SC1(Base, ControlChanIdx) |= ADC_SC1_AIEN_MASK;
    b312:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b316:	9b03      	ldr	r3, [sp, #12]
    b318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b31c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b320:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    b324:	9b03      	ldr	r3, [sp, #12]
    b326:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19();
    b32a:	f007 f845 	bl	123b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>
}
    b32e:	bf00      	nop
    b330:	b005      	add	sp, #20
    b332:	f85d fb04 	ldr.w	pc, [sp], #4
    b336:	bf00      	nop
    b338:	000197f0 	.word	0x000197f0

0000b33c <Adc_Ip_DisableChannelNotification>:
*
* @implements     Adc_Ip_DisableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_DisableChannelNotification(const uint32 Instance,
                                       const uint8 ControlChanIdx)
{
    b33c:	b500      	push	{lr}
    b33e:	b085      	sub	sp, #20
    b340:	9001      	str	r0, [sp, #4]
    b342:	460b      	mov	r3, r1
    b344:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    b348:	4a0c      	ldr	r2, [pc, #48]	; (b37c <Adc_Ip_DisableChannelNotification+0x40>)
    b34a:	9b01      	ldr	r3, [sp, #4]
    b34c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b350:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20();
    b352:	f007 f857 	bl	12404 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>
    SC1(Base, ControlChanIdx) &= ~(ADC_SC1_AIEN_MASK);
    b356:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b35a:	9b03      	ldr	r3, [sp, #12]
    b35c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b360:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b364:	f023 0140 	bic.w	r1, r3, #64	; 0x40
    b368:	9b03      	ldr	r3, [sp, #12]
    b36a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20();
    b36e:	f007 f875 	bl	1245c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>
}
    b372:	bf00      	nop
    b374:	b005      	add	sp, #20
    b376:	f85d fb04 	ldr.w	pc, [sp], #4
    b37a:	bf00      	nop
    b37c:	000197f0 	.word	0x000197f0

0000b380 <Adc_Ip_ClearTrigErrReg>:
* Description   : This function clears all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_ClearTrigErrReg_Activity
* END**************************************************************************/
void Adc_Ip_ClearTrigErrReg(const uint32 Instance)
{
    b380:	b500      	push	{lr}
    b382:	b085      	sub	sp, #20
    b384:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    b386:	4a0a      	ldr	r2, [pc, #40]	; (b3b0 <Adc_Ip_ClearTrigErrReg+0x30>)
    b388:	9b01      	ldr	r3, [sp, #4]
    b38a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b38e:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25();
    b390:	f007 f9d2 	bl	12738 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>
    Base->SC2 |= ADC_SC2_TRGSTERR_MASK;
    b394:	9b03      	ldr	r3, [sp, #12]
    b396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    b39a:	f043 6270 	orr.w	r2, r3, #251658240	; 0xf000000
    b39e:	9b03      	ldr	r3, [sp, #12]
    b3a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25();
    b3a4:	f007 f9f4 	bl	12790 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>
}
    b3a8:	bf00      	nop
    b3aa:	b005      	add	sp, #20
    b3ac:	f85d fb04 	ldr.w	pc, [sp], #4
    b3b0:	000197f0 	.word	0x000197f0

0000b3b4 <Adc_Ip_GetTrigErrReg>:
* Description   : This function returns all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_GetTrigErrReg_Activity
* END**************************************************************************/
uint32 Adc_Ip_GetTrigErrReg(const uint32 Instance)
{
    b3b4:	b084      	sub	sp, #16
    b3b6:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    b3b8:	4a06      	ldr	r2, [pc, #24]	; (b3d4 <Adc_Ip_GetTrigErrReg+0x20>)
    b3ba:	9b01      	ldr	r3, [sp, #4]
    b3bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3c0:	9303      	str	r3, [sp, #12]

    return (Base->SC2 & ADC_SC2_TRGSTERR_MASK) >> ADC_SC2_TRGSTERR_SHIFT;
    b3c2:	9b03      	ldr	r3, [sp, #12]
    b3c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    b3c8:	0e1b      	lsrs	r3, r3, #24
    b3ca:	f003 030f 	and.w	r3, r3, #15
}
    b3ce:	4618      	mov	r0, r3
    b3d0:	b004      	add	sp, #16
    b3d2:	4770      	bx	lr
    b3d4:	000197f0 	.word	0x000197f0

0000b3d8 <Adc_Ip_GetDataAddress>:
 *
 * @implements     Adc_Ip_GetDataAddress_Activity
 *END*************************************************************************/
uint32 Adc_Ip_GetDataAddress(const uint32 Instance,
                             const uint8 Index)
{
    b3d8:	b082      	sub	sp, #8
    b3da:	9001      	str	r0, [sp, #4]
    b3dc:	460b      	mov	r3, r1
    b3de:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    return (uint32)&(R(Adc_Ip_apxBase[Instance], Index));
    b3e2:	4a06      	ldr	r2, [pc, #24]	; (b3fc <Adc_Ip_GetDataAddress+0x24>)
    b3e4:	9b01      	ldr	r3, [sp, #4]
    b3e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    b3ea:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b3ee:	3312      	adds	r3, #18
    b3f0:	009b      	lsls	r3, r3, #2
    b3f2:	4413      	add	r3, r2
}
    b3f4:	4618      	mov	r0, r3
    b3f6:	b002      	add	sp, #8
    b3f8:	4770      	bx	lr
    b3fa:	bf00      	nop
    b3fc:	000197f0 	.word	0x000197f0

0000b400 <Adc_Ip_GetChanData>:
* @implements     Adc_Ip_GetChanData_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_GetChanData(const uint32 Instance,
                                     const Adc_Ip_InputChannelType Channel,
                                     uint16 * const Result)
{
    b400:	b088      	sub	sp, #32
    b402:	9003      	str	r0, [sp, #12]
    b404:	9102      	str	r1, [sp, #8]
    b406:	9201      	str	r2, [sp, #4]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    b408:	4a25      	ldr	r2, [pc, #148]	; (b4a0 <Adc_Ip_GetChanData+0xa0>)
    b40a:	9b03      	ldr	r3, [sp, #12]
    b40c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b410:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    b412:	2300      	movs	r3, #0
    b414:	9307      	str	r3, [sp, #28]
    uint16 Temp = 0u;
    b416:	2300      	movs	r3, #0
    b418:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint8 ControlChanIdx;
    boolean Found = FALSE;
    b41c:	2300      	movs	r3, #0
    b41e:	f88d 3018 	strb.w	r3, [sp, #24]

    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    b422:	2300      	movs	r3, #0
    b424:	f88d 3019 	strb.w	r3, [sp, #25]
    b428:	e019      	b.n	b45e <Adc_Ip_GetChanData+0x5e>
    {
        if (Adc_Ip_axState[Instance].ChannelConfig[ControlChanIdx] == Channel)
    b42a:	f89d 1019 	ldrb.w	r1, [sp, #25]
    b42e:	481d      	ldr	r0, [pc, #116]	; (b4a4 <Adc_Ip_GetChanData+0xa4>)
    b430:	9a03      	ldr	r2, [sp, #12]
    b432:	4613      	mov	r3, r2
    b434:	00db      	lsls	r3, r3, #3
    b436:	4413      	add	r3, r2
    b438:	005b      	lsls	r3, r3, #1
    b43a:	4413      	add	r3, r2
    b43c:	440b      	add	r3, r1
    b43e:	3302      	adds	r3, #2
    b440:	009b      	lsls	r3, r3, #2
    b442:	4403      	add	r3, r0
    b444:	685b      	ldr	r3, [r3, #4]
    b446:	9a02      	ldr	r2, [sp, #8]
    b448:	429a      	cmp	r2, r3
    b44a:	d103      	bne.n	b454 <Adc_Ip_GetChanData+0x54>
        {
            Found = TRUE;
    b44c:	2301      	movs	r3, #1
    b44e:	f88d 3018 	strb.w	r3, [sp, #24]
            break;
    b452:	e008      	b.n	b466 <Adc_Ip_GetChanData+0x66>
    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    b454:	f89d 3019 	ldrb.w	r3, [sp, #25]
    b458:	3301      	adds	r3, #1
    b45a:	f88d 3019 	strb.w	r3, [sp, #25]
    b45e:	f89d 3019 	ldrb.w	r3, [sp, #25]
    b462:	2b0f      	cmp	r3, #15
    b464:	d9e1      	bls.n	b42a <Adc_Ip_GetChanData+0x2a>
        }
    }

    if (Found == TRUE)
    b466:	f89d 3018 	ldrb.w	r3, [sp, #24]
    b46a:	2b00      	cmp	r3, #0
    b46c:	d00e      	beq.n	b48c <Adc_Ip_GetChanData+0x8c>
    {
        Temp = (uint16) R(Base, ControlChanIdx);
    b46e:	f89d 2019 	ldrb.w	r2, [sp, #25]
    b472:	9b05      	ldr	r3, [sp, #20]
    b474:	3212      	adds	r2, #18
    b476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b47a:	f8ad 301a 	strh.w	r3, [sp, #26]
        Temp = (uint16) ((Temp & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    b47e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    b482:	f3c3 030b 	ubfx	r3, r3, #0, #12
    b486:	f8ad 301a 	strh.w	r3, [sp, #26]
    b48a:	e001      	b.n	b490 <Adc_Ip_GetChanData+0x90>
    }
    else
    {
        Status = ADC_IP_STATUS_ERROR;
    b48c:	2301      	movs	r3, #1
    b48e:	9307      	str	r3, [sp, #28]
    }

    *Result = Temp;
    b490:	9b01      	ldr	r3, [sp, #4]
    b492:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    b496:	801a      	strh	r2, [r3, #0]

    return Status;
    b498:	9b07      	ldr	r3, [sp, #28]
}
    b49a:	4618      	mov	r0, r3
    b49c:	b008      	add	sp, #32
    b49e:	4770      	bx	lr
    b4a0:	000197f0 	.word	0x000197f0
    b4a4:	1fff8d80 	.word	0x1fff8d80

0000b4a8 <Adc_Ip_IRQHandler>:
 * Note          : It's required to read result data in user notification in order to clear the COCO flags and avoid ISR getting invoked repeatedly
 *
 * @implements     Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Adc_Ip_IRQHandler(const uint32 Instance)
{
    b4a8:	b500      	push	{lr}
    b4aa:	b085      	sub	sp, #20
    b4ac:	9001      	str	r0, [sp, #4]
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    uint8 ControlChanIdx;
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    uint32 Sc1Reg;
    boolean ChanIntFlag = FALSE;
    b4ae:	2300      	movs	r3, #0
    b4b0:	f88d 300e 	strb.w	r3, [sp, #14]
    boolean ChanCocoFlag = FALSE;
    b4b4:	2300      	movs	r3, #0
    b4b6:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Check whether the respective driver is initialized */
    if (TRUE == Adc_Ip_axState[Instance].Init)
    b4ba:	4a32      	ldr	r2, [pc, #200]	; (b584 <Adc_Ip_IRQHandler+0xdc>)
    b4bc:	9b01      	ldr	r3, [sp, #4]
    b4be:	214c      	movs	r1, #76	; 0x4c
    b4c0:	fb01 f303 	mul.w	r3, r1, r3
    b4c4:	4413      	add	r3, r2
    b4c6:	781b      	ldrb	r3, [r3, #0]
    b4c8:	2b00      	cmp	r3, #0
    b4ca:	d040      	beq.n	b54e <Adc_Ip_IRQHandler+0xa6>
    {
        /* Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop) */
        if (Adc_Ip_axState[Instance].ConversionCompleteNotification != NULL_PTR)
    b4cc:	4a2d      	ldr	r2, [pc, #180]	; (b584 <Adc_Ip_IRQHandler+0xdc>)
    b4ce:	9b01      	ldr	r3, [sp, #4]
    b4d0:	214c      	movs	r1, #76	; 0x4c
    b4d2:	fb01 f303 	mul.w	r3, r1, r3
    b4d6:	4413      	add	r3, r2
    b4d8:	3308      	adds	r3, #8
    b4da:	681b      	ldr	r3, [r3, #0]
    b4dc:	2b00      	cmp	r3, #0
    b4de:	d04d      	beq.n	b57c <Adc_Ip_IRQHandler+0xd4>
        {
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    b4e0:	2300      	movs	r3, #0
    b4e2:	f88d 300f 	strb.w	r3, [sp, #15]
    b4e6:	e02d      	b.n	b544 <Adc_Ip_IRQHandler+0x9c>
            {
                Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    b4e8:	4a27      	ldr	r2, [pc, #156]	; (b588 <Adc_Ip_IRQHandler+0xe0>)
    b4ea:	9b01      	ldr	r3, [sp, #4]
    b4ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4f0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    b4f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b4f8:	9302      	str	r3, [sp, #8]
                ChanIntFlag = Adc_HwAcc_GetAIEN(Sc1Reg);
    b4fa:	9802      	ldr	r0, [sp, #8]
    b4fc:	f7ff fa20 	bl	a940 <Adc_HwAcc_GetAIEN>
    b500:	4603      	mov	r3, r0
    b502:	f88d 300e 	strb.w	r3, [sp, #14]
                ChanCocoFlag = Adc_HwAcc_GetCOCO(Sc1Reg);
    b506:	9802      	ldr	r0, [sp, #8]
    b508:	f7ff fa28 	bl	a95c <Adc_HwAcc_GetCOCO>
    b50c:	4603      	mov	r3, r0
    b50e:	f88d 300d 	strb.w	r3, [sp, #13]
                /* CPR_RTD_00664
                 * Check if the interrupt not spurious (the interrupt is enabled and equivalent conversion has finished)
                 * Ignore spurious ones (return immediately from ISR)
                 */
                if ((TRUE == ChanIntFlag) && (TRUE == ChanCocoFlag))
    b512:	f89d 300e 	ldrb.w	r3, [sp, #14]
    b516:	2b00      	cmp	r3, #0
    b518:	d00f      	beq.n	b53a <Adc_Ip_IRQHandler+0x92>
    b51a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b51e:	2b00      	cmp	r3, #0
    b520:	d00b      	beq.n	b53a <Adc_Ip_IRQHandler+0x92>
                {
                    /* Call the associated callback.
                     * The COCO flag will be cleared by reading the respective result data register in the callback
                     */
                    Adc_Ip_axState[Instance].ConversionCompleteNotification(ControlChanIdx);
    b522:	4a18      	ldr	r2, [pc, #96]	; (b584 <Adc_Ip_IRQHandler+0xdc>)
    b524:	9b01      	ldr	r3, [sp, #4]
    b526:	214c      	movs	r1, #76	; 0x4c
    b528:	fb01 f303 	mul.w	r3, r1, r3
    b52c:	4413      	add	r3, r2
    b52e:	3308      	adds	r3, #8
    b530:	681b      	ldr	r3, [r3, #0]
    b532:	f89d 200f 	ldrb.w	r2, [sp, #15]
    b536:	4610      	mov	r0, r2
    b538:	4798      	blx	r3
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    b53a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b53e:	3301      	adds	r3, #1
    b540:	f88d 300f 	strb.w	r3, [sp, #15]
    b544:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b548:	2b0f      	cmp	r3, #15
    b54a:	d9cd      	bls.n	b4e8 <Adc_Ip_IRQHandler+0x40>
        {
            /* Do a dummy read to clear the COCO flags */
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
        }
    }
}
    b54c:	e016      	b.n	b57c <Adc_Ip_IRQHandler+0xd4>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    b54e:	2300      	movs	r3, #0
    b550:	f88d 300f 	strb.w	r3, [sp, #15]
    b554:	e00e      	b.n	b574 <Adc_Ip_IRQHandler+0xcc>
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
    b556:	4a0c      	ldr	r2, [pc, #48]	; (b588 <Adc_Ip_IRQHandler+0xe0>)
    b558:	9b01      	ldr	r3, [sp, #4]
    b55a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b55e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    b562:	4611      	mov	r1, r2
    b564:	4618      	mov	r0, r3
    b566:	f7ff fa07 	bl	a978 <Adc_HwAcc_GetData>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    b56a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b56e:	3301      	adds	r3, #1
    b570:	f88d 300f 	strb.w	r3, [sp, #15]
    b574:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b578:	2b0f      	cmp	r3, #15
    b57a:	d9ec      	bls.n	b556 <Adc_Ip_IRQHandler+0xae>
}
    b57c:	bf00      	nop
    b57e:	b005      	add	sp, #20
    b580:	f85d fb04 	ldr.w	pc, [sp], #4
    b584:	1fff8d80 	.word	0x1fff8d80
    b588:	000197f0 	.word	0x000197f0

0000b58c <Adc_0_Isr>:
==================================================================================================*/
#define ADC_START_SEC_CODE
#include "Adc_MemMap.h"

ISR(Adc_0_Isr)
{
    b58c:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(0UL);
    b58e:	2000      	movs	r0, #0
    b590:	f7ff ff8a 	bl	b4a8 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    b594:	f3bf 8f4f 	dsb	sy
}
    b598:	bf00      	nop
    b59a:	bd08      	pop	{r3, pc}

0000b59c <Adc_1_Isr>:

#if (ADC_INSTANCE_COUNT > 1)
ISR(Adc_1_Isr)
{
    b59c:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(1UL);
    b59e:	2001      	movs	r0, #1
    b5a0:	f7ff ff82 	bl	b4a8 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    b5a4:	f3bf 8f4f 	dsb	sy
}
    b5a8:	bf00      	nop
    b5aa:	bd08      	pop	{r3, pc}

0000b5ac <Adc_Ipw_RemoveFromQueue>:
*
* @pre This function must be called from a critical region. It is not protecting itself against interruptions.
*/
void Adc_Ipw_RemoveFromQueue(const Adc_HwUnitType Unit,
                             const Adc_QueueIndexType CurQueueIndex)
{
    b5ac:	b510      	push	{r4, lr}
    b5ae:	b084      	sub	sp, #16
    b5b0:	4603      	mov	r3, r0
    b5b2:	460a      	mov	r2, r1
    b5b4:	f88d 3007 	strb.w	r3, [sp, #7]
    b5b8:	4613      	mov	r3, r2
    b5ba:	f8ad 3004 	strh.w	r3, [sp, #4]
    Adc_QueueIndexType PositionIndex = 0U;
    b5be:	2300      	movs	r3, #0
    b5c0:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_QueueIndexType CurrentIndex = 0U;
    b5c4:	2300      	movs	r3, #0
    b5c6:	f8ad 300c 	strh.w	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00();
    b5ca:	f006 f8b3 	bl	11734 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>
    CurrentIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    b5ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b5d2:	4a24      	ldr	r2, [pc, #144]	; (b664 <Adc_Ipw_RemoveFromQueue+0xb8>)
    b5d4:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    b5d8:	f8ad 300c 	strh.w	r3, [sp, #12]
    if ((Adc_QueueIndexType)1U >= CurrentIndex)
    b5dc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    b5e0:	2b01      	cmp	r3, #1
    b5e2:	d806      	bhi.n	b5f2 <Adc_Ipw_RemoveFromQueue+0x46>
    {
        /* Zero or one element present in the queue */
        Adc_axUnitStatus[Unit].SwNormalQueueIndex = 0U;
    b5e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b5e8:	4a1e      	ldr	r2, [pc, #120]	; (b664 <Adc_Ipw_RemoveFromQueue+0xb8>)
    b5ea:	2100      	movs	r1, #0
    b5ec:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
    b5f0:	e032      	b.n	b658 <Adc_Ipw_RemoveFromQueue+0xac>
    }
    else
    {
        /* More than one element in the queue */
        /* Move all elements after the one to remove (from CurQueueIndex position) one place to the left */
        for (PositionIndex = (CurQueueIndex + 1U); PositionIndex < CurrentIndex; PositionIndex++)
    b5f2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    b5f6:	3301      	adds	r3, #1
    b5f8:	f8ad 300e 	strh.w	r3, [sp, #14]
    b5fc:	e01b      	b.n	b636 <Adc_Ipw_RemoveFromQueue+0x8a>
        {
            Adc_axUnitStatus[Unit].SwNormalQueue[PositionIndex - 1U] = (Adc_GroupType)Adc_axUnitStatus[Unit].SwNormalQueue[PositionIndex];
    b5fe:	f89d 0007 	ldrb.w	r0, [sp, #7]
    b602:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    b606:	f89d 1007 	ldrb.w	r1, [sp, #7]
    b60a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    b60e:	3a01      	subs	r2, #1
    b610:	4c14      	ldr	r4, [pc, #80]	; (b664 <Adc_Ipw_RemoveFromQueue+0xb8>)
    b612:	0080      	lsls	r0, r0, #2
    b614:	4403      	add	r3, r0
    b616:	005b      	lsls	r3, r3, #1
    b618:	4423      	add	r3, r4
    b61a:	885b      	ldrh	r3, [r3, #2]
    b61c:	b29c      	uxth	r4, r3
    b61e:	4811      	ldr	r0, [pc, #68]	; (b664 <Adc_Ipw_RemoveFromQueue+0xb8>)
    b620:	008b      	lsls	r3, r1, #2
    b622:	4413      	add	r3, r2
    b624:	005b      	lsls	r3, r3, #1
    b626:	4403      	add	r3, r0
    b628:	4622      	mov	r2, r4
    b62a:	805a      	strh	r2, [r3, #2]
        for (PositionIndex = (CurQueueIndex + 1U); PositionIndex < CurrentIndex; PositionIndex++)
    b62c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    b630:	3301      	adds	r3, #1
    b632:	f8ad 300e 	strh.w	r3, [sp, #14]
    b636:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    b63a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    b63e:	429a      	cmp	r2, r3
    b640:	d3dd      	bcc.n	b5fe <Adc_Ipw_RemoveFromQueue+0x52>
        }
        Adc_axUnitStatus[Unit].SwNormalQueueIndex--;
    b642:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b646:	4a07      	ldr	r2, [pc, #28]	; (b664 <Adc_Ipw_RemoveFromQueue+0xb8>)
    b648:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    b64c:	b292      	uxth	r2, r2
    b64e:	3a01      	subs	r2, #1
    b650:	b291      	uxth	r1, r2
    b652:	4a04      	ldr	r2, [pc, #16]	; (b664 <Adc_Ipw_RemoveFromQueue+0xb8>)
    b654:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
    }
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00();
    b658:	f006 f898 	bl	1178c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>
}
    b65c:	bf00      	nop
    b65e:	b004      	add	sp, #16
    b660:	bd10      	pop	{r4, pc}
    b662:	bf00      	nop
    b664:	1fff8d70 	.word	0x1fff8d70

0000b668 <Adc_Ipw_ReadGroupConvData>:

static inline Std_ReturnType Adc_Ipw_ReadGroupConvData(const Adc_GroupConfigurationType * GroupPtr,
                                                       Adc_ValueGroupType * DataPtr,
                                                       boolean * Flag,
                                                       uint8 CoreId)
{
    b668:	b500      	push	{lr}
    b66a:	b087      	sub	sp, #28
    b66c:	9003      	str	r0, [sp, #12]
    b66e:	9102      	str	r1, [sp, #8]
    b670:	9201      	str	r2, [sp, #4]
    b672:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 Channel;
    Adc_ValueGroupType AdcResult;
    Std_ReturnType ReadGroupRet = (Std_ReturnType) E_OK;
    b676:	2300      	movs	r3, #0
    b678:	f88d 3016 	strb.w	r3, [sp, #22]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    b67c:	9b03      	ldr	r3, [sp, #12]
    b67e:	789b      	ldrb	r3, [r3, #2]
    b680:	f88d 3015 	strb.w	r3, [sp, #21]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    b684:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b688:	4a29      	ldr	r2, [pc, #164]	; (b730 <Adc_Ipw_ReadGroupConvData+0xc8>)
    b68a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b68e:	681a      	ldr	r2, [r3, #0]
    b690:	f89d 3015 	ldrb.w	r3, [sp, #21]
    b694:	4413      	add	r3, r2
    b696:	7c1b      	ldrb	r3, [r3, #16]
    b698:	f88d 3014 	strb.w	r3, [sp, #20]
    const uint8 NumsBitShift = Adc_Ipw_CalculateNumsBitShift(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[LogicalHwUnitId]->Resolution);
    b69c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b6a0:	4a23      	ldr	r2, [pc, #140]	; (b730 <Adc_Ipw_ReadGroupConvData+0xc8>)
    b6a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6a6:	681b      	ldr	r3, [r3, #0]
    b6a8:	f89d 2015 	ldrb.w	r2, [sp, #21]
    b6ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b6b0:	695b      	ldr	r3, [r3, #20]
    b6b2:	4618      	mov	r0, r3
    b6b4:	f000 fbce 	bl	be54 <Adc_Ipw_CalculateNumsBitShift>
    b6b8:	4603      	mov	r3, r0
    b6ba:	f88d 3013 	strb.w	r3, [sp, #19]
    boolean ResultInRange = TRUE;
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
#if (ADC_SETCHANNEL_API == STD_ON)
    const Adc_ChannelIndexType ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    const Adc_ChannelIndexType ChannelCount = GroupPtr->AssignedChannelCount;
    b6be:	9b03      	ldr	r3, [sp, #12]
    b6c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    b6c4:	f88d 3012 	strb.w	r3, [sp, #18]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    for (Channel = 0U; Channel < ChannelCount; Channel++)
    b6c8:	2300      	movs	r3, #0
    b6ca:	f88d 3017 	strb.w	r3, [sp, #23]
    b6ce:	e022      	b.n	b716 <Adc_Ipw_ReadGroupConvData+0xae>
            }
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            AdcResult = Adc_Ip_GetConvData(PhysicalHwUnitId, Channel);
    b6d0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    b6d4:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b6d8:	4611      	mov	r1, r2
    b6da:	4618      	mov	r0, r3
    b6dc:	f7ff fcf4 	bl	b0c8 <Adc_Ip_GetConvData>
    b6e0:	4603      	mov	r3, r0
    b6e2:	f8ad 3010 	strh.w	r3, [sp, #16]
            /* Assumption: the width of the register is less than 16 */
            AdcResult = AdcResult << (NumsBitShift);
    b6e6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    b6ea:	f89d 3013 	ldrb.w	r3, [sp, #19]
    b6ee:	fa02 f303 	lsl.w	r3, r2, r3
    b6f2:	f8ad 3010 	strh.w	r3, [sp, #16]
        }
#if (ADC_ENABLE_LIMIT_CHECK == STD_OFF)
        (*Flag) = TRUE;
    b6f6:	9b01      	ldr	r3, [sp, #4]
    b6f8:	2201      	movs	r2, #1
    b6fa:	701a      	strb	r2, [r3, #0]
            }
        }
        if (TRUE == ResultInRange)
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_OFF */
        {
            DataPtr[Channel] = AdcResult;
    b6fc:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b700:	005b      	lsls	r3, r3, #1
    b702:	9a02      	ldr	r2, [sp, #8]
    b704:	4413      	add	r3, r2
    b706:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    b70a:	801a      	strh	r2, [r3, #0]
    for (Channel = 0U; Channel < ChannelCount; Channel++)
    b70c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b710:	3301      	adds	r3, #1
    b712:	f88d 3017 	strb.w	r3, [sp, #23]
    b716:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b71a:	f89d 3012 	ldrb.w	r3, [sp, #18]
    b71e:	429a      	cmp	r2, r3
    b720:	d3d6      	bcc.n	b6d0 <Adc_Ipw_ReadGroupConvData+0x68>
        }
    }
    return ReadGroupRet;
    b722:	f89d 3016 	ldrb.w	r3, [sp, #22]
}
    b726:	4618      	mov	r0, r3
    b728:	b007      	add	sp, #28
    b72a:	f85d fb04 	ldr.w	pc, [sp], #4
    b72e:	bf00      	nop
    b730:	1fff8d40 	.word	0x1fff8d40

0000b734 <Adc_Ipw_ReadGroupNoInt>:
*/
static inline Std_ReturnType Adc_Ipw_ReadGroupNoInt(const Adc_GroupConfigurationType * GroupPtr,
                                                    Adc_ValueGroupType * DataPtr,
                                                    boolean * Flag,
                                                    uint8 CoreId)
{
    b734:	b500      	push	{lr}
    b736:	b087      	sub	sp, #28
    b738:	9003      	str	r0, [sp, #12]
    b73a:	9102      	str	r1, [sp, #8]
    b73c:	9201      	str	r2, [sp, #4]
    b73e:	f88d 3003 	strb.w	r3, [sp, #3]
    Adc_ChannelIndexType ChannelCount;
    boolean ValidConversion = TRUE;
    b742:	2301      	movs	r3, #1
    b744:	f88d 3016 	strb.w	r3, [sp, #22]
    Std_ReturnType ReadGroupRet = (Std_ReturnType) E_OK;
    b748:	2300      	movs	r3, #0
    b74a:	f88d 3017 	strb.w	r3, [sp, #23]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    b74e:	9b03      	ldr	r3, [sp, #12]
    b750:	789b      	ldrb	r3, [r3, #2]
    b752:	f88d 3015 	strb.w	r3, [sp, #21]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    b756:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b75a:	4a19      	ldr	r2, [pc, #100]	; (b7c0 <Adc_Ipw_ReadGroupNoInt+0x8c>)
    b75c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b760:	681a      	ldr	r2, [r3, #0]
    b762:	f89d 3015 	ldrb.w	r3, [sp, #21]
    b766:	4413      	add	r3, r2
    b768:	7c1b      	ldrb	r3, [r3, #16]
    b76a:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) || defined(ADC_DMA_SUPPORTED) */

#if (ADC_SETCHANNEL_API == STD_ON)
    ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    ChannelCount = GroupPtr->AssignedChannelCount;
    b76e:	9b03      	ldr	r3, [sp, #12]
    b770:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    b774:	f88d 3013 	strb.w	r3, [sp, #19]
        }
    }
    else
#endif /* ADC_DMA_SUPPORTED */
    {
        ValidConversion = Adc_Ipw_CheckValidConversion(PhysicalHwUnitId, 0U, ChannelCount);
    b778:	f89d 2013 	ldrb.w	r2, [sp, #19]
    b77c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    b780:	2100      	movs	r1, #0
    b782:	4618      	mov	r0, r3
    b784:	f000 fe2a 	bl	c3dc <Adc_Ipw_CheckValidConversion>
    b788:	4603      	mov	r3, r0
    b78a:	f88d 3016 	strb.w	r3, [sp, #22]
    }

    /* All results are valid, so all conversions from the group have been completed */
    if (TRUE == ValidConversion)
    b78e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    b792:	2b00      	cmp	r3, #0
    b794:	d00a      	beq.n	b7ac <Adc_Ipw_ReadGroupNoInt+0x78>
    {
        ReadGroupRet = Adc_Ipw_ReadGroupConvData(GroupPtr, DataPtr, Flag, CoreId);
    b796:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b79a:	9a01      	ldr	r2, [sp, #4]
    b79c:	9902      	ldr	r1, [sp, #8]
    b79e:	9803      	ldr	r0, [sp, #12]
    b7a0:	f7ff ff62 	bl	b668 <Adc_Ipw_ReadGroupConvData>
    b7a4:	4603      	mov	r3, r0
    b7a6:	f88d 3017 	strb.w	r3, [sp, #23]
    b7aa:	e002      	b.n	b7b2 <Adc_Ipw_ReadGroupNoInt+0x7e>
        }
#endif /* ADC_DMA_SUPPORTED */
    }
    else
    {
        ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    b7ac:	2301      	movs	r3, #1
    b7ae:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    return ReadGroupRet;
    b7b2:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    b7b6:	4618      	mov	r0, r3
    b7b8:	b007      	add	sp, #28
    b7ba:	f85d fb04 	ldr.w	pc, [sp], #4
    b7be:	bf00      	nop
    b7c0:	1fff8d40 	.word	0x1fff8d40

0000b7c4 <Adc_Ipw_WriteDataBuffer>:

static inline void Adc_Ipw_WriteDataBuffer(const Adc_GroupType Group,
                                           Adc_ValueGroupType * DataPtr,
                                           uint8 CoreId)
{
    b7c4:	b088      	sub	sp, #32
    b7c6:	4603      	mov	r3, r0
    b7c8:	9100      	str	r1, [sp, #0]
    b7ca:	f8ad 3006 	strh.w	r3, [sp, #6]
    b7ce:	4613      	mov	r3, r2
    b7d0:	f88d 3005 	strb.w	r3, [sp, #5]
    uint8 Index;
    uint16 ResultOffset;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    b7d4:	f89d 3005 	ldrb.w	r3, [sp, #5]
    b7d8:	4a3a      	ldr	r2, [pc, #232]	; (b8c4 <Adc_Ipw_WriteDataBuffer+0x100>)
    b7da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7de:	68da      	ldr	r2, [r3, #12]
    b7e0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    b7e4:	005b      	lsls	r3, r3, #1
    b7e6:	4413      	add	r3, r2
    b7e8:	881b      	ldrh	r3, [r3, #0]
    b7ea:	f8ad 3014 	strh.w	r3, [sp, #20]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    b7ee:	f89d 3005 	ldrb.w	r3, [sp, #5]
    b7f2:	4a34      	ldr	r2, [pc, #208]	; (b8c4 <Adc_Ipw_WriteDataBuffer+0x100>)
    b7f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7f8:	685a      	ldr	r2, [r3, #4]
    b7fa:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    b7fe:	2134      	movs	r1, #52	; 0x34
    b800:	fb01 f303 	mul.w	r3, r1, r3
    b804:	4413      	add	r3, r2
    b806:	9304      	str	r3, [sp, #16]
    uint16 DmaBufferMask = Adc_Ipw_GetAdcDataMask(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[LogicalHwUnitId]->Resolution);
#endif /* ADC_DMA_SUPPORTED */
#if (ADC_SETCHANNEL_API == STD_ON)
    const Adc_ChannelIndexType ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    const Adc_ChannelIndexType ChannelCount = GroupPtr->AssignedChannelCount;
    b808:	9b04      	ldr	r3, [sp, #16]
    b80a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    b80e:	f88d 300f 	strb.w	r3, [sp, #15]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    Adc_ValueGroupType * ResultPtr = NULL_PTR;
    b812:	2300      	movs	r3, #0
    b814:	9306      	str	r3, [sp, #24]
    Adc_StreamNumSampleType ResultIndex = 0U;
    b816:	2300      	movs	r3, #0
    b818:	f8ad 3016 	strh.w	r3, [sp, #22]

    /* Get index of last completed sample */
    ResultIndex = Adc_axGroupStatus[Group].ResultIndex - (Adc_StreamNumSampleType)1U;
    b81c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    b820:	4929      	ldr	r1, [pc, #164]	; (b8c8 <Adc_Ipw_WriteDataBuffer+0x104>)
    b822:	4613      	mov	r3, r2
    b824:	009b      	lsls	r3, r3, #2
    b826:	4413      	add	r3, r2
    b828:	009b      	lsls	r3, r3, #2
    b82a:	440b      	add	r3, r1
    b82c:	3308      	adds	r3, #8
    b82e:	881b      	ldrh	r3, [r3, #0]
    b830:	b29b      	uxth	r3, r3
    b832:	3b01      	subs	r3, #1
    b834:	f8ad 3016 	strh.w	r3, [sp, #22]
    if ((Adc_StreamNumSampleType)0U == Adc_axGroupStatus[Group].ResultIndex)
    b838:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    b83c:	4922      	ldr	r1, [pc, #136]	; (b8c8 <Adc_Ipw_WriteDataBuffer+0x104>)
    b83e:	4613      	mov	r3, r2
    b840:	009b      	lsls	r3, r3, #2
    b842:	4413      	add	r3, r2
    b844:	009b      	lsls	r3, r3, #2
    b846:	440b      	add	r3, r1
    b848:	3308      	adds	r3, #8
    b84a:	881b      	ldrh	r3, [r3, #0]
    b84c:	b29b      	uxth	r3, r3
    b84e:	2b00      	cmp	r3, #0
    b850:	d104      	bne.n	b85c <Adc_Ipw_WriteDataBuffer+0x98>
    {
        ResultIndex = GroupPtr->NumSamples - (Adc_StreamNumSampleType)1U;
    b852:	9b04      	ldr	r3, [sp, #16]
    b854:	8b9b      	ldrh	r3, [r3, #28]
    b856:	3b01      	subs	r3, #1
    b858:	f8ad 3016 	strh.w	r3, [sp, #22]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    /* Get the result buffer pointer */
    if (FALSE == GroupPtr->StreamResultGroupMultiSets)
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
    {
        ResultPtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex]));
    b85c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    b860:	4919      	ldr	r1, [pc, #100]	; (b8c8 <Adc_Ipw_WriteDataBuffer+0x104>)
    b862:	4613      	mov	r3, r2
    b864:	009b      	lsls	r3, r3, #2
    b866:	4413      	add	r3, r2
    b868:	009b      	lsls	r3, r3, #2
    b86a:	440b      	add	r3, r1
    b86c:	330c      	adds	r3, #12
    b86e:	681a      	ldr	r2, [r3, #0]
    b870:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    b874:	005b      	lsls	r3, r3, #1
    b876:	4413      	add	r3, r2
    b878:	9306      	str	r3, [sp, #24]
        ResultOffset = GroupPtr->NumSamples;
    b87a:	9b04      	ldr	r3, [sp, #16]
    b87c:	8b9b      	ldrh	r3, [r3, #28]
    b87e:	f8ad 300c 	strh.w	r3, [sp, #12]

        /* Copy results of last conversion from streaming buffer to internal buffer */
        for (Index = 0U; Index < ChannelCount; Index++)
    b882:	2300      	movs	r3, #0
    b884:	f88d 301f 	strb.w	r3, [sp, #31]
    b888:	e012      	b.n	b8b0 <Adc_Ipw_WriteDataBuffer+0xec>
                DataPtr[Index] = (Adc_ValueGroupType)((*ResultPtr) & DmaBufferMask);
            }
            else
#endif /* ADC_DMA_SUPPORTED */
            {
                DataPtr[Index] = (*ResultPtr);
    b88a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b88e:	005b      	lsls	r3, r3, #1
    b890:	9a00      	ldr	r2, [sp, #0]
    b892:	4413      	add	r3, r2
    b894:	9a06      	ldr	r2, [sp, #24]
    b896:	8812      	ldrh	r2, [r2, #0]
    b898:	801a      	strh	r2, [r3, #0]
            }
            ResultPtr = &(ResultPtr[ResultOffset]);
    b89a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    b89e:	005b      	lsls	r3, r3, #1
    b8a0:	9a06      	ldr	r2, [sp, #24]
    b8a2:	4413      	add	r3, r2
    b8a4:	9306      	str	r3, [sp, #24]
        for (Index = 0U; Index < ChannelCount; Index++)
    b8a6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b8aa:	3301      	adds	r3, #1
    b8ac:	f88d 301f 	strb.w	r3, [sp, #31]
    b8b0:	f89d 201f 	ldrb.w	r2, [sp, #31]
    b8b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b8b8:	429a      	cmp	r2, r3
    b8ba:	d3e6      	bcc.n	b88a <Adc_Ipw_WriteDataBuffer+0xc6>
                DataPtr[Index] = ResultPtr[Index];
            }
        }
    }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
}
    b8bc:	bf00      	nop
    b8be:	bf00      	nop
    b8c0:	b008      	add	sp, #32
    b8c2:	4770      	bx	lr
    b8c4:	1fff8d40 	.word	0x1fff8d40
    b8c8:	1fff8d48 	.word	0x1fff8d48

0000b8cc <Adc_Ipw_ConfigurePdbChannels>:
*/
static inline uint8 Adc_Ipw_ConfigurePdbChannels(Adc_HwUnitType Unit,
                                                 Adc_GroupType Group,
                                                 const Adc_GroupConfigurationType * GroupPtr,
                                                 uint8 NumChannel)
{
    b8cc:	b500      	push	{lr}
    b8ce:	b089      	sub	sp, #36	; 0x24
    b8d0:	9200      	str	r2, [sp, #0]
    b8d2:	461a      	mov	r2, r3
    b8d4:	4603      	mov	r3, r0
    b8d6:	f88d 3007 	strb.w	r3, [sp, #7]
    b8da:	460b      	mov	r3, r1
    b8dc:	f8ad 3004 	strh.w	r3, [sp, #4]
    b8e0:	4613      	mov	r3, r2
    b8e2:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8 PdbIndex;
    uint8 PreTriggerCtr;
    uint8 ChUsed;
    uint8 LeftChannel = NumChannel;
    b8e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b8ea:	f88d 301d 	strb.w	r3, [sp, #29]
    uint8 PdbChannelUsed = (uint8)ADC_IPW_PDB_CHANNELS_USED(NumChannel);
    b8ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b8f2:	f003 0307 	and.w	r3, r3, #7
    b8f6:	b2db      	uxtb	r3, r3
    b8f8:	2b00      	cmp	r3, #0
    b8fa:	d006      	beq.n	b90a <Adc_Ipw_ConfigurePdbChannels+0x3e>
    b8fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b900:	08db      	lsrs	r3, r3, #3
    b902:	b2db      	uxtb	r3, r3
    b904:	3301      	adds	r3, #1
    b906:	b2db      	uxtb	r3, r3
    b908:	e003      	b.n	b912 <Adc_Ipw_ConfigurePdbChannels+0x46>
    b90a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b90e:	08db      	lsrs	r3, r3, #3
    b910:	b2db      	uxtb	r3, r3
    b912:	f88d 3019 	strb.w	r3, [sp, #25]
    uint16 PdbDelay;
    uint16 CurrentCh = Adc_axGroupStatus[Group].CurrentChannel;
    b916:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    b91a:	4987      	ldr	r1, [pc, #540]	; (bb38 <Adc_Ipw_ConfigurePdbChannels+0x26c>)
    b91c:	4613      	mov	r3, r2
    b91e:	009b      	lsls	r3, r3, #2
    b920:	4413      	add	r3, r2
    b922:	009b      	lsls	r3, r3, #2
    b924:	440b      	add	r3, r1
    b926:	3310      	adds	r3, #16
    b928:	781b      	ldrb	r3, [r3, #0]
    b92a:	f8ad 301a 	strh.w	r3, [sp, #26]
    Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    b92e:	4b83      	ldr	r3, [pc, #524]	; (bb3c <Adc_Ipw_ConfigurePdbChannels+0x270>)
    b930:	681b      	ldr	r3, [r3, #0]
    b932:	681a      	ldr	r2, [r3, #0]
    b934:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b938:	4413      	add	r3, r2
    b93a:	7c1b      	ldrb	r3, [r3, #16]
    b93c:	f88d 3018 	strb.w	r3, [sp, #24]
    uint32 TempMask = Adc_axRuntimeGroupChannel[Group].RuntimeChanMask;
    /* Get delay configuration of each pre-trigger at runtime */
    const uint16 * GroupDelay = Adc_axRuntimeGroupChannel[Group].DelaysPtr;
#else
    /* Follow user configuration */
    const uint16 * GroupDelay = GroupPtr->AdcIpwGroupConfigPtr->DelayPtr;
    b940:	9b00      	ldr	r3, [sp, #0]
    b942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b944:	691b      	ldr	r3, [r3, #16]
    b946:	9305      	str	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Configure PDB channels */
    for (PdbIndex = 0U; PdbIndex < PdbChannelUsed; PdbIndex++)
    b948:	2300      	movs	r3, #0
    b94a:	f88d 301f 	strb.w	r3, [sp, #31]
    b94e:	e0e6      	b.n	bb1e <Adc_Ipw_ConfigurePdbChannels+0x252>
    {
        /* Get channels used depending on number of pre-triggers per PDB channel */
        ChUsed = ADC_IPW_NUM_CHANNELS_USED(LeftChannel);
    b950:	f89d 301d 	ldrb.w	r3, [sp, #29]
    b954:	08db      	lsrs	r3, r3, #3
    b956:	b2db      	uxtb	r3, r3
    b958:	2b00      	cmp	r3, #0
    b95a:	d102      	bne.n	b962 <Adc_Ipw_ConfigurePdbChannels+0x96>
    b95c:	f89d 301d 	ldrb.w	r3, [sp, #29]
    b960:	e000      	b.n	b964 <Adc_Ipw_ConfigurePdbChannels+0x98>
    b962:	2308      	movs	r3, #8
    b964:	f88d 3013 	strb.w	r3, [sp, #19]

        /* If group channel delay, not bypass mode */
        if ((TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableChannelDelays)
    b968:	9b00      	ldr	r3, [sp, #0]
    b96a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b96c:	7bdb      	ldrb	r3, [r3, #15]
    b96e:	2b00      	cmp	r3, #0
    b970:	d05e      	beq.n	ba30 <Adc_Ipw_ConfigurePdbChannels+0x164>
                && (GroupDelay != NULL_PTR)
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
           )
        {
            /* If Back to Back mode is disabled, enable and configure delays for all channels */
            if (FALSE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    b972:	9b00      	ldr	r3, [sp, #0]
    b974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b976:	7b9b      	ldrb	r3, [r3, #14]
    b978:	f083 0301 	eor.w	r3, r3, #1
    b97c:	b2db      	uxtb	r3, r3
    b97e:	2b00      	cmp	r3, #0
    b980:	d02a      	beq.n	b9d8 <Adc_Ipw_ConfigurePdbChannels+0x10c>
            {
                PdbPretriggsConfig.EnableDelayMask = (uint8)ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
    b982:	f89d 3013 	ldrb.w	r3, [sp, #19]
    b986:	f1c3 0308 	rsb	r3, r3, #8
    b98a:	22ff      	movs	r2, #255	; 0xff
    b98c:	fa22 f303 	lsr.w	r3, r2, r3
    b990:	b2db      	uxtb	r3, r3
    b992:	f88d 300d 	strb.w	r3, [sp, #13]
                for (PreTriggerCtr = 0U; PreTriggerCtr < ChUsed; PreTriggerCtr++)
    b996:	2300      	movs	r3, #0
    b998:	f88d 301e 	strb.w	r3, [sp, #30]
    b99c:	e015      	b.n	b9ca <Adc_Ipw_ConfigurePdbChannels+0xfe>
                {
#if (ADC_SETCHANNEL_API == STD_ON)
                    if ((uint32)1U == (TempMask & (uint32)1U))
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
                    {
                        Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, PreTriggerCtr, GroupDelay[CurrentCh + PreTriggerCtr]);
    b99e:	f89d 0018 	ldrb.w	r0, [sp, #24]
    b9a2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    b9a6:	f89d 301e 	ldrb.w	r3, [sp, #30]
    b9aa:	4413      	add	r3, r2
    b9ac:	005b      	lsls	r3, r3, #1
    b9ae:	9a05      	ldr	r2, [sp, #20]
    b9b0:	4413      	add	r3, r2
    b9b2:	881b      	ldrh	r3, [r3, #0]
    b9b4:	f89d 201e 	ldrb.w	r2, [sp, #30]
    b9b8:	f89d 101f 	ldrb.w	r1, [sp, #31]
    b9bc:	f001 fd16 	bl	d3ec <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
                for (PreTriggerCtr = 0U; PreTriggerCtr < ChUsed; PreTriggerCtr++)
    b9c0:	f89d 301e 	ldrb.w	r3, [sp, #30]
    b9c4:	3301      	adds	r3, #1
    b9c6:	f88d 301e 	strb.w	r3, [sp, #30]
    b9ca:	f89d 201e 	ldrb.w	r2, [sp, #30]
    b9ce:	f89d 3013 	ldrb.w	r3, [sp, #19]
    b9d2:	429a      	cmp	r2, r3
    b9d4:	d3e3      	bcc.n	b99e <Adc_Ipw_ConfigurePdbChannels+0xd2>
    b9d6:	e051      	b.n	ba7c <Adc_Ipw_ConfigurePdbChannels+0x1b0>
                }
            }
            else
            {
                /* Beginning part (8 ADC channels) of group will be configured in PDB channel 0 */
                if (0U == PdbIndex)
    b9d8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b9dc:	2b00      	cmp	r3, #0
    b9de:	d110      	bne.n	ba02 <Adc_Ipw_ConfigurePdbChannels+0x136>
                {
                    PdbPretriggsConfig.EnableDelayMask = 1U;
    b9e0:	2301      	movs	r3, #1
    b9e2:	f88d 300d 	strb.w	r3, [sp, #13]
                    /* First pre-trigger need to be configured as delay, others will be in back to back mode */
                    PdbDelay = GroupDelay[0U];
    b9e6:	9b05      	ldr	r3, [sp, #20]
    b9e8:	881b      	ldrh	r3, [r3, #0]
    b9ea:	f8ad 3010 	strh.w	r3, [sp, #16]
                    Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    b9ee:	f89d 0018 	ldrb.w	r0, [sp, #24]
    b9f2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    b9f6:	f89d 101f 	ldrb.w	r1, [sp, #31]
    b9fa:	2200      	movs	r2, #0
    b9fc:	f001 fcf6 	bl	d3ec <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    ba00:	e03c      	b.n	ba7c <Adc_Ipw_ConfigurePdbChannels+0x1b0>
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
                    if (FALSE == Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->PdbConfig[LogicalHwUnitId]->InterChannelBackToBackEnable)
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                    {
                        /* The other parts will be configured in following PDB channels */
                        PdbPretriggsConfig.EnableDelayMask = 1U;
    ba02:	2301      	movs	r3, #1
    ba04:	f88d 300d 	strb.w	r3, [sp, #13]
                        PdbDelay = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*PdbIndex;
    ba08:	9b00      	ldr	r3, [sp, #0]
    ba0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    ba0c:	899a      	ldrh	r2, [r3, #12]
    ba0e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    ba12:	b29b      	uxth	r3, r3
    ba14:	fb12 f303 	smulbb	r3, r2, r3
    ba18:	f8ad 3010 	strh.w	r3, [sp, #16]
                        Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    ba1c:	f89d 0018 	ldrb.w	r0, [sp, #24]
    ba20:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    ba24:	f89d 101f 	ldrb.w	r1, [sp, #31]
    ba28:	2200      	movs	r2, #0
    ba2a:	f001 fcdf 	bl	d3ec <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    ba2e:	e025      	b.n	ba7c <Adc_Ipw_ConfigurePdbChannels+0x1b0>
                }
            }
        }
        else    /* Back-to-back mode only */
        {
            if (0U == PdbIndex)
    ba30:	f89d 301f 	ldrb.w	r3, [sp, #31]
    ba34:	2b00      	cmp	r3, #0
    ba36:	d10b      	bne.n	ba50 <Adc_Ipw_ConfigurePdbChannels+0x184>
            {
                /* Configure the delay for the second PDB in case of only back to back used */
                /* The first PDB channel, pre-trigger 0 also need to use channel delay (TOS bit = 1) in order to work with continuous PDB mode */
                PdbPretriggsConfig.EnableDelayMask = 1U;
    ba38:	2301      	movs	r3, #1
    ba3a:	f88d 300d 	strb.w	r3, [sp, #13]
                Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, 0U);
    ba3e:	f89d 0018 	ldrb.w	r0, [sp, #24]
    ba42:	f89d 101f 	ldrb.w	r1, [sp, #31]
    ba46:	2300      	movs	r3, #0
    ba48:	2200      	movs	r2, #0
    ba4a:	f001 fccf 	bl	d3ec <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    ba4e:	e015      	b.n	ba7c <Adc_Ipw_ConfigurePdbChannels+0x1b0>
            {
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
                if (FALSE == Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->PdbConfig[LogicalHwUnitId]->InterChannelBackToBackEnable)
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                {
                    PdbPretriggsConfig.EnableDelayMask = 1U;
    ba50:	2301      	movs	r3, #1
    ba52:	f88d 300d 	strb.w	r3, [sp, #13]
                    PdbDelay = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*PdbIndex;
    ba56:	9b00      	ldr	r3, [sp, #0]
    ba58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    ba5a:	899a      	ldrh	r2, [r3, #12]
    ba5c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    ba60:	b29b      	uxth	r3, r3
    ba62:	fb12 f303 	smulbb	r3, r2, r3
    ba66:	f8ad 3010 	strh.w	r3, [sp, #16]
                    Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    ba6a:	f89d 0018 	ldrb.w	r0, [sp, #24]
    ba6e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    ba72:	f89d 101f 	ldrb.w	r1, [sp, #31]
    ba76:	2200      	movs	r2, #0
    ba78:	f001 fcb8 	bl	d3ec <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
                }
            }
        }

        Pdb_Adc_Ip_LoadRegValues(PhysicalHwUnitId);
    ba7c:	f89d 3018 	ldrb.w	r3, [sp, #24]
    ba80:	4618      	mov	r0, r3
    ba82:	f001 fb87 	bl	d194 <Pdb_Adc_Ip_LoadRegValues>

        /* Update status channel for configuring PDB channel in next loop */
        LeftChannel -= ChUsed;
    ba86:	f89d 201d 	ldrb.w	r2, [sp, #29]
    ba8a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    ba8e:	1ad3      	subs	r3, r2, r3
    ba90:	f88d 301d 	strb.w	r3, [sp, #29]
        CurrentCh += ChUsed;
    ba94:	f89d 3013 	ldrb.w	r3, [sp, #19]
    ba98:	b29a      	uxth	r2, r3
    ba9a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    ba9e:	4413      	add	r3, r2
    baa0:	f8ad 301a 	strh.w	r3, [sp, #26]

        /* Use back to back mode for all channels but using delay in pre-trigger 0 */
        if (TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    baa4:	9b00      	ldr	r3, [sp, #0]
    baa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    baa8:	7b9b      	ldrb	r3, [r3, #14]
    baaa:	2b00      	cmp	r3, #0
    baac:	d01d      	beq.n	baea <Adc_Ipw_ConfigurePdbChannels+0x21e>
        {
            if (0U == PdbIndex)
    baae:	f89d 301f 	ldrb.w	r3, [sp, #31]
    bab2:	2b00      	cmp	r3, #0
    bab4:	d10c      	bne.n	bad0 <Adc_Ipw_ConfigurePdbChannels+0x204>
            {
                PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed) - 1U;
    bab6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    baba:	f1c3 0308 	rsb	r3, r3, #8
    babe:	22ff      	movs	r2, #255	; 0xff
    bac0:	fa22 f303 	lsr.w	r3, r2, r3
    bac4:	b2db      	uxtb	r3, r3
    bac6:	3b01      	subs	r3, #1
    bac8:	b2db      	uxtb	r3, r3
    baca:	f88d 300e 	strb.w	r3, [sp, #14]
    bace:	e00f      	b.n	baf0 <Adc_Ipw_ConfigurePdbChannels+0x224>
                    PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
                }
                else
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                {
                    PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed) - 1U;
    bad0:	f89d 3013 	ldrb.w	r3, [sp, #19]
    bad4:	f1c3 0308 	rsb	r3, r3, #8
    bad8:	22ff      	movs	r2, #255	; 0xff
    bada:	fa22 f303 	lsr.w	r3, r2, r3
    bade:	b2db      	uxtb	r3, r3
    bae0:	3b01      	subs	r3, #1
    bae2:	b2db      	uxtb	r3, r3
    bae4:	f88d 300e 	strb.w	r3, [sp, #14]
    bae8:	e002      	b.n	baf0 <Adc_Ipw_ConfigurePdbChannels+0x224>
                }
            }
        }
        else
        {
            PdbPretriggsConfig.BackToBackEnableMask = 0u;
    baea:	2300      	movs	r3, #0
    baec:	f88d 300e 	strb.w	r3, [sp, #14]
        }
        PdbPretriggsConfig.EnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
    baf0:	f89d 3013 	ldrb.w	r3, [sp, #19]
    baf4:	f1c3 0308 	rsb	r3, r3, #8
    baf8:	22ff      	movs	r2, #255	; 0xff
    bafa:	fa22 f303 	lsr.w	r3, r2, r3
    bafe:	b2db      	uxtb	r3, r3
    bb00:	f88d 300c 	strb.w	r3, [sp, #12]
        /* Update configuration to CHnC1 register for pre-trigger */
        Pdb_Adc_Ip_ConfigAdcPretriggers(PhysicalHwUnitId, PdbIndex, &PdbPretriggsConfig);
    bb04:	f89d 3018 	ldrb.w	r3, [sp, #24]
    bb08:	aa03      	add	r2, sp, #12
    bb0a:	f89d 101f 	ldrb.w	r1, [sp, #31]
    bb0e:	4618      	mov	r0, r3
    bb10:	f001 fb7c 	bl	d20c <Pdb_Adc_Ip_ConfigAdcPretriggers>
    for (PdbIndex = 0U; PdbIndex < PdbChannelUsed; PdbIndex++)
    bb14:	f89d 301f 	ldrb.w	r3, [sp, #31]
    bb18:	3301      	adds	r3, #1
    bb1a:	f88d 301f 	strb.w	r3, [sp, #31]
    bb1e:	f89d 201f 	ldrb.w	r2, [sp, #31]
    bb22:	f89d 3019 	ldrb.w	r3, [sp, #25]
    bb26:	429a      	cmp	r2, r3
    bb28:	f4ff af12 	bcc.w	b950 <Adc_Ipw_ConfigurePdbChannels+0x84>
    }
    return PdbIndex;
    bb2c:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    bb30:	4618      	mov	r0, r3
    bb32:	b009      	add	sp, #36	; 0x24
    bb34:	f85d fb04 	ldr.w	pc, [sp], #4
    bb38:	1fff8d48 	.word	0x1fff8d48
    bb3c:	1fff8d40 	.word	0x1fff8d40

0000bb40 <Adc_Ipw_ConfigurePdbConversion>:
static inline void Adc_Ipw_ConfigurePdbConversion(Adc_HwUnitType Unit,
                                                    Adc_GroupType Group,
                                                    const Adc_GroupConfigurationType * GroupPtr,
                                                    Adc_HwTriggerTimerType Trigger,
                                                    uint8 NumChannel)
{
    bb40:	b500      	push	{lr}
    bb42:	b089      	sub	sp, #36	; 0x24
    bb44:	9202      	str	r2, [sp, #8]
    bb46:	9301      	str	r3, [sp, #4]
    bb48:	4603      	mov	r3, r0
    bb4a:	f88d 300f 	strb.w	r3, [sp, #15]
    bb4e:	460b      	mov	r3, r1
    bb50:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint8 PdbIndex;
    uint8 PdbChannelUsed;
    uint16 PdbPeriod = 0U;
    bb54:	2300      	movs	r3, #0
    bb56:	f8ad 301c 	strh.w	r3, [sp, #28]
    Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    bb5a:	4b62      	ldr	r3, [pc, #392]	; (bce4 <Adc_Ipw_ConfigurePdbConversion+0x1a4>)
    bb5c:	681b      	ldr	r3, [r3, #0]
    bb5e:	681a      	ldr	r2, [r3, #0]
    bb60:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bb64:	4413      	add	r3, r2
    bb66:	7c1b      	ldrb	r3, [r3, #16]
    bb68:	f88d 301b 	strb.w	r3, [sp, #27]
    /* Get delay configuration of each pre-trigger */
    /* At runtime */
    const uint16 * GroupDelay = Adc_axRuntimeGroupChannel[Group].DelaysPtr;
#else
    /* Follow user configuration */
    const uint16 * GroupDelay = GroupPtr->AdcIpwGroupConfigPtr->DelayPtr;
    bb6c:	9b02      	ldr	r3, [sp, #8]
    bb6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    bb70:	691b      	ldr	r3, [r3, #16]
    bb72:	9305      	str	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Calculate number of PDB channels depending on the ADC channels used */
    /* Note that 1 PDB channel triggers to 8 ADC channels */
    PdbChannelUsed = (uint8)ADC_IPW_PDB_CHANNELS_USED(NumChannel);
    bb74:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    bb78:	f003 0307 	and.w	r3, r3, #7
    bb7c:	b2db      	uxtb	r3, r3
    bb7e:	2b00      	cmp	r3, #0
    bb80:	d006      	beq.n	bb90 <Adc_Ipw_ConfigurePdbConversion+0x50>
    bb82:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    bb86:	08db      	lsrs	r3, r3, #3
    bb88:	b2db      	uxtb	r3, r3
    bb8a:	3301      	adds	r3, #1
    bb8c:	b2db      	uxtb	r3, r3
    bb8e:	e003      	b.n	bb98 <Adc_Ipw_ConfigurePdbConversion+0x58>
    bb90:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    bb94:	08db      	lsrs	r3, r3, #3
    bb96:	b2db      	uxtb	r3, r3
    bb98:	f88d 3013 	strb.w	r3, [sp, #19]
    /* Select the input trigger source for PDB */
    Pdb_Adc_Ip_Enable(PhysicalHwUnitId);
    bb9c:	f89d 301b 	ldrb.w	r3, [sp, #27]
    bba0:	4618      	mov	r0, r3
    bba2:	f001 fa61 	bl	d068 <Pdb_Adc_Ip_Enable>
    Pdb_Adc_Ip_SetTriggerInput(PhysicalHwUnitId, Trigger);
    bba6:	f89d 301b 	ldrb.w	r3, [sp, #27]
    bbaa:	9901      	ldr	r1, [sp, #4]
    bbac:	4618      	mov	r0, r3
    bbae:	f001 fa89 	bl	d0c4 <Pdb_Adc_Ip_SetTriggerInput>

    PdbIndex = Adc_Ipw_ConfigurePdbChannels(Unit, Group, GroupPtr, NumChannel);
    bbb2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    bbb6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    bbba:	f89d 000f 	ldrb.w	r0, [sp, #15]
    bbbe:	9a02      	ldr	r2, [sp, #8]
    bbc0:	f7ff fe84 	bl	b8cc <Adc_Ipw_ConfigurePdbChannels>
    bbc4:	4603      	mov	r3, r0
    bbc6:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    else
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */
    {
        /* If group channel delay, not bypass mode */
        if (TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableChannelDelays)
    bbca:	9b02      	ldr	r3, [sp, #8]
    bbcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    bbce:	7bdb      	ldrb	r3, [r3, #15]
    bbd0:	2b00      	cmp	r3, #0
    bbd2:	d02f      	beq.n	bc34 <Adc_Ipw_ConfigurePdbConversion+0xf4>
        {
            if (FALSE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    bbd4:	9b02      	ldr	r3, [sp, #8]
    bbd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    bbd8:	7b9b      	ldrb	r3, [r3, #14]
    bbda:	f083 0301 	eor.w	r3, r3, #1
    bbde:	b2db      	uxtb	r3, r3
    bbe0:	2b00      	cmp	r3, #0
    bbe2:	d017      	beq.n	bc14 <Adc_Ipw_ConfigurePdbConversion+0xd4>
            {
                /* If delay mode for all pre-triggers, PDB period equals to value of last pre-trigger delay (i.e longest delay) */
                PdbPeriod = GroupDelay[(Adc_axGroupStatus[Group].CurrentChannel + NumChannel) - 1U];
    bbe4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    bbe8:	493f      	ldr	r1, [pc, #252]	; (bce8 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    bbea:	4613      	mov	r3, r2
    bbec:	009b      	lsls	r3, r3, #2
    bbee:	4413      	add	r3, r2
    bbf0:	009b      	lsls	r3, r3, #2
    bbf2:	440b      	add	r3, r1
    bbf4:	3310      	adds	r3, #16
    bbf6:	781b      	ldrb	r3, [r3, #0]
    bbf8:	461a      	mov	r2, r3
    bbfa:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    bbfe:	4413      	add	r3, r2
    bc00:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    bc04:	3b01      	subs	r3, #1
    bc06:	005b      	lsls	r3, r3, #1
    bc08:	9a05      	ldr	r2, [sp, #20]
    bc0a:	4413      	add	r3, r2
    bc0c:	881b      	ldrh	r3, [r3, #0]
    bc0e:	f8ad 301c 	strh.w	r3, [sp, #28]
    bc12:	e01a      	b.n	bc4a <Adc_Ipw_ConfigurePdbConversion+0x10a>
            }
            else
            {
                /* Period will be calculated depending on user configuration in back to back mode */
                PdbPeriod = GroupDelay[0U] + (uint16)((GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*((uint16)PdbChannelUsed - 1U));
    bc14:	9b05      	ldr	r3, [sp, #20]
    bc16:	881a      	ldrh	r2, [r3, #0]
    bc18:	9b02      	ldr	r3, [sp, #8]
    bc1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    bc1c:	8999      	ldrh	r1, [r3, #12]
    bc1e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    bc22:	3b01      	subs	r3, #1
    bc24:	b29b      	uxth	r3, r3
    bc26:	fb11 f303 	smulbb	r3, r1, r3
    bc2a:	b29b      	uxth	r3, r3
    bc2c:	4413      	add	r3, r2
    bc2e:	f8ad 301c 	strh.w	r3, [sp, #28]
    bc32:	e00a      	b.n	bc4a <Adc_Ipw_ConfigurePdbConversion+0x10a>
            }
        }
        else
        {
            /* All pre-trigger configured as user PdbDelay */
            PdbPeriod = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*((uint16)PdbChannelUsed - 1U);
    bc34:	9b02      	ldr	r3, [sp, #8]
    bc36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    bc38:	899a      	ldrh	r2, [r3, #12]
    bc3a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    bc3e:	3b01      	subs	r3, #1
    bc40:	b29b      	uxth	r3, r3
    bc42:	fb12 f303 	smulbb	r3, r2, r3
    bc46:	f8ad 301c 	strh.w	r3, [sp, #28]
        }
    }

    /* Configure the period of counter */
    Pdb_Adc_Ip_SetModulus(PhysicalHwUnitId, PdbPeriod);
    bc4a:	f89d 301b 	ldrb.w	r3, [sp, #27]
    bc4e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    bc52:	4611      	mov	r1, r2
    bc54:	4618      	mov	r0, r3
    bc56:	f001 fab5 	bl	d1c4 <Pdb_Adc_Ip_SetModulus>

    /* Load the configuration */
    Pdb_Adc_Ip_LoadRegValues(PhysicalHwUnitId);
    bc5a:	f89d 301b 	ldrb.w	r3, [sp, #27]
    bc5e:	4618      	mov	r0, r3
    bc60:	f001 fa98 	bl	d194 <Pdb_Adc_Ip_LoadRegValues>

    PdbPretriggsConfig.EnableMask = 0u;
    bc64:	2300      	movs	r3, #0
    bc66:	f88d 3010 	strb.w	r3, [sp, #16]
    PdbPretriggsConfig.EnableDelayMask = 0u;
    bc6a:	2300      	movs	r3, #0
    bc6c:	f88d 3011 	strb.w	r3, [sp, #17]
    PdbPretriggsConfig.BackToBackEnableMask = 0u;
    bc70:	2300      	movs	r3, #0
    bc72:	f88d 3012 	strb.w	r3, [sp, #18]

    /* Disable others PDB channels to avoid errors when PDB trigger the disabled channels */
    for (; PdbIndex < PDB_CH_COUNT; PdbIndex++)
    bc76:	e00c      	b.n	bc92 <Adc_Ipw_ConfigurePdbConversion+0x152>
    {
        Pdb_Adc_Ip_ConfigAdcPretriggers(PhysicalHwUnitId, PdbIndex, &PdbPretriggsConfig);
    bc78:	f89d 301b 	ldrb.w	r3, [sp, #27]
    bc7c:	aa04      	add	r2, sp, #16
    bc7e:	f89d 101f 	ldrb.w	r1, [sp, #31]
    bc82:	4618      	mov	r0, r3
    bc84:	f001 fac2 	bl	d20c <Pdb_Adc_Ip_ConfigAdcPretriggers>
    for (; PdbIndex < PDB_CH_COUNT; PdbIndex++)
    bc88:	f89d 301f 	ldrb.w	r3, [sp, #31]
    bc8c:	3301      	adds	r3, #1
    bc8e:	f88d 301f 	strb.w	r3, [sp, #31]
    bc92:	f89d 301f 	ldrb.w	r3, [sp, #31]
    bc96:	2b01      	cmp	r3, #1
    bc98:	d9ee      	bls.n	bc78 <Adc_Ipw_ConfigurePdbConversion+0x138>
    }

    /* Update current channel */
    Adc_axGroupStatus[Group].CurrentChannel += NumChannel;
    bc9a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    bc9e:	4912      	ldr	r1, [pc, #72]	; (bce8 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    bca0:	4613      	mov	r3, r2
    bca2:	009b      	lsls	r3, r3, #2
    bca4:	4413      	add	r3, r2
    bca6:	009b      	lsls	r3, r3, #2
    bca8:	440b      	add	r3, r1
    bcaa:	3310      	adds	r3, #16
    bcac:	7819      	ldrb	r1, [r3, #0]
    bcae:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    bcb2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    bcb6:	440b      	add	r3, r1
    bcb8:	b2d8      	uxtb	r0, r3
    bcba:	490b      	ldr	r1, [pc, #44]	; (bce8 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    bcbc:	4613      	mov	r3, r2
    bcbe:	009b      	lsls	r3, r3, #2
    bcc0:	4413      	add	r3, r2
    bcc2:	009b      	lsls	r3, r3, #2
    bcc4:	440b      	add	r3, r1
    bcc6:	3310      	adds	r3, #16
    bcc8:	4602      	mov	r2, r0
    bcca:	701a      	strb	r2, [r3, #0]

    /* SWS_Adc_00356, SWS_Adc_00357 */
    /* Start software trigger */
    /* If trigger is not software trigger, hardware trigger or external trigger will be used */
    if (PDB_ADC_IP_SOFTWARE_TRIGGER == Trigger)
    bccc:	9b01      	ldr	r3, [sp, #4]
    bcce:	2b0f      	cmp	r3, #15
    bcd0:	d104      	bne.n	bcdc <Adc_Ipw_ConfigurePdbConversion+0x19c>
            /* PDB operation in Continuous mode for software */
            Pdb_Adc_Ip_SetContinuousMode(PhysicalHwUnitId, TRUE);
        }
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */

        Pdb_Adc_Ip_SwTrigger(PhysicalHwUnitId);
    bcd2:	f89d 301b 	ldrb.w	r3, [sp, #27]
    bcd6:	4618      	mov	r0, r3
    bcd8:	f001 fa34 	bl	d144 <Pdb_Adc_Ip_SwTrigger>
    }
#if (ADC_SETCHANNEL_API == STD_OFF)
    /* Avoid compiler warning */
    (void)Group;
#endif /* (ADC_SETCHANNEL_API == STD_OFF) */
}
    bcdc:	bf00      	nop
    bcde:	b009      	add	sp, #36	; 0x24
    bce0:	f85d fb04 	ldr.w	pc, [sp], #4
    bce4:	1fff8d40 	.word	0x1fff8d40
    bce8:	1fff8d48 	.word	0x1fff8d48

0000bcec <Adc_Ipw_StopConversionCheckTimeout>:
*
*/
static inline Std_ReturnType Adc_Ipw_StopConversionCheckTimeout(Adc_HwUnitType Unit,
                                                                Adc_GroupType Group,
                                                                uint8 CoreId)
{
    bcec:	b500      	push	{lr}
    bcee:	b087      	sub	sp, #28
    bcf0:	4603      	mov	r3, r0
    bcf2:	f88d 3007 	strb.w	r3, [sp, #7]
    bcf6:	460b      	mov	r3, r1
    bcf8:	f8ad 3004 	strh.w	r3, [sp, #4]
    bcfc:	4613      	mov	r3, r2
    bcfe:	f88d 3006 	strb.w	r3, [sp, #6]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    bd02:	f89d 3006 	ldrb.w	r3, [sp, #6]
    bd06:	4a36      	ldr	r2, [pc, #216]	; (bde0 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    bd08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd0c:	68da      	ldr	r2, [r3, #12]
    bd0e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    bd12:	005b      	lsls	r3, r3, #1
    bd14:	4413      	add	r3, r2
    bd16:	881b      	ldrh	r3, [r3, #0]
    bd18:	f8ad 3014 	strh.w	r3, [sp, #20]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    bd1c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    bd20:	4a2f      	ldr	r2, [pc, #188]	; (bde0 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    bd22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd26:	681a      	ldr	r2, [r3, #0]
    bd28:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bd2c:	4413      	add	r3, r2
    bd2e:	7c1b      	ldrb	r3, [r3, #16]
    bd30:	f88d 3013 	strb.w	r3, [sp, #19]
    Std_ReturnType Status = E_OK;
    bd34:	2300      	movs	r3, #0
    bd36:	f88d 3017 	strb.w	r3, [sp, #23]
    Adc_Ip_StatusType AdcIpStatus;
    uint8 ChIndex;

    /* Stop PDB hardware trigger unit */
    Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
    bd3a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    bd3e:	4618      	mov	r0, r3
    bd40:	f001 fb7e 	bl	d440 <Pdb_Adc_Ip_DisableAndClearPdb>

    /* Check if ADC is in continuous mode */
    if (((uint8)STD_ON == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcWithoutInterrupt) && (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode))
    bd44:	f89d 3006 	ldrb.w	r3, [sp, #6]
    bd48:	4a25      	ldr	r2, [pc, #148]	; (bde0 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    bd4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd4e:	685a      	ldr	r2, [r3, #4]
    bd50:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    bd54:	2134      	movs	r1, #52	; 0x34
    bd56:	fb01 f303 	mul.w	r3, r1, r3
    bd5a:	4413      	add	r3, r2
    bd5c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    bd60:	2b01      	cmp	r3, #1
    bd62:	d114      	bne.n	bd8e <Adc_Ipw_StopConversionCheckTimeout+0xa2>
    bd64:	f89d 3006 	ldrb.w	r3, [sp, #6]
    bd68:	4a1d      	ldr	r2, [pc, #116]	; (bde0 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    bd6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd6e:	685a      	ldr	r2, [r3, #4]
    bd70:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    bd74:	2134      	movs	r1, #52	; 0x34
    bd76:	fb01 f303 	mul.w	r3, r1, r3
    bd7a:	4413      	add	r3, r2
    bd7c:	689b      	ldr	r3, [r3, #8]
    bd7e:	2b01      	cmp	r3, #1
    bd80:	d105      	bne.n	bd8e <Adc_Ipw_StopConversionCheckTimeout+0xa2>
    {
        /* Set to Oneshot mode */
        Adc_Ip_SetContinuousMode(PhysicalHwUnitId, FALSE);
    bd82:	f89d 3013 	ldrb.w	r3, [sp, #19]
    bd86:	2100      	movs	r1, #0
    bd88:	4618      	mov	r0, r3
    bd8a:	f7ff f827 	bl	addc <Adc_Ip_SetContinuousMode>
    }

    /* Disable all channels */
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    bd8e:	2300      	movs	r3, #0
    bd90:	f88d 3016 	strb.w	r3, [sp, #22]
    bd94:	e013      	b.n	bdbe <Adc_Ipw_StopConversionCheckTimeout+0xd2>
    {
        /* Stop conversion in SC1n register and wait until conversion is aborted. */
        /* Because some channels in chain are not converted yet */
        AdcIpStatus = Adc_Ip_SetDisabledChannel(PhysicalHwUnitId, ChIndex, TRUE);
    bd96:	f89d 3013 	ldrb.w	r3, [sp, #19]
    bd9a:	f89d 1016 	ldrb.w	r1, [sp, #22]
    bd9e:	2201      	movs	r2, #1
    bda0:	4618      	mov	r0, r3
    bda2:	f7ff f8cd 	bl	af40 <Adc_Ip_SetDisabledChannel>
    bda6:	9003      	str	r0, [sp, #12]
        if (AdcIpStatus == ADC_IP_STATUS_TIMEOUT)
    bda8:	9b03      	ldr	r3, [sp, #12]
    bdaa:	2b02      	cmp	r3, #2
    bdac:	d102      	bne.n	bdb4 <Adc_Ipw_StopConversionCheckTimeout+0xc8>
        {
            Status = E_NOT_OK;
    bdae:	2301      	movs	r3, #1
    bdb0:	f88d 3017 	strb.w	r3, [sp, #23]
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    bdb4:	f89d 3016 	ldrb.w	r3, [sp, #22]
    bdb8:	3301      	adds	r3, #1
    bdba:	f88d 3016 	strb.w	r3, [sp, #22]
    bdbe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bdc2:	4a08      	ldr	r2, [pc, #32]	; (bde4 <Adc_Ipw_StopConversionCheckTimeout+0xf8>)
    bdc4:	00db      	lsls	r3, r3, #3
    bdc6:	4413      	add	r3, r2
    bdc8:	799b      	ldrb	r3, [r3, #6]
    bdca:	f89d 2016 	ldrb.w	r2, [sp, #22]
    bdce:	429a      	cmp	r2, r3
    bdd0:	d3e1      	bcc.n	bd96 <Adc_Ipw_StopConversionCheckTimeout+0xaa>
        }
    }
    return Status;
    bdd2:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    bdd6:	4618      	mov	r0, r3
    bdd8:	b007      	add	sp, #28
    bdda:	f85d fb04 	ldr.w	pc, [sp], #4
    bdde:	bf00      	nop
    bde0:	1fff8d40 	.word	0x1fff8d40
    bde4:	1fff8d70 	.word	0x1fff8d70

0000bde8 <Adc_Ipw_PrepareGroupStart>:
* @return         void
*/
static inline void Adc_Ipw_PrepareGroupStart(Adc_HwUnitType Unit,
                                             const Adc_GroupConfigurationType * GroupPtr,
                                             uint8 CoreId)
{
    bde8:	b500      	push	{lr}
    bdea:	b085      	sub	sp, #20
    bdec:	4603      	mov	r3, r0
    bdee:	9100      	str	r1, [sp, #0]
    bdf0:	f88d 3007 	strb.w	r3, [sp, #7]
    bdf4:	4613      	mov	r3, r2
    bdf6:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_ConversionTimeType ConvTime;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    bdfa:	f89d 3006 	ldrb.w	r3, [sp, #6]
    bdfe:	4a14      	ldr	r2, [pc, #80]	; (be50 <Adc_Ipw_PrepareGroupStart+0x68>)
    be00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be04:	681a      	ldr	r2, [r3, #0]
    be06:	f89d 3007 	ldrb.w	r3, [sp, #7]
    be0a:	4413      	add	r3, r2
    be0c:	7c1b      	ldrb	r3, [r3, #16]
    be0e:	f88d 300f 	strb.w	r3, [sp, #15]
            Adc_Ip_SetAveraging(PhysicalHwUnitId, TRUE, GroupPtr->AdcIpwGroupConfigPtr->GroupAvgSelectAlternate);
        }
    }
#else /* (ADC_DUAL_CLOCK_MODE == STD_OFF) */
    {
        if ((uint8)STD_ON == GroupPtr->AdcIpwGroupConfigPtr->GroupAvgEnable)
    be12:	9b00      	ldr	r3, [sp, #0]
    be14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    be16:	781b      	ldrb	r3, [r3, #0]
    be18:	2b01      	cmp	r3, #1
    be1a:	d108      	bne.n	be2e <Adc_Ipw_PrepareGroupStart+0x46>
        {
            Adc_Ip_SetAveraging(PhysicalHwUnitId, TRUE, GroupPtr->AdcIpwGroupConfigPtr->GroupAvgSelect);
    be1c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    be20:	9b00      	ldr	r3, [sp, #0]
    be22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    be24:	685b      	ldr	r3, [r3, #4]
    be26:	461a      	mov	r2, r3
    be28:	2101      	movs	r1, #1
    be2a:	f7fe ff51 	bl	acd0 <Adc_Ip_SetAveraging>
    else
    {
        ConvTime = GroupPtr->AdcIpwGroupConfigPtr->AlternateConvTime;
    }
#else /* (ADC_DUAL_CLOCK_MODE == STD_OFF) */
    ConvTime = GroupPtr->AdcIpwGroupConfigPtr->ConvTime;
    be2e:	9b00      	ldr	r3, [sp, #0]
    be30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    be32:	7a1b      	ldrb	r3, [r3, #8]
    be34:	f88d 300e 	strb.w	r3, [sp, #14]
    (void)CoreId;
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */
    /*  Program Conversion Time */
    Adc_Ip_SetSampleTime(PhysicalHwUnitId, ConvTime);
    be38:	f89d 300f 	ldrb.w	r3, [sp, #15]
    be3c:	f89d 200e 	ldrb.w	r2, [sp, #14]
    be40:	4611      	mov	r1, r2
    be42:	4618      	mov	r0, r3
    be44:	f7fe ff62 	bl	ad0c <Adc_Ip_SetSampleTime>
}
    be48:	bf00      	nop
    be4a:	b005      	add	sp, #20
    be4c:	f85d fb04 	ldr.w	pc, [sp], #4
    be50:	1fff8d40 	.word	0x1fff8d40

0000be54 <Adc_Ipw_CalculateNumsBitShift>:
* @param[in]      Resolution    Adc resolution enum value
*
* @return         uint8        Number of bits shift
*/
uint8 Adc_Ipw_CalculateNumsBitShift(Adc_Ip_ResolutionType Resolution)
{
    be54:	b084      	sub	sp, #16
    be56:	9001      	str	r0, [sp, #4]
            /* Default is 12 bits */
            NumsBitShift = 4U;
            break;
    }
#else
    NumsBitShift = 0U;
    be58:	2300      	movs	r3, #0
    be5a:	f88d 300f 	strb.w	r3, [sp, #15]
    (void) Resolution;
#endif /* (ADC_RESULT_ALIGNMENT == ADC_ALIGN_LEFT) */

    return NumsBitShift;
    be5e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    be62:	4618      	mov	r0, r3
    be64:	b004      	add	sp, #16
    be66:	4770      	bx	lr

0000be68 <Adc_Ipw_ConfigureConversion>:
void Adc_Ipw_ConfigureConversion(Adc_HwUnitType Unit,
                                 Adc_GroupType Group,
                                 Adc_HwTriggerTimerType Trigger,
                                 uint8 NumChannel,
                                 uint8 CoreId)
{
    be68:	b500      	push	{lr}
    be6a:	b08f      	sub	sp, #60	; 0x3c
    be6c:	9202      	str	r2, [sp, #8]
    be6e:	461a      	mov	r2, r3
    be70:	4603      	mov	r3, r0
    be72:	f88d 300f 	strb.w	r3, [sp, #15]
    be76:	460b      	mov	r3, r1
    be78:	f8ad 300c 	strh.w	r3, [sp, #12]
    be7c:	4613      	mov	r3, r2
    be7e:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8 ChIndex;
    Adc_ChannelIndexType CurrentChannel;
    Adc_Ip_ChanConfigType ChannelConfig;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    be82:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    be86:	4a6d      	ldr	r2, [pc, #436]	; (c03c <Adc_Ipw_ConfigureConversion+0x1d4>)
    be88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be8c:	68da      	ldr	r2, [r3, #12]
    be8e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    be92:	005b      	lsls	r3, r3, #1
    be94:	4413      	add	r3, r2
    be96:	881b      	ldrh	r3, [r3, #0]
    be98:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    be9c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    bea0:	4a66      	ldr	r2, [pc, #408]	; (c03c <Adc_Ipw_ConfigureConversion+0x1d4>)
    bea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bea6:	685a      	ldr	r2, [r3, #4]
    bea8:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    beac:	2134      	movs	r1, #52	; 0x34
    beae:	fb01 f303 	mul.w	r3, r1, r3
    beb2:	4413      	add	r3, r2
    beb4:	930c      	str	r3, [sp, #48]	; 0x30
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    beb6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    beba:	4a60      	ldr	r2, [pc, #384]	; (c03c <Adc_Ipw_ConfigureConversion+0x1d4>)
    bebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bec0:	681a      	ldr	r2, [r3, #0]
    bec2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bec6:	4413      	add	r3, r2
    bec8:	7c1b      	ldrb	r3, [r3, #16]
    beca:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    Adc_Ip_InputChannelType Channel;
    const Adc_GroupDefType * ChannelsDefinition = NULL_PTR;
    bece:	2300      	movs	r3, #0
    bed0:	930a      	str	r3, [sp, #40]	; 0x28

    /* Next channel will be converted */
    CurrentChannel = Adc_axGroupStatus[Group].CurrentChannel;
    bed2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    bed6:	495a      	ldr	r1, [pc, #360]	; (c040 <Adc_Ipw_ConfigureConversion+0x1d8>)
    bed8:	4613      	mov	r3, r2
    beda:	009b      	lsls	r3, r3, #2
    bedc:	4413      	add	r3, r2
    bede:	009b      	lsls	r3, r3, #2
    bee0:	440b      	add	r3, r1
    bee2:	3310      	adds	r3, #16
    bee4:	781b      	ldrb	r3, [r3, #0]
    bee6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    /* Get configured channels */
    /* At runtime */
    ChannelsDefinition = Adc_axRuntimeGroupChannel[Group].ChannelPtr;
#else
    /* Pre-configuration */
    ChannelsDefinition = GroupPtr->AssignmentPtr;
    beea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    beec:	6a1b      	ldr	r3, [r3, #32]
    beee:	930a      	str	r3, [sp, #40]	; 0x28
#endif /* ADC_SETCHANNEL_API */

    /* Configure channels from current to (last channel - 1) */
    for (ChIndex = 0U; ChIndex < (NumChannel - 1U); ChIndex++)
    bef0:	2300      	movs	r3, #0
    bef2:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    bef6:	e030      	b.n	bf5a <Adc_Ipw_ConfigureConversion+0xf2>
    {
        /* Physical channel ID */
        Channel = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->ChannelConfigs[ChannelsDefinition[(CurrentChannel + ChIndex)]].Channel;
    bef8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    befc:	4a4f      	ldr	r2, [pc, #316]	; (c03c <Adc_Ipw_ConfigureConversion+0x1d4>)
    befe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf02:	681b      	ldr	r3, [r3, #0]
    bf04:	f89d 200f 	ldrb.w	r2, [sp, #15]
    bf08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    bf0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    bf0e:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    bf12:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    bf16:	440b      	add	r3, r1
    bf18:	005b      	lsls	r3, r3, #1
    bf1a:	990a      	ldr	r1, [sp, #40]	; 0x28
    bf1c:	440b      	add	r3, r1
    bf1e:	881b      	ldrh	r3, [r3, #0]
    bf20:	4619      	mov	r1, r3
    bf22:	460b      	mov	r3, r1
    bf24:	005b      	lsls	r3, r3, #1
    bf26:	440b      	add	r3, r1
    bf28:	009b      	lsls	r3, r3, #2
    bf2a:	4413      	add	r3, r2
    bf2c:	685b      	ldr	r3, [r3, #4]
    bf2e:	9308      	str	r3, [sp, #32]
        /* Channel was changed? */
        if (1U == (TempMask & 1U))
#endif /* ADC_SETCHANNEL_API */
        {
            /* Configure all channels except the last one with interrupts disabled */
            ChannelConfig.ChnIdx = ChIndex;
    bf30:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    bf34:	f88d 3014 	strb.w	r3, [sp, #20]
            ChannelConfig.Channel = Channel;
    bf38:	9b08      	ldr	r3, [sp, #32]
    bf3a:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
            ChannelConfig.InterruptEnable = FALSE;
    bf3c:	2300      	movs	r3, #0
    bf3e:	f88d 301c 	strb.w	r3, [sp, #28]
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
            Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    bf42:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    bf46:	aa05      	add	r2, sp, #20
    bf48:	4611      	mov	r1, r2
    bf4a:	4618      	mov	r0, r3
    bf4c:	f7fe ffc8 	bl	aee0 <Adc_Ip_ConfigChannel>
    for (ChIndex = 0U; ChIndex < (NumChannel - 1U); ChIndex++)
    bf50:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    bf54:	3301      	adds	r3, #1
    bf56:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    bf5a:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    bf5e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    bf62:	3b01      	subs	r3, #1
    bf64:	429a      	cmp	r2, r3
    bf66:	d3c7      	bcc.n	bef8 <Adc_Ipw_ConfigureConversion+0x90>
    /* Last channel was changed? */
    if (1U == (TempMask & 1U))
#endif
    {
        /* Get channel ID */
        Channel = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->ChannelConfigs[ChannelsDefinition[(CurrentChannel + ChIndex)]].Channel;
    bf68:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    bf6c:	4a33      	ldr	r2, [pc, #204]	; (c03c <Adc_Ipw_ConfigureConversion+0x1d4>)
    bf6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf72:	681b      	ldr	r3, [r3, #0]
    bf74:	f89d 200f 	ldrb.w	r2, [sp, #15]
    bf78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    bf7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    bf7e:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    bf82:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    bf86:	440b      	add	r3, r1
    bf88:	005b      	lsls	r3, r3, #1
    bf8a:	990a      	ldr	r1, [sp, #40]	; 0x28
    bf8c:	440b      	add	r3, r1
    bf8e:	881b      	ldrh	r3, [r3, #0]
    bf90:	4619      	mov	r1, r3
    bf92:	460b      	mov	r3, r1
    bf94:	005b      	lsls	r3, r3, #1
    bf96:	440b      	add	r3, r1
    bf98:	009b      	lsls	r3, r3, #2
    bf9a:	4413      	add	r3, r2
    bf9c:	685b      	ldr	r3, [r3, #4]
    bf9e:	9308      	str	r3, [sp, #32]
        ChannelConfig.ChnIdx = ChIndex;
    bfa0:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    bfa4:	f88d 3014 	strb.w	r3, [sp, #20]
        ChannelConfig.Channel = Channel;
    bfa8:	9b08      	ldr	r3, [sp, #32]
    bfaa:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
        /* In case of group is configured with interrupt, the complete int bit of the last channel must be enabled */
        if ((uint8)STD_OFF == GroupPtr->AdcWithoutInterrupt)
    bfac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bfae:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    bfb2:	2b00      	cmp	r3, #0
    bfb4:	d103      	bne.n	bfbe <Adc_Ipw_ConfigureConversion+0x156>
        {
            ChannelConfig.InterruptEnable = TRUE;
    bfb6:	2301      	movs	r3, #1
    bfb8:	f88d 301c 	strb.w	r3, [sp, #28]
    bfbc:	e002      	b.n	bfc4 <Adc_Ipw_ConfigureConversion+0x15c>
        }
        else
        {
            ChannelConfig.InterruptEnable = FALSE;
    bfbe:	2300      	movs	r3, #0
    bfc0:	f88d 301c 	strb.w	r3, [sp, #28]
        }
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
        /* Configure last channel */
        Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    bfc4:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    bfc8:	aa05      	add	r2, sp, #20
    bfca:	4611      	mov	r1, r2
    bfcc:	4618      	mov	r0, r3
    bfce:	f7fe ff87 	bl	aee0 <Adc_Ip_ConfigChannel>
    }

#if ((ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF) || (ADC_SETCHANNEL_API == STD_ON))
    for (ChIndex = NumChannel; ChIndex < ADC_MAX_CHAN_COUNT; ChIndex++)
    bfd2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    bfd6:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    bfda:	e014      	b.n	c006 <Adc_Ipw_ConfigureConversion+0x19e>
    {
        /* Disable other channels by configuring them as disabled */
        ChannelConfig.ChnIdx = ChIndex;
    bfdc:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    bfe0:	f88d 3014 	strb.w	r3, [sp, #20]
        ChannelConfig.Channel = ADC_IP_INPUTCHAN_DISABLED;
    bfe4:	231f      	movs	r3, #31
    bfe6:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
        ChannelConfig.InterruptEnable = FALSE;
    bfe8:	2300      	movs	r3, #0
    bfea:	f88d 301c 	strb.w	r3, [sp, #28]
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
        Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    bfee:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    bff2:	aa05      	add	r2, sp, #20
    bff4:	4611      	mov	r1, r2
    bff6:	4618      	mov	r0, r3
    bff8:	f7fe ff72 	bl	aee0 <Adc_Ip_ConfigChannel>
    for (ChIndex = NumChannel; ChIndex < ADC_MAX_CHAN_COUNT; ChIndex++)
    bffc:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    c000:	3301      	adds	r3, #1
    c002:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    c006:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    c00a:	2b0f      	cmp	r3, #15
    c00c:	d9e6      	bls.n	bfdc <Adc_Ipw_ConfigureConversion+0x174>
    }
#endif /* (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF) || (ADC_SETCHANNEL_API == STD_ON) */

     /* Save the Sc1Used register equal the number of channels configured */
     Adc_axUnitStatus[Unit].Sc1Used = NumChannel;
    c00e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c012:	4a0c      	ldr	r2, [pc, #48]	; (c044 <Adc_Ipw_ConfigureConversion+0x1dc>)
    c014:	00db      	lsls	r3, r3, #3
    c016:	4413      	add	r3, r2
    c018:	f89d 200e 	ldrb.w	r2, [sp, #14]
    c01c:	719a      	strb	r2, [r3, #6]
     /* Start software trigger through PDB or enable PDB hardware trigger */
     Adc_Ipw_ConfigurePdbConversion(Unit, Group, GroupPtr, Trigger, NumChannel);
    c01e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    c022:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c026:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c02a:	9300      	str	r3, [sp, #0]
    c02c:	9b02      	ldr	r3, [sp, #8]
    c02e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c030:	f7ff fd86 	bl	bb40 <Adc_Ipw_ConfigurePdbConversion>
}
    c034:	bf00      	nop
    c036:	b00f      	add	sp, #60	; 0x3c
    c038:	f85d fb04 	ldr.w	pc, [sp], #4
    c03c:	1fff8d40 	.word	0x1fff8d40
    c040:	1fff8d48 	.word	0x1fff8d48
    c044:	1fff8d70 	.word	0x1fff8d70

0000c048 <Adc_Ipw_Init>:
* @retval         E_NOT_OK          If Power up/Power down activities couldn't return status as expected.
*
*/
Std_ReturnType Adc_Ipw_Init(const Adc_Ipw_Config * AdcIpwCfgPtr,
                            const uint8 CoreId)
{
    c048:	b500      	push	{lr}
    c04a:	b085      	sub	sp, #20
    c04c:	9001      	str	r0, [sp, #4]
    c04e:	460b      	mov	r3, r1
    c050:	f88d 3003 	strb.w	r3, [sp, #3]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    c054:	2300      	movs	r3, #0
    c056:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_HwUnitType PhysicalHwUnitId = 0U;
    c05a:	2300      	movs	r3, #0
    c05c:	f88d 300e 	strb.w	r3, [sp, #14]
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    c060:	2300      	movs	r3, #0
    c062:	f88d 300d 	strb.w	r3, [sp, #13]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    c066:	2300      	movs	r3, #0
    c068:	f88d 300f 	strb.w	r3, [sp, #15]
    c06c:	e027      	b.n	c0be <Adc_Ipw_Init+0x76>
    {
        /* HW unit enabled on current partition */
        if ((uint8)STD_ON == AdcIpwCfgPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId])
    c06e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c072:	9a01      	ldr	r2, [sp, #4]
    c074:	4413      	add	r3, r2
    c076:	7f9b      	ldrb	r3, [r3, #30]
    c078:	2b01      	cmp	r3, #1
    c07a:	d11b      	bne.n	c0b4 <Adc_Ipw_Init+0x6c>
        {
            PhysicalHwUnitId = AdcIpwCfgPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    c07c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c080:	9a01      	ldr	r2, [sp, #4]
    c082:	4413      	add	r3, r2
    c084:	7c1b      	ldrb	r3, [r3, #16]
    c086:	f88d 300e 	strb.w	r3, [sp, #14]
            Adc_Ip_Init(PhysicalHwUnitId, AdcIpwCfgPtr->AdcConfigPtrArr[LogicalHwUnitId]);
    c08a:	f89d 000e 	ldrb.w	r0, [sp, #14]
    c08e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    c092:	9b01      	ldr	r3, [sp, #4]
    c094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    c098:	4619      	mov	r1, r3
    c09a:	f7fe fcb8 	bl	aa0e <Adc_Ip_Init>
            Pdb_Adc_Ip_Init(PhysicalHwUnitId, AdcIpwCfgPtr->PdbConfig[LogicalHwUnitId]);
    c09e:	f89d 000e 	ldrb.w	r0, [sp, #14]
    c0a2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    c0a6:	9b01      	ldr	r3, [sp, #4]
    c0a8:	3202      	adds	r2, #2
    c0aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    c0ae:	4619      	mov	r1, r3
    c0b0:	f000 fead 	bl	ce0e <Pdb_Adc_Ip_Init>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    c0b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c0b8:	3301      	adds	r3, #1
    c0ba:	f88d 300f 	strb.w	r3, [sp, #15]
    c0be:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c0c2:	2b01      	cmp	r3, #1
    c0c4:	d9d3      	bls.n	c06e <Adc_Ipw_Init+0x26>
        }
    }

    (void)CoreId;

    return TimeOutStatus;
    c0c6:	f89d 300d 	ldrb.w	r3, [sp, #13]
}
    c0ca:	4618      	mov	r0, r3
    c0cc:	b005      	add	sp, #20
    c0ce:	f85d fb04 	ldr.w	pc, [sp], #4

0000c0d2 <Adc_Ipw_DeInit>:
* @retval         E_OK              If the operation completed successfully.
* @retval         E_NOT_OK          In case of timeout while waiting for adc hardware operations.
*
*/
Std_ReturnType Adc_Ipw_DeInit(uint8 CoreId)
{
    c0d2:	b500      	push	{lr}
    c0d4:	b087      	sub	sp, #28
    c0d6:	4603      	mov	r3, r0
    c0d8:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_HwUnitType PhysicalHwUnitId = 0U;
    c0dc:	2300      	movs	r3, #0
    c0de:	f88d 3013 	strb.w	r3, [sp, #19]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    c0e2:	2300      	movs	r3, #0
    c0e4:	f88d 3017 	strb.w	r3, [sp, #23]
    Adc_GroupType GroupId = 0U;
    c0e8:	2300      	movs	r3, #0
    c0ea:	f8ad 3010 	strh.w	r3, [sp, #16]
    Adc_GroupType GroupIter = 0U;
    c0ee:	2300      	movs	r3, #0
    c0f0:	f8ad 3014 	strh.w	r3, [sp, #20]
    Std_ReturnType ReturnStatus = E_OK;
    c0f4:	2300      	movs	r3, #0
    c0f6:	f88d 300f 	strb.w	r3, [sp, #15]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    c0fa:	2300      	movs	r3, #0
    c0fc:	f88d 3017 	strb.w	r3, [sp, #23]
    c100:	e026      	b.n	c150 <Adc_Ipw_DeInit+0x7e>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    c102:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c106:	4a2e      	ldr	r2, [pc, #184]	; (c1c0 <Adc_Ipw_DeInit+0xee>)
    c108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c10c:	681a      	ldr	r2, [r3, #0]
    c10e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c112:	4413      	add	r3, r2
    c114:	7f9b      	ldrb	r3, [r3, #30]
    c116:	2b01      	cmp	r3, #1
    c118:	d115      	bne.n	c146 <Adc_Ipw_DeInit+0x74>
        {
            PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    c11a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c11e:	4a28      	ldr	r2, [pc, #160]	; (c1c0 <Adc_Ipw_DeInit+0xee>)
    c120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c124:	681a      	ldr	r2, [r3, #0]
    c126:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c12a:	4413      	add	r3, r2
    c12c:	7c1b      	ldrb	r3, [r3, #16]
    c12e:	f88d 3013 	strb.w	r3, [sp, #19]
            Adc_Ip_DeInit(PhysicalHwUnitId);
    c132:	f89d 3013 	ldrb.w	r3, [sp, #19]
    c136:	4618      	mov	r0, r3
    c138:	f7fe fd40 	bl	abbc <Adc_Ip_DeInit>
            Pdb_Adc_Ip_DeInit(PhysicalHwUnitId);
    c13c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    c140:	4618      	mov	r0, r3
    c142:	f000 ff0d 	bl	cf60 <Pdb_Adc_Ip_DeInit>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    c146:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c14a:	3301      	adds	r3, #1
    c14c:	f88d 3017 	strb.w	r3, [sp, #23]
    c150:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c154:	2b01      	cmp	r3, #1
    c156:	d9d4      	bls.n	c102 <Adc_Ipw_DeInit+0x30>
        }
    }

    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    c158:	2300      	movs	r3, #0
    c15a:	f8ad 3014 	strh.w	r3, [sp, #20]
    c15e:	e01e      	b.n	c19e <Adc_Ipw_DeInit+0xcc>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIter].GroupId;
    c160:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c164:	4a16      	ldr	r2, [pc, #88]	; (c1c0 <Adc_Ipw_DeInit+0xee>)
    c166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c16a:	685a      	ldr	r2, [r3, #4]
    c16c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    c170:	2134      	movs	r1, #52	; 0x34
    c172:	fb01 f303 	mul.w	r3, r1, r3
    c176:	4413      	add	r3, r2
    c178:	881b      	ldrh	r3, [r3, #0]
    c17a:	f8ad 3010 	strh.w	r3, [sp, #16]
        Adc_axRuntimeGroupChannel[GroupId].RuntimeUpdated = FALSE;
#if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
        Adc_axRuntimeGroupChannel[GroupId].AdcRuntimeGroupLimitcheck = FALSE;
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
#endif
        Adc_axGroupStatus[GroupId].ResultsBufferPtr = NULL_PTR;
    c17e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    c182:	4910      	ldr	r1, [pc, #64]	; (c1c4 <Adc_Ipw_DeInit+0xf2>)
    c184:	4613      	mov	r3, r2
    c186:	009b      	lsls	r3, r3, #2
    c188:	4413      	add	r3, r2
    c18a:	009b      	lsls	r3, r3, #2
    c18c:	440b      	add	r3, r1
    c18e:	330c      	adds	r3, #12
    c190:	2200      	movs	r2, #0
    c192:	601a      	str	r2, [r3, #0]
    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    c194:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    c198:	3301      	adds	r3, #1
    c19a:	f8ad 3014 	strh.w	r3, [sp, #20]
    c19e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c1a2:	4a07      	ldr	r2, [pc, #28]	; (c1c0 <Adc_Ipw_DeInit+0xee>)
    c1a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1a8:	891b      	ldrh	r3, [r3, #8]
    c1aa:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    c1ae:	429a      	cmp	r2, r3
    c1b0:	d3d6      	bcc.n	c160 <Adc_Ipw_DeInit+0x8e>
#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
    Adc_aeClockMode[CoreId] = ADC_NORMAL;
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */

    return ReturnStatus;
    c1b2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    c1b6:	4618      	mov	r0, r3
    c1b8:	b007      	add	sp, #28
    c1ba:	f85d fb04 	ldr.w	pc, [sp], #4
    c1be:	bf00      	nop
    c1c0:	1fff8d40 	.word	0x1fff8d40
    c1c4:	1fff8d48 	.word	0x1fff8d48

0000c1c8 <Adc_Ipw_StartNormalConversion>:
* @return         void
*
*/
void Adc_Ipw_StartNormalConversion(Adc_HwUnitType Unit,
                                   uint8 CoreId)
{
    c1c8:	b500      	push	{lr}
    c1ca:	b089      	sub	sp, #36	; 0x24
    c1cc:	4603      	mov	r3, r0
    c1ce:	460a      	mov	r2, r1
    c1d0:	f88d 300f 	strb.w	r3, [sp, #15]
    c1d4:	4613      	mov	r3, r2
    c1d6:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType Group = Adc_axUnitStatus[Unit].SwNormalQueue[0U]; /* Active group in the Queue */
    c1da:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c1de:	4a4c      	ldr	r2, [pc, #304]	; (c310 <Adc_Ipw_StartNormalConversion+0x148>)
    c1e0:	00db      	lsls	r3, r3, #3
    c1e2:	4413      	add	r3, r2
    c1e4:	885b      	ldrh	r3, [r3, #2]
    c1e6:	f8ad 301c 	strh.w	r3, [sp, #28]
#if (defined(ADC_DMA_SUPPORTED) || defined(ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED) || \
    (ADC_ENABLE_LIMIT_CHECK == STD_ON) || (ADC_SETCHANNEL_API == STD_OFF) || \
    (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF))
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group]; /* Group index in each partition */
    c1ea:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c1ee:	4a49      	ldr	r2, [pc, #292]	; (c314 <Adc_Ipw_StartNormalConversion+0x14c>)
    c1f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1f4:	68da      	ldr	r2, [r3, #12]
    c1f6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    c1fa:	005b      	lsls	r3, r3, #1
    c1fc:	4413      	add	r3, r2
    c1fe:	881b      	ldrh	r3, [r3, #0]
    c200:	f8ad 301a 	strh.w	r3, [sp, #26]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]); /* Pointer to AdcGroup */
    c204:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c208:	4a42      	ldr	r2, [pc, #264]	; (c314 <Adc_Ipw_StartNormalConversion+0x14c>)
    c20a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c20e:	685a      	ldr	r2, [r3, #4]
    c210:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    c214:	2134      	movs	r1, #52	; 0x34
    c216:	fb01 f303 	mul.w	r3, r1, r3
    c21a:	4413      	add	r3, r2
    c21c:	9305      	str	r3, [sp, #20]
#endif /* (defined(ADC_DMA_SUPPORTED) ||... */
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    c21e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c222:	4a3c      	ldr	r2, [pc, #240]	; (c314 <Adc_Ipw_StartNormalConversion+0x14c>)
    c224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c228:	681a      	ldr	r2, [r3, #0]
    c22a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c22e:	4413      	add	r3, r2
    c230:	7c1b      	ldrb	r3, [r3, #16]
    c232:	f88d 3013 	strb.w	r3, [sp, #19]
#ifdef ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED
    boolean PdbMode;
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */

    /* Do nothing if there is no request available in queue */
    if ((Adc_axUnitStatus[Unit].SwNormalQueueIndex != (Adc_QueueIndexType)0U)
    c236:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c23a:	4a35      	ldr	r2, [pc, #212]	; (c310 <Adc_Ipw_StartNormalConversion+0x148>)
    c23c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    c240:	b29b      	uxth	r3, r3
    c242:	2b00      	cmp	r3, #0
    c244:	d05f      	beq.n	c306 <Adc_Ipw_StartNormalConversion+0x13e>
       )
    {

#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
        /* Configure group params (e.g. conversion time) if needed before starting conversion */
        Adc_Ipw_PrepareGroupStart(Unit, GroupPtr, CoreId);
    c246:	f89d 200e 	ldrb.w	r2, [sp, #14]
    c24a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c24e:	9905      	ldr	r1, [sp, #20]
    c250:	4618      	mov	r0, r3
    c252:	f7ff fdc9 	bl	bde8 <Adc_Ipw_PrepareGroupStart>
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */

        /* Reset to start conversion from channel logical index 0 */
        Adc_axGroupStatus[Group].CurrentChannel = 0U;
    c256:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    c25a:	492f      	ldr	r1, [pc, #188]	; (c318 <Adc_Ipw_StartNormalConversion+0x150>)
    c25c:	4613      	mov	r3, r2
    c25e:	009b      	lsls	r3, r3, #2
    c260:	4413      	add	r3, r2
    c262:	009b      	lsls	r3, r3, #2
    c264:	440b      	add	r3, r1
    c266:	3310      	adds	r3, #16
    c268:	2200      	movs	r2, #0
    c26a:	701a      	strb	r2, [r3, #0]
#if (ADC_SETCHANNEL_API == STD_ON)
        /* Channel enabled at runtime */
        NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(Adc_axRuntimeGroupChannel[Group].ChannelCount);
#else
        /* Channel enabled from initialzing */
        NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(GroupPtr->AssignedChannelCount);
    c26c:	9b05      	ldr	r3, [sp, #20]
    c26e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    c272:	2b0f      	cmp	r3, #15
    c274:	d806      	bhi.n	c284 <Adc_Ipw_StartNormalConversion+0xbc>
    c276:	9b05      	ldr	r3, [sp, #20]
    c278:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    c27c:	f003 030f 	and.w	r3, r3, #15
    c280:	b2db      	uxtb	r3, r3
    c282:	e000      	b.n	c286 <Adc_Ipw_StartNormalConversion+0xbe>
    c284:	2310      	movs	r3, #16
    c286:	f88d 3012 	strb.w	r3, [sp, #18]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

        /* Update Sc1Used for the first time */
        if (0U == Adc_axUnitStatus[Unit].Sc1Used)
    c28a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c28e:	4a20      	ldr	r2, [pc, #128]	; (c310 <Adc_Ipw_StartNormalConversion+0x148>)
    c290:	00db      	lsls	r3, r3, #3
    c292:	4413      	add	r3, r2
    c294:	799b      	ldrb	r3, [r3, #6]
    c296:	2b00      	cmp	r3, #0
    c298:	d107      	bne.n	c2aa <Adc_Ipw_StartNormalConversion+0xe2>
        {
            Adc_axUnitStatus[Unit].Sc1Used = NumChannel;
    c29a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c29e:	4a1c      	ldr	r2, [pc, #112]	; (c310 <Adc_Ipw_StartNormalConversion+0x148>)
    c2a0:	00db      	lsls	r3, r3, #3
    c2a2:	4413      	add	r3, r2
    c2a4:	f89d 2012 	ldrb.w	r2, [sp, #18]
    c2a8:	719a      	strb	r2, [r3, #6]
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            /* Clear all of COCO flag by reading Rn registers */
            for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    c2aa:	2300      	movs	r3, #0
    c2ac:	f88d 301f 	strb.w	r3, [sp, #31]
    c2b0:	e00c      	b.n	c2cc <Adc_Ipw_StartNormalConversion+0x104>
            {
                (void)Adc_Ip_GetConvData(PhysicalHwUnitId, ChIndex);
    c2b2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    c2b6:	f89d 201f 	ldrb.w	r2, [sp, #31]
    c2ba:	4611      	mov	r1, r2
    c2bc:	4618      	mov	r0, r3
    c2be:	f7fe ff03 	bl	b0c8 <Adc_Ip_GetConvData>
            for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    c2c2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    c2c6:	3301      	adds	r3, #1
    c2c8:	f88d 301f 	strb.w	r3, [sp, #31]
    c2cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c2d0:	4a0f      	ldr	r2, [pc, #60]	; (c310 <Adc_Ipw_StartNormalConversion+0x148>)
    c2d2:	00db      	lsls	r3, r3, #3
    c2d4:	4413      	add	r3, r2
    c2d6:	799b      	ldrb	r3, [r3, #6]
    c2d8:	f89d 201f 	ldrb.w	r2, [sp, #31]
    c2dc:	429a      	cmp	r2, r3
    c2de:	d3e8      	bcc.n	c2b2 <Adc_Ipw_StartNormalConversion+0xea>
            }
            Adc_Ip_SetTriggerMode(PhysicalHwUnitId, ADC_IP_TRIGGER_HARDWARE);
    c2e0:	f89d 3013 	ldrb.w	r3, [sp, #19]
    c2e4:	2101      	movs	r1, #1
    c2e6:	4618      	mov	r0, r3
    c2e8:	f7fe fd60 	bl	adac <Adc_Ip_SetTriggerMode>

            /* Update group configuration to registers and start conversion */
            Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
    c2ec:	f89d 2012 	ldrb.w	r2, [sp, #18]
    c2f0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    c2f4:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c2f8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c2fc:	9300      	str	r3, [sp, #0]
    c2fe:	4613      	mov	r3, r2
    c300:	220f      	movs	r2, #15
    c302:	f7ff fdb1 	bl	be68 <Adc_Ipw_ConfigureConversion>
            /* Reset the update status */
            Adc_axRuntimeGroupChannel[Group].RuntimeUpdated =  FALSE;
        }
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    }
}
    c306:	bf00      	nop
    c308:	b009      	add	sp, #36	; 0x24
    c30a:	f85d fb04 	ldr.w	pc, [sp], #4
    c30e:	bf00      	nop
    c310:	1fff8d70 	.word	0x1fff8d70
    c314:	1fff8d40 	.word	0x1fff8d40
    c318:	1fff8d48 	.word	0x1fff8d48

0000c31c <Adc_Ipw_StopCurrentConversion>:
*
*/
Std_ReturnType Adc_Ipw_StopCurrentConversion(Adc_HwUnitType Unit,
                                             Adc_GroupType Group,
                                             uint8 CoreId)
{
    c31c:	b500      	push	{lr}
    c31e:	b085      	sub	sp, #20
    c320:	4603      	mov	r3, r0
    c322:	f88d 3007 	strb.w	r3, [sp, #7]
    c326:	460b      	mov	r3, r1
    c328:	f8ad 3004 	strh.w	r3, [sp, #4]
    c32c:	4613      	mov	r3, r2
    c32e:	f88d 3006 	strb.w	r3, [sp, #6]
#if ((ADC_BYPASS_ABORT_CHAIN_CHECK == STD_ON) || defined(ADC_DMA_SUPPORTED))
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
#endif /* (ADC_BYPASS_ABORT_CHAIN_CHECK == STD_ON) */
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    c332:	2300      	movs	r3, #0
    c334:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    c338:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c33c:	4a24      	ldr	r2, [pc, #144]	; (c3d0 <Adc_Ipw_StopCurrentConversion+0xb4>)
    c33e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c342:	681a      	ldr	r2, [r3, #0]
    c344:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c348:	4413      	add	r3, r2
    c34a:	7c1b      	ldrb	r3, [r3, #16]
    c34c:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 ChIndex;

    /* Disable Adc hardware unit and clear all of COCO flag by reading Rn register */
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    c350:	2300      	movs	r3, #0
    c352:	f88d 300f 	strb.w	r3, [sp, #15]
    c356:	e014      	b.n	c382 <Adc_Ipw_StopCurrentConversion+0x66>
    {
        (void) Adc_Ip_SetDisabledChannel(PhysicalHwUnitId, ChIndex, FALSE);
    c358:	f89d 300d 	ldrb.w	r3, [sp, #13]
    c35c:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c360:	2200      	movs	r2, #0
    c362:	4618      	mov	r0, r3
    c364:	f7fe fdec 	bl	af40 <Adc_Ip_SetDisabledChannel>

        /* Make a dummy read to clear COCO flag */
        (void) Adc_Ip_GetConvData(PhysicalHwUnitId, ChIndex);
    c368:	f89d 300d 	ldrb.w	r3, [sp, #13]
    c36c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    c370:	4611      	mov	r1, r2
    c372:	4618      	mov	r0, r3
    c374:	f7fe fea8 	bl	b0c8 <Adc_Ip_GetConvData>
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    c378:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c37c:	3301      	adds	r3, #1
    c37e:	f88d 300f 	strb.w	r3, [sp, #15]
    c382:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c386:	4a13      	ldr	r2, [pc, #76]	; (c3d4 <Adc_Ipw_StopCurrentConversion+0xb8>)
    c388:	00db      	lsls	r3, r3, #3
    c38a:	4413      	add	r3, r2
    c38c:	799b      	ldrb	r3, [r3, #6]
    c38e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    c392:	429a      	cmp	r2, r3
    c394:	d3e0      	bcc.n	c358 <Adc_Ipw_StopCurrentConversion+0x3c>
            (void)Dma_Ip_SetLogicChannelCommand(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcDmaChannelLogicId[Unit], DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
        }
    }
#endif /* ADC_DMA_SUPPORTED */
    /* Reset current channel status to 0 */
    Adc_axGroupStatus[Group].CurrentChannel = 0U;
    c396:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    c39a:	490f      	ldr	r1, [pc, #60]	; (c3d8 <Adc_Ipw_StopCurrentConversion+0xbc>)
    c39c:	4613      	mov	r3, r2
    c39e:	009b      	lsls	r3, r3, #2
    c3a0:	4413      	add	r3, r2
    c3a2:	009b      	lsls	r3, r3, #2
    c3a4:	440b      	add	r3, r1
    c3a6:	3310      	adds	r3, #16
    c3a8:	2200      	movs	r2, #0
    c3aa:	701a      	strb	r2, [r3, #0]
            Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
        }
    }
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */
#else
    Status = Adc_Ipw_StopConversionCheckTimeout(Unit, Group, CoreId);
    c3ac:	f89d 2006 	ldrb.w	r2, [sp, #6]
    c3b0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    c3b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c3b8:	4618      	mov	r0, r3
    c3ba:	f7ff fc97 	bl	bcec <Adc_Ipw_StopConversionCheckTimeout>
    c3be:	4603      	mov	r3, r0
    c3c0:	f88d 300e 	strb.w	r3, [sp, #14]
#endif /* (ADC_BYPASS_ABORT_CHAIN_CHECK == STD_OFF) */

    return Status;
    c3c4:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    c3c8:	4618      	mov	r0, r3
    c3ca:	b005      	add	sp, #20
    c3cc:	f85d fb04 	ldr.w	pc, [sp], #4
    c3d0:	1fff8d40 	.word	0x1fff8d40
    c3d4:	1fff8d70 	.word	0x1fff8d70
    c3d8:	1fff8d48 	.word	0x1fff8d48

0000c3dc <Adc_Ipw_CheckValidConversion>:
*
*/
boolean Adc_Ipw_CheckValidConversion(Adc_HwUnitType PhysicalHwUnitId,
                                     Adc_ChannelIndexType StartIndex,
                                     Adc_ChannelIndexType EndIndex)
{
    c3dc:	b500      	push	{lr}
    c3de:	b085      	sub	sp, #20
    c3e0:	4603      	mov	r3, r0
    c3e2:	f88d 3007 	strb.w	r3, [sp, #7]
    c3e6:	460b      	mov	r3, r1
    c3e8:	f88d 3006 	strb.w	r3, [sp, #6]
    c3ec:	4613      	mov	r3, r2
    c3ee:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_ChannelIndexType Index;
    boolean ValidConversion = TRUE;
    c3f2:	2301      	movs	r3, #1
    c3f4:	f88d 300e 	strb.w	r3, [sp, #14]

    for (Index = StartIndex; Index < EndIndex; Index++)
    c3f8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c3fc:	f88d 300f 	strb.w	r3, [sp, #15]
    c400:	e019      	b.n	c436 <Adc_Ipw_CheckValidConversion+0x5a>
    {
        ValidConversion = Adc_Ip_GetConvCompleteFlag(PhysicalHwUnitId, Index - StartIndex);
    c402:	f89d 0007 	ldrb.w	r0, [sp, #7]
    c406:	f89d 200f 	ldrb.w	r2, [sp, #15]
    c40a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c40e:	1ad3      	subs	r3, r2, r3
    c410:	b2db      	uxtb	r3, r3
    c412:	4619      	mov	r1, r3
    c414:	f7fe fe3e 	bl	b094 <Adc_Ip_GetConvCompleteFlag>
    c418:	4603      	mov	r3, r0
    c41a:	f88d 300e 	strb.w	r3, [sp, #14]
        if (FALSE == ValidConversion)
    c41e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c422:	f083 0301 	eor.w	r3, r3, #1
    c426:	b2db      	uxtb	r3, r3
    c428:	2b00      	cmp	r3, #0
    c42a:	d10b      	bne.n	c444 <Adc_Ipw_CheckValidConversion+0x68>
    for (Index = StartIndex; Index < EndIndex; Index++)
    c42c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c430:	3301      	adds	r3, #1
    c432:	f88d 300f 	strb.w	r3, [sp, #15]
    c436:	f89d 200f 	ldrb.w	r2, [sp, #15]
    c43a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    c43e:	429a      	cmp	r2, r3
    c440:	d3df      	bcc.n	c402 <Adc_Ipw_CheckValidConversion+0x26>
    c442:	e000      	b.n	c446 <Adc_Ipw_CheckValidConversion+0x6a>
        {
            break;
    c444:	bf00      	nop
        }
    }

    return ValidConversion;
    c446:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    c44a:	4618      	mov	r0, r3
    c44c:	b005      	add	sp, #20
    c44e:	f85d fb04 	ldr.w	pc, [sp], #4

0000c452 <Adc_Ipw_ReadGroup>:
*/
Std_ReturnType Adc_Ipw_ReadGroup(const Adc_GroupType Group,
                                 Adc_ValueGroupType * DataPtr,
                                 boolean * Flag,
                                 uint8 CoreId)
{
    c452:	b500      	push	{lr}
    c454:	b089      	sub	sp, #36	; 0x24
    c456:	9102      	str	r1, [sp, #8]
    c458:	9201      	str	r2, [sp, #4]
    c45a:	461a      	mov	r2, r3
    c45c:	4603      	mov	r3, r0
    c45e:	f8ad 300e 	strh.w	r3, [sp, #14]
    c462:	4613      	mov	r3, r2
    c464:	f88d 300d 	strb.w	r3, [sp, #13]
    Std_ReturnType ReadGroupRet = (Std_ReturnType)E_OK;
    c468:	2300      	movs	r3, #0
    c46a:	f88d 301f 	strb.w	r3, [sp, #31]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    c46e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    c472:	4a33      	ldr	r2, [pc, #204]	; (c540 <Adc_Ipw_ReadGroup+0xee>)
    c474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c478:	68da      	ldr	r2, [r3, #12]
    c47a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    c47e:	005b      	lsls	r3, r3, #1
    c480:	4413      	add	r3, r2
    c482:	881b      	ldrh	r3, [r3, #0]
    c484:	f8ad 301c 	strh.w	r3, [sp, #28]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    c488:	f89d 300d 	ldrb.w	r3, [sp, #13]
    c48c:	4a2c      	ldr	r2, [pc, #176]	; (c540 <Adc_Ipw_ReadGroup+0xee>)
    c48e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c492:	685a      	ldr	r2, [r3, #4]
    c494:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    c498:	2134      	movs	r1, #52	; 0x34
    c49a:	fb01 f303 	mul.w	r3, r1, r3
    c49e:	4413      	add	r3, r2
    c4a0:	9306      	str	r3, [sp, #24]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    c4a2:	9b06      	ldr	r3, [sp, #24]
    c4a4:	789b      	ldrb	r3, [r3, #2]
    c4a6:	f88d 3017 	strb.w	r3, [sp, #23]

    /* If the group is configured for without interrupts */
    if ((uint8)STD_ON == GroupPtr->AdcWithoutInterrupt)
    c4aa:	9b06      	ldr	r3, [sp, #24]
    c4ac:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    c4b0:	2b01      	cmp	r3, #1
    c4b2:	d124      	bne.n	c4fe <Adc_Ipw_ReadGroup+0xac>
    {
        /* Return error if group is not at the first of queue */
        if (ADC_CONV_TYPE_NORMAL == GroupPtr->Type)
    c4b4:	9b06      	ldr	r3, [sp, #24]
    c4b6:	68db      	ldr	r3, [r3, #12]
    c4b8:	2b00      	cmp	r3, #0
    c4ba:	d111      	bne.n	c4e0 <Adc_Ipw_ReadGroup+0x8e>
        {
            if (ADC_TRIGG_SRC_SW == GroupPtr->TriggerSource)
    c4bc:	9b06      	ldr	r3, [sp, #24]
    c4be:	695b      	ldr	r3, [r3, #20]
    c4c0:	2b00      	cmp	r3, #0
    c4c2:	d10d      	bne.n	c4e0 <Adc_Ipw_ReadGroup+0x8e>
            {
                if (Group != Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[0U])
    c4c4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c4c8:	4a1e      	ldr	r2, [pc, #120]	; (c544 <Adc_Ipw_ReadGroup+0xf2>)
    c4ca:	00db      	lsls	r3, r3, #3
    c4cc:	4413      	add	r3, r2
    c4ce:	885b      	ldrh	r3, [r3, #2]
    c4d0:	b29b      	uxth	r3, r3
    c4d2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    c4d6:	429a      	cmp	r2, r3
    c4d8:	d002      	beq.n	c4e0 <Adc_Ipw_ReadGroup+0x8e>
                {
                    ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    c4da:	2301      	movs	r3, #1
    c4dc:	f88d 301f 	strb.w	r3, [sp, #31]
                    ReadGroupRet = (Std_ReturnType)E_NOT_OK;
                }
            }
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */
        }
        if ((Std_ReturnType)E_OK == ReadGroupRet)
    c4e0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    c4e4:	2b00      	cmp	r3, #0
    c4e6:	d124      	bne.n	c532 <Adc_Ipw_ReadGroup+0xe0>
        {
            ReadGroupRet = Adc_Ipw_ReadGroupNoInt(GroupPtr, DataPtr, Flag, CoreId);
    c4e8:	f89d 300d 	ldrb.w	r3, [sp, #13]
    c4ec:	9a01      	ldr	r2, [sp, #4]
    c4ee:	9902      	ldr	r1, [sp, #8]
    c4f0:	9806      	ldr	r0, [sp, #24]
    c4f2:	f7ff f91f 	bl	b734 <Adc_Ipw_ReadGroupNoInt>
    c4f6:	4603      	mov	r3, r0
    c4f8:	f88d 301f 	strb.w	r3, [sp, #31]
    c4fc:	e019      	b.n	c532 <Adc_Ipw_ReadGroup+0xe0>
        }
    }
    else  /* If the group is configured with interrupts */
    {
        if (ADC_BUSY == Adc_axGroupStatus[Group].Conversion)
    c4fe:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    c502:	4911      	ldr	r1, [pc, #68]	; (c548 <Adc_Ipw_ReadGroup+0xf6>)
    c504:	4613      	mov	r3, r2
    c506:	009b      	lsls	r3, r3, #2
    c508:	4413      	add	r3, r2
    c50a:	009b      	lsls	r3, r3, #2
    c50c:	440b      	add	r3, r1
    c50e:	681b      	ldr	r3, [r3, #0]
    c510:	2b01      	cmp	r3, #1
    c512:	d102      	bne.n	c51a <Adc_Ipw_ReadGroup+0xc8>
        {
            ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    c514:	2301      	movs	r3, #1
    c516:	f88d 301f 	strb.w	r3, [sp, #31]
        }

        if ((Std_ReturnType)E_OK == ReadGroupRet)
    c51a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    c51e:	2b00      	cmp	r3, #0
    c520:	d107      	bne.n	c532 <Adc_Ipw_ReadGroup+0xe0>
        {
            Adc_Ipw_WriteDataBuffer(Group, DataPtr, CoreId);
    c522:	f89d 200d 	ldrb.w	r2, [sp, #13]
    c526:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    c52a:	9902      	ldr	r1, [sp, #8]
    c52c:	4618      	mov	r0, r3
    c52e:	f7ff f949 	bl	b7c4 <Adc_Ipw_WriteDataBuffer>
        }
    }

    return ReadGroupRet;
    c532:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    c536:	4618      	mov	r0, r3
    c538:	b009      	add	sp, #36	; 0x24
    c53a:	f85d fb04 	ldr.w	pc, [sp], #4
    c53e:	bf00      	nop
    c540:	1fff8d40 	.word	0x1fff8d40
    c544:	1fff8d70 	.word	0x1fff8d70
    c548:	1fff8d48 	.word	0x1fff8d48

0000c54c <Adc_Ipw_Calibrate>:

#if (ADC_CALIBRATION == STD_ON)
void Adc_Ipw_Calibrate(Adc_HwUnitType Unit,
                       Adc_CalibrationStatusType * Status,
                       uint8 CoreId)
{
    c54c:	b500      	push	{lr}
    c54e:	b085      	sub	sp, #20
    c550:	4603      	mov	r3, r0
    c552:	9100      	str	r1, [sp, #0]
    c554:	f88d 3007 	strb.w	r3, [sp, #7]
    c558:	4613      	mov	r3, r2
    c55a:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_Ip_StatusType IpStatus;
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    c55e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c562:	4a0e      	ldr	r2, [pc, #56]	; (c59c <Adc_Ipw_Calibrate+0x50>)
    c564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c568:	681a      	ldr	r2, [r3, #0]
    c56a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c56e:	4413      	add	r3, r2
    c570:	7c1b      	ldrb	r3, [r3, #16]
    c572:	f88d 300f 	strb.w	r3, [sp, #15]

    Status->AdcUnitSelfTestStatus = E_OK;
    c576:	9b00      	ldr	r3, [sp, #0]
    c578:	2200      	movs	r2, #0
    c57a:	701a      	strb	r2, [r3, #0]
    /* Call IPL calibration function */
    IpStatus = Adc_Ip_DoCalibration(PhysicalHwUnitId);
    c57c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c580:	4618      	mov	r0, r3
    c582:	f7fe fdb9 	bl	b0f8 <Adc_Ip_DoCalibration>
    c586:	9002      	str	r0, [sp, #8]

    if (IpStatus != ADC_IP_STATUS_SUCCESS)
    c588:	9b02      	ldr	r3, [sp, #8]
    c58a:	2b00      	cmp	r3, #0
    c58c:	d002      	beq.n	c594 <Adc_Ipw_Calibrate+0x48>
    {
        Status->AdcUnitSelfTestStatus = E_NOT_OK;
    c58e:	9b00      	ldr	r3, [sp, #0]
    c590:	2201      	movs	r2, #1
    c592:	701a      	strb	r2, [r3, #0]
    }
}
    c594:	bf00      	nop
    c596:	b005      	add	sp, #20
    c598:	f85d fb04 	ldr.w	pc, [sp], #4
    c59c:	1fff8d40 	.word	0x1fff8d40

0000c5a0 <Adc_GetCoreID>:
*
* @return      uint8  the core number.
*/
uint8 Adc_GetCoreID(void)
{
    return 0U;
    c5a0:	2300      	movs	r3, #0
}
    c5a2:	4618      	mov	r0, r3
    c5a4:	4770      	bx	lr
    c5a6:	bf00      	nop

0000c5a8 <Adc_Ipw_UpdateQueue>:
* @return         void
*
*/
static inline void Adc_Ipw_UpdateQueue(Adc_HwUnitType Unit,
                                       uint8 CoreId)
{
    c5a8:	b500      	push	{lr}
    c5aa:	b083      	sub	sp, #12
    c5ac:	4603      	mov	r3, r0
    c5ae:	460a      	mov	r2, r1
    c5b0:	f88d 3007 	strb.w	r3, [sp, #7]
    c5b4:	4613      	mov	r3, r2
    c5b6:	f88d 3006 	strb.w	r3, [sp, #6]
#if (ADC_ENABLE_QUEUING == STD_ON)
    /* Remove current request element in queue */
    Adc_Ipw_RemoveFromQueue(Unit, 0U);
    c5ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c5be:	2100      	movs	r1, #0
    c5c0:	4618      	mov	r0, r3
    c5c2:	f7fe fff3 	bl	b5ac <Adc_Ipw_RemoveFromQueue>
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
    if (Adc_axUnitStatus[Unit].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    c5c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c5ca:	4a09      	ldr	r2, [pc, #36]	; (c5f0 <Adc_Ipw_UpdateQueue+0x48>)
    c5cc:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    c5d0:	b29b      	uxth	r3, r3
    c5d2:	2b00      	cmp	r3, #0
    c5d4:	d007      	beq.n	c5e6 <Adc_Ipw_UpdateQueue+0x3e>
    {
        /* Start conversion if request elements are still available in queue */
        Adc_Ipw_StartNormalConversion(Unit, CoreId);
    c5d6:	f89d 2006 	ldrb.w	r2, [sp, #6]
    c5da:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c5de:	4611      	mov	r1, r2
    c5e0:	4618      	mov	r0, r3
    c5e2:	f7ff fdf1 	bl	c1c8 <Adc_Ipw_StartNormalConversion>
#else
    /* No element will be present in the queue */
    Adc_axUnitStatus[Unit].SwNormalQueueIndex = (Adc_QueueIndexType)0;
#endif /* ADC_ENABLE_QUEUING == STD_ON */
    (void)CoreId;
}
    c5e6:	bf00      	nop
    c5e8:	b003      	add	sp, #12
    c5ea:	f85d fb04 	ldr.w	pc, [sp], #4
    c5ee:	bf00      	nop
    c5f0:	1fff8d70 	.word	0x1fff8d70

0000c5f4 <Adc_Ipw_CheckConversionChannels>:
*/
static inline Std_ReturnType Adc_Ipw_CheckConversionChannels(Adc_HwUnitType Unit,
                                                            Adc_GroupType Group,
                                                            Adc_StreamNumSampleType GroupSamples,
                                                            uint8 CoreId)
{
    c5f4:	b510      	push	{r4, lr}
    c5f6:	b08a      	sub	sp, #40	; 0x28
    c5f8:	4604      	mov	r4, r0
    c5fa:	4608      	mov	r0, r1
    c5fc:	4611      	mov	r1, r2
    c5fe:	461a      	mov	r2, r3
    c600:	4623      	mov	r3, r4
    c602:	f88d 300f 	strb.w	r3, [sp, #15]
    c606:	4603      	mov	r3, r0
    c608:	f8ad 300c 	strh.w	r3, [sp, #12]
    c60c:	460b      	mov	r3, r1
    c60e:	f8ad 300a 	strh.w	r3, [sp, #10]
    c612:	4613      	mov	r3, r2
    c614:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    c618:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c61c:	4a68      	ldr	r2, [pc, #416]	; (c7c0 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    c61e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c622:	68da      	ldr	r2, [r3, #12]
    c624:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    c628:	005b      	lsls	r3, r3, #1
    c62a:	4413      	add	r3, r2
    c62c:	881b      	ldrh	r3, [r3, #0]
    c62e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    const Adc_GroupConfigurationType * GroupPtr; /* Pointer to AdcGroup */
    Adc_ChannelIndexType CurrentChannel = Adc_axGroupStatus[Group].CurrentChannel;
    c632:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    c636:	4963      	ldr	r1, [pc, #396]	; (c7c4 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    c638:	4613      	mov	r3, r2
    c63a:	009b      	lsls	r3, r3, #2
    c63c:	4413      	add	r3, r2
    c63e:	009b      	lsls	r3, r3, #2
    c640:	440b      	add	r3, r1
    c642:	3310      	adds	r3, #16
    c644:	781b      	ldrb	r3, [r3, #0]
    c646:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    Adc_ChannelIndexType Temp;
    Adc_ChannelIndexType Index;
    uint16 ConvResult;
    Adc_ValueGroupType * ResultIndex = NULL_PTR;
    c64a:	2300      	movs	r3, #0
    c64c:	9307      	str	r3, [sp, #28]
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    c64e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c652:	4a5b      	ldr	r2, [pc, #364]	; (c7c0 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    c654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c658:	681a      	ldr	r2, [r3, #0]
    c65a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c65e:	4413      	add	r3, r2
    c660:	7c1b      	ldrb	r3, [r3, #16]
    c662:	f88d 301b 	strb.w	r3, [sp, #27]
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    c666:	2300      	movs	r3, #0
    c668:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    const uint8 NumsBitShift = Adc_Ipw_CalculateNumsBitShift(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->Resolution);
    c66c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c670:	4a53      	ldr	r2, [pc, #332]	; (c7c0 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    c672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c676:	681b      	ldr	r3, [r3, #0]
    c678:	f89d 200f 	ldrb.w	r2, [sp, #15]
    c67c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    c680:	695b      	ldr	r3, [r3, #20]
    c682:	4618      	mov	r0, r3
    c684:	f7ff fbe6 	bl	be54 <Adc_Ipw_CalculateNumsBitShift>
    c688:	4603      	mov	r3, r0
    c68a:	f88d 301a 	strb.w	r3, [sp, #26]

    /* record the result of the Channel conversion and update group status */
#if (ADC_SETCHANNEL_API == STD_ON)
    Index = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    Index = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AssignedChannelCount;
    c68e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c692:	4a4b      	ldr	r2, [pc, #300]	; (c7c0 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    c694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c698:	685a      	ldr	r2, [r3, #4]
    c69a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    c69e:	2134      	movs	r1, #52	; 0x34
    c6a0:	fb01 f303 	mul.w	r3, r1, r3
    c6a4:	4413      	add	r3, r2
    c6a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    c6aa:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    c6ae:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c6b2:	4a43      	ldr	r2, [pc, #268]	; (c7c0 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    c6b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c6b8:	685a      	ldr	r2, [r3, #4]
    c6ba:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    c6be:	2134      	movs	r1, #52	; 0x34
    c6c0:	fb01 f303 	mul.w	r3, r1, r3
    c6c4:	4413      	add	r3, r2
    c6c6:	9305      	str	r3, [sp, #20]

    if (CurrentChannel <= Index)
    c6c8:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    c6cc:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    c6d0:	429a      	cmp	r2, r3
    c6d2:	d870      	bhi.n	c7b6 <Adc_Ipw_CheckConversionChannels+0x1c2>
    {
        /* Calculate the index of the first channel in the previous configuration */
        Temp = (Adc_ChannelIndexType)ADC_IPW_PREV_CHANNEL_INDEX(CurrentChannel);
    c6d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    c6d8:	f003 030f 	and.w	r3, r3, #15
    c6dc:	b2db      	uxtb	r3, r3
    c6de:	2b00      	cmp	r3, #0
    c6e0:	d104      	bne.n	c6ec <Adc_Ipw_CheckConversionChannels+0xf8>
    c6e2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    c6e6:	3b10      	subs	r3, #16
    c6e8:	b2db      	uxtb	r3, r3
    c6ea:	e004      	b.n	c6f6 <Adc_Ipw_CheckConversionChannels+0x102>
    c6ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    c6f0:	f023 030f 	bic.w	r3, r3, #15
    c6f4:	b2db      	uxtb	r3, r3
    c6f6:	f88d 3013 	strb.w	r3, [sp, #19]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
        /* Get the result buffer pointer */
        if (FALSE == GroupPtr->StreamResultGroupMultiSets)
        {
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
            ResultIndex = &(Adc_axGroupStatus[Group].ResultsBufferPtr[Adc_axGroupStatus[Group].ResultIndex]);
    c6fa:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    c6fe:	4931      	ldr	r1, [pc, #196]	; (c7c4 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    c700:	4613      	mov	r3, r2
    c702:	009b      	lsls	r3, r3, #2
    c704:	4413      	add	r3, r2
    c706:	009b      	lsls	r3, r3, #2
    c708:	440b      	add	r3, r1
    c70a:	330c      	adds	r3, #12
    c70c:	6819      	ldr	r1, [r3, #0]
    c70e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    c712:	482c      	ldr	r0, [pc, #176]	; (c7c4 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    c714:	4613      	mov	r3, r2
    c716:	009b      	lsls	r3, r3, #2
    c718:	4413      	add	r3, r2
    c71a:	009b      	lsls	r3, r3, #2
    c71c:	4403      	add	r3, r0
    c71e:	3308      	adds	r3, #8
    c720:	881b      	ldrh	r3, [r3, #0]
    c722:	b29b      	uxth	r3, r3
    c724:	005b      	lsls	r3, r3, #1
    c726:	440b      	add	r3, r1
    c728:	9307      	str	r3, [sp, #28]
        {
            ResultIndex = &(Adc_axGroupStatus[Group].ResultsBufferPtr[(Adc_axGroupStatus[Group].ResultIndex * Index)]);
        }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

        ValidConversion = Adc_Ipw_CheckValidConversion(PhysicalHwUnitId, Temp, CurrentChannel);
    c72a:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    c72e:	f89d 1013 	ldrb.w	r1, [sp, #19]
    c732:	f89d 301b 	ldrb.w	r3, [sp, #27]
    c736:	4618      	mov	r0, r3
    c738:	f7ff fe50 	bl	c3dc <Adc_Ipw_CheckValidConversion>
    c73c:	4603      	mov	r3, r0
    c73e:	f88d 3012 	strb.w	r3, [sp, #18]

        if (TRUE == ValidConversion)
    c742:	f89d 3012 	ldrb.w	r3, [sp, #18]
    c746:	2b00      	cmp	r3, #0
    c748:	d032      	beq.n	c7b0 <Adc_Ipw_CheckConversionChannels+0x1bc>
        {
            /* For each of channels in the list of previous configuration, read data and take result into user buffer */
            for (Index = Temp; Index < CurrentChannel; Index++)
    c74a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    c74e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    c752:	e026      	b.n	c7a2 <Adc_Ipw_CheckConversionChannels+0x1ae>
            {
                ConvResult = Adc_Ip_GetConvData(PhysicalHwUnitId, Index - Temp);
    c754:	f89d 001b 	ldrb.w	r0, [sp, #27]
    c758:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    c75c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    c760:	1ad3      	subs	r3, r2, r3
    c762:	b2db      	uxtb	r3, r3
    c764:	4619      	mov	r1, r3
    c766:	f7fe fcaf 	bl	b0c8 <Adc_Ip_GetConvData>
    c76a:	4603      	mov	r3, r0
    c76c:	f8ad 3010 	strh.w	r3, [sp, #16]
                /* Assumption: the width of the register is less than 16 */
                ConvResult = ConvResult << (NumsBitShift);
    c770:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    c774:	f89d 301a 	ldrb.w	r3, [sp, #26]
    c778:	fa02 f303 	lsl.w	r3, r2, r3
    c77c:	f8ad 3010 	strh.w	r3, [sp, #16]
                else
                {
                    Adc_Ipw_ReadData(GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);
                }
#else
                Adc_Ipw_ReadData(GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);
    c780:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    c784:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    c788:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    c78c:	9300      	str	r3, [sp, #0]
    c78e:	460b      	mov	r3, r1
    c790:	9907      	ldr	r1, [sp, #28]
    c792:	9805      	ldr	r0, [sp, #20]
    c794:	f000 fa02 	bl	cb9c <Adc_Ipw_ReadData>
            for (Index = Temp; Index < CurrentChannel; Index++)
    c798:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    c79c:	3301      	adds	r3, #1
    c79e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    c7a2:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    c7a6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    c7aa:	429a      	cmp	r2, r3
    c7ac:	d3d2      	bcc.n	c754 <Adc_Ipw_CheckConversionChannels+0x160>
    c7ae:	e002      	b.n	c7b6 <Adc_Ipw_CheckConversionChannels+0x1c2>
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_ON */
            }
        }
        else
        {
            Status = (Std_ReturnType)E_NOT_OK;
    c7b0:	2301      	movs	r3, #1
    c7b2:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        }
    }

    return Status;
    c7b6:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
}
    c7ba:	4618      	mov	r0, r3
    c7bc:	b00a      	add	sp, #40	; 0x28
    c7be:	bd10      	pop	{r4, pc}
    c7c0:	1fff8d40 	.word	0x1fff8d40
    c7c4:	1fff8d48 	.word	0x1fff8d48

0000c7c8 <Adc_Ipw_RestartConversion>:
* @return         void
*/
static inline void Adc_Ipw_RestartConversion(Adc_HwUnitType Unit,
                                             Adc_GroupType Group,
                                             uint8 CoreId)
{
    c7c8:	b500      	push	{lr}
    c7ca:	b087      	sub	sp, #28
    c7cc:	4603      	mov	r3, r0
    c7ce:	f88d 300f 	strb.w	r3, [sp, #15]
    c7d2:	460b      	mov	r3, r1
    c7d4:	f8ad 300c 	strh.w	r3, [sp, #12]
    c7d8:	4613      	mov	r3, r2
    c7da:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    c7de:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c7e2:	4a33      	ldr	r2, [pc, #204]	; (c8b0 <Adc_Ipw_RestartConversion+0xe8>)
    c7e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7e8:	68da      	ldr	r2, [r3, #12]
    c7ea:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    c7ee:	005b      	lsls	r3, r3, #1
    c7f0:	4413      	add	r3, r2
    c7f2:	881b      	ldrh	r3, [r3, #0]
    c7f4:	f8ad 3016 	strh.w	r3, [sp, #22]
    const uint32 AdcDmaLogicChId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcDmaChannelLogicId[Unit];
    uint16 ResultIndex;
#endif /*ADC_DMA_SUPPORTED*/
    uint8 NumChannel;
    Adc_ChannelIndexType ChannelCount;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    c7f8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c7fc:	4a2c      	ldr	r2, [pc, #176]	; (c8b0 <Adc_Ipw_RestartConversion+0xe8>)
    c7fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c802:	681a      	ldr	r2, [r3, #0]
    c804:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c808:	4413      	add	r3, r2
    c80a:	7c1b      	ldrb	r3, [r3, #16]
    c80c:	f88d 3015 	strb.w	r3, [sp, #21]
#if (ADC_SETCHANNEL_API == STD_ON)
    /* Get channel count in case of changing at runtime */
    ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    /* Get channel count from configuration */
    ChannelCount = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AssignedChannelCount;
    c810:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c814:	4a26      	ldr	r2, [pc, #152]	; (c8b0 <Adc_Ipw_RestartConversion+0xe8>)
    c816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c81a:	685a      	ldr	r2, [r3, #4]
    c81c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    c820:	2134      	movs	r1, #52	; 0x34
    c822:	fb01 f303 	mul.w	r3, r1, r3
    c826:	4413      	add	r3, r2
    c828:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    c82c:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Get left channel from channel count */
    NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(ChannelCount);
    c830:	f89d 3014 	ldrb.w	r3, [sp, #20]
    c834:	2b0f      	cmp	r3, #15
    c836:	d805      	bhi.n	c844 <Adc_Ipw_RestartConversion+0x7c>
    c838:	f89d 3014 	ldrb.w	r3, [sp, #20]
    c83c:	f003 030f 	and.w	r3, r3, #15
    c840:	b2db      	uxtb	r3, r3
    c842:	e000      	b.n	c846 <Adc_Ipw_RestartConversion+0x7e>
    c844:	2310      	movs	r3, #16
    c846:	f88d 3013 	strb.w	r3, [sp, #19]
        if (FALSE == GroupPtr->AdcOptimizeDmaStream)
#endif /*  (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /*ADC_DMA_SUPPORTED*/
        {
            /* Incase of the number of channels in group less than the SC1 register used then update group status and start Pdb */
            if (ChannelCount <= ADC_MAX_CHAN_COUNT)
    c84a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    c84e:	2b10      	cmp	r3, #16
    c850:	d811      	bhi.n	c876 <Adc_Ipw_RestartConversion+0xae>
            {
                /* No need to re-configure channels if they are not changed */
                /* End of chain interrupt (if used) is still in last channel (= ChannelCount) */
                Adc_axGroupStatus[Group].CurrentChannel = ChannelCount;
    c852:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    c856:	4917      	ldr	r1, [pc, #92]	; (c8b4 <Adc_Ipw_RestartConversion+0xec>)
    c858:	4613      	mov	r3, r2
    c85a:	009b      	lsls	r3, r3, #2
    c85c:	4413      	add	r3, r2
    c85e:	009b      	lsls	r3, r3, #2
    c860:	440b      	add	r3, r1
    c862:	3310      	adds	r3, #16
    c864:	f89d 2014 	ldrb.w	r2, [sp, #20]
    c868:	701a      	strb	r2, [r3, #0]

                /* Trigger PDB by software */
                Pdb_Adc_Ip_SwTrigger(PhysicalHwUnitId);
    c86a:	f89d 3015 	ldrb.w	r3, [sp, #21]
    c86e:	4618      	mov	r0, r3
    c870:	f000 fc68 	bl	d144 <Pdb_Adc_Ip_SwTrigger>
                    Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
                }
            }
        }
    }
}
    c874:	e017      	b.n	c8a6 <Adc_Ipw_RestartConversion+0xde>
                Adc_axGroupStatus[Group].CurrentChannel = 0U;
    c876:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    c87a:	490e      	ldr	r1, [pc, #56]	; (c8b4 <Adc_Ipw_RestartConversion+0xec>)
    c87c:	4613      	mov	r3, r2
    c87e:	009b      	lsls	r3, r3, #2
    c880:	4413      	add	r3, r2
    c882:	009b      	lsls	r3, r3, #2
    c884:	440b      	add	r3, r1
    c886:	3310      	adds	r3, #16
    c888:	2200      	movs	r2, #0
    c88a:	701a      	strb	r2, [r3, #0]
                    Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
    c88c:	f89d 2013 	ldrb.w	r2, [sp, #19]
    c890:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    c894:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c898:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c89c:	9300      	str	r3, [sp, #0]
    c89e:	4613      	mov	r3, r2
    c8a0:	220f      	movs	r2, #15
    c8a2:	f7ff fae1 	bl	be68 <Adc_Ipw_ConfigureConversion>
}
    c8a6:	bf00      	nop
    c8a8:	b007      	add	sp, #28
    c8aa:	f85d fb04 	ldr.w	pc, [sp], #4
    c8ae:	bf00      	nop
    c8b0:	1fff8d40 	.word	0x1fff8d40
    c8b4:	1fff8d48 	.word	0x1fff8d48

0000c8b8 <Adc_Ipw_GetCurrentSampleCount>:
                                                   , Adc_HwUnitType Unit,
                                                   Adc_StreamNumSampleType GroupSamples,
                                                   uint8 CoreId
                                                #endif
                                                  )
{
    c8b8:	b084      	sub	sp, #16
    c8ba:	4603      	mov	r3, r0
    c8bc:	f8ad 3006 	strh.w	r3, [sp, #6]
    }
    else
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /* ADC_DMA_SUPPORTED */
    {
        CurrentSampleCount = Adc_axGroupStatus[Group].ResultIndex;
    c8c0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    c8c4:	4907      	ldr	r1, [pc, #28]	; (c8e4 <Adc_Ipw_GetCurrentSampleCount+0x2c>)
    c8c6:	4613      	mov	r3, r2
    c8c8:	009b      	lsls	r3, r3, #2
    c8ca:	4413      	add	r3, r2
    c8cc:	009b      	lsls	r3, r3, #2
    c8ce:	440b      	add	r3, r1
    c8d0:	3308      	adds	r3, #8
    c8d2:	881b      	ldrh	r3, [r3, #0]
    c8d4:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    return CurrentSampleCount;
    c8d8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    c8dc:	4618      	mov	r0, r3
    c8de:	b004      	add	sp, #16
    c8e0:	4770      	bx	lr
    c8e2:	bf00      	nop
    c8e4:	1fff8d48 	.word	0x1fff8d48

0000c8e8 <Adc_Ipw_UpdateSoftwareGroupState>:
*/
static inline void Adc_Ipw_UpdateSoftwareGroupState(Adc_HwUnitType Unit,
                                                    Adc_GroupType Group,
                                                    Adc_StreamNumSampleType GroupSamples,
                                                    uint8 CoreId)
{
    c8e8:	b510      	push	{r4, lr}
    c8ea:	b084      	sub	sp, #16
    c8ec:	4604      	mov	r4, r0
    c8ee:	4608      	mov	r0, r1
    c8f0:	4611      	mov	r1, r2
    c8f2:	461a      	mov	r2, r3
    c8f4:	4623      	mov	r3, r4
    c8f6:	f88d 3007 	strb.w	r3, [sp, #7]
    c8fa:	4603      	mov	r3, r0
    c8fc:	f8ad 3004 	strh.w	r3, [sp, #4]
    c900:	460b      	mov	r3, r1
    c902:	f8ad 3002 	strh.w	r3, [sp, #2]
    c906:	4613      	mov	r3, r2
    c908:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 CurrentSampleCount;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    c90c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c910:	4a4f      	ldr	r2, [pc, #316]	; (ca50 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    c912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c916:	68da      	ldr	r2, [r3, #12]
    c918:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    c91c:	005b      	lsls	r3, r3, #1
    c91e:	4413      	add	r3, r2
    c920:	881b      	ldrh	r3, [r3, #0]
    c922:	f8ad 300e 	strh.w	r3, [sp, #14]
    Dma_Ip_LogicChannelScatterGatherListType LocTransferList[1U];
#endif /* ADC_DMA_SUPPORTED */

    /* At least once the group was converted */
    /* It's already check for validation */
    Adc_axGroupStatus[Group].AlreadyConverted = ADC_ALREADY_CONVERTED;
    c926:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    c92a:	494a      	ldr	r1, [pc, #296]	; (ca54 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    c92c:	4613      	mov	r3, r2
    c92e:	009b      	lsls	r3, r3, #2
    c930:	4413      	add	r3, r2
    c932:	009b      	lsls	r3, r3, #2
    c934:	440b      	add	r3, r1
    c936:	3304      	adds	r3, #4
    c938:	2201      	movs	r2, #1
    c93a:	601a      	str	r2, [r3, #0]
    /* Although updating Conversion is a RMW operation, it does not need an
     * exclusive area because two simultaneous interrupts will not access the
     * same areas e.g. the interrupt for ADC1 will not have the same group as
     * an interrupt on ADC0 */
    /* Change when configuration is ADC streaming access mode */
    if (ADC_BUSY == Adc_axGroupStatus[Group].Conversion)
    c93c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    c940:	4944      	ldr	r1, [pc, #272]	; (ca54 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    c942:	4613      	mov	r3, r2
    c944:	009b      	lsls	r3, r3, #2
    c946:	4413      	add	r3, r2
    c948:	009b      	lsls	r3, r3, #2
    c94a:	440b      	add	r3, r1
    c94c:	681b      	ldr	r3, [r3, #0]
    c94e:	2b01      	cmp	r3, #1
    c950:	d109      	bne.n	c966 <Adc_Ipw_UpdateSoftwareGroupState+0x7e>
    {
        /* SWS_Adc_00224 */
        Adc_axGroupStatus[Group].Conversion = ADC_COMPLETED;
    c952:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    c956:	493f      	ldr	r1, [pc, #252]	; (ca54 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    c958:	4613      	mov	r3, r2
    c95a:	009b      	lsls	r3, r3, #2
    c95c:	4413      	add	r3, r2
    c95e:	009b      	lsls	r3, r3, #2
    c960:	440b      	add	r3, r1
    c962:	2202      	movs	r2, #2
    c964:	601a      	str	r2, [r3, #0]
    }

#if (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS)
    CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount(Group, Unit, GroupSamples, CoreId);
#else
    CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount(Group);
    c966:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    c96a:	4618      	mov	r0, r3
    c96c:	f7ff ffa4 	bl	c8b8 <Adc_Ipw_GetCurrentSampleCount>
    c970:	9002      	str	r0, [sp, #8]
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */

    /* If buffer is full of samples */
    if (CurrentSampleCount >= GroupSamples)
    c972:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    c976:	9a02      	ldr	r2, [sp, #8]
    c978:	429a      	cmp	r2, r3
    c97a:	d35d      	bcc.n	ca38 <Adc_Ipw_UpdateSoftwareGroupState+0x150>
    {
        /* Change to stream complete according to AutoSar diagram */
        Adc_axGroupStatus[Group].Conversion = ADC_STREAM_COMPLETED;
    c97c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    c980:	4934      	ldr	r1, [pc, #208]	; (ca54 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    c982:	4613      	mov	r3, r2
    c984:	009b      	lsls	r3, r3, #2
    c986:	4413      	add	r3, r2
    c988:	009b      	lsls	r3, r3, #2
    c98a:	440b      	add	r3, r1
    c98c:	2203      	movs	r2, #3
    c98e:	601a      	str	r2, [r3, #0]

        if ((ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) && \
    c990:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c994:	4a2e      	ldr	r2, [pc, #184]	; (ca50 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    c996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c99a:	685a      	ldr	r2, [r3, #4]
    c99c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    c9a0:	2134      	movs	r1, #52	; 0x34
    c9a2:	fb01 f303 	mul.w	r3, r1, r3
    c9a6:	4413      	add	r3, r2
    c9a8:	699b      	ldr	r3, [r3, #24]
    c9aa:	2b00      	cmp	r3, #0
    c9ac:	d117      	bne.n	c9de <Adc_Ipw_UpdateSoftwareGroupState+0xf6>
            (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) \
    c9ae:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c9b2:	4a27      	ldr	r2, [pc, #156]	; (ca50 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    c9b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9b8:	685a      	ldr	r2, [r3, #4]
    c9ba:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    c9be:	2134      	movs	r1, #52	; 0x34
    c9c0:	fb01 f303 	mul.w	r3, r1, r3
    c9c4:	4413      	add	r3, r2
    c9c6:	685b      	ldr	r3, [r3, #4]
        if ((ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) && \
    c9c8:	2b01      	cmp	r3, #1
    c9ca:	d108      	bne.n	c9de <Adc_Ipw_UpdateSoftwareGroupState+0xf6>
                Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
            }
#endif /*  (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /* ADC_DMA_SUPPORTED */
            /* Update queue and execute new start conversion request from queue if available */
            Adc_Ipw_UpdateQueue(Unit, CoreId);
    c9cc:	f89d 2006 	ldrb.w	r2, [sp, #6]
    c9d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c9d4:	4611      	mov	r1, r2
    c9d6:	4618      	mov	r0, r3
    c9d8:	f7ff fde6 	bl	c5a8 <Adc_Ipw_UpdateQueue>

#if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
    /* Implement user notification function if available */
    Adc_Ipw_CallNotification(Group, CoreId);
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */
}
    c9dc:	e035      	b.n	ca4a <Adc_Ipw_UpdateSoftwareGroupState+0x162>
            if (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)
    c9de:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c9e2:	4a1b      	ldr	r2, [pc, #108]	; (ca50 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    c9e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9e8:	685a      	ldr	r2, [r3, #4]
    c9ea:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    c9ee:	2134      	movs	r1, #52	; 0x34
    c9f0:	fb01 f303 	mul.w	r3, r1, r3
    c9f4:	4413      	add	r3, r2
    c9f6:	689b      	ldr	r3, [r3, #8]
    c9f8:	2b01      	cmp	r3, #1
    c9fa:	d114      	bne.n	ca26 <Adc_Ipw_UpdateSoftwareGroupState+0x13e>
                Adc_axGroupStatus[Group].ResultIndex = 0U;
    c9fc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    ca00:	4914      	ldr	r1, [pc, #80]	; (ca54 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    ca02:	4613      	mov	r3, r2
    ca04:	009b      	lsls	r3, r3, #2
    ca06:	4413      	add	r3, r2
    ca08:	009b      	lsls	r3, r3, #2
    ca0a:	440b      	add	r3, r1
    ca0c:	3308      	adds	r3, #8
    ca0e:	2200      	movs	r2, #0
    ca10:	801a      	strh	r2, [r3, #0]
                Adc_Ipw_RestartConversion(Unit, Group, CoreId);
    ca12:	f89d 2006 	ldrb.w	r2, [sp, #6]
    ca16:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    ca1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ca1e:	4618      	mov	r0, r3
    ca20:	f7ff fed2 	bl	c7c8 <Adc_Ipw_RestartConversion>
}
    ca24:	e011      	b.n	ca4a <Adc_Ipw_UpdateSoftwareGroupState+0x162>
                Adc_Ipw_UpdateQueue(Unit, CoreId);
    ca26:	f89d 2006 	ldrb.w	r2, [sp, #6]
    ca2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ca2e:	4611      	mov	r1, r2
    ca30:	4618      	mov	r0, r3
    ca32:	f7ff fdb9 	bl	c5a8 <Adc_Ipw_UpdateQueue>
}
    ca36:	e008      	b.n	ca4a <Adc_Ipw_UpdateSoftwareGroupState+0x162>
        Adc_Ipw_RestartConversion(Unit, Group, CoreId);
    ca38:	f89d 2006 	ldrb.w	r2, [sp, #6]
    ca3c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    ca40:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ca44:	4618      	mov	r0, r3
    ca46:	f7ff febf 	bl	c7c8 <Adc_Ipw_RestartConversion>
}
    ca4a:	bf00      	nop
    ca4c:	b004      	add	sp, #16
    ca4e:	bd10      	pop	{r4, pc}
    ca50:	1fff8d40 	.word	0x1fff8d40
    ca54:	1fff8d48 	.word	0x1fff8d48

0000ca58 <Adc_Ipw_EndConversion>:
*/
static inline void Adc_Ipw_EndConversion(Adc_HwUnitType Unit,
                                         Adc_GroupType Group,
                                         boolean IsSoftwareConversion,
                                         uint8 CoreId)
{
    ca58:	b510      	push	{r4, lr}
    ca5a:	b088      	sub	sp, #32
    ca5c:	4604      	mov	r4, r0
    ca5e:	4608      	mov	r0, r1
    ca60:	4611      	mov	r1, r2
    ca62:	461a      	mov	r2, r3
    ca64:	4623      	mov	r3, r4
    ca66:	f88d 300f 	strb.w	r3, [sp, #15]
    ca6a:	4603      	mov	r3, r0
    ca6c:	f8ad 300c 	strh.w	r3, [sp, #12]
    ca70:	460b      	mov	r3, r1
    ca72:	f88d 300e 	strb.w	r3, [sp, #14]
    ca76:	4613      	mov	r3, r2
    ca78:	f88d 300b 	strb.w	r3, [sp, #11]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    ca7c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ca80:	4a44      	ldr	r2, [pc, #272]	; (cb94 <Adc_Ipw_EndConversion+0x13c>)
    ca82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca86:	68da      	ldr	r2, [r3, #12]
    ca88:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    ca8c:	005b      	lsls	r3, r3, #1
    ca8e:	4413      	add	r3, r2
    ca90:	881b      	ldrh	r3, [r3, #0]
    ca92:	f8ad 301e 	strh.w	r3, [sp, #30]
#if ((ADC_SETCHANNEL_API == STD_ON) || ((ADC_SETCHANNEL_API == STD_OFF) && (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF)))
    Adc_ChannelIndexType ChannelCount;
#endif /* ((ADC_SETCHANNEL_API == STD_ON) || ((ADC_SETCHANNEL_API == STD_OFF) && (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF))) */

    /* Get the group configuration */
    GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    ca96:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ca9a:	4a3e      	ldr	r2, [pc, #248]	; (cb94 <Adc_Ipw_EndConversion+0x13c>)
    ca9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    caa0:	685a      	ldr	r2, [r3, #4]
    caa2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    caa6:	2134      	movs	r1, #52	; 0x34
    caa8:	fb01 f303 	mul.w	r3, r1, r3
    caac:	4413      	add	r3, r2
    caae:	9306      	str	r3, [sp, #24]
    }
    else
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    {
        /* Limit checking */
        if ((Std_ReturnType)E_OK == Adc_Ipw_CheckConversionChannels(Unit, Group, GroupPtr->NumSamples, CoreId))
    cab0:	9b06      	ldr	r3, [sp, #24]
    cab2:	8b9a      	ldrh	r2, [r3, #28]
    cab4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    cab8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    cabc:	f89d 000f 	ldrb.w	r0, [sp, #15]
    cac0:	f7ff fd98 	bl	c5f4 <Adc_Ipw_CheckConversionChannels>
    cac4:	4603      	mov	r3, r0
    cac6:	2b00      	cmp	r3, #0
    cac8:	d160      	bne.n	cb8c <Adc_Ipw_EndConversion+0x134>
        {
#if (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF)
            /* Following code will not be reduced when oneshot hardware trigger optimization is not enabled */
#if (ADC_SETCHANNEL_API == STD_OFF)
            /* Channels configured when initializing */
            ChannelCount = GroupPtr->AssignedChannelCount;
    caca:	9b06      	ldr	r3, [sp, #24]
    cacc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    cad0:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

            /* More channels in group */
            /* Both HW and SW groups are using PDB SW trigger mode to restart conversion when ChannelCount > Max SC registers */
            if (Adc_axGroupStatus[Group].CurrentChannel < ChannelCount)
    cad4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    cad8:	492f      	ldr	r1, [pc, #188]	; (cb98 <Adc_Ipw_EndConversion+0x140>)
    cada:	4613      	mov	r3, r2
    cadc:	009b      	lsls	r3, r3, #2
    cade:	4413      	add	r3, r2
    cae0:	009b      	lsls	r3, r3, #2
    cae2:	440b      	add	r3, r1
    cae4:	3310      	adds	r3, #16
    cae6:	781b      	ldrb	r3, [r3, #0]
    cae8:	f89d 2017 	ldrb.w	r2, [sp, #23]
    caec:	429a      	cmp	r2, r3
    caee:	d929      	bls.n	cb44 <Adc_Ipw_EndConversion+0xec>
            {
                /* Get left channel */
                NumChannel = ChannelCount - Adc_axGroupStatus[Group].CurrentChannel;
    caf0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    caf4:	4928      	ldr	r1, [pc, #160]	; (cb98 <Adc_Ipw_EndConversion+0x140>)
    caf6:	4613      	mov	r3, r2
    caf8:	009b      	lsls	r3, r3, #2
    cafa:	4413      	add	r3, r2
    cafc:	009b      	lsls	r3, r3, #2
    cafe:	440b      	add	r3, r1
    cb00:	3310      	adds	r3, #16
    cb02:	781b      	ldrb	r3, [r3, #0]
    cb04:	f89d 2017 	ldrb.w	r2, [sp, #23]
    cb08:	1ad3      	subs	r3, r2, r3
    cb0a:	f88d 3016 	strb.w	r3, [sp, #22]

                /* In case of left channels excess maximum allowed channels */
                LeftChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(NumChannel);
    cb0e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    cb12:	2b0f      	cmp	r3, #15
    cb14:	d805      	bhi.n	cb22 <Adc_Ipw_EndConversion+0xca>
    cb16:	f89d 3016 	ldrb.w	r3, [sp, #22]
    cb1a:	f003 030f 	and.w	r3, r3, #15
    cb1e:	b2db      	uxtb	r3, r3
    cb20:	e000      	b.n	cb24 <Adc_Ipw_EndConversion+0xcc>
    cb22:	2310      	movs	r3, #16
    cb24:	f88d 3015 	strb.w	r3, [sp, #21]

                /* Configure left channels and start more conversions */
                Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, LeftChannel, CoreId);
    cb28:	f89d 2015 	ldrb.w	r2, [sp, #21]
    cb2c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    cb30:	f89d 000f 	ldrb.w	r0, [sp, #15]
    cb34:	f89d 300b 	ldrb.w	r3, [sp, #11]
    cb38:	9300      	str	r3, [sp, #0]
    cb3a:	4613      	mov	r3, r2
    cb3c:	220f      	movs	r2, #15
    cb3e:	f7ff f993 	bl	be68 <Adc_Ipw_ConfigureConversion>
                Adc_Ipw_HandleConversionCheckFail(Unit, Group, GroupPtr, CoreId);
            }
        }
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
    }
}
    cb42:	e023      	b.n	cb8c <Adc_Ipw_EndConversion+0x134>
                Adc_axGroupStatus[Group].ResultIndex++;
    cb44:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    cb48:	4913      	ldr	r1, [pc, #76]	; (cb98 <Adc_Ipw_EndConversion+0x140>)
    cb4a:	4613      	mov	r3, r2
    cb4c:	009b      	lsls	r3, r3, #2
    cb4e:	4413      	add	r3, r2
    cb50:	009b      	lsls	r3, r3, #2
    cb52:	440b      	add	r3, r1
    cb54:	3308      	adds	r3, #8
    cb56:	881b      	ldrh	r3, [r3, #0]
    cb58:	b29b      	uxth	r3, r3
    cb5a:	3301      	adds	r3, #1
    cb5c:	b298      	uxth	r0, r3
    cb5e:	490e      	ldr	r1, [pc, #56]	; (cb98 <Adc_Ipw_EndConversion+0x140>)
    cb60:	4613      	mov	r3, r2
    cb62:	009b      	lsls	r3, r3, #2
    cb64:	4413      	add	r3, r2
    cb66:	009b      	lsls	r3, r3, #2
    cb68:	440b      	add	r3, r1
    cb6a:	3308      	adds	r3, #8
    cb6c:	4602      	mov	r2, r0
    cb6e:	801a      	strh	r2, [r3, #0]
                if (TRUE == IsSoftwareConversion)
    cb70:	f89d 300e 	ldrb.w	r3, [sp, #14]
    cb74:	2b00      	cmp	r3, #0
    cb76:	d009      	beq.n	cb8c <Adc_Ipw_EndConversion+0x134>
                    Adc_Ipw_UpdateSoftwareGroupState(Unit, Group, GroupPtr->NumSamples, CoreId);
    cb78:	9b06      	ldr	r3, [sp, #24]
    cb7a:	8b9a      	ldrh	r2, [r3, #28]
    cb7c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    cb80:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    cb84:	f89d 000f 	ldrb.w	r0, [sp, #15]
    cb88:	f7ff feae 	bl	c8e8 <Adc_Ipw_UpdateSoftwareGroupState>
}
    cb8c:	bf00      	nop
    cb8e:	b008      	add	sp, #32
    cb90:	bd10      	pop	{r4, pc}
    cb92:	bf00      	nop
    cb94:	1fff8d40 	.word	0x1fff8d40
    cb98:	1fff8d48 	.word	0x1fff8d48

0000cb9c <Adc_Ipw_ReadData>:
static inline void Adc_Ipw_ReadData(const Adc_GroupConfigurationType * GroupPtr,
                                    Adc_ValueGroupType * ResultPtr,
                                    const Adc_StreamNumSampleType GroupSamples,
                                    const Adc_ChannelIndexType Index,
                                    const uint16 ConvResult)
{
    cb9c:	b084      	sub	sp, #16
    cb9e:	9003      	str	r0, [sp, #12]
    cba0:	9102      	str	r1, [sp, #8]
    cba2:	4611      	mov	r1, r2
    cba4:	461a      	mov	r2, r3
    cba6:	460b      	mov	r3, r1
    cba8:	f8ad 3006 	strh.w	r3, [sp, #6]
    cbac:	4613      	mov	r3, r2
    cbae:	f88d 3005 	strb.w	r3, [sp, #5]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    if (FALSE == GroupPtr->StreamResultGroupMultiSets)
    {
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
        ResultPtr[(Index * GroupSamples)] = ConvResult;
    cbb2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    cbb6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    cbba:	fb02 f303 	mul.w	r3, r2, r3
    cbbe:	005b      	lsls	r3, r3, #1
    cbc0:	9a02      	ldr	r2, [sp, #8]
    cbc2:	4413      	add	r3, r2
    cbc4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    cbc8:	801a      	strh	r2, [r3, #0]
    else
    {
        ResultPtr[Index] = ConvResult;
    }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
}
    cbca:	bf00      	nop
    cbcc:	b004      	add	sp, #16
    cbce:	4770      	bx	lr

0000cbd0 <Adc_Ipw_EndConversionNotification>:
* @param[in]      PhysicalAdcUnit   ADC Hardware Unit
*
* @return         void
*/
static inline void Adc_Ipw_EndConversionNotification(const Adc_HwUnitType PhysicalAdcUnit)
{
    cbd0:	b500      	push	{lr}
    cbd2:	b085      	sub	sp, #20
    cbd4:	4603      	mov	r3, r0
    cbd6:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Check that ADC unit is assigned to current core partition */
    const volatile uint8 CoreId = Adc_GetCoreID();
    cbda:	f7ff fce1 	bl	c5a0 <Adc_GetCoreID>
    cbde:	4603      	mov	r3, r0
    cbe0:	f88d 300b 	strb.w	r3, [sp, #11]
    const Adc_HwUnitType LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.HwLogicalId[PhysicalAdcUnit];
    cbe4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    cbe8:	b2db      	uxtb	r3, r3
    cbea:	461a      	mov	r2, r3
    cbec:	4b14      	ldr	r3, [pc, #80]	; (cc40 <Adc_Ipw_EndConversionNotification+0x70>)
    cbee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    cbf2:	681a      	ldr	r2, [r3, #0]
    cbf4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cbf8:	4413      	add	r3, r2
    cbfa:	f893 3020 	ldrb.w	r3, [r3, #32]
    cbfe:	f88d 300f 	strb.w	r3, [sp, #15]
    const Adc_GroupType SwGroupId = Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[0U];
    cc02:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cc06:	4a0f      	ldr	r2, [pc, #60]	; (cc44 <Adc_Ipw_EndConversionNotification+0x74>)
    cc08:	00db      	lsls	r3, r3, #3
    cc0a:	4413      	add	r3, r2
    cc0c:	885b      	ldrh	r3, [r3, #2]
    cc0e:	f8ad 300c 	strh.w	r3, [sp, #12]
            Adc_Ipw_EndConversion(LogicalHwUnitId, HwGroupId, FALSE, CoreId);
        }
    }
    else
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    cc12:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cc16:	4a0b      	ldr	r2, [pc, #44]	; (cc44 <Adc_Ipw_EndConversionNotification+0x74>)
    cc18:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    cc1c:	b29b      	uxth	r3, r3
    cc1e:	2b00      	cmp	r3, #0
    cc20:	d009      	beq.n	cc36 <Adc_Ipw_EndConversionNotification+0x66>
            Adc_Ipw_EndDmaConversion(LogicalHwUnitId, SwGroupId, TRUE, CoreId);
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            Adc_Ipw_EndConversion(LogicalHwUnitId, SwGroupId, TRUE, CoreId);
    cc22:	f89d 300b 	ldrb.w	r3, [sp, #11]
    cc26:	b2db      	uxtb	r3, r3
    cc28:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    cc2c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    cc30:	2201      	movs	r2, #1
    cc32:	f7ff ff11 	bl	ca58 <Adc_Ipw_EndConversion>
    else
    {
        ; /* Empty else branch to avoid MISRA */
    }
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
}
    cc36:	bf00      	nop
    cc38:	b005      	add	sp, #20
    cc3a:	f85d fb04 	ldr.w	pc, [sp], #4
    cc3e:	bf00      	nop
    cc40:	1fff8d40 	.word	0x1fff8d40
    cc44:	1fff8d70 	.word	0x1fff8d70

0000cc48 <Adc_Ipw_Adc0EndConversionNotification>:
*
* @return         void
*
*/
void Adc_Ipw_Adc0EndConversionNotification(const uint8 ControlChanIdx)
{
    cc48:	b500      	push	{lr}
    cc4a:	b085      	sub	sp, #20
    cc4c:	4603      	mov	r3, r0
    cc4e:	f88d 3007 	strb.w	r3, [sp, #7]
    const Adc_HwUnitType PhysicalAdcUnit = 0U;
    cc52:	2300      	movs	r3, #0
    cc54:	f88d 300f 	strb.w	r3, [sp, #15]

    (void)ControlChanIdx;

    Adc_Ipw_EndConversionNotification(PhysicalAdcUnit);
    cc58:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cc5c:	4618      	mov	r0, r3
    cc5e:	f7ff ffb7 	bl	cbd0 <Adc_Ipw_EndConversionNotification>
}
    cc62:	bf00      	nop
    cc64:	b005      	add	sp, #20
    cc66:	f85d fb04 	ldr.w	pc, [sp], #4

0000cc6a <Adc_Ipw_Adc1EndConversionNotification>:
*
* @return         void
*
*/
void Adc_Ipw_Adc1EndConversionNotification(const uint8 ControlChanIdx)
{
    cc6a:	b500      	push	{lr}
    cc6c:	b085      	sub	sp, #20
    cc6e:	4603      	mov	r3, r0
    cc70:	f88d 3007 	strb.w	r3, [sp, #7]
    const Adc_HwUnitType PhysicalAdcUnit = 1U;
    cc74:	2301      	movs	r3, #1
    cc76:	f88d 300f 	strb.w	r3, [sp, #15]

    (void)ControlChanIdx;

    Adc_Ipw_EndConversionNotification(PhysicalAdcUnit);
    cc7a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cc7e:	4618      	mov	r0, r3
    cc80:	f7ff ffa6 	bl	cbd0 <Adc_Ipw_EndConversionNotification>
}
    cc84:	bf00      	nop
    cc86:	b005      	add	sp, #20
    cc88:	f85d fb04 	ldr.w	pc, [sp], #4

0000cc8c <Pdb_Adc_HwAcc_SetAdcPretriggerMask>:

static inline void Pdb_Adc_HwAcc_SetAdcPretriggerMask(PDB_Type * const Base,
                                                      const uint8 ChanIdx,
                                                      const uint32 Mask,
                                                      const boolean Value)
{
    cc8c:	b084      	sub	sp, #16
    cc8e:	9003      	str	r0, [sp, #12]
    cc90:	9201      	str	r2, [sp, #4]
    cc92:	461a      	mov	r2, r3
    cc94:	460b      	mov	r3, r1
    cc96:	f88d 300b 	strb.w	r3, [sp, #11]
    cc9a:	4613      	mov	r3, r2
    cc9c:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Set C1 register of a channel based on mask */
    if (Value == TRUE)
    cca0:	f89d 300a 	ldrb.w	r3, [sp, #10]
    cca4:	2b00      	cmp	r3, #0
    cca6:	d016      	beq.n	ccd6 <Pdb_Adc_HwAcc_SetAdcPretriggerMask+0x4a>
    {
        Base->CH[ChanIdx].C1 |= Mask;
    cca8:	f89d 200b 	ldrb.w	r2, [sp, #11]
    ccac:	9903      	ldr	r1, [sp, #12]
    ccae:	4613      	mov	r3, r2
    ccb0:	009b      	lsls	r3, r3, #2
    ccb2:	4413      	add	r3, r2
    ccb4:	00db      	lsls	r3, r3, #3
    ccb6:	440b      	add	r3, r1
    ccb8:	3310      	adds	r3, #16
    ccba:	6819      	ldr	r1, [r3, #0]
    ccbc:	f89d 200b 	ldrb.w	r2, [sp, #11]
    ccc0:	9b01      	ldr	r3, [sp, #4]
    ccc2:	4319      	orrs	r1, r3
    ccc4:	9803      	ldr	r0, [sp, #12]
    ccc6:	4613      	mov	r3, r2
    ccc8:	009b      	lsls	r3, r3, #2
    ccca:	4413      	add	r3, r2
    cccc:	00db      	lsls	r3, r3, #3
    ccce:	4403      	add	r3, r0
    ccd0:	3310      	adds	r3, #16
    ccd2:	6019      	str	r1, [r3, #0]
    }
    else
    {
        Base->CH[ChanIdx].C1 &= ~(Mask);
    }
}
    ccd4:	e016      	b.n	cd04 <Pdb_Adc_HwAcc_SetAdcPretriggerMask+0x78>
        Base->CH[ChanIdx].C1 &= ~(Mask);
    ccd6:	f89d 200b 	ldrb.w	r2, [sp, #11]
    ccda:	9903      	ldr	r1, [sp, #12]
    ccdc:	4613      	mov	r3, r2
    ccde:	009b      	lsls	r3, r3, #2
    cce0:	4413      	add	r3, r2
    cce2:	00db      	lsls	r3, r3, #3
    cce4:	440b      	add	r3, r1
    cce6:	3310      	adds	r3, #16
    cce8:	6819      	ldr	r1, [r3, #0]
    ccea:	9b01      	ldr	r3, [sp, #4]
    ccec:	43db      	mvns	r3, r3
    ccee:	f89d 200b 	ldrb.w	r2, [sp, #11]
    ccf2:	4019      	ands	r1, r3
    ccf4:	9803      	ldr	r0, [sp, #12]
    ccf6:	4613      	mov	r3, r2
    ccf8:	009b      	lsls	r3, r3, #2
    ccfa:	4413      	add	r3, r2
    ccfc:	00db      	lsls	r3, r3, #3
    ccfe:	4403      	add	r3, r0
    cd00:	3310      	adds	r3, #16
    cd02:	6019      	str	r1, [r3, #0]
}
    cd04:	bf00      	nop
    cd06:	b004      	add	sp, #16
    cd08:	4770      	bx	lr

0000cd0a <Pdb_Adc_HwAcc_DisablePdb>:

static inline void Pdb_Adc_HwAcc_DisablePdb(PDB_Type * const Base)
{
    cd0a:	b082      	sub	sp, #8
    cd0c:	9001      	str	r0, [sp, #4]
    /* Disable PDB by clearing PDBEN bit of SC register */
    Base->SC &= ~(PDB_SC_PDBEN_MASK);
    cd0e:	9b01      	ldr	r3, [sp, #4]
    cd10:	681b      	ldr	r3, [r3, #0]
    cd12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    cd16:	9b01      	ldr	r3, [sp, #4]
    cd18:	601a      	str	r2, [r3, #0]
}
    cd1a:	bf00      	nop
    cd1c:	b002      	add	sp, #8
    cd1e:	4770      	bx	lr

0000cd20 <Pdb_Adc_HwAcc_SetContinuousMode>:

static inline void Pdb_Adc_HwAcc_SetContinuousMode(PDB_Type * const Base,
                                                   const boolean State)
{
    cd20:	b082      	sub	sp, #8
    cd22:	9001      	str	r0, [sp, #4]
    cd24:	460b      	mov	r3, r1
    cd26:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Update ContinuousMode value found in SC register */
    if (State == TRUE)
    cd2a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cd2e:	2b00      	cmp	r3, #0
    cd30:	d006      	beq.n	cd40 <Pdb_Adc_HwAcc_SetContinuousMode+0x20>
    {
        Base->SC |= PDB_SC_CONT_MASK;
    cd32:	9b01      	ldr	r3, [sp, #4]
    cd34:	681b      	ldr	r3, [r3, #0]
    cd36:	f043 0202 	orr.w	r2, r3, #2
    cd3a:	9b01      	ldr	r3, [sp, #4]
    cd3c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        Base->SC &= ~(PDB_SC_CONT_MASK);
    }
}
    cd3e:	e005      	b.n	cd4c <Pdb_Adc_HwAcc_SetContinuousMode+0x2c>
        Base->SC &= ~(PDB_SC_CONT_MASK);
    cd40:	9b01      	ldr	r3, [sp, #4]
    cd42:	681b      	ldr	r3, [r3, #0]
    cd44:	f023 0202 	bic.w	r2, r3, #2
    cd48:	9b01      	ldr	r3, [sp, #4]
    cd4a:	601a      	str	r2, [r3, #0]
}
    cd4c:	bf00      	nop
    cd4e:	b002      	add	sp, #8
    cd50:	4770      	bx	lr

0000cd52 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>:

static inline void Pdb_Adc_HwAcc_ConfigAdcPretriggers(PDB_Type * const Base,
                                                      const uint8 ChanIdx,
                                                      const Pdb_Adc_Ip_PretriggersConfigType * const Config)
{
    cd52:	b086      	sub	sp, #24
    cd54:	9003      	str	r0, [sp, #12]
    cd56:	460b      	mov	r3, r1
    cd58:	9201      	str	r2, [sp, #4]
    cd5a:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Configure all channel's pretriggers by updating all fields of the C1 register */
    uint32 C1Reg = Base->CH[ChanIdx].C1;
    cd5e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    cd62:	9903      	ldr	r1, [sp, #12]
    cd64:	4613      	mov	r3, r2
    cd66:	009b      	lsls	r3, r3, #2
    cd68:	4413      	add	r3, r2
    cd6a:	00db      	lsls	r3, r3, #3
    cd6c:	440b      	add	r3, r1
    cd6e:	3310      	adds	r3, #16
    cd70:	681b      	ldr	r3, [r3, #0]
    cd72:	9305      	str	r3, [sp, #20]
    C1Reg &= ~(PDB_C1_EN_MASK | PDB_C1_TOS_MASK | PDB_C1_BB_MASK);
    cd74:	9b05      	ldr	r3, [sp, #20]
    cd76:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    cd7a:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_EN(Config->EnableMask);
    cd7c:	9b01      	ldr	r3, [sp, #4]
    cd7e:	781b      	ldrb	r3, [r3, #0]
    cd80:	461a      	mov	r2, r3
    cd82:	9b05      	ldr	r3, [sp, #20]
    cd84:	4313      	orrs	r3, r2
    cd86:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_TOS(Config->EnableDelayMask);
    cd88:	9b01      	ldr	r3, [sp, #4]
    cd8a:	785b      	ldrb	r3, [r3, #1]
    cd8c:	021b      	lsls	r3, r3, #8
    cd8e:	b29b      	uxth	r3, r3
    cd90:	9a05      	ldr	r2, [sp, #20]
    cd92:	4313      	orrs	r3, r2
    cd94:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_BB(Config->BackToBackEnableMask);
    cd96:	9b01      	ldr	r3, [sp, #4]
    cd98:	789b      	ldrb	r3, [r3, #2]
    cd9a:	041b      	lsls	r3, r3, #16
    cd9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    cda0:	9a05      	ldr	r2, [sp, #20]
    cda2:	4313      	orrs	r3, r2
    cda4:	9305      	str	r3, [sp, #20]
    Base->CH[ChanIdx].C1 = C1Reg;
    cda6:	f89d 200b 	ldrb.w	r2, [sp, #11]
    cdaa:	9903      	ldr	r1, [sp, #12]
    cdac:	4613      	mov	r3, r2
    cdae:	009b      	lsls	r3, r3, #2
    cdb0:	4413      	add	r3, r2
    cdb2:	00db      	lsls	r3, r3, #3
    cdb4:	440b      	add	r3, r1
    cdb6:	3310      	adds	r3, #16
    cdb8:	9a05      	ldr	r2, [sp, #20]
    cdba:	601a      	str	r2, [r3, #0]
}
    cdbc:	bf00      	nop
    cdbe:	b006      	add	sp, #24
    cdc0:	4770      	bx	lr

0000cdc2 <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>:

static inline void Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(PDB_Type * const Base,
                                                         const uint8 ChanIdx,
                                                         const uint16 PretriggMask)
{
    cdc2:	b082      	sub	sp, #8
    cdc4:	9001      	str	r0, [sp, #4]
    cdc6:	460b      	mov	r3, r1
    cdc8:	f88d 3003 	strb.w	r3, [sp, #3]
    cdcc:	4613      	mov	r3, r2
    cdce:	f8ad 3000 	strh.w	r3, [sp]
    /* Clear pretrigger status flags found in S register based on PretriggMask */
    Base->CH[ChanIdx].S &= ~PDB_S_CF(PretriggMask);
    cdd2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    cdd6:	9901      	ldr	r1, [sp, #4]
    cdd8:	4613      	mov	r3, r2
    cdda:	009b      	lsls	r3, r3, #2
    cddc:	4413      	add	r3, r2
    cdde:	00db      	lsls	r3, r3, #3
    cde0:	440b      	add	r3, r1
    cde2:	3314      	adds	r3, #20
    cde4:	6819      	ldr	r1, [r3, #0]
    cde6:	f8bd 3000 	ldrh.w	r3, [sp]
    cdea:	041b      	lsls	r3, r3, #16
    cdec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    cdf0:	43db      	mvns	r3, r3
    cdf2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    cdf6:	4019      	ands	r1, r3
    cdf8:	9801      	ldr	r0, [sp, #4]
    cdfa:	4613      	mov	r3, r2
    cdfc:	009b      	lsls	r3, r3, #2
    cdfe:	4413      	add	r3, r2
    ce00:	00db      	lsls	r3, r3, #3
    ce02:	4403      	add	r3, r0
    ce04:	3314      	adds	r3, #20
    ce06:	6019      	str	r1, [r3, #0]
}
    ce08:	bf00      	nop
    ce0a:	b002      	add	sp, #8
    ce0c:	4770      	bx	lr

0000ce0e <Pdb_Adc_Ip_Init>:
*
* @implements     Pdb_Adc_Ip_Init_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Init(const uint32 Instance,
                     const Pdb_Adc_Ip_ConfigType * const Config)
{
    ce0e:	b500      	push	{lr}
    ce10:	b087      	sub	sp, #28
    ce12:	9001      	str	r0, [sp, #4]
    ce14:	9100      	str	r1, [sp, #0]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ce16:	4a50      	ldr	r2, [pc, #320]	; (cf58 <Pdb_Adc_Ip_Init+0x14a>)
    ce18:	9b01      	ldr	r3, [sp, #4]
    ce1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce1e:	9303      	str	r3, [sp, #12]
    uint8 ChannelIndex;
    uint8 PretriggerIndex;
    uint32 Reg = 0u;
    ce20:	2300      	movs	r3, #0
    ce22:	9304      	str	r3, [sp, #16]

    Reg |= PDB_SC_LDMOD(Config->LoadValueMode);
    ce24:	9b00      	ldr	r3, [sp, #0]
    ce26:	681b      	ldr	r3, [r3, #0]
    ce28:	049b      	lsls	r3, r3, #18
    ce2a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
    ce2e:	9a04      	ldr	r2, [sp, #16]
    ce30:	4313      	orrs	r3, r2
    ce32:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_PRESCALER(Config->PrescalerDiv);
    ce34:	9b00      	ldr	r3, [sp, #0]
    ce36:	685b      	ldr	r3, [r3, #4]
    ce38:	031b      	lsls	r3, r3, #12
    ce3a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    ce3e:	9a04      	ldr	r2, [sp, #16]
    ce40:	4313      	orrs	r3, r2
    ce42:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_MULT(Config->ClkPreMultFactor);
    ce44:	9b00      	ldr	r3, [sp, #0]
    ce46:	689b      	ldr	r3, [r3, #8]
    ce48:	009b      	lsls	r3, r3, #2
    ce4a:	f003 030c 	and.w	r3, r3, #12
    ce4e:	9a04      	ldr	r2, [sp, #16]
    ce50:	4313      	orrs	r3, r2
    ce52:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_TRGSEL(Config->TriggerSource);
    ce54:	9b00      	ldr	r3, [sp, #0]
    ce56:	68db      	ldr	r3, [r3, #12]
    ce58:	021b      	lsls	r3, r3, #8
    ce5a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    ce5e:	9a04      	ldr	r2, [sp, #16]
    ce60:	4313      	orrs	r3, r2
    ce62:	9304      	str	r3, [sp, #16]

    if (Config->ContinuousModeEnable == TRUE)
    ce64:	9b00      	ldr	r3, [sp, #0]
    ce66:	7c1b      	ldrb	r3, [r3, #16]
    ce68:	2b00      	cmp	r3, #0
    ce6a:	d003      	beq.n	ce74 <Pdb_Adc_Ip_Init+0x66>
    {
        Reg |= PDB_SC_CONT_MASK;
    ce6c:	9b04      	ldr	r3, [sp, #16]
    ce6e:	f043 0302 	orr.w	r3, r3, #2
    ce72:	9304      	str	r3, [sp, #16]
    }
    if (Config->DmaEnable == TRUE)
    ce74:	9b00      	ldr	r3, [sp, #0]
    ce76:	7c5b      	ldrb	r3, [r3, #17]
    ce78:	2b00      	cmp	r3, #0
    ce7a:	d003      	beq.n	ce84 <Pdb_Adc_Ip_Init+0x76>
    {
        Reg |= PDB_SC_DMAEN_MASK;
    ce7c:	9b04      	ldr	r3, [sp, #16]
    ce7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    ce82:	9304      	str	r3, [sp, #16]
    }
    if (Config->SeqErrNotification != NULL_PTR)
    ce84:	9b00      	ldr	r3, [sp, #0]
    ce86:	69db      	ldr	r3, [r3, #28]
    ce88:	2b00      	cmp	r3, #0
    ce8a:	d003      	beq.n	ce94 <Pdb_Adc_Ip_Init+0x86>
    {
        Reg |= PDB_SC_PDBEIE_MASK;
    ce8c:	9b04      	ldr	r3, [sp, #16]
    ce8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    ce92:	9304      	str	r3, [sp, #16]
    }

    Base->SC = Reg;
    ce94:	9b03      	ldr	r3, [sp, #12]
    ce96:	9a04      	ldr	r2, [sp, #16]
    ce98:	601a      	str	r2, [r3, #0]
#endif /* (STD_ON == FEATURE_PDB_HAS_INSTANCE_BACKTOBACK) */
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
    PDB_ADC_ConfigInterChannelBackToBack(Instance, Config->InterChannelBackToBackEnable);
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */

    Pdb_Adc_Ip_SetModulus(Instance, Config->ModValue);
    ce9a:	9b00      	ldr	r3, [sp, #0]
    ce9c:	8a5b      	ldrh	r3, [r3, #18]
    ce9e:	4619      	mov	r1, r3
    cea0:	9801      	ldr	r0, [sp, #4]
    cea2:	f000 f98f 	bl	d1c4 <Pdb_Adc_Ip_SetModulus>

    if ((Config->NumChans > 0u) && (Config->ChanConfigs != NULL_PTR))
    cea6:	9b00      	ldr	r3, [sp, #0]
    cea8:	7d1b      	ldrb	r3, [r3, #20]
    ceaa:	2b00      	cmp	r3, #0
    ceac:	d03e      	beq.n	cf2c <Pdb_Adc_Ip_Init+0x11e>
    ceae:	9b00      	ldr	r3, [sp, #0]
    ceb0:	699b      	ldr	r3, [r3, #24]
    ceb2:	2b00      	cmp	r3, #0
    ceb4:	d03a      	beq.n	cf2c <Pdb_Adc_Ip_Init+0x11e>
    {
        for (ChannelIndex = 0u; ChannelIndex < Config->NumChans; ChannelIndex++)
    ceb6:	2300      	movs	r3, #0
    ceb8:	f88d 3017 	strb.w	r3, [sp, #23]
    cebc:	e030      	b.n	cf20 <Pdb_Adc_Ip_Init+0x112>
        {
            const Pdb_Adc_Ip_ChanConfigType * ChanConfig = &(Config->ChanConfigs[ChannelIndex]);
    cebe:	9b00      	ldr	r3, [sp, #0]
    cec0:	6999      	ldr	r1, [r3, #24]
    cec2:	f89d 2017 	ldrb.w	r2, [sp, #23]
    cec6:	4613      	mov	r3, r2
    cec8:	009b      	lsls	r3, r3, #2
    ceca:	4413      	add	r3, r2
    cecc:	009b      	lsls	r3, r3, #2
    cece:	440b      	add	r3, r1
    ced0:	9302      	str	r3, [sp, #8]
            Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanConfig->ChnIdx, &(ChanConfig->PretriggersConfig));
    ced2:	9b02      	ldr	r3, [sp, #8]
    ced4:	7819      	ldrb	r1, [r3, #0]
    ced6:	9b02      	ldr	r3, [sp, #8]
    ced8:	3301      	adds	r3, #1
    ceda:	461a      	mov	r2, r3
    cedc:	9803      	ldr	r0, [sp, #12]
    cede:	f7ff ff38 	bl	cd52 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
            for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    cee2:	2300      	movs	r3, #0
    cee4:	f88d 3016 	strb.w	r3, [sp, #22]
    cee8:	e011      	b.n	cf0e <Pdb_Adc_Ip_Init+0x100>
            {
                Pdb_Adc_Ip_SetAdcPretriggerDelayValue(Instance, ChanConfig->ChnIdx, PretriggerIndex, ChanConfig->PretriggerDelays[PretriggerIndex]);
    ceea:	9b02      	ldr	r3, [sp, #8]
    ceec:	7819      	ldrb	r1, [r3, #0]
    ceee:	f89d 3016 	ldrb.w	r3, [sp, #22]
    cef2:	9a02      	ldr	r2, [sp, #8]
    cef4:	005b      	lsls	r3, r3, #1
    cef6:	4413      	add	r3, r2
    cef8:	889b      	ldrh	r3, [r3, #4]
    cefa:	f89d 2016 	ldrb.w	r2, [sp, #22]
    cefe:	9801      	ldr	r0, [sp, #4]
    cf00:	f000 fa74 	bl	d3ec <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
            for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    cf04:	f89d 3016 	ldrb.w	r3, [sp, #22]
    cf08:	3301      	adds	r3, #1
    cf0a:	f88d 3016 	strb.w	r3, [sp, #22]
    cf0e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    cf12:	2b07      	cmp	r3, #7
    cf14:	d9e9      	bls.n	ceea <Pdb_Adc_Ip_Init+0xdc>
        for (ChannelIndex = 0u; ChannelIndex < Config->NumChans; ChannelIndex++)
    cf16:	f89d 3017 	ldrb.w	r3, [sp, #23]
    cf1a:	3301      	adds	r3, #1
    cf1c:	f88d 3017 	strb.w	r3, [sp, #23]
    cf20:	9b00      	ldr	r3, [sp, #0]
    cf22:	7d1b      	ldrb	r3, [r3, #20]
    cf24:	f89d 2017 	ldrb.w	r2, [sp, #23]
    cf28:	429a      	cmp	r2, r3
    cf2a:	d3c8      	bcc.n	cebe <Pdb_Adc_Ip_Init+0xb0>
            }
        }
    }

    Pdb_Adc_Ip_Enable(Instance);
    cf2c:	9801      	ldr	r0, [sp, #4]
    cf2e:	f000 f89b 	bl	d068 <Pdb_Adc_Ip_Enable>

    /* Modulus and pretrigger delay values require call to LoadRegValues */
    Pdb_Adc_Ip_LoadRegValues(Instance);
    cf32:	9801      	ldr	r0, [sp, #4]
    cf34:	f000 f92e 	bl	d194 <Pdb_Adc_Ip_LoadRegValues>

    Pdb_Adc_Ip_axState[Instance].SeqErrNotification = Config->SeqErrNotification;
    cf38:	9b00      	ldr	r3, [sp, #0]
    cf3a:	69da      	ldr	r2, [r3, #28]
    cf3c:	4907      	ldr	r1, [pc, #28]	; (cf5c <Pdb_Adc_Ip_Init+0x14e>)
    cf3e:	9b01      	ldr	r3, [sp, #4]
    cf40:	00db      	lsls	r3, r3, #3
    cf42:	440b      	add	r3, r1
    cf44:	605a      	str	r2, [r3, #4]
    Pdb_Adc_Ip_axState[Instance].Init = TRUE;
    cf46:	4a05      	ldr	r2, [pc, #20]	; (cf5c <Pdb_Adc_Ip_Init+0x14e>)
    cf48:	9b01      	ldr	r3, [sp, #4]
    cf4a:	2101      	movs	r1, #1
    cf4c:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
    cf50:	bf00      	nop
    cf52:	b007      	add	sp, #28
    cf54:	f85d fb04 	ldr.w	pc, [sp], #4
    cf58:	000197f8 	.word	0x000197f8
    cf5c:	1fff8e18 	.word	0x1fff8e18

0000cf60 <Pdb_Adc_Ip_DeInit>:
* This function disables it, so affects all other instances.
*
* @implements     Pdb_Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_DeInit(const uint32 Instance)
{
    cf60:	b500      	push	{lr}
    cf62:	b097      	sub	sp, #92	; 0x5c
    cf64:	9001      	str	r0, [sp, #4]

    Pdb_Adc_Ip_ConfigType DefaultConfig;
    Pdb_Adc_Ip_ChanConfigType ChanConfigs[PDB_CH_COUNT];
    uint8 ChannelIndex, PretriggerIndex;

    DefaultConfig.LoadValueMode = PDB_ADC_IP_LOAD_VAL_IMMEDIATELY;
    cf66:	2300      	movs	r3, #0
    cf68:	930d      	str	r3, [sp, #52]	; 0x34
    DefaultConfig.PrescalerDiv = PDB_ADC_IP_CLK_PREDIV_BY_1;
    cf6a:	2300      	movs	r3, #0
    cf6c:	930e      	str	r3, [sp, #56]	; 0x38
    DefaultConfig.ClkPreMultFactor = PDB_ADC_IP_CLK_PREMULT_FACT_AS_1;
    cf6e:	2300      	movs	r3, #0
    cf70:	930f      	str	r3, [sp, #60]	; 0x3c
    DefaultConfig.TriggerSource = PDB_ADC_IP_TRIGGER_IN0;
    cf72:	2300      	movs	r3, #0
    cf74:	9310      	str	r3, [sp, #64]	; 0x40
    DefaultConfig.ContinuousModeEnable = FALSE;
    cf76:	2300      	movs	r3, #0
    cf78:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    DefaultConfig.DmaEnable = FALSE;
    cf7c:	2300      	movs	r3, #0
    cf7e:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    DefaultConfig.ModValue = 0u;
    cf82:	2300      	movs	r3, #0
    cf84:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
    DefaultConfig.InterChannelBackToBackEnable = FALSE;
    PDB_ADC_ConfigInterChannelBackToBack(Instance, DefaultConfig.InterChannelBackToBackEnable);
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */

    DefaultConfig.NumChans = PDB_CH_COUNT;
    cf88:	2302      	movs	r3, #2
    cf8a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    for (ChannelIndex = 0u; ChannelIndex < PDB_CH_COUNT; ChannelIndex++)
    cf8e:	2300      	movs	r3, #0
    cf90:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    cf94:	e04d      	b.n	d032 <Pdb_Adc_Ip_DeInit+0xd2>
    {
        ChanConfigs[ChannelIndex].ChnIdx = ChannelIndex;
    cf96:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    cf9a:	4613      	mov	r3, r2
    cf9c:	009b      	lsls	r3, r3, #2
    cf9e:	4413      	add	r3, r2
    cfa0:	009b      	lsls	r3, r3, #2
    cfa2:	aa16      	add	r2, sp, #88	; 0x58
    cfa4:	4413      	add	r3, r2
    cfa6:	3b4c      	subs	r3, #76	; 0x4c
    cfa8:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    cfac:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.EnableMask = 0u;
    cfae:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    cfb2:	4613      	mov	r3, r2
    cfb4:	009b      	lsls	r3, r3, #2
    cfb6:	4413      	add	r3, r2
    cfb8:	009b      	lsls	r3, r3, #2
    cfba:	aa16      	add	r2, sp, #88	; 0x58
    cfbc:	4413      	add	r3, r2
    cfbe:	3b4b      	subs	r3, #75	; 0x4b
    cfc0:	2200      	movs	r2, #0
    cfc2:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.EnableDelayMask = 0u;
    cfc4:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    cfc8:	4613      	mov	r3, r2
    cfca:	009b      	lsls	r3, r3, #2
    cfcc:	4413      	add	r3, r2
    cfce:	009b      	lsls	r3, r3, #2
    cfd0:	aa16      	add	r2, sp, #88	; 0x58
    cfd2:	4413      	add	r3, r2
    cfd4:	3b4a      	subs	r3, #74	; 0x4a
    cfd6:	2200      	movs	r2, #0
    cfd8:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.BackToBackEnableMask = 0u;
    cfda:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    cfde:	4613      	mov	r3, r2
    cfe0:	009b      	lsls	r3, r3, #2
    cfe2:	4413      	add	r3, r2
    cfe4:	009b      	lsls	r3, r3, #2
    cfe6:	aa16      	add	r2, sp, #88	; 0x58
    cfe8:	4413      	add	r3, r2
    cfea:	3b49      	subs	r3, #73	; 0x49
    cfec:	2200      	movs	r2, #0
    cfee:	701a      	strb	r2, [r3, #0]
        for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    cff0:	2300      	movs	r3, #0
    cff2:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    cff6:	e013      	b.n	d020 <Pdb_Adc_Ip_DeInit+0xc0>
        {
            ChanConfigs[ChannelIndex].PretriggerDelays[PretriggerIndex] = 0u;
    cff8:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    cffc:	f89d 1056 	ldrb.w	r1, [sp, #86]	; 0x56
    d000:	4613      	mov	r3, r2
    d002:	009b      	lsls	r3, r3, #2
    d004:	4413      	add	r3, r2
    d006:	005b      	lsls	r3, r3, #1
    d008:	440b      	add	r3, r1
    d00a:	005b      	lsls	r3, r3, #1
    d00c:	aa16      	add	r2, sp, #88	; 0x58
    d00e:	4413      	add	r3, r2
    d010:	2200      	movs	r2, #0
    d012:	f823 2c48 	strh.w	r2, [r3, #-72]
        for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    d016:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    d01a:	3301      	adds	r3, #1
    d01c:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    d020:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    d024:	2b07      	cmp	r3, #7
    d026:	d9e7      	bls.n	cff8 <Pdb_Adc_Ip_DeInit+0x98>
    for (ChannelIndex = 0u; ChannelIndex < PDB_CH_COUNT; ChannelIndex++)
    d028:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
    d02c:	3301      	adds	r3, #1
    d02e:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    d032:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
    d036:	2b01      	cmp	r3, #1
    d038:	d9ad      	bls.n	cf96 <Pdb_Adc_Ip_DeInit+0x36>
        }
    }
    DefaultConfig.ChanConfigs = ChanConfigs;
    d03a:	ab03      	add	r3, sp, #12
    d03c:	9313      	str	r3, [sp, #76]	; 0x4c
    DefaultConfig.SeqErrNotification = NULL_PTR;
    d03e:	2300      	movs	r3, #0
    d040:	9314      	str	r3, [sp, #80]	; 0x50

    Pdb_Adc_Ip_Init(Instance, &DefaultConfig);
    d042:	ab0d      	add	r3, sp, #52	; 0x34
    d044:	4619      	mov	r1, r3
    d046:	9801      	ldr	r0, [sp, #4]
    d048:	f7ff fee1 	bl	ce0e <Pdb_Adc_Ip_Init>

    Pdb_Adc_Ip_Disable(Instance);
    d04c:	9801      	ldr	r0, [sp, #4]
    d04e:	f000 f823 	bl	d098 <Pdb_Adc_Ip_Disable>

    Pdb_Adc_Ip_axState[Instance].Init = FALSE;
    d052:	4a04      	ldr	r2, [pc, #16]	; (d064 <Pdb_Adc_Ip_DeInit+0x104>)
    d054:	9b01      	ldr	r3, [sp, #4]
    d056:	2100      	movs	r1, #0
    d058:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
    d05c:	bf00      	nop
    d05e:	b017      	add	sp, #92	; 0x5c
    d060:	f85d fb04 	ldr.w	pc, [sp], #4
    d064:	1fff8e18 	.word	0x1fff8e18

0000d068 <Pdb_Adc_Ip_Enable>:
* Description   : This function enables the PDB module, counter is on.
*
* @implements     Pdb_Adc_Ip_Enable_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Enable(const uint32 Instance)
{
    d068:	b500      	push	{lr}
    d06a:	b085      	sub	sp, #20
    d06c:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d06e:	4a09      	ldr	r2, [pc, #36]	; (d094 <Pdb_Adc_Ip_Enable+0x2c>)
    d070:	9b01      	ldr	r3, [sp, #4]
    d072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d076:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34();
    d078:	f005 fe40 	bl	12cfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>
    Base->SC |= PDB_SC_PDBEN_MASK;
    d07c:	9b03      	ldr	r3, [sp, #12]
    d07e:	681b      	ldr	r3, [r3, #0]
    d080:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    d084:	9b03      	ldr	r3, [sp, #12]
    d086:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34();
    d088:	f005 fe64 	bl	12d54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>
}
    d08c:	bf00      	nop
    d08e:	b005      	add	sp, #20
    d090:	f85d fb04 	ldr.w	pc, [sp], #4
    d094:	000197f8 	.word	0x000197f8

0000d098 <Pdb_Adc_Ip_Disable>:
* Description   : This function disables the PDB module, counter is off.
*
* @implements     Pdb_Adc_Ip_Disable_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Disable(const uint32 Instance)
{
    d098:	b500      	push	{lr}
    d09a:	b085      	sub	sp, #20
    d09c:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d09e:	4a08      	ldr	r2, [pc, #32]	; (d0c0 <Pdb_Adc_Ip_Disable+0x28>)
    d0a0:	9b01      	ldr	r3, [sp, #4]
    d0a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0a6:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35();
    d0a8:	f005 fe7a 	bl	12da0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>
    Pdb_Adc_HwAcc_DisablePdb(Base);
    d0ac:	9803      	ldr	r0, [sp, #12]
    d0ae:	f7ff fe2c 	bl	cd0a <Pdb_Adc_HwAcc_DisablePdb>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35();
    d0b2:	f005 fea1 	bl	12df8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>
}
    d0b6:	bf00      	nop
    d0b8:	b005      	add	sp, #20
    d0ba:	f85d fb04 	ldr.w	pc, [sp], #4
    d0be:	bf00      	nop
    d0c0:	000197f8 	.word	0x000197f8

0000d0c4 <Pdb_Adc_Ip_SetTriggerInput>:
*
* @implements     Pdb_Adc_Ip_SetTriggerInput_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetTriggerInput(const uint32 Instance,
                                const Pdb_Adc_Ip_TriggerSrcType TriggerSource)
{
    d0c4:	b500      	push	{lr}
    d0c6:	b085      	sub	sp, #20
    d0c8:	9001      	str	r0, [sp, #4]
    d0ca:	9100      	str	r1, [sp, #0]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d0cc:	4a0e      	ldr	r2, [pc, #56]	; (d108 <Pdb_Adc_Ip_SetTriggerInput+0x44>)
    d0ce:	9b01      	ldr	r3, [sp, #4]
    d0d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0d4:	9303      	str	r3, [sp, #12]
    uint32 SCReg;

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36();
    d0d6:	f005 feb5 	bl	12e44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>
    SCReg = Base->SC;
    d0da:	9b03      	ldr	r3, [sp, #12]
    d0dc:	681b      	ldr	r3, [r3, #0]
    d0de:	9302      	str	r3, [sp, #8]
    SCReg &= ~(PDB_SC_TRGSEL_MASK);
    d0e0:	9b02      	ldr	r3, [sp, #8]
    d0e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    d0e6:	9302      	str	r3, [sp, #8]
    SCReg |= PDB_SC_TRGSEL(TriggerSource);
    d0e8:	9b00      	ldr	r3, [sp, #0]
    d0ea:	021b      	lsls	r3, r3, #8
    d0ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    d0f0:	9a02      	ldr	r2, [sp, #8]
    d0f2:	4313      	orrs	r3, r2
    d0f4:	9302      	str	r3, [sp, #8]
    Base->SC = SCReg;
    d0f6:	9b03      	ldr	r3, [sp, #12]
    d0f8:	9a02      	ldr	r2, [sp, #8]
    d0fa:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36();
    d0fc:	f005 fece 	bl	12e9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>
}
    d100:	bf00      	nop
    d102:	b005      	add	sp, #20
    d104:	f85d fb04 	ldr.w	pc, [sp], #4
    d108:	000197f8 	.word	0x000197f8

0000d10c <Pdb_Adc_Ip_SetContinuousMode>:
*
* @implements     Pdb_Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetContinuousMode(const uint32 Instance,
                                  const boolean State)
{
    d10c:	b500      	push	{lr}
    d10e:	b085      	sub	sp, #20
    d110:	9001      	str	r0, [sp, #4]
    d112:	460b      	mov	r3, r1
    d114:	f88d 3003 	strb.w	r3, [sp, #3]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d118:	4a09      	ldr	r2, [pc, #36]	; (d140 <Pdb_Adc_Ip_SetContinuousMode+0x34>)
    d11a:	9b01      	ldr	r3, [sp, #4]
    d11c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d120:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37();
    d122:	f005 fee1 	bl	12ee8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>
    Pdb_Adc_HwAcc_SetContinuousMode(Base, State);
    d126:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d12a:	4619      	mov	r1, r3
    d12c:	9803      	ldr	r0, [sp, #12]
    d12e:	f7ff fdf7 	bl	cd20 <Pdb_Adc_HwAcc_SetContinuousMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37();
    d132:	f005 ff05 	bl	12f40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>
}
    d136:	bf00      	nop
    d138:	b005      	add	sp, #20
    d13a:	f85d fb04 	ldr.w	pc, [sp], #4
    d13e:	bf00      	nop
    d140:	000197f8 	.word	0x000197f8

0000d144 <Pdb_Adc_Ip_SwTrigger>:
* triggers the PDB.
*
* @implements     Pdb_Adc_Ip_SwTrigger_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SwTrigger(const uint32 Instance)
{
    d144:	b500      	push	{lr}
    d146:	b085      	sub	sp, #20
    d148:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d14a:	4a09      	ldr	r2, [pc, #36]	; (d170 <Pdb_Adc_Ip_SwTrigger+0x2c>)
    d14c:	9b01      	ldr	r3, [sp, #4]
    d14e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d152:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38();
    d154:	f005 ff1a 	bl	12f8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>
    Base->SC |= PDB_SC_SWTRIG_MASK;
    d158:	9b03      	ldr	r3, [sp, #12]
    d15a:	681b      	ldr	r3, [r3, #0]
    d15c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    d160:	9b03      	ldr	r3, [sp, #12]
    d162:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38();
    d164:	f005 ff3e 	bl	12fe4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>
}
    d168:	bf00      	nop
    d16a:	b005      	add	sp, #20
    d16c:	f85d fb04 	ldr.w	pc, [sp], #4
    d170:	000197f8 	.word	0x000197f8

0000d174 <Pdb_Adc_Ip_GetTimerValue>:
* Description   : This function gets the current counter value.
*
* @implements     Pdb_Adc_Ip_GetTimerValue_Activity
* END**************************************************************************/
uint32 Pdb_Adc_Ip_GetTimerValue(const uint32 Instance)
{
    d174:	b084      	sub	sp, #16
    d176:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d178:	4a05      	ldr	r2, [pc, #20]	; (d190 <Pdb_Adc_Ip_GetTimerValue+0x1c>)
    d17a:	9b01      	ldr	r3, [sp, #4]
    d17c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d180:	9303      	str	r3, [sp, #12]

    return ((Base->CNT & PDB_CNT_CNT_MASK) >> PDB_CNT_CNT_SHIFT);
    d182:	9b03      	ldr	r3, [sp, #12]
    d184:	689b      	ldr	r3, [r3, #8]
    d186:	b29b      	uxth	r3, r3
}
    d188:	4618      	mov	r0, r3
    d18a:	b004      	add	sp, #16
    d18c:	4770      	bx	lr
    d18e:	bf00      	nop
    d190:	000197f8 	.word	0x000197f8

0000d194 <Pdb_Adc_Ip_LoadRegValues>:
* internal registers or when the PDB is disabled.
*
* @implements     Pdb_Adc_Ip_LoadRegValues_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_LoadRegValues(const uint32 Instance)
{
    d194:	b500      	push	{lr}
    d196:	b085      	sub	sp, #20
    d198:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d19a:	4a09      	ldr	r2, [pc, #36]	; (d1c0 <Pdb_Adc_Ip_LoadRegValues+0x2c>)
    d19c:	9b01      	ldr	r3, [sp, #4]
    d19e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1a2:	9303      	str	r3, [sp, #12]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    /* PDB must be enabled in order to load register values */
    DevAssert((Base->SC & PDB_SC_PDBEN_MASK) != 0u);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39();
    d1a4:	f005 ff44 	bl	13030 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>
    Base->SC |= PDB_SC_LDOK_MASK;
    d1a8:	9b03      	ldr	r3, [sp, #12]
    d1aa:	681b      	ldr	r3, [r3, #0]
    d1ac:	f043 0201 	orr.w	r2, r3, #1
    d1b0:	9b03      	ldr	r3, [sp, #12]
    d1b2:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39();
    d1b4:	f005 ff68 	bl	13088 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>
}
    d1b8:	bf00      	nop
    d1ba:	b005      	add	sp, #20
    d1bc:	f85d fb04 	ldr.w	pc, [sp], #4
    d1c0:	000197f8 	.word	0x000197f8

0000d1c4 <Pdb_Adc_Ip_SetModulus>:
*
* @implements     Pdb_Adc_Ip_SetModulus_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetModulus(const uint32 Instance,
                           const uint16 ModVal)
{
    d1c4:	b500      	push	{lr}
    d1c6:	b085      	sub	sp, #20
    d1c8:	9001      	str	r0, [sp, #4]
    d1ca:	460b      	mov	r3, r1
    d1cc:	f8ad 3002 	strh.w	r3, [sp, #2]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d1d0:	4a0d      	ldr	r2, [pc, #52]	; (d208 <Pdb_Adc_Ip_SetModulus+0x44>)
    d1d2:	9b01      	ldr	r3, [sp, #4]
    d1d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1d8:	9303      	str	r3, [sp, #12]
    uint32 ModReg;

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48();
    d1da:	f006 fa0b 	bl	135f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>
    ModReg = Base->MOD;
    d1de:	9b03      	ldr	r3, [sp, #12]
    d1e0:	685b      	ldr	r3, [r3, #4]
    d1e2:	9302      	str	r3, [sp, #8]
    ModReg &= ~(PDB_MOD_MOD_MASK);
    d1e4:	9b02      	ldr	r3, [sp, #8]
    d1e6:	0c1b      	lsrs	r3, r3, #16
    d1e8:	041b      	lsls	r3, r3, #16
    d1ea:	9302      	str	r3, [sp, #8]
    ModReg |= PDB_MOD_MOD(ModVal);
    d1ec:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    d1f0:	9a02      	ldr	r2, [sp, #8]
    d1f2:	4313      	orrs	r3, r2
    d1f4:	9302      	str	r3, [sp, #8]
    Base->MOD = ModReg;
    d1f6:	9b03      	ldr	r3, [sp, #12]
    d1f8:	9a02      	ldr	r2, [sp, #8]
    d1fa:	605a      	str	r2, [r3, #4]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48();
    d1fc:	f006 fa26 	bl	1364c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>
}
    d200:	bf00      	nop
    d202:	b005      	add	sp, #20
    d204:	f85d fb04 	ldr.w	pc, [sp], #4
    d208:	000197f8 	.word	0x000197f8

0000d20c <Pdb_Adc_Ip_ConfigAdcPretriggers>:
* @implements     Pdb_Adc_Ip_ConfigAdcPretriggers_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_ConfigAdcPretriggers(const uint32 Instance,
                                     const uint8 ChanIdx,
                                     const Pdb_Adc_Ip_PretriggersConfigType * const Config)
{
    d20c:	b500      	push	{lr}
    d20e:	b087      	sub	sp, #28
    d210:	9003      	str	r0, [sp, #12]
    d212:	460b      	mov	r3, r1
    d214:	9201      	str	r2, [sp, #4]
    d216:	f88d 300b 	strb.w	r3, [sp, #11]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d21a:	4a0a      	ldr	r2, [pc, #40]	; (d244 <Pdb_Adc_Ip_ConfigAdcPretriggers+0x38>)
    d21c:	9b03      	ldr	r3, [sp, #12]
    d21e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d222:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41();
    d224:	f005 ffa8 	bl	13178 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>
    Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanIdx, Config);
    d228:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d22c:	9a01      	ldr	r2, [sp, #4]
    d22e:	4619      	mov	r1, r3
    d230:	9805      	ldr	r0, [sp, #20]
    d232:	f7ff fd8e 	bl	cd52 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41();
    d236:	f005 ffcb 	bl	131d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>
}
    d23a:	bf00      	nop
    d23c:	b007      	add	sp, #28
    d23e:	f85d fb04 	ldr.w	pc, [sp], #4
    d242:	bf00      	nop
    d244:	000197f8 	.word	0x000197f8

0000d248 <Pdb_Adc_Ip_GetAdcPretriggerFlags>:
*
* @implements     Pdb_Adc_Ip_GetAdcPretriggerFlags_Activity
* END**************************************************************************/
uint32 Pdb_Adc_Ip_GetAdcPretriggerFlags(const uint32 Instance,
                                        const uint8 ChanIdx)
{
    d248:	b084      	sub	sp, #16
    d24a:	9001      	str	r0, [sp, #4]
    d24c:	460b      	mov	r3, r1
    d24e:	f88d 3003 	strb.w	r3, [sp, #3]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d252:	4a0c      	ldr	r2, [pc, #48]	; (d284 <Pdb_Adc_Ip_GetAdcPretriggerFlags+0x3c>)
    d254:	9b01      	ldr	r3, [sp, #4]
    d256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d25a:	9303      	str	r3, [sp, #12]
    uint32 Result;

    Result = Base->CH[ChanIdx].S;
    d25c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    d260:	9903      	ldr	r1, [sp, #12]
    d262:	4613      	mov	r3, r2
    d264:	009b      	lsls	r3, r3, #2
    d266:	4413      	add	r3, r2
    d268:	00db      	lsls	r3, r3, #3
    d26a:	440b      	add	r3, r1
    d26c:	3314      	adds	r3, #20
    d26e:	681b      	ldr	r3, [r3, #0]
    d270:	9302      	str	r3, [sp, #8]
    Result = (Result & PDB_S_CF_MASK) >> PDB_S_CF_SHIFT;
    d272:	9b02      	ldr	r3, [sp, #8]
    d274:	0c1b      	lsrs	r3, r3, #16
    d276:	b2db      	uxtb	r3, r3
    d278:	9302      	str	r3, [sp, #8]

    return Result;
    d27a:	9b02      	ldr	r3, [sp, #8]
}
    d27c:	4618      	mov	r0, r3
    d27e:	b004      	add	sp, #16
    d280:	4770      	bx	lr
    d282:	bf00      	nop
    d284:	000197f8 	.word	0x000197f8

0000d288 <Pdb_Adc_Ip_ClearAdcPretriggerFlags>:
* @implements     Pdb_Adc_Ip_ClearAdcPretriggerFlags_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_ClearAdcPretriggerFlags(const uint32 Instance,
                                        const uint8 ChanIdx,
                                        const uint16 PretriggMask)
{
    d288:	b500      	push	{lr}
    d28a:	b085      	sub	sp, #20
    d28c:	9001      	str	r0, [sp, #4]
    d28e:	460b      	mov	r3, r1
    d290:	f88d 3003 	strb.w	r3, [sp, #3]
    d294:	4613      	mov	r3, r2
    d296:	f8ad 3000 	strh.w	r3, [sp]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d29a:	4a0a      	ldr	r2, [pc, #40]	; (d2c4 <Pdb_Adc_Ip_ClearAdcPretriggerFlags+0x3c>)
    d29c:	9b01      	ldr	r3, [sp, #4]
    d29e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2a2:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46();
    d2a4:	f006 f902 	bl	134ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>
    /* Write 0 to clear */
    Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(Base, ChanIdx, PretriggMask);
    d2a8:	f8bd 2000 	ldrh.w	r2, [sp]
    d2ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d2b0:	4619      	mov	r1, r3
    d2b2:	9803      	ldr	r0, [sp, #12]
    d2b4:	f7ff fd85 	bl	cdc2 <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46();
    d2b8:	f006 f924 	bl	13504 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>
}
    d2bc:	bf00      	nop
    d2be:	b005      	add	sp, #20
    d2c0:	f85d fb04 	ldr.w	pc, [sp], #4
    d2c4:	000197f8 	.word	0x000197f8

0000d2c8 <Pdb_Adc_Ip_SetAdcPretriggerBackToBack>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerBackToBack(const uint32 Instance,
                                           const uint8 ChanIdx,
                                           const uint8 PretriggIdx,
                                           const boolean Value)
{
    d2c8:	b500      	push	{lr}
    d2ca:	b085      	sub	sp, #20
    d2cc:	9001      	str	r0, [sp, #4]
    d2ce:	4608      	mov	r0, r1
    d2d0:	4611      	mov	r1, r2
    d2d2:	461a      	mov	r2, r3
    d2d4:	4603      	mov	r3, r0
    d2d6:	f88d 3003 	strb.w	r3, [sp, #3]
    d2da:	460b      	mov	r3, r1
    d2dc:	f88d 3002 	strb.w	r3, [sp, #2]
    d2e0:	4613      	mov	r3, r2
    d2e2:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d2e6:	4a10      	ldr	r2, [pc, #64]	; (d328 <Pdb_Adc_Ip_SetAdcPretriggerBackToBack+0x60>)
    d2e8:	9b01      	ldr	r3, [sp, #4]
    d2ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2ee:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    d2f0:	f89d 3002 	ldrb.w	r3, [sp, #2]
    d2f4:	2201      	movs	r2, #1
    d2f6:	fa02 f303 	lsl.w	r3, r2, r3
    d2fa:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_BB(Mask);
    d2fc:	9b02      	ldr	r3, [sp, #8]
    d2fe:	041b      	lsls	r3, r3, #16
    d300:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    d304:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42();
    d306:	f005 ff89 	bl	1321c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    d30a:	f89d 3001 	ldrb.w	r3, [sp, #1]
    d30e:	f89d 1003 	ldrb.w	r1, [sp, #3]
    d312:	9a02      	ldr	r2, [sp, #8]
    d314:	9803      	ldr	r0, [sp, #12]
    d316:	f7ff fcb9 	bl	cc8c <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42();
    d31a:	f005 ffab 	bl	13274 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>
}
    d31e:	bf00      	nop
    d320:	b005      	add	sp, #20
    d322:	f85d fb04 	ldr.w	pc, [sp], #4
    d326:	bf00      	nop
    d328:	000197f8 	.word	0x000197f8

0000d32c <Pdb_Adc_Ip_SetAdcPretriggerEnable>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerEnable(const uint32 Instance,
                                       const uint8 ChanIdx,
                                       const uint8 PretriggIdx,
                                       const boolean Value)
{
    d32c:	b500      	push	{lr}
    d32e:	b085      	sub	sp, #20
    d330:	9001      	str	r0, [sp, #4]
    d332:	4608      	mov	r0, r1
    d334:	4611      	mov	r1, r2
    d336:	461a      	mov	r2, r3
    d338:	4603      	mov	r3, r0
    d33a:	f88d 3003 	strb.w	r3, [sp, #3]
    d33e:	460b      	mov	r3, r1
    d340:	f88d 3002 	strb.w	r3, [sp, #2]
    d344:	4613      	mov	r3, r2
    d346:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d34a:	4a0f      	ldr	r2, [pc, #60]	; (d388 <Pdb_Adc_Ip_SetAdcPretriggerEnable+0x5c>)
    d34c:	9b01      	ldr	r3, [sp, #4]
    d34e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d352:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    d354:	f89d 3002 	ldrb.w	r3, [sp, #2]
    d358:	2201      	movs	r2, #1
    d35a:	fa02 f303 	lsl.w	r3, r2, r3
    d35e:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_EN(Mask);
    d360:	9b02      	ldr	r3, [sp, #8]
    d362:	b2db      	uxtb	r3, r3
    d364:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43();
    d366:	f005 ffab 	bl	132c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    d36a:	f89d 3001 	ldrb.w	r3, [sp, #1]
    d36e:	f89d 1003 	ldrb.w	r1, [sp, #3]
    d372:	9a02      	ldr	r2, [sp, #8]
    d374:	9803      	ldr	r0, [sp, #12]
    d376:	f7ff fc89 	bl	cc8c <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43();
    d37a:	f005 ffcd 	bl	13318 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>
}
    d37e:	bf00      	nop
    d380:	b005      	add	sp, #20
    d382:	f85d fb04 	ldr.w	pc, [sp], #4
    d386:	bf00      	nop
    d388:	000197f8 	.word	0x000197f8

0000d38c <Pdb_Adc_Ip_SetAdcPretriggerDelayEnable>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerDelayEnable(const uint32 Instance,
                                            const uint8 ChanIdx,
                                            const uint8 PretriggIdx,
                                            const boolean Value)
{
    d38c:	b500      	push	{lr}
    d38e:	b085      	sub	sp, #20
    d390:	9001      	str	r0, [sp, #4]
    d392:	4608      	mov	r0, r1
    d394:	4611      	mov	r1, r2
    d396:	461a      	mov	r2, r3
    d398:	4603      	mov	r3, r0
    d39a:	f88d 3003 	strb.w	r3, [sp, #3]
    d39e:	460b      	mov	r3, r1
    d3a0:	f88d 3002 	strb.w	r3, [sp, #2]
    d3a4:	4613      	mov	r3, r2
    d3a6:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d3aa:	4a0f      	ldr	r2, [pc, #60]	; (d3e8 <Pdb_Adc_Ip_SetAdcPretriggerDelayEnable+0x5c>)
    d3ac:	9b01      	ldr	r3, [sp, #4]
    d3ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3b2:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    d3b4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    d3b8:	2201      	movs	r2, #1
    d3ba:	fa02 f303 	lsl.w	r3, r2, r3
    d3be:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_TOS(Mask);
    d3c0:	9b02      	ldr	r3, [sp, #8]
    d3c2:	021b      	lsls	r3, r3, #8
    d3c4:	b29b      	uxth	r3, r3
    d3c6:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44();
    d3c8:	f005 ffcc 	bl	13364 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    d3cc:	f89d 3001 	ldrb.w	r3, [sp, #1]
    d3d0:	f89d 1003 	ldrb.w	r1, [sp, #3]
    d3d4:	9a02      	ldr	r2, [sp, #8]
    d3d6:	9803      	ldr	r0, [sp, #12]
    d3d8:	f7ff fc58 	bl	cc8c <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44();
    d3dc:	f005 ffee 	bl	133bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>
}
    d3e0:	bf00      	nop
    d3e2:	b005      	add	sp, #20
    d3e4:	f85d fb04 	ldr.w	pc, [sp], #4
    d3e8:	000197f8 	.word	0x000197f8

0000d3ec <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerDelayValue(const uint32 Instance,
                                           const uint8 ChanIdx,
                                           const uint8 PretriggIdx,
                                           const uint16 DelayValue)
{
    d3ec:	b410      	push	{r4}
    d3ee:	b085      	sub	sp, #20
    d3f0:	9001      	str	r0, [sp, #4]
    d3f2:	4608      	mov	r0, r1
    d3f4:	4611      	mov	r1, r2
    d3f6:	461a      	mov	r2, r3
    d3f8:	4603      	mov	r3, r0
    d3fa:	f88d 3003 	strb.w	r3, [sp, #3]
    d3fe:	460b      	mov	r3, r1
    d400:	f88d 3002 	strb.w	r3, [sp, #2]
    d404:	4613      	mov	r3, r2
    d406:	f8ad 3000 	strh.w	r3, [sp]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d40a:	4a0c      	ldr	r2, [pc, #48]	; (d43c <Pdb_Adc_Ip_SetAdcPretriggerDelayValue+0x50>)
    d40c:	9b01      	ldr	r3, [sp, #4]
    d40e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d412:	9303      	str	r3, [sp, #12]

    Base->CH[ChanIdx].DLY[PretriggIdx] = PDB_DLY_DLY(DelayValue);
    d414:	f89d 2003 	ldrb.w	r2, [sp, #3]
    d418:	f89d 4002 	ldrb.w	r4, [sp, #2]
    d41c:	f8bd 0000 	ldrh.w	r0, [sp]
    d420:	9903      	ldr	r1, [sp, #12]
    d422:	4613      	mov	r3, r2
    d424:	009b      	lsls	r3, r3, #2
    d426:	4413      	add	r3, r2
    d428:	005b      	lsls	r3, r3, #1
    d42a:	4423      	add	r3, r4
    d42c:	3306      	adds	r3, #6
    d42e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
}
    d432:	bf00      	nop
    d434:	b005      	add	sp, #20
    d436:	f85d 4b04 	ldr.w	r4, [sp], #4
    d43a:	4770      	bx	lr
    d43c:	000197f8 	.word	0x000197f8

0000d440 <Pdb_Adc_Ip_DisableAndClearPdb>:
* configuration and status registers.
*
* @implements     Pdb_Adc_Ip_DisableAndClearPdb_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_DisableAndClearPdb(const uint32 Instance)
{
    d440:	b500      	push	{lr}
    d442:	b087      	sub	sp, #28
    d444:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d446:	4a19      	ldr	r2, [pc, #100]	; (d4ac <Pdb_Adc_Ip_DisableAndClearPdb+0x6c>)
    d448:	9b01      	ldr	r3, [sp, #4]
    d44a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d44e:	9304      	str	r3, [sp, #16]
    uint8 ChanIdx;
    const Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig = { 0u, 0u, 0u };
    d450:	2300      	movs	r3, #0
    d452:	f88d 300c 	strb.w	r3, [sp, #12]
    d456:	2300      	movs	r3, #0
    d458:	f88d 300d 	strb.w	r3, [sp, #13]
    d45c:	2300      	movs	r3, #0
    d45e:	f88d 300e 	strb.w	r3, [sp, #14]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40();
    d462:	f005 fe37 	bl	130d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>
    Pdb_Adc_HwAcc_DisablePdb(Base);
    d466:	9804      	ldr	r0, [sp, #16]
    d468:	f7ff fc4f 	bl	cd0a <Pdb_Adc_HwAcc_DisablePdb>
    Pdb_Adc_HwAcc_SetContinuousMode(Base, FALSE);
    d46c:	2100      	movs	r1, #0
    d46e:	9804      	ldr	r0, [sp, #16]
    d470:	f7ff fc56 	bl	cd20 <Pdb_Adc_HwAcc_SetContinuousMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40();
    d474:	f005 fe5a 	bl	1312c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>

    for (ChanIdx = 0U; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    d478:	2300      	movs	r3, #0
    d47a:	f88d 3017 	strb.w	r3, [sp, #23]
    d47e:	e00b      	b.n	d498 <Pdb_Adc_Ip_DisableAndClearPdb+0x58>
    {
        PDB_ADC_ResetChannel(Base, ChanIdx, &PdbPretriggsConfig);
    d480:	aa03      	add	r2, sp, #12
    d482:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d486:	4619      	mov	r1, r3
    d488:	9804      	ldr	r0, [sp, #16]
    d48a:	f000 f899 	bl	d5c0 <PDB_ADC_ResetChannel>
    for (ChanIdx = 0U; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    d48e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d492:	3301      	adds	r3, #1
    d494:	f88d 3017 	strb.w	r3, [sp, #23]
    d498:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d49c:	2b01      	cmp	r3, #1
    d49e:	d9ef      	bls.n	d480 <Pdb_Adc_Ip_DisableAndClearPdb+0x40>
    }
}
    d4a0:	bf00      	nop
    d4a2:	bf00      	nop
    d4a4:	b007      	add	sp, #28
    d4a6:	f85d fb04 	ldr.w	pc, [sp], #4
    d4aa:	bf00      	nop
    d4ac:	000197f8 	.word	0x000197f8

0000d4b0 <Pdb_Adc_Ip_IRQHandler>:
 * Description   : Handles Pdb sequence error interrupt.
 *
 * @implements     Pdb_Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Pdb_Adc_Ip_IRQHandler(const uint32 Instance)
{
    d4b0:	b500      	push	{lr}
    d4b2:	b087      	sub	sp, #28
    d4b4:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d4b6:	4a40      	ldr	r2, [pc, #256]	; (d5b8 <Pdb_Adc_Ip_IRQHandler+0x108>)
    d4b8:	9b01      	ldr	r3, [sp, #4]
    d4ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4be:	9304      	str	r3, [sp, #16]
    uint8 ChanIdx;
    uint16 SeqErrMask;

    /* Check whether the respective driver is initialized */
    if (TRUE == Pdb_Adc_Ip_axState[Instance].Init)
    d4c0:	4a3e      	ldr	r2, [pc, #248]	; (d5bc <Pdb_Adc_Ip_IRQHandler+0x10c>)
    d4c2:	9b01      	ldr	r3, [sp, #4]
    d4c4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    d4c8:	2b00      	cmp	r3, #0
    d4ca:	d04d      	beq.n	d568 <Pdb_Adc_Ip_IRQHandler+0xb8>
    {
        /* CPR_RTD_00664
         * Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop).
         * Check if the interrupt not spurious (sequence error interrupt is enabled and sequence error flag is set).
         */
        if ( ((Base->SC & PDB_SC_PDBEIE_MASK) != 0u) && (Pdb_Adc_Ip_axState[Instance].SeqErrNotification != NULL_PTR) )
    d4cc:	9b04      	ldr	r3, [sp, #16]
    d4ce:	681b      	ldr	r3, [r3, #0]
    d4d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    d4d4:	2b00      	cmp	r3, #0
    d4d6:	d06a      	beq.n	d5ae <Pdb_Adc_Ip_IRQHandler+0xfe>
    d4d8:	4a38      	ldr	r2, [pc, #224]	; (d5bc <Pdb_Adc_Ip_IRQHandler+0x10c>)
    d4da:	9b01      	ldr	r3, [sp, #4]
    d4dc:	00db      	lsls	r3, r3, #3
    d4de:	4413      	add	r3, r2
    d4e0:	685b      	ldr	r3, [r3, #4]
    d4e2:	2b00      	cmp	r3, #0
    d4e4:	d063      	beq.n	d5ae <Pdb_Adc_Ip_IRQHandler+0xfe>
        {
            for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    d4e6:	2300      	movs	r3, #0
    d4e8:	f88d 3017 	strb.w	r3, [sp, #23]
    d4ec:	e037      	b.n	d55e <Pdb_Adc_Ip_IRQHandler+0xae>
            {
                SeqErrMask = (uint16) ((Base->CH[ChanIdx].S & PDB_S_ERR_MASK) >> PDB_S_ERR_SHIFT);
    d4ee:	f89d 2017 	ldrb.w	r2, [sp, #23]
    d4f2:	9904      	ldr	r1, [sp, #16]
    d4f4:	4613      	mov	r3, r2
    d4f6:	009b      	lsls	r3, r3, #2
    d4f8:	4413      	add	r3, r2
    d4fa:	00db      	lsls	r3, r3, #3
    d4fc:	440b      	add	r3, r1
    d4fe:	3314      	adds	r3, #20
    d500:	681b      	ldr	r3, [r3, #0]
    d502:	b29b      	uxth	r3, r3
    d504:	b2db      	uxtb	r3, r3
    d506:	f8ad 300e 	strh.w	r3, [sp, #14]
                if (SeqErrMask != 0u)
    d50a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    d50e:	2b00      	cmp	r3, #0
    d510:	d020      	beq.n	d554 <Pdb_Adc_Ip_IRQHandler+0xa4>
                {
                    /* Clear the sequence error flag triggered from the current channel (W0C).
                     * And call the associated callback.
                     */
                    Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    d512:	f89d 2017 	ldrb.w	r2, [sp, #23]
    d516:	9904      	ldr	r1, [sp, #16]
    d518:	4613      	mov	r3, r2
    d51a:	009b      	lsls	r3, r3, #2
    d51c:	4413      	add	r3, r2
    d51e:	00db      	lsls	r3, r3, #3
    d520:	440b      	add	r3, r1
    d522:	3314      	adds	r3, #20
    d524:	681b      	ldr	r3, [r3, #0]
    d526:	f89d 2017 	ldrb.w	r2, [sp, #23]
    d52a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    d52e:	9804      	ldr	r0, [sp, #16]
    d530:	4613      	mov	r3, r2
    d532:	009b      	lsls	r3, r3, #2
    d534:	4413      	add	r3, r2
    d536:	00db      	lsls	r3, r3, #3
    d538:	4403      	add	r3, r0
    d53a:	3314      	adds	r3, #20
    d53c:	6019      	str	r1, [r3, #0]
                    Pdb_Adc_Ip_axState[Instance].SeqErrNotification(ChanIdx, SeqErrMask);
    d53e:	4a1f      	ldr	r2, [pc, #124]	; (d5bc <Pdb_Adc_Ip_IRQHandler+0x10c>)
    d540:	9b01      	ldr	r3, [sp, #4]
    d542:	00db      	lsls	r3, r3, #3
    d544:	4413      	add	r3, r2
    d546:	685b      	ldr	r3, [r3, #4]
    d548:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    d54c:	f89d 2017 	ldrb.w	r2, [sp, #23]
    d550:	4610      	mov	r0, r2
    d552:	4798      	blx	r3
            for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    d554:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d558:	3301      	adds	r3, #1
    d55a:	f88d 3017 	strb.w	r3, [sp, #23]
    d55e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d562:	2b01      	cmp	r3, #1
    d564:	d9c3      	bls.n	d4ee <Pdb_Adc_Ip_IRQHandler+0x3e>
            /* Clear all sequence error flags triggered from the current channel
            * by writing 0 to raised bits. */
            Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
        }
    }
}
    d566:	e022      	b.n	d5ae <Pdb_Adc_Ip_IRQHandler+0xfe>
        for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    d568:	2300      	movs	r3, #0
    d56a:	f88d 3017 	strb.w	r3, [sp, #23]
    d56e:	e01a      	b.n	d5a6 <Pdb_Adc_Ip_IRQHandler+0xf6>
            Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    d570:	f89d 2017 	ldrb.w	r2, [sp, #23]
    d574:	9904      	ldr	r1, [sp, #16]
    d576:	4613      	mov	r3, r2
    d578:	009b      	lsls	r3, r3, #2
    d57a:	4413      	add	r3, r2
    d57c:	00db      	lsls	r3, r3, #3
    d57e:	440b      	add	r3, r1
    d580:	3314      	adds	r3, #20
    d582:	681b      	ldr	r3, [r3, #0]
    d584:	f89d 2017 	ldrb.w	r2, [sp, #23]
    d588:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    d58c:	9804      	ldr	r0, [sp, #16]
    d58e:	4613      	mov	r3, r2
    d590:	009b      	lsls	r3, r3, #2
    d592:	4413      	add	r3, r2
    d594:	00db      	lsls	r3, r3, #3
    d596:	4403      	add	r3, r0
    d598:	3314      	adds	r3, #20
    d59a:	6019      	str	r1, [r3, #0]
        for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    d59c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d5a0:	3301      	adds	r3, #1
    d5a2:	f88d 3017 	strb.w	r3, [sp, #23]
    d5a6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d5aa:	2b01      	cmp	r3, #1
    d5ac:	d9e0      	bls.n	d570 <Pdb_Adc_Ip_IRQHandler+0xc0>
}
    d5ae:	bf00      	nop
    d5b0:	b007      	add	sp, #28
    d5b2:	f85d fb04 	ldr.w	pc, [sp], #4
    d5b6:	bf00      	nop
    d5b8:	000197f8 	.word	0x000197f8
    d5bc:	1fff8e18 	.word	0x1fff8e18

0000d5c0 <PDB_ADC_ResetChannel>:

static inline void PDB_ADC_ResetChannel(PDB_Type * const Base,
                                        const uint8 ChanIdx,
                                        const Pdb_Adc_Ip_PretriggersConfigType * PdbPretriggsConfig)
{
    d5c0:	b500      	push	{lr}
    d5c2:	b085      	sub	sp, #20
    d5c4:	9003      	str	r0, [sp, #12]
    d5c6:	460b      	mov	r3, r1
    d5c8:	9201      	str	r2, [sp, #4]
    d5ca:	f88d 300b 	strb.w	r3, [sp, #11]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45();
    d5ce:	f005 ff1b 	bl	13408 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>
    Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanIdx, PdbPretriggsConfig);
    d5d2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d5d6:	9a01      	ldr	r2, [sp, #4]
    d5d8:	4619      	mov	r1, r3
    d5da:	9803      	ldr	r0, [sp, #12]
    d5dc:	f7ff fbb9 	bl	cd52 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45();
    d5e0:	f005 ff3e 	bl	13460 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47();
    d5e4:	f005 ffb4 	bl	13550 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>
    Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(Base, ChanIdx, 0xFFu);
    d5e8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d5ec:	22ff      	movs	r2, #255	; 0xff
    d5ee:	4619      	mov	r1, r3
    d5f0:	9803      	ldr	r0, [sp, #12]
    d5f2:	f7ff fbe6 	bl	cdc2 <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>

    /* Clear all sequence error flags. */
    Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    d5f6:	f89d 200b 	ldrb.w	r2, [sp, #11]
    d5fa:	9903      	ldr	r1, [sp, #12]
    d5fc:	4613      	mov	r3, r2
    d5fe:	009b      	lsls	r3, r3, #2
    d600:	4413      	add	r3, r2
    d602:	00db      	lsls	r3, r3, #3
    d604:	440b      	add	r3, r1
    d606:	3314      	adds	r3, #20
    d608:	681b      	ldr	r3, [r3, #0]
    d60a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    d60e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    d612:	9803      	ldr	r0, [sp, #12]
    d614:	4613      	mov	r3, r2
    d616:	009b      	lsls	r3, r3, #2
    d618:	4413      	add	r3, r2
    d61a:	00db      	lsls	r3, r3, #3
    d61c:	4403      	add	r3, r0
    d61e:	3314      	adds	r3, #20
    d620:	6019      	str	r1, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47();
    d622:	f005 ffc1 	bl	135a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>
}
    d626:	bf00      	nop
    d628:	b005      	add	sp, #20
    d62a:	f85d fb04 	ldr.w	pc, [sp], #4
    d62e:	bf00      	nop

0000d630 <Ftm_Pwm_Ip_SetClockPs>:
 * @param[in] FtmBase    The FTM base address pointer
 * @param[in] Prescaler  The FTM peripheral clock pre-scale divider
 */
static inline void Ftm_Pwm_Ip_SetClockPs(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         Ftm_Pwm_Ip_ClkPrescalerType   Prescaler)
{
    d630:	b082      	sub	sp, #8
    d632:	9001      	str	r0, [sp, #4]
    d634:	9100      	str	r1, [sp, #0]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_PS_MASK) | FTM_SC_PS(Prescaler);
    d636:	9b01      	ldr	r3, [sp, #4]
    d638:	681b      	ldr	r3, [r3, #0]
    d63a:	f023 0207 	bic.w	r2, r3, #7
    d63e:	9b00      	ldr	r3, [sp, #0]
    d640:	f003 0307 	and.w	r3, r3, #7
    d644:	431a      	orrs	r2, r3
    d646:	9b01      	ldr	r3, [sp, #4]
    d648:	601a      	str	r2, [r3, #0]
}
    d64a:	bf00      	nop
    d64c:	b002      	add	sp, #8
    d64e:	4770      	bx	lr

0000d650 <Ftm_Pwm_Ip_GetClockPs>:
 * @param[in] FtmBase The FTM base address pointer
 *
 * @return The FTM clock pre-scale divider
 */
static inline uint8 Ftm_Pwm_Ip_GetClockPs(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    d650:	b082      	sub	sp, #8
    d652:	9001      	str	r0, [sp, #4]
    return (uint8)((FtmBase->SC & FTM_SC_PS_MASK) >> FTM_SC_PS_SHIFT);
    d654:	9b01      	ldr	r3, [sp, #4]
    d656:	681b      	ldr	r3, [r3, #0]
    d658:	b2db      	uxtb	r3, r3
    d65a:	f003 0307 	and.w	r3, r3, #7
    d65e:	b2db      	uxtb	r3, r3
}
    d660:	4618      	mov	r0, r3
    d662:	b002      	add	sp, #8
    d664:	4770      	bx	lr

0000d666 <Ftm_Pwm_Ip_SetClockSource>:
 *            - 10: Fixed clock
 *            - 11: External clock
 */
static inline void Ftm_Pwm_Ip_SetClockSource(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             Ftm_Pwm_Ip_ClkSourceType      ClockSrc)
{
    d666:	b082      	sub	sp, #8
    d668:	9001      	str	r0, [sp, #4]
    d66a:	9100      	str	r1, [sp, #0]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_CLKS_MASK) | FTM_SC_CLKS(ClockSrc);
    d66c:	9b01      	ldr	r3, [sp, #4]
    d66e:	681b      	ldr	r3, [r3, #0]
    d670:	f023 0218 	bic.w	r2, r3, #24
    d674:	9b00      	ldr	r3, [sp, #0]
    d676:	00db      	lsls	r3, r3, #3
    d678:	f003 0318 	and.w	r3, r3, #24
    d67c:	431a      	orrs	r2, r3
    d67e:	9b01      	ldr	r3, [sp, #4]
    d680:	601a      	str	r2, [r3, #0]
}
    d682:	bf00      	nop
    d684:	b002      	add	sp, #8
    d686:	4770      	bx	lr

0000d688 <Ftm_Pwm_Ip_SetCpwms>:
 *                     - 0U: Up counting mode
 *                     - 1U: Up down counting mode
 */
static inline void Ftm_Pwm_Ip_SetCpwms(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                       boolean                       Mode)
{
    d688:	b082      	sub	sp, #8
    d68a:	9001      	str	r0, [sp, #4]
    d68c:	460b      	mov	r3, r1
    d68e:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_CPWMS_MASK) | FTM_SC_CPWMS((Mode == TRUE) ? 0x01U : 0x00U);
    d692:	9b01      	ldr	r3, [sp, #4]
    d694:	681b      	ldr	r3, [r3, #0]
    d696:	f023 0320 	bic.w	r3, r3, #32
    d69a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    d69e:	2a00      	cmp	r2, #0
    d6a0:	d001      	beq.n	d6a6 <Ftm_Pwm_Ip_SetCpwms+0x1e>
    d6a2:	2220      	movs	r2, #32
    d6a4:	e000      	b.n	d6a8 <Ftm_Pwm_Ip_SetCpwms+0x20>
    d6a6:	2200      	movs	r2, #0
    d6a8:	431a      	orrs	r2, r3
    d6aa:	9b01      	ldr	r3, [sp, #4]
    d6ac:	601a      	str	r2, [r3, #0]
}
    d6ae:	bf00      	nop
    d6b0:	b002      	add	sp, #8
    d6b2:	4770      	bx	lr

0000d6b4 <Ftm_Pwm_Ip_GetCpwms>:
 * @return The Center-Aligned PWM selection
 *         - 0U: Up counting mode
 *         - 1U: Up down counting mode
 */
static inline Ftm_Pwm_Ip_CounterModeType Ftm_Pwm_Ip_GetCpwms(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    d6b4:	b082      	sub	sp, #8
    d6b6:	9001      	str	r0, [sp, #4]
    return  (((FtmBase->SC & FTM_SC_CPWMS_MASK) >> FTM_SC_CPWMS_SHIFT) == 0U)? FTM_PWM_IP_EDGE_ALIGNED : FTM_PWM_IP_CENTER_ALIGNED;
    d6b8:	9b01      	ldr	r3, [sp, #4]
    d6ba:	681b      	ldr	r3, [r3, #0]
    d6bc:	f003 0320 	and.w	r3, r3, #32
    d6c0:	2b00      	cmp	r3, #0
    d6c2:	bf14      	ite	ne
    d6c4:	2301      	movne	r3, #1
    d6c6:	2300      	moveq	r3, #0
    d6c8:	b2db      	uxtb	r3, r3
}
    d6ca:	4618      	mov	r0, r3
    d6cc:	b002      	add	sp, #8
    d6ce:	4770      	bx	lr

0000d6d0 <Ftm_Pwm_Ip_SetTimerOverflowInt>:
 * @param[in] State - TRUE : Overflow interrupt enabled
 *                  - FALSE: Overflow interrupt disabled
 */
static inline void Ftm_Pwm_Ip_SetTimerOverflowInt(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  boolean                       State)
{
    d6d0:	b082      	sub	sp, #8
    d6d2:	9001      	str	r0, [sp, #4]
    d6d4:	460b      	mov	r3, r1
    d6d6:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_TOIE_MASK) | FTM_SC_TOIE((State == TRUE) ? 0x01U : 0x00U);
    d6da:	9b01      	ldr	r3, [sp, #4]
    d6dc:	681b      	ldr	r3, [r3, #0]
    d6de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    d6e2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    d6e6:	2a00      	cmp	r2, #0
    d6e8:	d002      	beq.n	d6f0 <Ftm_Pwm_Ip_SetTimerOverflowInt+0x20>
    d6ea:	f44f 7280 	mov.w	r2, #256	; 0x100
    d6ee:	e000      	b.n	d6f2 <Ftm_Pwm_Ip_SetTimerOverflowInt+0x22>
    d6f0:	2200      	movs	r2, #0
    d6f2:	431a      	orrs	r2, r3
    d6f4:	9b01      	ldr	r3, [sp, #4]
    d6f6:	601a      	str	r2, [r3, #0]
}
    d6f8:	bf00      	nop
    d6fa:	b002      	add	sp, #8
    d6fc:	4770      	bx	lr

0000d6fe <Ftm_Pwm_Ip_ClearTimerOverflow>:
 * @brief Clears the timer overflow interrupt flag.
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_ClearTimerOverflow(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    d6fe:	b082      	sub	sp, #8
    d700:	9001      	str	r0, [sp, #4]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_TOF_MASK) | FTM_SC_TOF(0U);
    d702:	9b01      	ldr	r3, [sp, #4]
    d704:	681b      	ldr	r3, [r3, #0]
    d706:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    d70a:	9b01      	ldr	r3, [sp, #4]
    d70c:	601a      	str	r2, [r3, #0]
#ifdef ERRATA_E9005
    /* Read-after-write sequence to guarantee required serialization of memory operations */
    FtmBase->SC;
#endif
}
    d70e:	bf00      	nop
    d710:	b002      	add	sp, #8
    d712:	4770      	bx	lr

0000d714 <Ftm_Pwm_Ip_EnablePwmChannelOutputs>:
 * @param[in] Channel The FTM channel

 */
static inline void Ftm_Pwm_Ip_EnablePwmChannelOutputs(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8                         Channel)
{
    d714:	b082      	sub	sp, #8
    d716:	9001      	str	r0, [sp, #4]
    d718:	460b      	mov	r3, r1
    d71a:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~(1UL << (Channel + FTM_SC_PWMEN0_SHIFT))) | (1UL << (Channel + FTM_SC_PWMEN0_SHIFT));
    d71e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d722:	3310      	adds	r3, #16
    d724:	2201      	movs	r2, #1
    d726:	409a      	lsls	r2, r3
    d728:	9b01      	ldr	r3, [sp, #4]
    d72a:	681b      	ldr	r3, [r3, #0]
    d72c:	431a      	orrs	r2, r3
    d72e:	9b01      	ldr	r3, [sp, #4]
    d730:	601a      	str	r2, [r3, #0]
}
    d732:	bf00      	nop
    d734:	b002      	add	sp, #8
    d736:	4770      	bx	lr

0000d738 <Ftm_Pwm_Ip_SetCounter>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The FTM timer counter value to be set
 */
static inline void Ftm_Pwm_Ip_SetCounter(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         uint16                        Value)
{
    d738:	b082      	sub	sp, #8
    d73a:	9001      	str	r0, [sp, #4]
    d73c:	460b      	mov	r3, r1
    d73e:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->CNT = (FtmBase->CNT & ~FTM_CNT_COUNT_MASK) | FTM_CNT_COUNT(Value);
    d742:	9b01      	ldr	r3, [sp, #4]
    d744:	685b      	ldr	r3, [r3, #4]
    d746:	0c1b      	lsrs	r3, r3, #16
    d748:	041b      	lsls	r3, r3, #16
    d74a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    d74e:	431a      	orrs	r2, r3
    d750:	9b01      	ldr	r3, [sp, #4]
    d752:	605a      	str	r2, [r3, #4]
}
    d754:	bf00      	nop
    d756:	b002      	add	sp, #8
    d758:	4770      	bx	lr

0000d75a <Ftm_Pwm_Ip_SetMod>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The value to be set to the timer modulo
 */
static inline void Ftm_Pwm_Ip_SetMod(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                     uint16                        Value)
{
    d75a:	b082      	sub	sp, #8
    d75c:	9001      	str	r0, [sp, #4]
    d75e:	460b      	mov	r3, r1
    d760:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->MOD = (FtmBase->MOD & ~FTM_MOD_MOD_MASK) | FTM_MOD_MOD(Value);
    d764:	9b01      	ldr	r3, [sp, #4]
    d766:	689b      	ldr	r3, [r3, #8]
    d768:	0c1b      	lsrs	r3, r3, #16
    d76a:	041b      	lsls	r3, r3, #16
    d76c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    d770:	431a      	orrs	r2, r3
    d772:	9b01      	ldr	r3, [sp, #4]
    d774:	609a      	str	r2, [r3, #8]
}
    d776:	bf00      	nop
    d778:	b002      	add	sp, #8
    d77a:	4770      	bx	lr

0000d77c <Ftm_Pwm_Ip_GetChnEdgeLevel>:
 *
 * Implements : Ftm_Pwm_Ip_GetChnEdgeLevel_Activity
 */
static inline uint8 Ftm_Pwm_Ip_GetChnEdgeLevel(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                               Channel)
{
    d77c:	b084      	sub	sp, #16
    d77e:	9001      	str	r0, [sp, #4]
    d780:	460b      	mov	r3, r1
    d782:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 RetValue;

    RetValue = (uint8)((FtmBase->CONTROLS[Channel].CSC & FTM_CSC_ELSA_MASK) >> FTM_CSC_ELSA_SHIFT);
    d786:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d78a:	9a01      	ldr	r2, [sp, #4]
    d78c:	3301      	adds	r3, #1
    d78e:	00db      	lsls	r3, r3, #3
    d790:	4413      	add	r3, r2
    d792:	685b      	ldr	r3, [r3, #4]
    d794:	089b      	lsrs	r3, r3, #2
    d796:	b2db      	uxtb	r3, r3
    d798:	f003 0301 	and.w	r3, r3, #1
    d79c:	f88d 300f 	strb.w	r3, [sp, #15]

    RetValue |= (uint8)(((FtmBase->CONTROLS[Channel].CSC & FTM_CSC_ELSB_MASK) >> FTM_CSC_ELSB_SHIFT) << 1U);
    d7a0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d7a4:	9a01      	ldr	r2, [sp, #4]
    d7a6:	3301      	adds	r3, #1
    d7a8:	00db      	lsls	r3, r3, #3
    d7aa:	4413      	add	r3, r2
    d7ac:	685b      	ldr	r3, [r3, #4]
    d7ae:	08db      	lsrs	r3, r3, #3
    d7b0:	b2db      	uxtb	r3, r3
    d7b2:	005b      	lsls	r3, r3, #1
    d7b4:	b2db      	uxtb	r3, r3
    d7b6:	f003 0302 	and.w	r3, r3, #2
    d7ba:	b2da      	uxtb	r2, r3
    d7bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d7c0:	4313      	orrs	r3, r2
    d7c2:	f88d 300f 	strb.w	r3, [sp, #15]

    return RetValue;
    d7c6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    d7ca:	4618      	mov	r0, r3
    d7cc:	b004      	add	sp, #16
    d7ce:	4770      	bx	lr

0000d7d0 <Ftm_Pwm_Ip_SetChnEdgeLevel>:
 * @param[in] Level    ELSnB:ELSnA :00, 01, 10, 11
 */
static inline void Ftm_Pwm_Ip_SetChnEdgeLevel(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              uint8                         Channel,
                                              Ftm_Pwm_Ip_ChannelModeType    Level)
{
    d7d0:	b086      	sub	sp, #24
    d7d2:	9003      	str	r0, [sp, #12]
    d7d4:	460b      	mov	r3, r1
    d7d6:	9201      	str	r2, [sp, #4]
    d7d8:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 LevelA = (uint32)(((uint32)(Level) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_ELSA_MASK);
    d7dc:	9b01      	ldr	r3, [sp, #4]
    d7de:	009b      	lsls	r3, r3, #2
    d7e0:	f003 0304 	and.w	r3, r3, #4
    d7e4:	9305      	str	r3, [sp, #20]

    uint32 LevelB = (uint32)(((uint32)(Level) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_ELSB_MASK);
    d7e6:	9b01      	ldr	r3, [sp, #4]
    d7e8:	009b      	lsls	r3, r3, #2
    d7ea:	f003 0308 	and.w	r3, r3, #8
    d7ee:	9304      	str	r3, [sp, #16]

    /* write ELSA bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_ELSA_MASK) | LevelA;
    d7f0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d7f4:	9a03      	ldr	r2, [sp, #12]
    d7f6:	3301      	adds	r3, #1
    d7f8:	00db      	lsls	r3, r3, #3
    d7fa:	4413      	add	r3, r2
    d7fc:	685b      	ldr	r3, [r3, #4]
    d7fe:	f023 0104 	bic.w	r1, r3, #4
    d802:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d806:	9a05      	ldr	r2, [sp, #20]
    d808:	430a      	orrs	r2, r1
    d80a:	9903      	ldr	r1, [sp, #12]
    d80c:	3301      	adds	r3, #1
    d80e:	00db      	lsls	r3, r3, #3
    d810:	440b      	add	r3, r1
    d812:	605a      	str	r2, [r3, #4]

    /* write ELSB bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_ELSB_MASK) | LevelB;
    d814:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d818:	9a03      	ldr	r2, [sp, #12]
    d81a:	3301      	adds	r3, #1
    d81c:	00db      	lsls	r3, r3, #3
    d81e:	4413      	add	r3, r2
    d820:	685b      	ldr	r3, [r3, #4]
    d822:	f023 0108 	bic.w	r1, r3, #8
    d826:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d82a:	9a04      	ldr	r2, [sp, #16]
    d82c:	430a      	orrs	r2, r1
    d82e:	9903      	ldr	r1, [sp, #12]
    d830:	3301      	adds	r3, #1
    d832:	00db      	lsls	r3, r3, #3
    d834:	440b      	add	r3, r1
    d836:	605a      	str	r2, [r3, #4]
}
    d838:	bf00      	nop
    d83a:	b006      	add	sp, #24
    d83c:	4770      	bx	lr

0000d83e <Ftm_Pwm_Ip_SetChnMSBAMode>:
 * @param[in] Selection  The mode to be set valid value MSnB:MSnA :00, 01, 10, 11
 */
static inline void Ftm_Pwm_Ip_SetChnMSBAMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             uint8                         Channel,
                                             Ftm_Pwm_Ip_ChannelModeType    Selection)
{
    d83e:	b086      	sub	sp, #24
    d840:	9003      	str	r0, [sp, #12]
    d842:	460b      	mov	r3, r1
    d844:	9201      	str	r2, [sp, #4]
    d846:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 SelectionA = (uint32)(((uint32)(Selection) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_MSA_MASK);
    d84a:	9b01      	ldr	r3, [sp, #4]
    d84c:	009b      	lsls	r3, r3, #2
    d84e:	f003 0310 	and.w	r3, r3, #16
    d852:	9305      	str	r3, [sp, #20]

    uint32 SelectionB = (uint32)(((uint32)(Selection) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_MSB_MASK);
    d854:	9b01      	ldr	r3, [sp, #4]
    d856:	009b      	lsls	r3, r3, #2
    d858:	f003 0320 	and.w	r3, r3, #32
    d85c:	9304      	str	r3, [sp, #16]

    /* write MSA bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_MSA_MASK) | SelectionA;
    d85e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d862:	9a03      	ldr	r2, [sp, #12]
    d864:	3301      	adds	r3, #1
    d866:	00db      	lsls	r3, r3, #3
    d868:	4413      	add	r3, r2
    d86a:	685b      	ldr	r3, [r3, #4]
    d86c:	f023 0110 	bic.w	r1, r3, #16
    d870:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d874:	9a05      	ldr	r2, [sp, #20]
    d876:	430a      	orrs	r2, r1
    d878:	9903      	ldr	r1, [sp, #12]
    d87a:	3301      	adds	r3, #1
    d87c:	00db      	lsls	r3, r3, #3
    d87e:	440b      	add	r3, r1
    d880:	605a      	str	r2, [r3, #4]

    /* write MSB bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_MSB_MASK) | SelectionB;
    d882:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d886:	9a03      	ldr	r2, [sp, #12]
    d888:	3301      	adds	r3, #1
    d88a:	00db      	lsls	r3, r3, #3
    d88c:	4413      	add	r3, r2
    d88e:	685b      	ldr	r3, [r3, #4]
    d890:	f023 0120 	bic.w	r1, r3, #32
    d894:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d898:	9a04      	ldr	r2, [sp, #16]
    d89a:	430a      	orrs	r2, r1
    d89c:	9903      	ldr	r1, [sp, #12]
    d89e:	3301      	adds	r3, #1
    d8a0:	00db      	lsls	r3, r3, #3
    d8a2:	440b      	add	r3, r1
    d8a4:	605a      	str	r2, [r3, #4]
}
    d8a6:	bf00      	nop
    d8a8:	b006      	add	sp, #24
    d8aa:	4770      	bx	lr

0000d8ac <Ftm_Pwm_Ip_GetChnMode>:
 * @return The MSnB:MSnA mode value, will be 00, 01, 10, 11
 *
 */
static inline uint8 Ftm_Pwm_Ip_GetChnMode(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                          uint8                               Channel)
{
    d8ac:	b084      	sub	sp, #16
    d8ae:	9001      	str	r0, [sp, #4]
    d8b0:	460b      	mov	r3, r1
    d8b2:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 RetValue;

    RetValue = (uint8)(((FtmBase->CONTROLS[Channel].CSC) & FTM_CSC_MSA_MASK) >> FTM_CSC_MSA_SHIFT);
    d8b6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d8ba:	9a01      	ldr	r2, [sp, #4]
    d8bc:	3301      	adds	r3, #1
    d8be:	00db      	lsls	r3, r3, #3
    d8c0:	4413      	add	r3, r2
    d8c2:	685b      	ldr	r3, [r3, #4]
    d8c4:	091b      	lsrs	r3, r3, #4
    d8c6:	b2db      	uxtb	r3, r3
    d8c8:	f003 0301 	and.w	r3, r3, #1
    d8cc:	f88d 300f 	strb.w	r3, [sp, #15]

    RetValue |= (uint8)((((FtmBase->CONTROLS[Channel].CSC) & FTM_CSC_MSB_MASK) >> FTM_CSC_MSB_SHIFT) << 1U);
    d8d0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d8d4:	9a01      	ldr	r2, [sp, #4]
    d8d6:	3301      	adds	r3, #1
    d8d8:	00db      	lsls	r3, r3, #3
    d8da:	4413      	add	r3, r2
    d8dc:	685b      	ldr	r3, [r3, #4]
    d8de:	095b      	lsrs	r3, r3, #5
    d8e0:	b2db      	uxtb	r3, r3
    d8e2:	005b      	lsls	r3, r3, #1
    d8e4:	b2db      	uxtb	r3, r3
    d8e6:	f003 0302 	and.w	r3, r3, #2
    d8ea:	b2da      	uxtb	r2, r3
    d8ec:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d8f0:	4313      	orrs	r3, r2
    d8f2:	f88d 300f 	strb.w	r3, [sp, #15]

    return RetValue;
    d8f6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    d8fa:	4618      	mov	r0, r3
    d8fc:	b004      	add	sp, #16
    d8fe:	4770      	bx	lr

0000d900 <Ftm_Pwm_Ip_UpdateChnInt>:
 * @param[in] Enable  Enable or Disable the FTM peripheral timer channel(n) interrupt.
 */
static inline void Ftm_Pwm_Ip_UpdateChnInt(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                           uint8                         Channel,
                                           boolean                       Enable)
{
    d900:	b082      	sub	sp, #8
    d902:	9001      	str	r0, [sp, #4]
    d904:	460b      	mov	r3, r1
    d906:	f88d 3003 	strb.w	r3, [sp, #3]
    d90a:	4613      	mov	r3, r2
    d90c:	f88d 3002 	strb.w	r3, [sp, #2]
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_CHIE_MASK) | FTM_CSC_CHIE((Enable == TRUE) ? 0x01U : 0x00U);
    d910:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d914:	9a01      	ldr	r2, [sp, #4]
    d916:	3301      	adds	r3, #1
    d918:	00db      	lsls	r3, r3, #3
    d91a:	4413      	add	r3, r2
    d91c:	685b      	ldr	r3, [r3, #4]
    d91e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
    d922:	f89d 3002 	ldrb.w	r3, [sp, #2]
    d926:	2b00      	cmp	r3, #0
    d928:	d001      	beq.n	d92e <Ftm_Pwm_Ip_UpdateChnInt+0x2e>
    d92a:	2140      	movs	r1, #64	; 0x40
    d92c:	e000      	b.n	d930 <Ftm_Pwm_Ip_UpdateChnInt+0x30>
    d92e:	2100      	movs	r1, #0
    d930:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d934:	430a      	orrs	r2, r1
    d936:	9901      	ldr	r1, [sp, #4]
    d938:	3301      	adds	r3, #1
    d93a:	00db      	lsls	r3, r3, #3
    d93c:	440b      	add	r3, r1
    d93e:	605a      	str	r2, [r3, #4]
}
    d940:	bf00      	nop
    d942:	b002      	add	sp, #8
    d944:	4770      	bx	lr

0000d946 <Ftm_Pwm_Ip_ClearChnEventFlag>:
 * @param[in] FtmBase The FTM base address pointer
 * @param[in] Channel The FTM peripheral channel number
 */
static inline void Ftm_Pwm_Ip_ClearChnEventFlag(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         Channel)
{
    d946:	b082      	sub	sp, #8
    d948:	9001      	str	r0, [sp, #4]
    d94a:	460b      	mov	r3, r1
    d94c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_CHF_MASK) | FTM_CSC_CHF(0U);
    d950:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d954:	9a01      	ldr	r2, [sp, #4]
    d956:	3301      	adds	r3, #1
    d958:	00db      	lsls	r3, r3, #3
    d95a:	4413      	add	r3, r2
    d95c:	685a      	ldr	r2, [r3, #4]
    d95e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d962:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    d966:	9901      	ldr	r1, [sp, #4]
    d968:	3301      	adds	r3, #1
    d96a:	00db      	lsls	r3, r3, #3
    d96c:	440b      	add	r3, r1
    d96e:	605a      	str	r2, [r3, #4]
#ifdef ERRATA_E9005
    /* Read-after-write sequence to guarantee required serialization of memory operations */
    FtmBase->CONTROLS[Channel].CSC;
#endif
}
    d970:	bf00      	nop
    d972:	b002      	add	sp, #8
    d974:	4770      	bx	lr

0000d976 <Ftm_Pwm_Ip_GetChOutputValue>:
 *
 * Implements : Ftm_Pwm_Ip_GetChOutputValue_Activity
 */
static inline boolean Ftm_Pwm_Ip_GetChOutputValue(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                               Channel)
{
    d976:	b082      	sub	sp, #8
    d978:	9001      	str	r0, [sp, #4]
    d97a:	460b      	mov	r3, r1
    d97c:	f88d 3003 	strb.w	r3, [sp, #3]
    return (FtmBase->CONTROLS[Channel].CSC & FTM_CSC_CHOV_MASK) != 0U;
    d980:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d984:	9a01      	ldr	r2, [sp, #4]
    d986:	3301      	adds	r3, #1
    d988:	00db      	lsls	r3, r3, #3
    d98a:	4413      	add	r3, r2
    d98c:	685b      	ldr	r3, [r3, #4]
    d98e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    d992:	2b00      	cmp	r3, #0
    d994:	bf14      	ite	ne
    d996:	2301      	movne	r3, #1
    d998:	2300      	moveq	r3, #0
    d99a:	b2db      	uxtb	r3, r3
}
    d99c:	4618      	mov	r0, r3
    d99e:	b002      	add	sp, #8
    d9a0:	4770      	bx	lr

0000d9a2 <Ftm_Pwm_Ip_SetChnCountVal>:
 * @param[in] Value Counter value to be set
 */
static inline void Ftm_Pwm_Ip_SetChnCountVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             uint8                         Channel,
                                             uint16                        Value)
{
    d9a2:	b082      	sub	sp, #8
    d9a4:	9001      	str	r0, [sp, #4]
    d9a6:	460b      	mov	r3, r1
    d9a8:	f88d 3003 	strb.w	r3, [sp, #3]
    d9ac:	4613      	mov	r3, r2
    d9ae:	f8ad 3000 	strh.w	r3, [sp]
    FtmBase->CONTROLS[Channel].CV = Value;
    d9b2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d9b6:	f8bd 2000 	ldrh.w	r2, [sp]
    d9ba:	9901      	ldr	r1, [sp, #4]
    d9bc:	3301      	adds	r3, #1
    d9be:	00db      	lsls	r3, r3, #3
    d9c0:	440b      	add	r3, r1
    d9c2:	609a      	str	r2, [r3, #8]
}
    d9c4:	bf00      	nop
    d9c6:	b002      	add	sp, #8
    d9c8:	4770      	bx	lr

0000d9ca <Ftm_Pwm_Ip_GetChnCountVal>:
 *
 * Implements : Ftm_Pwm_Ip_GetChnCountVal_Activity
 */
static inline uint16 Ftm_Pwm_Ip_GetChnCountVal(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                               Channel)
{
    d9ca:	b082      	sub	sp, #8
    d9cc:	9001      	str	r0, [sp, #4]
    d9ce:	460b      	mov	r3, r1
    d9d0:	f88d 3003 	strb.w	r3, [sp, #3]
    return (uint16)(FtmBase->CONTROLS[Channel].CV);
    d9d4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d9d8:	9a01      	ldr	r2, [sp, #4]
    d9da:	3301      	adds	r3, #1
    d9dc:	00db      	lsls	r3, r3, #3
    d9de:	4413      	add	r3, r2
    d9e0:	689b      	ldr	r3, [r3, #8]
    d9e2:	b29b      	uxth	r3, r3
}
    d9e4:	4618      	mov	r0, r3
    d9e6:	b002      	add	sp, #8
    d9e8:	4770      	bx	lr

0000d9ea <Ftm_Pwm_Ip_SetCounterInitVal>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    Initial value to be set
 */
static inline void Ftm_Pwm_Ip_SetCounterInitVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint16                        Value)
{
    d9ea:	b082      	sub	sp, #8
    d9ec:	9001      	str	r0, [sp, #4]
    d9ee:	460b      	mov	r3, r1
    d9f0:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->CNTIN = (FtmBase->CNTIN & ~FTM_CNTIN_INIT_MASK) | FTM_CNTIN_INIT(Value);
    d9f4:	9b01      	ldr	r3, [sp, #4]
    d9f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    d9f8:	0c1b      	lsrs	r3, r3, #16
    d9fa:	041b      	lsls	r3, r3, #16
    d9fc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    da00:	431a      	orrs	r2, r3
    da02:	9b01      	ldr	r3, [sp, #4]
    da04:	64da      	str	r2, [r3, #76]	; 0x4c
}
    da06:	bf00      	nop
    da08:	b002      	add	sp, #8
    da0a:	4770      	bx	lr

0000da0c <Ftm_Pwm_Ip_Enable>:
 *                     - TRUE : All registers including FTM-specific registers are available
 *                     - FALSE: Only the TPM-compatible registers are available
 */
static inline void Ftm_Pwm_Ip_Enable(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                     boolean                       Enable)
{
    da0c:	b082      	sub	sp, #8
    da0e:	9001      	str	r0, [sp, #4]
    da10:	460b      	mov	r3, r1
    da12:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FTMEN_MASK) | FTM_MODE_FTMEN((Enable == TRUE) ? 0x01U : 0x00U);
    da16:	9b01      	ldr	r3, [sp, #4]
    da18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    da1a:	f023 0301 	bic.w	r3, r3, #1
    da1e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    da22:	2a00      	cmp	r2, #0
    da24:	d001      	beq.n	da2a <Ftm_Pwm_Ip_Enable+0x1e>
    da26:	2201      	movs	r2, #1
    da28:	e000      	b.n	da2c <Ftm_Pwm_Ip_Enable+0x20>
    da2a:	2200      	movs	r2, #0
    da2c:	431a      	orrs	r2, r3
    da2e:	9b01      	ldr	r3, [sp, #4]
    da30:	655a      	str	r2, [r3, #84]	; 0x54
}
    da32:	bf00      	nop
    da34:	b002      	add	sp, #8
    da36:	4770      	bx	lr

0000da38 <Ftm_Pwm_Ip_SetPwmSyncMode>:
 *                     - TRUE : Software trigger can only be used for MOD and CV synchronization,
 *                            hardware trigger only for OUTMASK and FTM counter synchronization.
 */
static inline void Ftm_Pwm_Ip_SetPwmSyncMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             boolean                       Enable)
{
    da38:	b082      	sub	sp, #8
    da3a:	9001      	str	r0, [sp, #4]
    da3c:	460b      	mov	r3, r1
    da3e:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_PWMSYNC_MASK) | FTM_MODE_PWMSYNC((Enable == TRUE) ? 0x01U : 0x00U);
    da42:	9b01      	ldr	r3, [sp, #4]
    da44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    da46:	f023 0308 	bic.w	r3, r3, #8
    da4a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    da4e:	2a00      	cmp	r2, #0
    da50:	d001      	beq.n	da56 <Ftm_Pwm_Ip_SetPwmSyncMode+0x1e>
    da52:	2208      	movs	r2, #8
    da54:	e000      	b.n	da58 <Ftm_Pwm_Ip_SetPwmSyncMode+0x20>
    da56:	2200      	movs	r2, #0
    da58:	431a      	orrs	r2, r3
    da5a:	9b01      	ldr	r3, [sp, #4]
    da5c:	655a      	str	r2, [r3, #84]	; 0x54
}
    da5e:	bf00      	nop
    da60:	b002      	add	sp, #8
    da62:	4770      	bx	lr

0000da64 <Ftm_Pwm_Ip_SetMinLoadingCmd>:
 *                     - TRUE : To enable minimum loading point
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetMinLoadingCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               boolean                       Enable)
{
    da64:	b082      	sub	sp, #8
    da66:	9001      	str	r0, [sp, #4]
    da68:	460b      	mov	r3, r1
    da6a:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_CNTMIN_MASK) | FTM_SYNC_CNTMIN((Enable == TRUE) ? 0x01U : 0x00U);
    da6e:	9b01      	ldr	r3, [sp, #4]
    da70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    da72:	f023 0301 	bic.w	r3, r3, #1
    da76:	f89d 2003 	ldrb.w	r2, [sp, #3]
    da7a:	2a00      	cmp	r2, #0
    da7c:	d001      	beq.n	da82 <Ftm_Pwm_Ip_SetMinLoadingCmd+0x1e>
    da7e:	2201      	movs	r2, #1
    da80:	e000      	b.n	da84 <Ftm_Pwm_Ip_SetMinLoadingCmd+0x20>
    da82:	2200      	movs	r2, #0
    da84:	431a      	orrs	r2, r3
    da86:	9b01      	ldr	r3, [sp, #4]
    da88:	659a      	str	r2, [r3, #88]	; 0x58
}
    da8a:	bf00      	nop
    da8c:	b002      	add	sp, #8
    da8e:	4770      	bx	lr

0000da90 <Ftm_Pwm_Ip_SetMaxLoadingCmd>:
 *                     - TRUE : To enable maximum loading point
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetMaxLoadingCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               boolean                       Enable)
{
    da90:	b082      	sub	sp, #8
    da92:	9001      	str	r0, [sp, #4]
    da94:	460b      	mov	r3, r1
    da96:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_CNTMAX_MASK) | FTM_SYNC_CNTMAX((Enable == TRUE) ? 0x01U : 0x00U);
    da9a:	9b01      	ldr	r3, [sp, #4]
    da9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    da9e:	f023 0302 	bic.w	r3, r3, #2
    daa2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    daa6:	2a00      	cmp	r2, #0
    daa8:	d001      	beq.n	daae <Ftm_Pwm_Ip_SetMaxLoadingCmd+0x1e>
    daaa:	2202      	movs	r2, #2
    daac:	e000      	b.n	dab0 <Ftm_Pwm_Ip_SetMaxLoadingCmd+0x20>
    daae:	2200      	movs	r2, #0
    dab0:	431a      	orrs	r2, r3
    dab2:	9b01      	ldr	r3, [sp, #4]
    dab4:	659a      	str	r2, [r3, #88]	; 0x58
}
    dab6:	bf00      	nop
    dab8:	b002      	add	sp, #8
    daba:	4770      	bx	lr

0000dabc <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>:
 *                     - TRUE : OUTMASK register is updated only by PWM synchronization
 *                     - FALSE: OUTMASK register is updated in all rising edges of the system clock
 */
static inline void Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    dabc:	b082      	sub	sp, #8
    dabe:	9001      	str	r0, [sp, #4]
    dac0:	460b      	mov	r3, r1
    dac2:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_SYNCHOM_MASK) | FTM_SYNC_SYNCHOM((Enable == TRUE) ? 0x01U : 0x00U);
    dac6:	9b01      	ldr	r3, [sp, #4]
    dac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    daca:	f023 0308 	bic.w	r3, r3, #8
    dace:	f89d 2003 	ldrb.w	r2, [sp, #3]
    dad2:	2a00      	cmp	r2, #0
    dad4:	d001      	beq.n	dada <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd+0x1e>
    dad6:	2208      	movs	r2, #8
    dad8:	e000      	b.n	dadc <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd+0x20>
    dada:	2200      	movs	r2, #0
    dadc:	431a      	orrs	r2, r3
    dade:	9b01      	ldr	r3, [sp, #4]
    dae0:	659a      	str	r2, [r3, #88]	; 0x58
}
    dae2:	bf00      	nop
    dae4:	b002      	add	sp, #8
    dae6:	4770      	bx	lr

0000dae8 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>:
 *                           - FALSE: Disable hardware trigger from field TriggerNumber for PWM synchronization
 */
static inline void Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                        uint8                         TriggerNumber,
                                                        boolean                       Enable)
{
    dae8:	b082      	sub	sp, #8
    daea:	9001      	str	r0, [sp, #4]
    daec:	460b      	mov	r3, r1
    daee:	f88d 3003 	strb.w	r3, [sp, #3]
    daf2:	4613      	mov	r3, r2
    daf4:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    daf8:	f89d 3002 	ldrb.w	r3, [sp, #2]
    dafc:	2b00      	cmp	r3, #0
    dafe:	d00a      	beq.n	db16 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc+0x2e>
    {
        FtmBase->SYNC |= (uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber;
    db00:	9b01      	ldr	r3, [sp, #4]
    db02:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    db04:	f89d 3003 	ldrb.w	r3, [sp, #3]
    db08:	2110      	movs	r1, #16
    db0a:	fa01 f303 	lsl.w	r3, r1, r3
    db0e:	431a      	orrs	r2, r3
    db10:	9b01      	ldr	r3, [sp, #4]
    db12:	659a      	str	r2, [r3, #88]	; 0x58
    }
    else
    {
        FtmBase->SYNC &= ~((uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber);
    }
}
    db14:	e00a      	b.n	db2c <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc+0x44>
        FtmBase->SYNC &= ~((uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber);
    db16:	9b01      	ldr	r3, [sp, #4]
    db18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    db1a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    db1e:	2110      	movs	r1, #16
    db20:	fa01 f303 	lsl.w	r3, r1, r3
    db24:	43db      	mvns	r3, r3
    db26:	401a      	ands	r2, r3
    db28:	9b01      	ldr	r3, [sp, #4]
    db2a:	659a      	str	r2, [r3, #88]	; 0x58
}
    db2c:	bf00      	nop
    db2e:	b002      	add	sp, #8
    db30:	4770      	bx	lr

0000db32 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>:
 *                     - TRUE : Software trigger is selected
 *                     - FALSE: Software trigger is not selected
 */
static inline void Ftm_Pwm_Ip_SetSoftwareTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    boolean                       Enable)
{
    db32:	b082      	sub	sp, #8
    db34:	9001      	str	r0, [sp, #4]
    db36:	460b      	mov	r3, r1
    db38:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_SWSYNC_MASK) | FTM_SYNC_SWSYNC((Enable == TRUE) ? 0x01U : 0x00U);
    db3c:	9b01      	ldr	r3, [sp, #4]
    db3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    db40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    db44:	f89d 2003 	ldrb.w	r2, [sp, #3]
    db48:	2a00      	cmp	r2, #0
    db4a:	d001      	beq.n	db50 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd+0x1e>
    db4c:	2280      	movs	r2, #128	; 0x80
    db4e:	e000      	b.n	db52 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd+0x20>
    db50:	2200      	movs	r2, #0
    db52:	431a      	orrs	r2, r3
    db54:	9b01      	ldr	r3, [sp, #4]
    db56:	659a      	str	r2, [r3, #88]	; 0x58
}
    db58:	bf00      	nop
    db5a:	b002      	add	sp, #8
    db5c:	4770      	bx	lr

0000db5e <Ftm_Pwm_Ip_SetChnOutputInitStateCmd>:
 * Implements : Ftm_Pwm_Ip_SetChnOutputInitStateCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnOutputInitStateCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       uint8                         Channel,
                                                       Ftm_Pwm_Ip_OutputStateType    State)
{
    db5e:	b084      	sub	sp, #16
    db60:	9003      	str	r0, [sp, #12]
    db62:	460b      	mov	r3, r1
    db64:	9201      	str	r2, [sp, #4]
    db66:	f88d 300b 	strb.w	r3, [sp, #11]
    if (FTM_PWM_IP_OUTPUT_STATE_HIGH == State)
    db6a:	9b01      	ldr	r3, [sp, #4]
    db6c:	2b01      	cmp	r3, #1
    db6e:	d10a      	bne.n	db86 <Ftm_Pwm_Ip_SetChnOutputInitStateCmd+0x28>
    {
        FtmBase->OUTINIT |= (1UL << Channel);
    db70:	9b03      	ldr	r3, [sp, #12]
    db72:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    db74:	f89d 300b 	ldrb.w	r3, [sp, #11]
    db78:	2101      	movs	r1, #1
    db7a:	fa01 f303 	lsl.w	r3, r1, r3
    db7e:	431a      	orrs	r2, r3
    db80:	9b03      	ldr	r3, [sp, #12]
    db82:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    else
    {
        FtmBase->OUTINIT &= ~(1UL << Channel);
    }
}
    db84:	e00a      	b.n	db9c <Ftm_Pwm_Ip_SetChnOutputInitStateCmd+0x3e>
        FtmBase->OUTINIT &= ~(1UL << Channel);
    db86:	9b03      	ldr	r3, [sp, #12]
    db88:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    db8a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    db8e:	2101      	movs	r1, #1
    db90:	fa01 f303 	lsl.w	r3, r1, r3
    db94:	43db      	mvns	r3, r3
    db96:	401a      	ands	r2, r3
    db98:	9b03      	ldr	r3, [sp, #12]
    db9a:	65da      	str	r2, [r3, #92]	; 0x5c
}
    db9c:	bf00      	nop
    db9e:	b004      	add	sp, #16
    dba0:	4770      	bx	lr

0000dba2 <Ftm_Pwm_Ip_SetChnOutputMask>:
 * Implements : Ftm_Pwm_Ip_SetChnOutputMask_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnOutputMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Channel,
                                               boolean                       EnableMask)
{
    dba2:	b082      	sub	sp, #8
    dba4:	9001      	str	r0, [sp, #4]
    dba6:	460b      	mov	r3, r1
    dba8:	f88d 3003 	strb.w	r3, [sp, #3]
    dbac:	4613      	mov	r3, r2
    dbae:	f88d 3002 	strb.w	r3, [sp, #2]
    if (EnableMask)
    dbb2:	f89d 3002 	ldrb.w	r3, [sp, #2]
    dbb6:	2b00      	cmp	r3, #0
    dbb8:	d00a      	beq.n	dbd0 <Ftm_Pwm_Ip_SetChnOutputMask+0x2e>
    {
        FtmBase->OUTMASK |= 1UL << Channel;
    dbba:	9b01      	ldr	r3, [sp, #4]
    dbbc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    dbbe:	f89d 3003 	ldrb.w	r3, [sp, #3]
    dbc2:	2101      	movs	r1, #1
    dbc4:	fa01 f303 	lsl.w	r3, r1, r3
    dbc8:	431a      	orrs	r2, r3
    dbca:	9b01      	ldr	r3, [sp, #4]
    dbcc:	661a      	str	r2, [r3, #96]	; 0x60
    }
    else
    {
        FtmBase->OUTMASK &= ~(1UL << Channel);
    }
}
    dbce:	e00a      	b.n	dbe6 <Ftm_Pwm_Ip_SetChnOutputMask+0x44>
        FtmBase->OUTMASK &= ~(1UL << Channel);
    dbd0:	9b01      	ldr	r3, [sp, #4]
    dbd2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    dbd4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    dbd8:	2101      	movs	r1, #1
    dbda:	fa01 f303 	lsl.w	r3, r1, r3
    dbde:	43db      	mvns	r3, r3
    dbe0:	401a      	ands	r2, r3
    dbe2:	9b01      	ldr	r3, [sp, #4]
    dbe4:	661a      	str	r2, [r3, #96]	; 0x60
}
    dbe6:	bf00      	nop
    dbe8:	b002      	add	sp, #8
    dbea:	4770      	bx	lr

0000dbec <Ftm_Pwm_Ip_SetOutmaskReg>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] RegVal   Value to be written to the register
 */
static inline void Ftm_Pwm_Ip_SetOutmaskReg(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                            uint32                        RegVal)
{
    dbec:	b082      	sub	sp, #8
    dbee:	9001      	str	r0, [sp, #4]
    dbf0:	9100      	str	r1, [sp, #0]
    FtmBase->OUTMASK = ((FtmBase->OUTMASK & (uint32)(~RegVal))| RegVal);
    dbf2:	9b01      	ldr	r3, [sp, #4]
    dbf4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    dbf6:	9b00      	ldr	r3, [sp, #0]
    dbf8:	43db      	mvns	r3, r3
    dbfa:	401a      	ands	r2, r3
    dbfc:	9b00      	ldr	r3, [sp, #0]
    dbfe:	431a      	orrs	r2, r3
    dc00:	9b01      	ldr	r3, [sp, #4]
    dc02:	661a      	str	r2, [r3, #96]	; 0x60
}
    dc04:	bf00      	nop
    dc06:	b002      	add	sp, #8
    dc08:	4770      	bx	lr

0000dc0a <Ftm_Pwm_Ip_ClearOutmaskReg>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] RegVal   Value to be written to the register
 */
static inline void Ftm_Pwm_Ip_ClearOutmaskReg(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              uint32                        RegVal)
{
    dc0a:	b082      	sub	sp, #8
    dc0c:	9001      	str	r0, [sp, #4]
    dc0e:	9100      	str	r1, [sp, #0]
    FtmBase->OUTMASK = ((FtmBase->OUTMASK & (uint32)(~RegVal))|0U);
    dc10:	9b01      	ldr	r3, [sp, #4]
    dc12:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    dc14:	9b00      	ldr	r3, [sp, #0]
    dc16:	43db      	mvns	r3, r3
    dc18:	401a      	ands	r2, r3
    dc1a:	9b01      	ldr	r3, [sp, #4]
    dc1c:	661a      	str	r2, [r3, #96]	; 0x60
}
    dc1e:	bf00      	nop
    dc20:	b002      	add	sp, #8
    dc22:	4770      	bx	lr

0000dc24 <Ftm_Pwm_Ip_SetDualChnCombineCmd>:
 *                      - FALSE: Channels pair are independent
 */
static inline void Ftm_Pwm_Ip_SetDualChnCombineCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   uint8                         ChPairId,
                                                   boolean                       Enable)
{
    dc24:	b082      	sub	sp, #8
    dc26:	9001      	str	r0, [sp, #4]
    dc28:	460b      	mov	r3, r1
    dc2a:	f88d 3003 	strb.w	r3, [sp, #3]
    dc2e:	4613      	mov	r3, r2
    dc30:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    dc34:	f89d 3002 	ldrb.w	r3, [sp, #2]
    dc38:	2b00      	cmp	r3, #0
    dc3a:	d00b      	beq.n	dc54 <Ftm_Pwm_Ip_SetDualChnCombineCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    dc3c:	9b01      	ldr	r3, [sp, #4]
    dc3e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    dc40:	f89d 3003 	ldrb.w	r3, [sp, #3]
    dc44:	00db      	lsls	r3, r3, #3
    dc46:	2101      	movs	r1, #1
    dc48:	fa01 f303 	lsl.w	r3, r1, r3
    dc4c:	431a      	orrs	r2, r3
    dc4e:	9b01      	ldr	r3, [sp, #4]
    dc50:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    dc52:	e00b      	b.n	dc6c <Ftm_Pwm_Ip_SetDualChnCombineCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    dc54:	9b01      	ldr	r3, [sp, #4]
    dc56:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    dc58:	f89d 3003 	ldrb.w	r3, [sp, #3]
    dc5c:	00db      	lsls	r3, r3, #3
    dc5e:	2101      	movs	r1, #1
    dc60:	fa01 f303 	lsl.w	r3, r1, r3
    dc64:	43db      	mvns	r3, r3
    dc66:	401a      	ands	r2, r3
    dc68:	9b01      	ldr	r3, [sp, #4]
    dc6a:	665a      	str	r2, [r3, #100]	; 0x64
}
    dc6c:	bf00      	nop
    dc6e:	b002      	add	sp, #8
    dc70:	4770      	bx	lr

0000dc72 <Ftm_Pwm_Ip_GetDualChnCombineCmd>:
 *         - TRUE : Channels pair are combined
 *         - FALSE: Channels pair are independent
 */
static inline boolean Ftm_Pwm_Ip_GetDualChnCombineCmd(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8 ChPairId)
{
    dc72:	b082      	sub	sp, #8
    dc74:	9001      	str	r0, [sp, #4]
    dc76:	460b      	mov	r3, r1
    dc78:	f88d 3003 	strb.w	r3, [sp, #3]
    return (FtmBase->COMBINE & ((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) != 0U;
    dc7c:	9b01      	ldr	r3, [sp, #4]
    dc7e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    dc80:	f89d 3003 	ldrb.w	r3, [sp, #3]
    dc84:	00db      	lsls	r3, r3, #3
    dc86:	fa22 f303 	lsr.w	r3, r2, r3
    dc8a:	f003 0301 	and.w	r3, r3, #1
    dc8e:	2b00      	cmp	r3, #0
    dc90:	bf14      	ite	ne
    dc92:	2301      	movne	r3, #1
    dc94:	2300      	moveq	r3, #0
    dc96:	b2db      	uxtb	r3, r3
}
    dc98:	4618      	mov	r0, r3
    dc9a:	b002      	add	sp, #8
    dc9c:	4770      	bx	lr

0000dc9e <Ftm_Pwm_Ip_SetDualChnCompCmd>:
 *                      - FALSE: The channel (n+1) output is the same as the channel (n) output
 */
static inline void Ftm_Pwm_Ip_SetDualChnCompCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         ChPairId,
                                                boolean                       Enable)
{
    dc9e:	b082      	sub	sp, #8
    dca0:	9001      	str	r0, [sp, #4]
    dca2:	460b      	mov	r3, r1
    dca4:	f88d 3003 	strb.w	r3, [sp, #3]
    dca8:	4613      	mov	r3, r2
    dcaa:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable == TRUE)
    dcae:	f89d 3002 	ldrb.w	r3, [sp, #2]
    dcb2:	2b00      	cmp	r3, #0
    dcb4:	d00b      	beq.n	dcce <Ftm_Pwm_Ip_SetDualChnCompCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    dcb6:	9b01      	ldr	r3, [sp, #4]
    dcb8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    dcba:	f89d 3003 	ldrb.w	r3, [sp, #3]
    dcbe:	00db      	lsls	r3, r3, #3
    dcc0:	2102      	movs	r1, #2
    dcc2:	fa01 f303 	lsl.w	r3, r1, r3
    dcc6:	431a      	orrs	r2, r3
    dcc8:	9b01      	ldr	r3, [sp, #4]
    dcca:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    dccc:	e00b      	b.n	dce6 <Ftm_Pwm_Ip_SetDualChnCompCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    dcce:	9b01      	ldr	r3, [sp, #4]
    dcd0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    dcd2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    dcd6:	00db      	lsls	r3, r3, #3
    dcd8:	2102      	movs	r1, #2
    dcda:	fa01 f303 	lsl.w	r3, r1, r3
    dcde:	43db      	mvns	r3, r3
    dce0:	401a      	ands	r2, r3
    dce2:	9b01      	ldr	r3, [sp, #4]
    dce4:	665a      	str	r2, [r3, #100]	; 0x64
}
    dce6:	bf00      	nop
    dce8:	b002      	add	sp, #8
    dcea:	4770      	bx	lr

0000dcec <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd>:
 *                      - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetDualChnDeadtimeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         ChPairId,
                                                    boolean                       Enable)
{
    dcec:	b082      	sub	sp, #8
    dcee:	9001      	str	r0, [sp, #4]
    dcf0:	460b      	mov	r3, r1
    dcf2:	f88d 3003 	strb.w	r3, [sp, #3]
    dcf6:	4613      	mov	r3, r2
    dcf8:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    dcfc:	f89d 3002 	ldrb.w	r3, [sp, #2]
    dd00:	2b00      	cmp	r3, #0
    dd02:	d00b      	beq.n	dd1c <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    dd04:	9b01      	ldr	r3, [sp, #4]
    dd06:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    dd08:	f89d 3003 	ldrb.w	r3, [sp, #3]
    dd0c:	00db      	lsls	r3, r3, #3
    dd0e:	2110      	movs	r1, #16
    dd10:	fa01 f303 	lsl.w	r3, r1, r3
    dd14:	431a      	orrs	r2, r3
    dd16:	9b01      	ldr	r3, [sp, #4]
    dd18:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    dd1a:	e00b      	b.n	dd34 <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    dd1c:	9b01      	ldr	r3, [sp, #4]
    dd1e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    dd20:	f89d 3003 	ldrb.w	r3, [sp, #3]
    dd24:	00db      	lsls	r3, r3, #3
    dd26:	2110      	movs	r1, #16
    dd28:	fa01 f303 	lsl.w	r3, r1, r3
    dd2c:	43db      	mvns	r3, r3
    dd2e:	401a      	ands	r2, r3
    dd30:	9b01      	ldr	r3, [sp, #4]
    dd32:	665a      	str	r2, [r3, #100]	; 0x64
}
    dd34:	bf00      	nop
    dd36:	b002      	add	sp, #8
    dd38:	4770      	bx	lr

0000dd3a <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>:
 *                      - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   uint8                         ChPairId,
                                                   boolean                       Enable)
{
    dd3a:	b082      	sub	sp, #8
    dd3c:	9001      	str	r0, [sp, #4]
    dd3e:	460b      	mov	r3, r1
    dd40:	f88d 3003 	strb.w	r3, [sp, #3]
    dd44:	4613      	mov	r3, r2
    dd46:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    dd4a:	f89d 3002 	ldrb.w	r3, [sp, #2]
    dd4e:	2b00      	cmp	r3, #0
    dd50:	d00b      	beq.n	dd6a <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    dd52:	9b01      	ldr	r3, [sp, #4]
    dd54:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    dd56:	f89d 3003 	ldrb.w	r3, [sp, #3]
    dd5a:	00db      	lsls	r3, r3, #3
    dd5c:	2120      	movs	r1, #32
    dd5e:	fa01 f303 	lsl.w	r3, r1, r3
    dd62:	431a      	orrs	r2, r3
    dd64:	9b01      	ldr	r3, [sp, #4]
    dd66:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    dd68:	e00b      	b.n	dd82 <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    dd6a:	9b01      	ldr	r3, [sp, #4]
    dd6c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    dd6e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    dd72:	00db      	lsls	r3, r3, #3
    dd74:	2120      	movs	r1, #32
    dd76:	fa01 f303 	lsl.w	r3, r1, r3
    dd7a:	43db      	mvns	r3, r3
    dd7c:	401a      	ands	r2, r3
    dd7e:	9b01      	ldr	r3, [sp, #4]
    dd80:	665a      	str	r2, [r3, #100]	; 0x64
}
    dd82:	bf00      	nop
    dd84:	b002      	add	sp, #8
    dd86:	4770      	bx	lr

0000dd88 <Ftm_Pwm_Ip_SetDualChnMCombineCmd>:
 *                      - FALSE: To disable modified combine
 */
static inline void Ftm_Pwm_Ip_SetDualChnMCombineCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         ChPairId,
                                                    boolean                       Enable)
{
    dd88:	b082      	sub	sp, #8
    dd8a:	9001      	str	r0, [sp, #4]
    dd8c:	460b      	mov	r3, r1
    dd8e:	f88d 3003 	strb.w	r3, [sp, #3]
    dd92:	4613      	mov	r3, r2
    dd94:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    dd98:	f89d 3002 	ldrb.w	r3, [sp, #2]
    dd9c:	2b00      	cmp	r3, #0
    dd9e:	d00b      	beq.n	ddb8 <Ftm_Pwm_Ip_SetDualChnMCombineCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    dda0:	9b01      	ldr	r3, [sp, #4]
    dda2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    dda4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    dda8:	00db      	lsls	r3, r3, #3
    ddaa:	2180      	movs	r1, #128	; 0x80
    ddac:	fa01 f303 	lsl.w	r3, r1, r3
    ddb0:	431a      	orrs	r2, r3
    ddb2:	9b01      	ldr	r3, [sp, #4]
    ddb4:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    ddb6:	e00b      	b.n	ddd0 <Ftm_Pwm_Ip_SetDualChnMCombineCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    ddb8:	9b01      	ldr	r3, [sp, #4]
    ddba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    ddbc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ddc0:	00db      	lsls	r3, r3, #3
    ddc2:	2180      	movs	r1, #128	; 0x80
    ddc4:	fa01 f303 	lsl.w	r3, r1, r3
    ddc8:	43db      	mvns	r3, r3
    ddca:	401a      	ands	r2, r3
    ddcc:	9b01      	ldr	r3, [sp, #4]
    ddce:	665a      	str	r2, [r3, #100]	; 0x64
}
    ddd0:	bf00      	nop
    ddd2:	b002      	add	sp, #8
    ddd4:	4770      	bx	lr

0000ddd6 <Ftm_Pwm_Ip_SetDeadtimeCount>:
 *                     - 2U : 2 count is inserted
 *                     - ... up to a possible 63 counts
 */
static inline void Ftm_Pwm_Ip_SetDeadtimeCount(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Count)
{
    ddd6:	b082      	sub	sp, #8
    ddd8:	9001      	str	r0, [sp, #4]
    ddda:	460b      	mov	r3, r1
    dddc:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTVAL_MASK) | FTM_DEADTIME_DTVAL(Count);
    dde0:	9b01      	ldr	r3, [sp, #4]
    dde2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    dde4:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
    dde8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ddec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ddf0:	431a      	orrs	r2, r3
    ddf2:	9b01      	ldr	r3, [sp, #4]
    ddf4:	669a      	str	r2, [r3, #104]	; 0x68
}
    ddf6:	bf00      	nop
    ddf8:	b002      	add	sp, #8
    ddfa:	4770      	bx	lr

0000ddfc <Ftm_Pwm_Ip_SetDeadtimePrescaler>:
 *                    - FTM_DEADTIME_DIV_4 : Divide by 4
 *                    - FTM_DEADTIME_DIV_16: Divide by 16
 */
static inline void Ftm_Pwm_Ip_SetDeadtimePrescaler(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   Ftm_Pwm_Ip_DeadtimePrescalerType Divider)
{
    ddfc:	b082      	sub	sp, #8
    ddfe:	9001      	str	r0, [sp, #4]
    de00:	9100      	str	r1, [sp, #0]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTPS_MASK) | FTM_DEADTIME_DTPS((uint8)Divider);
    de02:	9b01      	ldr	r3, [sp, #4]
    de04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    de06:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
    de0a:	9b00      	ldr	r3, [sp, #0]
    de0c:	b2db      	uxtb	r3, r3
    de0e:	019b      	lsls	r3, r3, #6
    de10:	b2db      	uxtb	r3, r3
    de12:	431a      	orrs	r2, r3
    de14:	9b01      	ldr	r3, [sp, #4]
    de16:	669a      	str	r2, [r3, #104]	; 0x68
}
    de18:	bf00      	nop
    de1a:	b002      	add	sp, #8
    de1c:	4770      	bx	lr

0000de1e <Ftm_Pwm_Ip_GetDeadtimePrescaler>:
 * @brief Get the FTM dead time divider.
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline uint8 Ftm_Pwm_Ip_GetDeadtimePrescaler(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    de1e:	b082      	sub	sp, #8
    de20:	9001      	str	r0, [sp, #4]
    return (uint8)(FtmBase->DEADTIME & FTM_DEADTIME_DTPS_MASK)>>FTM_DEADTIME_DTPS_SHIFT;
    de22:	9b01      	ldr	r3, [sp, #4]
    de24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    de26:	b2db      	uxtb	r3, r3
    de28:	119b      	asrs	r3, r3, #6
    de2a:	b2db      	uxtb	r3, r3
    de2c:	f003 0303 	and.w	r3, r3, #3
    de30:	b2db      	uxtb	r3, r3
}
    de32:	4618      	mov	r0, r3
    de34:	b002      	add	sp, #8
    de36:	4770      	bx	lr

0000de38 <Ftm_Pwm_Ip_SetExtDeadtimeValue>:
 * @param[in] FtmBase The FTM base address pointer
 * @param[in] Value The FTM peripheral extend pre-scale divider
 */
static inline void Ftm_Pwm_Ip_SetExtDeadtimeValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         Value)
{
    de38:	b082      	sub	sp, #8
    de3a:	9001      	str	r0, [sp, #4]
    de3c:	460b      	mov	r3, r1
    de3e:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTVALEX_MASK) | FTM_DEADTIME_DTVALEX(Value);
    de42:	9b01      	ldr	r3, [sp, #4]
    de44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    de46:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
    de4a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    de4e:	041b      	lsls	r3, r3, #16
    de50:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    de54:	431a      	orrs	r2, r3
    de56:	9b01      	ldr	r3, [sp, #4]
    de58:	669a      	str	r2, [r3, #104]	; 0x68
}
    de5a:	bf00      	nop
    de5c:	b002      	add	sp, #8
    de5e:	4770      	bx	lr

0000de60 <Ftm_Pwm_Ip_SetInitTriggerCmd>:
 *                     - TRUE : To enable
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetInitTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                boolean Enable)
{
    de60:	b082      	sub	sp, #8
    de62:	9001      	str	r0, [sp, #4]
    de64:	460b      	mov	r3, r1
    de66:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->EXTTRIG = (FtmBase->EXTTRIG & ~FTM_EXTTRIG_INITTRIGEN_MASK) | FTM_EXTTRIG_INITTRIGEN((Enable == TRUE) ? 0x01U : 0x00U);
    de6a:	9b01      	ldr	r3, [sp, #4]
    de6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    de6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    de72:	f89d 2003 	ldrb.w	r2, [sp, #3]
    de76:	2a00      	cmp	r2, #0
    de78:	d001      	beq.n	de7e <Ftm_Pwm_Ip_SetInitTriggerCmd+0x1e>
    de7a:	2240      	movs	r2, #64	; 0x40
    de7c:	e000      	b.n	de80 <Ftm_Pwm_Ip_SetInitTriggerCmd+0x20>
    de7e:	2200      	movs	r2, #0
    de80:	431a      	orrs	r2, r3
    de82:	9b01      	ldr	r3, [sp, #4]
    de84:	66da      	str	r2, [r3, #108]	; 0x6c
}
    de86:	bf00      	nop
    de88:	b002      	add	sp, #8
    de8a:	4770      	bx	lr

0000de8c <Ftm_Pwm_Ip_DisableTriggerMask>:
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_DisableTriggerMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                 uint32                        TriggerMask)
{
    de8c:	b082      	sub	sp, #8
    de8e:	9001      	str	r0, [sp, #4]
    de90:	9100      	str	r1, [sp, #0]
    FtmBase->EXTTRIG = ((FtmBase->EXTTRIG & ~TriggerMask) | (0U));
    de92:	9b01      	ldr	r3, [sp, #4]
    de94:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    de96:	9b00      	ldr	r3, [sp, #0]
    de98:	43db      	mvns	r3, r3
    de9a:	401a      	ands	r2, r3
    de9c:	9b01      	ldr	r3, [sp, #4]
    de9e:	66da      	str	r2, [r3, #108]	; 0x6c
}
    dea0:	bf00      	nop
    dea2:	b002      	add	sp, #8
    dea4:	4770      	bx	lr

0000dea6 <Ftm_Pwm_Ip_EnableTriggerMask>:
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_EnableTriggerMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint32                        TriggerMask)
{
    dea6:	b082      	sub	sp, #8
    dea8:	9001      	str	r0, [sp, #4]
    deaa:	9100      	str	r1, [sp, #0]
    FtmBase->EXTTRIG = ((FtmBase->EXTTRIG & ~TriggerMask) | TriggerMask);
    deac:	9b01      	ldr	r3, [sp, #4]
    deae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    deb0:	9b00      	ldr	r3, [sp, #0]
    deb2:	43db      	mvns	r3, r3
    deb4:	401a      	ands	r2, r3
    deb6:	9b00      	ldr	r3, [sp, #0]
    deb8:	431a      	orrs	r2, r3
    deba:	9b01      	ldr	r3, [sp, #4]
    debc:	66da      	str	r2, [r3, #108]	; 0x6c
}
    debe:	bf00      	nop
    dec0:	b002      	add	sp, #8
    dec2:	4770      	bx	lr

0000dec4 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>:
 *                      - FALSE  : The channel polarity is active high
 */
static inline void Ftm_Pwm_Ip_SetChnOutputPolarityCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8                         Channel,
                                                      Ftm_Pwm_Ip_PolarityType       Polarity)
{
    dec4:	b084      	sub	sp, #16
    dec6:	9003      	str	r0, [sp, #12]
    dec8:	460b      	mov	r3, r1
    deca:	9201      	str	r2, [sp, #4]
    decc:	f88d 300b 	strb.w	r3, [sp, #11]
    if (FTM_PWM_IP_POLARITY_HIGH == Polarity)
    ded0:	9b01      	ldr	r3, [sp, #4]
    ded2:	2b00      	cmp	r3, #0
    ded4:	d10b      	bne.n	deee <Ftm_Pwm_Ip_SetChnOutputPolarityCmd+0x2a>
    {
        FtmBase->POL &= ~(1UL << Channel);
    ded6:	9b03      	ldr	r3, [sp, #12]
    ded8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    deda:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dede:	2101      	movs	r1, #1
    dee0:	fa01 f303 	lsl.w	r3, r1, r3
    dee4:	43db      	mvns	r3, r3
    dee6:	401a      	ands	r2, r3
    dee8:	9b03      	ldr	r3, [sp, #12]
    deea:	671a      	str	r2, [r3, #112]	; 0x70
    }
    else
    {
        FtmBase->POL |= 1UL << Channel;
    }
}
    deec:	e009      	b.n	df02 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd+0x3e>
        FtmBase->POL |= 1UL << Channel;
    deee:	9b03      	ldr	r3, [sp, #12]
    def0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    def2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    def6:	2101      	movs	r1, #1
    def8:	fa01 f303 	lsl.w	r3, r1, r3
    defc:	431a      	orrs	r2, r3
    defe:	9b03      	ldr	r3, [sp, #12]
    df00:	671a      	str	r2, [r3, #112]	; 0x70
}
    df02:	bf00      	nop
    df04:	b004      	add	sp, #16
    df06:	4770      	bx	lr

0000df08 <Ftm_Pwm_Ip_GetChnOutputPolarity>:
 *            - FTM_PWM_IP_POLARITY_LOW : The channel polarity is active low
 *            - FTM_PWM_IP_POLARITY_HIGH  : The channel polarity is active high
 */
static inline Ftm_Pwm_Ip_PolarityType Ftm_Pwm_Ip_GetChnOutputPolarity(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                                      uint8                               Channel)
{
    df08:	b082      	sub	sp, #8
    df0a:	9001      	str	r0, [sp, #4]
    df0c:	460b      	mov	r3, r1
    df0e:	f88d 3003 	strb.w	r3, [sp, #3]
    return (((FtmBase->POL >> Channel) & 1U) == 1U)? FTM_PWM_IP_POLARITY_LOW : FTM_PWM_IP_POLARITY_HIGH;
    df12:	9b01      	ldr	r3, [sp, #4]
    df14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    df16:	f89d 3003 	ldrb.w	r3, [sp, #3]
    df1a:	fa22 f303 	lsr.w	r3, r2, r3
    df1e:	f003 0301 	and.w	r3, r3, #1
    df22:	2b01      	cmp	r3, #1
    df24:	bf0c      	ite	eq
    df26:	2301      	moveq	r3, #1
    df28:	2300      	movne	r3, #0
    df2a:	b2db      	uxtb	r3, r3
}
    df2c:	4618      	mov	r0, r3
    df2e:	b002      	add	sp, #8
    df30:	4770      	bx	lr

0000df32 <Ftm_Pwm_Ip_SetLoadFreq>:
 *
 * Implements : Ftm_Pwm_Ip_SetLoadFreq_Activity
 */
static inline void Ftm_Pwm_Ip_SetLoadFreq(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                          uint8                         Val)
{
    df32:	b082      	sub	sp, #8
    df34:	9001      	str	r0, [sp, #4]
    df36:	460b      	mov	r3, r1
    df38:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_LDFQ_MASK) | FTM_CONF_LDFQ(Val);
    df3c:	9b01      	ldr	r3, [sp, #4]
    df3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    df42:	f023 021f 	bic.w	r2, r3, #31
    df46:	f89d 3003 	ldrb.w	r3, [sp, #3]
    df4a:	f003 031f 	and.w	r3, r3, #31
    df4e:	431a      	orrs	r2, r3
    df50:	9b01      	ldr	r3, [sp, #4]
    df52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    df56:	bf00      	nop
    df58:	b002      	add	sp, #8
    df5a:	4770      	bx	lr

0000df5c <Ftm_Pwm_Ip_SetBdmMode>:
 *                                        FTM channels in functional mode, writes to MOD,CNTIN and C(n)V
 *                                        registers is in fully functional mode
 */
static inline void Ftm_Pwm_Ip_SetBdmMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         Ftm_Pwm_Ip_DebugModeType      Val)
{
    df5c:	b082      	sub	sp, #8
    df5e:	9001      	str	r0, [sp, #4]
    df60:	9100      	str	r1, [sp, #0]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_BDMMODE_MASK) | FTM_CONF_BDMMODE(Val);
    df62:	9b01      	ldr	r3, [sp, #4]
    df64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    df68:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
    df6c:	9b00      	ldr	r3, [sp, #0]
    df6e:	019b      	lsls	r3, r3, #6
    df70:	b2db      	uxtb	r3, r3
    df72:	431a      	orrs	r2, r3
    df74:	9b01      	ldr	r3, [sp, #4]
    df76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    df7a:	bf00      	nop
    df7c:	b002      	add	sp, #8
    df7e:	4770      	bx	lr

0000df80 <Ftm_Pwm_Ip_SetInitTriggerMode>:
 *
 * Implements : Ftm_Pwm_Ip_SetInitTrigOnReloadCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetInitTriggerMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                 Ftm_Pwm_Ip_InitTriggModeType  InitTrigMode)
{
    df80:	b082      	sub	sp, #8
    df82:	9001      	str	r0, [sp, #4]
    df84:	9100      	str	r1, [sp, #0]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_ITRIGR_MASK) | FTM_CONF_ITRIGR(InitTrigMode);
    df86:	9b01      	ldr	r3, [sp, #4]
    df88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    df8c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
    df90:	9b00      	ldr	r3, [sp, #0]
    df92:	02db      	lsls	r3, r3, #11
    df94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    df98:	431a      	orrs	r2, r3
    df9a:	9b01      	ldr	r3, [sp, #4]
    df9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    dfa0:	bf00      	nop
    dfa2:	b002      	add	sp, #8
    dfa4:	4770      	bx	lr

0000dfa6 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd>:
 *                     - TRUE : FTM does not clear the TRIGx bit when the hardware trigger j is detected
 *                     - FALSE: FTM clears the TRIGx bit when the hardware trigger j is detected
 */
static inline void Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      boolean                       Enable)
{
    dfa6:	b082      	sub	sp, #8
    dfa8:	9001      	str	r0, [sp, #4]
    dfaa:	460b      	mov	r3, r1
    dfac:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWTRIGMODE_MASK) | FTM_SYNCONF_HWTRIGMODE((Enable == TRUE) ? 0x01U : 0x00U);
    dfb0:	9b01      	ldr	r3, [sp, #4]
    dfb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    dfb6:	f023 0301 	bic.w	r3, r3, #1
    dfba:	f89d 2003 	ldrb.w	r2, [sp, #3]
    dfbe:	2a00      	cmp	r2, #0
    dfc0:	d001      	beq.n	dfc6 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd+0x20>
    dfc2:	2201      	movs	r2, #1
    dfc4:	e000      	b.n	dfc8 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd+0x22>
    dfc6:	2200      	movs	r2, #0
    dfc8:	431a      	orrs	r2, r3
    dfca:	9b01      	ldr	r3, [sp, #4]
    dfcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    dfd0:	bf00      	nop
    dfd2:	b002      	add	sp, #8
    dfd4:	4770      	bx	lr

0000dfd6 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd>:
 *                     - TRUE : CNTIN register is updated by PWM sync
 *                     - FALSE: CNTIN register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                     boolean                       Enable)
{
    dfd6:	b082      	sub	sp, #8
    dfd8:	9001      	str	r0, [sp, #4]
    dfda:	460b      	mov	r3, r1
    dfdc:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_CNTINC_MASK) | FTM_SYNCONF_CNTINC((Enable == TRUE) ? 0x01U : 0x00U);
    dfe0:	9b01      	ldr	r3, [sp, #4]
    dfe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    dfe6:	f023 0304 	bic.w	r3, r3, #4
    dfea:	f89d 2003 	ldrb.w	r2, [sp, #3]
    dfee:	2a00      	cmp	r2, #0
    dff0:	d001      	beq.n	dff6 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd+0x20>
    dff2:	2204      	movs	r2, #4
    dff4:	e000      	b.n	dff8 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd+0x22>
    dff6:	2200      	movs	r2, #0
    dff8:	431a      	orrs	r2, r3
    dffa:	9b01      	ldr	r3, [sp, #4]
    dffc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    e000:	bf00      	nop
    e002:	b002      	add	sp, #8
    e004:	4770      	bx	lr

0000e006 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd>:
 *                     - TRUE : INVCTRL register is updated by PWM sync
 *                     - FALSE: INVCTRL register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    e006:	b082      	sub	sp, #8
    e008:	9001      	str	r0, [sp, #4]
    e00a:	460b      	mov	r3, r1
    e00c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_INVC_MASK) | FTM_SYNCONF_INVC((Enable == TRUE) ? 0x01U : 0x00U);
    e010:	9b01      	ldr	r3, [sp, #4]
    e012:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    e016:	f023 0310 	bic.w	r3, r3, #16
    e01a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e01e:	2a00      	cmp	r2, #0
    e020:	d001      	beq.n	e026 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd+0x20>
    e022:	2210      	movs	r2, #16
    e024:	e000      	b.n	e028 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd+0x22>
    e026:	2200      	movs	r2, #0
    e028:	431a      	orrs	r2, r3
    e02a:	9b01      	ldr	r3, [sp, #4]
    e02c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    e030:	bf00      	nop
    e032:	b002      	add	sp, #8
    e034:	4770      	bx	lr

0000e036 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd>:
 *                     - TRUE : SWOCTRL register is updated by PWM sync
 *                     - FALSE: SWOCTRL register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    e036:	b082      	sub	sp, #8
    e038:	9001      	str	r0, [sp, #4]
    e03a:	460b      	mov	r3, r1
    e03c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWOC_MASK) | FTM_SYNCONF_SWOC((Enable == TRUE) ? 0x01U : 0x00U);
    e040:	9b01      	ldr	r3, [sp, #4]
    e042:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    e046:	f023 0320 	bic.w	r3, r3, #32
    e04a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e04e:	2a00      	cmp	r2, #0
    e050:	d001      	beq.n	e056 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd+0x20>
    e052:	2220      	movs	r2, #32
    e054:	e000      	b.n	e058 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd+0x22>
    e056:	2200      	movs	r2, #0
    e058:	431a      	orrs	r2, r3
    e05a:	9b01      	ldr	r3, [sp, #4]
    e05c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    e060:	bf00      	nop
    e062:	b002      	add	sp, #8
    e064:	4770      	bx	lr

0000e066 <Ftm_Pwm_Ip_SetPwmSyncModeCmd>:
 *                     - TRUE : Enhanced PWM synchronization is selected
 *                     - FALSE: Legacy PWM synchronization is selected
 */
static inline void Ftm_Pwm_Ip_SetPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                boolean                       Mode)
{
    e066:	b082      	sub	sp, #8
    e068:	9001      	str	r0, [sp, #4]
    e06a:	460b      	mov	r3, r1
    e06c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SYNCMODE_MASK) | FTM_SYNCONF_SYNCMODE((Mode == TRUE) ? 0x01U : 0x00U);
    e070:	9b01      	ldr	r3, [sp, #4]
    e072:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    e076:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    e07a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e07e:	2a00      	cmp	r2, #0
    e080:	d001      	beq.n	e086 <Ftm_Pwm_Ip_SetPwmSyncModeCmd+0x20>
    e082:	2280      	movs	r2, #128	; 0x80
    e084:	e000      	b.n	e088 <Ftm_Pwm_Ip_SetPwmSyncModeCmd+0x22>
    e086:	2200      	movs	r2, #0
    e088:	431a      	orrs	r2, r3
    e08a:	9b01      	ldr	r3, [sp, #4]
    e08c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    e090:	bf00      	nop
    e092:	b002      	add	sp, #8
    e094:	4770      	bx	lr

0000e096 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates FTM counter sync
 *                     - FALSE: The software trigger does not activate FTM counter sync
 */
static inline void Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean Enable)
{
    e096:	b082      	sub	sp, #8
    e098:	9001      	str	r0, [sp, #4]
    e09a:	460b      	mov	r3, r1
    e09c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWRSTCNT_MASK) | FTM_SYNCONF_SWRSTCNT((Enable == TRUE) ? 0x01U : 0x00U);
    e0a0:	9b01      	ldr	r3, [sp, #4]
    e0a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    e0a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    e0aa:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e0ae:	2a00      	cmp	r2, #0
    e0b0:	d002      	beq.n	e0b8 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd+0x22>
    e0b2:	f44f 7280 	mov.w	r2, #256	; 0x100
    e0b6:	e000      	b.n	e0ba <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd+0x24>
    e0b8:	2200      	movs	r2, #0
    e0ba:	431a      	orrs	r2, r3
    e0bc:	9b01      	ldr	r3, [sp, #4]
    e0be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    e0c2:	bf00      	nop
    e0c4:	b002      	add	sp, #8
    e0c6:	4770      	bx	lr

0000e0c8 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates FTM MOD, CNTIN and CV registers sync
 *                     - FALSE: The software trigger does not activate FTM MOD, CNTIN and CV registers sync
 */
static inline void Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                               boolean                       Enable)
{
    e0c8:	b082      	sub	sp, #8
    e0ca:	9001      	str	r0, [sp, #4]
    e0cc:	460b      	mov	r3, r1
    e0ce:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWWRBUF_MASK) | FTM_SYNCONF_SWWRBUF((Enable == TRUE) ? 0x01U : 0x00U);
    e0d2:	9b01      	ldr	r3, [sp, #4]
    e0d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    e0d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    e0dc:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e0e0:	2a00      	cmp	r2, #0
    e0e2:	d002      	beq.n	e0ea <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd+0x22>
    e0e4:	f44f 7200 	mov.w	r2, #512	; 0x200
    e0e8:	e000      	b.n	e0ec <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd+0x24>
    e0ea:	2200      	movs	r2, #0
    e0ec:	431a      	orrs	r2, r3
    e0ee:	9b01      	ldr	r3, [sp, #4]
    e0f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    e0f4:	bf00      	nop
    e0f6:	b002      	add	sp, #8
    e0f8:	4770      	bx	lr

0000e0fa <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates OUTMASK register sync
 *                     - FALSE: The software trigger does not activate OUTMASK register sync
 */
static inline void Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    e0fa:	b082      	sub	sp, #8
    e0fc:	9001      	str	r0, [sp, #4]
    e0fe:	460b      	mov	r3, r1
    e100:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWOM_MASK) | FTM_SYNCONF_SWOM((Enable == TRUE) ? 0x01U : 0x00U);
    e104:	9b01      	ldr	r3, [sp, #4]
    e106:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    e10a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    e10e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e112:	2a00      	cmp	r2, #0
    e114:	d002      	beq.n	e11c <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd+0x22>
    e116:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e11a:	e000      	b.n	e11e <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd+0x24>
    e11c:	2200      	movs	r2, #0
    e11e:	431a      	orrs	r2, r3
    e120:	9b01      	ldr	r3, [sp, #4]
    e122:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    e126:	bf00      	nop
    e128:	b002      	add	sp, #8
    e12a:	4770      	bx	lr

0000e12c <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates INVCTRL register sync
 *                     - FALSE: The software trigger does not activate INVCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    e12c:	b082      	sub	sp, #8
    e12e:	9001      	str	r0, [sp, #4]
    e130:	460b      	mov	r3, r1
    e132:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWINVC_MASK) | FTM_SYNCONF_SWINVC((Enable == TRUE) ? 0x01U : 0x00U);
    e136:	9b01      	ldr	r3, [sp, #4]
    e138:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    e13c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    e140:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e144:	2a00      	cmp	r2, #0
    e146:	d002      	beq.n	e14e <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd+0x22>
    e148:	f44f 6200 	mov.w	r2, #2048	; 0x800
    e14c:	e000      	b.n	e150 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd+0x24>
    e14e:	2200      	movs	r2, #0
    e150:	431a      	orrs	r2, r3
    e152:	9b01      	ldr	r3, [sp, #4]
    e154:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    e158:	bf00      	nop
    e15a:	b002      	add	sp, #8
    e15c:	4770      	bx	lr

0000e15e <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>:
 *                    - TRUE : The software trigger activates SWOCTRL register sync
 *                    - FALSE: The software trigger does not activate SWOCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    e15e:	b082      	sub	sp, #8
    e160:	9001      	str	r0, [sp, #4]
    e162:	460b      	mov	r3, r1
    e164:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWSOC_MASK) | FTM_SYNCONF_SWSOC((Enable == TRUE) ? 0x01U : 0x00U);
    e168:	9b01      	ldr	r3, [sp, #4]
    e16a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    e16e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    e172:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e176:	2a00      	cmp	r2, #0
    e178:	d002      	beq.n	e180 <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd+0x22>
    e17a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e17e:	e000      	b.n	e182 <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd+0x24>
    e180:	2200      	movs	r2, #0
    e182:	431a      	orrs	r2, r3
    e184:	9b01      	ldr	r3, [sp, #4]
    e186:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    e18a:	bf00      	nop
    e18c:	b002      	add	sp, #8
    e18e:	4770      	bx	lr

0000e190 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates FTM counter sync
 *                     - FALSE: The hardware trigger does not activate FTM counter sync
 */
static inline void Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    e190:	b082      	sub	sp, #8
    e192:	9001      	str	r0, [sp, #4]
    e194:	460b      	mov	r3, r1
    e196:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWRSTCNT_MASK) | FTM_SYNCONF_HWRSTCNT((Enable == TRUE) ? 0x01U : 0x00U);
    e19a:	9b01      	ldr	r3, [sp, #4]
    e19c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    e1a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    e1a4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e1a8:	2a00      	cmp	r2, #0
    e1aa:	d002      	beq.n	e1b2 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd+0x22>
    e1ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    e1b0:	e000      	b.n	e1b4 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd+0x24>
    e1b2:	2200      	movs	r2, #0
    e1b4:	431a      	orrs	r2, r3
    e1b6:	9b01      	ldr	r3, [sp, #4]
    e1b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    e1bc:	bf00      	nop
    e1be:	b002      	add	sp, #8
    e1c0:	4770      	bx	lr

0000e1c2 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates  MOD, HCR, CNTIN, and CV registers sync
 *                     - FALSE: The hardware trigger does not activate MOD, HCR, CNTIN, and CV registers sync
 */
static inline void Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                               boolean                       Enable)
{
    e1c2:	b082      	sub	sp, #8
    e1c4:	9001      	str	r0, [sp, #4]
    e1c6:	460b      	mov	r3, r1
    e1c8:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWWRBUF_MASK) | FTM_SYNCONF_HWWRBUF((Enable == TRUE) ? 0x01U : 0x00U);
    e1cc:	9b01      	ldr	r3, [sp, #4]
    e1ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    e1d2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    e1d6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e1da:	2a00      	cmp	r2, #0
    e1dc:	d002      	beq.n	e1e4 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd+0x22>
    e1de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    e1e2:	e000      	b.n	e1e6 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd+0x24>
    e1e4:	2200      	movs	r2, #0
    e1e6:	431a      	orrs	r2, r3
    e1e8:	9b01      	ldr	r3, [sp, #4]
    e1ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    e1ee:	bf00      	nop
    e1f0:	b002      	add	sp, #8
    e1f2:	4770      	bx	lr

0000e1f4 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates OUTMASK register sync
 *                     - FALSE: The hardware trigger does not activate OUTMASK register sync
 */
static inline void Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    e1f4:	b082      	sub	sp, #8
    e1f6:	9001      	str	r0, [sp, #4]
    e1f8:	460b      	mov	r3, r1
    e1fa:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWOM_MASK) | FTM_SYNCONF_HWOM((Enable == TRUE) ? 0x01U : 0x00U);
    e1fe:	9b01      	ldr	r3, [sp, #4]
    e200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    e204:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    e208:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e20c:	2a00      	cmp	r2, #0
    e20e:	d002      	beq.n	e216 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd+0x22>
    e210:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    e214:	e000      	b.n	e218 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd+0x24>
    e216:	2200      	movs	r2, #0
    e218:	431a      	orrs	r2, r3
    e21a:	9b01      	ldr	r3, [sp, #4]
    e21c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    e220:	bf00      	nop
    e222:	b002      	add	sp, #8
    e224:	4770      	bx	lr

0000e226 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates INVCTRL register sync
 *                     - FALSE: The hardware trigger does not activate INVCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    e226:	b082      	sub	sp, #8
    e228:	9001      	str	r0, [sp, #4]
    e22a:	460b      	mov	r3, r1
    e22c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWINVC_MASK) | FTM_SYNCONF_HWINVC((Enable == TRUE) ? 0x01U : 0x00U);
    e230:	9b01      	ldr	r3, [sp, #4]
    e232:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    e236:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
    e23a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e23e:	2a00      	cmp	r2, #0
    e240:	d002      	beq.n	e248 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd+0x22>
    e242:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    e246:	e000      	b.n	e24a <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd+0x24>
    e248:	2200      	movs	r2, #0
    e24a:	431a      	orrs	r2, r3
    e24c:	9b01      	ldr	r3, [sp, #4]
    e24e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    e252:	bf00      	nop
    e254:	b002      	add	sp, #8
    e256:	4770      	bx	lr

0000e258 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal>:
 * Implements : Ftm_Pwm_Ip_SetChnSoftwareCtrlVal_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnSoftwareCtrlVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         Channel,
                                                    boolean                       Enable)
{
    e258:	b084      	sub	sp, #16
    e25a:	9001      	str	r0, [sp, #4]
    e25c:	460b      	mov	r3, r1
    e25e:	f88d 3003 	strb.w	r3, [sp, #3]
    e262:	4613      	mov	r3, r2
    e264:	f88d 3002 	strb.w	r3, [sp, #2]
    uint8 ChPol = (uint8)(((uint32)FtmBase->POL >> (uint32)Channel) & (uint32)1U);
    e268:	9b01      	ldr	r3, [sp, #4]
    e26a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    e26c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e270:	fa22 f303 	lsr.w	r3, r2, r3
    e274:	b2db      	uxtb	r3, r3
    e276:	f003 0301 	and.w	r3, r3, #1
    e27a:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean StatusPol = (ChPol == 0x00U)? FALSE : TRUE;
    e27e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e282:	2b00      	cmp	r3, #0
    e284:	bf14      	ite	ne
    e286:	2301      	movne	r3, #1
    e288:	2300      	moveq	r3, #0
    e28a:	f88d 300e 	strb.w	r3, [sp, #14]
    if (Enable != StatusPol)
    e28e:	f89d 2002 	ldrb.w	r2, [sp, #2]
    e292:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e296:	429a      	cmp	r2, r3
    e298:	d00d      	beq.n	e2b6 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal+0x5e>
    {
        FtmBase->SWOCTRL |= 1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT);
    e29a:	9b01      	ldr	r3, [sp, #4]
    e29c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    e2a0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e2a4:	3308      	adds	r3, #8
    e2a6:	2101      	movs	r1, #1
    e2a8:	fa01 f303 	lsl.w	r3, r1, r3
    e2ac:	431a      	orrs	r2, r3
    e2ae:	9b01      	ldr	r3, [sp, #4]
    e2b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }
    else
    {
        FtmBase->SWOCTRL &= ~(1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    }
}
    e2b4:	e00d      	b.n	e2d2 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal+0x7a>
        FtmBase->SWOCTRL &= ~(1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    e2b6:	9b01      	ldr	r3, [sp, #4]
    e2b8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    e2bc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e2c0:	3308      	adds	r3, #8
    e2c2:	2101      	movs	r1, #1
    e2c4:	fa01 f303 	lsl.w	r3, r1, r3
    e2c8:	43db      	mvns	r3, r3
    e2ca:	401a      	ands	r2, r3
    e2cc:	9b01      	ldr	r3, [sp, #4]
    e2ce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    e2d2:	bf00      	nop
    e2d4:	b004      	add	sp, #16
    e2d6:	4770      	bx	lr

0000e2d8 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd>:
 * Implements : Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         Channel,
                                                    boolean                       Enable)
{
    e2d8:	b082      	sub	sp, #8
    e2da:	9001      	str	r0, [sp, #4]
    e2dc:	460b      	mov	r3, r1
    e2de:	f88d 3003 	strb.w	r3, [sp, #3]
    e2e2:	4613      	mov	r3, r2
    e2e4:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    e2e8:	f89d 3002 	ldrb.w	r3, [sp, #2]
    e2ec:	2b00      	cmp	r3, #0
    e2ee:	d00c      	beq.n	e30a <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd+0x32>
    {
        FtmBase->SWOCTRL |= 1UL << Channel;
    e2f0:	9b01      	ldr	r3, [sp, #4]
    e2f2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    e2f6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e2fa:	2101      	movs	r1, #1
    e2fc:	fa01 f303 	lsl.w	r3, r1, r3
    e300:	431a      	orrs	r2, r3
    e302:	9b01      	ldr	r3, [sp, #4]
    e304:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }
    else
    {
        FtmBase->SWOCTRL &= ~(1UL << Channel);
    }
}
    e308:	e00c      	b.n	e324 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd+0x4c>
        FtmBase->SWOCTRL &= ~(1UL << Channel);
    e30a:	9b01      	ldr	r3, [sp, #4]
    e30c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    e310:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e314:	2101      	movs	r1, #1
    e316:	fa01 f303 	lsl.w	r3, r1, r3
    e31a:	43db      	mvns	r3, r3
    e31c:	401a      	ands	r2, r3
    e31e:	9b01      	ldr	r3, [sp, #4]
    e320:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    e324:	bf00      	nop
    e326:	b002      	add	sp, #8
    e328:	4770      	bx	lr

0000e32a <Ftm_Pwm_Ip_SoftwareOutputControl>:
 * @param[in] FtmBase  The FTM base address pointer.
 * @param[in] Value    The values which enables and force the software control of channels output
 */
static inline void Ftm_Pwm_Ip_SoftwareOutputControl(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint16                        Value)
{
    e32a:	b082      	sub	sp, #8
    e32c:	9001      	str	r0, [sp, #4]
    e32e:	460b      	mov	r3, r1
    e330:	f8ad 3002 	strh.w	r3, [sp, #2]
   FtmBase->SWOCTRL = Value;
    e334:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    e338:	9b01      	ldr	r3, [sp, #4]
    e33a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    e33e:	bf00      	nop
    e340:	b002      	add	sp, #8
    e342:	4770      	bx	lr

0000e344 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd>:
 * Implements : Ftm_Pwm_Ip_SetPwmLoadChnSelCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetPwmLoadChnSelCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         Channel,
                                                  boolean                       Enable)
{
    e344:	b082      	sub	sp, #8
    e346:	9001      	str	r0, [sp, #4]
    e348:	460b      	mov	r3, r1
    e34a:	f88d 3003 	strb.w	r3, [sp, #3]
    e34e:	4613      	mov	r3, r2
    e350:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    e354:	f89d 3002 	ldrb.w	r3, [sp, #2]
    e358:	2b00      	cmp	r3, #0
    e35a:	d00c      	beq.n	e376 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd+0x32>
    {
        FtmBase->PWMLOAD |= 1UL << Channel;
    e35c:	9b01      	ldr	r3, [sp, #4]
    e35e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    e362:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e366:	2101      	movs	r1, #1
    e368:	fa01 f303 	lsl.w	r3, r1, r3
    e36c:	431a      	orrs	r2, r3
    e36e:	9b01      	ldr	r3, [sp, #4]
    e370:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
    else
    {
        FtmBase->PWMLOAD &= ~(1UL << Channel);
    }
}
    e374:	e00c      	b.n	e390 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd+0x4c>
        FtmBase->PWMLOAD &= ~(1UL << Channel);
    e376:	9b01      	ldr	r3, [sp, #4]
    e378:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    e37c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e380:	2101      	movs	r1, #1
    e382:	fa01 f303 	lsl.w	r3, r1, r3
    e386:	43db      	mvns	r3, r3
    e388:	401a      	ands	r2, r3
    e38a:	9b01      	ldr	r3, [sp, #4]
    e38c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
    e390:	bf00      	nop
    e392:	b002      	add	sp, #8
    e394:	4770      	bx	lr

0000e396 <Ftm_Pwm_Ip_SetHalfCycleCmd>:
 *
 * Implements : Ftm_Pwm_Ip_SetHalfCycleCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetHalfCycleCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              boolean                       Enable)
{
    e396:	b082      	sub	sp, #8
    e398:	9001      	str	r0, [sp, #4]
    e39a:	460b      	mov	r3, r1
    e39c:	f88d 3003 	strb.w	r3, [sp, #3]
    if (Enable)
    e3a0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e3a4:	2b00      	cmp	r3, #0
    e3a6:	d008      	beq.n	e3ba <Ftm_Pwm_Ip_SetHalfCycleCmd+0x24>
    {
        FtmBase->PWMLOAD |= 1UL << FTM_PWMLOAD_HCSEL_SHIFT;
    e3a8:	9b01      	ldr	r3, [sp, #4]
    e3aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    e3ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    e3b2:	9b01      	ldr	r3, [sp, #4]
    e3b4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
    else
    {
        FtmBase->PWMLOAD &= ~(1UL << FTM_PWMLOAD_HCSEL_SHIFT);
    }
}
    e3b8:	e007      	b.n	e3ca <Ftm_Pwm_Ip_SetHalfCycleCmd+0x34>
        FtmBase->PWMLOAD &= ~(1UL << FTM_PWMLOAD_HCSEL_SHIFT);
    e3ba:	9b01      	ldr	r3, [sp, #4]
    e3bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    e3c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    e3c4:	9b01      	ldr	r3, [sp, #4]
    e3c6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
    e3ca:	bf00      	nop
    e3cc:	b002      	add	sp, #8
    e3ce:	4770      	bx	lr

0000e3d0 <Ftm_Pwm_Ip_SetHalfCycleValue>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The 16 bit counter value
 */
static inline void Ftm_Pwm_Ip_SetHalfCycleValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint16                        Value)
{
    e3d0:	b082      	sub	sp, #8
    e3d2:	9001      	str	r0, [sp, #4]
    e3d4:	460b      	mov	r3, r1
    e3d6:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->HCR = Value;
    e3da:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    e3de:	9b01      	ldr	r3, [sp, #4]
    e3e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
    e3e4:	bf00      	nop
    e3e6:	b002      	add	sp, #8
    e3e8:	4770      	bx	lr

0000e3ea <Ftm_Pwm_Ip_GetSoftwareOutputControl>:
 * @return the FTM software Output Control.
 *
 * Implements : Ftm_Pwm_Ip_GetSoftwareOutputControl
 */
static inline uint16 Ftm_Pwm_Ip_GetSoftwareOutputControl(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    e3ea:	b082      	sub	sp, #8
    e3ec:	9001      	str	r0, [sp, #4]
    return (uint16)(FtmBase->SWOCTRL);
    e3ee:	9b01      	ldr	r3, [sp, #4]
    e3f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    e3f4:	b29b      	uxth	r3, r3
}
    e3f6:	4618      	mov	r0, r3
    e3f8:	b002      	add	sp, #8
    e3fa:	4770      	bx	lr

0000e3fc <Ftm_Pwm_Ip_GetPolInstance>:
 * @return the polarity value of all channel
 *
 * Implements : Ftm_Pwm_Ip_GetPolInstance
 */
static inline uint16 Ftm_Pwm_Ip_GetPolInstance(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    e3fc:	b082      	sub	sp, #8
    e3fe:	9001      	str	r0, [sp, #4]
    return (uint16)(FtmBase->POL);
    e400:	9b01      	ldr	r3, [sp, #4]
    e402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    e404:	b29b      	uxth	r3, r3
}
    e406:	4618      	mov	r0, r3
    e408:	b002      	add	sp, #8
    e40a:	4770      	bx	lr

0000e40c <Ftm_Pwm_Ip_GetDualChnCompCmd>:
 *            - TRUE : The channel (n+1) output is the complement of the channel (n) output
 *            - FALSE: The channel (n+1) output is the same as the channel (n) output
 */
static inline boolean Ftm_Pwm_Ip_GetDualChnCompCmd(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   uint8                               Channel)
{
    e40c:	b084      	sub	sp, #16
    e40e:	9001      	str	r0, [sp, #4]
    e410:	460b      	mov	r3, r1
    e412:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 ChPairId = Channel >> 1U;
    e416:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e41a:	085b      	lsrs	r3, r3, #1
    e41c:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 Comp = (uint8)((uint32)(FtmBase->COMBINE & ((uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) >>  ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    e420:	9b01      	ldr	r3, [sp, #4]
    e422:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    e424:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e428:	00db      	lsls	r3, r3, #3
    e42a:	2102      	movs	r1, #2
    e42c:	fa01 f303 	lsl.w	r3, r1, r3
    e430:	401a      	ands	r2, r3
    e432:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e436:	00db      	lsls	r3, r3, #3
    e438:	fa22 f303 	lsr.w	r3, r2, r3
    e43c:	f88d 300e 	strb.w	r3, [sp, #14]
    return ((Comp == FTM_COMBINE_COMP0_MASK)? TRUE : FALSE);
    e440:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e444:	2b02      	cmp	r3, #2
    e446:	bf0c      	ite	eq
    e448:	2301      	moveq	r3, #1
    e44a:	2300      	movne	r3, #0
    e44c:	b2db      	uxtb	r3, r3
}
    e44e:	4618      	mov	r0, r3
    e450:	b004      	add	sp, #16
    e452:	4770      	bx	lr

0000e454 <Ftm_Pwm_Ip_GetDualChnDeadtimeCmd>:
 *            - TRUE : The deadtime insertion in this pair of channels is disabled.
 *            - FALSE: The deadtime insertion in this pair of channels is enabled.
 */
static inline boolean Ftm_Pwm_Ip_GetDualChnDeadtimeCmd(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       uint8                               Channel)
{
    e454:	b084      	sub	sp, #16
    e456:	9001      	str	r0, [sp, #4]
    e458:	460b      	mov	r3, r1
    e45a:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 ChPairId = Channel >> 1U;
    e45e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e462:	085b      	lsrs	r3, r3, #1
    e464:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 DetEnable = (uint8)((uint32)(FtmBase->COMBINE & ((uint32)FTM_COMBINE_DTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) >>  ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    e468:	9b01      	ldr	r3, [sp, #4]
    e46a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    e46c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e470:	00db      	lsls	r3, r3, #3
    e472:	2110      	movs	r1, #16
    e474:	fa01 f303 	lsl.w	r3, r1, r3
    e478:	401a      	ands	r2, r3
    e47a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e47e:	00db      	lsls	r3, r3, #3
    e480:	fa22 f303 	lsr.w	r3, r2, r3
    e484:	f88d 300e 	strb.w	r3, [sp, #14]
    return ((DetEnable == FTM_COMBINE_DTEN0_MASK)? TRUE : FALSE);
    e488:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e48c:	2b10      	cmp	r3, #16
    e48e:	bf0c      	ite	eq
    e490:	2301      	moveq	r3, #1
    e492:	2300      	movne	r3, #0
    e494:	b2db      	uxtb	r3, r3
}
    e496:	4618      	mov	r0, r3
    e498:	b004      	add	sp, #16
    e49a:	4770      	bx	lr

0000e49c <Ftm_Pwm_Ip_GetChannelMode>:
/*!
 * @brief Get the channel Mode
 */
static inline Ftm_Pwm_Ip_ChannelModeType Ftm_Pwm_Ip_GetChannelMode(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                                   uint8                               Channel)
{
    e49c:	b500      	push	{lr}
    e49e:	b085      	sub	sp, #20
    e4a0:	9001      	str	r0, [sp, #4]
    e4a2:	460b      	mov	r3, r1
    e4a4:	f88d 3003 	strb.w	r3, [sp, #3]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 RetValue;
    uint8 Combine;
    uint8 Mcombine;
    uint8 ChPairId = Channel >> 1U;
    e4a8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e4ac:	085b      	lsrs	r3, r3, #1
    e4ae:	f88d 300b 	strb.w	r3, [sp, #11]

    Combine = (uint8)((FtmBase->COMBINE & ((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) >>  ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    e4b2:	9b01      	ldr	r3, [sp, #4]
    e4b4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    e4b6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e4ba:	00db      	lsls	r3, r3, #3
    e4bc:	2101      	movs	r1, #1
    e4be:	fa01 f303 	lsl.w	r3, r1, r3
    e4c2:	401a      	ands	r2, r3
    e4c4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e4c8:	00db      	lsls	r3, r3, #3
    e4ca:	fa22 f303 	lsr.w	r3, r2, r3
    e4ce:	f88d 300a 	strb.w	r3, [sp, #10]
    Mcombine = (uint8)((FtmBase->COMBINE & ((uint32)FTM_COMBINE_MCOMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) >> ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    e4d2:	9b01      	ldr	r3, [sp, #4]
    e4d4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    e4d6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e4da:	00db      	lsls	r3, r3, #3
    e4dc:	2180      	movs	r1, #128	; 0x80
    e4de:	fa01 f303 	lsl.w	r3, r1, r3
    e4e2:	401a      	ands	r2, r3
    e4e4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e4e8:	00db      	lsls	r3, r3, #3
    e4ea:	fa22 f303 	lsr.w	r3, r2, r3
    e4ee:	f88d 3009 	strb.w	r3, [sp, #9]
    Mcombine = (Mcombine == (uint8)FTM_COMBINE_MCOMBINE0_MASK)? 0x01U : 0x00U;
    e4f2:	f89d 3009 	ldrb.w	r3, [sp, #9]
    e4f6:	2b80      	cmp	r3, #128	; 0x80
    e4f8:	d101      	bne.n	e4fe <Ftm_Pwm_Ip_GetChannelMode+0x62>
    e4fa:	2301      	movs	r3, #1
    e4fc:	e000      	b.n	e500 <Ftm_Pwm_Ip_GetChannelMode+0x64>
    e4fe:	2300      	movs	r3, #0
    e500:	f88d 3009 	strb.w	r3, [sp, #9]
    RetValue = (uint8)Ftm_Pwm_Ip_GetChnEdgeLevel(FtmBase, Channel);
    e504:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e508:	4619      	mov	r1, r3
    e50a:	9801      	ldr	r0, [sp, #4]
    e50c:	f7ff f936 	bl	d77c <Ftm_Pwm_Ip_GetChnEdgeLevel>
    e510:	4603      	mov	r3, r0
    e512:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Ftm_Pwm_Ip_GetChnMode(FtmBase, Channel) << 2U);
    e516:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e51a:	4619      	mov	r1, r3
    e51c:	9801      	ldr	r0, [sp, #4]
    e51e:	f7ff f9c5 	bl	d8ac <Ftm_Pwm_Ip_GetChnMode>
    e522:	4603      	mov	r3, r0
    e524:	009b      	lsls	r3, r3, #2
    e526:	b2da      	uxtb	r2, r3
    e528:	f89d 3008 	ldrb.w	r3, [sp, #8]
    e52c:	4313      	orrs	r3, r2
    e52e:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)((uint8)Ftm_Pwm_Ip_GetCpwms(FtmBase) << 4U);
    e532:	9801      	ldr	r0, [sp, #4]
    e534:	f7ff f8be 	bl	d6b4 <Ftm_Pwm_Ip_GetCpwms>
    e538:	4603      	mov	r3, r0
    e53a:	b2db      	uxtb	r3, r3
    e53c:	011b      	lsls	r3, r3, #4
    e53e:	b2da      	uxtb	r2, r3
    e540:	f89d 3008 	ldrb.w	r3, [sp, #8]
    e544:	4313      	orrs	r3, r2
    e546:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Combine << 5U);
    e54a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    e54e:	015b      	lsls	r3, r3, #5
    e550:	b2da      	uxtb	r2, r3
    e552:	f89d 3008 	ldrb.w	r3, [sp, #8]
    e556:	4313      	orrs	r3, r2
    e558:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Mcombine << 6U);
    e55c:	f89d 3009 	ldrb.w	r3, [sp, #9]
    e560:	019b      	lsls	r3, r3, #6
    e562:	b2da      	uxtb	r2, r3
    e564:	f89d 3008 	ldrb.w	r3, [sp, #8]
    e568:	4313      	orrs	r3, r2
    e56a:	f88d 3008 	strb.w	r3, [sp, #8]

    switch (RetValue)
    e56e:	f89d 3008 	ldrb.w	r3, [sp, #8]
    e572:	2b62      	cmp	r3, #98	; 0x62
    e574:	d055      	beq.n	e622 <Ftm_Pwm_Ip_GetChannelMode+0x186>
    e576:	2b62      	cmp	r3, #98	; 0x62
    e578:	dc59      	bgt.n	e62e <Ftm_Pwm_Ip_GetChannelMode+0x192>
    e57a:	2b22      	cmp	r3, #34	; 0x22
    e57c:	dc3c      	bgt.n	e5f8 <Ftm_Pwm_Ip_GetChannelMode+0x15c>
    e57e:	2b09      	cmp	r3, #9
    e580:	db55      	blt.n	e62e <Ftm_Pwm_Ip_GetChannelMode+0x192>
    e582:	3b09      	subs	r3, #9
    e584:	2b19      	cmp	r3, #25
    e586:	d852      	bhi.n	e62e <Ftm_Pwm_Ip_GetChannelMode+0x192>
    e588:	a201      	add	r2, pc, #4	; (adr r2, e590 <Ftm_Pwm_Ip_GetChannelMode+0xf4>)
    e58a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e58e:	bf00      	nop
    e590:	0000e605 	.word	0x0000e605
    e594:	0000e5ff 	.word	0x0000e5ff
    e598:	0000e62f 	.word	0x0000e62f
    e59c:	0000e62f 	.word	0x0000e62f
    e5a0:	0000e62f 	.word	0x0000e62f
    e5a4:	0000e62f 	.word	0x0000e62f
    e5a8:	0000e62f 	.word	0x0000e62f
    e5ac:	0000e62f 	.word	0x0000e62f
    e5b0:	0000e611 	.word	0x0000e611
    e5b4:	0000e60b 	.word	0x0000e60b
    e5b8:	0000e62f 	.word	0x0000e62f
    e5bc:	0000e62f 	.word	0x0000e62f
    e5c0:	0000e62f 	.word	0x0000e62f
    e5c4:	0000e62f 	.word	0x0000e62f
    e5c8:	0000e62f 	.word	0x0000e62f
    e5cc:	0000e62f 	.word	0x0000e62f
    e5d0:	0000e62f 	.word	0x0000e62f
    e5d4:	0000e62f 	.word	0x0000e62f
    e5d8:	0000e62f 	.word	0x0000e62f
    e5dc:	0000e62f 	.word	0x0000e62f
    e5e0:	0000e62f 	.word	0x0000e62f
    e5e4:	0000e62f 	.word	0x0000e62f
    e5e8:	0000e62f 	.word	0x0000e62f
    e5ec:	0000e62f 	.word	0x0000e62f
    e5f0:	0000e61d 	.word	0x0000e61d
    e5f4:	0000e617 	.word	0x0000e617
    e5f8:	2b61      	cmp	r3, #97	; 0x61
    e5fa:	d015      	beq.n	e628 <Ftm_Pwm_Ip_GetChannelMode+0x18c>
    e5fc:	e017      	b.n	e62e <Ftm_Pwm_Ip_GetChannelMode+0x192>
    {
        case 0x0AU:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_EDGE_ALIGNED_HIGH;
    e5fe:	230a      	movs	r3, #10
    e600:	9303      	str	r3, [sp, #12]
            break;
    e602:	e017      	b.n	e634 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x09U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_EDGE_ALIGNED_LOW;
    e604:	2309      	movs	r3, #9
    e606:	9303      	str	r3, [sp, #12]
            break;
    e608:	e014      	b.n	e634 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x12U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_CENTER_ALIGNED_HIGH;
    e60a:	2312      	movs	r3, #18
    e60c:	9303      	str	r3, [sp, #12]
            break;
    e60e:	e011      	b.n	e634 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x11U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_CENTER_ALIGNED_LOW;
    e610:	2311      	movs	r3, #17
    e612:	9303      	str	r3, [sp, #12]
            break;
    e614:	e00e      	b.n	e634 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x22U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_COMBINE_HIGH;
    e616:	2322      	movs	r3, #34	; 0x22
    e618:	9303      	str	r3, [sp, #12]
            break;
    e61a:	e00b      	b.n	e634 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x21U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_COMBINE_LOW;
    e61c:	2321      	movs	r3, #33	; 0x21
    e61e:	9303      	str	r3, [sp, #12]
            break;
    e620:	e008      	b.n	e634 <Ftm_Pwm_Ip_GetChannelMode+0x198>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        case 0x62U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH;
    e622:	2362      	movs	r3, #98	; 0x62
    e624:	9303      	str	r3, [sp, #12]
            break;
    e626:	e005      	b.n	e634 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x61U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW;
    e628:	2361      	movs	r3, #97	; 0x61
    e62a:	9303      	str	r3, [sp, #12]
            break;
    e62c:	e002      	b.n	e634 <Ftm_Pwm_Ip_GetChannelMode+0x198>
#endif
        default:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_NODEFINED;
    e62e:	23ff      	movs	r3, #255	; 0xff
    e630:	9303      	str	r3, [sp, #12]
            break;
    e632:	bf00      	nop
    }

    return ChMode; 
    e634:	9b03      	ldr	r3, [sp, #12]
}
    e636:	4618      	mov	r0, r3
    e638:	b005      	add	sp, #20
    e63a:	f85d fb04 	ldr.w	pc, [sp], #4

0000e63e <Ftm_Pwm_Ip_UpdateWriteProtection>:
 * Function Name : Ftm_Pwm_Ip_UpdateWriteProtection
 * Description   : Enables or disables the FTM write protection.
 */
static inline void Ftm_Pwm_Ip_UpdateWriteProtection(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    boolean                       Enable)
{
    e63e:	b082      	sub	sp, #8
    e640:	9001      	str	r0, [sp, #4]
    e642:	460b      	mov	r3, r1
    e644:	f88d 3003 	strb.w	r3, [sp, #3]
    if (Enable == TRUE)
    e648:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e64c:	2b00      	cmp	r3, #0
    e64e:	d006      	beq.n	e65e <Ftm_Pwm_Ip_UpdateWriteProtection+0x20>
    {/* Enable write protection */
        /* WPEN is set when 1 is written to it. */
        FtmBase->FMS = (FtmBase->FMS & ~FTM_FMS_WPEN_MASK) | FTM_FMS_WPEN(1U);
    e650:	9b01      	ldr	r3, [sp, #4]
    e652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    e654:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    e658:	9b01      	ldr	r3, [sp, #4]
    e65a:	675a      	str	r2, [r3, #116]	; 0x74
    }
    else
    {
        /* MISRA Rule 15.7 All if...else if constructs shall be terminated with an else statement */
    }
}
    e65c:	e00b      	b.n	e676 <Ftm_Pwm_Ip_UpdateWriteProtection+0x38>
    else if ((FtmBase->FMS & FTM_FMS_WPEN_MASK) != 0U)
    e65e:	9b01      	ldr	r3, [sp, #4]
    e660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    e662:	f003 0340 	and.w	r3, r3, #64	; 0x40
    e666:	2b00      	cmp	r3, #0
    e668:	d005      	beq.n	e676 <Ftm_Pwm_Ip_UpdateWriteProtection+0x38>
        FtmBase->MODE |= FTM_MODE_WPDIS(TRUE);
    e66a:	9b01      	ldr	r3, [sp, #4]
    e66c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    e66e:	f043 0204 	orr.w	r2, r3, #4
    e672:	9b01      	ldr	r3, [sp, #4]
    e674:	655a      	str	r2, [r3, #84]	; 0x54
}
    e676:	bf00      	nop
    e678:	b002      	add	sp, #8
    e67a:	4770      	bx	lr

0000e67c <Ftm_Pwm_Ip_Reset>:
 * Function Name : Ftm_Pwm_Ip_Reset
 * Description   : Resets the FTM registers. All the register use in the driver should be
 * reset to default value of each register.
 */
static inline void Ftm_Pwm_Ip_Reset(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    e67c:	b500      	push	{lr}
    e67e:	b085      	sub	sp, #20
    e680:	9001      	str	r0, [sp, #4]
    uint8 ChnIndex;

    /* Disable the write protection mechanism */
    Ftm_Pwm_Ip_UpdateWriteProtection(FtmBase, FALSE);
    e682:	2100      	movs	r1, #0
    e684:	9801      	ldr	r0, [sp, #4]
    e686:	f7ff ffda 	bl	e63e <Ftm_Pwm_Ip_UpdateWriteProtection>

    /* Reset all registers to the default value */
    REG_RMW32(&(FtmBase->SC), 0U, 0U);
    e68a:	9b01      	ldr	r3, [sp, #4]
    e68c:	681a      	ldr	r2, [r3, #0]
    e68e:	9b01      	ldr	r3, [sp, #4]
    e690:	601a      	str	r2, [r3, #0]
    FtmBase->CNT        = 0U;
    e692:	9b01      	ldr	r3, [sp, #4]
    e694:	2200      	movs	r2, #0
    e696:	605a      	str	r2, [r3, #4]
    FtmBase->MOD        = 0U;
    e698:	9b01      	ldr	r3, [sp, #4]
    e69a:	2200      	movs	r2, #0
    e69c:	609a      	str	r2, [r3, #8]
    FtmBase->CNTIN      = 0U;
    e69e:	9b01      	ldr	r3, [sp, #4]
    e6a0:	2200      	movs	r2, #0
    e6a2:	64da      	str	r2, [r3, #76]	; 0x4c
    REG_RMW32(&(FtmBase->STATUS), 0U, 0U);
    e6a4:	9b01      	ldr	r3, [sp, #4]
    e6a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    e6a8:	9b01      	ldr	r3, [sp, #4]
    e6aa:	651a      	str	r2, [r3, #80]	; 0x50
    FtmBase->MODE       = 4U;
    e6ac:	9b01      	ldr	r3, [sp, #4]
    e6ae:	2204      	movs	r2, #4
    e6b0:	655a      	str	r2, [r3, #84]	; 0x54
    FtmBase->SYNC       = 0U;
    e6b2:	9b01      	ldr	r3, [sp, #4]
    e6b4:	2200      	movs	r2, #0
    e6b6:	659a      	str	r2, [r3, #88]	; 0x58
    FtmBase->OUTINIT    = 0U;
    e6b8:	9b01      	ldr	r3, [sp, #4]
    e6ba:	2200      	movs	r2, #0
    e6bc:	65da      	str	r2, [r3, #92]	; 0x5c
    FtmBase->OUTMASK    = 0U;
    e6be:	9b01      	ldr	r3, [sp, #4]
    e6c0:	2200      	movs	r2, #0
    e6c2:	661a      	str	r2, [r3, #96]	; 0x60
    FtmBase->COMBINE    = 0U;
    e6c4:	9b01      	ldr	r3, [sp, #4]
    e6c6:	2200      	movs	r2, #0
    e6c8:	665a      	str	r2, [r3, #100]	; 0x64
    FtmBase->DEADTIME   = 0U;
    e6ca:	9b01      	ldr	r3, [sp, #4]
    e6cc:	2200      	movs	r2, #0
    e6ce:	669a      	str	r2, [r3, #104]	; 0x68
    REG_RMW32(&(FtmBase->EXTTRIG), 0U, 0U);
    e6d0:	9b01      	ldr	r3, [sp, #4]
    e6d2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    e6d4:	9b01      	ldr	r3, [sp, #4]
    e6d6:	66da      	str	r2, [r3, #108]	; 0x6c
    FtmBase->POL        = 0U;
    e6d8:	9b01      	ldr	r3, [sp, #4]
    e6da:	2200      	movs	r2, #0
    e6dc:	671a      	str	r2, [r3, #112]	; 0x70
    FtmBase->FMS        = 0U;
    e6de:	9b01      	ldr	r3, [sp, #4]
    e6e0:	2200      	movs	r2, #0
    e6e2:	675a      	str	r2, [r3, #116]	; 0x74
    FtmBase->FILTER     = 0U;
    e6e4:	9b01      	ldr	r3, [sp, #4]
    e6e6:	2200      	movs	r2, #0
    e6e8:	679a      	str	r2, [r3, #120]	; 0x78
    FtmBase->QDCTRL     = 0U;
    e6ea:	9b01      	ldr	r3, [sp, #4]
    e6ec:	2200      	movs	r2, #0
    e6ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    FtmBase->CONF       = 0U;
    e6f2:	9b01      	ldr	r3, [sp, #4]
    e6f4:	2200      	movs	r2, #0
    e6f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    FtmBase->SYNCONF    = 0U;
    e6fa:	9b01      	ldr	r3, [sp, #4]
    e6fc:	2200      	movs	r2, #0
    e6fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    FtmBase->INVCTRL    = 0U;
    e702:	9b01      	ldr	r3, [sp, #4]
    e704:	2200      	movs	r2, #0
    e706:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    FtmBase->SWOCTRL    = 0U;
    e70a:	9b01      	ldr	r3, [sp, #4]
    e70c:	2200      	movs	r2, #0
    e70e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    FtmBase->PWMLOAD    = 0U;
    e712:	9b01      	ldr	r3, [sp, #4]
    e714:	2200      	movs	r2, #0
    e716:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (defined(FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD) && (FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD == STD_ON))
    FtmBase->HCR        = 0U;
    e71a:	9b01      	ldr	r3, [sp, #4]
    e71c:	2200      	movs	r2, #0
    e71e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        FtmBase->MOD_MIRROR = 0U;
    }
#endif

    /* Reset values of all CV and CSC registers */
    for (ChnIndex = 0; ChnIndex < FTM_PWM_IP_CHANNEL_COUNT; ChnIndex++)
    e722:	2300      	movs	r3, #0
    e724:	f88d 300f 	strb.w	r3, [sp, #15]
    e728:	e014      	b.n	e754 <Ftm_Pwm_Ip_Reset+0xd8>
    {
        FtmBase->CONTROLS[ChnIndex].CSC = 0U;
    e72a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e72e:	9a01      	ldr	r2, [sp, #4]
    e730:	3301      	adds	r3, #1
    e732:	00db      	lsls	r3, r3, #3
    e734:	4413      	add	r3, r2
    e736:	2200      	movs	r2, #0
    e738:	605a      	str	r2, [r3, #4]
        FtmBase->CONTROLS[ChnIndex].CV = 0U;
    e73a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e73e:	9a01      	ldr	r2, [sp, #4]
    e740:	3301      	adds	r3, #1
    e742:	00db      	lsls	r3, r3, #3
    e744:	4413      	add	r3, r2
    e746:	2200      	movs	r2, #0
    e748:	609a      	str	r2, [r3, #8]
    for (ChnIndex = 0; ChnIndex < FTM_PWM_IP_CHANNEL_COUNT; ChnIndex++)
    e74a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e74e:	3301      	adds	r3, #1
    e750:	f88d 300f 	strb.w	r3, [sp, #15]
    e754:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e758:	2b07      	cmp	r3, #7
    e75a:	d9e6      	bls.n	e72a <Ftm_Pwm_Ip_Reset+0xae>
            {
                FtmBase->CV_MIRROR[ChnIndex] = 0U;
            }
        #endif
    }
}
    e75c:	bf00      	nop
    e75e:	bf00      	nop
    e760:	b005      	add	sp, #20
    e762:	f85d fb04 	ldr.w	pc, [sp], #4

0000e766 <Ftm_Pwm_Ip_SetChnTriggerCmd>:
 * FTM counter is equal to its initial value.
 */
static inline void Ftm_Pwm_Ip_SetChnTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Channel,
                                               boolean                       Enable)
{
    e766:	b084      	sub	sp, #16
    e768:	9001      	str	r0, [sp, #4]
    e76a:	460b      	mov	r3, r1
    e76c:	f88d 3003 	strb.w	r3, [sp, #3]
    e770:	4613      	mov	r3, r2
    e772:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 Value = 0U;
    e776:	2300      	movs	r3, #0
    e778:	9303      	str	r3, [sp, #12]

    if (Channel < 2U)
    e77a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e77e:	2b01      	cmp	r3, #1
    e780:	d806      	bhi.n	e790 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x2a>
    {
        Value = (uint32)FTM_EXTTRIG_CH0TRIG_MASK << (uint32)Channel;
    e782:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e786:	2210      	movs	r2, #16
    e788:	fa02 f303 	lsl.w	r3, r2, r3
    e78c:	9303      	str	r3, [sp, #12]
    e78e:	e013      	b.n	e7b8 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x52>
    }
    else if (Channel < 6U)
    e790:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e794:	2b05      	cmp	r3, #5
    e796:	d807      	bhi.n	e7a8 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x42>
    {
        Value = (uint32)FTM_EXTTRIG_CH2TRIG_MASK << ((uint32)(Channel) - 2U);
    e798:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e79c:	3b02      	subs	r3, #2
    e79e:	2201      	movs	r2, #1
    e7a0:	fa02 f303 	lsl.w	r3, r2, r3
    e7a4:	9303      	str	r3, [sp, #12]
    e7a6:	e007      	b.n	e7b8 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x52>
    }
    else
    {
        /* Set trigger to other channels which are not aligned */
        #if (FTM_PWM_IP_CHANNEL_COUNT > 6U)
        Value = (uint32)FTM_EXTTRIG_CH6TRIG_MASK << ((uint32)(Channel) - 6U);
    e7a8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e7ac:	3b06      	subs	r3, #6
    e7ae:	f44f 7280 	mov.w	r2, #256	; 0x100
    e7b2:	fa02 f303 	lsl.w	r3, r2, r3
    e7b6:	9303      	str	r3, [sp, #12]
        #endif
    }

    if (TRUE == Enable)
    e7b8:	f89d 3002 	ldrb.w	r3, [sp, #2]
    e7bc:	2b00      	cmp	r3, #0
    e7be:	d006      	beq.n	e7ce <Ftm_Pwm_Ip_SetChnTriggerCmd+0x68>
    {
        FtmBase->EXTTRIG |= Value;
    e7c0:	9b01      	ldr	r3, [sp, #4]
    e7c2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    e7c4:	9b03      	ldr	r3, [sp, #12]
    e7c6:	431a      	orrs	r2, r3
    e7c8:	9b01      	ldr	r3, [sp, #4]
    e7ca:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    else
    {
        FtmBase->EXTTRIG &= ~Value;
    }
}
    e7cc:	e006      	b.n	e7dc <Ftm_Pwm_Ip_SetChnTriggerCmd+0x76>
        FtmBase->EXTTRIG &= ~Value;
    e7ce:	9b01      	ldr	r3, [sp, #4]
    e7d0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    e7d2:	9b03      	ldr	r3, [sp, #12]
    e7d4:	43db      	mvns	r3, r3
    e7d6:	401a      	ands	r2, r3
    e7d8:	9b01      	ldr	r3, [sp, #4]
    e7da:	66da      	str	r2, [r3, #108]	; 0x6c
}
    e7dc:	bf00      	nop
    e7de:	b004      	add	sp, #16
    e7e0:	4770      	bx	lr

0000e7e2 <Ftm_Pwm_Ip_SetFaultControlMode>:
 * Function Name : Ftm_Pwm_Ip_SetFaultControlMode
 * Description   : Set the FTM fault control mode.
 */
static inline void Ftm_Pwm_Ip_SetFaultControlMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  Ftm_Pwm_Ip_FaultControlModeType FaultMode)
{
    e7e2:	b082      	sub	sp, #8
    e7e4:	9001      	str	r0, [sp, #4]
    e7e6:	9100      	str	r1, [sp, #0]
    e7e8:	9b00      	ldr	r3, [sp, #0]
    e7ea:	2b03      	cmp	r3, #3
    e7ec:	d82a      	bhi.n	e844 <Ftm_Pwm_Ip_SetFaultControlMode+0x62>
    e7ee:	a201      	add	r2, pc, #4	; (adr r2, e7f4 <Ftm_Pwm_Ip_SetFaultControlMode+0x12>)
    e7f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e7f4:	0000e805 	.word	0x0000e805
    e7f8:	0000e813 	.word	0x0000e813
    e7fc:	0000e825 	.word	0x0000e825
    e800:	0000e837 	.word	0x0000e837
    switch(FaultMode)
    {
        case FTM_PWM_IP_FAULT_DISABLED:
            /*  Fault control is disabled for all channels. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x00U);
    e804:	9b01      	ldr	r3, [sp, #4]
    e806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    e808:	f023 0260 	bic.w	r2, r3, #96	; 0x60
    e80c:	9b01      	ldr	r3, [sp, #4]
    e80e:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    e810:	e019      	b.n	e846 <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_EVEN_CHANNELS_MANUAL_CLEAR:
            /* Fault control is enabled for even channels only (channels 0, 2, 4, and 6), and the selected
               mode is the manual fault clearing. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x01U);
    e812:	9b01      	ldr	r3, [sp, #4]
    e814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    e816:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    e81a:	f043 0220 	orr.w	r2, r3, #32
    e81e:	9b01      	ldr	r3, [sp, #4]
    e820:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    e822:	e010      	b.n	e846 <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_ALL_CHANNELS_MANUAL_CLEAR:
            /* Fault control is enabled for all channels, and the selected mode is the manual fault clearing. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x02U);
    e824:	9b01      	ldr	r3, [sp, #4]
    e826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    e828:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    e82c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    e830:	9b01      	ldr	r3, [sp, #4]
    e832:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    e834:	e007      	b.n	e846 <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_ALL_CHANNELS_AUTO_CLEAR:
            /*  Fault control is enabled for all channels, and the selected mode is the automatic fault clearing.*/
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x03U);
    e836:	9b01      	ldr	r3, [sp, #4]
    e838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    e83a:	f043 0260 	orr.w	r2, r3, #96	; 0x60
    e83e:	9b01      	ldr	r3, [sp, #4]
    e840:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    e842:	e000      	b.n	e846 <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        default:
            /* Nothing to do. This switch branch is empty because it shall not be executed for normal behaviour */
            break;
    e844:	bf00      	nop
    }
}
    e846:	bf00      	nop
    e848:	b002      	add	sp, #8
    e84a:	4770      	bx	lr

0000e84c <Ftm_Pwm_Ip_SetDualChFaultCtr>:
 * Description   : Enables/Disables the fault control in channels (n) and (n+1)
 */
static inline void Ftm_Pwm_Ip_SetDualChFaultCtr(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         ChPairId,
                                                boolean                       Enable)
{
    e84c:	b082      	sub	sp, #8
    e84e:	9001      	str	r0, [sp, #4]
    e850:	460b      	mov	r3, r1
    e852:	f88d 3003 	strb.w	r3, [sp, #3]
    e856:	4613      	mov	r3, r2
    e858:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    e85c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    e860:	2b00      	cmp	r3, #0
    e862:	d00b      	beq.n	e87c <Ftm_Pwm_Ip_SetDualChFaultCtr+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    e864:	9b01      	ldr	r3, [sp, #4]
    e866:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    e868:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e86c:	00db      	lsls	r3, r3, #3
    e86e:	2140      	movs	r1, #64	; 0x40
    e870:	fa01 f303 	lsl.w	r3, r1, r3
    e874:	431a      	orrs	r2, r3
    e876:	9b01      	ldr	r3, [sp, #4]
    e878:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    e87a:	e00b      	b.n	e894 <Ftm_Pwm_Ip_SetDualChFaultCtr+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    e87c:	9b01      	ldr	r3, [sp, #4]
    e87e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    e880:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e884:	00db      	lsls	r3, r3, #3
    e886:	2140      	movs	r1, #64	; 0x40
    e888:	fa01 f303 	lsl.w	r3, r1, r3
    e88c:	43db      	mvns	r3, r3
    e88e:	401a      	ands	r2, r3
    e890:	9b01      	ldr	r3, [sp, #4]
    e892:	665a      	str	r2, [r3, #100]	; 0x64
}
    e894:	bf00      	nop
    e896:	b002      	add	sp, #8
    e898:	4770      	bx	lr

0000e89a <Ftm_Pwm_Ip_SetFaultInterruptEnable>:
 * Function Name : Ftm_Pwm_Ip_SetFaultInterruptEnable
 * Description   : Enables/Disables the FTM fault interrupt.
 */
static inline void Ftm_Pwm_Ip_SetFaultInterruptEnable(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      boolean                       Enable)
{
    e89a:	b082      	sub	sp, #8
    e89c:	9001      	str	r0, [sp, #4]
    e89e:	460b      	mov	r3, r1
    e8a0:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTIE_MASK) | FTM_MODE_FAULTIE((Enable == TRUE) ? 0x01U : 0x00U);
    e8a4:	9b01      	ldr	r3, [sp, #4]
    e8a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    e8a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    e8ac:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e8b0:	2a00      	cmp	r2, #0
    e8b2:	d001      	beq.n	e8b8 <Ftm_Pwm_Ip_SetFaultInterruptEnable+0x1e>
    e8b4:	2280      	movs	r2, #128	; 0x80
    e8b6:	e000      	b.n	e8ba <Ftm_Pwm_Ip_SetFaultInterruptEnable+0x20>
    e8b8:	2200      	movs	r2, #0
    e8ba:	431a      	orrs	r2, r3
    e8bc:	9b01      	ldr	r3, [sp, #4]
    e8be:	655a      	str	r2, [r3, #84]	; 0x54
}
    e8c0:	bf00      	nop
    e8c2:	b002      	add	sp, #8
    e8c4:	4770      	bx	lr

0000e8c6 <Ftm_Pwm_Ip_ClearFaultFlag>:
/*!
 * Function Name : Ftm_Pwm_Ip_ClearFaultFlag
 * Description   : Clears the fault interrupt flag.
 */
static inline void Ftm_Pwm_Ip_ClearFaultFlag(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    e8c6:	b082      	sub	sp, #8
    e8c8:	9001      	str	r0, [sp, #4]
    FtmBase->FMS = (FtmBase->FMS & ~FTM_FMS_FAULTF_MASK) | FTM_FMS_FAULTF(0U);
    e8ca:	9b01      	ldr	r3, [sp, #4]
    e8cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    e8ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    e8d2:	9b01      	ldr	r3, [sp, #4]
    e8d4:	675a      	str	r2, [r3, #116]	; 0x74
}
    e8d6:	bf00      	nop
    e8d8:	b002      	add	sp, #8
    e8da:	4770      	bx	lr

0000e8dc <Ftm_Pwm_Ip_SetFaultFilterValue>:
 * Function Name : Ftm_Pwm_Ip_SetFaultFilterValue
 * Description   : Selects the filter value for the fault inputs.
 */
static inline void Ftm_Pwm_Ip_SetFaultFilterValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         FaultFilterValue)
{
    e8dc:	b082      	sub	sp, #8
    e8de:	9001      	str	r0, [sp, #4]
    e8e0:	460b      	mov	r3, r1
    e8e2:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~FTM_FLTCTRL_FFVAL_MASK) | FTM_FLTCTRL_FFVAL((uint32)FaultFilterValue);
    e8e6:	9b01      	ldr	r3, [sp, #4]
    e8e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    e8ea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
    e8ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e8f2:	021b      	lsls	r3, r3, #8
    e8f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    e8f8:	431a      	orrs	r2, r3
    e8fa:	9b01      	ldr	r3, [sp, #4]
    e8fc:	67da      	str	r2, [r3, #124]	; 0x7c
}
    e8fe:	bf00      	nop
    e900:	b002      	add	sp, #8
    e902:	4770      	bx	lr

0000e904 <Ftm_Pwm_Ip_SetFaultOutputState>:
 * Function Name : Ftm_Pwm_Ip_SetFaultOutputState
 * Description   : Selects the fault output state when a fault event is ongoing.
 */
static inline void Ftm_Pwm_Ip_SetFaultOutputState(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  Ftm_Pwm_Ip_FaultOutputStateType FaultState)
{
    e904:	b082      	sub	sp, #8
    e906:	9001      	str	r0, [sp, #4]
    e908:	9100      	str	r1, [sp, #0]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~FTM_FLTCTRL_FSTATE_MASK) | FTM_FLTCTRL_FSTATE((FaultState == FTM_PWM_IP_OUT_SAFE_VALUE)? 0x00U : 0x01U);
    e90a:	9b01      	ldr	r3, [sp, #4]
    e90c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    e90e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    e912:	9a00      	ldr	r2, [sp, #0]
    e914:	2a00      	cmp	r2, #0
    e916:	d002      	beq.n	e91e <Ftm_Pwm_Ip_SetFaultOutputState+0x1a>
    e918:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    e91c:	e000      	b.n	e920 <Ftm_Pwm_Ip_SetFaultOutputState+0x1c>
    e91e:	2200      	movs	r2, #0
    e920:	431a      	orrs	r2, r3
    e922:	9b01      	ldr	r3, [sp, #4]
    e924:	67da      	str	r2, [r3, #124]	; 0x7c
}
    e926:	bf00      	nop
    e928:	b002      	add	sp, #8
    e92a:	4770      	bx	lr

0000e92c <Ftm_Pwm_Ip_SetFaultPolarity>:
 * Description   : Selects the fault inputs polarity.
 */
static inline void Ftm_Pwm_Ip_SetFaultPolarity(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         FaultId,
                                               Ftm_Pwm_Ip_PolarityType       FaultPol)
{
    e92c:	b086      	sub	sp, #24
    e92e:	9003      	str	r0, [sp, #12]
    e930:	460b      	mov	r3, r1
    e932:	9201      	str	r2, [sp, #4]
    e934:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 FaultInPol = ((FaultPol == FTM_PWM_IP_POLARITY_HIGH)? (uint32)0U : (uint32)1U);
    e938:	9b01      	ldr	r3, [sp, #4]
    e93a:	2b00      	cmp	r3, #0
    e93c:	bf14      	ite	ne
    e93e:	2301      	movne	r3, #1
    e940:	2300      	moveq	r3, #0
    e942:	b2db      	uxtb	r3, r3
    e944:	9305      	str	r3, [sp, #20]
    FtmBase->FLTPOL = (FtmBase->FLTPOL & ~(1UL << FaultId)) | ((uint32)FaultInPol << FaultId);
    e946:	9b03      	ldr	r3, [sp, #12]
    e948:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    e94c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e950:	2101      	movs	r1, #1
    e952:	fa01 f303 	lsl.w	r3, r1, r3
    e956:	43db      	mvns	r3, r3
    e958:	401a      	ands	r2, r3
    e95a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e95e:	9905      	ldr	r1, [sp, #20]
    e960:	fa01 f303 	lsl.w	r3, r1, r3
    e964:	431a      	orrs	r2, r3
    e966:	9b03      	ldr	r3, [sp, #12]
    e968:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    e96c:	bf00      	nop
    e96e:	b006      	add	sp, #24
    e970:	4770      	bx	lr

0000e972 <Ftm_Pwm_Ip_SetFaultInputEn>:
 * Description   : Enables/Disables the fault inputs.
 */
static inline void Ftm_Pwm_Ip_SetFaultInputEn(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                        FaultId,
                                               boolean                      FaultEn)
{
    e972:	b084      	sub	sp, #16
    e974:	9001      	str	r0, [sp, #4]
    e976:	460b      	mov	r3, r1
    e978:	f88d 3003 	strb.w	r3, [sp, #3]
    e97c:	4613      	mov	r3, r2
    e97e:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 FaultInEn = ((FaultEn == TRUE)? (uint32)1U : (uint32)0U);
    e982:	f89d 3002 	ldrb.w	r3, [sp, #2]
    e986:	2b00      	cmp	r3, #0
    e988:	d001      	beq.n	e98e <Ftm_Pwm_Ip_SetFaultInputEn+0x1c>
    e98a:	2301      	movs	r3, #1
    e98c:	e000      	b.n	e990 <Ftm_Pwm_Ip_SetFaultInputEn+0x1e>
    e98e:	2300      	movs	r3, #0
    e990:	9303      	str	r3, [sp, #12]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~(1UL << FaultId)) | ((uint32)FaultInEn << FaultId);
    e992:	9b01      	ldr	r3, [sp, #4]
    e994:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    e996:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e99a:	2101      	movs	r1, #1
    e99c:	fa01 f303 	lsl.w	r3, r1, r3
    e9a0:	43db      	mvns	r3, r3
    e9a2:	401a      	ands	r2, r3
    e9a4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e9a8:	9903      	ldr	r1, [sp, #12]
    e9aa:	fa01 f303 	lsl.w	r3, r1, r3
    e9ae:	431a      	orrs	r2, r3
    e9b0:	9b01      	ldr	r3, [sp, #4]
    e9b2:	67da      	str	r2, [r3, #124]	; 0x7c
}
    e9b4:	bf00      	nop
    e9b6:	b004      	add	sp, #16
    e9b8:	4770      	bx	lr

0000e9ba <Ftm_Pwm_Ip_SetFaultFilterEn>:
 * Description   : Enables/Disables the filter for the fault input.
 */
static inline void Ftm_Pwm_Ip_SetFaultFilterEn(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         FaultId,
                                               boolean                       FaultFilEn)
{
    e9ba:	b084      	sub	sp, #16
    e9bc:	9001      	str	r0, [sp, #4]
    e9be:	460b      	mov	r3, r1
    e9c0:	f88d 3003 	strb.w	r3, [sp, #3]
    e9c4:	4613      	mov	r3, r2
    e9c6:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 FaultFilterEn = ((FaultFilEn == TRUE)? (uint32)1U : (uint32)0U);
    e9ca:	f89d 3002 	ldrb.w	r3, [sp, #2]
    e9ce:	2b00      	cmp	r3, #0
    e9d0:	d001      	beq.n	e9d6 <Ftm_Pwm_Ip_SetFaultFilterEn+0x1c>
    e9d2:	2301      	movs	r3, #1
    e9d4:	e000      	b.n	e9d8 <Ftm_Pwm_Ip_SetFaultFilterEn+0x1e>
    e9d6:	2300      	movs	r3, #0
    e9d8:	9303      	str	r3, [sp, #12]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~((uint32)FTM_FLTCTRL_FFLTR0EN_MASK << FaultId)) | (((uint32)FaultFilterEn << FaultId) << FTM_FLTCTRL_FFLTR0EN_SHIFT);
    e9da:	9b01      	ldr	r3, [sp, #4]
    e9dc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    e9de:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e9e2:	2110      	movs	r1, #16
    e9e4:	fa01 f303 	lsl.w	r3, r1, r3
    e9e8:	43db      	mvns	r3, r3
    e9ea:	401a      	ands	r2, r3
    e9ec:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e9f0:	9903      	ldr	r1, [sp, #12]
    e9f2:	fa01 f303 	lsl.w	r3, r1, r3
    e9f6:	011b      	lsls	r3, r3, #4
    e9f8:	431a      	orrs	r2, r3
    e9fa:	9b01      	ldr	r3, [sp, #4]
    e9fc:	67da      	str	r2, [r3, #124]	; 0x7c
}
    e9fe:	bf00      	nop
    ea00:	b004      	add	sp, #16
    ea02:	4770      	bx	lr

0000ea04 <Ftm_Pwm_Ip_SetSimOutputBufferEn>:
 * Function Name : Ftm_Pwm_Ip_SetSimOutputBufferEn
 * Description   : The FTM channel output state is retained when the channel is in output mode.
 */
static inline void Ftm_Pwm_Ip_SetSimOutputBufferEn(Ftm_Pwm_Ip_SimType * const SimBase,
                                                   uint8                      Instance)
{
    ea04:	b082      	sub	sp, #8
    ea06:	9001      	str	r0, [sp, #4]
    ea08:	460b      	mov	r3, r1
    ea0a:	f88d 3003 	strb.w	r3, [sp, #3]
    SimBase->MISCTRL0 = (SimBase->MISCTRL0  & ~(uint32)((uint32)SIM_MISCTRL0_FTM0_OBE_CTRL_MASK << Instance)) | (uint32)((uint32)SIM_MISCTRL0_FTM0_OBE_CTRL_MASK << Instance);
    ea0e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ea12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    ea16:	409a      	lsls	r2, r3
    ea18:	9b01      	ldr	r3, [sp, #4]
    ea1a:	6a1b      	ldr	r3, [r3, #32]
    ea1c:	431a      	orrs	r2, r3
    ea1e:	9b01      	ldr	r3, [sp, #4]
    ea20:	621a      	str	r2, [r3, #32]
}
    ea22:	bf00      	nop
    ea24:	b002      	add	sp, #8
    ea26:	4770      	bx	lr

0000ea28 <Ftm_Pwm_Ip_ValidateParamDeadTime>:
 *
 *END**************************************************************************/  
static boolean Ftm_Pwm_Ip_ValidateParamDeadTime(uint8 Instance,
                                                uint8 Channel,
                                                uint16 DeadTimeVal)
{
    ea28:	b500      	push	{lr}
    ea2a:	b089      	sub	sp, #36	; 0x24
    ea2c:	4603      	mov	r3, r0
    ea2e:	f88d 3007 	strb.w	r3, [sp, #7]
    ea32:	460b      	mov	r3, r1
    ea34:	f88d 3006 	strb.w	r3, [sp, #6]
    ea38:	4613      	mov	r3, r2
    ea3a:	f8ad 3004 	strh.w	r3, [sp, #4]
    const Ftm_Pwm_Ip_HwAddrType *const FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    ea3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ea42:	4a39      	ldr	r2, [pc, #228]	; (eb28 <Ftm_Pwm_Ip_ValidateParamDeadTime+0x100>)
    ea44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea48:	9306      	str	r3, [sp, #24]
    boolean RetVal = FALSE;
    ea4a:	2300      	movs	r3, #0
    ea4c:	f88d 301f 	strb.w	r3, [sp, #31]

    uint8 PairId = Channel >> 1U;
    ea50:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ea54:	085b      	lsrs	r3, r3, #1
    ea56:	f88d 3017 	strb.w	r3, [sp, #23]
    uint16 EvenCounterVal = Ftm_Pwm_Ip_GetChnCountVal(FtmBase, (PairId * 2U));
    ea5a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ea5e:	005b      	lsls	r3, r3, #1
    ea60:	b2db      	uxtb	r3, r3
    ea62:	4619      	mov	r1, r3
    ea64:	9806      	ldr	r0, [sp, #24]
    ea66:	f7fe ffb0 	bl	d9ca <Ftm_Pwm_Ip_GetChnCountVal>
    ea6a:	4603      	mov	r3, r0
    ea6c:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint16 OddCounterVal  = Ftm_Pwm_Ip_GetChnCountVal(FtmBase, ((PairId * 2U) + 1U));
    ea70:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ea74:	005b      	lsls	r3, r3, #1
    ea76:	b2db      	uxtb	r3, r3
    ea78:	3301      	adds	r3, #1
    ea7a:	b2db      	uxtb	r3, r3
    ea7c:	4619      	mov	r1, r3
    ea7e:	9806      	ldr	r0, [sp, #24]
    ea80:	f7fe ffa3 	bl	d9ca <Ftm_Pwm_Ip_GetChnCountVal>
    ea84:	4603      	mov	r3, r0
    ea86:	f8ad 3012 	strh.w	r3, [sp, #18]
    uint8 Prescaler = Ftm_Pwm_Ip_GetClockPs(FtmBase);
    ea8a:	9806      	ldr	r0, [sp, #24]
    ea8c:	f7fe fde0 	bl	d650 <Ftm_Pwm_Ip_GetClockPs>
    ea90:	4603      	mov	r3, r0
    ea92:	f88d 3011 	strb.w	r3, [sp, #17]
    uint8 DeadTimePs = Ftm_Pwm_Ip_GetDeadtimePrescaler(FtmBase);
    ea96:	9806      	ldr	r0, [sp, #24]
    ea98:	f7ff f9c1 	bl	de1e <Ftm_Pwm_Ip_GetDeadtimePrescaler>
    ea9c:	4603      	mov	r3, r0
    ea9e:	f88d 3010 	strb.w	r3, [sp, #16]

    uint16 CompareEven = (OddCounterVal - EvenCounterVal);
    eaa2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    eaa6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    eaaa:	1ad3      	subs	r3, r2, r3
    eaac:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16 CompareOdd = Ftm_Pwm_Ip_aPeriod[Instance] - CompareEven;
    eab0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    eab4:	4a1d      	ldr	r2, [pc, #116]	; (eb2c <Ftm_Pwm_Ip_ValidateParamDeadTime+0x104>)
    eab6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    eaba:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    eabe:	1ad3      	subs	r3, r2, r3
    eac0:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Validate the range deadtime value is less than 1024U and greater than 0U */
    if ((DeadTimeVal < 1024U) && (DeadTimeVal > 0U))
    eac4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    eac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    eacc:	d206      	bcs.n	eadc <Ftm_Pwm_Ip_ValidateParamDeadTime+0xb4>
    eace:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    ead2:	2b00      	cmp	r3, #0
    ead4:	d002      	beq.n	eadc <Ftm_Pwm_Ip_ValidateParamDeadTime+0xb4>
    {
        RetVal = TRUE;
    ead6:	2301      	movs	r3, #1
    ead8:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    /* Deadtime insertion corner cases */
    /* The deadtime delay is less than the channel (n) duty cycle */
    /* The deadtime delay is less than the channel (n+1) duty cycle */
    if ((0U == Prescaler) && ((0U == DeadTimePs) || (1U == DeadTimePs)))
    eadc:	f89d 3011 	ldrb.w	r3, [sp, #17]
    eae0:	2b00      	cmp	r3, #0
    eae2:	d11a      	bne.n	eb1a <Ftm_Pwm_Ip_ValidateParamDeadTime+0xf2>
    eae4:	f89d 3010 	ldrb.w	r3, [sp, #16]
    eae8:	2b00      	cmp	r3, #0
    eaea:	d003      	beq.n	eaf4 <Ftm_Pwm_Ip_ValidateParamDeadTime+0xcc>
    eaec:	f89d 3010 	ldrb.w	r3, [sp, #16]
    eaf0:	2b01      	cmp	r3, #1
    eaf2:	d112      	bne.n	eb1a <Ftm_Pwm_Ip_ValidateParamDeadTime+0xf2>
    { 
        if ((DeadTimeVal < CompareEven) && (DeadTimeVal < CompareOdd))
    eaf4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    eaf8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    eafc:	429a      	cmp	r2, r3
    eafe:	d209      	bcs.n	eb14 <Ftm_Pwm_Ip_ValidateParamDeadTime+0xec>
    eb00:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    eb04:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    eb08:	429a      	cmp	r2, r3
    eb0a:	d203      	bcs.n	eb14 <Ftm_Pwm_Ip_ValidateParamDeadTime+0xec>
        {
            RetVal = TRUE;
    eb0c:	2301      	movs	r3, #1
    eb0e:	f88d 301f 	strb.w	r3, [sp, #31]
    eb12:	e002      	b.n	eb1a <Ftm_Pwm_Ip_ValidateParamDeadTime+0xf2>
        }
        else
        {
            RetVal = FALSE;
    eb14:	2300      	movs	r3, #0
    eb16:	f88d 301f 	strb.w	r3, [sp, #31]
        }
    }

    return RetVal;
    eb1a:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    eb1e:	4618      	mov	r0, r3
    eb20:	b009      	add	sp, #36	; 0x24
    eb22:	f85d fb04 	ldr.w	pc, [sp], #4
    eb26:	bf00      	nop
    eb28:	00019800 	.word	0x00019800
    eb2c:	1fff8e2c 	.word	0x1fff8e2c

0000eb30 <Ftm_Pwm_Ip_CalculatePhaseShift>:
 *
 *END**************************************************************************/
static uint16 Ftm_Pwm_Ip_CalculatePhaseShift(uint8 Instance,
                                             uint16 DutyCycle,
                                             uint16 PhaseShift)
{
    eb30:	b084      	sub	sp, #16
    eb32:	4603      	mov	r3, r0
    eb34:	f88d 3007 	strb.w	r3, [sp, #7]
    eb38:	460b      	mov	r3, r1
    eb3a:	f8ad 3004 	strh.w	r3, [sp, #4]
    eb3e:	4613      	mov	r3, r2
    eb40:	f8ad 3002 	strh.w	r3, [sp, #2]
    uint16 CnVValue = 0U;
    eb44:	2300      	movs	r3, #0
    eb46:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* If 100% duty cycle, C(n+1)V > MOD.
    Then choose C(n+1)V = Period = MOD + 1 for optimization. */
    if (Ftm_Pwm_Ip_aPeriod[Instance] == DutyCycle)
    eb4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    eb4e:	4a17      	ldr	r2, [pc, #92]	; (ebac <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    eb50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    eb54:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    eb58:	429a      	cmp	r2, r3
    eb5a:	d107      	bne.n	eb6c <Ftm_Pwm_Ip_CalculatePhaseShift+0x3c>
    {
        CnVValue = Ftm_Pwm_Ip_aPeriod[Instance];
    eb5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    eb60:	4a12      	ldr	r2, [pc, #72]	; (ebac <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    eb62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    eb66:	f8ad 300e 	strh.w	r3, [sp, #14]
    eb6a:	e019      	b.n	eba0 <Ftm_Pwm_Ip_CalculatePhaseShift+0x70>
        (void) PhaseShift;
    }
    /* If 0% duty cycle, C(n+1)V = CnV = phase-shift value. */
    else if (0U == DutyCycle)
    eb6c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    eb70:	2b00      	cmp	r3, #0
    eb72:	d104      	bne.n	eb7e <Ftm_Pwm_Ip_CalculatePhaseShift+0x4e>
    {
        CnVValue = PhaseShift;
    eb74:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    eb78:	f8ad 300e 	strh.w	r3, [sp, #14]
    eb7c:	e010      	b.n	eba0 <Ftm_Pwm_Ip_CalculatePhaseShift+0x70>
        (void) Instance;
    }
    else
    {
        /* The n+1 match can occur at the next cycle */
        CnVValue = (PhaseShift + DutyCycle) % Ftm_Pwm_Ip_aPeriod[Instance];
    eb7e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    eb82:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    eb86:	4413      	add	r3, r2
    eb88:	f89d 2007 	ldrb.w	r2, [sp, #7]
    eb8c:	4907      	ldr	r1, [pc, #28]	; (ebac <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    eb8e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
    eb92:	fb93 f1f2 	sdiv	r1, r3, r2
    eb96:	fb01 f202 	mul.w	r2, r1, r2
    eb9a:	1a9b      	subs	r3, r3, r2
    eb9c:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    return CnVValue;
    eba0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    eba4:	4618      	mov	r0, r3
    eba6:	b004      	add	sp, #16
    eba8:	4770      	bx	lr
    ebaa:	bf00      	nop
    ebac:	1fff8e2c 	.word	0x1fff8e2c

0000ebb0 <Ftm_Pwm_Ip_InitPair>:
 * Description   : Configures the PWM signal for the combined channel.
 *
 *END**************************************************************************/
static void  Ftm_Pwm_Ip_InitPair(uint8 Instance,
                                 const Ftm_Pwm_Ip_PairCfgType * UserPairCfg)
{
    ebb0:	b500      	push	{lr}
    ebb2:	b085      	sub	sp, #20
    ebb4:	4603      	mov	r3, r0
    ebb6:	9100      	str	r1, [sp, #0]
    ebb8:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    ebbc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ebc0:	4a53      	ldr	r2, [pc, #332]	; (ed10 <Ftm_Pwm_Ip_InitPair+0x160>)
    ebc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebc6:	9303      	str	r3, [sp, #12]
    uint8 MainChId = 0U;
    ebc8:	2300      	movs	r3, #0
    ebca:	f88d 300b 	strb.w	r3, [sp, #11]
    uint8 PairChId = 0U;
    ebce:	2300      	movs	r3, #0
    ebd0:	f88d 300a 	strb.w	r3, [sp, #10]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    ebd4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ebd8:	2b03      	cmp	r3, #3
    ebda:	bf94      	ite	ls
    ebdc:	2301      	movls	r3, #1
    ebde:	2300      	movhi	r3, #0
    ebe0:	b2db      	uxtb	r3, r3
    ebe2:	4618      	mov	r0, r3
    ebe4:	f7f1 fe7e 	bl	8e4 <DevAssert>
    DevAssert(NULL_PTR != UserPairCfg);
    ebe8:	9b00      	ldr	r3, [sp, #0]
    ebea:	2b00      	cmp	r3, #0
    ebec:	bf14      	ite	ne
    ebee:	2301      	movne	r3, #1
    ebf0:	2300      	moveq	r3, #0
    ebf2:	b2db      	uxtb	r3, r3
    ebf4:	4618      	mov	r0, r3
    ebf6:	f7f1 fe75 	bl	8e4 <DevAssert>
    DevAssert(FTM_PWM_IP_PAIR_COUNT > UserPairCfg->PairId);
    ebfa:	9b00      	ldr	r3, [sp, #0]
    ebfc:	781b      	ldrb	r3, [r3, #0]
    ebfe:	2b03      	cmp	r3, #3
    ec00:	bf94      	ite	ls
    ec02:	2301      	movls	r3, #1
    ec04:	2300      	movhi	r3, #0
    ec06:	b2db      	uxtb	r3, r3
    ec08:	4618      	mov	r0, r3
    ec0a:	f7f1 fe6b 	bl	8e4 <DevAssert>
    /* Check that deadtime is used in complementary mode */
    if (TRUE == UserPairCfg->DeadtimeEn)
    ec0e:	9b00      	ldr	r3, [sp, #0]
    ec10:	785b      	ldrb	r3, [r3, #1]
    ec12:	2b00      	cmp	r3, #0
    ec14:	d004      	beq.n	ec20 <Ftm_Pwm_Ip_InitPair+0x70>
    {
        DevAssert(TRUE == UserPairCfg->ComplementaryModeEn);
    ec16:	9b00      	ldr	r3, [sp, #0]
    ec18:	789b      	ldrb	r3, [r3, #2]
    ec1a:	4618      	mov	r0, r3
    ec1c:	f7f1 fe62 	bl	8e4 <DevAssert>
    }
#endif

    /* Get channel ids for pair */
    MainChId = (uint8)(UserPairCfg->PairId * 2U);
    ec20:	9b00      	ldr	r3, [sp, #0]
    ec22:	781b      	ldrb	r3, [r3, #0]
    ec24:	005b      	lsls	r3, r3, #1
    ec26:	f88d 300b 	strb.w	r3, [sp, #11]
    PairChId = (uint8)(MainChId + 1U);
    ec2a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ec2e:	3301      	adds	r3, #1
    ec30:	f88d 300a 	strb.w	r3, [sp, #10]

    Ftm_Pwm_Ip_aPhaseShift[Instance][UserPairCfg->PairId] = UserPairCfg->PhaseShiftValue;
    ec34:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ec38:	9a00      	ldr	r2, [sp, #0]
    ec3a:	7812      	ldrb	r2, [r2, #0]
    ec3c:	4610      	mov	r0, r2
    ec3e:	9a00      	ldr	r2, [sp, #0]
    ec40:	8951      	ldrh	r1, [r2, #10]
    ec42:	4a34      	ldr	r2, [pc, #208]	; (ed14 <Ftm_Pwm_Ip_InitPair+0x164>)
    ec44:	009b      	lsls	r3, r3, #2
    ec46:	4403      	add	r3, r0
    ec48:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    /* Configure Complementary mode for the Pair */
    Ftm_Pwm_Ip_SetDualChnCompCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->ComplementaryModeEn);
    ec4c:	9b00      	ldr	r3, [sp, #0]
    ec4e:	7819      	ldrb	r1, [r3, #0]
    ec50:	9b00      	ldr	r3, [sp, #0]
    ec52:	789b      	ldrb	r3, [r3, #2]
    ec54:	461a      	mov	r2, r3
    ec56:	9803      	ldr	r0, [sp, #12]
    ec58:	f7ff f821 	bl	dc9e <Ftm_Pwm_Ip_SetDualChnCompCmd>

    /* Configure polarity of the PWM signal taking into consideration POL of main channel */
    if (TRUE == UserPairCfg->ComplementaryModeEn)
    ec5c:	9b00      	ldr	r3, [sp, #0]
    ec5e:	789b      	ldrb	r3, [r3, #2]
    ec60:	2b00      	cmp	r3, #0
    ec62:	d02f      	beq.n	ecc4 <Ftm_Pwm_Ip_InitPair+0x114>
    {
        /* Complementary mode active. Second channel active state is inverted. */
        if (FTM_PWM_IP_POLARITY_LOW == Ftm_Pwm_Ip_GetChnOutputPolarity(FtmBase, MainChId))
    ec64:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ec68:	4619      	mov	r1, r3
    ec6a:	9803      	ldr	r0, [sp, #12]
    ec6c:	f7ff f94c 	bl	df08 <Ftm_Pwm_Ip_GetChnOutputPolarity>
    ec70:	4603      	mov	r3, r0
    ec72:	2b01      	cmp	r3, #1
    ec74:	d113      	bne.n	ec9e <Ftm_Pwm_Ip_InitPair+0xee>
        {
            /* Main channel polarity is Active Low */
            if (FTM_PWM_IP_MAIN_DUPLICATED == UserPairCfg->PairChPolarity)
    ec76:	9b00      	ldr	r3, [sp, #0]
    ec78:	685b      	ldr	r3, [r3, #4]
    ec7a:	2b01      	cmp	r3, #1
    ec7c:	d107      	bne.n	ec8e <Ftm_Pwm_Ip_InitPair+0xde>
            {
                /* User wants to duplicate main channel active state. Set polarity to Active High. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_HIGH);
    ec7e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    ec82:	2200      	movs	r2, #0
    ec84:	4619      	mov	r1, r3
    ec86:	9803      	ldr	r0, [sp, #12]
    ec88:	f7ff f91c 	bl	dec4 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    ec8c:	e01a      	b.n	ecc4 <Ftm_Pwm_Ip_InitPair+0x114>
            }
            else
            {
                /* User wants to invert main channel active state. Set polarity to Active Low. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_LOW);
    ec8e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    ec92:	2201      	movs	r2, #1
    ec94:	4619      	mov	r1, r3
    ec96:	9803      	ldr	r0, [sp, #12]
    ec98:	f7ff f914 	bl	dec4 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    ec9c:	e012      	b.n	ecc4 <Ftm_Pwm_Ip_InitPair+0x114>
            }
        }
        else
        {
            /* Main channel polarity is Active High */
            if (FTM_PWM_IP_MAIN_DUPLICATED == UserPairCfg->PairChPolarity)
    ec9e:	9b00      	ldr	r3, [sp, #0]
    eca0:	685b      	ldr	r3, [r3, #4]
    eca2:	2b01      	cmp	r3, #1
    eca4:	d107      	bne.n	ecb6 <Ftm_Pwm_Ip_InitPair+0x106>
            {
                /* User wants to duplicate main channel active state. Set polarity to Active Low. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_LOW);
    eca6:	f89d 300a 	ldrb.w	r3, [sp, #10]
    ecaa:	2201      	movs	r2, #1
    ecac:	4619      	mov	r1, r3
    ecae:	9803      	ldr	r0, [sp, #12]
    ecb0:	f7ff f908 	bl	dec4 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    ecb4:	e006      	b.n	ecc4 <Ftm_Pwm_Ip_InitPair+0x114>
            }
            else
            {
                /* User wants to invert main channel active state. Set polarity to Active High. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_HIGH);
    ecb6:	f89d 300a 	ldrb.w	r3, [sp, #10]
    ecba:	2200      	movs	r2, #0
    ecbc:	4619      	mov	r1, r3
    ecbe:	9803      	ldr	r0, [sp, #12]
    ecc0:	f7ff f900 	bl	dec4 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
            }
        }
    }
#if (defined(FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE) && (FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE == STD_ON))
    /* Enable PWM output */
    Ftm_Pwm_Ip_EnablePwmChannelOutputs(FtmBase, PairChId);
    ecc4:	f89d 300a 	ldrb.w	r3, [sp, #10]
    ecc8:	4619      	mov	r1, r3
    ecca:	9803      	ldr	r0, [sp, #12]
    eccc:	f7fe fd22 	bl	d714 <Ftm_Pwm_Ip_EnablePwmChannelOutputs>
#endif

    /* Configure sync control for channels CV registers */
    Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->PairSyncEn);
    ecd0:	9b00      	ldr	r3, [sp, #0]
    ecd2:	7819      	ldrb	r1, [r3, #0]
    ecd4:	9b00      	ldr	r3, [sp, #0]
    ecd6:	7a5b      	ldrb	r3, [r3, #9]
    ecd8:	461a      	mov	r2, r3
    ecda:	9803      	ldr	r0, [sp, #12]
    ecdc:	f7ff f82d 	bl	dd3a <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>
    /* Configure dead time */
    Ftm_Pwm_Ip_SetDualChnDeadtimeCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->DeadtimeEn);
    ece0:	9b00      	ldr	r3, [sp, #0]
    ece2:	7819      	ldrb	r1, [r3, #0]
    ece4:	9b00      	ldr	r3, [sp, #0]
    ece6:	785b      	ldrb	r3, [r3, #1]
    ece8:	461a      	mov	r2, r3
    ecea:	9803      	ldr	r0, [sp, #12]
    ecec:	f7fe fffe 	bl	dcec <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd>
    /* Configure the generation of external trigger on the channel (n+1) */
    Ftm_Pwm_Ip_SetChnTriggerCmd(FtmBase, PairChId, UserPairCfg->PairExtTrigEn);
    ecf0:	9b00      	ldr	r3, [sp, #0]
    ecf2:	7a1a      	ldrb	r2, [r3, #8]
    ecf4:	f89d 300a 	ldrb.w	r3, [sp, #10]
    ecf8:	4619      	mov	r1, r3
    ecfa:	9803      	ldr	r0, [sp, #12]
    ecfc:	f7ff fd33 	bl	e766 <Ftm_Pwm_Ip_SetChnTriggerCmd>
    /* Sync Write buffered registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    ed00:	2101      	movs	r1, #1
    ed02:	9803      	ldr	r0, [sp, #12]
    ed04:	f7fe ff15 	bl	db32 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    ed08:	bf00      	nop
    ed0a:	b005      	add	sp, #20
    ed0c:	f85d fb04 	ldr.w	pc, [sp], #4
    ed10:	00019800 	.word	0x00019800
    ed14:	1fff8e74 	.word	0x1fff8e74

0000ed18 <Ftm_Pwm_Ip_DisableCmpIrq>:
 *                 time-overflow (TOIE, TOF) for the specified channel.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DisableCmpIrq(uint8 Instance,
                                     uint8 Channel)
{
    ed18:	b500      	push	{lr}
    ed1a:	b085      	sub	sp, #20
    ed1c:	4603      	mov	r3, r0
    ed1e:	460a      	mov	r2, r1
    ed20:	f88d 3007 	strb.w	r3, [sp, #7]
    ed24:	4613      	mov	r3, r2
    ed26:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    ed2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ed2e:	4a0a      	ldr	r2, [pc, #40]	; (ed58 <Ftm_Pwm_Ip_DisableCmpIrq+0x40>)
    ed30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed34:	9303      	str	r3, [sp, #12]

    Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
#endif

    /* Clear CHIE bit in CnSC register for the given channel to disable match-compare interrupts */
    Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, FALSE);
    ed36:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ed3a:	2200      	movs	r2, #0
    ed3c:	4619      	mov	r1, r3
    ed3e:	9803      	ldr	r0, [sp, #12]
    ed40:	f7fe fdde 	bl	d900 <Ftm_Pwm_Ip_UpdateChnInt>
    /* Clear CHnF bit interrupt flag */
    Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, Channel);
    ed44:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ed48:	4619      	mov	r1, r3
    ed4a:	9803      	ldr	r0, [sp, #12]
    ed4c:	f7fe fdfb 	bl	d946 <Ftm_Pwm_Ip_ClearChnEventFlag>
}
    ed50:	bf00      	nop
    ed52:	b005      	add	sp, #20
    ed54:	f85d fb04 	ldr.w	pc, [sp], #4
    ed58:	00019800 	.word	0x00019800

0000ed5c <Ftm_Pwm_Ip_ConfigureSWandHWSync>:

static void Ftm_Pwm_Ip_ConfigureSWandHWSync(uint8 Instance, const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    ed5c:	b500      	push	{lr}
    ed5e:	b085      	sub	sp, #20
    ed60:	4603      	mov	r3, r0
    ed62:	9100      	str	r1, [sp, #0]
    ed64:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    ed68:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ed6c:	4a53      	ldr	r2, [pc, #332]	; (eebc <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x160>)
    ed6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed72:	9303      	str	r3, [sp, #12]
    switch (SyncCfg->SyncMode)
    ed74:	9b00      	ldr	r3, [sp, #0]
    ed76:	681b      	ldr	r3, [r3, #0]
    ed78:	2b00      	cmp	r3, #0
    ed7a:	d002      	beq.n	ed82 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x26>
    ed7c:	2b01      	cmp	r3, #1
    ed7e:	d04c      	beq.n	ee1a <Ftm_Pwm_Ip_ConfigureSWandHWSync+0xbe>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, FALSE);
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
            break;

        default:    /* Nothing to do */
            break;
    ed80:	e097      	b.n	eeb2 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x156>
            Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync != FTM_PWM_IP_SYNC_DISABLED));
    ed82:	9b00      	ldr	r3, [sp, #0]
    ed84:	699b      	ldr	r3, [r3, #24]
    ed86:	2b00      	cmp	r3, #0
    ed88:	bf14      	ite	ne
    ed8a:	2301      	movne	r3, #1
    ed8c:	2300      	moveq	r3, #0
    ed8e:	b2db      	uxtb	r3, r3
    ed90:	4619      	mov	r1, r3
    ed92:	9803      	ldr	r0, [sp, #12]
    ed94:	f7ff f9b1 	bl	e0fa <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(FtmBase, FALSE);
    ed98:	2100      	movs	r1, #0
    ed9a:	9803      	ldr	r0, [sp, #12]
    ed9c:	f7ff fa2a 	bl	e1f4 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(FtmBase, (SyncCfg->InverterSync != FTM_PWM_IP_SYNC_DISABLED));
    eda0:	9b00      	ldr	r3, [sp, #0]
    eda2:	691b      	ldr	r3, [r3, #16]
    eda4:	2b00      	cmp	r3, #0
    eda6:	bf14      	ite	ne
    eda8:	2301      	movne	r3, #1
    edaa:	2300      	moveq	r3, #0
    edac:	b2db      	uxtb	r3, r3
    edae:	4619      	mov	r1, r3
    edb0:	9803      	ldr	r0, [sp, #12]
    edb2:	f7ff f9bb 	bl	e12c <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, FALSE);
    edb6:	2100      	movs	r1, #0
    edb8:	9803      	ldr	r0, [sp, #12]
    edba:	f7ff fa34 	bl	e226 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(FtmBase, (SyncCfg->OutRegSync != FTM_PWM_IP_SYNC_DISABLED));
    edbe:	9b00      	ldr	r3, [sp, #0]
    edc0:	695b      	ldr	r3, [r3, #20]
    edc2:	2b00      	cmp	r3, #0
    edc4:	bf14      	ite	ne
    edc6:	2301      	movne	r3, #1
    edc8:	2300      	moveq	r3, #0
    edca:	b2db      	uxtb	r3, r3
    edcc:	4619      	mov	r1, r3
    edce:	9803      	ldr	r0, [sp, #12]
    edd0:	f7ff f9c5 	bl	e15e <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, FALSE);
    edd4:	2100      	movs	r1, #0
    edd6:	9803      	ldr	r0, [sp, #12]
    edd8:	f7ff fa25 	bl	e226 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync != FTM_PWM_IP_SYNC_DISABLED));
    eddc:	9b00      	ldr	r3, [sp, #0]
    edde:	69db      	ldr	r3, [r3, #28]
    ede0:	2b00      	cmp	r3, #0
    ede2:	bf14      	ite	ne
    ede4:	2301      	movne	r3, #1
    ede6:	2300      	moveq	r3, #0
    ede8:	b2db      	uxtb	r3, r3
    edea:	4619      	mov	r1, r3
    edec:	9803      	ldr	r0, [sp, #12]
    edee:	f7ff f96b 	bl	e0c8 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(FtmBase, FALSE);
    edf2:	2100      	movs	r1, #0
    edf4:	9803      	ldr	r0, [sp, #12]
    edf6:	f7ff f9e4 	bl	e1c2 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
    edfa:	9b00      	ldr	r3, [sp, #0]
    edfc:	6a1b      	ldr	r3, [r3, #32]
    edfe:	2b00      	cmp	r3, #0
    ee00:	bf14      	ite	ne
    ee02:	2301      	movne	r3, #1
    ee04:	2300      	moveq	r3, #0
    ee06:	b2db      	uxtb	r3, r3
    ee08:	4619      	mov	r1, r3
    ee0a:	9803      	ldr	r0, [sp, #12]
    ee0c:	f7ff f943 	bl	e096 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, FALSE);
    ee10:	2100      	movs	r1, #0
    ee12:	9803      	ldr	r0, [sp, #12]
    ee14:	f7ff f9bc 	bl	e190 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>
            break;
    ee18:	e04b      	b.n	eeb2 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x156>
            Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, FALSE);
    ee1a:	2100      	movs	r1, #0
    ee1c:	9803      	ldr	r0, [sp, #12]
    ee1e:	f7ff f96c 	bl	e0fa <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync != FTM_PWM_IP_SYNC_DISABLED));
    ee22:	9b00      	ldr	r3, [sp, #0]
    ee24:	699b      	ldr	r3, [r3, #24]
    ee26:	2b00      	cmp	r3, #0
    ee28:	bf14      	ite	ne
    ee2a:	2301      	movne	r3, #1
    ee2c:	2300      	moveq	r3, #0
    ee2e:	b2db      	uxtb	r3, r3
    ee30:	4619      	mov	r1, r3
    ee32:	9803      	ldr	r0, [sp, #12]
    ee34:	f7ff f9de 	bl	e1f4 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(FtmBase, FALSE);
    ee38:	2100      	movs	r1, #0
    ee3a:	9803      	ldr	r0, [sp, #12]
    ee3c:	f7ff f976 	bl	e12c <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, (SyncCfg->InverterSync != FTM_PWM_IP_SYNC_DISABLED));
    ee40:	9b00      	ldr	r3, [sp, #0]
    ee42:	691b      	ldr	r3, [r3, #16]
    ee44:	2b00      	cmp	r3, #0
    ee46:	bf14      	ite	ne
    ee48:	2301      	movne	r3, #1
    ee4a:	2300      	moveq	r3, #0
    ee4c:	b2db      	uxtb	r3, r3
    ee4e:	4619      	mov	r1, r3
    ee50:	9803      	ldr	r0, [sp, #12]
    ee52:	f7ff f9e8 	bl	e226 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(FtmBase, FALSE);
    ee56:	2100      	movs	r1, #0
    ee58:	9803      	ldr	r0, [sp, #12]
    ee5a:	f7ff f980 	bl	e15e <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, (SyncCfg->OutRegSync != FTM_PWM_IP_SYNC_DISABLED));
    ee5e:	9b00      	ldr	r3, [sp, #0]
    ee60:	695b      	ldr	r3, [r3, #20]
    ee62:	2b00      	cmp	r3, #0
    ee64:	bf14      	ite	ne
    ee66:	2301      	movne	r3, #1
    ee68:	2300      	moveq	r3, #0
    ee6a:	b2db      	uxtb	r3, r3
    ee6c:	4619      	mov	r1, r3
    ee6e:	9803      	ldr	r0, [sp, #12]
    ee70:	f7ff f9d9 	bl	e226 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(FtmBase, FALSE);
    ee74:	2100      	movs	r1, #0
    ee76:	9803      	ldr	r0, [sp, #12]
    ee78:	f7ff f926 	bl	e0c8 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync != FTM_PWM_IP_SYNC_DISABLED));
    ee7c:	9b00      	ldr	r3, [sp, #0]
    ee7e:	69db      	ldr	r3, [r3, #28]
    ee80:	2b00      	cmp	r3, #0
    ee82:	bf14      	ite	ne
    ee84:	2301      	movne	r3, #1
    ee86:	2300      	moveq	r3, #0
    ee88:	b2db      	uxtb	r3, r3
    ee8a:	4619      	mov	r1, r3
    ee8c:	9803      	ldr	r0, [sp, #12]
    ee8e:	f7ff f998 	bl	e1c2 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, FALSE);
    ee92:	2100      	movs	r1, #0
    ee94:	9803      	ldr	r0, [sp, #12]
    ee96:	f7ff f8fe 	bl	e096 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
    ee9a:	9b00      	ldr	r3, [sp, #0]
    ee9c:	6a1b      	ldr	r3, [r3, #32]
    ee9e:	2b00      	cmp	r3, #0
    eea0:	bf14      	ite	ne
    eea2:	2301      	movne	r3, #1
    eea4:	2300      	moveq	r3, #0
    eea6:	b2db      	uxtb	r3, r3
    eea8:	4619      	mov	r1, r3
    eeaa:	9803      	ldr	r0, [sp, #12]
    eeac:	f7ff f970 	bl	e190 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>
            break;
    eeb0:	bf00      	nop
    }
}
    eeb2:	bf00      	nop
    eeb4:	b005      	add	sp, #20
    eeb6:	f85d fb04 	ldr.w	pc, [sp], #4
    eeba:	bf00      	nop
    eebc:	00019800 	.word	0x00019800

0000eec0 <Ftm_Pwm_Ip_ConfigureSyncType>:


static void Ftm_Pwm_Ip_ConfigureSyncType(uint8 Instance, const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    eec0:	b500      	push	{lr}
    eec2:	b085      	sub	sp, #20
    eec4:	4603      	mov	r3, r0
    eec6:	9100      	str	r1, [sp, #0]
    eec8:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    eecc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    eed0:	4a19      	ldr	r2, [pc, #100]	; (ef38 <Ftm_Pwm_Ip_ConfigureSyncType+0x78>)
    eed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eed6:	9303      	str	r3, [sp, #12]

    /* Configure sync for OUTMASK register */
    Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    eed8:	9b00      	ldr	r3, [sp, #0]
    eeda:	699b      	ldr	r3, [r3, #24]
    eedc:	2b00      	cmp	r3, #0
    eede:	bf14      	ite	ne
    eee0:	2301      	movne	r3, #1
    eee2:	2300      	moveq	r3, #0
    eee4:	b2db      	uxtb	r3, r3
    eee6:	4619      	mov	r1, r3
    eee8:	9803      	ldr	r0, [sp, #12]
    eeea:	f7fe fde7 	bl	dabc <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>
    /* Configure sync for INVCTRL register */
    Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd(FtmBase, (SyncCfg->InverterSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    eeee:	9b00      	ldr	r3, [sp, #0]
    eef0:	691b      	ldr	r3, [r3, #16]
    eef2:	2b00      	cmp	r3, #0
    eef4:	bf14      	ite	ne
    eef6:	2301      	movne	r3, #1
    eef8:	2300      	moveq	r3, #0
    eefa:	b2db      	uxtb	r3, r3
    eefc:	4619      	mov	r1, r3
    eefe:	9803      	ldr	r0, [sp, #12]
    ef00:	f7ff f881 	bl	e006 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd>
    /* Configure sync for SWOCTRL register */
    Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd(FtmBase, (SyncCfg->OutRegSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    ef04:	9b00      	ldr	r3, [sp, #0]
    ef06:	695b      	ldr	r3, [r3, #20]
    ef08:	2b00      	cmp	r3, #0
    ef0a:	bf14      	ite	ne
    ef0c:	2301      	movne	r3, #1
    ef0e:	2300      	moveq	r3, #0
    ef10:	b2db      	uxtb	r3, r3
    ef12:	4619      	mov	r1, r3
    ef14:	9803      	ldr	r0, [sp, #12]
    ef16:	f7ff f88e 	bl	e036 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd>
    /* Configure sync for MOD, HCR, CNTIN, and CV registers */
    Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    ef1a:	9b00      	ldr	r3, [sp, #0]
    ef1c:	69db      	ldr	r3, [r3, #28]
    ef1e:	2b00      	cmp	r3, #0
    ef20:	bf14      	ite	ne
    ef22:	2301      	movne	r3, #1
    ef24:	2300      	moveq	r3, #0
    ef26:	b2db      	uxtb	r3, r3
    ef28:	4619      	mov	r1, r3
    ef2a:	9803      	ldr	r0, [sp, #12]
    ef2c:	f7ff f853 	bl	dfd6 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd>
}
    ef30:	bf00      	nop
    ef32:	b005      	add	sp, #20
    ef34:	f85d fb04 	ldr.w	pc, [sp], #4
    ef38:	00019800 	.word	0x00019800

0000ef3c <Ftm_Pwm_Ip_UpdateSync>:
 *
 * Implements : Ftm_Pwm_Ip_UpdateSync_Activity
 *END**************************************************************************/
static Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdateSync(uint8 Instance,
                                                   const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    ef3c:	b500      	push	{lr}
    ef3e:	b087      	sub	sp, #28
    ef40:	4603      	mov	r3, r0
    ef42:	9100      	str	r1, [sp, #0]
    ef44:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    ef48:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ef4c:	4a4b      	ldr	r2, [pc, #300]	; (f07c <Ftm_Pwm_Ip_UpdateSync+0x140>)
    ef4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef52:	9304      	str	r3, [sp, #16]
    Ftm_Pwm_Ip_StatusType RetStatus = FTM_PWM_IP_STATUS_SUCCESS;
    ef54:	2300      	movs	r3, #0
    ef56:	9305      	str	r3, [sp, #20]
    boolean HardwareSync = FALSE;
    ef58:	2300      	movs	r3, #0
    ef5a:	f88d 300f 	strb.w	r3, [sp, #15]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    ef5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ef62:	2b03      	cmp	r3, #3
    ef64:	bf94      	ite	ls
    ef66:	2301      	movls	r3, #1
    ef68:	2300      	movhi	r3, #0
    ef6a:	b2db      	uxtb	r3, r3
    ef6c:	4618      	mov	r0, r3
    ef6e:	f7f1 fcb9 	bl	8e4 <DevAssert>
    DevAssert(SyncCfg != NULL_PTR);
    ef72:	9b00      	ldr	r3, [sp, #0]
    ef74:	2b00      	cmp	r3, #0
    ef76:	bf14      	ite	ne
    ef78:	2301      	movne	r3, #1
    ef7a:	2300      	moveq	r3, #0
    ef7c:	b2db      	uxtb	r3, r3
    ef7e:	4618      	mov	r0, r3
    ef80:	f7f1 fcb0 	bl	8e4 <DevAssert>
#endif

    HardwareSync = SyncCfg->HwSync0 || SyncCfg->HwSync1 || SyncCfg->HwSync2;
    ef84:	9b00      	ldr	r3, [sp, #0]
    ef86:	791b      	ldrb	r3, [r3, #4]
    ef88:	2b00      	cmp	r3, #0
    ef8a:	d107      	bne.n	ef9c <Ftm_Pwm_Ip_UpdateSync+0x60>
    ef8c:	9b00      	ldr	r3, [sp, #0]
    ef8e:	795b      	ldrb	r3, [r3, #5]
    ef90:	2b00      	cmp	r3, #0
    ef92:	d103      	bne.n	ef9c <Ftm_Pwm_Ip_UpdateSync+0x60>
    ef94:	9b00      	ldr	r3, [sp, #0]
    ef96:	799b      	ldrb	r3, [r3, #6]
    ef98:	2b00      	cmp	r3, #0
    ef9a:	d001      	beq.n	efa0 <Ftm_Pwm_Ip_UpdateSync+0x64>
    ef9c:	2301      	movs	r3, #1
    ef9e:	e000      	b.n	efa2 <Ftm_Pwm_Ip_UpdateSync+0x66>
    efa0:	2300      	movs	r3, #0
    efa2:	f88d 300f 	strb.w	r3, [sp, #15]
    efa6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    efaa:	f003 0301 	and.w	r3, r3, #1
    efae:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Software and hardware triggers are not allowed at the same time */
    if ((SyncCfg->SyncMode == FTM_PWM_IP_SYNC_SWTRIGGER) && (HardwareSync == TRUE))
    efb2:	9b00      	ldr	r3, [sp, #0]
    efb4:	681b      	ldr	r3, [r3, #0]
    efb6:	2b00      	cmp	r3, #0
    efb8:	d105      	bne.n	efc6 <Ftm_Pwm_Ip_UpdateSync+0x8a>
    efba:	f89d 300f 	ldrb.w	r3, [sp, #15]
    efbe:	2b00      	cmp	r3, #0
    efc0:	d001      	beq.n	efc6 <Ftm_Pwm_Ip_UpdateSync+0x8a>
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    efc2:	2301      	movs	r3, #1
    efc4:	9305      	str	r3, [sp, #20]
    }
    if (SyncCfg->CounterSync == FTM_PWM_IP_SYNC_ON_CLK)
    efc6:	9b00      	ldr	r3, [sp, #0]
    efc8:	6a1b      	ldr	r3, [r3, #32]
    efca:	2b02      	cmp	r3, #2
    efcc:	d101      	bne.n	efd2 <Ftm_Pwm_Ip_UpdateSync+0x96>
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    efce:	2301      	movs	r3, #1
    efd0:	9305      	str	r3, [sp, #20]
    }

    if (RetStatus == FTM_PWM_IP_STATUS_SUCCESS)
    efd2:	9b05      	ldr	r3, [sp, #20]
    efd4:	2b00      	cmp	r3, #0
    efd6:	d14c      	bne.n	f072 <Ftm_Pwm_Ip_UpdateSync+0x136>
    {
        Ftm_Pwm_Ip_ConfigureSWandHWSync(Instance, SyncCfg);
    efd8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    efdc:	9900      	ldr	r1, [sp, #0]
    efde:	4618      	mov	r0, r3
    efe0:	f7ff febc 	bl	ed5c <Ftm_Pwm_Ip_ConfigureSWandHWSync>
        /* Enhanced PWM sync is used */
        Ftm_Pwm_Ip_SetPwmSyncModeCmd(FtmBase, TRUE);
    efe4:	2101      	movs	r1, #1
    efe6:	9804      	ldr	r0, [sp, #16]
    efe8:	f7ff f83d 	bl	e066 <Ftm_Pwm_Ip_SetPwmSyncModeCmd>
        /* Configure trigger source for sync */
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 0U, SyncCfg->HwSync0);
    efec:	9b00      	ldr	r3, [sp, #0]
    efee:	791b      	ldrb	r3, [r3, #4]
    eff0:	461a      	mov	r2, r3
    eff2:	2100      	movs	r1, #0
    eff4:	9804      	ldr	r0, [sp, #16]
    eff6:	f7fe fd77 	bl	dae8 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 1U, SyncCfg->HwSync1);
    effa:	9b00      	ldr	r3, [sp, #0]
    effc:	795b      	ldrb	r3, [r3, #5]
    effe:	461a      	mov	r2, r3
    f000:	2101      	movs	r1, #1
    f002:	9804      	ldr	r0, [sp, #16]
    f004:	f7fe fd70 	bl	dae8 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 2U, SyncCfg->HwSync2);
    f008:	9b00      	ldr	r3, [sp, #0]
    f00a:	799b      	ldrb	r3, [r3, #6]
    f00c:	461a      	mov	r2, r3
    f00e:	2102      	movs	r1, #2
    f010:	9804      	ldr	r0, [sp, #16]
    f012:	f7fe fd69 	bl	dae8 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        /* Configure if FTM clears TRIGn (n=0,1,2) when the hardware trigger n is detected. */
        Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd(FtmBase, SyncCfg->HwTriggerAutoClear);
    f016:	9b00      	ldr	r3, [sp, #0]
    f018:	79db      	ldrb	r3, [r3, #7]
    f01a:	4619      	mov	r1, r3
    f01c:	9804      	ldr	r0, [sp, #16]
    f01e:	f7fe ffc2 	bl	dfa6 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd>

        /* Configure loading points */
        Ftm_Pwm_Ip_SetMaxLoadingCmd(FtmBase, SyncCfg->MaxLoadPoint);
    f022:	9b00      	ldr	r3, [sp, #0]
    f024:	7a1b      	ldrb	r3, [r3, #8]
    f026:	4619      	mov	r1, r3
    f028:	9804      	ldr	r0, [sp, #16]
    f02a:	f7fe fd31 	bl	da90 <Ftm_Pwm_Ip_SetMaxLoadingCmd>
        Ftm_Pwm_Ip_SetMinLoadingCmd(FtmBase, SyncCfg->MinLoadPoint);
    f02e:	9b00      	ldr	r3, [sp, #0]
    f030:	7a5b      	ldrb	r3, [r3, #9]
    f032:	4619      	mov	r1, r3
    f034:	9804      	ldr	r0, [sp, #16]
    f036:	f7fe fd15 	bl	da64 <Ftm_Pwm_Ip_SetMinLoadingCmd>

#if (defined(FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD) && (FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD == STD_ON))
        if(TRUE == SyncCfg->HalfCycleLoadPoint)
    f03a:	9b00      	ldr	r3, [sp, #0]
    f03c:	7a9b      	ldrb	r3, [r3, #10]
    f03e:	2b00      	cmp	r3, #0
    f040:	d005      	beq.n	f04e <Ftm_Pwm_Ip_UpdateSync+0x112>
        {
            Ftm_Pwm_Ip_SetHalfCycleValue(FtmBase, SyncCfg->HalfCycleLoadPointValue);
    f042:	9b00      	ldr	r3, [sp, #0]
    f044:	899b      	ldrh	r3, [r3, #12]
    f046:	4619      	mov	r1, r3
    f048:	9804      	ldr	r0, [sp, #16]
    f04a:	f7ff f9c1 	bl	e3d0 <Ftm_Pwm_Ip_SetHalfCycleValue>
        }
        Ftm_Pwm_Ip_SetHalfCycleCmd(FtmBase, SyncCfg->HalfCycleLoadPoint);
    f04e:	9b00      	ldr	r3, [sp, #0]
    f050:	7a9b      	ldrb	r3, [r3, #10]
    f052:	4619      	mov	r1, r3
    f054:	9804      	ldr	r0, [sp, #16]
    f056:	f7ff f99e 	bl	e396 <Ftm_Pwm_Ip_SetHalfCycleCmd>
#endif

#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
        /* Sets the frequency of reload points */
        Ftm_Pwm_Ip_SetLoadFreq(FtmBase, SyncCfg->LoadPointFreq);
    f05a:	9b00      	ldr	r3, [sp, #0]
    f05c:	7b9b      	ldrb	r3, [r3, #14]
    f05e:	4619      	mov	r1, r3
    f060:	9804      	ldr	r0, [sp, #16]
    f062:	f7fe ff66 	bl	df32 <Ftm_Pwm_Ip_SetLoadFreq>
#endif        
        
        Ftm_Pwm_Ip_ConfigureSyncType(Instance, SyncCfg);
    f066:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f06a:	9900      	ldr	r1, [sp, #0]
    f06c:	4618      	mov	r0, r3
    f06e:	f7ff ff27 	bl	eec0 <Ftm_Pwm_Ip_ConfigureSyncType>
    }

    return RetStatus;
    f072:	9b05      	ldr	r3, [sp, #20]
}
    f074:	4618      	mov	r0, r3
    f076:	b007      	add	sp, #28
    f078:	f85d fb04 	ldr.w	pc, [sp], #4
    f07c:	00019800 	.word	0x00019800

0000f080 <Ftm_Pwm_Ip_ResetAndFirstConfigure>:
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
#endif /* (STD_ON == FTM_PWM_IP_USER_ACCESS_ALLOWED_AVAILABLE) */


static void Ftm_Pwm_Ip_ResetAndFirstConfigure(uint8 Instance, const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    f080:	b500      	push	{lr}
    f082:	b085      	sub	sp, #20
    f084:	4603      	mov	r3, r0
    f086:	9100      	str	r1, [sp, #0]
    f088:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    f08c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f090:	4a1f      	ldr	r2, [pc, #124]	; (f110 <Ftm_Pwm_Ip_ResetAndFirstConfigure+0x90>)
    f092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f096:	9303      	str	r3, [sp, #12]

    Ftm_Pwm_Ip_Reset(FtmBase);
    f098:	9803      	ldr	r0, [sp, #12]
    f09a:	f7ff faef 	bl	e67c <Ftm_Pwm_Ip_Reset>
    /* Disable counter clock */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
    f09e:	2100      	movs	r1, #0
    f0a0:	9803      	ldr	r0, [sp, #12]
    f0a2:	f7fe fae0 	bl	d666 <Ftm_Pwm_Ip_SetClockSource>
    /* Clear the overflow flag */
    Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
    f0a6:	9803      	ldr	r0, [sp, #12]
    f0a8:	f7fe fb29 	bl	d6fe <Ftm_Pwm_Ip_ClearTimerOverflow>
    /* Set Counter mode */
    Ftm_Pwm_Ip_SetCpwms(FtmBase, (UserInstCfg->CntMode == FTM_PWM_IP_EDGE_ALIGNED)? FALSE : TRUE);
    f0ac:	9b00      	ldr	r3, [sp, #0]
    f0ae:	68db      	ldr	r3, [r3, #12]
    f0b0:	2b00      	cmp	r3, #0
    f0b2:	bf14      	ite	ne
    f0b4:	2301      	movne	r3, #1
    f0b6:	2300      	moveq	r3, #0
    f0b8:	b2db      	uxtb	r3, r3
    f0ba:	4619      	mov	r1, r3
    f0bc:	9803      	ldr	r0, [sp, #12]
    f0be:	f7fe fae3 	bl	d688 <Ftm_Pwm_Ip_SetCpwms>
    /* Disable FTM mode */
    Ftm_Pwm_Ip_Enable(FtmBase, FALSE);
    f0c2:	2100      	movs	r1, #0
    f0c4:	9803      	ldr	r0, [sp, #12]
    f0c6:	f7fe fca1 	bl	da0c <Ftm_Pwm_Ip_Enable>
    /* Configure debug mode */
    Ftm_Pwm_Ip_SetBdmMode(FtmBase, UserInstCfg->DebugMode);
    f0ca:	9b00      	ldr	r3, [sp, #0]
    f0cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f0ce:	4619      	mov	r1, r3
    f0d0:	9803      	ldr	r0, [sp, #12]
    f0d2:	f7fe ff43 	bl	df5c <Ftm_Pwm_Ip_SetBdmMode>
    /* Configure Deadtime insertion */
    Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, (uint8)(UserInstCfg->DeadTimeValue & FTM_DEADTIME_DTVAL_MASK));
    f0d6:	9b00      	ldr	r3, [sp, #0]
    f0d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    f0da:	b2db      	uxtb	r3, r3
    f0dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    f0e0:	b2db      	uxtb	r3, r3
    f0e2:	4619      	mov	r1, r3
    f0e4:	9803      	ldr	r0, [sp, #12]
    f0e6:	f7fe fe76 	bl	ddd6 <Ftm_Pwm_Ip_SetDeadtimeCount>
    Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, (uint8)(UserInstCfg->DeadTimeValue >> FTM_DEADTIME_DTVAL_WIDTH));
    f0ea:	9b00      	ldr	r3, [sp, #0]
    f0ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    f0ee:	099b      	lsrs	r3, r3, #6
    f0f0:	b29b      	uxth	r3, r3
    f0f2:	b2db      	uxtb	r3, r3
    f0f4:	4619      	mov	r1, r3
    f0f6:	9803      	ldr	r0, [sp, #12]
    f0f8:	f7fe fe9e 	bl	de38 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    Ftm_Pwm_Ip_SetDeadtimePrescaler(FtmBase, UserInstCfg->DeadTimePs);
    f0fc:	9b00      	ldr	r3, [sp, #0]
    f0fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    f100:	4619      	mov	r1, r3
    f102:	9803      	ldr	r0, [sp, #12]
    f104:	f7fe fe7a 	bl	ddfc <Ftm_Pwm_Ip_SetDeadtimePrescaler>
}
    f108:	bf00      	nop
    f10a:	b005      	add	sp, #20
    f10c:	f85d fb04 	ldr.w	pc, [sp], #4
    f110:	00019800 	.word	0x00019800

0000f114 <Ftm_Pwm_Ip_InitInstance>:
 * Description   : Configures the FTM Instance in PWM mode and all general registers.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitInstance(uint8 Instance,
                                    const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    f114:	b500      	push	{lr}
    f116:	b085      	sub	sp, #20
    f118:	4603      	mov	r3, r0
    f11a:	9100      	str	r1, [sp, #0]
    f11c:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    f120:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f124:	4a48      	ldr	r2, [pc, #288]	; (f248 <Ftm_Pwm_Ip_InitInstance+0x134>)
    f126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f12a:	9303      	str	r3, [sp, #12]

#if (defined(FTM_PWM_IP_SIM_AVAILABLE) && (FTM_PWM_IP_SIM_AVAILABLE == STD_ON))
    Ftm_Pwm_Ip_SimType * SimBase  = Ftm_Pwm_Ip_aSimBase[0U];
    f12c:	4b47      	ldr	r3, [pc, #284]	; (f24c <Ftm_Pwm_Ip_InitInstance+0x138>)
    f12e:	9302      	str	r3, [sp, #8]
#endif

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    f130:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f134:	2b03      	cmp	r3, #3
    f136:	bf94      	ite	ls
    f138:	2301      	movls	r3, #1
    f13a:	2300      	movhi	r3, #0
    f13c:	b2db      	uxtb	r3, r3
    f13e:	4618      	mov	r0, r3
    f140:	f7f1 fbd0 	bl	8e4 <DevAssert>
    DevAssert(NULL_PTR != UserInstCfg);
    f144:	9b00      	ldr	r3, [sp, #0]
    f146:	2b00      	cmp	r3, #0
    f148:	bf14      	ite	ne
    f14a:	2301      	movne	r3, #1
    f14c:	2300      	moveq	r3, #0
    f14e:	b2db      	uxtb	r3, r3
    f150:	4618      	mov	r0, r3
    f152:	f7f1 fbc7 	bl	8e4 <DevAssert>
    /* Maximum value for Deadtime is 1023 including the extension */
    DevAssert((uint16)0x3FF >= UserInstCfg->DeadTimeValue);
    f156:	9b00      	ldr	r3, [sp, #0]
    f158:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    f15a:	f240 32ff 	movw	r2, #1023	; 0x3ff
    f15e:	4293      	cmp	r3, r2
    f160:	bf94      	ite	ls
    f162:	2301      	movls	r3, #1
    f164:	2300      	movhi	r3, #0
    f166:	b2db      	uxtb	r3, r3
    f168:	4618      	mov	r0, r3
    f16a:	f7f1 fbbb 	bl	8e4 <DevAssert>
#ifdef MCAL_ENABLE_USER_MODE_SUPPORT
    /* The FTM channel output state is retained when the channel is in output mode.*/
    OsIf_Trusted_Call2params(Ftm_Pwm_Ip_SetSimOutputBufferEn, SimBase, Instance);
#else   
    /* The FTM channel output state is retained when the channel is in output mode.*/
    Ftm_Pwm_Ip_SetSimOutputBufferEn(SimBase, Instance);
    f16e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f172:	4619      	mov	r1, r3
    f174:	9802      	ldr	r0, [sp, #8]
    f176:	f7ff fc45 	bl	ea04 <Ftm_Pwm_Ip_SetSimOutputBufferEn>
#endif
#endif

    Ftm_Pwm_Ip_ResetAndFirstConfigure(Instance, UserInstCfg);
    f17a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f17e:	9900      	ldr	r1, [sp, #0]
    f180:	4618      	mov	r0, r3
    f182:	f7ff ff7d 	bl	f080 <Ftm_Pwm_Ip_ResetAndFirstConfigure>

    /* Configure the synchronization and reload points */
    (void)Ftm_Pwm_Ip_UpdateSync(Instance, UserInstCfg->SyncCfg);
    f186:	9b00      	ldr	r3, [sp, #0]
    f188:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    f18a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f18e:	4611      	mov	r1, r2
    f190:	4618      	mov	r0, r3
    f192:	f7ff fed3 	bl	ef3c <Ftm_Pwm_Ip_UpdateSync>

    /* Configure PWM period */
    Ftm_Pwm_Ip_SetCounterInitVal(FtmBase, 0x00U);
    f196:	2100      	movs	r1, #0
    f198:	9803      	ldr	r0, [sp, #12]
    f19a:	f7fe fc26 	bl	d9ea <Ftm_Pwm_Ip_SetCounterInitVal>

    Ftm_Pwm_Ip_aPeriod[Instance] = UserInstCfg->PwmPeriod;
    f19e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f1a2:	9a00      	ldr	r2, [sp, #0]
    f1a4:	8e91      	ldrh	r1, [r2, #52]	; 0x34
    f1a6:	4a2a      	ldr	r2, [pc, #168]	; (f250 <Ftm_Pwm_Ip_InitInstance+0x13c>)
    f1a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    Ftm_Pwm_Ip_aClockSource[Instance] = UserInstCfg->ClkSrc;
    f1ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f1b0:	9a00      	ldr	r2, [sp, #0]
    f1b2:	6812      	ldr	r2, [r2, #0]
    f1b4:	4927      	ldr	r1, [pc, #156]	; (f254 <Ftm_Pwm_Ip_InitInstance+0x140>)
    f1b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    Ftm_Pwm_Ip_aClockPrescaler[Instance] = UserInstCfg->ClkPs;
    f1ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f1be:	9a00      	ldr	r2, [sp, #0]
    f1c0:	6852      	ldr	r2, [r2, #4]
    f1c2:	4925      	ldr	r1, [pc, #148]	; (f258 <Ftm_Pwm_Ip_InitInstance+0x144>)
    f1c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    Ftm_Pwm_Ip_aAlternateClockPrescaler[Instance] = UserInstCfg->AlternateClkPs;
    f1c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f1cc:	9a00      	ldr	r2, [sp, #0]
    f1ce:	6892      	ldr	r2, [r2, #8]
    f1d0:	4922      	ldr	r1, [pc, #136]	; (f25c <Ftm_Pwm_Ip_InitInstance+0x148>)
    f1d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if (TRUE == UserInstCfg->OverflowIrqEn)
    f1d6:	9b00      	ldr	r3, [sp, #0]
    f1d8:	7c1b      	ldrb	r3, [r3, #16]
    f1da:	2b00      	cmp	r3, #0
    f1dc:	d00e      	beq.n	f1fc <Ftm_Pwm_Ip_InitInstance+0xe8>
    {
        Ftm_Pwm_Ip_pOverflowIrqCallback[Instance].FunctionCallback = UserInstCfg->OverflowCb.FunctionCallback;
    f1de:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f1e2:	9a00      	ldr	r2, [sp, #0]
    f1e4:	6952      	ldr	r2, [r2, #20]
    f1e6:	491e      	ldr	r1, [pc, #120]	; (f260 <Ftm_Pwm_Ip_InitInstance+0x14c>)
    f1e8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        Ftm_Pwm_Ip_pOverflowIrqCallback[Instance].CbParam = UserInstCfg->OverflowCb.CbParam;
    f1ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f1f0:	9a00      	ldr	r2, [sp, #0]
    f1f2:	6992      	ldr	r2, [r2, #24]
    f1f4:	491a      	ldr	r1, [pc, #104]	; (f260 <Ftm_Pwm_Ip_InitInstance+0x14c>)
    f1f6:	00db      	lsls	r3, r3, #3
    f1f8:	440b      	add	r3, r1
    f1fa:	605a      	str	r2, [r3, #4]
        Ftm_Pwm_Ip_pReloadIrqCallback[Instance].FunctionCallback = UserInstCfg->ReloadCb.FunctionCallback;
        Ftm_Pwm_Ip_pReloadIrqCallback[Instance].CbParam = UserInstCfg->ReloadCb.CbParam;
    }
#endif    

    if (FTM_PWM_IP_CENTER_ALIGNED == UserInstCfg->CntMode)
    f1fc:	9b00      	ldr	r3, [sp, #0]
    f1fe:	68db      	ldr	r3, [r3, #12]
    f200:	2b01      	cmp	r3, #1
    f202:	d108      	bne.n	f216 <Ftm_Pwm_Ip_InitInstance+0x102>
    {
        /* For Center Aligned mode MOD register should be divided by 2. Period is 2 * (MOD − CNTIN) */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(UserInstCfg->PwmPeriod >> 1U));
    f204:	9b00      	ldr	r3, [sp, #0]
    f206:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    f208:	085b      	lsrs	r3, r3, #1
    f20a:	b29b      	uxth	r3, r3
    f20c:	4619      	mov	r1, r3
    f20e:	9803      	ldr	r0, [sp, #12]
    f210:	f7fe faa3 	bl	d75a <Ftm_Pwm_Ip_SetMod>
    f214:	e007      	b.n	f226 <Ftm_Pwm_Ip_InitInstance+0x112>
    }
    else
    {
        /* For Edge Aligned mode period is determined by: MOD-CNTIN+1 */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(UserInstCfg->PwmPeriod - 1U));
    f216:	9b00      	ldr	r3, [sp, #0]
    f218:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    f21a:	3b01      	subs	r3, #1
    f21c:	b29b      	uxth	r3, r3
    f21e:	4619      	mov	r1, r3
    f220:	9803      	ldr	r0, [sp, #12]
    f222:	f7fe fa9a 	bl	d75a <Ftm_Pwm_Ip_SetMod>
    /* Configure PWM period dither */
    Ftm_Pwm_Ip_SetModFracVal(FtmBase, UserInstCfg->PwmPeriodDither);
#endif

    /* Configure Initialization feature */
    Ftm_Pwm_Ip_SetInitTriggerCmd(FtmBase, UserInstCfg->InitTriggerEn);
    f226:	9b00      	ldr	r3, [sp, #0]
    f228:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    f22c:	4619      	mov	r1, r3
    f22e:	9803      	ldr	r0, [sp, #12]
    f230:	f7fe fe16 	bl	de60 <Ftm_Pwm_Ip_SetInitTriggerCmd>
#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
    Ftm_Pwm_Ip_SetInitTriggerMode(FtmBase, UserInstCfg->InitTrigMode);
    f234:	9b00      	ldr	r3, [sp, #0]
    f236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    f238:	4619      	mov	r1, r3
    f23a:	9803      	ldr	r0, [sp, #12]
    f23c:	f7fe fea0 	bl	df80 <Ftm_Pwm_Ip_SetInitTriggerMode>
#endif
}
    f240:	bf00      	nop
    f242:	b005      	add	sp, #20
    f244:	f85d fb04 	ldr.w	pc, [sp], #4
    f248:	00019800 	.word	0x00019800
    f24c:	40048000 	.word	0x40048000
    f250:	1fff8e2c 	.word	0x1fff8e2c
    f254:	1fff9124 	.word	0x1fff9124
    f258:	1fff9134 	.word	0x1fff9134
    f25c:	1fff9144 	.word	0x1fff9144
    f260:	1fff8fd4 	.word	0x1fff8fd4

0000f264 <Ftm_Pwm_Ip_InitInstanceStart>:
 * Description   : Configures the FTM clock and pre-scaler, enable FTM mode
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitInstanceStart(uint8 Instance,
                                         const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    f264:	b500      	push	{lr}
    f266:	b085      	sub	sp, #20
    f268:	4603      	mov	r3, r0
    f26a:	9100      	str	r1, [sp, #0]
    f26c:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    f270:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f274:	4a23      	ldr	r2, [pc, #140]	; (f304 <Ftm_Pwm_Ip_InitInstanceStart+0xa0>)
    f276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f27a:	9303      	str	r3, [sp, #12]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    f27c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f280:	2b03      	cmp	r3, #3
    f282:	bf94      	ite	ls
    f284:	2301      	movls	r3, #1
    f286:	2300      	movhi	r3, #0
    f288:	b2db      	uxtb	r3, r3
    f28a:	4618      	mov	r0, r3
    f28c:	f7f1 fb2a 	bl	8e4 <DevAssert>
    DevAssert(NULL_PTR != UserInstCfg);
    f290:	9b00      	ldr	r3, [sp, #0]
    f292:	2b00      	cmp	r3, #0
    f294:	bf14      	ite	ne
    f296:	2301      	movne	r3, #1
    f298:	2300      	moveq	r3, #0
    f29a:	b2db      	uxtb	r3, r3
    f29c:	4618      	mov	r0, r3
    f29e:	f7f1 fb21 	bl	8e4 <DevAssert>
#endif

#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    /* Set Fault Input Filter Value */  
    Ftm_Pwm_Ip_SetFaultFilterValue(FtmBase, UserInstCfg->FaultInFilter);
    f2a2:	9b00      	ldr	r3, [sp, #0]
    f2a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    f2a8:	4619      	mov	r1, r3
    f2aa:	9803      	ldr	r0, [sp, #12]
    f2ac:	f7ff fb16 	bl	e8dc <Ftm_Pwm_Ip_SetFaultFilterValue>
    /* Set Fault output state */  
    Ftm_Pwm_Ip_SetFaultOutputState(FtmBase, UserInstCfg->FaultOutState);
    f2b0:	9b00      	ldr	r3, [sp, #0]
    f2b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    f2b4:	4619      	mov	r1, r3
    f2b6:	9803      	ldr	r0, [sp, #12]
    f2b8:	f7ff fb24 	bl	e904 <Ftm_Pwm_Ip_SetFaultOutputState>
    /* Defines the FTM fault control mode */
    Ftm_Pwm_Ip_SetFaultControlMode(FtmBase, UserInstCfg->FaultCtrMode);
    f2bc:	9b00      	ldr	r3, [sp, #0]
    f2be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    f2c0:	4619      	mov	r1, r3
    f2c2:	9803      	ldr	r0, [sp, #12]
    f2c4:	f7ff fa8d 	bl	e7e2 <Ftm_Pwm_Ip_SetFaultControlMode>
#endif

    /* Enable FTM mode */
    Ftm_Pwm_Ip_Enable(FtmBase, TRUE);
    f2c8:	2101      	movs	r1, #1
    f2ca:	9803      	ldr	r0, [sp, #12]
    f2cc:	f7fe fb9e 	bl	da0c <Ftm_Pwm_Ip_Enable>

    Ftm_Pwm_Ip_SetPwmSyncMode(FtmBase, TRUE);
    f2d0:	2101      	movs	r1, #1
    f2d2:	9803      	ldr	r0, [sp, #12]
    f2d4:	f7fe fbb0 	bl	da38 <Ftm_Pwm_Ip_SetPwmSyncMode>

    /* Configure the clock prescaler */
    Ftm_Pwm_Ip_SetClockPs(FtmBase, UserInstCfg->ClkPs);
    f2d8:	9b00      	ldr	r3, [sp, #0]
    f2da:	685b      	ldr	r3, [r3, #4]
    f2dc:	4619      	mov	r1, r3
    f2de:	9803      	ldr	r0, [sp, #12]
    f2e0:	f7fe f9a6 	bl	d630 <Ftm_Pwm_Ip_SetClockPs>
    /* Configure the clock source */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, UserInstCfg->ClkSrc);
    f2e4:	9b00      	ldr	r3, [sp, #0]
    f2e6:	681b      	ldr	r3, [r3, #0]
    f2e8:	4619      	mov	r1, r3
    f2ea:	9803      	ldr	r0, [sp, #12]
    f2ec:	f7fe f9bb 	bl	d666 <Ftm_Pwm_Ip_SetClockSource>
    /* Confirm the instance is active */
    Ftm_Pwm_Ip_aInstanceState[Instance] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    f2f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f2f4:	4a04      	ldr	r2, [pc, #16]	; (f308 <Ftm_Pwm_Ip_InitInstanceStart+0xa4>)
    f2f6:	2101      	movs	r1, #1
    f2f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    f2fc:	bf00      	nop
    f2fe:	b005      	add	sp, #20
    f300:	f85d fb04 	ldr.w	pc, [sp], #4
    f304:	00019800 	.word	0x00019800
    f308:	1fff8ff4 	.word	0x1fff8ff4

0000f30c <Ftm_Pwm_Ip_ConfigurePairedChannel>:

static void Ftm_Pwm_Ip_ConfigurePairedChannel(uint8 Instance, const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    f30c:	b500      	push	{lr}
    f30e:	b085      	sub	sp, #20
    f310:	4603      	mov	r3, r0
    f312:	9100      	str	r1, [sp, #0]
    f314:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    f318:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f31c:	4a37      	ldr	r2, [pc, #220]	; (f3fc <Ftm_Pwm_Ip_ConfigurePairedChannel+0xf0>)
    f31e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f322:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = 0U;
    f324:	2300      	movs	r3, #0
    f326:	f88d 300b 	strb.w	r3, [sp, #11]
    uint8 ChPairId = 0U;
    f32a:	2300      	movs	r3, #0
    f32c:	f88d 300a 	strb.w	r3, [sp, #10]
    
    /* Configure the PWM channel */
    ChannelId = UserChCfg->ChannelId;
    f330:	9b00      	ldr	r3, [sp, #0]
    f332:	781b      	ldrb	r3, [r3, #0]
    f334:	f88d 300b 	strb.w	r3, [sp, #11]
    ChPairId =  (uint8)(ChannelId >> 1U);
    f338:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f33c:	085b      	lsrs	r3, r3, #1
    f33e:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Enable sync control for channels*/
    Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(FtmBase, ChPairId, TRUE);
    f342:	f89d 300a 	ldrb.w	r3, [sp, #10]
    f346:	2201      	movs	r2, #1
    f348:	4619      	mov	r1, r3
    f34a:	9803      	ldr	r0, [sp, #12]
    f34c:	f7fe fcf5 	bl	dd3a <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    /* Enables the fault control in pair of channels */
    Ftm_Pwm_Ip_SetDualChFaultCtr(FtmBase, ChPairId, TRUE);
    f350:	f89d 300a 	ldrb.w	r3, [sp, #10]
    f354:	2201      	movs	r2, #1
    f356:	4619      	mov	r1, r3
    f358:	9803      	ldr	r0, [sp, #12]
    f35a:	f7ff fa77 	bl	e84c <Ftm_Pwm_Ip_SetDualChFaultCtr>
#endif
    /* Configure Paired channel for combined/mCombined modes */
    if ((FTM_PWM_IP_MODE_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    f35e:	9b00      	ldr	r3, [sp, #0]
    f360:	685b      	ldr	r3, [r3, #4]
    f362:	2b22      	cmp	r3, #34	; 0x22
    f364:	d003      	beq.n	f36e <Ftm_Pwm_Ip_ConfigurePairedChannel+0x62>
        (FTM_PWM_IP_MODE_COMBINE_LOW == UserChCfg->ChannelMode))
    f366:	9b00      	ldr	r3, [sp, #0]
    f368:	685b      	ldr	r3, [r3, #4]
    if ((FTM_PWM_IP_MODE_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    f36a:	2b21      	cmp	r3, #33	; 0x21
    f36c:	d113      	bne.n	f396 <Ftm_Pwm_Ip_ConfigurePairedChannel+0x8a>
    {
        /* Configure ELSA/ELSB for an odd channel*/
        Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->ChannelMode);
    f36e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    f372:	005b      	lsls	r3, r3, #1
    f374:	b2db      	uxtb	r3, r3
    f376:	3301      	adds	r3, #1
    f378:	b2d9      	uxtb	r1, r3
    f37a:	9b00      	ldr	r3, [sp, #0]
    f37c:	685b      	ldr	r3, [r3, #4]
    f37e:	461a      	mov	r2, r3
    f380:	9803      	ldr	r0, [sp, #12]
    f382:	f7fe fa25 	bl	d7d0 <Ftm_Pwm_Ip_SetChnEdgeLevel>
        /* Enable State of channel pair output combine mode */
        Ftm_Pwm_Ip_SetDualChnCombineCmd(FtmBase, ChPairId, TRUE);
    f386:	f89d 300a 	ldrb.w	r3, [sp, #10]
    f38a:	2201      	movs	r2, #1
    f38c:	4619      	mov	r1, r3
    f38e:	9803      	ldr	r0, [sp, #12]
    f390:	f7fe fc48 	bl	dc24 <Ftm_Pwm_Ip_SetDualChnCombineCmd>
    f394:	e021      	b.n	f3da <Ftm_Pwm_Ip_ConfigurePairedChannel+0xce>
    }
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
    else if ((FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    f396:	9b00      	ldr	r3, [sp, #0]
    f398:	685b      	ldr	r3, [r3, #4]
    f39a:	2b62      	cmp	r3, #98	; 0x62
    f39c:	d003      	beq.n	f3a6 <Ftm_Pwm_Ip_ConfigurePairedChannel+0x9a>
             (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW == UserChCfg->ChannelMode))
    f39e:	9b00      	ldr	r3, [sp, #0]
    f3a0:	685b      	ldr	r3, [r3, #4]
    else if ((FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    f3a2:	2b61      	cmp	r3, #97	; 0x61
    f3a4:	d119      	bne.n	f3da <Ftm_Pwm_Ip_ConfigurePairedChannel+0xce>
    {
        /* Configure ELSA/ELSB for an odd channel*/
        Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->ChannelMode);
    f3a6:	f89d 300a 	ldrb.w	r3, [sp, #10]
    f3aa:	005b      	lsls	r3, r3, #1
    f3ac:	b2db      	uxtb	r3, r3
    f3ae:	3301      	adds	r3, #1
    f3b0:	b2d9      	uxtb	r1, r3
    f3b2:	9b00      	ldr	r3, [sp, #0]
    f3b4:	685b      	ldr	r3, [r3, #4]
    f3b6:	461a      	mov	r2, r3
    f3b8:	9803      	ldr	r0, [sp, #12]
    f3ba:	f7fe fa09 	bl	d7d0 <Ftm_Pwm_Ip_SetChnEdgeLevel>
        /* Enable State of channel pair output combine mode */
        Ftm_Pwm_Ip_SetDualChnCombineCmd(FtmBase, ChPairId, TRUE);
    f3be:	f89d 300a 	ldrb.w	r3, [sp, #10]
    f3c2:	2201      	movs	r2, #1
    f3c4:	4619      	mov	r1, r3
    f3c6:	9803      	ldr	r0, [sp, #12]
    f3c8:	f7fe fc2c 	bl	dc24 <Ftm_Pwm_Ip_SetDualChnCombineCmd>
        /* Enables the FTM peripheral timer channel modified combine mode.*/
        Ftm_Pwm_Ip_SetDualChnMCombineCmd(FtmBase, ChPairId, TRUE);
    f3cc:	f89d 300a 	ldrb.w	r3, [sp, #10]
    f3d0:	2201      	movs	r2, #1
    f3d2:	4619      	mov	r1, r3
    f3d4:	9803      	ldr	r0, [sp, #12]
    f3d6:	f7fe fcd7 	bl	dd88 <Ftm_Pwm_Ip_SetDualChnMCombineCmd>
    {
        /* Do Nothing */
    }

    /* Configure paired channel and pair */
    if (NULL_PTR != UserChCfg->PairCfg)
    f3da:	9b00      	ldr	r3, [sp, #0]
    f3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f3de:	2b00      	cmp	r3, #0
    f3e0:	d007      	beq.n	f3f2 <Ftm_Pwm_Ip_ConfigurePairedChannel+0xe6>
    {
        Ftm_Pwm_Ip_InitPair(Instance, UserChCfg->PairCfg);
    f3e2:	9b00      	ldr	r3, [sp, #0]
    f3e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f3e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f3ea:	4611      	mov	r1, r2
    f3ec:	4618      	mov	r0, r3
    f3ee:	f7ff fbdf 	bl	ebb0 <Ftm_Pwm_Ip_InitPair>
        {
            Ftm_Pwm_Ip_SetChnMatchFracVal(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->DutyCycleDither);
        }
#endif
    }
}
    f3f2:	bf00      	nop
    f3f4:	b005      	add	sp, #20
    f3f6:	f85d fb04 	ldr.w	pc, [sp], #4
    f3fa:	bf00      	nop
    f3fc:	00019800 	.word	0x00019800

0000f400 <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl>:

static void Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl(uint8 Instance, const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    f400:	b500      	push	{lr}
    f402:	b085      	sub	sp, #20
    f404:	4603      	mov	r3, r0
    f406:	9100      	str	r1, [sp, #0]
    f408:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    f40c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f410:	4a15      	ldr	r2, [pc, #84]	; (f468 <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl+0x68>)
    f412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f416:	9303      	str	r3, [sp, #12]

    /* Configure External Trigger */
    Ftm_Pwm_Ip_SetChnTriggerCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->ExtTrigEn);
    f418:	9b00      	ldr	r3, [sp, #0]
    f41a:	7819      	ldrb	r1, [r3, #0]
    f41c:	9b00      	ldr	r3, [sp, #0]
    f41e:	7ddb      	ldrb	r3, [r3, #23]
    f420:	461a      	mov	r2, r3
    f422:	9803      	ldr	r0, [sp, #12]
    f424:	f7ff f99f 	bl	e766 <Ftm_Pwm_Ip_SetChnTriggerCmd>

#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
    /* Configure Ch Match Reload point */
    Ftm_Pwm_Ip_SetPwmLoadChnSelCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->ChMatchLoadEn);
    f428:	9b00      	ldr	r3, [sp, #0]
    f42a:	7819      	ldrb	r1, [r3, #0]
    f42c:	9b00      	ldr	r3, [sp, #0]
    f42e:	7e1b      	ldrb	r3, [r3, #24]
    f430:	461a      	mov	r2, r3
    f432:	9803      	ldr	r0, [sp, #12]
    f434:	f7fe ff86 	bl	e344 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd>
#endif

    /* Configure  Software Output Control Enable */
    Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->SwControlEn);
    f438:	9b00      	ldr	r3, [sp, #0]
    f43a:	7819      	ldrb	r1, [r3, #0]
    f43c:	9b00      	ldr	r3, [sp, #0]
    f43e:	7d5b      	ldrb	r3, [r3, #21]
    f440:	461a      	mov	r2, r3
    f442:	9803      	ldr	r0, [sp, #12]
    f444:	f7fe ff48 	bl	e2d8 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd>

    /* Configure Channel Software Output Control Value */
    Ftm_Pwm_Ip_SetChnSoftwareCtrlVal(FtmBase, UserChCfg->ChannelId, UserChCfg->SwControlVal);
    f448:	9b00      	ldr	r3, [sp, #0]
    f44a:	7819      	ldrb	r1, [r3, #0]
    f44c:	9b00      	ldr	r3, [sp, #0]
    f44e:	7d9b      	ldrb	r3, [r3, #22]
    f450:	461a      	mov	r2, r3
    f452:	9803      	ldr	r0, [sp, #12]
    f454:	f7fe ff00 	bl	e258 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal>

    /* Sync Write buffered registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    f458:	2101      	movs	r1, #1
    f45a:	9803      	ldr	r0, [sp, #12]
    f45c:	f7fe fb69 	bl	db32 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    f460:	bf00      	nop
    f462:	b005      	add	sp, #20
    f464:	f85d fb04 	ldr.w	pc, [sp], #4
    f468:	00019800 	.word	0x00019800

0000f46c <Ftm_Pwm_Ip_InitChannel>:
 * Description   : Configures the PWM signal for the ftm channel.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitChannel(uint8 Instance,
                                   const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    f46c:	b500      	push	{lr}
    f46e:	b085      	sub	sp, #20
    f470:	4603      	mov	r3, r0
    f472:	9100      	str	r1, [sp, #0]
    f474:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    f478:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f47c:	4a7b      	ldr	r2, [pc, #492]	; (f66c <Ftm_Pwm_Ip_InitChannel+0x200>)
    f47e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f482:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = 0U;
    f484:	2300      	movs	r3, #0
    f486:	f88d 300b 	strb.w	r3, [sp, #11]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    f48a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f48e:	2b03      	cmp	r3, #3
    f490:	bf94      	ite	ls
    f492:	2301      	movls	r3, #1
    f494:	2300      	movhi	r3, #0
    f496:	b2db      	uxtb	r3, r3
    f498:	4618      	mov	r0, r3
    f49a:	f7f1 fa23 	bl	8e4 <DevAssert>
    DevAssert(NULL_PTR != UserChCfg);
    f49e:	9b00      	ldr	r3, [sp, #0]
    f4a0:	2b00      	cmp	r3, #0
    f4a2:	bf14      	ite	ne
    f4a4:	2301      	movne	r3, #1
    f4a6:	2300      	moveq	r3, #0
    f4a8:	b2db      	uxtb	r3, r3
    f4aa:	4618      	mov	r0, r3
    f4ac:	f7f1 fa1a 	bl	8e4 <DevAssert>
#endif

    /* Configure the PWM channel */
    ChannelId = UserChCfg->ChannelId;
    f4b0:	9b00      	ldr	r3, [sp, #0]
    f4b2:	781b      	ldrb	r3, [r3, #0]
    f4b4:	f88d 300b 	strb.w	r3, [sp, #11]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)

    /* Center Aligned PWM is available only in FTM CPWM counter mode */
    if ((FTM_PWM_IP_MODE_CENTER_ALIGNED_HIGH == UserChCfg->ChannelMode) ||
    f4b8:	9b00      	ldr	r3, [sp, #0]
    f4ba:	685b      	ldr	r3, [r3, #4]
    f4bc:	2b12      	cmp	r3, #18
    f4be:	d003      	beq.n	f4c8 <Ftm_Pwm_Ip_InitChannel+0x5c>
        (FTM_PWM_IP_MODE_CENTER_ALIGNED_LOW == UserChCfg->ChannelMode))
    f4c0:	9b00      	ldr	r3, [sp, #0]
    f4c2:	685b      	ldr	r3, [r3, #4]
    if ((FTM_PWM_IP_MODE_CENTER_ALIGNED_HIGH == UserChCfg->ChannelMode) ||
    f4c4:	2b11      	cmp	r3, #17
    f4c6:	d10b      	bne.n	f4e0 <Ftm_Pwm_Ip_InitChannel+0x74>
    {
        DevAssert(FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase));
    f4c8:	9803      	ldr	r0, [sp, #12]
    f4ca:	f7fe f8f3 	bl	d6b4 <Ftm_Pwm_Ip_GetCpwms>
    f4ce:	4603      	mov	r3, r0
    f4d0:	2b01      	cmp	r3, #1
    f4d2:	bf0c      	ite	eq
    f4d4:	2301      	moveq	r3, #1
    f4d6:	2300      	movne	r3, #0
    f4d8:	b2db      	uxtb	r3, r3
    f4da:	4618      	mov	r0, r3
    f4dc:	f7f1 fa02 	bl	8e4 <DevAssert>
    }
    /* Only the main channel of a pair can have the PairCfg pointer set */
    if (NULL_PTR != UserChCfg->PairCfg)
    f4e0:	9b00      	ldr	r3, [sp, #0]
    f4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f4e4:	2b00      	cmp	r3, #0
    f4e6:	d015      	beq.n	f514 <Ftm_Pwm_Ip_InitChannel+0xa8>
    {
        if (0x01U == (ChannelId % 2U))
    f4e8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f4ec:	f003 0301 	and.w	r3, r3, #1
    f4f0:	b2db      	uxtb	r3, r3
    f4f2:	2b00      	cmp	r3, #0
    f4f4:	d003      	beq.n	f4fe <Ftm_Pwm_Ip_InitChannel+0x92>
        {
            DevAssert(FALSE);
    f4f6:	2000      	movs	r0, #0
    f4f8:	f7f1 f9f4 	bl	8e4 <DevAssert>
    f4fc:	e00a      	b.n	f514 <Ftm_Pwm_Ip_InitChannel+0xa8>
        }/* Check if pair configuration */
        else if ((UserChCfg->PairCfg->PairId * 2U) != ChannelId)
    f4fe:	9b00      	ldr	r3, [sp, #0]
    f500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f502:	781b      	ldrb	r3, [r3, #0]
    f504:	005a      	lsls	r2, r3, #1
    f506:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f50a:	429a      	cmp	r2, r3
    f50c:	d002      	beq.n	f514 <Ftm_Pwm_Ip_InitChannel+0xa8>
        {
            DevAssert(FALSE);
    f50e:	2000      	movs	r0, #0
    f510:	f7f1 f9e8 	bl	8e4 <DevAssert>
        {
            /* MISRA Rule 15.7 All if...else if constructs shall be terminated with an else statement */
        }
    }

    if ((FTM_PWM_IP_MODE_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    f514:	9b00      	ldr	r3, [sp, #0]
    f516:	685b      	ldr	r3, [r3, #4]
    f518:	2b22      	cmp	r3, #34	; 0x22
    f51a:	d00b      	beq.n	f534 <Ftm_Pwm_Ip_InitChannel+0xc8>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    f51c:	9b00      	ldr	r3, [sp, #0]
    f51e:	685b      	ldr	r3, [r3, #4]
    if ((FTM_PWM_IP_MODE_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    f520:	2b62      	cmp	r3, #98	; 0x62
    f522:	d007      	beq.n	f534 <Ftm_Pwm_Ip_InitChannel+0xc8>
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW == UserChCfg->ChannelMode) ||
    f524:	9b00      	ldr	r3, [sp, #0]
    f526:	685b      	ldr	r3, [r3, #4]
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    f528:	2b61      	cmp	r3, #97	; 0x61
    f52a:	d003      	beq.n	f534 <Ftm_Pwm_Ip_InitChannel+0xc8>
#endif
        (FTM_PWM_IP_MODE_COMBINE_LOW == UserChCfg->ChannelMode))
    f52c:	9b00      	ldr	r3, [sp, #0]
    f52e:	685b      	ldr	r3, [r3, #4]
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW == UserChCfg->ChannelMode) ||
    f530:	2b21      	cmp	r3, #33	; 0x21
    f532:	d114      	bne.n	f55e <Ftm_Pwm_Ip_InitChannel+0xf2>

    {
        DevAssert(NULL_PTR != UserChCfg->PairCfg);
    f534:	9b00      	ldr	r3, [sp, #0]
    f536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f538:	2b00      	cmp	r3, #0
    f53a:	bf14      	ite	ne
    f53c:	2301      	movne	r3, #1
    f53e:	2300      	moveq	r3, #0
    f540:	b2db      	uxtb	r3, r3
    f542:	4618      	mov	r0, r3
    f544:	f7f1 f9ce 	bl	8e4 <DevAssert>
        Ftm_Pwm_Ip_aChannelState[Instance][ChannelId + 1U] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    f548:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f54c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f550:	3301      	adds	r3, #1
    f552:	4947      	ldr	r1, [pc, #284]	; (f670 <Ftm_Pwm_Ip_InitChannel+0x204>)
    f554:	00d2      	lsls	r2, r2, #3
    f556:	4413      	add	r3, r2
    f558:	2201      	movs	r2, #1
    f55a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
    Ftm_Pwm_Ip_aNotifIrq[Instance][ChannelId] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
#endif

    Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId] = UserChCfg->DutyCycle;
    f55e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f562:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f566:	9900      	ldr	r1, [sp, #0]
    f568:	8b48      	ldrh	r0, [r1, #26]
    f56a:	4942      	ldr	r1, [pc, #264]	; (f674 <Ftm_Pwm_Ip_InitChannel+0x208>)
    f56c:	00d2      	lsls	r2, r2, #3
    f56e:	4413      	add	r3, r2
    f570:	4602      	mov	r2, r0
    f572:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    Ftm_Pwm_Ip_aIdleState[Instance][ChannelId] = UserChCfg->InitOut;
    f576:	f89d 1007 	ldrb.w	r1, [sp, #7]
    f57a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f57e:	9a00      	ldr	r2, [sp, #0]
    f580:	69d2      	ldr	r2, [r2, #28]
    f582:	483d      	ldr	r0, [pc, #244]	; (f678 <Ftm_Pwm_Ip_InitChannel+0x20c>)
    f584:	00c9      	lsls	r1, r1, #3
    f586:	440b      	add	r3, r1
    f588:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

    /* Configure POL bits */
    Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, ChannelId, UserChCfg->Polarity);
    f58c:	9b00      	ldr	r3, [sp, #0]
    f58e:	6a1a      	ldr	r2, [r3, #32]
    f590:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f594:	4619      	mov	r1, r3
    f596:	9803      	ldr	r0, [sp, #12]
    f598:	f7fe fc94 	bl	dec4 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    /* Configure initial output state */
    Ftm_Pwm_Ip_SetChnOutputInitStateCmd(FtmBase, ChannelId, UserChCfg->InitOut);
    f59c:	9b00      	ldr	r3, [sp, #0]
    f59e:	69da      	ldr	r2, [r3, #28]
    f5a0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f5a4:	4619      	mov	r1, r3
    f5a6:	9803      	ldr	r0, [sp, #12]
    f5a8:	f7fe fad9 	bl	db5e <Ftm_Pwm_Ip_SetChnOutputInitStateCmd>

    /* Configure Channel Mode */
    /* Configure ELSA/ELSB */
    Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, ChannelId, UserChCfg->ChannelMode);
    f5ac:	9b00      	ldr	r3, [sp, #0]
    f5ae:	685a      	ldr	r2, [r3, #4]
    f5b0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f5b4:	4619      	mov	r1, r3
    f5b6:	9803      	ldr	r0, [sp, #12]
    f5b8:	f7fe f90a 	bl	d7d0 <Ftm_Pwm_Ip_SetChnEdgeLevel>
    /* Set MSB and MSA bits*/
    Ftm_Pwm_Ip_SetChnMSBAMode(FtmBase, ChannelId, UserChCfg->ChannelMode);
    f5bc:	9b00      	ldr	r3, [sp, #0]
    f5be:	685a      	ldr	r2, [r3, #4]
    f5c0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f5c4:	4619      	mov	r1, r3
    f5c6:	9803      	ldr	r0, [sp, #12]
    f5c8:	f7fe f939 	bl	d83e <Ftm_Pwm_Ip_SetChnMSBAMode>

    Ftm_Pwm_Ip_ConfigurePairedChannel(Instance, UserChCfg);
    f5cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f5d0:	9900      	ldr	r1, [sp, #0]
    f5d2:	4618      	mov	r0, r3
    f5d4:	f7ff fe9a 	bl	f30c <Ftm_Pwm_Ip_ConfigurePairedChannel>

    Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(Instance,
    f5d8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f5dc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f5e0:	4924      	ldr	r1, [pc, #144]	; (f674 <Ftm_Pwm_Ip_InitChannel+0x208>)
    f5e2:	00d2      	lsls	r2, r2, #3
    f5e4:	4413      	add	r3, r2
    f5e6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    f5ea:	f89d 100b 	ldrb.w	r1, [sp, #11]
    f5ee:	f89d 0007 	ldrb.w	r0, [sp, #7]
    f5f2:	2301      	movs	r3, #1
    f5f4:	f000 f9f2 	bl	f9dc <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                         ChannelId,
                                         Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId],
                                         TRUE);

    Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl(Instance, UserChCfg);
    f5f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f5fc:	9900      	ldr	r1, [sp, #0]
    f5fe:	4618      	mov	r0, r3
    f600:	f7ff fefe 	bl	f400 <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl>
    }
#endif

#if (defined(FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE) && (FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE == STD_ON))
    /* Enable PWM output */
    if(TRUE == UserChCfg->ChOutputEn)
    f604:	9b00      	ldr	r3, [sp, #0]
    f606:	7d1b      	ldrb	r3, [r3, #20]
    f608:	2b00      	cmp	r3, #0
    f60a:	d005      	beq.n	f618 <Ftm_Pwm_Ip_InitChannel+0x1ac>
    {
        Ftm_Pwm_Ip_EnablePwmChannelOutputs(FtmBase, ChannelId);
    f60c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f610:	4619      	mov	r1, r3
    f612:	9803      	ldr	r0, [sp, #12]
    f614:	f7fe f87e 	bl	d714 <Ftm_Pwm_Ip_EnablePwmChannelOutputs>
    }
#endif
    Ftm_Pwm_Ip_aChannelState[Instance][ChannelId] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    f618:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f61c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f620:	4913      	ldr	r1, [pc, #76]	; (f670 <Ftm_Pwm_Ip_InitChannel+0x204>)
    f622:	00d2      	lsls	r2, r2, #3
    f624:	4413      	add	r3, r2
    f626:	2201      	movs	r2, #1
    f628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if(TRUE == UserChCfg->ChIrqEn)
    f62c:	9b00      	ldr	r3, [sp, #0]
    f62e:	7a1b      	ldrb	r3, [r3, #8]
    f630:	2b00      	cmp	r3, #0
    f632:	d016      	beq.n	f662 <Ftm_Pwm_Ip_InitChannel+0x1f6>
    {
        Ftm_Pwm_Ip_aChIrqCallbacks[Instance][ChannelId].FunctionCallback = UserChCfg->ChannelCb.FunctionCallback;
    f634:	f89d 1007 	ldrb.w	r1, [sp, #7]
    f638:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f63c:	9a00      	ldr	r2, [sp, #0]
    f63e:	68d2      	ldr	r2, [r2, #12]
    f640:	480e      	ldr	r0, [pc, #56]	; (f67c <Ftm_Pwm_Ip_InitChannel+0x210>)
    f642:	00c9      	lsls	r1, r1, #3
    f644:	440b      	add	r3, r1
    f646:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
        Ftm_Pwm_Ip_aChIrqCallbacks[Instance][ChannelId].CbParam          = UserChCfg->ChannelCb.CbParam;
    f64a:	f89d 1007 	ldrb.w	r1, [sp, #7]
    f64e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f652:	9a00      	ldr	r2, [sp, #0]
    f654:	6912      	ldr	r2, [r2, #16]
    f656:	4809      	ldr	r0, [pc, #36]	; (f67c <Ftm_Pwm_Ip_InitChannel+0x210>)
    f658:	00c9      	lsls	r1, r1, #3
    f65a:	440b      	add	r3, r1
    f65c:	00db      	lsls	r3, r3, #3
    f65e:	4403      	add	r3, r0
    f660:	605a      	str	r2, [r3, #4]
    }

}
    f662:	bf00      	nop
    f664:	b005      	add	sp, #20
    f666:	f85d fb04 	ldr.w	pc, [sp], #4
    f66a:	bf00      	nop
    f66c:	00019800 	.word	0x00019800
    f670:	1fff9004 	.word	0x1fff9004
    f674:	1fff8e34 	.word	0x1fff8e34
    f678:	1fff90a4 	.word	0x1fff90a4
    f67c:	1fff8ed4 	.word	0x1fff8ed4

0000f680 <Ftm_Pwm_Ip_DeInitInstance>:
 * Function Name : Ftm_Pwm_Ip_DeinitInstance
 * Description   : Stops all PWM channels.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DeInitInstance(uint8 Instance)
{
    f680:	b500      	push	{lr}
    f682:	b085      	sub	sp, #20
    f684:	4603      	mov	r3, r0
    f686:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    f68a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f68e:	4a1c      	ldr	r2, [pc, #112]	; (f700 <Ftm_Pwm_Ip_DeInitInstance+0x80>)
    f690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f694:	9303      	str	r3, [sp, #12]

#if (FTM_PWM_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    f696:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f69a:	2b03      	cmp	r3, #3
    f69c:	bf94      	ite	ls
    f69e:	2301      	movls	r3, #1
    f6a0:	2300      	movhi	r3, #0
    f6a2:	b2db      	uxtb	r3, r3
    f6a4:	4618      	mov	r0, r3
    f6a6:	f7f1 f91d 	bl	8e4 <DevAssert>
#endif

    /* Stop the FTM counter */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
    f6aa:	2100      	movs	r1, #0
    f6ac:	9803      	ldr	r0, [sp, #12]
    f6ae:	f7fd ffda 	bl	d666 <Ftm_Pwm_Ip_SetClockSource>

    /* Clear the dead-time pre-scaler and value */
    Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, 0U);
    f6b2:	2100      	movs	r1, #0
    f6b4:	9803      	ldr	r0, [sp, #12]
    f6b6:	f7fe fbbf 	bl	de38 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    Ftm_Pwm_Ip_SetDeadtimePrescaler(FtmBase, FTM_PWM_IP_DEADTIME_DIV_1);
    f6ba:	2101      	movs	r1, #1
    f6bc:	9803      	ldr	r0, [sp, #12]
    f6be:	f7fe fb9d 	bl	ddfc <Ftm_Pwm_Ip_SetDeadtimePrescaler>
    Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, 0U);
    f6c2:	2100      	movs	r1, #0
    f6c4:	9803      	ldr	r0, [sp, #12]
    f6c6:	f7fe fb86 	bl	ddd6 <Ftm_Pwm_Ip_SetDeadtimeCount>

    /* Configure debug mode */
    Ftm_Pwm_Ip_SetBdmMode(FtmBase, FTM_PWM_IP_BDM_MODE_00);
    f6ca:	2100      	movs	r1, #0
    f6cc:	9803      	ldr	r0, [sp, #12]
    f6ce:	f7fe fc45 	bl	df5c <Ftm_Pwm_Ip_SetBdmMode>
    /* Disable overflow interrupt */
    Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, FALSE);
    f6d2:	2100      	movs	r1, #0
    f6d4:	9803      	ldr	r0, [sp, #12]
    f6d6:	f7fd fffb 	bl	d6d0 <Ftm_Pwm_Ip_SetTimerOverflowInt>
    /* Clear the module value of the registers */
    Ftm_Pwm_Ip_SetMod(FtmBase, 0U);
    f6da:	2100      	movs	r1, #0
    f6dc:	9803      	ldr	r0, [sp, #12]
    f6de:	f7fe f83c 	bl	d75a <Ftm_Pwm_Ip_SetMod>
    Ftm_Pwm_Ip_SetCounter(FtmBase, 0U);
    f6e2:	2100      	movs	r1, #0
    f6e4:	9803      	ldr	r0, [sp, #12]
    f6e6:	f7fe f827 	bl	d738 <Ftm_Pwm_Ip_SetCounter>
    /* Confirm the instance is inactive */
    Ftm_Pwm_Ip_aInstanceState[Instance] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_UNINIT;
    f6ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f6ee:	4a05      	ldr	r2, [pc, #20]	; (f704 <Ftm_Pwm_Ip_DeInitInstance+0x84>)
    f6f0:	2100      	movs	r1, #0
    f6f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    /* Clear the UAA bit in REG_PROT */
    OsIf_Trusted_Call1param(Ftm_Pwm_Ip_ClrUserAccessAllowed, Instance);
#endif
#endif

}
    f6f6:	bf00      	nop
    f6f8:	b005      	add	sp, #20
    f6fa:	f85d fb04 	ldr.w	pc, [sp], #4
    f6fe:	bf00      	nop
    f700:	00019800 	.word	0x00019800
    f704:	1fff8ff4 	.word	0x1fff8ff4

0000f708 <Ftm_Pwm_Ip_DeInitChannel>:
 * Description   : Stops all PWM channels.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DeInitChannel(uint8 Instance,
                                     uint8 Channel)
{
    f708:	b500      	push	{lr}
    f70a:	b085      	sub	sp, #20
    f70c:	4603      	mov	r3, r0
    f70e:	460a      	mov	r2, r1
    f710:	f88d 3007 	strb.w	r3, [sp, #7]
    f714:	4613      	mov	r3, r2
    f716:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    f71a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f71e:	4a2e      	ldr	r2, [pc, #184]	; (f7d8 <Ftm_Pwm_Ip_DeInitChannel+0xd0>)
    f720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f724:	9303      	str	r3, [sp, #12]
    uint8 PairId = (uint8)(Channel >> 1U);
    f726:	f89d 3006 	ldrb.w	r3, [sp, #6]
    f72a:	085b      	lsrs	r3, r3, #1
    f72c:	f88d 300b 	strb.w	r3, [sp, #11]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    f730:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f734:	2b03      	cmp	r3, #3
    f736:	bf94      	ite	ls
    f738:	2301      	movls	r3, #1
    f73a:	2300      	movhi	r3, #0
    f73c:	b2db      	uxtb	r3, r3
    f73e:	4618      	mov	r0, r3
    f740:	f7f1 f8d0 	bl	8e4 <DevAssert>
#endif

    /* Disable interrupts for given channel */
    Ftm_Pwm_Ip_DisableCmpIrq(Instance, Channel);
    f744:	f89d 2006 	ldrb.w	r2, [sp, #6]
    f748:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f74c:	4611      	mov	r1, r2
    f74e:	4618      	mov	r0, r3
    f750:	f7ff fae2 	bl	ed18 <Ftm_Pwm_Ip_DisableCmpIrq>
    /* Set current channel channels to IDLE */
    Ftm_Pwm_Ip_SwOutputControl(Instance,
    f754:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f758:	f89d 3006 	ldrb.w	r3, [sp, #6]
    f75c:	491f      	ldr	r1, [pc, #124]	; (f7dc <Ftm_Pwm_Ip_DeInitChannel+0xd4>)
    f75e:	00d2      	lsls	r2, r2, #3
    f760:	4413      	add	r3, r2
    f762:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    f766:	f89d 1006 	ldrb.w	r1, [sp, #6]
    f76a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    f76e:	2301      	movs	r3, #1
    f770:	f000 fa92 	bl	fc98 <Ftm_Pwm_Ip_SwOutputControl>
                               Channel,
                               Ftm_Pwm_Ip_aIdleState[Instance][Channel],
                               TRUE);
    /* Clear SWSYNC bit - has to be cleared to generate SW trigger */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, FALSE);
    f774:	2100      	movs	r1, #0
    f776:	9803      	ldr	r0, [sp, #12]
    f778:	f7fe f9db 	bl	db32 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    /* OUTMASK register is updated with the value of its buffer only by the PWM synchronization */
    Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(FtmBase, TRUE);
    f77c:	2101      	movs	r1, #1
    f77e:	9803      	ldr	r0, [sp, #12]
    f780:	f7fe f99c 	bl	dabc <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>
    /* The software trigger activates the OUTMASK register synchronization */
    Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, TRUE);
    f784:	2101      	movs	r1, #1
    f786:	9803      	ldr	r0, [sp, #12]
    f788:	f7fe fcb7 	bl	e0fa <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
    /* Channel output is not masked. It continues to operate normally */
    Ftm_Pwm_Ip_SetChnOutputMask(FtmBase, Channel, FALSE);
    f78c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    f790:	2200      	movs	r2, #0
    f792:	4619      	mov	r1, r3
    f794:	9803      	ldr	r0, [sp, #12]
    f796:	f7fe fa04 	bl	dba2 <Ftm_Pwm_Ip_SetChnOutputMask>
    /* set SWSYNC bit - has to be cleared to generate SW trigger */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    f79a:	2101      	movs	r1, #1
    f79c:	9803      	ldr	r0, [sp, #12]
    f79e:	f7fe f9c8 	bl	db32 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    /* Clear the type of notification for each channel (n) in paired channel*/
    Ftm_Pwm_Ip_aNotifIrq[Instance][(PairId * 2U)] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
    f7a2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f7a6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f7aa:	005b      	lsls	r3, r3, #1
    f7ac:	490c      	ldr	r1, [pc, #48]	; (f7e0 <Ftm_Pwm_Ip_DeInitChannel+0xd8>)
    f7ae:	00d2      	lsls	r2, r2, #3
    f7b0:	440a      	add	r2, r1
    f7b2:	4413      	add	r3, r2
    f7b4:	2200      	movs	r2, #0
    f7b6:	701a      	strb	r2, [r3, #0]
    /* Clear the type of notification for each channel (n+1) in paired channel*/
    Ftm_Pwm_Ip_aNotifIrq[Instance][((PairId * 2U) + 1U)] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
    f7b8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f7bc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f7c0:	005b      	lsls	r3, r3, #1
    f7c2:	3301      	adds	r3, #1
    f7c4:	4906      	ldr	r1, [pc, #24]	; (f7e0 <Ftm_Pwm_Ip_DeInitChannel+0xd8>)
    f7c6:	00d2      	lsls	r2, r2, #3
    f7c8:	440a      	add	r2, r1
    f7ca:	4413      	add	r3, r2
    f7cc:	2200      	movs	r2, #0
    f7ce:	701a      	strb	r2, [r3, #0]

}
    f7d0:	bf00      	nop
    f7d2:	b005      	add	sp, #20
    f7d4:	f85d fb04 	ldr.w	pc, [sp], #4
    f7d8:	00019800 	.word	0x00019800
    f7dc:	1fff90a4 	.word	0x1fff90a4
    f7e0:	1fff9084 	.word	0x1fff9084

0000f7e4 <Ftm_Pwm_Ip_InitChFault>:
 * Description   : Configures the fault channels are available on the Pwm configuration.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitChFault(uint8 Instance,
                                   const Ftm_Pwm_Ip_FaultChCfgType * FaultChCfg)
{
    f7e4:	b500      	push	{lr}
    f7e6:	b085      	sub	sp, #20
    f7e8:	4603      	mov	r3, r0
    f7ea:	9100      	str	r1, [sp, #0]
    f7ec:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    f7f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f7f4:	4a15      	ldr	r2, [pc, #84]	; (f84c <Ftm_Pwm_Ip_InitChFault+0x68>)
    f7f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7fa:	9303      	str	r3, [sp, #12]
    /* Set the fault inputs polarity. */
    Ftm_Pwm_Ip_SetFaultPolarity(FtmBase, FaultChCfg->FaultId, FaultChCfg->FaultPol);
    f7fc:	9b00      	ldr	r3, [sp, #0]
    f7fe:	7819      	ldrb	r1, [r3, #0]
    f800:	9b00      	ldr	r3, [sp, #0]
    f802:	685b      	ldr	r3, [r3, #4]
    f804:	461a      	mov	r2, r3
    f806:	9803      	ldr	r0, [sp, #12]
    f808:	f7ff f890 	bl	e92c <Ftm_Pwm_Ip_SetFaultPolarity>
    /* Enables/Disables the filter for the fault input. */
    Ftm_Pwm_Ip_SetFaultFilterEn(FtmBase, FaultChCfg->FaultId, FaultChCfg->FaultFilEn);
    f80c:	9b00      	ldr	r3, [sp, #0]
    f80e:	7819      	ldrb	r1, [r3, #0]
    f810:	9b00      	ldr	r3, [sp, #0]
    f812:	7a1b      	ldrb	r3, [r3, #8]
    f814:	461a      	mov	r2, r3
    f816:	9803      	ldr	r0, [sp, #12]
    f818:	f7ff f8cf 	bl	e9ba <Ftm_Pwm_Ip_SetFaultFilterEn>
    /* Enables/Disables the fault inputs. */
    Ftm_Pwm_Ip_SetFaultInputEn(FtmBase, FaultChCfg->FaultId, TRUE);
    f81c:	9b00      	ldr	r3, [sp, #0]
    f81e:	781b      	ldrb	r3, [r3, #0]
    f820:	2201      	movs	r2, #1
    f822:	4619      	mov	r1, r3
    f824:	9803      	ldr	r0, [sp, #12]
    f826:	f7ff f8a4 	bl	e972 <Ftm_Pwm_Ip_SetFaultInputEn>
    /* Fault Irq Callback*/
    Ftm_Pwm_Ip_pFaultIrqCallback[Instance][FaultChCfg->FaultId] = FaultChCfg->FaultCb;
    f82a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f82e:	9a00      	ldr	r2, [sp, #0]
    f830:	7812      	ldrb	r2, [r2, #0]
    f832:	4610      	mov	r0, r2
    f834:	9a00      	ldr	r2, [sp, #0]
    f836:	68d2      	ldr	r2, [r2, #12]
    f838:	4905      	ldr	r1, [pc, #20]	; (f850 <Ftm_Pwm_Ip_InitChFault+0x6c>)
    f83a:	009b      	lsls	r3, r3, #2
    f83c:	4403      	add	r3, r0
    f83e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f842:	bf00      	nop
    f844:	b005      	add	sp, #20
    f846:	f85d fb04 	ldr.w	pc, [sp], #4
    f84a:	bf00      	nop
    f84c:	00019800 	.word	0x00019800
    f850:	1fff8e94 	.word	0x1fff8e94

0000f854 <Ftm_Pwm_Ip_Init>:
 *
 * @implements Ftm_Pwm_Ip_Init_Activity
 */
void Ftm_Pwm_Ip_Init(uint8 Instance,
                     const Ftm_Pwm_Ip_UserCfgType * UserCfg)
{
    f854:	b500      	push	{lr}
    f856:	b085      	sub	sp, #20
    f858:	4603      	mov	r3, r0
    f85a:	9100      	str	r1, [sp, #0]
    f85c:	f88d 3007 	strb.w	r3, [sp, #7]

    uint8 Index = 0U;
    f860:	2300      	movs	r3, #0
    f862:	f88d 300f 	strb.w	r3, [sp, #15]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    f866:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f86a:	2b03      	cmp	r3, #3
    f86c:	bf94      	ite	ls
    f86e:	2301      	movls	r3, #1
    f870:	2300      	movhi	r3, #0
    f872:	b2db      	uxtb	r3, r3
    f874:	4618      	mov	r0, r3
    f876:	f7f1 f835 	bl	8e4 <DevAssert>
    DevAssert(NULL_PTR != UserCfg);
    f87a:	9b00      	ldr	r3, [sp, #0]
    f87c:	2b00      	cmp	r3, #0
    f87e:	bf14      	ite	ne
    f880:	2301      	movne	r3, #1
    f882:	2300      	moveq	r3, #0
    f884:	b2db      	uxtb	r3, r3
    f886:	4618      	mov	r0, r3
    f888:	f7f1 f82c 	bl	8e4 <DevAssert>
#endif

#ifdef ERR_IPV_FTM_ERR010856
#if ((STD_ON == ERR_IPV_FTM_ERR010856) && (STD_ON == FTM_PWM_IP_HAS_FAULT))
    /* Set a variable to indicate that a fault was not detected when initializing */
    Ftm_Pwm_Ip_u8FaultCheck = (uint8)0U;
    f88c:	4b29      	ldr	r3, [pc, #164]	; (f934 <Ftm_Pwm_Ip_Init+0xe0>)
    f88e:	2200      	movs	r2, #0
    f890:	701a      	strb	r2, [r3, #0]
#endif
#endif
    /* Configure FTM Instance in PWM mode */
    Ftm_Pwm_Ip_InitInstance(Instance, UserCfg->InstanceCfg);
    f892:	9b00      	ldr	r3, [sp, #0]
    f894:	681a      	ldr	r2, [r3, #0]
    f896:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f89a:	4611      	mov	r1, r2
    f89c:	4618      	mov	r0, r3
    f89e:	f7ff fc39 	bl	f114 <Ftm_Pwm_Ip_InitInstance>

    /* Configure all channels in the user cfg */
    for (Index = 0; Index < UserCfg->NoOfConfiguredCh; Index++)
    f8a2:	2300      	movs	r3, #0
    f8a4:	f88d 300f 	strb.w	r3, [sp, #15]
    f8a8:	e011      	b.n	f8ce <Ftm_Pwm_Ip_Init+0x7a>
    {
        /* Configure PWM channels */
        Ftm_Pwm_Ip_InitChannel(Instance, UserCfg->ConfiguredChArray[Index]);
    f8aa:	9b00      	ldr	r3, [sp, #0]
    f8ac:	685a      	ldr	r2, [r3, #4]
    f8ae:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f8b2:	009b      	lsls	r3, r3, #2
    f8b4:	4413      	add	r3, r2
    f8b6:	681a      	ldr	r2, [r3, #0]
    f8b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f8bc:	4611      	mov	r1, r2
    f8be:	4618      	mov	r0, r3
    f8c0:	f7ff fdd4 	bl	f46c <Ftm_Pwm_Ip_InitChannel>
    for (Index = 0; Index < UserCfg->NoOfConfiguredCh; Index++)
    f8c4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f8c8:	3301      	adds	r3, #1
    f8ca:	f88d 300f 	strb.w	r3, [sp, #15]
    f8ce:	9b00      	ldr	r3, [sp, #0]
    f8d0:	7a1b      	ldrb	r3, [r3, #8]
    f8d2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    f8d6:	429a      	cmp	r2, r3
    f8d8:	d3e7      	bcc.n	f8aa <Ftm_Pwm_Ip_Init+0x56>
    }

#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    if (UserCfg->NoOfFaultCfg > 0U)
    f8da:	9b00      	ldr	r3, [sp, #0]
    f8dc:	7c1b      	ldrb	r3, [r3, #16]
    f8de:	2b00      	cmp	r3, #0
    f8e0:	d01b      	beq.n	f91a <Ftm_Pwm_Ip_Init+0xc6>
    {
        for (Index = 0; Index < UserCfg->NoOfFaultCfg; Index++)
    f8e2:	2300      	movs	r3, #0
    f8e4:	f88d 300f 	strb.w	r3, [sp, #15]
    f8e8:	e011      	b.n	f90e <Ftm_Pwm_Ip_Init+0xba>
        {
            /* Configure fault channels */
            Ftm_Pwm_Ip_InitChFault(Instance, UserCfg->ConfiguredFaultArray[Index]);
    f8ea:	9b00      	ldr	r3, [sp, #0]
    f8ec:	68da      	ldr	r2, [r3, #12]
    f8ee:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f8f2:	009b      	lsls	r3, r3, #2
    f8f4:	4413      	add	r3, r2
    f8f6:	681a      	ldr	r2, [r3, #0]
    f8f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f8fc:	4611      	mov	r1, r2
    f8fe:	4618      	mov	r0, r3
    f900:	f7ff ff70 	bl	f7e4 <Ftm_Pwm_Ip_InitChFault>
        for (Index = 0; Index < UserCfg->NoOfFaultCfg; Index++)
    f904:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f908:	3301      	adds	r3, #1
    f90a:	f88d 300f 	strb.w	r3, [sp, #15]
    f90e:	9b00      	ldr	r3, [sp, #0]
    f910:	7c1b      	ldrb	r3, [r3, #16]
    f912:	f89d 200f 	ldrb.w	r2, [sp, #15]
    f916:	429a      	cmp	r2, r3
    f918:	d3e7      	bcc.n	f8ea <Ftm_Pwm_Ip_Init+0x96>
        }
    }
#endif

    Ftm_Pwm_Ip_InitInstanceStart(Instance, UserCfg->InstanceCfg);
    f91a:	9b00      	ldr	r3, [sp, #0]
    f91c:	681a      	ldr	r2, [r3, #0]
    f91e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f922:	4611      	mov	r1, r2
    f924:	4618      	mov	r0, r3
    f926:	f7ff fc9d 	bl	f264 <Ftm_Pwm_Ip_InitInstanceStart>
}
    f92a:	bf00      	nop
    f92c:	b005      	add	sp, #20
    f92e:	f85d fb04 	ldr.w	pc, [sp], #4
    f932:	bf00      	nop
    f934:	1fff8e28 	.word	0x1fff8e28

0000f938 <Ftm_Pwm_Ip_DeInit>:
 * Firstly, Ftm_Pwm_Ip_Init must be called. Then this function will disables the FTM module.
 *
 * @implements Ftm_Pwm_Ip_DeInit_Activity
 */
void Ftm_Pwm_Ip_DeInit(uint8 Instance)
{
    f938:	b500      	push	{lr}
    f93a:	b085      	sub	sp, #20
    f93c:	4603      	mov	r3, r0
    f93e:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    f942:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f946:	4a23      	ldr	r2, [pc, #140]	; (f9d4 <Ftm_Pwm_Ip_DeInit+0x9c>)
    f948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f94c:	9302      	str	r3, [sp, #8]
    uint8 ChannelId = 0U;
    f94e:	2300      	movs	r3, #0
    f950:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    f954:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f958:	2b03      	cmp	r3, #3
    f95a:	bf94      	ite	ls
    f95c:	2301      	movls	r3, #1
    f95e:	2300      	movhi	r3, #0
    f960:	b2db      	uxtb	r3, r3
    f962:	4618      	mov	r0, r3
    f964:	f7f0 ffbe 	bl	8e4 <DevAssert>
#endif
    /* Reset all FTM register */
    Ftm_Pwm_Ip_Reset(FtmBase);
    f968:	9802      	ldr	r0, [sp, #8]
    f96a:	f7fe fe87 	bl	e67c <Ftm_Pwm_Ip_Reset>
    
    /* Configure all channels in the user cfg */
    for (ChannelId = 0U; ChannelId < FTM_PWM_IP_CHANNEL_COUNT; ChannelId++)
    f96e:	2300      	movs	r3, #0
    f970:	f88d 300f 	strb.w	r3, [sp, #15]
    f974:	e021      	b.n	f9ba <Ftm_Pwm_Ip_DeInit+0x82>
    {
        if (FTM_PWM_IP_CHANNEL_UNINIT != Ftm_Pwm_Ip_aChannelState[Instance][ChannelId])
    f976:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f97a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f97e:	4916      	ldr	r1, [pc, #88]	; (f9d8 <Ftm_Pwm_Ip_DeInit+0xa0>)
    f980:	00d2      	lsls	r2, r2, #3
    f982:	4413      	add	r3, r2
    f984:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    f988:	2b00      	cmp	r3, #0
    f98a:	d011      	beq.n	f9b0 <Ftm_Pwm_Ip_DeInit+0x78>
        {
            /* De-Initialize FTM channels */
            Ftm_Pwm_Ip_DeInitChannel(Instance, ChannelId);
    f98c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    f990:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f994:	4611      	mov	r1, r2
    f996:	4618      	mov	r0, r3
    f998:	f7ff feb6 	bl	f708 <Ftm_Pwm_Ip_DeInitChannel>
            /* The channels is inactive */
            Ftm_Pwm_Ip_aChannelState[Instance][ChannelId] = FTM_PWM_IP_CHANNEL_UNINIT;
    f99c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f9a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f9a4:	490c      	ldr	r1, [pc, #48]	; (f9d8 <Ftm_Pwm_Ip_DeInit+0xa0>)
    f9a6:	00d2      	lsls	r2, r2, #3
    f9a8:	4413      	add	r3, r2
    f9aa:	2200      	movs	r2, #0
    f9ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (ChannelId = 0U; ChannelId < FTM_PWM_IP_CHANNEL_COUNT; ChannelId++)
    f9b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f9b4:	3301      	adds	r3, #1
    f9b6:	f88d 300f 	strb.w	r3, [sp, #15]
    f9ba:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f9be:	2b07      	cmp	r3, #7
    f9c0:	d9d9      	bls.n	f976 <Ftm_Pwm_Ip_DeInit+0x3e>
        }
    }
    /* De-Initialize FTM Instance */
    Ftm_Pwm_Ip_DeInitInstance(Instance);
    f9c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f9c6:	4618      	mov	r0, r3
    f9c8:	f7ff fe5a 	bl	f680 <Ftm_Pwm_Ip_DeInitInstance>
}
    f9cc:	bf00      	nop
    f9ce:	b005      	add	sp, #20
    f9d0:	f85d fb04 	ldr.w	pc, [sp], #4
    f9d4:	00019800 	.word	0x00019800
    f9d8:	1fff9004 	.word	0x1fff9004

0000f9dc <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>:
 *END**************************************************************************/
void Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(uint8 Instance,
                                          uint8 Channel,
                                          uint16 DutyCycle,
                                          boolean SoftwareTrigger)
{
    f9dc:	b510      	push	{r4, lr}
    f9de:	b088      	sub	sp, #32
    f9e0:	4604      	mov	r4, r0
    f9e2:	4608      	mov	r0, r1
    f9e4:	4611      	mov	r1, r2
    f9e6:	461a      	mov	r2, r3
    f9e8:	4623      	mov	r3, r4
    f9ea:	f88d 300f 	strb.w	r3, [sp, #15]
    f9ee:	4603      	mov	r3, r0
    f9f0:	f88d 300e 	strb.w	r3, [sp, #14]
    f9f4:	460b      	mov	r3, r1
    f9f6:	f8ad 300c 	strh.w	r3, [sp, #12]
    f9fa:	4613      	mov	r3, r2
    f9fc:	f88d 300b 	strb.w	r3, [sp, #11]

    const Ftm_Pwm_Ip_HwAddrType *const  FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    fa00:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fa04:	4a5e      	ldr	r2, [pc, #376]	; (fb80 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x1a4>)
    fa06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa0a:	9307      	str	r3, [sp, #28]
    uint16 FirstEdge = DutyCycle;
    fa0c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    fa10:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint8 PairId = Channel >> 1U;
    fa14:	f89d 300e 	ldrb.w	r3, [sp, #14]
    fa18:	085b      	lsrs	r3, r3, #1
    fa1a:	f88d 3019 	strb.w	r3, [sp, #25]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    fa1e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fa22:	2b03      	cmp	r3, #3
    fa24:	bf94      	ite	ls
    fa26:	2301      	movls	r3, #1
    fa28:	2300      	movhi	r3, #0
    fa2a:	b2db      	uxtb	r3, r3
    fa2c:	4618      	mov	r0, r3
    fa2e:	f7f0 ff59 	bl	8e4 <DevAssert>
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
    fa32:	f89d 300e 	ldrb.w	r3, [sp, #14]
    fa36:	2b07      	cmp	r3, #7
    fa38:	bf94      	ite	ls
    fa3a:	2301      	movls	r3, #1
    fa3c:	2300      	movhi	r3, #0
    fa3e:	b2db      	uxtb	r3, r3
    fa40:	4618      	mov	r0, r3
    fa42:	f7f0 ff4f 	bl	8e4 <DevAssert>
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00();
    fa46:	f007 f86b 	bl	16b20 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00>

    /* Stores the new duty cycle */
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycle;
    fa4a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    fa4e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    fa52:	494c      	ldr	r1, [pc, #304]	; (fb84 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x1a8>)
    fa54:	00d2      	lsls	r2, r2, #3
    fa56:	4413      	add	r3, r2
    fa58:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    fa5c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    fa60:	f89d 300e 	ldrb.w	r3, [sp, #14]
    fa64:	4619      	mov	r1, r3
    fa66:	9807      	ldr	r0, [sp, #28]
    fa68:	f7fe fd18 	bl	e49c <Ftm_Pwm_Ip_GetChannelMode>
    fa6c:	9005      	str	r0, [sp, #20]

#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
    Ftm_Pwm_Ip_CheckNotification(Instance, Channel);
#endif

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    fa6e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    fa72:	f89d 300e 	ldrb.w	r3, [sp, #14]
    fa76:	4944      	ldr	r1, [pc, #272]	; (fb88 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x1ac>)
    fa78:	00d2      	lsls	r2, r2, #3
    fa7a:	4413      	add	r3, r2
    fa7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    fa80:	2b02      	cmp	r3, #2
    fa82:	d111      	bne.n	faa8 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xcc>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    fa84:	f89d 200f 	ldrb.w	r2, [sp, #15]
    fa88:	f89d 300e 	ldrb.w	r3, [sp, #14]
    fa8c:	493e      	ldr	r1, [pc, #248]	; (fb88 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x1ac>)
    fa8e:	00d2      	lsls	r2, r2, #3
    fa90:	4413      	add	r3, r2
    fa92:	2201      	movs	r2, #1
    fa94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
    fa98:	f89d 100e 	ldrb.w	r1, [sp, #14]
    fa9c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    faa0:	2300      	movs	r3, #0
    faa2:	2200      	movs	r2, #0
    faa4:	f000 f8f8 	bl	fc98 <Ftm_Pwm_Ip_SwOutputControl>
                                   Channel,
                                   FTM_PWM_IP_OUTPUT_STATE_LOW,
                                   FALSE);
    }

    if ((FTM_PWM_IP_MODE_EDGE_ALIGNED_HIGH   == ChMode) ||
    faa8:	9b05      	ldr	r3, [sp, #20]
    faaa:	2b0a      	cmp	r3, #10
    faac:	d008      	beq.n	fac0 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xe4>
    faae:	9b05      	ldr	r3, [sp, #20]
    fab0:	2b09      	cmp	r3, #9
    fab2:	d005      	beq.n	fac0 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xe4>
        (FTM_PWM_IP_MODE_EDGE_ALIGNED_LOW    == ChMode) ||
    fab4:	9b05      	ldr	r3, [sp, #20]
    fab6:	2b12      	cmp	r3, #18
    fab8:	d002      	beq.n	fac0 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xe4>
        (FTM_PWM_IP_MODE_CENTER_ALIGNED_HIGH == ChMode) ||
    faba:	9b05      	ldr	r3, [sp, #20]
    fabc:	2b11      	cmp	r3, #17
    fabe:	d10c      	bne.n	fada <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xfe>
        (FTM_PWM_IP_MODE_CENTER_ALIGNED_LOW  == ChMode))
    {
        /* Write CV registers and setup duty cycle and phase values */
        (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    fac0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    fac4:	f89d 100e 	ldrb.w	r1, [sp, #14]
    fac8:	f89d 000f 	ldrb.w	r0, [sp, #15]
    facc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    fad0:	9300      	str	r3, [sp, #0]
    fad2:	2300      	movs	r3, #0
    fad4:	f000 f9ba 	bl	fe4c <Ftm_Pwm_Ip_UpdatePwmChannel>
    fad8:	e04c      	b.n	fb74 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x198>
                                      Channel,
                                      FirstEdge,
                                      0U,
                                      SoftwareTrigger);
    }
    else if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    fada:	9b05      	ldr	r3, [sp, #20]
    fadc:	2b22      	cmp	r3, #34	; 0x22
    fade:	d008      	beq.n	faf2 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x116>
    fae0:	9b05      	ldr	r3, [sp, #20]
    fae2:	2b62      	cmp	r3, #98	; 0x62
    fae4:	d005      	beq.n	faf2 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x116>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
             ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    fae6:	9b05      	ldr	r3, [sp, #20]
    fae8:	2b61      	cmp	r3, #97	; 0x61
    faea:	d002      	beq.n	faf2 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x116>
             ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    faec:	9b05      	ldr	r3, [sp, #20]
    faee:	2b21      	cmp	r3, #33	; 0x21
    faf0:	d140      	bne.n	fb74 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x198>
#endif
             ( FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))

    {
        if((uint16)0U == Ftm_Pwm_Ip_aPhaseShift[Instance][PairId])
    faf2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    faf6:	f89d 3019 	ldrb.w	r3, [sp, #25]
    fafa:	4924      	ldr	r1, [pc, #144]	; (fb8c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x1b0>)
    fafc:	0092      	lsls	r2, r2, #2
    fafe:	4413      	add	r3, r2
    fb00:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    fb04:	2b00      	cmp	r3, #0
    fb06:	d10d      	bne.n	fb24 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x148>
        {
            /* Write CV registers and setup duty cycle and phase values */
            (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    fb08:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    fb0c:	f89d 100e 	ldrb.w	r1, [sp, #14]
    fb10:	f89d 000f 	ldrb.w	r0, [sp, #15]
    fb14:	f89d 300b 	ldrb.w	r3, [sp, #11]
    fb18:	9300      	str	r3, [sp, #0]
    fb1a:	4613      	mov	r3, r2
    fb1c:	2200      	movs	r2, #0
    fb1e:	f000 f995 	bl	fe4c <Ftm_Pwm_Ip_UpdatePwmChannel>
    fb22:	e027      	b.n	fb74 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x198>
                                               FirstEdge,
                                               SoftwareTrigger);
        }
        else
        {
            FirstEdge = Ftm_Pwm_Ip_CalculatePhaseShift(Instance, DutyCycle, Ftm_Pwm_Ip_aPhaseShift[Instance][PairId]);
    fb24:	f89d 200f 	ldrb.w	r2, [sp, #15]
    fb28:	f89d 3019 	ldrb.w	r3, [sp, #25]
    fb2c:	4917      	ldr	r1, [pc, #92]	; (fb8c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x1b0>)
    fb2e:	0092      	lsls	r2, r2, #2
    fb30:	4413      	add	r3, r2
    fb32:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    fb36:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    fb3a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    fb3e:	4618      	mov	r0, r3
    fb40:	f7fe fff6 	bl	eb30 <Ftm_Pwm_Ip_CalculatePhaseShift>
    fb44:	4603      	mov	r3, r0
    fb46:	f8ad 301a 	strh.w	r3, [sp, #26]
            /* Write CV registers and setup duty cycle and phase values */
            (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    fb4a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    fb4e:	f89d 3019 	ldrb.w	r3, [sp, #25]
    fb52:	490e      	ldr	r1, [pc, #56]	; (fb8c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x1b0>)
    fb54:	0092      	lsls	r2, r2, #2
    fb56:	4413      	add	r3, r2
    fb58:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    fb5c:	f8bd 401a 	ldrh.w	r4, [sp, #26]
    fb60:	f89d 100e 	ldrb.w	r1, [sp, #14]
    fb64:	f89d 000f 	ldrb.w	r0, [sp, #15]
    fb68:	f89d 300b 	ldrb.w	r3, [sp, #11]
    fb6c:	9300      	str	r3, [sp, #0]
    fb6e:	4623      	mov	r3, r4
    fb70:	f000 f96c 	bl	fe4c <Ftm_Pwm_Ip_UpdatePwmChannel>
    else
    {
        /* Do Nothing */
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00();
    fb74:	f007 f800 	bl	16b78 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00>

}
    fb78:	bf00      	nop
    fb7a:	b008      	add	sp, #32
    fb7c:	bd10      	pop	{r4, pc}
    fb7e:	bf00      	nop
    fb80:	00019800 	.word	0x00019800
    fb84:	1fff8e34 	.word	0x1fff8e34
    fb88:	1fff9004 	.word	0x1fff9004
    fb8c:	1fff8e74 	.word	0x1fff8e74

0000fb90 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty>:
void Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(uint8 Instance,
                                       uint8 Channel,
                                       uint16 Period,
                                       uint16 DutyCycle,
                                       boolean SoftwareTrigger)
{
    fb90:	b510      	push	{r4, lr}
    fb92:	b084      	sub	sp, #16
    fb94:	4604      	mov	r4, r0
    fb96:	4608      	mov	r0, r1
    fb98:	4611      	mov	r1, r2
    fb9a:	461a      	mov	r2, r3
    fb9c:	4623      	mov	r3, r4
    fb9e:	f88d 3007 	strb.w	r3, [sp, #7]
    fba2:	4603      	mov	r3, r0
    fba4:	f88d 3006 	strb.w	r3, [sp, #6]
    fba8:	460b      	mov	r3, r1
    fbaa:	f8ad 3004 	strh.w	r3, [sp, #4]
    fbae:	4613      	mov	r3, r2
    fbb0:	f8ad 3002 	strh.w	r3, [sp, #2]

    uint16 TempDutyCycle = 0U;
    fbb4:	2300      	movs	r3, #0
    fbb6:	f8ad 300e 	strh.w	r3, [sp, #14]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    fbba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fbbe:	4a33      	ldr	r2, [pc, #204]	; (fc8c <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xfc>)
    fbc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fbc4:	9302      	str	r3, [sp, #8]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    fbc6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fbca:	2b03      	cmp	r3, #3
    fbcc:	bf94      	ite	ls
    fbce:	2301      	movls	r3, #1
    fbd0:	2300      	movhi	r3, #0
    fbd2:	b2db      	uxtb	r3, r3
    fbd4:	4618      	mov	r0, r3
    fbd6:	f7f0 fe85 	bl	8e4 <DevAssert>
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
    fbda:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fbde:	2b07      	cmp	r3, #7
    fbe0:	bf94      	ite	ls
    fbe2:	2301      	movls	r3, #1
    fbe4:	2300      	movhi	r3, #0
    fbe6:	b2db      	uxtb	r3, r3
    fbe8:	4618      	mov	r0, r3
    fbea:	f7f0 fe7b 	bl	8e4 <DevAssert>
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01();
    fbee:	f006 ffe9 	bl	16bc4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01>

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    fbf2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    fbf6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fbfa:	4925      	ldr	r1, [pc, #148]	; (fc90 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0x100>)
    fbfc:	00d2      	lsls	r2, r2, #3
    fbfe:	4413      	add	r3, r2
    fc00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    fc04:	2b02      	cmp	r3, #2
    fc06:	d111      	bne.n	fc2c <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0x9c>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    fc08:	f89d 2007 	ldrb.w	r2, [sp, #7]
    fc0c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fc10:	491f      	ldr	r1, [pc, #124]	; (fc90 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0x100>)
    fc12:	00d2      	lsls	r2, r2, #3
    fc14:	4413      	add	r3, r2
    fc16:	2201      	movs	r2, #1
    fc18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
    fc1c:	f89d 1006 	ldrb.w	r1, [sp, #6]
    fc20:	f89d 0007 	ldrb.w	r0, [sp, #7]
    fc24:	2300      	movs	r3, #0
    fc26:	2200      	movs	r2, #0
    fc28:	f000 f836 	bl	fc98 <Ftm_Pwm_Ip_SwOutputControl>
    else
    {
        /* Do Nothing */
    }

    (void) Ftm_Pwm_Ip_UpdatePwmPeriod(Instance,
    fc2c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    fc30:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fc34:	2200      	movs	r2, #0
    fc36:	4618      	mov	r0, r3
    fc38:	f000 f9b0 	bl	ff9c <Ftm_Pwm_Ip_UpdatePwmPeriod>
                                      Period,
                                      FALSE);
    Ftm_Pwm_Ip_aPeriod[Instance] = Period;
    fc3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fc40:	4914      	ldr	r1, [pc, #80]	; (fc94 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0x104>)
    fc42:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    fc46:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    if (0U == Period)
    fc4a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    fc4e:	2b00      	cmp	r3, #0
    fc50:	d103      	bne.n	fc5a <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xca>
    {
        TempDutyCycle = (uint16)0U;
    fc52:	2300      	movs	r3, #0
    fc54:	f8ad 300e 	strh.w	r3, [sp, #14]
    fc58:	e003      	b.n	fc62 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xd2>
    }
    else
    {
        TempDutyCycle = DutyCycle;
    fc5a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    fc5e:	f8ad 300e 	strh.w	r3, [sp, #14]
    }


    Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(Instance,
    fc62:	f89d 3018 	ldrb.w	r3, [sp, #24]
    fc66:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    fc6a:	f89d 1006 	ldrb.w	r1, [sp, #6]
    fc6e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    fc72:	f7ff feb3 	bl	f9dc <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                         Channel,
                                         TempDutyCycle,
                                         SoftwareTrigger);

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    fc76:	f89d 3018 	ldrb.w	r3, [sp, #24]
    fc7a:	4619      	mov	r1, r3
    fc7c:	9802      	ldr	r0, [sp, #8]
    fc7e:	f7fd ff58 	bl	db32 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01();
    fc82:	f006 ffcb 	bl	16c1c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01>
}
    fc86:	bf00      	nop
    fc88:	b004      	add	sp, #16
    fc8a:	bd10      	pop	{r4, pc}
    fc8c:	00019800 	.word	0x00019800
    fc90:	1fff9004 	.word	0x1fff9004
    fc94:	1fff8e2c 	.word	0x1fff8e2c

0000fc98 <Ftm_Pwm_Ip_SwOutputControl>:
 **/
void Ftm_Pwm_Ip_SwOutputControl(uint8 Instance,
                                uint8 Channel,
                                Ftm_Pwm_Ip_OutputStateType OutputState,
                                boolean ActiveState)
{
    fc98:	b500      	push	{lr}
    fc9a:	b089      	sub	sp, #36	; 0x24
    fc9c:	9200      	str	r2, [sp, #0]
    fc9e:	461a      	mov	r2, r3
    fca0:	4603      	mov	r3, r0
    fca2:	f88d 3007 	strb.w	r3, [sp, #7]
    fca6:	460b      	mov	r3, r1
    fca8:	f88d 3006 	strb.w	r3, [sp, #6]
    fcac:	4613      	mov	r3, r2
    fcae:	f88d 3005 	strb.w	r3, [sp, #5]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    fcb2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fcb6:	4a62      	ldr	r2, [pc, #392]	; (fe40 <Ftm_Pwm_Ip_SwOutputControl+0x1a8>)
    fcb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fcbc:	9305      	str	r3, [sp, #20]
    uint16 SwoCtrlRegVal = 0U;
    fcbe:	2300      	movs	r3, #0
    fcc0:	f8ad 301e 	strh.w	r3, [sp, #30]
    uint16 ChannelMask = 0U;
    fcc4:	2300      	movs	r3, #0
    fcc6:	f8ad 301c 	strh.w	r3, [sp, #28]
    uint16 SwoCtrlBitMask = 0U;
    fcca:	2300      	movs	r3, #0
    fccc:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint16 TempPolVal = 0U;
    fcd0:	2300      	movs	r3, #0
    fcd2:	f8ad 3012 	strh.w	r3, [sp, #18]
    
    Ftm_Pwm_Ip_ChannelModeType ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    fcd6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fcda:	4619      	mov	r1, r3
    fcdc:	9805      	ldr	r0, [sp, #20]
    fcde:	f7fe fbdd 	bl	e49c <Ftm_Pwm_Ip_GetChannelMode>
    fce2:	9003      	str	r0, [sp, #12]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    fce4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fce8:	2b03      	cmp	r3, #3
    fcea:	bf94      	ite	ls
    fcec:	2301      	movls	r3, #1
    fcee:	2300      	movhi	r3, #0
    fcf0:	b2db      	uxtb	r3, r3
    fcf2:	4618      	mov	r0, r3
    fcf4:	f7f0 fdf6 	bl	8e4 <DevAssert>
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
    fcf8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fcfc:	2b07      	cmp	r3, #7
    fcfe:	bf94      	ite	ls
    fd00:	2301      	movls	r3, #1
    fd02:	2300      	movhi	r3, #0
    fd04:	b2db      	uxtb	r3, r3
    fd06:	4618      	mov	r0, r3
    fd08:	f7f0 fdec 	bl	8e4 <DevAssert>
#endif
    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    fd0c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    fd10:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fd14:	494b      	ldr	r1, [pc, #300]	; (fe44 <Ftm_Pwm_Ip_SwOutputControl+0x1ac>)
    fd16:	00d2      	lsls	r2, r2, #3
    fd18:	4413      	add	r3, r2
    fd1a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    fd1e:	2b02      	cmp	r3, #2
    fd20:	d109      	bne.n	fd36 <Ftm_Pwm_Ip_SwOutputControl+0x9e>
    {
        Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = (uint16)0U;
    fd22:	f89d 2007 	ldrb.w	r2, [sp, #7]
    fd26:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fd2a:	4947      	ldr	r1, [pc, #284]	; (fe48 <Ftm_Pwm_Ip_SwOutputControl+0x1b0>)
    fd2c:	00d2      	lsls	r2, r2, #3
    fd2e:	4413      	add	r3, r2
    fd30:	2200      	movs	r2, #0
    fd32:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    else
    {
        /* Do Nothing */
    }

    SwoCtrlRegVal = Ftm_Pwm_Ip_GetSoftwareOutputControl(FtmBase);
    fd36:	9805      	ldr	r0, [sp, #20]
    fd38:	f7fe fb57 	bl	e3ea <Ftm_Pwm_Ip_GetSoftwareOutputControl>
    fd3c:	4603      	mov	r3, r0
    fd3e:	f8ad 301e 	strh.w	r3, [sp, #30]

    if ((FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    fd42:	9b03      	ldr	r3, [sp, #12]
    fd44:	2b22      	cmp	r3, #34	; 0x22
    fd46:	d008      	beq.n	fd5a <Ftm_Pwm_Ip_SwOutputControl+0xc2>
    fd48:	9b03      	ldr	r3, [sp, #12]
    fd4a:	2b62      	cmp	r3, #98	; 0x62
    fd4c:	d005      	beq.n	fd5a <Ftm_Pwm_Ip_SwOutputControl+0xc2>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    fd4e:	9b03      	ldr	r3, [sp, #12]
    fd50:	2b61      	cmp	r3, #97	; 0x61
    fd52:	d002      	beq.n	fd5a <Ftm_Pwm_Ip_SwOutputControl+0xc2>
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    fd54:	9b03      	ldr	r3, [sp, #12]
    fd56:	2b21      	cmp	r3, #33	; 0x21
    fd58:	d103      	bne.n	fd62 <Ftm_Pwm_Ip_SwOutputControl+0xca>
#endif
        (FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))
    {
        /* Two consecutive bits (n and n+1) */
        ChannelMask = (uint16)3U;
    fd5a:	2303      	movs	r3, #3
    fd5c:	f8ad 301c 	strh.w	r3, [sp, #28]
    fd60:	e002      	b.n	fd68 <Ftm_Pwm_Ip_SwOutputControl+0xd0>
    }
    else
    {
        ChannelMask = (uint16)1U;
    fd62:	2301      	movs	r3, #1
    fd64:	f8ad 301c 	strh.w	r3, [sp, #28]
    }

    TempPolVal = (uint16)Ftm_Pwm_Ip_GetPolInstance(FtmBase) & (uint16)((uint32)ChannelMask << (uint16)Channel);
    fd68:	9805      	ldr	r0, [sp, #20]
    fd6a:	f7fe fb47 	bl	e3fc <Ftm_Pwm_Ip_GetPolInstance>
    fd6e:	4603      	mov	r3, r0
    fd70:	4619      	mov	r1, r3
    fd72:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    fd76:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fd7a:	fa02 f303 	lsl.w	r3, r2, r3
    fd7e:	b29b      	uxth	r3, r3
    fd80:	400b      	ands	r3, r1
    fd82:	f8ad 3012 	strh.w	r3, [sp, #18]

    /* Shift the polarity bit to match the output control value position (CHnOCV) in SWOCTRL register */
    TempPolVal = (uint16)((uint32)TempPolVal << FTM_SWOCTRL_CH0OCV_SHIFT);
    fd86:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    fd8a:	021b      	lsls	r3, r3, #8
    fd8c:	f8ad 3012 	strh.w	r3, [sp, #18]

    /* Clear the CHnOCV bit(s) from the SwoCtrlRegVal for the given channel
       and next odd channel if phase-shifted or combined */
    SwoCtrlRegVal &= (uint16)(~((uint32)ChannelMask << ((uint16)Channel + FTM_SWOCTRL_CH0OCV_SHIFT)));
    fd90:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    fd94:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fd98:	3308      	adds	r3, #8
    fd9a:	fa02 f303 	lsl.w	r3, r2, r3
    fd9e:	b29b      	uxth	r3, r3
    fda0:	43db      	mvns	r3, r3
    fda2:	b29a      	uxth	r2, r3
    fda4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    fda8:	4013      	ands	r3, r2
    fdaa:	f8ad 301e 	strh.w	r3, [sp, #30]

     /* If software output control is enabled */
    if (TRUE == ActiveState)
    fdae:	f89d 3005 	ldrb.w	r3, [sp, #5]
    fdb2:	2b00      	cmp	r3, #0
    fdb4:	d027      	beq.n	fe06 <Ftm_Pwm_Ip_SwOutputControl+0x16e>
    {
        if (FTM_PWM_IP_OUTPUT_STATE_HIGH == OutputState)
    fdb6:	9b00      	ldr	r3, [sp, #0]
    fdb8:	2b01      	cmp	r3, #1
    fdba:	d109      	bne.n	fdd0 <Ftm_Pwm_Ip_SwOutputControl+0x138>
        {
            /* Sw control on given channel was requested so corresponding channel bits will be set to "1" */
            SwoCtrlBitMask = (uint16)((uint32)ChannelMask << ((uint16)Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    fdbc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    fdc0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fdc4:	3308      	adds	r3, #8
    fdc6:	fa02 f303 	lsl.w	r3, r2, r3
    fdca:	f8ad 301a 	strh.w	r3, [sp, #26]
    fdce:	e002      	b.n	fdd6 <Ftm_Pwm_Ip_SwOutputControl+0x13e>
        }
        else
        {
            SwoCtrlBitMask = (uint16)0U;
    fdd0:	2300      	movs	r3, #0
    fdd2:	f8ad 301a 	strh.w	r3, [sp, #26]
        }

        /* XOR between polarity bit(s) of the given channel register (shifted left by 8) and the desired sw output value
           will provide the correct values of the SWOCTRL*/
        SwoCtrlRegVal |= (SwoCtrlBitMask ^ TempPolVal);
    fdd6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    fdda:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    fdde:	4053      	eors	r3, r2
    fde0:	b29a      	uxth	r2, r3
    fde2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    fde6:	4313      	orrs	r3, r2
    fde8:	f8ad 301e 	strh.w	r3, [sp, #30]

        /* Software output control is requested so CHnOC bit of given channel will be set */
        SwoCtrlRegVal |= (uint16)((uint32)ChannelMask << (uint16)Channel);
    fdec:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    fdf0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fdf4:	fa02 f303 	lsl.w	r3, r2, r3
    fdf8:	b29a      	uxth	r2, r3
    fdfa:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    fdfe:	4313      	orrs	r3, r2
    fe00:	f8ad 301e 	strh.w	r3, [sp, #30]
    fe04:	e00d      	b.n	fe22 <Ftm_Pwm_Ip_SwOutputControl+0x18a>
    }
    else
    {
        /* Software output control is disabled so CHnOC bit of given channel will be cleared */
        SwoCtrlRegVal &= (uint16)(~((uint32)ChannelMask << (uint16)Channel));
    fe06:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    fe0a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fe0e:	fa02 f303 	lsl.w	r3, r2, r3
    fe12:	b29b      	uxth	r3, r3
    fe14:	43db      	mvns	r3, r3
    fe16:	b29a      	uxth	r2, r3
    fe18:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    fe1c:	4013      	ands	r3, r2
    fe1e:	f8ad 301e 	strh.w	r3, [sp, #30]
    }

    /* Write temporary variable into SWOCTRL register */
    Ftm_Pwm_Ip_SoftwareOutputControl(FtmBase, SwoCtrlRegVal);
    fe22:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    fe26:	4619      	mov	r1, r3
    fe28:	9805      	ldr	r0, [sp, #20]
    fe2a:	f7fe fa7e 	bl	e32a <Ftm_Pwm_Ip_SoftwareOutputControl>

    /* Use software synchronization to update SWOCTRL register immediately */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    fe2e:	2101      	movs	r1, #1
    fe30:	9805      	ldr	r0, [sp, #20]
    fe32:	f7fd fe7e 	bl	db32 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    fe36:	bf00      	nop
    fe38:	b009      	add	sp, #36	; 0x24
    fe3a:	f85d fb04 	ldr.w	pc, [sp], #4
    fe3e:	bf00      	nop
    fe40:	00019800 	.word	0x00019800
    fe44:	1fff9004 	.word	0x1fff9004
    fe48:	1fff8e34 	.word	0x1fff8e34

0000fe4c <Ftm_Pwm_Ip_UpdatePwmChannel>:
Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdatePwmChannel(uint8 Instance,
                                                  uint8 Channel,
                                                  uint16 FirstEdge,
                                                  uint16 SecondEdge,
                                                  boolean SoftwareTrigger)
{
    fe4c:	b510      	push	{r4, lr}
    fe4e:	b086      	sub	sp, #24
    fe50:	4604      	mov	r4, r0
    fe52:	4608      	mov	r0, r1
    fe54:	4611      	mov	r1, r2
    fe56:	461a      	mov	r2, r3
    fe58:	4623      	mov	r3, r4
    fe5a:	f88d 3007 	strb.w	r3, [sp, #7]
    fe5e:	4603      	mov	r3, r0
    fe60:	f88d 3006 	strb.w	r3, [sp, #6]
    fe64:	460b      	mov	r3, r1
    fe66:	f8ad 3004 	strh.w	r3, [sp, #4]
    fe6a:	4613      	mov	r3, r2
    fe6c:	f8ad 3002 	strh.w	r3, [sp, #2]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    fe70:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fe74:	4a47      	ldr	r2, [pc, #284]	; (ff94 <Ftm_Pwm_Ip_UpdatePwmChannel+0x148>)
    fe76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe7a:	9303      	str	r3, [sp, #12]
    Ftm_Pwm_Ip_StatusType RetStatus = FTM_PWM_IP_STATUS_SUCCESS;
    fe7c:	2300      	movs	r3, #0
    fe7e:	9305      	str	r3, [sp, #20]
    uint16 HwFirstEdge = 0U;
    fe80:	2300      	movs	r3, #0
    fe82:	f8ad 3012 	strh.w	r3, [sp, #18]
    uint16 HwSecondEdge = 0U;
    fe86:	2300      	movs	r3, #0
    fe88:	f8ad 3010 	strh.w	r3, [sp, #16]
    uint16 FtmPeriod = 0U;
    fe8c:	2300      	movs	r3, #0
    fe8e:	f8ad 300a 	strh.w	r3, [sp, #10]
    uint8 ChPairId = (uint8)(Channel >> 1U);
    fe92:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fe96:	085b      	lsrs	r3, r3, #1
    fe98:	f88d 3009 	strb.w	r3, [sp, #9]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    fe9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fea0:	2b03      	cmp	r3, #3
    fea2:	bf94      	ite	ls
    fea4:	2301      	movls	r3, #1
    fea6:	2300      	movhi	r3, #0
    fea8:	b2db      	uxtb	r3, r3
    feaa:	4618      	mov	r0, r3
    feac:	f7f0 fd1a 	bl	8e4 <DevAssert>
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
    feb0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    feb4:	2b07      	cmp	r3, #7
    feb6:	bf94      	ite	ls
    feb8:	2301      	movls	r3, #1
    feba:	2300      	movhi	r3, #0
    febc:	b2db      	uxtb	r3, r3
    febe:	4618      	mov	r0, r3
    fec0:	f7f0 fd10 	bl	8e4 <DevAssert>
#endif

    /* Get the period in the FTM Instance */
    FtmPeriod = Ftm_Pwm_Ip_aPeriod[Instance];
    fec4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fec8:	4a33      	ldr	r2, [pc, #204]	; (ff98 <Ftm_Pwm_Ip_UpdatePwmChannel+0x14c>)
    feca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    fece:	f8ad 300a 	strh.w	r3, [sp, #10]

    if (((FirstEdge <= FtmPeriod) && (SecondEdge <= FtmPeriod)) || (0U == FtmPeriod))
    fed2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    fed6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    feda:	429a      	cmp	r2, r3
    fedc:	d805      	bhi.n	feea <Ftm_Pwm_Ip_UpdatePwmChannel+0x9e>
    fede:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    fee2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    fee6:	429a      	cmp	r2, r3
    fee8:	d903      	bls.n	fef2 <Ftm_Pwm_Ip_UpdatePwmChannel+0xa6>
    feea:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    feee:	2b00      	cmp	r3, #0
    fef0:	d108      	bne.n	ff04 <Ftm_Pwm_Ip_UpdatePwmChannel+0xb8>
    {
        HwFirstEdge = FirstEdge;
    fef2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    fef6:	f8ad 3012 	strh.w	r3, [sp, #18]
        HwSecondEdge = SecondEdge;
    fefa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    fefe:	f8ad 3010 	strh.w	r3, [sp, #16]
    ff02:	e001      	b.n	ff08 <Ftm_Pwm_Ip_UpdatePwmChannel+0xbc>
    }
    else
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    ff04:	2301      	movs	r3, #1
    ff06:	9305      	str	r3, [sp, #20]
    }

    if (FTM_PWM_IP_STATUS_SUCCESS == RetStatus)
    ff08:	9b05      	ldr	r3, [sp, #20]
    ff0a:	2b00      	cmp	r3, #0
    ff0c:	d13e      	bne.n	ff8c <Ftm_Pwm_Ip_UpdatePwmChannel+0x140>
    {
        if (TRUE == Ftm_Pwm_Ip_GetDualChnCombineCmd(FtmBase, ChPairId))
    ff0e:	f89d 3009 	ldrb.w	r3, [sp, #9]
    ff12:	4619      	mov	r1, r3
    ff14:	9803      	ldr	r0, [sp, #12]
    ff16:	f7fd feac 	bl	dc72 <Ftm_Pwm_Ip_GetDualChnCombineCmd>
    ff1a:	4603      	mov	r3, r0
    ff1c:	2b00      	cmp	r3, #0
    ff1e:	d016      	beq.n	ff4e <Ftm_Pwm_Ip_UpdatePwmChannel+0x102>
        {
            /* Modify the initial value in the channel n match edge */
            Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)(ChPairId * 2U), HwFirstEdge);
    ff20:	f89d 3009 	ldrb.w	r3, [sp, #9]
    ff24:	005b      	lsls	r3, r3, #1
    ff26:	b2db      	uxtb	r3, r3
    ff28:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    ff2c:	4619      	mov	r1, r3
    ff2e:	9803      	ldr	r0, [sp, #12]
    ff30:	f7fd fd37 	bl	d9a2 <Ftm_Pwm_Ip_SetChnCountVal>

            /* Modify the initial value in the channel (n+1) match edge */
            Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)((ChPairId * 2U) + 1U), HwSecondEdge);
    ff34:	f89d 3009 	ldrb.w	r3, [sp, #9]
    ff38:	005b      	lsls	r3, r3, #1
    ff3a:	b2db      	uxtb	r3, r3
    ff3c:	3301      	adds	r3, #1
    ff3e:	b2db      	uxtb	r3, r3
    ff40:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    ff44:	4619      	mov	r1, r3
    ff46:	9803      	ldr	r0, [sp, #12]
    ff48:	f7fd fd2b 	bl	d9a2 <Ftm_Pwm_Ip_SetChnCountVal>
    ff4c:	e018      	b.n	ff80 <Ftm_Pwm_Ip_UpdatePwmChannel+0x134>
        }
        else
        {
            /* Channel value is divided by 2 for up down counter mode to keep same duty */
            if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
    ff4e:	9803      	ldr	r0, [sp, #12]
    ff50:	f7fd fbb0 	bl	d6b4 <Ftm_Pwm_Ip_GetCpwms>
    ff54:	4603      	mov	r3, r0
    ff56:	2b01      	cmp	r3, #1
    ff58:	d10a      	bne.n	ff70 <Ftm_Pwm_Ip_UpdatePwmChannel+0x124>
            {
                Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channel, (uint16)(HwFirstEdge >> 1U));
    ff5a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    ff5e:	085b      	lsrs	r3, r3, #1
    ff60:	b29a      	uxth	r2, r3
    ff62:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ff66:	4619      	mov	r1, r3
    ff68:	9803      	ldr	r0, [sp, #12]
    ff6a:	f7fd fd1a 	bl	d9a2 <Ftm_Pwm_Ip_SetChnCountVal>
    ff6e:	e007      	b.n	ff80 <Ftm_Pwm_Ip_UpdatePwmChannel+0x134>
            }
            else
            {
                Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channel, HwFirstEdge);
    ff70:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    ff74:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ff78:	4619      	mov	r1, r3
    ff7a:	9803      	ldr	r0, [sp, #12]
    ff7c:	f7fd fd11 	bl	d9a2 <Ftm_Pwm_Ip_SetChnCountVal>
            }
        }

        /* Software trigger is generated to change CV registers */
        /* Before this please configure sync mechanism to use software trigger */
        Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    ff80:	f89d 3020 	ldrb.w	r3, [sp, #32]
    ff84:	4619      	mov	r1, r3
    ff86:	9803      	ldr	r0, [sp, #12]
    ff88:	f7fd fdd3 	bl	db32 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    }

    return RetStatus;
    ff8c:	9b05      	ldr	r3, [sp, #20]
}
    ff8e:	4618      	mov	r0, r3
    ff90:	b006      	add	sp, #24
    ff92:	bd10      	pop	{r4, pc}
    ff94:	00019800 	.word	0x00019800
    ff98:	1fff8e2c 	.word	0x1fff8e2c

0000ff9c <Ftm_Pwm_Ip_UpdatePwmPeriod>:
 * @implements Ftm_Pwm_Ip_UpdatePwmPeriod_Activity
 **/
Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdatePwmPeriod(uint8 Instance,
                                                 uint32 NewValue,
                                                 boolean SoftwareTrigger)
{
    ff9c:	b500      	push	{lr}
    ff9e:	b085      	sub	sp, #20
    ffa0:	4603      	mov	r3, r0
    ffa2:	9100      	str	r1, [sp, #0]
    ffa4:	f88d 3007 	strb.w	r3, [sp, #7]
    ffa8:	4613      	mov	r3, r2
    ffaa:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    ffae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ffb2:	4a1b      	ldr	r2, [pc, #108]	; (10020 <Ftm_Pwm_Ip_UpdatePwmPeriod+0x84>)
    ffb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffb8:	9302      	str	r3, [sp, #8]
    uint32 FtmPeriod = 0U;
    ffba:	2300      	movs	r3, #0
    ffbc:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    ffbe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ffc2:	2b03      	cmp	r3, #3
    ffc4:	bf94      	ite	ls
    ffc6:	2301      	movls	r3, #1
    ffc8:	2300      	movhi	r3, #0
    ffca:	b2db      	uxtb	r3, r3
    ffcc:	4618      	mov	r0, r3
    ffce:	f7f0 fc89 	bl	8e4 <DevAssert>
#endif
    FtmPeriod = NewValue;
    ffd2:	9b00      	ldr	r3, [sp, #0]
    ffd4:	9303      	str	r3, [sp, #12]
    
    /* Store the new period */
    Ftm_Pwm_Ip_aPeriod[Instance] = (uint16)NewValue;
    ffd6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ffda:	9a00      	ldr	r2, [sp, #0]
    ffdc:	b291      	uxth	r1, r2
    ffde:	4a11      	ldr	r2, [pc, #68]	; (10024 <Ftm_Pwm_Ip_UpdatePwmPeriod+0x88>)
    ffe0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    /* Check the signal operation in which PWM mode */
    if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
    ffe4:	9802      	ldr	r0, [sp, #8]
    ffe6:	f7fd fb65 	bl	d6b4 <Ftm_Pwm_Ip_GetCpwms>
    ffea:	4603      	mov	r3, r0
    ffec:	2b01      	cmp	r3, #1
    ffee:	d103      	bne.n	fff8 <Ftm_Pwm_Ip_UpdatePwmPeriod+0x5c>
    {
        FtmPeriod = (FtmPeriod >> 1U);
    fff0:	9b03      	ldr	r3, [sp, #12]
    fff2:	085b      	lsrs	r3, r3, #1
    fff4:	9303      	str	r3, [sp, #12]
    fff6:	e002      	b.n	fffe <Ftm_Pwm_Ip_UpdatePwmPeriod+0x62>
    }
    else
    {
        FtmPeriod = (FtmPeriod - 1U);
    fff8:	9b03      	ldr	r3, [sp, #12]
    fffa:	3b01      	subs	r3, #1
    fffc:	9303      	str	r3, [sp, #12]
    }
    /* Set the new modulo value into MOD register */
    Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(FtmPeriod));
    fffe:	9b03      	ldr	r3, [sp, #12]
   10000:	b29b      	uxth	r3, r3
   10002:	4619      	mov	r1, r3
   10004:	9802      	ldr	r0, [sp, #8]
   10006:	f7fd fba8 	bl	d75a <Ftm_Pwm_Ip_SetMod>
    /* Software trigger is generated to change MOD registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
   1000a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1000e:	4619      	mov	r1, r3
   10010:	9802      	ldr	r0, [sp, #8]
   10012:	f7fd fd8e 	bl	db32 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    return FTM_PWM_IP_STATUS_SUCCESS;
   10016:	2300      	movs	r3, #0
}
   10018:	4618      	mov	r0, r3
   1001a:	b005      	add	sp, #20
   1001c:	f85d fb04 	ldr.w	pc, [sp], #4
   10020:	00019800 	.word	0x00019800
   10024:	1fff8e2c 	.word	0x1fff8e2c

00010028 <Ftm_Pwm_Ip_GetOutputState>:
 *
 * @implements Ftm_Pwm_Ip_GetOutputState_Activity
 **/
Ftm_Pwm_Ip_OutputStateType Ftm_Pwm_Ip_GetOutputState(uint8 Instance,
                                                     uint8 Channel)
{
   10028:	b500      	push	{lr}
   1002a:	b085      	sub	sp, #20
   1002c:	4603      	mov	r3, r0
   1002e:	460a      	mov	r2, r1
   10030:	f88d 3007 	strb.w	r3, [sp, #7]
   10034:	4613      	mov	r3, r2
   10036:	f88d 3006 	strb.w	r3, [sp, #6]

    const Ftm_Pwm_Ip_HwAddrType *const FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   1003a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1003e:	4a17      	ldr	r2, [pc, #92]	; (1009c <Ftm_Pwm_Ip_GetOutputState+0x74>)
   10040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10044:	9302      	str	r3, [sp, #8]
    Ftm_Pwm_Ip_OutputStateType OutputValue;

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   10046:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1004a:	2b03      	cmp	r3, #3
   1004c:	bf94      	ite	ls
   1004e:	2301      	movls	r3, #1
   10050:	2300      	movhi	r3, #0
   10052:	b2db      	uxtb	r3, r3
   10054:	4618      	mov	r0, r3
   10056:	f7f0 fc45 	bl	8e4 <DevAssert>
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
   1005a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1005e:	2b07      	cmp	r3, #7
   10060:	bf94      	ite	ls
   10062:	2301      	movls	r3, #1
   10064:	2300      	movhi	r3, #0
   10066:	b2db      	uxtb	r3, r3
   10068:	4618      	mov	r0, r3
   1006a:	f7f0 fc3b 	bl	8e4 <DevAssert>
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03();
   1006e:	f006 fe4d 	bl	16d0c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03>

    if (TRUE == Ftm_Pwm_Ip_GetChOutputValue(FtmBase, Channel))
   10072:	f89d 3006 	ldrb.w	r3, [sp, #6]
   10076:	4619      	mov	r1, r3
   10078:	9802      	ldr	r0, [sp, #8]
   1007a:	f7fd fc7c 	bl	d976 <Ftm_Pwm_Ip_GetChOutputValue>
   1007e:	4603      	mov	r3, r0
   10080:	2b00      	cmp	r3, #0
   10082:	d002      	beq.n	1008a <Ftm_Pwm_Ip_GetOutputState+0x62>
    {
        OutputValue = FTM_PWM_IP_OUTPUT_STATE_HIGH;
   10084:	2301      	movs	r3, #1
   10086:	9303      	str	r3, [sp, #12]
   10088:	e001      	b.n	1008e <Ftm_Pwm_Ip_GetOutputState+0x66>
    }
    else
    {
        OutputValue = FTM_PWM_IP_OUTPUT_STATE_LOW;
   1008a:	2300      	movs	r3, #0
   1008c:	9303      	str	r3, [sp, #12]
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03();
   1008e:	f006 fe69 	bl	16d64 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03>

    return OutputValue;
   10092:	9b03      	ldr	r3, [sp, #12]
}
   10094:	4618      	mov	r0, r3
   10096:	b005      	add	sp, #20
   10098:	f85d fb04 	ldr.w	pc, [sp], #4
   1009c:	00019800 	.word	0x00019800

000100a0 <Ftm_Pwm_Ip_DisableNotification>:
 * Description   : This function disables the user notifications for the corresponding type of notification
 *
 * @implements Ftm_Pwm_Ip_DisableNotification_Activity
 **/
void Ftm_Pwm_Ip_DisableNotification(uint8 Instance, Ftm_Pwm_Ip_NotifType NotifType)
{
   100a0:	b500      	push	{lr}
   100a2:	b087      	sub	sp, #28
   100a4:	4603      	mov	r3, r0
   100a6:	9100      	str	r1, [sp, #0]
   100a8:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType *const FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   100ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
   100b0:	4a47      	ldr	r2, [pc, #284]	; (101d0 <Ftm_Pwm_Ip_DisableNotification+0x130>)
   100b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100b6:	9305      	str	r3, [sp, #20]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 PairChId;
    uint8 ChannelId = (uint8)NotifType;
   100b8:	9b00      	ldr	r3, [sp, #0]
   100ba:	f88d 3013 	strb.w	r3, [sp, #19]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   100be:	f89d 3007 	ldrb.w	r3, [sp, #7]
   100c2:	2b03      	cmp	r3, #3
   100c4:	bf94      	ite	ls
   100c6:	2301      	movls	r3, #1
   100c8:	2300      	movhi	r3, #0
   100ca:	b2db      	uxtb	r3, r3
   100cc:	4618      	mov	r0, r3
   100ce:	f7f0 fc09 	bl	8e4 <DevAssert>
    if((FTM_PWM_IP_OVERFLOW_NOTIFICATION     != NotifType)  &&
   100d2:	9b00      	ldr	r3, [sp, #0]
   100d4:	2b08      	cmp	r3, #8
   100d6:	d00f      	beq.n	100f8 <Ftm_Pwm_Ip_DisableNotification+0x58>
   100d8:	9b00      	ldr	r3, [sp, #0]
   100da:	2b09      	cmp	r3, #9
   100dc:	d00c      	beq.n	100f8 <Ftm_Pwm_Ip_DisableNotification+0x58>
       (FTM_PWM_IP_RELOAD_POINT_NOTIFICATION != NotifType)  &&
   100de:	9b00      	ldr	r3, [sp, #0]
   100e0:	2b0a      	cmp	r3, #10
   100e2:	d009      	beq.n	100f8 <Ftm_Pwm_Ip_DisableNotification+0x58>
       (FTM_PWM_IP_FAULT_NOTIFICATION        != NotifType))
    {
        DevAssert(ChannelId < (uint8)FTM_PWM_IP_CHANNEL_COUNT);
   100e4:	f89d 3013 	ldrb.w	r3, [sp, #19]
   100e8:	2b07      	cmp	r3, #7
   100ea:	bf94      	ite	ls
   100ec:	2301      	movls	r3, #1
   100ee:	2300      	movhi	r3, #0
   100f0:	b2db      	uxtb	r3, r3
   100f2:	4618      	mov	r0, r3
   100f4:	f7f0 fbf6 	bl	8e4 <DevAssert>
    }
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04();
   100f8:	f006 fe5a 	bl	16db0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04>

    if((FTM_PWM_IP_CHANNEL_0_NOTIFICATION == NotifType) ||
   100fc:	9b00      	ldr	r3, [sp, #0]
   100fe:	2b00      	cmp	r3, #0
   10100:	d014      	beq.n	1012c <Ftm_Pwm_Ip_DisableNotification+0x8c>
   10102:	9b00      	ldr	r3, [sp, #0]
   10104:	2b01      	cmp	r3, #1
   10106:	d011      	beq.n	1012c <Ftm_Pwm_Ip_DisableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_1_NOTIFICATION == NotifType) ||
   10108:	9b00      	ldr	r3, [sp, #0]
   1010a:	2b02      	cmp	r3, #2
   1010c:	d00e      	beq.n	1012c <Ftm_Pwm_Ip_DisableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_2_NOTIFICATION == NotifType) ||
   1010e:	9b00      	ldr	r3, [sp, #0]
   10110:	2b03      	cmp	r3, #3
   10112:	d00b      	beq.n	1012c <Ftm_Pwm_Ip_DisableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_3_NOTIFICATION == NotifType) ||
   10114:	9b00      	ldr	r3, [sp, #0]
   10116:	2b04      	cmp	r3, #4
   10118:	d008      	beq.n	1012c <Ftm_Pwm_Ip_DisableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_4_NOTIFICATION == NotifType) ||
   1011a:	9b00      	ldr	r3, [sp, #0]
   1011c:	2b05      	cmp	r3, #5
   1011e:	d005      	beq.n	1012c <Ftm_Pwm_Ip_DisableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_5_NOTIFICATION == NotifType) ||
   10120:	9b00      	ldr	r3, [sp, #0]
   10122:	2b06      	cmp	r3, #6
   10124:	d002      	beq.n	1012c <Ftm_Pwm_Ip_DisableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_6_NOTIFICATION == NotifType) ||
   10126:	9b00      	ldr	r3, [sp, #0]
   10128:	2b07      	cmp	r3, #7
   1012a:	d136      	bne.n	1019a <Ftm_Pwm_Ip_DisableNotification+0xfa>
       (FTM_PWM_IP_CHANNEL_7_NOTIFICATION == NotifType))
    {
        PairChId = (uint8)(ChannelId >> 1U);
   1012c:	f89d 3013 	ldrb.w	r3, [sp, #19]
   10130:	085b      	lsrs	r3, r3, #1
   10132:	f88d 3012 	strb.w	r3, [sp, #18]
        /* Get the mode of channels */
        ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, ChannelId);
   10136:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1013a:	4619      	mov	r1, r3
   1013c:	9805      	ldr	r0, [sp, #20]
   1013e:	f7fe f9ad 	bl	e49c <Ftm_Pwm_Ip_GetChannelMode>
   10142:	9003      	str	r0, [sp, #12]
#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
        /* Clear notification state of given channel */
        Ftm_Pwm_Ip_aNotifIrq[Instance][ChannelId] = FTM_PWM_IP_NO_EDGE;
#endif
        /* Disable interrupts for given channel */
        Ftm_Pwm_Ip_DisableCmpIrq(Instance, ChannelId);
   10144:	f89d 2013 	ldrb.w	r2, [sp, #19]
   10148:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1014c:	4611      	mov	r1, r2
   1014e:	4618      	mov	r0, r3
   10150:	f7fe fde2 	bl	ed18 <Ftm_Pwm_Ip_DisableCmpIrq>

        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
   10154:	9b03      	ldr	r3, [sp, #12]
   10156:	2b22      	cmp	r3, #34	; 0x22
   10158:	d008      	beq.n	1016c <Ftm_Pwm_Ip_DisableNotification+0xcc>
   1015a:	9b03      	ldr	r3, [sp, #12]
   1015c:	2b62      	cmp	r3, #98	; 0x62
   1015e:	d005      	beq.n	1016c <Ftm_Pwm_Ip_DisableNotification+0xcc>
    #if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
            ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
   10160:	9b03      	ldr	r3, [sp, #12]
   10162:	2b61      	cmp	r3, #97	; 0x61
   10164:	d002      	beq.n	1016c <Ftm_Pwm_Ip_DisableNotification+0xcc>
            ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
   10166:	9b03      	ldr	r3, [sp, #12]
   10168:	2b21      	cmp	r3, #33	; 0x21
   1016a:	d129      	bne.n	101c0 <Ftm_Pwm_Ip_DisableNotification+0x120>
            Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)(PairChId * 2U)] = FTM_PWM_IP_NO_EDGE;
            /* Clear notification state of an odd channel */
            Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)((PairChId * 2U) + 1U)] = FTM_PWM_IP_NO_EDGE;
#endif
            /* Disable interrupts for an even channel */
            Ftm_Pwm_Ip_DisableCmpIrq(Instance,(uint8)(PairChId * 2U));
   1016c:	f89d 3012 	ldrb.w	r3, [sp, #18]
   10170:	005b      	lsls	r3, r3, #1
   10172:	b2da      	uxtb	r2, r3
   10174:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10178:	4611      	mov	r1, r2
   1017a:	4618      	mov	r0, r3
   1017c:	f7fe fdcc 	bl	ed18 <Ftm_Pwm_Ip_DisableCmpIrq>
            /* Disable interrupts for an odd channel */
            Ftm_Pwm_Ip_DisableCmpIrq(Instance,(uint8)((PairChId * 2U) + 1U));
   10180:	f89d 3012 	ldrb.w	r3, [sp, #18]
   10184:	005b      	lsls	r3, r3, #1
   10186:	b2db      	uxtb	r3, r3
   10188:	3301      	adds	r3, #1
   1018a:	b2da      	uxtb	r2, r3
   1018c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10190:	4611      	mov	r1, r2
   10192:	4618      	mov	r0, r3
   10194:	f7fe fdc0 	bl	ed18 <Ftm_Pwm_Ip_DisableCmpIrq>
        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
   10198:	e012      	b.n	101c0 <Ftm_Pwm_Ip_DisableNotification+0x120>
        (void) PairChId;
        (void) ChannelId;
    }
#endif
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    else if(FTM_PWM_IP_FAULT_NOTIFICATION == NotifType)
   1019a:	9b00      	ldr	r3, [sp, #0]
   1019c:	2b0a      	cmp	r3, #10
   1019e:	d107      	bne.n	101b0 <Ftm_Pwm_Ip_DisableNotification+0x110>
    {
        /* Disable the generation of an interrupt when a fault is detected by FTM and the FTM fault control is enabled.*/
        Ftm_Pwm_Ip_SetFaultInterruptEnable(FtmBase, FALSE);
   101a0:	2100      	movs	r1, #0
   101a2:	9805      	ldr	r0, [sp, #20]
   101a4:	f7fe fb79 	bl	e89a <Ftm_Pwm_Ip_SetFaultInterruptEnable>

        /* Clear fault interrupt flag of a given FTM module */
        Ftm_Pwm_Ip_ClearFaultFlag(FtmBase);
   101a8:	9805      	ldr	r0, [sp, #20]
   101aa:	f7fe fb8c 	bl	e8c6 <Ftm_Pwm_Ip_ClearFaultFlag>
   101ae:	e008      	b.n	101c2 <Ftm_Pwm_Ip_DisableNotification+0x122>
    }
#endif
    else
    {
        /* Clear time-overflow interrupt flag of given module */
        Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
   101b0:	9805      	ldr	r0, [sp, #20]
   101b2:	f7fd faa4 	bl	d6fe <Ftm_Pwm_Ip_ClearTimerOverflow>

        /* Disable time-overflow interrupt */
        Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, FALSE);
   101b6:	2100      	movs	r1, #0
   101b8:	9805      	ldr	r0, [sp, #20]
   101ba:	f7fd fa89 	bl	d6d0 <Ftm_Pwm_Ip_SetTimerOverflowInt>
   101be:	e000      	b.n	101c2 <Ftm_Pwm_Ip_DisableNotification+0x122>
        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
   101c0:	bf00      	nop
        (void) ChMode;
        (void) PairChId;
        (void) ChannelId;
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04();
   101c2:	f006 fe21 	bl	16e08 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04>
}
   101c6:	bf00      	nop
   101c8:	b007      	add	sp, #28
   101ca:	f85d fb04 	ldr.w	pc, [sp], #4
   101ce:	bf00      	nop
   101d0:	00019800 	.word	0x00019800

000101d4 <Ftm_Pwm_Ip_SetNormalNotificationCase>:

static void Ftm_Pwm_Ip_SetNormalNotificationCase(uint8 Instance, uint8 Channel)
{
   101d4:	b500      	push	{lr}
   101d6:	b087      	sub	sp, #28
   101d8:	4603      	mov	r3, r0
   101da:	460a      	mov	r2, r1
   101dc:	f88d 3007 	strb.w	r3, [sp, #7]
   101e0:	4613      	mov	r3, r2
   101e2:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   101e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   101ea:	4a22      	ldr	r2, [pc, #136]	; (10274 <Ftm_Pwm_Ip_SetNormalNotificationCase+0xa0>)
   101ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101f0:	9305      	str	r3, [sp, #20]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 PairChId = (uint8)(Channel >> 1U);
   101f2:	f89d 3006 	ldrb.w	r3, [sp, #6]
   101f6:	085b      	lsrs	r3, r3, #1
   101f8:	f88d 3013 	strb.w	r3, [sp, #19]

    ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
   101fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
   10200:	4619      	mov	r1, r3
   10202:	9805      	ldr	r0, [sp, #20]
   10204:	f7fe f94a 	bl	e49c <Ftm_Pwm_Ip_GetChannelMode>
   10208:	9003      	str	r0, [sp, #12]
    }
    if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][Channel] & FTM_PWM_IP_CHF_IRQ_EDGE))
    {
#endif
        /* Enable match-compare interrupt */
        Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, TRUE);
   1020a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1020e:	2201      	movs	r2, #1
   10210:	4619      	mov	r1, r3
   10212:	9805      	ldr	r0, [sp, #20]
   10214:	f7fd fb74 	bl	d900 <Ftm_Pwm_Ip_UpdateChnInt>
    {
        Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, FALSE);
    }
#endif

    if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
   10218:	9b03      	ldr	r3, [sp, #12]
   1021a:	2b22      	cmp	r3, #34	; 0x22
   1021c:	d008      	beq.n	10230 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
   1021e:	9b03      	ldr	r3, [sp, #12]
   10220:	2b62      	cmp	r3, #98	; 0x62
   10222:	d005      	beq.n	10230 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
     ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
   10224:	9b03      	ldr	r3, [sp, #12]
   10226:	2b61      	cmp	r3, #97	; 0x61
   10228:	d002      	beq.n	10230 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
     ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
   1022a:	9b03      	ldr	r3, [sp, #12]
   1022c:	2b21      	cmp	r3, #33	; 0x21
   1022e:	d11d      	bne.n	1026c <Ftm_Pwm_Ip_SetNormalNotificationCase+0x98>
#endif
     ( FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))
    {
        /* Clear match-compare interrupt flag of given channel (n+1) */
        Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, ((PairChId * 2U) + 1U));
   10230:	f89d 3013 	ldrb.w	r3, [sp, #19]
   10234:	005b      	lsls	r3, r3, #1
   10236:	b2db      	uxtb	r3, r3
   10238:	3301      	adds	r3, #1
   1023a:	b2db      	uxtb	r3, r3
   1023c:	4619      	mov	r1, r3
   1023e:	9805      	ldr	r0, [sp, #20]
   10240:	f7fd fb81 	bl	d946 <Ftm_Pwm_Ip_ClearChnEventFlag>
#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
        /* Check the edge of interrupt with an even channel */
        if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)(PairChId * 2U)] & FTM_PWM_IP_CHF_IRQ_EDGE))
        {
#endif
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)(PairChId * 2U), TRUE);
   10244:	f89d 3013 	ldrb.w	r3, [sp, #19]
   10248:	005b      	lsls	r3, r3, #1
   1024a:	b2db      	uxtb	r3, r3
   1024c:	2201      	movs	r2, #1
   1024e:	4619      	mov	r1, r3
   10250:	9805      	ldr	r0, [sp, #20]
   10252:	f7fd fb55 	bl	d900 <Ftm_Pwm_Ip_UpdateChnInt>
        }
        /* Check the edge of interrupt with an odd channel */
        if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)((PairChId * 2U) + 1U)] & FTM_PWM_IP_CHF_IRQ_EDGE))
        {
#endif
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)((PairChId * 2U) + 1U), TRUE);
   10256:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1025a:	005b      	lsls	r3, r3, #1
   1025c:	b2db      	uxtb	r3, r3
   1025e:	3301      	adds	r3, #1
   10260:	b2db      	uxtb	r3, r3
   10262:	2201      	movs	r2, #1
   10264:	4619      	mov	r1, r3
   10266:	9805      	ldr	r0, [sp, #20]
   10268:	f7fd fb4a 	bl	d900 <Ftm_Pwm_Ip_UpdateChnInt>
        {
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)((PairChId * 2U) + 1U), FALSE);
        }
#endif
    }
}
   1026c:	bf00      	nop
   1026e:	b007      	add	sp, #28
   10270:	f85d fb04 	ldr.w	pc, [sp], #4
   10274:	00019800 	.word	0x00019800

00010278 <Ftm_Pwm_Ip_EnableNotification>:
 *
 * @implements Ftm_Pwm_Ip_EnableNotification_Activity
 **/
void Ftm_Pwm_Ip_EnableNotification(uint8 Instance,
                                   Ftm_Pwm_Ip_NotifType NotifType)
{
   10278:	b500      	push	{lr}
   1027a:	b085      	sub	sp, #20
   1027c:	4603      	mov	r3, r0
   1027e:	9100      	str	r1, [sp, #0]
   10280:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   10284:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10288:	4a32      	ldr	r2, [pc, #200]	; (10354 <Ftm_Pwm_Ip_EnableNotification+0xdc>)
   1028a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1028e:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = (uint8)NotifType;
   10290:	9b00      	ldr	r3, [sp, #0]
   10292:	f88d 300b 	strb.w	r3, [sp, #11]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   10296:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1029a:	2b03      	cmp	r3, #3
   1029c:	bf94      	ite	ls
   1029e:	2301      	movls	r3, #1
   102a0:	2300      	movhi	r3, #0
   102a2:	b2db      	uxtb	r3, r3
   102a4:	4618      	mov	r0, r3
   102a6:	f7f0 fb1d 	bl	8e4 <DevAssert>
    if((FTM_PWM_IP_OVERFLOW_NOTIFICATION     != NotifType)  &&
   102aa:	9b00      	ldr	r3, [sp, #0]
   102ac:	2b08      	cmp	r3, #8
   102ae:	d00f      	beq.n	102d0 <Ftm_Pwm_Ip_EnableNotification+0x58>
   102b0:	9b00      	ldr	r3, [sp, #0]
   102b2:	2b09      	cmp	r3, #9
   102b4:	d00c      	beq.n	102d0 <Ftm_Pwm_Ip_EnableNotification+0x58>
       (FTM_PWM_IP_RELOAD_POINT_NOTIFICATION != NotifType)  &&
   102b6:	9b00      	ldr	r3, [sp, #0]
   102b8:	2b0a      	cmp	r3, #10
   102ba:	d009      	beq.n	102d0 <Ftm_Pwm_Ip_EnableNotification+0x58>
       (FTM_PWM_IP_FAULT_NOTIFICATION        != NotifType))
    {
        DevAssert(ChannelId < (uint8)FTM_PWM_IP_CHANNEL_COUNT);
   102bc:	f89d 300b 	ldrb.w	r3, [sp, #11]
   102c0:	2b07      	cmp	r3, #7
   102c2:	bf94      	ite	ls
   102c4:	2301      	movls	r3, #1
   102c6:	2300      	movhi	r3, #0
   102c8:	b2db      	uxtb	r3, r3
   102ca:	4618      	mov	r0, r3
   102cc:	f7f0 fb0a 	bl	8e4 <DevAssert>
    }
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05();
   102d0:	f006 fdc0 	bl	16e54 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05>
    
    if((FTM_PWM_IP_CHANNEL_0_NOTIFICATION == NotifType) ||
   102d4:	9b00      	ldr	r3, [sp, #0]
   102d6:	2b00      	cmp	r3, #0
   102d8:	d014      	beq.n	10304 <Ftm_Pwm_Ip_EnableNotification+0x8c>
   102da:	9b00      	ldr	r3, [sp, #0]
   102dc:	2b01      	cmp	r3, #1
   102de:	d011      	beq.n	10304 <Ftm_Pwm_Ip_EnableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_1_NOTIFICATION == NotifType) ||
   102e0:	9b00      	ldr	r3, [sp, #0]
   102e2:	2b02      	cmp	r3, #2
   102e4:	d00e      	beq.n	10304 <Ftm_Pwm_Ip_EnableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_2_NOTIFICATION == NotifType) ||
   102e6:	9b00      	ldr	r3, [sp, #0]
   102e8:	2b03      	cmp	r3, #3
   102ea:	d00b      	beq.n	10304 <Ftm_Pwm_Ip_EnableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_3_NOTIFICATION == NotifType) ||
   102ec:	9b00      	ldr	r3, [sp, #0]
   102ee:	2b04      	cmp	r3, #4
   102f0:	d008      	beq.n	10304 <Ftm_Pwm_Ip_EnableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_4_NOTIFICATION == NotifType) ||
   102f2:	9b00      	ldr	r3, [sp, #0]
   102f4:	2b05      	cmp	r3, #5
   102f6:	d005      	beq.n	10304 <Ftm_Pwm_Ip_EnableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_5_NOTIFICATION == NotifType) ||
   102f8:	9b00      	ldr	r3, [sp, #0]
   102fa:	2b06      	cmp	r3, #6
   102fc:	d002      	beq.n	10304 <Ftm_Pwm_Ip_EnableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_6_NOTIFICATION == NotifType) ||
   102fe:	9b00      	ldr	r3, [sp, #0]
   10300:	2b07      	cmp	r3, #7
   10302:	d10e      	bne.n	10322 <Ftm_Pwm_Ip_EnableNotification+0xaa>
       (FTM_PWM_IP_CHANNEL_7_NOTIFICATION == NotifType))
    {
        /* Clear match-compare interrupt flag of given channel */
        Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, ChannelId);
   10304:	f89d 300b 	ldrb.w	r3, [sp, #11]
   10308:	4619      	mov	r1, r3
   1030a:	9803      	ldr	r0, [sp, #12]
   1030c:	f7fd fb1b 	bl	d946 <Ftm_Pwm_Ip_ClearChnEventFlag>
        /* If duty cycle is not 0% and 100% */
        if ((0U != Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId]) &&
            (Ftm_Pwm_Ip_aPeriod[Instance] != Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId]))
        {
#endif
            Ftm_Pwm_Ip_SetNormalNotificationCase(Instance, ChannelId);
   10310:	f89d 200b 	ldrb.w	r2, [sp, #11]
   10314:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10318:	4611      	mov	r1, r2
   1031a:	4618      	mov	r0, r3
   1031c:	f7ff ff5a 	bl	101d4 <Ftm_Pwm_Ip_SetNormalNotificationCase>
   10320:	e011      	b.n	10346 <Ftm_Pwm_Ip_EnableNotification+0xce>
        /* Avoid compiler warning */
        (void) ChannelId;
    }
#endif
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    else if(FTM_PWM_IP_FAULT_NOTIFICATION == NotifType)
   10322:	9b00      	ldr	r3, [sp, #0]
   10324:	2b0a      	cmp	r3, #10
   10326:	d107      	bne.n	10338 <Ftm_Pwm_Ip_EnableNotification+0xc0>
    {
        /* Clear fault interrupt flag of a given FTM module */
        Ftm_Pwm_Ip_ClearFaultFlag(FtmBase);
   10328:	9803      	ldr	r0, [sp, #12]
   1032a:	f7fe facc 	bl	e8c6 <Ftm_Pwm_Ip_ClearFaultFlag>

        /* Enables the generation of an interrupt when a fault is detected by FTM and the FTM fault control is enabled.*/
        Ftm_Pwm_Ip_SetFaultInterruptEnable(FtmBase, TRUE);
   1032e:	2101      	movs	r1, #1
   10330:	9803      	ldr	r0, [sp, #12]
   10332:	f7fe fab2 	bl	e89a <Ftm_Pwm_Ip_SetFaultInterruptEnable>
   10336:	e006      	b.n	10346 <Ftm_Pwm_Ip_EnableNotification+0xce>
    }
#endif
    else
    {
        /* Clear time-overflow interrupt flag of given channel */
        Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
   10338:	9803      	ldr	r0, [sp, #12]
   1033a:	f7fd f9e0 	bl	d6fe <Ftm_Pwm_Ip_ClearTimerOverflow>

        /* Enable time-overflow interrupt */
        Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, TRUE);
   1033e:	2101      	movs	r1, #1
   10340:	9803      	ldr	r0, [sp, #12]
   10342:	f7fd f9c5 	bl	d6d0 <Ftm_Pwm_Ip_SetTimerOverflowInt>
        
        /* Avoid compiler warning */
        (void) ChannelId;
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05();
   10346:	f006 fdb1 	bl	16eac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05>
}
   1034a:	bf00      	nop
   1034c:	b005      	add	sp, #20
   1034e:	f85d fb04 	ldr.w	pc, [sp], #4
   10352:	bf00      	nop
   10354:	00019800 	.word	0x00019800

00010358 <Ftm_Pwm_Ip_SetPowerState>:
 *
 * @implements Ftm_Pwm_Ip_SetPowerState_Activity
 **/
void Ftm_Pwm_Ip_SetPowerState(uint8 Instance,
                              Ftm_Pwm_Ip_PowerStateType PowerState)
{
   10358:	b500      	push	{lr}
   1035a:	b085      	sub	sp, #20
   1035c:	4603      	mov	r3, r0
   1035e:	9100      	str	r1, [sp, #0]
   10360:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   10364:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10368:	4a11      	ldr	r2, [pc, #68]	; (103b0 <Ftm_Pwm_Ip_SetPowerState+0x58>)
   1036a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1036e:	9303      	str	r3, [sp, #12]
    
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   10370:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10374:	2b03      	cmp	r3, #3
   10376:	bf94      	ite	ls
   10378:	2301      	movls	r3, #1
   1037a:	2300      	movhi	r3, #0
   1037c:	b2db      	uxtb	r3, r3
   1037e:	4618      	mov	r0, r3
   10380:	f7f0 fab0 	bl	8e4 <DevAssert>
#endif

    if (FTM_PWM_IP_LOW_POWER == PowerState)
   10384:	9b00      	ldr	r3, [sp, #0]
   10386:	2b01      	cmp	r3, #1
   10388:	d104      	bne.n	10394 <Ftm_Pwm_Ip_SetPowerState+0x3c>
    {
        /* Disable counter clock */
        Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
   1038a:	2100      	movs	r1, #0
   1038c:	9803      	ldr	r0, [sp, #12]
   1038e:	f7fd f96a 	bl	d666 <Ftm_Pwm_Ip_SetClockSource>
    }
    else
    {
        Ftm_Pwm_Ip_SetClockSource(FtmBase, Ftm_Pwm_Ip_aClockSource[Instance]);
    }
}
   10392:	e008      	b.n	103a6 <Ftm_Pwm_Ip_SetPowerState+0x4e>
        Ftm_Pwm_Ip_SetClockSource(FtmBase, Ftm_Pwm_Ip_aClockSource[Instance]);
   10394:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10398:	4a06      	ldr	r2, [pc, #24]	; (103b4 <Ftm_Pwm_Ip_SetPowerState+0x5c>)
   1039a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1039e:	4619      	mov	r1, r3
   103a0:	9803      	ldr	r0, [sp, #12]
   103a2:	f7fd f960 	bl	d666 <Ftm_Pwm_Ip_SetClockSource>
}
   103a6:	bf00      	nop
   103a8:	b005      	add	sp, #20
   103aa:	f85d fb04 	ldr.w	pc, [sp], #4
   103ae:	bf00      	nop
   103b0:	00019800 	.word	0x00019800
   103b4:	1fff9124 	.word	0x1fff9124

000103b8 <Ftm_Pwm_Ip_SetClockMode>:
 *
 * @implements Ftm_Pwm_Ip_SetClockMode_Activity
 **/
void Ftm_Pwm_Ip_SetClockMode(uint8 Instance,
                             Ftm_Pwm_Ip_PrescalerType Prescaler)
{
   103b8:	b500      	push	{lr}
   103ba:	b085      	sub	sp, #20
   103bc:	4603      	mov	r3, r0
   103be:	9100      	str	r1, [sp, #0]
   103c0:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   103c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   103c8:	4a13      	ldr	r2, [pc, #76]	; (10418 <Ftm_Pwm_Ip_SetClockMode+0x60>)
   103ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103ce:	9303      	str	r3, [sp, #12]
    
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   103d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   103d4:	2b03      	cmp	r3, #3
   103d6:	bf94      	ite	ls
   103d8:	2301      	movls	r3, #1
   103da:	2300      	movhi	r3, #0
   103dc:	b2db      	uxtb	r3, r3
   103de:	4618      	mov	r0, r3
   103e0:	f7f0 fa80 	bl	8e4 <DevAssert>
#endif

    if (FTM_PWM_IP_ALTERNATIVE_PRESCALER == Prescaler)
   103e4:	9b00      	ldr	r3, [sp, #0]
   103e6:	2b01      	cmp	r3, #1
   103e8:	d109      	bne.n	103fe <Ftm_Pwm_Ip_SetClockMode+0x46>
    {
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aAlternateClockPrescaler[Instance]);
   103ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
   103ee:	4a0b      	ldr	r2, [pc, #44]	; (1041c <Ftm_Pwm_Ip_SetClockMode+0x64>)
   103f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103f4:	4619      	mov	r1, r3
   103f6:	9803      	ldr	r0, [sp, #12]
   103f8:	f7fd f91a 	bl	d630 <Ftm_Pwm_Ip_SetClockPs>
    }
    else
    {
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aClockPrescaler[Instance]);
    }
}
   103fc:	e008      	b.n	10410 <Ftm_Pwm_Ip_SetClockMode+0x58>
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aClockPrescaler[Instance]);
   103fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10402:	4a07      	ldr	r2, [pc, #28]	; (10420 <Ftm_Pwm_Ip_SetClockMode+0x68>)
   10404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10408:	4619      	mov	r1, r3
   1040a:	9803      	ldr	r0, [sp, #12]
   1040c:	f7fd f910 	bl	d630 <Ftm_Pwm_Ip_SetClockPs>
}
   10410:	bf00      	nop
   10412:	b005      	add	sp, #20
   10414:	f85d fb04 	ldr.w	pc, [sp], #4
   10418:	00019800 	.word	0x00019800
   1041c:	1fff9144 	.word	0x1fff9144
   10420:	1fff9134 	.word	0x1fff9134

00010424 <Ftm_Pwm_Ip_ResetCounter>:
 *
 * @implements Ftm_Pwm_Ip_ResetCounter_Activity
 **/
void Ftm_Pwm_Ip_ResetCounter(uint8 Instance,
                             boolean IsResetCnt)
{
   10424:	b500      	push	{lr}
   10426:	b085      	sub	sp, #20
   10428:	4603      	mov	r3, r0
   1042a:	460a      	mov	r2, r1
   1042c:	f88d 3007 	strb.w	r3, [sp, #7]
   10430:	4613      	mov	r3, r2
   10432:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   10436:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1043a:	4a0c      	ldr	r2, [pc, #48]	; (1046c <Ftm_Pwm_Ip_ResetCounter+0x48>)
   1043c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10440:	9303      	str	r3, [sp, #12]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   10442:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10446:	2b03      	cmp	r3, #3
   10448:	bf94      	ite	ls
   1044a:	2301      	movls	r3, #1
   1044c:	2300      	movhi	r3, #0
   1044e:	b2db      	uxtb	r3, r3
   10450:	4618      	mov	r0, r3
   10452:	f7f0 fa47 	bl	8e4 <DevAssert>
#endif

    Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, IsResetCnt);
   10456:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1045a:	4619      	mov	r1, r3
   1045c:	9803      	ldr	r0, [sp, #12]
   1045e:	f7fd fe1a 	bl	e096 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>

}
   10462:	bf00      	nop
   10464:	b005      	add	sp, #20
   10466:	f85d fb04 	ldr.w	pc, [sp], #4
   1046a:	bf00      	nop
   1046c:	00019800 	.word	0x00019800

00010470 <Ftm_Pwm_Ip_GetChannelState>:
 * Description   : The function shall return the duty cycle value of the selected channel.
 *
 * @implements  Ftm_Pwm_Ip_GetChannelState_Activity
 **/
uint16 Ftm_Pwm_Ip_GetChannelState(uint8 Instance, uint8 Channel)
{
   10470:	b500      	push	{lr}
   10472:	b085      	sub	sp, #20
   10474:	4603      	mov	r3, r0
   10476:	460a      	mov	r2, r1
   10478:	f88d 3007 	strb.w	r3, [sp, #7]
   1047c:	4613      	mov	r3, r2
   1047e:	f88d 3006 	strb.w	r3, [sp, #6]
    uint16 DutyCycle;

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   10482:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10486:	2b03      	cmp	r3, #3
   10488:	bf94      	ite	ls
   1048a:	2301      	movls	r3, #1
   1048c:	2300      	movhi	r3, #0
   1048e:	b2db      	uxtb	r3, r3
   10490:	4618      	mov	r0, r3
   10492:	f7f0 fa27 	bl	8e4 <DevAssert>
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
   10496:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1049a:	2b07      	cmp	r3, #7
   1049c:	bf94      	ite	ls
   1049e:	2301      	movls	r3, #1
   104a0:	2300      	movhi	r3, #0
   104a2:	b2db      	uxtb	r3, r3
   104a4:	4618      	mov	r0, r3
   104a6:	f7f0 fa1d 	bl	8e4 <DevAssert>
#endif
    DutyCycle = Ftm_Pwm_Ip_aDutyCycle[Instance][Channel];
   104aa:	f89d 2007 	ldrb.w	r2, [sp, #7]
   104ae:	f89d 3006 	ldrb.w	r3, [sp, #6]
   104b2:	4906      	ldr	r1, [pc, #24]	; (104cc <Ftm_Pwm_Ip_GetChannelState+0x5c>)
   104b4:	00d2      	lsls	r2, r2, #3
   104b6:	4413      	add	r3, r2
   104b8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   104bc:	f8ad 300e 	strh.w	r3, [sp, #14]

    return DutyCycle;
   104c0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
   104c4:	4618      	mov	r0, r3
   104c6:	b005      	add	sp, #20
   104c8:	f85d fb04 	ldr.w	pc, [sp], #4
   104cc:	1fff8e34 	.word	0x1fff8e34

000104d0 <Ftm_Pwm_Ip_FastUpdatePwmDuty>:
void Ftm_Pwm_Ip_FastUpdatePwmDuty(uint8 Instance,
                                  uint8 NumberOfChannels,
                                  const uint8 * Channels,
                                  const uint16 * Duty,
                                  boolean SoftwareTrigger)
{
   104d0:	b500      	push	{lr}
   104d2:	b087      	sub	sp, #28
   104d4:	9202      	str	r2, [sp, #8]
   104d6:	9301      	str	r3, [sp, #4]
   104d8:	4603      	mov	r3, r0
   104da:	f88d 300f 	strb.w	r3, [sp, #15]
   104de:	460b      	mov	r3, r1
   104e0:	f88d 300e 	strb.w	r3, [sp, #14]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   104e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   104e8:	4a29      	ldr	r2, [pc, #164]	; (10590 <Ftm_Pwm_Ip_FastUpdatePwmDuty+0xc0>)
   104ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104ee:	9304      	str	r3, [sp, #16]
    uint8 Index;

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   104f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   104f4:	2b03      	cmp	r3, #3
   104f6:	bf94      	ite	ls
   104f8:	2301      	movls	r3, #1
   104fa:	2300      	movhi	r3, #0
   104fc:	b2db      	uxtb	r3, r3
   104fe:	4618      	mov	r0, r3
   10500:	f7f0 f9f0 	bl	8e4 <DevAssert>
    DevAssert(NumberOfChannels <= FTM_PWM_IP_CHANNEL_COUNT);
   10504:	f89d 300e 	ldrb.w	r3, [sp, #14]
   10508:	2b08      	cmp	r3, #8
   1050a:	bf94      	ite	ls
   1050c:	2301      	movls	r3, #1
   1050e:	2300      	movhi	r3, #0
   10510:	b2db      	uxtb	r3, r3
   10512:	4618      	mov	r0, r3
   10514:	f7f0 f9e6 	bl	8e4 <DevAssert>
#endif
    for (Index = 0U; Index < NumberOfChannels; Index++)
   10518:	2300      	movs	r3, #0
   1051a:	f88d 3017 	strb.w	r3, [sp, #23]
   1051e:	e026      	b.n	1056e <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x9e>
    {
        Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channels[Index], Duty[Index]);
   10520:	f89d 3017 	ldrb.w	r3, [sp, #23]
   10524:	9a02      	ldr	r2, [sp, #8]
   10526:	4413      	add	r3, r2
   10528:	7819      	ldrb	r1, [r3, #0]
   1052a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1052e:	005b      	lsls	r3, r3, #1
   10530:	9a01      	ldr	r2, [sp, #4]
   10532:	4413      	add	r3, r2
   10534:	881b      	ldrh	r3, [r3, #0]
   10536:	461a      	mov	r2, r3
   10538:	9804      	ldr	r0, [sp, #16]
   1053a:	f7fd fa32 	bl	d9a2 <Ftm_Pwm_Ip_SetChnCountVal>
        Ftm_Pwm_Ip_aDutyCycle[Instance][Channels[Index]] = Duty[Index];
   1053e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   10542:	005b      	lsls	r3, r3, #1
   10544:	9a01      	ldr	r2, [sp, #4]
   10546:	441a      	add	r2, r3
   10548:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1054c:	f89d 1017 	ldrb.w	r1, [sp, #23]
   10550:	9802      	ldr	r0, [sp, #8]
   10552:	4401      	add	r1, r0
   10554:	7809      	ldrb	r1, [r1, #0]
   10556:	4608      	mov	r0, r1
   10558:	8811      	ldrh	r1, [r2, #0]
   1055a:	4a0e      	ldr	r2, [pc, #56]	; (10594 <Ftm_Pwm_Ip_FastUpdatePwmDuty+0xc4>)
   1055c:	00db      	lsls	r3, r3, #3
   1055e:	4403      	add	r3, r0
   10560:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (Index = 0U; Index < NumberOfChannels; Index++)
   10564:	f89d 3017 	ldrb.w	r3, [sp, #23]
   10568:	3301      	adds	r3, #1
   1056a:	f88d 3017 	strb.w	r3, [sp, #23]
   1056e:	f89d 2017 	ldrb.w	r2, [sp, #23]
   10572:	f89d 300e 	ldrb.w	r3, [sp, #14]
   10576:	429a      	cmp	r2, r3
   10578:	d3d2      	bcc.n	10520 <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x50>
    }

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
   1057a:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1057e:	4619      	mov	r1, r3
   10580:	9804      	ldr	r0, [sp, #16]
   10582:	f7fd fad6 	bl	db32 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
   10586:	bf00      	nop
   10588:	b007      	add	sp, #28
   1058a:	f85d fb04 	ldr.w	pc, [sp], #4
   1058e:	bf00      	nop
   10590:	00019800 	.word	0x00019800
   10594:	1fff8e34 	.word	0x1fff8e34

00010598 <Ftm_Pwm_Ip_MaskOutputChannels>:
 * @implements Ftm_Pwm_Ip_MaskOutputChannels_Activity
 */
void Ftm_Pwm_Ip_MaskOutputChannels(uint8 Instance,
                                   uint32 ChannelsMask,
                                   boolean SoftwareTrigger)
{
   10598:	b500      	push	{lr}
   1059a:	b085      	sub	sp, #20
   1059c:	4603      	mov	r3, r0
   1059e:	9100      	str	r1, [sp, #0]
   105a0:	f88d 3007 	strb.w	r3, [sp, #7]
   105a4:	4613      	mov	r3, r2
   105a6:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   105aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   105ae:	4a10      	ldr	r2, [pc, #64]	; (105f0 <Ftm_Pwm_Ip_MaskOutputChannels+0x58>)
   105b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105b4:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   105b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   105ba:	2b03      	cmp	r3, #3
   105bc:	bf94      	ite	ls
   105be:	2301      	movls	r3, #1
   105c0:	2300      	movhi	r3, #0
   105c2:	b2db      	uxtb	r3, r3
   105c4:	4618      	mov	r0, r3
   105c6:	f7f0 f98d 	bl	8e4 <DevAssert>
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07();
   105ca:	f006 fce7 	bl	16f9c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07>

    Ftm_Pwm_Ip_SetOutmaskReg(FtmBase, ChannelsMask);
   105ce:	9900      	ldr	r1, [sp, #0]
   105d0:	9803      	ldr	r0, [sp, #12]
   105d2:	f7fd fb0b 	bl	dbec <Ftm_Pwm_Ip_SetOutmaskReg>
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
   105d6:	f89d 3006 	ldrb.w	r3, [sp, #6]
   105da:	4619      	mov	r1, r3
   105dc:	9803      	ldr	r0, [sp, #12]
   105de:	f7fd faa8 	bl	db32 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07();
   105e2:	f006 fd07 	bl	16ff4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07>
}
   105e6:	bf00      	nop
   105e8:	b005      	add	sp, #20
   105ea:	f85d fb04 	ldr.w	pc, [sp], #4
   105ee:	bf00      	nop
   105f0:	00019800 	.word	0x00019800

000105f4 <Ftm_Pwm_Ip_UnMaskOutputChannels>:
 * @implements Ftm_Pwm_Ip_UnMaskOutputChannels_Activity
 **/
void Ftm_Pwm_Ip_UnMaskOutputChannels(uint8 Instance,
                                     uint32 ChannelsMask,
                                     boolean SoftwareTrigger)
{
   105f4:	b500      	push	{lr}
   105f6:	b085      	sub	sp, #20
   105f8:	4603      	mov	r3, r0
   105fa:	9100      	str	r1, [sp, #0]
   105fc:	f88d 3007 	strb.w	r3, [sp, #7]
   10600:	4613      	mov	r3, r2
   10602:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   10606:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1060a:	4a10      	ldr	r2, [pc, #64]	; (1064c <Ftm_Pwm_Ip_UnMaskOutputChannels+0x58>)
   1060c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10610:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   10612:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10616:	2b03      	cmp	r3, #3
   10618:	bf94      	ite	ls
   1061a:	2301      	movls	r3, #1
   1061c:	2300      	movhi	r3, #0
   1061e:	b2db      	uxtb	r3, r3
   10620:	4618      	mov	r0, r3
   10622:	f7f0 f95f 	bl	8e4 <DevAssert>
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08();
   10626:	f006 fd0b 	bl	17040 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08>

    Ftm_Pwm_Ip_ClearOutmaskReg(FtmBase, ChannelsMask);
   1062a:	9900      	ldr	r1, [sp, #0]
   1062c:	9803      	ldr	r0, [sp, #12]
   1062e:	f7fd faec 	bl	dc0a <Ftm_Pwm_Ip_ClearOutmaskReg>
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
   10632:	f89d 3006 	ldrb.w	r3, [sp, #6]
   10636:	4619      	mov	r1, r3
   10638:	9803      	ldr	r0, [sp, #12]
   1063a:	f7fd fa7a 	bl	db32 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08();
   1063e:	f006 fd2b 	bl	17098 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08>
}
   10642:	bf00      	nop
   10644:	b005      	add	sp, #20
   10646:	f85d fb04 	ldr.w	pc, [sp], #4
   1064a:	bf00      	nop
   1064c:	00019800 	.word	0x00019800

00010650 <Ftm_Pwm_Ip_SetPhaseShift>:
void Ftm_Pwm_Ip_SetPhaseShift(uint8 Instance,
                              uint8 Channel,
                              uint16 Period,
                              uint16 PhaseShift,
                              boolean SoftwareTrigger)
{
   10650:	b510      	push	{r4, lr}
   10652:	b088      	sub	sp, #32
   10654:	4604      	mov	r4, r0
   10656:	4608      	mov	r0, r1
   10658:	4611      	mov	r1, r2
   1065a:	461a      	mov	r2, r3
   1065c:	4623      	mov	r3, r4
   1065e:	f88d 3007 	strb.w	r3, [sp, #7]
   10662:	4603      	mov	r3, r0
   10664:	f88d 3006 	strb.w	r3, [sp, #6]
   10668:	460b      	mov	r3, r1
   1066a:	f8ad 3004 	strh.w	r3, [sp, #4]
   1066e:	4613      	mov	r3, r2
   10670:	f8ad 3002 	strh.w	r3, [sp, #2]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   10674:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10678:	4a59      	ldr	r2, [pc, #356]	; (107e0 <Ftm_Pwm_Ip_SetPhaseShift+0x190>)
   1067a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1067e:	9306      	str	r3, [sp, #24]
    uint8 PairChId;
    uint16 DutyCycleVal;
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint16  CnVValue = 0U;
   10680:	2300      	movs	r3, #0
   10682:	f8ad 3016 	strh.w	r3, [sp, #22]
    boolean CheckChMode = TRUE;
   10686:	2301      	movs	r3, #1
   10688:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean RetVal = TRUE;
   1068c:	2301      	movs	r3, #1
   1068e:	f88d 301e 	strb.w	r3, [sp, #30]

    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   10692:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10696:	2b03      	cmp	r3, #3
   10698:	bf94      	ite	ls
   1069a:	2301      	movls	r3, #1
   1069c:	2300      	movhi	r3, #0
   1069e:	b2db      	uxtb	r3, r3
   106a0:	4618      	mov	r0, r3
   106a2:	f7f0 f91f 	bl	8e4 <DevAssert>
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
   106a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
   106aa:	2b07      	cmp	r3, #7
   106ac:	bf94      	ite	ls
   106ae:	2301      	movls	r3, #1
   106b0:	2300      	movhi	r3, #0
   106b2:	b2db      	uxtb	r3, r3
   106b4:	4618      	mov	r0, r3
   106b6:	f7f0 f915 	bl	8e4 <DevAssert>
    
    ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
   106ba:	f89d 3006 	ldrb.w	r3, [sp, #6]
   106be:	4619      	mov	r1, r3
   106c0:	9806      	ldr	r0, [sp, #24]
   106c2:	f7fd feeb 	bl	e49c <Ftm_Pwm_Ip_GetChannelMode>
   106c6:	9004      	str	r0, [sp, #16]
    
    if (( FTM_PWM_IP_MODE_COMBINE_HIGH          != ChMode) &&
   106c8:	9b04      	ldr	r3, [sp, #16]
   106ca:	2b22      	cmp	r3, #34	; 0x22
   106cc:	d00b      	beq.n	106e6 <Ftm_Pwm_Ip_SetPhaseShift+0x96>
   106ce:	9b04      	ldr	r3, [sp, #16]
   106d0:	2b62      	cmp	r3, #98	; 0x62
   106d2:	d008      	beq.n	106e6 <Ftm_Pwm_Ip_SetPhaseShift+0x96>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH != ChMode) &&
   106d4:	9b04      	ldr	r3, [sp, #16]
   106d6:	2b61      	cmp	r3, #97	; 0x61
   106d8:	d005      	beq.n	106e6 <Ftm_Pwm_Ip_SetPhaseShift+0x96>
        ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  != ChMode) &&
   106da:	9b04      	ldr	r3, [sp, #16]
   106dc:	2b21      	cmp	r3, #33	; 0x21
   106de:	d002      	beq.n	106e6 <Ftm_Pwm_Ip_SetPhaseShift+0x96>
#endif
        ( FTM_PWM_IP_MODE_COMBINE_LOW           != ChMode))
    {
        CheckChMode = FALSE;
   106e0:	2300      	movs	r3, #0
   106e2:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    DevAssert(CheckChMode != FALSE);
   106e6:	f89d 301f 	ldrb.w	r3, [sp, #31]
   106ea:	4618      	mov	r0, r3
   106ec:	f7f0 f8fa 	bl	8e4 <DevAssert>
    
    CnVValue = PhaseShift + (uint16)(Period >> 1U);
   106f0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   106f4:	085b      	lsrs	r3, r3, #1
   106f6:	b29a      	uxth	r2, r3
   106f8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   106fc:	4413      	add	r3, r2
   106fe:	f8ad 3016 	strh.w	r3, [sp, #22]
    if ((CnVValue <= PhaseShift) || (Period <= CnVValue))
   10702:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   10706:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1070a:	429a      	cmp	r2, r3
   1070c:	d905      	bls.n	1071a <Ftm_Pwm_Ip_SetPhaseShift+0xca>
   1070e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   10712:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   10716:	429a      	cmp	r2, r3
   10718:	d802      	bhi.n	10720 <Ftm_Pwm_Ip_SetPhaseShift+0xd0>
    {
        RetVal = FALSE;
   1071a:	2300      	movs	r3, #0
   1071c:	f88d 301e 	strb.w	r3, [sp, #30]
    }
    DevAssert(RetVal != FALSE);
   10720:	f89d 301e 	ldrb.w	r3, [sp, #30]
   10724:	4618      	mov	r0, r3
   10726:	f7f0 f8dd 	bl	8e4 <DevAssert>
#endif
    PairChId = Channel >> 1U;
   1072a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1072e:	085b      	lsrs	r3, r3, #1
   10730:	f88d 300f 	strb.w	r3, [sp, #15]
    Ftm_Pwm_Ip_aPeriod[Instance] = Period;
   10734:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10738:	492a      	ldr	r1, [pc, #168]	; (107e4 <Ftm_Pwm_Ip_SetPhaseShift+0x194>)
   1073a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1073e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09();
   10742:	f006 fccf 	bl	170e4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09>

    if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
   10746:	9806      	ldr	r0, [sp, #24]
   10748:	f7fc ffb4 	bl	d6b4 <Ftm_Pwm_Ip_GetCpwms>
   1074c:	4603      	mov	r3, r0
   1074e:	2b01      	cmp	r3, #1
   10750:	d108      	bne.n	10764 <Ftm_Pwm_Ip_SetPhaseShift+0x114>
    {
        /* For Center Aligned mode MOD register should be divided by 2. Period is 2 * (MOD − CNTIN) */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(Period >> 1U));
   10752:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   10756:	085b      	lsrs	r3, r3, #1
   10758:	b29b      	uxth	r3, r3
   1075a:	4619      	mov	r1, r3
   1075c:	9806      	ldr	r0, [sp, #24]
   1075e:	f7fc fffc 	bl	d75a <Ftm_Pwm_Ip_SetMod>
   10762:	e007      	b.n	10774 <Ftm_Pwm_Ip_SetPhaseShift+0x124>
    }
    else
    {
        /* For Edge Aligned mode period is determined by: MOD-CNTIN+1 */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(Period - 1U));
   10764:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   10768:	3b01      	subs	r3, #1
   1076a:	b29b      	uxth	r3, r3
   1076c:	4619      	mov	r1, r3
   1076e:	9806      	ldr	r0, [sp, #24]
   10770:	f7fc fff3 	bl	d75a <Ftm_Pwm_Ip_SetMod>
    }

    Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)(PairChId * 2U), PhaseShift);
   10774:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10778:	005b      	lsls	r3, r3, #1
   1077a:	b2db      	uxtb	r3, r3
   1077c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   10780:	4619      	mov	r1, r3
   10782:	9806      	ldr	r0, [sp, #24]
   10784:	f7fd f90d 	bl	d9a2 <Ftm_Pwm_Ip_SetChnCountVal>

    /* Fix duty cycle to 50% */
    DutyCycleVal = (uint16)(Period >> 1U);
   10788:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1078c:	085b      	lsrs	r3, r3, #1
   1078e:	f8ad 300c 	strh.w	r3, [sp, #12]
    
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycleVal;
   10792:	f89d 2007 	ldrb.w	r2, [sp, #7]
   10796:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1079a:	4913      	ldr	r1, [pc, #76]	; (107e8 <Ftm_Pwm_Ip_SetPhaseShift+0x198>)
   1079c:	00d2      	lsls	r2, r2, #3
   1079e:	4413      	add	r3, r2
   107a0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   107a4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    /* Write C(n+1)V register */
    Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)((PairChId * 2U) + 1U), (PhaseShift + DutyCycleVal));
   107a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   107ac:	005b      	lsls	r3, r3, #1
   107ae:	b2db      	uxtb	r3, r3
   107b0:	3301      	adds	r3, #1
   107b2:	b2d9      	uxtb	r1, r3
   107b4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   107b8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   107bc:	4413      	add	r3, r2
   107be:	b29b      	uxth	r3, r3
   107c0:	461a      	mov	r2, r3
   107c2:	9806      	ldr	r0, [sp, #24]
   107c4:	f7fd f8ed 	bl	d9a2 <Ftm_Pwm_Ip_SetChnCountVal>

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
   107c8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   107cc:	4619      	mov	r1, r3
   107ce:	9806      	ldr	r0, [sp, #24]
   107d0:	f7fd f9af 	bl	db32 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09();
   107d4:	f006 fcb2 	bl	1713c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09>
}
   107d8:	bf00      	nop
   107da:	b008      	add	sp, #32
   107dc:	bd10      	pop	{r4, pc}
   107de:	bf00      	nop
   107e0:	00019800 	.word	0x00019800
   107e4:	1fff8e2c 	.word	0x1fff8e2c
   107e8:	1fff8e34 	.word	0x1fff8e34

000107ec <Ftm_Pwm_Ip_SetDutyPhaseShift>:
void Ftm_Pwm_Ip_SetDutyPhaseShift(uint8 Instance,
                                  uint8 Channel,
                                  uint16 DutyCycle,
                                  uint16 PhaseShift,
                                  boolean SyncUpdate)
{
   107ec:	b510      	push	{r4, lr}
   107ee:	b08a      	sub	sp, #40	; 0x28
   107f0:	4604      	mov	r4, r0
   107f2:	4608      	mov	r0, r1
   107f4:	4611      	mov	r1, r2
   107f6:	461a      	mov	r2, r3
   107f8:	4623      	mov	r3, r4
   107fa:	f88d 300f 	strb.w	r3, [sp, #15]
   107fe:	4603      	mov	r3, r0
   10800:	f88d 300e 	strb.w	r3, [sp, #14]
   10804:	460b      	mov	r3, r1
   10806:	f8ad 300c 	strh.w	r3, [sp, #12]
   1080a:	4613      	mov	r3, r2
   1080c:	f8ad 300a 	strh.w	r3, [sp, #10]
    uint16 FirstEdge;
    uint16 SecondEdgeEdge;
    uint8 PairId;
    boolean SoftwareTrigger;
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    const Ftm_Pwm_Ip_HwAddrType *const FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   10810:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10814:	4a68      	ldr	r2, [pc, #416]	; (109b8 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x1cc>)
   10816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1081a:	9308      	str	r3, [sp, #32]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    boolean CheckChMode = TRUE;
   1081c:	2301      	movs	r3, #1
   1081e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    boolean RetVal = TRUE;
   10822:	2301      	movs	r3, #1
   10824:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25

    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   10828:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1082c:	2b03      	cmp	r3, #3
   1082e:	bf94      	ite	ls
   10830:	2301      	movls	r3, #1
   10832:	2300      	movhi	r3, #0
   10834:	b2db      	uxtb	r3, r3
   10836:	4618      	mov	r0, r3
   10838:	f7f0 f854 	bl	8e4 <DevAssert>
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
   1083c:	f89d 300e 	ldrb.w	r3, [sp, #14]
   10840:	2b07      	cmp	r3, #7
   10842:	bf94      	ite	ls
   10844:	2301      	movls	r3, #1
   10846:	2300      	movhi	r3, #0
   10848:	b2db      	uxtb	r3, r3
   1084a:	4618      	mov	r0, r3
   1084c:	f7f0 f84a 	bl	8e4 <DevAssert>
    
    ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
   10850:	f89d 300e 	ldrb.w	r3, [sp, #14]
   10854:	4619      	mov	r1, r3
   10856:	9808      	ldr	r0, [sp, #32]
   10858:	f7fd fe20 	bl	e49c <Ftm_Pwm_Ip_GetChannelMode>
   1085c:	9007      	str	r0, [sp, #28]
    
    if (( FTM_PWM_IP_MODE_COMBINE_HIGH          != ChMode) &&
   1085e:	9b07      	ldr	r3, [sp, #28]
   10860:	2b22      	cmp	r3, #34	; 0x22
   10862:	d00b      	beq.n	1087c <Ftm_Pwm_Ip_SetDutyPhaseShift+0x90>
   10864:	9b07      	ldr	r3, [sp, #28]
   10866:	2b62      	cmp	r3, #98	; 0x62
   10868:	d008      	beq.n	1087c <Ftm_Pwm_Ip_SetDutyPhaseShift+0x90>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH != ChMode) &&
   1086a:	9b07      	ldr	r3, [sp, #28]
   1086c:	2b61      	cmp	r3, #97	; 0x61
   1086e:	d005      	beq.n	1087c <Ftm_Pwm_Ip_SetDutyPhaseShift+0x90>
        ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  != ChMode) &&
   10870:	9b07      	ldr	r3, [sp, #28]
   10872:	2b21      	cmp	r3, #33	; 0x21
   10874:	d002      	beq.n	1087c <Ftm_Pwm_Ip_SetDutyPhaseShift+0x90>
#endif
        ( FTM_PWM_IP_MODE_COMBINE_LOW           != ChMode))
    {
        CheckChMode = FALSE;
   10876:	2300      	movs	r3, #0
   10878:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    }
    DevAssert(CheckChMode != FALSE);
   1087c:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   10880:	4618      	mov	r0, r3
   10882:	f7f0 f82f 	bl	8e4 <DevAssert>

#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
    if (((FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH          == ChMode) ||
   10886:	9b07      	ldr	r3, [sp, #28]
   10888:	2b62      	cmp	r3, #98	; 0x62
   1088a:	d002      	beq.n	10892 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xa6>
   1088c:	9b07      	ldr	r3, [sp, #28]
   1088e:	2b61      	cmp	r3, #97	; 0x61
   10890:	d106      	bne.n	108a0 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xb4>
         (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW           == ChMode)) &&
   10892:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   10896:	2b00      	cmp	r3, #0
   10898:	d002      	beq.n	108a0 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xb4>
        (TRUE == SyncUpdate))
    {
        RetVal = FALSE;
   1089a:	2300      	movs	r3, #0
   1089c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    }
#endif

    if ((Ftm_Pwm_Ip_aPeriod[Instance] != DutyCycle) && (0U != DutyCycle))
   108a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   108a4:	4a45      	ldr	r2, [pc, #276]	; (109bc <Ftm_Pwm_Ip_SetDutyPhaseShift+0x1d0>)
   108a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   108aa:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   108ae:	429a      	cmp	r2, r3
   108b0:	d018      	beq.n	108e4 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf8>
   108b2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   108b6:	2b00      	cmp	r3, #0
   108b8:	d014      	beq.n	108e4 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf8>
    {
        if ((Ftm_Pwm_Ip_aPeriod[Instance] <= PhaseShift) || (Ftm_Pwm_Ip_aPeriod[Instance] < DutyCycle))
   108ba:	f89d 300f 	ldrb.w	r3, [sp, #15]
   108be:	4a3f      	ldr	r2, [pc, #252]	; (109bc <Ftm_Pwm_Ip_SetDutyPhaseShift+0x1d0>)
   108c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   108c4:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   108c8:	429a      	cmp	r2, r3
   108ca:	d208      	bcs.n	108de <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf2>
   108cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   108d0:	4a3a      	ldr	r2, [pc, #232]	; (109bc <Ftm_Pwm_Ip_SetDutyPhaseShift+0x1d0>)
   108d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   108d6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   108da:	429a      	cmp	r2, r3
   108dc:	d902      	bls.n	108e4 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf8>
        {
            RetVal = FALSE;
   108de:	2300      	movs	r3, #0
   108e0:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
        }
    }
    DevAssert(RetVal != FALSE);
   108e4:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   108e8:	4618      	mov	r0, r3
   108ea:	f7ef fffb 	bl	8e4 <DevAssert>

#endif
    PairId = Channel >> 1U;
   108ee:	f89d 300e 	ldrb.w	r3, [sp, #14]
   108f2:	085b      	lsrs	r3, r3, #1
   108f4:	f88d 301b 	strb.w	r3, [sp, #27]

    Ftm_Pwm_Ip_aPhaseShift[Instance][PairId] = PhaseShift;
   108f8:	f89d 200f 	ldrb.w	r2, [sp, #15]
   108fc:	f89d 301b 	ldrb.w	r3, [sp, #27]
   10900:	492f      	ldr	r1, [pc, #188]	; (109c0 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x1d4>)
   10902:	0092      	lsls	r2, r2, #2
   10904:	4413      	add	r3, r2
   10906:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   1090a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycle;
   1090e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   10912:	f89d 300e 	ldrb.w	r3, [sp, #14]
   10916:	492b      	ldr	r1, [pc, #172]	; (109c4 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x1d8>)
   10918:	00d2      	lsls	r2, r2, #3
   1091a:	4413      	add	r3, r2
   1091c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   10920:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    FirstEdge = PhaseShift;
   10924:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   10928:	f8ad 3018 	strh.w	r3, [sp, #24]

    SecondEdgeEdge = Ftm_Pwm_Ip_CalculatePhaseShift(Instance, DutyCycle, PhaseShift);
   1092c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   10930:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   10934:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10938:	4618      	mov	r0, r3
   1093a:	f7fe f8f9 	bl	eb30 <Ftm_Pwm_Ip_CalculatePhaseShift>
   1093e:	4603      	mov	r3, r0
   10940:	f8ad 3016 	strh.w	r3, [sp, #22]

    if (TRUE == SyncUpdate)
   10944:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   10948:	2b00      	cmp	r3, #0
   1094a:	d003      	beq.n	10954 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x168>
    {
        SoftwareTrigger = FALSE;
   1094c:	2300      	movs	r3, #0
   1094e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   10952:	e002      	b.n	1095a <Ftm_Pwm_Ip_SetDutyPhaseShift+0x16e>
    }
    else
    {
        SoftwareTrigger = TRUE;
   10954:	2301      	movs	r3, #1
   10956:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    }

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
   1095a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1095e:	f89d 300e 	ldrb.w	r3, [sp, #14]
   10962:	4919      	ldr	r1, [pc, #100]	; (109c8 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x1dc>)
   10964:	00d2      	lsls	r2, r2, #3
   10966:	4413      	add	r3, r2
   10968:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   1096c:	2b02      	cmp	r3, #2
   1096e:	d111      	bne.n	10994 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x1a8>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
   10970:	f89d 200f 	ldrb.w	r2, [sp, #15]
   10974:	f89d 300e 	ldrb.w	r3, [sp, #14]
   10978:	4913      	ldr	r1, [pc, #76]	; (109c8 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x1dc>)
   1097a:	00d2      	lsls	r2, r2, #3
   1097c:	4413      	add	r3, r2
   1097e:	2201      	movs	r2, #1
   10980:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
   10984:	f89d 100e 	ldrb.w	r1, [sp, #14]
   10988:	f89d 000f 	ldrb.w	r0, [sp, #15]
   1098c:	2300      	movs	r3, #0
   1098e:	2200      	movs	r2, #0
   10990:	f7ff f982 	bl	fc98 <Ftm_Pwm_Ip_SwOutputControl>
                                   FTM_PWM_IP_OUTPUT_STATE_LOW,
                                   FALSE);
    }

    /* Write CV registers and setup duty cycle and phase values */
    (void)Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
   10994:	f8bd 4016 	ldrh.w	r4, [sp, #22]
   10998:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   1099c:	f89d 100e 	ldrb.w	r1, [sp, #14]
   109a0:	f89d 000f 	ldrb.w	r0, [sp, #15]
   109a4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   109a8:	9300      	str	r3, [sp, #0]
   109aa:	4623      	mov	r3, r4
   109ac:	f7ff fa4e 	bl	fe4c <Ftm_Pwm_Ip_UpdatePwmChannel>
                                      Channel,
                                      FirstEdge,
                                      SecondEdgeEdge,
                                      SoftwareTrigger);
}
   109b0:	bf00      	nop
   109b2:	b00a      	add	sp, #40	; 0x28
   109b4:	bd10      	pop	{r4, pc}
   109b6:	bf00      	nop
   109b8:	00019800 	.word	0x00019800
   109bc:	1fff8e2c 	.word	0x1fff8e2c
   109c0:	1fff8e74 	.word	0x1fff8e74
   109c4:	1fff8e34 	.word	0x1fff8e34
   109c8:	1fff9004 	.word	0x1fff9004

000109cc <Ftm_Pwm_Ip_DisableTrigger>:
*
* @implements Ftm_Pwm_Ip_DisableTrigger_Activity
**/
void  Ftm_Pwm_Ip_DisableTrigger(uint8 Instance,
                                uint32 TriggerMask)
{
   109cc:	b500      	push	{lr}
   109ce:	b085      	sub	sp, #20
   109d0:	4603      	mov	r3, r0
   109d2:	9100      	str	r1, [sp, #0]
   109d4:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   109d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   109dc:	4a0c      	ldr	r2, [pc, #48]	; (10a10 <Ftm_Pwm_Ip_DisableTrigger+0x44>)
   109de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109e2:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   109e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   109e8:	2b03      	cmp	r3, #3
   109ea:	bf94      	ite	ls
   109ec:	2301      	movls	r3, #1
   109ee:	2300      	movhi	r3, #0
   109f0:	b2db      	uxtb	r3, r3
   109f2:	4618      	mov	r0, r3
   109f4:	f7ef ff76 	bl	8e4 <DevAssert>
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10();
   109f8:	f006 fbc6 	bl	17188 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10>

    Ftm_Pwm_Ip_DisableTriggerMask(FtmBase, TriggerMask);
   109fc:	9900      	ldr	r1, [sp, #0]
   109fe:	9803      	ldr	r0, [sp, #12]
   10a00:	f7fd fa44 	bl	de8c <Ftm_Pwm_Ip_DisableTriggerMask>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10();
   10a04:	f006 fbec 	bl	171e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10>
}
   10a08:	bf00      	nop
   10a0a:	b005      	add	sp, #20
   10a0c:	f85d fb04 	ldr.w	pc, [sp], #4
   10a10:	00019800 	.word	0x00019800

00010a14 <Ftm_Pwm_Ip_EnableTrigger>:
*
* @implements Ftm_Pwm_Ip_EnableTrigger_Activity
**/
void  Ftm_Pwm_Ip_EnableTrigger(uint8 Instance,
                               uint32 TriggerMask)
{
   10a14:	b500      	push	{lr}
   10a16:	b085      	sub	sp, #20
   10a18:	4603      	mov	r3, r0
   10a1a:	9100      	str	r1, [sp, #0]
   10a1c:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   10a20:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10a24:	4a0c      	ldr	r2, [pc, #48]	; (10a58 <Ftm_Pwm_Ip_EnableTrigger+0x44>)
   10a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a2a:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   10a2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10a30:	2b03      	cmp	r3, #3
   10a32:	bf94      	ite	ls
   10a34:	2301      	movls	r3, #1
   10a36:	2300      	movhi	r3, #0
   10a38:	b2db      	uxtb	r3, r3
   10a3a:	4618      	mov	r0, r3
   10a3c:	f7ef ff52 	bl	8e4 <DevAssert>
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11();
   10a40:	f006 fbf4 	bl	1722c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11>

    Ftm_Pwm_Ip_EnableTriggerMask(FtmBase, TriggerMask);
   10a44:	9900      	ldr	r1, [sp, #0]
   10a46:	9803      	ldr	r0, [sp, #12]
   10a48:	f7fd fa2d 	bl	dea6 <Ftm_Pwm_Ip_EnableTriggerMask>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11();
   10a4c:	f006 fc1a 	bl	17284 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11>
}
   10a50:	bf00      	nop
   10a52:	b005      	add	sp, #20
   10a54:	f85d fb04 	ldr.w	pc, [sp], #4
   10a58:	00019800 	.word	0x00019800

00010a5c <Ftm_Pwm_Ip_SyncUpdate>:
 * Description   : This function will allow synchronized loading
 *                of the duty registers for all the channels of a given FTM module
 * @implements Ftm_Pwm_Ip_SyncUpdate_Activity
 **/
void Ftm_Pwm_Ip_SyncUpdate(uint8 Instance)
{
   10a5c:	b500      	push	{lr}
   10a5e:	b085      	sub	sp, #20
   10a60:	4603      	mov	r3, r0
   10a62:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   10a66:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10a6a:	4a0d      	ldr	r2, [pc, #52]	; (10aa0 <Ftm_Pwm_Ip_SyncUpdate+0x44>)
   10a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a70:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   10a72:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10a76:	2b03      	cmp	r3, #3
   10a78:	bf94      	ite	ls
   10a7a:	2301      	movls	r3, #1
   10a7c:	2300      	movhi	r3, #0
   10a7e:	b2db      	uxtb	r3, r3
   10a80:	4618      	mov	r0, r3
   10a82:	f7ef ff2f 	bl	8e4 <DevAssert>
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12();
   10a86:	f006 fc23 	bl	172d0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12>

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
   10a8a:	2101      	movs	r1, #1
   10a8c:	9803      	ldr	r0, [sp, #12]
   10a8e:	f7fd f850 	bl	db32 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12();
   10a92:	f006 fc49 	bl	17328 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12>
}
   10a96:	bf00      	nop
   10a98:	b005      	add	sp, #20
   10a9a:	f85d fb04 	ldr.w	pc, [sp], #4
   10a9e:	bf00      	nop
   10aa0:	00019800 	.word	0x00019800

00010aa4 <Ftm_Pwm_Ip_SetChannelDeadTime>:
 * @implements Ftm_Pwm_Ip_SetChannelDeadTime_Activity
 **/
void Ftm_Pwm_Ip_SetChannelDeadTime(uint8 Instance,
                                   uint8 Channel,
                                   uint16 DeadTimeVal)
{
   10aa4:	b500      	push	{lr}
   10aa6:	b085      	sub	sp, #20
   10aa8:	4603      	mov	r3, r0
   10aaa:	f88d 3007 	strb.w	r3, [sp, #7]
   10aae:	460b      	mov	r3, r1
   10ab0:	f88d 3006 	strb.w	r3, [sp, #6]
   10ab4:	4613      	mov	r3, r2
   10ab6:	f8ad 3004 	strh.w	r3, [sp, #4]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   10aba:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10abe:	4a32      	ldr	r2, [pc, #200]	; (10b88 <Ftm_Pwm_Ip_SetChannelDeadTime+0xe4>)
   10ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ac4:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)

    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   10ac6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10aca:	2b03      	cmp	r3, #3
   10acc:	bf94      	ite	ls
   10ace:	2301      	movls	r3, #1
   10ad0:	2300      	movhi	r3, #0
   10ad2:	b2db      	uxtb	r3, r3
   10ad4:	4618      	mov	r0, r3
   10ad6:	f7ef ff05 	bl	8e4 <DevAssert>
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
   10ada:	f89d 3006 	ldrb.w	r3, [sp, #6]
   10ade:	2b07      	cmp	r3, #7
   10ae0:	bf94      	ite	ls
   10ae2:	2301      	movls	r3, #1
   10ae4:	2300      	movhi	r3, #0
   10ae6:	b2db      	uxtb	r3, r3
   10ae8:	4618      	mov	r0, r3
   10aea:	f7ef fefb 	bl	8e4 <DevAssert>
    DevAssert(TRUE == Ftm_Pwm_Ip_GetDualChnCompCmd(FtmBase, Channel));
   10aee:	f89d 3006 	ldrb.w	r3, [sp, #6]
   10af2:	4619      	mov	r1, r3
   10af4:	9803      	ldr	r0, [sp, #12]
   10af6:	f7fd fc89 	bl	e40c <Ftm_Pwm_Ip_GetDualChnCompCmd>
   10afa:	4603      	mov	r3, r0
   10afc:	4618      	mov	r0, r3
   10afe:	f7ef fef1 	bl	8e4 <DevAssert>
    DevAssert(TRUE == Ftm_Pwm_Ip_GetDualChnDeadtimeCmd(FtmBase, Channel));
   10b02:	f89d 3006 	ldrb.w	r3, [sp, #6]
   10b06:	4619      	mov	r1, r3
   10b08:	9803      	ldr	r0, [sp, #12]
   10b0a:	f7fd fca3 	bl	e454 <Ftm_Pwm_Ip_GetDualChnDeadtimeCmd>
   10b0e:	4603      	mov	r3, r0
   10b10:	4618      	mov	r0, r3
   10b12:	f7ef fee7 	bl	8e4 <DevAssert>
    DevAssert(TRUE == Ftm_Pwm_Ip_ValidateParamDeadTime(Instance, Channel, DeadTimeVal));
   10b16:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   10b1a:	f89d 1006 	ldrb.w	r1, [sp, #6]
   10b1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10b22:	4618      	mov	r0, r3
   10b24:	f7fd ff80 	bl	ea28 <Ftm_Pwm_Ip_ValidateParamDeadTime>
   10b28:	4603      	mov	r3, r0
   10b2a:	4618      	mov	r0, r3
   10b2c:	f7ef feda 	bl	8e4 <DevAssert>
   
#else
    (void)Channel;
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13();
   10b30:	f006 fc20 	bl	17374 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13>

    if (DeadTimeVal < 64U)
   10b34:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   10b38:	2b3f      	cmp	r3, #63	; 0x3f
   10b3a:	d80b      	bhi.n	10b54 <Ftm_Pwm_Ip_SetChannelDeadTime+0xb0>
    {   /* Set the Deadtime Value */
        Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, (uint8)DeadTimeVal);
   10b3c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   10b40:	b2db      	uxtb	r3, r3
   10b42:	4619      	mov	r1, r3
   10b44:	9803      	ldr	r0, [sp, #12]
   10b46:	f7fd f946 	bl	ddd6 <Ftm_Pwm_Ip_SetDeadtimeCount>
        /* Set the Extended Deadtime Value */
        Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, 0U);
   10b4a:	2100      	movs	r1, #0
   10b4c:	9803      	ldr	r0, [sp, #12]
   10b4e:	f7fd f973 	bl	de38 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
   10b52:	e012      	b.n	10b7a <Ftm_Pwm_Ip_SetChannelDeadTime+0xd6>
    }
    else
    {
        /* Set the Deadtime Value */
        Ftm_Pwm_Ip_SetDeadtimeCount (FtmBase, (uint8)(DeadTimeVal & (uint8)0x3F));
   10b54:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   10b58:	b2db      	uxtb	r3, r3
   10b5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   10b5e:	b2db      	uxtb	r3, r3
   10b60:	4619      	mov	r1, r3
   10b62:	9803      	ldr	r0, [sp, #12]
   10b64:	f7fd f937 	bl	ddd6 <Ftm_Pwm_Ip_SetDeadtimeCount>
        /* Set the Extended Deadtime Value */
        Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, (uint8)(DeadTimeVal >> 6U));
   10b68:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   10b6c:	099b      	lsrs	r3, r3, #6
   10b6e:	b29b      	uxth	r3, r3
   10b70:	b2db      	uxtb	r3, r3
   10b72:	4619      	mov	r1, r3
   10b74:	9803      	ldr	r0, [sp, #12]
   10b76:	f7fd f95f 	bl	de38 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13();
   10b7a:	f006 fc27 	bl	173cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13>
}
   10b7e:	bf00      	nop
   10b80:	b005      	add	sp, #20
   10b82:	f85d fb04 	ldr.w	pc, [sp], #4
   10b86:	bf00      	nop
   10b88:	00019800 	.word	0x00019800

00010b8c <Pwm_GetPartitionChannelIdx>:
     (PWM_FAST_UPDATE_API                   == STD_ON) || \
     (PWM_SET_DUTY_PHASE_SHIFT_API          == STD_ON))

static inline uint8 Pwm_GetPartitionChannelIdx(uint32          CoreId,
                                               Pwm_ChannelType ChannelNumber)
{
   10b8c:	b082      	sub	sp, #8
   10b8e:	9001      	str	r0, [sp, #4]
   10b90:	460b      	mov	r3, r1
   10b92:	f88d 3003 	strb.w	r3, [sp, #3]
    return (*(Pwm_aState[CoreId].PwmConfig)->PwmLogicalToPartitionMap)[ChannelNumber];
#else
    /* Avoid compiler warning */
    (void)CoreId;

    return ChannelNumber;
   10b96:	f89d 3003 	ldrb.w	r3, [sp, #3]
#endif
}
   10b9a:	4618      	mov	r0, r3
   10b9c:	b002      	add	sp, #8
   10b9e:	4770      	bx	lr

00010ba0 <Pwm_ValidateGlobalConfigCall>:
* @retval       E_NOT_OK            Caller of the function should drop execution
*
*/
static Std_ReturnType Pwm_ValidateGlobalConfigCall(uint32   CoreId,
                                                   uint8    ServiceId)
{
   10ba0:	b500      	push	{lr}
   10ba2:	b085      	sub	sp, #20
   10ba4:	9001      	str	r0, [sp, #4]
   10ba6:	460b      	mov	r3, r1
   10ba8:	f88d 3003 	strb.w	r3, [sp, #3]
    /** @brief  Variable to store the value returned by the function */
    Std_ReturnType                      RetVal = (Std_ReturnType)E_OK;
   10bac:	2300      	movs	r3, #0
   10bae:	f88d 300f 	strb.w	r3, [sp, #15]

    if (PWM_STATE_UNINIT == Pwm_aState[CoreId].PwmDriverState)
   10bb2:	4916      	ldr	r1, [pc, #88]	; (10c0c <Pwm_ValidateGlobalConfigCall+0x6c>)
   10bb4:	9a01      	ldr	r2, [sp, #4]
   10bb6:	4613      	mov	r3, r2
   10bb8:	005b      	lsls	r3, r3, #1
   10bba:	4413      	add	r3, r2
   10bbc:	00db      	lsls	r3, r3, #3
   10bbe:	440b      	add	r3, r1
   10bc0:	681b      	ldr	r3, [r3, #0]
   10bc2:	2b00      	cmp	r3, #0
   10bc4:	d10e      	bne.n	10be4 <Pwm_ValidateGlobalConfigCall+0x44>
    {
        if (PWM_INIT_ID != ServiceId)
   10bc6:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10bca:	2b00      	cmp	r3, #0
   10bcc:	d018      	beq.n	10c00 <Pwm_ValidateGlobalConfigCall+0x60>
        {
            (void)Det_ReportError
   10bce:	f89d 2003 	ldrb.w	r2, [sp, #3]
   10bd2:	2311      	movs	r3, #17
   10bd4:	2100      	movs	r1, #0
   10bd6:	2079      	movs	r0, #121	; 0x79
   10bd8:	f007 fc1c 	bl	18414 <Det_ReportError>
                (uint8)  PWM_INDEX,
                (uint8)  ServiceId,
                (uint8)  PWM_E_UNINIT
            );

            RetVal = (Std_ReturnType)E_NOT_OK;
   10bdc:	2301      	movs	r3, #1
   10bde:	f88d 300f 	strb.w	r3, [sp, #15]
   10be2:	e00d      	b.n	10c00 <Pwm_ValidateGlobalConfigCall+0x60>
        }
    }
    else
    {
        if (PWM_INIT_ID == ServiceId)
   10be4:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10be8:	2b00      	cmp	r3, #0
   10bea:	d109      	bne.n	10c00 <Pwm_ValidateGlobalConfigCall+0x60>
        {
            (void)Det_ReportError
   10bec:	f89d 2003 	ldrb.w	r2, [sp, #3]
   10bf0:	2314      	movs	r3, #20
   10bf2:	2100      	movs	r1, #0
   10bf4:	2079      	movs	r0, #121	; 0x79
   10bf6:	f007 fc0d 	bl	18414 <Det_ReportError>
                (uint8)  PWM_INDEX,
                (uint8)  ServiceId,
                (uint8)  PWM_E_ALREADY_INITIALIZED
            );

            RetVal = (Std_ReturnType)E_NOT_OK;
   10bfa:	2301      	movs	r3, #1
   10bfc:	f88d 300f 	strb.w	r3, [sp, #15]
        }
    }

    return RetVal;
   10c00:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   10c04:	4618      	mov	r0, r3
   10c06:	b005      	add	sp, #20
   10c08:	f85d fb04 	ldr.w	pc, [sp], #4
   10c0c:	1fff8b3c 	.word	0x1fff8b3c

00010c10 <Pwm_EndValidateGlobalConfigCall>:
*
*/
static inline void Pwm_EndValidateGlobalConfigCall(uint32           CoreId,
                                                   Std_ReturnType   ValidCall,
                                                   uint8            ServiceId)
{
   10c10:	b082      	sub	sp, #8
   10c12:	9001      	str	r0, [sp, #4]
   10c14:	460b      	mov	r3, r1
   10c16:	f88d 3003 	strb.w	r3, [sp, #3]
   10c1a:	4613      	mov	r3, r2
   10c1c:	f88d 3002 	strb.w	r3, [sp, #2]
    /* Change the state of the driver only if the previous call to
    Pwm_ValidateGlobalConfigCall() stated that the API call is valid */
    if ((Std_ReturnType)E_OK == ValidCall)
   10c20:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10c24:	2b00      	cmp	r3, #0
   10c26:	d116      	bne.n	10c56 <Pwm_EndValidateGlobalConfigCall+0x46>
    {
        if (PWM_DEINIT_ID == ServiceId)
   10c28:	f89d 3002 	ldrb.w	r3, [sp, #2]
   10c2c:	2b01      	cmp	r3, #1
   10c2e:	d109      	bne.n	10c44 <Pwm_EndValidateGlobalConfigCall+0x34>
        {
            Pwm_aState[CoreId].PwmDriverState = PWM_STATE_UNINIT;
   10c30:	490a      	ldr	r1, [pc, #40]	; (10c5c <Pwm_EndValidateGlobalConfigCall+0x4c>)
   10c32:	9a01      	ldr	r2, [sp, #4]
   10c34:	4613      	mov	r3, r2
   10c36:	005b      	lsls	r3, r3, #1
   10c38:	4413      	add	r3, r2
   10c3a:	00db      	lsls	r3, r3, #3
   10c3c:	440b      	add	r3, r1
   10c3e:	2200      	movs	r2, #0
   10c40:	601a      	str	r2, [r3, #0]
        else
        {
            Pwm_aState[CoreId].PwmDriverState = PWM_STATE_IDLE;
        }
    }
}
   10c42:	e008      	b.n	10c56 <Pwm_EndValidateGlobalConfigCall+0x46>
            Pwm_aState[CoreId].PwmDriverState = PWM_STATE_IDLE;
   10c44:	4905      	ldr	r1, [pc, #20]	; (10c5c <Pwm_EndValidateGlobalConfigCall+0x4c>)
   10c46:	9a01      	ldr	r2, [sp, #4]
   10c48:	4613      	mov	r3, r2
   10c4a:	005b      	lsls	r3, r3, #1
   10c4c:	4413      	add	r3, r2
   10c4e:	00db      	lsls	r3, r3, #3
   10c50:	440b      	add	r3, r1
   10c52:	2201      	movs	r2, #1
   10c54:	601a      	str	r2, [r3, #0]
}
   10c56:	bf00      	nop
   10c58:	b002      	add	sp, #8
   10c5a:	4770      	bx	lr
   10c5c:	1fff8b3c 	.word	0x1fff8b3c

00010c60 <Pwm_ValidateChannelConfigCall>:
*
*/
static inline Std_ReturnType Pwm_ValidateChannelConfigCall(uint32          CoreId,
                                                           Pwm_ChannelType ChannelNumber,
                                                           uint8           ServiceId)
{
   10c60:	b500      	push	{lr}
   10c62:	b085      	sub	sp, #20
   10c64:	9001      	str	r0, [sp, #4]
   10c66:	460b      	mov	r3, r1
   10c68:	f88d 3003 	strb.w	r3, [sp, #3]
   10c6c:	4613      	mov	r3, r2
   10c6e:	f88d 3002 	strb.w	r3, [sp, #2]
    /** @brief  Variable to store the value returned by the function */
    Std_ReturnType          RetVal = (Std_ReturnType)E_OK;
   10c72:	2300      	movs	r3, #0
   10c74:	f88d 300f 	strb.w	r3, [sp, #15]
    Pwm_ChannelType         PartitionChannelIdx;

    /* Check if the driver is initialized */
    if (PWM_STATE_UNINIT == Pwm_aState[CoreId].PwmDriverState)
   10c78:	4925      	ldr	r1, [pc, #148]	; (10d10 <Pwm_ValidateChannelConfigCall+0xb0>)
   10c7a:	9a01      	ldr	r2, [sp, #4]
   10c7c:	4613      	mov	r3, r2
   10c7e:	005b      	lsls	r3, r3, #1
   10c80:	4413      	add	r3, r2
   10c82:	00db      	lsls	r3, r3, #3
   10c84:	440b      	add	r3, r1
   10c86:	681b      	ldr	r3, [r3, #0]
   10c88:	2b00      	cmp	r3, #0
   10c8a:	d10a      	bne.n	10ca2 <Pwm_ValidateChannelConfigCall+0x42>
    {
        RetVal = (Std_ReturnType)E_NOT_OK;
   10c8c:	2301      	movs	r3, #1
   10c8e:	f88d 300f 	strb.w	r3, [sp, #15]

        /* Driver not initialized yet */
        (void)Det_ReportError
   10c92:	f89d 2002 	ldrb.w	r2, [sp, #2]
   10c96:	2311      	movs	r3, #17
   10c98:	2100      	movs	r1, #0
   10c9a:	2079      	movs	r0, #121	; 0x79
   10c9c:	f007 fbba 	bl	18414 <Det_ReportError>
   10ca0:	e02f      	b.n	10d02 <Pwm_ValidateChannelConfigCall+0xa2>
        );
    }
    else
    {
        /* Check that the channel is in valid range */
        if (PWM_CONFIG_LOGIC_CHANNELS <= ChannelNumber)
   10ca2:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10ca6:	2b00      	cmp	r3, #0
   10ca8:	d00a      	beq.n	10cc0 <Pwm_ValidateChannelConfigCall+0x60>
        {
            RetVal = (Std_ReturnType)E_NOT_OK;
   10caa:	2301      	movs	r3, #1
   10cac:	f88d 300f 	strb.w	r3, [sp, #15]

            (void)Det_ReportError
   10cb0:	f89d 2002 	ldrb.w	r2, [sp, #2]
   10cb4:	2312      	movs	r3, #18
   10cb6:	2100      	movs	r1, #0
   10cb8:	2079      	movs	r0, #121	; 0x79
   10cba:	f007 fbab 	bl	18414 <Det_ReportError>
   10cbe:	e020      	b.n	10d02 <Pwm_ValidateChannelConfigCall+0xa2>
                (uint8)  PWM_E_PARAM_CHANNEL
            );
        }
        else
        {
            PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
   10cc0:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10cc4:	4619      	mov	r1, r3
   10cc6:	9801      	ldr	r0, [sp, #4]
   10cc8:	f7ff ff60 	bl	10b8c <Pwm_GetPartitionChannelIdx>
   10ccc:	4603      	mov	r3, r0
   10cce:	f88d 300e 	strb.w	r3, [sp, #14]

            /* Check that the channel is not in current partition */
            if (PartitionChannelIdx >= Pwm_aState[CoreId].PwmConfig->NumChannels)
   10cd2:	490f      	ldr	r1, [pc, #60]	; (10d10 <Pwm_ValidateChannelConfigCall+0xb0>)
   10cd4:	9a01      	ldr	r2, [sp, #4]
   10cd6:	4613      	mov	r3, r2
   10cd8:	005b      	lsls	r3, r3, #1
   10cda:	4413      	add	r3, r2
   10cdc:	00db      	lsls	r3, r3, #3
   10cde:	440b      	add	r3, r1
   10ce0:	3304      	adds	r3, #4
   10ce2:	681b      	ldr	r3, [r3, #0]
   10ce4:	781b      	ldrb	r3, [r3, #0]
   10ce6:	f89d 200e 	ldrb.w	r2, [sp, #14]
   10cea:	429a      	cmp	r2, r3
   10cec:	d309      	bcc.n	10d02 <Pwm_ValidateChannelConfigCall+0xa2>
            {
                RetVal = (Std_ReturnType)E_NOT_OK;
   10cee:	2301      	movs	r3, #1
   10cf0:	f88d 300f 	strb.w	r3, [sp, #15]

                (void)Det_ReportError
   10cf4:	f89d 2002 	ldrb.w	r2, [sp, #2]
   10cf8:	2340      	movs	r3, #64	; 0x40
   10cfa:	2100      	movs	r1, #0
   10cfc:	2079      	movs	r0, #121	; 0x79
   10cfe:	f007 fb89 	bl	18414 <Det_ReportError>
            /* Do nothing */
            }
        }
    }

    return RetVal;
   10d02:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   10d06:	4618      	mov	r0, r3
   10d08:	b005      	add	sp, #20
   10d0a:	f85d fb04 	ldr.w	pc, [sp], #4
   10d0e:	bf00      	nop
   10d10:	1fff8b3c 	.word	0x1fff8b3c

00010d14 <Pwm_EndValidateChannelConfigCall>:
*
* @return       void
*
*/
static inline void Pwm_EndValidateChannelConfigCall(Pwm_ChannelType ChannelNumber)
{
   10d14:	b082      	sub	sp, #8
   10d16:	4603      	mov	r3, r0
   10d18:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Avoid compiler warning */
    (void)ChannelNumber;
}
   10d1c:	bf00      	nop
   10d1e:	b002      	add	sp, #8
   10d20:	4770      	bx	lr

00010d22 <Pwm_ValidateParamPtrInit>:
* @retval       E_NOT_OK        Pointer is invalid
*
*/
static inline Std_ReturnType Pwm_ValidateParamPtrInit(uint32                 CoreId,
                                                      const Pwm_ConfigType * ConfigPtr)
{
   10d22:	b500      	push	{lr}
   10d24:	b085      	sub	sp, #20
   10d26:	9001      	str	r0, [sp, #4]
   10d28:	9100      	str	r1, [sp, #0]
    /** @brief  Variable to store the value returned by the function */
    Std_ReturnType      RetVal = (Std_ReturnType)E_OK;
   10d2a:	2300      	movs	r3, #0
   10d2c:	f88d 300f 	strb.w	r3, [sp, #15]
    /* For pre-compile, check DET error if the received config pointer is not NULL_PTR */
    if (NULL_PTR != ConfigPtr)
    {
#else
    /* For post build, check DET error if the received config pointer is NULL_PTR */
    if (NULL_PTR == ConfigPtr)
   10d30:	9b00      	ldr	r3, [sp, #0]
   10d32:	2b00      	cmp	r3, #0
   10d34:	d108      	bne.n	10d48 <Pwm_ValidateParamPtrInit+0x26>
    {
#endif
        /* Avoid compiler warning */
        (void)CoreId;

        (void)Det_ReportError
   10d36:	2310      	movs	r3, #16
   10d38:	2200      	movs	r2, #0
   10d3a:	2100      	movs	r1, #0
   10d3c:	2079      	movs	r0, #121	; 0x79
   10d3e:	f007 fb69 	bl	18414 <Det_ReportError>
            (uint8)  PWM_INDEX,
            (uint8)  PWM_INIT_ID,
            (uint8)  PWM_E_INIT_FAILED
        );

        RetVal = (Std_ReturnType)E_NOT_OK;
   10d42:	2301      	movs	r3, #1
   10d44:	f88d 300f 	strb.w	r3, [sp, #15]
    #endif
        /* Do nothing */
    }
#endif

    return RetVal;
   10d48:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   10d4c:	4618      	mov	r0, r3
   10d4e:	b005      	add	sp, #20
   10d50:	f85d fb04 	ldr.w	pc, [sp], #4

00010d54 <Pwm_ValidateParamDuty>:
* @retval       E_NOT_OK          Duty Cycle is invalid
*
*/
static inline Std_ReturnType Pwm_ValidateParamDuty(uint16   DutyCycle,
                                                   uint8    ServiceId)
{
   10d54:	b500      	push	{lr}
   10d56:	b085      	sub	sp, #20
   10d58:	4603      	mov	r3, r0
   10d5a:	460a      	mov	r2, r1
   10d5c:	f8ad 3006 	strh.w	r3, [sp, #6]
   10d60:	4613      	mov	r3, r2
   10d62:	f88d 3005 	strb.w	r3, [sp, #5]
    /** @brief  Variable to store the value returned by the function */
    Std_ReturnType                      RetVal = (Std_ReturnType)E_OK;
   10d66:	2300      	movs	r3, #0
   10d68:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Check if the DutyCycle is in valid range */
    if (DutyCycle > PWM_DUTY_CYCLE_100)
   10d6c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   10d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10d74:	d909      	bls.n	10d8a <Pwm_ValidateParamDuty+0x36>
    {
        (void)Det_ReportError
   10d76:	f89d 2005 	ldrb.w	r2, [sp, #5]
   10d7a:	2332      	movs	r3, #50	; 0x32
   10d7c:	2100      	movs	r1, #0
   10d7e:	2079      	movs	r0, #121	; 0x79
   10d80:	f007 fb48 	bl	18414 <Det_ReportError>
            (uint8)  PWM_INDEX,
            (uint8)  ServiceId,
            (uint8)  PWM_E_DUTYCYCLE_RANGE
        );

        RetVal = (Std_ReturnType)E_NOT_OK;
   10d84:	2301      	movs	r3, #1
   10d86:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    return RetVal;
   10d8a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   10d8e:	4618      	mov	r0, r3
   10d90:	b005      	add	sp, #20
   10d92:	f85d fb04 	ldr.w	pc, [sp], #4

00010d96 <Pwm_ValidateParamsPeriodClass>:
static inline Std_ReturnType Pwm_ValidateParamsPeriodClass(uint32                CoreId,
                                                           Pwm_ChannelType       ChannelNumber,
                                                           Pwm_ChannelClassType  ChannelClass,
                                                           Pwm_PeriodType        Period,
                                                           uint8                 ServiceId)
{
   10d96:	b500      	push	{lr}
   10d98:	b087      	sub	sp, #28
   10d9a:	9003      	str	r0, [sp, #12]
   10d9c:	9201      	str	r2, [sp, #4]
   10d9e:	461a      	mov	r2, r3
   10da0:	460b      	mov	r3, r1
   10da2:	f88d 300b 	strb.w	r3, [sp, #11]
   10da6:	4613      	mov	r3, r2
   10da8:	f8ad 3008 	strh.w	r3, [sp, #8]
    /** @brief  Variable to store the value returned by the function */
    Std_ReturnType              RetVal = (Std_ReturnType)E_OK;
   10dac:	2300      	movs	r3, #0
   10dae:	f88d 3017 	strb.w	r3, [sp, #23]
#if (PWM_MAX_PERIOD_PLAUSABILITY == STD_ON)
    uint32                      PeriodMaxValue = (uint32)0U;
   10db2:	2300      	movs	r3, #0
   10db4:	9304      	str	r3, [sp, #16]
    (void)ChannelNumber;
    (void)CoreId;
#endif

    /* Check if channel supports updates of the period */
    if (PWM_VARIABLE_PERIOD != ChannelClass)
   10db6:	9b01      	ldr	r3, [sp, #4]
   10db8:	2b00      	cmp	r3, #0
   10dba:	d00a      	beq.n	10dd2 <Pwm_ValidateParamsPeriodClass+0x3c>
    {
        (void)Det_ReportError
   10dbc:	f89d 2020 	ldrb.w	r2, [sp, #32]
   10dc0:	2313      	movs	r3, #19
   10dc2:	2100      	movs	r1, #0
   10dc4:	2079      	movs	r0, #121	; 0x79
   10dc6:	f007 fb25 	bl	18414 <Det_ReportError>
            (uint8)  PWM_INDEX,
            (uint8)  ServiceId,
            (uint8)  PWM_E_PERIOD_UNCHANGEABLE
        );

        RetVal = (Std_ReturnType)E_NOT_OK;
   10dca:	2301      	movs	r3, #1
   10dcc:	f88d 3017 	strb.w	r3, [sp, #23]
   10dd0:	e023      	b.n	10e1a <Pwm_ValidateParamsPeriodClass+0x84>
    }
    else
    {
#if (PWM_MAX_PERIOD_PLAUSABILITY == STD_ON)
        PeriodMaxValue = (uint32)Pwm_Ipw_GetMaxPeriodValue(&((*Pwm_aState[CoreId].PwmChannelConfigs)[ChannelNumber].IpwChannelCfg));
   10dd2:	4915      	ldr	r1, [pc, #84]	; (10e28 <Pwm_ValidateParamsPeriodClass+0x92>)
   10dd4:	9a03      	ldr	r2, [sp, #12]
   10dd6:	4613      	mov	r3, r2
   10dd8:	005b      	lsls	r3, r3, #1
   10dda:	4413      	add	r3, r2
   10ddc:	00db      	lsls	r3, r3, #3
   10dde:	440b      	add	r3, r1
   10de0:	3310      	adds	r3, #16
   10de2:	6819      	ldr	r1, [r3, #0]
   10de4:	f89d 200b 	ldrb.w	r2, [sp, #11]
   10de8:	4613      	mov	r3, r2
   10dea:	005b      	lsls	r3, r3, #1
   10dec:	4413      	add	r3, r2
   10dee:	00db      	lsls	r3, r3, #3
   10df0:	440b      	add	r3, r1
   10df2:	3308      	adds	r3, #8
   10df4:	4618      	mov	r0, r3
   10df6:	f000 fc8b 	bl	11710 <Pwm_Ipw_GetMaxPeriodValue>
   10dfa:	9004      	str	r0, [sp, #16]

        /* Check if period is in range */
        if ((uint32)Period > PeriodMaxValue)
   10dfc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   10e00:	9a04      	ldr	r2, [sp, #16]
   10e02:	429a      	cmp	r2, r3
   10e04:	d209      	bcs.n	10e1a <Pwm_ValidateParamsPeriodClass+0x84>
        {
            (void)Det_ReportError
   10e06:	f89d 2020 	ldrb.w	r2, [sp, #32]
   10e0a:	231a      	movs	r3, #26
   10e0c:	2100      	movs	r1, #0
   10e0e:	2079      	movs	r0, #121	; 0x79
   10e10:	f007 fb00 	bl	18414 <Det_ReportError>
                (uint8)  PWM_INDEX,
                (uint8)  ServiceId,
                (uint8)  PWM_E_PERIODVALUE
            );

            RetVal = (Std_ReturnType)E_NOT_OK;
   10e14:	2301      	movs	r3, #1
   10e16:	f88d 3017 	strb.w	r3, [sp, #23]
#else
        /* Nothing to do in this branch */
#endif
    }

    return RetVal;
   10e1a:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
   10e1e:	4618      	mov	r0, r3
   10e20:	b007      	add	sp, #28
   10e22:	f85d fb04 	ldr.w	pc, [sp], #4
   10e26:	bf00      	nop
   10e28:	1fff8b3c 	.word	0x1fff8b3c

00010e2c <Pwm_ValidateSetOutPutToIdle>:
* @retval           RetVal          E_NOT_OK  Set output to idle is not valid
                                    E_OK      Set output to idle is valid
*/
static inline Std_ReturnType Pwm_ValidateSetOutPutToIdle(uint32            CoreId,
                                                         Pwm_ChannelType   ChannelNumber)
{
   10e2c:	b500      	push	{lr}
   10e2e:	b085      	sub	sp, #20
   10e30:	9001      	str	r0, [sp, #4]
   10e32:	460b      	mov	r3, r1
   10e34:	f88d 3003 	strb.w	r3, [sp, #3]
    
    /** @brief  Variable to store the value returned by the function */
    Std_ReturnType                      RetVal = (Std_ReturnType)E_OK;
   10e38:	2300      	movs	r3, #0
   10e3a:	f88d 300f 	strb.w	r3, [sp, #15]

    RetVal = Pwm_Ipw_ValidateSetOutPutToIdle(&((*Pwm_aState[CoreId].PwmChannelConfigs)[ChannelNumber].IpwChannelCfg));
   10e3e:	4913      	ldr	r1, [pc, #76]	; (10e8c <Pwm_ValidateSetOutPutToIdle+0x60>)
   10e40:	9a01      	ldr	r2, [sp, #4]
   10e42:	4613      	mov	r3, r2
   10e44:	005b      	lsls	r3, r3, #1
   10e46:	4413      	add	r3, r2
   10e48:	00db      	lsls	r3, r3, #3
   10e4a:	440b      	add	r3, r1
   10e4c:	3310      	adds	r3, #16
   10e4e:	6819      	ldr	r1, [r3, #0]
   10e50:	f89d 2003 	ldrb.w	r2, [sp, #3]
   10e54:	4613      	mov	r3, r2
   10e56:	005b      	lsls	r3, r3, #1
   10e58:	4413      	add	r3, r2
   10e5a:	00db      	lsls	r3, r3, #3
   10e5c:	440b      	add	r3, r1
   10e5e:	3308      	adds	r3, #8
   10e60:	4618      	mov	r0, r3
   10e62:	f000 fc3f 	bl	116e4 <Pwm_Ipw_ValidateSetOutPutToIdle>
   10e66:	4603      	mov	r3, r0
   10e68:	f88d 300f 	strb.w	r3, [sp, #15]

    if((Std_ReturnType)E_OK != RetVal)
   10e6c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10e70:	2b00      	cmp	r3, #0
   10e72:	d005      	beq.n	10e80 <Pwm_ValidateSetOutPutToIdle+0x54>
    {
        (void)Det_ReportError
   10e74:	2342      	movs	r3, #66	; 0x42
   10e76:	2204      	movs	r2, #4
   10e78:	2100      	movs	r1, #0
   10e7a:	2079      	movs	r0, #121	; 0x79
   10e7c:	f007 faca 	bl	18414 <Det_ReportError>
            (uint8)  PWM_SETOUTPUTTOIDLE_ID,
            (uint8)  PWM_E_SETOUTPUTTOIDLE_NOT_SUPPORTED
        );
    }

    return RetVal;
   10e80:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   10e84:	4618      	mov	r0, r3
   10e86:	b005      	add	sp, #20
   10e88:	f85d fb04 	ldr.w	pc, [sp], #4
   10e8c:	1fff8b3c 	.word	0x1fff8b3c

00010e90 <Pwm_Init>:
*
* @implements   Pwm_Init_Activity
*
*/
void Pwm_Init(const Pwm_ConfigType * ConfigPtr)
{
   10e90:	b510      	push	{r4, lr}
   10e92:	b084      	sub	sp, #16
   10e94:	9001      	str	r0, [sp, #4]
#endif
    uint32                      CoreId;
    uint8                       Index;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
   10e96:	2300      	movs	r3, #0
   10e98:	9302      	str	r3, [sp, #8]

#if (PWM_VALIDATE_GLOBAL_CONFIG_CALL == STD_ON)
    CallIsValid = Pwm_ValidateGlobalConfigCall(CoreId, PWM_INIT_ID);
   10e9a:	2100      	movs	r1, #0
   10e9c:	9802      	ldr	r0, [sp, #8]
   10e9e:	f7ff fe7f 	bl	10ba0 <Pwm_ValidateGlobalConfigCall>
   10ea2:	4603      	mov	r3, r0
   10ea4:	f88d 300f 	strb.w	r3, [sp, #15]

    if ((Std_ReturnType)E_OK == CallIsValid)
   10ea8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10eac:	2b00      	cmp	r3, #0
   10eae:	f040 8089 	bne.w	10fc4 <Pwm_Init+0x134>
    {
#endif

#if (PWM_PARAM_CHECK == STD_ON)
        CallIsValid = Pwm_ValidateParamPtrInit(CoreId, ConfigPtr);
   10eb2:	9901      	ldr	r1, [sp, #4]
   10eb4:	9802      	ldr	r0, [sp, #8]
   10eb6:	f7ff ff34 	bl	10d22 <Pwm_ValidateParamPtrInit>
   10eba:	4603      	mov	r3, r0
   10ebc:	f88d 300f 	strb.w	r3, [sp, #15]

        if ((Std_ReturnType)E_OK == CallIsValid)
   10ec0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10ec4:	2b00      	cmp	r3, #0
   10ec6:	d17d      	bne.n	10fc4 <Pwm_Init+0x134>
#else
            Pwm_aState[CoreId].PwmConfig = &Pwm_Config;
#endif
            (void)ConfigPtr;
#else
            Pwm_aState[CoreId].PwmConfig = ConfigPtr;
   10ec8:	4943      	ldr	r1, [pc, #268]	; (10fd8 <Pwm_Init+0x148>)
   10eca:	9a02      	ldr	r2, [sp, #8]
   10ecc:	4613      	mov	r3, r2
   10ece:	005b      	lsls	r3, r3, #1
   10ed0:	4413      	add	r3, r2
   10ed2:	00db      	lsls	r3, r3, #3
   10ed4:	440b      	add	r3, r1
   10ed6:	3304      	adds	r3, #4
   10ed8:	9a01      	ldr	r2, [sp, #4]
   10eda:	601a      	str	r2, [r3, #0]
#endif

#if (PWM_HW_INSTANCE_USED == STD_ON)
            /* IPW call to hw instance initialization when PWM controls the entire hw instance */
            for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
   10edc:	2300      	movs	r3, #0
   10ede:	f88d 300e 	strb.w	r3, [sp, #14]
   10ee2:	e018      	b.n	10f16 <Pwm_Init+0x86>
            {
                Pwm_Ipw_InitInstance(&((*Pwm_aState[CoreId].PwmConfig->PwmInstancesConfig)[Index]));
   10ee4:	493c      	ldr	r1, [pc, #240]	; (10fd8 <Pwm_Init+0x148>)
   10ee6:	9a02      	ldr	r2, [sp, #8]
   10ee8:	4613      	mov	r3, r2
   10eea:	005b      	lsls	r3, r3, #1
   10eec:	4413      	add	r3, r2
   10eee:	00db      	lsls	r3, r3, #3
   10ef0:	440b      	add	r3, r1
   10ef2:	3304      	adds	r3, #4
   10ef4:	681b      	ldr	r3, [r3, #0]
   10ef6:	68d9      	ldr	r1, [r3, #12]
   10ef8:	f89d 200e 	ldrb.w	r2, [sp, #14]
   10efc:	4613      	mov	r3, r2
   10efe:	005b      	lsls	r3, r3, #1
   10f00:	4413      	add	r3, r2
   10f02:	009b      	lsls	r3, r3, #2
   10f04:	440b      	add	r3, r1
   10f06:	4618      	mov	r0, r3
   10f08:	f000 fa7a 	bl	11400 <Pwm_Ipw_InitInstance>
            for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
   10f0c:	f89d 300e 	ldrb.w	r3, [sp, #14]
   10f10:	3301      	adds	r3, #1
   10f12:	f88d 300e 	strb.w	r3, [sp, #14]
   10f16:	4930      	ldr	r1, [pc, #192]	; (10fd8 <Pwm_Init+0x148>)
   10f18:	9a02      	ldr	r2, [sp, #8]
   10f1a:	4613      	mov	r3, r2
   10f1c:	005b      	lsls	r3, r3, #1
   10f1e:	4413      	add	r3, r2
   10f20:	00db      	lsls	r3, r3, #3
   10f22:	440b      	add	r3, r1
   10f24:	3304      	adds	r3, #4
   10f26:	681b      	ldr	r3, [r3, #0]
   10f28:	7a1b      	ldrb	r3, [r3, #8]
   10f2a:	f89d 200e 	ldrb.w	r2, [sp, #14]
   10f2e:	429a      	cmp	r2, r3
   10f30:	d3d8      	bcc.n	10ee4 <Pwm_Init+0x54>
            }
#endif

            /* All validations passed. Here starts the actual functional code of the function */
            for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
   10f32:	2300      	movs	r3, #0
   10f34:	f88d 300e 	strb.w	r3, [sp, #14]
   10f38:	e036      	b.n	10fa8 <Pwm_Init+0x118>
            {
                Pwm_aState[CoreId].PwmChannelConfigs[Index] = &((*Pwm_aState[CoreId].PwmConfig->PwmChannelsConfig)[Index]);
   10f3a:	4927      	ldr	r1, [pc, #156]	; (10fd8 <Pwm_Init+0x148>)
   10f3c:	9a02      	ldr	r2, [sp, #8]
   10f3e:	4613      	mov	r3, r2
   10f40:	005b      	lsls	r3, r3, #1
   10f42:	4413      	add	r3, r2
   10f44:	00db      	lsls	r3, r3, #3
   10f46:	440b      	add	r3, r1
   10f48:	3304      	adds	r3, #4
   10f4a:	681b      	ldr	r3, [r3, #0]
   10f4c:	6859      	ldr	r1, [r3, #4]
   10f4e:	f89d 200e 	ldrb.w	r2, [sp, #14]
   10f52:	f89d 000e 	ldrb.w	r0, [sp, #14]
   10f56:	4613      	mov	r3, r2
   10f58:	005b      	lsls	r3, r3, #1
   10f5a:	4413      	add	r3, r2
   10f5c:	00db      	lsls	r3, r3, #3
   10f5e:	4419      	add	r1, r3
   10f60:	4c1d      	ldr	r4, [pc, #116]	; (10fd8 <Pwm_Init+0x148>)
   10f62:	9a02      	ldr	r2, [sp, #8]
   10f64:	4613      	mov	r3, r2
   10f66:	005b      	lsls	r3, r3, #1
   10f68:	4413      	add	r3, r2
   10f6a:	005b      	lsls	r3, r3, #1
   10f6c:	4403      	add	r3, r0
   10f6e:	3304      	adds	r3, #4
   10f70:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
                /* Continue to hw channel initialization */
                Pwm_Ipw_Init(&((*Pwm_aState[CoreId].PwmConfig->PwmChannelsConfig)[Index].IpwChannelCfg));
   10f74:	4918      	ldr	r1, [pc, #96]	; (10fd8 <Pwm_Init+0x148>)
   10f76:	9a02      	ldr	r2, [sp, #8]
   10f78:	4613      	mov	r3, r2
   10f7a:	005b      	lsls	r3, r3, #1
   10f7c:	4413      	add	r3, r2
   10f7e:	00db      	lsls	r3, r3, #3
   10f80:	440b      	add	r3, r1
   10f82:	3304      	adds	r3, #4
   10f84:	681b      	ldr	r3, [r3, #0]
   10f86:	6859      	ldr	r1, [r3, #4]
   10f88:	f89d 200e 	ldrb.w	r2, [sp, #14]
   10f8c:	4613      	mov	r3, r2
   10f8e:	005b      	lsls	r3, r3, #1
   10f90:	4413      	add	r3, r2
   10f92:	00db      	lsls	r3, r3, #3
   10f94:	3308      	adds	r3, #8
   10f96:	440b      	add	r3, r1
   10f98:	4618      	mov	r0, r3
   10f9a:	f000 fa0f 	bl	113bc <Pwm_Ipw_Init>
            for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
   10f9e:	f89d 300e 	ldrb.w	r3, [sp, #14]
   10fa2:	3301      	adds	r3, #1
   10fa4:	f88d 300e 	strb.w	r3, [sp, #14]
   10fa8:	490b      	ldr	r1, [pc, #44]	; (10fd8 <Pwm_Init+0x148>)
   10faa:	9a02      	ldr	r2, [sp, #8]
   10fac:	4613      	mov	r3, r2
   10fae:	005b      	lsls	r3, r3, #1
   10fb0:	4413      	add	r3, r2
   10fb2:	00db      	lsls	r3, r3, #3
   10fb4:	440b      	add	r3, r1
   10fb6:	3304      	adds	r3, #4
   10fb8:	681b      	ldr	r3, [r3, #0]
   10fba:	781b      	ldrb	r3, [r3, #0]
   10fbc:	f89d 200e 	ldrb.w	r2, [sp, #14]
   10fc0:	429a      	cmp	r2, r3
   10fc2:	d3ba      	bcc.n	10f3a <Pwm_Init+0xaa>
#endif

#if (PWM_VALIDATE_GLOBAL_CONFIG_CALL == STD_ON)
    }

    Pwm_EndValidateGlobalConfigCall(CoreId, CallIsValid, PWM_INIT_ID);
   10fc4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10fc8:	2200      	movs	r2, #0
   10fca:	4619      	mov	r1, r3
   10fcc:	9802      	ldr	r0, [sp, #8]
   10fce:	f7ff fe1f 	bl	10c10 <Pwm_EndValidateGlobalConfigCall>
#endif
}
   10fd2:	bf00      	nop
   10fd4:	b004      	add	sp, #16
   10fd6:	bd10      	pop	{r4, pc}
   10fd8:	1fff8b3c 	.word	0x1fff8b3c

00010fdc <Pwm_DeInit>:
*
* @implements   Pwm_DeInit_Activity
*
*/
void Pwm_DeInit(void)
{
   10fdc:	b500      	push	{lr}
   10fde:	b085      	sub	sp, #20
#endif
    uint32                      CoreId;
    uint8                       Index;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
   10fe0:	2300      	movs	r3, #0
   10fe2:	9302      	str	r3, [sp, #8]

#if (PWM_VALIDATE_GLOBAL_CONFIG_CALL == STD_ON)
    CallIsValid = Pwm_ValidateGlobalConfigCall(CoreId, PWM_DEINIT_ID);
   10fe4:	2101      	movs	r1, #1
   10fe6:	9802      	ldr	r0, [sp, #8]
   10fe8:	f7ff fdda 	bl	10ba0 <Pwm_ValidateGlobalConfigCall>
   10fec:	4603      	mov	r3, r0
   10fee:	f88d 3007 	strb.w	r3, [sp, #7]

    if ((Std_ReturnType)E_OK == CallIsValid)
   10ff2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10ff6:	2b00      	cmp	r3, #0
   10ff8:	f040 808e 	bne.w	11118 <Pwm_DeInit+0x13c>
    {
#endif

        /* All validations passed. Here starts the actual functional code of the function */
        /* Deinitialize all channels */
        for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
   10ffc:	2300      	movs	r3, #0
   10ffe:	f88d 300f 	strb.w	r3, [sp, #15]
   11002:	e02a      	b.n	1105a <Pwm_DeInit+0x7e>
        {
            Pwm_Ipw_DeInit(&((*Pwm_aState[CoreId].PwmChannelConfigs)[Index].IpwChannelCfg), (*Pwm_aState[CoreId].PwmChannelConfigs)[Index].ChannelIdleState);
   11004:	494a      	ldr	r1, [pc, #296]	; (11130 <Pwm_DeInit+0x154>)
   11006:	9a02      	ldr	r2, [sp, #8]
   11008:	4613      	mov	r3, r2
   1100a:	005b      	lsls	r3, r3, #1
   1100c:	4413      	add	r3, r2
   1100e:	00db      	lsls	r3, r3, #3
   11010:	440b      	add	r3, r1
   11012:	3310      	adds	r3, #16
   11014:	6819      	ldr	r1, [r3, #0]
   11016:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1101a:	4613      	mov	r3, r2
   1101c:	005b      	lsls	r3, r3, #1
   1101e:	4413      	add	r3, r2
   11020:	00db      	lsls	r3, r3, #3
   11022:	440b      	add	r3, r1
   11024:	f103 0008 	add.w	r0, r3, #8
   11028:	4941      	ldr	r1, [pc, #260]	; (11130 <Pwm_DeInit+0x154>)
   1102a:	9a02      	ldr	r2, [sp, #8]
   1102c:	4613      	mov	r3, r2
   1102e:	005b      	lsls	r3, r3, #1
   11030:	4413      	add	r3, r2
   11032:	00db      	lsls	r3, r3, #3
   11034:	440b      	add	r3, r1
   11036:	3310      	adds	r3, #16
   11038:	6819      	ldr	r1, [r3, #0]
   1103a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1103e:	4613      	mov	r3, r2
   11040:	005b      	lsls	r3, r3, #1
   11042:	4413      	add	r3, r2
   11044:	00db      	lsls	r3, r3, #3
   11046:	440b      	add	r3, r1
   11048:	695b      	ldr	r3, [r3, #20]
   1104a:	4619      	mov	r1, r3
   1104c:	f000 fa2e 	bl	114ac <Pwm_Ipw_DeInit>
        for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
   11050:	f89d 300f 	ldrb.w	r3, [sp, #15]
   11054:	3301      	adds	r3, #1
   11056:	f88d 300f 	strb.w	r3, [sp, #15]
   1105a:	4935      	ldr	r1, [pc, #212]	; (11130 <Pwm_DeInit+0x154>)
   1105c:	9a02      	ldr	r2, [sp, #8]
   1105e:	4613      	mov	r3, r2
   11060:	005b      	lsls	r3, r3, #1
   11062:	4413      	add	r3, r2
   11064:	00db      	lsls	r3, r3, #3
   11066:	440b      	add	r3, r1
   11068:	3304      	adds	r3, #4
   1106a:	681b      	ldr	r3, [r3, #0]
   1106c:	781b      	ldrb	r3, [r3, #0]
   1106e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   11072:	429a      	cmp	r2, r3
   11074:	d3c6      	bcc.n	11004 <Pwm_DeInit+0x28>
        }

#if (PWM_HW_INSTANCE_USED == STD_ON)
        ConfigPtr =  Pwm_aState[CoreId].PwmConfig;
   11076:	492e      	ldr	r1, [pc, #184]	; (11130 <Pwm_DeInit+0x154>)
   11078:	9a02      	ldr	r2, [sp, #8]
   1107a:	4613      	mov	r3, r2
   1107c:	005b      	lsls	r3, r3, #1
   1107e:	4413      	add	r3, r2
   11080:	00db      	lsls	r3, r3, #3
   11082:	440b      	add	r3, r1
   11084:	3304      	adds	r3, #4
   11086:	681b      	ldr	r3, [r3, #0]
   11088:	9300      	str	r3, [sp, #0]
        /* IPW call to hw instance initialization when PWM controls the entire hw instance */
        for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
   1108a:	2300      	movs	r3, #0
   1108c:	f88d 300f 	strb.w	r3, [sp, #15]
   11090:	e010      	b.n	110b4 <Pwm_DeInit+0xd8>
        {
            Pwm_Ipw_DeInitInstance(&((*ConfigPtr->PwmInstancesConfig)[Index]));
   11092:	9b00      	ldr	r3, [sp, #0]
   11094:	68d9      	ldr	r1, [r3, #12]
   11096:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1109a:	4613      	mov	r3, r2
   1109c:	005b      	lsls	r3, r3, #1
   1109e:	4413      	add	r3, r2
   110a0:	009b      	lsls	r3, r3, #2
   110a2:	440b      	add	r3, r1
   110a4:	4618      	mov	r0, r3
   110a6:	f000 fa21 	bl	114ec <Pwm_Ipw_DeInitInstance>
        for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
   110aa:	f89d 300f 	ldrb.w	r3, [sp, #15]
   110ae:	3301      	adds	r3, #1
   110b0:	f88d 300f 	strb.w	r3, [sp, #15]
   110b4:	491e      	ldr	r1, [pc, #120]	; (11130 <Pwm_DeInit+0x154>)
   110b6:	9a02      	ldr	r2, [sp, #8]
   110b8:	4613      	mov	r3, r2
   110ba:	005b      	lsls	r3, r3, #1
   110bc:	4413      	add	r3, r2
   110be:	00db      	lsls	r3, r3, #3
   110c0:	440b      	add	r3, r1
   110c2:	3304      	adds	r3, #4
   110c4:	681b      	ldr	r3, [r3, #0]
   110c6:	7a1b      	ldrb	r3, [r3, #8]
   110c8:	f89d 200f 	ldrb.w	r2, [sp, #15]
   110cc:	429a      	cmp	r2, r3
   110ce:	d3e0      	bcc.n	11092 <Pwm_DeInit+0xb6>
        }
#endif
        /* Set global configuration pointer back to NULL_PTR */
        Pwm_aState[CoreId].PwmConfig = NULL_PTR;
   110d0:	4917      	ldr	r1, [pc, #92]	; (11130 <Pwm_DeInit+0x154>)
   110d2:	9a02      	ldr	r2, [sp, #8]
   110d4:	4613      	mov	r3, r2
   110d6:	005b      	lsls	r3, r3, #1
   110d8:	4413      	add	r3, r2
   110da:	00db      	lsls	r3, r3, #3
   110dc:	440b      	add	r3, r1
   110de:	3304      	adds	r3, #4
   110e0:	2200      	movs	r2, #0
   110e2:	601a      	str	r2, [r3, #0]

        /* Set all channels config to NULL_PTR */
        for(Index = 0; Index < PWM_CONFIG_LOGIC_CHANNELS; Index++)
   110e4:	2300      	movs	r3, #0
   110e6:	f88d 300f 	strb.w	r3, [sp, #15]
   110ea:	e011      	b.n	11110 <Pwm_DeInit+0x134>
        {
            Pwm_aState[CoreId].PwmChannelConfigs[Index] = NULL_PTR;
   110ec:	f89d 100f 	ldrb.w	r1, [sp, #15]
   110f0:	480f      	ldr	r0, [pc, #60]	; (11130 <Pwm_DeInit+0x154>)
   110f2:	9a02      	ldr	r2, [sp, #8]
   110f4:	4613      	mov	r3, r2
   110f6:	005b      	lsls	r3, r3, #1
   110f8:	4413      	add	r3, r2
   110fa:	005b      	lsls	r3, r3, #1
   110fc:	440b      	add	r3, r1
   110fe:	3304      	adds	r3, #4
   11100:	2200      	movs	r2, #0
   11102:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        for(Index = 0; Index < PWM_CONFIG_LOGIC_CHANNELS; Index++)
   11106:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1110a:	3301      	adds	r3, #1
   1110c:	f88d 300f 	strb.w	r3, [sp, #15]
   11110:	f89d 300f 	ldrb.w	r3, [sp, #15]
   11114:	2b00      	cmp	r3, #0
   11116:	d0e9      	beq.n	110ec <Pwm_DeInit+0x110>
#endif

#if (PWM_VALIDATE_GLOBAL_CONFIG_CALL == STD_ON)
    }

    Pwm_EndValidateGlobalConfigCall(CoreId, CallIsValid, PWM_DEINIT_ID);
   11118:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1111c:	2201      	movs	r2, #1
   1111e:	4619      	mov	r1, r3
   11120:	9802      	ldr	r0, [sp, #8]
   11122:	f7ff fd75 	bl	10c10 <Pwm_EndValidateGlobalConfigCall>
#endif

}
   11126:	bf00      	nop
   11128:	b005      	add	sp, #20
   1112a:	f85d fb04 	ldr.w	pc, [sp], #4
   1112e:	bf00      	nop
   11130:	1fff8b3c 	.word	0x1fff8b3c

00011134 <Pwm_SetDutyCycle>:
* @implements   Pwm_SetDutyCycle_Activity
*
*/
void Pwm_SetDutyCycle(Pwm_ChannelType   ChannelNumber,
                      uint16            DutyCycle)
{
   11134:	b500      	push	{lr}
   11136:	b087      	sub	sp, #28
   11138:	4603      	mov	r3, r0
   1113a:	460a      	mov	r2, r1
   1113c:	f88d 3007 	strb.w	r3, [sp, #7]
   11140:	4613      	mov	r3, r2
   11142:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint32          CoreId;
    Pwm_ChannelType PartitionChannelIdx;
    Std_ReturnType  RetVal = (Std_ReturnType)E_OK;
   11146:	2300      	movs	r3, #0
   11148:	f88d 3017 	strb.w	r3, [sp, #23]

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
   1114c:	2300      	movs	r3, #0
   1114e:	9304      	str	r3, [sp, #16]

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    if ((Std_ReturnType)E_OK == Pwm_ValidateChannelConfigCall(CoreId, ChannelNumber, PWM_SETDUTYCYCLE_ID))
   11150:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11154:	2202      	movs	r2, #2
   11156:	4619      	mov	r1, r3
   11158:	9804      	ldr	r0, [sp, #16]
   1115a:	f7ff fd81 	bl	10c60 <Pwm_ValidateChannelConfigCall>
   1115e:	4603      	mov	r3, r0
   11160:	2b00      	cmp	r3, #0
   11162:	d136      	bne.n	111d2 <Pwm_SetDutyCycle+0x9e>
    {
#endif
        PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
   11164:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11168:	4619      	mov	r1, r3
   1116a:	9804      	ldr	r0, [sp, #16]
   1116c:	f7ff fd0e 	bl	10b8c <Pwm_GetPartitionChannelIdx>
   11170:	4603      	mov	r3, r0
   11172:	f88d 300f 	strb.w	r3, [sp, #15]

#if (PWM_PARAM_CHECK == STD_ON)
        if ((Std_ReturnType)E_OK == Pwm_ValidateParamDuty(DutyCycle, PWM_SETDUTYCYCLE_ID))
   11176:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1117a:	2102      	movs	r1, #2
   1117c:	4618      	mov	r0, r3
   1117e:	f7ff fde9 	bl	10d54 <Pwm_ValidateParamDuty>
   11182:	4603      	mov	r3, r0
   11184:	2b00      	cmp	r3, #0
   11186:	d124      	bne.n	111d2 <Pwm_SetDutyCycle+0x9e>
        {
#endif
            /* All validations passed. Here starts the actual functional code of the function */
            RetVal = Pwm_Ipw_SetDutyCycle(DutyCycle, &((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].IpwChannelCfg));
   11188:	4916      	ldr	r1, [pc, #88]	; (111e4 <Pwm_SetDutyCycle+0xb0>)
   1118a:	9a04      	ldr	r2, [sp, #16]
   1118c:	4613      	mov	r3, r2
   1118e:	005b      	lsls	r3, r3, #1
   11190:	4413      	add	r3, r2
   11192:	00db      	lsls	r3, r3, #3
   11194:	440b      	add	r3, r1
   11196:	3310      	adds	r3, #16
   11198:	6819      	ldr	r1, [r3, #0]
   1119a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1119e:	4613      	mov	r3, r2
   111a0:	005b      	lsls	r3, r3, #1
   111a2:	4413      	add	r3, r2
   111a4:	00db      	lsls	r3, r3, #3
   111a6:	440b      	add	r3, r1
   111a8:	f103 0208 	add.w	r2, r3, #8
   111ac:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   111b0:	4611      	mov	r1, r2
   111b2:	4618      	mov	r0, r3
   111b4:	f000 f9b6 	bl	11524 <Pwm_Ipw_SetDutyCycle>
   111b8:	4603      	mov	r3, r0
   111ba:	f88d 3017 	strb.w	r3, [sp, #23]

            /* Avoid compiler warning */
            (void)RetVal;

#if (PWM_PARAM_CHECK == STD_ON)
            if ((Std_ReturnType)E_OK != RetVal)
   111be:	f89d 3017 	ldrb.w	r3, [sp, #23]
   111c2:	2b00      	cmp	r3, #0
   111c4:	d005      	beq.n	111d2 <Pwm_SetDutyCycle+0x9e>
            {
                (void)Det_ReportError
   111c6:	2334      	movs	r3, #52	; 0x34
   111c8:	2202      	movs	r2, #2
   111ca:	2100      	movs	r1, #0
   111cc:	2079      	movs	r0, #121	; 0x79
   111ce:	f007 f921 	bl	18414 <Det_ReportError>
#endif

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    }

    Pwm_EndValidateChannelConfigCall(ChannelNumber);
   111d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   111d6:	4618      	mov	r0, r3
   111d8:	f7ff fd9c 	bl	10d14 <Pwm_EndValidateChannelConfigCall>
#endif

}
   111dc:	bf00      	nop
   111de:	b007      	add	sp, #28
   111e0:	f85d fb04 	ldr.w	pc, [sp], #4
   111e4:	1fff8b3c 	.word	0x1fff8b3c

000111e8 <Pwm_SetPeriodAndDuty>:
*
*/
void Pwm_SetPeriodAndDuty(Pwm_ChannelType   ChannelNumber,
                          Pwm_PeriodType    Period,
                          uint16            DutyCycle)
{
   111e8:	b500      	push	{lr}
   111ea:	b087      	sub	sp, #28
   111ec:	4603      	mov	r3, r0
   111ee:	f88d 300f 	strb.w	r3, [sp, #15]
   111f2:	460b      	mov	r3, r1
   111f4:	f8ad 300c 	strh.w	r3, [sp, #12]
   111f8:	4613      	mov	r3, r2
   111fa:	f8ad 300a 	strh.w	r3, [sp, #10]
    uint32          CoreId;
    Pwm_ChannelType PartitionChannelIdx;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
   111fe:	2300      	movs	r3, #0
   11200:	9305      	str	r3, [sp, #20]

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    if ((Std_ReturnType)E_OK == Pwm_ValidateChannelConfigCall(CoreId, ChannelNumber, PWM_SETPERIODANDDUTY_ID))
   11202:	f89d 300f 	ldrb.w	r3, [sp, #15]
   11206:	2203      	movs	r2, #3
   11208:	4619      	mov	r1, r3
   1120a:	9805      	ldr	r0, [sp, #20]
   1120c:	f7ff fd28 	bl	10c60 <Pwm_ValidateChannelConfigCall>
   11210:	4603      	mov	r3, r0
   11212:	2b00      	cmp	r3, #0
   11214:	d147      	bne.n	112a6 <Pwm_SetPeriodAndDuty+0xbe>
    {
#endif
        PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
   11216:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1121a:	4619      	mov	r1, r3
   1121c:	9805      	ldr	r0, [sp, #20]
   1121e:	f7ff fcb5 	bl	10b8c <Pwm_GetPartitionChannelIdx>
   11222:	4603      	mov	r3, r0
   11224:	f88d 3013 	strb.w	r3, [sp, #19]

#if (PWM_PARAM_CHECK == STD_ON)
        if ((Std_ReturnType)E_OK == Pwm_ValidateParamsPeriodClass(CoreId, PartitionChannelIdx, (*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].PwmChannelClass, Period, PWM_SETPERIODANDDUTY_ID))
   11228:	4923      	ldr	r1, [pc, #140]	; (112b8 <Pwm_SetPeriodAndDuty+0xd0>)
   1122a:	9a05      	ldr	r2, [sp, #20]
   1122c:	4613      	mov	r3, r2
   1122e:	005b      	lsls	r3, r3, #1
   11230:	4413      	add	r3, r2
   11232:	00db      	lsls	r3, r3, #3
   11234:	440b      	add	r3, r1
   11236:	3310      	adds	r3, #16
   11238:	6819      	ldr	r1, [r3, #0]
   1123a:	f89d 2013 	ldrb.w	r2, [sp, #19]
   1123e:	4613      	mov	r3, r2
   11240:	005b      	lsls	r3, r3, #1
   11242:	4413      	add	r3, r2
   11244:	00db      	lsls	r3, r3, #3
   11246:	440b      	add	r3, r1
   11248:	685a      	ldr	r2, [r3, #4]
   1124a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1124e:	f89d 1013 	ldrb.w	r1, [sp, #19]
   11252:	2003      	movs	r0, #3
   11254:	9000      	str	r0, [sp, #0]
   11256:	9805      	ldr	r0, [sp, #20]
   11258:	f7ff fd9d 	bl	10d96 <Pwm_ValidateParamsPeriodClass>
   1125c:	4603      	mov	r3, r0
   1125e:	2b00      	cmp	r3, #0
   11260:	d121      	bne.n	112a6 <Pwm_SetPeriodAndDuty+0xbe>
        {
            if ((Std_ReturnType)E_OK == Pwm_ValidateParamDuty(DutyCycle, PWM_SETPERIODANDDUTY_ID))
   11262:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   11266:	2103      	movs	r1, #3
   11268:	4618      	mov	r0, r3
   1126a:	f7ff fd73 	bl	10d54 <Pwm_ValidateParamDuty>
   1126e:	4603      	mov	r3, r0
   11270:	2b00      	cmp	r3, #0
   11272:	d118      	bne.n	112a6 <Pwm_SetPeriodAndDuty+0xbe>
            {
#endif

                /* All validations passed. Here starts the actual functional code of the function */
                (void)Pwm_Ipw_SetPeriodAndDuty(Period, DutyCycle, &((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].IpwChannelCfg));
   11274:	4910      	ldr	r1, [pc, #64]	; (112b8 <Pwm_SetPeriodAndDuty+0xd0>)
   11276:	9a05      	ldr	r2, [sp, #20]
   11278:	4613      	mov	r3, r2
   1127a:	005b      	lsls	r3, r3, #1
   1127c:	4413      	add	r3, r2
   1127e:	00db      	lsls	r3, r3, #3
   11280:	440b      	add	r3, r1
   11282:	3310      	adds	r3, #16
   11284:	6819      	ldr	r1, [r3, #0]
   11286:	f89d 2013 	ldrb.w	r2, [sp, #19]
   1128a:	4613      	mov	r3, r2
   1128c:	005b      	lsls	r3, r3, #1
   1128e:	4413      	add	r3, r2
   11290:	00db      	lsls	r3, r3, #3
   11292:	440b      	add	r3, r1
   11294:	f103 0208 	add.w	r2, r3, #8
   11298:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   1129c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   112a0:	4618      	mov	r0, r3
   112a2:	f000 f98b 	bl	115bc <Pwm_Ipw_SetPeriodAndDuty>
#endif

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    }

    Pwm_EndValidateChannelConfigCall(ChannelNumber);
   112a6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   112aa:	4618      	mov	r0, r3
   112ac:	f7ff fd32 	bl	10d14 <Pwm_EndValidateChannelConfigCall>
#endif

}
   112b0:	bf00      	nop
   112b2:	b007      	add	sp, #28
   112b4:	f85d fb04 	ldr.w	pc, [sp], #4
   112b8:	1fff8b3c 	.word	0x1fff8b3c

000112bc <Pwm_SetOutputToIdle>:
*
* @implements   Pwm_SetOutputToIdle_Activity
*
*/
void Pwm_SetOutputToIdle(Pwm_ChannelType ChannelNumber)
{
   112bc:	b500      	push	{lr}
   112be:	b085      	sub	sp, #20
   112c0:	4603      	mov	r3, r0
   112c2:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32          CoreId;
    Pwm_ChannelType PartitionChannelIdx;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
   112c6:	2300      	movs	r3, #0
   112c8:	9303      	str	r3, [sp, #12]

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    if ((Std_ReturnType)E_OK == Pwm_ValidateChannelConfigCall(CoreId, ChannelNumber, PWM_SETOUTPUTTOIDLE_ID))
   112ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
   112ce:	2204      	movs	r2, #4
   112d0:	4619      	mov	r1, r3
   112d2:	9803      	ldr	r0, [sp, #12]
   112d4:	f7ff fcc4 	bl	10c60 <Pwm_ValidateChannelConfigCall>
   112d8:	4603      	mov	r3, r0
   112da:	2b00      	cmp	r3, #0
   112dc:	d143      	bne.n	11366 <Pwm_SetOutputToIdle+0xaa>
    {
#endif

        PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
   112de:	f89d 3007 	ldrb.w	r3, [sp, #7]
   112e2:	4619      	mov	r1, r3
   112e4:	9803      	ldr	r0, [sp, #12]
   112e6:	f7ff fc51 	bl	10b8c <Pwm_GetPartitionChannelIdx>
   112ea:	4603      	mov	r3, r0
   112ec:	f88d 300b 	strb.w	r3, [sp, #11]

#if (defined(PWM_SETOUTPUTTOIDLE_PLAUSABILITY) && (PWM_SETOUTPUTTOIDLE_PLAUSABILITY == STD_ON) && (PWM_PARAM_CHECK == STD_ON))
        if((Std_ReturnType)E_OK == Pwm_ValidateSetOutPutToIdle(CoreId, PartitionChannelIdx))
   112f0:	f89d 300b 	ldrb.w	r3, [sp, #11]
   112f4:	4619      	mov	r1, r3
   112f6:	9803      	ldr	r0, [sp, #12]
   112f8:	f7ff fd98 	bl	10e2c <Pwm_ValidateSetOutPutToIdle>
   112fc:	4603      	mov	r3, r0
   112fe:	2b00      	cmp	r3, #0
   11300:	d131      	bne.n	11366 <Pwm_SetOutputToIdle+0xaa>
        {
#endif /* PWM_SETOUTPUTTOIDLE_PLAUSABILITY && PWM_PARAM_CHECK */

            /* All validations passed. Here starts the actual functional code of the function */
            Pwm_Ipw_SetOutputToIdle((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].ChannelIdleState, &((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].IpwChannelCfg));
   11302:	491d      	ldr	r1, [pc, #116]	; (11378 <Pwm_SetOutputToIdle+0xbc>)
   11304:	9a03      	ldr	r2, [sp, #12]
   11306:	4613      	mov	r3, r2
   11308:	005b      	lsls	r3, r3, #1
   1130a:	4413      	add	r3, r2
   1130c:	00db      	lsls	r3, r3, #3
   1130e:	440b      	add	r3, r1
   11310:	3310      	adds	r3, #16
   11312:	6819      	ldr	r1, [r3, #0]
   11314:	f89d 200b 	ldrb.w	r2, [sp, #11]
   11318:	4613      	mov	r3, r2
   1131a:	005b      	lsls	r3, r3, #1
   1131c:	4413      	add	r3, r2
   1131e:	00db      	lsls	r3, r3, #3
   11320:	440b      	add	r3, r1
   11322:	6958      	ldr	r0, [r3, #20]
   11324:	4914      	ldr	r1, [pc, #80]	; (11378 <Pwm_SetOutputToIdle+0xbc>)
   11326:	9a03      	ldr	r2, [sp, #12]
   11328:	4613      	mov	r3, r2
   1132a:	005b      	lsls	r3, r3, #1
   1132c:	4413      	add	r3, r2
   1132e:	00db      	lsls	r3, r3, #3
   11330:	440b      	add	r3, r1
   11332:	3310      	adds	r3, #16
   11334:	6819      	ldr	r1, [r3, #0]
   11336:	f89d 200b 	ldrb.w	r2, [sp, #11]
   1133a:	4613      	mov	r3, r2
   1133c:	005b      	lsls	r3, r3, #1
   1133e:	4413      	add	r3, r2
   11340:	00db      	lsls	r3, r3, #3
   11342:	440b      	add	r3, r1
   11344:	3308      	adds	r3, #8
   11346:	4619      	mov	r1, r3
   11348:	f000 f97e 	bl	11648 <Pwm_Ipw_SetOutputToIdle>

            /* Mark the channel in idle output mode */
            Pwm_aState[CoreId].PwmChannelIdleState[PartitionChannelIdx] = TRUE;
   1134c:	f89d 100b 	ldrb.w	r1, [sp, #11]
   11350:	4809      	ldr	r0, [pc, #36]	; (11378 <Pwm_SetOutputToIdle+0xbc>)
   11352:	9a03      	ldr	r2, [sp, #12]
   11354:	4613      	mov	r3, r2
   11356:	005b      	lsls	r3, r3, #1
   11358:	4413      	add	r3, r2
   1135a:	00db      	lsls	r3, r3, #3
   1135c:	4403      	add	r3, r0
   1135e:	440b      	add	r3, r1
   11360:	3314      	adds	r3, #20
   11362:	2201      	movs	r2, #1
   11364:	701a      	strb	r2, [r3, #0]
#endif /* PWM_SETOUTPUTTOIDLE_PLAUSABILITY && PWM_PARAM_CHECK */

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    }

    Pwm_EndValidateChannelConfigCall(ChannelNumber);
   11366:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1136a:	4618      	mov	r0, r3
   1136c:	f7ff fcd2 	bl	10d14 <Pwm_EndValidateChannelConfigCall>
#endif

}
   11370:	bf00      	nop
   11372:	b005      	add	sp, #20
   11374:	f85d fb04 	ldr.w	pc, [sp], #4
   11378:	1fff8b3c 	.word	0x1fff8b3c

0001137c <Pwm_GetVersionInfo>:
*
* @implements   Pwm_GetVersionInfo_Activity
*
*/
void Pwm_GetVersionInfo(Std_VersionInfoType * versioninfo)
{
   1137c:	b500      	push	{lr}
   1137e:	b083      	sub	sp, #12
   11380:	9001      	str	r0, [sp, #4]
#if (PWM_DEV_ERROR_DETECT == STD_ON)
    if (NULL_PTR != versioninfo)
   11382:	9b01      	ldr	r3, [sp, #4]
   11384:	2b00      	cmp	r3, #0
   11386:	d00f      	beq.n	113a8 <Pwm_GetVersionInfo+0x2c>
    {
#endif

        (versioninfo)->vendorID         = (uint16)PWM_VENDOR_ID;
   11388:	9b01      	ldr	r3, [sp, #4]
   1138a:	222b      	movs	r2, #43	; 0x2b
   1138c:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID         = (uint16)PWM_MODULE_ID;
   1138e:	9b01      	ldr	r3, [sp, #4]
   11390:	2279      	movs	r2, #121	; 0x79
   11392:	805a      	strh	r2, [r3, #2]

        (versioninfo)->sw_major_version = (uint8)PWM_SW_MAJOR_VERSION;
   11394:	9b01      	ldr	r3, [sp, #4]
   11396:	2202      	movs	r2, #2
   11398:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)PWM_SW_MINOR_VERSION;
   1139a:	9b01      	ldr	r3, [sp, #4]
   1139c:	2200      	movs	r2, #0
   1139e:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)PWM_SW_PATCH_VERSION;
   113a0:	9b01      	ldr	r3, [sp, #4]
   113a2:	2200      	movs	r2, #0
   113a4:	719a      	strb	r2, [r3, #6]
            (uint8)  PWM_E_PARAM_POINTER
        );
    }
#endif

}
   113a6:	e005      	b.n	113b4 <Pwm_GetVersionInfo+0x38>
        (void)Det_ReportError
   113a8:	2315      	movs	r3, #21
   113aa:	2208      	movs	r2, #8
   113ac:	2100      	movs	r1, #0
   113ae:	2079      	movs	r0, #121	; 0x79
   113b0:	f007 f830 	bl	18414 <Det_ReportError>
}
   113b4:	bf00      	nop
   113b6:	b003      	add	sp, #12
   113b8:	f85d fb04 	ldr.w	pc, [sp], #4

000113bc <Pwm_Ipw_Init>:
*
* @return       void
*
*/
void Pwm_Ipw_Init(const Pwm_IpwChannelConfigType * const IpConfig)
{
   113bc:	b410      	push	{r4}
   113be:	b083      	sub	sp, #12
   113c0:	9001      	str	r0, [sp, #4]

    switch(IpConfig->ChannelType)
   113c2:	9b01      	ldr	r3, [sp, #4]
   113c4:	681b      	ldr	r3, [r3, #0]
   113c6:	2b00      	cmp	r3, #0
   113c8:	d010      	beq.n	113ec <Pwm_Ipw_Init+0x30>
   113ca:	2b01      	cmp	r3, #1
   113cc:	d110      	bne.n	113f0 <Pwm_Ipw_Init+0x34>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            /* Duty cycle of Ftm Ip */
            Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = IpConfig->ChannelDutyCycle;
   113ce:	9b01      	ldr	r3, [sp, #4]
   113d0:	7a1b      	ldrb	r3, [r3, #8]
   113d2:	461c      	mov	r4, r3
   113d4:	9b01      	ldr	r3, [sp, #4]
   113d6:	685b      	ldr	r3, [r3, #4]
   113d8:	781b      	ldrb	r3, [r3, #0]
   113da:	4618      	mov	r0, r3
   113dc:	9b01      	ldr	r3, [sp, #4]
   113de:	8959      	ldrh	r1, [r3, #10]
   113e0:	4a06      	ldr	r2, [pc, #24]	; (113fc <Pwm_Ipw_Init+0x40>)
   113e2:	00e3      	lsls	r3, r4, #3
   113e4:	4403      	add	r3, r0
   113e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            break;
   113ea:	e002      	b.n	113f2 <Pwm_Ipw_Init+0x36>
            }
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
   113ec:	bf00      	nop
   113ee:	e000      	b.n	113f2 <Pwm_Ipw_Init+0x36>
        default:
            /* Nothing to do. */
            break;
   113f0:	bf00      	nop
    }
}
   113f2:	bf00      	nop
   113f4:	b003      	add	sp, #12
   113f6:	f85d 4b04 	ldr.w	r4, [sp], #4
   113fa:	4770      	bx	lr
   113fc:	1fff91d4 	.word	0x1fff91d4

00011400 <Pwm_Ipw_InitInstance>:
*
* @return       void
*
*/
void Pwm_Ipw_InitInstance(const Pwm_IpwInstanceConfigType * const IpConfig)
{
   11400:	b500      	push	{lr}
   11402:	b085      	sub	sp, #20
   11404:	9001      	str	r0, [sp, #4]
#if (PWM_FTM_USED == STD_ON)
    uint8 Index = 0U;
   11406:	2300      	movs	r3, #0
   11408:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 ChannelId = 0U;
   1140c:	2300      	movs	r3, #0
   1140e:	f88d 300e 	strb.w	r3, [sp, #14]
#endif
    switch(IpConfig->InstanceType)
   11412:	9b01      	ldr	r3, [sp, #4]
   11414:	685b      	ldr	r3, [r3, #4]
   11416:	2b00      	cmp	r3, #0
   11418:	d03c      	beq.n	11494 <Pwm_Ipw_InitInstance+0x94>
   1141a:	2b01      	cmp	r3, #1
   1141c:	d13c      	bne.n	11498 <Pwm_Ipw_InitInstance+0x98>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_INSTANCE_FTM:
            if (NULL_PTR != IpConfig->FtmInsConfig)
   1141e:	9b01      	ldr	r3, [sp, #4]
   11420:	689b      	ldr	r3, [r3, #8]
   11422:	2b00      	cmp	r3, #0
   11424:	d03a      	beq.n	1149c <Pwm_Ipw_InitInstance+0x9c>
            {
                /* Call Ftm IP initialize instances */
                Ftm_Pwm_Ip_Init(IpConfig->InstanceId, (const Ftm_Pwm_Ip_UserCfgType *)IpConfig->FtmInsConfig);
   11426:	9b01      	ldr	r3, [sp, #4]
   11428:	781a      	ldrb	r2, [r3, #0]
   1142a:	9b01      	ldr	r3, [sp, #4]
   1142c:	689b      	ldr	r3, [r3, #8]
   1142e:	4619      	mov	r1, r3
   11430:	4610      	mov	r0, r2
   11432:	f7fe fa0f 	bl	f854 <Ftm_Pwm_Ip_Init>

                /* Configure all channels in the user cfg */
                for (Index = 0; Index < IpConfig->FtmInsConfig->NoOfConfiguredCh; Index++)
   11436:	2300      	movs	r3, #0
   11438:	f88d 300f 	strb.w	r3, [sp, #15]
   1143c:	e022      	b.n	11484 <Pwm_Ipw_InitInstance+0x84>
                {
                    ChannelId = IpConfig->FtmInsConfig->ConfiguredChArray[Index]->ChannelId;
   1143e:	9b01      	ldr	r3, [sp, #4]
   11440:	689b      	ldr	r3, [r3, #8]
   11442:	685a      	ldr	r2, [r3, #4]
   11444:	f89d 300f 	ldrb.w	r3, [sp, #15]
   11448:	009b      	lsls	r3, r3, #2
   1144a:	4413      	add	r3, r2
   1144c:	681b      	ldr	r3, [r3, #0]
   1144e:	781b      	ldrb	r3, [r3, #0]
   11450:	f88d 300e 	strb.w	r3, [sp, #14]
                    /* Update the polarity of each channel */
                    Ftm_Pwm_Ip_aPolarity[IpConfig->InstanceId][ChannelId] = IpConfig->FtmInsConfig->ConfiguredChArray[Index]->Polarity;
   11454:	9b01      	ldr	r3, [sp, #4]
   11456:	689b      	ldr	r3, [r3, #8]
   11458:	685a      	ldr	r2, [r3, #4]
   1145a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1145e:	009b      	lsls	r3, r3, #2
   11460:	4413      	add	r3, r2
   11462:	681a      	ldr	r2, [r3, #0]
   11464:	9b01      	ldr	r3, [sp, #4]
   11466:	781b      	ldrb	r3, [r3, #0]
   11468:	4619      	mov	r1, r3
   1146a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1146e:	6a12      	ldr	r2, [r2, #32]
   11470:	480d      	ldr	r0, [pc, #52]	; (114a8 <Pwm_Ipw_InitInstance+0xa8>)
   11472:	00c9      	lsls	r1, r1, #3
   11474:	440b      	add	r3, r1
   11476:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                for (Index = 0; Index < IpConfig->FtmInsConfig->NoOfConfiguredCh; Index++)
   1147a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1147e:	3301      	adds	r3, #1
   11480:	f88d 300f 	strb.w	r3, [sp, #15]
   11484:	9b01      	ldr	r3, [sp, #4]
   11486:	689b      	ldr	r3, [r3, #8]
   11488:	7a1b      	ldrb	r3, [r3, #8]
   1148a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1148e:	429a      	cmp	r2, r3
   11490:	d3d5      	bcc.n	1143e <Pwm_Ipw_InitInstance+0x3e>
                }
            }
            break;
   11492:	e003      	b.n	1149c <Pwm_Ipw_InitInstance+0x9c>
#endif
        case PWM_INSTANCE_NONE:
            /* Nothing to do. No hw instance assigned to the logical instance */
            break;
   11494:	bf00      	nop
   11496:	e002      	b.n	1149e <Pwm_Ipw_InitInstance+0x9e>
        default:
            /* Nothing to do. */
            break;
   11498:	bf00      	nop
   1149a:	e000      	b.n	1149e <Pwm_Ipw_InitInstance+0x9e>
            break;
   1149c:	bf00      	nop
    }
}
   1149e:	bf00      	nop
   114a0:	b005      	add	sp, #20
   114a2:	f85d fb04 	ldr.w	pc, [sp], #4
   114a6:	bf00      	nop
   114a8:	1fff9154 	.word	0x1fff9154

000114ac <Pwm_Ipw_DeInit>:
*
* @return       void
*
*/
void Pwm_Ipw_DeInit(const Pwm_IpwChannelConfigType * const IpConfig, Pwm_OutputStateType ChannelIdleState)
{
   114ac:	b082      	sub	sp, #8
   114ae:	9001      	str	r0, [sp, #4]
   114b0:	9100      	str	r1, [sp, #0]

    switch(IpConfig->ChannelType)
   114b2:	9b01      	ldr	r3, [sp, #4]
   114b4:	681b      	ldr	r3, [r3, #0]
   114b6:	2b00      	cmp	r3, #0
   114b8:	d00f      	beq.n	114da <Pwm_Ipw_DeInit+0x2e>
   114ba:	2b01      	cmp	r3, #1
   114bc:	d10f      	bne.n	114de <Pwm_Ipw_DeInit+0x32>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            /* Duty cycle of Ftm Ip */
            Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = 0U;
   114be:	9b01      	ldr	r3, [sp, #4]
   114c0:	7a1b      	ldrb	r3, [r3, #8]
   114c2:	4618      	mov	r0, r3
   114c4:	9b01      	ldr	r3, [sp, #4]
   114c6:	685b      	ldr	r3, [r3, #4]
   114c8:	781b      	ldrb	r3, [r3, #0]
   114ca:	4619      	mov	r1, r3
   114cc:	4a06      	ldr	r2, [pc, #24]	; (114e8 <Pwm_Ipw_DeInit+0x3c>)
   114ce:	00c3      	lsls	r3, r0, #3
   114d0:	440b      	add	r3, r1
   114d2:	2100      	movs	r1, #0
   114d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            break;
   114d8:	e002      	b.n	114e0 <Pwm_Ipw_DeInit+0x34>
            }
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
   114da:	bf00      	nop
   114dc:	e000      	b.n	114e0 <Pwm_Ipw_DeInit+0x34>
        default:
            /* Nothing to do. */
            break;
   114de:	bf00      	nop
    }
    (void) ChannelIdleState;

}
   114e0:	bf00      	nop
   114e2:	b002      	add	sp, #8
   114e4:	4770      	bx	lr
   114e6:	bf00      	nop
   114e8:	1fff91d4 	.word	0x1fff91d4

000114ec <Pwm_Ipw_DeInitInstance>:
*
* @return       void
*
*/
void Pwm_Ipw_DeInitInstance(const Pwm_IpwInstanceConfigType * const IpConfig)
{
   114ec:	b500      	push	{lr}
   114ee:	b083      	sub	sp, #12
   114f0:	9001      	str	r0, [sp, #4]

    switch(IpConfig->InstanceType)
   114f2:	9b01      	ldr	r3, [sp, #4]
   114f4:	685b      	ldr	r3, [r3, #4]
   114f6:	2b00      	cmp	r3, #0
   114f8:	d00b      	beq.n	11512 <Pwm_Ipw_DeInitInstance+0x26>
   114fa:	2b01      	cmp	r3, #1
   114fc:	d10b      	bne.n	11516 <Pwm_Ipw_DeInitInstance+0x2a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_INSTANCE_FTM:
            if (NULL_PTR != IpConfig->FtmInsConfig)
   114fe:	9b01      	ldr	r3, [sp, #4]
   11500:	689b      	ldr	r3, [r3, #8]
   11502:	2b00      	cmp	r3, #0
   11504:	d009      	beq.n	1151a <Pwm_Ipw_DeInitInstance+0x2e>
            {
                /* Call Ftm IP initialize instances */
                Ftm_Pwm_Ip_DeInit(IpConfig->InstanceId);
   11506:	9b01      	ldr	r3, [sp, #4]
   11508:	781b      	ldrb	r3, [r3, #0]
   1150a:	4618      	mov	r0, r3
   1150c:	f7fe fa14 	bl	f938 <Ftm_Pwm_Ip_DeInit>
            }
            break;
   11510:	e003      	b.n	1151a <Pwm_Ipw_DeInitInstance+0x2e>
#endif
        case PWM_INSTANCE_NONE:
            /* Nothing to do. No hw instance assigned to the logical instance */
            break;
   11512:	bf00      	nop
   11514:	e002      	b.n	1151c <Pwm_Ipw_DeInitInstance+0x30>
        default:
            /* Nothing to do. */
            break;
   11516:	bf00      	nop
   11518:	e000      	b.n	1151c <Pwm_Ipw_DeInitInstance+0x30>
            break;
   1151a:	bf00      	nop
    }
}
   1151c:	bf00      	nop
   1151e:	b003      	add	sp, #12
   11520:	f85d fb04 	ldr.w	pc, [sp], #4

00011524 <Pwm_Ipw_SetDutyCycle>:
*               E_OK            The duty cycle is set to the new value
*
*/
Std_ReturnType Pwm_Ipw_SetDutyCycle(uint16                           DutyCycle,
                                    const Pwm_IpwChannelConfigType * const IpConfig)
{
   11524:	b500      	push	{lr}
   11526:	b085      	sub	sp, #20
   11528:	4603      	mov	r3, r0
   1152a:	9100      	str	r1, [sp, #0]
   1152c:	f8ad 3006 	strh.w	r3, [sp, #6]

    Std_ReturnType RetVal = (Std_ReturnType)E_OK;
   11530:	2300      	movs	r3, #0
   11532:	f88d 300f 	strb.w	r3, [sp, #15]
#if (PWM_FTM_USED == STD_ON)
    uint16 FtmDutyCycle = 0U;
   11536:	2300      	movs	r3, #0
   11538:	f8ad 300c 	strh.w	r3, [sp, #12]
#endif
#if (PWM_FLEXIO_USED == STD_ON)
    uint16 FlexioChDuty = 0U;
    uint16 FlexioPeriod = 0U;
#endif
    switch(IpConfig->ChannelType)
   1153c:	9b00      	ldr	r3, [sp, #0]
   1153e:	681b      	ldr	r3, [r3, #0]
   11540:	2b00      	cmp	r3, #0
   11542:	d02c      	beq.n	1159e <Pwm_Ipw_SetDutyCycle+0x7a>
   11544:	2b01      	cmp	r3, #1
   11546:	d12c      	bne.n	115a2 <Pwm_Ipw_SetDutyCycle+0x7e>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            if (NULL_PTR != IpConfig->FtmChConfig)
   11548:	9b00      	ldr	r3, [sp, #0]
   1154a:	685b      	ldr	r3, [r3, #4]
   1154c:	2b00      	cmp	r3, #0
   1154e:	d02a      	beq.n	115a6 <Pwm_Ipw_SetDutyCycle+0x82>
            {
                FtmDutyCycle = (uint16)(((uint32)Ftm_Pwm_Ip_aPeriod[IpConfig->ChannelInstanceId] * DutyCycle) / 0x8000U);
   11550:	9b00      	ldr	r3, [sp, #0]
   11552:	7a1b      	ldrb	r3, [r3, #8]
   11554:	461a      	mov	r2, r3
   11556:	4b17      	ldr	r3, [pc, #92]	; (115b4 <Pwm_Ipw_SetDutyCycle+0x90>)
   11558:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   1155c:	461a      	mov	r2, r3
   1155e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   11562:	fb02 f303 	mul.w	r3, r2, r3
   11566:	0bdb      	lsrs	r3, r3, #15
   11568:	f8ad 300c 	strh.w	r3, [sp, #12]
                /* Call Ftm IP initialize function */
                Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(IpConfig->ChannelInstanceId,
   1156c:	9b00      	ldr	r3, [sp, #0]
   1156e:	7a18      	ldrb	r0, [r3, #8]
                                                     ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId,
   11570:	9b00      	ldr	r3, [sp, #0]
   11572:	685b      	ldr	r3, [r3, #4]
                Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(IpConfig->ChannelInstanceId,
   11574:	7819      	ldrb	r1, [r3, #0]
   11576:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   1157a:	2301      	movs	r3, #1
   1157c:	f7fe fa2e 	bl	f9dc <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                                     FtmDutyCycle,
                                                     TRUE);
                /* Duty cycle of Ftm Ip */
                Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = DutyCycle;
   11580:	9b00      	ldr	r3, [sp, #0]
   11582:	7a1b      	ldrb	r3, [r3, #8]
   11584:	4618      	mov	r0, r3
   11586:	9b00      	ldr	r3, [sp, #0]
   11588:	685b      	ldr	r3, [r3, #4]
   1158a:	781b      	ldrb	r3, [r3, #0]
   1158c:	461a      	mov	r2, r3
   1158e:	490a      	ldr	r1, [pc, #40]	; (115b8 <Pwm_Ipw_SetDutyCycle+0x94>)
   11590:	00c3      	lsls	r3, r0, #3
   11592:	4413      	add	r3, r2
   11594:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   11598:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            }
            break;
   1159c:	e003      	b.n	115a6 <Pwm_Ipw_SetDutyCycle+0x82>
            Pwm_Ipw_aFlexioDutyCycle[IpConfig->ChannelInstanceId][(IpConfig->FlexioChConfig)->TimerId] = DutyCycle;
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
   1159e:	bf00      	nop
   115a0:	e002      	b.n	115a8 <Pwm_Ipw_SetDutyCycle+0x84>
        default:
            /* Nothing to do. */
            break;
   115a2:	bf00      	nop
   115a4:	e000      	b.n	115a8 <Pwm_Ipw_SetDutyCycle+0x84>
            break;
   115a6:	bf00      	nop
    }

    return RetVal;
   115a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   115ac:	4618      	mov	r0, r3
   115ae:	b005      	add	sp, #20
   115b0:	f85d fb04 	ldr.w	pc, [sp], #4
   115b4:	1fff8e2c 	.word	0x1fff8e2c
   115b8:	1fff91d4 	.word	0x1fff91d4

000115bc <Pwm_Ipw_SetPeriodAndDuty>:
*
*/
void Pwm_Ipw_SetPeriodAndDuty(Pwm_PeriodType                   Period,
                              uint16                           DutyCycle,
                              const Pwm_IpwChannelConfigType * const IpConfig)
{
   115bc:	b510      	push	{r4, lr}
   115be:	b086      	sub	sp, #24
   115c0:	4603      	mov	r3, r0
   115c2:	9202      	str	r2, [sp, #8]
   115c4:	f8ad 300e 	strh.w	r3, [sp, #14]
   115c8:	460b      	mov	r3, r1
   115ca:	f8ad 300c 	strh.w	r3, [sp, #12]

#if (PWM_FTM_USED == STD_ON)
    uint16 FtmDutyCycle = 0U;
   115ce:	2300      	movs	r3, #0
   115d0:	f8ad 3016 	strh.w	r3, [sp, #22]
#endif
#if (PWM_FLEXIO_USED == STD_ON)
    uint16 FlexioChDuty = 0U;
#endif

    switch(IpConfig->ChannelType)
   115d4:	9b02      	ldr	r3, [sp, #8]
   115d6:	681b      	ldr	r3, [r3, #0]
   115d8:	2b00      	cmp	r3, #0
   115da:	d02a      	beq.n	11632 <Pwm_Ipw_SetPeriodAndDuty+0x76>
   115dc:	2b01      	cmp	r3, #1
   115de:	d12a      	bne.n	11636 <Pwm_Ipw_SetPeriodAndDuty+0x7a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            if (NULL_PTR != IpConfig->FtmChConfig)
   115e0:	9b02      	ldr	r3, [sp, #8]
   115e2:	685b      	ldr	r3, [r3, #4]
   115e4:	2b00      	cmp	r3, #0
   115e6:	d028      	beq.n	1163a <Pwm_Ipw_SetPeriodAndDuty+0x7e>
            {
                FtmDutyCycle = (uint16)(((uint32)Period * DutyCycle) / 0x8000U);
   115e8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   115ec:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   115f0:	fb02 f303 	mul.w	r3, r2, r3
   115f4:	0bdb      	lsrs	r3, r3, #15
   115f6:	f8ad 3016 	strh.w	r3, [sp, #22]
                /* Call Ftm IP initialize function */
                Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(IpConfig->ChannelInstanceId,
   115fa:	9b02      	ldr	r3, [sp, #8]
   115fc:	7a18      	ldrb	r0, [r3, #8]
                                                  ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId,
   115fe:	9b02      	ldr	r3, [sp, #8]
   11600:	685b      	ldr	r3, [r3, #4]
                Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(IpConfig->ChannelInstanceId,
   11602:	7819      	ldrb	r1, [r3, #0]
   11604:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   11608:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1160c:	2401      	movs	r4, #1
   1160e:	9400      	str	r4, [sp, #0]
   11610:	f7fe fabe 	bl	fb90 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty>
                                                  Period,
                                                  FtmDutyCycle,
                                                  TRUE);
                /* Duty cycle of Ftm Ip */
                Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = DutyCycle;
   11614:	9b02      	ldr	r3, [sp, #8]
   11616:	7a1b      	ldrb	r3, [r3, #8]
   11618:	4618      	mov	r0, r3
   1161a:	9b02      	ldr	r3, [sp, #8]
   1161c:	685b      	ldr	r3, [r3, #4]
   1161e:	781b      	ldrb	r3, [r3, #0]
   11620:	461a      	mov	r2, r3
   11622:	4908      	ldr	r1, [pc, #32]	; (11644 <Pwm_Ipw_SetPeriodAndDuty+0x88>)
   11624:	00c3      	lsls	r3, r0, #3
   11626:	4413      	add	r3, r2
   11628:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   1162c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            }
            break;
   11630:	e003      	b.n	1163a <Pwm_Ipw_SetPeriodAndDuty+0x7e>
            Pwm_Ipw_aFlexioDutyCycle[IpConfig->ChannelInstanceId][(IpConfig->FlexioChConfig)->TimerId] = DutyCycle;
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
   11632:	bf00      	nop
   11634:	e002      	b.n	1163c <Pwm_Ipw_SetPeriodAndDuty+0x80>
        default:
            /* Nothing to do. */
            break;
   11636:	bf00      	nop
   11638:	e000      	b.n	1163c <Pwm_Ipw_SetPeriodAndDuty+0x80>
            break;
   1163a:	bf00      	nop
    }
}
   1163c:	bf00      	nop
   1163e:	b006      	add	sp, #24
   11640:	bd10      	pop	{r4, pc}
   11642:	bf00      	nop
   11644:	1fff91d4 	.word	0x1fff91d4

00011648 <Pwm_Ipw_SetOutputToIdle>:
*
* @return       void
*
*/
void Pwm_Ipw_SetOutputToIdle(const Pwm_OutputStateType IdleState, const Pwm_IpwChannelConfigType * const IpConfig)
{
   11648:	b500      	push	{lr}
   1164a:	b085      	sub	sp, #20
   1164c:	9001      	str	r0, [sp, #4]
   1164e:	9100      	str	r1, [sp, #0]
#if (PWM_FTM_USED == STD_ON)
    uint8 Instance  =  IpConfig->ChannelInstanceId;
   11650:	9b00      	ldr	r3, [sp, #0]
   11652:	7a1b      	ldrb	r3, [r3, #8]
   11654:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 Channel   =  ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId;
   11658:	9b00      	ldr	r3, [sp, #0]
   1165a:	685b      	ldr	r3, [r3, #4]
   1165c:	781b      	ldrb	r3, [r3, #0]
   1165e:	f88d 300e 	strb.w	r3, [sp, #14]
#endif

    switch(IpConfig->ChannelType)
   11662:	9b00      	ldr	r3, [sp, #0]
   11664:	681b      	ldr	r3, [r3, #0]
   11666:	2b00      	cmp	r3, #0
   11668:	d02e      	beq.n	116c8 <Pwm_Ipw_SetOutputToIdle+0x80>
   1166a:	2b01      	cmp	r3, #1
   1166c:	d12e      	bne.n	116cc <Pwm_Ipw_SetOutputToIdle+0x84>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            if ((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
   1166e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   11672:	f89d 300e 	ldrb.w	r3, [sp, #14]
   11676:	4919      	ldr	r1, [pc, #100]	; (116dc <Pwm_Ipw_SetOutputToIdle+0x94>)
   11678:	00d2      	lsls	r2, r2, #3
   1167a:	4413      	add	r3, r2
   1167c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   11680:	2b01      	cmp	r3, #1
   11682:	d125      	bne.n	116d0 <Pwm_Ipw_SetOutputToIdle+0x88>
            {
                /* update new state of channel */
                Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE;
   11684:	f89d 200f 	ldrb.w	r2, [sp, #15]
   11688:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1168c:	4913      	ldr	r1, [pc, #76]	; (116dc <Pwm_Ipw_SetOutputToIdle+0x94>)
   1168e:	00d2      	lsls	r2, r2, #3
   11690:	4413      	add	r3, r2
   11692:	2202      	movs	r2, #2
   11694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                
                Ftm_Pwm_Ip_SwOutputControl(Instance,
                                           Channel,
                                           ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->InitOut,
   11698:	9b00      	ldr	r3, [sp, #0]
   1169a:	685b      	ldr	r3, [r3, #4]
                Ftm_Pwm_Ip_SwOutputControl(Instance,
   1169c:	69da      	ldr	r2, [r3, #28]
   1169e:	f89d 100e 	ldrb.w	r1, [sp, #14]
   116a2:	f89d 000f 	ldrb.w	r0, [sp, #15]
   116a6:	2301      	movs	r3, #1
   116a8:	f7fe faf6 	bl	fc98 <Ftm_Pwm_Ip_SwOutputControl>
                                           TRUE);
                /* Duty cycle of Ftm Ip */
                Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = 0U;
   116ac:	9b00      	ldr	r3, [sp, #0]
   116ae:	7a1b      	ldrb	r3, [r3, #8]
   116b0:	4618      	mov	r0, r3
   116b2:	9b00      	ldr	r3, [sp, #0]
   116b4:	685b      	ldr	r3, [r3, #4]
   116b6:	781b      	ldrb	r3, [r3, #0]
   116b8:	4619      	mov	r1, r3
   116ba:	4a09      	ldr	r2, [pc, #36]	; (116e0 <Pwm_Ipw_SetOutputToIdle+0x98>)
   116bc:	00c3      	lsls	r3, r0, #3
   116be:	440b      	add	r3, r1
   116c0:	2100      	movs	r1, #0
   116c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }
            else
            {
                /* Do Nothing */
            }
            break;
   116c6:	e003      	b.n	116d0 <Pwm_Ipw_SetOutputToIdle+0x88>
            /* Nothing to do. this feature is not supported for Flexio */
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
   116c8:	bf00      	nop
   116ca:	e002      	b.n	116d2 <Pwm_Ipw_SetOutputToIdle+0x8a>
        default:
            /* Nothing to do. */
            break;
   116cc:	bf00      	nop
   116ce:	e000      	b.n	116d2 <Pwm_Ipw_SetOutputToIdle+0x8a>
            break;
   116d0:	bf00      	nop
    }

    (void) IdleState;

}
   116d2:	bf00      	nop
   116d4:	b005      	add	sp, #20
   116d6:	f85d fb04 	ldr.w	pc, [sp], #4
   116da:	bf00      	nop
   116dc:	1fff9004 	.word	0x1fff9004
   116e0:	1fff91d4 	.word	0x1fff91d4

000116e4 <Pwm_Ipw_ValidateSetOutPutToIdle>:
*               E_NOT_OK        The Idle state is not ready
*               E_OK            The Idle state is ready
*
*/
Std_ReturnType Pwm_Ipw_ValidateSetOutPutToIdle(const Pwm_IpwChannelConfigType * const IpConfig)
{
   116e4:	b084      	sub	sp, #16
   116e6:	9001      	str	r0, [sp, #4]
    /** @brief  Variable to store the value returned by the function */
    Std_ReturnType      RetVal = (Std_ReturnType)E_OK;
   116e8:	2300      	movs	r3, #0
   116ea:	f88d 300f 	strb.w	r3, [sp, #15]
    
    switch(IpConfig->ChannelType)
   116ee:	9b01      	ldr	r3, [sp, #4]
   116f0:	681b      	ldr	r3, [r3, #0]
   116f2:	2b01      	cmp	r3, #1
   116f4:	d103      	bne.n	116fe <Pwm_Ipw_ValidateSetOutPutToIdle+0x1a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            RetVal = (Std_ReturnType)E_OK;
   116f6:	2300      	movs	r3, #0
   116f8:	f88d 300f 	strb.w	r3, [sp, #15]
            break;
   116fc:	e003      	b.n	11706 <Pwm_Ipw_ValidateSetOutPutToIdle+0x22>
            RetVal = (Std_ReturnType)E_NOT_OK;
            break;
#endif
        case PWM_CHANNEL_NONE:
        default:
            RetVal = (Std_ReturnType)E_NOT_OK;
   116fe:	2301      	movs	r3, #1
   11700:	f88d 300f 	strb.w	r3, [sp, #15]
            break;
   11704:	bf00      	nop

    }

    return RetVal; 
   11706:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   1170a:	4618      	mov	r0, r3
   1170c:	b004      	add	sp, #16
   1170e:	4770      	bx	lr

00011710 <Pwm_Ipw_GetMaxPeriodValue>:
*
* @return       uint32
*
*/  
uint32 Pwm_Ipw_GetMaxPeriodValue(const Pwm_IpwChannelConfigType * const IpConfig)
{
   11710:	b084      	sub	sp, #16
   11712:	9001      	str	r0, [sp, #4]
    /** @brief  Store return value */
    uint32               RetVal = (uint32)0xFFFFU;
   11714:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11718:	9303      	str	r3, [sp, #12]

    switch(IpConfig->ChannelType)
   1171a:	9b01      	ldr	r3, [sp, #4]
   1171c:	681b      	ldr	r3, [r3, #0]
   1171e:	2b01      	cmp	r3, #1
   11720:	d103      	bne.n	1172a <Pwm_Ipw_GetMaxPeriodValue+0x1a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            RetVal = (uint32)0xFFFEU;
   11722:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   11726:	9303      	str	r3, [sp, #12]
            break;
   11728:	e000      	b.n	1172c <Pwm_Ipw_GetMaxPeriodValue+0x1c>
            break;
#endif
        case PWM_CHANNEL_NONE:
        default:
            /* Do Nothing */
            break;
   1172a:	bf00      	nop
    }

    return RetVal;
   1172c:	9b03      	ldr	r3, [sp, #12]
}
   1172e:	4618      	mov	r0, r3
   11730:	b004      	add	sp, #16
   11732:	4770      	bx	lr

00011734 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
   11734:	b500      	push	{lr}
   11736:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11738:	f7f0 f984 	bl	1a44 <Sys_GetCoreID>
   1173c:	4603      	mov	r3, r0
   1173e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId])
   11740:	4a10      	ldr	r2, [pc, #64]	; (11784 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
   11742:	9b01      	ldr	r3, [sp, #4]
   11744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11748:	2b00      	cmp	r3, #0
   1174a:	d10d      	bne.n	11768 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1174c:	f7ef f8d8 	bl	900 <Adc_schm_read_msr>
   11750:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11752:	9b00      	ldr	r3, [sp, #0]
   11754:	f003 0301 	and.w	r3, r3, #1
   11758:	2b00      	cmp	r3, #0
   1175a:	d100      	bne.n	1175e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1175c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   1175e:	490a      	ldr	r1, [pc, #40]	; (11788 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x54>)
   11760:	9b01      	ldr	r3, [sp, #4]
   11762:	9a00      	ldr	r2, [sp, #0]
   11764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]++;
   11768:	4a06      	ldr	r2, [pc, #24]	; (11784 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
   1176a:	9b01      	ldr	r3, [sp, #4]
   1176c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11770:	1c5a      	adds	r2, r3, #1
   11772:	4904      	ldr	r1, [pc, #16]	; (11784 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
   11774:	9b01      	ldr	r3, [sp, #4]
   11776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1177a:	bf00      	nop
   1177c:	b003      	add	sp, #12
   1177e:	f85d fb04 	ldr.w	pc, [sp], #4
   11782:	bf00      	nop
   11784:	1fff9218 	.word	0x1fff9218
   11788:	1fff9214 	.word	0x1fff9214

0001178c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
   1178c:	b500      	push	{lr}
   1178e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11790:	f7f0 f958 	bl	1a44 <Sys_GetCoreID>
   11794:	4603      	mov	r3, r0
   11796:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]--;
   11798:	4a0d      	ldr	r2, [pc, #52]	; (117d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
   1179a:	9b01      	ldr	r3, [sp, #4]
   1179c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117a0:	1e5a      	subs	r2, r3, #1
   117a2:	490b      	ldr	r1, [pc, #44]	; (117d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
   117a4:	9b01      	ldr	r3, [sp, #4]
   117a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   117aa:	4a0a      	ldr	r2, [pc, #40]	; (117d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x48>)
   117ac:	9b01      	ldr	r3, [sp, #4]
   117ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117b2:	f003 0301 	and.w	r3, r3, #1
   117b6:	2b00      	cmp	r3, #0
   117b8:	d106      	bne.n	117c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
   117ba:	4a05      	ldr	r2, [pc, #20]	; (117d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
   117bc:	9b01      	ldr	r3, [sp, #4]
   117be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117c2:	2b00      	cmp	r3, #0
   117c4:	d100      	bne.n	117c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   117c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   117c8:	bf00      	nop
   117ca:	b003      	add	sp, #12
   117cc:	f85d fb04 	ldr.w	pc, [sp], #4
   117d0:	1fff9218 	.word	0x1fff9218
   117d4:	1fff9214 	.word	0x1fff9214

000117d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
   117d8:	b500      	push	{lr}
   117da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   117dc:	f7f0 f932 	bl	1a44 <Sys_GetCoreID>
   117e0:	4603      	mov	r3, r0
   117e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId])
   117e4:	4a10      	ldr	r2, [pc, #64]	; (11828 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
   117e6:	9b01      	ldr	r3, [sp, #4]
   117e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117ec:	2b00      	cmp	r3, #0
   117ee:	d10d      	bne.n	1180c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   117f0:	f7ef f886 	bl	900 <Adc_schm_read_msr>
   117f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   117f6:	9b00      	ldr	r3, [sp, #0]
   117f8:	f003 0301 	and.w	r3, r3, #1
   117fc:	2b00      	cmp	r3, #0
   117fe:	d100      	bne.n	11802 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11800:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   11802:	490a      	ldr	r1, [pc, #40]	; (1182c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x54>)
   11804:	9b01      	ldr	r3, [sp, #4]
   11806:	9a00      	ldr	r2, [sp, #0]
   11808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]++;
   1180c:	4a06      	ldr	r2, [pc, #24]	; (11828 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
   1180e:	9b01      	ldr	r3, [sp, #4]
   11810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11814:	1c5a      	adds	r2, r3, #1
   11816:	4904      	ldr	r1, [pc, #16]	; (11828 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
   11818:	9b01      	ldr	r3, [sp, #4]
   1181a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1181e:	bf00      	nop
   11820:	b003      	add	sp, #12
   11822:	f85d fb04 	ldr.w	pc, [sp], #4
   11826:	bf00      	nop
   11828:	1fff9220 	.word	0x1fff9220
   1182c:	1fff921c 	.word	0x1fff921c

00011830 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
   11830:	b500      	push	{lr}
   11832:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11834:	f7f0 f906 	bl	1a44 <Sys_GetCoreID>
   11838:	4603      	mov	r3, r0
   1183a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]--;
   1183c:	4a0d      	ldr	r2, [pc, #52]	; (11874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
   1183e:	9b01      	ldr	r3, [sp, #4]
   11840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11844:	1e5a      	subs	r2, r3, #1
   11846:	490b      	ldr	r1, [pc, #44]	; (11874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
   11848:	9b01      	ldr	r3, [sp, #4]
   1184a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   1184e:	4a0a      	ldr	r2, [pc, #40]	; (11878 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x48>)
   11850:	9b01      	ldr	r3, [sp, #4]
   11852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11856:	f003 0301 	and.w	r3, r3, #1
   1185a:	2b00      	cmp	r3, #0
   1185c:	d106      	bne.n	1186c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
   1185e:	4a05      	ldr	r2, [pc, #20]	; (11874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
   11860:	9b01      	ldr	r3, [sp, #4]
   11862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11866:	2b00      	cmp	r3, #0
   11868:	d100      	bne.n	1186c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1186a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1186c:	bf00      	nop
   1186e:	b003      	add	sp, #12
   11870:	f85d fb04 	ldr.w	pc, [sp], #4
   11874:	1fff9220 	.word	0x1fff9220
   11878:	1fff921c 	.word	0x1fff921c

0001187c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
   1187c:	b500      	push	{lr}
   1187e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11880:	f7f0 f8e0 	bl	1a44 <Sys_GetCoreID>
   11884:	4603      	mov	r3, r0
   11886:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId])
   11888:	4a10      	ldr	r2, [pc, #64]	; (118cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
   1188a:	9b01      	ldr	r3, [sp, #4]
   1188c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11890:	2b00      	cmp	r3, #0
   11892:	d10d      	bne.n	118b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11894:	f7ef f834 	bl	900 <Adc_schm_read_msr>
   11898:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1189a:	9b00      	ldr	r3, [sp, #0]
   1189c:	f003 0301 	and.w	r3, r3, #1
   118a0:	2b00      	cmp	r3, #0
   118a2:	d100      	bne.n	118a6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   118a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   118a6:	490a      	ldr	r1, [pc, #40]	; (118d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x54>)
   118a8:	9b01      	ldr	r3, [sp, #4]
   118aa:	9a00      	ldr	r2, [sp, #0]
   118ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]++;
   118b0:	4a06      	ldr	r2, [pc, #24]	; (118cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
   118b2:	9b01      	ldr	r3, [sp, #4]
   118b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118b8:	1c5a      	adds	r2, r3, #1
   118ba:	4904      	ldr	r1, [pc, #16]	; (118cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
   118bc:	9b01      	ldr	r3, [sp, #4]
   118be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   118c2:	bf00      	nop
   118c4:	b003      	add	sp, #12
   118c6:	f85d fb04 	ldr.w	pc, [sp], #4
   118ca:	bf00      	nop
   118cc:	1fff9228 	.word	0x1fff9228
   118d0:	1fff9224 	.word	0x1fff9224

000118d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
   118d4:	b500      	push	{lr}
   118d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   118d8:	f7f0 f8b4 	bl	1a44 <Sys_GetCoreID>
   118dc:	4603      	mov	r3, r0
   118de:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]--;
   118e0:	4a0d      	ldr	r2, [pc, #52]	; (11918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
   118e2:	9b01      	ldr	r3, [sp, #4]
   118e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118e8:	1e5a      	subs	r2, r3, #1
   118ea:	490b      	ldr	r1, [pc, #44]	; (11918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
   118ec:	9b01      	ldr	r3, [sp, #4]
   118ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   118f2:	4a0a      	ldr	r2, [pc, #40]	; (1191c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x48>)
   118f4:	9b01      	ldr	r3, [sp, #4]
   118f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118fa:	f003 0301 	and.w	r3, r3, #1
   118fe:	2b00      	cmp	r3, #0
   11900:	d106      	bne.n	11910 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
   11902:	4a05      	ldr	r2, [pc, #20]	; (11918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
   11904:	9b01      	ldr	r3, [sp, #4]
   11906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1190a:	2b00      	cmp	r3, #0
   1190c:	d100      	bne.n	11910 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1190e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11910:	bf00      	nop
   11912:	b003      	add	sp, #12
   11914:	f85d fb04 	ldr.w	pc, [sp], #4
   11918:	1fff9228 	.word	0x1fff9228
   1191c:	1fff9224 	.word	0x1fff9224

00011920 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
   11920:	b500      	push	{lr}
   11922:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11924:	f7f0 f88e 	bl	1a44 <Sys_GetCoreID>
   11928:	4603      	mov	r3, r0
   1192a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId])
   1192c:	4a10      	ldr	r2, [pc, #64]	; (11970 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
   1192e:	9b01      	ldr	r3, [sp, #4]
   11930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11934:	2b00      	cmp	r3, #0
   11936:	d10d      	bne.n	11954 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11938:	f7ee ffe2 	bl	900 <Adc_schm_read_msr>
   1193c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1193e:	9b00      	ldr	r3, [sp, #0]
   11940:	f003 0301 	and.w	r3, r3, #1
   11944:	2b00      	cmp	r3, #0
   11946:	d100      	bne.n	1194a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11948:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   1194a:	490a      	ldr	r1, [pc, #40]	; (11974 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x54>)
   1194c:	9b01      	ldr	r3, [sp, #4]
   1194e:	9a00      	ldr	r2, [sp, #0]
   11950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]++;
   11954:	4a06      	ldr	r2, [pc, #24]	; (11970 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
   11956:	9b01      	ldr	r3, [sp, #4]
   11958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1195c:	1c5a      	adds	r2, r3, #1
   1195e:	4904      	ldr	r1, [pc, #16]	; (11970 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
   11960:	9b01      	ldr	r3, [sp, #4]
   11962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11966:	bf00      	nop
   11968:	b003      	add	sp, #12
   1196a:	f85d fb04 	ldr.w	pc, [sp], #4
   1196e:	bf00      	nop
   11970:	1fff9230 	.word	0x1fff9230
   11974:	1fff922c 	.word	0x1fff922c

00011978 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
   11978:	b500      	push	{lr}
   1197a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1197c:	f7f0 f862 	bl	1a44 <Sys_GetCoreID>
   11980:	4603      	mov	r3, r0
   11982:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]--;
   11984:	4a0d      	ldr	r2, [pc, #52]	; (119bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
   11986:	9b01      	ldr	r3, [sp, #4]
   11988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1198c:	1e5a      	subs	r2, r3, #1
   1198e:	490b      	ldr	r1, [pc, #44]	; (119bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
   11990:	9b01      	ldr	r3, [sp, #4]
   11992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   11996:	4a0a      	ldr	r2, [pc, #40]	; (119c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x48>)
   11998:	9b01      	ldr	r3, [sp, #4]
   1199a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1199e:	f003 0301 	and.w	r3, r3, #1
   119a2:	2b00      	cmp	r3, #0
   119a4:	d106      	bne.n	119b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
   119a6:	4a05      	ldr	r2, [pc, #20]	; (119bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
   119a8:	9b01      	ldr	r3, [sp, #4]
   119aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119ae:	2b00      	cmp	r3, #0
   119b0:	d100      	bne.n	119b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   119b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   119b4:	bf00      	nop
   119b6:	b003      	add	sp, #12
   119b8:	f85d fb04 	ldr.w	pc, [sp], #4
   119bc:	1fff9230 	.word	0x1fff9230
   119c0:	1fff922c 	.word	0x1fff922c

000119c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
   119c4:	b500      	push	{lr}
   119c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   119c8:	f7f0 f83c 	bl	1a44 <Sys_GetCoreID>
   119cc:	4603      	mov	r3, r0
   119ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId])
   119d0:	4a10      	ldr	r2, [pc, #64]	; (11a14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
   119d2:	9b01      	ldr	r3, [sp, #4]
   119d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119d8:	2b00      	cmp	r3, #0
   119da:	d10d      	bne.n	119f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   119dc:	f7ee ff90 	bl	900 <Adc_schm_read_msr>
   119e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   119e2:	9b00      	ldr	r3, [sp, #0]
   119e4:	f003 0301 	and.w	r3, r3, #1
   119e8:	2b00      	cmp	r3, #0
   119ea:	d100      	bne.n	119ee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   119ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   119ee:	490a      	ldr	r1, [pc, #40]	; (11a18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x54>)
   119f0:	9b01      	ldr	r3, [sp, #4]
   119f2:	9a00      	ldr	r2, [sp, #0]
   119f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]++;
   119f8:	4a06      	ldr	r2, [pc, #24]	; (11a14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
   119fa:	9b01      	ldr	r3, [sp, #4]
   119fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a00:	1c5a      	adds	r2, r3, #1
   11a02:	4904      	ldr	r1, [pc, #16]	; (11a14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
   11a04:	9b01      	ldr	r3, [sp, #4]
   11a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11a0a:	bf00      	nop
   11a0c:	b003      	add	sp, #12
   11a0e:	f85d fb04 	ldr.w	pc, [sp], #4
   11a12:	bf00      	nop
   11a14:	1fff9238 	.word	0x1fff9238
   11a18:	1fff9234 	.word	0x1fff9234

00011a1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
   11a1c:	b500      	push	{lr}
   11a1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11a20:	f7f0 f810 	bl	1a44 <Sys_GetCoreID>
   11a24:	4603      	mov	r3, r0
   11a26:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]--;
   11a28:	4a0d      	ldr	r2, [pc, #52]	; (11a60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
   11a2a:	9b01      	ldr	r3, [sp, #4]
   11a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a30:	1e5a      	subs	r2, r3, #1
   11a32:	490b      	ldr	r1, [pc, #44]	; (11a60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
   11a34:	9b01      	ldr	r3, [sp, #4]
   11a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   11a3a:	4a0a      	ldr	r2, [pc, #40]	; (11a64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x48>)
   11a3c:	9b01      	ldr	r3, [sp, #4]
   11a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a42:	f003 0301 	and.w	r3, r3, #1
   11a46:	2b00      	cmp	r3, #0
   11a48:	d106      	bne.n	11a58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
   11a4a:	4a05      	ldr	r2, [pc, #20]	; (11a60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
   11a4c:	9b01      	ldr	r3, [sp, #4]
   11a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a52:	2b00      	cmp	r3, #0
   11a54:	d100      	bne.n	11a58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11a56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11a58:	bf00      	nop
   11a5a:	b003      	add	sp, #12
   11a5c:	f85d fb04 	ldr.w	pc, [sp], #4
   11a60:	1fff9238 	.word	0x1fff9238
   11a64:	1fff9234 	.word	0x1fff9234

00011a68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
   11a68:	b500      	push	{lr}
   11a6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11a6c:	f7ef ffea 	bl	1a44 <Sys_GetCoreID>
   11a70:	4603      	mov	r3, r0
   11a72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId])
   11a74:	4a10      	ldr	r2, [pc, #64]	; (11ab8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
   11a76:	9b01      	ldr	r3, [sp, #4]
   11a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a7c:	2b00      	cmp	r3, #0
   11a7e:	d10d      	bne.n	11a9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11a80:	f7ee ff3e 	bl	900 <Adc_schm_read_msr>
   11a84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11a86:	9b00      	ldr	r3, [sp, #0]
   11a88:	f003 0301 	and.w	r3, r3, #1
   11a8c:	2b00      	cmp	r3, #0
   11a8e:	d100      	bne.n	11a92 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11a90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   11a92:	490a      	ldr	r1, [pc, #40]	; (11abc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x54>)
   11a94:	9b01      	ldr	r3, [sp, #4]
   11a96:	9a00      	ldr	r2, [sp, #0]
   11a98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]++;
   11a9c:	4a06      	ldr	r2, [pc, #24]	; (11ab8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
   11a9e:	9b01      	ldr	r3, [sp, #4]
   11aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11aa4:	1c5a      	adds	r2, r3, #1
   11aa6:	4904      	ldr	r1, [pc, #16]	; (11ab8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
   11aa8:	9b01      	ldr	r3, [sp, #4]
   11aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11aae:	bf00      	nop
   11ab0:	b003      	add	sp, #12
   11ab2:	f85d fb04 	ldr.w	pc, [sp], #4
   11ab6:	bf00      	nop
   11ab8:	1fff9240 	.word	0x1fff9240
   11abc:	1fff923c 	.word	0x1fff923c

00011ac0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
   11ac0:	b500      	push	{lr}
   11ac2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11ac4:	f7ef ffbe 	bl	1a44 <Sys_GetCoreID>
   11ac8:	4603      	mov	r3, r0
   11aca:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]--;
   11acc:	4a0d      	ldr	r2, [pc, #52]	; (11b04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
   11ace:	9b01      	ldr	r3, [sp, #4]
   11ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ad4:	1e5a      	subs	r2, r3, #1
   11ad6:	490b      	ldr	r1, [pc, #44]	; (11b04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
   11ad8:	9b01      	ldr	r3, [sp, #4]
   11ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   11ade:	4a0a      	ldr	r2, [pc, #40]	; (11b08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x48>)
   11ae0:	9b01      	ldr	r3, [sp, #4]
   11ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ae6:	f003 0301 	and.w	r3, r3, #1
   11aea:	2b00      	cmp	r3, #0
   11aec:	d106      	bne.n	11afc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
   11aee:	4a05      	ldr	r2, [pc, #20]	; (11b04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
   11af0:	9b01      	ldr	r3, [sp, #4]
   11af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11af6:	2b00      	cmp	r3, #0
   11af8:	d100      	bne.n	11afc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11afa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11afc:	bf00      	nop
   11afe:	b003      	add	sp, #12
   11b00:	f85d fb04 	ldr.w	pc, [sp], #4
   11b04:	1fff9240 	.word	0x1fff9240
   11b08:	1fff923c 	.word	0x1fff923c

00011b0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
   11b0c:	b500      	push	{lr}
   11b0e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11b10:	f7ef ff98 	bl	1a44 <Sys_GetCoreID>
   11b14:	4603      	mov	r3, r0
   11b16:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId])
   11b18:	4a10      	ldr	r2, [pc, #64]	; (11b5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
   11b1a:	9b01      	ldr	r3, [sp, #4]
   11b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b20:	2b00      	cmp	r3, #0
   11b22:	d10d      	bne.n	11b40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11b24:	f7ee feec 	bl	900 <Adc_schm_read_msr>
   11b28:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11b2a:	9b00      	ldr	r3, [sp, #0]
   11b2c:	f003 0301 	and.w	r3, r3, #1
   11b30:	2b00      	cmp	r3, #0
   11b32:	d100      	bne.n	11b36 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11b34:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   11b36:	490a      	ldr	r1, [pc, #40]	; (11b60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x54>)
   11b38:	9b01      	ldr	r3, [sp, #4]
   11b3a:	9a00      	ldr	r2, [sp, #0]
   11b3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]++;
   11b40:	4a06      	ldr	r2, [pc, #24]	; (11b5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
   11b42:	9b01      	ldr	r3, [sp, #4]
   11b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b48:	1c5a      	adds	r2, r3, #1
   11b4a:	4904      	ldr	r1, [pc, #16]	; (11b5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
   11b4c:	9b01      	ldr	r3, [sp, #4]
   11b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11b52:	bf00      	nop
   11b54:	b003      	add	sp, #12
   11b56:	f85d fb04 	ldr.w	pc, [sp], #4
   11b5a:	bf00      	nop
   11b5c:	1fff9248 	.word	0x1fff9248
   11b60:	1fff9244 	.word	0x1fff9244

00011b64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
   11b64:	b500      	push	{lr}
   11b66:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11b68:	f7ef ff6c 	bl	1a44 <Sys_GetCoreID>
   11b6c:	4603      	mov	r3, r0
   11b6e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]--;
   11b70:	4a0d      	ldr	r2, [pc, #52]	; (11ba8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
   11b72:	9b01      	ldr	r3, [sp, #4]
   11b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b78:	1e5a      	subs	r2, r3, #1
   11b7a:	490b      	ldr	r1, [pc, #44]	; (11ba8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
   11b7c:	9b01      	ldr	r3, [sp, #4]
   11b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   11b82:	4a0a      	ldr	r2, [pc, #40]	; (11bac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x48>)
   11b84:	9b01      	ldr	r3, [sp, #4]
   11b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b8a:	f003 0301 	and.w	r3, r3, #1
   11b8e:	2b00      	cmp	r3, #0
   11b90:	d106      	bne.n	11ba0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
   11b92:	4a05      	ldr	r2, [pc, #20]	; (11ba8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
   11b94:	9b01      	ldr	r3, [sp, #4]
   11b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b9a:	2b00      	cmp	r3, #0
   11b9c:	d100      	bne.n	11ba0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11b9e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11ba0:	bf00      	nop
   11ba2:	b003      	add	sp, #12
   11ba4:	f85d fb04 	ldr.w	pc, [sp], #4
   11ba8:	1fff9248 	.word	0x1fff9248
   11bac:	1fff9244 	.word	0x1fff9244

00011bb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
   11bb0:	b500      	push	{lr}
   11bb2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11bb4:	f7ef ff46 	bl	1a44 <Sys_GetCoreID>
   11bb8:	4603      	mov	r3, r0
   11bba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId])
   11bbc:	4a10      	ldr	r2, [pc, #64]	; (11c00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
   11bbe:	9b01      	ldr	r3, [sp, #4]
   11bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11bc4:	2b00      	cmp	r3, #0
   11bc6:	d10d      	bne.n	11be4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11bc8:	f7ee fe9a 	bl	900 <Adc_schm_read_msr>
   11bcc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11bce:	9b00      	ldr	r3, [sp, #0]
   11bd0:	f003 0301 	and.w	r3, r3, #1
   11bd4:	2b00      	cmp	r3, #0
   11bd6:	d100      	bne.n	11bda <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11bd8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_100[u32CoreId] = msr;
   11bda:	490a      	ldr	r1, [pc, #40]	; (11c04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x54>)
   11bdc:	9b01      	ldr	r3, [sp, #4]
   11bde:	9a00      	ldr	r2, [sp, #0]
   11be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]++;
   11be4:	4a06      	ldr	r2, [pc, #24]	; (11c00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
   11be6:	9b01      	ldr	r3, [sp, #4]
   11be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11bec:	1c5a      	adds	r2, r3, #1
   11bee:	4904      	ldr	r1, [pc, #16]	; (11c00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
   11bf0:	9b01      	ldr	r3, [sp, #4]
   11bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11bf6:	bf00      	nop
   11bf8:	b003      	add	sp, #12
   11bfa:	f85d fb04 	ldr.w	pc, [sp], #4
   11bfe:	bf00      	nop
   11c00:	1fff9250 	.word	0x1fff9250
   11c04:	1fff924c 	.word	0x1fff924c

00011c08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
   11c08:	b500      	push	{lr}
   11c0a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11c0c:	f7ef ff1a 	bl	1a44 <Sys_GetCoreID>
   11c10:	4603      	mov	r3, r0
   11c12:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]--;
   11c14:	4a0d      	ldr	r2, [pc, #52]	; (11c4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
   11c16:	9b01      	ldr	r3, [sp, #4]
   11c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c1c:	1e5a      	subs	r2, r3, #1
   11c1e:	490b      	ldr	r1, [pc, #44]	; (11c4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
   11c20:	9b01      	ldr	r3, [sp, #4]
   11c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_100[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]))         /*if interrupts were enabled*/
   11c26:	4a0a      	ldr	r2, [pc, #40]	; (11c50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x48>)
   11c28:	9b01      	ldr	r3, [sp, #4]
   11c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c2e:	f003 0301 	and.w	r3, r3, #1
   11c32:	2b00      	cmp	r3, #0
   11c34:	d106      	bne.n	11c44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
   11c36:	4a05      	ldr	r2, [pc, #20]	; (11c4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
   11c38:	9b01      	ldr	r3, [sp, #4]
   11c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c3e:	2b00      	cmp	r3, #0
   11c40:	d100      	bne.n	11c44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11c42:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11c44:	bf00      	nop
   11c46:	b003      	add	sp, #12
   11c48:	f85d fb04 	ldr.w	pc, [sp], #4
   11c4c:	1fff9250 	.word	0x1fff9250
   11c50:	1fff924c 	.word	0x1fff924c

00011c54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
   11c54:	b500      	push	{lr}
   11c56:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11c58:	f7ef fef4 	bl	1a44 <Sys_GetCoreID>
   11c5c:	4603      	mov	r3, r0
   11c5e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId])
   11c60:	4a10      	ldr	r2, [pc, #64]	; (11ca4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
   11c62:	9b01      	ldr	r3, [sp, #4]
   11c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c68:	2b00      	cmp	r3, #0
   11c6a:	d10d      	bne.n	11c88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11c6c:	f7ee fe48 	bl	900 <Adc_schm_read_msr>
   11c70:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11c72:	9b00      	ldr	r3, [sp, #0]
   11c74:	f003 0301 	and.w	r3, r3, #1
   11c78:	2b00      	cmp	r3, #0
   11c7a:	d100      	bne.n	11c7e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11c7c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_101[u32CoreId] = msr;
   11c7e:	490a      	ldr	r1, [pc, #40]	; (11ca8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x54>)
   11c80:	9b01      	ldr	r3, [sp, #4]
   11c82:	9a00      	ldr	r2, [sp, #0]
   11c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]++;
   11c88:	4a06      	ldr	r2, [pc, #24]	; (11ca4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
   11c8a:	9b01      	ldr	r3, [sp, #4]
   11c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c90:	1c5a      	adds	r2, r3, #1
   11c92:	4904      	ldr	r1, [pc, #16]	; (11ca4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
   11c94:	9b01      	ldr	r3, [sp, #4]
   11c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11c9a:	bf00      	nop
   11c9c:	b003      	add	sp, #12
   11c9e:	f85d fb04 	ldr.w	pc, [sp], #4
   11ca2:	bf00      	nop
   11ca4:	1fff9258 	.word	0x1fff9258
   11ca8:	1fff9254 	.word	0x1fff9254

00011cac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
   11cac:	b500      	push	{lr}
   11cae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11cb0:	f7ef fec8 	bl	1a44 <Sys_GetCoreID>
   11cb4:	4603      	mov	r3, r0
   11cb6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]--;
   11cb8:	4a0d      	ldr	r2, [pc, #52]	; (11cf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
   11cba:	9b01      	ldr	r3, [sp, #4]
   11cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11cc0:	1e5a      	subs	r2, r3, #1
   11cc2:	490b      	ldr	r1, [pc, #44]	; (11cf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
   11cc4:	9b01      	ldr	r3, [sp, #4]
   11cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_101[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]))         /*if interrupts were enabled*/
   11cca:	4a0a      	ldr	r2, [pc, #40]	; (11cf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x48>)
   11ccc:	9b01      	ldr	r3, [sp, #4]
   11cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11cd2:	f003 0301 	and.w	r3, r3, #1
   11cd6:	2b00      	cmp	r3, #0
   11cd8:	d106      	bne.n	11ce8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
   11cda:	4a05      	ldr	r2, [pc, #20]	; (11cf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
   11cdc:	9b01      	ldr	r3, [sp, #4]
   11cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ce2:	2b00      	cmp	r3, #0
   11ce4:	d100      	bne.n	11ce8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11ce6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11ce8:	bf00      	nop
   11cea:	b003      	add	sp, #12
   11cec:	f85d fb04 	ldr.w	pc, [sp], #4
   11cf0:	1fff9258 	.word	0x1fff9258
   11cf4:	1fff9254 	.word	0x1fff9254

00011cf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
   11cf8:	b500      	push	{lr}
   11cfa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11cfc:	f7ef fea2 	bl	1a44 <Sys_GetCoreID>
   11d00:	4603      	mov	r3, r0
   11d02:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId])
   11d04:	4a10      	ldr	r2, [pc, #64]	; (11d48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
   11d06:	9b01      	ldr	r3, [sp, #4]
   11d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d0c:	2b00      	cmp	r3, #0
   11d0e:	d10d      	bne.n	11d2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11d10:	f7ee fdf6 	bl	900 <Adc_schm_read_msr>
   11d14:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11d16:	9b00      	ldr	r3, [sp, #0]
   11d18:	f003 0301 	and.w	r3, r3, #1
   11d1c:	2b00      	cmp	r3, #0
   11d1e:	d100      	bne.n	11d22 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11d20:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_102[u32CoreId] = msr;
   11d22:	490a      	ldr	r1, [pc, #40]	; (11d4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x54>)
   11d24:	9b01      	ldr	r3, [sp, #4]
   11d26:	9a00      	ldr	r2, [sp, #0]
   11d28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]++;
   11d2c:	4a06      	ldr	r2, [pc, #24]	; (11d48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
   11d2e:	9b01      	ldr	r3, [sp, #4]
   11d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d34:	1c5a      	adds	r2, r3, #1
   11d36:	4904      	ldr	r1, [pc, #16]	; (11d48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
   11d38:	9b01      	ldr	r3, [sp, #4]
   11d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11d3e:	bf00      	nop
   11d40:	b003      	add	sp, #12
   11d42:	f85d fb04 	ldr.w	pc, [sp], #4
   11d46:	bf00      	nop
   11d48:	1fff9260 	.word	0x1fff9260
   11d4c:	1fff925c 	.word	0x1fff925c

00011d50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
   11d50:	b500      	push	{lr}
   11d52:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11d54:	f7ef fe76 	bl	1a44 <Sys_GetCoreID>
   11d58:	4603      	mov	r3, r0
   11d5a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]--;
   11d5c:	4a0d      	ldr	r2, [pc, #52]	; (11d94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
   11d5e:	9b01      	ldr	r3, [sp, #4]
   11d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d64:	1e5a      	subs	r2, r3, #1
   11d66:	490b      	ldr	r1, [pc, #44]	; (11d94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
   11d68:	9b01      	ldr	r3, [sp, #4]
   11d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_102[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]))         /*if interrupts were enabled*/
   11d6e:	4a0a      	ldr	r2, [pc, #40]	; (11d98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x48>)
   11d70:	9b01      	ldr	r3, [sp, #4]
   11d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d76:	f003 0301 	and.w	r3, r3, #1
   11d7a:	2b00      	cmp	r3, #0
   11d7c:	d106      	bne.n	11d8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
   11d7e:	4a05      	ldr	r2, [pc, #20]	; (11d94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
   11d80:	9b01      	ldr	r3, [sp, #4]
   11d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d86:	2b00      	cmp	r3, #0
   11d88:	d100      	bne.n	11d8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11d8a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11d8c:	bf00      	nop
   11d8e:	b003      	add	sp, #12
   11d90:	f85d fb04 	ldr.w	pc, [sp], #4
   11d94:	1fff9260 	.word	0x1fff9260
   11d98:	1fff925c 	.word	0x1fff925c

00011d9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
   11d9c:	b500      	push	{lr}
   11d9e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11da0:	f7ef fe50 	bl	1a44 <Sys_GetCoreID>
   11da4:	4603      	mov	r3, r0
   11da6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId])
   11da8:	4a10      	ldr	r2, [pc, #64]	; (11dec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
   11daa:	9b01      	ldr	r3, [sp, #4]
   11dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11db0:	2b00      	cmp	r3, #0
   11db2:	d10d      	bne.n	11dd0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11db4:	f7ee fda4 	bl	900 <Adc_schm_read_msr>
   11db8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11dba:	9b00      	ldr	r3, [sp, #0]
   11dbc:	f003 0301 	and.w	r3, r3, #1
   11dc0:	2b00      	cmp	r3, #0
   11dc2:	d100      	bne.n	11dc6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11dc4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_103[u32CoreId] = msr;
   11dc6:	490a      	ldr	r1, [pc, #40]	; (11df0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x54>)
   11dc8:	9b01      	ldr	r3, [sp, #4]
   11dca:	9a00      	ldr	r2, [sp, #0]
   11dcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]++;
   11dd0:	4a06      	ldr	r2, [pc, #24]	; (11dec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
   11dd2:	9b01      	ldr	r3, [sp, #4]
   11dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11dd8:	1c5a      	adds	r2, r3, #1
   11dda:	4904      	ldr	r1, [pc, #16]	; (11dec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
   11ddc:	9b01      	ldr	r3, [sp, #4]
   11dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11de2:	bf00      	nop
   11de4:	b003      	add	sp, #12
   11de6:	f85d fb04 	ldr.w	pc, [sp], #4
   11dea:	bf00      	nop
   11dec:	1fff9268 	.word	0x1fff9268
   11df0:	1fff9264 	.word	0x1fff9264

00011df4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
   11df4:	b500      	push	{lr}
   11df6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11df8:	f7ef fe24 	bl	1a44 <Sys_GetCoreID>
   11dfc:	4603      	mov	r3, r0
   11dfe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]--;
   11e00:	4a0d      	ldr	r2, [pc, #52]	; (11e38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
   11e02:	9b01      	ldr	r3, [sp, #4]
   11e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e08:	1e5a      	subs	r2, r3, #1
   11e0a:	490b      	ldr	r1, [pc, #44]	; (11e38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
   11e0c:	9b01      	ldr	r3, [sp, #4]
   11e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_103[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]))         /*if interrupts were enabled*/
   11e12:	4a0a      	ldr	r2, [pc, #40]	; (11e3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x48>)
   11e14:	9b01      	ldr	r3, [sp, #4]
   11e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e1a:	f003 0301 	and.w	r3, r3, #1
   11e1e:	2b00      	cmp	r3, #0
   11e20:	d106      	bne.n	11e30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
   11e22:	4a05      	ldr	r2, [pc, #20]	; (11e38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
   11e24:	9b01      	ldr	r3, [sp, #4]
   11e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e2a:	2b00      	cmp	r3, #0
   11e2c:	d100      	bne.n	11e30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11e2e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11e30:	bf00      	nop
   11e32:	b003      	add	sp, #12
   11e34:	f85d fb04 	ldr.w	pc, [sp], #4
   11e38:	1fff9268 	.word	0x1fff9268
   11e3c:	1fff9264 	.word	0x1fff9264

00011e40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
   11e40:	b500      	push	{lr}
   11e42:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11e44:	f7ef fdfe 	bl	1a44 <Sys_GetCoreID>
   11e48:	4603      	mov	r3, r0
   11e4a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId])
   11e4c:	4a10      	ldr	r2, [pc, #64]	; (11e90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
   11e4e:	9b01      	ldr	r3, [sp, #4]
   11e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e54:	2b00      	cmp	r3, #0
   11e56:	d10d      	bne.n	11e74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11e58:	f7ee fd52 	bl	900 <Adc_schm_read_msr>
   11e5c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11e5e:	9b00      	ldr	r3, [sp, #0]
   11e60:	f003 0301 	and.w	r3, r3, #1
   11e64:	2b00      	cmp	r3, #0
   11e66:	d100      	bne.n	11e6a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11e68:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   11e6a:	490a      	ldr	r1, [pc, #40]	; (11e94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x54>)
   11e6c:	9b01      	ldr	r3, [sp, #4]
   11e6e:	9a00      	ldr	r2, [sp, #0]
   11e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]++;
   11e74:	4a06      	ldr	r2, [pc, #24]	; (11e90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
   11e76:	9b01      	ldr	r3, [sp, #4]
   11e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e7c:	1c5a      	adds	r2, r3, #1
   11e7e:	4904      	ldr	r1, [pc, #16]	; (11e90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
   11e80:	9b01      	ldr	r3, [sp, #4]
   11e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11e86:	bf00      	nop
   11e88:	b003      	add	sp, #12
   11e8a:	f85d fb04 	ldr.w	pc, [sp], #4
   11e8e:	bf00      	nop
   11e90:	1fff9270 	.word	0x1fff9270
   11e94:	1fff926c 	.word	0x1fff926c

00011e98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
   11e98:	b500      	push	{lr}
   11e9a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11e9c:	f7ef fdd2 	bl	1a44 <Sys_GetCoreID>
   11ea0:	4603      	mov	r3, r0
   11ea2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]--;
   11ea4:	4a0d      	ldr	r2, [pc, #52]	; (11edc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
   11ea6:	9b01      	ldr	r3, [sp, #4]
   11ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11eac:	1e5a      	subs	r2, r3, #1
   11eae:	490b      	ldr	r1, [pc, #44]	; (11edc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
   11eb0:	9b01      	ldr	r3, [sp, #4]
   11eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   11eb6:	4a0a      	ldr	r2, [pc, #40]	; (11ee0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x48>)
   11eb8:	9b01      	ldr	r3, [sp, #4]
   11eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ebe:	f003 0301 	and.w	r3, r3, #1
   11ec2:	2b00      	cmp	r3, #0
   11ec4:	d106      	bne.n	11ed4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
   11ec6:	4a05      	ldr	r2, [pc, #20]	; (11edc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
   11ec8:	9b01      	ldr	r3, [sp, #4]
   11eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ece:	2b00      	cmp	r3, #0
   11ed0:	d100      	bne.n	11ed4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11ed2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11ed4:	bf00      	nop
   11ed6:	b003      	add	sp, #12
   11ed8:	f85d fb04 	ldr.w	pc, [sp], #4
   11edc:	1fff9270 	.word	0x1fff9270
   11ee0:	1fff926c 	.word	0x1fff926c

00011ee4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
   11ee4:	b500      	push	{lr}
   11ee6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11ee8:	f7ef fdac 	bl	1a44 <Sys_GetCoreID>
   11eec:	4603      	mov	r3, r0
   11eee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId])
   11ef0:	4a10      	ldr	r2, [pc, #64]	; (11f34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
   11ef2:	9b01      	ldr	r3, [sp, #4]
   11ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ef8:	2b00      	cmp	r3, #0
   11efa:	d10d      	bne.n	11f18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11efc:	f7ee fd00 	bl	900 <Adc_schm_read_msr>
   11f00:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11f02:	9b00      	ldr	r3, [sp, #0]
   11f04:	f003 0301 	and.w	r3, r3, #1
   11f08:	2b00      	cmp	r3, #0
   11f0a:	d100      	bne.n	11f0e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11f0c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   11f0e:	490a      	ldr	r1, [pc, #40]	; (11f38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x54>)
   11f10:	9b01      	ldr	r3, [sp, #4]
   11f12:	9a00      	ldr	r2, [sp, #0]
   11f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]++;
   11f18:	4a06      	ldr	r2, [pc, #24]	; (11f34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
   11f1a:	9b01      	ldr	r3, [sp, #4]
   11f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f20:	1c5a      	adds	r2, r3, #1
   11f22:	4904      	ldr	r1, [pc, #16]	; (11f34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
   11f24:	9b01      	ldr	r3, [sp, #4]
   11f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11f2a:	bf00      	nop
   11f2c:	b003      	add	sp, #12
   11f2e:	f85d fb04 	ldr.w	pc, [sp], #4
   11f32:	bf00      	nop
   11f34:	1fff9278 	.word	0x1fff9278
   11f38:	1fff9274 	.word	0x1fff9274

00011f3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
   11f3c:	b500      	push	{lr}
   11f3e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11f40:	f7ef fd80 	bl	1a44 <Sys_GetCoreID>
   11f44:	4603      	mov	r3, r0
   11f46:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]--;
   11f48:	4a0d      	ldr	r2, [pc, #52]	; (11f80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
   11f4a:	9b01      	ldr	r3, [sp, #4]
   11f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f50:	1e5a      	subs	r2, r3, #1
   11f52:	490b      	ldr	r1, [pc, #44]	; (11f80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
   11f54:	9b01      	ldr	r3, [sp, #4]
   11f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   11f5a:	4a0a      	ldr	r2, [pc, #40]	; (11f84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x48>)
   11f5c:	9b01      	ldr	r3, [sp, #4]
   11f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f62:	f003 0301 	and.w	r3, r3, #1
   11f66:	2b00      	cmp	r3, #0
   11f68:	d106      	bne.n	11f78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
   11f6a:	4a05      	ldr	r2, [pc, #20]	; (11f80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
   11f6c:	9b01      	ldr	r3, [sp, #4]
   11f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f72:	2b00      	cmp	r3, #0
   11f74:	d100      	bne.n	11f78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11f76:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11f78:	bf00      	nop
   11f7a:	b003      	add	sp, #12
   11f7c:	f85d fb04 	ldr.w	pc, [sp], #4
   11f80:	1fff9278 	.word	0x1fff9278
   11f84:	1fff9274 	.word	0x1fff9274

00011f88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
   11f88:	b500      	push	{lr}
   11f8a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11f8c:	f7ef fd5a 	bl	1a44 <Sys_GetCoreID>
   11f90:	4603      	mov	r3, r0
   11f92:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId])
   11f94:	4a10      	ldr	r2, [pc, #64]	; (11fd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
   11f96:	9b01      	ldr	r3, [sp, #4]
   11f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f9c:	2b00      	cmp	r3, #0
   11f9e:	d10d      	bne.n	11fbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11fa0:	f7ee fcae 	bl	900 <Adc_schm_read_msr>
   11fa4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11fa6:	9b00      	ldr	r3, [sp, #0]
   11fa8:	f003 0301 	and.w	r3, r3, #1
   11fac:	2b00      	cmp	r3, #0
   11fae:	d100      	bne.n	11fb2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11fb0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   11fb2:	490a      	ldr	r1, [pc, #40]	; (11fdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x54>)
   11fb4:	9b01      	ldr	r3, [sp, #4]
   11fb6:	9a00      	ldr	r2, [sp, #0]
   11fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]++;
   11fbc:	4a06      	ldr	r2, [pc, #24]	; (11fd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
   11fbe:	9b01      	ldr	r3, [sp, #4]
   11fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fc4:	1c5a      	adds	r2, r3, #1
   11fc6:	4904      	ldr	r1, [pc, #16]	; (11fd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
   11fc8:	9b01      	ldr	r3, [sp, #4]
   11fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11fce:	bf00      	nop
   11fd0:	b003      	add	sp, #12
   11fd2:	f85d fb04 	ldr.w	pc, [sp], #4
   11fd6:	bf00      	nop
   11fd8:	1fff9280 	.word	0x1fff9280
   11fdc:	1fff927c 	.word	0x1fff927c

00011fe0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
   11fe0:	b500      	push	{lr}
   11fe2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11fe4:	f7ef fd2e 	bl	1a44 <Sys_GetCoreID>
   11fe8:	4603      	mov	r3, r0
   11fea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]--;
   11fec:	4a0d      	ldr	r2, [pc, #52]	; (12024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
   11fee:	9b01      	ldr	r3, [sp, #4]
   11ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ff4:	1e5a      	subs	r2, r3, #1
   11ff6:	490b      	ldr	r1, [pc, #44]	; (12024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
   11ff8:	9b01      	ldr	r3, [sp, #4]
   11ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   11ffe:	4a0a      	ldr	r2, [pc, #40]	; (12028 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x48>)
   12000:	9b01      	ldr	r3, [sp, #4]
   12002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12006:	f003 0301 	and.w	r3, r3, #1
   1200a:	2b00      	cmp	r3, #0
   1200c:	d106      	bne.n	1201c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
   1200e:	4a05      	ldr	r2, [pc, #20]	; (12024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
   12010:	9b01      	ldr	r3, [sp, #4]
   12012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12016:	2b00      	cmp	r3, #0
   12018:	d100      	bne.n	1201c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1201a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1201c:	bf00      	nop
   1201e:	b003      	add	sp, #12
   12020:	f85d fb04 	ldr.w	pc, [sp], #4
   12024:	1fff9280 	.word	0x1fff9280
   12028:	1fff927c 	.word	0x1fff927c

0001202c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
   1202c:	b500      	push	{lr}
   1202e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12030:	f7ef fd08 	bl	1a44 <Sys_GetCoreID>
   12034:	4603      	mov	r3, r0
   12036:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId])
   12038:	4a10      	ldr	r2, [pc, #64]	; (1207c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
   1203a:	9b01      	ldr	r3, [sp, #4]
   1203c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12040:	2b00      	cmp	r3, #0
   12042:	d10d      	bne.n	12060 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12044:	f7ee fc5c 	bl	900 <Adc_schm_read_msr>
   12048:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1204a:	9b00      	ldr	r3, [sp, #0]
   1204c:	f003 0301 	and.w	r3, r3, #1
   12050:	2b00      	cmp	r3, #0
   12052:	d100      	bne.n	12056 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12054:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   12056:	490a      	ldr	r1, [pc, #40]	; (12080 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x54>)
   12058:	9b01      	ldr	r3, [sp, #4]
   1205a:	9a00      	ldr	r2, [sp, #0]
   1205c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]++;
   12060:	4a06      	ldr	r2, [pc, #24]	; (1207c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
   12062:	9b01      	ldr	r3, [sp, #4]
   12064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12068:	1c5a      	adds	r2, r3, #1
   1206a:	4904      	ldr	r1, [pc, #16]	; (1207c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
   1206c:	9b01      	ldr	r3, [sp, #4]
   1206e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12072:	bf00      	nop
   12074:	b003      	add	sp, #12
   12076:	f85d fb04 	ldr.w	pc, [sp], #4
   1207a:	bf00      	nop
   1207c:	1fff9288 	.word	0x1fff9288
   12080:	1fff9284 	.word	0x1fff9284

00012084 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
   12084:	b500      	push	{lr}
   12086:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12088:	f7ef fcdc 	bl	1a44 <Sys_GetCoreID>
   1208c:	4603      	mov	r3, r0
   1208e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]--;
   12090:	4a0d      	ldr	r2, [pc, #52]	; (120c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
   12092:	9b01      	ldr	r3, [sp, #4]
   12094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12098:	1e5a      	subs	r2, r3, #1
   1209a:	490b      	ldr	r1, [pc, #44]	; (120c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
   1209c:	9b01      	ldr	r3, [sp, #4]
   1209e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   120a2:	4a0a      	ldr	r2, [pc, #40]	; (120cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x48>)
   120a4:	9b01      	ldr	r3, [sp, #4]
   120a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120aa:	f003 0301 	and.w	r3, r3, #1
   120ae:	2b00      	cmp	r3, #0
   120b0:	d106      	bne.n	120c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
   120b2:	4a05      	ldr	r2, [pc, #20]	; (120c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
   120b4:	9b01      	ldr	r3, [sp, #4]
   120b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d100      	bne.n	120c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   120be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   120c0:	bf00      	nop
   120c2:	b003      	add	sp, #12
   120c4:	f85d fb04 	ldr.w	pc, [sp], #4
   120c8:	1fff9288 	.word	0x1fff9288
   120cc:	1fff9284 	.word	0x1fff9284

000120d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
   120d0:	b500      	push	{lr}
   120d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   120d4:	f7ef fcb6 	bl	1a44 <Sys_GetCoreID>
   120d8:	4603      	mov	r3, r0
   120da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId])
   120dc:	4a10      	ldr	r2, [pc, #64]	; (12120 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
   120de:	9b01      	ldr	r3, [sp, #4]
   120e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120e4:	2b00      	cmp	r3, #0
   120e6:	d10d      	bne.n	12104 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   120e8:	f7ee fc0a 	bl	900 <Adc_schm_read_msr>
   120ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   120ee:	9b00      	ldr	r3, [sp, #0]
   120f0:	f003 0301 	and.w	r3, r3, #1
   120f4:	2b00      	cmp	r3, #0
   120f6:	d100      	bne.n	120fa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   120f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   120fa:	490a      	ldr	r1, [pc, #40]	; (12124 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x54>)
   120fc:	9b01      	ldr	r3, [sp, #4]
   120fe:	9a00      	ldr	r2, [sp, #0]
   12100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]++;
   12104:	4a06      	ldr	r2, [pc, #24]	; (12120 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
   12106:	9b01      	ldr	r3, [sp, #4]
   12108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1210c:	1c5a      	adds	r2, r3, #1
   1210e:	4904      	ldr	r1, [pc, #16]	; (12120 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
   12110:	9b01      	ldr	r3, [sp, #4]
   12112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12116:	bf00      	nop
   12118:	b003      	add	sp, #12
   1211a:	f85d fb04 	ldr.w	pc, [sp], #4
   1211e:	bf00      	nop
   12120:	1fff9290 	.word	0x1fff9290
   12124:	1fff928c 	.word	0x1fff928c

00012128 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
   12128:	b500      	push	{lr}
   1212a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1212c:	f7ef fc8a 	bl	1a44 <Sys_GetCoreID>
   12130:	4603      	mov	r3, r0
   12132:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]--;
   12134:	4a0d      	ldr	r2, [pc, #52]	; (1216c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
   12136:	9b01      	ldr	r3, [sp, #4]
   12138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1213c:	1e5a      	subs	r2, r3, #1
   1213e:	490b      	ldr	r1, [pc, #44]	; (1216c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
   12140:	9b01      	ldr	r3, [sp, #4]
   12142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   12146:	4a0a      	ldr	r2, [pc, #40]	; (12170 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x48>)
   12148:	9b01      	ldr	r3, [sp, #4]
   1214a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1214e:	f003 0301 	and.w	r3, r3, #1
   12152:	2b00      	cmp	r3, #0
   12154:	d106      	bne.n	12164 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
   12156:	4a05      	ldr	r2, [pc, #20]	; (1216c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
   12158:	9b01      	ldr	r3, [sp, #4]
   1215a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1215e:	2b00      	cmp	r3, #0
   12160:	d100      	bne.n	12164 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12162:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12164:	bf00      	nop
   12166:	b003      	add	sp, #12
   12168:	f85d fb04 	ldr.w	pc, [sp], #4
   1216c:	1fff9290 	.word	0x1fff9290
   12170:	1fff928c 	.word	0x1fff928c

00012174 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
   12174:	b500      	push	{lr}
   12176:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12178:	f7ef fc64 	bl	1a44 <Sys_GetCoreID>
   1217c:	4603      	mov	r3, r0
   1217e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId])
   12180:	4a10      	ldr	r2, [pc, #64]	; (121c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
   12182:	9b01      	ldr	r3, [sp, #4]
   12184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12188:	2b00      	cmp	r3, #0
   1218a:	d10d      	bne.n	121a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1218c:	f7ee fbb8 	bl	900 <Adc_schm_read_msr>
   12190:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12192:	9b00      	ldr	r3, [sp, #0]
   12194:	f003 0301 	and.w	r3, r3, #1
   12198:	2b00      	cmp	r3, #0
   1219a:	d100      	bne.n	1219e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1219c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   1219e:	490a      	ldr	r1, [pc, #40]	; (121c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x54>)
   121a0:	9b01      	ldr	r3, [sp, #4]
   121a2:	9a00      	ldr	r2, [sp, #0]
   121a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]++;
   121a8:	4a06      	ldr	r2, [pc, #24]	; (121c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
   121aa:	9b01      	ldr	r3, [sp, #4]
   121ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121b0:	1c5a      	adds	r2, r3, #1
   121b2:	4904      	ldr	r1, [pc, #16]	; (121c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
   121b4:	9b01      	ldr	r3, [sp, #4]
   121b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   121ba:	bf00      	nop
   121bc:	b003      	add	sp, #12
   121be:	f85d fb04 	ldr.w	pc, [sp], #4
   121c2:	bf00      	nop
   121c4:	1fff9298 	.word	0x1fff9298
   121c8:	1fff9294 	.word	0x1fff9294

000121cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
   121cc:	b500      	push	{lr}
   121ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   121d0:	f7ef fc38 	bl	1a44 <Sys_GetCoreID>
   121d4:	4603      	mov	r3, r0
   121d6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]--;
   121d8:	4a0d      	ldr	r2, [pc, #52]	; (12210 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
   121da:	9b01      	ldr	r3, [sp, #4]
   121dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121e0:	1e5a      	subs	r2, r3, #1
   121e2:	490b      	ldr	r1, [pc, #44]	; (12210 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
   121e4:	9b01      	ldr	r3, [sp, #4]
   121e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   121ea:	4a0a      	ldr	r2, [pc, #40]	; (12214 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x48>)
   121ec:	9b01      	ldr	r3, [sp, #4]
   121ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121f2:	f003 0301 	and.w	r3, r3, #1
   121f6:	2b00      	cmp	r3, #0
   121f8:	d106      	bne.n	12208 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
   121fa:	4a05      	ldr	r2, [pc, #20]	; (12210 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
   121fc:	9b01      	ldr	r3, [sp, #4]
   121fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12202:	2b00      	cmp	r3, #0
   12204:	d100      	bne.n	12208 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12206:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12208:	bf00      	nop
   1220a:	b003      	add	sp, #12
   1220c:	f85d fb04 	ldr.w	pc, [sp], #4
   12210:	1fff9298 	.word	0x1fff9298
   12214:	1fff9294 	.word	0x1fff9294

00012218 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
   12218:	b500      	push	{lr}
   1221a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1221c:	f7ef fc12 	bl	1a44 <Sys_GetCoreID>
   12220:	4603      	mov	r3, r0
   12222:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId])
   12224:	4a10      	ldr	r2, [pc, #64]	; (12268 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
   12226:	9b01      	ldr	r3, [sp, #4]
   12228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1222c:	2b00      	cmp	r3, #0
   1222e:	d10d      	bne.n	1224c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12230:	f7ee fb66 	bl	900 <Adc_schm_read_msr>
   12234:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12236:	9b00      	ldr	r3, [sp, #0]
   12238:	f003 0301 	and.w	r3, r3, #1
   1223c:	2b00      	cmp	r3, #0
   1223e:	d100      	bne.n	12242 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12240:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   12242:	490a      	ldr	r1, [pc, #40]	; (1226c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x54>)
   12244:	9b01      	ldr	r3, [sp, #4]
   12246:	9a00      	ldr	r2, [sp, #0]
   12248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]++;
   1224c:	4a06      	ldr	r2, [pc, #24]	; (12268 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
   1224e:	9b01      	ldr	r3, [sp, #4]
   12250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12254:	1c5a      	adds	r2, r3, #1
   12256:	4904      	ldr	r1, [pc, #16]	; (12268 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
   12258:	9b01      	ldr	r3, [sp, #4]
   1225a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1225e:	bf00      	nop
   12260:	b003      	add	sp, #12
   12262:	f85d fb04 	ldr.w	pc, [sp], #4
   12266:	bf00      	nop
   12268:	1fff92a0 	.word	0x1fff92a0
   1226c:	1fff929c 	.word	0x1fff929c

00012270 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
   12270:	b500      	push	{lr}
   12272:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12274:	f7ef fbe6 	bl	1a44 <Sys_GetCoreID>
   12278:	4603      	mov	r3, r0
   1227a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]--;
   1227c:	4a0d      	ldr	r2, [pc, #52]	; (122b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
   1227e:	9b01      	ldr	r3, [sp, #4]
   12280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12284:	1e5a      	subs	r2, r3, #1
   12286:	490b      	ldr	r1, [pc, #44]	; (122b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
   12288:	9b01      	ldr	r3, [sp, #4]
   1228a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   1228e:	4a0a      	ldr	r2, [pc, #40]	; (122b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x48>)
   12290:	9b01      	ldr	r3, [sp, #4]
   12292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12296:	f003 0301 	and.w	r3, r3, #1
   1229a:	2b00      	cmp	r3, #0
   1229c:	d106      	bne.n	122ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
   1229e:	4a05      	ldr	r2, [pc, #20]	; (122b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
   122a0:	9b01      	ldr	r3, [sp, #4]
   122a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122a6:	2b00      	cmp	r3, #0
   122a8:	d100      	bne.n	122ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   122aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   122ac:	bf00      	nop
   122ae:	b003      	add	sp, #12
   122b0:	f85d fb04 	ldr.w	pc, [sp], #4
   122b4:	1fff92a0 	.word	0x1fff92a0
   122b8:	1fff929c 	.word	0x1fff929c

000122bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
   122bc:	b500      	push	{lr}
   122be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   122c0:	f7ef fbc0 	bl	1a44 <Sys_GetCoreID>
   122c4:	4603      	mov	r3, r0
   122c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId])
   122c8:	4a10      	ldr	r2, [pc, #64]	; (1230c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
   122ca:	9b01      	ldr	r3, [sp, #4]
   122cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122d0:	2b00      	cmp	r3, #0
   122d2:	d10d      	bne.n	122f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   122d4:	f7ee fb14 	bl	900 <Adc_schm_read_msr>
   122d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   122da:	9b00      	ldr	r3, [sp, #0]
   122dc:	f003 0301 	and.w	r3, r3, #1
   122e0:	2b00      	cmp	r3, #0
   122e2:	d100      	bne.n	122e6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   122e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   122e6:	490a      	ldr	r1, [pc, #40]	; (12310 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x54>)
   122e8:	9b01      	ldr	r3, [sp, #4]
   122ea:	9a00      	ldr	r2, [sp, #0]
   122ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]++;
   122f0:	4a06      	ldr	r2, [pc, #24]	; (1230c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
   122f2:	9b01      	ldr	r3, [sp, #4]
   122f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122f8:	1c5a      	adds	r2, r3, #1
   122fa:	4904      	ldr	r1, [pc, #16]	; (1230c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
   122fc:	9b01      	ldr	r3, [sp, #4]
   122fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12302:	bf00      	nop
   12304:	b003      	add	sp, #12
   12306:	f85d fb04 	ldr.w	pc, [sp], #4
   1230a:	bf00      	nop
   1230c:	1fff92a8 	.word	0x1fff92a8
   12310:	1fff92a4 	.word	0x1fff92a4

00012314 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
   12314:	b500      	push	{lr}
   12316:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12318:	f7ef fb94 	bl	1a44 <Sys_GetCoreID>
   1231c:	4603      	mov	r3, r0
   1231e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]--;
   12320:	4a0d      	ldr	r2, [pc, #52]	; (12358 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
   12322:	9b01      	ldr	r3, [sp, #4]
   12324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12328:	1e5a      	subs	r2, r3, #1
   1232a:	490b      	ldr	r1, [pc, #44]	; (12358 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
   1232c:	9b01      	ldr	r3, [sp, #4]
   1232e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   12332:	4a0a      	ldr	r2, [pc, #40]	; (1235c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x48>)
   12334:	9b01      	ldr	r3, [sp, #4]
   12336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1233a:	f003 0301 	and.w	r3, r3, #1
   1233e:	2b00      	cmp	r3, #0
   12340:	d106      	bne.n	12350 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
   12342:	4a05      	ldr	r2, [pc, #20]	; (12358 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
   12344:	9b01      	ldr	r3, [sp, #4]
   12346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1234a:	2b00      	cmp	r3, #0
   1234c:	d100      	bne.n	12350 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1234e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12350:	bf00      	nop
   12352:	b003      	add	sp, #12
   12354:	f85d fb04 	ldr.w	pc, [sp], #4
   12358:	1fff92a8 	.word	0x1fff92a8
   1235c:	1fff92a4 	.word	0x1fff92a4

00012360 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
   12360:	b500      	push	{lr}
   12362:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12364:	f7ef fb6e 	bl	1a44 <Sys_GetCoreID>
   12368:	4603      	mov	r3, r0
   1236a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId])
   1236c:	4a10      	ldr	r2, [pc, #64]	; (123b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
   1236e:	9b01      	ldr	r3, [sp, #4]
   12370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12374:	2b00      	cmp	r3, #0
   12376:	d10d      	bne.n	12394 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12378:	f7ee fac2 	bl	900 <Adc_schm_read_msr>
   1237c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1237e:	9b00      	ldr	r3, [sp, #0]
   12380:	f003 0301 	and.w	r3, r3, #1
   12384:	2b00      	cmp	r3, #0
   12386:	d100      	bne.n	1238a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12388:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   1238a:	490a      	ldr	r1, [pc, #40]	; (123b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x54>)
   1238c:	9b01      	ldr	r3, [sp, #4]
   1238e:	9a00      	ldr	r2, [sp, #0]
   12390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]++;
   12394:	4a06      	ldr	r2, [pc, #24]	; (123b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
   12396:	9b01      	ldr	r3, [sp, #4]
   12398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1239c:	1c5a      	adds	r2, r3, #1
   1239e:	4904      	ldr	r1, [pc, #16]	; (123b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
   123a0:	9b01      	ldr	r3, [sp, #4]
   123a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   123a6:	bf00      	nop
   123a8:	b003      	add	sp, #12
   123aa:	f85d fb04 	ldr.w	pc, [sp], #4
   123ae:	bf00      	nop
   123b0:	1fff92b0 	.word	0x1fff92b0
   123b4:	1fff92ac 	.word	0x1fff92ac

000123b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
   123b8:	b500      	push	{lr}
   123ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   123bc:	f7ef fb42 	bl	1a44 <Sys_GetCoreID>
   123c0:	4603      	mov	r3, r0
   123c2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]--;
   123c4:	4a0d      	ldr	r2, [pc, #52]	; (123fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
   123c6:	9b01      	ldr	r3, [sp, #4]
   123c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123cc:	1e5a      	subs	r2, r3, #1
   123ce:	490b      	ldr	r1, [pc, #44]	; (123fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
   123d0:	9b01      	ldr	r3, [sp, #4]
   123d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   123d6:	4a0a      	ldr	r2, [pc, #40]	; (12400 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x48>)
   123d8:	9b01      	ldr	r3, [sp, #4]
   123da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123de:	f003 0301 	and.w	r3, r3, #1
   123e2:	2b00      	cmp	r3, #0
   123e4:	d106      	bne.n	123f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
   123e6:	4a05      	ldr	r2, [pc, #20]	; (123fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
   123e8:	9b01      	ldr	r3, [sp, #4]
   123ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123ee:	2b00      	cmp	r3, #0
   123f0:	d100      	bne.n	123f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   123f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   123f4:	bf00      	nop
   123f6:	b003      	add	sp, #12
   123f8:	f85d fb04 	ldr.w	pc, [sp], #4
   123fc:	1fff92b0 	.word	0x1fff92b0
   12400:	1fff92ac 	.word	0x1fff92ac

00012404 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
   12404:	b500      	push	{lr}
   12406:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12408:	f7ef fb1c 	bl	1a44 <Sys_GetCoreID>
   1240c:	4603      	mov	r3, r0
   1240e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId])
   12410:	4a10      	ldr	r2, [pc, #64]	; (12454 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
   12412:	9b01      	ldr	r3, [sp, #4]
   12414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12418:	2b00      	cmp	r3, #0
   1241a:	d10d      	bne.n	12438 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1241c:	f7ee fa70 	bl	900 <Adc_schm_read_msr>
   12420:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12422:	9b00      	ldr	r3, [sp, #0]
   12424:	f003 0301 	and.w	r3, r3, #1
   12428:	2b00      	cmp	r3, #0
   1242a:	d100      	bne.n	1242e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1242c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   1242e:	490a      	ldr	r1, [pc, #40]	; (12458 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x54>)
   12430:	9b01      	ldr	r3, [sp, #4]
   12432:	9a00      	ldr	r2, [sp, #0]
   12434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]++;
   12438:	4a06      	ldr	r2, [pc, #24]	; (12454 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
   1243a:	9b01      	ldr	r3, [sp, #4]
   1243c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12440:	1c5a      	adds	r2, r3, #1
   12442:	4904      	ldr	r1, [pc, #16]	; (12454 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
   12444:	9b01      	ldr	r3, [sp, #4]
   12446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1244a:	bf00      	nop
   1244c:	b003      	add	sp, #12
   1244e:	f85d fb04 	ldr.w	pc, [sp], #4
   12452:	bf00      	nop
   12454:	1fff92b8 	.word	0x1fff92b8
   12458:	1fff92b4 	.word	0x1fff92b4

0001245c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
   1245c:	b500      	push	{lr}
   1245e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12460:	f7ef faf0 	bl	1a44 <Sys_GetCoreID>
   12464:	4603      	mov	r3, r0
   12466:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]--;
   12468:	4a0d      	ldr	r2, [pc, #52]	; (124a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
   1246a:	9b01      	ldr	r3, [sp, #4]
   1246c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12470:	1e5a      	subs	r2, r3, #1
   12472:	490b      	ldr	r1, [pc, #44]	; (124a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
   12474:	9b01      	ldr	r3, [sp, #4]
   12476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   1247a:	4a0a      	ldr	r2, [pc, #40]	; (124a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x48>)
   1247c:	9b01      	ldr	r3, [sp, #4]
   1247e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12482:	f003 0301 	and.w	r3, r3, #1
   12486:	2b00      	cmp	r3, #0
   12488:	d106      	bne.n	12498 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
   1248a:	4a05      	ldr	r2, [pc, #20]	; (124a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
   1248c:	9b01      	ldr	r3, [sp, #4]
   1248e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12492:	2b00      	cmp	r3, #0
   12494:	d100      	bne.n	12498 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12496:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12498:	bf00      	nop
   1249a:	b003      	add	sp, #12
   1249c:	f85d fb04 	ldr.w	pc, [sp], #4
   124a0:	1fff92b8 	.word	0x1fff92b8
   124a4:	1fff92b4 	.word	0x1fff92b4

000124a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
   124a8:	b500      	push	{lr}
   124aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   124ac:	f7ef faca 	bl	1a44 <Sys_GetCoreID>
   124b0:	4603      	mov	r3, r0
   124b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId])
   124b4:	4a10      	ldr	r2, [pc, #64]	; (124f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
   124b6:	9b01      	ldr	r3, [sp, #4]
   124b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124bc:	2b00      	cmp	r3, #0
   124be:	d10d      	bne.n	124dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   124c0:	f7ee fa1e 	bl	900 <Adc_schm_read_msr>
   124c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   124c6:	9b00      	ldr	r3, [sp, #0]
   124c8:	f003 0301 	and.w	r3, r3, #1
   124cc:	2b00      	cmp	r3, #0
   124ce:	d100      	bne.n	124d2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   124d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_21[u32CoreId] = msr;
   124d2:	490a      	ldr	r1, [pc, #40]	; (124fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x54>)
   124d4:	9b01      	ldr	r3, [sp, #4]
   124d6:	9a00      	ldr	r2, [sp, #0]
   124d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]++;
   124dc:	4a06      	ldr	r2, [pc, #24]	; (124f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
   124de:	9b01      	ldr	r3, [sp, #4]
   124e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124e4:	1c5a      	adds	r2, r3, #1
   124e6:	4904      	ldr	r1, [pc, #16]	; (124f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
   124e8:	9b01      	ldr	r3, [sp, #4]
   124ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   124ee:	bf00      	nop
   124f0:	b003      	add	sp, #12
   124f2:	f85d fb04 	ldr.w	pc, [sp], #4
   124f6:	bf00      	nop
   124f8:	1fff92c0 	.word	0x1fff92c0
   124fc:	1fff92bc 	.word	0x1fff92bc

00012500 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
   12500:	b500      	push	{lr}
   12502:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12504:	f7ef fa9e 	bl	1a44 <Sys_GetCoreID>
   12508:	4603      	mov	r3, r0
   1250a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]--;
   1250c:	4a0d      	ldr	r2, [pc, #52]	; (12544 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
   1250e:	9b01      	ldr	r3, [sp, #4]
   12510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12514:	1e5a      	subs	r2, r3, #1
   12516:	490b      	ldr	r1, [pc, #44]	; (12544 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
   12518:	9b01      	ldr	r3, [sp, #4]
   1251a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
   1251e:	4a0a      	ldr	r2, [pc, #40]	; (12548 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x48>)
   12520:	9b01      	ldr	r3, [sp, #4]
   12522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12526:	f003 0301 	and.w	r3, r3, #1
   1252a:	2b00      	cmp	r3, #0
   1252c:	d106      	bne.n	1253c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
   1252e:	4a05      	ldr	r2, [pc, #20]	; (12544 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
   12530:	9b01      	ldr	r3, [sp, #4]
   12532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12536:	2b00      	cmp	r3, #0
   12538:	d100      	bne.n	1253c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1253a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1253c:	bf00      	nop
   1253e:	b003      	add	sp, #12
   12540:	f85d fb04 	ldr.w	pc, [sp], #4
   12544:	1fff92c0 	.word	0x1fff92c0
   12548:	1fff92bc 	.word	0x1fff92bc

0001254c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
   1254c:	b500      	push	{lr}
   1254e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12550:	f7ef fa78 	bl	1a44 <Sys_GetCoreID>
   12554:	4603      	mov	r3, r0
   12556:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId])
   12558:	4a10      	ldr	r2, [pc, #64]	; (1259c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
   1255a:	9b01      	ldr	r3, [sp, #4]
   1255c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12560:	2b00      	cmp	r3, #0
   12562:	d10d      	bne.n	12580 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12564:	f7ee f9cc 	bl	900 <Adc_schm_read_msr>
   12568:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1256a:	9b00      	ldr	r3, [sp, #0]
   1256c:	f003 0301 	and.w	r3, r3, #1
   12570:	2b00      	cmp	r3, #0
   12572:	d100      	bne.n	12576 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12574:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_22[u32CoreId] = msr;
   12576:	490a      	ldr	r1, [pc, #40]	; (125a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x54>)
   12578:	9b01      	ldr	r3, [sp, #4]
   1257a:	9a00      	ldr	r2, [sp, #0]
   1257c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]++;
   12580:	4a06      	ldr	r2, [pc, #24]	; (1259c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
   12582:	9b01      	ldr	r3, [sp, #4]
   12584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12588:	1c5a      	adds	r2, r3, #1
   1258a:	4904      	ldr	r1, [pc, #16]	; (1259c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
   1258c:	9b01      	ldr	r3, [sp, #4]
   1258e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12592:	bf00      	nop
   12594:	b003      	add	sp, #12
   12596:	f85d fb04 	ldr.w	pc, [sp], #4
   1259a:	bf00      	nop
   1259c:	1fff92c8 	.word	0x1fff92c8
   125a0:	1fff92c4 	.word	0x1fff92c4

000125a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
   125a4:	b500      	push	{lr}
   125a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   125a8:	f7ef fa4c 	bl	1a44 <Sys_GetCoreID>
   125ac:	4603      	mov	r3, r0
   125ae:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]--;
   125b0:	4a0d      	ldr	r2, [pc, #52]	; (125e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
   125b2:	9b01      	ldr	r3, [sp, #4]
   125b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125b8:	1e5a      	subs	r2, r3, #1
   125ba:	490b      	ldr	r1, [pc, #44]	; (125e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
   125bc:	9b01      	ldr	r3, [sp, #4]
   125be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
   125c2:	4a0a      	ldr	r2, [pc, #40]	; (125ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x48>)
   125c4:	9b01      	ldr	r3, [sp, #4]
   125c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125ca:	f003 0301 	and.w	r3, r3, #1
   125ce:	2b00      	cmp	r3, #0
   125d0:	d106      	bne.n	125e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
   125d2:	4a05      	ldr	r2, [pc, #20]	; (125e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
   125d4:	9b01      	ldr	r3, [sp, #4]
   125d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125da:	2b00      	cmp	r3, #0
   125dc:	d100      	bne.n	125e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   125de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   125e0:	bf00      	nop
   125e2:	b003      	add	sp, #12
   125e4:	f85d fb04 	ldr.w	pc, [sp], #4
   125e8:	1fff92c8 	.word	0x1fff92c8
   125ec:	1fff92c4 	.word	0x1fff92c4

000125f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
   125f0:	b500      	push	{lr}
   125f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   125f4:	f7ef fa26 	bl	1a44 <Sys_GetCoreID>
   125f8:	4603      	mov	r3, r0
   125fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId])
   125fc:	4a10      	ldr	r2, [pc, #64]	; (12640 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
   125fe:	9b01      	ldr	r3, [sp, #4]
   12600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12604:	2b00      	cmp	r3, #0
   12606:	d10d      	bne.n	12624 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12608:	f7ee f97a 	bl	900 <Adc_schm_read_msr>
   1260c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1260e:	9b00      	ldr	r3, [sp, #0]
   12610:	f003 0301 	and.w	r3, r3, #1
   12614:	2b00      	cmp	r3, #0
   12616:	d100      	bne.n	1261a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12618:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_23[u32CoreId] = msr;
   1261a:	490a      	ldr	r1, [pc, #40]	; (12644 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x54>)
   1261c:	9b01      	ldr	r3, [sp, #4]
   1261e:	9a00      	ldr	r2, [sp, #0]
   12620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]++;
   12624:	4a06      	ldr	r2, [pc, #24]	; (12640 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
   12626:	9b01      	ldr	r3, [sp, #4]
   12628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1262c:	1c5a      	adds	r2, r3, #1
   1262e:	4904      	ldr	r1, [pc, #16]	; (12640 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
   12630:	9b01      	ldr	r3, [sp, #4]
   12632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12636:	bf00      	nop
   12638:	b003      	add	sp, #12
   1263a:	f85d fb04 	ldr.w	pc, [sp], #4
   1263e:	bf00      	nop
   12640:	1fff92d0 	.word	0x1fff92d0
   12644:	1fff92cc 	.word	0x1fff92cc

00012648 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
   12648:	b500      	push	{lr}
   1264a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1264c:	f7ef f9fa 	bl	1a44 <Sys_GetCoreID>
   12650:	4603      	mov	r3, r0
   12652:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]--;
   12654:	4a0d      	ldr	r2, [pc, #52]	; (1268c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
   12656:	9b01      	ldr	r3, [sp, #4]
   12658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1265c:	1e5a      	subs	r2, r3, #1
   1265e:	490b      	ldr	r1, [pc, #44]	; (1268c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
   12660:	9b01      	ldr	r3, [sp, #4]
   12662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   12666:	4a0a      	ldr	r2, [pc, #40]	; (12690 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x48>)
   12668:	9b01      	ldr	r3, [sp, #4]
   1266a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1266e:	f003 0301 	and.w	r3, r3, #1
   12672:	2b00      	cmp	r3, #0
   12674:	d106      	bne.n	12684 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
   12676:	4a05      	ldr	r2, [pc, #20]	; (1268c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
   12678:	9b01      	ldr	r3, [sp, #4]
   1267a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1267e:	2b00      	cmp	r3, #0
   12680:	d100      	bne.n	12684 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12682:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12684:	bf00      	nop
   12686:	b003      	add	sp, #12
   12688:	f85d fb04 	ldr.w	pc, [sp], #4
   1268c:	1fff92d0 	.word	0x1fff92d0
   12690:	1fff92cc 	.word	0x1fff92cc

00012694 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
   12694:	b500      	push	{lr}
   12696:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12698:	f7ef f9d4 	bl	1a44 <Sys_GetCoreID>
   1269c:	4603      	mov	r3, r0
   1269e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId])
   126a0:	4a10      	ldr	r2, [pc, #64]	; (126e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
   126a2:	9b01      	ldr	r3, [sp, #4]
   126a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126a8:	2b00      	cmp	r3, #0
   126aa:	d10d      	bne.n	126c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   126ac:	f7ee f928 	bl	900 <Adc_schm_read_msr>
   126b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   126b2:	9b00      	ldr	r3, [sp, #0]
   126b4:	f003 0301 	and.w	r3, r3, #1
   126b8:	2b00      	cmp	r3, #0
   126ba:	d100      	bne.n	126be <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   126bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   126be:	490a      	ldr	r1, [pc, #40]	; (126e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x54>)
   126c0:	9b01      	ldr	r3, [sp, #4]
   126c2:	9a00      	ldr	r2, [sp, #0]
   126c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]++;
   126c8:	4a06      	ldr	r2, [pc, #24]	; (126e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
   126ca:	9b01      	ldr	r3, [sp, #4]
   126cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126d0:	1c5a      	adds	r2, r3, #1
   126d2:	4904      	ldr	r1, [pc, #16]	; (126e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
   126d4:	9b01      	ldr	r3, [sp, #4]
   126d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   126da:	bf00      	nop
   126dc:	b003      	add	sp, #12
   126de:	f85d fb04 	ldr.w	pc, [sp], #4
   126e2:	bf00      	nop
   126e4:	1fff92d8 	.word	0x1fff92d8
   126e8:	1fff92d4 	.word	0x1fff92d4

000126ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
   126ec:	b500      	push	{lr}
   126ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   126f0:	f7ef f9a8 	bl	1a44 <Sys_GetCoreID>
   126f4:	4603      	mov	r3, r0
   126f6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]--;
   126f8:	4a0d      	ldr	r2, [pc, #52]	; (12730 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
   126fa:	9b01      	ldr	r3, [sp, #4]
   126fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12700:	1e5a      	subs	r2, r3, #1
   12702:	490b      	ldr	r1, [pc, #44]	; (12730 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
   12704:	9b01      	ldr	r3, [sp, #4]
   12706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   1270a:	4a0a      	ldr	r2, [pc, #40]	; (12734 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x48>)
   1270c:	9b01      	ldr	r3, [sp, #4]
   1270e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12712:	f003 0301 	and.w	r3, r3, #1
   12716:	2b00      	cmp	r3, #0
   12718:	d106      	bne.n	12728 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
   1271a:	4a05      	ldr	r2, [pc, #20]	; (12730 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
   1271c:	9b01      	ldr	r3, [sp, #4]
   1271e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12722:	2b00      	cmp	r3, #0
   12724:	d100      	bne.n	12728 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12726:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12728:	bf00      	nop
   1272a:	b003      	add	sp, #12
   1272c:	f85d fb04 	ldr.w	pc, [sp], #4
   12730:	1fff92d8 	.word	0x1fff92d8
   12734:	1fff92d4 	.word	0x1fff92d4

00012738 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
   12738:	b500      	push	{lr}
   1273a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1273c:	f7ef f982 	bl	1a44 <Sys_GetCoreID>
   12740:	4603      	mov	r3, r0
   12742:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId])
   12744:	4a10      	ldr	r2, [pc, #64]	; (12788 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
   12746:	9b01      	ldr	r3, [sp, #4]
   12748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1274c:	2b00      	cmp	r3, #0
   1274e:	d10d      	bne.n	1276c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12750:	f7ee f8d6 	bl	900 <Adc_schm_read_msr>
   12754:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12756:	9b00      	ldr	r3, [sp, #0]
   12758:	f003 0301 	and.w	r3, r3, #1
   1275c:	2b00      	cmp	r3, #0
   1275e:	d100      	bne.n	12762 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12760:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   12762:	490a      	ldr	r1, [pc, #40]	; (1278c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x54>)
   12764:	9b01      	ldr	r3, [sp, #4]
   12766:	9a00      	ldr	r2, [sp, #0]
   12768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]++;
   1276c:	4a06      	ldr	r2, [pc, #24]	; (12788 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
   1276e:	9b01      	ldr	r3, [sp, #4]
   12770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12774:	1c5a      	adds	r2, r3, #1
   12776:	4904      	ldr	r1, [pc, #16]	; (12788 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
   12778:	9b01      	ldr	r3, [sp, #4]
   1277a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1277e:	bf00      	nop
   12780:	b003      	add	sp, #12
   12782:	f85d fb04 	ldr.w	pc, [sp], #4
   12786:	bf00      	nop
   12788:	1fff92e0 	.word	0x1fff92e0
   1278c:	1fff92dc 	.word	0x1fff92dc

00012790 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
   12790:	b500      	push	{lr}
   12792:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12794:	f7ef f956 	bl	1a44 <Sys_GetCoreID>
   12798:	4603      	mov	r3, r0
   1279a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]--;
   1279c:	4a0d      	ldr	r2, [pc, #52]	; (127d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
   1279e:	9b01      	ldr	r3, [sp, #4]
   127a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127a4:	1e5a      	subs	r2, r3, #1
   127a6:	490b      	ldr	r1, [pc, #44]	; (127d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
   127a8:	9b01      	ldr	r3, [sp, #4]
   127aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   127ae:	4a0a      	ldr	r2, [pc, #40]	; (127d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x48>)
   127b0:	9b01      	ldr	r3, [sp, #4]
   127b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127b6:	f003 0301 	and.w	r3, r3, #1
   127ba:	2b00      	cmp	r3, #0
   127bc:	d106      	bne.n	127cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
   127be:	4a05      	ldr	r2, [pc, #20]	; (127d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
   127c0:	9b01      	ldr	r3, [sp, #4]
   127c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127c6:	2b00      	cmp	r3, #0
   127c8:	d100      	bne.n	127cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   127ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   127cc:	bf00      	nop
   127ce:	b003      	add	sp, #12
   127d0:	f85d fb04 	ldr.w	pc, [sp], #4
   127d4:	1fff92e0 	.word	0x1fff92e0
   127d8:	1fff92dc 	.word	0x1fff92dc

000127dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
   127dc:	b500      	push	{lr}
   127de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   127e0:	f7ef f930 	bl	1a44 <Sys_GetCoreID>
   127e4:	4603      	mov	r3, r0
   127e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId])
   127e8:	4a10      	ldr	r2, [pc, #64]	; (1282c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
   127ea:	9b01      	ldr	r3, [sp, #4]
   127ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127f0:	2b00      	cmp	r3, #0
   127f2:	d10d      	bne.n	12810 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   127f4:	f7ee f884 	bl	900 <Adc_schm_read_msr>
   127f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   127fa:	9b00      	ldr	r3, [sp, #0]
   127fc:	f003 0301 	and.w	r3, r3, #1
   12800:	2b00      	cmp	r3, #0
   12802:	d100      	bne.n	12806 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12804:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   12806:	490a      	ldr	r1, [pc, #40]	; (12830 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x54>)
   12808:	9b01      	ldr	r3, [sp, #4]
   1280a:	9a00      	ldr	r2, [sp, #0]
   1280c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]++;
   12810:	4a06      	ldr	r2, [pc, #24]	; (1282c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
   12812:	9b01      	ldr	r3, [sp, #4]
   12814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12818:	1c5a      	adds	r2, r3, #1
   1281a:	4904      	ldr	r1, [pc, #16]	; (1282c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
   1281c:	9b01      	ldr	r3, [sp, #4]
   1281e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12822:	bf00      	nop
   12824:	b003      	add	sp, #12
   12826:	f85d fb04 	ldr.w	pc, [sp], #4
   1282a:	bf00      	nop
   1282c:	1fff92e8 	.word	0x1fff92e8
   12830:	1fff92e4 	.word	0x1fff92e4

00012834 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
   12834:	b500      	push	{lr}
   12836:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12838:	f7ef f904 	bl	1a44 <Sys_GetCoreID>
   1283c:	4603      	mov	r3, r0
   1283e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]--;
   12840:	4a0d      	ldr	r2, [pc, #52]	; (12878 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
   12842:	9b01      	ldr	r3, [sp, #4]
   12844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12848:	1e5a      	subs	r2, r3, #1
   1284a:	490b      	ldr	r1, [pc, #44]	; (12878 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
   1284c:	9b01      	ldr	r3, [sp, #4]
   1284e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   12852:	4a0a      	ldr	r2, [pc, #40]	; (1287c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x48>)
   12854:	9b01      	ldr	r3, [sp, #4]
   12856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1285a:	f003 0301 	and.w	r3, r3, #1
   1285e:	2b00      	cmp	r3, #0
   12860:	d106      	bne.n	12870 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
   12862:	4a05      	ldr	r2, [pc, #20]	; (12878 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
   12864:	9b01      	ldr	r3, [sp, #4]
   12866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1286a:	2b00      	cmp	r3, #0
   1286c:	d100      	bne.n	12870 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1286e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12870:	bf00      	nop
   12872:	b003      	add	sp, #12
   12874:	f85d fb04 	ldr.w	pc, [sp], #4
   12878:	1fff92e8 	.word	0x1fff92e8
   1287c:	1fff92e4 	.word	0x1fff92e4

00012880 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
   12880:	b500      	push	{lr}
   12882:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12884:	f7ef f8de 	bl	1a44 <Sys_GetCoreID>
   12888:	4603      	mov	r3, r0
   1288a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId])
   1288c:	4a10      	ldr	r2, [pc, #64]	; (128d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
   1288e:	9b01      	ldr	r3, [sp, #4]
   12890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12894:	2b00      	cmp	r3, #0
   12896:	d10d      	bne.n	128b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12898:	f7ee f832 	bl	900 <Adc_schm_read_msr>
   1289c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1289e:	9b00      	ldr	r3, [sp, #0]
   128a0:	f003 0301 	and.w	r3, r3, #1
   128a4:	2b00      	cmp	r3, #0
   128a6:	d100      	bne.n	128aa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   128a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   128aa:	490a      	ldr	r1, [pc, #40]	; (128d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x54>)
   128ac:	9b01      	ldr	r3, [sp, #4]
   128ae:	9a00      	ldr	r2, [sp, #0]
   128b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]++;
   128b4:	4a06      	ldr	r2, [pc, #24]	; (128d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
   128b6:	9b01      	ldr	r3, [sp, #4]
   128b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128bc:	1c5a      	adds	r2, r3, #1
   128be:	4904      	ldr	r1, [pc, #16]	; (128d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
   128c0:	9b01      	ldr	r3, [sp, #4]
   128c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   128c6:	bf00      	nop
   128c8:	b003      	add	sp, #12
   128ca:	f85d fb04 	ldr.w	pc, [sp], #4
   128ce:	bf00      	nop
   128d0:	1fff92f0 	.word	0x1fff92f0
   128d4:	1fff92ec 	.word	0x1fff92ec

000128d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
   128d8:	b500      	push	{lr}
   128da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   128dc:	f7ef f8b2 	bl	1a44 <Sys_GetCoreID>
   128e0:	4603      	mov	r3, r0
   128e2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]--;
   128e4:	4a0d      	ldr	r2, [pc, #52]	; (1291c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   128e6:	9b01      	ldr	r3, [sp, #4]
   128e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128ec:	1e5a      	subs	r2, r3, #1
   128ee:	490b      	ldr	r1, [pc, #44]	; (1291c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   128f0:	9b01      	ldr	r3, [sp, #4]
   128f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   128f6:	4a0a      	ldr	r2, [pc, #40]	; (12920 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x48>)
   128f8:	9b01      	ldr	r3, [sp, #4]
   128fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128fe:	f003 0301 	and.w	r3, r3, #1
   12902:	2b00      	cmp	r3, #0
   12904:	d106      	bne.n	12914 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
   12906:	4a05      	ldr	r2, [pc, #20]	; (1291c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   12908:	9b01      	ldr	r3, [sp, #4]
   1290a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1290e:	2b00      	cmp	r3, #0
   12910:	d100      	bne.n	12914 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12912:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12914:	bf00      	nop
   12916:	b003      	add	sp, #12
   12918:	f85d fb04 	ldr.w	pc, [sp], #4
   1291c:	1fff92f0 	.word	0x1fff92f0
   12920:	1fff92ec 	.word	0x1fff92ec

00012924 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
   12924:	b500      	push	{lr}
   12926:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12928:	f7ef f88c 	bl	1a44 <Sys_GetCoreID>
   1292c:	4603      	mov	r3, r0
   1292e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId])
   12930:	4a10      	ldr	r2, [pc, #64]	; (12974 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   12932:	9b01      	ldr	r3, [sp, #4]
   12934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12938:	2b00      	cmp	r3, #0
   1293a:	d10d      	bne.n	12958 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1293c:	f7ed ffe0 	bl	900 <Adc_schm_read_msr>
   12940:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12942:	9b00      	ldr	r3, [sp, #0]
   12944:	f003 0301 	and.w	r3, r3, #1
   12948:	2b00      	cmp	r3, #0
   1294a:	d100      	bne.n	1294e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1294c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_28[u32CoreId] = msr;
   1294e:	490a      	ldr	r1, [pc, #40]	; (12978 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x54>)
   12950:	9b01      	ldr	r3, [sp, #4]
   12952:	9a00      	ldr	r2, [sp, #0]
   12954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]++;
   12958:	4a06      	ldr	r2, [pc, #24]	; (12974 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   1295a:	9b01      	ldr	r3, [sp, #4]
   1295c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12960:	1c5a      	adds	r2, r3, #1
   12962:	4904      	ldr	r1, [pc, #16]	; (12974 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   12964:	9b01      	ldr	r3, [sp, #4]
   12966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1296a:	bf00      	nop
   1296c:	b003      	add	sp, #12
   1296e:	f85d fb04 	ldr.w	pc, [sp], #4
   12972:	bf00      	nop
   12974:	1fff92f8 	.word	0x1fff92f8
   12978:	1fff92f4 	.word	0x1fff92f4

0001297c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
   1297c:	b500      	push	{lr}
   1297e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12980:	f7ef f860 	bl	1a44 <Sys_GetCoreID>
   12984:	4603      	mov	r3, r0
   12986:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]--;
   12988:	4a0d      	ldr	r2, [pc, #52]	; (129c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   1298a:	9b01      	ldr	r3, [sp, #4]
   1298c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12990:	1e5a      	subs	r2, r3, #1
   12992:	490b      	ldr	r1, [pc, #44]	; (129c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   12994:	9b01      	ldr	r3, [sp, #4]
   12996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_28[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]))         /*if interrupts were enabled*/
   1299a:	4a0a      	ldr	r2, [pc, #40]	; (129c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x48>)
   1299c:	9b01      	ldr	r3, [sp, #4]
   1299e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129a2:	f003 0301 	and.w	r3, r3, #1
   129a6:	2b00      	cmp	r3, #0
   129a8:	d106      	bne.n	129b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
   129aa:	4a05      	ldr	r2, [pc, #20]	; (129c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   129ac:	9b01      	ldr	r3, [sp, #4]
   129ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129b2:	2b00      	cmp	r3, #0
   129b4:	d100      	bne.n	129b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   129b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   129b8:	bf00      	nop
   129ba:	b003      	add	sp, #12
   129bc:	f85d fb04 	ldr.w	pc, [sp], #4
   129c0:	1fff92f8 	.word	0x1fff92f8
   129c4:	1fff92f4 	.word	0x1fff92f4

000129c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
   129c8:	b500      	push	{lr}
   129ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   129cc:	f7ef f83a 	bl	1a44 <Sys_GetCoreID>
   129d0:	4603      	mov	r3, r0
   129d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId])
   129d4:	4a10      	ldr	r2, [pc, #64]	; (12a18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   129d6:	9b01      	ldr	r3, [sp, #4]
   129d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129dc:	2b00      	cmp	r3, #0
   129de:	d10d      	bne.n	129fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   129e0:	f7ed ff8e 	bl	900 <Adc_schm_read_msr>
   129e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   129e6:	9b00      	ldr	r3, [sp, #0]
   129e8:	f003 0301 	and.w	r3, r3, #1
   129ec:	2b00      	cmp	r3, #0
   129ee:	d100      	bne.n	129f2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   129f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_29[u32CoreId] = msr;
   129f2:	490a      	ldr	r1, [pc, #40]	; (12a1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x54>)
   129f4:	9b01      	ldr	r3, [sp, #4]
   129f6:	9a00      	ldr	r2, [sp, #0]
   129f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]++;
   129fc:	4a06      	ldr	r2, [pc, #24]	; (12a18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   129fe:	9b01      	ldr	r3, [sp, #4]
   12a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a04:	1c5a      	adds	r2, r3, #1
   12a06:	4904      	ldr	r1, [pc, #16]	; (12a18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   12a08:	9b01      	ldr	r3, [sp, #4]
   12a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12a0e:	bf00      	nop
   12a10:	b003      	add	sp, #12
   12a12:	f85d fb04 	ldr.w	pc, [sp], #4
   12a16:	bf00      	nop
   12a18:	1fff9300 	.word	0x1fff9300
   12a1c:	1fff92fc 	.word	0x1fff92fc

00012a20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
   12a20:	b500      	push	{lr}
   12a22:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12a24:	f7ef f80e 	bl	1a44 <Sys_GetCoreID>
   12a28:	4603      	mov	r3, r0
   12a2a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]--;
   12a2c:	4a0d      	ldr	r2, [pc, #52]	; (12a64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   12a2e:	9b01      	ldr	r3, [sp, #4]
   12a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a34:	1e5a      	subs	r2, r3, #1
   12a36:	490b      	ldr	r1, [pc, #44]	; (12a64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   12a38:	9b01      	ldr	r3, [sp, #4]
   12a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
   12a3e:	4a0a      	ldr	r2, [pc, #40]	; (12a68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x48>)
   12a40:	9b01      	ldr	r3, [sp, #4]
   12a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a46:	f003 0301 	and.w	r3, r3, #1
   12a4a:	2b00      	cmp	r3, #0
   12a4c:	d106      	bne.n	12a5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
   12a4e:	4a05      	ldr	r2, [pc, #20]	; (12a64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   12a50:	9b01      	ldr	r3, [sp, #4]
   12a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a56:	2b00      	cmp	r3, #0
   12a58:	d100      	bne.n	12a5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12a5a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12a5c:	bf00      	nop
   12a5e:	b003      	add	sp, #12
   12a60:	f85d fb04 	ldr.w	pc, [sp], #4
   12a64:	1fff9300 	.word	0x1fff9300
   12a68:	1fff92fc 	.word	0x1fff92fc

00012a6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
   12a6c:	b500      	push	{lr}
   12a6e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12a70:	f7ee ffe8 	bl	1a44 <Sys_GetCoreID>
   12a74:	4603      	mov	r3, r0
   12a76:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId])
   12a78:	4a10      	ldr	r2, [pc, #64]	; (12abc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   12a7a:	9b01      	ldr	r3, [sp, #4]
   12a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a80:	2b00      	cmp	r3, #0
   12a82:	d10d      	bne.n	12aa0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12a84:	f7ed ff3c 	bl	900 <Adc_schm_read_msr>
   12a88:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12a8a:	9b00      	ldr	r3, [sp, #0]
   12a8c:	f003 0301 	and.w	r3, r3, #1
   12a90:	2b00      	cmp	r3, #0
   12a92:	d100      	bne.n	12a96 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12a94:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_30[u32CoreId] = msr;
   12a96:	490a      	ldr	r1, [pc, #40]	; (12ac0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x54>)
   12a98:	9b01      	ldr	r3, [sp, #4]
   12a9a:	9a00      	ldr	r2, [sp, #0]
   12a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]++;
   12aa0:	4a06      	ldr	r2, [pc, #24]	; (12abc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   12aa2:	9b01      	ldr	r3, [sp, #4]
   12aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12aa8:	1c5a      	adds	r2, r3, #1
   12aaa:	4904      	ldr	r1, [pc, #16]	; (12abc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   12aac:	9b01      	ldr	r3, [sp, #4]
   12aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12ab2:	bf00      	nop
   12ab4:	b003      	add	sp, #12
   12ab6:	f85d fb04 	ldr.w	pc, [sp], #4
   12aba:	bf00      	nop
   12abc:	1fff9308 	.word	0x1fff9308
   12ac0:	1fff9304 	.word	0x1fff9304

00012ac4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
   12ac4:	b500      	push	{lr}
   12ac6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12ac8:	f7ee ffbc 	bl	1a44 <Sys_GetCoreID>
   12acc:	4603      	mov	r3, r0
   12ace:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]--;
   12ad0:	4a0d      	ldr	r2, [pc, #52]	; (12b08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   12ad2:	9b01      	ldr	r3, [sp, #4]
   12ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ad8:	1e5a      	subs	r2, r3, #1
   12ada:	490b      	ldr	r1, [pc, #44]	; (12b08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   12adc:	9b01      	ldr	r3, [sp, #4]
   12ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
   12ae2:	4a0a      	ldr	r2, [pc, #40]	; (12b0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x48>)
   12ae4:	9b01      	ldr	r3, [sp, #4]
   12ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12aea:	f003 0301 	and.w	r3, r3, #1
   12aee:	2b00      	cmp	r3, #0
   12af0:	d106      	bne.n	12b00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
   12af2:	4a05      	ldr	r2, [pc, #20]	; (12b08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   12af4:	9b01      	ldr	r3, [sp, #4]
   12af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12afa:	2b00      	cmp	r3, #0
   12afc:	d100      	bne.n	12b00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12afe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12b00:	bf00      	nop
   12b02:	b003      	add	sp, #12
   12b04:	f85d fb04 	ldr.w	pc, [sp], #4
   12b08:	1fff9308 	.word	0x1fff9308
   12b0c:	1fff9304 	.word	0x1fff9304

00012b10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
   12b10:	b500      	push	{lr}
   12b12:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12b14:	f7ee ff96 	bl	1a44 <Sys_GetCoreID>
   12b18:	4603      	mov	r3, r0
   12b1a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId])
   12b1c:	4a10      	ldr	r2, [pc, #64]	; (12b60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   12b1e:	9b01      	ldr	r3, [sp, #4]
   12b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b24:	2b00      	cmp	r3, #0
   12b26:	d10d      	bne.n	12b44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12b28:	f7ed feea 	bl	900 <Adc_schm_read_msr>
   12b2c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12b2e:	9b00      	ldr	r3, [sp, #0]
   12b30:	f003 0301 	and.w	r3, r3, #1
   12b34:	2b00      	cmp	r3, #0
   12b36:	d100      	bne.n	12b3a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12b38:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_31[u32CoreId] = msr;
   12b3a:	490a      	ldr	r1, [pc, #40]	; (12b64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x54>)
   12b3c:	9b01      	ldr	r3, [sp, #4]
   12b3e:	9a00      	ldr	r2, [sp, #0]
   12b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]++;
   12b44:	4a06      	ldr	r2, [pc, #24]	; (12b60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   12b46:	9b01      	ldr	r3, [sp, #4]
   12b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b4c:	1c5a      	adds	r2, r3, #1
   12b4e:	4904      	ldr	r1, [pc, #16]	; (12b60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   12b50:	9b01      	ldr	r3, [sp, #4]
   12b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12b56:	bf00      	nop
   12b58:	b003      	add	sp, #12
   12b5a:	f85d fb04 	ldr.w	pc, [sp], #4
   12b5e:	bf00      	nop
   12b60:	1fff9310 	.word	0x1fff9310
   12b64:	1fff930c 	.word	0x1fff930c

00012b68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
   12b68:	b500      	push	{lr}
   12b6a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12b6c:	f7ee ff6a 	bl	1a44 <Sys_GetCoreID>
   12b70:	4603      	mov	r3, r0
   12b72:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]--;
   12b74:	4a0d      	ldr	r2, [pc, #52]	; (12bac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   12b76:	9b01      	ldr	r3, [sp, #4]
   12b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b7c:	1e5a      	subs	r2, r3, #1
   12b7e:	490b      	ldr	r1, [pc, #44]	; (12bac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   12b80:	9b01      	ldr	r3, [sp, #4]
   12b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
   12b86:	4a0a      	ldr	r2, [pc, #40]	; (12bb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x48>)
   12b88:	9b01      	ldr	r3, [sp, #4]
   12b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b8e:	f003 0301 	and.w	r3, r3, #1
   12b92:	2b00      	cmp	r3, #0
   12b94:	d106      	bne.n	12ba4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
   12b96:	4a05      	ldr	r2, [pc, #20]	; (12bac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   12b98:	9b01      	ldr	r3, [sp, #4]
   12b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b9e:	2b00      	cmp	r3, #0
   12ba0:	d100      	bne.n	12ba4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12ba2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12ba4:	bf00      	nop
   12ba6:	b003      	add	sp, #12
   12ba8:	f85d fb04 	ldr.w	pc, [sp], #4
   12bac:	1fff9310 	.word	0x1fff9310
   12bb0:	1fff930c 	.word	0x1fff930c

00012bb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
   12bb4:	b500      	push	{lr}
   12bb6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12bb8:	f7ee ff44 	bl	1a44 <Sys_GetCoreID>
   12bbc:	4603      	mov	r3, r0
   12bbe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId])
   12bc0:	4a10      	ldr	r2, [pc, #64]	; (12c04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   12bc2:	9b01      	ldr	r3, [sp, #4]
   12bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bc8:	2b00      	cmp	r3, #0
   12bca:	d10d      	bne.n	12be8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12bcc:	f7ed fe98 	bl	900 <Adc_schm_read_msr>
   12bd0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12bd2:	9b00      	ldr	r3, [sp, #0]
   12bd4:	f003 0301 	and.w	r3, r3, #1
   12bd8:	2b00      	cmp	r3, #0
   12bda:	d100      	bne.n	12bde <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12bdc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_32[u32CoreId] = msr;
   12bde:	490a      	ldr	r1, [pc, #40]	; (12c08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x54>)
   12be0:	9b01      	ldr	r3, [sp, #4]
   12be2:	9a00      	ldr	r2, [sp, #0]
   12be4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]++;
   12be8:	4a06      	ldr	r2, [pc, #24]	; (12c04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   12bea:	9b01      	ldr	r3, [sp, #4]
   12bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bf0:	1c5a      	adds	r2, r3, #1
   12bf2:	4904      	ldr	r1, [pc, #16]	; (12c04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   12bf4:	9b01      	ldr	r3, [sp, #4]
   12bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12bfa:	bf00      	nop
   12bfc:	b003      	add	sp, #12
   12bfe:	f85d fb04 	ldr.w	pc, [sp], #4
   12c02:	bf00      	nop
   12c04:	1fff9318 	.word	0x1fff9318
   12c08:	1fff9314 	.word	0x1fff9314

00012c0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
   12c0c:	b500      	push	{lr}
   12c0e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12c10:	f7ee ff18 	bl	1a44 <Sys_GetCoreID>
   12c14:	4603      	mov	r3, r0
   12c16:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]--;
   12c18:	4a0d      	ldr	r2, [pc, #52]	; (12c50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   12c1a:	9b01      	ldr	r3, [sp, #4]
   12c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c20:	1e5a      	subs	r2, r3, #1
   12c22:	490b      	ldr	r1, [pc, #44]	; (12c50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   12c24:	9b01      	ldr	r3, [sp, #4]
   12c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_32[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]))         /*if interrupts were enabled*/
   12c2a:	4a0a      	ldr	r2, [pc, #40]	; (12c54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x48>)
   12c2c:	9b01      	ldr	r3, [sp, #4]
   12c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c32:	f003 0301 	and.w	r3, r3, #1
   12c36:	2b00      	cmp	r3, #0
   12c38:	d106      	bne.n	12c48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
   12c3a:	4a05      	ldr	r2, [pc, #20]	; (12c50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   12c3c:	9b01      	ldr	r3, [sp, #4]
   12c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c42:	2b00      	cmp	r3, #0
   12c44:	d100      	bne.n	12c48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12c46:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12c48:	bf00      	nop
   12c4a:	b003      	add	sp, #12
   12c4c:	f85d fb04 	ldr.w	pc, [sp], #4
   12c50:	1fff9318 	.word	0x1fff9318
   12c54:	1fff9314 	.word	0x1fff9314

00012c58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
   12c58:	b500      	push	{lr}
   12c5a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12c5c:	f7ee fef2 	bl	1a44 <Sys_GetCoreID>
   12c60:	4603      	mov	r3, r0
   12c62:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId])
   12c64:	4a10      	ldr	r2, [pc, #64]	; (12ca8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   12c66:	9b01      	ldr	r3, [sp, #4]
   12c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c6c:	2b00      	cmp	r3, #0
   12c6e:	d10d      	bne.n	12c8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12c70:	f7ed fe46 	bl	900 <Adc_schm_read_msr>
   12c74:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12c76:	9b00      	ldr	r3, [sp, #0]
   12c78:	f003 0301 	and.w	r3, r3, #1
   12c7c:	2b00      	cmp	r3, #0
   12c7e:	d100      	bne.n	12c82 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12c80:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_33[u32CoreId] = msr;
   12c82:	490a      	ldr	r1, [pc, #40]	; (12cac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x54>)
   12c84:	9b01      	ldr	r3, [sp, #4]
   12c86:	9a00      	ldr	r2, [sp, #0]
   12c88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]++;
   12c8c:	4a06      	ldr	r2, [pc, #24]	; (12ca8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   12c8e:	9b01      	ldr	r3, [sp, #4]
   12c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c94:	1c5a      	adds	r2, r3, #1
   12c96:	4904      	ldr	r1, [pc, #16]	; (12ca8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   12c98:	9b01      	ldr	r3, [sp, #4]
   12c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12c9e:	bf00      	nop
   12ca0:	b003      	add	sp, #12
   12ca2:	f85d fb04 	ldr.w	pc, [sp], #4
   12ca6:	bf00      	nop
   12ca8:	1fff9320 	.word	0x1fff9320
   12cac:	1fff931c 	.word	0x1fff931c

00012cb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
   12cb0:	b500      	push	{lr}
   12cb2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12cb4:	f7ee fec6 	bl	1a44 <Sys_GetCoreID>
   12cb8:	4603      	mov	r3, r0
   12cba:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]--;
   12cbc:	4a0d      	ldr	r2, [pc, #52]	; (12cf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   12cbe:	9b01      	ldr	r3, [sp, #4]
   12cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12cc4:	1e5a      	subs	r2, r3, #1
   12cc6:	490b      	ldr	r1, [pc, #44]	; (12cf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   12cc8:	9b01      	ldr	r3, [sp, #4]
   12cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_33[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]))         /*if interrupts were enabled*/
   12cce:	4a0a      	ldr	r2, [pc, #40]	; (12cf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x48>)
   12cd0:	9b01      	ldr	r3, [sp, #4]
   12cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12cd6:	f003 0301 	and.w	r3, r3, #1
   12cda:	2b00      	cmp	r3, #0
   12cdc:	d106      	bne.n	12cec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
   12cde:	4a05      	ldr	r2, [pc, #20]	; (12cf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   12ce0:	9b01      	ldr	r3, [sp, #4]
   12ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ce6:	2b00      	cmp	r3, #0
   12ce8:	d100      	bne.n	12cec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12cea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12cec:	bf00      	nop
   12cee:	b003      	add	sp, #12
   12cf0:	f85d fb04 	ldr.w	pc, [sp], #4
   12cf4:	1fff9320 	.word	0x1fff9320
   12cf8:	1fff931c 	.word	0x1fff931c

00012cfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
   12cfc:	b500      	push	{lr}
   12cfe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12d00:	f7ee fea0 	bl	1a44 <Sys_GetCoreID>
   12d04:	4603      	mov	r3, r0
   12d06:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId])
   12d08:	4a10      	ldr	r2, [pc, #64]	; (12d4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   12d0a:	9b01      	ldr	r3, [sp, #4]
   12d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d10:	2b00      	cmp	r3, #0
   12d12:	d10d      	bne.n	12d30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12d14:	f7ed fdf4 	bl	900 <Adc_schm_read_msr>
   12d18:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12d1a:	9b00      	ldr	r3, [sp, #0]
   12d1c:	f003 0301 	and.w	r3, r3, #1
   12d20:	2b00      	cmp	r3, #0
   12d22:	d100      	bne.n	12d26 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12d24:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_34[u32CoreId] = msr;
   12d26:	490a      	ldr	r1, [pc, #40]	; (12d50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x54>)
   12d28:	9b01      	ldr	r3, [sp, #4]
   12d2a:	9a00      	ldr	r2, [sp, #0]
   12d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]++;
   12d30:	4a06      	ldr	r2, [pc, #24]	; (12d4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   12d32:	9b01      	ldr	r3, [sp, #4]
   12d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d38:	1c5a      	adds	r2, r3, #1
   12d3a:	4904      	ldr	r1, [pc, #16]	; (12d4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   12d3c:	9b01      	ldr	r3, [sp, #4]
   12d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12d42:	bf00      	nop
   12d44:	b003      	add	sp, #12
   12d46:	f85d fb04 	ldr.w	pc, [sp], #4
   12d4a:	bf00      	nop
   12d4c:	1fff9328 	.word	0x1fff9328
   12d50:	1fff9324 	.word	0x1fff9324

00012d54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
   12d54:	b500      	push	{lr}
   12d56:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12d58:	f7ee fe74 	bl	1a44 <Sys_GetCoreID>
   12d5c:	4603      	mov	r3, r0
   12d5e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]--;
   12d60:	4a0d      	ldr	r2, [pc, #52]	; (12d98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   12d62:	9b01      	ldr	r3, [sp, #4]
   12d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d68:	1e5a      	subs	r2, r3, #1
   12d6a:	490b      	ldr	r1, [pc, #44]	; (12d98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   12d6c:	9b01      	ldr	r3, [sp, #4]
   12d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_34[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]))         /*if interrupts were enabled*/
   12d72:	4a0a      	ldr	r2, [pc, #40]	; (12d9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x48>)
   12d74:	9b01      	ldr	r3, [sp, #4]
   12d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d7a:	f003 0301 	and.w	r3, r3, #1
   12d7e:	2b00      	cmp	r3, #0
   12d80:	d106      	bne.n	12d90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
   12d82:	4a05      	ldr	r2, [pc, #20]	; (12d98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   12d84:	9b01      	ldr	r3, [sp, #4]
   12d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d8a:	2b00      	cmp	r3, #0
   12d8c:	d100      	bne.n	12d90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12d8e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12d90:	bf00      	nop
   12d92:	b003      	add	sp, #12
   12d94:	f85d fb04 	ldr.w	pc, [sp], #4
   12d98:	1fff9328 	.word	0x1fff9328
   12d9c:	1fff9324 	.word	0x1fff9324

00012da0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
   12da0:	b500      	push	{lr}
   12da2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12da4:	f7ee fe4e 	bl	1a44 <Sys_GetCoreID>
   12da8:	4603      	mov	r3, r0
   12daa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId])
   12dac:	4a10      	ldr	r2, [pc, #64]	; (12df0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   12dae:	9b01      	ldr	r3, [sp, #4]
   12db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12db4:	2b00      	cmp	r3, #0
   12db6:	d10d      	bne.n	12dd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12db8:	f7ed fda2 	bl	900 <Adc_schm_read_msr>
   12dbc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12dbe:	9b00      	ldr	r3, [sp, #0]
   12dc0:	f003 0301 	and.w	r3, r3, #1
   12dc4:	2b00      	cmp	r3, #0
   12dc6:	d100      	bne.n	12dca <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12dc8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_35[u32CoreId] = msr;
   12dca:	490a      	ldr	r1, [pc, #40]	; (12df4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x54>)
   12dcc:	9b01      	ldr	r3, [sp, #4]
   12dce:	9a00      	ldr	r2, [sp, #0]
   12dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]++;
   12dd4:	4a06      	ldr	r2, [pc, #24]	; (12df0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   12dd6:	9b01      	ldr	r3, [sp, #4]
   12dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ddc:	1c5a      	adds	r2, r3, #1
   12dde:	4904      	ldr	r1, [pc, #16]	; (12df0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   12de0:	9b01      	ldr	r3, [sp, #4]
   12de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12de6:	bf00      	nop
   12de8:	b003      	add	sp, #12
   12dea:	f85d fb04 	ldr.w	pc, [sp], #4
   12dee:	bf00      	nop
   12df0:	1fff9330 	.word	0x1fff9330
   12df4:	1fff932c 	.word	0x1fff932c

00012df8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
   12df8:	b500      	push	{lr}
   12dfa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12dfc:	f7ee fe22 	bl	1a44 <Sys_GetCoreID>
   12e00:	4603      	mov	r3, r0
   12e02:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]--;
   12e04:	4a0d      	ldr	r2, [pc, #52]	; (12e3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   12e06:	9b01      	ldr	r3, [sp, #4]
   12e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e0c:	1e5a      	subs	r2, r3, #1
   12e0e:	490b      	ldr	r1, [pc, #44]	; (12e3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   12e10:	9b01      	ldr	r3, [sp, #4]
   12e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_35[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]))         /*if interrupts were enabled*/
   12e16:	4a0a      	ldr	r2, [pc, #40]	; (12e40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x48>)
   12e18:	9b01      	ldr	r3, [sp, #4]
   12e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e1e:	f003 0301 	and.w	r3, r3, #1
   12e22:	2b00      	cmp	r3, #0
   12e24:	d106      	bne.n	12e34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
   12e26:	4a05      	ldr	r2, [pc, #20]	; (12e3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   12e28:	9b01      	ldr	r3, [sp, #4]
   12e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e2e:	2b00      	cmp	r3, #0
   12e30:	d100      	bne.n	12e34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12e32:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12e34:	bf00      	nop
   12e36:	b003      	add	sp, #12
   12e38:	f85d fb04 	ldr.w	pc, [sp], #4
   12e3c:	1fff9330 	.word	0x1fff9330
   12e40:	1fff932c 	.word	0x1fff932c

00012e44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
   12e44:	b500      	push	{lr}
   12e46:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12e48:	f7ee fdfc 	bl	1a44 <Sys_GetCoreID>
   12e4c:	4603      	mov	r3, r0
   12e4e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId])
   12e50:	4a10      	ldr	r2, [pc, #64]	; (12e94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   12e52:	9b01      	ldr	r3, [sp, #4]
   12e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e58:	2b00      	cmp	r3, #0
   12e5a:	d10d      	bne.n	12e78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12e5c:	f7ed fd50 	bl	900 <Adc_schm_read_msr>
   12e60:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12e62:	9b00      	ldr	r3, [sp, #0]
   12e64:	f003 0301 	and.w	r3, r3, #1
   12e68:	2b00      	cmp	r3, #0
   12e6a:	d100      	bne.n	12e6e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12e6c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_36[u32CoreId] = msr;
   12e6e:	490a      	ldr	r1, [pc, #40]	; (12e98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x54>)
   12e70:	9b01      	ldr	r3, [sp, #4]
   12e72:	9a00      	ldr	r2, [sp, #0]
   12e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]++;
   12e78:	4a06      	ldr	r2, [pc, #24]	; (12e94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   12e7a:	9b01      	ldr	r3, [sp, #4]
   12e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e80:	1c5a      	adds	r2, r3, #1
   12e82:	4904      	ldr	r1, [pc, #16]	; (12e94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   12e84:	9b01      	ldr	r3, [sp, #4]
   12e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12e8a:	bf00      	nop
   12e8c:	b003      	add	sp, #12
   12e8e:	f85d fb04 	ldr.w	pc, [sp], #4
   12e92:	bf00      	nop
   12e94:	1fff9338 	.word	0x1fff9338
   12e98:	1fff9334 	.word	0x1fff9334

00012e9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
   12e9c:	b500      	push	{lr}
   12e9e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12ea0:	f7ee fdd0 	bl	1a44 <Sys_GetCoreID>
   12ea4:	4603      	mov	r3, r0
   12ea6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]--;
   12ea8:	4a0d      	ldr	r2, [pc, #52]	; (12ee0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   12eaa:	9b01      	ldr	r3, [sp, #4]
   12eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12eb0:	1e5a      	subs	r2, r3, #1
   12eb2:	490b      	ldr	r1, [pc, #44]	; (12ee0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   12eb4:	9b01      	ldr	r3, [sp, #4]
   12eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_36[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]))         /*if interrupts were enabled*/
   12eba:	4a0a      	ldr	r2, [pc, #40]	; (12ee4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x48>)
   12ebc:	9b01      	ldr	r3, [sp, #4]
   12ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ec2:	f003 0301 	and.w	r3, r3, #1
   12ec6:	2b00      	cmp	r3, #0
   12ec8:	d106      	bne.n	12ed8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
   12eca:	4a05      	ldr	r2, [pc, #20]	; (12ee0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   12ecc:	9b01      	ldr	r3, [sp, #4]
   12ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ed2:	2b00      	cmp	r3, #0
   12ed4:	d100      	bne.n	12ed8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12ed6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12ed8:	bf00      	nop
   12eda:	b003      	add	sp, #12
   12edc:	f85d fb04 	ldr.w	pc, [sp], #4
   12ee0:	1fff9338 	.word	0x1fff9338
   12ee4:	1fff9334 	.word	0x1fff9334

00012ee8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
   12ee8:	b500      	push	{lr}
   12eea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12eec:	f7ee fdaa 	bl	1a44 <Sys_GetCoreID>
   12ef0:	4603      	mov	r3, r0
   12ef2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId])
   12ef4:	4a10      	ldr	r2, [pc, #64]	; (12f38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   12ef6:	9b01      	ldr	r3, [sp, #4]
   12ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12efc:	2b00      	cmp	r3, #0
   12efe:	d10d      	bne.n	12f1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12f00:	f7ed fcfe 	bl	900 <Adc_schm_read_msr>
   12f04:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12f06:	9b00      	ldr	r3, [sp, #0]
   12f08:	f003 0301 	and.w	r3, r3, #1
   12f0c:	2b00      	cmp	r3, #0
   12f0e:	d100      	bne.n	12f12 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12f10:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_37[u32CoreId] = msr;
   12f12:	490a      	ldr	r1, [pc, #40]	; (12f3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x54>)
   12f14:	9b01      	ldr	r3, [sp, #4]
   12f16:	9a00      	ldr	r2, [sp, #0]
   12f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]++;
   12f1c:	4a06      	ldr	r2, [pc, #24]	; (12f38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   12f1e:	9b01      	ldr	r3, [sp, #4]
   12f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f24:	1c5a      	adds	r2, r3, #1
   12f26:	4904      	ldr	r1, [pc, #16]	; (12f38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   12f28:	9b01      	ldr	r3, [sp, #4]
   12f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12f2e:	bf00      	nop
   12f30:	b003      	add	sp, #12
   12f32:	f85d fb04 	ldr.w	pc, [sp], #4
   12f36:	bf00      	nop
   12f38:	1fff9340 	.word	0x1fff9340
   12f3c:	1fff933c 	.word	0x1fff933c

00012f40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
   12f40:	b500      	push	{lr}
   12f42:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12f44:	f7ee fd7e 	bl	1a44 <Sys_GetCoreID>
   12f48:	4603      	mov	r3, r0
   12f4a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]--;
   12f4c:	4a0d      	ldr	r2, [pc, #52]	; (12f84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   12f4e:	9b01      	ldr	r3, [sp, #4]
   12f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f54:	1e5a      	subs	r2, r3, #1
   12f56:	490b      	ldr	r1, [pc, #44]	; (12f84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   12f58:	9b01      	ldr	r3, [sp, #4]
   12f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_37[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]))         /*if interrupts were enabled*/
   12f5e:	4a0a      	ldr	r2, [pc, #40]	; (12f88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x48>)
   12f60:	9b01      	ldr	r3, [sp, #4]
   12f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f66:	f003 0301 	and.w	r3, r3, #1
   12f6a:	2b00      	cmp	r3, #0
   12f6c:	d106      	bne.n	12f7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
   12f6e:	4a05      	ldr	r2, [pc, #20]	; (12f84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   12f70:	9b01      	ldr	r3, [sp, #4]
   12f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f76:	2b00      	cmp	r3, #0
   12f78:	d100      	bne.n	12f7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12f7a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12f7c:	bf00      	nop
   12f7e:	b003      	add	sp, #12
   12f80:	f85d fb04 	ldr.w	pc, [sp], #4
   12f84:	1fff9340 	.word	0x1fff9340
   12f88:	1fff933c 	.word	0x1fff933c

00012f8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
   12f8c:	b500      	push	{lr}
   12f8e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12f90:	f7ee fd58 	bl	1a44 <Sys_GetCoreID>
   12f94:	4603      	mov	r3, r0
   12f96:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId])
   12f98:	4a10      	ldr	r2, [pc, #64]	; (12fdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   12f9a:	9b01      	ldr	r3, [sp, #4]
   12f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fa0:	2b00      	cmp	r3, #0
   12fa2:	d10d      	bne.n	12fc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12fa4:	f7ed fcac 	bl	900 <Adc_schm_read_msr>
   12fa8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12faa:	9b00      	ldr	r3, [sp, #0]
   12fac:	f003 0301 	and.w	r3, r3, #1
   12fb0:	2b00      	cmp	r3, #0
   12fb2:	d100      	bne.n	12fb6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12fb4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_38[u32CoreId] = msr;
   12fb6:	490a      	ldr	r1, [pc, #40]	; (12fe0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x54>)
   12fb8:	9b01      	ldr	r3, [sp, #4]
   12fba:	9a00      	ldr	r2, [sp, #0]
   12fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]++;
   12fc0:	4a06      	ldr	r2, [pc, #24]	; (12fdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   12fc2:	9b01      	ldr	r3, [sp, #4]
   12fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fc8:	1c5a      	adds	r2, r3, #1
   12fca:	4904      	ldr	r1, [pc, #16]	; (12fdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   12fcc:	9b01      	ldr	r3, [sp, #4]
   12fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12fd2:	bf00      	nop
   12fd4:	b003      	add	sp, #12
   12fd6:	f85d fb04 	ldr.w	pc, [sp], #4
   12fda:	bf00      	nop
   12fdc:	1fff9348 	.word	0x1fff9348
   12fe0:	1fff9344 	.word	0x1fff9344

00012fe4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
   12fe4:	b500      	push	{lr}
   12fe6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12fe8:	f7ee fd2c 	bl	1a44 <Sys_GetCoreID>
   12fec:	4603      	mov	r3, r0
   12fee:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]--;
   12ff0:	4a0d      	ldr	r2, [pc, #52]	; (13028 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   12ff2:	9b01      	ldr	r3, [sp, #4]
   12ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ff8:	1e5a      	subs	r2, r3, #1
   12ffa:	490b      	ldr	r1, [pc, #44]	; (13028 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   12ffc:	9b01      	ldr	r3, [sp, #4]
   12ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_38[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]))         /*if interrupts were enabled*/
   13002:	4a0a      	ldr	r2, [pc, #40]	; (1302c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x48>)
   13004:	9b01      	ldr	r3, [sp, #4]
   13006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1300a:	f003 0301 	and.w	r3, r3, #1
   1300e:	2b00      	cmp	r3, #0
   13010:	d106      	bne.n	13020 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
   13012:	4a05      	ldr	r2, [pc, #20]	; (13028 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   13014:	9b01      	ldr	r3, [sp, #4]
   13016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1301a:	2b00      	cmp	r3, #0
   1301c:	d100      	bne.n	13020 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1301e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13020:	bf00      	nop
   13022:	b003      	add	sp, #12
   13024:	f85d fb04 	ldr.w	pc, [sp], #4
   13028:	1fff9348 	.word	0x1fff9348
   1302c:	1fff9344 	.word	0x1fff9344

00013030 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
   13030:	b500      	push	{lr}
   13032:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13034:	f7ee fd06 	bl	1a44 <Sys_GetCoreID>
   13038:	4603      	mov	r3, r0
   1303a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId])
   1303c:	4a10      	ldr	r2, [pc, #64]	; (13080 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   1303e:	9b01      	ldr	r3, [sp, #4]
   13040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13044:	2b00      	cmp	r3, #0
   13046:	d10d      	bne.n	13064 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13048:	f7ed fc5a 	bl	900 <Adc_schm_read_msr>
   1304c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1304e:	9b00      	ldr	r3, [sp, #0]
   13050:	f003 0301 	and.w	r3, r3, #1
   13054:	2b00      	cmp	r3, #0
   13056:	d100      	bne.n	1305a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13058:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_39[u32CoreId] = msr;
   1305a:	490a      	ldr	r1, [pc, #40]	; (13084 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x54>)
   1305c:	9b01      	ldr	r3, [sp, #4]
   1305e:	9a00      	ldr	r2, [sp, #0]
   13060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]++;
   13064:	4a06      	ldr	r2, [pc, #24]	; (13080 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   13066:	9b01      	ldr	r3, [sp, #4]
   13068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1306c:	1c5a      	adds	r2, r3, #1
   1306e:	4904      	ldr	r1, [pc, #16]	; (13080 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   13070:	9b01      	ldr	r3, [sp, #4]
   13072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13076:	bf00      	nop
   13078:	b003      	add	sp, #12
   1307a:	f85d fb04 	ldr.w	pc, [sp], #4
   1307e:	bf00      	nop
   13080:	1fff9350 	.word	0x1fff9350
   13084:	1fff934c 	.word	0x1fff934c

00013088 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
   13088:	b500      	push	{lr}
   1308a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1308c:	f7ee fcda 	bl	1a44 <Sys_GetCoreID>
   13090:	4603      	mov	r3, r0
   13092:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]--;
   13094:	4a0d      	ldr	r2, [pc, #52]	; (130cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   13096:	9b01      	ldr	r3, [sp, #4]
   13098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1309c:	1e5a      	subs	r2, r3, #1
   1309e:	490b      	ldr	r1, [pc, #44]	; (130cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   130a0:	9b01      	ldr	r3, [sp, #4]
   130a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_39[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]))         /*if interrupts were enabled*/
   130a6:	4a0a      	ldr	r2, [pc, #40]	; (130d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x48>)
   130a8:	9b01      	ldr	r3, [sp, #4]
   130aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130ae:	f003 0301 	and.w	r3, r3, #1
   130b2:	2b00      	cmp	r3, #0
   130b4:	d106      	bne.n	130c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
   130b6:	4a05      	ldr	r2, [pc, #20]	; (130cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   130b8:	9b01      	ldr	r3, [sp, #4]
   130ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130be:	2b00      	cmp	r3, #0
   130c0:	d100      	bne.n	130c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   130c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   130c4:	bf00      	nop
   130c6:	b003      	add	sp, #12
   130c8:	f85d fb04 	ldr.w	pc, [sp], #4
   130cc:	1fff9350 	.word	0x1fff9350
   130d0:	1fff934c 	.word	0x1fff934c

000130d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
   130d4:	b500      	push	{lr}
   130d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   130d8:	f7ee fcb4 	bl	1a44 <Sys_GetCoreID>
   130dc:	4603      	mov	r3, r0
   130de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId])
   130e0:	4a10      	ldr	r2, [pc, #64]	; (13124 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   130e2:	9b01      	ldr	r3, [sp, #4]
   130e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130e8:	2b00      	cmp	r3, #0
   130ea:	d10d      	bne.n	13108 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   130ec:	f7ed fc08 	bl	900 <Adc_schm_read_msr>
   130f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   130f2:	9b00      	ldr	r3, [sp, #0]
   130f4:	f003 0301 	and.w	r3, r3, #1
   130f8:	2b00      	cmp	r3, #0
   130fa:	d100      	bne.n	130fe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   130fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_40[u32CoreId] = msr;
   130fe:	490a      	ldr	r1, [pc, #40]	; (13128 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x54>)
   13100:	9b01      	ldr	r3, [sp, #4]
   13102:	9a00      	ldr	r2, [sp, #0]
   13104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]++;
   13108:	4a06      	ldr	r2, [pc, #24]	; (13124 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   1310a:	9b01      	ldr	r3, [sp, #4]
   1310c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13110:	1c5a      	adds	r2, r3, #1
   13112:	4904      	ldr	r1, [pc, #16]	; (13124 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   13114:	9b01      	ldr	r3, [sp, #4]
   13116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1311a:	bf00      	nop
   1311c:	b003      	add	sp, #12
   1311e:	f85d fb04 	ldr.w	pc, [sp], #4
   13122:	bf00      	nop
   13124:	1fff9358 	.word	0x1fff9358
   13128:	1fff9354 	.word	0x1fff9354

0001312c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
   1312c:	b500      	push	{lr}
   1312e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13130:	f7ee fc88 	bl	1a44 <Sys_GetCoreID>
   13134:	4603      	mov	r3, r0
   13136:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]--;
   13138:	4a0d      	ldr	r2, [pc, #52]	; (13170 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   1313a:	9b01      	ldr	r3, [sp, #4]
   1313c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13140:	1e5a      	subs	r2, r3, #1
   13142:	490b      	ldr	r1, [pc, #44]	; (13170 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   13144:	9b01      	ldr	r3, [sp, #4]
   13146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_40[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]))         /*if interrupts were enabled*/
   1314a:	4a0a      	ldr	r2, [pc, #40]	; (13174 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x48>)
   1314c:	9b01      	ldr	r3, [sp, #4]
   1314e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13152:	f003 0301 	and.w	r3, r3, #1
   13156:	2b00      	cmp	r3, #0
   13158:	d106      	bne.n	13168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
   1315a:	4a05      	ldr	r2, [pc, #20]	; (13170 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   1315c:	9b01      	ldr	r3, [sp, #4]
   1315e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13162:	2b00      	cmp	r3, #0
   13164:	d100      	bne.n	13168 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13166:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13168:	bf00      	nop
   1316a:	b003      	add	sp, #12
   1316c:	f85d fb04 	ldr.w	pc, [sp], #4
   13170:	1fff9358 	.word	0x1fff9358
   13174:	1fff9354 	.word	0x1fff9354

00013178 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
   13178:	b500      	push	{lr}
   1317a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1317c:	f7ee fc62 	bl	1a44 <Sys_GetCoreID>
   13180:	4603      	mov	r3, r0
   13182:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId])
   13184:	4a10      	ldr	r2, [pc, #64]	; (131c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   13186:	9b01      	ldr	r3, [sp, #4]
   13188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1318c:	2b00      	cmp	r3, #0
   1318e:	d10d      	bne.n	131ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13190:	f7ed fbb6 	bl	900 <Adc_schm_read_msr>
   13194:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13196:	9b00      	ldr	r3, [sp, #0]
   13198:	f003 0301 	and.w	r3, r3, #1
   1319c:	2b00      	cmp	r3, #0
   1319e:	d100      	bne.n	131a2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   131a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_41[u32CoreId] = msr;
   131a2:	490a      	ldr	r1, [pc, #40]	; (131cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x54>)
   131a4:	9b01      	ldr	r3, [sp, #4]
   131a6:	9a00      	ldr	r2, [sp, #0]
   131a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]++;
   131ac:	4a06      	ldr	r2, [pc, #24]	; (131c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   131ae:	9b01      	ldr	r3, [sp, #4]
   131b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131b4:	1c5a      	adds	r2, r3, #1
   131b6:	4904      	ldr	r1, [pc, #16]	; (131c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   131b8:	9b01      	ldr	r3, [sp, #4]
   131ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   131be:	bf00      	nop
   131c0:	b003      	add	sp, #12
   131c2:	f85d fb04 	ldr.w	pc, [sp], #4
   131c6:	bf00      	nop
   131c8:	1fff9360 	.word	0x1fff9360
   131cc:	1fff935c 	.word	0x1fff935c

000131d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
   131d0:	b500      	push	{lr}
   131d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   131d4:	f7ee fc36 	bl	1a44 <Sys_GetCoreID>
   131d8:	4603      	mov	r3, r0
   131da:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]--;
   131dc:	4a0d      	ldr	r2, [pc, #52]	; (13214 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   131de:	9b01      	ldr	r3, [sp, #4]
   131e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131e4:	1e5a      	subs	r2, r3, #1
   131e6:	490b      	ldr	r1, [pc, #44]	; (13214 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   131e8:	9b01      	ldr	r3, [sp, #4]
   131ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_41[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]))         /*if interrupts were enabled*/
   131ee:	4a0a      	ldr	r2, [pc, #40]	; (13218 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x48>)
   131f0:	9b01      	ldr	r3, [sp, #4]
   131f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131f6:	f003 0301 	and.w	r3, r3, #1
   131fa:	2b00      	cmp	r3, #0
   131fc:	d106      	bne.n	1320c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
   131fe:	4a05      	ldr	r2, [pc, #20]	; (13214 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   13200:	9b01      	ldr	r3, [sp, #4]
   13202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13206:	2b00      	cmp	r3, #0
   13208:	d100      	bne.n	1320c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1320a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1320c:	bf00      	nop
   1320e:	b003      	add	sp, #12
   13210:	f85d fb04 	ldr.w	pc, [sp], #4
   13214:	1fff9360 	.word	0x1fff9360
   13218:	1fff935c 	.word	0x1fff935c

0001321c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
   1321c:	b500      	push	{lr}
   1321e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13220:	f7ee fc10 	bl	1a44 <Sys_GetCoreID>
   13224:	4603      	mov	r3, r0
   13226:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId])
   13228:	4a10      	ldr	r2, [pc, #64]	; (1326c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   1322a:	9b01      	ldr	r3, [sp, #4]
   1322c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13230:	2b00      	cmp	r3, #0
   13232:	d10d      	bne.n	13250 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13234:	f7ed fb64 	bl	900 <Adc_schm_read_msr>
   13238:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1323a:	9b00      	ldr	r3, [sp, #0]
   1323c:	f003 0301 	and.w	r3, r3, #1
   13240:	2b00      	cmp	r3, #0
   13242:	d100      	bne.n	13246 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13244:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_42[u32CoreId] = msr;
   13246:	490a      	ldr	r1, [pc, #40]	; (13270 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x54>)
   13248:	9b01      	ldr	r3, [sp, #4]
   1324a:	9a00      	ldr	r2, [sp, #0]
   1324c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]++;
   13250:	4a06      	ldr	r2, [pc, #24]	; (1326c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   13252:	9b01      	ldr	r3, [sp, #4]
   13254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13258:	1c5a      	adds	r2, r3, #1
   1325a:	4904      	ldr	r1, [pc, #16]	; (1326c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   1325c:	9b01      	ldr	r3, [sp, #4]
   1325e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13262:	bf00      	nop
   13264:	b003      	add	sp, #12
   13266:	f85d fb04 	ldr.w	pc, [sp], #4
   1326a:	bf00      	nop
   1326c:	1fff9368 	.word	0x1fff9368
   13270:	1fff9364 	.word	0x1fff9364

00013274 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
   13274:	b500      	push	{lr}
   13276:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13278:	f7ee fbe4 	bl	1a44 <Sys_GetCoreID>
   1327c:	4603      	mov	r3, r0
   1327e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]--;
   13280:	4a0d      	ldr	r2, [pc, #52]	; (132b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   13282:	9b01      	ldr	r3, [sp, #4]
   13284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13288:	1e5a      	subs	r2, r3, #1
   1328a:	490b      	ldr	r1, [pc, #44]	; (132b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   1328c:	9b01      	ldr	r3, [sp, #4]
   1328e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_42[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]))         /*if interrupts were enabled*/
   13292:	4a0a      	ldr	r2, [pc, #40]	; (132bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x48>)
   13294:	9b01      	ldr	r3, [sp, #4]
   13296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1329a:	f003 0301 	and.w	r3, r3, #1
   1329e:	2b00      	cmp	r3, #0
   132a0:	d106      	bne.n	132b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
   132a2:	4a05      	ldr	r2, [pc, #20]	; (132b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   132a4:	9b01      	ldr	r3, [sp, #4]
   132a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132aa:	2b00      	cmp	r3, #0
   132ac:	d100      	bne.n	132b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   132ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   132b0:	bf00      	nop
   132b2:	b003      	add	sp, #12
   132b4:	f85d fb04 	ldr.w	pc, [sp], #4
   132b8:	1fff9368 	.word	0x1fff9368
   132bc:	1fff9364 	.word	0x1fff9364

000132c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
   132c0:	b500      	push	{lr}
   132c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   132c4:	f7ee fbbe 	bl	1a44 <Sys_GetCoreID>
   132c8:	4603      	mov	r3, r0
   132ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId])
   132cc:	4a10      	ldr	r2, [pc, #64]	; (13310 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   132ce:	9b01      	ldr	r3, [sp, #4]
   132d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132d4:	2b00      	cmp	r3, #0
   132d6:	d10d      	bne.n	132f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   132d8:	f7ed fb12 	bl	900 <Adc_schm_read_msr>
   132dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   132de:	9b00      	ldr	r3, [sp, #0]
   132e0:	f003 0301 	and.w	r3, r3, #1
   132e4:	2b00      	cmp	r3, #0
   132e6:	d100      	bne.n	132ea <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   132e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_43[u32CoreId] = msr;
   132ea:	490a      	ldr	r1, [pc, #40]	; (13314 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x54>)
   132ec:	9b01      	ldr	r3, [sp, #4]
   132ee:	9a00      	ldr	r2, [sp, #0]
   132f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]++;
   132f4:	4a06      	ldr	r2, [pc, #24]	; (13310 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   132f6:	9b01      	ldr	r3, [sp, #4]
   132f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132fc:	1c5a      	adds	r2, r3, #1
   132fe:	4904      	ldr	r1, [pc, #16]	; (13310 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   13300:	9b01      	ldr	r3, [sp, #4]
   13302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13306:	bf00      	nop
   13308:	b003      	add	sp, #12
   1330a:	f85d fb04 	ldr.w	pc, [sp], #4
   1330e:	bf00      	nop
   13310:	1fff9370 	.word	0x1fff9370
   13314:	1fff936c 	.word	0x1fff936c

00013318 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
   13318:	b500      	push	{lr}
   1331a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1331c:	f7ee fb92 	bl	1a44 <Sys_GetCoreID>
   13320:	4603      	mov	r3, r0
   13322:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]--;
   13324:	4a0d      	ldr	r2, [pc, #52]	; (1335c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   13326:	9b01      	ldr	r3, [sp, #4]
   13328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1332c:	1e5a      	subs	r2, r3, #1
   1332e:	490b      	ldr	r1, [pc, #44]	; (1335c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   13330:	9b01      	ldr	r3, [sp, #4]
   13332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_43[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]))         /*if interrupts were enabled*/
   13336:	4a0a      	ldr	r2, [pc, #40]	; (13360 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x48>)
   13338:	9b01      	ldr	r3, [sp, #4]
   1333a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1333e:	f003 0301 	and.w	r3, r3, #1
   13342:	2b00      	cmp	r3, #0
   13344:	d106      	bne.n	13354 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
   13346:	4a05      	ldr	r2, [pc, #20]	; (1335c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   13348:	9b01      	ldr	r3, [sp, #4]
   1334a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1334e:	2b00      	cmp	r3, #0
   13350:	d100      	bne.n	13354 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13352:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13354:	bf00      	nop
   13356:	b003      	add	sp, #12
   13358:	f85d fb04 	ldr.w	pc, [sp], #4
   1335c:	1fff9370 	.word	0x1fff9370
   13360:	1fff936c 	.word	0x1fff936c

00013364 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
   13364:	b500      	push	{lr}
   13366:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13368:	f7ee fb6c 	bl	1a44 <Sys_GetCoreID>
   1336c:	4603      	mov	r3, r0
   1336e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId])
   13370:	4a10      	ldr	r2, [pc, #64]	; (133b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   13372:	9b01      	ldr	r3, [sp, #4]
   13374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13378:	2b00      	cmp	r3, #0
   1337a:	d10d      	bne.n	13398 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1337c:	f7ed fac0 	bl	900 <Adc_schm_read_msr>
   13380:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13382:	9b00      	ldr	r3, [sp, #0]
   13384:	f003 0301 	and.w	r3, r3, #1
   13388:	2b00      	cmp	r3, #0
   1338a:	d100      	bne.n	1338e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1338c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_44[u32CoreId] = msr;
   1338e:	490a      	ldr	r1, [pc, #40]	; (133b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x54>)
   13390:	9b01      	ldr	r3, [sp, #4]
   13392:	9a00      	ldr	r2, [sp, #0]
   13394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]++;
   13398:	4a06      	ldr	r2, [pc, #24]	; (133b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   1339a:	9b01      	ldr	r3, [sp, #4]
   1339c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133a0:	1c5a      	adds	r2, r3, #1
   133a2:	4904      	ldr	r1, [pc, #16]	; (133b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   133a4:	9b01      	ldr	r3, [sp, #4]
   133a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   133aa:	bf00      	nop
   133ac:	b003      	add	sp, #12
   133ae:	f85d fb04 	ldr.w	pc, [sp], #4
   133b2:	bf00      	nop
   133b4:	1fff9378 	.word	0x1fff9378
   133b8:	1fff9374 	.word	0x1fff9374

000133bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
   133bc:	b500      	push	{lr}
   133be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   133c0:	f7ee fb40 	bl	1a44 <Sys_GetCoreID>
   133c4:	4603      	mov	r3, r0
   133c6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]--;
   133c8:	4a0d      	ldr	r2, [pc, #52]	; (13400 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   133ca:	9b01      	ldr	r3, [sp, #4]
   133cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133d0:	1e5a      	subs	r2, r3, #1
   133d2:	490b      	ldr	r1, [pc, #44]	; (13400 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   133d4:	9b01      	ldr	r3, [sp, #4]
   133d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_44[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]))         /*if interrupts were enabled*/
   133da:	4a0a      	ldr	r2, [pc, #40]	; (13404 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x48>)
   133dc:	9b01      	ldr	r3, [sp, #4]
   133de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133e2:	f003 0301 	and.w	r3, r3, #1
   133e6:	2b00      	cmp	r3, #0
   133e8:	d106      	bne.n	133f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
   133ea:	4a05      	ldr	r2, [pc, #20]	; (13400 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   133ec:	9b01      	ldr	r3, [sp, #4]
   133ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133f2:	2b00      	cmp	r3, #0
   133f4:	d100      	bne.n	133f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   133f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   133f8:	bf00      	nop
   133fa:	b003      	add	sp, #12
   133fc:	f85d fb04 	ldr.w	pc, [sp], #4
   13400:	1fff9378 	.word	0x1fff9378
   13404:	1fff9374 	.word	0x1fff9374

00013408 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
   13408:	b500      	push	{lr}
   1340a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1340c:	f7ee fb1a 	bl	1a44 <Sys_GetCoreID>
   13410:	4603      	mov	r3, r0
   13412:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId])
   13414:	4a10      	ldr	r2, [pc, #64]	; (13458 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   13416:	9b01      	ldr	r3, [sp, #4]
   13418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1341c:	2b00      	cmp	r3, #0
   1341e:	d10d      	bne.n	1343c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13420:	f7ed fa6e 	bl	900 <Adc_schm_read_msr>
   13424:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13426:	9b00      	ldr	r3, [sp, #0]
   13428:	f003 0301 	and.w	r3, r3, #1
   1342c:	2b00      	cmp	r3, #0
   1342e:	d100      	bne.n	13432 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13430:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_45[u32CoreId] = msr;
   13432:	490a      	ldr	r1, [pc, #40]	; (1345c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x54>)
   13434:	9b01      	ldr	r3, [sp, #4]
   13436:	9a00      	ldr	r2, [sp, #0]
   13438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]++;
   1343c:	4a06      	ldr	r2, [pc, #24]	; (13458 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   1343e:	9b01      	ldr	r3, [sp, #4]
   13440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13444:	1c5a      	adds	r2, r3, #1
   13446:	4904      	ldr	r1, [pc, #16]	; (13458 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   13448:	9b01      	ldr	r3, [sp, #4]
   1344a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1344e:	bf00      	nop
   13450:	b003      	add	sp, #12
   13452:	f85d fb04 	ldr.w	pc, [sp], #4
   13456:	bf00      	nop
   13458:	1fff9380 	.word	0x1fff9380
   1345c:	1fff937c 	.word	0x1fff937c

00013460 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
   13460:	b500      	push	{lr}
   13462:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13464:	f7ee faee 	bl	1a44 <Sys_GetCoreID>
   13468:	4603      	mov	r3, r0
   1346a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]--;
   1346c:	4a0d      	ldr	r2, [pc, #52]	; (134a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   1346e:	9b01      	ldr	r3, [sp, #4]
   13470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13474:	1e5a      	subs	r2, r3, #1
   13476:	490b      	ldr	r1, [pc, #44]	; (134a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   13478:	9b01      	ldr	r3, [sp, #4]
   1347a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_45[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]))         /*if interrupts were enabled*/
   1347e:	4a0a      	ldr	r2, [pc, #40]	; (134a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x48>)
   13480:	9b01      	ldr	r3, [sp, #4]
   13482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13486:	f003 0301 	and.w	r3, r3, #1
   1348a:	2b00      	cmp	r3, #0
   1348c:	d106      	bne.n	1349c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
   1348e:	4a05      	ldr	r2, [pc, #20]	; (134a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   13490:	9b01      	ldr	r3, [sp, #4]
   13492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13496:	2b00      	cmp	r3, #0
   13498:	d100      	bne.n	1349c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1349a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1349c:	bf00      	nop
   1349e:	b003      	add	sp, #12
   134a0:	f85d fb04 	ldr.w	pc, [sp], #4
   134a4:	1fff9380 	.word	0x1fff9380
   134a8:	1fff937c 	.word	0x1fff937c

000134ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
   134ac:	b500      	push	{lr}
   134ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   134b0:	f7ee fac8 	bl	1a44 <Sys_GetCoreID>
   134b4:	4603      	mov	r3, r0
   134b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId])
   134b8:	4a10      	ldr	r2, [pc, #64]	; (134fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   134ba:	9b01      	ldr	r3, [sp, #4]
   134bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134c0:	2b00      	cmp	r3, #0
   134c2:	d10d      	bne.n	134e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   134c4:	f7ed fa1c 	bl	900 <Adc_schm_read_msr>
   134c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   134ca:	9b00      	ldr	r3, [sp, #0]
   134cc:	f003 0301 	and.w	r3, r3, #1
   134d0:	2b00      	cmp	r3, #0
   134d2:	d100      	bne.n	134d6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   134d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_46[u32CoreId] = msr;
   134d6:	490a      	ldr	r1, [pc, #40]	; (13500 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x54>)
   134d8:	9b01      	ldr	r3, [sp, #4]
   134da:	9a00      	ldr	r2, [sp, #0]
   134dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]++;
   134e0:	4a06      	ldr	r2, [pc, #24]	; (134fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   134e2:	9b01      	ldr	r3, [sp, #4]
   134e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134e8:	1c5a      	adds	r2, r3, #1
   134ea:	4904      	ldr	r1, [pc, #16]	; (134fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   134ec:	9b01      	ldr	r3, [sp, #4]
   134ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   134f2:	bf00      	nop
   134f4:	b003      	add	sp, #12
   134f6:	f85d fb04 	ldr.w	pc, [sp], #4
   134fa:	bf00      	nop
   134fc:	1fff9388 	.word	0x1fff9388
   13500:	1fff9384 	.word	0x1fff9384

00013504 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
   13504:	b500      	push	{lr}
   13506:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13508:	f7ee fa9c 	bl	1a44 <Sys_GetCoreID>
   1350c:	4603      	mov	r3, r0
   1350e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]--;
   13510:	4a0d      	ldr	r2, [pc, #52]	; (13548 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   13512:	9b01      	ldr	r3, [sp, #4]
   13514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13518:	1e5a      	subs	r2, r3, #1
   1351a:	490b      	ldr	r1, [pc, #44]	; (13548 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   1351c:	9b01      	ldr	r3, [sp, #4]
   1351e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_46[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]))         /*if interrupts were enabled*/
   13522:	4a0a      	ldr	r2, [pc, #40]	; (1354c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x48>)
   13524:	9b01      	ldr	r3, [sp, #4]
   13526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1352a:	f003 0301 	and.w	r3, r3, #1
   1352e:	2b00      	cmp	r3, #0
   13530:	d106      	bne.n	13540 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
   13532:	4a05      	ldr	r2, [pc, #20]	; (13548 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   13534:	9b01      	ldr	r3, [sp, #4]
   13536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1353a:	2b00      	cmp	r3, #0
   1353c:	d100      	bne.n	13540 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1353e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13540:	bf00      	nop
   13542:	b003      	add	sp, #12
   13544:	f85d fb04 	ldr.w	pc, [sp], #4
   13548:	1fff9388 	.word	0x1fff9388
   1354c:	1fff9384 	.word	0x1fff9384

00013550 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
   13550:	b500      	push	{lr}
   13552:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13554:	f7ee fa76 	bl	1a44 <Sys_GetCoreID>
   13558:	4603      	mov	r3, r0
   1355a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId])
   1355c:	4a10      	ldr	r2, [pc, #64]	; (135a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   1355e:	9b01      	ldr	r3, [sp, #4]
   13560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13564:	2b00      	cmp	r3, #0
   13566:	d10d      	bne.n	13584 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13568:	f7ed f9ca 	bl	900 <Adc_schm_read_msr>
   1356c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1356e:	9b00      	ldr	r3, [sp, #0]
   13570:	f003 0301 	and.w	r3, r3, #1
   13574:	2b00      	cmp	r3, #0
   13576:	d100      	bne.n	1357a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13578:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_47[u32CoreId] = msr;
   1357a:	490a      	ldr	r1, [pc, #40]	; (135a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x54>)
   1357c:	9b01      	ldr	r3, [sp, #4]
   1357e:	9a00      	ldr	r2, [sp, #0]
   13580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]++;
   13584:	4a06      	ldr	r2, [pc, #24]	; (135a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   13586:	9b01      	ldr	r3, [sp, #4]
   13588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1358c:	1c5a      	adds	r2, r3, #1
   1358e:	4904      	ldr	r1, [pc, #16]	; (135a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   13590:	9b01      	ldr	r3, [sp, #4]
   13592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13596:	bf00      	nop
   13598:	b003      	add	sp, #12
   1359a:	f85d fb04 	ldr.w	pc, [sp], #4
   1359e:	bf00      	nop
   135a0:	1fff9390 	.word	0x1fff9390
   135a4:	1fff938c 	.word	0x1fff938c

000135a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
   135a8:	b500      	push	{lr}
   135aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   135ac:	f7ee fa4a 	bl	1a44 <Sys_GetCoreID>
   135b0:	4603      	mov	r3, r0
   135b2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]--;
   135b4:	4a0d      	ldr	r2, [pc, #52]	; (135ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   135b6:	9b01      	ldr	r3, [sp, #4]
   135b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135bc:	1e5a      	subs	r2, r3, #1
   135be:	490b      	ldr	r1, [pc, #44]	; (135ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   135c0:	9b01      	ldr	r3, [sp, #4]
   135c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_47[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]))         /*if interrupts were enabled*/
   135c6:	4a0a      	ldr	r2, [pc, #40]	; (135f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x48>)
   135c8:	9b01      	ldr	r3, [sp, #4]
   135ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135ce:	f003 0301 	and.w	r3, r3, #1
   135d2:	2b00      	cmp	r3, #0
   135d4:	d106      	bne.n	135e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
   135d6:	4a05      	ldr	r2, [pc, #20]	; (135ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   135d8:	9b01      	ldr	r3, [sp, #4]
   135da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135de:	2b00      	cmp	r3, #0
   135e0:	d100      	bne.n	135e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   135e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   135e4:	bf00      	nop
   135e6:	b003      	add	sp, #12
   135e8:	f85d fb04 	ldr.w	pc, [sp], #4
   135ec:	1fff9390 	.word	0x1fff9390
   135f0:	1fff938c 	.word	0x1fff938c

000135f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
   135f4:	b500      	push	{lr}
   135f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   135f8:	f7ee fa24 	bl	1a44 <Sys_GetCoreID>
   135fc:	4603      	mov	r3, r0
   135fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId])
   13600:	4a10      	ldr	r2, [pc, #64]	; (13644 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   13602:	9b01      	ldr	r3, [sp, #4]
   13604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13608:	2b00      	cmp	r3, #0
   1360a:	d10d      	bne.n	13628 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1360c:	f7ed f978 	bl	900 <Adc_schm_read_msr>
   13610:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13612:	9b00      	ldr	r3, [sp, #0]
   13614:	f003 0301 	and.w	r3, r3, #1
   13618:	2b00      	cmp	r3, #0
   1361a:	d100      	bne.n	1361e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1361c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_48[u32CoreId] = msr;
   1361e:	490a      	ldr	r1, [pc, #40]	; (13648 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x54>)
   13620:	9b01      	ldr	r3, [sp, #4]
   13622:	9a00      	ldr	r2, [sp, #0]
   13624:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]++;
   13628:	4a06      	ldr	r2, [pc, #24]	; (13644 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   1362a:	9b01      	ldr	r3, [sp, #4]
   1362c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13630:	1c5a      	adds	r2, r3, #1
   13632:	4904      	ldr	r1, [pc, #16]	; (13644 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   13634:	9b01      	ldr	r3, [sp, #4]
   13636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1363a:	bf00      	nop
   1363c:	b003      	add	sp, #12
   1363e:	f85d fb04 	ldr.w	pc, [sp], #4
   13642:	bf00      	nop
   13644:	1fff9398 	.word	0x1fff9398
   13648:	1fff9394 	.word	0x1fff9394

0001364c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
   1364c:	b500      	push	{lr}
   1364e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13650:	f7ee f9f8 	bl	1a44 <Sys_GetCoreID>
   13654:	4603      	mov	r3, r0
   13656:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]--;
   13658:	4a0d      	ldr	r2, [pc, #52]	; (13690 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   1365a:	9b01      	ldr	r3, [sp, #4]
   1365c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13660:	1e5a      	subs	r2, r3, #1
   13662:	490b      	ldr	r1, [pc, #44]	; (13690 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   13664:	9b01      	ldr	r3, [sp, #4]
   13666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_48[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]))         /*if interrupts were enabled*/
   1366a:	4a0a      	ldr	r2, [pc, #40]	; (13694 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x48>)
   1366c:	9b01      	ldr	r3, [sp, #4]
   1366e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13672:	f003 0301 	and.w	r3, r3, #1
   13676:	2b00      	cmp	r3, #0
   13678:	d106      	bne.n	13688 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
   1367a:	4a05      	ldr	r2, [pc, #20]	; (13690 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   1367c:	9b01      	ldr	r3, [sp, #4]
   1367e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13682:	2b00      	cmp	r3, #0
   13684:	d100      	bne.n	13688 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13686:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13688:	bf00      	nop
   1368a:	b003      	add	sp, #12
   1368c:	f85d fb04 	ldr.w	pc, [sp], #4
   13690:	1fff9398 	.word	0x1fff9398
   13694:	1fff9394 	.word	0x1fff9394

00013698 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
   13698:	b500      	push	{lr}
   1369a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1369c:	f7ee f9d2 	bl	1a44 <Sys_GetCoreID>
   136a0:	4603      	mov	r3, r0
   136a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId])
   136a4:	4a10      	ldr	r2, [pc, #64]	; (136e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   136a6:	9b01      	ldr	r3, [sp, #4]
   136a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136ac:	2b00      	cmp	r3, #0
   136ae:	d10d      	bne.n	136cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   136b0:	f7ed f926 	bl	900 <Adc_schm_read_msr>
   136b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   136b6:	9b00      	ldr	r3, [sp, #0]
   136b8:	f003 0301 	and.w	r3, r3, #1
   136bc:	2b00      	cmp	r3, #0
   136be:	d100      	bne.n	136c2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   136c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_49[u32CoreId] = msr;
   136c2:	490a      	ldr	r1, [pc, #40]	; (136ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x54>)
   136c4:	9b01      	ldr	r3, [sp, #4]
   136c6:	9a00      	ldr	r2, [sp, #0]
   136c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]++;
   136cc:	4a06      	ldr	r2, [pc, #24]	; (136e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   136ce:	9b01      	ldr	r3, [sp, #4]
   136d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136d4:	1c5a      	adds	r2, r3, #1
   136d6:	4904      	ldr	r1, [pc, #16]	; (136e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   136d8:	9b01      	ldr	r3, [sp, #4]
   136da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   136de:	bf00      	nop
   136e0:	b003      	add	sp, #12
   136e2:	f85d fb04 	ldr.w	pc, [sp], #4
   136e6:	bf00      	nop
   136e8:	1fff93a0 	.word	0x1fff93a0
   136ec:	1fff939c 	.word	0x1fff939c

000136f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
   136f0:	b500      	push	{lr}
   136f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   136f4:	f7ee f9a6 	bl	1a44 <Sys_GetCoreID>
   136f8:	4603      	mov	r3, r0
   136fa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]--;
   136fc:	4a0d      	ldr	r2, [pc, #52]	; (13734 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   136fe:	9b01      	ldr	r3, [sp, #4]
   13700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13704:	1e5a      	subs	r2, r3, #1
   13706:	490b      	ldr	r1, [pc, #44]	; (13734 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   13708:	9b01      	ldr	r3, [sp, #4]
   1370a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_49[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]))         /*if interrupts were enabled*/
   1370e:	4a0a      	ldr	r2, [pc, #40]	; (13738 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x48>)
   13710:	9b01      	ldr	r3, [sp, #4]
   13712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13716:	f003 0301 	and.w	r3, r3, #1
   1371a:	2b00      	cmp	r3, #0
   1371c:	d106      	bne.n	1372c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
   1371e:	4a05      	ldr	r2, [pc, #20]	; (13734 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   13720:	9b01      	ldr	r3, [sp, #4]
   13722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13726:	2b00      	cmp	r3, #0
   13728:	d100      	bne.n	1372c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1372a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1372c:	bf00      	nop
   1372e:	b003      	add	sp, #12
   13730:	f85d fb04 	ldr.w	pc, [sp], #4
   13734:	1fff93a0 	.word	0x1fff93a0
   13738:	1fff939c 	.word	0x1fff939c

0001373c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
   1373c:	b500      	push	{lr}
   1373e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13740:	f7ee f980 	bl	1a44 <Sys_GetCoreID>
   13744:	4603      	mov	r3, r0
   13746:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId])
   13748:	4a10      	ldr	r2, [pc, #64]	; (1378c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   1374a:	9b01      	ldr	r3, [sp, #4]
   1374c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13750:	2b00      	cmp	r3, #0
   13752:	d10d      	bne.n	13770 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13754:	f7ed f8d4 	bl	900 <Adc_schm_read_msr>
   13758:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1375a:	9b00      	ldr	r3, [sp, #0]
   1375c:	f003 0301 	and.w	r3, r3, #1
   13760:	2b00      	cmp	r3, #0
   13762:	d100      	bne.n	13766 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13764:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_50[u32CoreId] = msr;
   13766:	490a      	ldr	r1, [pc, #40]	; (13790 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x54>)
   13768:	9b01      	ldr	r3, [sp, #4]
   1376a:	9a00      	ldr	r2, [sp, #0]
   1376c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]++;
   13770:	4a06      	ldr	r2, [pc, #24]	; (1378c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   13772:	9b01      	ldr	r3, [sp, #4]
   13774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13778:	1c5a      	adds	r2, r3, #1
   1377a:	4904      	ldr	r1, [pc, #16]	; (1378c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   1377c:	9b01      	ldr	r3, [sp, #4]
   1377e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13782:	bf00      	nop
   13784:	b003      	add	sp, #12
   13786:	f85d fb04 	ldr.w	pc, [sp], #4
   1378a:	bf00      	nop
   1378c:	1fff93a8 	.word	0x1fff93a8
   13790:	1fff93a4 	.word	0x1fff93a4

00013794 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
   13794:	b500      	push	{lr}
   13796:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13798:	f7ee f954 	bl	1a44 <Sys_GetCoreID>
   1379c:	4603      	mov	r3, r0
   1379e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]--;
   137a0:	4a0d      	ldr	r2, [pc, #52]	; (137d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   137a2:	9b01      	ldr	r3, [sp, #4]
   137a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137a8:	1e5a      	subs	r2, r3, #1
   137aa:	490b      	ldr	r1, [pc, #44]	; (137d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   137ac:	9b01      	ldr	r3, [sp, #4]
   137ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_50[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]))         /*if interrupts were enabled*/
   137b2:	4a0a      	ldr	r2, [pc, #40]	; (137dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x48>)
   137b4:	9b01      	ldr	r3, [sp, #4]
   137b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137ba:	f003 0301 	and.w	r3, r3, #1
   137be:	2b00      	cmp	r3, #0
   137c0:	d106      	bne.n	137d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
   137c2:	4a05      	ldr	r2, [pc, #20]	; (137d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   137c4:	9b01      	ldr	r3, [sp, #4]
   137c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137ca:	2b00      	cmp	r3, #0
   137cc:	d100      	bne.n	137d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   137ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   137d0:	bf00      	nop
   137d2:	b003      	add	sp, #12
   137d4:	f85d fb04 	ldr.w	pc, [sp], #4
   137d8:	1fff93a8 	.word	0x1fff93a8
   137dc:	1fff93a4 	.word	0x1fff93a4

000137e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
   137e0:	b500      	push	{lr}
   137e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   137e4:	f7ee f92e 	bl	1a44 <Sys_GetCoreID>
   137e8:	4603      	mov	r3, r0
   137ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId])
   137ec:	4a10      	ldr	r2, [pc, #64]	; (13830 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   137ee:	9b01      	ldr	r3, [sp, #4]
   137f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137f4:	2b00      	cmp	r3, #0
   137f6:	d10d      	bne.n	13814 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   137f8:	f7ed f882 	bl	900 <Adc_schm_read_msr>
   137fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   137fe:	9b00      	ldr	r3, [sp, #0]
   13800:	f003 0301 	and.w	r3, r3, #1
   13804:	2b00      	cmp	r3, #0
   13806:	d100      	bne.n	1380a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13808:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_51[u32CoreId] = msr;
   1380a:	490a      	ldr	r1, [pc, #40]	; (13834 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x54>)
   1380c:	9b01      	ldr	r3, [sp, #4]
   1380e:	9a00      	ldr	r2, [sp, #0]
   13810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]++;
   13814:	4a06      	ldr	r2, [pc, #24]	; (13830 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   13816:	9b01      	ldr	r3, [sp, #4]
   13818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1381c:	1c5a      	adds	r2, r3, #1
   1381e:	4904      	ldr	r1, [pc, #16]	; (13830 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   13820:	9b01      	ldr	r3, [sp, #4]
   13822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13826:	bf00      	nop
   13828:	b003      	add	sp, #12
   1382a:	f85d fb04 	ldr.w	pc, [sp], #4
   1382e:	bf00      	nop
   13830:	1fff93b0 	.word	0x1fff93b0
   13834:	1fff93ac 	.word	0x1fff93ac

00013838 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
   13838:	b500      	push	{lr}
   1383a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1383c:	f7ee f902 	bl	1a44 <Sys_GetCoreID>
   13840:	4603      	mov	r3, r0
   13842:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]--;
   13844:	4a0d      	ldr	r2, [pc, #52]	; (1387c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   13846:	9b01      	ldr	r3, [sp, #4]
   13848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1384c:	1e5a      	subs	r2, r3, #1
   1384e:	490b      	ldr	r1, [pc, #44]	; (1387c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   13850:	9b01      	ldr	r3, [sp, #4]
   13852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_51[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]))         /*if interrupts were enabled*/
   13856:	4a0a      	ldr	r2, [pc, #40]	; (13880 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x48>)
   13858:	9b01      	ldr	r3, [sp, #4]
   1385a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1385e:	f003 0301 	and.w	r3, r3, #1
   13862:	2b00      	cmp	r3, #0
   13864:	d106      	bne.n	13874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
   13866:	4a05      	ldr	r2, [pc, #20]	; (1387c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   13868:	9b01      	ldr	r3, [sp, #4]
   1386a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1386e:	2b00      	cmp	r3, #0
   13870:	d100      	bne.n	13874 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13872:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13874:	bf00      	nop
   13876:	b003      	add	sp, #12
   13878:	f85d fb04 	ldr.w	pc, [sp], #4
   1387c:	1fff93b0 	.word	0x1fff93b0
   13880:	1fff93ac 	.word	0x1fff93ac

00013884 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
   13884:	b500      	push	{lr}
   13886:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13888:	f7ee f8dc 	bl	1a44 <Sys_GetCoreID>
   1388c:	4603      	mov	r3, r0
   1388e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId])
   13890:	4a10      	ldr	r2, [pc, #64]	; (138d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   13892:	9b01      	ldr	r3, [sp, #4]
   13894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13898:	2b00      	cmp	r3, #0
   1389a:	d10d      	bne.n	138b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1389c:	f7ed f830 	bl	900 <Adc_schm_read_msr>
   138a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   138a2:	9b00      	ldr	r3, [sp, #0]
   138a4:	f003 0301 	and.w	r3, r3, #1
   138a8:	2b00      	cmp	r3, #0
   138aa:	d100      	bne.n	138ae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   138ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_54[u32CoreId] = msr;
   138ae:	490a      	ldr	r1, [pc, #40]	; (138d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x54>)
   138b0:	9b01      	ldr	r3, [sp, #4]
   138b2:	9a00      	ldr	r2, [sp, #0]
   138b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]++;
   138b8:	4a06      	ldr	r2, [pc, #24]	; (138d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   138ba:	9b01      	ldr	r3, [sp, #4]
   138bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138c0:	1c5a      	adds	r2, r3, #1
   138c2:	4904      	ldr	r1, [pc, #16]	; (138d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   138c4:	9b01      	ldr	r3, [sp, #4]
   138c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   138ca:	bf00      	nop
   138cc:	b003      	add	sp, #12
   138ce:	f85d fb04 	ldr.w	pc, [sp], #4
   138d2:	bf00      	nop
   138d4:	1fff93b8 	.word	0x1fff93b8
   138d8:	1fff93b4 	.word	0x1fff93b4

000138dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
   138dc:	b500      	push	{lr}
   138de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   138e0:	f7ee f8b0 	bl	1a44 <Sys_GetCoreID>
   138e4:	4603      	mov	r3, r0
   138e6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]--;
   138e8:	4a0d      	ldr	r2, [pc, #52]	; (13920 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   138ea:	9b01      	ldr	r3, [sp, #4]
   138ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138f0:	1e5a      	subs	r2, r3, #1
   138f2:	490b      	ldr	r1, [pc, #44]	; (13920 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   138f4:	9b01      	ldr	r3, [sp, #4]
   138f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_54[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]))         /*if interrupts were enabled*/
   138fa:	4a0a      	ldr	r2, [pc, #40]	; (13924 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x48>)
   138fc:	9b01      	ldr	r3, [sp, #4]
   138fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13902:	f003 0301 	and.w	r3, r3, #1
   13906:	2b00      	cmp	r3, #0
   13908:	d106      	bne.n	13918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
   1390a:	4a05      	ldr	r2, [pc, #20]	; (13920 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   1390c:	9b01      	ldr	r3, [sp, #4]
   1390e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13912:	2b00      	cmp	r3, #0
   13914:	d100      	bne.n	13918 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13916:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13918:	bf00      	nop
   1391a:	b003      	add	sp, #12
   1391c:	f85d fb04 	ldr.w	pc, [sp], #4
   13920:	1fff93b8 	.word	0x1fff93b8
   13924:	1fff93b4 	.word	0x1fff93b4

00013928 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
   13928:	b500      	push	{lr}
   1392a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1392c:	f7ee f88a 	bl	1a44 <Sys_GetCoreID>
   13930:	4603      	mov	r3, r0
   13932:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId])
   13934:	4a10      	ldr	r2, [pc, #64]	; (13978 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   13936:	9b01      	ldr	r3, [sp, #4]
   13938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1393c:	2b00      	cmp	r3, #0
   1393e:	d10d      	bne.n	1395c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13940:	f7ec ffde 	bl	900 <Adc_schm_read_msr>
   13944:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13946:	9b00      	ldr	r3, [sp, #0]
   13948:	f003 0301 	and.w	r3, r3, #1
   1394c:	2b00      	cmp	r3, #0
   1394e:	d100      	bne.n	13952 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13950:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_55[u32CoreId] = msr;
   13952:	490a      	ldr	r1, [pc, #40]	; (1397c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x54>)
   13954:	9b01      	ldr	r3, [sp, #4]
   13956:	9a00      	ldr	r2, [sp, #0]
   13958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]++;
   1395c:	4a06      	ldr	r2, [pc, #24]	; (13978 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   1395e:	9b01      	ldr	r3, [sp, #4]
   13960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13964:	1c5a      	adds	r2, r3, #1
   13966:	4904      	ldr	r1, [pc, #16]	; (13978 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   13968:	9b01      	ldr	r3, [sp, #4]
   1396a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1396e:	bf00      	nop
   13970:	b003      	add	sp, #12
   13972:	f85d fb04 	ldr.w	pc, [sp], #4
   13976:	bf00      	nop
   13978:	1fff93c0 	.word	0x1fff93c0
   1397c:	1fff93bc 	.word	0x1fff93bc

00013980 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
   13980:	b500      	push	{lr}
   13982:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13984:	f7ee f85e 	bl	1a44 <Sys_GetCoreID>
   13988:	4603      	mov	r3, r0
   1398a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]--;
   1398c:	4a0d      	ldr	r2, [pc, #52]	; (139c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   1398e:	9b01      	ldr	r3, [sp, #4]
   13990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13994:	1e5a      	subs	r2, r3, #1
   13996:	490b      	ldr	r1, [pc, #44]	; (139c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   13998:	9b01      	ldr	r3, [sp, #4]
   1399a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_55[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]))         /*if interrupts were enabled*/
   1399e:	4a0a      	ldr	r2, [pc, #40]	; (139c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x48>)
   139a0:	9b01      	ldr	r3, [sp, #4]
   139a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139a6:	f003 0301 	and.w	r3, r3, #1
   139aa:	2b00      	cmp	r3, #0
   139ac:	d106      	bne.n	139bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
   139ae:	4a05      	ldr	r2, [pc, #20]	; (139c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   139b0:	9b01      	ldr	r3, [sp, #4]
   139b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139b6:	2b00      	cmp	r3, #0
   139b8:	d100      	bne.n	139bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   139ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   139bc:	bf00      	nop
   139be:	b003      	add	sp, #12
   139c0:	f85d fb04 	ldr.w	pc, [sp], #4
   139c4:	1fff93c0 	.word	0x1fff93c0
   139c8:	1fff93bc 	.word	0x1fff93bc

000139cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
   139cc:	b500      	push	{lr}
   139ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   139d0:	f7ee f838 	bl	1a44 <Sys_GetCoreID>
   139d4:	4603      	mov	r3, r0
   139d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId])
   139d8:	4a10      	ldr	r2, [pc, #64]	; (13a1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   139da:	9b01      	ldr	r3, [sp, #4]
   139dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139e0:	2b00      	cmp	r3, #0
   139e2:	d10d      	bne.n	13a00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   139e4:	f7ec ff8c 	bl	900 <Adc_schm_read_msr>
   139e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   139ea:	9b00      	ldr	r3, [sp, #0]
   139ec:	f003 0301 	and.w	r3, r3, #1
   139f0:	2b00      	cmp	r3, #0
   139f2:	d100      	bne.n	139f6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   139f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_56[u32CoreId] = msr;
   139f6:	490a      	ldr	r1, [pc, #40]	; (13a20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x54>)
   139f8:	9b01      	ldr	r3, [sp, #4]
   139fa:	9a00      	ldr	r2, [sp, #0]
   139fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]++;
   13a00:	4a06      	ldr	r2, [pc, #24]	; (13a1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   13a02:	9b01      	ldr	r3, [sp, #4]
   13a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a08:	1c5a      	adds	r2, r3, #1
   13a0a:	4904      	ldr	r1, [pc, #16]	; (13a1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   13a0c:	9b01      	ldr	r3, [sp, #4]
   13a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13a12:	bf00      	nop
   13a14:	b003      	add	sp, #12
   13a16:	f85d fb04 	ldr.w	pc, [sp], #4
   13a1a:	bf00      	nop
   13a1c:	1fff93c8 	.word	0x1fff93c8
   13a20:	1fff93c4 	.word	0x1fff93c4

00013a24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
   13a24:	b500      	push	{lr}
   13a26:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13a28:	f7ee f80c 	bl	1a44 <Sys_GetCoreID>
   13a2c:	4603      	mov	r3, r0
   13a2e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]--;
   13a30:	4a0d      	ldr	r2, [pc, #52]	; (13a68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   13a32:	9b01      	ldr	r3, [sp, #4]
   13a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a38:	1e5a      	subs	r2, r3, #1
   13a3a:	490b      	ldr	r1, [pc, #44]	; (13a68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   13a3c:	9b01      	ldr	r3, [sp, #4]
   13a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_56[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]))         /*if interrupts were enabled*/
   13a42:	4a0a      	ldr	r2, [pc, #40]	; (13a6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x48>)
   13a44:	9b01      	ldr	r3, [sp, #4]
   13a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a4a:	f003 0301 	and.w	r3, r3, #1
   13a4e:	2b00      	cmp	r3, #0
   13a50:	d106      	bne.n	13a60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
   13a52:	4a05      	ldr	r2, [pc, #20]	; (13a68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   13a54:	9b01      	ldr	r3, [sp, #4]
   13a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a5a:	2b00      	cmp	r3, #0
   13a5c:	d100      	bne.n	13a60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13a5e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13a60:	bf00      	nop
   13a62:	b003      	add	sp, #12
   13a64:	f85d fb04 	ldr.w	pc, [sp], #4
   13a68:	1fff93c8 	.word	0x1fff93c8
   13a6c:	1fff93c4 	.word	0x1fff93c4

00013a70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
   13a70:	b500      	push	{lr}
   13a72:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13a74:	f7ed ffe6 	bl	1a44 <Sys_GetCoreID>
   13a78:	4603      	mov	r3, r0
   13a7a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId])
   13a7c:	4a10      	ldr	r2, [pc, #64]	; (13ac0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   13a7e:	9b01      	ldr	r3, [sp, #4]
   13a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a84:	2b00      	cmp	r3, #0
   13a86:	d10d      	bne.n	13aa4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13a88:	f7ec ff3a 	bl	900 <Adc_schm_read_msr>
   13a8c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13a8e:	9b00      	ldr	r3, [sp, #0]
   13a90:	f003 0301 	and.w	r3, r3, #1
   13a94:	2b00      	cmp	r3, #0
   13a96:	d100      	bne.n	13a9a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13a98:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_57[u32CoreId] = msr;
   13a9a:	490a      	ldr	r1, [pc, #40]	; (13ac4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x54>)
   13a9c:	9b01      	ldr	r3, [sp, #4]
   13a9e:	9a00      	ldr	r2, [sp, #0]
   13aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]++;
   13aa4:	4a06      	ldr	r2, [pc, #24]	; (13ac0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   13aa6:	9b01      	ldr	r3, [sp, #4]
   13aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13aac:	1c5a      	adds	r2, r3, #1
   13aae:	4904      	ldr	r1, [pc, #16]	; (13ac0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   13ab0:	9b01      	ldr	r3, [sp, #4]
   13ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13ab6:	bf00      	nop
   13ab8:	b003      	add	sp, #12
   13aba:	f85d fb04 	ldr.w	pc, [sp], #4
   13abe:	bf00      	nop
   13ac0:	1fff93d0 	.word	0x1fff93d0
   13ac4:	1fff93cc 	.word	0x1fff93cc

00013ac8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
   13ac8:	b500      	push	{lr}
   13aca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13acc:	f7ed ffba 	bl	1a44 <Sys_GetCoreID>
   13ad0:	4603      	mov	r3, r0
   13ad2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]--;
   13ad4:	4a0d      	ldr	r2, [pc, #52]	; (13b0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   13ad6:	9b01      	ldr	r3, [sp, #4]
   13ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13adc:	1e5a      	subs	r2, r3, #1
   13ade:	490b      	ldr	r1, [pc, #44]	; (13b0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   13ae0:	9b01      	ldr	r3, [sp, #4]
   13ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_57[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]))         /*if interrupts were enabled*/
   13ae6:	4a0a      	ldr	r2, [pc, #40]	; (13b10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x48>)
   13ae8:	9b01      	ldr	r3, [sp, #4]
   13aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13aee:	f003 0301 	and.w	r3, r3, #1
   13af2:	2b00      	cmp	r3, #0
   13af4:	d106      	bne.n	13b04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
   13af6:	4a05      	ldr	r2, [pc, #20]	; (13b0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   13af8:	9b01      	ldr	r3, [sp, #4]
   13afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13afe:	2b00      	cmp	r3, #0
   13b00:	d100      	bne.n	13b04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13b02:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13b04:	bf00      	nop
   13b06:	b003      	add	sp, #12
   13b08:	f85d fb04 	ldr.w	pc, [sp], #4
   13b0c:	1fff93d0 	.word	0x1fff93d0
   13b10:	1fff93cc 	.word	0x1fff93cc

00013b14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
   13b14:	b500      	push	{lr}
   13b16:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13b18:	f7ed ff94 	bl	1a44 <Sys_GetCoreID>
   13b1c:	4603      	mov	r3, r0
   13b1e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId])
   13b20:	4a10      	ldr	r2, [pc, #64]	; (13b64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   13b22:	9b01      	ldr	r3, [sp, #4]
   13b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b28:	2b00      	cmp	r3, #0
   13b2a:	d10d      	bne.n	13b48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13b2c:	f7ec fee8 	bl	900 <Adc_schm_read_msr>
   13b30:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13b32:	9b00      	ldr	r3, [sp, #0]
   13b34:	f003 0301 	and.w	r3, r3, #1
   13b38:	2b00      	cmp	r3, #0
   13b3a:	d100      	bne.n	13b3e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13b3c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_58[u32CoreId] = msr;
   13b3e:	490a      	ldr	r1, [pc, #40]	; (13b68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x54>)
   13b40:	9b01      	ldr	r3, [sp, #4]
   13b42:	9a00      	ldr	r2, [sp, #0]
   13b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]++;
   13b48:	4a06      	ldr	r2, [pc, #24]	; (13b64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   13b4a:	9b01      	ldr	r3, [sp, #4]
   13b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b50:	1c5a      	adds	r2, r3, #1
   13b52:	4904      	ldr	r1, [pc, #16]	; (13b64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   13b54:	9b01      	ldr	r3, [sp, #4]
   13b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13b5a:	bf00      	nop
   13b5c:	b003      	add	sp, #12
   13b5e:	f85d fb04 	ldr.w	pc, [sp], #4
   13b62:	bf00      	nop
   13b64:	1fff93d8 	.word	0x1fff93d8
   13b68:	1fff93d4 	.word	0x1fff93d4

00013b6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
   13b6c:	b500      	push	{lr}
   13b6e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13b70:	f7ed ff68 	bl	1a44 <Sys_GetCoreID>
   13b74:	4603      	mov	r3, r0
   13b76:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]--;
   13b78:	4a0d      	ldr	r2, [pc, #52]	; (13bb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   13b7a:	9b01      	ldr	r3, [sp, #4]
   13b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b80:	1e5a      	subs	r2, r3, #1
   13b82:	490b      	ldr	r1, [pc, #44]	; (13bb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   13b84:	9b01      	ldr	r3, [sp, #4]
   13b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_58[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]))         /*if interrupts were enabled*/
   13b8a:	4a0a      	ldr	r2, [pc, #40]	; (13bb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x48>)
   13b8c:	9b01      	ldr	r3, [sp, #4]
   13b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b92:	f003 0301 	and.w	r3, r3, #1
   13b96:	2b00      	cmp	r3, #0
   13b98:	d106      	bne.n	13ba8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
   13b9a:	4a05      	ldr	r2, [pc, #20]	; (13bb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   13b9c:	9b01      	ldr	r3, [sp, #4]
   13b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ba2:	2b00      	cmp	r3, #0
   13ba4:	d100      	bne.n	13ba8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13ba6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13ba8:	bf00      	nop
   13baa:	b003      	add	sp, #12
   13bac:	f85d fb04 	ldr.w	pc, [sp], #4
   13bb0:	1fff93d8 	.word	0x1fff93d8
   13bb4:	1fff93d4 	.word	0x1fff93d4

00013bb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
   13bb8:	b500      	push	{lr}
   13bba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13bbc:	f7ed ff42 	bl	1a44 <Sys_GetCoreID>
   13bc0:	4603      	mov	r3, r0
   13bc2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId])
   13bc4:	4a10      	ldr	r2, [pc, #64]	; (13c08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   13bc6:	9b01      	ldr	r3, [sp, #4]
   13bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bcc:	2b00      	cmp	r3, #0
   13bce:	d10d      	bne.n	13bec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13bd0:	f7ec fe96 	bl	900 <Adc_schm_read_msr>
   13bd4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13bd6:	9b00      	ldr	r3, [sp, #0]
   13bd8:	f003 0301 	and.w	r3, r3, #1
   13bdc:	2b00      	cmp	r3, #0
   13bde:	d100      	bne.n	13be2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13be0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_59[u32CoreId] = msr;
   13be2:	490a      	ldr	r1, [pc, #40]	; (13c0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x54>)
   13be4:	9b01      	ldr	r3, [sp, #4]
   13be6:	9a00      	ldr	r2, [sp, #0]
   13be8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]++;
   13bec:	4a06      	ldr	r2, [pc, #24]	; (13c08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   13bee:	9b01      	ldr	r3, [sp, #4]
   13bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bf4:	1c5a      	adds	r2, r3, #1
   13bf6:	4904      	ldr	r1, [pc, #16]	; (13c08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   13bf8:	9b01      	ldr	r3, [sp, #4]
   13bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13bfe:	bf00      	nop
   13c00:	b003      	add	sp, #12
   13c02:	f85d fb04 	ldr.w	pc, [sp], #4
   13c06:	bf00      	nop
   13c08:	1fff93e0 	.word	0x1fff93e0
   13c0c:	1fff93dc 	.word	0x1fff93dc

00013c10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
   13c10:	b500      	push	{lr}
   13c12:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13c14:	f7ed ff16 	bl	1a44 <Sys_GetCoreID>
   13c18:	4603      	mov	r3, r0
   13c1a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]--;
   13c1c:	4a0d      	ldr	r2, [pc, #52]	; (13c54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   13c1e:	9b01      	ldr	r3, [sp, #4]
   13c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c24:	1e5a      	subs	r2, r3, #1
   13c26:	490b      	ldr	r1, [pc, #44]	; (13c54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   13c28:	9b01      	ldr	r3, [sp, #4]
   13c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_59[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]))         /*if interrupts were enabled*/
   13c2e:	4a0a      	ldr	r2, [pc, #40]	; (13c58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x48>)
   13c30:	9b01      	ldr	r3, [sp, #4]
   13c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c36:	f003 0301 	and.w	r3, r3, #1
   13c3a:	2b00      	cmp	r3, #0
   13c3c:	d106      	bne.n	13c4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
   13c3e:	4a05      	ldr	r2, [pc, #20]	; (13c54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   13c40:	9b01      	ldr	r3, [sp, #4]
   13c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c46:	2b00      	cmp	r3, #0
   13c48:	d100      	bne.n	13c4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13c4a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13c4c:	bf00      	nop
   13c4e:	b003      	add	sp, #12
   13c50:	f85d fb04 	ldr.w	pc, [sp], #4
   13c54:	1fff93e0 	.word	0x1fff93e0
   13c58:	1fff93dc 	.word	0x1fff93dc

00013c5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
   13c5c:	b500      	push	{lr}
   13c5e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13c60:	f7ed fef0 	bl	1a44 <Sys_GetCoreID>
   13c64:	4603      	mov	r3, r0
   13c66:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId])
   13c68:	4a10      	ldr	r2, [pc, #64]	; (13cac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   13c6a:	9b01      	ldr	r3, [sp, #4]
   13c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c70:	2b00      	cmp	r3, #0
   13c72:	d10d      	bne.n	13c90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13c74:	f7ec fe44 	bl	900 <Adc_schm_read_msr>
   13c78:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13c7a:	9b00      	ldr	r3, [sp, #0]
   13c7c:	f003 0301 	and.w	r3, r3, #1
   13c80:	2b00      	cmp	r3, #0
   13c82:	d100      	bne.n	13c86 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13c84:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_60[u32CoreId] = msr;
   13c86:	490a      	ldr	r1, [pc, #40]	; (13cb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x54>)
   13c88:	9b01      	ldr	r3, [sp, #4]
   13c8a:	9a00      	ldr	r2, [sp, #0]
   13c8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]++;
   13c90:	4a06      	ldr	r2, [pc, #24]	; (13cac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   13c92:	9b01      	ldr	r3, [sp, #4]
   13c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c98:	1c5a      	adds	r2, r3, #1
   13c9a:	4904      	ldr	r1, [pc, #16]	; (13cac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   13c9c:	9b01      	ldr	r3, [sp, #4]
   13c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13ca2:	bf00      	nop
   13ca4:	b003      	add	sp, #12
   13ca6:	f85d fb04 	ldr.w	pc, [sp], #4
   13caa:	bf00      	nop
   13cac:	1fff93e8 	.word	0x1fff93e8
   13cb0:	1fff93e4 	.word	0x1fff93e4

00013cb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
   13cb4:	b500      	push	{lr}
   13cb6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13cb8:	f7ed fec4 	bl	1a44 <Sys_GetCoreID>
   13cbc:	4603      	mov	r3, r0
   13cbe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]--;
   13cc0:	4a0d      	ldr	r2, [pc, #52]	; (13cf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   13cc2:	9b01      	ldr	r3, [sp, #4]
   13cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13cc8:	1e5a      	subs	r2, r3, #1
   13cca:	490b      	ldr	r1, [pc, #44]	; (13cf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   13ccc:	9b01      	ldr	r3, [sp, #4]
   13cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_60[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]))         /*if interrupts were enabled*/
   13cd2:	4a0a      	ldr	r2, [pc, #40]	; (13cfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x48>)
   13cd4:	9b01      	ldr	r3, [sp, #4]
   13cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13cda:	f003 0301 	and.w	r3, r3, #1
   13cde:	2b00      	cmp	r3, #0
   13ce0:	d106      	bne.n	13cf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
   13ce2:	4a05      	ldr	r2, [pc, #20]	; (13cf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   13ce4:	9b01      	ldr	r3, [sp, #4]
   13ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13cea:	2b00      	cmp	r3, #0
   13cec:	d100      	bne.n	13cf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13cee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13cf0:	bf00      	nop
   13cf2:	b003      	add	sp, #12
   13cf4:	f85d fb04 	ldr.w	pc, [sp], #4
   13cf8:	1fff93e8 	.word	0x1fff93e8
   13cfc:	1fff93e4 	.word	0x1fff93e4

00013d00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
   13d00:	b500      	push	{lr}
   13d02:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13d04:	f7ed fe9e 	bl	1a44 <Sys_GetCoreID>
   13d08:	4603      	mov	r3, r0
   13d0a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId])
   13d0c:	4a10      	ldr	r2, [pc, #64]	; (13d50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   13d0e:	9b01      	ldr	r3, [sp, #4]
   13d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d14:	2b00      	cmp	r3, #0
   13d16:	d10d      	bne.n	13d34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13d18:	f7ec fdf2 	bl	900 <Adc_schm_read_msr>
   13d1c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13d1e:	9b00      	ldr	r3, [sp, #0]
   13d20:	f003 0301 	and.w	r3, r3, #1
   13d24:	2b00      	cmp	r3, #0
   13d26:	d100      	bne.n	13d2a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13d28:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_61[u32CoreId] = msr;
   13d2a:	490a      	ldr	r1, [pc, #40]	; (13d54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x54>)
   13d2c:	9b01      	ldr	r3, [sp, #4]
   13d2e:	9a00      	ldr	r2, [sp, #0]
   13d30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]++;
   13d34:	4a06      	ldr	r2, [pc, #24]	; (13d50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   13d36:	9b01      	ldr	r3, [sp, #4]
   13d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d3c:	1c5a      	adds	r2, r3, #1
   13d3e:	4904      	ldr	r1, [pc, #16]	; (13d50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   13d40:	9b01      	ldr	r3, [sp, #4]
   13d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13d46:	bf00      	nop
   13d48:	b003      	add	sp, #12
   13d4a:	f85d fb04 	ldr.w	pc, [sp], #4
   13d4e:	bf00      	nop
   13d50:	1fff93f0 	.word	0x1fff93f0
   13d54:	1fff93ec 	.word	0x1fff93ec

00013d58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
   13d58:	b500      	push	{lr}
   13d5a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13d5c:	f7ed fe72 	bl	1a44 <Sys_GetCoreID>
   13d60:	4603      	mov	r3, r0
   13d62:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]--;
   13d64:	4a0d      	ldr	r2, [pc, #52]	; (13d9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   13d66:	9b01      	ldr	r3, [sp, #4]
   13d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d6c:	1e5a      	subs	r2, r3, #1
   13d6e:	490b      	ldr	r1, [pc, #44]	; (13d9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   13d70:	9b01      	ldr	r3, [sp, #4]
   13d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_61[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]))         /*if interrupts were enabled*/
   13d76:	4a0a      	ldr	r2, [pc, #40]	; (13da0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x48>)
   13d78:	9b01      	ldr	r3, [sp, #4]
   13d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d7e:	f003 0301 	and.w	r3, r3, #1
   13d82:	2b00      	cmp	r3, #0
   13d84:	d106      	bne.n	13d94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
   13d86:	4a05      	ldr	r2, [pc, #20]	; (13d9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   13d88:	9b01      	ldr	r3, [sp, #4]
   13d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d8e:	2b00      	cmp	r3, #0
   13d90:	d100      	bne.n	13d94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13d92:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13d94:	bf00      	nop
   13d96:	b003      	add	sp, #12
   13d98:	f85d fb04 	ldr.w	pc, [sp], #4
   13d9c:	1fff93f0 	.word	0x1fff93f0
   13da0:	1fff93ec 	.word	0x1fff93ec

00013da4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
   13da4:	b500      	push	{lr}
   13da6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13da8:	f7ed fe4c 	bl	1a44 <Sys_GetCoreID>
   13dac:	4603      	mov	r3, r0
   13dae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId])
   13db0:	4a10      	ldr	r2, [pc, #64]	; (13df4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   13db2:	9b01      	ldr	r3, [sp, #4]
   13db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13db8:	2b00      	cmp	r3, #0
   13dba:	d10d      	bne.n	13dd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13dbc:	f7ec fda0 	bl	900 <Adc_schm_read_msr>
   13dc0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13dc2:	9b00      	ldr	r3, [sp, #0]
   13dc4:	f003 0301 	and.w	r3, r3, #1
   13dc8:	2b00      	cmp	r3, #0
   13dca:	d100      	bne.n	13dce <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13dcc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_62[u32CoreId] = msr;
   13dce:	490a      	ldr	r1, [pc, #40]	; (13df8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x54>)
   13dd0:	9b01      	ldr	r3, [sp, #4]
   13dd2:	9a00      	ldr	r2, [sp, #0]
   13dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]++;
   13dd8:	4a06      	ldr	r2, [pc, #24]	; (13df4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   13dda:	9b01      	ldr	r3, [sp, #4]
   13ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13de0:	1c5a      	adds	r2, r3, #1
   13de2:	4904      	ldr	r1, [pc, #16]	; (13df4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   13de4:	9b01      	ldr	r3, [sp, #4]
   13de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13dea:	bf00      	nop
   13dec:	b003      	add	sp, #12
   13dee:	f85d fb04 	ldr.w	pc, [sp], #4
   13df2:	bf00      	nop
   13df4:	1fff93f8 	.word	0x1fff93f8
   13df8:	1fff93f4 	.word	0x1fff93f4

00013dfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
   13dfc:	b500      	push	{lr}
   13dfe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13e00:	f7ed fe20 	bl	1a44 <Sys_GetCoreID>
   13e04:	4603      	mov	r3, r0
   13e06:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]--;
   13e08:	4a0d      	ldr	r2, [pc, #52]	; (13e40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   13e0a:	9b01      	ldr	r3, [sp, #4]
   13e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e10:	1e5a      	subs	r2, r3, #1
   13e12:	490b      	ldr	r1, [pc, #44]	; (13e40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   13e14:	9b01      	ldr	r3, [sp, #4]
   13e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_62[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]))         /*if interrupts were enabled*/
   13e1a:	4a0a      	ldr	r2, [pc, #40]	; (13e44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x48>)
   13e1c:	9b01      	ldr	r3, [sp, #4]
   13e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e22:	f003 0301 	and.w	r3, r3, #1
   13e26:	2b00      	cmp	r3, #0
   13e28:	d106      	bne.n	13e38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
   13e2a:	4a05      	ldr	r2, [pc, #20]	; (13e40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   13e2c:	9b01      	ldr	r3, [sp, #4]
   13e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e32:	2b00      	cmp	r3, #0
   13e34:	d100      	bne.n	13e38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13e36:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13e38:	bf00      	nop
   13e3a:	b003      	add	sp, #12
   13e3c:	f85d fb04 	ldr.w	pc, [sp], #4
   13e40:	1fff93f8 	.word	0x1fff93f8
   13e44:	1fff93f4 	.word	0x1fff93f4

00013e48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
   13e48:	b500      	push	{lr}
   13e4a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13e4c:	f7ed fdfa 	bl	1a44 <Sys_GetCoreID>
   13e50:	4603      	mov	r3, r0
   13e52:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId])
   13e54:	4a10      	ldr	r2, [pc, #64]	; (13e98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   13e56:	9b01      	ldr	r3, [sp, #4]
   13e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e5c:	2b00      	cmp	r3, #0
   13e5e:	d10d      	bne.n	13e7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13e60:	f7ec fd4e 	bl	900 <Adc_schm_read_msr>
   13e64:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13e66:	9b00      	ldr	r3, [sp, #0]
   13e68:	f003 0301 	and.w	r3, r3, #1
   13e6c:	2b00      	cmp	r3, #0
   13e6e:	d100      	bne.n	13e72 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13e70:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_63[u32CoreId] = msr;
   13e72:	490a      	ldr	r1, [pc, #40]	; (13e9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x54>)
   13e74:	9b01      	ldr	r3, [sp, #4]
   13e76:	9a00      	ldr	r2, [sp, #0]
   13e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]++;
   13e7c:	4a06      	ldr	r2, [pc, #24]	; (13e98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   13e7e:	9b01      	ldr	r3, [sp, #4]
   13e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e84:	1c5a      	adds	r2, r3, #1
   13e86:	4904      	ldr	r1, [pc, #16]	; (13e98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   13e88:	9b01      	ldr	r3, [sp, #4]
   13e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13e8e:	bf00      	nop
   13e90:	b003      	add	sp, #12
   13e92:	f85d fb04 	ldr.w	pc, [sp], #4
   13e96:	bf00      	nop
   13e98:	1fff9400 	.word	0x1fff9400
   13e9c:	1fff93fc 	.word	0x1fff93fc

00013ea0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
   13ea0:	b500      	push	{lr}
   13ea2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13ea4:	f7ed fdce 	bl	1a44 <Sys_GetCoreID>
   13ea8:	4603      	mov	r3, r0
   13eaa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]--;
   13eac:	4a0d      	ldr	r2, [pc, #52]	; (13ee4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   13eae:	9b01      	ldr	r3, [sp, #4]
   13eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13eb4:	1e5a      	subs	r2, r3, #1
   13eb6:	490b      	ldr	r1, [pc, #44]	; (13ee4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   13eb8:	9b01      	ldr	r3, [sp, #4]
   13eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_63[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]))         /*if interrupts were enabled*/
   13ebe:	4a0a      	ldr	r2, [pc, #40]	; (13ee8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x48>)
   13ec0:	9b01      	ldr	r3, [sp, #4]
   13ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ec6:	f003 0301 	and.w	r3, r3, #1
   13eca:	2b00      	cmp	r3, #0
   13ecc:	d106      	bne.n	13edc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
   13ece:	4a05      	ldr	r2, [pc, #20]	; (13ee4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   13ed0:	9b01      	ldr	r3, [sp, #4]
   13ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ed6:	2b00      	cmp	r3, #0
   13ed8:	d100      	bne.n	13edc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13eda:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13edc:	bf00      	nop
   13ede:	b003      	add	sp, #12
   13ee0:	f85d fb04 	ldr.w	pc, [sp], #4
   13ee4:	1fff9400 	.word	0x1fff9400
   13ee8:	1fff93fc 	.word	0x1fff93fc

00013eec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
   13eec:	b500      	push	{lr}
   13eee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13ef0:	f7ed fda8 	bl	1a44 <Sys_GetCoreID>
   13ef4:	4603      	mov	r3, r0
   13ef6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId])
   13ef8:	4a10      	ldr	r2, [pc, #64]	; (13f3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   13efa:	9b01      	ldr	r3, [sp, #4]
   13efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f00:	2b00      	cmp	r3, #0
   13f02:	d10d      	bne.n	13f20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13f04:	f7ec fcfc 	bl	900 <Adc_schm_read_msr>
   13f08:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13f0a:	9b00      	ldr	r3, [sp, #0]
   13f0c:	f003 0301 	and.w	r3, r3, #1
   13f10:	2b00      	cmp	r3, #0
   13f12:	d100      	bne.n	13f16 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13f14:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_64[u32CoreId] = msr;
   13f16:	490a      	ldr	r1, [pc, #40]	; (13f40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x54>)
   13f18:	9b01      	ldr	r3, [sp, #4]
   13f1a:	9a00      	ldr	r2, [sp, #0]
   13f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]++;
   13f20:	4a06      	ldr	r2, [pc, #24]	; (13f3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   13f22:	9b01      	ldr	r3, [sp, #4]
   13f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f28:	1c5a      	adds	r2, r3, #1
   13f2a:	4904      	ldr	r1, [pc, #16]	; (13f3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   13f2c:	9b01      	ldr	r3, [sp, #4]
   13f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13f32:	bf00      	nop
   13f34:	b003      	add	sp, #12
   13f36:	f85d fb04 	ldr.w	pc, [sp], #4
   13f3a:	bf00      	nop
   13f3c:	1fff9408 	.word	0x1fff9408
   13f40:	1fff9404 	.word	0x1fff9404

00013f44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
   13f44:	b500      	push	{lr}
   13f46:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13f48:	f7ed fd7c 	bl	1a44 <Sys_GetCoreID>
   13f4c:	4603      	mov	r3, r0
   13f4e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]--;
   13f50:	4a0d      	ldr	r2, [pc, #52]	; (13f88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   13f52:	9b01      	ldr	r3, [sp, #4]
   13f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f58:	1e5a      	subs	r2, r3, #1
   13f5a:	490b      	ldr	r1, [pc, #44]	; (13f88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   13f5c:	9b01      	ldr	r3, [sp, #4]
   13f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_64[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]))         /*if interrupts were enabled*/
   13f62:	4a0a      	ldr	r2, [pc, #40]	; (13f8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x48>)
   13f64:	9b01      	ldr	r3, [sp, #4]
   13f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f6a:	f003 0301 	and.w	r3, r3, #1
   13f6e:	2b00      	cmp	r3, #0
   13f70:	d106      	bne.n	13f80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
   13f72:	4a05      	ldr	r2, [pc, #20]	; (13f88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   13f74:	9b01      	ldr	r3, [sp, #4]
   13f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f7a:	2b00      	cmp	r3, #0
   13f7c:	d100      	bne.n	13f80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13f7e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13f80:	bf00      	nop
   13f82:	b003      	add	sp, #12
   13f84:	f85d fb04 	ldr.w	pc, [sp], #4
   13f88:	1fff9408 	.word	0x1fff9408
   13f8c:	1fff9404 	.word	0x1fff9404

00013f90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
   13f90:	b500      	push	{lr}
   13f92:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13f94:	f7ed fd56 	bl	1a44 <Sys_GetCoreID>
   13f98:	4603      	mov	r3, r0
   13f9a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId])
   13f9c:	4a10      	ldr	r2, [pc, #64]	; (13fe0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   13f9e:	9b01      	ldr	r3, [sp, #4]
   13fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13fa4:	2b00      	cmp	r3, #0
   13fa6:	d10d      	bne.n	13fc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13fa8:	f7ec fcaa 	bl	900 <Adc_schm_read_msr>
   13fac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13fae:	9b00      	ldr	r3, [sp, #0]
   13fb0:	f003 0301 	and.w	r3, r3, #1
   13fb4:	2b00      	cmp	r3, #0
   13fb6:	d100      	bne.n	13fba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13fb8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_65[u32CoreId] = msr;
   13fba:	490a      	ldr	r1, [pc, #40]	; (13fe4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x54>)
   13fbc:	9b01      	ldr	r3, [sp, #4]
   13fbe:	9a00      	ldr	r2, [sp, #0]
   13fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]++;
   13fc4:	4a06      	ldr	r2, [pc, #24]	; (13fe0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   13fc6:	9b01      	ldr	r3, [sp, #4]
   13fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13fcc:	1c5a      	adds	r2, r3, #1
   13fce:	4904      	ldr	r1, [pc, #16]	; (13fe0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   13fd0:	9b01      	ldr	r3, [sp, #4]
   13fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13fd6:	bf00      	nop
   13fd8:	b003      	add	sp, #12
   13fda:	f85d fb04 	ldr.w	pc, [sp], #4
   13fde:	bf00      	nop
   13fe0:	1fff9410 	.word	0x1fff9410
   13fe4:	1fff940c 	.word	0x1fff940c

00013fe8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
   13fe8:	b500      	push	{lr}
   13fea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13fec:	f7ed fd2a 	bl	1a44 <Sys_GetCoreID>
   13ff0:	4603      	mov	r3, r0
   13ff2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]--;
   13ff4:	4a0d      	ldr	r2, [pc, #52]	; (1402c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   13ff6:	9b01      	ldr	r3, [sp, #4]
   13ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ffc:	1e5a      	subs	r2, r3, #1
   13ffe:	490b      	ldr	r1, [pc, #44]	; (1402c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   14000:	9b01      	ldr	r3, [sp, #4]
   14002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_65[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]))         /*if interrupts were enabled*/
   14006:	4a0a      	ldr	r2, [pc, #40]	; (14030 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x48>)
   14008:	9b01      	ldr	r3, [sp, #4]
   1400a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1400e:	f003 0301 	and.w	r3, r3, #1
   14012:	2b00      	cmp	r3, #0
   14014:	d106      	bne.n	14024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
   14016:	4a05      	ldr	r2, [pc, #20]	; (1402c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   14018:	9b01      	ldr	r3, [sp, #4]
   1401a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1401e:	2b00      	cmp	r3, #0
   14020:	d100      	bne.n	14024 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14022:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14024:	bf00      	nop
   14026:	b003      	add	sp, #12
   14028:	f85d fb04 	ldr.w	pc, [sp], #4
   1402c:	1fff9410 	.word	0x1fff9410
   14030:	1fff940c 	.word	0x1fff940c

00014034 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
   14034:	b500      	push	{lr}
   14036:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14038:	f7ed fd04 	bl	1a44 <Sys_GetCoreID>
   1403c:	4603      	mov	r3, r0
   1403e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId])
   14040:	4a10      	ldr	r2, [pc, #64]	; (14084 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   14042:	9b01      	ldr	r3, [sp, #4]
   14044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14048:	2b00      	cmp	r3, #0
   1404a:	d10d      	bne.n	14068 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1404c:	f7ec fc58 	bl	900 <Adc_schm_read_msr>
   14050:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14052:	9b00      	ldr	r3, [sp, #0]
   14054:	f003 0301 	and.w	r3, r3, #1
   14058:	2b00      	cmp	r3, #0
   1405a:	d100      	bne.n	1405e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1405c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_66[u32CoreId] = msr;
   1405e:	490a      	ldr	r1, [pc, #40]	; (14088 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x54>)
   14060:	9b01      	ldr	r3, [sp, #4]
   14062:	9a00      	ldr	r2, [sp, #0]
   14064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]++;
   14068:	4a06      	ldr	r2, [pc, #24]	; (14084 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   1406a:	9b01      	ldr	r3, [sp, #4]
   1406c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14070:	1c5a      	adds	r2, r3, #1
   14072:	4904      	ldr	r1, [pc, #16]	; (14084 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   14074:	9b01      	ldr	r3, [sp, #4]
   14076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1407a:	bf00      	nop
   1407c:	b003      	add	sp, #12
   1407e:	f85d fb04 	ldr.w	pc, [sp], #4
   14082:	bf00      	nop
   14084:	1fff9418 	.word	0x1fff9418
   14088:	1fff9414 	.word	0x1fff9414

0001408c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
   1408c:	b500      	push	{lr}
   1408e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14090:	f7ed fcd8 	bl	1a44 <Sys_GetCoreID>
   14094:	4603      	mov	r3, r0
   14096:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]--;
   14098:	4a0d      	ldr	r2, [pc, #52]	; (140d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   1409a:	9b01      	ldr	r3, [sp, #4]
   1409c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140a0:	1e5a      	subs	r2, r3, #1
   140a2:	490b      	ldr	r1, [pc, #44]	; (140d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   140a4:	9b01      	ldr	r3, [sp, #4]
   140a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_66[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]))         /*if interrupts were enabled*/
   140aa:	4a0a      	ldr	r2, [pc, #40]	; (140d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x48>)
   140ac:	9b01      	ldr	r3, [sp, #4]
   140ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140b2:	f003 0301 	and.w	r3, r3, #1
   140b6:	2b00      	cmp	r3, #0
   140b8:	d106      	bne.n	140c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
   140ba:	4a05      	ldr	r2, [pc, #20]	; (140d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   140bc:	9b01      	ldr	r3, [sp, #4]
   140be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140c2:	2b00      	cmp	r3, #0
   140c4:	d100      	bne.n	140c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   140c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   140c8:	bf00      	nop
   140ca:	b003      	add	sp, #12
   140cc:	f85d fb04 	ldr.w	pc, [sp], #4
   140d0:	1fff9418 	.word	0x1fff9418
   140d4:	1fff9414 	.word	0x1fff9414

000140d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
   140d8:	b500      	push	{lr}
   140da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   140dc:	f7ed fcb2 	bl	1a44 <Sys_GetCoreID>
   140e0:	4603      	mov	r3, r0
   140e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId])
   140e4:	4a10      	ldr	r2, [pc, #64]	; (14128 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   140e6:	9b01      	ldr	r3, [sp, #4]
   140e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140ec:	2b00      	cmp	r3, #0
   140ee:	d10d      	bne.n	1410c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   140f0:	f7ec fc06 	bl	900 <Adc_schm_read_msr>
   140f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   140f6:	9b00      	ldr	r3, [sp, #0]
   140f8:	f003 0301 	and.w	r3, r3, #1
   140fc:	2b00      	cmp	r3, #0
   140fe:	d100      	bne.n	14102 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14100:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_67[u32CoreId] = msr;
   14102:	490a      	ldr	r1, [pc, #40]	; (1412c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x54>)
   14104:	9b01      	ldr	r3, [sp, #4]
   14106:	9a00      	ldr	r2, [sp, #0]
   14108:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]++;
   1410c:	4a06      	ldr	r2, [pc, #24]	; (14128 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   1410e:	9b01      	ldr	r3, [sp, #4]
   14110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14114:	1c5a      	adds	r2, r3, #1
   14116:	4904      	ldr	r1, [pc, #16]	; (14128 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   14118:	9b01      	ldr	r3, [sp, #4]
   1411a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1411e:	bf00      	nop
   14120:	b003      	add	sp, #12
   14122:	f85d fb04 	ldr.w	pc, [sp], #4
   14126:	bf00      	nop
   14128:	1fff9420 	.word	0x1fff9420
   1412c:	1fff941c 	.word	0x1fff941c

00014130 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
   14130:	b500      	push	{lr}
   14132:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14134:	f7ed fc86 	bl	1a44 <Sys_GetCoreID>
   14138:	4603      	mov	r3, r0
   1413a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]--;
   1413c:	4a0d      	ldr	r2, [pc, #52]	; (14174 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   1413e:	9b01      	ldr	r3, [sp, #4]
   14140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14144:	1e5a      	subs	r2, r3, #1
   14146:	490b      	ldr	r1, [pc, #44]	; (14174 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   14148:	9b01      	ldr	r3, [sp, #4]
   1414a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_67[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]))         /*if interrupts were enabled*/
   1414e:	4a0a      	ldr	r2, [pc, #40]	; (14178 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x48>)
   14150:	9b01      	ldr	r3, [sp, #4]
   14152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14156:	f003 0301 	and.w	r3, r3, #1
   1415a:	2b00      	cmp	r3, #0
   1415c:	d106      	bne.n	1416c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
   1415e:	4a05      	ldr	r2, [pc, #20]	; (14174 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   14160:	9b01      	ldr	r3, [sp, #4]
   14162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14166:	2b00      	cmp	r3, #0
   14168:	d100      	bne.n	1416c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1416a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1416c:	bf00      	nop
   1416e:	b003      	add	sp, #12
   14170:	f85d fb04 	ldr.w	pc, [sp], #4
   14174:	1fff9420 	.word	0x1fff9420
   14178:	1fff941c 	.word	0x1fff941c

0001417c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
   1417c:	b500      	push	{lr}
   1417e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14180:	f7ed fc60 	bl	1a44 <Sys_GetCoreID>
   14184:	4603      	mov	r3, r0
   14186:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId])
   14188:	4a10      	ldr	r2, [pc, #64]	; (141cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   1418a:	9b01      	ldr	r3, [sp, #4]
   1418c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14190:	2b00      	cmp	r3, #0
   14192:	d10d      	bne.n	141b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14194:	f7ec fbb4 	bl	900 <Adc_schm_read_msr>
   14198:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1419a:	9b00      	ldr	r3, [sp, #0]
   1419c:	f003 0301 	and.w	r3, r3, #1
   141a0:	2b00      	cmp	r3, #0
   141a2:	d100      	bne.n	141a6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   141a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_68[u32CoreId] = msr;
   141a6:	490a      	ldr	r1, [pc, #40]	; (141d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x54>)
   141a8:	9b01      	ldr	r3, [sp, #4]
   141aa:	9a00      	ldr	r2, [sp, #0]
   141ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]++;
   141b0:	4a06      	ldr	r2, [pc, #24]	; (141cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   141b2:	9b01      	ldr	r3, [sp, #4]
   141b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141b8:	1c5a      	adds	r2, r3, #1
   141ba:	4904      	ldr	r1, [pc, #16]	; (141cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   141bc:	9b01      	ldr	r3, [sp, #4]
   141be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   141c2:	bf00      	nop
   141c4:	b003      	add	sp, #12
   141c6:	f85d fb04 	ldr.w	pc, [sp], #4
   141ca:	bf00      	nop
   141cc:	1fff9428 	.word	0x1fff9428
   141d0:	1fff9424 	.word	0x1fff9424

000141d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
   141d4:	b500      	push	{lr}
   141d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   141d8:	f7ed fc34 	bl	1a44 <Sys_GetCoreID>
   141dc:	4603      	mov	r3, r0
   141de:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]--;
   141e0:	4a0d      	ldr	r2, [pc, #52]	; (14218 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   141e2:	9b01      	ldr	r3, [sp, #4]
   141e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141e8:	1e5a      	subs	r2, r3, #1
   141ea:	490b      	ldr	r1, [pc, #44]	; (14218 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   141ec:	9b01      	ldr	r3, [sp, #4]
   141ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_68[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]))         /*if interrupts were enabled*/
   141f2:	4a0a      	ldr	r2, [pc, #40]	; (1421c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x48>)
   141f4:	9b01      	ldr	r3, [sp, #4]
   141f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141fa:	f003 0301 	and.w	r3, r3, #1
   141fe:	2b00      	cmp	r3, #0
   14200:	d106      	bne.n	14210 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
   14202:	4a05      	ldr	r2, [pc, #20]	; (14218 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   14204:	9b01      	ldr	r3, [sp, #4]
   14206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1420a:	2b00      	cmp	r3, #0
   1420c:	d100      	bne.n	14210 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1420e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14210:	bf00      	nop
   14212:	b003      	add	sp, #12
   14214:	f85d fb04 	ldr.w	pc, [sp], #4
   14218:	1fff9428 	.word	0x1fff9428
   1421c:	1fff9424 	.word	0x1fff9424

00014220 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
   14220:	b500      	push	{lr}
   14222:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14224:	f7ed fc0e 	bl	1a44 <Sys_GetCoreID>
   14228:	4603      	mov	r3, r0
   1422a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId])
   1422c:	4a10      	ldr	r2, [pc, #64]	; (14270 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   1422e:	9b01      	ldr	r3, [sp, #4]
   14230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14234:	2b00      	cmp	r3, #0
   14236:	d10d      	bne.n	14254 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14238:	f7ec fb62 	bl	900 <Adc_schm_read_msr>
   1423c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1423e:	9b00      	ldr	r3, [sp, #0]
   14240:	f003 0301 	and.w	r3, r3, #1
   14244:	2b00      	cmp	r3, #0
   14246:	d100      	bne.n	1424a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14248:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_69[u32CoreId] = msr;
   1424a:	490a      	ldr	r1, [pc, #40]	; (14274 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x54>)
   1424c:	9b01      	ldr	r3, [sp, #4]
   1424e:	9a00      	ldr	r2, [sp, #0]
   14250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]++;
   14254:	4a06      	ldr	r2, [pc, #24]	; (14270 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   14256:	9b01      	ldr	r3, [sp, #4]
   14258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1425c:	1c5a      	adds	r2, r3, #1
   1425e:	4904      	ldr	r1, [pc, #16]	; (14270 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   14260:	9b01      	ldr	r3, [sp, #4]
   14262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14266:	bf00      	nop
   14268:	b003      	add	sp, #12
   1426a:	f85d fb04 	ldr.w	pc, [sp], #4
   1426e:	bf00      	nop
   14270:	1fff9430 	.word	0x1fff9430
   14274:	1fff942c 	.word	0x1fff942c

00014278 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
   14278:	b500      	push	{lr}
   1427a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1427c:	f7ed fbe2 	bl	1a44 <Sys_GetCoreID>
   14280:	4603      	mov	r3, r0
   14282:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]--;
   14284:	4a0d      	ldr	r2, [pc, #52]	; (142bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   14286:	9b01      	ldr	r3, [sp, #4]
   14288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1428c:	1e5a      	subs	r2, r3, #1
   1428e:	490b      	ldr	r1, [pc, #44]	; (142bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   14290:	9b01      	ldr	r3, [sp, #4]
   14292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_69[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]))         /*if interrupts were enabled*/
   14296:	4a0a      	ldr	r2, [pc, #40]	; (142c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x48>)
   14298:	9b01      	ldr	r3, [sp, #4]
   1429a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1429e:	f003 0301 	and.w	r3, r3, #1
   142a2:	2b00      	cmp	r3, #0
   142a4:	d106      	bne.n	142b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
   142a6:	4a05      	ldr	r2, [pc, #20]	; (142bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   142a8:	9b01      	ldr	r3, [sp, #4]
   142aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142ae:	2b00      	cmp	r3, #0
   142b0:	d100      	bne.n	142b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   142b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   142b4:	bf00      	nop
   142b6:	b003      	add	sp, #12
   142b8:	f85d fb04 	ldr.w	pc, [sp], #4
   142bc:	1fff9430 	.word	0x1fff9430
   142c0:	1fff942c 	.word	0x1fff942c

000142c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
   142c4:	b500      	push	{lr}
   142c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   142c8:	f7ed fbbc 	bl	1a44 <Sys_GetCoreID>
   142cc:	4603      	mov	r3, r0
   142ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId])
   142d0:	4a10      	ldr	r2, [pc, #64]	; (14314 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   142d2:	9b01      	ldr	r3, [sp, #4]
   142d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142d8:	2b00      	cmp	r3, #0
   142da:	d10d      	bne.n	142f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   142dc:	f7ec fb10 	bl	900 <Adc_schm_read_msr>
   142e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   142e2:	9b00      	ldr	r3, [sp, #0]
   142e4:	f003 0301 	and.w	r3, r3, #1
   142e8:	2b00      	cmp	r3, #0
   142ea:	d100      	bne.n	142ee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   142ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_70[u32CoreId] = msr;
   142ee:	490a      	ldr	r1, [pc, #40]	; (14318 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x54>)
   142f0:	9b01      	ldr	r3, [sp, #4]
   142f2:	9a00      	ldr	r2, [sp, #0]
   142f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]++;
   142f8:	4a06      	ldr	r2, [pc, #24]	; (14314 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   142fa:	9b01      	ldr	r3, [sp, #4]
   142fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14300:	1c5a      	adds	r2, r3, #1
   14302:	4904      	ldr	r1, [pc, #16]	; (14314 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   14304:	9b01      	ldr	r3, [sp, #4]
   14306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1430a:	bf00      	nop
   1430c:	b003      	add	sp, #12
   1430e:	f85d fb04 	ldr.w	pc, [sp], #4
   14312:	bf00      	nop
   14314:	1fff9438 	.word	0x1fff9438
   14318:	1fff9434 	.word	0x1fff9434

0001431c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
   1431c:	b500      	push	{lr}
   1431e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14320:	f7ed fb90 	bl	1a44 <Sys_GetCoreID>
   14324:	4603      	mov	r3, r0
   14326:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]--;
   14328:	4a0d      	ldr	r2, [pc, #52]	; (14360 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   1432a:	9b01      	ldr	r3, [sp, #4]
   1432c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14330:	1e5a      	subs	r2, r3, #1
   14332:	490b      	ldr	r1, [pc, #44]	; (14360 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   14334:	9b01      	ldr	r3, [sp, #4]
   14336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_70[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]))         /*if interrupts were enabled*/
   1433a:	4a0a      	ldr	r2, [pc, #40]	; (14364 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x48>)
   1433c:	9b01      	ldr	r3, [sp, #4]
   1433e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14342:	f003 0301 	and.w	r3, r3, #1
   14346:	2b00      	cmp	r3, #0
   14348:	d106      	bne.n	14358 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
   1434a:	4a05      	ldr	r2, [pc, #20]	; (14360 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   1434c:	9b01      	ldr	r3, [sp, #4]
   1434e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14352:	2b00      	cmp	r3, #0
   14354:	d100      	bne.n	14358 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14356:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14358:	bf00      	nop
   1435a:	b003      	add	sp, #12
   1435c:	f85d fb04 	ldr.w	pc, [sp], #4
   14360:	1fff9438 	.word	0x1fff9438
   14364:	1fff9434 	.word	0x1fff9434

00014368 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
   14368:	b500      	push	{lr}
   1436a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1436c:	f7ed fb6a 	bl	1a44 <Sys_GetCoreID>
   14370:	4603      	mov	r3, r0
   14372:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId])
   14374:	4a10      	ldr	r2, [pc, #64]	; (143b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   14376:	9b01      	ldr	r3, [sp, #4]
   14378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1437c:	2b00      	cmp	r3, #0
   1437e:	d10d      	bne.n	1439c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14380:	f7ec fabe 	bl	900 <Adc_schm_read_msr>
   14384:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14386:	9b00      	ldr	r3, [sp, #0]
   14388:	f003 0301 	and.w	r3, r3, #1
   1438c:	2b00      	cmp	r3, #0
   1438e:	d100      	bne.n	14392 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14390:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_71[u32CoreId] = msr;
   14392:	490a      	ldr	r1, [pc, #40]	; (143bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x54>)
   14394:	9b01      	ldr	r3, [sp, #4]
   14396:	9a00      	ldr	r2, [sp, #0]
   14398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]++;
   1439c:	4a06      	ldr	r2, [pc, #24]	; (143b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   1439e:	9b01      	ldr	r3, [sp, #4]
   143a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143a4:	1c5a      	adds	r2, r3, #1
   143a6:	4904      	ldr	r1, [pc, #16]	; (143b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   143a8:	9b01      	ldr	r3, [sp, #4]
   143aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   143ae:	bf00      	nop
   143b0:	b003      	add	sp, #12
   143b2:	f85d fb04 	ldr.w	pc, [sp], #4
   143b6:	bf00      	nop
   143b8:	1fff9440 	.word	0x1fff9440
   143bc:	1fff943c 	.word	0x1fff943c

000143c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
   143c0:	b500      	push	{lr}
   143c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   143c4:	f7ed fb3e 	bl	1a44 <Sys_GetCoreID>
   143c8:	4603      	mov	r3, r0
   143ca:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]--;
   143cc:	4a0d      	ldr	r2, [pc, #52]	; (14404 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   143ce:	9b01      	ldr	r3, [sp, #4]
   143d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143d4:	1e5a      	subs	r2, r3, #1
   143d6:	490b      	ldr	r1, [pc, #44]	; (14404 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   143d8:	9b01      	ldr	r3, [sp, #4]
   143da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_71[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]))         /*if interrupts were enabled*/
   143de:	4a0a      	ldr	r2, [pc, #40]	; (14408 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x48>)
   143e0:	9b01      	ldr	r3, [sp, #4]
   143e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143e6:	f003 0301 	and.w	r3, r3, #1
   143ea:	2b00      	cmp	r3, #0
   143ec:	d106      	bne.n	143fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
   143ee:	4a05      	ldr	r2, [pc, #20]	; (14404 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   143f0:	9b01      	ldr	r3, [sp, #4]
   143f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143f6:	2b00      	cmp	r3, #0
   143f8:	d100      	bne.n	143fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   143fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   143fc:	bf00      	nop
   143fe:	b003      	add	sp, #12
   14400:	f85d fb04 	ldr.w	pc, [sp], #4
   14404:	1fff9440 	.word	0x1fff9440
   14408:	1fff943c 	.word	0x1fff943c

0001440c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
   1440c:	b500      	push	{lr}
   1440e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14410:	f7ed fb18 	bl	1a44 <Sys_GetCoreID>
   14414:	4603      	mov	r3, r0
   14416:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId])
   14418:	4a10      	ldr	r2, [pc, #64]	; (1445c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   1441a:	9b01      	ldr	r3, [sp, #4]
   1441c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14420:	2b00      	cmp	r3, #0
   14422:	d10d      	bne.n	14440 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14424:	f7ec fa6c 	bl	900 <Adc_schm_read_msr>
   14428:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1442a:	9b00      	ldr	r3, [sp, #0]
   1442c:	f003 0301 	and.w	r3, r3, #1
   14430:	2b00      	cmp	r3, #0
   14432:	d100      	bne.n	14436 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14434:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_72[u32CoreId] = msr;
   14436:	490a      	ldr	r1, [pc, #40]	; (14460 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x54>)
   14438:	9b01      	ldr	r3, [sp, #4]
   1443a:	9a00      	ldr	r2, [sp, #0]
   1443c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]++;
   14440:	4a06      	ldr	r2, [pc, #24]	; (1445c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   14442:	9b01      	ldr	r3, [sp, #4]
   14444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14448:	1c5a      	adds	r2, r3, #1
   1444a:	4904      	ldr	r1, [pc, #16]	; (1445c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   1444c:	9b01      	ldr	r3, [sp, #4]
   1444e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14452:	bf00      	nop
   14454:	b003      	add	sp, #12
   14456:	f85d fb04 	ldr.w	pc, [sp], #4
   1445a:	bf00      	nop
   1445c:	1fff9448 	.word	0x1fff9448
   14460:	1fff9444 	.word	0x1fff9444

00014464 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
   14464:	b500      	push	{lr}
   14466:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14468:	f7ed faec 	bl	1a44 <Sys_GetCoreID>
   1446c:	4603      	mov	r3, r0
   1446e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]--;
   14470:	4a0d      	ldr	r2, [pc, #52]	; (144a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   14472:	9b01      	ldr	r3, [sp, #4]
   14474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14478:	1e5a      	subs	r2, r3, #1
   1447a:	490b      	ldr	r1, [pc, #44]	; (144a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   1447c:	9b01      	ldr	r3, [sp, #4]
   1447e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_72[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]))         /*if interrupts were enabled*/
   14482:	4a0a      	ldr	r2, [pc, #40]	; (144ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x48>)
   14484:	9b01      	ldr	r3, [sp, #4]
   14486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1448a:	f003 0301 	and.w	r3, r3, #1
   1448e:	2b00      	cmp	r3, #0
   14490:	d106      	bne.n	144a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
   14492:	4a05      	ldr	r2, [pc, #20]	; (144a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   14494:	9b01      	ldr	r3, [sp, #4]
   14496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1449a:	2b00      	cmp	r3, #0
   1449c:	d100      	bne.n	144a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1449e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   144a0:	bf00      	nop
   144a2:	b003      	add	sp, #12
   144a4:	f85d fb04 	ldr.w	pc, [sp], #4
   144a8:	1fff9448 	.word	0x1fff9448
   144ac:	1fff9444 	.word	0x1fff9444

000144b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
   144b0:	b500      	push	{lr}
   144b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   144b4:	f7ed fac6 	bl	1a44 <Sys_GetCoreID>
   144b8:	4603      	mov	r3, r0
   144ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId])
   144bc:	4a10      	ldr	r2, [pc, #64]	; (14500 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   144be:	9b01      	ldr	r3, [sp, #4]
   144c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144c4:	2b00      	cmp	r3, #0
   144c6:	d10d      	bne.n	144e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   144c8:	f7ec fa1a 	bl	900 <Adc_schm_read_msr>
   144cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   144ce:	9b00      	ldr	r3, [sp, #0]
   144d0:	f003 0301 	and.w	r3, r3, #1
   144d4:	2b00      	cmp	r3, #0
   144d6:	d100      	bne.n	144da <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   144d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_73[u32CoreId] = msr;
   144da:	490a      	ldr	r1, [pc, #40]	; (14504 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x54>)
   144dc:	9b01      	ldr	r3, [sp, #4]
   144de:	9a00      	ldr	r2, [sp, #0]
   144e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]++;
   144e4:	4a06      	ldr	r2, [pc, #24]	; (14500 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   144e6:	9b01      	ldr	r3, [sp, #4]
   144e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144ec:	1c5a      	adds	r2, r3, #1
   144ee:	4904      	ldr	r1, [pc, #16]	; (14500 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   144f0:	9b01      	ldr	r3, [sp, #4]
   144f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   144f6:	bf00      	nop
   144f8:	b003      	add	sp, #12
   144fa:	f85d fb04 	ldr.w	pc, [sp], #4
   144fe:	bf00      	nop
   14500:	1fff9450 	.word	0x1fff9450
   14504:	1fff944c 	.word	0x1fff944c

00014508 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
   14508:	b500      	push	{lr}
   1450a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1450c:	f7ed fa9a 	bl	1a44 <Sys_GetCoreID>
   14510:	4603      	mov	r3, r0
   14512:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]--;
   14514:	4a0d      	ldr	r2, [pc, #52]	; (1454c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   14516:	9b01      	ldr	r3, [sp, #4]
   14518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1451c:	1e5a      	subs	r2, r3, #1
   1451e:	490b      	ldr	r1, [pc, #44]	; (1454c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   14520:	9b01      	ldr	r3, [sp, #4]
   14522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_73[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]))         /*if interrupts were enabled*/
   14526:	4a0a      	ldr	r2, [pc, #40]	; (14550 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x48>)
   14528:	9b01      	ldr	r3, [sp, #4]
   1452a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1452e:	f003 0301 	and.w	r3, r3, #1
   14532:	2b00      	cmp	r3, #0
   14534:	d106      	bne.n	14544 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
   14536:	4a05      	ldr	r2, [pc, #20]	; (1454c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   14538:	9b01      	ldr	r3, [sp, #4]
   1453a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1453e:	2b00      	cmp	r3, #0
   14540:	d100      	bne.n	14544 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14542:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14544:	bf00      	nop
   14546:	b003      	add	sp, #12
   14548:	f85d fb04 	ldr.w	pc, [sp], #4
   1454c:	1fff9450 	.word	0x1fff9450
   14550:	1fff944c 	.word	0x1fff944c

00014554 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
   14554:	b500      	push	{lr}
   14556:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14558:	f7ed fa74 	bl	1a44 <Sys_GetCoreID>
   1455c:	4603      	mov	r3, r0
   1455e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId])
   14560:	4a10      	ldr	r2, [pc, #64]	; (145a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   14562:	9b01      	ldr	r3, [sp, #4]
   14564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14568:	2b00      	cmp	r3, #0
   1456a:	d10d      	bne.n	14588 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1456c:	f7ec f9c8 	bl	900 <Adc_schm_read_msr>
   14570:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14572:	9b00      	ldr	r3, [sp, #0]
   14574:	f003 0301 	and.w	r3, r3, #1
   14578:	2b00      	cmp	r3, #0
   1457a:	d100      	bne.n	1457e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1457c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_74[u32CoreId] = msr;
   1457e:	490a      	ldr	r1, [pc, #40]	; (145a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x54>)
   14580:	9b01      	ldr	r3, [sp, #4]
   14582:	9a00      	ldr	r2, [sp, #0]
   14584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]++;
   14588:	4a06      	ldr	r2, [pc, #24]	; (145a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   1458a:	9b01      	ldr	r3, [sp, #4]
   1458c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14590:	1c5a      	adds	r2, r3, #1
   14592:	4904      	ldr	r1, [pc, #16]	; (145a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   14594:	9b01      	ldr	r3, [sp, #4]
   14596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1459a:	bf00      	nop
   1459c:	b003      	add	sp, #12
   1459e:	f85d fb04 	ldr.w	pc, [sp], #4
   145a2:	bf00      	nop
   145a4:	1fff9458 	.word	0x1fff9458
   145a8:	1fff9454 	.word	0x1fff9454

000145ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
   145ac:	b500      	push	{lr}
   145ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   145b0:	f7ed fa48 	bl	1a44 <Sys_GetCoreID>
   145b4:	4603      	mov	r3, r0
   145b6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]--;
   145b8:	4a0d      	ldr	r2, [pc, #52]	; (145f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   145ba:	9b01      	ldr	r3, [sp, #4]
   145bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145c0:	1e5a      	subs	r2, r3, #1
   145c2:	490b      	ldr	r1, [pc, #44]	; (145f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   145c4:	9b01      	ldr	r3, [sp, #4]
   145c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_74[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]))         /*if interrupts were enabled*/
   145ca:	4a0a      	ldr	r2, [pc, #40]	; (145f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x48>)
   145cc:	9b01      	ldr	r3, [sp, #4]
   145ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145d2:	f003 0301 	and.w	r3, r3, #1
   145d6:	2b00      	cmp	r3, #0
   145d8:	d106      	bne.n	145e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
   145da:	4a05      	ldr	r2, [pc, #20]	; (145f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   145dc:	9b01      	ldr	r3, [sp, #4]
   145de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145e2:	2b00      	cmp	r3, #0
   145e4:	d100      	bne.n	145e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   145e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   145e8:	bf00      	nop
   145ea:	b003      	add	sp, #12
   145ec:	f85d fb04 	ldr.w	pc, [sp], #4
   145f0:	1fff9458 	.word	0x1fff9458
   145f4:	1fff9454 	.word	0x1fff9454

000145f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
   145f8:	b500      	push	{lr}
   145fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   145fc:	f7ed fa22 	bl	1a44 <Sys_GetCoreID>
   14600:	4603      	mov	r3, r0
   14602:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId])
   14604:	4a10      	ldr	r2, [pc, #64]	; (14648 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   14606:	9b01      	ldr	r3, [sp, #4]
   14608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1460c:	2b00      	cmp	r3, #0
   1460e:	d10d      	bne.n	1462c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14610:	f7ec f976 	bl	900 <Adc_schm_read_msr>
   14614:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14616:	9b00      	ldr	r3, [sp, #0]
   14618:	f003 0301 	and.w	r3, r3, #1
   1461c:	2b00      	cmp	r3, #0
   1461e:	d100      	bne.n	14622 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14620:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_75[u32CoreId] = msr;
   14622:	490a      	ldr	r1, [pc, #40]	; (1464c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x54>)
   14624:	9b01      	ldr	r3, [sp, #4]
   14626:	9a00      	ldr	r2, [sp, #0]
   14628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]++;
   1462c:	4a06      	ldr	r2, [pc, #24]	; (14648 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   1462e:	9b01      	ldr	r3, [sp, #4]
   14630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14634:	1c5a      	adds	r2, r3, #1
   14636:	4904      	ldr	r1, [pc, #16]	; (14648 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   14638:	9b01      	ldr	r3, [sp, #4]
   1463a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1463e:	bf00      	nop
   14640:	b003      	add	sp, #12
   14642:	f85d fb04 	ldr.w	pc, [sp], #4
   14646:	bf00      	nop
   14648:	1fff9460 	.word	0x1fff9460
   1464c:	1fff945c 	.word	0x1fff945c

00014650 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
   14650:	b500      	push	{lr}
   14652:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14654:	f7ed f9f6 	bl	1a44 <Sys_GetCoreID>
   14658:	4603      	mov	r3, r0
   1465a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]--;
   1465c:	4a0d      	ldr	r2, [pc, #52]	; (14694 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   1465e:	9b01      	ldr	r3, [sp, #4]
   14660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14664:	1e5a      	subs	r2, r3, #1
   14666:	490b      	ldr	r1, [pc, #44]	; (14694 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   14668:	9b01      	ldr	r3, [sp, #4]
   1466a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_75[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]))         /*if interrupts were enabled*/
   1466e:	4a0a      	ldr	r2, [pc, #40]	; (14698 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x48>)
   14670:	9b01      	ldr	r3, [sp, #4]
   14672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14676:	f003 0301 	and.w	r3, r3, #1
   1467a:	2b00      	cmp	r3, #0
   1467c:	d106      	bne.n	1468c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
   1467e:	4a05      	ldr	r2, [pc, #20]	; (14694 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   14680:	9b01      	ldr	r3, [sp, #4]
   14682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14686:	2b00      	cmp	r3, #0
   14688:	d100      	bne.n	1468c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1468a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1468c:	bf00      	nop
   1468e:	b003      	add	sp, #12
   14690:	f85d fb04 	ldr.w	pc, [sp], #4
   14694:	1fff9460 	.word	0x1fff9460
   14698:	1fff945c 	.word	0x1fff945c

0001469c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
   1469c:	b500      	push	{lr}
   1469e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   146a0:	f7ed f9d0 	bl	1a44 <Sys_GetCoreID>
   146a4:	4603      	mov	r3, r0
   146a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId])
   146a8:	4a10      	ldr	r2, [pc, #64]	; (146ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   146aa:	9b01      	ldr	r3, [sp, #4]
   146ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146b0:	2b00      	cmp	r3, #0
   146b2:	d10d      	bne.n	146d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   146b4:	f7ec f924 	bl	900 <Adc_schm_read_msr>
   146b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   146ba:	9b00      	ldr	r3, [sp, #0]
   146bc:	f003 0301 	and.w	r3, r3, #1
   146c0:	2b00      	cmp	r3, #0
   146c2:	d100      	bne.n	146c6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   146c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_76[u32CoreId] = msr;
   146c6:	490a      	ldr	r1, [pc, #40]	; (146f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x54>)
   146c8:	9b01      	ldr	r3, [sp, #4]
   146ca:	9a00      	ldr	r2, [sp, #0]
   146cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]++;
   146d0:	4a06      	ldr	r2, [pc, #24]	; (146ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   146d2:	9b01      	ldr	r3, [sp, #4]
   146d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146d8:	1c5a      	adds	r2, r3, #1
   146da:	4904      	ldr	r1, [pc, #16]	; (146ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   146dc:	9b01      	ldr	r3, [sp, #4]
   146de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   146e2:	bf00      	nop
   146e4:	b003      	add	sp, #12
   146e6:	f85d fb04 	ldr.w	pc, [sp], #4
   146ea:	bf00      	nop
   146ec:	1fff9468 	.word	0x1fff9468
   146f0:	1fff9464 	.word	0x1fff9464

000146f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
   146f4:	b500      	push	{lr}
   146f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   146f8:	f7ed f9a4 	bl	1a44 <Sys_GetCoreID>
   146fc:	4603      	mov	r3, r0
   146fe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]--;
   14700:	4a0d      	ldr	r2, [pc, #52]	; (14738 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   14702:	9b01      	ldr	r3, [sp, #4]
   14704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14708:	1e5a      	subs	r2, r3, #1
   1470a:	490b      	ldr	r1, [pc, #44]	; (14738 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   1470c:	9b01      	ldr	r3, [sp, #4]
   1470e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_76[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]))         /*if interrupts were enabled*/
   14712:	4a0a      	ldr	r2, [pc, #40]	; (1473c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x48>)
   14714:	9b01      	ldr	r3, [sp, #4]
   14716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1471a:	f003 0301 	and.w	r3, r3, #1
   1471e:	2b00      	cmp	r3, #0
   14720:	d106      	bne.n	14730 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
   14722:	4a05      	ldr	r2, [pc, #20]	; (14738 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   14724:	9b01      	ldr	r3, [sp, #4]
   14726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1472a:	2b00      	cmp	r3, #0
   1472c:	d100      	bne.n	14730 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1472e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14730:	bf00      	nop
   14732:	b003      	add	sp, #12
   14734:	f85d fb04 	ldr.w	pc, [sp], #4
   14738:	1fff9468 	.word	0x1fff9468
   1473c:	1fff9464 	.word	0x1fff9464

00014740 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
   14740:	b500      	push	{lr}
   14742:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14744:	f7ed f97e 	bl	1a44 <Sys_GetCoreID>
   14748:	4603      	mov	r3, r0
   1474a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId])
   1474c:	4a10      	ldr	r2, [pc, #64]	; (14790 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   1474e:	9b01      	ldr	r3, [sp, #4]
   14750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14754:	2b00      	cmp	r3, #0
   14756:	d10d      	bne.n	14774 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14758:	f7ec f8d2 	bl	900 <Adc_schm_read_msr>
   1475c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1475e:	9b00      	ldr	r3, [sp, #0]
   14760:	f003 0301 	and.w	r3, r3, #1
   14764:	2b00      	cmp	r3, #0
   14766:	d100      	bne.n	1476a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14768:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_77[u32CoreId] = msr;
   1476a:	490a      	ldr	r1, [pc, #40]	; (14794 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x54>)
   1476c:	9b01      	ldr	r3, [sp, #4]
   1476e:	9a00      	ldr	r2, [sp, #0]
   14770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]++;
   14774:	4a06      	ldr	r2, [pc, #24]	; (14790 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   14776:	9b01      	ldr	r3, [sp, #4]
   14778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1477c:	1c5a      	adds	r2, r3, #1
   1477e:	4904      	ldr	r1, [pc, #16]	; (14790 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   14780:	9b01      	ldr	r3, [sp, #4]
   14782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14786:	bf00      	nop
   14788:	b003      	add	sp, #12
   1478a:	f85d fb04 	ldr.w	pc, [sp], #4
   1478e:	bf00      	nop
   14790:	1fff9470 	.word	0x1fff9470
   14794:	1fff946c 	.word	0x1fff946c

00014798 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
   14798:	b500      	push	{lr}
   1479a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1479c:	f7ed f952 	bl	1a44 <Sys_GetCoreID>
   147a0:	4603      	mov	r3, r0
   147a2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]--;
   147a4:	4a0d      	ldr	r2, [pc, #52]	; (147dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   147a6:	9b01      	ldr	r3, [sp, #4]
   147a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147ac:	1e5a      	subs	r2, r3, #1
   147ae:	490b      	ldr	r1, [pc, #44]	; (147dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   147b0:	9b01      	ldr	r3, [sp, #4]
   147b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_77[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]))         /*if interrupts were enabled*/
   147b6:	4a0a      	ldr	r2, [pc, #40]	; (147e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x48>)
   147b8:	9b01      	ldr	r3, [sp, #4]
   147ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147be:	f003 0301 	and.w	r3, r3, #1
   147c2:	2b00      	cmp	r3, #0
   147c4:	d106      	bne.n	147d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
   147c6:	4a05      	ldr	r2, [pc, #20]	; (147dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   147c8:	9b01      	ldr	r3, [sp, #4]
   147ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147ce:	2b00      	cmp	r3, #0
   147d0:	d100      	bne.n	147d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   147d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   147d4:	bf00      	nop
   147d6:	b003      	add	sp, #12
   147d8:	f85d fb04 	ldr.w	pc, [sp], #4
   147dc:	1fff9470 	.word	0x1fff9470
   147e0:	1fff946c 	.word	0x1fff946c

000147e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
   147e4:	b500      	push	{lr}
   147e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   147e8:	f7ed f92c 	bl	1a44 <Sys_GetCoreID>
   147ec:	4603      	mov	r3, r0
   147ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId])
   147f0:	4a10      	ldr	r2, [pc, #64]	; (14834 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   147f2:	9b01      	ldr	r3, [sp, #4]
   147f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147f8:	2b00      	cmp	r3, #0
   147fa:	d10d      	bne.n	14818 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   147fc:	f7ec f880 	bl	900 <Adc_schm_read_msr>
   14800:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14802:	9b00      	ldr	r3, [sp, #0]
   14804:	f003 0301 	and.w	r3, r3, #1
   14808:	2b00      	cmp	r3, #0
   1480a:	d100      	bne.n	1480e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1480c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_78[u32CoreId] = msr;
   1480e:	490a      	ldr	r1, [pc, #40]	; (14838 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x54>)
   14810:	9b01      	ldr	r3, [sp, #4]
   14812:	9a00      	ldr	r2, [sp, #0]
   14814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]++;
   14818:	4a06      	ldr	r2, [pc, #24]	; (14834 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   1481a:	9b01      	ldr	r3, [sp, #4]
   1481c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14820:	1c5a      	adds	r2, r3, #1
   14822:	4904      	ldr	r1, [pc, #16]	; (14834 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   14824:	9b01      	ldr	r3, [sp, #4]
   14826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1482a:	bf00      	nop
   1482c:	b003      	add	sp, #12
   1482e:	f85d fb04 	ldr.w	pc, [sp], #4
   14832:	bf00      	nop
   14834:	1fff9478 	.word	0x1fff9478
   14838:	1fff9474 	.word	0x1fff9474

0001483c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
   1483c:	b500      	push	{lr}
   1483e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14840:	f7ed f900 	bl	1a44 <Sys_GetCoreID>
   14844:	4603      	mov	r3, r0
   14846:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]--;
   14848:	4a0d      	ldr	r2, [pc, #52]	; (14880 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   1484a:	9b01      	ldr	r3, [sp, #4]
   1484c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14850:	1e5a      	subs	r2, r3, #1
   14852:	490b      	ldr	r1, [pc, #44]	; (14880 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   14854:	9b01      	ldr	r3, [sp, #4]
   14856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_78[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]))         /*if interrupts were enabled*/
   1485a:	4a0a      	ldr	r2, [pc, #40]	; (14884 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x48>)
   1485c:	9b01      	ldr	r3, [sp, #4]
   1485e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14862:	f003 0301 	and.w	r3, r3, #1
   14866:	2b00      	cmp	r3, #0
   14868:	d106      	bne.n	14878 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
   1486a:	4a05      	ldr	r2, [pc, #20]	; (14880 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   1486c:	9b01      	ldr	r3, [sp, #4]
   1486e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14872:	2b00      	cmp	r3, #0
   14874:	d100      	bne.n	14878 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14876:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14878:	bf00      	nop
   1487a:	b003      	add	sp, #12
   1487c:	f85d fb04 	ldr.w	pc, [sp], #4
   14880:	1fff9478 	.word	0x1fff9478
   14884:	1fff9474 	.word	0x1fff9474

00014888 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
   14888:	b500      	push	{lr}
   1488a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1488c:	f7ed f8da 	bl	1a44 <Sys_GetCoreID>
   14890:	4603      	mov	r3, r0
   14892:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId])
   14894:	4a10      	ldr	r2, [pc, #64]	; (148d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   14896:	9b01      	ldr	r3, [sp, #4]
   14898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1489c:	2b00      	cmp	r3, #0
   1489e:	d10d      	bne.n	148bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   148a0:	f7ec f82e 	bl	900 <Adc_schm_read_msr>
   148a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   148a6:	9b00      	ldr	r3, [sp, #0]
   148a8:	f003 0301 	and.w	r3, r3, #1
   148ac:	2b00      	cmp	r3, #0
   148ae:	d100      	bne.n	148b2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   148b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_79[u32CoreId] = msr;
   148b2:	490a      	ldr	r1, [pc, #40]	; (148dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x54>)
   148b4:	9b01      	ldr	r3, [sp, #4]
   148b6:	9a00      	ldr	r2, [sp, #0]
   148b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]++;
   148bc:	4a06      	ldr	r2, [pc, #24]	; (148d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   148be:	9b01      	ldr	r3, [sp, #4]
   148c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148c4:	1c5a      	adds	r2, r3, #1
   148c6:	4904      	ldr	r1, [pc, #16]	; (148d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   148c8:	9b01      	ldr	r3, [sp, #4]
   148ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   148ce:	bf00      	nop
   148d0:	b003      	add	sp, #12
   148d2:	f85d fb04 	ldr.w	pc, [sp], #4
   148d6:	bf00      	nop
   148d8:	1fff9480 	.word	0x1fff9480
   148dc:	1fff947c 	.word	0x1fff947c

000148e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
   148e0:	b500      	push	{lr}
   148e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   148e4:	f7ed f8ae 	bl	1a44 <Sys_GetCoreID>
   148e8:	4603      	mov	r3, r0
   148ea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]--;
   148ec:	4a0d      	ldr	r2, [pc, #52]	; (14924 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   148ee:	9b01      	ldr	r3, [sp, #4]
   148f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148f4:	1e5a      	subs	r2, r3, #1
   148f6:	490b      	ldr	r1, [pc, #44]	; (14924 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   148f8:	9b01      	ldr	r3, [sp, #4]
   148fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_79[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]))         /*if interrupts were enabled*/
   148fe:	4a0a      	ldr	r2, [pc, #40]	; (14928 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x48>)
   14900:	9b01      	ldr	r3, [sp, #4]
   14902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14906:	f003 0301 	and.w	r3, r3, #1
   1490a:	2b00      	cmp	r3, #0
   1490c:	d106      	bne.n	1491c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
   1490e:	4a05      	ldr	r2, [pc, #20]	; (14924 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   14910:	9b01      	ldr	r3, [sp, #4]
   14912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14916:	2b00      	cmp	r3, #0
   14918:	d100      	bne.n	1491c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1491a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1491c:	bf00      	nop
   1491e:	b003      	add	sp, #12
   14920:	f85d fb04 	ldr.w	pc, [sp], #4
   14924:	1fff9480 	.word	0x1fff9480
   14928:	1fff947c 	.word	0x1fff947c

0001492c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
   1492c:	b500      	push	{lr}
   1492e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14930:	f7ed f888 	bl	1a44 <Sys_GetCoreID>
   14934:	4603      	mov	r3, r0
   14936:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId])
   14938:	4a10      	ldr	r2, [pc, #64]	; (1497c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   1493a:	9b01      	ldr	r3, [sp, #4]
   1493c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14940:	2b00      	cmp	r3, #0
   14942:	d10d      	bne.n	14960 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14944:	f7eb ffdc 	bl	900 <Adc_schm_read_msr>
   14948:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1494a:	9b00      	ldr	r3, [sp, #0]
   1494c:	f003 0301 	and.w	r3, r3, #1
   14950:	2b00      	cmp	r3, #0
   14952:	d100      	bne.n	14956 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14954:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_80[u32CoreId] = msr;
   14956:	490a      	ldr	r1, [pc, #40]	; (14980 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x54>)
   14958:	9b01      	ldr	r3, [sp, #4]
   1495a:	9a00      	ldr	r2, [sp, #0]
   1495c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]++;
   14960:	4a06      	ldr	r2, [pc, #24]	; (1497c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   14962:	9b01      	ldr	r3, [sp, #4]
   14964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14968:	1c5a      	adds	r2, r3, #1
   1496a:	4904      	ldr	r1, [pc, #16]	; (1497c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   1496c:	9b01      	ldr	r3, [sp, #4]
   1496e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14972:	bf00      	nop
   14974:	b003      	add	sp, #12
   14976:	f85d fb04 	ldr.w	pc, [sp], #4
   1497a:	bf00      	nop
   1497c:	1fff9488 	.word	0x1fff9488
   14980:	1fff9484 	.word	0x1fff9484

00014984 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
   14984:	b500      	push	{lr}
   14986:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14988:	f7ed f85c 	bl	1a44 <Sys_GetCoreID>
   1498c:	4603      	mov	r3, r0
   1498e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]--;
   14990:	4a0d      	ldr	r2, [pc, #52]	; (149c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   14992:	9b01      	ldr	r3, [sp, #4]
   14994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14998:	1e5a      	subs	r2, r3, #1
   1499a:	490b      	ldr	r1, [pc, #44]	; (149c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   1499c:	9b01      	ldr	r3, [sp, #4]
   1499e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_80[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]))         /*if interrupts were enabled*/
   149a2:	4a0a      	ldr	r2, [pc, #40]	; (149cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x48>)
   149a4:	9b01      	ldr	r3, [sp, #4]
   149a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149aa:	f003 0301 	and.w	r3, r3, #1
   149ae:	2b00      	cmp	r3, #0
   149b0:	d106      	bne.n	149c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
   149b2:	4a05      	ldr	r2, [pc, #20]	; (149c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   149b4:	9b01      	ldr	r3, [sp, #4]
   149b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149ba:	2b00      	cmp	r3, #0
   149bc:	d100      	bne.n	149c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   149be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   149c0:	bf00      	nop
   149c2:	b003      	add	sp, #12
   149c4:	f85d fb04 	ldr.w	pc, [sp], #4
   149c8:	1fff9488 	.word	0x1fff9488
   149cc:	1fff9484 	.word	0x1fff9484

000149d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
   149d0:	b500      	push	{lr}
   149d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   149d4:	f7ed f836 	bl	1a44 <Sys_GetCoreID>
   149d8:	4603      	mov	r3, r0
   149da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId])
   149dc:	4a10      	ldr	r2, [pc, #64]	; (14a20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   149de:	9b01      	ldr	r3, [sp, #4]
   149e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149e4:	2b00      	cmp	r3, #0
   149e6:	d10d      	bne.n	14a04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   149e8:	f7eb ff8a 	bl	900 <Adc_schm_read_msr>
   149ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   149ee:	9b00      	ldr	r3, [sp, #0]
   149f0:	f003 0301 	and.w	r3, r3, #1
   149f4:	2b00      	cmp	r3, #0
   149f6:	d100      	bne.n	149fa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   149f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_81[u32CoreId] = msr;
   149fa:	490a      	ldr	r1, [pc, #40]	; (14a24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x54>)
   149fc:	9b01      	ldr	r3, [sp, #4]
   149fe:	9a00      	ldr	r2, [sp, #0]
   14a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]++;
   14a04:	4a06      	ldr	r2, [pc, #24]	; (14a20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   14a06:	9b01      	ldr	r3, [sp, #4]
   14a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a0c:	1c5a      	adds	r2, r3, #1
   14a0e:	4904      	ldr	r1, [pc, #16]	; (14a20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   14a10:	9b01      	ldr	r3, [sp, #4]
   14a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14a16:	bf00      	nop
   14a18:	b003      	add	sp, #12
   14a1a:	f85d fb04 	ldr.w	pc, [sp], #4
   14a1e:	bf00      	nop
   14a20:	1fff9490 	.word	0x1fff9490
   14a24:	1fff948c 	.word	0x1fff948c

00014a28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
   14a28:	b500      	push	{lr}
   14a2a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14a2c:	f7ed f80a 	bl	1a44 <Sys_GetCoreID>
   14a30:	4603      	mov	r3, r0
   14a32:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]--;
   14a34:	4a0d      	ldr	r2, [pc, #52]	; (14a6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   14a36:	9b01      	ldr	r3, [sp, #4]
   14a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a3c:	1e5a      	subs	r2, r3, #1
   14a3e:	490b      	ldr	r1, [pc, #44]	; (14a6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   14a40:	9b01      	ldr	r3, [sp, #4]
   14a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_81[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]))         /*if interrupts were enabled*/
   14a46:	4a0a      	ldr	r2, [pc, #40]	; (14a70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x48>)
   14a48:	9b01      	ldr	r3, [sp, #4]
   14a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a4e:	f003 0301 	and.w	r3, r3, #1
   14a52:	2b00      	cmp	r3, #0
   14a54:	d106      	bne.n	14a64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
   14a56:	4a05      	ldr	r2, [pc, #20]	; (14a6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   14a58:	9b01      	ldr	r3, [sp, #4]
   14a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a5e:	2b00      	cmp	r3, #0
   14a60:	d100      	bne.n	14a64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14a62:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14a64:	bf00      	nop
   14a66:	b003      	add	sp, #12
   14a68:	f85d fb04 	ldr.w	pc, [sp], #4
   14a6c:	1fff9490 	.word	0x1fff9490
   14a70:	1fff948c 	.word	0x1fff948c

00014a74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
   14a74:	b500      	push	{lr}
   14a76:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14a78:	f7ec ffe4 	bl	1a44 <Sys_GetCoreID>
   14a7c:	4603      	mov	r3, r0
   14a7e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId])
   14a80:	4a10      	ldr	r2, [pc, #64]	; (14ac4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   14a82:	9b01      	ldr	r3, [sp, #4]
   14a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a88:	2b00      	cmp	r3, #0
   14a8a:	d10d      	bne.n	14aa8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14a8c:	f7eb ff38 	bl	900 <Adc_schm_read_msr>
   14a90:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14a92:	9b00      	ldr	r3, [sp, #0]
   14a94:	f003 0301 	and.w	r3, r3, #1
   14a98:	2b00      	cmp	r3, #0
   14a9a:	d100      	bne.n	14a9e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14a9c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_82[u32CoreId] = msr;
   14a9e:	490a      	ldr	r1, [pc, #40]	; (14ac8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x54>)
   14aa0:	9b01      	ldr	r3, [sp, #4]
   14aa2:	9a00      	ldr	r2, [sp, #0]
   14aa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]++;
   14aa8:	4a06      	ldr	r2, [pc, #24]	; (14ac4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   14aaa:	9b01      	ldr	r3, [sp, #4]
   14aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ab0:	1c5a      	adds	r2, r3, #1
   14ab2:	4904      	ldr	r1, [pc, #16]	; (14ac4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   14ab4:	9b01      	ldr	r3, [sp, #4]
   14ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14aba:	bf00      	nop
   14abc:	b003      	add	sp, #12
   14abe:	f85d fb04 	ldr.w	pc, [sp], #4
   14ac2:	bf00      	nop
   14ac4:	1fff9498 	.word	0x1fff9498
   14ac8:	1fff9494 	.word	0x1fff9494

00014acc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
   14acc:	b500      	push	{lr}
   14ace:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14ad0:	f7ec ffb8 	bl	1a44 <Sys_GetCoreID>
   14ad4:	4603      	mov	r3, r0
   14ad6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]--;
   14ad8:	4a0d      	ldr	r2, [pc, #52]	; (14b10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   14ada:	9b01      	ldr	r3, [sp, #4]
   14adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ae0:	1e5a      	subs	r2, r3, #1
   14ae2:	490b      	ldr	r1, [pc, #44]	; (14b10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   14ae4:	9b01      	ldr	r3, [sp, #4]
   14ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_82[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]))         /*if interrupts were enabled*/
   14aea:	4a0a      	ldr	r2, [pc, #40]	; (14b14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x48>)
   14aec:	9b01      	ldr	r3, [sp, #4]
   14aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14af2:	f003 0301 	and.w	r3, r3, #1
   14af6:	2b00      	cmp	r3, #0
   14af8:	d106      	bne.n	14b08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
   14afa:	4a05      	ldr	r2, [pc, #20]	; (14b10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   14afc:	9b01      	ldr	r3, [sp, #4]
   14afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b02:	2b00      	cmp	r3, #0
   14b04:	d100      	bne.n	14b08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14b06:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14b08:	bf00      	nop
   14b0a:	b003      	add	sp, #12
   14b0c:	f85d fb04 	ldr.w	pc, [sp], #4
   14b10:	1fff9498 	.word	0x1fff9498
   14b14:	1fff9494 	.word	0x1fff9494

00014b18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
   14b18:	b500      	push	{lr}
   14b1a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14b1c:	f7ec ff92 	bl	1a44 <Sys_GetCoreID>
   14b20:	4603      	mov	r3, r0
   14b22:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId])
   14b24:	4a10      	ldr	r2, [pc, #64]	; (14b68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   14b26:	9b01      	ldr	r3, [sp, #4]
   14b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b2c:	2b00      	cmp	r3, #0
   14b2e:	d10d      	bne.n	14b4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14b30:	f7eb fee6 	bl	900 <Adc_schm_read_msr>
   14b34:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14b36:	9b00      	ldr	r3, [sp, #0]
   14b38:	f003 0301 	and.w	r3, r3, #1
   14b3c:	2b00      	cmp	r3, #0
   14b3e:	d100      	bne.n	14b42 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14b40:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_83[u32CoreId] = msr;
   14b42:	490a      	ldr	r1, [pc, #40]	; (14b6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x54>)
   14b44:	9b01      	ldr	r3, [sp, #4]
   14b46:	9a00      	ldr	r2, [sp, #0]
   14b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]++;
   14b4c:	4a06      	ldr	r2, [pc, #24]	; (14b68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   14b4e:	9b01      	ldr	r3, [sp, #4]
   14b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b54:	1c5a      	adds	r2, r3, #1
   14b56:	4904      	ldr	r1, [pc, #16]	; (14b68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   14b58:	9b01      	ldr	r3, [sp, #4]
   14b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14b5e:	bf00      	nop
   14b60:	b003      	add	sp, #12
   14b62:	f85d fb04 	ldr.w	pc, [sp], #4
   14b66:	bf00      	nop
   14b68:	1fff94a0 	.word	0x1fff94a0
   14b6c:	1fff949c 	.word	0x1fff949c

00014b70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
   14b70:	b500      	push	{lr}
   14b72:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14b74:	f7ec ff66 	bl	1a44 <Sys_GetCoreID>
   14b78:	4603      	mov	r3, r0
   14b7a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]--;
   14b7c:	4a0d      	ldr	r2, [pc, #52]	; (14bb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   14b7e:	9b01      	ldr	r3, [sp, #4]
   14b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b84:	1e5a      	subs	r2, r3, #1
   14b86:	490b      	ldr	r1, [pc, #44]	; (14bb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   14b88:	9b01      	ldr	r3, [sp, #4]
   14b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_83[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]))         /*if interrupts were enabled*/
   14b8e:	4a0a      	ldr	r2, [pc, #40]	; (14bb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x48>)
   14b90:	9b01      	ldr	r3, [sp, #4]
   14b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b96:	f003 0301 	and.w	r3, r3, #1
   14b9a:	2b00      	cmp	r3, #0
   14b9c:	d106      	bne.n	14bac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
   14b9e:	4a05      	ldr	r2, [pc, #20]	; (14bb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   14ba0:	9b01      	ldr	r3, [sp, #4]
   14ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ba6:	2b00      	cmp	r3, #0
   14ba8:	d100      	bne.n	14bac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14baa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14bac:	bf00      	nop
   14bae:	b003      	add	sp, #12
   14bb0:	f85d fb04 	ldr.w	pc, [sp], #4
   14bb4:	1fff94a0 	.word	0x1fff94a0
   14bb8:	1fff949c 	.word	0x1fff949c

00014bbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
   14bbc:	b500      	push	{lr}
   14bbe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14bc0:	f7ec ff40 	bl	1a44 <Sys_GetCoreID>
   14bc4:	4603      	mov	r3, r0
   14bc6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId])
   14bc8:	4a10      	ldr	r2, [pc, #64]	; (14c0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   14bca:	9b01      	ldr	r3, [sp, #4]
   14bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14bd0:	2b00      	cmp	r3, #0
   14bd2:	d10d      	bne.n	14bf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14bd4:	f7eb fe94 	bl	900 <Adc_schm_read_msr>
   14bd8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14bda:	9b00      	ldr	r3, [sp, #0]
   14bdc:	f003 0301 	and.w	r3, r3, #1
   14be0:	2b00      	cmp	r3, #0
   14be2:	d100      	bne.n	14be6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14be4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_84[u32CoreId] = msr;
   14be6:	490a      	ldr	r1, [pc, #40]	; (14c10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x54>)
   14be8:	9b01      	ldr	r3, [sp, #4]
   14bea:	9a00      	ldr	r2, [sp, #0]
   14bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]++;
   14bf0:	4a06      	ldr	r2, [pc, #24]	; (14c0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   14bf2:	9b01      	ldr	r3, [sp, #4]
   14bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14bf8:	1c5a      	adds	r2, r3, #1
   14bfa:	4904      	ldr	r1, [pc, #16]	; (14c0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   14bfc:	9b01      	ldr	r3, [sp, #4]
   14bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14c02:	bf00      	nop
   14c04:	b003      	add	sp, #12
   14c06:	f85d fb04 	ldr.w	pc, [sp], #4
   14c0a:	bf00      	nop
   14c0c:	1fff94a8 	.word	0x1fff94a8
   14c10:	1fff94a4 	.word	0x1fff94a4

00014c14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
   14c14:	b500      	push	{lr}
   14c16:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14c18:	f7ec ff14 	bl	1a44 <Sys_GetCoreID>
   14c1c:	4603      	mov	r3, r0
   14c1e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]--;
   14c20:	4a0d      	ldr	r2, [pc, #52]	; (14c58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   14c22:	9b01      	ldr	r3, [sp, #4]
   14c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c28:	1e5a      	subs	r2, r3, #1
   14c2a:	490b      	ldr	r1, [pc, #44]	; (14c58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   14c2c:	9b01      	ldr	r3, [sp, #4]
   14c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_84[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]))         /*if interrupts were enabled*/
   14c32:	4a0a      	ldr	r2, [pc, #40]	; (14c5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x48>)
   14c34:	9b01      	ldr	r3, [sp, #4]
   14c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c3a:	f003 0301 	and.w	r3, r3, #1
   14c3e:	2b00      	cmp	r3, #0
   14c40:	d106      	bne.n	14c50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
   14c42:	4a05      	ldr	r2, [pc, #20]	; (14c58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   14c44:	9b01      	ldr	r3, [sp, #4]
   14c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c4a:	2b00      	cmp	r3, #0
   14c4c:	d100      	bne.n	14c50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14c4e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14c50:	bf00      	nop
   14c52:	b003      	add	sp, #12
   14c54:	f85d fb04 	ldr.w	pc, [sp], #4
   14c58:	1fff94a8 	.word	0x1fff94a8
   14c5c:	1fff94a4 	.word	0x1fff94a4

00014c60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
   14c60:	b500      	push	{lr}
   14c62:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14c64:	f7ec feee 	bl	1a44 <Sys_GetCoreID>
   14c68:	4603      	mov	r3, r0
   14c6a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId])
   14c6c:	4a10      	ldr	r2, [pc, #64]	; (14cb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   14c6e:	9b01      	ldr	r3, [sp, #4]
   14c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c74:	2b00      	cmp	r3, #0
   14c76:	d10d      	bne.n	14c94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14c78:	f7eb fe42 	bl	900 <Adc_schm_read_msr>
   14c7c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14c7e:	9b00      	ldr	r3, [sp, #0]
   14c80:	f003 0301 	and.w	r3, r3, #1
   14c84:	2b00      	cmp	r3, #0
   14c86:	d100      	bne.n	14c8a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14c88:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_85[u32CoreId] = msr;
   14c8a:	490a      	ldr	r1, [pc, #40]	; (14cb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x54>)
   14c8c:	9b01      	ldr	r3, [sp, #4]
   14c8e:	9a00      	ldr	r2, [sp, #0]
   14c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]++;
   14c94:	4a06      	ldr	r2, [pc, #24]	; (14cb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   14c96:	9b01      	ldr	r3, [sp, #4]
   14c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c9c:	1c5a      	adds	r2, r3, #1
   14c9e:	4904      	ldr	r1, [pc, #16]	; (14cb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   14ca0:	9b01      	ldr	r3, [sp, #4]
   14ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14ca6:	bf00      	nop
   14ca8:	b003      	add	sp, #12
   14caa:	f85d fb04 	ldr.w	pc, [sp], #4
   14cae:	bf00      	nop
   14cb0:	1fff94b0 	.word	0x1fff94b0
   14cb4:	1fff94ac 	.word	0x1fff94ac

00014cb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
   14cb8:	b500      	push	{lr}
   14cba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14cbc:	f7ec fec2 	bl	1a44 <Sys_GetCoreID>
   14cc0:	4603      	mov	r3, r0
   14cc2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]--;
   14cc4:	4a0d      	ldr	r2, [pc, #52]	; (14cfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   14cc6:	9b01      	ldr	r3, [sp, #4]
   14cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ccc:	1e5a      	subs	r2, r3, #1
   14cce:	490b      	ldr	r1, [pc, #44]	; (14cfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   14cd0:	9b01      	ldr	r3, [sp, #4]
   14cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_85[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]))         /*if interrupts were enabled*/
   14cd6:	4a0a      	ldr	r2, [pc, #40]	; (14d00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x48>)
   14cd8:	9b01      	ldr	r3, [sp, #4]
   14cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14cde:	f003 0301 	and.w	r3, r3, #1
   14ce2:	2b00      	cmp	r3, #0
   14ce4:	d106      	bne.n	14cf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
   14ce6:	4a05      	ldr	r2, [pc, #20]	; (14cfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   14ce8:	9b01      	ldr	r3, [sp, #4]
   14cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14cee:	2b00      	cmp	r3, #0
   14cf0:	d100      	bne.n	14cf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14cf2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14cf4:	bf00      	nop
   14cf6:	b003      	add	sp, #12
   14cf8:	f85d fb04 	ldr.w	pc, [sp], #4
   14cfc:	1fff94b0 	.word	0x1fff94b0
   14d00:	1fff94ac 	.word	0x1fff94ac

00014d04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
   14d04:	b500      	push	{lr}
   14d06:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14d08:	f7ec fe9c 	bl	1a44 <Sys_GetCoreID>
   14d0c:	4603      	mov	r3, r0
   14d0e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId])
   14d10:	4a10      	ldr	r2, [pc, #64]	; (14d54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   14d12:	9b01      	ldr	r3, [sp, #4]
   14d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d18:	2b00      	cmp	r3, #0
   14d1a:	d10d      	bne.n	14d38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14d1c:	f7eb fdf0 	bl	900 <Adc_schm_read_msr>
   14d20:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14d22:	9b00      	ldr	r3, [sp, #0]
   14d24:	f003 0301 	and.w	r3, r3, #1
   14d28:	2b00      	cmp	r3, #0
   14d2a:	d100      	bne.n	14d2e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14d2c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_86[u32CoreId] = msr;
   14d2e:	490a      	ldr	r1, [pc, #40]	; (14d58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x54>)
   14d30:	9b01      	ldr	r3, [sp, #4]
   14d32:	9a00      	ldr	r2, [sp, #0]
   14d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]++;
   14d38:	4a06      	ldr	r2, [pc, #24]	; (14d54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   14d3a:	9b01      	ldr	r3, [sp, #4]
   14d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d40:	1c5a      	adds	r2, r3, #1
   14d42:	4904      	ldr	r1, [pc, #16]	; (14d54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   14d44:	9b01      	ldr	r3, [sp, #4]
   14d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14d4a:	bf00      	nop
   14d4c:	b003      	add	sp, #12
   14d4e:	f85d fb04 	ldr.w	pc, [sp], #4
   14d52:	bf00      	nop
   14d54:	1fff94b8 	.word	0x1fff94b8
   14d58:	1fff94b4 	.word	0x1fff94b4

00014d5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
   14d5c:	b500      	push	{lr}
   14d5e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14d60:	f7ec fe70 	bl	1a44 <Sys_GetCoreID>
   14d64:	4603      	mov	r3, r0
   14d66:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]--;
   14d68:	4a0d      	ldr	r2, [pc, #52]	; (14da0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   14d6a:	9b01      	ldr	r3, [sp, #4]
   14d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d70:	1e5a      	subs	r2, r3, #1
   14d72:	490b      	ldr	r1, [pc, #44]	; (14da0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   14d74:	9b01      	ldr	r3, [sp, #4]
   14d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_86[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]))         /*if interrupts were enabled*/
   14d7a:	4a0a      	ldr	r2, [pc, #40]	; (14da4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x48>)
   14d7c:	9b01      	ldr	r3, [sp, #4]
   14d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d82:	f003 0301 	and.w	r3, r3, #1
   14d86:	2b00      	cmp	r3, #0
   14d88:	d106      	bne.n	14d98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
   14d8a:	4a05      	ldr	r2, [pc, #20]	; (14da0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   14d8c:	9b01      	ldr	r3, [sp, #4]
   14d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d92:	2b00      	cmp	r3, #0
   14d94:	d100      	bne.n	14d98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14d96:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14d98:	bf00      	nop
   14d9a:	b003      	add	sp, #12
   14d9c:	f85d fb04 	ldr.w	pc, [sp], #4
   14da0:	1fff94b8 	.word	0x1fff94b8
   14da4:	1fff94b4 	.word	0x1fff94b4

00014da8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
   14da8:	b500      	push	{lr}
   14daa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14dac:	f7ec fe4a 	bl	1a44 <Sys_GetCoreID>
   14db0:	4603      	mov	r3, r0
   14db2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId])
   14db4:	4a10      	ldr	r2, [pc, #64]	; (14df8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   14db6:	9b01      	ldr	r3, [sp, #4]
   14db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14dbc:	2b00      	cmp	r3, #0
   14dbe:	d10d      	bne.n	14ddc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14dc0:	f7eb fd9e 	bl	900 <Adc_schm_read_msr>
   14dc4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14dc6:	9b00      	ldr	r3, [sp, #0]
   14dc8:	f003 0301 	and.w	r3, r3, #1
   14dcc:	2b00      	cmp	r3, #0
   14dce:	d100      	bne.n	14dd2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14dd0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_87[u32CoreId] = msr;
   14dd2:	490a      	ldr	r1, [pc, #40]	; (14dfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x54>)
   14dd4:	9b01      	ldr	r3, [sp, #4]
   14dd6:	9a00      	ldr	r2, [sp, #0]
   14dd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]++;
   14ddc:	4a06      	ldr	r2, [pc, #24]	; (14df8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   14dde:	9b01      	ldr	r3, [sp, #4]
   14de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14de4:	1c5a      	adds	r2, r3, #1
   14de6:	4904      	ldr	r1, [pc, #16]	; (14df8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   14de8:	9b01      	ldr	r3, [sp, #4]
   14dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14dee:	bf00      	nop
   14df0:	b003      	add	sp, #12
   14df2:	f85d fb04 	ldr.w	pc, [sp], #4
   14df6:	bf00      	nop
   14df8:	1fff94c0 	.word	0x1fff94c0
   14dfc:	1fff94bc 	.word	0x1fff94bc

00014e00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
   14e00:	b500      	push	{lr}
   14e02:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14e04:	f7ec fe1e 	bl	1a44 <Sys_GetCoreID>
   14e08:	4603      	mov	r3, r0
   14e0a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]--;
   14e0c:	4a0d      	ldr	r2, [pc, #52]	; (14e44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   14e0e:	9b01      	ldr	r3, [sp, #4]
   14e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e14:	1e5a      	subs	r2, r3, #1
   14e16:	490b      	ldr	r1, [pc, #44]	; (14e44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   14e18:	9b01      	ldr	r3, [sp, #4]
   14e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_87[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]))         /*if interrupts were enabled*/
   14e1e:	4a0a      	ldr	r2, [pc, #40]	; (14e48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x48>)
   14e20:	9b01      	ldr	r3, [sp, #4]
   14e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e26:	f003 0301 	and.w	r3, r3, #1
   14e2a:	2b00      	cmp	r3, #0
   14e2c:	d106      	bne.n	14e3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
   14e2e:	4a05      	ldr	r2, [pc, #20]	; (14e44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   14e30:	9b01      	ldr	r3, [sp, #4]
   14e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e36:	2b00      	cmp	r3, #0
   14e38:	d100      	bne.n	14e3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14e3a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14e3c:	bf00      	nop
   14e3e:	b003      	add	sp, #12
   14e40:	f85d fb04 	ldr.w	pc, [sp], #4
   14e44:	1fff94c0 	.word	0x1fff94c0
   14e48:	1fff94bc 	.word	0x1fff94bc

00014e4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
   14e4c:	b500      	push	{lr}
   14e4e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14e50:	f7ec fdf8 	bl	1a44 <Sys_GetCoreID>
   14e54:	4603      	mov	r3, r0
   14e56:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId])
   14e58:	4a10      	ldr	r2, [pc, #64]	; (14e9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   14e5a:	9b01      	ldr	r3, [sp, #4]
   14e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e60:	2b00      	cmp	r3, #0
   14e62:	d10d      	bne.n	14e80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14e64:	f7eb fd4c 	bl	900 <Adc_schm_read_msr>
   14e68:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14e6a:	9b00      	ldr	r3, [sp, #0]
   14e6c:	f003 0301 	and.w	r3, r3, #1
   14e70:	2b00      	cmp	r3, #0
   14e72:	d100      	bne.n	14e76 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14e74:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_88[u32CoreId] = msr;
   14e76:	490a      	ldr	r1, [pc, #40]	; (14ea0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x54>)
   14e78:	9b01      	ldr	r3, [sp, #4]
   14e7a:	9a00      	ldr	r2, [sp, #0]
   14e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]++;
   14e80:	4a06      	ldr	r2, [pc, #24]	; (14e9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   14e82:	9b01      	ldr	r3, [sp, #4]
   14e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e88:	1c5a      	adds	r2, r3, #1
   14e8a:	4904      	ldr	r1, [pc, #16]	; (14e9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   14e8c:	9b01      	ldr	r3, [sp, #4]
   14e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14e92:	bf00      	nop
   14e94:	b003      	add	sp, #12
   14e96:	f85d fb04 	ldr.w	pc, [sp], #4
   14e9a:	bf00      	nop
   14e9c:	1fff94c8 	.word	0x1fff94c8
   14ea0:	1fff94c4 	.word	0x1fff94c4

00014ea4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
   14ea4:	b500      	push	{lr}
   14ea6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14ea8:	f7ec fdcc 	bl	1a44 <Sys_GetCoreID>
   14eac:	4603      	mov	r3, r0
   14eae:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]--;
   14eb0:	4a0d      	ldr	r2, [pc, #52]	; (14ee8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   14eb2:	9b01      	ldr	r3, [sp, #4]
   14eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14eb8:	1e5a      	subs	r2, r3, #1
   14eba:	490b      	ldr	r1, [pc, #44]	; (14ee8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   14ebc:	9b01      	ldr	r3, [sp, #4]
   14ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_88[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]))         /*if interrupts were enabled*/
   14ec2:	4a0a      	ldr	r2, [pc, #40]	; (14eec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x48>)
   14ec4:	9b01      	ldr	r3, [sp, #4]
   14ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14eca:	f003 0301 	and.w	r3, r3, #1
   14ece:	2b00      	cmp	r3, #0
   14ed0:	d106      	bne.n	14ee0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
   14ed2:	4a05      	ldr	r2, [pc, #20]	; (14ee8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   14ed4:	9b01      	ldr	r3, [sp, #4]
   14ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14eda:	2b00      	cmp	r3, #0
   14edc:	d100      	bne.n	14ee0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14ede:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14ee0:	bf00      	nop
   14ee2:	b003      	add	sp, #12
   14ee4:	f85d fb04 	ldr.w	pc, [sp], #4
   14ee8:	1fff94c8 	.word	0x1fff94c8
   14eec:	1fff94c4 	.word	0x1fff94c4

00014ef0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
   14ef0:	b500      	push	{lr}
   14ef2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14ef4:	f7ec fda6 	bl	1a44 <Sys_GetCoreID>
   14ef8:	4603      	mov	r3, r0
   14efa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId])
   14efc:	4a10      	ldr	r2, [pc, #64]	; (14f40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   14efe:	9b01      	ldr	r3, [sp, #4]
   14f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f04:	2b00      	cmp	r3, #0
   14f06:	d10d      	bne.n	14f24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14f08:	f7eb fcfa 	bl	900 <Adc_schm_read_msr>
   14f0c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14f0e:	9b00      	ldr	r3, [sp, #0]
   14f10:	f003 0301 	and.w	r3, r3, #1
   14f14:	2b00      	cmp	r3, #0
   14f16:	d100      	bne.n	14f1a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14f18:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_89[u32CoreId] = msr;
   14f1a:	490a      	ldr	r1, [pc, #40]	; (14f44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x54>)
   14f1c:	9b01      	ldr	r3, [sp, #4]
   14f1e:	9a00      	ldr	r2, [sp, #0]
   14f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]++;
   14f24:	4a06      	ldr	r2, [pc, #24]	; (14f40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   14f26:	9b01      	ldr	r3, [sp, #4]
   14f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f2c:	1c5a      	adds	r2, r3, #1
   14f2e:	4904      	ldr	r1, [pc, #16]	; (14f40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   14f30:	9b01      	ldr	r3, [sp, #4]
   14f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14f36:	bf00      	nop
   14f38:	b003      	add	sp, #12
   14f3a:	f85d fb04 	ldr.w	pc, [sp], #4
   14f3e:	bf00      	nop
   14f40:	1fff94d0 	.word	0x1fff94d0
   14f44:	1fff94cc 	.word	0x1fff94cc

00014f48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
   14f48:	b500      	push	{lr}
   14f4a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14f4c:	f7ec fd7a 	bl	1a44 <Sys_GetCoreID>
   14f50:	4603      	mov	r3, r0
   14f52:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]--;
   14f54:	4a0d      	ldr	r2, [pc, #52]	; (14f8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   14f56:	9b01      	ldr	r3, [sp, #4]
   14f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f5c:	1e5a      	subs	r2, r3, #1
   14f5e:	490b      	ldr	r1, [pc, #44]	; (14f8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   14f60:	9b01      	ldr	r3, [sp, #4]
   14f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_89[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]))         /*if interrupts were enabled*/
   14f66:	4a0a      	ldr	r2, [pc, #40]	; (14f90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x48>)
   14f68:	9b01      	ldr	r3, [sp, #4]
   14f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f6e:	f003 0301 	and.w	r3, r3, #1
   14f72:	2b00      	cmp	r3, #0
   14f74:	d106      	bne.n	14f84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
   14f76:	4a05      	ldr	r2, [pc, #20]	; (14f8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   14f78:	9b01      	ldr	r3, [sp, #4]
   14f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f7e:	2b00      	cmp	r3, #0
   14f80:	d100      	bne.n	14f84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14f82:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14f84:	bf00      	nop
   14f86:	b003      	add	sp, #12
   14f88:	f85d fb04 	ldr.w	pc, [sp], #4
   14f8c:	1fff94d0 	.word	0x1fff94d0
   14f90:	1fff94cc 	.word	0x1fff94cc

00014f94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
   14f94:	b500      	push	{lr}
   14f96:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14f98:	f7ec fd54 	bl	1a44 <Sys_GetCoreID>
   14f9c:	4603      	mov	r3, r0
   14f9e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId])
   14fa0:	4a10      	ldr	r2, [pc, #64]	; (14fe4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   14fa2:	9b01      	ldr	r3, [sp, #4]
   14fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fa8:	2b00      	cmp	r3, #0
   14faa:	d10d      	bne.n	14fc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14fac:	f7eb fca8 	bl	900 <Adc_schm_read_msr>
   14fb0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14fb2:	9b00      	ldr	r3, [sp, #0]
   14fb4:	f003 0301 	and.w	r3, r3, #1
   14fb8:	2b00      	cmp	r3, #0
   14fba:	d100      	bne.n	14fbe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14fbc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_90[u32CoreId] = msr;
   14fbe:	490a      	ldr	r1, [pc, #40]	; (14fe8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x54>)
   14fc0:	9b01      	ldr	r3, [sp, #4]
   14fc2:	9a00      	ldr	r2, [sp, #0]
   14fc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]++;
   14fc8:	4a06      	ldr	r2, [pc, #24]	; (14fe4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   14fca:	9b01      	ldr	r3, [sp, #4]
   14fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fd0:	1c5a      	adds	r2, r3, #1
   14fd2:	4904      	ldr	r1, [pc, #16]	; (14fe4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   14fd4:	9b01      	ldr	r3, [sp, #4]
   14fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14fda:	bf00      	nop
   14fdc:	b003      	add	sp, #12
   14fde:	f85d fb04 	ldr.w	pc, [sp], #4
   14fe2:	bf00      	nop
   14fe4:	1fff94d8 	.word	0x1fff94d8
   14fe8:	1fff94d4 	.word	0x1fff94d4

00014fec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
   14fec:	b500      	push	{lr}
   14fee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14ff0:	f7ec fd28 	bl	1a44 <Sys_GetCoreID>
   14ff4:	4603      	mov	r3, r0
   14ff6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]--;
   14ff8:	4a0d      	ldr	r2, [pc, #52]	; (15030 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   14ffa:	9b01      	ldr	r3, [sp, #4]
   14ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15000:	1e5a      	subs	r2, r3, #1
   15002:	490b      	ldr	r1, [pc, #44]	; (15030 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   15004:	9b01      	ldr	r3, [sp, #4]
   15006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_90[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]))         /*if interrupts were enabled*/
   1500a:	4a0a      	ldr	r2, [pc, #40]	; (15034 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x48>)
   1500c:	9b01      	ldr	r3, [sp, #4]
   1500e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15012:	f003 0301 	and.w	r3, r3, #1
   15016:	2b00      	cmp	r3, #0
   15018:	d106      	bne.n	15028 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
   1501a:	4a05      	ldr	r2, [pc, #20]	; (15030 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   1501c:	9b01      	ldr	r3, [sp, #4]
   1501e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15022:	2b00      	cmp	r3, #0
   15024:	d100      	bne.n	15028 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15026:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15028:	bf00      	nop
   1502a:	b003      	add	sp, #12
   1502c:	f85d fb04 	ldr.w	pc, [sp], #4
   15030:	1fff94d8 	.word	0x1fff94d8
   15034:	1fff94d4 	.word	0x1fff94d4

00015038 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
   15038:	b500      	push	{lr}
   1503a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1503c:	f7ec fd02 	bl	1a44 <Sys_GetCoreID>
   15040:	4603      	mov	r3, r0
   15042:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId])
   15044:	4a10      	ldr	r2, [pc, #64]	; (15088 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   15046:	9b01      	ldr	r3, [sp, #4]
   15048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1504c:	2b00      	cmp	r3, #0
   1504e:	d10d      	bne.n	1506c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15050:	f7eb fc56 	bl	900 <Adc_schm_read_msr>
   15054:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15056:	9b00      	ldr	r3, [sp, #0]
   15058:	f003 0301 	and.w	r3, r3, #1
   1505c:	2b00      	cmp	r3, #0
   1505e:	d100      	bne.n	15062 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15060:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_91[u32CoreId] = msr;
   15062:	490a      	ldr	r1, [pc, #40]	; (1508c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x54>)
   15064:	9b01      	ldr	r3, [sp, #4]
   15066:	9a00      	ldr	r2, [sp, #0]
   15068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]++;
   1506c:	4a06      	ldr	r2, [pc, #24]	; (15088 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   1506e:	9b01      	ldr	r3, [sp, #4]
   15070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15074:	1c5a      	adds	r2, r3, #1
   15076:	4904      	ldr	r1, [pc, #16]	; (15088 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   15078:	9b01      	ldr	r3, [sp, #4]
   1507a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1507e:	bf00      	nop
   15080:	b003      	add	sp, #12
   15082:	f85d fb04 	ldr.w	pc, [sp], #4
   15086:	bf00      	nop
   15088:	1fff94e0 	.word	0x1fff94e0
   1508c:	1fff94dc 	.word	0x1fff94dc

00015090 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
   15090:	b500      	push	{lr}
   15092:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15094:	f7ec fcd6 	bl	1a44 <Sys_GetCoreID>
   15098:	4603      	mov	r3, r0
   1509a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]--;
   1509c:	4a0d      	ldr	r2, [pc, #52]	; (150d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   1509e:	9b01      	ldr	r3, [sp, #4]
   150a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150a4:	1e5a      	subs	r2, r3, #1
   150a6:	490b      	ldr	r1, [pc, #44]	; (150d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   150a8:	9b01      	ldr	r3, [sp, #4]
   150aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_91[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]))         /*if interrupts were enabled*/
   150ae:	4a0a      	ldr	r2, [pc, #40]	; (150d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x48>)
   150b0:	9b01      	ldr	r3, [sp, #4]
   150b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150b6:	f003 0301 	and.w	r3, r3, #1
   150ba:	2b00      	cmp	r3, #0
   150bc:	d106      	bne.n	150cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
   150be:	4a05      	ldr	r2, [pc, #20]	; (150d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   150c0:	9b01      	ldr	r3, [sp, #4]
   150c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150c6:	2b00      	cmp	r3, #0
   150c8:	d100      	bne.n	150cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   150ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   150cc:	bf00      	nop
   150ce:	b003      	add	sp, #12
   150d0:	f85d fb04 	ldr.w	pc, [sp], #4
   150d4:	1fff94e0 	.word	0x1fff94e0
   150d8:	1fff94dc 	.word	0x1fff94dc

000150dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
   150dc:	b500      	push	{lr}
   150de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   150e0:	f7ec fcb0 	bl	1a44 <Sys_GetCoreID>
   150e4:	4603      	mov	r3, r0
   150e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId])
   150e8:	4a10      	ldr	r2, [pc, #64]	; (1512c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   150ea:	9b01      	ldr	r3, [sp, #4]
   150ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150f0:	2b00      	cmp	r3, #0
   150f2:	d10d      	bne.n	15110 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   150f4:	f7eb fc04 	bl	900 <Adc_schm_read_msr>
   150f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   150fa:	9b00      	ldr	r3, [sp, #0]
   150fc:	f003 0301 	and.w	r3, r3, #1
   15100:	2b00      	cmp	r3, #0
   15102:	d100      	bne.n	15106 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15104:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_92[u32CoreId] = msr;
   15106:	490a      	ldr	r1, [pc, #40]	; (15130 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x54>)
   15108:	9b01      	ldr	r3, [sp, #4]
   1510a:	9a00      	ldr	r2, [sp, #0]
   1510c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]++;
   15110:	4a06      	ldr	r2, [pc, #24]	; (1512c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   15112:	9b01      	ldr	r3, [sp, #4]
   15114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15118:	1c5a      	adds	r2, r3, #1
   1511a:	4904      	ldr	r1, [pc, #16]	; (1512c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   1511c:	9b01      	ldr	r3, [sp, #4]
   1511e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15122:	bf00      	nop
   15124:	b003      	add	sp, #12
   15126:	f85d fb04 	ldr.w	pc, [sp], #4
   1512a:	bf00      	nop
   1512c:	1fff94e8 	.word	0x1fff94e8
   15130:	1fff94e4 	.word	0x1fff94e4

00015134 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
   15134:	b500      	push	{lr}
   15136:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15138:	f7ec fc84 	bl	1a44 <Sys_GetCoreID>
   1513c:	4603      	mov	r3, r0
   1513e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]--;
   15140:	4a0d      	ldr	r2, [pc, #52]	; (15178 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   15142:	9b01      	ldr	r3, [sp, #4]
   15144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15148:	1e5a      	subs	r2, r3, #1
   1514a:	490b      	ldr	r1, [pc, #44]	; (15178 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   1514c:	9b01      	ldr	r3, [sp, #4]
   1514e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_92[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]))         /*if interrupts were enabled*/
   15152:	4a0a      	ldr	r2, [pc, #40]	; (1517c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x48>)
   15154:	9b01      	ldr	r3, [sp, #4]
   15156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1515a:	f003 0301 	and.w	r3, r3, #1
   1515e:	2b00      	cmp	r3, #0
   15160:	d106      	bne.n	15170 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
   15162:	4a05      	ldr	r2, [pc, #20]	; (15178 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   15164:	9b01      	ldr	r3, [sp, #4]
   15166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1516a:	2b00      	cmp	r3, #0
   1516c:	d100      	bne.n	15170 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1516e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15170:	bf00      	nop
   15172:	b003      	add	sp, #12
   15174:	f85d fb04 	ldr.w	pc, [sp], #4
   15178:	1fff94e8 	.word	0x1fff94e8
   1517c:	1fff94e4 	.word	0x1fff94e4

00015180 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
   15180:	b500      	push	{lr}
   15182:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15184:	f7ec fc5e 	bl	1a44 <Sys_GetCoreID>
   15188:	4603      	mov	r3, r0
   1518a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId])
   1518c:	4a10      	ldr	r2, [pc, #64]	; (151d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   1518e:	9b01      	ldr	r3, [sp, #4]
   15190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15194:	2b00      	cmp	r3, #0
   15196:	d10d      	bne.n	151b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15198:	f7eb fbb2 	bl	900 <Adc_schm_read_msr>
   1519c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1519e:	9b00      	ldr	r3, [sp, #0]
   151a0:	f003 0301 	and.w	r3, r3, #1
   151a4:	2b00      	cmp	r3, #0
   151a6:	d100      	bne.n	151aa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   151a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_93[u32CoreId] = msr;
   151aa:	490a      	ldr	r1, [pc, #40]	; (151d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x54>)
   151ac:	9b01      	ldr	r3, [sp, #4]
   151ae:	9a00      	ldr	r2, [sp, #0]
   151b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]++;
   151b4:	4a06      	ldr	r2, [pc, #24]	; (151d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   151b6:	9b01      	ldr	r3, [sp, #4]
   151b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151bc:	1c5a      	adds	r2, r3, #1
   151be:	4904      	ldr	r1, [pc, #16]	; (151d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   151c0:	9b01      	ldr	r3, [sp, #4]
   151c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   151c6:	bf00      	nop
   151c8:	b003      	add	sp, #12
   151ca:	f85d fb04 	ldr.w	pc, [sp], #4
   151ce:	bf00      	nop
   151d0:	1fff94f0 	.word	0x1fff94f0
   151d4:	1fff94ec 	.word	0x1fff94ec

000151d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
   151d8:	b500      	push	{lr}
   151da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   151dc:	f7ec fc32 	bl	1a44 <Sys_GetCoreID>
   151e0:	4603      	mov	r3, r0
   151e2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]--;
   151e4:	4a0d      	ldr	r2, [pc, #52]	; (1521c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   151e6:	9b01      	ldr	r3, [sp, #4]
   151e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151ec:	1e5a      	subs	r2, r3, #1
   151ee:	490b      	ldr	r1, [pc, #44]	; (1521c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   151f0:	9b01      	ldr	r3, [sp, #4]
   151f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_93[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]))         /*if interrupts were enabled*/
   151f6:	4a0a      	ldr	r2, [pc, #40]	; (15220 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x48>)
   151f8:	9b01      	ldr	r3, [sp, #4]
   151fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151fe:	f003 0301 	and.w	r3, r3, #1
   15202:	2b00      	cmp	r3, #0
   15204:	d106      	bne.n	15214 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
   15206:	4a05      	ldr	r2, [pc, #20]	; (1521c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   15208:	9b01      	ldr	r3, [sp, #4]
   1520a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1520e:	2b00      	cmp	r3, #0
   15210:	d100      	bne.n	15214 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15212:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15214:	bf00      	nop
   15216:	b003      	add	sp, #12
   15218:	f85d fb04 	ldr.w	pc, [sp], #4
   1521c:	1fff94f0 	.word	0x1fff94f0
   15220:	1fff94ec 	.word	0x1fff94ec

00015224 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
   15224:	b500      	push	{lr}
   15226:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15228:	f7ec fc0c 	bl	1a44 <Sys_GetCoreID>
   1522c:	4603      	mov	r3, r0
   1522e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId])
   15230:	4a10      	ldr	r2, [pc, #64]	; (15274 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   15232:	9b01      	ldr	r3, [sp, #4]
   15234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15238:	2b00      	cmp	r3, #0
   1523a:	d10d      	bne.n	15258 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1523c:	f7eb fb60 	bl	900 <Adc_schm_read_msr>
   15240:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15242:	9b00      	ldr	r3, [sp, #0]
   15244:	f003 0301 	and.w	r3, r3, #1
   15248:	2b00      	cmp	r3, #0
   1524a:	d100      	bne.n	1524e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1524c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_94[u32CoreId] = msr;
   1524e:	490a      	ldr	r1, [pc, #40]	; (15278 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x54>)
   15250:	9b01      	ldr	r3, [sp, #4]
   15252:	9a00      	ldr	r2, [sp, #0]
   15254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]++;
   15258:	4a06      	ldr	r2, [pc, #24]	; (15274 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   1525a:	9b01      	ldr	r3, [sp, #4]
   1525c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15260:	1c5a      	adds	r2, r3, #1
   15262:	4904      	ldr	r1, [pc, #16]	; (15274 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   15264:	9b01      	ldr	r3, [sp, #4]
   15266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1526a:	bf00      	nop
   1526c:	b003      	add	sp, #12
   1526e:	f85d fb04 	ldr.w	pc, [sp], #4
   15272:	bf00      	nop
   15274:	1fff94f8 	.word	0x1fff94f8
   15278:	1fff94f4 	.word	0x1fff94f4

0001527c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
   1527c:	b500      	push	{lr}
   1527e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15280:	f7ec fbe0 	bl	1a44 <Sys_GetCoreID>
   15284:	4603      	mov	r3, r0
   15286:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]--;
   15288:	4a0d      	ldr	r2, [pc, #52]	; (152c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   1528a:	9b01      	ldr	r3, [sp, #4]
   1528c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15290:	1e5a      	subs	r2, r3, #1
   15292:	490b      	ldr	r1, [pc, #44]	; (152c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   15294:	9b01      	ldr	r3, [sp, #4]
   15296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_94[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]))         /*if interrupts were enabled*/
   1529a:	4a0a      	ldr	r2, [pc, #40]	; (152c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x48>)
   1529c:	9b01      	ldr	r3, [sp, #4]
   1529e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152a2:	f003 0301 	and.w	r3, r3, #1
   152a6:	2b00      	cmp	r3, #0
   152a8:	d106      	bne.n	152b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
   152aa:	4a05      	ldr	r2, [pc, #20]	; (152c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   152ac:	9b01      	ldr	r3, [sp, #4]
   152ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152b2:	2b00      	cmp	r3, #0
   152b4:	d100      	bne.n	152b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   152b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   152b8:	bf00      	nop
   152ba:	b003      	add	sp, #12
   152bc:	f85d fb04 	ldr.w	pc, [sp], #4
   152c0:	1fff94f8 	.word	0x1fff94f8
   152c4:	1fff94f4 	.word	0x1fff94f4

000152c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
   152c8:	b500      	push	{lr}
   152ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   152cc:	f7ec fbba 	bl	1a44 <Sys_GetCoreID>
   152d0:	4603      	mov	r3, r0
   152d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId])
   152d4:	4a10      	ldr	r2, [pc, #64]	; (15318 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   152d6:	9b01      	ldr	r3, [sp, #4]
   152d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152dc:	2b00      	cmp	r3, #0
   152de:	d10d      	bne.n	152fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   152e0:	f7eb fb0e 	bl	900 <Adc_schm_read_msr>
   152e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   152e6:	9b00      	ldr	r3, [sp, #0]
   152e8:	f003 0301 	and.w	r3, r3, #1
   152ec:	2b00      	cmp	r3, #0
   152ee:	d100      	bne.n	152f2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   152f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_95[u32CoreId] = msr;
   152f2:	490a      	ldr	r1, [pc, #40]	; (1531c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x54>)
   152f4:	9b01      	ldr	r3, [sp, #4]
   152f6:	9a00      	ldr	r2, [sp, #0]
   152f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]++;
   152fc:	4a06      	ldr	r2, [pc, #24]	; (15318 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   152fe:	9b01      	ldr	r3, [sp, #4]
   15300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15304:	1c5a      	adds	r2, r3, #1
   15306:	4904      	ldr	r1, [pc, #16]	; (15318 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   15308:	9b01      	ldr	r3, [sp, #4]
   1530a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1530e:	bf00      	nop
   15310:	b003      	add	sp, #12
   15312:	f85d fb04 	ldr.w	pc, [sp], #4
   15316:	bf00      	nop
   15318:	1fff9500 	.word	0x1fff9500
   1531c:	1fff94fc 	.word	0x1fff94fc

00015320 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
   15320:	b500      	push	{lr}
   15322:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15324:	f7ec fb8e 	bl	1a44 <Sys_GetCoreID>
   15328:	4603      	mov	r3, r0
   1532a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]--;
   1532c:	4a0d      	ldr	r2, [pc, #52]	; (15364 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   1532e:	9b01      	ldr	r3, [sp, #4]
   15330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15334:	1e5a      	subs	r2, r3, #1
   15336:	490b      	ldr	r1, [pc, #44]	; (15364 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   15338:	9b01      	ldr	r3, [sp, #4]
   1533a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_95[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]))         /*if interrupts were enabled*/
   1533e:	4a0a      	ldr	r2, [pc, #40]	; (15368 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x48>)
   15340:	9b01      	ldr	r3, [sp, #4]
   15342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15346:	f003 0301 	and.w	r3, r3, #1
   1534a:	2b00      	cmp	r3, #0
   1534c:	d106      	bne.n	1535c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
   1534e:	4a05      	ldr	r2, [pc, #20]	; (15364 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   15350:	9b01      	ldr	r3, [sp, #4]
   15352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15356:	2b00      	cmp	r3, #0
   15358:	d100      	bne.n	1535c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1535a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1535c:	bf00      	nop
   1535e:	b003      	add	sp, #12
   15360:	f85d fb04 	ldr.w	pc, [sp], #4
   15364:	1fff9500 	.word	0x1fff9500
   15368:	1fff94fc 	.word	0x1fff94fc

0001536c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
   1536c:	b500      	push	{lr}
   1536e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15370:	f7ec fb68 	bl	1a44 <Sys_GetCoreID>
   15374:	4603      	mov	r3, r0
   15376:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId])
   15378:	4a10      	ldr	r2, [pc, #64]	; (153bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   1537a:	9b01      	ldr	r3, [sp, #4]
   1537c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15380:	2b00      	cmp	r3, #0
   15382:	d10d      	bne.n	153a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15384:	f7eb fabc 	bl	900 <Adc_schm_read_msr>
   15388:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1538a:	9b00      	ldr	r3, [sp, #0]
   1538c:	f003 0301 	and.w	r3, r3, #1
   15390:	2b00      	cmp	r3, #0
   15392:	d100      	bne.n	15396 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15394:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_96[u32CoreId] = msr;
   15396:	490a      	ldr	r1, [pc, #40]	; (153c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x54>)
   15398:	9b01      	ldr	r3, [sp, #4]
   1539a:	9a00      	ldr	r2, [sp, #0]
   1539c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]++;
   153a0:	4a06      	ldr	r2, [pc, #24]	; (153bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   153a2:	9b01      	ldr	r3, [sp, #4]
   153a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153a8:	1c5a      	adds	r2, r3, #1
   153aa:	4904      	ldr	r1, [pc, #16]	; (153bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   153ac:	9b01      	ldr	r3, [sp, #4]
   153ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   153b2:	bf00      	nop
   153b4:	b003      	add	sp, #12
   153b6:	f85d fb04 	ldr.w	pc, [sp], #4
   153ba:	bf00      	nop
   153bc:	1fff9508 	.word	0x1fff9508
   153c0:	1fff9504 	.word	0x1fff9504

000153c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
   153c4:	b500      	push	{lr}
   153c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   153c8:	f7ec fb3c 	bl	1a44 <Sys_GetCoreID>
   153cc:	4603      	mov	r3, r0
   153ce:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]--;
   153d0:	4a0d      	ldr	r2, [pc, #52]	; (15408 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   153d2:	9b01      	ldr	r3, [sp, #4]
   153d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153d8:	1e5a      	subs	r2, r3, #1
   153da:	490b      	ldr	r1, [pc, #44]	; (15408 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   153dc:	9b01      	ldr	r3, [sp, #4]
   153de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_96[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]))         /*if interrupts were enabled*/
   153e2:	4a0a      	ldr	r2, [pc, #40]	; (1540c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x48>)
   153e4:	9b01      	ldr	r3, [sp, #4]
   153e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153ea:	f003 0301 	and.w	r3, r3, #1
   153ee:	2b00      	cmp	r3, #0
   153f0:	d106      	bne.n	15400 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
   153f2:	4a05      	ldr	r2, [pc, #20]	; (15408 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   153f4:	9b01      	ldr	r3, [sp, #4]
   153f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153fa:	2b00      	cmp	r3, #0
   153fc:	d100      	bne.n	15400 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   153fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15400:	bf00      	nop
   15402:	b003      	add	sp, #12
   15404:	f85d fb04 	ldr.w	pc, [sp], #4
   15408:	1fff9508 	.word	0x1fff9508
   1540c:	1fff9504 	.word	0x1fff9504

00015410 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
   15410:	b500      	push	{lr}
   15412:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15414:	f7ec fb16 	bl	1a44 <Sys_GetCoreID>
   15418:	4603      	mov	r3, r0
   1541a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId])
   1541c:	4a10      	ldr	r2, [pc, #64]	; (15460 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   1541e:	9b01      	ldr	r3, [sp, #4]
   15420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15424:	2b00      	cmp	r3, #0
   15426:	d10d      	bne.n	15444 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15428:	f7eb fa6a 	bl	900 <Adc_schm_read_msr>
   1542c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1542e:	9b00      	ldr	r3, [sp, #0]
   15430:	f003 0301 	and.w	r3, r3, #1
   15434:	2b00      	cmp	r3, #0
   15436:	d100      	bne.n	1543a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15438:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_97[u32CoreId] = msr;
   1543a:	490a      	ldr	r1, [pc, #40]	; (15464 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x54>)
   1543c:	9b01      	ldr	r3, [sp, #4]
   1543e:	9a00      	ldr	r2, [sp, #0]
   15440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]++;
   15444:	4a06      	ldr	r2, [pc, #24]	; (15460 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   15446:	9b01      	ldr	r3, [sp, #4]
   15448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1544c:	1c5a      	adds	r2, r3, #1
   1544e:	4904      	ldr	r1, [pc, #16]	; (15460 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   15450:	9b01      	ldr	r3, [sp, #4]
   15452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15456:	bf00      	nop
   15458:	b003      	add	sp, #12
   1545a:	f85d fb04 	ldr.w	pc, [sp], #4
   1545e:	bf00      	nop
   15460:	1fff9510 	.word	0x1fff9510
   15464:	1fff950c 	.word	0x1fff950c

00015468 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
   15468:	b500      	push	{lr}
   1546a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1546c:	f7ec faea 	bl	1a44 <Sys_GetCoreID>
   15470:	4603      	mov	r3, r0
   15472:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]--;
   15474:	4a0d      	ldr	r2, [pc, #52]	; (154ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   15476:	9b01      	ldr	r3, [sp, #4]
   15478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1547c:	1e5a      	subs	r2, r3, #1
   1547e:	490b      	ldr	r1, [pc, #44]	; (154ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   15480:	9b01      	ldr	r3, [sp, #4]
   15482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_97[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]))         /*if interrupts were enabled*/
   15486:	4a0a      	ldr	r2, [pc, #40]	; (154b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x48>)
   15488:	9b01      	ldr	r3, [sp, #4]
   1548a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1548e:	f003 0301 	and.w	r3, r3, #1
   15492:	2b00      	cmp	r3, #0
   15494:	d106      	bne.n	154a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
   15496:	4a05      	ldr	r2, [pc, #20]	; (154ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   15498:	9b01      	ldr	r3, [sp, #4]
   1549a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1549e:	2b00      	cmp	r3, #0
   154a0:	d100      	bne.n	154a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   154a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   154a4:	bf00      	nop
   154a6:	b003      	add	sp, #12
   154a8:	f85d fb04 	ldr.w	pc, [sp], #4
   154ac:	1fff9510 	.word	0x1fff9510
   154b0:	1fff950c 	.word	0x1fff950c

000154b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
   154b4:	b500      	push	{lr}
   154b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   154b8:	f7ec fac4 	bl	1a44 <Sys_GetCoreID>
   154bc:	4603      	mov	r3, r0
   154be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId])
   154c0:	4a10      	ldr	r2, [pc, #64]	; (15504 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   154c2:	9b01      	ldr	r3, [sp, #4]
   154c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154c8:	2b00      	cmp	r3, #0
   154ca:	d10d      	bne.n	154e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   154cc:	f7eb fa18 	bl	900 <Adc_schm_read_msr>
   154d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   154d2:	9b00      	ldr	r3, [sp, #0]
   154d4:	f003 0301 	and.w	r3, r3, #1
   154d8:	2b00      	cmp	r3, #0
   154da:	d100      	bne.n	154de <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   154dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_98[u32CoreId] = msr;
   154de:	490a      	ldr	r1, [pc, #40]	; (15508 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x54>)
   154e0:	9b01      	ldr	r3, [sp, #4]
   154e2:	9a00      	ldr	r2, [sp, #0]
   154e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]++;
   154e8:	4a06      	ldr	r2, [pc, #24]	; (15504 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   154ea:	9b01      	ldr	r3, [sp, #4]
   154ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154f0:	1c5a      	adds	r2, r3, #1
   154f2:	4904      	ldr	r1, [pc, #16]	; (15504 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   154f4:	9b01      	ldr	r3, [sp, #4]
   154f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   154fa:	bf00      	nop
   154fc:	b003      	add	sp, #12
   154fe:	f85d fb04 	ldr.w	pc, [sp], #4
   15502:	bf00      	nop
   15504:	1fff9518 	.word	0x1fff9518
   15508:	1fff9514 	.word	0x1fff9514

0001550c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
   1550c:	b500      	push	{lr}
   1550e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15510:	f7ec fa98 	bl	1a44 <Sys_GetCoreID>
   15514:	4603      	mov	r3, r0
   15516:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]--;
   15518:	4a0d      	ldr	r2, [pc, #52]	; (15550 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   1551a:	9b01      	ldr	r3, [sp, #4]
   1551c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15520:	1e5a      	subs	r2, r3, #1
   15522:	490b      	ldr	r1, [pc, #44]	; (15550 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   15524:	9b01      	ldr	r3, [sp, #4]
   15526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_98[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]))         /*if interrupts were enabled*/
   1552a:	4a0a      	ldr	r2, [pc, #40]	; (15554 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x48>)
   1552c:	9b01      	ldr	r3, [sp, #4]
   1552e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15532:	f003 0301 	and.w	r3, r3, #1
   15536:	2b00      	cmp	r3, #0
   15538:	d106      	bne.n	15548 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
   1553a:	4a05      	ldr	r2, [pc, #20]	; (15550 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   1553c:	9b01      	ldr	r3, [sp, #4]
   1553e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15542:	2b00      	cmp	r3, #0
   15544:	d100      	bne.n	15548 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15546:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15548:	bf00      	nop
   1554a:	b003      	add	sp, #12
   1554c:	f85d fb04 	ldr.w	pc, [sp], #4
   15550:	1fff9518 	.word	0x1fff9518
   15554:	1fff9514 	.word	0x1fff9514

00015558 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
   15558:	b500      	push	{lr}
   1555a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1555c:	f7ec fa72 	bl	1a44 <Sys_GetCoreID>
   15560:	4603      	mov	r3, r0
   15562:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId])
   15564:	4a10      	ldr	r2, [pc, #64]	; (155a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   15566:	9b01      	ldr	r3, [sp, #4]
   15568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1556c:	2b00      	cmp	r3, #0
   1556e:	d10d      	bne.n	1558c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15570:	f7eb f9c6 	bl	900 <Adc_schm_read_msr>
   15574:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15576:	9b00      	ldr	r3, [sp, #0]
   15578:	f003 0301 	and.w	r3, r3, #1
   1557c:	2b00      	cmp	r3, #0
   1557e:	d100      	bne.n	15582 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15580:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_99[u32CoreId] = msr;
   15582:	490a      	ldr	r1, [pc, #40]	; (155ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x54>)
   15584:	9b01      	ldr	r3, [sp, #4]
   15586:	9a00      	ldr	r2, [sp, #0]
   15588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]++;
   1558c:	4a06      	ldr	r2, [pc, #24]	; (155a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   1558e:	9b01      	ldr	r3, [sp, #4]
   15590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15594:	1c5a      	adds	r2, r3, #1
   15596:	4904      	ldr	r1, [pc, #16]	; (155a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   15598:	9b01      	ldr	r3, [sp, #4]
   1559a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1559e:	bf00      	nop
   155a0:	b003      	add	sp, #12
   155a2:	f85d fb04 	ldr.w	pc, [sp], #4
   155a6:	bf00      	nop
   155a8:	1fff9520 	.word	0x1fff9520
   155ac:	1fff951c 	.word	0x1fff951c

000155b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
   155b0:	b500      	push	{lr}
   155b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   155b4:	f7ec fa46 	bl	1a44 <Sys_GetCoreID>
   155b8:	4603      	mov	r3, r0
   155ba:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]--;
   155bc:	4a0d      	ldr	r2, [pc, #52]	; (155f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   155be:	9b01      	ldr	r3, [sp, #4]
   155c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155c4:	1e5a      	subs	r2, r3, #1
   155c6:	490b      	ldr	r1, [pc, #44]	; (155f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   155c8:	9b01      	ldr	r3, [sp, #4]
   155ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_99[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]))         /*if interrupts were enabled*/
   155ce:	4a0a      	ldr	r2, [pc, #40]	; (155f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x48>)
   155d0:	9b01      	ldr	r3, [sp, #4]
   155d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155d6:	f003 0301 	and.w	r3, r3, #1
   155da:	2b00      	cmp	r3, #0
   155dc:	d106      	bne.n	155ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
   155de:	4a05      	ldr	r2, [pc, #20]	; (155f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   155e0:	9b01      	ldr	r3, [sp, #4]
   155e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155e6:	2b00      	cmp	r3, #0
   155e8:	d100      	bne.n	155ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   155ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   155ec:	bf00      	nop
   155ee:	b003      	add	sp, #12
   155f0:	f85d fb04 	ldr.w	pc, [sp], #4
   155f4:	1fff9520 	.word	0x1fff9520
   155f8:	1fff951c 	.word	0x1fff951c

000155fc <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
   155fc:	b500      	push	{lr}
   155fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15600:	f7ec fa20 	bl	1a44 <Sys_GetCoreID>
   15604:	4603      	mov	r3, r0
   15606:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId])
   15608:	4a10      	ldr	r2, [pc, #64]	; (1564c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
   1560a:	9b01      	ldr	r3, [sp, #4]
   1560c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15610:	2b00      	cmp	r3, #0
   15612:	d10d      	bne.n	15630 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15614:	f7eb f97d 	bl	912 <Dio_schm_read_msr>
   15618:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1561a:	9b00      	ldr	r3, [sp, #0]
   1561c:	f003 0301 	and.w	r3, r3, #1
   15620:	2b00      	cmp	r3, #0
   15622:	d100      	bne.n	15626 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15624:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   15626:	490a      	ldr	r1, [pc, #40]	; (15650 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x54>)
   15628:	9b01      	ldr	r3, [sp, #4]
   1562a:	9a00      	ldr	r2, [sp, #0]
   1562c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]++;
   15630:	4a06      	ldr	r2, [pc, #24]	; (1564c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
   15632:	9b01      	ldr	r3, [sp, #4]
   15634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15638:	1c5a      	adds	r2, r3, #1
   1563a:	4904      	ldr	r1, [pc, #16]	; (1564c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
   1563c:	9b01      	ldr	r3, [sp, #4]
   1563e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15642:	bf00      	nop
   15644:	b003      	add	sp, #12
   15646:	f85d fb04 	ldr.w	pc, [sp], #4
   1564a:	bf00      	nop
   1564c:	1fff9528 	.word	0x1fff9528
   15650:	1fff9524 	.word	0x1fff9524

00015654 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
   15654:	b500      	push	{lr}
   15656:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15658:	f7ec f9f4 	bl	1a44 <Sys_GetCoreID>
   1565c:	4603      	mov	r3, r0
   1565e:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]--;
   15660:	4a0d      	ldr	r2, [pc, #52]	; (15698 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
   15662:	9b01      	ldr	r3, [sp, #4]
   15664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15668:	1e5a      	subs	r2, r3, #1
   1566a:	490b      	ldr	r1, [pc, #44]	; (15698 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
   1566c:	9b01      	ldr	r3, [sp, #4]
   1566e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   15672:	4a0a      	ldr	r2, [pc, #40]	; (1569c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x48>)
   15674:	9b01      	ldr	r3, [sp, #4]
   15676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1567a:	f003 0301 	and.w	r3, r3, #1
   1567e:	2b00      	cmp	r3, #0
   15680:	d106      	bne.n	15690 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
   15682:	4a05      	ldr	r2, [pc, #20]	; (15698 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
   15684:	9b01      	ldr	r3, [sp, #4]
   15686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1568a:	2b00      	cmp	r3, #0
   1568c:	d100      	bne.n	15690 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1568e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15690:	bf00      	nop
   15692:	b003      	add	sp, #12
   15694:	f85d fb04 	ldr.w	pc, [sp], #4
   15698:	1fff9528 	.word	0x1fff9528
   1569c:	1fff9524 	.word	0x1fff9524

000156a0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
   156a0:	b500      	push	{lr}
   156a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   156a4:	f7ec f9ce 	bl	1a44 <Sys_GetCoreID>
   156a8:	4603      	mov	r3, r0
   156aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId])
   156ac:	4a10      	ldr	r2, [pc, #64]	; (156f0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
   156ae:	9b01      	ldr	r3, [sp, #4]
   156b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156b4:	2b00      	cmp	r3, #0
   156b6:	d10d      	bne.n	156d4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
   156b8:	f7eb f92b 	bl	912 <Dio_schm_read_msr>
   156bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   156be:	9b00      	ldr	r3, [sp, #0]
   156c0:	f003 0301 	and.w	r3, r3, #1
   156c4:	2b00      	cmp	r3, #0
   156c6:	d100      	bne.n	156ca <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   156c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   156ca:	490a      	ldr	r1, [pc, #40]	; (156f4 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x54>)
   156cc:	9b01      	ldr	r3, [sp, #4]
   156ce:	9a00      	ldr	r2, [sp, #0]
   156d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]++;
   156d4:	4a06      	ldr	r2, [pc, #24]	; (156f0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
   156d6:	9b01      	ldr	r3, [sp, #4]
   156d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156dc:	1c5a      	adds	r2, r3, #1
   156de:	4904      	ldr	r1, [pc, #16]	; (156f0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
   156e0:	9b01      	ldr	r3, [sp, #4]
   156e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   156e6:	bf00      	nop
   156e8:	b003      	add	sp, #12
   156ea:	f85d fb04 	ldr.w	pc, [sp], #4
   156ee:	bf00      	nop
   156f0:	1fff9530 	.word	0x1fff9530
   156f4:	1fff952c 	.word	0x1fff952c

000156f8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
   156f8:	b500      	push	{lr}
   156fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   156fc:	f7ec f9a2 	bl	1a44 <Sys_GetCoreID>
   15700:	4603      	mov	r3, r0
   15702:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]--;
   15704:	4a0d      	ldr	r2, [pc, #52]	; (1573c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
   15706:	9b01      	ldr	r3, [sp, #4]
   15708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1570c:	1e5a      	subs	r2, r3, #1
   1570e:	490b      	ldr	r1, [pc, #44]	; (1573c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
   15710:	9b01      	ldr	r3, [sp, #4]
   15712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   15716:	4a0a      	ldr	r2, [pc, #40]	; (15740 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x48>)
   15718:	9b01      	ldr	r3, [sp, #4]
   1571a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1571e:	f003 0301 	and.w	r3, r3, #1
   15722:	2b00      	cmp	r3, #0
   15724:	d106      	bne.n	15734 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
   15726:	4a05      	ldr	r2, [pc, #20]	; (1573c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
   15728:	9b01      	ldr	r3, [sp, #4]
   1572a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1572e:	2b00      	cmp	r3, #0
   15730:	d100      	bne.n	15734 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15732:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15734:	bf00      	nop
   15736:	b003      	add	sp, #12
   15738:	f85d fb04 	ldr.w	pc, [sp], #4
   1573c:	1fff9530 	.word	0x1fff9530
   15740:	1fff952c 	.word	0x1fff952c

00015744 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
   15744:	b500      	push	{lr}
   15746:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15748:	f7ec f97c 	bl	1a44 <Sys_GetCoreID>
   1574c:	4603      	mov	r3, r0
   1574e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
   15750:	4a10      	ldr	r2, [pc, #64]	; (15794 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   15752:	9b01      	ldr	r3, [sp, #4]
   15754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15758:	2b00      	cmp	r3, #0
   1575a:	d10d      	bne.n	15778 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1575c:	f7eb f8e2 	bl	924 <Mcu_schm_read_msr>
   15760:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15762:	9b00      	ldr	r3, [sp, #0]
   15764:	f003 0301 	and.w	r3, r3, #1
   15768:	2b00      	cmp	r3, #0
   1576a:	d100      	bne.n	1576e <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1576c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   1576e:	490a      	ldr	r1, [pc, #40]	; (15798 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
   15770:	9b01      	ldr	r3, [sp, #4]
   15772:	9a00      	ldr	r2, [sp, #0]
   15774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
   15778:	4a06      	ldr	r2, [pc, #24]	; (15794 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   1577a:	9b01      	ldr	r3, [sp, #4]
   1577c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15780:	1c5a      	adds	r2, r3, #1
   15782:	4904      	ldr	r1, [pc, #16]	; (15794 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   15784:	9b01      	ldr	r3, [sp, #4]
   15786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1578a:	bf00      	nop
   1578c:	b003      	add	sp, #12
   1578e:	f85d fb04 	ldr.w	pc, [sp], #4
   15792:	bf00      	nop
   15794:	1fff9538 	.word	0x1fff9538
   15798:	1fff9534 	.word	0x1fff9534

0001579c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
   1579c:	b500      	push	{lr}
   1579e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   157a0:	f7ec f950 	bl	1a44 <Sys_GetCoreID>
   157a4:	4603      	mov	r3, r0
   157a6:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
   157a8:	4a0d      	ldr	r2, [pc, #52]	; (157e0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   157aa:	9b01      	ldr	r3, [sp, #4]
   157ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157b0:	1e5a      	subs	r2, r3, #1
   157b2:	490b      	ldr	r1, [pc, #44]	; (157e0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   157b4:	9b01      	ldr	r3, [sp, #4]
   157b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   157ba:	4a0a      	ldr	r2, [pc, #40]	; (157e4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
   157bc:	9b01      	ldr	r3, [sp, #4]
   157be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157c2:	f003 0301 	and.w	r3, r3, #1
   157c6:	2b00      	cmp	r3, #0
   157c8:	d106      	bne.n	157d8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
   157ca:	4a05      	ldr	r2, [pc, #20]	; (157e0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   157cc:	9b01      	ldr	r3, [sp, #4]
   157ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157d2:	2b00      	cmp	r3, #0
   157d4:	d100      	bne.n	157d8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   157d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   157d8:	bf00      	nop
   157da:	b003      	add	sp, #12
   157dc:	f85d fb04 	ldr.w	pc, [sp], #4
   157e0:	1fff9538 	.word	0x1fff9538
   157e4:	1fff9534 	.word	0x1fff9534

000157e8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
   157e8:	b500      	push	{lr}
   157ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   157ec:	f7ec f92a 	bl	1a44 <Sys_GetCoreID>
   157f0:	4603      	mov	r3, r0
   157f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
   157f4:	4a10      	ldr	r2, [pc, #64]	; (15838 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   157f6:	9b01      	ldr	r3, [sp, #4]
   157f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157fc:	2b00      	cmp	r3, #0
   157fe:	d10d      	bne.n	1581c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15800:	f7eb f890 	bl	924 <Mcu_schm_read_msr>
   15804:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15806:	9b00      	ldr	r3, [sp, #0]
   15808:	f003 0301 	and.w	r3, r3, #1
   1580c:	2b00      	cmp	r3, #0
   1580e:	d100      	bne.n	15812 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15810:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   15812:	490a      	ldr	r1, [pc, #40]	; (1583c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
   15814:	9b01      	ldr	r3, [sp, #4]
   15816:	9a00      	ldr	r2, [sp, #0]
   15818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
   1581c:	4a06      	ldr	r2, [pc, #24]	; (15838 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   1581e:	9b01      	ldr	r3, [sp, #4]
   15820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15824:	1c5a      	adds	r2, r3, #1
   15826:	4904      	ldr	r1, [pc, #16]	; (15838 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   15828:	9b01      	ldr	r3, [sp, #4]
   1582a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1582e:	bf00      	nop
   15830:	b003      	add	sp, #12
   15832:	f85d fb04 	ldr.w	pc, [sp], #4
   15836:	bf00      	nop
   15838:	1fff9540 	.word	0x1fff9540
   1583c:	1fff953c 	.word	0x1fff953c

00015840 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
   15840:	b500      	push	{lr}
   15842:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15844:	f7ec f8fe 	bl	1a44 <Sys_GetCoreID>
   15848:	4603      	mov	r3, r0
   1584a:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
   1584c:	4a0d      	ldr	r2, [pc, #52]	; (15884 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   1584e:	9b01      	ldr	r3, [sp, #4]
   15850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15854:	1e5a      	subs	r2, r3, #1
   15856:	490b      	ldr	r1, [pc, #44]	; (15884 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   15858:	9b01      	ldr	r3, [sp, #4]
   1585a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   1585e:	4a0a      	ldr	r2, [pc, #40]	; (15888 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
   15860:	9b01      	ldr	r3, [sp, #4]
   15862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15866:	f003 0301 	and.w	r3, r3, #1
   1586a:	2b00      	cmp	r3, #0
   1586c:	d106      	bne.n	1587c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
   1586e:	4a05      	ldr	r2, [pc, #20]	; (15884 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   15870:	9b01      	ldr	r3, [sp, #4]
   15872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15876:	2b00      	cmp	r3, #0
   15878:	d100      	bne.n	1587c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1587a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1587c:	bf00      	nop
   1587e:	b003      	add	sp, #12
   15880:	f85d fb04 	ldr.w	pc, [sp], #4
   15884:	1fff9540 	.word	0x1fff9540
   15888:	1fff953c 	.word	0x1fff953c

0001588c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
   1588c:	b500      	push	{lr}
   1588e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15890:	f7ec f8d8 	bl	1a44 <Sys_GetCoreID>
   15894:	4603      	mov	r3, r0
   15896:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
   15898:	4a10      	ldr	r2, [pc, #64]	; (158dc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   1589a:	9b01      	ldr	r3, [sp, #4]
   1589c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158a0:	2b00      	cmp	r3, #0
   158a2:	d10d      	bne.n	158c0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   158a4:	f7eb f83e 	bl	924 <Mcu_schm_read_msr>
   158a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   158aa:	9b00      	ldr	r3, [sp, #0]
   158ac:	f003 0301 	and.w	r3, r3, #1
   158b0:	2b00      	cmp	r3, #0
   158b2:	d100      	bne.n	158b6 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   158b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   158b6:	490a      	ldr	r1, [pc, #40]	; (158e0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
   158b8:	9b01      	ldr	r3, [sp, #4]
   158ba:	9a00      	ldr	r2, [sp, #0]
   158bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
   158c0:	4a06      	ldr	r2, [pc, #24]	; (158dc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   158c2:	9b01      	ldr	r3, [sp, #4]
   158c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158c8:	1c5a      	adds	r2, r3, #1
   158ca:	4904      	ldr	r1, [pc, #16]	; (158dc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   158cc:	9b01      	ldr	r3, [sp, #4]
   158ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   158d2:	bf00      	nop
   158d4:	b003      	add	sp, #12
   158d6:	f85d fb04 	ldr.w	pc, [sp], #4
   158da:	bf00      	nop
   158dc:	1fff9548 	.word	0x1fff9548
   158e0:	1fff9544 	.word	0x1fff9544

000158e4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
   158e4:	b500      	push	{lr}
   158e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   158e8:	f7ec f8ac 	bl	1a44 <Sys_GetCoreID>
   158ec:	4603      	mov	r3, r0
   158ee:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
   158f0:	4a0d      	ldr	r2, [pc, #52]	; (15928 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   158f2:	9b01      	ldr	r3, [sp, #4]
   158f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158f8:	1e5a      	subs	r2, r3, #1
   158fa:	490b      	ldr	r1, [pc, #44]	; (15928 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   158fc:	9b01      	ldr	r3, [sp, #4]
   158fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   15902:	4a0a      	ldr	r2, [pc, #40]	; (1592c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
   15904:	9b01      	ldr	r3, [sp, #4]
   15906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1590a:	f003 0301 	and.w	r3, r3, #1
   1590e:	2b00      	cmp	r3, #0
   15910:	d106      	bne.n	15920 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
   15912:	4a05      	ldr	r2, [pc, #20]	; (15928 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   15914:	9b01      	ldr	r3, [sp, #4]
   15916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1591a:	2b00      	cmp	r3, #0
   1591c:	d100      	bne.n	15920 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1591e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15920:	bf00      	nop
   15922:	b003      	add	sp, #12
   15924:	f85d fb04 	ldr.w	pc, [sp], #4
   15928:	1fff9548 	.word	0x1fff9548
   1592c:	1fff9544 	.word	0x1fff9544

00015930 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
   15930:	b500      	push	{lr}
   15932:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15934:	f7ec f886 	bl	1a44 <Sys_GetCoreID>
   15938:	4603      	mov	r3, r0
   1593a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
   1593c:	4a10      	ldr	r2, [pc, #64]	; (15980 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   1593e:	9b01      	ldr	r3, [sp, #4]
   15940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15944:	2b00      	cmp	r3, #0
   15946:	d10d      	bne.n	15964 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15948:	f7ea fff5 	bl	936 <Port_schm_read_msr>
   1594c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1594e:	9b00      	ldr	r3, [sp, #0]
   15950:	f003 0301 	and.w	r3, r3, #1
   15954:	2b00      	cmp	r3, #0
   15956:	d100      	bne.n	1595a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15958:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   1595a:	490a      	ldr	r1, [pc, #40]	; (15984 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
   1595c:	9b01      	ldr	r3, [sp, #4]
   1595e:	9a00      	ldr	r2, [sp, #0]
   15960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
   15964:	4a06      	ldr	r2, [pc, #24]	; (15980 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   15966:	9b01      	ldr	r3, [sp, #4]
   15968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1596c:	1c5a      	adds	r2, r3, #1
   1596e:	4904      	ldr	r1, [pc, #16]	; (15980 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   15970:	9b01      	ldr	r3, [sp, #4]
   15972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15976:	bf00      	nop
   15978:	b003      	add	sp, #12
   1597a:	f85d fb04 	ldr.w	pc, [sp], #4
   1597e:	bf00      	nop
   15980:	1fff9550 	.word	0x1fff9550
   15984:	1fff954c 	.word	0x1fff954c

00015988 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
   15988:	b500      	push	{lr}
   1598a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1598c:	f7ec f85a 	bl	1a44 <Sys_GetCoreID>
   15990:	4603      	mov	r3, r0
   15992:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
   15994:	4a0d      	ldr	r2, [pc, #52]	; (159cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   15996:	9b01      	ldr	r3, [sp, #4]
   15998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1599c:	1e5a      	subs	r2, r3, #1
   1599e:	490b      	ldr	r1, [pc, #44]	; (159cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   159a0:	9b01      	ldr	r3, [sp, #4]
   159a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   159a6:	4a0a      	ldr	r2, [pc, #40]	; (159d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
   159a8:	9b01      	ldr	r3, [sp, #4]
   159aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159ae:	f003 0301 	and.w	r3, r3, #1
   159b2:	2b00      	cmp	r3, #0
   159b4:	d106      	bne.n	159c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
   159b6:	4a05      	ldr	r2, [pc, #20]	; (159cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   159b8:	9b01      	ldr	r3, [sp, #4]
   159ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159be:	2b00      	cmp	r3, #0
   159c0:	d100      	bne.n	159c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   159c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   159c4:	bf00      	nop
   159c6:	b003      	add	sp, #12
   159c8:	f85d fb04 	ldr.w	pc, [sp], #4
   159cc:	1fff9550 	.word	0x1fff9550
   159d0:	1fff954c 	.word	0x1fff954c

000159d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
   159d4:	b500      	push	{lr}
   159d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   159d8:	f7ec f834 	bl	1a44 <Sys_GetCoreID>
   159dc:	4603      	mov	r3, r0
   159de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
   159e0:	4a10      	ldr	r2, [pc, #64]	; (15a24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   159e2:	9b01      	ldr	r3, [sp, #4]
   159e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159e8:	2b00      	cmp	r3, #0
   159ea:	d10d      	bne.n	15a08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   159ec:	f7ea ffa3 	bl	936 <Port_schm_read_msr>
   159f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   159f2:	9b00      	ldr	r3, [sp, #0]
   159f4:	f003 0301 	and.w	r3, r3, #1
   159f8:	2b00      	cmp	r3, #0
   159fa:	d100      	bne.n	159fe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   159fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   159fe:	490a      	ldr	r1, [pc, #40]	; (15a28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
   15a00:	9b01      	ldr	r3, [sp, #4]
   15a02:	9a00      	ldr	r2, [sp, #0]
   15a04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
   15a08:	4a06      	ldr	r2, [pc, #24]	; (15a24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   15a0a:	9b01      	ldr	r3, [sp, #4]
   15a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a10:	1c5a      	adds	r2, r3, #1
   15a12:	4904      	ldr	r1, [pc, #16]	; (15a24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   15a14:	9b01      	ldr	r3, [sp, #4]
   15a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15a1a:	bf00      	nop
   15a1c:	b003      	add	sp, #12
   15a1e:	f85d fb04 	ldr.w	pc, [sp], #4
   15a22:	bf00      	nop
   15a24:	1fff9558 	.word	0x1fff9558
   15a28:	1fff9554 	.word	0x1fff9554

00015a2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
   15a2c:	b500      	push	{lr}
   15a2e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15a30:	f7ec f808 	bl	1a44 <Sys_GetCoreID>
   15a34:	4603      	mov	r3, r0
   15a36:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
   15a38:	4a0d      	ldr	r2, [pc, #52]	; (15a70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   15a3a:	9b01      	ldr	r3, [sp, #4]
   15a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a40:	1e5a      	subs	r2, r3, #1
   15a42:	490b      	ldr	r1, [pc, #44]	; (15a70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   15a44:	9b01      	ldr	r3, [sp, #4]
   15a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   15a4a:	4a0a      	ldr	r2, [pc, #40]	; (15a74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
   15a4c:	9b01      	ldr	r3, [sp, #4]
   15a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a52:	f003 0301 	and.w	r3, r3, #1
   15a56:	2b00      	cmp	r3, #0
   15a58:	d106      	bne.n	15a68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
   15a5a:	4a05      	ldr	r2, [pc, #20]	; (15a70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   15a5c:	9b01      	ldr	r3, [sp, #4]
   15a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a62:	2b00      	cmp	r3, #0
   15a64:	d100      	bne.n	15a68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15a66:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15a68:	bf00      	nop
   15a6a:	b003      	add	sp, #12
   15a6c:	f85d fb04 	ldr.w	pc, [sp], #4
   15a70:	1fff9558 	.word	0x1fff9558
   15a74:	1fff9554 	.word	0x1fff9554

00015a78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
   15a78:	b500      	push	{lr}
   15a7a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15a7c:	f7eb ffe2 	bl	1a44 <Sys_GetCoreID>
   15a80:	4603      	mov	r3, r0
   15a82:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
   15a84:	4a10      	ldr	r2, [pc, #64]	; (15ac8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   15a86:	9b01      	ldr	r3, [sp, #4]
   15a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a8c:	2b00      	cmp	r3, #0
   15a8e:	d10d      	bne.n	15aac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15a90:	f7ea ff51 	bl	936 <Port_schm_read_msr>
   15a94:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15a96:	9b00      	ldr	r3, [sp, #0]
   15a98:	f003 0301 	and.w	r3, r3, #1
   15a9c:	2b00      	cmp	r3, #0
   15a9e:	d100      	bne.n	15aa2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15aa0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   15aa2:	490a      	ldr	r1, [pc, #40]	; (15acc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
   15aa4:	9b01      	ldr	r3, [sp, #4]
   15aa6:	9a00      	ldr	r2, [sp, #0]
   15aa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
   15aac:	4a06      	ldr	r2, [pc, #24]	; (15ac8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   15aae:	9b01      	ldr	r3, [sp, #4]
   15ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ab4:	1c5a      	adds	r2, r3, #1
   15ab6:	4904      	ldr	r1, [pc, #16]	; (15ac8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   15ab8:	9b01      	ldr	r3, [sp, #4]
   15aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15abe:	bf00      	nop
   15ac0:	b003      	add	sp, #12
   15ac2:	f85d fb04 	ldr.w	pc, [sp], #4
   15ac6:	bf00      	nop
   15ac8:	1fff9560 	.word	0x1fff9560
   15acc:	1fff955c 	.word	0x1fff955c

00015ad0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
   15ad0:	b500      	push	{lr}
   15ad2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15ad4:	f7eb ffb6 	bl	1a44 <Sys_GetCoreID>
   15ad8:	4603      	mov	r3, r0
   15ada:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
   15adc:	4a0d      	ldr	r2, [pc, #52]	; (15b14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   15ade:	9b01      	ldr	r3, [sp, #4]
   15ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ae4:	1e5a      	subs	r2, r3, #1
   15ae6:	490b      	ldr	r1, [pc, #44]	; (15b14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   15ae8:	9b01      	ldr	r3, [sp, #4]
   15aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   15aee:	4a0a      	ldr	r2, [pc, #40]	; (15b18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
   15af0:	9b01      	ldr	r3, [sp, #4]
   15af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15af6:	f003 0301 	and.w	r3, r3, #1
   15afa:	2b00      	cmp	r3, #0
   15afc:	d106      	bne.n	15b0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
   15afe:	4a05      	ldr	r2, [pc, #20]	; (15b14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   15b00:	9b01      	ldr	r3, [sp, #4]
   15b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b06:	2b00      	cmp	r3, #0
   15b08:	d100      	bne.n	15b0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15b0a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15b0c:	bf00      	nop
   15b0e:	b003      	add	sp, #12
   15b10:	f85d fb04 	ldr.w	pc, [sp], #4
   15b14:	1fff9560 	.word	0x1fff9560
   15b18:	1fff955c 	.word	0x1fff955c

00015b1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
   15b1c:	b500      	push	{lr}
   15b1e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15b20:	f7eb ff90 	bl	1a44 <Sys_GetCoreID>
   15b24:	4603      	mov	r3, r0
   15b26:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
   15b28:	4a10      	ldr	r2, [pc, #64]	; (15b6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   15b2a:	9b01      	ldr	r3, [sp, #4]
   15b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b30:	2b00      	cmp	r3, #0
   15b32:	d10d      	bne.n	15b50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15b34:	f7ea feff 	bl	936 <Port_schm_read_msr>
   15b38:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15b3a:	9b00      	ldr	r3, [sp, #0]
   15b3c:	f003 0301 	and.w	r3, r3, #1
   15b40:	2b00      	cmp	r3, #0
   15b42:	d100      	bne.n	15b46 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15b44:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   15b46:	490a      	ldr	r1, [pc, #40]	; (15b70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
   15b48:	9b01      	ldr	r3, [sp, #4]
   15b4a:	9a00      	ldr	r2, [sp, #0]
   15b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
   15b50:	4a06      	ldr	r2, [pc, #24]	; (15b6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   15b52:	9b01      	ldr	r3, [sp, #4]
   15b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b58:	1c5a      	adds	r2, r3, #1
   15b5a:	4904      	ldr	r1, [pc, #16]	; (15b6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   15b5c:	9b01      	ldr	r3, [sp, #4]
   15b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15b62:	bf00      	nop
   15b64:	b003      	add	sp, #12
   15b66:	f85d fb04 	ldr.w	pc, [sp], #4
   15b6a:	bf00      	nop
   15b6c:	1fff9568 	.word	0x1fff9568
   15b70:	1fff9564 	.word	0x1fff9564

00015b74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
   15b74:	b500      	push	{lr}
   15b76:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15b78:	f7eb ff64 	bl	1a44 <Sys_GetCoreID>
   15b7c:	4603      	mov	r3, r0
   15b7e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
   15b80:	4a0d      	ldr	r2, [pc, #52]	; (15bb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   15b82:	9b01      	ldr	r3, [sp, #4]
   15b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b88:	1e5a      	subs	r2, r3, #1
   15b8a:	490b      	ldr	r1, [pc, #44]	; (15bb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   15b8c:	9b01      	ldr	r3, [sp, #4]
   15b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   15b92:	4a0a      	ldr	r2, [pc, #40]	; (15bbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
   15b94:	9b01      	ldr	r3, [sp, #4]
   15b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b9a:	f003 0301 	and.w	r3, r3, #1
   15b9e:	2b00      	cmp	r3, #0
   15ba0:	d106      	bne.n	15bb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
   15ba2:	4a05      	ldr	r2, [pc, #20]	; (15bb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   15ba4:	9b01      	ldr	r3, [sp, #4]
   15ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15baa:	2b00      	cmp	r3, #0
   15bac:	d100      	bne.n	15bb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15bae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15bb0:	bf00      	nop
   15bb2:	b003      	add	sp, #12
   15bb4:	f85d fb04 	ldr.w	pc, [sp], #4
   15bb8:	1fff9568 	.word	0x1fff9568
   15bbc:	1fff9564 	.word	0x1fff9564

00015bc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
   15bc0:	b500      	push	{lr}
   15bc2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15bc4:	f7eb ff3e 	bl	1a44 <Sys_GetCoreID>
   15bc8:	4603      	mov	r3, r0
   15bca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
   15bcc:	4a10      	ldr	r2, [pc, #64]	; (15c10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   15bce:	9b01      	ldr	r3, [sp, #4]
   15bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15bd4:	2b00      	cmp	r3, #0
   15bd6:	d10d      	bne.n	15bf4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15bd8:	f7ea fead 	bl	936 <Port_schm_read_msr>
   15bdc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15bde:	9b00      	ldr	r3, [sp, #0]
   15be0:	f003 0301 	and.w	r3, r3, #1
   15be4:	2b00      	cmp	r3, #0
   15be6:	d100      	bne.n	15bea <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15be8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   15bea:	490a      	ldr	r1, [pc, #40]	; (15c14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
   15bec:	9b01      	ldr	r3, [sp, #4]
   15bee:	9a00      	ldr	r2, [sp, #0]
   15bf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
   15bf4:	4a06      	ldr	r2, [pc, #24]	; (15c10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   15bf6:	9b01      	ldr	r3, [sp, #4]
   15bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15bfc:	1c5a      	adds	r2, r3, #1
   15bfe:	4904      	ldr	r1, [pc, #16]	; (15c10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   15c00:	9b01      	ldr	r3, [sp, #4]
   15c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15c06:	bf00      	nop
   15c08:	b003      	add	sp, #12
   15c0a:	f85d fb04 	ldr.w	pc, [sp], #4
   15c0e:	bf00      	nop
   15c10:	1fff9570 	.word	0x1fff9570
   15c14:	1fff956c 	.word	0x1fff956c

00015c18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
   15c18:	b500      	push	{lr}
   15c1a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15c1c:	f7eb ff12 	bl	1a44 <Sys_GetCoreID>
   15c20:	4603      	mov	r3, r0
   15c22:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
   15c24:	4a0d      	ldr	r2, [pc, #52]	; (15c5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   15c26:	9b01      	ldr	r3, [sp, #4]
   15c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c2c:	1e5a      	subs	r2, r3, #1
   15c2e:	490b      	ldr	r1, [pc, #44]	; (15c5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   15c30:	9b01      	ldr	r3, [sp, #4]
   15c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   15c36:	4a0a      	ldr	r2, [pc, #40]	; (15c60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
   15c38:	9b01      	ldr	r3, [sp, #4]
   15c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c3e:	f003 0301 	and.w	r3, r3, #1
   15c42:	2b00      	cmp	r3, #0
   15c44:	d106      	bne.n	15c54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
   15c46:	4a05      	ldr	r2, [pc, #20]	; (15c5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   15c48:	9b01      	ldr	r3, [sp, #4]
   15c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c4e:	2b00      	cmp	r3, #0
   15c50:	d100      	bne.n	15c54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15c52:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15c54:	bf00      	nop
   15c56:	b003      	add	sp, #12
   15c58:	f85d fb04 	ldr.w	pc, [sp], #4
   15c5c:	1fff9570 	.word	0x1fff9570
   15c60:	1fff956c 	.word	0x1fff956c

00015c64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
   15c64:	b500      	push	{lr}
   15c66:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15c68:	f7eb feec 	bl	1a44 <Sys_GetCoreID>
   15c6c:	4603      	mov	r3, r0
   15c6e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
   15c70:	4a10      	ldr	r2, [pc, #64]	; (15cb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   15c72:	9b01      	ldr	r3, [sp, #4]
   15c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c78:	2b00      	cmp	r3, #0
   15c7a:	d10d      	bne.n	15c98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15c7c:	f7ea fe5b 	bl	936 <Port_schm_read_msr>
   15c80:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15c82:	9b00      	ldr	r3, [sp, #0]
   15c84:	f003 0301 	and.w	r3, r3, #1
   15c88:	2b00      	cmp	r3, #0
   15c8a:	d100      	bne.n	15c8e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15c8c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   15c8e:	490a      	ldr	r1, [pc, #40]	; (15cb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
   15c90:	9b01      	ldr	r3, [sp, #4]
   15c92:	9a00      	ldr	r2, [sp, #0]
   15c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
   15c98:	4a06      	ldr	r2, [pc, #24]	; (15cb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   15c9a:	9b01      	ldr	r3, [sp, #4]
   15c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ca0:	1c5a      	adds	r2, r3, #1
   15ca2:	4904      	ldr	r1, [pc, #16]	; (15cb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   15ca4:	9b01      	ldr	r3, [sp, #4]
   15ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15caa:	bf00      	nop
   15cac:	b003      	add	sp, #12
   15cae:	f85d fb04 	ldr.w	pc, [sp], #4
   15cb2:	bf00      	nop
   15cb4:	1fff9578 	.word	0x1fff9578
   15cb8:	1fff9574 	.word	0x1fff9574

00015cbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
   15cbc:	b500      	push	{lr}
   15cbe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15cc0:	f7eb fec0 	bl	1a44 <Sys_GetCoreID>
   15cc4:	4603      	mov	r3, r0
   15cc6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
   15cc8:	4a0d      	ldr	r2, [pc, #52]	; (15d00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   15cca:	9b01      	ldr	r3, [sp, #4]
   15ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15cd0:	1e5a      	subs	r2, r3, #1
   15cd2:	490b      	ldr	r1, [pc, #44]	; (15d00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   15cd4:	9b01      	ldr	r3, [sp, #4]
   15cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   15cda:	4a0a      	ldr	r2, [pc, #40]	; (15d04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
   15cdc:	9b01      	ldr	r3, [sp, #4]
   15cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ce2:	f003 0301 	and.w	r3, r3, #1
   15ce6:	2b00      	cmp	r3, #0
   15ce8:	d106      	bne.n	15cf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
   15cea:	4a05      	ldr	r2, [pc, #20]	; (15d00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   15cec:	9b01      	ldr	r3, [sp, #4]
   15cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15cf2:	2b00      	cmp	r3, #0
   15cf4:	d100      	bne.n	15cf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15cf6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15cf8:	bf00      	nop
   15cfa:	b003      	add	sp, #12
   15cfc:	f85d fb04 	ldr.w	pc, [sp], #4
   15d00:	1fff9578 	.word	0x1fff9578
   15d04:	1fff9574 	.word	0x1fff9574

00015d08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
   15d08:	b500      	push	{lr}
   15d0a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15d0c:	f7eb fe9a 	bl	1a44 <Sys_GetCoreID>
   15d10:	4603      	mov	r3, r0
   15d12:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
   15d14:	4a10      	ldr	r2, [pc, #64]	; (15d58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   15d16:	9b01      	ldr	r3, [sp, #4]
   15d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d1c:	2b00      	cmp	r3, #0
   15d1e:	d10d      	bne.n	15d3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15d20:	f7ea fe09 	bl	936 <Port_schm_read_msr>
   15d24:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15d26:	9b00      	ldr	r3, [sp, #0]
   15d28:	f003 0301 	and.w	r3, r3, #1
   15d2c:	2b00      	cmp	r3, #0
   15d2e:	d100      	bne.n	15d32 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15d30:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
   15d32:	490a      	ldr	r1, [pc, #40]	; (15d5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
   15d34:	9b01      	ldr	r3, [sp, #4]
   15d36:	9a00      	ldr	r2, [sp, #0]
   15d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
   15d3c:	4a06      	ldr	r2, [pc, #24]	; (15d58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   15d3e:	9b01      	ldr	r3, [sp, #4]
   15d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d44:	1c5a      	adds	r2, r3, #1
   15d46:	4904      	ldr	r1, [pc, #16]	; (15d58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   15d48:	9b01      	ldr	r3, [sp, #4]
   15d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15d4e:	bf00      	nop
   15d50:	b003      	add	sp, #12
   15d52:	f85d fb04 	ldr.w	pc, [sp], #4
   15d56:	bf00      	nop
   15d58:	1fff9580 	.word	0x1fff9580
   15d5c:	1fff957c 	.word	0x1fff957c

00015d60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
   15d60:	b500      	push	{lr}
   15d62:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15d64:	f7eb fe6e 	bl	1a44 <Sys_GetCoreID>
   15d68:	4603      	mov	r3, r0
   15d6a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
   15d6c:	4a0d      	ldr	r2, [pc, #52]	; (15da4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   15d6e:	9b01      	ldr	r3, [sp, #4]
   15d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d74:	1e5a      	subs	r2, r3, #1
   15d76:	490b      	ldr	r1, [pc, #44]	; (15da4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   15d78:	9b01      	ldr	r3, [sp, #4]
   15d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
   15d7e:	4a0a      	ldr	r2, [pc, #40]	; (15da8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
   15d80:	9b01      	ldr	r3, [sp, #4]
   15d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d86:	f003 0301 	and.w	r3, r3, #1
   15d8a:	2b00      	cmp	r3, #0
   15d8c:	d106      	bne.n	15d9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
   15d8e:	4a05      	ldr	r2, [pc, #20]	; (15da4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   15d90:	9b01      	ldr	r3, [sp, #4]
   15d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d96:	2b00      	cmp	r3, #0
   15d98:	d100      	bne.n	15d9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15d9a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15d9c:	bf00      	nop
   15d9e:	b003      	add	sp, #12
   15da0:	f85d fb04 	ldr.w	pc, [sp], #4
   15da4:	1fff9580 	.word	0x1fff9580
   15da8:	1fff957c 	.word	0x1fff957c

00015dac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
   15dac:	b500      	push	{lr}
   15dae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15db0:	f7eb fe48 	bl	1a44 <Sys_GetCoreID>
   15db4:	4603      	mov	r3, r0
   15db6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
   15db8:	4a10      	ldr	r2, [pc, #64]	; (15dfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   15dba:	9b01      	ldr	r3, [sp, #4]
   15dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15dc0:	2b00      	cmp	r3, #0
   15dc2:	d10d      	bne.n	15de0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15dc4:	f7ea fdb7 	bl	936 <Port_schm_read_msr>
   15dc8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15dca:	9b00      	ldr	r3, [sp, #0]
   15dcc:	f003 0301 	and.w	r3, r3, #1
   15dd0:	2b00      	cmp	r3, #0
   15dd2:	d100      	bne.n	15dd6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15dd4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
   15dd6:	490a      	ldr	r1, [pc, #40]	; (15e00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
   15dd8:	9b01      	ldr	r3, [sp, #4]
   15dda:	9a00      	ldr	r2, [sp, #0]
   15ddc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
   15de0:	4a06      	ldr	r2, [pc, #24]	; (15dfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   15de2:	9b01      	ldr	r3, [sp, #4]
   15de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15de8:	1c5a      	adds	r2, r3, #1
   15dea:	4904      	ldr	r1, [pc, #16]	; (15dfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   15dec:	9b01      	ldr	r3, [sp, #4]
   15dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15df2:	bf00      	nop
   15df4:	b003      	add	sp, #12
   15df6:	f85d fb04 	ldr.w	pc, [sp], #4
   15dfa:	bf00      	nop
   15dfc:	1fff9588 	.word	0x1fff9588
   15e00:	1fff9584 	.word	0x1fff9584

00015e04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
   15e04:	b500      	push	{lr}
   15e06:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15e08:	f7eb fe1c 	bl	1a44 <Sys_GetCoreID>
   15e0c:	4603      	mov	r3, r0
   15e0e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
   15e10:	4a0d      	ldr	r2, [pc, #52]	; (15e48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   15e12:	9b01      	ldr	r3, [sp, #4]
   15e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e18:	1e5a      	subs	r2, r3, #1
   15e1a:	490b      	ldr	r1, [pc, #44]	; (15e48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   15e1c:	9b01      	ldr	r3, [sp, #4]
   15e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
   15e22:	4a0a      	ldr	r2, [pc, #40]	; (15e4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
   15e24:	9b01      	ldr	r3, [sp, #4]
   15e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e2a:	f003 0301 	and.w	r3, r3, #1
   15e2e:	2b00      	cmp	r3, #0
   15e30:	d106      	bne.n	15e40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
   15e32:	4a05      	ldr	r2, [pc, #20]	; (15e48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   15e34:	9b01      	ldr	r3, [sp, #4]
   15e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e3a:	2b00      	cmp	r3, #0
   15e3c:	d100      	bne.n	15e40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15e3e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15e40:	bf00      	nop
   15e42:	b003      	add	sp, #12
   15e44:	f85d fb04 	ldr.w	pc, [sp], #4
   15e48:	1fff9588 	.word	0x1fff9588
   15e4c:	1fff9584 	.word	0x1fff9584

00015e50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
   15e50:	b500      	push	{lr}
   15e52:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15e54:	f7eb fdf6 	bl	1a44 <Sys_GetCoreID>
   15e58:	4603      	mov	r3, r0
   15e5a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
   15e5c:	4a10      	ldr	r2, [pc, #64]	; (15ea0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   15e5e:	9b01      	ldr	r3, [sp, #4]
   15e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e64:	2b00      	cmp	r3, #0
   15e66:	d10d      	bne.n	15e84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15e68:	f7ea fd65 	bl	936 <Port_schm_read_msr>
   15e6c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15e6e:	9b00      	ldr	r3, [sp, #0]
   15e70:	f003 0301 	and.w	r3, r3, #1
   15e74:	2b00      	cmp	r3, #0
   15e76:	d100      	bne.n	15e7a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15e78:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
   15e7a:	490a      	ldr	r1, [pc, #40]	; (15ea4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
   15e7c:	9b01      	ldr	r3, [sp, #4]
   15e7e:	9a00      	ldr	r2, [sp, #0]
   15e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
   15e84:	4a06      	ldr	r2, [pc, #24]	; (15ea0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   15e86:	9b01      	ldr	r3, [sp, #4]
   15e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e8c:	1c5a      	adds	r2, r3, #1
   15e8e:	4904      	ldr	r1, [pc, #16]	; (15ea0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   15e90:	9b01      	ldr	r3, [sp, #4]
   15e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15e96:	bf00      	nop
   15e98:	b003      	add	sp, #12
   15e9a:	f85d fb04 	ldr.w	pc, [sp], #4
   15e9e:	bf00      	nop
   15ea0:	1fff9590 	.word	0x1fff9590
   15ea4:	1fff958c 	.word	0x1fff958c

00015ea8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
   15ea8:	b500      	push	{lr}
   15eaa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15eac:	f7eb fdca 	bl	1a44 <Sys_GetCoreID>
   15eb0:	4603      	mov	r3, r0
   15eb2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
   15eb4:	4a0d      	ldr	r2, [pc, #52]	; (15eec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   15eb6:	9b01      	ldr	r3, [sp, #4]
   15eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ebc:	1e5a      	subs	r2, r3, #1
   15ebe:	490b      	ldr	r1, [pc, #44]	; (15eec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   15ec0:	9b01      	ldr	r3, [sp, #4]
   15ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
   15ec6:	4a0a      	ldr	r2, [pc, #40]	; (15ef0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
   15ec8:	9b01      	ldr	r3, [sp, #4]
   15eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ece:	f003 0301 	and.w	r3, r3, #1
   15ed2:	2b00      	cmp	r3, #0
   15ed4:	d106      	bne.n	15ee4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
   15ed6:	4a05      	ldr	r2, [pc, #20]	; (15eec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   15ed8:	9b01      	ldr	r3, [sp, #4]
   15eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ede:	2b00      	cmp	r3, #0
   15ee0:	d100      	bne.n	15ee4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15ee2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15ee4:	bf00      	nop
   15ee6:	b003      	add	sp, #12
   15ee8:	f85d fb04 	ldr.w	pc, [sp], #4
   15eec:	1fff9590 	.word	0x1fff9590
   15ef0:	1fff958c 	.word	0x1fff958c

00015ef4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
   15ef4:	b500      	push	{lr}
   15ef6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15ef8:	f7eb fda4 	bl	1a44 <Sys_GetCoreID>
   15efc:	4603      	mov	r3, r0
   15efe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
   15f00:	4a10      	ldr	r2, [pc, #64]	; (15f44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   15f02:	9b01      	ldr	r3, [sp, #4]
   15f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f08:	2b00      	cmp	r3, #0
   15f0a:	d10d      	bne.n	15f28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15f0c:	f7ea fd13 	bl	936 <Port_schm_read_msr>
   15f10:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15f12:	9b00      	ldr	r3, [sp, #0]
   15f14:	f003 0301 	and.w	r3, r3, #1
   15f18:	2b00      	cmp	r3, #0
   15f1a:	d100      	bne.n	15f1e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15f1c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
   15f1e:	490a      	ldr	r1, [pc, #40]	; (15f48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
   15f20:	9b01      	ldr	r3, [sp, #4]
   15f22:	9a00      	ldr	r2, [sp, #0]
   15f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
   15f28:	4a06      	ldr	r2, [pc, #24]	; (15f44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   15f2a:	9b01      	ldr	r3, [sp, #4]
   15f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f30:	1c5a      	adds	r2, r3, #1
   15f32:	4904      	ldr	r1, [pc, #16]	; (15f44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   15f34:	9b01      	ldr	r3, [sp, #4]
   15f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15f3a:	bf00      	nop
   15f3c:	b003      	add	sp, #12
   15f3e:	f85d fb04 	ldr.w	pc, [sp], #4
   15f42:	bf00      	nop
   15f44:	1fff9598 	.word	0x1fff9598
   15f48:	1fff9594 	.word	0x1fff9594

00015f4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
   15f4c:	b500      	push	{lr}
   15f4e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15f50:	f7eb fd78 	bl	1a44 <Sys_GetCoreID>
   15f54:	4603      	mov	r3, r0
   15f56:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
   15f58:	4a0d      	ldr	r2, [pc, #52]	; (15f90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   15f5a:	9b01      	ldr	r3, [sp, #4]
   15f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f60:	1e5a      	subs	r2, r3, #1
   15f62:	490b      	ldr	r1, [pc, #44]	; (15f90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   15f64:	9b01      	ldr	r3, [sp, #4]
   15f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
   15f6a:	4a0a      	ldr	r2, [pc, #40]	; (15f94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
   15f6c:	9b01      	ldr	r3, [sp, #4]
   15f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f72:	f003 0301 	and.w	r3, r3, #1
   15f76:	2b00      	cmp	r3, #0
   15f78:	d106      	bne.n	15f88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
   15f7a:	4a05      	ldr	r2, [pc, #20]	; (15f90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   15f7c:	9b01      	ldr	r3, [sp, #4]
   15f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f82:	2b00      	cmp	r3, #0
   15f84:	d100      	bne.n	15f88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15f86:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15f88:	bf00      	nop
   15f8a:	b003      	add	sp, #12
   15f8c:	f85d fb04 	ldr.w	pc, [sp], #4
   15f90:	1fff9598 	.word	0x1fff9598
   15f94:	1fff9594 	.word	0x1fff9594

00015f98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
   15f98:	b500      	push	{lr}
   15f9a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15f9c:	f7eb fd52 	bl	1a44 <Sys_GetCoreID>
   15fa0:	4603      	mov	r3, r0
   15fa2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
   15fa4:	4a10      	ldr	r2, [pc, #64]	; (15fe8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   15fa6:	9b01      	ldr	r3, [sp, #4]
   15fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15fac:	2b00      	cmp	r3, #0
   15fae:	d10d      	bne.n	15fcc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15fb0:	f7ea fcc1 	bl	936 <Port_schm_read_msr>
   15fb4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15fb6:	9b00      	ldr	r3, [sp, #0]
   15fb8:	f003 0301 	and.w	r3, r3, #1
   15fbc:	2b00      	cmp	r3, #0
   15fbe:	d100      	bne.n	15fc2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15fc0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   15fc2:	490a      	ldr	r1, [pc, #40]	; (15fec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
   15fc4:	9b01      	ldr	r3, [sp, #4]
   15fc6:	9a00      	ldr	r2, [sp, #0]
   15fc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
   15fcc:	4a06      	ldr	r2, [pc, #24]	; (15fe8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   15fce:	9b01      	ldr	r3, [sp, #4]
   15fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15fd4:	1c5a      	adds	r2, r3, #1
   15fd6:	4904      	ldr	r1, [pc, #16]	; (15fe8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   15fd8:	9b01      	ldr	r3, [sp, #4]
   15fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15fde:	bf00      	nop
   15fe0:	b003      	add	sp, #12
   15fe2:	f85d fb04 	ldr.w	pc, [sp], #4
   15fe6:	bf00      	nop
   15fe8:	1fff95a0 	.word	0x1fff95a0
   15fec:	1fff959c 	.word	0x1fff959c

00015ff0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
   15ff0:	b500      	push	{lr}
   15ff2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15ff4:	f7eb fd26 	bl	1a44 <Sys_GetCoreID>
   15ff8:	4603      	mov	r3, r0
   15ffa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
   15ffc:	4a0d      	ldr	r2, [pc, #52]	; (16034 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   15ffe:	9b01      	ldr	r3, [sp, #4]
   16000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16004:	1e5a      	subs	r2, r3, #1
   16006:	490b      	ldr	r1, [pc, #44]	; (16034 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   16008:	9b01      	ldr	r3, [sp, #4]
   1600a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   1600e:	4a0a      	ldr	r2, [pc, #40]	; (16038 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
   16010:	9b01      	ldr	r3, [sp, #4]
   16012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16016:	f003 0301 	and.w	r3, r3, #1
   1601a:	2b00      	cmp	r3, #0
   1601c:	d106      	bne.n	1602c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
   1601e:	4a05      	ldr	r2, [pc, #20]	; (16034 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   16020:	9b01      	ldr	r3, [sp, #4]
   16022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16026:	2b00      	cmp	r3, #0
   16028:	d100      	bne.n	1602c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1602a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1602c:	bf00      	nop
   1602e:	b003      	add	sp, #12
   16030:	f85d fb04 	ldr.w	pc, [sp], #4
   16034:	1fff95a0 	.word	0x1fff95a0
   16038:	1fff959c 	.word	0x1fff959c

0001603c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
   1603c:	b500      	push	{lr}
   1603e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16040:	f7eb fd00 	bl	1a44 <Sys_GetCoreID>
   16044:	4603      	mov	r3, r0
   16046:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
   16048:	4a10      	ldr	r2, [pc, #64]	; (1608c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   1604a:	9b01      	ldr	r3, [sp, #4]
   1604c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16050:	2b00      	cmp	r3, #0
   16052:	d10d      	bne.n	16070 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16054:	f7ea fc6f 	bl	936 <Port_schm_read_msr>
   16058:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1605a:	9b00      	ldr	r3, [sp, #0]
   1605c:	f003 0301 	and.w	r3, r3, #1
   16060:	2b00      	cmp	r3, #0
   16062:	d100      	bne.n	16066 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16064:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   16066:	490a      	ldr	r1, [pc, #40]	; (16090 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
   16068:	9b01      	ldr	r3, [sp, #4]
   1606a:	9a00      	ldr	r2, [sp, #0]
   1606c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
   16070:	4a06      	ldr	r2, [pc, #24]	; (1608c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   16072:	9b01      	ldr	r3, [sp, #4]
   16074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16078:	1c5a      	adds	r2, r3, #1
   1607a:	4904      	ldr	r1, [pc, #16]	; (1608c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   1607c:	9b01      	ldr	r3, [sp, #4]
   1607e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16082:	bf00      	nop
   16084:	b003      	add	sp, #12
   16086:	f85d fb04 	ldr.w	pc, [sp], #4
   1608a:	bf00      	nop
   1608c:	1fff95a8 	.word	0x1fff95a8
   16090:	1fff95a4 	.word	0x1fff95a4

00016094 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
   16094:	b500      	push	{lr}
   16096:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16098:	f7eb fcd4 	bl	1a44 <Sys_GetCoreID>
   1609c:	4603      	mov	r3, r0
   1609e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
   160a0:	4a0d      	ldr	r2, [pc, #52]	; (160d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   160a2:	9b01      	ldr	r3, [sp, #4]
   160a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   160a8:	1e5a      	subs	r2, r3, #1
   160aa:	490b      	ldr	r1, [pc, #44]	; (160d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   160ac:	9b01      	ldr	r3, [sp, #4]
   160ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   160b2:	4a0a      	ldr	r2, [pc, #40]	; (160dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
   160b4:	9b01      	ldr	r3, [sp, #4]
   160b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   160ba:	f003 0301 	and.w	r3, r3, #1
   160be:	2b00      	cmp	r3, #0
   160c0:	d106      	bne.n	160d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
   160c2:	4a05      	ldr	r2, [pc, #20]	; (160d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   160c4:	9b01      	ldr	r3, [sp, #4]
   160c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   160ca:	2b00      	cmp	r3, #0
   160cc:	d100      	bne.n	160d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   160ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   160d0:	bf00      	nop
   160d2:	b003      	add	sp, #12
   160d4:	f85d fb04 	ldr.w	pc, [sp], #4
   160d8:	1fff95a8 	.word	0x1fff95a8
   160dc:	1fff95a4 	.word	0x1fff95a4

000160e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
   160e0:	b500      	push	{lr}
   160e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   160e4:	f7eb fcae 	bl	1a44 <Sys_GetCoreID>
   160e8:	4603      	mov	r3, r0
   160ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
   160ec:	4a10      	ldr	r2, [pc, #64]	; (16130 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   160ee:	9b01      	ldr	r3, [sp, #4]
   160f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   160f4:	2b00      	cmp	r3, #0
   160f6:	d10d      	bne.n	16114 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   160f8:	f7ea fc1d 	bl	936 <Port_schm_read_msr>
   160fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   160fe:	9b00      	ldr	r3, [sp, #0]
   16100:	f003 0301 	and.w	r3, r3, #1
   16104:	2b00      	cmp	r3, #0
   16106:	d100      	bne.n	1610a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16108:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   1610a:	490a      	ldr	r1, [pc, #40]	; (16134 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
   1610c:	9b01      	ldr	r3, [sp, #4]
   1610e:	9a00      	ldr	r2, [sp, #0]
   16110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
   16114:	4a06      	ldr	r2, [pc, #24]	; (16130 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   16116:	9b01      	ldr	r3, [sp, #4]
   16118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1611c:	1c5a      	adds	r2, r3, #1
   1611e:	4904      	ldr	r1, [pc, #16]	; (16130 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   16120:	9b01      	ldr	r3, [sp, #4]
   16122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16126:	bf00      	nop
   16128:	b003      	add	sp, #12
   1612a:	f85d fb04 	ldr.w	pc, [sp], #4
   1612e:	bf00      	nop
   16130:	1fff95b0 	.word	0x1fff95b0
   16134:	1fff95ac 	.word	0x1fff95ac

00016138 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
   16138:	b500      	push	{lr}
   1613a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1613c:	f7eb fc82 	bl	1a44 <Sys_GetCoreID>
   16140:	4603      	mov	r3, r0
   16142:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
   16144:	4a0d      	ldr	r2, [pc, #52]	; (1617c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   16146:	9b01      	ldr	r3, [sp, #4]
   16148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1614c:	1e5a      	subs	r2, r3, #1
   1614e:	490b      	ldr	r1, [pc, #44]	; (1617c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   16150:	9b01      	ldr	r3, [sp, #4]
   16152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   16156:	4a0a      	ldr	r2, [pc, #40]	; (16180 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
   16158:	9b01      	ldr	r3, [sp, #4]
   1615a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1615e:	f003 0301 	and.w	r3, r3, #1
   16162:	2b00      	cmp	r3, #0
   16164:	d106      	bne.n	16174 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
   16166:	4a05      	ldr	r2, [pc, #20]	; (1617c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   16168:	9b01      	ldr	r3, [sp, #4]
   1616a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1616e:	2b00      	cmp	r3, #0
   16170:	d100      	bne.n	16174 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16172:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16174:	bf00      	nop
   16176:	b003      	add	sp, #12
   16178:	f85d fb04 	ldr.w	pc, [sp], #4
   1617c:	1fff95b0 	.word	0x1fff95b0
   16180:	1fff95ac 	.word	0x1fff95ac

00016184 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
   16184:	b500      	push	{lr}
   16186:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16188:	f7eb fc5c 	bl	1a44 <Sys_GetCoreID>
   1618c:	4603      	mov	r3, r0
   1618e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
   16190:	4a10      	ldr	r2, [pc, #64]	; (161d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   16192:	9b01      	ldr	r3, [sp, #4]
   16194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16198:	2b00      	cmp	r3, #0
   1619a:	d10d      	bne.n	161b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1619c:	f7ea fbcb 	bl	936 <Port_schm_read_msr>
   161a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   161a2:	9b00      	ldr	r3, [sp, #0]
   161a4:	f003 0301 	and.w	r3, r3, #1
   161a8:	2b00      	cmp	r3, #0
   161aa:	d100      	bne.n	161ae <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   161ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   161ae:	490a      	ldr	r1, [pc, #40]	; (161d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
   161b0:	9b01      	ldr	r3, [sp, #4]
   161b2:	9a00      	ldr	r2, [sp, #0]
   161b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
   161b8:	4a06      	ldr	r2, [pc, #24]	; (161d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   161ba:	9b01      	ldr	r3, [sp, #4]
   161bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   161c0:	1c5a      	adds	r2, r3, #1
   161c2:	4904      	ldr	r1, [pc, #16]	; (161d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   161c4:	9b01      	ldr	r3, [sp, #4]
   161c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   161ca:	bf00      	nop
   161cc:	b003      	add	sp, #12
   161ce:	f85d fb04 	ldr.w	pc, [sp], #4
   161d2:	bf00      	nop
   161d4:	1fff95b8 	.word	0x1fff95b8
   161d8:	1fff95b4 	.word	0x1fff95b4

000161dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
   161dc:	b500      	push	{lr}
   161de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   161e0:	f7eb fc30 	bl	1a44 <Sys_GetCoreID>
   161e4:	4603      	mov	r3, r0
   161e6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
   161e8:	4a0d      	ldr	r2, [pc, #52]	; (16220 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   161ea:	9b01      	ldr	r3, [sp, #4]
   161ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   161f0:	1e5a      	subs	r2, r3, #1
   161f2:	490b      	ldr	r1, [pc, #44]	; (16220 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   161f4:	9b01      	ldr	r3, [sp, #4]
   161f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   161fa:	4a0a      	ldr	r2, [pc, #40]	; (16224 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
   161fc:	9b01      	ldr	r3, [sp, #4]
   161fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16202:	f003 0301 	and.w	r3, r3, #1
   16206:	2b00      	cmp	r3, #0
   16208:	d106      	bne.n	16218 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
   1620a:	4a05      	ldr	r2, [pc, #20]	; (16220 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   1620c:	9b01      	ldr	r3, [sp, #4]
   1620e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16212:	2b00      	cmp	r3, #0
   16214:	d100      	bne.n	16218 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16216:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16218:	bf00      	nop
   1621a:	b003      	add	sp, #12
   1621c:	f85d fb04 	ldr.w	pc, [sp], #4
   16220:	1fff95b8 	.word	0x1fff95b8
   16224:	1fff95b4 	.word	0x1fff95b4

00016228 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
   16228:	b500      	push	{lr}
   1622a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1622c:	f7eb fc0a 	bl	1a44 <Sys_GetCoreID>
   16230:	4603      	mov	r3, r0
   16232:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
   16234:	4a10      	ldr	r2, [pc, #64]	; (16278 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   16236:	9b01      	ldr	r3, [sp, #4]
   16238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1623c:	2b00      	cmp	r3, #0
   1623e:	d10d      	bne.n	1625c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16240:	f7ea fb79 	bl	936 <Port_schm_read_msr>
   16244:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16246:	9b00      	ldr	r3, [sp, #0]
   16248:	f003 0301 	and.w	r3, r3, #1
   1624c:	2b00      	cmp	r3, #0
   1624e:	d100      	bne.n	16252 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16250:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   16252:	490a      	ldr	r1, [pc, #40]	; (1627c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
   16254:	9b01      	ldr	r3, [sp, #4]
   16256:	9a00      	ldr	r2, [sp, #0]
   16258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
   1625c:	4a06      	ldr	r2, [pc, #24]	; (16278 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   1625e:	9b01      	ldr	r3, [sp, #4]
   16260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16264:	1c5a      	adds	r2, r3, #1
   16266:	4904      	ldr	r1, [pc, #16]	; (16278 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   16268:	9b01      	ldr	r3, [sp, #4]
   1626a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1626e:	bf00      	nop
   16270:	b003      	add	sp, #12
   16272:	f85d fb04 	ldr.w	pc, [sp], #4
   16276:	bf00      	nop
   16278:	1fff95c0 	.word	0x1fff95c0
   1627c:	1fff95bc 	.word	0x1fff95bc

00016280 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
   16280:	b500      	push	{lr}
   16282:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16284:	f7eb fbde 	bl	1a44 <Sys_GetCoreID>
   16288:	4603      	mov	r3, r0
   1628a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
   1628c:	4a0d      	ldr	r2, [pc, #52]	; (162c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   1628e:	9b01      	ldr	r3, [sp, #4]
   16290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16294:	1e5a      	subs	r2, r3, #1
   16296:	490b      	ldr	r1, [pc, #44]	; (162c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   16298:	9b01      	ldr	r3, [sp, #4]
   1629a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   1629e:	4a0a      	ldr	r2, [pc, #40]	; (162c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
   162a0:	9b01      	ldr	r3, [sp, #4]
   162a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   162a6:	f003 0301 	and.w	r3, r3, #1
   162aa:	2b00      	cmp	r3, #0
   162ac:	d106      	bne.n	162bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
   162ae:	4a05      	ldr	r2, [pc, #20]	; (162c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   162b0:	9b01      	ldr	r3, [sp, #4]
   162b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   162b6:	2b00      	cmp	r3, #0
   162b8:	d100      	bne.n	162bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   162ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   162bc:	bf00      	nop
   162be:	b003      	add	sp, #12
   162c0:	f85d fb04 	ldr.w	pc, [sp], #4
   162c4:	1fff95c0 	.word	0x1fff95c0
   162c8:	1fff95bc 	.word	0x1fff95bc

000162cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
   162cc:	b500      	push	{lr}
   162ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   162d0:	f7eb fbb8 	bl	1a44 <Sys_GetCoreID>
   162d4:	4603      	mov	r3, r0
   162d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
   162d8:	4a10      	ldr	r2, [pc, #64]	; (1631c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   162da:	9b01      	ldr	r3, [sp, #4]
   162dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   162e0:	2b00      	cmp	r3, #0
   162e2:	d10d      	bne.n	16300 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   162e4:	f7ea fb27 	bl	936 <Port_schm_read_msr>
   162e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   162ea:	9b00      	ldr	r3, [sp, #0]
   162ec:	f003 0301 	and.w	r3, r3, #1
   162f0:	2b00      	cmp	r3, #0
   162f2:	d100      	bne.n	162f6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   162f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   162f6:	490a      	ldr	r1, [pc, #40]	; (16320 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
   162f8:	9b01      	ldr	r3, [sp, #4]
   162fa:	9a00      	ldr	r2, [sp, #0]
   162fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
   16300:	4a06      	ldr	r2, [pc, #24]	; (1631c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   16302:	9b01      	ldr	r3, [sp, #4]
   16304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16308:	1c5a      	adds	r2, r3, #1
   1630a:	4904      	ldr	r1, [pc, #16]	; (1631c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   1630c:	9b01      	ldr	r3, [sp, #4]
   1630e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16312:	bf00      	nop
   16314:	b003      	add	sp, #12
   16316:	f85d fb04 	ldr.w	pc, [sp], #4
   1631a:	bf00      	nop
   1631c:	1fff95c8 	.word	0x1fff95c8
   16320:	1fff95c4 	.word	0x1fff95c4

00016324 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
   16324:	b500      	push	{lr}
   16326:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16328:	f7eb fb8c 	bl	1a44 <Sys_GetCoreID>
   1632c:	4603      	mov	r3, r0
   1632e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
   16330:	4a0d      	ldr	r2, [pc, #52]	; (16368 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   16332:	9b01      	ldr	r3, [sp, #4]
   16334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16338:	1e5a      	subs	r2, r3, #1
   1633a:	490b      	ldr	r1, [pc, #44]	; (16368 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   1633c:	9b01      	ldr	r3, [sp, #4]
   1633e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   16342:	4a0a      	ldr	r2, [pc, #40]	; (1636c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
   16344:	9b01      	ldr	r3, [sp, #4]
   16346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1634a:	f003 0301 	and.w	r3, r3, #1
   1634e:	2b00      	cmp	r3, #0
   16350:	d106      	bne.n	16360 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
   16352:	4a05      	ldr	r2, [pc, #20]	; (16368 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   16354:	9b01      	ldr	r3, [sp, #4]
   16356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1635a:	2b00      	cmp	r3, #0
   1635c:	d100      	bne.n	16360 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1635e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16360:	bf00      	nop
   16362:	b003      	add	sp, #12
   16364:	f85d fb04 	ldr.w	pc, [sp], #4
   16368:	1fff95c8 	.word	0x1fff95c8
   1636c:	1fff95c4 	.word	0x1fff95c4

00016370 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
   16370:	b500      	push	{lr}
   16372:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16374:	f7eb fb66 	bl	1a44 <Sys_GetCoreID>
   16378:	4603      	mov	r3, r0
   1637a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
   1637c:	4a10      	ldr	r2, [pc, #64]	; (163c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   1637e:	9b01      	ldr	r3, [sp, #4]
   16380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16384:	2b00      	cmp	r3, #0
   16386:	d10d      	bne.n	163a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16388:	f7ea fad5 	bl	936 <Port_schm_read_msr>
   1638c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1638e:	9b00      	ldr	r3, [sp, #0]
   16390:	f003 0301 	and.w	r3, r3, #1
   16394:	2b00      	cmp	r3, #0
   16396:	d100      	bne.n	1639a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16398:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   1639a:	490a      	ldr	r1, [pc, #40]	; (163c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
   1639c:	9b01      	ldr	r3, [sp, #4]
   1639e:	9a00      	ldr	r2, [sp, #0]
   163a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
   163a4:	4a06      	ldr	r2, [pc, #24]	; (163c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   163a6:	9b01      	ldr	r3, [sp, #4]
   163a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   163ac:	1c5a      	adds	r2, r3, #1
   163ae:	4904      	ldr	r1, [pc, #16]	; (163c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   163b0:	9b01      	ldr	r3, [sp, #4]
   163b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   163b6:	bf00      	nop
   163b8:	b003      	add	sp, #12
   163ba:	f85d fb04 	ldr.w	pc, [sp], #4
   163be:	bf00      	nop
   163c0:	1fff95d0 	.word	0x1fff95d0
   163c4:	1fff95cc 	.word	0x1fff95cc

000163c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
   163c8:	b500      	push	{lr}
   163ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   163cc:	f7eb fb3a 	bl	1a44 <Sys_GetCoreID>
   163d0:	4603      	mov	r3, r0
   163d2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
   163d4:	4a0d      	ldr	r2, [pc, #52]	; (1640c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   163d6:	9b01      	ldr	r3, [sp, #4]
   163d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   163dc:	1e5a      	subs	r2, r3, #1
   163de:	490b      	ldr	r1, [pc, #44]	; (1640c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   163e0:	9b01      	ldr	r3, [sp, #4]
   163e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   163e6:	4a0a      	ldr	r2, [pc, #40]	; (16410 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
   163e8:	9b01      	ldr	r3, [sp, #4]
   163ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   163ee:	f003 0301 	and.w	r3, r3, #1
   163f2:	2b00      	cmp	r3, #0
   163f4:	d106      	bne.n	16404 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
   163f6:	4a05      	ldr	r2, [pc, #20]	; (1640c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   163f8:	9b01      	ldr	r3, [sp, #4]
   163fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   163fe:	2b00      	cmp	r3, #0
   16400:	d100      	bne.n	16404 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16402:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16404:	bf00      	nop
   16406:	b003      	add	sp, #12
   16408:	f85d fb04 	ldr.w	pc, [sp], #4
   1640c:	1fff95d0 	.word	0x1fff95d0
   16410:	1fff95cc 	.word	0x1fff95cc

00016414 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
   16414:	b500      	push	{lr}
   16416:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16418:	f7eb fb14 	bl	1a44 <Sys_GetCoreID>
   1641c:	4603      	mov	r3, r0
   1641e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
   16420:	4a10      	ldr	r2, [pc, #64]	; (16464 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   16422:	9b01      	ldr	r3, [sp, #4]
   16424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16428:	2b00      	cmp	r3, #0
   1642a:	d10d      	bne.n	16448 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1642c:	f7ea fa83 	bl	936 <Port_schm_read_msr>
   16430:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16432:	9b00      	ldr	r3, [sp, #0]
   16434:	f003 0301 	and.w	r3, r3, #1
   16438:	2b00      	cmp	r3, #0
   1643a:	d100      	bne.n	1643e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1643c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   1643e:	490a      	ldr	r1, [pc, #40]	; (16468 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
   16440:	9b01      	ldr	r3, [sp, #4]
   16442:	9a00      	ldr	r2, [sp, #0]
   16444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
   16448:	4a06      	ldr	r2, [pc, #24]	; (16464 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   1644a:	9b01      	ldr	r3, [sp, #4]
   1644c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16450:	1c5a      	adds	r2, r3, #1
   16452:	4904      	ldr	r1, [pc, #16]	; (16464 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   16454:	9b01      	ldr	r3, [sp, #4]
   16456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1645a:	bf00      	nop
   1645c:	b003      	add	sp, #12
   1645e:	f85d fb04 	ldr.w	pc, [sp], #4
   16462:	bf00      	nop
   16464:	1fff95d8 	.word	0x1fff95d8
   16468:	1fff95d4 	.word	0x1fff95d4

0001646c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
   1646c:	b500      	push	{lr}
   1646e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16470:	f7eb fae8 	bl	1a44 <Sys_GetCoreID>
   16474:	4603      	mov	r3, r0
   16476:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
   16478:	4a0d      	ldr	r2, [pc, #52]	; (164b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   1647a:	9b01      	ldr	r3, [sp, #4]
   1647c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16480:	1e5a      	subs	r2, r3, #1
   16482:	490b      	ldr	r1, [pc, #44]	; (164b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   16484:	9b01      	ldr	r3, [sp, #4]
   16486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   1648a:	4a0a      	ldr	r2, [pc, #40]	; (164b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
   1648c:	9b01      	ldr	r3, [sp, #4]
   1648e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16492:	f003 0301 	and.w	r3, r3, #1
   16496:	2b00      	cmp	r3, #0
   16498:	d106      	bne.n	164a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
   1649a:	4a05      	ldr	r2, [pc, #20]	; (164b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   1649c:	9b01      	ldr	r3, [sp, #4]
   1649e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   164a2:	2b00      	cmp	r3, #0
   164a4:	d100      	bne.n	164a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   164a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   164a8:	bf00      	nop
   164aa:	b003      	add	sp, #12
   164ac:	f85d fb04 	ldr.w	pc, [sp], #4
   164b0:	1fff95d8 	.word	0x1fff95d8
   164b4:	1fff95d4 	.word	0x1fff95d4

000164b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
   164b8:	b500      	push	{lr}
   164ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   164bc:	f7eb fac2 	bl	1a44 <Sys_GetCoreID>
   164c0:	4603      	mov	r3, r0
   164c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
   164c4:	4a10      	ldr	r2, [pc, #64]	; (16508 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   164c6:	9b01      	ldr	r3, [sp, #4]
   164c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   164cc:	2b00      	cmp	r3, #0
   164ce:	d10d      	bne.n	164ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   164d0:	f7ea fa31 	bl	936 <Port_schm_read_msr>
   164d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   164d6:	9b00      	ldr	r3, [sp, #0]
   164d8:	f003 0301 	and.w	r3, r3, #1
   164dc:	2b00      	cmp	r3, #0
   164de:	d100      	bne.n	164e2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   164e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   164e2:	490a      	ldr	r1, [pc, #40]	; (1650c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
   164e4:	9b01      	ldr	r3, [sp, #4]
   164e6:	9a00      	ldr	r2, [sp, #0]
   164e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
   164ec:	4a06      	ldr	r2, [pc, #24]	; (16508 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   164ee:	9b01      	ldr	r3, [sp, #4]
   164f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   164f4:	1c5a      	adds	r2, r3, #1
   164f6:	4904      	ldr	r1, [pc, #16]	; (16508 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   164f8:	9b01      	ldr	r3, [sp, #4]
   164fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   164fe:	bf00      	nop
   16500:	b003      	add	sp, #12
   16502:	f85d fb04 	ldr.w	pc, [sp], #4
   16506:	bf00      	nop
   16508:	1fff95e0 	.word	0x1fff95e0
   1650c:	1fff95dc 	.word	0x1fff95dc

00016510 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
   16510:	b500      	push	{lr}
   16512:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16514:	f7eb fa96 	bl	1a44 <Sys_GetCoreID>
   16518:	4603      	mov	r3, r0
   1651a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
   1651c:	4a0d      	ldr	r2, [pc, #52]	; (16554 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   1651e:	9b01      	ldr	r3, [sp, #4]
   16520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16524:	1e5a      	subs	r2, r3, #1
   16526:	490b      	ldr	r1, [pc, #44]	; (16554 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   16528:	9b01      	ldr	r3, [sp, #4]
   1652a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   1652e:	4a0a      	ldr	r2, [pc, #40]	; (16558 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
   16530:	9b01      	ldr	r3, [sp, #4]
   16532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16536:	f003 0301 	and.w	r3, r3, #1
   1653a:	2b00      	cmp	r3, #0
   1653c:	d106      	bne.n	1654c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
   1653e:	4a05      	ldr	r2, [pc, #20]	; (16554 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   16540:	9b01      	ldr	r3, [sp, #4]
   16542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16546:	2b00      	cmp	r3, #0
   16548:	d100      	bne.n	1654c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1654a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1654c:	bf00      	nop
   1654e:	b003      	add	sp, #12
   16550:	f85d fb04 	ldr.w	pc, [sp], #4
   16554:	1fff95e0 	.word	0x1fff95e0
   16558:	1fff95dc 	.word	0x1fff95dc

0001655c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
   1655c:	b500      	push	{lr}
   1655e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16560:	f7eb fa70 	bl	1a44 <Sys_GetCoreID>
   16564:	4603      	mov	r3, r0
   16566:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
   16568:	4a10      	ldr	r2, [pc, #64]	; (165ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   1656a:	9b01      	ldr	r3, [sp, #4]
   1656c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16570:	2b00      	cmp	r3, #0
   16572:	d10d      	bne.n	16590 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16574:	f7ea f9df 	bl	936 <Port_schm_read_msr>
   16578:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1657a:	9b00      	ldr	r3, [sp, #0]
   1657c:	f003 0301 	and.w	r3, r3, #1
   16580:	2b00      	cmp	r3, #0
   16582:	d100      	bne.n	16586 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16584:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   16586:	490a      	ldr	r1, [pc, #40]	; (165b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
   16588:	9b01      	ldr	r3, [sp, #4]
   1658a:	9a00      	ldr	r2, [sp, #0]
   1658c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
   16590:	4a06      	ldr	r2, [pc, #24]	; (165ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   16592:	9b01      	ldr	r3, [sp, #4]
   16594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16598:	1c5a      	adds	r2, r3, #1
   1659a:	4904      	ldr	r1, [pc, #16]	; (165ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   1659c:	9b01      	ldr	r3, [sp, #4]
   1659e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   165a2:	bf00      	nop
   165a4:	b003      	add	sp, #12
   165a6:	f85d fb04 	ldr.w	pc, [sp], #4
   165aa:	bf00      	nop
   165ac:	1fff95e8 	.word	0x1fff95e8
   165b0:	1fff95e4 	.word	0x1fff95e4

000165b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
   165b4:	b500      	push	{lr}
   165b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   165b8:	f7eb fa44 	bl	1a44 <Sys_GetCoreID>
   165bc:	4603      	mov	r3, r0
   165be:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
   165c0:	4a0d      	ldr	r2, [pc, #52]	; (165f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   165c2:	9b01      	ldr	r3, [sp, #4]
   165c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   165c8:	1e5a      	subs	r2, r3, #1
   165ca:	490b      	ldr	r1, [pc, #44]	; (165f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   165cc:	9b01      	ldr	r3, [sp, #4]
   165ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   165d2:	4a0a      	ldr	r2, [pc, #40]	; (165fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
   165d4:	9b01      	ldr	r3, [sp, #4]
   165d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   165da:	f003 0301 	and.w	r3, r3, #1
   165de:	2b00      	cmp	r3, #0
   165e0:	d106      	bne.n	165f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
   165e2:	4a05      	ldr	r2, [pc, #20]	; (165f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   165e4:	9b01      	ldr	r3, [sp, #4]
   165e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   165ea:	2b00      	cmp	r3, #0
   165ec:	d100      	bne.n	165f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   165ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   165f0:	bf00      	nop
   165f2:	b003      	add	sp, #12
   165f4:	f85d fb04 	ldr.w	pc, [sp], #4
   165f8:	1fff95e8 	.word	0x1fff95e8
   165fc:	1fff95e4 	.word	0x1fff95e4

00016600 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
   16600:	b500      	push	{lr}
   16602:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16604:	f7eb fa1e 	bl	1a44 <Sys_GetCoreID>
   16608:	4603      	mov	r3, r0
   1660a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
   1660c:	4a10      	ldr	r2, [pc, #64]	; (16650 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   1660e:	9b01      	ldr	r3, [sp, #4]
   16610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16614:	2b00      	cmp	r3, #0
   16616:	d10d      	bne.n	16634 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16618:	f7ea f98d 	bl	936 <Port_schm_read_msr>
   1661c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1661e:	9b00      	ldr	r3, [sp, #0]
   16620:	f003 0301 	and.w	r3, r3, #1
   16624:	2b00      	cmp	r3, #0
   16626:	d100      	bne.n	1662a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16628:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   1662a:	490a      	ldr	r1, [pc, #40]	; (16654 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
   1662c:	9b01      	ldr	r3, [sp, #4]
   1662e:	9a00      	ldr	r2, [sp, #0]
   16630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
   16634:	4a06      	ldr	r2, [pc, #24]	; (16650 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   16636:	9b01      	ldr	r3, [sp, #4]
   16638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1663c:	1c5a      	adds	r2, r3, #1
   1663e:	4904      	ldr	r1, [pc, #16]	; (16650 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   16640:	9b01      	ldr	r3, [sp, #4]
   16642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16646:	bf00      	nop
   16648:	b003      	add	sp, #12
   1664a:	f85d fb04 	ldr.w	pc, [sp], #4
   1664e:	bf00      	nop
   16650:	1fff95f0 	.word	0x1fff95f0
   16654:	1fff95ec 	.word	0x1fff95ec

00016658 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
   16658:	b500      	push	{lr}
   1665a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1665c:	f7eb f9f2 	bl	1a44 <Sys_GetCoreID>
   16660:	4603      	mov	r3, r0
   16662:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
   16664:	4a0d      	ldr	r2, [pc, #52]	; (1669c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   16666:	9b01      	ldr	r3, [sp, #4]
   16668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1666c:	1e5a      	subs	r2, r3, #1
   1666e:	490b      	ldr	r1, [pc, #44]	; (1669c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   16670:	9b01      	ldr	r3, [sp, #4]
   16672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   16676:	4a0a      	ldr	r2, [pc, #40]	; (166a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
   16678:	9b01      	ldr	r3, [sp, #4]
   1667a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1667e:	f003 0301 	and.w	r3, r3, #1
   16682:	2b00      	cmp	r3, #0
   16684:	d106      	bne.n	16694 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
   16686:	4a05      	ldr	r2, [pc, #20]	; (1669c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   16688:	9b01      	ldr	r3, [sp, #4]
   1668a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1668e:	2b00      	cmp	r3, #0
   16690:	d100      	bne.n	16694 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16692:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16694:	bf00      	nop
   16696:	b003      	add	sp, #12
   16698:	f85d fb04 	ldr.w	pc, [sp], #4
   1669c:	1fff95f0 	.word	0x1fff95f0
   166a0:	1fff95ec 	.word	0x1fff95ec

000166a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
   166a4:	b500      	push	{lr}
   166a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   166a8:	f7eb f9cc 	bl	1a44 <Sys_GetCoreID>
   166ac:	4603      	mov	r3, r0
   166ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
   166b0:	4a10      	ldr	r2, [pc, #64]	; (166f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   166b2:	9b01      	ldr	r3, [sp, #4]
   166b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   166b8:	2b00      	cmp	r3, #0
   166ba:	d10d      	bne.n	166d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   166bc:	f7ea f93b 	bl	936 <Port_schm_read_msr>
   166c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   166c2:	9b00      	ldr	r3, [sp, #0]
   166c4:	f003 0301 	and.w	r3, r3, #1
   166c8:	2b00      	cmp	r3, #0
   166ca:	d100      	bne.n	166ce <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   166cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
   166ce:	490a      	ldr	r1, [pc, #40]	; (166f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
   166d0:	9b01      	ldr	r3, [sp, #4]
   166d2:	9a00      	ldr	r2, [sp, #0]
   166d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
   166d8:	4a06      	ldr	r2, [pc, #24]	; (166f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   166da:	9b01      	ldr	r3, [sp, #4]
   166dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   166e0:	1c5a      	adds	r2, r3, #1
   166e2:	4904      	ldr	r1, [pc, #16]	; (166f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   166e4:	9b01      	ldr	r3, [sp, #4]
   166e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   166ea:	bf00      	nop
   166ec:	b003      	add	sp, #12
   166ee:	f85d fb04 	ldr.w	pc, [sp], #4
   166f2:	bf00      	nop
   166f4:	1fff95f8 	.word	0x1fff95f8
   166f8:	1fff95f4 	.word	0x1fff95f4

000166fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
   166fc:	b500      	push	{lr}
   166fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16700:	f7eb f9a0 	bl	1a44 <Sys_GetCoreID>
   16704:	4603      	mov	r3, r0
   16706:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
   16708:	4a0d      	ldr	r2, [pc, #52]	; (16740 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   1670a:	9b01      	ldr	r3, [sp, #4]
   1670c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16710:	1e5a      	subs	r2, r3, #1
   16712:	490b      	ldr	r1, [pc, #44]	; (16740 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   16714:	9b01      	ldr	r3, [sp, #4]
   16716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
   1671a:	4a0a      	ldr	r2, [pc, #40]	; (16744 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
   1671c:	9b01      	ldr	r3, [sp, #4]
   1671e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16722:	f003 0301 	and.w	r3, r3, #1
   16726:	2b00      	cmp	r3, #0
   16728:	d106      	bne.n	16738 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
   1672a:	4a05      	ldr	r2, [pc, #20]	; (16740 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   1672c:	9b01      	ldr	r3, [sp, #4]
   1672e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16732:	2b00      	cmp	r3, #0
   16734:	d100      	bne.n	16738 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16736:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16738:	bf00      	nop
   1673a:	b003      	add	sp, #12
   1673c:	f85d fb04 	ldr.w	pc, [sp], #4
   16740:	1fff95f8 	.word	0x1fff95f8
   16744:	1fff95f4 	.word	0x1fff95f4

00016748 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
   16748:	b500      	push	{lr}
   1674a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1674c:	f7eb f97a 	bl	1a44 <Sys_GetCoreID>
   16750:	4603      	mov	r3, r0
   16752:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
   16754:	4a10      	ldr	r2, [pc, #64]	; (16798 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   16756:	9b01      	ldr	r3, [sp, #4]
   16758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1675c:	2b00      	cmp	r3, #0
   1675e:	d10d      	bne.n	1677c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16760:	f7ea f8e9 	bl	936 <Port_schm_read_msr>
   16764:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16766:	9b00      	ldr	r3, [sp, #0]
   16768:	f003 0301 	and.w	r3, r3, #1
   1676c:	2b00      	cmp	r3, #0
   1676e:	d100      	bne.n	16772 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16770:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
   16772:	490a      	ldr	r1, [pc, #40]	; (1679c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
   16774:	9b01      	ldr	r3, [sp, #4]
   16776:	9a00      	ldr	r2, [sp, #0]
   16778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
   1677c:	4a06      	ldr	r2, [pc, #24]	; (16798 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   1677e:	9b01      	ldr	r3, [sp, #4]
   16780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16784:	1c5a      	adds	r2, r3, #1
   16786:	4904      	ldr	r1, [pc, #16]	; (16798 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   16788:	9b01      	ldr	r3, [sp, #4]
   1678a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1678e:	bf00      	nop
   16790:	b003      	add	sp, #12
   16792:	f85d fb04 	ldr.w	pc, [sp], #4
   16796:	bf00      	nop
   16798:	1fff9600 	.word	0x1fff9600
   1679c:	1fff95fc 	.word	0x1fff95fc

000167a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
   167a0:	b500      	push	{lr}
   167a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   167a4:	f7eb f94e 	bl	1a44 <Sys_GetCoreID>
   167a8:	4603      	mov	r3, r0
   167aa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
   167ac:	4a0d      	ldr	r2, [pc, #52]	; (167e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   167ae:	9b01      	ldr	r3, [sp, #4]
   167b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   167b4:	1e5a      	subs	r2, r3, #1
   167b6:	490b      	ldr	r1, [pc, #44]	; (167e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   167b8:	9b01      	ldr	r3, [sp, #4]
   167ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
   167be:	4a0a      	ldr	r2, [pc, #40]	; (167e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
   167c0:	9b01      	ldr	r3, [sp, #4]
   167c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   167c6:	f003 0301 	and.w	r3, r3, #1
   167ca:	2b00      	cmp	r3, #0
   167cc:	d106      	bne.n	167dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
   167ce:	4a05      	ldr	r2, [pc, #20]	; (167e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   167d0:	9b01      	ldr	r3, [sp, #4]
   167d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   167d6:	2b00      	cmp	r3, #0
   167d8:	d100      	bne.n	167dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   167da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   167dc:	bf00      	nop
   167de:	b003      	add	sp, #12
   167e0:	f85d fb04 	ldr.w	pc, [sp], #4
   167e4:	1fff9600 	.word	0x1fff9600
   167e8:	1fff95fc 	.word	0x1fff95fc

000167ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
   167ec:	b500      	push	{lr}
   167ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   167f0:	f7eb f928 	bl	1a44 <Sys_GetCoreID>
   167f4:	4603      	mov	r3, r0
   167f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
   167f8:	4a10      	ldr	r2, [pc, #64]	; (1683c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   167fa:	9b01      	ldr	r3, [sp, #4]
   167fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16800:	2b00      	cmp	r3, #0
   16802:	d10d      	bne.n	16820 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16804:	f7ea f897 	bl	936 <Port_schm_read_msr>
   16808:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1680a:	9b00      	ldr	r3, [sp, #0]
   1680c:	f003 0301 	and.w	r3, r3, #1
   16810:	2b00      	cmp	r3, #0
   16812:	d100      	bne.n	16816 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16814:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
   16816:	490a      	ldr	r1, [pc, #40]	; (16840 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
   16818:	9b01      	ldr	r3, [sp, #4]
   1681a:	9a00      	ldr	r2, [sp, #0]
   1681c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
   16820:	4a06      	ldr	r2, [pc, #24]	; (1683c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   16822:	9b01      	ldr	r3, [sp, #4]
   16824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16828:	1c5a      	adds	r2, r3, #1
   1682a:	4904      	ldr	r1, [pc, #16]	; (1683c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   1682c:	9b01      	ldr	r3, [sp, #4]
   1682e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16832:	bf00      	nop
   16834:	b003      	add	sp, #12
   16836:	f85d fb04 	ldr.w	pc, [sp], #4
   1683a:	bf00      	nop
   1683c:	1fff9608 	.word	0x1fff9608
   16840:	1fff9604 	.word	0x1fff9604

00016844 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
   16844:	b500      	push	{lr}
   16846:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16848:	f7eb f8fc 	bl	1a44 <Sys_GetCoreID>
   1684c:	4603      	mov	r3, r0
   1684e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
   16850:	4a0d      	ldr	r2, [pc, #52]	; (16888 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   16852:	9b01      	ldr	r3, [sp, #4]
   16854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16858:	1e5a      	subs	r2, r3, #1
   1685a:	490b      	ldr	r1, [pc, #44]	; (16888 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   1685c:	9b01      	ldr	r3, [sp, #4]
   1685e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   16862:	4a0a      	ldr	r2, [pc, #40]	; (1688c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
   16864:	9b01      	ldr	r3, [sp, #4]
   16866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1686a:	f003 0301 	and.w	r3, r3, #1
   1686e:	2b00      	cmp	r3, #0
   16870:	d106      	bne.n	16880 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
   16872:	4a05      	ldr	r2, [pc, #20]	; (16888 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   16874:	9b01      	ldr	r3, [sp, #4]
   16876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1687a:	2b00      	cmp	r3, #0
   1687c:	d100      	bne.n	16880 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1687e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16880:	bf00      	nop
   16882:	b003      	add	sp, #12
   16884:	f85d fb04 	ldr.w	pc, [sp], #4
   16888:	1fff9608 	.word	0x1fff9608
   1688c:	1fff9604 	.word	0x1fff9604

00016890 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   16890:	b500      	push	{lr}
   16892:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16894:	f7eb f8d6 	bl	1a44 <Sys_GetCoreID>
   16898:	4603      	mov	r3, r0
   1689a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
   1689c:	4a10      	ldr	r2, [pc, #64]	; (168e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   1689e:	9b01      	ldr	r3, [sp, #4]
   168a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   168a4:	2b00      	cmp	r3, #0
   168a6:	d10d      	bne.n	168c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   168a8:	f7ea f845 	bl	936 <Port_schm_read_msr>
   168ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   168ae:	9b00      	ldr	r3, [sp, #0]
   168b0:	f003 0301 	and.w	r3, r3, #1
   168b4:	2b00      	cmp	r3, #0
   168b6:	d100      	bne.n	168ba <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   168b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   168ba:	490a      	ldr	r1, [pc, #40]	; (168e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
   168bc:	9b01      	ldr	r3, [sp, #4]
   168be:	9a00      	ldr	r2, [sp, #0]
   168c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
   168c4:	4a06      	ldr	r2, [pc, #24]	; (168e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   168c6:	9b01      	ldr	r3, [sp, #4]
   168c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   168cc:	1c5a      	adds	r2, r3, #1
   168ce:	4904      	ldr	r1, [pc, #16]	; (168e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   168d0:	9b01      	ldr	r3, [sp, #4]
   168d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   168d6:	bf00      	nop
   168d8:	b003      	add	sp, #12
   168da:	f85d fb04 	ldr.w	pc, [sp], #4
   168de:	bf00      	nop
   168e0:	1fff9610 	.word	0x1fff9610
   168e4:	1fff960c 	.word	0x1fff960c

000168e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   168e8:	b500      	push	{lr}
   168ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   168ec:	f7eb f8aa 	bl	1a44 <Sys_GetCoreID>
   168f0:	4603      	mov	r3, r0
   168f2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
   168f4:	4a0d      	ldr	r2, [pc, #52]	; (1692c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   168f6:	9b01      	ldr	r3, [sp, #4]
   168f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   168fc:	1e5a      	subs	r2, r3, #1
   168fe:	490b      	ldr	r1, [pc, #44]	; (1692c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   16900:	9b01      	ldr	r3, [sp, #4]
   16902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   16906:	4a0a      	ldr	r2, [pc, #40]	; (16930 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
   16908:	9b01      	ldr	r3, [sp, #4]
   1690a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1690e:	f003 0301 	and.w	r3, r3, #1
   16912:	2b00      	cmp	r3, #0
   16914:	d106      	bne.n	16924 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
   16916:	4a05      	ldr	r2, [pc, #20]	; (1692c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   16918:	9b01      	ldr	r3, [sp, #4]
   1691a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1691e:	2b00      	cmp	r3, #0
   16920:	d100      	bne.n	16924 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16922:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16924:	bf00      	nop
   16926:	b003      	add	sp, #12
   16928:	f85d fb04 	ldr.w	pc, [sp], #4
   1692c:	1fff9610 	.word	0x1fff9610
   16930:	1fff960c 	.word	0x1fff960c

00016934 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   16934:	b500      	push	{lr}
   16936:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16938:	f7eb f884 	bl	1a44 <Sys_GetCoreID>
   1693c:	4603      	mov	r3, r0
   1693e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
   16940:	4a10      	ldr	r2, [pc, #64]	; (16984 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   16942:	9b01      	ldr	r3, [sp, #4]
   16944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16948:	2b00      	cmp	r3, #0
   1694a:	d10d      	bne.n	16968 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1694c:	f7e9 fff3 	bl	936 <Port_schm_read_msr>
   16950:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16952:	9b00      	ldr	r3, [sp, #0]
   16954:	f003 0301 	and.w	r3, r3, #1
   16958:	2b00      	cmp	r3, #0
   1695a:	d100      	bne.n	1695e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1695c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   1695e:	490a      	ldr	r1, [pc, #40]	; (16988 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
   16960:	9b01      	ldr	r3, [sp, #4]
   16962:	9a00      	ldr	r2, [sp, #0]
   16964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
   16968:	4a06      	ldr	r2, [pc, #24]	; (16984 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   1696a:	9b01      	ldr	r3, [sp, #4]
   1696c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16970:	1c5a      	adds	r2, r3, #1
   16972:	4904      	ldr	r1, [pc, #16]	; (16984 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   16974:	9b01      	ldr	r3, [sp, #4]
   16976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1697a:	bf00      	nop
   1697c:	b003      	add	sp, #12
   1697e:	f85d fb04 	ldr.w	pc, [sp], #4
   16982:	bf00      	nop
   16984:	1fff9618 	.word	0x1fff9618
   16988:	1fff9614 	.word	0x1fff9614

0001698c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   1698c:	b500      	push	{lr}
   1698e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16990:	f7eb f858 	bl	1a44 <Sys_GetCoreID>
   16994:	4603      	mov	r3, r0
   16996:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
   16998:	4a0d      	ldr	r2, [pc, #52]	; (169d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   1699a:	9b01      	ldr	r3, [sp, #4]
   1699c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   169a0:	1e5a      	subs	r2, r3, #1
   169a2:	490b      	ldr	r1, [pc, #44]	; (169d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   169a4:	9b01      	ldr	r3, [sp, #4]
   169a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   169aa:	4a0a      	ldr	r2, [pc, #40]	; (169d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
   169ac:	9b01      	ldr	r3, [sp, #4]
   169ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   169b2:	f003 0301 	and.w	r3, r3, #1
   169b6:	2b00      	cmp	r3, #0
   169b8:	d106      	bne.n	169c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
   169ba:	4a05      	ldr	r2, [pc, #20]	; (169d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   169bc:	9b01      	ldr	r3, [sp, #4]
   169be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   169c2:	2b00      	cmp	r3, #0
   169c4:	d100      	bne.n	169c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   169c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   169c8:	bf00      	nop
   169ca:	b003      	add	sp, #12
   169cc:	f85d fb04 	ldr.w	pc, [sp], #4
   169d0:	1fff9618 	.word	0x1fff9618
   169d4:	1fff9614 	.word	0x1fff9614

000169d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   169d8:	b500      	push	{lr}
   169da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   169dc:	f7eb f832 	bl	1a44 <Sys_GetCoreID>
   169e0:	4603      	mov	r3, r0
   169e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
   169e4:	4a10      	ldr	r2, [pc, #64]	; (16a28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   169e6:	9b01      	ldr	r3, [sp, #4]
   169e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   169ec:	2b00      	cmp	r3, #0
   169ee:	d10d      	bne.n	16a0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   169f0:	f7e9 ffa1 	bl	936 <Port_schm_read_msr>
   169f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   169f6:	9b00      	ldr	r3, [sp, #0]
   169f8:	f003 0301 	and.w	r3, r3, #1
   169fc:	2b00      	cmp	r3, #0
   169fe:	d100      	bne.n	16a02 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16a00:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   16a02:	490a      	ldr	r1, [pc, #40]	; (16a2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
   16a04:	9b01      	ldr	r3, [sp, #4]
   16a06:	9a00      	ldr	r2, [sp, #0]
   16a08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
   16a0c:	4a06      	ldr	r2, [pc, #24]	; (16a28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   16a0e:	9b01      	ldr	r3, [sp, #4]
   16a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16a14:	1c5a      	adds	r2, r3, #1
   16a16:	4904      	ldr	r1, [pc, #16]	; (16a28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   16a18:	9b01      	ldr	r3, [sp, #4]
   16a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16a1e:	bf00      	nop
   16a20:	b003      	add	sp, #12
   16a22:	f85d fb04 	ldr.w	pc, [sp], #4
   16a26:	bf00      	nop
   16a28:	1fff9620 	.word	0x1fff9620
   16a2c:	1fff961c 	.word	0x1fff961c

00016a30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   16a30:	b500      	push	{lr}
   16a32:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16a34:	f7eb f806 	bl	1a44 <Sys_GetCoreID>
   16a38:	4603      	mov	r3, r0
   16a3a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
   16a3c:	4a0d      	ldr	r2, [pc, #52]	; (16a74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   16a3e:	9b01      	ldr	r3, [sp, #4]
   16a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16a44:	1e5a      	subs	r2, r3, #1
   16a46:	490b      	ldr	r1, [pc, #44]	; (16a74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   16a48:	9b01      	ldr	r3, [sp, #4]
   16a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   16a4e:	4a0a      	ldr	r2, [pc, #40]	; (16a78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
   16a50:	9b01      	ldr	r3, [sp, #4]
   16a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16a56:	f003 0301 	and.w	r3, r3, #1
   16a5a:	2b00      	cmp	r3, #0
   16a5c:	d106      	bne.n	16a6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
   16a5e:	4a05      	ldr	r2, [pc, #20]	; (16a74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   16a60:	9b01      	ldr	r3, [sp, #4]
   16a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16a66:	2b00      	cmp	r3, #0
   16a68:	d100      	bne.n	16a6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16a6a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16a6c:	bf00      	nop
   16a6e:	b003      	add	sp, #12
   16a70:	f85d fb04 	ldr.w	pc, [sp], #4
   16a74:	1fff9620 	.word	0x1fff9620
   16a78:	1fff961c 	.word	0x1fff961c

00016a7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   16a7c:	b500      	push	{lr}
   16a7e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16a80:	f7ea ffe0 	bl	1a44 <Sys_GetCoreID>
   16a84:	4603      	mov	r3, r0
   16a86:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
   16a88:	4a10      	ldr	r2, [pc, #64]	; (16acc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   16a8a:	9b01      	ldr	r3, [sp, #4]
   16a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16a90:	2b00      	cmp	r3, #0
   16a92:	d10d      	bne.n	16ab0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16a94:	f7e9 ff4f 	bl	936 <Port_schm_read_msr>
   16a98:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16a9a:	9b00      	ldr	r3, [sp, #0]
   16a9c:	f003 0301 	and.w	r3, r3, #1
   16aa0:	2b00      	cmp	r3, #0
   16aa2:	d100      	bne.n	16aa6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16aa4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   16aa6:	490a      	ldr	r1, [pc, #40]	; (16ad0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
   16aa8:	9b01      	ldr	r3, [sp, #4]
   16aaa:	9a00      	ldr	r2, [sp, #0]
   16aac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
   16ab0:	4a06      	ldr	r2, [pc, #24]	; (16acc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   16ab2:	9b01      	ldr	r3, [sp, #4]
   16ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16ab8:	1c5a      	adds	r2, r3, #1
   16aba:	4904      	ldr	r1, [pc, #16]	; (16acc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   16abc:	9b01      	ldr	r3, [sp, #4]
   16abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16ac2:	bf00      	nop
   16ac4:	b003      	add	sp, #12
   16ac6:	f85d fb04 	ldr.w	pc, [sp], #4
   16aca:	bf00      	nop
   16acc:	1fff9628 	.word	0x1fff9628
   16ad0:	1fff9624 	.word	0x1fff9624

00016ad4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   16ad4:	b500      	push	{lr}
   16ad6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16ad8:	f7ea ffb4 	bl	1a44 <Sys_GetCoreID>
   16adc:	4603      	mov	r3, r0
   16ade:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
   16ae0:	4a0d      	ldr	r2, [pc, #52]	; (16b18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   16ae2:	9b01      	ldr	r3, [sp, #4]
   16ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16ae8:	1e5a      	subs	r2, r3, #1
   16aea:	490b      	ldr	r1, [pc, #44]	; (16b18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   16aec:	9b01      	ldr	r3, [sp, #4]
   16aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   16af2:	4a0a      	ldr	r2, [pc, #40]	; (16b1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
   16af4:	9b01      	ldr	r3, [sp, #4]
   16af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16afa:	f003 0301 	and.w	r3, r3, #1
   16afe:	2b00      	cmp	r3, #0
   16b00:	d106      	bne.n	16b10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
   16b02:	4a05      	ldr	r2, [pc, #20]	; (16b18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   16b04:	9b01      	ldr	r3, [sp, #4]
   16b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16b0a:	2b00      	cmp	r3, #0
   16b0c:	d100      	bne.n	16b10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16b0e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16b10:	bf00      	nop
   16b12:	b003      	add	sp, #12
   16b14:	f85d fb04 	ldr.w	pc, [sp], #4
   16b18:	1fff9628 	.word	0x1fff9628
   16b1c:	1fff9624 	.word	0x1fff9624

00016b20 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00(void)
{
   16b20:	b500      	push	{lr}
   16b22:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16b24:	f7ea ff8e 	bl	1a44 <Sys_GetCoreID>
   16b28:	4603      	mov	r3, r0
   16b2a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId])
   16b2c:	4a10      	ldr	r2, [pc, #64]	; (16b70 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
   16b2e:	9b01      	ldr	r3, [sp, #4]
   16b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16b34:	2b00      	cmp	r3, #0
   16b36:	d10d      	bne.n	16b54 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16b38:	f7e9 ff06 	bl	948 <Pwm_schm_read_msr>
   16b3c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16b3e:	9b00      	ldr	r3, [sp, #0]
   16b40:	f003 0301 	and.w	r3, r3, #1
   16b44:	2b00      	cmp	r3, #0
   16b46:	d100      	bne.n	16b4a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16b48:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   16b4a:	490a      	ldr	r1, [pc, #40]	; (16b74 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x54>)
   16b4c:	9b01      	ldr	r3, [sp, #4]
   16b4e:	9a00      	ldr	r2, [sp, #0]
   16b50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId]++;
   16b54:	4a06      	ldr	r2, [pc, #24]	; (16b70 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
   16b56:	9b01      	ldr	r3, [sp, #4]
   16b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16b5c:	1c5a      	adds	r2, r3, #1
   16b5e:	4904      	ldr	r1, [pc, #16]	; (16b70 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
   16b60:	9b01      	ldr	r3, [sp, #4]
   16b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16b66:	bf00      	nop
   16b68:	b003      	add	sp, #12
   16b6a:	f85d fb04 	ldr.w	pc, [sp], #4
   16b6e:	bf00      	nop
   16b70:	1fff9630 	.word	0x1fff9630
   16b74:	1fff962c 	.word	0x1fff962c

00016b78 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00(void)
{
   16b78:	b500      	push	{lr}
   16b7a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16b7c:	f7ea ff62 	bl	1a44 <Sys_GetCoreID>
   16b80:	4603      	mov	r3, r0
   16b82:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId]--;
   16b84:	4a0d      	ldr	r2, [pc, #52]	; (16bbc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
   16b86:	9b01      	ldr	r3, [sp, #4]
   16b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16b8c:	1e5a      	subs	r2, r3, #1
   16b8e:	490b      	ldr	r1, [pc, #44]	; (16bbc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
   16b90:	9b01      	ldr	r3, [sp, #4]
   16b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   16b96:	4a0a      	ldr	r2, [pc, #40]	; (16bc0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x48>)
   16b98:	9b01      	ldr	r3, [sp, #4]
   16b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16b9e:	f003 0301 	and.w	r3, r3, #1
   16ba2:	2b00      	cmp	r3, #0
   16ba4:	d106      	bne.n	16bb4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x3c>
   16ba6:	4a05      	ldr	r2, [pc, #20]	; (16bbc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
   16ba8:	9b01      	ldr	r3, [sp, #4]
   16baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16bae:	2b00      	cmp	r3, #0
   16bb0:	d100      	bne.n	16bb4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16bb2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16bb4:	bf00      	nop
   16bb6:	b003      	add	sp, #12
   16bb8:	f85d fb04 	ldr.w	pc, [sp], #4
   16bbc:	1fff9630 	.word	0x1fff9630
   16bc0:	1fff962c 	.word	0x1fff962c

00016bc4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01(void)
{
   16bc4:	b500      	push	{lr}
   16bc6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16bc8:	f7ea ff3c 	bl	1a44 <Sys_GetCoreID>
   16bcc:	4603      	mov	r3, r0
   16bce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId])
   16bd0:	4a10      	ldr	r2, [pc, #64]	; (16c14 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
   16bd2:	9b01      	ldr	r3, [sp, #4]
   16bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16bd8:	2b00      	cmp	r3, #0
   16bda:	d10d      	bne.n	16bf8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16bdc:	f7e9 feb4 	bl	948 <Pwm_schm_read_msr>
   16be0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16be2:	9b00      	ldr	r3, [sp, #0]
   16be4:	f003 0301 	and.w	r3, r3, #1
   16be8:	2b00      	cmp	r3, #0
   16bea:	d100      	bne.n	16bee <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16bec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   16bee:	490a      	ldr	r1, [pc, #40]	; (16c18 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x54>)
   16bf0:	9b01      	ldr	r3, [sp, #4]
   16bf2:	9a00      	ldr	r2, [sp, #0]
   16bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId]++;
   16bf8:	4a06      	ldr	r2, [pc, #24]	; (16c14 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
   16bfa:	9b01      	ldr	r3, [sp, #4]
   16bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16c00:	1c5a      	adds	r2, r3, #1
   16c02:	4904      	ldr	r1, [pc, #16]	; (16c14 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
   16c04:	9b01      	ldr	r3, [sp, #4]
   16c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16c0a:	bf00      	nop
   16c0c:	b003      	add	sp, #12
   16c0e:	f85d fb04 	ldr.w	pc, [sp], #4
   16c12:	bf00      	nop
   16c14:	1fff9638 	.word	0x1fff9638
   16c18:	1fff9634 	.word	0x1fff9634

00016c1c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01(void)
{
   16c1c:	b500      	push	{lr}
   16c1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16c20:	f7ea ff10 	bl	1a44 <Sys_GetCoreID>
   16c24:	4603      	mov	r3, r0
   16c26:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId]--;
   16c28:	4a0d      	ldr	r2, [pc, #52]	; (16c60 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
   16c2a:	9b01      	ldr	r3, [sp, #4]
   16c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16c30:	1e5a      	subs	r2, r3, #1
   16c32:	490b      	ldr	r1, [pc, #44]	; (16c60 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
   16c34:	9b01      	ldr	r3, [sp, #4]
   16c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   16c3a:	4a0a      	ldr	r2, [pc, #40]	; (16c64 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x48>)
   16c3c:	9b01      	ldr	r3, [sp, #4]
   16c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16c42:	f003 0301 	and.w	r3, r3, #1
   16c46:	2b00      	cmp	r3, #0
   16c48:	d106      	bne.n	16c58 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x3c>
   16c4a:	4a05      	ldr	r2, [pc, #20]	; (16c60 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
   16c4c:	9b01      	ldr	r3, [sp, #4]
   16c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16c52:	2b00      	cmp	r3, #0
   16c54:	d100      	bne.n	16c58 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16c56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16c58:	bf00      	nop
   16c5a:	b003      	add	sp, #12
   16c5c:	f85d fb04 	ldr.w	pc, [sp], #4
   16c60:	1fff9638 	.word	0x1fff9638
   16c64:	1fff9634 	.word	0x1fff9634

00016c68 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02(void)
{
   16c68:	b500      	push	{lr}
   16c6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16c6c:	f7ea feea 	bl	1a44 <Sys_GetCoreID>
   16c70:	4603      	mov	r3, r0
   16c72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId])
   16c74:	4a10      	ldr	r2, [pc, #64]	; (16cb8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
   16c76:	9b01      	ldr	r3, [sp, #4]
   16c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16c7c:	2b00      	cmp	r3, #0
   16c7e:	d10d      	bne.n	16c9c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16c80:	f7e9 fe62 	bl	948 <Pwm_schm_read_msr>
   16c84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16c86:	9b00      	ldr	r3, [sp, #0]
   16c88:	f003 0301 	and.w	r3, r3, #1
   16c8c:	2b00      	cmp	r3, #0
   16c8e:	d100      	bne.n	16c92 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16c90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   16c92:	490a      	ldr	r1, [pc, #40]	; (16cbc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x54>)
   16c94:	9b01      	ldr	r3, [sp, #4]
   16c96:	9a00      	ldr	r2, [sp, #0]
   16c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId]++;
   16c9c:	4a06      	ldr	r2, [pc, #24]	; (16cb8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
   16c9e:	9b01      	ldr	r3, [sp, #4]
   16ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16ca4:	1c5a      	adds	r2, r3, #1
   16ca6:	4904      	ldr	r1, [pc, #16]	; (16cb8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
   16ca8:	9b01      	ldr	r3, [sp, #4]
   16caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16cae:	bf00      	nop
   16cb0:	b003      	add	sp, #12
   16cb2:	f85d fb04 	ldr.w	pc, [sp], #4
   16cb6:	bf00      	nop
   16cb8:	1fff9640 	.word	0x1fff9640
   16cbc:	1fff963c 	.word	0x1fff963c

00016cc0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02(void)
{
   16cc0:	b500      	push	{lr}
   16cc2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16cc4:	f7ea febe 	bl	1a44 <Sys_GetCoreID>
   16cc8:	4603      	mov	r3, r0
   16cca:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId]--;
   16ccc:	4a0d      	ldr	r2, [pc, #52]	; (16d04 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
   16cce:	9b01      	ldr	r3, [sp, #4]
   16cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16cd4:	1e5a      	subs	r2, r3, #1
   16cd6:	490b      	ldr	r1, [pc, #44]	; (16d04 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
   16cd8:	9b01      	ldr	r3, [sp, #4]
   16cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   16cde:	4a0a      	ldr	r2, [pc, #40]	; (16d08 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x48>)
   16ce0:	9b01      	ldr	r3, [sp, #4]
   16ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16ce6:	f003 0301 	and.w	r3, r3, #1
   16cea:	2b00      	cmp	r3, #0
   16cec:	d106      	bne.n	16cfc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x3c>
   16cee:	4a05      	ldr	r2, [pc, #20]	; (16d04 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
   16cf0:	9b01      	ldr	r3, [sp, #4]
   16cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16cf6:	2b00      	cmp	r3, #0
   16cf8:	d100      	bne.n	16cfc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16cfa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16cfc:	bf00      	nop
   16cfe:	b003      	add	sp, #12
   16d00:	f85d fb04 	ldr.w	pc, [sp], #4
   16d04:	1fff9640 	.word	0x1fff9640
   16d08:	1fff963c 	.word	0x1fff963c

00016d0c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03(void)
{
   16d0c:	b500      	push	{lr}
   16d0e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16d10:	f7ea fe98 	bl	1a44 <Sys_GetCoreID>
   16d14:	4603      	mov	r3, r0
   16d16:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId])
   16d18:	4a10      	ldr	r2, [pc, #64]	; (16d5c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
   16d1a:	9b01      	ldr	r3, [sp, #4]
   16d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16d20:	2b00      	cmp	r3, #0
   16d22:	d10d      	bne.n	16d40 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16d24:	f7e9 fe10 	bl	948 <Pwm_schm_read_msr>
   16d28:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16d2a:	9b00      	ldr	r3, [sp, #0]
   16d2c:	f003 0301 	and.w	r3, r3, #1
   16d30:	2b00      	cmp	r3, #0
   16d32:	d100      	bne.n	16d36 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16d34:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   16d36:	490a      	ldr	r1, [pc, #40]	; (16d60 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x54>)
   16d38:	9b01      	ldr	r3, [sp, #4]
   16d3a:	9a00      	ldr	r2, [sp, #0]
   16d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId]++;
   16d40:	4a06      	ldr	r2, [pc, #24]	; (16d5c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
   16d42:	9b01      	ldr	r3, [sp, #4]
   16d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16d48:	1c5a      	adds	r2, r3, #1
   16d4a:	4904      	ldr	r1, [pc, #16]	; (16d5c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
   16d4c:	9b01      	ldr	r3, [sp, #4]
   16d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16d52:	bf00      	nop
   16d54:	b003      	add	sp, #12
   16d56:	f85d fb04 	ldr.w	pc, [sp], #4
   16d5a:	bf00      	nop
   16d5c:	1fff9648 	.word	0x1fff9648
   16d60:	1fff9644 	.word	0x1fff9644

00016d64 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03(void)
{
   16d64:	b500      	push	{lr}
   16d66:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16d68:	f7ea fe6c 	bl	1a44 <Sys_GetCoreID>
   16d6c:	4603      	mov	r3, r0
   16d6e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId]--;
   16d70:	4a0d      	ldr	r2, [pc, #52]	; (16da8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
   16d72:	9b01      	ldr	r3, [sp, #4]
   16d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16d78:	1e5a      	subs	r2, r3, #1
   16d7a:	490b      	ldr	r1, [pc, #44]	; (16da8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
   16d7c:	9b01      	ldr	r3, [sp, #4]
   16d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   16d82:	4a0a      	ldr	r2, [pc, #40]	; (16dac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x48>)
   16d84:	9b01      	ldr	r3, [sp, #4]
   16d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16d8a:	f003 0301 	and.w	r3, r3, #1
   16d8e:	2b00      	cmp	r3, #0
   16d90:	d106      	bne.n	16da0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x3c>
   16d92:	4a05      	ldr	r2, [pc, #20]	; (16da8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
   16d94:	9b01      	ldr	r3, [sp, #4]
   16d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16d9a:	2b00      	cmp	r3, #0
   16d9c:	d100      	bne.n	16da0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16d9e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16da0:	bf00      	nop
   16da2:	b003      	add	sp, #12
   16da4:	f85d fb04 	ldr.w	pc, [sp], #4
   16da8:	1fff9648 	.word	0x1fff9648
   16dac:	1fff9644 	.word	0x1fff9644

00016db0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04(void)
{
   16db0:	b500      	push	{lr}
   16db2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16db4:	f7ea fe46 	bl	1a44 <Sys_GetCoreID>
   16db8:	4603      	mov	r3, r0
   16dba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId])
   16dbc:	4a10      	ldr	r2, [pc, #64]	; (16e00 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
   16dbe:	9b01      	ldr	r3, [sp, #4]
   16dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16dc4:	2b00      	cmp	r3, #0
   16dc6:	d10d      	bne.n	16de4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16dc8:	f7e9 fdbe 	bl	948 <Pwm_schm_read_msr>
   16dcc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16dce:	9b00      	ldr	r3, [sp, #0]
   16dd0:	f003 0301 	and.w	r3, r3, #1
   16dd4:	2b00      	cmp	r3, #0
   16dd6:	d100      	bne.n	16dda <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16dd8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   16dda:	490a      	ldr	r1, [pc, #40]	; (16e04 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x54>)
   16ddc:	9b01      	ldr	r3, [sp, #4]
   16dde:	9a00      	ldr	r2, [sp, #0]
   16de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId]++;
   16de4:	4a06      	ldr	r2, [pc, #24]	; (16e00 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
   16de6:	9b01      	ldr	r3, [sp, #4]
   16de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16dec:	1c5a      	adds	r2, r3, #1
   16dee:	4904      	ldr	r1, [pc, #16]	; (16e00 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
   16df0:	9b01      	ldr	r3, [sp, #4]
   16df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16df6:	bf00      	nop
   16df8:	b003      	add	sp, #12
   16dfa:	f85d fb04 	ldr.w	pc, [sp], #4
   16dfe:	bf00      	nop
   16e00:	1fff9650 	.word	0x1fff9650
   16e04:	1fff964c 	.word	0x1fff964c

00016e08 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04(void)
{
   16e08:	b500      	push	{lr}
   16e0a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16e0c:	f7ea fe1a 	bl	1a44 <Sys_GetCoreID>
   16e10:	4603      	mov	r3, r0
   16e12:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId]--;
   16e14:	4a0d      	ldr	r2, [pc, #52]	; (16e4c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
   16e16:	9b01      	ldr	r3, [sp, #4]
   16e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16e1c:	1e5a      	subs	r2, r3, #1
   16e1e:	490b      	ldr	r1, [pc, #44]	; (16e4c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
   16e20:	9b01      	ldr	r3, [sp, #4]
   16e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   16e26:	4a0a      	ldr	r2, [pc, #40]	; (16e50 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x48>)
   16e28:	9b01      	ldr	r3, [sp, #4]
   16e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16e2e:	f003 0301 	and.w	r3, r3, #1
   16e32:	2b00      	cmp	r3, #0
   16e34:	d106      	bne.n	16e44 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x3c>
   16e36:	4a05      	ldr	r2, [pc, #20]	; (16e4c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
   16e38:	9b01      	ldr	r3, [sp, #4]
   16e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16e3e:	2b00      	cmp	r3, #0
   16e40:	d100      	bne.n	16e44 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16e42:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16e44:	bf00      	nop
   16e46:	b003      	add	sp, #12
   16e48:	f85d fb04 	ldr.w	pc, [sp], #4
   16e4c:	1fff9650 	.word	0x1fff9650
   16e50:	1fff964c 	.word	0x1fff964c

00016e54 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05(void)
{
   16e54:	b500      	push	{lr}
   16e56:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16e58:	f7ea fdf4 	bl	1a44 <Sys_GetCoreID>
   16e5c:	4603      	mov	r3, r0
   16e5e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId])
   16e60:	4a10      	ldr	r2, [pc, #64]	; (16ea4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
   16e62:	9b01      	ldr	r3, [sp, #4]
   16e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16e68:	2b00      	cmp	r3, #0
   16e6a:	d10d      	bne.n	16e88 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16e6c:	f7e9 fd6c 	bl	948 <Pwm_schm_read_msr>
   16e70:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16e72:	9b00      	ldr	r3, [sp, #0]
   16e74:	f003 0301 	and.w	r3, r3, #1
   16e78:	2b00      	cmp	r3, #0
   16e7a:	d100      	bne.n	16e7e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16e7c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   16e7e:	490a      	ldr	r1, [pc, #40]	; (16ea8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x54>)
   16e80:	9b01      	ldr	r3, [sp, #4]
   16e82:	9a00      	ldr	r2, [sp, #0]
   16e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId]++;
   16e88:	4a06      	ldr	r2, [pc, #24]	; (16ea4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
   16e8a:	9b01      	ldr	r3, [sp, #4]
   16e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16e90:	1c5a      	adds	r2, r3, #1
   16e92:	4904      	ldr	r1, [pc, #16]	; (16ea4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
   16e94:	9b01      	ldr	r3, [sp, #4]
   16e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16e9a:	bf00      	nop
   16e9c:	b003      	add	sp, #12
   16e9e:	f85d fb04 	ldr.w	pc, [sp], #4
   16ea2:	bf00      	nop
   16ea4:	1fff9658 	.word	0x1fff9658
   16ea8:	1fff9654 	.word	0x1fff9654

00016eac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05(void)
{
   16eac:	b500      	push	{lr}
   16eae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16eb0:	f7ea fdc8 	bl	1a44 <Sys_GetCoreID>
   16eb4:	4603      	mov	r3, r0
   16eb6:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId]--;
   16eb8:	4a0d      	ldr	r2, [pc, #52]	; (16ef0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
   16eba:	9b01      	ldr	r3, [sp, #4]
   16ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16ec0:	1e5a      	subs	r2, r3, #1
   16ec2:	490b      	ldr	r1, [pc, #44]	; (16ef0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
   16ec4:	9b01      	ldr	r3, [sp, #4]
   16ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   16eca:	4a0a      	ldr	r2, [pc, #40]	; (16ef4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x48>)
   16ecc:	9b01      	ldr	r3, [sp, #4]
   16ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16ed2:	f003 0301 	and.w	r3, r3, #1
   16ed6:	2b00      	cmp	r3, #0
   16ed8:	d106      	bne.n	16ee8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x3c>
   16eda:	4a05      	ldr	r2, [pc, #20]	; (16ef0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
   16edc:	9b01      	ldr	r3, [sp, #4]
   16ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16ee2:	2b00      	cmp	r3, #0
   16ee4:	d100      	bne.n	16ee8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16ee6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16ee8:	bf00      	nop
   16eea:	b003      	add	sp, #12
   16eec:	f85d fb04 	ldr.w	pc, [sp], #4
   16ef0:	1fff9658 	.word	0x1fff9658
   16ef4:	1fff9654 	.word	0x1fff9654

00016ef8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06(void)
{
   16ef8:	b500      	push	{lr}
   16efa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16efc:	f7ea fda2 	bl	1a44 <Sys_GetCoreID>
   16f00:	4603      	mov	r3, r0
   16f02:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId])
   16f04:	4a10      	ldr	r2, [pc, #64]	; (16f48 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
   16f06:	9b01      	ldr	r3, [sp, #4]
   16f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16f0c:	2b00      	cmp	r3, #0
   16f0e:	d10d      	bne.n	16f2c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16f10:	f7e9 fd1a 	bl	948 <Pwm_schm_read_msr>
   16f14:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16f16:	9b00      	ldr	r3, [sp, #0]
   16f18:	f003 0301 	and.w	r3, r3, #1
   16f1c:	2b00      	cmp	r3, #0
   16f1e:	d100      	bne.n	16f22 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16f20:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_06[u32CoreId] = msr;
   16f22:	490a      	ldr	r1, [pc, #40]	; (16f4c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x54>)
   16f24:	9b01      	ldr	r3, [sp, #4]
   16f26:	9a00      	ldr	r2, [sp, #0]
   16f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId]++;
   16f2c:	4a06      	ldr	r2, [pc, #24]	; (16f48 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
   16f2e:	9b01      	ldr	r3, [sp, #4]
   16f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16f34:	1c5a      	adds	r2, r3, #1
   16f36:	4904      	ldr	r1, [pc, #16]	; (16f48 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
   16f38:	9b01      	ldr	r3, [sp, #4]
   16f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16f3e:	bf00      	nop
   16f40:	b003      	add	sp, #12
   16f42:	f85d fb04 	ldr.w	pc, [sp], #4
   16f46:	bf00      	nop
   16f48:	1fff9660 	.word	0x1fff9660
   16f4c:	1fff965c 	.word	0x1fff965c

00016f50 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06(void)
{
   16f50:	b500      	push	{lr}
   16f52:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16f54:	f7ea fd76 	bl	1a44 <Sys_GetCoreID>
   16f58:	4603      	mov	r3, r0
   16f5a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId]--;
   16f5c:	4a0d      	ldr	r2, [pc, #52]	; (16f94 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
   16f5e:	9b01      	ldr	r3, [sp, #4]
   16f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16f64:	1e5a      	subs	r2, r3, #1
   16f66:	490b      	ldr	r1, [pc, #44]	; (16f94 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
   16f68:	9b01      	ldr	r3, [sp, #4]
   16f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
   16f6e:	4a0a      	ldr	r2, [pc, #40]	; (16f98 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x48>)
   16f70:	9b01      	ldr	r3, [sp, #4]
   16f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16f76:	f003 0301 	and.w	r3, r3, #1
   16f7a:	2b00      	cmp	r3, #0
   16f7c:	d106      	bne.n	16f8c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x3c>
   16f7e:	4a05      	ldr	r2, [pc, #20]	; (16f94 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
   16f80:	9b01      	ldr	r3, [sp, #4]
   16f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16f86:	2b00      	cmp	r3, #0
   16f88:	d100      	bne.n	16f8c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16f8a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16f8c:	bf00      	nop
   16f8e:	b003      	add	sp, #12
   16f90:	f85d fb04 	ldr.w	pc, [sp], #4
   16f94:	1fff9660 	.word	0x1fff9660
   16f98:	1fff965c 	.word	0x1fff965c

00016f9c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07(void)
{
   16f9c:	b500      	push	{lr}
   16f9e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16fa0:	f7ea fd50 	bl	1a44 <Sys_GetCoreID>
   16fa4:	4603      	mov	r3, r0
   16fa6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId])
   16fa8:	4a10      	ldr	r2, [pc, #64]	; (16fec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
   16faa:	9b01      	ldr	r3, [sp, #4]
   16fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16fb0:	2b00      	cmp	r3, #0
   16fb2:	d10d      	bne.n	16fd0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16fb4:	f7e9 fcc8 	bl	948 <Pwm_schm_read_msr>
   16fb8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16fba:	9b00      	ldr	r3, [sp, #0]
   16fbc:	f003 0301 	and.w	r3, r3, #1
   16fc0:	2b00      	cmp	r3, #0
   16fc2:	d100      	bne.n	16fc6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16fc4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_07[u32CoreId] = msr;
   16fc6:	490a      	ldr	r1, [pc, #40]	; (16ff0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x54>)
   16fc8:	9b01      	ldr	r3, [sp, #4]
   16fca:	9a00      	ldr	r2, [sp, #0]
   16fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId]++;
   16fd0:	4a06      	ldr	r2, [pc, #24]	; (16fec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
   16fd2:	9b01      	ldr	r3, [sp, #4]
   16fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16fd8:	1c5a      	adds	r2, r3, #1
   16fda:	4904      	ldr	r1, [pc, #16]	; (16fec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
   16fdc:	9b01      	ldr	r3, [sp, #4]
   16fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16fe2:	bf00      	nop
   16fe4:	b003      	add	sp, #12
   16fe6:	f85d fb04 	ldr.w	pc, [sp], #4
   16fea:	bf00      	nop
   16fec:	1fff9668 	.word	0x1fff9668
   16ff0:	1fff9664 	.word	0x1fff9664

00016ff4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07(void)
{
   16ff4:	b500      	push	{lr}
   16ff6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16ff8:	f7ea fd24 	bl	1a44 <Sys_GetCoreID>
   16ffc:	4603      	mov	r3, r0
   16ffe:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId]--;
   17000:	4a0d      	ldr	r2, [pc, #52]	; (17038 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
   17002:	9b01      	ldr	r3, [sp, #4]
   17004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17008:	1e5a      	subs	r2, r3, #1
   1700a:	490b      	ldr	r1, [pc, #44]	; (17038 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
   1700c:	9b01      	ldr	r3, [sp, #4]
   1700e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
   17012:	4a0a      	ldr	r2, [pc, #40]	; (1703c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x48>)
   17014:	9b01      	ldr	r3, [sp, #4]
   17016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1701a:	f003 0301 	and.w	r3, r3, #1
   1701e:	2b00      	cmp	r3, #0
   17020:	d106      	bne.n	17030 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x3c>
   17022:	4a05      	ldr	r2, [pc, #20]	; (17038 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
   17024:	9b01      	ldr	r3, [sp, #4]
   17026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1702a:	2b00      	cmp	r3, #0
   1702c:	d100      	bne.n	17030 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1702e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17030:	bf00      	nop
   17032:	b003      	add	sp, #12
   17034:	f85d fb04 	ldr.w	pc, [sp], #4
   17038:	1fff9668 	.word	0x1fff9668
   1703c:	1fff9664 	.word	0x1fff9664

00017040 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08(void)
{
   17040:	b500      	push	{lr}
   17042:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17044:	f7ea fcfe 	bl	1a44 <Sys_GetCoreID>
   17048:	4603      	mov	r3, r0
   1704a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId])
   1704c:	4a10      	ldr	r2, [pc, #64]	; (17090 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
   1704e:	9b01      	ldr	r3, [sp, #4]
   17050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17054:	2b00      	cmp	r3, #0
   17056:	d10d      	bne.n	17074 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17058:	f7e9 fc76 	bl	948 <Pwm_schm_read_msr>
   1705c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1705e:	9b00      	ldr	r3, [sp, #0]
   17060:	f003 0301 	and.w	r3, r3, #1
   17064:	2b00      	cmp	r3, #0
   17066:	d100      	bne.n	1706a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17068:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_08[u32CoreId] = msr;
   1706a:	490a      	ldr	r1, [pc, #40]	; (17094 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x54>)
   1706c:	9b01      	ldr	r3, [sp, #4]
   1706e:	9a00      	ldr	r2, [sp, #0]
   17070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId]++;
   17074:	4a06      	ldr	r2, [pc, #24]	; (17090 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
   17076:	9b01      	ldr	r3, [sp, #4]
   17078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1707c:	1c5a      	adds	r2, r3, #1
   1707e:	4904      	ldr	r1, [pc, #16]	; (17090 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
   17080:	9b01      	ldr	r3, [sp, #4]
   17082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17086:	bf00      	nop
   17088:	b003      	add	sp, #12
   1708a:	f85d fb04 	ldr.w	pc, [sp], #4
   1708e:	bf00      	nop
   17090:	1fff9670 	.word	0x1fff9670
   17094:	1fff966c 	.word	0x1fff966c

00017098 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08(void)
{
   17098:	b500      	push	{lr}
   1709a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1709c:	f7ea fcd2 	bl	1a44 <Sys_GetCoreID>
   170a0:	4603      	mov	r3, r0
   170a2:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId]--;
   170a4:	4a0d      	ldr	r2, [pc, #52]	; (170dc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
   170a6:	9b01      	ldr	r3, [sp, #4]
   170a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   170ac:	1e5a      	subs	r2, r3, #1
   170ae:	490b      	ldr	r1, [pc, #44]	; (170dc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
   170b0:	9b01      	ldr	r3, [sp, #4]
   170b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
   170b6:	4a0a      	ldr	r2, [pc, #40]	; (170e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x48>)
   170b8:	9b01      	ldr	r3, [sp, #4]
   170ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   170be:	f003 0301 	and.w	r3, r3, #1
   170c2:	2b00      	cmp	r3, #0
   170c4:	d106      	bne.n	170d4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x3c>
   170c6:	4a05      	ldr	r2, [pc, #20]	; (170dc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
   170c8:	9b01      	ldr	r3, [sp, #4]
   170ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   170ce:	2b00      	cmp	r3, #0
   170d0:	d100      	bne.n	170d4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   170d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   170d4:	bf00      	nop
   170d6:	b003      	add	sp, #12
   170d8:	f85d fb04 	ldr.w	pc, [sp], #4
   170dc:	1fff9670 	.word	0x1fff9670
   170e0:	1fff966c 	.word	0x1fff966c

000170e4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09(void)
{
   170e4:	b500      	push	{lr}
   170e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   170e8:	f7ea fcac 	bl	1a44 <Sys_GetCoreID>
   170ec:	4603      	mov	r3, r0
   170ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId])
   170f0:	4a10      	ldr	r2, [pc, #64]	; (17134 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
   170f2:	9b01      	ldr	r3, [sp, #4]
   170f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   170f8:	2b00      	cmp	r3, #0
   170fa:	d10d      	bne.n	17118 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   170fc:	f7e9 fc24 	bl	948 <Pwm_schm_read_msr>
   17100:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17102:	9b00      	ldr	r3, [sp, #0]
   17104:	f003 0301 	and.w	r3, r3, #1
   17108:	2b00      	cmp	r3, #0
   1710a:	d100      	bne.n	1710e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1710c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_09[u32CoreId] = msr;
   1710e:	490a      	ldr	r1, [pc, #40]	; (17138 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x54>)
   17110:	9b01      	ldr	r3, [sp, #4]
   17112:	9a00      	ldr	r2, [sp, #0]
   17114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId]++;
   17118:	4a06      	ldr	r2, [pc, #24]	; (17134 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
   1711a:	9b01      	ldr	r3, [sp, #4]
   1711c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17120:	1c5a      	adds	r2, r3, #1
   17122:	4904      	ldr	r1, [pc, #16]	; (17134 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
   17124:	9b01      	ldr	r3, [sp, #4]
   17126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1712a:	bf00      	nop
   1712c:	b003      	add	sp, #12
   1712e:	f85d fb04 	ldr.w	pc, [sp], #4
   17132:	bf00      	nop
   17134:	1fff9678 	.word	0x1fff9678
   17138:	1fff9674 	.word	0x1fff9674

0001713c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09(void)
{
   1713c:	b500      	push	{lr}
   1713e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17140:	f7ea fc80 	bl	1a44 <Sys_GetCoreID>
   17144:	4603      	mov	r3, r0
   17146:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId]--;
   17148:	4a0d      	ldr	r2, [pc, #52]	; (17180 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
   1714a:	9b01      	ldr	r3, [sp, #4]
   1714c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17150:	1e5a      	subs	r2, r3, #1
   17152:	490b      	ldr	r1, [pc, #44]	; (17180 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
   17154:	9b01      	ldr	r3, [sp, #4]
   17156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
   1715a:	4a0a      	ldr	r2, [pc, #40]	; (17184 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x48>)
   1715c:	9b01      	ldr	r3, [sp, #4]
   1715e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17162:	f003 0301 	and.w	r3, r3, #1
   17166:	2b00      	cmp	r3, #0
   17168:	d106      	bne.n	17178 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x3c>
   1716a:	4a05      	ldr	r2, [pc, #20]	; (17180 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
   1716c:	9b01      	ldr	r3, [sp, #4]
   1716e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17172:	2b00      	cmp	r3, #0
   17174:	d100      	bne.n	17178 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17176:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17178:	bf00      	nop
   1717a:	b003      	add	sp, #12
   1717c:	f85d fb04 	ldr.w	pc, [sp], #4
   17180:	1fff9678 	.word	0x1fff9678
   17184:	1fff9674 	.word	0x1fff9674

00017188 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10(void)
{
   17188:	b500      	push	{lr}
   1718a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1718c:	f7ea fc5a 	bl	1a44 <Sys_GetCoreID>
   17190:	4603      	mov	r3, r0
   17192:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId])
   17194:	4a10      	ldr	r2, [pc, #64]	; (171d8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
   17196:	9b01      	ldr	r3, [sp, #4]
   17198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1719c:	2b00      	cmp	r3, #0
   1719e:	d10d      	bne.n	171bc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   171a0:	f7e9 fbd2 	bl	948 <Pwm_schm_read_msr>
   171a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   171a6:	9b00      	ldr	r3, [sp, #0]
   171a8:	f003 0301 	and.w	r3, r3, #1
   171ac:	2b00      	cmp	r3, #0
   171ae:	d100      	bne.n	171b2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   171b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   171b2:	490a      	ldr	r1, [pc, #40]	; (171dc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x54>)
   171b4:	9b01      	ldr	r3, [sp, #4]
   171b6:	9a00      	ldr	r2, [sp, #0]
   171b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId]++;
   171bc:	4a06      	ldr	r2, [pc, #24]	; (171d8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
   171be:	9b01      	ldr	r3, [sp, #4]
   171c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   171c4:	1c5a      	adds	r2, r3, #1
   171c6:	4904      	ldr	r1, [pc, #16]	; (171d8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
   171c8:	9b01      	ldr	r3, [sp, #4]
   171ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   171ce:	bf00      	nop
   171d0:	b003      	add	sp, #12
   171d2:	f85d fb04 	ldr.w	pc, [sp], #4
   171d6:	bf00      	nop
   171d8:	1fff9680 	.word	0x1fff9680
   171dc:	1fff967c 	.word	0x1fff967c

000171e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10(void)
{
   171e0:	b500      	push	{lr}
   171e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   171e4:	f7ea fc2e 	bl	1a44 <Sys_GetCoreID>
   171e8:	4603      	mov	r3, r0
   171ea:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId]--;
   171ec:	4a0d      	ldr	r2, [pc, #52]	; (17224 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
   171ee:	9b01      	ldr	r3, [sp, #4]
   171f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   171f4:	1e5a      	subs	r2, r3, #1
   171f6:	490b      	ldr	r1, [pc, #44]	; (17224 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
   171f8:	9b01      	ldr	r3, [sp, #4]
   171fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   171fe:	4a0a      	ldr	r2, [pc, #40]	; (17228 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x48>)
   17200:	9b01      	ldr	r3, [sp, #4]
   17202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17206:	f003 0301 	and.w	r3, r3, #1
   1720a:	2b00      	cmp	r3, #0
   1720c:	d106      	bne.n	1721c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x3c>
   1720e:	4a05      	ldr	r2, [pc, #20]	; (17224 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
   17210:	9b01      	ldr	r3, [sp, #4]
   17212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17216:	2b00      	cmp	r3, #0
   17218:	d100      	bne.n	1721c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1721a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1721c:	bf00      	nop
   1721e:	b003      	add	sp, #12
   17220:	f85d fb04 	ldr.w	pc, [sp], #4
   17224:	1fff9680 	.word	0x1fff9680
   17228:	1fff967c 	.word	0x1fff967c

0001722c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11(void)
{
   1722c:	b500      	push	{lr}
   1722e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17230:	f7ea fc08 	bl	1a44 <Sys_GetCoreID>
   17234:	4603      	mov	r3, r0
   17236:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId])
   17238:	4a10      	ldr	r2, [pc, #64]	; (1727c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
   1723a:	9b01      	ldr	r3, [sp, #4]
   1723c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17240:	2b00      	cmp	r3, #0
   17242:	d10d      	bne.n	17260 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17244:	f7e9 fb80 	bl	948 <Pwm_schm_read_msr>
   17248:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1724a:	9b00      	ldr	r3, [sp, #0]
   1724c:	f003 0301 	and.w	r3, r3, #1
   17250:	2b00      	cmp	r3, #0
   17252:	d100      	bne.n	17256 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17254:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   17256:	490a      	ldr	r1, [pc, #40]	; (17280 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x54>)
   17258:	9b01      	ldr	r3, [sp, #4]
   1725a:	9a00      	ldr	r2, [sp, #0]
   1725c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId]++;
   17260:	4a06      	ldr	r2, [pc, #24]	; (1727c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
   17262:	9b01      	ldr	r3, [sp, #4]
   17264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17268:	1c5a      	adds	r2, r3, #1
   1726a:	4904      	ldr	r1, [pc, #16]	; (1727c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
   1726c:	9b01      	ldr	r3, [sp, #4]
   1726e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17272:	bf00      	nop
   17274:	b003      	add	sp, #12
   17276:	f85d fb04 	ldr.w	pc, [sp], #4
   1727a:	bf00      	nop
   1727c:	1fff9688 	.word	0x1fff9688
   17280:	1fff9684 	.word	0x1fff9684

00017284 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11(void)
{
   17284:	b500      	push	{lr}
   17286:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17288:	f7ea fbdc 	bl	1a44 <Sys_GetCoreID>
   1728c:	4603      	mov	r3, r0
   1728e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId]--;
   17290:	4a0d      	ldr	r2, [pc, #52]	; (172c8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
   17292:	9b01      	ldr	r3, [sp, #4]
   17294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17298:	1e5a      	subs	r2, r3, #1
   1729a:	490b      	ldr	r1, [pc, #44]	; (172c8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
   1729c:	9b01      	ldr	r3, [sp, #4]
   1729e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   172a2:	4a0a      	ldr	r2, [pc, #40]	; (172cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x48>)
   172a4:	9b01      	ldr	r3, [sp, #4]
   172a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   172aa:	f003 0301 	and.w	r3, r3, #1
   172ae:	2b00      	cmp	r3, #0
   172b0:	d106      	bne.n	172c0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x3c>
   172b2:	4a05      	ldr	r2, [pc, #20]	; (172c8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
   172b4:	9b01      	ldr	r3, [sp, #4]
   172b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   172ba:	2b00      	cmp	r3, #0
   172bc:	d100      	bne.n	172c0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   172be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   172c0:	bf00      	nop
   172c2:	b003      	add	sp, #12
   172c4:	f85d fb04 	ldr.w	pc, [sp], #4
   172c8:	1fff9688 	.word	0x1fff9688
   172cc:	1fff9684 	.word	0x1fff9684

000172d0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12(void)
{
   172d0:	b500      	push	{lr}
   172d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   172d4:	f7ea fbb6 	bl	1a44 <Sys_GetCoreID>
   172d8:	4603      	mov	r3, r0
   172da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId])
   172dc:	4a10      	ldr	r2, [pc, #64]	; (17320 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
   172de:	9b01      	ldr	r3, [sp, #4]
   172e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   172e4:	2b00      	cmp	r3, #0
   172e6:	d10d      	bne.n	17304 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   172e8:	f7e9 fb2e 	bl	948 <Pwm_schm_read_msr>
   172ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   172ee:	9b00      	ldr	r3, [sp, #0]
   172f0:	f003 0301 	and.w	r3, r3, #1
   172f4:	2b00      	cmp	r3, #0
   172f6:	d100      	bne.n	172fa <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   172f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   172fa:	490a      	ldr	r1, [pc, #40]	; (17324 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x54>)
   172fc:	9b01      	ldr	r3, [sp, #4]
   172fe:	9a00      	ldr	r2, [sp, #0]
   17300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId]++;
   17304:	4a06      	ldr	r2, [pc, #24]	; (17320 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
   17306:	9b01      	ldr	r3, [sp, #4]
   17308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1730c:	1c5a      	adds	r2, r3, #1
   1730e:	4904      	ldr	r1, [pc, #16]	; (17320 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
   17310:	9b01      	ldr	r3, [sp, #4]
   17312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17316:	bf00      	nop
   17318:	b003      	add	sp, #12
   1731a:	f85d fb04 	ldr.w	pc, [sp], #4
   1731e:	bf00      	nop
   17320:	1fff9690 	.word	0x1fff9690
   17324:	1fff968c 	.word	0x1fff968c

00017328 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12(void)
{
   17328:	b500      	push	{lr}
   1732a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1732c:	f7ea fb8a 	bl	1a44 <Sys_GetCoreID>
   17330:	4603      	mov	r3, r0
   17332:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId]--;
   17334:	4a0d      	ldr	r2, [pc, #52]	; (1736c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
   17336:	9b01      	ldr	r3, [sp, #4]
   17338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1733c:	1e5a      	subs	r2, r3, #1
   1733e:	490b      	ldr	r1, [pc, #44]	; (1736c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
   17340:	9b01      	ldr	r3, [sp, #4]
   17342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   17346:	4a0a      	ldr	r2, [pc, #40]	; (17370 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x48>)
   17348:	9b01      	ldr	r3, [sp, #4]
   1734a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1734e:	f003 0301 	and.w	r3, r3, #1
   17352:	2b00      	cmp	r3, #0
   17354:	d106      	bne.n	17364 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x3c>
   17356:	4a05      	ldr	r2, [pc, #20]	; (1736c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
   17358:	9b01      	ldr	r3, [sp, #4]
   1735a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1735e:	2b00      	cmp	r3, #0
   17360:	d100      	bne.n	17364 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17362:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17364:	bf00      	nop
   17366:	b003      	add	sp, #12
   17368:	f85d fb04 	ldr.w	pc, [sp], #4
   1736c:	1fff9690 	.word	0x1fff9690
   17370:	1fff968c 	.word	0x1fff968c

00017374 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13(void)
{
   17374:	b500      	push	{lr}
   17376:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17378:	f7ea fb64 	bl	1a44 <Sys_GetCoreID>
   1737c:	4603      	mov	r3, r0
   1737e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId])
   17380:	4a10      	ldr	r2, [pc, #64]	; (173c4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
   17382:	9b01      	ldr	r3, [sp, #4]
   17384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17388:	2b00      	cmp	r3, #0
   1738a:	d10d      	bne.n	173a8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1738c:	f7e9 fadc 	bl	948 <Pwm_schm_read_msr>
   17390:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17392:	9b00      	ldr	r3, [sp, #0]
   17394:	f003 0301 	and.w	r3, r3, #1
   17398:	2b00      	cmp	r3, #0
   1739a:	d100      	bne.n	1739e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1739c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   1739e:	490a      	ldr	r1, [pc, #40]	; (173c8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x54>)
   173a0:	9b01      	ldr	r3, [sp, #4]
   173a2:	9a00      	ldr	r2, [sp, #0]
   173a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId]++;
   173a8:	4a06      	ldr	r2, [pc, #24]	; (173c4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
   173aa:	9b01      	ldr	r3, [sp, #4]
   173ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   173b0:	1c5a      	adds	r2, r3, #1
   173b2:	4904      	ldr	r1, [pc, #16]	; (173c4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
   173b4:	9b01      	ldr	r3, [sp, #4]
   173b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   173ba:	bf00      	nop
   173bc:	b003      	add	sp, #12
   173be:	f85d fb04 	ldr.w	pc, [sp], #4
   173c2:	bf00      	nop
   173c4:	1fff9698 	.word	0x1fff9698
   173c8:	1fff9694 	.word	0x1fff9694

000173cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13(void)
{
   173cc:	b500      	push	{lr}
   173ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   173d0:	f7ea fb38 	bl	1a44 <Sys_GetCoreID>
   173d4:	4603      	mov	r3, r0
   173d6:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId]--;
   173d8:	4a0d      	ldr	r2, [pc, #52]	; (17410 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
   173da:	9b01      	ldr	r3, [sp, #4]
   173dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   173e0:	1e5a      	subs	r2, r3, #1
   173e2:	490b      	ldr	r1, [pc, #44]	; (17410 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
   173e4:	9b01      	ldr	r3, [sp, #4]
   173e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   173ea:	4a0a      	ldr	r2, [pc, #40]	; (17414 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x48>)
   173ec:	9b01      	ldr	r3, [sp, #4]
   173ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   173f2:	f003 0301 	and.w	r3, r3, #1
   173f6:	2b00      	cmp	r3, #0
   173f8:	d106      	bne.n	17408 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x3c>
   173fa:	4a05      	ldr	r2, [pc, #20]	; (17410 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
   173fc:	9b01      	ldr	r3, [sp, #4]
   173fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17402:	2b00      	cmp	r3, #0
   17404:	d100      	bne.n	17408 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17406:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17408:	bf00      	nop
   1740a:	b003      	add	sp, #12
   1740c:	f85d fb04 	ldr.w	pc, [sp], #4
   17410:	1fff9698 	.word	0x1fff9698
   17414:	1fff9694 	.word	0x1fff9694

00017418 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14(void)
{
   17418:	b500      	push	{lr}
   1741a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1741c:	f7ea fb12 	bl	1a44 <Sys_GetCoreID>
   17420:	4603      	mov	r3, r0
   17422:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId])
   17424:	4a10      	ldr	r2, [pc, #64]	; (17468 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
   17426:	9b01      	ldr	r3, [sp, #4]
   17428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1742c:	2b00      	cmp	r3, #0
   1742e:	d10d      	bne.n	1744c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17430:	f7e9 fa8a 	bl	948 <Pwm_schm_read_msr>
   17434:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17436:	9b00      	ldr	r3, [sp, #0]
   17438:	f003 0301 	and.w	r3, r3, #1
   1743c:	2b00      	cmp	r3, #0
   1743e:	d100      	bne.n	17442 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17440:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   17442:	490a      	ldr	r1, [pc, #40]	; (1746c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x54>)
   17444:	9b01      	ldr	r3, [sp, #4]
   17446:	9a00      	ldr	r2, [sp, #0]
   17448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId]++;
   1744c:	4a06      	ldr	r2, [pc, #24]	; (17468 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
   1744e:	9b01      	ldr	r3, [sp, #4]
   17450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17454:	1c5a      	adds	r2, r3, #1
   17456:	4904      	ldr	r1, [pc, #16]	; (17468 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
   17458:	9b01      	ldr	r3, [sp, #4]
   1745a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1745e:	bf00      	nop
   17460:	b003      	add	sp, #12
   17462:	f85d fb04 	ldr.w	pc, [sp], #4
   17466:	bf00      	nop
   17468:	1fff96a0 	.word	0x1fff96a0
   1746c:	1fff969c 	.word	0x1fff969c

00017470 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14(void)
{
   17470:	b500      	push	{lr}
   17472:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17474:	f7ea fae6 	bl	1a44 <Sys_GetCoreID>
   17478:	4603      	mov	r3, r0
   1747a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId]--;
   1747c:	4a0d      	ldr	r2, [pc, #52]	; (174b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
   1747e:	9b01      	ldr	r3, [sp, #4]
   17480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17484:	1e5a      	subs	r2, r3, #1
   17486:	490b      	ldr	r1, [pc, #44]	; (174b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
   17488:	9b01      	ldr	r3, [sp, #4]
   1748a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   1748e:	4a0a      	ldr	r2, [pc, #40]	; (174b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x48>)
   17490:	9b01      	ldr	r3, [sp, #4]
   17492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17496:	f003 0301 	and.w	r3, r3, #1
   1749a:	2b00      	cmp	r3, #0
   1749c:	d106      	bne.n	174ac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x3c>
   1749e:	4a05      	ldr	r2, [pc, #20]	; (174b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
   174a0:	9b01      	ldr	r3, [sp, #4]
   174a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   174a6:	2b00      	cmp	r3, #0
   174a8:	d100      	bne.n	174ac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   174aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   174ac:	bf00      	nop
   174ae:	b003      	add	sp, #12
   174b0:	f85d fb04 	ldr.w	pc, [sp], #4
   174b4:	1fff96a0 	.word	0x1fff96a0
   174b8:	1fff969c 	.word	0x1fff969c

000174bc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15(void)
{
   174bc:	b500      	push	{lr}
   174be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   174c0:	f7ea fac0 	bl	1a44 <Sys_GetCoreID>
   174c4:	4603      	mov	r3, r0
   174c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId])
   174c8:	4a10      	ldr	r2, [pc, #64]	; (1750c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
   174ca:	9b01      	ldr	r3, [sp, #4]
   174cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   174d0:	2b00      	cmp	r3, #0
   174d2:	d10d      	bne.n	174f0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   174d4:	f7e9 fa38 	bl	948 <Pwm_schm_read_msr>
   174d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   174da:	9b00      	ldr	r3, [sp, #0]
   174dc:	f003 0301 	and.w	r3, r3, #1
   174e0:	2b00      	cmp	r3, #0
   174e2:	d100      	bne.n	174e6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   174e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   174e6:	490a      	ldr	r1, [pc, #40]	; (17510 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x54>)
   174e8:	9b01      	ldr	r3, [sp, #4]
   174ea:	9a00      	ldr	r2, [sp, #0]
   174ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId]++;
   174f0:	4a06      	ldr	r2, [pc, #24]	; (1750c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
   174f2:	9b01      	ldr	r3, [sp, #4]
   174f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   174f8:	1c5a      	adds	r2, r3, #1
   174fa:	4904      	ldr	r1, [pc, #16]	; (1750c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
   174fc:	9b01      	ldr	r3, [sp, #4]
   174fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17502:	bf00      	nop
   17504:	b003      	add	sp, #12
   17506:	f85d fb04 	ldr.w	pc, [sp], #4
   1750a:	bf00      	nop
   1750c:	1fff96a8 	.word	0x1fff96a8
   17510:	1fff96a4 	.word	0x1fff96a4

00017514 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15(void)
{
   17514:	b500      	push	{lr}
   17516:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17518:	f7ea fa94 	bl	1a44 <Sys_GetCoreID>
   1751c:	4603      	mov	r3, r0
   1751e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId]--;
   17520:	4a0d      	ldr	r2, [pc, #52]	; (17558 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
   17522:	9b01      	ldr	r3, [sp, #4]
   17524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17528:	1e5a      	subs	r2, r3, #1
   1752a:	490b      	ldr	r1, [pc, #44]	; (17558 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
   1752c:	9b01      	ldr	r3, [sp, #4]
   1752e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   17532:	4a0a      	ldr	r2, [pc, #40]	; (1755c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x48>)
   17534:	9b01      	ldr	r3, [sp, #4]
   17536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1753a:	f003 0301 	and.w	r3, r3, #1
   1753e:	2b00      	cmp	r3, #0
   17540:	d106      	bne.n	17550 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x3c>
   17542:	4a05      	ldr	r2, [pc, #20]	; (17558 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
   17544:	9b01      	ldr	r3, [sp, #4]
   17546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1754a:	2b00      	cmp	r3, #0
   1754c:	d100      	bne.n	17550 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1754e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17550:	bf00      	nop
   17552:	b003      	add	sp, #12
   17554:	f85d fb04 	ldr.w	pc, [sp], #4
   17558:	1fff96a8 	.word	0x1fff96a8
   1755c:	1fff96a4 	.word	0x1fff96a4

00017560 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16(void)
{
   17560:	b500      	push	{lr}
   17562:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17564:	f7ea fa6e 	bl	1a44 <Sys_GetCoreID>
   17568:	4603      	mov	r3, r0
   1756a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId])
   1756c:	4a10      	ldr	r2, [pc, #64]	; (175b0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
   1756e:	9b01      	ldr	r3, [sp, #4]
   17570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17574:	2b00      	cmp	r3, #0
   17576:	d10d      	bne.n	17594 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17578:	f7e9 f9e6 	bl	948 <Pwm_schm_read_msr>
   1757c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1757e:	9b00      	ldr	r3, [sp, #0]
   17580:	f003 0301 	and.w	r3, r3, #1
   17584:	2b00      	cmp	r3, #0
   17586:	d100      	bne.n	1758a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17588:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   1758a:	490a      	ldr	r1, [pc, #40]	; (175b4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x54>)
   1758c:	9b01      	ldr	r3, [sp, #4]
   1758e:	9a00      	ldr	r2, [sp, #0]
   17590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId]++;
   17594:	4a06      	ldr	r2, [pc, #24]	; (175b0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
   17596:	9b01      	ldr	r3, [sp, #4]
   17598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1759c:	1c5a      	adds	r2, r3, #1
   1759e:	4904      	ldr	r1, [pc, #16]	; (175b0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
   175a0:	9b01      	ldr	r3, [sp, #4]
   175a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   175a6:	bf00      	nop
   175a8:	b003      	add	sp, #12
   175aa:	f85d fb04 	ldr.w	pc, [sp], #4
   175ae:	bf00      	nop
   175b0:	1fff96b0 	.word	0x1fff96b0
   175b4:	1fff96ac 	.word	0x1fff96ac

000175b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16(void)
{
   175b8:	b500      	push	{lr}
   175ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   175bc:	f7ea fa42 	bl	1a44 <Sys_GetCoreID>
   175c0:	4603      	mov	r3, r0
   175c2:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId]--;
   175c4:	4a0d      	ldr	r2, [pc, #52]	; (175fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
   175c6:	9b01      	ldr	r3, [sp, #4]
   175c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   175cc:	1e5a      	subs	r2, r3, #1
   175ce:	490b      	ldr	r1, [pc, #44]	; (175fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
   175d0:	9b01      	ldr	r3, [sp, #4]
   175d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   175d6:	4a0a      	ldr	r2, [pc, #40]	; (17600 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x48>)
   175d8:	9b01      	ldr	r3, [sp, #4]
   175da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   175de:	f003 0301 	and.w	r3, r3, #1
   175e2:	2b00      	cmp	r3, #0
   175e4:	d106      	bne.n	175f4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x3c>
   175e6:	4a05      	ldr	r2, [pc, #20]	; (175fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
   175e8:	9b01      	ldr	r3, [sp, #4]
   175ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   175ee:	2b00      	cmp	r3, #0
   175f0:	d100      	bne.n	175f4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   175f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   175f4:	bf00      	nop
   175f6:	b003      	add	sp, #12
   175f8:	f85d fb04 	ldr.w	pc, [sp], #4
   175fc:	1fff96b0 	.word	0x1fff96b0
   17600:	1fff96ac 	.word	0x1fff96ac

00017604 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17(void)
{
   17604:	b500      	push	{lr}
   17606:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17608:	f7ea fa1c 	bl	1a44 <Sys_GetCoreID>
   1760c:	4603      	mov	r3, r0
   1760e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId])
   17610:	4a10      	ldr	r2, [pc, #64]	; (17654 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
   17612:	9b01      	ldr	r3, [sp, #4]
   17614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17618:	2b00      	cmp	r3, #0
   1761a:	d10d      	bne.n	17638 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1761c:	f7e9 f994 	bl	948 <Pwm_schm_read_msr>
   17620:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17622:	9b00      	ldr	r3, [sp, #0]
   17624:	f003 0301 	and.w	r3, r3, #1
   17628:	2b00      	cmp	r3, #0
   1762a:	d100      	bne.n	1762e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1762c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   1762e:	490a      	ldr	r1, [pc, #40]	; (17658 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x54>)
   17630:	9b01      	ldr	r3, [sp, #4]
   17632:	9a00      	ldr	r2, [sp, #0]
   17634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId]++;
   17638:	4a06      	ldr	r2, [pc, #24]	; (17654 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
   1763a:	9b01      	ldr	r3, [sp, #4]
   1763c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17640:	1c5a      	adds	r2, r3, #1
   17642:	4904      	ldr	r1, [pc, #16]	; (17654 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
   17644:	9b01      	ldr	r3, [sp, #4]
   17646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1764a:	bf00      	nop
   1764c:	b003      	add	sp, #12
   1764e:	f85d fb04 	ldr.w	pc, [sp], #4
   17652:	bf00      	nop
   17654:	1fff96b8 	.word	0x1fff96b8
   17658:	1fff96b4 	.word	0x1fff96b4

0001765c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17(void)
{
   1765c:	b500      	push	{lr}
   1765e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17660:	f7ea f9f0 	bl	1a44 <Sys_GetCoreID>
   17664:	4603      	mov	r3, r0
   17666:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId]--;
   17668:	4a0d      	ldr	r2, [pc, #52]	; (176a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
   1766a:	9b01      	ldr	r3, [sp, #4]
   1766c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17670:	1e5a      	subs	r2, r3, #1
   17672:	490b      	ldr	r1, [pc, #44]	; (176a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
   17674:	9b01      	ldr	r3, [sp, #4]
   17676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   1767a:	4a0a      	ldr	r2, [pc, #40]	; (176a4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x48>)
   1767c:	9b01      	ldr	r3, [sp, #4]
   1767e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17682:	f003 0301 	and.w	r3, r3, #1
   17686:	2b00      	cmp	r3, #0
   17688:	d106      	bne.n	17698 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x3c>
   1768a:	4a05      	ldr	r2, [pc, #20]	; (176a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
   1768c:	9b01      	ldr	r3, [sp, #4]
   1768e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17692:	2b00      	cmp	r3, #0
   17694:	d100      	bne.n	17698 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17696:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17698:	bf00      	nop
   1769a:	b003      	add	sp, #12
   1769c:	f85d fb04 	ldr.w	pc, [sp], #4
   176a0:	1fff96b8 	.word	0x1fff96b8
   176a4:	1fff96b4 	.word	0x1fff96b4

000176a8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18(void)
{
   176a8:	b500      	push	{lr}
   176aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   176ac:	f7ea f9ca 	bl	1a44 <Sys_GetCoreID>
   176b0:	4603      	mov	r3, r0
   176b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId])
   176b4:	4a10      	ldr	r2, [pc, #64]	; (176f8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
   176b6:	9b01      	ldr	r3, [sp, #4]
   176b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   176bc:	2b00      	cmp	r3, #0
   176be:	d10d      	bne.n	176dc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   176c0:	f7e9 f942 	bl	948 <Pwm_schm_read_msr>
   176c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   176c6:	9b00      	ldr	r3, [sp, #0]
   176c8:	f003 0301 	and.w	r3, r3, #1
   176cc:	2b00      	cmp	r3, #0
   176ce:	d100      	bne.n	176d2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   176d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   176d2:	490a      	ldr	r1, [pc, #40]	; (176fc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x54>)
   176d4:	9b01      	ldr	r3, [sp, #4]
   176d6:	9a00      	ldr	r2, [sp, #0]
   176d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId]++;
   176dc:	4a06      	ldr	r2, [pc, #24]	; (176f8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
   176de:	9b01      	ldr	r3, [sp, #4]
   176e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   176e4:	1c5a      	adds	r2, r3, #1
   176e6:	4904      	ldr	r1, [pc, #16]	; (176f8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
   176e8:	9b01      	ldr	r3, [sp, #4]
   176ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   176ee:	bf00      	nop
   176f0:	b003      	add	sp, #12
   176f2:	f85d fb04 	ldr.w	pc, [sp], #4
   176f6:	bf00      	nop
   176f8:	1fff96c0 	.word	0x1fff96c0
   176fc:	1fff96bc 	.word	0x1fff96bc

00017700 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18(void)
{
   17700:	b500      	push	{lr}
   17702:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17704:	f7ea f99e 	bl	1a44 <Sys_GetCoreID>
   17708:	4603      	mov	r3, r0
   1770a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId]--;
   1770c:	4a0d      	ldr	r2, [pc, #52]	; (17744 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
   1770e:	9b01      	ldr	r3, [sp, #4]
   17710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17714:	1e5a      	subs	r2, r3, #1
   17716:	490b      	ldr	r1, [pc, #44]	; (17744 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
   17718:	9b01      	ldr	r3, [sp, #4]
   1771a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   1771e:	4a0a      	ldr	r2, [pc, #40]	; (17748 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x48>)
   17720:	9b01      	ldr	r3, [sp, #4]
   17722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17726:	f003 0301 	and.w	r3, r3, #1
   1772a:	2b00      	cmp	r3, #0
   1772c:	d106      	bne.n	1773c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x3c>
   1772e:	4a05      	ldr	r2, [pc, #20]	; (17744 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
   17730:	9b01      	ldr	r3, [sp, #4]
   17732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17736:	2b00      	cmp	r3, #0
   17738:	d100      	bne.n	1773c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1773a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1773c:	bf00      	nop
   1773e:	b003      	add	sp, #12
   17740:	f85d fb04 	ldr.w	pc, [sp], #4
   17744:	1fff96c0 	.word	0x1fff96c0
   17748:	1fff96bc 	.word	0x1fff96bc

0001774c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19(void)
{
   1774c:	b500      	push	{lr}
   1774e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17750:	f7ea f978 	bl	1a44 <Sys_GetCoreID>
   17754:	4603      	mov	r3, r0
   17756:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId])
   17758:	4a10      	ldr	r2, [pc, #64]	; (1779c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
   1775a:	9b01      	ldr	r3, [sp, #4]
   1775c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17760:	2b00      	cmp	r3, #0
   17762:	d10d      	bne.n	17780 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17764:	f7e9 f8f0 	bl	948 <Pwm_schm_read_msr>
   17768:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1776a:	9b00      	ldr	r3, [sp, #0]
   1776c:	f003 0301 	and.w	r3, r3, #1
   17770:	2b00      	cmp	r3, #0
   17772:	d100      	bne.n	17776 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17774:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   17776:	490a      	ldr	r1, [pc, #40]	; (177a0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x54>)
   17778:	9b01      	ldr	r3, [sp, #4]
   1777a:	9a00      	ldr	r2, [sp, #0]
   1777c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId]++;
   17780:	4a06      	ldr	r2, [pc, #24]	; (1779c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
   17782:	9b01      	ldr	r3, [sp, #4]
   17784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17788:	1c5a      	adds	r2, r3, #1
   1778a:	4904      	ldr	r1, [pc, #16]	; (1779c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
   1778c:	9b01      	ldr	r3, [sp, #4]
   1778e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17792:	bf00      	nop
   17794:	b003      	add	sp, #12
   17796:	f85d fb04 	ldr.w	pc, [sp], #4
   1779a:	bf00      	nop
   1779c:	1fff96c8 	.word	0x1fff96c8
   177a0:	1fff96c4 	.word	0x1fff96c4

000177a4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19(void)
{
   177a4:	b500      	push	{lr}
   177a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   177a8:	f7ea f94c 	bl	1a44 <Sys_GetCoreID>
   177ac:	4603      	mov	r3, r0
   177ae:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId]--;
   177b0:	4a0d      	ldr	r2, [pc, #52]	; (177e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
   177b2:	9b01      	ldr	r3, [sp, #4]
   177b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   177b8:	1e5a      	subs	r2, r3, #1
   177ba:	490b      	ldr	r1, [pc, #44]	; (177e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
   177bc:	9b01      	ldr	r3, [sp, #4]
   177be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   177c2:	4a0a      	ldr	r2, [pc, #40]	; (177ec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x48>)
   177c4:	9b01      	ldr	r3, [sp, #4]
   177c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   177ca:	f003 0301 	and.w	r3, r3, #1
   177ce:	2b00      	cmp	r3, #0
   177d0:	d106      	bne.n	177e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x3c>
   177d2:	4a05      	ldr	r2, [pc, #20]	; (177e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
   177d4:	9b01      	ldr	r3, [sp, #4]
   177d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   177da:	2b00      	cmp	r3, #0
   177dc:	d100      	bne.n	177e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   177de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   177e0:	bf00      	nop
   177e2:	b003      	add	sp, #12
   177e4:	f85d fb04 	ldr.w	pc, [sp], #4
   177e8:	1fff96c8 	.word	0x1fff96c8
   177ec:	1fff96c4 	.word	0x1fff96c4

000177f0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20(void)
{
   177f0:	b500      	push	{lr}
   177f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   177f4:	f7ea f926 	bl	1a44 <Sys_GetCoreID>
   177f8:	4603      	mov	r3, r0
   177fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId])
   177fc:	4a10      	ldr	r2, [pc, #64]	; (17840 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
   177fe:	9b01      	ldr	r3, [sp, #4]
   17800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17804:	2b00      	cmp	r3, #0
   17806:	d10d      	bne.n	17824 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17808:	f7e9 f89e 	bl	948 <Pwm_schm_read_msr>
   1780c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1780e:	9b00      	ldr	r3, [sp, #0]
   17810:	f003 0301 	and.w	r3, r3, #1
   17814:	2b00      	cmp	r3, #0
   17816:	d100      	bne.n	1781a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17818:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   1781a:	490a      	ldr	r1, [pc, #40]	; (17844 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x54>)
   1781c:	9b01      	ldr	r3, [sp, #4]
   1781e:	9a00      	ldr	r2, [sp, #0]
   17820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId]++;
   17824:	4a06      	ldr	r2, [pc, #24]	; (17840 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
   17826:	9b01      	ldr	r3, [sp, #4]
   17828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1782c:	1c5a      	adds	r2, r3, #1
   1782e:	4904      	ldr	r1, [pc, #16]	; (17840 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
   17830:	9b01      	ldr	r3, [sp, #4]
   17832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17836:	bf00      	nop
   17838:	b003      	add	sp, #12
   1783a:	f85d fb04 	ldr.w	pc, [sp], #4
   1783e:	bf00      	nop
   17840:	1fff96d0 	.word	0x1fff96d0
   17844:	1fff96cc 	.word	0x1fff96cc

00017848 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20(void)
{
   17848:	b500      	push	{lr}
   1784a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1784c:	f7ea f8fa 	bl	1a44 <Sys_GetCoreID>
   17850:	4603      	mov	r3, r0
   17852:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId]--;
   17854:	4a0d      	ldr	r2, [pc, #52]	; (1788c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
   17856:	9b01      	ldr	r3, [sp, #4]
   17858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1785c:	1e5a      	subs	r2, r3, #1
   1785e:	490b      	ldr	r1, [pc, #44]	; (1788c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
   17860:	9b01      	ldr	r3, [sp, #4]
   17862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   17866:	4a0a      	ldr	r2, [pc, #40]	; (17890 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x48>)
   17868:	9b01      	ldr	r3, [sp, #4]
   1786a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1786e:	f003 0301 	and.w	r3, r3, #1
   17872:	2b00      	cmp	r3, #0
   17874:	d106      	bne.n	17884 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x3c>
   17876:	4a05      	ldr	r2, [pc, #20]	; (1788c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
   17878:	9b01      	ldr	r3, [sp, #4]
   1787a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1787e:	2b00      	cmp	r3, #0
   17880:	d100      	bne.n	17884 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17882:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17884:	bf00      	nop
   17886:	b003      	add	sp, #12
   17888:	f85d fb04 	ldr.w	pc, [sp], #4
   1788c:	1fff96d0 	.word	0x1fff96d0
   17890:	1fff96cc 	.word	0x1fff96cc

00017894 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21(void)
{
   17894:	b500      	push	{lr}
   17896:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17898:	f7ea f8d4 	bl	1a44 <Sys_GetCoreID>
   1789c:	4603      	mov	r3, r0
   1789e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId])
   178a0:	4a10      	ldr	r2, [pc, #64]	; (178e4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
   178a2:	9b01      	ldr	r3, [sp, #4]
   178a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   178a8:	2b00      	cmp	r3, #0
   178aa:	d10d      	bne.n	178c8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   178ac:	f7e9 f84c 	bl	948 <Pwm_schm_read_msr>
   178b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   178b2:	9b00      	ldr	r3, [sp, #0]
   178b4:	f003 0301 	and.w	r3, r3, #1
   178b8:	2b00      	cmp	r3, #0
   178ba:	d100      	bne.n	178be <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   178bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_21[u32CoreId] = msr;
   178be:	490a      	ldr	r1, [pc, #40]	; (178e8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x54>)
   178c0:	9b01      	ldr	r3, [sp, #4]
   178c2:	9a00      	ldr	r2, [sp, #0]
   178c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId]++;
   178c8:	4a06      	ldr	r2, [pc, #24]	; (178e4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
   178ca:	9b01      	ldr	r3, [sp, #4]
   178cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   178d0:	1c5a      	adds	r2, r3, #1
   178d2:	4904      	ldr	r1, [pc, #16]	; (178e4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
   178d4:	9b01      	ldr	r3, [sp, #4]
   178d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   178da:	bf00      	nop
   178dc:	b003      	add	sp, #12
   178de:	f85d fb04 	ldr.w	pc, [sp], #4
   178e2:	bf00      	nop
   178e4:	1fff96d8 	.word	0x1fff96d8
   178e8:	1fff96d4 	.word	0x1fff96d4

000178ec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21(void)
{
   178ec:	b500      	push	{lr}
   178ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   178f0:	f7ea f8a8 	bl	1a44 <Sys_GetCoreID>
   178f4:	4603      	mov	r3, r0
   178f6:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId]--;
   178f8:	4a0d      	ldr	r2, [pc, #52]	; (17930 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
   178fa:	9b01      	ldr	r3, [sp, #4]
   178fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17900:	1e5a      	subs	r2, r3, #1
   17902:	490b      	ldr	r1, [pc, #44]	; (17930 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
   17904:	9b01      	ldr	r3, [sp, #4]
   17906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
   1790a:	4a0a      	ldr	r2, [pc, #40]	; (17934 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x48>)
   1790c:	9b01      	ldr	r3, [sp, #4]
   1790e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17912:	f003 0301 	and.w	r3, r3, #1
   17916:	2b00      	cmp	r3, #0
   17918:	d106      	bne.n	17928 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x3c>
   1791a:	4a05      	ldr	r2, [pc, #20]	; (17930 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
   1791c:	9b01      	ldr	r3, [sp, #4]
   1791e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17922:	2b00      	cmp	r3, #0
   17924:	d100      	bne.n	17928 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17926:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17928:	bf00      	nop
   1792a:	b003      	add	sp, #12
   1792c:	f85d fb04 	ldr.w	pc, [sp], #4
   17930:	1fff96d8 	.word	0x1fff96d8
   17934:	1fff96d4 	.word	0x1fff96d4

00017938 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22(void)
{
   17938:	b500      	push	{lr}
   1793a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1793c:	f7ea f882 	bl	1a44 <Sys_GetCoreID>
   17940:	4603      	mov	r3, r0
   17942:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId])
   17944:	4a10      	ldr	r2, [pc, #64]	; (17988 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
   17946:	9b01      	ldr	r3, [sp, #4]
   17948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1794c:	2b00      	cmp	r3, #0
   1794e:	d10d      	bne.n	1796c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17950:	f7e8 fffa 	bl	948 <Pwm_schm_read_msr>
   17954:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17956:	9b00      	ldr	r3, [sp, #0]
   17958:	f003 0301 	and.w	r3, r3, #1
   1795c:	2b00      	cmp	r3, #0
   1795e:	d100      	bne.n	17962 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17960:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_22[u32CoreId] = msr;
   17962:	490a      	ldr	r1, [pc, #40]	; (1798c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x54>)
   17964:	9b01      	ldr	r3, [sp, #4]
   17966:	9a00      	ldr	r2, [sp, #0]
   17968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId]++;
   1796c:	4a06      	ldr	r2, [pc, #24]	; (17988 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
   1796e:	9b01      	ldr	r3, [sp, #4]
   17970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17974:	1c5a      	adds	r2, r3, #1
   17976:	4904      	ldr	r1, [pc, #16]	; (17988 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
   17978:	9b01      	ldr	r3, [sp, #4]
   1797a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1797e:	bf00      	nop
   17980:	b003      	add	sp, #12
   17982:	f85d fb04 	ldr.w	pc, [sp], #4
   17986:	bf00      	nop
   17988:	1fff96e0 	.word	0x1fff96e0
   1798c:	1fff96dc 	.word	0x1fff96dc

00017990 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22(void)
{
   17990:	b500      	push	{lr}
   17992:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17994:	f7ea f856 	bl	1a44 <Sys_GetCoreID>
   17998:	4603      	mov	r3, r0
   1799a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId]--;
   1799c:	4a0d      	ldr	r2, [pc, #52]	; (179d4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
   1799e:	9b01      	ldr	r3, [sp, #4]
   179a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   179a4:	1e5a      	subs	r2, r3, #1
   179a6:	490b      	ldr	r1, [pc, #44]	; (179d4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
   179a8:	9b01      	ldr	r3, [sp, #4]
   179aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
   179ae:	4a0a      	ldr	r2, [pc, #40]	; (179d8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x48>)
   179b0:	9b01      	ldr	r3, [sp, #4]
   179b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   179b6:	f003 0301 	and.w	r3, r3, #1
   179ba:	2b00      	cmp	r3, #0
   179bc:	d106      	bne.n	179cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x3c>
   179be:	4a05      	ldr	r2, [pc, #20]	; (179d4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
   179c0:	9b01      	ldr	r3, [sp, #4]
   179c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   179c6:	2b00      	cmp	r3, #0
   179c8:	d100      	bne.n	179cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   179ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   179cc:	bf00      	nop
   179ce:	b003      	add	sp, #12
   179d0:	f85d fb04 	ldr.w	pc, [sp], #4
   179d4:	1fff96e0 	.word	0x1fff96e0
   179d8:	1fff96dc 	.word	0x1fff96dc

000179dc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23(void)
{
   179dc:	b500      	push	{lr}
   179de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   179e0:	f7ea f830 	bl	1a44 <Sys_GetCoreID>
   179e4:	4603      	mov	r3, r0
   179e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId])
   179e8:	4a10      	ldr	r2, [pc, #64]	; (17a2c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
   179ea:	9b01      	ldr	r3, [sp, #4]
   179ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   179f0:	2b00      	cmp	r3, #0
   179f2:	d10d      	bne.n	17a10 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   179f4:	f7e8 ffa8 	bl	948 <Pwm_schm_read_msr>
   179f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   179fa:	9b00      	ldr	r3, [sp, #0]
   179fc:	f003 0301 	and.w	r3, r3, #1
   17a00:	2b00      	cmp	r3, #0
   17a02:	d100      	bne.n	17a06 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17a04:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_23[u32CoreId] = msr;
   17a06:	490a      	ldr	r1, [pc, #40]	; (17a30 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x54>)
   17a08:	9b01      	ldr	r3, [sp, #4]
   17a0a:	9a00      	ldr	r2, [sp, #0]
   17a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId]++;
   17a10:	4a06      	ldr	r2, [pc, #24]	; (17a2c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
   17a12:	9b01      	ldr	r3, [sp, #4]
   17a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17a18:	1c5a      	adds	r2, r3, #1
   17a1a:	4904      	ldr	r1, [pc, #16]	; (17a2c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
   17a1c:	9b01      	ldr	r3, [sp, #4]
   17a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17a22:	bf00      	nop
   17a24:	b003      	add	sp, #12
   17a26:	f85d fb04 	ldr.w	pc, [sp], #4
   17a2a:	bf00      	nop
   17a2c:	1fff96e8 	.word	0x1fff96e8
   17a30:	1fff96e4 	.word	0x1fff96e4

00017a34 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23(void)
{
   17a34:	b500      	push	{lr}
   17a36:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17a38:	f7ea f804 	bl	1a44 <Sys_GetCoreID>
   17a3c:	4603      	mov	r3, r0
   17a3e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId]--;
   17a40:	4a0d      	ldr	r2, [pc, #52]	; (17a78 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
   17a42:	9b01      	ldr	r3, [sp, #4]
   17a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17a48:	1e5a      	subs	r2, r3, #1
   17a4a:	490b      	ldr	r1, [pc, #44]	; (17a78 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
   17a4c:	9b01      	ldr	r3, [sp, #4]
   17a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   17a52:	4a0a      	ldr	r2, [pc, #40]	; (17a7c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x48>)
   17a54:	9b01      	ldr	r3, [sp, #4]
   17a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17a5a:	f003 0301 	and.w	r3, r3, #1
   17a5e:	2b00      	cmp	r3, #0
   17a60:	d106      	bne.n	17a70 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x3c>
   17a62:	4a05      	ldr	r2, [pc, #20]	; (17a78 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
   17a64:	9b01      	ldr	r3, [sp, #4]
   17a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17a6a:	2b00      	cmp	r3, #0
   17a6c:	d100      	bne.n	17a70 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17a6e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17a70:	bf00      	nop
   17a72:	b003      	add	sp, #12
   17a74:	f85d fb04 	ldr.w	pc, [sp], #4
   17a78:	1fff96e8 	.word	0x1fff96e8
   17a7c:	1fff96e4 	.word	0x1fff96e4

00017a80 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24(void)
{
   17a80:	b500      	push	{lr}
   17a82:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17a84:	f7e9 ffde 	bl	1a44 <Sys_GetCoreID>
   17a88:	4603      	mov	r3, r0
   17a8a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId])
   17a8c:	4a10      	ldr	r2, [pc, #64]	; (17ad0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
   17a8e:	9b01      	ldr	r3, [sp, #4]
   17a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17a94:	2b00      	cmp	r3, #0
   17a96:	d10d      	bne.n	17ab4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17a98:	f7e8 ff56 	bl	948 <Pwm_schm_read_msr>
   17a9c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17a9e:	9b00      	ldr	r3, [sp, #0]
   17aa0:	f003 0301 	and.w	r3, r3, #1
   17aa4:	2b00      	cmp	r3, #0
   17aa6:	d100      	bne.n	17aaa <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17aa8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   17aaa:	490a      	ldr	r1, [pc, #40]	; (17ad4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x54>)
   17aac:	9b01      	ldr	r3, [sp, #4]
   17aae:	9a00      	ldr	r2, [sp, #0]
   17ab0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId]++;
   17ab4:	4a06      	ldr	r2, [pc, #24]	; (17ad0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
   17ab6:	9b01      	ldr	r3, [sp, #4]
   17ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17abc:	1c5a      	adds	r2, r3, #1
   17abe:	4904      	ldr	r1, [pc, #16]	; (17ad0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
   17ac0:	9b01      	ldr	r3, [sp, #4]
   17ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17ac6:	bf00      	nop
   17ac8:	b003      	add	sp, #12
   17aca:	f85d fb04 	ldr.w	pc, [sp], #4
   17ace:	bf00      	nop
   17ad0:	1fff96f0 	.word	0x1fff96f0
   17ad4:	1fff96ec 	.word	0x1fff96ec

00017ad8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24(void)
{
   17ad8:	b500      	push	{lr}
   17ada:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17adc:	f7e9 ffb2 	bl	1a44 <Sys_GetCoreID>
   17ae0:	4603      	mov	r3, r0
   17ae2:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId]--;
   17ae4:	4a0d      	ldr	r2, [pc, #52]	; (17b1c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
   17ae6:	9b01      	ldr	r3, [sp, #4]
   17ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17aec:	1e5a      	subs	r2, r3, #1
   17aee:	490b      	ldr	r1, [pc, #44]	; (17b1c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
   17af0:	9b01      	ldr	r3, [sp, #4]
   17af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   17af6:	4a0a      	ldr	r2, [pc, #40]	; (17b20 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x48>)
   17af8:	9b01      	ldr	r3, [sp, #4]
   17afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17afe:	f003 0301 	and.w	r3, r3, #1
   17b02:	2b00      	cmp	r3, #0
   17b04:	d106      	bne.n	17b14 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x3c>
   17b06:	4a05      	ldr	r2, [pc, #20]	; (17b1c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
   17b08:	9b01      	ldr	r3, [sp, #4]
   17b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17b0e:	2b00      	cmp	r3, #0
   17b10:	d100      	bne.n	17b14 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17b12:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17b14:	bf00      	nop
   17b16:	b003      	add	sp, #12
   17b18:	f85d fb04 	ldr.w	pc, [sp], #4
   17b1c:	1fff96f0 	.word	0x1fff96f0
   17b20:	1fff96ec 	.word	0x1fff96ec

00017b24 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25(void)
{
   17b24:	b500      	push	{lr}
   17b26:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17b28:	f7e9 ff8c 	bl	1a44 <Sys_GetCoreID>
   17b2c:	4603      	mov	r3, r0
   17b2e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId])
   17b30:	4a10      	ldr	r2, [pc, #64]	; (17b74 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
   17b32:	9b01      	ldr	r3, [sp, #4]
   17b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17b38:	2b00      	cmp	r3, #0
   17b3a:	d10d      	bne.n	17b58 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17b3c:	f7e8 ff04 	bl	948 <Pwm_schm_read_msr>
   17b40:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17b42:	9b00      	ldr	r3, [sp, #0]
   17b44:	f003 0301 	and.w	r3, r3, #1
   17b48:	2b00      	cmp	r3, #0
   17b4a:	d100      	bne.n	17b4e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17b4c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   17b4e:	490a      	ldr	r1, [pc, #40]	; (17b78 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x54>)
   17b50:	9b01      	ldr	r3, [sp, #4]
   17b52:	9a00      	ldr	r2, [sp, #0]
   17b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId]++;
   17b58:	4a06      	ldr	r2, [pc, #24]	; (17b74 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
   17b5a:	9b01      	ldr	r3, [sp, #4]
   17b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17b60:	1c5a      	adds	r2, r3, #1
   17b62:	4904      	ldr	r1, [pc, #16]	; (17b74 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
   17b64:	9b01      	ldr	r3, [sp, #4]
   17b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17b6a:	bf00      	nop
   17b6c:	b003      	add	sp, #12
   17b6e:	f85d fb04 	ldr.w	pc, [sp], #4
   17b72:	bf00      	nop
   17b74:	1fff96f8 	.word	0x1fff96f8
   17b78:	1fff96f4 	.word	0x1fff96f4

00017b7c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25(void)
{
   17b7c:	b500      	push	{lr}
   17b7e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17b80:	f7e9 ff60 	bl	1a44 <Sys_GetCoreID>
   17b84:	4603      	mov	r3, r0
   17b86:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId]--;
   17b88:	4a0d      	ldr	r2, [pc, #52]	; (17bc0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
   17b8a:	9b01      	ldr	r3, [sp, #4]
   17b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17b90:	1e5a      	subs	r2, r3, #1
   17b92:	490b      	ldr	r1, [pc, #44]	; (17bc0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
   17b94:	9b01      	ldr	r3, [sp, #4]
   17b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   17b9a:	4a0a      	ldr	r2, [pc, #40]	; (17bc4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x48>)
   17b9c:	9b01      	ldr	r3, [sp, #4]
   17b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17ba2:	f003 0301 	and.w	r3, r3, #1
   17ba6:	2b00      	cmp	r3, #0
   17ba8:	d106      	bne.n	17bb8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x3c>
   17baa:	4a05      	ldr	r2, [pc, #20]	; (17bc0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
   17bac:	9b01      	ldr	r3, [sp, #4]
   17bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17bb2:	2b00      	cmp	r3, #0
   17bb4:	d100      	bne.n	17bb8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17bb6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17bb8:	bf00      	nop
   17bba:	b003      	add	sp, #12
   17bbc:	f85d fb04 	ldr.w	pc, [sp], #4
   17bc0:	1fff96f8 	.word	0x1fff96f8
   17bc4:	1fff96f4 	.word	0x1fff96f4

00017bc8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26(void)
{
   17bc8:	b500      	push	{lr}
   17bca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17bcc:	f7e9 ff3a 	bl	1a44 <Sys_GetCoreID>
   17bd0:	4603      	mov	r3, r0
   17bd2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId])
   17bd4:	4a10      	ldr	r2, [pc, #64]	; (17c18 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
   17bd6:	9b01      	ldr	r3, [sp, #4]
   17bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17bdc:	2b00      	cmp	r3, #0
   17bde:	d10d      	bne.n	17bfc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17be0:	f7e8 feb2 	bl	948 <Pwm_schm_read_msr>
   17be4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17be6:	9b00      	ldr	r3, [sp, #0]
   17be8:	f003 0301 	and.w	r3, r3, #1
   17bec:	2b00      	cmp	r3, #0
   17bee:	d100      	bne.n	17bf2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17bf0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   17bf2:	490a      	ldr	r1, [pc, #40]	; (17c1c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x54>)
   17bf4:	9b01      	ldr	r3, [sp, #4]
   17bf6:	9a00      	ldr	r2, [sp, #0]
   17bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId]++;
   17bfc:	4a06      	ldr	r2, [pc, #24]	; (17c18 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
   17bfe:	9b01      	ldr	r3, [sp, #4]
   17c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17c04:	1c5a      	adds	r2, r3, #1
   17c06:	4904      	ldr	r1, [pc, #16]	; (17c18 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
   17c08:	9b01      	ldr	r3, [sp, #4]
   17c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17c0e:	bf00      	nop
   17c10:	b003      	add	sp, #12
   17c12:	f85d fb04 	ldr.w	pc, [sp], #4
   17c16:	bf00      	nop
   17c18:	1fff9700 	.word	0x1fff9700
   17c1c:	1fff96fc 	.word	0x1fff96fc

00017c20 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26(void)
{
   17c20:	b500      	push	{lr}
   17c22:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17c24:	f7e9 ff0e 	bl	1a44 <Sys_GetCoreID>
   17c28:	4603      	mov	r3, r0
   17c2a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId]--;
   17c2c:	4a0d      	ldr	r2, [pc, #52]	; (17c64 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
   17c2e:	9b01      	ldr	r3, [sp, #4]
   17c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17c34:	1e5a      	subs	r2, r3, #1
   17c36:	490b      	ldr	r1, [pc, #44]	; (17c64 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
   17c38:	9b01      	ldr	r3, [sp, #4]
   17c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   17c3e:	4a0a      	ldr	r2, [pc, #40]	; (17c68 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x48>)
   17c40:	9b01      	ldr	r3, [sp, #4]
   17c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17c46:	f003 0301 	and.w	r3, r3, #1
   17c4a:	2b00      	cmp	r3, #0
   17c4c:	d106      	bne.n	17c5c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x3c>
   17c4e:	4a05      	ldr	r2, [pc, #20]	; (17c64 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
   17c50:	9b01      	ldr	r3, [sp, #4]
   17c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17c56:	2b00      	cmp	r3, #0
   17c58:	d100      	bne.n	17c5c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17c5a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17c5c:	bf00      	nop
   17c5e:	b003      	add	sp, #12
   17c60:	f85d fb04 	ldr.w	pc, [sp], #4
   17c64:	1fff9700 	.word	0x1fff9700
   17c68:	1fff96fc 	.word	0x1fff96fc

00017c6c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27(void)
{
   17c6c:	b500      	push	{lr}
   17c6e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17c70:	f7e9 fee8 	bl	1a44 <Sys_GetCoreID>
   17c74:	4603      	mov	r3, r0
   17c76:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId])
   17c78:	4a10      	ldr	r2, [pc, #64]	; (17cbc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
   17c7a:	9b01      	ldr	r3, [sp, #4]
   17c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17c80:	2b00      	cmp	r3, #0
   17c82:	d10d      	bne.n	17ca0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17c84:	f7e8 fe60 	bl	948 <Pwm_schm_read_msr>
   17c88:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17c8a:	9b00      	ldr	r3, [sp, #0]
   17c8c:	f003 0301 	and.w	r3, r3, #1
   17c90:	2b00      	cmp	r3, #0
   17c92:	d100      	bne.n	17c96 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17c94:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   17c96:	490a      	ldr	r1, [pc, #40]	; (17cc0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x54>)
   17c98:	9b01      	ldr	r3, [sp, #4]
   17c9a:	9a00      	ldr	r2, [sp, #0]
   17c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId]++;
   17ca0:	4a06      	ldr	r2, [pc, #24]	; (17cbc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
   17ca2:	9b01      	ldr	r3, [sp, #4]
   17ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17ca8:	1c5a      	adds	r2, r3, #1
   17caa:	4904      	ldr	r1, [pc, #16]	; (17cbc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
   17cac:	9b01      	ldr	r3, [sp, #4]
   17cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17cb2:	bf00      	nop
   17cb4:	b003      	add	sp, #12
   17cb6:	f85d fb04 	ldr.w	pc, [sp], #4
   17cba:	bf00      	nop
   17cbc:	1fff9708 	.word	0x1fff9708
   17cc0:	1fff9704 	.word	0x1fff9704

00017cc4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27(void)
{
   17cc4:	b500      	push	{lr}
   17cc6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17cc8:	f7e9 febc 	bl	1a44 <Sys_GetCoreID>
   17ccc:	4603      	mov	r3, r0
   17cce:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId]--;
   17cd0:	4a0d      	ldr	r2, [pc, #52]	; (17d08 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
   17cd2:	9b01      	ldr	r3, [sp, #4]
   17cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17cd8:	1e5a      	subs	r2, r3, #1
   17cda:	490b      	ldr	r1, [pc, #44]	; (17d08 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
   17cdc:	9b01      	ldr	r3, [sp, #4]
   17cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   17ce2:	4a0a      	ldr	r2, [pc, #40]	; (17d0c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x48>)
   17ce4:	9b01      	ldr	r3, [sp, #4]
   17ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17cea:	f003 0301 	and.w	r3, r3, #1
   17cee:	2b00      	cmp	r3, #0
   17cf0:	d106      	bne.n	17d00 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x3c>
   17cf2:	4a05      	ldr	r2, [pc, #20]	; (17d08 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
   17cf4:	9b01      	ldr	r3, [sp, #4]
   17cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17cfa:	2b00      	cmp	r3, #0
   17cfc:	d100      	bne.n	17d00 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17cfe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17d00:	bf00      	nop
   17d02:	b003      	add	sp, #12
   17d04:	f85d fb04 	ldr.w	pc, [sp], #4
   17d08:	1fff9708 	.word	0x1fff9708
   17d0c:	1fff9704 	.word	0x1fff9704

00017d10 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28(void)
{
   17d10:	b500      	push	{lr}
   17d12:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17d14:	f7e9 fe96 	bl	1a44 <Sys_GetCoreID>
   17d18:	4603      	mov	r3, r0
   17d1a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId])
   17d1c:	4a10      	ldr	r2, [pc, #64]	; (17d60 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
   17d1e:	9b01      	ldr	r3, [sp, #4]
   17d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17d24:	2b00      	cmp	r3, #0
   17d26:	d10d      	bne.n	17d44 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17d28:	f7e8 fe0e 	bl	948 <Pwm_schm_read_msr>
   17d2c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17d2e:	9b00      	ldr	r3, [sp, #0]
   17d30:	f003 0301 	and.w	r3, r3, #1
   17d34:	2b00      	cmp	r3, #0
   17d36:	d100      	bne.n	17d3a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17d38:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_28[u32CoreId] = msr;
   17d3a:	490a      	ldr	r1, [pc, #40]	; (17d64 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x54>)
   17d3c:	9b01      	ldr	r3, [sp, #4]
   17d3e:	9a00      	ldr	r2, [sp, #0]
   17d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId]++;
   17d44:	4a06      	ldr	r2, [pc, #24]	; (17d60 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
   17d46:	9b01      	ldr	r3, [sp, #4]
   17d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17d4c:	1c5a      	adds	r2, r3, #1
   17d4e:	4904      	ldr	r1, [pc, #16]	; (17d60 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
   17d50:	9b01      	ldr	r3, [sp, #4]
   17d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17d56:	bf00      	nop
   17d58:	b003      	add	sp, #12
   17d5a:	f85d fb04 	ldr.w	pc, [sp], #4
   17d5e:	bf00      	nop
   17d60:	1fff9710 	.word	0x1fff9710
   17d64:	1fff970c 	.word	0x1fff970c

00017d68 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28(void)
{
   17d68:	b500      	push	{lr}
   17d6a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17d6c:	f7e9 fe6a 	bl	1a44 <Sys_GetCoreID>
   17d70:	4603      	mov	r3, r0
   17d72:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId]--;
   17d74:	4a0d      	ldr	r2, [pc, #52]	; (17dac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
   17d76:	9b01      	ldr	r3, [sp, #4]
   17d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17d7c:	1e5a      	subs	r2, r3, #1
   17d7e:	490b      	ldr	r1, [pc, #44]	; (17dac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
   17d80:	9b01      	ldr	r3, [sp, #4]
   17d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_28[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId]))         /*if interrupts were enabled*/
   17d86:	4a0a      	ldr	r2, [pc, #40]	; (17db0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x48>)
   17d88:	9b01      	ldr	r3, [sp, #4]
   17d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17d8e:	f003 0301 	and.w	r3, r3, #1
   17d92:	2b00      	cmp	r3, #0
   17d94:	d106      	bne.n	17da4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x3c>
   17d96:	4a05      	ldr	r2, [pc, #20]	; (17dac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
   17d98:	9b01      	ldr	r3, [sp, #4]
   17d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17d9e:	2b00      	cmp	r3, #0
   17da0:	d100      	bne.n	17da4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17da2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17da4:	bf00      	nop
   17da6:	b003      	add	sp, #12
   17da8:	f85d fb04 	ldr.w	pc, [sp], #4
   17dac:	1fff9710 	.word	0x1fff9710
   17db0:	1fff970c 	.word	0x1fff970c

00017db4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29(void)
{
   17db4:	b500      	push	{lr}
   17db6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17db8:	f7e9 fe44 	bl	1a44 <Sys_GetCoreID>
   17dbc:	4603      	mov	r3, r0
   17dbe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId])
   17dc0:	4a10      	ldr	r2, [pc, #64]	; (17e04 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
   17dc2:	9b01      	ldr	r3, [sp, #4]
   17dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17dc8:	2b00      	cmp	r3, #0
   17dca:	d10d      	bne.n	17de8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17dcc:	f7e8 fdbc 	bl	948 <Pwm_schm_read_msr>
   17dd0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17dd2:	9b00      	ldr	r3, [sp, #0]
   17dd4:	f003 0301 	and.w	r3, r3, #1
   17dd8:	2b00      	cmp	r3, #0
   17dda:	d100      	bne.n	17dde <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17ddc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_29[u32CoreId] = msr;
   17dde:	490a      	ldr	r1, [pc, #40]	; (17e08 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x54>)
   17de0:	9b01      	ldr	r3, [sp, #4]
   17de2:	9a00      	ldr	r2, [sp, #0]
   17de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId]++;
   17de8:	4a06      	ldr	r2, [pc, #24]	; (17e04 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
   17dea:	9b01      	ldr	r3, [sp, #4]
   17dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17df0:	1c5a      	adds	r2, r3, #1
   17df2:	4904      	ldr	r1, [pc, #16]	; (17e04 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
   17df4:	9b01      	ldr	r3, [sp, #4]
   17df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17dfa:	bf00      	nop
   17dfc:	b003      	add	sp, #12
   17dfe:	f85d fb04 	ldr.w	pc, [sp], #4
   17e02:	bf00      	nop
   17e04:	1fff9718 	.word	0x1fff9718
   17e08:	1fff9714 	.word	0x1fff9714

00017e0c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29(void)
{
   17e0c:	b500      	push	{lr}
   17e0e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17e10:	f7e9 fe18 	bl	1a44 <Sys_GetCoreID>
   17e14:	4603      	mov	r3, r0
   17e16:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId]--;
   17e18:	4a0d      	ldr	r2, [pc, #52]	; (17e50 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
   17e1a:	9b01      	ldr	r3, [sp, #4]
   17e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17e20:	1e5a      	subs	r2, r3, #1
   17e22:	490b      	ldr	r1, [pc, #44]	; (17e50 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
   17e24:	9b01      	ldr	r3, [sp, #4]
   17e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
   17e2a:	4a0a      	ldr	r2, [pc, #40]	; (17e54 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x48>)
   17e2c:	9b01      	ldr	r3, [sp, #4]
   17e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17e32:	f003 0301 	and.w	r3, r3, #1
   17e36:	2b00      	cmp	r3, #0
   17e38:	d106      	bne.n	17e48 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x3c>
   17e3a:	4a05      	ldr	r2, [pc, #20]	; (17e50 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
   17e3c:	9b01      	ldr	r3, [sp, #4]
   17e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17e42:	2b00      	cmp	r3, #0
   17e44:	d100      	bne.n	17e48 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17e46:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17e48:	bf00      	nop
   17e4a:	b003      	add	sp, #12
   17e4c:	f85d fb04 	ldr.w	pc, [sp], #4
   17e50:	1fff9718 	.word	0x1fff9718
   17e54:	1fff9714 	.word	0x1fff9714

00017e58 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30(void)
{
   17e58:	b500      	push	{lr}
   17e5a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17e5c:	f7e9 fdf2 	bl	1a44 <Sys_GetCoreID>
   17e60:	4603      	mov	r3, r0
   17e62:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId])
   17e64:	4a10      	ldr	r2, [pc, #64]	; (17ea8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
   17e66:	9b01      	ldr	r3, [sp, #4]
   17e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17e6c:	2b00      	cmp	r3, #0
   17e6e:	d10d      	bne.n	17e8c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17e70:	f7e8 fd6a 	bl	948 <Pwm_schm_read_msr>
   17e74:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17e76:	9b00      	ldr	r3, [sp, #0]
   17e78:	f003 0301 	and.w	r3, r3, #1
   17e7c:	2b00      	cmp	r3, #0
   17e7e:	d100      	bne.n	17e82 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17e80:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_30[u32CoreId] = msr;
   17e82:	490a      	ldr	r1, [pc, #40]	; (17eac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x54>)
   17e84:	9b01      	ldr	r3, [sp, #4]
   17e86:	9a00      	ldr	r2, [sp, #0]
   17e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId]++;
   17e8c:	4a06      	ldr	r2, [pc, #24]	; (17ea8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
   17e8e:	9b01      	ldr	r3, [sp, #4]
   17e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17e94:	1c5a      	adds	r2, r3, #1
   17e96:	4904      	ldr	r1, [pc, #16]	; (17ea8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
   17e98:	9b01      	ldr	r3, [sp, #4]
   17e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17e9e:	bf00      	nop
   17ea0:	b003      	add	sp, #12
   17ea2:	f85d fb04 	ldr.w	pc, [sp], #4
   17ea6:	bf00      	nop
   17ea8:	1fff9720 	.word	0x1fff9720
   17eac:	1fff971c 	.word	0x1fff971c

00017eb0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30(void)
{
   17eb0:	b500      	push	{lr}
   17eb2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17eb4:	f7e9 fdc6 	bl	1a44 <Sys_GetCoreID>
   17eb8:	4603      	mov	r3, r0
   17eba:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId]--;
   17ebc:	4a0d      	ldr	r2, [pc, #52]	; (17ef4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
   17ebe:	9b01      	ldr	r3, [sp, #4]
   17ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17ec4:	1e5a      	subs	r2, r3, #1
   17ec6:	490b      	ldr	r1, [pc, #44]	; (17ef4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
   17ec8:	9b01      	ldr	r3, [sp, #4]
   17eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
   17ece:	4a0a      	ldr	r2, [pc, #40]	; (17ef8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x48>)
   17ed0:	9b01      	ldr	r3, [sp, #4]
   17ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17ed6:	f003 0301 	and.w	r3, r3, #1
   17eda:	2b00      	cmp	r3, #0
   17edc:	d106      	bne.n	17eec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x3c>
   17ede:	4a05      	ldr	r2, [pc, #20]	; (17ef4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
   17ee0:	9b01      	ldr	r3, [sp, #4]
   17ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17ee6:	2b00      	cmp	r3, #0
   17ee8:	d100      	bne.n	17eec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17eea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17eec:	bf00      	nop
   17eee:	b003      	add	sp, #12
   17ef0:	f85d fb04 	ldr.w	pc, [sp], #4
   17ef4:	1fff9720 	.word	0x1fff9720
   17ef8:	1fff971c 	.word	0x1fff971c

00017efc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31(void)
{
   17efc:	b500      	push	{lr}
   17efe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17f00:	f7e9 fda0 	bl	1a44 <Sys_GetCoreID>
   17f04:	4603      	mov	r3, r0
   17f06:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId])
   17f08:	4a10      	ldr	r2, [pc, #64]	; (17f4c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
   17f0a:	9b01      	ldr	r3, [sp, #4]
   17f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17f10:	2b00      	cmp	r3, #0
   17f12:	d10d      	bne.n	17f30 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17f14:	f7e8 fd18 	bl	948 <Pwm_schm_read_msr>
   17f18:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17f1a:	9b00      	ldr	r3, [sp, #0]
   17f1c:	f003 0301 	and.w	r3, r3, #1
   17f20:	2b00      	cmp	r3, #0
   17f22:	d100      	bne.n	17f26 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17f24:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_31[u32CoreId] = msr;
   17f26:	490a      	ldr	r1, [pc, #40]	; (17f50 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x54>)
   17f28:	9b01      	ldr	r3, [sp, #4]
   17f2a:	9a00      	ldr	r2, [sp, #0]
   17f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId]++;
   17f30:	4a06      	ldr	r2, [pc, #24]	; (17f4c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
   17f32:	9b01      	ldr	r3, [sp, #4]
   17f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17f38:	1c5a      	adds	r2, r3, #1
   17f3a:	4904      	ldr	r1, [pc, #16]	; (17f4c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
   17f3c:	9b01      	ldr	r3, [sp, #4]
   17f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17f42:	bf00      	nop
   17f44:	b003      	add	sp, #12
   17f46:	f85d fb04 	ldr.w	pc, [sp], #4
   17f4a:	bf00      	nop
   17f4c:	1fff9728 	.word	0x1fff9728
   17f50:	1fff9724 	.word	0x1fff9724

00017f54 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31(void)
{
   17f54:	b500      	push	{lr}
   17f56:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17f58:	f7e9 fd74 	bl	1a44 <Sys_GetCoreID>
   17f5c:	4603      	mov	r3, r0
   17f5e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId]--;
   17f60:	4a0d      	ldr	r2, [pc, #52]	; (17f98 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
   17f62:	9b01      	ldr	r3, [sp, #4]
   17f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17f68:	1e5a      	subs	r2, r3, #1
   17f6a:	490b      	ldr	r1, [pc, #44]	; (17f98 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
   17f6c:	9b01      	ldr	r3, [sp, #4]
   17f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
   17f72:	4a0a      	ldr	r2, [pc, #40]	; (17f9c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x48>)
   17f74:	9b01      	ldr	r3, [sp, #4]
   17f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17f7a:	f003 0301 	and.w	r3, r3, #1
   17f7e:	2b00      	cmp	r3, #0
   17f80:	d106      	bne.n	17f90 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x3c>
   17f82:	4a05      	ldr	r2, [pc, #20]	; (17f98 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
   17f84:	9b01      	ldr	r3, [sp, #4]
   17f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17f8a:	2b00      	cmp	r3, #0
   17f8c:	d100      	bne.n	17f90 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17f8e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17f90:	bf00      	nop
   17f92:	b003      	add	sp, #12
   17f94:	f85d fb04 	ldr.w	pc, [sp], #4
   17f98:	1fff9728 	.word	0x1fff9728
   17f9c:	1fff9724 	.word	0x1fff9724

00017fa0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32(void)
{
   17fa0:	b500      	push	{lr}
   17fa2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17fa4:	f7e9 fd4e 	bl	1a44 <Sys_GetCoreID>
   17fa8:	4603      	mov	r3, r0
   17faa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId])
   17fac:	4a10      	ldr	r2, [pc, #64]	; (17ff0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
   17fae:	9b01      	ldr	r3, [sp, #4]
   17fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17fb4:	2b00      	cmp	r3, #0
   17fb6:	d10d      	bne.n	17fd4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17fb8:	f7e8 fcc6 	bl	948 <Pwm_schm_read_msr>
   17fbc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17fbe:	9b00      	ldr	r3, [sp, #0]
   17fc0:	f003 0301 	and.w	r3, r3, #1
   17fc4:	2b00      	cmp	r3, #0
   17fc6:	d100      	bne.n	17fca <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17fc8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_32[u32CoreId] = msr;
   17fca:	490a      	ldr	r1, [pc, #40]	; (17ff4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x54>)
   17fcc:	9b01      	ldr	r3, [sp, #4]
   17fce:	9a00      	ldr	r2, [sp, #0]
   17fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId]++;
   17fd4:	4a06      	ldr	r2, [pc, #24]	; (17ff0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
   17fd6:	9b01      	ldr	r3, [sp, #4]
   17fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17fdc:	1c5a      	adds	r2, r3, #1
   17fde:	4904      	ldr	r1, [pc, #16]	; (17ff0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
   17fe0:	9b01      	ldr	r3, [sp, #4]
   17fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17fe6:	bf00      	nop
   17fe8:	b003      	add	sp, #12
   17fea:	f85d fb04 	ldr.w	pc, [sp], #4
   17fee:	bf00      	nop
   17ff0:	1fff9730 	.word	0x1fff9730
   17ff4:	1fff972c 	.word	0x1fff972c

00017ff8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32(void)
{
   17ff8:	b500      	push	{lr}
   17ffa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17ffc:	f7e9 fd22 	bl	1a44 <Sys_GetCoreID>
   18000:	4603      	mov	r3, r0
   18002:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId]--;
   18004:	4a0d      	ldr	r2, [pc, #52]	; (1803c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
   18006:	9b01      	ldr	r3, [sp, #4]
   18008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1800c:	1e5a      	subs	r2, r3, #1
   1800e:	490b      	ldr	r1, [pc, #44]	; (1803c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
   18010:	9b01      	ldr	r3, [sp, #4]
   18012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_32[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId]))         /*if interrupts were enabled*/
   18016:	4a0a      	ldr	r2, [pc, #40]	; (18040 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x48>)
   18018:	9b01      	ldr	r3, [sp, #4]
   1801a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1801e:	f003 0301 	and.w	r3, r3, #1
   18022:	2b00      	cmp	r3, #0
   18024:	d106      	bne.n	18034 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x3c>
   18026:	4a05      	ldr	r2, [pc, #20]	; (1803c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
   18028:	9b01      	ldr	r3, [sp, #4]
   1802a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1802e:	2b00      	cmp	r3, #0
   18030:	d100      	bne.n	18034 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   18032:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   18034:	bf00      	nop
   18036:	b003      	add	sp, #12
   18038:	f85d fb04 	ldr.w	pc, [sp], #4
   1803c:	1fff9730 	.word	0x1fff9730
   18040:	1fff972c 	.word	0x1fff972c

00018044 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33(void)
{
   18044:	b500      	push	{lr}
   18046:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   18048:	f7e9 fcfc 	bl	1a44 <Sys_GetCoreID>
   1804c:	4603      	mov	r3, r0
   1804e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId])
   18050:	4a10      	ldr	r2, [pc, #64]	; (18094 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
   18052:	9b01      	ldr	r3, [sp, #4]
   18054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   18058:	2b00      	cmp	r3, #0
   1805a:	d10d      	bne.n	18078 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1805c:	f7e8 fc74 	bl	948 <Pwm_schm_read_msr>
   18060:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   18062:	9b00      	ldr	r3, [sp, #0]
   18064:	f003 0301 	and.w	r3, r3, #1
   18068:	2b00      	cmp	r3, #0
   1806a:	d100      	bne.n	1806e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1806c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_33[u32CoreId] = msr;
   1806e:	490a      	ldr	r1, [pc, #40]	; (18098 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x54>)
   18070:	9b01      	ldr	r3, [sp, #4]
   18072:	9a00      	ldr	r2, [sp, #0]
   18074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId]++;
   18078:	4a06      	ldr	r2, [pc, #24]	; (18094 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
   1807a:	9b01      	ldr	r3, [sp, #4]
   1807c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   18080:	1c5a      	adds	r2, r3, #1
   18082:	4904      	ldr	r1, [pc, #16]	; (18094 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
   18084:	9b01      	ldr	r3, [sp, #4]
   18086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1808a:	bf00      	nop
   1808c:	b003      	add	sp, #12
   1808e:	f85d fb04 	ldr.w	pc, [sp], #4
   18092:	bf00      	nop
   18094:	1fff9738 	.word	0x1fff9738
   18098:	1fff9734 	.word	0x1fff9734

0001809c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33(void)
{
   1809c:	b500      	push	{lr}
   1809e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   180a0:	f7e9 fcd0 	bl	1a44 <Sys_GetCoreID>
   180a4:	4603      	mov	r3, r0
   180a6:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId]--;
   180a8:	4a0d      	ldr	r2, [pc, #52]	; (180e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
   180aa:	9b01      	ldr	r3, [sp, #4]
   180ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   180b0:	1e5a      	subs	r2, r3, #1
   180b2:	490b      	ldr	r1, [pc, #44]	; (180e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
   180b4:	9b01      	ldr	r3, [sp, #4]
   180b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_33[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId]))         /*if interrupts were enabled*/
   180ba:	4a0a      	ldr	r2, [pc, #40]	; (180e4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x48>)
   180bc:	9b01      	ldr	r3, [sp, #4]
   180be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   180c2:	f003 0301 	and.w	r3, r3, #1
   180c6:	2b00      	cmp	r3, #0
   180c8:	d106      	bne.n	180d8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x3c>
   180ca:	4a05      	ldr	r2, [pc, #20]	; (180e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
   180cc:	9b01      	ldr	r3, [sp, #4]
   180ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   180d2:	2b00      	cmp	r3, #0
   180d4:	d100      	bne.n	180d8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   180d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   180d8:	bf00      	nop
   180da:	b003      	add	sp, #12
   180dc:	f85d fb04 	ldr.w	pc, [sp], #4
   180e0:	1fff9738 	.word	0x1fff9738
   180e4:	1fff9734 	.word	0x1fff9734

000180e8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34(void)
{
   180e8:	b500      	push	{lr}
   180ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   180ec:	f7e9 fcaa 	bl	1a44 <Sys_GetCoreID>
   180f0:	4603      	mov	r3, r0
   180f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId])
   180f4:	4a10      	ldr	r2, [pc, #64]	; (18138 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
   180f6:	9b01      	ldr	r3, [sp, #4]
   180f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   180fc:	2b00      	cmp	r3, #0
   180fe:	d10d      	bne.n	1811c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   18100:	f7e8 fc22 	bl	948 <Pwm_schm_read_msr>
   18104:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   18106:	9b00      	ldr	r3, [sp, #0]
   18108:	f003 0301 	and.w	r3, r3, #1
   1810c:	2b00      	cmp	r3, #0
   1810e:	d100      	bne.n	18112 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   18110:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_34[u32CoreId] = msr;
   18112:	490a      	ldr	r1, [pc, #40]	; (1813c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x54>)
   18114:	9b01      	ldr	r3, [sp, #4]
   18116:	9a00      	ldr	r2, [sp, #0]
   18118:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId]++;
   1811c:	4a06      	ldr	r2, [pc, #24]	; (18138 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
   1811e:	9b01      	ldr	r3, [sp, #4]
   18120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   18124:	1c5a      	adds	r2, r3, #1
   18126:	4904      	ldr	r1, [pc, #16]	; (18138 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
   18128:	9b01      	ldr	r3, [sp, #4]
   1812a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1812e:	bf00      	nop
   18130:	b003      	add	sp, #12
   18132:	f85d fb04 	ldr.w	pc, [sp], #4
   18136:	bf00      	nop
   18138:	1fff9740 	.word	0x1fff9740
   1813c:	1fff973c 	.word	0x1fff973c

00018140 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34(void)
{
   18140:	b500      	push	{lr}
   18142:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   18144:	f7e9 fc7e 	bl	1a44 <Sys_GetCoreID>
   18148:	4603      	mov	r3, r0
   1814a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId]--;
   1814c:	4a0d      	ldr	r2, [pc, #52]	; (18184 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
   1814e:	9b01      	ldr	r3, [sp, #4]
   18150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   18154:	1e5a      	subs	r2, r3, #1
   18156:	490b      	ldr	r1, [pc, #44]	; (18184 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
   18158:	9b01      	ldr	r3, [sp, #4]
   1815a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_34[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId]))         /*if interrupts were enabled*/
   1815e:	4a0a      	ldr	r2, [pc, #40]	; (18188 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x48>)
   18160:	9b01      	ldr	r3, [sp, #4]
   18162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   18166:	f003 0301 	and.w	r3, r3, #1
   1816a:	2b00      	cmp	r3, #0
   1816c:	d106      	bne.n	1817c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x3c>
   1816e:	4a05      	ldr	r2, [pc, #20]	; (18184 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
   18170:	9b01      	ldr	r3, [sp, #4]
   18172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   18176:	2b00      	cmp	r3, #0
   18178:	d100      	bne.n	1817c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1817a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1817c:	bf00      	nop
   1817e:	b003      	add	sp, #12
   18180:	f85d fb04 	ldr.w	pc, [sp], #4
   18184:	1fff9740 	.word	0x1fff9740
   18188:	1fff973c 	.word	0x1fff973c

0001818c <Det_Init>:
*
* @requirements   DET008
*
*/
void Det_Init(void)
{
   1818c:	b508      	push	{r3, lr}
    SEGGER_RTT_Init();  //Initializing RTT library.
   1818e:	f7e9 fdf7 	bl	1d80 <SEGGER_RTT_Init>
}
   18192:	bf00      	nop
   18194:	bd08      	pop	{r3, pc}

00018196 <Det_SearchApi>:
 * @param[in] ApiId Api id where error was detected.
 * @return StringPtr Ptr to string of api name.
 * 
 * @note If the Api Id isn´t registered in the hash table it will return NULL; 
 */
const char* Det_SearchApi( uint8 ModuleIndex, uint8 ApiId ) {
   18196:	b084      	sub	sp, #16
   18198:	4603      	mov	r3, r0
   1819a:	460a      	mov	r2, r1
   1819c:	f88d 3007 	strb.w	r3, [sp, #7]
   181a0:	4613      	mov	r3, r2
   181a2:	f88d 3006 	strb.w	r3, [sp, #6]
    //local data.
    uint8 i = 0;
   181a6:	2300      	movs	r3, #0
   181a8:	f88d 300f 	strb.w	r3, [sp, #15]
    const char *StringPtr = NULL_PTR;
   181ac:	2300      	movs	r3, #0
   181ae:	9302      	str	r3, [sp, #8]

    for ( i = 0; i < ModuleStrings_Ptr[ ModuleIndex ].Apis; i++ ) { //Searching for api.
   181b0:	2300      	movs	r3, #0
   181b2:	f88d 300f 	strb.w	r3, [sp, #15]
   181b6:	e026      	b.n	18206 <Det_SearchApi+0x70>
        if ( ModuleStrings_Ptr[ ModuleIndex ].ApiNames[i].ApiId == ApiId ) {
   181b8:	491b      	ldr	r1, [pc, #108]	; (18228 <Det_SearchApi+0x92>)
   181ba:	f89d 2007 	ldrb.w	r2, [sp, #7]
   181be:	4613      	mov	r3, r2
   181c0:	005b      	lsls	r3, r3, #1
   181c2:	4413      	add	r3, r2
   181c4:	00db      	lsls	r3, r3, #3
   181c6:	440b      	add	r3, r1
   181c8:	68da      	ldr	r2, [r3, #12]
   181ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
   181ce:	00db      	lsls	r3, r3, #3
   181d0:	4413      	add	r3, r2
   181d2:	781b      	ldrb	r3, [r3, #0]
   181d4:	f89d 2006 	ldrb.w	r2, [sp, #6]
   181d8:	429a      	cmp	r2, r3
   181da:	d10f      	bne.n	181fc <Det_SearchApi+0x66>
            StringPtr = ModuleStrings_Ptr[ ModuleIndex ].ApiNames[i].ApiName;
   181dc:	4912      	ldr	r1, [pc, #72]	; (18228 <Det_SearchApi+0x92>)
   181de:	f89d 2007 	ldrb.w	r2, [sp, #7]
   181e2:	4613      	mov	r3, r2
   181e4:	005b      	lsls	r3, r3, #1
   181e6:	4413      	add	r3, r2
   181e8:	00db      	lsls	r3, r3, #3
   181ea:	440b      	add	r3, r1
   181ec:	68da      	ldr	r2, [r3, #12]
   181ee:	f89d 300f 	ldrb.w	r3, [sp, #15]
   181f2:	00db      	lsls	r3, r3, #3
   181f4:	4413      	add	r3, r2
   181f6:	685b      	ldr	r3, [r3, #4]
   181f8:	9302      	str	r3, [sp, #8]
            break;
   181fa:	e011      	b.n	18220 <Det_SearchApi+0x8a>
    for ( i = 0; i < ModuleStrings_Ptr[ ModuleIndex ].Apis; i++ ) { //Searching for api.
   181fc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   18200:	3301      	adds	r3, #1
   18202:	f88d 300f 	strb.w	r3, [sp, #15]
   18206:	4908      	ldr	r1, [pc, #32]	; (18228 <Det_SearchApi+0x92>)
   18208:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1820c:	4613      	mov	r3, r2
   1820e:	005b      	lsls	r3, r3, #1
   18210:	4413      	add	r3, r2
   18212:	00db      	lsls	r3, r3, #3
   18214:	440b      	add	r3, r1
   18216:	7a1b      	ldrb	r3, [r3, #8]
   18218:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1821c:	429a      	cmp	r2, r3
   1821e:	d3cb      	bcc.n	181b8 <Det_SearchApi+0x22>
        }
    }

    return StringPtr;
   18220:	9b02      	ldr	r3, [sp, #8]
}
   18222:	4618      	mov	r0, r3
   18224:	b004      	add	sp, #16
   18226:	4770      	bx	lr
   18228:	00019ba0 	.word	0x00019ba0

0001822c <Det_SearchError>:
 * @param[in] ErrorId Error id reported.
 * @return StringPtr Ptr to string of error meaning.
 * 
 * @note If the Error Id isn´t registered in the hash table it will return NULL; 
 */
const char* Det_SearchError( uint8 ModuleIndex, uint8 ErrorId ) {
   1822c:	b084      	sub	sp, #16
   1822e:	4603      	mov	r3, r0
   18230:	460a      	mov	r2, r1
   18232:	f88d 3007 	strb.w	r3, [sp, #7]
   18236:	4613      	mov	r3, r2
   18238:	f88d 3006 	strb.w	r3, [sp, #6]
    //local data.
    uint8 i = 0;
   1823c:	2300      	movs	r3, #0
   1823e:	f88d 300f 	strb.w	r3, [sp, #15]
    const char *StringPtr = NULL_PTR;
   18242:	2300      	movs	r3, #0
   18244:	9302      	str	r3, [sp, #8]

    for ( i = 0; i < ModuleStrings_Ptr[ ModuleIndex ].Errors; i++ ) { //Searching for api.
   18246:	2300      	movs	r3, #0
   18248:	f88d 300f 	strb.w	r3, [sp, #15]
   1824c:	e026      	b.n	1829c <Det_SearchError+0x70>
        if ( ModuleStrings_Ptr[ ModuleIndex ].ErrorMeanings[i].ErrorId == ErrorId ) {
   1824e:	491c      	ldr	r1, [pc, #112]	; (182c0 <Det_SearchError+0x94>)
   18250:	f89d 2007 	ldrb.w	r2, [sp, #7]
   18254:	4613      	mov	r3, r2
   18256:	005b      	lsls	r3, r3, #1
   18258:	4413      	add	r3, r2
   1825a:	00db      	lsls	r3, r3, #3
   1825c:	440b      	add	r3, r1
   1825e:	695a      	ldr	r2, [r3, #20]
   18260:	f89d 300f 	ldrb.w	r3, [sp, #15]
   18264:	00db      	lsls	r3, r3, #3
   18266:	4413      	add	r3, r2
   18268:	781b      	ldrb	r3, [r3, #0]
   1826a:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1826e:	429a      	cmp	r2, r3
   18270:	d10f      	bne.n	18292 <Det_SearchError+0x66>
            StringPtr = ModuleStrings_Ptr[ ModuleIndex ].ErrorMeanings[i].ErrorMeaning;
   18272:	4913      	ldr	r1, [pc, #76]	; (182c0 <Det_SearchError+0x94>)
   18274:	f89d 2007 	ldrb.w	r2, [sp, #7]
   18278:	4613      	mov	r3, r2
   1827a:	005b      	lsls	r3, r3, #1
   1827c:	4413      	add	r3, r2
   1827e:	00db      	lsls	r3, r3, #3
   18280:	440b      	add	r3, r1
   18282:	695a      	ldr	r2, [r3, #20]
   18284:	f89d 300f 	ldrb.w	r3, [sp, #15]
   18288:	00db      	lsls	r3, r3, #3
   1828a:	4413      	add	r3, r2
   1828c:	685b      	ldr	r3, [r3, #4]
   1828e:	9302      	str	r3, [sp, #8]
            break;
   18290:	e011      	b.n	182b6 <Det_SearchError+0x8a>
    for ( i = 0; i < ModuleStrings_Ptr[ ModuleIndex ].Errors; i++ ) { //Searching for api.
   18292:	f89d 300f 	ldrb.w	r3, [sp, #15]
   18296:	3301      	adds	r3, #1
   18298:	f88d 300f 	strb.w	r3, [sp, #15]
   1829c:	4908      	ldr	r1, [pc, #32]	; (182c0 <Det_SearchError+0x94>)
   1829e:	f89d 2007 	ldrb.w	r2, [sp, #7]
   182a2:	4613      	mov	r3, r2
   182a4:	005b      	lsls	r3, r3, #1
   182a6:	4413      	add	r3, r2
   182a8:	00db      	lsls	r3, r3, #3
   182aa:	440b      	add	r3, r1
   182ac:	7c1b      	ldrb	r3, [r3, #16]
   182ae:	f89d 200f 	ldrb.w	r2, [sp, #15]
   182b2:	429a      	cmp	r2, r3
   182b4:	d3cb      	bcc.n	1824e <Det_SearchError+0x22>
        }
    }

    return StringPtr;
   182b6:	9b02      	ldr	r3, [sp, #8]
}
   182b8:	4618      	mov	r0, r3
   182ba:	b004      	add	sp, #16
   182bc:	4770      	bx	lr
   182be:	bf00      	nop
   182c0:	00019ba0 	.word	0x00019ba0

000182c4 <Det_GetModuleName>:
 * @param[in] ModuleId Module Id where error was detected.
 * @return StringPtr Pointer to string module name.
 * 
 * @note If the module Id isn´t registered it will return NULL;
 */
const char* Det_GetModuleName( uint16 ModuleId ) {
   182c4:	b084      	sub	sp, #16
   182c6:	4603      	mov	r3, r0
   182c8:	f8ad 3006 	strh.w	r3, [sp, #6]
    //local data 
    uint8 i = 0;
   182cc:	2300      	movs	r3, #0
   182ce:	f88d 300f 	strb.w	r3, [sp, #15]
    const char *StringPtr = NULL_PTR;
   182d2:	2300      	movs	r3, #0
   182d4:	9302      	str	r3, [sp, #8]

    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching module name.
   182d6:	2300      	movs	r3, #0
   182d8:	f88d 300f 	strb.w	r3, [sp, #15]
   182dc:	e01c      	b.n	18318 <Det_GetModuleName+0x54>
        if ( ModuleStrings_Ptr[i].ModuleId == ModuleId ) {
   182de:	4912      	ldr	r1, [pc, #72]	; (18328 <Det_GetModuleName+0x64>)
   182e0:	f89d 200f 	ldrb.w	r2, [sp, #15]
   182e4:	4613      	mov	r3, r2
   182e6:	005b      	lsls	r3, r3, #1
   182e8:	4413      	add	r3, r2
   182ea:	00db      	lsls	r3, r3, #3
   182ec:	440b      	add	r3, r1
   182ee:	881b      	ldrh	r3, [r3, #0]
   182f0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   182f4:	429a      	cmp	r2, r3
   182f6:	d10a      	bne.n	1830e <Det_GetModuleName+0x4a>
            StringPtr = ModuleStrings_Ptr[i].ModuleName;
   182f8:	490b      	ldr	r1, [pc, #44]	; (18328 <Det_GetModuleName+0x64>)
   182fa:	f89d 200f 	ldrb.w	r2, [sp, #15]
   182fe:	4613      	mov	r3, r2
   18300:	005b      	lsls	r3, r3, #1
   18302:	4413      	add	r3, r2
   18304:	00db      	lsls	r3, r3, #3
   18306:	440b      	add	r3, r1
   18308:	685b      	ldr	r3, [r3, #4]
   1830a:	9302      	str	r3, [sp, #8]
            break;
   1830c:	e008      	b.n	18320 <Det_GetModuleName+0x5c>
    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching module name.
   1830e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   18312:	3301      	adds	r3, #1
   18314:	f88d 300f 	strb.w	r3, [sp, #15]
   18318:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1831c:	2b0a      	cmp	r3, #10
   1831e:	d9de      	bls.n	182de <Det_GetModuleName+0x1a>
        }
    }

    return StringPtr;
   18320:	9b02      	ldr	r3, [sp, #8]
}
   18322:	4618      	mov	r0, r3
   18324:	b004      	add	sp, #16
   18326:	4770      	bx	lr
   18328:	00019ba0 	.word	0x00019ba0

0001832c <Det_GetApiName>:
 * @param[in] ApiId Api Id where error was detected 
 * @return StringPtr Pointer to string Api name.
 * 
 * @note If the Api Id isn´t registered in the hash table it will return NULL;
 */
const char* Det_GetApiName( uint16 ModuleId, uint8 ApiId ) {
   1832c:	b500      	push	{lr}
   1832e:	b085      	sub	sp, #20
   18330:	4603      	mov	r3, r0
   18332:	460a      	mov	r2, r1
   18334:	f8ad 3006 	strh.w	r3, [sp, #6]
   18338:	4613      	mov	r3, r2
   1833a:	f88d 3005 	strb.w	r3, [sp, #5]
    //local data.
    uint8 i = 0;
   1833e:	2300      	movs	r3, #0
   18340:	f88d 300f 	strb.w	r3, [sp, #15]
    const char *StringPtr = NULL_PTR;
   18344:	2300      	movs	r3, #0
   18346:	9302      	str	r3, [sp, #8]

    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching for module.
   18348:	2300      	movs	r3, #0
   1834a:	f88d 300f 	strb.w	r3, [sp, #15]
   1834e:	e01b      	b.n	18388 <Det_GetApiName+0x5c>
        if ( ModuleStrings_Ptr[i].ModuleId == ModuleId ) {
   18350:	4912      	ldr	r1, [pc, #72]	; (1839c <Det_GetApiName+0x70>)
   18352:	f89d 200f 	ldrb.w	r2, [sp, #15]
   18356:	4613      	mov	r3, r2
   18358:	005b      	lsls	r3, r3, #1
   1835a:	4413      	add	r3, r2
   1835c:	00db      	lsls	r3, r3, #3
   1835e:	440b      	add	r3, r1
   18360:	881b      	ldrh	r3, [r3, #0]
   18362:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   18366:	429a      	cmp	r2, r3
   18368:	d109      	bne.n	1837e <Det_GetApiName+0x52>
            StringPtr = Det_SearchApi( i , ApiId ); //Searching Api.
   1836a:	f89d 2005 	ldrb.w	r2, [sp, #5]
   1836e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   18372:	4611      	mov	r1, r2
   18374:	4618      	mov	r0, r3
   18376:	f7ff ff0e 	bl	18196 <Det_SearchApi>
   1837a:	9002      	str	r0, [sp, #8]
            break;
   1837c:	e008      	b.n	18390 <Det_GetApiName+0x64>
    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching for module.
   1837e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   18382:	3301      	adds	r3, #1
   18384:	f88d 300f 	strb.w	r3, [sp, #15]
   18388:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1838c:	2b0a      	cmp	r3, #10
   1838e:	d9df      	bls.n	18350 <Det_GetApiName+0x24>
        }
    }

    return StringPtr;
   18390:	9b02      	ldr	r3, [sp, #8]
}
   18392:	4618      	mov	r0, r3
   18394:	b005      	add	sp, #20
   18396:	f85d fb04 	ldr.w	pc, [sp], #4
   1839a:	bf00      	nop
   1839c:	00019ba0 	.word	0x00019ba0

000183a0 <Det_GetErrorMeaning>:
 * @param[in] ErrorId Error Id reported. 
 * @return StringPtr Pointer to string Error meaning.
 * 
 * @note If the Error Id isn´t registered in the hash table it will return NULL;
 */
const char* Det_GetErrorMeaning( uint16 ModuleId, uint8 ErrorId ) {
   183a0:	b500      	push	{lr}
   183a2:	b085      	sub	sp, #20
   183a4:	4603      	mov	r3, r0
   183a6:	460a      	mov	r2, r1
   183a8:	f8ad 3006 	strh.w	r3, [sp, #6]
   183ac:	4613      	mov	r3, r2
   183ae:	f88d 3005 	strb.w	r3, [sp, #5]
    //local data.
    uint8 i = 0;
   183b2:	2300      	movs	r3, #0
   183b4:	f88d 300f 	strb.w	r3, [sp, #15]
    const char * StringPtr = NULL_PTR;
   183b8:	2300      	movs	r3, #0
   183ba:	9302      	str	r3, [sp, #8]

    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching for module.
   183bc:	2300      	movs	r3, #0
   183be:	f88d 300f 	strb.w	r3, [sp, #15]
   183c2:	e01b      	b.n	183fc <Det_GetErrorMeaning+0x5c>
        if ( ModuleStrings_Ptr[i].ModuleId == ModuleId ) {
   183c4:	4912      	ldr	r1, [pc, #72]	; (18410 <Det_GetErrorMeaning+0x70>)
   183c6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   183ca:	4613      	mov	r3, r2
   183cc:	005b      	lsls	r3, r3, #1
   183ce:	4413      	add	r3, r2
   183d0:	00db      	lsls	r3, r3, #3
   183d2:	440b      	add	r3, r1
   183d4:	881b      	ldrh	r3, [r3, #0]
   183d6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   183da:	429a      	cmp	r2, r3
   183dc:	d109      	bne.n	183f2 <Det_GetErrorMeaning+0x52>
            StringPtr = Det_SearchError( i, ErrorId );
   183de:	f89d 2005 	ldrb.w	r2, [sp, #5]
   183e2:	f89d 300f 	ldrb.w	r3, [sp, #15]
   183e6:	4611      	mov	r1, r2
   183e8:	4618      	mov	r0, r3
   183ea:	f7ff ff1f 	bl	1822c <Det_SearchError>
   183ee:	9002      	str	r0, [sp, #8]
            break;
   183f0:	e008      	b.n	18404 <Det_GetErrorMeaning+0x64>
    for ( i = 0; i < DET_MODULES; i++ ) {  //Searching for module.
   183f2:	f89d 300f 	ldrb.w	r3, [sp, #15]
   183f6:	3301      	adds	r3, #1
   183f8:	f88d 300f 	strb.w	r3, [sp, #15]
   183fc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   18400:	2b0a      	cmp	r3, #10
   18402:	d9df      	bls.n	183c4 <Det_GetErrorMeaning+0x24>
        }
    }

    return StringPtr;
   18404:	9b02      	ldr	r3, [sp, #8]
}
   18406:	4618      	mov	r0, r3
   18408:	b005      	add	sp, #20
   1840a:	f85d fb04 	ldr.w	pc, [sp], #4
   1840e:	bf00      	nop
   18410:	00019ba0 	.word	0x00019ba0

00018414 <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
   18414:	b510      	push	{r4, lr}
   18416:	b088      	sub	sp, #32
   18418:	4604      	mov	r4, r0
   1841a:	4608      	mov	r0, r1
   1841c:	4611      	mov	r1, r2
   1841e:	461a      	mov	r2, r3
   18420:	4623      	mov	r3, r4
   18422:	f8ad 300e 	strh.w	r3, [sp, #14]
   18426:	4603      	mov	r3, r0
   18428:	f88d 300d 	strb.w	r3, [sp, #13]
   1842c:	460b      	mov	r3, r1
   1842e:	f88d 300c 	strb.w	r3, [sp, #12]
   18432:	4613      	mov	r3, r2
   18434:	f88d 300b 	strb.w	r3, [sp, #11]
    //local data.
    const char* Strings_error[3]; //Pointer to strings for the error message.

    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   18438:	f7e9 fb04 	bl	1a44 <Sys_GetCoreID>
   1843c:	4603      	mov	r3, r0
   1843e:	9307      	str	r3, [sp, #28]

    Det_ModuleId[u32CoreId] = ModuleId;
   18440:	4921      	ldr	r1, [pc, #132]	; (184c8 <Det_ReportError+0xb4>)
   18442:	9b07      	ldr	r3, [sp, #28]
   18444:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   18448:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
   1844c:	4a1f      	ldr	r2, [pc, #124]	; (184cc <Det_ReportError+0xb8>)
   1844e:	9b07      	ldr	r3, [sp, #28]
   18450:	4413      	add	r3, r2
   18452:	f89d 200d 	ldrb.w	r2, [sp, #13]
   18456:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
   18458:	4a1d      	ldr	r2, [pc, #116]	; (184d0 <Det_ReportError+0xbc>)
   1845a:	9b07      	ldr	r3, [sp, #28]
   1845c:	4413      	add	r3, r2
   1845e:	f89d 200c 	ldrb.w	r2, [sp, #12]
   18462:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
   18464:	4a1b      	ldr	r2, [pc, #108]	; (184d4 <Det_ReportError+0xc0>)
   18466:	9b07      	ldr	r3, [sp, #28]
   18468:	4413      	add	r3, r2
   1846a:	f89d 200b 	ldrb.w	r2, [sp, #11]
   1846e:	701a      	strb	r2, [r3, #0]

    //Obtaining strings for error message.
    Strings_error[0] = Det_GetModuleName( ModuleId );
   18470:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   18474:	4618      	mov	r0, r3
   18476:	f7ff ff25 	bl	182c4 <Det_GetModuleName>
   1847a:	4603      	mov	r3, r0
   1847c:	9304      	str	r3, [sp, #16]
    Strings_error[1] = Det_GetApiName( ModuleId, ApiId );
   1847e:	f89d 200c 	ldrb.w	r2, [sp, #12]
   18482:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   18486:	4611      	mov	r1, r2
   18488:	4618      	mov	r0, r3
   1848a:	f7ff ff4f 	bl	1832c <Det_GetApiName>
   1848e:	4603      	mov	r3, r0
   18490:	9305      	str	r3, [sp, #20]
    Strings_error[2] = Det_GetErrorMeaning( ModuleId, ErrorId );
   18492:	f89d 200b 	ldrb.w	r2, [sp, #11]
   18496:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1849a:	4611      	mov	r1, r2
   1849c:	4618      	mov	r0, r3
   1849e:	f7ff ff7f 	bl	183a0 <Det_GetErrorMeaning>
   184a2:	4603      	mov	r3, r0
   184a4:	9306      	str	r3, [sp, #24]

    SEGGER_RTT_printf( 0, "Error: Error in %s in function %s with the instance %d, %s\n", 
   184a6:	9904      	ldr	r1, [sp, #16]
   184a8:	9805      	ldr	r0, [sp, #20]
   184aa:	f89d 300d 	ldrb.w	r3, [sp, #13]
   184ae:	9a06      	ldr	r2, [sp, #24]
   184b0:	9201      	str	r2, [sp, #4]
   184b2:	9300      	str	r3, [sp, #0]
   184b4:	4603      	mov	r3, r0
   184b6:	460a      	mov	r2, r1
   184b8:	4907      	ldr	r1, [pc, #28]	; (184d8 <Det_ReportError+0xc4>)
   184ba:	2000      	movs	r0, #0
   184bc:	f7e9 ffc8 	bl	2450 <SEGGER_RTT_printf>
    Strings_error[0], Strings_error[1], InstanceId, Strings_error[2] );

    return E_OK;
   184c0:	2300      	movs	r3, #0
}
   184c2:	4618      	mov	r0, r3
   184c4:	b008      	add	sp, #32
   184c6:	bd10      	pop	{r4, pc}
   184c8:	1fff976c 	.word	0x1fff976c
   184cc:	1fff9744 	.word	0x1fff9744
   184d0:	1fff9748 	.word	0x1fff9748
   184d4:	1fff974c 	.word	0x1fff974c
   184d8:	00018f60 	.word	0x00018f60

000184dc <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
   184dc:	b510      	push	{r4, lr}
   184de:	b084      	sub	sp, #16
   184e0:	4604      	mov	r4, r0
   184e2:	4608      	mov	r0, r1
   184e4:	4611      	mov	r1, r2
   184e6:	461a      	mov	r2, r3
   184e8:	4623      	mov	r3, r4
   184ea:	f8ad 3006 	strh.w	r3, [sp, #6]
   184ee:	4603      	mov	r3, r0
   184f0:	f88d 3005 	strb.w	r3, [sp, #5]
   184f4:	460b      	mov	r3, r1
   184f6:	f88d 3004 	strb.w	r3, [sp, #4]
   184fa:	4613      	mov	r3, r2
   184fc:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   18500:	f7e9 faa0 	bl	1a44 <Sys_GetCoreID>
   18504:	4603      	mov	r3, r0
   18506:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
   18508:	490d      	ldr	r1, [pc, #52]	; (18540 <Det_ReportRuntimeError+0x64>)
   1850a:	9b03      	ldr	r3, [sp, #12]
   1850c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   18510:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
   18514:	4a0b      	ldr	r2, [pc, #44]	; (18544 <Det_ReportRuntimeError+0x68>)
   18516:	9b03      	ldr	r3, [sp, #12]
   18518:	4413      	add	r3, r2
   1851a:	f89d 2005 	ldrb.w	r2, [sp, #5]
   1851e:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
   18520:	4a09      	ldr	r2, [pc, #36]	; (18548 <Det_ReportRuntimeError+0x6c>)
   18522:	9b03      	ldr	r3, [sp, #12]
   18524:	4413      	add	r3, r2
   18526:	f89d 2004 	ldrb.w	r2, [sp, #4]
   1852a:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
   1852c:	4a07      	ldr	r2, [pc, #28]	; (1854c <Det_ReportRuntimeError+0x70>)
   1852e:	9b03      	ldr	r3, [sp, #12]
   18530:	4413      	add	r3, r2
   18532:	f89d 2003 	ldrb.w	r2, [sp, #3]
   18536:	701a      	strb	r2, [r3, #0]

    return E_OK;
   18538:	2300      	movs	r3, #0
}
   1853a:	4618      	mov	r0, r3
   1853c:	b004      	add	sp, #16
   1853e:	bd10      	pop	{r4, pc}
   18540:	1fff9770 	.word	0x1fff9770
   18544:	1fff9750 	.word	0x1fff9750
   18548:	1fff9754 	.word	0x1fff9754
   1854c:	1fff9758 	.word	0x1fff9758

00018550 <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
   18550:	b510      	push	{r4, lr}
   18552:	b084      	sub	sp, #16
   18554:	4604      	mov	r4, r0
   18556:	4608      	mov	r0, r1
   18558:	4611      	mov	r1, r2
   1855a:	461a      	mov	r2, r3
   1855c:	4623      	mov	r3, r4
   1855e:	f8ad 3006 	strh.w	r3, [sp, #6]
   18562:	4603      	mov	r3, r0
   18564:	f88d 3005 	strb.w	r3, [sp, #5]
   18568:	460b      	mov	r3, r1
   1856a:	f88d 3004 	strb.w	r3, [sp, #4]
   1856e:	4613      	mov	r3, r2
   18570:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   18574:	f7e9 fa66 	bl	1a44 <Sys_GetCoreID>
   18578:	4603      	mov	r3, r0
   1857a:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
   1857c:	490d      	ldr	r1, [pc, #52]	; (185b4 <Det_ReportTransientFault+0x64>)
   1857e:	9b03      	ldr	r3, [sp, #12]
   18580:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   18584:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
   18588:	4a0b      	ldr	r2, [pc, #44]	; (185b8 <Det_ReportTransientFault+0x68>)
   1858a:	9b03      	ldr	r3, [sp, #12]
   1858c:	4413      	add	r3, r2
   1858e:	f89d 2005 	ldrb.w	r2, [sp, #5]
   18592:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
   18594:	4a09      	ldr	r2, [pc, #36]	; (185bc <Det_ReportTransientFault+0x6c>)
   18596:	9b03      	ldr	r3, [sp, #12]
   18598:	4413      	add	r3, r2
   1859a:	f89d 2004 	ldrb.w	r2, [sp, #4]
   1859e:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
   185a0:	4a07      	ldr	r2, [pc, #28]	; (185c0 <Det_ReportTransientFault+0x70>)
   185a2:	9b03      	ldr	r3, [sp, #12]
   185a4:	4413      	add	r3, r2
   185a6:	f89d 2003 	ldrb.w	r2, [sp, #3]
   185aa:	701a      	strb	r2, [r3, #0]

    return E_OK;
   185ac:	2300      	movs	r3, #0
}
   185ae:	4618      	mov	r0, r3
   185b0:	b004      	add	sp, #16
   185b2:	bd10      	pop	{r4, pc}
   185b4:	1fff9768 	.word	0x1fff9768
   185b8:	1fff975c 	.word	0x1fff975c
   185bc:	1fff9760 	.word	0x1fff9760
   185c0:	1fff9764 	.word	0x1fff9764

000185c4 <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
   185c4:	bf00      	nop
   185c6:	4770      	bx	lr

000185c8 <Fls_ACEraseRomEnd>:
   185c8:	5f75634d 	.word	0x5f75634d
   185cc:	74696e49 	.word	0x74696e49
   185d0:	00002928 	.word	0x00002928
   185d4:	5f75634d 	.word	0x5f75634d
   185d8:	74696e49 	.word	0x74696e49
   185dc:	636f6c43 	.word	0x636f6c43
   185e0:	0029286b 	.word	0x0029286b
   185e4:	5f75634d 	.word	0x5f75634d
   185e8:	4d746553 	.word	0x4d746553
   185ec:	2865646f 	.word	0x2865646f
   185f0:	00000029 	.word	0x00000029
   185f4:	5f75634d 	.word	0x5f75634d
   185f8:	56746547 	.word	0x56746547
   185fc:	69737265 	.word	0x69737265
   18600:	6e496e6f 	.word	0x6e496e6f
   18604:	29286f66 	.word	0x29286f66
   18608:	00000000 	.word	0x00000000
   1860c:	61766e49 	.word	0x61766e49
   18610:	2064696c 	.word	0x2064696c
   18614:	666e6f63 	.word	0x666e6f63
   18618:	696f7020 	.word	0x696f7020
   1861c:	7265746e 	.word	0x7265746e
   18620:	00000000 	.word	0x00000000
   18624:	76697244 	.word	0x76697244
   18628:	75207265 	.word	0x75207265
   1862c:	696e696e 	.word	0x696e696e
   18630:	6c616974 	.word	0x6c616974
   18634:	64657a69 	.word	0x64657a69
   18638:	00000000 	.word	0x00000000
   1863c:	76697244 	.word	0x76697244
   18640:	61207265 	.word	0x61207265
   18644:	6165726c 	.word	0x6165726c
   18648:	69207964 	.word	0x69207964
   1864c:	6974696e 	.word	0x6974696e
   18650:	7a696c61 	.word	0x7a696c61
   18654:	00006465 	.word	0x00006465
   18658:	61766e49 	.word	0x61766e49
   1865c:	2064696c 	.word	0x2064696c
   18660:	75706e69 	.word	0x75706e69
   18664:	61702074 	.word	0x61702074
   18668:	656d6172 	.word	0x656d6172
   1866c:	00726574 	.word	0x00726574
   18670:	74616c50 	.word	0x74616c50
   18674:	6d726f66 	.word	0x6d726f66
   18678:	696e495f 	.word	0x696e495f
   1867c:	00292874 	.word	0x00292874
   18680:	74616c50 	.word	0x74616c50
   18684:	6d726f66 	.word	0x6d726f66
   18688:	7465535f 	.word	0x7465535f
   1868c:	28717249 	.word	0x28717249
   18690:	00000029 	.word	0x00000029
   18694:	74616c50 	.word	0x74616c50
   18698:	6d726f66 	.word	0x6d726f66
   1869c:	7465535f 	.word	0x7465535f
   186a0:	50717249 	.word	0x50717249
   186a4:	726f6972 	.word	0x726f6972
   186a8:	28797469 	.word	0x28797469
   186ac:	00000029 	.word	0x00000029
   186b0:	74616c50 	.word	0x74616c50
   186b4:	6d726f66 	.word	0x6d726f66
   186b8:	7465475f 	.word	0x7465475f
   186bc:	50717249 	.word	0x50717249
   186c0:	726f6972 	.word	0x726f6972
   186c4:	28797469 	.word	0x28797469
   186c8:	00000029 	.word	0x00000029
   186cc:	74616c50 	.word	0x74616c50
   186d0:	6d726f66 	.word	0x6d726f66
   186d4:	736e495f 	.word	0x736e495f
   186d8:	6c6c6174 	.word	0x6c6c6174
   186dc:	48717249 	.word	0x48717249
   186e0:	6c646e61 	.word	0x6c646e61
   186e4:	29287265 	.word	0x29287265
   186e8:	00000000 	.word	0x00000000
   186ec:	61766e49 	.word	0x61766e49
   186f0:	2064696c 	.word	0x2064696c
   186f4:	6e696f70 	.word	0x6e696f70
   186f8:	00726574 	.word	0x00726574
   186fc:	6c6c6143 	.word	0x6c6c6143
   18700:	6f726620 	.word	0x6f726620
   18704:	7277206d 	.word	0x7277206d
   18708:	20676e6f 	.word	0x20676e6f
   1870c:	7070616d 	.word	0x7070616d
   18710:	70206465 	.word	0x70206465
   18714:	69747261 	.word	0x69747261
   18718:	6e6f6974 	.word	0x6e6f6974
   1871c:	00000000 	.word	0x00000000
   18720:	61726150 	.word	0x61726150
   18724:	6574656d 	.word	0x6574656d
   18728:	756f2072 	.word	0x756f2072
   1872c:	666f2074 	.word	0x666f2074
   18730:	6e617220 	.word	0x6e617220
   18734:	00006567 	.word	0x00006567
   18738:	74726f50 	.word	0x74726f50
   1873c:	696e495f 	.word	0x696e495f
   18740:	00292874 	.word	0x00292874
   18744:	74726f50 	.word	0x74726f50
   18748:	7465535f 	.word	0x7465535f
   1874c:	446e6950 	.word	0x446e6950
   18750:	63657269 	.word	0x63657269
   18754:	6e6f6974 	.word	0x6e6f6974
   18758:	00002928 	.word	0x00002928
   1875c:	74726f50 	.word	0x74726f50
   18760:	7465535f 	.word	0x7465535f
   18764:	4d6e6950 	.word	0x4d6e6950
   18768:	2865646f 	.word	0x2865646f
   1876c:	00000029 	.word	0x00000029
   18770:	74726f50 	.word	0x74726f50
   18774:	6665525f 	.word	0x6665525f
   18778:	68736572 	.word	0x68736572
   1877c:	74726f50 	.word	0x74726f50
   18780:	65726944 	.word	0x65726944
   18784:	6f697463 	.word	0x6f697463
   18788:	0029286e 	.word	0x0029286e
   1878c:	74726f50 	.word	0x74726f50
   18790:	7465475f 	.word	0x7465475f
   18794:	73726556 	.word	0x73726556
   18798:	496e6f69 	.word	0x496e6f69
   1879c:	286f666e 	.word	0x286f666e
   187a0:	00000029 	.word	0x00000029
   187a4:	61766e49 	.word	0x61766e49
   187a8:	2064696c 	.word	0x2064696c
   187ac:	74726f50 	.word	0x74726f50
   187b0:	6e695020 	.word	0x6e695020
   187b4:	00444920 	.word	0x00444920
   187b8:	74726f50 	.word	0x74726f50
   187bc:	6e697020 	.word	0x6e697020
   187c0:	646f6d20 	.word	0x646f6d20
   187c4:	73692065 	.word	0x73692065
   187c8:	636e7520 	.word	0x636e7520
   187cc:	676e6168 	.word	0x676e6168
   187d0:	6c626165 	.word	0x6c626165
   187d4:	00000065 	.word	0x00000065
   187d8:	61766e49 	.word	0x61766e49
   187dc:	2064696c 	.word	0x2064696c
   187e0:	74726f70 	.word	0x74726f70
   187e4:	6e697020 	.word	0x6e697020
   187e8:	646f6d20 	.word	0x646f6d20
   187ec:	00000065 	.word	0x00000065
   187f0:	5f6f6944 	.word	0x5f6f6944
   187f4:	74697257 	.word	0x74697257
   187f8:	61684365 	.word	0x61684365
   187fc:	6c656e6e 	.word	0x6c656e6e
   18800:	00002928 	.word	0x00002928
   18804:	5f6f6944 	.word	0x5f6f6944
   18808:	64616552 	.word	0x64616552
   1880c:	6e616843 	.word	0x6e616843
   18810:	286c656e 	.word	0x286c656e
   18814:	00000029 	.word	0x00000029
   18818:	5f6f6944 	.word	0x5f6f6944
   1881c:	70696c46 	.word	0x70696c46
   18820:	6e616843 	.word	0x6e616843
   18824:	286c656e 	.word	0x286c656e
   18828:	00000029 	.word	0x00000029
   1882c:	5f6f6944 	.word	0x5f6f6944
   18830:	74697257 	.word	0x74697257
   18834:	61684365 	.word	0x61684365
   18838:	6c656e6e 	.word	0x6c656e6e
   1883c:	756f7247 	.word	0x756f7247
   18840:	00292870 	.word	0x00292870
   18844:	5f6f6944 	.word	0x5f6f6944
   18848:	64616552 	.word	0x64616552
   1884c:	6e616843 	.word	0x6e616843
   18850:	476c656e 	.word	0x476c656e
   18854:	70756f72 	.word	0x70756f72
   18858:	00002928 	.word	0x00002928
   1885c:	5f6f6944 	.word	0x5f6f6944
   18860:	74697257 	.word	0x74697257
   18864:	726f5065 	.word	0x726f5065
   18868:	00292874 	.word	0x00292874
   1886c:	5f6f6944 	.word	0x5f6f6944
   18870:	64616552 	.word	0x64616552
   18874:	74726f50 	.word	0x74726f50
   18878:	00002928 	.word	0x00002928
   1887c:	5f6f6944 	.word	0x5f6f6944
   18880:	56746547 	.word	0x56746547
   18884:	69737265 	.word	0x69737265
   18888:	6e496e6f 	.word	0x6e496e6f
   1888c:	29286f66 	.word	0x29286f66
   18890:	00000000 	.word	0x00000000
   18894:	61766e49 	.word	0x61766e49
   18898:	2064696c 	.word	0x2064696c
   1889c:	206f6964 	.word	0x206f6964
   188a0:	6e616863 	.word	0x6e616863
   188a4:	206c656e 	.word	0x206c656e
   188a8:	6576656c 	.word	0x6576656c
   188ac:	0000006c 	.word	0x0000006c
   188b0:	61766e49 	.word	0x61766e49
   188b4:	2064696c 	.word	0x2064696c
   188b8:	206f6964 	.word	0x206f6964
   188bc:	6e616863 	.word	0x6e616863
   188c0:	206c656e 	.word	0x206c656e
   188c4:	00006469 	.word	0x00006469
   188c8:	61766e49 	.word	0x61766e49
   188cc:	2064696c 	.word	0x2064696c
   188d0:	74726f70 	.word	0x74726f70
   188d4:	00646920 	.word	0x00646920
   188d8:	61766e49 	.word	0x61766e49
   188dc:	2064696c 	.word	0x2064696c
   188e0:	6e616863 	.word	0x6e616863
   188e4:	206c656e 	.word	0x206c656e
   188e8:	756f7267 	.word	0x756f7267
   188ec:	64692070 	.word	0x64692070
   188f0:	00000000 	.word	0x00000000
   188f4:	61766e49 	.word	0x61766e49
   188f8:	2064696c 	.word	0x2064696c
   188fc:	666e6f63 	.word	0x666e6f63
   18900:	70206769 	.word	0x70206769
   18904:	6d617261 	.word	0x6d617261
   18908:	72657465 	.word	0x72657465
   1890c:	00000000 	.word	0x00000000
   18910:	5f6d7750 	.word	0x5f6d7750
   18914:	74696e49 	.word	0x74696e49
   18918:	00002928 	.word	0x00002928
   1891c:	5f6d7750 	.word	0x5f6d7750
   18920:	6e496544 	.word	0x6e496544
   18924:	29287469 	.word	0x29287469
   18928:	00000000 	.word	0x00000000
   1892c:	5f6d7750 	.word	0x5f6d7750
   18930:	44746553 	.word	0x44746553
   18934:	43797475 	.word	0x43797475
   18938:	656c6379 	.word	0x656c6379
   1893c:	00002928 	.word	0x00002928
   18940:	5f6d7750 	.word	0x5f6d7750
   18944:	50746553 	.word	0x50746553
   18948:	6f697265 	.word	0x6f697265
   1894c:	646e4164 	.word	0x646e4164
   18950:	79747544 	.word	0x79747544
   18954:	00002928 	.word	0x00002928
   18958:	5f6d7750 	.word	0x5f6d7750
   1895c:	4f746553 	.word	0x4f746553
   18960:	75707475 	.word	0x75707475
   18964:	496f5474 	.word	0x496f5474
   18968:	28656c64 	.word	0x28656c64
   1896c:	00000029 	.word	0x00000029
   18970:	5f6d7750 	.word	0x5f6d7750
   18974:	56746547 	.word	0x56746547
   18978:	69737265 	.word	0x69737265
   1897c:	6e496e6f 	.word	0x6e496e6f
   18980:	29286f66 	.word	0x29286f66
   18984:	00000000 	.word	0x00000000
   18988:	61766e49 	.word	0x61766e49
   1898c:	2064696c 	.word	0x2064696c
   18990:	666e6f63 	.word	0x666e6f63
   18994:	70206769 	.word	0x70206769
   18998:	746e696f 	.word	0x746e696f
   1899c:	00007265 	.word	0x00007265
   189a0:	61766e49 	.word	0x61766e49
   189a4:	2064696c 	.word	0x2064696c
   189a8:	206d7770 	.word	0x206d7770
   189ac:	6e616863 	.word	0x6e616863
   189b0:	006c656e 	.word	0x006c656e
   189b4:	206d7750 	.word	0x206d7750
   189b8:	6e616863 	.word	0x6e616863
   189bc:	206c656e 	.word	0x206c656e
   189c0:	69726570 	.word	0x69726570
   189c4:	6920646f 	.word	0x6920646f
   189c8:	6e752073 	.word	0x6e752073
   189cc:	6e616863 	.word	0x6e616863
   189d0:	62616567 	.word	0x62616567
   189d4:	0000656c 	.word	0x0000656c
   189d8:	5f636441 	.word	0x5f636441
   189dc:	74696e49 	.word	0x74696e49
   189e0:	00002928 	.word	0x00002928
   189e4:	5f636441 	.word	0x5f636441
   189e8:	6e496544 	.word	0x6e496544
   189ec:	29287469 	.word	0x29287469
   189f0:	00000000 	.word	0x00000000
   189f4:	5f636441 	.word	0x5f636441
   189f8:	72617453 	.word	0x72617453
   189fc:	6f724774 	.word	0x6f724774
   18a00:	6f437075 	.word	0x6f437075
   18a04:	7265766e 	.word	0x7265766e
   18a08:	6e6f6973 	.word	0x6e6f6973
   18a0c:	00002928 	.word	0x00002928
   18a10:	5f636441 	.word	0x5f636441
   18a14:	706f7453 	.word	0x706f7453
   18a18:	756f7247 	.word	0x756f7247
   18a1c:	6e6f4370 	.word	0x6e6f4370
   18a20:	73726576 	.word	0x73726576
   18a24:	286e6f69 	.word	0x286e6f69
   18a28:	00000029 	.word	0x00000029
   18a2c:	5f636441 	.word	0x5f636441
   18a30:	64616552 	.word	0x64616552
   18a34:	756f7247 	.word	0x756f7247
   18a38:	00292870 	.word	0x00292870
   18a3c:	5f636441 	.word	0x5f636441
   18a40:	47746547 	.word	0x47746547
   18a44:	70756f72 	.word	0x70756f72
   18a48:	74617453 	.word	0x74617453
   18a4c:	29287375 	.word	0x29287375
   18a50:	00000000 	.word	0x00000000
   18a54:	5f636441 	.word	0x5f636441
   18a58:	696c6143 	.word	0x696c6143
   18a5c:	74617262 	.word	0x74617262
   18a60:	00292865 	.word	0x00292865
   18a64:	5f636441 	.word	0x5f636441
   18a68:	75746553 	.word	0x75746553
   18a6c:	73655270 	.word	0x73655270
   18a70:	42746c75 	.word	0x42746c75
   18a74:	65666675 	.word	0x65666675
   18a78:	00292872 	.word	0x00292872
   18a7c:	5f636441 	.word	0x5f636441
   18a80:	56746547 	.word	0x56746547
   18a84:	69737265 	.word	0x69737265
   18a88:	6e496e6f 	.word	0x6e496e6f
   18a8c:	29286f66 	.word	0x29286f66
   18a90:	00000000 	.word	0x00000000
   18a94:	61766e49 	.word	0x61766e49
   18a98:	2064696c 	.word	0x2064696c
   18a9c:	20636461 	.word	0x20636461
   18aa0:	756f7267 	.word	0x756f7267
   18aa4:	00000070 	.word	0x00000070
   18aa8:	66667542 	.word	0x66667542
   18aac:	70207265 	.word	0x70207265
   18ab0:	746e696f 	.word	0x746e696f
   18ab4:	6e207265 	.word	0x6e207265
   18ab8:	6920746f 	.word	0x6920746f
   18abc:	6974696e 	.word	0x6974696e
   18ac0:	7a696c61 	.word	0x7a696c61
   18ac4:	00006465 	.word	0x00006465
   18ac8:	696c6143 	.word	0x696c6143
   18acc:	74617262 	.word	0x74617262
   18ad0:	206e6f69 	.word	0x206e6f69
   18ad4:	7265706f 	.word	0x7265706f
   18ad8:	6f697461 	.word	0x6f697461
   18adc:	6974206e 	.word	0x6974206e
   18ae0:	2064656d 	.word	0x2064656d
   18ae4:	0074756f 	.word	0x0074756f
   18ae8:	65686353 	.word	0x65686353
   18aec:	656c7564 	.word	0x656c7564
   18af0:	6e495f72 	.word	0x6e495f72
   18af4:	29287469 	.word	0x29287469
   18af8:	00000000 	.word	0x00000000
   18afc:	65686353 	.word	0x65686353
   18b00:	656c7564 	.word	0x656c7564
   18b04:	65475f72 	.word	0x65475f72
   18b08:	61745374 	.word	0x61745374
   18b0c:	51737574 	.word	0x51737574
   18b10:	65756575 	.word	0x65756575
   18b14:	00002928 	.word	0x00002928
   18b18:	65686353 	.word	0x65686353
   18b1c:	656c7564 	.word	0x656c7564
   18b20:	6c465f72 	.word	0x6c465f72
   18b24:	51687375 	.word	0x51687375
   18b28:	65756575 	.word	0x65756575
   18b2c:	00002928 	.word	0x00002928
   18b30:	65686353 	.word	0x65686353
   18b34:	656c7564 	.word	0x656c7564
   18b38:	72575f72 	.word	0x72575f72
   18b3c:	51657469 	.word	0x51657469
   18b40:	65756575 	.word	0x65756575
   18b44:	00002928 	.word	0x00002928
   18b48:	65686353 	.word	0x65686353
   18b4c:	656c7564 	.word	0x656c7564
   18b50:	65525f72 	.word	0x65525f72
   18b54:	75516461 	.word	0x75516461
   18b58:	28657565 	.word	0x28657565
   18b5c:	00000029 	.word	0x00000029
   18b60:	65686353 	.word	0x65686353
   18b64:	656c7564 	.word	0x656c7564
   18b68:	74535f72 	.word	0x74535f72
   18b6c:	54747261 	.word	0x54747261
   18b70:	286b7361 	.word	0x286b7361
   18b74:	00000029 	.word	0x00000029
   18b78:	65686353 	.word	0x65686353
   18b7c:	656c7564 	.word	0x656c7564
   18b80:	74535f72 	.word	0x74535f72
   18b84:	6154706f 	.word	0x6154706f
   18b88:	29286b73 	.word	0x29286b73
   18b8c:	00000000 	.word	0x00000000
   18b90:	65686353 	.word	0x65686353
   18b94:	656c7564 	.word	0x656c7564
   18b98:	65505f72 	.word	0x65505f72
   18b9c:	646f6972 	.word	0x646f6972
   18ba0:	6b736154 	.word	0x6b736154
   18ba4:	00002928 	.word	0x00002928
   18ba8:	65686353 	.word	0x65686353
   18bac:	656c7564 	.word	0x656c7564
   18bb0:	74535f72 	.word	0x74535f72
   18bb4:	54747261 	.word	0x54747261
   18bb8:	72656d69 	.word	0x72656d69
   18bbc:	00002928 	.word	0x00002928
   18bc0:	65686353 	.word	0x65686353
   18bc4:	656c7564 	.word	0x656c7564
   18bc8:	74535f72 	.word	0x74535f72
   18bcc:	6954706f 	.word	0x6954706f
   18bd0:	2872656d 	.word	0x2872656d
   18bd4:	00000029 	.word	0x00000029
   18bd8:	65686353 	.word	0x65686353
   18bdc:	656c7564 	.word	0x656c7564
   18be0:	65475f72 	.word	0x65475f72
   18be4:	6d695474 	.word	0x6d695474
   18be8:	29287265 	.word	0x29287265
   18bec:	00000000 	.word	0x00000000
   18bf0:	65686353 	.word	0x65686353
   18bf4:	656c7564 	.word	0x656c7564
   18bf8:	65525f72 	.word	0x65525f72
   18bfc:	64616f6c 	.word	0x64616f6c
   18c00:	656d6954 	.word	0x656d6954
   18c04:	00292872 	.word	0x00292872
   18c08:	65686353 	.word	0x65686353
   18c0c:	656c7564 	.word	0x656c7564
   18c10:	614d5f72 	.word	0x614d5f72
   18c14:	75466e69 	.word	0x75466e69
   18c18:	6974636e 	.word	0x6974636e
   18c1c:	29286e6f 	.word	0x29286e6f
   18c20:	00000000 	.word	0x00000000
   18c24:	75657551 	.word	0x75657551
   18c28:	64692065 	.word	0x64692065
   18c2c:	74756f20 	.word	0x74756f20
   18c30:	20666f20 	.word	0x20666f20
   18c34:	676e6172 	.word	0x676e6172
   18c38:	00000065 	.word	0x00000065
   18c3c:	61766e49 	.word	0x61766e49
   18c40:	2064696c 	.word	0x2064696c
   18c44:	75657571 	.word	0x75657571
   18c48:	74732065 	.word	0x74732065
   18c4c:	73757461 	.word	0x73757461
   18c50:	616c6620 	.word	0x616c6620
   18c54:	00000067 	.word	0x00000067
   18c58:	6b736154 	.word	0x6b736154
   18c5c:	20646920 	.word	0x20646920
   18c60:	2074756f 	.word	0x2074756f
   18c64:	7220666f 	.word	0x7220666f
   18c68:	65676e61 	.word	0x65676e61
   18c6c:	00000000 	.word	0x00000000
   18c70:	61766e49 	.word	0x61766e49
   18c74:	2064696c 	.word	0x2064696c
   18c78:	6b736174 	.word	0x6b736174
   18c7c:	20726f20 	.word	0x20726f20
   18c80:	656d6974 	.word	0x656d6974
   18c84:	65702072 	.word	0x65702072
   18c88:	646f6972 	.word	0x646f6972
   18c8c:	74696369 	.word	0x74696369
   18c90:	00000079 	.word	0x00000079
   18c94:	656d6954 	.word	0x656d6954
   18c98:	64692072 	.word	0x64692072
   18c9c:	74756f20 	.word	0x74756f20
   18ca0:	20666f20 	.word	0x20666f20
   18ca4:	676e6172 	.word	0x676e6172
   18ca8:	00000065 	.word	0x00000065
   18cac:	65686353 	.word	0x65686353
   18cb0:	656c7564 	.word	0x656c7564
   18cb4:	6e752072 	.word	0x6e752072
   18cb8:	74696e69 	.word	0x74696e69
   18cbc:	696c6169 	.word	0x696c6169
   18cc0:	0064657a 	.word	0x0064657a
   18cc4:	6f497748 	.word	0x6f497748
   18cc8:	425f6241 	.word	0x425f6241
   18ccc:	6f747475 	.word	0x6f747475
   18cd0:	495f736e 	.word	0x495f736e
   18cd4:	2874696e 	.word	0x2874696e
   18cd8:	00000029 	.word	0x00000029
   18cdc:	6f497748 	.word	0x6f497748
   18ce0:	425f6241 	.word	0x425f6241
   18ce4:	6f747475 	.word	0x6f747475
   18ce8:	475f736e 	.word	0x475f736e
   18cec:	76457465 	.word	0x76457465
   18cf0:	28746e65 	.word	0x28746e65
   18cf4:	00000029 	.word	0x00000029
   18cf8:	6f497748 	.word	0x6f497748
   18cfc:	425f6241 	.word	0x425f6241
   18d00:	6f747475 	.word	0x6f747475
   18d04:	4d5f736e 	.word	0x4d5f736e
   18d08:	466e6961 	.word	0x466e6961
   18d0c:	74636e75 	.word	0x74636e75
   18d10:	286e6f69 	.word	0x286e6f69
   18d14:	00000029 	.word	0x00000029
   18d18:	61766e49 	.word	0x61766e49
   18d1c:	2064696c 	.word	0x2064696c
   18d20:	74747562 	.word	0x74747562
   18d24:	69206e6f 	.word	0x69206e6f
   18d28:	00000064 	.word	0x00000064
   18d2c:	61766e49 	.word	0x61766e49
   18d30:	2064696c 	.word	0x2064696c
   18d34:	74747562 	.word	0x74747562
   18d38:	73206e6f 	.word	0x73206e6f
   18d3c:	65746174 	.word	0x65746174
   18d40:	00000000 	.word	0x00000000
   18d44:	75646f4d 	.word	0x75646f4d
   18d48:	7520656c 	.word	0x7520656c
   18d4c:	696e696e 	.word	0x696e696e
   18d50:	6c616974 	.word	0x6c616974
   18d54:	64657a69 	.word	0x64657a69
   18d58:	00000000 	.word	0x00000000
   18d5c:	6f497748 	.word	0x6f497748
   18d60:	4c5f6241 	.word	0x4c5f6241
   18d64:	5f736465 	.word	0x5f736465
   18d68:	74696e49 	.word	0x74696e49
   18d6c:	00002928 	.word	0x00002928
   18d70:	6f497748 	.word	0x6f497748
   18d74:	4c5f6241 	.word	0x4c5f6241
   18d78:	5f736465 	.word	0x5f736465
   18d7c:	6e727554 	.word	0x6e727554
   18d80:	29286e4f 	.word	0x29286e4f
   18d84:	00000000 	.word	0x00000000
   18d88:	6f497748 	.word	0x6f497748
   18d8c:	4c5f6241 	.word	0x4c5f6241
   18d90:	5f736465 	.word	0x5f736465
   18d94:	6e727554 	.word	0x6e727554
   18d98:	2866664f 	.word	0x2866664f
   18d9c:	00000029 	.word	0x00000029
   18da0:	6f497748 	.word	0x6f497748
   18da4:	4c5f6241 	.word	0x4c5f6241
   18da8:	5f736465 	.word	0x5f736465
   18dac:	6e727554 	.word	0x6e727554
   18db0:	67676f54 	.word	0x67676f54
   18db4:	2928656c 	.word	0x2928656c
   18db8:	00000000 	.word	0x00000000
   18dbc:	61766e49 	.word	0x61766e49
   18dc0:	2064696c 	.word	0x2064696c
   18dc4:	2064656c 	.word	0x2064656c
   18dc8:	00006469 	.word	0x00006469
   18dcc:	6f497748 	.word	0x6f497748
   18dd0:	505f6241 	.word	0x505f6241
   18dd4:	5f73746f 	.word	0x5f73746f
   18dd8:	74696e49 	.word	0x74696e49
   18ddc:	00002928 	.word	0x00002928
   18de0:	6f497748 	.word	0x6f497748
   18de4:	505f6241 	.word	0x505f6241
   18de8:	5f73746f 	.word	0x5f73746f
   18dec:	56746547 	.word	0x56746547
   18df0:	65756c61 	.word	0x65756c61
   18df4:	00002928 	.word	0x00002928
   18df8:	6f497748 	.word	0x6f497748
   18dfc:	505f6241 	.word	0x505f6241
   18e00:	5f73746f 	.word	0x5f73746f
   18e04:	41746547 	.word	0x41746547
   18e08:	6156746c 	.word	0x6156746c
   18e0c:	2865756c 	.word	0x2865756c
   18e10:	00000029 	.word	0x00000029
   18e14:	61766e49 	.word	0x61766e49
   18e18:	2064696c 	.word	0x2064696c
   18e1c:	75706e69 	.word	0x75706e69
   18e20:	6f702074 	.word	0x6f702074
   18e24:	65746e69 	.word	0x65746e69
   18e28:	00000072 	.word	0x00000072
   18e2c:	6f497748 	.word	0x6f497748
   18e30:	425f6241 	.word	0x425f6241
   18e34:	657a7a75 	.word	0x657a7a75
   18e38:	6e495f72 	.word	0x6e495f72
   18e3c:	29287469 	.word	0x29287469
   18e40:	00000000 	.word	0x00000000
   18e44:	6f497748 	.word	0x6f497748
   18e48:	425f6241 	.word	0x425f6241
   18e4c:	657a7a75 	.word	0x657a7a75
   18e50:	65425f72 	.word	0x65425f72
   18e54:	29287065 	.word	0x29287065
   18e58:	00000000 	.word	0x00000000
   18e5c:	6f497748 	.word	0x6f497748
   18e60:	425f6241 	.word	0x425f6241
   18e64:	657a7a75 	.word	0x657a7a75
   18e68:	74535f72 	.word	0x74535f72
   18e6c:	2928706f 	.word	0x2928706f
   18e70:	00000000 	.word	0x00000000
   18e74:	61766e49 	.word	0x61766e49
   18e78:	2064696c 	.word	0x2064696c
   18e7c:	7a7a7562 	.word	0x7a7a7562
   18e80:	74207265 	.word	0x74207265
   18e84:	00656e6f 	.word	0x00656e6f
   18e88:	2075634d 	.word	0x2075634d
   18e8c:	75646f6d 	.word	0x75646f6d
   18e90:	0000656c 	.word	0x0000656c
   18e94:	74616c50 	.word	0x74616c50
   18e98:	6d726f66 	.word	0x6d726f66
   18e9c:	646f6d20 	.word	0x646f6d20
   18ea0:	00656c75 	.word	0x00656c75
   18ea4:	74726f50 	.word	0x74726f50
   18ea8:	646f6d20 	.word	0x646f6d20
   18eac:	00656c75 	.word	0x00656c75
   18eb0:	206f6944 	.word	0x206f6944
   18eb4:	75646f6d 	.word	0x75646f6d
   18eb8:	0000656c 	.word	0x0000656c
   18ebc:	206d7750 	.word	0x206d7750
   18ec0:	75646f6d 	.word	0x75646f6d
   18ec4:	0000656c 	.word	0x0000656c
   18ec8:	20636441 	.word	0x20636441
   18ecc:	75646f6d 	.word	0x75646f6d
   18ed0:	0000656c 	.word	0x0000656c
   18ed4:	65686353 	.word	0x65686353
   18ed8:	656c7564 	.word	0x656c7564
   18edc:	6f6d2072 	.word	0x6f6d2072
   18ee0:	656c7564 	.word	0x656c7564
   18ee4:	00000000 	.word	0x00000000
   18ee8:	74747542 	.word	0x74747542
   18eec:	20736e6f 	.word	0x20736e6f
   18ef0:	61204f49 	.word	0x61204f49
   18ef4:	72747362 	.word	0x72747362
   18ef8:	69746361 	.word	0x69746361
   18efc:	6d206e6f 	.word	0x6d206e6f
   18f00:	6c75646f 	.word	0x6c75646f
   18f04:	00000065 	.word	0x00000065
   18f08:	7364654c 	.word	0x7364654c
   18f0c:	204f4920 	.word	0x204f4920
   18f10:	74736261 	.word	0x74736261
   18f14:	74636172 	.word	0x74636172
   18f18:	206e6f69 	.word	0x206e6f69
   18f1c:	75646f6d 	.word	0x75646f6d
   18f20:	0000656c 	.word	0x0000656c
   18f24:	73746f50 	.word	0x73746f50
   18f28:	204f4920 	.word	0x204f4920
   18f2c:	74736261 	.word	0x74736261
   18f30:	74636172 	.word	0x74636172
   18f34:	206e6f69 	.word	0x206e6f69
   18f38:	75646f6d 	.word	0x75646f6d
   18f3c:	0000656c 	.word	0x0000656c
   18f40:	7a7a7542 	.word	0x7a7a7542
   18f44:	49207265 	.word	0x49207265
   18f48:	6261204f 	.word	0x6261204f
   18f4c:	61727473 	.word	0x61727473
   18f50:	6f697463 	.word	0x6f697463
   18f54:	6f6d206e 	.word	0x6f6d206e
   18f58:	656c7564 	.word	0x656c7564
   18f5c:	00000000 	.word	0x00000000
   18f60:	6f727245 	.word	0x6f727245
   18f64:	45203a72 	.word	0x45203a72
   18f68:	726f7272 	.word	0x726f7272
   18f6c:	206e6920 	.word	0x206e6920
   18f70:	69207325 	.word	0x69207325
   18f74:	7566206e 	.word	0x7566206e
   18f78:	6974636e 	.word	0x6974636e
   18f7c:	25206e6f 	.word	0x25206e6f
   18f80:	69772073 	.word	0x69772073
   18f84:	74206874 	.word	0x74206874
   18f88:	69206568 	.word	0x69206568
   18f8c:	6174736e 	.word	0x6174736e
   18f90:	2065636e 	.word	0x2065636e
   18f94:	202c6425 	.word	0x202c6425
   18f98:	000a7325 	.word	0x000a7325
   18f9c:	20746f50 	.word	0x20746f50
   18fa0:	65722031 	.word	0x65722031
   18fa4:	74736973 	.word	0x74736973
   18fa8:	65636e61 	.word	0x65636e61
   18fac:	6c617620 	.word	0x6c617620
   18fb0:	69206575 	.word	0x69206575
   18fb4:	686f206e 	.word	0x686f206e
   18fb8:	203a736d 	.word	0x203a736d
   18fbc:	000a6425 	.word	0x000a6425
   18fc0:	20746f50 	.word	0x20746f50
   18fc4:	65722032 	.word	0x65722032
   18fc8:	74736973 	.word	0x74736973
   18fcc:	65636e61 	.word	0x65636e61
   18fd0:	6c617620 	.word	0x6c617620
   18fd4:	69206575 	.word	0x69206575
   18fd8:	686f206e 	.word	0x686f206e
   18fdc:	203a736d 	.word	0x203a736d
   18fe0:	000a6425 	.word	0x000a6425
   18fe4:	20746f50 	.word	0x20746f50
   18fe8:	65722031 	.word	0x65722031
   18fec:	74736973 	.word	0x74736973
   18ff0:	65636e61 	.word	0x65636e61
   18ff4:	6c617620 	.word	0x6c617620
   18ff8:	69206575 	.word	0x69206575
   18ffc:	686f206e 	.word	0x686f206e
   19000:	203a736d 	.word	0x203a736d
   19004:	202c6425 	.word	0x202c6425
   19008:	20746f50 	.word	0x20746f50
   1900c:	65722032 	.word	0x65722032
   19010:	74736973 	.word	0x74736973
   19014:	65636e61 	.word	0x65636e61
   19018:	6c617620 	.word	0x6c617620
   1901c:	69206575 	.word	0x69206575
   19020:	686f206e 	.word	0x686f206e
   19024:	203a736d 	.word	0x203a736d
   19028:	000a6425 	.word	0x000a6425
   1902c:	6d726554 	.word	0x6d726554
   19030:	6c616e69 	.word	0x6c616e69
   19034:	00000000 	.word	0x00000000
   19038:	4c554e28 	.word	0x4c554e28
   1903c:	0000294c 	.word	0x0000294c

00019040 <Clock_Ip_au8DividerCallbackIndex>:
   19040:	0e0d0c00 06030201 0a070409 000b0805     ................

00019050 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

00019060 <Clock_Ip_au8XoscCallbackIndex>:
   19060:	00000100 00000000 00000000 00000000     ................

00019070 <Clock_Ip_au8IrcoscCallbackIndex>:
   19070:	03020100 00000004 00000000 00000000     ................

00019080 <Clock_Ip_au8GateCallbackIndex>:
   19080:	06010200 01040301 00000500 00000000     ................

00019090 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

000190a0 <Clock_Ip_au8PllCallbackIndex>:
   190a0:	00000100 00000000 00000000 00000000     ................

000190b0 <Clock_Ip_au8SelectorCallbackIndex>:
   190b0:	0a090800 03020109 07060504 00000000     ................

000190c0 <Clock_Ip_au8PcfsCallbackIndex>:
	...

000190d0 <Clock_Ip_au8CmuCallbackIndex>:
	...

000190e0 <Clock_Ip_au8ClockFeatures>:
	...
   190f0:	01000000 00000000 00000000 00000002     ................
   19100:	00000000 00000300 00000000 00040000     ................
   19110:	00000000 05000000 00000000 00000000     ................
   19120:	00000006 00000000 00000100 00000000     ................
   19130:	00010000 00000000 04000000 00000000     ................
   19140:	00000000 00000005 00000001 00000401     ................
   19150:	00000200 00050100 00030000 04020000     ................
   19160:	04000000 02000000 00000005 00000005     ................
   19170:	00000403 00000600 00050300 00070000     ................
   19180:	05000000 00000000 00000000 00000006     ................
	...
   191c0:	00050000 00000000 06000000 00000100     ................
   191d0:	00000000 00030007 00000000 00000000     ................
   191e0:	00000000 00060000 00000000 07000000     ................
   191f0:	00000100 00000000 00030008 00000000     ................
	...
   19208:	00090000 00000000 0a000000 00000100     ................
   19218:	00000000 0003000b 00000000 00000000     ................
   19228:	00000000 000c0000 00000000 0d000000     ................
   19238:	00000100 00000000 0003000e 00000000     ................
   19248:	00000800 00000000 00090000 00000000     ................
   19258:	0a000000 00000000 00000000 0000000b     ................
   19268:	00000000 00000b01 00000000 000b0200     ................
   19278:	00000000 0b030000 00000000 00000000     ................
	...
   19290:	00000400 003b003b 00040000 27002700     ....;.;......'.'
   192a0:	01000000 00000000 00000000 00000007     ................
   192b0:	00007300 00000700 00320000 00090000     .s........2.....
   192c0:	02000000 07000000 00000000 00000021     ............!...
   192d0:	00000009 00000400 00000900 00030000     ................
   192e0:	00070000 61000000 07000000 00000000     .......a........
   192f0:	00000024 00000007 00002500 00000700     $........%......
   19300:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
   19310:	00000000 00000020 38000004 00003800     .... ......8.8..
   19320:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
   19330:	04000000 00260000 00000026 66000004     ......&.&......f
   19340:	00006600 00000400 00370037 00040000     .f......7.7.....
   19350:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
   19360:	2e000004 00002e00 00000200 00404040     ............@@@.
   19370:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
   19380:	0000006b 6c000004 00006c00 00000900     k......l.l......
   19390:	00010000 00090000 00000000 07000000     ................
   193a0:	00000000 00000036 00000007 00003100     ....6........1..
   193b0:	00000700 00490000 00070000 4a000000     ......I........J
   193c0:	07000000 00000000 0000004b 00000007     ........K.......
   193d0:	00004c00 00000700 004d0000 00070000     .L........M.....
   193e0:	3d000000 03000000 00000000 00000000     ...=............

000193f0 <Clock_Ip_au16SelectorEntryHardwareValue>:
   193f0:	01010a03 01010001 04040002 02000603     ................
   19400:	00010810 02020100 00000000 00000007     ................
   19410:	00000009 00000000 00000c0e 00000000     ................
	...

00019448 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
   19448:	00020000 00000300 00000601 00000000     ................
	...

00019478 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
   19478:	00000700 00000000 02020000 01010303     ................
   19488:	03020606 00000000 00000000 00000000     ................
	...

000194a8 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
   194a8:	00000001 00000000 02020000 01010303     ................
   194b8:	03020606 00000000 00000000 00000000     ................
	...

000194d8 <Clock_Ip_au8DividerValueHardwareValue>:
   194d8:	00020100 00000003 00000004 00000000     ................
   194e8:	00000005 00000000 00000000 00000000     ................
   194f8:	00000006 00000000 00000000 00000000     ................
	...
   19518:	00000007                                ....

0001951c <Clock_Ip_apxScgPeriphAsyncDivs>:
   1951c:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

0001952c <Clock_Ip_aeSourceTypeClockName>:
   1952c:	00000000 00000001 00000001 00000001     ................
   1953c:	00000001 00000001 00000001 00000001     ................
   1954c:	00000002 00000003 00000001 00000001     ................
   1955c:	00000001 00000001 00000002 00000002     ................
   1956c:	00000003 00000003 00000001 00000001     ................
   1957c:	00000004 00000004 00000004 00000004     ................
	...

000195e8 <Clock_Ip_aeHwPllName>:
   195e8:	00000009                                ....

000195ec <Clock_Ip_aeHwDfsName>:
   195ec:	00000057                                W...

000195f0 <Clock_Ip_axDividerCallbacks>:
   195f0:	00003ce1 00003ceb 00003d05 00003d1f     .<...<...=...=..
   19600:	00003d39 00003d53 00003d6d 00003d87     9=..S=..m=...=..
   19610:	00003da1 00003dbb 00003dd5 00003def     .=...=...=...=..
   19620:	00003e09 00003e23 00003e3d              .>..#>..=>..

0001962c <Clock_Ip_axDividerTriggerCallbacks>:
   1962c:	000041b1 000041b1                       .A...A..

00019634 <Clock_Ip_axExtOscCallbacks>:
   19634:	000041bd 000041bd 000041bd 000041c7     .A...A...A...A..
   19644:	000041bd 000041d1 000041eb 00004205     .A...A...A...B..
   19654:	00004289 0000429d                       .B...B..

0001965c <Clock_Ip_axFracDivCallbacks>:
   1965c:	0000445d 0000445d 00004467              ]D..]D..gD..

00019668 <Clock_Ip_axGateCallbacks>:
   19668:	00004481 0000448b 0000458b 000045a5     .D...D...E...E..
   19678:	0000453b 00004555 000044eb 00004505     ;E..UE...D...E..
   19688:	0000449b 000044b5 000045db 000045f5     .D...D...E...E..
   19698:	0000462b 00004645                       +F..EF..

000196a0 <Clock_Ip_axIntOscCallbacks>:
   196a0:	000047f1 000047f1 000047fb 00004805     .G...G...G...H..
   196b0:	0000481f 00004839 0000484d 00004867     .H..9H..MH..gH..
   196c0:	00004881 00004895 000048af 000048c9     .H...H...H...H..
   196d0:	00004971 0000498b 000049a5              qI...I...I..

000196dc <Clock_Ip_axCmuCallbacks>:
   196dc:	00004f41 00004f4b 00004f57 00004f41     AO..KO..WO..AO..

000196ec <Clock_Ip_axPllCallbacks>:
   196ec:	00004f61 00004f61 00004f6b 00004f61     aO..aO..kO..aO..
   196fc:	00004f77 00004f81 00004f9b 00004fb5     wO...O...O...O..
   1970c:	00005059 00005045                       YP..EP..

00019714 <Clock_Ip_axPcfsCallbacks>:
   19714:	000051b5                                .Q..

00019718 <Clock_Ip_axSelectorCallbacks>:
   19718:	000051c1 000051c1 000051cb 000051e5     .Q...Q...Q...Q..
   19728:	000051c1 000051ff 00005219 00005233     .Q...Q...R..3R..
   19738:	0000524d 00005267 00005281 0000529b     MR..gR...R...R..
   19748:	000052b5 000052cf 000052e9 00005303     .R...R...R...S..
   19758:	0000531d 00005337 00005351 0000536b     .S..7S..QS..kS..
   19768:	00005385 0000539f                       .S...S..

00019770 <ClockSource>:
   19770:	00000000 00000008 00000002 00000005     ................
	...
   19788:	00000009                                ....

0001978c <ResetReasonArray>:
   1978c:	00000000 00000001 00000002 00000003     ................
   1979c:	00000004 00000005 00000006 00000007     ................
   197ac:	00000008 00000009 0000000a 0000000b     ................
   197bc:	0000000c 0000000d 0000000e              ............

000197c8 <Port_au32PortCiPortBaseAddr>:
   197c8:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
   197d8:	4004d000                                ...@

000197dc <Port_au32PortCiGpioBaseAddr>:
   197dc:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
   197ec:	400ff100                                ...@

000197f0 <Adc_Ip_apxBase>:
   197f0:	4003b000 40027000                       ...@.p.@

000197f8 <Pdb_Adc_Ip_apxBase>:
   197f8:	40036000 40031000                       .`.@...@

00019800 <Ftm_Pwm_Ip_aFtmBase>:
   19800:	40038000 40039000 4003a000 40026000     ...@...@...@.`.@

00019810 <McuApis>:
   19810:	00000000 000185c8 00000002 000185d4     ................
   19820:	00000008 000185e4 00000009 000185f4     ................

00019830 <McuErrors>:
   19830:	00000011 0001860c 0000000f 00018624     ............$...
   19840:	00000013 0001863c 0000000b 00018658     ....<.......X...
   19850:	0000000c 00018658 00000010 00018658     ....X.......X...

00019860 <PlatformApis>:
   19860:	00000020 00018670 00000021 00018680      ...p...!.......
   19870:	00000022 00018694 00000023 000186b0     ".......#.......
   19880:	00000024 000186cc                       $.......

00019888 <PlatformErrors>:
   19888:	00000001 000186ec 00000004 000186fc     ................
   19898:	00000002 00018720                       .... ...

000198a0 <PortApis>:
   198a0:	00000000 00018738 00000001 00018744     ....8.......D...
   198b0:	00000004 0001875c 00000002 00018770     ....\.......p...
   198c0:	00000003 0001878c                       ........

000198c8 <PortErrors>:
   198c8:	0000000a 000187a4 0000000e 000187b8     ................
   198d8:	0000000c 0001860c 000000f0 0001860c     ................
   198e8:	0000000d 000187d8 0000000f 00018624     ............$...
   198f8:	00000010 00018658                       ....X...

00019900 <DioApis>:
   19900:	00000001 000187f0 00000000 00018804     ................
   19910:	00000011 00018818 00000005 0001882c     ............,...
   19920:	00000004 00018844 00000003 0001885c     ....D.......\...
   19930:	00000002 0001886c 00000012 0001887c     ....l.......|...

00019940 <DioErrors>:
   19940:	00000021 00018894 00000020 00018658     !....... ...X...
   19950:	0000000a 000188b0 00000014 000188c8     ................
   19960:	0000001f 000188d8 000000f0 000188f4     ................

00019970 <PwmApis>:
   19970:	00000000 00018910 00000001 0001891c     ................
   19980:	00000002 0001892c 00000003 00018940     ....,.......@...
   19990:	00000004 00018958 00000008 00018970     ....X.......p...

000199a0 <PwmErrors>:
   199a0:	00000010 00018988 00000011 00018624     ............$...
   199b0:	00000014 0001863c 00000012 000189a0     ....<...........
   199c0:	00000013 000189b4 00000015 00018658     ............X...

000199d0 <AdcApis>:
   199d0:	00000000 000189d8 00000001 000189e4     ................
   199e0:	00000002 000189f4 00000003 00018a10     ................
   199f0:	00000004 00018a2c 00000009 00018a3c     ....,.......<...
   19a00:	00000029 00018a54 0000000c 00018a64     )...T.......d...
   19a10:	0000000a 00018a7c                       ....|...

00019a18 <AdcErrors>:
   19a18:	0000000a 00018624 0000000d 0001863c     ....$.......<...
   19a28:	00000014 000186ec 00000015 00018a94     ................
   19a38:	00000019 00018aa8 0000002b 00018ac8     ........+.......

00019a48 <SchedulerApis>:
   19a48:	00000000 00018ae8 00000002 00018afc     ................
   19a58:	00000003 00018b18 00000004 00018b30     ............0...
   19a68:	00000005 00018b48 00000006 00018b60     ....H.......`...
   19a78:	00000007 00018b78 00000008 00018b90     ....x...........
   19a88:	00000009 00018ba8 0000000a 00018bc0     ................
   19a98:	0000000b 00018bd8 0000000c 00018bf0     ................
   19aa8:	0000000d 00018c08                       ........

00019ab0 <SchedulerErrors>:
   19ab0:	00000000 00018988 00000001 00018c24     ............$...
   19ac0:	00000002 00018c3c 00000003 00018c58     ....<.......X...
   19ad0:	00000004 00018c70 00000005 00018c94     ....p...........
   19ae0:	00000006 00018cac                       ........

00019ae8 <HwIoAb_ButtonsApis>:
   19ae8:	00000000 00018cc4 00000001 00018cdc     ................
   19af8:	00000002 00018cf8                       ........

00019b00 <HwIoAb_ButtonsErrors>:
   19b00:	00000000 00018988 00000001 00018d18     ................
   19b10:	00000002 00018d2c 00000003 00018d44     ....,.......D...

00019b20 <HwIoAb_LedsApis>:
   19b20:	00000000 00018d5c 00000001 00018d70     ....\.......p...
   19b30:	00000002 00018d88 00000003 00018da0     ................

00019b40 <HwIoAb_LedsErrors>:
   19b40:	00000000 00018988 00000001 00018dbc     ................
   19b50:	00000002 00018d44                       ....D...

00019b58 <HwIoAb_PotsApis>:
   19b58:	00000000 00018dcc 00000001 00018de0     ................
   19b68:	00000002 00018df8                       ........

00019b70 <HwIoAb_PotsErrors>:
   19b70:	00000000 00018e14 00000001 00018d44     ............D...

00019b80 <HwIoAb_BuzzerApis>:
   19b80:	00000000 00018e2c 00000001 00018e44     ....,.......D...
   19b90:	00000002 00018e5c                       ....\...

00019b98 <HwIoAb_BuzzerErrors>:
   19b98:	00000000 00018e74                       ....t...

00019ba0 <ModuleStrings>:
   19ba0:	00000065 00018e88 00000004 00019810     e...............
   19bb0:	00000006 00019830 000000ff 00018e94     ....0...........
   19bc0:	00000005 00019860 00000003 00019888     ....`...........
   19bd0:	0000007c 00018ea4 00000005 000198a0     |...............
   19be0:	00000007 000198c8 00000078 00018eb0     ........x.......
   19bf0:	00000008 00019900 00000006 00019940     ............@...
   19c00:	00000079 00018ebc 00000006 00019970     y...........p...
   19c10:	00000006 000199a0 0000007b 00018ec8     ........{.......
   19c20:	00000009 000199d0 00000006 00019a18     ................
   19c30:	0000012c 00018ed4 0000000d 00019a48     ,...........H...
   19c40:	00000007 00019ab0 0000012d 00018ee8     ........-.......
   19c50:	00000003 00019ae8 00000004 00019b00     ................
   19c60:	0000012e 00018f08 00000004 00019b20     ............ ...
   19c70:	00000003 00019b40 0000012f 00018f24     ....@.../...$...
   19c80:	00000003 00019b58 00000002 00019b70     ....X.......p...
   19c90:	00000130 00018f40 00000003 00019b80     0...@...........
   19ca0:	00000001 00019b98                       ........

00019ca8 <Queue_Config>:
   19ca8:	00000002 00000001 1fff8b70              ........p...

00019cb4 <Task_Config>:
   19cb4:	00000032 00000001 00000e41 00000064     2.......A...d...
   19cc4:	00000001 00000e4d                       ....M...

00019ccc <Timer_Config>:
   19ccc:	00000064 00000000 00001055              d.......U...

00019cd8 <Scheduler_Config>:
   19cd8:	0000000a 00000002 00019cb4 00000001     ................
   19ce8:	00019ccc 00000001 00019ca8              ............

00019cf4 <ButtonsCfg>:
   19cf4:	0000008c 0000012c 00000071 0000012c     ....,...q...,...
   19d04:	0000000c 0000012c                       ....,...

00019d0c <LedsCfg>:
   19d0c:	00010048 00010049 0001004a              H...I...J...

00019d18 <AdcIpChansConfig_0>:
   19d18:	00000000 00000005 00000000 00000001     ................
   19d28:	00000008 00000000                       ........

00019d30 <AdcIpChansConfig_1>:
   19d30:	00000000 0000000f 00000000 00000001     ................
   19d40:	00000008 00000000                       ........

00019d48 <AdcIpConfig_0>:
   19d48:	00000000 00000003 00000000 0000000c     ................
   19d58:	00000000 00000001 00000001 00000000     ................
	...
   19d70:	00ff0000 00000000 00000000 00019d18     ................
   19d80:	0000cc49                                I...

00019d84 <AdcIpConfig_1>:
   19d84:	00000000 00000003 00000000 0000000c     ................
   19d94:	00000000 00000001 00000001 00000000     ................
	...
   19dac:	00ff0000 00000000 00000000 00019d30     ............0...
   19dbc:	0000cc6b                                k...

00019dc0 <AdcIpwCfg>:
   19dc0:	00019d48 00019d84 0001a620 0001a640     H....... ...@...
   19dd0:	01010100 00010001 00020002 0101ffff     ................
   19de0:	00000100                                ....

00019de4 <AdcIpwGroupConfig_0>:
   19de4:	00000001 00000000 000000c8 00010000     ................
   19df4:	00000000                                ....

00019df8 <AdcIpwGroupConfig_1>:
   19df8:	00000001 00000000 000000c8 00010000     ................
   19e08:	00000000                                ....

00019e0c <Adc_Group0_Assignment_0>:
   19e0c:	00010000                                ....

00019e10 <Adc_Group1_Assignment_1>:
   19e10:	00010000                                ....

00019e14 <Adc_GroupsCfg>:
	...
   19e30:	00000001 00019e0c 00080002 00000005     ................
   19e40:	00000000 00019de4 00010001 00000000     ................
	...
   19e64:	00000001 00019e10 000f0002 00000008     ................
   19e74:	00000000 00019df8                       ........

00019e7c <Adc_au16GroupIdToIndexMap>:
   19e7c:	00010000                                ....

00019e80 <Adc_Partition_Assignment>:
   19e80:	00000000                                ....

00019e84 <Adc_Config>:
   19e84:	00019dc0 00019e14 00000002 00019e7c     ............|...
   19e94:	00000000 00019e80 00000001              ............

00019ea0 <Mcu_aClockConfigPB>:
	...
   19ea8:	14000002 0400000e 01000020 00000002     ........ .......
   19eb8:	01000001 00000001 00000005 00000001     ................
   19ec8:	00000000 00000057 00000000 00000000     ....W...........
	...
   19ee0:	00000057 00000000 00000057 00000000     W.......W.......
	...
   19f08:	00000019 00000005 0000001a 00000002     ................
   19f18:	0000001b 00000005 0000002a 00000002     ........*.......
   19f28:	0000003f 0000000a 00000040 0000000a     ?.......@.......
   19f38:	00000041 00000000 00000042 00000000     A.......B.......
   19f48:	00000031 0000000b 00000045 00000000     1.......E.......
   19f58:	00000046 00000000 00000047 00000000     F.......G.......
   19f68:	00000044 00000000 00000030 0000000b     D.......0.......
   19f78:	0000003d 00000000 00000043 00000000     =.......C.......
   19f88:	00000049 00000000 0000004a 00000000     I.......J.......
   19f98:	0000004b 00000000 00000048 00000000     K.......H.......
   19fa8:	00000057 00000057 00000057 00000057     W...W...W...W...
   19fb8:	00000057 00000057 00000057 00000057     W...W...W...W...
   19fc8:	00000057 00000057 00000057 00000057     W...W...W...W...
   19fd8:	00000057 00000057 00000057 00000057     W...W...W...W...
   19fe8:	0000000a 00000001 00000000 0000000b     ................
   19ff8:	00000001 00000000 0000000c 00000001     ................
   1a008:	00000000 0000000d 00000002 00000000     ................
   1a018:	0000001d 00000001 00000000 0000001e     ................
   1a028:	00000002 00000000 0000001f 00000001     ................
   1a038:	00000000 00000021 00000001 00000000     ....!...........
   1a048:	00000022 00000002 00000000 00000023     "...........#...
   1a058:	00000001 00000000 00000025 00000002     ........%.......
   1a068:	00000000 00000026 00000004 00000000     ....&...........
   1a078:	00000027 00000002 00000000 00000048     '...........H...
   1a088:	00000001 00000001 00000057 00000000     ........W.......
   1a098:	00000000 00000057 00000000 00000000     ....W...........
   1a0a8:	00000057 00000000 00000000 00000057     W...........W...
	...
   1a0c0:	00000057 00000000 00000000 00000057     W...........W...
	...
   1a0d8:	00000057 00000000 00000057 00000057     W.......W...W...
	...
   1a0f4:	00000014 00007d00 00000015 00007d00     .....}.......}..
   1a104:	00000016 00007d00 00000017 00008000     .....}..........
   1a114:	00000030 00000001 00000031 00000001     0.......1.......
   1a124:	00000033 00000000 00000034 00000000     3.......4.......
   1a134:	00000036 00000000 00000039 00000000     6.......9.......
   1a144:	0000003a 00000000 0000003b 00000000     :.......;.......
   1a154:	0000003c 00000000 0000003d 00000000     <.......=.......
   1a164:	0000003e 00000000 0000003f 00000000     >.......?.......
   1a174:	00000040 00000001 00000041 00000000     @.......A.......
   1a184:	00000042 00000000 00000043 00000000     B.......C.......
   1a194:	00000044 00000000 00000045 00000000     D.......E.......
   1a1a4:	00000046 00000000 00000047 00000000     F.......G.......
   1a1b4:	00000048 00000000 00000049 00000000     H.......I.......
   1a1c4:	0000004a 00000000 0000004b 00000000     J.......K.......
   1a1d4:	0000004e 00000001 0000004f 00000001     N.......O.......
   1a1e4:	00000050 00000001 00000051 00000001     P.......Q.......
   1a1f4:	00000052 00000001 00000053 00000001     R.......S.......
   1a204:	00000054 00000001 00000055 00000000     T.......U.......
   1a214:	00000057 00000000 00000057 00000000     W.......W.......
   1a224:	00000057 00000000 00000057 00000000     W.......W.......
   1a234:	00000057 00000000 00000057 00000000     W.......W.......
   1a244:	00000057 00000000 00000057 00000000     W.......W.......
   1a254:	00000057 00000000 00000057 00000000     W.......W.......
   1a264:	00000000 00000057 00000000 00000057     ....W.......W...
	...

0001a298 <Dio_au32ChannelToPartitionMap>:
   1a298:	00000001 00000001 00000001 00000001     ................
   1a2a8:	00000001 00000001 00000001 00000001     ................
   1a2b8:	00000001 00000001 00000001 00000001     ................
   1a2c8:	00000001 00000001 00000001 00000001     ................
   1a2d8:	00000001 00000001 00000001 00000001     ................
   1a2e8:	00000001 00000001 00000001 00000001     ................
   1a2f8:	00000001 00000001 00000001 00000001     ................
   1a308:	00000001 00000001 00000001 00000001     ................
   1a318:	00000001 00000001 00000001 00000001     ................
   1a328:	00000001 00000001 00000001 00000001     ................
   1a338:	00000001 00000001 00000001 00000001     ................
   1a348:	00000001 00000001 00000001 00000001     ................
   1a358:	00000001 00000001 00000001 00000001     ................
   1a368:	00000001 00000001 00000001 00000001     ................
   1a378:	00000001 00000001 00000001 00000001     ................
   1a388:	00000001 00000001 00000001 00000001     ................
   1a398:	00000001 00000001 00000001 00000001     ................
   1a3a8:	00000001 00000001 00000001 00000001     ................
   1a3b8:	00000001 00000001 00000001 00000001     ................
   1a3c8:	00000001 00000001 00000001 00000001     ................
   1a3d8:	00000001 00000001 00000001 00000001     ................
   1a3e8:	00000001 00000001 00000001 00000001     ................
   1a3f8:	00000001 00000001 00000001 00000001     ................
   1a408:	00000001 00000001 00000001 00000001     ................
   1a418:	00000001 00000001 00000001 00000001     ................
   1a428:	00000001 00000001 00000001 00000001     ................
   1a438:	00000001 00000001 00000001 00000001     ................
   1a448:	00000001 00000001 00000001 00000001     ................
   1a458:	00000001 00000001 00000001 00000001     ................
   1a468:	00000001 00000001 00000001 00000001     ................
   1a478:	00000001 00000001 00000001 00000001     ................
   1a488:	00000001 00000001 00000001 00000001     ................
   1a498:	00000001 00000001 00000001 00000001     ................
   1a4a8:	00000001 00000001 00000001 00000001     ................
   1a4b8:	00000001 00000001 00000001 00000001     ................
   1a4c8:	00000001 00000001 00000001 00000001     ................
   1a4d8:	00000001                                ....

0001a4dc <Dio_au32PortToPartitionMap>:
   1a4dc:	00000001 00000001 00000001 00000001     ................
   1a4ec:	00000001                                ....

0001a4f0 <Dio_aAvailablePinsForWrite>:
   1a4f0:	0003ffff 0003ffff 0003ffff 0003ffff     ................
   1a500:	0001ffff                                ....

0001a504 <Dio_aAvailablePinsForRead>:
   1a504:	0003ffff 0003ffff 0003ffff 0003ffff     ................
   1a514:	0001ffff                                ....

0001a518 <Dio_Config>:
	...
   1a520:	0001a298 0001a4dc                       ........

0001a528 <Ftm_Pwm_Ip_SyncCfg1>:
	...
   1a544:	00000003 00000003                       ........

0001a54c <Ftm_Pwm_Ip_InstCfg1>:
   1a54c:	00000003 00000000 00000000 00000000     ................
	...
   1a580:	000014d5 00000001 00000000 00000000     ................
   1a590:	00000000 0001a528                       ....(...

0001a598 <Ftm_Pwm_Ip_I1_Ch7>:
   1a598:	00000007 0000000a 00000000 00000000     ................
   1a5a8:	00000000 00000001 00000000 00000000     ................
	...

0001a5c0 <Ftm_Pwm_Ip_I1_ChArray>:
   1a5c0:	0001a598                                ....

0001a5c4 <Ftm_Pwm_Ip_UserCfg1>:
   1a5c4:	0001a54c 0001a5c0 00000001 00000000     L...............
   1a5d4:	00000000                                ....

0001a5d8 <aIrqConfiguration>:
   1a5d8:	00000027 00000001 0000b58d 00000028     '...........(...
   1a5e8:	00000001 0000b59d                       ........

0001a5f0 <intCtrlConfig>:
   1a5f0:	00000002 0001a5d8                       ........

0001a5f8 <Mcu_Config>:
   1a5f8:	0000005a 00000000 00000001 00000001     Z...............
   1a608:	0001aae4 00019ea0 0001aaf0              ............

0001a614 <OsIf_xPredefinedConfig>:
   1a614:	00000000 02dc6c00                       .....l..

0001a61c <OsIf_apxPredefinedConfig>:
   1a61c:	0001a614                                ....

0001a620 <PdbAdcIpConfig_0>:
	...
   1a62c:	0000000f ffff0000 00000000 00000000     ................
   1a63c:	00000000                                ....

0001a640 <PdbAdcIpConfig_1>:
	...
   1a64c:	0000000f ffff0000 00000000 00000000     ................
   1a65c:	00000000                                ....

0001a660 <Platform_uConfiguration>:
   1a660:	0001a668                                h...

0001a664 <Platform_Config>:
   1a664:	0001a660                                `...

0001a668 <ipwConfig>:
   1a668:	0001a5f0 00000000                       ........

0001a670 <Port_au16PinDescription>:
   1a670:	0003ffff 0003ffff 0003ffff 0003ffff     ................
   1a680:	0001ffff 0003ffff 0003ffff 0003ffff     ................
   1a690:	0003ffff 0001ffff 0003ffcf 0003ffff     ................
   1a6a0:	0003ffff 0003fcff 0001dfef 0003f36f     ............o...
   1a6b0:	0003fe3f 0003f3ff 00026e3f 0001bebf     ?.......?n......
   1a6c0:	0002cf9f 0000302f 000030cc 000183ef     ..../0...0......
   1a6d0:	0001ec7c 00000b1f 00000023 00000010     |.......#.......
   1a6e0:	0001010c 00000033 000072cf 0000003c     ....3....r..<...
   1a6f0:	0000cff3 00001b2f 00018c7f 00000433     ..../.......3...
   1a700:	00000000 00000030 0000600b 00018c38     ....0....`..8...

0001a710 <g_pin_mux_InitConfigArr>:
   1a710:	4004b000 400ff080 00000008 00000002     ...@...@........
   1a720:	00000001 00000002 00000000 00000000     ................
	...
   1a738:	4004b000 400ff080 00000009 00000002     ...@...@........
   1a748:	00000001 00000002 00000000 00000000     ................
	...
   1a760:	4004b000 400ff080 0000000a 00000002     ...@...@........
   1a770:	00000001 00000002 00000000 00000000     ................
	...
   1a788:	4004b000 400ff080 0000000b 00000002     ...@...@........
   1a798:	00000001 00000002 00000000 00000000     ................
	...
   1a7b0:	4004b000 400ff080 0000000d 00000002     ...@...@........
   1a7c0:	00000001 00000002 00000000 00000000     ................
	...
   1a7d8:	4004b000 400ff080 0000000e 00000002     ...@...@........
   1a7e8:	00000001 00000002 00000000 00000000     ................
	...
   1a800:	4004d000 400ff100 0000000c 00000002     ...@...@........
   1a810:	00000001 00000001 00000000 00000000     ................
	...
   1a828:	4004c000 400ff0c0 00000011 00000002     ...@...@........
   1a838:	00000001 00000001 00000000 00000000     ................
	...
   1a850:	40049000 400ff000 0000000c 00000002     ...@...@........
   1a860:	00000001 00000001 00000000 00000000     ................
	...
   1a878:	40049000 00000000 0000000d 00000002     ...@............
   1a888:	00000002 00000002 00000000 00000000     ................
	...
   1a8a0:	4004a000 00000000 00000001 00000002     ...@............
   1a8b0:	00000000 00000001 00000000 00000000     ................
	...
   1a8c8:	4004a000 00000000 0000000d 00000002     ...@............
   1a8d8:	00000000 00000001 00000000 00000000     ................
	...

0001a8f0 <au8Port_PartitionList>:
   1a8f0:	00000001                                ....

0001a8f4 <au32Port_PinToPartitionMap>:
   1a8f4:	00000001 00000001 00000001 00000001     ................
   1a904:	00000001 00000001 00000001 00000001     ................
   1a914:	00000001 00000001 00000001 00000001     ................

0001a924 <Port_au16NoUnUsedPadsArrayDefault>:
   1a924:	00010000 00030002 00070006 00090008     ................
   1a934:	000e000b 0010000f 00200011 00230022     .......... .".#.
   1a944:	00250024 00270026 00290028 002b002a     $.%.&.'.(.).*.+.
   1a954:	002e002c 0030002f 00400031 00420041     ,.../.0.1.@.A.B.
   1a964:	00460043 004c0047 0050004f 00600051     C.F.G.L.O.P.Q.`.
   1a974:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
   1a984:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
   1a994:	00810080 00830082 00850084 00870086     ................
   1a9a4:	00890088 008b008a 008e008d 0090008f     ................

0001a9b4 <Port_UnUsedPin>:
   1a9b4:	00000000 00000001 00000000              ............

0001a9c0 <Port_aPinConfigDefault>:
   1a9c0:	00000048 00000100 00000000 00000002     H...............
   1a9d0:	00010001 00000049 00000100 00000000     ....I...........
   1a9e0:	00000002 00010101 0000004a 00000100     ........J.......
   1a9f0:	00000000 00000002 00010101 0000008c     ................
   1aa00:	00000100 00000000 00000001 00010101     ................
   1aa10:	0000004b 00000100 00000000 00000002     K...............
   1aa20:	00010101 0000004d 00000100 00000000     ....M...........
   1aa30:	00000002 00010101 0000004e 00000100     ........N.......
   1aa40:	00000000 00000002 00010101 00000071     ............q...
   1aa50:	00000100 00000000 00000001 00010101     ................
   1aa60:	0000000c 00000100 00000000 00000001     ................
   1aa70:	00010101 00000021 00000000 00000002     ....!...........
   1aa80:	00000000 00010000 0000002d 00000000     ........-.......
   1aa90:	00000002 00000000 00010000 0000000d     ................
   1aaa0:	00000200 00000000 00000002 00010000     ................

0001aab0 <Port_Config>:
   1aab0:	0048000c 0001a924 0001a9b4 0001a9c0     ..H.$...........
	...
   1aac8:	0001a8f4 0001a8f0 0001a710              ............

0001aad4 <Power_Ip_RCM_ConfigPB>:
	...

0001aadc <Power_Ip_PMC_ConfigPB>:
   1aadc:	00000000                                ....

0001aae0 <Power_Ip_SMC_ConfigPB>:
   1aae0:	00000000                                ....

0001aae4 <Power_Ip_aModeConfigPB>:
	...

0001aaf0 <Power_Ip_HwIPsConfigPB>:
   1aaf0:	0001aad4 0001aadc 0001aae0              ............

0001aafc <Pwm_Channels_PB>:
	...
   1ab04:	00000001 0001a598 00000001 00000001     ................

0001ab14 <Pwm_Instances_PB>:
   1ab14:	00000001 00000001 0001a5c4              ............

0001ab20 <Pwm_Config>:
   1ab20:	00000001 0001aafc 00000001 0001ab14     ................

0001ab30 <_aInitStr.0>:
   1ab30:	00000000 54540000 45522052 53454747     ......TTR REGGES
   1ab40:	00000000                                ....

0001ab44 <_aV2C.0>:
   1ab44:	33323130 37363534 42413938 46454443     0123456789ABCDEF

0001ab54 <__INIT_TABLE>:
   1ab54:	00000002 	.word	0x00000002
   1ab58:	1fff8b10 	.word	0x1fff8b10
   1ab5c:	0001ab7c 	.word	0x0001ab7c
   1ab60:	0001abd8 	.word	0x0001abd8
   1ab64:	1fff8800 	.word	0x1fff8800
   1ab68:	00000000 	.word	0x00000000
   1ab6c:	00000310 	.word	0x00000310

0001ab70 <__ZERO_TABLE>:
   1ab70:	00000001 	.word	0x00000001
   1ab74:	1fff8b70 	.word	0x1fff8b70
   1ab78:	1fff9ca0 	.word	0x1fff9ca0
