
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	000017af 	.word	0x000017af
  10:	000017b1 	.word	0x000017b1
  14:	000017b3 	.word	0x000017b3
  18:	000017b5 	.word	0x000017b5
	...
  2c:	000017b7 	.word	0x000017b7
  30:	000017b9 	.word	0x000017b9
  34:	00000000 	.word	0x00000000
  38:	000017bb 	.word	0x000017bb
  3c:	000017bd 	.word	0x000017bd
  40:	000017bf 	.word	0x000017bf
  44:	000017bf 	.word	0x000017bf
  48:	000017bf 	.word	0x000017bf
  4c:	000017bf 	.word	0x000017bf
  50:	000017bf 	.word	0x000017bf
  54:	000017bf 	.word	0x000017bf
  58:	000017bf 	.word	0x000017bf
  5c:	000017bf 	.word	0x000017bf
  60:	000017bf 	.word	0x000017bf
  64:	000017bf 	.word	0x000017bf
  68:	000017bf 	.word	0x000017bf
  6c:	000017bf 	.word	0x000017bf
  70:	000017bf 	.word	0x000017bf
  74:	000017bf 	.word	0x000017bf
  78:	000017bf 	.word	0x000017bf
  7c:	000017bf 	.word	0x000017bf
  80:	000017bf 	.word	0x000017bf
  84:	000017bf 	.word	0x000017bf
  88:	000017bf 	.word	0x000017bf
  8c:	000017bf 	.word	0x000017bf
  90:	000017bf 	.word	0x000017bf
  94:	000017bf 	.word	0x000017bf
  98:	000017bf 	.word	0x000017bf
  9c:	000017bf 	.word	0x000017bf
  a0:	000017bf 	.word	0x000017bf
  a4:	000017bf 	.word	0x000017bf
  a8:	000017bf 	.word	0x000017bf
  ac:	000017bf 	.word	0x000017bf
  b0:	000017bf 	.word	0x000017bf
  b4:	000017bf 	.word	0x000017bf
  b8:	000017bf 	.word	0x000017bf
  bc:	000017bf 	.word	0x000017bf
  c0:	000017bf 	.word	0x000017bf
  c4:	000017bf 	.word	0x000017bf
  c8:	000017bf 	.word	0x000017bf
  cc:	000017bf 	.word	0x000017bf
  d0:	000017bf 	.word	0x000017bf
  d4:	000017bf 	.word	0x000017bf
  d8:	000017bf 	.word	0x000017bf
  dc:	000017bf 	.word	0x000017bf
  e0:	000017bf 	.word	0x000017bf
  e4:	000017bf 	.word	0x000017bf
  e8:	000017bf 	.word	0x000017bf
  ec:	000017bf 	.word	0x000017bf
  f0:	000017bf 	.word	0x000017bf
  f4:	000017bf 	.word	0x000017bf
  f8:	000017bf 	.word	0x000017bf
  fc:	000017bf 	.word	0x000017bf
 100:	000017bf 	.word	0x000017bf
 104:	000017bf 	.word	0x000017bf
 108:	000017bf 	.word	0x000017bf
 10c:	000017bf 	.word	0x000017bf
 110:	000017bf 	.word	0x000017bf
 114:	000017bf 	.word	0x000017bf
 118:	000017bf 	.word	0x000017bf
 11c:	000017bf 	.word	0x000017bf
 120:	000017bf 	.word	0x000017bf
 124:	000017bf 	.word	0x000017bf
 128:	000017bf 	.word	0x000017bf
 12c:	000017bf 	.word	0x000017bf
 130:	000017bf 	.word	0x000017bf
 134:	000017bf 	.word	0x000017bf
 138:	000017bf 	.word	0x000017bf
 13c:	000017bf 	.word	0x000017bf
 140:	000017bf 	.word	0x000017bf
 144:	000017bf 	.word	0x000017bf
 148:	000017bf 	.word	0x000017bf
 14c:	000017bf 	.word	0x000017bf
 150:	000017bf 	.word	0x000017bf
 154:	000017bf 	.word	0x000017bf
 158:	000017bf 	.word	0x000017bf
 15c:	000017bf 	.word	0x000017bf
 160:	000017bf 	.word	0x000017bf
 164:	000017bf 	.word	0x000017bf
 168:	000017bf 	.word	0x000017bf
 16c:	000017bf 	.word	0x000017bf
 170:	000017bf 	.word	0x000017bf
 174:	000017bf 	.word	0x000017bf
 178:	000017bf 	.word	0x000017bf
 17c:	000017bf 	.word	0x000017bf
 180:	000017bf 	.word	0x000017bf
 184:	000017bf 	.word	0x000017bf
 188:	000017bf 	.word	0x000017bf
 18c:	000017bf 	.word	0x000017bf
 190:	000017bf 	.word	0x000017bf
 194:	000017bf 	.word	0x000017bf
 198:	000017bf 	.word	0x000017bf
 19c:	000017bf 	.word	0x000017bf
 1a0:	000017bf 	.word	0x000017bf
 1a4:	000017bf 	.word	0x000017bf
 1a8:	000017bf 	.word	0x000017bf
 1ac:	000017bf 	.word	0x000017bf
 1b0:	000017bf 	.word	0x000017bf
 1b4:	000017bf 	.word	0x000017bf
 1b8:	000017bf 	.word	0x000017bf
 1bc:	000017bf 	.word	0x000017bf
 1c0:	000017bf 	.word	0x000017bf
 1c4:	000017bf 	.word	0x000017bf
 1c8:	000017bf 	.word	0x000017bf
 1cc:	000017bf 	.word	0x000017bf
 1d0:	000017bf 	.word	0x000017bf
 1d4:	000017bf 	.word	0x000017bf
 1d8:	000017bf 	.word	0x000017bf
 1dc:	000017bf 	.word	0x000017bf
 1e0:	000017bf 	.word	0x000017bf
 1e4:	000017bf 	.word	0x000017bf
 1e8:	000017bf 	.word	0x000017bf
 1ec:	000017bf 	.word	0x000017bf
 1f0:	000017bf 	.word	0x000017bf
 1f4:	000017bf 	.word	0x000017bf
 1f8:	000017bf 	.word	0x000017bf
 1fc:	000017bf 	.word	0x000017bf
 200:	000017bf 	.word	0x000017bf
 204:	000017bf 	.word	0x000017bf
 208:	000017bf 	.word	0x000017bf
 20c:	000017bf 	.word	0x000017bf
 210:	000017bf 	.word	0x000017bf
 214:	000017bf 	.word	0x000017bf
 218:	000017bf 	.word	0x000017bf
 21c:	000017bf 	.word	0x000017bf
 220:	000017bf 	.word	0x000017bf
 224:	000017bf 	.word	0x000017bf
 228:	000017bf 	.word	0x000017bf
 22c:	000017bf 	.word	0x000017bf
 230:	000017bf 	.word	0x000017bf
 234:	000017bf 	.word	0x000017bf
 238:	000017bf 	.word	0x000017bf
 23c:	000017bf 	.word	0x000017bf
 240:	000017bf 	.word	0x000017bf
 244:	000017bf 	.word	0x000017bf
 248:	000017bf 	.word	0x000017bf
 24c:	000017bf 	.word	0x000017bf
 250:	000017bf 	.word	0x000017bf
 254:	000017bf 	.word	0x000017bf
 258:	000017bf 	.word	0x000017bf
 25c:	000017bf 	.word	0x000017bf
 260:	000017bf 	.word	0x000017bf
 264:	000017bf 	.word	0x000017bf
 268:	000017bf 	.word	0x000017bf
 26c:	000017bf 	.word	0x000017bf
 270:	000017bf 	.word	0x000017bf
 274:	000017bf 	.word	0x000017bf
 278:	000017bf 	.word	0x000017bf
 27c:	000017bf 	.word	0x000017bf
 280:	000017bf 	.word	0x000017bf
 284:	000017bf 	.word	0x000017bf
 288:	000017bf 	.word	0x000017bf
 28c:	000017bf 	.word	0x000017bf
 290:	000017bf 	.word	0x000017bf
 294:	000017bf 	.word	0x000017bf
 298:	000017bf 	.word	0x000017bf
 29c:	000017bf 	.word	0x000017bf
 2a0:	000017bf 	.word	0x000017bf
 2a4:	000017bf 	.word	0x000017bf
 2a8:	000017bf 	.word	0x000017bf
 2ac:	000017bf 	.word	0x000017bf
 2b0:	000017bf 	.word	0x000017bf
 2b4:	000017bf 	.word	0x000017bf
 2b8:	000017bf 	.word	0x000017bf
 2bc:	000017bf 	.word	0x000017bf
 2c0:	000017bf 	.word	0x000017bf
 2c4:	000017bf 	.word	0x000017bf
 2c8:	000017bf 	.word	0x000017bf
 2cc:	000017bf 	.word	0x000017bf
 2d0:	000017bf 	.word	0x000017bf
 2d4:	000017bf 	.word	0x000017bf
 2d8:	000017bf 	.word	0x000017bf
 2dc:	000017bf 	.word	0x000017bf
 2e0:	000017bf 	.word	0x000017bf
 2e4:	000017bf 	.word	0x000017bf
 2e8:	000017bf 	.word	0x000017bf
 2ec:	000017bf 	.word	0x000017bf
 2f0:	000017bf 	.word	0x000017bf
 2f4:	000017bf 	.word	0x000017bf
 2f8:	000017bf 	.word	0x000017bf
 2fc:	000017bf 	.word	0x000017bf
 300:	000017bf 	.word	0x000017bf
 304:	000017bf 	.word	0x000017bf
 308:	000017bf 	.word	0x000017bf
 30c:	000017bf 	.word	0x000017bf

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f001 f8cb 	bl	161c <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f001 f98a 	bl	17a4 <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff97c8 	.word	0x1fff97c8

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f001 f8d5 	bl	1748 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * 
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void ) {
     8b0:	b508      	push	{r3, lr}
    EcuM_Init();    //MCU configuration.
     8b2:	f001 fca1 	bl	21f8 <EcuM_Init>
    IoHwAb_Init0( NULL_PTR );  //Initializing IO hardware abstractions.
     8b6:	2000      	movs	r0, #0
     8b8:	f000 fe98 	bl	15ec <IoHwAb_Init0>
    SEGGER_RTT_Init();  //Initializing RTT library.
     8bc:	f001 f912 	bl	1ae4 <SEGGER_RTT_Init>
    Scheduler_Init( &Scheduler_Control );   //Initializing control structure for scheduler.
     8c0:	4802      	ldr	r0, [pc, #8]	; (8cc <main+0x1c>)
     8c2:	f000 f8cf 	bl	a64 <Scheduler_Init>

    while( 1u ) {
        Scheduler_MainFunction();
     8c6:	f000 f98b 	bl	be0 <Scheduler_MainFunction>
     8ca:	e7fc      	b.n	8c6 <main+0x16>
     8cc:	1fff975c 	.word	0x1fff975c

000008d0 <Adc_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Adc_schm_read_msr(void)
{
     8d0:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     8d2:	f3ef 8310 	mrs	r3, PRIMASK
     8d6:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     8d8:	4623      	mov	r3, r4
}
     8da:	4618      	mov	r0, r3
     8dc:	f85d 4b04 	ldr.w	r4, [sp], #4
     8e0:	4770      	bx	lr

000008e2 <Dio_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Dio_schm_read_msr(void)
{
     8e2:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     8e4:	f3ef 8310 	mrs	r3, PRIMASK
     8e8:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     8ea:	4623      	mov	r3, r4
}
     8ec:	4618      	mov	r0, r3
     8ee:	f85d 4b04 	ldr.w	r4, [sp], #4
     8f2:	4770      	bx	lr

000008f4 <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     8f4:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     8f6:	f3ef 8310 	mrs	r3, PRIMASK
     8fa:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     8fc:	4623      	mov	r3, r4
}
     8fe:	4618      	mov	r0, r3
     900:	f85d 4b04 	ldr.w	r4, [sp], #4
     904:	4770      	bx	lr

00000906 <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     906:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     908:	f3ef 8310 	mrs	r3, PRIMASK
     90c:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     90e:	4623      	mov	r3, r4
}
     910:	4618      	mov	r0, r3
     912:	f85d 4b04 	ldr.w	r4, [sp], #4
     916:	4770      	bx	lr

00000918 <Pwm_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Pwm_schm_read_msr(void)
{
     918:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     91a:	f3ef 8310 	mrs	r3, PRIMASK
     91e:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     920:	4623      	mov	r3, r4
}
     922:	4618      	mov	r0, r3
     924:	f85d 4b04 	ldr.w	r4, [sp], #4
     928:	4770      	bx	lr

0000092a <Bfx_SetBit_u32u8>:
 * @param[in] BitPn Bit position.
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_SetBit_u32u8( uint32* Data, uint8 BitPn ) {
     92a:	b082      	sub	sp, #8
     92c:	9001      	str	r0, [sp, #4]
     92e:	460b      	mov	r3, r1
     930:	f88d 3003 	strb.w	r3, [sp, #3]
    *Data |= ( 1 << BitPn ); 
     934:	9b01      	ldr	r3, [sp, #4]
     936:	681b      	ldr	r3, [r3, #0]
     938:	f89d 2003 	ldrb.w	r2, [sp, #3]
     93c:	2101      	movs	r1, #1
     93e:	fa01 f202 	lsl.w	r2, r1, r2
     942:	431a      	orrs	r2, r3
     944:	9b01      	ldr	r3, [sp, #4]
     946:	601a      	str	r2, [r3, #0]
}
     948:	bf00      	nop
     94a:	b002      	add	sp, #8
     94c:	4770      	bx	lr

0000094e <Bfx_ClrBit_u32u8>:
 * @param[in] BitPn Bit position.
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_ClrBit_u32u8( uint32* Data, uint8 BitPn ) {
     94e:	b082      	sub	sp, #8
     950:	9001      	str	r0, [sp, #4]
     952:	460b      	mov	r3, r1
     954:	f88d 3003 	strb.w	r3, [sp, #3]
    *Data &= ~( 1 << BitPn );
     958:	9b01      	ldr	r3, [sp, #4]
     95a:	681b      	ldr	r3, [r3, #0]
     95c:	f89d 2003 	ldrb.w	r2, [sp, #3]
     960:	2101      	movs	r1, #1
     962:	fa01 f202 	lsl.w	r2, r1, r2
     966:	43d2      	mvns	r2, r2
     968:	401a      	ands	r2, r3
     96a:	9b01      	ldr	r3, [sp, #4]
     96c:	601a      	str	r2, [r3, #0]
}
     96e:	bf00      	nop
     970:	b002      	add	sp, #8
     972:	4770      	bx	lr

00000974 <Bfx_GetBit_u32u8_u8>:
 * @param[in] BitPn Bit position.
 * @retval Result It indicates the value of the bit of interest.
 * 
 * @note The max BitPn value is 31
 */
static inline boolean Bfx_GetBit_u32u8_u8( uint32 Data, uint8 BitPn ) {
     974:	b084      	sub	sp, #16
     976:	9001      	str	r0, [sp, #4]
     978:	460b      	mov	r3, r1
     97a:	f88d 3003 	strb.w	r3, [sp, #3]
    //local data.
    boolean Result = FALSE;
     97e:	2300      	movs	r3, #0
     980:	f88d 300f 	strb.w	r3, [sp, #15]
    
    Result = ( Data & ( 1 << BitPn ) ) != 0;
     984:	f89d 3003 	ldrb.w	r3, [sp, #3]
     988:	2201      	movs	r2, #1
     98a:	fa02 f303 	lsl.w	r3, r2, r3
     98e:	461a      	mov	r2, r3
     990:	9b01      	ldr	r3, [sp, #4]
     992:	4013      	ands	r3, r2
     994:	2b00      	cmp	r3, #0
     996:	bf14      	ite	ne
     998:	2301      	movne	r3, #1
     99a:	2300      	moveq	r3, #0
     99c:	f88d 300f 	strb.w	r3, [sp, #15]
    return Result;
     9a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     9a4:	4618      	mov	r0, r3
     9a6:	b004      	add	sp, #16
     9a8:	4770      	bx	lr

000009aa <Bfx_PutBit_u32u8u8>:
 * @param[in] Status Status value (TRUE or FALSE).
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_PutBit_u32u8u8( uint32* Data, uint8 BitPn, boolean Status ) {
     9aa:	b082      	sub	sp, #8
     9ac:	9001      	str	r0, [sp, #4]
     9ae:	460b      	mov	r3, r1
     9b0:	f88d 3003 	strb.w	r3, [sp, #3]
     9b4:	4613      	mov	r3, r2
     9b6:	f88d 3002 	strb.w	r3, [sp, #2]
    if ( Status == TRUE ) { //Setting bit.
     9ba:	f89d 3002 	ldrb.w	r3, [sp, #2]
     9be:	2b00      	cmp	r3, #0
     9c0:	d00a      	beq.n	9d8 <Bfx_PutBit_u32u8u8+0x2e>
        *Data |= ( 1 << BitPn ); 
     9c2:	9b01      	ldr	r3, [sp, #4]
     9c4:	681b      	ldr	r3, [r3, #0]
     9c6:	f89d 2003 	ldrb.w	r2, [sp, #3]
     9ca:	2101      	movs	r1, #1
     9cc:	fa01 f202 	lsl.w	r2, r1, r2
     9d0:	431a      	orrs	r2, r3
     9d2:	9b01      	ldr	r3, [sp, #4]
     9d4:	601a      	str	r2, [r3, #0]
    }

    else { //Clearing bit.
        *Data &= ~( 1 << BitPn );
    }
}
     9d6:	e00a      	b.n	9ee <Bfx_PutBit_u32u8u8+0x44>
        *Data &= ~( 1 << BitPn );
     9d8:	9b01      	ldr	r3, [sp, #4]
     9da:	681b      	ldr	r3, [r3, #0]
     9dc:	f89d 2003 	ldrb.w	r2, [sp, #3]
     9e0:	2101      	movs	r1, #1
     9e2:	fa01 f202 	lsl.w	r2, r1, r2
     9e6:	43d2      	mvns	r2, r2
     9e8:	401a      	ands	r2, r3
     9ea:	9b01      	ldr	r3, [sp, #4]
     9ec:	601a      	str	r2, [r3, #0]
}
     9ee:	bf00      	nop
     9f0:	b002      	add	sp, #8
     9f2:	4770      	bx	lr

000009f4 <Scheduler_InitQueue>:
/**
 * @brief This function initialices the queue buffer control members.
 * 
 * @param SchedulerPtr Ptr to control struct instance, it allows the init of the members.
 */
void Scheduler_InitQueue( Scheduler_CtrlType *SchedulerPtr ) {
     9f4:	b500      	push	{lr}
     9f6:	b085      	sub	sp, #20
     9f8:	9001      	str	r0, [sp, #4]
    //local data.
    uint8 i = 0;
     9fa:	2300      	movs	r3, #0
     9fc:	f88d 300f 	strb.w	r3, [sp, #15]

    //Initializing members.
    for ( i = 0; i < SCHEDULER_QUEUES; i++ ) {
     a00:	2300      	movs	r3, #0
     a02:	f88d 300f 	strb.w	r3, [sp, #15]
     a06:	e023      	b.n	a50 <Scheduler_InitQueue+0x5c>
        SchedulerPtr->QueueHeads[i] = 0;
     a08:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a0c:	9b01      	ldr	r3, [sp, #4]
     a0e:	3208      	adds	r2, #8
     a10:	2100      	movs	r1, #0
     a12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        SchedulerPtr->QueueTails[i] = 0;
     a16:	f89d 300f 	ldrb.w	r3, [sp, #15]
     a1a:	9a01      	ldr	r2, [sp, #4]
     a1c:	3308      	adds	r3, #8
     a1e:	009b      	lsls	r3, r3, #2
     a20:	4413      	add	r3, r2
     a22:	2200      	movs	r2, #0
     a24:	605a      	str	r2, [r3, #4]
        Bfx_ClrBit_u32u8( &SchedulerPtr->QueueFulls, i );
     a26:	9b01      	ldr	r3, [sp, #4]
     a28:	332c      	adds	r3, #44	; 0x2c
     a2a:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a2e:	4611      	mov	r1, r2
     a30:	4618      	mov	r0, r3
     a32:	f7ff ff8c 	bl	94e <Bfx_ClrBit_u32u8>
        Bfx_SetBit_u32u8( &SchedulerPtr->QueueEmpties, i );
     a36:	9b01      	ldr	r3, [sp, #4]
     a38:	3328      	adds	r3, #40	; 0x28
     a3a:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a3e:	4611      	mov	r1, r2
     a40:	4618      	mov	r0, r3
     a42:	f7ff ff72 	bl	92a <Bfx_SetBit_u32u8>
    for ( i = 0; i < SCHEDULER_QUEUES; i++ ) {
     a46:	f89d 300f 	ldrb.w	r3, [sp, #15]
     a4a:	3301      	adds	r3, #1
     a4c:	f88d 300f 	strb.w	r3, [sp, #15]
     a50:	f89d 300f 	ldrb.w	r3, [sp, #15]
     a54:	2b00      	cmp	r3, #0
     a56:	d0d7      	beq.n	a08 <Scheduler_InitQueue+0x14>
    }
}
     a58:	bf00      	nop
     a5a:	bf00      	nop
     a5c:	b005      	add	sp, #20
     a5e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00000a64 <Scheduler_Init>:
 *
 * @note The timeout and periodicity values are the initial values registered in the buffers.
 * @note The elapsed and count values are initialized to 0 and timeout values respectively.
 * @note All the flags are initialiced to the initial values registered in the buffers.
 */
Std_ReturnType Scheduler_Init( Scheduler_CtrlType *SchedulerPtr ) {
     a64:	b500      	push	{lr}
     a66:	b085      	sub	sp, #20
     a68:	9001      	str	r0, [sp, #4]
    //local data 
    Std_ReturnType status = TRUE;
     a6a:	2301      	movs	r3, #1
     a6c:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8 i = 0;
     a70:	2300      	movs	r3, #0
     a72:	f88d 300f 	strb.w	r3, [sp, #15]

    //Initializing tasks related parameters.
    for ( i = 0; i < SCHEDULER_TASKS; i++ ) {
     a76:	2300      	movs	r3, #0
     a78:	f88d 300f 	strb.w	r3, [sp, #15]
     a7c:	e033      	b.n	ae6 <Scheduler_Init+0x82>
        SchedulerPtr->TaskPeriod[i] = SchedulerConfig_Ptr->TaskPtr[i].InitPeriod;   //Registering initial periodicity value of each task.
     a7e:	4b44      	ldr	r3, [pc, #272]	; (b90 <Scheduler_Init+0x12c>)
     a80:	681b      	ldr	r3, [r3, #0]
     a82:	6899      	ldr	r1, [r3, #8]
     a84:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a88:	4613      	mov	r3, r2
     a8a:	005b      	lsls	r3, r3, #1
     a8c:	4413      	add	r3, r2
     a8e:	009b      	lsls	r3, r3, #2
     a90:	440b      	add	r3, r1
     a92:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a96:	6819      	ldr	r1, [r3, #0]
     a98:	9b01      	ldr	r3, [sp, #4]
     a9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        SchedulerPtr->TaskElapsed[i] = 0;   //Initializing time follow up of each task.
     a9e:	f89d 200f 	ldrb.w	r2, [sp, #15]
     aa2:	9b01      	ldr	r3, [sp, #4]
     aa4:	3202      	adds	r2, #2
     aa6:	2100      	movs	r1, #0
     aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        Bfx_PutBit_u32u8u8( &SchedulerPtr->TaskFlags, i, SchedulerConfig_Ptr->TaskPtr[i].InitFlag  );   //Registering initial flag of each task. 
     aac:	9b01      	ldr	r3, [sp, #4]
     aae:	f103 0018 	add.w	r0, r3, #24
     ab2:	4b37      	ldr	r3, [pc, #220]	; (b90 <Scheduler_Init+0x12c>)
     ab4:	681b      	ldr	r3, [r3, #0]
     ab6:	6899      	ldr	r1, [r3, #8]
     ab8:	f89d 200f 	ldrb.w	r2, [sp, #15]
     abc:	4613      	mov	r3, r2
     abe:	005b      	lsls	r3, r3, #1
     ac0:	4413      	add	r3, r2
     ac2:	009b      	lsls	r3, r3, #2
     ac4:	440b      	add	r3, r1
     ac6:	791b      	ldrb	r3, [r3, #4]
     ac8:	2b00      	cmp	r3, #0
     aca:	bf14      	ite	ne
     acc:	2301      	movne	r3, #1
     ace:	2300      	moveq	r3, #0
     ad0:	b2da      	uxtb	r2, r3
     ad2:	f89d 300f 	ldrb.w	r3, [sp, #15]
     ad6:	4619      	mov	r1, r3
     ad8:	f7ff ff67 	bl	9aa <Bfx_PutBit_u32u8u8>
    for ( i = 0; i < SCHEDULER_TASKS; i++ ) {
     adc:	f89d 300f 	ldrb.w	r3, [sp, #15]
     ae0:	3301      	adds	r3, #1
     ae2:	f88d 300f 	strb.w	r3, [sp, #15]
     ae6:	f89d 300f 	ldrb.w	r3, [sp, #15]
     aea:	2b01      	cmp	r3, #1
     aec:	d9c7      	bls.n	a7e <Scheduler_Init+0x1a>
    }

    //Initializing timers related parameters.
    for ( i = 0; i < SCHEDULER_TIMERS; i++ ) {
     aee:	2300      	movs	r3, #0
     af0:	f88d 300f 	strb.w	r3, [sp, #15]
     af4:	e03f      	b.n	b76 <Scheduler_Init+0x112>
        SchedulerPtr->TimerTimeout[i] = SchedulerConfig_Ptr->TimerPtr[i].InitTimeout;   //Registering initial timeout value of each timer.
     af6:	4b26      	ldr	r3, [pc, #152]	; (b90 <Scheduler_Init+0x12c>)
     af8:	681b      	ldr	r3, [r3, #0]
     afa:	6919      	ldr	r1, [r3, #16]
     afc:	f89d 200f 	ldrb.w	r2, [sp, #15]
     b00:	4613      	mov	r3, r2
     b02:	005b      	lsls	r3, r3, #1
     b04:	4413      	add	r3, r2
     b06:	009b      	lsls	r3, r3, #2
     b08:	440b      	add	r3, r1
     b0a:	f89d 200f 	ldrb.w	r2, [sp, #15]
     b0e:	6819      	ldr	r1, [r3, #0]
     b10:	9b01      	ldr	r3, [sp, #4]
     b12:	3204      	adds	r2, #4
     b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        SchedulerPtr->TimerCount[i] = SchedulerConfig_Ptr->TimerPtr[i].InitTimeout; //Initializing timer count of each timer.
     b18:	4b1d      	ldr	r3, [pc, #116]	; (b90 <Scheduler_Init+0x12c>)
     b1a:	681b      	ldr	r3, [r3, #0]
     b1c:	6919      	ldr	r1, [r3, #16]
     b1e:	f89d 200f 	ldrb.w	r2, [sp, #15]
     b22:	4613      	mov	r3, r2
     b24:	005b      	lsls	r3, r3, #1
     b26:	4413      	add	r3, r2
     b28:	009b      	lsls	r3, r3, #2
     b2a:	18ca      	adds	r2, r1, r3
     b2c:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b30:	6812      	ldr	r2, [r2, #0]
     b32:	9901      	ldr	r1, [sp, #4]
     b34:	3304      	adds	r3, #4
     b36:	009b      	lsls	r3, r3, #2
     b38:	440b      	add	r3, r1
     b3a:	605a      	str	r2, [r3, #4]
        Bfx_PutBit_u32u8u8( &SchedulerPtr->TimerFlags, i, SchedulerConfig_Ptr->TimerPtr[i].InitFlag  );   //Registering initial flag of each timer.
     b3c:	9b01      	ldr	r3, [sp, #4]
     b3e:	f103 001c 	add.w	r0, r3, #28
     b42:	4b13      	ldr	r3, [pc, #76]	; (b90 <Scheduler_Init+0x12c>)
     b44:	681b      	ldr	r3, [r3, #0]
     b46:	6919      	ldr	r1, [r3, #16]
     b48:	f89d 200f 	ldrb.w	r2, [sp, #15]
     b4c:	4613      	mov	r3, r2
     b4e:	005b      	lsls	r3, r3, #1
     b50:	4413      	add	r3, r2
     b52:	009b      	lsls	r3, r3, #2
     b54:	440b      	add	r3, r1
     b56:	791b      	ldrb	r3, [r3, #4]
     b58:	2b00      	cmp	r3, #0
     b5a:	bf14      	ite	ne
     b5c:	2301      	movne	r3, #1
     b5e:	2300      	moveq	r3, #0
     b60:	b2da      	uxtb	r2, r3
     b62:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b66:	4619      	mov	r1, r3
     b68:	f7ff ff1f 	bl	9aa <Bfx_PutBit_u32u8u8>
    for ( i = 0; i < SCHEDULER_TIMERS; i++ ) {
     b6c:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b70:	3301      	adds	r3, #1
     b72:	f88d 300f 	strb.w	r3, [sp, #15]
     b76:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b7a:	2b00      	cmp	r3, #0
     b7c:	d0bb      	beq.n	af6 <Scheduler_Init+0x92>
    } 

    Scheduler_InitQueue( SchedulerPtr ); //Initializing queues related parameters.   
     b7e:	9801      	ldr	r0, [sp, #4]
     b80:	f7ff ff38 	bl	9f4 <Scheduler_InitQueue>

    return status;
     b84:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
     b88:	4618      	mov	r0, r3
     b8a:	b005      	add	sp, #20
     b8c:	f85d fb04 	ldr.w	pc, [sp], #4
     b90:	1fff8b4c 	.word	0x1fff8b4c

00000b94 <Scheduler_GetTimer>:
 *
 * @retval counter_value Actual count value of timer, if operation was a success counter_value = n, otherwise 0. 
 *
 * @note The timer ID must be valid.
 */
uint32 Scheduler_GetTimer( TimerType Timer ) {
     b94:	b084      	sub	sp, #16
     b96:	4603      	mov	r3, r0
     b98:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data
    uint32 counter_value = 0;
     b9c:	2300      	movs	r3, #0
     b9e:	9303      	str	r3, [sp, #12]

    //Verifying if the timer ID is valid.
    if ( ( Timer != 0 ) && ( Timer <= SchedulerConfig_Ptr->Timers ) ) { //valid ID
     ba0:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ba4:	2b00      	cmp	r3, #0
     ba6:	d011      	beq.n	bcc <Scheduler_GetTimer+0x38>
     ba8:	4b0b      	ldr	r3, [pc, #44]	; (bd8 <Scheduler_GetTimer+0x44>)
     baa:	681b      	ldr	r3, [r3, #0]
     bac:	7b1b      	ldrb	r3, [r3, #12]
     bae:	f89d 2007 	ldrb.w	r2, [sp, #7]
     bb2:	429a      	cmp	r2, r3
     bb4:	d80a      	bhi.n	bcc <Scheduler_GetTimer+0x38>
        counter_value = SchedulerCtrl_Ptr->TimerCount[ Timer - 1 ];
     bb6:	4b09      	ldr	r3, [pc, #36]	; (bdc <Scheduler_GetTimer+0x48>)
     bb8:	681a      	ldr	r2, [r3, #0]
     bba:	f89d 3007 	ldrb.w	r3, [sp, #7]
     bbe:	3b01      	subs	r3, #1
     bc0:	3304      	adds	r3, #4
     bc2:	009b      	lsls	r3, r3, #2
     bc4:	4413      	add	r3, r2
     bc6:	685b      	ldr	r3, [r3, #4]
     bc8:	9303      	str	r3, [sp, #12]
     bca:	e001      	b.n	bd0 <Scheduler_GetTimer+0x3c>
    }

    else {
        counter_value = FALSE;  //invalid ID.
     bcc:	2300      	movs	r3, #0
     bce:	9303      	str	r3, [sp, #12]
    }

    return counter_value;
     bd0:	9b03      	ldr	r3, [sp, #12]
}
     bd2:	4618      	mov	r0, r3
     bd4:	b004      	add	sp, #16
     bd6:	4770      	bx	lr
     bd8:	1fff8b4c 	.word	0x1fff8b4c
     bdc:	1fff8b50 	.word	0x1fff8b50

00000be0 <Scheduler_MainFunction>:
 *
 * @note At least 1 timer and 1 task needs to be register in order to the scheduler to work.
 * @note After a timer reaches 0 is important to restart, stop or reload that timer else it will still decrement --> risk of overflow.
 * @note It´s important that previous to using the scheduler the buffers for the timers and task must be correctly defined, specially their flags.
 */
void Scheduler_MainFunction( void ) {
     be0:	b500      	push	{lr}
     be2:	b085      	sub	sp, #20
    //local data
    uint32 tick_value = OsIf_MicrosToTicks( SchedulerConfig_Ptr->Tick * 1000, OSIF_COUNTER_SYSTEM );    //Translating tick value from us to counter increments.
     be4:	4b5e      	ldr	r3, [pc, #376]	; (d60 <Scheduler_MainFunction+0x180>)
     be6:	681b      	ldr	r3, [r3, #0]
     be8:	681b      	ldr	r3, [r3, #0]
     bea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     bee:	fb02 f303 	mul.w	r3, r2, r3
     bf2:	2101      	movs	r1, #1
     bf4:	4618      	mov	r0, r3
     bf6:	f001 fe17 	bl	2828 <OsIf_MicrosToTicks>
     bfa:	9001      	str	r0, [sp, #4]
    uint32 count_value = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );    //First counter value capture.
     bfc:	2001      	movs	r0, #1
     bfe:	f001 fdc7 	bl	2790 <OsIf_GetCounter>
     c02:	4603      	mov	r3, r0
     c04:	9300      	str	r3, [sp, #0]
    uint32 elapsed_time = 0;    //Time follow up for tick (timer increments).
     c06:	2300      	movs	r3, #0
     c08:	9303      	str	r3, [sp, #12]
    uint8 i = 0;
     c0a:	2300      	movs	r3, #0
     c0c:	f88d 300b 	strb.w	r3, [sp, #11]

    while( 1 ) {    //tasks are executed during timeout.
        //Time follow up update for tick.
        elapsed_time += OsIf_GetElapsed( &count_value, OSIF_COUNTER_SYSTEM );   //time capture update
     c10:	466b      	mov	r3, sp
     c12:	2101      	movs	r1, #1
     c14:	4618      	mov	r0, r3
     c16:	f001 fdd4 	bl	27c2 <OsIf_GetElapsed>
     c1a:	4602      	mov	r2, r0
     c1c:	9b03      	ldr	r3, [sp, #12]
     c1e:	4413      	add	r3, r2
     c20:	9303      	str	r3, [sp, #12]
        
        //Verifying if a scheduler´s tick has occurred.
        if ( elapsed_time >= tick_value ) {          
     c22:	9a03      	ldr	r2, [sp, #12]
     c24:	9b01      	ldr	r3, [sp, #4]
     c26:	429a      	cmp	r2, r3
     c28:	d3f2      	bcc.n	c10 <Scheduler_MainFunction+0x30>
            
            //Executing timers
            for ( i = 0; i < SchedulerConfig_Ptr->Timers; i++ ) {
     c2a:	2300      	movs	r3, #0
     c2c:	f88d 300b 	strb.w	r3, [sp, #11]
     c30:	e03a      	b.n	ca8 <Scheduler_MainFunction+0xc8>
                //Verifying execution of timer i
                if ( Bfx_GetBit_u32u8_u8( SchedulerCtrl_Ptr->TimerFlags, i ) == TRUE ) {    //timer activated
     c32:	4b4c      	ldr	r3, [pc, #304]	; (d64 <Scheduler_MainFunction+0x184>)
     c34:	681b      	ldr	r3, [r3, #0]
     c36:	69db      	ldr	r3, [r3, #28]
     c38:	f89d 200b 	ldrb.w	r2, [sp, #11]
     c3c:	4611      	mov	r1, r2
     c3e:	4618      	mov	r0, r3
     c40:	f7ff fe98 	bl	974 <Bfx_GetBit_u32u8_u8>
     c44:	4603      	mov	r3, r0
     c46:	2b00      	cmp	r3, #0
     c48:	d029      	beq.n	c9e <Scheduler_MainFunction+0xbe>
                    SchedulerCtrl_Ptr->TimerCount[i] -= SchedulerConfig_Ptr->Tick;    //decrement
     c4a:	4b46      	ldr	r3, [pc, #280]	; (d64 <Scheduler_MainFunction+0x184>)
     c4c:	681a      	ldr	r2, [r3, #0]
     c4e:	f89d 300b 	ldrb.w	r3, [sp, #11]
     c52:	3304      	adds	r3, #4
     c54:	009b      	lsls	r3, r3, #2
     c56:	4413      	add	r3, r2
     c58:	6858      	ldr	r0, [r3, #4]
     c5a:	4b41      	ldr	r3, [pc, #260]	; (d60 <Scheduler_MainFunction+0x180>)
     c5c:	681b      	ldr	r3, [r3, #0]
     c5e:	681a      	ldr	r2, [r3, #0]
     c60:	4b40      	ldr	r3, [pc, #256]	; (d64 <Scheduler_MainFunction+0x184>)
     c62:	6819      	ldr	r1, [r3, #0]
     c64:	f89d 300b 	ldrb.w	r3, [sp, #11]
     c68:	1a82      	subs	r2, r0, r2
     c6a:	3304      	adds	r3, #4
     c6c:	009b      	lsls	r3, r3, #2
     c6e:	440b      	add	r3, r1
     c70:	605a      	str	r2, [r3, #4]
                    
                    //Verifying execution of callback i
                    if ( Scheduler_GetTimer( i + 1 ) == 0 ) {   //timeout achieved.
     c72:	f89d 300b 	ldrb.w	r3, [sp, #11]
     c76:	3301      	adds	r3, #1
     c78:	b2db      	uxtb	r3, r3
     c7a:	4618      	mov	r0, r3
     c7c:	f7ff ff8a 	bl	b94 <Scheduler_GetTimer>
     c80:	4603      	mov	r3, r0
     c82:	2b00      	cmp	r3, #0
     c84:	d10b      	bne.n	c9e <Scheduler_MainFunction+0xbe>
                        SchedulerConfig_Ptr->TimerPtr[i].CallbackFunc();
     c86:	4b36      	ldr	r3, [pc, #216]	; (d60 <Scheduler_MainFunction+0x180>)
     c88:	681b      	ldr	r3, [r3, #0]
     c8a:	6919      	ldr	r1, [r3, #16]
     c8c:	f89d 200b 	ldrb.w	r2, [sp, #11]
     c90:	4613      	mov	r3, r2
     c92:	005b      	lsls	r3, r3, #1
     c94:	4413      	add	r3, r2
     c96:	009b      	lsls	r3, r3, #2
     c98:	440b      	add	r3, r1
     c9a:	689b      	ldr	r3, [r3, #8]
     c9c:	4798      	blx	r3
            for ( i = 0; i < SchedulerConfig_Ptr->Timers; i++ ) {
     c9e:	f89d 300b 	ldrb.w	r3, [sp, #11]
     ca2:	3301      	adds	r3, #1
     ca4:	f88d 300b 	strb.w	r3, [sp, #11]
     ca8:	4b2d      	ldr	r3, [pc, #180]	; (d60 <Scheduler_MainFunction+0x180>)
     caa:	681b      	ldr	r3, [r3, #0]
     cac:	7b1b      	ldrb	r3, [r3, #12]
     cae:	f89d 200b 	ldrb.w	r2, [sp, #11]
     cb2:	429a      	cmp	r2, r3
     cb4:	d3bd      	bcc.n	c32 <Scheduler_MainFunction+0x52>
                    }
                }
            }

            //Executing tasks.
            for ( i = 0; i < SchedulerConfig_Ptr->Tasks; i++ ) {
     cb6:	2300      	movs	r3, #0
     cb8:	f88d 300b 	strb.w	r3, [sp, #11]
     cbc:	e045      	b.n	d4a <Scheduler_MainFunction+0x16a>
                //Verifying execution of task i
                if ( Bfx_GetBit_u32u8_u8( SchedulerCtrl_Ptr->TaskFlags, i ) == TRUE ) {
     cbe:	4b29      	ldr	r3, [pc, #164]	; (d64 <Scheduler_MainFunction+0x184>)
     cc0:	681b      	ldr	r3, [r3, #0]
     cc2:	699b      	ldr	r3, [r3, #24]
     cc4:	f89d 200b 	ldrb.w	r2, [sp, #11]
     cc8:	4611      	mov	r1, r2
     cca:	4618      	mov	r0, r3
     ccc:	f7ff fe52 	bl	974 <Bfx_GetBit_u32u8_u8>
     cd0:	4603      	mov	r3, r0
     cd2:	2b00      	cmp	r3, #0
     cd4:	d034      	beq.n	d40 <Scheduler_MainFunction+0x160>
                    SchedulerCtrl_Ptr->TaskElapsed[i] += SchedulerConfig_Ptr->Tick;   //Time follow-up update for task i.
     cd6:	4b23      	ldr	r3, [pc, #140]	; (d64 <Scheduler_MainFunction+0x184>)
     cd8:	681b      	ldr	r3, [r3, #0]
     cda:	f89d 200b 	ldrb.w	r2, [sp, #11]
     cde:	3202      	adds	r2, #2
     ce0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
     ce4:	4b1e      	ldr	r3, [pc, #120]	; (d60 <Scheduler_MainFunction+0x180>)
     ce6:	681b      	ldr	r3, [r3, #0]
     ce8:	6819      	ldr	r1, [r3, #0]
     cea:	4b1e      	ldr	r3, [pc, #120]	; (d64 <Scheduler_MainFunction+0x184>)
     cec:	681b      	ldr	r3, [r3, #0]
     cee:	f89d 200b 	ldrb.w	r2, [sp, #11]
     cf2:	4401      	add	r1, r0
     cf4:	3202      	adds	r2, #2
     cf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                
                    //Verifying the execution of callback i.
                    if ( SchedulerCtrl_Ptr->TaskElapsed[i] >= SchedulerCtrl_Ptr->TaskPeriod[i] ) {  //periodicity achieved.
     cfa:	4b1a      	ldr	r3, [pc, #104]	; (d64 <Scheduler_MainFunction+0x184>)
     cfc:	681b      	ldr	r3, [r3, #0]
     cfe:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d02:	3202      	adds	r2, #2
     d04:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
     d08:	4b16      	ldr	r3, [pc, #88]	; (d64 <Scheduler_MainFunction+0x184>)
     d0a:	681b      	ldr	r3, [r3, #0]
     d0c:	f89d 100b 	ldrb.w	r1, [sp, #11]
     d10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
     d14:	429a      	cmp	r2, r3
     d16:	d313      	bcc.n	d40 <Scheduler_MainFunction+0x160>
                        SchedulerConfig_Ptr->TaskPtr[i].TaskFunc();
     d18:	4b11      	ldr	r3, [pc, #68]	; (d60 <Scheduler_MainFunction+0x180>)
     d1a:	681b      	ldr	r3, [r3, #0]
     d1c:	6899      	ldr	r1, [r3, #8]
     d1e:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d22:	4613      	mov	r3, r2
     d24:	005b      	lsls	r3, r3, #1
     d26:	4413      	add	r3, r2
     d28:	009b      	lsls	r3, r3, #2
     d2a:	440b      	add	r3, r1
     d2c:	689b      	ldr	r3, [r3, #8]
     d2e:	4798      	blx	r3
                        SchedulerCtrl_Ptr->TaskElapsed[i] = 0;  //Time follow-up reset for task i.
     d30:	4b0c      	ldr	r3, [pc, #48]	; (d64 <Scheduler_MainFunction+0x184>)
     d32:	681b      	ldr	r3, [r3, #0]
     d34:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d38:	3202      	adds	r2, #2
     d3a:	2100      	movs	r1, #0
     d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for ( i = 0; i < SchedulerConfig_Ptr->Tasks; i++ ) {
     d40:	f89d 300b 	ldrb.w	r3, [sp, #11]
     d44:	3301      	adds	r3, #1
     d46:	f88d 300b 	strb.w	r3, [sp, #11]
     d4a:	4b05      	ldr	r3, [pc, #20]	; (d60 <Scheduler_MainFunction+0x180>)
     d4c:	681b      	ldr	r3, [r3, #0]
     d4e:	791b      	ldrb	r3, [r3, #4]
     d50:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d54:	429a      	cmp	r2, r3
     d56:	d3b2      	bcc.n	cbe <Scheduler_MainFunction+0xde>
                    }
                }
            }

            elapsed_time = 0;   //Reset time follow up for tick.
     d58:	2300      	movs	r3, #0
     d5a:	9303      	str	r3, [sp, #12]
        elapsed_time += OsIf_GetElapsed( &count_value, OSIF_COUNTER_SYSTEM );   //time capture update
     d5c:	e758      	b.n	c10 <Scheduler_MainFunction+0x30>
     d5e:	bf00      	nop
     d60:	1fff8b4c 	.word	0x1fff8b4c
     d64:	1fff8b50 	.word	0x1fff8b50

00000d68 <Task1_callback>:
/**
 * @brief This is the callback function for the task 1.
 *
 * This function executes the state machine every 50ms.
 */
void Task1_callback( void ) {
     d68:	b508      	push	{r3, lr}
    HwIoAb_Buttons_MainFunction();
     d6a:	f000 f967 	bl	103c <HwIoAb_Buttons_MainFunction>
}
     d6e:	bf00      	nop
     d70:	bd08      	pop	{r3, pc}
	...

00000d74 <Task2_callback>:
 * @note Button 1, Single click toggle only led0 (PTC8), double click prints ohms value of pot 1 main, hold click tone 1 for buzzer, release stops buzzer.
 * @note Button 2, Single click toggle only led1 (PTC9), double click prints ohms value of pot 2 main, hold click tone 2 for buzzer, release stops buzzer.
 * @note Button 3, Single click toggle only led2 (PTC10), double click prints ohms values of pot1 and pot 2 alter , hold click tone 3 for buzzer, release stops buzzer.
 * @note The tone of the buzzer is always the last activated.
 */
void Task2_callback( void ) {
     d74:	b500      	push	{lr}
     d76:	b083      	sub	sp, #12
    //local data.
    static boolean flags[3] = { TRUE, TRUE, TRUE }; //Flags for executing buzzer tones.
    uint8 i = 0;
     d78:	2300      	movs	r3, #0
     d7a:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 actual_event = 0; //Actual event of button.
     d7e:	2300      	movs	r3, #0
     d80:	f88d 3006 	strb.w	r3, [sp, #6]


    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) { //Checking each button and its event detected.
     d84:	2300      	movs	r3, #0
     d86:	f88d 3007 	strb.w	r3, [sp, #7]
     d8a:	e0e0      	b.n	f4e <Task2_callback+0x1da>
        actual_event =  HwIoAb_Buttons_GetEvent( i + 1 );   //Obtaining event of actual button.
     d8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d90:	3301      	adds	r3, #1
     d92:	b2db      	uxtb	r3, r3
     d94:	4618      	mov	r0, r3
     d96:	f000 f927 	bl	fe8 <HwIoAb_Buttons_GetEvent>
     d9a:	4603      	mov	r3, r0
     d9c:	f88d 3006 	strb.w	r3, [sp, #6]
        if ( actual_event != HWIOAB_BTN_EVENT_IDLE ) {  //A click was detected.
     da0:	f89d 3006 	ldrb.w	r3, [sp, #6]
     da4:	2b00      	cmp	r3, #0
     da6:	f000 80ca 	beq.w	f3e <Task2_callback+0x1ca>
            switch ( i ) {    
     daa:	f89d 3007 	ldrb.w	r3, [sp, #7]
     dae:	2b02      	cmp	r3, #2
     db0:	f000 8084 	beq.w	ebc <Task2_callback+0x148>
     db4:	2b02      	cmp	r3, #2
     db6:	f300 80c4 	bgt.w	f42 <Task2_callback+0x1ce>
     dba:	2b00      	cmp	r3, #0
     dbc:	d002      	beq.n	dc4 <Task2_callback+0x50>
     dbe:	2b01      	cmp	r3, #1
     dc0:	d03e      	beq.n	e40 <Task2_callback+0xcc>
                            break;
                        }
                break;

                default:    //Invalid button.
                break;
     dc2:	e0be      	b.n	f42 <Task2_callback+0x1ce>
                    switch ( actual_event ) {
     dc4:	f89d 3006 	ldrb.w	r3, [sp, #6]
     dc8:	3b01      	subs	r3, #1
     dca:	2b03      	cmp	r3, #3
     dcc:	d834      	bhi.n	e38 <Task2_callback+0xc4>
     dce:	a201      	add	r2, pc, #4	; (adr r2, dd4 <Task2_callback+0x60>)
     dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     dd4:	00000de5 	.word	0x00000de5
     dd8:	00000ded 	.word	0x00000ded
     ddc:	00000e0b 	.word	0x00000e0b
     de0:	00000e29 	.word	0x00000e29
                            HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_0_ID );
     de4:	2000      	movs	r0, #0
     de6:	f000 fac1 	bl	136c <HwIoAb_Leds_TurnToggle>
                        break;
     dea:	e028      	b.n	e3e <Task2_callback+0xca>
                            HwIoAb_Pots_GetValue( HWIOAB_POTS_MAIN_RESULTS );
     dec:	4b5e      	ldr	r3, [pc, #376]	; (f68 <Task2_callback+0x1f4>)
     dee:	681b      	ldr	r3, [r3, #0]
     df0:	330a      	adds	r3, #10
     df2:	4618      	mov	r0, r3
     df4:	f000 fafe 	bl	13f4 <HwIoAb_Pots_GetValue>
                            SEGGER_RTT_printf( 0, "Pot 1 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_main[0] );
     df8:	4b5b      	ldr	r3, [pc, #364]	; (f68 <Task2_callback+0x1f4>)
     dfa:	681b      	ldr	r3, [r3, #0]
     dfc:	895b      	ldrh	r3, [r3, #10]
     dfe:	461a      	mov	r2, r3
     e00:	495a      	ldr	r1, [pc, #360]	; (f6c <Task2_callback+0x1f8>)
     e02:	2000      	movs	r0, #0
     e04:	f001 f9d6 	bl	21b4 <SEGGER_RTT_printf>
                        break;
     e08:	e019      	b.n	e3e <Task2_callback+0xca>
                            if ( flags[i]  == TRUE ) {  //Just executes the first time it was detected.
     e0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e0e:	4a58      	ldr	r2, [pc, #352]	; (f70 <Task2_callback+0x1fc>)
     e10:	5cd3      	ldrb	r3, [r2, r3]
     e12:	2b00      	cmp	r3, #0
     e14:	d012      	beq.n	e3c <Task2_callback+0xc8>
                                HwIoAb_Buzzer_Beep( HWIOAB_BUZZER_TONE_1 );
     e16:	2000      	movs	r0, #0
     e18:	f000 fbb5 	bl	1586 <HwIoAb_Buzzer_Beep>
                                flags[i] = FALSE;
     e1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e20:	4a53      	ldr	r2, [pc, #332]	; (f70 <Task2_callback+0x1fc>)
     e22:	2100      	movs	r1, #0
     e24:	54d1      	strb	r1, [r2, r3]
                        break;
     e26:	e009      	b.n	e3c <Task2_callback+0xc8>
                            HwIoAb_Buzzer_Stop();
     e28:	f000 fbda 	bl	15e0 <HwIoAb_Buzzer_Stop>
                            flags[i] = TRUE;
     e2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e30:	4a4f      	ldr	r2, [pc, #316]	; (f70 <Task2_callback+0x1fc>)
     e32:	2101      	movs	r1, #1
     e34:	54d1      	strb	r1, [r2, r3]
                        break;
     e36:	e002      	b.n	e3e <Task2_callback+0xca>
                        break;
     e38:	bf00      	nop
     e3a:	e083      	b.n	f44 <Task2_callback+0x1d0>
                        break;
     e3c:	bf00      	nop
                break;
     e3e:	e081      	b.n	f44 <Task2_callback+0x1d0>
                    switch ( actual_event ) {
     e40:	f89d 3006 	ldrb.w	r3, [sp, #6]
     e44:	3b01      	subs	r3, #1
     e46:	2b03      	cmp	r3, #3
     e48:	d834      	bhi.n	eb4 <Task2_callback+0x140>
     e4a:	a201      	add	r2, pc, #4	; (adr r2, e50 <Task2_callback+0xdc>)
     e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     e50:	00000e61 	.word	0x00000e61
     e54:	00000e69 	.word	0x00000e69
     e58:	00000e87 	.word	0x00000e87
     e5c:	00000ea5 	.word	0x00000ea5
                            HwIoAb_Leds_TurnToggle( HWI0AB_LEDS_1_ID );
     e60:	2001      	movs	r0, #1
     e62:	f000 fa83 	bl	136c <HwIoAb_Leds_TurnToggle>
                        break;
     e66:	e028      	b.n	eba <Task2_callback+0x146>
                            HwIoAb_Pots_GetValue( HWIOAB_POTS_MAIN_RESULTS );
     e68:	4b3f      	ldr	r3, [pc, #252]	; (f68 <Task2_callback+0x1f4>)
     e6a:	681b      	ldr	r3, [r3, #0]
     e6c:	330a      	adds	r3, #10
     e6e:	4618      	mov	r0, r3
     e70:	f000 fac0 	bl	13f4 <HwIoAb_Pots_GetValue>
                            SEGGER_RTT_printf( 0, "Pot 2 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_main[1] );
     e74:	4b3c      	ldr	r3, [pc, #240]	; (f68 <Task2_callback+0x1f4>)
     e76:	681b      	ldr	r3, [r3, #0]
     e78:	899b      	ldrh	r3, [r3, #12]
     e7a:	461a      	mov	r2, r3
     e7c:	493d      	ldr	r1, [pc, #244]	; (f74 <Task2_callback+0x200>)
     e7e:	2000      	movs	r0, #0
     e80:	f001 f998 	bl	21b4 <SEGGER_RTT_printf>
                        break;
     e84:	e019      	b.n	eba <Task2_callback+0x146>
                            if ( flags[i]  == TRUE ) {  //Just executes the first time it was detected.
     e86:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e8a:	4a39      	ldr	r2, [pc, #228]	; (f70 <Task2_callback+0x1fc>)
     e8c:	5cd3      	ldrb	r3, [r2, r3]
     e8e:	2b00      	cmp	r3, #0
     e90:	d012      	beq.n	eb8 <Task2_callback+0x144>
                                HwIoAb_Buzzer_Beep( HWIOAB_BUZZER_TONE_2 );
     e92:	2001      	movs	r0, #1
     e94:	f000 fb77 	bl	1586 <HwIoAb_Buzzer_Beep>
                                flags[i] = FALSE;
     e98:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e9c:	4a34      	ldr	r2, [pc, #208]	; (f70 <Task2_callback+0x1fc>)
     e9e:	2100      	movs	r1, #0
     ea0:	54d1      	strb	r1, [r2, r3]
                        break;
     ea2:	e009      	b.n	eb8 <Task2_callback+0x144>
                            HwIoAb_Buzzer_Stop();
     ea4:	f000 fb9c 	bl	15e0 <HwIoAb_Buzzer_Stop>
                            flags[i] = TRUE;
     ea8:	f89d 3007 	ldrb.w	r3, [sp, #7]
     eac:	4a30      	ldr	r2, [pc, #192]	; (f70 <Task2_callback+0x1fc>)
     eae:	2101      	movs	r1, #1
     eb0:	54d1      	strb	r1, [r2, r3]
                        break;
     eb2:	e002      	b.n	eba <Task2_callback+0x146>
                        break;
     eb4:	bf00      	nop
     eb6:	e045      	b.n	f44 <Task2_callback+0x1d0>
                        break;
     eb8:	bf00      	nop
                break;
     eba:	e043      	b.n	f44 <Task2_callback+0x1d0>
                        switch ( actual_event ) {
     ebc:	f89d 3006 	ldrb.w	r3, [sp, #6]
     ec0:	3b01      	subs	r3, #1
     ec2:	2b03      	cmp	r3, #3
     ec4:	d837      	bhi.n	f36 <Task2_callback+0x1c2>
     ec6:	a201      	add	r2, pc, #4	; (adr r2, ecc <Task2_callback+0x158>)
     ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     ecc:	00000edd 	.word	0x00000edd
     ed0:	00000ee5 	.word	0x00000ee5
     ed4:	00000f09 	.word	0x00000f09
     ed8:	00000f27 	.word	0x00000f27
                                HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_2_ID );
     edc:	2002      	movs	r0, #2
     ede:	f000 fa45 	bl	136c <HwIoAb_Leds_TurnToggle>
                            break;
     ee2:	e02b      	b.n	f3c <Task2_callback+0x1c8>
                                HwIoAb_Pots_GetAltValue( HWIOAB_POTS_ALTER_RESULTS );
     ee4:	4b20      	ldr	r3, [pc, #128]	; (f68 <Task2_callback+0x1f4>)
     ee6:	681b      	ldr	r3, [r3, #0]
     ee8:	330e      	adds	r3, #14
     eea:	4618      	mov	r0, r3
     eec:	f000 fae4 	bl	14b8 <HwIoAb_Pots_GetAltValue>
                                    PotsControl_Ptr->Ohms_results_alter[0], PotsControl_Ptr->Ohms_results_alter[1] );
     ef0:	4b1d      	ldr	r3, [pc, #116]	; (f68 <Task2_callback+0x1f4>)
     ef2:	681b      	ldr	r3, [r3, #0]
     ef4:	89db      	ldrh	r3, [r3, #14]
                                SEGGER_RTT_printf( 0, "Pot 1 resistance value in ohms: %d, Pot 2 resistance value in ohms: %d\n", 
     ef6:	461a      	mov	r2, r3
                                    PotsControl_Ptr->Ohms_results_alter[0], PotsControl_Ptr->Ohms_results_alter[1] );
     ef8:	4b1b      	ldr	r3, [pc, #108]	; (f68 <Task2_callback+0x1f4>)
     efa:	681b      	ldr	r3, [r3, #0]
     efc:	8a1b      	ldrh	r3, [r3, #16]
                                SEGGER_RTT_printf( 0, "Pot 1 resistance value in ohms: %d, Pot 2 resistance value in ohms: %d\n", 
     efe:	491e      	ldr	r1, [pc, #120]	; (f78 <Task2_callback+0x204>)
     f00:	2000      	movs	r0, #0
     f02:	f001 f957 	bl	21b4 <SEGGER_RTT_printf>
                            break;
     f06:	e019      	b.n	f3c <Task2_callback+0x1c8>
                                if ( flags[i]  == TRUE ) {  //Just executes the first time it was detected.
     f08:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f0c:	4a18      	ldr	r2, [pc, #96]	; (f70 <Task2_callback+0x1fc>)
     f0e:	5cd3      	ldrb	r3, [r2, r3]
     f10:	2b00      	cmp	r3, #0
     f12:	d012      	beq.n	f3a <Task2_callback+0x1c6>
                                    HwIoAb_Buzzer_Beep( HWIOAB_BUZZER_TONE_3 );
     f14:	2002      	movs	r0, #2
     f16:	f000 fb36 	bl	1586 <HwIoAb_Buzzer_Beep>
                                    flags[i] = FALSE;
     f1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f1e:	4a14      	ldr	r2, [pc, #80]	; (f70 <Task2_callback+0x1fc>)
     f20:	2100      	movs	r1, #0
     f22:	54d1      	strb	r1, [r2, r3]
                            break;
     f24:	e009      	b.n	f3a <Task2_callback+0x1c6>
                                HwIoAb_Buzzer_Stop();
     f26:	f000 fb5b 	bl	15e0 <HwIoAb_Buzzer_Stop>
                                flags[i] = TRUE;
     f2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f2e:	4a10      	ldr	r2, [pc, #64]	; (f70 <Task2_callback+0x1fc>)
     f30:	2101      	movs	r1, #1
     f32:	54d1      	strb	r1, [r2, r3]
                            break;
     f34:	e002      	b.n	f3c <Task2_callback+0x1c8>
                            break;
     f36:	bf00      	nop
     f38:	e004      	b.n	f44 <Task2_callback+0x1d0>
                            break;
     f3a:	bf00      	nop
                break;
     f3c:	e002      	b.n	f44 <Task2_callback+0x1d0>
            }
        }
     f3e:	bf00      	nop
     f40:	e000      	b.n	f44 <Task2_callback+0x1d0>
                break;
     f42:	bf00      	nop
    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) { //Checking each button and its event detected.
     f44:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f48:	3301      	adds	r3, #1
     f4a:	f88d 3007 	strb.w	r3, [sp, #7]
     f4e:	4b0b      	ldr	r3, [pc, #44]	; (f7c <Task2_callback+0x208>)
     f50:	681b      	ldr	r3, [r3, #0]
     f52:	781b      	ldrb	r3, [r3, #0]
     f54:	f89d 2007 	ldrb.w	r2, [sp, #7]
     f58:	429a      	cmp	r2, r3
     f5a:	f4ff af17 	bcc.w	d8c <Task2_callback+0x18>
    }
}
     f5e:	bf00      	nop
     f60:	bf00      	nop
     f62:	b003      	add	sp, #12
     f64:	f85d fb04 	ldr.w	pc, [sp], #4
     f68:	1fff8b60 	.word	0x1fff8b60
     f6c:	00015c30 	.word	0x00015c30
     f70:	1fff8b54 	.word	0x1fff8b54
     f74:	00015c54 	.word	0x00015c54
     f78:	00015c78 	.word	0x00015c78
     f7c:	1fff8b58 	.word	0x1fff8b58

00000f80 <Timer1_callback>:
/**
 * @brief This is the callback function for the timer 1.
 *
 */
void Timer1_callback( void ) {
}
     f80:	bf00      	nop
     f82:	4770      	bx	lr

00000f84 <HwIoAb_Buttons_Init>:
 * @brief This function initialices the control structure for the double click state machine. 
 * 
 * @param Buttons_Config Pointer to configuration array.
 * 
 */
void HwIoAb_Buttons_Init( const HwIoAb_Buttons_Config *Buttons_Config ) {
     f84:	b084      	sub	sp, #16
     f86:	9001      	str	r0, [sp, #4]
    //local data 
    uint8 i = 0;
     f88:	2300      	movs	r3, #0
     f8a:	f88d 300f 	strb.w	r3, [sp, #15]

    //Initializing members.
    ButtonsControl_Ptr->Buttons = HWIOAB_BUTTONS_MAX;
     f8e:	4b15      	ldr	r3, [pc, #84]	; (fe4 <HwIoAb_Buttons_Init+0x60>)
     f90:	681b      	ldr	r3, [r3, #0]
     f92:	2203      	movs	r2, #3
     f94:	701a      	strb	r2, [r3, #0]
    ButtonsControl_Ptr->ButtonsConfig_Ptr = Buttons_Config;
     f96:	4b13      	ldr	r3, [pc, #76]	; (fe4 <HwIoAb_Buttons_Init+0x60>)
     f98:	681b      	ldr	r3, [r3, #0]
     f9a:	9a01      	ldr	r2, [sp, #4]
     f9c:	605a      	str	r2, [r3, #4]

    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) {   //All button states and events to IDLE.
     f9e:	2300      	movs	r3, #0
     fa0:	f88d 300f 	strb.w	r3, [sp, #15]
     fa4:	e012      	b.n	fcc <HwIoAb_Buttons_Init+0x48>
        ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     fa6:	4b0f      	ldr	r3, [pc, #60]	; (fe4 <HwIoAb_Buttons_Init+0x60>)
     fa8:	681a      	ldr	r2, [r3, #0]
     faa:	f89d 300f 	ldrb.w	r3, [sp, #15]
     fae:	4413      	add	r3, r2
     fb0:	2200      	movs	r2, #0
     fb2:	721a      	strb	r2, [r3, #8]
        ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_IDLE;
     fb4:	4b0b      	ldr	r3, [pc, #44]	; (fe4 <HwIoAb_Buttons_Init+0x60>)
     fb6:	681a      	ldr	r2, [r3, #0]
     fb8:	f89d 300f 	ldrb.w	r3, [sp, #15]
     fbc:	4413      	add	r3, r2
     fbe:	2200      	movs	r2, #0
     fc0:	72da      	strb	r2, [r3, #11]
    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) {   //All button states and events to IDLE.
     fc2:	f89d 300f 	ldrb.w	r3, [sp, #15]
     fc6:	3301      	adds	r3, #1
     fc8:	f88d 300f 	strb.w	r3, [sp, #15]
     fcc:	4b05      	ldr	r3, [pc, #20]	; (fe4 <HwIoAb_Buttons_Init+0x60>)
     fce:	681b      	ldr	r3, [r3, #0]
     fd0:	781b      	ldrb	r3, [r3, #0]
     fd2:	f89d 200f 	ldrb.w	r2, [sp, #15]
     fd6:	429a      	cmp	r2, r3
     fd8:	d3e5      	bcc.n	fa6 <HwIoAb_Buttons_Init+0x22>
    }
}
     fda:	bf00      	nop
     fdc:	bf00      	nop
     fde:	b004      	add	sp, #16
     fe0:	4770      	bx	lr
     fe2:	bf00      	nop
     fe4:	1fff8b58 	.word	0x1fff8b58

00000fe8 <HwIoAb_Buttons_GetEvent>:
 * @param Button Button ID. 
 * @return event Last event detected in button.
 * 
 * @note The Button ID must be valid.
 */
uint8 HwIoAb_Buttons_GetEvent( uint8 Button ) {
     fe8:	b084      	sub	sp, #16
     fea:	4603      	mov	r3, r0
     fec:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data.
    uint8 event = 0;
     ff0:	2300      	movs	r3, #0
     ff2:	f88d 300f 	strb.w	r3, [sp, #15]

    //Verifying if ID is valid
    if ( ( Button != 0 ) && ( Button <= ButtonsControl_Ptr->Buttons ) ) {
     ff6:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ffa:	2b00      	cmp	r3, #0
     ffc:	d017      	beq.n	102e <HwIoAb_Buttons_GetEvent+0x46>
     ffe:	4b0e      	ldr	r3, [pc, #56]	; (1038 <HwIoAb_Buttons_GetEvent+0x50>)
    1000:	681b      	ldr	r3, [r3, #0]
    1002:	781b      	ldrb	r3, [r3, #0]
    1004:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1008:	429a      	cmp	r2, r3
    100a:	d810      	bhi.n	102e <HwIoAb_Buttons_GetEvent+0x46>
        event = ButtonsControl_Ptr->Events[ Button - 1 ]; //Obtaining last event.
    100c:	4b0a      	ldr	r3, [pc, #40]	; (1038 <HwIoAb_Buttons_GetEvent+0x50>)
    100e:	681a      	ldr	r2, [r3, #0]
    1010:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1014:	3b01      	subs	r3, #1
    1016:	4413      	add	r3, r2
    1018:	7adb      	ldrb	r3, [r3, #11]
    101a:	f88d 300f 	strb.w	r3, [sp, #15]
        ButtonsControl_Ptr->Events[ Button - 1 ] = HWIOAB_BTN_EVENT_IDLE;   //Clearing event of button.
    101e:	4b06      	ldr	r3, [pc, #24]	; (1038 <HwIoAb_Buttons_GetEvent+0x50>)
    1020:	681a      	ldr	r2, [r3, #0]
    1022:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1026:	3b01      	subs	r3, #1
    1028:	4413      	add	r3, r2
    102a:	2200      	movs	r2, #0
    102c:	72da      	strb	r2, [r3, #11]
    }

    return event;
    102e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1032:	4618      	mov	r0, r3
    1034:	b004      	add	sp, #16
    1036:	4770      	bx	lr
    1038:	1fff8b58 	.word	0x1fff8b58

0000103c <HwIoAb_Buttons_MainFunction>:
 * @note This function is called every HWIOAB_BUTTONS_PERIOD.
 * @note Remember that the timeout count is for detecting a hold click when the button is pressed 1 and 2 times.
 * @note Each button has its own dedicated count.
 * 
 */
void HwIoAb_Buttons_MainFunction( void ) {
    103c:	b500      	push	{lr}
    103e:	b083      	sub	sp, #12
    //local data
    static boolean count_flags[ HWIOAB_BUTTONS_MAX ] = { FALSE, FALSE, FALSE };
    static uint32 count[ HWIOAB_BUTTONS_MAX ] = { 0, 0, 0 };
    uint8 i = 0;
    1040:	2300      	movs	r3, #0
    1042:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean active = FALSE;
    1046:	2300      	movs	r3, #0
    1048:	f88d 3006 	strb.w	r3, [sp, #6]
    
    //Counting in every function call
    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) {   //Counting for each button.
    104c:	2300      	movs	r3, #0
    104e:	f88d 3007 	strb.w	r3, [sp, #7]
    1052:	e029      	b.n	10a8 <HwIoAb_Buttons_MainFunction+0x6c>
        if ( count_flags[i] == TRUE ) {
    1054:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1058:	4ab9      	ldr	r2, [pc, #740]	; (1340 <__BSS_SRAM_SIZE+0x220>)
    105a:	5cd3      	ldrb	r3, [r2, r3]
    105c:	2b00      	cmp	r3, #0
    105e:	d01e      	beq.n	109e <HwIoAb_Buttons_MainFunction+0x62>
            count[i] += HWIOAB_BUTTONS_PERIOD;
    1060:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1064:	4ab7      	ldr	r2, [pc, #732]	; (1344 <__BSS_SRAM_SIZE+0x224>)
    1066:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    106a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    106e:	3232      	adds	r2, #50	; 0x32
    1070:	49b4      	ldr	r1, [pc, #720]	; (1344 <__BSS_SRAM_SIZE+0x224>)
    1072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

            if ( count[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout ) {   //Once reaching timeout count stops.
    1076:	f89d 3007 	ldrb.w	r3, [sp, #7]
    107a:	4ab2      	ldr	r2, [pc, #712]	; (1344 <__BSS_SRAM_SIZE+0x224>)
    107c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1080:	4bb1      	ldr	r3, [pc, #708]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    1082:	681b      	ldr	r3, [r3, #0]
    1084:	6859      	ldr	r1, [r3, #4]
    1086:	f89d 3007 	ldrb.w	r3, [sp, #7]
    108a:	00db      	lsls	r3, r3, #3
    108c:	440b      	add	r3, r1
    108e:	685b      	ldr	r3, [r3, #4]
    1090:	429a      	cmp	r2, r3
    1092:	d104      	bne.n	109e <HwIoAb_Buttons_MainFunction+0x62>
                count_flags[i] = FALSE;
    1094:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1098:	4aa9      	ldr	r2, [pc, #676]	; (1340 <__BSS_SRAM_SIZE+0x220>)
    109a:	2100      	movs	r1, #0
    109c:	54d1      	strb	r1, [r2, r3]
    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) {   //Counting for each button.
    109e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10a2:	3301      	adds	r3, #1
    10a4:	f88d 3007 	strb.w	r3, [sp, #7]
    10a8:	4ba7      	ldr	r3, [pc, #668]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    10aa:	681b      	ldr	r3, [r3, #0]
    10ac:	781b      	ldrb	r3, [r3, #0]
    10ae:	f89d 2007 	ldrb.w	r2, [sp, #7]
    10b2:	429a      	cmp	r2, r3
    10b4:	d3ce      	bcc.n	1054 <HwIoAb_Buttons_MainFunction+0x18>
            }
        }
    }

    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) { //Executing state machine for each button.
    10b6:	2300      	movs	r3, #0
    10b8:	f88d 3007 	strb.w	r3, [sp, #7]
    10bc:	e132      	b.n	1324 <__BSS_SRAM_SIZE+0x204>
        
        //Defining the active value according to the active status.
        if ( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active == HWIOAB_BTN_ACTIVE_HIGH ) {  //Pull down.
    10be:	4ba2      	ldr	r3, [pc, #648]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    10c0:	681b      	ldr	r3, [r3, #0]
    10c2:	685a      	ldr	r2, [r3, #4]
    10c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10c8:	00db      	lsls	r3, r3, #3
    10ca:	4413      	add	r3, r2
    10cc:	789b      	ldrb	r3, [r3, #2]
    10ce:	2b01      	cmp	r3, #1
    10d0:	d103      	bne.n	10da <HwIoAb_Buttons_MainFunction+0x9e>
            active = STD_HIGH;
    10d2:	2301      	movs	r3, #1
    10d4:	f88d 3006 	strb.w	r3, [sp, #6]
    10d8:	e002      	b.n	10e0 <HwIoAb_Buttons_MainFunction+0xa4>
        }

        else {  //Pull up.
            active = STD_LOW;
    10da:	2300      	movs	r3, #0
    10dc:	f88d 3006 	strb.w	r3, [sp, #6]
        }
        
        switch( ButtonsControl_Ptr->States[i] ) {
    10e0:	4b99      	ldr	r3, [pc, #612]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    10e2:	681a      	ldr	r2, [r3, #0]
    10e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10e8:	4413      	add	r3, r2
    10ea:	7a1b      	ldrb	r3, [r3, #8]
    10ec:	2b04      	cmp	r3, #4
    10ee:	f200 8109 	bhi.w	1304 <__BSS_SRAM_SIZE+0x1e4>
    10f2:	a201      	add	r2, pc, #4	; (adr r2, 10f8 <HwIoAb_Buttons_MainFunction+0xbc>)
    10f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    10f8:	0000110d 	.word	0x0000110d
    10fc:	00001157 	.word	0x00001157
    1100:	0000123f 	.word	0x0000123f
    1104:	000012b1 	.word	0x000012b1
    1108:	000011bd 	.word	0x000011bd
            case HWIOAB_BTN_STATE_IDLE :
                //Checks if the button is pressed.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == active ) {
    110c:	4b8e      	ldr	r3, [pc, #568]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    110e:	681b      	ldr	r3, [r3, #0]
    1110:	685a      	ldr	r2, [r3, #4]
    1112:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1116:	00db      	lsls	r3, r3, #3
    1118:	4413      	add	r3, r2
    111a:	881b      	ldrh	r3, [r3, #0]
    111c:	4618      	mov	r0, r3
    111e:	f006 f9d9 	bl	74d4 <Dio_ReadChannel>
    1122:	4603      	mov	r3, r0
    1124:	461a      	mov	r2, r3
    1126:	f89d 3006 	ldrb.w	r3, [sp, #6]
    112a:	429a      	cmp	r2, r3
    112c:	f040 80ec 	bne.w	1308 <__BSS_SRAM_SIZE+0x1e8>
                    count_flags[i] = TRUE;  //Starting count.
    1130:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1134:	4a82      	ldr	r2, [pc, #520]	; (1340 <__BSS_SRAM_SIZE+0x220>)
    1136:	2101      	movs	r1, #1
    1138:	54d1      	strb	r1, [r2, r3]
                    count[i] = 0;   //Restarting count.
    113a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    113e:	4a81      	ldr	r2, [pc, #516]	; (1344 <__BSS_SRAM_SIZE+0x224>)
    1140:	2100      	movs	r1, #0
    1142:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_SINGLE_PRESS;
    1146:	4b80      	ldr	r3, [pc, #512]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    1148:	681a      	ldr	r2, [r3, #0]
    114a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    114e:	4413      	add	r3, r2
    1150:	2201      	movs	r2, #1
    1152:	721a      	strb	r2, [r3, #8]
                }
            break;
    1154:	e0d8      	b.n	1308 <__BSS_SRAM_SIZE+0x1e8>
        
            case HWIOAB_BTN_STATE_SINGLE_PRESS :
                //Checking count timeout.
                if ( count[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout ) {
    1156:	f89d 3007 	ldrb.w	r3, [sp, #7]
    115a:	4a7a      	ldr	r2, [pc, #488]	; (1344 <__BSS_SRAM_SIZE+0x224>)
    115c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1160:	4b79      	ldr	r3, [pc, #484]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    1162:	681b      	ldr	r3, [r3, #0]
    1164:	6859      	ldr	r1, [r3, #4]
    1166:	f89d 3007 	ldrb.w	r3, [sp, #7]
    116a:	00db      	lsls	r3, r3, #3
    116c:	440b      	add	r3, r1
    116e:	685b      	ldr	r3, [r3, #4]
    1170:	429a      	cmp	r2, r3
    1172:	d106      	bne.n	1182 <__BSS_SRAM_SIZE+0x62>
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_HOLD_PRESS;
    1174:	4b74      	ldr	r3, [pc, #464]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    1176:	681a      	ldr	r2, [r3, #0]
    1178:	f89d 3007 	ldrb.w	r3, [sp, #7]
    117c:	4413      	add	r3, r2
    117e:	2203      	movs	r2, #3
    1180:	721a      	strb	r2, [r3, #8]
                }

                //Checking if the button is released.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !active ) {
    1182:	4b71      	ldr	r3, [pc, #452]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    1184:	681b      	ldr	r3, [r3, #0]
    1186:	685a      	ldr	r2, [r3, #4]
    1188:	f89d 3007 	ldrb.w	r3, [sp, #7]
    118c:	00db      	lsls	r3, r3, #3
    118e:	4413      	add	r3, r2
    1190:	881b      	ldrh	r3, [r3, #0]
    1192:	4618      	mov	r0, r3
    1194:	f006 f99e 	bl	74d4 <Dio_ReadChannel>
    1198:	4603      	mov	r3, r0
    119a:	461a      	mov	r2, r3
    119c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    11a0:	f083 0301 	eor.w	r3, r3, #1
    11a4:	b2db      	uxtb	r3, r3
    11a6:	429a      	cmp	r2, r3
    11a8:	f040 80b0 	bne.w	130c <__BSS_SRAM_SIZE+0x1ec>
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_RELEASE;
    11ac:	4b66      	ldr	r3, [pc, #408]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    11ae:	681a      	ldr	r2, [r3, #0]
    11b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11b4:	4413      	add	r3, r2
    11b6:	2204      	movs	r2, #4
    11b8:	721a      	strb	r2, [r3, #8]
                }
            break;
    11ba:	e0a7      	b.n	130c <__BSS_SRAM_SIZE+0x1ec>
        
            case HWIOAB_BTN_STATE_RELEASE :
                //Checking count timeout.
                if ( count[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout ) { //Single click
    11bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11c0:	4a60      	ldr	r2, [pc, #384]	; (1344 <__BSS_SRAM_SIZE+0x224>)
    11c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    11c6:	4b60      	ldr	r3, [pc, #384]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    11c8:	681b      	ldr	r3, [r3, #0]
    11ca:	6859      	ldr	r1, [r3, #4]
    11cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11d0:	00db      	lsls	r3, r3, #3
    11d2:	440b      	add	r3, r1
    11d4:	685b      	ldr	r3, [r3, #4]
    11d6:	429a      	cmp	r2, r3
    11d8:	d10d      	bne.n	11f6 <__BSS_SRAM_SIZE+0xd6>
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_SINGLE_CLICK;
    11da:	4b5b      	ldr	r3, [pc, #364]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    11dc:	681a      	ldr	r2, [r3, #0]
    11de:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11e2:	4413      	add	r3, r2
    11e4:	2201      	movs	r2, #1
    11e6:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
    11e8:	4b57      	ldr	r3, [pc, #348]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    11ea:	681a      	ldr	r2, [r3, #0]
    11ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11f0:	4413      	add	r3, r2
    11f2:	2200      	movs	r2, #0
    11f4:	721a      	strb	r2, [r3, #8]
                }

                //Checks if the button is pressed.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == active ) {
    11f6:	4b54      	ldr	r3, [pc, #336]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    11f8:	681b      	ldr	r3, [r3, #0]
    11fa:	685a      	ldr	r2, [r3, #4]
    11fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1200:	00db      	lsls	r3, r3, #3
    1202:	4413      	add	r3, r2
    1204:	881b      	ldrh	r3, [r3, #0]
    1206:	4618      	mov	r0, r3
    1208:	f006 f964 	bl	74d4 <Dio_ReadChannel>
    120c:	4603      	mov	r3, r0
    120e:	461a      	mov	r2, r3
    1210:	f89d 3006 	ldrb.w	r3, [sp, #6]
    1214:	429a      	cmp	r2, r3
    1216:	d17b      	bne.n	1310 <__BSS_SRAM_SIZE+0x1f0>
                    count_flags[i] = TRUE;  //Starting count.
    1218:	f89d 3007 	ldrb.w	r3, [sp, #7]
    121c:	4a48      	ldr	r2, [pc, #288]	; (1340 <__BSS_SRAM_SIZE+0x220>)
    121e:	2101      	movs	r1, #1
    1220:	54d1      	strb	r1, [r2, r3]
                    count[i] = 0;   //Restarting count.
    1222:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1226:	4a47      	ldr	r2, [pc, #284]	; (1344 <__BSS_SRAM_SIZE+0x224>)
    1228:	2100      	movs	r1, #0
    122a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_DOUBLE_PRESS;
    122e:	4b46      	ldr	r3, [pc, #280]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    1230:	681a      	ldr	r2, [r3, #0]
    1232:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1236:	4413      	add	r3, r2
    1238:	2202      	movs	r2, #2
    123a:	721a      	strb	r2, [r3, #8]
                }
            break;
    123c:	e068      	b.n	1310 <__BSS_SRAM_SIZE+0x1f0>
        
            case HWIOAB_BTN_STATE_DOUBLE_PRESS :
                //Checking count timeout.
                if ( count[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout ) {
    123e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1242:	4a40      	ldr	r2, [pc, #256]	; (1344 <__BSS_SRAM_SIZE+0x224>)
    1244:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1248:	4b3f      	ldr	r3, [pc, #252]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    124a:	681b      	ldr	r3, [r3, #0]
    124c:	6859      	ldr	r1, [r3, #4]
    124e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1252:	00db      	lsls	r3, r3, #3
    1254:	440b      	add	r3, r1
    1256:	685b      	ldr	r3, [r3, #4]
    1258:	429a      	cmp	r2, r3
    125a:	d106      	bne.n	126a <__BSS_SRAM_SIZE+0x14a>
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_HOLD_PRESS;
    125c:	4b3a      	ldr	r3, [pc, #232]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    125e:	681a      	ldr	r2, [r3, #0]
    1260:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1264:	4413      	add	r3, r2
    1266:	2203      	movs	r2, #3
    1268:	721a      	strb	r2, [r3, #8]
                }

                //Checking if the button is released.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !active ) {  //Double click.
    126a:	4b37      	ldr	r3, [pc, #220]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    126c:	681b      	ldr	r3, [r3, #0]
    126e:	685a      	ldr	r2, [r3, #4]
    1270:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1274:	00db      	lsls	r3, r3, #3
    1276:	4413      	add	r3, r2
    1278:	881b      	ldrh	r3, [r3, #0]
    127a:	4618      	mov	r0, r3
    127c:	f006 f92a 	bl	74d4 <Dio_ReadChannel>
    1280:	4603      	mov	r3, r0
    1282:	461a      	mov	r2, r3
    1284:	f89d 3006 	ldrb.w	r3, [sp, #6]
    1288:	f083 0301 	eor.w	r3, r3, #1
    128c:	b2db      	uxtb	r3, r3
    128e:	429a      	cmp	r2, r3
    1290:	d140      	bne.n	1314 <__BSS_SRAM_SIZE+0x1f4>
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_DOUBLE_CLICK;
    1292:	4b2d      	ldr	r3, [pc, #180]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    1294:	681a      	ldr	r2, [r3, #0]
    1296:	f89d 3007 	ldrb.w	r3, [sp, #7]
    129a:	4413      	add	r3, r2
    129c:	2202      	movs	r2, #2
    129e:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
    12a0:	4b29      	ldr	r3, [pc, #164]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    12a2:	681a      	ldr	r2, [r3, #0]
    12a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    12a8:	4413      	add	r3, r2
    12aa:	2200      	movs	r2, #0
    12ac:	721a      	strb	r2, [r3, #8]
                }
            break;
    12ae:	e031      	b.n	1314 <__BSS_SRAM_SIZE+0x1f4>
        
            case HWIOAB_BTN_STATE_HOLD_PRESS :  //Hold click.
                ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_HOLD_CLICK;
    12b0:	4b25      	ldr	r3, [pc, #148]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    12b2:	681a      	ldr	r2, [r3, #0]
    12b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    12b8:	4413      	add	r3, r2
    12ba:	2203      	movs	r2, #3
    12bc:	72da      	strb	r2, [r3, #11]
                //Checking if the button is released.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !active ) {
    12be:	4b22      	ldr	r3, [pc, #136]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    12c0:	681b      	ldr	r3, [r3, #0]
    12c2:	685a      	ldr	r2, [r3, #4]
    12c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    12c8:	00db      	lsls	r3, r3, #3
    12ca:	4413      	add	r3, r2
    12cc:	881b      	ldrh	r3, [r3, #0]
    12ce:	4618      	mov	r0, r3
    12d0:	f006 f900 	bl	74d4 <Dio_ReadChannel>
    12d4:	4603      	mov	r3, r0
    12d6:	461a      	mov	r2, r3
    12d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    12dc:	f083 0301 	eor.w	r3, r3, #1
    12e0:	b2db      	uxtb	r3, r3
    12e2:	429a      	cmp	r2, r3
    12e4:	d118      	bne.n	1318 <__BSS_SRAM_SIZE+0x1f8>
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_RELEASE;
    12e6:	4b18      	ldr	r3, [pc, #96]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    12e8:	681a      	ldr	r2, [r3, #0]
    12ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    12ee:	4413      	add	r3, r2
    12f0:	2204      	movs	r2, #4
    12f2:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
    12f4:	4b14      	ldr	r3, [pc, #80]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    12f6:	681a      	ldr	r2, [r3, #0]
    12f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    12fc:	4413      	add	r3, r2
    12fe:	2200      	movs	r2, #0
    1300:	721a      	strb	r2, [r3, #8]
                }
            break;
    1302:	e009      	b.n	1318 <__BSS_SRAM_SIZE+0x1f8>
        
            default :
            break;
    1304:	bf00      	nop
    1306:	e008      	b.n	131a <__BSS_SRAM_SIZE+0x1fa>
            break;
    1308:	bf00      	nop
    130a:	e006      	b.n	131a <__BSS_SRAM_SIZE+0x1fa>
            break;
    130c:	bf00      	nop
    130e:	e004      	b.n	131a <__BSS_SRAM_SIZE+0x1fa>
            break;
    1310:	bf00      	nop
    1312:	e002      	b.n	131a <__BSS_SRAM_SIZE+0x1fa>
            break;
    1314:	bf00      	nop
    1316:	e000      	b.n	131a <__BSS_SRAM_SIZE+0x1fa>
            break;
    1318:	bf00      	nop
    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) { //Executing state machine for each button.
    131a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    131e:	3301      	adds	r3, #1
    1320:	f88d 3007 	strb.w	r3, [sp, #7]
    1324:	4b08      	ldr	r3, [pc, #32]	; (1348 <__BSS_SRAM_SIZE+0x228>)
    1326:	681b      	ldr	r3, [r3, #0]
    1328:	781b      	ldrb	r3, [r3, #0]
    132a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    132e:	429a      	cmp	r2, r3
    1330:	f4ff aec5 	bcc.w	10be <HwIoAb_Buttons_MainFunction+0x82>
        }
    }
}
    1334:	bf00      	nop
    1336:	bf00      	nop
    1338:	b003      	add	sp, #12
    133a:	f85d fb04 	ldr.w	pc, [sp], #4
    133e:	bf00      	nop
    1340:	1fff978c 	.word	0x1fff978c
    1344:	1fff9790 	.word	0x1fff9790
    1348:	1fff8b58 	.word	0x1fff8b58

0000134c <HwIoAb_Leds_Init>:
/**
 * @brief This function initialices the control structure for the leds.
 * 
 * @param [in] Leds_Config Pointer to configuration array.
 */
void HwIoAb_Leds_Init( const HwIoAb_Leds_Config *Leds_Config ) {
    134c:	b082      	sub	sp, #8
    134e:	9001      	str	r0, [sp, #4]
    //Initializing members.
    LedsControl_Ptr->Leds = HWIOAB_LEDS;
    1350:	4b05      	ldr	r3, [pc, #20]	; (1368 <HwIoAb_Leds_Init+0x1c>)
    1352:	681b      	ldr	r3, [r3, #0]
    1354:	2203      	movs	r2, #3
    1356:	701a      	strb	r2, [r3, #0]
    LedsControl_Ptr->LedsConfig_Ptr = Leds_Config;
    1358:	4b03      	ldr	r3, [pc, #12]	; (1368 <HwIoAb_Leds_Init+0x1c>)
    135a:	681b      	ldr	r3, [r3, #0]
    135c:	9a01      	ldr	r2, [sp, #4]
    135e:	605a      	str	r2, [r3, #4]
}
    1360:	bf00      	nop
    1362:	b002      	add	sp, #8
    1364:	4770      	bx	lr
    1366:	bf00      	nop
    1368:	1fff8b5c 	.word	0x1fff8b5c

0000136c <HwIoAb_Leds_TurnToggle>:
 * 
 * @param Led Led ID.
 * 
 * @note The led ID must be valid.
 */
void HwIoAb_Leds_TurnToggle( uint8 Led ) {
    136c:	b500      	push	{lr}
    136e:	b083      	sub	sp, #12
    1370:	4603      	mov	r3, r0
    1372:	f88d 3007 	strb.w	r3, [sp, #7]
    //Verifying if the ID is valid.
    if ( Led <= LedsControl_Ptr->Leds - 1 ) {   //Valid ID.
    1376:	4b0b      	ldr	r3, [pc, #44]	; (13a4 <HwIoAb_Leds_TurnToggle+0x38>)
    1378:	681b      	ldr	r3, [r3, #0]
    137a:	781b      	ldrb	r3, [r3, #0]
    137c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1380:	429a      	cmp	r2, r3
    1382:	d20a      	bcs.n	139a <HwIoAb_Leds_TurnToggle+0x2e>
        Dio_FlipChannel( LedsControl_Ptr->LedsConfig_Ptr[ Led ].Led );
    1384:	4b07      	ldr	r3, [pc, #28]	; (13a4 <HwIoAb_Leds_TurnToggle+0x38>)
    1386:	681b      	ldr	r3, [r3, #0]
    1388:	685a      	ldr	r2, [r3, #4]
    138a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    138e:	009b      	lsls	r3, r3, #2
    1390:	4413      	add	r3, r2
    1392:	881b      	ldrh	r3, [r3, #0]
    1394:	4618      	mov	r0, r3
    1396:	f006 f8c8 	bl	752a <Dio_FlipChannel>
    }
}
    139a:	bf00      	nop
    139c:	b003      	add	sp, #12
    139e:	f85d fb04 	ldr.w	pc, [sp], #4
    13a2:	bf00      	nop
    13a4:	1fff8b5c 	.word	0x1fff8b5c

000013a8 <HwIoAb_Pots_Init>:
 * 
 * It calibrates both ADC modules and initialices the raw results arrays for the conversions.
 * 
 * @param Pots_Config Pointer to configuration structure instance, in this case is not use. 
 */
void HwIoAb_Pots_Init( const HwIoAb_Pots_Config *Pots_Config ) {
    13a8:	b500      	push	{lr}
    13aa:	b085      	sub	sp, #20
    13ac:	9001      	str	r0, [sp, #4]
    //local data.
    Adc_CalibrationStatusType Calib_Status_ADC0;
    Adc_CalibrationStatusType Calib_Status_ADC1;

    //Calibrating ADC modules.
    Adc_Calibrate( Adc0, &Calib_Status_ADC0 );
    13ae:	ab03      	add	r3, sp, #12
    13b0:	4619      	mov	r1, r3
    13b2:	2000      	movs	r0, #0
    13b4:	f007 fc4c 	bl	8c50 <Adc_Calibrate>
    Adc_Calibrate( Adc1, &Calib_Status_ADC1 );
    13b8:	ab02      	add	r3, sp, #8
    13ba:	4619      	mov	r1, r3
    13bc:	2001      	movs	r0, #1
    13be:	f007 fc47 	bl	8c50 <Adc_Calibrate>

    //Initializing raw results array.
    Adc_SetupResultBuffer( Adc0Group_0, HWIOAB_POTS_MAIN_RAW_RESULTS );
    13c2:	4b0b      	ldr	r3, [pc, #44]	; (13f0 <HwIoAb_Pots_Init+0x48>)
    13c4:	681b      	ldr	r3, [r3, #0]
    13c6:	3302      	adds	r3, #2
    13c8:	4619      	mov	r1, r3
    13ca:	2000      	movs	r0, #0
    13cc:	f007 f9e2 	bl	8794 <Adc_SetupResultBuffer>
    Adc_SetupResultBuffer( Adc1Group_0, HWIOAB_POTS_ALTER_RAW_RESULTS );
    13d0:	4b07      	ldr	r3, [pc, #28]	; (13f0 <HwIoAb_Pots_Init+0x48>)
    13d2:	681b      	ldr	r3, [r3, #0]
    13d4:	3306      	adds	r3, #6
    13d6:	4619      	mov	r1, r3
    13d8:	2001      	movs	r0, #1
    13da:	f007 f9db 	bl	8794 <Adc_SetupResultBuffer>

    PotsControl_Ptr->Pots = HWIOAB_POTS;
    13de:	4b04      	ldr	r3, [pc, #16]	; (13f0 <HwIoAb_Pots_Init+0x48>)
    13e0:	681b      	ldr	r3, [r3, #0]
    13e2:	2202      	movs	r2, #2
    13e4:	701a      	strb	r2, [r3, #0]
}
    13e6:	bf00      	nop
    13e8:	b005      	add	sp, #20
    13ea:	f85d fb04 	ldr.w	pc, [sp], #4
    13ee:	bf00      	nop
    13f0:	1fff8b60 	.word	0x1fff8b60

000013f4 <HwIoAb_Pots_GetValue>:
 * @param Pots Pointer to array of results in Ohms.
 * 
 * @note The group uses hardware average of 4 samples. 
 * @note The total conversion time is 117.42us
 */
void HwIoAb_Pots_GetValue( uint16 *Pots ) {
    13f4:	b500      	push	{lr}
    13f6:	b085      	sub	sp, #20
    13f8:	9001      	str	r0, [sp, #4]
    //local data.
    uint8 i = 0;
    13fa:	2300      	movs	r3, #0
    13fc:	f88d 300f 	strb.w	r3, [sp, #15]

    Adc_StartGroupConversion( Adc0Group_0 );    //Triggering group conversion.
    1400:	2000      	movs	r0, #0
    1402:	f007 fa61 	bl	88c8 <Adc_StartGroupConversion>
    while( Adc_GetGroupStatus( Adc0Group_0 ) == ADC_BUSY ); //Wating until group conversion is done.
    1406:	bf00      	nop
    1408:	2000      	movs	r0, #0
    140a:	f007 fb3a 	bl	8a82 <Adc_GetGroupStatus>
    140e:	4603      	mov	r3, r0
    1410:	2b01      	cmp	r3, #1
    1412:	d0f9      	beq.n	1408 <HwIoAb_Pots_GetValue+0x14>
    Adc_ReadGroup( Adc0Group_0, HWIOAB_POTS_MAIN_RAW_RESULTS ); //Reading group conversion values and storing them to the raw result array.
    1414:	4b25      	ldr	r3, [pc, #148]	; (14ac <HwIoAb_Pots_GetValue+0xb8>)
    1416:	681b      	ldr	r3, [r3, #0]
    1418:	3302      	adds	r3, #2
    141a:	4619      	mov	r1, r3
    141c:	2000      	movs	r0, #0
    141e:	f007 faeb 	bl	89f8 <Adc_ReadGroup>

    //Calculating resistance of each Pot.
    for ( i = 0; i < PotsControl_Ptr->Pots; i++ ) {
    1422:	2300      	movs	r3, #0
    1424:	f88d 300f 	strb.w	r3, [sp, #15]
    1428:	e034      	b.n	1494 <HwIoAb_Pots_GetValue+0xa0>
        Pots[i] = HWIOAB_POTS_TOTAL_RESISTANCE * 
        ( ( float ) PotsControl_Ptr->Raw_results_main[i] / HWIOAB_MAX_ADC_VALUE_12_B );
    142a:	4b20      	ldr	r3, [pc, #128]	; (14ac <HwIoAb_Pots_GetValue+0xb8>)
    142c:	681a      	ldr	r2, [r3, #0]
    142e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1432:	005b      	lsls	r3, r3, #1
    1434:	4413      	add	r3, r2
    1436:	885b      	ldrh	r3, [r3, #2]
    1438:	ee07 3a90 	vmov	s15, r3
    143c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    1440:	eddf 6a1b 	vldr	s13, [pc, #108]	; 14b0 <HwIoAb_Pots_GetValue+0xbc>
    1444:	eec7 7a26 	vdiv.f32	s15, s14, s13
        Pots[i] = HWIOAB_POTS_TOTAL_RESISTANCE * 
    1448:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 14b4 <HwIoAb_Pots_GetValue+0xc0>
    144c:	ee67 7a87 	vmul.f32	s15, s15, s14
    1450:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1454:	005b      	lsls	r3, r3, #1
    1456:	9a01      	ldr	r2, [sp, #4]
    1458:	4413      	add	r3, r2
    145a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    145e:	ee17 2a90 	vmov	r2, s15
    1462:	b292      	uxth	r2, r2
    1464:	801a      	strh	r2, [r3, #0]

        if ( Pots[i] > HWIOAB_POTS_TOTAL_RESISTANCE ) { //Saturating value if needed.
    1466:	f89d 300f 	ldrb.w	r3, [sp, #15]
    146a:	005b      	lsls	r3, r3, #1
    146c:	9a01      	ldr	r2, [sp, #4]
    146e:	4413      	add	r3, r2
    1470:	881b      	ldrh	r3, [r3, #0]
    1472:	f242 7210 	movw	r2, #10000	; 0x2710
    1476:	4293      	cmp	r3, r2
    1478:	d907      	bls.n	148a <HwIoAb_Pots_GetValue+0x96>
            Pots[i] = HWIOAB_POTS_TOTAL_RESISTANCE;
    147a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    147e:	005b      	lsls	r3, r3, #1
    1480:	9a01      	ldr	r2, [sp, #4]
    1482:	4413      	add	r3, r2
    1484:	f242 7210 	movw	r2, #10000	; 0x2710
    1488:	801a      	strh	r2, [r3, #0]
    for ( i = 0; i < PotsControl_Ptr->Pots; i++ ) {
    148a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    148e:	3301      	adds	r3, #1
    1490:	f88d 300f 	strb.w	r3, [sp, #15]
    1494:	4b05      	ldr	r3, [pc, #20]	; (14ac <HwIoAb_Pots_GetValue+0xb8>)
    1496:	681b      	ldr	r3, [r3, #0]
    1498:	781b      	ldrb	r3, [r3, #0]
    149a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    149e:	429a      	cmp	r2, r3
    14a0:	d3c3      	bcc.n	142a <HwIoAb_Pots_GetValue+0x36>
        }
    }
}
    14a2:	bf00      	nop
    14a4:	bf00      	nop
    14a6:	b005      	add	sp, #20
    14a8:	f85d fb04 	ldr.w	pc, [sp], #4
    14ac:	1fff8b60 	.word	0x1fff8b60
    14b0:	45310000 	.word	0x45310000
    14b4:	461c4000 	.word	0x461c4000

000014b8 <HwIoAb_Pots_GetAltValue>:
 * @param AltPots Pointer to array of results in Ohms.
 * 
 * @note The group uses hardware average of 4 samples.
 * @note The total conversion time is 117.42us
 */
void HwIoAb_Pots_GetAltValue( uint16 *AltPots ) {
    14b8:	b500      	push	{lr}
    14ba:	b085      	sub	sp, #20
    14bc:	9001      	str	r0, [sp, #4]
    //local data.
    uint8 i = 0;
    14be:	2300      	movs	r3, #0
    14c0:	f88d 300f 	strb.w	r3, [sp, #15]

    Adc_StartGroupConversion( Adc1Group_0 );    //Triggering group conversion.
    14c4:	2001      	movs	r0, #1
    14c6:	f007 f9ff 	bl	88c8 <Adc_StartGroupConversion>
    while( Adc_GetGroupStatus( Adc1Group_0 ) == ADC_BUSY ); //Wating until group conversion is done.
    14ca:	bf00      	nop
    14cc:	2001      	movs	r0, #1
    14ce:	f007 fad8 	bl	8a82 <Adc_GetGroupStatus>
    14d2:	4603      	mov	r3, r0
    14d4:	2b01      	cmp	r3, #1
    14d6:	d0f9      	beq.n	14cc <HwIoAb_Pots_GetAltValue+0x14>
    Adc_ReadGroup( Adc1Group_0, HWIOAB_POTS_ALTER_RAW_RESULTS ); //Reading group conversion values and storing them to the raw result array.
    14d8:	4b25      	ldr	r3, [pc, #148]	; (1570 <HwIoAb_Pots_GetAltValue+0xb8>)
    14da:	681b      	ldr	r3, [r3, #0]
    14dc:	3306      	adds	r3, #6
    14de:	4619      	mov	r1, r3
    14e0:	2001      	movs	r0, #1
    14e2:	f007 fa89 	bl	89f8 <Adc_ReadGroup>

    //Calculating resistance of each Pot.
    for ( i = 0; i < PotsControl_Ptr->Pots; i++ ) {
    14e6:	2300      	movs	r3, #0
    14e8:	f88d 300f 	strb.w	r3, [sp, #15]
    14ec:	e034      	b.n	1558 <HwIoAb_Pots_GetAltValue+0xa0>
        AltPots[i] = HWIOAB_POTS_TOTAL_RESISTANCE *
        ( ( float ) PotsControl_Ptr->Raw_results_alter[i] / HWIOAB_MAX_ADC_VALUE_12_B );
    14ee:	4b20      	ldr	r3, [pc, #128]	; (1570 <HwIoAb_Pots_GetAltValue+0xb8>)
    14f0:	681a      	ldr	r2, [r3, #0]
    14f2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    14f6:	005b      	lsls	r3, r3, #1
    14f8:	4413      	add	r3, r2
    14fa:	88db      	ldrh	r3, [r3, #6]
    14fc:	ee07 3a90 	vmov	s15, r3
    1500:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    1504:	eddf 6a1b 	vldr	s13, [pc, #108]	; 1574 <HwIoAb_Pots_GetAltValue+0xbc>
    1508:	eec7 7a26 	vdiv.f32	s15, s14, s13
        AltPots[i] = HWIOAB_POTS_TOTAL_RESISTANCE *
    150c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 1578 <HwIoAb_Pots_GetAltValue+0xc0>
    1510:	ee67 7a87 	vmul.f32	s15, s15, s14
    1514:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1518:	005b      	lsls	r3, r3, #1
    151a:	9a01      	ldr	r2, [sp, #4]
    151c:	4413      	add	r3, r2
    151e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    1522:	ee17 2a90 	vmov	r2, s15
    1526:	b292      	uxth	r2, r2
    1528:	801a      	strh	r2, [r3, #0]

        if ( AltPots[i] > HWIOAB_POTS_TOTAL_RESISTANCE ) { //Saturating value if needed.
    152a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    152e:	005b      	lsls	r3, r3, #1
    1530:	9a01      	ldr	r2, [sp, #4]
    1532:	4413      	add	r3, r2
    1534:	881b      	ldrh	r3, [r3, #0]
    1536:	f242 7210 	movw	r2, #10000	; 0x2710
    153a:	4293      	cmp	r3, r2
    153c:	d907      	bls.n	154e <HwIoAb_Pots_GetAltValue+0x96>
            AltPots[i] = HWIOAB_POTS_TOTAL_RESISTANCE;
    153e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1542:	005b      	lsls	r3, r3, #1
    1544:	9a01      	ldr	r2, [sp, #4]
    1546:	4413      	add	r3, r2
    1548:	f242 7210 	movw	r2, #10000	; 0x2710
    154c:	801a      	strh	r2, [r3, #0]
    for ( i = 0; i < PotsControl_Ptr->Pots; i++ ) {
    154e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1552:	3301      	adds	r3, #1
    1554:	f88d 300f 	strb.w	r3, [sp, #15]
    1558:	4b05      	ldr	r3, [pc, #20]	; (1570 <HwIoAb_Pots_GetAltValue+0xb8>)
    155a:	681b      	ldr	r3, [r3, #0]
    155c:	781b      	ldrb	r3, [r3, #0]
    155e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1562:	429a      	cmp	r2, r3
    1564:	d3c3      	bcc.n	14ee <HwIoAb_Pots_GetAltValue+0x36>
        }
    }
    1566:	bf00      	nop
    1568:	bf00      	nop
    156a:	b005      	add	sp, #20
    156c:	f85d fb04 	ldr.w	pc, [sp], #4
    1570:	1fff8b60 	.word	0x1fff8b60
    1574:	45310000 	.word	0x45310000
    1578:	461c4000 	.word	0x461c4000

0000157c <HwIoAb_Buzzer_Init>:
 * It does the configurations neccesary for using the buzzer.
 * In this case no configurations are needeed.
 * 
 * @param Buzzer_Config Pointer to config structure instance, in this case is not use.
 */
void HwIoAb_Buzzer_Init( const HwIoAb_Buzzer_Config *Buzzer_Config ) {
    157c:	b082      	sub	sp, #8
    157e:	9001      	str	r0, [sp, #4]

}
    1580:	bf00      	nop
    1582:	b002      	add	sp, #8
    1584:	4770      	bx	lr

00001586 <HwIoAb_Buzzer_Beep>:
/**
 * @brief This function beeps the buzzer according to the tone given.
 * 
 * @param Tone Tone of interest.
 */
void HwIoAb_Buzzer_Beep( uint8 Tone ) {
    1586:	b500      	push	{lr}
    1588:	b083      	sub	sp, #12
    158a:	4603      	mov	r3, r0
    158c:	f88d 3007 	strb.w	r3, [sp, #7]
    switch ( Tone ) {
    1590:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1594:	2b02      	cmp	r3, #2
    1596:	d016      	beq.n	15c6 <HwIoAb_Buzzer_Beep+0x40>
    1598:	2b02      	cmp	r3, #2
    159a:	dc1c      	bgt.n	15d6 <HwIoAb_Buzzer_Beep+0x50>
    159c:	2b00      	cmp	r3, #0
    159e:	d002      	beq.n	15a6 <HwIoAb_Buzzer_Beep+0x20>
    15a0:	2b01      	cmp	r3, #1
    15a2:	d008      	beq.n	15b6 <HwIoAb_Buzzer_Beep+0x30>
        break;
        case HWIOAB_BUZZER_TONE_3:  //Setting frequency to 5Khz and 25% duty cycle.
            Pwm_SetPeriodAndDuty( HWIOAB_BUZZER_CH, HWIOAB_BUZZER_PERIOD_3, HWIOAB_BUZZER_25_DUTY_CYCLE );
        break;
        default:    //Invalid tone.
        break;
    15a4:	e017      	b.n	15d6 <HwIoAb_Buzzer_Beep+0x50>
            Pwm_SetPeriodAndDuty( HWIOAB_BUZZER_CH, HWIOAB_BUZZER_PERIOD_1, HWIOAB_BUZZER_25_DUTY_CYCLE );
    15a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    15aa:	f241 41d5 	movw	r1, #5333	; 0x14d5
    15ae:	2000      	movs	r0, #0
    15b0:	f00d fb3c 	bl	ec2c <Pwm_SetPeriodAndDuty>
        break;
    15b4:	e010      	b.n	15d8 <HwIoAb_Buzzer_Beep+0x52>
            Pwm_SetPeriodAndDuty( HWIOAB_BUZZER_CH, HWIOAB_BUZZER_PERIOD_2, HWIOAB_BUZZER_25_DUTY_CYCLE );
    15b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    15ba:	f640 216a 	movw	r1, #2666	; 0xa6a
    15be:	2000      	movs	r0, #0
    15c0:	f00d fb34 	bl	ec2c <Pwm_SetPeriodAndDuty>
        break;
    15c4:	e008      	b.n	15d8 <HwIoAb_Buzzer_Beep+0x52>
            Pwm_SetPeriodAndDuty( HWIOAB_BUZZER_CH, HWIOAB_BUZZER_PERIOD_3, HWIOAB_BUZZER_25_DUTY_CYCLE );
    15c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    15ca:	f44f 61c8 	mov.w	r1, #1600	; 0x640
    15ce:	2000      	movs	r0, #0
    15d0:	f00d fb2c 	bl	ec2c <Pwm_SetPeriodAndDuty>
        break;
    15d4:	e000      	b.n	15d8 <HwIoAb_Buzzer_Beep+0x52>
        break;
    15d6:	bf00      	nop
    }
}
    15d8:	bf00      	nop
    15da:	b003      	add	sp, #12
    15dc:	f85d fb04 	ldr.w	pc, [sp], #4

000015e0 <HwIoAb_Buzzer_Stop>:

/**
 * @brief This function stops the beep of the buzzer.
 * 
 */
void HwIoAb_Buzzer_Stop( void ) {
    15e0:	b508      	push	{r3, lr}
    Pwm_SetOutputToIdle( HWIOAB_BUZZER_CH );    //Stopping buzzer.
    15e2:	2000      	movs	r0, #0
    15e4:	f00d fb58 	bl	ec98 <Pwm_SetOutputToIdle>
}
    15e8:	bf00      	nop
    15ea:	bd08      	pop	{r3, pc}

000015ec <IoHwAb_Init0>:
/**
 * @brief This function initialices all the IO hardware abstractions.
 * 
 * @param ConfigPtr Pointer to configuration structure instance, in this case is not used.
 */
void IoHwAb_Init0( const IoHwAb0_ConfigType* ConfigPtr ) {
    15ec:	b500      	push	{lr}
    15ee:	b083      	sub	sp, #12
    15f0:	9001      	str	r0, [sp, #4]
    HwIoAb_Buttons_Init( ButtonsCfg );  //Buttons init.
    15f2:	4808      	ldr	r0, [pc, #32]	; (1614 <IoHwAb_Init0+0x28>)
    15f4:	f7ff fcc6 	bl	f84 <HwIoAb_Buttons_Init>
    HwIoAb_Leds_Init( LedsCfg );    //Leds init.
    15f8:	4807      	ldr	r0, [pc, #28]	; (1618 <IoHwAb_Init0+0x2c>)
    15fa:	f7ff fea7 	bl	134c <HwIoAb_Leds_Init>
    HwIoAb_Pots_Init( NULL_PTR );   //Pots init.
    15fe:	2000      	movs	r0, #0
    1600:	f7ff fed2 	bl	13a8 <HwIoAb_Pots_Init>
    HwIoAb_Buzzer_Init( NULL_PTR ); //Buzzer init.
    1604:	2000      	movs	r0, #0
    1606:	f7ff ffb9 	bl	157c <HwIoAb_Buzzer_Init>
}
    160a:	bf00      	nop
    160c:	b003      	add	sp, #12
    160e:	f85d fb04 	ldr.w	pc, [sp], #4
    1612:	bf00      	nop
    1614:	000164f0 	.word	0x000164f0
    1618:	00016508 	.word	0x00016508

0000161c <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
    161c:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
    161e:	2300      	movs	r3, #0
    1620:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
    1622:	2300      	movs	r3, #0
    1624:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
    1626:	2300      	movs	r3, #0
    1628:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
    162a:	2300      	movs	r3, #0
    162c:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
    162e:	4b44      	ldr	r3, [pc, #272]	; (1740 <init_data_bss+0x124>)
    1630:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
    1632:	4b44      	ldr	r3, [pc, #272]	; (1744 <init_data_bss+0x128>)
    1634:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
    1636:	9b05      	ldr	r3, [sp, #20]
    1638:	681b      	ldr	r3, [r3, #0]
    163a:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
    163c:	9b05      	ldr	r3, [sp, #20]
    163e:	3304      	adds	r3, #4
    1640:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
    1642:	9b05      	ldr	r3, [sp, #20]
    1644:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
    1646:	2300      	movs	r3, #0
    1648:	9309      	str	r3, [sp, #36]	; 0x24
    164a:	e03d      	b.n	16c8 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
    164c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    164e:	4613      	mov	r3, r2
    1650:	005b      	lsls	r3, r3, #1
    1652:	4413      	add	r3, r2
    1654:	009b      	lsls	r3, r3, #2
    1656:	461a      	mov	r2, r3
    1658:	9b03      	ldr	r3, [sp, #12]
    165a:	4413      	add	r3, r2
    165c:	685b      	ldr	r3, [r3, #4]
    165e:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
    1660:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1662:	4613      	mov	r3, r2
    1664:	005b      	lsls	r3, r3, #1
    1666:	4413      	add	r3, r2
    1668:	009b      	lsls	r3, r3, #2
    166a:	461a      	mov	r2, r3
    166c:	9b03      	ldr	r3, [sp, #12]
    166e:	4413      	add	r3, r2
    1670:	681b      	ldr	r3, [r3, #0]
    1672:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
    1674:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1676:	4613      	mov	r3, r2
    1678:	005b      	lsls	r3, r3, #1
    167a:	4413      	add	r3, r2
    167c:	009b      	lsls	r3, r3, #2
    167e:	461a      	mov	r2, r3
    1680:	9b03      	ldr	r3, [sp, #12]
    1682:	4413      	add	r3, r2
    1684:	689b      	ldr	r3, [r3, #8]
    1686:	4619      	mov	r1, r3
    1688:	9a09      	ldr	r2, [sp, #36]	; 0x24
    168a:	4613      	mov	r3, r2
    168c:	005b      	lsls	r3, r3, #1
    168e:	4413      	add	r3, r2
    1690:	009b      	lsls	r3, r3, #2
    1692:	461a      	mov	r2, r3
    1694:	9b03      	ldr	r3, [sp, #12]
    1696:	4413      	add	r3, r2
    1698:	685b      	ldr	r3, [r3, #4]
    169a:	1acb      	subs	r3, r1, r3
    169c:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    169e:	2300      	movs	r3, #0
    16a0:	9308      	str	r3, [sp, #32]
    16a2:	e00a      	b.n	16ba <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
    16a4:	9a00      	ldr	r2, [sp, #0]
    16a6:	9b08      	ldr	r3, [sp, #32]
    16a8:	441a      	add	r2, r3
    16aa:	9901      	ldr	r1, [sp, #4]
    16ac:	9b08      	ldr	r3, [sp, #32]
    16ae:	440b      	add	r3, r1
    16b0:	7812      	ldrb	r2, [r2, #0]
    16b2:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    16b4:	9b08      	ldr	r3, [sp, #32]
    16b6:	3301      	adds	r3, #1
    16b8:	9308      	str	r3, [sp, #32]
    16ba:	9a08      	ldr	r2, [sp, #32]
    16bc:	9b06      	ldr	r3, [sp, #24]
    16be:	429a      	cmp	r2, r3
    16c0:	d3f0      	bcc.n	16a4 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
    16c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    16c4:	3301      	adds	r3, #1
    16c6:	9309      	str	r3, [sp, #36]	; 0x24
    16c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    16ca:	9b07      	ldr	r3, [sp, #28]
    16cc:	429a      	cmp	r2, r3
    16ce:	d3bd      	bcc.n	164c <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
    16d0:	9b04      	ldr	r3, [sp, #16]
    16d2:	681b      	ldr	r3, [r3, #0]
    16d4:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
    16d6:	9b04      	ldr	r3, [sp, #16]
    16d8:	3304      	adds	r3, #4
    16da:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
    16dc:	9b04      	ldr	r3, [sp, #16]
    16de:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
    16e0:	2300      	movs	r3, #0
    16e2:	9309      	str	r3, [sp, #36]	; 0x24
    16e4:	e024      	b.n	1730 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
    16e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    16e8:	00db      	lsls	r3, r3, #3
    16ea:	9a02      	ldr	r2, [sp, #8]
    16ec:	4413      	add	r3, r2
    16ee:	681b      	ldr	r3, [r3, #0]
    16f0:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
    16f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    16f4:	00db      	lsls	r3, r3, #3
    16f6:	9a02      	ldr	r2, [sp, #8]
    16f8:	4413      	add	r3, r2
    16fa:	685b      	ldr	r3, [r3, #4]
    16fc:	4619      	mov	r1, r3
    16fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1700:	00db      	lsls	r3, r3, #3
    1702:	9a02      	ldr	r2, [sp, #8]
    1704:	4413      	add	r3, r2
    1706:	681b      	ldr	r3, [r3, #0]
    1708:	1acb      	subs	r3, r1, r3
    170a:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    170c:	2300      	movs	r3, #0
    170e:	9308      	str	r3, [sp, #32]
    1710:	e007      	b.n	1722 <init_data_bss+0x106>
        {
            ram[j] = 0U;
    1712:	9a01      	ldr	r2, [sp, #4]
    1714:	9b08      	ldr	r3, [sp, #32]
    1716:	4413      	add	r3, r2
    1718:	2200      	movs	r2, #0
    171a:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    171c:	9b08      	ldr	r3, [sp, #32]
    171e:	3301      	adds	r3, #1
    1720:	9308      	str	r3, [sp, #32]
    1722:	9a08      	ldr	r2, [sp, #32]
    1724:	9b06      	ldr	r3, [sp, #24]
    1726:	429a      	cmp	r2, r3
    1728:	d3f3      	bcc.n	1712 <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
    172a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    172c:	3301      	adds	r3, #1
    172e:	9309      	str	r3, [sp, #36]	; 0x24
    1730:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1732:	9b07      	ldr	r3, [sp, #28]
    1734:	429a      	cmp	r2, r3
    1736:	d3d6      	bcc.n	16e6 <init_data_bss+0xca>
        }
    }
}
    1738:	bf00      	nop
    173a:	bf00      	nop
    173c:	b00a      	add	sp, #40	; 0x28
    173e:	4770      	bx	lr
    1740:	00017020 	.word	0x00017020
    1744:	0001703c 	.word	0x0001703c

00001748 <sys_m4_cache_init>:
{
    1748:	b084      	sub	sp, #16
    174a:	4603      	mov	r3, r0
    174c:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
    1750:	2300      	movs	r3, #0
    1752:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
    1756:	f89d 3007 	ldrb.w	r3, [sp, #7]
    175a:	2b00      	cmp	r3, #0
    175c:	d118      	bne.n	1790 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
    175e:	4b10      	ldr	r3, [pc, #64]	; (17a0 <sys_m4_cache_init+0x58>)
    1760:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
    1764:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
    1766:	4b0e      	ldr	r3, [pc, #56]	; (17a0 <sys_m4_cache_init+0x58>)
    1768:	681b      	ldr	r3, [r3, #0]
    176a:	4a0d      	ldr	r2, [pc, #52]	; (17a0 <sys_m4_cache_init+0x58>)
    176c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1770:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
    1772:	bf00      	nop
    1774:	4b0a      	ldr	r3, [pc, #40]	; (17a0 <sys_m4_cache_init+0x58>)
    1776:	681b      	ldr	r3, [r3, #0]
    1778:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    177c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    1780:	d0f8      	beq.n	1774 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
    1782:	4b07      	ldr	r3, [pc, #28]	; (17a0 <sys_m4_cache_init+0x58>)
    1784:	681b      	ldr	r3, [r3, #0]
    1786:	4a06      	ldr	r2, [pc, #24]	; (17a0 <sys_m4_cache_init+0x58>)
    1788:	f043 0301 	orr.w	r3, r3, #1
    178c:	6013      	str	r3, [r2, #0]
    178e:	e002      	b.n	1796 <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
    1790:	2301      	movs	r3, #1
    1792:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
    1796:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    179a:	4618      	mov	r0, r3
    179c:	b004      	add	sp, #16
    179e:	4770      	bx	lr
    17a0:	e0082000 	.word	0xe0082000

000017a4 <startup_go_to_user_mode>:
}
    17a4:	bf00      	nop
    17a6:	4770      	bx	lr

000017a8 <Sys_GetCoreID>:
    return 0U;
    17a8:	2300      	movs	r3, #0
}
    17aa:	4618      	mov	r0, r3
    17ac:	4770      	bx	lr

000017ae <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
    17ae:	e7fe      	b.n	17ae <HardFault_Handler>

000017b0 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
    17b0:	e7fe      	b.n	17b0 <MemManage_Handler>

000017b2 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
    17b2:	e7fe      	b.n	17b2 <BusFault_Handler>

000017b4 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
    17b4:	e7fe      	b.n	17b4 <UsageFault_Handler>

000017b6 <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
    17b6:	e7fe      	b.n	17b6 <SVC_Handler>

000017b8 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
    17b8:	e7fe      	b.n	17b8 <DebugMon_Handler>

000017ba <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
    17ba:	e7fe      	b.n	17ba <PendSV_Handler>

000017bc <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
    17bc:	e7fe      	b.n	17bc <SysTick_Handler>

000017be <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
    17be:	e7fe      	b.n	17be <undefined_handler>

000017c0 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
    17c0:	b500      	push	{lr}
    17c2:	b083      	sub	sp, #12
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
    17c4:	4b26      	ldr	r3, [pc, #152]	; (1860 <_DoInit+0xa0>)
    17c6:	9300      	str	r3, [sp, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
    17c8:	22a8      	movs	r2, #168	; 0xa8
    17ca:	2100      	movs	r1, #0
    17cc:	9800      	ldr	r0, [sp, #0]
    17ce:	f000 fd47 	bl	2260 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    17d2:	9b00      	ldr	r3, [sp, #0]
    17d4:	2203      	movs	r2, #3
    17d6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    17d8:	9b00      	ldr	r3, [sp, #0]
    17da:	2203      	movs	r2, #3
    17dc:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    17de:	9b00      	ldr	r3, [sp, #0]
    17e0:	4a20      	ldr	r2, [pc, #128]	; (1864 <_DoInit+0xa4>)
    17e2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    17e4:	9b00      	ldr	r3, [sp, #0]
    17e6:	4a20      	ldr	r2, [pc, #128]	; (1868 <_DoInit+0xa8>)
    17e8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    17ea:	9b00      	ldr	r3, [sp, #0]
    17ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
    17f0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
    17f2:	9b00      	ldr	r3, [sp, #0]
    17f4:	2200      	movs	r2, #0
    17f6:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    17f8:	9b00      	ldr	r3, [sp, #0]
    17fa:	2200      	movs	r2, #0
    17fc:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    17fe:	9b00      	ldr	r3, [sp, #0]
    1800:	2200      	movs	r2, #0
    1802:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    1804:	9b00      	ldr	r3, [sp, #0]
    1806:	4a17      	ldr	r2, [pc, #92]	; (1864 <_DoInit+0xa4>)
    1808:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    180a:	9b00      	ldr	r3, [sp, #0]
    180c:	4a17      	ldr	r2, [pc, #92]	; (186c <_DoInit+0xac>)
    180e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    1810:	9b00      	ldr	r3, [sp, #0]
    1812:	2210      	movs	r2, #16
    1814:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    1816:	9b00      	ldr	r3, [sp, #0]
    1818:	2200      	movs	r2, #0
    181a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    181c:	9b00      	ldr	r3, [sp, #0]
    181e:	2200      	movs	r2, #0
    1820:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    1822:	9b00      	ldr	r3, [sp, #0]
    1824:	2200      	movs	r2, #0
    1826:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
    1828:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
    182c:	2300      	movs	r3, #0
    182e:	9301      	str	r3, [sp, #4]
    1830:	e00c      	b.n	184c <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
    1832:	9b01      	ldr	r3, [sp, #4]
    1834:	f1c3 030f 	rsb	r3, r3, #15
    1838:	4a0d      	ldr	r2, [pc, #52]	; (1870 <_DoInit+0xb0>)
    183a:	5cd1      	ldrb	r1, [r2, r3]
    183c:	9a00      	ldr	r2, [sp, #0]
    183e:	9b01      	ldr	r3, [sp, #4]
    1840:	4413      	add	r3, r2
    1842:	460a      	mov	r2, r1
    1844:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
    1846:	9b01      	ldr	r3, [sp, #4]
    1848:	3301      	adds	r3, #1
    184a:	9301      	str	r3, [sp, #4]
    184c:	9b01      	ldr	r3, [sp, #4]
    184e:	2b0f      	cmp	r3, #15
    1850:	d9ef      	bls.n	1832 <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
    1852:	f3bf 8f5f 	dmb	sy
}
    1856:	bf00      	nop
    1858:	b003      	add	sp, #12
    185a:	f85d fb04 	ldr.w	pc, [sp], #4
    185e:	bf00      	nop
    1860:	1fff97cc 	.word	0x1fff97cc
    1864:	00015cc0 	.word	0x00015cc0
    1868:	1fff9874 	.word	0x1fff9874
    186c:	1fff9c74 	.word	0x1fff9c74
    1870:	00016ffc 	.word	0x00016ffc

00001874 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    1874:	b500      	push	{lr}
    1876:	b08b      	sub	sp, #44	; 0x2c
    1878:	9003      	str	r0, [sp, #12]
    187a:	9102      	str	r1, [sp, #8]
    187c:	9201      	str	r2, [sp, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
    187e:	2300      	movs	r3, #0
    1880:	9308      	str	r3, [sp, #32]
  WrOff = pRing->WrOff;
    1882:	9b03      	ldr	r3, [sp, #12]
    1884:	68db      	ldr	r3, [r3, #12]
    1886:	9307      	str	r3, [sp, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    1888:	9b03      	ldr	r3, [sp, #12]
    188a:	691b      	ldr	r3, [r3, #16]
    188c:	9306      	str	r3, [sp, #24]
    if (RdOff > WrOff) {
    188e:	9a06      	ldr	r2, [sp, #24]
    1890:	9b07      	ldr	r3, [sp, #28]
    1892:	429a      	cmp	r2, r3
    1894:	d905      	bls.n	18a2 <_WriteBlocking+0x2e>
      NumBytesToWrite = RdOff - WrOff - 1u;
    1896:	9a06      	ldr	r2, [sp, #24]
    1898:	9b07      	ldr	r3, [sp, #28]
    189a:	1ad3      	subs	r3, r2, r3
    189c:	3b01      	subs	r3, #1
    189e:	9309      	str	r3, [sp, #36]	; 0x24
    18a0:	e007      	b.n	18b2 <_WriteBlocking+0x3e>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    18a2:	9b03      	ldr	r3, [sp, #12]
    18a4:	689a      	ldr	r2, [r3, #8]
    18a6:	9906      	ldr	r1, [sp, #24]
    18a8:	9b07      	ldr	r3, [sp, #28]
    18aa:	1acb      	subs	r3, r1, r3
    18ac:	4413      	add	r3, r2
    18ae:	3b01      	subs	r3, #1
    18b0:	9309      	str	r3, [sp, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    18b2:	9b03      	ldr	r3, [sp, #12]
    18b4:	689a      	ldr	r2, [r3, #8]
    18b6:	9b07      	ldr	r3, [sp, #28]
    18b8:	1ad3      	subs	r3, r2, r3
    18ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
    18bc:	4293      	cmp	r3, r2
    18be:	bf28      	it	cs
    18c0:	4613      	movcs	r3, r2
    18c2:	9309      	str	r3, [sp, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    18c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    18c6:	9b01      	ldr	r3, [sp, #4]
    18c8:	4293      	cmp	r3, r2
    18ca:	bf28      	it	cs
    18cc:	4613      	movcs	r3, r2
    18ce:	9309      	str	r3, [sp, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    18d0:	9b03      	ldr	r3, [sp, #12]
    18d2:	685a      	ldr	r2, [r3, #4]
    18d4:	9b07      	ldr	r3, [sp, #28]
    18d6:	4413      	add	r3, r2
    18d8:	9305      	str	r3, [sp, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    18da:	9a09      	ldr	r2, [sp, #36]	; 0x24
    18dc:	9902      	ldr	r1, [sp, #8]
    18de:	9805      	ldr	r0, [sp, #20]
    18e0:	f000 fcb0 	bl	2244 <memcpy>
    NumBytesWritten += NumBytesToWrite;
    18e4:	9a08      	ldr	r2, [sp, #32]
    18e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    18e8:	4413      	add	r3, r2
    18ea:	9308      	str	r3, [sp, #32]
    pBuffer         += NumBytesToWrite;
    18ec:	9a02      	ldr	r2, [sp, #8]
    18ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    18f0:	4413      	add	r3, r2
    18f2:	9302      	str	r3, [sp, #8]
    NumBytes        -= NumBytesToWrite;
    18f4:	9a01      	ldr	r2, [sp, #4]
    18f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    18f8:	1ad3      	subs	r3, r2, r3
    18fa:	9301      	str	r3, [sp, #4]
    WrOff           += NumBytesToWrite;
    18fc:	9a07      	ldr	r2, [sp, #28]
    18fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1900:	4413      	add	r3, r2
    1902:	9307      	str	r3, [sp, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
    1904:	9b03      	ldr	r3, [sp, #12]
    1906:	689b      	ldr	r3, [r3, #8]
    1908:	9a07      	ldr	r2, [sp, #28]
    190a:	429a      	cmp	r2, r3
    190c:	d101      	bne.n	1912 <_WriteBlocking+0x9e>
      WrOff = 0u;
    190e:	2300      	movs	r3, #0
    1910:	9307      	str	r3, [sp, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    1912:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
    1916:	9b03      	ldr	r3, [sp, #12]
    1918:	9a07      	ldr	r2, [sp, #28]
    191a:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
    191c:	9b01      	ldr	r3, [sp, #4]
    191e:	2b00      	cmp	r3, #0
    1920:	d1b2      	bne.n	1888 <_WriteBlocking+0x14>
  return NumBytesWritten;
    1922:	9b08      	ldr	r3, [sp, #32]
}
    1924:	4618      	mov	r0, r3
    1926:	b00b      	add	sp, #44	; 0x2c
    1928:	f85d fb04 	ldr.w	pc, [sp], #4

0000192c <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    192c:	b500      	push	{lr}
    192e:	b089      	sub	sp, #36	; 0x24
    1930:	9003      	str	r0, [sp, #12]
    1932:	9102      	str	r1, [sp, #8]
    1934:	9201      	str	r2, [sp, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
    1936:	9b03      	ldr	r3, [sp, #12]
    1938:	68db      	ldr	r3, [r3, #12]
    193a:	9307      	str	r3, [sp, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
    193c:	9b03      	ldr	r3, [sp, #12]
    193e:	689a      	ldr	r2, [r3, #8]
    1940:	9b07      	ldr	r3, [sp, #28]
    1942:	1ad3      	subs	r3, r2, r3
    1944:	9306      	str	r3, [sp, #24]
  if (Rem > NumBytes) {
    1946:	9a06      	ldr	r2, [sp, #24]
    1948:	9b01      	ldr	r3, [sp, #4]
    194a:	429a      	cmp	r2, r3
    194c:	d911      	bls.n	1972 <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    194e:	9b03      	ldr	r3, [sp, #12]
    1950:	685a      	ldr	r2, [r3, #4]
    1952:	9b07      	ldr	r3, [sp, #28]
    1954:	4413      	add	r3, r2
    1956:	9304      	str	r3, [sp, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
    1958:	9a01      	ldr	r2, [sp, #4]
    195a:	9902      	ldr	r1, [sp, #8]
    195c:	9804      	ldr	r0, [sp, #16]
    195e:	f000 fc71 	bl	2244 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    1962:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
    1966:	9a07      	ldr	r2, [sp, #28]
    1968:	9b01      	ldr	r3, [sp, #4]
    196a:	441a      	add	r2, r3
    196c:	9b03      	ldr	r3, [sp, #12]
    196e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
    1970:	e01f      	b.n	19b2 <_WriteNoCheck+0x86>
    NumBytesAtOnce = Rem;
    1972:	9b06      	ldr	r3, [sp, #24]
    1974:	9305      	str	r3, [sp, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    1976:	9b03      	ldr	r3, [sp, #12]
    1978:	685a      	ldr	r2, [r3, #4]
    197a:	9b07      	ldr	r3, [sp, #28]
    197c:	4413      	add	r3, r2
    197e:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    1980:	9a05      	ldr	r2, [sp, #20]
    1982:	9902      	ldr	r1, [sp, #8]
    1984:	9804      	ldr	r0, [sp, #16]
    1986:	f000 fc5d 	bl	2244 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
    198a:	9a01      	ldr	r2, [sp, #4]
    198c:	9b06      	ldr	r3, [sp, #24]
    198e:	1ad3      	subs	r3, r2, r3
    1990:	9305      	str	r3, [sp, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    1992:	9b03      	ldr	r3, [sp, #12]
    1994:	685b      	ldr	r3, [r3, #4]
    1996:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    1998:	9a02      	ldr	r2, [sp, #8]
    199a:	9b06      	ldr	r3, [sp, #24]
    199c:	4413      	add	r3, r2
    199e:	9a05      	ldr	r2, [sp, #20]
    19a0:	4619      	mov	r1, r3
    19a2:	9804      	ldr	r0, [sp, #16]
    19a4:	f000 fc4e 	bl	2244 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    19a8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
    19ac:	9b03      	ldr	r3, [sp, #12]
    19ae:	9a05      	ldr	r2, [sp, #20]
    19b0:	60da      	str	r2, [r3, #12]
}
    19b2:	bf00      	nop
    19b4:	b009      	add	sp, #36	; 0x24
    19b6:	f85d fb04 	ldr.w	pc, [sp], #4

000019ba <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
    19ba:	b086      	sub	sp, #24
    19bc:	9001      	str	r0, [sp, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
    19be:	9b01      	ldr	r3, [sp, #4]
    19c0:	691b      	ldr	r3, [r3, #16]
    19c2:	9304      	str	r3, [sp, #16]
  WrOff = pRing->WrOff;
    19c4:	9b01      	ldr	r3, [sp, #4]
    19c6:	68db      	ldr	r3, [r3, #12]
    19c8:	9303      	str	r3, [sp, #12]
  if (RdOff <= WrOff) {
    19ca:	9a04      	ldr	r2, [sp, #16]
    19cc:	9b03      	ldr	r3, [sp, #12]
    19ce:	429a      	cmp	r2, r3
    19d0:	d808      	bhi.n	19e4 <_GetAvailWriteSpace+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    19d2:	9b01      	ldr	r3, [sp, #4]
    19d4:	689a      	ldr	r2, [r3, #8]
    19d6:	9b03      	ldr	r3, [sp, #12]
    19d8:	1ad2      	subs	r2, r2, r3
    19da:	9b04      	ldr	r3, [sp, #16]
    19dc:	4413      	add	r3, r2
    19de:	3b01      	subs	r3, #1
    19e0:	9305      	str	r3, [sp, #20]
    19e2:	e004      	b.n	19ee <_GetAvailWriteSpace+0x34>
  } else {
    r = RdOff - WrOff - 1u;
    19e4:	9a04      	ldr	r2, [sp, #16]
    19e6:	9b03      	ldr	r3, [sp, #12]
    19e8:	1ad3      	subs	r3, r2, r3
    19ea:	3b01      	subs	r3, #1
    19ec:	9305      	str	r3, [sp, #20]
  }
  return r;
    19ee:	9b05      	ldr	r3, [sp, #20]
}
    19f0:	4618      	mov	r0, r3
    19f2:	b006      	add	sp, #24
    19f4:	4770      	bx	lr
	...

000019f8 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    19f8:	b500      	push	{lr}
    19fa:	b089      	sub	sp, #36	; 0x24
    19fc:	9003      	str	r0, [sp, #12]
    19fe:	9102      	str	r1, [sp, #8]
    1a00:	9201      	str	r2, [sp, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
    1a02:	9b02      	ldr	r3, [sp, #8]
    1a04:	9306      	str	r3, [sp, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    1a06:	9b03      	ldr	r3, [sp, #12]
    1a08:	1c5a      	adds	r2, r3, #1
    1a0a:	4613      	mov	r3, r2
    1a0c:	005b      	lsls	r3, r3, #1
    1a0e:	4413      	add	r3, r2
    1a10:	00db      	lsls	r3, r3, #3
    1a12:	4a20      	ldr	r2, [pc, #128]	; (1a94 <SEGGER_RTT_WriteNoLock+0x9c>)
    1a14:	4413      	add	r3, r2
    1a16:	9305      	str	r3, [sp, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    1a18:	9b05      	ldr	r3, [sp, #20]
    1a1a:	695b      	ldr	r3, [r3, #20]
    1a1c:	2b02      	cmp	r3, #2
    1a1e:	d029      	beq.n	1a74 <SEGGER_RTT_WriteNoLock+0x7c>
    1a20:	2b02      	cmp	r3, #2
    1a22:	d82e      	bhi.n	1a82 <SEGGER_RTT_WriteNoLock+0x8a>
    1a24:	2b00      	cmp	r3, #0
    1a26:	d002      	beq.n	1a2e <SEGGER_RTT_WriteNoLock+0x36>
    1a28:	2b01      	cmp	r3, #1
    1a2a:	d013      	beq.n	1a54 <SEGGER_RTT_WriteNoLock+0x5c>
    1a2c:	e029      	b.n	1a82 <SEGGER_RTT_WriteNoLock+0x8a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    1a2e:	9805      	ldr	r0, [sp, #20]
    1a30:	f7ff ffc3 	bl	19ba <_GetAvailWriteSpace>
    1a34:	9004      	str	r0, [sp, #16]
    if (Avail < NumBytes) {
    1a36:	9a04      	ldr	r2, [sp, #16]
    1a38:	9b01      	ldr	r3, [sp, #4]
    1a3a:	429a      	cmp	r2, r3
    1a3c:	d202      	bcs.n	1a44 <SEGGER_RTT_WriteNoLock+0x4c>
      Status = 0u;
    1a3e:	2300      	movs	r3, #0
    1a40:	9307      	str	r3, [sp, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
    1a42:	e021      	b.n	1a88 <SEGGER_RTT_WriteNoLock+0x90>
      Status = NumBytes;
    1a44:	9b01      	ldr	r3, [sp, #4]
    1a46:	9307      	str	r3, [sp, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
    1a48:	9a01      	ldr	r2, [sp, #4]
    1a4a:	9906      	ldr	r1, [sp, #24]
    1a4c:	9805      	ldr	r0, [sp, #20]
    1a4e:	f7ff ff6d 	bl	192c <_WriteNoCheck>
    break;
    1a52:	e019      	b.n	1a88 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
    1a54:	9805      	ldr	r0, [sp, #20]
    1a56:	f7ff ffb0 	bl	19ba <_GetAvailWriteSpace>
    1a5a:	9004      	str	r0, [sp, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
    1a5c:	9a01      	ldr	r2, [sp, #4]
    1a5e:	9b04      	ldr	r3, [sp, #16]
    1a60:	4293      	cmp	r3, r2
    1a62:	bf28      	it	cs
    1a64:	4613      	movcs	r3, r2
    1a66:	9307      	str	r3, [sp, #28]
    _WriteNoCheck(pRing, pData, Status);
    1a68:	9a07      	ldr	r2, [sp, #28]
    1a6a:	9906      	ldr	r1, [sp, #24]
    1a6c:	9805      	ldr	r0, [sp, #20]
    1a6e:	f7ff ff5d 	bl	192c <_WriteNoCheck>
    break;
    1a72:	e009      	b.n	1a88 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    1a74:	9a01      	ldr	r2, [sp, #4]
    1a76:	9906      	ldr	r1, [sp, #24]
    1a78:	9805      	ldr	r0, [sp, #20]
    1a7a:	f7ff fefb 	bl	1874 <_WriteBlocking>
    1a7e:	9007      	str	r0, [sp, #28]
    break;
    1a80:	e002      	b.n	1a88 <SEGGER_RTT_WriteNoLock+0x90>
  default:
    Status = 0u;
    1a82:	2300      	movs	r3, #0
    1a84:	9307      	str	r3, [sp, #28]
    break;
    1a86:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
    1a88:	9b07      	ldr	r3, [sp, #28]
}
    1a8a:	4618      	mov	r0, r3
    1a8c:	b009      	add	sp, #36	; 0x24
    1a8e:	f85d fb04 	ldr.w	pc, [sp], #4
    1a92:	bf00      	nop
    1a94:	1fff97cc 	.word	0x1fff97cc

00001a98 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1a98:	b500      	push	{lr}
    1a9a:	b089      	sub	sp, #36	; 0x24
    1a9c:	9003      	str	r0, [sp, #12]
    1a9e:	9102      	str	r1, [sp, #8]
    1aa0:	9201      	str	r2, [sp, #4]
  unsigned Status;

  INIT();
    1aa2:	4b0f      	ldr	r3, [pc, #60]	; (1ae0 <SEGGER_RTT_Write+0x48>)
    1aa4:	9307      	str	r3, [sp, #28]
    1aa6:	9b07      	ldr	r3, [sp, #28]
    1aa8:	781b      	ldrb	r3, [r3, #0]
    1aaa:	b2db      	uxtb	r3, r3
    1aac:	2b53      	cmp	r3, #83	; 0x53
    1aae:	d001      	beq.n	1ab4 <SEGGER_RTT_Write+0x1c>
    1ab0:	f7ff fe86 	bl	17c0 <_DoInit>
  SEGGER_RTT_LOCK();
    1ab4:	f3ef 8311 	mrs	r3, BASEPRI
    1ab8:	f04f 0120 	mov.w	r1, #32
    1abc:	f381 8811 	msr	BASEPRI, r1
    1ac0:	9306      	str	r3, [sp, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
    1ac2:	9a01      	ldr	r2, [sp, #4]
    1ac4:	9902      	ldr	r1, [sp, #8]
    1ac6:	9803      	ldr	r0, [sp, #12]
    1ac8:	f7ff ff96 	bl	19f8 <SEGGER_RTT_WriteNoLock>
    1acc:	9005      	str	r0, [sp, #20]
  SEGGER_RTT_UNLOCK();
    1ace:	9b06      	ldr	r3, [sp, #24]
    1ad0:	f383 8811 	msr	BASEPRI, r3
  return Status;
    1ad4:	9b05      	ldr	r3, [sp, #20]
}
    1ad6:	4618      	mov	r0, r3
    1ad8:	b009      	add	sp, #36	; 0x24
    1ada:	f85d fb04 	ldr.w	pc, [sp], #4
    1ade:	bf00      	nop
    1ae0:	1fff97cc 	.word	0x1fff97cc

00001ae4 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    1ae4:	b508      	push	{r3, lr}
  _DoInit();
    1ae6:	f7ff fe6b 	bl	17c0 <_DoInit>
}
    1aea:	bf00      	nop
    1aec:	bd08      	pop	{r3, pc}

00001aee <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
    1aee:	b500      	push	{lr}
    1af0:	b085      	sub	sp, #20
    1af2:	9001      	str	r0, [sp, #4]
    1af4:	460b      	mov	r3, r1
    1af6:	f88d 3003 	strb.w	r3, [sp, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
    1afa:	9b01      	ldr	r3, [sp, #4]
    1afc:	689b      	ldr	r3, [r3, #8]
    1afe:	9303      	str	r3, [sp, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
    1b00:	9b03      	ldr	r3, [sp, #12]
    1b02:	1c5a      	adds	r2, r3, #1
    1b04:	9b01      	ldr	r3, [sp, #4]
    1b06:	685b      	ldr	r3, [r3, #4]
    1b08:	429a      	cmp	r2, r3
    1b0a:	d80f      	bhi.n	1b2c <_StoreChar+0x3e>
    *(p->pBuffer + Cnt) = c;
    1b0c:	9b01      	ldr	r3, [sp, #4]
    1b0e:	681a      	ldr	r2, [r3, #0]
    1b10:	9b03      	ldr	r3, [sp, #12]
    1b12:	4413      	add	r3, r2
    1b14:	f89d 2003 	ldrb.w	r2, [sp, #3]
    1b18:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
    1b1a:	9b03      	ldr	r3, [sp, #12]
    1b1c:	1c5a      	adds	r2, r3, #1
    1b1e:	9b01      	ldr	r3, [sp, #4]
    1b20:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
    1b22:	9b01      	ldr	r3, [sp, #4]
    1b24:	68db      	ldr	r3, [r3, #12]
    1b26:	1c5a      	adds	r2, r3, #1
    1b28:	9b01      	ldr	r3, [sp, #4]
    1b2a:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
    1b2c:	9b01      	ldr	r3, [sp, #4]
    1b2e:	689a      	ldr	r2, [r3, #8]
    1b30:	9b01      	ldr	r3, [sp, #4]
    1b32:	685b      	ldr	r3, [r3, #4]
    1b34:	429a      	cmp	r2, r3
    1b36:	d115      	bne.n	1b64 <_StoreChar+0x76>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
    1b38:	9b01      	ldr	r3, [sp, #4]
    1b3a:	6918      	ldr	r0, [r3, #16]
    1b3c:	9b01      	ldr	r3, [sp, #4]
    1b3e:	6819      	ldr	r1, [r3, #0]
    1b40:	9b01      	ldr	r3, [sp, #4]
    1b42:	689b      	ldr	r3, [r3, #8]
    1b44:	461a      	mov	r2, r3
    1b46:	f7ff ffa7 	bl	1a98 <SEGGER_RTT_Write>
    1b4a:	4602      	mov	r2, r0
    1b4c:	9b01      	ldr	r3, [sp, #4]
    1b4e:	689b      	ldr	r3, [r3, #8]
    1b50:	429a      	cmp	r2, r3
    1b52:	d004      	beq.n	1b5e <_StoreChar+0x70>
      p->ReturnValue = -1;
    1b54:	9b01      	ldr	r3, [sp, #4]
    1b56:	f04f 32ff 	mov.w	r2, #4294967295
    1b5a:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
    1b5c:	e002      	b.n	1b64 <_StoreChar+0x76>
      p->Cnt = 0u;
    1b5e:	9b01      	ldr	r3, [sp, #4]
    1b60:	2200      	movs	r2, #0
    1b62:	609a      	str	r2, [r3, #8]
}
    1b64:	bf00      	nop
    1b66:	b005      	add	sp, #20
    1b68:	f85d fb04 	ldr.w	pc, [sp], #4

00001b6c <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    1b6c:	b500      	push	{lr}
    1b6e:	b08b      	sub	sp, #44	; 0x2c
    1b70:	9003      	str	r0, [sp, #12]
    1b72:	9102      	str	r1, [sp, #8]
    1b74:	9201      	str	r2, [sp, #4]
    1b76:	9300      	str	r3, [sp, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
    1b78:	9b02      	ldr	r3, [sp, #8]
    1b7a:	9308      	str	r3, [sp, #32]
  Digit = 1u;
    1b7c:	2301      	movs	r3, #1
    1b7e:	9309      	str	r3, [sp, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
    1b80:	2301      	movs	r3, #1
    1b82:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    1b84:	e007      	b.n	1b96 <_PrintUnsigned+0x2a>
    Number = (Number / Base);
    1b86:	9a08      	ldr	r2, [sp, #32]
    1b88:	9b01      	ldr	r3, [sp, #4]
    1b8a:	fbb2 f3f3 	udiv	r3, r2, r3
    1b8e:	9308      	str	r3, [sp, #32]
    Width++;
    1b90:	9b07      	ldr	r3, [sp, #28]
    1b92:	3301      	adds	r3, #1
    1b94:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    1b96:	9a08      	ldr	r2, [sp, #32]
    1b98:	9b01      	ldr	r3, [sp, #4]
    1b9a:	429a      	cmp	r2, r3
    1b9c:	d2f3      	bcs.n	1b86 <_PrintUnsigned+0x1a>
  }
  if (NumDigits > Width) {
    1b9e:	9a00      	ldr	r2, [sp, #0]
    1ba0:	9b07      	ldr	r3, [sp, #28]
    1ba2:	429a      	cmp	r2, r3
    1ba4:	d901      	bls.n	1baa <_PrintUnsigned+0x3e>
    Width = NumDigits;
    1ba6:	9b00      	ldr	r3, [sp, #0]
    1ba8:	9307      	str	r3, [sp, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
    1baa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1bac:	f003 0301 	and.w	r3, r3, #1
    1bb0:	2b00      	cmp	r3, #0
    1bb2:	d128      	bne.n	1c06 <_PrintUnsigned+0x9a>
    if (FieldWidth != 0u) {
    1bb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1bb6:	2b00      	cmp	r3, #0
    1bb8:	d025      	beq.n	1c06 <_PrintUnsigned+0x9a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
    1bba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1bbc:	f003 0302 	and.w	r3, r3, #2
    1bc0:	2b00      	cmp	r3, #0
    1bc2:	d006      	beq.n	1bd2 <_PrintUnsigned+0x66>
    1bc4:	9b00      	ldr	r3, [sp, #0]
    1bc6:	2b00      	cmp	r3, #0
    1bc8:	d103      	bne.n	1bd2 <_PrintUnsigned+0x66>
        c = '0';
    1bca:	2330      	movs	r3, #48	; 0x30
    1bcc:	f88d 301b 	strb.w	r3, [sp, #27]
    1bd0:	e002      	b.n	1bd8 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
    1bd2:	2320      	movs	r3, #32
    1bd4:	f88d 301b 	strb.w	r3, [sp, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1bd8:	e00c      	b.n	1bf4 <_PrintUnsigned+0x88>
        FieldWidth--;
    1bda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1bdc:	3b01      	subs	r3, #1
    1bde:	930c      	str	r3, [sp, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
    1be0:	f89d 301b 	ldrb.w	r3, [sp, #27]
    1be4:	4619      	mov	r1, r3
    1be6:	9803      	ldr	r0, [sp, #12]
    1be8:	f7ff ff81 	bl	1aee <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1bec:	9b03      	ldr	r3, [sp, #12]
    1bee:	68db      	ldr	r3, [r3, #12]
    1bf0:	2b00      	cmp	r3, #0
    1bf2:	db07      	blt.n	1c04 <_PrintUnsigned+0x98>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1bf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1bf6:	2b00      	cmp	r3, #0
    1bf8:	d005      	beq.n	1c06 <_PrintUnsigned+0x9a>
    1bfa:	9a07      	ldr	r2, [sp, #28]
    1bfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1bfe:	429a      	cmp	r2, r3
    1c00:	d3eb      	bcc.n	1bda <_PrintUnsigned+0x6e>
    1c02:	e000      	b.n	1c06 <_PrintUnsigned+0x9a>
          break;
    1c04:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
    1c06:	9b03      	ldr	r3, [sp, #12]
    1c08:	68db      	ldr	r3, [r3, #12]
    1c0a:	2b00      	cmp	r3, #0
    1c0c:	db55      	blt.n	1cba <_PrintUnsigned+0x14e>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    1c0e:	9b00      	ldr	r3, [sp, #0]
    1c10:	2b01      	cmp	r3, #1
    1c12:	d903      	bls.n	1c1c <_PrintUnsigned+0xb0>
        NumDigits--;
    1c14:	9b00      	ldr	r3, [sp, #0]
    1c16:	3b01      	subs	r3, #1
    1c18:	9300      	str	r3, [sp, #0]
    1c1a:	e009      	b.n	1c30 <_PrintUnsigned+0xc4>
      } else {
        Div = v / Digit;
    1c1c:	9a02      	ldr	r2, [sp, #8]
    1c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1c20:	fbb2 f3f3 	udiv	r3, r2, r3
    1c24:	9305      	str	r3, [sp, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
    1c26:	9a05      	ldr	r2, [sp, #20]
    1c28:	9b01      	ldr	r3, [sp, #4]
    1c2a:	429a      	cmp	r2, r3
    1c2c:	d200      	bcs.n	1c30 <_PrintUnsigned+0xc4>
          break;
    1c2e:	e005      	b.n	1c3c <_PrintUnsigned+0xd0>
        }
      }
      Digit *= Base;
    1c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1c32:	9a01      	ldr	r2, [sp, #4]
    1c34:	fb02 f303 	mul.w	r3, r2, r3
    1c38:	9309      	str	r3, [sp, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    1c3a:	e7e8      	b.n	1c0e <_PrintUnsigned+0xa2>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
    1c3c:	9a02      	ldr	r2, [sp, #8]
    1c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1c40:	fbb2 f3f3 	udiv	r3, r2, r3
    1c44:	9305      	str	r3, [sp, #20]
      v -= Div * Digit;
    1c46:	9b05      	ldr	r3, [sp, #20]
    1c48:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1c4a:	fb02 f303 	mul.w	r3, r2, r3
    1c4e:	9a02      	ldr	r2, [sp, #8]
    1c50:	1ad3      	subs	r3, r2, r3
    1c52:	9302      	str	r3, [sp, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
    1c54:	4a1b      	ldr	r2, [pc, #108]	; (1cc4 <_PrintUnsigned+0x158>)
    1c56:	9b05      	ldr	r3, [sp, #20]
    1c58:	4413      	add	r3, r2
    1c5a:	781b      	ldrb	r3, [r3, #0]
    1c5c:	4619      	mov	r1, r3
    1c5e:	9803      	ldr	r0, [sp, #12]
    1c60:	f7ff ff45 	bl	1aee <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
    1c64:	9b03      	ldr	r3, [sp, #12]
    1c66:	68db      	ldr	r3, [r3, #12]
    1c68:	2b00      	cmp	r3, #0
    1c6a:	db08      	blt.n	1c7e <_PrintUnsigned+0x112>
        break;
      }
      Digit /= Base;
    1c6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1c6e:	9b01      	ldr	r3, [sp, #4]
    1c70:	fbb2 f3f3 	udiv	r3, r2, r3
    1c74:	9309      	str	r3, [sp, #36]	; 0x24
    } while (Digit);
    1c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1c78:	2b00      	cmp	r3, #0
    1c7a:	d1df      	bne.n	1c3c <_PrintUnsigned+0xd0>
    1c7c:	e000      	b.n	1c80 <_PrintUnsigned+0x114>
        break;
    1c7e:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    1c80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1c82:	f003 0301 	and.w	r3, r3, #1
    1c86:	2b00      	cmp	r3, #0
    1c88:	d017      	beq.n	1cba <_PrintUnsigned+0x14e>
      if (FieldWidth != 0u) {
    1c8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1c8c:	2b00      	cmp	r3, #0
    1c8e:	d014      	beq.n	1cba <_PrintUnsigned+0x14e>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1c90:	e00a      	b.n	1ca8 <_PrintUnsigned+0x13c>
          FieldWidth--;
    1c92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1c94:	3b01      	subs	r3, #1
    1c96:	930c      	str	r3, [sp, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
    1c98:	2120      	movs	r1, #32
    1c9a:	9803      	ldr	r0, [sp, #12]
    1c9c:	f7ff ff27 	bl	1aee <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
    1ca0:	9b03      	ldr	r3, [sp, #12]
    1ca2:	68db      	ldr	r3, [r3, #12]
    1ca4:	2b00      	cmp	r3, #0
    1ca6:	db07      	blt.n	1cb8 <_PrintUnsigned+0x14c>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1ca8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1caa:	2b00      	cmp	r3, #0
    1cac:	d005      	beq.n	1cba <_PrintUnsigned+0x14e>
    1cae:	9a07      	ldr	r2, [sp, #28]
    1cb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1cb2:	429a      	cmp	r2, r3
    1cb4:	d3ed      	bcc.n	1c92 <_PrintUnsigned+0x126>
          }
        }
      }
    }
  }
}
    1cb6:	e000      	b.n	1cba <_PrintUnsigned+0x14e>
            break;
    1cb8:	bf00      	nop
}
    1cba:	bf00      	nop
    1cbc:	b00b      	add	sp, #44	; 0x2c
    1cbe:	f85d fb04 	ldr.w	pc, [sp], #4
    1cc2:	bf00      	nop
    1cc4:	00017010 	.word	0x00017010

00001cc8 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    1cc8:	b500      	push	{lr}
    1cca:	b089      	sub	sp, #36	; 0x24
    1ccc:	9005      	str	r0, [sp, #20]
    1cce:	9104      	str	r1, [sp, #16]
    1cd0:	9203      	str	r2, [sp, #12]
    1cd2:	9302      	str	r3, [sp, #8]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
    1cd4:	9b04      	ldr	r3, [sp, #16]
    1cd6:	2b00      	cmp	r3, #0
    1cd8:	bfb8      	it	lt
    1cda:	425b      	neglt	r3, r3
    1cdc:	9306      	str	r3, [sp, #24]

  //
  // Get actual field width
  //
  Width = 1u;
    1cde:	2301      	movs	r3, #1
    1ce0:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1ce2:	e007      	b.n	1cf4 <_PrintInt+0x2c>
    Number = (Number / (int)Base);
    1ce4:	9b03      	ldr	r3, [sp, #12]
    1ce6:	9a06      	ldr	r2, [sp, #24]
    1ce8:	fb92 f3f3 	sdiv	r3, r2, r3
    1cec:	9306      	str	r3, [sp, #24]
    Width++;
    1cee:	9b07      	ldr	r3, [sp, #28]
    1cf0:	3301      	adds	r3, #1
    1cf2:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1cf4:	9b03      	ldr	r3, [sp, #12]
    1cf6:	9a06      	ldr	r2, [sp, #24]
    1cf8:	429a      	cmp	r2, r3
    1cfa:	daf3      	bge.n	1ce4 <_PrintInt+0x1c>
  }
  if (NumDigits > Width) {
    1cfc:	9a02      	ldr	r2, [sp, #8]
    1cfe:	9b07      	ldr	r3, [sp, #28]
    1d00:	429a      	cmp	r2, r3
    1d02:	d901      	bls.n	1d08 <_PrintInt+0x40>
    Width = NumDigits;
    1d04:	9b02      	ldr	r3, [sp, #8]
    1d06:	9307      	str	r3, [sp, #28]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    1d08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1d0a:	2b00      	cmp	r3, #0
    1d0c:	d00a      	beq.n	1d24 <_PrintInt+0x5c>
    1d0e:	9b04      	ldr	r3, [sp, #16]
    1d10:	2b00      	cmp	r3, #0
    1d12:	db04      	blt.n	1d1e <_PrintInt+0x56>
    1d14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1d16:	f003 0304 	and.w	r3, r3, #4
    1d1a:	2b00      	cmp	r3, #0
    1d1c:	d002      	beq.n	1d24 <_PrintInt+0x5c>
    FieldWidth--;
    1d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1d20:	3b01      	subs	r3, #1
    1d22:	930a      	str	r3, [sp, #40]	; 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    1d24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1d26:	f003 0302 	and.w	r3, r3, #2
    1d2a:	2b00      	cmp	r3, #0
    1d2c:	d002      	beq.n	1d34 <_PrintInt+0x6c>
    1d2e:	9b02      	ldr	r3, [sp, #8]
    1d30:	2b00      	cmp	r3, #0
    1d32:	d01c      	beq.n	1d6e <_PrintInt+0xa6>
    1d34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1d36:	f003 0301 	and.w	r3, r3, #1
    1d3a:	2b00      	cmp	r3, #0
    1d3c:	d117      	bne.n	1d6e <_PrintInt+0xa6>
    if (FieldWidth != 0u) {
    1d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1d40:	2b00      	cmp	r3, #0
    1d42:	d014      	beq.n	1d6e <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1d44:	e00a      	b.n	1d5c <_PrintInt+0x94>
        FieldWidth--;
    1d46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1d48:	3b01      	subs	r3, #1
    1d4a:	930a      	str	r3, [sp, #40]	; 0x28
        _StoreChar(pBufferDesc, ' ');
    1d4c:	2120      	movs	r1, #32
    1d4e:	9805      	ldr	r0, [sp, #20]
    1d50:	f7ff fecd 	bl	1aee <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1d54:	9b05      	ldr	r3, [sp, #20]
    1d56:	68db      	ldr	r3, [r3, #12]
    1d58:	2b00      	cmp	r3, #0
    1d5a:	db07      	blt.n	1d6c <_PrintInt+0xa4>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1d5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d005      	beq.n	1d6e <_PrintInt+0xa6>
    1d62:	9a07      	ldr	r2, [sp, #28]
    1d64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1d66:	429a      	cmp	r2, r3
    1d68:	d3ed      	bcc.n	1d46 <_PrintInt+0x7e>
    1d6a:	e000      	b.n	1d6e <_PrintInt+0xa6>
          break;
    1d6c:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
    1d6e:	9b05      	ldr	r3, [sp, #20]
    1d70:	68db      	ldr	r3, [r3, #12]
    1d72:	2b00      	cmp	r3, #0
    1d74:	db4a      	blt.n	1e0c <_PrintInt+0x144>
    if (v < 0) {
    1d76:	9b04      	ldr	r3, [sp, #16]
    1d78:	2b00      	cmp	r3, #0
    1d7a:	da07      	bge.n	1d8c <_PrintInt+0xc4>
      v = -v;
    1d7c:	9b04      	ldr	r3, [sp, #16]
    1d7e:	425b      	negs	r3, r3
    1d80:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '-');
    1d82:	212d      	movs	r1, #45	; 0x2d
    1d84:	9805      	ldr	r0, [sp, #20]
    1d86:	f7ff feb2 	bl	1aee <_StoreChar>
    1d8a:	e008      	b.n	1d9e <_PrintInt+0xd6>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    1d8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1d8e:	f003 0304 	and.w	r3, r3, #4
    1d92:	2b00      	cmp	r3, #0
    1d94:	d003      	beq.n	1d9e <_PrintInt+0xd6>
      _StoreChar(pBufferDesc, '+');
    1d96:	212b      	movs	r1, #43	; 0x2b
    1d98:	9805      	ldr	r0, [sp, #20]
    1d9a:	f7ff fea8 	bl	1aee <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
    1d9e:	9b05      	ldr	r3, [sp, #20]
    1da0:	68db      	ldr	r3, [r3, #12]
    1da2:	2b00      	cmp	r3, #0
    1da4:	db32      	blt.n	1e0c <_PrintInt+0x144>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    1da6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1da8:	f003 0302 	and.w	r3, r3, #2
    1dac:	2b00      	cmp	r3, #0
    1dae:	d01f      	beq.n	1df0 <_PrintInt+0x128>
    1db0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1db2:	f003 0301 	and.w	r3, r3, #1
    1db6:	2b00      	cmp	r3, #0
    1db8:	d11a      	bne.n	1df0 <_PrintInt+0x128>
    1dba:	9b02      	ldr	r3, [sp, #8]
    1dbc:	2b00      	cmp	r3, #0
    1dbe:	d117      	bne.n	1df0 <_PrintInt+0x128>
        if (FieldWidth != 0u) {
    1dc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1dc2:	2b00      	cmp	r3, #0
    1dc4:	d014      	beq.n	1df0 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1dc6:	e00a      	b.n	1dde <_PrintInt+0x116>
            FieldWidth--;
    1dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1dca:	3b01      	subs	r3, #1
    1dcc:	930a      	str	r3, [sp, #40]	; 0x28
            _StoreChar(pBufferDesc, '0');
    1dce:	2130      	movs	r1, #48	; 0x30
    1dd0:	9805      	ldr	r0, [sp, #20]
    1dd2:	f7ff fe8c 	bl	1aee <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
    1dd6:	9b05      	ldr	r3, [sp, #20]
    1dd8:	68db      	ldr	r3, [r3, #12]
    1dda:	2b00      	cmp	r3, #0
    1ddc:	db07      	blt.n	1dee <_PrintInt+0x126>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1dde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1de0:	2b00      	cmp	r3, #0
    1de2:	d005      	beq.n	1df0 <_PrintInt+0x128>
    1de4:	9a07      	ldr	r2, [sp, #28]
    1de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1de8:	429a      	cmp	r2, r3
    1dea:	d3ed      	bcc.n	1dc8 <_PrintInt+0x100>
    1dec:	e000      	b.n	1df0 <_PrintInt+0x128>
              break;
    1dee:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
    1df0:	9b05      	ldr	r3, [sp, #20]
    1df2:	68db      	ldr	r3, [r3, #12]
    1df4:	2b00      	cmp	r3, #0
    1df6:	db09      	blt.n	1e0c <_PrintInt+0x144>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    1df8:	9904      	ldr	r1, [sp, #16]
    1dfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1dfc:	9301      	str	r3, [sp, #4]
    1dfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1e00:	9300      	str	r3, [sp, #0]
    1e02:	9b02      	ldr	r3, [sp, #8]
    1e04:	9a03      	ldr	r2, [sp, #12]
    1e06:	9805      	ldr	r0, [sp, #20]
    1e08:	f7ff feb0 	bl	1b6c <_PrintUnsigned>
      }
    }
  }
}
    1e0c:	bf00      	nop
    1e0e:	b009      	add	sp, #36	; 0x24
    1e10:	f85d fb04 	ldr.w	pc, [sp], #4

00001e14 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
    1e14:	b500      	push	{lr}
    1e16:	b0a3      	sub	sp, #140	; 0x8c
    1e18:	9005      	str	r0, [sp, #20]
    1e1a:	9104      	str	r1, [sp, #16]
    1e1c:	9203      	str	r2, [sp, #12]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
    1e1e:	ab06      	add	r3, sp, #24
    1e20:	9316      	str	r3, [sp, #88]	; 0x58
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    1e22:	2340      	movs	r3, #64	; 0x40
    1e24:	9317      	str	r3, [sp, #92]	; 0x5c
  BufferDesc.Cnt            = 0u;
    1e26:	2300      	movs	r3, #0
    1e28:	9318      	str	r3, [sp, #96]	; 0x60
  BufferDesc.RTTBufferIndex = BufferIndex;
    1e2a:	9b05      	ldr	r3, [sp, #20]
    1e2c:	931a      	str	r3, [sp, #104]	; 0x68
  BufferDesc.ReturnValue    = 0;
    1e2e:	2300      	movs	r3, #0
    1e30:	9319      	str	r3, [sp, #100]	; 0x64

  do {
    c = *sFormat;
    1e32:	9b04      	ldr	r3, [sp, #16]
    1e34:	781b      	ldrb	r3, [r3, #0]
    1e36:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    sFormat++;
    1e3a:	9b04      	ldr	r3, [sp, #16]
    1e3c:	3301      	adds	r3, #1
    1e3e:	9304      	str	r3, [sp, #16]
    if (c == 0u) {
    1e40:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1e44:	2b00      	cmp	r3, #0
    1e46:	f000 819c 	beq.w	2182 <SEGGER_RTT_vprintf+0x36e>
      break;
    }
    if (c == '%') {
    1e4a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1e4e:	2b25      	cmp	r3, #37	; 0x25
    1e50:	f040 818b 	bne.w	216a <SEGGER_RTT_vprintf+0x356>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
    1e54:	2300      	movs	r3, #0
    1e56:	931e      	str	r3, [sp, #120]	; 0x78
      v = 1;
    1e58:	2301      	movs	r3, #1
    1e5a:	9320      	str	r3, [sp, #128]	; 0x80
      do {
        c = *sFormat;
    1e5c:	9b04      	ldr	r3, [sp, #16]
    1e5e:	781b      	ldrb	r3, [r3, #0]
    1e60:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        switch (c) {
    1e64:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1e68:	3b23      	subs	r3, #35	; 0x23
    1e6a:	2b0d      	cmp	r3, #13
    1e6c:	d83e      	bhi.n	1eec <SEGGER_RTT_vprintf+0xd8>
    1e6e:	a201      	add	r2, pc, #4	; (adr r2, 1e74 <SEGGER_RTT_vprintf+0x60>)
    1e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1e74:	00001edd 	.word	0x00001edd
    1e78:	00001eed 	.word	0x00001eed
    1e7c:	00001eed 	.word	0x00001eed
    1e80:	00001eed 	.word	0x00001eed
    1e84:	00001eed 	.word	0x00001eed
    1e88:	00001eed 	.word	0x00001eed
    1e8c:	00001eed 	.word	0x00001eed
    1e90:	00001eed 	.word	0x00001eed
    1e94:	00001ecd 	.word	0x00001ecd
    1e98:	00001eed 	.word	0x00001eed
    1e9c:	00001ead 	.word	0x00001ead
    1ea0:	00001eed 	.word	0x00001eed
    1ea4:	00001eed 	.word	0x00001eed
    1ea8:	00001ebd 	.word	0x00001ebd
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    1eac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1eae:	f043 0301 	orr.w	r3, r3, #1
    1eb2:	931e      	str	r3, [sp, #120]	; 0x78
    1eb4:	9b04      	ldr	r3, [sp, #16]
    1eb6:	3301      	adds	r3, #1
    1eb8:	9304      	str	r3, [sp, #16]
    1eba:	e01a      	b.n	1ef2 <SEGGER_RTT_vprintf+0xde>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    1ebc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1ebe:	f043 0302 	orr.w	r3, r3, #2
    1ec2:	931e      	str	r3, [sp, #120]	; 0x78
    1ec4:	9b04      	ldr	r3, [sp, #16]
    1ec6:	3301      	adds	r3, #1
    1ec8:	9304      	str	r3, [sp, #16]
    1eca:	e012      	b.n	1ef2 <SEGGER_RTT_vprintf+0xde>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    1ecc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1ece:	f043 0304 	orr.w	r3, r3, #4
    1ed2:	931e      	str	r3, [sp, #120]	; 0x78
    1ed4:	9b04      	ldr	r3, [sp, #16]
    1ed6:	3301      	adds	r3, #1
    1ed8:	9304      	str	r3, [sp, #16]
    1eda:	e00a      	b.n	1ef2 <SEGGER_RTT_vprintf+0xde>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    1edc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1ede:	f043 0308 	orr.w	r3, r3, #8
    1ee2:	931e      	str	r3, [sp, #120]	; 0x78
    1ee4:	9b04      	ldr	r3, [sp, #16]
    1ee6:	3301      	adds	r3, #1
    1ee8:	9304      	str	r3, [sp, #16]
    1eea:	e002      	b.n	1ef2 <SEGGER_RTT_vprintf+0xde>
        default:  v = 0; break;
    1eec:	2300      	movs	r3, #0
    1eee:	9320      	str	r3, [sp, #128]	; 0x80
    1ef0:	bf00      	nop
        }
      } while (v);
    1ef2:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1ef4:	2b00      	cmp	r3, #0
    1ef6:	d1b1      	bne.n	1e5c <SEGGER_RTT_vprintf+0x48>
      //
      // filter out field with
      //
      FieldWidth = 0u;
    1ef8:	2300      	movs	r3, #0
    1efa:	931d      	str	r3, [sp, #116]	; 0x74
      do {
        c = *sFormat;
    1efc:	9b04      	ldr	r3, [sp, #16]
    1efe:	781b      	ldrb	r3, [r3, #0]
    1f00:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c < '0') || (c > '9')) {
    1f04:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1f08:	2b2f      	cmp	r3, #47	; 0x2f
    1f0a:	d912      	bls.n	1f32 <SEGGER_RTT_vprintf+0x11e>
    1f0c:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1f10:	2b39      	cmp	r3, #57	; 0x39
    1f12:	d80e      	bhi.n	1f32 <SEGGER_RTT_vprintf+0x11e>
          break;
        }
        sFormat++;
    1f14:	9b04      	ldr	r3, [sp, #16]
    1f16:	3301      	adds	r3, #1
    1f18:	9304      	str	r3, [sp, #16]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    1f1a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    1f1c:	4613      	mov	r3, r2
    1f1e:	009b      	lsls	r3, r3, #2
    1f20:	4413      	add	r3, r2
    1f22:	005b      	lsls	r3, r3, #1
    1f24:	461a      	mov	r2, r3
    1f26:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1f2a:	4413      	add	r3, r2
    1f2c:	3b30      	subs	r3, #48	; 0x30
    1f2e:	931d      	str	r3, [sp, #116]	; 0x74
        c = *sFormat;
    1f30:	e7e4      	b.n	1efc <SEGGER_RTT_vprintf+0xe8>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
    1f32:	2300      	movs	r3, #0
    1f34:	931f      	str	r3, [sp, #124]	; 0x7c
      c = *sFormat;
    1f36:	9b04      	ldr	r3, [sp, #16]
    1f38:	781b      	ldrb	r3, [r3, #0]
    1f3a:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      if (c == '.') {
    1f3e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1f42:	2b2e      	cmp	r3, #46	; 0x2e
    1f44:	d11d      	bne.n	1f82 <SEGGER_RTT_vprintf+0x16e>
        sFormat++;
    1f46:	9b04      	ldr	r3, [sp, #16]
    1f48:	3301      	adds	r3, #1
    1f4a:	9304      	str	r3, [sp, #16]
        do {
          c = *sFormat;
    1f4c:	9b04      	ldr	r3, [sp, #16]
    1f4e:	781b      	ldrb	r3, [r3, #0]
    1f50:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
          if ((c < '0') || (c > '9')) {
    1f54:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1f58:	2b2f      	cmp	r3, #47	; 0x2f
    1f5a:	d912      	bls.n	1f82 <SEGGER_RTT_vprintf+0x16e>
    1f5c:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1f60:	2b39      	cmp	r3, #57	; 0x39
    1f62:	d80e      	bhi.n	1f82 <SEGGER_RTT_vprintf+0x16e>
            break;
          }
          sFormat++;
    1f64:	9b04      	ldr	r3, [sp, #16]
    1f66:	3301      	adds	r3, #1
    1f68:	9304      	str	r3, [sp, #16]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
    1f6a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    1f6c:	4613      	mov	r3, r2
    1f6e:	009b      	lsls	r3, r3, #2
    1f70:	4413      	add	r3, r2
    1f72:	005b      	lsls	r3, r3, #1
    1f74:	461a      	mov	r2, r3
    1f76:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1f7a:	4413      	add	r3, r2
    1f7c:	3b30      	subs	r3, #48	; 0x30
    1f7e:	931f      	str	r3, [sp, #124]	; 0x7c
          c = *sFormat;
    1f80:	e7e4      	b.n	1f4c <SEGGER_RTT_vprintf+0x138>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
    1f82:	9b04      	ldr	r3, [sp, #16]
    1f84:	781b      	ldrb	r3, [r3, #0]
    1f86:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
    1f8a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1f8e:	2b6c      	cmp	r3, #108	; 0x6c
    1f90:	d003      	beq.n	1f9a <SEGGER_RTT_vprintf+0x186>
    1f92:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1f96:	2b68      	cmp	r3, #104	; 0x68
    1f98:	d107      	bne.n	1faa <SEGGER_RTT_vprintf+0x196>
          sFormat++;
    1f9a:	9b04      	ldr	r3, [sp, #16]
    1f9c:	3301      	adds	r3, #1
    1f9e:	9304      	str	r3, [sp, #16]
          c = *sFormat;
    1fa0:	9b04      	ldr	r3, [sp, #16]
    1fa2:	781b      	ldrb	r3, [r3, #0]
    1fa4:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c == 'l') || (c == 'h')) {
    1fa8:	e7ef      	b.n	1f8a <SEGGER_RTT_vprintf+0x176>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    1faa:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1fae:	2b25      	cmp	r3, #37	; 0x25
    1fb0:	f000 80d0 	beq.w	2154 <SEGGER_RTT_vprintf+0x340>
    1fb4:	2b25      	cmp	r3, #37	; 0x25
    1fb6:	f2c0 80d3 	blt.w	2160 <SEGGER_RTT_vprintf+0x34c>
    1fba:	2b78      	cmp	r3, #120	; 0x78
    1fbc:	f300 80d0 	bgt.w	2160 <SEGGER_RTT_vprintf+0x34c>
    1fc0:	2b58      	cmp	r3, #88	; 0x58
    1fc2:	f2c0 80cd 	blt.w	2160 <SEGGER_RTT_vprintf+0x34c>
    1fc6:	3b58      	subs	r3, #88	; 0x58
    1fc8:	2b20      	cmp	r3, #32
    1fca:	f200 80c9 	bhi.w	2160 <SEGGER_RTT_vprintf+0x34c>
    1fce:	a201      	add	r2, pc, #4	; (adr r2, 1fd4 <SEGGER_RTT_vprintf+0x1c0>)
    1fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1fd4:	000020c5 	.word	0x000020c5
    1fd8:	00002161 	.word	0x00002161
    1fdc:	00002161 	.word	0x00002161
    1fe0:	00002161 	.word	0x00002161
    1fe4:	00002161 	.word	0x00002161
    1fe8:	00002161 	.word	0x00002161
    1fec:	00002161 	.word	0x00002161
    1ff0:	00002161 	.word	0x00002161
    1ff4:	00002161 	.word	0x00002161
    1ff8:	00002161 	.word	0x00002161
    1ffc:	00002161 	.word	0x00002161
    2000:	00002059 	.word	0x00002059
    2004:	0000207d 	.word	0x0000207d
    2008:	00002161 	.word	0x00002161
    200c:	00002161 	.word	0x00002161
    2010:	00002161 	.word	0x00002161
    2014:	00002161 	.word	0x00002161
    2018:	00002161 	.word	0x00002161
    201c:	00002161 	.word	0x00002161
    2020:	00002161 	.word	0x00002161
    2024:	00002161 	.word	0x00002161
    2028:	00002161 	.word	0x00002161
    202c:	00002161 	.word	0x00002161
    2030:	00002161 	.word	0x00002161
    2034:	00002131 	.word	0x00002131
    2038:	00002161 	.word	0x00002161
    203c:	00002161 	.word	0x00002161
    2040:	000020e9 	.word	0x000020e9
    2044:	00002161 	.word	0x00002161
    2048:	000020a1 	.word	0x000020a1
    204c:	00002161 	.word	0x00002161
    2050:	00002161 	.word	0x00002161
    2054:	000020c5 	.word	0x000020c5
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
    2058:	9b03      	ldr	r3, [sp, #12]
    205a:	681b      	ldr	r3, [r3, #0]
    205c:	1d19      	adds	r1, r3, #4
    205e:	9a03      	ldr	r2, [sp, #12]
    2060:	6011      	str	r1, [r2, #0]
    2062:	681b      	ldr	r3, [r3, #0]
    2064:	9320      	str	r3, [sp, #128]	; 0x80
        c0 = (char)v;
    2066:	9b20      	ldr	r3, [sp, #128]	; 0x80
    2068:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
        _StoreChar(&BufferDesc, c0);
    206c:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    2070:	ab16      	add	r3, sp, #88	; 0x58
    2072:	4611      	mov	r1, r2
    2074:	4618      	mov	r0, r3
    2076:	f7ff fd3a 	bl	1aee <_StoreChar>
        break;
    207a:	e072      	b.n	2162 <SEGGER_RTT_vprintf+0x34e>
      }
      case 'd':
        v = va_arg(*pParamList, int);
    207c:	9b03      	ldr	r3, [sp, #12]
    207e:	681b      	ldr	r3, [r3, #0]
    2080:	1d19      	adds	r1, r3, #4
    2082:	9a03      	ldr	r2, [sp, #12]
    2084:	6011      	str	r1, [r2, #0]
    2086:	681b      	ldr	r3, [r3, #0]
    2088:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
    208a:	a816      	add	r0, sp, #88	; 0x58
    208c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    208e:	9301      	str	r3, [sp, #4]
    2090:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    2092:	9300      	str	r3, [sp, #0]
    2094:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    2096:	220a      	movs	r2, #10
    2098:	9920      	ldr	r1, [sp, #128]	; 0x80
    209a:	f7ff fe15 	bl	1cc8 <_PrintInt>
        break;
    209e:	e060      	b.n	2162 <SEGGER_RTT_vprintf+0x34e>
      case 'u':
        v = va_arg(*pParamList, int);
    20a0:	9b03      	ldr	r3, [sp, #12]
    20a2:	681b      	ldr	r3, [r3, #0]
    20a4:	1d19      	adds	r1, r3, #4
    20a6:	9a03      	ldr	r2, [sp, #12]
    20a8:	6011      	str	r1, [r2, #0]
    20aa:	681b      	ldr	r3, [r3, #0]
    20ac:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
    20ae:	9920      	ldr	r1, [sp, #128]	; 0x80
    20b0:	a816      	add	r0, sp, #88	; 0x58
    20b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    20b4:	9301      	str	r3, [sp, #4]
    20b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    20b8:	9300      	str	r3, [sp, #0]
    20ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    20bc:	220a      	movs	r2, #10
    20be:	f7ff fd55 	bl	1b6c <_PrintUnsigned>
        break;
    20c2:	e04e      	b.n	2162 <SEGGER_RTT_vprintf+0x34e>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
    20c4:	9b03      	ldr	r3, [sp, #12]
    20c6:	681b      	ldr	r3, [r3, #0]
    20c8:	1d19      	adds	r1, r3, #4
    20ca:	9a03      	ldr	r2, [sp, #12]
    20cc:	6011      	str	r1, [r2, #0]
    20ce:	681b      	ldr	r3, [r3, #0]
    20d0:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
    20d2:	9920      	ldr	r1, [sp, #128]	; 0x80
    20d4:	a816      	add	r0, sp, #88	; 0x58
    20d6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    20d8:	9301      	str	r3, [sp, #4]
    20da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    20dc:	9300      	str	r3, [sp, #0]
    20de:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    20e0:	2210      	movs	r2, #16
    20e2:	f7ff fd43 	bl	1b6c <_PrintUnsigned>
        break;
    20e6:	e03c      	b.n	2162 <SEGGER_RTT_vprintf+0x34e>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
    20e8:	9b03      	ldr	r3, [sp, #12]
    20ea:	681b      	ldr	r3, [r3, #0]
    20ec:	1d19      	adds	r1, r3, #4
    20ee:	9a03      	ldr	r2, [sp, #12]
    20f0:	6011      	str	r1, [r2, #0]
    20f2:	681b      	ldr	r3, [r3, #0]
    20f4:	931c      	str	r3, [sp, #112]	; 0x70
          if (s == NULL) {
    20f6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    20f8:	2b00      	cmp	r3, #0
    20fa:	d101      	bne.n	2100 <SEGGER_RTT_vprintf+0x2ec>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
    20fc:	4b2c      	ldr	r3, [pc, #176]	; (21b0 <SEGGER_RTT_vprintf+0x39c>)
    20fe:	931c      	str	r3, [sp, #112]	; 0x70
          }
          do {
            c = *s;
    2100:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    2102:	781b      	ldrb	r3, [r3, #0]
    2104:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
            s++;
    2108:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    210a:	3301      	adds	r3, #1
    210c:	931c      	str	r3, [sp, #112]	; 0x70
            if (c == '\0') {
    210e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    2112:	2b00      	cmp	r3, #0
    2114:	d00a      	beq.n	212c <SEGGER_RTT_vprintf+0x318>
              break;
            }
           _StoreChar(&BufferDesc, c);
    2116:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    211a:	ab16      	add	r3, sp, #88	; 0x58
    211c:	4611      	mov	r1, r2
    211e:	4618      	mov	r0, r3
    2120:	f7ff fce5 	bl	1aee <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
    2124:	9b19      	ldr	r3, [sp, #100]	; 0x64
    2126:	2b00      	cmp	r3, #0
    2128:	daea      	bge.n	2100 <SEGGER_RTT_vprintf+0x2ec>
        }
        break;
    212a:	e01a      	b.n	2162 <SEGGER_RTT_vprintf+0x34e>
              break;
    212c:	bf00      	nop
        break;
    212e:	e018      	b.n	2162 <SEGGER_RTT_vprintf+0x34e>
      case 'p':
        v = va_arg(*pParamList, int);
    2130:	9b03      	ldr	r3, [sp, #12]
    2132:	681b      	ldr	r3, [r3, #0]
    2134:	1d19      	adds	r1, r3, #4
    2136:	9a03      	ldr	r2, [sp, #12]
    2138:	6011      	str	r1, [r2, #0]
    213a:	681b      	ldr	r3, [r3, #0]
    213c:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    213e:	9920      	ldr	r1, [sp, #128]	; 0x80
    2140:	a816      	add	r0, sp, #88	; 0x58
    2142:	2300      	movs	r3, #0
    2144:	9301      	str	r3, [sp, #4]
    2146:	2308      	movs	r3, #8
    2148:	9300      	str	r3, [sp, #0]
    214a:	2308      	movs	r3, #8
    214c:	2210      	movs	r2, #16
    214e:	f7ff fd0d 	bl	1b6c <_PrintUnsigned>
        break;
    2152:	e006      	b.n	2162 <SEGGER_RTT_vprintf+0x34e>
      case '%':
        _StoreChar(&BufferDesc, '%');
    2154:	ab16      	add	r3, sp, #88	; 0x58
    2156:	2125      	movs	r1, #37	; 0x25
    2158:	4618      	mov	r0, r3
    215a:	f7ff fcc8 	bl	1aee <_StoreChar>
        break;
    215e:	e000      	b.n	2162 <SEGGER_RTT_vprintf+0x34e>
      default:
        break;
    2160:	bf00      	nop
      }
      sFormat++;
    2162:	9b04      	ldr	r3, [sp, #16]
    2164:	3301      	adds	r3, #1
    2166:	9304      	str	r3, [sp, #16]
    2168:	e006      	b.n	2178 <SEGGER_RTT_vprintf+0x364>
    } else {
      _StoreChar(&BufferDesc, c);
    216a:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    216e:	ab16      	add	r3, sp, #88	; 0x58
    2170:	4611      	mov	r1, r2
    2172:	4618      	mov	r0, r3
    2174:	f7ff fcbb 	bl	1aee <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
    2178:	9b19      	ldr	r3, [sp, #100]	; 0x64
    217a:	2b00      	cmp	r3, #0
    217c:	f6bf ae59 	bge.w	1e32 <SEGGER_RTT_vprintf+0x1e>
    2180:	e000      	b.n	2184 <SEGGER_RTT_vprintf+0x370>
      break;
    2182:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
    2184:	9b19      	ldr	r3, [sp, #100]	; 0x64
    2186:	2b00      	cmp	r3, #0
    2188:	dd0c      	ble.n	21a4 <SEGGER_RTT_vprintf+0x390>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
    218a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    218c:	2b00      	cmp	r3, #0
    218e:	d005      	beq.n	219c <SEGGER_RTT_vprintf+0x388>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    2190:	9a18      	ldr	r2, [sp, #96]	; 0x60
    2192:	ab06      	add	r3, sp, #24
    2194:	4619      	mov	r1, r3
    2196:	9805      	ldr	r0, [sp, #20]
    2198:	f7ff fc7e 	bl	1a98 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
    219c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    219e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    21a0:	4413      	add	r3, r2
    21a2:	9319      	str	r3, [sp, #100]	; 0x64
  }
  return BufferDesc.ReturnValue;
    21a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
    21a6:	4618      	mov	r0, r3
    21a8:	b023      	add	sp, #140	; 0x8c
    21aa:	f85d fb04 	ldr.w	pc, [sp], #4
    21ae:	bf00      	nop
    21b0:	00015ccc 	.word	0x00015ccc

000021b4 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
    21b4:	b40e      	push	{r1, r2, r3}
    21b6:	b500      	push	{lr}
    21b8:	b084      	sub	sp, #16
    21ba:	9001      	str	r0, [sp, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
    21bc:	ab06      	add	r3, sp, #24
    21be:	9302      	str	r3, [sp, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
    21c0:	ab02      	add	r3, sp, #8
    21c2:	461a      	mov	r2, r3
    21c4:	9905      	ldr	r1, [sp, #20]
    21c6:	9801      	ldr	r0, [sp, #4]
    21c8:	f7ff fe24 	bl	1e14 <SEGGER_RTT_vprintf>
    21cc:	9003      	str	r0, [sp, #12]
  va_end(ParamList);
  return r;
    21ce:	9b03      	ldr	r3, [sp, #12]
}
    21d0:	4618      	mov	r0, r3
    21d2:	b004      	add	sp, #16
    21d4:	f85d eb04 	ldr.w	lr, [sp], #4
    21d8:	b003      	add	sp, #12
    21da:	4770      	bx	lr

000021dc <MCU_clocks>:
 *  -SIRCDIV1_CLK -->8 Mhz
 *  -SIRCDIV2_CLK -->8 Mhz
 *  -SOSCDIV1_CLK  -->Disabled
 *  -SOSCDIV2_CLK  -->Disabled
 */
void MCU_clocks( void ) {
    21dc:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );//Initializing MCU driver
    21de:	4805      	ldr	r0, [pc, #20]	; (21f4 <MCU_clocks+0x18>)
    21e0:	f004 f862 	bl	62a8 <Mcu_Init>
    Mcu_SetMode( Run_mode );//MCU on run mode.
    21e4:	2000      	movs	r0, #0
    21e6:	f004 f8d7 	bl	6398 <Mcu_SetMode>
    Mcu_InitClock( Clocks_conf_0 );//Executing clock configurations established in container.
    21ea:	2000      	movs	r0, #0
    21ec:	f004 f8b0 	bl	6350 <Mcu_InitClock>

    //Configuring Pll clock.
    /*while ( Mcu_GetPllStatus() != MCU_PLL_LOCKED );//Waiting until PLL is locked.
    Mcu_DistributePllClock();//Executing pll clock configuration established in container.*/
}
    21f0:	bf00      	nop
    21f2:	bd08      	pop	{r3, pc}
    21f4:	00016b64 	.word	0x00016b64

000021f8 <EcuM_Init>:
 * @brief This function initialices the microcontroller and the peripherals
 * 
 * 
 */
void EcuM_Init( void )
{   
    21f8:	b508      	push	{r3, lr}
    MCU_clocks();
    21fa:	f7ff ffef 	bl	21dc <MCU_clocks>
    OsIf_Init( NULL_PTR );  //Init Osif timer.
    21fe:	2000      	movs	r0, #0
    2200:	f000 fabd 	bl	277e <OsIf_Init>
    Platform_Init( NULL_PTR );  //Init platform driver and configuration.
    2204:	2000      	movs	r0, #0
    2206:	f000 f9b7 	bl	2578 <Platform_Init>
    Port_Init( &Port_Config );  //Init port driver and configuration.
    220a:	480a      	ldr	r0, [pc, #40]	; (2234 <EcuM_Init+0x3c>)
    220c:	f004 fc4e 	bl	6aac <Port_Init>
    Adc_Init( &Adc_Config );    //Init Adc driver and configuration.
    2210:	4809      	ldr	r0, [pc, #36]	; (2238 <EcuM_Init+0x40>)
    2212:	f006 fa71 	bl	86f8 <Adc_Init>
    Pwm_Init( &Pwm_Config );    //Init Pwm driver and configuration.
    2216:	4809      	ldr	r0, [pc, #36]	; (223c <EcuM_Init+0x44>)
    2218:	f00c fbb6 	bl	e988 <Pwm_Init>
    
    //Configuring interleave for PTB1 and PTB13.
    Port_Ci_Port_Ip_SetMuxModeSel( IP_PORTB, 1, PORT_MUX_ADC_INTERLEAVE );
    221c:	2208      	movs	r2, #8
    221e:	2101      	movs	r1, #1
    2220:	4807      	ldr	r0, [pc, #28]	; (2240 <EcuM_Init+0x48>)
    2222:	f004 fe17 	bl	6e54 <Port_Ci_Port_Ip_SetMuxModeSel>
    Port_Ci_Port_Ip_SetMuxModeSel( IP_PORTB, 13, PORT_MUX_ADC_INTERLEAVE );
    2226:	2208      	movs	r2, #8
    2228:	210d      	movs	r1, #13
    222a:	4805      	ldr	r0, [pc, #20]	; (2240 <EcuM_Init+0x48>)
    222c:	f004 fe12 	bl	6e54 <Port_Ci_Port_Ip_SetMuxModeSel>
}
    2230:	bf00      	nop
    2232:	bd08      	pop	{r3, pc}
    2234:	00016f7c 	.word	0x00016f7c
    2238:	00016680 	.word	0x00016680
    223c:	00016fec 	.word	0x00016fec
    2240:	4004a000 	.word	0x4004a000

00002244 <memcpy>:
    2244:	440a      	add	r2, r1
    2246:	4291      	cmp	r1, r2
    2248:	f100 33ff 	add.w	r3, r0, #4294967295
    224c:	d100      	bne.n	2250 <memcpy+0xc>
    224e:	4770      	bx	lr
    2250:	b510      	push	{r4, lr}
    2252:	f811 4b01 	ldrb.w	r4, [r1], #1
    2256:	f803 4f01 	strb.w	r4, [r3, #1]!
    225a:	4291      	cmp	r1, r2
    225c:	d1f9      	bne.n	2252 <memcpy+0xe>
    225e:	bd10      	pop	{r4, pc}

00002260 <memset>:
    2260:	4402      	add	r2, r0
    2262:	4603      	mov	r3, r0
    2264:	4293      	cmp	r3, r2
    2266:	d100      	bne.n	226a <memset+0xa>
    2268:	4770      	bx	lr
    226a:	f803 1b01 	strb.w	r1, [r3], #1
    226e:	e7f9      	b.n	2264 <memset+0x4>

00002270 <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    2270:	b086      	sub	sp, #24
    2272:	9003      	str	r0, [sp, #12]
    2274:	9102      	str	r1, [sp, #8]
    2276:	9201      	str	r2, [sp, #4]

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
    2278:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    227c:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    2280:	9305      	str	r3, [sp, #20]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
    2282:	9b01      	ldr	r3, [sp, #4]
    2284:	2b00      	cmp	r3, #0
    2286:	d007      	beq.n	2298 <IntCtrl_Ip_InstallHandlerPrivileged+0x28>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
    2288:	9b03      	ldr	r3, [sp, #12]
    228a:	3310      	adds	r3, #16
    228c:	009b      	lsls	r3, r3, #2
    228e:	9a05      	ldr	r2, [sp, #20]
    2290:	4413      	add	r3, r2
    2292:	681a      	ldr	r2, [r3, #0]
    2294:	9b01      	ldr	r3, [sp, #4]
    2296:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
    2298:	9b03      	ldr	r3, [sp, #12]
    229a:	3310      	adds	r3, #16
    229c:	009b      	lsls	r3, r3, #2
    229e:	9a05      	ldr	r2, [sp, #20]
    22a0:	4413      	add	r3, r2
    22a2:	9a02      	ldr	r2, [sp, #8]
    22a4:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
    22a6:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
    22aa:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
    22ae:	bf00      	nop
    22b0:	b006      	add	sp, #24
    22b2:	4770      	bx	lr

000022b4 <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
    22b4:	b082      	sub	sp, #8
    22b6:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    22b8:	9b01      	ldr	r3, [sp, #4]
    22ba:	f003 021f 	and.w	r2, r3, #31
    22be:	4905      	ldr	r1, [pc, #20]	; (22d4 <IntCtrl_Ip_EnableIrqPrivileged+0x20>)
    22c0:	9b01      	ldr	r3, [sp, #4]
    22c2:	095b      	lsrs	r3, r3, #5
    22c4:	2001      	movs	r0, #1
    22c6:	fa00 f202 	lsl.w	r2, r0, r2
    22ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    22ce:	bf00      	nop
    22d0:	b002      	add	sp, #8
    22d2:	4770      	bx	lr
    22d4:	e000e100 	.word	0xe000e100

000022d8 <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
    22d8:	b082      	sub	sp, #8
    22da:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    22dc:	9b01      	ldr	r3, [sp, #4]
    22de:	f003 021f 	and.w	r2, r3, #31
    22e2:	4906      	ldr	r1, [pc, #24]	; (22fc <IntCtrl_Ip_DisableIrqPrivileged+0x24>)
    22e4:	9b01      	ldr	r3, [sp, #4]
    22e6:	095b      	lsrs	r3, r3, #5
    22e8:	2001      	movs	r0, #1
    22ea:	fa00 f202 	lsl.w	r2, r0, r2
    22ee:	3320      	adds	r3, #32
    22f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    22f4:	bf00      	nop
    22f6:	b002      	add	sp, #8
    22f8:	4770      	bx	lr
    22fa:	bf00      	nop
    22fc:	e000e100 	.word	0xe000e100

00002300 <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    2300:	b084      	sub	sp, #16
    2302:	9001      	str	r0, [sp, #4]
    2304:	460b      	mov	r3, r1
    2306:	f88d 3003 	strb.w	r3, [sp, #3]
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    230a:	2304      	movs	r3, #4
    230c:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
    2310:	f89d 2003 	ldrb.w	r2, [sp, #3]
    2314:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2318:	fa02 f103 	lsl.w	r1, r2, r3
    231c:	4a04      	ldr	r2, [pc, #16]	; (2330 <IntCtrl_Ip_SetPriorityPrivileged+0x30>)
    231e:	9b01      	ldr	r3, [sp, #4]
    2320:	b2c9      	uxtb	r1, r1
    2322:	4413      	add	r3, r2
    2324:	460a      	mov	r2, r1
    2326:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
    232a:	bf00      	nop
    232c:	b004      	add	sp, #16
    232e:	4770      	bx	lr
    2330:	e000e100 	.word	0xe000e100

00002334 <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
    2334:	b084      	sub	sp, #16
    2336:	9001      	str	r0, [sp, #4]

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    2338:	2304      	movs	r3, #4
    233a:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
    233e:	4a09      	ldr	r2, [pc, #36]	; (2364 <IntCtrl_Ip_GetPriorityPrivileged+0x30>)
    2340:	9b01      	ldr	r3, [sp, #4]
    2342:	4413      	add	r3, r2
    2344:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
    2348:	b2db      	uxtb	r3, r3
    234a:	461a      	mov	r2, r3
    234c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2350:	fa42 f303 	asr.w	r3, r2, r3
    2354:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
    2358:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    235c:	4618      	mov	r0, r3
    235e:	b004      	add	sp, #16
    2360:	4770      	bx	lr
    2362:	bf00      	nop
    2364:	e000e100 	.word	0xe000e100

00002368 <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
    2368:	b082      	sub	sp, #8
    236a:	9001      	str	r0, [sp, #4]
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    236c:	9b01      	ldr	r3, [sp, #4]
    236e:	f003 021f 	and.w	r2, r3, #31
    2372:	4906      	ldr	r1, [pc, #24]	; (238c <IntCtrl_Ip_ClearPendingPrivileged+0x24>)
    2374:	9b01      	ldr	r3, [sp, #4]
    2376:	095b      	lsrs	r3, r3, #5
    2378:	2001      	movs	r0, #1
    237a:	fa00 f202 	lsl.w	r2, r0, r2
    237e:	3360      	adds	r3, #96	; 0x60
    2380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
    2384:	bf00      	nop
    2386:	b002      	add	sp, #8
    2388:	4770      	bx	lr
    238a:	bf00      	nop
    238c:	e000e100 	.word	0xe000e100

00002390 <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    2390:	b500      	push	{lr}
    2392:	b085      	sub	sp, #20
    2394:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    2396:	2300      	movs	r3, #0
    2398:	9303      	str	r3, [sp, #12]
    239a:	e05d      	b.n	2458 <IntCtrl_Ip_Init+0xc8>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    239c:	9b01      	ldr	r3, [sp, #4]
    239e:	6859      	ldr	r1, [r3, #4]
    23a0:	9a03      	ldr	r2, [sp, #12]
    23a2:	4613      	mov	r3, r2
    23a4:	005b      	lsls	r3, r3, #1
    23a6:	4413      	add	r3, r2
    23a8:	009b      	lsls	r3, r3, #2
    23aa:	440b      	add	r3, r1
    23ac:	681b      	ldr	r3, [r3, #0]
    23ae:	4618      	mov	r0, r3
    23b0:	f000 f899 	bl	24e6 <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    23b4:	9b01      	ldr	r3, [sp, #4]
    23b6:	6859      	ldr	r1, [r3, #4]
    23b8:	9a03      	ldr	r2, [sp, #12]
    23ba:	4613      	mov	r3, r2
    23bc:	005b      	lsls	r3, r3, #1
    23be:	4413      	add	r3, r2
    23c0:	009b      	lsls	r3, r3, #2
    23c2:	440b      	add	r3, r1
    23c4:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    23c6:	9b01      	ldr	r3, [sp, #4]
    23c8:	6859      	ldr	r1, [r3, #4]
    23ca:	9a03      	ldr	r2, [sp, #12]
    23cc:	4613      	mov	r3, r2
    23ce:	005b      	lsls	r3, r3, #1
    23d0:	4413      	add	r3, r2
    23d2:	009b      	lsls	r3, r3, #2
    23d4:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    23d6:	795b      	ldrb	r3, [r3, #5]
    23d8:	4619      	mov	r1, r3
    23da:	f000 f869 	bl	24b0 <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    23de:	9b01      	ldr	r3, [sp, #4]
    23e0:	6859      	ldr	r1, [r3, #4]
    23e2:	9a03      	ldr	r2, [sp, #12]
    23e4:	4613      	mov	r3, r2
    23e6:	005b      	lsls	r3, r3, #1
    23e8:	4413      	add	r3, r2
    23ea:	009b      	lsls	r3, r3, #2
    23ec:	440b      	add	r3, r1
    23ee:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    23f0:	9b01      	ldr	r3, [sp, #4]
    23f2:	6859      	ldr	r1, [r3, #4]
    23f4:	9a03      	ldr	r2, [sp, #12]
    23f6:	4613      	mov	r3, r2
    23f8:	005b      	lsls	r3, r3, #1
    23fa:	4413      	add	r3, r2
    23fc:	009b      	lsls	r3, r3, #2
    23fe:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    2400:	689b      	ldr	r3, [r3, #8]
    2402:	2200      	movs	r2, #0
    2404:	4619      	mov	r1, r3
    2406:	f000 f831 	bl	246c <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    240a:	9b01      	ldr	r3, [sp, #4]
    240c:	6859      	ldr	r1, [r3, #4]
    240e:	9a03      	ldr	r2, [sp, #12]
    2410:	4613      	mov	r3, r2
    2412:	005b      	lsls	r3, r3, #1
    2414:	4413      	add	r3, r2
    2416:	009b      	lsls	r3, r3, #2
    2418:	440b      	add	r3, r1
    241a:	791b      	ldrb	r3, [r3, #4]
    241c:	2b00      	cmp	r3, #0
    241e:	d00c      	beq.n	243a <IntCtrl_Ip_Init+0xaa>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    2420:	9b01      	ldr	r3, [sp, #4]
    2422:	6859      	ldr	r1, [r3, #4]
    2424:	9a03      	ldr	r2, [sp, #12]
    2426:	4613      	mov	r3, r2
    2428:	005b      	lsls	r3, r3, #1
    242a:	4413      	add	r3, r2
    242c:	009b      	lsls	r3, r3, #2
    242e:	440b      	add	r3, r1
    2430:	681b      	ldr	r3, [r3, #0]
    2432:	4618      	mov	r0, r3
    2434:	f000 f828 	bl	2488 <IntCtrl_Ip_EnableIrq>
    2438:	e00b      	b.n	2452 <IntCtrl_Ip_Init+0xc2>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    243a:	9b01      	ldr	r3, [sp, #4]
    243c:	6859      	ldr	r1, [r3, #4]
    243e:	9a03      	ldr	r2, [sp, #12]
    2440:	4613      	mov	r3, r2
    2442:	005b      	lsls	r3, r3, #1
    2444:	4413      	add	r3, r2
    2446:	009b      	lsls	r3, r3, #2
    2448:	440b      	add	r3, r1
    244a:	681b      	ldr	r3, [r3, #0]
    244c:	4618      	mov	r0, r3
    244e:	f000 f825 	bl	249c <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    2452:	9b03      	ldr	r3, [sp, #12]
    2454:	3301      	adds	r3, #1
    2456:	9303      	str	r3, [sp, #12]
    2458:	9b01      	ldr	r3, [sp, #4]
    245a:	681b      	ldr	r3, [r3, #0]
    245c:	9a03      	ldr	r2, [sp, #12]
    245e:	429a      	cmp	r2, r3
    2460:	d39c      	bcc.n	239c <IntCtrl_Ip_Init+0xc>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
    2462:	2300      	movs	r3, #0
}
    2464:	4618      	mov	r0, r3
    2466:	b005      	add	sp, #20
    2468:	f85d fb04 	ldr.w	pc, [sp], #4

0000246c <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    246c:	b500      	push	{lr}
    246e:	b085      	sub	sp, #20
    2470:	9003      	str	r0, [sp, #12]
    2472:	9102      	str	r1, [sp, #8]
    2474:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
    2476:	9a01      	ldr	r2, [sp, #4]
    2478:	9902      	ldr	r1, [sp, #8]
    247a:	9803      	ldr	r0, [sp, #12]
    247c:	f7ff fef8 	bl	2270 <IntCtrl_Ip_InstallHandlerPrivileged>
}
    2480:	bf00      	nop
    2482:	b005      	add	sp, #20
    2484:	f85d fb04 	ldr.w	pc, [sp], #4

00002488 <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
    2488:	b500      	push	{lr}
    248a:	b083      	sub	sp, #12
    248c:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
    248e:	9801      	ldr	r0, [sp, #4]
    2490:	f7ff ff10 	bl	22b4 <IntCtrl_Ip_EnableIrqPrivileged>
}
    2494:	bf00      	nop
    2496:	b003      	add	sp, #12
    2498:	f85d fb04 	ldr.w	pc, [sp], #4

0000249c <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
    249c:	b500      	push	{lr}
    249e:	b083      	sub	sp, #12
    24a0:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
    24a2:	9801      	ldr	r0, [sp, #4]
    24a4:	f7ff ff18 	bl	22d8 <IntCtrl_Ip_DisableIrqPrivileged>
}
    24a8:	bf00      	nop
    24aa:	b003      	add	sp, #12
    24ac:	f85d fb04 	ldr.w	pc, [sp], #4

000024b0 <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    24b0:	b500      	push	{lr}
    24b2:	b083      	sub	sp, #12
    24b4:	9001      	str	r0, [sp, #4]
    24b6:	460b      	mov	r3, r1
    24b8:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
    24bc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    24c0:	4619      	mov	r1, r3
    24c2:	9801      	ldr	r0, [sp, #4]
    24c4:	f7ff ff1c 	bl	2300 <IntCtrl_Ip_SetPriorityPrivileged>
}
    24c8:	bf00      	nop
    24ca:	b003      	add	sp, #12
    24cc:	f85d fb04 	ldr.w	pc, [sp], #4

000024d0 <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
    24d0:	b500      	push	{lr}
    24d2:	b083      	sub	sp, #12
    24d4:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
    24d6:	9801      	ldr	r0, [sp, #4]
    24d8:	f7ff ff2c 	bl	2334 <IntCtrl_Ip_GetPriorityPrivileged>
    24dc:	4603      	mov	r3, r0
}
    24de:	4618      	mov	r0, r3
    24e0:	b003      	add	sp, #12
    24e2:	f85d fb04 	ldr.w	pc, [sp], #4

000024e6 <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
    24e6:	b500      	push	{lr}
    24e8:	b083      	sub	sp, #12
    24ea:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
    24ec:	9801      	ldr	r0, [sp, #4]
    24ee:	f7ff ff3b 	bl	2368 <IntCtrl_Ip_ClearPendingPrivileged>
}
    24f2:	bf00      	nop
    24f4:	b003      	add	sp, #12
    24f6:	f85d fb04 	ldr.w	pc, [sp], #4
    24fa:	bf00      	nop

000024fc <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    24fc:	b500      	push	{lr}
    24fe:	b083      	sub	sp, #12
    2500:	9001      	str	r0, [sp, #4]
    2502:	460b      	mov	r3, r1
    2504:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
    2508:	f89d 3003 	ldrb.w	r3, [sp, #3]
    250c:	2b00      	cmp	r3, #0
    250e:	d003      	beq.n	2518 <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
    2510:	9801      	ldr	r0, [sp, #4]
    2512:	f7ff ffb9 	bl	2488 <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
    2516:	e002      	b.n	251e <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    2518:	9801      	ldr	r0, [sp, #4]
    251a:	f7ff ffbf 	bl	249c <IntCtrl_Ip_DisableIrq>
}
    251e:	bf00      	nop
    2520:	b003      	add	sp, #12
    2522:	f85d fb04 	ldr.w	pc, [sp], #4

00002526 <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    2526:	b500      	push	{lr}
    2528:	b083      	sub	sp, #12
    252a:	9001      	str	r0, [sp, #4]
    252c:	460b      	mov	r3, r1
    252e:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
    2532:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2536:	4619      	mov	r1, r3
    2538:	9801      	ldr	r0, [sp, #4]
    253a:	f7ff ffb9 	bl	24b0 <IntCtrl_Ip_SetPriority>
}
    253e:	bf00      	nop
    2540:	b003      	add	sp, #12
    2542:	f85d fb04 	ldr.w	pc, [sp], #4

00002546 <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
    2546:	b500      	push	{lr}
    2548:	b083      	sub	sp, #12
    254a:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
    254c:	9801      	ldr	r0, [sp, #4]
    254e:	f7ff ffbf 	bl	24d0 <IntCtrl_Ip_GetPriority>
    2552:	4603      	mov	r3, r0
}
    2554:	4618      	mov	r0, r3
    2556:	b003      	add	sp, #12
    2558:	f85d fb04 	ldr.w	pc, [sp], #4

0000255c <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    255c:	b500      	push	{lr}
    255e:	b085      	sub	sp, #20
    2560:	9003      	str	r0, [sp, #12]
    2562:	9102      	str	r1, [sp, #8]
    2564:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    2566:	9a01      	ldr	r2, [sp, #4]
    2568:	9902      	ldr	r1, [sp, #8]
    256a:	9803      	ldr	r0, [sp, #12]
    256c:	f7ff ff7e 	bl	246c <IntCtrl_Ip_InstallHandler>
}
    2570:	bf00      	nop
    2572:	b005      	add	sp, #20
    2574:	f85d fb04 	ldr.w	pc, [sp], #4

00002578 <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
    2578:	b500      	push	{lr}
    257a:	b085      	sub	sp, #20
    257c:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
    257e:	2300      	movs	r3, #0
    2580:	f88d 300f 	strb.w	r3, [sp, #15]
        {
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
#endif /*(PLATFORM_DEV_ERROR_DETECT == STD_ON)*/


            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
    2584:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2588:	4a05      	ldr	r2, [pc, #20]	; (25a0 <Platform_Init+0x28>)
    258a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    258e:	681b      	ldr	r3, [r3, #0]
    2590:	4618      	mov	r0, r3
    2592:	f000 f8c7 	bl	2724 <Platform_Ipw_Init>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
    2596:	bf00      	nop
    2598:	b005      	add	sp, #20
    259a:	f85d fb04 	ldr.w	pc, [sp], #4
    259e:	bf00      	nop
    25a0:	00016bd0 	.word	0x00016bd0

000025a4 <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    25a4:	b500      	push	{lr}
    25a6:	b085      	sub	sp, #20
    25a8:	9001      	str	r0, [sp, #4]
    25aa:	460b      	mov	r3, r1
    25ac:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    25b0:	2300      	movs	r3, #0
    25b2:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
    25b6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    25ba:	4619      	mov	r1, r3
    25bc:	9801      	ldr	r0, [sp, #4]
    25be:	f7ff ff9d 	bl	24fc <Platform_Ipw_SetIrq>
    }
    return RetValue;
    25c2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    25c6:	4618      	mov	r0, r3
    25c8:	b005      	add	sp, #20
    25ca:	f85d fb04 	ldr.w	pc, [sp], #4

000025ce <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    25ce:	b500      	push	{lr}
    25d0:	b085      	sub	sp, #20
    25d2:	9001      	str	r0, [sp, #4]
    25d4:	460b      	mov	r3, r1
    25d6:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    25da:	2300      	movs	r3, #0
    25dc:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
    25e0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    25e4:	4619      	mov	r1, r3
    25e6:	9801      	ldr	r0, [sp, #4]
    25e8:	f7ff ff9d 	bl	2526 <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
    25ec:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    25f0:	4618      	mov	r0, r3
    25f2:	b005      	add	sp, #20
    25f4:	f85d fb04 	ldr.w	pc, [sp], #4

000025f8 <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
    25f8:	b500      	push	{lr}
    25fa:	b085      	sub	sp, #20
    25fc:	9001      	str	r0, [sp, #4]
    25fe:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    2600:	2300      	movs	r3, #0
    2602:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
    2606:	9801      	ldr	r0, [sp, #4]
    2608:	f7ff ff9d 	bl	2546 <Platform_Ipw_GetIrqPriority>
    260c:	4603      	mov	r3, r0
    260e:	461a      	mov	r2, r3
    2610:	9b00      	ldr	r3, [sp, #0]
    2612:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
    2614:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    2618:	4618      	mov	r0, r3
    261a:	b005      	add	sp, #20
    261c:	f85d fb04 	ldr.w	pc, [sp], #4

00002620 <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
    2620:	b500      	push	{lr}
    2622:	b087      	sub	sp, #28
    2624:	9003      	str	r0, [sp, #12]
    2626:	9102      	str	r1, [sp, #8]
    2628:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    262a:	2300      	movs	r3, #0
    262c:	f88d 3017 	strb.w	r3, [sp, #23]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    2630:	9a01      	ldr	r2, [sp, #4]
    2632:	9902      	ldr	r1, [sp, #8]
    2634:	9803      	ldr	r0, [sp, #12]
    2636:	f7ff ff91 	bl	255c <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
    263a:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    263e:	4618      	mov	r0, r3
    2640:	b007      	add	sp, #28
    2642:	f85d fb04 	ldr.w	pc, [sp], #4
    2646:	bf00      	nop

00002648 <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    2648:	b500      	push	{lr}
    264a:	b085      	sub	sp, #20
    264c:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    264e:	2300      	movs	r3, #0
    2650:	9303      	str	r3, [sp, #12]
    2652:	e05d      	b.n	2710 <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    2654:	9b01      	ldr	r3, [sp, #4]
    2656:	6859      	ldr	r1, [r3, #4]
    2658:	9a03      	ldr	r2, [sp, #12]
    265a:	4613      	mov	r3, r2
    265c:	005b      	lsls	r3, r3, #1
    265e:	4413      	add	r3, r2
    2660:	009b      	lsls	r3, r3, #2
    2662:	440b      	add	r3, r1
    2664:	681b      	ldr	r3, [r3, #0]
    2666:	4618      	mov	r0, r3
    2668:	f7ff ff3d 	bl	24e6 <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    266c:	9b01      	ldr	r3, [sp, #4]
    266e:	6859      	ldr	r1, [r3, #4]
    2670:	9a03      	ldr	r2, [sp, #12]
    2672:	4613      	mov	r3, r2
    2674:	005b      	lsls	r3, r3, #1
    2676:	4413      	add	r3, r2
    2678:	009b      	lsls	r3, r3, #2
    267a:	440b      	add	r3, r1
    267c:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    267e:	9b01      	ldr	r3, [sp, #4]
    2680:	6859      	ldr	r1, [r3, #4]
    2682:	9a03      	ldr	r2, [sp, #12]
    2684:	4613      	mov	r3, r2
    2686:	005b      	lsls	r3, r3, #1
    2688:	4413      	add	r3, r2
    268a:	009b      	lsls	r3, r3, #2
    268c:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    268e:	795b      	ldrb	r3, [r3, #5]
    2690:	4619      	mov	r1, r3
    2692:	f7ff ff0d 	bl	24b0 <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    2696:	9b01      	ldr	r3, [sp, #4]
    2698:	6859      	ldr	r1, [r3, #4]
    269a:	9a03      	ldr	r2, [sp, #12]
    269c:	4613      	mov	r3, r2
    269e:	005b      	lsls	r3, r3, #1
    26a0:	4413      	add	r3, r2
    26a2:	009b      	lsls	r3, r3, #2
    26a4:	440b      	add	r3, r1
    26a6:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    26a8:	9b01      	ldr	r3, [sp, #4]
    26aa:	6859      	ldr	r1, [r3, #4]
    26ac:	9a03      	ldr	r2, [sp, #12]
    26ae:	4613      	mov	r3, r2
    26b0:	005b      	lsls	r3, r3, #1
    26b2:	4413      	add	r3, r2
    26b4:	009b      	lsls	r3, r3, #2
    26b6:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    26b8:	689b      	ldr	r3, [r3, #8]
    26ba:	2200      	movs	r2, #0
    26bc:	4619      	mov	r1, r3
    26be:	f7ff fed5 	bl	246c <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    26c2:	9b01      	ldr	r3, [sp, #4]
    26c4:	6859      	ldr	r1, [r3, #4]
    26c6:	9a03      	ldr	r2, [sp, #12]
    26c8:	4613      	mov	r3, r2
    26ca:	005b      	lsls	r3, r3, #1
    26cc:	4413      	add	r3, r2
    26ce:	009b      	lsls	r3, r3, #2
    26d0:	440b      	add	r3, r1
    26d2:	791b      	ldrb	r3, [r3, #4]
    26d4:	2b00      	cmp	r3, #0
    26d6:	d00c      	beq.n	26f2 <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    26d8:	9b01      	ldr	r3, [sp, #4]
    26da:	6859      	ldr	r1, [r3, #4]
    26dc:	9a03      	ldr	r2, [sp, #12]
    26de:	4613      	mov	r3, r2
    26e0:	005b      	lsls	r3, r3, #1
    26e2:	4413      	add	r3, r2
    26e4:	009b      	lsls	r3, r3, #2
    26e6:	440b      	add	r3, r1
    26e8:	681b      	ldr	r3, [r3, #0]
    26ea:	4618      	mov	r0, r3
    26ec:	f7ff fecc 	bl	2488 <IntCtrl_Ip_EnableIrq>
    26f0:	e00b      	b.n	270a <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    26f2:	9b01      	ldr	r3, [sp, #4]
    26f4:	6859      	ldr	r1, [r3, #4]
    26f6:	9a03      	ldr	r2, [sp, #12]
    26f8:	4613      	mov	r3, r2
    26fa:	005b      	lsls	r3, r3, #1
    26fc:	4413      	add	r3, r2
    26fe:	009b      	lsls	r3, r3, #2
    2700:	440b      	add	r3, r1
    2702:	681b      	ldr	r3, [r3, #0]
    2704:	4618      	mov	r0, r3
    2706:	f7ff fec9 	bl	249c <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    270a:	9b03      	ldr	r3, [sp, #12]
    270c:	3301      	adds	r3, #1
    270e:	9303      	str	r3, [sp, #12]
    2710:	9b01      	ldr	r3, [sp, #4]
    2712:	681b      	ldr	r3, [r3, #0]
    2714:	9a03      	ldr	r2, [sp, #12]
    2716:	429a      	cmp	r2, r3
    2718:	d39c      	bcc.n	2654 <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    271a:	2300      	movs	r3, #0
}
    271c:	4618      	mov	r0, r3
    271e:	b005      	add	sp, #20
    2720:	f85d fb04 	ldr.w	pc, [sp], #4

00002724 <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    2724:	b500      	push	{lr}
    2726:	b085      	sub	sp, #20
    2728:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    272a:	2300      	movs	r3, #0
    272c:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    2730:	9b01      	ldr	r3, [sp, #4]
    2732:	681b      	ldr	r3, [r3, #0]
    2734:	2b00      	cmp	r3, #0
    2736:	d007      	beq.n	2748 <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    2738:	9b01      	ldr	r3, [sp, #4]
    273a:	681b      	ldr	r3, [r3, #0]
    273c:	4618      	mov	r0, r3
    273e:	f7ff ff83 	bl	2648 <Platform_Ipw_InitIntCtrl>
    2742:	4603      	mov	r3, r0
    2744:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    2748:	f89d 300f 	ldrb.w	r3, [sp, #15]
    274c:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    274e:	bf00      	nop
    2750:	b005      	add	sp, #20
    2752:	f85d fb04 	ldr.w	pc, [sp], #4

00002756 <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    2756:	2300      	movs	r3, #0
}
    2758:	4618      	mov	r0, r3
    275a:	4770      	bx	lr

0000275c <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    275c:	b082      	sub	sp, #8
    275e:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    2760:	2301      	movs	r3, #1
}
    2762:	4618      	mov	r0, r3
    2764:	b002      	add	sp, #8
    2766:	4770      	bx	lr

00002768 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    2768:	b082      	sub	sp, #8
    276a:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    276c:	bf00      	nop
    276e:	b002      	add	sp, #8
    2770:	4770      	bx	lr

00002772 <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    2772:	b082      	sub	sp, #8
    2774:	9001      	str	r0, [sp, #4]
    return Micros;
    2776:	9b01      	ldr	r3, [sp, #4]
}
    2778:	4618      	mov	r0, r3
    277a:	b002      	add	sp, #8
    277c:	4770      	bx	lr

0000277e <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    277e:	b500      	push	{lr}
    2780:	b083      	sub	sp, #12
    2782:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    2784:	f000 f86c 	bl	2860 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    2788:	bf00      	nop
    278a:	b003      	add	sp, #12
    278c:	f85d fb04 	ldr.w	pc, [sp], #4

00002790 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    2790:	b500      	push	{lr}
    2792:	b085      	sub	sp, #20
    2794:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    2796:	2300      	movs	r3, #0
    2798:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    279a:	9b01      	ldr	r3, [sp, #4]
    279c:	2b00      	cmp	r3, #0
    279e:	d003      	beq.n	27a8 <OsIf_GetCounter+0x18>
    27a0:	9b01      	ldr	r3, [sp, #4]
    27a2:	2b01      	cmp	r3, #1
    27a4:	d004      	beq.n	27b0 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    27a6:	e007      	b.n	27b8 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    27a8:	f7ff ffd5 	bl	2756 <OsIf_Timer_Dummy_GetCounter>
    27ac:	9003      	str	r0, [sp, #12]
            break;
    27ae:	e003      	b.n	27b8 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    27b0:	f000 f872 	bl	2898 <OsIf_Timer_System_GetCounter>
    27b4:	9003      	str	r0, [sp, #12]
            break;
    27b6:	bf00      	nop
    }

    return Value;
    27b8:	9b03      	ldr	r3, [sp, #12]
}
    27ba:	4618      	mov	r0, r3
    27bc:	b005      	add	sp, #20
    27be:	f85d fb04 	ldr.w	pc, [sp], #4

000027c2 <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    27c2:	b500      	push	{lr}
    27c4:	b085      	sub	sp, #20
    27c6:	9001      	str	r0, [sp, #4]
    27c8:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    27ca:	2300      	movs	r3, #0
    27cc:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    27ce:	9b00      	ldr	r3, [sp, #0]
    27d0:	2b00      	cmp	r3, #0
    27d2:	d003      	beq.n	27dc <OsIf_GetElapsed+0x1a>
    27d4:	9b00      	ldr	r3, [sp, #0]
    27d6:	2b01      	cmp	r3, #1
    27d8:	d005      	beq.n	27e6 <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    27da:	e009      	b.n	27f0 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    27dc:	9801      	ldr	r0, [sp, #4]
    27de:	f7ff ffbd 	bl	275c <OsIf_Timer_Dummy_GetElapsed>
    27e2:	9003      	str	r0, [sp, #12]
            break;
    27e4:	e004      	b.n	27f0 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    27e6:	9801      	ldr	r0, [sp, #4]
    27e8:	f000 f864 	bl	28b4 <OsIf_Timer_System_GetElapsed>
    27ec:	9003      	str	r0, [sp, #12]
            break;
    27ee:	bf00      	nop
    }

    return Value;
    27f0:	9b03      	ldr	r3, [sp, #12]
}
    27f2:	4618      	mov	r0, r3
    27f4:	b005      	add	sp, #20
    27f6:	f85d fb04 	ldr.w	pc, [sp], #4

000027fa <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    27fa:	b500      	push	{lr}
    27fc:	b083      	sub	sp, #12
    27fe:	9001      	str	r0, [sp, #4]
    2800:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    2802:	9b00      	ldr	r3, [sp, #0]
    2804:	2b00      	cmp	r3, #0
    2806:	d003      	beq.n	2810 <OsIf_SetTimerFrequency+0x16>
    2808:	9b00      	ldr	r3, [sp, #0]
    280a:	2b01      	cmp	r3, #1
    280c:	d004      	beq.n	2818 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    280e:	e007      	b.n	2820 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    2810:	9801      	ldr	r0, [sp, #4]
    2812:	f7ff ffa9 	bl	2768 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    2816:	e003      	b.n	2820 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    2818:	9801      	ldr	r0, [sp, #4]
    281a:	f000 f85b 	bl	28d4 <OsIf_Timer_System_SetTimerFrequency>
            break;
    281e:	bf00      	nop
    }
}
    2820:	bf00      	nop
    2822:	b003      	add	sp, #12
    2824:	f85d fb04 	ldr.w	pc, [sp], #4

00002828 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    2828:	b500      	push	{lr}
    282a:	b085      	sub	sp, #20
    282c:	9001      	str	r0, [sp, #4]
    282e:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    2830:	2300      	movs	r3, #0
    2832:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    2834:	9b00      	ldr	r3, [sp, #0]
    2836:	2b00      	cmp	r3, #0
    2838:	d003      	beq.n	2842 <OsIf_MicrosToTicks+0x1a>
    283a:	9b00      	ldr	r3, [sp, #0]
    283c:	2b01      	cmp	r3, #1
    283e:	d005      	beq.n	284c <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    2840:	e009      	b.n	2856 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    2842:	9801      	ldr	r0, [sp, #4]
    2844:	f7ff ff95 	bl	2772 <OsIf_Timer_Dummy_MicrosToTicks>
    2848:	9003      	str	r0, [sp, #12]
            break;
    284a:	e004      	b.n	2856 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    284c:	9801      	ldr	r0, [sp, #4]
    284e:	f000 f84f 	bl	28f0 <OsIf_Timer_System_MicrosToTicks>
    2852:	9003      	str	r0, [sp, #12]
            break;
    2854:	bf00      	nop
    }

    return Value;
    2856:	9b03      	ldr	r3, [sp, #12]
}
    2858:	4618      	mov	r0, r3
    285a:	b005      	add	sp, #20
    285c:	f85d fb04 	ldr.w	pc, [sp], #4

00002860 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    2860:	b500      	push	{lr}
    2862:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    2864:	2300      	movs	r3, #0
    2866:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    2868:	4a09      	ldr	r2, [pc, #36]	; (2890 <OsIf_Timer_System_Init+0x30>)
    286a:	9b01      	ldr	r3, [sp, #4]
    286c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2870:	685a      	ldr	r2, [r3, #4]
    2872:	4908      	ldr	r1, [pc, #32]	; (2894 <OsIf_Timer_System_Init+0x34>)
    2874:	9b01      	ldr	r3, [sp, #4]
    2876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    287a:	4a06      	ldr	r2, [pc, #24]	; (2894 <OsIf_Timer_System_Init+0x34>)
    287c:	9b01      	ldr	r3, [sp, #4]
    287e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2882:	4618      	mov	r0, r3
    2884:	f000 f868 	bl	2958 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    2888:	bf00      	nop
    288a:	b003      	add	sp, #12
    288c:	f85d fb04 	ldr.w	pc, [sp], #4
    2890:	00016b88 	.word	0x00016b88
    2894:	1fff8b74 	.word	0x1fff8b74

00002898 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    2898:	b500      	push	{lr}
    289a:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    289c:	2300      	movs	r3, #0
    289e:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    28a0:	2300      	movs	r3, #0
    28a2:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    28a4:	f000 f86c 	bl	2980 <OsIf_Timer_System_Internal_GetCounter>
    28a8:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    28aa:	9b01      	ldr	r3, [sp, #4]
}
    28ac:	4618      	mov	r0, r3
    28ae:	b003      	add	sp, #12
    28b0:	f85d fb04 	ldr.w	pc, [sp], #4

000028b4 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    28b4:	b500      	push	{lr}
    28b6:	b085      	sub	sp, #20
    28b8:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    28ba:	2300      	movs	r3, #0
    28bc:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    28be:	2300      	movs	r3, #0
    28c0:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    28c2:	9801      	ldr	r0, [sp, #4]
    28c4:	f000 f864 	bl	2990 <OsIf_Timer_System_Internal_GetElapsed>
    28c8:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    28ca:	9b03      	ldr	r3, [sp, #12]
}
    28cc:	4618      	mov	r0, r3
    28ce:	b005      	add	sp, #20
    28d0:	f85d fb04 	ldr.w	pc, [sp], #4

000028d4 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    28d4:	b084      	sub	sp, #16
    28d6:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    28d8:	2300      	movs	r3, #0
    28da:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    28dc:	4903      	ldr	r1, [pc, #12]	; (28ec <OsIf_Timer_System_SetTimerFrequency+0x18>)
    28de:	9b03      	ldr	r3, [sp, #12]
    28e0:	9a01      	ldr	r2, [sp, #4]
    28e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    28e6:	bf00      	nop
    28e8:	b004      	add	sp, #16
    28ea:	4770      	bx	lr
    28ec:	1fff8b74 	.word	0x1fff8b74

000028f0 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    28f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    28f2:	b087      	sub	sp, #28
    28f4:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    28f6:	2100      	movs	r1, #0
    28f8:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    28fa:	2100      	movs	r1, #0
    28fc:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    28fe:	9901      	ldr	r1, [sp, #4]
    2900:	2000      	movs	r0, #0
    2902:	460e      	mov	r6, r1
    2904:	4607      	mov	r7, r0
    2906:	4812      	ldr	r0, [pc, #72]	; (2950 <OsIf_Timer_System_MicrosToTicks+0x60>)
    2908:	9904      	ldr	r1, [sp, #16]
    290a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    290e:	2000      	movs	r0, #0
    2910:	460c      	mov	r4, r1
    2912:	4605      	mov	r5, r0
    2914:	fb04 f007 	mul.w	r0, r4, r7
    2918:	fb06 f105 	mul.w	r1, r6, r5
    291c:	4401      	add	r1, r0
    291e:	fba6 2304 	umull	r2, r3, r6, r4
    2922:	4419      	add	r1, r3
    2924:	460b      	mov	r3, r1
    2926:	e9cd 2302 	strd	r2, r3, [sp, #8]
    292a:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    292e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    2932:	4a08      	ldr	r2, [pc, #32]	; (2954 <OsIf_Timer_System_MicrosToTicks+0x64>)
    2934:	f04f 0300 	mov.w	r3, #0
    2938:	f7fd fe34 	bl	5a4 <__aeabi_uldivmod>
    293c:	4602      	mov	r2, r0
    293e:	460b      	mov	r3, r1
    2940:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    2944:	9b02      	ldr	r3, [sp, #8]
    2946:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    2948:	9b05      	ldr	r3, [sp, #20]
}
    294a:	4618      	mov	r0, r3
    294c:	b007      	add	sp, #28
    294e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2950:	1fff8b74 	.word	0x1fff8b74
    2954:	000f4240 	.word	0x000f4240

00002958 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    2958:	b082      	sub	sp, #8
    295a:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    295c:	4b07      	ldr	r3, [pc, #28]	; (297c <OsIf_Timer_System_Internal_Init+0x24>)
    295e:	2200      	movs	r2, #0
    2960:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    2962:	4b06      	ldr	r3, [pc, #24]	; (297c <OsIf_Timer_System_Internal_Init+0x24>)
    2964:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    2968:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    296a:	4b04      	ldr	r3, [pc, #16]	; (297c <OsIf_Timer_System_Internal_Init+0x24>)
    296c:	2200      	movs	r2, #0
    296e:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    2970:	4b02      	ldr	r3, [pc, #8]	; (297c <OsIf_Timer_System_Internal_Init+0x24>)
    2972:	2205      	movs	r2, #5
    2974:	601a      	str	r2, [r3, #0]
}
    2976:	bf00      	nop
    2978:	b002      	add	sp, #8
    297a:	4770      	bx	lr
    297c:	e000e010 	.word	0xe000e010

00002980 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    2980:	4b02      	ldr	r3, [pc, #8]	; (298c <OsIf_Timer_System_Internal_GetCounter+0xc>)
    2982:	689b      	ldr	r3, [r3, #8]
    2984:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    2988:	4618      	mov	r0, r3
    298a:	4770      	bx	lr
    298c:	e000e010 	.word	0xe000e010

00002990 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    2990:	b084      	sub	sp, #16
    2992:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    2994:	4b10      	ldr	r3, [pc, #64]	; (29d8 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    2996:	689b      	ldr	r3, [r3, #8]
    2998:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    299c:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    299e:	2300      	movs	r3, #0
    29a0:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    29a2:	9b01      	ldr	r3, [sp, #4]
    29a4:	681b      	ldr	r3, [r3, #0]
    29a6:	9a02      	ldr	r2, [sp, #8]
    29a8:	429a      	cmp	r2, r3
    29aa:	d909      	bls.n	29c0 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    29ac:	9b01      	ldr	r3, [sp, #4]
    29ae:	681a      	ldr	r2, [r3, #0]
    29b0:	9b02      	ldr	r3, [sp, #8]
    29b2:	1ad3      	subs	r3, r2, r3
    29b4:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    29b8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    29bc:	9303      	str	r3, [sp, #12]
    29be:	e004      	b.n	29ca <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    29c0:	9b01      	ldr	r3, [sp, #4]
    29c2:	681a      	ldr	r2, [r3, #0]
    29c4:	9b02      	ldr	r3, [sp, #8]
    29c6:	1ad3      	subs	r3, r2, r3
    29c8:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    29ca:	9b01      	ldr	r3, [sp, #4]
    29cc:	9a02      	ldr	r2, [sp, #8]
    29ce:	601a      	str	r2, [r3, #0]

    return dif;
    29d0:	9b03      	ldr	r3, [sp, #12]
}
    29d2:	4618      	mov	r0, r3
    29d4:	b004      	add	sp, #16
    29d6:	4770      	bx	lr
    29d8:	e000e010 	.word	0xe000e010

000029dc <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    29dc:	b082      	sub	sp, #8
    29de:	9001      	str	r0, [sp, #4]
    29e0:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    29e2:	bf00      	nop
    29e4:	b002      	add	sp, #8
    29e6:	4770      	bx	lr

000029e8 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    29e8:	b500      	push	{lr}
    29ea:	b085      	sub	sp, #20
    29ec:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    29ee:	4b24      	ldr	r3, [pc, #144]	; (2a80 <Clock_Ip_UpdateDriverContext+0x98>)
    29f0:	2201      	movs	r2, #1
    29f2:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    29f4:	4b23      	ldr	r3, [pc, #140]	; (2a84 <Clock_Ip_UpdateDriverContext+0x9c>)
    29f6:	681b      	ldr	r3, [r3, #0]
    29f8:	2102      	movs	r1, #2
    29fa:	4618      	mov	r0, r3
    29fc:	f003 fc32 	bl	6264 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    2a00:	2300      	movs	r3, #0
    2a02:	f88d 300f 	strb.w	r3, [sp, #15]
    2a06:	e015      	b.n	2a34 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    2a08:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2a0c:	9a01      	ldr	r2, [sp, #4]
    2a0e:	334a      	adds	r3, #74	; 0x4a
    2a10:	00db      	lsls	r3, r3, #3
    2a12:	4413      	add	r3, r2
    2a14:	6858      	ldr	r0, [r3, #4]
    2a16:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2a1a:	9a01      	ldr	r2, [sp, #4]
    2a1c:	334a      	adds	r3, #74	; 0x4a
    2a1e:	00db      	lsls	r3, r3, #3
    2a20:	4413      	add	r3, r2
    2a22:	689b      	ldr	r3, [r3, #8]
    2a24:	4619      	mov	r1, r3
    2a26:	f001 fadc 	bl	3fe2 <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    2a2a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2a2e:	3301      	adds	r3, #1
    2a30:	f88d 300f 	strb.w	r3, [sp, #15]
    2a34:	9b01      	ldr	r3, [sp, #4]
    2a36:	7bdb      	ldrb	r3, [r3, #15]
    2a38:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2a3c:	429a      	cmp	r2, r3
    2a3e:	d3e3      	bcc.n	2a08 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    2a40:	f000 f824 	bl	2a8c <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    2a44:	2301      	movs	r3, #1
    2a46:	f88d 300f 	strb.w	r3, [sp, #15]
    2a4a:	e00e      	b.n	2a6a <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    2a4c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2a50:	9b01      	ldr	r3, [sp, #4]
    2a52:	327e      	adds	r2, #126	; 0x7e
    2a54:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    2a58:	490b      	ldr	r1, [pc, #44]	; (2a88 <Clock_Ip_UpdateDriverContext+0xa0>)
    2a5a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2a5e:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    2a60:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2a64:	3301      	adds	r3, #1
    2a66:	f88d 300f 	strb.w	r3, [sp, #15]
    2a6a:	9b01      	ldr	r3, [sp, #4]
    2a6c:	7cdb      	ldrb	r3, [r3, #19]
    2a6e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2a72:	429a      	cmp	r2, r3
    2a74:	d3ea      	bcc.n	2a4c <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    2a76:	bf00      	nop
    2a78:	bf00      	nop
    2a7a:	b005      	add	sp, #20
    2a7c:	f85d fb04 	ldr.w	pc, [sp], #4
    2a80:	1fff8b10 	.word	0x1fff8b10
    2a84:	1fff8b78 	.word	0x1fff8b78
    2a88:	1fff8b84 	.word	0x1fff8b84

00002a8c <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    2a8c:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    2a8e:	4b23      	ldr	r3, [pc, #140]	; (2b1c <Clock_Ip_CallEmptyCallbacks+0x90>)
    2a90:	781b      	ldrb	r3, [r3, #0]
    2a92:	f083 0301 	eor.w	r3, r3, #1
    2a96:	b2db      	uxtb	r3, r3
    2a98:	2b00      	cmp	r3, #0
    2a9a:	d03d      	beq.n	2b18 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    2a9c:	4b1f      	ldr	r3, [pc, #124]	; (2b1c <Clock_Ip_CallEmptyCallbacks+0x90>)
    2a9e:	2201      	movs	r2, #1
    2aa0:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    2aa2:	4b1f      	ldr	r3, [pc, #124]	; (2b20 <Clock_Ip_CallEmptyCallbacks+0x94>)
    2aa4:	685b      	ldr	r3, [r3, #4]
    2aa6:	2100      	movs	r1, #0
    2aa8:	2000      	movs	r0, #0
    2aaa:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    2aac:	4b1c      	ldr	r3, [pc, #112]	; (2b20 <Clock_Ip_CallEmptyCallbacks+0x94>)
    2aae:	689b      	ldr	r3, [r3, #8]
    2ab0:	2057      	movs	r0, #87	; 0x57
    2ab2:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2ab4:	4b1b      	ldr	r3, [pc, #108]	; (2b24 <Clock_Ip_CallEmptyCallbacks+0x98>)
    2ab6:	681b      	ldr	r3, [r3, #0]
    2ab8:	2000      	movs	r0, #0
    2aba:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    2abc:	4b1a      	ldr	r3, [pc, #104]	; (2b28 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    2abe:	681b      	ldr	r3, [r3, #0]
    2ac0:	2000      	movs	r0, #0
    2ac2:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    2ac4:	4b19      	ldr	r3, [pc, #100]	; (2b2c <Clock_Ip_CallEmptyCallbacks+0xa0>)
    2ac6:	681b      	ldr	r3, [r3, #0]
    2ac8:	2000      	movs	r0, #0
    2aca:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2acc:	4b18      	ldr	r3, [pc, #96]	; (2b30 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    2ace:	685b      	ldr	r3, [r3, #4]
    2ad0:	2000      	movs	r0, #0
    2ad2:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    2ad4:	4b16      	ldr	r3, [pc, #88]	; (2b30 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    2ad6:	689b      	ldr	r3, [r3, #8]
    2ad8:	2057      	movs	r0, #87	; 0x57
    2ada:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2adc:	4b15      	ldr	r3, [pc, #84]	; (2b34 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    2ade:	681b      	ldr	r3, [r3, #0]
    2ae0:	2000      	movs	r0, #0
    2ae2:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    2ae4:	4b13      	ldr	r3, [pc, #76]	; (2b34 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    2ae6:	685b      	ldr	r3, [r3, #4]
    2ae8:	2100      	movs	r1, #0
    2aea:	2057      	movs	r0, #87	; 0x57
    2aec:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2aee:	4b12      	ldr	r3, [pc, #72]	; (2b38 <Clock_Ip_CallEmptyCallbacks+0xac>)
    2af0:	681b      	ldr	r3, [r3, #0]
    2af2:	2000      	movs	r0, #0
    2af4:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2af6:	4b11      	ldr	r3, [pc, #68]	; (2b3c <Clock_Ip_CallEmptyCallbacks+0xb0>)
    2af8:	685b      	ldr	r3, [r3, #4]
    2afa:	2000      	movs	r0, #0
    2afc:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    2afe:	4b0f      	ldr	r3, [pc, #60]	; (2b3c <Clock_Ip_CallEmptyCallbacks+0xb0>)
    2b00:	689b      	ldr	r3, [r3, #8]
    2b02:	2057      	movs	r0, #87	; 0x57
    2b04:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2b06:	4b0e      	ldr	r3, [pc, #56]	; (2b40 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    2b08:	685b      	ldr	r3, [r3, #4]
    2b0a:	2000      	movs	r0, #0
    2b0c:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    2b0e:	4b0d      	ldr	r3, [pc, #52]	; (2b44 <Clock_Ip_CallEmptyCallbacks+0xb8>)
    2b10:	681b      	ldr	r3, [r3, #0]
    2b12:	2100      	movs	r1, #0
    2b14:	2000      	movs	r0, #0
    2b16:	4798      	blx	r3
    }
}
    2b18:	bf00      	nop
    2b1a:	bd08      	pop	{r3, pc}
    2b1c:	1fff8b7c 	.word	0x1fff8b7c
    2b20:	00016370 	.word	0x00016370
    2b24:	00016284 	.word	0x00016284
    2b28:	000162c0 	.word	0x000162c0
    2b2c:	000162c8 	.word	0x000162c8
    2b30:	000162f0 	.word	0x000162f0
    2b34:	000162fc 	.word	0x000162fc
    2b38:	00016334 	.word	0x00016334
    2b3c:	00016380 	.word	0x00016380
    2b40:	000163ac 	.word	0x000163ac
    2b44:	000163a8 	.word	0x000163a8

00002b48 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    2b48:	b500      	push	{lr}
    2b4a:	b085      	sub	sp, #20
    2b4c:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    2b4e:	9b01      	ldr	r3, [sp, #4]
    2b50:	7adb      	ldrb	r3, [r3, #11]
    2b52:	9303      	str	r3, [sp, #12]
    2b54:	e01f      	b.n	2b96 <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2b56:	9b03      	ldr	r3, [sp, #12]
    2b58:	1e5a      	subs	r2, r3, #1
    2b5a:	9b01      	ldr	r3, [sp, #4]
    2b5c:	320d      	adds	r2, #13
    2b5e:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2b62:	495a      	ldr	r1, [pc, #360]	; (2ccc <Clock_Ip_ResetClockConfiguration+0x184>)
    2b64:	4613      	mov	r3, r2
    2b66:	00db      	lsls	r3, r3, #3
    2b68:	4413      	add	r3, r2
    2b6a:	440b      	add	r3, r1
    2b6c:	3301      	adds	r3, #1
    2b6e:	781b      	ldrb	r3, [r3, #0]
    2b70:	461a      	mov	r2, r3
    2b72:	4b57      	ldr	r3, [pc, #348]	; (2cd0 <Clock_Ip_ResetClockConfiguration+0x188>)
    2b74:	5c9b      	ldrb	r3, [r3, r2]
    2b76:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    2b78:	4a56      	ldr	r2, [pc, #344]	; (2cd4 <Clock_Ip_ResetClockConfiguration+0x18c>)
    2b7a:	9b02      	ldr	r3, [sp, #8]
    2b7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2b80:	9a03      	ldr	r2, [sp, #12]
    2b82:	3a01      	subs	r2, #1
    2b84:	320d      	adds	r2, #13
    2b86:	00d2      	lsls	r2, r2, #3
    2b88:	9901      	ldr	r1, [sp, #4]
    2b8a:	440a      	add	r2, r1
    2b8c:	4610      	mov	r0, r2
    2b8e:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    2b90:	9b03      	ldr	r3, [sp, #12]
    2b92:	3b01      	subs	r3, #1
    2b94:	9303      	str	r3, [sp, #12]
    2b96:	9b03      	ldr	r3, [sp, #12]
    2b98:	2b00      	cmp	r3, #0
    2b9a:	d1dc      	bne.n	2b56 <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    2b9c:	9b01      	ldr	r3, [sp, #4]
    2b9e:	7b9b      	ldrb	r3, [r3, #14]
    2ba0:	9303      	str	r3, [sp, #12]
    2ba2:	e026      	b.n	2bf2 <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2ba4:	9b03      	ldr	r3, [sp, #12]
    2ba6:	3b01      	subs	r3, #1
    2ba8:	9a01      	ldr	r2, [sp, #4]
    2baa:	3324      	adds	r3, #36	; 0x24
    2bac:	011b      	lsls	r3, r3, #4
    2bae:	4413      	add	r3, r2
    2bb0:	3304      	adds	r3, #4
    2bb2:	681a      	ldr	r2, [r3, #0]
    2bb4:	4945      	ldr	r1, [pc, #276]	; (2ccc <Clock_Ip_ResetClockConfiguration+0x184>)
    2bb6:	4613      	mov	r3, r2
    2bb8:	00db      	lsls	r3, r3, #3
    2bba:	4413      	add	r3, r2
    2bbc:	440b      	add	r3, r1
    2bbe:	3301      	adds	r3, #1
    2bc0:	781b      	ldrb	r3, [r3, #0]
    2bc2:	461a      	mov	r2, r3
    2bc4:	4b44      	ldr	r3, [pc, #272]	; (2cd8 <Clock_Ip_ResetClockConfiguration+0x190>)
    2bc6:	5c9b      	ldrb	r3, [r3, r2]
    2bc8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    2bca:	4944      	ldr	r1, [pc, #272]	; (2cdc <Clock_Ip_ResetClockConfiguration+0x194>)
    2bcc:	9a02      	ldr	r2, [sp, #8]
    2bce:	4613      	mov	r3, r2
    2bd0:	005b      	lsls	r3, r3, #1
    2bd2:	4413      	add	r3, r2
    2bd4:	009b      	lsls	r3, r3, #2
    2bd6:	440b      	add	r3, r1
    2bd8:	681b      	ldr	r3, [r3, #0]
    2bda:	9a03      	ldr	r2, [sp, #12]
    2bdc:	3a01      	subs	r2, #1
    2bde:	3224      	adds	r2, #36	; 0x24
    2be0:	0112      	lsls	r2, r2, #4
    2be2:	9901      	ldr	r1, [sp, #4]
    2be4:	440a      	add	r2, r1
    2be6:	3204      	adds	r2, #4
    2be8:	4610      	mov	r0, r2
    2bea:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    2bec:	9b03      	ldr	r3, [sp, #12]
    2bee:	3b01      	subs	r3, #1
    2bf0:	9303      	str	r3, [sp, #12]
    2bf2:	9b03      	ldr	r3, [sp, #12]
    2bf4:	2b00      	cmp	r3, #0
    2bf6:	d1d5      	bne.n	2ba4 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    2bf8:	9b01      	ldr	r3, [sp, #4]
    2bfa:	7a9b      	ldrb	r3, [r3, #10]
    2bfc:	9303      	str	r3, [sp, #12]
    2bfe:	e02a      	b.n	2c56 <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2c00:	9b03      	ldr	r3, [sp, #12]
    2c02:	1e5a      	subs	r2, r3, #1
    2c04:	9901      	ldr	r1, [sp, #4]
    2c06:	4613      	mov	r3, r2
    2c08:	009b      	lsls	r3, r3, #2
    2c0a:	4413      	add	r3, r2
    2c0c:	00db      	lsls	r3, r3, #3
    2c0e:	440b      	add	r3, r1
    2c10:	3340      	adds	r3, #64	; 0x40
    2c12:	681a      	ldr	r2, [r3, #0]
    2c14:	492d      	ldr	r1, [pc, #180]	; (2ccc <Clock_Ip_ResetClockConfiguration+0x184>)
    2c16:	4613      	mov	r3, r2
    2c18:	00db      	lsls	r3, r3, #3
    2c1a:	4413      	add	r3, r2
    2c1c:	440b      	add	r3, r1
    2c1e:	3301      	adds	r3, #1
    2c20:	781b      	ldrb	r3, [r3, #0]
    2c22:	461a      	mov	r2, r3
    2c24:	4b2e      	ldr	r3, [pc, #184]	; (2ce0 <Clock_Ip_ResetClockConfiguration+0x198>)
    2c26:	5c9b      	ldrb	r3, [r3, r2]
    2c28:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    2c2a:	492e      	ldr	r1, [pc, #184]	; (2ce4 <Clock_Ip_ResetClockConfiguration+0x19c>)
    2c2c:	9a02      	ldr	r2, [sp, #8]
    2c2e:	4613      	mov	r3, r2
    2c30:	009b      	lsls	r3, r3, #2
    2c32:	4413      	add	r3, r2
    2c34:	009b      	lsls	r3, r3, #2
    2c36:	440b      	add	r3, r1
    2c38:	6819      	ldr	r1, [r3, #0]
    2c3a:	9b03      	ldr	r3, [sp, #12]
    2c3c:	1e5a      	subs	r2, r3, #1
    2c3e:	4613      	mov	r3, r2
    2c40:	009b      	lsls	r3, r3, #2
    2c42:	4413      	add	r3, r2
    2c44:	00db      	lsls	r3, r3, #3
    2c46:	3340      	adds	r3, #64	; 0x40
    2c48:	9a01      	ldr	r2, [sp, #4]
    2c4a:	4413      	add	r3, r2
    2c4c:	4618      	mov	r0, r3
    2c4e:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    2c50:	9b03      	ldr	r3, [sp, #12]
    2c52:	3b01      	subs	r3, #1
    2c54:	9303      	str	r3, [sp, #12]
    2c56:	9b03      	ldr	r3, [sp, #12]
    2c58:	2b00      	cmp	r3, #0
    2c5a:	d1d1      	bne.n	2c00 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    2c5c:	9b01      	ldr	r3, [sp, #4]
    2c5e:	7a5b      	ldrb	r3, [r3, #9]
    2c60:	9303      	str	r3, [sp, #12]
    2c62:	e02b      	b.n	2cbc <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2c64:	9b03      	ldr	r3, [sp, #12]
    2c66:	1e5a      	subs	r2, r3, #1
    2c68:	9901      	ldr	r1, [sp, #4]
    2c6a:	4613      	mov	r3, r2
    2c6c:	009b      	lsls	r3, r3, #2
    2c6e:	4413      	add	r3, r2
    2c70:	009b      	lsls	r3, r3, #2
    2c72:	440b      	add	r3, r1
    2c74:	332c      	adds	r3, #44	; 0x2c
    2c76:	681a      	ldr	r2, [r3, #0]
    2c78:	4914      	ldr	r1, [pc, #80]	; (2ccc <Clock_Ip_ResetClockConfiguration+0x184>)
    2c7a:	4613      	mov	r3, r2
    2c7c:	00db      	lsls	r3, r3, #3
    2c7e:	4413      	add	r3, r2
    2c80:	440b      	add	r3, r1
    2c82:	3301      	adds	r3, #1
    2c84:	781b      	ldrb	r3, [r3, #0]
    2c86:	461a      	mov	r2, r3
    2c88:	4b17      	ldr	r3, [pc, #92]	; (2ce8 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    2c8a:	5c9b      	ldrb	r3, [r3, r2]
    2c8c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    2c8e:	4917      	ldr	r1, [pc, #92]	; (2cec <Clock_Ip_ResetClockConfiguration+0x1a4>)
    2c90:	9a02      	ldr	r2, [sp, #8]
    2c92:	4613      	mov	r3, r2
    2c94:	009b      	lsls	r3, r3, #2
    2c96:	4413      	add	r3, r2
    2c98:	009b      	lsls	r3, r3, #2
    2c9a:	440b      	add	r3, r1
    2c9c:	6819      	ldr	r1, [r3, #0]
    2c9e:	9b03      	ldr	r3, [sp, #12]
    2ca0:	1e5a      	subs	r2, r3, #1
    2ca2:	4613      	mov	r3, r2
    2ca4:	009b      	lsls	r3, r3, #2
    2ca6:	4413      	add	r3, r2
    2ca8:	009b      	lsls	r3, r3, #2
    2caa:	3328      	adds	r3, #40	; 0x28
    2cac:	9a01      	ldr	r2, [sp, #4]
    2cae:	4413      	add	r3, r2
    2cb0:	3304      	adds	r3, #4
    2cb2:	4618      	mov	r0, r3
    2cb4:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    2cb6:	9b03      	ldr	r3, [sp, #12]
    2cb8:	3b01      	subs	r3, #1
    2cba:	9303      	str	r3, [sp, #12]
    2cbc:	9b03      	ldr	r3, [sp, #12]
    2cbe:	2b00      	cmp	r3, #0
    2cc0:	d1d0      	bne.n	2c64 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    2cc2:	bf00      	nop
    2cc4:	bf00      	nop
    2cc6:	b005      	add	sp, #20
    2cc8:	f85d fb04 	ldr.w	pc, [sp], #4
    2ccc:	00015d74 	.word	0x00015d74
    2cd0:	00015d44 	.word	0x00015d44
    2cd4:	000163ac 	.word	0x000163ac
    2cd8:	00015d24 	.word	0x00015d24
    2cdc:	000162f0 	.word	0x000162f0
    2ce0:	00015d34 	.word	0x00015d34
    2ce4:	00016380 	.word	0x00016380
    2ce8:	00015cf4 	.word	0x00015cf4
    2cec:	000162c8 	.word	0x000162c8

00002cf0 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    2cf0:	b500      	push	{lr}
    2cf2:	b085      	sub	sp, #20
    2cf4:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    2cf6:	2301      	movs	r3, #1
    2cf8:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    2cfa:	9801      	ldr	r0, [sp, #4]
    2cfc:	f000 f818 	bl	2d30 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    2d00:	4b0a      	ldr	r3, [pc, #40]	; (2d2c <Clock_Ip_Init+0x3c>)
    2d02:	781b      	ldrb	r3, [r3, #0]
    2d04:	2b00      	cmp	r3, #0
    2d06:	d00a      	beq.n	2d1e <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    2d08:	f000 fb74 	bl	33f4 <Clock_Ip_GetPllStatus>
    2d0c:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    2d0e:	9b02      	ldr	r3, [sp, #8]
    2d10:	2b00      	cmp	r3, #0
    2d12:	d106      	bne.n	2d22 <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    2d14:	f000 fbf2 	bl	34fc <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    2d18:	2300      	movs	r3, #0
    2d1a:	9303      	str	r3, [sp, #12]
    2d1c:	e001      	b.n	2d22 <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    2d1e:	2300      	movs	r3, #0
    2d20:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    2d22:	9b03      	ldr	r3, [sp, #12]
}
    2d24:	4618      	mov	r0, r3
    2d26:	b005      	add	sp, #20
    2d28:	f85d fb04 	ldr.w	pc, [sp], #4
    2d2c:	1fff8b80 	.word	0x1fff8b80

00002d30 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    2d30:	b510      	push	{r4, lr}
    2d32:	b084      	sub	sp, #16
    2d34:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    2d36:	4a9f      	ldr	r2, [pc, #636]	; (2fb4 <Clock_Ip_InitClock+0x284>)
    2d38:	9b01      	ldr	r3, [sp, #4]
    2d3a:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    2d3c:	2101      	movs	r1, #1
    2d3e:	9801      	ldr	r0, [sp, #4]
    2d40:	f003 fa90 	bl	6264 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2d44:	4b9b      	ldr	r3, [pc, #620]	; (2fb4 <Clock_Ip_InitClock+0x284>)
    2d46:	681b      	ldr	r3, [r3, #0]
    2d48:	2b00      	cmp	r3, #0
    2d4a:	d030      	beq.n	2dae <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2d4c:	2300      	movs	r3, #0
    2d4e:	9303      	str	r3, [sp, #12]
    2d50:	e027      	b.n	2da2 <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2d52:	9901      	ldr	r1, [sp, #4]
    2d54:	9a03      	ldr	r2, [sp, #12]
    2d56:	4613      	mov	r3, r2
    2d58:	009b      	lsls	r3, r3, #2
    2d5a:	4413      	add	r3, r2
    2d5c:	009b      	lsls	r3, r3, #2
    2d5e:	440b      	add	r3, r1
    2d60:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2d64:	681a      	ldr	r2, [r3, #0]
    2d66:	4994      	ldr	r1, [pc, #592]	; (2fb8 <Clock_Ip_InitClock+0x288>)
    2d68:	4613      	mov	r3, r2
    2d6a:	00db      	lsls	r3, r3, #3
    2d6c:	4413      	add	r3, r2
    2d6e:	440b      	add	r3, r1
    2d70:	3301      	adds	r3, #1
    2d72:	781b      	ldrb	r3, [r3, #0]
    2d74:	461a      	mov	r2, r3
    2d76:	4b91      	ldr	r3, [pc, #580]	; (2fbc <Clock_Ip_InitClock+0x28c>)
    2d78:	5c9b      	ldrb	r3, [r3, r2]
    2d7a:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    2d7c:	4a90      	ldr	r2, [pc, #576]	; (2fc0 <Clock_Ip_InitClock+0x290>)
    2d7e:	9b02      	ldr	r3, [sp, #8]
    2d80:	011b      	lsls	r3, r3, #4
    2d82:	4413      	add	r3, r2
    2d84:	6819      	ldr	r1, [r3, #0]
    2d86:	9a03      	ldr	r2, [sp, #12]
    2d88:	4613      	mov	r3, r2
    2d8a:	009b      	lsls	r3, r3, #2
    2d8c:	4413      	add	r3, r2
    2d8e:	009b      	lsls	r3, r3, #2
    2d90:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2d94:	9a01      	ldr	r2, [sp, #4]
    2d96:	4413      	add	r3, r2
    2d98:	4618      	mov	r0, r3
    2d9a:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2d9c:	9b03      	ldr	r3, [sp, #12]
    2d9e:	3301      	adds	r3, #1
    2da0:	9303      	str	r3, [sp, #12]
    2da2:	9b01      	ldr	r3, [sp, #4]
    2da4:	7c9b      	ldrb	r3, [r3, #18]
    2da6:	461a      	mov	r2, r3
    2da8:	9b03      	ldr	r3, [sp, #12]
    2daa:	4293      	cmp	r3, r2
    2dac:	d3d1      	bcc.n	2d52 <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    2dae:	9801      	ldr	r0, [sp, #4]
    2db0:	f7ff feca 	bl	2b48 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2db4:	2300      	movs	r3, #0
    2db6:	9303      	str	r3, [sp, #12]
    2db8:	e029      	b.n	2e0e <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2dba:	9901      	ldr	r1, [sp, #4]
    2dbc:	9a03      	ldr	r2, [sp, #12]
    2dbe:	4613      	mov	r3, r2
    2dc0:	005b      	lsls	r3, r3, #1
    2dc2:	4413      	add	r3, r2
    2dc4:	009b      	lsls	r3, r3, #2
    2dc6:	440b      	add	r3, r1
    2dc8:	3314      	adds	r3, #20
    2dca:	681a      	ldr	r2, [r3, #0]
    2dcc:	497a      	ldr	r1, [pc, #488]	; (2fb8 <Clock_Ip_InitClock+0x288>)
    2dce:	4613      	mov	r3, r2
    2dd0:	00db      	lsls	r3, r3, #3
    2dd2:	4413      	add	r3, r2
    2dd4:	440b      	add	r3, r1
    2dd6:	3301      	adds	r3, #1
    2dd8:	781b      	ldrb	r3, [r3, #0]
    2dda:	461a      	mov	r2, r3
    2ddc:	4b79      	ldr	r3, [pc, #484]	; (2fc4 <Clock_Ip_InitClock+0x294>)
    2dde:	5c9b      	ldrb	r3, [r3, r2]
    2de0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    2de2:	4979      	ldr	r1, [pc, #484]	; (2fc8 <Clock_Ip_InitClock+0x298>)
    2de4:	9a02      	ldr	r2, [sp, #8]
    2de6:	4613      	mov	r3, r2
    2de8:	005b      	lsls	r3, r3, #1
    2dea:	4413      	add	r3, r2
    2dec:	009b      	lsls	r3, r3, #2
    2dee:	440b      	add	r3, r1
    2df0:	6819      	ldr	r1, [r3, #0]
    2df2:	9a03      	ldr	r2, [sp, #12]
    2df4:	4613      	mov	r3, r2
    2df6:	005b      	lsls	r3, r3, #1
    2df8:	4413      	add	r3, r2
    2dfa:	009b      	lsls	r3, r3, #2
    2dfc:	3310      	adds	r3, #16
    2dfe:	9a01      	ldr	r2, [sp, #4]
    2e00:	4413      	add	r3, r2
    2e02:	3304      	adds	r3, #4
    2e04:	4618      	mov	r0, r3
    2e06:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2e08:	9b03      	ldr	r3, [sp, #12]
    2e0a:	3301      	adds	r3, #1
    2e0c:	9303      	str	r3, [sp, #12]
    2e0e:	9b01      	ldr	r3, [sp, #4]
    2e10:	7a1b      	ldrb	r3, [r3, #8]
    2e12:	461a      	mov	r2, r3
    2e14:	9b03      	ldr	r3, [sp, #12]
    2e16:	4293      	cmp	r3, r2
    2e18:	d3cf      	bcc.n	2dba <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    2e1a:	2300      	movs	r3, #0
    2e1c:	9303      	str	r3, [sp, #12]
    2e1e:	e02a      	b.n	2e76 <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2e20:	9901      	ldr	r1, [sp, #4]
    2e22:	9a03      	ldr	r2, [sp, #12]
    2e24:	4613      	mov	r3, r2
    2e26:	009b      	lsls	r3, r3, #2
    2e28:	4413      	add	r3, r2
    2e2a:	009b      	lsls	r3, r3, #2
    2e2c:	440b      	add	r3, r1
    2e2e:	332c      	adds	r3, #44	; 0x2c
    2e30:	681a      	ldr	r2, [r3, #0]
    2e32:	4961      	ldr	r1, [pc, #388]	; (2fb8 <Clock_Ip_InitClock+0x288>)
    2e34:	4613      	mov	r3, r2
    2e36:	00db      	lsls	r3, r3, #3
    2e38:	4413      	add	r3, r2
    2e3a:	440b      	add	r3, r1
    2e3c:	3301      	adds	r3, #1
    2e3e:	781b      	ldrb	r3, [r3, #0]
    2e40:	461a      	mov	r2, r3
    2e42:	4b62      	ldr	r3, [pc, #392]	; (2fcc <Clock_Ip_InitClock+0x29c>)
    2e44:	5c9b      	ldrb	r3, [r3, r2]
    2e46:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    2e48:	4961      	ldr	r1, [pc, #388]	; (2fd0 <Clock_Ip_InitClock+0x2a0>)
    2e4a:	9a02      	ldr	r2, [sp, #8]
    2e4c:	4613      	mov	r3, r2
    2e4e:	009b      	lsls	r3, r3, #2
    2e50:	4413      	add	r3, r2
    2e52:	009b      	lsls	r3, r3, #2
    2e54:	440b      	add	r3, r1
    2e56:	3304      	adds	r3, #4
    2e58:	6819      	ldr	r1, [r3, #0]
    2e5a:	9a03      	ldr	r2, [sp, #12]
    2e5c:	4613      	mov	r3, r2
    2e5e:	009b      	lsls	r3, r3, #2
    2e60:	4413      	add	r3, r2
    2e62:	009b      	lsls	r3, r3, #2
    2e64:	3328      	adds	r3, #40	; 0x28
    2e66:	9a01      	ldr	r2, [sp, #4]
    2e68:	4413      	add	r3, r2
    2e6a:	3304      	adds	r3, #4
    2e6c:	4618      	mov	r0, r3
    2e6e:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    2e70:	9b03      	ldr	r3, [sp, #12]
    2e72:	3301      	adds	r3, #1
    2e74:	9303      	str	r3, [sp, #12]
    2e76:	9b01      	ldr	r3, [sp, #4]
    2e78:	7a5b      	ldrb	r3, [r3, #9]
    2e7a:	461a      	mov	r2, r3
    2e7c:	9b03      	ldr	r3, [sp, #12]
    2e7e:	4293      	cmp	r3, r2
    2e80:	d3ce      	bcc.n	2e20 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    2e82:	9801      	ldr	r0, [sp, #4]
    2e84:	f7ff fdb0 	bl	29e8 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    2e88:	2300      	movs	r3, #0
    2e8a:	9303      	str	r3, [sp, #12]
    2e8c:	e028      	b.n	2ee0 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    2e8e:	9901      	ldr	r1, [sp, #4]
    2e90:	9a03      	ldr	r2, [sp, #12]
    2e92:	4613      	mov	r3, r2
    2e94:	009b      	lsls	r3, r3, #2
    2e96:	4413      	add	r3, r2
    2e98:	009b      	lsls	r3, r3, #2
    2e9a:	440b      	add	r3, r1
    2e9c:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    2ea0:	681a      	ldr	r2, [r3, #0]
    2ea2:	4945      	ldr	r1, [pc, #276]	; (2fb8 <Clock_Ip_InitClock+0x288>)
    2ea4:	4613      	mov	r3, r2
    2ea6:	00db      	lsls	r3, r3, #3
    2ea8:	4413      	add	r3, r2
    2eaa:	440b      	add	r3, r1
    2eac:	3301      	adds	r3, #1
    2eae:	781b      	ldrb	r3, [r3, #0]
    2eb0:	461a      	mov	r2, r3
    2eb2:	4b48      	ldr	r3, [pc, #288]	; (2fd4 <Clock_Ip_InitClock+0x2a4>)
    2eb4:	5c9b      	ldrb	r3, [r3, r2]
    2eb6:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    2eb8:	4a47      	ldr	r2, [pc, #284]	; (2fd8 <Clock_Ip_InitClock+0x2a8>)
    2eba:	9b02      	ldr	r3, [sp, #8]
    2ebc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    2ec0:	9a03      	ldr	r2, [sp, #12]
    2ec2:	4613      	mov	r3, r2
    2ec4:	009b      	lsls	r3, r3, #2
    2ec6:	4413      	add	r3, r2
    2ec8:	009b      	lsls	r3, r3, #2
    2eca:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    2ece:	9a01      	ldr	r2, [sp, #4]
    2ed0:	4413      	add	r3, r2
    2ed2:	3304      	adds	r3, #4
    2ed4:	9903      	ldr	r1, [sp, #12]
    2ed6:	4618      	mov	r0, r3
    2ed8:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    2eda:	9b03      	ldr	r3, [sp, #12]
    2edc:	3301      	adds	r3, #1
    2ede:	9303      	str	r3, [sp, #12]
    2ee0:	9b01      	ldr	r3, [sp, #4]
    2ee2:	7c5b      	ldrb	r3, [r3, #17]
    2ee4:	461a      	mov	r2, r3
    2ee6:	9b03      	ldr	r3, [sp, #12]
    2ee8:	4293      	cmp	r3, r2
    2eea:	d3d0      	bcc.n	2e8e <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2eec:	2300      	movs	r3, #0
    2eee:	9303      	str	r3, [sp, #12]
    2ef0:	e026      	b.n	2f40 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    2ef2:	9901      	ldr	r1, [sp, #4]
    2ef4:	9a03      	ldr	r2, [sp, #12]
    2ef6:	4613      	mov	r3, r2
    2ef8:	005b      	lsls	r3, r3, #1
    2efa:	4413      	add	r3, r2
    2efc:	009b      	lsls	r3, r3, #2
    2efe:	440b      	add	r3, r1
    2f00:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2f04:	681a      	ldr	r2, [r3, #0]
    2f06:	492c      	ldr	r1, [pc, #176]	; (2fb8 <Clock_Ip_InitClock+0x288>)
    2f08:	4613      	mov	r3, r2
    2f0a:	00db      	lsls	r3, r3, #3
    2f0c:	4413      	add	r3, r2
    2f0e:	440b      	add	r3, r1
    2f10:	3301      	adds	r3, #1
    2f12:	781b      	ldrb	r3, [r3, #0]
    2f14:	461a      	mov	r2, r3
    2f16:	4b31      	ldr	r3, [pc, #196]	; (2fdc <Clock_Ip_InitClock+0x2ac>)
    2f18:	5c9b      	ldrb	r3, [r3, r2]
    2f1a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    2f1c:	4a30      	ldr	r2, [pc, #192]	; (2fe0 <Clock_Ip_InitClock+0x2b0>)
    2f1e:	9b02      	ldr	r3, [sp, #8]
    2f20:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    2f24:	9a03      	ldr	r2, [sp, #12]
    2f26:	4613      	mov	r3, r2
    2f28:	005b      	lsls	r3, r3, #1
    2f2a:	4413      	add	r3, r2
    2f2c:	009b      	lsls	r3, r3, #2
    2f2e:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2f32:	9a01      	ldr	r2, [sp, #4]
    2f34:	4413      	add	r3, r2
    2f36:	4618      	mov	r0, r3
    2f38:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2f3a:	9b03      	ldr	r3, [sp, #12]
    2f3c:	3301      	adds	r3, #1
    2f3e:	9303      	str	r3, [sp, #12]
    2f40:	9b01      	ldr	r3, [sp, #4]
    2f42:	7b5b      	ldrb	r3, [r3, #13]
    2f44:	461a      	mov	r2, r3
    2f46:	9b03      	ldr	r3, [sp, #12]
    2f48:	4293      	cmp	r3, r2
    2f4a:	d3d2      	bcc.n	2ef2 <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    2f4c:	2300      	movs	r3, #0
    2f4e:	9303      	str	r3, [sp, #12]
    2f50:	e026      	b.n	2fa0 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    2f52:	9901      	ldr	r1, [sp, #4]
    2f54:	9a03      	ldr	r2, [sp, #12]
    2f56:	4613      	mov	r3, r2
    2f58:	005b      	lsls	r3, r3, #1
    2f5a:	4413      	add	r3, r2
    2f5c:	009b      	lsls	r3, r3, #2
    2f5e:	440b      	add	r3, r1
    2f60:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    2f64:	681a      	ldr	r2, [r3, #0]
    2f66:	4914      	ldr	r1, [pc, #80]	; (2fb8 <Clock_Ip_InitClock+0x288>)
    2f68:	4613      	mov	r3, r2
    2f6a:	00db      	lsls	r3, r3, #3
    2f6c:	4413      	add	r3, r2
    2f6e:	440b      	add	r3, r1
    2f70:	3301      	adds	r3, #1
    2f72:	781b      	ldrb	r3, [r3, #0]
    2f74:	461a      	mov	r2, r3
    2f76:	4b1b      	ldr	r3, [pc, #108]	; (2fe4 <Clock_Ip_InitClock+0x2b4>)
    2f78:	5c9b      	ldrb	r3, [r3, r2]
    2f7a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    2f7c:	4a1a      	ldr	r2, [pc, #104]	; (2fe8 <Clock_Ip_InitClock+0x2b8>)
    2f7e:	9b02      	ldr	r3, [sp, #8]
    2f80:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    2f84:	9a03      	ldr	r2, [sp, #12]
    2f86:	4613      	mov	r3, r2
    2f88:	005b      	lsls	r3, r3, #1
    2f8a:	4413      	add	r3, r2
    2f8c:	009b      	lsls	r3, r3, #2
    2f8e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    2f92:	9a01      	ldr	r2, [sp, #4]
    2f94:	4413      	add	r3, r2
    2f96:	4618      	mov	r0, r3
    2f98:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    2f9a:	9b03      	ldr	r3, [sp, #12]
    2f9c:	3301      	adds	r3, #1
    2f9e:	9303      	str	r3, [sp, #12]
    2fa0:	9b01      	ldr	r3, [sp, #4]
    2fa2:	7b1b      	ldrb	r3, [r3, #12]
    2fa4:	461a      	mov	r2, r3
    2fa6:	9b03      	ldr	r3, [sp, #12]
    2fa8:	4293      	cmp	r3, r2
    2faa:	d3d2      	bcc.n	2f52 <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2fac:	2300      	movs	r3, #0
    2fae:	9303      	str	r3, [sp, #12]
    2fb0:	e044      	b.n	303c <Clock_Ip_InitClock+0x30c>
    2fb2:	bf00      	nop
    2fb4:	1fff8b78 	.word	0x1fff8b78
    2fb8:	00015d74 	.word	0x00015d74
    2fbc:	00015d64 	.word	0x00015d64
    2fc0:	00016370 	.word	0x00016370
    2fc4:	00015d04 	.word	0x00015d04
    2fc8:	00016334 	.word	0x00016334
    2fcc:	00015cf4 	.word	0x00015cf4
    2fd0:	000162c8 	.word	0x000162c8
    2fd4:	00015d54 	.word	0x00015d54
    2fd8:	000163a8 	.word	0x000163a8
    2fdc:	00015ce4 	.word	0x00015ce4
    2fe0:	000162c0 	.word	0x000162c0
    2fe4:	00015cd4 	.word	0x00015cd4
    2fe8:	00016284 	.word	0x00016284
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    2fec:	9901      	ldr	r1, [sp, #4]
    2fee:	9a03      	ldr	r2, [sp, #12]
    2ff0:	4613      	mov	r3, r2
    2ff2:	005b      	lsls	r3, r3, #1
    2ff4:	4413      	add	r3, r2
    2ff6:	009b      	lsls	r3, r3, #2
    2ff8:	440b      	add	r3, r1
    2ffa:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2ffe:	681a      	ldr	r2, [r3, #0]
    3000:	49ac      	ldr	r1, [pc, #688]	; (32b4 <Clock_Ip_InitClock+0x584>)
    3002:	4613      	mov	r3, r2
    3004:	00db      	lsls	r3, r3, #3
    3006:	4413      	add	r3, r2
    3008:	440b      	add	r3, r1
    300a:	3301      	adds	r3, #1
    300c:	781b      	ldrb	r3, [r3, #0]
    300e:	461a      	mov	r2, r3
    3010:	4ba9      	ldr	r3, [pc, #676]	; (32b8 <Clock_Ip_InitClock+0x588>)
    3012:	5c9b      	ldrb	r3, [r3, r2]
    3014:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    3016:	4aa9      	ldr	r2, [pc, #676]	; (32bc <Clock_Ip_InitClock+0x58c>)
    3018:	9b02      	ldr	r3, [sp, #8]
    301a:	00db      	lsls	r3, r3, #3
    301c:	4413      	add	r3, r2
    301e:	6859      	ldr	r1, [r3, #4]
    3020:	9a03      	ldr	r2, [sp, #12]
    3022:	4613      	mov	r3, r2
    3024:	005b      	lsls	r3, r3, #1
    3026:	4413      	add	r3, r2
    3028:	009b      	lsls	r3, r3, #2
    302a:	f503 730e 	add.w	r3, r3, #568	; 0x238
    302e:	9a01      	ldr	r2, [sp, #4]
    3030:	4413      	add	r3, r2
    3032:	4618      	mov	r0, r3
    3034:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    3036:	9b03      	ldr	r3, [sp, #12]
    3038:	3301      	adds	r3, #1
    303a:	9303      	str	r3, [sp, #12]
    303c:	9b01      	ldr	r3, [sp, #4]
    303e:	7b5b      	ldrb	r3, [r3, #13]
    3040:	461a      	mov	r2, r3
    3042:	9b03      	ldr	r3, [sp, #12]
    3044:	4293      	cmp	r3, r2
    3046:	d3d1      	bcc.n	2fec <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    3048:	2300      	movs	r3, #0
    304a:	9303      	str	r3, [sp, #12]
    304c:	e029      	b.n	30a2 <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    304e:	9901      	ldr	r1, [sp, #4]
    3050:	9a03      	ldr	r2, [sp, #12]
    3052:	4613      	mov	r3, r2
    3054:	009b      	lsls	r3, r3, #2
    3056:	4413      	add	r3, r2
    3058:	00db      	lsls	r3, r3, #3
    305a:	440b      	add	r3, r1
    305c:	3340      	adds	r3, #64	; 0x40
    305e:	681a      	ldr	r2, [r3, #0]
    3060:	4994      	ldr	r1, [pc, #592]	; (32b4 <Clock_Ip_InitClock+0x584>)
    3062:	4613      	mov	r3, r2
    3064:	00db      	lsls	r3, r3, #3
    3066:	4413      	add	r3, r2
    3068:	440b      	add	r3, r1
    306a:	3301      	adds	r3, #1
    306c:	781b      	ldrb	r3, [r3, #0]
    306e:	461a      	mov	r2, r3
    3070:	4b93      	ldr	r3, [pc, #588]	; (32c0 <Clock_Ip_InitClock+0x590>)
    3072:	5c9b      	ldrb	r3, [r3, r2]
    3074:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    3076:	4993      	ldr	r1, [pc, #588]	; (32c4 <Clock_Ip_InitClock+0x594>)
    3078:	9a02      	ldr	r2, [sp, #8]
    307a:	4613      	mov	r3, r2
    307c:	009b      	lsls	r3, r3, #2
    307e:	4413      	add	r3, r2
    3080:	009b      	lsls	r3, r3, #2
    3082:	440b      	add	r3, r1
    3084:	3304      	adds	r3, #4
    3086:	6819      	ldr	r1, [r3, #0]
    3088:	9a03      	ldr	r2, [sp, #12]
    308a:	4613      	mov	r3, r2
    308c:	009b      	lsls	r3, r3, #2
    308e:	4413      	add	r3, r2
    3090:	00db      	lsls	r3, r3, #3
    3092:	3340      	adds	r3, #64	; 0x40
    3094:	9a01      	ldr	r2, [sp, #4]
    3096:	4413      	add	r3, r2
    3098:	4618      	mov	r0, r3
    309a:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    309c:	9b03      	ldr	r3, [sp, #12]
    309e:	3301      	adds	r3, #1
    30a0:	9303      	str	r3, [sp, #12]
    30a2:	9b01      	ldr	r3, [sp, #4]
    30a4:	7a9b      	ldrb	r3, [r3, #10]
    30a6:	461a      	mov	r2, r3
    30a8:	9b03      	ldr	r3, [sp, #12]
    30aa:	4293      	cmp	r3, r2
    30ac:	d3cf      	bcc.n	304e <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    30ae:	2300      	movs	r3, #0
    30b0:	9303      	str	r3, [sp, #12]
    30b2:	e029      	b.n	3108 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    30b4:	9901      	ldr	r1, [sp, #4]
    30b6:	9a03      	ldr	r2, [sp, #12]
    30b8:	4613      	mov	r3, r2
    30ba:	009b      	lsls	r3, r3, #2
    30bc:	4413      	add	r3, r2
    30be:	009b      	lsls	r3, r3, #2
    30c0:	440b      	add	r3, r1
    30c2:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    30c6:	681a      	ldr	r2, [r3, #0]
    30c8:	497a      	ldr	r1, [pc, #488]	; (32b4 <Clock_Ip_InitClock+0x584>)
    30ca:	4613      	mov	r3, r2
    30cc:	00db      	lsls	r3, r3, #3
    30ce:	4413      	add	r3, r2
    30d0:	440b      	add	r3, r1
    30d2:	3301      	adds	r3, #1
    30d4:	781b      	ldrb	r3, [r3, #0]
    30d6:	461a      	mov	r2, r3
    30d8:	4b7b      	ldr	r3, [pc, #492]	; (32c8 <Clock_Ip_InitClock+0x598>)
    30da:	5c9b      	ldrb	r3, [r3, r2]
    30dc:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    30de:	4a7b      	ldr	r2, [pc, #492]	; (32cc <Clock_Ip_InitClock+0x59c>)
    30e0:	9b02      	ldr	r3, [sp, #8]
    30e2:	011b      	lsls	r3, r3, #4
    30e4:	4413      	add	r3, r2
    30e6:	3304      	adds	r3, #4
    30e8:	681c      	ldr	r4, [r3, #0]
    30ea:	9a03      	ldr	r2, [sp, #12]
    30ec:	4613      	mov	r3, r2
    30ee:	009b      	lsls	r3, r3, #2
    30f0:	4413      	add	r3, r2
    30f2:	009b      	lsls	r3, r3, #2
    30f4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    30f8:	9a01      	ldr	r2, [sp, #4]
    30fa:	4413      	add	r3, r2
    30fc:	9903      	ldr	r1, [sp, #12]
    30fe:	4618      	mov	r0, r3
    3100:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    3102:	9b03      	ldr	r3, [sp, #12]
    3104:	3301      	adds	r3, #1
    3106:	9303      	str	r3, [sp, #12]
    3108:	9b01      	ldr	r3, [sp, #4]
    310a:	7c9b      	ldrb	r3, [r3, #18]
    310c:	461a      	mov	r2, r3
    310e:	9b03      	ldr	r3, [sp, #12]
    3110:	4293      	cmp	r3, r2
    3112:	d3cf      	bcc.n	30b4 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    3114:	2300      	movs	r3, #0
    3116:	9303      	str	r3, [sp, #12]
    3118:	e02a      	b.n	3170 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    311a:	9901      	ldr	r1, [sp, #4]
    311c:	9a03      	ldr	r2, [sp, #12]
    311e:	4613      	mov	r3, r2
    3120:	009b      	lsls	r3, r3, #2
    3122:	4413      	add	r3, r2
    3124:	009b      	lsls	r3, r3, #2
    3126:	440b      	add	r3, r1
    3128:	332c      	adds	r3, #44	; 0x2c
    312a:	681a      	ldr	r2, [r3, #0]
    312c:	4961      	ldr	r1, [pc, #388]	; (32b4 <Clock_Ip_InitClock+0x584>)
    312e:	4613      	mov	r3, r2
    3130:	00db      	lsls	r3, r3, #3
    3132:	4413      	add	r3, r2
    3134:	440b      	add	r3, r1
    3136:	3301      	adds	r3, #1
    3138:	781b      	ldrb	r3, [r3, #0]
    313a:	461a      	mov	r2, r3
    313c:	4b64      	ldr	r3, [pc, #400]	; (32d0 <Clock_Ip_InitClock+0x5a0>)
    313e:	5c9b      	ldrb	r3, [r3, r2]
    3140:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    3142:	4964      	ldr	r1, [pc, #400]	; (32d4 <Clock_Ip_InitClock+0x5a4>)
    3144:	9a02      	ldr	r2, [sp, #8]
    3146:	4613      	mov	r3, r2
    3148:	009b      	lsls	r3, r3, #2
    314a:	4413      	add	r3, r2
    314c:	009b      	lsls	r3, r3, #2
    314e:	440b      	add	r3, r1
    3150:	3308      	adds	r3, #8
    3152:	6819      	ldr	r1, [r3, #0]
    3154:	9a03      	ldr	r2, [sp, #12]
    3156:	4613      	mov	r3, r2
    3158:	009b      	lsls	r3, r3, #2
    315a:	4413      	add	r3, r2
    315c:	009b      	lsls	r3, r3, #2
    315e:	3328      	adds	r3, #40	; 0x28
    3160:	9a01      	ldr	r2, [sp, #4]
    3162:	4413      	add	r3, r2
    3164:	3304      	adds	r3, #4
    3166:	4618      	mov	r0, r3
    3168:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    316a:	9b03      	ldr	r3, [sp, #12]
    316c:	3301      	adds	r3, #1
    316e:	9303      	str	r3, [sp, #12]
    3170:	9b01      	ldr	r3, [sp, #4]
    3172:	7a5b      	ldrb	r3, [r3, #9]
    3174:	461a      	mov	r2, r3
    3176:	9b03      	ldr	r3, [sp, #12]
    3178:	4293      	cmp	r3, r2
    317a:	d3ce      	bcc.n	311a <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    317c:	2300      	movs	r3, #0
    317e:	9303      	str	r3, [sp, #12]
    3180:	e029      	b.n	31d6 <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    3182:	9901      	ldr	r1, [sp, #4]
    3184:	9a03      	ldr	r2, [sp, #12]
    3186:	4613      	mov	r3, r2
    3188:	009b      	lsls	r3, r3, #2
    318a:	4413      	add	r3, r2
    318c:	00db      	lsls	r3, r3, #3
    318e:	440b      	add	r3, r1
    3190:	3340      	adds	r3, #64	; 0x40
    3192:	681a      	ldr	r2, [r3, #0]
    3194:	4947      	ldr	r1, [pc, #284]	; (32b4 <Clock_Ip_InitClock+0x584>)
    3196:	4613      	mov	r3, r2
    3198:	00db      	lsls	r3, r3, #3
    319a:	4413      	add	r3, r2
    319c:	440b      	add	r3, r1
    319e:	3301      	adds	r3, #1
    31a0:	781b      	ldrb	r3, [r3, #0]
    31a2:	461a      	mov	r2, r3
    31a4:	4b46      	ldr	r3, [pc, #280]	; (32c0 <Clock_Ip_InitClock+0x590>)
    31a6:	5c9b      	ldrb	r3, [r3, r2]
    31a8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    31aa:	4946      	ldr	r1, [pc, #280]	; (32c4 <Clock_Ip_InitClock+0x594>)
    31ac:	9a02      	ldr	r2, [sp, #8]
    31ae:	4613      	mov	r3, r2
    31b0:	009b      	lsls	r3, r3, #2
    31b2:	4413      	add	r3, r2
    31b4:	009b      	lsls	r3, r3, #2
    31b6:	440b      	add	r3, r1
    31b8:	330c      	adds	r3, #12
    31ba:	6819      	ldr	r1, [r3, #0]
    31bc:	9a03      	ldr	r2, [sp, #12]
    31be:	4613      	mov	r3, r2
    31c0:	009b      	lsls	r3, r3, #2
    31c2:	4413      	add	r3, r2
    31c4:	00db      	lsls	r3, r3, #3
    31c6:	3340      	adds	r3, #64	; 0x40
    31c8:	9a01      	ldr	r2, [sp, #4]
    31ca:	4413      	add	r3, r2
    31cc:	4618      	mov	r0, r3
    31ce:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    31d0:	9b03      	ldr	r3, [sp, #12]
    31d2:	3301      	adds	r3, #1
    31d4:	9303      	str	r3, [sp, #12]
    31d6:	9b01      	ldr	r3, [sp, #4]
    31d8:	7a9b      	ldrb	r3, [r3, #10]
    31da:	461a      	mov	r2, r3
    31dc:	9b03      	ldr	r3, [sp, #12]
    31de:	4293      	cmp	r3, r2
    31e0:	d3cf      	bcc.n	3182 <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    31e2:	2300      	movs	r3, #0
    31e4:	9303      	str	r3, [sp, #12]
    31e6:	e025      	b.n	3234 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    31e8:	9a01      	ldr	r2, [sp, #4]
    31ea:	9b03      	ldr	r3, [sp, #12]
    31ec:	3324      	adds	r3, #36	; 0x24
    31ee:	011b      	lsls	r3, r3, #4
    31f0:	4413      	add	r3, r2
    31f2:	3304      	adds	r3, #4
    31f4:	681a      	ldr	r2, [r3, #0]
    31f6:	492f      	ldr	r1, [pc, #188]	; (32b4 <Clock_Ip_InitClock+0x584>)
    31f8:	4613      	mov	r3, r2
    31fa:	00db      	lsls	r3, r3, #3
    31fc:	4413      	add	r3, r2
    31fe:	440b      	add	r3, r1
    3200:	3301      	adds	r3, #1
    3202:	781b      	ldrb	r3, [r3, #0]
    3204:	461a      	mov	r2, r3
    3206:	4b34      	ldr	r3, [pc, #208]	; (32d8 <Clock_Ip_InitClock+0x5a8>)
    3208:	5c9b      	ldrb	r3, [r3, r2]
    320a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    320c:	4933      	ldr	r1, [pc, #204]	; (32dc <Clock_Ip_InitClock+0x5ac>)
    320e:	9a02      	ldr	r2, [sp, #8]
    3210:	4613      	mov	r3, r2
    3212:	005b      	lsls	r3, r3, #1
    3214:	4413      	add	r3, r2
    3216:	009b      	lsls	r3, r3, #2
    3218:	440b      	add	r3, r1
    321a:	3304      	adds	r3, #4
    321c:	681b      	ldr	r3, [r3, #0]
    321e:	9a03      	ldr	r2, [sp, #12]
    3220:	3224      	adds	r2, #36	; 0x24
    3222:	0112      	lsls	r2, r2, #4
    3224:	9901      	ldr	r1, [sp, #4]
    3226:	440a      	add	r2, r1
    3228:	3204      	adds	r2, #4
    322a:	4610      	mov	r0, r2
    322c:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    322e:	9b03      	ldr	r3, [sp, #12]
    3230:	3301      	adds	r3, #1
    3232:	9303      	str	r3, [sp, #12]
    3234:	9b01      	ldr	r3, [sp, #4]
    3236:	7b9b      	ldrb	r3, [r3, #14]
    3238:	461a      	mov	r2, r3
    323a:	9b03      	ldr	r3, [sp, #12]
    323c:	4293      	cmp	r3, r2
    323e:	d3d3      	bcc.n	31e8 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    3240:	4b27      	ldr	r3, [pc, #156]	; (32e0 <Clock_Ip_InitClock+0x5b0>)
    3242:	2200      	movs	r2, #0
    3244:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    3246:	4b26      	ldr	r3, [pc, #152]	; (32e0 <Clock_Ip_InitClock+0x5b0>)
    3248:	2200      	movs	r2, #0
    324a:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    324c:	4b24      	ldr	r3, [pc, #144]	; (32e0 <Clock_Ip_InitClock+0x5b0>)
    324e:	2201      	movs	r2, #1
    3250:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    3252:	4b23      	ldr	r3, [pc, #140]	; (32e0 <Clock_Ip_InitClock+0x5b0>)
    3254:	2200      	movs	r2, #0
    3256:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    3258:	f000 fa9c 	bl	3794 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    325c:	2300      	movs	r3, #0
    325e:	9303      	str	r3, [sp, #12]
    3260:	e04c      	b.n	32fc <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    3262:	9a01      	ldr	r2, [sp, #4]
    3264:	9b03      	ldr	r3, [sp, #12]
    3266:	330d      	adds	r3, #13
    3268:	00db      	lsls	r3, r3, #3
    326a:	4413      	add	r3, r2
    326c:	685b      	ldr	r3, [r3, #4]
    326e:	4a1d      	ldr	r2, [pc, #116]	; (32e4 <Clock_Ip_InitClock+0x5b4>)
    3270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3274:	2b03      	cmp	r3, #3
    3276:	d03b      	beq.n	32f0 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    3278:	9b01      	ldr	r3, [sp, #4]
    327a:	9a03      	ldr	r2, [sp, #12]
    327c:	320d      	adds	r2, #13
    327e:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    3282:	490c      	ldr	r1, [pc, #48]	; (32b4 <Clock_Ip_InitClock+0x584>)
    3284:	4613      	mov	r3, r2
    3286:	00db      	lsls	r3, r3, #3
    3288:	4413      	add	r3, r2
    328a:	440b      	add	r3, r1
    328c:	3301      	adds	r3, #1
    328e:	781b      	ldrb	r3, [r3, #0]
    3290:	461a      	mov	r2, r3
    3292:	4b15      	ldr	r3, [pc, #84]	; (32e8 <Clock_Ip_InitClock+0x5b8>)
    3294:	5c9b      	ldrb	r3, [r3, r2]
    3296:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    3298:	4a14      	ldr	r2, [pc, #80]	; (32ec <Clock_Ip_InitClock+0x5bc>)
    329a:	9b02      	ldr	r3, [sp, #8]
    329c:	00db      	lsls	r3, r3, #3
    329e:	4413      	add	r3, r2
    32a0:	685b      	ldr	r3, [r3, #4]
    32a2:	9a03      	ldr	r2, [sp, #12]
    32a4:	320d      	adds	r2, #13
    32a6:	00d2      	lsls	r2, r2, #3
    32a8:	9901      	ldr	r1, [sp, #4]
    32aa:	440a      	add	r2, r1
    32ac:	4610      	mov	r0, r2
    32ae:	4798      	blx	r3
    32b0:	e021      	b.n	32f6 <Clock_Ip_InitClock+0x5c6>
    32b2:	bf00      	nop
    32b4:	00015d74 	.word	0x00015d74
    32b8:	00015ce4 	.word	0x00015ce4
    32bc:	000162c0 	.word	0x000162c0
    32c0:	00015d34 	.word	0x00015d34
    32c4:	00016380 	.word	0x00016380
    32c8:	00015d64 	.word	0x00015d64
    32cc:	00016370 	.word	0x00016370
    32d0:	00015cf4 	.word	0x00015cf4
    32d4:	000162c8 	.word	0x000162c8
    32d8:	00015d24 	.word	0x00015d24
    32dc:	000162f0 	.word	0x000162f0
    32e0:	1fff8b80 	.word	0x1fff8b80
    32e4:	000161c0 	.word	0x000161c0
    32e8:	00015d44 	.word	0x00015d44
    32ec:	000163ac 	.word	0x000163ac
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    32f0:	4b3a      	ldr	r3, [pc, #232]	; (33dc <Clock_Ip_InitClock+0x6ac>)
    32f2:	2201      	movs	r2, #1
    32f4:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    32f6:	9b03      	ldr	r3, [sp, #12]
    32f8:	3301      	adds	r3, #1
    32fa:	9303      	str	r3, [sp, #12]
    32fc:	9b01      	ldr	r3, [sp, #4]
    32fe:	7adb      	ldrb	r3, [r3, #11]
    3300:	461a      	mov	r2, r3
    3302:	9b03      	ldr	r3, [sp, #12]
    3304:	4293      	cmp	r3, r2
    3306:	d3ac      	bcc.n	3262 <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    3308:	4b34      	ldr	r3, [pc, #208]	; (33dc <Clock_Ip_InitClock+0x6ac>)
    330a:	781b      	ldrb	r3, [r3, #0]
    330c:	f083 0301 	eor.w	r3, r3, #1
    3310:	b2db      	uxtb	r3, r3
    3312:	2b00      	cmp	r3, #0
    3314:	d05e      	beq.n	33d4 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3316:	2300      	movs	r3, #0
    3318:	9303      	str	r3, [sp, #12]
    331a:	e01f      	b.n	335c <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    331c:	9a01      	ldr	r2, [sp, #4]
    331e:	9b03      	ldr	r3, [sp, #12]
    3320:	334e      	adds	r3, #78	; 0x4e
    3322:	00db      	lsls	r3, r3, #3
    3324:	4413      	add	r3, r2
    3326:	685a      	ldr	r2, [r3, #4]
    3328:	492d      	ldr	r1, [pc, #180]	; (33e0 <Clock_Ip_InitClock+0x6b0>)
    332a:	4613      	mov	r3, r2
    332c:	00db      	lsls	r3, r3, #3
    332e:	4413      	add	r3, r2
    3330:	440b      	add	r3, r1
    3332:	3301      	adds	r3, #1
    3334:	781b      	ldrb	r3, [r3, #0]
    3336:	461a      	mov	r2, r3
    3338:	4b2a      	ldr	r3, [pc, #168]	; (33e4 <Clock_Ip_InitClock+0x6b4>)
    333a:	5c9b      	ldrb	r3, [r3, r2]
    333c:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    333e:	4a2a      	ldr	r2, [pc, #168]	; (33e8 <Clock_Ip_InitClock+0x6b8>)
    3340:	9b02      	ldr	r3, [sp, #8]
    3342:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    3346:	9a03      	ldr	r2, [sp, #12]
    3348:	324e      	adds	r2, #78	; 0x4e
    334a:	00d2      	lsls	r2, r2, #3
    334c:	9901      	ldr	r1, [sp, #4]
    334e:	440a      	add	r2, r1
    3350:	3204      	adds	r2, #4
    3352:	4610      	mov	r0, r2
    3354:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3356:	9b03      	ldr	r3, [sp, #12]
    3358:	3301      	adds	r3, #1
    335a:	9303      	str	r3, [sp, #12]
    335c:	9b01      	ldr	r3, [sp, #4]
    335e:	7c1b      	ldrb	r3, [r3, #16]
    3360:	461a      	mov	r2, r3
    3362:	9b03      	ldr	r3, [sp, #12]
    3364:	4293      	cmp	r3, r2
    3366:	d3d9      	bcc.n	331c <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    3368:	2300      	movs	r3, #0
    336a:	9303      	str	r3, [sp, #12]
    336c:	e028      	b.n	33c0 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    336e:	9901      	ldr	r1, [sp, #4]
    3370:	9a03      	ldr	r2, [sp, #12]
    3372:	4613      	mov	r3, r2
    3374:	009b      	lsls	r3, r3, #2
    3376:	4413      	add	r3, r2
    3378:	009b      	lsls	r3, r3, #2
    337a:	440b      	add	r3, r1
    337c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    3380:	681a      	ldr	r2, [r3, #0]
    3382:	4917      	ldr	r1, [pc, #92]	; (33e0 <Clock_Ip_InitClock+0x6b0>)
    3384:	4613      	mov	r3, r2
    3386:	00db      	lsls	r3, r3, #3
    3388:	4413      	add	r3, r2
    338a:	440b      	add	r3, r1
    338c:	3301      	adds	r3, #1
    338e:	781b      	ldrb	r3, [r3, #0]
    3390:	461a      	mov	r2, r3
    3392:	4b16      	ldr	r3, [pc, #88]	; (33ec <Clock_Ip_InitClock+0x6bc>)
    3394:	5c9b      	ldrb	r3, [r3, r2]
    3396:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    3398:	4a15      	ldr	r2, [pc, #84]	; (33f0 <Clock_Ip_InitClock+0x6c0>)
    339a:	9b02      	ldr	r3, [sp, #8]
    339c:	011b      	lsls	r3, r3, #4
    339e:	4413      	add	r3, r2
    33a0:	330c      	adds	r3, #12
    33a2:	6819      	ldr	r1, [r3, #0]
    33a4:	9a03      	ldr	r2, [sp, #12]
    33a6:	4613      	mov	r3, r2
    33a8:	009b      	lsls	r3, r3, #2
    33aa:	4413      	add	r3, r2
    33ac:	009b      	lsls	r3, r3, #2
    33ae:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    33b2:	9a01      	ldr	r2, [sp, #4]
    33b4:	4413      	add	r3, r2
    33b6:	4618      	mov	r0, r3
    33b8:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    33ba:	9b03      	ldr	r3, [sp, #12]
    33bc:	3301      	adds	r3, #1
    33be:	9303      	str	r3, [sp, #12]
    33c0:	9b01      	ldr	r3, [sp, #4]
    33c2:	7c9b      	ldrb	r3, [r3, #18]
    33c4:	461a      	mov	r2, r3
    33c6:	9b03      	ldr	r3, [sp, #12]
    33c8:	4293      	cmp	r3, r2
    33ca:	d3d0      	bcc.n	336e <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    33cc:	2104      	movs	r1, #4
    33ce:	9801      	ldr	r0, [sp, #4]
    33d0:	f002 ff48 	bl	6264 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    33d4:	bf00      	nop
    33d6:	b004      	add	sp, #16
    33d8:	bd10      	pop	{r4, pc}
    33da:	bf00      	nop
    33dc:	1fff8b80 	.word	0x1fff8b80
    33e0:	00015d74 	.word	0x00015d74
    33e4:	00015d14 	.word	0x00015d14
    33e8:	000162fc 	.word	0x000162fc
    33ec:	00015d64 	.word	0x00015d64
    33f0:	00016370 	.word	0x00016370

000033f4 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    33f4:	b500      	push	{lr}
    33f6:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    33f8:	2302      	movs	r3, #2
    33fa:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    33fc:	2300      	movs	r3, #0
    33fe:	9304      	str	r3, [sp, #16]
    3400:	e02c      	b.n	345c <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    3402:	4a36      	ldr	r2, [pc, #216]	; (34dc <Clock_Ip_GetPllStatus+0xe8>)
    3404:	9b04      	ldr	r3, [sp, #16]
    3406:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    340a:	4935      	ldr	r1, [pc, #212]	; (34e0 <Clock_Ip_GetPllStatus+0xec>)
    340c:	4613      	mov	r3, r2
    340e:	00db      	lsls	r3, r3, #3
    3410:	4413      	add	r3, r2
    3412:	440b      	add	r3, r1
    3414:	3301      	adds	r3, #1
    3416:	781b      	ldrb	r3, [r3, #0]
    3418:	461a      	mov	r2, r3
    341a:	4b32      	ldr	r3, [pc, #200]	; (34e4 <Clock_Ip_GetPllStatus+0xf0>)
    341c:	5c9b      	ldrb	r3, [r3, r2]
    341e:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    3420:	4931      	ldr	r1, [pc, #196]	; (34e8 <Clock_Ip_GetPllStatus+0xf4>)
    3422:	9a03      	ldr	r2, [sp, #12]
    3424:	4613      	mov	r3, r2
    3426:	009b      	lsls	r3, r3, #2
    3428:	4413      	add	r3, r2
    342a:	009b      	lsls	r3, r3, #2
    342c:	440b      	add	r3, r1
    342e:	3308      	adds	r3, #8
    3430:	681b      	ldr	r3, [r3, #0]
    3432:	492a      	ldr	r1, [pc, #168]	; (34dc <Clock_Ip_GetPllStatus+0xe8>)
    3434:	9a04      	ldr	r2, [sp, #16]
    3436:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    343a:	4610      	mov	r0, r2
    343c:	4798      	blx	r3
    343e:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    3440:	9b02      	ldr	r3, [sp, #8]
    3442:	2b01      	cmp	r3, #1
    3444:	d102      	bne.n	344c <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    3446:	2301      	movs	r3, #1
    3448:	9305      	str	r3, [sp, #20]
            break;
    344a:	e00d      	b.n	3468 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    344c:	9b02      	ldr	r3, [sp, #8]
    344e:	2b02      	cmp	r3, #2
    3450:	d101      	bne.n	3456 <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    3452:	2300      	movs	r3, #0
    3454:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    3456:	9b04      	ldr	r3, [sp, #16]
    3458:	3301      	adds	r3, #1
    345a:	9304      	str	r3, [sp, #16]
    345c:	4b23      	ldr	r3, [pc, #140]	; (34ec <Clock_Ip_GetPllStatus+0xf8>)
    345e:	789b      	ldrb	r3, [r3, #2]
    3460:	461a      	mov	r2, r3
    3462:	9b04      	ldr	r3, [sp, #16]
    3464:	4293      	cmp	r3, r2
    3466:	d3cc      	bcc.n	3402 <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    3468:	9b05      	ldr	r3, [sp, #20]
    346a:	2b00      	cmp	r3, #0
    346c:	d130      	bne.n	34d0 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    346e:	2300      	movs	r3, #0
    3470:	9304      	str	r3, [sp, #16]
    3472:	e027      	b.n	34c4 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    3474:	4a1e      	ldr	r2, [pc, #120]	; (34f0 <Clock_Ip_GetPllStatus+0xfc>)
    3476:	9b04      	ldr	r3, [sp, #16]
    3478:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    347c:	4918      	ldr	r1, [pc, #96]	; (34e0 <Clock_Ip_GetPllStatus+0xec>)
    347e:	4613      	mov	r3, r2
    3480:	00db      	lsls	r3, r3, #3
    3482:	4413      	add	r3, r2
    3484:	440b      	add	r3, r1
    3486:	3301      	adds	r3, #1
    3488:	781b      	ldrb	r3, [r3, #0]
    348a:	461a      	mov	r2, r3
    348c:	4b19      	ldr	r3, [pc, #100]	; (34f4 <Clock_Ip_GetPllStatus+0x100>)
    348e:	5c9b      	ldrb	r3, [r3, r2]
    3490:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    3492:	4919      	ldr	r1, [pc, #100]	; (34f8 <Clock_Ip_GetPllStatus+0x104>)
    3494:	9a03      	ldr	r2, [sp, #12]
    3496:	4613      	mov	r3, r2
    3498:	005b      	lsls	r3, r3, #1
    349a:	4413      	add	r3, r2
    349c:	009b      	lsls	r3, r3, #2
    349e:	440b      	add	r3, r1
    34a0:	3308      	adds	r3, #8
    34a2:	681b      	ldr	r3, [r3, #0]
    34a4:	4912      	ldr	r1, [pc, #72]	; (34f0 <Clock_Ip_GetPllStatus+0xfc>)
    34a6:	9a04      	ldr	r2, [sp, #16]
    34a8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    34ac:	4610      	mov	r0, r2
    34ae:	4798      	blx	r3
    34b0:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    34b2:	9b01      	ldr	r3, [sp, #4]
    34b4:	2b01      	cmp	r3, #1
    34b6:	d102      	bne.n	34be <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    34b8:	2301      	movs	r3, #1
    34ba:	9305      	str	r3, [sp, #20]
                break;
    34bc:	e008      	b.n	34d0 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    34be:	9b04      	ldr	r3, [sp, #16]
    34c0:	3301      	adds	r3, #1
    34c2:	9304      	str	r3, [sp, #16]
    34c4:	4b09      	ldr	r3, [pc, #36]	; (34ec <Clock_Ip_GetPllStatus+0xf8>)
    34c6:	78db      	ldrb	r3, [r3, #3]
    34c8:	461a      	mov	r2, r3
    34ca:	9b04      	ldr	r3, [sp, #16]
    34cc:	4293      	cmp	r3, r2
    34ce:	d3d1      	bcc.n	3474 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    34d0:	9b05      	ldr	r3, [sp, #20]
}
    34d2:	4618      	mov	r0, r3
    34d4:	b007      	add	sp, #28
    34d6:	f85d fb04 	ldr.w	pc, [sp], #4
    34da:	bf00      	nop
    34dc:	0001627c 	.word	0x0001627c
    34e0:	00015d74 	.word	0x00015d74
    34e4:	00015d34 	.word	0x00015d34
    34e8:	00016380 	.word	0x00016380
    34ec:	1fff8b80 	.word	0x1fff8b80
    34f0:	00016280 	.word	0x00016280
    34f4:	00015d24 	.word	0x00015d24
    34f8:	000162f0 	.word	0x000162f0

000034fc <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    34fc:	b500      	push	{lr}
    34fe:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    3500:	4b55      	ldr	r3, [pc, #340]	; (3658 <Clock_Ip_DistributePll+0x15c>)
    3502:	681b      	ldr	r3, [r3, #0]
    3504:	2b00      	cmp	r3, #0
    3506:	f000 80a2 	beq.w	364e <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    350a:	2300      	movs	r3, #0
    350c:	9301      	str	r3, [sp, #4]
    350e:	e02c      	b.n	356a <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    3510:	4b51      	ldr	r3, [pc, #324]	; (3658 <Clock_Ip_DistributePll+0x15c>)
    3512:	681a      	ldr	r2, [r3, #0]
    3514:	9b01      	ldr	r3, [sp, #4]
    3516:	330d      	adds	r3, #13
    3518:	00db      	lsls	r3, r3, #3
    351a:	4413      	add	r3, r2
    351c:	685b      	ldr	r3, [r3, #4]
    351e:	4a4f      	ldr	r2, [pc, #316]	; (365c <Clock_Ip_DistributePll+0x160>)
    3520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3524:	2b03      	cmp	r3, #3
    3526:	d11d      	bne.n	3564 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    3528:	4b4b      	ldr	r3, [pc, #300]	; (3658 <Clock_Ip_DistributePll+0x15c>)
    352a:	681b      	ldr	r3, [r3, #0]
    352c:	9a01      	ldr	r2, [sp, #4]
    352e:	320d      	adds	r2, #13
    3530:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    3534:	494a      	ldr	r1, [pc, #296]	; (3660 <Clock_Ip_DistributePll+0x164>)
    3536:	4613      	mov	r3, r2
    3538:	00db      	lsls	r3, r3, #3
    353a:	4413      	add	r3, r2
    353c:	440b      	add	r3, r1
    353e:	3301      	adds	r3, #1
    3540:	781b      	ldrb	r3, [r3, #0]
    3542:	461a      	mov	r2, r3
    3544:	4b47      	ldr	r3, [pc, #284]	; (3664 <Clock_Ip_DistributePll+0x168>)
    3546:	5c9b      	ldrb	r3, [r3, r2]
    3548:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    354a:	4a47      	ldr	r2, [pc, #284]	; (3668 <Clock_Ip_DistributePll+0x16c>)
    354c:	9b00      	ldr	r3, [sp, #0]
    354e:	00db      	lsls	r3, r3, #3
    3550:	4413      	add	r3, r2
    3552:	685b      	ldr	r3, [r3, #4]
    3554:	4a40      	ldr	r2, [pc, #256]	; (3658 <Clock_Ip_DistributePll+0x15c>)
    3556:	6811      	ldr	r1, [r2, #0]
    3558:	9a01      	ldr	r2, [sp, #4]
    355a:	320d      	adds	r2, #13
    355c:	00d2      	lsls	r2, r2, #3
    355e:	440a      	add	r2, r1
    3560:	4610      	mov	r0, r2
    3562:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    3564:	9b01      	ldr	r3, [sp, #4]
    3566:	3301      	adds	r3, #1
    3568:	9301      	str	r3, [sp, #4]
    356a:	4b3b      	ldr	r3, [pc, #236]	; (3658 <Clock_Ip_DistributePll+0x15c>)
    356c:	681b      	ldr	r3, [r3, #0]
    356e:	7adb      	ldrb	r3, [r3, #11]
    3570:	461a      	mov	r2, r3
    3572:	9b01      	ldr	r3, [sp, #4]
    3574:	4293      	cmp	r3, r2
    3576:	d3cb      	bcc.n	3510 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    3578:	4b3c      	ldr	r3, [pc, #240]	; (366c <Clock_Ip_DistributePll+0x170>)
    357a:	781b      	ldrb	r3, [r3, #0]
    357c:	2b00      	cmp	r3, #0
    357e:	d066      	beq.n	364e <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3580:	2300      	movs	r3, #0
    3582:	9301      	str	r3, [sp, #4]
    3584:	e021      	b.n	35ca <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    3586:	4b34      	ldr	r3, [pc, #208]	; (3658 <Clock_Ip_DistributePll+0x15c>)
    3588:	681a      	ldr	r2, [r3, #0]
    358a:	9b01      	ldr	r3, [sp, #4]
    358c:	334e      	adds	r3, #78	; 0x4e
    358e:	00db      	lsls	r3, r3, #3
    3590:	4413      	add	r3, r2
    3592:	685a      	ldr	r2, [r3, #4]
    3594:	4932      	ldr	r1, [pc, #200]	; (3660 <Clock_Ip_DistributePll+0x164>)
    3596:	4613      	mov	r3, r2
    3598:	00db      	lsls	r3, r3, #3
    359a:	4413      	add	r3, r2
    359c:	440b      	add	r3, r1
    359e:	3301      	adds	r3, #1
    35a0:	781b      	ldrb	r3, [r3, #0]
    35a2:	461a      	mov	r2, r3
    35a4:	4b32      	ldr	r3, [pc, #200]	; (3670 <Clock_Ip_DistributePll+0x174>)
    35a6:	5c9b      	ldrb	r3, [r3, r2]
    35a8:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    35aa:	4a32      	ldr	r2, [pc, #200]	; (3674 <Clock_Ip_DistributePll+0x178>)
    35ac:	9b00      	ldr	r3, [sp, #0]
    35ae:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    35b2:	4a29      	ldr	r2, [pc, #164]	; (3658 <Clock_Ip_DistributePll+0x15c>)
    35b4:	6811      	ldr	r1, [r2, #0]
    35b6:	9a01      	ldr	r2, [sp, #4]
    35b8:	324e      	adds	r2, #78	; 0x4e
    35ba:	00d2      	lsls	r2, r2, #3
    35bc:	440a      	add	r2, r1
    35be:	3204      	adds	r2, #4
    35c0:	4610      	mov	r0, r2
    35c2:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    35c4:	9b01      	ldr	r3, [sp, #4]
    35c6:	3301      	adds	r3, #1
    35c8:	9301      	str	r3, [sp, #4]
    35ca:	4b23      	ldr	r3, [pc, #140]	; (3658 <Clock_Ip_DistributePll+0x15c>)
    35cc:	681b      	ldr	r3, [r3, #0]
    35ce:	7c1b      	ldrb	r3, [r3, #16]
    35d0:	461a      	mov	r2, r3
    35d2:	9b01      	ldr	r3, [sp, #4]
    35d4:	4293      	cmp	r3, r2
    35d6:	d3d6      	bcc.n	3586 <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    35d8:	2300      	movs	r3, #0
    35da:	9301      	str	r3, [sp, #4]
    35dc:	e02a      	b.n	3634 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    35de:	4b1e      	ldr	r3, [pc, #120]	; (3658 <Clock_Ip_DistributePll+0x15c>)
    35e0:	6819      	ldr	r1, [r3, #0]
    35e2:	9a01      	ldr	r2, [sp, #4]
    35e4:	4613      	mov	r3, r2
    35e6:	009b      	lsls	r3, r3, #2
    35e8:	4413      	add	r3, r2
    35ea:	009b      	lsls	r3, r3, #2
    35ec:	440b      	add	r3, r1
    35ee:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    35f2:	681a      	ldr	r2, [r3, #0]
    35f4:	491a      	ldr	r1, [pc, #104]	; (3660 <Clock_Ip_DistributePll+0x164>)
    35f6:	4613      	mov	r3, r2
    35f8:	00db      	lsls	r3, r3, #3
    35fa:	4413      	add	r3, r2
    35fc:	440b      	add	r3, r1
    35fe:	3301      	adds	r3, #1
    3600:	781b      	ldrb	r3, [r3, #0]
    3602:	461a      	mov	r2, r3
    3604:	4b1c      	ldr	r3, [pc, #112]	; (3678 <Clock_Ip_DistributePll+0x17c>)
    3606:	5c9b      	ldrb	r3, [r3, r2]
    3608:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    360a:	4a1c      	ldr	r2, [pc, #112]	; (367c <Clock_Ip_DistributePll+0x180>)
    360c:	9b00      	ldr	r3, [sp, #0]
    360e:	011b      	lsls	r3, r3, #4
    3610:	4413      	add	r3, r2
    3612:	330c      	adds	r3, #12
    3614:	6819      	ldr	r1, [r3, #0]
    3616:	4b10      	ldr	r3, [pc, #64]	; (3658 <Clock_Ip_DistributePll+0x15c>)
    3618:	6818      	ldr	r0, [r3, #0]
    361a:	9a01      	ldr	r2, [sp, #4]
    361c:	4613      	mov	r3, r2
    361e:	009b      	lsls	r3, r3, #2
    3620:	4413      	add	r3, r2
    3622:	009b      	lsls	r3, r3, #2
    3624:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    3628:	4403      	add	r3, r0
    362a:	4618      	mov	r0, r3
    362c:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    362e:	9b01      	ldr	r3, [sp, #4]
    3630:	3301      	adds	r3, #1
    3632:	9301      	str	r3, [sp, #4]
    3634:	4b08      	ldr	r3, [pc, #32]	; (3658 <Clock_Ip_DistributePll+0x15c>)
    3636:	681b      	ldr	r3, [r3, #0]
    3638:	7c9b      	ldrb	r3, [r3, #18]
    363a:	461a      	mov	r2, r3
    363c:	9b01      	ldr	r3, [sp, #4]
    363e:	4293      	cmp	r3, r2
    3640:	d3cd      	bcc.n	35de <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    3642:	4b05      	ldr	r3, [pc, #20]	; (3658 <Clock_Ip_DistributePll+0x15c>)
    3644:	681b      	ldr	r3, [r3, #0]
    3646:	2104      	movs	r1, #4
    3648:	4618      	mov	r0, r3
    364a:	f002 fe0b 	bl	6264 <Clock_Ip_Command>
        }
    }
}
    364e:	bf00      	nop
    3650:	b003      	add	sp, #12
    3652:	f85d fb04 	ldr.w	pc, [sp], #4
    3656:	bf00      	nop
    3658:	1fff8b78 	.word	0x1fff8b78
    365c:	000161c0 	.word	0x000161c0
    3660:	00015d74 	.word	0x00015d74
    3664:	00015d44 	.word	0x00015d44
    3668:	000163ac 	.word	0x000163ac
    366c:	1fff8b80 	.word	0x1fff8b80
    3670:	00015d14 	.word	0x00015d14
    3674:	000162fc 	.word	0x000162fc
    3678:	00015d64 	.word	0x00015d64
    367c:	00016370 	.word	0x00016370

00003680 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    3680:	b500      	push	{lr}
    3682:	b085      	sub	sp, #20
    3684:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    3686:	490c      	ldr	r1, [pc, #48]	; (36b8 <Clock_Ip_DisableClockMonitor+0x38>)
    3688:	9a01      	ldr	r2, [sp, #4]
    368a:	4613      	mov	r3, r2
    368c:	00db      	lsls	r3, r3, #3
    368e:	4413      	add	r3, r2
    3690:	440b      	add	r3, r1
    3692:	3301      	adds	r3, #1
    3694:	781b      	ldrb	r3, [r3, #0]
    3696:	461a      	mov	r2, r3
    3698:	4b08      	ldr	r3, [pc, #32]	; (36bc <Clock_Ip_DisableClockMonitor+0x3c>)
    369a:	5c9b      	ldrb	r3, [r3, r2]
    369c:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    369e:	4a08      	ldr	r2, [pc, #32]	; (36c0 <Clock_Ip_DisableClockMonitor+0x40>)
    36a0:	9b03      	ldr	r3, [sp, #12]
    36a2:	011b      	lsls	r3, r3, #4
    36a4:	4413      	add	r3, r2
    36a6:	3308      	adds	r3, #8
    36a8:	681b      	ldr	r3, [r3, #0]
    36aa:	9801      	ldr	r0, [sp, #4]
    36ac:	4798      	blx	r3
}
    36ae:	bf00      	nop
    36b0:	b005      	add	sp, #20
    36b2:	f85d fb04 	ldr.w	pc, [sp], #4
    36b6:	bf00      	nop
    36b8:	00015d74 	.word	0x00015d74
    36bc:	00015d64 	.word	0x00015d64
    36c0:	00016370 	.word	0x00016370

000036c4 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    36c4:	b082      	sub	sp, #8
    36c6:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    36c8:	4a02      	ldr	r2, [pc, #8]	; (36d4 <Clock_Ip_InstallNotificationsCallback+0x10>)
    36ca:	9b01      	ldr	r3, [sp, #4]
    36cc:	6013      	str	r3, [r2, #0]
}
    36ce:	bf00      	nop
    36d0:	b002      	add	sp, #8
    36d2:	4770      	bx	lr
    36d4:	1fff8b14 	.word	0x1fff8b14

000036d8 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    36d8:	b500      	push	{lr}
    36da:	b085      	sub	sp, #20
    36dc:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    36de:	490c      	ldr	r1, [pc, #48]	; (3710 <Clock_Ip_DisableModuleClock+0x38>)
    36e0:	9a01      	ldr	r2, [sp, #4]
    36e2:	4613      	mov	r3, r2
    36e4:	00db      	lsls	r3, r3, #3
    36e6:	4413      	add	r3, r2
    36e8:	440b      	add	r3, r1
    36ea:	3301      	adds	r3, #1
    36ec:	781b      	ldrb	r3, [r3, #0]
    36ee:	461a      	mov	r2, r3
    36f0:	4b08      	ldr	r3, [pc, #32]	; (3714 <Clock_Ip_DisableModuleClock+0x3c>)
    36f2:	5c9b      	ldrb	r3, [r3, r2]
    36f4:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    36f6:	4a08      	ldr	r2, [pc, #32]	; (3718 <Clock_Ip_DisableModuleClock+0x40>)
    36f8:	9b03      	ldr	r3, [sp, #12]
    36fa:	00db      	lsls	r3, r3, #3
    36fc:	4413      	add	r3, r2
    36fe:	685b      	ldr	r3, [r3, #4]
    3700:	2101      	movs	r1, #1
    3702:	9801      	ldr	r0, [sp, #4]
    3704:	4798      	blx	r3
}
    3706:	bf00      	nop
    3708:	b005      	add	sp, #20
    370a:	f85d fb04 	ldr.w	pc, [sp], #4
    370e:	bf00      	nop
    3710:	00015d74 	.word	0x00015d74
    3714:	00015d14 	.word	0x00015d14
    3718:	000162fc 	.word	0x000162fc

0000371c <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    371c:	b500      	push	{lr}
    371e:	b085      	sub	sp, #20
    3720:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    3722:	490c      	ldr	r1, [pc, #48]	; (3754 <Clock_Ip_EnableModuleClock+0x38>)
    3724:	9a01      	ldr	r2, [sp, #4]
    3726:	4613      	mov	r3, r2
    3728:	00db      	lsls	r3, r3, #3
    372a:	4413      	add	r3, r2
    372c:	440b      	add	r3, r1
    372e:	3301      	adds	r3, #1
    3730:	781b      	ldrb	r3, [r3, #0]
    3732:	461a      	mov	r2, r3
    3734:	4b08      	ldr	r3, [pc, #32]	; (3758 <Clock_Ip_EnableModuleClock+0x3c>)
    3736:	5c9b      	ldrb	r3, [r3, r2]
    3738:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    373a:	4a08      	ldr	r2, [pc, #32]	; (375c <Clock_Ip_EnableModuleClock+0x40>)
    373c:	9b03      	ldr	r3, [sp, #12]
    373e:	00db      	lsls	r3, r3, #3
    3740:	4413      	add	r3, r2
    3742:	685b      	ldr	r3, [r3, #4]
    3744:	2100      	movs	r1, #0
    3746:	9801      	ldr	r0, [sp, #4]
    3748:	4798      	blx	r3
}
    374a:	bf00      	nop
    374c:	b005      	add	sp, #20
    374e:	f85d fb04 	ldr.w	pc, [sp], #4
    3752:	bf00      	nop
    3754:	00015d74 	.word	0x00015d74
    3758:	00015d14 	.word	0x00015d14
    375c:	000162fc 	.word	0x000162fc

00003760 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    3760:	b500      	push	{lr}
    3762:	b083      	sub	sp, #12
    3764:	9001      	str	r0, [sp, #4]
    3766:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    3768:	4b08      	ldr	r3, [pc, #32]	; (378c <Clock_Ip_PowerModeChangeNotification+0x2c>)
    376a:	2200      	movs	r2, #0
    376c:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    376e:	4b08      	ldr	r3, [pc, #32]	; (3790 <Clock_Ip_PowerModeChangeNotification+0x30>)
    3770:	681b      	ldr	r3, [r3, #0]
    3772:	2102      	movs	r1, #2
    3774:	4618      	mov	r0, r3
    3776:	f002 fd75 	bl	6264 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    377a:	9900      	ldr	r1, [sp, #0]
    377c:	9801      	ldr	r0, [sp, #4]
    377e:	f002 fc51 	bl	6024 <Clock_Ip_ClockPowerModeChangeNotification>
}
    3782:	bf00      	nop
    3784:	b003      	add	sp, #12
    3786:	f85d fb04 	ldr.w	pc, [sp], #4
    378a:	bf00      	nop
    378c:	1fff8b10 	.word	0x1fff8b10
    3790:	1fff8b78 	.word	0x1fff8b78

00003794 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    3794:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    3796:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    379a:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    379c:	4b06      	ldr	r3, [pc, #24]	; (37b8 <Clock_Ip_SetWaitStates+0x24>)
    379e:	785b      	ldrb	r3, [r3, #1]
    37a0:	2b00      	cmp	r3, #0
    37a2:	d005      	beq.n	37b0 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    37a4:	9b01      	ldr	r3, [sp, #4]
    37a6:	3b01      	subs	r3, #1
    37a8:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    37aa:	9b01      	ldr	r3, [sp, #4]
    37ac:	2b00      	cmp	r3, #0
    37ae:	d1f9      	bne.n	37a4 <Clock_Ip_SetWaitStates+0x10>
    }
}
    37b0:	bf00      	nop
    37b2:	b002      	add	sp, #8
    37b4:	4770      	bx	lr
    37b6:	bf00      	nop
    37b8:	1fff8b80 	.word	0x1fff8b80

000037bc <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    37bc:	b500      	push	{lr}
    37be:	b083      	sub	sp, #12
    37c0:	9001      	str	r0, [sp, #4]
    37c2:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    37c4:	4b04      	ldr	r3, [pc, #16]	; (37d8 <Clock_Ip_ReportClockErrors+0x1c>)
    37c6:	681b      	ldr	r3, [r3, #0]
    37c8:	9900      	ldr	r1, [sp, #0]
    37ca:	9801      	ldr	r0, [sp, #4]
    37cc:	4798      	blx	r3
}
    37ce:	bf00      	nop
    37d0:	b003      	add	sp, #12
    37d2:	f85d fb04 	ldr.w	pc, [sp], #4
    37d6:	bf00      	nop
    37d8:	1fff8b14 	.word	0x1fff8b14

000037dc <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    37dc:	b500      	push	{lr}
    37de:	b085      	sub	sp, #20
    37e0:	9003      	str	r0, [sp, #12]
    37e2:	9102      	str	r1, [sp, #8]
    37e4:	9201      	str	r2, [sp, #4]
    37e6:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    37e8:	2000      	movs	r0, #0
    37ea:	f7fe ffd1 	bl	2790 <OsIf_GetCounter>
    37ee:	4602      	mov	r2, r0
    37f0:	9b03      	ldr	r3, [sp, #12]
    37f2:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    37f4:	9b02      	ldr	r3, [sp, #8]
    37f6:	2200      	movs	r2, #0
    37f8:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    37fa:	2100      	movs	r1, #0
    37fc:	9800      	ldr	r0, [sp, #0]
    37fe:	f7ff f813 	bl	2828 <OsIf_MicrosToTicks>
    3802:	4602      	mov	r2, r0
    3804:	9b01      	ldr	r3, [sp, #4]
    3806:	601a      	str	r2, [r3, #0]
}
    3808:	bf00      	nop
    380a:	b005      	add	sp, #20
    380c:	f85d fb04 	ldr.w	pc, [sp], #4

00003810 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    3810:	b500      	push	{lr}
    3812:	b087      	sub	sp, #28
    3814:	9003      	str	r0, [sp, #12]
    3816:	9102      	str	r1, [sp, #8]
    3818:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    381a:	2300      	movs	r3, #0
    381c:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    3820:	2100      	movs	r1, #0
    3822:	9803      	ldr	r0, [sp, #12]
    3824:	f7fe ffcd 	bl	27c2 <OsIf_GetElapsed>
    3828:	4602      	mov	r2, r0
    382a:	9b02      	ldr	r3, [sp, #8]
    382c:	681b      	ldr	r3, [r3, #0]
    382e:	441a      	add	r2, r3
    3830:	9b02      	ldr	r3, [sp, #8]
    3832:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    3834:	9b02      	ldr	r3, [sp, #8]
    3836:	681b      	ldr	r3, [r3, #0]
    3838:	9a01      	ldr	r2, [sp, #4]
    383a:	429a      	cmp	r2, r3
    383c:	d802      	bhi.n	3844 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    383e:	2301      	movs	r3, #1
    3840:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    3844:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    3848:	4618      	mov	r0, r3
    384a:	b007      	add	sp, #28
    384c:	f85d fb04 	ldr.w	pc, [sp], #4

00003850 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    3850:	b082      	sub	sp, #8
    3852:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3854:	bf00      	nop
    3856:	b002      	add	sp, #8
    3858:	4770      	bx	lr

0000385a <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    385a:	b500      	push	{lr}
    385c:	b083      	sub	sp, #12
    385e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3860:	9b01      	ldr	r3, [sp, #4]
    3862:	2b00      	cmp	r3, #0
    3864:	d002      	beq.n	386c <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    3866:	9801      	ldr	r0, [sp, #4]
    3868:	f000 f8ad 	bl	39c6 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    386c:	bf00      	nop
    386e:	b003      	add	sp, #12
    3870:	f85d fb04 	ldr.w	pc, [sp], #4

00003874 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    3874:	b500      	push	{lr}
    3876:	b083      	sub	sp, #12
    3878:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    387a:	9b01      	ldr	r3, [sp, #4]
    387c:	2b00      	cmp	r3, #0
    387e:	d002      	beq.n	3886 <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    3880:	9801      	ldr	r0, [sp, #4]
    3882:	f000 f8cd 	bl	3a20 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3886:	bf00      	nop
    3888:	b003      	add	sp, #12
    388a:	f85d fb04 	ldr.w	pc, [sp], #4

0000388e <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    388e:	b500      	push	{lr}
    3890:	b083      	sub	sp, #12
    3892:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3894:	9b01      	ldr	r3, [sp, #4]
    3896:	2b00      	cmp	r3, #0
    3898:	d002      	beq.n	38a0 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    389a:	9801      	ldr	r0, [sp, #4]
    389c:	f000 f8ee 	bl	3a7c <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38a0:	bf00      	nop
    38a2:	b003      	add	sp, #12
    38a4:	f85d fb04 	ldr.w	pc, [sp], #4

000038a8 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    38a8:	b500      	push	{lr}
    38aa:	b083      	sub	sp, #12
    38ac:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38ae:	9b01      	ldr	r3, [sp, #4]
    38b0:	2b00      	cmp	r3, #0
    38b2:	d002      	beq.n	38ba <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    38b4:	9801      	ldr	r0, [sp, #4]
    38b6:	f000 f8f9 	bl	3aac <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38ba:	bf00      	nop
    38bc:	b003      	add	sp, #12
    38be:	f85d fb04 	ldr.w	pc, [sp], #4

000038c2 <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    38c2:	b500      	push	{lr}
    38c4:	b083      	sub	sp, #12
    38c6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38c8:	9b01      	ldr	r3, [sp, #4]
    38ca:	2b00      	cmp	r3, #0
    38cc:	d002      	beq.n	38d4 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    38ce:	9801      	ldr	r0, [sp, #4]
    38d0:	f000 f904 	bl	3adc <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38d4:	bf00      	nop
    38d6:	b003      	add	sp, #12
    38d8:	f85d fb04 	ldr.w	pc, [sp], #4

000038dc <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    38dc:	b500      	push	{lr}
    38de:	b083      	sub	sp, #12
    38e0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38e2:	9b01      	ldr	r3, [sp, #4]
    38e4:	2b00      	cmp	r3, #0
    38e6:	d002      	beq.n	38ee <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    38e8:	9801      	ldr	r0, [sp, #4]
    38ea:	f000 f90f 	bl	3b0c <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38ee:	bf00      	nop
    38f0:	b003      	add	sp, #12
    38f2:	f85d fb04 	ldr.w	pc, [sp], #4

000038f6 <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    38f6:	b500      	push	{lr}
    38f8:	b083      	sub	sp, #12
    38fa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38fc:	9b01      	ldr	r3, [sp, #4]
    38fe:	2b00      	cmp	r3, #0
    3900:	d002      	beq.n	3908 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    3902:	9801      	ldr	r0, [sp, #4]
    3904:	f000 f91a 	bl	3b3c <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3908:	bf00      	nop
    390a:	b003      	add	sp, #12
    390c:	f85d fb04 	ldr.w	pc, [sp], #4

00003910 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    3910:	b500      	push	{lr}
    3912:	b083      	sub	sp, #12
    3914:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3916:	9b01      	ldr	r3, [sp, #4]
    3918:	2b00      	cmp	r3, #0
    391a:	d002      	beq.n	3922 <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    391c:	9801      	ldr	r0, [sp, #4]
    391e:	f000 f925 	bl	3b6c <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3922:	bf00      	nop
    3924:	b003      	add	sp, #12
    3926:	f85d fb04 	ldr.w	pc, [sp], #4

0000392a <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    392a:	b500      	push	{lr}
    392c:	b083      	sub	sp, #12
    392e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3930:	9b01      	ldr	r3, [sp, #4]
    3932:	2b00      	cmp	r3, #0
    3934:	d002      	beq.n	393c <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    3936:	9801      	ldr	r0, [sp, #4]
    3938:	f000 f930 	bl	3b9c <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    393c:	bf00      	nop
    393e:	b003      	add	sp, #12
    3940:	f85d fb04 	ldr.w	pc, [sp], #4

00003944 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    3944:	b500      	push	{lr}
    3946:	b083      	sub	sp, #12
    3948:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    394a:	9b01      	ldr	r3, [sp, #4]
    394c:	2b00      	cmp	r3, #0
    394e:	d002      	beq.n	3956 <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    3950:	9801      	ldr	r0, [sp, #4]
    3952:	f000 f93b 	bl	3bcc <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3956:	bf00      	nop
    3958:	b003      	add	sp, #12
    395a:	f85d fb04 	ldr.w	pc, [sp], #4

0000395e <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    395e:	b500      	push	{lr}
    3960:	b083      	sub	sp, #12
    3962:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3964:	9b01      	ldr	r3, [sp, #4]
    3966:	2b00      	cmp	r3, #0
    3968:	d002      	beq.n	3970 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    396a:	9801      	ldr	r0, [sp, #4]
    396c:	f000 f946 	bl	3bfc <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3970:	bf00      	nop
    3972:	b003      	add	sp, #12
    3974:	f85d fb04 	ldr.w	pc, [sp], #4

00003978 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    3978:	b500      	push	{lr}
    397a:	b083      	sub	sp, #12
    397c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    397e:	9b01      	ldr	r3, [sp, #4]
    3980:	2b00      	cmp	r3, #0
    3982:	d002      	beq.n	398a <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    3984:	9801      	ldr	r0, [sp, #4]
    3986:	f000 f951 	bl	3c2c <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    398a:	bf00      	nop
    398c:	b003      	add	sp, #12
    398e:	f85d fb04 	ldr.w	pc, [sp], #4

00003992 <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    3992:	b500      	push	{lr}
    3994:	b083      	sub	sp, #12
    3996:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3998:	9b01      	ldr	r3, [sp, #4]
    399a:	2b00      	cmp	r3, #0
    399c:	d002      	beq.n	39a4 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    399e:	9801      	ldr	r0, [sp, #4]
    39a0:	f000 f95e 	bl	3c60 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    39a4:	bf00      	nop
    39a6:	b003      	add	sp, #12
    39a8:	f85d fb04 	ldr.w	pc, [sp], #4

000039ac <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    39ac:	b500      	push	{lr}
    39ae:	b083      	sub	sp, #12
    39b0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    39b2:	9b01      	ldr	r3, [sp, #4]
    39b4:	2b00      	cmp	r3, #0
    39b6:	d002      	beq.n	39be <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    39b8:	9801      	ldr	r0, [sp, #4]
    39ba:	f000 f98b 	bl	3cd4 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    39be:	bf00      	nop
    39c0:	b003      	add	sp, #12
    39c2:	f85d fb04 	ldr.w	pc, [sp], #4

000039c6 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    39c6:	b086      	sub	sp, #24
    39c8:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    39ca:	9b01      	ldr	r3, [sp, #4]
    39cc:	681a      	ldr	r2, [r3, #0]
    39ce:	4911      	ldr	r1, [pc, #68]	; (3a14 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    39d0:	4613      	mov	r3, r2
    39d2:	00db      	lsls	r3, r3, #3
    39d4:	4413      	add	r3, r2
    39d6:	440b      	add	r3, r1
    39d8:	781b      	ldrb	r3, [r3, #0]
    39da:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    39dc:	9b01      	ldr	r3, [sp, #4]
    39de:	685b      	ldr	r3, [r3, #4]
    39e0:	4a0d      	ldr	r2, [pc, #52]	; (3a18 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    39e2:	5cd3      	ldrb	r3, [r2, r3]
    39e4:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    39e6:	4a0d      	ldr	r2, [pc, #52]	; (3a1c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    39e8:	9b05      	ldr	r3, [sp, #20]
    39ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    39ee:	681b      	ldr	r3, [r3, #0]
    39f0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    39f2:	9b03      	ldr	r3, [sp, #12]
    39f4:	f023 0307 	bic.w	r3, r3, #7
    39f8:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    39fa:	9a03      	ldr	r2, [sp, #12]
    39fc:	9b04      	ldr	r3, [sp, #16]
    39fe:	4313      	orrs	r3, r2
    3a00:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    3a02:	4a06      	ldr	r2, [pc, #24]	; (3a1c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    3a04:	9b05      	ldr	r3, [sp, #20]
    3a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3a0a:	9a03      	ldr	r2, [sp, #12]
    3a0c:	601a      	str	r2, [r3, #0]
}
    3a0e:	bf00      	nop
    3a10:	b006      	add	sp, #24
    3a12:	4770      	bx	lr
    3a14:	00015d74 	.word	0x00015d74
    3a18:	0001616c 	.word	0x0001616c
    3a1c:	000161b0 	.word	0x000161b0

00003a20 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3a20:	b086      	sub	sp, #24
    3a22:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3a24:	9b01      	ldr	r3, [sp, #4]
    3a26:	681a      	ldr	r2, [r3, #0]
    3a28:	4911      	ldr	r1, [pc, #68]	; (3a70 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    3a2a:	4613      	mov	r3, r2
    3a2c:	00db      	lsls	r3, r3, #3
    3a2e:	4413      	add	r3, r2
    3a30:	440b      	add	r3, r1
    3a32:	781b      	ldrb	r3, [r3, #0]
    3a34:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    3a36:	9b01      	ldr	r3, [sp, #4]
    3a38:	685b      	ldr	r3, [r3, #4]
    3a3a:	4a0e      	ldr	r2, [pc, #56]	; (3a74 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    3a3c:	5cd3      	ldrb	r3, [r2, r3]
    3a3e:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    3a40:	4a0d      	ldr	r2, [pc, #52]	; (3a78 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    3a42:	9b05      	ldr	r3, [sp, #20]
    3a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3a48:	681b      	ldr	r3, [r3, #0]
    3a4a:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    3a4c:	9b03      	ldr	r3, [sp, #12]
    3a4e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3a52:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    3a54:	9b04      	ldr	r3, [sp, #16]
    3a56:	021b      	lsls	r3, r3, #8
    3a58:	9a03      	ldr	r2, [sp, #12]
    3a5a:	4313      	orrs	r3, r2
    3a5c:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    3a5e:	4a06      	ldr	r2, [pc, #24]	; (3a78 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    3a60:	9b05      	ldr	r3, [sp, #20]
    3a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3a66:	9a03      	ldr	r2, [sp, #12]
    3a68:	601a      	str	r2, [r3, #0]
}
    3a6a:	bf00      	nop
    3a6c:	b006      	add	sp, #24
    3a6e:	4770      	bx	lr
    3a70:	00015d74 	.word	0x00015d74
    3a74:	0001616c 	.word	0x0001616c
    3a78:	000161b0 	.word	0x000161b0

00003a7c <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3a7c:	b084      	sub	sp, #16
    3a7e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    3a80:	4b09      	ldr	r3, [pc, #36]	; (3aa8 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    3a82:	695b      	ldr	r3, [r3, #20]
    3a84:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    3a86:	9b03      	ldr	r3, [sp, #12]
    3a88:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3a8c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    3a8e:	9b01      	ldr	r3, [sp, #4]
    3a90:	685b      	ldr	r3, [r3, #4]
    3a92:	3b01      	subs	r3, #1
    3a94:	041b      	lsls	r3, r3, #16
    3a96:	9a03      	ldr	r2, [sp, #12]
    3a98:	4313      	orrs	r3, r2
    3a9a:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    3a9c:	4a02      	ldr	r2, [pc, #8]	; (3aa8 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    3a9e:	9b03      	ldr	r3, [sp, #12]
    3aa0:	6153      	str	r3, [r2, #20]
}
    3aa2:	bf00      	nop
    3aa4:	b004      	add	sp, #16
    3aa6:	4770      	bx	lr
    3aa8:	40064000 	.word	0x40064000

00003aac <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3aac:	b084      	sub	sp, #16
    3aae:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    3ab0:	4b09      	ldr	r3, [pc, #36]	; (3ad8 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    3ab2:	695b      	ldr	r3, [r3, #20]
    3ab4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    3ab6:	9b03      	ldr	r3, [sp, #12]
    3ab8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3abc:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    3abe:	9b01      	ldr	r3, [sp, #4]
    3ac0:	685b      	ldr	r3, [r3, #4]
    3ac2:	3b01      	subs	r3, #1
    3ac4:	011b      	lsls	r3, r3, #4
    3ac6:	9a03      	ldr	r2, [sp, #12]
    3ac8:	4313      	orrs	r3, r2
    3aca:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    3acc:	4a02      	ldr	r2, [pc, #8]	; (3ad8 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    3ace:	9b03      	ldr	r3, [sp, #12]
    3ad0:	6153      	str	r3, [r2, #20]
}
    3ad2:	bf00      	nop
    3ad4:	b004      	add	sp, #16
    3ad6:	4770      	bx	lr
    3ad8:	40064000 	.word	0x40064000

00003adc <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3adc:	b084      	sub	sp, #16
    3ade:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    3ae0:	4b09      	ldr	r3, [pc, #36]	; (3b08 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    3ae2:	695b      	ldr	r3, [r3, #20]
    3ae4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    3ae6:	9b03      	ldr	r3, [sp, #12]
    3ae8:	f023 030f 	bic.w	r3, r3, #15
    3aec:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    3aee:	9b01      	ldr	r3, [sp, #4]
    3af0:	685b      	ldr	r3, [r3, #4]
    3af2:	3b01      	subs	r3, #1
    3af4:	9a03      	ldr	r2, [sp, #12]
    3af6:	4313      	orrs	r3, r2
    3af8:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    3afa:	4a03      	ldr	r2, [pc, #12]	; (3b08 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    3afc:	9b03      	ldr	r3, [sp, #12]
    3afe:	6153      	str	r3, [r2, #20]
}
    3b00:	bf00      	nop
    3b02:	b004      	add	sp, #16
    3b04:	4770      	bx	lr
    3b06:	bf00      	nop
    3b08:	40064000 	.word	0x40064000

00003b0c <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3b0c:	b084      	sub	sp, #16
    3b0e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3b10:	4b09      	ldr	r3, [pc, #36]	; (3b38 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    3b12:	699b      	ldr	r3, [r3, #24]
    3b14:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    3b16:	9b03      	ldr	r3, [sp, #12]
    3b18:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3b1c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    3b1e:	9b01      	ldr	r3, [sp, #4]
    3b20:	685b      	ldr	r3, [r3, #4]
    3b22:	3b01      	subs	r3, #1
    3b24:	041b      	lsls	r3, r3, #16
    3b26:	9a03      	ldr	r2, [sp, #12]
    3b28:	4313      	orrs	r3, r2
    3b2a:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    3b2c:	4a02      	ldr	r2, [pc, #8]	; (3b38 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    3b2e:	9b03      	ldr	r3, [sp, #12]
    3b30:	6193      	str	r3, [r2, #24]
}
    3b32:	bf00      	nop
    3b34:	b004      	add	sp, #16
    3b36:	4770      	bx	lr
    3b38:	40064000 	.word	0x40064000

00003b3c <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3b3c:	b084      	sub	sp, #16
    3b3e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3b40:	4b09      	ldr	r3, [pc, #36]	; (3b68 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    3b42:	699b      	ldr	r3, [r3, #24]
    3b44:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    3b46:	9b03      	ldr	r3, [sp, #12]
    3b48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3b4c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    3b4e:	9b01      	ldr	r3, [sp, #4]
    3b50:	685b      	ldr	r3, [r3, #4]
    3b52:	3b01      	subs	r3, #1
    3b54:	011b      	lsls	r3, r3, #4
    3b56:	9a03      	ldr	r2, [sp, #12]
    3b58:	4313      	orrs	r3, r2
    3b5a:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    3b5c:	4a02      	ldr	r2, [pc, #8]	; (3b68 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    3b5e:	9b03      	ldr	r3, [sp, #12]
    3b60:	6193      	str	r3, [r2, #24]
}
    3b62:	bf00      	nop
    3b64:	b004      	add	sp, #16
    3b66:	4770      	bx	lr
    3b68:	40064000 	.word	0x40064000

00003b6c <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3b6c:	b084      	sub	sp, #16
    3b6e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3b70:	4b09      	ldr	r3, [pc, #36]	; (3b98 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    3b72:	699b      	ldr	r3, [r3, #24]
    3b74:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    3b76:	9b03      	ldr	r3, [sp, #12]
    3b78:	f023 030f 	bic.w	r3, r3, #15
    3b7c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    3b7e:	9b01      	ldr	r3, [sp, #4]
    3b80:	685b      	ldr	r3, [r3, #4]
    3b82:	3b01      	subs	r3, #1
    3b84:	9a03      	ldr	r2, [sp, #12]
    3b86:	4313      	orrs	r3, r2
    3b88:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    3b8a:	4a03      	ldr	r2, [pc, #12]	; (3b98 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    3b8c:	9b03      	ldr	r3, [sp, #12]
    3b8e:	6193      	str	r3, [r2, #24]
}
    3b90:	bf00      	nop
    3b92:	b004      	add	sp, #16
    3b94:	4770      	bx	lr
    3b96:	bf00      	nop
    3b98:	40064000 	.word	0x40064000

00003b9c <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3b9c:	b084      	sub	sp, #16
    3b9e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    3ba0:	4b09      	ldr	r3, [pc, #36]	; (3bc8 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    3ba2:	69db      	ldr	r3, [r3, #28]
    3ba4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    3ba6:	9b03      	ldr	r3, [sp, #12]
    3ba8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3bac:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    3bae:	9b01      	ldr	r3, [sp, #4]
    3bb0:	685b      	ldr	r3, [r3, #4]
    3bb2:	3b01      	subs	r3, #1
    3bb4:	041b      	lsls	r3, r3, #16
    3bb6:	9a03      	ldr	r2, [sp, #12]
    3bb8:	4313      	orrs	r3, r2
    3bba:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3bbc:	4a02      	ldr	r2, [pc, #8]	; (3bc8 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    3bbe:	9b03      	ldr	r3, [sp, #12]
    3bc0:	61d3      	str	r3, [r2, #28]
}
    3bc2:	bf00      	nop
    3bc4:	b004      	add	sp, #16
    3bc6:	4770      	bx	lr
    3bc8:	40064000 	.word	0x40064000

00003bcc <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3bcc:	b084      	sub	sp, #16
    3bce:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    3bd0:	4b09      	ldr	r3, [pc, #36]	; (3bf8 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    3bd2:	69db      	ldr	r3, [r3, #28]
    3bd4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    3bd6:	9b03      	ldr	r3, [sp, #12]
    3bd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3bdc:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    3bde:	9b01      	ldr	r3, [sp, #4]
    3be0:	685b      	ldr	r3, [r3, #4]
    3be2:	3b01      	subs	r3, #1
    3be4:	011b      	lsls	r3, r3, #4
    3be6:	9a03      	ldr	r2, [sp, #12]
    3be8:	4313      	orrs	r3, r2
    3bea:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3bec:	4a02      	ldr	r2, [pc, #8]	; (3bf8 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    3bee:	9b03      	ldr	r3, [sp, #12]
    3bf0:	61d3      	str	r3, [r2, #28]
}
    3bf2:	bf00      	nop
    3bf4:	b004      	add	sp, #16
    3bf6:	4770      	bx	lr
    3bf8:	40064000 	.word	0x40064000

00003bfc <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3bfc:	b084      	sub	sp, #16
    3bfe:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    3c00:	4b09      	ldr	r3, [pc, #36]	; (3c28 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    3c02:	69db      	ldr	r3, [r3, #28]
    3c04:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    3c06:	9b03      	ldr	r3, [sp, #12]
    3c08:	f023 030f 	bic.w	r3, r3, #15
    3c0c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    3c0e:	9b01      	ldr	r3, [sp, #4]
    3c10:	685b      	ldr	r3, [r3, #4]
    3c12:	3b01      	subs	r3, #1
    3c14:	9a03      	ldr	r2, [sp, #12]
    3c16:	4313      	orrs	r3, r2
    3c18:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3c1a:	4a03      	ldr	r2, [pc, #12]	; (3c28 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    3c1c:	9b03      	ldr	r3, [sp, #12]
    3c1e:	61d3      	str	r3, [r2, #28]
}
    3c20:	bf00      	nop
    3c22:	b004      	add	sp, #16
    3c24:	4770      	bx	lr
    3c26:	bf00      	nop
    3c28:	40064000 	.word	0x40064000

00003c2c <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    3c2c:	b084      	sub	sp, #16
    3c2e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    3c30:	4b0a      	ldr	r3, [pc, #40]	; (3c5c <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    3c32:	685b      	ldr	r3, [r3, #4]
    3c34:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    3c36:	9b03      	ldr	r3, [sp, #12]
    3c38:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3c3c:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    3c3e:	9b01      	ldr	r3, [sp, #4]
    3c40:	685b      	ldr	r3, [r3, #4]
    3c42:	3b01      	subs	r3, #1
    3c44:	021b      	lsls	r3, r3, #8
    3c46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    3c4a:	9a03      	ldr	r2, [sp, #12]
    3c4c:	4313      	orrs	r3, r2
    3c4e:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3c50:	4a02      	ldr	r2, [pc, #8]	; (3c5c <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    3c52:	9b03      	ldr	r3, [sp, #12]
    3c54:	6053      	str	r3, [r2, #4]
}
    3c56:	bf00      	nop
    3c58:	b004      	add	sp, #16
    3c5a:	4770      	bx	lr
    3c5c:	40048000 	.word	0x40048000

00003c60 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3c60:	b084      	sub	sp, #16
    3c62:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    3c64:	4919      	ldr	r1, [pc, #100]	; (3ccc <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    3c66:	9b01      	ldr	r3, [sp, #4]
    3c68:	681a      	ldr	r2, [r3, #0]
    3c6a:	4819      	ldr	r0, [pc, #100]	; (3cd0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    3c6c:	4613      	mov	r3, r2
    3c6e:	00db      	lsls	r3, r3, #3
    3c70:	4413      	add	r3, r2
    3c72:	4403      	add	r3, r0
    3c74:	3305      	adds	r3, #5
    3c76:	781b      	ldrb	r3, [r3, #0]
    3c78:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3c7c:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    3c7e:	9b03      	ldr	r3, [sp, #12]
    3c80:	f023 030f 	bic.w	r3, r3, #15
    3c84:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    3c86:	9b01      	ldr	r3, [sp, #4]
    3c88:	685b      	ldr	r3, [r3, #4]
    3c8a:	3b01      	subs	r3, #1
    3c8c:	f003 0307 	and.w	r3, r3, #7
    3c90:	9a03      	ldr	r2, [sp, #12]
    3c92:	4313      	orrs	r3, r2
    3c94:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    3c96:	9b01      	ldr	r3, [sp, #4]
    3c98:	7a1b      	ldrb	r3, [r3, #8]
    3c9a:	3b01      	subs	r3, #1
    3c9c:	00db      	lsls	r3, r3, #3
    3c9e:	f003 0308 	and.w	r3, r3, #8
    3ca2:	9a03      	ldr	r2, [sp, #12]
    3ca4:	4313      	orrs	r3, r2
    3ca6:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    3ca8:	4908      	ldr	r1, [pc, #32]	; (3ccc <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    3caa:	9b01      	ldr	r3, [sp, #4]
    3cac:	681a      	ldr	r2, [r3, #0]
    3cae:	4808      	ldr	r0, [pc, #32]	; (3cd0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    3cb0:	4613      	mov	r3, r2
    3cb2:	00db      	lsls	r3, r3, #3
    3cb4:	4413      	add	r3, r2
    3cb6:	4403      	add	r3, r0
    3cb8:	3305      	adds	r3, #5
    3cba:	781b      	ldrb	r3, [r3, #0]
    3cbc:	461a      	mov	r2, r3
    3cbe:	9b03      	ldr	r3, [sp, #12]
    3cc0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    3cc4:	bf00      	nop
    3cc6:	b004      	add	sp, #16
    3cc8:	4770      	bx	lr
    3cca:	bf00      	nop
    3ccc:	40065000 	.word	0x40065000
    3cd0:	00015d74 	.word	0x00015d74

00003cd4 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3cd4:	b084      	sub	sp, #16
    3cd6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3cd8:	4b10      	ldr	r3, [pc, #64]	; (3d1c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3cda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3cdc:	4a0f      	ldr	r2, [pc, #60]	; (3d1c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3cde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    3ce2:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    3ce4:	4b0d      	ldr	r3, [pc, #52]	; (3d1c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3ce6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3ce8:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    3cea:	9b03      	ldr	r3, [sp, #12]
    3cec:	f023 030f 	bic.w	r3, r3, #15
    3cf0:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    3cf2:	9b01      	ldr	r3, [sp, #4]
    3cf4:	685b      	ldr	r3, [r3, #4]
    3cf6:	3b01      	subs	r3, #1
    3cf8:	005b      	lsls	r3, r3, #1
    3cfa:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    3cfe:	9b01      	ldr	r3, [sp, #4]
    3d00:	7a1b      	ldrb	r3, [r3, #8]
    3d02:	3b01      	subs	r3, #1
    3d04:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    3d08:	4313      	orrs	r3, r2
    3d0a:	9a03      	ldr	r2, [sp, #12]
    3d0c:	4313      	orrs	r3, r2
    3d0e:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    3d10:	4a02      	ldr	r2, [pc, #8]	; (3d1c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3d12:	9b03      	ldr	r3, [sp, #12]
    3d14:	6693      	str	r3, [r2, #104]	; 0x68
}
    3d16:	bf00      	nop
    3d18:	b004      	add	sp, #16
    3d1a:	4770      	bx	lr
    3d1c:	40048000 	.word	0x40048000

00003d20 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    3d20:	b082      	sub	sp, #8
    3d22:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3d24:	bf00      	nop
    3d26:	b002      	add	sp, #8
    3d28:	4770      	bx	lr
	...

00003d2c <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    3d2c:	b082      	sub	sp, #8
    3d2e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3d30:	bf00      	nop
    3d32:	b002      	add	sp, #8
    3d34:	4770      	bx	lr

00003d36 <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    3d36:	b082      	sub	sp, #8
    3d38:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    3d3a:	bf00      	nop
    3d3c:	b002      	add	sp, #8
    3d3e:	4770      	bx	lr

00003d40 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3d40:	b500      	push	{lr}
    3d42:	b083      	sub	sp, #12
    3d44:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3d46:	9b01      	ldr	r3, [sp, #4]
    3d48:	2b00      	cmp	r3, #0
    3d4a:	d002      	beq.n	3d52 <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    3d4c:	9801      	ldr	r0, [sp, #4]
    3d4e:	f000 f86a 	bl	3e26 <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3d52:	bf00      	nop
    3d54:	b003      	add	sp, #12
    3d56:	f85d fb04 	ldr.w	pc, [sp], #4

00003d5a <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3d5a:	b500      	push	{lr}
    3d5c:	b083      	sub	sp, #12
    3d5e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3d60:	9b01      	ldr	r3, [sp, #4]
    3d62:	2b00      	cmp	r3, #0
    3d64:	d002      	beq.n	3d6c <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    3d66:	9801      	ldr	r0, [sp, #4]
    3d68:	f000 f884 	bl	3e74 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    3d6c:	bf00      	nop
    3d6e:	b003      	add	sp, #12
    3d70:	f85d fb04 	ldr.w	pc, [sp], #4

00003d74 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3d74:	b500      	push	{lr}
    3d76:	b089      	sub	sp, #36	; 0x24
    3d78:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3d7a:	2300      	movs	r3, #0
    3d7c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    3d80:	9b01      	ldr	r3, [sp, #4]
    3d82:	2b00      	cmp	r3, #0
    3d84:	d031      	beq.n	3dea <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    3d86:	4b1b      	ldr	r3, [pc, #108]	; (3df4 <Clock_Ip_CompleteSOSC+0x80>)
    3d88:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3d8c:	f003 0301 	and.w	r3, r3, #1
    3d90:	2b00      	cmp	r3, #0
    3d92:	d02a      	beq.n	3dea <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3d94:	aa03      	add	r2, sp, #12
    3d96:	a904      	add	r1, sp, #16
    3d98:	a805      	add	r0, sp, #20
    3d9a:	f24c 3350 	movw	r3, #50000	; 0xc350
    3d9e:	f7ff fd1d 	bl	37dc <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    3da2:	4b14      	ldr	r3, [pc, #80]	; (3df4 <Clock_Ip_CompleteSOSC+0x80>)
    3da4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3da8:	0e1b      	lsrs	r3, r3, #24
    3daa:	f003 0301 	and.w	r3, r3, #1
    3dae:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3db0:	9a03      	ldr	r2, [sp, #12]
    3db2:	a904      	add	r1, sp, #16
    3db4:	ab05      	add	r3, sp, #20
    3db6:	4618      	mov	r0, r3
    3db8:	f7ff fd2a 	bl	3810 <Clock_Ip_TimeoutExpired>
    3dbc:	4603      	mov	r3, r0
    3dbe:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    3dc2:	9b06      	ldr	r3, [sp, #24]
    3dc4:	2b00      	cmp	r3, #0
    3dc6:	d106      	bne.n	3dd6 <Clock_Ip_CompleteSOSC+0x62>
    3dc8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3dcc:	f083 0301 	eor.w	r3, r3, #1
    3dd0:	b2db      	uxtb	r3, r3
    3dd2:	2b00      	cmp	r3, #0
    3dd4:	d1e5      	bne.n	3da2 <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    3dd6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3dda:	2b00      	cmp	r3, #0
    3ddc:	d005      	beq.n	3dea <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3dde:	9b01      	ldr	r3, [sp, #4]
    3de0:	681b      	ldr	r3, [r3, #0]
    3de2:	4619      	mov	r1, r3
    3de4:	2001      	movs	r0, #1
    3de6:	f7ff fce9 	bl	37bc <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    3dea:	bf00      	nop
    3dec:	b009      	add	sp, #36	; 0x24
    3dee:	f85d fb04 	ldr.w	pc, [sp], #4
    3df2:	bf00      	nop
    3df4:	40064000 	.word	0x40064000

00003df8 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    3df8:	b500      	push	{lr}
    3dfa:	b083      	sub	sp, #12
    3dfc:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    3dfe:	9801      	ldr	r0, [sp, #4]
    3e00:	f000 f8c0 	bl	3f84 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3e04:	bf00      	nop
    3e06:	b003      	add	sp, #12
    3e08:	f85d fb04 	ldr.w	pc, [sp], #4

00003e0c <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3e0c:	b500      	push	{lr}
    3e0e:	b083      	sub	sp, #12
    3e10:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3e12:	9b01      	ldr	r3, [sp, #4]
    3e14:	2b00      	cmp	r3, #0
    3e16:	d002      	beq.n	3e1e <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    3e18:	9801      	ldr	r0, [sp, #4]
    3e1a:	f000 f8c3 	bl	3fa4 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3e1e:	bf00      	nop
    3e20:	b003      	add	sp, #12
    3e22:	f85d fb04 	ldr.w	pc, [sp], #4

00003e26 <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3e26:	b082      	sub	sp, #8
    3e28:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    3e2a:	4b11      	ldr	r3, [pc, #68]	; (3e70 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3e2c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3e30:	4a0f      	ldr	r2, [pc, #60]	; (3e70 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3e32:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3e36:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    3e3a:	4b0d      	ldr	r3, [pc, #52]	; (3e70 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3e3c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3e40:	4a0b      	ldr	r2, [pc, #44]	; (3e70 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3e42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    3e46:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    3e4a:	4b09      	ldr	r3, [pc, #36]	; (3e70 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3e4c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3e50:	4a07      	ldr	r2, [pc, #28]	; (3e70 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3e52:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    3e56:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    3e5a:	4b05      	ldr	r3, [pc, #20]	; (3e70 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3e5c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3e60:	4a03      	ldr	r2, [pc, #12]	; (3e70 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3e62:	f023 0301 	bic.w	r3, r3, #1
    3e66:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    3e6a:	bf00      	nop
    3e6c:	b002      	add	sp, #8
    3e6e:	4770      	bx	lr
    3e70:	40064000 	.word	0x40064000

00003e74 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3e74:	b082      	sub	sp, #8
    3e76:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    3e78:	9b01      	ldr	r3, [sp, #4]
    3e7a:	891b      	ldrh	r3, [r3, #8]
    3e7c:	2b01      	cmp	r3, #1
    3e7e:	d174      	bne.n	3f6a <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    3e80:	9b01      	ldr	r3, [sp, #4]
    3e82:	7bdb      	ldrb	r3, [r3, #15]
    3e84:	2b00      	cmp	r3, #0
    3e86:	d002      	beq.n	3e8e <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    3e88:	2b01      	cmp	r3, #1
    3e8a:	d009      	beq.n	3ea0 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    3e8c:	e011      	b.n	3eb2 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    3e8e:	4b39      	ldr	r3, [pc, #228]	; (3f74 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3e90:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3e94:	4a37      	ldr	r2, [pc, #220]	; (3f74 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3e96:	f023 0308 	bic.w	r3, r3, #8
    3e9a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    3e9e:	e008      	b.n	3eb2 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    3ea0:	4b34      	ldr	r3, [pc, #208]	; (3f74 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3ea2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3ea6:	4a33      	ldr	r2, [pc, #204]	; (3f74 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3ea8:	f043 0308 	orr.w	r3, r3, #8
    3eac:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    3eb0:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    3eb2:	4b30      	ldr	r3, [pc, #192]	; (3f74 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3eb4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3eb8:	4a2e      	ldr	r2, [pc, #184]	; (3f74 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3eba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3ebe:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    3ec2:	9b01      	ldr	r3, [sp, #4]
    3ec4:	685b      	ldr	r3, [r3, #4]
    3ec6:	4a2c      	ldr	r2, [pc, #176]	; (3f78 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    3ec8:	4293      	cmp	r3, r2
    3eca:	d90d      	bls.n	3ee8 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    3ecc:	9b01      	ldr	r3, [sp, #4]
    3ece:	685b      	ldr	r3, [r3, #4]
    3ed0:	4a2a      	ldr	r2, [pc, #168]	; (3f7c <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    3ed2:	4293      	cmp	r3, r2
    3ed4:	d208      	bcs.n	3ee8 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    3ed6:	4b27      	ldr	r3, [pc, #156]	; (3f74 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3ed8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3edc:	4a25      	ldr	r2, [pc, #148]	; (3f74 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3ede:	f043 0320 	orr.w	r3, r3, #32
    3ee2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    3ee6:	e007      	b.n	3ef8 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    3ee8:	4b22      	ldr	r3, [pc, #136]	; (3f74 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3eea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3eee:	4a21      	ldr	r2, [pc, #132]	; (3f74 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3ef0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    3ef4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    3ef8:	9b01      	ldr	r3, [sp, #4]
    3efa:	7b1b      	ldrb	r3, [r3, #12]
    3efc:	2b00      	cmp	r3, #0
    3efe:	d108      	bne.n	3f12 <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    3f00:	4b1c      	ldr	r3, [pc, #112]	; (3f74 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f02:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3f06:	4a1b      	ldr	r2, [pc, #108]	; (3f74 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f08:	f043 0304 	orr.w	r3, r3, #4
    3f0c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    3f10:	e007      	b.n	3f22 <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    3f12:	4b18      	ldr	r3, [pc, #96]	; (3f74 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f14:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3f18:	4a16      	ldr	r2, [pc, #88]	; (3f74 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f1a:	f023 0304 	bic.w	r3, r3, #4
    3f1e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    3f22:	9b01      	ldr	r3, [sp, #4]
    3f24:	7c1b      	ldrb	r3, [r3, #16]
    3f26:	2b02      	cmp	r3, #2
    3f28:	d011      	beq.n	3f4e <Clock_Ip_SetSOSC_TrustedCall+0xda>
    3f2a:	2b02      	cmp	r3, #2
    3f2c:	dc14      	bgt.n	3f58 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    3f2e:	2b00      	cmp	r3, #0
    3f30:	d002      	beq.n	3f38 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    3f32:	2b01      	cmp	r3, #1
    3f34:	d005      	beq.n	3f42 <Clock_Ip_SetSOSC_TrustedCall+0xce>
    3f36:	e00f      	b.n	3f58 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3f38:	4b0e      	ldr	r3, [pc, #56]	; (3f74 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f3a:	2201      	movs	r2, #1
    3f3c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    3f40:	e014      	b.n	3f6c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3f42:	4b0c      	ldr	r3, [pc, #48]	; (3f74 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f44:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    3f48:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    3f4c:	e00e      	b.n	3f6c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3f4e:	4b09      	ldr	r3, [pc, #36]	; (3f74 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f50:	4a0b      	ldr	r2, [pc, #44]	; (3f80 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    3f52:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    3f56:	e009      	b.n	3f6c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    3f58:	4b06      	ldr	r3, [pc, #24]	; (3f74 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f5a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3f5e:	4a05      	ldr	r2, [pc, #20]	; (3f74 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3f60:	f043 0301 	orr.w	r3, r3, #1
    3f64:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    3f68:	e000      	b.n	3f6c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    3f6a:	bf00      	nop
}
    3f6c:	bf00      	nop
    3f6e:	b002      	add	sp, #8
    3f70:	4770      	bx	lr
    3f72:	bf00      	nop
    3f74:	40064000 	.word	0x40064000
    3f78:	003d08ff 	.word	0x003d08ff
    3f7c:	007a1200 	.word	0x007a1200
    3f80:	00030001 	.word	0x00030001

00003f84 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    3f84:	b082      	sub	sp, #8
    3f86:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    3f88:	4b05      	ldr	r3, [pc, #20]	; (3fa0 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    3f8a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3f8e:	4a04      	ldr	r2, [pc, #16]	; (3fa0 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    3f90:	f023 0301 	bic.w	r3, r3, #1
    3f94:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    3f98:	bf00      	nop
    3f9a:	b002      	add	sp, #8
    3f9c:	4770      	bx	lr
    3f9e:	bf00      	nop
    3fa0:	40064000 	.word	0x40064000

00003fa4 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3fa4:	b082      	sub	sp, #8
    3fa6:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3fa8:	9b01      	ldr	r3, [sp, #4]
    3faa:	891b      	ldrh	r3, [r3, #8]
    3fac:	2b01      	cmp	r3, #1
    3fae:	d107      	bne.n	3fc0 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    3fb0:	4b05      	ldr	r3, [pc, #20]	; (3fc8 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    3fb2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3fb6:	4a04      	ldr	r2, [pc, #16]	; (3fc8 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    3fb8:	f043 0301 	orr.w	r3, r3, #1
    3fbc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    3fc0:	bf00      	nop
    3fc2:	b002      	add	sp, #8
    3fc4:	4770      	bx	lr
    3fc6:	bf00      	nop
    3fc8:	40064000 	.word	0x40064000

00003fcc <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    3fcc:	b082      	sub	sp, #8
    3fce:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3fd0:	bf00      	nop
    3fd2:	b002      	add	sp, #8
    3fd4:	4770      	bx	lr

00003fd6 <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    3fd6:	b082      	sub	sp, #8
    3fd8:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    3fda:	2300      	movs	r3, #0
}
    3fdc:	4618      	mov	r0, r3
    3fde:	b002      	add	sp, #8
    3fe0:	4770      	bx	lr

00003fe2 <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    3fe2:	b082      	sub	sp, #8
    3fe4:	9001      	str	r0, [sp, #4]
    3fe6:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    3fe8:	bf00      	nop
    3fea:	b002      	add	sp, #8
    3fec:	4770      	bx	lr
	...

00003ff0 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    3ff0:	b082      	sub	sp, #8
    3ff2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3ff4:	bf00      	nop
    3ff6:	b002      	add	sp, #8
    3ff8:	4770      	bx	lr

00003ffa <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    3ffa:	b082      	sub	sp, #8
    3ffc:	9001      	str	r0, [sp, #4]
    3ffe:	460b      	mov	r3, r1
    4000:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    4004:	bf00      	nop
    4006:	b002      	add	sp, #8
    4008:	4770      	bx	lr

0000400a <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    400a:	b500      	push	{lr}
    400c:	b083      	sub	sp, #12
    400e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4010:	9b01      	ldr	r3, [sp, #4]
    4012:	2b00      	cmp	r3, #0
    4014:	d002      	beq.n	401c <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    4016:	9801      	ldr	r0, [sp, #4]
    4018:	f000 f8e7 	bl	41ea <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    401c:	bf00      	nop
    401e:	b003      	add	sp, #12
    4020:	f85d fb04 	ldr.w	pc, [sp], #4

00004024 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    4024:	b500      	push	{lr}
    4026:	b085      	sub	sp, #20
    4028:	9001      	str	r0, [sp, #4]
    402a:	460b      	mov	r3, r1
    402c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    4030:	9b01      	ldr	r3, [sp, #4]
    4032:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    4034:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4038:	2b00      	cmp	r3, #0
    403a:	d003      	beq.n	4044 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    403c:	2300      	movs	r3, #0
    403e:	f8ad 300c 	strh.w	r3, [sp, #12]
    4042:	e002      	b.n	404a <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    4044:	2301      	movs	r3, #1
    4046:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    404a:	ab02      	add	r3, sp, #8
    404c:	4618      	mov	r0, r3
    404e:	f7ff ffdc 	bl	400a <Clock_Ip_ClockSetSimLPO1KEnable>
}
    4052:	bf00      	nop
    4054:	b005      	add	sp, #20
    4056:	f85d fb04 	ldr.w	pc, [sp], #4

0000405a <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    405a:	b500      	push	{lr}
    405c:	b083      	sub	sp, #12
    405e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4060:	9b01      	ldr	r3, [sp, #4]
    4062:	2b00      	cmp	r3, #0
    4064:	d002      	beq.n	406c <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    4066:	9801      	ldr	r0, [sp, #4]
    4068:	f000 f8d6 	bl	4218 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    406c:	bf00      	nop
    406e:	b003      	add	sp, #12
    4070:	f85d fb04 	ldr.w	pc, [sp], #4

00004074 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    4074:	b500      	push	{lr}
    4076:	b085      	sub	sp, #20
    4078:	9001      	str	r0, [sp, #4]
    407a:	460b      	mov	r3, r1
    407c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    4080:	9b01      	ldr	r3, [sp, #4]
    4082:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    4084:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4088:	2b00      	cmp	r3, #0
    408a:	d003      	beq.n	4094 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    408c:	2300      	movs	r3, #0
    408e:	f8ad 300c 	strh.w	r3, [sp, #12]
    4092:	e002      	b.n	409a <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    4094:	2301      	movs	r3, #1
    4096:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    409a:	ab02      	add	r3, sp, #8
    409c:	4618      	mov	r0, r3
    409e:	f7ff ffdc 	bl	405a <Clock_Ip_ClockSetSimLPO32KEnable>
}
    40a2:	bf00      	nop
    40a4:	b005      	add	sp, #20
    40a6:	f85d fb04 	ldr.w	pc, [sp], #4

000040aa <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    40aa:	b500      	push	{lr}
    40ac:	b083      	sub	sp, #12
    40ae:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    40b0:	9b01      	ldr	r3, [sp, #4]
    40b2:	2b00      	cmp	r3, #0
    40b4:	d002      	beq.n	40bc <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    40b6:	9801      	ldr	r0, [sp, #4]
    40b8:	f000 f8c6 	bl	4248 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    40bc:	bf00      	nop
    40be:	b003      	add	sp, #12
    40c0:	f85d fb04 	ldr.w	pc, [sp], #4

000040c4 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    40c4:	b500      	push	{lr}
    40c6:	b085      	sub	sp, #20
    40c8:	9001      	str	r0, [sp, #4]
    40ca:	460b      	mov	r3, r1
    40cc:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    40d0:	9b01      	ldr	r3, [sp, #4]
    40d2:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    40d4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    40d8:	2b00      	cmp	r3, #0
    40da:	d003      	beq.n	40e4 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    40dc:	2300      	movs	r3, #0
    40de:	f8ad 300c 	strh.w	r3, [sp, #12]
    40e2:	e002      	b.n	40ea <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    40e4:	2301      	movs	r3, #1
    40e6:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    40ea:	ab02      	add	r3, sp, #8
    40ec:	4618      	mov	r0, r3
    40ee:	f7ff ffdc 	bl	40aa <Clock_Ip_ClockSetSimClkoutEnable>
}
    40f2:	bf00      	nop
    40f4:	b005      	add	sp, #20
    40f6:	f85d fb04 	ldr.w	pc, [sp], #4

000040fa <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    40fa:	b500      	push	{lr}
    40fc:	b083      	sub	sp, #12
    40fe:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4100:	9b01      	ldr	r3, [sp, #4]
    4102:	2b00      	cmp	r3, #0
    4104:	d002      	beq.n	410c <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    4106:	9801      	ldr	r0, [sp, #4]
    4108:	f000 f8b6 	bl	4278 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    410c:	bf00      	nop
    410e:	b003      	add	sp, #12
    4110:	f85d fb04 	ldr.w	pc, [sp], #4

00004114 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    4114:	b500      	push	{lr}
    4116:	b085      	sub	sp, #20
    4118:	9001      	str	r0, [sp, #4]
    411a:	460b      	mov	r3, r1
    411c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    4120:	9b01      	ldr	r3, [sp, #4]
    4122:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    4124:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4128:	2b00      	cmp	r3, #0
    412a:	d003      	beq.n	4134 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    412c:	2300      	movs	r3, #0
    412e:	f8ad 300c 	strh.w	r3, [sp, #12]
    4132:	e002      	b.n	413a <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    4134:	2301      	movs	r3, #1
    4136:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    413a:	ab02      	add	r3, sp, #8
    413c:	4618      	mov	r0, r3
    413e:	f7ff ffdc 	bl	40fa <Clock_Ip_ClockSetPccCgcEnable>
}
    4142:	bf00      	nop
    4144:	b005      	add	sp, #20
    4146:	f85d fb04 	ldr.w	pc, [sp], #4

0000414a <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    414a:	b500      	push	{lr}
    414c:	b083      	sub	sp, #12
    414e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4150:	9b01      	ldr	r3, [sp, #4]
    4152:	2b00      	cmp	r3, #0
    4154:	d002      	beq.n	415c <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    4156:	9801      	ldr	r0, [sp, #4]
    4158:	f000 f8bc 	bl	42d4 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    415c:	bf00      	nop
    415e:	b003      	add	sp, #12
    4160:	f85d fb04 	ldr.w	pc, [sp], #4

00004164 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    4164:	b500      	push	{lr}
    4166:	b085      	sub	sp, #20
    4168:	9001      	str	r0, [sp, #4]
    416a:	460b      	mov	r3, r1
    416c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    4170:	9b01      	ldr	r3, [sp, #4]
    4172:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    4174:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4178:	2b00      	cmp	r3, #0
    417a:	d003      	beq.n	4184 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    417c:	2300      	movs	r3, #0
    417e:	f8ad 300c 	strh.w	r3, [sp, #12]
    4182:	e002      	b.n	418a <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    4184:	2301      	movs	r3, #1
    4186:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    418a:	ab02      	add	r3, sp, #8
    418c:	4618      	mov	r0, r3
    418e:	f7ff ffdc 	bl	414a <Clock_Ip_ClockSetSimGate>
}
    4192:	bf00      	nop
    4194:	b005      	add	sp, #20
    4196:	f85d fb04 	ldr.w	pc, [sp], #4

0000419a <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    419a:	b500      	push	{lr}
    419c:	b083      	sub	sp, #12
    419e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41a0:	9b01      	ldr	r3, [sp, #4]
    41a2:	2b00      	cmp	r3, #0
    41a4:	d002      	beq.n	41ac <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    41a6:	9801      	ldr	r0, [sp, #4]
    41a8:	f000 f8c0 	bl	432c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41ac:	bf00      	nop
    41ae:	b003      	add	sp, #12
    41b0:	f85d fb04 	ldr.w	pc, [sp], #4

000041b4 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    41b4:	b500      	push	{lr}
    41b6:	b085      	sub	sp, #20
    41b8:	9001      	str	r0, [sp, #4]
    41ba:	460b      	mov	r3, r1
    41bc:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    41c0:	9b01      	ldr	r3, [sp, #4]
    41c2:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    41c4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    41c8:	2b00      	cmp	r3, #0
    41ca:	d003      	beq.n	41d4 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    41cc:	2300      	movs	r3, #0
    41ce:	f8ad 300c 	strh.w	r3, [sp, #12]
    41d2:	e002      	b.n	41da <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    41d4:	2301      	movs	r3, #1
    41d6:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    41da:	ab02      	add	r3, sp, #8
    41dc:	4618      	mov	r0, r3
    41de:	f7ff ffdc 	bl	419a <Clock_Ip_ClockSetSimTraceEnable>
}
    41e2:	bf00      	nop
    41e4:	b005      	add	sp, #20
    41e6:	f85d fb04 	ldr.w	pc, [sp], #4

000041ea <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    41ea:	b084      	sub	sp, #16
    41ec:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    41ee:	4b09      	ldr	r3, [pc, #36]	; (4214 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    41f0:	691b      	ldr	r3, [r3, #16]
    41f2:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    41f4:	9b03      	ldr	r3, [sp, #12]
    41f6:	f023 0301 	bic.w	r3, r3, #1
    41fa:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    41fc:	9b01      	ldr	r3, [sp, #4]
    41fe:	889b      	ldrh	r3, [r3, #4]
    4200:	461a      	mov	r2, r3
    4202:	9b03      	ldr	r3, [sp, #12]
    4204:	4313      	orrs	r3, r2
    4206:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    4208:	4a02      	ldr	r2, [pc, #8]	; (4214 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    420a:	9b03      	ldr	r3, [sp, #12]
    420c:	6113      	str	r3, [r2, #16]
}
    420e:	bf00      	nop
    4210:	b004      	add	sp, #16
    4212:	4770      	bx	lr
    4214:	40048000 	.word	0x40048000

00004218 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    4218:	b084      	sub	sp, #16
    421a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    421c:	4b09      	ldr	r3, [pc, #36]	; (4244 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    421e:	691b      	ldr	r3, [r3, #16]
    4220:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    4222:	9b03      	ldr	r3, [sp, #12]
    4224:	f023 0302 	bic.w	r3, r3, #2
    4228:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    422a:	9b01      	ldr	r3, [sp, #4]
    422c:	889b      	ldrh	r3, [r3, #4]
    422e:	005b      	lsls	r3, r3, #1
    4230:	9a03      	ldr	r2, [sp, #12]
    4232:	4313      	orrs	r3, r2
    4234:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    4236:	4a03      	ldr	r2, [pc, #12]	; (4244 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    4238:	9b03      	ldr	r3, [sp, #12]
    423a:	6113      	str	r3, [r2, #16]
}
    423c:	bf00      	nop
    423e:	b004      	add	sp, #16
    4240:	4770      	bx	lr
    4242:	bf00      	nop
    4244:	40048000 	.word	0x40048000

00004248 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    4248:	b084      	sub	sp, #16
    424a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    424c:	4b09      	ldr	r3, [pc, #36]	; (4274 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    424e:	685b      	ldr	r3, [r3, #4]
    4250:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    4252:	9b03      	ldr	r3, [sp, #12]
    4254:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    4258:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    425a:	9b01      	ldr	r3, [sp, #4]
    425c:	889b      	ldrh	r3, [r3, #4]
    425e:	02db      	lsls	r3, r3, #11
    4260:	9a03      	ldr	r2, [sp, #12]
    4262:	4313      	orrs	r3, r2
    4264:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    4266:	4a03      	ldr	r2, [pc, #12]	; (4274 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    4268:	9b03      	ldr	r3, [sp, #12]
    426a:	6053      	str	r3, [r2, #4]
}
    426c:	bf00      	nop
    426e:	b004      	add	sp, #16
    4270:	4770      	bx	lr
    4272:	bf00      	nop
    4274:	40048000 	.word	0x40048000

00004278 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    4278:	b084      	sub	sp, #16
    427a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    427c:	4913      	ldr	r1, [pc, #76]	; (42cc <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    427e:	9b01      	ldr	r3, [sp, #4]
    4280:	681a      	ldr	r2, [r3, #0]
    4282:	4813      	ldr	r0, [pc, #76]	; (42d0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    4284:	4613      	mov	r3, r2
    4286:	00db      	lsls	r3, r3, #3
    4288:	4413      	add	r3, r2
    428a:	4403      	add	r3, r0
    428c:	3306      	adds	r3, #6
    428e:	781b      	ldrb	r3, [r3, #0]
    4290:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    4294:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    4296:	9b03      	ldr	r3, [sp, #12]
    4298:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    429c:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    429e:	9b01      	ldr	r3, [sp, #4]
    42a0:	889b      	ldrh	r3, [r3, #4]
    42a2:	079b      	lsls	r3, r3, #30
    42a4:	9a03      	ldr	r2, [sp, #12]
    42a6:	4313      	orrs	r3, r2
    42a8:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    42aa:	4908      	ldr	r1, [pc, #32]	; (42cc <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    42ac:	9b01      	ldr	r3, [sp, #4]
    42ae:	681a      	ldr	r2, [r3, #0]
    42b0:	4807      	ldr	r0, [pc, #28]	; (42d0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    42b2:	4613      	mov	r3, r2
    42b4:	00db      	lsls	r3, r3, #3
    42b6:	4413      	add	r3, r2
    42b8:	4403      	add	r3, r0
    42ba:	3306      	adds	r3, #6
    42bc:	781b      	ldrb	r3, [r3, #0]
    42be:	461a      	mov	r2, r3
    42c0:	9b03      	ldr	r3, [sp, #12]
    42c2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    42c6:	bf00      	nop
    42c8:	b004      	add	sp, #16
    42ca:	4770      	bx	lr
    42cc:	40065000 	.word	0x40065000
    42d0:	00015d74 	.word	0x00015d74

000042d4 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    42d4:	b086      	sub	sp, #24
    42d6:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    42d8:	9b01      	ldr	r3, [sp, #4]
    42da:	889b      	ldrh	r3, [r3, #4]
    42dc:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    42de:	9b01      	ldr	r3, [sp, #4]
    42e0:	681a      	ldr	r2, [r3, #0]
    42e2:	4910      	ldr	r1, [pc, #64]	; (4324 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    42e4:	4613      	mov	r3, r2
    42e6:	00db      	lsls	r3, r3, #3
    42e8:	4413      	add	r3, r2
    42ea:	440b      	add	r3, r1
    42ec:	3306      	adds	r3, #6
    42ee:	781b      	ldrb	r3, [r3, #0]
    42f0:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    42f2:	4b0d      	ldr	r3, [pc, #52]	; (4328 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    42f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    42f6:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    42f8:	2201      	movs	r2, #1
    42fa:	9b04      	ldr	r3, [sp, #16]
    42fc:	fa02 f303 	lsl.w	r3, r2, r3
    4300:	43db      	mvns	r3, r3
    4302:	9a03      	ldr	r2, [sp, #12]
    4304:	4013      	ands	r3, r2
    4306:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    4308:	9a05      	ldr	r2, [sp, #20]
    430a:	9b04      	ldr	r3, [sp, #16]
    430c:	fa02 f303 	lsl.w	r3, r2, r3
    4310:	9a03      	ldr	r2, [sp, #12]
    4312:	4313      	orrs	r3, r2
    4314:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    4316:	4a04      	ldr	r2, [pc, #16]	; (4328 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    4318:	9b03      	ldr	r3, [sp, #12]
    431a:	6413      	str	r3, [r2, #64]	; 0x40
}
    431c:	bf00      	nop
    431e:	b006      	add	sp, #24
    4320:	4770      	bx	lr
    4322:	bf00      	nop
    4324:	00015d74 	.word	0x00015d74
    4328:	40048000 	.word	0x40048000

0000432c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    432c:	b084      	sub	sp, #16
    432e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    4330:	4b0a      	ldr	r3, [pc, #40]	; (435c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    4332:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    4334:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    4336:	9b01      	ldr	r3, [sp, #4]
    4338:	889b      	ldrh	r3, [r3, #4]
    433a:	2b01      	cmp	r3, #1
    433c:	d104      	bne.n	4348 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    433e:	9b03      	ldr	r3, [sp, #12]
    4340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4344:	9303      	str	r3, [sp, #12]
    4346:	e003      	b.n	4350 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    4348:	9b03      	ldr	r3, [sp, #12]
    434a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    434e:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    4350:	4a02      	ldr	r2, [pc, #8]	; (435c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    4352:	9b03      	ldr	r3, [sp, #12]
    4354:	6693      	str	r3, [r2, #104]	; 0x68
}
    4356:	bf00      	nop
    4358:	b004      	add	sp, #16
    435a:	4770      	bx	lr
    435c:	40048000 	.word	0x40048000

00004360 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    4360:	b082      	sub	sp, #8
    4362:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4364:	bf00      	nop
    4366:	b002      	add	sp, #8
    4368:	4770      	bx	lr

0000436a <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    436a:	b082      	sub	sp, #8
    436c:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    436e:	bf00      	nop
    4370:	b002      	add	sp, #8
    4372:	4770      	bx	lr

00004374 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    4374:	b500      	push	{lr}
    4376:	b083      	sub	sp, #12
    4378:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    437a:	9b01      	ldr	r3, [sp, #4]
    437c:	2b00      	cmp	r3, #0
    437e:	d002      	beq.n	4386 <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    4380:	9801      	ldr	r0, [sp, #4]
    4382:	f000 f8d1 	bl	4528 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4386:	bf00      	nop
    4388:	b003      	add	sp, #12
    438a:	f85d fb04 	ldr.w	pc, [sp], #4

0000438e <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    438e:	b500      	push	{lr}
    4390:	b083      	sub	sp, #12
    4392:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4394:	9b01      	ldr	r3, [sp, #4]
    4396:	2b00      	cmp	r3, #0
    4398:	d002      	beq.n	43a0 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    439a:	9801      	ldr	r0, [sp, #4]
    439c:	f000 f950 	bl	4640 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    43a0:	bf00      	nop
    43a2:	b003      	add	sp, #12
    43a4:	f85d fb04 	ldr.w	pc, [sp], #4

000043a8 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    43a8:	b500      	push	{lr}
    43aa:	b083      	sub	sp, #12
    43ac:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    43ae:	9801      	ldr	r0, [sp, #4]
    43b0:	f000 f98e 	bl	46d0 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    43b4:	bf00      	nop
    43b6:	b003      	add	sp, #12
    43b8:	f85d fb04 	ldr.w	pc, [sp], #4

000043bc <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    43bc:	b500      	push	{lr}
    43be:	b083      	sub	sp, #12
    43c0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    43c2:	9b01      	ldr	r3, [sp, #4]
    43c4:	2b00      	cmp	r3, #0
    43c6:	d002      	beq.n	43ce <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    43c8:	9801      	ldr	r0, [sp, #4]
    43ca:	f000 f999 	bl	4700 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    43ce:	bf00      	nop
    43d0:	b003      	add	sp, #12
    43d2:	f85d fb04 	ldr.w	pc, [sp], #4

000043d6 <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    43d6:	b500      	push	{lr}
    43d8:	b083      	sub	sp, #12
    43da:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    43dc:	9b01      	ldr	r3, [sp, #4]
    43de:	2b00      	cmp	r3, #0
    43e0:	d002      	beq.n	43e8 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    43e2:	9801      	ldr	r0, [sp, #4]
    43e4:	f000 f9b0 	bl	4748 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    43e8:	bf00      	nop
    43ea:	b003      	add	sp, #12
    43ec:	f85d fb04 	ldr.w	pc, [sp], #4

000043f0 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    43f0:	b500      	push	{lr}
    43f2:	b083      	sub	sp, #12
    43f4:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    43f6:	9801      	ldr	r0, [sp, #4]
    43f8:	f000 f9ba 	bl	4770 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    43fc:	bf00      	nop
    43fe:	b003      	add	sp, #12
    4400:	f85d fb04 	ldr.w	pc, [sp], #4

00004404 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    4404:	b500      	push	{lr}
    4406:	b083      	sub	sp, #12
    4408:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    440a:	9b01      	ldr	r3, [sp, #4]
    440c:	2b00      	cmp	r3, #0
    440e:	d002      	beq.n	4416 <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    4410:	9801      	ldr	r0, [sp, #4]
    4412:	f000 f9bd 	bl	4790 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4416:	bf00      	nop
    4418:	b003      	add	sp, #12
    441a:	f85d fb04 	ldr.w	pc, [sp], #4

0000441e <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    441e:	b500      	push	{lr}
    4420:	b083      	sub	sp, #12
    4422:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4424:	9b01      	ldr	r3, [sp, #4]
    4426:	2b00      	cmp	r3, #0
    4428:	d002      	beq.n	4430 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    442a:	9801      	ldr	r0, [sp, #4]
    442c:	f000 f9d4 	bl	47d8 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4430:	bf00      	nop
    4432:	b003      	add	sp, #12
    4434:	f85d fb04 	ldr.w	pc, [sp], #4

00004438 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    4438:	b500      	push	{lr}
    443a:	b083      	sub	sp, #12
    443c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    443e:	9801      	ldr	r0, [sp, #4]
    4440:	f000 f9de 	bl	4800 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    4444:	bf00      	nop
    4446:	b003      	add	sp, #12
    4448:	f85d fb04 	ldr.w	pc, [sp], #4

0000444c <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    444c:	b500      	push	{lr}
    444e:	b089      	sub	sp, #36	; 0x24
    4450:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    4452:	2300      	movs	r3, #0
    4454:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    4458:	4b20      	ldr	r3, [pc, #128]	; (44dc <SetInputSouceSytemClock+0x90>)
    445a:	695b      	ldr	r3, [r3, #20]
    445c:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    445e:	9b06      	ldr	r3, [sp, #24]
    4460:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4464:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    4466:	9b01      	ldr	r3, [sp, #4]
    4468:	061b      	lsls	r3, r3, #24
    446a:	9a06      	ldr	r2, [sp, #24]
    446c:	4313      	orrs	r3, r2
    446e:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    4470:	4a1a      	ldr	r2, [pc, #104]	; (44dc <SetInputSouceSytemClock+0x90>)
    4472:	9b06      	ldr	r3, [sp, #24]
    4474:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4476:	aa02      	add	r2, sp, #8
    4478:	a903      	add	r1, sp, #12
    447a:	a804      	add	r0, sp, #16
    447c:	f24c 3350 	movw	r3, #50000	; 0xc350
    4480:	f7ff f9ac 	bl	37dc <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    4484:	4b15      	ldr	r3, [pc, #84]	; (44dc <SetInputSouceSytemClock+0x90>)
    4486:	691b      	ldr	r3, [r3, #16]
    4488:	0e1b      	lsrs	r3, r3, #24
    448a:	f003 030f 	and.w	r3, r3, #15
    448e:	9a01      	ldr	r2, [sp, #4]
    4490:	429a      	cmp	r2, r3
    4492:	bf0c      	ite	eq
    4494:	2301      	moveq	r3, #1
    4496:	2300      	movne	r3, #0
    4498:	b2db      	uxtb	r3, r3
    449a:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    449c:	9a02      	ldr	r2, [sp, #8]
    449e:	a903      	add	r1, sp, #12
    44a0:	ab04      	add	r3, sp, #16
    44a2:	4618      	mov	r0, r3
    44a4:	f7ff f9b4 	bl	3810 <Clock_Ip_TimeoutExpired>
    44a8:	4603      	mov	r3, r0
    44aa:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    44ae:	9b05      	ldr	r3, [sp, #20]
    44b0:	2b00      	cmp	r3, #0
    44b2:	d106      	bne.n	44c2 <SetInputSouceSytemClock+0x76>
    44b4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    44b8:	f083 0301 	eor.w	r3, r3, #1
    44bc:	b2db      	uxtb	r3, r3
    44be:	2b00      	cmp	r3, #0
    44c0:	d1e0      	bne.n	4484 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    44c2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    44c6:	2b00      	cmp	r3, #0
    44c8:	d003      	beq.n	44d2 <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    44ca:	2105      	movs	r1, #5
    44cc:	2001      	movs	r0, #1
    44ce:	f7ff f975 	bl	37bc <Clock_Ip_ReportClockErrors>
    }
}
    44d2:	bf00      	nop
    44d4:	b009      	add	sp, #36	; 0x24
    44d6:	f85d fb04 	ldr.w	pc, [sp], #4
    44da:	bf00      	nop
    44dc:	40064000 	.word	0x40064000

000044e0 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    44e0:	b500      	push	{lr}
    44e2:	b083      	sub	sp, #12
    44e4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    44e6:	9b01      	ldr	r3, [sp, #4]
    44e8:	2b00      	cmp	r3, #0
    44ea:	d002      	beq.n	44f2 <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    44ec:	9801      	ldr	r0, [sp, #4]
    44ee:	f000 f997 	bl	4820 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    44f2:	bf00      	nop
    44f4:	b003      	add	sp, #12
    44f6:	f85d fb04 	ldr.w	pc, [sp], #4

000044fa <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    44fa:	b500      	push	{lr}
    44fc:	b083      	sub	sp, #12
    44fe:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4500:	9b01      	ldr	r3, [sp, #4]
    4502:	2b00      	cmp	r3, #0
    4504:	d002      	beq.n	450c <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    4506:	9801      	ldr	r0, [sp, #4]
    4508:	f000 fa7e 	bl	4a08 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    450c:	bf00      	nop
    450e:	b003      	add	sp, #12
    4510:	f85d fb04 	ldr.w	pc, [sp], #4

00004514 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    4514:	b500      	push	{lr}
    4516:	b083      	sub	sp, #12
    4518:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    451a:	9801      	ldr	r0, [sp, #4]
    451c:	f000 fab8 	bl	4a90 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    4520:	bf00      	nop
    4522:	b003      	add	sp, #12
    4524:	f85d fb04 	ldr.w	pc, [sp], #4

00004528 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4528:	b500      	push	{lr}
    452a:	b08b      	sub	sp, #44	; 0x2c
    452c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    452e:	2300      	movs	r3, #0
    4530:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    4534:	9b01      	ldr	r3, [sp, #4]
    4536:	2b00      	cmp	r3, #0
    4538:	d10b      	bne.n	4552 <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    453a:	2305      	movs	r3, #5
    453c:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    453e:	2301      	movs	r3, #1
    4540:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    4544:	2301      	movs	r3, #1
    4546:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    454a:	2301      	movs	r3, #1
    454c:	f88d 3010 	strb.w	r3, [sp, #16]
    4550:	e00e      	b.n	4570 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    4552:	9b01      	ldr	r3, [sp, #4]
    4554:	681b      	ldr	r3, [r3, #0]
    4556:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    4558:	9b01      	ldr	r3, [sp, #4]
    455a:	79db      	ldrb	r3, [r3, #7]
    455c:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    4560:	9b01      	ldr	r3, [sp, #4]
    4562:	889b      	ldrh	r3, [r3, #4]
    4564:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    4568:	9b01      	ldr	r3, [sp, #4]
    456a:	7a1b      	ldrb	r3, [r3, #8]
    456c:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    4570:	4b32      	ldr	r3, [pc, #200]	; (463c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4572:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4576:	4a31      	ldr	r2, [pc, #196]	; (463c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4578:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    457c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    4580:	4b2e      	ldr	r3, [pc, #184]	; (463c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4582:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4586:	4a2d      	ldr	r2, [pc, #180]	; (463c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4588:	f023 0301 	bic.w	r3, r3, #1
    458c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    4590:	4b2a      	ldr	r3, [pc, #168]	; (463c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4592:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4596:	4a29      	ldr	r2, [pc, #164]	; (463c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4598:	f023 0304 	bic.w	r3, r3, #4
    459c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    45a0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    45a4:	2b01      	cmp	r3, #1
    45a6:	d144      	bne.n	4632 <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    45a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    45ac:	4a23      	ldr	r2, [pc, #140]	; (463c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    45ae:	f003 0301 	and.w	r3, r3, #1
    45b2:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    45b6:	4b21      	ldr	r3, [pc, #132]	; (463c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    45b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    45bc:	4a1f      	ldr	r2, [pc, #124]	; (463c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    45be:	f043 0301 	orr.w	r3, r3, #1
    45c2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    45c6:	4b1d      	ldr	r3, [pc, #116]	; (463c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    45c8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    45cc:	f89d 3010 	ldrb.w	r3, [sp, #16]
    45d0:	009b      	lsls	r3, r3, #2
    45d2:	f003 0304 	and.w	r3, r3, #4
    45d6:	4919      	ldr	r1, [pc, #100]	; (463c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    45d8:	4313      	orrs	r3, r2
    45da:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    45de:	aa05      	add	r2, sp, #20
    45e0:	a906      	add	r1, sp, #24
    45e2:	a807      	add	r0, sp, #28
    45e4:	f24c 3350 	movw	r3, #50000	; 0xc350
    45e8:	f7ff f8f8 	bl	37dc <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    45ec:	4b13      	ldr	r3, [pc, #76]	; (463c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    45ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    45f2:	0e1b      	lsrs	r3, r3, #24
    45f4:	f003 0301 	and.w	r3, r3, #1
    45f8:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    45fa:	9a05      	ldr	r2, [sp, #20]
    45fc:	a906      	add	r1, sp, #24
    45fe:	ab07      	add	r3, sp, #28
    4600:	4618      	mov	r0, r3
    4602:	f7ff f905 	bl	3810 <Clock_Ip_TimeoutExpired>
    4606:	4603      	mov	r3, r0
    4608:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    460c:	9b08      	ldr	r3, [sp, #32]
    460e:	2b00      	cmp	r3, #0
    4610:	d106      	bne.n	4620 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    4612:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    4616:	f083 0301 	eor.w	r3, r3, #1
    461a:	b2db      	uxtb	r3, r3
    461c:	2b00      	cmp	r3, #0
    461e:	d1e5      	bne.n	45ec <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    4620:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    4624:	2b00      	cmp	r3, #0
    4626:	d004      	beq.n	4632 <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    4628:	9b02      	ldr	r3, [sp, #8]
    462a:	4619      	mov	r1, r3
    462c:	2001      	movs	r0, #1
    462e:	f7ff f8c5 	bl	37bc <Clock_Ip_ReportClockErrors>
        }
    }
}
    4632:	bf00      	nop
    4634:	b00b      	add	sp, #44	; 0x2c
    4636:	f85d fb04 	ldr.w	pc, [sp], #4
    463a:	bf00      	nop
    463c:	40064000 	.word	0x40064000

00004640 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4640:	b500      	push	{lr}
    4642:	b089      	sub	sp, #36	; 0x24
    4644:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4646:	2300      	movs	r3, #0
    4648:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    464c:	4b1f      	ldr	r3, [pc, #124]	; (46cc <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    464e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4652:	4a1e      	ldr	r2, [pc, #120]	; (46cc <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    4654:	f043 0301 	orr.w	r3, r3, #1
    4658:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    465c:	4b1b      	ldr	r3, [pc, #108]	; (46cc <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    465e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4662:	4a1a      	ldr	r2, [pc, #104]	; (46cc <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    4664:	f043 0304 	orr.w	r3, r3, #4
    4668:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    466c:	aa03      	add	r2, sp, #12
    466e:	a904      	add	r1, sp, #16
    4670:	a805      	add	r0, sp, #20
    4672:	f24c 3350 	movw	r3, #50000	; 0xc350
    4676:	f7ff f8b1 	bl	37dc <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    467a:	4b14      	ldr	r3, [pc, #80]	; (46cc <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    467c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4680:	0e1b      	lsrs	r3, r3, #24
    4682:	f003 0301 	and.w	r3, r3, #1
    4686:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4688:	9a03      	ldr	r2, [sp, #12]
    468a:	a904      	add	r1, sp, #16
    468c:	ab05      	add	r3, sp, #20
    468e:	4618      	mov	r0, r3
    4690:	f7ff f8be 	bl	3810 <Clock_Ip_TimeoutExpired>
    4694:	4603      	mov	r3, r0
    4696:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    469a:	9b06      	ldr	r3, [sp, #24]
    469c:	2b00      	cmp	r3, #0
    469e:	d106      	bne.n	46ae <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    46a0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    46a4:	f083 0301 	eor.w	r3, r3, #1
    46a8:	b2db      	uxtb	r3, r3
    46aa:	2b00      	cmp	r3, #0
    46ac:	d1e5      	bne.n	467a <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    46ae:	f89d 301f 	ldrb.w	r3, [sp, #31]
    46b2:	2b00      	cmp	r3, #0
    46b4:	d005      	beq.n	46c2 <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    46b6:	9b01      	ldr	r3, [sp, #4]
    46b8:	681b      	ldr	r3, [r3, #0]
    46ba:	4619      	mov	r1, r3
    46bc:	2001      	movs	r0, #1
    46be:	f7ff f87d 	bl	37bc <Clock_Ip_ReportClockErrors>
    }
}
    46c2:	bf00      	nop
    46c4:	b009      	add	sp, #36	; 0x24
    46c6:	f85d fb04 	ldr.w	pc, [sp], #4
    46ca:	bf00      	nop
    46cc:	40064000 	.word	0x40064000

000046d0 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    46d0:	b082      	sub	sp, #8
    46d2:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    46d4:	4b09      	ldr	r3, [pc, #36]	; (46fc <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    46d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    46da:	4a08      	ldr	r2, [pc, #32]	; (46fc <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    46dc:	f023 0301 	bic.w	r3, r3, #1
    46e0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    46e4:	4b05      	ldr	r3, [pc, #20]	; (46fc <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    46e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    46ea:	4a04      	ldr	r2, [pc, #16]	; (46fc <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    46ec:	f023 0304 	bic.w	r3, r3, #4
    46f0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    46f4:	bf00      	nop
    46f6:	b002      	add	sp, #8
    46f8:	4770      	bx	lr
    46fa:	bf00      	nop
    46fc:	40064000 	.word	0x40064000

00004700 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4700:	b082      	sub	sp, #8
    4702:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    4704:	4b0f      	ldr	r3, [pc, #60]	; (4744 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4706:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    470a:	4a0e      	ldr	r2, [pc, #56]	; (4744 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    470c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4710:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    4714:	4b0b      	ldr	r3, [pc, #44]	; (4744 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4716:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    471a:	4a0a      	ldr	r2, [pc, #40]	; (4744 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    471c:	f023 0304 	bic.w	r3, r3, #4
    4720:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    4724:	4b07      	ldr	r3, [pc, #28]	; (4744 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4726:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    472a:	9b01      	ldr	r3, [sp, #4]
    472c:	7a1b      	ldrb	r3, [r3, #8]
    472e:	009b      	lsls	r3, r3, #2
    4730:	f003 0304 	and.w	r3, r3, #4
    4734:	4903      	ldr	r1, [pc, #12]	; (4744 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4736:	4313      	orrs	r3, r2
    4738:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    473c:	bf00      	nop
    473e:	b002      	add	sp, #8
    4740:	4770      	bx	lr
    4742:	bf00      	nop
    4744:	40064000 	.word	0x40064000

00004748 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4748:	b082      	sub	sp, #8
    474a:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    474c:	9b01      	ldr	r3, [sp, #4]
    474e:	889b      	ldrh	r3, [r3, #4]
    4750:	2b01      	cmp	r3, #1
    4752:	d107      	bne.n	4764 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    4754:	4b05      	ldr	r3, [pc, #20]	; (476c <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    4756:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    475a:	4a04      	ldr	r2, [pc, #16]	; (476c <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    475c:	f043 0304 	orr.w	r3, r3, #4
    4760:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    4764:	bf00      	nop
    4766:	b002      	add	sp, #8
    4768:	4770      	bx	lr
    476a:	bf00      	nop
    476c:	40064000 	.word	0x40064000

00004770 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    4770:	b082      	sub	sp, #8
    4772:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    4774:	4b05      	ldr	r3, [pc, #20]	; (478c <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    4776:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    477a:	4a04      	ldr	r2, [pc, #16]	; (478c <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    477c:	f023 0304 	bic.w	r3, r3, #4
    4780:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    4784:	bf00      	nop
    4786:	b002      	add	sp, #8
    4788:	4770      	bx	lr
    478a:	bf00      	nop
    478c:	40064000 	.word	0x40064000

00004790 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4790:	b082      	sub	sp, #8
    4792:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    4794:	4b0f      	ldr	r3, [pc, #60]	; (47d4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    4796:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    479a:	4a0e      	ldr	r2, [pc, #56]	; (47d4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    479c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    47a0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    47a4:	4b0b      	ldr	r3, [pc, #44]	; (47d4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    47a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    47aa:	4a0a      	ldr	r2, [pc, #40]	; (47d4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    47ac:	f023 0302 	bic.w	r3, r3, #2
    47b0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    47b4:	4b07      	ldr	r3, [pc, #28]	; (47d4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    47b6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    47ba:	9b01      	ldr	r3, [sp, #4]
    47bc:	7a5b      	ldrb	r3, [r3, #9]
    47be:	005b      	lsls	r3, r3, #1
    47c0:	f003 0302 	and.w	r3, r3, #2
    47c4:	4903      	ldr	r1, [pc, #12]	; (47d4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    47c6:	4313      	orrs	r3, r2
    47c8:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    47cc:	bf00      	nop
    47ce:	b002      	add	sp, #8
    47d0:	4770      	bx	lr
    47d2:	bf00      	nop
    47d4:	40064000 	.word	0x40064000

000047d8 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    47d8:	b082      	sub	sp, #8
    47da:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    47dc:	9b01      	ldr	r3, [sp, #4]
    47de:	889b      	ldrh	r3, [r3, #4]
    47e0:	2b01      	cmp	r3, #1
    47e2:	d107      	bne.n	47f4 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    47e4:	4b05      	ldr	r3, [pc, #20]	; (47fc <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    47e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    47ea:	4a04      	ldr	r2, [pc, #16]	; (47fc <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    47ec:	f043 0302 	orr.w	r3, r3, #2
    47f0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    47f4:	bf00      	nop
    47f6:	b002      	add	sp, #8
    47f8:	4770      	bx	lr
    47fa:	bf00      	nop
    47fc:	40064000 	.word	0x40064000

00004800 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    4800:	b082      	sub	sp, #8
    4802:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    4804:	4b05      	ldr	r3, [pc, #20]	; (481c <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    4806:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    480a:	4a04      	ldr	r2, [pc, #16]	; (481c <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    480c:	f023 0302 	bic.w	r3, r3, #2
    4810:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    4814:	bf00      	nop
    4816:	b002      	add	sp, #8
    4818:	4770      	bx	lr
    481a:	bf00      	nop
    481c:	40064000 	.word	0x40064000

00004820 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4820:	b500      	push	{lr}
    4822:	b08b      	sub	sp, #44	; 0x2c
    4824:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    4826:	9b01      	ldr	r3, [sp, #4]
    4828:	681a      	ldr	r2, [r3, #0]
    482a:	4975      	ldr	r1, [pc, #468]	; (4a00 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    482c:	4613      	mov	r3, r2
    482e:	00db      	lsls	r3, r3, #3
    4830:	4413      	add	r3, r2
    4832:	440b      	add	r3, r1
    4834:	781b      	ldrb	r3, [r3, #0]
    4836:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    4838:	2300      	movs	r3, #0
    483a:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    483e:	2300      	movs	r3, #0
    4840:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    4844:	4b6f      	ldr	r3, [pc, #444]	; (4a04 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4846:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    484a:	4a6e      	ldr	r2, [pc, #440]	; (4a04 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    484c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4850:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    4854:	4b6b      	ldr	r3, [pc, #428]	; (4a04 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4856:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    485a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    485e:	2b00      	cmp	r3, #0
    4860:	d07d      	beq.n	495e <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    4862:	9b01      	ldr	r3, [sp, #4]
    4864:	79db      	ldrb	r3, [r3, #7]
    4866:	461a      	mov	r2, r3
    4868:	4b66      	ldr	r3, [pc, #408]	; (4a04 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    486a:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    486e:	f003 0303 	and.w	r3, r3, #3
    4872:	429a      	cmp	r2, r3
    4874:	d10b      	bne.n	488e <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    4876:	9b01      	ldr	r3, [sp, #4]
    4878:	799b      	ldrb	r3, [r3, #6]
    487a:	461a      	mov	r2, r3
    487c:	4b61      	ldr	r3, [pc, #388]	; (4a04 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    487e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4882:	08db      	lsrs	r3, r3, #3
    4884:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    4888:	429a      	cmp	r2, r3
    488a:	f000 80b4 	beq.w	49f6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    488e:	4b5d      	ldr	r3, [pc, #372]	; (4a04 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4890:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4894:	f003 0301 	and.w	r3, r3, #1
    4898:	2b00      	cmp	r3, #0
    489a:	d105      	bne.n	48a8 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    489c:	2301      	movs	r3, #1
    489e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    48a2:	2000      	movs	r0, #0
    48a4:	f7ff fd66 	bl	4374 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    48a8:	2002      	movs	r0, #2
    48aa:	f7ff fdcf 	bl	444c <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    48ae:	4b55      	ldr	r3, [pc, #340]	; (4a04 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    48b0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    48b4:	4a53      	ldr	r2, [pc, #332]	; (4a04 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    48b6:	f023 0301 	bic.w	r3, r3, #1
    48ba:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    48be:	9b01      	ldr	r3, [sp, #4]
    48c0:	889b      	ldrh	r3, [r3, #4]
    48c2:	2b01      	cmp	r3, #1
    48c4:	f040 8097 	bne.w	49f6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    48c8:	9b01      	ldr	r3, [sp, #4]
    48ca:	79db      	ldrb	r3, [r3, #7]
    48cc:	4a4d      	ldr	r2, [pc, #308]	; (4a04 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    48ce:	f003 0303 	and.w	r3, r3, #3
    48d2:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    48d6:	4b4b      	ldr	r3, [pc, #300]	; (4a04 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    48d8:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    48dc:	9b01      	ldr	r3, [sp, #4]
    48de:	799b      	ldrb	r3, [r3, #6]
    48e0:	00db      	lsls	r3, r3, #3
    48e2:	f003 0308 	and.w	r3, r3, #8
    48e6:	4313      	orrs	r3, r2
    48e8:	4a46      	ldr	r2, [pc, #280]	; (4a04 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    48ea:	f043 0301 	orr.w	r3, r3, #1
    48ee:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    48f2:	aa03      	add	r2, sp, #12
    48f4:	a904      	add	r1, sp, #16
    48f6:	a805      	add	r0, sp, #20
    48f8:	f24c 3350 	movw	r3, #50000	; 0xc350
    48fc:	f7fe ff6e 	bl	37dc <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4900:	4b40      	ldr	r3, [pc, #256]	; (4a04 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4902:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4906:	0e1b      	lsrs	r3, r3, #24
    4908:	f003 0301 	and.w	r3, r3, #1
    490c:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    490e:	9a03      	ldr	r2, [sp, #12]
    4910:	a904      	add	r1, sp, #16
    4912:	ab05      	add	r3, sp, #20
    4914:	4618      	mov	r0, r3
    4916:	f7fe ff7b 	bl	3810 <Clock_Ip_TimeoutExpired>
    491a:	4603      	mov	r3, r0
    491c:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4920:	9b06      	ldr	r3, [sp, #24]
    4922:	2b00      	cmp	r3, #0
    4924:	d106      	bne.n	4934 <Clock_Ip_SetFirc_TrustedCall+0x114>
    4926:	f89d 301f 	ldrb.w	r3, [sp, #31]
    492a:	f083 0301 	eor.w	r3, r3, #1
    492e:	b2db      	uxtb	r3, r3
    4930:	2b00      	cmp	r3, #0
    4932:	d1e5      	bne.n	4900 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    4934:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4938:	2b00      	cmp	r3, #0
    493a:	d005      	beq.n	4948 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    493c:	9b01      	ldr	r3, [sp, #4]
    493e:	681b      	ldr	r3, [r3, #0]
    4940:	4619      	mov	r1, r3
    4942:	2001      	movs	r0, #1
    4944:	f7fe ff3a 	bl	37bc <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    4948:	2003      	movs	r0, #3
    494a:	f7ff fd7f 	bl	444c <SetInputSouceSytemClock>

                if (SircWasDisabled)
    494e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    4952:	2b00      	cmp	r3, #0
    4954:	d04f      	beq.n	49f6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    4956:	2002      	movs	r0, #2
    4958:	f7ff fd26 	bl	43a8 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    495c:	e04b      	b.n	49f6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    495e:	4b29      	ldr	r3, [pc, #164]	; (4a04 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4960:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4964:	4a27      	ldr	r2, [pc, #156]	; (4a04 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4966:	f023 0301 	bic.w	r3, r3, #1
    496a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    496e:	9b01      	ldr	r3, [sp, #4]
    4970:	889b      	ldrh	r3, [r3, #4]
    4972:	2b01      	cmp	r3, #1
    4974:	d13f      	bne.n	49f6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    4976:	9b01      	ldr	r3, [sp, #4]
    4978:	79db      	ldrb	r3, [r3, #7]
    497a:	4a22      	ldr	r2, [pc, #136]	; (4a04 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    497c:	f003 0303 	and.w	r3, r3, #3
    4980:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    4984:	4b1f      	ldr	r3, [pc, #124]	; (4a04 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4986:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    498a:	9b01      	ldr	r3, [sp, #4]
    498c:	799b      	ldrb	r3, [r3, #6]
    498e:	00db      	lsls	r3, r3, #3
    4990:	f003 0308 	and.w	r3, r3, #8
    4994:	4313      	orrs	r3, r2
    4996:	4a1b      	ldr	r2, [pc, #108]	; (4a04 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4998:	f043 0301 	orr.w	r3, r3, #1
    499c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    49a0:	aa03      	add	r2, sp, #12
    49a2:	a904      	add	r1, sp, #16
    49a4:	a805      	add	r0, sp, #20
    49a6:	f24c 3350 	movw	r3, #50000	; 0xc350
    49aa:	f7fe ff17 	bl	37dc <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    49ae:	4b15      	ldr	r3, [pc, #84]	; (4a04 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    49b0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    49b4:	0e1b      	lsrs	r3, r3, #24
    49b6:	f003 0301 	and.w	r3, r3, #1
    49ba:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    49bc:	9a03      	ldr	r2, [sp, #12]
    49be:	a904      	add	r1, sp, #16
    49c0:	ab05      	add	r3, sp, #20
    49c2:	4618      	mov	r0, r3
    49c4:	f7fe ff24 	bl	3810 <Clock_Ip_TimeoutExpired>
    49c8:	4603      	mov	r3, r0
    49ca:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    49ce:	9b06      	ldr	r3, [sp, #24]
    49d0:	2b00      	cmp	r3, #0
    49d2:	d106      	bne.n	49e2 <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    49d4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    49d8:	f083 0301 	eor.w	r3, r3, #1
    49dc:	b2db      	uxtb	r3, r3
    49de:	2b00      	cmp	r3, #0
    49e0:	d1e5      	bne.n	49ae <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    49e2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    49e6:	2b00      	cmp	r3, #0
    49e8:	d005      	beq.n	49f6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    49ea:	9b01      	ldr	r3, [sp, #4]
    49ec:	681b      	ldr	r3, [r3, #0]
    49ee:	4619      	mov	r1, r3
    49f0:	2001      	movs	r0, #1
    49f2:	f7fe fee3 	bl	37bc <Clock_Ip_ReportClockErrors>
}
    49f6:	bf00      	nop
    49f8:	b00b      	add	sp, #44	; 0x2c
    49fa:	f85d fb04 	ldr.w	pc, [sp], #4
    49fe:	bf00      	nop
    4a00:	00015d74 	.word	0x00015d74
    4a04:	40064000 	.word	0x40064000

00004a08 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4a08:	b500      	push	{lr}
    4a0a:	b089      	sub	sp, #36	; 0x24
    4a0c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4a0e:	2300      	movs	r3, #0
    4a10:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    4a14:	9b01      	ldr	r3, [sp, #4]
    4a16:	889b      	ldrh	r3, [r3, #4]
    4a18:	2b01      	cmp	r3, #1
    4a1a:	d132      	bne.n	4a82 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    4a1c:	4b1b      	ldr	r3, [pc, #108]	; (4a8c <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4a1e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4a22:	4a1a      	ldr	r2, [pc, #104]	; (4a8c <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4a24:	f043 0301 	orr.w	r3, r3, #1
    4a28:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4a2c:	aa03      	add	r2, sp, #12
    4a2e:	a904      	add	r1, sp, #16
    4a30:	a805      	add	r0, sp, #20
    4a32:	f24c 3350 	movw	r3, #50000	; 0xc350
    4a36:	f7fe fed1 	bl	37dc <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4a3a:	4b14      	ldr	r3, [pc, #80]	; (4a8c <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4a3c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4a40:	0e1b      	lsrs	r3, r3, #24
    4a42:	f003 0301 	and.w	r3, r3, #1
    4a46:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4a48:	9a03      	ldr	r2, [sp, #12]
    4a4a:	a904      	add	r1, sp, #16
    4a4c:	ab05      	add	r3, sp, #20
    4a4e:	4618      	mov	r0, r3
    4a50:	f7fe fede 	bl	3810 <Clock_Ip_TimeoutExpired>
    4a54:	4603      	mov	r3, r0
    4a56:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4a5a:	9b06      	ldr	r3, [sp, #24]
    4a5c:	2b00      	cmp	r3, #0
    4a5e:	d106      	bne.n	4a6e <Clock_Ip_EnableFirc_TrustedCall+0x66>
    4a60:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4a64:	f083 0301 	eor.w	r3, r3, #1
    4a68:	b2db      	uxtb	r3, r3
    4a6a:	2b00      	cmp	r3, #0
    4a6c:	d1e5      	bne.n	4a3a <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    4a6e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4a72:	2b00      	cmp	r3, #0
    4a74:	d005      	beq.n	4a82 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4a76:	9b01      	ldr	r3, [sp, #4]
    4a78:	681b      	ldr	r3, [r3, #0]
    4a7a:	4619      	mov	r1, r3
    4a7c:	2001      	movs	r0, #1
    4a7e:	f7fe fe9d 	bl	37bc <Clock_Ip_ReportClockErrors>
        }
    }
}
    4a82:	bf00      	nop
    4a84:	b009      	add	sp, #36	; 0x24
    4a86:	f85d fb04 	ldr.w	pc, [sp], #4
    4a8a:	bf00      	nop
    4a8c:	40064000 	.word	0x40064000

00004a90 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    4a90:	b082      	sub	sp, #8
    4a92:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    4a94:	4b05      	ldr	r3, [pc, #20]	; (4aac <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    4a96:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4a9a:	4a04      	ldr	r2, [pc, #16]	; (4aac <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    4a9c:	f023 0301 	bic.w	r3, r3, #1
    4aa0:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    4aa4:	bf00      	nop
    4aa6:	b002      	add	sp, #8
    4aa8:	4770      	bx	lr
    4aaa:	bf00      	nop
    4aac:	40064000 	.word	0x40064000

00004ab0 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    4ab0:	b082      	sub	sp, #8
    4ab2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4ab4:	bf00      	nop
    4ab6:	b002      	add	sp, #8
    4ab8:	4770      	bx	lr

00004aba <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    4aba:	b082      	sub	sp, #8
    4abc:	9001      	str	r0, [sp, #4]
    4abe:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    4ac0:	bf00      	nop
    4ac2:	b002      	add	sp, #8
    4ac4:	4770      	bx	lr

00004ac6 <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    4ac6:	b082      	sub	sp, #8
    4ac8:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    4aca:	bf00      	nop
    4acc:	b002      	add	sp, #8
    4ace:	4770      	bx	lr

00004ad0 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    4ad0:	b082      	sub	sp, #8
    4ad2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4ad4:	bf00      	nop
    4ad6:	b002      	add	sp, #8
    4ad8:	4770      	bx	lr

00004ada <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    4ada:	b082      	sub	sp, #8
    4adc:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    4ade:	2302      	movs	r3, #2
}
    4ae0:	4618      	mov	r0, r3
    4ae2:	b002      	add	sp, #8
    4ae4:	4770      	bx	lr

00004ae6 <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    4ae6:	b082      	sub	sp, #8
    4ae8:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    4aea:	bf00      	nop
    4aec:	b002      	add	sp, #8
    4aee:	4770      	bx	lr

00004af0 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    4af0:	b500      	push	{lr}
    4af2:	b083      	sub	sp, #12
    4af4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4af6:	9b01      	ldr	r3, [sp, #4]
    4af8:	2b00      	cmp	r3, #0
    4afa:	d002      	beq.n	4b02 <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    4afc:	9801      	ldr	r0, [sp, #4]
    4afe:	f000 f870 	bl	4be2 <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4b02:	bf00      	nop
    4b04:	b003      	add	sp, #12
    4b06:	f85d fb04 	ldr.w	pc, [sp], #4

00004b0a <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    4b0a:	b500      	push	{lr}
    4b0c:	b083      	sub	sp, #12
    4b0e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4b10:	9b01      	ldr	r3, [sp, #4]
    4b12:	2b00      	cmp	r3, #0
    4b14:	d002      	beq.n	4b1c <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    4b16:	9801      	ldr	r0, [sp, #4]
    4b18:	f000 f89a 	bl	4c50 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4b1c:	bf00      	nop
    4b1e:	b003      	add	sp, #12
    4b20:	f85d fb04 	ldr.w	pc, [sp], #4

00004b24 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    4b24:	b500      	push	{lr}
    4b26:	b089      	sub	sp, #36	; 0x24
    4b28:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    4b2a:	2301      	movs	r3, #1
    4b2c:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    4b2e:	2300      	movs	r3, #0
    4b30:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    4b34:	4b1e      	ldr	r3, [pc, #120]	; (4bb0 <Clock_Ip_CompleteSpll+0x8c>)
    4b36:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4b3a:	f003 0301 	and.w	r3, r3, #1
    4b3e:	2b00      	cmp	r3, #0
    4b40:	d02f      	beq.n	4ba2 <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4b42:	aa02      	add	r2, sp, #8
    4b44:	a903      	add	r1, sp, #12
    4b46:	a804      	add	r0, sp, #16
    4b48:	f24c 3350 	movw	r3, #50000	; 0xc350
    4b4c:	f7fe fe46 	bl	37dc <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    4b50:	4b17      	ldr	r3, [pc, #92]	; (4bb0 <Clock_Ip_CompleteSpll+0x8c>)
    4b52:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4b56:	0e1b      	lsrs	r3, r3, #24
    4b58:	f003 0301 	and.w	r3, r3, #1
    4b5c:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4b5e:	9a02      	ldr	r2, [sp, #8]
    4b60:	a903      	add	r1, sp, #12
    4b62:	ab04      	add	r3, sp, #16
    4b64:	4618      	mov	r0, r3
    4b66:	f7fe fe53 	bl	3810 <Clock_Ip_TimeoutExpired>
    4b6a:	4603      	mov	r3, r0
    4b6c:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    4b70:	9b05      	ldr	r3, [sp, #20]
    4b72:	2b00      	cmp	r3, #0
    4b74:	d106      	bne.n	4b84 <Clock_Ip_CompleteSpll+0x60>
    4b76:	f89d 301b 	ldrb.w	r3, [sp, #27]
    4b7a:	f083 0301 	eor.w	r3, r3, #1
    4b7e:	b2db      	uxtb	r3, r3
    4b80:	2b00      	cmp	r3, #0
    4b82:	d1e5      	bne.n	4b50 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    4b84:	f89d 301b 	ldrb.w	r3, [sp, #27]
    4b88:	f083 0301 	eor.w	r3, r3, #1
    4b8c:	b2db      	uxtb	r3, r3
    4b8e:	2b00      	cmp	r3, #0
    4b90:	d002      	beq.n	4b98 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    4b92:	2302      	movs	r3, #2
    4b94:	9307      	str	r3, [sp, #28]
    4b96:	e006      	b.n	4ba6 <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    4b98:	9901      	ldr	r1, [sp, #4]
    4b9a:	2001      	movs	r0, #1
    4b9c:	f7fe fe0e 	bl	37bc <Clock_Ip_ReportClockErrors>
    4ba0:	e001      	b.n	4ba6 <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    4ba2:	2300      	movs	r3, #0
    4ba4:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    4ba6:	9b07      	ldr	r3, [sp, #28]
}
    4ba8:	4618      	mov	r0, r3
    4baa:	b009      	add	sp, #36	; 0x24
    4bac:	f85d fb04 	ldr.w	pc, [sp], #4
    4bb0:	40064000 	.word	0x40064000

00004bb4 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    4bb4:	b500      	push	{lr}
    4bb6:	b083      	sub	sp, #12
    4bb8:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    4bba:	9801      	ldr	r0, [sp, #4]
    4bbc:	f000 f886 	bl	4ccc <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    4bc0:	bf00      	nop
    4bc2:	b003      	add	sp, #12
    4bc4:	f85d fb04 	ldr.w	pc, [sp], #4

00004bc8 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    4bc8:	b500      	push	{lr}
    4bca:	b083      	sub	sp, #12
    4bcc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4bce:	9b01      	ldr	r3, [sp, #4]
    4bd0:	2b00      	cmp	r3, #0
    4bd2:	d002      	beq.n	4bda <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    4bd4:	9801      	ldr	r0, [sp, #4]
    4bd6:	f000 f891 	bl	4cfc <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4bda:	bf00      	nop
    4bdc:	b003      	add	sp, #12
    4bde:	f85d fb04 	ldr.w	pc, [sp], #4

00004be2 <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4be2:	b082      	sub	sp, #8
    4be4:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    4be6:	4b19      	ldr	r3, [pc, #100]	; (4c4c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4be8:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4bec:	4a17      	ldr	r2, [pc, #92]	; (4c4c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4bee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4bf2:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    4bf6:	4b15      	ldr	r3, [pc, #84]	; (4c4c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4bf8:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4bfc:	4a13      	ldr	r2, [pc, #76]	; (4c4c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    4c02:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    4c06:	4b11      	ldr	r3, [pc, #68]	; (4c4c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c08:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4c0c:	4a0f      	ldr	r2, [pc, #60]	; (4c4c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c0e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    4c12:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    4c16:	4b0d      	ldr	r3, [pc, #52]	; (4c4c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c18:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4c1c:	4a0b      	ldr	r2, [pc, #44]	; (4c4c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c1e:	f023 0301 	bic.w	r3, r3, #1
    4c22:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    4c26:	4b09      	ldr	r3, [pc, #36]	; (4c4c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c28:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4c2c:	4a07      	ldr	r2, [pc, #28]	; (4c4c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c2e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    4c32:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    4c36:	4b05      	ldr	r3, [pc, #20]	; (4c4c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c38:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4c3c:	4a03      	ldr	r2, [pc, #12]	; (4c4c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4c3e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    4c42:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    4c46:	bf00      	nop
    4c48:	b002      	add	sp, #8
    4c4a:	4770      	bx	lr
    4c4c:	40064000 	.word	0x40064000

00004c50 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4c50:	b082      	sub	sp, #8
    4c52:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4c54:	9b01      	ldr	r3, [sp, #4]
    4c56:	889b      	ldrh	r3, [r3, #4]
    4c58:	2b01      	cmp	r3, #1
    4c5a:	d12f      	bne.n	4cbc <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    4c5c:	4b1a      	ldr	r3, [pc, #104]	; (4cc8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4c5e:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    4c62:	9b01      	ldr	r3, [sp, #4]
    4c64:	7b5b      	ldrb	r3, [r3, #13]
    4c66:	3b01      	subs	r3, #1
    4c68:	021b      	lsls	r3, r3, #8
    4c6a:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    4c6e:	9b01      	ldr	r3, [sp, #4]
    4c70:	7d1b      	ldrb	r3, [r3, #20]
    4c72:	3b10      	subs	r3, #16
    4c74:	041b      	lsls	r3, r3, #16
    4c76:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    4c7a:	430b      	orrs	r3, r1
    4c7c:	4912      	ldr	r1, [pc, #72]	; (4cc8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4c7e:	4313      	orrs	r3, r2
    4c80:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    4c84:	9b01      	ldr	r3, [sp, #4]
    4c86:	7fdb      	ldrb	r3, [r3, #31]
    4c88:	2b02      	cmp	r3, #2
    4c8a:	d011      	beq.n	4cb0 <Clock_Ip_SetSpll_TrustedCall+0x60>
    4c8c:	2b02      	cmp	r3, #2
    4c8e:	dc17      	bgt.n	4cc0 <Clock_Ip_SetSpll_TrustedCall+0x70>
    4c90:	2b00      	cmp	r3, #0
    4c92:	d002      	beq.n	4c9a <Clock_Ip_SetSpll_TrustedCall+0x4a>
    4c94:	2b01      	cmp	r3, #1
    4c96:	d005      	beq.n	4ca4 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    4c98:	e012      	b.n	4cc0 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    4c9a:	4b0b      	ldr	r3, [pc, #44]	; (4cc8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4c9c:	2200      	movs	r2, #0
    4c9e:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4ca2:	e00e      	b.n	4cc2 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    4ca4:	4b08      	ldr	r3, [pc, #32]	; (4cc8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4ca6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4caa:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4cae:	e008      	b.n	4cc2 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    4cb0:	4b05      	ldr	r3, [pc, #20]	; (4cc8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4cb2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    4cb6:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4cba:	e002      	b.n	4cc2 <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    4cbc:	bf00      	nop
    4cbe:	e000      	b.n	4cc2 <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    4cc0:	bf00      	nop
}
    4cc2:	bf00      	nop
    4cc4:	b002      	add	sp, #8
    4cc6:	4770      	bx	lr
    4cc8:	40064000 	.word	0x40064000

00004ccc <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    4ccc:	b082      	sub	sp, #8
    4cce:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    4cd0:	4b09      	ldr	r3, [pc, #36]	; (4cf8 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4cd2:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4cd6:	4a08      	ldr	r2, [pc, #32]	; (4cf8 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4cd8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4cdc:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    4ce0:	4b05      	ldr	r3, [pc, #20]	; (4cf8 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4ce2:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4ce6:	4a04      	ldr	r2, [pc, #16]	; (4cf8 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4ce8:	f023 0301 	bic.w	r3, r3, #1
    4cec:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    4cf0:	bf00      	nop
    4cf2:	b002      	add	sp, #8
    4cf4:	4770      	bx	lr
    4cf6:	bf00      	nop
    4cf8:	40064000 	.word	0x40064000

00004cfc <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4cfc:	b082      	sub	sp, #8
    4cfe:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4d00:	9b01      	ldr	r3, [sp, #4]
    4d02:	889b      	ldrh	r3, [r3, #4]
    4d04:	2b01      	cmp	r3, #1
    4d06:	d107      	bne.n	4d18 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    4d08:	4b05      	ldr	r3, [pc, #20]	; (4d20 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4d0a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4d0e:	4a04      	ldr	r2, [pc, #16]	; (4d20 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4d10:	f043 0301 	orr.w	r3, r3, #1
    4d14:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    4d18:	bf00      	nop
    4d1a:	b002      	add	sp, #8
    4d1c:	4770      	bx	lr
    4d1e:	bf00      	nop
    4d20:	40064000 	.word	0x40064000

00004d24 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    4d24:	b082      	sub	sp, #8
    4d26:	9001      	str	r0, [sp, #4]
    4d28:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    4d2a:	bf00      	nop
    4d2c:	b002      	add	sp, #8
    4d2e:	4770      	bx	lr

00004d30 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    4d30:	b082      	sub	sp, #8
    4d32:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4d34:	bf00      	nop
    4d36:	b002      	add	sp, #8
    4d38:	4770      	bx	lr

00004d3a <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4d3a:	b500      	push	{lr}
    4d3c:	b083      	sub	sp, #12
    4d3e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4d40:	9b01      	ldr	r3, [sp, #4]
    4d42:	2b00      	cmp	r3, #0
    4d44:	d002      	beq.n	4d4c <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    4d46:	9801      	ldr	r0, [sp, #4]
    4d48:	f000 f8ee 	bl	4f28 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4d4c:	bf00      	nop
    4d4e:	b003      	add	sp, #12
    4d50:	f85d fb04 	ldr.w	pc, [sp], #4

00004d54 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4d54:	b500      	push	{lr}
    4d56:	b083      	sub	sp, #12
    4d58:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4d5a:	9b01      	ldr	r3, [sp, #4]
    4d5c:	2b00      	cmp	r3, #0
    4d5e:	d002      	beq.n	4d66 <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    4d60:	9801      	ldr	r0, [sp, #4]
    4d62:	f000 f8ff 	bl	4f64 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4d66:	bf00      	nop
    4d68:	b003      	add	sp, #12
    4d6a:	f85d fb04 	ldr.w	pc, [sp], #4

00004d6e <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    4d6e:	b500      	push	{lr}
    4d70:	b083      	sub	sp, #12
    4d72:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4d74:	9b01      	ldr	r3, [sp, #4]
    4d76:	2b00      	cmp	r3, #0
    4d78:	d002      	beq.n	4d80 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    4d7a:	9801      	ldr	r0, [sp, #4]
    4d7c:	f000 f912 	bl	4fa4 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4d80:	bf00      	nop
    4d82:	b003      	add	sp, #12
    4d84:	f85d fb04 	ldr.w	pc, [sp], #4

00004d88 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4d88:	b500      	push	{lr}
    4d8a:	b083      	sub	sp, #12
    4d8c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4d8e:	9b01      	ldr	r3, [sp, #4]
    4d90:	2b00      	cmp	r3, #0
    4d92:	d002      	beq.n	4d9a <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    4d94:	9801      	ldr	r0, [sp, #4]
    4d96:	f000 f925 	bl	4fe4 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4d9a:	bf00      	nop
    4d9c:	b003      	add	sp, #12
    4d9e:	f85d fb04 	ldr.w	pc, [sp], #4

00004da2 <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4da2:	b500      	push	{lr}
    4da4:	b083      	sub	sp, #12
    4da6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4da8:	9b01      	ldr	r3, [sp, #4]
    4daa:	2b00      	cmp	r3, #0
    4dac:	d002      	beq.n	4db4 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    4dae:	9801      	ldr	r0, [sp, #4]
    4db0:	f000 f936 	bl	5020 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4db4:	bf00      	nop
    4db6:	b003      	add	sp, #12
    4db8:	f85d fb04 	ldr.w	pc, [sp], #4

00004dbc <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    4dbc:	b500      	push	{lr}
    4dbe:	b083      	sub	sp, #12
    4dc0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4dc2:	9b01      	ldr	r3, [sp, #4]
    4dc4:	2b00      	cmp	r3, #0
    4dc6:	d002      	beq.n	4dce <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    4dc8:	9801      	ldr	r0, [sp, #4]
    4dca:	f000 f949 	bl	5060 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4dce:	bf00      	nop
    4dd0:	b003      	add	sp, #12
    4dd2:	f85d fb04 	ldr.w	pc, [sp], #4

00004dd6 <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    4dd6:	b500      	push	{lr}
    4dd8:	b083      	sub	sp, #12
    4dda:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4ddc:	9b01      	ldr	r3, [sp, #4]
    4dde:	2b00      	cmp	r3, #0
    4de0:	d002      	beq.n	4de8 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    4de2:	9801      	ldr	r0, [sp, #4]
    4de4:	f000 f958 	bl	5098 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4de8:	bf00      	nop
    4dea:	b003      	add	sp, #12
    4dec:	f85d fb04 	ldr.w	pc, [sp], #4

00004df0 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    4df0:	b500      	push	{lr}
    4df2:	b083      	sub	sp, #12
    4df4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4df6:	9b01      	ldr	r3, [sp, #4]
    4df8:	2b00      	cmp	r3, #0
    4dfa:	d002      	beq.n	4e02 <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    4dfc:	9801      	ldr	r0, [sp, #4]
    4dfe:	f000 f969 	bl	50d4 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4e02:	bf00      	nop
    4e04:	b003      	add	sp, #12
    4e06:	f85d fb04 	ldr.w	pc, [sp], #4

00004e0a <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    4e0a:	b500      	push	{lr}
    4e0c:	b083      	sub	sp, #12
    4e0e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4e10:	9b01      	ldr	r3, [sp, #4]
    4e12:	2b00      	cmp	r3, #0
    4e14:	d002      	beq.n	4e1c <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    4e16:	9801      	ldr	r0, [sp, #4]
    4e18:	f000 f978 	bl	510c <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4e1c:	bf00      	nop
    4e1e:	b003      	add	sp, #12
    4e20:	f85d fb04 	ldr.w	pc, [sp], #4

00004e24 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4e24:	b500      	push	{lr}
    4e26:	b083      	sub	sp, #12
    4e28:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4e2a:	9b01      	ldr	r3, [sp, #4]
    4e2c:	2b00      	cmp	r3, #0
    4e2e:	d002      	beq.n	4e36 <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    4e30:	9801      	ldr	r0, [sp, #4]
    4e32:	f000 f989 	bl	5148 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4e36:	bf00      	nop
    4e38:	b003      	add	sp, #12
    4e3a:	f85d fb04 	ldr.w	pc, [sp], #4

00004e3e <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4e3e:	b500      	push	{lr}
    4e40:	b083      	sub	sp, #12
    4e42:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4e44:	9b01      	ldr	r3, [sp, #4]
    4e46:	2b00      	cmp	r3, #0
    4e48:	d002      	beq.n	4e50 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    4e4a:	9801      	ldr	r0, [sp, #4]
    4e4c:	f000 f998 	bl	5180 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4e50:	bf00      	nop
    4e52:	b003      	add	sp, #12
    4e54:	f85d fb04 	ldr.w	pc, [sp], #4

00004e58 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    4e58:	b500      	push	{lr}
    4e5a:	b083      	sub	sp, #12
    4e5c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4e5e:	9b01      	ldr	r3, [sp, #4]
    4e60:	2b00      	cmp	r3, #0
    4e62:	d002      	beq.n	4e6a <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    4e64:	9801      	ldr	r0, [sp, #4]
    4e66:	f000 f9a9 	bl	51bc <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4e6a:	bf00      	nop
    4e6c:	b003      	add	sp, #12
    4e6e:	f85d fb04 	ldr.w	pc, [sp], #4

00004e72 <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    4e72:	b500      	push	{lr}
    4e74:	b083      	sub	sp, #12
    4e76:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4e78:	9b01      	ldr	r3, [sp, #4]
    4e7a:	2b00      	cmp	r3, #0
    4e7c:	d002      	beq.n	4e84 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    4e7e:	9801      	ldr	r0, [sp, #4]
    4e80:	f000 f9e6 	bl	5250 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4e84:	bf00      	nop
    4e86:	b003      	add	sp, #12
    4e88:	f85d fb04 	ldr.w	pc, [sp], #4

00004e8c <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4e8c:	b500      	push	{lr}
    4e8e:	b083      	sub	sp, #12
    4e90:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4e92:	9b01      	ldr	r3, [sp, #4]
    4e94:	2b00      	cmp	r3, #0
    4e96:	d002      	beq.n	4e9e <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    4e98:	9801      	ldr	r0, [sp, #4]
    4e9a:	f000 fa25 	bl	52e8 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4e9e:	bf00      	nop
    4ea0:	b003      	add	sp, #12
    4ea2:	f85d fb04 	ldr.w	pc, [sp], #4

00004ea6 <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4ea6:	b500      	push	{lr}
    4ea8:	b083      	sub	sp, #12
    4eaa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4eac:	9b01      	ldr	r3, [sp, #4]
    4eae:	2b00      	cmp	r3, #0
    4eb0:	d002      	beq.n	4eb8 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    4eb2:	9801      	ldr	r0, [sp, #4]
    4eb4:	f000 fa2a 	bl	530c <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4eb8:	bf00      	nop
    4eba:	b003      	add	sp, #12
    4ebc:	f85d fb04 	ldr.w	pc, [sp], #4

00004ec0 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    4ec0:	b500      	push	{lr}
    4ec2:	b083      	sub	sp, #12
    4ec4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4ec6:	9b01      	ldr	r3, [sp, #4]
    4ec8:	2b00      	cmp	r3, #0
    4eca:	d002      	beq.n	4ed2 <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    4ecc:	9801      	ldr	r0, [sp, #4]
    4ece:	f000 fa3b 	bl	5348 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4ed2:	bf00      	nop
    4ed4:	b003      	add	sp, #12
    4ed6:	f85d fb04 	ldr.w	pc, [sp], #4

00004eda <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    4eda:	b500      	push	{lr}
    4edc:	b083      	sub	sp, #12
    4ede:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4ee0:	9b01      	ldr	r3, [sp, #4]
    4ee2:	2b00      	cmp	r3, #0
    4ee4:	d002      	beq.n	4eec <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    4ee6:	9801      	ldr	r0, [sp, #4]
    4ee8:	f000 fa56 	bl	5398 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4eec:	bf00      	nop
    4eee:	b003      	add	sp, #12
    4ef0:	f85d fb04 	ldr.w	pc, [sp], #4

00004ef4 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    4ef4:	b500      	push	{lr}
    4ef6:	b083      	sub	sp, #12
    4ef8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4efa:	9b01      	ldr	r3, [sp, #4]
    4efc:	2b00      	cmp	r3, #0
    4efe:	d002      	beq.n	4f06 <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    4f00:	9801      	ldr	r0, [sp, #4]
    4f02:	f000 fa79 	bl	53f8 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4f06:	bf00      	nop
    4f08:	b003      	add	sp, #12
    4f0a:	f85d fb04 	ldr.w	pc, [sp], #4

00004f0e <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    4f0e:	b500      	push	{lr}
    4f10:	b083      	sub	sp, #12
    4f12:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4f14:	9b01      	ldr	r3, [sp, #4]
    4f16:	2b00      	cmp	r3, #0
    4f18:	d002      	beq.n	4f20 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    4f1a:	9801      	ldr	r0, [sp, #4]
    4f1c:	f000 fa8a 	bl	5434 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4f20:	bf00      	nop
    4f22:	b003      	add	sp, #12
    4f24:	f85d fb04 	ldr.w	pc, [sp], #4

00004f28 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4f28:	b084      	sub	sp, #16
    4f2a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4f2c:	4b0b      	ldr	r3, [pc, #44]	; (4f5c <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    4f2e:	795b      	ldrb	r3, [r3, #5]
    4f30:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    4f32:	4b0b      	ldr	r3, [pc, #44]	; (4f60 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    4f34:	695b      	ldr	r3, [r3, #20]
    4f36:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4f38:	9b02      	ldr	r3, [sp, #8]
    4f3a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4f3e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    4f40:	9b03      	ldr	r3, [sp, #12]
    4f42:	061b      	lsls	r3, r3, #24
    4f44:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4f48:	9a02      	ldr	r2, [sp, #8]
    4f4a:	4313      	orrs	r3, r2
    4f4c:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    4f4e:	4a04      	ldr	r2, [pc, #16]	; (4f60 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    4f50:	9b02      	ldr	r3, [sp, #8]
    4f52:	6153      	str	r3, [r2, #20]
}
    4f54:	bf00      	nop
    4f56:	b004      	add	sp, #16
    4f58:	4770      	bx	lr
    4f5a:	bf00      	nop
    4f5c:	000160dc 	.word	0x000160dc
    4f60:	40064000 	.word	0x40064000

00004f64 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4f64:	b084      	sub	sp, #16
    4f66:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4f68:	9b01      	ldr	r3, [sp, #4]
    4f6a:	685b      	ldr	r3, [r3, #4]
    4f6c:	4a0b      	ldr	r2, [pc, #44]	; (4f9c <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    4f6e:	5cd3      	ldrb	r3, [r2, r3]
    4f70:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    4f72:	4b0b      	ldr	r3, [pc, #44]	; (4fa0 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    4f74:	695b      	ldr	r3, [r3, #20]
    4f76:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4f78:	9b02      	ldr	r3, [sp, #8]
    4f7a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4f7e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    4f80:	9b03      	ldr	r3, [sp, #12]
    4f82:	061b      	lsls	r3, r3, #24
    4f84:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4f88:	9a02      	ldr	r2, [sp, #8]
    4f8a:	4313      	orrs	r3, r2
    4f8c:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    4f8e:	4a04      	ldr	r2, [pc, #16]	; (4fa0 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    4f90:	9b02      	ldr	r3, [sp, #8]
    4f92:	6153      	str	r3, [r2, #20]
}
    4f94:	bf00      	nop
    4f96:	b004      	add	sp, #16
    4f98:	4770      	bx	lr
    4f9a:	bf00      	nop
    4f9c:	000160dc 	.word	0x000160dc
    4fa0:	40064000 	.word	0x40064000

00004fa4 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4fa4:	b084      	sub	sp, #16
    4fa6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4fa8:	9b01      	ldr	r3, [sp, #4]
    4faa:	685b      	ldr	r3, [r3, #4]
    4fac:	4a0b      	ldr	r2, [pc, #44]	; (4fdc <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    4fae:	5cd3      	ldrb	r3, [r2, r3]
    4fb0:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    4fb2:	4b0b      	ldr	r3, [pc, #44]	; (4fe0 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    4fb4:	699b      	ldr	r3, [r3, #24]
    4fb6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    4fb8:	9b02      	ldr	r3, [sp, #8]
    4fba:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4fbe:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    4fc0:	9b03      	ldr	r3, [sp, #12]
    4fc2:	061b      	lsls	r3, r3, #24
    4fc4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4fc8:	9a02      	ldr	r2, [sp, #8]
    4fca:	4313      	orrs	r3, r2
    4fcc:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    4fce:	4a04      	ldr	r2, [pc, #16]	; (4fe0 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    4fd0:	9b02      	ldr	r3, [sp, #8]
    4fd2:	6193      	str	r3, [r2, #24]
}
    4fd4:	bf00      	nop
    4fd6:	b004      	add	sp, #16
    4fd8:	4770      	bx	lr
    4fda:	bf00      	nop
    4fdc:	000160dc 	.word	0x000160dc
    4fe0:	40064000 	.word	0x40064000

00004fe4 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4fe4:	b084      	sub	sp, #16
    4fe6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4fe8:	4b0b      	ldr	r3, [pc, #44]	; (5018 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    4fea:	795b      	ldrb	r3, [r3, #5]
    4fec:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    4fee:	4b0b      	ldr	r3, [pc, #44]	; (501c <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    4ff0:	69db      	ldr	r3, [r3, #28]
    4ff2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    4ff4:	9b02      	ldr	r3, [sp, #8]
    4ff6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4ffa:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4ffc:	9b03      	ldr	r3, [sp, #12]
    4ffe:	061b      	lsls	r3, r3, #24
    5000:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    5004:	9a02      	ldr	r2, [sp, #8]
    5006:	4313      	orrs	r3, r2
    5008:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    500a:	4a04      	ldr	r2, [pc, #16]	; (501c <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    500c:	9b02      	ldr	r3, [sp, #8]
    500e:	61d3      	str	r3, [r2, #28]
}
    5010:	bf00      	nop
    5012:	b004      	add	sp, #16
    5014:	4770      	bx	lr
    5016:	bf00      	nop
    5018:	000160dc 	.word	0x000160dc
    501c:	40064000 	.word	0x40064000

00005020 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5020:	b084      	sub	sp, #16
    5022:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5024:	9b01      	ldr	r3, [sp, #4]
    5026:	685b      	ldr	r3, [r3, #4]
    5028:	4a0b      	ldr	r2, [pc, #44]	; (5058 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    502a:	5cd3      	ldrb	r3, [r2, r3]
    502c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    502e:	4b0b      	ldr	r3, [pc, #44]	; (505c <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    5030:	69db      	ldr	r3, [r3, #28]
    5032:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    5034:	9b02      	ldr	r3, [sp, #8]
    5036:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    503a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    503c:	9b03      	ldr	r3, [sp, #12]
    503e:	061b      	lsls	r3, r3, #24
    5040:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    5044:	9a02      	ldr	r2, [sp, #8]
    5046:	4313      	orrs	r3, r2
    5048:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    504a:	4a04      	ldr	r2, [pc, #16]	; (505c <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    504c:	9b02      	ldr	r3, [sp, #8]
    504e:	61d3      	str	r3, [r2, #28]
}
    5050:	bf00      	nop
    5052:	b004      	add	sp, #16
    5054:	4770      	bx	lr
    5056:	bf00      	nop
    5058:	000160dc 	.word	0x000160dc
    505c:	40064000 	.word	0x40064000

00005060 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5060:	b084      	sub	sp, #16
    5062:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5064:	4b0a      	ldr	r3, [pc, #40]	; (5090 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    5066:	7b9b      	ldrb	r3, [r3, #14]
    5068:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    506a:	4b0a      	ldr	r3, [pc, #40]	; (5094 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    506c:	691b      	ldr	r3, [r3, #16]
    506e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    5070:	9b02      	ldr	r3, [sp, #8]
    5072:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    5076:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    5078:	9b03      	ldr	r3, [sp, #12]
    507a:	011b      	lsls	r3, r3, #4
    507c:	9a02      	ldr	r2, [sp, #8]
    507e:	4313      	orrs	r3, r2
    5080:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    5082:	4a04      	ldr	r2, [pc, #16]	; (5094 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    5084:	9b02      	ldr	r3, [sp, #8]
    5086:	6113      	str	r3, [r2, #16]
}
    5088:	bf00      	nop
    508a:	b004      	add	sp, #16
    508c:	4770      	bx	lr
    508e:	bf00      	nop
    5090:	00016084 	.word	0x00016084
    5094:	40048000 	.word	0x40048000

00005098 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5098:	b084      	sub	sp, #16
    509a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    509c:	9b01      	ldr	r3, [sp, #4]
    509e:	685b      	ldr	r3, [r3, #4]
    50a0:	4a0a      	ldr	r2, [pc, #40]	; (50cc <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    50a2:	5cd3      	ldrb	r3, [r2, r3]
    50a4:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    50a6:	4b0a      	ldr	r3, [pc, #40]	; (50d0 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    50a8:	691b      	ldr	r3, [r3, #16]
    50aa:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    50ac:	9b02      	ldr	r3, [sp, #8]
    50ae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    50b2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    50b4:	9b03      	ldr	r3, [sp, #12]
    50b6:	011b      	lsls	r3, r3, #4
    50b8:	9a02      	ldr	r2, [sp, #8]
    50ba:	4313      	orrs	r3, r2
    50bc:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    50be:	4a04      	ldr	r2, [pc, #16]	; (50d0 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    50c0:	9b02      	ldr	r3, [sp, #8]
    50c2:	6113      	str	r3, [r2, #16]
}
    50c4:	bf00      	nop
    50c6:	b004      	add	sp, #16
    50c8:	4770      	bx	lr
    50ca:	bf00      	nop
    50cc:	00016084 	.word	0x00016084
    50d0:	40048000 	.word	0x40048000

000050d4 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    50d4:	b084      	sub	sp, #16
    50d6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    50d8:	4b0a      	ldr	r3, [pc, #40]	; (5104 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    50da:	785b      	ldrb	r3, [r3, #1]
    50dc:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    50de:	4b0a      	ldr	r3, [pc, #40]	; (5108 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    50e0:	691b      	ldr	r3, [r3, #16]
    50e2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    50e4:	9b02      	ldr	r3, [sp, #8]
    50e6:	f023 030c 	bic.w	r3, r3, #12
    50ea:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    50ec:	9b03      	ldr	r3, [sp, #12]
    50ee:	009b      	lsls	r3, r3, #2
    50f0:	9a02      	ldr	r2, [sp, #8]
    50f2:	4313      	orrs	r3, r2
    50f4:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    50f6:	4a04      	ldr	r2, [pc, #16]	; (5108 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    50f8:	9b02      	ldr	r3, [sp, #8]
    50fa:	6113      	str	r3, [r2, #16]
}
    50fc:	bf00      	nop
    50fe:	b004      	add	sp, #16
    5100:	4770      	bx	lr
    5102:	bf00      	nop
    5104:	0001613c 	.word	0x0001613c
    5108:	40048000 	.word	0x40048000

0000510c <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    510c:	b084      	sub	sp, #16
    510e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5110:	9b01      	ldr	r3, [sp, #4]
    5112:	685b      	ldr	r3, [r3, #4]
    5114:	4a0a      	ldr	r2, [pc, #40]	; (5140 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    5116:	5cd3      	ldrb	r3, [r2, r3]
    5118:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    511a:	4b0a      	ldr	r3, [pc, #40]	; (5144 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    511c:	691b      	ldr	r3, [r3, #16]
    511e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    5120:	9b02      	ldr	r3, [sp, #8]
    5122:	f023 030c 	bic.w	r3, r3, #12
    5126:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    5128:	9b03      	ldr	r3, [sp, #12]
    512a:	009b      	lsls	r3, r3, #2
    512c:	9a02      	ldr	r2, [sp, #8]
    512e:	4313      	orrs	r3, r2
    5130:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    5132:	4a04      	ldr	r2, [pc, #16]	; (5144 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    5134:	9b02      	ldr	r3, [sp, #8]
    5136:	6113      	str	r3, [r2, #16]
}
    5138:	bf00      	nop
    513a:	b004      	add	sp, #16
    513c:	4770      	bx	lr
    513e:	bf00      	nop
    5140:	0001613c 	.word	0x0001613c
    5144:	40048000 	.word	0x40048000

00005148 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5148:	b084      	sub	sp, #16
    514a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    514c:	4b0a      	ldr	r3, [pc, #40]	; (5178 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    514e:	795b      	ldrb	r3, [r3, #5]
    5150:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    5152:	4b0a      	ldr	r3, [pc, #40]	; (517c <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    5154:	6a1b      	ldr	r3, [r3, #32]
    5156:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    5158:	9b02      	ldr	r3, [sp, #8]
    515a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    515e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    5160:	9b03      	ldr	r3, [sp, #12]
    5162:	061b      	lsls	r3, r3, #24
    5164:	9a02      	ldr	r2, [sp, #8]
    5166:	4313      	orrs	r3, r2
    5168:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    516a:	4a04      	ldr	r2, [pc, #16]	; (517c <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    516c:	9b02      	ldr	r3, [sp, #8]
    516e:	6213      	str	r3, [r2, #32]
}
    5170:	bf00      	nop
    5172:	b004      	add	sp, #16
    5174:	4770      	bx	lr
    5176:	bf00      	nop
    5178:	000160dc 	.word	0x000160dc
    517c:	40064000 	.word	0x40064000

00005180 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5180:	b084      	sub	sp, #16
    5182:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5184:	9b01      	ldr	r3, [sp, #4]
    5186:	685b      	ldr	r3, [r3, #4]
    5188:	4a0a      	ldr	r2, [pc, #40]	; (51b4 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    518a:	5cd3      	ldrb	r3, [r2, r3]
    518c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    518e:	4b0a      	ldr	r3, [pc, #40]	; (51b8 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    5190:	6a1b      	ldr	r3, [r3, #32]
    5192:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    5194:	9b02      	ldr	r3, [sp, #8]
    5196:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    519a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    519c:	9b03      	ldr	r3, [sp, #12]
    519e:	061b      	lsls	r3, r3, #24
    51a0:	9a02      	ldr	r2, [sp, #8]
    51a2:	4313      	orrs	r3, r2
    51a4:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    51a6:	4a04      	ldr	r2, [pc, #16]	; (51b8 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    51a8:	9b02      	ldr	r3, [sp, #8]
    51aa:	6213      	str	r3, [r2, #32]
}
    51ac:	bf00      	nop
    51ae:	b004      	add	sp, #16
    51b0:	4770      	bx	lr
    51b2:	bf00      	nop
    51b4:	000160dc 	.word	0x000160dc
    51b8:	40064000 	.word	0x40064000

000051bc <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    51bc:	b086      	sub	sp, #24
    51be:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    51c0:	4b20      	ldr	r3, [pc, #128]	; (5244 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    51c2:	795b      	ldrb	r3, [r3, #5]
    51c4:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    51c6:	9b01      	ldr	r3, [sp, #4]
    51c8:	681a      	ldr	r2, [r3, #0]
    51ca:	491f      	ldr	r1, [pc, #124]	; (5248 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    51cc:	4613      	mov	r3, r2
    51ce:	00db      	lsls	r3, r3, #3
    51d0:	4413      	add	r3, r2
    51d2:	440b      	add	r3, r1
    51d4:	781b      	ldrb	r3, [r3, #0]
    51d6:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    51d8:	4b1c      	ldr	r3, [pc, #112]	; (524c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    51da:	68db      	ldr	r3, [r3, #12]
    51dc:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    51de:	9b03      	ldr	r3, [sp, #12]
    51e0:	2b03      	cmp	r3, #3
    51e2:	d813      	bhi.n	520c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    51e4:	9b03      	ldr	r3, [sp, #12]
    51e6:	005b      	lsls	r3, r3, #1
    51e8:	3318      	adds	r3, #24
    51ea:	2203      	movs	r2, #3
    51ec:	fa02 f303 	lsl.w	r3, r2, r3
    51f0:	43db      	mvns	r3, r3
    51f2:	9a05      	ldr	r2, [sp, #20]
    51f4:	4013      	ands	r3, r2
    51f6:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    51f8:	9b03      	ldr	r3, [sp, #12]
    51fa:	005b      	lsls	r3, r3, #1
    51fc:	3318      	adds	r3, #24
    51fe:	9a04      	ldr	r2, [sp, #16]
    5200:	fa02 f303 	lsl.w	r3, r2, r3
    5204:	9a05      	ldr	r2, [sp, #20]
    5206:	4313      	orrs	r3, r2
    5208:	9305      	str	r3, [sp, #20]
    520a:	e014      	b.n	5236 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    520c:	9b03      	ldr	r3, [sp, #12]
    520e:	3b04      	subs	r3, #4
    5210:	005b      	lsls	r3, r3, #1
    5212:	3310      	adds	r3, #16
    5214:	2203      	movs	r2, #3
    5216:	fa02 f303 	lsl.w	r3, r2, r3
    521a:	43db      	mvns	r3, r3
    521c:	9a05      	ldr	r2, [sp, #20]
    521e:	4013      	ands	r3, r2
    5220:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    5222:	9b03      	ldr	r3, [sp, #12]
    5224:	3b04      	subs	r3, #4
    5226:	005b      	lsls	r3, r3, #1
    5228:	3310      	adds	r3, #16
    522a:	9a04      	ldr	r2, [sp, #16]
    522c:	fa02 f303 	lsl.w	r3, r2, r3
    5230:	9a05      	ldr	r2, [sp, #20]
    5232:	4313      	orrs	r3, r2
    5234:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    5236:	4a05      	ldr	r2, [pc, #20]	; (524c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    5238:	9b05      	ldr	r3, [sp, #20]
    523a:	60d3      	str	r3, [r2, #12]
}
    523c:	bf00      	nop
    523e:	b006      	add	sp, #24
    5240:	4770      	bx	lr
    5242:	bf00      	nop
    5244:	00016084 	.word	0x00016084
    5248:	00015d74 	.word	0x00015d74
    524c:	40048000 	.word	0x40048000

00005250 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5250:	b086      	sub	sp, #24
    5252:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5254:	9b01      	ldr	r3, [sp, #4]
    5256:	685b      	ldr	r3, [r3, #4]
    5258:	4a20      	ldr	r2, [pc, #128]	; (52dc <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    525a:	5cd3      	ldrb	r3, [r2, r3]
    525c:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    525e:	9b01      	ldr	r3, [sp, #4]
    5260:	681a      	ldr	r2, [r3, #0]
    5262:	491f      	ldr	r1, [pc, #124]	; (52e0 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    5264:	4613      	mov	r3, r2
    5266:	00db      	lsls	r3, r3, #3
    5268:	4413      	add	r3, r2
    526a:	440b      	add	r3, r1
    526c:	781b      	ldrb	r3, [r3, #0]
    526e:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    5270:	4b1c      	ldr	r3, [pc, #112]	; (52e4 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    5272:	68db      	ldr	r3, [r3, #12]
    5274:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    5276:	9b03      	ldr	r3, [sp, #12]
    5278:	2b03      	cmp	r3, #3
    527a:	d813      	bhi.n	52a4 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    527c:	9b03      	ldr	r3, [sp, #12]
    527e:	005b      	lsls	r3, r3, #1
    5280:	3318      	adds	r3, #24
    5282:	2203      	movs	r2, #3
    5284:	fa02 f303 	lsl.w	r3, r2, r3
    5288:	43db      	mvns	r3, r3
    528a:	9a05      	ldr	r2, [sp, #20]
    528c:	4013      	ands	r3, r2
    528e:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    5290:	9b03      	ldr	r3, [sp, #12]
    5292:	005b      	lsls	r3, r3, #1
    5294:	3318      	adds	r3, #24
    5296:	9a04      	ldr	r2, [sp, #16]
    5298:	fa02 f303 	lsl.w	r3, r2, r3
    529c:	9a05      	ldr	r2, [sp, #20]
    529e:	4313      	orrs	r3, r2
    52a0:	9305      	str	r3, [sp, #20]
    52a2:	e014      	b.n	52ce <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    52a4:	9b03      	ldr	r3, [sp, #12]
    52a6:	3b04      	subs	r3, #4
    52a8:	005b      	lsls	r3, r3, #1
    52aa:	3310      	adds	r3, #16
    52ac:	2203      	movs	r2, #3
    52ae:	fa02 f303 	lsl.w	r3, r2, r3
    52b2:	43db      	mvns	r3, r3
    52b4:	9a05      	ldr	r2, [sp, #20]
    52b6:	4013      	ands	r3, r2
    52b8:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    52ba:	9b03      	ldr	r3, [sp, #12]
    52bc:	3b04      	subs	r3, #4
    52be:	005b      	lsls	r3, r3, #1
    52c0:	3310      	adds	r3, #16
    52c2:	9a04      	ldr	r2, [sp, #16]
    52c4:	fa02 f303 	lsl.w	r3, r2, r3
    52c8:	9a05      	ldr	r2, [sp, #20]
    52ca:	4313      	orrs	r3, r2
    52cc:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    52ce:	4a05      	ldr	r2, [pc, #20]	; (52e4 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    52d0:	9b05      	ldr	r3, [sp, #20]
    52d2:	60d3      	str	r3, [r2, #12]
}
    52d4:	bf00      	nop
    52d6:	b006      	add	sp, #24
    52d8:	4770      	bx	lr
    52da:	bf00      	nop
    52dc:	00016084 	.word	0x00016084
    52e0:	00015d74 	.word	0x00015d74
    52e4:	40048000 	.word	0x40048000

000052e8 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    52e8:	b084      	sub	sp, #16
    52ea:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    52ec:	4b06      	ldr	r3, [pc, #24]	; (5308 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    52ee:	685b      	ldr	r3, [r3, #4]
    52f0:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    52f2:	9b03      	ldr	r3, [sp, #12]
    52f4:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    52f8:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    52fa:	4a03      	ldr	r2, [pc, #12]	; (5308 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    52fc:	9b03      	ldr	r3, [sp, #12]
    52fe:	6053      	str	r3, [r2, #4]
}
    5300:	bf00      	nop
    5302:	b004      	add	sp, #16
    5304:	4770      	bx	lr
    5306:	bf00      	nop
    5308:	40048000 	.word	0x40048000

0000530c <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    530c:	b084      	sub	sp, #16
    530e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5310:	9b01      	ldr	r3, [sp, #4]
    5312:	685b      	ldr	r3, [r3, #4]
    5314:	4a0a      	ldr	r2, [pc, #40]	; (5340 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    5316:	5cd3      	ldrb	r3, [r2, r3]
    5318:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    531a:	4b0a      	ldr	r3, [pc, #40]	; (5344 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    531c:	685b      	ldr	r3, [r3, #4]
    531e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    5320:	9b02      	ldr	r3, [sp, #8]
    5322:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    5326:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    5328:	9b03      	ldr	r3, [sp, #12]
    532a:	011b      	lsls	r3, r3, #4
    532c:	9a02      	ldr	r2, [sp, #8]
    532e:	4313      	orrs	r3, r2
    5330:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    5332:	4a04      	ldr	r2, [pc, #16]	; (5344 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    5334:	9b02      	ldr	r3, [sp, #8]
    5336:	6053      	str	r3, [r2, #4]
}
    5338:	bf00      	nop
    533a:	b004      	add	sp, #16
    533c:	4770      	bx	lr
    533e:	bf00      	nop
    5340:	00016084 	.word	0x00016084
    5344:	40048000 	.word	0x40048000

00005348 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5348:	b084      	sub	sp, #16
    534a:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    534c:	9b01      	ldr	r3, [sp, #4]
    534e:	681a      	ldr	r2, [r3, #0]
    5350:	490f      	ldr	r1, [pc, #60]	; (5390 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    5352:	4613      	mov	r3, r2
    5354:	00db      	lsls	r3, r3, #3
    5356:	4413      	add	r3, r2
    5358:	440b      	add	r3, r1
    535a:	3304      	adds	r3, #4
    535c:	781b      	ldrb	r3, [r3, #0]
    535e:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    5360:	4a0c      	ldr	r2, [pc, #48]	; (5394 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    5362:	9b03      	ldr	r3, [sp, #12]
    5364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5368:	490a      	ldr	r1, [pc, #40]	; (5394 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    536a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    536e:	9b03      	ldr	r3, [sp, #12]
    5370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    5374:	4a07      	ldr	r2, [pc, #28]	; (5394 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    5376:	9b03      	ldr	r3, [sp, #12]
    5378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    537c:	4905      	ldr	r1, [pc, #20]	; (5394 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    537e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    5382:	9b03      	ldr	r3, [sp, #12]
    5384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5388:	bf00      	nop
    538a:	b004      	add	sp, #16
    538c:	4770      	bx	lr
    538e:	bf00      	nop
    5390:	00015d74 	.word	0x00015d74
    5394:	40065000 	.word	0x40065000

00005398 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5398:	b086      	sub	sp, #24
    539a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    539c:	9b01      	ldr	r3, [sp, #4]
    539e:	681a      	ldr	r2, [r3, #0]
    53a0:	4912      	ldr	r1, [pc, #72]	; (53ec <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    53a2:	4613      	mov	r3, r2
    53a4:	00db      	lsls	r3, r3, #3
    53a6:	4413      	add	r3, r2
    53a8:	440b      	add	r3, r1
    53aa:	3304      	adds	r3, #4
    53ac:	781b      	ldrb	r3, [r3, #0]
    53ae:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    53b0:	9b01      	ldr	r3, [sp, #4]
    53b2:	685b      	ldr	r3, [r3, #4]
    53b4:	4a0e      	ldr	r2, [pc, #56]	; (53f0 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    53b6:	5cd3      	ldrb	r3, [r2, r3]
    53b8:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    53ba:	4a0e      	ldr	r2, [pc, #56]	; (53f4 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    53bc:	9b05      	ldr	r3, [sp, #20]
    53be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    53c2:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    53c4:	9b03      	ldr	r3, [sp, #12]
    53c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    53ca:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    53cc:	9b04      	ldr	r3, [sp, #16]
    53ce:	061b      	lsls	r3, r3, #24
    53d0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    53d4:	9a03      	ldr	r2, [sp, #12]
    53d6:	4313      	orrs	r3, r2
    53d8:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    53da:	4906      	ldr	r1, [pc, #24]	; (53f4 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    53dc:	9b05      	ldr	r3, [sp, #20]
    53de:	9a03      	ldr	r2, [sp, #12]
    53e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    53e4:	bf00      	nop
    53e6:	b006      	add	sp, #24
    53e8:	4770      	bx	lr
    53ea:	bf00      	nop
    53ec:	00015d74 	.word	0x00015d74
    53f0:	0001610c 	.word	0x0001610c
    53f4:	40065000 	.word	0x40065000

000053f8 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    53f8:	b084      	sub	sp, #16
    53fa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    53fc:	4b0b      	ldr	r3, [pc, #44]	; (542c <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    53fe:	7f1b      	ldrb	r3, [r3, #28]
    5400:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    5402:	4b0b      	ldr	r3, [pc, #44]	; (5430 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    5404:	685b      	ldr	r3, [r3, #4]
    5406:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    5408:	9b02      	ldr	r3, [sp, #8]
    540a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    540e:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    5410:	9b03      	ldr	r3, [sp, #12]
    5412:	031b      	lsls	r3, r3, #12
    5414:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    5418:	9a02      	ldr	r2, [sp, #8]
    541a:	4313      	orrs	r3, r2
    541c:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    541e:	4a04      	ldr	r2, [pc, #16]	; (5430 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    5420:	9b02      	ldr	r3, [sp, #8]
    5422:	6053      	str	r3, [r2, #4]
}
    5424:	bf00      	nop
    5426:	b004      	add	sp, #16
    5428:	4770      	bx	lr
    542a:	bf00      	nop
    542c:	00016084 	.word	0x00016084
    5430:	40048000 	.word	0x40048000

00005434 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5434:	b084      	sub	sp, #16
    5436:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5438:	9b01      	ldr	r3, [sp, #4]
    543a:	685b      	ldr	r3, [r3, #4]
    543c:	4a0b      	ldr	r2, [pc, #44]	; (546c <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    543e:	5cd3      	ldrb	r3, [r2, r3]
    5440:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    5442:	4b0b      	ldr	r3, [pc, #44]	; (5470 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    5444:	685b      	ldr	r3, [r3, #4]
    5446:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    5448:	9b02      	ldr	r3, [sp, #8]
    544a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    544e:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    5450:	9b03      	ldr	r3, [sp, #12]
    5452:	031b      	lsls	r3, r3, #12
    5454:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    5458:	9a02      	ldr	r2, [sp, #8]
    545a:	4313      	orrs	r3, r2
    545c:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    545e:	4a04      	ldr	r2, [pc, #16]	; (5470 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    5460:	9b02      	ldr	r3, [sp, #8]
    5462:	6053      	str	r3, [r2, #4]
}
    5464:	bf00      	nop
    5466:	b004      	add	sp, #16
    5468:	4770      	bx	lr
    546a:	bf00      	nop
    546c:	00016084 	.word	0x00016084
    5470:	40048000 	.word	0x40048000

00005474 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    5474:	b500      	push	{lr}
    5476:	b085      	sub	sp, #20
    5478:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    547a:	2300      	movs	r3, #0
    547c:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    5480:	9b01      	ldr	r3, [sp, #4]
    5482:	2b00      	cmp	r3, #0
    5484:	d037      	beq.n	54f6 <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    5486:	2300      	movs	r3, #0
    5488:	9303      	str	r3, [sp, #12]
    548a:	e02b      	b.n	54e4 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    548c:	4b29      	ldr	r3, [pc, #164]	; (5534 <DisableSafeClock+0xc0>)
    548e:	6819      	ldr	r1, [r3, #0]
    5490:	9a03      	ldr	r2, [sp, #12]
    5492:	4613      	mov	r3, r2
    5494:	005b      	lsls	r3, r3, #1
    5496:	4413      	add	r3, r2
    5498:	009b      	lsls	r3, r3, #2
    549a:	440b      	add	r3, r1
    549c:	3314      	adds	r3, #20
    549e:	681b      	ldr	r3, [r3, #0]
    54a0:	2b05      	cmp	r3, #5
    54a2:	d11c      	bne.n	54de <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    54a4:	2301      	movs	r3, #1
    54a6:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    54aa:	4b22      	ldr	r3, [pc, #136]	; (5534 <DisableSafeClock+0xc0>)
    54ac:	6819      	ldr	r1, [r3, #0]
    54ae:	9a03      	ldr	r2, [sp, #12]
    54b0:	4613      	mov	r3, r2
    54b2:	005b      	lsls	r3, r3, #1
    54b4:	4413      	add	r3, r2
    54b6:	009b      	lsls	r3, r3, #2
    54b8:	440b      	add	r3, r1
    54ba:	3318      	adds	r3, #24
    54bc:	881b      	ldrh	r3, [r3, #0]
    54be:	2b00      	cmp	r3, #0
    54c0:	d118      	bne.n	54f4 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    54c2:	4b1d      	ldr	r3, [pc, #116]	; (5538 <DisableSafeClock+0xc4>)
    54c4:	791b      	ldrb	r3, [r3, #4]
    54c6:	4619      	mov	r1, r3
    54c8:	4a1c      	ldr	r2, [pc, #112]	; (553c <DisableSafeClock+0xc8>)
    54ca:	460b      	mov	r3, r1
    54cc:	005b      	lsls	r3, r3, #1
    54ce:	440b      	add	r3, r1
    54d0:	009b      	lsls	r3, r3, #2
    54d2:	4413      	add	r3, r2
    54d4:	3308      	adds	r3, #8
    54d6:	681b      	ldr	r3, [r3, #0]
    54d8:	2005      	movs	r0, #5
    54da:	4798      	blx	r3
                }
                break;
    54dc:	e00a      	b.n	54f4 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    54de:	9b03      	ldr	r3, [sp, #12]
    54e0:	3301      	adds	r3, #1
    54e2:	9303      	str	r3, [sp, #12]
    54e4:	4b13      	ldr	r3, [pc, #76]	; (5534 <DisableSafeClock+0xc0>)
    54e6:	681b      	ldr	r3, [r3, #0]
    54e8:	7a1b      	ldrb	r3, [r3, #8]
    54ea:	461a      	mov	r2, r3
    54ec:	9b03      	ldr	r3, [sp, #12]
    54ee:	4293      	cmp	r3, r2
    54f0:	d3cc      	bcc.n	548c <DisableSafeClock+0x18>
    54f2:	e000      	b.n	54f6 <DisableSafeClock+0x82>
                break;
    54f4:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    54f6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    54fa:	f083 0301 	eor.w	r3, r3, #1
    54fe:	b2db      	uxtb	r3, r3
    5500:	2b00      	cmp	r3, #0
    5502:	d013      	beq.n	552c <DisableSafeClock+0xb8>
    5504:	4b0e      	ldr	r3, [pc, #56]	; (5540 <DisableSafeClock+0xcc>)
    5506:	781b      	ldrb	r3, [r3, #0]
    5508:	f083 0301 	eor.w	r3, r3, #1
    550c:	b2db      	uxtb	r3, r3
    550e:	2b00      	cmp	r3, #0
    5510:	d00c      	beq.n	552c <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    5512:	4b09      	ldr	r3, [pc, #36]	; (5538 <DisableSafeClock+0xc4>)
    5514:	791b      	ldrb	r3, [r3, #4]
    5516:	4619      	mov	r1, r3
    5518:	4a08      	ldr	r2, [pc, #32]	; (553c <DisableSafeClock+0xc8>)
    551a:	460b      	mov	r3, r1
    551c:	005b      	lsls	r3, r3, #1
    551e:	440b      	add	r3, r1
    5520:	009b      	lsls	r3, r3, #2
    5522:	4413      	add	r3, r2
    5524:	3308      	adds	r3, #8
    5526:	681b      	ldr	r3, [r3, #0]
    5528:	2005      	movs	r0, #5
    552a:	4798      	blx	r3
    }
}
    552c:	bf00      	nop
    552e:	b005      	add	sp, #20
    5530:	f85d fb04 	ldr.w	pc, [sp], #4
    5534:	1fff8bdc 	.word	0x1fff8bdc
    5538:	00015d04 	.word	0x00015d04
    553c:	00016334 	.word	0x00016334
    5540:	1fff8b18 	.word	0x1fff8b18

00005544 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    5544:	4b06      	ldr	r3, [pc, #24]	; (5560 <SetFircToResetValue_TrustedCall+0x1c>)
    5546:	2200      	movs	r2, #0
    5548:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    554c:	4b04      	ldr	r3, [pc, #16]	; (5560 <SetFircToResetValue_TrustedCall+0x1c>)
    554e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    5552:	4a03      	ldr	r2, [pc, #12]	; (5560 <SetFircToResetValue_TrustedCall+0x1c>)
    5554:	f043 0301 	orr.w	r3, r3, #1
    5558:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    555c:	bf00      	nop
    555e:	4770      	bx	lr
    5560:	40064000 	.word	0x40064000

00005564 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    5564:	b084      	sub	sp, #16
    5566:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    5568:	2303      	movs	r3, #3
    556a:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    556c:	2300      	movs	r3, #0
    556e:	9302      	str	r3, [sp, #8]
    5570:	e028      	b.n	55c4 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    5572:	9b01      	ldr	r3, [sp, #4]
    5574:	9a02      	ldr	r2, [sp, #8]
    5576:	320d      	adds	r2, #13
    5578:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    557c:	2b28      	cmp	r3, #40	; 0x28
    557e:	d10b      	bne.n	5598 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    5580:	9a01      	ldr	r2, [sp, #4]
    5582:	9b02      	ldr	r3, [sp, #8]
    5584:	330d      	adds	r3, #13
    5586:	00db      	lsls	r3, r3, #3
    5588:	4413      	add	r3, r2
    558a:	685b      	ldr	r3, [r3, #4]
    558c:	4a2b      	ldr	r2, [pc, #172]	; (563c <SetSimLpoclksRegister_TrustedCall+0xd8>)
    558e:	5cd3      	ldrb	r3, [r2, r3]
    5590:	011b      	lsls	r3, r3, #4
    5592:	9a03      	ldr	r2, [sp, #12]
    5594:	4313      	orrs	r3, r2
    5596:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    5598:	9b01      	ldr	r3, [sp, #4]
    559a:	9a02      	ldr	r2, [sp, #8]
    559c:	320d      	adds	r2, #13
    559e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    55a2:	2b29      	cmp	r3, #41	; 0x29
    55a4:	d10b      	bne.n	55be <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    55a6:	9a01      	ldr	r2, [sp, #4]
    55a8:	9b02      	ldr	r3, [sp, #8]
    55aa:	330d      	adds	r3, #13
    55ac:	00db      	lsls	r3, r3, #3
    55ae:	4413      	add	r3, r2
    55b0:	685b      	ldr	r3, [r3, #4]
    55b2:	4a23      	ldr	r2, [pc, #140]	; (5640 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    55b4:	5cd3      	ldrb	r3, [r2, r3]
    55b6:	009b      	lsls	r3, r3, #2
    55b8:	9a03      	ldr	r2, [sp, #12]
    55ba:	4313      	orrs	r3, r2
    55bc:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    55be:	9b02      	ldr	r3, [sp, #8]
    55c0:	3301      	adds	r3, #1
    55c2:	9302      	str	r3, [sp, #8]
    55c4:	9b01      	ldr	r3, [sp, #4]
    55c6:	7adb      	ldrb	r3, [r3, #11]
    55c8:	461a      	mov	r2, r3
    55ca:	9b02      	ldr	r3, [sp, #8]
    55cc:	4293      	cmp	r3, r2
    55ce:	d3d0      	bcc.n	5572 <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    55d0:	2300      	movs	r3, #0
    55d2:	9302      	str	r3, [sp, #8]
    55d4:	e026      	b.n	5624 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    55d6:	9a01      	ldr	r2, [sp, #4]
    55d8:	9b02      	ldr	r3, [sp, #8]
    55da:	334e      	adds	r3, #78	; 0x4e
    55dc:	00db      	lsls	r3, r3, #3
    55de:	4413      	add	r3, r2
    55e0:	685b      	ldr	r3, [r3, #4]
    55e2:	2b12      	cmp	r3, #18
    55e4:	d109      	bne.n	55fa <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    55e6:	9a01      	ldr	r2, [sp, #4]
    55e8:	9b02      	ldr	r3, [sp, #8]
    55ea:	334e      	adds	r3, #78	; 0x4e
    55ec:	00db      	lsls	r3, r3, #3
    55ee:	4413      	add	r3, r2
    55f0:	891b      	ldrh	r3, [r3, #8]
    55f2:	005b      	lsls	r3, r3, #1
    55f4:	9a03      	ldr	r2, [sp, #12]
    55f6:	4313      	orrs	r3, r2
    55f8:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    55fa:	9a01      	ldr	r2, [sp, #4]
    55fc:	9b02      	ldr	r3, [sp, #8]
    55fe:	334e      	adds	r3, #78	; 0x4e
    5600:	00db      	lsls	r3, r3, #3
    5602:	4413      	add	r3, r2
    5604:	685b      	ldr	r3, [r3, #4]
    5606:	2b13      	cmp	r3, #19
    5608:	d109      	bne.n	561e <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    560a:	9a01      	ldr	r2, [sp, #4]
    560c:	9b02      	ldr	r3, [sp, #8]
    560e:	334e      	adds	r3, #78	; 0x4e
    5610:	00db      	lsls	r3, r3, #3
    5612:	4413      	add	r3, r2
    5614:	891b      	ldrh	r3, [r3, #8]
    5616:	461a      	mov	r2, r3
    5618:	9b03      	ldr	r3, [sp, #12]
    561a:	4313      	orrs	r3, r2
    561c:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    561e:	9b02      	ldr	r3, [sp, #8]
    5620:	3301      	adds	r3, #1
    5622:	9302      	str	r3, [sp, #8]
    5624:	9b01      	ldr	r3, [sp, #4]
    5626:	7c1b      	ldrb	r3, [r3, #16]
    5628:	461a      	mov	r2, r3
    562a:	9b02      	ldr	r3, [sp, #8]
    562c:	4293      	cmp	r3, r2
    562e:	d3d2      	bcc.n	55d6 <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    5630:	4a04      	ldr	r2, [pc, #16]	; (5644 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    5632:	9b03      	ldr	r3, [sp, #12]
    5634:	6113      	str	r3, [r2, #16]
}
    5636:	bf00      	nop
    5638:	b004      	add	sp, #16
    563a:	4770      	bx	lr
    563c:	00016084 	.word	0x00016084
    5640:	0001613c 	.word	0x0001613c
    5644:	40048000 	.word	0x40048000

00005648 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    5648:	b500      	push	{lr}
    564a:	b089      	sub	sp, #36	; 0x24
    564c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    564e:	2300      	movs	r3, #0
    5650:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    5654:	4a21      	ldr	r2, [pc, #132]	; (56dc <Clock_Ip_SpecificPlatformInitClock+0x94>)
    5656:	9b01      	ldr	r3, [sp, #4]
    5658:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    565a:	4b21      	ldr	r3, [pc, #132]	; (56e0 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    565c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    5660:	f003 0301 	and.w	r3, r3, #1
    5664:	2b00      	cmp	r3, #0
    5666:	d12e      	bne.n	56c6 <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    5668:	4b1e      	ldr	r3, [pc, #120]	; (56e4 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    566a:	2200      	movs	r2, #0
    566c:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    566e:	f7ff ff69 	bl	5544 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    5672:	aa03      	add	r2, sp, #12
    5674:	a904      	add	r1, sp, #16
    5676:	a805      	add	r0, sp, #20
    5678:	f24c 3350 	movw	r3, #50000	; 0xc350
    567c:	f7fe f8ae 	bl	37dc <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    5680:	4b17      	ldr	r3, [pc, #92]	; (56e0 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    5682:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    5686:	0e1b      	lsrs	r3, r3, #24
    5688:	f003 0301 	and.w	r3, r3, #1
    568c:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    568e:	9a03      	ldr	r2, [sp, #12]
    5690:	a904      	add	r1, sp, #16
    5692:	ab05      	add	r3, sp, #20
    5694:	4618      	mov	r0, r3
    5696:	f7fe f8bb 	bl	3810 <Clock_Ip_TimeoutExpired>
    569a:	4603      	mov	r3, r0
    569c:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    56a0:	9b06      	ldr	r3, [sp, #24]
    56a2:	2b00      	cmp	r3, #0
    56a4:	d106      	bne.n	56b4 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    56a6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    56aa:	f083 0301 	eor.w	r3, r3, #1
    56ae:	b2db      	uxtb	r3, r3
    56b0:	2b00      	cmp	r3, #0
    56b2:	d1e5      	bne.n	5680 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    56b4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    56b8:	2b00      	cmp	r3, #0
    56ba:	d007      	beq.n	56cc <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    56bc:	2105      	movs	r1, #5
    56be:	2001      	movs	r0, #1
    56c0:	f7fe f87c 	bl	37bc <Clock_Ip_ReportClockErrors>
    56c4:	e002      	b.n	56cc <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    56c6:	4b07      	ldr	r3, [pc, #28]	; (56e4 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    56c8:	2201      	movs	r2, #1
    56ca:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    56cc:	9801      	ldr	r0, [sp, #4]
    56ce:	f7ff ff49 	bl	5564 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    56d2:	bf00      	nop
    56d4:	b009      	add	sp, #36	; 0x24
    56d6:	f85d fb04 	ldr.w	pc, [sp], #4
    56da:	bf00      	nop
    56dc:	1fff8bdc 	.word	0x1fff8bdc
    56e0:	40064000 	.word	0x40064000
    56e4:	1fff8b18 	.word	0x1fff8b18

000056e8 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    56e8:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    56ea:	2300      	movs	r3, #0
    56ec:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    56ee:	4b29      	ldr	r3, [pc, #164]	; (5794 <getFircConfig+0xac>)
    56f0:	681b      	ldr	r3, [r3, #0]
    56f2:	2b00      	cmp	r3, #0
    56f4:	d024      	beq.n	5740 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    56f6:	2300      	movs	r3, #0
    56f8:	9301      	str	r3, [sp, #4]
    56fa:	e01a      	b.n	5732 <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    56fc:	4b25      	ldr	r3, [pc, #148]	; (5794 <getFircConfig+0xac>)
    56fe:	6819      	ldr	r1, [r3, #0]
    5700:	9a01      	ldr	r2, [sp, #4]
    5702:	4613      	mov	r3, r2
    5704:	005b      	lsls	r3, r3, #1
    5706:	4413      	add	r3, r2
    5708:	009b      	lsls	r3, r3, #2
    570a:	440b      	add	r3, r1
    570c:	3314      	adds	r3, #20
    570e:	681b      	ldr	r3, [r3, #0]
    5710:	2b05      	cmp	r3, #5
    5712:	d10b      	bne.n	572c <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    5714:	4b1f      	ldr	r3, [pc, #124]	; (5794 <getFircConfig+0xac>)
    5716:	6819      	ldr	r1, [r3, #0]
    5718:	9a01      	ldr	r2, [sp, #4]
    571a:	4613      	mov	r3, r2
    571c:	005b      	lsls	r3, r3, #1
    571e:	4413      	add	r3, r2
    5720:	009b      	lsls	r3, r3, #2
    5722:	3310      	adds	r3, #16
    5724:	440b      	add	r3, r1
    5726:	3304      	adds	r3, #4
    5728:	9300      	str	r3, [sp, #0]
                break;
    572a:	e009      	b.n	5740 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    572c:	9b01      	ldr	r3, [sp, #4]
    572e:	3301      	adds	r3, #1
    5730:	9301      	str	r3, [sp, #4]
    5732:	4b18      	ldr	r3, [pc, #96]	; (5794 <getFircConfig+0xac>)
    5734:	681b      	ldr	r3, [r3, #0]
    5736:	7a1b      	ldrb	r3, [r3, #8]
    5738:	461a      	mov	r2, r3
    573a:	9b01      	ldr	r3, [sp, #4]
    573c:	4293      	cmp	r3, r2
    573e:	d3dd      	bcc.n	56fc <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5740:	9b00      	ldr	r3, [sp, #0]
    5742:	2b00      	cmp	r3, #0
    5744:	d121      	bne.n	578a <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    5746:	4b14      	ldr	r3, [pc, #80]	; (5798 <getFircConfig+0xb0>)
    5748:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    574a:	4b13      	ldr	r3, [pc, #76]	; (5798 <getFircConfig+0xb0>)
    574c:	2205      	movs	r2, #5
    574e:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    5750:	4b12      	ldr	r3, [pc, #72]	; (579c <getFircConfig+0xb4>)
    5752:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    5756:	b29b      	uxth	r3, r3
    5758:	f003 0301 	and.w	r3, r3, #1
    575c:	b29a      	uxth	r2, r3
    575e:	4b0e      	ldr	r3, [pc, #56]	; (5798 <getFircConfig+0xb0>)
    5760:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    5762:	4b0e      	ldr	r3, [pc, #56]	; (579c <getFircConfig+0xb4>)
    5764:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    5768:	b2db      	uxtb	r3, r3
    576a:	f003 0303 	and.w	r3, r3, #3
    576e:	b2da      	uxtb	r2, r3
    5770:	4b09      	ldr	r3, [pc, #36]	; (5798 <getFircConfig+0xb0>)
    5772:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    5774:	4b09      	ldr	r3, [pc, #36]	; (579c <getFircConfig+0xb4>)
    5776:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    577a:	b2db      	uxtb	r3, r3
    577c:	10db      	asrs	r3, r3, #3
    577e:	b2db      	uxtb	r3, r3
    5780:	f003 0301 	and.w	r3, r3, #1
    5784:	b2da      	uxtb	r2, r3
    5786:	4b04      	ldr	r3, [pc, #16]	; (5798 <getFircConfig+0xb0>)
    5788:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    578a:	9b00      	ldr	r3, [sp, #0]
}
    578c:	4618      	mov	r0, r3
    578e:	b002      	add	sp, #8
    5790:	4770      	bx	lr
    5792:	bf00      	nop
    5794:	1fff8bdc 	.word	0x1fff8bdc
    5798:	1fff8c48 	.word	0x1fff8c48
    579c:	40064000 	.word	0x40064000

000057a0 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    57a0:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    57a2:	2300      	movs	r3, #0
    57a4:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    57a6:	4b20      	ldr	r3, [pc, #128]	; (5828 <getSoscConfig+0x88>)
    57a8:	681b      	ldr	r3, [r3, #0]
    57aa:	2b00      	cmp	r3, #0
    57ac:	d024      	beq.n	57f8 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    57ae:	2300      	movs	r3, #0
    57b0:	9301      	str	r3, [sp, #4]
    57b2:	e01a      	b.n	57ea <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    57b4:	4b1c      	ldr	r3, [pc, #112]	; (5828 <getSoscConfig+0x88>)
    57b6:	6819      	ldr	r1, [r3, #0]
    57b8:	9a01      	ldr	r2, [sp, #4]
    57ba:	4613      	mov	r3, r2
    57bc:	009b      	lsls	r3, r3, #2
    57be:	4413      	add	r3, r2
    57c0:	009b      	lsls	r3, r3, #2
    57c2:	440b      	add	r3, r1
    57c4:	332c      	adds	r3, #44	; 0x2c
    57c6:	681b      	ldr	r3, [r3, #0]
    57c8:	2b08      	cmp	r3, #8
    57ca:	d10b      	bne.n	57e4 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    57cc:	4b16      	ldr	r3, [pc, #88]	; (5828 <getSoscConfig+0x88>)
    57ce:	6819      	ldr	r1, [r3, #0]
    57d0:	9a01      	ldr	r2, [sp, #4]
    57d2:	4613      	mov	r3, r2
    57d4:	009b      	lsls	r3, r3, #2
    57d6:	4413      	add	r3, r2
    57d8:	009b      	lsls	r3, r3, #2
    57da:	3328      	adds	r3, #40	; 0x28
    57dc:	440b      	add	r3, r1
    57de:	3304      	adds	r3, #4
    57e0:	9300      	str	r3, [sp, #0]
                break;
    57e2:	e009      	b.n	57f8 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    57e4:	9b01      	ldr	r3, [sp, #4]
    57e6:	3301      	adds	r3, #1
    57e8:	9301      	str	r3, [sp, #4]
    57ea:	4b0f      	ldr	r3, [pc, #60]	; (5828 <getSoscConfig+0x88>)
    57ec:	681b      	ldr	r3, [r3, #0]
    57ee:	7a5b      	ldrb	r3, [r3, #9]
    57f0:	461a      	mov	r2, r3
    57f2:	9b01      	ldr	r3, [sp, #4]
    57f4:	4293      	cmp	r3, r2
    57f6:	d3dd      	bcc.n	57b4 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    57f8:	9b00      	ldr	r3, [sp, #0]
    57fa:	2b00      	cmp	r3, #0
    57fc:	d110      	bne.n	5820 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    57fe:	4b0b      	ldr	r3, [pc, #44]	; (582c <getSoscConfig+0x8c>)
    5800:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    5802:	4b0a      	ldr	r3, [pc, #40]	; (582c <getSoscConfig+0x8c>)
    5804:	2208      	movs	r2, #8
    5806:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    5808:	4b09      	ldr	r3, [pc, #36]	; (5830 <getSoscConfig+0x90>)
    580a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    580e:	b29b      	uxth	r3, r3
    5810:	f003 0301 	and.w	r3, r3, #1
    5814:	b29a      	uxth	r2, r3
    5816:	4b05      	ldr	r3, [pc, #20]	; (582c <getSoscConfig+0x8c>)
    5818:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    581a:	4b04      	ldr	r3, [pc, #16]	; (582c <getSoscConfig+0x8c>)
    581c:	4a05      	ldr	r2, [pc, #20]	; (5834 <getSoscConfig+0x94>)
    581e:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    5820:	9b00      	ldr	r3, [sp, #0]
}
    5822:	4618      	mov	r0, r3
    5824:	b002      	add	sp, #8
    5826:	4770      	bx	lr
    5828:	1fff8bdc 	.word	0x1fff8bdc
    582c:	1fff8c54 	.word	0x1fff8c54
    5830:	40064000 	.word	0x40064000
    5834:	02625a00 	.word	0x02625a00

00005838 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    5838:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    583a:	2300      	movs	r3, #0
    583c:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    583e:	4b28      	ldr	r3, [pc, #160]	; (58e0 <getSpllConfig+0xa8>)
    5840:	681b      	ldr	r3, [r3, #0]
    5842:	2b00      	cmp	r3, #0
    5844:	d023      	beq.n	588e <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    5846:	2300      	movs	r3, #0
    5848:	9301      	str	r3, [sp, #4]
    584a:	e019      	b.n	5880 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    584c:	4b24      	ldr	r3, [pc, #144]	; (58e0 <getSpllConfig+0xa8>)
    584e:	6819      	ldr	r1, [r3, #0]
    5850:	9a01      	ldr	r2, [sp, #4]
    5852:	4613      	mov	r3, r2
    5854:	009b      	lsls	r3, r3, #2
    5856:	4413      	add	r3, r2
    5858:	00db      	lsls	r3, r3, #3
    585a:	440b      	add	r3, r1
    585c:	3340      	adds	r3, #64	; 0x40
    585e:	681b      	ldr	r3, [r3, #0]
    5860:	2b09      	cmp	r3, #9
    5862:	d10a      	bne.n	587a <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    5864:	4b1e      	ldr	r3, [pc, #120]	; (58e0 <getSpllConfig+0xa8>)
    5866:	6819      	ldr	r1, [r3, #0]
    5868:	9a01      	ldr	r2, [sp, #4]
    586a:	4613      	mov	r3, r2
    586c:	009b      	lsls	r3, r3, #2
    586e:	4413      	add	r3, r2
    5870:	00db      	lsls	r3, r3, #3
    5872:	3340      	adds	r3, #64	; 0x40
    5874:	440b      	add	r3, r1
    5876:	9300      	str	r3, [sp, #0]
                break;
    5878:	e009      	b.n	588e <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    587a:	9b01      	ldr	r3, [sp, #4]
    587c:	3301      	adds	r3, #1
    587e:	9301      	str	r3, [sp, #4]
    5880:	4b17      	ldr	r3, [pc, #92]	; (58e0 <getSpllConfig+0xa8>)
    5882:	681b      	ldr	r3, [r3, #0]
    5884:	7a9b      	ldrb	r3, [r3, #10]
    5886:	461a      	mov	r2, r3
    5888:	9b01      	ldr	r3, [sp, #4]
    588a:	4293      	cmp	r3, r2
    588c:	d3de      	bcc.n	584c <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    588e:	9b00      	ldr	r3, [sp, #0]
    5890:	2b00      	cmp	r3, #0
    5892:	d121      	bne.n	58d8 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    5894:	4b13      	ldr	r3, [pc, #76]	; (58e4 <getSpllConfig+0xac>)
    5896:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    5898:	4b12      	ldr	r3, [pc, #72]	; (58e4 <getSpllConfig+0xac>)
    589a:	2209      	movs	r2, #9
    589c:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    589e:	4b12      	ldr	r3, [pc, #72]	; (58e8 <getSpllConfig+0xb0>)
    58a0:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    58a4:	b29b      	uxth	r3, r3
    58a6:	f003 0301 	and.w	r3, r3, #1
    58aa:	b29a      	uxth	r2, r3
    58ac:	4b0d      	ldr	r3, [pc, #52]	; (58e4 <getSpllConfig+0xac>)
    58ae:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    58b0:	4b0d      	ldr	r3, [pc, #52]	; (58e8 <getSpllConfig+0xb0>)
    58b2:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    58b6:	0a1b      	lsrs	r3, r3, #8
    58b8:	b2db      	uxtb	r3, r3
    58ba:	f003 0307 	and.w	r3, r3, #7
    58be:	b2da      	uxtb	r2, r3
    58c0:	4b08      	ldr	r3, [pc, #32]	; (58e4 <getSpllConfig+0xac>)
    58c2:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    58c4:	4b08      	ldr	r3, [pc, #32]	; (58e8 <getSpllConfig+0xb0>)
    58c6:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    58ca:	0c1b      	lsrs	r3, r3, #16
    58cc:	b2db      	uxtb	r3, r3
    58ce:	f003 031f 	and.w	r3, r3, #31
    58d2:	b2da      	uxtb	r2, r3
    58d4:	4b03      	ldr	r3, [pc, #12]	; (58e4 <getSpllConfig+0xac>)
    58d6:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    58d8:	9b00      	ldr	r3, [sp, #0]
}
    58da:	4618      	mov	r0, r3
    58dc:	b002      	add	sp, #8
    58de:	4770      	bx	lr
    58e0:	1fff8bdc 	.word	0x1fff8bdc
    58e4:	1fff8c68 	.word	0x1fff8c68
    58e8:	40064000 	.word	0x40064000

000058ec <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    58ec:	b086      	sub	sp, #24
    58ee:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    58f0:	2300      	movs	r3, #0
    58f2:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    58f4:	9b01      	ldr	r3, [sp, #4]
    58f6:	2b1b      	cmp	r3, #27
    58f8:	d00f      	beq.n	591a <getSelectorConfig+0x2e>
    58fa:	9b01      	ldr	r3, [sp, #4]
    58fc:	2b1b      	cmp	r3, #27
    58fe:	d80f      	bhi.n	5920 <getSelectorConfig+0x34>
    5900:	9b01      	ldr	r3, [sp, #4]
    5902:	2b19      	cmp	r3, #25
    5904:	d003      	beq.n	590e <getSelectorConfig+0x22>
    5906:	9b01      	ldr	r3, [sp, #4]
    5908:	2b1a      	cmp	r3, #26
    590a:	d003      	beq.n	5914 <getSelectorConfig+0x28>
    590c:	e008      	b.n	5920 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    590e:	2300      	movs	r3, #0
    5910:	9304      	str	r3, [sp, #16]
            break;
    5912:	e008      	b.n	5926 <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    5914:	2301      	movs	r3, #1
    5916:	9304      	str	r3, [sp, #16]
            break;
    5918:	e005      	b.n	5926 <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    591a:	2302      	movs	r3, #2
    591c:	9304      	str	r3, [sp, #16]
            break;
    591e:	e002      	b.n	5926 <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    5920:	2300      	movs	r3, #0
    5922:	9304      	str	r3, [sp, #16]
            break;
    5924:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5926:	4b36      	ldr	r3, [pc, #216]	; (5a00 <getSelectorConfig+0x114>)
    5928:	681b      	ldr	r3, [r3, #0]
    592a:	2b00      	cmp	r3, #0
    592c:	d01d      	beq.n	596a <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    592e:	2300      	movs	r3, #0
    5930:	9303      	str	r3, [sp, #12]
    5932:	e013      	b.n	595c <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    5934:	4b32      	ldr	r3, [pc, #200]	; (5a00 <getSelectorConfig+0x114>)
    5936:	681b      	ldr	r3, [r3, #0]
    5938:	9a03      	ldr	r2, [sp, #12]
    593a:	320d      	adds	r2, #13
    593c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    5940:	9a01      	ldr	r2, [sp, #4]
    5942:	429a      	cmp	r2, r3
    5944:	d107      	bne.n	5956 <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    5946:	4b2e      	ldr	r3, [pc, #184]	; (5a00 <getSelectorConfig+0x114>)
    5948:	681a      	ldr	r2, [r3, #0]
    594a:	9b03      	ldr	r3, [sp, #12]
    594c:	330d      	adds	r3, #13
    594e:	00db      	lsls	r3, r3, #3
    5950:	4413      	add	r3, r2
    5952:	9305      	str	r3, [sp, #20]
                break;
    5954:	e009      	b.n	596a <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    5956:	9b03      	ldr	r3, [sp, #12]
    5958:	3301      	adds	r3, #1
    595a:	9303      	str	r3, [sp, #12]
    595c:	4b28      	ldr	r3, [pc, #160]	; (5a00 <getSelectorConfig+0x114>)
    595e:	681b      	ldr	r3, [r3, #0]
    5960:	7adb      	ldrb	r3, [r3, #11]
    5962:	461a      	mov	r2, r3
    5964:	9b03      	ldr	r3, [sp, #12]
    5966:	4293      	cmp	r3, r2
    5968:	d3e4      	bcc.n	5934 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    596a:	9b05      	ldr	r3, [sp, #20]
    596c:	2b00      	cmp	r3, #0
    596e:	d140      	bne.n	59f2 <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    5970:	9b04      	ldr	r3, [sp, #16]
    5972:	00db      	lsls	r3, r3, #3
    5974:	4a23      	ldr	r2, [pc, #140]	; (5a04 <getSelectorConfig+0x118>)
    5976:	4413      	add	r3, r2
    5978:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    597a:	4922      	ldr	r1, [pc, #136]	; (5a04 <getSelectorConfig+0x118>)
    597c:	9b04      	ldr	r3, [sp, #16]
    597e:	9a01      	ldr	r2, [sp, #4]
    5980:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    5984:	9b01      	ldr	r3, [sp, #4]
    5986:	2b1b      	cmp	r3, #27
    5988:	d025      	beq.n	59d6 <getSelectorConfig+0xea>
    598a:	9b01      	ldr	r3, [sp, #4]
    598c:	2b1b      	cmp	r3, #27
    598e:	d832      	bhi.n	59f6 <getSelectorConfig+0x10a>
    5990:	9b01      	ldr	r3, [sp, #4]
    5992:	2b19      	cmp	r3, #25
    5994:	d003      	beq.n	599e <getSelectorConfig+0xb2>
    5996:	9b01      	ldr	r3, [sp, #4]
    5998:	2b1a      	cmp	r3, #26
    599a:	d00e      	beq.n	59ba <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    599c:	e02b      	b.n	59f6 <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    599e:	4b1a      	ldr	r3, [pc, #104]	; (5a08 <getSelectorConfig+0x11c>)
    59a0:	695b      	ldr	r3, [r3, #20]
    59a2:	0e1b      	lsrs	r3, r3, #24
    59a4:	f003 030f 	and.w	r3, r3, #15
    59a8:	4a18      	ldr	r2, [pc, #96]	; (5a0c <getSelectorConfig+0x120>)
    59aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    59ae:	4915      	ldr	r1, [pc, #84]	; (5a04 <getSelectorConfig+0x118>)
    59b0:	9b04      	ldr	r3, [sp, #16]
    59b2:	00db      	lsls	r3, r3, #3
    59b4:	440b      	add	r3, r1
    59b6:	605a      	str	r2, [r3, #4]
                break;
    59b8:	e01e      	b.n	59f8 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    59ba:	4b13      	ldr	r3, [pc, #76]	; (5a08 <getSelectorConfig+0x11c>)
    59bc:	699b      	ldr	r3, [r3, #24]
    59be:	0e1b      	lsrs	r3, r3, #24
    59c0:	f003 030f 	and.w	r3, r3, #15
    59c4:	4a11      	ldr	r2, [pc, #68]	; (5a0c <getSelectorConfig+0x120>)
    59c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    59ca:	490e      	ldr	r1, [pc, #56]	; (5a04 <getSelectorConfig+0x118>)
    59cc:	9b04      	ldr	r3, [sp, #16]
    59ce:	00db      	lsls	r3, r3, #3
    59d0:	440b      	add	r3, r1
    59d2:	605a      	str	r2, [r3, #4]
                break;
    59d4:	e010      	b.n	59f8 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    59d6:	4b0c      	ldr	r3, [pc, #48]	; (5a08 <getSelectorConfig+0x11c>)
    59d8:	69db      	ldr	r3, [r3, #28]
    59da:	0e1b      	lsrs	r3, r3, #24
    59dc:	f003 030f 	and.w	r3, r3, #15
    59e0:	4a0a      	ldr	r2, [pc, #40]	; (5a0c <getSelectorConfig+0x120>)
    59e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    59e6:	4907      	ldr	r1, [pc, #28]	; (5a04 <getSelectorConfig+0x118>)
    59e8:	9b04      	ldr	r3, [sp, #16]
    59ea:	00db      	lsls	r3, r3, #3
    59ec:	440b      	add	r3, r1
    59ee:	605a      	str	r2, [r3, #4]
                break;
    59f0:	e002      	b.n	59f8 <getSelectorConfig+0x10c>
        }
    }
    59f2:	bf00      	nop
    59f4:	e000      	b.n	59f8 <getSelectorConfig+0x10c>
                break;
    59f6:	bf00      	nop

    return ReturnValue;
    59f8:	9b05      	ldr	r3, [sp, #20]
}
    59fa:	4618      	mov	r0, r3
    59fc:	b006      	add	sp, #24
    59fe:	4770      	bx	lr
    5a00:	1fff8bdc 	.word	0x1fff8bdc
    5a04:	1fff8c90 	.word	0x1fff8c90
    5a08:	40064000 	.word	0x40064000
    5a0c:	00016404 	.word	0x00016404

00005a10 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    5a10:	b086      	sub	sp, #24
    5a12:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5a14:	2300      	movs	r3, #0
    5a16:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5a18:	2300      	movs	r3, #0
    5a1a:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5a1c:	9b01      	ldr	r3, [sp, #4]
    5a1e:	2b1f      	cmp	r3, #31
    5a20:	d00f      	beq.n	5a42 <getCoreDividerConfig+0x32>
    5a22:	9b01      	ldr	r3, [sp, #4]
    5a24:	2b1f      	cmp	r3, #31
    5a26:	d80f      	bhi.n	5a48 <getCoreDividerConfig+0x38>
    5a28:	9b01      	ldr	r3, [sp, #4]
    5a2a:	2b1d      	cmp	r3, #29
    5a2c:	d003      	beq.n	5a36 <getCoreDividerConfig+0x26>
    5a2e:	9b01      	ldr	r3, [sp, #4]
    5a30:	2b1e      	cmp	r3, #30
    5a32:	d003      	beq.n	5a3c <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5a34:	e008      	b.n	5a48 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    5a36:	2300      	movs	r3, #0
    5a38:	9304      	str	r3, [sp, #16]
            break;
    5a3a:	e006      	b.n	5a4a <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5a3c:	2301      	movs	r3, #1
    5a3e:	9304      	str	r3, [sp, #16]
            break;
    5a40:	e003      	b.n	5a4a <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    5a42:	2302      	movs	r3, #2
    5a44:	9304      	str	r3, [sp, #16]
            break;
    5a46:	e000      	b.n	5a4a <getCoreDividerConfig+0x3a>
                break;
    5a48:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5a4a:	4b41      	ldr	r3, [pc, #260]	; (5b50 <getCoreDividerConfig+0x140>)
    5a4c:	681b      	ldr	r3, [r3, #0]
    5a4e:	2b00      	cmp	r3, #0
    5a50:	d026      	beq.n	5aa0 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5a52:	2300      	movs	r3, #0
    5a54:	9303      	str	r3, [sp, #12]
    5a56:	e01c      	b.n	5a92 <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5a58:	4b3d      	ldr	r3, [pc, #244]	; (5b50 <getCoreDividerConfig+0x140>)
    5a5a:	6819      	ldr	r1, [r3, #0]
    5a5c:	9a03      	ldr	r2, [sp, #12]
    5a5e:	4613      	mov	r3, r2
    5a60:	005b      	lsls	r3, r3, #1
    5a62:	4413      	add	r3, r2
    5a64:	009b      	lsls	r3, r3, #2
    5a66:	440b      	add	r3, r1
    5a68:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5a6c:	681b      	ldr	r3, [r3, #0]
    5a6e:	9a01      	ldr	r2, [sp, #4]
    5a70:	429a      	cmp	r2, r3
    5a72:	d10b      	bne.n	5a8c <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5a74:	4b36      	ldr	r3, [pc, #216]	; (5b50 <getCoreDividerConfig+0x140>)
    5a76:	6819      	ldr	r1, [r3, #0]
    5a78:	9a03      	ldr	r2, [sp, #12]
    5a7a:	4613      	mov	r3, r2
    5a7c:	005b      	lsls	r3, r3, #1
    5a7e:	4413      	add	r3, r2
    5a80:	009b      	lsls	r3, r3, #2
    5a82:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5a86:	440b      	add	r3, r1
    5a88:	9305      	str	r3, [sp, #20]
                break;
    5a8a:	e009      	b.n	5aa0 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5a8c:	9b03      	ldr	r3, [sp, #12]
    5a8e:	3301      	adds	r3, #1
    5a90:	9303      	str	r3, [sp, #12]
    5a92:	4b2f      	ldr	r3, [pc, #188]	; (5b50 <getCoreDividerConfig+0x140>)
    5a94:	681b      	ldr	r3, [r3, #0]
    5a96:	7b1b      	ldrb	r3, [r3, #12]
    5a98:	461a      	mov	r2, r3
    5a9a:	9b03      	ldr	r3, [sp, #12]
    5a9c:	4293      	cmp	r3, r2
    5a9e:	d3db      	bcc.n	5a58 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5aa0:	9b05      	ldr	r3, [sp, #20]
    5aa2:	2b00      	cmp	r3, #0
    5aa4:	d14d      	bne.n	5b42 <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    5aa6:	9a04      	ldr	r2, [sp, #16]
    5aa8:	4613      	mov	r3, r2
    5aaa:	005b      	lsls	r3, r3, #1
    5aac:	4413      	add	r3, r2
    5aae:	009b      	lsls	r3, r3, #2
    5ab0:	4a28      	ldr	r2, [pc, #160]	; (5b54 <getCoreDividerConfig+0x144>)
    5ab2:	4413      	add	r3, r2
    5ab4:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    5ab6:	4927      	ldr	r1, [pc, #156]	; (5b54 <getCoreDividerConfig+0x144>)
    5ab8:	9a04      	ldr	r2, [sp, #16]
    5aba:	4613      	mov	r3, r2
    5abc:	005b      	lsls	r3, r3, #1
    5abe:	4413      	add	r3, r2
    5ac0:	009b      	lsls	r3, r3, #2
    5ac2:	440b      	add	r3, r1
    5ac4:	9a01      	ldr	r2, [sp, #4]
    5ac6:	601a      	str	r2, [r3, #0]
        switch(Name)
    5ac8:	9b01      	ldr	r3, [sp, #4]
    5aca:	2b1f      	cmp	r3, #31
    5acc:	d029      	beq.n	5b22 <getCoreDividerConfig+0x112>
    5ace:	9b01      	ldr	r3, [sp, #4]
    5ad0:	2b1f      	cmp	r3, #31
    5ad2:	d838      	bhi.n	5b46 <getCoreDividerConfig+0x136>
    5ad4:	9b01      	ldr	r3, [sp, #4]
    5ad6:	2b1d      	cmp	r3, #29
    5ad8:	d003      	beq.n	5ae2 <getCoreDividerConfig+0xd2>
    5ada:	9b01      	ldr	r3, [sp, #4]
    5adc:	2b1e      	cmp	r3, #30
    5ade:	d010      	beq.n	5b02 <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5ae0:	e031      	b.n	5b46 <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    5ae2:	4b1d      	ldr	r3, [pc, #116]	; (5b58 <getCoreDividerConfig+0x148>)
    5ae4:	695b      	ldr	r3, [r3, #20]
    5ae6:	0c1b      	lsrs	r3, r3, #16
    5ae8:	f003 030f 	and.w	r3, r3, #15
    5aec:	1c59      	adds	r1, r3, #1
    5aee:	4819      	ldr	r0, [pc, #100]	; (5b54 <getCoreDividerConfig+0x144>)
    5af0:	9a04      	ldr	r2, [sp, #16]
    5af2:	4613      	mov	r3, r2
    5af4:	005b      	lsls	r3, r3, #1
    5af6:	4413      	add	r3, r2
    5af8:	009b      	lsls	r3, r3, #2
    5afa:	4403      	add	r3, r0
    5afc:	3304      	adds	r3, #4
    5afe:	6019      	str	r1, [r3, #0]
                break;
    5b00:	e022      	b.n	5b48 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    5b02:	4b15      	ldr	r3, [pc, #84]	; (5b58 <getCoreDividerConfig+0x148>)
    5b04:	699b      	ldr	r3, [r3, #24]
    5b06:	0c1b      	lsrs	r3, r3, #16
    5b08:	f003 030f 	and.w	r3, r3, #15
    5b0c:	1c59      	adds	r1, r3, #1
    5b0e:	4811      	ldr	r0, [pc, #68]	; (5b54 <getCoreDividerConfig+0x144>)
    5b10:	9a04      	ldr	r2, [sp, #16]
    5b12:	4613      	mov	r3, r2
    5b14:	005b      	lsls	r3, r3, #1
    5b16:	4413      	add	r3, r2
    5b18:	009b      	lsls	r3, r3, #2
    5b1a:	4403      	add	r3, r0
    5b1c:	3304      	adds	r3, #4
    5b1e:	6019      	str	r1, [r3, #0]
                break;
    5b20:	e012      	b.n	5b48 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    5b22:	4b0d      	ldr	r3, [pc, #52]	; (5b58 <getCoreDividerConfig+0x148>)
    5b24:	69db      	ldr	r3, [r3, #28]
    5b26:	0c1b      	lsrs	r3, r3, #16
    5b28:	f003 030f 	and.w	r3, r3, #15
    5b2c:	1c59      	adds	r1, r3, #1
    5b2e:	4809      	ldr	r0, [pc, #36]	; (5b54 <getCoreDividerConfig+0x144>)
    5b30:	9a04      	ldr	r2, [sp, #16]
    5b32:	4613      	mov	r3, r2
    5b34:	005b      	lsls	r3, r3, #1
    5b36:	4413      	add	r3, r2
    5b38:	009b      	lsls	r3, r3, #2
    5b3a:	4403      	add	r3, r0
    5b3c:	3304      	adds	r3, #4
    5b3e:	6019      	str	r1, [r3, #0]
                break;
    5b40:	e002      	b.n	5b48 <getCoreDividerConfig+0x138>
        }
    }
    5b42:	bf00      	nop
    5b44:	e000      	b.n	5b48 <getCoreDividerConfig+0x138>
                break;
    5b46:	bf00      	nop

    return ReturnValue;
    5b48:	9b05      	ldr	r3, [sp, #20]
}
    5b4a:	4618      	mov	r0, r3
    5b4c:	b006      	add	sp, #24
    5b4e:	4770      	bx	lr
    5b50:	1fff8bdc 	.word	0x1fff8bdc
    5b54:	1fff8ca8 	.word	0x1fff8ca8
    5b58:	40064000 	.word	0x40064000

00005b5c <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    5b5c:	b086      	sub	sp, #24
    5b5e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5b60:	2300      	movs	r3, #0
    5b62:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5b64:	2300      	movs	r3, #0
    5b66:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5b68:	9b01      	ldr	r3, [sp, #4]
    5b6a:	2b23      	cmp	r3, #35	; 0x23
    5b6c:	d00f      	beq.n	5b8e <getBusDividerConfig+0x32>
    5b6e:	9b01      	ldr	r3, [sp, #4]
    5b70:	2b23      	cmp	r3, #35	; 0x23
    5b72:	d80f      	bhi.n	5b94 <getBusDividerConfig+0x38>
    5b74:	9b01      	ldr	r3, [sp, #4]
    5b76:	2b21      	cmp	r3, #33	; 0x21
    5b78:	d003      	beq.n	5b82 <getBusDividerConfig+0x26>
    5b7a:	9b01      	ldr	r3, [sp, #4]
    5b7c:	2b22      	cmp	r3, #34	; 0x22
    5b7e:	d003      	beq.n	5b88 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5b80:	e008      	b.n	5b94 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    5b82:	2300      	movs	r3, #0
    5b84:	9304      	str	r3, [sp, #16]
            break;
    5b86:	e006      	b.n	5b96 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5b88:	2301      	movs	r3, #1
    5b8a:	9304      	str	r3, [sp, #16]
            break;
    5b8c:	e003      	b.n	5b96 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    5b8e:	2302      	movs	r3, #2
    5b90:	9304      	str	r3, [sp, #16]
            break;
    5b92:	e000      	b.n	5b96 <getBusDividerConfig+0x3a>
                break;
    5b94:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5b96:	4b41      	ldr	r3, [pc, #260]	; (5c9c <getBusDividerConfig+0x140>)
    5b98:	681b      	ldr	r3, [r3, #0]
    5b9a:	2b00      	cmp	r3, #0
    5b9c:	d026      	beq.n	5bec <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5b9e:	2300      	movs	r3, #0
    5ba0:	9303      	str	r3, [sp, #12]
    5ba2:	e01c      	b.n	5bde <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5ba4:	4b3d      	ldr	r3, [pc, #244]	; (5c9c <getBusDividerConfig+0x140>)
    5ba6:	6819      	ldr	r1, [r3, #0]
    5ba8:	9a03      	ldr	r2, [sp, #12]
    5baa:	4613      	mov	r3, r2
    5bac:	005b      	lsls	r3, r3, #1
    5bae:	4413      	add	r3, r2
    5bb0:	009b      	lsls	r3, r3, #2
    5bb2:	440b      	add	r3, r1
    5bb4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5bb8:	681b      	ldr	r3, [r3, #0]
    5bba:	9a01      	ldr	r2, [sp, #4]
    5bbc:	429a      	cmp	r2, r3
    5bbe:	d10b      	bne.n	5bd8 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5bc0:	4b36      	ldr	r3, [pc, #216]	; (5c9c <getBusDividerConfig+0x140>)
    5bc2:	6819      	ldr	r1, [r3, #0]
    5bc4:	9a03      	ldr	r2, [sp, #12]
    5bc6:	4613      	mov	r3, r2
    5bc8:	005b      	lsls	r3, r3, #1
    5bca:	4413      	add	r3, r2
    5bcc:	009b      	lsls	r3, r3, #2
    5bce:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5bd2:	440b      	add	r3, r1
    5bd4:	9305      	str	r3, [sp, #20]
                break;
    5bd6:	e009      	b.n	5bec <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5bd8:	9b03      	ldr	r3, [sp, #12]
    5bda:	3301      	adds	r3, #1
    5bdc:	9303      	str	r3, [sp, #12]
    5bde:	4b2f      	ldr	r3, [pc, #188]	; (5c9c <getBusDividerConfig+0x140>)
    5be0:	681b      	ldr	r3, [r3, #0]
    5be2:	7b1b      	ldrb	r3, [r3, #12]
    5be4:	461a      	mov	r2, r3
    5be6:	9b03      	ldr	r3, [sp, #12]
    5be8:	4293      	cmp	r3, r2
    5bea:	d3db      	bcc.n	5ba4 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5bec:	9b05      	ldr	r3, [sp, #20]
    5bee:	2b00      	cmp	r3, #0
    5bf0:	d14d      	bne.n	5c8e <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    5bf2:	9a04      	ldr	r2, [sp, #16]
    5bf4:	4613      	mov	r3, r2
    5bf6:	005b      	lsls	r3, r3, #1
    5bf8:	4413      	add	r3, r2
    5bfa:	009b      	lsls	r3, r3, #2
    5bfc:	4a28      	ldr	r2, [pc, #160]	; (5ca0 <getBusDividerConfig+0x144>)
    5bfe:	4413      	add	r3, r2
    5c00:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    5c02:	4927      	ldr	r1, [pc, #156]	; (5ca0 <getBusDividerConfig+0x144>)
    5c04:	9a04      	ldr	r2, [sp, #16]
    5c06:	4613      	mov	r3, r2
    5c08:	005b      	lsls	r3, r3, #1
    5c0a:	4413      	add	r3, r2
    5c0c:	009b      	lsls	r3, r3, #2
    5c0e:	440b      	add	r3, r1
    5c10:	9a01      	ldr	r2, [sp, #4]
    5c12:	601a      	str	r2, [r3, #0]
        switch(Name)
    5c14:	9b01      	ldr	r3, [sp, #4]
    5c16:	2b23      	cmp	r3, #35	; 0x23
    5c18:	d029      	beq.n	5c6e <getBusDividerConfig+0x112>
    5c1a:	9b01      	ldr	r3, [sp, #4]
    5c1c:	2b23      	cmp	r3, #35	; 0x23
    5c1e:	d838      	bhi.n	5c92 <getBusDividerConfig+0x136>
    5c20:	9b01      	ldr	r3, [sp, #4]
    5c22:	2b21      	cmp	r3, #33	; 0x21
    5c24:	d003      	beq.n	5c2e <getBusDividerConfig+0xd2>
    5c26:	9b01      	ldr	r3, [sp, #4]
    5c28:	2b22      	cmp	r3, #34	; 0x22
    5c2a:	d010      	beq.n	5c4e <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5c2c:	e031      	b.n	5c92 <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    5c2e:	4b1d      	ldr	r3, [pc, #116]	; (5ca4 <getBusDividerConfig+0x148>)
    5c30:	695b      	ldr	r3, [r3, #20]
    5c32:	091b      	lsrs	r3, r3, #4
    5c34:	f003 030f 	and.w	r3, r3, #15
    5c38:	1c59      	adds	r1, r3, #1
    5c3a:	4819      	ldr	r0, [pc, #100]	; (5ca0 <getBusDividerConfig+0x144>)
    5c3c:	9a04      	ldr	r2, [sp, #16]
    5c3e:	4613      	mov	r3, r2
    5c40:	005b      	lsls	r3, r3, #1
    5c42:	4413      	add	r3, r2
    5c44:	009b      	lsls	r3, r3, #2
    5c46:	4403      	add	r3, r0
    5c48:	3304      	adds	r3, #4
    5c4a:	6019      	str	r1, [r3, #0]
                break;
    5c4c:	e022      	b.n	5c94 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    5c4e:	4b15      	ldr	r3, [pc, #84]	; (5ca4 <getBusDividerConfig+0x148>)
    5c50:	699b      	ldr	r3, [r3, #24]
    5c52:	091b      	lsrs	r3, r3, #4
    5c54:	f003 030f 	and.w	r3, r3, #15
    5c58:	1c59      	adds	r1, r3, #1
    5c5a:	4811      	ldr	r0, [pc, #68]	; (5ca0 <getBusDividerConfig+0x144>)
    5c5c:	9a04      	ldr	r2, [sp, #16]
    5c5e:	4613      	mov	r3, r2
    5c60:	005b      	lsls	r3, r3, #1
    5c62:	4413      	add	r3, r2
    5c64:	009b      	lsls	r3, r3, #2
    5c66:	4403      	add	r3, r0
    5c68:	3304      	adds	r3, #4
    5c6a:	6019      	str	r1, [r3, #0]
                break;
    5c6c:	e012      	b.n	5c94 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    5c6e:	4b0d      	ldr	r3, [pc, #52]	; (5ca4 <getBusDividerConfig+0x148>)
    5c70:	69db      	ldr	r3, [r3, #28]
    5c72:	091b      	lsrs	r3, r3, #4
    5c74:	f003 030f 	and.w	r3, r3, #15
    5c78:	1c59      	adds	r1, r3, #1
    5c7a:	4809      	ldr	r0, [pc, #36]	; (5ca0 <getBusDividerConfig+0x144>)
    5c7c:	9a04      	ldr	r2, [sp, #16]
    5c7e:	4613      	mov	r3, r2
    5c80:	005b      	lsls	r3, r3, #1
    5c82:	4413      	add	r3, r2
    5c84:	009b      	lsls	r3, r3, #2
    5c86:	4403      	add	r3, r0
    5c88:	3304      	adds	r3, #4
    5c8a:	6019      	str	r1, [r3, #0]
                break;
    5c8c:	e002      	b.n	5c94 <getBusDividerConfig+0x138>
        }
    }
    5c8e:	bf00      	nop
    5c90:	e000      	b.n	5c94 <getBusDividerConfig+0x138>
                break;
    5c92:	bf00      	nop

    return ReturnValue;
    5c94:	9b05      	ldr	r3, [sp, #20]
}
    5c96:	4618      	mov	r0, r3
    5c98:	b006      	add	sp, #24
    5c9a:	4770      	bx	lr
    5c9c:	1fff8bdc 	.word	0x1fff8bdc
    5ca0:	1fff8ccc 	.word	0x1fff8ccc
    5ca4:	40064000 	.word	0x40064000

00005ca8 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    5ca8:	b086      	sub	sp, #24
    5caa:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5cac:	2300      	movs	r3, #0
    5cae:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5cb0:	2300      	movs	r3, #0
    5cb2:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5cb4:	9b01      	ldr	r3, [sp, #4]
    5cb6:	2b27      	cmp	r3, #39	; 0x27
    5cb8:	d00f      	beq.n	5cda <getSlowDividerConfig+0x32>
    5cba:	9b01      	ldr	r3, [sp, #4]
    5cbc:	2b27      	cmp	r3, #39	; 0x27
    5cbe:	d80f      	bhi.n	5ce0 <getSlowDividerConfig+0x38>
    5cc0:	9b01      	ldr	r3, [sp, #4]
    5cc2:	2b25      	cmp	r3, #37	; 0x25
    5cc4:	d003      	beq.n	5cce <getSlowDividerConfig+0x26>
    5cc6:	9b01      	ldr	r3, [sp, #4]
    5cc8:	2b26      	cmp	r3, #38	; 0x26
    5cca:	d003      	beq.n	5cd4 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5ccc:	e008      	b.n	5ce0 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    5cce:	2300      	movs	r3, #0
    5cd0:	9304      	str	r3, [sp, #16]
            break;
    5cd2:	e006      	b.n	5ce2 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5cd4:	2301      	movs	r3, #1
    5cd6:	9304      	str	r3, [sp, #16]
            break;
    5cd8:	e003      	b.n	5ce2 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    5cda:	2302      	movs	r3, #2
    5cdc:	9304      	str	r3, [sp, #16]
            break;
    5cde:	e000      	b.n	5ce2 <getSlowDividerConfig+0x3a>
                break;
    5ce0:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5ce2:	4b40      	ldr	r3, [pc, #256]	; (5de4 <getSlowDividerConfig+0x13c>)
    5ce4:	681b      	ldr	r3, [r3, #0]
    5ce6:	2b00      	cmp	r3, #0
    5ce8:	d026      	beq.n	5d38 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5cea:	2300      	movs	r3, #0
    5cec:	9303      	str	r3, [sp, #12]
    5cee:	e01c      	b.n	5d2a <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5cf0:	4b3c      	ldr	r3, [pc, #240]	; (5de4 <getSlowDividerConfig+0x13c>)
    5cf2:	6819      	ldr	r1, [r3, #0]
    5cf4:	9a03      	ldr	r2, [sp, #12]
    5cf6:	4613      	mov	r3, r2
    5cf8:	005b      	lsls	r3, r3, #1
    5cfa:	4413      	add	r3, r2
    5cfc:	009b      	lsls	r3, r3, #2
    5cfe:	440b      	add	r3, r1
    5d00:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5d04:	681b      	ldr	r3, [r3, #0]
    5d06:	9a01      	ldr	r2, [sp, #4]
    5d08:	429a      	cmp	r2, r3
    5d0a:	d10b      	bne.n	5d24 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5d0c:	4b35      	ldr	r3, [pc, #212]	; (5de4 <getSlowDividerConfig+0x13c>)
    5d0e:	6819      	ldr	r1, [r3, #0]
    5d10:	9a03      	ldr	r2, [sp, #12]
    5d12:	4613      	mov	r3, r2
    5d14:	005b      	lsls	r3, r3, #1
    5d16:	4413      	add	r3, r2
    5d18:	009b      	lsls	r3, r3, #2
    5d1a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5d1e:	440b      	add	r3, r1
    5d20:	9305      	str	r3, [sp, #20]
                break;
    5d22:	e009      	b.n	5d38 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5d24:	9b03      	ldr	r3, [sp, #12]
    5d26:	3301      	adds	r3, #1
    5d28:	9303      	str	r3, [sp, #12]
    5d2a:	4b2e      	ldr	r3, [pc, #184]	; (5de4 <getSlowDividerConfig+0x13c>)
    5d2c:	681b      	ldr	r3, [r3, #0]
    5d2e:	7b1b      	ldrb	r3, [r3, #12]
    5d30:	461a      	mov	r2, r3
    5d32:	9b03      	ldr	r3, [sp, #12]
    5d34:	4293      	cmp	r3, r2
    5d36:	d3db      	bcc.n	5cf0 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5d38:	9b05      	ldr	r3, [sp, #20]
    5d3a:	2b00      	cmp	r3, #0
    5d3c:	d14a      	bne.n	5dd4 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    5d3e:	9a04      	ldr	r2, [sp, #16]
    5d40:	4613      	mov	r3, r2
    5d42:	005b      	lsls	r3, r3, #1
    5d44:	4413      	add	r3, r2
    5d46:	009b      	lsls	r3, r3, #2
    5d48:	4a27      	ldr	r2, [pc, #156]	; (5de8 <getSlowDividerConfig+0x140>)
    5d4a:	4413      	add	r3, r2
    5d4c:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    5d4e:	4926      	ldr	r1, [pc, #152]	; (5de8 <getSlowDividerConfig+0x140>)
    5d50:	9a04      	ldr	r2, [sp, #16]
    5d52:	4613      	mov	r3, r2
    5d54:	005b      	lsls	r3, r3, #1
    5d56:	4413      	add	r3, r2
    5d58:	009b      	lsls	r3, r3, #2
    5d5a:	440b      	add	r3, r1
    5d5c:	9a01      	ldr	r2, [sp, #4]
    5d5e:	601a      	str	r2, [r3, #0]
        switch(Name)
    5d60:	9b01      	ldr	r3, [sp, #4]
    5d62:	2b27      	cmp	r3, #39	; 0x27
    5d64:	d027      	beq.n	5db6 <getSlowDividerConfig+0x10e>
    5d66:	9b01      	ldr	r3, [sp, #4]
    5d68:	2b27      	cmp	r3, #39	; 0x27
    5d6a:	d835      	bhi.n	5dd8 <getSlowDividerConfig+0x130>
    5d6c:	9b01      	ldr	r3, [sp, #4]
    5d6e:	2b25      	cmp	r3, #37	; 0x25
    5d70:	d003      	beq.n	5d7a <getSlowDividerConfig+0xd2>
    5d72:	9b01      	ldr	r3, [sp, #4]
    5d74:	2b26      	cmp	r3, #38	; 0x26
    5d76:	d00f      	beq.n	5d98 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5d78:	e02e      	b.n	5dd8 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    5d7a:	4b1c      	ldr	r3, [pc, #112]	; (5dec <getSlowDividerConfig+0x144>)
    5d7c:	695b      	ldr	r3, [r3, #20]
    5d7e:	f003 030f 	and.w	r3, r3, #15
    5d82:	1c59      	adds	r1, r3, #1
    5d84:	4818      	ldr	r0, [pc, #96]	; (5de8 <getSlowDividerConfig+0x140>)
    5d86:	9a04      	ldr	r2, [sp, #16]
    5d88:	4613      	mov	r3, r2
    5d8a:	005b      	lsls	r3, r3, #1
    5d8c:	4413      	add	r3, r2
    5d8e:	009b      	lsls	r3, r3, #2
    5d90:	4403      	add	r3, r0
    5d92:	3304      	adds	r3, #4
    5d94:	6019      	str	r1, [r3, #0]
                break;
    5d96:	e020      	b.n	5dda <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    5d98:	4b14      	ldr	r3, [pc, #80]	; (5dec <getSlowDividerConfig+0x144>)
    5d9a:	699b      	ldr	r3, [r3, #24]
    5d9c:	f003 030f 	and.w	r3, r3, #15
    5da0:	1c59      	adds	r1, r3, #1
    5da2:	4811      	ldr	r0, [pc, #68]	; (5de8 <getSlowDividerConfig+0x140>)
    5da4:	9a04      	ldr	r2, [sp, #16]
    5da6:	4613      	mov	r3, r2
    5da8:	005b      	lsls	r3, r3, #1
    5daa:	4413      	add	r3, r2
    5dac:	009b      	lsls	r3, r3, #2
    5dae:	4403      	add	r3, r0
    5db0:	3304      	adds	r3, #4
    5db2:	6019      	str	r1, [r3, #0]
                break;
    5db4:	e011      	b.n	5dda <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    5db6:	4b0d      	ldr	r3, [pc, #52]	; (5dec <getSlowDividerConfig+0x144>)
    5db8:	69db      	ldr	r3, [r3, #28]
    5dba:	f003 030f 	and.w	r3, r3, #15
    5dbe:	1c59      	adds	r1, r3, #1
    5dc0:	4809      	ldr	r0, [pc, #36]	; (5de8 <getSlowDividerConfig+0x140>)
    5dc2:	9a04      	ldr	r2, [sp, #16]
    5dc4:	4613      	mov	r3, r2
    5dc6:	005b      	lsls	r3, r3, #1
    5dc8:	4413      	add	r3, r2
    5dca:	009b      	lsls	r3, r3, #2
    5dcc:	4403      	add	r3, r0
    5dce:	3304      	adds	r3, #4
    5dd0:	6019      	str	r1, [r3, #0]
                break;
    5dd2:	e002      	b.n	5dda <getSlowDividerConfig+0x132>
        }
    }
    5dd4:	bf00      	nop
    5dd6:	e000      	b.n	5dda <getSlowDividerConfig+0x132>
                break;
    5dd8:	bf00      	nop

    return ReturnValue;
    5dda:	9b05      	ldr	r3, [sp, #20]
}
    5ddc:	4618      	mov	r0, r3
    5dde:	b006      	add	sp, #24
    5de0:	4770      	bx	lr
    5de2:	bf00      	nop
    5de4:	1fff8bdc 	.word	0x1fff8bdc
    5de8:	1fff8cf0 	.word	0x1fff8cf0
    5dec:	40064000 	.word	0x40064000

00005df0 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    5df0:	b500      	push	{lr}
    5df2:	b083      	sub	sp, #12
    5df4:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    5df6:	4b64      	ldr	r3, [pc, #400]	; (5f88 <Clock_Ip_ClockInitializeObjects+0x198>)
    5df8:	781b      	ldrb	r3, [r3, #0]
    5dfa:	f083 0301 	eor.w	r3, r3, #1
    5dfe:	b2db      	uxtb	r3, r3
    5e00:	2b00      	cmp	r3, #0
    5e02:	d05b      	beq.n	5ebc <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    5e04:	4b60      	ldr	r3, [pc, #384]	; (5f88 <Clock_Ip_ClockInitializeObjects+0x198>)
    5e06:	2201      	movs	r2, #1
    5e08:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    5e0a:	4b60      	ldr	r3, [pc, #384]	; (5f8c <Clock_Ip_ClockInitializeObjects+0x19c>)
    5e0c:	785b      	ldrb	r3, [r3, #1]
    5e0e:	461a      	mov	r2, r3
    5e10:	4613      	mov	r3, r2
    5e12:	009b      	lsls	r3, r3, #2
    5e14:	4413      	add	r3, r2
    5e16:	009b      	lsls	r3, r3, #2
    5e18:	4a5d      	ldr	r2, [pc, #372]	; (5f90 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    5e1a:	4413      	add	r3, r2
    5e1c:	4a5d      	ldr	r2, [pc, #372]	; (5f94 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    5e1e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    5e20:	4b5d      	ldr	r3, [pc, #372]	; (5f98 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    5e22:	785b      	ldrb	r3, [r3, #1]
    5e24:	461a      	mov	r2, r3
    5e26:	4613      	mov	r3, r2
    5e28:	009b      	lsls	r3, r3, #2
    5e2a:	4413      	add	r3, r2
    5e2c:	009b      	lsls	r3, r3, #2
    5e2e:	4a5b      	ldr	r2, [pc, #364]	; (5f9c <Clock_Ip_ClockInitializeObjects+0x1ac>)
    5e30:	4413      	add	r3, r2
    5e32:	4a5b      	ldr	r2, [pc, #364]	; (5fa0 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    5e34:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    5e36:	4b5b      	ldr	r3, [pc, #364]	; (5fa4 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    5e38:	791b      	ldrb	r3, [r3, #4]
    5e3a:	461a      	mov	r2, r3
    5e3c:	4613      	mov	r3, r2
    5e3e:	005b      	lsls	r3, r3, #1
    5e40:	4413      	add	r3, r2
    5e42:	009b      	lsls	r3, r3, #2
    5e44:	4a58      	ldr	r2, [pc, #352]	; (5fa8 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    5e46:	4413      	add	r3, r2
    5e48:	4a58      	ldr	r2, [pc, #352]	; (5fac <Clock_Ip_ClockInitializeObjects+0x1bc>)
    5e4a:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    5e4c:	4b58      	ldr	r3, [pc, #352]	; (5fb0 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    5e4e:	795b      	ldrb	r3, [r3, #5]
    5e50:	00db      	lsls	r3, r3, #3
    5e52:	4a58      	ldr	r2, [pc, #352]	; (5fb4 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    5e54:	4413      	add	r3, r2
    5e56:	4a58      	ldr	r2, [pc, #352]	; (5fb8 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    5e58:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    5e5a:	4b55      	ldr	r3, [pc, #340]	; (5fb0 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    5e5c:	79db      	ldrb	r3, [r3, #7]
    5e5e:	00db      	lsls	r3, r3, #3
    5e60:	4a54      	ldr	r2, [pc, #336]	; (5fb4 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    5e62:	4413      	add	r3, r2
    5e64:	4a55      	ldr	r2, [pc, #340]	; (5fbc <Clock_Ip_ClockInitializeObjects+0x1cc>)
    5e66:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    5e68:	4b55      	ldr	r3, [pc, #340]	; (5fc0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5e6a:	799b      	ldrb	r3, [r3, #6]
    5e6c:	009b      	lsls	r3, r3, #2
    5e6e:	4a55      	ldr	r2, [pc, #340]	; (5fc4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5e70:	4413      	add	r3, r2
    5e72:	4a55      	ldr	r2, [pc, #340]	; (5fc8 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    5e74:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    5e76:	4b52      	ldr	r3, [pc, #328]	; (5fc0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5e78:	7a1b      	ldrb	r3, [r3, #8]
    5e7a:	009b      	lsls	r3, r3, #2
    5e7c:	4a51      	ldr	r2, [pc, #324]	; (5fc4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5e7e:	4413      	add	r3, r2
    5e80:	4a52      	ldr	r2, [pc, #328]	; (5fcc <Clock_Ip_ClockInitializeObjects+0x1dc>)
    5e82:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    5e84:	4b4e      	ldr	r3, [pc, #312]	; (5fc0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5e86:	7a5b      	ldrb	r3, [r3, #9]
    5e88:	009b      	lsls	r3, r3, #2
    5e8a:	4a4e      	ldr	r2, [pc, #312]	; (5fc4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5e8c:	4413      	add	r3, r2
    5e8e:	4a50      	ldr	r2, [pc, #320]	; (5fd0 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    5e90:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    5e92:	4b4b      	ldr	r3, [pc, #300]	; (5fc0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5e94:	7adb      	ldrb	r3, [r3, #11]
    5e96:	009b      	lsls	r3, r3, #2
    5e98:	4a4a      	ldr	r2, [pc, #296]	; (5fc4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5e9a:	4413      	add	r3, r2
    5e9c:	4a4d      	ldr	r2, [pc, #308]	; (5fd4 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    5e9e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    5ea0:	4b47      	ldr	r3, [pc, #284]	; (5fc0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5ea2:	7b1b      	ldrb	r3, [r3, #12]
    5ea4:	009b      	lsls	r3, r3, #2
    5ea6:	4a47      	ldr	r2, [pc, #284]	; (5fc4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5ea8:	4413      	add	r3, r2
    5eaa:	4a4b      	ldr	r2, [pc, #300]	; (5fd8 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    5eac:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    5eae:	4b44      	ldr	r3, [pc, #272]	; (5fc0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5eb0:	7b9b      	ldrb	r3, [r3, #14]
    5eb2:	009b      	lsls	r3, r3, #2
    5eb4:	4a43      	ldr	r2, [pc, #268]	; (5fc4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5eb6:	4413      	add	r3, r2
    5eb8:	4a48      	ldr	r2, [pc, #288]	; (5fdc <Clock_Ip_ClockInitializeObjects+0x1ec>)
    5eba:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    5ebc:	4b48      	ldr	r3, [pc, #288]	; (5fe0 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    5ebe:	781b      	ldrb	r3, [r3, #0]
    5ec0:	2b00      	cmp	r3, #0
    5ec2:	d002      	beq.n	5eca <Clock_Ip_ClockInitializeObjects+0xda>
    5ec4:	9b01      	ldr	r3, [sp, #4]
    5ec6:	2b00      	cmp	r3, #0
    5ec8:	d003      	beq.n	5ed2 <Clock_Ip_ClockInitializeObjects+0xe2>
    5eca:	4b46      	ldr	r3, [pc, #280]	; (5fe4 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    5ecc:	781b      	ldrb	r3, [r3, #0]
    5ece:	2b00      	cmp	r3, #0
    5ed0:	d056      	beq.n	5f80 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    5ed2:	f7ff fc09 	bl	56e8 <getFircConfig>
    5ed6:	4603      	mov	r3, r0
    5ed8:	4a43      	ldr	r2, [pc, #268]	; (5fe8 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    5eda:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    5edc:	f7ff fc60 	bl	57a0 <getSoscConfig>
    5ee0:	4603      	mov	r3, r0
    5ee2:	4a42      	ldr	r2, [pc, #264]	; (5fec <Clock_Ip_ClockInitializeObjects+0x1fc>)
    5ee4:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    5ee6:	f7ff fca7 	bl	5838 <getSpllConfig>
    5eea:	4603      	mov	r3, r0
    5eec:	4a40      	ldr	r2, [pc, #256]	; (5ff0 <Clock_Ip_ClockInitializeObjects+0x200>)
    5eee:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    5ef0:	2019      	movs	r0, #25
    5ef2:	f7ff fcfb 	bl	58ec <getSelectorConfig>
    5ef6:	4603      	mov	r3, r0
    5ef8:	4a3e      	ldr	r2, [pc, #248]	; (5ff4 <Clock_Ip_ClockInitializeObjects+0x204>)
    5efa:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    5efc:	201a      	movs	r0, #26
    5efe:	f7ff fcf5 	bl	58ec <getSelectorConfig>
    5f02:	4603      	mov	r3, r0
    5f04:	4a3c      	ldr	r2, [pc, #240]	; (5ff8 <Clock_Ip_ClockInitializeObjects+0x208>)
    5f06:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    5f08:	201b      	movs	r0, #27
    5f0a:	f7ff fcef 	bl	58ec <getSelectorConfig>
    5f0e:	4603      	mov	r3, r0
    5f10:	4a3a      	ldr	r2, [pc, #232]	; (5ffc <Clock_Ip_ClockInitializeObjects+0x20c>)
    5f12:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    5f14:	201d      	movs	r0, #29
    5f16:	f7ff fd7b 	bl	5a10 <getCoreDividerConfig>
    5f1a:	4603      	mov	r3, r0
    5f1c:	4a38      	ldr	r2, [pc, #224]	; (6000 <Clock_Ip_ClockInitializeObjects+0x210>)
    5f1e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    5f20:	201e      	movs	r0, #30
    5f22:	f7ff fd75 	bl	5a10 <getCoreDividerConfig>
    5f26:	4603      	mov	r3, r0
    5f28:	4a36      	ldr	r2, [pc, #216]	; (6004 <Clock_Ip_ClockInitializeObjects+0x214>)
    5f2a:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    5f2c:	201f      	movs	r0, #31
    5f2e:	f7ff fd6f 	bl	5a10 <getCoreDividerConfig>
    5f32:	4603      	mov	r3, r0
    5f34:	4a34      	ldr	r2, [pc, #208]	; (6008 <Clock_Ip_ClockInitializeObjects+0x218>)
    5f36:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    5f38:	2021      	movs	r0, #33	; 0x21
    5f3a:	f7ff fe0f 	bl	5b5c <getBusDividerConfig>
    5f3e:	4603      	mov	r3, r0
    5f40:	4a32      	ldr	r2, [pc, #200]	; (600c <Clock_Ip_ClockInitializeObjects+0x21c>)
    5f42:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    5f44:	2022      	movs	r0, #34	; 0x22
    5f46:	f7ff fe09 	bl	5b5c <getBusDividerConfig>
    5f4a:	4603      	mov	r3, r0
    5f4c:	4a30      	ldr	r2, [pc, #192]	; (6010 <Clock_Ip_ClockInitializeObjects+0x220>)
    5f4e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    5f50:	2023      	movs	r0, #35	; 0x23
    5f52:	f7ff fe03 	bl	5b5c <getBusDividerConfig>
    5f56:	4603      	mov	r3, r0
    5f58:	4a2e      	ldr	r2, [pc, #184]	; (6014 <Clock_Ip_ClockInitializeObjects+0x224>)
    5f5a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    5f5c:	2025      	movs	r0, #37	; 0x25
    5f5e:	f7ff fea3 	bl	5ca8 <getSlowDividerConfig>
    5f62:	4603      	mov	r3, r0
    5f64:	4a2c      	ldr	r2, [pc, #176]	; (6018 <Clock_Ip_ClockInitializeObjects+0x228>)
    5f66:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    5f68:	2026      	movs	r0, #38	; 0x26
    5f6a:	f7ff fe9d 	bl	5ca8 <getSlowDividerConfig>
    5f6e:	4603      	mov	r3, r0
    5f70:	4a2a      	ldr	r2, [pc, #168]	; (601c <Clock_Ip_ClockInitializeObjects+0x22c>)
    5f72:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    5f74:	2027      	movs	r0, #39	; 0x27
    5f76:	f7ff fe97 	bl	5ca8 <getSlowDividerConfig>
    5f7a:	4603      	mov	r3, r0
    5f7c:	4a28      	ldr	r2, [pc, #160]	; (6020 <Clock_Ip_ClockInitializeObjects+0x230>)
    5f7e:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    5f80:	bf00      	nop
    5f82:	b003      	add	sp, #12
    5f84:	f85d fb04 	ldr.w	pc, [sp], #4
    5f88:	1fff8d14 	.word	0x1fff8d14
    5f8c:	00015d34 	.word	0x00015d34
    5f90:	00016380 	.word	0x00016380
    5f94:	1fff8be0 	.word	0x1fff8be0
    5f98:	00015cf4 	.word	0x00015cf4
    5f9c:	000162c8 	.word	0x000162c8
    5fa0:	1fff8be4 	.word	0x1fff8be4
    5fa4:	00015d04 	.word	0x00015d04
    5fa8:	00016334 	.word	0x00016334
    5fac:	1fff8be8 	.word	0x1fff8be8
    5fb0:	00015d44 	.word	0x00015d44
    5fb4:	000163ac 	.word	0x000163ac
    5fb8:	1fff8bec 	.word	0x1fff8bec
    5fbc:	1fff8c28 	.word	0x1fff8c28
    5fc0:	00015cd4 	.word	0x00015cd4
    5fc4:	00016284 	.word	0x00016284
    5fc8:	1fff8bf0 	.word	0x1fff8bf0
    5fcc:	1fff8c2c 	.word	0x1fff8c2c
    5fd0:	1fff8bf4 	.word	0x1fff8bf4
    5fd4:	1fff8c30 	.word	0x1fff8c30
    5fd8:	1fff8bf8 	.word	0x1fff8bf8
    5fdc:	1fff8c34 	.word	0x1fff8c34
    5fe0:	1fff8b19 	.word	0x1fff8b19
    5fe4:	1fff8b10 	.word	0x1fff8b10
    5fe8:	1fff8bfc 	.word	0x1fff8bfc
    5fec:	1fff8c00 	.word	0x1fff8c00
    5ff0:	1fff8c04 	.word	0x1fff8c04
    5ff4:	1fff8c08 	.word	0x1fff8c08
    5ff8:	1fff8c0c 	.word	0x1fff8c0c
    5ffc:	1fff8c38 	.word	0x1fff8c38
    6000:	1fff8c10 	.word	0x1fff8c10
    6004:	1fff8c14 	.word	0x1fff8c14
    6008:	1fff8c3c 	.word	0x1fff8c3c
    600c:	1fff8c18 	.word	0x1fff8c18
    6010:	1fff8c1c 	.word	0x1fff8c1c
    6014:	1fff8c40 	.word	0x1fff8c40
    6018:	1fff8c20 	.word	0x1fff8c20
    601c:	1fff8c24 	.word	0x1fff8c24
    6020:	1fff8c44 	.word	0x1fff8c44

00006024 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    6024:	b500      	push	{lr}
    6026:	b083      	sub	sp, #12
    6028:	9001      	str	r0, [sp, #4]
    602a:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    602c:	9b01      	ldr	r3, [sp, #4]
    602e:	2b03      	cmp	r3, #3
    6030:	f000 8090 	beq.w	6154 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    6034:	9b01      	ldr	r3, [sp, #4]
    6036:	2b03      	cmp	r3, #3
    6038:	f200 80d3 	bhi.w	61e2 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    603c:	9b01      	ldr	r3, [sp, #4]
    603e:	2b00      	cmp	r3, #0
    6040:	d040      	beq.n	60c4 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    6042:	9b01      	ldr	r3, [sp, #4]
    6044:	3b01      	subs	r3, #1
    6046:	2b01      	cmp	r3, #1
    6048:	f200 80cb 	bhi.w	61e2 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    604c:	9b00      	ldr	r3, [sp, #0]
    604e:	2b00      	cmp	r3, #0
    6050:	f040 80c9 	bne.w	61e6 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    6054:	4b68      	ldr	r3, [pc, #416]	; (61f8 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    6056:	2200      	movs	r2, #0
    6058:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    605a:	4b68      	ldr	r3, [pc, #416]	; (61fc <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    605c:	681b      	ldr	r3, [r3, #0]
    605e:	685b      	ldr	r3, [r3, #4]
    6060:	4a67      	ldr	r2, [pc, #412]	; (6200 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    6062:	6812      	ldr	r2, [r2, #0]
    6064:	4610      	mov	r0, r2
    6066:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    6068:	4b66      	ldr	r3, [pc, #408]	; (6204 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    606a:	681b      	ldr	r3, [r3, #0]
    606c:	681b      	ldr	r3, [r3, #0]
    606e:	4a66      	ldr	r2, [pc, #408]	; (6208 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    6070:	6812      	ldr	r2, [r2, #0]
    6072:	4610      	mov	r0, r2
    6074:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    6076:	4b65      	ldr	r3, [pc, #404]	; (620c <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    6078:	681b      	ldr	r3, [r3, #0]
    607a:	681b      	ldr	r3, [r3, #0]
    607c:	4a64      	ldr	r2, [pc, #400]	; (6210 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    607e:	6812      	ldr	r2, [r2, #0]
    6080:	4610      	mov	r0, r2
    6082:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    6084:	4b63      	ldr	r3, [pc, #396]	; (6214 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    6086:	681b      	ldr	r3, [r3, #0]
    6088:	681b      	ldr	r3, [r3, #0]
    608a:	4a63      	ldr	r2, [pc, #396]	; (6218 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    608c:	6812      	ldr	r2, [r2, #0]
    608e:	4610      	mov	r0, r2
    6090:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    6092:	4b62      	ldr	r3, [pc, #392]	; (621c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    6094:	681b      	ldr	r3, [r3, #0]
    6096:	691b      	ldr	r3, [r3, #16]
    6098:	4a61      	ldr	r2, [pc, #388]	; (6220 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    609a:	6812      	ldr	r2, [r2, #0]
    609c:	6812      	ldr	r2, [r2, #0]
    609e:	4610      	mov	r0, r2
    60a0:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    60a2:	4b60      	ldr	r3, [pc, #384]	; (6224 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    60a4:	681b      	ldr	r3, [r3, #0]
    60a6:	68db      	ldr	r3, [r3, #12]
    60a8:	4a5f      	ldr	r2, [pc, #380]	; (6228 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    60aa:	6812      	ldr	r2, [r2, #0]
    60ac:	6812      	ldr	r2, [r2, #0]
    60ae:	4610      	mov	r0, r2
    60b0:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    60b2:	4b5e      	ldr	r3, [pc, #376]	; (622c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    60b4:	681b      	ldr	r3, [r3, #0]
    60b6:	689b      	ldr	r3, [r3, #8]
    60b8:	4a5d      	ldr	r2, [pc, #372]	; (6230 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    60ba:	6812      	ldr	r2, [r2, #0]
    60bc:	6812      	ldr	r2, [r2, #0]
    60be:	4610      	mov	r0, r2
    60c0:	4798      	blx	r3
            }
        }
        break;
    60c2:	e090      	b.n	61e6 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    60c4:	9b00      	ldr	r3, [sp, #0]
    60c6:	2b02      	cmp	r3, #2
    60c8:	f040 808f 	bne.w	61ea <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    60cc:	4b4a      	ldr	r3, [pc, #296]	; (61f8 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    60ce:	2201      	movs	r2, #1
    60d0:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    60d2:	4b56      	ldr	r3, [pc, #344]	; (622c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    60d4:	681b      	ldr	r3, [r3, #0]
    60d6:	685b      	ldr	r3, [r3, #4]
    60d8:	4a55      	ldr	r2, [pc, #340]	; (6230 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    60da:	6812      	ldr	r2, [r2, #0]
    60dc:	4610      	mov	r0, r2
    60de:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    60e0:	4b50      	ldr	r3, [pc, #320]	; (6224 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    60e2:	681b      	ldr	r3, [r3, #0]
    60e4:	691b      	ldr	r3, [r3, #16]
    60e6:	4a50      	ldr	r2, [pc, #320]	; (6228 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    60e8:	6812      	ldr	r2, [r2, #0]
    60ea:	4610      	mov	r0, r2
    60ec:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    60ee:	4b4d      	ldr	r3, [pc, #308]	; (6224 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    60f0:	681b      	ldr	r3, [r3, #0]
    60f2:	689b      	ldr	r3, [r3, #8]
    60f4:	4a4c      	ldr	r2, [pc, #304]	; (6228 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    60f6:	6812      	ldr	r2, [r2, #0]
    60f8:	4610      	mov	r0, r2
    60fa:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    60fc:	4b47      	ldr	r3, [pc, #284]	; (621c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    60fe:	681b      	ldr	r3, [r3, #0]
    6100:	68db      	ldr	r3, [r3, #12]
    6102:	4a47      	ldr	r2, [pc, #284]	; (6220 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    6104:	6812      	ldr	r2, [r2, #0]
    6106:	4610      	mov	r0, r2
    6108:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    610a:	4b44      	ldr	r3, [pc, #272]	; (621c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    610c:	681b      	ldr	r3, [r3, #0]
    610e:	689b      	ldr	r3, [r3, #8]
    6110:	4a43      	ldr	r2, [pc, #268]	; (6220 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    6112:	6812      	ldr	r2, [r2, #0]
    6114:	6812      	ldr	r2, [r2, #0]
    6116:	4610      	mov	r0, r2
    6118:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    611a:	4b38      	ldr	r3, [pc, #224]	; (61fc <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    611c:	681b      	ldr	r3, [r3, #0]
    611e:	685b      	ldr	r3, [r3, #4]
    6120:	4a44      	ldr	r2, [pc, #272]	; (6234 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    6122:	6812      	ldr	r2, [r2, #0]
    6124:	4610      	mov	r0, r2
    6126:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    6128:	4b36      	ldr	r3, [pc, #216]	; (6204 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    612a:	681b      	ldr	r3, [r3, #0]
    612c:	681b      	ldr	r3, [r3, #0]
    612e:	4a42      	ldr	r2, [pc, #264]	; (6238 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    6130:	6812      	ldr	r2, [r2, #0]
    6132:	4610      	mov	r0, r2
    6134:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    6136:	4b35      	ldr	r3, [pc, #212]	; (620c <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    6138:	681b      	ldr	r3, [r3, #0]
    613a:	681b      	ldr	r3, [r3, #0]
    613c:	4a3f      	ldr	r2, [pc, #252]	; (623c <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    613e:	6812      	ldr	r2, [r2, #0]
    6140:	4610      	mov	r0, r2
    6142:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    6144:	4b33      	ldr	r3, [pc, #204]	; (6214 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    6146:	681b      	ldr	r3, [r3, #0]
    6148:	681b      	ldr	r3, [r3, #0]
    614a:	4a3d      	ldr	r2, [pc, #244]	; (6240 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    614c:	6812      	ldr	r2, [r2, #0]
    614e:	4610      	mov	r0, r2
    6150:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    6152:	e04a      	b.n	61ea <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    6154:	9b00      	ldr	r3, [sp, #0]
    6156:	2b02      	cmp	r3, #2
    6158:	d149      	bne.n	61ee <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    615a:	4b27      	ldr	r3, [pc, #156]	; (61f8 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    615c:	2201      	movs	r2, #1
    615e:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    6160:	4b32      	ldr	r3, [pc, #200]	; (622c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    6162:	681b      	ldr	r3, [r3, #0]
    6164:	685b      	ldr	r3, [r3, #4]
    6166:	4a32      	ldr	r2, [pc, #200]	; (6230 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    6168:	6812      	ldr	r2, [r2, #0]
    616a:	4610      	mov	r0, r2
    616c:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    616e:	4b2d      	ldr	r3, [pc, #180]	; (6224 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    6170:	681b      	ldr	r3, [r3, #0]
    6172:	691b      	ldr	r3, [r3, #16]
    6174:	4a2c      	ldr	r2, [pc, #176]	; (6228 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    6176:	6812      	ldr	r2, [r2, #0]
    6178:	4610      	mov	r0, r2
    617a:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    617c:	4b29      	ldr	r3, [pc, #164]	; (6224 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    617e:	681b      	ldr	r3, [r3, #0]
    6180:	689b      	ldr	r3, [r3, #8]
    6182:	4a29      	ldr	r2, [pc, #164]	; (6228 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    6184:	6812      	ldr	r2, [r2, #0]
    6186:	4610      	mov	r0, r2
    6188:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    618a:	4b24      	ldr	r3, [pc, #144]	; (621c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    618c:	681b      	ldr	r3, [r3, #0]
    618e:	68db      	ldr	r3, [r3, #12]
    6190:	4a23      	ldr	r2, [pc, #140]	; (6220 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    6192:	6812      	ldr	r2, [r2, #0]
    6194:	4610      	mov	r0, r2
    6196:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    6198:	4b20      	ldr	r3, [pc, #128]	; (621c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    619a:	681b      	ldr	r3, [r3, #0]
    619c:	689b      	ldr	r3, [r3, #8]
    619e:	4a20      	ldr	r2, [pc, #128]	; (6220 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    61a0:	6812      	ldr	r2, [r2, #0]
    61a2:	6812      	ldr	r2, [r2, #0]
    61a4:	4610      	mov	r0, r2
    61a6:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    61a8:	4b26      	ldr	r3, [pc, #152]	; (6244 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    61aa:	681b      	ldr	r3, [r3, #0]
    61ac:	685b      	ldr	r3, [r3, #4]
    61ae:	4a26      	ldr	r2, [pc, #152]	; (6248 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    61b0:	6812      	ldr	r2, [r2, #0]
    61b2:	4610      	mov	r0, r2
    61b4:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    61b6:	4b25      	ldr	r3, [pc, #148]	; (624c <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    61b8:	681b      	ldr	r3, [r3, #0]
    61ba:	681b      	ldr	r3, [r3, #0]
    61bc:	4a24      	ldr	r2, [pc, #144]	; (6250 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    61be:	6812      	ldr	r2, [r2, #0]
    61c0:	4610      	mov	r0, r2
    61c2:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    61c4:	4b23      	ldr	r3, [pc, #140]	; (6254 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    61c6:	681b      	ldr	r3, [r3, #0]
    61c8:	681b      	ldr	r3, [r3, #0]
    61ca:	4a23      	ldr	r2, [pc, #140]	; (6258 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    61cc:	6812      	ldr	r2, [r2, #0]
    61ce:	4610      	mov	r0, r2
    61d0:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    61d2:	4b22      	ldr	r3, [pc, #136]	; (625c <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    61d4:	681b      	ldr	r3, [r3, #0]
    61d6:	681b      	ldr	r3, [r3, #0]
    61d8:	4a21      	ldr	r2, [pc, #132]	; (6260 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    61da:	6812      	ldr	r2, [r2, #0]
    61dc:	4610      	mov	r0, r2
    61de:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    61e0:	e005      	b.n	61ee <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    61e2:	bf00      	nop
    61e4:	e004      	b.n	61f0 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    61e6:	bf00      	nop
    61e8:	e002      	b.n	61f0 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    61ea:	bf00      	nop
    61ec:	e000      	b.n	61f0 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    61ee:	bf00      	nop
    }

}
    61f0:	bf00      	nop
    61f2:	b003      	add	sp, #12
    61f4:	f85d fb04 	ldr.w	pc, [sp], #4
    61f8:	1fff8b19 	.word	0x1fff8b19
    61fc:	1fff8bec 	.word	0x1fff8bec
    6200:	1fff8c0c 	.word	0x1fff8c0c
    6204:	1fff8bf0 	.word	0x1fff8bf0
    6208:	1fff8c14 	.word	0x1fff8c14
    620c:	1fff8bf4 	.word	0x1fff8bf4
    6210:	1fff8c1c 	.word	0x1fff8c1c
    6214:	1fff8bf8 	.word	0x1fff8bf8
    6218:	1fff8c24 	.word	0x1fff8c24
    621c:	1fff8be0 	.word	0x1fff8be0
    6220:	1fff8c04 	.word	0x1fff8c04
    6224:	1fff8be4 	.word	0x1fff8be4
    6228:	1fff8c00 	.word	0x1fff8c00
    622c:	1fff8be8 	.word	0x1fff8be8
    6230:	1fff8bfc 	.word	0x1fff8bfc
    6234:	1fff8c08 	.word	0x1fff8c08
    6238:	1fff8c10 	.word	0x1fff8c10
    623c:	1fff8c18 	.word	0x1fff8c18
    6240:	1fff8c20 	.word	0x1fff8c20
    6244:	1fff8c28 	.word	0x1fff8c28
    6248:	1fff8c38 	.word	0x1fff8c38
    624c:	1fff8c2c 	.word	0x1fff8c2c
    6250:	1fff8c3c 	.word	0x1fff8c3c
    6254:	1fff8c30 	.word	0x1fff8c30
    6258:	1fff8c40 	.word	0x1fff8c40
    625c:	1fff8c34 	.word	0x1fff8c34
    6260:	1fff8c44 	.word	0x1fff8c44

00006264 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    6264:	b500      	push	{lr}
    6266:	b083      	sub	sp, #12
    6268:	9001      	str	r0, [sp, #4]
    626a:	9100      	str	r1, [sp, #0]
    switch(Command)
    626c:	9b00      	ldr	r3, [sp, #0]
    626e:	2b04      	cmp	r3, #4
    6270:	d010      	beq.n	6294 <Clock_Ip_Command+0x30>
    6272:	9b00      	ldr	r3, [sp, #0]
    6274:	2b04      	cmp	r3, #4
    6276:	d811      	bhi.n	629c <Clock_Ip_Command+0x38>
    6278:	9b00      	ldr	r3, [sp, #0]
    627a:	2b01      	cmp	r3, #1
    627c:	d006      	beq.n	628c <Clock_Ip_Command+0x28>
    627e:	9b00      	ldr	r3, [sp, #0]
    6280:	2b02      	cmp	r3, #2
    6282:	d10b      	bne.n	629c <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    6284:	9801      	ldr	r0, [sp, #4]
    6286:	f7ff fdb3 	bl	5df0 <Clock_Ip_ClockInitializeObjects>
            break;
    628a:	e008      	b.n	629e <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    628c:	9801      	ldr	r0, [sp, #4]
    628e:	f7ff f9db 	bl	5648 <Clock_Ip_SpecificPlatformInitClock>
            break;
    6292:	e004      	b.n	629e <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    6294:	9801      	ldr	r0, [sp, #4]
    6296:	f7ff f8ed 	bl	5474 <DisableSafeClock>
            break;
    629a:	e000      	b.n	629e <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    629c:	bf00      	nop
    }
}
    629e:	bf00      	nop
    62a0:	b003      	add	sp, #12
    62a2:	f85d fb04 	ldr.w	pc, [sp], #4
    62a6:	bf00      	nop

000062a8 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    62a8:	b500      	push	{lr}
    62aa:	b085      	sub	sp, #20
    62ac:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    62ae:	4a20      	ldr	r2, [pc, #128]	; (6330 <Mcu_Init+0x88>)
    62b0:	9b01      	ldr	r3, [sp, #4]
    62b2:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    62b4:	2300      	movs	r3, #0
    62b6:	9303      	str	r3, [sp, #12]
    62b8:	e010      	b.n	62dc <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    62ba:	4b1d      	ldr	r3, [pc, #116]	; (6330 <Mcu_Init+0x88>)
    62bc:	681b      	ldr	r3, [r3, #0]
    62be:	6919      	ldr	r1, [r3, #16]
    62c0:	9a03      	ldr	r2, [sp, #12]
    62c2:	4613      	mov	r3, r2
    62c4:	005b      	lsls	r3, r3, #1
    62c6:	4413      	add	r3, r2
    62c8:	009b      	lsls	r3, r3, #2
    62ca:	440b      	add	r3, r1
    62cc:	681b      	ldr	r3, [r3, #0]
    62ce:	9a03      	ldr	r2, [sp, #12]
    62d0:	b2d1      	uxtb	r1, r2
    62d2:	4a18      	ldr	r2, [pc, #96]	; (6334 <Mcu_Init+0x8c>)
    62d4:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    62d6:	9b03      	ldr	r3, [sp, #12]
    62d8:	3301      	adds	r3, #1
    62da:	9303      	str	r3, [sp, #12]
    62dc:	4b14      	ldr	r3, [pc, #80]	; (6330 <Mcu_Init+0x88>)
    62de:	681b      	ldr	r3, [r3, #0]
    62e0:	689b      	ldr	r3, [r3, #8]
    62e2:	9a03      	ldr	r2, [sp, #12]
    62e4:	429a      	cmp	r2, r3
    62e6:	d3e8      	bcc.n	62ba <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    62e8:	2300      	movs	r3, #0
    62ea:	9303      	str	r3, [sp, #12]
    62ec:	e010      	b.n	6310 <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    62ee:	4b10      	ldr	r3, [pc, #64]	; (6330 <Mcu_Init+0x88>)
    62f0:	681b      	ldr	r3, [r3, #0]
    62f2:	6959      	ldr	r1, [r3, #20]
    62f4:	9a03      	ldr	r2, [sp, #12]
    62f6:	4613      	mov	r3, r2
    62f8:	01db      	lsls	r3, r3, #7
    62fa:	1a9b      	subs	r3, r3, r2
    62fc:	00db      	lsls	r3, r3, #3
    62fe:	440b      	add	r3, r1
    6300:	681b      	ldr	r3, [r3, #0]
    6302:	9a03      	ldr	r2, [sp, #12]
    6304:	b2d1      	uxtb	r1, r2
    6306:	4a0c      	ldr	r2, [pc, #48]	; (6338 <Mcu_Init+0x90>)
    6308:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    630a:	9b03      	ldr	r3, [sp, #12]
    630c:	3301      	adds	r3, #1
    630e:	9303      	str	r3, [sp, #12]
    6310:	4b07      	ldr	r3, [pc, #28]	; (6330 <Mcu_Init+0x88>)
    6312:	681b      	ldr	r3, [r3, #0]
    6314:	68db      	ldr	r3, [r3, #12]
    6316:	9a03      	ldr	r2, [sp, #12]
    6318:	429a      	cmp	r2, r3
    631a:	d3e8      	bcc.n	62ee <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    631c:	4b04      	ldr	r3, [pc, #16]	; (6330 <Mcu_Init+0x88>)
    631e:	681b      	ldr	r3, [r3, #0]
    6320:	699b      	ldr	r3, [r3, #24]
    6322:	4618      	mov	r0, r3
    6324:	f000 f88a 	bl	643c <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    6328:	bf00      	nop
    632a:	b005      	add	sp, #20
    632c:	f85d fb04 	ldr.w	pc, [sp], #4
    6330:	1fff8d20 	.word	0x1fff8d20
    6334:	1fff8d1c 	.word	0x1fff8d1c
    6338:	1fff8d18 	.word	0x1fff8d18

0000633c <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    633c:	b084      	sub	sp, #16
    633e:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    6340:	2301      	movs	r3, #1
    6342:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    6346:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    634a:	4618      	mov	r0, r3
    634c:	b004      	add	sp, #16
    634e:	4770      	bx	lr

00006350 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    6350:	b500      	push	{lr}
    6352:	b085      	sub	sp, #20
    6354:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    6356:	4a0e      	ldr	r2, [pc, #56]	; (6390 <Mcu_InitClock+0x40>)
    6358:	9b01      	ldr	r3, [sp, #4]
    635a:	4413      	add	r3, r2
    635c:	781b      	ldrb	r3, [r3, #0]
    635e:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    6362:	4b0c      	ldr	r3, [pc, #48]	; (6394 <Mcu_InitClock+0x44>)
    6364:	681b      	ldr	r3, [r3, #0]
    6366:	6959      	ldr	r1, [r3, #20]
    6368:	f89d 200f 	ldrb.w	r2, [sp, #15]
    636c:	4613      	mov	r3, r2
    636e:	01db      	lsls	r3, r3, #7
    6370:	1a9b      	subs	r3, r3, r2
    6372:	00db      	lsls	r3, r3, #3
    6374:	440b      	add	r3, r1
    6376:	4618      	mov	r0, r3
    6378:	f000 f86a 	bl	6450 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    637c:	2300      	movs	r3, #0
    637e:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    6382:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    6386:	4618      	mov	r0, r3
    6388:	b005      	add	sp, #20
    638a:	f85d fb04 	ldr.w	pc, [sp], #4
    638e:	bf00      	nop
    6390:	1fff8d18 	.word	0x1fff8d18
    6394:	1fff8d20 	.word	0x1fff8d20

00006398 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    6398:	b500      	push	{lr}
    639a:	b085      	sub	sp, #20
    639c:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    639e:	4a0d      	ldr	r2, [pc, #52]	; (63d4 <Mcu_SetMode+0x3c>)
    63a0:	9b01      	ldr	r3, [sp, #4]
    63a2:	4413      	add	r3, r2
    63a4:	781b      	ldrb	r3, [r3, #0]
    63a6:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    63aa:	f00c fe6b 	bl	13084 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    63ae:	4b0a      	ldr	r3, [pc, #40]	; (63d8 <Mcu_SetMode+0x40>)
    63b0:	681b      	ldr	r3, [r3, #0]
    63b2:	6919      	ldr	r1, [r3, #16]
    63b4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    63b8:	4613      	mov	r3, r2
    63ba:	005b      	lsls	r3, r3, #1
    63bc:	4413      	add	r3, r2
    63be:	009b      	lsls	r3, r3, #2
    63c0:	440b      	add	r3, r1
    63c2:	4618      	mov	r0, r3
    63c4:	f000 f84e 	bl	6464 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    63c8:	f00c fe88 	bl	130dc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    63cc:	bf00      	nop
    63ce:	b005      	add	sp, #20
    63d0:	f85d fb04 	ldr.w	pc, [sp], #4
    63d4:	1fff8d1c 	.word	0x1fff8d1c
    63d8:	1fff8d20 	.word	0x1fff8d20

000063dc <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    63dc:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    63de:	2302      	movs	r3, #2
    63e0:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    63e2:	9b01      	ldr	r3, [sp, #4]
}
    63e4:	4618      	mov	r0, r3
    63e6:	b002      	add	sp, #8
    63e8:	4770      	bx	lr

000063ea <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    63ea:	b500      	push	{lr}
    63ec:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    63ee:	f000 f843 	bl	6478 <Mcu_Ipw_GetResetReason>
    63f2:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    63f4:	9b01      	ldr	r3, [sp, #4]
}
    63f6:	4618      	mov	r0, r3
    63f8:	b003      	add	sp, #12
    63fa:	f85d fb04 	ldr.w	pc, [sp], #4

000063fe <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    63fe:	b500      	push	{lr}
    6400:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    6402:	f000 f83f 	bl	6484 <Mcu_Ipw_GetResetRawValue>
    6406:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    6408:	9b01      	ldr	r3, [sp, #4]
}
    640a:	4618      	mov	r0, r3
    640c:	b003      	add	sp, #12
    640e:	f85d fb04 	ldr.w	pc, [sp], #4

00006412 <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    6412:	b500      	push	{lr}
    6414:	b083      	sub	sp, #12
    6416:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    6418:	9801      	ldr	r0, [sp, #4]
    641a:	f000 f839 	bl	6490 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    641e:	bf00      	nop
    6420:	b003      	add	sp, #12
    6422:	f85d fb04 	ldr.w	pc, [sp], #4

00006426 <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    6426:	b082      	sub	sp, #8
    6428:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    642a:	4b03      	ldr	r3, [pc, #12]	; (6438 <Mcu_ClkSrcFailureNotification+0x12>)
    642c:	681b      	ldr	r3, [r3, #0]
    642e:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    6430:	bf00      	nop
    6432:	b002      	add	sp, #8
    6434:	4770      	bx	lr
    6436:	bf00      	nop
    6438:	1fff8d20 	.word	0x1fff8d20

0000643c <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    643c:	b500      	push	{lr}
    643e:	b083      	sub	sp, #12
    6440:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    6442:	9801      	ldr	r0, [sp, #4]
    6444:	f000 f882 	bl	654c <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    6448:	bf00      	nop
    644a:	b003      	add	sp, #12
    644c:	f85d fb04 	ldr.w	pc, [sp], #4

00006450 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    6450:	b500      	push	{lr}
    6452:	b083      	sub	sp, #12
    6454:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    6456:	9801      	ldr	r0, [sp, #4]
    6458:	f7fc fc6a 	bl	2d30 <Clock_Ip_InitClock>
}
    645c:	bf00      	nop
    645e:	b003      	add	sp, #12
    6460:	f85d fb04 	ldr.w	pc, [sp], #4

00006464 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    6464:	b500      	push	{lr}
    6466:	b083      	sub	sp, #12
    6468:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    646a:	9801      	ldr	r0, [sp, #4]
    646c:	f000 f820 	bl	64b0 <Power_Ip_SetMode>
}
    6470:	bf00      	nop
    6472:	b003      	add	sp, #12
    6474:	f85d fb04 	ldr.w	pc, [sp], #4

00006478 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    6478:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    647a:	f000 f84f 	bl	651c <Power_Ip_GetResetReason>
    647e:	4603      	mov	r3, r0
}
    6480:	4618      	mov	r0, r3
    6482:	bd08      	pop	{r3, pc}

00006484 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    6484:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    6486:	f000 f857 	bl	6538 <Power_Ip_GetResetRawValue>
    648a:	4603      	mov	r3, r0
}
    648c:	4618      	mov	r0, r3
    648e:	bd08      	pop	{r3, pc}

00006490 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    6490:	b500      	push	{lr}
    6492:	b083      	sub	sp, #12
    6494:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    6496:	9b01      	ldr	r3, [sp, #4]
    6498:	2b00      	cmp	r3, #0
    649a:	d102      	bne.n	64a2 <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    649c:	f000 f86c 	bl	6578 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    64a0:	e001      	b.n	64a6 <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    64a2:	f000 f86e 	bl	6582 <Power_Ip_EnableSleepOnExit>
}
    64a6:	bf00      	nop
    64a8:	b003      	add	sp, #12
    64aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000064b0 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    64b0:	b500      	push	{lr}
    64b2:	b085      	sub	sp, #20
    64b4:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    64b6:	9b01      	ldr	r3, [sp, #4]
    64b8:	685b      	ldr	r3, [r3, #4]
    64ba:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    64bc:	9802      	ldr	r0, [sp, #8]
    64be:	f000 f9f5 	bl	68ac <Power_Ip_SMC_ModeCheckEntry>
    64c2:	4603      	mov	r3, r0
    64c4:	2b00      	cmp	r3, #0
    64c6:	d002      	beq.n	64ce <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    64c8:	2301      	movs	r3, #1
    64ca:	9303      	str	r3, [sp, #12]
    64cc:	e003      	b.n	64d6 <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    64ce:	9801      	ldr	r0, [sp, #4]
    64d0:	f000 fa1e 	bl	6910 <Power_Ip_SMC_ModeConfig>
    64d4:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    64d6:	9b03      	ldr	r3, [sp, #12]
    64d8:	2b01      	cmp	r3, #1
    64da:	d103      	bne.n	64e4 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    64dc:	21ff      	movs	r1, #255	; 0xff
    64de:	2003      	movs	r0, #3
    64e0:	f000 f8f4 	bl	66cc <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    64e4:	bf00      	nop
    64e6:	b005      	add	sp, #20
    64e8:	f85d fb04 	ldr.w	pc, [sp], #4

000064ec <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    64ec:	b084      	sub	sp, #16
    64ee:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    64f0:	230c      	movs	r3, #12
    64f2:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    64f4:	4a08      	ldr	r2, [pc, #32]	; (6518 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    64f6:	9b01      	ldr	r3, [sp, #4]
    64f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    64fc:	2b0e      	cmp	r3, #14
    64fe:	d805      	bhi.n	650c <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    6500:	4a05      	ldr	r2, [pc, #20]	; (6518 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    6502:	9b01      	ldr	r3, [sp, #4]
    6504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6508:	9303      	str	r3, [sp, #12]
    650a:	e001      	b.n	6510 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    650c:	230c      	movs	r3, #12
    650e:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    6510:	9b03      	ldr	r3, [sp, #12]
}
    6512:	4618      	mov	r0, r3
    6514:	b004      	add	sp, #16
    6516:	4770      	bx	lr
    6518:	00016420 	.word	0x00016420

0000651c <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    651c:	b500      	push	{lr}
    651e:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    6520:	f000 f940 	bl	67a4 <Power_Ip_RCM_GetResetReason>
    6524:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    6526:	9801      	ldr	r0, [sp, #4]
    6528:	f7ff ffe0 	bl	64ec <Power_Ip_ConvertIntergeToResetType>
    652c:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    652e:	9b00      	ldr	r3, [sp, #0]
}
    6530:	4618      	mov	r0, r3
    6532:	b003      	add	sp, #12
    6534:	f85d fb04 	ldr.w	pc, [sp], #4

00006538 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    6538:	b500      	push	{lr}
    653a:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    653c:	f000 f98a 	bl	6854 <Power_Ip_RCM_GetResetRawValue>
    6540:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    6542:	9b01      	ldr	r3, [sp, #4]
}
    6544:	4618      	mov	r0, r3
    6546:	b003      	add	sp, #12
    6548:	f85d fb04 	ldr.w	pc, [sp], #4

0000654c <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    654c:	b500      	push	{lr}
    654e:	b083      	sub	sp, #12
    6550:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    6552:	9b01      	ldr	r3, [sp, #4]
    6554:	681b      	ldr	r3, [r3, #0]
    6556:	4618      	mov	r0, r3
    6558:	f000 f90e 	bl	6778 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    655c:	9b01      	ldr	r3, [sp, #4]
    655e:	685b      	ldr	r3, [r3, #4]
    6560:	4618      	mov	r0, r3
    6562:	f000 f86d 	bl	6640 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    6566:	9b01      	ldr	r3, [sp, #4]
    6568:	689b      	ldr	r3, [r3, #8]
    656a:	4618      	mov	r0, r3
    656c:	f000 f990 	bl	6890 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    6570:	bf00      	nop
    6572:	b003      	add	sp, #12
    6574:	f85d fb04 	ldr.w	pc, [sp], #4

00006578 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    6578:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    657a:	f000 f811 	bl	65a0 <Power_Ip_CM4_DisableSleepOnExit>
}
    657e:	bf00      	nop
    6580:	bd08      	pop	{r3, pc}

00006582 <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    6582:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    6584:	f000 f820 	bl	65c8 <Power_Ip_CM4_EnableSleepOnExit>
}
    6588:	bf00      	nop
    658a:	bd08      	pop	{r3, pc}

0000658c <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    658c:	b082      	sub	sp, #8
    658e:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    6590:	4a02      	ldr	r2, [pc, #8]	; (659c <Power_Ip_InstallNotificationsCallback+0x10>)
    6592:	9b01      	ldr	r3, [sp, #4]
    6594:	6013      	str	r3, [r2, #0]
}
    6596:	bf00      	nop
    6598:	b002      	add	sp, #8
    659a:	4770      	bx	lr
    659c:	1fff8b1c 	.word	0x1fff8b1c

000065a0 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    65a0:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    65a2:	2300      	movs	r3, #0
    65a4:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    65a6:	4b07      	ldr	r3, [pc, #28]	; (65c4 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    65a8:	681b      	ldr	r3, [r3, #0]
    65aa:	685b      	ldr	r3, [r3, #4]
    65ac:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    65ae:	9b01      	ldr	r3, [sp, #4]
    65b0:	f023 0302 	bic.w	r3, r3, #2
    65b4:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    65b6:	4b03      	ldr	r3, [pc, #12]	; (65c4 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    65b8:	681b      	ldr	r3, [r3, #0]
    65ba:	9a01      	ldr	r2, [sp, #4]
    65bc:	605a      	str	r2, [r3, #4]
}
    65be:	bf00      	nop
    65c0:	b002      	add	sp, #8
    65c2:	4770      	bx	lr
    65c4:	1fff8b20 	.word	0x1fff8b20

000065c8 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    65c8:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    65ca:	2300      	movs	r3, #0
    65cc:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    65ce:	4b07      	ldr	r3, [pc, #28]	; (65ec <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    65d0:	681b      	ldr	r3, [r3, #0]
    65d2:	685b      	ldr	r3, [r3, #4]
    65d4:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    65d6:	9b01      	ldr	r3, [sp, #4]
    65d8:	f043 0302 	orr.w	r3, r3, #2
    65dc:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    65de:	4b03      	ldr	r3, [pc, #12]	; (65ec <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    65e0:	681b      	ldr	r3, [r3, #0]
    65e2:	9a01      	ldr	r2, [sp, #4]
    65e4:	605a      	str	r2, [r3, #4]
}
    65e6:	bf00      	nop
    65e8:	b002      	add	sp, #8
    65ea:	4770      	bx	lr
    65ec:	1fff8b20 	.word	0x1fff8b20

000065f0 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    65f0:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    65f2:	2300      	movs	r3, #0
    65f4:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    65f6:	4b07      	ldr	r3, [pc, #28]	; (6614 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    65f8:	681b      	ldr	r3, [r3, #0]
    65fa:	685b      	ldr	r3, [r3, #4]
    65fc:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    65fe:	9b01      	ldr	r3, [sp, #4]
    6600:	f043 0304 	orr.w	r3, r3, #4
    6604:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    6606:	4b03      	ldr	r3, [pc, #12]	; (6614 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    6608:	681b      	ldr	r3, [r3, #0]
    660a:	9a01      	ldr	r2, [sp, #4]
    660c:	605a      	str	r2, [r3, #4]
}
    660e:	bf00      	nop
    6610:	b002      	add	sp, #8
    6612:	4770      	bx	lr
    6614:	1fff8b20 	.word	0x1fff8b20

00006618 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    6618:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    661a:	2300      	movs	r3, #0
    661c:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    661e:	4b07      	ldr	r3, [pc, #28]	; (663c <Power_Ip_CM4_DisableDeepSleep+0x24>)
    6620:	681b      	ldr	r3, [r3, #0]
    6622:	685b      	ldr	r3, [r3, #4]
    6624:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    6626:	9b01      	ldr	r3, [sp, #4]
    6628:	f023 0304 	bic.w	r3, r3, #4
    662c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    662e:	4b03      	ldr	r3, [pc, #12]	; (663c <Power_Ip_CM4_DisableDeepSleep+0x24>)
    6630:	681b      	ldr	r3, [r3, #0]
    6632:	9a01      	ldr	r2, [sp, #4]
    6634:	605a      	str	r2, [r3, #4]
}
    6636:	bf00      	nop
    6638:	b002      	add	sp, #8
    663a:	4770      	bx	lr
    663c:	1fff8b20 	.word	0x1fff8b20

00006640 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    6640:	b084      	sub	sp, #16
    6642:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    6644:	4b20      	ldr	r3, [pc, #128]	; (66c8 <Power_Ip_PMC_PowerInit+0x88>)
    6646:	781b      	ldrb	r3, [r3, #0]
    6648:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    664c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6650:	f003 030f 	and.w	r3, r3, #15
    6654:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    6658:	9b01      	ldr	r3, [sp, #4]
    665a:	781a      	ldrb	r2, [r3, #0]
    665c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6660:	4313      	orrs	r3, r2
    6662:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    6666:	4a18      	ldr	r2, [pc, #96]	; (66c8 <Power_Ip_PMC_PowerInit+0x88>)
    6668:	f89d 300f 	ldrb.w	r3, [sp, #15]
    666c:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    666e:	4b16      	ldr	r3, [pc, #88]	; (66c8 <Power_Ip_PMC_PowerInit+0x88>)
    6670:	785b      	ldrb	r3, [r3, #1]
    6672:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    6676:	f89d 300f 	ldrb.w	r3, [sp, #15]
    667a:	f003 031f 	and.w	r3, r3, #31
    667e:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    6682:	9b01      	ldr	r3, [sp, #4]
    6684:	785a      	ldrb	r2, [r3, #1]
    6686:	f89d 300f 	ldrb.w	r3, [sp, #15]
    668a:	4313      	orrs	r3, r2
    668c:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    6690:	4a0d      	ldr	r2, [pc, #52]	; (66c8 <Power_Ip_PMC_PowerInit+0x88>)
    6692:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6696:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    6698:	4b0b      	ldr	r3, [pc, #44]	; (66c8 <Power_Ip_PMC_PowerInit+0x88>)
    669a:	789b      	ldrb	r3, [r3, #2]
    669c:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    66a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    66a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
    66a8:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    66ac:	9b01      	ldr	r3, [sp, #4]
    66ae:	789a      	ldrb	r2, [r3, #2]
    66b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    66b4:	4313      	orrs	r3, r2
    66b6:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    66ba:	4a03      	ldr	r2, [pc, #12]	; (66c8 <Power_Ip_PMC_PowerInit+0x88>)
    66bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    66c0:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    66c2:	bf00      	nop
    66c4:	b004      	add	sp, #16
    66c6:	4770      	bx	lr
    66c8:	4007d000 	.word	0x4007d000

000066cc <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    66cc:	b500      	push	{lr}
    66ce:	b083      	sub	sp, #12
    66d0:	9001      	str	r0, [sp, #4]
    66d2:	460b      	mov	r3, r1
    66d4:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    66d8:	4b05      	ldr	r3, [pc, #20]	; (66f0 <Power_Ip_ReportPowerErrors+0x24>)
    66da:	681b      	ldr	r3, [r3, #0]
    66dc:	f89d 2003 	ldrb.w	r2, [sp, #3]
    66e0:	4611      	mov	r1, r2
    66e2:	9801      	ldr	r0, [sp, #4]
    66e4:	4798      	blx	r3
}
    66e6:	bf00      	nop
    66e8:	b003      	add	sp, #12
    66ea:	f85d fb04 	ldr.w	pc, [sp], #4
    66ee:	bf00      	nop
    66f0:	1fff8b1c 	.word	0x1fff8b1c

000066f4 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    66f4:	b082      	sub	sp, #8
    66f6:	9001      	str	r0, [sp, #4]
    66f8:	460b      	mov	r3, r1
    66fa:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    66fe:	bf00      	nop
    6700:	b002      	add	sp, #8
    6702:	4770      	bx	lr

00006704 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    6704:	b500      	push	{lr}
    6706:	b085      	sub	sp, #20
    6708:	9003      	str	r0, [sp, #12]
    670a:	9102      	str	r1, [sp, #8]
    670c:	9201      	str	r2, [sp, #4]
    670e:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    6710:	2000      	movs	r0, #0
    6712:	f7fc f83d 	bl	2790 <OsIf_GetCounter>
    6716:	4602      	mov	r2, r0
    6718:	9b03      	ldr	r3, [sp, #12]
    671a:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    671c:	9b02      	ldr	r3, [sp, #8]
    671e:	2200      	movs	r2, #0
    6720:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    6722:	2100      	movs	r1, #0
    6724:	9800      	ldr	r0, [sp, #0]
    6726:	f7fc f87f 	bl	2828 <OsIf_MicrosToTicks>
    672a:	4602      	mov	r2, r0
    672c:	9b01      	ldr	r3, [sp, #4]
    672e:	601a      	str	r2, [r3, #0]
}
    6730:	bf00      	nop
    6732:	b005      	add	sp, #20
    6734:	f85d fb04 	ldr.w	pc, [sp], #4

00006738 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    6738:	b500      	push	{lr}
    673a:	b087      	sub	sp, #28
    673c:	9003      	str	r0, [sp, #12]
    673e:	9102      	str	r1, [sp, #8]
    6740:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    6742:	2300      	movs	r3, #0
    6744:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    6748:	2100      	movs	r1, #0
    674a:	9803      	ldr	r0, [sp, #12]
    674c:	f7fc f839 	bl	27c2 <OsIf_GetElapsed>
    6750:	4602      	mov	r2, r0
    6752:	9b02      	ldr	r3, [sp, #8]
    6754:	681b      	ldr	r3, [r3, #0]
    6756:	441a      	add	r2, r3
    6758:	9b02      	ldr	r3, [sp, #8]
    675a:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    675c:	9b02      	ldr	r3, [sp, #8]
    675e:	681b      	ldr	r3, [r3, #0]
    6760:	9a01      	ldr	r2, [sp, #4]
    6762:	429a      	cmp	r2, r3
    6764:	d802      	bhi.n	676c <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    6766:	2301      	movs	r3, #1
    6768:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    676c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    6770:	4618      	mov	r0, r3
    6772:	b007      	add	sp, #28
    6774:	f85d fb04 	ldr.w	pc, [sp], #4

00006778 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    6778:	b082      	sub	sp, #8
    677a:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    677c:	9b01      	ldr	r3, [sp, #4]
    677e:	681a      	ldr	r2, [r3, #0]
    6780:	4907      	ldr	r1, [pc, #28]	; (67a0 <Power_Ip_RCM_ResetInit+0x28>)
    6782:	f641 7307 	movw	r3, #7943	; 0x1f07
    6786:	4013      	ands	r3, r2
    6788:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    678a:	9b01      	ldr	r3, [sp, #4]
    678c:	685a      	ldr	r2, [r3, #4]
    678e:	4904      	ldr	r1, [pc, #16]	; (67a0 <Power_Ip_RCM_ResetInit+0x28>)
    6790:	f642 73ff 	movw	r3, #12287	; 0x2fff
    6794:	4013      	ands	r3, r2
    6796:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    6798:	bf00      	nop
    679a:	b002      	add	sp, #8
    679c:	4770      	bx	lr
    679e:	bf00      	nop
    67a0:	4007f000 	.word	0x4007f000

000067a4 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    67a4:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    67a6:	230c      	movs	r3, #12
    67a8:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    67aa:	2300      	movs	r3, #0
    67ac:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    67ae:	2300      	movs	r3, #0
    67b0:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    67b2:	2300      	movs	r3, #0
    67b4:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    67b6:	4b25      	ldr	r3, [pc, #148]	; (684c <Power_Ip_RCM_GetResetReason+0xa8>)
    67b8:	699a      	ldr	r2, [r3, #24]
    67ba:	f642 73ee 	movw	r3, #12270	; 0x2fee
    67be:	4013      	ands	r3, r2
    67c0:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    67c2:	9b03      	ldr	r3, [sp, #12]
    67c4:	2b00      	cmp	r3, #0
    67c6:	d008      	beq.n	67da <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    67c8:	4920      	ldr	r1, [pc, #128]	; (684c <Power_Ip_RCM_GetResetReason+0xa8>)
    67ca:	9a03      	ldr	r2, [sp, #12]
    67cc:	f642 73ee 	movw	r3, #12270	; 0x2fee
    67d0:	4013      	ands	r3, r2
    67d2:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    67d4:	4a1e      	ldr	r2, [pc, #120]	; (6850 <Power_Ip_RCM_GetResetReason+0xac>)
    67d6:	9b03      	ldr	r3, [sp, #12]
    67d8:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    67da:	4b1d      	ldr	r3, [pc, #116]	; (6850 <Power_Ip_RCM_GetResetReason+0xac>)
    67dc:	681b      	ldr	r3, [r3, #0]
    67de:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    67e0:	9a02      	ldr	r2, [sp, #8]
    67e2:	f642 73ee 	movw	r3, #12270	; 0x2fee
    67e6:	4013      	ands	r3, r2
    67e8:	2b82      	cmp	r3, #130	; 0x82
    67ea:	d102      	bne.n	67f2 <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    67ec:	2305      	movs	r3, #5
    67ee:	9307      	str	r3, [sp, #28]
    67f0:	e027      	b.n	6842 <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    67f2:	2300      	movs	r3, #0
    67f4:	9306      	str	r3, [sp, #24]
    67f6:	e021      	b.n	683c <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    67f8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    67fc:	9b06      	ldr	r3, [sp, #24]
    67fe:	fa22 f303 	lsr.w	r3, r2, r3
    6802:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    6804:	9a01      	ldr	r2, [sp, #4]
    6806:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    680a:	4013      	ands	r3, r2
    680c:	2b00      	cmp	r3, #0
    680e:	d012      	beq.n	6836 <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    6810:	9a01      	ldr	r2, [sp, #4]
    6812:	9b02      	ldr	r3, [sp, #8]
    6814:	4013      	ands	r3, r2
    6816:	2b00      	cmp	r3, #0
    6818:	d00a      	beq.n	6830 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    681a:	9b05      	ldr	r3, [sp, #20]
    681c:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    681e:	9b04      	ldr	r3, [sp, #16]
    6820:	3301      	adds	r3, #1
    6822:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    6824:	9b04      	ldr	r3, [sp, #16]
    6826:	2b01      	cmp	r3, #1
    6828:	d902      	bls.n	6830 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    682a:	230d      	movs	r3, #13
    682c:	9307      	str	r3, [sp, #28]
                        break;
    682e:	e008      	b.n	6842 <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    6830:	9b05      	ldr	r3, [sp, #20]
    6832:	3301      	adds	r3, #1
    6834:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    6836:	9b06      	ldr	r3, [sp, #24]
    6838:	3301      	adds	r3, #1
    683a:	9306      	str	r3, [sp, #24]
    683c:	9b06      	ldr	r3, [sp, #24]
    683e:	2b1f      	cmp	r3, #31
    6840:	d9da      	bls.n	67f8 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    6842:	9b07      	ldr	r3, [sp, #28]
}
    6844:	4618      	mov	r0, r3
    6846:	b008      	add	sp, #32
    6848:	4770      	bx	lr
    684a:	bf00      	nop
    684c:	4007f000 	.word	0x4007f000
    6850:	1fff8d24 	.word	0x1fff8d24

00006854 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    6854:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    6856:	4b0c      	ldr	r3, [pc, #48]	; (6888 <Power_Ip_RCM_GetResetRawValue+0x34>)
    6858:	699a      	ldr	r2, [r3, #24]
    685a:	f642 73ee 	movw	r3, #12270	; 0x2fee
    685e:	4013      	ands	r3, r2
    6860:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    6862:	9b01      	ldr	r3, [sp, #4]
    6864:	2b00      	cmp	r3, #0
    6866:	d008      	beq.n	687a <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    6868:	4907      	ldr	r1, [pc, #28]	; (6888 <Power_Ip_RCM_GetResetRawValue+0x34>)
    686a:	9a01      	ldr	r2, [sp, #4]
    686c:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6870:	4013      	ands	r3, r2
    6872:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    6874:	4a05      	ldr	r2, [pc, #20]	; (688c <Power_Ip_RCM_GetResetRawValue+0x38>)
    6876:	9b01      	ldr	r3, [sp, #4]
    6878:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    687a:	4b04      	ldr	r3, [pc, #16]	; (688c <Power_Ip_RCM_GetResetRawValue+0x38>)
    687c:	681b      	ldr	r3, [r3, #0]
    687e:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    6880:	9b00      	ldr	r3, [sp, #0]
}
    6882:	4618      	mov	r0, r3
    6884:	b002      	add	sp, #8
    6886:	4770      	bx	lr
    6888:	4007f000 	.word	0x4007f000
    688c:	1fff8d24 	.word	0x1fff8d24

00006890 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    6890:	b082      	sub	sp, #8
    6892:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    6894:	9b01      	ldr	r3, [sp, #4]
    6896:	681b      	ldr	r3, [r3, #0]
    6898:	4a03      	ldr	r2, [pc, #12]	; (68a8 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    689a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    689e:	6093      	str	r3, [r2, #8]
}
    68a0:	bf00      	nop
    68a2:	b002      	add	sp, #8
    68a4:	4770      	bx	lr
    68a6:	bf00      	nop
    68a8:	4007e000 	.word	0x4007e000

000068ac <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    68ac:	b084      	sub	sp, #16
    68ae:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    68b0:	2301      	movs	r3, #1
    68b2:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    68b4:	4b15      	ldr	r3, [pc, #84]	; (690c <Power_Ip_SMC_ModeCheckEntry+0x60>)
    68b6:	695b      	ldr	r3, [r3, #20]
    68b8:	b2db      	uxtb	r3, r3
    68ba:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    68bc:	9b01      	ldr	r3, [sp, #4]
    68be:	2b02      	cmp	r3, #2
    68c0:	d012      	beq.n	68e8 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    68c2:	9b01      	ldr	r3, [sp, #4]
    68c4:	2b02      	cmp	r3, #2
    68c6:	d818      	bhi.n	68fa <Power_Ip_SMC_ModeCheckEntry+0x4e>
    68c8:	9b01      	ldr	r3, [sp, #4]
    68ca:	2b00      	cmp	r3, #0
    68cc:	d003      	beq.n	68d6 <Power_Ip_SMC_ModeCheckEntry+0x2a>
    68ce:	9b01      	ldr	r3, [sp, #4]
    68d0:	2b01      	cmp	r3, #1
    68d2:	d003      	beq.n	68dc <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    68d4:	e011      	b.n	68fa <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    68d6:	2300      	movs	r3, #0
    68d8:	9303      	str	r3, [sp, #12]
            break;
    68da:	e013      	b.n	6904 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    68dc:	9b02      	ldr	r3, [sp, #8]
    68de:	2b01      	cmp	r3, #1
    68e0:	d10d      	bne.n	68fe <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    68e2:	2300      	movs	r3, #0
    68e4:	9303      	str	r3, [sp, #12]
            break;
    68e6:	e00a      	b.n	68fe <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    68e8:	9b02      	ldr	r3, [sp, #8]
    68ea:	2b01      	cmp	r3, #1
    68ec:	d002      	beq.n	68f4 <Power_Ip_SMC_ModeCheckEntry+0x48>
    68ee:	9b02      	ldr	r3, [sp, #8]
    68f0:	2b10      	cmp	r3, #16
    68f2:	d106      	bne.n	6902 <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    68f4:	2300      	movs	r3, #0
    68f6:	9303      	str	r3, [sp, #12]
            break;
    68f8:	e003      	b.n	6902 <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    68fa:	bf00      	nop
    68fc:	e002      	b.n	6904 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    68fe:	bf00      	nop
    6900:	e000      	b.n	6904 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    6902:	bf00      	nop
        }
    }

    return PowerModeCheck;
    6904:	9b03      	ldr	r3, [sp, #12]
}
    6906:	4618      	mov	r0, r3
    6908:	b004      	add	sp, #16
    690a:	4770      	bx	lr
    690c:	4007e000 	.word	0x4007e000

00006910 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    6910:	b500      	push	{lr}
    6912:	b08b      	sub	sp, #44	; 0x2c
    6914:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    6916:	2300      	movs	r3, #0
    6918:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    691a:	2300      	movs	r3, #0
    691c:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    691e:	2300      	movs	r3, #0
    6920:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    6924:	9b01      	ldr	r3, [sp, #4]
    6926:	685b      	ldr	r3, [r3, #4]
    6928:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    692a:	9b08      	ldr	r3, [sp, #32]
    692c:	2b02      	cmp	r3, #2
    692e:	d076      	beq.n	6a1e <Power_Ip_SMC_ModeConfig+0x10e>
    6930:	9b08      	ldr	r3, [sp, #32]
    6932:	2b02      	cmp	r3, #2
    6934:	f200 80ab 	bhi.w	6a8e <Power_Ip_SMC_ModeConfig+0x17e>
    6938:	9b08      	ldr	r3, [sp, #32]
    693a:	2b00      	cmp	r3, #0
    693c:	d003      	beq.n	6946 <Power_Ip_SMC_ModeConfig+0x36>
    693e:	9b08      	ldr	r3, [sp, #32]
    6940:	2b01      	cmp	r3, #1
    6942:	d034      	beq.n	69ae <Power_Ip_SMC_ModeConfig+0x9e>
    6944:	e0a3      	b.n	6a8e <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    6946:	4b58      	ldr	r3, [pc, #352]	; (6aa8 <Power_Ip_SMC_ModeConfig+0x198>)
    6948:	68db      	ldr	r3, [r3, #12]
    694a:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    694c:	9b06      	ldr	r3, [sp, #24]
    694e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    6952:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    6954:	4a54      	ldr	r2, [pc, #336]	; (6aa8 <Power_Ip_SMC_ModeConfig+0x198>)
    6956:	9b06      	ldr	r3, [sp, #24]
    6958:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    695a:	aa02      	add	r2, sp, #8
    695c:	a903      	add	r1, sp, #12
    695e:	a804      	add	r0, sp, #16
    6960:	f24c 3350 	movw	r3, #50000	; 0xc350
    6964:	f7ff fece 	bl	6704 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    6968:	9a02      	ldr	r2, [sp, #8]
    696a:	a903      	add	r1, sp, #12
    696c:	ab04      	add	r3, sp, #16
    696e:	4618      	mov	r0, r3
    6970:	f7ff fee2 	bl	6738 <Power_Ip_TimeoutExpired>
    6974:	4603      	mov	r3, r0
    6976:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    697a:	4b4b      	ldr	r3, [pc, #300]	; (6aa8 <Power_Ip_SMC_ModeConfig+0x198>)
    697c:	695b      	ldr	r3, [r3, #20]
    697e:	f003 0301 	and.w	r3, r3, #1
    6982:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    6984:	9b05      	ldr	r3, [sp, #20]
    6986:	2b01      	cmp	r3, #1
    6988:	d006      	beq.n	6998 <Power_Ip_SMC_ModeConfig+0x88>
    698a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    698e:	f083 0301 	eor.w	r3, r3, #1
    6992:	b2db      	uxtb	r3, r3
    6994:	2b00      	cmp	r3, #0
    6996:	d1e7      	bne.n	6968 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    6998:	f89d 301f 	ldrb.w	r3, [sp, #31]
    699c:	2b00      	cmp	r3, #0
    699e:	d079      	beq.n	6a94 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    69a0:	2301      	movs	r3, #1
    69a2:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    69a4:	21ff      	movs	r1, #255	; 0xff
    69a6:	2000      	movs	r0, #0
    69a8:	f7ff fe90 	bl	66cc <Power_Ip_ReportPowerErrors>
            }

            break;
    69ac:	e072      	b.n	6a94 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    69ae:	4b3e      	ldr	r3, [pc, #248]	; (6aa8 <Power_Ip_SMC_ModeConfig+0x198>)
    69b0:	68db      	ldr	r3, [r3, #12]
    69b2:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    69b4:	9b06      	ldr	r3, [sp, #24]
    69b6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    69ba:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    69bc:	9b06      	ldr	r3, [sp, #24]
    69be:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    69c2:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    69c4:	4a38      	ldr	r2, [pc, #224]	; (6aa8 <Power_Ip_SMC_ModeConfig+0x198>)
    69c6:	9b06      	ldr	r3, [sp, #24]
    69c8:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    69ca:	aa02      	add	r2, sp, #8
    69cc:	a903      	add	r1, sp, #12
    69ce:	a804      	add	r0, sp, #16
    69d0:	f24c 3350 	movw	r3, #50000	; 0xc350
    69d4:	f7ff fe96 	bl	6704 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    69d8:	9a02      	ldr	r2, [sp, #8]
    69da:	a903      	add	r1, sp, #12
    69dc:	ab04      	add	r3, sp, #16
    69de:	4618      	mov	r0, r3
    69e0:	f7ff feaa 	bl	6738 <Power_Ip_TimeoutExpired>
    69e4:	4603      	mov	r3, r0
    69e6:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    69ea:	4b2f      	ldr	r3, [pc, #188]	; (6aa8 <Power_Ip_SMC_ModeConfig+0x198>)
    69ec:	695b      	ldr	r3, [r3, #20]
    69ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
    69f2:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    69f4:	9b05      	ldr	r3, [sp, #20]
    69f6:	2b80      	cmp	r3, #128	; 0x80
    69f8:	d006      	beq.n	6a08 <Power_Ip_SMC_ModeConfig+0xf8>
    69fa:	f89d 301f 	ldrb.w	r3, [sp, #31]
    69fe:	f083 0301 	eor.w	r3, r3, #1
    6a02:	b2db      	uxtb	r3, r3
    6a04:	2b00      	cmp	r3, #0
    6a06:	d1e7      	bne.n	69d8 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    6a08:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6a0c:	2b00      	cmp	r3, #0
    6a0e:	d043      	beq.n	6a98 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6a10:	2301      	movs	r3, #1
    6a12:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6a14:	21ff      	movs	r1, #255	; 0xff
    6a16:	2000      	movs	r0, #0
    6a18:	f7ff fe58 	bl	66cc <Power_Ip_ReportPowerErrors>
            }

            break;
    6a1c:	e03c      	b.n	6a98 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    6a1e:	4b22      	ldr	r3, [pc, #136]	; (6aa8 <Power_Ip_SMC_ModeConfig+0x198>)
    6a20:	68db      	ldr	r3, [r3, #12]
    6a22:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6a24:	9b06      	ldr	r3, [sp, #24]
    6a26:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    6a2a:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    6a2c:	9b06      	ldr	r3, [sp, #24]
    6a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6a32:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    6a34:	4a1c      	ldr	r2, [pc, #112]	; (6aa8 <Power_Ip_SMC_ModeConfig+0x198>)
    6a36:	9b06      	ldr	r3, [sp, #24]
    6a38:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    6a3a:	aa02      	add	r2, sp, #8
    6a3c:	a903      	add	r1, sp, #12
    6a3e:	a804      	add	r0, sp, #16
    6a40:	f24c 3350 	movw	r3, #50000	; 0xc350
    6a44:	f7ff fe5e 	bl	6704 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    6a48:	9a02      	ldr	r2, [sp, #8]
    6a4a:	a903      	add	r1, sp, #12
    6a4c:	ab04      	add	r3, sp, #16
    6a4e:	4618      	mov	r0, r3
    6a50:	f7ff fe72 	bl	6738 <Power_Ip_TimeoutExpired>
    6a54:	4603      	mov	r3, r0
    6a56:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    6a5a:	4b13      	ldr	r3, [pc, #76]	; (6aa8 <Power_Ip_SMC_ModeConfig+0x198>)
    6a5c:	695b      	ldr	r3, [r3, #20]
    6a5e:	f003 0304 	and.w	r3, r3, #4
    6a62:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    6a64:	9b05      	ldr	r3, [sp, #20]
    6a66:	2b04      	cmp	r3, #4
    6a68:	d006      	beq.n	6a78 <Power_Ip_SMC_ModeConfig+0x168>
    6a6a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6a6e:	f083 0301 	eor.w	r3, r3, #1
    6a72:	b2db      	uxtb	r3, r3
    6a74:	2b00      	cmp	r3, #0
    6a76:	d1e7      	bne.n	6a48 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    6a78:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6a7c:	2b00      	cmp	r3, #0
    6a7e:	d00d      	beq.n	6a9c <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6a80:	2301      	movs	r3, #1
    6a82:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6a84:	21ff      	movs	r1, #255	; 0xff
    6a86:	2000      	movs	r0, #0
    6a88:	f7ff fe20 	bl	66cc <Power_Ip_ReportPowerErrors>
            }

            break;
    6a8c:	e006      	b.n	6a9c <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6a8e:	2301      	movs	r3, #1
    6a90:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    6a92:	e004      	b.n	6a9e <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    6a94:	bf00      	nop
    6a96:	e002      	b.n	6a9e <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    6a98:	bf00      	nop
    6a9a:	e000      	b.n	6a9e <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    6a9c:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    6a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    6aa0:	4618      	mov	r0, r3
    6aa2:	b00b      	add	sp, #44	; 0x2c
    6aa4:	f85d fb04 	ldr.w	pc, [sp], #4
    6aa8:	4007e000 	.word	0x4007e000

00006aac <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    6aac:	b500      	push	{lr}
    6aae:	b085      	sub	sp, #20
    6ab0:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    6ab2:	9b01      	ldr	r3, [sp, #4]
    6ab4:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    6ab6:	9803      	ldr	r0, [sp, #12]
    6ab8:	f000 fbc8 	bl	724c <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    6abc:	4a03      	ldr	r2, [pc, #12]	; (6acc <Port_Init+0x20>)
    6abe:	9b03      	ldr	r3, [sp, #12]
    6ac0:	6013      	str	r3, [r2, #0]
        }
    }
}
    6ac2:	bf00      	nop
    6ac4:	b005      	add	sp, #20
    6ac6:	f85d fb04 	ldr.w	pc, [sp], #4
    6aca:	bf00      	nop
    6acc:	1fff8d28 	.word	0x1fff8d28

00006ad0 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    6ad0:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    6ad2:	4b03      	ldr	r3, [pc, #12]	; (6ae0 <Port_RefreshPortDirection+0x10>)
    6ad4:	681b      	ldr	r3, [r3, #0]
    6ad6:	4618      	mov	r0, r3
    6ad8:	f000 fc10 	bl	72fc <Port_Ipw_RefreshPortDirection>
    }
}
    6adc:	bf00      	nop
    6ade:	bd08      	pop	{r3, pc}
    6ae0:	1fff8d28 	.word	0x1fff8d28

00006ae4 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    6ae4:	b086      	sub	sp, #24
    6ae6:	9003      	str	r0, [sp, #12]
    6ae8:	9102      	str	r1, [sp, #8]
    6aea:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    6aec:	23ff      	movs	r3, #255	; 0xff
    6aee:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    6af0:	9b03      	ldr	r3, [sp, #12]
    6af2:	4a39      	ldr	r2, [pc, #228]	; (6bd8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    6af4:	4293      	cmp	r3, r2
    6af6:	d151      	bne.n	6b9c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    6af8:	9b02      	ldr	r3, [sp, #8]
    6afa:	2b10      	cmp	r3, #16
    6afc:	d867      	bhi.n	6bce <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    6afe:	a201      	add	r2, pc, #4	; (adr r2, 6b04 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    6b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6b04:	00006b49 	.word	0x00006b49
    6b08:	00006b57 	.word	0x00006b57
    6b0c:	00006bcf 	.word	0x00006bcf
    6b10:	00006bcf 	.word	0x00006bcf
    6b14:	00006bcf 	.word	0x00006bcf
    6b18:	00006bcf 	.word	0x00006bcf
    6b1c:	00006bcf 	.word	0x00006bcf
    6b20:	00006bcf 	.word	0x00006bcf
    6b24:	00006bcf 	.word	0x00006bcf
    6b28:	00006bcf 	.word	0x00006bcf
    6b2c:	00006bcf 	.word	0x00006bcf
    6b30:	00006bcf 	.word	0x00006bcf
    6b34:	00006bcf 	.word	0x00006bcf
    6b38:	00006b65 	.word	0x00006b65
    6b3c:	00006b73 	.word	0x00006b73
    6b40:	00006b81 	.word	0x00006b81
    6b44:	00006b8f 	.word	0x00006b8f
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    6b48:	2301      	movs	r3, #1
    6b4a:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6b4c:	9a05      	ldr	r2, [sp, #20]
    6b4e:	9b01      	ldr	r3, [sp, #4]
    6b50:	4313      	orrs	r3, r2
    6b52:	9305      	str	r3, [sp, #20]
                break;
    6b54:	e03c      	b.n	6bd0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    6b56:	2302      	movs	r3, #2
    6b58:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6b5a:	9a05      	ldr	r2, [sp, #20]
    6b5c:	9b01      	ldr	r3, [sp, #4]
    6b5e:	4313      	orrs	r3, r2
    6b60:	9305      	str	r3, [sp, #20]
                break;
    6b62:	e035      	b.n	6bd0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    6b64:	2304      	movs	r3, #4
    6b66:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6b68:	9a05      	ldr	r2, [sp, #20]
    6b6a:	9b01      	ldr	r3, [sp, #4]
    6b6c:	4313      	orrs	r3, r2
    6b6e:	9305      	str	r3, [sp, #20]
                break;
    6b70:	e02e      	b.n	6bd0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    6b72:	2308      	movs	r3, #8
    6b74:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6b76:	9a05      	ldr	r2, [sp, #20]
    6b78:	9b01      	ldr	r3, [sp, #4]
    6b7a:	4313      	orrs	r3, r2
    6b7c:	9305      	str	r3, [sp, #20]
                break;
    6b7e:	e027      	b.n	6bd0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    6b80:	230e      	movs	r3, #14
    6b82:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6b84:	9a05      	ldr	r2, [sp, #20]
    6b86:	9b01      	ldr	r3, [sp, #4]
    6b88:	4013      	ands	r3, r2
    6b8a:	9305      	str	r3, [sp, #20]
                break;
    6b8c:	e020      	b.n	6bd0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    6b8e:	230d      	movs	r3, #13
    6b90:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6b92:	9a05      	ldr	r2, [sp, #20]
    6b94:	9b01      	ldr	r3, [sp, #4]
    6b96:	4013      	ands	r3, r2
    6b98:	9305      	str	r3, [sp, #20]
                break;
    6b9a:	e019      	b.n	6bd0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    6b9c:	9b03      	ldr	r3, [sp, #12]
    6b9e:	4a0f      	ldr	r2, [pc, #60]	; (6bdc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    6ba0:	4293      	cmp	r3, r2
    6ba2:	d115      	bne.n	6bd0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    6ba4:	9b02      	ldr	r3, [sp, #8]
    6ba6:	2b00      	cmp	r3, #0
    6ba8:	d003      	beq.n	6bb2 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    6baa:	9b02      	ldr	r3, [sp, #8]
    6bac:	2b01      	cmp	r3, #1
    6bae:	d007      	beq.n	6bc0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    6bb0:	e00e      	b.n	6bd0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    6bb2:	230b      	movs	r3, #11
    6bb4:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6bb6:	9a05      	ldr	r2, [sp, #20]
    6bb8:	9b01      	ldr	r3, [sp, #4]
    6bba:	4013      	ands	r3, r2
    6bbc:	9305      	str	r3, [sp, #20]
                break;
    6bbe:	e007      	b.n	6bd0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    6bc0:	2307      	movs	r3, #7
    6bc2:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6bc4:	9a05      	ldr	r2, [sp, #20]
    6bc6:	9b01      	ldr	r3, [sp, #4]
    6bc8:	4013      	ands	r3, r2
    6bca:	9305      	str	r3, [sp, #20]
                break;
    6bcc:	e000      	b.n	6bd0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    6bce:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    6bd0:	9b05      	ldr	r3, [sp, #20]
}
    6bd2:	4618      	mov	r0, r3
    6bd4:	b006      	add	sp, #24
    6bd6:	4770      	bx	lr
    6bd8:	4004a000 	.word	0x4004a000
    6bdc:	4004b000 	.word	0x4004b000

00006be0 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    6be0:	b500      	push	{lr}
    6be2:	b089      	sub	sp, #36	; 0x24
    6be4:	9003      	str	r0, [sp, #12]
    6be6:	9102      	str	r1, [sp, #8]
    6be8:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    6bea:	9b01      	ldr	r3, [sp, #4]
    6bec:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    6bee:	9b01      	ldr	r3, [sp, #4]
    6bf0:	2b08      	cmp	r3, #8
    6bf2:	d121      	bne.n	6c38 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    6bf4:	4b13      	ldr	r3, [pc, #76]	; (6c44 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6bf6:	685b      	ldr	r3, [r3, #4]
    6bf8:	f003 030f 	and.w	r3, r3, #15
    6bfc:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    6bfe:	9a06      	ldr	r2, [sp, #24]
    6c00:	9902      	ldr	r1, [sp, #8]
    6c02:	9803      	ldr	r0, [sp, #12]
    6c04:	f7ff ff6e 	bl	6ae4 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    6c08:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    6c0a:	9b05      	ldr	r3, [sp, #20]
    6c0c:	2bff      	cmp	r3, #255	; 0xff
    6c0e:	d011      	beq.n	6c34 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    6c10:	f00c fcc8 	bl	135a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    6c14:	4b0b      	ldr	r3, [pc, #44]	; (6c44 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6c16:	685b      	ldr	r3, [r3, #4]
    6c18:	4a0a      	ldr	r2, [pc, #40]	; (6c44 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6c1a:	f023 030f 	bic.w	r3, r3, #15
    6c1e:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    6c20:	4b08      	ldr	r3, [pc, #32]	; (6c44 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6c22:	685a      	ldr	r2, [r3, #4]
    6c24:	9b05      	ldr	r3, [sp, #20]
    6c26:	f003 030f 	and.w	r3, r3, #15
    6c2a:	4906      	ldr	r1, [pc, #24]	; (6c44 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6c2c:	4313      	orrs	r3, r2
    6c2e:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    6c30:	f00c fce4 	bl	135fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    6c34:	2300      	movs	r3, #0
    6c36:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    6c38:	9b07      	ldr	r3, [sp, #28]
}
    6c3a:	4618      	mov	r0, r3
    6c3c:	b009      	add	sp, #36	; 0x24
    6c3e:	f85d fb04 	ldr.w	pc, [sp], #4
    6c42:	bf00      	nop
    6c44:	40048000 	.word	0x40048000

00006c48 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    6c48:	b500      	push	{lr}
    6c4a:	b087      	sub	sp, #28
    6c4c:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    6c4e:	2300      	movs	r3, #0
    6c50:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    6c52:	2300      	movs	r3, #0
    6c54:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    6c56:	2300      	movs	r3, #0
    6c58:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    6c5a:	9b01      	ldr	r3, [sp, #4]
    6c5c:	68db      	ldr	r3, [r3, #12]
    6c5e:	2b02      	cmp	r3, #2
    6c60:	d00a      	beq.n	6c78 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    6c62:	9b05      	ldr	r3, [sp, #20]
    6c64:	f043 0302 	orr.w	r3, r3, #2
    6c68:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    6c6a:	9b01      	ldr	r3, [sp, #4]
    6c6c:	68db      	ldr	r3, [r3, #12]
    6c6e:	f003 0301 	and.w	r3, r3, #1
    6c72:	9a05      	ldr	r2, [sp, #20]
    6c74:	4313      	orrs	r3, r2
    6c76:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    6c78:	9b01      	ldr	r3, [sp, #4]
    6c7a:	699b      	ldr	r3, [r3, #24]
    6c7c:	019b      	lsls	r3, r3, #6
    6c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6c82:	9a05      	ldr	r2, [sp, #20]
    6c84:	4313      	orrs	r3, r2
    6c86:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    6c88:	9b01      	ldr	r3, [sp, #4]
    6c8a:	6a1b      	ldr	r3, [r3, #32]
    6c8c:	03db      	lsls	r3, r3, #15
    6c8e:	b29b      	uxth	r3, r3
    6c90:	9a05      	ldr	r2, [sp, #20]
    6c92:	4313      	orrs	r3, r2
    6c94:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    6c96:	9b01      	ldr	r3, [sp, #4]
    6c98:	7f1b      	ldrb	r3, [r3, #28]
    6c9a:	2b00      	cmp	r3, #0
    6c9c:	d001      	beq.n	6ca2 <Port_Ci_Port_Ip_PinInit+0x5a>
    6c9e:	2310      	movs	r3, #16
    6ca0:	e000      	b.n	6ca4 <Port_Ci_Port_Ip_PinInit+0x5c>
    6ca2:	2300      	movs	r3, #0
    6ca4:	9a05      	ldr	r2, [sp, #20]
    6ca6:	4313      	orrs	r3, r2
    6ca8:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    6caa:	9b01      	ldr	r3, [sp, #4]
    6cac:	691b      	ldr	r3, [r3, #16]
    6cae:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    6cb0:	9b01      	ldr	r3, [sp, #4]
    6cb2:	6818      	ldr	r0, [r3, #0]
    6cb4:	9b01      	ldr	r3, [sp, #4]
    6cb6:	689b      	ldr	r3, [r3, #8]
    6cb8:	9a04      	ldr	r2, [sp, #16]
    6cba:	4619      	mov	r1, r3
    6cbc:	f7ff ff90 	bl	6be0 <Port_Ci_Port_Ip_ConfigureInterleave>
    6cc0:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    6cc2:	9b03      	ldr	r3, [sp, #12]
    6cc4:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    6cc6:	9b04      	ldr	r3, [sp, #16]
    6cc8:	021b      	lsls	r3, r3, #8
    6cca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    6cce:	9a05      	ldr	r2, [sp, #20]
    6cd0:	4313      	orrs	r3, r2
    6cd2:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    6cd4:	f00c facc 	bl	13270 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    6cd8:	9b01      	ldr	r3, [sp, #4]
    6cda:	681b      	ldr	r3, [r3, #0]
    6cdc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    6ce0:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    6ce2:	9b01      	ldr	r3, [sp, #4]
    6ce4:	689b      	ldr	r3, [r3, #8]
    6ce6:	2201      	movs	r2, #1
    6ce8:	fa02 f303 	lsl.w	r3, r2, r3
    6cec:	43db      	mvns	r3, r3
    6cee:	9a02      	ldr	r2, [sp, #8]
    6cf0:	4013      	ands	r3, r2
    6cf2:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    6cf4:	9b01      	ldr	r3, [sp, #4]
    6cf6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    6cfa:	2b00      	cmp	r3, #0
    6cfc:	d001      	beq.n	6d02 <Port_Ci_Port_Ip_PinInit+0xba>
    6cfe:	2201      	movs	r2, #1
    6d00:	e000      	b.n	6d04 <Port_Ci_Port_Ip_PinInit+0xbc>
    6d02:	2200      	movs	r2, #0
    6d04:	9b01      	ldr	r3, [sp, #4]
    6d06:	689b      	ldr	r3, [r3, #8]
    6d08:	fa02 f303 	lsl.w	r3, r2, r3
    6d0c:	9a02      	ldr	r2, [sp, #8]
    6d0e:	4313      	orrs	r3, r2
    6d10:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    6d12:	9b01      	ldr	r3, [sp, #4]
    6d14:	681b      	ldr	r3, [r3, #0]
    6d16:	9a02      	ldr	r2, [sp, #8]
    6d18:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    6d1c:	f00c fad4 	bl	132c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    6d20:	9b04      	ldr	r3, [sp, #16]
    6d22:	2b01      	cmp	r3, #1
    6d24:	d16d      	bne.n	6e02 <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    6d26:	9b01      	ldr	r3, [sp, #4]
    6d28:	695b      	ldr	r3, [r3, #20]
    6d2a:	2b02      	cmp	r3, #2
    6d2c:	d138      	bne.n	6da0 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    6d2e:	9b01      	ldr	r3, [sp, #4]
    6d30:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6d34:	2b01      	cmp	r3, #1
    6d36:	d10f      	bne.n	6d58 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    6d38:	f00c faec 	bl	13314 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    6d3c:	9b01      	ldr	r3, [sp, #4]
    6d3e:	685b      	ldr	r3, [r3, #4]
    6d40:	6859      	ldr	r1, [r3, #4]
    6d42:	9b01      	ldr	r3, [sp, #4]
    6d44:	689b      	ldr	r3, [r3, #8]
    6d46:	2201      	movs	r2, #1
    6d48:	409a      	lsls	r2, r3
    6d4a:	9b01      	ldr	r3, [sp, #4]
    6d4c:	685b      	ldr	r3, [r3, #4]
    6d4e:	430a      	orrs	r2, r1
    6d50:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    6d52:	f00c fb0b 	bl	1336c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    6d56:	e013      	b.n	6d80 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    6d58:	9b01      	ldr	r3, [sp, #4]
    6d5a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6d5e:	2b00      	cmp	r3, #0
    6d60:	d10e      	bne.n	6d80 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    6d62:	f00c fb29 	bl	133b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    6d66:	9b01      	ldr	r3, [sp, #4]
    6d68:	685b      	ldr	r3, [r3, #4]
    6d6a:	6899      	ldr	r1, [r3, #8]
    6d6c:	9b01      	ldr	r3, [sp, #4]
    6d6e:	689b      	ldr	r3, [r3, #8]
    6d70:	2201      	movs	r2, #1
    6d72:	409a      	lsls	r2, r3
    6d74:	9b01      	ldr	r3, [sp, #4]
    6d76:	685b      	ldr	r3, [r3, #4]
    6d78:	430a      	orrs	r2, r1
    6d7a:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    6d7c:	f00c fb48 	bl	13410 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    6d80:	f00c fb6c 	bl	1345c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    6d84:	9b01      	ldr	r3, [sp, #4]
    6d86:	685b      	ldr	r3, [r3, #4]
    6d88:	6959      	ldr	r1, [r3, #20]
    6d8a:	9b01      	ldr	r3, [sp, #4]
    6d8c:	689b      	ldr	r3, [r3, #8]
    6d8e:	2201      	movs	r2, #1
    6d90:	409a      	lsls	r2, r3
    6d92:	9b01      	ldr	r3, [sp, #4]
    6d94:	685b      	ldr	r3, [r3, #4]
    6d96:	430a      	orrs	r2, r1
    6d98:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    6d9a:	f00c fb8b 	bl	134b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    6d9e:	e030      	b.n	6e02 <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    6da0:	f00c fb5c 	bl	1345c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    6da4:	9b01      	ldr	r3, [sp, #4]
    6da6:	685b      	ldr	r3, [r3, #4]
    6da8:	6959      	ldr	r1, [r3, #20]
    6daa:	9b01      	ldr	r3, [sp, #4]
    6dac:	689b      	ldr	r3, [r3, #8]
    6dae:	2201      	movs	r2, #1
    6db0:	fa02 f303 	lsl.w	r3, r2, r3
    6db4:	43da      	mvns	r2, r3
    6db6:	9b01      	ldr	r3, [sp, #4]
    6db8:	685b      	ldr	r3, [r3, #4]
    6dba:	400a      	ands	r2, r1
    6dbc:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    6dbe:	f00c fb79 	bl	134b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    6dc2:	f00c fb9d 	bl	13500 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    6dc6:	9b01      	ldr	r3, [sp, #4]
    6dc8:	685b      	ldr	r3, [r3, #4]
    6dca:	6999      	ldr	r1, [r3, #24]
    6dcc:	9b01      	ldr	r3, [sp, #4]
    6dce:	689b      	ldr	r3, [r3, #8]
    6dd0:	2201      	movs	r2, #1
    6dd2:	fa02 f303 	lsl.w	r3, r2, r3
    6dd6:	43da      	mvns	r2, r3
    6dd8:	9b01      	ldr	r3, [sp, #4]
    6dda:	685b      	ldr	r3, [r3, #4]
    6ddc:	400a      	ands	r2, r1
    6dde:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    6de0:	9b01      	ldr	r3, [sp, #4]
    6de2:	695b      	ldr	r3, [r3, #20]
    6de4:	2b03      	cmp	r3, #3
    6de6:	d10a      	bne.n	6dfe <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    6de8:	9b01      	ldr	r3, [sp, #4]
    6dea:	685b      	ldr	r3, [r3, #4]
    6dec:	6999      	ldr	r1, [r3, #24]
    6dee:	9b01      	ldr	r3, [sp, #4]
    6df0:	689b      	ldr	r3, [r3, #8]
    6df2:	2201      	movs	r2, #1
    6df4:	409a      	lsls	r2, r3
    6df6:	9b01      	ldr	r3, [sp, #4]
    6df8:	685b      	ldr	r3, [r3, #4]
    6dfa:	430a      	orrs	r2, r1
    6dfc:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    6dfe:	f00c fbab 	bl	13558 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    6e02:	9b01      	ldr	r3, [sp, #4]
    6e04:	681b      	ldr	r3, [r3, #0]
    6e06:	9a01      	ldr	r2, [sp, #4]
    6e08:	6892      	ldr	r2, [r2, #8]
    6e0a:	9905      	ldr	r1, [sp, #20]
    6e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    6e10:	bf00      	nop
    6e12:	b007      	add	sp, #28
    6e14:	f85d fb04 	ldr.w	pc, [sp], #4

00006e18 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    6e18:	b500      	push	{lr}
    6e1a:	b085      	sub	sp, #20
    6e1c:	9001      	str	r0, [sp, #4]
    6e1e:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    6e20:	2300      	movs	r3, #0
    6e22:	9303      	str	r3, [sp, #12]
    6e24:	e00d      	b.n	6e42 <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    6e26:	9a03      	ldr	r2, [sp, #12]
    6e28:	4613      	mov	r3, r2
    6e2a:	009b      	lsls	r3, r3, #2
    6e2c:	4413      	add	r3, r2
    6e2e:	00db      	lsls	r3, r3, #3
    6e30:	461a      	mov	r2, r3
    6e32:	9b00      	ldr	r3, [sp, #0]
    6e34:	4413      	add	r3, r2
    6e36:	4618      	mov	r0, r3
    6e38:	f7ff ff06 	bl	6c48 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    6e3c:	9b03      	ldr	r3, [sp, #12]
    6e3e:	3301      	adds	r3, #1
    6e40:	9303      	str	r3, [sp, #12]
    6e42:	9a03      	ldr	r2, [sp, #12]
    6e44:	9b01      	ldr	r3, [sp, #4]
    6e46:	429a      	cmp	r2, r3
    6e48:	d3ed      	bcc.n	6e26 <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    6e4a:	2300      	movs	r3, #0
}
    6e4c:	4618      	mov	r0, r3
    6e4e:	b005      	add	sp, #20
    6e50:	f85d fb04 	ldr.w	pc, [sp], #4

00006e54 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    6e54:	b500      	push	{lr}
    6e56:	b087      	sub	sp, #28
    6e58:	9003      	str	r0, [sp, #12]
    6e5a:	9102      	str	r1, [sp, #8]
    6e5c:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    6e5e:	9a01      	ldr	r2, [sp, #4]
    6e60:	9902      	ldr	r1, [sp, #8]
    6e62:	9803      	ldr	r0, [sp, #12]
    6e64:	f7ff febc 	bl	6be0 <Port_Ci_Port_Ip_ConfigureInterleave>
    6e68:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    6e6a:	f00c fbed 	bl	13648 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    6e6e:	9b03      	ldr	r3, [sp, #12]
    6e70:	9a02      	ldr	r2, [sp, #8]
    6e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6e76:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    6e78:	9b04      	ldr	r3, [sp, #16]
    6e7a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    6e7e:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    6e80:	9b05      	ldr	r3, [sp, #20]
    6e82:	021b      	lsls	r3, r3, #8
    6e84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    6e88:	9a04      	ldr	r2, [sp, #16]
    6e8a:	4313      	orrs	r3, r2
    6e8c:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    6e8e:	9b03      	ldr	r3, [sp, #12]
    6e90:	9a02      	ldr	r2, [sp, #8]
    6e92:	9904      	ldr	r1, [sp, #16]
    6e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    6e98:	f00c fc02 	bl	136a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    6e9c:	bf00      	nop
    6e9e:	b007      	add	sp, #28
    6ea0:	f85d fb04 	ldr.w	pc, [sp], #4

00006ea4 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    6ea4:	b500      	push	{lr}
    6ea6:	b083      	sub	sp, #12
    6ea8:	9001      	str	r0, [sp, #4]
    6eaa:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    6eac:	f00c fc1e 	bl	136ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    6eb0:	9b01      	ldr	r3, [sp, #4]
    6eb2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    6eb6:	2101      	movs	r1, #1
    6eb8:	9b00      	ldr	r3, [sp, #0]
    6eba:	fa01 f303 	lsl.w	r3, r1, r3
    6ebe:	431a      	orrs	r2, r3
    6ec0:	9b01      	ldr	r3, [sp, #4]
    6ec2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    6ec6:	f00c fc3d 	bl	13744 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    6eca:	bf00      	nop
    6ecc:	b003      	add	sp, #12
    6ece:	f85d fb04 	ldr.w	pc, [sp], #4

00006ed2 <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    6ed2:	b500      	push	{lr}
    6ed4:	b083      	sub	sp, #12
    6ed6:	9001      	str	r0, [sp, #4]
    6ed8:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    6eda:	f00c fc59 	bl	13790 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    6ede:	9b01      	ldr	r3, [sp, #4]
    6ee0:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    6ee4:	2101      	movs	r1, #1
    6ee6:	9b00      	ldr	r3, [sp, #0]
    6ee8:	fa01 f303 	lsl.w	r3, r1, r3
    6eec:	43db      	mvns	r3, r3
    6eee:	401a      	ands	r2, r3
    6ef0:	9b01      	ldr	r3, [sp, #4]
    6ef2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    6ef6:	f00c fc77 	bl	137e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    6efa:	bf00      	nop
    6efc:	b003      	add	sp, #12
    6efe:	f85d fb04 	ldr.w	pc, [sp], #4

00006f02 <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    6f02:	b082      	sub	sp, #8
    6f04:	9001      	str	r0, [sp, #4]
    6f06:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    6f08:	9b00      	ldr	r3, [sp, #0]
    6f0a:	785b      	ldrb	r3, [r3, #1]
    6f0c:	f003 0201 	and.w	r2, r3, #1
    6f10:	9b01      	ldr	r3, [sp, #4]
    6f12:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    6f16:	9b00      	ldr	r3, [sp, #0]
    6f18:	789b      	ldrb	r3, [r3, #2]
    6f1a:	f003 021f 	and.w	r2, r3, #31
    6f1e:	9b01      	ldr	r3, [sp, #4]
    6f20:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    6f24:	bf00      	nop
    6f26:	b002      	add	sp, #8
    6f28:	4770      	bx	lr

00006f2a <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    6f2a:	b086      	sub	sp, #24
    6f2c:	9003      	str	r0, [sp, #12]
    6f2e:	9301      	str	r3, [sp, #4]
    6f30:	460b      	mov	r3, r1
    6f32:	f8ad 300a 	strh.w	r3, [sp, #10]
    6f36:	4613      	mov	r3, r2
    6f38:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    6f3c:	2300      	movs	r3, #0
    6f3e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    6f42:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6f46:	f043 0301 	orr.w	r3, r3, #1
    6f4a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    6f4e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6f52:	f043 0302 	orr.w	r3, r3, #2
    6f56:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    6f5a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6f5e:	f043 0310 	orr.w	r3, r3, #16
    6f62:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    6f66:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6f6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6f6e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    6f72:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6f76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    6f7a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    6f7e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6f82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    6f86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    6f8a:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    6f8e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6f92:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    6f96:	4013      	ands	r3, r2
    6f98:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    6f9c:	9b01      	ldr	r3, [sp, #4]
    6f9e:	2b00      	cmp	r3, #0
    6fa0:	d003      	beq.n	6faa <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    6fa2:	9b01      	ldr	r3, [sp, #4]
    6fa4:	2b01      	cmp	r3, #1
    6fa6:	d00a      	beq.n	6fbe <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    6fa8:	e013      	b.n	6fd2 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    6faa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6fae:	041a      	lsls	r2, r3, #16
    6fb0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6fb4:	431a      	orrs	r2, r3
    6fb6:	9b03      	ldr	r3, [sp, #12]
    6fb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    6fbc:	e009      	b.n	6fd2 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    6fbe:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6fc2:	041a      	lsls	r2, r3, #16
    6fc4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6fc8:	431a      	orrs	r2, r3
    6fca:	9b03      	ldr	r3, [sp, #12]
    6fcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    6fd0:	bf00      	nop
    }
}
    6fd2:	bf00      	nop
    6fd4:	b006      	add	sp, #24
    6fd6:	4770      	bx	lr

00006fd8 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    6fd8:	b500      	push	{lr}
    6fda:	b087      	sub	sp, #28
    6fdc:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    6fde:	9b01      	ldr	r3, [sp, #4]
    6fe0:	885b      	ldrh	r3, [r3, #2]
    6fe2:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    6fe6:	9b01      	ldr	r3, [sp, #4]
    6fe8:	689b      	ldr	r3, [r3, #8]
    6fea:	7a1b      	ldrb	r3, [r3, #8]
    6fec:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    6ff0:	9b01      	ldr	r3, [sp, #4]
    6ff2:	689b      	ldr	r3, [r3, #8]
    6ff4:	681b      	ldr	r3, [r3, #0]
    6ff6:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    6ff8:	9b01      	ldr	r3, [sp, #4]
    6ffa:	689b      	ldr	r3, [r3, #8]
    6ffc:	685b      	ldr	r3, [r3, #4]
    6ffe:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    7000:	2300      	movs	r3, #0
    7002:	f8ad 3016 	strh.w	r3, [sp, #22]
    7006:	e111      	b.n	722c <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    7008:	9b02      	ldr	r3, [sp, #8]
    700a:	2b02      	cmp	r3, #2
    700c:	d169      	bne.n	70e2 <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    700e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7012:	2b01      	cmp	r3, #1
    7014:	d11a      	bne.n	704c <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    7016:	9b01      	ldr	r3, [sp, #4]
    7018:	685a      	ldr	r2, [r3, #4]
    701a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    701e:	005b      	lsls	r3, r3, #1
    7020:	4413      	add	r3, r2
    7022:	881b      	ldrh	r3, [r3, #0]
    7024:	f003 021f 	and.w	r2, r3, #31
    7028:	9b01      	ldr	r3, [sp, #4]
    702a:	6859      	ldr	r1, [r3, #4]
    702c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7030:	005b      	lsls	r3, r3, #1
    7032:	440b      	add	r3, r1
    7034:	881b      	ldrh	r3, [r3, #0]
    7036:	095b      	lsrs	r3, r3, #5
    7038:	b29b      	uxth	r3, r3
    703a:	4619      	mov	r1, r3
    703c:	4b81      	ldr	r3, [pc, #516]	; (7244 <Port_Ipw_Init_UnusedPins+0x26c>)
    703e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    7042:	2101      	movs	r1, #1
    7044:	fa01 f202 	lsl.w	r2, r1, r2
    7048:	605a      	str	r2, [r3, #4]
    704a:	e01d      	b.n	7088 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    704c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7050:	2b00      	cmp	r3, #0
    7052:	d119      	bne.n	7088 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    7054:	9b01      	ldr	r3, [sp, #4]
    7056:	685a      	ldr	r2, [r3, #4]
    7058:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    705c:	005b      	lsls	r3, r3, #1
    705e:	4413      	add	r3, r2
    7060:	881b      	ldrh	r3, [r3, #0]
    7062:	f003 021f 	and.w	r2, r3, #31
    7066:	9b01      	ldr	r3, [sp, #4]
    7068:	6859      	ldr	r1, [r3, #4]
    706a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    706e:	005b      	lsls	r3, r3, #1
    7070:	440b      	add	r3, r1
    7072:	881b      	ldrh	r3, [r3, #0]
    7074:	095b      	lsrs	r3, r3, #5
    7076:	b29b      	uxth	r3, r3
    7078:	4619      	mov	r1, r3
    707a:	4b72      	ldr	r3, [pc, #456]	; (7244 <Port_Ipw_Init_UnusedPins+0x26c>)
    707c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    7080:	2101      	movs	r1, #1
    7082:	fa01 f202 	lsl.w	r2, r1, r2
    7086:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    7088:	f00c fbd4 	bl	13834 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    708c:	9b01      	ldr	r3, [sp, #4]
    708e:	685a      	ldr	r2, [r3, #4]
    7090:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7094:	005b      	lsls	r3, r3, #1
    7096:	4413      	add	r3, r2
    7098:	881b      	ldrh	r3, [r3, #0]
    709a:	095b      	lsrs	r3, r3, #5
    709c:	b29b      	uxth	r3, r3
    709e:	461a      	mov	r2, r3
    70a0:	4b68      	ldr	r3, [pc, #416]	; (7244 <Port_Ipw_Init_UnusedPins+0x26c>)
    70a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    70a6:	6959      	ldr	r1, [r3, #20]
    70a8:	9b01      	ldr	r3, [sp, #4]
    70aa:	685a      	ldr	r2, [r3, #4]
    70ac:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    70b0:	005b      	lsls	r3, r3, #1
    70b2:	4413      	add	r3, r2
    70b4:	881b      	ldrh	r3, [r3, #0]
    70b6:	f003 031f 	and.w	r3, r3, #31
    70ba:	2201      	movs	r2, #1
    70bc:	409a      	lsls	r2, r3
    70be:	9b01      	ldr	r3, [sp, #4]
    70c0:	6858      	ldr	r0, [r3, #4]
    70c2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    70c6:	005b      	lsls	r3, r3, #1
    70c8:	4403      	add	r3, r0
    70ca:	881b      	ldrh	r3, [r3, #0]
    70cc:	095b      	lsrs	r3, r3, #5
    70ce:	b29b      	uxth	r3, r3
    70d0:	4618      	mov	r0, r3
    70d2:	4b5c      	ldr	r3, [pc, #368]	; (7244 <Port_Ipw_Init_UnusedPins+0x26c>)
    70d4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    70d8:	430a      	orrs	r2, r1
    70da:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    70dc:	f00c fbd6 	bl	1388c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    70e0:	e086      	b.n	71f0 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    70e2:	f00c fba7 	bl	13834 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    70e6:	9b01      	ldr	r3, [sp, #4]
    70e8:	685a      	ldr	r2, [r3, #4]
    70ea:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    70ee:	005b      	lsls	r3, r3, #1
    70f0:	4413      	add	r3, r2
    70f2:	881b      	ldrh	r3, [r3, #0]
    70f4:	095b      	lsrs	r3, r3, #5
    70f6:	b29b      	uxth	r3, r3
    70f8:	461a      	mov	r2, r3
    70fa:	4b52      	ldr	r3, [pc, #328]	; (7244 <Port_Ipw_Init_UnusedPins+0x26c>)
    70fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7100:	6959      	ldr	r1, [r3, #20]
    7102:	9b01      	ldr	r3, [sp, #4]
    7104:	685a      	ldr	r2, [r3, #4]
    7106:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    710a:	005b      	lsls	r3, r3, #1
    710c:	4413      	add	r3, r2
    710e:	881b      	ldrh	r3, [r3, #0]
    7110:	f003 031f 	and.w	r3, r3, #31
    7114:	2201      	movs	r2, #1
    7116:	fa02 f303 	lsl.w	r3, r2, r3
    711a:	43da      	mvns	r2, r3
    711c:	9b01      	ldr	r3, [sp, #4]
    711e:	6858      	ldr	r0, [r3, #4]
    7120:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7124:	005b      	lsls	r3, r3, #1
    7126:	4403      	add	r3, r0
    7128:	881b      	ldrh	r3, [r3, #0]
    712a:	095b      	lsrs	r3, r3, #5
    712c:	b29b      	uxth	r3, r3
    712e:	4618      	mov	r0, r3
    7130:	4b44      	ldr	r3, [pc, #272]	; (7244 <Port_Ipw_Init_UnusedPins+0x26c>)
    7132:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7136:	400a      	ands	r2, r1
    7138:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    713a:	f00c fba7 	bl	1388c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    713e:	f00c fbcb 	bl	138d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    7142:	9b01      	ldr	r3, [sp, #4]
    7144:	685a      	ldr	r2, [r3, #4]
    7146:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    714a:	005b      	lsls	r3, r3, #1
    714c:	4413      	add	r3, r2
    714e:	881b      	ldrh	r3, [r3, #0]
    7150:	095b      	lsrs	r3, r3, #5
    7152:	b29b      	uxth	r3, r3
    7154:	461a      	mov	r2, r3
    7156:	4b3b      	ldr	r3, [pc, #236]	; (7244 <Port_Ipw_Init_UnusedPins+0x26c>)
    7158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    715c:	6999      	ldr	r1, [r3, #24]
    715e:	9b01      	ldr	r3, [sp, #4]
    7160:	685a      	ldr	r2, [r3, #4]
    7162:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7166:	005b      	lsls	r3, r3, #1
    7168:	4413      	add	r3, r2
    716a:	881b      	ldrh	r3, [r3, #0]
    716c:	f003 031f 	and.w	r3, r3, #31
    7170:	2201      	movs	r2, #1
    7172:	fa02 f303 	lsl.w	r3, r2, r3
    7176:	43da      	mvns	r2, r3
    7178:	9b01      	ldr	r3, [sp, #4]
    717a:	6858      	ldr	r0, [r3, #4]
    717c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7180:	005b      	lsls	r3, r3, #1
    7182:	4403      	add	r3, r0
    7184:	881b      	ldrh	r3, [r3, #0]
    7186:	095b      	lsrs	r3, r3, #5
    7188:	b29b      	uxth	r3, r3
    718a:	4618      	mov	r0, r3
    718c:	4b2d      	ldr	r3, [pc, #180]	; (7244 <Port_Ipw_Init_UnusedPins+0x26c>)
    718e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7192:	400a      	ands	r2, r1
    7194:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    7196:	9b02      	ldr	r3, [sp, #8]
    7198:	2b03      	cmp	r3, #3
    719a:	d127      	bne.n	71ec <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    719c:	9b01      	ldr	r3, [sp, #4]
    719e:	685a      	ldr	r2, [r3, #4]
    71a0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    71a4:	005b      	lsls	r3, r3, #1
    71a6:	4413      	add	r3, r2
    71a8:	881b      	ldrh	r3, [r3, #0]
    71aa:	095b      	lsrs	r3, r3, #5
    71ac:	b29b      	uxth	r3, r3
    71ae:	461a      	mov	r2, r3
    71b0:	4b24      	ldr	r3, [pc, #144]	; (7244 <Port_Ipw_Init_UnusedPins+0x26c>)
    71b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    71b6:	6999      	ldr	r1, [r3, #24]
    71b8:	9b01      	ldr	r3, [sp, #4]
    71ba:	685a      	ldr	r2, [r3, #4]
    71bc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    71c0:	005b      	lsls	r3, r3, #1
    71c2:	4413      	add	r3, r2
    71c4:	881b      	ldrh	r3, [r3, #0]
    71c6:	f003 031f 	and.w	r3, r3, #31
    71ca:	2201      	movs	r2, #1
    71cc:	409a      	lsls	r2, r3
    71ce:	9b01      	ldr	r3, [sp, #4]
    71d0:	6858      	ldr	r0, [r3, #4]
    71d2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    71d6:	005b      	lsls	r3, r3, #1
    71d8:	4403      	add	r3, r0
    71da:	881b      	ldrh	r3, [r3, #0]
    71dc:	095b      	lsrs	r3, r3, #5
    71de:	b29b      	uxth	r3, r3
    71e0:	4618      	mov	r0, r3
    71e2:	4b18      	ldr	r3, [pc, #96]	; (7244 <Port_Ipw_Init_UnusedPins+0x26c>)
    71e4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    71e8:	430a      	orrs	r2, r1
    71ea:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    71ec:	f00c fba0 	bl	13930 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    71f0:	9b01      	ldr	r3, [sp, #4]
    71f2:	685a      	ldr	r2, [r3, #4]
    71f4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    71f8:	005b      	lsls	r3, r3, #1
    71fa:	4413      	add	r3, r2
    71fc:	881b      	ldrh	r3, [r3, #0]
    71fe:	095b      	lsrs	r3, r3, #5
    7200:	b29b      	uxth	r3, r3
    7202:	461a      	mov	r2, r3
    7204:	4b10      	ldr	r3, [pc, #64]	; (7248 <Port_Ipw_Init_UnusedPins+0x270>)
    7206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    720a:	9a01      	ldr	r2, [sp, #4]
    720c:	6851      	ldr	r1, [r2, #4]
    720e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    7212:	0052      	lsls	r2, r2, #1
    7214:	440a      	add	r2, r1
    7216:	8812      	ldrh	r2, [r2, #0]
    7218:	f002 021f 	and.w	r2, r2, #31
    721c:	9903      	ldr	r1, [sp, #12]
    721e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    7222:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7226:	3301      	adds	r3, #1
    7228:	f8ad 3016 	strh.w	r3, [sp, #22]
    722c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    7230:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7234:	429a      	cmp	r2, r3
    7236:	f4ff aee7 	bcc.w	7008 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    723a:	bf00      	nop
    723c:	bf00      	nop
    723e:	b007      	add	sp, #28
    7240:	f85d fb04 	ldr.w	pc, [sp], #4
    7244:	00016470 	.word	0x00016470
    7248:	0001645c 	.word	0x0001645c

0000724c <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    724c:	b500      	push	{lr}
    724e:	b085      	sub	sp, #20
    7250:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    7252:	9b01      	ldr	r3, [sp, #4]
    7254:	7c1b      	ldrb	r3, [r3, #16]
    7256:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    725a:	2300      	movs	r3, #0
    725c:	f8ad 300e 	strh.w	r3, [sp, #14]
    7260:	e035      	b.n	72ce <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    7262:	9b01      	ldr	r3, [sp, #4]
    7264:	695a      	ldr	r2, [r3, #20]
    7266:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    726a:	00db      	lsls	r3, r3, #3
    726c:	4413      	add	r3, r2
    726e:	781b      	ldrb	r3, [r3, #0]
    7270:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    7274:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7278:	4a1f      	ldr	r2, [pc, #124]	; (72f8 <Port_Ipw_Init+0xac>)
    727a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    727e:	9b01      	ldr	r3, [sp, #4]
    7280:	695a      	ldr	r2, [r3, #20]
    7282:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7286:	00db      	lsls	r3, r3, #3
    7288:	4413      	add	r3, r2
    728a:	4619      	mov	r1, r3
    728c:	f7ff fe39 	bl	6f02 <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    7290:	f00c fcbc 	bl	13c0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    7294:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7298:	4a17      	ldr	r2, [pc, #92]	; (72f8 <Port_Ipw_Init+0xac>)
    729a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    729e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    72a2:	9b01      	ldr	r3, [sp, #4]
    72a4:	695a      	ldr	r2, [r3, #20]
    72a6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    72aa:	00db      	lsls	r3, r3, #3
    72ac:	4413      	add	r3, r2
    72ae:	685a      	ldr	r2, [r3, #4]
    72b0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    72b4:	4810      	ldr	r0, [pc, #64]	; (72f8 <Port_Ipw_Init+0xac>)
    72b6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    72ba:	430a      	orrs	r2, r1
    72bc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    72c0:	f00c fcd0 	bl	13c64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    72c4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    72c8:	3301      	adds	r3, #1
    72ca:	f8ad 300e 	strh.w	r3, [sp, #14]
    72ce:	f89d 300d 	ldrb.w	r3, [sp, #13]
    72d2:	b29b      	uxth	r3, r3
    72d4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    72d8:	429a      	cmp	r2, r3
    72da:	d3c2      	bcc.n	7262 <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    72dc:	9b01      	ldr	r3, [sp, #4]
    72de:	6a1b      	ldr	r3, [r3, #32]
    72e0:	4619      	mov	r1, r3
    72e2:	200c      	movs	r0, #12
    72e4:	f7ff fd98 	bl	6e18 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    72e8:	9801      	ldr	r0, [sp, #4]
    72ea:	f7ff fe75 	bl	6fd8 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    72ee:	bf00      	nop
    72f0:	b005      	add	sp, #20
    72f2:	f85d fb04 	ldr.w	pc, [sp], #4
    72f6:	bf00      	nop
    72f8:	0001645c 	.word	0x0001645c

000072fc <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    72fc:	b500      	push	{lr}
    72fe:	b085      	sub	sp, #20
    7300:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    7302:	9b01      	ldr	r3, [sp, #4]
    7304:	881b      	ldrh	r3, [r3, #0]
    7306:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    730a:	2300      	movs	r3, #0
    730c:	f8ad 300e 	strh.w	r3, [sp, #14]
    7310:	e0d2      	b.n	74b8 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    7312:	9b01      	ldr	r3, [sp, #4]
    7314:	68d9      	ldr	r1, [r3, #12]
    7316:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    731a:	4613      	mov	r3, r2
    731c:	009b      	lsls	r3, r3, #2
    731e:	4413      	add	r3, r2
    7320:	009b      	lsls	r3, r3, #2
    7322:	440b      	add	r3, r1
    7324:	7c5b      	ldrb	r3, [r3, #17]
    7326:	f083 0301 	eor.w	r3, r3, #1
    732a:	b2db      	uxtb	r3, r3
    732c:	2b00      	cmp	r3, #0
    732e:	f000 80be 	beq.w	74ae <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    7332:	9b01      	ldr	r3, [sp, #4]
    7334:	68d9      	ldr	r1, [r3, #12]
    7336:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    733a:	4613      	mov	r3, r2
    733c:	009b      	lsls	r3, r3, #2
    733e:	4413      	add	r3, r2
    7340:	009b      	lsls	r3, r3, #2
    7342:	440b      	add	r3, r1
    7344:	7c1b      	ldrb	r3, [r3, #16]
    7346:	2b00      	cmp	r3, #0
    7348:	f000 80b1 	beq.w	74ae <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    734c:	9b01      	ldr	r3, [sp, #4]
    734e:	68d9      	ldr	r1, [r3, #12]
    7350:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7354:	4613      	mov	r3, r2
    7356:	009b      	lsls	r3, r3, #2
    7358:	4413      	add	r3, r2
    735a:	009b      	lsls	r3, r3, #2
    735c:	440b      	add	r3, r1
    735e:	881b      	ldrh	r3, [r3, #0]
    7360:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    7364:	9b01      	ldr	r3, [sp, #4]
    7366:	68d9      	ldr	r1, [r3, #12]
    7368:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    736c:	4613      	mov	r3, r2
    736e:	009b      	lsls	r3, r3, #2
    7370:	4413      	add	r3, r2
    7372:	009b      	lsls	r3, r3, #2
    7374:	440b      	add	r3, r1
    7376:	68db      	ldr	r3, [r3, #12]
    7378:	2b02      	cmp	r3, #2
    737a:	d11d      	bne.n	73b8 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    737c:	f00c fd8e 	bl	13e9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    7380:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7384:	095b      	lsrs	r3, r3, #5
    7386:	b29b      	uxth	r3, r3
    7388:	461a      	mov	r2, r3
    738a:	4b51      	ldr	r3, [pc, #324]	; (74d0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    738c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7390:	6959      	ldr	r1, [r3, #20]
    7392:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7396:	f003 031f 	and.w	r3, r3, #31
    739a:	2201      	movs	r2, #1
    739c:	409a      	lsls	r2, r3
    739e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    73a2:	095b      	lsrs	r3, r3, #5
    73a4:	b29b      	uxth	r3, r3
    73a6:	4618      	mov	r0, r3
    73a8:	4b49      	ldr	r3, [pc, #292]	; (74d0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    73aa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    73ae:	430a      	orrs	r2, r1
    73b0:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    73b2:	f00c fd9f 	bl	13ef4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    73b6:	e07a      	b.n	74ae <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    73b8:	9b01      	ldr	r3, [sp, #4]
    73ba:	68d9      	ldr	r1, [r3, #12]
    73bc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    73c0:	4613      	mov	r3, r2
    73c2:	009b      	lsls	r3, r3, #2
    73c4:	4413      	add	r3, r2
    73c6:	009b      	lsls	r3, r3, #2
    73c8:	440b      	add	r3, r1
    73ca:	68db      	ldr	r3, [r3, #12]
    73cc:	2b01      	cmp	r3, #1
    73ce:	d00b      	beq.n	73e8 <Port_Ipw_RefreshPortDirection+0xec>
    73d0:	9b01      	ldr	r3, [sp, #4]
    73d2:	68d9      	ldr	r1, [r3, #12]
    73d4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    73d8:	4613      	mov	r3, r2
    73da:	009b      	lsls	r3, r3, #2
    73dc:	4413      	add	r3, r2
    73de:	009b      	lsls	r3, r3, #2
    73e0:	440b      	add	r3, r1
    73e2:	68db      	ldr	r3, [r3, #12]
    73e4:	2b03      	cmp	r3, #3
    73e6:	d162      	bne.n	74ae <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    73e8:	f00c fd58 	bl	13e9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    73ec:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    73f0:	095b      	lsrs	r3, r3, #5
    73f2:	b29b      	uxth	r3, r3
    73f4:	461a      	mov	r2, r3
    73f6:	4b36      	ldr	r3, [pc, #216]	; (74d0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    73f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    73fc:	6959      	ldr	r1, [r3, #20]
    73fe:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7402:	f003 031f 	and.w	r3, r3, #31
    7406:	2201      	movs	r2, #1
    7408:	fa02 f303 	lsl.w	r3, r2, r3
    740c:	43da      	mvns	r2, r3
    740e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7412:	095b      	lsrs	r3, r3, #5
    7414:	b29b      	uxth	r3, r3
    7416:	4618      	mov	r0, r3
    7418:	4b2d      	ldr	r3, [pc, #180]	; (74d0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    741a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    741e:	400a      	ands	r2, r1
    7420:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    7422:	f00c fd67 	bl	13ef4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    7426:	f00c fd8b 	bl	13f40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    742a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    742e:	095b      	lsrs	r3, r3, #5
    7430:	b29b      	uxth	r3, r3
    7432:	461a      	mov	r2, r3
    7434:	4b26      	ldr	r3, [pc, #152]	; (74d0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    7436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    743a:	6999      	ldr	r1, [r3, #24]
    743c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7440:	f003 031f 	and.w	r3, r3, #31
    7444:	2201      	movs	r2, #1
    7446:	fa02 f303 	lsl.w	r3, r2, r3
    744a:	43da      	mvns	r2, r3
    744c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7450:	095b      	lsrs	r3, r3, #5
    7452:	b29b      	uxth	r3, r3
    7454:	4618      	mov	r0, r3
    7456:	4b1e      	ldr	r3, [pc, #120]	; (74d0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    7458:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    745c:	400a      	ands	r2, r1
    745e:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    7460:	9b01      	ldr	r3, [sp, #4]
    7462:	68d9      	ldr	r1, [r3, #12]
    7464:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7468:	4613      	mov	r3, r2
    746a:	009b      	lsls	r3, r3, #2
    746c:	4413      	add	r3, r2
    746e:	009b      	lsls	r3, r3, #2
    7470:	440b      	add	r3, r1
    7472:	68db      	ldr	r3, [r3, #12]
    7474:	2b03      	cmp	r3, #3
    7476:	d118      	bne.n	74aa <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    7478:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    747c:	095b      	lsrs	r3, r3, #5
    747e:	b29b      	uxth	r3, r3
    7480:	461a      	mov	r2, r3
    7482:	4b13      	ldr	r3, [pc, #76]	; (74d0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    7484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7488:	6999      	ldr	r1, [r3, #24]
    748a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    748e:	f003 031f 	and.w	r3, r3, #31
    7492:	2201      	movs	r2, #1
    7494:	409a      	lsls	r2, r3
    7496:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    749a:	095b      	lsrs	r3, r3, #5
    749c:	b29b      	uxth	r3, r3
    749e:	4618      	mov	r0, r3
    74a0:	4b0b      	ldr	r3, [pc, #44]	; (74d0 <Port_Ipw_RefreshPortDirection+0x1d4>)
    74a2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    74a6:	430a      	orrs	r2, r1
    74a8:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    74aa:	f00c fd75 	bl	13f98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    74ae:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    74b2:	3301      	adds	r3, #1
    74b4:	f8ad 300e 	strh.w	r3, [sp, #14]
    74b8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    74bc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    74c0:	429a      	cmp	r2, r3
    74c2:	f4ff af26 	bcc.w	7312 <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    74c6:	bf00      	nop
    74c8:	bf00      	nop
    74ca:	b005      	add	sp, #20
    74cc:	f85d fb04 	ldr.w	pc, [sp], #4
    74d0:	00016470 	.word	0x00016470

000074d4 <Dio_ReadChannel>:
*/
Dio_LevelType Dio_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    74d4:	b500      	push	{lr}
    74d6:	b085      	sub	sp, #20
    74d8:	4603      	mov	r3, r0
    74da:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    74de:	2300      	movs	r3, #0
    74e0:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForRead(ChannelId, DIO_READCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_ReadChannel(ChannelId);
    74e4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    74e8:	4618      	mov	r0, r3
    74ea:	f000 f871 	bl	75d0 <Dio_Ipw_ReadChannel>
    74ee:	4603      	mov	r3, r0
    74f0:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return ChannelLevel;
    74f4:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    74f8:	4618      	mov	r0, r3
    74fa:	b005      	add	sp, #20
    74fc:	f85d fb04 	ldr.w	pc, [sp], #4

00007500 <Dio_WriteChannel>:
void Dio_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    7500:	b500      	push	{lr}
    7502:	b083      	sub	sp, #12
    7504:	4603      	mov	r3, r0
    7506:	460a      	mov	r2, r1
    7508:	f8ad 3006 	strh.w	r3, [sp, #6]
    750c:	4613      	mov	r3, r2
    750e:	f88d 3005 	strb.w	r3, [sp, #5]
    {
        Valid = Dio_ValidateChannelLevel(Level);
        if ((Std_ReturnType) E_OK == Valid)
        {
#endif
            Dio_Ipw_WriteChannel(ChannelId, Level);
    7512:	f89d 2005 	ldrb.w	r2, [sp, #5]
    7516:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    751a:	4611      	mov	r1, r2
    751c:	4618      	mov	r0, r3
    751e:	f000 f87d 	bl	761c <Dio_Ipw_WriteChannel>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
        }
    }
#endif

}
    7522:	bf00      	nop
    7524:	b003      	add	sp, #12
    7526:	f85d fb04 	ldr.w	pc, [sp], #4

0000752a <Dio_FlipChannel>:
*/
Dio_LevelType Dio_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    752a:	b500      	push	{lr}
    752c:	b085      	sub	sp, #20
    752e:	4603      	mov	r3, r0
    7530:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    7534:	2300      	movs	r3, #0
    7536:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForWrite(ChannelId, DIO_FLIPCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_FlipChannel(ChannelId);
    753a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    753e:	4618      	mov	r0, r3
    7540:	f000 f892 	bl	7668 <Dio_Ipw_FlipChannel>
    7544:	4603      	mov	r3, r0
    7546:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

   return ChannelLevel;
    754a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    754e:	4618      	mov	r0, r3
    7550:	b005      	add	sp, #20
    7552:	f85d fb04 	ldr.w	pc, [sp], #4

00007556 <Dio_ReadPort>:
*/
Dio_PortLevelType Dio_ReadPort
(
    Dio_PortType PortId
)
{
    7556:	b500      	push	{lr}
    7558:	b085      	sub	sp, #20
    755a:	4603      	mov	r3, r0
    755c:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    7560:	2300      	movs	r3, #0
    7562:	9303      	str	r3, [sp, #12]
    Std_ReturnType Valid = Dio_ValidatePortForRead(PortId, DIO_READPORT_ID);

    if ((Std_ReturnType) E_OK == Valid)
    {
#endif
        PortLevel = Dio_Ipw_ReadPort(PortId);
    7564:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7568:	4618      	mov	r0, r3
    756a:	f000 f8b3 	bl	76d4 <Dio_Ipw_ReadPort>
    756e:	9003      	str	r0, [sp, #12]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return PortLevel;
    7570:	9b03      	ldr	r3, [sp, #12]
}
    7572:	4618      	mov	r0, r3
    7574:	b005      	add	sp, #20
    7576:	f85d fb04 	ldr.w	pc, [sp], #4

0000757a <Dio_WritePort>:
void Dio_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    757a:	b500      	push	{lr}
    757c:	b083      	sub	sp, #12
    757e:	4603      	mov	r3, r0
    7580:	9100      	str	r1, [sp, #0]
    7582:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType Valid = Dio_ValidatePortForWrite(PortId, DIO_WRITEPORT_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        Dio_Ipw_WritePort(PortId, Level);
    7586:	f89d 3007 	ldrb.w	r3, [sp, #7]
    758a:	9900      	ldr	r1, [sp, #0]
    758c:	4618      	mov	r0, r3
    758e:	f000 f8b9 	bl	7704 <Dio_Ipw_WritePort>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif
}
    7592:	bf00      	nop
    7594:	b003      	add	sp, #12
    7596:	f85d fb04 	ldr.w	pc, [sp], #4

0000759a <Dio_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_ReadChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr
)
{
    759a:	b500      	push	{lr}
    759c:	b085      	sub	sp, #20
    759e:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    75a0:	2300      	movs	r3, #0
    75a2:	9303      	str	r3, [sp, #12]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            PortLevel = Dio_Ipw_ReadChannelGroup(ChannelGroupIdPtr);
    75a4:	9801      	ldr	r0, [sp, #4]
    75a6:	f000 f8c5 	bl	7734 <Dio_Ipw_ReadChannelGroup>
    75aa:	9003      	str	r0, [sp, #12]
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */

    return PortLevel;
    75ac:	9b03      	ldr	r3, [sp, #12]
}
    75ae:	4618      	mov	r0, r3
    75b0:	b005      	add	sp, #20
    75b2:	f85d fb04 	ldr.w	pc, [sp], #4

000075b6 <Dio_WriteChannelGroup>:
void Dio_WriteChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr,
    Dio_PortLevelType Level
)
{
    75b6:	b500      	push	{lr}
    75b8:	b083      	sub	sp, #12
    75ba:	9001      	str	r0, [sp, #4]
    75bc:	9100      	str	r1, [sp, #0]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            Dio_Ipw_WriteChannelGroup(ChannelGroupIdPtr, Level);
    75be:	9900      	ldr	r1, [sp, #0]
    75c0:	9801      	ldr	r0, [sp, #4]
    75c2:	f000 f8d7 	bl	7774 <Dio_Ipw_WriteChannelGroup>
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNELGROUP_ID, DIO_E_PARAM_CONFIG);
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */
}
    75c6:	bf00      	nop
    75c8:	b003      	add	sp, #12
    75ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000075d0 <Dio_Ipw_ReadChannel>:
*/
Dio_LevelType Dio_Ipw_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    75d0:	b500      	push	{lr}
    75d2:	b087      	sub	sp, #28
    75d4:	4603      	mov	r3, r0
    75d6:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType) STD_LOW;
    75da:	2300      	movs	r3, #0
    75dc:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    75e0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    75e4:	095b      	lsrs	r3, r3, #5
    75e6:	b29b      	uxth	r3, r3
    75e8:	9304      	str	r3, [sp, #16]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    75ea:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    75ee:	f003 031f 	and.w	r3, r3, #31
    75f2:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    75f4:	4a08      	ldr	r2, [pc, #32]	; (7618 <Dio_Ipw_ReadChannel+0x48>)
    75f6:	9b04      	ldr	r3, [sp, #16]
    75f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75fc:	9302      	str	r3, [sp, #8]

    ChannelLevel = Gpio_Dio_Ip_ReadPin(GpioBase, u32PinIndex);
    75fe:	9903      	ldr	r1, [sp, #12]
    7600:	9802      	ldr	r0, [sp, #8]
    7602:	f000 f940 	bl	7886 <Gpio_Dio_Ip_ReadPin>
    7606:	4603      	mov	r3, r0
    7608:	f88d 3017 	strb.w	r3, [sp, #23]
    return ChannelLevel;
    760c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    7610:	4618      	mov	r0, r3
    7612:	b007      	add	sp, #28
    7614:	f85d fb04 	ldr.w	pc, [sp], #4
    7618:	1fff8b24 	.word	0x1fff8b24

0000761c <Dio_Ipw_WriteChannel>:
void Dio_Ipw_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    761c:	b500      	push	{lr}
    761e:	b087      	sub	sp, #28
    7620:	4603      	mov	r3, r0
    7622:	460a      	mov	r2, r1
    7624:	f8ad 3006 	strh.w	r3, [sp, #6]
    7628:	4613      	mov	r3, r2
    762a:	f88d 3005 	strb.w	r3, [sp, #5]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    762e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7632:	095b      	lsrs	r3, r3, #5
    7634:	b29b      	uxth	r3, r3
    7636:	9305      	str	r3, [sp, #20]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    7638:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    763c:	f003 031f 	and.w	r3, r3, #31
    7640:	9304      	str	r3, [sp, #16]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    7642:	4a08      	ldr	r2, [pc, #32]	; (7664 <Dio_Ipw_WriteChannel+0x48>)
    7644:	9b05      	ldr	r3, [sp, #20]
    7646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    764a:	9303      	str	r3, [sp, #12]

    Gpio_Dio_Ip_WritePin(GpioBase, u32PinIndex, Level);
    764c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7650:	461a      	mov	r2, r3
    7652:	9904      	ldr	r1, [sp, #16]
    7654:	9803      	ldr	r0, [sp, #12]
    7656:	f000 f8b7 	bl	77c8 <Gpio_Dio_Ip_WritePin>
}
    765a:	bf00      	nop
    765c:	b007      	add	sp, #28
    765e:	f85d fb04 	ldr.w	pc, [sp], #4
    7662:	bf00      	nop
    7664:	1fff8b24 	.word	0x1fff8b24

00007668 <Dio_Ipw_FlipChannel>:
*/
Dio_LevelType Dio_Ipw_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    7668:	b500      	push	{lr}
    766a:	b089      	sub	sp, #36	; 0x24
    766c:	4603      	mov	r3, r0
    766e:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    7672:	2300      	movs	r3, #0
    7674:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;
    uint32 u32PortOutPutLevel;
    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    7678:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    767c:	095b      	lsrs	r3, r3, #5
    767e:	b29b      	uxth	r3, r3
    7680:	9306      	str	r3, [sp, #24]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    7682:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7686:	f003 031f 	and.w	r3, r3, #31
    768a:	9305      	str	r3, [sp, #20]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    768c:	4a10      	ldr	r2, [pc, #64]	; (76d0 <Dio_Ipw_FlipChannel+0x68>)
    768e:	9b06      	ldr	r3, [sp, #24]
    7690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7694:	9304      	str	r3, [sp, #16]

    Gpio_Dio_Ip_TogglePins(GpioBase, ((uint32)1U << u32PinIndex));
    7696:	2201      	movs	r2, #1
    7698:	9b05      	ldr	r3, [sp, #20]
    769a:	fa02 f303 	lsl.w	r3, r2, r3
    769e:	4619      	mov	r1, r3
    76a0:	9804      	ldr	r0, [sp, #16]
    76a2:	f000 f8dc 	bl	785e <Gpio_Dio_Ip_TogglePins>

    u32PortOutPutLevel = Gpio_Dio_Ip_GetPinsOutput(GpioBase);
    76a6:	9804      	ldr	r0, [sp, #16]
    76a8:	f000 f8bc 	bl	7824 <Gpio_Dio_Ip_GetPinsOutput>
    76ac:	9003      	str	r0, [sp, #12]
    ChannelLevel = (Dio_LevelType)((u32PortOutPutLevel & ((uint32)1U << u32PinIndex)) >> u32PinIndex);
    76ae:	2201      	movs	r2, #1
    76b0:	9b05      	ldr	r3, [sp, #20]
    76b2:	409a      	lsls	r2, r3
    76b4:	9b03      	ldr	r3, [sp, #12]
    76b6:	401a      	ands	r2, r3
    76b8:	9b05      	ldr	r3, [sp, #20]
    76ba:	fa22 f303 	lsr.w	r3, r2, r3
    76be:	f88d 301f 	strb.w	r3, [sp, #31]

    return ChannelLevel;
    76c2:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    76c6:	4618      	mov	r0, r3
    76c8:	b009      	add	sp, #36	; 0x24
    76ca:	f85d fb04 	ldr.w	pc, [sp], #4
    76ce:	bf00      	nop
    76d0:	1fff8b24 	.word	0x1fff8b24

000076d4 <Dio_Ipw_ReadPort>:
*/
Dio_PortLevelType Dio_Ipw_ReadPort
(
    Dio_PortType PortId
)
{
    76d4:	b500      	push	{lr}
    76d6:	b085      	sub	sp, #20
    76d8:	4603      	mov	r3, r0
    76da:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    76de:	2300      	movs	r3, #0
    76e0:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    76e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    76e6:	4a06      	ldr	r2, [pc, #24]	; (7700 <Dio_Ipw_ReadPort+0x2c>)
    76e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76ec:	9302      	str	r3, [sp, #8]

    PortLevel = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    76ee:	9802      	ldr	r0, [sp, #8]
    76f0:	f000 f8be 	bl	7870 <Gpio_Dio_Ip_ReadPins>
    76f4:	9003      	str	r0, [sp, #12]
#endif
#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#endif

    return PortLevel;
    76f6:	9b03      	ldr	r3, [sp, #12]
}
    76f8:	4618      	mov	r0, r3
    76fa:	b005      	add	sp, #20
    76fc:	f85d fb04 	ldr.w	pc, [sp], #4
    7700:	1fff8b24 	.word	0x1fff8b24

00007704 <Dio_Ipw_WritePort>:
void Dio_Ipw_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    7704:	b500      	push	{lr}
    7706:	b085      	sub	sp, #20
    7708:	4603      	mov	r3, r0
    770a:	9100      	str	r1, [sp, #0]
    770c:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType CrtLevel = Level;
    7710:	9b00      	ldr	r3, [sp, #0]
    7712:	9303      	str	r3, [sp, #12]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    7714:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7718:	4a05      	ldr	r2, [pc, #20]	; (7730 <Dio_Ipw_WritePort+0x2c>)
    771a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    771e:	9302      	str	r3, [sp, #8]

#if (STD_ON == DIO_REVERSEPORTBITS)
    CrtLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(CrtLevel));
#endif /* STD_ON == DIO_REVERSEPORTBITS */
    Gpio_Dio_Ip_WritePins(GpioBase, CrtLevel);
    7720:	9903      	ldr	r1, [sp, #12]
    7722:	9802      	ldr	r0, [sp, #8]
    7724:	f000 f875 	bl	7812 <Gpio_Dio_Ip_WritePins>
}
    7728:	bf00      	nop
    772a:	b005      	add	sp, #20
    772c:	f85d fb04 	ldr.w	pc, [sp], #4
    7730:	1fff8b24 	.word	0x1fff8b24

00007734 <Dio_Ipw_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_Ipw_ReadChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr
)
{
    7734:	b500      	push	{lr}
    7736:	b087      	sub	sp, #28
    7738:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    773a:	2300      	movs	r3, #0
    773c:	9305      	str	r3, [sp, #20]
    Dio_PortLevelType pinsValue;
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    773e:	9b01      	ldr	r3, [sp, #4]
    7740:	781b      	ldrb	r3, [r3, #0]
    7742:	461a      	mov	r2, r3
    7744:	4b0a      	ldr	r3, [pc, #40]	; (7770 <Dio_Ipw_ReadChannelGroup+0x3c>)
    7746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    774a:	9304      	str	r3, [sp, #16]

    pinsValue = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    774c:	9804      	ldr	r0, [sp, #16]
    774e:	f000 f88f 	bl	7870 <Gpio_Dio_Ip_ReadPins>
    7752:	9003      	str	r0, [sp, #12]

#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) << (pChannelGroupIdPtr->u8offset));
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#else
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) >> (pChannelGroupIdPtr->u8offset));
    7754:	9b01      	ldr	r3, [sp, #4]
    7756:	685a      	ldr	r2, [r3, #4]
    7758:	9b03      	ldr	r3, [sp, #12]
    775a:	4013      	ands	r3, r2
    775c:	9a01      	ldr	r2, [sp, #4]
    775e:	7852      	ldrb	r2, [r2, #1]
    7760:	40d3      	lsrs	r3, r2
    7762:	9305      	str	r3, [sp, #20]
#endif

    return PortLevel;
    7764:	9b05      	ldr	r3, [sp, #20]
}
    7766:	4618      	mov	r0, r3
    7768:	b007      	add	sp, #28
    776a:	f85d fb04 	ldr.w	pc, [sp], #4
    776e:	bf00      	nop
    7770:	1fff8b24 	.word	0x1fff8b24

00007774 <Dio_Ipw_WriteChannelGroup>:
void Dio_Ipw_WriteChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr,
    Dio_PortLevelType                 Level
)
{
    7774:	b500      	push	{lr}
    7776:	b087      	sub	sp, #28
    7778:	9001      	str	r0, [sp, #4]
    777a:	9100      	str	r1, [sp, #0]
    Dio_PortLevelType ValueSet;
    Dio_PortLevelType ValueClear;

    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    777c:	9b01      	ldr	r3, [sp, #4]
    777e:	781b      	ldrb	r3, [r3, #0]
    7780:	461a      	mov	r2, r3
    7782:	4b10      	ldr	r3, [pc, #64]	; (77c4 <Dio_Ipw_WriteChannelGroup+0x50>)
    7784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7788:	9305      	str	r3, [sp, #20]

#if (STD_ON == DIO_REVERSEPORTBITS)
    ValueSet = (((Dio_PortLevelType)(Dio_Ipw_ReverseBits(Level)) >> (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
#else
    ValueSet = (((Dio_PortLevelType)(Level) << (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
    778a:	9b01      	ldr	r3, [sp, #4]
    778c:	785b      	ldrb	r3, [r3, #1]
    778e:	461a      	mov	r2, r3
    7790:	9b00      	ldr	r3, [sp, #0]
    7792:	fa03 f202 	lsl.w	r2, r3, r2
    7796:	9b01      	ldr	r3, [sp, #4]
    7798:	685b      	ldr	r3, [r3, #4]
    779a:	4013      	ands	r3, r2
    779c:	9304      	str	r3, [sp, #16]
#endif

    Gpio_Dio_Ip_SetPins(GpioBase, ValueSet);
    779e:	9904      	ldr	r1, [sp, #16]
    77a0:	9805      	ldr	r0, [sp, #20]
    77a2:	f000 f84a 	bl	783a <Gpio_Dio_Ip_SetPins>
    ValueClear = (~ValueSet) & pChannelGroupIdPtr->mask;
    77a6:	9b04      	ldr	r3, [sp, #16]
    77a8:	43da      	mvns	r2, r3
    77aa:	9b01      	ldr	r3, [sp, #4]
    77ac:	685b      	ldr	r3, [r3, #4]
    77ae:	4013      	ands	r3, r2
    77b0:	9303      	str	r3, [sp, #12]
    Gpio_Dio_Ip_ClearPins(GpioBase, ValueClear);
    77b2:	9903      	ldr	r1, [sp, #12]
    77b4:	9805      	ldr	r0, [sp, #20]
    77b6:	f000 f849 	bl	784c <Gpio_Dio_Ip_ClearPins>

}
    77ba:	bf00      	nop
    77bc:	b007      	add	sp, #28
    77be:	f85d fb04 	ldr.w	pc, [sp], #4
    77c2:	bf00      	nop
    77c4:	1fff8b24 	.word	0x1fff8b24

000077c8 <Gpio_Dio_Ip_WritePin>:
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pin,
    Gpio_Dio_Ip_PinsLevelType value
)
{
    77c8:	b500      	push	{lr}
    77ca:	b087      	sub	sp, #28
    77cc:	9003      	str	r0, [sp, #12]
    77ce:	9102      	str	r1, [sp, #8]
    77d0:	4613      	mov	r3, r2
    77d2:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Enter critical region */
    SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00();
    77d6:	f00b fbb1 	bl	12f3c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>
    Gpio_Dio_Ip_PinsChannelType pinsValues = (Gpio_Dio_Ip_PinsChannelType)base->PDOR;
    77da:	9b03      	ldr	r3, [sp, #12]
    77dc:	681b      	ldr	r3, [r3, #0]
    77de:	9305      	str	r3, [sp, #20]
    pinsValues &= (Gpio_Dio_Ip_PinsChannelType)(~((Gpio_Dio_Ip_PinsChannelType)1U << pin));
    77e0:	2201      	movs	r2, #1
    77e2:	9b02      	ldr	r3, [sp, #8]
    77e4:	fa02 f303 	lsl.w	r3, r2, r3
    77e8:	43db      	mvns	r3, r3
    77ea:	9a05      	ldr	r2, [sp, #20]
    77ec:	4013      	ands	r3, r2
    77ee:	9305      	str	r3, [sp, #20]
    pinsValues |= (Gpio_Dio_Ip_PinsChannelType)((Gpio_Dio_Ip_PinsChannelType)value << pin);
    77f0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    77f4:	9b02      	ldr	r3, [sp, #8]
    77f6:	fa02 f303 	lsl.w	r3, r2, r3
    77fa:	9a05      	ldr	r2, [sp, #20]
    77fc:	4313      	orrs	r3, r2
    77fe:	9305      	str	r3, [sp, #20]
    base->PDOR = GPIO_PDOR_PDO(pinsValues);
    7800:	9b03      	ldr	r3, [sp, #12]
    7802:	9a05      	ldr	r2, [sp, #20]
    7804:	601a      	str	r2, [r3, #0]
    /* Exit critical region */
    SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00();
    7806:	f00b fbc5 	bl	12f94 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>
}
    780a:	bf00      	nop
    780c:	b007      	add	sp, #28
    780e:	f85d fb04 	ldr.w	pc, [sp], #4

00007812 <Gpio_Dio_Ip_WritePins>:
void Gpio_Dio_Ip_WritePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    7812:	b082      	sub	sp, #8
    7814:	9001      	str	r0, [sp, #4]
    7816:	9100      	str	r1, [sp, #0]
    base->PDOR = GPIO_PDOR_PDO(pins);
    7818:	9b01      	ldr	r3, [sp, #4]
    781a:	9a00      	ldr	r2, [sp, #0]
    781c:	601a      	str	r2, [r3, #0]
}
    781e:	bf00      	nop
    7820:	b002      	add	sp, #8
    7822:	4770      	bx	lr

00007824 <Gpio_Dio_Ip_GetPinsOutput>:
 * that are configured as output will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_GetPinsOutput_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_GetPinsOutput(const GPIO_Type * const base)
{
    7824:	b084      	sub	sp, #16
    7826:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    7828:	2300      	movs	r3, #0
    782a:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDOR);
    782c:	9b01      	ldr	r3, [sp, #4]
    782e:	681b      	ldr	r3, [r3, #0]
    7830:	9303      	str	r3, [sp, #12]
    return returnValue;
    7832:	9b03      	ldr	r3, [sp, #12]
}
    7834:	4618      	mov	r0, r3
    7836:	b004      	add	sp, #16
    7838:	4770      	bx	lr

0000783a <Gpio_Dio_Ip_SetPins>:
void Gpio_Dio_Ip_SetPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    783a:	b082      	sub	sp, #8
    783c:	9001      	str	r0, [sp, #4]
    783e:	9100      	str	r1, [sp, #0]
    base->PSOR = GPIO_PSOR_PTSO(pins);
    7840:	9b01      	ldr	r3, [sp, #4]
    7842:	9a00      	ldr	r2, [sp, #0]
    7844:	605a      	str	r2, [r3, #4]
}
    7846:	bf00      	nop
    7848:	b002      	add	sp, #8
    784a:	4770      	bx	lr

0000784c <Gpio_Dio_Ip_ClearPins>:
void Gpio_Dio_Ip_ClearPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    784c:	b082      	sub	sp, #8
    784e:	9001      	str	r0, [sp, #4]
    7850:	9100      	str	r1, [sp, #0]
    base->PCOR = GPIO_PCOR_PTCO(pins);
    7852:	9b01      	ldr	r3, [sp, #4]
    7854:	9a00      	ldr	r2, [sp, #0]
    7856:	609a      	str	r2, [r3, #8]
}
    7858:	bf00      	nop
    785a:	b002      	add	sp, #8
    785c:	4770      	bx	lr

0000785e <Gpio_Dio_Ip_TogglePins>:
void Gpio_Dio_Ip_TogglePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    785e:	b082      	sub	sp, #8
    7860:	9001      	str	r0, [sp, #4]
    7862:	9100      	str	r1, [sp, #0]
    base->PTOR = GPIO_PTOR_PTTO(pins);
    7864:	9b01      	ldr	r3, [sp, #4]
    7866:	9a00      	ldr	r2, [sp, #0]
    7868:	60da      	str	r2, [r3, #12]
}
    786a:	bf00      	nop
    786c:	b002      	add	sp, #8
    786e:	4770      	bx	lr

00007870 <Gpio_Dio_Ip_ReadPins>:
 * configured as input will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_ReadPins_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_ReadPins(const GPIO_Type * const base)
{
    7870:	b084      	sub	sp, #16
    7872:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    7874:	2300      	movs	r3, #0
    7876:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDIR);
    7878:	9b01      	ldr	r3, [sp, #4]
    787a:	691b      	ldr	r3, [r3, #16]
    787c:	9303      	str	r3, [sp, #12]
    return returnValue;
    787e:	9b03      	ldr	r3, [sp, #12]
}
    7880:	4618      	mov	r0, r3
    7882:	b004      	add	sp, #16
    7884:	4770      	bx	lr

00007886 <Gpio_Dio_Ip_ReadPin>:
 * configured as input will have meaningful value.
 *
 * @implements    Gpio_Dio_Ip_ReadPin_Activity
 */
Gpio_Dio_Ip_PinsLevelType Gpio_Dio_Ip_ReadPin(const GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pin)
{
    7886:	b084      	sub	sp, #16
    7888:	9001      	str	r0, [sp, #4]
    788a:	9100      	str	r1, [sp, #0]
    Gpio_Dio_Ip_PinsLevelType returnValue = 0U;
    788c:	2300      	movs	r3, #0
    788e:	f88d 300f 	strb.w	r3, [sp, #15]
    returnValue  = (Gpio_Dio_Ip_PinsLevelType)(((base->PDIR)&((uint32)1<<pin))>>(pin));
    7892:	9b01      	ldr	r3, [sp, #4]
    7894:	691a      	ldr	r2, [r3, #16]
    7896:	2101      	movs	r1, #1
    7898:	9b00      	ldr	r3, [sp, #0]
    789a:	fa01 f303 	lsl.w	r3, r1, r3
    789e:	401a      	ands	r2, r3
    78a0:	9b00      	ldr	r3, [sp, #0]
    78a2:	fa22 f303 	lsr.w	r3, r2, r3
    78a6:	f88d 300f 	strb.w	r3, [sp, #15]

    return returnValue;
    78aa:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    78ae:	4618      	mov	r0, r3
    78b0:	b004      	add	sp, #16
    78b2:	4770      	bx	lr

000078b4 <Adc_ReportDetRuntimeError>:
* @return     void
* SWS_Adc_00530
*/
static inline void Adc_ReportDetRuntimeError(uint8 ServiceId,
                                             uint8 ErrorId)
{
    78b4:	b500      	push	{lr}
    78b6:	b083      	sub	sp, #12
    78b8:	4603      	mov	r3, r0
    78ba:	460a      	mov	r2, r1
    78bc:	f88d 3007 	strb.w	r3, [sp, #7]
    78c0:	4613      	mov	r3, r2
    78c2:	f88d 3006 	strb.w	r3, [sp, #6]
    (void)Det_ReportRuntimeError((uint16)ADC_MODULE_ID, (uint8)0U, ServiceId, ErrorId);
    78c6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    78ca:	f89d 2007 	ldrb.w	r2, [sp, #7]
    78ce:	2100      	movs	r1, #0
    78d0:	207b      	movs	r0, #123	; 0x7b
    78d2:	f00e f937 	bl	15b44 <Det_ReportRuntimeError>
}
    78d6:	bf00      	nop
    78d8:	b003      	add	sp, #12
    78da:	f85d fb04 	ldr.w	pc, [sp], #4

000078de <Adc_ValidateNotBusyNoQueue>:
* @retval     E_OK:           The call means that unit is not busy
* @retval     E_NOT_OK:       The call means that unit is busy
*/
static inline Std_ReturnType Adc_ValidateNotBusyNoQueue(Adc_HwUnitType Unit,
                                                        uint8 ServiceId)
{
    78de:	b500      	push	{lr}
    78e0:	b085      	sub	sp, #20
    78e2:	4603      	mov	r3, r0
    78e4:	460a      	mov	r2, r1
    78e6:	f88d 3007 	strb.w	r3, [sp, #7]
    78ea:	4613      	mov	r3, r2
    78ec:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    78f0:	2300      	movs	r3, #0
    78f2:	f88d 300f 	strb.w	r3, [sp, #15]
#if (ADC_HW_TRIGGER_API == STD_ON)
    Adc_GroupType OngoingHwGroupId;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    const Adc_QueueIndexType NoGroupsInSwNormalQueue = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    78f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    78fa:	4a0c      	ldr	r2, [pc, #48]	; (792c <Adc_ValidateNotBusyNoQueue+0x4e>)
    78fc:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7900:	f8ad 300c 	strh.w	r3, [sp, #12]
#if (ADC_HW_TRIGGER_API == STD_ON)
    OngoingHwGroupId = Adc_axUnitStatus[Unit].OngoingHwGroup;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    /* CPR_RTD_00035.adc, CPR_RTD_00325.adc, CPR_RTD_00326.adc, CPR_RTD_00327.adc */
    /* Check for ongoing conversions */
    if ((NoGroupsInSwNormalQueue > (Adc_QueueIndexType)0U)
    7904:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7908:	2b00      	cmp	r3, #0
    790a:	d008      	beq.n	791e <Adc_ValidateNotBusyNoQueue+0x40>
        || (OngoingHwGroupId != ADC_INVALID_HW_GROUP_ID)
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
       )
    {
        /* SWS_Adc_00321, SWS_Adc_00346, SWS_Adc_00426 */
        Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
    790c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7910:	210b      	movs	r1, #11
    7912:	4618      	mov	r0, r3
    7914:	f7ff ffce 	bl	78b4 <Adc_ReportDetRuntimeError>
        ErrorFound = (Std_ReturnType)E_NOT_OK;
    7918:	2301      	movs	r3, #1
    791a:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return ErrorFound;
    791e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7922:	4618      	mov	r0, r3
    7924:	b005      	add	sp, #20
    7926:	f85d fb04 	ldr.w	pc, [sp], #4
    792a:	bf00      	nop
    792c:	1fff8d58 	.word	0x1fff8d58

00007930 <Adc_ValidateNotBusyNoPrio>:
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateNotBusyNoPrio(Adc_GroupType Group,
                                                       boolean Implicitly,
                                                       uint8 CoreId)
{
    7930:	b500      	push	{lr}
    7932:	b085      	sub	sp, #20
    7934:	4603      	mov	r3, r0
    7936:	f8ad 3006 	strh.w	r3, [sp, #6]
    793a:	460b      	mov	r3, r1
    793c:	f88d 3005 	strb.w	r3, [sp, #5]
    7940:	4613      	mov	r3, r2
    7942:	f88d 3004 	strb.w	r3, [sp, #4]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    7946:	2301      	movs	r3, #1
    7948:	f88d 300f 	strb.w	r3, [sp, #15]
    ValidState =  Adc_ValidateNotBusyNoQueue(LogicalHwUnitId, ADC_STARTGROUPCONVERSION_ID);

    (void)Implicitly;
    (void)Group;
#else /* ADC_ENABLE_QUEUING == STD_ON */
    Conversion = Adc_axGroupStatus[Group].Conversion;
    794c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7950:	4917      	ldr	r1, [pc, #92]	; (79b0 <Adc_ValidateNotBusyNoPrio+0x80>)
    7952:	4613      	mov	r3, r2
    7954:	009b      	lsls	r3, r3, #2
    7956:	4413      	add	r3, r2
    7958:	009b      	lsls	r3, r3, #2
    795a:	440b      	add	r3, r1
    795c:	681b      	ldr	r3, [r3, #0]
    795e:	9302      	str	r3, [sp, #8]
    /* SWS_Adc_00351 */
    if ((FALSE == Implicitly) && (ADC_IDLE != Conversion))
    7960:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7964:	f083 0301 	eor.w	r3, r3, #1
    7968:	b2db      	uxtb	r3, r3
    796a:	2b00      	cmp	r3, #0
    796c:	d007      	beq.n	797e <Adc_ValidateNotBusyNoPrio+0x4e>
    796e:	9b02      	ldr	r3, [sp, #8]
    7970:	2b00      	cmp	r3, #0
    7972:	d004      	beq.n	797e <Adc_ValidateNotBusyNoPrio+0x4e>
    {
        Adc_ReportDetRuntimeError((uint8)ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    7974:	210b      	movs	r1, #11
    7976:	2002      	movs	r0, #2
    7978:	f7ff ff9c 	bl	78b4 <Adc_ReportDetRuntimeError>
    797c:	e011      	b.n	79a2 <Adc_ValidateNotBusyNoPrio+0x72>
    }
    /* SWS_Adc_00428 */
    else if ((TRUE == Implicitly) && (ADC_IDLE != Conversion) && \
    797e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7982:	2b00      	cmp	r3, #0
    7984:	d00a      	beq.n	799c <Adc_ValidateNotBusyNoPrio+0x6c>
    7986:	9b02      	ldr	r3, [sp, #8]
    7988:	2b00      	cmp	r3, #0
    798a:	d007      	beq.n	799c <Adc_ValidateNotBusyNoPrio+0x6c>
    798c:	9b02      	ldr	r3, [sp, #8]
    798e:	2b03      	cmp	r3, #3
    7990:	d004      	beq.n	799c <Adc_ValidateNotBusyNoPrio+0x6c>
             (ADC_STREAM_COMPLETED != Conversion) \
            )
    {
        Adc_ReportDetRuntimeError((uint8)ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    7992:	210b      	movs	r1, #11
    7994:	2002      	movs	r0, #2
    7996:	f7ff ff8d 	bl	78b4 <Adc_ReportDetRuntimeError>
    799a:	e002      	b.n	79a2 <Adc_ValidateNotBusyNoPrio+0x72>
    }
    else
    {
        ValidState = (Std_ReturnType)E_OK;
    799c:	2300      	movs	r3, #0
    799e:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    (void)CoreId;
#endif /* ADC_ENABLE_QUEUING */

    return ValidState;
    79a2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    79a6:	4618      	mov	r0, r3
    79a8:	b005      	add	sp, #20
    79aa:	f85d fb04 	ldr.w	pc, [sp], #4
    79ae:	bf00      	nop
    79b0:	1fff8d30 	.word	0x1fff8d30

000079b4 <Adc_ValidateCheckGroupNotConversion>:
* @retval       E_OK:           The call means that at least one group is not busy
* @retval       E_NOT_OK:       The call means that at least one group is busy
*/
static inline Std_ReturnType Adc_ValidateCheckGroupNotConversion(uint8 ServiceId,
                                                                 uint8 CoreId)
{
    79b4:	b500      	push	{lr}
    79b6:	b087      	sub	sp, #28
    79b8:	4603      	mov	r3, r0
    79ba:	460a      	mov	r2, r1
    79bc:	f88d 3007 	strb.w	r3, [sp, #7]
    79c0:	4613      	mov	r3, r2
    79c2:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_StatusType Conversion;
    Adc_GroupType GroupIter;
    Adc_GroupType GroupId;
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    79c6:	2300      	movs	r3, #0
    79c8:	f88d 3015 	strb.w	r3, [sp, #21]

    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    79cc:	2300      	movs	r3, #0
    79ce:	f8ad 3016 	strh.w	r3, [sp, #22]
    79d2:	e02c      	b.n	7a2e <Adc_ValidateCheckGroupNotConversion+0x7a>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIter].GroupId;
    79d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    79d8:	4a1d      	ldr	r2, [pc, #116]	; (7a50 <Adc_ValidateCheckGroupNotConversion+0x9c>)
    79da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79de:	685a      	ldr	r2, [r3, #4]
    79e0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    79e4:	2134      	movs	r1, #52	; 0x34
    79e6:	fb01 f303 	mul.w	r3, r1, r3
    79ea:	4413      	add	r3, r2
    79ec:	881b      	ldrh	r3, [r3, #0]
    79ee:	f8ad 3012 	strh.w	r3, [sp, #18]
        Conversion = Adc_axGroupStatus[GroupId].Conversion;
    79f2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    79f6:	4917      	ldr	r1, [pc, #92]	; (7a54 <Adc_ValidateCheckGroupNotConversion+0xa0>)
    79f8:	4613      	mov	r3, r2
    79fa:	009b      	lsls	r3, r3, #2
    79fc:	4413      	add	r3, r2
    79fe:	009b      	lsls	r3, r3, #2
    7a00:	440b      	add	r3, r1
    7a02:	681b      	ldr	r3, [r3, #0]
    7a04:	9303      	str	r3, [sp, #12]
        /*  Check if ADC is still converting */
        /* SWS_Adc_00112 */
        if ((ADC_IDLE != Conversion) && (ADC_STREAM_COMPLETED != Conversion))
    7a06:	9b03      	ldr	r3, [sp, #12]
    7a08:	2b00      	cmp	r3, #0
    7a0a:	d00b      	beq.n	7a24 <Adc_ValidateCheckGroupNotConversion+0x70>
    7a0c:	9b03      	ldr	r3, [sp, #12]
    7a0e:	2b03      	cmp	r3, #3
    7a10:	d008      	beq.n	7a24 <Adc_ValidateCheckGroupNotConversion+0x70>
        {
            Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
    7a12:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7a16:	210b      	movs	r1, #11
    7a18:	4618      	mov	r0, r3
    7a1a:	f7ff ff4b 	bl	78b4 <Adc_ReportDetRuntimeError>
            ErrorFound = (Std_ReturnType)E_NOT_OK;
    7a1e:	2301      	movs	r3, #1
    7a20:	f88d 3015 	strb.w	r3, [sp, #21]
    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    7a24:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7a28:	3301      	adds	r3, #1
    7a2a:	f8ad 3016 	strh.w	r3, [sp, #22]
    7a2e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7a32:	4a07      	ldr	r2, [pc, #28]	; (7a50 <Adc_ValidateCheckGroupNotConversion+0x9c>)
    7a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a38:	891b      	ldrh	r3, [r3, #8]
    7a3a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    7a3e:	429a      	cmp	r2, r3
    7a40:	d3c8      	bcc.n	79d4 <Adc_ValidateCheckGroupNotConversion+0x20>
        }
    }
    return ErrorFound;
    7a42:	f89d 3015 	ldrb.w	r3, [sp, #21]
}
    7a46:	4618      	mov	r0, r3
    7a48:	b007      	add	sp, #28
    7a4a:	f85d fb04 	ldr.w	pc, [sp], #4
    7a4e:	bf00      	nop
    7a50:	1fff8d2c 	.word	0x1fff8d2c
    7a54:	1fff8d30 	.word	0x1fff8d30

00007a58 <Adc_ValidateDeInitNotBusy>:
* @return     Std_ReturnType  Standard return type.
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateDeInitNotBusy(uint8 CoreId)
{
    7a58:	b500      	push	{lr}
    7a5a:	b085      	sub	sp, #20
    7a5c:	4603      	mov	r3, r0
    7a5e:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    7a62:	2300      	movs	r3, #0
    7a64:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    7a68:	2301      	movs	r3, #1
    7a6a:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    7a6e:	2300      	movs	r3, #0
    7a70:	f88d 300d 	strb.w	r3, [sp, #13]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    7a74:	2300      	movs	r3, #0
    7a76:	f88d 300d 	strb.w	r3, [sp, #13]
    7a7a:	e01d      	b.n	7ab8 <Adc_ValidateDeInitNotBusy+0x60>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    7a7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7a80:	4a1b      	ldr	r2, [pc, #108]	; (7af0 <Adc_ValidateDeInitNotBusy+0x98>)
    7a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a86:	681a      	ldr	r2, [r3, #0]
    7a88:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7a8c:	4413      	add	r3, r2
    7a8e:	7f9b      	ldrb	r3, [r3, #30]
    7a90:	2b01      	cmp	r3, #1
    7a92:	d10c      	bne.n	7aae <Adc_ValidateDeInitNotBusy+0x56>
        {
            ErrorFound = Adc_ValidateNotBusyNoQueue(LogicalHwUnitId, ADC_DEINIT_ID);
    7a94:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7a98:	2101      	movs	r1, #1
    7a9a:	4618      	mov	r0, r3
    7a9c:	f7ff ff1f 	bl	78de <Adc_ValidateNotBusyNoQueue>
    7aa0:	4603      	mov	r3, r0
    7aa2:	f88d 300f 	strb.w	r3, [sp, #15]
            if ((Std_ReturnType)E_NOT_OK == ErrorFound)
    7aa6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7aaa:	2b01      	cmp	r3, #1
    7aac:	d009      	beq.n	7ac2 <Adc_ValidateDeInitNotBusy+0x6a>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    7aae:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7ab2:	3301      	adds	r3, #1
    7ab4:	f88d 300d 	strb.w	r3, [sp, #13]
    7ab8:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7abc:	2b01      	cmp	r3, #1
    7abe:	d9dd      	bls.n	7a7c <Adc_ValidateDeInitNotBusy+0x24>
    7ac0:	e000      	b.n	7ac4 <Adc_ValidateDeInitNotBusy+0x6c>
            {
                break;
    7ac2:	bf00      	nop
            }
        }
    }
    if ((Std_ReturnType)E_OK == ErrorFound)
    7ac4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7ac8:	2b00      	cmp	r3, #0
    7aca:	d10b      	bne.n	7ae4 <Adc_ValidateDeInitNotBusy+0x8c>
    {
        if ((Std_ReturnType)E_OK == Adc_ValidateCheckGroupNotConversion(ADC_DEINIT_ID, CoreId))
    7acc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7ad0:	4619      	mov	r1, r3
    7ad2:	2001      	movs	r0, #1
    7ad4:	f7ff ff6e 	bl	79b4 <Adc_ValidateCheckGroupNotConversion>
    7ad8:	4603      	mov	r3, r0
    7ada:	2b00      	cmp	r3, #0
    7adc:	d102      	bne.n	7ae4 <Adc_ValidateDeInitNotBusy+0x8c>
        {
            ValidState = (Std_ReturnType)E_OK;
    7ade:	2300      	movs	r3, #0
    7ae0:	f88d 300e 	strb.w	r3, [sp, #14]
        }
    }

    return ValidState;
    7ae4:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    7ae8:	4618      	mov	r0, r3
    7aea:	b005      	add	sp, #20
    7aec:	f85d fb04 	ldr.w	pc, [sp], #4
    7af0:	1fff8d2c 	.word	0x1fff8d2c

00007af4 <Adc_ValidateSetupBufferNotBusy>:
* @return     Std_ReturnType  Standard return type.
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateSetupBufferNotBusy(Adc_GroupType Group)
{
    7af4:	b500      	push	{lr}
    7af6:	b085      	sub	sp, #20
    7af8:	4603      	mov	r3, r0
    7afa:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    7afe:	2301      	movs	r3, #1
    7b00:	f88d 300f 	strb.w	r3, [sp, #15]

    if (ADC_IDLE != Adc_axGroupStatus[Group].Conversion)
    7b04:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7b08:	490b      	ldr	r1, [pc, #44]	; (7b38 <Adc_ValidateSetupBufferNotBusy+0x44>)
    7b0a:	4613      	mov	r3, r2
    7b0c:	009b      	lsls	r3, r3, #2
    7b0e:	4413      	add	r3, r2
    7b10:	009b      	lsls	r3, r3, #2
    7b12:	440b      	add	r3, r1
    7b14:	681b      	ldr	r3, [r3, #0]
    7b16:	2b00      	cmp	r3, #0
    7b18:	d004      	beq.n	7b24 <Adc_ValidateSetupBufferNotBusy+0x30>
    {
        /* SWS_Adc_00433 */
        Adc_ReportDetRuntimeError(ADC_SETUPRESULTBUFFER_ID, (uint8)ADC_E_BUSY);
    7b1a:	210b      	movs	r1, #11
    7b1c:	200c      	movs	r0, #12
    7b1e:	f7ff fec9 	bl	78b4 <Adc_ReportDetRuntimeError>
    7b22:	e002      	b.n	7b2a <Adc_ValidateSetupBufferNotBusy+0x36>
    }
    else
    {
        ValidState = (Std_ReturnType)E_OK;
    7b24:	2300      	movs	r3, #0
    7b26:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return ValidState;
    7b2a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7b2e:	4618      	mov	r0, r3
    7b30:	b005      	add	sp, #20
    7b32:	f85d fb04 	ldr.w	pc, [sp], #4
    7b36:	bf00      	nop
    7b38:	1fff8d30 	.word	0x1fff8d30

00007b3c <Adc_ValidateStateStartGroupConvNotBusy>:
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateStateStartGroupConvNotBusy(Adc_GroupType Group,
                                                                    uint8 CoreId)
{
    7b3c:	b500      	push	{lr}
    7b3e:	b085      	sub	sp, #20
    7b40:	4603      	mov	r3, r0
    7b42:	460a      	mov	r2, r1
    7b44:	f8ad 3006 	strh.w	r3, [sp, #6]
    7b48:	4613      	mov	r3, r2
    7b4a:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex;
    Std_ReturnType ValidState = (Std_ReturnType)E_OK;
    7b4e:	2300      	movs	r3, #0
    7b50:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean Implicitly = FALSE;
    7b54:	2300      	movs	r3, #0
    7b56:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType HwGroupId;
    Adc_GroupConvType TypeHwGroup;
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */

    /* Get the mapping index of group in the current partition */
    GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    7b5a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7b5e:	4a32      	ldr	r2, [pc, #200]	; (7c28 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    7b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b64:	68da      	ldr	r2, [r3, #12]
    7b66:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7b6a:	005b      	lsls	r3, r3, #1
    7b6c:	4413      	add	r3, r2
    7b6e:	881b      	ldrh	r3, [r3, #0]
    7b70:	f8ad 300c 	strh.w	r3, [sp, #12]
    if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    7b74:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7b78:	4a2b      	ldr	r2, [pc, #172]	; (7c28 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    7b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b7e:	685a      	ldr	r2, [r3, #4]
    7b80:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7b84:	2134      	movs	r1, #52	; 0x34
    7b86:	fb01 f303 	mul.w	r3, r1, r3
    7b8a:	4413      	add	r3, r2
    7b8c:	689b      	ldr	r3, [r3, #8]
    7b8e:	2b00      	cmp	r3, #0
    7b90:	d02c      	beq.n	7bec <Adc_ValidateStateStartGroupConvNotBusy+0xb0>
        ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    7b92:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7b96:	4a24      	ldr	r2, [pc, #144]	; (7c28 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    7b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b9c:	685a      	ldr	r2, [r3, #4]
    7b9e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7ba2:	2134      	movs	r1, #52	; 0x34
    7ba4:	fb01 f303 	mul.w	r3, r1, r3
    7ba8:	4413      	add	r3, r2
    7baa:	689b      	ldr	r3, [r3, #8]
    if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    7bac:	2b01      	cmp	r3, #1
    7bae:	d120      	bne.n	7bf2 <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    7bb0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7bb4:	4a1c      	ldr	r2, [pc, #112]	; (7c28 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    7bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bba:	685a      	ldr	r2, [r3, #4]
    7bbc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7bc0:	2134      	movs	r1, #52	; 0x34
    7bc2:	fb01 f303 	mul.w	r3, r1, r3
    7bc6:	4413      	add	r3, r2
    7bc8:	685b      	ldr	r3, [r3, #4]
        ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    7bca:	2b01      	cmp	r3, #1
    7bcc:	d111      	bne.n	7bf2 <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode)
    7bce:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7bd2:	4a15      	ldr	r2, [pc, #84]	; (7c28 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    7bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bd8:	685a      	ldr	r2, [r3, #4]
    7bda:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7bde:	2134      	movs	r1, #52	; 0x34
    7be0:	fb01 f303 	mul.w	r3, r1, r3
    7be4:	4413      	add	r3, r2
    7be6:	699b      	ldr	r3, [r3, #24]
        (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    7be8:	2b00      	cmp	r3, #0
    7bea:	d102      	bne.n	7bf2 <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        )
       )
    {
        /* The current group can be implicitly stopped */
        Implicitly = TRUE;
    7bec:	2301      	movs	r3, #1
    7bee:	f88d 300e 	strb.w	r3, [sp, #14]
    {
        ValidState = (Std_ReturnType)E_NOT_OK;
    }
#endif /* (ADC_ENABLE_CTU_CONTROL_MODE_API == STD_ON) */

    if ((Std_ReturnType)E_NOT_OK == ValidState)
    7bf2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7bf6:	2b01      	cmp	r3, #1
    7bf8:	d104      	bne.n	7c04 <Adc_ValidateStateStartGroupConvNotBusy+0xc8>
    {
        Adc_ReportDetRuntimeError(ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    7bfa:	210b      	movs	r1, #11
    7bfc:	2002      	movs	r0, #2
    7bfe:	f7ff fe59 	bl	78b4 <Adc_ReportDetRuntimeError>
    7c02:	e00b      	b.n	7c1c <Adc_ValidateStateStartGroupConvNotBusy+0xe0>
    }
    else
    {
#if (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE)
        ValidState = Adc_ValidateNotBusyNoPrio(Group, Implicitly, CoreId);
    7c04:	f89d 2005 	ldrb.w	r2, [sp, #5]
    7c08:	f89d 100e 	ldrb.w	r1, [sp, #14]
    7c0c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7c10:	4618      	mov	r0, r3
    7c12:	f7ff fe8d 	bl	7930 <Adc_ValidateNotBusyNoPrio>
    7c16:	4603      	mov	r3, r0
    7c18:	f88d 300f 	strb.w	r3, [sp, #15]
#else /* ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE */
        ValidState = Adc_ValidateNotBusyWithPrio(Group, Implicitly, CoreId);
#endif  /* ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE */
    }
    return ValidState;
    7c1c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7c20:	4618      	mov	r0, r3
    7c22:	b005      	add	sp, #20
    7c24:	f85d fb04 	ldr.w	pc, [sp], #4
    7c28:	1fff8d2c 	.word	0x1fff8d2c

00007c2c <Adc_ValidateStateNotIdle>:
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateStateNotIdle(uint8 ServiceId,
                                                      Adc_GroupType Group,
                                                      uint8 CoreId)
{
    7c2c:	b500      	push	{lr}
    7c2e:	b085      	sub	sp, #20
    7c30:	4603      	mov	r3, r0
    7c32:	f88d 3007 	strb.w	r3, [sp, #7]
    7c36:	460b      	mov	r3, r1
    7c38:	f8ad 3004 	strh.w	r3, [sp, #4]
    7c3c:	4613      	mov	r3, r2
    7c3e:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_OK;
    7c42:	2300      	movs	r3, #0
    7c44:	f88d 300f 	strb.w	r3, [sp, #15]
    SwInjectedQueueIndex = Adc_axUnitStatus[LogicalHwUnitId].SwInjectedQueueIndex;
#else
    (void)CoreId;
#endif /* (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON) */

    switch (ServiceId)
    7c48:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7c4c:	2b0b      	cmp	r3, #11
    7c4e:	d03b      	beq.n	7cc8 <Adc_ValidateStateNotIdle+0x9c>
    7c50:	2b0b      	cmp	r3, #11
    7c52:	dc4e      	bgt.n	7cf2 <Adc_ValidateStateNotIdle+0xc6>
    7c54:	2b03      	cmp	r3, #3
    7c56:	d022      	beq.n	7c9e <Adc_ValidateStateNotIdle+0x72>
    7c58:	2b04      	cmp	r3, #4
    7c5a:	d14a      	bne.n	7cf2 <Adc_ValidateStateNotIdle+0xc6>
    {
#if (ADC_READ_GROUP_API == STD_ON)
        case ADC_VALUEREADGROUP_ID:
        {
            if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    7c5c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7c60:	492a      	ldr	r1, [pc, #168]	; (7d0c <Adc_ValidateStateNotIdle+0xe0>)
    7c62:	4613      	mov	r3, r2
    7c64:	009b      	lsls	r3, r3, #2
    7c66:	4413      	add	r3, r2
    7c68:	009b      	lsls	r3, r3, #2
    7c6a:	440b      	add	r3, r1
    7c6c:	681b      	ldr	r3, [r3, #0]
    7c6e:	2b00      	cmp	r3, #0
    7c70:	d141      	bne.n	7cf6 <Adc_ValidateStateNotIdle+0xca>
            {
                if (ADC_NOT_YET_CONVERTED == Adc_axGroupStatus[Group].AlreadyConverted)
    7c72:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7c76:	4925      	ldr	r1, [pc, #148]	; (7d0c <Adc_ValidateStateNotIdle+0xe0>)
    7c78:	4613      	mov	r3, r2
    7c7a:	009b      	lsls	r3, r3, #2
    7c7c:	4413      	add	r3, r2
    7c7e:	009b      	lsls	r3, r3, #2
    7c80:	440b      	add	r3, r1
    7c82:	3304      	adds	r3, #4
    7c84:	681b      	ldr	r3, [r3, #0]
    7c86:	2b00      	cmp	r3, #0
    7c88:	d135      	bne.n	7cf6 <Adc_ValidateStateNotIdle+0xca>
                {
                    /* SWS_Adc_00388 */
                    Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    7c8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7c8e:	210c      	movs	r1, #12
    7c90:	4618      	mov	r0, r3
    7c92:	f7ff fe0f 	bl	78b4 <Adc_ReportDetRuntimeError>
                    ValidState = (Std_ReturnType)E_NOT_OK;
    7c96:	2301      	movs	r3, #1
    7c98:	f88d 300f 	strb.w	r3, [sp, #15]
                }
            }
            break;
    7c9c:	e02b      	b.n	7cf6 <Adc_ValidateStateNotIdle+0xca>
        }
#endif /* ADC_READ_GROUP_API == STD_ON */
        case ADC_STOPGROUPCONVERSION_ID:
        {
            if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    7c9e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7ca2:	491a      	ldr	r1, [pc, #104]	; (7d0c <Adc_ValidateStateNotIdle+0xe0>)
    7ca4:	4613      	mov	r3, r2
    7ca6:	009b      	lsls	r3, r3, #2
    7ca8:	4413      	add	r3, r2
    7caa:	009b      	lsls	r3, r3, #2
    7cac:	440b      	add	r3, r1
    7cae:	681b      	ldr	r3, [r3, #0]
    7cb0:	2b00      	cmp	r3, #0
    7cb2:	d122      	bne.n	7cfa <Adc_ValidateStateNotIdle+0xce>
            {
                /* SWS_Adc_00241 */
                Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    7cb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7cb8:	210c      	movs	r1, #12
    7cba:	4618      	mov	r0, r3
    7cbc:	f7ff fdfa 	bl	78b4 <Adc_ReportDetRuntimeError>
                ValidState = (Std_ReturnType)E_NOT_OK;
    7cc0:	2301      	movs	r3, #1
    7cc2:	f88d 300f 	strb.w	r3, [sp, #15]
                    Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
                    ValidState = (Std_ReturnType)E_NOT_OK;
                }
#endif /* (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON) */
            }
            break;
    7cc6:	e018      	b.n	7cfa <Adc_ValidateStateNotIdle+0xce>
            break;
        }
#endif /* ADC_HW_TRIGGER_API == STD_ON */
        case ADC_GETSTREAMLASTPOINTER_ID:
        {
             if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    7cc8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7ccc:	490f      	ldr	r1, [pc, #60]	; (7d0c <Adc_ValidateStateNotIdle+0xe0>)
    7cce:	4613      	mov	r3, r2
    7cd0:	009b      	lsls	r3, r3, #2
    7cd2:	4413      	add	r3, r2
    7cd4:	009b      	lsls	r3, r3, #2
    7cd6:	440b      	add	r3, r1
    7cd8:	681b      	ldr	r3, [r3, #0]
    7cda:	2b00      	cmp	r3, #0
    7cdc:	d10f      	bne.n	7cfe <Adc_ValidateStateNotIdle+0xd2>
             {
                 /* SWS_Adc_00215 */
                 Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    7cde:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7ce2:	210c      	movs	r1, #12
    7ce4:	4618      	mov	r0, r3
    7ce6:	f7ff fde5 	bl	78b4 <Adc_ReportDetRuntimeError>
                 ValidState = (Std_ReturnType)E_NOT_OK;
    7cea:	2301      	movs	r3, #1
    7cec:	f88d 300f 	strb.w	r3, [sp, #15]
             }
            break;
    7cf0:	e005      	b.n	7cfe <Adc_ValidateStateNotIdle+0xd2>
        }
        default:
        {
            ; /* no-op */
            break;
    7cf2:	bf00      	nop
    7cf4:	e004      	b.n	7d00 <Adc_ValidateStateNotIdle+0xd4>
            break;
    7cf6:	bf00      	nop
    7cf8:	e002      	b.n	7d00 <Adc_ValidateStateNotIdle+0xd4>
            break;
    7cfa:	bf00      	nop
    7cfc:	e000      	b.n	7d00 <Adc_ValidateStateNotIdle+0xd4>
            break;
    7cfe:	bf00      	nop
        }
    }

    return ValidState;
    7d00:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7d04:	4618      	mov	r0, r3
    7d06:	b005      	add	sp, #20
    7d08:	f85d fb04 	ldr.w	pc, [sp], #4
    7d0c:	1fff8d30 	.word	0x1fff8d30

00007d10 <Adc_InitGroupsStatus>:
* @return         void
*
* @pre            Driver must be initialized.
*/
static inline void Adc_InitGroupsStatus(uint8 CoreId)
{
    7d10:	b084      	sub	sp, #16
    7d12:	4603      	mov	r3, r0
    7d14:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_GroupType GroupCnt = 0U;
    7d18:	2300      	movs	r3, #0
    7d1a:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_GroupType GroupId = 0U;
    7d1e:	2300      	movs	r3, #0
    7d20:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Initialize Group Status structures to beginning values */
    for (GroupCnt = 0U; GroupCnt < Adc_apxCfgPtr[CoreId]->GroupCount; GroupCnt++)
    7d24:	2300      	movs	r3, #0
    7d26:	f8ad 300e 	strh.w	r3, [sp, #14]
    7d2a:	e049      	b.n	7dc0 <Adc_InitGroupsStatus+0xb0>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupCnt].GroupId;
    7d2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7d30:	4a2a      	ldr	r2, [pc, #168]	; (7ddc <Adc_InitGroupsStatus+0xcc>)
    7d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d36:	685a      	ldr	r2, [r3, #4]
    7d38:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7d3c:	2134      	movs	r1, #52	; 0x34
    7d3e:	fb01 f303 	mul.w	r3, r1, r3
    7d42:	4413      	add	r3, r2
    7d44:	881b      	ldrh	r3, [r3, #0]
    7d46:	f8ad 300c 	strh.w	r3, [sp, #12]
        /* SWS_Adc_00221, SWS_Adc_00307 */
        Adc_axGroupStatus[GroupId].Conversion = ADC_IDLE;
    7d4a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7d4e:	4924      	ldr	r1, [pc, #144]	; (7de0 <Adc_InitGroupsStatus+0xd0>)
    7d50:	4613      	mov	r3, r2
    7d52:	009b      	lsls	r3, r3, #2
    7d54:	4413      	add	r3, r2
    7d56:	009b      	lsls	r3, r3, #2
    7d58:	440b      	add	r3, r1
    7d5a:	2200      	movs	r2, #0
    7d5c:	601a      	str	r2, [r3, #0]
        /* this group was not converted yet */
        Adc_axGroupStatus[GroupId].AlreadyConverted = ADC_NOT_YET_CONVERTED;
    7d5e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7d62:	491f      	ldr	r1, [pc, #124]	; (7de0 <Adc_InitGroupsStatus+0xd0>)
    7d64:	4613      	mov	r3, r2
    7d66:	009b      	lsls	r3, r3, #2
    7d68:	4413      	add	r3, r2
    7d6a:	009b      	lsls	r3, r3, #2
    7d6c:	440b      	add	r3, r1
    7d6e:	3304      	adds	r3, #4
    7d70:	2200      	movs	r2, #0
    7d72:	601a      	str	r2, [r3, #0]

        Adc_axGroupStatus[GroupId].ResultIndex = 0U;
    7d74:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7d78:	4919      	ldr	r1, [pc, #100]	; (7de0 <Adc_InitGroupsStatus+0xd0>)
    7d7a:	4613      	mov	r3, r2
    7d7c:	009b      	lsls	r3, r3, #2
    7d7e:	4413      	add	r3, r2
    7d80:	009b      	lsls	r3, r3, #2
    7d82:	440b      	add	r3, r1
    7d84:	3308      	adds	r3, #8
    7d86:	2200      	movs	r2, #0
    7d88:	801a      	strh	r2, [r3, #0]
        Adc_axGroupStatus[GroupId].ResultsBufferPtr = NULL_PTR;
    7d8a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7d8e:	4914      	ldr	r1, [pc, #80]	; (7de0 <Adc_InitGroupsStatus+0xd0>)
    7d90:	4613      	mov	r3, r2
    7d92:	009b      	lsls	r3, r3, #2
    7d94:	4413      	add	r3, r2
    7d96:	009b      	lsls	r3, r3, #2
    7d98:	440b      	add	r3, r1
    7d9a:	330c      	adds	r3, #12
    7d9c:	2200      	movs	r2, #0
    7d9e:	601a      	str	r2, [r3, #0]
#ifdef ADC_CURRENT_CHANNEL_USED
        Adc_axGroupStatus[GroupId].CurrentChannel = 0U;
    7da0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7da4:	490e      	ldr	r1, [pc, #56]	; (7de0 <Adc_InitGroupsStatus+0xd0>)
    7da6:	4613      	mov	r3, r2
    7da8:	009b      	lsls	r3, r3, #2
    7daa:	4413      	add	r3, r2
    7dac:	009b      	lsls	r3, r3, #2
    7dae:	440b      	add	r3, r1
    7db0:	3310      	adds	r3, #16
    7db2:	2200      	movs	r2, #0
    7db4:	701a      	strb	r2, [r3, #0]
    for (GroupCnt = 0U; GroupCnt < Adc_apxCfgPtr[CoreId]->GroupCount; GroupCnt++)
    7db6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7dba:	3301      	adds	r3, #1
    7dbc:	f8ad 300e 	strh.w	r3, [sp, #14]
    7dc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7dc4:	4a05      	ldr	r2, [pc, #20]	; (7ddc <Adc_InitGroupsStatus+0xcc>)
    7dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7dca:	891b      	ldrh	r3, [r3, #8]
    7dcc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7dd0:	429a      	cmp	r2, r3
    7dd2:	d3ab      	bcc.n	7d2c <Adc_InitGroupsStatus+0x1c>
        Adc_axRuntimeGroupChannel[GroupId].RuntimeChanMask = 0xFFFFFFFFUL;
#endif /* (ADC_IPW_PDB_AVAILABLE == STD_ON) */
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    }
}
    7dd4:	bf00      	nop
    7dd6:	bf00      	nop
    7dd8:	b004      	add	sp, #16
    7dda:	4770      	bx	lr
    7ddc:	1fff8d2c 	.word	0x1fff8d2c
    7de0:	1fff8d30 	.word	0x1fff8d30

00007de4 <Adc_InitUnitStatus>:
* @return         void
*
* @pre            Driver must be initialized.
*/
static inline void Adc_InitUnitStatus(uint8 CoreId)
{
    7de4:	b084      	sub	sp, #16
    7de6:	4603      	mov	r3, r0
    7de8:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    7dec:	2300      	movs	r3, #0
    7dee:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_QueueIndexType QueueIdx = 0U;
    7df2:	2300      	movs	r3, #0
    7df4:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Loop for all configured hardware units in current partition */
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    7df8:	2300      	movs	r3, #0
    7dfa:	f88d 300f 	strb.w	r3, [sp, #15]
    7dfe:	e035      	b.n	7e6c <Adc_InitUnitStatus+0x88>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    7e00:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7e04:	4a1d      	ldr	r2, [pc, #116]	; (7e7c <Adc_InitUnitStatus+0x98>)
    7e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e0a:	681a      	ldr	r2, [r3, #0]
    7e0c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7e10:	4413      	add	r3, r2
    7e12:	7f9b      	ldrb	r3, [r3, #30]
    7e14:	2b01      	cmp	r3, #1
    7e16:	d124      	bne.n	7e62 <Adc_InitUnitStatus+0x7e>
        {
            /* Filled slots in the queue */
            Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex = 0U;
    7e18:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7e1c:	4a18      	ldr	r2, [pc, #96]	; (7e80 <Adc_InitUnitStatus+0x9c>)
    7e1e:	2100      	movs	r1, #0
    7e20:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            /* Mark all the queue slots as "empty" */
            for (QueueIdx = 0U; QueueIdx < ADC_QUEUE_MAX_DEPTH_MAX; QueueIdx++)
    7e24:	2300      	movs	r3, #0
    7e26:	f8ad 300c 	strh.w	r3, [sp, #12]
    7e2a:	e00f      	b.n	7e4c <Adc_InitUnitStatus+0x68>
            {
                Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[QueueIdx] = 0U;
    7e2c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7e30:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7e34:	4912      	ldr	r1, [pc, #72]	; (7e80 <Adc_InitUnitStatus+0x9c>)
    7e36:	0092      	lsls	r2, r2, #2
    7e38:	4413      	add	r3, r2
    7e3a:	005b      	lsls	r3, r3, #1
    7e3c:	440b      	add	r3, r1
    7e3e:	2200      	movs	r2, #0
    7e40:	805a      	strh	r2, [r3, #2]
            for (QueueIdx = 0U; QueueIdx < ADC_QUEUE_MAX_DEPTH_MAX; QueueIdx++)
    7e42:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7e46:	3301      	adds	r3, #1
    7e48:	f8ad 300c 	strh.w	r3, [sp, #12]
    7e4c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    7e50:	2b01      	cmp	r3, #1
    7e52:	d9eb      	bls.n	7e2c <Adc_InitUnitStatus+0x48>
            /* If there is no ongoing HW group then HW trigger capability is disabled */
            Adc_axUnitStatus[LogicalHwUnitId].OngoingHwGroup = ADC_INVALID_HW_GROUP_ID;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */

#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
            Adc_axUnitStatus[LogicalHwUnitId].Sc1Used = 0U;
    7e54:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7e58:	4a09      	ldr	r2, [pc, #36]	; (7e80 <Adc_InitUnitStatus+0x9c>)
    7e5a:	00db      	lsls	r3, r3, #3
    7e5c:	4413      	add	r3, r2
    7e5e:	2200      	movs	r2, #0
    7e60:	719a      	strb	r2, [r3, #6]
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    7e62:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7e66:	3301      	adds	r3, #1
    7e68:	f88d 300f 	strb.w	r3, [sp, #15]
    7e6c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7e70:	2b01      	cmp	r3, #1
    7e72:	d9c5      	bls.n	7e00 <Adc_InitUnitStatus+0x1c>
#if (ADC_DUAL_CLOCK_MODE == STD_ON)
#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
    Adc_aeClockMode[CoreId] = ADC_NORMAL;
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */
}
    7e74:	bf00      	nop
    7e76:	bf00      	nop
    7e78:	b004      	add	sp, #16
    7e7a:	4770      	bx	lr
    7e7c:	1fff8d2c 	.word	0x1fff8d2c
    7e80:	1fff8d58 	.word	0x1fff8d58

00007e84 <Adc_CheckCurrentCoreId>:
* @retval       E_OK:           CoreId is valid
* @retval       E_NOT_OK:       CoreId is not valid
*/
static inline Std_ReturnType Adc_CheckCurrentCoreId(const Adc_ConfigType * CfgPtr,
                                                    uint8 CoreId)
{
    7e84:	b084      	sub	sp, #16
    7e86:	9001      	str	r0, [sp, #4]
    7e88:	460b      	mov	r3, r1
    7e8a:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 Index = 0U;
    7e8e:	2300      	movs	r3, #0
    7e90:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidCoreId = (Std_ReturnType)E_NOT_OK;
    7e94:	2301      	movs	r3, #1
    7e96:	f88d 300e 	strb.w	r3, [sp, #14]

    if (CoreId == CfgPtr->CoreId)
    7e9a:	9b01      	ldr	r3, [sp, #4]
    7e9c:	7c1b      	ldrb	r3, [r3, #16]
    7e9e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7ea2:	429a      	cmp	r2, r3
    7ea4:	d11c      	bne.n	7ee0 <Adc_CheckCurrentCoreId+0x5c>
    {
        for (Index = 0U; Index < CfgPtr->AssignedPartitionCount; Index++)
    7ea6:	2300      	movs	r3, #0
    7ea8:	f88d 300f 	strb.w	r3, [sp, #15]
    7eac:	e012      	b.n	7ed4 <Adc_CheckCurrentCoreId+0x50>
        {
            if (CoreId == CfgPtr->AssignmentPartitionPtr[Index])
    7eae:	9b01      	ldr	r3, [sp, #4]
    7eb0:	695a      	ldr	r2, [r3, #20]
    7eb2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7eb6:	4413      	add	r3, r2
    7eb8:	781b      	ldrb	r3, [r3, #0]
    7eba:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7ebe:	429a      	cmp	r2, r3
    7ec0:	d103      	bne.n	7eca <Adc_CheckCurrentCoreId+0x46>
            {
                ValidCoreId = (Std_ReturnType)E_OK;
    7ec2:	2300      	movs	r3, #0
    7ec4:	f88d 300e 	strb.w	r3, [sp, #14]
                break;
    7ec8:	e00a      	b.n	7ee0 <Adc_CheckCurrentCoreId+0x5c>
        for (Index = 0U; Index < CfgPtr->AssignedPartitionCount; Index++)
    7eca:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7ece:	3301      	adds	r3, #1
    7ed0:	f88d 300f 	strb.w	r3, [sp, #15]
    7ed4:	9b01      	ldr	r3, [sp, #4]
    7ed6:	7e1b      	ldrb	r3, [r3, #24]
    7ed8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7edc:	429a      	cmp	r2, r3
    7ede:	d3e6      	bcc.n	7eae <Adc_CheckCurrentCoreId+0x2a>
            }
        }
    }

    return ValidCoreId;
    7ee0:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    7ee4:	4618      	mov	r0, r3
    7ee6:	b004      	add	sp, #16
    7ee8:	4770      	bx	lr

00007eea <Adc_UpdateStatusStartConversion>:
* SWS_Adc_00335
*/
static inline void Adc_UpdateStatusStartConversion(const Adc_GroupType Group,
                                                   const Adc_HwUnitType Unit,
                                                   uint8 CoreId)
{
    7eea:	b500      	push	{lr}
    7eec:	b085      	sub	sp, #20
    7eee:	4603      	mov	r3, r0
    7ef0:	f8ad 3006 	strh.w	r3, [sp, #6]
    7ef4:	460b      	mov	r3, r1
    7ef6:	f88d 3005 	strb.w	r3, [sp, #5]
    7efa:	4613      	mov	r3, r2
    7efc:	f88d 3004 	strb.w	r3, [sp, #4]
#if (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON)
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    /* First available slot in the Queue */
#if ((ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE) || ((ADC_ENABLE_QUEUING == STD_ON) && (ADC_QUEUE_MAX_DEPTH_MAX != 1U)))
    Adc_QueueIndexType QueueIndex = 0U;
    7f00:	2300      	movs	r3, #0
    7f02:	f8ad 300e 	strh.w	r3, [sp, #14]
#endif
#if (ADC_ENABLE_QUEUING == STD_ON)
    Adc_QueueIndexType SwNormalQueueIndex;
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    7f06:	2300      	movs	r3, #0
    7f08:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Mark the Group as BUSY when the Group goes to the Queue or gets started */
    /* SWS_Adc_00222 */
    Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    7f0c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7f10:	493e      	ldr	r1, [pc, #248]	; (800c <Adc_UpdateStatusStartConversion+0x122>)
    7f12:	4613      	mov	r3, r2
    7f14:	009b      	lsls	r3, r3, #2
    7f16:	4413      	add	r3, r2
    7f18:	009b      	lsls	r3, r3, #2
    7f1a:	440b      	add	r3, r1
    7f1c:	2201      	movs	r2, #1
    7f1e:	601a      	str	r2, [r3, #0]
    /* SWS_Adc_00431 */
    Adc_axGroupStatus[Group].ResultIndex = 0U;
    7f20:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7f24:	4939      	ldr	r1, [pc, #228]	; (800c <Adc_UpdateStatusStartConversion+0x122>)
    7f26:	4613      	mov	r3, r2
    7f28:	009b      	lsls	r3, r3, #2
    7f2a:	4413      	add	r3, r2
    7f2c:	009b      	lsls	r3, r3, #2
    7f2e:	440b      	add	r3, r1
    7f30:	3308      	adds	r3, #8
    7f32:	2200      	movs	r2, #0
    7f34:	801a      	strh	r2, [r3, #0]
            }
        }
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
#else /* ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE */
#if (ADC_ENABLE_QUEUING == STD_ON) && (ADC_QUEUE_MAX_DEPTH_MAX != 1U)
        SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01();
    7f36:	f007 f8ef 	bl	f118 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>
        QueueIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    7f3a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7f3e:	4a34      	ldr	r2, [pc, #208]	; (8010 <Adc_UpdateStatusStartConversion+0x126>)
    7f40:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7f44:	f8ad 300e 	strh.w	r3, [sp, #14]
        if (QueueIndex > (Adc_QueueIndexType)0U)
    7f48:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7f4c:	2b00      	cmp	r3, #0
    7f4e:	d016      	beq.n	7f7e <Adc_UpdateStatusStartConversion+0x94>
        {
            /* Place the Group in the Queue */
            Adc_axUnitStatus[Unit].SwNormalQueue[QueueIndex] = Group;
    7f50:	f89d 2005 	ldrb.w	r2, [sp, #5]
    7f54:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7f58:	492d      	ldr	r1, [pc, #180]	; (8010 <Adc_UpdateStatusStartConversion+0x126>)
    7f5a:	0092      	lsls	r2, r2, #2
    7f5c:	4413      	add	r3, r2
    7f5e:	005b      	lsls	r3, r3, #1
    7f60:	440b      	add	r3, r1
    7f62:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7f66:	805a      	strh	r2, [r3, #2]
            /* Increase the Queue Index */
            Adc_axUnitStatus[Unit].SwNormalQueueIndex++;
    7f68:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7f6c:	4a28      	ldr	r2, [pc, #160]	; (8010 <Adc_UpdateStatusStartConversion+0x126>)
    7f6e:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    7f72:	b292      	uxth	r2, r2
    7f74:	3201      	adds	r2, #1
    7f76:	b291      	uxth	r1, r2
    7f78:	4a25      	ldr	r2, [pc, #148]	; (8010 <Adc_UpdateStatusStartConversion+0x126>)
    7f7a:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
        }
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    7f7e:	f007 f8f7 	bl	f170 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
#else /* ADC_ENABLE_QUEUING == STD_OFF*/
    /* In this case all the StartConversion should be rejected by DET */
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
#endif /* ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE */

        SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01();
    7f82:	f007 f8c9 	bl	f118 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>
#if (ADC_ENABLE_QUEUING == STD_ON)
        SwNormalQueueIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    7f86:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7f8a:	4a21      	ldr	r2, [pc, #132]	; (8010 <Adc_UpdateStatusStartConversion+0x126>)
    7f8c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7f90:	f8ad 300a 	strh.w	r3, [sp, #10]
        /* SWS_Adc_00338, SWS_Adc_00417 */
        if ((Adc_axUnitStatus[Unit].SwNormalQueue[0U] == Group) || (0U == SwNormalQueueIndex))
    7f94:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7f98:	4a1d      	ldr	r2, [pc, #116]	; (8010 <Adc_UpdateStatusStartConversion+0x126>)
    7f9a:	00db      	lsls	r3, r3, #3
    7f9c:	4413      	add	r3, r2
    7f9e:	885b      	ldrh	r3, [r3, #2]
    7fa0:	b29b      	uxth	r3, r3
    7fa2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7fa6:	429a      	cmp	r2, r3
    7fa8:	d003      	beq.n	7fb2 <Adc_UpdateStatusStartConversion+0xc8>
    7faa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7fae:	2b00      	cmp	r3, #0
    7fb0:	d125      	bne.n	7ffe <Adc_UpdateStatusStartConversion+0x114>
        {
            /* No_priorities OR Queue_is_empty */
            /* Indicate a new group was added to the queue */
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
            if (0U == Adc_axUnitStatus[Unit].SwNormalQueueIndex)
    7fb2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7fb6:	4a16      	ldr	r2, [pc, #88]	; (8010 <Adc_UpdateStatusStartConversion+0x126>)
    7fb8:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    7fbc:	b29b      	uxth	r3, r3
    7fbe:	2b00      	cmp	r3, #0
    7fc0:	d112      	bne.n	7fe8 <Adc_UpdateStatusStartConversion+0xfe>
            {
                /* Place the Group in the Queue */
                Adc_axUnitStatus[Unit].SwNormalQueue[0U] = Group;
    7fc2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7fc6:	4a12      	ldr	r2, [pc, #72]	; (8010 <Adc_UpdateStatusStartConversion+0x126>)
    7fc8:	00db      	lsls	r3, r3, #3
    7fca:	4413      	add	r3, r2
    7fcc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7fd0:	805a      	strh	r2, [r3, #2]
                Adc_axUnitStatus[Unit].SwNormalQueueIndex++;
    7fd2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7fd6:	4a0e      	ldr	r2, [pc, #56]	; (8010 <Adc_UpdateStatusStartConversion+0x126>)
    7fd8:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    7fdc:	b292      	uxth	r2, r2
    7fde:	3201      	adds	r2, #1
    7fe0:	b291      	uxth	r1, r2
    7fe2:	4a0b      	ldr	r2, [pc, #44]	; (8010 <Adc_UpdateStatusStartConversion+0x126>)
    7fe4:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            }
            /* exit critical region */
            SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    7fe8:	f007 f8c2 	bl	f170 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
            /* ADC will not be running - no ISR can occur now */
            Adc_Ipw_StartNormalConversion(Unit, CoreId);
    7fec:	f89d 2004 	ldrb.w	r2, [sp, #4]
    7ff0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7ff4:	4611      	mov	r1, r2
    7ff6:	4618      	mov	r0, r3
    7ff8:	f002 fbf2 	bl	a7e0 <Adc_Ipw_StartNormalConversion>
    7ffc:	e002      	b.n	8004 <Adc_UpdateStatusStartConversion+0x11a>
#if (ADC_ENABLE_QUEUING == STD_ON)
        }
        else
        {
        /* exit critical region */
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    7ffe:	f007 f8b7 	bl	f170 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
        }
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    }
    (void)TimeOutStatus;
}
    8002:	bf00      	nop
    8004:	bf00      	nop
    8006:	b005      	add	sp, #20
    8008:	f85d fb04 	ldr.w	pc, [sp], #4
    800c:	1fff8d30 	.word	0x1fff8d30
    8010:	1fff8d58 	.word	0x1fff8d58

00008014 <Adc_StopSwGroupConversion>:
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Adc_GroupType Group,
    Adc_HwUnitType Unit,
    uint8 CoreId
)
{
    8014:	b500      	push	{lr}
    8016:	b085      	sub	sp, #20
    8018:	9001      	str	r0, [sp, #4]
    801a:	4608      	mov	r0, r1
    801c:	4611      	mov	r1, r2
    801e:	461a      	mov	r2, r3
    8020:	4603      	mov	r3, r0
    8022:	f8ad 3002 	strh.w	r3, [sp, #2]
    8026:	460b      	mov	r3, r1
    8028:	f88d 3001 	strb.w	r3, [sp, #1]
    802c:	4613      	mov	r3, r2
    802e:	f88d 3000 	strb.w	r3, [sp]
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    8032:	2300      	movs	r3, #0
    8034:	f88d 300f 	strb.w	r3, [sp, #15]
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    {
#if (ADC_ENABLE_QUEUING == STD_ON)
        /* SWS_Adc_00437 */
        /* Find the Group in the Queue */
        *RemovedPos = Adc_axUnitStatus[Unit].SwNormalQueueIndex;  /* initialize with something invalid */
    8038:	f89d 3001 	ldrb.w	r3, [sp, #1]
    803c:	4a26      	ldr	r2, [pc, #152]	; (80d8 <Adc_StopSwGroupConversion+0xc4>)
    803e:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    8042:	b29a      	uxth	r2, r3
    8044:	9b01      	ldr	r3, [sp, #4]
    8046:	801a      	strh	r2, [r3, #0]
        NumOfSwNormalQueue = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    8048:	f89d 3001 	ldrb.w	r3, [sp, #1]
    804c:	4a22      	ldr	r2, [pc, #136]	; (80d8 <Adc_StopSwGroupConversion+0xc4>)
    804e:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    8052:	f8ad 300a 	strh.w	r3, [sp, #10]
        for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    8056:	2300      	movs	r3, #0
    8058:	f8ad 300c 	strh.w	r3, [sp, #12]
    805c:	e02f      	b.n	80be <Adc_StopSwGroupConversion+0xaa>
        {
            if (Group == Adc_axUnitStatus[Unit].SwNormalQueue[SwNormalQueueIndex])
    805e:	f89d 2001 	ldrb.w	r2, [sp, #1]
    8062:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8066:	491c      	ldr	r1, [pc, #112]	; (80d8 <Adc_StopSwGroupConversion+0xc4>)
    8068:	0092      	lsls	r2, r2, #2
    806a:	4413      	add	r3, r2
    806c:	005b      	lsls	r3, r3, #1
    806e:	440b      	add	r3, r1
    8070:	885b      	ldrh	r3, [r3, #2]
    8072:	b29b      	uxth	r3, r3
    8074:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    8078:	429a      	cmp	r2, r3
    807a:	d11b      	bne.n	80b4 <Adc_StopSwGroupConversion+0xa0>
            {
                /* The group is found in the Queue */
                /* Store the position of the group to be removed */
                *RemovedPos = SwNormalQueueIndex;
    807c:	9b01      	ldr	r3, [sp, #4]
    807e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    8082:	801a      	strh	r2, [r3, #0]

                /* Stop the conversion of all channels belonging to this group */
                if ((Adc_QueueIndexType)0U == SwNormalQueueIndex) /* In this case the group might be under conversion */
    8084:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8088:	2b00      	cmp	r3, #0
    808a:	d10b      	bne.n	80a4 <Adc_StopSwGroupConversion+0x90>
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
                {
                    /* SWS_Adc_00386 */
                    TimeOutStatus = Adc_Ipw_StopCurrentConversion(Unit, Group, CoreId);
    808c:	f89d 2000 	ldrb.w	r2, [sp]
    8090:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    8094:	f89d 3001 	ldrb.w	r3, [sp, #1]
    8098:	4618      	mov	r0, r3
    809a:	f002 fc4b 	bl	a934 <Adc_Ipw_StopCurrentConversion>
    809e:	4603      	mov	r3, r0
    80a0:	f88d 300f 	strb.w	r3, [sp, #15]
                }
#if (ADC_ENABLE_QUEUING == STD_ON)
                /* SWS_Adc_00438 */
                /* Remove group from Queue */
                Adc_Ipw_RemoveFromQueue(Unit, SwNormalQueueIndex);
    80a4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    80a8:	f89d 3001 	ldrb.w	r3, [sp, #1]
    80ac:	4611      	mov	r1, r2
    80ae:	4618      	mov	r0, r3
    80b0:	f001 fd88 	bl	9bc4 <Adc_Ipw_RemoveFromQueue>
        for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    80b4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    80b8:	3301      	adds	r3, #1
    80ba:	f8ad 300c 	strh.w	r3, [sp, #12]
    80be:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    80c2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    80c6:	429a      	cmp	r2, r3
    80c8:	d3c9      	bcc.n	805e <Adc_StopSwGroupConversion+0x4a>
        /* No element will be present in the queue */
        Adc_axUnitStatus[Unit].SwNormalQueueIndex = 0U;
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    }

    return TimeOutStatus;
    80ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    80ce:	4618      	mov	r0, r3
    80d0:	b005      	add	sp, #20
    80d2:	f85d fb04 	ldr.w	pc, [sp], #4
    80d6:	bf00      	nop
    80d8:	1fff8d58 	.word	0x1fff8d58

000080dc <Adc_UpdateStatusStopConversion>:
* SWS_Adc_00437
*/
static inline void Adc_UpdateStatusStopConversion(Adc_GroupType Group,
                                                  Adc_HwUnitType Unit,
                                                  uint8 CoreId)
{
    80dc:	b500      	push	{lr}
    80de:	b089      	sub	sp, #36	; 0x24
    80e0:	4603      	mov	r3, r0
    80e2:	f8ad 3006 	strh.w	r3, [sp, #6]
    80e6:	460b      	mov	r3, r1
    80e8:	f88d 3005 	strb.w	r3, [sp, #5]
    80ec:	4613      	mov	r3, r2
    80ee:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    80f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    80f6:	4a4f      	ldr	r2, [pc, #316]	; (8234 <Adc_UpdateStatusStopConversion+0x158>)
    80f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80fc:	68da      	ldr	r2, [r3, #12]
    80fe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8102:	005b      	lsls	r3, r3, #1
    8104:	4413      	add	r3, r2
    8106:	881b      	ldrh	r3, [r3, #0]
    8108:	f8ad 301e 	strh.w	r3, [sp, #30]
#if (ADC_ENABLE_QUEUING == STD_ON)
    Adc_QueueIndexType RemovedPos = 0U;
    810c:	2300      	movs	r3, #0
    810e:	f8ad 300a 	strh.w	r3, [sp, #10]
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    8112:	2300      	movs	r3, #0
    8114:	f88d 301d 	strb.w	r3, [sp, #29]

#if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
    Adc_axGroupStatus[Group].LimitCheckFailed = FALSE;
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_ON */

    Mode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode;
    8118:	f89d 3004 	ldrb.w	r3, [sp, #4]
    811c:	4a45      	ldr	r2, [pc, #276]	; (8234 <Adc_UpdateStatusStopConversion+0x158>)
    811e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8122:	685a      	ldr	r2, [r3, #4]
    8124:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    8128:	2134      	movs	r1, #52	; 0x34
    812a:	fb01 f303 	mul.w	r3, r1, r3
    812e:	4413      	add	r3, r2
    8130:	689b      	ldr	r3, [r3, #8]
    8132:	9306      	str	r3, [sp, #24]
    AccessMode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode;
    8134:	f89d 3004 	ldrb.w	r3, [sp, #4]
    8138:	4a3e      	ldr	r2, [pc, #248]	; (8234 <Adc_UpdateStatusStopConversion+0x158>)
    813a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    813e:	685a      	ldr	r2, [r3, #4]
    8140:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    8144:	2134      	movs	r1, #52	; 0x34
    8146:	fb01 f303 	mul.w	r3, r1, r3
    814a:	4413      	add	r3, r2
    814c:	685b      	ldr	r3, [r3, #4]
    814e:	9305      	str	r3, [sp, #20]
    BufferMode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode;
    8150:	f89d 3004 	ldrb.w	r3, [sp, #4]
    8154:	4a37      	ldr	r2, [pc, #220]	; (8234 <Adc_UpdateStatusStopConversion+0x158>)
    8156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    815a:	685a      	ldr	r2, [r3, #4]
    815c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    8160:	2134      	movs	r1, #52	; 0x34
    8162:	fb01 f303 	mul.w	r3, r1, r3
    8166:	4413      	add	r3, r2
    8168:	699b      	ldr	r3, [r3, #24]
    816a:	9304      	str	r3, [sp, #16]
    Conversion = Adc_axGroupStatus[Group].Conversion;
    816c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8170:	4931      	ldr	r1, [pc, #196]	; (8238 <Adc_UpdateStatusStopConversion+0x15c>)
    8172:	4613      	mov	r3, r2
    8174:	009b      	lsls	r3, r3, #2
    8176:	4413      	add	r3, r2
    8178:	009b      	lsls	r3, r3, #2
    817a:	440b      	add	r3, r1
    817c:	681b      	ldr	r3, [r3, #0]
    817e:	9303      	str	r3, [sp, #12]

     /* FD reset number of samples completed */
     Adc_axGroupStatus[Group].ResultIndex = 0U;
    8180:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8184:	492c      	ldr	r1, [pc, #176]	; (8238 <Adc_UpdateStatusStopConversion+0x15c>)
    8186:	4613      	mov	r3, r2
    8188:	009b      	lsls	r3, r3, #2
    818a:	4413      	add	r3, r2
    818c:	009b      	lsls	r3, r3, #2
    818e:	440b      	add	r3, r1
    8190:	3308      	adds	r3, #8
    8192:	2200      	movs	r2, #0
    8194:	801a      	strh	r2, [r3, #0]
     Adc_axGroupStatus[Group].Notification = ADC_NOTIFICATION_DISABLED;
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */
#if ((ADC_SETCHANNEL_API == STD_ON) && (ADC_IPW_PDB_AVAILABLE == STD_ON))
     Adc_axRuntimeGroupChannel[Group].RuntimeChanMask = 0xFFFFFFFFUL;
#endif /* ((ADC_SETCHANNEL_API == STD_ON) && (ADC_IPW_PDB_AVAILABLE == STD_ON)) */
    if (((ADC_CONV_MODE_ONESHOT == Mode) || \
    8196:	9b06      	ldr	r3, [sp, #24]
    8198:	2b00      	cmp	r3, #0
    819a:	d005      	beq.n	81a8 <Adc_UpdateStatusStopConversion+0xcc>
    819c:	9b05      	ldr	r3, [sp, #20]
    819e:	2b01      	cmp	r3, #1
    81a0:	d110      	bne.n	81c4 <Adc_UpdateStatusStopConversion+0xe8>
        ((ADC_ACCESS_MODE_STREAMING == AccessMode) && (ADC_STREAM_BUFFER_LINEAR == BufferMode)) \
    81a2:	9b04      	ldr	r3, [sp, #16]
    81a4:	2b00      	cmp	r3, #0
    81a6:	d10d      	bne.n	81c4 <Adc_UpdateStatusStopConversion+0xe8>
       ) && (ADC_STREAM_COMPLETED == Conversion) \
    81a8:	9b03      	ldr	r3, [sp, #12]
    81aa:	2b03      	cmp	r3, #3
    81ac:	d10a      	bne.n	81c4 <Adc_UpdateStatusStopConversion+0xe8>
      )
    {
        /* SWS_Adc_00221, SWS_Adc_00360 */
        /* group is stopped, change its status to IDLE  */
        Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    81ae:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    81b2:	4921      	ldr	r1, [pc, #132]	; (8238 <Adc_UpdateStatusStopConversion+0x15c>)
    81b4:	4613      	mov	r3, r2
    81b6:	009b      	lsls	r3, r3, #2
    81b8:	4413      	add	r3, r2
    81ba:	009b      	lsls	r3, r3, #2
    81bc:	440b      	add	r3, r1
    81be:	2200      	movs	r2, #0
    81c0:	601a      	str	r2, [r3, #0]
        {
            /* Timeout is expired.*/
            Adc_ReportDetRuntimeError((uint8)ADC_STOPGROUPCONVERSION_ID, (uint8)ADC_E_TIMEOUT);
        }
    }
}
    81c2:	e032      	b.n	822a <Adc_UpdateStatusStopConversion+0x14e>
        TimeOutStatus = Adc_StopSwGroupConversion(&RemovedPos, Group, Unit, CoreId);
    81c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
    81c8:	f89d 2005 	ldrb.w	r2, [sp, #5]
    81cc:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    81d0:	f10d 000a 	add.w	r0, sp, #10
    81d4:	f7ff ff1e 	bl	8014 <Adc_StopSwGroupConversion>
    81d8:	4603      	mov	r3, r0
    81da:	f88d 301d 	strb.w	r3, [sp, #29]
        Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    81de:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    81e2:	4915      	ldr	r1, [pc, #84]	; (8238 <Adc_UpdateStatusStopConversion+0x15c>)
    81e4:	4613      	mov	r3, r2
    81e6:	009b      	lsls	r3, r3, #2
    81e8:	4413      	add	r3, r2
    81ea:	009b      	lsls	r3, r3, #2
    81ec:	440b      	add	r3, r1
    81ee:	2200      	movs	r2, #0
    81f0:	601a      	str	r2, [r3, #0]
        if ((Adc_QueueIndexType)0U == RemovedPos)
    81f2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    81f6:	2b00      	cmp	r3, #0
    81f8:	d10f      	bne.n	821a <Adc_UpdateStatusStopConversion+0x13e>
            if (Adc_axUnitStatus[Unit].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    81fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
    81fe:	4a0f      	ldr	r2, [pc, #60]	; (823c <Adc_UpdateStatusStopConversion+0x160>)
    8200:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    8204:	b29b      	uxth	r3, r3
    8206:	2b00      	cmp	r3, #0
    8208:	d007      	beq.n	821a <Adc_UpdateStatusStopConversion+0x13e>
                Adc_Ipw_StartNormalConversion(Unit, CoreId);
    820a:	f89d 2004 	ldrb.w	r2, [sp, #4]
    820e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8212:	4611      	mov	r1, r2
    8214:	4618      	mov	r0, r3
    8216:	f002 fae3 	bl	a7e0 <Adc_Ipw_StartNormalConversion>
        if ((Std_ReturnType)E_NOT_OK == TimeOutStatus)
    821a:	f89d 301d 	ldrb.w	r3, [sp, #29]
    821e:	2b01      	cmp	r3, #1
    8220:	d103      	bne.n	822a <Adc_UpdateStatusStopConversion+0x14e>
            Adc_ReportDetRuntimeError((uint8)ADC_STOPGROUPCONVERSION_ID, (uint8)ADC_E_TIMEOUT);
    8222:	212b      	movs	r1, #43	; 0x2b
    8224:	2003      	movs	r0, #3
    8226:	f7ff fb45 	bl	78b4 <Adc_ReportDetRuntimeError>
}
    822a:	bf00      	nop
    822c:	b009      	add	sp, #36	; 0x24
    822e:	f85d fb04 	ldr.w	pc, [sp], #4
    8232:	bf00      	nop
    8234:	1fff8d2c 	.word	0x1fff8d2c
    8238:	1fff8d30 	.word	0x1fff8d30
    823c:	1fff8d58 	.word	0x1fff8d58

00008240 <Adc_UpdateStatusReadGroup>:
*
*/
static inline void Adc_UpdateStatusReadGroup(const Adc_GroupType Group,
                                             const boolean Flag,
                                             uint8 CoreId)
{
    8240:	b500      	push	{lr}
    8242:	b085      	sub	sp, #20
    8244:	4603      	mov	r3, r0
    8246:	f8ad 3006 	strh.w	r3, [sp, #6]
    824a:	460b      	mov	r3, r1
    824c:	f88d 3005 	strb.w	r3, [sp, #5]
    8250:	4613      	mov	r3, r2
    8252:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    8256:	f89d 3004 	ldrb.w	r3, [sp, #4]
    825a:	4a18      	ldr	r2, [pc, #96]	; (82bc <Adc_UpdateStatusReadGroup+0x7c>)
    825c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8260:	68da      	ldr	r2, [r3, #12]
    8262:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8266:	005b      	lsls	r3, r3, #1
    8268:	4413      	add	r3, r2
    826a:	881b      	ldrh	r3, [r3, #0]
    826c:	f8ad 300e 	strh.w	r3, [sp, #14]
    if ((uint8)STD_ON == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcWithoutInterrupt)
    8270:	f89d 3004 	ldrb.w	r3, [sp, #4]
    8274:	4a11      	ldr	r2, [pc, #68]	; (82bc <Adc_UpdateStatusReadGroup+0x7c>)
    8276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    827a:	685a      	ldr	r2, [r3, #4]
    827c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8280:	2134      	movs	r1, #52	; 0x34
    8282:	fb01 f303 	mul.w	r3, r1, r3
    8286:	4413      	add	r3, r2
    8288:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    828c:	2b01      	cmp	r3, #1
    828e:	d109      	bne.n	82a4 <Adc_UpdateStatusReadGroup+0x64>
    {
        Adc_UpdateStatusReadGroupNoInt(Group, Flag, CoreId);
    8290:	f89d 2004 	ldrb.w	r2, [sp, #4]
    8294:	f89d 1005 	ldrb.w	r1, [sp, #5]
    8298:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    829c:	4618      	mov	r0, r3
    829e:	f000 f80f 	bl	82c0 <Adc_UpdateStatusReadGroupNoInt>
    }
    else
    {
        Adc_UpdateStatusReadGroupInt(Group, CoreId);
    }
}
    82a2:	e007      	b.n	82b4 <Adc_UpdateStatusReadGroup+0x74>
        Adc_UpdateStatusReadGroupInt(Group, CoreId);
    82a4:	f89d 2004 	ldrb.w	r2, [sp, #4]
    82a8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    82ac:	4611      	mov	r1, r2
    82ae:	4618      	mov	r0, r3
    82b0:	f000 f8e8 	bl	8484 <Adc_UpdateStatusReadGroupInt>
}
    82b4:	bf00      	nop
    82b6:	b005      	add	sp, #20
    82b8:	f85d fb04 	ldr.w	pc, [sp], #4
    82bc:	1fff8d2c 	.word	0x1fff8d2c

000082c0 <Adc_UpdateStatusReadGroupNoInt>:

static inline void Adc_UpdateStatusReadGroupNoInt(const Adc_GroupType Group,
                                                  const boolean Flag,
                                                  uint8 CoreId)
{
    82c0:	b500      	push	{lr}
    82c2:	b085      	sub	sp, #20
    82c4:	4603      	mov	r3, r0
    82c6:	f8ad 3006 	strh.w	r3, [sp, #6]
    82ca:	460b      	mov	r3, r1
    82cc:	f88d 3005 	strb.w	r3, [sp, #5]
    82d0:	4613      	mov	r3, r2
    82d2:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    82d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
    82da:	4a2c      	ldr	r2, [pc, #176]	; (838c <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    82dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    82e0:	68da      	ldr	r2, [r3, #12]
    82e2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    82e6:	005b      	lsls	r3, r3, #1
    82e8:	4413      	add	r3, r2
    82ea:	881b      	ldrh	r3, [r3, #0]
    82ec:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* at least once the group was converted */
    Adc_axGroupStatus[Group].AlreadyConverted = ADC_ALREADY_CONVERTED;
    82f0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    82f4:	4926      	ldr	r1, [pc, #152]	; (8390 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    82f6:	4613      	mov	r3, r2
    82f8:	009b      	lsls	r3, r3, #2
    82fa:	4413      	add	r3, r2
    82fc:	009b      	lsls	r3, r3, #2
    82fe:	440b      	add	r3, r1
    8300:	3304      	adds	r3, #4
    8302:	2201      	movs	r2, #1
    8304:	601a      	str	r2, [r3, #0]
    /* Update conversion status*/
    /* Conversion values are not in the configured range */
    if (TRUE == Flag)
    8306:	f89d 3005 	ldrb.w	r3, [sp, #5]
    830a:	2b00      	cmp	r3, #0
    830c:	d03a      	beq.n	8384 <Adc_UpdateStatusReadGroupNoInt+0xc4>
    {
        /* NOTE: Streaming groups are NOT allowed without interrupts in configuration */
        if (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)
    830e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    8312:	4a1e      	ldr	r2, [pc, #120]	; (838c <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    8314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8318:	685a      	ldr	r2, [r3, #4]
    831a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    831e:	2134      	movs	r1, #52	; 0x34
    8320:	fb01 f303 	mul.w	r3, r1, r3
    8324:	4413      	add	r3, r2
    8326:	689b      	ldr	r3, [r3, #8]
    8328:	2b01      	cmp	r3, #1
    832a:	d10a      	bne.n	8342 <Adc_UpdateStatusReadGroupNoInt+0x82>
        {
            Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    832c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8330:	4917      	ldr	r1, [pc, #92]	; (8390 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    8332:	4613      	mov	r3, r2
    8334:	009b      	lsls	r3, r3, #2
    8336:	4413      	add	r3, r2
    8338:	009b      	lsls	r3, r3, #2
    833a:	440b      	add	r3, r1
    833c:	2201      	movs	r2, #1
    833e:	601a      	str	r2, [r3, #0]
            /* SWS_Adc_00449, SWS_Adc_00450 */
            Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
        }
    }
    #endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
}
    8340:	e020      	b.n	8384 <Adc_UpdateStatusReadGroupNoInt+0xc4>
            if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    8342:	f89d 3004 	ldrb.w	r3, [sp, #4]
    8346:	4a11      	ldr	r2, [pc, #68]	; (838c <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    8348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    834c:	685a      	ldr	r2, [r3, #4]
    834e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8352:	2134      	movs	r1, #52	; 0x34
    8354:	fb01 f303 	mul.w	r3, r1, r3
    8358:	4413      	add	r3, r2
    835a:	695b      	ldr	r3, [r3, #20]
    835c:	2b00      	cmp	r3, #0
    835e:	d111      	bne.n	8384 <Adc_UpdateStatusReadGroupNoInt+0xc4>
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    8360:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8364:	490a      	ldr	r1, [pc, #40]	; (8390 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    8366:	4613      	mov	r3, r2
    8368:	009b      	lsls	r3, r3, #2
    836a:	4413      	add	r3, r2
    836c:	009b      	lsls	r3, r3, #2
    836e:	440b      	add	r3, r1
    8370:	2200      	movs	r2, #0
    8372:	601a      	str	r2, [r3, #0]
                Adc_UpdateSwQueueIndexNoInt(Group, CoreId);
    8374:	f89d 2004 	ldrb.w	r2, [sp, #4]
    8378:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    837c:	4611      	mov	r1, r2
    837e:	4618      	mov	r0, r3
    8380:	f000 f808 	bl	8394 <Adc_UpdateSwQueueIndexNoInt>
}
    8384:	bf00      	nop
    8386:	b005      	add	sp, #20
    8388:	f85d fb04 	ldr.w	pc, [sp], #4
    838c:	1fff8d2c 	.word	0x1fff8d2c
    8390:	1fff8d30 	.word	0x1fff8d30

00008394 <Adc_UpdateSwQueueIndexNoInt>:

static inline void Adc_UpdateSwQueueIndexNoInt(const Adc_GroupType Group,
                                               uint8 CoreId)
{
    8394:	b500      	push	{lr}
    8396:	b085      	sub	sp, #20
    8398:	4603      	mov	r3, r0
    839a:	460a      	mov	r2, r1
    839c:	f8ad 3006 	strh.w	r3, [sp, #6]
    83a0:	4613      	mov	r3, r2
    83a2:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    83a6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    83aa:	4a34      	ldr	r2, [pc, #208]	; (847c <Adc_UpdateSwQueueIndexNoInt+0xe8>)
    83ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83b0:	68da      	ldr	r2, [r3, #12]
    83b2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    83b6:	005b      	lsls	r3, r3, #1
    83b8:	4413      	add	r3, r2
    83ba:	881b      	ldrh	r3, [r3, #0]
    83bc:	f8ad 300c 	strh.w	r3, [sp, #12]
    Adc_HwUnitType LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcLogicalUnitId;
    83c0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    83c4:	4a2d      	ldr	r2, [pc, #180]	; (847c <Adc_UpdateSwQueueIndexNoInt+0xe8>)
    83c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83ca:	685a      	ldr	r2, [r3, #4]
    83cc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    83d0:	2134      	movs	r1, #52	; 0x34
    83d2:	fb01 f303 	mul.w	r3, r1, r3
    83d6:	4413      	add	r3, r2
    83d8:	789b      	ldrb	r3, [r3, #2]
    83da:	f88d 300b 	strb.w	r3, [sp, #11]
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03();
    }
    else /* SW NORMAL CONVERSION */
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    {
        if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    83de:	f89d 300b 	ldrb.w	r3, [sp, #11]
    83e2:	4a27      	ldr	r2, [pc, #156]	; (8480 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    83e4:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    83e8:	b29b      	uxth	r3, r3
    83ea:	2b00      	cmp	r3, #0
    83ec:	d041      	beq.n	8472 <Adc_UpdateSwQueueIndexNoInt+0xde>
        {
#if (ADC_ENABLE_QUEUING == STD_ON)
            /* remove group without interrupts from queue  */
            NumOfSwNormalQueue = Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex;
    83ee:	f89d 300b 	ldrb.w	r3, [sp, #11]
    83f2:	4a23      	ldr	r2, [pc, #140]	; (8480 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    83f4:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    83f8:	f8ad 3008 	strh.w	r3, [sp, #8]
            for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    83fc:	2300      	movs	r3, #0
    83fe:	f8ad 300e 	strh.w	r3, [sp, #14]
    8402:	e01c      	b.n	843e <Adc_UpdateSwQueueIndexNoInt+0xaa>
            {
                if (Group == Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[SwNormalQueueIndex])
    8404:	f89d 200b 	ldrb.w	r2, [sp, #11]
    8408:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    840c:	491c      	ldr	r1, [pc, #112]	; (8480 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    840e:	0092      	lsls	r2, r2, #2
    8410:	4413      	add	r3, r2
    8412:	005b      	lsls	r3, r3, #1
    8414:	440b      	add	r3, r1
    8416:	885b      	ldrh	r3, [r3, #2]
    8418:	b29b      	uxth	r3, r3
    841a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    841e:	429a      	cmp	r2, r3
    8420:	d108      	bne.n	8434 <Adc_UpdateSwQueueIndexNoInt+0xa0>
                {
                    /* The group is found in the Queue */
                    Adc_Ipw_RemoveFromQueue(LogicalHwUnitId, SwNormalQueueIndex);
    8422:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    8426:	f89d 300b 	ldrb.w	r3, [sp, #11]
    842a:	4611      	mov	r1, r2
    842c:	4618      	mov	r0, r3
    842e:	f001 fbc9 	bl	9bc4 <Adc_Ipw_RemoveFromQueue>
                    break;
    8432:	e00a      	b.n	844a <Adc_UpdateSwQueueIndexNoInt+0xb6>
            for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    8434:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8438:	3301      	adds	r3, #1
    843a:	f8ad 300e 	strh.w	r3, [sp, #14]
    843e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    8442:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    8446:	429a      	cmp	r2, r3
    8448:	d3dc      	bcc.n	8404 <Adc_UpdateSwQueueIndexNoInt+0x70>
                }
            }
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
            /* Start / restore next conversion in the queue*/
            if (0U == SwNormalQueueIndex)
    844a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    844e:	2b00      	cmp	r3, #0
    8450:	d10f      	bne.n	8472 <Adc_UpdateSwQueueIndexNoInt+0xde>
            {
                if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > 0U)
    8452:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8456:	4a0a      	ldr	r2, [pc, #40]	; (8480 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    8458:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    845c:	b29b      	uxth	r3, r3
    845e:	2b00      	cmp	r3, #0
    8460:	d007      	beq.n	8472 <Adc_UpdateSwQueueIndexNoInt+0xde>
                {
                    Adc_Ipw_StartNormalConversion(LogicalHwUnitId, CoreId);
    8462:	f89d 2005 	ldrb.w	r2, [sp, #5]
    8466:	f89d 300b 	ldrb.w	r3, [sp, #11]
    846a:	4611      	mov	r1, r2
    846c:	4618      	mov	r0, r3
    846e:	f002 f9b7 	bl	a7e0 <Adc_Ipw_StartNormalConversion>
#else
            Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex--;
#endif
        }
    }
}
    8472:	bf00      	nop
    8474:	b005      	add	sp, #20
    8476:	f85d fb04 	ldr.w	pc, [sp], #4
    847a:	bf00      	nop
    847c:	1fff8d2c 	.word	0x1fff8d2c
    8480:	1fff8d58 	.word	0x1fff8d58

00008484 <Adc_UpdateStatusReadGroupInt>:

static inline void Adc_UpdateStatusReadGroupInt(const Adc_GroupType Group,
                                                uint8 CoreId)
{
    8484:	b084      	sub	sp, #16
    8486:	4603      	mov	r3, r0
    8488:	460a      	mov	r2, r1
    848a:	f8ad 3006 	strh.w	r3, [sp, #6]
    848e:	4613      	mov	r3, r2
    8490:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    8494:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8498:	4a47      	ldr	r2, [pc, #284]	; (85b8 <Adc_UpdateStatusReadGroupInt+0x134>)
    849a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    849e:	68da      	ldr	r2, [r3, #12]
    84a0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    84a4:	005b      	lsls	r3, r3, #1
    84a6:	4413      	add	r3, r2
    84a8:	881b      	ldrh	r3, [r3, #0]
    84aa:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* The following code has been added to respect the State Diagram of Streaming Access Mode */
    if (ADC_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    84ae:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    84b2:	4942      	ldr	r1, [pc, #264]	; (85bc <Adc_UpdateStatusReadGroupInt+0x138>)
    84b4:	4613      	mov	r3, r2
    84b6:	009b      	lsls	r3, r3, #2
    84b8:	4413      	add	r3, r2
    84ba:	009b      	lsls	r3, r3, #2
    84bc:	440b      	add	r3, r1
    84be:	681b      	ldr	r3, [r3, #0]
    84c0:	2b02      	cmp	r3, #2
    84c2:	d10a      	bne.n	84da <Adc_UpdateStatusReadGroupInt+0x56>
    {
        /* SWS_Adc_00331 -- SWS_Adc_00222 */
        Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    84c4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    84c8:	493c      	ldr	r1, [pc, #240]	; (85bc <Adc_UpdateStatusReadGroupInt+0x138>)
    84ca:	4613      	mov	r3, r2
    84cc:	009b      	lsls	r3, r3, #2
    84ce:	4413      	add	r3, r2
    84d0:	009b      	lsls	r3, r3, #2
    84d2:	440b      	add	r3, r1
    84d4:	2201      	movs	r2, #1
    84d6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        ; /* Empty else branch to avoid MISRA */
    }
}
    84d8:	e06a      	b.n	85b0 <Adc_UpdateStatusReadGroupInt+0x12c>
    else if (ADC_STREAM_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    84da:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    84de:	4937      	ldr	r1, [pc, #220]	; (85bc <Adc_UpdateStatusReadGroupInt+0x138>)
    84e0:	4613      	mov	r3, r2
    84e2:	009b      	lsls	r3, r3, #2
    84e4:	4413      	add	r3, r2
    84e6:	009b      	lsls	r3, r3, #2
    84e8:	440b      	add	r3, r1
    84ea:	681b      	ldr	r3, [r3, #0]
    84ec:	2b03      	cmp	r3, #3
    84ee:	d15f      	bne.n	85b0 <Adc_UpdateStatusReadGroupInt+0x12c>
        if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    84f0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    84f4:	4a30      	ldr	r2, [pc, #192]	; (85b8 <Adc_UpdateStatusReadGroupInt+0x134>)
    84f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84fa:	685a      	ldr	r2, [r3, #4]
    84fc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8500:	2134      	movs	r1, #52	; 0x34
    8502:	fb01 f303 	mul.w	r3, r1, r3
    8506:	4413      	add	r3, r2
    8508:	695b      	ldr	r3, [r3, #20]
    850a:	2b00      	cmp	r3, #0
    850c:	d150      	bne.n	85b0 <Adc_UpdateStatusReadGroupInt+0x12c>
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)|| \
    850e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8512:	4a29      	ldr	r2, [pc, #164]	; (85b8 <Adc_UpdateStatusReadGroupInt+0x134>)
    8514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8518:	685a      	ldr	r2, [r3, #4]
    851a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    851e:	2134      	movs	r1, #52	; 0x34
    8520:	fb01 f303 	mul.w	r3, r1, r3
    8524:	4413      	add	r3, r2
    8526:	689b      	ldr	r3, [r3, #8]
    8528:	2b00      	cmp	r3, #0
    852a:	d02c      	beq.n	8586 <Adc_UpdateStatusReadGroupInt+0x102>
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    852c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8530:	4a21      	ldr	r2, [pc, #132]	; (85b8 <Adc_UpdateStatusReadGroupInt+0x134>)
    8532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8536:	685a      	ldr	r2, [r3, #4]
    8538:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    853c:	2134      	movs	r1, #52	; 0x34
    853e:	fb01 f303 	mul.w	r3, r1, r3
    8542:	4413      	add	r3, r2
    8544:	689b      	ldr	r3, [r3, #8]
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)|| \
    8546:	2b01      	cmp	r3, #1
    8548:	d128      	bne.n	859c <Adc_UpdateStatusReadGroupInt+0x118>
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    854a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    854e:	4a1a      	ldr	r2, [pc, #104]	; (85b8 <Adc_UpdateStatusReadGroupInt+0x134>)
    8550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8554:	685a      	ldr	r2, [r3, #4]
    8556:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    855a:	2134      	movs	r1, #52	; 0x34
    855c:	fb01 f303 	mul.w	r3, r1, r3
    8560:	4413      	add	r3, r2
    8562:	685b      	ldr	r3, [r3, #4]
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    8564:	2b01      	cmp	r3, #1
    8566:	d119      	bne.n	859c <Adc_UpdateStatusReadGroupInt+0x118>
                (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) \
    8568:	f89d 3005 	ldrb.w	r3, [sp, #5]
    856c:	4a12      	ldr	r2, [pc, #72]	; (85b8 <Adc_UpdateStatusReadGroupInt+0x134>)
    856e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8572:	685a      	ldr	r2, [r3, #4]
    8574:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8578:	2134      	movs	r1, #52	; 0x34
    857a:	fb01 f303 	mul.w	r3, r1, r3
    857e:	4413      	add	r3, r2
    8580:	699b      	ldr	r3, [r3, #24]
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    8582:	2b00      	cmp	r3, #0
    8584:	d10a      	bne.n	859c <Adc_UpdateStatusReadGroupInt+0x118>
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    8586:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    858a:	490c      	ldr	r1, [pc, #48]	; (85bc <Adc_UpdateStatusReadGroupInt+0x138>)
    858c:	4613      	mov	r3, r2
    858e:	009b      	lsls	r3, r3, #2
    8590:	4413      	add	r3, r2
    8592:	009b      	lsls	r3, r3, #2
    8594:	440b      	add	r3, r1
    8596:	2200      	movs	r2, #0
    8598:	601a      	str	r2, [r3, #0]
}
    859a:	e009      	b.n	85b0 <Adc_UpdateStatusReadGroupInt+0x12c>
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    859c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    85a0:	4906      	ldr	r1, [pc, #24]	; (85bc <Adc_UpdateStatusReadGroupInt+0x138>)
    85a2:	4613      	mov	r3, r2
    85a4:	009b      	lsls	r3, r3, #2
    85a6:	4413      	add	r3, r2
    85a8:	009b      	lsls	r3, r3, #2
    85aa:	440b      	add	r3, r1
    85ac:	2201      	movs	r2, #1
    85ae:	601a      	str	r2, [r3, #0]
}
    85b0:	bf00      	nop
    85b2:	b004      	add	sp, #16
    85b4:	4770      	bx	lr
    85b6:	bf00      	nop
    85b8:	1fff8d2c 	.word	0x1fff8d2c
    85bc:	1fff8d30 	.word	0x1fff8d30

000085c0 <Adc_UpdateStatusAfterGetStream>:
* @return         void
*
*/
static inline void Adc_UpdateStatusAfterGetStream(Adc_GroupType Group,
                                                  uint8 CoreId)
{
    85c0:	b084      	sub	sp, #16
    85c2:	4603      	mov	r3, r0
    85c4:	460a      	mov	r2, r1
    85c6:	f8ad 3006 	strh.w	r3, [sp, #6]
    85ca:	4613      	mov	r3, r2
    85cc:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    85d0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    85d4:	4a46      	ldr	r2, [pc, #280]	; (86f0 <Adc_UpdateStatusAfterGetStream+0x130>)
    85d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85da:	68da      	ldr	r2, [r3, #12]
    85dc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    85e0:	005b      	lsls	r3, r3, #1
    85e2:	4413      	add	r3, r2
    85e4:	881b      	ldrh	r3, [r3, #0]
    85e6:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* The following code has been added to respect the State Diagram of Streaming Access Mode */
    if (ADC_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    85ea:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    85ee:	4941      	ldr	r1, [pc, #260]	; (86f4 <Adc_UpdateStatusAfterGetStream+0x134>)
    85f0:	4613      	mov	r3, r2
    85f2:	009b      	lsls	r3, r3, #2
    85f4:	4413      	add	r3, r2
    85f6:	009b      	lsls	r3, r3, #2
    85f8:	440b      	add	r3, r1
    85fa:	681b      	ldr	r3, [r3, #0]
    85fc:	2b02      	cmp	r3, #2
    85fe:	d109      	bne.n	8614 <Adc_UpdateStatusAfterGetStream+0x54>
    {
        /* SWS_Adc_00328 -- SWS_Adc_00222 */
        Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    8600:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8604:	493b      	ldr	r1, [pc, #236]	; (86f4 <Adc_UpdateStatusAfterGetStream+0x134>)
    8606:	4613      	mov	r3, r2
    8608:	009b      	lsls	r3, r3, #2
    860a:	4413      	add	r3, r2
    860c:	009b      	lsls	r3, r3, #2
    860e:	440b      	add	r3, r1
    8610:	2201      	movs	r2, #1
    8612:	601a      	str	r2, [r3, #0]
    }

    if (ADC_STREAM_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    8614:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8618:	4936      	ldr	r1, [pc, #216]	; (86f4 <Adc_UpdateStatusAfterGetStream+0x134>)
    861a:	4613      	mov	r3, r2
    861c:	009b      	lsls	r3, r3, #2
    861e:	4413      	add	r3, r2
    8620:	009b      	lsls	r3, r3, #2
    8622:	440b      	add	r3, r1
    8624:	681b      	ldr	r3, [r3, #0]
    8626:	2b03      	cmp	r3, #3
    8628:	d15f      	bne.n	86ea <Adc_UpdateStatusAfterGetStream+0x12a>
    {
        /* Compliance with State Diagram */
        if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    862a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    862e:	4a30      	ldr	r2, [pc, #192]	; (86f0 <Adc_UpdateStatusAfterGetStream+0x130>)
    8630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8634:	685a      	ldr	r2, [r3, #4]
    8636:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    863a:	2134      	movs	r1, #52	; 0x34
    863c:	fb01 f303 	mul.w	r3, r1, r3
    8640:	4413      	add	r3, r2
    8642:	695b      	ldr	r3, [r3, #20]
    8644:	2b00      	cmp	r3, #0
    8646:	d150      	bne.n	86ea <Adc_UpdateStatusAfterGetStream+0x12a>
        {
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    8648:	f89d 3005 	ldrb.w	r3, [sp, #5]
    864c:	4a28      	ldr	r2, [pc, #160]	; (86f0 <Adc_UpdateStatusAfterGetStream+0x130>)
    864e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8652:	685a      	ldr	r2, [r3, #4]
    8654:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8658:	2134      	movs	r1, #52	; 0x34
    865a:	fb01 f303 	mul.w	r3, r1, r3
    865e:	4413      	add	r3, r2
    8660:	689b      	ldr	r3, [r3, #8]
    8662:	2b00      	cmp	r3, #0
    8664:	d02c      	beq.n	86c0 <Adc_UpdateStatusAfterGetStream+0x100>
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    8666:	f89d 3005 	ldrb.w	r3, [sp, #5]
    866a:	4a21      	ldr	r2, [pc, #132]	; (86f0 <Adc_UpdateStatusAfterGetStream+0x130>)
    866c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8670:	685a      	ldr	r2, [r3, #4]
    8672:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8676:	2134      	movs	r1, #52	; 0x34
    8678:	fb01 f303 	mul.w	r3, r1, r3
    867c:	4413      	add	r3, r2
    867e:	689b      	ldr	r3, [r3, #8]
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    8680:	2b01      	cmp	r3, #1
    8682:	d128      	bne.n	86d6 <Adc_UpdateStatusAfterGetStream+0x116>
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    8684:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8688:	4a19      	ldr	r2, [pc, #100]	; (86f0 <Adc_UpdateStatusAfterGetStream+0x130>)
    868a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    868e:	685a      	ldr	r2, [r3, #4]
    8690:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8694:	2134      	movs	r1, #52	; 0x34
    8696:	fb01 f303 	mul.w	r3, r1, r3
    869a:	4413      	add	r3, r2
    869c:	685b      	ldr	r3, [r3, #4]
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    869e:	2b01      	cmp	r3, #1
    86a0:	d119      	bne.n	86d6 <Adc_UpdateStatusAfterGetStream+0x116>
                (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) \
    86a2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    86a6:	4a12      	ldr	r2, [pc, #72]	; (86f0 <Adc_UpdateStatusAfterGetStream+0x130>)
    86a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86ac:	685a      	ldr	r2, [r3, #4]
    86ae:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    86b2:	2134      	movs	r1, #52	; 0x34
    86b4:	fb01 f303 	mul.w	r3, r1, r3
    86b8:	4413      	add	r3, r2
    86ba:	699b      	ldr	r3, [r3, #24]
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    86bc:	2b00      	cmp	r3, #0
    86be:	d10a      	bne.n	86d6 <Adc_UpdateStatusAfterGetStream+0x116>
               )
              )
            {
                /* SWS_Adc_00327 -- SWS_Adc_00221 */
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    86c0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    86c4:	490b      	ldr	r1, [pc, #44]	; (86f4 <Adc_UpdateStatusAfterGetStream+0x134>)
    86c6:	4613      	mov	r3, r2
    86c8:	009b      	lsls	r3, r3, #2
    86ca:	4413      	add	r3, r2
    86cc:	009b      	lsls	r3, r3, #2
    86ce:	440b      	add	r3, r1
    86d0:	2200      	movs	r2, #0
    86d2:	601a      	str	r2, [r3, #0]
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
            }
        }
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */
    }
}
    86d4:	e009      	b.n	86ea <Adc_UpdateStatusAfterGetStream+0x12a>
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    86d6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    86da:	4906      	ldr	r1, [pc, #24]	; (86f4 <Adc_UpdateStatusAfterGetStream+0x134>)
    86dc:	4613      	mov	r3, r2
    86de:	009b      	lsls	r3, r3, #2
    86e0:	4413      	add	r3, r2
    86e2:	009b      	lsls	r3, r3, #2
    86e4:	440b      	add	r3, r1
    86e6:	2201      	movs	r2, #1
    86e8:	601a      	str	r2, [r3, #0]
}
    86ea:	bf00      	nop
    86ec:	b004      	add	sp, #16
    86ee:	4770      	bx	lr
    86f0:	1fff8d2c 	.word	0x1fff8d2c
    86f4:	1fff8d30 	.word	0x1fff8d30

000086f8 <Adc_Init>:
                                       GLOBAL FUNCTIONS
==================================================================================================*/
/* SWS_Adc_00365, SWS_Adc_00246, SWS_Adc_00056 */
/** @implements      Adc_Init_Activity */
void Adc_Init(const Adc_ConfigType * ConfigPtr)
{
    86f8:	b500      	push	{lr}
    86fa:	b085      	sub	sp, #20
    86fc:	9001      	str	r0, [sp, #4]
    Std_ReturnType TimeOutStatus;
#if (ADC_DEV_ERROR_DETECT == STD_ON) && ((ADC_VALIDATE_GLOBAL_CALL == STD_ON) || (ADC_VALIDATE_PARAMS == STD_ON))
    Std_ReturnType ValidStatus;
#endif

    CoreId = Adc_GetCoreID();
    86fe:	f002 fa5b 	bl	abb8 <Adc_GetCoreID>
    8702:	4603      	mov	r3, r0
    8704:	f88d 300c 	strb.w	r3, [sp, #12]
    CoreIdTemp = CoreId; /* Used to avoid MISRA */
    8708:	f89d 300c 	ldrb.w	r3, [sp, #12]
    870c:	f88d 300f 	strb.w	r3, [sp, #15]
            {
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_PARAMS == STD_ON) */
#if (ADC_PRECOMPILE_SUPPORT == STD_ON)
                ValidCoreId = Adc_CheckCurrentCoreId(Adc_ConfigVariantPredefined[CoreId], CoreIdTemp);
#else
                ValidCoreId = Adc_CheckCurrentCoreId(ConfigPtr, CoreId);
    8710:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8714:	b2db      	uxtb	r3, r3
    8716:	4619      	mov	r1, r3
    8718:	9801      	ldr	r0, [sp, #4]
    871a:	f7ff fbb3 	bl	7e84 <Adc_CheckCurrentCoreId>
    871e:	4603      	mov	r3, r0
    8720:	f88d 300e 	strb.w	r3, [sp, #14]
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
                if ((Std_ReturnType)E_OK == ValidCoreId)
    8724:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8728:	2b00      	cmp	r3, #0
    872a:	d12c      	bne.n	8786 <Adc_Init+0x8e>
                    /* ADC342 */
                    const Adc_ConfigType * predefined = Adc_ConfigVariantPredefined[CoreId];
                    Adc_apxCfgPtr[CoreId] = predefined;
#else
                    /* SWS_Adc_00054 */
                    Adc_apxCfgPtr[CoreId] = ConfigPtr;
    872c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8730:	b2db      	uxtb	r3, r3
    8732:	4619      	mov	r1, r3
    8734:	4a16      	ldr	r2, [pc, #88]	; (8790 <Adc_Init+0x98>)
    8736:	9b01      	ldr	r3, [sp, #4]
    8738:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
                    /* Initialize the unit status for all units */
                    Adc_InitUnitStatus(CoreId);
    873c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8740:	b2db      	uxtb	r3, r3
    8742:	4618      	mov	r0, r3
    8744:	f7ff fb4e 	bl	7de4 <Adc_InitUnitStatus>
                    /* Initialize the group status for all groups */
                    Adc_InitGroupsStatus(CoreId);
    8748:	f89d 300c 	ldrb.w	r3, [sp, #12]
    874c:	b2db      	uxtb	r3, r3
    874e:	4618      	mov	r0, r3
    8750:	f7ff fade 	bl	7d10 <Adc_InitGroupsStatus>
                    /* Call the low level function to initialize driver */
                    TimeOutStatus = Adc_Ipw_Init(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr, CoreIdTemp);
    8754:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8758:	b2db      	uxtb	r3, r3
    875a:	461a      	mov	r2, r3
    875c:	4b0c      	ldr	r3, [pc, #48]	; (8790 <Adc_Init+0x98>)
    875e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8762:	681b      	ldr	r3, [r3, #0]
    8764:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8768:	4611      	mov	r1, r2
    876a:	4618      	mov	r0, r3
    876c:	f001 ff78 	bl	a660 <Adc_Ipw_Init>
    8770:	4603      	mov	r3, r0
    8772:	f88d 300d 	strb.w	r3, [sp, #13]

                    if ((Std_ReturnType)E_NOT_OK == TimeOutStatus)
    8776:	f89d 300d 	ldrb.w	r3, [sp, #13]
    877a:	2b01      	cmp	r3, #1
    877c:	d103      	bne.n	8786 <Adc_Init+0x8e>
                    {
                        /* Timeout is expired.*/
                        Adc_ReportDetRuntimeError((uint8)ADC_INIT_ID, (uint8)ADC_E_TIMEOUT);
    877e:	212b      	movs	r1, #43	; 0x2b
    8780:	2000      	movs	r0, #0
    8782:	f7ff f897 	bl	78b4 <Adc_ReportDetRuntimeError>
        if ((Std_ReturnType)E_OK == ValidStatus)
        {
            Adc_EndValidateGloballCall(ValidStatus, ADC_INIT_ID, CoreId);
        }
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    8786:	bf00      	nop
    8788:	b005      	add	sp, #20
    878a:	f85d fb04 	ldr.w	pc, [sp], #4
    878e:	bf00      	nop
    8790:	1fff8d2c 	.word	0x1fff8d2c

00008794 <Adc_SetupResultBuffer>:

/* SWS_Adc_00419 */
/** @implements      Adc_SetupResultBuffer_Activity */
Std_ReturnType Adc_SetupResultBuffer(Adc_GroupType Group,
                                     Adc_ValueGroupType * const DataBufferPtr)
{
    8794:	b500      	push	{lr}
    8796:	b085      	sub	sp, #20
    8798:	4603      	mov	r3, r0
    879a:	9100      	str	r1, [sp, #0]
    879c:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType TempReturn = (Std_ReturnType)E_NOT_OK;
    87a0:	2301      	movs	r3, #1
    87a2:	f88d 300f 	strb.w	r3, [sp, #15]

#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_SETUPRESULTBUFFER_ID, DataBufferPtr))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
            if ((Std_ReturnType)E_OK == Adc_ValidateSetupBufferNotBusy(Group))
    87a6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    87aa:	4618      	mov	r0, r3
    87ac:	f7ff f9a2 	bl	7af4 <Adc_ValidateSetupBufferNotBusy>
    87b0:	4603      	mov	r3, r0
    87b2:	2b00      	cmp	r3, #0
    87b4:	d10d      	bne.n	87d2 <Adc_SetupResultBuffer+0x3e>
            {
                /* SWS_Adc_00420 */
                Adc_axGroupStatus[Group].ResultsBufferPtr = DataBufferPtr;
    87b6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    87ba:	4909      	ldr	r1, [pc, #36]	; (87e0 <Adc_SetupResultBuffer+0x4c>)
    87bc:	4613      	mov	r3, r2
    87be:	009b      	lsls	r3, r3, #2
    87c0:	4413      	add	r3, r2
    87c2:	009b      	lsls	r3, r3, #2
    87c4:	440b      	add	r3, r1
    87c6:	330c      	adds	r3, #12
    87c8:	9a00      	ldr	r2, [sp, #0]
    87ca:	601a      	str	r2, [r3, #0]
                    /* Need to reset last buffer to invalid value before starting conversion. Because since External Dma Channel is used,
                    last buffer will be used to check by Adc_ReadGroup to make sure the results of all channel was available. */
                    DataBufferPtr[(GroupPtr->AssignedChannelCount - (Adc_ChannelIndexType)1U)] = ADC_IPW_INVALID_DATA_RESULT_DMA;
                }
#endif /* ADC_DMA_SUPPORTED */
                TempReturn = (Std_ReturnType)E_OK;
    87cc:	2300      	movs	r3, #0
    87ce:	f88d 300f 	strb.w	r3, [sp, #15]

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return TempReturn;
    87d2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    87d6:	4618      	mov	r0, r3
    87d8:	b005      	add	sp, #20
    87da:	f85d fb04 	ldr.w	pc, [sp], #4
    87de:	bf00      	nop
    87e0:	1fff8d30 	.word	0x1fff8d30

000087e4 <Adc_DeInit>:

#if (ADC_DEINIT_API == STD_ON)
/* SWS_Adc_00366, SWS_Adc_00111, SWS_Adc_00110 */
/** @implements      Adc_DeInit_Activity */
void Adc_DeInit(void)
{
    87e4:	b500      	push	{lr}
    87e6:	b083      	sub	sp, #12
    volatile uint8 CoreId;
#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
    Adc_HwUnitType LogicalHwUnitId = 0U;
    87e8:	2300      	movs	r3, #0
    87ea:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 CoreIdTemp;
    Std_ReturnType TempReturn;

    Std_ReturnType ValidStatus;

    CoreId = Adc_GetCoreID();
    87ee:	f002 f9e3 	bl	abb8 <Adc_GetCoreID>
    87f2:	4603      	mov	r3, r0
    87f4:	f88d 3002 	strb.w	r3, [sp, #2]
    CoreIdTemp = CoreId; /* Used to avoid MISRA */
    87f8:	f89d 3002 	ldrb.w	r3, [sp, #2]
    87fc:	f88d 3006 	strb.w	r3, [sp, #6]
#if (ADC_VALIDATE_GLOBAL_CALL == STD_ON)
    ValidStatus = Adc_ValidateGloballCall(ADC_DEINIT_ID, CoreId);
    if ((Std_ReturnType)E_OK == ValidStatus)
    {
#endif /* ADC_VALIDATE_GLOBAL_CALL == STD_ON */
        ValidCoreId = Adc_CheckCurrentCoreId(Adc_apxCfgPtr[CoreId], CoreIdTemp);
    8800:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8804:	b2db      	uxtb	r3, r3
    8806:	461a      	mov	r2, r3
    8808:	4b2d      	ldr	r3, [pc, #180]	; (88c0 <Adc_DeInit+0xdc>)
    880a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    880e:	f89d 2006 	ldrb.w	r2, [sp, #6]
    8812:	4611      	mov	r1, r2
    8814:	4618      	mov	r0, r3
    8816:	f7ff fb35 	bl	7e84 <Adc_CheckCurrentCoreId>
    881a:	4603      	mov	r3, r0
    881c:	f88d 3005 	strb.w	r3, [sp, #5]
        if ((Std_ReturnType)E_OK == ValidCoreId)
    8820:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8824:	2b00      	cmp	r3, #0
    8826:	d147      	bne.n	88b8 <Adc_DeInit+0xd4>
        {
            ValidStatus = Adc_ValidateDeInitNotBusy(CoreId);
    8828:	f89d 3002 	ldrb.w	r3, [sp, #2]
    882c:	b2db      	uxtb	r3, r3
    882e:	4618      	mov	r0, r3
    8830:	f7ff f912 	bl	7a58 <Adc_ValidateDeInitNotBusy>
    8834:	4603      	mov	r3, r0
    8836:	f88d 3004 	strb.w	r3, [sp, #4]
            if ((Std_ReturnType)E_OK == ValidStatus)
    883a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    883e:	2b00      	cmp	r3, #0
    8840:	d13a      	bne.n	88b8 <Adc_DeInit+0xd4>
            {

                TempReturn = Adc_Ipw_DeInit(CoreId);
    8842:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8846:	b2db      	uxtb	r3, r3
    8848:	4618      	mov	r0, r3
    884a:	f001 ff4e 	bl	a6ea <Adc_Ipw_DeInit>
    884e:	4603      	mov	r3, r0
    8850:	f88d 3003 	strb.w	r3, [sp, #3]
                if ((Std_ReturnType)E_NOT_OK == TempReturn)
    8854:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8858:	2b01      	cmp	r3, #1
    885a:	d103      	bne.n	8864 <Adc_DeInit+0x80>
                {
                    Adc_ReportDetRuntimeError((uint8)ADC_DEINIT_ID, (uint8)ADC_E_TIMEOUT);
    885c:	212b      	movs	r1, #43	; 0x2b
    885e:	2001      	movs	r0, #1
    8860:	f7ff f828 	bl	78b4 <Adc_ReportDetRuntimeError>
                }
#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
                for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    8864:	2300      	movs	r3, #0
    8866:	f88d 3007 	strb.w	r3, [sp, #7]
    886a:	e019      	b.n	88a0 <Adc_DeInit+0xbc>
                {
                    if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    886c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8870:	b2db      	uxtb	r3, r3
    8872:	461a      	mov	r2, r3
    8874:	4b12      	ldr	r3, [pc, #72]	; (88c0 <Adc_DeInit+0xdc>)
    8876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    887a:	681a      	ldr	r2, [r3, #0]
    887c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8880:	4413      	add	r3, r2
    8882:	7f9b      	ldrb	r3, [r3, #30]
    8884:	2b01      	cmp	r3, #1
    8886:	d106      	bne.n	8896 <Adc_DeInit+0xb2>
                    {
                        Adc_axUnitStatus[LogicalHwUnitId].Sc1Used = 0U;
    8888:	f89d 3007 	ldrb.w	r3, [sp, #7]
    888c:	4a0d      	ldr	r2, [pc, #52]	; (88c4 <Adc_DeInit+0xe0>)
    888e:	00db      	lsls	r3, r3, #3
    8890:	4413      	add	r3, r2
    8892:	2200      	movs	r2, #0
    8894:	719a      	strb	r2, [r3, #6]
                for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    8896:	f89d 3007 	ldrb.w	r3, [sp, #7]
    889a:	3301      	adds	r3, #1
    889c:	f88d 3007 	strb.w	r3, [sp, #7]
    88a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    88a4:	2b01      	cmp	r3, #1
    88a6:	d9e1      	bls.n	886c <Adc_DeInit+0x88>
                    }
                }
#endif /* (ADC_IPW_PDB_AVAILABLE == STD_ON) */
                /* Undefined the global pointer to the configuration */
                Adc_apxCfgPtr[CoreId] = NULL_PTR;
    88a8:	f89d 3002 	ldrb.w	r3, [sp, #2]
    88ac:	b2db      	uxtb	r3, r3
    88ae:	4619      	mov	r1, r3
    88b0:	4b03      	ldr	r3, [pc, #12]	; (88c0 <Adc_DeInit+0xdc>)
    88b2:	2200      	movs	r2, #0
    88b4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            Adc_ReportDetError(ADC_DEINIT_ID, (uint8)ADC_E_PARAM_CONFIG);
        }
    }
    Adc_EndValidateGloballCall(ValidStatus, ADC_DEINIT_ID, CoreId);
#endif /* ADC_VALIDATE_GLOBAL_CALL == STD_ON */
}
    88b8:	bf00      	nop
    88ba:	b003      	add	sp, #12
    88bc:	f85d fb04 	ldr.w	pc, [sp], #4
    88c0:	1fff8d2c 	.word	0x1fff8d2c
    88c4:	1fff8d58 	.word	0x1fff8d58

000088c8 <Adc_StartGroupConversion>:

#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
/* SWS_Adc_00367, SWS_Adc_00356, SWS_Adc_00156, SWS_Adc_00061, SWS_Adc_00413 */
/** @implements      Adc_StartGroupConversion_Activity */
void Adc_StartGroupConversion(Adc_GroupType Group)
{
    88c8:	b500      	push	{lr}
    88ca:	b085      	sub	sp, #20
    88cc:	4603      	mov	r3, r0
    88ce:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId;
    Adc_GroupType GroupIndex = 0U;
    88d2:	2300      	movs	r3, #0
    88d4:	f8ad 300e 	strh.w	r3, [sp, #14]
    /* ADC Hardware unit on which the requested group will run */
    Adc_HwUnitType LogicalHwUnitId = 0U;
    88d8:	2300      	movs	r3, #0
    88da:	f88d 300d 	strb.w	r3, [sp, #13]

    CoreId = Adc_GetCoreID();
    88de:	f002 f96b 	bl	abb8 <Adc_GetCoreID>
    88e2:	4603      	mov	r3, r0
    88e4:	f88d 300c 	strb.w	r3, [sp, #12]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_STARTGROUPCONVERSION_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
        /* Get the mapping index of group in the current partition */
        GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    88e8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    88ec:	b2db      	uxtb	r3, r3
    88ee:	461a      	mov	r2, r3
    88f0:	4b1a      	ldr	r3, [pc, #104]	; (895c <Adc_StartGroupConversion+0x94>)
    88f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    88f6:	68da      	ldr	r2, [r3, #12]
    88f8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    88fc:	005b      	lsls	r3, r3, #1
    88fe:	4413      	add	r3, r2
    8900:	881b      	ldrh	r3, [r3, #0]
    8902:	f8ad 300e 	strh.w	r3, [sp, #14]

        if ((Std_ReturnType)E_OK == Adc_ValidateStateStartGroupConvNotBusy(Group, CoreId))
    8906:	f89d 300c 	ldrb.w	r3, [sp, #12]
    890a:	b2da      	uxtb	r2, r3
    890c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8910:	4611      	mov	r1, r2
    8912:	4618      	mov	r0, r3
    8914:	f7ff f912 	bl	7b3c <Adc_ValidateStateStartGroupConvNotBusy>
    8918:	4603      	mov	r3, r0
    891a:	2b00      	cmp	r3, #0
    891c:	d11a      	bne.n	8954 <Adc_StartGroupConversion+0x8c>
               )
            {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

                /* Get the unit to which the group belongs to */
                LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    891e:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8922:	b2db      	uxtb	r3, r3
    8924:	461a      	mov	r2, r3
    8926:	4b0d      	ldr	r3, [pc, #52]	; (895c <Adc_StartGroupConversion+0x94>)
    8928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    892c:	685a      	ldr	r2, [r3, #4]
    892e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8932:	2134      	movs	r1, #52	; 0x34
    8934:	fb01 f303 	mul.w	r3, r1, r3
    8938:	4413      	add	r3, r2
    893a:	789b      	ldrb	r3, [r3, #2]
    893c:	f88d 300d 	strb.w	r3, [sp, #13]
                /* Update queue */
                Adc_UpdateStatusStartConversion(Group, LogicalHwUnitId, CoreId);
    8940:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8944:	b2da      	uxtb	r2, r3
    8946:	f89d 100d 	ldrb.w	r1, [sp, #13]
    894a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    894e:	4618      	mov	r0, r3
    8950:	f7ff facb 	bl	7eea <Adc_UpdateStatusStartConversion>
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
        }
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    8954:	bf00      	nop
    8956:	b005      	add	sp, #20
    8958:	f85d fb04 	ldr.w	pc, [sp], #4
    895c:	1fff8d2c 	.word	0x1fff8d2c

00008960 <Adc_StopGroupConversion>:

/* SWS_Adc_00368, SWS_Adc_00356, SWS_Adc_00413 */
/** @implements      Adc_StopGroupConversion_Activity */
void Adc_StopGroupConversion(Adc_GroupType Group)
{
    8960:	b500      	push	{lr}
    8962:	b085      	sub	sp, #20
    8964:	4603      	mov	r3, r0
    8966:	f8ad 3006 	strh.w	r3, [sp, #6]
    /* ADC Logical Unit Id on which the requested group will run */
    Adc_HwUnitType LogicalHwUnitId = 0U;
    896a:	2300      	movs	r3, #0
    896c:	f88d 300f 	strb.w	r3, [sp, #15]
    volatile uint8 CoreId;
    Adc_GroupType GroupIndex = 0U;
    8970:	2300      	movs	r3, #0
    8972:	f8ad 300c 	strh.w	r3, [sp, #12]

    CoreId = Adc_GetCoreID();
    8976:	f002 f91f 	bl	abb8 <Adc_GetCoreID>
    897a:	4603      	mov	r3, r0
    897c:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_STOPGROUPCONVERSION_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

        if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_STOPGROUPCONVERSION_ID, Group, CoreId))
    8980:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8984:	b2da      	uxtb	r2, r3
    8986:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    898a:	4619      	mov	r1, r3
    898c:	2003      	movs	r0, #3
    898e:	f7ff f94d 	bl	7c2c <Adc_ValidateStateNotIdle>
    8992:	4603      	mov	r3, r0
    8994:	2b00      	cmp	r3, #0
    8996:	d129      	bne.n	89ec <Adc_StopGroupConversion+0x8c>
                                                                CoreId
                                                               )
               )
            {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    8998:	f89d 300b 	ldrb.w	r3, [sp, #11]
    899c:	b2db      	uxtb	r3, r3
    899e:	461a      	mov	r2, r3
    89a0:	4b14      	ldr	r3, [pc, #80]	; (89f4 <Adc_StopGroupConversion+0x94>)
    89a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    89a6:	68da      	ldr	r2, [r3, #12]
    89a8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    89ac:	005b      	lsls	r3, r3, #1
    89ae:	4413      	add	r3, r2
    89b0:	881b      	ldrh	r3, [r3, #0]
    89b2:	f8ad 300c 	strh.w	r3, [sp, #12]
                /* Get the unit to which the group belongs to */
                LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    89b6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    89ba:	b2db      	uxtb	r3, r3
    89bc:	461a      	mov	r2, r3
    89be:	4b0d      	ldr	r3, [pc, #52]	; (89f4 <Adc_StopGroupConversion+0x94>)
    89c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    89c4:	685a      	ldr	r2, [r3, #4]
    89c6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    89ca:	2134      	movs	r1, #52	; 0x34
    89cc:	fb01 f303 	mul.w	r3, r1, r3
    89d0:	4413      	add	r3, r2
    89d2:	789b      	ldrb	r3, [r3, #2]
    89d4:	f88d 300f 	strb.w	r3, [sp, #15]
                Adc_UpdateStatusStopConversion(Group, LogicalHwUnitId, CoreId);
    89d8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    89dc:	b2da      	uxtb	r2, r3
    89de:	f89d 100f 	ldrb.w	r1, [sp, #15]
    89e2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    89e6:	4618      	mov	r0, r3
    89e8:	f7ff fb78 	bl	80dc <Adc_UpdateStatusStopConversion>
        }

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    89ec:	bf00      	nop
    89ee:	b005      	add	sp, #20
    89f0:	f85d fb04 	ldr.w	pc, [sp], #4
    89f4:	1fff8d2c 	.word	0x1fff8d2c

000089f8 <Adc_ReadGroup>:
#if (ADC_READ_GROUP_API == STD_ON)
/* SWS_Adc_00369, SWS_Adc_00383, SWS_Adc_00503 */
/** @implements      Adc_ReadGroup_Activity */
Std_ReturnType Adc_ReadGroup(Adc_GroupType Group,
                             Adc_ValueGroupType * DataBufferPtr)
{
    89f8:	b500      	push	{lr}
    89fa:	b085      	sub	sp, #20
    89fc:	4603      	mov	r3, r0
    89fe:	9100      	str	r1, [sp, #0]
    8a00:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId;
    /* Return Value */
    Std_ReturnType GroupRet = (Std_ReturnType)E_NOT_OK;
    8a04:	2301      	movs	r3, #1
    8a06:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean Flag = TRUE;
    8a0a:	2301      	movs	r3, #1
    8a0c:	f88d 300d 	strb.w	r3, [sp, #13]

    CoreId = Adc_GetCoreID();
    8a10:	f002 f8d2 	bl	abb8 <Adc_GetCoreID>
    8a14:	4603      	mov	r3, r0
    8a16:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_VALUEREADGROUP_ID, DataBufferPtr))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

            if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_VALUEREADGROUP_ID, Group, CoreId))
    8a1a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8a1e:	b2da      	uxtb	r2, r3
    8a20:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8a24:	4619      	mov	r1, r3
    8a26:	2004      	movs	r0, #4
    8a28:	f7ff f900 	bl	7c2c <Adc_ValidateStateNotIdle>
    8a2c:	4603      	mov	r3, r0
    8a2e:	2b00      	cmp	r3, #0
    8a30:	d121      	bne.n	8a76 <Adc_ReadGroup+0x7e>
            {
                /* SWS_Adc_00447 */
                GroupRet = Adc_Ipw_ReadGroup(Group, DataBufferPtr, &Flag, CoreId);
    8a32:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8a36:	b2db      	uxtb	r3, r3
    8a38:	f10d 020d 	add.w	r2, sp, #13
    8a3c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    8a40:	9900      	ldr	r1, [sp, #0]
    8a42:	f002 f812 	bl	aa6a <Adc_Ipw_ReadGroup>
    8a46:	4603      	mov	r3, r0
    8a48:	f88d 300f 	strb.w	r3, [sp, #15]
                /*if the conversion is finished or if the limit checking was failed for the group without interrupts*/
                if (((Std_ReturnType)E_OK == GroupRet) || (FALSE == Flag))
    8a4c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8a50:	2b00      	cmp	r3, #0
    8a52:	d006      	beq.n	8a62 <Adc_ReadGroup+0x6a>
    8a54:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8a58:	f083 0301 	eor.w	r3, r3, #1
    8a5c:	b2db      	uxtb	r3, r3
    8a5e:	2b00      	cmp	r3, #0
    8a60:	d009      	beq.n	8a76 <Adc_ReadGroup+0x7e>
                {
                    Adc_UpdateStatusReadGroup(Group, Flag, CoreId);
    8a62:	f89d 100d 	ldrb.w	r1, [sp, #13]
    8a66:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8a6a:	b2da      	uxtb	r2, r3
    8a6c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8a70:	4618      	mov	r0, r3
    8a72:	f7ff fbe5 	bl	8240 <Adc_UpdateStatusReadGroup>

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return GroupRet;
    8a76:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8a7a:	4618      	mov	r0, r3
    8a7c:	b005      	add	sp, #20
    8a7e:	f85d fb04 	ldr.w	pc, [sp], #4

00008a82 <Adc_GetGroupStatus>:
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */

/* SWS_Adc_00374, SWS_Adc_00140, SWS_Adc_00503, SWS_Adc_00413 */
/** @implements      Adc_GetGroupStatus_Activity */
Adc_StatusType Adc_GetGroupStatus(Adc_GroupType Group)
{
    8a82:	b084      	sub	sp, #16
    8a84:	4603      	mov	r3, r0
    8a86:	f8ad 3006 	strh.w	r3, [sp, #6]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    volatile uint8 CoreId;
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
    Adc_StatusType TempReturn = ADC_IDLE;
    8a8a:	2300      	movs	r3, #0
    8a8c:	9303      	str	r3, [sp, #12]
    CoreId = Adc_GetCoreID();
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_GETGROUPSTATUS_ID, Group, CoreId))
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
        /* SWS_Adc_00220 */
        TempReturn = Adc_axGroupStatus[Group].Conversion;
    8a8e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8a92:	4906      	ldr	r1, [pc, #24]	; (8aac <Adc_GetGroupStatus+0x2a>)
    8a94:	4613      	mov	r3, r2
    8a96:	009b      	lsls	r3, r3, #2
    8a98:	4413      	add	r3, r2
    8a9a:	009b      	lsls	r3, r3, #2
    8a9c:	440b      	add	r3, r1
    8a9e:	681b      	ldr	r3, [r3, #0]
    8aa0:	9303      	str	r3, [sp, #12]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return(TempReturn);
    8aa2:	9b03      	ldr	r3, [sp, #12]
}
    8aa4:	4618      	mov	r0, r3
    8aa6:	b004      	add	sp, #16
    8aa8:	4770      	bx	lr
    8aaa:	bf00      	nop
    8aac:	1fff8d30 	.word	0x1fff8d30

00008ab0 <Adc_GetStreamLastPointer>:

/* SWS_Adc_00375, SWS_Adc_00382 */
/** @implements      Adc_GetStreamLastPointer_Activity */
Adc_StreamNumSampleType Adc_GetStreamLastPointer(Adc_GroupType Group,
                                                 Adc_ValueGroupType ** PtrToSamplePtr)
{
    8ab0:	b500      	push	{lr}
    8ab2:	b085      	sub	sp, #20
    8ab4:	4603      	mov	r3, r0
    8ab6:	9100      	str	r1, [sp, #0]
    8ab8:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId = Adc_GetCoreID();
    8abc:	f002 f87c 	bl	abb8 <Adc_GetCoreID>
    8ac0:	4603      	mov	r3, r0
    8ac2:	f88d 3009 	strb.w	r3, [sp, #9]
    Adc_GroupType GroupIndex = 0U;
    8ac6:	2300      	movs	r3, #0
    8ac8:	f8ad 300a 	strh.w	r3, [sp, #10]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    const Adc_GroupConfigurationType * GroupPtr;
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
    /* Number of samples to return */
    Adc_StreamNumSampleType NumberOfResults = 0U;
    8acc:	2300      	movs	r3, #0
    8ace:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_StreamNumSampleType ResultIndex = 0U;
    8ad2:	2300      	movs	r3, #0
    8ad4:	f8ad 300c 	strh.w	r3, [sp, #12]
        /* Get channel count from configuration */
        ChannelCount = GroupPtr->AssignedChannelCount;
#endif
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

        if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_GETSTREAMLASTPOINTER_ID, Group, CoreId))
    8ad8:	f89d 3009 	ldrb.w	r3, [sp, #9]
    8adc:	b2da      	uxtb	r2, r3
    8ade:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8ae2:	4619      	mov	r1, r3
    8ae4:	200b      	movs	r0, #11
    8ae6:	f7ff f8a1 	bl	7c2c <Adc_ValidateStateNotIdle>
    8aea:	4603      	mov	r3, r0
    8aec:	2b00      	cmp	r3, #0
    8aee:	f040 808e 	bne.w	8c0e <Adc_GetStreamLastPointer+0x15e>
        {
            *PtrToSamplePtr = NULL_PTR;
    8af2:	9b00      	ldr	r3, [sp, #0]
    8af4:	2200      	movs	r2, #0
    8af6:	601a      	str	r2, [r3, #0]

            if ((ADC_IDLE != Adc_axGroupStatus[Group].Conversion) && \
    8af8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8afc:	4948      	ldr	r1, [pc, #288]	; (8c20 <Adc_GetStreamLastPointer+0x170>)
    8afe:	4613      	mov	r3, r2
    8b00:	009b      	lsls	r3, r3, #2
    8b02:	4413      	add	r3, r2
    8b04:	009b      	lsls	r3, r3, #2
    8b06:	440b      	add	r3, r1
    8b08:	681b      	ldr	r3, [r3, #0]
    8b0a:	2b00      	cmp	r3, #0
    8b0c:	f000 8082 	beq.w	8c14 <Adc_GetStreamLastPointer+0x164>
                (ADC_BUSY != Adc_axGroupStatus[Group].Conversion)) /* SWS_Adc_00216 */
    8b10:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8b14:	4942      	ldr	r1, [pc, #264]	; (8c20 <Adc_GetStreamLastPointer+0x170>)
    8b16:	4613      	mov	r3, r2
    8b18:	009b      	lsls	r3, r3, #2
    8b1a:	4413      	add	r3, r2
    8b1c:	009b      	lsls	r3, r3, #2
    8b1e:	440b      	add	r3, r1
    8b20:	681b      	ldr	r3, [r3, #0]
            if ((ADC_IDLE != Adc_axGroupStatus[Group].Conversion) && \
    8b22:	2b01      	cmp	r3, #1
    8b24:	d076      	beq.n	8c14 <Adc_GetStreamLastPointer+0x164>
            {
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    8b26:	f89d 3009 	ldrb.w	r3, [sp, #9]
    8b2a:	b2db      	uxtb	r3, r3
    8b2c:	461a      	mov	r2, r3
    8b2e:	4b3d      	ldr	r3, [pc, #244]	; (8c24 <Adc_GetStreamLastPointer+0x174>)
    8b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8b34:	68da      	ldr	r2, [r3, #12]
    8b36:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8b3a:	005b      	lsls	r3, r3, #1
    8b3c:	4413      	add	r3, r2
    8b3e:	881b      	ldrh	r3, [r3, #0]
    8b40:	f8ad 300a 	strh.w	r3, [sp, #10]
                if ((Adc_StreamNumSampleType)0U == Adc_axGroupStatus[Group].ResultIndex)
    8b44:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8b48:	4935      	ldr	r1, [pc, #212]	; (8c20 <Adc_GetStreamLastPointer+0x170>)
    8b4a:	4613      	mov	r3, r2
    8b4c:	009b      	lsls	r3, r3, #2
    8b4e:	4413      	add	r3, r2
    8b50:	009b      	lsls	r3, r3, #2
    8b52:	440b      	add	r3, r1
    8b54:	3308      	adds	r3, #8
    8b56:	881b      	ldrh	r3, [r3, #0]
    8b58:	b29b      	uxth	r3, r3
    8b5a:	2b00      	cmp	r3, #0
    8b5c:	d123      	bne.n	8ba6 <Adc_GetStreamLastPointer+0xf6>
                {
                    ResultIndex = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].NumSamples - (Adc_StreamNumSampleType)1U;
    8b5e:	f89d 3009 	ldrb.w	r3, [sp, #9]
    8b62:	b2db      	uxtb	r3, r3
    8b64:	461a      	mov	r2, r3
    8b66:	4b2f      	ldr	r3, [pc, #188]	; (8c24 <Adc_GetStreamLastPointer+0x174>)
    8b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8b6c:	685a      	ldr	r2, [r3, #4]
    8b6e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8b72:	2134      	movs	r1, #52	; 0x34
    8b74:	fb01 f303 	mul.w	r3, r1, r3
    8b78:	4413      	add	r3, r2
    8b7a:	8b9b      	ldrh	r3, [r3, #28]
    8b7c:	3b01      	subs	r3, #1
    8b7e:	f8ad 300c 	strh.w	r3, [sp, #12]
                    /* SWS_Adc_00387 */
                    NumberOfResults = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].NumSamples;
    8b82:	f89d 3009 	ldrb.w	r3, [sp, #9]
    8b86:	b2db      	uxtb	r3, r3
    8b88:	461a      	mov	r2, r3
    8b8a:	4b26      	ldr	r3, [pc, #152]	; (8c24 <Adc_GetStreamLastPointer+0x174>)
    8b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8b90:	685a      	ldr	r2, [r3, #4]
    8b92:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8b96:	2134      	movs	r1, #52	; 0x34
    8b98:	fb01 f303 	mul.w	r3, r1, r3
    8b9c:	4413      	add	r3, r2
    8b9e:	8b9b      	ldrh	r3, [r3, #28]
    8ba0:	f8ad 300e 	strh.w	r3, [sp, #14]
    8ba4:	e019      	b.n	8bda <Adc_GetStreamLastPointer+0x12a>
                }
                else
                {
                    ResultIndex = Adc_axGroupStatus[Group].ResultIndex - (Adc_StreamNumSampleType)1U;
    8ba6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8baa:	491d      	ldr	r1, [pc, #116]	; (8c20 <Adc_GetStreamLastPointer+0x170>)
    8bac:	4613      	mov	r3, r2
    8bae:	009b      	lsls	r3, r3, #2
    8bb0:	4413      	add	r3, r2
    8bb2:	009b      	lsls	r3, r3, #2
    8bb4:	440b      	add	r3, r1
    8bb6:	3308      	adds	r3, #8
    8bb8:	881b      	ldrh	r3, [r3, #0]
    8bba:	b29b      	uxth	r3, r3
    8bbc:	3b01      	subs	r3, #1
    8bbe:	f8ad 300c 	strh.w	r3, [sp, #12]
                    /* SWS_Adc_00387 */
                    NumberOfResults = Adc_axGroupStatus[Group].ResultIndex;
    8bc2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8bc6:	4916      	ldr	r1, [pc, #88]	; (8c20 <Adc_GetStreamLastPointer+0x170>)
    8bc8:	4613      	mov	r3, r2
    8bca:	009b      	lsls	r3, r3, #2
    8bcc:	4413      	add	r3, r2
    8bce:	009b      	lsls	r3, r3, #2
    8bd0:	440b      	add	r3, r1
    8bd2:	3308      	adds	r3, #8
    8bd4:	881b      	ldrh	r3, [r3, #0]
    8bd6:	f8ad 300e 	strh.w	r3, [sp, #14]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
                /* SWS_Adc_00214 -- SWS_Adc_00418 -- ADC382 */
                if (FALSE == GroupPtr->StreamResultGroupMultiSets)
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
                {
                    *PtrToSamplePtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex]));
    8bda:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8bde:	4910      	ldr	r1, [pc, #64]	; (8c20 <Adc_GetStreamLastPointer+0x170>)
    8be0:	4613      	mov	r3, r2
    8be2:	009b      	lsls	r3, r3, #2
    8be4:	4413      	add	r3, r2
    8be6:	009b      	lsls	r3, r3, #2
    8be8:	440b      	add	r3, r1
    8bea:	330c      	adds	r3, #12
    8bec:	681a      	ldr	r2, [r3, #0]
    8bee:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8bf2:	005b      	lsls	r3, r3, #1
    8bf4:	441a      	add	r2, r3
    8bf6:	9b00      	ldr	r3, [sp, #0]
    8bf8:	601a      	str	r2, [r3, #0]
                else
                {
                    *PtrToSamplePtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex * ChannelCount]));
                }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
                Adc_UpdateStatusAfterGetStream(Group, CoreId);
    8bfa:	f89d 3009 	ldrb.w	r3, [sp, #9]
    8bfe:	b2da      	uxtb	r2, r3
    8c00:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8c04:	4611      	mov	r1, r2
    8c06:	4618      	mov	r0, r3
    8c08:	f7ff fcda 	bl	85c0 <Adc_UpdateStatusAfterGetStream>
    8c0c:	e002      	b.n	8c14 <Adc_GetStreamLastPointer+0x164>
            }
        }
        else
        {
            *PtrToSamplePtr = NULL_PTR;
    8c0e:	9b00      	ldr	r3, [sp, #0]
    8c10:	2200      	movs	r2, #0
    8c12:	601a      	str	r2, [r3, #0]
        /* SWS_Adc_00302, SWS_Adc_00218 */
        *PtrToSamplePtr = NULL_PTR;
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return NumberOfResults;
    8c14:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    8c18:	4618      	mov	r0, r3
    8c1a:	b005      	add	sp, #20
    8c1c:	f85d fb04 	ldr.w	pc, [sp], #4
    8c20:	1fff8d30 	.word	0x1fff8d30
    8c24:	1fff8d2c 	.word	0x1fff8d2c

00008c28 <Adc_GetVersionInfo>:

#if (ADC_VERSION_INFO_API == STD_ON)
/* SWS_Adc_00376 */
/** @implements      Adc_GetVersionInfo_Activity */
void Adc_GetVersionInfo(Std_VersionInfoType * versioninfo)
{
    8c28:	b082      	sub	sp, #8
    8c2a:	9001      	str	r0, [sp, #4]
#if (ADC_VALIDATE_PARAMS == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_GETVERSIONINFO_ID, versioninfo))
    {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

        (versioninfo)->vendorID = (uint16)ADC_VENDOR_ID;
    8c2c:	9b01      	ldr	r3, [sp, #4]
    8c2e:	222b      	movs	r2, #43	; 0x2b
    8c30:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID = (uint16)ADC_MODULE_ID;
    8c32:	9b01      	ldr	r3, [sp, #4]
    8c34:	227b      	movs	r2, #123	; 0x7b
    8c36:	805a      	strh	r2, [r3, #2]
        (versioninfo)->sw_major_version = (uint8)ADC_SW_MAJOR_VERSION;
    8c38:	9b01      	ldr	r3, [sp, #4]
    8c3a:	2202      	movs	r2, #2
    8c3c:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)ADC_SW_MINOR_VERSION;
    8c3e:	9b01      	ldr	r3, [sp, #4]
    8c40:	2200      	movs	r2, #0
    8c42:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)ADC_SW_PATCH_VERSION;
    8c44:	9b01      	ldr	r3, [sp, #4]
    8c46:	2200      	movs	r2, #0
    8c48:	719a      	strb	r2, [r3, #6]

#if (ADC_VALIDATE_PARAMS == STD_ON)
    }
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
}
    8c4a:	bf00      	nop
    8c4c:	b002      	add	sp, #8
    8c4e:	4770      	bx	lr

00008c50 <Adc_Calibrate>:
#if (ADC_CALIBRATION == STD_ON)
/* CPR_RTD_00014.adc, CPR_RTD_00029.adc */
/** @implements      Adc_Calibrate_Activity */
void Adc_Calibrate(Adc_HwUnitType Unit,
                   Adc_CalibrationStatusType * pStatus)
{
    8c50:	b500      	push	{lr}
    8c52:	b085      	sub	sp, #20
    8c54:	4603      	mov	r3, r0
    8c56:	9100      	str	r1, [sp, #0]
    8c58:	f88d 3007 	strb.w	r3, [sp, #7]
    volatile uint8 CoreId;
    boolean IsCalibrateCalled = FALSE;
    8c5c:	2300      	movs	r3, #0
    8c5e:	f88d 300f 	strb.w	r3, [sp, #15]

    CoreId = Adc_GetCoreID();
    8c62:	f001 ffa9 	bl	abb8 <Adc_GetCoreID>
    8c66:	4603      	mov	r3, r0
    8c68:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_CALIBRATE_ID, pStatus))
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
            /* Reset status before executing the calibration */
            pStatus->AdcUnitSelfTestStatus = E_NOT_OK;
    8c6c:	9b00      	ldr	r3, [sp, #0]
    8c6e:	2201      	movs	r2, #1
    8c70:	701a      	strb	r2, [r3, #0]
            if ((Std_ReturnType)E_OK == Adc_ValidateNotBusyNoQueue(Unit, ADC_CALIBRATE_ID))
    8c72:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8c76:	2129      	movs	r1, #41	; 0x29
    8c78:	4618      	mov	r0, r3
    8c7a:	f7fe fe30 	bl	78de <Adc_ValidateNotBusyNoQueue>
    8c7e:	4603      	mov	r3, r0
    8c80:	2b00      	cmp	r3, #0
    8c82:	d115      	bne.n	8cb0 <Adc_Calibrate+0x60>
            {
                if ((Std_ReturnType)E_OK == Adc_ValidateCheckGroupNotConversion(ADC_CALIBRATE_ID, CoreId))
    8c84:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8c88:	b2db      	uxtb	r3, r3
    8c8a:	4619      	mov	r1, r3
    8c8c:	2029      	movs	r0, #41	; 0x29
    8c8e:	f7fe fe91 	bl	79b4 <Adc_ValidateCheckGroupNotConversion>
    8c92:	4603      	mov	r3, r0
    8c94:	2b00      	cmp	r3, #0
    8c96:	d10b      	bne.n	8cb0 <Adc_Calibrate+0x60>
                {
                    Adc_Ipw_Calibrate(Unit, pStatus, CoreId);
    8c98:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8c9c:	b2da      	uxtb	r2, r3
    8c9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8ca2:	9900      	ldr	r1, [sp, #0]
    8ca4:	4618      	mov	r0, r3
    8ca6:	f001 ff5d 	bl	ab64 <Adc_Ipw_Calibrate>
                    IsCalibrateCalled = TRUE;
    8caa:	2301      	movs	r3, #1
    8cac:	f88d 300f 	strb.w	r3, [sp, #15]
                }
            }
            if (TRUE == IsCalibrateCalled)
    8cb0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8cb4:	2b00      	cmp	r3, #0
    8cb6:	d007      	beq.n	8cc8 <Adc_Calibrate+0x78>
            {
                if ((Std_ReturnType)E_NOT_OK == pStatus->AdcUnitSelfTestStatus)
    8cb8:	9b00      	ldr	r3, [sp, #0]
    8cba:	781b      	ldrb	r3, [r3, #0]
    8cbc:	2b01      	cmp	r3, #1
    8cbe:	d103      	bne.n	8cc8 <Adc_Calibrate+0x78>
                {
                    Adc_ReportDetRuntimeError((uint8)ADC_CALIBRATE_ID, (uint8)ADC_E_TIMEOUT);
    8cc0:	212b      	movs	r1, #43	; 0x2b
    8cc2:	2029      	movs	r0, #41	; 0x29
    8cc4:	f7fe fdf6 	bl	78b4 <Adc_ReportDetRuntimeError>
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

#if (ADC_VALIDATE_CALL_AND_UNIT == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_UNIT == STD_ON */
}
    8cc8:	bf00      	nop
    8cca:	b005      	add	sp, #20
    8ccc:	f85d fb04 	ldr.w	pc, [sp], #4

00008cd0 <Adc_HwAcc_SetSC2Reg>:
#include "Adc_MemMap.h"

static inline void Adc_HwAcc_SetSC2Reg(ADC_Type * const Base,
                                       const uint32 ClearMask,
                                       const uint32 Value)
{
    8cd0:	b086      	sub	sp, #24
    8cd2:	9003      	str	r0, [sp, #12]
    8cd4:	9102      	str	r1, [sp, #8]
    8cd6:	9201      	str	r2, [sp, #4]
    /* Clear and set SC2 register based on ClearMask and Value */
    uint32 Sc2Reg = Base->SC2;
    8cd8:	9b03      	ldr	r3, [sp, #12]
    8cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8cde:	9305      	str	r3, [sp, #20]
    Sc2Reg &= ~(ClearMask);
    8ce0:	9b02      	ldr	r3, [sp, #8]
    8ce2:	43db      	mvns	r3, r3
    8ce4:	9a05      	ldr	r2, [sp, #20]
    8ce6:	4013      	ands	r3, r2
    8ce8:	9305      	str	r3, [sp, #20]
    Sc2Reg |= Value;
    8cea:	9a05      	ldr	r2, [sp, #20]
    8cec:	9b01      	ldr	r3, [sp, #4]
    8cee:	4313      	orrs	r3, r2
    8cf0:	9305      	str	r3, [sp, #20]
    Base->SC2 = Sc2Reg;
    8cf2:	9b03      	ldr	r3, [sp, #12]
    8cf4:	9a05      	ldr	r2, [sp, #20]
    8cf6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    8cfa:	bf00      	nop
    8cfc:	b006      	add	sp, #24
    8cfe:	4770      	bx	lr

00008d00 <Adc_HwAcc_SetClock>:

static inline void Adc_HwAcc_SetClock(ADC_Type * const Base,
                                      const Adc_Ip_ClockSelType ClockDivide,
                                      const Adc_Ip_ClkSourceType InputClock)
{
    8d00:	b086      	sub	sp, #24
    8d02:	9003      	str	r0, [sp, #12]
    8d04:	9102      	str	r1, [sp, #8]
    8d06:	9201      	str	r2, [sp, #4]
    /* Update ClockDivide and InputClock values found in CFG1 register */
    uint32 Cfg1Reg = Base->CFG1;
    8d08:	9b03      	ldr	r3, [sp, #12]
    8d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8d0c:	9305      	str	r3, [sp, #20]
    Cfg1Reg &= ~(ADC_CFG1_ADIV_MASK | ADC_CFG1_ADICLK_MASK);
    8d0e:	9b05      	ldr	r3, [sp, #20]
    8d10:	f023 0363 	bic.w	r3, r3, #99	; 0x63
    8d14:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADIV(ClockDivide);
    8d16:	9b02      	ldr	r3, [sp, #8]
    8d18:	015b      	lsls	r3, r3, #5
    8d1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
    8d1e:	9a05      	ldr	r2, [sp, #20]
    8d20:	4313      	orrs	r3, r2
    8d22:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADICLK(InputClock);
    8d24:	9b01      	ldr	r3, [sp, #4]
    8d26:	f003 0303 	and.w	r3, r3, #3
    8d2a:	9a05      	ldr	r2, [sp, #20]
    8d2c:	4313      	orrs	r3, r2
    8d2e:	9305      	str	r3, [sp, #20]
    Base->CFG1 = Cfg1Reg;
    8d30:	9b03      	ldr	r3, [sp, #12]
    8d32:	9a05      	ldr	r2, [sp, #20]
    8d34:	641a      	str	r2, [r3, #64]	; 0x40
}
    8d36:	bf00      	nop
    8d38:	b006      	add	sp, #24
    8d3a:	4770      	bx	lr

00008d3c <Adc_HwAcc_GetClockDivide>:

static inline Adc_Ip_ClockSelType Adc_HwAcc_GetClockDivide(const uint32 Reg)
{
    8d3c:	b084      	sub	sp, #16
    8d3e:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve ClockDivide value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClockSelType ReturnValue = ADC_IP_CLK_FULL_BUS;
    8d40:	2300      	movs	r3, #0
    8d42:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADIV_MASK) >> ADC_CFG1_ADIV_SHIFT)
    8d44:	9b01      	ldr	r3, [sp, #4]
    8d46:	095b      	lsrs	r3, r3, #5
    8d48:	f003 0303 	and.w	r3, r3, #3
    8d4c:	2b03      	cmp	r3, #3
    8d4e:	d00c      	beq.n	8d6a <Adc_HwAcc_GetClockDivide+0x2e>
    8d50:	2b03      	cmp	r3, #3
    8d52:	d80d      	bhi.n	8d70 <Adc_HwAcc_GetClockDivide+0x34>
    8d54:	2b01      	cmp	r3, #1
    8d56:	d002      	beq.n	8d5e <Adc_HwAcc_GetClockDivide+0x22>
    8d58:	2b02      	cmp	r3, #2
    8d5a:	d003      	beq.n	8d64 <Adc_HwAcc_GetClockDivide+0x28>
        case 3u:
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
            break;
        default:
            ; /* no-op */
            break;
    8d5c:	e008      	b.n	8d70 <Adc_HwAcc_GetClockDivide+0x34>
            ReturnValue = ADC_IP_CLK_HALF_BUS;
    8d5e:	2301      	movs	r3, #1
    8d60:	9303      	str	r3, [sp, #12]
            break;
    8d62:	e006      	b.n	8d72 <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_QUARTER_BUS;
    8d64:	2302      	movs	r3, #2
    8d66:	9303      	str	r3, [sp, #12]
            break;
    8d68:	e003      	b.n	8d72 <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
    8d6a:	2303      	movs	r3, #3
    8d6c:	9303      	str	r3, [sp, #12]
            break;
    8d6e:	e000      	b.n	8d72 <Adc_HwAcc_GetClockDivide+0x36>
            break;
    8d70:	bf00      	nop
    }
    return ReturnValue;
    8d72:	9b03      	ldr	r3, [sp, #12]
}
    8d74:	4618      	mov	r0, r3
    8d76:	b004      	add	sp, #16
    8d78:	4770      	bx	lr

00008d7a <Adc_HwAcc_GetInputClock>:

static inline Adc_Ip_ClkSourceType Adc_HwAcc_GetInputClock(const uint32 Reg)
{
    8d7a:	b084      	sub	sp, #16
    8d7c:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve InputClock value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClkSourceType ReturnValue = ADC_IP_CLK_ALT_1;
    8d7e:	2300      	movs	r3, #0
    8d80:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADICLK_MASK) >> ADC_CFG1_ADICLK_SHIFT)
    8d82:	9b01      	ldr	r3, [sp, #4]
    8d84:	f003 0303 	and.w	r3, r3, #3
    8d88:	2b03      	cmp	r3, #3
    8d8a:	d00c      	beq.n	8da6 <Adc_HwAcc_GetInputClock+0x2c>
    8d8c:	2b03      	cmp	r3, #3
    8d8e:	d80d      	bhi.n	8dac <Adc_HwAcc_GetInputClock+0x32>
    8d90:	2b01      	cmp	r3, #1
    8d92:	d002      	beq.n	8d9a <Adc_HwAcc_GetInputClock+0x20>
    8d94:	2b02      	cmp	r3, #2
    8d96:	d003      	beq.n	8da0 <Adc_HwAcc_GetInputClock+0x26>
        case 3u:
            ReturnValue = ADC_IP_CLK_ALT_4;
            break;
        default:
            ; /* no-op */
            break;
    8d98:	e008      	b.n	8dac <Adc_HwAcc_GetInputClock+0x32>
            ReturnValue = ADC_IP_CLK_ALT_2;
    8d9a:	2301      	movs	r3, #1
    8d9c:	9303      	str	r3, [sp, #12]
            break;
    8d9e:	e006      	b.n	8dae <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_3;
    8da0:	2302      	movs	r3, #2
    8da2:	9303      	str	r3, [sp, #12]
            break;
    8da4:	e003      	b.n	8dae <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_4;
    8da6:	2303      	movs	r3, #3
    8da8:	9303      	str	r3, [sp, #12]
            break;
    8daa:	e000      	b.n	8dae <Adc_HwAcc_GetInputClock+0x34>
            break;
    8dac:	bf00      	nop
    }
    return ReturnValue;
    8dae:	9b03      	ldr	r3, [sp, #12]
}
    8db0:	4618      	mov	r0, r3
    8db2:	b004      	add	sp, #16
    8db4:	4770      	bx	lr

00008db6 <Adc_HwAcc_SetSampleTime>:

static inline void Adc_HwAcc_SetSampleTime(ADC_Type * const Base,
                                           const uint8 SampleTime)
{
    8db6:	b084      	sub	sp, #16
    8db8:	9001      	str	r0, [sp, #4]
    8dba:	460b      	mov	r3, r1
    8dbc:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Clip sample time to minimum value */
    uint8 ClippedSampleTime = (uint8)((SampleTime > 0U) ? SampleTime : 1U);
    8dc0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8dc4:	2b00      	cmp	r3, #0
    8dc6:	d002      	beq.n	8dce <Adc_HwAcc_SetSampleTime+0x18>
    8dc8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8dcc:	e000      	b.n	8dd0 <Adc_HwAcc_SetSampleTime+0x1a>
    8dce:	2301      	movs	r3, #1
    8dd0:	f88d 300f 	strb.w	r3, [sp, #15]
    /* Update SampleTime values found in SC3 register */
    uint32 Cfg2Reg = Base->CFG2;
    8dd4:	9b01      	ldr	r3, [sp, #4]
    8dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8dd8:	9302      	str	r3, [sp, #8]
    Cfg2Reg &= ~(ADC_CFG2_SMPLTS_MASK);
    8dda:	9b02      	ldr	r3, [sp, #8]
    8ddc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    8de0:	9302      	str	r3, [sp, #8]
    Cfg2Reg |= ADC_CFG2_SMPLTS(ClippedSampleTime);
    8de2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8de6:	9a02      	ldr	r2, [sp, #8]
    8de8:	4313      	orrs	r3, r2
    8dea:	9302      	str	r3, [sp, #8]
    Base->CFG2 = Cfg2Reg;
    8dec:	9b01      	ldr	r3, [sp, #4]
    8dee:	9a02      	ldr	r2, [sp, #8]
    8df0:	645a      	str	r2, [r3, #68]	; 0x44
}
    8df2:	bf00      	nop
    8df4:	b004      	add	sp, #16
    8df6:	4770      	bx	lr

00008df8 <Adc_HwAcc_SetAveraging>:

static inline void Adc_HwAcc_SetAveraging(ADC_Type * const Base,
                                          const boolean AvgEn,
                                          const Adc_Ip_AvgSelectType AvgSel)
{
    8df8:	b086      	sub	sp, #24
    8dfa:	9003      	str	r0, [sp, #12]
    8dfc:	460b      	mov	r3, r1
    8dfe:	9201      	str	r2, [sp, #4]
    8e00:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Update AvgEn and AvgSel values found in SC3 register */
    uint32 Sc3Reg = Base->SC3;
    8e04:	9b03      	ldr	r3, [sp, #12]
    8e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    8e0a:	9305      	str	r3, [sp, #20]
    Sc3Reg &= ~(ADC_SC3_AVGE_MASK | ADC_SC3_AVGS_MASK);
    8e0c:	9b05      	ldr	r3, [sp, #20]
    8e0e:	f023 0307 	bic.w	r3, r3, #7
    8e12:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGE(AvgEn ? 1u : 0u);
    8e14:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8e18:	2b00      	cmp	r3, #0
    8e1a:	d001      	beq.n	8e20 <Adc_HwAcc_SetAveraging+0x28>
    8e1c:	2304      	movs	r3, #4
    8e1e:	e000      	b.n	8e22 <Adc_HwAcc_SetAveraging+0x2a>
    8e20:	2300      	movs	r3, #0
    8e22:	9a05      	ldr	r2, [sp, #20]
    8e24:	4313      	orrs	r3, r2
    8e26:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGS(AvgSel);
    8e28:	9b01      	ldr	r3, [sp, #4]
    8e2a:	f003 0303 	and.w	r3, r3, #3
    8e2e:	9a05      	ldr	r2, [sp, #20]
    8e30:	4313      	orrs	r3, r2
    8e32:	9305      	str	r3, [sp, #20]
    Base->SC3 = Sc3Reg;
    8e34:	9b03      	ldr	r3, [sp, #12]
    8e36:	9a05      	ldr	r2, [sp, #20]
    8e38:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    8e3c:	bf00      	nop
    8e3e:	b006      	add	sp, #24
    8e40:	4770      	bx	lr

00008e42 <Adc_HwAcc_GetAverageSelect>:

static inline Adc_Ip_AvgSelectType Adc_HwAcc_GetAverageSelect(const uint32 Reg)
{
    8e42:	b084      	sub	sp, #16
    8e44:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve AvgSelect value found in SC3 register
     * Note: Reg should be the value of SC3 register
     */
    Adc_Ip_AvgSelectType ReturnValue = ADC_IP_AVG_4_CONV;
    8e46:	2300      	movs	r3, #0
    8e48:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_SC3_AVGS_MASK) >> ADC_SC3_AVGS_SHIFT)
    8e4a:	9b01      	ldr	r3, [sp, #4]
    8e4c:	f003 0303 	and.w	r3, r3, #3
    8e50:	2b03      	cmp	r3, #3
    8e52:	d00c      	beq.n	8e6e <Adc_HwAcc_GetAverageSelect+0x2c>
    8e54:	2b03      	cmp	r3, #3
    8e56:	d80d      	bhi.n	8e74 <Adc_HwAcc_GetAverageSelect+0x32>
    8e58:	2b01      	cmp	r3, #1
    8e5a:	d002      	beq.n	8e62 <Adc_HwAcc_GetAverageSelect+0x20>
    8e5c:	2b02      	cmp	r3, #2
    8e5e:	d003      	beq.n	8e68 <Adc_HwAcc_GetAverageSelect+0x26>
        case 3u:
            ReturnValue = ADC_IP_AVG_32_CONV;
            break;
        default:
            ; /* no-op */
            break;
    8e60:	e008      	b.n	8e74 <Adc_HwAcc_GetAverageSelect+0x32>
            ReturnValue = ADC_IP_AVG_8_CONV;
    8e62:	2301      	movs	r3, #1
    8e64:	9303      	str	r3, [sp, #12]
            break;
    8e66:	e006      	b.n	8e76 <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_16_CONV;
    8e68:	2302      	movs	r3, #2
    8e6a:	9303      	str	r3, [sp, #12]
            break;
    8e6c:	e003      	b.n	8e76 <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_32_CONV;
    8e6e:	2303      	movs	r3, #3
    8e70:	9303      	str	r3, [sp, #12]
            break;
    8e72:	e000      	b.n	8e76 <Adc_HwAcc_GetAverageSelect+0x34>
            break;
    8e74:	bf00      	nop
    }
    return ReturnValue;
    8e76:	9b03      	ldr	r3, [sp, #12]
}
    8e78:	4618      	mov	r0, r3
    8e7a:	b004      	add	sp, #16
    8e7c:	4770      	bx	lr

00008e7e <Adc_HwAcc_SetTriggerMode>:

static inline void Adc_HwAcc_SetTriggerMode(ADC_Type * const Base,
                                            const Adc_Ip_TrigType TriggerMode)
{
    8e7e:	b084      	sub	sp, #16
    8e80:	9001      	str	r0, [sp, #4]
    8e82:	9100      	str	r1, [sp, #0]
    /* Update TriggerMode value found in SC2 register */
    uint32 Sc2Reg = Base->SC2;
    8e84:	9b01      	ldr	r3, [sp, #4]
    8e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8e8a:	9303      	str	r3, [sp, #12]
    Sc2Reg &= ~(ADC_SC2_ADTRG_MASK);
    8e8c:	9b03      	ldr	r3, [sp, #12]
    8e8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    8e92:	9303      	str	r3, [sp, #12]
    Sc2Reg |= ADC_SC2_ADTRG(TriggerMode);
    8e94:	9b00      	ldr	r3, [sp, #0]
    8e96:	019b      	lsls	r3, r3, #6
    8e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8e9c:	9a03      	ldr	r2, [sp, #12]
    8e9e:	4313      	orrs	r3, r2
    8ea0:	9303      	str	r3, [sp, #12]
    Base->SC2 = Sc2Reg;
    8ea2:	9b01      	ldr	r3, [sp, #4]
    8ea4:	9a03      	ldr	r2, [sp, #12]
    8ea6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    8eaa:	bf00      	nop
    8eac:	b004      	add	sp, #16
    8eae:	4770      	bx	lr

00008eb0 <Adc_HwAcc_GetTriggerMode>:

static inline Adc_Ip_TrigType Adc_HwAcc_GetTriggerMode(const uint32 Reg)
{
    8eb0:	b084      	sub	sp, #16
    8eb2:	9001      	str	r0, [sp, #4]
    /* Retrieve TriggerMode value found in SC2 register */
    Adc_Ip_TrigType ReturnValue = ADC_IP_TRIGGER_SOFTWARE;
    8eb4:	2300      	movs	r3, #0
    8eb6:	9303      	str	r3, [sp, #12]
    if (((Reg & ADC_SC2_ADTRG_MASK) >> ADC_SC2_ADTRG_SHIFT) == 1u)
    8eb8:	9b01      	ldr	r3, [sp, #4]
    8eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8ebe:	2b00      	cmp	r3, #0
    8ec0:	d001      	beq.n	8ec6 <Adc_HwAcc_GetTriggerMode+0x16>
    {
        ReturnValue = ADC_IP_TRIGGER_HARDWARE;
    8ec2:	2301      	movs	r3, #1
    8ec4:	9303      	str	r3, [sp, #12]
    }
    return ReturnValue;
    8ec6:	9b03      	ldr	r3, [sp, #12]
}
    8ec8:	4618      	mov	r0, r3
    8eca:	b004      	add	sp, #16
    8ecc:	4770      	bx	lr

00008ece <Adc_HwAcc_SetChannel>:

static inline void Adc_HwAcc_SetChannel(ADC_Type * const Base,
                                        const uint8 ChnIdx,
                                        const Adc_Ip_InputChannelType InputChannel,
                                        const boolean InterruptEnable)
{
    8ece:	b086      	sub	sp, #24
    8ed0:	9003      	str	r0, [sp, #12]
    8ed2:	9201      	str	r2, [sp, #4]
    8ed4:	461a      	mov	r2, r3
    8ed6:	460b      	mov	r3, r1
    8ed8:	f88d 300b 	strb.w	r3, [sp, #11]
    8edc:	4613      	mov	r3, r2
    8ede:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Configure channel by writing all SC1n register fields */
    uint32 Sc1Reg = SC1(Base, ChnIdx);
    8ee2:	f89d 200b 	ldrb.w	r2, [sp, #11]
    8ee6:	9b03      	ldr	r3, [sp, #12]
    8ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8eec:	9305      	str	r3, [sp, #20]
    Sc1Reg &= ~(ADC_SC1_ADCH_MASK | ADC_SC1_AIEN_MASK);
    8eee:	9b05      	ldr	r3, [sp, #20]
    8ef0:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
    8ef4:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_ADCH(InputChannel);
    8ef6:	9b01      	ldr	r3, [sp, #4]
    8ef8:	f003 031f 	and.w	r3, r3, #31
    8efc:	9a05      	ldr	r2, [sp, #20]
    8efe:	4313      	orrs	r3, r2
    8f00:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_AIEN(InterruptEnable ? 1u : 0u);
    8f02:	f89d 300a 	ldrb.w	r3, [sp, #10]
    8f06:	2b00      	cmp	r3, #0
    8f08:	d001      	beq.n	8f0e <Adc_HwAcc_SetChannel+0x40>
    8f0a:	2340      	movs	r3, #64	; 0x40
    8f0c:	e000      	b.n	8f10 <Adc_HwAcc_SetChannel+0x42>
    8f0e:	2300      	movs	r3, #0
    8f10:	9a05      	ldr	r2, [sp, #20]
    8f12:	4313      	orrs	r3, r2
    8f14:	9305      	str	r3, [sp, #20]
    SC1(Base, ChnIdx) = Sc1Reg;
    8f16:	f89d 200b 	ldrb.w	r2, [sp, #11]
    8f1a:	9b03      	ldr	r3, [sp, #12]
    8f1c:	9905      	ldr	r1, [sp, #20]
    8f1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    8f22:	bf00      	nop
    8f24:	b006      	add	sp, #24
    8f26:	4770      	bx	lr

00008f28 <Adc_HwAcc_SetUserGainAndOffset>:

static inline void Adc_HwAcc_SetUserGainAndOffset(ADC_Type * const Base,
                                                  const uint16 UsrGain,
                                                  const uint16 UsrOffset)
{
    8f28:	b082      	sub	sp, #8
    8f2a:	9001      	str	r0, [sp, #4]
    8f2c:	460b      	mov	r3, r1
    8f2e:	f8ad 3002 	strh.w	r3, [sp, #2]
    8f32:	4613      	mov	r3, r2
    8f34:	f8ad 3000 	strh.w	r3, [sp]
     * 2. RegVal <- Sum & 0xF800U
     * 3. if RegVal != 0x0000U then RegVal <- 0xFFFFU
     * 4. Base->G <- RegVal
     */

    Base->USR_OFS = ADC_USR_OFS_USR_OFS(UsrOffset);
    8f38:	f8bd 3000 	ldrh.w	r3, [sp]
    8f3c:	b2da      	uxtb	r2, r3
    8f3e:	9b01      	ldr	r3, [sp, #4]
    8f40:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    Base->UG = ADC_UG_UG(UsrGain);
    8f44:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8f48:	f3c3 0209 	ubfx	r2, r3, #0, #10
    8f4c:	9b01      	ldr	r3, [sp, #4]
    8f4e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
    8f52:	bf00      	nop
    8f54:	b002      	add	sp, #8
    8f56:	4770      	bx	lr

00008f58 <Adc_HwAcc_GetAIEN>:

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
static inline boolean Adc_HwAcc_GetAIEN(const uint32 Reg)
{
    8f58:	b082      	sub	sp, #8
    8f5a:	9001      	str	r0, [sp, #4]
    /* Retrive AIEN flag from given SC1 register */
    return (((Reg & ADC_SC1_AIEN_MASK) >> ADC_SC1_AIEN_SHIFT) != 0u) ? TRUE : FALSE;
    8f5c:	9b01      	ldr	r3, [sp, #4]
    8f5e:	099b      	lsrs	r3, r3, #6
    8f60:	f003 0301 	and.w	r3, r3, #1
    8f64:	2b00      	cmp	r3, #0
    8f66:	bf14      	ite	ne
    8f68:	2301      	movne	r3, #1
    8f6a:	2300      	moveq	r3, #0
    8f6c:	b2db      	uxtb	r3, r3
}
    8f6e:	4618      	mov	r0, r3
    8f70:	b002      	add	sp, #8
    8f72:	4770      	bx	lr

00008f74 <Adc_HwAcc_GetCOCO>:
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

static inline boolean Adc_HwAcc_GetCOCO(const uint32 Reg)
{
    8f74:	b082      	sub	sp, #8
    8f76:	9001      	str	r0, [sp, #4]
    /* Retrive COCO flag from given SC1 register */
    return (((Reg & ADC_SC1_COCO_MASK) >> ADC_SC1_COCO_SHIFT) != 0u) ? TRUE : FALSE;
    8f78:	9b01      	ldr	r3, [sp, #4]
    8f7a:	09db      	lsrs	r3, r3, #7
    8f7c:	f003 0301 	and.w	r3, r3, #1
    8f80:	2b00      	cmp	r3, #0
    8f82:	bf14      	ite	ne
    8f84:	2301      	movne	r3, #1
    8f86:	2300      	moveq	r3, #0
    8f88:	b2db      	uxtb	r3, r3
}
    8f8a:	4618      	mov	r0, r3
    8f8c:	b002      	add	sp, #8
    8f8e:	4770      	bx	lr

00008f90 <Adc_HwAcc_GetData>:

static inline uint16 Adc_HwAcc_GetData(const ADC_Type * const Base,
                                       const uint8 ChnIdx)
{
    8f90:	b084      	sub	sp, #16
    8f92:	9001      	str	r0, [sp, #4]
    8f94:	460b      	mov	r3, r1
    8f96:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Retrieve the conversion result of a given channel */
    uint16 Result = (uint16) R(Base, ChnIdx);
    8f9a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8f9e:	9b01      	ldr	r3, [sp, #4]
    8fa0:	3212      	adds	r2, #18
    8fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8fa6:	f8ad 300e 	strh.w	r3, [sp, #14]
    Result = (uint16) ((Result & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    8faa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
    8fb2:	f8ad 300e 	strh.w	r3, [sp, #14]
    return Result;
    8fb6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    8fba:	4618      	mov	r0, r3
    8fbc:	b004      	add	sp, #16
    8fbe:	4770      	bx	lr

00008fc0 <ADC_DoCalibration_SetParams>:
*
* END**************************************************************************/
static inline void ADC_DoCalibration_SetParams(ADC_Type * const Base,
                                               const Adc_Ip_ClockConfigType * const Config,
                                               const Adc_Ip_TrigType TriggerMode)
{
    8fc0:	b500      	push	{lr}
    8fc2:	b085      	sub	sp, #20
    8fc4:	9003      	str	r0, [sp, #12]
    8fc6:	9102      	str	r1, [sp, #8]
    8fc8:	9201      	str	r2, [sp, #4]
    /* Configure averaging */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    8fca:	f007 f99d 	bl	10308 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    8fce:	9b02      	ldr	r3, [sp, #8]
    8fd0:	7a59      	ldrb	r1, [r3, #9]
    8fd2:	9b02      	ldr	r3, [sp, #8]
    8fd4:	68db      	ldr	r3, [r3, #12]
    8fd6:	461a      	mov	r2, r3
    8fd8:	9803      	ldr	r0, [sp, #12]
    8fda:	f7ff ff0d 	bl	8df8 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    8fde:	f007 f9bf 	bl	10360 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Configure trigger mode */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24();
    8fe2:	f006 fff7 	bl	ffd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    8fe6:	9901      	ldr	r1, [sp, #4]
    8fe8:	9803      	ldr	r0, [sp, #12]
    8fea:	f7ff ff48 	bl	8e7e <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24();
    8fee:	f007 f81d 	bl	1002c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>

    /* Configure sample time */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15();
    8ff2:	f006 fd0d 	bl	fa10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    8ff6:	9b02      	ldr	r3, [sp, #8]
    8ff8:	7a1b      	ldrb	r3, [r3, #8]
    8ffa:	4619      	mov	r1, r3
    8ffc:	9803      	ldr	r0, [sp, #12]
    8ffe:	f7ff feda 	bl	8db6 <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15();
    9002:	f006 fd31 	bl	fa68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>

    /* Configure input clock */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13();
    9006:	f006 fc5f 	bl	f8c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    900a:	9b02      	ldr	r3, [sp, #8]
    900c:	6819      	ldr	r1, [r3, #0]
    900e:	9b02      	ldr	r3, [sp, #8]
    9010:	685b      	ldr	r3, [r3, #4]
    9012:	461a      	mov	r2, r3
    9014:	9803      	ldr	r0, [sp, #12]
    9016:	f7ff fe73 	bl	8d00 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13();
    901a:	f006 fc81 	bl	f920 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>
}
    901e:	bf00      	nop
    9020:	b005      	add	sp, #20
    9022:	f85d fb04 	ldr.w	pc, [sp], #4

00009026 <Adc_Ip_Init>:
*
* @implements     Adc_Ip_Init_Activity
* END**************************************************************************/
void Adc_Ip_Init(const uint32 Instance,
                 const Adc_Ip_ConfigType * const Config)
{
    9026:	b500      	push	{lr}
    9028:	b087      	sub	sp, #28
    902a:	9001      	str	r0, [sp, #4]
    902c:	9100      	str	r1, [sp, #0]
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
    DevAssert(Config->NumChannels <= ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    902e:	4a67      	ldr	r2, [pc, #412]	; (91cc <Adc_Ip_Init+0x1a6>)
    9030:	9b01      	ldr	r3, [sp, #4]
    9032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9036:	9302      	str	r3, [sp, #8]
    uint32 SC2Reg = 0u;
    9038:	2300      	movs	r3, #0
    903a:	9305      	str	r3, [sp, #20]
    uint32 SC2ClearMask = 0u;
    903c:	2300      	movs	r3, #0
    903e:	9304      	str	r3, [sp, #16]
    uint8 Index;

    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    9040:	9b00      	ldr	r3, [sp, #0]
    9042:	6819      	ldr	r1, [r3, #0]
    9044:	9b00      	ldr	r3, [sp, #0]
    9046:	689b      	ldr	r3, [r3, #8]
    9048:	461a      	mov	r2, r3
    904a:	9802      	ldr	r0, [sp, #8]
    904c:	f7ff fe58 	bl	8d00 <Adc_HwAcc_SetClock>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    9050:	9b00      	ldr	r3, [sp, #0]
    9052:	7b1b      	ldrb	r3, [r3, #12]
    9054:	4619      	mov	r1, r3
    9056:	9802      	ldr	r0, [sp, #8]
    9058:	f7ff fead 	bl	8db6 <Adc_HwAcc_SetSampleTime>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    905c:	9b00      	ldr	r3, [sp, #0]
    905e:	7b59      	ldrb	r1, [r3, #13]
    9060:	9b00      	ldr	r3, [sp, #0]
    9062:	691b      	ldr	r3, [r3, #16]
    9064:	461a      	mov	r2, r3
    9066:	9802      	ldr	r0, [sp, #8]
    9068:	f7ff fec6 	bl	8df8 <Adc_HwAcc_SetAveraging>

    Adc_Ip_SetResolution(Instance, Config->Resolution);
    906c:	9b00      	ldr	r3, [sp, #0]
    906e:	695b      	ldr	r3, [r3, #20]
    9070:	4619      	mov	r1, r3
    9072:	9801      	ldr	r0, [sp, #4]
    9074:	f000 f9ea 	bl	944c <Adc_Ip_SetResolution>
        ADC_SetSupplyMonitoringEnable(Config->SupplyMonitoringEnable);
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    /* Configure trigger mode */
    SC2ClearMask |= ADC_SC2_ADTRG_MASK;
    9078:	9b04      	ldr	r3, [sp, #16]
    907a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    907e:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ADTRG(Config->TriggerMode);
    9080:	9b00      	ldr	r3, [sp, #0]
    9082:	699b      	ldr	r3, [r3, #24]
    9084:	019b      	lsls	r3, r3, #6
    9086:	f003 0340 	and.w	r3, r3, #64	; 0x40
    908a:	9a05      	ldr	r2, [sp, #20]
    908c:	4313      	orrs	r3, r2
    908e:	9305      	str	r3, [sp, #20]

    /* Configure DMA enable */
    if (Config->DmaEnable)
    9090:	9b00      	ldr	r3, [sp, #0]
    9092:	7f1b      	ldrb	r3, [r3, #28]
    9094:	2b00      	cmp	r3, #0
    9096:	d004      	beq.n	90a2 <Adc_Ip_Init+0x7c>
    {
        SC2Reg |= ADC_SC2_DMAEN_MASK;
    9098:	9b05      	ldr	r3, [sp, #20]
    909a:	f043 0304 	orr.w	r3, r3, #4
    909e:	9305      	str	r3, [sp, #20]
    90a0:	e003      	b.n	90aa <Adc_Ip_Init+0x84>
    }
    else
    {
        SC2ClearMask |= ADC_SC2_DMAEN_MASK;
    90a2:	9b04      	ldr	r3, [sp, #16]
    90a4:	f043 0304 	orr.w	r3, r3, #4
    90a8:	9304      	str	r3, [sp, #16]
    }

    /* Configure voltage reference selector */
    SC2ClearMask |= ADC_SC2_REFSEL_MASK;
    90aa:	9b04      	ldr	r3, [sp, #16]
    90ac:	f043 0303 	orr.w	r3, r3, #3
    90b0:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_REFSEL(Config->VoltageRef);
    90b2:	9b00      	ldr	r3, [sp, #0]
    90b4:	6a1b      	ldr	r3, [r3, #32]
    90b6:	f003 0303 	and.w	r3, r3, #3
    90ba:	9a05      	ldr	r2, [sp, #20]
    90bc:	4313      	orrs	r3, r2
    90be:	9305      	str	r3, [sp, #20]

    /* Configure compare enables and values */
    SC2ClearMask |= ADC_SC2_ACFE_MASK | ADC_SC2_ACFGT_MASK | ADC_SC2_ACREN_MASK;
    90c0:	9b04      	ldr	r3, [sp, #16]
    90c2:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    90c6:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ACFE(Config->CompareEnable ? 1u : 0u);
    90c8:	9b00      	ldr	r3, [sp, #0]
    90ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    90ce:	2b00      	cmp	r3, #0
    90d0:	d001      	beq.n	90d6 <Adc_Ip_Init+0xb0>
    90d2:	2320      	movs	r3, #32
    90d4:	e000      	b.n	90d8 <Adc_Ip_Init+0xb2>
    90d6:	2300      	movs	r3, #0
    90d8:	9a05      	ldr	r2, [sp, #20]
    90da:	4313      	orrs	r3, r2
    90dc:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACFGT(Config->CompareGreaterThanEnable ? 1u : 0u);
    90de:	9b00      	ldr	r3, [sp, #0]
    90e0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    90e4:	2b00      	cmp	r3, #0
    90e6:	d001      	beq.n	90ec <Adc_Ip_Init+0xc6>
    90e8:	2310      	movs	r3, #16
    90ea:	e000      	b.n	90ee <Adc_Ip_Init+0xc8>
    90ec:	2300      	movs	r3, #0
    90ee:	9a05      	ldr	r2, [sp, #20]
    90f0:	4313      	orrs	r3, r2
    90f2:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACREN(Config->CompareRangeFuncEnable ? 1u : 0u);
    90f4:	9b00      	ldr	r3, [sp, #0]
    90f6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    90fa:	2b00      	cmp	r3, #0
    90fc:	d001      	beq.n	9102 <Adc_Ip_Init+0xdc>
    90fe:	2308      	movs	r3, #8
    9100:	e000      	b.n	9104 <Adc_Ip_Init+0xde>
    9102:	2300      	movs	r3, #0
    9104:	9a05      	ldr	r2, [sp, #20]
    9106:	4313      	orrs	r3, r2
    9108:	9305      	str	r3, [sp, #20]
    Base->CV[0u] = ADC_CV_CV(Config->CompVal1);
    910a:	9b00      	ldr	r3, [sp, #0]
    910c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    910e:	461a      	mov	r2, r3
    9110:	9b02      	ldr	r3, [sp, #8]
    9112:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Base->CV[1u] = ADC_CV_CV(Config->CompVal2);
    9116:	9b00      	ldr	r3, [sp, #0]
    9118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    911a:	461a      	mov	r2, r3
    911c:	9b02      	ldr	r3, [sp, #8]
    911e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    Adc_HwAcc_SetSC2Reg(Base, SC2ClearMask, SC2Reg);
    9122:	9a05      	ldr	r2, [sp, #20]
    9124:	9904      	ldr	r1, [sp, #16]
    9126:	9802      	ldr	r0, [sp, #8]
    9128:	f7ff fdd2 	bl	8cd0 <Adc_HwAcc_SetSC2Reg>

    Adc_HwAcc_SetUserGainAndOffset(Base, Config->UsrGain, Config->UsrOffset);
    912c:	9b00      	ldr	r3, [sp, #0]
    912e:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
    9130:	9b00      	ldr	r3, [sp, #0]
    9132:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    9134:	461a      	mov	r2, r3
    9136:	9802      	ldr	r0, [sp, #8]
    9138:	f7ff fef6 	bl	8f28 <Adc_HwAcc_SetUserGainAndOffset>

    Adc_Ip_SetContinuousMode(Instance, Config->ContinuousConvEnable);
    913c:	9b00      	ldr	r3, [sp, #0]
    913e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9142:	4619      	mov	r1, r3
    9144:	9801      	ldr	r0, [sp, #4]
    9146:	f000 f955 	bl	93f4 <Adc_Ip_SetContinuousMode>

    if (Config->ChannelConfigs != NULL_PTR)
    914a:	9b00      	ldr	r3, [sp, #0]
    914c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    914e:	2b00      	cmp	r3, #0
    9150:	d01c      	beq.n	918c <Adc_Ip_Init+0x166>
    {
        for (Index = 0u; Index < Config->NumChannels; Index++)
    9152:	2300      	movs	r3, #0
    9154:	f88d 300f 	strb.w	r3, [sp, #15]
    9158:	e011      	b.n	917e <Adc_Ip_Init+0x158>
        {
            Adc_Ip_ConfigChannel(Instance, &(Config->ChannelConfigs[Index]));
    915a:	9b00      	ldr	r3, [sp, #0]
    915c:	6b59      	ldr	r1, [r3, #52]	; 0x34
    915e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9162:	4613      	mov	r3, r2
    9164:	005b      	lsls	r3, r3, #1
    9166:	4413      	add	r3, r2
    9168:	009b      	lsls	r3, r3, #2
    916a:	440b      	add	r3, r1
    916c:	4619      	mov	r1, r3
    916e:	9801      	ldr	r0, [sp, #4]
    9170:	f000 f9c2 	bl	94f8 <Adc_Ip_ConfigChannel>
        for (Index = 0u; Index < Config->NumChannels; Index++)
    9174:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9178:	3301      	adds	r3, #1
    917a:	f88d 300f 	strb.w	r3, [sp, #15]
    917e:	9b00      	ldr	r3, [sp, #0]
    9180:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    9184:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9188:	429a      	cmp	r2, r3
    918a:	d3e6      	bcc.n	915a <Adc_Ip_Init+0x134>
        }
    }

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_Ip_axState[Instance].ConversionCompleteNotification = Config->ConversionCompleteNotification;
    918c:	9b00      	ldr	r3, [sp, #0]
    918e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    9190:	490f      	ldr	r1, [pc, #60]	; (91d0 <Adc_Ip_Init+0x1aa>)
    9192:	9b01      	ldr	r3, [sp, #4]
    9194:	204c      	movs	r0, #76	; 0x4c
    9196:	fb00 f303 	mul.w	r3, r0, r3
    919a:	440b      	add	r3, r1
    919c:	3308      	adds	r3, #8
    919e:	601a      	str	r2, [r3, #0]
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    Adc_Ip_axState[Instance].CalibrationClockDivide = Config->CalibrationClockDivide;
    91a0:	9b00      	ldr	r3, [sp, #0]
    91a2:	685a      	ldr	r2, [r3, #4]
    91a4:	490a      	ldr	r1, [pc, #40]	; (91d0 <Adc_Ip_Init+0x1aa>)
    91a6:	9b01      	ldr	r3, [sp, #4]
    91a8:	204c      	movs	r0, #76	; 0x4c
    91aa:	fb00 f303 	mul.w	r3, r0, r3
    91ae:	440b      	add	r3, r1
    91b0:	3304      	adds	r3, #4
    91b2:	601a      	str	r2, [r3, #0]
    Adc_Ip_axState[Instance].Init = TRUE;
    91b4:	4a06      	ldr	r2, [pc, #24]	; (91d0 <Adc_Ip_Init+0x1aa>)
    91b6:	9b01      	ldr	r3, [sp, #4]
    91b8:	214c      	movs	r1, #76	; 0x4c
    91ba:	fb01 f303 	mul.w	r3, r1, r3
    91be:	4413      	add	r3, r2
    91c0:	2201      	movs	r2, #1
    91c2:	701a      	strb	r2, [r3, #0]
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    Adc_Ip_axState[Instance].PretriggerSel = Config->PretriggerSel;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
}
    91c4:	bf00      	nop
    91c6:	b007      	add	sp, #28
    91c8:	f85d fb04 	ldr.w	pc, [sp], #4
    91cc:	00016484 	.word	0x00016484
    91d0:	1fff8d68 	.word	0x1fff8d68

000091d4 <Adc_Ip_DeInit>:
* Description   : This function resets the ADC internal registers to default values.
*
* @implements     Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Adc_Ip_DeInit(const uint32 Instance)
{
    91d4:	b500      	push	{lr}
    91d6:	b0c3      	sub	sp, #268	; 0x10c
    91d8:	ab42      	add	r3, sp, #264	; 0x108
    91da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    91de:	6018      	str	r0, [r3, #0]

    Adc_Ip_ConfigType DefaultConfig;
    Adc_Ip_ChanConfigType ChannelConfigs[ADC_MAX_CHAN_COUNT];
    uint8 Index;

    DefaultConfig.ClockDivide = ADC_IP_CLK_FULL_BUS;
    91e0:	2300      	movs	r3, #0
    91e2:	9332      	str	r3, [sp, #200]	; 0xc8
    DefaultConfig.CalibrationClockDivide = ADC_IP_CLK_EIGHTH_BUS;
    91e4:	2303      	movs	r3, #3
    91e6:	9333      	str	r3, [sp, #204]	; 0xcc
    DefaultConfig.InputClock = ADC_IP_CLK_ALT_1;
    91e8:	2300      	movs	r3, #0
    91ea:	9334      	str	r3, [sp, #208]	; 0xd0
    DefaultConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    91ec:	230c      	movs	r3, #12
    91ee:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
    DefaultConfig.AvgEn = FALSE;
    91f2:	2300      	movs	r3, #0
    91f4:	f88d 30d5 	strb.w	r3, [sp, #213]	; 0xd5
    DefaultConfig.AvgSel = ADC_IP_AVG_4_CONV;
    91f8:	2300      	movs	r3, #0
    91fa:	9336      	str	r3, [sp, #216]	; 0xd8
    DefaultConfig.Resolution = ADC_IP_RESOLUTION_8BIT;
    91fc:	2300      	movs	r3, #0
    91fe:	9337      	str	r3, [sp, #220]	; 0xdc
    DefaultConfig.TriggerMode = ADC_IP_TRIGGER_SOFTWARE;
    9200:	2300      	movs	r3, #0
    9202:	9338      	str	r3, [sp, #224]	; 0xe0
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    DefaultConfig.PretriggerSel = ADC_IP_PRETRIGGER_SEL_PDB;
    DefaultConfig.TriggerSel = ADC_IP_TRIGGER_SEL_PDB;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
    DefaultConfig.DmaEnable = FALSE;
    9204:	2300      	movs	r3, #0
    9206:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
    DefaultConfig.VoltageRef = ADC_IP_VOLTAGEREF_VREF;
    920a:	2300      	movs	r3, #0
    920c:	933a      	str	r3, [sp, #232]	; 0xe8
    DefaultConfig.ContinuousConvEnable = FALSE;
    920e:	2300      	movs	r3, #0
    9210:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DefaultConfig.SupplyMonitoringEnable = FALSE;
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    DefaultConfig.CompareEnable = FALSE;
    9214:	2300      	movs	r3, #0
    9216:	f88d 30ed 	strb.w	r3, [sp, #237]	; 0xed
    DefaultConfig.CompareGreaterThanEnable = FALSE;
    921a:	2300      	movs	r3, #0
    921c:	f88d 30ee 	strb.w	r3, [sp, #238]	; 0xee
    DefaultConfig.CompareRangeFuncEnable = FALSE;
    9220:	2300      	movs	r3, #0
    9222:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
    DefaultConfig.CompVal1 = 0u;
    9226:	2300      	movs	r3, #0
    9228:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
    DefaultConfig.CompVal2 = 0u;
    922c:	2300      	movs	r3, #0
    922e:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
    DefaultConfig.UsrGain = ADC_IP_DEFAULT_USER_GAIN;
    9232:	2304      	movs	r3, #4
    9234:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
    DefaultConfig.UsrOffset = 0u;
    9238:	2300      	movs	r3, #0
    923a:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6
    DefaultConfig.NumChannels = ADC_MAX_CHAN_COUNT;
    923e:	2310      	movs	r3, #16
    9240:	f88d 30f8 	strb.w	r3, [sp, #248]	; 0xf8
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    9244:	2300      	movs	r3, #0
    9246:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    924a:	e02b      	b.n	92a4 <Adc_Ip_DeInit+0xd0>
    {
        ChannelConfigs[Index].ChnIdx = Index;
    924c:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    9250:	ab42      	add	r3, sp, #264	; 0x108
    9252:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    9256:	4613      	mov	r3, r2
    9258:	005b      	lsls	r3, r3, #1
    925a:	4413      	add	r3, r2
    925c:	009b      	lsls	r3, r3, #2
    925e:	440b      	add	r3, r1
    9260:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    9264:	701a      	strb	r2, [r3, #0]
        ChannelConfigs[Index].Channel = ADC_IP_INPUTCHAN_DISABLED;
    9266:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    926a:	ab42      	add	r3, sp, #264	; 0x108
    926c:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    9270:	4613      	mov	r3, r2
    9272:	005b      	lsls	r3, r3, #1
    9274:	4413      	add	r3, r2
    9276:	009b      	lsls	r3, r3, #2
    9278:	440b      	add	r3, r1
    927a:	3304      	adds	r3, #4
    927c:	221f      	movs	r2, #31
    927e:	601a      	str	r2, [r3, #0]
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
        ChannelConfigs[Index].InterruptEnable = FALSE;
    9280:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    9284:	ab42      	add	r3, sp, #264	; 0x108
    9286:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    928a:	4613      	mov	r3, r2
    928c:	005b      	lsls	r3, r3, #1
    928e:	4413      	add	r3, r2
    9290:	009b      	lsls	r3, r3, #2
    9292:	440b      	add	r3, r1
    9294:	3308      	adds	r3, #8
    9296:	2200      	movs	r2, #0
    9298:	701a      	strb	r2, [r3, #0]
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    929a:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    929e:	3301      	adds	r3, #1
    92a0:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    92a4:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    92a8:	2b0f      	cmp	r3, #15
    92aa:	d9cf      	bls.n	924c <Adc_Ip_DeInit+0x78>
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    }
    DefaultConfig.ChannelConfigs = ChannelConfigs;
    92ac:	ab02      	add	r3, sp, #8
    92ae:	933f      	str	r3, [sp, #252]	; 0xfc
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    DefaultConfig.ConversionCompleteNotification = NULL_PTR;
    92b0:	2300      	movs	r3, #0
    92b2:	9340      	str	r3, [sp, #256]	; 0x100
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

    Adc_Ip_Init(Instance, &DefaultConfig);
    92b4:	aa32      	add	r2, sp, #200	; 0xc8
    92b6:	ab42      	add	r3, sp, #264	; 0x108
    92b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    92bc:	4611      	mov	r1, r2
    92be:	6818      	ldr	r0, [r3, #0]
    92c0:	f7ff feb1 	bl	9026 <Adc_Ip_Init>
    {
        ADC_ResetSupplyMonitoringChannel();
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    Adc_Ip_axState[Instance].Init = FALSE;
    92c4:	4a07      	ldr	r2, [pc, #28]	; (92e4 <Adc_Ip_DeInit+0x110>)
    92c6:	ab42      	add	r3, sp, #264	; 0x108
    92c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    92cc:	681b      	ldr	r3, [r3, #0]
    92ce:	214c      	movs	r1, #76	; 0x4c
    92d0:	fb01 f303 	mul.w	r3, r1, r3
    92d4:	4413      	add	r3, r2
    92d6:	2200      	movs	r2, #0
    92d8:	701a      	strb	r2, [r3, #0]
}
    92da:	bf00      	nop
    92dc:	b043      	add	sp, #268	; 0x10c
    92de:	f85d fb04 	ldr.w	pc, [sp], #4
    92e2:	bf00      	nop
    92e4:	1fff8d68 	.word	0x1fff8d68

000092e8 <Adc_Ip_SetAveraging>:
* @implements     Adc_Ip_SetAveraging_Activity
* END**************************************************************************/
void Adc_Ip_SetAveraging(const uint32 Instance,
                         const boolean AvgEn,
                         const Adc_Ip_AvgSelectType AvgSel)
{
    92e8:	b500      	push	{lr}
    92ea:	b087      	sub	sp, #28
    92ec:	9003      	str	r0, [sp, #12]
    92ee:	460b      	mov	r3, r1
    92f0:	9201      	str	r2, [sp, #4]
    92f2:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    92f6:	4a0a      	ldr	r2, [pc, #40]	; (9320 <Adc_Ip_SetAveraging+0x38>)
    92f8:	9b03      	ldr	r3, [sp, #12]
    92fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92fe:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27();
    9300:	f006 ff5e 	bl	101c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>
    Adc_HwAcc_SetAveraging(Base, AvgEn, AvgSel);
    9304:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9308:	9a01      	ldr	r2, [sp, #4]
    930a:	4619      	mov	r1, r3
    930c:	9805      	ldr	r0, [sp, #20]
    930e:	f7ff fd73 	bl	8df8 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27();
    9312:	f006 ff81 	bl	10218 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>
}
    9316:	bf00      	nop
    9318:	b007      	add	sp, #28
    931a:	f85d fb04 	ldr.w	pc, [sp], #4
    931e:	bf00      	nop
    9320:	00016484 	.word	0x00016484

00009324 <Adc_Ip_SetSampleTime>:
*
* @implements     Adc_Ip_SetSampleTime_Activity
* END**************************************************************************/
void Adc_Ip_SetSampleTime(const uint32 Instance,
                          const uint8 SampleTime)
{
    9324:	b500      	push	{lr}
    9326:	b085      	sub	sp, #20
    9328:	9001      	str	r0, [sp, #4]
    932a:	460b      	mov	r3, r1
    932c:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9330:	4a09      	ldr	r2, [pc, #36]	; (9358 <Adc_Ip_SetSampleTime+0x34>)
    9332:	9b01      	ldr	r3, [sp, #4]
    9334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9338:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16();
    933a:	f006 fbbb 	bl	fab4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>
    Adc_HwAcc_SetSampleTime(Base, SampleTime);
    933e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9342:	4619      	mov	r1, r3
    9344:	9803      	ldr	r0, [sp, #12]
    9346:	f7ff fd36 	bl	8db6 <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16();
    934a:	f006 fbdf 	bl	fb0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>
}
    934e:	bf00      	nop
    9350:	b005      	add	sp, #20
    9352:	f85d fb04 	ldr.w	pc, [sp], #4
    9356:	bf00      	nop
    9358:	00016484 	.word	0x00016484

0000935c <Adc_Ip_EnableDma>:
* Description   : This function enables DMA.
*
* @implements     Adc_Ip_EnableDma_Activity
* END**************************************************************************/
void Adc_Ip_EnableDma(const uint32 Instance)
{
    935c:	b500      	push	{lr}
    935e:	b085      	sub	sp, #20
    9360:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9362:	4a0a      	ldr	r2, [pc, #40]	; (938c <Adc_Ip_EnableDma+0x30>)
    9364:	9b01      	ldr	r3, [sp, #4]
    9366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    936a:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26();
    936c:	f006 fed6 	bl	1011c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>
    Base->SC2 |= ADC_SC2_DMAEN_MASK;
    9370:	9b03      	ldr	r3, [sp, #12]
    9372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    9376:	f043 0204 	orr.w	r2, r3, #4
    937a:	9b03      	ldr	r3, [sp, #12]
    937c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26();
    9380:	f006 fef8 	bl	10174 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>
}
    9384:	bf00      	nop
    9386:	b005      	add	sp, #20
    9388:	f85d fb04 	ldr.w	pc, [sp], #4
    938c:	00016484 	.word	0x00016484

00009390 <Adc_Ip_DisableDma>:
* Description   : This function disables DMA.
*
* @implements     Adc_Ip_DisableDma_Activity
* END**************************************************************************/
void Adc_Ip_DisableDma(const uint32 Instance)
{
    9390:	b500      	push	{lr}
    9392:	b085      	sub	sp, #20
    9394:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9396:	4a0a      	ldr	r2, [pc, #40]	; (93c0 <Adc_Ip_DisableDma+0x30>)
    9398:	9b01      	ldr	r3, [sp, #4]
    939a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    939e:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22();
    93a0:	f006 fd74 	bl	fe8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>
    Base->SC2 &= ~(ADC_SC2_DMAEN_MASK);
    93a4:	9b03      	ldr	r3, [sp, #12]
    93a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    93aa:	f023 0204 	bic.w	r2, r3, #4
    93ae:	9b03      	ldr	r3, [sp, #12]
    93b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22();
    93b4:	f006 fd96 	bl	fee4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>
}
    93b8:	bf00      	nop
    93ba:	b005      	add	sp, #20
    93bc:	f85d fb04 	ldr.w	pc, [sp], #4
    93c0:	00016484 	.word	0x00016484

000093c4 <Adc_Ip_SetTriggerMode>:
*
* @implements     Adc_Ip_SetTriggerMode_Activity
* END**************************************************************************/
void Adc_Ip_SetTriggerMode(const uint32 Instance,
                           const Adc_Ip_TrigType TriggerMode)
{
    93c4:	b500      	push	{lr}
    93c6:	b085      	sub	sp, #20
    93c8:	9001      	str	r0, [sp, #4]
    93ca:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    93cc:	4a08      	ldr	r2, [pc, #32]	; (93f0 <Adc_Ip_SetTriggerMode+0x2c>)
    93ce:	9b01      	ldr	r3, [sp, #4]
    93d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93d4:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23();
    93d6:	f006 fdab 	bl	ff30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    93da:	9900      	ldr	r1, [sp, #0]
    93dc:	9803      	ldr	r0, [sp, #12]
    93de:	f7ff fd4e 	bl	8e7e <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23();
    93e2:	f006 fdd1 	bl	ff88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>
}
    93e6:	bf00      	nop
    93e8:	b005      	add	sp, #20
    93ea:	f85d fb04 	ldr.w	pc, [sp], #4
    93ee:	bf00      	nop
    93f0:	00016484 	.word	0x00016484

000093f4 <Adc_Ip_SetContinuousMode>:
*
* @implements     Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Adc_Ip_SetContinuousMode(const uint32 Instance,
                              const boolean ContinuousModeEnable)
{
    93f4:	b500      	push	{lr}
    93f6:	b085      	sub	sp, #20
    93f8:	9001      	str	r0, [sp, #4]
    93fa:	460b      	mov	r3, r1
    93fc:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9400:	4a11      	ldr	r2, [pc, #68]	; (9448 <Adc_Ip_SetContinuousMode+0x54>)
    9402:	9b01      	ldr	r3, [sp, #4]
    9404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9408:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30();
    940a:	f006 ffcf 	bl	103ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>
    uint32 Sc3Reg = Base->SC3;
    940e:	9b03      	ldr	r3, [sp, #12]
    9410:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    9414:	9302      	str	r3, [sp, #8]
    Sc3Reg &= ~(ADC_SC3_ADCO_MASK);
    9416:	9b02      	ldr	r3, [sp, #8]
    9418:	f023 0308 	bic.w	r3, r3, #8
    941c:	9302      	str	r3, [sp, #8]
    Sc3Reg |= ADC_SC3_ADCO(ContinuousModeEnable ? 1u : 0u);
    941e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9422:	2b00      	cmp	r3, #0
    9424:	d001      	beq.n	942a <Adc_Ip_SetContinuousMode+0x36>
    9426:	2308      	movs	r3, #8
    9428:	e000      	b.n	942c <Adc_Ip_SetContinuousMode+0x38>
    942a:	2300      	movs	r3, #0
    942c:	9a02      	ldr	r2, [sp, #8]
    942e:	4313      	orrs	r3, r2
    9430:	9302      	str	r3, [sp, #8]
    Base->SC3 = Sc3Reg;
    9432:	9b03      	ldr	r3, [sp, #12]
    9434:	9a02      	ldr	r2, [sp, #8]
    9436:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30();
    943a:	f006 ffe3 	bl	10404 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>
}
    943e:	bf00      	nop
    9440:	b005      	add	sp, #20
    9442:	f85d fb04 	ldr.w	pc, [sp], #4
    9446:	bf00      	nop
    9448:	00016484 	.word	0x00016484

0000944c <Adc_Ip_SetResolution>:
*
* @implements     Adc_Ip_SetResolution_Activity
* END**************************************************************************/
void Adc_Ip_SetResolution(const uint32 Instance,
                          const Adc_Ip_ResolutionType Resolution)
{
    944c:	b500      	push	{lr}
    944e:	b085      	sub	sp, #20
    9450:	9001      	str	r0, [sp, #4]
    9452:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9454:	4a0e      	ldr	r2, [pc, #56]	; (9490 <Adc_Ip_SetResolution+0x44>)
    9456:	9b01      	ldr	r3, [sp, #4]
    9458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    945c:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10();
    945e:	f005 fff5 	bl	f44c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>
    uint32 Cfg1Reg = Base->CFG1;
    9462:	9b03      	ldr	r3, [sp, #12]
    9464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9466:	9302      	str	r3, [sp, #8]
    Cfg1Reg &= ~(ADC_CFG1_MODE_MASK);
    9468:	9b02      	ldr	r3, [sp, #8]
    946a:	f023 030c 	bic.w	r3, r3, #12
    946e:	9302      	str	r3, [sp, #8]
    Cfg1Reg |= ADC_CFG1_MODE(Resolution);
    9470:	9b00      	ldr	r3, [sp, #0]
    9472:	009b      	lsls	r3, r3, #2
    9474:	f003 030c 	and.w	r3, r3, #12
    9478:	9a02      	ldr	r2, [sp, #8]
    947a:	4313      	orrs	r3, r2
    947c:	9302      	str	r3, [sp, #8]
    Base->CFG1 = Cfg1Reg;
    947e:	9b03      	ldr	r3, [sp, #12]
    9480:	9a02      	ldr	r2, [sp, #8]
    9482:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10();
    9484:	f006 f80e 	bl	f4a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>
}
    9488:	bf00      	nop
    948a:	b005      	add	sp, #20
    948c:	f85d fb04 	ldr.w	pc, [sp], #4
    9490:	00016484 	.word	0x00016484

00009494 <Adc_Ip_SetClockMode>:
*
* @implements     Adc_Ip_SetClockMode_Activity
* END**************************************************************************/
void Adc_Ip_SetClockMode(const uint32 Instance,
                         const Adc_Ip_ClockConfigType * const Config)
{
    9494:	b500      	push	{lr}
    9496:	b085      	sub	sp, #20
    9498:	9001      	str	r0, [sp, #4]
    949a:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    949c:	4a15      	ldr	r2, [pc, #84]	; (94f4 <Adc_Ip_SetClockMode+0x60>)
    949e:	9b01      	ldr	r3, [sp, #4]
    94a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94a4:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11();
    94a6:	f006 f96b 	bl	f780 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    94aa:	9b00      	ldr	r3, [sp, #0]
    94ac:	6819      	ldr	r1, [r3, #0]
    94ae:	9b00      	ldr	r3, [sp, #0]
    94b0:	685b      	ldr	r3, [r3, #4]
    94b2:	461a      	mov	r2, r3
    94b4:	9803      	ldr	r0, [sp, #12]
    94b6:	f7ff fc23 	bl	8d00 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11();
    94ba:	f006 f98d 	bl	f7d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14();
    94be:	f006 fa55 	bl	f96c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    94c2:	9b00      	ldr	r3, [sp, #0]
    94c4:	7a1b      	ldrb	r3, [r3, #8]
    94c6:	4619      	mov	r1, r3
    94c8:	9803      	ldr	r0, [sp, #12]
    94ca:	f7ff fc74 	bl	8db6 <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14();
    94ce:	f006 fa79 	bl	f9c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28();
    94d2:	f006 fec7 	bl	10264 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    94d6:	9b00      	ldr	r3, [sp, #0]
    94d8:	7a59      	ldrb	r1, [r3, #9]
    94da:	9b00      	ldr	r3, [sp, #0]
    94dc:	68db      	ldr	r3, [r3, #12]
    94de:	461a      	mov	r2, r3
    94e0:	9803      	ldr	r0, [sp, #12]
    94e2:	f7ff fc89 	bl	8df8 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28();
    94e6:	f006 fee9 	bl	102bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>
}
    94ea:	bf00      	nop
    94ec:	b005      	add	sp, #20
    94ee:	f85d fb04 	ldr.w	pc, [sp], #4
    94f2:	bf00      	nop
    94f4:	00016484 	.word	0x00016484

000094f8 <Adc_Ip_ConfigChannel>:
*
* @implements     Adc_Ip_ConfigChannel_Activity
* END**************************************************************************/
void Adc_Ip_ConfigChannel(const uint32 Instance,
                          const Adc_Ip_ChanConfigType * const ChanConfig)
{
    94f8:	b510      	push	{r4, lr}
    94fa:	b084      	sub	sp, #16
    94fc:	9001      	str	r0, [sp, #4]
    94fe:	9100      	str	r1, [sp, #0]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)ChanConfig->Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9500:	4a13      	ldr	r2, [pc, #76]	; (9550 <Adc_Ip_ConfigChannel+0x58>)
    9502:	9b01      	ldr	r3, [sp, #4]
    9504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9508:	9303      	str	r3, [sp, #12]
        InputChanDemapped = ADC_IP_INPUTCHAN_INT0;
    }
    else
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    {
        InputChanDemapped = ChanConfig->Channel;
    950a:	9b00      	ldr	r3, [sp, #0]
    950c:	685b      	ldr	r3, [r3, #4]
    950e:	9302      	str	r3, [sp, #8]
    }

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21();
    9510:	f006 fc6a 	bl	fde8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, ChanConfig->InterruptEnable);
    9514:	9b00      	ldr	r3, [sp, #0]
    9516:	7819      	ldrb	r1, [r3, #0]
    9518:	9b00      	ldr	r3, [sp, #0]
    951a:	7a1b      	ldrb	r3, [r3, #8]
    951c:	9a02      	ldr	r2, [sp, #8]
    951e:	9803      	ldr	r0, [sp, #12]
    9520:	f7ff fcd5 	bl	8ece <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, FALSE);
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21();
    9524:	f006 fc8c 	bl	fe40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>

    /* Also update in state structure */
    Adc_Ip_axState[Instance].ChannelConfig[ChanConfig->ChnIdx] = ChanConfig->Channel;
    9528:	9b00      	ldr	r3, [sp, #0]
    952a:	781b      	ldrb	r3, [r3, #0]
    952c:	461c      	mov	r4, r3
    952e:	9b00      	ldr	r3, [sp, #0]
    9530:	6859      	ldr	r1, [r3, #4]
    9532:	4808      	ldr	r0, [pc, #32]	; (9554 <Adc_Ip_ConfigChannel+0x5c>)
    9534:	9a01      	ldr	r2, [sp, #4]
    9536:	4613      	mov	r3, r2
    9538:	00db      	lsls	r3, r3, #3
    953a:	4413      	add	r3, r2
    953c:	005b      	lsls	r3, r3, #1
    953e:	4413      	add	r3, r2
    9540:	4423      	add	r3, r4
    9542:	3302      	adds	r3, #2
    9544:	009b      	lsls	r3, r3, #2
    9546:	4403      	add	r3, r0
    9548:	6059      	str	r1, [r3, #4]
}
    954a:	bf00      	nop
    954c:	b004      	add	sp, #16
    954e:	bd10      	pop	{r4, pc}
    9550:	00016484 	.word	0x00016484
    9554:	1fff8d68 	.word	0x1fff8d68

00009558 <Adc_Ip_SetDisabledChannel>:
* @implements     Adc_Ip_SetDisabledChannel_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_SetDisabledChannel(const uint32 Instance,
                                            const uint8 ControlChanIdx,
                                            const boolean WithTimeout)
{
    9558:	b500      	push	{lr}
    955a:	b089      	sub	sp, #36	; 0x24
    955c:	9001      	str	r0, [sp, #4]
    955e:	460b      	mov	r3, r1
    9560:	f88d 3003 	strb.w	r3, [sp, #3]
    9564:	4613      	mov	r3, r2
    9566:	f88d 3002 	strb.w	r3, [sp, #2]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    956a:	4a24      	ldr	r2, [pc, #144]	; (95fc <Adc_Ip_SetDisabledChannel+0xa4>)
    956c:	9b01      	ldr	r3, [sp, #4]
    956e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9572:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    9574:	2300      	movs	r3, #0
    9576:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    9578:	2100      	movs	r1, #0
    957a:	4821      	ldr	r0, [pc, #132]	; (9600 <Adc_Ip_SetDisabledChannel+0xa8>)
    957c:	f7f9 f954 	bl	2828 <OsIf_MicrosToTicks>
    9580:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    9582:	2000      	movs	r0, #0
    9584:	f7f9 f904 	bl	2790 <OsIf_GetCounter>
    9588:	4603      	mov	r3, r0
    958a:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    958c:	2300      	movs	r3, #0
    958e:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17();
    9590:	f006 fae2 	bl	fb58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>
    /* Set input channel select to disabled */
    SC1(Base, ControlChanIdx) |= ADC_SC1_ADCH_MASK;
    9594:	f89d 2003 	ldrb.w	r2, [sp, #3]
    9598:	9b05      	ldr	r3, [sp, #20]
    959a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    959e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    95a2:	f043 011f 	orr.w	r1, r3, #31
    95a6:	9b05      	ldr	r3, [sp, #20]
    95a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17();
    95ac:	f006 fb00 	bl	fbb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>

    if (WithTimeout == TRUE)
    95b0:	f89d 3002 	ldrb.w	r3, [sp, #2]
    95b4:	2b00      	cmp	r3, #0
    95b6:	d01c      	beq.n	95f2 <Adc_Ip_SetDisabledChannel+0x9a>
    {
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    95b8:	e008      	b.n	95cc <Adc_Ip_SetDisabledChannel+0x74>
        {
            ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    95ba:	ab03      	add	r3, sp, #12
    95bc:	2100      	movs	r1, #0
    95be:	4618      	mov	r0, r3
    95c0:	f7f9 f8ff 	bl	27c2 <OsIf_GetElapsed>
    95c4:	4602      	mov	r2, r0
    95c6:	9b06      	ldr	r3, [sp, #24]
    95c8:	4413      	add	r3, r2
    95ca:	9306      	str	r3, [sp, #24]
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    95cc:	f89d 2003 	ldrb.w	r2, [sp, #3]
    95d0:	9b05      	ldr	r3, [sp, #20]
    95d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    95d6:	f003 031f 	and.w	r3, r3, #31
    95da:	2b1f      	cmp	r3, #31
    95dc:	d003      	beq.n	95e6 <Adc_Ip_SetDisabledChannel+0x8e>
    95de:	9a06      	ldr	r2, [sp, #24]
    95e0:	9b04      	ldr	r3, [sp, #16]
    95e2:	429a      	cmp	r2, r3
    95e4:	d3e9      	bcc.n	95ba <Adc_Ip_SetDisabledChannel+0x62>
        }
        if (ElapsedTicks >= TimeoutTicks)
    95e6:	9a06      	ldr	r2, [sp, #24]
    95e8:	9b04      	ldr	r3, [sp, #16]
    95ea:	429a      	cmp	r2, r3
    95ec:	d301      	bcc.n	95f2 <Adc_Ip_SetDisabledChannel+0x9a>
        {
            Status = ADC_IP_STATUS_TIMEOUT;
    95ee:	2302      	movs	r3, #2
    95f0:	9307      	str	r3, [sp, #28]
        }
    }

    return Status;
    95f2:	9b07      	ldr	r3, [sp, #28]
}
    95f4:	4618      	mov	r0, r3
    95f6:	b009      	add	sp, #36	; 0x24
    95f8:	f85d fb04 	ldr.w	pc, [sp], #4
    95fc:	00016484 	.word	0x00016484
    9600:	000186a0 	.word	0x000186a0

00009604 <Adc_Ip_StartConversion>:
* @implements     Adc_Ip_StartConversion_Activity
* END**************************************************************************/
void Adc_Ip_StartConversion(const uint32 Instance,
                            Adc_Ip_InputChannelType InputChannel,
                            const boolean InterruptEnable)
{
    9604:	b500      	push	{lr}
    9606:	b087      	sub	sp, #28
    9608:	9003      	str	r0, [sp, #12]
    960a:	9102      	str	r1, [sp, #8]
    960c:	4613      	mov	r3, r2
    960e:	f88d 3007 	strb.w	r3, [sp, #7]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9612:	4a0a      	ldr	r2, [pc, #40]	; (963c <Adc_Ip_StartConversion+0x38>)
    9614:	9b03      	ldr	r3, [sp, #12]
    9616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    961a:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18();
    961c:	f006 faee 	bl	fbfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>
    /* Configure SC1A register */
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, InterruptEnable);
    9620:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9624:	9a02      	ldr	r2, [sp, #8]
    9626:	2100      	movs	r1, #0
    9628:	9805      	ldr	r0, [sp, #20]
    962a:	f7ff fc50 	bl	8ece <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, FALSE);
    (void)InterruptEnable;
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18();
    962e:	f006 fb11 	bl	fc54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>
}
    9632:	bf00      	nop
    9634:	b007      	add	sp, #28
    9636:	f85d fb04 	ldr.w	pc, [sp], #4
    963a:	bf00      	nop
    963c:	00016484 	.word	0x00016484

00009640 <Adc_Ip_GetConvActiveFlag>:
* Description   : Reads and return conversion active flag status.
*
* @implements     Adc_Ip_GetConvActiveFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvActiveFlag(const uint32 Instance)
{
    9640:	b084      	sub	sp, #16
    9642:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9644:	4a0b      	ldr	r2, [pc, #44]	; (9674 <Adc_Ip_GetConvActiveFlag+0x34>)
    9646:	9b01      	ldr	r3, [sp, #4]
    9648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    964c:	9303      	str	r3, [sp, #12]
    uint32 Sc2Reg = Base->SC2;
    964e:	9b03      	ldr	r3, [sp, #12]
    9650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    9654:	9302      	str	r3, [sp, #8]

    Sc2Reg = (Sc2Reg & ADC_SC2_ADACT_MASK) >> ADC_SC2_ADACT_SHIFT;
    9656:	9b02      	ldr	r3, [sp, #8]
    9658:	09db      	lsrs	r3, r3, #7
    965a:	f003 0301 	and.w	r3, r3, #1
    965e:	9302      	str	r3, [sp, #8]

    return (Sc2Reg != 0u) ? TRUE : FALSE;
    9660:	9b02      	ldr	r3, [sp, #8]
    9662:	2b00      	cmp	r3, #0
    9664:	bf14      	ite	ne
    9666:	2301      	movne	r3, #1
    9668:	2300      	moveq	r3, #0
    966a:	b2db      	uxtb	r3, r3
}
    966c:	4618      	mov	r0, r3
    966e:	b004      	add	sp, #16
    9670:	4770      	bx	lr
    9672:	bf00      	nop
    9674:	00016484 	.word	0x00016484

00009678 <Adc_Ip_GetChanInterrupt>:
*
* @implements     Adc_Ip_GetChanInterrupt_Activity
* END**************************************************************************/
boolean Adc_Ip_GetChanInterrupt(const uint32 Instance,
                                const uint8 ControlChanIdx)
{
    9678:	b500      	push	{lr}
    967a:	b085      	sub	sp, #20
    967c:	9001      	str	r0, [sp, #4]
    967e:	460b      	mov	r3, r1
    9680:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    9684:	4a08      	ldr	r2, [pc, #32]	; (96a8 <Adc_Ip_GetChanInterrupt+0x30>)
    9686:	9b01      	ldr	r3, [sp, #4]
    9688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    968c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    9690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9694:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetAIEN(Sc1Reg);
    9696:	9803      	ldr	r0, [sp, #12]
    9698:	f7ff fc5e 	bl	8f58 <Adc_HwAcc_GetAIEN>
    969c:	4603      	mov	r3, r0
}
    969e:	4618      	mov	r0, r3
    96a0:	b005      	add	sp, #20
    96a2:	f85d fb04 	ldr.w	pc, [sp], #4
    96a6:	bf00      	nop
    96a8:	00016484 	.word	0x00016484

000096ac <Adc_Ip_GetConvCompleteFlag>:
*
* @implements     Adc_Ip_GetConvCompleteFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvCompleteFlag(const uint32 Instance,
                                   const uint8 ControlChanIdx)
{
    96ac:	b500      	push	{lr}
    96ae:	b085      	sub	sp, #20
    96b0:	9001      	str	r0, [sp, #4]
    96b2:	460b      	mov	r3, r1
    96b4:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    96b8:	4a08      	ldr	r2, [pc, #32]	; (96dc <Adc_Ip_GetConvCompleteFlag+0x30>)
    96ba:	9b01      	ldr	r3, [sp, #4]
    96bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96c0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    96c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    96c8:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetCOCO(Sc1Reg);
    96ca:	9803      	ldr	r0, [sp, #12]
    96cc:	f7ff fc52 	bl	8f74 <Adc_HwAcc_GetCOCO>
    96d0:	4603      	mov	r3, r0
}
    96d2:	4618      	mov	r0, r3
    96d4:	b005      	add	sp, #20
    96d6:	f85d fb04 	ldr.w	pc, [sp], #4
    96da:	bf00      	nop
    96dc:	00016484 	.word	0x00016484

000096e0 <Adc_Ip_GetConvData>:
*
* @implements     Adc_Ip_GetConvData_Activity
* END**************************************************************************/
uint16 Adc_Ip_GetConvData(const uint32 Instance,
                          const uint8 ControlChanIdx)
{
    96e0:	b500      	push	{lr}
    96e2:	b085      	sub	sp, #20
    96e4:	9001      	str	r0, [sp, #4]
    96e6:	460b      	mov	r3, r1
    96e8:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    96ec:	4a07      	ldr	r2, [pc, #28]	; (970c <Adc_Ip_GetConvData+0x2c>)
    96ee:	9b01      	ldr	r3, [sp, #4]
    96f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96f4:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetData(Base, ControlChanIdx);
    96f6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    96fa:	4619      	mov	r1, r3
    96fc:	9803      	ldr	r0, [sp, #12]
    96fe:	f7ff fc47 	bl	8f90 <Adc_HwAcc_GetData>
    9702:	4603      	mov	r3, r0
}
    9704:	4618      	mov	r0, r3
    9706:	b005      	add	sp, #20
    9708:	f85d fb04 	ldr.w	pc, [sp], #4
    970c:	00016484 	.word	0x00016484

00009710 <Adc_Ip_DoCalibration>:
* specified frequency (50Mhz) and greater than minimum specified frequency (20Mhz).
*
* @implements     Adc_Ip_DoCalibration_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_DoCalibration(const uint32 Instance)
{
    9710:	b500      	push	{lr}
    9712:	b093      	sub	sp, #76	; 0x4c
    9714:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9716:	4a59      	ldr	r2, [pc, #356]	; (987c <Adc_Ip_DoCalibration+0x16c>)
    9718:	9b01      	ldr	r3, [sp, #4]
    971a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    971e:	930f      	str	r3, [sp, #60]	; 0x3c
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    9720:	2300      	movs	r3, #0
    9722:	9311      	str	r3, [sp, #68]	; 0x44
    Adc_Ip_TrigType TriggerMode;
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    9724:	2100      	movs	r1, #0
    9726:	4856      	ldr	r0, [pc, #344]	; (9880 <Adc_Ip_DoCalibration+0x170>)
    9728:	f7f9 f87e 	bl	2828 <OsIf_MicrosToTicks>
    972c:	900e      	str	r0, [sp, #56]	; 0x38
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    972e:	2000      	movs	r0, #0
    9730:	f7f9 f82e 	bl	2790 <OsIf_GetCounter>
    9734:	4603      	mov	r3, r0
    9736:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 ElapsedTicks = 0u;
    9738:	2300      	movs	r3, #0
    973a:	9310      	str	r3, [sp, #64]	; 0x40
    uint32 Reg;
    Adc_Ip_ClockConfigType PreClockConfig;
    Adc_Ip_ClockConfigType CalClockConfig;

    /* Store settings before calibration */
    Reg = Base->SC3;
    973c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    973e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    9742:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.AvgEn = ((Reg & ADC_SC3_AVGE_MASK) != 0u) ? TRUE : FALSE;
    9744:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9746:	089b      	lsrs	r3, r3, #2
    9748:	f003 0301 	and.w	r3, r3, #1
    974c:	2b00      	cmp	r3, #0
    974e:	bf14      	ite	ne
    9750:	2301      	movne	r3, #1
    9752:	2300      	moveq	r3, #0
    9754:	b2db      	uxtb	r3, r3
    9756:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    PreClockConfig.AvgSel = Adc_HwAcc_GetAverageSelect(Reg);
    975a:	980d      	ldr	r0, [sp, #52]	; 0x34
    975c:	f7ff fb71 	bl	8e42 <Adc_HwAcc_GetAverageSelect>
    9760:	4603      	mov	r3, r0
    9762:	930a      	str	r3, [sp, #40]	; 0x28

    Reg = Base->CFG2;
    9764:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9768:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.SampleTime = (uint8) ((Reg & ADC_CFG2_SMPLTS_MASK) >> ADC_CFG2_SMPLTS_SHIFT);
    976a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    976c:	b2db      	uxtb	r3, r3
    976e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    TriggerMode = Adc_HwAcc_GetTriggerMode(Base->SC2);
    9772:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    9778:	4618      	mov	r0, r3
    977a:	f7ff fb99 	bl	8eb0 <Adc_HwAcc_GetTriggerMode>
    977e:	900c      	str	r0, [sp, #48]	; 0x30

    Reg = Base->CFG1;
    9780:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9784:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.ClockDivide = Adc_HwAcc_GetClockDivide(Reg);
    9786:	980d      	ldr	r0, [sp, #52]	; 0x34
    9788:	f7ff fad8 	bl	8d3c <Adc_HwAcc_GetClockDivide>
    978c:	4603      	mov	r3, r0
    978e:	9307      	str	r3, [sp, #28]
    PreClockConfig.InputClock = Adc_HwAcc_GetInputClock(Reg);
    9790:	980d      	ldr	r0, [sp, #52]	; 0x34
    9792:	f7ff faf2 	bl	8d7a <Adc_HwAcc_GetInputClock>
    9796:	4603      	mov	r3, r0
    9798:	9308      	str	r3, [sp, #32]

    CalClockConfig.AvgEn = TRUE;
    979a:	2301      	movs	r3, #1
    979c:	f88d 3015 	strb.w	r3, [sp, #21]
    CalClockConfig.AvgSel = ADC_IP_AVG_32_CONV;
    97a0:	2303      	movs	r3, #3
    97a2:	9306      	str	r3, [sp, #24]
    CalClockConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    97a4:	230c      	movs	r3, #12
    97a6:	f88d 3014 	strb.w	r3, [sp, #20]
    CalClockConfig.ClockDivide = Adc_Ip_axState[Instance].CalibrationClockDivide;
    97aa:	4a36      	ldr	r2, [pc, #216]	; (9884 <Adc_Ip_DoCalibration+0x174>)
    97ac:	9b01      	ldr	r3, [sp, #4]
    97ae:	214c      	movs	r1, #76	; 0x4c
    97b0:	fb01 f303 	mul.w	r3, r1, r3
    97b4:	4413      	add	r3, r2
    97b6:	3304      	adds	r3, #4
    97b8:	681b      	ldr	r3, [r3, #0]
    97ba:	9303      	str	r3, [sp, #12]
    CalClockConfig.InputClock = PreClockConfig.InputClock;
    97bc:	9b08      	ldr	r3, [sp, #32]
    97be:	9304      	str	r3, [sp, #16]

    /* Prepare required settings for calibration. */
    ADC_DoCalibration_SetParams(Base, &CalClockConfig, ADC_IP_TRIGGER_SOFTWARE);
    97c0:	ab03      	add	r3, sp, #12
    97c2:	2200      	movs	r2, #0
    97c4:	4619      	mov	r1, r3
    97c6:	980f      	ldr	r0, [sp, #60]	; 0x3c
    97c8:	f7ff fbfa 	bl	8fc0 <ADC_DoCalibration_SetParams>

    Base->CLPS = 0u;
    97cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    97ce:	2200      	movs	r2, #0
    97d0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    Base->CLP3 = 0u;
    97d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    97d6:	2200      	movs	r2, #0
    97d8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    Base->CLP2 = 0u;
    97dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    97de:	2200      	movs	r2, #0
    97e0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    Base->CLP1 = 0u;
    97e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    97e6:	2200      	movs	r2, #0
    97e8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    Base->CLP0 = 0u;
    97ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    97ee:	2200      	movs	r2, #0
    97f0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    Base->CLPX = 0u;
    97f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    97f6:	2200      	movs	r2, #0
    97f8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    Base->CLP9 = 0u;
    97fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    97fe:	2200      	movs	r2, #0
    9800:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Start calibration by writing to the calibration field */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    9804:	f006 fd80 	bl	10308 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Reg = Base->SC3;
    9808:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    980a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    980e:	930d      	str	r3, [sp, #52]	; 0x34
    Reg &= ~(ADC_SC3_CAL_MASK);
    9810:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9812:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    9816:	930d      	str	r3, [sp, #52]	; 0x34
    Reg |= ADC_SC3_CAL(1u);
    9818:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    981a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    981e:	930d      	str	r3, [sp, #52]	; 0x34
    Base->SC3 = Reg;
    9820:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9822:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9824:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    9828:	f006 fd9a 	bl	10360 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Wait for the calibration to finish */
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    982c:	e008      	b.n	9840 <Adc_Ip_DoCalibration+0x130>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    982e:	ab0b      	add	r3, sp, #44	; 0x2c
    9830:	2100      	movs	r1, #0
    9832:	4618      	mov	r0, r3
    9834:	f7f8 ffc5 	bl	27c2 <OsIf_GetElapsed>
    9838:	4602      	mov	r2, r0
    983a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    983c:	4413      	add	r3, r2
    983e:	9310      	str	r3, [sp, #64]	; 0x40
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    9840:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9842:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    9846:	f003 0380 	and.w	r3, r3, #128	; 0x80
    984a:	2b00      	cmp	r3, #0
    984c:	d003      	beq.n	9856 <Adc_Ip_DoCalibration+0x146>
    984e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9850:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9852:	429a      	cmp	r2, r3
    9854:	d3eb      	bcc.n	982e <Adc_Ip_DoCalibration+0x11e>
    }
    if (ElapsedTicks >= TimeoutTicks)
    9856:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9858:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    985a:	429a      	cmp	r2, r3
    985c:	d301      	bcc.n	9862 <Adc_Ip_DoCalibration+0x152>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    985e:	2302      	movs	r3, #2
    9860:	9311      	str	r3, [sp, #68]	; 0x44
    }

    /* Revert settings as same as before calibration. */
    ADC_DoCalibration_SetParams(Base, &PreClockConfig, TriggerMode);
    9862:	ab07      	add	r3, sp, #28
    9864:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9866:	4619      	mov	r1, r3
    9868:	980f      	ldr	r0, [sp, #60]	; 0x3c
    986a:	f7ff fba9 	bl	8fc0 <ADC_DoCalibration_SetParams>

    /* Clear COCO flag */
    (void) R(Base, 0u);
    986e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9870:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return Status;
    9872:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    9874:	4618      	mov	r0, r3
    9876:	b013      	add	sp, #76	; 0x4c
    9878:	f85d fb04 	ldr.w	pc, [sp], #4
    987c:	00016484 	.word	0x00016484
    9880:	000186a0 	.word	0x000186a0
    9884:	1fff8d68 	.word	0x1fff8d68

00009888 <Adc_Ip_ClearLatchedTriggers>:
* has been deactivated.
*
* @implements     Adc_Ip_ClearLatchedTriggers_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_ClearLatchedTriggers(const uint32 Instance)
{
    9888:	b500      	push	{lr}
    988a:	b089      	sub	sp, #36	; 0x24
    988c:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    988e:	4a1e      	ldr	r2, [pc, #120]	; (9908 <Adc_Ip_ClearLatchedTriggers+0x80>)
    9890:	9b01      	ldr	r3, [sp, #4]
    9892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9896:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    9898:	2300      	movs	r3, #0
    989a:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    989c:	2100      	movs	r1, #0
    989e:	481b      	ldr	r0, [pc, #108]	; (990c <Adc_Ip_ClearLatchedTriggers+0x84>)
    98a0:	f7f8 ffc2 	bl	2828 <OsIf_MicrosToTicks>
    98a4:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    98a6:	2000      	movs	r0, #0
    98a8:	f7f8 ff72 	bl	2790 <OsIf_GetCounter>
    98ac:	4603      	mov	r3, r0
    98ae:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    98b0:	2300      	movs	r3, #0
    98b2:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12();
    98b4:	f005 ffb6 	bl	f824 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>
    /* Write bit to clear latched triggers */
    Base->CFG1 |= ADC_CFG1_CLRLTRG(0x01u);
    98b8:	9b05      	ldr	r3, [sp, #20]
    98ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    98bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    98c0:	9b05      	ldr	r3, [sp, #20]
    98c2:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12();
    98c4:	f005 ffda 	bl	f87c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>

    /* Wait for latched triggers to be cleared */
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    98c8:	e008      	b.n	98dc <Adc_Ip_ClearLatchedTriggers+0x54>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    98ca:	ab03      	add	r3, sp, #12
    98cc:	2100      	movs	r1, #0
    98ce:	4618      	mov	r0, r3
    98d0:	f7f8 ff77 	bl	27c2 <OsIf_GetElapsed>
    98d4:	4602      	mov	r2, r0
    98d6:	9b06      	ldr	r3, [sp, #24]
    98d8:	4413      	add	r3, r2
    98da:	9306      	str	r3, [sp, #24]
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    98dc:	9b05      	ldr	r3, [sp, #20]
    98de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    98e2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    98e6:	2b00      	cmp	r3, #0
    98e8:	d003      	beq.n	98f2 <Adc_Ip_ClearLatchedTriggers+0x6a>
    98ea:	9a06      	ldr	r2, [sp, #24]
    98ec:	9b04      	ldr	r3, [sp, #16]
    98ee:	429a      	cmp	r2, r3
    98f0:	d3eb      	bcc.n	98ca <Adc_Ip_ClearLatchedTriggers+0x42>
    }
    if (ElapsedTicks >= TimeoutTicks)
    98f2:	9a06      	ldr	r2, [sp, #24]
    98f4:	9b04      	ldr	r3, [sp, #16]
    98f6:	429a      	cmp	r2, r3
    98f8:	d301      	bcc.n	98fe <Adc_Ip_ClearLatchedTriggers+0x76>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    98fa:	2302      	movs	r3, #2
    98fc:	9307      	str	r3, [sp, #28]
    }

    return Status;
    98fe:	9b07      	ldr	r3, [sp, #28]
}
    9900:	4618      	mov	r0, r3
    9902:	b009      	add	sp, #36	; 0x24
    9904:	f85d fb04 	ldr.w	pc, [sp], #4
    9908:	00016484 	.word	0x00016484
    990c:	000186a0 	.word	0x000186a0

00009910 <Adc_Ip_EnableChannelNotification>:
*
* @implements     Adc_Ip_EnableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_EnableChannelNotification(const uint32 Instance,
                                      const uint8 ControlChanIdx)
{
    9910:	b500      	push	{lr}
    9912:	b085      	sub	sp, #20
    9914:	9001      	str	r0, [sp, #4]
    9916:	460b      	mov	r3, r1
    9918:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    991c:	4a0c      	ldr	r2, [pc, #48]	; (9950 <Adc_Ip_EnableChannelNotification+0x40>)
    991e:	9b01      	ldr	r3, [sp, #4]
    9920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9924:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19();
    9926:	f006 f9bb 	bl	fca0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>
    SC1(Base, ControlChanIdx) |= ADC_SC1_AIEN_MASK;
    992a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    992e:	9b03      	ldr	r3, [sp, #12]
    9930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9934:	f89d 2003 	ldrb.w	r2, [sp, #3]
    9938:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    993c:	9b03      	ldr	r3, [sp, #12]
    993e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19();
    9942:	f006 f9d9 	bl	fcf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>
}
    9946:	bf00      	nop
    9948:	b005      	add	sp, #20
    994a:	f85d fb04 	ldr.w	pc, [sp], #4
    994e:	bf00      	nop
    9950:	00016484 	.word	0x00016484

00009954 <Adc_Ip_DisableChannelNotification>:
*
* @implements     Adc_Ip_DisableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_DisableChannelNotification(const uint32 Instance,
                                       const uint8 ControlChanIdx)
{
    9954:	b500      	push	{lr}
    9956:	b085      	sub	sp, #20
    9958:	9001      	str	r0, [sp, #4]
    995a:	460b      	mov	r3, r1
    995c:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9960:	4a0c      	ldr	r2, [pc, #48]	; (9994 <Adc_Ip_DisableChannelNotification+0x40>)
    9962:	9b01      	ldr	r3, [sp, #4]
    9964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9968:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20();
    996a:	f006 f9eb 	bl	fd44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>
    SC1(Base, ControlChanIdx) &= ~(ADC_SC1_AIEN_MASK);
    996e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    9972:	9b03      	ldr	r3, [sp, #12]
    9974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9978:	f89d 2003 	ldrb.w	r2, [sp, #3]
    997c:	f023 0140 	bic.w	r1, r3, #64	; 0x40
    9980:	9b03      	ldr	r3, [sp, #12]
    9982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20();
    9986:	f006 fa09 	bl	fd9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>
}
    998a:	bf00      	nop
    998c:	b005      	add	sp, #20
    998e:	f85d fb04 	ldr.w	pc, [sp], #4
    9992:	bf00      	nop
    9994:	00016484 	.word	0x00016484

00009998 <Adc_Ip_ClearTrigErrReg>:
* Description   : This function clears all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_ClearTrigErrReg_Activity
* END**************************************************************************/
void Adc_Ip_ClearTrigErrReg(const uint32 Instance)
{
    9998:	b500      	push	{lr}
    999a:	b085      	sub	sp, #20
    999c:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    999e:	4a0a      	ldr	r2, [pc, #40]	; (99c8 <Adc_Ip_ClearTrigErrReg+0x30>)
    99a0:	9b01      	ldr	r3, [sp, #4]
    99a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99a6:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25();
    99a8:	f006 fb66 	bl	10078 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>
    Base->SC2 |= ADC_SC2_TRGSTERR_MASK;
    99ac:	9b03      	ldr	r3, [sp, #12]
    99ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    99b2:	f043 6270 	orr.w	r2, r3, #251658240	; 0xf000000
    99b6:	9b03      	ldr	r3, [sp, #12]
    99b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25();
    99bc:	f006 fb88 	bl	100d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>
}
    99c0:	bf00      	nop
    99c2:	b005      	add	sp, #20
    99c4:	f85d fb04 	ldr.w	pc, [sp], #4
    99c8:	00016484 	.word	0x00016484

000099cc <Adc_Ip_GetTrigErrReg>:
* Description   : This function returns all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_GetTrigErrReg_Activity
* END**************************************************************************/
uint32 Adc_Ip_GetTrigErrReg(const uint32 Instance)
{
    99cc:	b084      	sub	sp, #16
    99ce:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    99d0:	4a06      	ldr	r2, [pc, #24]	; (99ec <Adc_Ip_GetTrigErrReg+0x20>)
    99d2:	9b01      	ldr	r3, [sp, #4]
    99d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99d8:	9303      	str	r3, [sp, #12]

    return (Base->SC2 & ADC_SC2_TRGSTERR_MASK) >> ADC_SC2_TRGSTERR_SHIFT;
    99da:	9b03      	ldr	r3, [sp, #12]
    99dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    99e0:	0e1b      	lsrs	r3, r3, #24
    99e2:	f003 030f 	and.w	r3, r3, #15
}
    99e6:	4618      	mov	r0, r3
    99e8:	b004      	add	sp, #16
    99ea:	4770      	bx	lr
    99ec:	00016484 	.word	0x00016484

000099f0 <Adc_Ip_GetDataAddress>:
 *
 * @implements     Adc_Ip_GetDataAddress_Activity
 *END*************************************************************************/
uint32 Adc_Ip_GetDataAddress(const uint32 Instance,
                             const uint8 Index)
{
    99f0:	b082      	sub	sp, #8
    99f2:	9001      	str	r0, [sp, #4]
    99f4:	460b      	mov	r3, r1
    99f6:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    return (uint32)&(R(Adc_Ip_apxBase[Instance], Index));
    99fa:	4a06      	ldr	r2, [pc, #24]	; (9a14 <Adc_Ip_GetDataAddress+0x24>)
    99fc:	9b01      	ldr	r3, [sp, #4]
    99fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    9a02:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9a06:	3312      	adds	r3, #18
    9a08:	009b      	lsls	r3, r3, #2
    9a0a:	4413      	add	r3, r2
}
    9a0c:	4618      	mov	r0, r3
    9a0e:	b002      	add	sp, #8
    9a10:	4770      	bx	lr
    9a12:	bf00      	nop
    9a14:	00016484 	.word	0x00016484

00009a18 <Adc_Ip_GetChanData>:
* @implements     Adc_Ip_GetChanData_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_GetChanData(const uint32 Instance,
                                     const Adc_Ip_InputChannelType Channel,
                                     uint16 * const Result)
{
    9a18:	b088      	sub	sp, #32
    9a1a:	9003      	str	r0, [sp, #12]
    9a1c:	9102      	str	r1, [sp, #8]
    9a1e:	9201      	str	r2, [sp, #4]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    9a20:	4a25      	ldr	r2, [pc, #148]	; (9ab8 <Adc_Ip_GetChanData+0xa0>)
    9a22:	9b03      	ldr	r3, [sp, #12]
    9a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a28:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    9a2a:	2300      	movs	r3, #0
    9a2c:	9307      	str	r3, [sp, #28]
    uint16 Temp = 0u;
    9a2e:	2300      	movs	r3, #0
    9a30:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint8 ControlChanIdx;
    boolean Found = FALSE;
    9a34:	2300      	movs	r3, #0
    9a36:	f88d 3018 	strb.w	r3, [sp, #24]

    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    9a3a:	2300      	movs	r3, #0
    9a3c:	f88d 3019 	strb.w	r3, [sp, #25]
    9a40:	e019      	b.n	9a76 <Adc_Ip_GetChanData+0x5e>
    {
        if (Adc_Ip_axState[Instance].ChannelConfig[ControlChanIdx] == Channel)
    9a42:	f89d 1019 	ldrb.w	r1, [sp, #25]
    9a46:	481d      	ldr	r0, [pc, #116]	; (9abc <Adc_Ip_GetChanData+0xa4>)
    9a48:	9a03      	ldr	r2, [sp, #12]
    9a4a:	4613      	mov	r3, r2
    9a4c:	00db      	lsls	r3, r3, #3
    9a4e:	4413      	add	r3, r2
    9a50:	005b      	lsls	r3, r3, #1
    9a52:	4413      	add	r3, r2
    9a54:	440b      	add	r3, r1
    9a56:	3302      	adds	r3, #2
    9a58:	009b      	lsls	r3, r3, #2
    9a5a:	4403      	add	r3, r0
    9a5c:	685b      	ldr	r3, [r3, #4]
    9a5e:	9a02      	ldr	r2, [sp, #8]
    9a60:	429a      	cmp	r2, r3
    9a62:	d103      	bne.n	9a6c <Adc_Ip_GetChanData+0x54>
        {
            Found = TRUE;
    9a64:	2301      	movs	r3, #1
    9a66:	f88d 3018 	strb.w	r3, [sp, #24]
            break;
    9a6a:	e008      	b.n	9a7e <Adc_Ip_GetChanData+0x66>
    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    9a6c:	f89d 3019 	ldrb.w	r3, [sp, #25]
    9a70:	3301      	adds	r3, #1
    9a72:	f88d 3019 	strb.w	r3, [sp, #25]
    9a76:	f89d 3019 	ldrb.w	r3, [sp, #25]
    9a7a:	2b0f      	cmp	r3, #15
    9a7c:	d9e1      	bls.n	9a42 <Adc_Ip_GetChanData+0x2a>
        }
    }

    if (Found == TRUE)
    9a7e:	f89d 3018 	ldrb.w	r3, [sp, #24]
    9a82:	2b00      	cmp	r3, #0
    9a84:	d00e      	beq.n	9aa4 <Adc_Ip_GetChanData+0x8c>
    {
        Temp = (uint16) R(Base, ControlChanIdx);
    9a86:	f89d 2019 	ldrb.w	r2, [sp, #25]
    9a8a:	9b05      	ldr	r3, [sp, #20]
    9a8c:	3212      	adds	r2, #18
    9a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9a92:	f8ad 301a 	strh.w	r3, [sp, #26]
        Temp = (uint16) ((Temp & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    9a96:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    9a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    9a9e:	f8ad 301a 	strh.w	r3, [sp, #26]
    9aa2:	e001      	b.n	9aa8 <Adc_Ip_GetChanData+0x90>
    }
    else
    {
        Status = ADC_IP_STATUS_ERROR;
    9aa4:	2301      	movs	r3, #1
    9aa6:	9307      	str	r3, [sp, #28]
    }

    *Result = Temp;
    9aa8:	9b01      	ldr	r3, [sp, #4]
    9aaa:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    9aae:	801a      	strh	r2, [r3, #0]

    return Status;
    9ab0:	9b07      	ldr	r3, [sp, #28]
}
    9ab2:	4618      	mov	r0, r3
    9ab4:	b008      	add	sp, #32
    9ab6:	4770      	bx	lr
    9ab8:	00016484 	.word	0x00016484
    9abc:	1fff8d68 	.word	0x1fff8d68

00009ac0 <Adc_Ip_IRQHandler>:
 * Note          : It's required to read result data in user notification in order to clear the COCO flags and avoid ISR getting invoked repeatedly
 *
 * @implements     Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Adc_Ip_IRQHandler(const uint32 Instance)
{
    9ac0:	b500      	push	{lr}
    9ac2:	b085      	sub	sp, #20
    9ac4:	9001      	str	r0, [sp, #4]
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    uint8 ControlChanIdx;
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    uint32 Sc1Reg;
    boolean ChanIntFlag = FALSE;
    9ac6:	2300      	movs	r3, #0
    9ac8:	f88d 300e 	strb.w	r3, [sp, #14]
    boolean ChanCocoFlag = FALSE;
    9acc:	2300      	movs	r3, #0
    9ace:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Check whether the respective driver is initialized */
    if (TRUE == Adc_Ip_axState[Instance].Init)
    9ad2:	4a32      	ldr	r2, [pc, #200]	; (9b9c <Adc_Ip_IRQHandler+0xdc>)
    9ad4:	9b01      	ldr	r3, [sp, #4]
    9ad6:	214c      	movs	r1, #76	; 0x4c
    9ad8:	fb01 f303 	mul.w	r3, r1, r3
    9adc:	4413      	add	r3, r2
    9ade:	781b      	ldrb	r3, [r3, #0]
    9ae0:	2b00      	cmp	r3, #0
    9ae2:	d040      	beq.n	9b66 <Adc_Ip_IRQHandler+0xa6>
    {
        /* Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop) */
        if (Adc_Ip_axState[Instance].ConversionCompleteNotification != NULL_PTR)
    9ae4:	4a2d      	ldr	r2, [pc, #180]	; (9b9c <Adc_Ip_IRQHandler+0xdc>)
    9ae6:	9b01      	ldr	r3, [sp, #4]
    9ae8:	214c      	movs	r1, #76	; 0x4c
    9aea:	fb01 f303 	mul.w	r3, r1, r3
    9aee:	4413      	add	r3, r2
    9af0:	3308      	adds	r3, #8
    9af2:	681b      	ldr	r3, [r3, #0]
    9af4:	2b00      	cmp	r3, #0
    9af6:	d04d      	beq.n	9b94 <Adc_Ip_IRQHandler+0xd4>
        {
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    9af8:	2300      	movs	r3, #0
    9afa:	f88d 300f 	strb.w	r3, [sp, #15]
    9afe:	e02d      	b.n	9b5c <Adc_Ip_IRQHandler+0x9c>
            {
                Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    9b00:	4a27      	ldr	r2, [pc, #156]	; (9ba0 <Adc_Ip_IRQHandler+0xe0>)
    9b02:	9b01      	ldr	r3, [sp, #4]
    9b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b08:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9b10:	9302      	str	r3, [sp, #8]
                ChanIntFlag = Adc_HwAcc_GetAIEN(Sc1Reg);
    9b12:	9802      	ldr	r0, [sp, #8]
    9b14:	f7ff fa20 	bl	8f58 <Adc_HwAcc_GetAIEN>
    9b18:	4603      	mov	r3, r0
    9b1a:	f88d 300e 	strb.w	r3, [sp, #14]
                ChanCocoFlag = Adc_HwAcc_GetCOCO(Sc1Reg);
    9b1e:	9802      	ldr	r0, [sp, #8]
    9b20:	f7ff fa28 	bl	8f74 <Adc_HwAcc_GetCOCO>
    9b24:	4603      	mov	r3, r0
    9b26:	f88d 300d 	strb.w	r3, [sp, #13]
                /* CPR_RTD_00664
                 * Check if the interrupt not spurious (the interrupt is enabled and equivalent conversion has finished)
                 * Ignore spurious ones (return immediately from ISR)
                 */
                if ((TRUE == ChanIntFlag) && (TRUE == ChanCocoFlag))
    9b2a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9b2e:	2b00      	cmp	r3, #0
    9b30:	d00f      	beq.n	9b52 <Adc_Ip_IRQHandler+0x92>
    9b32:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9b36:	2b00      	cmp	r3, #0
    9b38:	d00b      	beq.n	9b52 <Adc_Ip_IRQHandler+0x92>
                {
                    /* Call the associated callback.
                     * The COCO flag will be cleared by reading the respective result data register in the callback
                     */
                    Adc_Ip_axState[Instance].ConversionCompleteNotification(ControlChanIdx);
    9b3a:	4a18      	ldr	r2, [pc, #96]	; (9b9c <Adc_Ip_IRQHandler+0xdc>)
    9b3c:	9b01      	ldr	r3, [sp, #4]
    9b3e:	214c      	movs	r1, #76	; 0x4c
    9b40:	fb01 f303 	mul.w	r3, r1, r3
    9b44:	4413      	add	r3, r2
    9b46:	3308      	adds	r3, #8
    9b48:	681b      	ldr	r3, [r3, #0]
    9b4a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9b4e:	4610      	mov	r0, r2
    9b50:	4798      	blx	r3
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    9b52:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9b56:	3301      	adds	r3, #1
    9b58:	f88d 300f 	strb.w	r3, [sp, #15]
    9b5c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9b60:	2b0f      	cmp	r3, #15
    9b62:	d9cd      	bls.n	9b00 <Adc_Ip_IRQHandler+0x40>
        {
            /* Do a dummy read to clear the COCO flags */
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
        }
    }
}
    9b64:	e016      	b.n	9b94 <Adc_Ip_IRQHandler+0xd4>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    9b66:	2300      	movs	r3, #0
    9b68:	f88d 300f 	strb.w	r3, [sp, #15]
    9b6c:	e00e      	b.n	9b8c <Adc_Ip_IRQHandler+0xcc>
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
    9b6e:	4a0c      	ldr	r2, [pc, #48]	; (9ba0 <Adc_Ip_IRQHandler+0xe0>)
    9b70:	9b01      	ldr	r3, [sp, #4]
    9b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b76:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9b7a:	4611      	mov	r1, r2
    9b7c:	4618      	mov	r0, r3
    9b7e:	f7ff fa07 	bl	8f90 <Adc_HwAcc_GetData>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    9b82:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9b86:	3301      	adds	r3, #1
    9b88:	f88d 300f 	strb.w	r3, [sp, #15]
    9b8c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9b90:	2b0f      	cmp	r3, #15
    9b92:	d9ec      	bls.n	9b6e <Adc_Ip_IRQHandler+0xae>
}
    9b94:	bf00      	nop
    9b96:	b005      	add	sp, #20
    9b98:	f85d fb04 	ldr.w	pc, [sp], #4
    9b9c:	1fff8d68 	.word	0x1fff8d68
    9ba0:	00016484 	.word	0x00016484

00009ba4 <Adc_0_Isr>:
==================================================================================================*/
#define ADC_START_SEC_CODE
#include "Adc_MemMap.h"

ISR(Adc_0_Isr)
{
    9ba4:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(0UL);
    9ba6:	2000      	movs	r0, #0
    9ba8:	f7ff ff8a 	bl	9ac0 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    9bac:	f3bf 8f4f 	dsb	sy
}
    9bb0:	bf00      	nop
    9bb2:	bd08      	pop	{r3, pc}

00009bb4 <Adc_1_Isr>:

#if (ADC_INSTANCE_COUNT > 1)
ISR(Adc_1_Isr)
{
    9bb4:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(1UL);
    9bb6:	2001      	movs	r0, #1
    9bb8:	f7ff ff82 	bl	9ac0 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    9bbc:	f3bf 8f4f 	dsb	sy
}
    9bc0:	bf00      	nop
    9bc2:	bd08      	pop	{r3, pc}

00009bc4 <Adc_Ipw_RemoveFromQueue>:
*
* @pre This function must be called from a critical region. It is not protecting itself against interruptions.
*/
void Adc_Ipw_RemoveFromQueue(const Adc_HwUnitType Unit,
                             const Adc_QueueIndexType CurQueueIndex)
{
    9bc4:	b510      	push	{r4, lr}
    9bc6:	b084      	sub	sp, #16
    9bc8:	4603      	mov	r3, r0
    9bca:	460a      	mov	r2, r1
    9bcc:	f88d 3007 	strb.w	r3, [sp, #7]
    9bd0:	4613      	mov	r3, r2
    9bd2:	f8ad 3004 	strh.w	r3, [sp, #4]
    Adc_QueueIndexType PositionIndex = 0U;
    9bd6:	2300      	movs	r3, #0
    9bd8:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_QueueIndexType CurrentIndex = 0U;
    9bdc:	2300      	movs	r3, #0
    9bde:	f8ad 300c 	strh.w	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00();
    9be2:	f005 fa47 	bl	f074 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>
    CurrentIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    9be6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9bea:	4a24      	ldr	r2, [pc, #144]	; (9c7c <Adc_Ipw_RemoveFromQueue+0xb8>)
    9bec:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    9bf0:	f8ad 300c 	strh.w	r3, [sp, #12]
    if ((Adc_QueueIndexType)1U >= CurrentIndex)
    9bf4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9bf8:	2b01      	cmp	r3, #1
    9bfa:	d806      	bhi.n	9c0a <Adc_Ipw_RemoveFromQueue+0x46>
    {
        /* Zero or one element present in the queue */
        Adc_axUnitStatus[Unit].SwNormalQueueIndex = 0U;
    9bfc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9c00:	4a1e      	ldr	r2, [pc, #120]	; (9c7c <Adc_Ipw_RemoveFromQueue+0xb8>)
    9c02:	2100      	movs	r1, #0
    9c04:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
    9c08:	e032      	b.n	9c70 <Adc_Ipw_RemoveFromQueue+0xac>
    }
    else
    {
        /* More than one element in the queue */
        /* Move all elements after the one to remove (from CurQueueIndex position) one place to the left */
        for (PositionIndex = (CurQueueIndex + 1U); PositionIndex < CurrentIndex; PositionIndex++)
    9c0a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    9c0e:	3301      	adds	r3, #1
    9c10:	f8ad 300e 	strh.w	r3, [sp, #14]
    9c14:	e01b      	b.n	9c4e <Adc_Ipw_RemoveFromQueue+0x8a>
        {
            Adc_axUnitStatus[Unit].SwNormalQueue[PositionIndex - 1U] = (Adc_GroupType)Adc_axUnitStatus[Unit].SwNormalQueue[PositionIndex];
    9c16:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9c1a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9c1e:	f89d 1007 	ldrb.w	r1, [sp, #7]
    9c22:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9c26:	3a01      	subs	r2, #1
    9c28:	4c14      	ldr	r4, [pc, #80]	; (9c7c <Adc_Ipw_RemoveFromQueue+0xb8>)
    9c2a:	0080      	lsls	r0, r0, #2
    9c2c:	4403      	add	r3, r0
    9c2e:	005b      	lsls	r3, r3, #1
    9c30:	4423      	add	r3, r4
    9c32:	885b      	ldrh	r3, [r3, #2]
    9c34:	b29c      	uxth	r4, r3
    9c36:	4811      	ldr	r0, [pc, #68]	; (9c7c <Adc_Ipw_RemoveFromQueue+0xb8>)
    9c38:	008b      	lsls	r3, r1, #2
    9c3a:	4413      	add	r3, r2
    9c3c:	005b      	lsls	r3, r3, #1
    9c3e:	4403      	add	r3, r0
    9c40:	4622      	mov	r2, r4
    9c42:	805a      	strh	r2, [r3, #2]
        for (PositionIndex = (CurQueueIndex + 1U); PositionIndex < CurrentIndex; PositionIndex++)
    9c44:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9c48:	3301      	adds	r3, #1
    9c4a:	f8ad 300e 	strh.w	r3, [sp, #14]
    9c4e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9c52:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9c56:	429a      	cmp	r2, r3
    9c58:	d3dd      	bcc.n	9c16 <Adc_Ipw_RemoveFromQueue+0x52>
        }
        Adc_axUnitStatus[Unit].SwNormalQueueIndex--;
    9c5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9c5e:	4a07      	ldr	r2, [pc, #28]	; (9c7c <Adc_Ipw_RemoveFromQueue+0xb8>)
    9c60:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    9c64:	b292      	uxth	r2, r2
    9c66:	3a01      	subs	r2, #1
    9c68:	b291      	uxth	r1, r2
    9c6a:	4a04      	ldr	r2, [pc, #16]	; (9c7c <Adc_Ipw_RemoveFromQueue+0xb8>)
    9c6c:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
    }
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00();
    9c70:	f005 fa2c 	bl	f0cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>
}
    9c74:	bf00      	nop
    9c76:	b004      	add	sp, #16
    9c78:	bd10      	pop	{r4, pc}
    9c7a:	bf00      	nop
    9c7c:	1fff8d58 	.word	0x1fff8d58

00009c80 <Adc_Ipw_ReadGroupConvData>:

static inline Std_ReturnType Adc_Ipw_ReadGroupConvData(const Adc_GroupConfigurationType * GroupPtr,
                                                       Adc_ValueGroupType * DataPtr,
                                                       boolean * Flag,
                                                       uint8 CoreId)
{
    9c80:	b500      	push	{lr}
    9c82:	b087      	sub	sp, #28
    9c84:	9003      	str	r0, [sp, #12]
    9c86:	9102      	str	r1, [sp, #8]
    9c88:	9201      	str	r2, [sp, #4]
    9c8a:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 Channel;
    Adc_ValueGroupType AdcResult;
    Std_ReturnType ReadGroupRet = (Std_ReturnType) E_OK;
    9c8e:	2300      	movs	r3, #0
    9c90:	f88d 3016 	strb.w	r3, [sp, #22]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    9c94:	9b03      	ldr	r3, [sp, #12]
    9c96:	789b      	ldrb	r3, [r3, #2]
    9c98:	f88d 3015 	strb.w	r3, [sp, #21]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    9c9c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9ca0:	4a29      	ldr	r2, [pc, #164]	; (9d48 <Adc_Ipw_ReadGroupConvData+0xc8>)
    9ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ca6:	681a      	ldr	r2, [r3, #0]
    9ca8:	f89d 3015 	ldrb.w	r3, [sp, #21]
    9cac:	4413      	add	r3, r2
    9cae:	7c1b      	ldrb	r3, [r3, #16]
    9cb0:	f88d 3014 	strb.w	r3, [sp, #20]
    const uint8 NumsBitShift = Adc_Ipw_CalculateNumsBitShift(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[LogicalHwUnitId]->Resolution);
    9cb4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9cb8:	4a23      	ldr	r2, [pc, #140]	; (9d48 <Adc_Ipw_ReadGroupConvData+0xc8>)
    9cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cbe:	681b      	ldr	r3, [r3, #0]
    9cc0:	f89d 2015 	ldrb.w	r2, [sp, #21]
    9cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9cc8:	695b      	ldr	r3, [r3, #20]
    9cca:	4618      	mov	r0, r3
    9ccc:	f000 fbce 	bl	a46c <Adc_Ipw_CalculateNumsBitShift>
    9cd0:	4603      	mov	r3, r0
    9cd2:	f88d 3013 	strb.w	r3, [sp, #19]
    boolean ResultInRange = TRUE;
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
#if (ADC_SETCHANNEL_API == STD_ON)
    const Adc_ChannelIndexType ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    const Adc_ChannelIndexType ChannelCount = GroupPtr->AssignedChannelCount;
    9cd6:	9b03      	ldr	r3, [sp, #12]
    9cd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9cdc:	f88d 3012 	strb.w	r3, [sp, #18]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    for (Channel = 0U; Channel < ChannelCount; Channel++)
    9ce0:	2300      	movs	r3, #0
    9ce2:	f88d 3017 	strb.w	r3, [sp, #23]
    9ce6:	e022      	b.n	9d2e <Adc_Ipw_ReadGroupConvData+0xae>
            }
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            AdcResult = Adc_Ip_GetConvData(PhysicalHwUnitId, Channel);
    9ce8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9cec:	f89d 2017 	ldrb.w	r2, [sp, #23]
    9cf0:	4611      	mov	r1, r2
    9cf2:	4618      	mov	r0, r3
    9cf4:	f7ff fcf4 	bl	96e0 <Adc_Ip_GetConvData>
    9cf8:	4603      	mov	r3, r0
    9cfa:	f8ad 3010 	strh.w	r3, [sp, #16]
            /* Assumption: the width of the register is less than 16 */
            AdcResult = AdcResult << (NumsBitShift);
    9cfe:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    9d02:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9d06:	fa02 f303 	lsl.w	r3, r2, r3
    9d0a:	f8ad 3010 	strh.w	r3, [sp, #16]
        }
#if (ADC_ENABLE_LIMIT_CHECK == STD_OFF)
        (*Flag) = TRUE;
    9d0e:	9b01      	ldr	r3, [sp, #4]
    9d10:	2201      	movs	r2, #1
    9d12:	701a      	strb	r2, [r3, #0]
            }
        }
        if (TRUE == ResultInRange)
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_OFF */
        {
            DataPtr[Channel] = AdcResult;
    9d14:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9d18:	005b      	lsls	r3, r3, #1
    9d1a:	9a02      	ldr	r2, [sp, #8]
    9d1c:	4413      	add	r3, r2
    9d1e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    9d22:	801a      	strh	r2, [r3, #0]
    for (Channel = 0U; Channel < ChannelCount; Channel++)
    9d24:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9d28:	3301      	adds	r3, #1
    9d2a:	f88d 3017 	strb.w	r3, [sp, #23]
    9d2e:	f89d 2017 	ldrb.w	r2, [sp, #23]
    9d32:	f89d 3012 	ldrb.w	r3, [sp, #18]
    9d36:	429a      	cmp	r2, r3
    9d38:	d3d6      	bcc.n	9ce8 <Adc_Ipw_ReadGroupConvData+0x68>
        }
    }
    return ReadGroupRet;
    9d3a:	f89d 3016 	ldrb.w	r3, [sp, #22]
}
    9d3e:	4618      	mov	r0, r3
    9d40:	b007      	add	sp, #28
    9d42:	f85d fb04 	ldr.w	pc, [sp], #4
    9d46:	bf00      	nop
    9d48:	1fff8d2c 	.word	0x1fff8d2c

00009d4c <Adc_Ipw_ReadGroupNoInt>:
*/
static inline Std_ReturnType Adc_Ipw_ReadGroupNoInt(const Adc_GroupConfigurationType * GroupPtr,
                                                    Adc_ValueGroupType * DataPtr,
                                                    boolean * Flag,
                                                    uint8 CoreId)
{
    9d4c:	b500      	push	{lr}
    9d4e:	b087      	sub	sp, #28
    9d50:	9003      	str	r0, [sp, #12]
    9d52:	9102      	str	r1, [sp, #8]
    9d54:	9201      	str	r2, [sp, #4]
    9d56:	f88d 3003 	strb.w	r3, [sp, #3]
    Adc_ChannelIndexType ChannelCount;
    boolean ValidConversion = TRUE;
    9d5a:	2301      	movs	r3, #1
    9d5c:	f88d 3016 	strb.w	r3, [sp, #22]
    Std_ReturnType ReadGroupRet = (Std_ReturnType) E_OK;
    9d60:	2300      	movs	r3, #0
    9d62:	f88d 3017 	strb.w	r3, [sp, #23]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    9d66:	9b03      	ldr	r3, [sp, #12]
    9d68:	789b      	ldrb	r3, [r3, #2]
    9d6a:	f88d 3015 	strb.w	r3, [sp, #21]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    9d6e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9d72:	4a19      	ldr	r2, [pc, #100]	; (9dd8 <Adc_Ipw_ReadGroupNoInt+0x8c>)
    9d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d78:	681a      	ldr	r2, [r3, #0]
    9d7a:	f89d 3015 	ldrb.w	r3, [sp, #21]
    9d7e:	4413      	add	r3, r2
    9d80:	7c1b      	ldrb	r3, [r3, #16]
    9d82:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) || defined(ADC_DMA_SUPPORTED) */

#if (ADC_SETCHANNEL_API == STD_ON)
    ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    ChannelCount = GroupPtr->AssignedChannelCount;
    9d86:	9b03      	ldr	r3, [sp, #12]
    9d88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9d8c:	f88d 3013 	strb.w	r3, [sp, #19]
        }
    }
    else
#endif /* ADC_DMA_SUPPORTED */
    {
        ValidConversion = Adc_Ipw_CheckValidConversion(PhysicalHwUnitId, 0U, ChannelCount);
    9d90:	f89d 2013 	ldrb.w	r2, [sp, #19]
    9d94:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9d98:	2100      	movs	r1, #0
    9d9a:	4618      	mov	r0, r3
    9d9c:	f000 fe2a 	bl	a9f4 <Adc_Ipw_CheckValidConversion>
    9da0:	4603      	mov	r3, r0
    9da2:	f88d 3016 	strb.w	r3, [sp, #22]
    }

    /* All results are valid, so all conversions from the group have been completed */
    if (TRUE == ValidConversion)
    9da6:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9daa:	2b00      	cmp	r3, #0
    9dac:	d00a      	beq.n	9dc4 <Adc_Ipw_ReadGroupNoInt+0x78>
    {
        ReadGroupRet = Adc_Ipw_ReadGroupConvData(GroupPtr, DataPtr, Flag, CoreId);
    9dae:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9db2:	9a01      	ldr	r2, [sp, #4]
    9db4:	9902      	ldr	r1, [sp, #8]
    9db6:	9803      	ldr	r0, [sp, #12]
    9db8:	f7ff ff62 	bl	9c80 <Adc_Ipw_ReadGroupConvData>
    9dbc:	4603      	mov	r3, r0
    9dbe:	f88d 3017 	strb.w	r3, [sp, #23]
    9dc2:	e002      	b.n	9dca <Adc_Ipw_ReadGroupNoInt+0x7e>
        }
#endif /* ADC_DMA_SUPPORTED */
    }
    else
    {
        ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    9dc4:	2301      	movs	r3, #1
    9dc6:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    return ReadGroupRet;
    9dca:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    9dce:	4618      	mov	r0, r3
    9dd0:	b007      	add	sp, #28
    9dd2:	f85d fb04 	ldr.w	pc, [sp], #4
    9dd6:	bf00      	nop
    9dd8:	1fff8d2c 	.word	0x1fff8d2c

00009ddc <Adc_Ipw_WriteDataBuffer>:

static inline void Adc_Ipw_WriteDataBuffer(const Adc_GroupType Group,
                                           Adc_ValueGroupType * DataPtr,
                                           uint8 CoreId)
{
    9ddc:	b088      	sub	sp, #32
    9dde:	4603      	mov	r3, r0
    9de0:	9100      	str	r1, [sp, #0]
    9de2:	f8ad 3006 	strh.w	r3, [sp, #6]
    9de6:	4613      	mov	r3, r2
    9de8:	f88d 3005 	strb.w	r3, [sp, #5]
    uint8 Index;
    uint16 ResultOffset;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9dec:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9df0:	4a3a      	ldr	r2, [pc, #232]	; (9edc <Adc_Ipw_WriteDataBuffer+0x100>)
    9df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9df6:	68da      	ldr	r2, [r3, #12]
    9df8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9dfc:	005b      	lsls	r3, r3, #1
    9dfe:	4413      	add	r3, r2
    9e00:	881b      	ldrh	r3, [r3, #0]
    9e02:	f8ad 3014 	strh.w	r3, [sp, #20]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    9e06:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9e0a:	4a34      	ldr	r2, [pc, #208]	; (9edc <Adc_Ipw_WriteDataBuffer+0x100>)
    9e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e10:	685a      	ldr	r2, [r3, #4]
    9e12:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    9e16:	2134      	movs	r1, #52	; 0x34
    9e18:	fb01 f303 	mul.w	r3, r1, r3
    9e1c:	4413      	add	r3, r2
    9e1e:	9304      	str	r3, [sp, #16]
    uint16 DmaBufferMask = Adc_Ipw_GetAdcDataMask(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[LogicalHwUnitId]->Resolution);
#endif /* ADC_DMA_SUPPORTED */
#if (ADC_SETCHANNEL_API == STD_ON)
    const Adc_ChannelIndexType ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    const Adc_ChannelIndexType ChannelCount = GroupPtr->AssignedChannelCount;
    9e20:	9b04      	ldr	r3, [sp, #16]
    9e22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    9e26:	f88d 300f 	strb.w	r3, [sp, #15]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    Adc_ValueGroupType * ResultPtr = NULL_PTR;
    9e2a:	2300      	movs	r3, #0
    9e2c:	9306      	str	r3, [sp, #24]
    Adc_StreamNumSampleType ResultIndex = 0U;
    9e2e:	2300      	movs	r3, #0
    9e30:	f8ad 3016 	strh.w	r3, [sp, #22]

    /* Get index of last completed sample */
    ResultIndex = Adc_axGroupStatus[Group].ResultIndex - (Adc_StreamNumSampleType)1U;
    9e34:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9e38:	4929      	ldr	r1, [pc, #164]	; (9ee0 <Adc_Ipw_WriteDataBuffer+0x104>)
    9e3a:	4613      	mov	r3, r2
    9e3c:	009b      	lsls	r3, r3, #2
    9e3e:	4413      	add	r3, r2
    9e40:	009b      	lsls	r3, r3, #2
    9e42:	440b      	add	r3, r1
    9e44:	3308      	adds	r3, #8
    9e46:	881b      	ldrh	r3, [r3, #0]
    9e48:	b29b      	uxth	r3, r3
    9e4a:	3b01      	subs	r3, #1
    9e4c:	f8ad 3016 	strh.w	r3, [sp, #22]
    if ((Adc_StreamNumSampleType)0U == Adc_axGroupStatus[Group].ResultIndex)
    9e50:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9e54:	4922      	ldr	r1, [pc, #136]	; (9ee0 <Adc_Ipw_WriteDataBuffer+0x104>)
    9e56:	4613      	mov	r3, r2
    9e58:	009b      	lsls	r3, r3, #2
    9e5a:	4413      	add	r3, r2
    9e5c:	009b      	lsls	r3, r3, #2
    9e5e:	440b      	add	r3, r1
    9e60:	3308      	adds	r3, #8
    9e62:	881b      	ldrh	r3, [r3, #0]
    9e64:	b29b      	uxth	r3, r3
    9e66:	2b00      	cmp	r3, #0
    9e68:	d104      	bne.n	9e74 <Adc_Ipw_WriteDataBuffer+0x98>
    {
        ResultIndex = GroupPtr->NumSamples - (Adc_StreamNumSampleType)1U;
    9e6a:	9b04      	ldr	r3, [sp, #16]
    9e6c:	8b9b      	ldrh	r3, [r3, #28]
    9e6e:	3b01      	subs	r3, #1
    9e70:	f8ad 3016 	strh.w	r3, [sp, #22]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    /* Get the result buffer pointer */
    if (FALSE == GroupPtr->StreamResultGroupMultiSets)
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
    {
        ResultPtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex]));
    9e74:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9e78:	4919      	ldr	r1, [pc, #100]	; (9ee0 <Adc_Ipw_WriteDataBuffer+0x104>)
    9e7a:	4613      	mov	r3, r2
    9e7c:	009b      	lsls	r3, r3, #2
    9e7e:	4413      	add	r3, r2
    9e80:	009b      	lsls	r3, r3, #2
    9e82:	440b      	add	r3, r1
    9e84:	330c      	adds	r3, #12
    9e86:	681a      	ldr	r2, [r3, #0]
    9e88:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    9e8c:	005b      	lsls	r3, r3, #1
    9e8e:	4413      	add	r3, r2
    9e90:	9306      	str	r3, [sp, #24]
        ResultOffset = GroupPtr->NumSamples;
    9e92:	9b04      	ldr	r3, [sp, #16]
    9e94:	8b9b      	ldrh	r3, [r3, #28]
    9e96:	f8ad 300c 	strh.w	r3, [sp, #12]

        /* Copy results of last conversion from streaming buffer to internal buffer */
        for (Index = 0U; Index < ChannelCount; Index++)
    9e9a:	2300      	movs	r3, #0
    9e9c:	f88d 301f 	strb.w	r3, [sp, #31]
    9ea0:	e012      	b.n	9ec8 <Adc_Ipw_WriteDataBuffer+0xec>
                DataPtr[Index] = (Adc_ValueGroupType)((*ResultPtr) & DmaBufferMask);
            }
            else
#endif /* ADC_DMA_SUPPORTED */
            {
                DataPtr[Index] = (*ResultPtr);
    9ea2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9ea6:	005b      	lsls	r3, r3, #1
    9ea8:	9a00      	ldr	r2, [sp, #0]
    9eaa:	4413      	add	r3, r2
    9eac:	9a06      	ldr	r2, [sp, #24]
    9eae:	8812      	ldrh	r2, [r2, #0]
    9eb0:	801a      	strh	r2, [r3, #0]
            }
            ResultPtr = &(ResultPtr[ResultOffset]);
    9eb2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9eb6:	005b      	lsls	r3, r3, #1
    9eb8:	9a06      	ldr	r2, [sp, #24]
    9eba:	4413      	add	r3, r2
    9ebc:	9306      	str	r3, [sp, #24]
        for (Index = 0U; Index < ChannelCount; Index++)
    9ebe:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9ec2:	3301      	adds	r3, #1
    9ec4:	f88d 301f 	strb.w	r3, [sp, #31]
    9ec8:	f89d 201f 	ldrb.w	r2, [sp, #31]
    9ecc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9ed0:	429a      	cmp	r2, r3
    9ed2:	d3e6      	bcc.n	9ea2 <Adc_Ipw_WriteDataBuffer+0xc6>
                DataPtr[Index] = ResultPtr[Index];
            }
        }
    }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
}
    9ed4:	bf00      	nop
    9ed6:	bf00      	nop
    9ed8:	b008      	add	sp, #32
    9eda:	4770      	bx	lr
    9edc:	1fff8d2c 	.word	0x1fff8d2c
    9ee0:	1fff8d30 	.word	0x1fff8d30

00009ee4 <Adc_Ipw_ConfigurePdbChannels>:
*/
static inline uint8 Adc_Ipw_ConfigurePdbChannels(Adc_HwUnitType Unit,
                                                 Adc_GroupType Group,
                                                 const Adc_GroupConfigurationType * GroupPtr,
                                                 uint8 NumChannel)
{
    9ee4:	b500      	push	{lr}
    9ee6:	b089      	sub	sp, #36	; 0x24
    9ee8:	9200      	str	r2, [sp, #0]
    9eea:	461a      	mov	r2, r3
    9eec:	4603      	mov	r3, r0
    9eee:	f88d 3007 	strb.w	r3, [sp, #7]
    9ef2:	460b      	mov	r3, r1
    9ef4:	f8ad 3004 	strh.w	r3, [sp, #4]
    9ef8:	4613      	mov	r3, r2
    9efa:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8 PdbIndex;
    uint8 PreTriggerCtr;
    uint8 ChUsed;
    uint8 LeftChannel = NumChannel;
    9efe:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9f02:	f88d 301d 	strb.w	r3, [sp, #29]
    uint8 PdbChannelUsed = (uint8)ADC_IPW_PDB_CHANNELS_USED(NumChannel);
    9f06:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9f0a:	f003 0307 	and.w	r3, r3, #7
    9f0e:	b2db      	uxtb	r3, r3
    9f10:	2b00      	cmp	r3, #0
    9f12:	d006      	beq.n	9f22 <Adc_Ipw_ConfigurePdbChannels+0x3e>
    9f14:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9f18:	08db      	lsrs	r3, r3, #3
    9f1a:	b2db      	uxtb	r3, r3
    9f1c:	3301      	adds	r3, #1
    9f1e:	b2db      	uxtb	r3, r3
    9f20:	e003      	b.n	9f2a <Adc_Ipw_ConfigurePdbChannels+0x46>
    9f22:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9f26:	08db      	lsrs	r3, r3, #3
    9f28:	b2db      	uxtb	r3, r3
    9f2a:	f88d 3019 	strb.w	r3, [sp, #25]
    uint16 PdbDelay;
    uint16 CurrentCh = Adc_axGroupStatus[Group].CurrentChannel;
    9f2e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9f32:	4987      	ldr	r1, [pc, #540]	; (a150 <Adc_Ipw_ConfigurePdbChannels+0x26c>)
    9f34:	4613      	mov	r3, r2
    9f36:	009b      	lsls	r3, r3, #2
    9f38:	4413      	add	r3, r2
    9f3a:	009b      	lsls	r3, r3, #2
    9f3c:	440b      	add	r3, r1
    9f3e:	3310      	adds	r3, #16
    9f40:	781b      	ldrb	r3, [r3, #0]
    9f42:	f8ad 301a 	strh.w	r3, [sp, #26]
    Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    9f46:	4b83      	ldr	r3, [pc, #524]	; (a154 <Adc_Ipw_ConfigurePdbChannels+0x270>)
    9f48:	681b      	ldr	r3, [r3, #0]
    9f4a:	681a      	ldr	r2, [r3, #0]
    9f4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9f50:	4413      	add	r3, r2
    9f52:	7c1b      	ldrb	r3, [r3, #16]
    9f54:	f88d 3018 	strb.w	r3, [sp, #24]
    uint32 TempMask = Adc_axRuntimeGroupChannel[Group].RuntimeChanMask;
    /* Get delay configuration of each pre-trigger at runtime */
    const uint16 * GroupDelay = Adc_axRuntimeGroupChannel[Group].DelaysPtr;
#else
    /* Follow user configuration */
    const uint16 * GroupDelay = GroupPtr->AdcIpwGroupConfigPtr->DelayPtr;
    9f58:	9b00      	ldr	r3, [sp, #0]
    9f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9f5c:	691b      	ldr	r3, [r3, #16]
    9f5e:	9305      	str	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Configure PDB channels */
    for (PdbIndex = 0U; PdbIndex < PdbChannelUsed; PdbIndex++)
    9f60:	2300      	movs	r3, #0
    9f62:	f88d 301f 	strb.w	r3, [sp, #31]
    9f66:	e0e6      	b.n	a136 <Adc_Ipw_ConfigurePdbChannels+0x252>
    {
        /* Get channels used depending on number of pre-triggers per PDB channel */
        ChUsed = ADC_IPW_NUM_CHANNELS_USED(LeftChannel);
    9f68:	f89d 301d 	ldrb.w	r3, [sp, #29]
    9f6c:	08db      	lsrs	r3, r3, #3
    9f6e:	b2db      	uxtb	r3, r3
    9f70:	2b00      	cmp	r3, #0
    9f72:	d102      	bne.n	9f7a <Adc_Ipw_ConfigurePdbChannels+0x96>
    9f74:	f89d 301d 	ldrb.w	r3, [sp, #29]
    9f78:	e000      	b.n	9f7c <Adc_Ipw_ConfigurePdbChannels+0x98>
    9f7a:	2308      	movs	r3, #8
    9f7c:	f88d 3013 	strb.w	r3, [sp, #19]

        /* If group channel delay, not bypass mode */
        if ((TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableChannelDelays)
    9f80:	9b00      	ldr	r3, [sp, #0]
    9f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9f84:	7bdb      	ldrb	r3, [r3, #15]
    9f86:	2b00      	cmp	r3, #0
    9f88:	d05e      	beq.n	a048 <Adc_Ipw_ConfigurePdbChannels+0x164>
                && (GroupDelay != NULL_PTR)
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
           )
        {
            /* If Back to Back mode is disabled, enable and configure delays for all channels */
            if (FALSE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    9f8a:	9b00      	ldr	r3, [sp, #0]
    9f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9f8e:	7b9b      	ldrb	r3, [r3, #14]
    9f90:	f083 0301 	eor.w	r3, r3, #1
    9f94:	b2db      	uxtb	r3, r3
    9f96:	2b00      	cmp	r3, #0
    9f98:	d02a      	beq.n	9ff0 <Adc_Ipw_ConfigurePdbChannels+0x10c>
            {
                PdbPretriggsConfig.EnableDelayMask = (uint8)ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
    9f9a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9f9e:	f1c3 0308 	rsb	r3, r3, #8
    9fa2:	22ff      	movs	r2, #255	; 0xff
    9fa4:	fa22 f303 	lsr.w	r3, r2, r3
    9fa8:	b2db      	uxtb	r3, r3
    9faa:	f88d 300d 	strb.w	r3, [sp, #13]
                for (PreTriggerCtr = 0U; PreTriggerCtr < ChUsed; PreTriggerCtr++)
    9fae:	2300      	movs	r3, #0
    9fb0:	f88d 301e 	strb.w	r3, [sp, #30]
    9fb4:	e015      	b.n	9fe2 <Adc_Ipw_ConfigurePdbChannels+0xfe>
                {
#if (ADC_SETCHANNEL_API == STD_ON)
                    if ((uint32)1U == (TempMask & (uint32)1U))
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
                    {
                        Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, PreTriggerCtr, GroupDelay[CurrentCh + PreTriggerCtr]);
    9fb6:	f89d 0018 	ldrb.w	r0, [sp, #24]
    9fba:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    9fbe:	f89d 301e 	ldrb.w	r3, [sp, #30]
    9fc2:	4413      	add	r3, r2
    9fc4:	005b      	lsls	r3, r3, #1
    9fc6:	9a05      	ldr	r2, [sp, #20]
    9fc8:	4413      	add	r3, r2
    9fca:	881b      	ldrh	r3, [r3, #0]
    9fcc:	f89d 201e 	ldrb.w	r2, [sp, #30]
    9fd0:	f89d 101f 	ldrb.w	r1, [sp, #31]
    9fd4:	f001 fd16 	bl	ba04 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
                for (PreTriggerCtr = 0U; PreTriggerCtr < ChUsed; PreTriggerCtr++)
    9fd8:	f89d 301e 	ldrb.w	r3, [sp, #30]
    9fdc:	3301      	adds	r3, #1
    9fde:	f88d 301e 	strb.w	r3, [sp, #30]
    9fe2:	f89d 201e 	ldrb.w	r2, [sp, #30]
    9fe6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9fea:	429a      	cmp	r2, r3
    9fec:	d3e3      	bcc.n	9fb6 <Adc_Ipw_ConfigurePdbChannels+0xd2>
    9fee:	e051      	b.n	a094 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
                }
            }
            else
            {
                /* Beginning part (8 ADC channels) of group will be configured in PDB channel 0 */
                if (0U == PdbIndex)
    9ff0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9ff4:	2b00      	cmp	r3, #0
    9ff6:	d110      	bne.n	a01a <Adc_Ipw_ConfigurePdbChannels+0x136>
                {
                    PdbPretriggsConfig.EnableDelayMask = 1U;
    9ff8:	2301      	movs	r3, #1
    9ffa:	f88d 300d 	strb.w	r3, [sp, #13]
                    /* First pre-trigger need to be configured as delay, others will be in back to back mode */
                    PdbDelay = GroupDelay[0U];
    9ffe:	9b05      	ldr	r3, [sp, #20]
    a000:	881b      	ldrh	r3, [r3, #0]
    a002:	f8ad 3010 	strh.w	r3, [sp, #16]
                    Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    a006:	f89d 0018 	ldrb.w	r0, [sp, #24]
    a00a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    a00e:	f89d 101f 	ldrb.w	r1, [sp, #31]
    a012:	2200      	movs	r2, #0
    a014:	f001 fcf6 	bl	ba04 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    a018:	e03c      	b.n	a094 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
                    if (FALSE == Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->PdbConfig[LogicalHwUnitId]->InterChannelBackToBackEnable)
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                    {
                        /* The other parts will be configured in following PDB channels */
                        PdbPretriggsConfig.EnableDelayMask = 1U;
    a01a:	2301      	movs	r3, #1
    a01c:	f88d 300d 	strb.w	r3, [sp, #13]
                        PdbDelay = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*PdbIndex;
    a020:	9b00      	ldr	r3, [sp, #0]
    a022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a024:	899a      	ldrh	r2, [r3, #12]
    a026:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a02a:	b29b      	uxth	r3, r3
    a02c:	fb12 f303 	smulbb	r3, r2, r3
    a030:	f8ad 3010 	strh.w	r3, [sp, #16]
                        Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    a034:	f89d 0018 	ldrb.w	r0, [sp, #24]
    a038:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    a03c:	f89d 101f 	ldrb.w	r1, [sp, #31]
    a040:	2200      	movs	r2, #0
    a042:	f001 fcdf 	bl	ba04 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    a046:	e025      	b.n	a094 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
                }
            }
        }
        else    /* Back-to-back mode only */
        {
            if (0U == PdbIndex)
    a048:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a04c:	2b00      	cmp	r3, #0
    a04e:	d10b      	bne.n	a068 <Adc_Ipw_ConfigurePdbChannels+0x184>
            {
                /* Configure the delay for the second PDB in case of only back to back used */
                /* The first PDB channel, pre-trigger 0 also need to use channel delay (TOS bit = 1) in order to work with continuous PDB mode */
                PdbPretriggsConfig.EnableDelayMask = 1U;
    a050:	2301      	movs	r3, #1
    a052:	f88d 300d 	strb.w	r3, [sp, #13]
                Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, 0U);
    a056:	f89d 0018 	ldrb.w	r0, [sp, #24]
    a05a:	f89d 101f 	ldrb.w	r1, [sp, #31]
    a05e:	2300      	movs	r3, #0
    a060:	2200      	movs	r2, #0
    a062:	f001 fccf 	bl	ba04 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    a066:	e015      	b.n	a094 <Adc_Ipw_ConfigurePdbChannels+0x1b0>
            {
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
                if (FALSE == Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->PdbConfig[LogicalHwUnitId]->InterChannelBackToBackEnable)
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                {
                    PdbPretriggsConfig.EnableDelayMask = 1U;
    a068:	2301      	movs	r3, #1
    a06a:	f88d 300d 	strb.w	r3, [sp, #13]
                    PdbDelay = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*PdbIndex;
    a06e:	9b00      	ldr	r3, [sp, #0]
    a070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a072:	899a      	ldrh	r2, [r3, #12]
    a074:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a078:	b29b      	uxth	r3, r3
    a07a:	fb12 f303 	smulbb	r3, r2, r3
    a07e:	f8ad 3010 	strh.w	r3, [sp, #16]
                    Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    a082:	f89d 0018 	ldrb.w	r0, [sp, #24]
    a086:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    a08a:	f89d 101f 	ldrb.w	r1, [sp, #31]
    a08e:	2200      	movs	r2, #0
    a090:	f001 fcb8 	bl	ba04 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
                }
            }
        }

        Pdb_Adc_Ip_LoadRegValues(PhysicalHwUnitId);
    a094:	f89d 3018 	ldrb.w	r3, [sp, #24]
    a098:	4618      	mov	r0, r3
    a09a:	f001 fb87 	bl	b7ac <Pdb_Adc_Ip_LoadRegValues>

        /* Update status channel for configuring PDB channel in next loop */
        LeftChannel -= ChUsed;
    a09e:	f89d 201d 	ldrb.w	r2, [sp, #29]
    a0a2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a0a6:	1ad3      	subs	r3, r2, r3
    a0a8:	f88d 301d 	strb.w	r3, [sp, #29]
        CurrentCh += ChUsed;
    a0ac:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a0b0:	b29a      	uxth	r2, r3
    a0b2:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    a0b6:	4413      	add	r3, r2
    a0b8:	f8ad 301a 	strh.w	r3, [sp, #26]

        /* Use back to back mode for all channels but using delay in pre-trigger 0 */
        if (TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    a0bc:	9b00      	ldr	r3, [sp, #0]
    a0be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a0c0:	7b9b      	ldrb	r3, [r3, #14]
    a0c2:	2b00      	cmp	r3, #0
    a0c4:	d01d      	beq.n	a102 <Adc_Ipw_ConfigurePdbChannels+0x21e>
        {
            if (0U == PdbIndex)
    a0c6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a0ca:	2b00      	cmp	r3, #0
    a0cc:	d10c      	bne.n	a0e8 <Adc_Ipw_ConfigurePdbChannels+0x204>
            {
                PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed) - 1U;
    a0ce:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a0d2:	f1c3 0308 	rsb	r3, r3, #8
    a0d6:	22ff      	movs	r2, #255	; 0xff
    a0d8:	fa22 f303 	lsr.w	r3, r2, r3
    a0dc:	b2db      	uxtb	r3, r3
    a0de:	3b01      	subs	r3, #1
    a0e0:	b2db      	uxtb	r3, r3
    a0e2:	f88d 300e 	strb.w	r3, [sp, #14]
    a0e6:	e00f      	b.n	a108 <Adc_Ipw_ConfigurePdbChannels+0x224>
                    PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
                }
                else
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                {
                    PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed) - 1U;
    a0e8:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a0ec:	f1c3 0308 	rsb	r3, r3, #8
    a0f0:	22ff      	movs	r2, #255	; 0xff
    a0f2:	fa22 f303 	lsr.w	r3, r2, r3
    a0f6:	b2db      	uxtb	r3, r3
    a0f8:	3b01      	subs	r3, #1
    a0fa:	b2db      	uxtb	r3, r3
    a0fc:	f88d 300e 	strb.w	r3, [sp, #14]
    a100:	e002      	b.n	a108 <Adc_Ipw_ConfigurePdbChannels+0x224>
                }
            }
        }
        else
        {
            PdbPretriggsConfig.BackToBackEnableMask = 0u;
    a102:	2300      	movs	r3, #0
    a104:	f88d 300e 	strb.w	r3, [sp, #14]
        }
        PdbPretriggsConfig.EnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
    a108:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a10c:	f1c3 0308 	rsb	r3, r3, #8
    a110:	22ff      	movs	r2, #255	; 0xff
    a112:	fa22 f303 	lsr.w	r3, r2, r3
    a116:	b2db      	uxtb	r3, r3
    a118:	f88d 300c 	strb.w	r3, [sp, #12]
        /* Update configuration to CHnC1 register for pre-trigger */
        Pdb_Adc_Ip_ConfigAdcPretriggers(PhysicalHwUnitId, PdbIndex, &PdbPretriggsConfig);
    a11c:	f89d 3018 	ldrb.w	r3, [sp, #24]
    a120:	aa03      	add	r2, sp, #12
    a122:	f89d 101f 	ldrb.w	r1, [sp, #31]
    a126:	4618      	mov	r0, r3
    a128:	f001 fb7c 	bl	b824 <Pdb_Adc_Ip_ConfigAdcPretriggers>
    for (PdbIndex = 0U; PdbIndex < PdbChannelUsed; PdbIndex++)
    a12c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a130:	3301      	adds	r3, #1
    a132:	f88d 301f 	strb.w	r3, [sp, #31]
    a136:	f89d 201f 	ldrb.w	r2, [sp, #31]
    a13a:	f89d 3019 	ldrb.w	r3, [sp, #25]
    a13e:	429a      	cmp	r2, r3
    a140:	f4ff af12 	bcc.w	9f68 <Adc_Ipw_ConfigurePdbChannels+0x84>
    }
    return PdbIndex;
    a144:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    a148:	4618      	mov	r0, r3
    a14a:	b009      	add	sp, #36	; 0x24
    a14c:	f85d fb04 	ldr.w	pc, [sp], #4
    a150:	1fff8d30 	.word	0x1fff8d30
    a154:	1fff8d2c 	.word	0x1fff8d2c

0000a158 <Adc_Ipw_ConfigurePdbConversion>:
static inline void Adc_Ipw_ConfigurePdbConversion(Adc_HwUnitType Unit,
                                                    Adc_GroupType Group,
                                                    const Adc_GroupConfigurationType * GroupPtr,
                                                    Adc_HwTriggerTimerType Trigger,
                                                    uint8 NumChannel)
{
    a158:	b500      	push	{lr}
    a15a:	b089      	sub	sp, #36	; 0x24
    a15c:	9202      	str	r2, [sp, #8]
    a15e:	9301      	str	r3, [sp, #4]
    a160:	4603      	mov	r3, r0
    a162:	f88d 300f 	strb.w	r3, [sp, #15]
    a166:	460b      	mov	r3, r1
    a168:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint8 PdbIndex;
    uint8 PdbChannelUsed;
    uint16 PdbPeriod = 0U;
    a16c:	2300      	movs	r3, #0
    a16e:	f8ad 301c 	strh.w	r3, [sp, #28]
    Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    a172:	4b62      	ldr	r3, [pc, #392]	; (a2fc <Adc_Ipw_ConfigurePdbConversion+0x1a4>)
    a174:	681b      	ldr	r3, [r3, #0]
    a176:	681a      	ldr	r2, [r3, #0]
    a178:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a17c:	4413      	add	r3, r2
    a17e:	7c1b      	ldrb	r3, [r3, #16]
    a180:	f88d 301b 	strb.w	r3, [sp, #27]
    /* Get delay configuration of each pre-trigger */
    /* At runtime */
    const uint16 * GroupDelay = Adc_axRuntimeGroupChannel[Group].DelaysPtr;
#else
    /* Follow user configuration */
    const uint16 * GroupDelay = GroupPtr->AdcIpwGroupConfigPtr->DelayPtr;
    a184:	9b02      	ldr	r3, [sp, #8]
    a186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a188:	691b      	ldr	r3, [r3, #16]
    a18a:	9305      	str	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Calculate number of PDB channels depending on the ADC channels used */
    /* Note that 1 PDB channel triggers to 8 ADC channels */
    PdbChannelUsed = (uint8)ADC_IPW_PDB_CHANNELS_USED(NumChannel);
    a18c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    a190:	f003 0307 	and.w	r3, r3, #7
    a194:	b2db      	uxtb	r3, r3
    a196:	2b00      	cmp	r3, #0
    a198:	d006      	beq.n	a1a8 <Adc_Ipw_ConfigurePdbConversion+0x50>
    a19a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    a19e:	08db      	lsrs	r3, r3, #3
    a1a0:	b2db      	uxtb	r3, r3
    a1a2:	3301      	adds	r3, #1
    a1a4:	b2db      	uxtb	r3, r3
    a1a6:	e003      	b.n	a1b0 <Adc_Ipw_ConfigurePdbConversion+0x58>
    a1a8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    a1ac:	08db      	lsrs	r3, r3, #3
    a1ae:	b2db      	uxtb	r3, r3
    a1b0:	f88d 3013 	strb.w	r3, [sp, #19]
    /* Select the input trigger source for PDB */
    Pdb_Adc_Ip_Enable(PhysicalHwUnitId);
    a1b4:	f89d 301b 	ldrb.w	r3, [sp, #27]
    a1b8:	4618      	mov	r0, r3
    a1ba:	f001 fa61 	bl	b680 <Pdb_Adc_Ip_Enable>
    Pdb_Adc_Ip_SetTriggerInput(PhysicalHwUnitId, Trigger);
    a1be:	f89d 301b 	ldrb.w	r3, [sp, #27]
    a1c2:	9901      	ldr	r1, [sp, #4]
    a1c4:	4618      	mov	r0, r3
    a1c6:	f001 fa89 	bl	b6dc <Pdb_Adc_Ip_SetTriggerInput>

    PdbIndex = Adc_Ipw_ConfigurePdbChannels(Unit, Group, GroupPtr, NumChannel);
    a1ca:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    a1ce:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a1d2:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a1d6:	9a02      	ldr	r2, [sp, #8]
    a1d8:	f7ff fe84 	bl	9ee4 <Adc_Ipw_ConfigurePdbChannels>
    a1dc:	4603      	mov	r3, r0
    a1de:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    else
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */
    {
        /* If group channel delay, not bypass mode */
        if (TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableChannelDelays)
    a1e2:	9b02      	ldr	r3, [sp, #8]
    a1e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a1e6:	7bdb      	ldrb	r3, [r3, #15]
    a1e8:	2b00      	cmp	r3, #0
    a1ea:	d02f      	beq.n	a24c <Adc_Ipw_ConfigurePdbConversion+0xf4>
        {
            if (FALSE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    a1ec:	9b02      	ldr	r3, [sp, #8]
    a1ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a1f0:	7b9b      	ldrb	r3, [r3, #14]
    a1f2:	f083 0301 	eor.w	r3, r3, #1
    a1f6:	b2db      	uxtb	r3, r3
    a1f8:	2b00      	cmp	r3, #0
    a1fa:	d017      	beq.n	a22c <Adc_Ipw_ConfigurePdbConversion+0xd4>
            {
                /* If delay mode for all pre-triggers, PDB period equals to value of last pre-trigger delay (i.e longest delay) */
                PdbPeriod = GroupDelay[(Adc_axGroupStatus[Group].CurrentChannel + NumChannel) - 1U];
    a1fc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a200:	493f      	ldr	r1, [pc, #252]	; (a300 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    a202:	4613      	mov	r3, r2
    a204:	009b      	lsls	r3, r3, #2
    a206:	4413      	add	r3, r2
    a208:	009b      	lsls	r3, r3, #2
    a20a:	440b      	add	r3, r1
    a20c:	3310      	adds	r3, #16
    a20e:	781b      	ldrb	r3, [r3, #0]
    a210:	461a      	mov	r2, r3
    a212:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    a216:	4413      	add	r3, r2
    a218:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    a21c:	3b01      	subs	r3, #1
    a21e:	005b      	lsls	r3, r3, #1
    a220:	9a05      	ldr	r2, [sp, #20]
    a222:	4413      	add	r3, r2
    a224:	881b      	ldrh	r3, [r3, #0]
    a226:	f8ad 301c 	strh.w	r3, [sp, #28]
    a22a:	e01a      	b.n	a262 <Adc_Ipw_ConfigurePdbConversion+0x10a>
            }
            else
            {
                /* Period will be calculated depending on user configuration in back to back mode */
                PdbPeriod = GroupDelay[0U] + (uint16)((GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*((uint16)PdbChannelUsed - 1U));
    a22c:	9b05      	ldr	r3, [sp, #20]
    a22e:	881a      	ldrh	r2, [r3, #0]
    a230:	9b02      	ldr	r3, [sp, #8]
    a232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a234:	8999      	ldrh	r1, [r3, #12]
    a236:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a23a:	3b01      	subs	r3, #1
    a23c:	b29b      	uxth	r3, r3
    a23e:	fb11 f303 	smulbb	r3, r1, r3
    a242:	b29b      	uxth	r3, r3
    a244:	4413      	add	r3, r2
    a246:	f8ad 301c 	strh.w	r3, [sp, #28]
    a24a:	e00a      	b.n	a262 <Adc_Ipw_ConfigurePdbConversion+0x10a>
            }
        }
        else
        {
            /* All pre-trigger configured as user PdbDelay */
            PdbPeriod = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*((uint16)PdbChannelUsed - 1U);
    a24c:	9b02      	ldr	r3, [sp, #8]
    a24e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a250:	899a      	ldrh	r2, [r3, #12]
    a252:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a256:	3b01      	subs	r3, #1
    a258:	b29b      	uxth	r3, r3
    a25a:	fb12 f303 	smulbb	r3, r2, r3
    a25e:	f8ad 301c 	strh.w	r3, [sp, #28]
        }
    }

    /* Configure the period of counter */
    Pdb_Adc_Ip_SetModulus(PhysicalHwUnitId, PdbPeriod);
    a262:	f89d 301b 	ldrb.w	r3, [sp, #27]
    a266:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    a26a:	4611      	mov	r1, r2
    a26c:	4618      	mov	r0, r3
    a26e:	f001 fab5 	bl	b7dc <Pdb_Adc_Ip_SetModulus>

    /* Load the configuration */
    Pdb_Adc_Ip_LoadRegValues(PhysicalHwUnitId);
    a272:	f89d 301b 	ldrb.w	r3, [sp, #27]
    a276:	4618      	mov	r0, r3
    a278:	f001 fa98 	bl	b7ac <Pdb_Adc_Ip_LoadRegValues>

    PdbPretriggsConfig.EnableMask = 0u;
    a27c:	2300      	movs	r3, #0
    a27e:	f88d 3010 	strb.w	r3, [sp, #16]
    PdbPretriggsConfig.EnableDelayMask = 0u;
    a282:	2300      	movs	r3, #0
    a284:	f88d 3011 	strb.w	r3, [sp, #17]
    PdbPretriggsConfig.BackToBackEnableMask = 0u;
    a288:	2300      	movs	r3, #0
    a28a:	f88d 3012 	strb.w	r3, [sp, #18]

    /* Disable others PDB channels to avoid errors when PDB trigger the disabled channels */
    for (; PdbIndex < PDB_CH_COUNT; PdbIndex++)
    a28e:	e00c      	b.n	a2aa <Adc_Ipw_ConfigurePdbConversion+0x152>
    {
        Pdb_Adc_Ip_ConfigAdcPretriggers(PhysicalHwUnitId, PdbIndex, &PdbPretriggsConfig);
    a290:	f89d 301b 	ldrb.w	r3, [sp, #27]
    a294:	aa04      	add	r2, sp, #16
    a296:	f89d 101f 	ldrb.w	r1, [sp, #31]
    a29a:	4618      	mov	r0, r3
    a29c:	f001 fac2 	bl	b824 <Pdb_Adc_Ip_ConfigAdcPretriggers>
    for (; PdbIndex < PDB_CH_COUNT; PdbIndex++)
    a2a0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a2a4:	3301      	adds	r3, #1
    a2a6:	f88d 301f 	strb.w	r3, [sp, #31]
    a2aa:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a2ae:	2b01      	cmp	r3, #1
    a2b0:	d9ee      	bls.n	a290 <Adc_Ipw_ConfigurePdbConversion+0x138>
    }

    /* Update current channel */
    Adc_axGroupStatus[Group].CurrentChannel += NumChannel;
    a2b2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a2b6:	4912      	ldr	r1, [pc, #72]	; (a300 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    a2b8:	4613      	mov	r3, r2
    a2ba:	009b      	lsls	r3, r3, #2
    a2bc:	4413      	add	r3, r2
    a2be:	009b      	lsls	r3, r3, #2
    a2c0:	440b      	add	r3, r1
    a2c2:	3310      	adds	r3, #16
    a2c4:	7819      	ldrb	r1, [r3, #0]
    a2c6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a2ca:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    a2ce:	440b      	add	r3, r1
    a2d0:	b2d8      	uxtb	r0, r3
    a2d2:	490b      	ldr	r1, [pc, #44]	; (a300 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    a2d4:	4613      	mov	r3, r2
    a2d6:	009b      	lsls	r3, r3, #2
    a2d8:	4413      	add	r3, r2
    a2da:	009b      	lsls	r3, r3, #2
    a2dc:	440b      	add	r3, r1
    a2de:	3310      	adds	r3, #16
    a2e0:	4602      	mov	r2, r0
    a2e2:	701a      	strb	r2, [r3, #0]

    /* SWS_Adc_00356, SWS_Adc_00357 */
    /* Start software trigger */
    /* If trigger is not software trigger, hardware trigger or external trigger will be used */
    if (PDB_ADC_IP_SOFTWARE_TRIGGER == Trigger)
    a2e4:	9b01      	ldr	r3, [sp, #4]
    a2e6:	2b0f      	cmp	r3, #15
    a2e8:	d104      	bne.n	a2f4 <Adc_Ipw_ConfigurePdbConversion+0x19c>
            /* PDB operation in Continuous mode for software */
            Pdb_Adc_Ip_SetContinuousMode(PhysicalHwUnitId, TRUE);
        }
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */

        Pdb_Adc_Ip_SwTrigger(PhysicalHwUnitId);
    a2ea:	f89d 301b 	ldrb.w	r3, [sp, #27]
    a2ee:	4618      	mov	r0, r3
    a2f0:	f001 fa34 	bl	b75c <Pdb_Adc_Ip_SwTrigger>
    }
#if (ADC_SETCHANNEL_API == STD_OFF)
    /* Avoid compiler warning */
    (void)Group;
#endif /* (ADC_SETCHANNEL_API == STD_OFF) */
}
    a2f4:	bf00      	nop
    a2f6:	b009      	add	sp, #36	; 0x24
    a2f8:	f85d fb04 	ldr.w	pc, [sp], #4
    a2fc:	1fff8d2c 	.word	0x1fff8d2c
    a300:	1fff8d30 	.word	0x1fff8d30

0000a304 <Adc_Ipw_StopConversionCheckTimeout>:
*
*/
static inline Std_ReturnType Adc_Ipw_StopConversionCheckTimeout(Adc_HwUnitType Unit,
                                                                Adc_GroupType Group,
                                                                uint8 CoreId)
{
    a304:	b500      	push	{lr}
    a306:	b087      	sub	sp, #28
    a308:	4603      	mov	r3, r0
    a30a:	f88d 3007 	strb.w	r3, [sp, #7]
    a30e:	460b      	mov	r3, r1
    a310:	f8ad 3004 	strh.w	r3, [sp, #4]
    a314:	4613      	mov	r3, r2
    a316:	f88d 3006 	strb.w	r3, [sp, #6]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a31a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a31e:	4a36      	ldr	r2, [pc, #216]	; (a3f8 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    a320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a324:	68da      	ldr	r2, [r3, #12]
    a326:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    a32a:	005b      	lsls	r3, r3, #1
    a32c:	4413      	add	r3, r2
    a32e:	881b      	ldrh	r3, [r3, #0]
    a330:	f8ad 3014 	strh.w	r3, [sp, #20]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    a334:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a338:	4a2f      	ldr	r2, [pc, #188]	; (a3f8 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    a33a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a33e:	681a      	ldr	r2, [r3, #0]
    a340:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a344:	4413      	add	r3, r2
    a346:	7c1b      	ldrb	r3, [r3, #16]
    a348:	f88d 3013 	strb.w	r3, [sp, #19]
    Std_ReturnType Status = E_OK;
    a34c:	2300      	movs	r3, #0
    a34e:	f88d 3017 	strb.w	r3, [sp, #23]
    Adc_Ip_StatusType AdcIpStatus;
    uint8 ChIndex;

    /* Stop PDB hardware trigger unit */
    Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
    a352:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a356:	4618      	mov	r0, r3
    a358:	f001 fb7e 	bl	ba58 <Pdb_Adc_Ip_DisableAndClearPdb>

    /* Check if ADC is in continuous mode */
    if (((uint8)STD_ON == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcWithoutInterrupt) && (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode))
    a35c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a360:	4a25      	ldr	r2, [pc, #148]	; (a3f8 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    a362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a366:	685a      	ldr	r2, [r3, #4]
    a368:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    a36c:	2134      	movs	r1, #52	; 0x34
    a36e:	fb01 f303 	mul.w	r3, r1, r3
    a372:	4413      	add	r3, r2
    a374:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    a378:	2b01      	cmp	r3, #1
    a37a:	d114      	bne.n	a3a6 <Adc_Ipw_StopConversionCheckTimeout+0xa2>
    a37c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a380:	4a1d      	ldr	r2, [pc, #116]	; (a3f8 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    a382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a386:	685a      	ldr	r2, [r3, #4]
    a388:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    a38c:	2134      	movs	r1, #52	; 0x34
    a38e:	fb01 f303 	mul.w	r3, r1, r3
    a392:	4413      	add	r3, r2
    a394:	689b      	ldr	r3, [r3, #8]
    a396:	2b01      	cmp	r3, #1
    a398:	d105      	bne.n	a3a6 <Adc_Ipw_StopConversionCheckTimeout+0xa2>
    {
        /* Set to Oneshot mode */
        Adc_Ip_SetContinuousMode(PhysicalHwUnitId, FALSE);
    a39a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a39e:	2100      	movs	r1, #0
    a3a0:	4618      	mov	r0, r3
    a3a2:	f7ff f827 	bl	93f4 <Adc_Ip_SetContinuousMode>
    }

    /* Disable all channels */
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    a3a6:	2300      	movs	r3, #0
    a3a8:	f88d 3016 	strb.w	r3, [sp, #22]
    a3ac:	e013      	b.n	a3d6 <Adc_Ipw_StopConversionCheckTimeout+0xd2>
    {
        /* Stop conversion in SC1n register and wait until conversion is aborted. */
        /* Because some channels in chain are not converted yet */
        AdcIpStatus = Adc_Ip_SetDisabledChannel(PhysicalHwUnitId, ChIndex, TRUE);
    a3ae:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a3b2:	f89d 1016 	ldrb.w	r1, [sp, #22]
    a3b6:	2201      	movs	r2, #1
    a3b8:	4618      	mov	r0, r3
    a3ba:	f7ff f8cd 	bl	9558 <Adc_Ip_SetDisabledChannel>
    a3be:	9003      	str	r0, [sp, #12]
        if (AdcIpStatus == ADC_IP_STATUS_TIMEOUT)
    a3c0:	9b03      	ldr	r3, [sp, #12]
    a3c2:	2b02      	cmp	r3, #2
    a3c4:	d102      	bne.n	a3cc <Adc_Ipw_StopConversionCheckTimeout+0xc8>
        {
            Status = E_NOT_OK;
    a3c6:	2301      	movs	r3, #1
    a3c8:	f88d 3017 	strb.w	r3, [sp, #23]
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    a3cc:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a3d0:	3301      	adds	r3, #1
    a3d2:	f88d 3016 	strb.w	r3, [sp, #22]
    a3d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a3da:	4a08      	ldr	r2, [pc, #32]	; (a3fc <Adc_Ipw_StopConversionCheckTimeout+0xf8>)
    a3dc:	00db      	lsls	r3, r3, #3
    a3de:	4413      	add	r3, r2
    a3e0:	799b      	ldrb	r3, [r3, #6]
    a3e2:	f89d 2016 	ldrb.w	r2, [sp, #22]
    a3e6:	429a      	cmp	r2, r3
    a3e8:	d3e1      	bcc.n	a3ae <Adc_Ipw_StopConversionCheckTimeout+0xaa>
        }
    }
    return Status;
    a3ea:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    a3ee:	4618      	mov	r0, r3
    a3f0:	b007      	add	sp, #28
    a3f2:	f85d fb04 	ldr.w	pc, [sp], #4
    a3f6:	bf00      	nop
    a3f8:	1fff8d2c 	.word	0x1fff8d2c
    a3fc:	1fff8d58 	.word	0x1fff8d58

0000a400 <Adc_Ipw_PrepareGroupStart>:
* @return         void
*/
static inline void Adc_Ipw_PrepareGroupStart(Adc_HwUnitType Unit,
                                             const Adc_GroupConfigurationType * GroupPtr,
                                             uint8 CoreId)
{
    a400:	b500      	push	{lr}
    a402:	b085      	sub	sp, #20
    a404:	4603      	mov	r3, r0
    a406:	9100      	str	r1, [sp, #0]
    a408:	f88d 3007 	strb.w	r3, [sp, #7]
    a40c:	4613      	mov	r3, r2
    a40e:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_ConversionTimeType ConvTime;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    a412:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a416:	4a14      	ldr	r2, [pc, #80]	; (a468 <Adc_Ipw_PrepareGroupStart+0x68>)
    a418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a41c:	681a      	ldr	r2, [r3, #0]
    a41e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a422:	4413      	add	r3, r2
    a424:	7c1b      	ldrb	r3, [r3, #16]
    a426:	f88d 300f 	strb.w	r3, [sp, #15]
            Adc_Ip_SetAveraging(PhysicalHwUnitId, TRUE, GroupPtr->AdcIpwGroupConfigPtr->GroupAvgSelectAlternate);
        }
    }
#else /* (ADC_DUAL_CLOCK_MODE == STD_OFF) */
    {
        if ((uint8)STD_ON == GroupPtr->AdcIpwGroupConfigPtr->GroupAvgEnable)
    a42a:	9b00      	ldr	r3, [sp, #0]
    a42c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a42e:	781b      	ldrb	r3, [r3, #0]
    a430:	2b01      	cmp	r3, #1
    a432:	d108      	bne.n	a446 <Adc_Ipw_PrepareGroupStart+0x46>
        {
            Adc_Ip_SetAveraging(PhysicalHwUnitId, TRUE, GroupPtr->AdcIpwGroupConfigPtr->GroupAvgSelect);
    a434:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a438:	9b00      	ldr	r3, [sp, #0]
    a43a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a43c:	685b      	ldr	r3, [r3, #4]
    a43e:	461a      	mov	r2, r3
    a440:	2101      	movs	r1, #1
    a442:	f7fe ff51 	bl	92e8 <Adc_Ip_SetAveraging>
    else
    {
        ConvTime = GroupPtr->AdcIpwGroupConfigPtr->AlternateConvTime;
    }
#else /* (ADC_DUAL_CLOCK_MODE == STD_OFF) */
    ConvTime = GroupPtr->AdcIpwGroupConfigPtr->ConvTime;
    a446:	9b00      	ldr	r3, [sp, #0]
    a448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    a44a:	7a1b      	ldrb	r3, [r3, #8]
    a44c:	f88d 300e 	strb.w	r3, [sp, #14]
    (void)CoreId;
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */
    /*  Program Conversion Time */
    Adc_Ip_SetSampleTime(PhysicalHwUnitId, ConvTime);
    a450:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a454:	f89d 200e 	ldrb.w	r2, [sp, #14]
    a458:	4611      	mov	r1, r2
    a45a:	4618      	mov	r0, r3
    a45c:	f7fe ff62 	bl	9324 <Adc_Ip_SetSampleTime>
}
    a460:	bf00      	nop
    a462:	b005      	add	sp, #20
    a464:	f85d fb04 	ldr.w	pc, [sp], #4
    a468:	1fff8d2c 	.word	0x1fff8d2c

0000a46c <Adc_Ipw_CalculateNumsBitShift>:
* @param[in]      Resolution    Adc resolution enum value
*
* @return         uint8        Number of bits shift
*/
uint8 Adc_Ipw_CalculateNumsBitShift(Adc_Ip_ResolutionType Resolution)
{
    a46c:	b084      	sub	sp, #16
    a46e:	9001      	str	r0, [sp, #4]
            /* Default is 12 bits */
            NumsBitShift = 4U;
            break;
    }
#else
    NumsBitShift = 0U;
    a470:	2300      	movs	r3, #0
    a472:	f88d 300f 	strb.w	r3, [sp, #15]
    (void) Resolution;
#endif /* (ADC_RESULT_ALIGNMENT == ADC_ALIGN_LEFT) */

    return NumsBitShift;
    a476:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    a47a:	4618      	mov	r0, r3
    a47c:	b004      	add	sp, #16
    a47e:	4770      	bx	lr

0000a480 <Adc_Ipw_ConfigureConversion>:
void Adc_Ipw_ConfigureConversion(Adc_HwUnitType Unit,
                                 Adc_GroupType Group,
                                 Adc_HwTriggerTimerType Trigger,
                                 uint8 NumChannel,
                                 uint8 CoreId)
{
    a480:	b500      	push	{lr}
    a482:	b08f      	sub	sp, #60	; 0x3c
    a484:	9202      	str	r2, [sp, #8]
    a486:	461a      	mov	r2, r3
    a488:	4603      	mov	r3, r0
    a48a:	f88d 300f 	strb.w	r3, [sp, #15]
    a48e:	460b      	mov	r3, r1
    a490:	f8ad 300c 	strh.w	r3, [sp, #12]
    a494:	4613      	mov	r3, r2
    a496:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8 ChIndex;
    Adc_ChannelIndexType CurrentChannel;
    Adc_Ip_ChanConfigType ChannelConfig;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a49a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a49e:	4a6d      	ldr	r2, [pc, #436]	; (a654 <Adc_Ipw_ConfigureConversion+0x1d4>)
    a4a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4a4:	68da      	ldr	r2, [r3, #12]
    a4a6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    a4aa:	005b      	lsls	r3, r3, #1
    a4ac:	4413      	add	r3, r2
    a4ae:	881b      	ldrh	r3, [r3, #0]
    a4b0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    a4b4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a4b8:	4a66      	ldr	r2, [pc, #408]	; (a654 <Adc_Ipw_ConfigureConversion+0x1d4>)
    a4ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4be:	685a      	ldr	r2, [r3, #4]
    a4c0:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    a4c4:	2134      	movs	r1, #52	; 0x34
    a4c6:	fb01 f303 	mul.w	r3, r1, r3
    a4ca:	4413      	add	r3, r2
    a4cc:	930c      	str	r3, [sp, #48]	; 0x30
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    a4ce:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a4d2:	4a60      	ldr	r2, [pc, #384]	; (a654 <Adc_Ipw_ConfigureConversion+0x1d4>)
    a4d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4d8:	681a      	ldr	r2, [r3, #0]
    a4da:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a4de:	4413      	add	r3, r2
    a4e0:	7c1b      	ldrb	r3, [r3, #16]
    a4e2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    Adc_Ip_InputChannelType Channel;
    const Adc_GroupDefType * ChannelsDefinition = NULL_PTR;
    a4e6:	2300      	movs	r3, #0
    a4e8:	930a      	str	r3, [sp, #40]	; 0x28

    /* Next channel will be converted */
    CurrentChannel = Adc_axGroupStatus[Group].CurrentChannel;
    a4ea:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    a4ee:	495a      	ldr	r1, [pc, #360]	; (a658 <Adc_Ipw_ConfigureConversion+0x1d8>)
    a4f0:	4613      	mov	r3, r2
    a4f2:	009b      	lsls	r3, r3, #2
    a4f4:	4413      	add	r3, r2
    a4f6:	009b      	lsls	r3, r3, #2
    a4f8:	440b      	add	r3, r1
    a4fa:	3310      	adds	r3, #16
    a4fc:	781b      	ldrb	r3, [r3, #0]
    a4fe:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    /* Get configured channels */
    /* At runtime */
    ChannelsDefinition = Adc_axRuntimeGroupChannel[Group].ChannelPtr;
#else
    /* Pre-configuration */
    ChannelsDefinition = GroupPtr->AssignmentPtr;
    a502:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a504:	6a1b      	ldr	r3, [r3, #32]
    a506:	930a      	str	r3, [sp, #40]	; 0x28
#endif /* ADC_SETCHANNEL_API */

    /* Configure channels from current to (last channel - 1) */
    for (ChIndex = 0U; ChIndex < (NumChannel - 1U); ChIndex++)
    a508:	2300      	movs	r3, #0
    a50a:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    a50e:	e030      	b.n	a572 <Adc_Ipw_ConfigureConversion+0xf2>
    {
        /* Physical channel ID */
        Channel = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->ChannelConfigs[ChannelsDefinition[(CurrentChannel + ChIndex)]].Channel;
    a510:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a514:	4a4f      	ldr	r2, [pc, #316]	; (a654 <Adc_Ipw_ConfigureConversion+0x1d4>)
    a516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a51a:	681b      	ldr	r3, [r3, #0]
    a51c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a524:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    a526:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    a52a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a52e:	440b      	add	r3, r1
    a530:	005b      	lsls	r3, r3, #1
    a532:	990a      	ldr	r1, [sp, #40]	; 0x28
    a534:	440b      	add	r3, r1
    a536:	881b      	ldrh	r3, [r3, #0]
    a538:	4619      	mov	r1, r3
    a53a:	460b      	mov	r3, r1
    a53c:	005b      	lsls	r3, r3, #1
    a53e:	440b      	add	r3, r1
    a540:	009b      	lsls	r3, r3, #2
    a542:	4413      	add	r3, r2
    a544:	685b      	ldr	r3, [r3, #4]
    a546:	9308      	str	r3, [sp, #32]
        /* Channel was changed? */
        if (1U == (TempMask & 1U))
#endif /* ADC_SETCHANNEL_API */
        {
            /* Configure all channels except the last one with interrupts disabled */
            ChannelConfig.ChnIdx = ChIndex;
    a548:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a54c:	f88d 3014 	strb.w	r3, [sp, #20]
            ChannelConfig.Channel = Channel;
    a550:	9b08      	ldr	r3, [sp, #32]
    a552:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
            ChannelConfig.InterruptEnable = FALSE;
    a554:	2300      	movs	r3, #0
    a556:	f88d 301c 	strb.w	r3, [sp, #28]
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
            Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    a55a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    a55e:	aa05      	add	r2, sp, #20
    a560:	4611      	mov	r1, r2
    a562:	4618      	mov	r0, r3
    a564:	f7fe ffc8 	bl	94f8 <Adc_Ip_ConfigChannel>
    for (ChIndex = 0U; ChIndex < (NumChannel - 1U); ChIndex++)
    a568:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a56c:	3301      	adds	r3, #1
    a56e:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    a572:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    a576:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a57a:	3b01      	subs	r3, #1
    a57c:	429a      	cmp	r2, r3
    a57e:	d3c7      	bcc.n	a510 <Adc_Ipw_ConfigureConversion+0x90>
    /* Last channel was changed? */
    if (1U == (TempMask & 1U))
#endif
    {
        /* Get channel ID */
        Channel = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->ChannelConfigs[ChannelsDefinition[(CurrentChannel + ChIndex)]].Channel;
    a580:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    a584:	4a33      	ldr	r2, [pc, #204]	; (a654 <Adc_Ipw_ConfigureConversion+0x1d4>)
    a586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a58a:	681b      	ldr	r3, [r3, #0]
    a58c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    a596:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    a59a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a59e:	440b      	add	r3, r1
    a5a0:	005b      	lsls	r3, r3, #1
    a5a2:	990a      	ldr	r1, [sp, #40]	; 0x28
    a5a4:	440b      	add	r3, r1
    a5a6:	881b      	ldrh	r3, [r3, #0]
    a5a8:	4619      	mov	r1, r3
    a5aa:	460b      	mov	r3, r1
    a5ac:	005b      	lsls	r3, r3, #1
    a5ae:	440b      	add	r3, r1
    a5b0:	009b      	lsls	r3, r3, #2
    a5b2:	4413      	add	r3, r2
    a5b4:	685b      	ldr	r3, [r3, #4]
    a5b6:	9308      	str	r3, [sp, #32]
        ChannelConfig.ChnIdx = ChIndex;
    a5b8:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a5bc:	f88d 3014 	strb.w	r3, [sp, #20]
        ChannelConfig.Channel = Channel;
    a5c0:	9b08      	ldr	r3, [sp, #32]
    a5c2:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
        /* In case of group is configured with interrupt, the complete int bit of the last channel must be enabled */
        if ((uint8)STD_OFF == GroupPtr->AdcWithoutInterrupt)
    a5c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a5c6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    a5ca:	2b00      	cmp	r3, #0
    a5cc:	d103      	bne.n	a5d6 <Adc_Ipw_ConfigureConversion+0x156>
        {
            ChannelConfig.InterruptEnable = TRUE;
    a5ce:	2301      	movs	r3, #1
    a5d0:	f88d 301c 	strb.w	r3, [sp, #28]
    a5d4:	e002      	b.n	a5dc <Adc_Ipw_ConfigureConversion+0x15c>
        }
        else
        {
            ChannelConfig.InterruptEnable = FALSE;
    a5d6:	2300      	movs	r3, #0
    a5d8:	f88d 301c 	strb.w	r3, [sp, #28]
        }
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
        /* Configure last channel */
        Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    a5dc:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    a5e0:	aa05      	add	r2, sp, #20
    a5e2:	4611      	mov	r1, r2
    a5e4:	4618      	mov	r0, r3
    a5e6:	f7fe ff87 	bl	94f8 <Adc_Ip_ConfigChannel>
    }

#if ((ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF) || (ADC_SETCHANNEL_API == STD_ON))
    for (ChIndex = NumChannel; ChIndex < ADC_MAX_CHAN_COUNT; ChIndex++)
    a5ea:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a5ee:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    a5f2:	e014      	b.n	a61e <Adc_Ipw_ConfigureConversion+0x19e>
    {
        /* Disable other channels by configuring them as disabled */
        ChannelConfig.ChnIdx = ChIndex;
    a5f4:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a5f8:	f88d 3014 	strb.w	r3, [sp, #20]
        ChannelConfig.Channel = ADC_IP_INPUTCHAN_DISABLED;
    a5fc:	231f      	movs	r3, #31
    a5fe:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
        ChannelConfig.InterruptEnable = FALSE;
    a600:	2300      	movs	r3, #0
    a602:	f88d 301c 	strb.w	r3, [sp, #28]
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
        Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    a606:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    a60a:	aa05      	add	r2, sp, #20
    a60c:	4611      	mov	r1, r2
    a60e:	4618      	mov	r0, r3
    a610:	f7fe ff72 	bl	94f8 <Adc_Ip_ConfigChannel>
    for (ChIndex = NumChannel; ChIndex < ADC_MAX_CHAN_COUNT; ChIndex++)
    a614:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a618:	3301      	adds	r3, #1
    a61a:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    a61e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    a622:	2b0f      	cmp	r3, #15
    a624:	d9e6      	bls.n	a5f4 <Adc_Ipw_ConfigureConversion+0x174>
    }
#endif /* (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF) || (ADC_SETCHANNEL_API == STD_ON) */

     /* Save the Sc1Used register equal the number of channels configured */
     Adc_axUnitStatus[Unit].Sc1Used = NumChannel;
    a626:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a62a:	4a0c      	ldr	r2, [pc, #48]	; (a65c <Adc_Ipw_ConfigureConversion+0x1dc>)
    a62c:	00db      	lsls	r3, r3, #3
    a62e:	4413      	add	r3, r2
    a630:	f89d 200e 	ldrb.w	r2, [sp, #14]
    a634:	719a      	strb	r2, [r3, #6]
     /* Start software trigger through PDB or enable PDB hardware trigger */
     Adc_Ipw_ConfigurePdbConversion(Unit, Group, GroupPtr, Trigger, NumChannel);
    a636:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    a63a:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a63e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a642:	9300      	str	r3, [sp, #0]
    a644:	9b02      	ldr	r3, [sp, #8]
    a646:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a648:	f7ff fd86 	bl	a158 <Adc_Ipw_ConfigurePdbConversion>
}
    a64c:	bf00      	nop
    a64e:	b00f      	add	sp, #60	; 0x3c
    a650:	f85d fb04 	ldr.w	pc, [sp], #4
    a654:	1fff8d2c 	.word	0x1fff8d2c
    a658:	1fff8d30 	.word	0x1fff8d30
    a65c:	1fff8d58 	.word	0x1fff8d58

0000a660 <Adc_Ipw_Init>:
* @retval         E_NOT_OK          If Power up/Power down activities couldn't return status as expected.
*
*/
Std_ReturnType Adc_Ipw_Init(const Adc_Ipw_Config * AdcIpwCfgPtr,
                            const uint8 CoreId)
{
    a660:	b500      	push	{lr}
    a662:	b085      	sub	sp, #20
    a664:	9001      	str	r0, [sp, #4]
    a666:	460b      	mov	r3, r1
    a668:	f88d 3003 	strb.w	r3, [sp, #3]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    a66c:	2300      	movs	r3, #0
    a66e:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_HwUnitType PhysicalHwUnitId = 0U;
    a672:	2300      	movs	r3, #0
    a674:	f88d 300e 	strb.w	r3, [sp, #14]
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    a678:	2300      	movs	r3, #0
    a67a:	f88d 300d 	strb.w	r3, [sp, #13]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    a67e:	2300      	movs	r3, #0
    a680:	f88d 300f 	strb.w	r3, [sp, #15]
    a684:	e027      	b.n	a6d6 <Adc_Ipw_Init+0x76>
    {
        /* HW unit enabled on current partition */
        if ((uint8)STD_ON == AdcIpwCfgPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId])
    a686:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a68a:	9a01      	ldr	r2, [sp, #4]
    a68c:	4413      	add	r3, r2
    a68e:	7f9b      	ldrb	r3, [r3, #30]
    a690:	2b01      	cmp	r3, #1
    a692:	d11b      	bne.n	a6cc <Adc_Ipw_Init+0x6c>
        {
            PhysicalHwUnitId = AdcIpwCfgPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    a694:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a698:	9a01      	ldr	r2, [sp, #4]
    a69a:	4413      	add	r3, r2
    a69c:	7c1b      	ldrb	r3, [r3, #16]
    a69e:	f88d 300e 	strb.w	r3, [sp, #14]
            Adc_Ip_Init(PhysicalHwUnitId, AdcIpwCfgPtr->AdcConfigPtrArr[LogicalHwUnitId]);
    a6a2:	f89d 000e 	ldrb.w	r0, [sp, #14]
    a6a6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a6aa:	9b01      	ldr	r3, [sp, #4]
    a6ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a6b0:	4619      	mov	r1, r3
    a6b2:	f7fe fcb8 	bl	9026 <Adc_Ip_Init>
            Pdb_Adc_Ip_Init(PhysicalHwUnitId, AdcIpwCfgPtr->PdbConfig[LogicalHwUnitId]);
    a6b6:	f89d 000e 	ldrb.w	r0, [sp, #14]
    a6ba:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a6be:	9b01      	ldr	r3, [sp, #4]
    a6c0:	3202      	adds	r2, #2
    a6c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a6c6:	4619      	mov	r1, r3
    a6c8:	f000 fead 	bl	b426 <Pdb_Adc_Ip_Init>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    a6cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a6d0:	3301      	adds	r3, #1
    a6d2:	f88d 300f 	strb.w	r3, [sp, #15]
    a6d6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a6da:	2b01      	cmp	r3, #1
    a6dc:	d9d3      	bls.n	a686 <Adc_Ipw_Init+0x26>
        }
    }

    (void)CoreId;

    return TimeOutStatus;
    a6de:	f89d 300d 	ldrb.w	r3, [sp, #13]
}
    a6e2:	4618      	mov	r0, r3
    a6e4:	b005      	add	sp, #20
    a6e6:	f85d fb04 	ldr.w	pc, [sp], #4

0000a6ea <Adc_Ipw_DeInit>:
* @retval         E_OK              If the operation completed successfully.
* @retval         E_NOT_OK          In case of timeout while waiting for adc hardware operations.
*
*/
Std_ReturnType Adc_Ipw_DeInit(uint8 CoreId)
{
    a6ea:	b500      	push	{lr}
    a6ec:	b087      	sub	sp, #28
    a6ee:	4603      	mov	r3, r0
    a6f0:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_HwUnitType PhysicalHwUnitId = 0U;
    a6f4:	2300      	movs	r3, #0
    a6f6:	f88d 3013 	strb.w	r3, [sp, #19]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    a6fa:	2300      	movs	r3, #0
    a6fc:	f88d 3017 	strb.w	r3, [sp, #23]
    Adc_GroupType GroupId = 0U;
    a700:	2300      	movs	r3, #0
    a702:	f8ad 3010 	strh.w	r3, [sp, #16]
    Adc_GroupType GroupIter = 0U;
    a706:	2300      	movs	r3, #0
    a708:	f8ad 3014 	strh.w	r3, [sp, #20]
    Std_ReturnType ReturnStatus = E_OK;
    a70c:	2300      	movs	r3, #0
    a70e:	f88d 300f 	strb.w	r3, [sp, #15]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    a712:	2300      	movs	r3, #0
    a714:	f88d 3017 	strb.w	r3, [sp, #23]
    a718:	e026      	b.n	a768 <Adc_Ipw_DeInit+0x7e>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    a71a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a71e:	4a2e      	ldr	r2, [pc, #184]	; (a7d8 <Adc_Ipw_DeInit+0xee>)
    a720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a724:	681a      	ldr	r2, [r3, #0]
    a726:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a72a:	4413      	add	r3, r2
    a72c:	7f9b      	ldrb	r3, [r3, #30]
    a72e:	2b01      	cmp	r3, #1
    a730:	d115      	bne.n	a75e <Adc_Ipw_DeInit+0x74>
        {
            PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    a732:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a736:	4a28      	ldr	r2, [pc, #160]	; (a7d8 <Adc_Ipw_DeInit+0xee>)
    a738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a73c:	681a      	ldr	r2, [r3, #0]
    a73e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a742:	4413      	add	r3, r2
    a744:	7c1b      	ldrb	r3, [r3, #16]
    a746:	f88d 3013 	strb.w	r3, [sp, #19]
            Adc_Ip_DeInit(PhysicalHwUnitId);
    a74a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a74e:	4618      	mov	r0, r3
    a750:	f7fe fd40 	bl	91d4 <Adc_Ip_DeInit>
            Pdb_Adc_Ip_DeInit(PhysicalHwUnitId);
    a754:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a758:	4618      	mov	r0, r3
    a75a:	f000 ff0d 	bl	b578 <Pdb_Adc_Ip_DeInit>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    a75e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a762:	3301      	adds	r3, #1
    a764:	f88d 3017 	strb.w	r3, [sp, #23]
    a768:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a76c:	2b01      	cmp	r3, #1
    a76e:	d9d4      	bls.n	a71a <Adc_Ipw_DeInit+0x30>
        }
    }

    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    a770:	2300      	movs	r3, #0
    a772:	f8ad 3014 	strh.w	r3, [sp, #20]
    a776:	e01e      	b.n	a7b6 <Adc_Ipw_DeInit+0xcc>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIter].GroupId;
    a778:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a77c:	4a16      	ldr	r2, [pc, #88]	; (a7d8 <Adc_Ipw_DeInit+0xee>)
    a77e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a782:	685a      	ldr	r2, [r3, #4]
    a784:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    a788:	2134      	movs	r1, #52	; 0x34
    a78a:	fb01 f303 	mul.w	r3, r1, r3
    a78e:	4413      	add	r3, r2
    a790:	881b      	ldrh	r3, [r3, #0]
    a792:	f8ad 3010 	strh.w	r3, [sp, #16]
        Adc_axRuntimeGroupChannel[GroupId].RuntimeUpdated = FALSE;
#if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
        Adc_axRuntimeGroupChannel[GroupId].AdcRuntimeGroupLimitcheck = FALSE;
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
#endif
        Adc_axGroupStatus[GroupId].ResultsBufferPtr = NULL_PTR;
    a796:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    a79a:	4910      	ldr	r1, [pc, #64]	; (a7dc <Adc_Ipw_DeInit+0xf2>)
    a79c:	4613      	mov	r3, r2
    a79e:	009b      	lsls	r3, r3, #2
    a7a0:	4413      	add	r3, r2
    a7a2:	009b      	lsls	r3, r3, #2
    a7a4:	440b      	add	r3, r1
    a7a6:	330c      	adds	r3, #12
    a7a8:	2200      	movs	r2, #0
    a7aa:	601a      	str	r2, [r3, #0]
    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    a7ac:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    a7b0:	3301      	adds	r3, #1
    a7b2:	f8ad 3014 	strh.w	r3, [sp, #20]
    a7b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a7ba:	4a07      	ldr	r2, [pc, #28]	; (a7d8 <Adc_Ipw_DeInit+0xee>)
    a7bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7c0:	891b      	ldrh	r3, [r3, #8]
    a7c2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    a7c6:	429a      	cmp	r2, r3
    a7c8:	d3d6      	bcc.n	a778 <Adc_Ipw_DeInit+0x8e>
#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
    Adc_aeClockMode[CoreId] = ADC_NORMAL;
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */

    return ReturnStatus;
    a7ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    a7ce:	4618      	mov	r0, r3
    a7d0:	b007      	add	sp, #28
    a7d2:	f85d fb04 	ldr.w	pc, [sp], #4
    a7d6:	bf00      	nop
    a7d8:	1fff8d2c 	.word	0x1fff8d2c
    a7dc:	1fff8d30 	.word	0x1fff8d30

0000a7e0 <Adc_Ipw_StartNormalConversion>:
* @return         void
*
*/
void Adc_Ipw_StartNormalConversion(Adc_HwUnitType Unit,
                                   uint8 CoreId)
{
    a7e0:	b500      	push	{lr}
    a7e2:	b089      	sub	sp, #36	; 0x24
    a7e4:	4603      	mov	r3, r0
    a7e6:	460a      	mov	r2, r1
    a7e8:	f88d 300f 	strb.w	r3, [sp, #15]
    a7ec:	4613      	mov	r3, r2
    a7ee:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType Group = Adc_axUnitStatus[Unit].SwNormalQueue[0U]; /* Active group in the Queue */
    a7f2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a7f6:	4a4c      	ldr	r2, [pc, #304]	; (a928 <Adc_Ipw_StartNormalConversion+0x148>)
    a7f8:	00db      	lsls	r3, r3, #3
    a7fa:	4413      	add	r3, r2
    a7fc:	885b      	ldrh	r3, [r3, #2]
    a7fe:	f8ad 301c 	strh.w	r3, [sp, #28]
#if (defined(ADC_DMA_SUPPORTED) || defined(ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED) || \
    (ADC_ENABLE_LIMIT_CHECK == STD_ON) || (ADC_SETCHANNEL_API == STD_OFF) || \
    (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF))
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group]; /* Group index in each partition */
    a802:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a806:	4a49      	ldr	r2, [pc, #292]	; (a92c <Adc_Ipw_StartNormalConversion+0x14c>)
    a808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a80c:	68da      	ldr	r2, [r3, #12]
    a80e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    a812:	005b      	lsls	r3, r3, #1
    a814:	4413      	add	r3, r2
    a816:	881b      	ldrh	r3, [r3, #0]
    a818:	f8ad 301a 	strh.w	r3, [sp, #26]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]); /* Pointer to AdcGroup */
    a81c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a820:	4a42      	ldr	r2, [pc, #264]	; (a92c <Adc_Ipw_StartNormalConversion+0x14c>)
    a822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a826:	685a      	ldr	r2, [r3, #4]
    a828:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    a82c:	2134      	movs	r1, #52	; 0x34
    a82e:	fb01 f303 	mul.w	r3, r1, r3
    a832:	4413      	add	r3, r2
    a834:	9305      	str	r3, [sp, #20]
#endif /* (defined(ADC_DMA_SUPPORTED) ||... */
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    a836:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a83a:	4a3c      	ldr	r2, [pc, #240]	; (a92c <Adc_Ipw_StartNormalConversion+0x14c>)
    a83c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a840:	681a      	ldr	r2, [r3, #0]
    a842:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a846:	4413      	add	r3, r2
    a848:	7c1b      	ldrb	r3, [r3, #16]
    a84a:	f88d 3013 	strb.w	r3, [sp, #19]
#ifdef ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED
    boolean PdbMode;
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */

    /* Do nothing if there is no request available in queue */
    if ((Adc_axUnitStatus[Unit].SwNormalQueueIndex != (Adc_QueueIndexType)0U)
    a84e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a852:	4a35      	ldr	r2, [pc, #212]	; (a928 <Adc_Ipw_StartNormalConversion+0x148>)
    a854:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    a858:	b29b      	uxth	r3, r3
    a85a:	2b00      	cmp	r3, #0
    a85c:	d05f      	beq.n	a91e <Adc_Ipw_StartNormalConversion+0x13e>
       )
    {

#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
        /* Configure group params (e.g. conversion time) if needed before starting conversion */
        Adc_Ipw_PrepareGroupStart(Unit, GroupPtr, CoreId);
    a85e:	f89d 200e 	ldrb.w	r2, [sp, #14]
    a862:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a866:	9905      	ldr	r1, [sp, #20]
    a868:	4618      	mov	r0, r3
    a86a:	f7ff fdc9 	bl	a400 <Adc_Ipw_PrepareGroupStart>
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */

        /* Reset to start conversion from channel logical index 0 */
        Adc_axGroupStatus[Group].CurrentChannel = 0U;
    a86e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    a872:	492f      	ldr	r1, [pc, #188]	; (a930 <Adc_Ipw_StartNormalConversion+0x150>)
    a874:	4613      	mov	r3, r2
    a876:	009b      	lsls	r3, r3, #2
    a878:	4413      	add	r3, r2
    a87a:	009b      	lsls	r3, r3, #2
    a87c:	440b      	add	r3, r1
    a87e:	3310      	adds	r3, #16
    a880:	2200      	movs	r2, #0
    a882:	701a      	strb	r2, [r3, #0]
#if (ADC_SETCHANNEL_API == STD_ON)
        /* Channel enabled at runtime */
        NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(Adc_axRuntimeGroupChannel[Group].ChannelCount);
#else
        /* Channel enabled from initialzing */
        NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(GroupPtr->AssignedChannelCount);
    a884:	9b05      	ldr	r3, [sp, #20]
    a886:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    a88a:	2b0f      	cmp	r3, #15
    a88c:	d806      	bhi.n	a89c <Adc_Ipw_StartNormalConversion+0xbc>
    a88e:	9b05      	ldr	r3, [sp, #20]
    a890:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    a894:	f003 030f 	and.w	r3, r3, #15
    a898:	b2db      	uxtb	r3, r3
    a89a:	e000      	b.n	a89e <Adc_Ipw_StartNormalConversion+0xbe>
    a89c:	2310      	movs	r3, #16
    a89e:	f88d 3012 	strb.w	r3, [sp, #18]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

        /* Update Sc1Used for the first time */
        if (0U == Adc_axUnitStatus[Unit].Sc1Used)
    a8a2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a8a6:	4a20      	ldr	r2, [pc, #128]	; (a928 <Adc_Ipw_StartNormalConversion+0x148>)
    a8a8:	00db      	lsls	r3, r3, #3
    a8aa:	4413      	add	r3, r2
    a8ac:	799b      	ldrb	r3, [r3, #6]
    a8ae:	2b00      	cmp	r3, #0
    a8b0:	d107      	bne.n	a8c2 <Adc_Ipw_StartNormalConversion+0xe2>
        {
            Adc_axUnitStatus[Unit].Sc1Used = NumChannel;
    a8b2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a8b6:	4a1c      	ldr	r2, [pc, #112]	; (a928 <Adc_Ipw_StartNormalConversion+0x148>)
    a8b8:	00db      	lsls	r3, r3, #3
    a8ba:	4413      	add	r3, r2
    a8bc:	f89d 2012 	ldrb.w	r2, [sp, #18]
    a8c0:	719a      	strb	r2, [r3, #6]
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            /* Clear all of COCO flag by reading Rn registers */
            for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    a8c2:	2300      	movs	r3, #0
    a8c4:	f88d 301f 	strb.w	r3, [sp, #31]
    a8c8:	e00c      	b.n	a8e4 <Adc_Ipw_StartNormalConversion+0x104>
            {
                (void)Adc_Ip_GetConvData(PhysicalHwUnitId, ChIndex);
    a8ca:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a8ce:	f89d 201f 	ldrb.w	r2, [sp, #31]
    a8d2:	4611      	mov	r1, r2
    a8d4:	4618      	mov	r0, r3
    a8d6:	f7fe ff03 	bl	96e0 <Adc_Ip_GetConvData>
            for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    a8da:	f89d 301f 	ldrb.w	r3, [sp, #31]
    a8de:	3301      	adds	r3, #1
    a8e0:	f88d 301f 	strb.w	r3, [sp, #31]
    a8e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a8e8:	4a0f      	ldr	r2, [pc, #60]	; (a928 <Adc_Ipw_StartNormalConversion+0x148>)
    a8ea:	00db      	lsls	r3, r3, #3
    a8ec:	4413      	add	r3, r2
    a8ee:	799b      	ldrb	r3, [r3, #6]
    a8f0:	f89d 201f 	ldrb.w	r2, [sp, #31]
    a8f4:	429a      	cmp	r2, r3
    a8f6:	d3e8      	bcc.n	a8ca <Adc_Ipw_StartNormalConversion+0xea>
            }
            Adc_Ip_SetTriggerMode(PhysicalHwUnitId, ADC_IP_TRIGGER_HARDWARE);
    a8f8:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a8fc:	2101      	movs	r1, #1
    a8fe:	4618      	mov	r0, r3
    a900:	f7fe fd60 	bl	93c4 <Adc_Ip_SetTriggerMode>

            /* Update group configuration to registers and start conversion */
            Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
    a904:	f89d 2012 	ldrb.w	r2, [sp, #18]
    a908:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    a90c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a910:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a914:	9300      	str	r3, [sp, #0]
    a916:	4613      	mov	r3, r2
    a918:	220f      	movs	r2, #15
    a91a:	f7ff fdb1 	bl	a480 <Adc_Ipw_ConfigureConversion>
            /* Reset the update status */
            Adc_axRuntimeGroupChannel[Group].RuntimeUpdated =  FALSE;
        }
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    }
}
    a91e:	bf00      	nop
    a920:	b009      	add	sp, #36	; 0x24
    a922:	f85d fb04 	ldr.w	pc, [sp], #4
    a926:	bf00      	nop
    a928:	1fff8d58 	.word	0x1fff8d58
    a92c:	1fff8d2c 	.word	0x1fff8d2c
    a930:	1fff8d30 	.word	0x1fff8d30

0000a934 <Adc_Ipw_StopCurrentConversion>:
*
*/
Std_ReturnType Adc_Ipw_StopCurrentConversion(Adc_HwUnitType Unit,
                                             Adc_GroupType Group,
                                             uint8 CoreId)
{
    a934:	b500      	push	{lr}
    a936:	b085      	sub	sp, #20
    a938:	4603      	mov	r3, r0
    a93a:	f88d 3007 	strb.w	r3, [sp, #7]
    a93e:	460b      	mov	r3, r1
    a940:	f8ad 3004 	strh.w	r3, [sp, #4]
    a944:	4613      	mov	r3, r2
    a946:	f88d 3006 	strb.w	r3, [sp, #6]
#if ((ADC_BYPASS_ABORT_CHAIN_CHECK == STD_ON) || defined(ADC_DMA_SUPPORTED))
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
#endif /* (ADC_BYPASS_ABORT_CHAIN_CHECK == STD_ON) */
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    a94a:	2300      	movs	r3, #0
    a94c:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    a950:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a954:	4a24      	ldr	r2, [pc, #144]	; (a9e8 <Adc_Ipw_StopCurrentConversion+0xb4>)
    a956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a95a:	681a      	ldr	r2, [r3, #0]
    a95c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a960:	4413      	add	r3, r2
    a962:	7c1b      	ldrb	r3, [r3, #16]
    a964:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 ChIndex;

    /* Disable Adc hardware unit and clear all of COCO flag by reading Rn register */
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    a968:	2300      	movs	r3, #0
    a96a:	f88d 300f 	strb.w	r3, [sp, #15]
    a96e:	e014      	b.n	a99a <Adc_Ipw_StopCurrentConversion+0x66>
    {
        (void) Adc_Ip_SetDisabledChannel(PhysicalHwUnitId, ChIndex, FALSE);
    a970:	f89d 300d 	ldrb.w	r3, [sp, #13]
    a974:	f89d 100f 	ldrb.w	r1, [sp, #15]
    a978:	2200      	movs	r2, #0
    a97a:	4618      	mov	r0, r3
    a97c:	f7fe fdec 	bl	9558 <Adc_Ip_SetDisabledChannel>

        /* Make a dummy read to clear COCO flag */
        (void) Adc_Ip_GetConvData(PhysicalHwUnitId, ChIndex);
    a980:	f89d 300d 	ldrb.w	r3, [sp, #13]
    a984:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a988:	4611      	mov	r1, r2
    a98a:	4618      	mov	r0, r3
    a98c:	f7fe fea8 	bl	96e0 <Adc_Ip_GetConvData>
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    a990:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a994:	3301      	adds	r3, #1
    a996:	f88d 300f 	strb.w	r3, [sp, #15]
    a99a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a99e:	4a13      	ldr	r2, [pc, #76]	; (a9ec <Adc_Ipw_StopCurrentConversion+0xb8>)
    a9a0:	00db      	lsls	r3, r3, #3
    a9a2:	4413      	add	r3, r2
    a9a4:	799b      	ldrb	r3, [r3, #6]
    a9a6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a9aa:	429a      	cmp	r2, r3
    a9ac:	d3e0      	bcc.n	a970 <Adc_Ipw_StopCurrentConversion+0x3c>
            (void)Dma_Ip_SetLogicChannelCommand(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcDmaChannelLogicId[Unit], DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
        }
    }
#endif /* ADC_DMA_SUPPORTED */
    /* Reset current channel status to 0 */
    Adc_axGroupStatus[Group].CurrentChannel = 0U;
    a9ae:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    a9b2:	490f      	ldr	r1, [pc, #60]	; (a9f0 <Adc_Ipw_StopCurrentConversion+0xbc>)
    a9b4:	4613      	mov	r3, r2
    a9b6:	009b      	lsls	r3, r3, #2
    a9b8:	4413      	add	r3, r2
    a9ba:	009b      	lsls	r3, r3, #2
    a9bc:	440b      	add	r3, r1
    a9be:	3310      	adds	r3, #16
    a9c0:	2200      	movs	r2, #0
    a9c2:	701a      	strb	r2, [r3, #0]
            Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
        }
    }
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */
#else
    Status = Adc_Ipw_StopConversionCheckTimeout(Unit, Group, CoreId);
    a9c4:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a9c8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    a9cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a9d0:	4618      	mov	r0, r3
    a9d2:	f7ff fc97 	bl	a304 <Adc_Ipw_StopConversionCheckTimeout>
    a9d6:	4603      	mov	r3, r0
    a9d8:	f88d 300e 	strb.w	r3, [sp, #14]
#endif /* (ADC_BYPASS_ABORT_CHAIN_CHECK == STD_OFF) */

    return Status;
    a9dc:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    a9e0:	4618      	mov	r0, r3
    a9e2:	b005      	add	sp, #20
    a9e4:	f85d fb04 	ldr.w	pc, [sp], #4
    a9e8:	1fff8d2c 	.word	0x1fff8d2c
    a9ec:	1fff8d58 	.word	0x1fff8d58
    a9f0:	1fff8d30 	.word	0x1fff8d30

0000a9f4 <Adc_Ipw_CheckValidConversion>:
*
*/
boolean Adc_Ipw_CheckValidConversion(Adc_HwUnitType PhysicalHwUnitId,
                                     Adc_ChannelIndexType StartIndex,
                                     Adc_ChannelIndexType EndIndex)
{
    a9f4:	b500      	push	{lr}
    a9f6:	b085      	sub	sp, #20
    a9f8:	4603      	mov	r3, r0
    a9fa:	f88d 3007 	strb.w	r3, [sp, #7]
    a9fe:	460b      	mov	r3, r1
    aa00:	f88d 3006 	strb.w	r3, [sp, #6]
    aa04:	4613      	mov	r3, r2
    aa06:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_ChannelIndexType Index;
    boolean ValidConversion = TRUE;
    aa0a:	2301      	movs	r3, #1
    aa0c:	f88d 300e 	strb.w	r3, [sp, #14]

    for (Index = StartIndex; Index < EndIndex; Index++)
    aa10:	f89d 3006 	ldrb.w	r3, [sp, #6]
    aa14:	f88d 300f 	strb.w	r3, [sp, #15]
    aa18:	e019      	b.n	aa4e <Adc_Ipw_CheckValidConversion+0x5a>
    {
        ValidConversion = Adc_Ip_GetConvCompleteFlag(PhysicalHwUnitId, Index - StartIndex);
    aa1a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    aa1e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    aa22:	f89d 3006 	ldrb.w	r3, [sp, #6]
    aa26:	1ad3      	subs	r3, r2, r3
    aa28:	b2db      	uxtb	r3, r3
    aa2a:	4619      	mov	r1, r3
    aa2c:	f7fe fe3e 	bl	96ac <Adc_Ip_GetConvCompleteFlag>
    aa30:	4603      	mov	r3, r0
    aa32:	f88d 300e 	strb.w	r3, [sp, #14]
        if (FALSE == ValidConversion)
    aa36:	f89d 300e 	ldrb.w	r3, [sp, #14]
    aa3a:	f083 0301 	eor.w	r3, r3, #1
    aa3e:	b2db      	uxtb	r3, r3
    aa40:	2b00      	cmp	r3, #0
    aa42:	d10b      	bne.n	aa5c <Adc_Ipw_CheckValidConversion+0x68>
    for (Index = StartIndex; Index < EndIndex; Index++)
    aa44:	f89d 300f 	ldrb.w	r3, [sp, #15]
    aa48:	3301      	adds	r3, #1
    aa4a:	f88d 300f 	strb.w	r3, [sp, #15]
    aa4e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    aa52:	f89d 3005 	ldrb.w	r3, [sp, #5]
    aa56:	429a      	cmp	r2, r3
    aa58:	d3df      	bcc.n	aa1a <Adc_Ipw_CheckValidConversion+0x26>
    aa5a:	e000      	b.n	aa5e <Adc_Ipw_CheckValidConversion+0x6a>
        {
            break;
    aa5c:	bf00      	nop
        }
    }

    return ValidConversion;
    aa5e:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    aa62:	4618      	mov	r0, r3
    aa64:	b005      	add	sp, #20
    aa66:	f85d fb04 	ldr.w	pc, [sp], #4

0000aa6a <Adc_Ipw_ReadGroup>:
*/
Std_ReturnType Adc_Ipw_ReadGroup(const Adc_GroupType Group,
                                 Adc_ValueGroupType * DataPtr,
                                 boolean * Flag,
                                 uint8 CoreId)
{
    aa6a:	b500      	push	{lr}
    aa6c:	b089      	sub	sp, #36	; 0x24
    aa6e:	9102      	str	r1, [sp, #8]
    aa70:	9201      	str	r2, [sp, #4]
    aa72:	461a      	mov	r2, r3
    aa74:	4603      	mov	r3, r0
    aa76:	f8ad 300e 	strh.w	r3, [sp, #14]
    aa7a:	4613      	mov	r3, r2
    aa7c:	f88d 300d 	strb.w	r3, [sp, #13]
    Std_ReturnType ReadGroupRet = (Std_ReturnType)E_OK;
    aa80:	2300      	movs	r3, #0
    aa82:	f88d 301f 	strb.w	r3, [sp, #31]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    aa86:	f89d 300d 	ldrb.w	r3, [sp, #13]
    aa8a:	4a33      	ldr	r2, [pc, #204]	; (ab58 <Adc_Ipw_ReadGroup+0xee>)
    aa8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa90:	68da      	ldr	r2, [r3, #12]
    aa92:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    aa96:	005b      	lsls	r3, r3, #1
    aa98:	4413      	add	r3, r2
    aa9a:	881b      	ldrh	r3, [r3, #0]
    aa9c:	f8ad 301c 	strh.w	r3, [sp, #28]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    aaa0:	f89d 300d 	ldrb.w	r3, [sp, #13]
    aaa4:	4a2c      	ldr	r2, [pc, #176]	; (ab58 <Adc_Ipw_ReadGroup+0xee>)
    aaa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aaaa:	685a      	ldr	r2, [r3, #4]
    aaac:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    aab0:	2134      	movs	r1, #52	; 0x34
    aab2:	fb01 f303 	mul.w	r3, r1, r3
    aab6:	4413      	add	r3, r2
    aab8:	9306      	str	r3, [sp, #24]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    aaba:	9b06      	ldr	r3, [sp, #24]
    aabc:	789b      	ldrb	r3, [r3, #2]
    aabe:	f88d 3017 	strb.w	r3, [sp, #23]

    /* If the group is configured for without interrupts */
    if ((uint8)STD_ON == GroupPtr->AdcWithoutInterrupt)
    aac2:	9b06      	ldr	r3, [sp, #24]
    aac4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    aac8:	2b01      	cmp	r3, #1
    aaca:	d124      	bne.n	ab16 <Adc_Ipw_ReadGroup+0xac>
    {
        /* Return error if group is not at the first of queue */
        if (ADC_CONV_TYPE_NORMAL == GroupPtr->Type)
    aacc:	9b06      	ldr	r3, [sp, #24]
    aace:	68db      	ldr	r3, [r3, #12]
    aad0:	2b00      	cmp	r3, #0
    aad2:	d111      	bne.n	aaf8 <Adc_Ipw_ReadGroup+0x8e>
        {
            if (ADC_TRIGG_SRC_SW == GroupPtr->TriggerSource)
    aad4:	9b06      	ldr	r3, [sp, #24]
    aad6:	695b      	ldr	r3, [r3, #20]
    aad8:	2b00      	cmp	r3, #0
    aada:	d10d      	bne.n	aaf8 <Adc_Ipw_ReadGroup+0x8e>
            {
                if (Group != Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[0U])
    aadc:	f89d 3017 	ldrb.w	r3, [sp, #23]
    aae0:	4a1e      	ldr	r2, [pc, #120]	; (ab5c <Adc_Ipw_ReadGroup+0xf2>)
    aae2:	00db      	lsls	r3, r3, #3
    aae4:	4413      	add	r3, r2
    aae6:	885b      	ldrh	r3, [r3, #2]
    aae8:	b29b      	uxth	r3, r3
    aaea:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    aaee:	429a      	cmp	r2, r3
    aaf0:	d002      	beq.n	aaf8 <Adc_Ipw_ReadGroup+0x8e>
                {
                    ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    aaf2:	2301      	movs	r3, #1
    aaf4:	f88d 301f 	strb.w	r3, [sp, #31]
                    ReadGroupRet = (Std_ReturnType)E_NOT_OK;
                }
            }
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */
        }
        if ((Std_ReturnType)E_OK == ReadGroupRet)
    aaf8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    aafc:	2b00      	cmp	r3, #0
    aafe:	d124      	bne.n	ab4a <Adc_Ipw_ReadGroup+0xe0>
        {
            ReadGroupRet = Adc_Ipw_ReadGroupNoInt(GroupPtr, DataPtr, Flag, CoreId);
    ab00:	f89d 300d 	ldrb.w	r3, [sp, #13]
    ab04:	9a01      	ldr	r2, [sp, #4]
    ab06:	9902      	ldr	r1, [sp, #8]
    ab08:	9806      	ldr	r0, [sp, #24]
    ab0a:	f7ff f91f 	bl	9d4c <Adc_Ipw_ReadGroupNoInt>
    ab0e:	4603      	mov	r3, r0
    ab10:	f88d 301f 	strb.w	r3, [sp, #31]
    ab14:	e019      	b.n	ab4a <Adc_Ipw_ReadGroup+0xe0>
        }
    }
    else  /* If the group is configured with interrupts */
    {
        if (ADC_BUSY == Adc_axGroupStatus[Group].Conversion)
    ab16:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    ab1a:	4911      	ldr	r1, [pc, #68]	; (ab60 <Adc_Ipw_ReadGroup+0xf6>)
    ab1c:	4613      	mov	r3, r2
    ab1e:	009b      	lsls	r3, r3, #2
    ab20:	4413      	add	r3, r2
    ab22:	009b      	lsls	r3, r3, #2
    ab24:	440b      	add	r3, r1
    ab26:	681b      	ldr	r3, [r3, #0]
    ab28:	2b01      	cmp	r3, #1
    ab2a:	d102      	bne.n	ab32 <Adc_Ipw_ReadGroup+0xc8>
        {
            ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    ab2c:	2301      	movs	r3, #1
    ab2e:	f88d 301f 	strb.w	r3, [sp, #31]
        }

        if ((Std_ReturnType)E_OK == ReadGroupRet)
    ab32:	f89d 301f 	ldrb.w	r3, [sp, #31]
    ab36:	2b00      	cmp	r3, #0
    ab38:	d107      	bne.n	ab4a <Adc_Ipw_ReadGroup+0xe0>
        {
            Adc_Ipw_WriteDataBuffer(Group, DataPtr, CoreId);
    ab3a:	f89d 200d 	ldrb.w	r2, [sp, #13]
    ab3e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ab42:	9902      	ldr	r1, [sp, #8]
    ab44:	4618      	mov	r0, r3
    ab46:	f7ff f949 	bl	9ddc <Adc_Ipw_WriteDataBuffer>
        }
    }

    return ReadGroupRet;
    ab4a:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    ab4e:	4618      	mov	r0, r3
    ab50:	b009      	add	sp, #36	; 0x24
    ab52:	f85d fb04 	ldr.w	pc, [sp], #4
    ab56:	bf00      	nop
    ab58:	1fff8d2c 	.word	0x1fff8d2c
    ab5c:	1fff8d58 	.word	0x1fff8d58
    ab60:	1fff8d30 	.word	0x1fff8d30

0000ab64 <Adc_Ipw_Calibrate>:

#if (ADC_CALIBRATION == STD_ON)
void Adc_Ipw_Calibrate(Adc_HwUnitType Unit,
                       Adc_CalibrationStatusType * Status,
                       uint8 CoreId)
{
    ab64:	b500      	push	{lr}
    ab66:	b085      	sub	sp, #20
    ab68:	4603      	mov	r3, r0
    ab6a:	9100      	str	r1, [sp, #0]
    ab6c:	f88d 3007 	strb.w	r3, [sp, #7]
    ab70:	4613      	mov	r3, r2
    ab72:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_Ip_StatusType IpStatus;
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    ab76:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ab7a:	4a0e      	ldr	r2, [pc, #56]	; (abb4 <Adc_Ipw_Calibrate+0x50>)
    ab7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab80:	681a      	ldr	r2, [r3, #0]
    ab82:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ab86:	4413      	add	r3, r2
    ab88:	7c1b      	ldrb	r3, [r3, #16]
    ab8a:	f88d 300f 	strb.w	r3, [sp, #15]

    Status->AdcUnitSelfTestStatus = E_OK;
    ab8e:	9b00      	ldr	r3, [sp, #0]
    ab90:	2200      	movs	r2, #0
    ab92:	701a      	strb	r2, [r3, #0]
    /* Call IPL calibration function */
    IpStatus = Adc_Ip_DoCalibration(PhysicalHwUnitId);
    ab94:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ab98:	4618      	mov	r0, r3
    ab9a:	f7fe fdb9 	bl	9710 <Adc_Ip_DoCalibration>
    ab9e:	9002      	str	r0, [sp, #8]

    if (IpStatus != ADC_IP_STATUS_SUCCESS)
    aba0:	9b02      	ldr	r3, [sp, #8]
    aba2:	2b00      	cmp	r3, #0
    aba4:	d002      	beq.n	abac <Adc_Ipw_Calibrate+0x48>
    {
        Status->AdcUnitSelfTestStatus = E_NOT_OK;
    aba6:	9b00      	ldr	r3, [sp, #0]
    aba8:	2201      	movs	r2, #1
    abaa:	701a      	strb	r2, [r3, #0]
    }
}
    abac:	bf00      	nop
    abae:	b005      	add	sp, #20
    abb0:	f85d fb04 	ldr.w	pc, [sp], #4
    abb4:	1fff8d2c 	.word	0x1fff8d2c

0000abb8 <Adc_GetCoreID>:
*
* @return      uint8  the core number.
*/
uint8 Adc_GetCoreID(void)
{
    return 0U;
    abb8:	2300      	movs	r3, #0
}
    abba:	4618      	mov	r0, r3
    abbc:	4770      	bx	lr
    abbe:	bf00      	nop

0000abc0 <Adc_Ipw_UpdateQueue>:
* @return         void
*
*/
static inline void Adc_Ipw_UpdateQueue(Adc_HwUnitType Unit,
                                       uint8 CoreId)
{
    abc0:	b500      	push	{lr}
    abc2:	b083      	sub	sp, #12
    abc4:	4603      	mov	r3, r0
    abc6:	460a      	mov	r2, r1
    abc8:	f88d 3007 	strb.w	r3, [sp, #7]
    abcc:	4613      	mov	r3, r2
    abce:	f88d 3006 	strb.w	r3, [sp, #6]
#if (ADC_ENABLE_QUEUING == STD_ON)
    /* Remove current request element in queue */
    Adc_Ipw_RemoveFromQueue(Unit, 0U);
    abd2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    abd6:	2100      	movs	r1, #0
    abd8:	4618      	mov	r0, r3
    abda:	f7fe fff3 	bl	9bc4 <Adc_Ipw_RemoveFromQueue>
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
    if (Adc_axUnitStatus[Unit].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    abde:	f89d 3007 	ldrb.w	r3, [sp, #7]
    abe2:	4a09      	ldr	r2, [pc, #36]	; (ac08 <Adc_Ipw_UpdateQueue+0x48>)
    abe4:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    abe8:	b29b      	uxth	r3, r3
    abea:	2b00      	cmp	r3, #0
    abec:	d007      	beq.n	abfe <Adc_Ipw_UpdateQueue+0x3e>
    {
        /* Start conversion if request elements are still available in queue */
        Adc_Ipw_StartNormalConversion(Unit, CoreId);
    abee:	f89d 2006 	ldrb.w	r2, [sp, #6]
    abf2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    abf6:	4611      	mov	r1, r2
    abf8:	4618      	mov	r0, r3
    abfa:	f7ff fdf1 	bl	a7e0 <Adc_Ipw_StartNormalConversion>
#else
    /* No element will be present in the queue */
    Adc_axUnitStatus[Unit].SwNormalQueueIndex = (Adc_QueueIndexType)0;
#endif /* ADC_ENABLE_QUEUING == STD_ON */
    (void)CoreId;
}
    abfe:	bf00      	nop
    ac00:	b003      	add	sp, #12
    ac02:	f85d fb04 	ldr.w	pc, [sp], #4
    ac06:	bf00      	nop
    ac08:	1fff8d58 	.word	0x1fff8d58

0000ac0c <Adc_Ipw_CheckConversionChannels>:
*/
static inline Std_ReturnType Adc_Ipw_CheckConversionChannels(Adc_HwUnitType Unit,
                                                            Adc_GroupType Group,
                                                            Adc_StreamNumSampleType GroupSamples,
                                                            uint8 CoreId)
{
    ac0c:	b510      	push	{r4, lr}
    ac0e:	b08a      	sub	sp, #40	; 0x28
    ac10:	4604      	mov	r4, r0
    ac12:	4608      	mov	r0, r1
    ac14:	4611      	mov	r1, r2
    ac16:	461a      	mov	r2, r3
    ac18:	4623      	mov	r3, r4
    ac1a:	f88d 300f 	strb.w	r3, [sp, #15]
    ac1e:	4603      	mov	r3, r0
    ac20:	f8ad 300c 	strh.w	r3, [sp, #12]
    ac24:	460b      	mov	r3, r1
    ac26:	f8ad 300a 	strh.w	r3, [sp, #10]
    ac2a:	4613      	mov	r3, r2
    ac2c:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    ac30:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ac34:	4a68      	ldr	r2, [pc, #416]	; (add8 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    ac36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac3a:	68da      	ldr	r2, [r3, #12]
    ac3c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    ac40:	005b      	lsls	r3, r3, #1
    ac42:	4413      	add	r3, r2
    ac44:	881b      	ldrh	r3, [r3, #0]
    ac46:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    const Adc_GroupConfigurationType * GroupPtr; /* Pointer to AdcGroup */
    Adc_ChannelIndexType CurrentChannel = Adc_axGroupStatus[Group].CurrentChannel;
    ac4a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    ac4e:	4963      	ldr	r1, [pc, #396]	; (addc <Adc_Ipw_CheckConversionChannels+0x1d0>)
    ac50:	4613      	mov	r3, r2
    ac52:	009b      	lsls	r3, r3, #2
    ac54:	4413      	add	r3, r2
    ac56:	009b      	lsls	r3, r3, #2
    ac58:	440b      	add	r3, r1
    ac5a:	3310      	adds	r3, #16
    ac5c:	781b      	ldrb	r3, [r3, #0]
    ac5e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    Adc_ChannelIndexType Temp;
    Adc_ChannelIndexType Index;
    uint16 ConvResult;
    Adc_ValueGroupType * ResultIndex = NULL_PTR;
    ac62:	2300      	movs	r3, #0
    ac64:	9307      	str	r3, [sp, #28]
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    ac66:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ac6a:	4a5b      	ldr	r2, [pc, #364]	; (add8 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    ac6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac70:	681a      	ldr	r2, [r3, #0]
    ac72:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ac76:	4413      	add	r3, r2
    ac78:	7c1b      	ldrb	r3, [r3, #16]
    ac7a:	f88d 301b 	strb.w	r3, [sp, #27]
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    ac7e:	2300      	movs	r3, #0
    ac80:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    const uint8 NumsBitShift = Adc_Ipw_CalculateNumsBitShift(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->Resolution);
    ac84:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ac88:	4a53      	ldr	r2, [pc, #332]	; (add8 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    ac8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac8e:	681b      	ldr	r3, [r3, #0]
    ac90:	f89d 200f 	ldrb.w	r2, [sp, #15]
    ac94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    ac98:	695b      	ldr	r3, [r3, #20]
    ac9a:	4618      	mov	r0, r3
    ac9c:	f7ff fbe6 	bl	a46c <Adc_Ipw_CalculateNumsBitShift>
    aca0:	4603      	mov	r3, r0
    aca2:	f88d 301a 	strb.w	r3, [sp, #26]

    /* record the result of the Channel conversion and update group status */
#if (ADC_SETCHANNEL_API == STD_ON)
    Index = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    Index = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AssignedChannelCount;
    aca6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    acaa:	4a4b      	ldr	r2, [pc, #300]	; (add8 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    acac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acb0:	685a      	ldr	r2, [r3, #4]
    acb2:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    acb6:	2134      	movs	r1, #52	; 0x34
    acb8:	fb01 f303 	mul.w	r3, r1, r3
    acbc:	4413      	add	r3, r2
    acbe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    acc2:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    acc6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    acca:	4a43      	ldr	r2, [pc, #268]	; (add8 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    accc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acd0:	685a      	ldr	r2, [r3, #4]
    acd2:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    acd6:	2134      	movs	r1, #52	; 0x34
    acd8:	fb01 f303 	mul.w	r3, r1, r3
    acdc:	4413      	add	r3, r2
    acde:	9305      	str	r3, [sp, #20]

    if (CurrentChannel <= Index)
    ace0:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    ace4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    ace8:	429a      	cmp	r2, r3
    acea:	d870      	bhi.n	adce <Adc_Ipw_CheckConversionChannels+0x1c2>
    {
        /* Calculate the index of the first channel in the previous configuration */
        Temp = (Adc_ChannelIndexType)ADC_IPW_PREV_CHANNEL_INDEX(CurrentChannel);
    acec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    acf0:	f003 030f 	and.w	r3, r3, #15
    acf4:	b2db      	uxtb	r3, r3
    acf6:	2b00      	cmp	r3, #0
    acf8:	d104      	bne.n	ad04 <Adc_Ipw_CheckConversionChannels+0xf8>
    acfa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    acfe:	3b10      	subs	r3, #16
    ad00:	b2db      	uxtb	r3, r3
    ad02:	e004      	b.n	ad0e <Adc_Ipw_CheckConversionChannels+0x102>
    ad04:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    ad08:	f023 030f 	bic.w	r3, r3, #15
    ad0c:	b2db      	uxtb	r3, r3
    ad0e:	f88d 3013 	strb.w	r3, [sp, #19]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
        /* Get the result buffer pointer */
        if (FALSE == GroupPtr->StreamResultGroupMultiSets)
        {
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
            ResultIndex = &(Adc_axGroupStatus[Group].ResultsBufferPtr[Adc_axGroupStatus[Group].ResultIndex]);
    ad12:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    ad16:	4931      	ldr	r1, [pc, #196]	; (addc <Adc_Ipw_CheckConversionChannels+0x1d0>)
    ad18:	4613      	mov	r3, r2
    ad1a:	009b      	lsls	r3, r3, #2
    ad1c:	4413      	add	r3, r2
    ad1e:	009b      	lsls	r3, r3, #2
    ad20:	440b      	add	r3, r1
    ad22:	330c      	adds	r3, #12
    ad24:	6819      	ldr	r1, [r3, #0]
    ad26:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    ad2a:	482c      	ldr	r0, [pc, #176]	; (addc <Adc_Ipw_CheckConversionChannels+0x1d0>)
    ad2c:	4613      	mov	r3, r2
    ad2e:	009b      	lsls	r3, r3, #2
    ad30:	4413      	add	r3, r2
    ad32:	009b      	lsls	r3, r3, #2
    ad34:	4403      	add	r3, r0
    ad36:	3308      	adds	r3, #8
    ad38:	881b      	ldrh	r3, [r3, #0]
    ad3a:	b29b      	uxth	r3, r3
    ad3c:	005b      	lsls	r3, r3, #1
    ad3e:	440b      	add	r3, r1
    ad40:	9307      	str	r3, [sp, #28]
        {
            ResultIndex = &(Adc_axGroupStatus[Group].ResultsBufferPtr[(Adc_axGroupStatus[Group].ResultIndex * Index)]);
        }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

        ValidConversion = Adc_Ipw_CheckValidConversion(PhysicalHwUnitId, Temp, CurrentChannel);
    ad42:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    ad46:	f89d 1013 	ldrb.w	r1, [sp, #19]
    ad4a:	f89d 301b 	ldrb.w	r3, [sp, #27]
    ad4e:	4618      	mov	r0, r3
    ad50:	f7ff fe50 	bl	a9f4 <Adc_Ipw_CheckValidConversion>
    ad54:	4603      	mov	r3, r0
    ad56:	f88d 3012 	strb.w	r3, [sp, #18]

        if (TRUE == ValidConversion)
    ad5a:	f89d 3012 	ldrb.w	r3, [sp, #18]
    ad5e:	2b00      	cmp	r3, #0
    ad60:	d032      	beq.n	adc8 <Adc_Ipw_CheckConversionChannels+0x1bc>
        {
            /* For each of channels in the list of previous configuration, read data and take result into user buffer */
            for (Index = Temp; Index < CurrentChannel; Index++)
    ad62:	f89d 3013 	ldrb.w	r3, [sp, #19]
    ad66:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    ad6a:	e026      	b.n	adba <Adc_Ipw_CheckConversionChannels+0x1ae>
            {
                ConvResult = Adc_Ip_GetConvData(PhysicalHwUnitId, Index - Temp);
    ad6c:	f89d 001b 	ldrb.w	r0, [sp, #27]
    ad70:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    ad74:	f89d 3013 	ldrb.w	r3, [sp, #19]
    ad78:	1ad3      	subs	r3, r2, r3
    ad7a:	b2db      	uxtb	r3, r3
    ad7c:	4619      	mov	r1, r3
    ad7e:	f7fe fcaf 	bl	96e0 <Adc_Ip_GetConvData>
    ad82:	4603      	mov	r3, r0
    ad84:	f8ad 3010 	strh.w	r3, [sp, #16]
                /* Assumption: the width of the register is less than 16 */
                ConvResult = ConvResult << (NumsBitShift);
    ad88:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    ad8c:	f89d 301a 	ldrb.w	r3, [sp, #26]
    ad90:	fa02 f303 	lsl.w	r3, r2, r3
    ad94:	f8ad 3010 	strh.w	r3, [sp, #16]
                else
                {
                    Adc_Ipw_ReadData(GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);
                }
#else
                Adc_Ipw_ReadData(GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);
    ad98:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    ad9c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    ada0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    ada4:	9300      	str	r3, [sp, #0]
    ada6:	460b      	mov	r3, r1
    ada8:	9907      	ldr	r1, [sp, #28]
    adaa:	9805      	ldr	r0, [sp, #20]
    adac:	f000 fa02 	bl	b1b4 <Adc_Ipw_ReadData>
            for (Index = Temp; Index < CurrentChannel; Index++)
    adb0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    adb4:	3301      	adds	r3, #1
    adb6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    adba:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    adbe:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    adc2:	429a      	cmp	r2, r3
    adc4:	d3d2      	bcc.n	ad6c <Adc_Ipw_CheckConversionChannels+0x160>
    adc6:	e002      	b.n	adce <Adc_Ipw_CheckConversionChannels+0x1c2>
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_ON */
            }
        }
        else
        {
            Status = (Std_ReturnType)E_NOT_OK;
    adc8:	2301      	movs	r3, #1
    adca:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        }
    }

    return Status;
    adce:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
}
    add2:	4618      	mov	r0, r3
    add4:	b00a      	add	sp, #40	; 0x28
    add6:	bd10      	pop	{r4, pc}
    add8:	1fff8d2c 	.word	0x1fff8d2c
    addc:	1fff8d30 	.word	0x1fff8d30

0000ade0 <Adc_Ipw_RestartConversion>:
* @return         void
*/
static inline void Adc_Ipw_RestartConversion(Adc_HwUnitType Unit,
                                             Adc_GroupType Group,
                                             uint8 CoreId)
{
    ade0:	b500      	push	{lr}
    ade2:	b087      	sub	sp, #28
    ade4:	4603      	mov	r3, r0
    ade6:	f88d 300f 	strb.w	r3, [sp, #15]
    adea:	460b      	mov	r3, r1
    adec:	f8ad 300c 	strh.w	r3, [sp, #12]
    adf0:	4613      	mov	r3, r2
    adf2:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    adf6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    adfa:	4a33      	ldr	r2, [pc, #204]	; (aec8 <Adc_Ipw_RestartConversion+0xe8>)
    adfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae00:	68da      	ldr	r2, [r3, #12]
    ae02:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    ae06:	005b      	lsls	r3, r3, #1
    ae08:	4413      	add	r3, r2
    ae0a:	881b      	ldrh	r3, [r3, #0]
    ae0c:	f8ad 3016 	strh.w	r3, [sp, #22]
    const uint32 AdcDmaLogicChId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcDmaChannelLogicId[Unit];
    uint16 ResultIndex;
#endif /*ADC_DMA_SUPPORTED*/
    uint8 NumChannel;
    Adc_ChannelIndexType ChannelCount;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    ae10:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ae14:	4a2c      	ldr	r2, [pc, #176]	; (aec8 <Adc_Ipw_RestartConversion+0xe8>)
    ae16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae1a:	681a      	ldr	r2, [r3, #0]
    ae1c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ae20:	4413      	add	r3, r2
    ae22:	7c1b      	ldrb	r3, [r3, #16]
    ae24:	f88d 3015 	strb.w	r3, [sp, #21]
#if (ADC_SETCHANNEL_API == STD_ON)
    /* Get channel count in case of changing at runtime */
    ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    /* Get channel count from configuration */
    ChannelCount = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AssignedChannelCount;
    ae28:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ae2c:	4a26      	ldr	r2, [pc, #152]	; (aec8 <Adc_Ipw_RestartConversion+0xe8>)
    ae2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae32:	685a      	ldr	r2, [r3, #4]
    ae34:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    ae38:	2134      	movs	r1, #52	; 0x34
    ae3a:	fb01 f303 	mul.w	r3, r1, r3
    ae3e:	4413      	add	r3, r2
    ae40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    ae44:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Get left channel from channel count */
    NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(ChannelCount);
    ae48:	f89d 3014 	ldrb.w	r3, [sp, #20]
    ae4c:	2b0f      	cmp	r3, #15
    ae4e:	d805      	bhi.n	ae5c <Adc_Ipw_RestartConversion+0x7c>
    ae50:	f89d 3014 	ldrb.w	r3, [sp, #20]
    ae54:	f003 030f 	and.w	r3, r3, #15
    ae58:	b2db      	uxtb	r3, r3
    ae5a:	e000      	b.n	ae5e <Adc_Ipw_RestartConversion+0x7e>
    ae5c:	2310      	movs	r3, #16
    ae5e:	f88d 3013 	strb.w	r3, [sp, #19]
        if (FALSE == GroupPtr->AdcOptimizeDmaStream)
#endif /*  (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /*ADC_DMA_SUPPORTED*/
        {
            /* Incase of the number of channels in group less than the SC1 register used then update group status and start Pdb */
            if (ChannelCount <= ADC_MAX_CHAN_COUNT)
    ae62:	f89d 3014 	ldrb.w	r3, [sp, #20]
    ae66:	2b10      	cmp	r3, #16
    ae68:	d811      	bhi.n	ae8e <Adc_Ipw_RestartConversion+0xae>
            {
                /* No need to re-configure channels if they are not changed */
                /* End of chain interrupt (if used) is still in last channel (= ChannelCount) */
                Adc_axGroupStatus[Group].CurrentChannel = ChannelCount;
    ae6a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    ae6e:	4917      	ldr	r1, [pc, #92]	; (aecc <Adc_Ipw_RestartConversion+0xec>)
    ae70:	4613      	mov	r3, r2
    ae72:	009b      	lsls	r3, r3, #2
    ae74:	4413      	add	r3, r2
    ae76:	009b      	lsls	r3, r3, #2
    ae78:	440b      	add	r3, r1
    ae7a:	3310      	adds	r3, #16
    ae7c:	f89d 2014 	ldrb.w	r2, [sp, #20]
    ae80:	701a      	strb	r2, [r3, #0]

                /* Trigger PDB by software */
                Pdb_Adc_Ip_SwTrigger(PhysicalHwUnitId);
    ae82:	f89d 3015 	ldrb.w	r3, [sp, #21]
    ae86:	4618      	mov	r0, r3
    ae88:	f000 fc68 	bl	b75c <Pdb_Adc_Ip_SwTrigger>
                    Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
                }
            }
        }
    }
}
    ae8c:	e017      	b.n	aebe <Adc_Ipw_RestartConversion+0xde>
                Adc_axGroupStatus[Group].CurrentChannel = 0U;
    ae8e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    ae92:	490e      	ldr	r1, [pc, #56]	; (aecc <Adc_Ipw_RestartConversion+0xec>)
    ae94:	4613      	mov	r3, r2
    ae96:	009b      	lsls	r3, r3, #2
    ae98:	4413      	add	r3, r2
    ae9a:	009b      	lsls	r3, r3, #2
    ae9c:	440b      	add	r3, r1
    ae9e:	3310      	adds	r3, #16
    aea0:	2200      	movs	r2, #0
    aea2:	701a      	strb	r2, [r3, #0]
                    Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
    aea4:	f89d 2013 	ldrb.w	r2, [sp, #19]
    aea8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    aeac:	f89d 000f 	ldrb.w	r0, [sp, #15]
    aeb0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    aeb4:	9300      	str	r3, [sp, #0]
    aeb6:	4613      	mov	r3, r2
    aeb8:	220f      	movs	r2, #15
    aeba:	f7ff fae1 	bl	a480 <Adc_Ipw_ConfigureConversion>
}
    aebe:	bf00      	nop
    aec0:	b007      	add	sp, #28
    aec2:	f85d fb04 	ldr.w	pc, [sp], #4
    aec6:	bf00      	nop
    aec8:	1fff8d2c 	.word	0x1fff8d2c
    aecc:	1fff8d30 	.word	0x1fff8d30

0000aed0 <Adc_Ipw_GetCurrentSampleCount>:
                                                   , Adc_HwUnitType Unit,
                                                   Adc_StreamNumSampleType GroupSamples,
                                                   uint8 CoreId
                                                #endif
                                                  )
{
    aed0:	b084      	sub	sp, #16
    aed2:	4603      	mov	r3, r0
    aed4:	f8ad 3006 	strh.w	r3, [sp, #6]
    }
    else
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /* ADC_DMA_SUPPORTED */
    {
        CurrentSampleCount = Adc_axGroupStatus[Group].ResultIndex;
    aed8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    aedc:	4907      	ldr	r1, [pc, #28]	; (aefc <Adc_Ipw_GetCurrentSampleCount+0x2c>)
    aede:	4613      	mov	r3, r2
    aee0:	009b      	lsls	r3, r3, #2
    aee2:	4413      	add	r3, r2
    aee4:	009b      	lsls	r3, r3, #2
    aee6:	440b      	add	r3, r1
    aee8:	3308      	adds	r3, #8
    aeea:	881b      	ldrh	r3, [r3, #0]
    aeec:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    return CurrentSampleCount;
    aef0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    aef4:	4618      	mov	r0, r3
    aef6:	b004      	add	sp, #16
    aef8:	4770      	bx	lr
    aefa:	bf00      	nop
    aefc:	1fff8d30 	.word	0x1fff8d30

0000af00 <Adc_Ipw_UpdateSoftwareGroupState>:
*/
static inline void Adc_Ipw_UpdateSoftwareGroupState(Adc_HwUnitType Unit,
                                                    Adc_GroupType Group,
                                                    Adc_StreamNumSampleType GroupSamples,
                                                    uint8 CoreId)
{
    af00:	b510      	push	{r4, lr}
    af02:	b084      	sub	sp, #16
    af04:	4604      	mov	r4, r0
    af06:	4608      	mov	r0, r1
    af08:	4611      	mov	r1, r2
    af0a:	461a      	mov	r2, r3
    af0c:	4623      	mov	r3, r4
    af0e:	f88d 3007 	strb.w	r3, [sp, #7]
    af12:	4603      	mov	r3, r0
    af14:	f8ad 3004 	strh.w	r3, [sp, #4]
    af18:	460b      	mov	r3, r1
    af1a:	f8ad 3002 	strh.w	r3, [sp, #2]
    af1e:	4613      	mov	r3, r2
    af20:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 CurrentSampleCount;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    af24:	f89d 3006 	ldrb.w	r3, [sp, #6]
    af28:	4a4f      	ldr	r2, [pc, #316]	; (b068 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    af2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af2e:	68da      	ldr	r2, [r3, #12]
    af30:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    af34:	005b      	lsls	r3, r3, #1
    af36:	4413      	add	r3, r2
    af38:	881b      	ldrh	r3, [r3, #0]
    af3a:	f8ad 300e 	strh.w	r3, [sp, #14]
    Dma_Ip_LogicChannelScatterGatherListType LocTransferList[1U];
#endif /* ADC_DMA_SUPPORTED */

    /* At least once the group was converted */
    /* It's already check for validation */
    Adc_axGroupStatus[Group].AlreadyConverted = ADC_ALREADY_CONVERTED;
    af3e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    af42:	494a      	ldr	r1, [pc, #296]	; (b06c <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    af44:	4613      	mov	r3, r2
    af46:	009b      	lsls	r3, r3, #2
    af48:	4413      	add	r3, r2
    af4a:	009b      	lsls	r3, r3, #2
    af4c:	440b      	add	r3, r1
    af4e:	3304      	adds	r3, #4
    af50:	2201      	movs	r2, #1
    af52:	601a      	str	r2, [r3, #0]
    /* Although updating Conversion is a RMW operation, it does not need an
     * exclusive area because two simultaneous interrupts will not access the
     * same areas e.g. the interrupt for ADC1 will not have the same group as
     * an interrupt on ADC0 */
    /* Change when configuration is ADC streaming access mode */
    if (ADC_BUSY == Adc_axGroupStatus[Group].Conversion)
    af54:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    af58:	4944      	ldr	r1, [pc, #272]	; (b06c <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    af5a:	4613      	mov	r3, r2
    af5c:	009b      	lsls	r3, r3, #2
    af5e:	4413      	add	r3, r2
    af60:	009b      	lsls	r3, r3, #2
    af62:	440b      	add	r3, r1
    af64:	681b      	ldr	r3, [r3, #0]
    af66:	2b01      	cmp	r3, #1
    af68:	d109      	bne.n	af7e <Adc_Ipw_UpdateSoftwareGroupState+0x7e>
    {
        /* SWS_Adc_00224 */
        Adc_axGroupStatus[Group].Conversion = ADC_COMPLETED;
    af6a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    af6e:	493f      	ldr	r1, [pc, #252]	; (b06c <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    af70:	4613      	mov	r3, r2
    af72:	009b      	lsls	r3, r3, #2
    af74:	4413      	add	r3, r2
    af76:	009b      	lsls	r3, r3, #2
    af78:	440b      	add	r3, r1
    af7a:	2202      	movs	r2, #2
    af7c:	601a      	str	r2, [r3, #0]
    }

#if (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS)
    CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount(Group, Unit, GroupSamples, CoreId);
#else
    CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount(Group);
    af7e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    af82:	4618      	mov	r0, r3
    af84:	f7ff ffa4 	bl	aed0 <Adc_Ipw_GetCurrentSampleCount>
    af88:	9002      	str	r0, [sp, #8]
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */

    /* If buffer is full of samples */
    if (CurrentSampleCount >= GroupSamples)
    af8a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    af8e:	9a02      	ldr	r2, [sp, #8]
    af90:	429a      	cmp	r2, r3
    af92:	d35d      	bcc.n	b050 <Adc_Ipw_UpdateSoftwareGroupState+0x150>
    {
        /* Change to stream complete according to AutoSar diagram */
        Adc_axGroupStatus[Group].Conversion = ADC_STREAM_COMPLETED;
    af94:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    af98:	4934      	ldr	r1, [pc, #208]	; (b06c <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    af9a:	4613      	mov	r3, r2
    af9c:	009b      	lsls	r3, r3, #2
    af9e:	4413      	add	r3, r2
    afa0:	009b      	lsls	r3, r3, #2
    afa2:	440b      	add	r3, r1
    afa4:	2203      	movs	r2, #3
    afa6:	601a      	str	r2, [r3, #0]

        if ((ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) && \
    afa8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    afac:	4a2e      	ldr	r2, [pc, #184]	; (b068 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    afae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afb2:	685a      	ldr	r2, [r3, #4]
    afb4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    afb8:	2134      	movs	r1, #52	; 0x34
    afba:	fb01 f303 	mul.w	r3, r1, r3
    afbe:	4413      	add	r3, r2
    afc0:	699b      	ldr	r3, [r3, #24]
    afc2:	2b00      	cmp	r3, #0
    afc4:	d117      	bne.n	aff6 <Adc_Ipw_UpdateSoftwareGroupState+0xf6>
            (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) \
    afc6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    afca:	4a27      	ldr	r2, [pc, #156]	; (b068 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    afcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afd0:	685a      	ldr	r2, [r3, #4]
    afd2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    afd6:	2134      	movs	r1, #52	; 0x34
    afd8:	fb01 f303 	mul.w	r3, r1, r3
    afdc:	4413      	add	r3, r2
    afde:	685b      	ldr	r3, [r3, #4]
        if ((ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) && \
    afe0:	2b01      	cmp	r3, #1
    afe2:	d108      	bne.n	aff6 <Adc_Ipw_UpdateSoftwareGroupState+0xf6>
                Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
            }
#endif /*  (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /* ADC_DMA_SUPPORTED */
            /* Update queue and execute new start conversion request from queue if available */
            Adc_Ipw_UpdateQueue(Unit, CoreId);
    afe4:	f89d 2006 	ldrb.w	r2, [sp, #6]
    afe8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    afec:	4611      	mov	r1, r2
    afee:	4618      	mov	r0, r3
    aff0:	f7ff fde6 	bl	abc0 <Adc_Ipw_UpdateQueue>

#if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
    /* Implement user notification function if available */
    Adc_Ipw_CallNotification(Group, CoreId);
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */
}
    aff4:	e035      	b.n	b062 <Adc_Ipw_UpdateSoftwareGroupState+0x162>
            if (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)
    aff6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    affa:	4a1b      	ldr	r2, [pc, #108]	; (b068 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    affc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b000:	685a      	ldr	r2, [r3, #4]
    b002:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    b006:	2134      	movs	r1, #52	; 0x34
    b008:	fb01 f303 	mul.w	r3, r1, r3
    b00c:	4413      	add	r3, r2
    b00e:	689b      	ldr	r3, [r3, #8]
    b010:	2b01      	cmp	r3, #1
    b012:	d114      	bne.n	b03e <Adc_Ipw_UpdateSoftwareGroupState+0x13e>
                Adc_axGroupStatus[Group].ResultIndex = 0U;
    b014:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    b018:	4914      	ldr	r1, [pc, #80]	; (b06c <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    b01a:	4613      	mov	r3, r2
    b01c:	009b      	lsls	r3, r3, #2
    b01e:	4413      	add	r3, r2
    b020:	009b      	lsls	r3, r3, #2
    b022:	440b      	add	r3, r1
    b024:	3308      	adds	r3, #8
    b026:	2200      	movs	r2, #0
    b028:	801a      	strh	r2, [r3, #0]
                Adc_Ipw_RestartConversion(Unit, Group, CoreId);
    b02a:	f89d 2006 	ldrb.w	r2, [sp, #6]
    b02e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    b032:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b036:	4618      	mov	r0, r3
    b038:	f7ff fed2 	bl	ade0 <Adc_Ipw_RestartConversion>
}
    b03c:	e011      	b.n	b062 <Adc_Ipw_UpdateSoftwareGroupState+0x162>
                Adc_Ipw_UpdateQueue(Unit, CoreId);
    b03e:	f89d 2006 	ldrb.w	r2, [sp, #6]
    b042:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b046:	4611      	mov	r1, r2
    b048:	4618      	mov	r0, r3
    b04a:	f7ff fdb9 	bl	abc0 <Adc_Ipw_UpdateQueue>
}
    b04e:	e008      	b.n	b062 <Adc_Ipw_UpdateSoftwareGroupState+0x162>
        Adc_Ipw_RestartConversion(Unit, Group, CoreId);
    b050:	f89d 2006 	ldrb.w	r2, [sp, #6]
    b054:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    b058:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b05c:	4618      	mov	r0, r3
    b05e:	f7ff febf 	bl	ade0 <Adc_Ipw_RestartConversion>
}
    b062:	bf00      	nop
    b064:	b004      	add	sp, #16
    b066:	bd10      	pop	{r4, pc}
    b068:	1fff8d2c 	.word	0x1fff8d2c
    b06c:	1fff8d30 	.word	0x1fff8d30

0000b070 <Adc_Ipw_EndConversion>:
*/
static inline void Adc_Ipw_EndConversion(Adc_HwUnitType Unit,
                                         Adc_GroupType Group,
                                         boolean IsSoftwareConversion,
                                         uint8 CoreId)
{
    b070:	b510      	push	{r4, lr}
    b072:	b088      	sub	sp, #32
    b074:	4604      	mov	r4, r0
    b076:	4608      	mov	r0, r1
    b078:	4611      	mov	r1, r2
    b07a:	461a      	mov	r2, r3
    b07c:	4623      	mov	r3, r4
    b07e:	f88d 300f 	strb.w	r3, [sp, #15]
    b082:	4603      	mov	r3, r0
    b084:	f8ad 300c 	strh.w	r3, [sp, #12]
    b088:	460b      	mov	r3, r1
    b08a:	f88d 300e 	strb.w	r3, [sp, #14]
    b08e:	4613      	mov	r3, r2
    b090:	f88d 300b 	strb.w	r3, [sp, #11]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    b094:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b098:	4a44      	ldr	r2, [pc, #272]	; (b1ac <Adc_Ipw_EndConversion+0x13c>)
    b09a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b09e:	68da      	ldr	r2, [r3, #12]
    b0a0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    b0a4:	005b      	lsls	r3, r3, #1
    b0a6:	4413      	add	r3, r2
    b0a8:	881b      	ldrh	r3, [r3, #0]
    b0aa:	f8ad 301e 	strh.w	r3, [sp, #30]
#if ((ADC_SETCHANNEL_API == STD_ON) || ((ADC_SETCHANNEL_API == STD_OFF) && (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF)))
    Adc_ChannelIndexType ChannelCount;
#endif /* ((ADC_SETCHANNEL_API == STD_ON) || ((ADC_SETCHANNEL_API == STD_OFF) && (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF))) */

    /* Get the group configuration */
    GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    b0ae:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b0b2:	4a3e      	ldr	r2, [pc, #248]	; (b1ac <Adc_Ipw_EndConversion+0x13c>)
    b0b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0b8:	685a      	ldr	r2, [r3, #4]
    b0ba:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    b0be:	2134      	movs	r1, #52	; 0x34
    b0c0:	fb01 f303 	mul.w	r3, r1, r3
    b0c4:	4413      	add	r3, r2
    b0c6:	9306      	str	r3, [sp, #24]
    }
    else
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    {
        /* Limit checking */
        if ((Std_ReturnType)E_OK == Adc_Ipw_CheckConversionChannels(Unit, Group, GroupPtr->NumSamples, CoreId))
    b0c8:	9b06      	ldr	r3, [sp, #24]
    b0ca:	8b9a      	ldrh	r2, [r3, #28]
    b0cc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b0d0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    b0d4:	f89d 000f 	ldrb.w	r0, [sp, #15]
    b0d8:	f7ff fd98 	bl	ac0c <Adc_Ipw_CheckConversionChannels>
    b0dc:	4603      	mov	r3, r0
    b0de:	2b00      	cmp	r3, #0
    b0e0:	d160      	bne.n	b1a4 <Adc_Ipw_EndConversion+0x134>
        {
#if (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF)
            /* Following code will not be reduced when oneshot hardware trigger optimization is not enabled */
#if (ADC_SETCHANNEL_API == STD_OFF)
            /* Channels configured when initializing */
            ChannelCount = GroupPtr->AssignedChannelCount;
    b0e2:	9b06      	ldr	r3, [sp, #24]
    b0e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    b0e8:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

            /* More channels in group */
            /* Both HW and SW groups are using PDB SW trigger mode to restart conversion when ChannelCount > Max SC registers */
            if (Adc_axGroupStatus[Group].CurrentChannel < ChannelCount)
    b0ec:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    b0f0:	492f      	ldr	r1, [pc, #188]	; (b1b0 <Adc_Ipw_EndConversion+0x140>)
    b0f2:	4613      	mov	r3, r2
    b0f4:	009b      	lsls	r3, r3, #2
    b0f6:	4413      	add	r3, r2
    b0f8:	009b      	lsls	r3, r3, #2
    b0fa:	440b      	add	r3, r1
    b0fc:	3310      	adds	r3, #16
    b0fe:	781b      	ldrb	r3, [r3, #0]
    b100:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b104:	429a      	cmp	r2, r3
    b106:	d929      	bls.n	b15c <Adc_Ipw_EndConversion+0xec>
            {
                /* Get left channel */
                NumChannel = ChannelCount - Adc_axGroupStatus[Group].CurrentChannel;
    b108:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    b10c:	4928      	ldr	r1, [pc, #160]	; (b1b0 <Adc_Ipw_EndConversion+0x140>)
    b10e:	4613      	mov	r3, r2
    b110:	009b      	lsls	r3, r3, #2
    b112:	4413      	add	r3, r2
    b114:	009b      	lsls	r3, r3, #2
    b116:	440b      	add	r3, r1
    b118:	3310      	adds	r3, #16
    b11a:	781b      	ldrb	r3, [r3, #0]
    b11c:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b120:	1ad3      	subs	r3, r2, r3
    b122:	f88d 3016 	strb.w	r3, [sp, #22]

                /* In case of left channels excess maximum allowed channels */
                LeftChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(NumChannel);
    b126:	f89d 3016 	ldrb.w	r3, [sp, #22]
    b12a:	2b0f      	cmp	r3, #15
    b12c:	d805      	bhi.n	b13a <Adc_Ipw_EndConversion+0xca>
    b12e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    b132:	f003 030f 	and.w	r3, r3, #15
    b136:	b2db      	uxtb	r3, r3
    b138:	e000      	b.n	b13c <Adc_Ipw_EndConversion+0xcc>
    b13a:	2310      	movs	r3, #16
    b13c:	f88d 3015 	strb.w	r3, [sp, #21]

                /* Configure left channels and start more conversions */
                Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, LeftChannel, CoreId);
    b140:	f89d 2015 	ldrb.w	r2, [sp, #21]
    b144:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    b148:	f89d 000f 	ldrb.w	r0, [sp, #15]
    b14c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b150:	9300      	str	r3, [sp, #0]
    b152:	4613      	mov	r3, r2
    b154:	220f      	movs	r2, #15
    b156:	f7ff f993 	bl	a480 <Adc_Ipw_ConfigureConversion>
                Adc_Ipw_HandleConversionCheckFail(Unit, Group, GroupPtr, CoreId);
            }
        }
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
    }
}
    b15a:	e023      	b.n	b1a4 <Adc_Ipw_EndConversion+0x134>
                Adc_axGroupStatus[Group].ResultIndex++;
    b15c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    b160:	4913      	ldr	r1, [pc, #76]	; (b1b0 <Adc_Ipw_EndConversion+0x140>)
    b162:	4613      	mov	r3, r2
    b164:	009b      	lsls	r3, r3, #2
    b166:	4413      	add	r3, r2
    b168:	009b      	lsls	r3, r3, #2
    b16a:	440b      	add	r3, r1
    b16c:	3308      	adds	r3, #8
    b16e:	881b      	ldrh	r3, [r3, #0]
    b170:	b29b      	uxth	r3, r3
    b172:	3301      	adds	r3, #1
    b174:	b298      	uxth	r0, r3
    b176:	490e      	ldr	r1, [pc, #56]	; (b1b0 <Adc_Ipw_EndConversion+0x140>)
    b178:	4613      	mov	r3, r2
    b17a:	009b      	lsls	r3, r3, #2
    b17c:	4413      	add	r3, r2
    b17e:	009b      	lsls	r3, r3, #2
    b180:	440b      	add	r3, r1
    b182:	3308      	adds	r3, #8
    b184:	4602      	mov	r2, r0
    b186:	801a      	strh	r2, [r3, #0]
                if (TRUE == IsSoftwareConversion)
    b188:	f89d 300e 	ldrb.w	r3, [sp, #14]
    b18c:	2b00      	cmp	r3, #0
    b18e:	d009      	beq.n	b1a4 <Adc_Ipw_EndConversion+0x134>
                    Adc_Ipw_UpdateSoftwareGroupState(Unit, Group, GroupPtr->NumSamples, CoreId);
    b190:	9b06      	ldr	r3, [sp, #24]
    b192:	8b9a      	ldrh	r2, [r3, #28]
    b194:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b198:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    b19c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    b1a0:	f7ff feae 	bl	af00 <Adc_Ipw_UpdateSoftwareGroupState>
}
    b1a4:	bf00      	nop
    b1a6:	b008      	add	sp, #32
    b1a8:	bd10      	pop	{r4, pc}
    b1aa:	bf00      	nop
    b1ac:	1fff8d2c 	.word	0x1fff8d2c
    b1b0:	1fff8d30 	.word	0x1fff8d30

0000b1b4 <Adc_Ipw_ReadData>:
static inline void Adc_Ipw_ReadData(const Adc_GroupConfigurationType * GroupPtr,
                                    Adc_ValueGroupType * ResultPtr,
                                    const Adc_StreamNumSampleType GroupSamples,
                                    const Adc_ChannelIndexType Index,
                                    const uint16 ConvResult)
{
    b1b4:	b084      	sub	sp, #16
    b1b6:	9003      	str	r0, [sp, #12]
    b1b8:	9102      	str	r1, [sp, #8]
    b1ba:	4611      	mov	r1, r2
    b1bc:	461a      	mov	r2, r3
    b1be:	460b      	mov	r3, r1
    b1c0:	f8ad 3006 	strh.w	r3, [sp, #6]
    b1c4:	4613      	mov	r3, r2
    b1c6:	f88d 3005 	strb.w	r3, [sp, #5]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    if (FALSE == GroupPtr->StreamResultGroupMultiSets)
    {
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
        ResultPtr[(Index * GroupSamples)] = ConvResult;
    b1ca:	f89d 3005 	ldrb.w	r3, [sp, #5]
    b1ce:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    b1d2:	fb02 f303 	mul.w	r3, r2, r3
    b1d6:	005b      	lsls	r3, r3, #1
    b1d8:	9a02      	ldr	r2, [sp, #8]
    b1da:	4413      	add	r3, r2
    b1dc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    b1e0:	801a      	strh	r2, [r3, #0]
    else
    {
        ResultPtr[Index] = ConvResult;
    }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
}
    b1e2:	bf00      	nop
    b1e4:	b004      	add	sp, #16
    b1e6:	4770      	bx	lr

0000b1e8 <Adc_Ipw_EndConversionNotification>:
* @param[in]      PhysicalAdcUnit   ADC Hardware Unit
*
* @return         void
*/
static inline void Adc_Ipw_EndConversionNotification(const Adc_HwUnitType PhysicalAdcUnit)
{
    b1e8:	b500      	push	{lr}
    b1ea:	b085      	sub	sp, #20
    b1ec:	4603      	mov	r3, r0
    b1ee:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Check that ADC unit is assigned to current core partition */
    const volatile uint8 CoreId = Adc_GetCoreID();
    b1f2:	f7ff fce1 	bl	abb8 <Adc_GetCoreID>
    b1f6:	4603      	mov	r3, r0
    b1f8:	f88d 300b 	strb.w	r3, [sp, #11]
    const Adc_HwUnitType LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.HwLogicalId[PhysicalAdcUnit];
    b1fc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b200:	b2db      	uxtb	r3, r3
    b202:	461a      	mov	r2, r3
    b204:	4b14      	ldr	r3, [pc, #80]	; (b258 <Adc_Ipw_EndConversionNotification+0x70>)
    b206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b20a:	681a      	ldr	r2, [r3, #0]
    b20c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b210:	4413      	add	r3, r2
    b212:	f893 3020 	ldrb.w	r3, [r3, #32]
    b216:	f88d 300f 	strb.w	r3, [sp, #15]
    const Adc_GroupType SwGroupId = Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[0U];
    b21a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b21e:	4a0f      	ldr	r2, [pc, #60]	; (b25c <Adc_Ipw_EndConversionNotification+0x74>)
    b220:	00db      	lsls	r3, r3, #3
    b222:	4413      	add	r3, r2
    b224:	885b      	ldrh	r3, [r3, #2]
    b226:	f8ad 300c 	strh.w	r3, [sp, #12]
            Adc_Ipw_EndConversion(LogicalHwUnitId, HwGroupId, FALSE, CoreId);
        }
    }
    else
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    b22a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b22e:	4a0b      	ldr	r2, [pc, #44]	; (b25c <Adc_Ipw_EndConversionNotification+0x74>)
    b230:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    b234:	b29b      	uxth	r3, r3
    b236:	2b00      	cmp	r3, #0
    b238:	d009      	beq.n	b24e <Adc_Ipw_EndConversionNotification+0x66>
            Adc_Ipw_EndDmaConversion(LogicalHwUnitId, SwGroupId, TRUE, CoreId);
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            Adc_Ipw_EndConversion(LogicalHwUnitId, SwGroupId, TRUE, CoreId);
    b23a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b23e:	b2db      	uxtb	r3, r3
    b240:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    b244:	f89d 000f 	ldrb.w	r0, [sp, #15]
    b248:	2201      	movs	r2, #1
    b24a:	f7ff ff11 	bl	b070 <Adc_Ipw_EndConversion>
    else
    {
        ; /* Empty else branch to avoid MISRA */
    }
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
}
    b24e:	bf00      	nop
    b250:	b005      	add	sp, #20
    b252:	f85d fb04 	ldr.w	pc, [sp], #4
    b256:	bf00      	nop
    b258:	1fff8d2c 	.word	0x1fff8d2c
    b25c:	1fff8d58 	.word	0x1fff8d58

0000b260 <Adc_Ipw_Adc0EndConversionNotification>:
*
* @return         void
*
*/
void Adc_Ipw_Adc0EndConversionNotification(const uint8 ControlChanIdx)
{
    b260:	b500      	push	{lr}
    b262:	b085      	sub	sp, #20
    b264:	4603      	mov	r3, r0
    b266:	f88d 3007 	strb.w	r3, [sp, #7]
    const Adc_HwUnitType PhysicalAdcUnit = 0U;
    b26a:	2300      	movs	r3, #0
    b26c:	f88d 300f 	strb.w	r3, [sp, #15]

    (void)ControlChanIdx;

    Adc_Ipw_EndConversionNotification(PhysicalAdcUnit);
    b270:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b274:	4618      	mov	r0, r3
    b276:	f7ff ffb7 	bl	b1e8 <Adc_Ipw_EndConversionNotification>
}
    b27a:	bf00      	nop
    b27c:	b005      	add	sp, #20
    b27e:	f85d fb04 	ldr.w	pc, [sp], #4

0000b282 <Adc_Ipw_Adc1EndConversionNotification>:
*
* @return         void
*
*/
void Adc_Ipw_Adc1EndConversionNotification(const uint8 ControlChanIdx)
{
    b282:	b500      	push	{lr}
    b284:	b085      	sub	sp, #20
    b286:	4603      	mov	r3, r0
    b288:	f88d 3007 	strb.w	r3, [sp, #7]
    const Adc_HwUnitType PhysicalAdcUnit = 1U;
    b28c:	2301      	movs	r3, #1
    b28e:	f88d 300f 	strb.w	r3, [sp, #15]

    (void)ControlChanIdx;

    Adc_Ipw_EndConversionNotification(PhysicalAdcUnit);
    b292:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b296:	4618      	mov	r0, r3
    b298:	f7ff ffa6 	bl	b1e8 <Adc_Ipw_EndConversionNotification>
}
    b29c:	bf00      	nop
    b29e:	b005      	add	sp, #20
    b2a0:	f85d fb04 	ldr.w	pc, [sp], #4

0000b2a4 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>:

static inline void Pdb_Adc_HwAcc_SetAdcPretriggerMask(PDB_Type * const Base,
                                                      const uint8 ChanIdx,
                                                      const uint32 Mask,
                                                      const boolean Value)
{
    b2a4:	b084      	sub	sp, #16
    b2a6:	9003      	str	r0, [sp, #12]
    b2a8:	9201      	str	r2, [sp, #4]
    b2aa:	461a      	mov	r2, r3
    b2ac:	460b      	mov	r3, r1
    b2ae:	f88d 300b 	strb.w	r3, [sp, #11]
    b2b2:	4613      	mov	r3, r2
    b2b4:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Set C1 register of a channel based on mask */
    if (Value == TRUE)
    b2b8:	f89d 300a 	ldrb.w	r3, [sp, #10]
    b2bc:	2b00      	cmp	r3, #0
    b2be:	d016      	beq.n	b2ee <Pdb_Adc_HwAcc_SetAdcPretriggerMask+0x4a>
    {
        Base->CH[ChanIdx].C1 |= Mask;
    b2c0:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b2c4:	9903      	ldr	r1, [sp, #12]
    b2c6:	4613      	mov	r3, r2
    b2c8:	009b      	lsls	r3, r3, #2
    b2ca:	4413      	add	r3, r2
    b2cc:	00db      	lsls	r3, r3, #3
    b2ce:	440b      	add	r3, r1
    b2d0:	3310      	adds	r3, #16
    b2d2:	6819      	ldr	r1, [r3, #0]
    b2d4:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b2d8:	9b01      	ldr	r3, [sp, #4]
    b2da:	4319      	orrs	r1, r3
    b2dc:	9803      	ldr	r0, [sp, #12]
    b2de:	4613      	mov	r3, r2
    b2e0:	009b      	lsls	r3, r3, #2
    b2e2:	4413      	add	r3, r2
    b2e4:	00db      	lsls	r3, r3, #3
    b2e6:	4403      	add	r3, r0
    b2e8:	3310      	adds	r3, #16
    b2ea:	6019      	str	r1, [r3, #0]
    }
    else
    {
        Base->CH[ChanIdx].C1 &= ~(Mask);
    }
}
    b2ec:	e016      	b.n	b31c <Pdb_Adc_HwAcc_SetAdcPretriggerMask+0x78>
        Base->CH[ChanIdx].C1 &= ~(Mask);
    b2ee:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b2f2:	9903      	ldr	r1, [sp, #12]
    b2f4:	4613      	mov	r3, r2
    b2f6:	009b      	lsls	r3, r3, #2
    b2f8:	4413      	add	r3, r2
    b2fa:	00db      	lsls	r3, r3, #3
    b2fc:	440b      	add	r3, r1
    b2fe:	3310      	adds	r3, #16
    b300:	6819      	ldr	r1, [r3, #0]
    b302:	9b01      	ldr	r3, [sp, #4]
    b304:	43db      	mvns	r3, r3
    b306:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b30a:	4019      	ands	r1, r3
    b30c:	9803      	ldr	r0, [sp, #12]
    b30e:	4613      	mov	r3, r2
    b310:	009b      	lsls	r3, r3, #2
    b312:	4413      	add	r3, r2
    b314:	00db      	lsls	r3, r3, #3
    b316:	4403      	add	r3, r0
    b318:	3310      	adds	r3, #16
    b31a:	6019      	str	r1, [r3, #0]
}
    b31c:	bf00      	nop
    b31e:	b004      	add	sp, #16
    b320:	4770      	bx	lr

0000b322 <Pdb_Adc_HwAcc_DisablePdb>:

static inline void Pdb_Adc_HwAcc_DisablePdb(PDB_Type * const Base)
{
    b322:	b082      	sub	sp, #8
    b324:	9001      	str	r0, [sp, #4]
    /* Disable PDB by clearing PDBEN bit of SC register */
    Base->SC &= ~(PDB_SC_PDBEN_MASK);
    b326:	9b01      	ldr	r3, [sp, #4]
    b328:	681b      	ldr	r3, [r3, #0]
    b32a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    b32e:	9b01      	ldr	r3, [sp, #4]
    b330:	601a      	str	r2, [r3, #0]
}
    b332:	bf00      	nop
    b334:	b002      	add	sp, #8
    b336:	4770      	bx	lr

0000b338 <Pdb_Adc_HwAcc_SetContinuousMode>:

static inline void Pdb_Adc_HwAcc_SetContinuousMode(PDB_Type * const Base,
                                                   const boolean State)
{
    b338:	b082      	sub	sp, #8
    b33a:	9001      	str	r0, [sp, #4]
    b33c:	460b      	mov	r3, r1
    b33e:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Update ContinuousMode value found in SC register */
    if (State == TRUE)
    b342:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b346:	2b00      	cmp	r3, #0
    b348:	d006      	beq.n	b358 <Pdb_Adc_HwAcc_SetContinuousMode+0x20>
    {
        Base->SC |= PDB_SC_CONT_MASK;
    b34a:	9b01      	ldr	r3, [sp, #4]
    b34c:	681b      	ldr	r3, [r3, #0]
    b34e:	f043 0202 	orr.w	r2, r3, #2
    b352:	9b01      	ldr	r3, [sp, #4]
    b354:	601a      	str	r2, [r3, #0]
    }
    else
    {
        Base->SC &= ~(PDB_SC_CONT_MASK);
    }
}
    b356:	e005      	b.n	b364 <Pdb_Adc_HwAcc_SetContinuousMode+0x2c>
        Base->SC &= ~(PDB_SC_CONT_MASK);
    b358:	9b01      	ldr	r3, [sp, #4]
    b35a:	681b      	ldr	r3, [r3, #0]
    b35c:	f023 0202 	bic.w	r2, r3, #2
    b360:	9b01      	ldr	r3, [sp, #4]
    b362:	601a      	str	r2, [r3, #0]
}
    b364:	bf00      	nop
    b366:	b002      	add	sp, #8
    b368:	4770      	bx	lr

0000b36a <Pdb_Adc_HwAcc_ConfigAdcPretriggers>:

static inline void Pdb_Adc_HwAcc_ConfigAdcPretriggers(PDB_Type * const Base,
                                                      const uint8 ChanIdx,
                                                      const Pdb_Adc_Ip_PretriggersConfigType * const Config)
{
    b36a:	b086      	sub	sp, #24
    b36c:	9003      	str	r0, [sp, #12]
    b36e:	460b      	mov	r3, r1
    b370:	9201      	str	r2, [sp, #4]
    b372:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Configure all channel's pretriggers by updating all fields of the C1 register */
    uint32 C1Reg = Base->CH[ChanIdx].C1;
    b376:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b37a:	9903      	ldr	r1, [sp, #12]
    b37c:	4613      	mov	r3, r2
    b37e:	009b      	lsls	r3, r3, #2
    b380:	4413      	add	r3, r2
    b382:	00db      	lsls	r3, r3, #3
    b384:	440b      	add	r3, r1
    b386:	3310      	adds	r3, #16
    b388:	681b      	ldr	r3, [r3, #0]
    b38a:	9305      	str	r3, [sp, #20]
    C1Reg &= ~(PDB_C1_EN_MASK | PDB_C1_TOS_MASK | PDB_C1_BB_MASK);
    b38c:	9b05      	ldr	r3, [sp, #20]
    b38e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    b392:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_EN(Config->EnableMask);
    b394:	9b01      	ldr	r3, [sp, #4]
    b396:	781b      	ldrb	r3, [r3, #0]
    b398:	461a      	mov	r2, r3
    b39a:	9b05      	ldr	r3, [sp, #20]
    b39c:	4313      	orrs	r3, r2
    b39e:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_TOS(Config->EnableDelayMask);
    b3a0:	9b01      	ldr	r3, [sp, #4]
    b3a2:	785b      	ldrb	r3, [r3, #1]
    b3a4:	021b      	lsls	r3, r3, #8
    b3a6:	b29b      	uxth	r3, r3
    b3a8:	9a05      	ldr	r2, [sp, #20]
    b3aa:	4313      	orrs	r3, r2
    b3ac:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_BB(Config->BackToBackEnableMask);
    b3ae:	9b01      	ldr	r3, [sp, #4]
    b3b0:	789b      	ldrb	r3, [r3, #2]
    b3b2:	041b      	lsls	r3, r3, #16
    b3b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    b3b8:	9a05      	ldr	r2, [sp, #20]
    b3ba:	4313      	orrs	r3, r2
    b3bc:	9305      	str	r3, [sp, #20]
    Base->CH[ChanIdx].C1 = C1Reg;
    b3be:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b3c2:	9903      	ldr	r1, [sp, #12]
    b3c4:	4613      	mov	r3, r2
    b3c6:	009b      	lsls	r3, r3, #2
    b3c8:	4413      	add	r3, r2
    b3ca:	00db      	lsls	r3, r3, #3
    b3cc:	440b      	add	r3, r1
    b3ce:	3310      	adds	r3, #16
    b3d0:	9a05      	ldr	r2, [sp, #20]
    b3d2:	601a      	str	r2, [r3, #0]
}
    b3d4:	bf00      	nop
    b3d6:	b006      	add	sp, #24
    b3d8:	4770      	bx	lr

0000b3da <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>:

static inline void Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(PDB_Type * const Base,
                                                         const uint8 ChanIdx,
                                                         const uint16 PretriggMask)
{
    b3da:	b082      	sub	sp, #8
    b3dc:	9001      	str	r0, [sp, #4]
    b3de:	460b      	mov	r3, r1
    b3e0:	f88d 3003 	strb.w	r3, [sp, #3]
    b3e4:	4613      	mov	r3, r2
    b3e6:	f8ad 3000 	strh.w	r3, [sp]
    /* Clear pretrigger status flags found in S register based on PretriggMask */
    Base->CH[ChanIdx].S &= ~PDB_S_CF(PretriggMask);
    b3ea:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b3ee:	9901      	ldr	r1, [sp, #4]
    b3f0:	4613      	mov	r3, r2
    b3f2:	009b      	lsls	r3, r3, #2
    b3f4:	4413      	add	r3, r2
    b3f6:	00db      	lsls	r3, r3, #3
    b3f8:	440b      	add	r3, r1
    b3fa:	3314      	adds	r3, #20
    b3fc:	6819      	ldr	r1, [r3, #0]
    b3fe:	f8bd 3000 	ldrh.w	r3, [sp]
    b402:	041b      	lsls	r3, r3, #16
    b404:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    b408:	43db      	mvns	r3, r3
    b40a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b40e:	4019      	ands	r1, r3
    b410:	9801      	ldr	r0, [sp, #4]
    b412:	4613      	mov	r3, r2
    b414:	009b      	lsls	r3, r3, #2
    b416:	4413      	add	r3, r2
    b418:	00db      	lsls	r3, r3, #3
    b41a:	4403      	add	r3, r0
    b41c:	3314      	adds	r3, #20
    b41e:	6019      	str	r1, [r3, #0]
}
    b420:	bf00      	nop
    b422:	b002      	add	sp, #8
    b424:	4770      	bx	lr

0000b426 <Pdb_Adc_Ip_Init>:
*
* @implements     Pdb_Adc_Ip_Init_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Init(const uint32 Instance,
                     const Pdb_Adc_Ip_ConfigType * const Config)
{
    b426:	b500      	push	{lr}
    b428:	b087      	sub	sp, #28
    b42a:	9001      	str	r0, [sp, #4]
    b42c:	9100      	str	r1, [sp, #0]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b42e:	4a50      	ldr	r2, [pc, #320]	; (b570 <Pdb_Adc_Ip_Init+0x14a>)
    b430:	9b01      	ldr	r3, [sp, #4]
    b432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b436:	9303      	str	r3, [sp, #12]
    uint8 ChannelIndex;
    uint8 PretriggerIndex;
    uint32 Reg = 0u;
    b438:	2300      	movs	r3, #0
    b43a:	9304      	str	r3, [sp, #16]

    Reg |= PDB_SC_LDMOD(Config->LoadValueMode);
    b43c:	9b00      	ldr	r3, [sp, #0]
    b43e:	681b      	ldr	r3, [r3, #0]
    b440:	049b      	lsls	r3, r3, #18
    b442:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
    b446:	9a04      	ldr	r2, [sp, #16]
    b448:	4313      	orrs	r3, r2
    b44a:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_PRESCALER(Config->PrescalerDiv);
    b44c:	9b00      	ldr	r3, [sp, #0]
    b44e:	685b      	ldr	r3, [r3, #4]
    b450:	031b      	lsls	r3, r3, #12
    b452:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    b456:	9a04      	ldr	r2, [sp, #16]
    b458:	4313      	orrs	r3, r2
    b45a:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_MULT(Config->ClkPreMultFactor);
    b45c:	9b00      	ldr	r3, [sp, #0]
    b45e:	689b      	ldr	r3, [r3, #8]
    b460:	009b      	lsls	r3, r3, #2
    b462:	f003 030c 	and.w	r3, r3, #12
    b466:	9a04      	ldr	r2, [sp, #16]
    b468:	4313      	orrs	r3, r2
    b46a:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_TRGSEL(Config->TriggerSource);
    b46c:	9b00      	ldr	r3, [sp, #0]
    b46e:	68db      	ldr	r3, [r3, #12]
    b470:	021b      	lsls	r3, r3, #8
    b472:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    b476:	9a04      	ldr	r2, [sp, #16]
    b478:	4313      	orrs	r3, r2
    b47a:	9304      	str	r3, [sp, #16]

    if (Config->ContinuousModeEnable == TRUE)
    b47c:	9b00      	ldr	r3, [sp, #0]
    b47e:	7c1b      	ldrb	r3, [r3, #16]
    b480:	2b00      	cmp	r3, #0
    b482:	d003      	beq.n	b48c <Pdb_Adc_Ip_Init+0x66>
    {
        Reg |= PDB_SC_CONT_MASK;
    b484:	9b04      	ldr	r3, [sp, #16]
    b486:	f043 0302 	orr.w	r3, r3, #2
    b48a:	9304      	str	r3, [sp, #16]
    }
    if (Config->DmaEnable == TRUE)
    b48c:	9b00      	ldr	r3, [sp, #0]
    b48e:	7c5b      	ldrb	r3, [r3, #17]
    b490:	2b00      	cmp	r3, #0
    b492:	d003      	beq.n	b49c <Pdb_Adc_Ip_Init+0x76>
    {
        Reg |= PDB_SC_DMAEN_MASK;
    b494:	9b04      	ldr	r3, [sp, #16]
    b496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    b49a:	9304      	str	r3, [sp, #16]
    }
    if (Config->SeqErrNotification != NULL_PTR)
    b49c:	9b00      	ldr	r3, [sp, #0]
    b49e:	69db      	ldr	r3, [r3, #28]
    b4a0:	2b00      	cmp	r3, #0
    b4a2:	d003      	beq.n	b4ac <Pdb_Adc_Ip_Init+0x86>
    {
        Reg |= PDB_SC_PDBEIE_MASK;
    b4a4:	9b04      	ldr	r3, [sp, #16]
    b4a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b4aa:	9304      	str	r3, [sp, #16]
    }

    Base->SC = Reg;
    b4ac:	9b03      	ldr	r3, [sp, #12]
    b4ae:	9a04      	ldr	r2, [sp, #16]
    b4b0:	601a      	str	r2, [r3, #0]
#endif /* (STD_ON == FEATURE_PDB_HAS_INSTANCE_BACKTOBACK) */
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
    PDB_ADC_ConfigInterChannelBackToBack(Instance, Config->InterChannelBackToBackEnable);
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */

    Pdb_Adc_Ip_SetModulus(Instance, Config->ModValue);
    b4b2:	9b00      	ldr	r3, [sp, #0]
    b4b4:	8a5b      	ldrh	r3, [r3, #18]
    b4b6:	4619      	mov	r1, r3
    b4b8:	9801      	ldr	r0, [sp, #4]
    b4ba:	f000 f98f 	bl	b7dc <Pdb_Adc_Ip_SetModulus>

    if ((Config->NumChans > 0u) && (Config->ChanConfigs != NULL_PTR))
    b4be:	9b00      	ldr	r3, [sp, #0]
    b4c0:	7d1b      	ldrb	r3, [r3, #20]
    b4c2:	2b00      	cmp	r3, #0
    b4c4:	d03e      	beq.n	b544 <Pdb_Adc_Ip_Init+0x11e>
    b4c6:	9b00      	ldr	r3, [sp, #0]
    b4c8:	699b      	ldr	r3, [r3, #24]
    b4ca:	2b00      	cmp	r3, #0
    b4cc:	d03a      	beq.n	b544 <Pdb_Adc_Ip_Init+0x11e>
    {
        for (ChannelIndex = 0u; ChannelIndex < Config->NumChans; ChannelIndex++)
    b4ce:	2300      	movs	r3, #0
    b4d0:	f88d 3017 	strb.w	r3, [sp, #23]
    b4d4:	e030      	b.n	b538 <Pdb_Adc_Ip_Init+0x112>
        {
            const Pdb_Adc_Ip_ChanConfigType * ChanConfig = &(Config->ChanConfigs[ChannelIndex]);
    b4d6:	9b00      	ldr	r3, [sp, #0]
    b4d8:	6999      	ldr	r1, [r3, #24]
    b4da:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b4de:	4613      	mov	r3, r2
    b4e0:	009b      	lsls	r3, r3, #2
    b4e2:	4413      	add	r3, r2
    b4e4:	009b      	lsls	r3, r3, #2
    b4e6:	440b      	add	r3, r1
    b4e8:	9302      	str	r3, [sp, #8]
            Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanConfig->ChnIdx, &(ChanConfig->PretriggersConfig));
    b4ea:	9b02      	ldr	r3, [sp, #8]
    b4ec:	7819      	ldrb	r1, [r3, #0]
    b4ee:	9b02      	ldr	r3, [sp, #8]
    b4f0:	3301      	adds	r3, #1
    b4f2:	461a      	mov	r2, r3
    b4f4:	9803      	ldr	r0, [sp, #12]
    b4f6:	f7ff ff38 	bl	b36a <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
            for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    b4fa:	2300      	movs	r3, #0
    b4fc:	f88d 3016 	strb.w	r3, [sp, #22]
    b500:	e011      	b.n	b526 <Pdb_Adc_Ip_Init+0x100>
            {
                Pdb_Adc_Ip_SetAdcPretriggerDelayValue(Instance, ChanConfig->ChnIdx, PretriggerIndex, ChanConfig->PretriggerDelays[PretriggerIndex]);
    b502:	9b02      	ldr	r3, [sp, #8]
    b504:	7819      	ldrb	r1, [r3, #0]
    b506:	f89d 3016 	ldrb.w	r3, [sp, #22]
    b50a:	9a02      	ldr	r2, [sp, #8]
    b50c:	005b      	lsls	r3, r3, #1
    b50e:	4413      	add	r3, r2
    b510:	889b      	ldrh	r3, [r3, #4]
    b512:	f89d 2016 	ldrb.w	r2, [sp, #22]
    b516:	9801      	ldr	r0, [sp, #4]
    b518:	f000 fa74 	bl	ba04 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
            for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    b51c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    b520:	3301      	adds	r3, #1
    b522:	f88d 3016 	strb.w	r3, [sp, #22]
    b526:	f89d 3016 	ldrb.w	r3, [sp, #22]
    b52a:	2b07      	cmp	r3, #7
    b52c:	d9e9      	bls.n	b502 <Pdb_Adc_Ip_Init+0xdc>
        for (ChannelIndex = 0u; ChannelIndex < Config->NumChans; ChannelIndex++)
    b52e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b532:	3301      	adds	r3, #1
    b534:	f88d 3017 	strb.w	r3, [sp, #23]
    b538:	9b00      	ldr	r3, [sp, #0]
    b53a:	7d1b      	ldrb	r3, [r3, #20]
    b53c:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b540:	429a      	cmp	r2, r3
    b542:	d3c8      	bcc.n	b4d6 <Pdb_Adc_Ip_Init+0xb0>
            }
        }
    }

    Pdb_Adc_Ip_Enable(Instance);
    b544:	9801      	ldr	r0, [sp, #4]
    b546:	f000 f89b 	bl	b680 <Pdb_Adc_Ip_Enable>

    /* Modulus and pretrigger delay values require call to LoadRegValues */
    Pdb_Adc_Ip_LoadRegValues(Instance);
    b54a:	9801      	ldr	r0, [sp, #4]
    b54c:	f000 f92e 	bl	b7ac <Pdb_Adc_Ip_LoadRegValues>

    Pdb_Adc_Ip_axState[Instance].SeqErrNotification = Config->SeqErrNotification;
    b550:	9b00      	ldr	r3, [sp, #0]
    b552:	69da      	ldr	r2, [r3, #28]
    b554:	4907      	ldr	r1, [pc, #28]	; (b574 <Pdb_Adc_Ip_Init+0x14e>)
    b556:	9b01      	ldr	r3, [sp, #4]
    b558:	00db      	lsls	r3, r3, #3
    b55a:	440b      	add	r3, r1
    b55c:	605a      	str	r2, [r3, #4]
    Pdb_Adc_Ip_axState[Instance].Init = TRUE;
    b55e:	4a05      	ldr	r2, [pc, #20]	; (b574 <Pdb_Adc_Ip_Init+0x14e>)
    b560:	9b01      	ldr	r3, [sp, #4]
    b562:	2101      	movs	r1, #1
    b564:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
    b568:	bf00      	nop
    b56a:	b007      	add	sp, #28
    b56c:	f85d fb04 	ldr.w	pc, [sp], #4
    b570:	0001648c 	.word	0x0001648c
    b574:	1fff8e00 	.word	0x1fff8e00

0000b578 <Pdb_Adc_Ip_DeInit>:
* This function disables it, so affects all other instances.
*
* @implements     Pdb_Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_DeInit(const uint32 Instance)
{
    b578:	b500      	push	{lr}
    b57a:	b097      	sub	sp, #92	; 0x5c
    b57c:	9001      	str	r0, [sp, #4]

    Pdb_Adc_Ip_ConfigType DefaultConfig;
    Pdb_Adc_Ip_ChanConfigType ChanConfigs[PDB_CH_COUNT];
    uint8 ChannelIndex, PretriggerIndex;

    DefaultConfig.LoadValueMode = PDB_ADC_IP_LOAD_VAL_IMMEDIATELY;
    b57e:	2300      	movs	r3, #0
    b580:	930d      	str	r3, [sp, #52]	; 0x34
    DefaultConfig.PrescalerDiv = PDB_ADC_IP_CLK_PREDIV_BY_1;
    b582:	2300      	movs	r3, #0
    b584:	930e      	str	r3, [sp, #56]	; 0x38
    DefaultConfig.ClkPreMultFactor = PDB_ADC_IP_CLK_PREMULT_FACT_AS_1;
    b586:	2300      	movs	r3, #0
    b588:	930f      	str	r3, [sp, #60]	; 0x3c
    DefaultConfig.TriggerSource = PDB_ADC_IP_TRIGGER_IN0;
    b58a:	2300      	movs	r3, #0
    b58c:	9310      	str	r3, [sp, #64]	; 0x40
    DefaultConfig.ContinuousModeEnable = FALSE;
    b58e:	2300      	movs	r3, #0
    b590:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    DefaultConfig.DmaEnable = FALSE;
    b594:	2300      	movs	r3, #0
    b596:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    DefaultConfig.ModValue = 0u;
    b59a:	2300      	movs	r3, #0
    b59c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
    DefaultConfig.InterChannelBackToBackEnable = FALSE;
    PDB_ADC_ConfigInterChannelBackToBack(Instance, DefaultConfig.InterChannelBackToBackEnable);
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */

    DefaultConfig.NumChans = PDB_CH_COUNT;
    b5a0:	2302      	movs	r3, #2
    b5a2:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    for (ChannelIndex = 0u; ChannelIndex < PDB_CH_COUNT; ChannelIndex++)
    b5a6:	2300      	movs	r3, #0
    b5a8:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    b5ac:	e04d      	b.n	b64a <Pdb_Adc_Ip_DeInit+0xd2>
    {
        ChanConfigs[ChannelIndex].ChnIdx = ChannelIndex;
    b5ae:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    b5b2:	4613      	mov	r3, r2
    b5b4:	009b      	lsls	r3, r3, #2
    b5b6:	4413      	add	r3, r2
    b5b8:	009b      	lsls	r3, r3, #2
    b5ba:	aa16      	add	r2, sp, #88	; 0x58
    b5bc:	4413      	add	r3, r2
    b5be:	3b4c      	subs	r3, #76	; 0x4c
    b5c0:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    b5c4:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.EnableMask = 0u;
    b5c6:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    b5ca:	4613      	mov	r3, r2
    b5cc:	009b      	lsls	r3, r3, #2
    b5ce:	4413      	add	r3, r2
    b5d0:	009b      	lsls	r3, r3, #2
    b5d2:	aa16      	add	r2, sp, #88	; 0x58
    b5d4:	4413      	add	r3, r2
    b5d6:	3b4b      	subs	r3, #75	; 0x4b
    b5d8:	2200      	movs	r2, #0
    b5da:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.EnableDelayMask = 0u;
    b5dc:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    b5e0:	4613      	mov	r3, r2
    b5e2:	009b      	lsls	r3, r3, #2
    b5e4:	4413      	add	r3, r2
    b5e6:	009b      	lsls	r3, r3, #2
    b5e8:	aa16      	add	r2, sp, #88	; 0x58
    b5ea:	4413      	add	r3, r2
    b5ec:	3b4a      	subs	r3, #74	; 0x4a
    b5ee:	2200      	movs	r2, #0
    b5f0:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.BackToBackEnableMask = 0u;
    b5f2:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    b5f6:	4613      	mov	r3, r2
    b5f8:	009b      	lsls	r3, r3, #2
    b5fa:	4413      	add	r3, r2
    b5fc:	009b      	lsls	r3, r3, #2
    b5fe:	aa16      	add	r2, sp, #88	; 0x58
    b600:	4413      	add	r3, r2
    b602:	3b49      	subs	r3, #73	; 0x49
    b604:	2200      	movs	r2, #0
    b606:	701a      	strb	r2, [r3, #0]
        for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    b608:	2300      	movs	r3, #0
    b60a:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    b60e:	e013      	b.n	b638 <Pdb_Adc_Ip_DeInit+0xc0>
        {
            ChanConfigs[ChannelIndex].PretriggerDelays[PretriggerIndex] = 0u;
    b610:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    b614:	f89d 1056 	ldrb.w	r1, [sp, #86]	; 0x56
    b618:	4613      	mov	r3, r2
    b61a:	009b      	lsls	r3, r3, #2
    b61c:	4413      	add	r3, r2
    b61e:	005b      	lsls	r3, r3, #1
    b620:	440b      	add	r3, r1
    b622:	005b      	lsls	r3, r3, #1
    b624:	aa16      	add	r2, sp, #88	; 0x58
    b626:	4413      	add	r3, r2
    b628:	2200      	movs	r2, #0
    b62a:	f823 2c48 	strh.w	r2, [r3, #-72]
        for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    b62e:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    b632:	3301      	adds	r3, #1
    b634:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    b638:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    b63c:	2b07      	cmp	r3, #7
    b63e:	d9e7      	bls.n	b610 <Pdb_Adc_Ip_DeInit+0x98>
    for (ChannelIndex = 0u; ChannelIndex < PDB_CH_COUNT; ChannelIndex++)
    b640:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
    b644:	3301      	adds	r3, #1
    b646:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    b64a:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
    b64e:	2b01      	cmp	r3, #1
    b650:	d9ad      	bls.n	b5ae <Pdb_Adc_Ip_DeInit+0x36>
        }
    }
    DefaultConfig.ChanConfigs = ChanConfigs;
    b652:	ab03      	add	r3, sp, #12
    b654:	9313      	str	r3, [sp, #76]	; 0x4c
    DefaultConfig.SeqErrNotification = NULL_PTR;
    b656:	2300      	movs	r3, #0
    b658:	9314      	str	r3, [sp, #80]	; 0x50

    Pdb_Adc_Ip_Init(Instance, &DefaultConfig);
    b65a:	ab0d      	add	r3, sp, #52	; 0x34
    b65c:	4619      	mov	r1, r3
    b65e:	9801      	ldr	r0, [sp, #4]
    b660:	f7ff fee1 	bl	b426 <Pdb_Adc_Ip_Init>

    Pdb_Adc_Ip_Disable(Instance);
    b664:	9801      	ldr	r0, [sp, #4]
    b666:	f000 f823 	bl	b6b0 <Pdb_Adc_Ip_Disable>

    Pdb_Adc_Ip_axState[Instance].Init = FALSE;
    b66a:	4a04      	ldr	r2, [pc, #16]	; (b67c <Pdb_Adc_Ip_DeInit+0x104>)
    b66c:	9b01      	ldr	r3, [sp, #4]
    b66e:	2100      	movs	r1, #0
    b670:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
    b674:	bf00      	nop
    b676:	b017      	add	sp, #92	; 0x5c
    b678:	f85d fb04 	ldr.w	pc, [sp], #4
    b67c:	1fff8e00 	.word	0x1fff8e00

0000b680 <Pdb_Adc_Ip_Enable>:
* Description   : This function enables the PDB module, counter is on.
*
* @implements     Pdb_Adc_Ip_Enable_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Enable(const uint32 Instance)
{
    b680:	b500      	push	{lr}
    b682:	b085      	sub	sp, #20
    b684:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b686:	4a09      	ldr	r2, [pc, #36]	; (b6ac <Pdb_Adc_Ip_Enable+0x2c>)
    b688:	9b01      	ldr	r3, [sp, #4]
    b68a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b68e:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34();
    b690:	f004 ffd4 	bl	1063c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>
    Base->SC |= PDB_SC_PDBEN_MASK;
    b694:	9b03      	ldr	r3, [sp, #12]
    b696:	681b      	ldr	r3, [r3, #0]
    b698:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    b69c:	9b03      	ldr	r3, [sp, #12]
    b69e:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34();
    b6a0:	f004 fff8 	bl	10694 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>
}
    b6a4:	bf00      	nop
    b6a6:	b005      	add	sp, #20
    b6a8:	f85d fb04 	ldr.w	pc, [sp], #4
    b6ac:	0001648c 	.word	0x0001648c

0000b6b0 <Pdb_Adc_Ip_Disable>:
* Description   : This function disables the PDB module, counter is off.
*
* @implements     Pdb_Adc_Ip_Disable_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Disable(const uint32 Instance)
{
    b6b0:	b500      	push	{lr}
    b6b2:	b085      	sub	sp, #20
    b6b4:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b6b6:	4a08      	ldr	r2, [pc, #32]	; (b6d8 <Pdb_Adc_Ip_Disable+0x28>)
    b6b8:	9b01      	ldr	r3, [sp, #4]
    b6ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6be:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35();
    b6c0:	f005 f80e 	bl	106e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>
    Pdb_Adc_HwAcc_DisablePdb(Base);
    b6c4:	9803      	ldr	r0, [sp, #12]
    b6c6:	f7ff fe2c 	bl	b322 <Pdb_Adc_HwAcc_DisablePdb>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35();
    b6ca:	f005 f835 	bl	10738 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>
}
    b6ce:	bf00      	nop
    b6d0:	b005      	add	sp, #20
    b6d2:	f85d fb04 	ldr.w	pc, [sp], #4
    b6d6:	bf00      	nop
    b6d8:	0001648c 	.word	0x0001648c

0000b6dc <Pdb_Adc_Ip_SetTriggerInput>:
*
* @implements     Pdb_Adc_Ip_SetTriggerInput_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetTriggerInput(const uint32 Instance,
                                const Pdb_Adc_Ip_TriggerSrcType TriggerSource)
{
    b6dc:	b500      	push	{lr}
    b6de:	b085      	sub	sp, #20
    b6e0:	9001      	str	r0, [sp, #4]
    b6e2:	9100      	str	r1, [sp, #0]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b6e4:	4a0e      	ldr	r2, [pc, #56]	; (b720 <Pdb_Adc_Ip_SetTriggerInput+0x44>)
    b6e6:	9b01      	ldr	r3, [sp, #4]
    b6e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6ec:	9303      	str	r3, [sp, #12]
    uint32 SCReg;

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36();
    b6ee:	f005 f849 	bl	10784 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>
    SCReg = Base->SC;
    b6f2:	9b03      	ldr	r3, [sp, #12]
    b6f4:	681b      	ldr	r3, [r3, #0]
    b6f6:	9302      	str	r3, [sp, #8]
    SCReg &= ~(PDB_SC_TRGSEL_MASK);
    b6f8:	9b02      	ldr	r3, [sp, #8]
    b6fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    b6fe:	9302      	str	r3, [sp, #8]
    SCReg |= PDB_SC_TRGSEL(TriggerSource);
    b700:	9b00      	ldr	r3, [sp, #0]
    b702:	021b      	lsls	r3, r3, #8
    b704:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    b708:	9a02      	ldr	r2, [sp, #8]
    b70a:	4313      	orrs	r3, r2
    b70c:	9302      	str	r3, [sp, #8]
    Base->SC = SCReg;
    b70e:	9b03      	ldr	r3, [sp, #12]
    b710:	9a02      	ldr	r2, [sp, #8]
    b712:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36();
    b714:	f005 f862 	bl	107dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>
}
    b718:	bf00      	nop
    b71a:	b005      	add	sp, #20
    b71c:	f85d fb04 	ldr.w	pc, [sp], #4
    b720:	0001648c 	.word	0x0001648c

0000b724 <Pdb_Adc_Ip_SetContinuousMode>:
*
* @implements     Pdb_Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetContinuousMode(const uint32 Instance,
                                  const boolean State)
{
    b724:	b500      	push	{lr}
    b726:	b085      	sub	sp, #20
    b728:	9001      	str	r0, [sp, #4]
    b72a:	460b      	mov	r3, r1
    b72c:	f88d 3003 	strb.w	r3, [sp, #3]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b730:	4a09      	ldr	r2, [pc, #36]	; (b758 <Pdb_Adc_Ip_SetContinuousMode+0x34>)
    b732:	9b01      	ldr	r3, [sp, #4]
    b734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b738:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37();
    b73a:	f005 f875 	bl	10828 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>
    Pdb_Adc_HwAcc_SetContinuousMode(Base, State);
    b73e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b742:	4619      	mov	r1, r3
    b744:	9803      	ldr	r0, [sp, #12]
    b746:	f7ff fdf7 	bl	b338 <Pdb_Adc_HwAcc_SetContinuousMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37();
    b74a:	f005 f899 	bl	10880 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>
}
    b74e:	bf00      	nop
    b750:	b005      	add	sp, #20
    b752:	f85d fb04 	ldr.w	pc, [sp], #4
    b756:	bf00      	nop
    b758:	0001648c 	.word	0x0001648c

0000b75c <Pdb_Adc_Ip_SwTrigger>:
* triggers the PDB.
*
* @implements     Pdb_Adc_Ip_SwTrigger_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SwTrigger(const uint32 Instance)
{
    b75c:	b500      	push	{lr}
    b75e:	b085      	sub	sp, #20
    b760:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b762:	4a09      	ldr	r2, [pc, #36]	; (b788 <Pdb_Adc_Ip_SwTrigger+0x2c>)
    b764:	9b01      	ldr	r3, [sp, #4]
    b766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b76a:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38();
    b76c:	f005 f8ae 	bl	108cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>
    Base->SC |= PDB_SC_SWTRIG_MASK;
    b770:	9b03      	ldr	r3, [sp, #12]
    b772:	681b      	ldr	r3, [r3, #0]
    b774:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    b778:	9b03      	ldr	r3, [sp, #12]
    b77a:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38();
    b77c:	f005 f8d2 	bl	10924 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>
}
    b780:	bf00      	nop
    b782:	b005      	add	sp, #20
    b784:	f85d fb04 	ldr.w	pc, [sp], #4
    b788:	0001648c 	.word	0x0001648c

0000b78c <Pdb_Adc_Ip_GetTimerValue>:
* Description   : This function gets the current counter value.
*
* @implements     Pdb_Adc_Ip_GetTimerValue_Activity
* END**************************************************************************/
uint32 Pdb_Adc_Ip_GetTimerValue(const uint32 Instance)
{
    b78c:	b084      	sub	sp, #16
    b78e:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b790:	4a05      	ldr	r2, [pc, #20]	; (b7a8 <Pdb_Adc_Ip_GetTimerValue+0x1c>)
    b792:	9b01      	ldr	r3, [sp, #4]
    b794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b798:	9303      	str	r3, [sp, #12]

    return ((Base->CNT & PDB_CNT_CNT_MASK) >> PDB_CNT_CNT_SHIFT);
    b79a:	9b03      	ldr	r3, [sp, #12]
    b79c:	689b      	ldr	r3, [r3, #8]
    b79e:	b29b      	uxth	r3, r3
}
    b7a0:	4618      	mov	r0, r3
    b7a2:	b004      	add	sp, #16
    b7a4:	4770      	bx	lr
    b7a6:	bf00      	nop
    b7a8:	0001648c 	.word	0x0001648c

0000b7ac <Pdb_Adc_Ip_LoadRegValues>:
* internal registers or when the PDB is disabled.
*
* @implements     Pdb_Adc_Ip_LoadRegValues_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_LoadRegValues(const uint32 Instance)
{
    b7ac:	b500      	push	{lr}
    b7ae:	b085      	sub	sp, #20
    b7b0:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b7b2:	4a09      	ldr	r2, [pc, #36]	; (b7d8 <Pdb_Adc_Ip_LoadRegValues+0x2c>)
    b7b4:	9b01      	ldr	r3, [sp, #4]
    b7b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7ba:	9303      	str	r3, [sp, #12]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    /* PDB must be enabled in order to load register values */
    DevAssert((Base->SC & PDB_SC_PDBEN_MASK) != 0u);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39();
    b7bc:	f005 f8d8 	bl	10970 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>
    Base->SC |= PDB_SC_LDOK_MASK;
    b7c0:	9b03      	ldr	r3, [sp, #12]
    b7c2:	681b      	ldr	r3, [r3, #0]
    b7c4:	f043 0201 	orr.w	r2, r3, #1
    b7c8:	9b03      	ldr	r3, [sp, #12]
    b7ca:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39();
    b7cc:	f005 f8fc 	bl	109c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>
}
    b7d0:	bf00      	nop
    b7d2:	b005      	add	sp, #20
    b7d4:	f85d fb04 	ldr.w	pc, [sp], #4
    b7d8:	0001648c 	.word	0x0001648c

0000b7dc <Pdb_Adc_Ip_SetModulus>:
*
* @implements     Pdb_Adc_Ip_SetModulus_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetModulus(const uint32 Instance,
                           const uint16 ModVal)
{
    b7dc:	b500      	push	{lr}
    b7de:	b085      	sub	sp, #20
    b7e0:	9001      	str	r0, [sp, #4]
    b7e2:	460b      	mov	r3, r1
    b7e4:	f8ad 3002 	strh.w	r3, [sp, #2]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b7e8:	4a0d      	ldr	r2, [pc, #52]	; (b820 <Pdb_Adc_Ip_SetModulus+0x44>)
    b7ea:	9b01      	ldr	r3, [sp, #4]
    b7ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7f0:	9303      	str	r3, [sp, #12]
    uint32 ModReg;

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48();
    b7f2:	f005 fb9f 	bl	10f34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>
    ModReg = Base->MOD;
    b7f6:	9b03      	ldr	r3, [sp, #12]
    b7f8:	685b      	ldr	r3, [r3, #4]
    b7fa:	9302      	str	r3, [sp, #8]
    ModReg &= ~(PDB_MOD_MOD_MASK);
    b7fc:	9b02      	ldr	r3, [sp, #8]
    b7fe:	0c1b      	lsrs	r3, r3, #16
    b800:	041b      	lsls	r3, r3, #16
    b802:	9302      	str	r3, [sp, #8]
    ModReg |= PDB_MOD_MOD(ModVal);
    b804:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    b808:	9a02      	ldr	r2, [sp, #8]
    b80a:	4313      	orrs	r3, r2
    b80c:	9302      	str	r3, [sp, #8]
    Base->MOD = ModReg;
    b80e:	9b03      	ldr	r3, [sp, #12]
    b810:	9a02      	ldr	r2, [sp, #8]
    b812:	605a      	str	r2, [r3, #4]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48();
    b814:	f005 fbba 	bl	10f8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>
}
    b818:	bf00      	nop
    b81a:	b005      	add	sp, #20
    b81c:	f85d fb04 	ldr.w	pc, [sp], #4
    b820:	0001648c 	.word	0x0001648c

0000b824 <Pdb_Adc_Ip_ConfigAdcPretriggers>:
* @implements     Pdb_Adc_Ip_ConfigAdcPretriggers_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_ConfigAdcPretriggers(const uint32 Instance,
                                     const uint8 ChanIdx,
                                     const Pdb_Adc_Ip_PretriggersConfigType * const Config)
{
    b824:	b500      	push	{lr}
    b826:	b087      	sub	sp, #28
    b828:	9003      	str	r0, [sp, #12]
    b82a:	460b      	mov	r3, r1
    b82c:	9201      	str	r2, [sp, #4]
    b82e:	f88d 300b 	strb.w	r3, [sp, #11]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b832:	4a0a      	ldr	r2, [pc, #40]	; (b85c <Pdb_Adc_Ip_ConfigAdcPretriggers+0x38>)
    b834:	9b03      	ldr	r3, [sp, #12]
    b836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b83a:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41();
    b83c:	f005 f93c 	bl	10ab8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>
    Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanIdx, Config);
    b840:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b844:	9a01      	ldr	r2, [sp, #4]
    b846:	4619      	mov	r1, r3
    b848:	9805      	ldr	r0, [sp, #20]
    b84a:	f7ff fd8e 	bl	b36a <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41();
    b84e:	f005 f95f 	bl	10b10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>
}
    b852:	bf00      	nop
    b854:	b007      	add	sp, #28
    b856:	f85d fb04 	ldr.w	pc, [sp], #4
    b85a:	bf00      	nop
    b85c:	0001648c 	.word	0x0001648c

0000b860 <Pdb_Adc_Ip_GetAdcPretriggerFlags>:
*
* @implements     Pdb_Adc_Ip_GetAdcPretriggerFlags_Activity
* END**************************************************************************/
uint32 Pdb_Adc_Ip_GetAdcPretriggerFlags(const uint32 Instance,
                                        const uint8 ChanIdx)
{
    b860:	b084      	sub	sp, #16
    b862:	9001      	str	r0, [sp, #4]
    b864:	460b      	mov	r3, r1
    b866:	f88d 3003 	strb.w	r3, [sp, #3]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b86a:	4a0c      	ldr	r2, [pc, #48]	; (b89c <Pdb_Adc_Ip_GetAdcPretriggerFlags+0x3c>)
    b86c:	9b01      	ldr	r3, [sp, #4]
    b86e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b872:	9303      	str	r3, [sp, #12]
    uint32 Result;

    Result = Base->CH[ChanIdx].S;
    b874:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b878:	9903      	ldr	r1, [sp, #12]
    b87a:	4613      	mov	r3, r2
    b87c:	009b      	lsls	r3, r3, #2
    b87e:	4413      	add	r3, r2
    b880:	00db      	lsls	r3, r3, #3
    b882:	440b      	add	r3, r1
    b884:	3314      	adds	r3, #20
    b886:	681b      	ldr	r3, [r3, #0]
    b888:	9302      	str	r3, [sp, #8]
    Result = (Result & PDB_S_CF_MASK) >> PDB_S_CF_SHIFT;
    b88a:	9b02      	ldr	r3, [sp, #8]
    b88c:	0c1b      	lsrs	r3, r3, #16
    b88e:	b2db      	uxtb	r3, r3
    b890:	9302      	str	r3, [sp, #8]

    return Result;
    b892:	9b02      	ldr	r3, [sp, #8]
}
    b894:	4618      	mov	r0, r3
    b896:	b004      	add	sp, #16
    b898:	4770      	bx	lr
    b89a:	bf00      	nop
    b89c:	0001648c 	.word	0x0001648c

0000b8a0 <Pdb_Adc_Ip_ClearAdcPretriggerFlags>:
* @implements     Pdb_Adc_Ip_ClearAdcPretriggerFlags_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_ClearAdcPretriggerFlags(const uint32 Instance,
                                        const uint8 ChanIdx,
                                        const uint16 PretriggMask)
{
    b8a0:	b500      	push	{lr}
    b8a2:	b085      	sub	sp, #20
    b8a4:	9001      	str	r0, [sp, #4]
    b8a6:	460b      	mov	r3, r1
    b8a8:	f88d 3003 	strb.w	r3, [sp, #3]
    b8ac:	4613      	mov	r3, r2
    b8ae:	f8ad 3000 	strh.w	r3, [sp]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b8b2:	4a0a      	ldr	r2, [pc, #40]	; (b8dc <Pdb_Adc_Ip_ClearAdcPretriggerFlags+0x3c>)
    b8b4:	9b01      	ldr	r3, [sp, #4]
    b8b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8ba:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46();
    b8bc:	f005 fa96 	bl	10dec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>
    /* Write 0 to clear */
    Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(Base, ChanIdx, PretriggMask);
    b8c0:	f8bd 2000 	ldrh.w	r2, [sp]
    b8c4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b8c8:	4619      	mov	r1, r3
    b8ca:	9803      	ldr	r0, [sp, #12]
    b8cc:	f7ff fd85 	bl	b3da <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46();
    b8d0:	f005 fab8 	bl	10e44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>
}
    b8d4:	bf00      	nop
    b8d6:	b005      	add	sp, #20
    b8d8:	f85d fb04 	ldr.w	pc, [sp], #4
    b8dc:	0001648c 	.word	0x0001648c

0000b8e0 <Pdb_Adc_Ip_SetAdcPretriggerBackToBack>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerBackToBack(const uint32 Instance,
                                           const uint8 ChanIdx,
                                           const uint8 PretriggIdx,
                                           const boolean Value)
{
    b8e0:	b500      	push	{lr}
    b8e2:	b085      	sub	sp, #20
    b8e4:	9001      	str	r0, [sp, #4]
    b8e6:	4608      	mov	r0, r1
    b8e8:	4611      	mov	r1, r2
    b8ea:	461a      	mov	r2, r3
    b8ec:	4603      	mov	r3, r0
    b8ee:	f88d 3003 	strb.w	r3, [sp, #3]
    b8f2:	460b      	mov	r3, r1
    b8f4:	f88d 3002 	strb.w	r3, [sp, #2]
    b8f8:	4613      	mov	r3, r2
    b8fa:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b8fe:	4a10      	ldr	r2, [pc, #64]	; (b940 <Pdb_Adc_Ip_SetAdcPretriggerBackToBack+0x60>)
    b900:	9b01      	ldr	r3, [sp, #4]
    b902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b906:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    b908:	f89d 3002 	ldrb.w	r3, [sp, #2]
    b90c:	2201      	movs	r2, #1
    b90e:	fa02 f303 	lsl.w	r3, r2, r3
    b912:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_BB(Mask);
    b914:	9b02      	ldr	r3, [sp, #8]
    b916:	041b      	lsls	r3, r3, #16
    b918:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    b91c:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42();
    b91e:	f005 f91d 	bl	10b5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    b922:	f89d 3001 	ldrb.w	r3, [sp, #1]
    b926:	f89d 1003 	ldrb.w	r1, [sp, #3]
    b92a:	9a02      	ldr	r2, [sp, #8]
    b92c:	9803      	ldr	r0, [sp, #12]
    b92e:	f7ff fcb9 	bl	b2a4 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42();
    b932:	f005 f93f 	bl	10bb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>
}
    b936:	bf00      	nop
    b938:	b005      	add	sp, #20
    b93a:	f85d fb04 	ldr.w	pc, [sp], #4
    b93e:	bf00      	nop
    b940:	0001648c 	.word	0x0001648c

0000b944 <Pdb_Adc_Ip_SetAdcPretriggerEnable>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerEnable(const uint32 Instance,
                                       const uint8 ChanIdx,
                                       const uint8 PretriggIdx,
                                       const boolean Value)
{
    b944:	b500      	push	{lr}
    b946:	b085      	sub	sp, #20
    b948:	9001      	str	r0, [sp, #4]
    b94a:	4608      	mov	r0, r1
    b94c:	4611      	mov	r1, r2
    b94e:	461a      	mov	r2, r3
    b950:	4603      	mov	r3, r0
    b952:	f88d 3003 	strb.w	r3, [sp, #3]
    b956:	460b      	mov	r3, r1
    b958:	f88d 3002 	strb.w	r3, [sp, #2]
    b95c:	4613      	mov	r3, r2
    b95e:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b962:	4a0f      	ldr	r2, [pc, #60]	; (b9a0 <Pdb_Adc_Ip_SetAdcPretriggerEnable+0x5c>)
    b964:	9b01      	ldr	r3, [sp, #4]
    b966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b96a:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    b96c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    b970:	2201      	movs	r2, #1
    b972:	fa02 f303 	lsl.w	r3, r2, r3
    b976:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_EN(Mask);
    b978:	9b02      	ldr	r3, [sp, #8]
    b97a:	b2db      	uxtb	r3, r3
    b97c:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43();
    b97e:	f005 f93f 	bl	10c00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    b982:	f89d 3001 	ldrb.w	r3, [sp, #1]
    b986:	f89d 1003 	ldrb.w	r1, [sp, #3]
    b98a:	9a02      	ldr	r2, [sp, #8]
    b98c:	9803      	ldr	r0, [sp, #12]
    b98e:	f7ff fc89 	bl	b2a4 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43();
    b992:	f005 f961 	bl	10c58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>
}
    b996:	bf00      	nop
    b998:	b005      	add	sp, #20
    b99a:	f85d fb04 	ldr.w	pc, [sp], #4
    b99e:	bf00      	nop
    b9a0:	0001648c 	.word	0x0001648c

0000b9a4 <Pdb_Adc_Ip_SetAdcPretriggerDelayEnable>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerDelayEnable(const uint32 Instance,
                                            const uint8 ChanIdx,
                                            const uint8 PretriggIdx,
                                            const boolean Value)
{
    b9a4:	b500      	push	{lr}
    b9a6:	b085      	sub	sp, #20
    b9a8:	9001      	str	r0, [sp, #4]
    b9aa:	4608      	mov	r0, r1
    b9ac:	4611      	mov	r1, r2
    b9ae:	461a      	mov	r2, r3
    b9b0:	4603      	mov	r3, r0
    b9b2:	f88d 3003 	strb.w	r3, [sp, #3]
    b9b6:	460b      	mov	r3, r1
    b9b8:	f88d 3002 	strb.w	r3, [sp, #2]
    b9bc:	4613      	mov	r3, r2
    b9be:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    b9c2:	4a0f      	ldr	r2, [pc, #60]	; (ba00 <Pdb_Adc_Ip_SetAdcPretriggerDelayEnable+0x5c>)
    b9c4:	9b01      	ldr	r3, [sp, #4]
    b9c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b9ca:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    b9cc:	f89d 3002 	ldrb.w	r3, [sp, #2]
    b9d0:	2201      	movs	r2, #1
    b9d2:	fa02 f303 	lsl.w	r3, r2, r3
    b9d6:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_TOS(Mask);
    b9d8:	9b02      	ldr	r3, [sp, #8]
    b9da:	021b      	lsls	r3, r3, #8
    b9dc:	b29b      	uxth	r3, r3
    b9de:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44();
    b9e0:	f005 f960 	bl	10ca4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    b9e4:	f89d 3001 	ldrb.w	r3, [sp, #1]
    b9e8:	f89d 1003 	ldrb.w	r1, [sp, #3]
    b9ec:	9a02      	ldr	r2, [sp, #8]
    b9ee:	9803      	ldr	r0, [sp, #12]
    b9f0:	f7ff fc58 	bl	b2a4 <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44();
    b9f4:	f005 f982 	bl	10cfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>
}
    b9f8:	bf00      	nop
    b9fa:	b005      	add	sp, #20
    b9fc:	f85d fb04 	ldr.w	pc, [sp], #4
    ba00:	0001648c 	.word	0x0001648c

0000ba04 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerDelayValue(const uint32 Instance,
                                           const uint8 ChanIdx,
                                           const uint8 PretriggIdx,
                                           const uint16 DelayValue)
{
    ba04:	b410      	push	{r4}
    ba06:	b085      	sub	sp, #20
    ba08:	9001      	str	r0, [sp, #4]
    ba0a:	4608      	mov	r0, r1
    ba0c:	4611      	mov	r1, r2
    ba0e:	461a      	mov	r2, r3
    ba10:	4603      	mov	r3, r0
    ba12:	f88d 3003 	strb.w	r3, [sp, #3]
    ba16:	460b      	mov	r3, r1
    ba18:	f88d 3002 	strb.w	r3, [sp, #2]
    ba1c:	4613      	mov	r3, r2
    ba1e:	f8ad 3000 	strh.w	r3, [sp]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ba22:	4a0c      	ldr	r2, [pc, #48]	; (ba54 <Pdb_Adc_Ip_SetAdcPretriggerDelayValue+0x50>)
    ba24:	9b01      	ldr	r3, [sp, #4]
    ba26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba2a:	9303      	str	r3, [sp, #12]

    Base->CH[ChanIdx].DLY[PretriggIdx] = PDB_DLY_DLY(DelayValue);
    ba2c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ba30:	f89d 4002 	ldrb.w	r4, [sp, #2]
    ba34:	f8bd 0000 	ldrh.w	r0, [sp]
    ba38:	9903      	ldr	r1, [sp, #12]
    ba3a:	4613      	mov	r3, r2
    ba3c:	009b      	lsls	r3, r3, #2
    ba3e:	4413      	add	r3, r2
    ba40:	005b      	lsls	r3, r3, #1
    ba42:	4423      	add	r3, r4
    ba44:	3306      	adds	r3, #6
    ba46:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
}
    ba4a:	bf00      	nop
    ba4c:	b005      	add	sp, #20
    ba4e:	f85d 4b04 	ldr.w	r4, [sp], #4
    ba52:	4770      	bx	lr
    ba54:	0001648c 	.word	0x0001648c

0000ba58 <Pdb_Adc_Ip_DisableAndClearPdb>:
* configuration and status registers.
*
* @implements     Pdb_Adc_Ip_DisableAndClearPdb_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_DisableAndClearPdb(const uint32 Instance)
{
    ba58:	b500      	push	{lr}
    ba5a:	b087      	sub	sp, #28
    ba5c:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    ba5e:	4a19      	ldr	r2, [pc, #100]	; (bac4 <Pdb_Adc_Ip_DisableAndClearPdb+0x6c>)
    ba60:	9b01      	ldr	r3, [sp, #4]
    ba62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba66:	9304      	str	r3, [sp, #16]
    uint8 ChanIdx;
    const Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig = { 0u, 0u, 0u };
    ba68:	2300      	movs	r3, #0
    ba6a:	f88d 300c 	strb.w	r3, [sp, #12]
    ba6e:	2300      	movs	r3, #0
    ba70:	f88d 300d 	strb.w	r3, [sp, #13]
    ba74:	2300      	movs	r3, #0
    ba76:	f88d 300e 	strb.w	r3, [sp, #14]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40();
    ba7a:	f004 ffcb 	bl	10a14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>
    Pdb_Adc_HwAcc_DisablePdb(Base);
    ba7e:	9804      	ldr	r0, [sp, #16]
    ba80:	f7ff fc4f 	bl	b322 <Pdb_Adc_HwAcc_DisablePdb>
    Pdb_Adc_HwAcc_SetContinuousMode(Base, FALSE);
    ba84:	2100      	movs	r1, #0
    ba86:	9804      	ldr	r0, [sp, #16]
    ba88:	f7ff fc56 	bl	b338 <Pdb_Adc_HwAcc_SetContinuousMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40();
    ba8c:	f004 ffee 	bl	10a6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>

    for (ChanIdx = 0U; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    ba90:	2300      	movs	r3, #0
    ba92:	f88d 3017 	strb.w	r3, [sp, #23]
    ba96:	e00b      	b.n	bab0 <Pdb_Adc_Ip_DisableAndClearPdb+0x58>
    {
        PDB_ADC_ResetChannel(Base, ChanIdx, &PdbPretriggsConfig);
    ba98:	aa03      	add	r2, sp, #12
    ba9a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ba9e:	4619      	mov	r1, r3
    baa0:	9804      	ldr	r0, [sp, #16]
    baa2:	f000 f899 	bl	bbd8 <PDB_ADC_ResetChannel>
    for (ChanIdx = 0U; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    baa6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    baaa:	3301      	adds	r3, #1
    baac:	f88d 3017 	strb.w	r3, [sp, #23]
    bab0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    bab4:	2b01      	cmp	r3, #1
    bab6:	d9ef      	bls.n	ba98 <Pdb_Adc_Ip_DisableAndClearPdb+0x40>
    }
}
    bab8:	bf00      	nop
    baba:	bf00      	nop
    babc:	b007      	add	sp, #28
    babe:	f85d fb04 	ldr.w	pc, [sp], #4
    bac2:	bf00      	nop
    bac4:	0001648c 	.word	0x0001648c

0000bac8 <Pdb_Adc_Ip_IRQHandler>:
 * Description   : Handles Pdb sequence error interrupt.
 *
 * @implements     Pdb_Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Pdb_Adc_Ip_IRQHandler(const uint32 Instance)
{
    bac8:	b500      	push	{lr}
    baca:	b087      	sub	sp, #28
    bacc:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    bace:	4a40      	ldr	r2, [pc, #256]	; (bbd0 <Pdb_Adc_Ip_IRQHandler+0x108>)
    bad0:	9b01      	ldr	r3, [sp, #4]
    bad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bad6:	9304      	str	r3, [sp, #16]
    uint8 ChanIdx;
    uint16 SeqErrMask;

    /* Check whether the respective driver is initialized */
    if (TRUE == Pdb_Adc_Ip_axState[Instance].Init)
    bad8:	4a3e      	ldr	r2, [pc, #248]	; (bbd4 <Pdb_Adc_Ip_IRQHandler+0x10c>)
    bada:	9b01      	ldr	r3, [sp, #4]
    badc:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    bae0:	2b00      	cmp	r3, #0
    bae2:	d04d      	beq.n	bb80 <Pdb_Adc_Ip_IRQHandler+0xb8>
    {
        /* CPR_RTD_00664
         * Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop).
         * Check if the interrupt not spurious (sequence error interrupt is enabled and sequence error flag is set).
         */
        if ( ((Base->SC & PDB_SC_PDBEIE_MASK) != 0u) && (Pdb_Adc_Ip_axState[Instance].SeqErrNotification != NULL_PTR) )
    bae4:	9b04      	ldr	r3, [sp, #16]
    bae6:	681b      	ldr	r3, [r3, #0]
    bae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    baec:	2b00      	cmp	r3, #0
    baee:	d06a      	beq.n	bbc6 <Pdb_Adc_Ip_IRQHandler+0xfe>
    baf0:	4a38      	ldr	r2, [pc, #224]	; (bbd4 <Pdb_Adc_Ip_IRQHandler+0x10c>)
    baf2:	9b01      	ldr	r3, [sp, #4]
    baf4:	00db      	lsls	r3, r3, #3
    baf6:	4413      	add	r3, r2
    baf8:	685b      	ldr	r3, [r3, #4]
    bafa:	2b00      	cmp	r3, #0
    bafc:	d063      	beq.n	bbc6 <Pdb_Adc_Ip_IRQHandler+0xfe>
        {
            for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    bafe:	2300      	movs	r3, #0
    bb00:	f88d 3017 	strb.w	r3, [sp, #23]
    bb04:	e037      	b.n	bb76 <Pdb_Adc_Ip_IRQHandler+0xae>
            {
                SeqErrMask = (uint16) ((Base->CH[ChanIdx].S & PDB_S_ERR_MASK) >> PDB_S_ERR_SHIFT);
    bb06:	f89d 2017 	ldrb.w	r2, [sp, #23]
    bb0a:	9904      	ldr	r1, [sp, #16]
    bb0c:	4613      	mov	r3, r2
    bb0e:	009b      	lsls	r3, r3, #2
    bb10:	4413      	add	r3, r2
    bb12:	00db      	lsls	r3, r3, #3
    bb14:	440b      	add	r3, r1
    bb16:	3314      	adds	r3, #20
    bb18:	681b      	ldr	r3, [r3, #0]
    bb1a:	b29b      	uxth	r3, r3
    bb1c:	b2db      	uxtb	r3, r3
    bb1e:	f8ad 300e 	strh.w	r3, [sp, #14]
                if (SeqErrMask != 0u)
    bb22:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    bb26:	2b00      	cmp	r3, #0
    bb28:	d020      	beq.n	bb6c <Pdb_Adc_Ip_IRQHandler+0xa4>
                {
                    /* Clear the sequence error flag triggered from the current channel (W0C).
                     * And call the associated callback.
                     */
                    Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    bb2a:	f89d 2017 	ldrb.w	r2, [sp, #23]
    bb2e:	9904      	ldr	r1, [sp, #16]
    bb30:	4613      	mov	r3, r2
    bb32:	009b      	lsls	r3, r3, #2
    bb34:	4413      	add	r3, r2
    bb36:	00db      	lsls	r3, r3, #3
    bb38:	440b      	add	r3, r1
    bb3a:	3314      	adds	r3, #20
    bb3c:	681b      	ldr	r3, [r3, #0]
    bb3e:	f89d 2017 	ldrb.w	r2, [sp, #23]
    bb42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    bb46:	9804      	ldr	r0, [sp, #16]
    bb48:	4613      	mov	r3, r2
    bb4a:	009b      	lsls	r3, r3, #2
    bb4c:	4413      	add	r3, r2
    bb4e:	00db      	lsls	r3, r3, #3
    bb50:	4403      	add	r3, r0
    bb52:	3314      	adds	r3, #20
    bb54:	6019      	str	r1, [r3, #0]
                    Pdb_Adc_Ip_axState[Instance].SeqErrNotification(ChanIdx, SeqErrMask);
    bb56:	4a1f      	ldr	r2, [pc, #124]	; (bbd4 <Pdb_Adc_Ip_IRQHandler+0x10c>)
    bb58:	9b01      	ldr	r3, [sp, #4]
    bb5a:	00db      	lsls	r3, r3, #3
    bb5c:	4413      	add	r3, r2
    bb5e:	685b      	ldr	r3, [r3, #4]
    bb60:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    bb64:	f89d 2017 	ldrb.w	r2, [sp, #23]
    bb68:	4610      	mov	r0, r2
    bb6a:	4798      	blx	r3
            for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    bb6c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    bb70:	3301      	adds	r3, #1
    bb72:	f88d 3017 	strb.w	r3, [sp, #23]
    bb76:	f89d 3017 	ldrb.w	r3, [sp, #23]
    bb7a:	2b01      	cmp	r3, #1
    bb7c:	d9c3      	bls.n	bb06 <Pdb_Adc_Ip_IRQHandler+0x3e>
            /* Clear all sequence error flags triggered from the current channel
            * by writing 0 to raised bits. */
            Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
        }
    }
}
    bb7e:	e022      	b.n	bbc6 <Pdb_Adc_Ip_IRQHandler+0xfe>
        for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    bb80:	2300      	movs	r3, #0
    bb82:	f88d 3017 	strb.w	r3, [sp, #23]
    bb86:	e01a      	b.n	bbbe <Pdb_Adc_Ip_IRQHandler+0xf6>
            Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    bb88:	f89d 2017 	ldrb.w	r2, [sp, #23]
    bb8c:	9904      	ldr	r1, [sp, #16]
    bb8e:	4613      	mov	r3, r2
    bb90:	009b      	lsls	r3, r3, #2
    bb92:	4413      	add	r3, r2
    bb94:	00db      	lsls	r3, r3, #3
    bb96:	440b      	add	r3, r1
    bb98:	3314      	adds	r3, #20
    bb9a:	681b      	ldr	r3, [r3, #0]
    bb9c:	f89d 2017 	ldrb.w	r2, [sp, #23]
    bba0:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    bba4:	9804      	ldr	r0, [sp, #16]
    bba6:	4613      	mov	r3, r2
    bba8:	009b      	lsls	r3, r3, #2
    bbaa:	4413      	add	r3, r2
    bbac:	00db      	lsls	r3, r3, #3
    bbae:	4403      	add	r3, r0
    bbb0:	3314      	adds	r3, #20
    bbb2:	6019      	str	r1, [r3, #0]
        for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    bbb4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    bbb8:	3301      	adds	r3, #1
    bbba:	f88d 3017 	strb.w	r3, [sp, #23]
    bbbe:	f89d 3017 	ldrb.w	r3, [sp, #23]
    bbc2:	2b01      	cmp	r3, #1
    bbc4:	d9e0      	bls.n	bb88 <Pdb_Adc_Ip_IRQHandler+0xc0>
}
    bbc6:	bf00      	nop
    bbc8:	b007      	add	sp, #28
    bbca:	f85d fb04 	ldr.w	pc, [sp], #4
    bbce:	bf00      	nop
    bbd0:	0001648c 	.word	0x0001648c
    bbd4:	1fff8e00 	.word	0x1fff8e00

0000bbd8 <PDB_ADC_ResetChannel>:

static inline void PDB_ADC_ResetChannel(PDB_Type * const Base,
                                        const uint8 ChanIdx,
                                        const Pdb_Adc_Ip_PretriggersConfigType * PdbPretriggsConfig)
{
    bbd8:	b500      	push	{lr}
    bbda:	b085      	sub	sp, #20
    bbdc:	9003      	str	r0, [sp, #12]
    bbde:	460b      	mov	r3, r1
    bbe0:	9201      	str	r2, [sp, #4]
    bbe2:	f88d 300b 	strb.w	r3, [sp, #11]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45();
    bbe6:	f005 f8af 	bl	10d48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>
    Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanIdx, PdbPretriggsConfig);
    bbea:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bbee:	9a01      	ldr	r2, [sp, #4]
    bbf0:	4619      	mov	r1, r3
    bbf2:	9803      	ldr	r0, [sp, #12]
    bbf4:	f7ff fbb9 	bl	b36a <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45();
    bbf8:	f005 f8d2 	bl	10da0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47();
    bbfc:	f005 f948 	bl	10e90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>
    Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(Base, ChanIdx, 0xFFu);
    bc00:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bc04:	22ff      	movs	r2, #255	; 0xff
    bc06:	4619      	mov	r1, r3
    bc08:	9803      	ldr	r0, [sp, #12]
    bc0a:	f7ff fbe6 	bl	b3da <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>

    /* Clear all sequence error flags. */
    Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    bc0e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    bc12:	9903      	ldr	r1, [sp, #12]
    bc14:	4613      	mov	r3, r2
    bc16:	009b      	lsls	r3, r3, #2
    bc18:	4413      	add	r3, r2
    bc1a:	00db      	lsls	r3, r3, #3
    bc1c:	440b      	add	r3, r1
    bc1e:	3314      	adds	r3, #20
    bc20:	681b      	ldr	r3, [r3, #0]
    bc22:	f89d 200b 	ldrb.w	r2, [sp, #11]
    bc26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    bc2a:	9803      	ldr	r0, [sp, #12]
    bc2c:	4613      	mov	r3, r2
    bc2e:	009b      	lsls	r3, r3, #2
    bc30:	4413      	add	r3, r2
    bc32:	00db      	lsls	r3, r3, #3
    bc34:	4403      	add	r3, r0
    bc36:	3314      	adds	r3, #20
    bc38:	6019      	str	r1, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47();
    bc3a:	f005 f955 	bl	10ee8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>
}
    bc3e:	bf00      	nop
    bc40:	b005      	add	sp, #20
    bc42:	f85d fb04 	ldr.w	pc, [sp], #4
    bc46:	bf00      	nop

0000bc48 <Ftm_Pwm_Ip_SetClockPs>:
 * @param[in] FtmBase    The FTM base address pointer
 * @param[in] Prescaler  The FTM peripheral clock pre-scale divider
 */
static inline void Ftm_Pwm_Ip_SetClockPs(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         Ftm_Pwm_Ip_ClkPrescalerType   Prescaler)
{
    bc48:	b082      	sub	sp, #8
    bc4a:	9001      	str	r0, [sp, #4]
    bc4c:	9100      	str	r1, [sp, #0]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_PS_MASK) | FTM_SC_PS(Prescaler);
    bc4e:	9b01      	ldr	r3, [sp, #4]
    bc50:	681b      	ldr	r3, [r3, #0]
    bc52:	f023 0207 	bic.w	r2, r3, #7
    bc56:	9b00      	ldr	r3, [sp, #0]
    bc58:	f003 0307 	and.w	r3, r3, #7
    bc5c:	431a      	orrs	r2, r3
    bc5e:	9b01      	ldr	r3, [sp, #4]
    bc60:	601a      	str	r2, [r3, #0]
}
    bc62:	bf00      	nop
    bc64:	b002      	add	sp, #8
    bc66:	4770      	bx	lr

0000bc68 <Ftm_Pwm_Ip_SetClockSource>:
 *            - 10: Fixed clock
 *            - 11: External clock
 */
static inline void Ftm_Pwm_Ip_SetClockSource(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             Ftm_Pwm_Ip_ClkSourceType      ClockSrc)
{
    bc68:	b082      	sub	sp, #8
    bc6a:	9001      	str	r0, [sp, #4]
    bc6c:	9100      	str	r1, [sp, #0]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_CLKS_MASK) | FTM_SC_CLKS(ClockSrc);
    bc6e:	9b01      	ldr	r3, [sp, #4]
    bc70:	681b      	ldr	r3, [r3, #0]
    bc72:	f023 0218 	bic.w	r2, r3, #24
    bc76:	9b00      	ldr	r3, [sp, #0]
    bc78:	00db      	lsls	r3, r3, #3
    bc7a:	f003 0318 	and.w	r3, r3, #24
    bc7e:	431a      	orrs	r2, r3
    bc80:	9b01      	ldr	r3, [sp, #4]
    bc82:	601a      	str	r2, [r3, #0]
}
    bc84:	bf00      	nop
    bc86:	b002      	add	sp, #8
    bc88:	4770      	bx	lr

0000bc8a <Ftm_Pwm_Ip_SetCpwms>:
 *                     - 0U: Up counting mode
 *                     - 1U: Up down counting mode
 */
static inline void Ftm_Pwm_Ip_SetCpwms(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                       boolean                       Mode)
{
    bc8a:	b082      	sub	sp, #8
    bc8c:	9001      	str	r0, [sp, #4]
    bc8e:	460b      	mov	r3, r1
    bc90:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_CPWMS_MASK) | FTM_SC_CPWMS((Mode == TRUE) ? 0x01U : 0x00U);
    bc94:	9b01      	ldr	r3, [sp, #4]
    bc96:	681b      	ldr	r3, [r3, #0]
    bc98:	f023 0320 	bic.w	r3, r3, #32
    bc9c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bca0:	2a00      	cmp	r2, #0
    bca2:	d001      	beq.n	bca8 <Ftm_Pwm_Ip_SetCpwms+0x1e>
    bca4:	2220      	movs	r2, #32
    bca6:	e000      	b.n	bcaa <Ftm_Pwm_Ip_SetCpwms+0x20>
    bca8:	2200      	movs	r2, #0
    bcaa:	431a      	orrs	r2, r3
    bcac:	9b01      	ldr	r3, [sp, #4]
    bcae:	601a      	str	r2, [r3, #0]
}
    bcb0:	bf00      	nop
    bcb2:	b002      	add	sp, #8
    bcb4:	4770      	bx	lr

0000bcb6 <Ftm_Pwm_Ip_GetCpwms>:
 * @return The Center-Aligned PWM selection
 *         - 0U: Up counting mode
 *         - 1U: Up down counting mode
 */
static inline Ftm_Pwm_Ip_CounterModeType Ftm_Pwm_Ip_GetCpwms(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    bcb6:	b082      	sub	sp, #8
    bcb8:	9001      	str	r0, [sp, #4]
    return  (((FtmBase->SC & FTM_SC_CPWMS_MASK) >> FTM_SC_CPWMS_SHIFT) == 0U)? FTM_PWM_IP_EDGE_ALIGNED : FTM_PWM_IP_CENTER_ALIGNED;
    bcba:	9b01      	ldr	r3, [sp, #4]
    bcbc:	681b      	ldr	r3, [r3, #0]
    bcbe:	f003 0320 	and.w	r3, r3, #32
    bcc2:	2b00      	cmp	r3, #0
    bcc4:	bf14      	ite	ne
    bcc6:	2301      	movne	r3, #1
    bcc8:	2300      	moveq	r3, #0
    bcca:	b2db      	uxtb	r3, r3
}
    bccc:	4618      	mov	r0, r3
    bcce:	b002      	add	sp, #8
    bcd0:	4770      	bx	lr

0000bcd2 <Ftm_Pwm_Ip_SetTimerOverflowInt>:
 * @param[in] State - TRUE : Overflow interrupt enabled
 *                  - FALSE: Overflow interrupt disabled
 */
static inline void Ftm_Pwm_Ip_SetTimerOverflowInt(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  boolean                       State)
{
    bcd2:	b082      	sub	sp, #8
    bcd4:	9001      	str	r0, [sp, #4]
    bcd6:	460b      	mov	r3, r1
    bcd8:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_TOIE_MASK) | FTM_SC_TOIE((State == TRUE) ? 0x01U : 0x00U);
    bcdc:	9b01      	ldr	r3, [sp, #4]
    bcde:	681b      	ldr	r3, [r3, #0]
    bce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    bce4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bce8:	2a00      	cmp	r2, #0
    bcea:	d002      	beq.n	bcf2 <Ftm_Pwm_Ip_SetTimerOverflowInt+0x20>
    bcec:	f44f 7280 	mov.w	r2, #256	; 0x100
    bcf0:	e000      	b.n	bcf4 <Ftm_Pwm_Ip_SetTimerOverflowInt+0x22>
    bcf2:	2200      	movs	r2, #0
    bcf4:	431a      	orrs	r2, r3
    bcf6:	9b01      	ldr	r3, [sp, #4]
    bcf8:	601a      	str	r2, [r3, #0]
}
    bcfa:	bf00      	nop
    bcfc:	b002      	add	sp, #8
    bcfe:	4770      	bx	lr

0000bd00 <Ftm_Pwm_Ip_ClearTimerOverflow>:
 * @brief Clears the timer overflow interrupt flag.
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_ClearTimerOverflow(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    bd00:	b082      	sub	sp, #8
    bd02:	9001      	str	r0, [sp, #4]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_TOF_MASK) | FTM_SC_TOF(0U);
    bd04:	9b01      	ldr	r3, [sp, #4]
    bd06:	681b      	ldr	r3, [r3, #0]
    bd08:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    bd0c:	9b01      	ldr	r3, [sp, #4]
    bd0e:	601a      	str	r2, [r3, #0]
#ifdef ERRATA_E9005
    /* Read-after-write sequence to guarantee required serialization of memory operations */
    FtmBase->SC;
#endif
}
    bd10:	bf00      	nop
    bd12:	b002      	add	sp, #8
    bd14:	4770      	bx	lr

0000bd16 <Ftm_Pwm_Ip_EnablePwmChannelOutputs>:
 * @param[in] Channel The FTM channel

 */
static inline void Ftm_Pwm_Ip_EnablePwmChannelOutputs(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8                         Channel)
{
    bd16:	b082      	sub	sp, #8
    bd18:	9001      	str	r0, [sp, #4]
    bd1a:	460b      	mov	r3, r1
    bd1c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~(1UL << (Channel + FTM_SC_PWMEN0_SHIFT))) | (1UL << (Channel + FTM_SC_PWMEN0_SHIFT));
    bd20:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bd24:	3310      	adds	r3, #16
    bd26:	2201      	movs	r2, #1
    bd28:	409a      	lsls	r2, r3
    bd2a:	9b01      	ldr	r3, [sp, #4]
    bd2c:	681b      	ldr	r3, [r3, #0]
    bd2e:	431a      	orrs	r2, r3
    bd30:	9b01      	ldr	r3, [sp, #4]
    bd32:	601a      	str	r2, [r3, #0]
}
    bd34:	bf00      	nop
    bd36:	b002      	add	sp, #8
    bd38:	4770      	bx	lr

0000bd3a <Ftm_Pwm_Ip_SetCounter>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The FTM timer counter value to be set
 */
static inline void Ftm_Pwm_Ip_SetCounter(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         uint16                        Value)
{
    bd3a:	b082      	sub	sp, #8
    bd3c:	9001      	str	r0, [sp, #4]
    bd3e:	460b      	mov	r3, r1
    bd40:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->CNT = (FtmBase->CNT & ~FTM_CNT_COUNT_MASK) | FTM_CNT_COUNT(Value);
    bd44:	9b01      	ldr	r3, [sp, #4]
    bd46:	685b      	ldr	r3, [r3, #4]
    bd48:	0c1b      	lsrs	r3, r3, #16
    bd4a:	041b      	lsls	r3, r3, #16
    bd4c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    bd50:	431a      	orrs	r2, r3
    bd52:	9b01      	ldr	r3, [sp, #4]
    bd54:	605a      	str	r2, [r3, #4]
}
    bd56:	bf00      	nop
    bd58:	b002      	add	sp, #8
    bd5a:	4770      	bx	lr

0000bd5c <Ftm_Pwm_Ip_SetMod>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The value to be set to the timer modulo
 */
static inline void Ftm_Pwm_Ip_SetMod(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                     uint16                        Value)
{
    bd5c:	b082      	sub	sp, #8
    bd5e:	9001      	str	r0, [sp, #4]
    bd60:	460b      	mov	r3, r1
    bd62:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->MOD = (FtmBase->MOD & ~FTM_MOD_MOD_MASK) | FTM_MOD_MOD(Value);
    bd66:	9b01      	ldr	r3, [sp, #4]
    bd68:	689b      	ldr	r3, [r3, #8]
    bd6a:	0c1b      	lsrs	r3, r3, #16
    bd6c:	041b      	lsls	r3, r3, #16
    bd6e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    bd72:	431a      	orrs	r2, r3
    bd74:	9b01      	ldr	r3, [sp, #4]
    bd76:	609a      	str	r2, [r3, #8]
}
    bd78:	bf00      	nop
    bd7a:	b002      	add	sp, #8
    bd7c:	4770      	bx	lr

0000bd7e <Ftm_Pwm_Ip_GetChnEdgeLevel>:
 *
 * Implements : Ftm_Pwm_Ip_GetChnEdgeLevel_Activity
 */
static inline uint8 Ftm_Pwm_Ip_GetChnEdgeLevel(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                               Channel)
{
    bd7e:	b084      	sub	sp, #16
    bd80:	9001      	str	r0, [sp, #4]
    bd82:	460b      	mov	r3, r1
    bd84:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 RetValue;

    RetValue = (uint8)((FtmBase->CONTROLS[Channel].CSC & FTM_CSC_ELSA_MASK) >> FTM_CSC_ELSA_SHIFT);
    bd88:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bd8c:	9a01      	ldr	r2, [sp, #4]
    bd8e:	3301      	adds	r3, #1
    bd90:	00db      	lsls	r3, r3, #3
    bd92:	4413      	add	r3, r2
    bd94:	685b      	ldr	r3, [r3, #4]
    bd96:	089b      	lsrs	r3, r3, #2
    bd98:	b2db      	uxtb	r3, r3
    bd9a:	f003 0301 	and.w	r3, r3, #1
    bd9e:	f88d 300f 	strb.w	r3, [sp, #15]

    RetValue |= (uint8)(((FtmBase->CONTROLS[Channel].CSC & FTM_CSC_ELSB_MASK) >> FTM_CSC_ELSB_SHIFT) << 1U);
    bda2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bda6:	9a01      	ldr	r2, [sp, #4]
    bda8:	3301      	adds	r3, #1
    bdaa:	00db      	lsls	r3, r3, #3
    bdac:	4413      	add	r3, r2
    bdae:	685b      	ldr	r3, [r3, #4]
    bdb0:	08db      	lsrs	r3, r3, #3
    bdb2:	b2db      	uxtb	r3, r3
    bdb4:	005b      	lsls	r3, r3, #1
    bdb6:	b2db      	uxtb	r3, r3
    bdb8:	f003 0302 	and.w	r3, r3, #2
    bdbc:	b2da      	uxtb	r2, r3
    bdbe:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bdc2:	4313      	orrs	r3, r2
    bdc4:	f88d 300f 	strb.w	r3, [sp, #15]

    return RetValue;
    bdc8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    bdcc:	4618      	mov	r0, r3
    bdce:	b004      	add	sp, #16
    bdd0:	4770      	bx	lr

0000bdd2 <Ftm_Pwm_Ip_SetChnEdgeLevel>:
 * @param[in] Level    ELSnB:ELSnA :00, 01, 10, 11
 */
static inline void Ftm_Pwm_Ip_SetChnEdgeLevel(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              uint8                         Channel,
                                              Ftm_Pwm_Ip_ChannelModeType    Level)
{
    bdd2:	b086      	sub	sp, #24
    bdd4:	9003      	str	r0, [sp, #12]
    bdd6:	460b      	mov	r3, r1
    bdd8:	9201      	str	r2, [sp, #4]
    bdda:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 LevelA = (uint32)(((uint32)(Level) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_ELSA_MASK);
    bdde:	9b01      	ldr	r3, [sp, #4]
    bde0:	009b      	lsls	r3, r3, #2
    bde2:	f003 0304 	and.w	r3, r3, #4
    bde6:	9305      	str	r3, [sp, #20]

    uint32 LevelB = (uint32)(((uint32)(Level) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_ELSB_MASK);
    bde8:	9b01      	ldr	r3, [sp, #4]
    bdea:	009b      	lsls	r3, r3, #2
    bdec:	f003 0308 	and.w	r3, r3, #8
    bdf0:	9304      	str	r3, [sp, #16]

    /* write ELSA bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_ELSA_MASK) | LevelA;
    bdf2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bdf6:	9a03      	ldr	r2, [sp, #12]
    bdf8:	3301      	adds	r3, #1
    bdfa:	00db      	lsls	r3, r3, #3
    bdfc:	4413      	add	r3, r2
    bdfe:	685b      	ldr	r3, [r3, #4]
    be00:	f023 0104 	bic.w	r1, r3, #4
    be04:	f89d 300b 	ldrb.w	r3, [sp, #11]
    be08:	9a05      	ldr	r2, [sp, #20]
    be0a:	430a      	orrs	r2, r1
    be0c:	9903      	ldr	r1, [sp, #12]
    be0e:	3301      	adds	r3, #1
    be10:	00db      	lsls	r3, r3, #3
    be12:	440b      	add	r3, r1
    be14:	605a      	str	r2, [r3, #4]

    /* write ELSB bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_ELSB_MASK) | LevelB;
    be16:	f89d 300b 	ldrb.w	r3, [sp, #11]
    be1a:	9a03      	ldr	r2, [sp, #12]
    be1c:	3301      	adds	r3, #1
    be1e:	00db      	lsls	r3, r3, #3
    be20:	4413      	add	r3, r2
    be22:	685b      	ldr	r3, [r3, #4]
    be24:	f023 0108 	bic.w	r1, r3, #8
    be28:	f89d 300b 	ldrb.w	r3, [sp, #11]
    be2c:	9a04      	ldr	r2, [sp, #16]
    be2e:	430a      	orrs	r2, r1
    be30:	9903      	ldr	r1, [sp, #12]
    be32:	3301      	adds	r3, #1
    be34:	00db      	lsls	r3, r3, #3
    be36:	440b      	add	r3, r1
    be38:	605a      	str	r2, [r3, #4]
}
    be3a:	bf00      	nop
    be3c:	b006      	add	sp, #24
    be3e:	4770      	bx	lr

0000be40 <Ftm_Pwm_Ip_SetChnMSBAMode>:
 * @param[in] Selection  The mode to be set valid value MSnB:MSnA :00, 01, 10, 11
 */
static inline void Ftm_Pwm_Ip_SetChnMSBAMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             uint8                         Channel,
                                             Ftm_Pwm_Ip_ChannelModeType    Selection)
{
    be40:	b086      	sub	sp, #24
    be42:	9003      	str	r0, [sp, #12]
    be44:	460b      	mov	r3, r1
    be46:	9201      	str	r2, [sp, #4]
    be48:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 SelectionA = (uint32)(((uint32)(Selection) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_MSA_MASK);
    be4c:	9b01      	ldr	r3, [sp, #4]
    be4e:	009b      	lsls	r3, r3, #2
    be50:	f003 0310 	and.w	r3, r3, #16
    be54:	9305      	str	r3, [sp, #20]

    uint32 SelectionB = (uint32)(((uint32)(Selection) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_MSB_MASK);
    be56:	9b01      	ldr	r3, [sp, #4]
    be58:	009b      	lsls	r3, r3, #2
    be5a:	f003 0320 	and.w	r3, r3, #32
    be5e:	9304      	str	r3, [sp, #16]

    /* write MSA bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_MSA_MASK) | SelectionA;
    be60:	f89d 300b 	ldrb.w	r3, [sp, #11]
    be64:	9a03      	ldr	r2, [sp, #12]
    be66:	3301      	adds	r3, #1
    be68:	00db      	lsls	r3, r3, #3
    be6a:	4413      	add	r3, r2
    be6c:	685b      	ldr	r3, [r3, #4]
    be6e:	f023 0110 	bic.w	r1, r3, #16
    be72:	f89d 300b 	ldrb.w	r3, [sp, #11]
    be76:	9a05      	ldr	r2, [sp, #20]
    be78:	430a      	orrs	r2, r1
    be7a:	9903      	ldr	r1, [sp, #12]
    be7c:	3301      	adds	r3, #1
    be7e:	00db      	lsls	r3, r3, #3
    be80:	440b      	add	r3, r1
    be82:	605a      	str	r2, [r3, #4]

    /* write MSB bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_MSB_MASK) | SelectionB;
    be84:	f89d 300b 	ldrb.w	r3, [sp, #11]
    be88:	9a03      	ldr	r2, [sp, #12]
    be8a:	3301      	adds	r3, #1
    be8c:	00db      	lsls	r3, r3, #3
    be8e:	4413      	add	r3, r2
    be90:	685b      	ldr	r3, [r3, #4]
    be92:	f023 0120 	bic.w	r1, r3, #32
    be96:	f89d 300b 	ldrb.w	r3, [sp, #11]
    be9a:	9a04      	ldr	r2, [sp, #16]
    be9c:	430a      	orrs	r2, r1
    be9e:	9903      	ldr	r1, [sp, #12]
    bea0:	3301      	adds	r3, #1
    bea2:	00db      	lsls	r3, r3, #3
    bea4:	440b      	add	r3, r1
    bea6:	605a      	str	r2, [r3, #4]
}
    bea8:	bf00      	nop
    beaa:	b006      	add	sp, #24
    beac:	4770      	bx	lr

0000beae <Ftm_Pwm_Ip_GetChnMode>:
 * @return The MSnB:MSnA mode value, will be 00, 01, 10, 11
 *
 */
static inline uint8 Ftm_Pwm_Ip_GetChnMode(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                          uint8                               Channel)
{
    beae:	b084      	sub	sp, #16
    beb0:	9001      	str	r0, [sp, #4]
    beb2:	460b      	mov	r3, r1
    beb4:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 RetValue;

    RetValue = (uint8)(((FtmBase->CONTROLS[Channel].CSC) & FTM_CSC_MSA_MASK) >> FTM_CSC_MSA_SHIFT);
    beb8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bebc:	9a01      	ldr	r2, [sp, #4]
    bebe:	3301      	adds	r3, #1
    bec0:	00db      	lsls	r3, r3, #3
    bec2:	4413      	add	r3, r2
    bec4:	685b      	ldr	r3, [r3, #4]
    bec6:	091b      	lsrs	r3, r3, #4
    bec8:	b2db      	uxtb	r3, r3
    beca:	f003 0301 	and.w	r3, r3, #1
    bece:	f88d 300f 	strb.w	r3, [sp, #15]

    RetValue |= (uint8)((((FtmBase->CONTROLS[Channel].CSC) & FTM_CSC_MSB_MASK) >> FTM_CSC_MSB_SHIFT) << 1U);
    bed2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bed6:	9a01      	ldr	r2, [sp, #4]
    bed8:	3301      	adds	r3, #1
    beda:	00db      	lsls	r3, r3, #3
    bedc:	4413      	add	r3, r2
    bede:	685b      	ldr	r3, [r3, #4]
    bee0:	095b      	lsrs	r3, r3, #5
    bee2:	b2db      	uxtb	r3, r3
    bee4:	005b      	lsls	r3, r3, #1
    bee6:	b2db      	uxtb	r3, r3
    bee8:	f003 0302 	and.w	r3, r3, #2
    beec:	b2da      	uxtb	r2, r3
    beee:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bef2:	4313      	orrs	r3, r2
    bef4:	f88d 300f 	strb.w	r3, [sp, #15]

    return RetValue;
    bef8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    befc:	4618      	mov	r0, r3
    befe:	b004      	add	sp, #16
    bf00:	4770      	bx	lr

0000bf02 <Ftm_Pwm_Ip_UpdateChnInt>:
 * @param[in] Enable  Enable or Disable the FTM peripheral timer channel(n) interrupt.
 */
static inline void Ftm_Pwm_Ip_UpdateChnInt(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                           uint8                         Channel,
                                           boolean                       Enable)
{
    bf02:	b082      	sub	sp, #8
    bf04:	9001      	str	r0, [sp, #4]
    bf06:	460b      	mov	r3, r1
    bf08:	f88d 3003 	strb.w	r3, [sp, #3]
    bf0c:	4613      	mov	r3, r2
    bf0e:	f88d 3002 	strb.w	r3, [sp, #2]
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_CHIE_MASK) | FTM_CSC_CHIE((Enable == TRUE) ? 0x01U : 0x00U);
    bf12:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bf16:	9a01      	ldr	r2, [sp, #4]
    bf18:	3301      	adds	r3, #1
    bf1a:	00db      	lsls	r3, r3, #3
    bf1c:	4413      	add	r3, r2
    bf1e:	685b      	ldr	r3, [r3, #4]
    bf20:	f023 0240 	bic.w	r2, r3, #64	; 0x40
    bf24:	f89d 3002 	ldrb.w	r3, [sp, #2]
    bf28:	2b00      	cmp	r3, #0
    bf2a:	d001      	beq.n	bf30 <Ftm_Pwm_Ip_UpdateChnInt+0x2e>
    bf2c:	2140      	movs	r1, #64	; 0x40
    bf2e:	e000      	b.n	bf32 <Ftm_Pwm_Ip_UpdateChnInt+0x30>
    bf30:	2100      	movs	r1, #0
    bf32:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bf36:	430a      	orrs	r2, r1
    bf38:	9901      	ldr	r1, [sp, #4]
    bf3a:	3301      	adds	r3, #1
    bf3c:	00db      	lsls	r3, r3, #3
    bf3e:	440b      	add	r3, r1
    bf40:	605a      	str	r2, [r3, #4]
}
    bf42:	bf00      	nop
    bf44:	b002      	add	sp, #8
    bf46:	4770      	bx	lr

0000bf48 <Ftm_Pwm_Ip_ClearChnEventFlag>:
 * @param[in] FtmBase The FTM base address pointer
 * @param[in] Channel The FTM peripheral channel number
 */
static inline void Ftm_Pwm_Ip_ClearChnEventFlag(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         Channel)
{
    bf48:	b082      	sub	sp, #8
    bf4a:	9001      	str	r0, [sp, #4]
    bf4c:	460b      	mov	r3, r1
    bf4e:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_CHF_MASK) | FTM_CSC_CHF(0U);
    bf52:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bf56:	9a01      	ldr	r2, [sp, #4]
    bf58:	3301      	adds	r3, #1
    bf5a:	00db      	lsls	r3, r3, #3
    bf5c:	4413      	add	r3, r2
    bf5e:	685a      	ldr	r2, [r3, #4]
    bf60:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bf64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    bf68:	9901      	ldr	r1, [sp, #4]
    bf6a:	3301      	adds	r3, #1
    bf6c:	00db      	lsls	r3, r3, #3
    bf6e:	440b      	add	r3, r1
    bf70:	605a      	str	r2, [r3, #4]
#ifdef ERRATA_E9005
    /* Read-after-write sequence to guarantee required serialization of memory operations */
    FtmBase->CONTROLS[Channel].CSC;
#endif
}
    bf72:	bf00      	nop
    bf74:	b002      	add	sp, #8
    bf76:	4770      	bx	lr

0000bf78 <Ftm_Pwm_Ip_GetChOutputValue>:
 *
 * Implements : Ftm_Pwm_Ip_GetChOutputValue_Activity
 */
static inline boolean Ftm_Pwm_Ip_GetChOutputValue(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                               Channel)
{
    bf78:	b082      	sub	sp, #8
    bf7a:	9001      	str	r0, [sp, #4]
    bf7c:	460b      	mov	r3, r1
    bf7e:	f88d 3003 	strb.w	r3, [sp, #3]
    return (FtmBase->CONTROLS[Channel].CSC & FTM_CSC_CHOV_MASK) != 0U;
    bf82:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bf86:	9a01      	ldr	r2, [sp, #4]
    bf88:	3301      	adds	r3, #1
    bf8a:	00db      	lsls	r3, r3, #3
    bf8c:	4413      	add	r3, r2
    bf8e:	685b      	ldr	r3, [r3, #4]
    bf90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    bf94:	2b00      	cmp	r3, #0
    bf96:	bf14      	ite	ne
    bf98:	2301      	movne	r3, #1
    bf9a:	2300      	moveq	r3, #0
    bf9c:	b2db      	uxtb	r3, r3
}
    bf9e:	4618      	mov	r0, r3
    bfa0:	b002      	add	sp, #8
    bfa2:	4770      	bx	lr

0000bfa4 <Ftm_Pwm_Ip_SetChnCountVal>:
 * @param[in] Value Counter value to be set
 */
static inline void Ftm_Pwm_Ip_SetChnCountVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             uint8                         Channel,
                                             uint16                        Value)
{
    bfa4:	b082      	sub	sp, #8
    bfa6:	9001      	str	r0, [sp, #4]
    bfa8:	460b      	mov	r3, r1
    bfaa:	f88d 3003 	strb.w	r3, [sp, #3]
    bfae:	4613      	mov	r3, r2
    bfb0:	f8ad 3000 	strh.w	r3, [sp]
    FtmBase->CONTROLS[Channel].CV = Value;
    bfb4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bfb8:	f8bd 2000 	ldrh.w	r2, [sp]
    bfbc:	9901      	ldr	r1, [sp, #4]
    bfbe:	3301      	adds	r3, #1
    bfc0:	00db      	lsls	r3, r3, #3
    bfc2:	440b      	add	r3, r1
    bfc4:	609a      	str	r2, [r3, #8]
}
    bfc6:	bf00      	nop
    bfc8:	b002      	add	sp, #8
    bfca:	4770      	bx	lr

0000bfcc <Ftm_Pwm_Ip_SetCounterInitVal>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    Initial value to be set
 */
static inline void Ftm_Pwm_Ip_SetCounterInitVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint16                        Value)
{
    bfcc:	b082      	sub	sp, #8
    bfce:	9001      	str	r0, [sp, #4]
    bfd0:	460b      	mov	r3, r1
    bfd2:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->CNTIN = (FtmBase->CNTIN & ~FTM_CNTIN_INIT_MASK) | FTM_CNTIN_INIT(Value);
    bfd6:	9b01      	ldr	r3, [sp, #4]
    bfd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    bfda:	0c1b      	lsrs	r3, r3, #16
    bfdc:	041b      	lsls	r3, r3, #16
    bfde:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    bfe2:	431a      	orrs	r2, r3
    bfe4:	9b01      	ldr	r3, [sp, #4]
    bfe6:	64da      	str	r2, [r3, #76]	; 0x4c
}
    bfe8:	bf00      	nop
    bfea:	b002      	add	sp, #8
    bfec:	4770      	bx	lr

0000bfee <Ftm_Pwm_Ip_Enable>:
 *                     - TRUE : All registers including FTM-specific registers are available
 *                     - FALSE: Only the TPM-compatible registers are available
 */
static inline void Ftm_Pwm_Ip_Enable(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                     boolean                       Enable)
{
    bfee:	b082      	sub	sp, #8
    bff0:	9001      	str	r0, [sp, #4]
    bff2:	460b      	mov	r3, r1
    bff4:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FTMEN_MASK) | FTM_MODE_FTMEN((Enable == TRUE) ? 0x01U : 0x00U);
    bff8:	9b01      	ldr	r3, [sp, #4]
    bffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bffc:	f023 0301 	bic.w	r3, r3, #1
    c000:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c004:	2a00      	cmp	r2, #0
    c006:	d001      	beq.n	c00c <Ftm_Pwm_Ip_Enable+0x1e>
    c008:	2201      	movs	r2, #1
    c00a:	e000      	b.n	c00e <Ftm_Pwm_Ip_Enable+0x20>
    c00c:	2200      	movs	r2, #0
    c00e:	431a      	orrs	r2, r3
    c010:	9b01      	ldr	r3, [sp, #4]
    c012:	655a      	str	r2, [r3, #84]	; 0x54
}
    c014:	bf00      	nop
    c016:	b002      	add	sp, #8
    c018:	4770      	bx	lr

0000c01a <Ftm_Pwm_Ip_SetPwmSyncMode>:
 *                     - TRUE : Software trigger can only be used for MOD and CV synchronization,
 *                            hardware trigger only for OUTMASK and FTM counter synchronization.
 */
static inline void Ftm_Pwm_Ip_SetPwmSyncMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             boolean                       Enable)
{
    c01a:	b082      	sub	sp, #8
    c01c:	9001      	str	r0, [sp, #4]
    c01e:	460b      	mov	r3, r1
    c020:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_PWMSYNC_MASK) | FTM_MODE_PWMSYNC((Enable == TRUE) ? 0x01U : 0x00U);
    c024:	9b01      	ldr	r3, [sp, #4]
    c026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    c028:	f023 0308 	bic.w	r3, r3, #8
    c02c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c030:	2a00      	cmp	r2, #0
    c032:	d001      	beq.n	c038 <Ftm_Pwm_Ip_SetPwmSyncMode+0x1e>
    c034:	2208      	movs	r2, #8
    c036:	e000      	b.n	c03a <Ftm_Pwm_Ip_SetPwmSyncMode+0x20>
    c038:	2200      	movs	r2, #0
    c03a:	431a      	orrs	r2, r3
    c03c:	9b01      	ldr	r3, [sp, #4]
    c03e:	655a      	str	r2, [r3, #84]	; 0x54
}
    c040:	bf00      	nop
    c042:	b002      	add	sp, #8
    c044:	4770      	bx	lr

0000c046 <Ftm_Pwm_Ip_SetMinLoadingCmd>:
 *                     - TRUE : To enable minimum loading point
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetMinLoadingCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               boolean                       Enable)
{
    c046:	b082      	sub	sp, #8
    c048:	9001      	str	r0, [sp, #4]
    c04a:	460b      	mov	r3, r1
    c04c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_CNTMIN_MASK) | FTM_SYNC_CNTMIN((Enable == TRUE) ? 0x01U : 0x00U);
    c050:	9b01      	ldr	r3, [sp, #4]
    c052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    c054:	f023 0301 	bic.w	r3, r3, #1
    c058:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c05c:	2a00      	cmp	r2, #0
    c05e:	d001      	beq.n	c064 <Ftm_Pwm_Ip_SetMinLoadingCmd+0x1e>
    c060:	2201      	movs	r2, #1
    c062:	e000      	b.n	c066 <Ftm_Pwm_Ip_SetMinLoadingCmd+0x20>
    c064:	2200      	movs	r2, #0
    c066:	431a      	orrs	r2, r3
    c068:	9b01      	ldr	r3, [sp, #4]
    c06a:	659a      	str	r2, [r3, #88]	; 0x58
}
    c06c:	bf00      	nop
    c06e:	b002      	add	sp, #8
    c070:	4770      	bx	lr

0000c072 <Ftm_Pwm_Ip_SetMaxLoadingCmd>:
 *                     - TRUE : To enable maximum loading point
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetMaxLoadingCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               boolean                       Enable)
{
    c072:	b082      	sub	sp, #8
    c074:	9001      	str	r0, [sp, #4]
    c076:	460b      	mov	r3, r1
    c078:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_CNTMAX_MASK) | FTM_SYNC_CNTMAX((Enable == TRUE) ? 0x01U : 0x00U);
    c07c:	9b01      	ldr	r3, [sp, #4]
    c07e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    c080:	f023 0302 	bic.w	r3, r3, #2
    c084:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c088:	2a00      	cmp	r2, #0
    c08a:	d001      	beq.n	c090 <Ftm_Pwm_Ip_SetMaxLoadingCmd+0x1e>
    c08c:	2202      	movs	r2, #2
    c08e:	e000      	b.n	c092 <Ftm_Pwm_Ip_SetMaxLoadingCmd+0x20>
    c090:	2200      	movs	r2, #0
    c092:	431a      	orrs	r2, r3
    c094:	9b01      	ldr	r3, [sp, #4]
    c096:	659a      	str	r2, [r3, #88]	; 0x58
}
    c098:	bf00      	nop
    c09a:	b002      	add	sp, #8
    c09c:	4770      	bx	lr

0000c09e <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>:
 *                     - TRUE : OUTMASK register is updated only by PWM synchronization
 *                     - FALSE: OUTMASK register is updated in all rising edges of the system clock
 */
static inline void Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    c09e:	b082      	sub	sp, #8
    c0a0:	9001      	str	r0, [sp, #4]
    c0a2:	460b      	mov	r3, r1
    c0a4:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_SYNCHOM_MASK) | FTM_SYNC_SYNCHOM((Enable == TRUE) ? 0x01U : 0x00U);
    c0a8:	9b01      	ldr	r3, [sp, #4]
    c0aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    c0ac:	f023 0308 	bic.w	r3, r3, #8
    c0b0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c0b4:	2a00      	cmp	r2, #0
    c0b6:	d001      	beq.n	c0bc <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd+0x1e>
    c0b8:	2208      	movs	r2, #8
    c0ba:	e000      	b.n	c0be <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd+0x20>
    c0bc:	2200      	movs	r2, #0
    c0be:	431a      	orrs	r2, r3
    c0c0:	9b01      	ldr	r3, [sp, #4]
    c0c2:	659a      	str	r2, [r3, #88]	; 0x58
}
    c0c4:	bf00      	nop
    c0c6:	b002      	add	sp, #8
    c0c8:	4770      	bx	lr

0000c0ca <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>:
 *                           - FALSE: Disable hardware trigger from field TriggerNumber for PWM synchronization
 */
static inline void Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                        uint8                         TriggerNumber,
                                                        boolean                       Enable)
{
    c0ca:	b082      	sub	sp, #8
    c0cc:	9001      	str	r0, [sp, #4]
    c0ce:	460b      	mov	r3, r1
    c0d0:	f88d 3003 	strb.w	r3, [sp, #3]
    c0d4:	4613      	mov	r3, r2
    c0d6:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    c0da:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c0de:	2b00      	cmp	r3, #0
    c0e0:	d00a      	beq.n	c0f8 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc+0x2e>
    {
        FtmBase->SYNC |= (uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber;
    c0e2:	9b01      	ldr	r3, [sp, #4]
    c0e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    c0e6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c0ea:	2110      	movs	r1, #16
    c0ec:	fa01 f303 	lsl.w	r3, r1, r3
    c0f0:	431a      	orrs	r2, r3
    c0f2:	9b01      	ldr	r3, [sp, #4]
    c0f4:	659a      	str	r2, [r3, #88]	; 0x58
    }
    else
    {
        FtmBase->SYNC &= ~((uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber);
    }
}
    c0f6:	e00a      	b.n	c10e <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc+0x44>
        FtmBase->SYNC &= ~((uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber);
    c0f8:	9b01      	ldr	r3, [sp, #4]
    c0fa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    c0fc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c100:	2110      	movs	r1, #16
    c102:	fa01 f303 	lsl.w	r3, r1, r3
    c106:	43db      	mvns	r3, r3
    c108:	401a      	ands	r2, r3
    c10a:	9b01      	ldr	r3, [sp, #4]
    c10c:	659a      	str	r2, [r3, #88]	; 0x58
}
    c10e:	bf00      	nop
    c110:	b002      	add	sp, #8
    c112:	4770      	bx	lr

0000c114 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>:
 *                     - TRUE : Software trigger is selected
 *                     - FALSE: Software trigger is not selected
 */
static inline void Ftm_Pwm_Ip_SetSoftwareTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    boolean                       Enable)
{
    c114:	b082      	sub	sp, #8
    c116:	9001      	str	r0, [sp, #4]
    c118:	460b      	mov	r3, r1
    c11a:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_SWSYNC_MASK) | FTM_SYNC_SWSYNC((Enable == TRUE) ? 0x01U : 0x00U);
    c11e:	9b01      	ldr	r3, [sp, #4]
    c120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    c122:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    c126:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c12a:	2a00      	cmp	r2, #0
    c12c:	d001      	beq.n	c132 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd+0x1e>
    c12e:	2280      	movs	r2, #128	; 0x80
    c130:	e000      	b.n	c134 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd+0x20>
    c132:	2200      	movs	r2, #0
    c134:	431a      	orrs	r2, r3
    c136:	9b01      	ldr	r3, [sp, #4]
    c138:	659a      	str	r2, [r3, #88]	; 0x58
}
    c13a:	bf00      	nop
    c13c:	b002      	add	sp, #8
    c13e:	4770      	bx	lr

0000c140 <Ftm_Pwm_Ip_SetChnOutputInitStateCmd>:
 * Implements : Ftm_Pwm_Ip_SetChnOutputInitStateCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnOutputInitStateCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       uint8                         Channel,
                                                       Ftm_Pwm_Ip_OutputStateType    State)
{
    c140:	b084      	sub	sp, #16
    c142:	9003      	str	r0, [sp, #12]
    c144:	460b      	mov	r3, r1
    c146:	9201      	str	r2, [sp, #4]
    c148:	f88d 300b 	strb.w	r3, [sp, #11]
    if (FTM_PWM_IP_OUTPUT_STATE_HIGH == State)
    c14c:	9b01      	ldr	r3, [sp, #4]
    c14e:	2b01      	cmp	r3, #1
    c150:	d10a      	bne.n	c168 <Ftm_Pwm_Ip_SetChnOutputInitStateCmd+0x28>
    {
        FtmBase->OUTINIT |= (1UL << Channel);
    c152:	9b03      	ldr	r3, [sp, #12]
    c154:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    c156:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c15a:	2101      	movs	r1, #1
    c15c:	fa01 f303 	lsl.w	r3, r1, r3
    c160:	431a      	orrs	r2, r3
    c162:	9b03      	ldr	r3, [sp, #12]
    c164:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    else
    {
        FtmBase->OUTINIT &= ~(1UL << Channel);
    }
}
    c166:	e00a      	b.n	c17e <Ftm_Pwm_Ip_SetChnOutputInitStateCmd+0x3e>
        FtmBase->OUTINIT &= ~(1UL << Channel);
    c168:	9b03      	ldr	r3, [sp, #12]
    c16a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    c16c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c170:	2101      	movs	r1, #1
    c172:	fa01 f303 	lsl.w	r3, r1, r3
    c176:	43db      	mvns	r3, r3
    c178:	401a      	ands	r2, r3
    c17a:	9b03      	ldr	r3, [sp, #12]
    c17c:	65da      	str	r2, [r3, #92]	; 0x5c
}
    c17e:	bf00      	nop
    c180:	b004      	add	sp, #16
    c182:	4770      	bx	lr

0000c184 <Ftm_Pwm_Ip_SetChnOutputMask>:
 * Implements : Ftm_Pwm_Ip_SetChnOutputMask_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnOutputMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Channel,
                                               boolean                       EnableMask)
{
    c184:	b082      	sub	sp, #8
    c186:	9001      	str	r0, [sp, #4]
    c188:	460b      	mov	r3, r1
    c18a:	f88d 3003 	strb.w	r3, [sp, #3]
    c18e:	4613      	mov	r3, r2
    c190:	f88d 3002 	strb.w	r3, [sp, #2]
    if (EnableMask)
    c194:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c198:	2b00      	cmp	r3, #0
    c19a:	d00a      	beq.n	c1b2 <Ftm_Pwm_Ip_SetChnOutputMask+0x2e>
    {
        FtmBase->OUTMASK |= 1UL << Channel;
    c19c:	9b01      	ldr	r3, [sp, #4]
    c19e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    c1a0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c1a4:	2101      	movs	r1, #1
    c1a6:	fa01 f303 	lsl.w	r3, r1, r3
    c1aa:	431a      	orrs	r2, r3
    c1ac:	9b01      	ldr	r3, [sp, #4]
    c1ae:	661a      	str	r2, [r3, #96]	; 0x60
    }
    else
    {
        FtmBase->OUTMASK &= ~(1UL << Channel);
    }
}
    c1b0:	e00a      	b.n	c1c8 <Ftm_Pwm_Ip_SetChnOutputMask+0x44>
        FtmBase->OUTMASK &= ~(1UL << Channel);
    c1b2:	9b01      	ldr	r3, [sp, #4]
    c1b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    c1b6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c1ba:	2101      	movs	r1, #1
    c1bc:	fa01 f303 	lsl.w	r3, r1, r3
    c1c0:	43db      	mvns	r3, r3
    c1c2:	401a      	ands	r2, r3
    c1c4:	9b01      	ldr	r3, [sp, #4]
    c1c6:	661a      	str	r2, [r3, #96]	; 0x60
}
    c1c8:	bf00      	nop
    c1ca:	b002      	add	sp, #8
    c1cc:	4770      	bx	lr

0000c1ce <Ftm_Pwm_Ip_SetOutmaskReg>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] RegVal   Value to be written to the register
 */
static inline void Ftm_Pwm_Ip_SetOutmaskReg(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                            uint32                        RegVal)
{
    c1ce:	b082      	sub	sp, #8
    c1d0:	9001      	str	r0, [sp, #4]
    c1d2:	9100      	str	r1, [sp, #0]
    FtmBase->OUTMASK = ((FtmBase->OUTMASK & (uint32)(~RegVal))| RegVal);
    c1d4:	9b01      	ldr	r3, [sp, #4]
    c1d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    c1d8:	9b00      	ldr	r3, [sp, #0]
    c1da:	43db      	mvns	r3, r3
    c1dc:	401a      	ands	r2, r3
    c1de:	9b00      	ldr	r3, [sp, #0]
    c1e0:	431a      	orrs	r2, r3
    c1e2:	9b01      	ldr	r3, [sp, #4]
    c1e4:	661a      	str	r2, [r3, #96]	; 0x60
}
    c1e6:	bf00      	nop
    c1e8:	b002      	add	sp, #8
    c1ea:	4770      	bx	lr

0000c1ec <Ftm_Pwm_Ip_ClearOutmaskReg>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] RegVal   Value to be written to the register
 */
static inline void Ftm_Pwm_Ip_ClearOutmaskReg(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              uint32                        RegVal)
{
    c1ec:	b082      	sub	sp, #8
    c1ee:	9001      	str	r0, [sp, #4]
    c1f0:	9100      	str	r1, [sp, #0]
    FtmBase->OUTMASK = ((FtmBase->OUTMASK & (uint32)(~RegVal))|0U);
    c1f2:	9b01      	ldr	r3, [sp, #4]
    c1f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    c1f6:	9b00      	ldr	r3, [sp, #0]
    c1f8:	43db      	mvns	r3, r3
    c1fa:	401a      	ands	r2, r3
    c1fc:	9b01      	ldr	r3, [sp, #4]
    c1fe:	661a      	str	r2, [r3, #96]	; 0x60
}
    c200:	bf00      	nop
    c202:	b002      	add	sp, #8
    c204:	4770      	bx	lr

0000c206 <Ftm_Pwm_Ip_SetDualChnCombineCmd>:
 *                      - FALSE: Channels pair are independent
 */
static inline void Ftm_Pwm_Ip_SetDualChnCombineCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   uint8                         ChPairId,
                                                   boolean                       Enable)
{
    c206:	b082      	sub	sp, #8
    c208:	9001      	str	r0, [sp, #4]
    c20a:	460b      	mov	r3, r1
    c20c:	f88d 3003 	strb.w	r3, [sp, #3]
    c210:	4613      	mov	r3, r2
    c212:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    c216:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c21a:	2b00      	cmp	r3, #0
    c21c:	d00b      	beq.n	c236 <Ftm_Pwm_Ip_SetDualChnCombineCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    c21e:	9b01      	ldr	r3, [sp, #4]
    c220:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c222:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c226:	00db      	lsls	r3, r3, #3
    c228:	2101      	movs	r1, #1
    c22a:	fa01 f303 	lsl.w	r3, r1, r3
    c22e:	431a      	orrs	r2, r3
    c230:	9b01      	ldr	r3, [sp, #4]
    c232:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    c234:	e00b      	b.n	c24e <Ftm_Pwm_Ip_SetDualChnCombineCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    c236:	9b01      	ldr	r3, [sp, #4]
    c238:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c23a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c23e:	00db      	lsls	r3, r3, #3
    c240:	2101      	movs	r1, #1
    c242:	fa01 f303 	lsl.w	r3, r1, r3
    c246:	43db      	mvns	r3, r3
    c248:	401a      	ands	r2, r3
    c24a:	9b01      	ldr	r3, [sp, #4]
    c24c:	665a      	str	r2, [r3, #100]	; 0x64
}
    c24e:	bf00      	nop
    c250:	b002      	add	sp, #8
    c252:	4770      	bx	lr

0000c254 <Ftm_Pwm_Ip_GetDualChnCombineCmd>:
 *         - TRUE : Channels pair are combined
 *         - FALSE: Channels pair are independent
 */
static inline boolean Ftm_Pwm_Ip_GetDualChnCombineCmd(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8 ChPairId)
{
    c254:	b082      	sub	sp, #8
    c256:	9001      	str	r0, [sp, #4]
    c258:	460b      	mov	r3, r1
    c25a:	f88d 3003 	strb.w	r3, [sp, #3]
    return (FtmBase->COMBINE & ((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) != 0U;
    c25e:	9b01      	ldr	r3, [sp, #4]
    c260:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c262:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c266:	00db      	lsls	r3, r3, #3
    c268:	fa22 f303 	lsr.w	r3, r2, r3
    c26c:	f003 0301 	and.w	r3, r3, #1
    c270:	2b00      	cmp	r3, #0
    c272:	bf14      	ite	ne
    c274:	2301      	movne	r3, #1
    c276:	2300      	moveq	r3, #0
    c278:	b2db      	uxtb	r3, r3
}
    c27a:	4618      	mov	r0, r3
    c27c:	b002      	add	sp, #8
    c27e:	4770      	bx	lr

0000c280 <Ftm_Pwm_Ip_SetDualChnCompCmd>:
 *                      - FALSE: The channel (n+1) output is the same as the channel (n) output
 */
static inline void Ftm_Pwm_Ip_SetDualChnCompCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         ChPairId,
                                                boolean                       Enable)
{
    c280:	b082      	sub	sp, #8
    c282:	9001      	str	r0, [sp, #4]
    c284:	460b      	mov	r3, r1
    c286:	f88d 3003 	strb.w	r3, [sp, #3]
    c28a:	4613      	mov	r3, r2
    c28c:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable == TRUE)
    c290:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c294:	2b00      	cmp	r3, #0
    c296:	d00b      	beq.n	c2b0 <Ftm_Pwm_Ip_SetDualChnCompCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    c298:	9b01      	ldr	r3, [sp, #4]
    c29a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c29c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c2a0:	00db      	lsls	r3, r3, #3
    c2a2:	2102      	movs	r1, #2
    c2a4:	fa01 f303 	lsl.w	r3, r1, r3
    c2a8:	431a      	orrs	r2, r3
    c2aa:	9b01      	ldr	r3, [sp, #4]
    c2ac:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    c2ae:	e00b      	b.n	c2c8 <Ftm_Pwm_Ip_SetDualChnCompCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    c2b0:	9b01      	ldr	r3, [sp, #4]
    c2b2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c2b4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c2b8:	00db      	lsls	r3, r3, #3
    c2ba:	2102      	movs	r1, #2
    c2bc:	fa01 f303 	lsl.w	r3, r1, r3
    c2c0:	43db      	mvns	r3, r3
    c2c2:	401a      	ands	r2, r3
    c2c4:	9b01      	ldr	r3, [sp, #4]
    c2c6:	665a      	str	r2, [r3, #100]	; 0x64
}
    c2c8:	bf00      	nop
    c2ca:	b002      	add	sp, #8
    c2cc:	4770      	bx	lr

0000c2ce <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd>:
 *                      - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetDualChnDeadtimeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         ChPairId,
                                                    boolean                       Enable)
{
    c2ce:	b082      	sub	sp, #8
    c2d0:	9001      	str	r0, [sp, #4]
    c2d2:	460b      	mov	r3, r1
    c2d4:	f88d 3003 	strb.w	r3, [sp, #3]
    c2d8:	4613      	mov	r3, r2
    c2da:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    c2de:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c2e2:	2b00      	cmp	r3, #0
    c2e4:	d00b      	beq.n	c2fe <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    c2e6:	9b01      	ldr	r3, [sp, #4]
    c2e8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c2ea:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c2ee:	00db      	lsls	r3, r3, #3
    c2f0:	2110      	movs	r1, #16
    c2f2:	fa01 f303 	lsl.w	r3, r1, r3
    c2f6:	431a      	orrs	r2, r3
    c2f8:	9b01      	ldr	r3, [sp, #4]
    c2fa:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    c2fc:	e00b      	b.n	c316 <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    c2fe:	9b01      	ldr	r3, [sp, #4]
    c300:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c302:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c306:	00db      	lsls	r3, r3, #3
    c308:	2110      	movs	r1, #16
    c30a:	fa01 f303 	lsl.w	r3, r1, r3
    c30e:	43db      	mvns	r3, r3
    c310:	401a      	ands	r2, r3
    c312:	9b01      	ldr	r3, [sp, #4]
    c314:	665a      	str	r2, [r3, #100]	; 0x64
}
    c316:	bf00      	nop
    c318:	b002      	add	sp, #8
    c31a:	4770      	bx	lr

0000c31c <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>:
 *                      - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   uint8                         ChPairId,
                                                   boolean                       Enable)
{
    c31c:	b082      	sub	sp, #8
    c31e:	9001      	str	r0, [sp, #4]
    c320:	460b      	mov	r3, r1
    c322:	f88d 3003 	strb.w	r3, [sp, #3]
    c326:	4613      	mov	r3, r2
    c328:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    c32c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c330:	2b00      	cmp	r3, #0
    c332:	d00b      	beq.n	c34c <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    c334:	9b01      	ldr	r3, [sp, #4]
    c336:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c338:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c33c:	00db      	lsls	r3, r3, #3
    c33e:	2120      	movs	r1, #32
    c340:	fa01 f303 	lsl.w	r3, r1, r3
    c344:	431a      	orrs	r2, r3
    c346:	9b01      	ldr	r3, [sp, #4]
    c348:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    c34a:	e00b      	b.n	c364 <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    c34c:	9b01      	ldr	r3, [sp, #4]
    c34e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c350:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c354:	00db      	lsls	r3, r3, #3
    c356:	2120      	movs	r1, #32
    c358:	fa01 f303 	lsl.w	r3, r1, r3
    c35c:	43db      	mvns	r3, r3
    c35e:	401a      	ands	r2, r3
    c360:	9b01      	ldr	r3, [sp, #4]
    c362:	665a      	str	r2, [r3, #100]	; 0x64
}
    c364:	bf00      	nop
    c366:	b002      	add	sp, #8
    c368:	4770      	bx	lr

0000c36a <Ftm_Pwm_Ip_SetDualChnMCombineCmd>:
 *                      - FALSE: To disable modified combine
 */
static inline void Ftm_Pwm_Ip_SetDualChnMCombineCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         ChPairId,
                                                    boolean                       Enable)
{
    c36a:	b082      	sub	sp, #8
    c36c:	9001      	str	r0, [sp, #4]
    c36e:	460b      	mov	r3, r1
    c370:	f88d 3003 	strb.w	r3, [sp, #3]
    c374:	4613      	mov	r3, r2
    c376:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    c37a:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c37e:	2b00      	cmp	r3, #0
    c380:	d00b      	beq.n	c39a <Ftm_Pwm_Ip_SetDualChnMCombineCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    c382:	9b01      	ldr	r3, [sp, #4]
    c384:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c386:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c38a:	00db      	lsls	r3, r3, #3
    c38c:	2180      	movs	r1, #128	; 0x80
    c38e:	fa01 f303 	lsl.w	r3, r1, r3
    c392:	431a      	orrs	r2, r3
    c394:	9b01      	ldr	r3, [sp, #4]
    c396:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    c398:	e00b      	b.n	c3b2 <Ftm_Pwm_Ip_SetDualChnMCombineCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    c39a:	9b01      	ldr	r3, [sp, #4]
    c39c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c39e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c3a2:	00db      	lsls	r3, r3, #3
    c3a4:	2180      	movs	r1, #128	; 0x80
    c3a6:	fa01 f303 	lsl.w	r3, r1, r3
    c3aa:	43db      	mvns	r3, r3
    c3ac:	401a      	ands	r2, r3
    c3ae:	9b01      	ldr	r3, [sp, #4]
    c3b0:	665a      	str	r2, [r3, #100]	; 0x64
}
    c3b2:	bf00      	nop
    c3b4:	b002      	add	sp, #8
    c3b6:	4770      	bx	lr

0000c3b8 <Ftm_Pwm_Ip_SetDeadtimeCount>:
 *                     - 2U : 2 count is inserted
 *                     - ... up to a possible 63 counts
 */
static inline void Ftm_Pwm_Ip_SetDeadtimeCount(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Count)
{
    c3b8:	b082      	sub	sp, #8
    c3ba:	9001      	str	r0, [sp, #4]
    c3bc:	460b      	mov	r3, r1
    c3be:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTVAL_MASK) | FTM_DEADTIME_DTVAL(Count);
    c3c2:	9b01      	ldr	r3, [sp, #4]
    c3c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    c3c6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
    c3ca:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c3ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c3d2:	431a      	orrs	r2, r3
    c3d4:	9b01      	ldr	r3, [sp, #4]
    c3d6:	669a      	str	r2, [r3, #104]	; 0x68
}
    c3d8:	bf00      	nop
    c3da:	b002      	add	sp, #8
    c3dc:	4770      	bx	lr

0000c3de <Ftm_Pwm_Ip_SetDeadtimePrescaler>:
 *                    - FTM_DEADTIME_DIV_4 : Divide by 4
 *                    - FTM_DEADTIME_DIV_16: Divide by 16
 */
static inline void Ftm_Pwm_Ip_SetDeadtimePrescaler(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   Ftm_Pwm_Ip_DeadtimePrescalerType Divider)
{
    c3de:	b082      	sub	sp, #8
    c3e0:	9001      	str	r0, [sp, #4]
    c3e2:	9100      	str	r1, [sp, #0]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTPS_MASK) | FTM_DEADTIME_DTPS((uint8)Divider);
    c3e4:	9b01      	ldr	r3, [sp, #4]
    c3e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    c3e8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
    c3ec:	9b00      	ldr	r3, [sp, #0]
    c3ee:	b2db      	uxtb	r3, r3
    c3f0:	019b      	lsls	r3, r3, #6
    c3f2:	b2db      	uxtb	r3, r3
    c3f4:	431a      	orrs	r2, r3
    c3f6:	9b01      	ldr	r3, [sp, #4]
    c3f8:	669a      	str	r2, [r3, #104]	; 0x68
}
    c3fa:	bf00      	nop
    c3fc:	b002      	add	sp, #8
    c3fe:	4770      	bx	lr

0000c400 <Ftm_Pwm_Ip_SetExtDeadtimeValue>:
 * @param[in] FtmBase The FTM base address pointer
 * @param[in] Value The FTM peripheral extend pre-scale divider
 */
static inline void Ftm_Pwm_Ip_SetExtDeadtimeValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         Value)
{
    c400:	b082      	sub	sp, #8
    c402:	9001      	str	r0, [sp, #4]
    c404:	460b      	mov	r3, r1
    c406:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTVALEX_MASK) | FTM_DEADTIME_DTVALEX(Value);
    c40a:	9b01      	ldr	r3, [sp, #4]
    c40c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    c40e:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
    c412:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c416:	041b      	lsls	r3, r3, #16
    c418:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    c41c:	431a      	orrs	r2, r3
    c41e:	9b01      	ldr	r3, [sp, #4]
    c420:	669a      	str	r2, [r3, #104]	; 0x68
}
    c422:	bf00      	nop
    c424:	b002      	add	sp, #8
    c426:	4770      	bx	lr

0000c428 <Ftm_Pwm_Ip_SetInitTriggerCmd>:
 *                     - TRUE : To enable
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetInitTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                boolean Enable)
{
    c428:	b082      	sub	sp, #8
    c42a:	9001      	str	r0, [sp, #4]
    c42c:	460b      	mov	r3, r1
    c42e:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->EXTTRIG = (FtmBase->EXTTRIG & ~FTM_EXTTRIG_INITTRIGEN_MASK) | FTM_EXTTRIG_INITTRIGEN((Enable == TRUE) ? 0x01U : 0x00U);
    c432:	9b01      	ldr	r3, [sp, #4]
    c434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    c436:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    c43a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c43e:	2a00      	cmp	r2, #0
    c440:	d001      	beq.n	c446 <Ftm_Pwm_Ip_SetInitTriggerCmd+0x1e>
    c442:	2240      	movs	r2, #64	; 0x40
    c444:	e000      	b.n	c448 <Ftm_Pwm_Ip_SetInitTriggerCmd+0x20>
    c446:	2200      	movs	r2, #0
    c448:	431a      	orrs	r2, r3
    c44a:	9b01      	ldr	r3, [sp, #4]
    c44c:	66da      	str	r2, [r3, #108]	; 0x6c
}
    c44e:	bf00      	nop
    c450:	b002      	add	sp, #8
    c452:	4770      	bx	lr

0000c454 <Ftm_Pwm_Ip_DisableTriggerMask>:
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_DisableTriggerMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                 uint32                        TriggerMask)
{
    c454:	b082      	sub	sp, #8
    c456:	9001      	str	r0, [sp, #4]
    c458:	9100      	str	r1, [sp, #0]
    FtmBase->EXTTRIG = ((FtmBase->EXTTRIG & ~TriggerMask) | (0U));
    c45a:	9b01      	ldr	r3, [sp, #4]
    c45c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    c45e:	9b00      	ldr	r3, [sp, #0]
    c460:	43db      	mvns	r3, r3
    c462:	401a      	ands	r2, r3
    c464:	9b01      	ldr	r3, [sp, #4]
    c466:	66da      	str	r2, [r3, #108]	; 0x6c
}
    c468:	bf00      	nop
    c46a:	b002      	add	sp, #8
    c46c:	4770      	bx	lr

0000c46e <Ftm_Pwm_Ip_EnableTriggerMask>:
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_EnableTriggerMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint32                        TriggerMask)
{
    c46e:	b082      	sub	sp, #8
    c470:	9001      	str	r0, [sp, #4]
    c472:	9100      	str	r1, [sp, #0]
    FtmBase->EXTTRIG = ((FtmBase->EXTTRIG & ~TriggerMask) | TriggerMask);
    c474:	9b01      	ldr	r3, [sp, #4]
    c476:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    c478:	9b00      	ldr	r3, [sp, #0]
    c47a:	43db      	mvns	r3, r3
    c47c:	401a      	ands	r2, r3
    c47e:	9b00      	ldr	r3, [sp, #0]
    c480:	431a      	orrs	r2, r3
    c482:	9b01      	ldr	r3, [sp, #4]
    c484:	66da      	str	r2, [r3, #108]	; 0x6c
}
    c486:	bf00      	nop
    c488:	b002      	add	sp, #8
    c48a:	4770      	bx	lr

0000c48c <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>:
 *                      - FALSE  : The channel polarity is active high
 */
static inline void Ftm_Pwm_Ip_SetChnOutputPolarityCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8                         Channel,
                                                      Ftm_Pwm_Ip_PolarityType       Polarity)
{
    c48c:	b084      	sub	sp, #16
    c48e:	9003      	str	r0, [sp, #12]
    c490:	460b      	mov	r3, r1
    c492:	9201      	str	r2, [sp, #4]
    c494:	f88d 300b 	strb.w	r3, [sp, #11]
    if (FTM_PWM_IP_POLARITY_HIGH == Polarity)
    c498:	9b01      	ldr	r3, [sp, #4]
    c49a:	2b00      	cmp	r3, #0
    c49c:	d10b      	bne.n	c4b6 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd+0x2a>
    {
        FtmBase->POL &= ~(1UL << Channel);
    c49e:	9b03      	ldr	r3, [sp, #12]
    c4a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    c4a2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c4a6:	2101      	movs	r1, #1
    c4a8:	fa01 f303 	lsl.w	r3, r1, r3
    c4ac:	43db      	mvns	r3, r3
    c4ae:	401a      	ands	r2, r3
    c4b0:	9b03      	ldr	r3, [sp, #12]
    c4b2:	671a      	str	r2, [r3, #112]	; 0x70
    }
    else
    {
        FtmBase->POL |= 1UL << Channel;
    }
}
    c4b4:	e009      	b.n	c4ca <Ftm_Pwm_Ip_SetChnOutputPolarityCmd+0x3e>
        FtmBase->POL |= 1UL << Channel;
    c4b6:	9b03      	ldr	r3, [sp, #12]
    c4b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    c4ba:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c4be:	2101      	movs	r1, #1
    c4c0:	fa01 f303 	lsl.w	r3, r1, r3
    c4c4:	431a      	orrs	r2, r3
    c4c6:	9b03      	ldr	r3, [sp, #12]
    c4c8:	671a      	str	r2, [r3, #112]	; 0x70
}
    c4ca:	bf00      	nop
    c4cc:	b004      	add	sp, #16
    c4ce:	4770      	bx	lr

0000c4d0 <Ftm_Pwm_Ip_GetChnOutputPolarity>:
 *            - FTM_PWM_IP_POLARITY_LOW : The channel polarity is active low
 *            - FTM_PWM_IP_POLARITY_HIGH  : The channel polarity is active high
 */
static inline Ftm_Pwm_Ip_PolarityType Ftm_Pwm_Ip_GetChnOutputPolarity(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                                      uint8                               Channel)
{
    c4d0:	b082      	sub	sp, #8
    c4d2:	9001      	str	r0, [sp, #4]
    c4d4:	460b      	mov	r3, r1
    c4d6:	f88d 3003 	strb.w	r3, [sp, #3]
    return (((FtmBase->POL >> Channel) & 1U) == 1U)? FTM_PWM_IP_POLARITY_LOW : FTM_PWM_IP_POLARITY_HIGH;
    c4da:	9b01      	ldr	r3, [sp, #4]
    c4dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    c4de:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c4e2:	fa22 f303 	lsr.w	r3, r2, r3
    c4e6:	f003 0301 	and.w	r3, r3, #1
    c4ea:	2b01      	cmp	r3, #1
    c4ec:	bf0c      	ite	eq
    c4ee:	2301      	moveq	r3, #1
    c4f0:	2300      	movne	r3, #0
    c4f2:	b2db      	uxtb	r3, r3
}
    c4f4:	4618      	mov	r0, r3
    c4f6:	b002      	add	sp, #8
    c4f8:	4770      	bx	lr

0000c4fa <Ftm_Pwm_Ip_SetLoadFreq>:
 *
 * Implements : Ftm_Pwm_Ip_SetLoadFreq_Activity
 */
static inline void Ftm_Pwm_Ip_SetLoadFreq(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                          uint8                         Val)
{
    c4fa:	b082      	sub	sp, #8
    c4fc:	9001      	str	r0, [sp, #4]
    c4fe:	460b      	mov	r3, r1
    c500:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_LDFQ_MASK) | FTM_CONF_LDFQ(Val);
    c504:	9b01      	ldr	r3, [sp, #4]
    c506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    c50a:	f023 021f 	bic.w	r2, r3, #31
    c50e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c512:	f003 031f 	and.w	r3, r3, #31
    c516:	431a      	orrs	r2, r3
    c518:	9b01      	ldr	r3, [sp, #4]
    c51a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    c51e:	bf00      	nop
    c520:	b002      	add	sp, #8
    c522:	4770      	bx	lr

0000c524 <Ftm_Pwm_Ip_SetBdmMode>:
 *                                        FTM channels in functional mode, writes to MOD,CNTIN and C(n)V
 *                                        registers is in fully functional mode
 */
static inline void Ftm_Pwm_Ip_SetBdmMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         Ftm_Pwm_Ip_DebugModeType      Val)
{
    c524:	b082      	sub	sp, #8
    c526:	9001      	str	r0, [sp, #4]
    c528:	9100      	str	r1, [sp, #0]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_BDMMODE_MASK) | FTM_CONF_BDMMODE(Val);
    c52a:	9b01      	ldr	r3, [sp, #4]
    c52c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    c530:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
    c534:	9b00      	ldr	r3, [sp, #0]
    c536:	019b      	lsls	r3, r3, #6
    c538:	b2db      	uxtb	r3, r3
    c53a:	431a      	orrs	r2, r3
    c53c:	9b01      	ldr	r3, [sp, #4]
    c53e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    c542:	bf00      	nop
    c544:	b002      	add	sp, #8
    c546:	4770      	bx	lr

0000c548 <Ftm_Pwm_Ip_SetInitTriggerMode>:
 *
 * Implements : Ftm_Pwm_Ip_SetInitTrigOnReloadCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetInitTriggerMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                 Ftm_Pwm_Ip_InitTriggModeType  InitTrigMode)
{
    c548:	b082      	sub	sp, #8
    c54a:	9001      	str	r0, [sp, #4]
    c54c:	9100      	str	r1, [sp, #0]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_ITRIGR_MASK) | FTM_CONF_ITRIGR(InitTrigMode);
    c54e:	9b01      	ldr	r3, [sp, #4]
    c550:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    c554:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
    c558:	9b00      	ldr	r3, [sp, #0]
    c55a:	02db      	lsls	r3, r3, #11
    c55c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    c560:	431a      	orrs	r2, r3
    c562:	9b01      	ldr	r3, [sp, #4]
    c564:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    c568:	bf00      	nop
    c56a:	b002      	add	sp, #8
    c56c:	4770      	bx	lr

0000c56e <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd>:
 *                     - TRUE : FTM does not clear the TRIGx bit when the hardware trigger j is detected
 *                     - FALSE: FTM clears the TRIGx bit when the hardware trigger j is detected
 */
static inline void Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      boolean                       Enable)
{
    c56e:	b082      	sub	sp, #8
    c570:	9001      	str	r0, [sp, #4]
    c572:	460b      	mov	r3, r1
    c574:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWTRIGMODE_MASK) | FTM_SYNCONF_HWTRIGMODE((Enable == TRUE) ? 0x01U : 0x00U);
    c578:	9b01      	ldr	r3, [sp, #4]
    c57a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c57e:	f023 0301 	bic.w	r3, r3, #1
    c582:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c586:	2a00      	cmp	r2, #0
    c588:	d001      	beq.n	c58e <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd+0x20>
    c58a:	2201      	movs	r2, #1
    c58c:	e000      	b.n	c590 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd+0x22>
    c58e:	2200      	movs	r2, #0
    c590:	431a      	orrs	r2, r3
    c592:	9b01      	ldr	r3, [sp, #4]
    c594:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c598:	bf00      	nop
    c59a:	b002      	add	sp, #8
    c59c:	4770      	bx	lr

0000c59e <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd>:
 *                     - TRUE : CNTIN register is updated by PWM sync
 *                     - FALSE: CNTIN register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                     boolean                       Enable)
{
    c59e:	b082      	sub	sp, #8
    c5a0:	9001      	str	r0, [sp, #4]
    c5a2:	460b      	mov	r3, r1
    c5a4:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_CNTINC_MASK) | FTM_SYNCONF_CNTINC((Enable == TRUE) ? 0x01U : 0x00U);
    c5a8:	9b01      	ldr	r3, [sp, #4]
    c5aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c5ae:	f023 0304 	bic.w	r3, r3, #4
    c5b2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c5b6:	2a00      	cmp	r2, #0
    c5b8:	d001      	beq.n	c5be <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd+0x20>
    c5ba:	2204      	movs	r2, #4
    c5bc:	e000      	b.n	c5c0 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd+0x22>
    c5be:	2200      	movs	r2, #0
    c5c0:	431a      	orrs	r2, r3
    c5c2:	9b01      	ldr	r3, [sp, #4]
    c5c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c5c8:	bf00      	nop
    c5ca:	b002      	add	sp, #8
    c5cc:	4770      	bx	lr

0000c5ce <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd>:
 *                     - TRUE : INVCTRL register is updated by PWM sync
 *                     - FALSE: INVCTRL register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    c5ce:	b082      	sub	sp, #8
    c5d0:	9001      	str	r0, [sp, #4]
    c5d2:	460b      	mov	r3, r1
    c5d4:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_INVC_MASK) | FTM_SYNCONF_INVC((Enable == TRUE) ? 0x01U : 0x00U);
    c5d8:	9b01      	ldr	r3, [sp, #4]
    c5da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c5de:	f023 0310 	bic.w	r3, r3, #16
    c5e2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c5e6:	2a00      	cmp	r2, #0
    c5e8:	d001      	beq.n	c5ee <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd+0x20>
    c5ea:	2210      	movs	r2, #16
    c5ec:	e000      	b.n	c5f0 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd+0x22>
    c5ee:	2200      	movs	r2, #0
    c5f0:	431a      	orrs	r2, r3
    c5f2:	9b01      	ldr	r3, [sp, #4]
    c5f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c5f8:	bf00      	nop
    c5fa:	b002      	add	sp, #8
    c5fc:	4770      	bx	lr

0000c5fe <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd>:
 *                     - TRUE : SWOCTRL register is updated by PWM sync
 *                     - FALSE: SWOCTRL register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    c5fe:	b082      	sub	sp, #8
    c600:	9001      	str	r0, [sp, #4]
    c602:	460b      	mov	r3, r1
    c604:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWOC_MASK) | FTM_SYNCONF_SWOC((Enable == TRUE) ? 0x01U : 0x00U);
    c608:	9b01      	ldr	r3, [sp, #4]
    c60a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c60e:	f023 0320 	bic.w	r3, r3, #32
    c612:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c616:	2a00      	cmp	r2, #0
    c618:	d001      	beq.n	c61e <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd+0x20>
    c61a:	2220      	movs	r2, #32
    c61c:	e000      	b.n	c620 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd+0x22>
    c61e:	2200      	movs	r2, #0
    c620:	431a      	orrs	r2, r3
    c622:	9b01      	ldr	r3, [sp, #4]
    c624:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c628:	bf00      	nop
    c62a:	b002      	add	sp, #8
    c62c:	4770      	bx	lr

0000c62e <Ftm_Pwm_Ip_SetPwmSyncModeCmd>:
 *                     - TRUE : Enhanced PWM synchronization is selected
 *                     - FALSE: Legacy PWM synchronization is selected
 */
static inline void Ftm_Pwm_Ip_SetPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                boolean                       Mode)
{
    c62e:	b082      	sub	sp, #8
    c630:	9001      	str	r0, [sp, #4]
    c632:	460b      	mov	r3, r1
    c634:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SYNCMODE_MASK) | FTM_SYNCONF_SYNCMODE((Mode == TRUE) ? 0x01U : 0x00U);
    c638:	9b01      	ldr	r3, [sp, #4]
    c63a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c63e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    c642:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c646:	2a00      	cmp	r2, #0
    c648:	d001      	beq.n	c64e <Ftm_Pwm_Ip_SetPwmSyncModeCmd+0x20>
    c64a:	2280      	movs	r2, #128	; 0x80
    c64c:	e000      	b.n	c650 <Ftm_Pwm_Ip_SetPwmSyncModeCmd+0x22>
    c64e:	2200      	movs	r2, #0
    c650:	431a      	orrs	r2, r3
    c652:	9b01      	ldr	r3, [sp, #4]
    c654:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c658:	bf00      	nop
    c65a:	b002      	add	sp, #8
    c65c:	4770      	bx	lr

0000c65e <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates FTM counter sync
 *                     - FALSE: The software trigger does not activate FTM counter sync
 */
static inline void Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean Enable)
{
    c65e:	b082      	sub	sp, #8
    c660:	9001      	str	r0, [sp, #4]
    c662:	460b      	mov	r3, r1
    c664:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWRSTCNT_MASK) | FTM_SYNCONF_SWRSTCNT((Enable == TRUE) ? 0x01U : 0x00U);
    c668:	9b01      	ldr	r3, [sp, #4]
    c66a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c66e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    c672:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c676:	2a00      	cmp	r2, #0
    c678:	d002      	beq.n	c680 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd+0x22>
    c67a:	f44f 7280 	mov.w	r2, #256	; 0x100
    c67e:	e000      	b.n	c682 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd+0x24>
    c680:	2200      	movs	r2, #0
    c682:	431a      	orrs	r2, r3
    c684:	9b01      	ldr	r3, [sp, #4]
    c686:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c68a:	bf00      	nop
    c68c:	b002      	add	sp, #8
    c68e:	4770      	bx	lr

0000c690 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates FTM MOD, CNTIN and CV registers sync
 *                     - FALSE: The software trigger does not activate FTM MOD, CNTIN and CV registers sync
 */
static inline void Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                               boolean                       Enable)
{
    c690:	b082      	sub	sp, #8
    c692:	9001      	str	r0, [sp, #4]
    c694:	460b      	mov	r3, r1
    c696:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWWRBUF_MASK) | FTM_SYNCONF_SWWRBUF((Enable == TRUE) ? 0x01U : 0x00U);
    c69a:	9b01      	ldr	r3, [sp, #4]
    c69c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c6a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    c6a4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c6a8:	2a00      	cmp	r2, #0
    c6aa:	d002      	beq.n	c6b2 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd+0x22>
    c6ac:	f44f 7200 	mov.w	r2, #512	; 0x200
    c6b0:	e000      	b.n	c6b4 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd+0x24>
    c6b2:	2200      	movs	r2, #0
    c6b4:	431a      	orrs	r2, r3
    c6b6:	9b01      	ldr	r3, [sp, #4]
    c6b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c6bc:	bf00      	nop
    c6be:	b002      	add	sp, #8
    c6c0:	4770      	bx	lr

0000c6c2 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates OUTMASK register sync
 *                     - FALSE: The software trigger does not activate OUTMASK register sync
 */
static inline void Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    c6c2:	b082      	sub	sp, #8
    c6c4:	9001      	str	r0, [sp, #4]
    c6c6:	460b      	mov	r3, r1
    c6c8:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWOM_MASK) | FTM_SYNCONF_SWOM((Enable == TRUE) ? 0x01U : 0x00U);
    c6cc:	9b01      	ldr	r3, [sp, #4]
    c6ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c6d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    c6d6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c6da:	2a00      	cmp	r2, #0
    c6dc:	d002      	beq.n	c6e4 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd+0x22>
    c6de:	f44f 6280 	mov.w	r2, #1024	; 0x400
    c6e2:	e000      	b.n	c6e6 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd+0x24>
    c6e4:	2200      	movs	r2, #0
    c6e6:	431a      	orrs	r2, r3
    c6e8:	9b01      	ldr	r3, [sp, #4]
    c6ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c6ee:	bf00      	nop
    c6f0:	b002      	add	sp, #8
    c6f2:	4770      	bx	lr

0000c6f4 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates INVCTRL register sync
 *                     - FALSE: The software trigger does not activate INVCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    c6f4:	b082      	sub	sp, #8
    c6f6:	9001      	str	r0, [sp, #4]
    c6f8:	460b      	mov	r3, r1
    c6fa:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWINVC_MASK) | FTM_SYNCONF_SWINVC((Enable == TRUE) ? 0x01U : 0x00U);
    c6fe:	9b01      	ldr	r3, [sp, #4]
    c700:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c704:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    c708:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c70c:	2a00      	cmp	r2, #0
    c70e:	d002      	beq.n	c716 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd+0x22>
    c710:	f44f 6200 	mov.w	r2, #2048	; 0x800
    c714:	e000      	b.n	c718 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd+0x24>
    c716:	2200      	movs	r2, #0
    c718:	431a      	orrs	r2, r3
    c71a:	9b01      	ldr	r3, [sp, #4]
    c71c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c720:	bf00      	nop
    c722:	b002      	add	sp, #8
    c724:	4770      	bx	lr

0000c726 <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>:
 *                    - TRUE : The software trigger activates SWOCTRL register sync
 *                    - FALSE: The software trigger does not activate SWOCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    c726:	b082      	sub	sp, #8
    c728:	9001      	str	r0, [sp, #4]
    c72a:	460b      	mov	r3, r1
    c72c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWSOC_MASK) | FTM_SYNCONF_SWSOC((Enable == TRUE) ? 0x01U : 0x00U);
    c730:	9b01      	ldr	r3, [sp, #4]
    c732:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c736:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    c73a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c73e:	2a00      	cmp	r2, #0
    c740:	d002      	beq.n	c748 <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd+0x22>
    c742:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    c746:	e000      	b.n	c74a <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd+0x24>
    c748:	2200      	movs	r2, #0
    c74a:	431a      	orrs	r2, r3
    c74c:	9b01      	ldr	r3, [sp, #4]
    c74e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c752:	bf00      	nop
    c754:	b002      	add	sp, #8
    c756:	4770      	bx	lr

0000c758 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates FTM counter sync
 *                     - FALSE: The hardware trigger does not activate FTM counter sync
 */
static inline void Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    c758:	b082      	sub	sp, #8
    c75a:	9001      	str	r0, [sp, #4]
    c75c:	460b      	mov	r3, r1
    c75e:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWRSTCNT_MASK) | FTM_SYNCONF_HWRSTCNT((Enable == TRUE) ? 0x01U : 0x00U);
    c762:	9b01      	ldr	r3, [sp, #4]
    c764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c768:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    c76c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c770:	2a00      	cmp	r2, #0
    c772:	d002      	beq.n	c77a <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd+0x22>
    c774:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    c778:	e000      	b.n	c77c <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd+0x24>
    c77a:	2200      	movs	r2, #0
    c77c:	431a      	orrs	r2, r3
    c77e:	9b01      	ldr	r3, [sp, #4]
    c780:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c784:	bf00      	nop
    c786:	b002      	add	sp, #8
    c788:	4770      	bx	lr

0000c78a <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates  MOD, HCR, CNTIN, and CV registers sync
 *                     - FALSE: The hardware trigger does not activate MOD, HCR, CNTIN, and CV registers sync
 */
static inline void Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                               boolean                       Enable)
{
    c78a:	b082      	sub	sp, #8
    c78c:	9001      	str	r0, [sp, #4]
    c78e:	460b      	mov	r3, r1
    c790:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWWRBUF_MASK) | FTM_SYNCONF_HWWRBUF((Enable == TRUE) ? 0x01U : 0x00U);
    c794:	9b01      	ldr	r3, [sp, #4]
    c796:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c79a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    c79e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c7a2:	2a00      	cmp	r2, #0
    c7a4:	d002      	beq.n	c7ac <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd+0x22>
    c7a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    c7aa:	e000      	b.n	c7ae <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd+0x24>
    c7ac:	2200      	movs	r2, #0
    c7ae:	431a      	orrs	r2, r3
    c7b0:	9b01      	ldr	r3, [sp, #4]
    c7b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c7b6:	bf00      	nop
    c7b8:	b002      	add	sp, #8
    c7ba:	4770      	bx	lr

0000c7bc <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates OUTMASK register sync
 *                     - FALSE: The hardware trigger does not activate OUTMASK register sync
 */
static inline void Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    c7bc:	b082      	sub	sp, #8
    c7be:	9001      	str	r0, [sp, #4]
    c7c0:	460b      	mov	r3, r1
    c7c2:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWOM_MASK) | FTM_SYNCONF_HWOM((Enable == TRUE) ? 0x01U : 0x00U);
    c7c6:	9b01      	ldr	r3, [sp, #4]
    c7c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c7cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    c7d0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c7d4:	2a00      	cmp	r2, #0
    c7d6:	d002      	beq.n	c7de <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd+0x22>
    c7d8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    c7dc:	e000      	b.n	c7e0 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd+0x24>
    c7de:	2200      	movs	r2, #0
    c7e0:	431a      	orrs	r2, r3
    c7e2:	9b01      	ldr	r3, [sp, #4]
    c7e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c7e8:	bf00      	nop
    c7ea:	b002      	add	sp, #8
    c7ec:	4770      	bx	lr

0000c7ee <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates INVCTRL register sync
 *                     - FALSE: The hardware trigger does not activate INVCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    c7ee:	b082      	sub	sp, #8
    c7f0:	9001      	str	r0, [sp, #4]
    c7f2:	460b      	mov	r3, r1
    c7f4:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWINVC_MASK) | FTM_SYNCONF_HWINVC((Enable == TRUE) ? 0x01U : 0x00U);
    c7f8:	9b01      	ldr	r3, [sp, #4]
    c7fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    c7fe:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
    c802:	f89d 2003 	ldrb.w	r2, [sp, #3]
    c806:	2a00      	cmp	r2, #0
    c808:	d002      	beq.n	c810 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd+0x22>
    c80a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    c80e:	e000      	b.n	c812 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd+0x24>
    c810:	2200      	movs	r2, #0
    c812:	431a      	orrs	r2, r3
    c814:	9b01      	ldr	r3, [sp, #4]
    c816:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    c81a:	bf00      	nop
    c81c:	b002      	add	sp, #8
    c81e:	4770      	bx	lr

0000c820 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal>:
 * Implements : Ftm_Pwm_Ip_SetChnSoftwareCtrlVal_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnSoftwareCtrlVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         Channel,
                                                    boolean                       Enable)
{
    c820:	b084      	sub	sp, #16
    c822:	9001      	str	r0, [sp, #4]
    c824:	460b      	mov	r3, r1
    c826:	f88d 3003 	strb.w	r3, [sp, #3]
    c82a:	4613      	mov	r3, r2
    c82c:	f88d 3002 	strb.w	r3, [sp, #2]
    uint8 ChPol = (uint8)(((uint32)FtmBase->POL >> (uint32)Channel) & (uint32)1U);
    c830:	9b01      	ldr	r3, [sp, #4]
    c832:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    c834:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c838:	fa22 f303 	lsr.w	r3, r2, r3
    c83c:	b2db      	uxtb	r3, r3
    c83e:	f003 0301 	and.w	r3, r3, #1
    c842:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean StatusPol = (ChPol == 0x00U)? FALSE : TRUE;
    c846:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c84a:	2b00      	cmp	r3, #0
    c84c:	bf14      	ite	ne
    c84e:	2301      	movne	r3, #1
    c850:	2300      	moveq	r3, #0
    c852:	f88d 300e 	strb.w	r3, [sp, #14]
    if (Enable != StatusPol)
    c856:	f89d 2002 	ldrb.w	r2, [sp, #2]
    c85a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c85e:	429a      	cmp	r2, r3
    c860:	d00d      	beq.n	c87e <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal+0x5e>
    {
        FtmBase->SWOCTRL |= 1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT);
    c862:	9b01      	ldr	r3, [sp, #4]
    c864:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    c868:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c86c:	3308      	adds	r3, #8
    c86e:	2101      	movs	r1, #1
    c870:	fa01 f303 	lsl.w	r3, r1, r3
    c874:	431a      	orrs	r2, r3
    c876:	9b01      	ldr	r3, [sp, #4]
    c878:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }
    else
    {
        FtmBase->SWOCTRL &= ~(1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    }
}
    c87c:	e00d      	b.n	c89a <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal+0x7a>
        FtmBase->SWOCTRL &= ~(1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    c87e:	9b01      	ldr	r3, [sp, #4]
    c880:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    c884:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c888:	3308      	adds	r3, #8
    c88a:	2101      	movs	r1, #1
    c88c:	fa01 f303 	lsl.w	r3, r1, r3
    c890:	43db      	mvns	r3, r3
    c892:	401a      	ands	r2, r3
    c894:	9b01      	ldr	r3, [sp, #4]
    c896:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    c89a:	bf00      	nop
    c89c:	b004      	add	sp, #16
    c89e:	4770      	bx	lr

0000c8a0 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd>:
 * Implements : Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         Channel,
                                                    boolean                       Enable)
{
    c8a0:	b082      	sub	sp, #8
    c8a2:	9001      	str	r0, [sp, #4]
    c8a4:	460b      	mov	r3, r1
    c8a6:	f88d 3003 	strb.w	r3, [sp, #3]
    c8aa:	4613      	mov	r3, r2
    c8ac:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    c8b0:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c8b4:	2b00      	cmp	r3, #0
    c8b6:	d00c      	beq.n	c8d2 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd+0x32>
    {
        FtmBase->SWOCTRL |= 1UL << Channel;
    c8b8:	9b01      	ldr	r3, [sp, #4]
    c8ba:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    c8be:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c8c2:	2101      	movs	r1, #1
    c8c4:	fa01 f303 	lsl.w	r3, r1, r3
    c8c8:	431a      	orrs	r2, r3
    c8ca:	9b01      	ldr	r3, [sp, #4]
    c8cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }
    else
    {
        FtmBase->SWOCTRL &= ~(1UL << Channel);
    }
}
    c8d0:	e00c      	b.n	c8ec <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd+0x4c>
        FtmBase->SWOCTRL &= ~(1UL << Channel);
    c8d2:	9b01      	ldr	r3, [sp, #4]
    c8d4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    c8d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c8dc:	2101      	movs	r1, #1
    c8de:	fa01 f303 	lsl.w	r3, r1, r3
    c8e2:	43db      	mvns	r3, r3
    c8e4:	401a      	ands	r2, r3
    c8e6:	9b01      	ldr	r3, [sp, #4]
    c8e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    c8ec:	bf00      	nop
    c8ee:	b002      	add	sp, #8
    c8f0:	4770      	bx	lr

0000c8f2 <Ftm_Pwm_Ip_SoftwareOutputControl>:
 * @param[in] FtmBase  The FTM base address pointer.
 * @param[in] Value    The values which enables and force the software control of channels output
 */
static inline void Ftm_Pwm_Ip_SoftwareOutputControl(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint16                        Value)
{
    c8f2:	b082      	sub	sp, #8
    c8f4:	9001      	str	r0, [sp, #4]
    c8f6:	460b      	mov	r3, r1
    c8f8:	f8ad 3002 	strh.w	r3, [sp, #2]
   FtmBase->SWOCTRL = Value;
    c8fc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    c900:	9b01      	ldr	r3, [sp, #4]
    c902:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    c906:	bf00      	nop
    c908:	b002      	add	sp, #8
    c90a:	4770      	bx	lr

0000c90c <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd>:
 * Implements : Ftm_Pwm_Ip_SetPwmLoadChnSelCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetPwmLoadChnSelCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         Channel,
                                                  boolean                       Enable)
{
    c90c:	b082      	sub	sp, #8
    c90e:	9001      	str	r0, [sp, #4]
    c910:	460b      	mov	r3, r1
    c912:	f88d 3003 	strb.w	r3, [sp, #3]
    c916:	4613      	mov	r3, r2
    c918:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    c91c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    c920:	2b00      	cmp	r3, #0
    c922:	d00c      	beq.n	c93e <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd+0x32>
    {
        FtmBase->PWMLOAD |= 1UL << Channel;
    c924:	9b01      	ldr	r3, [sp, #4]
    c926:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    c92a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c92e:	2101      	movs	r1, #1
    c930:	fa01 f303 	lsl.w	r3, r1, r3
    c934:	431a      	orrs	r2, r3
    c936:	9b01      	ldr	r3, [sp, #4]
    c938:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
    else
    {
        FtmBase->PWMLOAD &= ~(1UL << Channel);
    }
}
    c93c:	e00c      	b.n	c958 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd+0x4c>
        FtmBase->PWMLOAD &= ~(1UL << Channel);
    c93e:	9b01      	ldr	r3, [sp, #4]
    c940:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    c944:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c948:	2101      	movs	r1, #1
    c94a:	fa01 f303 	lsl.w	r3, r1, r3
    c94e:	43db      	mvns	r3, r3
    c950:	401a      	ands	r2, r3
    c952:	9b01      	ldr	r3, [sp, #4]
    c954:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
    c958:	bf00      	nop
    c95a:	b002      	add	sp, #8
    c95c:	4770      	bx	lr

0000c95e <Ftm_Pwm_Ip_SetHalfCycleCmd>:
 *
 * Implements : Ftm_Pwm_Ip_SetHalfCycleCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetHalfCycleCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              boolean                       Enable)
{
    c95e:	b082      	sub	sp, #8
    c960:	9001      	str	r0, [sp, #4]
    c962:	460b      	mov	r3, r1
    c964:	f88d 3003 	strb.w	r3, [sp, #3]
    if (Enable)
    c968:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c96c:	2b00      	cmp	r3, #0
    c96e:	d008      	beq.n	c982 <Ftm_Pwm_Ip_SetHalfCycleCmd+0x24>
    {
        FtmBase->PWMLOAD |= 1UL << FTM_PWMLOAD_HCSEL_SHIFT;
    c970:	9b01      	ldr	r3, [sp, #4]
    c972:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    c976:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    c97a:	9b01      	ldr	r3, [sp, #4]
    c97c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
    else
    {
        FtmBase->PWMLOAD &= ~(1UL << FTM_PWMLOAD_HCSEL_SHIFT);
    }
}
    c980:	e007      	b.n	c992 <Ftm_Pwm_Ip_SetHalfCycleCmd+0x34>
        FtmBase->PWMLOAD &= ~(1UL << FTM_PWMLOAD_HCSEL_SHIFT);
    c982:	9b01      	ldr	r3, [sp, #4]
    c984:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    c988:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    c98c:	9b01      	ldr	r3, [sp, #4]
    c98e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
    c992:	bf00      	nop
    c994:	b002      	add	sp, #8
    c996:	4770      	bx	lr

0000c998 <Ftm_Pwm_Ip_SetHalfCycleValue>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The 16 bit counter value
 */
static inline void Ftm_Pwm_Ip_SetHalfCycleValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint16                        Value)
{
    c998:	b082      	sub	sp, #8
    c99a:	9001      	str	r0, [sp, #4]
    c99c:	460b      	mov	r3, r1
    c99e:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->HCR = Value;
    c9a2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    c9a6:	9b01      	ldr	r3, [sp, #4]
    c9a8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
    c9ac:	bf00      	nop
    c9ae:	b002      	add	sp, #8
    c9b0:	4770      	bx	lr

0000c9b2 <Ftm_Pwm_Ip_GetSoftwareOutputControl>:
 * @return the FTM software Output Control.
 *
 * Implements : Ftm_Pwm_Ip_GetSoftwareOutputControl
 */
static inline uint16 Ftm_Pwm_Ip_GetSoftwareOutputControl(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    c9b2:	b082      	sub	sp, #8
    c9b4:	9001      	str	r0, [sp, #4]
    return (uint16)(FtmBase->SWOCTRL);
    c9b6:	9b01      	ldr	r3, [sp, #4]
    c9b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    c9bc:	b29b      	uxth	r3, r3
}
    c9be:	4618      	mov	r0, r3
    c9c0:	b002      	add	sp, #8
    c9c2:	4770      	bx	lr

0000c9c4 <Ftm_Pwm_Ip_GetPolInstance>:
 * @return the polarity value of all channel
 *
 * Implements : Ftm_Pwm_Ip_GetPolInstance
 */
static inline uint16 Ftm_Pwm_Ip_GetPolInstance(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    c9c4:	b082      	sub	sp, #8
    c9c6:	9001      	str	r0, [sp, #4]
    return (uint16)(FtmBase->POL);
    c9c8:	9b01      	ldr	r3, [sp, #4]
    c9ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    c9cc:	b29b      	uxth	r3, r3
}
    c9ce:	4618      	mov	r0, r3
    c9d0:	b002      	add	sp, #8
    c9d2:	4770      	bx	lr

0000c9d4 <Ftm_Pwm_Ip_GetChannelMode>:
/*!
 * @brief Get the channel Mode
 */
static inline Ftm_Pwm_Ip_ChannelModeType Ftm_Pwm_Ip_GetChannelMode(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                                   uint8                               Channel)
{
    c9d4:	b500      	push	{lr}
    c9d6:	b085      	sub	sp, #20
    c9d8:	9001      	str	r0, [sp, #4]
    c9da:	460b      	mov	r3, r1
    c9dc:	f88d 3003 	strb.w	r3, [sp, #3]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 RetValue;
    uint8 Combine;
    uint8 Mcombine;
    uint8 ChPairId = Channel >> 1U;
    c9e0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c9e4:	085b      	lsrs	r3, r3, #1
    c9e6:	f88d 300b 	strb.w	r3, [sp, #11]

    Combine = (uint8)((FtmBase->COMBINE & ((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) >>  ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    c9ea:	9b01      	ldr	r3, [sp, #4]
    c9ec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    c9ee:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c9f2:	00db      	lsls	r3, r3, #3
    c9f4:	2101      	movs	r1, #1
    c9f6:	fa01 f303 	lsl.w	r3, r1, r3
    c9fa:	401a      	ands	r2, r3
    c9fc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ca00:	00db      	lsls	r3, r3, #3
    ca02:	fa22 f303 	lsr.w	r3, r2, r3
    ca06:	f88d 300a 	strb.w	r3, [sp, #10]
    Mcombine = (uint8)((FtmBase->COMBINE & ((uint32)FTM_COMBINE_MCOMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) >> ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    ca0a:	9b01      	ldr	r3, [sp, #4]
    ca0c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    ca0e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ca12:	00db      	lsls	r3, r3, #3
    ca14:	2180      	movs	r1, #128	; 0x80
    ca16:	fa01 f303 	lsl.w	r3, r1, r3
    ca1a:	401a      	ands	r2, r3
    ca1c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ca20:	00db      	lsls	r3, r3, #3
    ca22:	fa22 f303 	lsr.w	r3, r2, r3
    ca26:	f88d 3009 	strb.w	r3, [sp, #9]
    Mcombine = (Mcombine == (uint8)FTM_COMBINE_MCOMBINE0_MASK)? 0x01U : 0x00U;
    ca2a:	f89d 3009 	ldrb.w	r3, [sp, #9]
    ca2e:	2b80      	cmp	r3, #128	; 0x80
    ca30:	d101      	bne.n	ca36 <Ftm_Pwm_Ip_GetChannelMode+0x62>
    ca32:	2301      	movs	r3, #1
    ca34:	e000      	b.n	ca38 <Ftm_Pwm_Ip_GetChannelMode+0x64>
    ca36:	2300      	movs	r3, #0
    ca38:	f88d 3009 	strb.w	r3, [sp, #9]
    RetValue = (uint8)Ftm_Pwm_Ip_GetChnEdgeLevel(FtmBase, Channel);
    ca3c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ca40:	4619      	mov	r1, r3
    ca42:	9801      	ldr	r0, [sp, #4]
    ca44:	f7ff f99b 	bl	bd7e <Ftm_Pwm_Ip_GetChnEdgeLevel>
    ca48:	4603      	mov	r3, r0
    ca4a:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Ftm_Pwm_Ip_GetChnMode(FtmBase, Channel) << 2U);
    ca4e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ca52:	4619      	mov	r1, r3
    ca54:	9801      	ldr	r0, [sp, #4]
    ca56:	f7ff fa2a 	bl	beae <Ftm_Pwm_Ip_GetChnMode>
    ca5a:	4603      	mov	r3, r0
    ca5c:	009b      	lsls	r3, r3, #2
    ca5e:	b2da      	uxtb	r2, r3
    ca60:	f89d 3008 	ldrb.w	r3, [sp, #8]
    ca64:	4313      	orrs	r3, r2
    ca66:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)((uint8)Ftm_Pwm_Ip_GetCpwms(FtmBase) << 4U);
    ca6a:	9801      	ldr	r0, [sp, #4]
    ca6c:	f7ff f923 	bl	bcb6 <Ftm_Pwm_Ip_GetCpwms>
    ca70:	4603      	mov	r3, r0
    ca72:	b2db      	uxtb	r3, r3
    ca74:	011b      	lsls	r3, r3, #4
    ca76:	b2da      	uxtb	r2, r3
    ca78:	f89d 3008 	ldrb.w	r3, [sp, #8]
    ca7c:	4313      	orrs	r3, r2
    ca7e:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Combine << 5U);
    ca82:	f89d 300a 	ldrb.w	r3, [sp, #10]
    ca86:	015b      	lsls	r3, r3, #5
    ca88:	b2da      	uxtb	r2, r3
    ca8a:	f89d 3008 	ldrb.w	r3, [sp, #8]
    ca8e:	4313      	orrs	r3, r2
    ca90:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Mcombine << 6U);
    ca94:	f89d 3009 	ldrb.w	r3, [sp, #9]
    ca98:	019b      	lsls	r3, r3, #6
    ca9a:	b2da      	uxtb	r2, r3
    ca9c:	f89d 3008 	ldrb.w	r3, [sp, #8]
    caa0:	4313      	orrs	r3, r2
    caa2:	f88d 3008 	strb.w	r3, [sp, #8]

    switch (RetValue)
    caa6:	f89d 3008 	ldrb.w	r3, [sp, #8]
    caaa:	2b62      	cmp	r3, #98	; 0x62
    caac:	d055      	beq.n	cb5a <Ftm_Pwm_Ip_GetChannelMode+0x186>
    caae:	2b62      	cmp	r3, #98	; 0x62
    cab0:	dc59      	bgt.n	cb66 <Ftm_Pwm_Ip_GetChannelMode+0x192>
    cab2:	2b22      	cmp	r3, #34	; 0x22
    cab4:	dc3c      	bgt.n	cb30 <Ftm_Pwm_Ip_GetChannelMode+0x15c>
    cab6:	2b09      	cmp	r3, #9
    cab8:	db55      	blt.n	cb66 <Ftm_Pwm_Ip_GetChannelMode+0x192>
    caba:	3b09      	subs	r3, #9
    cabc:	2b19      	cmp	r3, #25
    cabe:	d852      	bhi.n	cb66 <Ftm_Pwm_Ip_GetChannelMode+0x192>
    cac0:	a201      	add	r2, pc, #4	; (adr r2, cac8 <Ftm_Pwm_Ip_GetChannelMode+0xf4>)
    cac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cac6:	bf00      	nop
    cac8:	0000cb3d 	.word	0x0000cb3d
    cacc:	0000cb37 	.word	0x0000cb37
    cad0:	0000cb67 	.word	0x0000cb67
    cad4:	0000cb67 	.word	0x0000cb67
    cad8:	0000cb67 	.word	0x0000cb67
    cadc:	0000cb67 	.word	0x0000cb67
    cae0:	0000cb67 	.word	0x0000cb67
    cae4:	0000cb67 	.word	0x0000cb67
    cae8:	0000cb49 	.word	0x0000cb49
    caec:	0000cb43 	.word	0x0000cb43
    caf0:	0000cb67 	.word	0x0000cb67
    caf4:	0000cb67 	.word	0x0000cb67
    caf8:	0000cb67 	.word	0x0000cb67
    cafc:	0000cb67 	.word	0x0000cb67
    cb00:	0000cb67 	.word	0x0000cb67
    cb04:	0000cb67 	.word	0x0000cb67
    cb08:	0000cb67 	.word	0x0000cb67
    cb0c:	0000cb67 	.word	0x0000cb67
    cb10:	0000cb67 	.word	0x0000cb67
    cb14:	0000cb67 	.word	0x0000cb67
    cb18:	0000cb67 	.word	0x0000cb67
    cb1c:	0000cb67 	.word	0x0000cb67
    cb20:	0000cb67 	.word	0x0000cb67
    cb24:	0000cb67 	.word	0x0000cb67
    cb28:	0000cb55 	.word	0x0000cb55
    cb2c:	0000cb4f 	.word	0x0000cb4f
    cb30:	2b61      	cmp	r3, #97	; 0x61
    cb32:	d015      	beq.n	cb60 <Ftm_Pwm_Ip_GetChannelMode+0x18c>
    cb34:	e017      	b.n	cb66 <Ftm_Pwm_Ip_GetChannelMode+0x192>
    {
        case 0x0AU:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_EDGE_ALIGNED_HIGH;
    cb36:	230a      	movs	r3, #10
    cb38:	9303      	str	r3, [sp, #12]
            break;
    cb3a:	e017      	b.n	cb6c <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x09U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_EDGE_ALIGNED_LOW;
    cb3c:	2309      	movs	r3, #9
    cb3e:	9303      	str	r3, [sp, #12]
            break;
    cb40:	e014      	b.n	cb6c <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x12U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_CENTER_ALIGNED_HIGH;
    cb42:	2312      	movs	r3, #18
    cb44:	9303      	str	r3, [sp, #12]
            break;
    cb46:	e011      	b.n	cb6c <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x11U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_CENTER_ALIGNED_LOW;
    cb48:	2311      	movs	r3, #17
    cb4a:	9303      	str	r3, [sp, #12]
            break;
    cb4c:	e00e      	b.n	cb6c <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x22U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_COMBINE_HIGH;
    cb4e:	2322      	movs	r3, #34	; 0x22
    cb50:	9303      	str	r3, [sp, #12]
            break;
    cb52:	e00b      	b.n	cb6c <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x21U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_COMBINE_LOW;
    cb54:	2321      	movs	r3, #33	; 0x21
    cb56:	9303      	str	r3, [sp, #12]
            break;
    cb58:	e008      	b.n	cb6c <Ftm_Pwm_Ip_GetChannelMode+0x198>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        case 0x62U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH;
    cb5a:	2362      	movs	r3, #98	; 0x62
    cb5c:	9303      	str	r3, [sp, #12]
            break;
    cb5e:	e005      	b.n	cb6c <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x61U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW;
    cb60:	2361      	movs	r3, #97	; 0x61
    cb62:	9303      	str	r3, [sp, #12]
            break;
    cb64:	e002      	b.n	cb6c <Ftm_Pwm_Ip_GetChannelMode+0x198>
#endif
        default:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_NODEFINED;
    cb66:	23ff      	movs	r3, #255	; 0xff
    cb68:	9303      	str	r3, [sp, #12]
            break;
    cb6a:	bf00      	nop
    }

    return ChMode; 
    cb6c:	9b03      	ldr	r3, [sp, #12]
}
    cb6e:	4618      	mov	r0, r3
    cb70:	b005      	add	sp, #20
    cb72:	f85d fb04 	ldr.w	pc, [sp], #4

0000cb76 <Ftm_Pwm_Ip_UpdateWriteProtection>:
 * Function Name : Ftm_Pwm_Ip_UpdateWriteProtection
 * Description   : Enables or disables the FTM write protection.
 */
static inline void Ftm_Pwm_Ip_UpdateWriteProtection(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    boolean                       Enable)
{
    cb76:	b082      	sub	sp, #8
    cb78:	9001      	str	r0, [sp, #4]
    cb7a:	460b      	mov	r3, r1
    cb7c:	f88d 3003 	strb.w	r3, [sp, #3]
    if (Enable == TRUE)
    cb80:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cb84:	2b00      	cmp	r3, #0
    cb86:	d006      	beq.n	cb96 <Ftm_Pwm_Ip_UpdateWriteProtection+0x20>
    {/* Enable write protection */
        /* WPEN is set when 1 is written to it. */
        FtmBase->FMS = (FtmBase->FMS & ~FTM_FMS_WPEN_MASK) | FTM_FMS_WPEN(1U);
    cb88:	9b01      	ldr	r3, [sp, #4]
    cb8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    cb8c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    cb90:	9b01      	ldr	r3, [sp, #4]
    cb92:	675a      	str	r2, [r3, #116]	; 0x74
    }
    else
    {
        /* MISRA Rule 15.7 All if...else if constructs shall be terminated with an else statement */
    }
}
    cb94:	e00b      	b.n	cbae <Ftm_Pwm_Ip_UpdateWriteProtection+0x38>
    else if ((FtmBase->FMS & FTM_FMS_WPEN_MASK) != 0U)
    cb96:	9b01      	ldr	r3, [sp, #4]
    cb98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    cb9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    cb9e:	2b00      	cmp	r3, #0
    cba0:	d005      	beq.n	cbae <Ftm_Pwm_Ip_UpdateWriteProtection+0x38>
        FtmBase->MODE |= FTM_MODE_WPDIS(TRUE);
    cba2:	9b01      	ldr	r3, [sp, #4]
    cba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    cba6:	f043 0204 	orr.w	r2, r3, #4
    cbaa:	9b01      	ldr	r3, [sp, #4]
    cbac:	655a      	str	r2, [r3, #84]	; 0x54
}
    cbae:	bf00      	nop
    cbb0:	b002      	add	sp, #8
    cbb2:	4770      	bx	lr

0000cbb4 <Ftm_Pwm_Ip_Reset>:
 * Function Name : Ftm_Pwm_Ip_Reset
 * Description   : Resets the FTM registers. All the register use in the driver should be
 * reset to default value of each register.
 */
static inline void Ftm_Pwm_Ip_Reset(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    cbb4:	b500      	push	{lr}
    cbb6:	b085      	sub	sp, #20
    cbb8:	9001      	str	r0, [sp, #4]
    uint8 ChnIndex;

    /* Disable the write protection mechanism */
    Ftm_Pwm_Ip_UpdateWriteProtection(FtmBase, FALSE);
    cbba:	2100      	movs	r1, #0
    cbbc:	9801      	ldr	r0, [sp, #4]
    cbbe:	f7ff ffda 	bl	cb76 <Ftm_Pwm_Ip_UpdateWriteProtection>

    /* Reset all registers to the default value */
    REG_RMW32(&(FtmBase->SC), 0U, 0U);
    cbc2:	9b01      	ldr	r3, [sp, #4]
    cbc4:	681a      	ldr	r2, [r3, #0]
    cbc6:	9b01      	ldr	r3, [sp, #4]
    cbc8:	601a      	str	r2, [r3, #0]
    FtmBase->CNT        = 0U;
    cbca:	9b01      	ldr	r3, [sp, #4]
    cbcc:	2200      	movs	r2, #0
    cbce:	605a      	str	r2, [r3, #4]
    FtmBase->MOD        = 0U;
    cbd0:	9b01      	ldr	r3, [sp, #4]
    cbd2:	2200      	movs	r2, #0
    cbd4:	609a      	str	r2, [r3, #8]
    FtmBase->CNTIN      = 0U;
    cbd6:	9b01      	ldr	r3, [sp, #4]
    cbd8:	2200      	movs	r2, #0
    cbda:	64da      	str	r2, [r3, #76]	; 0x4c
    REG_RMW32(&(FtmBase->STATUS), 0U, 0U);
    cbdc:	9b01      	ldr	r3, [sp, #4]
    cbde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    cbe0:	9b01      	ldr	r3, [sp, #4]
    cbe2:	651a      	str	r2, [r3, #80]	; 0x50
    FtmBase->MODE       = 4U;
    cbe4:	9b01      	ldr	r3, [sp, #4]
    cbe6:	2204      	movs	r2, #4
    cbe8:	655a      	str	r2, [r3, #84]	; 0x54
    FtmBase->SYNC       = 0U;
    cbea:	9b01      	ldr	r3, [sp, #4]
    cbec:	2200      	movs	r2, #0
    cbee:	659a      	str	r2, [r3, #88]	; 0x58
    FtmBase->OUTINIT    = 0U;
    cbf0:	9b01      	ldr	r3, [sp, #4]
    cbf2:	2200      	movs	r2, #0
    cbf4:	65da      	str	r2, [r3, #92]	; 0x5c
    FtmBase->OUTMASK    = 0U;
    cbf6:	9b01      	ldr	r3, [sp, #4]
    cbf8:	2200      	movs	r2, #0
    cbfa:	661a      	str	r2, [r3, #96]	; 0x60
    FtmBase->COMBINE    = 0U;
    cbfc:	9b01      	ldr	r3, [sp, #4]
    cbfe:	2200      	movs	r2, #0
    cc00:	665a      	str	r2, [r3, #100]	; 0x64
    FtmBase->DEADTIME   = 0U;
    cc02:	9b01      	ldr	r3, [sp, #4]
    cc04:	2200      	movs	r2, #0
    cc06:	669a      	str	r2, [r3, #104]	; 0x68
    REG_RMW32(&(FtmBase->EXTTRIG), 0U, 0U);
    cc08:	9b01      	ldr	r3, [sp, #4]
    cc0a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    cc0c:	9b01      	ldr	r3, [sp, #4]
    cc0e:	66da      	str	r2, [r3, #108]	; 0x6c
    FtmBase->POL        = 0U;
    cc10:	9b01      	ldr	r3, [sp, #4]
    cc12:	2200      	movs	r2, #0
    cc14:	671a      	str	r2, [r3, #112]	; 0x70
    FtmBase->FMS        = 0U;
    cc16:	9b01      	ldr	r3, [sp, #4]
    cc18:	2200      	movs	r2, #0
    cc1a:	675a      	str	r2, [r3, #116]	; 0x74
    FtmBase->FILTER     = 0U;
    cc1c:	9b01      	ldr	r3, [sp, #4]
    cc1e:	2200      	movs	r2, #0
    cc20:	679a      	str	r2, [r3, #120]	; 0x78
    FtmBase->QDCTRL     = 0U;
    cc22:	9b01      	ldr	r3, [sp, #4]
    cc24:	2200      	movs	r2, #0
    cc26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    FtmBase->CONF       = 0U;
    cc2a:	9b01      	ldr	r3, [sp, #4]
    cc2c:	2200      	movs	r2, #0
    cc2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    FtmBase->SYNCONF    = 0U;
    cc32:	9b01      	ldr	r3, [sp, #4]
    cc34:	2200      	movs	r2, #0
    cc36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    FtmBase->INVCTRL    = 0U;
    cc3a:	9b01      	ldr	r3, [sp, #4]
    cc3c:	2200      	movs	r2, #0
    cc3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    FtmBase->SWOCTRL    = 0U;
    cc42:	9b01      	ldr	r3, [sp, #4]
    cc44:	2200      	movs	r2, #0
    cc46:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    FtmBase->PWMLOAD    = 0U;
    cc4a:	9b01      	ldr	r3, [sp, #4]
    cc4c:	2200      	movs	r2, #0
    cc4e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (defined(FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD) && (FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD == STD_ON))
    FtmBase->HCR        = 0U;
    cc52:	9b01      	ldr	r3, [sp, #4]
    cc54:	2200      	movs	r2, #0
    cc56:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        FtmBase->MOD_MIRROR = 0U;
    }
#endif

    /* Reset values of all CV and CSC registers */
    for (ChnIndex = 0; ChnIndex < FTM_PWM_IP_CHANNEL_COUNT; ChnIndex++)
    cc5a:	2300      	movs	r3, #0
    cc5c:	f88d 300f 	strb.w	r3, [sp, #15]
    cc60:	e014      	b.n	cc8c <Ftm_Pwm_Ip_Reset+0xd8>
    {
        FtmBase->CONTROLS[ChnIndex].CSC = 0U;
    cc62:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cc66:	9a01      	ldr	r2, [sp, #4]
    cc68:	3301      	adds	r3, #1
    cc6a:	00db      	lsls	r3, r3, #3
    cc6c:	4413      	add	r3, r2
    cc6e:	2200      	movs	r2, #0
    cc70:	605a      	str	r2, [r3, #4]
        FtmBase->CONTROLS[ChnIndex].CV = 0U;
    cc72:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cc76:	9a01      	ldr	r2, [sp, #4]
    cc78:	3301      	adds	r3, #1
    cc7a:	00db      	lsls	r3, r3, #3
    cc7c:	4413      	add	r3, r2
    cc7e:	2200      	movs	r2, #0
    cc80:	609a      	str	r2, [r3, #8]
    for (ChnIndex = 0; ChnIndex < FTM_PWM_IP_CHANNEL_COUNT; ChnIndex++)
    cc82:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cc86:	3301      	adds	r3, #1
    cc88:	f88d 300f 	strb.w	r3, [sp, #15]
    cc8c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cc90:	2b07      	cmp	r3, #7
    cc92:	d9e6      	bls.n	cc62 <Ftm_Pwm_Ip_Reset+0xae>
            {
                FtmBase->CV_MIRROR[ChnIndex] = 0U;
            }
        #endif
    }
}
    cc94:	bf00      	nop
    cc96:	bf00      	nop
    cc98:	b005      	add	sp, #20
    cc9a:	f85d fb04 	ldr.w	pc, [sp], #4

0000cc9e <Ftm_Pwm_Ip_SetChnTriggerCmd>:
 * FTM counter is equal to its initial value.
 */
static inline void Ftm_Pwm_Ip_SetChnTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Channel,
                                               boolean                       Enable)
{
    cc9e:	b084      	sub	sp, #16
    cca0:	9001      	str	r0, [sp, #4]
    cca2:	460b      	mov	r3, r1
    cca4:	f88d 3003 	strb.w	r3, [sp, #3]
    cca8:	4613      	mov	r3, r2
    ccaa:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 Value = 0U;
    ccae:	2300      	movs	r3, #0
    ccb0:	9303      	str	r3, [sp, #12]

    if (Channel < 2U)
    ccb2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ccb6:	2b01      	cmp	r3, #1
    ccb8:	d806      	bhi.n	ccc8 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x2a>
    {
        Value = (uint32)FTM_EXTTRIG_CH0TRIG_MASK << (uint32)Channel;
    ccba:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ccbe:	2210      	movs	r2, #16
    ccc0:	fa02 f303 	lsl.w	r3, r2, r3
    ccc4:	9303      	str	r3, [sp, #12]
    ccc6:	e013      	b.n	ccf0 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x52>
    }
    else if (Channel < 6U)
    ccc8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cccc:	2b05      	cmp	r3, #5
    ccce:	d807      	bhi.n	cce0 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x42>
    {
        Value = (uint32)FTM_EXTTRIG_CH2TRIG_MASK << ((uint32)(Channel) - 2U);
    ccd0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ccd4:	3b02      	subs	r3, #2
    ccd6:	2201      	movs	r2, #1
    ccd8:	fa02 f303 	lsl.w	r3, r2, r3
    ccdc:	9303      	str	r3, [sp, #12]
    ccde:	e007      	b.n	ccf0 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x52>
    }
    else
    {
        /* Set trigger to other channels which are not aligned */
        #if (FTM_PWM_IP_CHANNEL_COUNT > 6U)
        Value = (uint32)FTM_EXTTRIG_CH6TRIG_MASK << ((uint32)(Channel) - 6U);
    cce0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cce4:	3b06      	subs	r3, #6
    cce6:	f44f 7280 	mov.w	r2, #256	; 0x100
    ccea:	fa02 f303 	lsl.w	r3, r2, r3
    ccee:	9303      	str	r3, [sp, #12]
        #endif
    }

    if (TRUE == Enable)
    ccf0:	f89d 3002 	ldrb.w	r3, [sp, #2]
    ccf4:	2b00      	cmp	r3, #0
    ccf6:	d006      	beq.n	cd06 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x68>
    {
        FtmBase->EXTTRIG |= Value;
    ccf8:	9b01      	ldr	r3, [sp, #4]
    ccfa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    ccfc:	9b03      	ldr	r3, [sp, #12]
    ccfe:	431a      	orrs	r2, r3
    cd00:	9b01      	ldr	r3, [sp, #4]
    cd02:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    else
    {
        FtmBase->EXTTRIG &= ~Value;
    }
}
    cd04:	e006      	b.n	cd14 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x76>
        FtmBase->EXTTRIG &= ~Value;
    cd06:	9b01      	ldr	r3, [sp, #4]
    cd08:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    cd0a:	9b03      	ldr	r3, [sp, #12]
    cd0c:	43db      	mvns	r3, r3
    cd0e:	401a      	ands	r2, r3
    cd10:	9b01      	ldr	r3, [sp, #4]
    cd12:	66da      	str	r2, [r3, #108]	; 0x6c
}
    cd14:	bf00      	nop
    cd16:	b004      	add	sp, #16
    cd18:	4770      	bx	lr

0000cd1a <Ftm_Pwm_Ip_SetFaultControlMode>:
 * Function Name : Ftm_Pwm_Ip_SetFaultControlMode
 * Description   : Set the FTM fault control mode.
 */
static inline void Ftm_Pwm_Ip_SetFaultControlMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  Ftm_Pwm_Ip_FaultControlModeType FaultMode)
{
    cd1a:	b082      	sub	sp, #8
    cd1c:	9001      	str	r0, [sp, #4]
    cd1e:	9100      	str	r1, [sp, #0]
    cd20:	9b00      	ldr	r3, [sp, #0]
    cd22:	2b03      	cmp	r3, #3
    cd24:	d82a      	bhi.n	cd7c <Ftm_Pwm_Ip_SetFaultControlMode+0x62>
    cd26:	a201      	add	r2, pc, #4	; (adr r2, cd2c <Ftm_Pwm_Ip_SetFaultControlMode+0x12>)
    cd28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cd2c:	0000cd3d 	.word	0x0000cd3d
    cd30:	0000cd4b 	.word	0x0000cd4b
    cd34:	0000cd5d 	.word	0x0000cd5d
    cd38:	0000cd6f 	.word	0x0000cd6f
    switch(FaultMode)
    {
        case FTM_PWM_IP_FAULT_DISABLED:
            /*  Fault control is disabled for all channels. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x00U);
    cd3c:	9b01      	ldr	r3, [sp, #4]
    cd3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    cd40:	f023 0260 	bic.w	r2, r3, #96	; 0x60
    cd44:	9b01      	ldr	r3, [sp, #4]
    cd46:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    cd48:	e019      	b.n	cd7e <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_EVEN_CHANNELS_MANUAL_CLEAR:
            /* Fault control is enabled for even channels only (channels 0, 2, 4, and 6), and the selected
               mode is the manual fault clearing. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x01U);
    cd4a:	9b01      	ldr	r3, [sp, #4]
    cd4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    cd4e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    cd52:	f043 0220 	orr.w	r2, r3, #32
    cd56:	9b01      	ldr	r3, [sp, #4]
    cd58:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    cd5a:	e010      	b.n	cd7e <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_ALL_CHANNELS_MANUAL_CLEAR:
            /* Fault control is enabled for all channels, and the selected mode is the manual fault clearing. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x02U);
    cd5c:	9b01      	ldr	r3, [sp, #4]
    cd5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    cd60:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    cd64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    cd68:	9b01      	ldr	r3, [sp, #4]
    cd6a:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    cd6c:	e007      	b.n	cd7e <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_ALL_CHANNELS_AUTO_CLEAR:
            /*  Fault control is enabled for all channels, and the selected mode is the automatic fault clearing.*/
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x03U);
    cd6e:	9b01      	ldr	r3, [sp, #4]
    cd70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    cd72:	f043 0260 	orr.w	r2, r3, #96	; 0x60
    cd76:	9b01      	ldr	r3, [sp, #4]
    cd78:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    cd7a:	e000      	b.n	cd7e <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        default:
            /* Nothing to do. This switch branch is empty because it shall not be executed for normal behaviour */
            break;
    cd7c:	bf00      	nop
    }
}
    cd7e:	bf00      	nop
    cd80:	b002      	add	sp, #8
    cd82:	4770      	bx	lr

0000cd84 <Ftm_Pwm_Ip_SetDualChFaultCtr>:
 * Description   : Enables/Disables the fault control in channels (n) and (n+1)
 */
static inline void Ftm_Pwm_Ip_SetDualChFaultCtr(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         ChPairId,
                                                boolean                       Enable)
{
    cd84:	b082      	sub	sp, #8
    cd86:	9001      	str	r0, [sp, #4]
    cd88:	460b      	mov	r3, r1
    cd8a:	f88d 3003 	strb.w	r3, [sp, #3]
    cd8e:	4613      	mov	r3, r2
    cd90:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    cd94:	f89d 3002 	ldrb.w	r3, [sp, #2]
    cd98:	2b00      	cmp	r3, #0
    cd9a:	d00b      	beq.n	cdb4 <Ftm_Pwm_Ip_SetDualChFaultCtr+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    cd9c:	9b01      	ldr	r3, [sp, #4]
    cd9e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    cda0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cda4:	00db      	lsls	r3, r3, #3
    cda6:	2140      	movs	r1, #64	; 0x40
    cda8:	fa01 f303 	lsl.w	r3, r1, r3
    cdac:	431a      	orrs	r2, r3
    cdae:	9b01      	ldr	r3, [sp, #4]
    cdb0:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    cdb2:	e00b      	b.n	cdcc <Ftm_Pwm_Ip_SetDualChFaultCtr+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    cdb4:	9b01      	ldr	r3, [sp, #4]
    cdb6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    cdb8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cdbc:	00db      	lsls	r3, r3, #3
    cdbe:	2140      	movs	r1, #64	; 0x40
    cdc0:	fa01 f303 	lsl.w	r3, r1, r3
    cdc4:	43db      	mvns	r3, r3
    cdc6:	401a      	ands	r2, r3
    cdc8:	9b01      	ldr	r3, [sp, #4]
    cdca:	665a      	str	r2, [r3, #100]	; 0x64
}
    cdcc:	bf00      	nop
    cdce:	b002      	add	sp, #8
    cdd0:	4770      	bx	lr

0000cdd2 <Ftm_Pwm_Ip_SetFaultInterruptEnable>:
 * Function Name : Ftm_Pwm_Ip_SetFaultInterruptEnable
 * Description   : Enables/Disables the FTM fault interrupt.
 */
static inline void Ftm_Pwm_Ip_SetFaultInterruptEnable(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      boolean                       Enable)
{
    cdd2:	b082      	sub	sp, #8
    cdd4:	9001      	str	r0, [sp, #4]
    cdd6:	460b      	mov	r3, r1
    cdd8:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTIE_MASK) | FTM_MODE_FAULTIE((Enable == TRUE) ? 0x01U : 0x00U);
    cddc:	9b01      	ldr	r3, [sp, #4]
    cdde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    cde0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    cde4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    cde8:	2a00      	cmp	r2, #0
    cdea:	d001      	beq.n	cdf0 <Ftm_Pwm_Ip_SetFaultInterruptEnable+0x1e>
    cdec:	2280      	movs	r2, #128	; 0x80
    cdee:	e000      	b.n	cdf2 <Ftm_Pwm_Ip_SetFaultInterruptEnable+0x20>
    cdf0:	2200      	movs	r2, #0
    cdf2:	431a      	orrs	r2, r3
    cdf4:	9b01      	ldr	r3, [sp, #4]
    cdf6:	655a      	str	r2, [r3, #84]	; 0x54
}
    cdf8:	bf00      	nop
    cdfa:	b002      	add	sp, #8
    cdfc:	4770      	bx	lr

0000cdfe <Ftm_Pwm_Ip_ClearFaultFlag>:
/*!
 * Function Name : Ftm_Pwm_Ip_ClearFaultFlag
 * Description   : Clears the fault interrupt flag.
 */
static inline void Ftm_Pwm_Ip_ClearFaultFlag(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    cdfe:	b082      	sub	sp, #8
    ce00:	9001      	str	r0, [sp, #4]
    FtmBase->FMS = (FtmBase->FMS & ~FTM_FMS_FAULTF_MASK) | FTM_FMS_FAULTF(0U);
    ce02:	9b01      	ldr	r3, [sp, #4]
    ce04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    ce06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    ce0a:	9b01      	ldr	r3, [sp, #4]
    ce0c:	675a      	str	r2, [r3, #116]	; 0x74
}
    ce0e:	bf00      	nop
    ce10:	b002      	add	sp, #8
    ce12:	4770      	bx	lr

0000ce14 <Ftm_Pwm_Ip_SetFaultFilterValue>:
 * Function Name : Ftm_Pwm_Ip_SetFaultFilterValue
 * Description   : Selects the filter value for the fault inputs.
 */
static inline void Ftm_Pwm_Ip_SetFaultFilterValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         FaultFilterValue)
{
    ce14:	b082      	sub	sp, #8
    ce16:	9001      	str	r0, [sp, #4]
    ce18:	460b      	mov	r3, r1
    ce1a:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~FTM_FLTCTRL_FFVAL_MASK) | FTM_FLTCTRL_FFVAL((uint32)FaultFilterValue);
    ce1e:	9b01      	ldr	r3, [sp, #4]
    ce20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    ce22:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
    ce26:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ce2a:	021b      	lsls	r3, r3, #8
    ce2c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    ce30:	431a      	orrs	r2, r3
    ce32:	9b01      	ldr	r3, [sp, #4]
    ce34:	67da      	str	r2, [r3, #124]	; 0x7c
}
    ce36:	bf00      	nop
    ce38:	b002      	add	sp, #8
    ce3a:	4770      	bx	lr

0000ce3c <Ftm_Pwm_Ip_SetFaultOutputState>:
 * Function Name : Ftm_Pwm_Ip_SetFaultOutputState
 * Description   : Selects the fault output state when a fault event is ongoing.
 */
static inline void Ftm_Pwm_Ip_SetFaultOutputState(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  Ftm_Pwm_Ip_FaultOutputStateType FaultState)
{
    ce3c:	b082      	sub	sp, #8
    ce3e:	9001      	str	r0, [sp, #4]
    ce40:	9100      	str	r1, [sp, #0]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~FTM_FLTCTRL_FSTATE_MASK) | FTM_FLTCTRL_FSTATE((FaultState == FTM_PWM_IP_OUT_SAFE_VALUE)? 0x00U : 0x01U);
    ce42:	9b01      	ldr	r3, [sp, #4]
    ce44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    ce46:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    ce4a:	9a00      	ldr	r2, [sp, #0]
    ce4c:	2a00      	cmp	r2, #0
    ce4e:	d002      	beq.n	ce56 <Ftm_Pwm_Ip_SetFaultOutputState+0x1a>
    ce50:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    ce54:	e000      	b.n	ce58 <Ftm_Pwm_Ip_SetFaultOutputState+0x1c>
    ce56:	2200      	movs	r2, #0
    ce58:	431a      	orrs	r2, r3
    ce5a:	9b01      	ldr	r3, [sp, #4]
    ce5c:	67da      	str	r2, [r3, #124]	; 0x7c
}
    ce5e:	bf00      	nop
    ce60:	b002      	add	sp, #8
    ce62:	4770      	bx	lr

0000ce64 <Ftm_Pwm_Ip_SetFaultPolarity>:
 * Description   : Selects the fault inputs polarity.
 */
static inline void Ftm_Pwm_Ip_SetFaultPolarity(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         FaultId,
                                               Ftm_Pwm_Ip_PolarityType       FaultPol)
{
    ce64:	b086      	sub	sp, #24
    ce66:	9003      	str	r0, [sp, #12]
    ce68:	460b      	mov	r3, r1
    ce6a:	9201      	str	r2, [sp, #4]
    ce6c:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 FaultInPol = ((FaultPol == FTM_PWM_IP_POLARITY_HIGH)? (uint32)0U : (uint32)1U);
    ce70:	9b01      	ldr	r3, [sp, #4]
    ce72:	2b00      	cmp	r3, #0
    ce74:	bf14      	ite	ne
    ce76:	2301      	movne	r3, #1
    ce78:	2300      	moveq	r3, #0
    ce7a:	b2db      	uxtb	r3, r3
    ce7c:	9305      	str	r3, [sp, #20]
    FtmBase->FLTPOL = (FtmBase->FLTPOL & ~(1UL << FaultId)) | ((uint32)FaultInPol << FaultId);
    ce7e:	9b03      	ldr	r3, [sp, #12]
    ce80:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    ce84:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ce88:	2101      	movs	r1, #1
    ce8a:	fa01 f303 	lsl.w	r3, r1, r3
    ce8e:	43db      	mvns	r3, r3
    ce90:	401a      	ands	r2, r3
    ce92:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ce96:	9905      	ldr	r1, [sp, #20]
    ce98:	fa01 f303 	lsl.w	r3, r1, r3
    ce9c:	431a      	orrs	r2, r3
    ce9e:	9b03      	ldr	r3, [sp, #12]
    cea0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    cea4:	bf00      	nop
    cea6:	b006      	add	sp, #24
    cea8:	4770      	bx	lr

0000ceaa <Ftm_Pwm_Ip_SetFaultInputEn>:
 * Description   : Enables/Disables the fault inputs.
 */
static inline void Ftm_Pwm_Ip_SetFaultInputEn(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                        FaultId,
                                               boolean                      FaultEn)
{
    ceaa:	b084      	sub	sp, #16
    ceac:	9001      	str	r0, [sp, #4]
    ceae:	460b      	mov	r3, r1
    ceb0:	f88d 3003 	strb.w	r3, [sp, #3]
    ceb4:	4613      	mov	r3, r2
    ceb6:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 FaultInEn = ((FaultEn == TRUE)? (uint32)1U : (uint32)0U);
    ceba:	f89d 3002 	ldrb.w	r3, [sp, #2]
    cebe:	2b00      	cmp	r3, #0
    cec0:	d001      	beq.n	cec6 <Ftm_Pwm_Ip_SetFaultInputEn+0x1c>
    cec2:	2301      	movs	r3, #1
    cec4:	e000      	b.n	cec8 <Ftm_Pwm_Ip_SetFaultInputEn+0x1e>
    cec6:	2300      	movs	r3, #0
    cec8:	9303      	str	r3, [sp, #12]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~(1UL << FaultId)) | ((uint32)FaultInEn << FaultId);
    ceca:	9b01      	ldr	r3, [sp, #4]
    cecc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    cece:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ced2:	2101      	movs	r1, #1
    ced4:	fa01 f303 	lsl.w	r3, r1, r3
    ced8:	43db      	mvns	r3, r3
    ceda:	401a      	ands	r2, r3
    cedc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cee0:	9903      	ldr	r1, [sp, #12]
    cee2:	fa01 f303 	lsl.w	r3, r1, r3
    cee6:	431a      	orrs	r2, r3
    cee8:	9b01      	ldr	r3, [sp, #4]
    ceea:	67da      	str	r2, [r3, #124]	; 0x7c
}
    ceec:	bf00      	nop
    ceee:	b004      	add	sp, #16
    cef0:	4770      	bx	lr

0000cef2 <Ftm_Pwm_Ip_SetFaultFilterEn>:
 * Description   : Enables/Disables the filter for the fault input.
 */
static inline void Ftm_Pwm_Ip_SetFaultFilterEn(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         FaultId,
                                               boolean                       FaultFilEn)
{
    cef2:	b084      	sub	sp, #16
    cef4:	9001      	str	r0, [sp, #4]
    cef6:	460b      	mov	r3, r1
    cef8:	f88d 3003 	strb.w	r3, [sp, #3]
    cefc:	4613      	mov	r3, r2
    cefe:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 FaultFilterEn = ((FaultFilEn == TRUE)? (uint32)1U : (uint32)0U);
    cf02:	f89d 3002 	ldrb.w	r3, [sp, #2]
    cf06:	2b00      	cmp	r3, #0
    cf08:	d001      	beq.n	cf0e <Ftm_Pwm_Ip_SetFaultFilterEn+0x1c>
    cf0a:	2301      	movs	r3, #1
    cf0c:	e000      	b.n	cf10 <Ftm_Pwm_Ip_SetFaultFilterEn+0x1e>
    cf0e:	2300      	movs	r3, #0
    cf10:	9303      	str	r3, [sp, #12]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~((uint32)FTM_FLTCTRL_FFLTR0EN_MASK << FaultId)) | (((uint32)FaultFilterEn << FaultId) << FTM_FLTCTRL_FFLTR0EN_SHIFT);
    cf12:	9b01      	ldr	r3, [sp, #4]
    cf14:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    cf16:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cf1a:	2110      	movs	r1, #16
    cf1c:	fa01 f303 	lsl.w	r3, r1, r3
    cf20:	43db      	mvns	r3, r3
    cf22:	401a      	ands	r2, r3
    cf24:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cf28:	9903      	ldr	r1, [sp, #12]
    cf2a:	fa01 f303 	lsl.w	r3, r1, r3
    cf2e:	011b      	lsls	r3, r3, #4
    cf30:	431a      	orrs	r2, r3
    cf32:	9b01      	ldr	r3, [sp, #4]
    cf34:	67da      	str	r2, [r3, #124]	; 0x7c
}
    cf36:	bf00      	nop
    cf38:	b004      	add	sp, #16
    cf3a:	4770      	bx	lr

0000cf3c <Ftm_Pwm_Ip_SetSimOutputBufferEn>:
 * Function Name : Ftm_Pwm_Ip_SetSimOutputBufferEn
 * Description   : The FTM channel output state is retained when the channel is in output mode.
 */
static inline void Ftm_Pwm_Ip_SetSimOutputBufferEn(Ftm_Pwm_Ip_SimType * const SimBase,
                                                   uint8                      Instance)
{
    cf3c:	b082      	sub	sp, #8
    cf3e:	9001      	str	r0, [sp, #4]
    cf40:	460b      	mov	r3, r1
    cf42:	f88d 3003 	strb.w	r3, [sp, #3]
    SimBase->MISCTRL0 = (SimBase->MISCTRL0  & ~(uint32)((uint32)SIM_MISCTRL0_FTM0_OBE_CTRL_MASK << Instance)) | (uint32)((uint32)SIM_MISCTRL0_FTM0_OBE_CTRL_MASK << Instance);
    cf46:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cf4a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    cf4e:	409a      	lsls	r2, r3
    cf50:	9b01      	ldr	r3, [sp, #4]
    cf52:	6a1b      	ldr	r3, [r3, #32]
    cf54:	431a      	orrs	r2, r3
    cf56:	9b01      	ldr	r3, [sp, #4]
    cf58:	621a      	str	r2, [r3, #32]
}
    cf5a:	bf00      	nop
    cf5c:	b002      	add	sp, #8
    cf5e:	4770      	bx	lr

0000cf60 <Ftm_Pwm_Ip_CalculatePhaseShift>:
 *
 *END**************************************************************************/
static uint16 Ftm_Pwm_Ip_CalculatePhaseShift(uint8 Instance,
                                             uint16 DutyCycle,
                                             uint16 PhaseShift)
{
    cf60:	b084      	sub	sp, #16
    cf62:	4603      	mov	r3, r0
    cf64:	f88d 3007 	strb.w	r3, [sp, #7]
    cf68:	460b      	mov	r3, r1
    cf6a:	f8ad 3004 	strh.w	r3, [sp, #4]
    cf6e:	4613      	mov	r3, r2
    cf70:	f8ad 3002 	strh.w	r3, [sp, #2]
    uint16 CnVValue = 0U;
    cf74:	2300      	movs	r3, #0
    cf76:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* If 100% duty cycle, C(n+1)V > MOD.
    Then choose C(n+1)V = Period = MOD + 1 for optimization. */
    if (Ftm_Pwm_Ip_aPeriod[Instance] == DutyCycle)
    cf7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cf7e:	4a17      	ldr	r2, [pc, #92]	; (cfdc <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    cf80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    cf84:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    cf88:	429a      	cmp	r2, r3
    cf8a:	d107      	bne.n	cf9c <Ftm_Pwm_Ip_CalculatePhaseShift+0x3c>
    {
        CnVValue = Ftm_Pwm_Ip_aPeriod[Instance];
    cf8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cf90:	4a12      	ldr	r2, [pc, #72]	; (cfdc <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    cf92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    cf96:	f8ad 300e 	strh.w	r3, [sp, #14]
    cf9a:	e019      	b.n	cfd0 <Ftm_Pwm_Ip_CalculatePhaseShift+0x70>
        (void) PhaseShift;
    }
    /* If 0% duty cycle, C(n+1)V = CnV = phase-shift value. */
    else if (0U == DutyCycle)
    cf9c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    cfa0:	2b00      	cmp	r3, #0
    cfa2:	d104      	bne.n	cfae <Ftm_Pwm_Ip_CalculatePhaseShift+0x4e>
    {
        CnVValue = PhaseShift;
    cfa4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    cfa8:	f8ad 300e 	strh.w	r3, [sp, #14]
    cfac:	e010      	b.n	cfd0 <Ftm_Pwm_Ip_CalculatePhaseShift+0x70>
        (void) Instance;
    }
    else
    {
        /* The n+1 match can occur at the next cycle */
        CnVValue = (PhaseShift + DutyCycle) % Ftm_Pwm_Ip_aPeriod[Instance];
    cfae:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    cfb2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    cfb6:	4413      	add	r3, r2
    cfb8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    cfbc:	4907      	ldr	r1, [pc, #28]	; (cfdc <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    cfbe:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
    cfc2:	fb93 f1f2 	sdiv	r1, r3, r2
    cfc6:	fb01 f202 	mul.w	r2, r1, r2
    cfca:	1a9b      	subs	r3, r3, r2
    cfcc:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    return CnVValue;
    cfd0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    cfd4:	4618      	mov	r0, r3
    cfd6:	b004      	add	sp, #16
    cfd8:	4770      	bx	lr
    cfda:	bf00      	nop
    cfdc:	1fff8e14 	.word	0x1fff8e14

0000cfe0 <Ftm_Pwm_Ip_InitPair>:
 * Description   : Configures the PWM signal for the combined channel.
 *
 *END**************************************************************************/
static void  Ftm_Pwm_Ip_InitPair(uint8 Instance,
                                 const Ftm_Pwm_Ip_PairCfgType * UserPairCfg)
{
    cfe0:	b500      	push	{lr}
    cfe2:	b085      	sub	sp, #20
    cfe4:	4603      	mov	r3, r0
    cfe6:	9100      	str	r1, [sp, #0]
    cfe8:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    cfec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cff0:	4a40      	ldr	r2, [pc, #256]	; (d0f4 <Ftm_Pwm_Ip_InitPair+0x114>)
    cff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cff6:	9303      	str	r3, [sp, #12]
    uint8 MainChId = 0U;
    cff8:	2300      	movs	r3, #0
    cffa:	f88d 300b 	strb.w	r3, [sp, #11]
    uint8 PairChId = 0U;
    cffe:	2300      	movs	r3, #0
    d000:	f88d 300a 	strb.w	r3, [sp, #10]
        DevAssert(TRUE == UserPairCfg->ComplementaryModeEn);
    }
#endif

    /* Get channel ids for pair */
    MainChId = (uint8)(UserPairCfg->PairId * 2U);
    d004:	9b00      	ldr	r3, [sp, #0]
    d006:	781b      	ldrb	r3, [r3, #0]
    d008:	005b      	lsls	r3, r3, #1
    d00a:	f88d 300b 	strb.w	r3, [sp, #11]
    PairChId = (uint8)(MainChId + 1U);
    d00e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d012:	3301      	adds	r3, #1
    d014:	f88d 300a 	strb.w	r3, [sp, #10]

    Ftm_Pwm_Ip_aPhaseShift[Instance][UserPairCfg->PairId] = UserPairCfg->PhaseShiftValue;
    d018:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d01c:	9a00      	ldr	r2, [sp, #0]
    d01e:	7812      	ldrb	r2, [r2, #0]
    d020:	4610      	mov	r0, r2
    d022:	9a00      	ldr	r2, [sp, #0]
    d024:	8951      	ldrh	r1, [r2, #10]
    d026:	4a34      	ldr	r2, [pc, #208]	; (d0f8 <Ftm_Pwm_Ip_InitPair+0x118>)
    d028:	009b      	lsls	r3, r3, #2
    d02a:	4403      	add	r3, r0
    d02c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    /* Configure Complementary mode for the Pair */
    Ftm_Pwm_Ip_SetDualChnCompCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->ComplementaryModeEn);
    d030:	9b00      	ldr	r3, [sp, #0]
    d032:	7819      	ldrb	r1, [r3, #0]
    d034:	9b00      	ldr	r3, [sp, #0]
    d036:	789b      	ldrb	r3, [r3, #2]
    d038:	461a      	mov	r2, r3
    d03a:	9803      	ldr	r0, [sp, #12]
    d03c:	f7ff f920 	bl	c280 <Ftm_Pwm_Ip_SetDualChnCompCmd>

    /* Configure polarity of the PWM signal taking into consideration POL of main channel */
    if (TRUE == UserPairCfg->ComplementaryModeEn)
    d040:	9b00      	ldr	r3, [sp, #0]
    d042:	789b      	ldrb	r3, [r3, #2]
    d044:	2b00      	cmp	r3, #0
    d046:	d02f      	beq.n	d0a8 <Ftm_Pwm_Ip_InitPair+0xc8>
    {
        /* Complementary mode active. Second channel active state is inverted. */
        if (FTM_PWM_IP_POLARITY_LOW == Ftm_Pwm_Ip_GetChnOutputPolarity(FtmBase, MainChId))
    d048:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d04c:	4619      	mov	r1, r3
    d04e:	9803      	ldr	r0, [sp, #12]
    d050:	f7ff fa3e 	bl	c4d0 <Ftm_Pwm_Ip_GetChnOutputPolarity>
    d054:	4603      	mov	r3, r0
    d056:	2b01      	cmp	r3, #1
    d058:	d113      	bne.n	d082 <Ftm_Pwm_Ip_InitPair+0xa2>
        {
            /* Main channel polarity is Active Low */
            if (FTM_PWM_IP_MAIN_DUPLICATED == UserPairCfg->PairChPolarity)
    d05a:	9b00      	ldr	r3, [sp, #0]
    d05c:	685b      	ldr	r3, [r3, #4]
    d05e:	2b01      	cmp	r3, #1
    d060:	d107      	bne.n	d072 <Ftm_Pwm_Ip_InitPair+0x92>
            {
                /* User wants to duplicate main channel active state. Set polarity to Active High. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_HIGH);
    d062:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d066:	2200      	movs	r2, #0
    d068:	4619      	mov	r1, r3
    d06a:	9803      	ldr	r0, [sp, #12]
    d06c:	f7ff fa0e 	bl	c48c <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    d070:	e01a      	b.n	d0a8 <Ftm_Pwm_Ip_InitPair+0xc8>
            }
            else
            {
                /* User wants to invert main channel active state. Set polarity to Active Low. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_LOW);
    d072:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d076:	2201      	movs	r2, #1
    d078:	4619      	mov	r1, r3
    d07a:	9803      	ldr	r0, [sp, #12]
    d07c:	f7ff fa06 	bl	c48c <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    d080:	e012      	b.n	d0a8 <Ftm_Pwm_Ip_InitPair+0xc8>
            }
        }
        else
        {
            /* Main channel polarity is Active High */
            if (FTM_PWM_IP_MAIN_DUPLICATED == UserPairCfg->PairChPolarity)
    d082:	9b00      	ldr	r3, [sp, #0]
    d084:	685b      	ldr	r3, [r3, #4]
    d086:	2b01      	cmp	r3, #1
    d088:	d107      	bne.n	d09a <Ftm_Pwm_Ip_InitPair+0xba>
            {
                /* User wants to duplicate main channel active state. Set polarity to Active Low. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_LOW);
    d08a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d08e:	2201      	movs	r2, #1
    d090:	4619      	mov	r1, r3
    d092:	9803      	ldr	r0, [sp, #12]
    d094:	f7ff f9fa 	bl	c48c <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    d098:	e006      	b.n	d0a8 <Ftm_Pwm_Ip_InitPair+0xc8>
            }
            else
            {
                /* User wants to invert main channel active state. Set polarity to Active High. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_HIGH);
    d09a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d09e:	2200      	movs	r2, #0
    d0a0:	4619      	mov	r1, r3
    d0a2:	9803      	ldr	r0, [sp, #12]
    d0a4:	f7ff f9f2 	bl	c48c <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
            }
        }
    }
#if (defined(FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE) && (FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE == STD_ON))
    /* Enable PWM output */
    Ftm_Pwm_Ip_EnablePwmChannelOutputs(FtmBase, PairChId);
    d0a8:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d0ac:	4619      	mov	r1, r3
    d0ae:	9803      	ldr	r0, [sp, #12]
    d0b0:	f7fe fe31 	bl	bd16 <Ftm_Pwm_Ip_EnablePwmChannelOutputs>
#endif

    /* Configure sync control for channels CV registers */
    Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->PairSyncEn);
    d0b4:	9b00      	ldr	r3, [sp, #0]
    d0b6:	7819      	ldrb	r1, [r3, #0]
    d0b8:	9b00      	ldr	r3, [sp, #0]
    d0ba:	7a5b      	ldrb	r3, [r3, #9]
    d0bc:	461a      	mov	r2, r3
    d0be:	9803      	ldr	r0, [sp, #12]
    d0c0:	f7ff f92c 	bl	c31c <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>
    /* Configure dead time */
    Ftm_Pwm_Ip_SetDualChnDeadtimeCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->DeadtimeEn);
    d0c4:	9b00      	ldr	r3, [sp, #0]
    d0c6:	7819      	ldrb	r1, [r3, #0]
    d0c8:	9b00      	ldr	r3, [sp, #0]
    d0ca:	785b      	ldrb	r3, [r3, #1]
    d0cc:	461a      	mov	r2, r3
    d0ce:	9803      	ldr	r0, [sp, #12]
    d0d0:	f7ff f8fd 	bl	c2ce <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd>
    /* Configure the generation of external trigger on the channel (n+1) */
    Ftm_Pwm_Ip_SetChnTriggerCmd(FtmBase, PairChId, UserPairCfg->PairExtTrigEn);
    d0d4:	9b00      	ldr	r3, [sp, #0]
    d0d6:	7a1a      	ldrb	r2, [r3, #8]
    d0d8:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d0dc:	4619      	mov	r1, r3
    d0de:	9803      	ldr	r0, [sp, #12]
    d0e0:	f7ff fddd 	bl	cc9e <Ftm_Pwm_Ip_SetChnTriggerCmd>
    /* Sync Write buffered registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    d0e4:	2101      	movs	r1, #1
    d0e6:	9803      	ldr	r0, [sp, #12]
    d0e8:	f7ff f814 	bl	c114 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    d0ec:	bf00      	nop
    d0ee:	b005      	add	sp, #20
    d0f0:	f85d fb04 	ldr.w	pc, [sp], #4
    d0f4:	00016494 	.word	0x00016494
    d0f8:	1fff8e5c 	.word	0x1fff8e5c

0000d0fc <Ftm_Pwm_Ip_DisableCmpIrq>:
 *                 time-overflow (TOIE, TOF) for the specified channel.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DisableCmpIrq(uint8 Instance,
                                     uint8 Channel)
{
    d0fc:	b500      	push	{lr}
    d0fe:	b085      	sub	sp, #20
    d100:	4603      	mov	r3, r0
    d102:	460a      	mov	r2, r1
    d104:	f88d 3007 	strb.w	r3, [sp, #7]
    d108:	4613      	mov	r3, r2
    d10a:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d10e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d112:	4a0a      	ldr	r2, [pc, #40]	; (d13c <Ftm_Pwm_Ip_DisableCmpIrq+0x40>)
    d114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d118:	9303      	str	r3, [sp, #12]

    Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
#endif

    /* Clear CHIE bit in CnSC register for the given channel to disable match-compare interrupts */
    Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, FALSE);
    d11a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d11e:	2200      	movs	r2, #0
    d120:	4619      	mov	r1, r3
    d122:	9803      	ldr	r0, [sp, #12]
    d124:	f7fe feed 	bl	bf02 <Ftm_Pwm_Ip_UpdateChnInt>
    /* Clear CHnF bit interrupt flag */
    Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, Channel);
    d128:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d12c:	4619      	mov	r1, r3
    d12e:	9803      	ldr	r0, [sp, #12]
    d130:	f7fe ff0a 	bl	bf48 <Ftm_Pwm_Ip_ClearChnEventFlag>
}
    d134:	bf00      	nop
    d136:	b005      	add	sp, #20
    d138:	f85d fb04 	ldr.w	pc, [sp], #4
    d13c:	00016494 	.word	0x00016494

0000d140 <Ftm_Pwm_Ip_ConfigureSWandHWSync>:

static void Ftm_Pwm_Ip_ConfigureSWandHWSync(uint8 Instance, const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    d140:	b500      	push	{lr}
    d142:	b085      	sub	sp, #20
    d144:	4603      	mov	r3, r0
    d146:	9100      	str	r1, [sp, #0]
    d148:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d14c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d150:	4a53      	ldr	r2, [pc, #332]	; (d2a0 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x160>)
    d152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d156:	9303      	str	r3, [sp, #12]
    switch (SyncCfg->SyncMode)
    d158:	9b00      	ldr	r3, [sp, #0]
    d15a:	681b      	ldr	r3, [r3, #0]
    d15c:	2b00      	cmp	r3, #0
    d15e:	d002      	beq.n	d166 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x26>
    d160:	2b01      	cmp	r3, #1
    d162:	d04c      	beq.n	d1fe <Ftm_Pwm_Ip_ConfigureSWandHWSync+0xbe>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, FALSE);
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
            break;

        default:    /* Nothing to do */
            break;
    d164:	e097      	b.n	d296 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x156>
            Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync != FTM_PWM_IP_SYNC_DISABLED));
    d166:	9b00      	ldr	r3, [sp, #0]
    d168:	699b      	ldr	r3, [r3, #24]
    d16a:	2b00      	cmp	r3, #0
    d16c:	bf14      	ite	ne
    d16e:	2301      	movne	r3, #1
    d170:	2300      	moveq	r3, #0
    d172:	b2db      	uxtb	r3, r3
    d174:	4619      	mov	r1, r3
    d176:	9803      	ldr	r0, [sp, #12]
    d178:	f7ff faa3 	bl	c6c2 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(FtmBase, FALSE);
    d17c:	2100      	movs	r1, #0
    d17e:	9803      	ldr	r0, [sp, #12]
    d180:	f7ff fb1c 	bl	c7bc <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(FtmBase, (SyncCfg->InverterSync != FTM_PWM_IP_SYNC_DISABLED));
    d184:	9b00      	ldr	r3, [sp, #0]
    d186:	691b      	ldr	r3, [r3, #16]
    d188:	2b00      	cmp	r3, #0
    d18a:	bf14      	ite	ne
    d18c:	2301      	movne	r3, #1
    d18e:	2300      	moveq	r3, #0
    d190:	b2db      	uxtb	r3, r3
    d192:	4619      	mov	r1, r3
    d194:	9803      	ldr	r0, [sp, #12]
    d196:	f7ff faad 	bl	c6f4 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, FALSE);
    d19a:	2100      	movs	r1, #0
    d19c:	9803      	ldr	r0, [sp, #12]
    d19e:	f7ff fb26 	bl	c7ee <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(FtmBase, (SyncCfg->OutRegSync != FTM_PWM_IP_SYNC_DISABLED));
    d1a2:	9b00      	ldr	r3, [sp, #0]
    d1a4:	695b      	ldr	r3, [r3, #20]
    d1a6:	2b00      	cmp	r3, #0
    d1a8:	bf14      	ite	ne
    d1aa:	2301      	movne	r3, #1
    d1ac:	2300      	moveq	r3, #0
    d1ae:	b2db      	uxtb	r3, r3
    d1b0:	4619      	mov	r1, r3
    d1b2:	9803      	ldr	r0, [sp, #12]
    d1b4:	f7ff fab7 	bl	c726 <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, FALSE);
    d1b8:	2100      	movs	r1, #0
    d1ba:	9803      	ldr	r0, [sp, #12]
    d1bc:	f7ff fb17 	bl	c7ee <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync != FTM_PWM_IP_SYNC_DISABLED));
    d1c0:	9b00      	ldr	r3, [sp, #0]
    d1c2:	69db      	ldr	r3, [r3, #28]
    d1c4:	2b00      	cmp	r3, #0
    d1c6:	bf14      	ite	ne
    d1c8:	2301      	movne	r3, #1
    d1ca:	2300      	moveq	r3, #0
    d1cc:	b2db      	uxtb	r3, r3
    d1ce:	4619      	mov	r1, r3
    d1d0:	9803      	ldr	r0, [sp, #12]
    d1d2:	f7ff fa5d 	bl	c690 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(FtmBase, FALSE);
    d1d6:	2100      	movs	r1, #0
    d1d8:	9803      	ldr	r0, [sp, #12]
    d1da:	f7ff fad6 	bl	c78a <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
    d1de:	9b00      	ldr	r3, [sp, #0]
    d1e0:	6a1b      	ldr	r3, [r3, #32]
    d1e2:	2b00      	cmp	r3, #0
    d1e4:	bf14      	ite	ne
    d1e6:	2301      	movne	r3, #1
    d1e8:	2300      	moveq	r3, #0
    d1ea:	b2db      	uxtb	r3, r3
    d1ec:	4619      	mov	r1, r3
    d1ee:	9803      	ldr	r0, [sp, #12]
    d1f0:	f7ff fa35 	bl	c65e <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, FALSE);
    d1f4:	2100      	movs	r1, #0
    d1f6:	9803      	ldr	r0, [sp, #12]
    d1f8:	f7ff faae 	bl	c758 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>
            break;
    d1fc:	e04b      	b.n	d296 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x156>
            Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, FALSE);
    d1fe:	2100      	movs	r1, #0
    d200:	9803      	ldr	r0, [sp, #12]
    d202:	f7ff fa5e 	bl	c6c2 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync != FTM_PWM_IP_SYNC_DISABLED));
    d206:	9b00      	ldr	r3, [sp, #0]
    d208:	699b      	ldr	r3, [r3, #24]
    d20a:	2b00      	cmp	r3, #0
    d20c:	bf14      	ite	ne
    d20e:	2301      	movne	r3, #1
    d210:	2300      	moveq	r3, #0
    d212:	b2db      	uxtb	r3, r3
    d214:	4619      	mov	r1, r3
    d216:	9803      	ldr	r0, [sp, #12]
    d218:	f7ff fad0 	bl	c7bc <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(FtmBase, FALSE);
    d21c:	2100      	movs	r1, #0
    d21e:	9803      	ldr	r0, [sp, #12]
    d220:	f7ff fa68 	bl	c6f4 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, (SyncCfg->InverterSync != FTM_PWM_IP_SYNC_DISABLED));
    d224:	9b00      	ldr	r3, [sp, #0]
    d226:	691b      	ldr	r3, [r3, #16]
    d228:	2b00      	cmp	r3, #0
    d22a:	bf14      	ite	ne
    d22c:	2301      	movne	r3, #1
    d22e:	2300      	moveq	r3, #0
    d230:	b2db      	uxtb	r3, r3
    d232:	4619      	mov	r1, r3
    d234:	9803      	ldr	r0, [sp, #12]
    d236:	f7ff fada 	bl	c7ee <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(FtmBase, FALSE);
    d23a:	2100      	movs	r1, #0
    d23c:	9803      	ldr	r0, [sp, #12]
    d23e:	f7ff fa72 	bl	c726 <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, (SyncCfg->OutRegSync != FTM_PWM_IP_SYNC_DISABLED));
    d242:	9b00      	ldr	r3, [sp, #0]
    d244:	695b      	ldr	r3, [r3, #20]
    d246:	2b00      	cmp	r3, #0
    d248:	bf14      	ite	ne
    d24a:	2301      	movne	r3, #1
    d24c:	2300      	moveq	r3, #0
    d24e:	b2db      	uxtb	r3, r3
    d250:	4619      	mov	r1, r3
    d252:	9803      	ldr	r0, [sp, #12]
    d254:	f7ff facb 	bl	c7ee <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(FtmBase, FALSE);
    d258:	2100      	movs	r1, #0
    d25a:	9803      	ldr	r0, [sp, #12]
    d25c:	f7ff fa18 	bl	c690 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync != FTM_PWM_IP_SYNC_DISABLED));
    d260:	9b00      	ldr	r3, [sp, #0]
    d262:	69db      	ldr	r3, [r3, #28]
    d264:	2b00      	cmp	r3, #0
    d266:	bf14      	ite	ne
    d268:	2301      	movne	r3, #1
    d26a:	2300      	moveq	r3, #0
    d26c:	b2db      	uxtb	r3, r3
    d26e:	4619      	mov	r1, r3
    d270:	9803      	ldr	r0, [sp, #12]
    d272:	f7ff fa8a 	bl	c78a <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, FALSE);
    d276:	2100      	movs	r1, #0
    d278:	9803      	ldr	r0, [sp, #12]
    d27a:	f7ff f9f0 	bl	c65e <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
    d27e:	9b00      	ldr	r3, [sp, #0]
    d280:	6a1b      	ldr	r3, [r3, #32]
    d282:	2b00      	cmp	r3, #0
    d284:	bf14      	ite	ne
    d286:	2301      	movne	r3, #1
    d288:	2300      	moveq	r3, #0
    d28a:	b2db      	uxtb	r3, r3
    d28c:	4619      	mov	r1, r3
    d28e:	9803      	ldr	r0, [sp, #12]
    d290:	f7ff fa62 	bl	c758 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>
            break;
    d294:	bf00      	nop
    }
}
    d296:	bf00      	nop
    d298:	b005      	add	sp, #20
    d29a:	f85d fb04 	ldr.w	pc, [sp], #4
    d29e:	bf00      	nop
    d2a0:	00016494 	.word	0x00016494

0000d2a4 <Ftm_Pwm_Ip_ConfigureSyncType>:


static void Ftm_Pwm_Ip_ConfigureSyncType(uint8 Instance, const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    d2a4:	b500      	push	{lr}
    d2a6:	b085      	sub	sp, #20
    d2a8:	4603      	mov	r3, r0
    d2aa:	9100      	str	r1, [sp, #0]
    d2ac:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d2b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d2b4:	4a19      	ldr	r2, [pc, #100]	; (d31c <Ftm_Pwm_Ip_ConfigureSyncType+0x78>)
    d2b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2ba:	9303      	str	r3, [sp, #12]

    /* Configure sync for OUTMASK register */
    Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    d2bc:	9b00      	ldr	r3, [sp, #0]
    d2be:	699b      	ldr	r3, [r3, #24]
    d2c0:	2b00      	cmp	r3, #0
    d2c2:	bf14      	ite	ne
    d2c4:	2301      	movne	r3, #1
    d2c6:	2300      	moveq	r3, #0
    d2c8:	b2db      	uxtb	r3, r3
    d2ca:	4619      	mov	r1, r3
    d2cc:	9803      	ldr	r0, [sp, #12]
    d2ce:	f7fe fee6 	bl	c09e <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>
    /* Configure sync for INVCTRL register */
    Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd(FtmBase, (SyncCfg->InverterSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    d2d2:	9b00      	ldr	r3, [sp, #0]
    d2d4:	691b      	ldr	r3, [r3, #16]
    d2d6:	2b00      	cmp	r3, #0
    d2d8:	bf14      	ite	ne
    d2da:	2301      	movne	r3, #1
    d2dc:	2300      	moveq	r3, #0
    d2de:	b2db      	uxtb	r3, r3
    d2e0:	4619      	mov	r1, r3
    d2e2:	9803      	ldr	r0, [sp, #12]
    d2e4:	f7ff f973 	bl	c5ce <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd>
    /* Configure sync for SWOCTRL register */
    Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd(FtmBase, (SyncCfg->OutRegSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    d2e8:	9b00      	ldr	r3, [sp, #0]
    d2ea:	695b      	ldr	r3, [r3, #20]
    d2ec:	2b00      	cmp	r3, #0
    d2ee:	bf14      	ite	ne
    d2f0:	2301      	movne	r3, #1
    d2f2:	2300      	moveq	r3, #0
    d2f4:	b2db      	uxtb	r3, r3
    d2f6:	4619      	mov	r1, r3
    d2f8:	9803      	ldr	r0, [sp, #12]
    d2fa:	f7ff f980 	bl	c5fe <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd>
    /* Configure sync for MOD, HCR, CNTIN, and CV registers */
    Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    d2fe:	9b00      	ldr	r3, [sp, #0]
    d300:	69db      	ldr	r3, [r3, #28]
    d302:	2b00      	cmp	r3, #0
    d304:	bf14      	ite	ne
    d306:	2301      	movne	r3, #1
    d308:	2300      	moveq	r3, #0
    d30a:	b2db      	uxtb	r3, r3
    d30c:	4619      	mov	r1, r3
    d30e:	9803      	ldr	r0, [sp, #12]
    d310:	f7ff f945 	bl	c59e <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd>
}
    d314:	bf00      	nop
    d316:	b005      	add	sp, #20
    d318:	f85d fb04 	ldr.w	pc, [sp], #4
    d31c:	00016494 	.word	0x00016494

0000d320 <Ftm_Pwm_Ip_UpdateSync>:
 *
 * Implements : Ftm_Pwm_Ip_UpdateSync_Activity
 *END**************************************************************************/
static Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdateSync(uint8 Instance,
                                                   const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    d320:	b500      	push	{lr}
    d322:	b087      	sub	sp, #28
    d324:	4603      	mov	r3, r0
    d326:	9100      	str	r1, [sp, #0]
    d328:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d32c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d330:	4a42      	ldr	r2, [pc, #264]	; (d43c <Ftm_Pwm_Ip_UpdateSync+0x11c>)
    d332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d336:	9304      	str	r3, [sp, #16]
    Ftm_Pwm_Ip_StatusType RetStatus = FTM_PWM_IP_STATUS_SUCCESS;
    d338:	2300      	movs	r3, #0
    d33a:	9305      	str	r3, [sp, #20]
    boolean HardwareSync = FALSE;
    d33c:	2300      	movs	r3, #0
    d33e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(SyncCfg != NULL_PTR);
#endif

    HardwareSync = SyncCfg->HwSync0 || SyncCfg->HwSync1 || SyncCfg->HwSync2;
    d342:	9b00      	ldr	r3, [sp, #0]
    d344:	791b      	ldrb	r3, [r3, #4]
    d346:	2b00      	cmp	r3, #0
    d348:	d107      	bne.n	d35a <Ftm_Pwm_Ip_UpdateSync+0x3a>
    d34a:	9b00      	ldr	r3, [sp, #0]
    d34c:	795b      	ldrb	r3, [r3, #5]
    d34e:	2b00      	cmp	r3, #0
    d350:	d103      	bne.n	d35a <Ftm_Pwm_Ip_UpdateSync+0x3a>
    d352:	9b00      	ldr	r3, [sp, #0]
    d354:	799b      	ldrb	r3, [r3, #6]
    d356:	2b00      	cmp	r3, #0
    d358:	d001      	beq.n	d35e <Ftm_Pwm_Ip_UpdateSync+0x3e>
    d35a:	2301      	movs	r3, #1
    d35c:	e000      	b.n	d360 <Ftm_Pwm_Ip_UpdateSync+0x40>
    d35e:	2300      	movs	r3, #0
    d360:	f88d 300f 	strb.w	r3, [sp, #15]
    d364:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d368:	f003 0301 	and.w	r3, r3, #1
    d36c:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Software and hardware triggers are not allowed at the same time */
    if ((SyncCfg->SyncMode == FTM_PWM_IP_SYNC_SWTRIGGER) && (HardwareSync == TRUE))
    d370:	9b00      	ldr	r3, [sp, #0]
    d372:	681b      	ldr	r3, [r3, #0]
    d374:	2b00      	cmp	r3, #0
    d376:	d105      	bne.n	d384 <Ftm_Pwm_Ip_UpdateSync+0x64>
    d378:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d37c:	2b00      	cmp	r3, #0
    d37e:	d001      	beq.n	d384 <Ftm_Pwm_Ip_UpdateSync+0x64>
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    d380:	2301      	movs	r3, #1
    d382:	9305      	str	r3, [sp, #20]
    }
    if (SyncCfg->CounterSync == FTM_PWM_IP_SYNC_ON_CLK)
    d384:	9b00      	ldr	r3, [sp, #0]
    d386:	6a1b      	ldr	r3, [r3, #32]
    d388:	2b02      	cmp	r3, #2
    d38a:	d101      	bne.n	d390 <Ftm_Pwm_Ip_UpdateSync+0x70>
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    d38c:	2301      	movs	r3, #1
    d38e:	9305      	str	r3, [sp, #20]
    }

    if (RetStatus == FTM_PWM_IP_STATUS_SUCCESS)
    d390:	9b05      	ldr	r3, [sp, #20]
    d392:	2b00      	cmp	r3, #0
    d394:	d14c      	bne.n	d430 <Ftm_Pwm_Ip_UpdateSync+0x110>
    {
        Ftm_Pwm_Ip_ConfigureSWandHWSync(Instance, SyncCfg);
    d396:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d39a:	9900      	ldr	r1, [sp, #0]
    d39c:	4618      	mov	r0, r3
    d39e:	f7ff fecf 	bl	d140 <Ftm_Pwm_Ip_ConfigureSWandHWSync>
        /* Enhanced PWM sync is used */
        Ftm_Pwm_Ip_SetPwmSyncModeCmd(FtmBase, TRUE);
    d3a2:	2101      	movs	r1, #1
    d3a4:	9804      	ldr	r0, [sp, #16]
    d3a6:	f7ff f942 	bl	c62e <Ftm_Pwm_Ip_SetPwmSyncModeCmd>
        /* Configure trigger source for sync */
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 0U, SyncCfg->HwSync0);
    d3aa:	9b00      	ldr	r3, [sp, #0]
    d3ac:	791b      	ldrb	r3, [r3, #4]
    d3ae:	461a      	mov	r2, r3
    d3b0:	2100      	movs	r1, #0
    d3b2:	9804      	ldr	r0, [sp, #16]
    d3b4:	f7fe fe89 	bl	c0ca <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 1U, SyncCfg->HwSync1);
    d3b8:	9b00      	ldr	r3, [sp, #0]
    d3ba:	795b      	ldrb	r3, [r3, #5]
    d3bc:	461a      	mov	r2, r3
    d3be:	2101      	movs	r1, #1
    d3c0:	9804      	ldr	r0, [sp, #16]
    d3c2:	f7fe fe82 	bl	c0ca <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 2U, SyncCfg->HwSync2);
    d3c6:	9b00      	ldr	r3, [sp, #0]
    d3c8:	799b      	ldrb	r3, [r3, #6]
    d3ca:	461a      	mov	r2, r3
    d3cc:	2102      	movs	r1, #2
    d3ce:	9804      	ldr	r0, [sp, #16]
    d3d0:	f7fe fe7b 	bl	c0ca <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        /* Configure if FTM clears TRIGn (n=0,1,2) when the hardware trigger n is detected. */
        Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd(FtmBase, SyncCfg->HwTriggerAutoClear);
    d3d4:	9b00      	ldr	r3, [sp, #0]
    d3d6:	79db      	ldrb	r3, [r3, #7]
    d3d8:	4619      	mov	r1, r3
    d3da:	9804      	ldr	r0, [sp, #16]
    d3dc:	f7ff f8c7 	bl	c56e <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd>

        /* Configure loading points */
        Ftm_Pwm_Ip_SetMaxLoadingCmd(FtmBase, SyncCfg->MaxLoadPoint);
    d3e0:	9b00      	ldr	r3, [sp, #0]
    d3e2:	7a1b      	ldrb	r3, [r3, #8]
    d3e4:	4619      	mov	r1, r3
    d3e6:	9804      	ldr	r0, [sp, #16]
    d3e8:	f7fe fe43 	bl	c072 <Ftm_Pwm_Ip_SetMaxLoadingCmd>
        Ftm_Pwm_Ip_SetMinLoadingCmd(FtmBase, SyncCfg->MinLoadPoint);
    d3ec:	9b00      	ldr	r3, [sp, #0]
    d3ee:	7a5b      	ldrb	r3, [r3, #9]
    d3f0:	4619      	mov	r1, r3
    d3f2:	9804      	ldr	r0, [sp, #16]
    d3f4:	f7fe fe27 	bl	c046 <Ftm_Pwm_Ip_SetMinLoadingCmd>

#if (defined(FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD) && (FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD == STD_ON))
        if(TRUE == SyncCfg->HalfCycleLoadPoint)
    d3f8:	9b00      	ldr	r3, [sp, #0]
    d3fa:	7a9b      	ldrb	r3, [r3, #10]
    d3fc:	2b00      	cmp	r3, #0
    d3fe:	d005      	beq.n	d40c <Ftm_Pwm_Ip_UpdateSync+0xec>
        {
            Ftm_Pwm_Ip_SetHalfCycleValue(FtmBase, SyncCfg->HalfCycleLoadPointValue);
    d400:	9b00      	ldr	r3, [sp, #0]
    d402:	899b      	ldrh	r3, [r3, #12]
    d404:	4619      	mov	r1, r3
    d406:	9804      	ldr	r0, [sp, #16]
    d408:	f7ff fac6 	bl	c998 <Ftm_Pwm_Ip_SetHalfCycleValue>
        }
        Ftm_Pwm_Ip_SetHalfCycleCmd(FtmBase, SyncCfg->HalfCycleLoadPoint);
    d40c:	9b00      	ldr	r3, [sp, #0]
    d40e:	7a9b      	ldrb	r3, [r3, #10]
    d410:	4619      	mov	r1, r3
    d412:	9804      	ldr	r0, [sp, #16]
    d414:	f7ff faa3 	bl	c95e <Ftm_Pwm_Ip_SetHalfCycleCmd>
#endif

#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
        /* Sets the frequency of reload points */
        Ftm_Pwm_Ip_SetLoadFreq(FtmBase, SyncCfg->LoadPointFreq);
    d418:	9b00      	ldr	r3, [sp, #0]
    d41a:	7b9b      	ldrb	r3, [r3, #14]
    d41c:	4619      	mov	r1, r3
    d41e:	9804      	ldr	r0, [sp, #16]
    d420:	f7ff f86b 	bl	c4fa <Ftm_Pwm_Ip_SetLoadFreq>
#endif        
        
        Ftm_Pwm_Ip_ConfigureSyncType(Instance, SyncCfg);
    d424:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d428:	9900      	ldr	r1, [sp, #0]
    d42a:	4618      	mov	r0, r3
    d42c:	f7ff ff3a 	bl	d2a4 <Ftm_Pwm_Ip_ConfigureSyncType>
    }

    return RetStatus;
    d430:	9b05      	ldr	r3, [sp, #20]
}
    d432:	4618      	mov	r0, r3
    d434:	b007      	add	sp, #28
    d436:	f85d fb04 	ldr.w	pc, [sp], #4
    d43a:	bf00      	nop
    d43c:	00016494 	.word	0x00016494

0000d440 <Ftm_Pwm_Ip_ResetAndFirstConfigure>:
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
#endif /* (STD_ON == FTM_PWM_IP_USER_ACCESS_ALLOWED_AVAILABLE) */


static void Ftm_Pwm_Ip_ResetAndFirstConfigure(uint8 Instance, const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    d440:	b500      	push	{lr}
    d442:	b085      	sub	sp, #20
    d444:	4603      	mov	r3, r0
    d446:	9100      	str	r1, [sp, #0]
    d448:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d44c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d450:	4a1f      	ldr	r2, [pc, #124]	; (d4d0 <Ftm_Pwm_Ip_ResetAndFirstConfigure+0x90>)
    d452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d456:	9303      	str	r3, [sp, #12]

    Ftm_Pwm_Ip_Reset(FtmBase);
    d458:	9803      	ldr	r0, [sp, #12]
    d45a:	f7ff fbab 	bl	cbb4 <Ftm_Pwm_Ip_Reset>
    /* Disable counter clock */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
    d45e:	2100      	movs	r1, #0
    d460:	9803      	ldr	r0, [sp, #12]
    d462:	f7fe fc01 	bl	bc68 <Ftm_Pwm_Ip_SetClockSource>
    /* Clear the overflow flag */
    Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
    d466:	9803      	ldr	r0, [sp, #12]
    d468:	f7fe fc4a 	bl	bd00 <Ftm_Pwm_Ip_ClearTimerOverflow>
    /* Set Counter mode */
    Ftm_Pwm_Ip_SetCpwms(FtmBase, (UserInstCfg->CntMode == FTM_PWM_IP_EDGE_ALIGNED)? FALSE : TRUE);
    d46c:	9b00      	ldr	r3, [sp, #0]
    d46e:	68db      	ldr	r3, [r3, #12]
    d470:	2b00      	cmp	r3, #0
    d472:	bf14      	ite	ne
    d474:	2301      	movne	r3, #1
    d476:	2300      	moveq	r3, #0
    d478:	b2db      	uxtb	r3, r3
    d47a:	4619      	mov	r1, r3
    d47c:	9803      	ldr	r0, [sp, #12]
    d47e:	f7fe fc04 	bl	bc8a <Ftm_Pwm_Ip_SetCpwms>
    /* Disable FTM mode */
    Ftm_Pwm_Ip_Enable(FtmBase, FALSE);
    d482:	2100      	movs	r1, #0
    d484:	9803      	ldr	r0, [sp, #12]
    d486:	f7fe fdb2 	bl	bfee <Ftm_Pwm_Ip_Enable>
    /* Configure debug mode */
    Ftm_Pwm_Ip_SetBdmMode(FtmBase, UserInstCfg->DebugMode);
    d48a:	9b00      	ldr	r3, [sp, #0]
    d48c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d48e:	4619      	mov	r1, r3
    d490:	9803      	ldr	r0, [sp, #12]
    d492:	f7ff f847 	bl	c524 <Ftm_Pwm_Ip_SetBdmMode>
    /* Configure Deadtime insertion */
    Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, (uint8)(UserInstCfg->DeadTimeValue & FTM_DEADTIME_DTVAL_MASK));
    d496:	9b00      	ldr	r3, [sp, #0]
    d498:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    d49a:	b2db      	uxtb	r3, r3
    d49c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    d4a0:	b2db      	uxtb	r3, r3
    d4a2:	4619      	mov	r1, r3
    d4a4:	9803      	ldr	r0, [sp, #12]
    d4a6:	f7fe ff87 	bl	c3b8 <Ftm_Pwm_Ip_SetDeadtimeCount>
    Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, (uint8)(UserInstCfg->DeadTimeValue >> FTM_DEADTIME_DTVAL_WIDTH));
    d4aa:	9b00      	ldr	r3, [sp, #0]
    d4ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    d4ae:	099b      	lsrs	r3, r3, #6
    d4b0:	b29b      	uxth	r3, r3
    d4b2:	b2db      	uxtb	r3, r3
    d4b4:	4619      	mov	r1, r3
    d4b6:	9803      	ldr	r0, [sp, #12]
    d4b8:	f7fe ffa2 	bl	c400 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    Ftm_Pwm_Ip_SetDeadtimePrescaler(FtmBase, UserInstCfg->DeadTimePs);
    d4bc:	9b00      	ldr	r3, [sp, #0]
    d4be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    d4c0:	4619      	mov	r1, r3
    d4c2:	9803      	ldr	r0, [sp, #12]
    d4c4:	f7fe ff8b 	bl	c3de <Ftm_Pwm_Ip_SetDeadtimePrescaler>
}
    d4c8:	bf00      	nop
    d4ca:	b005      	add	sp, #20
    d4cc:	f85d fb04 	ldr.w	pc, [sp], #4
    d4d0:	00016494 	.word	0x00016494

0000d4d4 <Ftm_Pwm_Ip_InitInstance>:
 * Description   : Configures the FTM Instance in PWM mode and all general registers.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitInstance(uint8 Instance,
                                    const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    d4d4:	b500      	push	{lr}
    d4d6:	b085      	sub	sp, #20
    d4d8:	4603      	mov	r3, r0
    d4da:	9100      	str	r1, [sp, #0]
    d4dc:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d4e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d4e4:	4a39      	ldr	r2, [pc, #228]	; (d5cc <Ftm_Pwm_Ip_InitInstance+0xf8>)
    d4e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4ea:	9303      	str	r3, [sp, #12]

#if (defined(FTM_PWM_IP_SIM_AVAILABLE) && (FTM_PWM_IP_SIM_AVAILABLE == STD_ON))
    Ftm_Pwm_Ip_SimType * SimBase  = Ftm_Pwm_Ip_aSimBase[0U];
    d4ec:	4b38      	ldr	r3, [pc, #224]	; (d5d0 <Ftm_Pwm_Ip_InitInstance+0xfc>)
    d4ee:	9302      	str	r3, [sp, #8]
#ifdef MCAL_ENABLE_USER_MODE_SUPPORT
    /* The FTM channel output state is retained when the channel is in output mode.*/
    OsIf_Trusted_Call2params(Ftm_Pwm_Ip_SetSimOutputBufferEn, SimBase, Instance);
#else   
    /* The FTM channel output state is retained when the channel is in output mode.*/
    Ftm_Pwm_Ip_SetSimOutputBufferEn(SimBase, Instance);
    d4f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d4f4:	4619      	mov	r1, r3
    d4f6:	9802      	ldr	r0, [sp, #8]
    d4f8:	f7ff fd20 	bl	cf3c <Ftm_Pwm_Ip_SetSimOutputBufferEn>
#endif
#endif

    Ftm_Pwm_Ip_ResetAndFirstConfigure(Instance, UserInstCfg);
    d4fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d500:	9900      	ldr	r1, [sp, #0]
    d502:	4618      	mov	r0, r3
    d504:	f7ff ff9c 	bl	d440 <Ftm_Pwm_Ip_ResetAndFirstConfigure>

    /* Configure the synchronization and reload points */
    (void)Ftm_Pwm_Ip_UpdateSync(Instance, UserInstCfg->SyncCfg);
    d508:	9b00      	ldr	r3, [sp, #0]
    d50a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    d50c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d510:	4611      	mov	r1, r2
    d512:	4618      	mov	r0, r3
    d514:	f7ff ff04 	bl	d320 <Ftm_Pwm_Ip_UpdateSync>

    /* Configure PWM period */
    Ftm_Pwm_Ip_SetCounterInitVal(FtmBase, 0x00U);
    d518:	2100      	movs	r1, #0
    d51a:	9803      	ldr	r0, [sp, #12]
    d51c:	f7fe fd56 	bl	bfcc <Ftm_Pwm_Ip_SetCounterInitVal>

    Ftm_Pwm_Ip_aPeriod[Instance] = UserInstCfg->PwmPeriod;
    d520:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d524:	9a00      	ldr	r2, [sp, #0]
    d526:	8e91      	ldrh	r1, [r2, #52]	; 0x34
    d528:	4a2a      	ldr	r2, [pc, #168]	; (d5d4 <Ftm_Pwm_Ip_InitInstance+0x100>)
    d52a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    Ftm_Pwm_Ip_aClockSource[Instance] = UserInstCfg->ClkSrc;
    d52e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d532:	9a00      	ldr	r2, [sp, #0]
    d534:	6812      	ldr	r2, [r2, #0]
    d536:	4928      	ldr	r1, [pc, #160]	; (d5d8 <Ftm_Pwm_Ip_InitInstance+0x104>)
    d538:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    Ftm_Pwm_Ip_aClockPrescaler[Instance] = UserInstCfg->ClkPs;
    d53c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d540:	9a00      	ldr	r2, [sp, #0]
    d542:	6852      	ldr	r2, [r2, #4]
    d544:	4925      	ldr	r1, [pc, #148]	; (d5dc <Ftm_Pwm_Ip_InitInstance+0x108>)
    d546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    Ftm_Pwm_Ip_aAlternateClockPrescaler[Instance] = UserInstCfg->AlternateClkPs;
    d54a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d54e:	9a00      	ldr	r2, [sp, #0]
    d550:	6892      	ldr	r2, [r2, #8]
    d552:	4923      	ldr	r1, [pc, #140]	; (d5e0 <Ftm_Pwm_Ip_InitInstance+0x10c>)
    d554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if (TRUE == UserInstCfg->OverflowIrqEn)
    d558:	9b00      	ldr	r3, [sp, #0]
    d55a:	7c1b      	ldrb	r3, [r3, #16]
    d55c:	2b00      	cmp	r3, #0
    d55e:	d00e      	beq.n	d57e <Ftm_Pwm_Ip_InitInstance+0xaa>
    {
        Ftm_Pwm_Ip_pOverflowIrqCallback[Instance].FunctionCallback = UserInstCfg->OverflowCb.FunctionCallback;
    d560:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d564:	9a00      	ldr	r2, [sp, #0]
    d566:	6952      	ldr	r2, [r2, #20]
    d568:	491e      	ldr	r1, [pc, #120]	; (d5e4 <Ftm_Pwm_Ip_InitInstance+0x110>)
    d56a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        Ftm_Pwm_Ip_pOverflowIrqCallback[Instance].CbParam = UserInstCfg->OverflowCb.CbParam;
    d56e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d572:	9a00      	ldr	r2, [sp, #0]
    d574:	6992      	ldr	r2, [r2, #24]
    d576:	491b      	ldr	r1, [pc, #108]	; (d5e4 <Ftm_Pwm_Ip_InitInstance+0x110>)
    d578:	00db      	lsls	r3, r3, #3
    d57a:	440b      	add	r3, r1
    d57c:	605a      	str	r2, [r3, #4]
        Ftm_Pwm_Ip_pReloadIrqCallback[Instance].FunctionCallback = UserInstCfg->ReloadCb.FunctionCallback;
        Ftm_Pwm_Ip_pReloadIrqCallback[Instance].CbParam = UserInstCfg->ReloadCb.CbParam;
    }
#endif    

    if (FTM_PWM_IP_CENTER_ALIGNED == UserInstCfg->CntMode)
    d57e:	9b00      	ldr	r3, [sp, #0]
    d580:	68db      	ldr	r3, [r3, #12]
    d582:	2b01      	cmp	r3, #1
    d584:	d108      	bne.n	d598 <Ftm_Pwm_Ip_InitInstance+0xc4>
    {
        /* For Center Aligned mode MOD register should be divided by 2. Period is 2 * (MOD − CNTIN) */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(UserInstCfg->PwmPeriod >> 1U));
    d586:	9b00      	ldr	r3, [sp, #0]
    d588:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    d58a:	085b      	lsrs	r3, r3, #1
    d58c:	b29b      	uxth	r3, r3
    d58e:	4619      	mov	r1, r3
    d590:	9803      	ldr	r0, [sp, #12]
    d592:	f7fe fbe3 	bl	bd5c <Ftm_Pwm_Ip_SetMod>
    d596:	e007      	b.n	d5a8 <Ftm_Pwm_Ip_InitInstance+0xd4>
    }
    else
    {
        /* For Edge Aligned mode period is determined by: MOD-CNTIN+1 */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(UserInstCfg->PwmPeriod - 1U));
    d598:	9b00      	ldr	r3, [sp, #0]
    d59a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    d59c:	3b01      	subs	r3, #1
    d59e:	b29b      	uxth	r3, r3
    d5a0:	4619      	mov	r1, r3
    d5a2:	9803      	ldr	r0, [sp, #12]
    d5a4:	f7fe fbda 	bl	bd5c <Ftm_Pwm_Ip_SetMod>
    /* Configure PWM period dither */
    Ftm_Pwm_Ip_SetModFracVal(FtmBase, UserInstCfg->PwmPeriodDither);
#endif

    /* Configure Initialization feature */
    Ftm_Pwm_Ip_SetInitTriggerCmd(FtmBase, UserInstCfg->InitTriggerEn);
    d5a8:	9b00      	ldr	r3, [sp, #0]
    d5aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    d5ae:	4619      	mov	r1, r3
    d5b0:	9803      	ldr	r0, [sp, #12]
    d5b2:	f7fe ff39 	bl	c428 <Ftm_Pwm_Ip_SetInitTriggerCmd>
#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
    Ftm_Pwm_Ip_SetInitTriggerMode(FtmBase, UserInstCfg->InitTrigMode);
    d5b6:	9b00      	ldr	r3, [sp, #0]
    d5b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    d5ba:	4619      	mov	r1, r3
    d5bc:	9803      	ldr	r0, [sp, #12]
    d5be:	f7fe ffc3 	bl	c548 <Ftm_Pwm_Ip_SetInitTriggerMode>
#endif
}
    d5c2:	bf00      	nop
    d5c4:	b005      	add	sp, #20
    d5c6:	f85d fb04 	ldr.w	pc, [sp], #4
    d5ca:	bf00      	nop
    d5cc:	00016494 	.word	0x00016494
    d5d0:	40048000 	.word	0x40048000
    d5d4:	1fff8e14 	.word	0x1fff8e14
    d5d8:	1fff910c 	.word	0x1fff910c
    d5dc:	1fff911c 	.word	0x1fff911c
    d5e0:	1fff912c 	.word	0x1fff912c
    d5e4:	1fff8fbc 	.word	0x1fff8fbc

0000d5e8 <Ftm_Pwm_Ip_InitInstanceStart>:
 * Description   : Configures the FTM clock and pre-scaler, enable FTM mode
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitInstanceStart(uint8 Instance,
                                         const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    d5e8:	b500      	push	{lr}
    d5ea:	b085      	sub	sp, #20
    d5ec:	4603      	mov	r3, r0
    d5ee:	9100      	str	r1, [sp, #0]
    d5f0:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d5f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d5f8:	4a1a      	ldr	r2, [pc, #104]	; (d664 <Ftm_Pwm_Ip_InitInstanceStart+0x7c>)
    d5fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5fe:	9303      	str	r3, [sp, #12]
    DevAssert(NULL_PTR != UserInstCfg);
#endif

#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    /* Set Fault Input Filter Value */  
    Ftm_Pwm_Ip_SetFaultFilterValue(FtmBase, UserInstCfg->FaultInFilter);
    d600:	9b00      	ldr	r3, [sp, #0]
    d602:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    d606:	4619      	mov	r1, r3
    d608:	9803      	ldr	r0, [sp, #12]
    d60a:	f7ff fc03 	bl	ce14 <Ftm_Pwm_Ip_SetFaultFilterValue>
    /* Set Fault output state */  
    Ftm_Pwm_Ip_SetFaultOutputState(FtmBase, UserInstCfg->FaultOutState);
    d60e:	9b00      	ldr	r3, [sp, #0]
    d610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    d612:	4619      	mov	r1, r3
    d614:	9803      	ldr	r0, [sp, #12]
    d616:	f7ff fc11 	bl	ce3c <Ftm_Pwm_Ip_SetFaultOutputState>
    /* Defines the FTM fault control mode */
    Ftm_Pwm_Ip_SetFaultControlMode(FtmBase, UserInstCfg->FaultCtrMode);
    d61a:	9b00      	ldr	r3, [sp, #0]
    d61c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    d61e:	4619      	mov	r1, r3
    d620:	9803      	ldr	r0, [sp, #12]
    d622:	f7ff fb7a 	bl	cd1a <Ftm_Pwm_Ip_SetFaultControlMode>
#endif

    /* Enable FTM mode */
    Ftm_Pwm_Ip_Enable(FtmBase, TRUE);
    d626:	2101      	movs	r1, #1
    d628:	9803      	ldr	r0, [sp, #12]
    d62a:	f7fe fce0 	bl	bfee <Ftm_Pwm_Ip_Enable>

    Ftm_Pwm_Ip_SetPwmSyncMode(FtmBase, TRUE);
    d62e:	2101      	movs	r1, #1
    d630:	9803      	ldr	r0, [sp, #12]
    d632:	f7fe fcf2 	bl	c01a <Ftm_Pwm_Ip_SetPwmSyncMode>

    /* Configure the clock prescaler */
    Ftm_Pwm_Ip_SetClockPs(FtmBase, UserInstCfg->ClkPs);
    d636:	9b00      	ldr	r3, [sp, #0]
    d638:	685b      	ldr	r3, [r3, #4]
    d63a:	4619      	mov	r1, r3
    d63c:	9803      	ldr	r0, [sp, #12]
    d63e:	f7fe fb03 	bl	bc48 <Ftm_Pwm_Ip_SetClockPs>
    /* Configure the clock source */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, UserInstCfg->ClkSrc);
    d642:	9b00      	ldr	r3, [sp, #0]
    d644:	681b      	ldr	r3, [r3, #0]
    d646:	4619      	mov	r1, r3
    d648:	9803      	ldr	r0, [sp, #12]
    d64a:	f7fe fb0d 	bl	bc68 <Ftm_Pwm_Ip_SetClockSource>
    /* Confirm the instance is active */
    Ftm_Pwm_Ip_aInstanceState[Instance] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    d64e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d652:	4a05      	ldr	r2, [pc, #20]	; (d668 <Ftm_Pwm_Ip_InitInstanceStart+0x80>)
    d654:	2101      	movs	r1, #1
    d656:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    d65a:	bf00      	nop
    d65c:	b005      	add	sp, #20
    d65e:	f85d fb04 	ldr.w	pc, [sp], #4
    d662:	bf00      	nop
    d664:	00016494 	.word	0x00016494
    d668:	1fff8fdc 	.word	0x1fff8fdc

0000d66c <Ftm_Pwm_Ip_ConfigurePairedChannel>:

static void Ftm_Pwm_Ip_ConfigurePairedChannel(uint8 Instance, const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    d66c:	b500      	push	{lr}
    d66e:	b085      	sub	sp, #20
    d670:	4603      	mov	r3, r0
    d672:	9100      	str	r1, [sp, #0]
    d674:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d678:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d67c:	4a37      	ldr	r2, [pc, #220]	; (d75c <Ftm_Pwm_Ip_ConfigurePairedChannel+0xf0>)
    d67e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d682:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = 0U;
    d684:	2300      	movs	r3, #0
    d686:	f88d 300b 	strb.w	r3, [sp, #11]
    uint8 ChPairId = 0U;
    d68a:	2300      	movs	r3, #0
    d68c:	f88d 300a 	strb.w	r3, [sp, #10]
    
    /* Configure the PWM channel */
    ChannelId = UserChCfg->ChannelId;
    d690:	9b00      	ldr	r3, [sp, #0]
    d692:	781b      	ldrb	r3, [r3, #0]
    d694:	f88d 300b 	strb.w	r3, [sp, #11]
    ChPairId =  (uint8)(ChannelId >> 1U);
    d698:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d69c:	085b      	lsrs	r3, r3, #1
    d69e:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Enable sync control for channels*/
    Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(FtmBase, ChPairId, TRUE);
    d6a2:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d6a6:	2201      	movs	r2, #1
    d6a8:	4619      	mov	r1, r3
    d6aa:	9803      	ldr	r0, [sp, #12]
    d6ac:	f7fe fe36 	bl	c31c <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    /* Enables the fault control in pair of channels */
    Ftm_Pwm_Ip_SetDualChFaultCtr(FtmBase, ChPairId, TRUE);
    d6b0:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d6b4:	2201      	movs	r2, #1
    d6b6:	4619      	mov	r1, r3
    d6b8:	9803      	ldr	r0, [sp, #12]
    d6ba:	f7ff fb63 	bl	cd84 <Ftm_Pwm_Ip_SetDualChFaultCtr>
#endif
    /* Configure Paired channel for combined/mCombined modes */
    if ((FTM_PWM_IP_MODE_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    d6be:	9b00      	ldr	r3, [sp, #0]
    d6c0:	685b      	ldr	r3, [r3, #4]
    d6c2:	2b22      	cmp	r3, #34	; 0x22
    d6c4:	d003      	beq.n	d6ce <Ftm_Pwm_Ip_ConfigurePairedChannel+0x62>
        (FTM_PWM_IP_MODE_COMBINE_LOW == UserChCfg->ChannelMode))
    d6c6:	9b00      	ldr	r3, [sp, #0]
    d6c8:	685b      	ldr	r3, [r3, #4]
    if ((FTM_PWM_IP_MODE_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    d6ca:	2b21      	cmp	r3, #33	; 0x21
    d6cc:	d113      	bne.n	d6f6 <Ftm_Pwm_Ip_ConfigurePairedChannel+0x8a>
    {
        /* Configure ELSA/ELSB for an odd channel*/
        Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->ChannelMode);
    d6ce:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d6d2:	005b      	lsls	r3, r3, #1
    d6d4:	b2db      	uxtb	r3, r3
    d6d6:	3301      	adds	r3, #1
    d6d8:	b2d9      	uxtb	r1, r3
    d6da:	9b00      	ldr	r3, [sp, #0]
    d6dc:	685b      	ldr	r3, [r3, #4]
    d6de:	461a      	mov	r2, r3
    d6e0:	9803      	ldr	r0, [sp, #12]
    d6e2:	f7fe fb76 	bl	bdd2 <Ftm_Pwm_Ip_SetChnEdgeLevel>
        /* Enable State of channel pair output combine mode */
        Ftm_Pwm_Ip_SetDualChnCombineCmd(FtmBase, ChPairId, TRUE);
    d6e6:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d6ea:	2201      	movs	r2, #1
    d6ec:	4619      	mov	r1, r3
    d6ee:	9803      	ldr	r0, [sp, #12]
    d6f0:	f7fe fd89 	bl	c206 <Ftm_Pwm_Ip_SetDualChnCombineCmd>
    d6f4:	e021      	b.n	d73a <Ftm_Pwm_Ip_ConfigurePairedChannel+0xce>
    }
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
    else if ((FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    d6f6:	9b00      	ldr	r3, [sp, #0]
    d6f8:	685b      	ldr	r3, [r3, #4]
    d6fa:	2b62      	cmp	r3, #98	; 0x62
    d6fc:	d003      	beq.n	d706 <Ftm_Pwm_Ip_ConfigurePairedChannel+0x9a>
             (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW == UserChCfg->ChannelMode))
    d6fe:	9b00      	ldr	r3, [sp, #0]
    d700:	685b      	ldr	r3, [r3, #4]
    else if ((FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    d702:	2b61      	cmp	r3, #97	; 0x61
    d704:	d119      	bne.n	d73a <Ftm_Pwm_Ip_ConfigurePairedChannel+0xce>
    {
        /* Configure ELSA/ELSB for an odd channel*/
        Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->ChannelMode);
    d706:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d70a:	005b      	lsls	r3, r3, #1
    d70c:	b2db      	uxtb	r3, r3
    d70e:	3301      	adds	r3, #1
    d710:	b2d9      	uxtb	r1, r3
    d712:	9b00      	ldr	r3, [sp, #0]
    d714:	685b      	ldr	r3, [r3, #4]
    d716:	461a      	mov	r2, r3
    d718:	9803      	ldr	r0, [sp, #12]
    d71a:	f7fe fb5a 	bl	bdd2 <Ftm_Pwm_Ip_SetChnEdgeLevel>
        /* Enable State of channel pair output combine mode */
        Ftm_Pwm_Ip_SetDualChnCombineCmd(FtmBase, ChPairId, TRUE);
    d71e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d722:	2201      	movs	r2, #1
    d724:	4619      	mov	r1, r3
    d726:	9803      	ldr	r0, [sp, #12]
    d728:	f7fe fd6d 	bl	c206 <Ftm_Pwm_Ip_SetDualChnCombineCmd>
        /* Enables the FTM peripheral timer channel modified combine mode.*/
        Ftm_Pwm_Ip_SetDualChnMCombineCmd(FtmBase, ChPairId, TRUE);
    d72c:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d730:	2201      	movs	r2, #1
    d732:	4619      	mov	r1, r3
    d734:	9803      	ldr	r0, [sp, #12]
    d736:	f7fe fe18 	bl	c36a <Ftm_Pwm_Ip_SetDualChnMCombineCmd>
    {
        /* Do Nothing */
    }

    /* Configure paired channel and pair */
    if (NULL_PTR != UserChCfg->PairCfg)
    d73a:	9b00      	ldr	r3, [sp, #0]
    d73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d73e:	2b00      	cmp	r3, #0
    d740:	d007      	beq.n	d752 <Ftm_Pwm_Ip_ConfigurePairedChannel+0xe6>
    {
        Ftm_Pwm_Ip_InitPair(Instance, UserChCfg->PairCfg);
    d742:	9b00      	ldr	r3, [sp, #0]
    d744:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    d746:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d74a:	4611      	mov	r1, r2
    d74c:	4618      	mov	r0, r3
    d74e:	f7ff fc47 	bl	cfe0 <Ftm_Pwm_Ip_InitPair>
        {
            Ftm_Pwm_Ip_SetChnMatchFracVal(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->DutyCycleDither);
        }
#endif
    }
}
    d752:	bf00      	nop
    d754:	b005      	add	sp, #20
    d756:	f85d fb04 	ldr.w	pc, [sp], #4
    d75a:	bf00      	nop
    d75c:	00016494 	.word	0x00016494

0000d760 <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl>:

static void Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl(uint8 Instance, const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    d760:	b500      	push	{lr}
    d762:	b085      	sub	sp, #20
    d764:	4603      	mov	r3, r0
    d766:	9100      	str	r1, [sp, #0]
    d768:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d76c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d770:	4a15      	ldr	r2, [pc, #84]	; (d7c8 <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl+0x68>)
    d772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d776:	9303      	str	r3, [sp, #12]

    /* Configure External Trigger */
    Ftm_Pwm_Ip_SetChnTriggerCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->ExtTrigEn);
    d778:	9b00      	ldr	r3, [sp, #0]
    d77a:	7819      	ldrb	r1, [r3, #0]
    d77c:	9b00      	ldr	r3, [sp, #0]
    d77e:	7ddb      	ldrb	r3, [r3, #23]
    d780:	461a      	mov	r2, r3
    d782:	9803      	ldr	r0, [sp, #12]
    d784:	f7ff fa8b 	bl	cc9e <Ftm_Pwm_Ip_SetChnTriggerCmd>

#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
    /* Configure Ch Match Reload point */
    Ftm_Pwm_Ip_SetPwmLoadChnSelCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->ChMatchLoadEn);
    d788:	9b00      	ldr	r3, [sp, #0]
    d78a:	7819      	ldrb	r1, [r3, #0]
    d78c:	9b00      	ldr	r3, [sp, #0]
    d78e:	7e1b      	ldrb	r3, [r3, #24]
    d790:	461a      	mov	r2, r3
    d792:	9803      	ldr	r0, [sp, #12]
    d794:	f7ff f8ba 	bl	c90c <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd>
#endif

    /* Configure  Software Output Control Enable */
    Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->SwControlEn);
    d798:	9b00      	ldr	r3, [sp, #0]
    d79a:	7819      	ldrb	r1, [r3, #0]
    d79c:	9b00      	ldr	r3, [sp, #0]
    d79e:	7d5b      	ldrb	r3, [r3, #21]
    d7a0:	461a      	mov	r2, r3
    d7a2:	9803      	ldr	r0, [sp, #12]
    d7a4:	f7ff f87c 	bl	c8a0 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd>

    /* Configure Channel Software Output Control Value */
    Ftm_Pwm_Ip_SetChnSoftwareCtrlVal(FtmBase, UserChCfg->ChannelId, UserChCfg->SwControlVal);
    d7a8:	9b00      	ldr	r3, [sp, #0]
    d7aa:	7819      	ldrb	r1, [r3, #0]
    d7ac:	9b00      	ldr	r3, [sp, #0]
    d7ae:	7d9b      	ldrb	r3, [r3, #22]
    d7b0:	461a      	mov	r2, r3
    d7b2:	9803      	ldr	r0, [sp, #12]
    d7b4:	f7ff f834 	bl	c820 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal>

    /* Sync Write buffered registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    d7b8:	2101      	movs	r1, #1
    d7ba:	9803      	ldr	r0, [sp, #12]
    d7bc:	f7fe fcaa 	bl	c114 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    d7c0:	bf00      	nop
    d7c2:	b005      	add	sp, #20
    d7c4:	f85d fb04 	ldr.w	pc, [sp], #4
    d7c8:	00016494 	.word	0x00016494

0000d7cc <Ftm_Pwm_Ip_InitChannel>:
 * Description   : Configures the PWM signal for the ftm channel.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitChannel(uint8 Instance,
                                   const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    d7cc:	b500      	push	{lr}
    d7ce:	b085      	sub	sp, #20
    d7d0:	4603      	mov	r3, r0
    d7d2:	9100      	str	r1, [sp, #0]
    d7d4:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d7d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d7dc:	4a48      	ldr	r2, [pc, #288]	; (d900 <Ftm_Pwm_Ip_InitChannel+0x134>)
    d7de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7e2:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = 0U;
    d7e4:	2300      	movs	r3, #0
    d7e6:	f88d 300b 	strb.w	r3, [sp, #11]
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    DevAssert(NULL_PTR != UserChCfg);
#endif

    /* Configure the PWM channel */
    ChannelId = UserChCfg->ChannelId;
    d7ea:	9b00      	ldr	r3, [sp, #0]
    d7ec:	781b      	ldrb	r3, [r3, #0]
    d7ee:	f88d 300b 	strb.w	r3, [sp, #11]

#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
    Ftm_Pwm_Ip_aNotifIrq[Instance][ChannelId] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
#endif

    Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId] = UserChCfg->DutyCycle;
    d7f2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    d7f6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d7fa:	9900      	ldr	r1, [sp, #0]
    d7fc:	8b48      	ldrh	r0, [r1, #26]
    d7fe:	4941      	ldr	r1, [pc, #260]	; (d904 <Ftm_Pwm_Ip_InitChannel+0x138>)
    d800:	00d2      	lsls	r2, r2, #3
    d802:	4413      	add	r3, r2
    d804:	4602      	mov	r2, r0
    d806:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    Ftm_Pwm_Ip_aIdleState[Instance][ChannelId] = UserChCfg->InitOut;
    d80a:	f89d 1007 	ldrb.w	r1, [sp, #7]
    d80e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d812:	9a00      	ldr	r2, [sp, #0]
    d814:	69d2      	ldr	r2, [r2, #28]
    d816:	483c      	ldr	r0, [pc, #240]	; (d908 <Ftm_Pwm_Ip_InitChannel+0x13c>)
    d818:	00c9      	lsls	r1, r1, #3
    d81a:	440b      	add	r3, r1
    d81c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

    /* Configure POL bits */
    Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, ChannelId, UserChCfg->Polarity);
    d820:	9b00      	ldr	r3, [sp, #0]
    d822:	6a1a      	ldr	r2, [r3, #32]
    d824:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d828:	4619      	mov	r1, r3
    d82a:	9803      	ldr	r0, [sp, #12]
    d82c:	f7fe fe2e 	bl	c48c <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    /* Configure initial output state */
    Ftm_Pwm_Ip_SetChnOutputInitStateCmd(FtmBase, ChannelId, UserChCfg->InitOut);
    d830:	9b00      	ldr	r3, [sp, #0]
    d832:	69da      	ldr	r2, [r3, #28]
    d834:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d838:	4619      	mov	r1, r3
    d83a:	9803      	ldr	r0, [sp, #12]
    d83c:	f7fe fc80 	bl	c140 <Ftm_Pwm_Ip_SetChnOutputInitStateCmd>

    /* Configure Channel Mode */
    /* Configure ELSA/ELSB */
    Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, ChannelId, UserChCfg->ChannelMode);
    d840:	9b00      	ldr	r3, [sp, #0]
    d842:	685a      	ldr	r2, [r3, #4]
    d844:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d848:	4619      	mov	r1, r3
    d84a:	9803      	ldr	r0, [sp, #12]
    d84c:	f7fe fac1 	bl	bdd2 <Ftm_Pwm_Ip_SetChnEdgeLevel>
    /* Set MSB and MSA bits*/
    Ftm_Pwm_Ip_SetChnMSBAMode(FtmBase, ChannelId, UserChCfg->ChannelMode);
    d850:	9b00      	ldr	r3, [sp, #0]
    d852:	685a      	ldr	r2, [r3, #4]
    d854:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d858:	4619      	mov	r1, r3
    d85a:	9803      	ldr	r0, [sp, #12]
    d85c:	f7fe faf0 	bl	be40 <Ftm_Pwm_Ip_SetChnMSBAMode>

    Ftm_Pwm_Ip_ConfigurePairedChannel(Instance, UserChCfg);
    d860:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d864:	9900      	ldr	r1, [sp, #0]
    d866:	4618      	mov	r0, r3
    d868:	f7ff ff00 	bl	d66c <Ftm_Pwm_Ip_ConfigurePairedChannel>

    Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(Instance,
    d86c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    d870:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d874:	4923      	ldr	r1, [pc, #140]	; (d904 <Ftm_Pwm_Ip_InitChannel+0x138>)
    d876:	00d2      	lsls	r2, r2, #3
    d878:	4413      	add	r3, r2
    d87a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    d87e:	f89d 100b 	ldrb.w	r1, [sp, #11]
    d882:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d886:	2301      	movs	r3, #1
    d888:	f000 f9c0 	bl	dc0c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                         ChannelId,
                                         Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId],
                                         TRUE);

    Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl(Instance, UserChCfg);
    d88c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d890:	9900      	ldr	r1, [sp, #0]
    d892:	4618      	mov	r0, r3
    d894:	f7ff ff64 	bl	d760 <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl>
    }
#endif

#if (defined(FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE) && (FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE == STD_ON))
    /* Enable PWM output */
    if(TRUE == UserChCfg->ChOutputEn)
    d898:	9b00      	ldr	r3, [sp, #0]
    d89a:	7d1b      	ldrb	r3, [r3, #20]
    d89c:	2b00      	cmp	r3, #0
    d89e:	d005      	beq.n	d8ac <Ftm_Pwm_Ip_InitChannel+0xe0>
    {
        Ftm_Pwm_Ip_EnablePwmChannelOutputs(FtmBase, ChannelId);
    d8a0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d8a4:	4619      	mov	r1, r3
    d8a6:	9803      	ldr	r0, [sp, #12]
    d8a8:	f7fe fa35 	bl	bd16 <Ftm_Pwm_Ip_EnablePwmChannelOutputs>
    }
#endif
    Ftm_Pwm_Ip_aChannelState[Instance][ChannelId] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    d8ac:	f89d 2007 	ldrb.w	r2, [sp, #7]
    d8b0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d8b4:	4915      	ldr	r1, [pc, #84]	; (d90c <Ftm_Pwm_Ip_InitChannel+0x140>)
    d8b6:	00d2      	lsls	r2, r2, #3
    d8b8:	4413      	add	r3, r2
    d8ba:	2201      	movs	r2, #1
    d8bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if(TRUE == UserChCfg->ChIrqEn)
    d8c0:	9b00      	ldr	r3, [sp, #0]
    d8c2:	7a1b      	ldrb	r3, [r3, #8]
    d8c4:	2b00      	cmp	r3, #0
    d8c6:	d016      	beq.n	d8f6 <Ftm_Pwm_Ip_InitChannel+0x12a>
    {
        Ftm_Pwm_Ip_aChIrqCallbacks[Instance][ChannelId].FunctionCallback = UserChCfg->ChannelCb.FunctionCallback;
    d8c8:	f89d 1007 	ldrb.w	r1, [sp, #7]
    d8cc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d8d0:	9a00      	ldr	r2, [sp, #0]
    d8d2:	68d2      	ldr	r2, [r2, #12]
    d8d4:	480e      	ldr	r0, [pc, #56]	; (d910 <Ftm_Pwm_Ip_InitChannel+0x144>)
    d8d6:	00c9      	lsls	r1, r1, #3
    d8d8:	440b      	add	r3, r1
    d8da:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
        Ftm_Pwm_Ip_aChIrqCallbacks[Instance][ChannelId].CbParam          = UserChCfg->ChannelCb.CbParam;
    d8de:	f89d 1007 	ldrb.w	r1, [sp, #7]
    d8e2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d8e6:	9a00      	ldr	r2, [sp, #0]
    d8e8:	6912      	ldr	r2, [r2, #16]
    d8ea:	4809      	ldr	r0, [pc, #36]	; (d910 <Ftm_Pwm_Ip_InitChannel+0x144>)
    d8ec:	00c9      	lsls	r1, r1, #3
    d8ee:	440b      	add	r3, r1
    d8f0:	00db      	lsls	r3, r3, #3
    d8f2:	4403      	add	r3, r0
    d8f4:	605a      	str	r2, [r3, #4]
    }

}
    d8f6:	bf00      	nop
    d8f8:	b005      	add	sp, #20
    d8fa:	f85d fb04 	ldr.w	pc, [sp], #4
    d8fe:	bf00      	nop
    d900:	00016494 	.word	0x00016494
    d904:	1fff8e1c 	.word	0x1fff8e1c
    d908:	1fff908c 	.word	0x1fff908c
    d90c:	1fff8fec 	.word	0x1fff8fec
    d910:	1fff8ebc 	.word	0x1fff8ebc

0000d914 <Ftm_Pwm_Ip_DeInitInstance>:
 * Function Name : Ftm_Pwm_Ip_DeinitInstance
 * Description   : Stops all PWM channels.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DeInitInstance(uint8 Instance)
{
    d914:	b500      	push	{lr}
    d916:	b085      	sub	sp, #20
    d918:	4603      	mov	r3, r0
    d91a:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d91e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d922:	4a17      	ldr	r2, [pc, #92]	; (d980 <Ftm_Pwm_Ip_DeInitInstance+0x6c>)
    d924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d928:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    /* Stop the FTM counter */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
    d92a:	2100      	movs	r1, #0
    d92c:	9803      	ldr	r0, [sp, #12]
    d92e:	f7fe f99b 	bl	bc68 <Ftm_Pwm_Ip_SetClockSource>

    /* Clear the dead-time pre-scaler and value */
    Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, 0U);
    d932:	2100      	movs	r1, #0
    d934:	9803      	ldr	r0, [sp, #12]
    d936:	f7fe fd63 	bl	c400 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    Ftm_Pwm_Ip_SetDeadtimePrescaler(FtmBase, FTM_PWM_IP_DEADTIME_DIV_1);
    d93a:	2101      	movs	r1, #1
    d93c:	9803      	ldr	r0, [sp, #12]
    d93e:	f7fe fd4e 	bl	c3de <Ftm_Pwm_Ip_SetDeadtimePrescaler>
    Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, 0U);
    d942:	2100      	movs	r1, #0
    d944:	9803      	ldr	r0, [sp, #12]
    d946:	f7fe fd37 	bl	c3b8 <Ftm_Pwm_Ip_SetDeadtimeCount>

    /* Configure debug mode */
    Ftm_Pwm_Ip_SetBdmMode(FtmBase, FTM_PWM_IP_BDM_MODE_00);
    d94a:	2100      	movs	r1, #0
    d94c:	9803      	ldr	r0, [sp, #12]
    d94e:	f7fe fde9 	bl	c524 <Ftm_Pwm_Ip_SetBdmMode>
    /* Disable overflow interrupt */
    Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, FALSE);
    d952:	2100      	movs	r1, #0
    d954:	9803      	ldr	r0, [sp, #12]
    d956:	f7fe f9bc 	bl	bcd2 <Ftm_Pwm_Ip_SetTimerOverflowInt>
    /* Clear the module value of the registers */
    Ftm_Pwm_Ip_SetMod(FtmBase, 0U);
    d95a:	2100      	movs	r1, #0
    d95c:	9803      	ldr	r0, [sp, #12]
    d95e:	f7fe f9fd 	bl	bd5c <Ftm_Pwm_Ip_SetMod>
    Ftm_Pwm_Ip_SetCounter(FtmBase, 0U);
    d962:	2100      	movs	r1, #0
    d964:	9803      	ldr	r0, [sp, #12]
    d966:	f7fe f9e8 	bl	bd3a <Ftm_Pwm_Ip_SetCounter>
    /* Confirm the instance is inactive */
    Ftm_Pwm_Ip_aInstanceState[Instance] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_UNINIT;
    d96a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d96e:	4a05      	ldr	r2, [pc, #20]	; (d984 <Ftm_Pwm_Ip_DeInitInstance+0x70>)
    d970:	2100      	movs	r1, #0
    d972:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    /* Clear the UAA bit in REG_PROT */
    OsIf_Trusted_Call1param(Ftm_Pwm_Ip_ClrUserAccessAllowed, Instance);
#endif
#endif

}
    d976:	bf00      	nop
    d978:	b005      	add	sp, #20
    d97a:	f85d fb04 	ldr.w	pc, [sp], #4
    d97e:	bf00      	nop
    d980:	00016494 	.word	0x00016494
    d984:	1fff8fdc 	.word	0x1fff8fdc

0000d988 <Ftm_Pwm_Ip_DeInitChannel>:
 * Description   : Stops all PWM channels.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DeInitChannel(uint8 Instance,
                                     uint8 Channel)
{
    d988:	b500      	push	{lr}
    d98a:	b085      	sub	sp, #20
    d98c:	4603      	mov	r3, r0
    d98e:	460a      	mov	r2, r1
    d990:	f88d 3007 	strb.w	r3, [sp, #7]
    d994:	4613      	mov	r3, r2
    d996:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    d99a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d99e:	4a29      	ldr	r2, [pc, #164]	; (da44 <Ftm_Pwm_Ip_DeInitChannel+0xbc>)
    d9a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9a4:	9303      	str	r3, [sp, #12]
    uint8 PairId = (uint8)(Channel >> 1U);
    d9a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d9aa:	085b      	lsrs	r3, r3, #1
    d9ac:	f88d 300b 	strb.w	r3, [sp, #11]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
#endif

    /* Disable interrupts for given channel */
    Ftm_Pwm_Ip_DisableCmpIrq(Instance, Channel);
    d9b0:	f89d 2006 	ldrb.w	r2, [sp, #6]
    d9b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d9b8:	4611      	mov	r1, r2
    d9ba:	4618      	mov	r0, r3
    d9bc:	f7ff fb9e 	bl	d0fc <Ftm_Pwm_Ip_DisableCmpIrq>
    /* Set current channel channels to IDLE */
    Ftm_Pwm_Ip_SwOutputControl(Instance,
    d9c0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    d9c4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d9c8:	491f      	ldr	r1, [pc, #124]	; (da48 <Ftm_Pwm_Ip_DeInitChannel+0xc0>)
    d9ca:	00d2      	lsls	r2, r2, #3
    d9cc:	4413      	add	r3, r2
    d9ce:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    d9d2:	f89d 1006 	ldrb.w	r1, [sp, #6]
    d9d6:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d9da:	2301      	movs	r3, #1
    d9dc:	f000 fa4c 	bl	de78 <Ftm_Pwm_Ip_SwOutputControl>
                               Channel,
                               Ftm_Pwm_Ip_aIdleState[Instance][Channel],
                               TRUE);
    /* Clear SWSYNC bit - has to be cleared to generate SW trigger */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, FALSE);
    d9e0:	2100      	movs	r1, #0
    d9e2:	9803      	ldr	r0, [sp, #12]
    d9e4:	f7fe fb96 	bl	c114 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    /* OUTMASK register is updated with the value of its buffer only by the PWM synchronization */
    Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(FtmBase, TRUE);
    d9e8:	2101      	movs	r1, #1
    d9ea:	9803      	ldr	r0, [sp, #12]
    d9ec:	f7fe fb57 	bl	c09e <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>
    /* The software trigger activates the OUTMASK register synchronization */
    Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, TRUE);
    d9f0:	2101      	movs	r1, #1
    d9f2:	9803      	ldr	r0, [sp, #12]
    d9f4:	f7fe fe65 	bl	c6c2 <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
    /* Channel output is not masked. It continues to operate normally */
    Ftm_Pwm_Ip_SetChnOutputMask(FtmBase, Channel, FALSE);
    d9f8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d9fc:	2200      	movs	r2, #0
    d9fe:	4619      	mov	r1, r3
    da00:	9803      	ldr	r0, [sp, #12]
    da02:	f7fe fbbf 	bl	c184 <Ftm_Pwm_Ip_SetChnOutputMask>
    /* set SWSYNC bit - has to be cleared to generate SW trigger */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    da06:	2101      	movs	r1, #1
    da08:	9803      	ldr	r0, [sp, #12]
    da0a:	f7fe fb83 	bl	c114 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    /* Clear the type of notification for each channel (n) in paired channel*/
    Ftm_Pwm_Ip_aNotifIrq[Instance][(PairId * 2U)] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
    da0e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    da12:	f89d 300b 	ldrb.w	r3, [sp, #11]
    da16:	005b      	lsls	r3, r3, #1
    da18:	490c      	ldr	r1, [pc, #48]	; (da4c <Ftm_Pwm_Ip_DeInitChannel+0xc4>)
    da1a:	00d2      	lsls	r2, r2, #3
    da1c:	440a      	add	r2, r1
    da1e:	4413      	add	r3, r2
    da20:	2200      	movs	r2, #0
    da22:	701a      	strb	r2, [r3, #0]
    /* Clear the type of notification for each channel (n+1) in paired channel*/
    Ftm_Pwm_Ip_aNotifIrq[Instance][((PairId * 2U) + 1U)] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
    da24:	f89d 2007 	ldrb.w	r2, [sp, #7]
    da28:	f89d 300b 	ldrb.w	r3, [sp, #11]
    da2c:	005b      	lsls	r3, r3, #1
    da2e:	3301      	adds	r3, #1
    da30:	4906      	ldr	r1, [pc, #24]	; (da4c <Ftm_Pwm_Ip_DeInitChannel+0xc4>)
    da32:	00d2      	lsls	r2, r2, #3
    da34:	440a      	add	r2, r1
    da36:	4413      	add	r3, r2
    da38:	2200      	movs	r2, #0
    da3a:	701a      	strb	r2, [r3, #0]

}
    da3c:	bf00      	nop
    da3e:	b005      	add	sp, #20
    da40:	f85d fb04 	ldr.w	pc, [sp], #4
    da44:	00016494 	.word	0x00016494
    da48:	1fff908c 	.word	0x1fff908c
    da4c:	1fff906c 	.word	0x1fff906c

0000da50 <Ftm_Pwm_Ip_InitChFault>:
 * Description   : Configures the fault channels are available on the Pwm configuration.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitChFault(uint8 Instance,
                                   const Ftm_Pwm_Ip_FaultChCfgType * FaultChCfg)
{
    da50:	b500      	push	{lr}
    da52:	b085      	sub	sp, #20
    da54:	4603      	mov	r3, r0
    da56:	9100      	str	r1, [sp, #0]
    da58:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    da5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    da60:	4a15      	ldr	r2, [pc, #84]	; (dab8 <Ftm_Pwm_Ip_InitChFault+0x68>)
    da62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da66:	9303      	str	r3, [sp, #12]
    /* Set the fault inputs polarity. */
    Ftm_Pwm_Ip_SetFaultPolarity(FtmBase, FaultChCfg->FaultId, FaultChCfg->FaultPol);
    da68:	9b00      	ldr	r3, [sp, #0]
    da6a:	7819      	ldrb	r1, [r3, #0]
    da6c:	9b00      	ldr	r3, [sp, #0]
    da6e:	685b      	ldr	r3, [r3, #4]
    da70:	461a      	mov	r2, r3
    da72:	9803      	ldr	r0, [sp, #12]
    da74:	f7ff f9f6 	bl	ce64 <Ftm_Pwm_Ip_SetFaultPolarity>
    /* Enables/Disables the filter for the fault input. */
    Ftm_Pwm_Ip_SetFaultFilterEn(FtmBase, FaultChCfg->FaultId, FaultChCfg->FaultFilEn);
    da78:	9b00      	ldr	r3, [sp, #0]
    da7a:	7819      	ldrb	r1, [r3, #0]
    da7c:	9b00      	ldr	r3, [sp, #0]
    da7e:	7a1b      	ldrb	r3, [r3, #8]
    da80:	461a      	mov	r2, r3
    da82:	9803      	ldr	r0, [sp, #12]
    da84:	f7ff fa35 	bl	cef2 <Ftm_Pwm_Ip_SetFaultFilterEn>
    /* Enables/Disables the fault inputs. */
    Ftm_Pwm_Ip_SetFaultInputEn(FtmBase, FaultChCfg->FaultId, TRUE);
    da88:	9b00      	ldr	r3, [sp, #0]
    da8a:	781b      	ldrb	r3, [r3, #0]
    da8c:	2201      	movs	r2, #1
    da8e:	4619      	mov	r1, r3
    da90:	9803      	ldr	r0, [sp, #12]
    da92:	f7ff fa0a 	bl	ceaa <Ftm_Pwm_Ip_SetFaultInputEn>
    /* Fault Irq Callback*/
    Ftm_Pwm_Ip_pFaultIrqCallback[Instance][FaultChCfg->FaultId] = FaultChCfg->FaultCb;
    da96:	f89d 3007 	ldrb.w	r3, [sp, #7]
    da9a:	9a00      	ldr	r2, [sp, #0]
    da9c:	7812      	ldrb	r2, [r2, #0]
    da9e:	4610      	mov	r0, r2
    daa0:	9a00      	ldr	r2, [sp, #0]
    daa2:	68d2      	ldr	r2, [r2, #12]
    daa4:	4905      	ldr	r1, [pc, #20]	; (dabc <Ftm_Pwm_Ip_InitChFault+0x6c>)
    daa6:	009b      	lsls	r3, r3, #2
    daa8:	4403      	add	r3, r0
    daaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    daae:	bf00      	nop
    dab0:	b005      	add	sp, #20
    dab2:	f85d fb04 	ldr.w	pc, [sp], #4
    dab6:	bf00      	nop
    dab8:	00016494 	.word	0x00016494
    dabc:	1fff8e7c 	.word	0x1fff8e7c

0000dac0 <Ftm_Pwm_Ip_Init>:
 *
 * @implements Ftm_Pwm_Ip_Init_Activity
 */
void Ftm_Pwm_Ip_Init(uint8 Instance,
                     const Ftm_Pwm_Ip_UserCfgType * UserCfg)
{
    dac0:	b500      	push	{lr}
    dac2:	b085      	sub	sp, #20
    dac4:	4603      	mov	r3, r0
    dac6:	9100      	str	r1, [sp, #0]
    dac8:	f88d 3007 	strb.w	r3, [sp, #7]

    uint8 Index = 0U;
    dacc:	2300      	movs	r3, #0
    dace:	f88d 300f 	strb.w	r3, [sp, #15]
#endif

#ifdef ERR_IPV_FTM_ERR010856
#if ((STD_ON == ERR_IPV_FTM_ERR010856) && (STD_ON == FTM_PWM_IP_HAS_FAULT))
    /* Set a variable to indicate that a fault was not detected when initializing */
    Ftm_Pwm_Ip_u8FaultCheck = (uint8)0U;
    dad2:	4b29      	ldr	r3, [pc, #164]	; (db78 <Ftm_Pwm_Ip_Init+0xb8>)
    dad4:	2200      	movs	r2, #0
    dad6:	701a      	strb	r2, [r3, #0]
#endif
#endif
    /* Configure FTM Instance in PWM mode */
    Ftm_Pwm_Ip_InitInstance(Instance, UserCfg->InstanceCfg);
    dad8:	9b00      	ldr	r3, [sp, #0]
    dada:	681a      	ldr	r2, [r3, #0]
    dadc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dae0:	4611      	mov	r1, r2
    dae2:	4618      	mov	r0, r3
    dae4:	f7ff fcf6 	bl	d4d4 <Ftm_Pwm_Ip_InitInstance>

    /* Configure all channels in the user cfg */
    for (Index = 0; Index < UserCfg->NoOfConfiguredCh; Index++)
    dae8:	2300      	movs	r3, #0
    daea:	f88d 300f 	strb.w	r3, [sp, #15]
    daee:	e011      	b.n	db14 <Ftm_Pwm_Ip_Init+0x54>
    {
        /* Configure PWM channels */
        Ftm_Pwm_Ip_InitChannel(Instance, UserCfg->ConfiguredChArray[Index]);
    daf0:	9b00      	ldr	r3, [sp, #0]
    daf2:	685a      	ldr	r2, [r3, #4]
    daf4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    daf8:	009b      	lsls	r3, r3, #2
    dafa:	4413      	add	r3, r2
    dafc:	681a      	ldr	r2, [r3, #0]
    dafe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    db02:	4611      	mov	r1, r2
    db04:	4618      	mov	r0, r3
    db06:	f7ff fe61 	bl	d7cc <Ftm_Pwm_Ip_InitChannel>
    for (Index = 0; Index < UserCfg->NoOfConfiguredCh; Index++)
    db0a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    db0e:	3301      	adds	r3, #1
    db10:	f88d 300f 	strb.w	r3, [sp, #15]
    db14:	9b00      	ldr	r3, [sp, #0]
    db16:	7a1b      	ldrb	r3, [r3, #8]
    db18:	f89d 200f 	ldrb.w	r2, [sp, #15]
    db1c:	429a      	cmp	r2, r3
    db1e:	d3e7      	bcc.n	daf0 <Ftm_Pwm_Ip_Init+0x30>
    }

#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    if (UserCfg->NoOfFaultCfg > 0U)
    db20:	9b00      	ldr	r3, [sp, #0]
    db22:	7c1b      	ldrb	r3, [r3, #16]
    db24:	2b00      	cmp	r3, #0
    db26:	d01b      	beq.n	db60 <Ftm_Pwm_Ip_Init+0xa0>
    {
        for (Index = 0; Index < UserCfg->NoOfFaultCfg; Index++)
    db28:	2300      	movs	r3, #0
    db2a:	f88d 300f 	strb.w	r3, [sp, #15]
    db2e:	e011      	b.n	db54 <Ftm_Pwm_Ip_Init+0x94>
        {
            /* Configure fault channels */
            Ftm_Pwm_Ip_InitChFault(Instance, UserCfg->ConfiguredFaultArray[Index]);
    db30:	9b00      	ldr	r3, [sp, #0]
    db32:	68da      	ldr	r2, [r3, #12]
    db34:	f89d 300f 	ldrb.w	r3, [sp, #15]
    db38:	009b      	lsls	r3, r3, #2
    db3a:	4413      	add	r3, r2
    db3c:	681a      	ldr	r2, [r3, #0]
    db3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    db42:	4611      	mov	r1, r2
    db44:	4618      	mov	r0, r3
    db46:	f7ff ff83 	bl	da50 <Ftm_Pwm_Ip_InitChFault>
        for (Index = 0; Index < UserCfg->NoOfFaultCfg; Index++)
    db4a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    db4e:	3301      	adds	r3, #1
    db50:	f88d 300f 	strb.w	r3, [sp, #15]
    db54:	9b00      	ldr	r3, [sp, #0]
    db56:	7c1b      	ldrb	r3, [r3, #16]
    db58:	f89d 200f 	ldrb.w	r2, [sp, #15]
    db5c:	429a      	cmp	r2, r3
    db5e:	d3e7      	bcc.n	db30 <Ftm_Pwm_Ip_Init+0x70>
        }
    }
#endif

    Ftm_Pwm_Ip_InitInstanceStart(Instance, UserCfg->InstanceCfg);
    db60:	9b00      	ldr	r3, [sp, #0]
    db62:	681a      	ldr	r2, [r3, #0]
    db64:	f89d 3007 	ldrb.w	r3, [sp, #7]
    db68:	4611      	mov	r1, r2
    db6a:	4618      	mov	r0, r3
    db6c:	f7ff fd3c 	bl	d5e8 <Ftm_Pwm_Ip_InitInstanceStart>
}
    db70:	bf00      	nop
    db72:	b005      	add	sp, #20
    db74:	f85d fb04 	ldr.w	pc, [sp], #4
    db78:	1fff8e10 	.word	0x1fff8e10

0000db7c <Ftm_Pwm_Ip_DeInit>:
 * Firstly, Ftm_Pwm_Ip_Init must be called. Then this function will disables the FTM module.
 *
 * @implements Ftm_Pwm_Ip_DeInit_Activity
 */
void Ftm_Pwm_Ip_DeInit(uint8 Instance)
{
    db7c:	b500      	push	{lr}
    db7e:	b085      	sub	sp, #20
    db80:	4603      	mov	r3, r0
    db82:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    db86:	f89d 3007 	ldrb.w	r3, [sp, #7]
    db8a:	4a1e      	ldr	r2, [pc, #120]	; (dc04 <Ftm_Pwm_Ip_DeInit+0x88>)
    db8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db90:	9302      	str	r3, [sp, #8]
    uint8 ChannelId = 0U;
    db92:	2300      	movs	r3, #0
    db94:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    /* Reset all FTM register */
    Ftm_Pwm_Ip_Reset(FtmBase);
    db98:	9802      	ldr	r0, [sp, #8]
    db9a:	f7ff f80b 	bl	cbb4 <Ftm_Pwm_Ip_Reset>
    
    /* Configure all channels in the user cfg */
    for (ChannelId = 0U; ChannelId < FTM_PWM_IP_CHANNEL_COUNT; ChannelId++)
    db9e:	2300      	movs	r3, #0
    dba0:	f88d 300f 	strb.w	r3, [sp, #15]
    dba4:	e021      	b.n	dbea <Ftm_Pwm_Ip_DeInit+0x6e>
    {
        if (FTM_PWM_IP_CHANNEL_UNINIT != Ftm_Pwm_Ip_aChannelState[Instance][ChannelId])
    dba6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    dbaa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    dbae:	4916      	ldr	r1, [pc, #88]	; (dc08 <Ftm_Pwm_Ip_DeInit+0x8c>)
    dbb0:	00d2      	lsls	r2, r2, #3
    dbb2:	4413      	add	r3, r2
    dbb4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    dbb8:	2b00      	cmp	r3, #0
    dbba:	d011      	beq.n	dbe0 <Ftm_Pwm_Ip_DeInit+0x64>
        {
            /* De-Initialize FTM channels */
            Ftm_Pwm_Ip_DeInitChannel(Instance, ChannelId);
    dbbc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    dbc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dbc4:	4611      	mov	r1, r2
    dbc6:	4618      	mov	r0, r3
    dbc8:	f7ff fede 	bl	d988 <Ftm_Pwm_Ip_DeInitChannel>
            /* The channels is inactive */
            Ftm_Pwm_Ip_aChannelState[Instance][ChannelId] = FTM_PWM_IP_CHANNEL_UNINIT;
    dbcc:	f89d 2007 	ldrb.w	r2, [sp, #7]
    dbd0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    dbd4:	490c      	ldr	r1, [pc, #48]	; (dc08 <Ftm_Pwm_Ip_DeInit+0x8c>)
    dbd6:	00d2      	lsls	r2, r2, #3
    dbd8:	4413      	add	r3, r2
    dbda:	2200      	movs	r2, #0
    dbdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (ChannelId = 0U; ChannelId < FTM_PWM_IP_CHANNEL_COUNT; ChannelId++)
    dbe0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    dbe4:	3301      	adds	r3, #1
    dbe6:	f88d 300f 	strb.w	r3, [sp, #15]
    dbea:	f89d 300f 	ldrb.w	r3, [sp, #15]
    dbee:	2b07      	cmp	r3, #7
    dbf0:	d9d9      	bls.n	dba6 <Ftm_Pwm_Ip_DeInit+0x2a>
        }
    }
    /* De-Initialize FTM Instance */
    Ftm_Pwm_Ip_DeInitInstance(Instance);
    dbf2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dbf6:	4618      	mov	r0, r3
    dbf8:	f7ff fe8c 	bl	d914 <Ftm_Pwm_Ip_DeInitInstance>
}
    dbfc:	bf00      	nop
    dbfe:	b005      	add	sp, #20
    dc00:	f85d fb04 	ldr.w	pc, [sp], #4
    dc04:	00016494 	.word	0x00016494
    dc08:	1fff8fec 	.word	0x1fff8fec

0000dc0c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>:
 *END**************************************************************************/
void Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(uint8 Instance,
                                          uint8 Channel,
                                          uint16 DutyCycle,
                                          boolean SoftwareTrigger)
{
    dc0c:	b510      	push	{r4, lr}
    dc0e:	b088      	sub	sp, #32
    dc10:	4604      	mov	r4, r0
    dc12:	4608      	mov	r0, r1
    dc14:	4611      	mov	r1, r2
    dc16:	461a      	mov	r2, r3
    dc18:	4623      	mov	r3, r4
    dc1a:	f88d 300f 	strb.w	r3, [sp, #15]
    dc1e:	4603      	mov	r3, r0
    dc20:	f88d 300e 	strb.w	r3, [sp, #14]
    dc24:	460b      	mov	r3, r1
    dc26:	f8ad 300c 	strh.w	r3, [sp, #12]
    dc2a:	4613      	mov	r3, r2
    dc2c:	f88d 300b 	strb.w	r3, [sp, #11]

    const Ftm_Pwm_Ip_HwAddrType *const  FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    dc30:	f89d 300f 	ldrb.w	r3, [sp, #15]
    dc34:	4a54      	ldr	r2, [pc, #336]	; (dd88 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x17c>)
    dc36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc3a:	9307      	str	r3, [sp, #28]
    uint16 FirstEdge = DutyCycle;
    dc3c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    dc40:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint8 PairId = Channel >> 1U;
    dc44:	f89d 300e 	ldrb.w	r3, [sp, #14]
    dc48:	085b      	lsrs	r3, r3, #1
    dc4a:	f88d 3019 	strb.w	r3, [sp, #25]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00();
    dc4e:	f006 fc07 	bl	14460 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00>

    /* Stores the new duty cycle */
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycle;
    dc52:	f89d 200f 	ldrb.w	r2, [sp, #15]
    dc56:	f89d 300e 	ldrb.w	r3, [sp, #14]
    dc5a:	494c      	ldr	r1, [pc, #304]	; (dd8c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x180>)
    dc5c:	00d2      	lsls	r2, r2, #3
    dc5e:	4413      	add	r3, r2
    dc60:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    dc64:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    dc68:	f89d 300e 	ldrb.w	r3, [sp, #14]
    dc6c:	4619      	mov	r1, r3
    dc6e:	9807      	ldr	r0, [sp, #28]
    dc70:	f7fe feb0 	bl	c9d4 <Ftm_Pwm_Ip_GetChannelMode>
    dc74:	9005      	str	r0, [sp, #20]

#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
    Ftm_Pwm_Ip_CheckNotification(Instance, Channel);
#endif

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    dc76:	f89d 200f 	ldrb.w	r2, [sp, #15]
    dc7a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    dc7e:	4944      	ldr	r1, [pc, #272]	; (dd90 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x184>)
    dc80:	00d2      	lsls	r2, r2, #3
    dc82:	4413      	add	r3, r2
    dc84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    dc88:	2b02      	cmp	r3, #2
    dc8a:	d111      	bne.n	dcb0 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xa4>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    dc8c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    dc90:	f89d 300e 	ldrb.w	r3, [sp, #14]
    dc94:	493e      	ldr	r1, [pc, #248]	; (dd90 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x184>)
    dc96:	00d2      	lsls	r2, r2, #3
    dc98:	4413      	add	r3, r2
    dc9a:	2201      	movs	r2, #1
    dc9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
    dca0:	f89d 100e 	ldrb.w	r1, [sp, #14]
    dca4:	f89d 000f 	ldrb.w	r0, [sp, #15]
    dca8:	2300      	movs	r3, #0
    dcaa:	2200      	movs	r2, #0
    dcac:	f000 f8e4 	bl	de78 <Ftm_Pwm_Ip_SwOutputControl>
                                   Channel,
                                   FTM_PWM_IP_OUTPUT_STATE_LOW,
                                   FALSE);
    }

    if ((FTM_PWM_IP_MODE_EDGE_ALIGNED_HIGH   == ChMode) ||
    dcb0:	9b05      	ldr	r3, [sp, #20]
    dcb2:	2b0a      	cmp	r3, #10
    dcb4:	d008      	beq.n	dcc8 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xbc>
    dcb6:	9b05      	ldr	r3, [sp, #20]
    dcb8:	2b09      	cmp	r3, #9
    dcba:	d005      	beq.n	dcc8 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xbc>
        (FTM_PWM_IP_MODE_EDGE_ALIGNED_LOW    == ChMode) ||
    dcbc:	9b05      	ldr	r3, [sp, #20]
    dcbe:	2b12      	cmp	r3, #18
    dcc0:	d002      	beq.n	dcc8 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xbc>
        (FTM_PWM_IP_MODE_CENTER_ALIGNED_HIGH == ChMode) ||
    dcc2:	9b05      	ldr	r3, [sp, #20]
    dcc4:	2b11      	cmp	r3, #17
    dcc6:	d10c      	bne.n	dce2 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xd6>
        (FTM_PWM_IP_MODE_CENTER_ALIGNED_LOW  == ChMode))
    {
        /* Write CV registers and setup duty cycle and phase values */
        (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    dcc8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    dccc:	f89d 100e 	ldrb.w	r1, [sp, #14]
    dcd0:	f89d 000f 	ldrb.w	r0, [sp, #15]
    dcd4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dcd8:	9300      	str	r3, [sp, #0]
    dcda:	2300      	movs	r3, #0
    dcdc:	f000 f992 	bl	e004 <Ftm_Pwm_Ip_UpdatePwmChannel>
    dce0:	e04c      	b.n	dd7c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x170>
                                      Channel,
                                      FirstEdge,
                                      0U,
                                      SoftwareTrigger);
    }
    else if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    dce2:	9b05      	ldr	r3, [sp, #20]
    dce4:	2b22      	cmp	r3, #34	; 0x22
    dce6:	d008      	beq.n	dcfa <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xee>
    dce8:	9b05      	ldr	r3, [sp, #20]
    dcea:	2b62      	cmp	r3, #98	; 0x62
    dcec:	d005      	beq.n	dcfa <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xee>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
             ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    dcee:	9b05      	ldr	r3, [sp, #20]
    dcf0:	2b61      	cmp	r3, #97	; 0x61
    dcf2:	d002      	beq.n	dcfa <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xee>
             ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    dcf4:	9b05      	ldr	r3, [sp, #20]
    dcf6:	2b21      	cmp	r3, #33	; 0x21
    dcf8:	d140      	bne.n	dd7c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x170>
#endif
             ( FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))

    {
        if((uint16)0U == Ftm_Pwm_Ip_aPhaseShift[Instance][PairId])
    dcfa:	f89d 200f 	ldrb.w	r2, [sp, #15]
    dcfe:	f89d 3019 	ldrb.w	r3, [sp, #25]
    dd02:	4924      	ldr	r1, [pc, #144]	; (dd94 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x188>)
    dd04:	0092      	lsls	r2, r2, #2
    dd06:	4413      	add	r3, r2
    dd08:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    dd0c:	2b00      	cmp	r3, #0
    dd0e:	d10d      	bne.n	dd2c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x120>
        {
            /* Write CV registers and setup duty cycle and phase values */
            (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    dd10:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    dd14:	f89d 100e 	ldrb.w	r1, [sp, #14]
    dd18:	f89d 000f 	ldrb.w	r0, [sp, #15]
    dd1c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dd20:	9300      	str	r3, [sp, #0]
    dd22:	4613      	mov	r3, r2
    dd24:	2200      	movs	r2, #0
    dd26:	f000 f96d 	bl	e004 <Ftm_Pwm_Ip_UpdatePwmChannel>
    dd2a:	e027      	b.n	dd7c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x170>
                                               FirstEdge,
                                               SoftwareTrigger);
        }
        else
        {
            FirstEdge = Ftm_Pwm_Ip_CalculatePhaseShift(Instance, DutyCycle, Ftm_Pwm_Ip_aPhaseShift[Instance][PairId]);
    dd2c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    dd30:	f89d 3019 	ldrb.w	r3, [sp, #25]
    dd34:	4917      	ldr	r1, [pc, #92]	; (dd94 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x188>)
    dd36:	0092      	lsls	r2, r2, #2
    dd38:	4413      	add	r3, r2
    dd3a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    dd3e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    dd42:	f89d 300f 	ldrb.w	r3, [sp, #15]
    dd46:	4618      	mov	r0, r3
    dd48:	f7ff f90a 	bl	cf60 <Ftm_Pwm_Ip_CalculatePhaseShift>
    dd4c:	4603      	mov	r3, r0
    dd4e:	f8ad 301a 	strh.w	r3, [sp, #26]
            /* Write CV registers and setup duty cycle and phase values */
            (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    dd52:	f89d 200f 	ldrb.w	r2, [sp, #15]
    dd56:	f89d 3019 	ldrb.w	r3, [sp, #25]
    dd5a:	490e      	ldr	r1, [pc, #56]	; (dd94 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x188>)
    dd5c:	0092      	lsls	r2, r2, #2
    dd5e:	4413      	add	r3, r2
    dd60:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    dd64:	f8bd 401a 	ldrh.w	r4, [sp, #26]
    dd68:	f89d 100e 	ldrb.w	r1, [sp, #14]
    dd6c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    dd70:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dd74:	9300      	str	r3, [sp, #0]
    dd76:	4623      	mov	r3, r4
    dd78:	f000 f944 	bl	e004 <Ftm_Pwm_Ip_UpdatePwmChannel>
    else
    {
        /* Do Nothing */
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00();
    dd7c:	f006 fb9c 	bl	144b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00>

}
    dd80:	bf00      	nop
    dd82:	b008      	add	sp, #32
    dd84:	bd10      	pop	{r4, pc}
    dd86:	bf00      	nop
    dd88:	00016494 	.word	0x00016494
    dd8c:	1fff8e1c 	.word	0x1fff8e1c
    dd90:	1fff8fec 	.word	0x1fff8fec
    dd94:	1fff8e5c 	.word	0x1fff8e5c

0000dd98 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty>:
void Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(uint8 Instance,
                                       uint8 Channel,
                                       uint16 Period,
                                       uint16 DutyCycle,
                                       boolean SoftwareTrigger)
{
    dd98:	b510      	push	{r4, lr}
    dd9a:	b084      	sub	sp, #16
    dd9c:	4604      	mov	r4, r0
    dd9e:	4608      	mov	r0, r1
    dda0:	4611      	mov	r1, r2
    dda2:	461a      	mov	r2, r3
    dda4:	4623      	mov	r3, r4
    dda6:	f88d 3007 	strb.w	r3, [sp, #7]
    ddaa:	4603      	mov	r3, r0
    ddac:	f88d 3006 	strb.w	r3, [sp, #6]
    ddb0:	460b      	mov	r3, r1
    ddb2:	f8ad 3004 	strh.w	r3, [sp, #4]
    ddb6:	4613      	mov	r3, r2
    ddb8:	f8ad 3002 	strh.w	r3, [sp, #2]

    uint16 TempDutyCycle = 0U;
    ddbc:	2300      	movs	r3, #0
    ddbe:	f8ad 300e 	strh.w	r3, [sp, #14]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    ddc2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ddc6:	4a29      	ldr	r2, [pc, #164]	; (de6c <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xd4>)
    ddc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ddcc:	9302      	str	r3, [sp, #8]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01();
    ddce:	f006 fb99 	bl	14504 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01>

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    ddd2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    ddd6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ddda:	4925      	ldr	r1, [pc, #148]	; (de70 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xd8>)
    dddc:	00d2      	lsls	r2, r2, #3
    ddde:	4413      	add	r3, r2
    dde0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    dde4:	2b02      	cmp	r3, #2
    dde6:	d111      	bne.n	de0c <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0x74>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    dde8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    ddec:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ddf0:	491f      	ldr	r1, [pc, #124]	; (de70 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xd8>)
    ddf2:	00d2      	lsls	r2, r2, #3
    ddf4:	4413      	add	r3, r2
    ddf6:	2201      	movs	r2, #1
    ddf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
    ddfc:	f89d 1006 	ldrb.w	r1, [sp, #6]
    de00:	f89d 0007 	ldrb.w	r0, [sp, #7]
    de04:	2300      	movs	r3, #0
    de06:	2200      	movs	r2, #0
    de08:	f000 f836 	bl	de78 <Ftm_Pwm_Ip_SwOutputControl>
    else
    {
        /* Do Nothing */
    }

    (void) Ftm_Pwm_Ip_UpdatePwmPeriod(Instance,
    de0c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    de10:	f89d 3007 	ldrb.w	r3, [sp, #7]
    de14:	2200      	movs	r2, #0
    de16:	4618      	mov	r0, r3
    de18:	f000 f988 	bl	e12c <Ftm_Pwm_Ip_UpdatePwmPeriod>
                                      Period,
                                      FALSE);
    Ftm_Pwm_Ip_aPeriod[Instance] = Period;
    de1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    de20:	4914      	ldr	r1, [pc, #80]	; (de74 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xdc>)
    de22:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    de26:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    if (0U == Period)
    de2a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    de2e:	2b00      	cmp	r3, #0
    de30:	d103      	bne.n	de3a <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xa2>
    {
        TempDutyCycle = (uint16)0U;
    de32:	2300      	movs	r3, #0
    de34:	f8ad 300e 	strh.w	r3, [sp, #14]
    de38:	e003      	b.n	de42 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xaa>
    }
    else
    {
        TempDutyCycle = DutyCycle;
    de3a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    de3e:	f8ad 300e 	strh.w	r3, [sp, #14]
    }


    Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(Instance,
    de42:	f89d 3018 	ldrb.w	r3, [sp, #24]
    de46:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    de4a:	f89d 1006 	ldrb.w	r1, [sp, #6]
    de4e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    de52:	f7ff fedb 	bl	dc0c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                         Channel,
                                         TempDutyCycle,
                                         SoftwareTrigger);

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    de56:	f89d 3018 	ldrb.w	r3, [sp, #24]
    de5a:	4619      	mov	r1, r3
    de5c:	9802      	ldr	r0, [sp, #8]
    de5e:	f7fe f959 	bl	c114 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01();
    de62:	f006 fb7b 	bl	1455c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01>
}
    de66:	bf00      	nop
    de68:	b004      	add	sp, #16
    de6a:	bd10      	pop	{r4, pc}
    de6c:	00016494 	.word	0x00016494
    de70:	1fff8fec 	.word	0x1fff8fec
    de74:	1fff8e14 	.word	0x1fff8e14

0000de78 <Ftm_Pwm_Ip_SwOutputControl>:
 **/
void Ftm_Pwm_Ip_SwOutputControl(uint8 Instance,
                                uint8 Channel,
                                Ftm_Pwm_Ip_OutputStateType OutputState,
                                boolean ActiveState)
{
    de78:	b500      	push	{lr}
    de7a:	b089      	sub	sp, #36	; 0x24
    de7c:	9200      	str	r2, [sp, #0]
    de7e:	461a      	mov	r2, r3
    de80:	4603      	mov	r3, r0
    de82:	f88d 3007 	strb.w	r3, [sp, #7]
    de86:	460b      	mov	r3, r1
    de88:	f88d 3006 	strb.w	r3, [sp, #6]
    de8c:	4613      	mov	r3, r2
    de8e:	f88d 3005 	strb.w	r3, [sp, #5]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    de92:	f89d 3007 	ldrb.w	r3, [sp, #7]
    de96:	4a58      	ldr	r2, [pc, #352]	; (dff8 <Ftm_Pwm_Ip_SwOutputControl+0x180>)
    de98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de9c:	9305      	str	r3, [sp, #20]
    uint16 SwoCtrlRegVal = 0U;
    de9e:	2300      	movs	r3, #0
    dea0:	f8ad 301e 	strh.w	r3, [sp, #30]
    uint16 ChannelMask = 0U;
    dea4:	2300      	movs	r3, #0
    dea6:	f8ad 301c 	strh.w	r3, [sp, #28]
    uint16 SwoCtrlBitMask = 0U;
    deaa:	2300      	movs	r3, #0
    deac:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint16 TempPolVal = 0U;
    deb0:	2300      	movs	r3, #0
    deb2:	f8ad 3012 	strh.w	r3, [sp, #18]
    
    Ftm_Pwm_Ip_ChannelModeType ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    deb6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    deba:	4619      	mov	r1, r3
    debc:	9805      	ldr	r0, [sp, #20]
    debe:	f7fe fd89 	bl	c9d4 <Ftm_Pwm_Ip_GetChannelMode>
    dec2:	9003      	str	r0, [sp, #12]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif
    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    dec4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    dec8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    decc:	494b      	ldr	r1, [pc, #300]	; (dffc <Ftm_Pwm_Ip_SwOutputControl+0x184>)
    dece:	00d2      	lsls	r2, r2, #3
    ded0:	4413      	add	r3, r2
    ded2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    ded6:	2b02      	cmp	r3, #2
    ded8:	d109      	bne.n	deee <Ftm_Pwm_Ip_SwOutputControl+0x76>
    {
        Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = (uint16)0U;
    deda:	f89d 2007 	ldrb.w	r2, [sp, #7]
    dede:	f89d 3006 	ldrb.w	r3, [sp, #6]
    dee2:	4947      	ldr	r1, [pc, #284]	; (e000 <Ftm_Pwm_Ip_SwOutputControl+0x188>)
    dee4:	00d2      	lsls	r2, r2, #3
    dee6:	4413      	add	r3, r2
    dee8:	2200      	movs	r2, #0
    deea:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    else
    {
        /* Do Nothing */
    }

    SwoCtrlRegVal = Ftm_Pwm_Ip_GetSoftwareOutputControl(FtmBase);
    deee:	9805      	ldr	r0, [sp, #20]
    def0:	f7fe fd5f 	bl	c9b2 <Ftm_Pwm_Ip_GetSoftwareOutputControl>
    def4:	4603      	mov	r3, r0
    def6:	f8ad 301e 	strh.w	r3, [sp, #30]

    if ((FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    defa:	9b03      	ldr	r3, [sp, #12]
    defc:	2b22      	cmp	r3, #34	; 0x22
    defe:	d008      	beq.n	df12 <Ftm_Pwm_Ip_SwOutputControl+0x9a>
    df00:	9b03      	ldr	r3, [sp, #12]
    df02:	2b62      	cmp	r3, #98	; 0x62
    df04:	d005      	beq.n	df12 <Ftm_Pwm_Ip_SwOutputControl+0x9a>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    df06:	9b03      	ldr	r3, [sp, #12]
    df08:	2b61      	cmp	r3, #97	; 0x61
    df0a:	d002      	beq.n	df12 <Ftm_Pwm_Ip_SwOutputControl+0x9a>
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    df0c:	9b03      	ldr	r3, [sp, #12]
    df0e:	2b21      	cmp	r3, #33	; 0x21
    df10:	d103      	bne.n	df1a <Ftm_Pwm_Ip_SwOutputControl+0xa2>
#endif
        (FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))
    {
        /* Two consecutive bits (n and n+1) */
        ChannelMask = (uint16)3U;
    df12:	2303      	movs	r3, #3
    df14:	f8ad 301c 	strh.w	r3, [sp, #28]
    df18:	e002      	b.n	df20 <Ftm_Pwm_Ip_SwOutputControl+0xa8>
    }
    else
    {
        ChannelMask = (uint16)1U;
    df1a:	2301      	movs	r3, #1
    df1c:	f8ad 301c 	strh.w	r3, [sp, #28]
    }

    TempPolVal = (uint16)Ftm_Pwm_Ip_GetPolInstance(FtmBase) & (uint16)((uint32)ChannelMask << (uint16)Channel);
    df20:	9805      	ldr	r0, [sp, #20]
    df22:	f7fe fd4f 	bl	c9c4 <Ftm_Pwm_Ip_GetPolInstance>
    df26:	4603      	mov	r3, r0
    df28:	4619      	mov	r1, r3
    df2a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    df2e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    df32:	fa02 f303 	lsl.w	r3, r2, r3
    df36:	b29b      	uxth	r3, r3
    df38:	400b      	ands	r3, r1
    df3a:	f8ad 3012 	strh.w	r3, [sp, #18]

    /* Shift the polarity bit to match the output control value position (CHnOCV) in SWOCTRL register */
    TempPolVal = (uint16)((uint32)TempPolVal << FTM_SWOCTRL_CH0OCV_SHIFT);
    df3e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    df42:	021b      	lsls	r3, r3, #8
    df44:	f8ad 3012 	strh.w	r3, [sp, #18]

    /* Clear the CHnOCV bit(s) from the SwoCtrlRegVal for the given channel
       and next odd channel if phase-shifted or combined */
    SwoCtrlRegVal &= (uint16)(~((uint32)ChannelMask << ((uint16)Channel + FTM_SWOCTRL_CH0OCV_SHIFT)));
    df48:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    df4c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    df50:	3308      	adds	r3, #8
    df52:	fa02 f303 	lsl.w	r3, r2, r3
    df56:	b29b      	uxth	r3, r3
    df58:	43db      	mvns	r3, r3
    df5a:	b29a      	uxth	r2, r3
    df5c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    df60:	4013      	ands	r3, r2
    df62:	f8ad 301e 	strh.w	r3, [sp, #30]

     /* If software output control is enabled */
    if (TRUE == ActiveState)
    df66:	f89d 3005 	ldrb.w	r3, [sp, #5]
    df6a:	2b00      	cmp	r3, #0
    df6c:	d027      	beq.n	dfbe <Ftm_Pwm_Ip_SwOutputControl+0x146>
    {
        if (FTM_PWM_IP_OUTPUT_STATE_HIGH == OutputState)
    df6e:	9b00      	ldr	r3, [sp, #0]
    df70:	2b01      	cmp	r3, #1
    df72:	d109      	bne.n	df88 <Ftm_Pwm_Ip_SwOutputControl+0x110>
        {
            /* Sw control on given channel was requested so corresponding channel bits will be set to "1" */
            SwoCtrlBitMask = (uint16)((uint32)ChannelMask << ((uint16)Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    df74:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    df78:	f89d 3006 	ldrb.w	r3, [sp, #6]
    df7c:	3308      	adds	r3, #8
    df7e:	fa02 f303 	lsl.w	r3, r2, r3
    df82:	f8ad 301a 	strh.w	r3, [sp, #26]
    df86:	e002      	b.n	df8e <Ftm_Pwm_Ip_SwOutputControl+0x116>
        }
        else
        {
            SwoCtrlBitMask = (uint16)0U;
    df88:	2300      	movs	r3, #0
    df8a:	f8ad 301a 	strh.w	r3, [sp, #26]
        }

        /* XOR between polarity bit(s) of the given channel register (shifted left by 8) and the desired sw output value
           will provide the correct values of the SWOCTRL*/
        SwoCtrlRegVal |= (SwoCtrlBitMask ^ TempPolVal);
    df8e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    df92:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    df96:	4053      	eors	r3, r2
    df98:	b29a      	uxth	r2, r3
    df9a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    df9e:	4313      	orrs	r3, r2
    dfa0:	f8ad 301e 	strh.w	r3, [sp, #30]

        /* Software output control is requested so CHnOC bit of given channel will be set */
        SwoCtrlRegVal |= (uint16)((uint32)ChannelMask << (uint16)Channel);
    dfa4:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    dfa8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    dfac:	fa02 f303 	lsl.w	r3, r2, r3
    dfb0:	b29a      	uxth	r2, r3
    dfb2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    dfb6:	4313      	orrs	r3, r2
    dfb8:	f8ad 301e 	strh.w	r3, [sp, #30]
    dfbc:	e00d      	b.n	dfda <Ftm_Pwm_Ip_SwOutputControl+0x162>
    }
    else
    {
        /* Software output control is disabled so CHnOC bit of given channel will be cleared */
        SwoCtrlRegVal &= (uint16)(~((uint32)ChannelMask << (uint16)Channel));
    dfbe:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    dfc2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    dfc6:	fa02 f303 	lsl.w	r3, r2, r3
    dfca:	b29b      	uxth	r3, r3
    dfcc:	43db      	mvns	r3, r3
    dfce:	b29a      	uxth	r2, r3
    dfd0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    dfd4:	4013      	ands	r3, r2
    dfd6:	f8ad 301e 	strh.w	r3, [sp, #30]
    }

    /* Write temporary variable into SWOCTRL register */
    Ftm_Pwm_Ip_SoftwareOutputControl(FtmBase, SwoCtrlRegVal);
    dfda:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    dfde:	4619      	mov	r1, r3
    dfe0:	9805      	ldr	r0, [sp, #20]
    dfe2:	f7fe fc86 	bl	c8f2 <Ftm_Pwm_Ip_SoftwareOutputControl>

    /* Use software synchronization to update SWOCTRL register immediately */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    dfe6:	2101      	movs	r1, #1
    dfe8:	9805      	ldr	r0, [sp, #20]
    dfea:	f7fe f893 	bl	c114 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    dfee:	bf00      	nop
    dff0:	b009      	add	sp, #36	; 0x24
    dff2:	f85d fb04 	ldr.w	pc, [sp], #4
    dff6:	bf00      	nop
    dff8:	00016494 	.word	0x00016494
    dffc:	1fff8fec 	.word	0x1fff8fec
    e000:	1fff8e1c 	.word	0x1fff8e1c

0000e004 <Ftm_Pwm_Ip_UpdatePwmChannel>:
Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdatePwmChannel(uint8 Instance,
                                                  uint8 Channel,
                                                  uint16 FirstEdge,
                                                  uint16 SecondEdge,
                                                  boolean SoftwareTrigger)
{
    e004:	b510      	push	{r4, lr}
    e006:	b086      	sub	sp, #24
    e008:	4604      	mov	r4, r0
    e00a:	4608      	mov	r0, r1
    e00c:	4611      	mov	r1, r2
    e00e:	461a      	mov	r2, r3
    e010:	4623      	mov	r3, r4
    e012:	f88d 3007 	strb.w	r3, [sp, #7]
    e016:	4603      	mov	r3, r0
    e018:	f88d 3006 	strb.w	r3, [sp, #6]
    e01c:	460b      	mov	r3, r1
    e01e:	f8ad 3004 	strh.w	r3, [sp, #4]
    e022:	4613      	mov	r3, r2
    e024:	f8ad 3002 	strh.w	r3, [sp, #2]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e028:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e02c:	4a3d      	ldr	r2, [pc, #244]	; (e124 <Ftm_Pwm_Ip_UpdatePwmChannel+0x120>)
    e02e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e032:	9303      	str	r3, [sp, #12]
    Ftm_Pwm_Ip_StatusType RetStatus = FTM_PWM_IP_STATUS_SUCCESS;
    e034:	2300      	movs	r3, #0
    e036:	9305      	str	r3, [sp, #20]
    uint16 HwFirstEdge = 0U;
    e038:	2300      	movs	r3, #0
    e03a:	f8ad 3012 	strh.w	r3, [sp, #18]
    uint16 HwSecondEdge = 0U;
    e03e:	2300      	movs	r3, #0
    e040:	f8ad 3010 	strh.w	r3, [sp, #16]
    uint16 FtmPeriod = 0U;
    e044:	2300      	movs	r3, #0
    e046:	f8ad 300a 	strh.w	r3, [sp, #10]
    uint8 ChPairId = (uint8)(Channel >> 1U);
    e04a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e04e:	085b      	lsrs	r3, r3, #1
    e050:	f88d 3009 	strb.w	r3, [sp, #9]
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    /* Get the period in the FTM Instance */
    FtmPeriod = Ftm_Pwm_Ip_aPeriod[Instance];
    e054:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e058:	4a33      	ldr	r2, [pc, #204]	; (e128 <Ftm_Pwm_Ip_UpdatePwmChannel+0x124>)
    e05a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    e05e:	f8ad 300a 	strh.w	r3, [sp, #10]

    if (((FirstEdge <= FtmPeriod) && (SecondEdge <= FtmPeriod)) || (0U == FtmPeriod))
    e062:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    e066:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    e06a:	429a      	cmp	r2, r3
    e06c:	d805      	bhi.n	e07a <Ftm_Pwm_Ip_UpdatePwmChannel+0x76>
    e06e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    e072:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    e076:	429a      	cmp	r2, r3
    e078:	d903      	bls.n	e082 <Ftm_Pwm_Ip_UpdatePwmChannel+0x7e>
    e07a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    e07e:	2b00      	cmp	r3, #0
    e080:	d108      	bne.n	e094 <Ftm_Pwm_Ip_UpdatePwmChannel+0x90>
    {
        HwFirstEdge = FirstEdge;
    e082:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e086:	f8ad 3012 	strh.w	r3, [sp, #18]
        HwSecondEdge = SecondEdge;
    e08a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    e08e:	f8ad 3010 	strh.w	r3, [sp, #16]
    e092:	e001      	b.n	e098 <Ftm_Pwm_Ip_UpdatePwmChannel+0x94>
    }
    else
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    e094:	2301      	movs	r3, #1
    e096:	9305      	str	r3, [sp, #20]
    }

    if (FTM_PWM_IP_STATUS_SUCCESS == RetStatus)
    e098:	9b05      	ldr	r3, [sp, #20]
    e09a:	2b00      	cmp	r3, #0
    e09c:	d13e      	bne.n	e11c <Ftm_Pwm_Ip_UpdatePwmChannel+0x118>
    {
        if (TRUE == Ftm_Pwm_Ip_GetDualChnCombineCmd(FtmBase, ChPairId))
    e09e:	f89d 3009 	ldrb.w	r3, [sp, #9]
    e0a2:	4619      	mov	r1, r3
    e0a4:	9803      	ldr	r0, [sp, #12]
    e0a6:	f7fe f8d5 	bl	c254 <Ftm_Pwm_Ip_GetDualChnCombineCmd>
    e0aa:	4603      	mov	r3, r0
    e0ac:	2b00      	cmp	r3, #0
    e0ae:	d016      	beq.n	e0de <Ftm_Pwm_Ip_UpdatePwmChannel+0xda>
        {
            /* Modify the initial value in the channel n match edge */
            Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)(ChPairId * 2U), HwFirstEdge);
    e0b0:	f89d 3009 	ldrb.w	r3, [sp, #9]
    e0b4:	005b      	lsls	r3, r3, #1
    e0b6:	b2db      	uxtb	r3, r3
    e0b8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    e0bc:	4619      	mov	r1, r3
    e0be:	9803      	ldr	r0, [sp, #12]
    e0c0:	f7fd ff70 	bl	bfa4 <Ftm_Pwm_Ip_SetChnCountVal>

            /* Modify the initial value in the channel (n+1) match edge */
            Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)((ChPairId * 2U) + 1U), HwSecondEdge);
    e0c4:	f89d 3009 	ldrb.w	r3, [sp, #9]
    e0c8:	005b      	lsls	r3, r3, #1
    e0ca:	b2db      	uxtb	r3, r3
    e0cc:	3301      	adds	r3, #1
    e0ce:	b2db      	uxtb	r3, r3
    e0d0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    e0d4:	4619      	mov	r1, r3
    e0d6:	9803      	ldr	r0, [sp, #12]
    e0d8:	f7fd ff64 	bl	bfa4 <Ftm_Pwm_Ip_SetChnCountVal>
    e0dc:	e018      	b.n	e110 <Ftm_Pwm_Ip_UpdatePwmChannel+0x10c>
        }
        else
        {
            /* Channel value is divided by 2 for up down counter mode to keep same duty */
            if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
    e0de:	9803      	ldr	r0, [sp, #12]
    e0e0:	f7fd fde9 	bl	bcb6 <Ftm_Pwm_Ip_GetCpwms>
    e0e4:	4603      	mov	r3, r0
    e0e6:	2b01      	cmp	r3, #1
    e0e8:	d10a      	bne.n	e100 <Ftm_Pwm_Ip_UpdatePwmChannel+0xfc>
            {
                Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channel, (uint16)(HwFirstEdge >> 1U));
    e0ea:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    e0ee:	085b      	lsrs	r3, r3, #1
    e0f0:	b29a      	uxth	r2, r3
    e0f2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e0f6:	4619      	mov	r1, r3
    e0f8:	9803      	ldr	r0, [sp, #12]
    e0fa:	f7fd ff53 	bl	bfa4 <Ftm_Pwm_Ip_SetChnCountVal>
    e0fe:	e007      	b.n	e110 <Ftm_Pwm_Ip_UpdatePwmChannel+0x10c>
            }
            else
            {
                Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channel, HwFirstEdge);
    e100:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    e104:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e108:	4619      	mov	r1, r3
    e10a:	9803      	ldr	r0, [sp, #12]
    e10c:	f7fd ff4a 	bl	bfa4 <Ftm_Pwm_Ip_SetChnCountVal>
            }
        }

        /* Software trigger is generated to change CV registers */
        /* Before this please configure sync mechanism to use software trigger */
        Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    e110:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e114:	4619      	mov	r1, r3
    e116:	9803      	ldr	r0, [sp, #12]
    e118:	f7fd fffc 	bl	c114 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    }

    return RetStatus;
    e11c:	9b05      	ldr	r3, [sp, #20]
}
    e11e:	4618      	mov	r0, r3
    e120:	b006      	add	sp, #24
    e122:	bd10      	pop	{r4, pc}
    e124:	00016494 	.word	0x00016494
    e128:	1fff8e14 	.word	0x1fff8e14

0000e12c <Ftm_Pwm_Ip_UpdatePwmPeriod>:
 * @implements Ftm_Pwm_Ip_UpdatePwmPeriod_Activity
 **/
Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdatePwmPeriod(uint8 Instance,
                                                 uint32 NewValue,
                                                 boolean SoftwareTrigger)
{
    e12c:	b500      	push	{lr}
    e12e:	b085      	sub	sp, #20
    e130:	4603      	mov	r3, r0
    e132:	9100      	str	r1, [sp, #0]
    e134:	f88d 3007 	strb.w	r3, [sp, #7]
    e138:	4613      	mov	r3, r2
    e13a:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e13e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e142:	4a16      	ldr	r2, [pc, #88]	; (e19c <Ftm_Pwm_Ip_UpdatePwmPeriod+0x70>)
    e144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e148:	9302      	str	r3, [sp, #8]
    uint32 FtmPeriod = 0U;
    e14a:	2300      	movs	r3, #0
    e14c:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    FtmPeriod = NewValue;
    e14e:	9b00      	ldr	r3, [sp, #0]
    e150:	9303      	str	r3, [sp, #12]
    
    /* Store the new period */
    Ftm_Pwm_Ip_aPeriod[Instance] = (uint16)NewValue;
    e152:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e156:	9a00      	ldr	r2, [sp, #0]
    e158:	b291      	uxth	r1, r2
    e15a:	4a11      	ldr	r2, [pc, #68]	; (e1a0 <Ftm_Pwm_Ip_UpdatePwmPeriod+0x74>)
    e15c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    /* Check the signal operation in which PWM mode */
    if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
    e160:	9802      	ldr	r0, [sp, #8]
    e162:	f7fd fda8 	bl	bcb6 <Ftm_Pwm_Ip_GetCpwms>
    e166:	4603      	mov	r3, r0
    e168:	2b01      	cmp	r3, #1
    e16a:	d103      	bne.n	e174 <Ftm_Pwm_Ip_UpdatePwmPeriod+0x48>
    {
        FtmPeriod = (FtmPeriod >> 1U);
    e16c:	9b03      	ldr	r3, [sp, #12]
    e16e:	085b      	lsrs	r3, r3, #1
    e170:	9303      	str	r3, [sp, #12]
    e172:	e002      	b.n	e17a <Ftm_Pwm_Ip_UpdatePwmPeriod+0x4e>
    }
    else
    {
        FtmPeriod = (FtmPeriod - 1U);
    e174:	9b03      	ldr	r3, [sp, #12]
    e176:	3b01      	subs	r3, #1
    e178:	9303      	str	r3, [sp, #12]
    }
    /* Set the new modulo value into MOD register */
    Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(FtmPeriod));
    e17a:	9b03      	ldr	r3, [sp, #12]
    e17c:	b29b      	uxth	r3, r3
    e17e:	4619      	mov	r1, r3
    e180:	9802      	ldr	r0, [sp, #8]
    e182:	f7fd fdeb 	bl	bd5c <Ftm_Pwm_Ip_SetMod>
    /* Software trigger is generated to change MOD registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    e186:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e18a:	4619      	mov	r1, r3
    e18c:	9802      	ldr	r0, [sp, #8]
    e18e:	f7fd ffc1 	bl	c114 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    return FTM_PWM_IP_STATUS_SUCCESS;
    e192:	2300      	movs	r3, #0
}
    e194:	4618      	mov	r0, r3
    e196:	b005      	add	sp, #20
    e198:	f85d fb04 	ldr.w	pc, [sp], #4
    e19c:	00016494 	.word	0x00016494
    e1a0:	1fff8e14 	.word	0x1fff8e14

0000e1a4 <Ftm_Pwm_Ip_GetOutputState>:
 *
 * @implements Ftm_Pwm_Ip_GetOutputState_Activity
 **/
Ftm_Pwm_Ip_OutputStateType Ftm_Pwm_Ip_GetOutputState(uint8 Instance,
                                                     uint8 Channel)
{
    e1a4:	b500      	push	{lr}
    e1a6:	b085      	sub	sp, #20
    e1a8:	4603      	mov	r3, r0
    e1aa:	460a      	mov	r2, r1
    e1ac:	f88d 3007 	strb.w	r3, [sp, #7]
    e1b0:	4613      	mov	r3, r2
    e1b2:	f88d 3006 	strb.w	r3, [sp, #6]

    const Ftm_Pwm_Ip_HwAddrType *const FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e1b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e1ba:	4a0d      	ldr	r2, [pc, #52]	; (e1f0 <Ftm_Pwm_Ip_GetOutputState+0x4c>)
    e1bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1c0:	9302      	str	r3, [sp, #8]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03();
    e1c2:	f006 fa43 	bl	1464c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03>

    if (TRUE == Ftm_Pwm_Ip_GetChOutputValue(FtmBase, Channel))
    e1c6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e1ca:	4619      	mov	r1, r3
    e1cc:	9802      	ldr	r0, [sp, #8]
    e1ce:	f7fd fed3 	bl	bf78 <Ftm_Pwm_Ip_GetChOutputValue>
    e1d2:	4603      	mov	r3, r0
    e1d4:	2b00      	cmp	r3, #0
    e1d6:	d002      	beq.n	e1de <Ftm_Pwm_Ip_GetOutputState+0x3a>
    {
        OutputValue = FTM_PWM_IP_OUTPUT_STATE_HIGH;
    e1d8:	2301      	movs	r3, #1
    e1da:	9303      	str	r3, [sp, #12]
    e1dc:	e001      	b.n	e1e2 <Ftm_Pwm_Ip_GetOutputState+0x3e>
    }
    else
    {
        OutputValue = FTM_PWM_IP_OUTPUT_STATE_LOW;
    e1de:	2300      	movs	r3, #0
    e1e0:	9303      	str	r3, [sp, #12]
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03();
    e1e2:	f006 fa5f 	bl	146a4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03>

    return OutputValue;
    e1e6:	9b03      	ldr	r3, [sp, #12]
}
    e1e8:	4618      	mov	r0, r3
    e1ea:	b005      	add	sp, #20
    e1ec:	f85d fb04 	ldr.w	pc, [sp], #4
    e1f0:	00016494 	.word	0x00016494

0000e1f4 <Ftm_Pwm_Ip_DisableNotification>:
 * Description   : This function disables the user notifications for the corresponding type of notification
 *
 * @implements Ftm_Pwm_Ip_DisableNotification_Activity
 **/
void Ftm_Pwm_Ip_DisableNotification(uint8 Instance, Ftm_Pwm_Ip_NotifType NotifType)
{
    e1f4:	b500      	push	{lr}
    e1f6:	b087      	sub	sp, #28
    e1f8:	4603      	mov	r3, r0
    e1fa:	9100      	str	r1, [sp, #0]
    e1fc:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType *const FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e200:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e204:	4a38      	ldr	r2, [pc, #224]	; (e2e8 <Ftm_Pwm_Ip_DisableNotification+0xf4>)
    e206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e20a:	9305      	str	r3, [sp, #20]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 PairChId;
    uint8 ChannelId = (uint8)NotifType;
    e20c:	9b00      	ldr	r3, [sp, #0]
    e20e:	f88d 3013 	strb.w	r3, [sp, #19]
    {
        DevAssert(ChannelId < (uint8)FTM_PWM_IP_CHANNEL_COUNT);
    }
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04();
    e212:	f006 fa6d 	bl	146f0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04>

    if((FTM_PWM_IP_CHANNEL_0_NOTIFICATION == NotifType) ||
    e216:	9b00      	ldr	r3, [sp, #0]
    e218:	2b00      	cmp	r3, #0
    e21a:	d014      	beq.n	e246 <Ftm_Pwm_Ip_DisableNotification+0x52>
    e21c:	9b00      	ldr	r3, [sp, #0]
    e21e:	2b01      	cmp	r3, #1
    e220:	d011      	beq.n	e246 <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_1_NOTIFICATION == NotifType) ||
    e222:	9b00      	ldr	r3, [sp, #0]
    e224:	2b02      	cmp	r3, #2
    e226:	d00e      	beq.n	e246 <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_2_NOTIFICATION == NotifType) ||
    e228:	9b00      	ldr	r3, [sp, #0]
    e22a:	2b03      	cmp	r3, #3
    e22c:	d00b      	beq.n	e246 <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_3_NOTIFICATION == NotifType) ||
    e22e:	9b00      	ldr	r3, [sp, #0]
    e230:	2b04      	cmp	r3, #4
    e232:	d008      	beq.n	e246 <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_4_NOTIFICATION == NotifType) ||
    e234:	9b00      	ldr	r3, [sp, #0]
    e236:	2b05      	cmp	r3, #5
    e238:	d005      	beq.n	e246 <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_5_NOTIFICATION == NotifType) ||
    e23a:	9b00      	ldr	r3, [sp, #0]
    e23c:	2b06      	cmp	r3, #6
    e23e:	d002      	beq.n	e246 <Ftm_Pwm_Ip_DisableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_6_NOTIFICATION == NotifType) ||
    e240:	9b00      	ldr	r3, [sp, #0]
    e242:	2b07      	cmp	r3, #7
    e244:	d136      	bne.n	e2b4 <Ftm_Pwm_Ip_DisableNotification+0xc0>
       (FTM_PWM_IP_CHANNEL_7_NOTIFICATION == NotifType))
    {
        PairChId = (uint8)(ChannelId >> 1U);
    e246:	f89d 3013 	ldrb.w	r3, [sp, #19]
    e24a:	085b      	lsrs	r3, r3, #1
    e24c:	f88d 3012 	strb.w	r3, [sp, #18]
        /* Get the mode of channels */
        ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, ChannelId);
    e250:	f89d 3013 	ldrb.w	r3, [sp, #19]
    e254:	4619      	mov	r1, r3
    e256:	9805      	ldr	r0, [sp, #20]
    e258:	f7fe fbbc 	bl	c9d4 <Ftm_Pwm_Ip_GetChannelMode>
    e25c:	9003      	str	r0, [sp, #12]
#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
        /* Clear notification state of given channel */
        Ftm_Pwm_Ip_aNotifIrq[Instance][ChannelId] = FTM_PWM_IP_NO_EDGE;
#endif
        /* Disable interrupts for given channel */
        Ftm_Pwm_Ip_DisableCmpIrq(Instance, ChannelId);
    e25e:	f89d 2013 	ldrb.w	r2, [sp, #19]
    e262:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e266:	4611      	mov	r1, r2
    e268:	4618      	mov	r0, r3
    e26a:	f7fe ff47 	bl	d0fc <Ftm_Pwm_Ip_DisableCmpIrq>

        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    e26e:	9b03      	ldr	r3, [sp, #12]
    e270:	2b22      	cmp	r3, #34	; 0x22
    e272:	d008      	beq.n	e286 <Ftm_Pwm_Ip_DisableNotification+0x92>
    e274:	9b03      	ldr	r3, [sp, #12]
    e276:	2b62      	cmp	r3, #98	; 0x62
    e278:	d005      	beq.n	e286 <Ftm_Pwm_Ip_DisableNotification+0x92>
    #if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
            ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    e27a:	9b03      	ldr	r3, [sp, #12]
    e27c:	2b61      	cmp	r3, #97	; 0x61
    e27e:	d002      	beq.n	e286 <Ftm_Pwm_Ip_DisableNotification+0x92>
            ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    e280:	9b03      	ldr	r3, [sp, #12]
    e282:	2b21      	cmp	r3, #33	; 0x21
    e284:	d129      	bne.n	e2da <Ftm_Pwm_Ip_DisableNotification+0xe6>
            Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)(PairChId * 2U)] = FTM_PWM_IP_NO_EDGE;
            /* Clear notification state of an odd channel */
            Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)((PairChId * 2U) + 1U)] = FTM_PWM_IP_NO_EDGE;
#endif
            /* Disable interrupts for an even channel */
            Ftm_Pwm_Ip_DisableCmpIrq(Instance,(uint8)(PairChId * 2U));
    e286:	f89d 3012 	ldrb.w	r3, [sp, #18]
    e28a:	005b      	lsls	r3, r3, #1
    e28c:	b2da      	uxtb	r2, r3
    e28e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e292:	4611      	mov	r1, r2
    e294:	4618      	mov	r0, r3
    e296:	f7fe ff31 	bl	d0fc <Ftm_Pwm_Ip_DisableCmpIrq>
            /* Disable interrupts for an odd channel */
            Ftm_Pwm_Ip_DisableCmpIrq(Instance,(uint8)((PairChId * 2U) + 1U));
    e29a:	f89d 3012 	ldrb.w	r3, [sp, #18]
    e29e:	005b      	lsls	r3, r3, #1
    e2a0:	b2db      	uxtb	r3, r3
    e2a2:	3301      	adds	r3, #1
    e2a4:	b2da      	uxtb	r2, r3
    e2a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e2aa:	4611      	mov	r1, r2
    e2ac:	4618      	mov	r0, r3
    e2ae:	f7fe ff25 	bl	d0fc <Ftm_Pwm_Ip_DisableCmpIrq>
        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    e2b2:	e012      	b.n	e2da <Ftm_Pwm_Ip_DisableNotification+0xe6>
        (void) PairChId;
        (void) ChannelId;
    }
#endif
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    else if(FTM_PWM_IP_FAULT_NOTIFICATION == NotifType)
    e2b4:	9b00      	ldr	r3, [sp, #0]
    e2b6:	2b0a      	cmp	r3, #10
    e2b8:	d107      	bne.n	e2ca <Ftm_Pwm_Ip_DisableNotification+0xd6>
    {
        /* Disable the generation of an interrupt when a fault is detected by FTM and the FTM fault control is enabled.*/
        Ftm_Pwm_Ip_SetFaultInterruptEnable(FtmBase, FALSE);
    e2ba:	2100      	movs	r1, #0
    e2bc:	9805      	ldr	r0, [sp, #20]
    e2be:	f7fe fd88 	bl	cdd2 <Ftm_Pwm_Ip_SetFaultInterruptEnable>

        /* Clear fault interrupt flag of a given FTM module */
        Ftm_Pwm_Ip_ClearFaultFlag(FtmBase);
    e2c2:	9805      	ldr	r0, [sp, #20]
    e2c4:	f7fe fd9b 	bl	cdfe <Ftm_Pwm_Ip_ClearFaultFlag>
    e2c8:	e008      	b.n	e2dc <Ftm_Pwm_Ip_DisableNotification+0xe8>
    }
#endif
    else
    {
        /* Clear time-overflow interrupt flag of given module */
        Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
    e2ca:	9805      	ldr	r0, [sp, #20]
    e2cc:	f7fd fd18 	bl	bd00 <Ftm_Pwm_Ip_ClearTimerOverflow>

        /* Disable time-overflow interrupt */
        Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, FALSE);
    e2d0:	2100      	movs	r1, #0
    e2d2:	9805      	ldr	r0, [sp, #20]
    e2d4:	f7fd fcfd 	bl	bcd2 <Ftm_Pwm_Ip_SetTimerOverflowInt>
    e2d8:	e000      	b.n	e2dc <Ftm_Pwm_Ip_DisableNotification+0xe8>
        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    e2da:	bf00      	nop
        (void) ChMode;
        (void) PairChId;
        (void) ChannelId;
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04();
    e2dc:	f006 fa34 	bl	14748 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04>
}
    e2e0:	bf00      	nop
    e2e2:	b007      	add	sp, #28
    e2e4:	f85d fb04 	ldr.w	pc, [sp], #4
    e2e8:	00016494 	.word	0x00016494

0000e2ec <Ftm_Pwm_Ip_SetNormalNotificationCase>:

static void Ftm_Pwm_Ip_SetNormalNotificationCase(uint8 Instance, uint8 Channel)
{
    e2ec:	b500      	push	{lr}
    e2ee:	b087      	sub	sp, #28
    e2f0:	4603      	mov	r3, r0
    e2f2:	460a      	mov	r2, r1
    e2f4:	f88d 3007 	strb.w	r3, [sp, #7]
    e2f8:	4613      	mov	r3, r2
    e2fa:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e2fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e302:	4a22      	ldr	r2, [pc, #136]	; (e38c <Ftm_Pwm_Ip_SetNormalNotificationCase+0xa0>)
    e304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e308:	9305      	str	r3, [sp, #20]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 PairChId = (uint8)(Channel >> 1U);
    e30a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e30e:	085b      	lsrs	r3, r3, #1
    e310:	f88d 3013 	strb.w	r3, [sp, #19]

    ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    e314:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e318:	4619      	mov	r1, r3
    e31a:	9805      	ldr	r0, [sp, #20]
    e31c:	f7fe fb5a 	bl	c9d4 <Ftm_Pwm_Ip_GetChannelMode>
    e320:	9003      	str	r0, [sp, #12]
    }
    if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][Channel] & FTM_PWM_IP_CHF_IRQ_EDGE))
    {
#endif
        /* Enable match-compare interrupt */
        Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, TRUE);
    e322:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e326:	2201      	movs	r2, #1
    e328:	4619      	mov	r1, r3
    e32a:	9805      	ldr	r0, [sp, #20]
    e32c:	f7fd fde9 	bl	bf02 <Ftm_Pwm_Ip_UpdateChnInt>
    {
        Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, FALSE);
    }
#endif

    if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    e330:	9b03      	ldr	r3, [sp, #12]
    e332:	2b22      	cmp	r3, #34	; 0x22
    e334:	d008      	beq.n	e348 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
    e336:	9b03      	ldr	r3, [sp, #12]
    e338:	2b62      	cmp	r3, #98	; 0x62
    e33a:	d005      	beq.n	e348 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
     ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    e33c:	9b03      	ldr	r3, [sp, #12]
    e33e:	2b61      	cmp	r3, #97	; 0x61
    e340:	d002      	beq.n	e348 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
     ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    e342:	9b03      	ldr	r3, [sp, #12]
    e344:	2b21      	cmp	r3, #33	; 0x21
    e346:	d11d      	bne.n	e384 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x98>
#endif
     ( FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))
    {
        /* Clear match-compare interrupt flag of given channel (n+1) */
        Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, ((PairChId * 2U) + 1U));
    e348:	f89d 3013 	ldrb.w	r3, [sp, #19]
    e34c:	005b      	lsls	r3, r3, #1
    e34e:	b2db      	uxtb	r3, r3
    e350:	3301      	adds	r3, #1
    e352:	b2db      	uxtb	r3, r3
    e354:	4619      	mov	r1, r3
    e356:	9805      	ldr	r0, [sp, #20]
    e358:	f7fd fdf6 	bl	bf48 <Ftm_Pwm_Ip_ClearChnEventFlag>
#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
        /* Check the edge of interrupt with an even channel */
        if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)(PairChId * 2U)] & FTM_PWM_IP_CHF_IRQ_EDGE))
        {
#endif
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)(PairChId * 2U), TRUE);
    e35c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    e360:	005b      	lsls	r3, r3, #1
    e362:	b2db      	uxtb	r3, r3
    e364:	2201      	movs	r2, #1
    e366:	4619      	mov	r1, r3
    e368:	9805      	ldr	r0, [sp, #20]
    e36a:	f7fd fdca 	bl	bf02 <Ftm_Pwm_Ip_UpdateChnInt>
        }
        /* Check the edge of interrupt with an odd channel */
        if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)((PairChId * 2U) + 1U)] & FTM_PWM_IP_CHF_IRQ_EDGE))
        {
#endif
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)((PairChId * 2U) + 1U), TRUE);
    e36e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    e372:	005b      	lsls	r3, r3, #1
    e374:	b2db      	uxtb	r3, r3
    e376:	3301      	adds	r3, #1
    e378:	b2db      	uxtb	r3, r3
    e37a:	2201      	movs	r2, #1
    e37c:	4619      	mov	r1, r3
    e37e:	9805      	ldr	r0, [sp, #20]
    e380:	f7fd fdbf 	bl	bf02 <Ftm_Pwm_Ip_UpdateChnInt>
        {
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)((PairChId * 2U) + 1U), FALSE);
        }
#endif
    }
}
    e384:	bf00      	nop
    e386:	b007      	add	sp, #28
    e388:	f85d fb04 	ldr.w	pc, [sp], #4
    e38c:	00016494 	.word	0x00016494

0000e390 <Ftm_Pwm_Ip_EnableNotification>:
 *
 * @implements Ftm_Pwm_Ip_EnableNotification_Activity
 **/
void Ftm_Pwm_Ip_EnableNotification(uint8 Instance,
                                   Ftm_Pwm_Ip_NotifType NotifType)
{
    e390:	b500      	push	{lr}
    e392:	b085      	sub	sp, #20
    e394:	4603      	mov	r3, r0
    e396:	9100      	str	r1, [sp, #0]
    e398:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e39c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e3a0:	4a23      	ldr	r2, [pc, #140]	; (e430 <Ftm_Pwm_Ip_EnableNotification+0xa0>)
    e3a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3a6:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = (uint8)NotifType;
    e3a8:	9b00      	ldr	r3, [sp, #0]
    e3aa:	f88d 300b 	strb.w	r3, [sp, #11]
    {
        DevAssert(ChannelId < (uint8)FTM_PWM_IP_CHANNEL_COUNT);
    }
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05();
    e3ae:	f006 f9f1 	bl	14794 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05>
    
    if((FTM_PWM_IP_CHANNEL_0_NOTIFICATION == NotifType) ||
    e3b2:	9b00      	ldr	r3, [sp, #0]
    e3b4:	2b00      	cmp	r3, #0
    e3b6:	d014      	beq.n	e3e2 <Ftm_Pwm_Ip_EnableNotification+0x52>
    e3b8:	9b00      	ldr	r3, [sp, #0]
    e3ba:	2b01      	cmp	r3, #1
    e3bc:	d011      	beq.n	e3e2 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_1_NOTIFICATION == NotifType) ||
    e3be:	9b00      	ldr	r3, [sp, #0]
    e3c0:	2b02      	cmp	r3, #2
    e3c2:	d00e      	beq.n	e3e2 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_2_NOTIFICATION == NotifType) ||
    e3c4:	9b00      	ldr	r3, [sp, #0]
    e3c6:	2b03      	cmp	r3, #3
    e3c8:	d00b      	beq.n	e3e2 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_3_NOTIFICATION == NotifType) ||
    e3ca:	9b00      	ldr	r3, [sp, #0]
    e3cc:	2b04      	cmp	r3, #4
    e3ce:	d008      	beq.n	e3e2 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_4_NOTIFICATION == NotifType) ||
    e3d0:	9b00      	ldr	r3, [sp, #0]
    e3d2:	2b05      	cmp	r3, #5
    e3d4:	d005      	beq.n	e3e2 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_5_NOTIFICATION == NotifType) ||
    e3d6:	9b00      	ldr	r3, [sp, #0]
    e3d8:	2b06      	cmp	r3, #6
    e3da:	d002      	beq.n	e3e2 <Ftm_Pwm_Ip_EnableNotification+0x52>
       (FTM_PWM_IP_CHANNEL_6_NOTIFICATION == NotifType) ||
    e3dc:	9b00      	ldr	r3, [sp, #0]
    e3de:	2b07      	cmp	r3, #7
    e3e0:	d10e      	bne.n	e400 <Ftm_Pwm_Ip_EnableNotification+0x70>
       (FTM_PWM_IP_CHANNEL_7_NOTIFICATION == NotifType))
    {
        /* Clear match-compare interrupt flag of given channel */
        Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, ChannelId);
    e3e2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e3e6:	4619      	mov	r1, r3
    e3e8:	9803      	ldr	r0, [sp, #12]
    e3ea:	f7fd fdad 	bl	bf48 <Ftm_Pwm_Ip_ClearChnEventFlag>
        /* If duty cycle is not 0% and 100% */
        if ((0U != Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId]) &&
            (Ftm_Pwm_Ip_aPeriod[Instance] != Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId]))
        {
#endif
            Ftm_Pwm_Ip_SetNormalNotificationCase(Instance, ChannelId);
    e3ee:	f89d 200b 	ldrb.w	r2, [sp, #11]
    e3f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e3f6:	4611      	mov	r1, r2
    e3f8:	4618      	mov	r0, r3
    e3fa:	f7ff ff77 	bl	e2ec <Ftm_Pwm_Ip_SetNormalNotificationCase>
    e3fe:	e011      	b.n	e424 <Ftm_Pwm_Ip_EnableNotification+0x94>
        /* Avoid compiler warning */
        (void) ChannelId;
    }
#endif
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    else if(FTM_PWM_IP_FAULT_NOTIFICATION == NotifType)
    e400:	9b00      	ldr	r3, [sp, #0]
    e402:	2b0a      	cmp	r3, #10
    e404:	d107      	bne.n	e416 <Ftm_Pwm_Ip_EnableNotification+0x86>
    {
        /* Clear fault interrupt flag of a given FTM module */
        Ftm_Pwm_Ip_ClearFaultFlag(FtmBase);
    e406:	9803      	ldr	r0, [sp, #12]
    e408:	f7fe fcf9 	bl	cdfe <Ftm_Pwm_Ip_ClearFaultFlag>

        /* Enables the generation of an interrupt when a fault is detected by FTM and the FTM fault control is enabled.*/
        Ftm_Pwm_Ip_SetFaultInterruptEnable(FtmBase, TRUE);
    e40c:	2101      	movs	r1, #1
    e40e:	9803      	ldr	r0, [sp, #12]
    e410:	f7fe fcdf 	bl	cdd2 <Ftm_Pwm_Ip_SetFaultInterruptEnable>
    e414:	e006      	b.n	e424 <Ftm_Pwm_Ip_EnableNotification+0x94>
    }
#endif
    else
    {
        /* Clear time-overflow interrupt flag of given channel */
        Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
    e416:	9803      	ldr	r0, [sp, #12]
    e418:	f7fd fc72 	bl	bd00 <Ftm_Pwm_Ip_ClearTimerOverflow>

        /* Enable time-overflow interrupt */
        Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, TRUE);
    e41c:	2101      	movs	r1, #1
    e41e:	9803      	ldr	r0, [sp, #12]
    e420:	f7fd fc57 	bl	bcd2 <Ftm_Pwm_Ip_SetTimerOverflowInt>
        
        /* Avoid compiler warning */
        (void) ChannelId;
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05();
    e424:	f006 f9e2 	bl	147ec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05>
}
    e428:	bf00      	nop
    e42a:	b005      	add	sp, #20
    e42c:	f85d fb04 	ldr.w	pc, [sp], #4
    e430:	00016494 	.word	0x00016494

0000e434 <Ftm_Pwm_Ip_SetPowerState>:
 *
 * @implements Ftm_Pwm_Ip_SetPowerState_Activity
 **/
void Ftm_Pwm_Ip_SetPowerState(uint8 Instance,
                              Ftm_Pwm_Ip_PowerStateType PowerState)
{
    e434:	b500      	push	{lr}
    e436:	b085      	sub	sp, #20
    e438:	4603      	mov	r3, r0
    e43a:	9100      	str	r1, [sp, #0]
    e43c:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e440:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e444:	4a0c      	ldr	r2, [pc, #48]	; (e478 <Ftm_Pwm_Ip_SetPowerState+0x44>)
    e446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e44a:	9303      	str	r3, [sp, #12]
    
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    if (FTM_PWM_IP_LOW_POWER == PowerState)
    e44c:	9b00      	ldr	r3, [sp, #0]
    e44e:	2b01      	cmp	r3, #1
    e450:	d104      	bne.n	e45c <Ftm_Pwm_Ip_SetPowerState+0x28>
    {
        /* Disable counter clock */
        Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
    e452:	2100      	movs	r1, #0
    e454:	9803      	ldr	r0, [sp, #12]
    e456:	f7fd fc07 	bl	bc68 <Ftm_Pwm_Ip_SetClockSource>
    }
    else
    {
        Ftm_Pwm_Ip_SetClockSource(FtmBase, Ftm_Pwm_Ip_aClockSource[Instance]);
    }
}
    e45a:	e008      	b.n	e46e <Ftm_Pwm_Ip_SetPowerState+0x3a>
        Ftm_Pwm_Ip_SetClockSource(FtmBase, Ftm_Pwm_Ip_aClockSource[Instance]);
    e45c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e460:	4a06      	ldr	r2, [pc, #24]	; (e47c <Ftm_Pwm_Ip_SetPowerState+0x48>)
    e462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e466:	4619      	mov	r1, r3
    e468:	9803      	ldr	r0, [sp, #12]
    e46a:	f7fd fbfd 	bl	bc68 <Ftm_Pwm_Ip_SetClockSource>
}
    e46e:	bf00      	nop
    e470:	b005      	add	sp, #20
    e472:	f85d fb04 	ldr.w	pc, [sp], #4
    e476:	bf00      	nop
    e478:	00016494 	.word	0x00016494
    e47c:	1fff910c 	.word	0x1fff910c

0000e480 <Ftm_Pwm_Ip_SetClockMode>:
 *
 * @implements Ftm_Pwm_Ip_SetClockMode_Activity
 **/
void Ftm_Pwm_Ip_SetClockMode(uint8 Instance,
                             Ftm_Pwm_Ip_PrescalerType Prescaler)
{
    e480:	b500      	push	{lr}
    e482:	b085      	sub	sp, #20
    e484:	4603      	mov	r3, r0
    e486:	9100      	str	r1, [sp, #0]
    e488:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e48c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e490:	4a0e      	ldr	r2, [pc, #56]	; (e4cc <Ftm_Pwm_Ip_SetClockMode+0x4c>)
    e492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e496:	9303      	str	r3, [sp, #12]
    
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    if (FTM_PWM_IP_ALTERNATIVE_PRESCALER == Prescaler)
    e498:	9b00      	ldr	r3, [sp, #0]
    e49a:	2b01      	cmp	r3, #1
    e49c:	d109      	bne.n	e4b2 <Ftm_Pwm_Ip_SetClockMode+0x32>
    {
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aAlternateClockPrescaler[Instance]);
    e49e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e4a2:	4a0b      	ldr	r2, [pc, #44]	; (e4d0 <Ftm_Pwm_Ip_SetClockMode+0x50>)
    e4a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4a8:	4619      	mov	r1, r3
    e4aa:	9803      	ldr	r0, [sp, #12]
    e4ac:	f7fd fbcc 	bl	bc48 <Ftm_Pwm_Ip_SetClockPs>
    }
    else
    {
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aClockPrescaler[Instance]);
    }
}
    e4b0:	e008      	b.n	e4c4 <Ftm_Pwm_Ip_SetClockMode+0x44>
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aClockPrescaler[Instance]);
    e4b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e4b6:	4a07      	ldr	r2, [pc, #28]	; (e4d4 <Ftm_Pwm_Ip_SetClockMode+0x54>)
    e4b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4bc:	4619      	mov	r1, r3
    e4be:	9803      	ldr	r0, [sp, #12]
    e4c0:	f7fd fbc2 	bl	bc48 <Ftm_Pwm_Ip_SetClockPs>
}
    e4c4:	bf00      	nop
    e4c6:	b005      	add	sp, #20
    e4c8:	f85d fb04 	ldr.w	pc, [sp], #4
    e4cc:	00016494 	.word	0x00016494
    e4d0:	1fff912c 	.word	0x1fff912c
    e4d4:	1fff911c 	.word	0x1fff911c

0000e4d8 <Ftm_Pwm_Ip_ResetCounter>:
 *
 * @implements Ftm_Pwm_Ip_ResetCounter_Activity
 **/
void Ftm_Pwm_Ip_ResetCounter(uint8 Instance,
                             boolean IsResetCnt)
{
    e4d8:	b500      	push	{lr}
    e4da:	b085      	sub	sp, #20
    e4dc:	4603      	mov	r3, r0
    e4de:	460a      	mov	r2, r1
    e4e0:	f88d 3007 	strb.w	r3, [sp, #7]
    e4e4:	4613      	mov	r3, r2
    e4e6:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e4ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e4ee:	4a07      	ldr	r2, [pc, #28]	; (e50c <Ftm_Pwm_Ip_ResetCounter+0x34>)
    e4f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4f4:	9303      	str	r3, [sp, #12]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, IsResetCnt);
    e4f6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e4fa:	4619      	mov	r1, r3
    e4fc:	9803      	ldr	r0, [sp, #12]
    e4fe:	f7fe f8ae 	bl	c65e <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>

}
    e502:	bf00      	nop
    e504:	b005      	add	sp, #20
    e506:	f85d fb04 	ldr.w	pc, [sp], #4
    e50a:	bf00      	nop
    e50c:	00016494 	.word	0x00016494

0000e510 <Ftm_Pwm_Ip_GetChannelState>:
 * Description   : The function shall return the duty cycle value of the selected channel.
 *
 * @implements  Ftm_Pwm_Ip_GetChannelState_Activity
 **/
uint16 Ftm_Pwm_Ip_GetChannelState(uint8 Instance, uint8 Channel)
{
    e510:	b084      	sub	sp, #16
    e512:	4603      	mov	r3, r0
    e514:	460a      	mov	r2, r1
    e516:	f88d 3007 	strb.w	r3, [sp, #7]
    e51a:	4613      	mov	r3, r2
    e51c:	f88d 3006 	strb.w	r3, [sp, #6]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
#endif
    DutyCycle = Ftm_Pwm_Ip_aDutyCycle[Instance][Channel];
    e520:	f89d 2007 	ldrb.w	r2, [sp, #7]
    e524:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e528:	4905      	ldr	r1, [pc, #20]	; (e540 <Ftm_Pwm_Ip_GetChannelState+0x30>)
    e52a:	00d2      	lsls	r2, r2, #3
    e52c:	4413      	add	r3, r2
    e52e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    e532:	f8ad 300e 	strh.w	r3, [sp, #14]

    return DutyCycle;
    e536:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    e53a:	4618      	mov	r0, r3
    e53c:	b004      	add	sp, #16
    e53e:	4770      	bx	lr
    e540:	1fff8e1c 	.word	0x1fff8e1c

0000e544 <Ftm_Pwm_Ip_FastUpdatePwmDuty>:
void Ftm_Pwm_Ip_FastUpdatePwmDuty(uint8 Instance,
                                  uint8 NumberOfChannels,
                                  const uint8 * Channels,
                                  const uint16 * Duty,
                                  boolean SoftwareTrigger)
{
    e544:	b500      	push	{lr}
    e546:	b087      	sub	sp, #28
    e548:	9202      	str	r2, [sp, #8]
    e54a:	9301      	str	r3, [sp, #4]
    e54c:	4603      	mov	r3, r0
    e54e:	f88d 300f 	strb.w	r3, [sp, #15]
    e552:	460b      	mov	r3, r1
    e554:	f88d 300e 	strb.w	r3, [sp, #14]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e558:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e55c:	4a1f      	ldr	r2, [pc, #124]	; (e5dc <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x98>)
    e55e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e562:	9304      	str	r3, [sp, #16]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    DevAssert(NumberOfChannels <= FTM_PWM_IP_CHANNEL_COUNT);
#endif
    for (Index = 0U; Index < NumberOfChannels; Index++)
    e564:	2300      	movs	r3, #0
    e566:	f88d 3017 	strb.w	r3, [sp, #23]
    e56a:	e026      	b.n	e5ba <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x76>
    {
        Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channels[Index], Duty[Index]);
    e56c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    e570:	9a02      	ldr	r2, [sp, #8]
    e572:	4413      	add	r3, r2
    e574:	7819      	ldrb	r1, [r3, #0]
    e576:	f89d 3017 	ldrb.w	r3, [sp, #23]
    e57a:	005b      	lsls	r3, r3, #1
    e57c:	9a01      	ldr	r2, [sp, #4]
    e57e:	4413      	add	r3, r2
    e580:	881b      	ldrh	r3, [r3, #0]
    e582:	461a      	mov	r2, r3
    e584:	9804      	ldr	r0, [sp, #16]
    e586:	f7fd fd0d 	bl	bfa4 <Ftm_Pwm_Ip_SetChnCountVal>
        Ftm_Pwm_Ip_aDutyCycle[Instance][Channels[Index]] = Duty[Index];
    e58a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    e58e:	005b      	lsls	r3, r3, #1
    e590:	9a01      	ldr	r2, [sp, #4]
    e592:	441a      	add	r2, r3
    e594:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e598:	f89d 1017 	ldrb.w	r1, [sp, #23]
    e59c:	9802      	ldr	r0, [sp, #8]
    e59e:	4401      	add	r1, r0
    e5a0:	7809      	ldrb	r1, [r1, #0]
    e5a2:	4608      	mov	r0, r1
    e5a4:	8811      	ldrh	r1, [r2, #0]
    e5a6:	4a0e      	ldr	r2, [pc, #56]	; (e5e0 <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x9c>)
    e5a8:	00db      	lsls	r3, r3, #3
    e5aa:	4403      	add	r3, r0
    e5ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (Index = 0U; Index < NumberOfChannels; Index++)
    e5b0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    e5b4:	3301      	adds	r3, #1
    e5b6:	f88d 3017 	strb.w	r3, [sp, #23]
    e5ba:	f89d 2017 	ldrb.w	r2, [sp, #23]
    e5be:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e5c2:	429a      	cmp	r2, r3
    e5c4:	d3d2      	bcc.n	e56c <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x28>
    }

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    e5c6:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e5ca:	4619      	mov	r1, r3
    e5cc:	9804      	ldr	r0, [sp, #16]
    e5ce:	f7fd fda1 	bl	c114 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    e5d2:	bf00      	nop
    e5d4:	b007      	add	sp, #28
    e5d6:	f85d fb04 	ldr.w	pc, [sp], #4
    e5da:	bf00      	nop
    e5dc:	00016494 	.word	0x00016494
    e5e0:	1fff8e1c 	.word	0x1fff8e1c

0000e5e4 <Ftm_Pwm_Ip_MaskOutputChannels>:
 * @implements Ftm_Pwm_Ip_MaskOutputChannels_Activity
 */
void Ftm_Pwm_Ip_MaskOutputChannels(uint8 Instance,
                                   uint32 ChannelsMask,
                                   boolean SoftwareTrigger)
{
    e5e4:	b500      	push	{lr}
    e5e6:	b085      	sub	sp, #20
    e5e8:	4603      	mov	r3, r0
    e5ea:	9100      	str	r1, [sp, #0]
    e5ec:	f88d 3007 	strb.w	r3, [sp, #7]
    e5f0:	4613      	mov	r3, r2
    e5f2:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e5f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e5fa:	4a0b      	ldr	r2, [pc, #44]	; (e628 <Ftm_Pwm_Ip_MaskOutputChannels+0x44>)
    e5fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e600:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07();
    e602:	f006 f96b 	bl	148dc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07>

    Ftm_Pwm_Ip_SetOutmaskReg(FtmBase, ChannelsMask);
    e606:	9900      	ldr	r1, [sp, #0]
    e608:	9803      	ldr	r0, [sp, #12]
    e60a:	f7fd fde0 	bl	c1ce <Ftm_Pwm_Ip_SetOutmaskReg>
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    e60e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e612:	4619      	mov	r1, r3
    e614:	9803      	ldr	r0, [sp, #12]
    e616:	f7fd fd7d 	bl	c114 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07();
    e61a:	f006 f98b 	bl	14934 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07>
}
    e61e:	bf00      	nop
    e620:	b005      	add	sp, #20
    e622:	f85d fb04 	ldr.w	pc, [sp], #4
    e626:	bf00      	nop
    e628:	00016494 	.word	0x00016494

0000e62c <Ftm_Pwm_Ip_UnMaskOutputChannels>:
 * @implements Ftm_Pwm_Ip_UnMaskOutputChannels_Activity
 **/
void Ftm_Pwm_Ip_UnMaskOutputChannels(uint8 Instance,
                                     uint32 ChannelsMask,
                                     boolean SoftwareTrigger)
{
    e62c:	b500      	push	{lr}
    e62e:	b085      	sub	sp, #20
    e630:	4603      	mov	r3, r0
    e632:	9100      	str	r1, [sp, #0]
    e634:	f88d 3007 	strb.w	r3, [sp, #7]
    e638:	4613      	mov	r3, r2
    e63a:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e63e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e642:	4a0b      	ldr	r2, [pc, #44]	; (e670 <Ftm_Pwm_Ip_UnMaskOutputChannels+0x44>)
    e644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e648:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08();
    e64a:	f006 f999 	bl	14980 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08>

    Ftm_Pwm_Ip_ClearOutmaskReg(FtmBase, ChannelsMask);
    e64e:	9900      	ldr	r1, [sp, #0]
    e650:	9803      	ldr	r0, [sp, #12]
    e652:	f7fd fdcb 	bl	c1ec <Ftm_Pwm_Ip_ClearOutmaskReg>
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    e656:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e65a:	4619      	mov	r1, r3
    e65c:	9803      	ldr	r0, [sp, #12]
    e65e:	f7fd fd59 	bl	c114 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08();
    e662:	f006 f9b9 	bl	149d8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08>
}
    e666:	bf00      	nop
    e668:	b005      	add	sp, #20
    e66a:	f85d fb04 	ldr.w	pc, [sp], #4
    e66e:	bf00      	nop
    e670:	00016494 	.word	0x00016494

0000e674 <Ftm_Pwm_Ip_SetPhaseShift>:
void Ftm_Pwm_Ip_SetPhaseShift(uint8 Instance,
                              uint8 Channel,
                              uint16 Period,
                              uint16 PhaseShift,
                              boolean SoftwareTrigger)
{
    e674:	b510      	push	{r4, lr}
    e676:	b084      	sub	sp, #16
    e678:	4604      	mov	r4, r0
    e67a:	4608      	mov	r0, r1
    e67c:	4611      	mov	r1, r2
    e67e:	461a      	mov	r2, r3
    e680:	4623      	mov	r3, r4
    e682:	f88d 3007 	strb.w	r3, [sp, #7]
    e686:	4603      	mov	r3, r0
    e688:	f88d 3006 	strb.w	r3, [sp, #6]
    e68c:	460b      	mov	r3, r1
    e68e:	f8ad 3004 	strh.w	r3, [sp, #4]
    e692:	4613      	mov	r3, r2
    e694:	f8ad 3002 	strh.w	r3, [sp, #2]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e698:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e69c:	4a2e      	ldr	r2, [pc, #184]	; (e758 <Ftm_Pwm_Ip_SetPhaseShift+0xe4>)
    e69e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6a2:	9303      	str	r3, [sp, #12]
    {
        RetVal = FALSE;
    }
    DevAssert(RetVal != FALSE);
#endif
    PairChId = Channel >> 1U;
    e6a4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e6a8:	085b      	lsrs	r3, r3, #1
    e6aa:	f88d 300b 	strb.w	r3, [sp, #11]
    Ftm_Pwm_Ip_aPeriod[Instance] = Period;
    e6ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e6b2:	492a      	ldr	r1, [pc, #168]	; (e75c <Ftm_Pwm_Ip_SetPhaseShift+0xe8>)
    e6b4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    e6b8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09();
    e6bc:	f006 f9b2 	bl	14a24 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09>

    if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
    e6c0:	9803      	ldr	r0, [sp, #12]
    e6c2:	f7fd faf8 	bl	bcb6 <Ftm_Pwm_Ip_GetCpwms>
    e6c6:	4603      	mov	r3, r0
    e6c8:	2b01      	cmp	r3, #1
    e6ca:	d108      	bne.n	e6de <Ftm_Pwm_Ip_SetPhaseShift+0x6a>
    {
        /* For Center Aligned mode MOD register should be divided by 2. Period is 2 * (MOD − CNTIN) */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(Period >> 1U));
    e6cc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e6d0:	085b      	lsrs	r3, r3, #1
    e6d2:	b29b      	uxth	r3, r3
    e6d4:	4619      	mov	r1, r3
    e6d6:	9803      	ldr	r0, [sp, #12]
    e6d8:	f7fd fb40 	bl	bd5c <Ftm_Pwm_Ip_SetMod>
    e6dc:	e007      	b.n	e6ee <Ftm_Pwm_Ip_SetPhaseShift+0x7a>
    }
    else
    {
        /* For Edge Aligned mode period is determined by: MOD-CNTIN+1 */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(Period - 1U));
    e6de:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e6e2:	3b01      	subs	r3, #1
    e6e4:	b29b      	uxth	r3, r3
    e6e6:	4619      	mov	r1, r3
    e6e8:	9803      	ldr	r0, [sp, #12]
    e6ea:	f7fd fb37 	bl	bd5c <Ftm_Pwm_Ip_SetMod>
    }

    Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)(PairChId * 2U), PhaseShift);
    e6ee:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e6f2:	005b      	lsls	r3, r3, #1
    e6f4:	b2db      	uxtb	r3, r3
    e6f6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    e6fa:	4619      	mov	r1, r3
    e6fc:	9803      	ldr	r0, [sp, #12]
    e6fe:	f7fd fc51 	bl	bfa4 <Ftm_Pwm_Ip_SetChnCountVal>

    /* Fix duty cycle to 50% */
    DutyCycleVal = (uint16)(Period >> 1U);
    e702:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e706:	085b      	lsrs	r3, r3, #1
    e708:	f8ad 3008 	strh.w	r3, [sp, #8]
    
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycleVal;
    e70c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    e710:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e714:	4912      	ldr	r1, [pc, #72]	; (e760 <Ftm_Pwm_Ip_SetPhaseShift+0xec>)
    e716:	00d2      	lsls	r2, r2, #3
    e718:	4413      	add	r3, r2
    e71a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    e71e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    /* Write C(n+1)V register */
    Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)((PairChId * 2U) + 1U), (PhaseShift + DutyCycleVal));
    e722:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e726:	005b      	lsls	r3, r3, #1
    e728:	b2db      	uxtb	r3, r3
    e72a:	3301      	adds	r3, #1
    e72c:	b2d9      	uxtb	r1, r3
    e72e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    e732:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    e736:	4413      	add	r3, r2
    e738:	b29b      	uxth	r3, r3
    e73a:	461a      	mov	r2, r3
    e73c:	9803      	ldr	r0, [sp, #12]
    e73e:	f7fd fc31 	bl	bfa4 <Ftm_Pwm_Ip_SetChnCountVal>

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    e742:	f89d 3018 	ldrb.w	r3, [sp, #24]
    e746:	4619      	mov	r1, r3
    e748:	9803      	ldr	r0, [sp, #12]
    e74a:	f7fd fce3 	bl	c114 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09();
    e74e:	f006 f995 	bl	14a7c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09>
}
    e752:	bf00      	nop
    e754:	b004      	add	sp, #16
    e756:	bd10      	pop	{r4, pc}
    e758:	00016494 	.word	0x00016494
    e75c:	1fff8e14 	.word	0x1fff8e14
    e760:	1fff8e1c 	.word	0x1fff8e1c

0000e764 <Ftm_Pwm_Ip_SetDutyPhaseShift>:
void Ftm_Pwm_Ip_SetDutyPhaseShift(uint8 Instance,
                                  uint8 Channel,
                                  uint16 DutyCycle,
                                  uint16 PhaseShift,
                                  boolean SyncUpdate)
{
    e764:	b510      	push	{r4, lr}
    e766:	b086      	sub	sp, #24
    e768:	4604      	mov	r4, r0
    e76a:	4608      	mov	r0, r1
    e76c:	4611      	mov	r1, r2
    e76e:	461a      	mov	r2, r3
    e770:	4623      	mov	r3, r4
    e772:	f88d 300f 	strb.w	r3, [sp, #15]
    e776:	4603      	mov	r3, r0
    e778:	f88d 300e 	strb.w	r3, [sp, #14]
    e77c:	460b      	mov	r3, r1
    e77e:	f8ad 300c 	strh.w	r3, [sp, #12]
    e782:	4613      	mov	r3, r2
    e784:	f8ad 300a 	strh.w	r3, [sp, #10]
        }
    }
    DevAssert(RetVal != FALSE);

#endif
    PairId = Channel >> 1U;
    e788:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e78c:	085b      	lsrs	r3, r3, #1
    e78e:	f88d 3016 	strb.w	r3, [sp, #22]

    Ftm_Pwm_Ip_aPhaseShift[Instance][PairId] = PhaseShift;
    e792:	f89d 200f 	ldrb.w	r2, [sp, #15]
    e796:	f89d 3016 	ldrb.w	r3, [sp, #22]
    e79a:	492d      	ldr	r1, [pc, #180]	; (e850 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xec>)
    e79c:	0092      	lsls	r2, r2, #2
    e79e:	4413      	add	r3, r2
    e7a0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    e7a4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycle;
    e7a8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    e7ac:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e7b0:	4928      	ldr	r1, [pc, #160]	; (e854 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf0>)
    e7b2:	00d2      	lsls	r2, r2, #3
    e7b4:	4413      	add	r3, r2
    e7b6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    e7ba:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    FirstEdge = PhaseShift;
    e7be:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    e7c2:	f8ad 3014 	strh.w	r3, [sp, #20]

    SecondEdgeEdge = Ftm_Pwm_Ip_CalculatePhaseShift(Instance, DutyCycle, PhaseShift);
    e7c6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    e7ca:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    e7ce:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e7d2:	4618      	mov	r0, r3
    e7d4:	f7fe fbc4 	bl	cf60 <Ftm_Pwm_Ip_CalculatePhaseShift>
    e7d8:	4603      	mov	r3, r0
    e7da:	f8ad 3012 	strh.w	r3, [sp, #18]

    if (TRUE == SyncUpdate)
    e7de:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e7e2:	2b00      	cmp	r3, #0
    e7e4:	d003      	beq.n	e7ee <Ftm_Pwm_Ip_SetDutyPhaseShift+0x8a>
    {
        SoftwareTrigger = FALSE;
    e7e6:	2300      	movs	r3, #0
    e7e8:	f88d 3017 	strb.w	r3, [sp, #23]
    e7ec:	e002      	b.n	e7f4 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x90>
    }
    else
    {
        SoftwareTrigger = TRUE;
    e7ee:	2301      	movs	r3, #1
    e7f0:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    e7f4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    e7f8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e7fc:	4916      	ldr	r1, [pc, #88]	; (e858 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf4>)
    e7fe:	00d2      	lsls	r2, r2, #3
    e800:	4413      	add	r3, r2
    e802:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    e806:	2b02      	cmp	r3, #2
    e808:	d111      	bne.n	e82e <Ftm_Pwm_Ip_SetDutyPhaseShift+0xca>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    e80a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    e80e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e812:	4911      	ldr	r1, [pc, #68]	; (e858 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf4>)
    e814:	00d2      	lsls	r2, r2, #3
    e816:	4413      	add	r3, r2
    e818:	2201      	movs	r2, #1
    e81a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
    e81e:	f89d 100e 	ldrb.w	r1, [sp, #14]
    e822:	f89d 000f 	ldrb.w	r0, [sp, #15]
    e826:	2300      	movs	r3, #0
    e828:	2200      	movs	r2, #0
    e82a:	f7ff fb25 	bl	de78 <Ftm_Pwm_Ip_SwOutputControl>
                                   FTM_PWM_IP_OUTPUT_STATE_LOW,
                                   FALSE);
    }

    /* Write CV registers and setup duty cycle and phase values */
    (void)Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    e82e:	f8bd 4012 	ldrh.w	r4, [sp, #18]
    e832:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    e836:	f89d 100e 	ldrb.w	r1, [sp, #14]
    e83a:	f89d 000f 	ldrb.w	r0, [sp, #15]
    e83e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    e842:	9300      	str	r3, [sp, #0]
    e844:	4623      	mov	r3, r4
    e846:	f7ff fbdd 	bl	e004 <Ftm_Pwm_Ip_UpdatePwmChannel>
                                      Channel,
                                      FirstEdge,
                                      SecondEdgeEdge,
                                      SoftwareTrigger);
}
    e84a:	bf00      	nop
    e84c:	b006      	add	sp, #24
    e84e:	bd10      	pop	{r4, pc}
    e850:	1fff8e5c 	.word	0x1fff8e5c
    e854:	1fff8e1c 	.word	0x1fff8e1c
    e858:	1fff8fec 	.word	0x1fff8fec

0000e85c <Ftm_Pwm_Ip_DisableTrigger>:
*
* @implements Ftm_Pwm_Ip_DisableTrigger_Activity
**/
void  Ftm_Pwm_Ip_DisableTrigger(uint8 Instance,
                                uint32 TriggerMask)
{
    e85c:	b500      	push	{lr}
    e85e:	b085      	sub	sp, #20
    e860:	4603      	mov	r3, r0
    e862:	9100      	str	r1, [sp, #0]
    e864:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e868:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e86c:	4a07      	ldr	r2, [pc, #28]	; (e88c <Ftm_Pwm_Ip_DisableTrigger+0x30>)
    e86e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e872:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10();
    e874:	f006 f928 	bl	14ac8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10>

    Ftm_Pwm_Ip_DisableTriggerMask(FtmBase, TriggerMask);
    e878:	9900      	ldr	r1, [sp, #0]
    e87a:	9803      	ldr	r0, [sp, #12]
    e87c:	f7fd fdea 	bl	c454 <Ftm_Pwm_Ip_DisableTriggerMask>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10();
    e880:	f006 f94e 	bl	14b20 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10>
}
    e884:	bf00      	nop
    e886:	b005      	add	sp, #20
    e888:	f85d fb04 	ldr.w	pc, [sp], #4
    e88c:	00016494 	.word	0x00016494

0000e890 <Ftm_Pwm_Ip_EnableTrigger>:
*
* @implements Ftm_Pwm_Ip_EnableTrigger_Activity
**/
void  Ftm_Pwm_Ip_EnableTrigger(uint8 Instance,
                               uint32 TriggerMask)
{
    e890:	b500      	push	{lr}
    e892:	b085      	sub	sp, #20
    e894:	4603      	mov	r3, r0
    e896:	9100      	str	r1, [sp, #0]
    e898:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e89c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e8a0:	4a07      	ldr	r2, [pc, #28]	; (e8c0 <Ftm_Pwm_Ip_EnableTrigger+0x30>)
    e8a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8a6:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11();
    e8a8:	f006 f960 	bl	14b6c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11>

    Ftm_Pwm_Ip_EnableTriggerMask(FtmBase, TriggerMask);
    e8ac:	9900      	ldr	r1, [sp, #0]
    e8ae:	9803      	ldr	r0, [sp, #12]
    e8b0:	f7fd fddd 	bl	c46e <Ftm_Pwm_Ip_EnableTriggerMask>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11();
    e8b4:	f006 f986 	bl	14bc4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11>
}
    e8b8:	bf00      	nop
    e8ba:	b005      	add	sp, #20
    e8bc:	f85d fb04 	ldr.w	pc, [sp], #4
    e8c0:	00016494 	.word	0x00016494

0000e8c4 <Ftm_Pwm_Ip_SyncUpdate>:
 * Description   : This function will allow synchronized loading
 *                of the duty registers for all the channels of a given FTM module
 * @implements Ftm_Pwm_Ip_SyncUpdate_Activity
 **/
void Ftm_Pwm_Ip_SyncUpdate(uint8 Instance)
{
    e8c4:	b500      	push	{lr}
    e8c6:	b085      	sub	sp, #20
    e8c8:	4603      	mov	r3, r0
    e8ca:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e8ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e8d2:	4a08      	ldr	r2, [pc, #32]	; (e8f4 <Ftm_Pwm_Ip_SyncUpdate+0x30>)
    e8d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8d8:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12();
    e8da:	f006 f999 	bl	14c10 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12>

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    e8de:	2101      	movs	r1, #1
    e8e0:	9803      	ldr	r0, [sp, #12]
    e8e2:	f7fd fc17 	bl	c114 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12();
    e8e6:	f006 f9bf 	bl	14c68 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12>
}
    e8ea:	bf00      	nop
    e8ec:	b005      	add	sp, #20
    e8ee:	f85d fb04 	ldr.w	pc, [sp], #4
    e8f2:	bf00      	nop
    e8f4:	00016494 	.word	0x00016494

0000e8f8 <Ftm_Pwm_Ip_SetChannelDeadTime>:
 * @implements Ftm_Pwm_Ip_SetChannelDeadTime_Activity
 **/
void Ftm_Pwm_Ip_SetChannelDeadTime(uint8 Instance,
                                   uint8 Channel,
                                   uint16 DeadTimeVal)
{
    e8f8:	b500      	push	{lr}
    e8fa:	b085      	sub	sp, #20
    e8fc:	4603      	mov	r3, r0
    e8fe:	f88d 3007 	strb.w	r3, [sp, #7]
    e902:	460b      	mov	r3, r1
    e904:	f88d 3006 	strb.w	r3, [sp, #6]
    e908:	4613      	mov	r3, r2
    e90a:	f8ad 3004 	strh.w	r3, [sp, #4]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e90e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e912:	4a17      	ldr	r2, [pc, #92]	; (e970 <Ftm_Pwm_Ip_SetChannelDeadTime+0x78>)
    e914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e918:	9303      	str	r3, [sp, #12]
   
#else
    (void)Channel;
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13();
    e91a:	f006 f9cb 	bl	14cb4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13>

    if (DeadTimeVal < 64U)
    e91e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e922:	2b3f      	cmp	r3, #63	; 0x3f
    e924:	d80b      	bhi.n	e93e <Ftm_Pwm_Ip_SetChannelDeadTime+0x46>
    {   /* Set the Deadtime Value */
        Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, (uint8)DeadTimeVal);
    e926:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e92a:	b2db      	uxtb	r3, r3
    e92c:	4619      	mov	r1, r3
    e92e:	9803      	ldr	r0, [sp, #12]
    e930:	f7fd fd42 	bl	c3b8 <Ftm_Pwm_Ip_SetDeadtimeCount>
        /* Set the Extended Deadtime Value */
        Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, 0U);
    e934:	2100      	movs	r1, #0
    e936:	9803      	ldr	r0, [sp, #12]
    e938:	f7fd fd62 	bl	c400 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    e93c:	e012      	b.n	e964 <Ftm_Pwm_Ip_SetChannelDeadTime+0x6c>
    }
    else
    {
        /* Set the Deadtime Value */
        Ftm_Pwm_Ip_SetDeadtimeCount (FtmBase, (uint8)(DeadTimeVal & (uint8)0x3F));
    e93e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e942:	b2db      	uxtb	r3, r3
    e944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    e948:	b2db      	uxtb	r3, r3
    e94a:	4619      	mov	r1, r3
    e94c:	9803      	ldr	r0, [sp, #12]
    e94e:	f7fd fd33 	bl	c3b8 <Ftm_Pwm_Ip_SetDeadtimeCount>
        /* Set the Extended Deadtime Value */
        Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, (uint8)(DeadTimeVal >> 6U));
    e952:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e956:	099b      	lsrs	r3, r3, #6
    e958:	b29b      	uxth	r3, r3
    e95a:	b2db      	uxtb	r3, r3
    e95c:	4619      	mov	r1, r3
    e95e:	9803      	ldr	r0, [sp, #12]
    e960:	f7fd fd4e 	bl	c400 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13();
    e964:	f006 f9d2 	bl	14d0c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13>
}
    e968:	bf00      	nop
    e96a:	b005      	add	sp, #20
    e96c:	f85d fb04 	ldr.w	pc, [sp], #4
    e970:	00016494 	.word	0x00016494

0000e974 <Pwm_GetPartitionChannelIdx>:
     (PWM_FAST_UPDATE_API                   == STD_ON) || \
     (PWM_SET_DUTY_PHASE_SHIFT_API          == STD_ON))

static inline uint8 Pwm_GetPartitionChannelIdx(uint32          CoreId,
                                               Pwm_ChannelType ChannelNumber)
{
    e974:	b082      	sub	sp, #8
    e976:	9001      	str	r0, [sp, #4]
    e978:	460b      	mov	r3, r1
    e97a:	f88d 3003 	strb.w	r3, [sp, #3]
    return (*(Pwm_aState[CoreId].PwmConfig)->PwmLogicalToPartitionMap)[ChannelNumber];
#else
    /* Avoid compiler warning */
    (void)CoreId;

    return ChannelNumber;
    e97e:	f89d 3003 	ldrb.w	r3, [sp, #3]
#endif
}
    e982:	4618      	mov	r0, r3
    e984:	b002      	add	sp, #8
    e986:	4770      	bx	lr

0000e988 <Pwm_Init>:
*
* @implements   Pwm_Init_Activity
*
*/
void Pwm_Init(const Pwm_ConfigType * ConfigPtr)
{
    e988:	b510      	push	{r4, lr}
    e98a:	b084      	sub	sp, #16
    e98c:	9001      	str	r0, [sp, #4]
#endif
    uint32                      CoreId;
    uint8                       Index;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    e98e:	2300      	movs	r3, #0
    e990:	9302      	str	r3, [sp, #8]
#else
            Pwm_aState[CoreId].PwmConfig = &Pwm_Config;
#endif
            (void)ConfigPtr;
#else
            Pwm_aState[CoreId].PwmConfig = ConfigPtr;
    e992:	493e      	ldr	r1, [pc, #248]	; (ea8c <Pwm_Init+0x104>)
    e994:	9a02      	ldr	r2, [sp, #8]
    e996:	4613      	mov	r3, r2
    e998:	009b      	lsls	r3, r3, #2
    e99a:	4413      	add	r3, r2
    e99c:	009b      	lsls	r3, r3, #2
    e99e:	440b      	add	r3, r1
    e9a0:	9a01      	ldr	r2, [sp, #4]
    e9a2:	601a      	str	r2, [r3, #0]
#endif

#if (PWM_HW_INSTANCE_USED == STD_ON)
            /* IPW call to hw instance initialization when PWM controls the entire hw instance */
            for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    e9a4:	2300      	movs	r3, #0
    e9a6:	f88d 300f 	strb.w	r3, [sp, #15]
    e9aa:	e017      	b.n	e9dc <Pwm_Init+0x54>
            {
                Pwm_Ipw_InitInstance(&((*Pwm_aState[CoreId].PwmConfig->PwmInstancesConfig)[Index]));
    e9ac:	4937      	ldr	r1, [pc, #220]	; (ea8c <Pwm_Init+0x104>)
    e9ae:	9a02      	ldr	r2, [sp, #8]
    e9b0:	4613      	mov	r3, r2
    e9b2:	009b      	lsls	r3, r3, #2
    e9b4:	4413      	add	r3, r2
    e9b6:	009b      	lsls	r3, r3, #2
    e9b8:	440b      	add	r3, r1
    e9ba:	681b      	ldr	r3, [r3, #0]
    e9bc:	68d9      	ldr	r1, [r3, #12]
    e9be:	f89d 200f 	ldrb.w	r2, [sp, #15]
    e9c2:	4613      	mov	r3, r2
    e9c4:	005b      	lsls	r3, r3, #1
    e9c6:	4413      	add	r3, r2
    e9c8:	009b      	lsls	r3, r3, #2
    e9ca:	440b      	add	r3, r1
    e9cc:	4618      	mov	r0, r3
    e9ce:	f000 f9cd 	bl	ed6c <Pwm_Ipw_InitInstance>
            for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    e9d2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e9d6:	3301      	adds	r3, #1
    e9d8:	f88d 300f 	strb.w	r3, [sp, #15]
    e9dc:	492b      	ldr	r1, [pc, #172]	; (ea8c <Pwm_Init+0x104>)
    e9de:	9a02      	ldr	r2, [sp, #8]
    e9e0:	4613      	mov	r3, r2
    e9e2:	009b      	lsls	r3, r3, #2
    e9e4:	4413      	add	r3, r2
    e9e6:	009b      	lsls	r3, r3, #2
    e9e8:	440b      	add	r3, r1
    e9ea:	681b      	ldr	r3, [r3, #0]
    e9ec:	7a1b      	ldrb	r3, [r3, #8]
    e9ee:	f89d 200f 	ldrb.w	r2, [sp, #15]
    e9f2:	429a      	cmp	r2, r3
    e9f4:	d3da      	bcc.n	e9ac <Pwm_Init+0x24>
            }
#endif

            /* All validations passed. Here starts the actual functional code of the function */
            for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    e9f6:	2300      	movs	r3, #0
    e9f8:	f88d 300f 	strb.w	r3, [sp, #15]
    e9fc:	e034      	b.n	ea68 <Pwm_Init+0xe0>
            {
                Pwm_aState[CoreId].PwmChannelConfigs[Index] = &((*Pwm_aState[CoreId].PwmConfig->PwmChannelsConfig)[Index]);
    e9fe:	4923      	ldr	r1, [pc, #140]	; (ea8c <Pwm_Init+0x104>)
    ea00:	9a02      	ldr	r2, [sp, #8]
    ea02:	4613      	mov	r3, r2
    ea04:	009b      	lsls	r3, r3, #2
    ea06:	4413      	add	r3, r2
    ea08:	009b      	lsls	r3, r3, #2
    ea0a:	440b      	add	r3, r1
    ea0c:	681b      	ldr	r3, [r3, #0]
    ea0e:	6859      	ldr	r1, [r3, #4]
    ea10:	f89d 200f 	ldrb.w	r2, [sp, #15]
    ea14:	f89d 000f 	ldrb.w	r0, [sp, #15]
    ea18:	4613      	mov	r3, r2
    ea1a:	005b      	lsls	r3, r3, #1
    ea1c:	4413      	add	r3, r2
    ea1e:	00db      	lsls	r3, r3, #3
    ea20:	4419      	add	r1, r3
    ea22:	4c1a      	ldr	r4, [pc, #104]	; (ea8c <Pwm_Init+0x104>)
    ea24:	9a02      	ldr	r2, [sp, #8]
    ea26:	4613      	mov	r3, r2
    ea28:	009b      	lsls	r3, r3, #2
    ea2a:	4413      	add	r3, r2
    ea2c:	4403      	add	r3, r0
    ea2e:	3302      	adds	r3, #2
    ea30:	009b      	lsls	r3, r3, #2
    ea32:	4423      	add	r3, r4
    ea34:	6059      	str	r1, [r3, #4]
                /* Continue to hw channel initialization */
                Pwm_Ipw_Init(&((*Pwm_aState[CoreId].PwmConfig->PwmChannelsConfig)[Index].IpwChannelCfg));
    ea36:	4915      	ldr	r1, [pc, #84]	; (ea8c <Pwm_Init+0x104>)
    ea38:	9a02      	ldr	r2, [sp, #8]
    ea3a:	4613      	mov	r3, r2
    ea3c:	009b      	lsls	r3, r3, #2
    ea3e:	4413      	add	r3, r2
    ea40:	009b      	lsls	r3, r3, #2
    ea42:	440b      	add	r3, r1
    ea44:	681b      	ldr	r3, [r3, #0]
    ea46:	6859      	ldr	r1, [r3, #4]
    ea48:	f89d 200f 	ldrb.w	r2, [sp, #15]
    ea4c:	4613      	mov	r3, r2
    ea4e:	005b      	lsls	r3, r3, #1
    ea50:	4413      	add	r3, r2
    ea52:	00db      	lsls	r3, r3, #3
    ea54:	3308      	adds	r3, #8
    ea56:	440b      	add	r3, r1
    ea58:	4618      	mov	r0, r3
    ea5a:	f000 f965 	bl	ed28 <Pwm_Ipw_Init>
            for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    ea5e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ea62:	3301      	adds	r3, #1
    ea64:	f88d 300f 	strb.w	r3, [sp, #15]
    ea68:	4908      	ldr	r1, [pc, #32]	; (ea8c <Pwm_Init+0x104>)
    ea6a:	9a02      	ldr	r2, [sp, #8]
    ea6c:	4613      	mov	r3, r2
    ea6e:	009b      	lsls	r3, r3, #2
    ea70:	4413      	add	r3, r2
    ea72:	009b      	lsls	r3, r3, #2
    ea74:	440b      	add	r3, r1
    ea76:	681b      	ldr	r3, [r3, #0]
    ea78:	781b      	ldrb	r3, [r3, #0]
    ea7a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    ea7e:	429a      	cmp	r2, r3
    ea80:	d3bd      	bcc.n	e9fe <Pwm_Init+0x76>
#if (PWM_VALIDATE_GLOBAL_CONFIG_CALL == STD_ON)
    }

    Pwm_EndValidateGlobalConfigCall(CoreId, CallIsValid, PWM_INIT_ID);
#endif
}
    ea82:	bf00      	nop
    ea84:	bf00      	nop
    ea86:	b004      	add	sp, #16
    ea88:	bd10      	pop	{r4, pc}
    ea8a:	bf00      	nop
    ea8c:	1fff8b38 	.word	0x1fff8b38

0000ea90 <Pwm_DeInit>:
*
* @implements   Pwm_DeInit_Activity
*
*/
void Pwm_DeInit(void)
{
    ea90:	b500      	push	{lr}
    ea92:	b085      	sub	sp, #20
#endif
    uint32                      CoreId;
    uint8                       Index;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    ea94:	2300      	movs	r3, #0
    ea96:	9302      	str	r3, [sp, #8]
    {
#endif

        /* All validations passed. Here starts the actual functional code of the function */
        /* Deinitialize all channels */
        for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    ea98:	2300      	movs	r3, #0
    ea9a:	f88d 300f 	strb.w	r3, [sp, #15]
    ea9e:	e02a      	b.n	eaf6 <Pwm_DeInit+0x66>
        {
            Pwm_Ipw_DeInit(&((*Pwm_aState[CoreId].PwmChannelConfigs)[Index].IpwChannelCfg), (*Pwm_aState[CoreId].PwmChannelConfigs)[Index].ChannelIdleState);
    eaa0:	4945      	ldr	r1, [pc, #276]	; (ebb8 <Pwm_DeInit+0x128>)
    eaa2:	9a02      	ldr	r2, [sp, #8]
    eaa4:	4613      	mov	r3, r2
    eaa6:	009b      	lsls	r3, r3, #2
    eaa8:	4413      	add	r3, r2
    eaaa:	009b      	lsls	r3, r3, #2
    eaac:	440b      	add	r3, r1
    eaae:	330c      	adds	r3, #12
    eab0:	6819      	ldr	r1, [r3, #0]
    eab2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    eab6:	4613      	mov	r3, r2
    eab8:	005b      	lsls	r3, r3, #1
    eaba:	4413      	add	r3, r2
    eabc:	00db      	lsls	r3, r3, #3
    eabe:	440b      	add	r3, r1
    eac0:	f103 0008 	add.w	r0, r3, #8
    eac4:	493c      	ldr	r1, [pc, #240]	; (ebb8 <Pwm_DeInit+0x128>)
    eac6:	9a02      	ldr	r2, [sp, #8]
    eac8:	4613      	mov	r3, r2
    eaca:	009b      	lsls	r3, r3, #2
    eacc:	4413      	add	r3, r2
    eace:	009b      	lsls	r3, r3, #2
    ead0:	440b      	add	r3, r1
    ead2:	330c      	adds	r3, #12
    ead4:	6819      	ldr	r1, [r3, #0]
    ead6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    eada:	4613      	mov	r3, r2
    eadc:	005b      	lsls	r3, r3, #1
    eade:	4413      	add	r3, r2
    eae0:	00db      	lsls	r3, r3, #3
    eae2:	440b      	add	r3, r1
    eae4:	695b      	ldr	r3, [r3, #20]
    eae6:	4619      	mov	r1, r3
    eae8:	f000 f996 	bl	ee18 <Pwm_Ipw_DeInit>
        for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
    eaec:	f89d 300f 	ldrb.w	r3, [sp, #15]
    eaf0:	3301      	adds	r3, #1
    eaf2:	f88d 300f 	strb.w	r3, [sp, #15]
    eaf6:	4930      	ldr	r1, [pc, #192]	; (ebb8 <Pwm_DeInit+0x128>)
    eaf8:	9a02      	ldr	r2, [sp, #8]
    eafa:	4613      	mov	r3, r2
    eafc:	009b      	lsls	r3, r3, #2
    eafe:	4413      	add	r3, r2
    eb00:	009b      	lsls	r3, r3, #2
    eb02:	440b      	add	r3, r1
    eb04:	681b      	ldr	r3, [r3, #0]
    eb06:	781b      	ldrb	r3, [r3, #0]
    eb08:	f89d 200f 	ldrb.w	r2, [sp, #15]
    eb0c:	429a      	cmp	r2, r3
    eb0e:	d3c7      	bcc.n	eaa0 <Pwm_DeInit+0x10>
        }

#if (PWM_HW_INSTANCE_USED == STD_ON)
        ConfigPtr =  Pwm_aState[CoreId].PwmConfig;
    eb10:	4929      	ldr	r1, [pc, #164]	; (ebb8 <Pwm_DeInit+0x128>)
    eb12:	9a02      	ldr	r2, [sp, #8]
    eb14:	4613      	mov	r3, r2
    eb16:	009b      	lsls	r3, r3, #2
    eb18:	4413      	add	r3, r2
    eb1a:	009b      	lsls	r3, r3, #2
    eb1c:	440b      	add	r3, r1
    eb1e:	681b      	ldr	r3, [r3, #0]
    eb20:	9301      	str	r3, [sp, #4]
        /* IPW call to hw instance initialization when PWM controls the entire hw instance */
        for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    eb22:	2300      	movs	r3, #0
    eb24:	f88d 300f 	strb.w	r3, [sp, #15]
    eb28:	e010      	b.n	eb4c <Pwm_DeInit+0xbc>
        {
            Pwm_Ipw_DeInitInstance(&((*ConfigPtr->PwmInstancesConfig)[Index]));
    eb2a:	9b01      	ldr	r3, [sp, #4]
    eb2c:	68d9      	ldr	r1, [r3, #12]
    eb2e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    eb32:	4613      	mov	r3, r2
    eb34:	005b      	lsls	r3, r3, #1
    eb36:	4413      	add	r3, r2
    eb38:	009b      	lsls	r3, r3, #2
    eb3a:	440b      	add	r3, r1
    eb3c:	4618      	mov	r0, r3
    eb3e:	f000 f98b 	bl	ee58 <Pwm_Ipw_DeInitInstance>
        for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
    eb42:	f89d 300f 	ldrb.w	r3, [sp, #15]
    eb46:	3301      	adds	r3, #1
    eb48:	f88d 300f 	strb.w	r3, [sp, #15]
    eb4c:	491a      	ldr	r1, [pc, #104]	; (ebb8 <Pwm_DeInit+0x128>)
    eb4e:	9a02      	ldr	r2, [sp, #8]
    eb50:	4613      	mov	r3, r2
    eb52:	009b      	lsls	r3, r3, #2
    eb54:	4413      	add	r3, r2
    eb56:	009b      	lsls	r3, r3, #2
    eb58:	440b      	add	r3, r1
    eb5a:	681b      	ldr	r3, [r3, #0]
    eb5c:	7a1b      	ldrb	r3, [r3, #8]
    eb5e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    eb62:	429a      	cmp	r2, r3
    eb64:	d3e1      	bcc.n	eb2a <Pwm_DeInit+0x9a>
        }
#endif
        /* Set global configuration pointer back to NULL_PTR */
        Pwm_aState[CoreId].PwmConfig = NULL_PTR;
    eb66:	4914      	ldr	r1, [pc, #80]	; (ebb8 <Pwm_DeInit+0x128>)
    eb68:	9a02      	ldr	r2, [sp, #8]
    eb6a:	4613      	mov	r3, r2
    eb6c:	009b      	lsls	r3, r3, #2
    eb6e:	4413      	add	r3, r2
    eb70:	009b      	lsls	r3, r3, #2
    eb72:	440b      	add	r3, r1
    eb74:	2200      	movs	r2, #0
    eb76:	601a      	str	r2, [r3, #0]

        /* Set all channels config to NULL_PTR */
        for(Index = 0; Index < PWM_CONFIG_LOGIC_CHANNELS; Index++)
    eb78:	2300      	movs	r3, #0
    eb7a:	f88d 300f 	strb.w	r3, [sp, #15]
    eb7e:	e011      	b.n	eba4 <Pwm_DeInit+0x114>
        {
            Pwm_aState[CoreId].PwmChannelConfigs[Index] = NULL_PTR;
    eb80:	f89d 100f 	ldrb.w	r1, [sp, #15]
    eb84:	480c      	ldr	r0, [pc, #48]	; (ebb8 <Pwm_DeInit+0x128>)
    eb86:	9a02      	ldr	r2, [sp, #8]
    eb88:	4613      	mov	r3, r2
    eb8a:	009b      	lsls	r3, r3, #2
    eb8c:	4413      	add	r3, r2
    eb8e:	440b      	add	r3, r1
    eb90:	3302      	adds	r3, #2
    eb92:	009b      	lsls	r3, r3, #2
    eb94:	4403      	add	r3, r0
    eb96:	2200      	movs	r2, #0
    eb98:	605a      	str	r2, [r3, #4]
        for(Index = 0; Index < PWM_CONFIG_LOGIC_CHANNELS; Index++)
    eb9a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    eb9e:	3301      	adds	r3, #1
    eba0:	f88d 300f 	strb.w	r3, [sp, #15]
    eba4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    eba8:	2b00      	cmp	r3, #0
    ebaa:	d0e9      	beq.n	eb80 <Pwm_DeInit+0xf0>
    }

    Pwm_EndValidateGlobalConfigCall(CoreId, CallIsValid, PWM_DEINIT_ID);
#endif

}
    ebac:	bf00      	nop
    ebae:	bf00      	nop
    ebb0:	b005      	add	sp, #20
    ebb2:	f85d fb04 	ldr.w	pc, [sp], #4
    ebb6:	bf00      	nop
    ebb8:	1fff8b38 	.word	0x1fff8b38

0000ebbc <Pwm_SetDutyCycle>:
* @implements   Pwm_SetDutyCycle_Activity
*
*/
void Pwm_SetDutyCycle(Pwm_ChannelType   ChannelNumber,
                      uint16            DutyCycle)
{
    ebbc:	b500      	push	{lr}
    ebbe:	b087      	sub	sp, #28
    ebc0:	4603      	mov	r3, r0
    ebc2:	460a      	mov	r2, r1
    ebc4:	f88d 3007 	strb.w	r3, [sp, #7]
    ebc8:	4613      	mov	r3, r2
    ebca:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint32          CoreId;
    Pwm_ChannelType PartitionChannelIdx;
    Std_ReturnType  RetVal = (Std_ReturnType)E_OK;
    ebce:	2300      	movs	r3, #0
    ebd0:	f88d 3017 	strb.w	r3, [sp, #23]

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    ebd4:	2300      	movs	r3, #0
    ebd6:	9304      	str	r3, [sp, #16]

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    if ((Std_ReturnType)E_OK == Pwm_ValidateChannelConfigCall(CoreId, ChannelNumber, PWM_SETDUTYCYCLE_ID))
    {
#endif
        PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
    ebd8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ebdc:	4619      	mov	r1, r3
    ebde:	9804      	ldr	r0, [sp, #16]
    ebe0:	f7ff fec8 	bl	e974 <Pwm_GetPartitionChannelIdx>
    ebe4:	4603      	mov	r3, r0
    ebe6:	f88d 300f 	strb.w	r3, [sp, #15]
#if (PWM_PARAM_CHECK == STD_ON)
        if ((Std_ReturnType)E_OK == Pwm_ValidateParamDuty(DutyCycle, PWM_SETDUTYCYCLE_ID))
        {
#endif
            /* All validations passed. Here starts the actual functional code of the function */
            RetVal = Pwm_Ipw_SetDutyCycle(DutyCycle, &((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].IpwChannelCfg));
    ebea:	490f      	ldr	r1, [pc, #60]	; (ec28 <Pwm_SetDutyCycle+0x6c>)
    ebec:	9a04      	ldr	r2, [sp, #16]
    ebee:	4613      	mov	r3, r2
    ebf0:	009b      	lsls	r3, r3, #2
    ebf2:	4413      	add	r3, r2
    ebf4:	009b      	lsls	r3, r3, #2
    ebf6:	440b      	add	r3, r1
    ebf8:	330c      	adds	r3, #12
    ebfa:	6819      	ldr	r1, [r3, #0]
    ebfc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    ec00:	4613      	mov	r3, r2
    ec02:	005b      	lsls	r3, r3, #1
    ec04:	4413      	add	r3, r2
    ec06:	00db      	lsls	r3, r3, #3
    ec08:	440b      	add	r3, r1
    ec0a:	f103 0208 	add.w	r2, r3, #8
    ec0e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    ec12:	4611      	mov	r1, r2
    ec14:	4618      	mov	r0, r3
    ec16:	f000 f93b 	bl	ee90 <Pwm_Ipw_SetDutyCycle>
    ec1a:	4603      	mov	r3, r0
    ec1c:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    Pwm_EndValidateChannelConfigCall(ChannelNumber);
#endif

}
    ec20:	bf00      	nop
    ec22:	b007      	add	sp, #28
    ec24:	f85d fb04 	ldr.w	pc, [sp], #4
    ec28:	1fff8b38 	.word	0x1fff8b38

0000ec2c <Pwm_SetPeriodAndDuty>:
*
*/
void Pwm_SetPeriodAndDuty(Pwm_ChannelType   ChannelNumber,
                          Pwm_PeriodType    Period,
                          uint16            DutyCycle)
{
    ec2c:	b500      	push	{lr}
    ec2e:	b085      	sub	sp, #20
    ec30:	4603      	mov	r3, r0
    ec32:	f88d 3007 	strb.w	r3, [sp, #7]
    ec36:	460b      	mov	r3, r1
    ec38:	f8ad 3004 	strh.w	r3, [sp, #4]
    ec3c:	4613      	mov	r3, r2
    ec3e:	f8ad 3002 	strh.w	r3, [sp, #2]
    uint32          CoreId;
    Pwm_ChannelType PartitionChannelIdx;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    ec42:	2300      	movs	r3, #0
    ec44:	9303      	str	r3, [sp, #12]

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    if ((Std_ReturnType)E_OK == Pwm_ValidateChannelConfigCall(CoreId, ChannelNumber, PWM_SETPERIODANDDUTY_ID))
    {
#endif
        PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
    ec46:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ec4a:	4619      	mov	r1, r3
    ec4c:	9803      	ldr	r0, [sp, #12]
    ec4e:	f7ff fe91 	bl	e974 <Pwm_GetPartitionChannelIdx>
    ec52:	4603      	mov	r3, r0
    ec54:	f88d 300b 	strb.w	r3, [sp, #11]
            if ((Std_ReturnType)E_OK == Pwm_ValidateParamDuty(DutyCycle, PWM_SETPERIODANDDUTY_ID))
            {
#endif

                /* All validations passed. Here starts the actual functional code of the function */
                (void)Pwm_Ipw_SetPeriodAndDuty(Period, DutyCycle, &((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].IpwChannelCfg));
    ec58:	490e      	ldr	r1, [pc, #56]	; (ec94 <Pwm_SetPeriodAndDuty+0x68>)
    ec5a:	9a03      	ldr	r2, [sp, #12]
    ec5c:	4613      	mov	r3, r2
    ec5e:	009b      	lsls	r3, r3, #2
    ec60:	4413      	add	r3, r2
    ec62:	009b      	lsls	r3, r3, #2
    ec64:	440b      	add	r3, r1
    ec66:	330c      	adds	r3, #12
    ec68:	6819      	ldr	r1, [r3, #0]
    ec6a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    ec6e:	4613      	mov	r3, r2
    ec70:	005b      	lsls	r3, r3, #1
    ec72:	4413      	add	r3, r2
    ec74:	00db      	lsls	r3, r3, #3
    ec76:	440b      	add	r3, r1
    ec78:	f103 0208 	add.w	r2, r3, #8
    ec7c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    ec80:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    ec84:	4618      	mov	r0, r3
    ec86:	f000 f94f 	bl	ef28 <Pwm_Ipw_SetPeriodAndDuty>
    }

    Pwm_EndValidateChannelConfigCall(ChannelNumber);
#endif

}
    ec8a:	bf00      	nop
    ec8c:	b005      	add	sp, #20
    ec8e:	f85d fb04 	ldr.w	pc, [sp], #4
    ec92:	bf00      	nop
    ec94:	1fff8b38 	.word	0x1fff8b38

0000ec98 <Pwm_SetOutputToIdle>:
*
* @implements   Pwm_SetOutputToIdle_Activity
*
*/
void Pwm_SetOutputToIdle(Pwm_ChannelType ChannelNumber)
{
    ec98:	b500      	push	{lr}
    ec9a:	b085      	sub	sp, #20
    ec9c:	4603      	mov	r3, r0
    ec9e:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32          CoreId;
    Pwm_ChannelType PartitionChannelIdx;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
    eca2:	2300      	movs	r3, #0
    eca4:	9303      	str	r3, [sp, #12]
#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    if ((Std_ReturnType)E_OK == Pwm_ValidateChannelConfigCall(CoreId, ChannelNumber, PWM_SETOUTPUTTOIDLE_ID))
    {
#endif

        PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
    eca6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ecaa:	4619      	mov	r1, r3
    ecac:	9803      	ldr	r0, [sp, #12]
    ecae:	f7ff fe61 	bl	e974 <Pwm_GetPartitionChannelIdx>
    ecb2:	4603      	mov	r3, r0
    ecb4:	f88d 300b 	strb.w	r3, [sp, #11]
        if((Std_ReturnType)E_OK == Pwm_ValidateSetOutPutToIdle(CoreId, PartitionChannelIdx))
        {
#endif /* PWM_SETOUTPUTTOIDLE_PLAUSABILITY && PWM_PARAM_CHECK */

            /* All validations passed. Here starts the actual functional code of the function */
            Pwm_Ipw_SetOutputToIdle((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].ChannelIdleState, &((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].IpwChannelCfg));
    ecb8:	491a      	ldr	r1, [pc, #104]	; (ed24 <Pwm_SetOutputToIdle+0x8c>)
    ecba:	9a03      	ldr	r2, [sp, #12]
    ecbc:	4613      	mov	r3, r2
    ecbe:	009b      	lsls	r3, r3, #2
    ecc0:	4413      	add	r3, r2
    ecc2:	009b      	lsls	r3, r3, #2
    ecc4:	440b      	add	r3, r1
    ecc6:	330c      	adds	r3, #12
    ecc8:	6819      	ldr	r1, [r3, #0]
    ecca:	f89d 200b 	ldrb.w	r2, [sp, #11]
    ecce:	4613      	mov	r3, r2
    ecd0:	005b      	lsls	r3, r3, #1
    ecd2:	4413      	add	r3, r2
    ecd4:	00db      	lsls	r3, r3, #3
    ecd6:	440b      	add	r3, r1
    ecd8:	6958      	ldr	r0, [r3, #20]
    ecda:	4912      	ldr	r1, [pc, #72]	; (ed24 <Pwm_SetOutputToIdle+0x8c>)
    ecdc:	9a03      	ldr	r2, [sp, #12]
    ecde:	4613      	mov	r3, r2
    ece0:	009b      	lsls	r3, r3, #2
    ece2:	4413      	add	r3, r2
    ece4:	009b      	lsls	r3, r3, #2
    ece6:	440b      	add	r3, r1
    ece8:	330c      	adds	r3, #12
    ecea:	6819      	ldr	r1, [r3, #0]
    ecec:	f89d 200b 	ldrb.w	r2, [sp, #11]
    ecf0:	4613      	mov	r3, r2
    ecf2:	005b      	lsls	r3, r3, #1
    ecf4:	4413      	add	r3, r2
    ecf6:	00db      	lsls	r3, r3, #3
    ecf8:	440b      	add	r3, r1
    ecfa:	3308      	adds	r3, #8
    ecfc:	4619      	mov	r1, r3
    ecfe:	f000 f959 	bl	efb4 <Pwm_Ipw_SetOutputToIdle>

            /* Mark the channel in idle output mode */
            Pwm_aState[CoreId].PwmChannelIdleState[PartitionChannelIdx] = TRUE;
    ed02:	f89d 100b 	ldrb.w	r1, [sp, #11]
    ed06:	4807      	ldr	r0, [pc, #28]	; (ed24 <Pwm_SetOutputToIdle+0x8c>)
    ed08:	9a03      	ldr	r2, [sp, #12]
    ed0a:	4613      	mov	r3, r2
    ed0c:	009b      	lsls	r3, r3, #2
    ed0e:	4413      	add	r3, r2
    ed10:	009b      	lsls	r3, r3, #2
    ed12:	4403      	add	r3, r0
    ed14:	440b      	add	r3, r1
    ed16:	3310      	adds	r3, #16
    ed18:	2201      	movs	r2, #1
    ed1a:	701a      	strb	r2, [r3, #0]
    }

    Pwm_EndValidateChannelConfigCall(ChannelNumber);
#endif

}
    ed1c:	bf00      	nop
    ed1e:	b005      	add	sp, #20
    ed20:	f85d fb04 	ldr.w	pc, [sp], #4
    ed24:	1fff8b38 	.word	0x1fff8b38

0000ed28 <Pwm_Ipw_Init>:
*
* @return       void
*
*/
void Pwm_Ipw_Init(const Pwm_IpwChannelConfigType * const IpConfig)
{
    ed28:	b410      	push	{r4}
    ed2a:	b083      	sub	sp, #12
    ed2c:	9001      	str	r0, [sp, #4]

    switch(IpConfig->ChannelType)
    ed2e:	9b01      	ldr	r3, [sp, #4]
    ed30:	681b      	ldr	r3, [r3, #0]
    ed32:	2b00      	cmp	r3, #0
    ed34:	d010      	beq.n	ed58 <Pwm_Ipw_Init+0x30>
    ed36:	2b01      	cmp	r3, #1
    ed38:	d110      	bne.n	ed5c <Pwm_Ipw_Init+0x34>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            /* Duty cycle of Ftm Ip */
            Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = IpConfig->ChannelDutyCycle;
    ed3a:	9b01      	ldr	r3, [sp, #4]
    ed3c:	7a1b      	ldrb	r3, [r3, #8]
    ed3e:	461c      	mov	r4, r3
    ed40:	9b01      	ldr	r3, [sp, #4]
    ed42:	685b      	ldr	r3, [r3, #4]
    ed44:	781b      	ldrb	r3, [r3, #0]
    ed46:	4618      	mov	r0, r3
    ed48:	9b01      	ldr	r3, [sp, #4]
    ed4a:	8959      	ldrh	r1, [r3, #10]
    ed4c:	4a06      	ldr	r2, [pc, #24]	; (ed68 <Pwm_Ipw_Init+0x40>)
    ed4e:	00e3      	lsls	r3, r4, #3
    ed50:	4403      	add	r3, r0
    ed52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            break;
    ed56:	e002      	b.n	ed5e <Pwm_Ipw_Init+0x36>
            }
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    ed58:	bf00      	nop
    ed5a:	e000      	b.n	ed5e <Pwm_Ipw_Init+0x36>
        default:
            /* Nothing to do. */
            break;
    ed5c:	bf00      	nop
    }
}
    ed5e:	bf00      	nop
    ed60:	b003      	add	sp, #12
    ed62:	f85d 4b04 	ldr.w	r4, [sp], #4
    ed66:	4770      	bx	lr
    ed68:	1fff91bc 	.word	0x1fff91bc

0000ed6c <Pwm_Ipw_InitInstance>:
*
* @return       void
*
*/
void Pwm_Ipw_InitInstance(const Pwm_IpwInstanceConfigType * const IpConfig)
{
    ed6c:	b500      	push	{lr}
    ed6e:	b085      	sub	sp, #20
    ed70:	9001      	str	r0, [sp, #4]
#if (PWM_FTM_USED == STD_ON)
    uint8 Index = 0U;
    ed72:	2300      	movs	r3, #0
    ed74:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 ChannelId = 0U;
    ed78:	2300      	movs	r3, #0
    ed7a:	f88d 300e 	strb.w	r3, [sp, #14]
#endif
    switch(IpConfig->InstanceType)
    ed7e:	9b01      	ldr	r3, [sp, #4]
    ed80:	685b      	ldr	r3, [r3, #4]
    ed82:	2b00      	cmp	r3, #0
    ed84:	d03c      	beq.n	ee00 <Pwm_Ipw_InitInstance+0x94>
    ed86:	2b01      	cmp	r3, #1
    ed88:	d13c      	bne.n	ee04 <Pwm_Ipw_InitInstance+0x98>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_INSTANCE_FTM:
            if (NULL_PTR != IpConfig->FtmInsConfig)
    ed8a:	9b01      	ldr	r3, [sp, #4]
    ed8c:	689b      	ldr	r3, [r3, #8]
    ed8e:	2b00      	cmp	r3, #0
    ed90:	d03a      	beq.n	ee08 <Pwm_Ipw_InitInstance+0x9c>
            {
                /* Call Ftm IP initialize instances */
                Ftm_Pwm_Ip_Init(IpConfig->InstanceId, (const Ftm_Pwm_Ip_UserCfgType *)IpConfig->FtmInsConfig);
    ed92:	9b01      	ldr	r3, [sp, #4]
    ed94:	781a      	ldrb	r2, [r3, #0]
    ed96:	9b01      	ldr	r3, [sp, #4]
    ed98:	689b      	ldr	r3, [r3, #8]
    ed9a:	4619      	mov	r1, r3
    ed9c:	4610      	mov	r0, r2
    ed9e:	f7fe fe8f 	bl	dac0 <Ftm_Pwm_Ip_Init>

                /* Configure all channels in the user cfg */
                for (Index = 0; Index < IpConfig->FtmInsConfig->NoOfConfiguredCh; Index++)
    eda2:	2300      	movs	r3, #0
    eda4:	f88d 300f 	strb.w	r3, [sp, #15]
    eda8:	e022      	b.n	edf0 <Pwm_Ipw_InitInstance+0x84>
                {
                    ChannelId = IpConfig->FtmInsConfig->ConfiguredChArray[Index]->ChannelId;
    edaa:	9b01      	ldr	r3, [sp, #4]
    edac:	689b      	ldr	r3, [r3, #8]
    edae:	685a      	ldr	r2, [r3, #4]
    edb0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    edb4:	009b      	lsls	r3, r3, #2
    edb6:	4413      	add	r3, r2
    edb8:	681b      	ldr	r3, [r3, #0]
    edba:	781b      	ldrb	r3, [r3, #0]
    edbc:	f88d 300e 	strb.w	r3, [sp, #14]
                    /* Update the polarity of each channel */
                    Ftm_Pwm_Ip_aPolarity[IpConfig->InstanceId][ChannelId] = IpConfig->FtmInsConfig->ConfiguredChArray[Index]->Polarity;
    edc0:	9b01      	ldr	r3, [sp, #4]
    edc2:	689b      	ldr	r3, [r3, #8]
    edc4:	685a      	ldr	r2, [r3, #4]
    edc6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    edca:	009b      	lsls	r3, r3, #2
    edcc:	4413      	add	r3, r2
    edce:	681a      	ldr	r2, [r3, #0]
    edd0:	9b01      	ldr	r3, [sp, #4]
    edd2:	781b      	ldrb	r3, [r3, #0]
    edd4:	4619      	mov	r1, r3
    edd6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    edda:	6a12      	ldr	r2, [r2, #32]
    eddc:	480d      	ldr	r0, [pc, #52]	; (ee14 <Pwm_Ipw_InitInstance+0xa8>)
    edde:	00c9      	lsls	r1, r1, #3
    ede0:	440b      	add	r3, r1
    ede2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                for (Index = 0; Index < IpConfig->FtmInsConfig->NoOfConfiguredCh; Index++)
    ede6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    edea:	3301      	adds	r3, #1
    edec:	f88d 300f 	strb.w	r3, [sp, #15]
    edf0:	9b01      	ldr	r3, [sp, #4]
    edf2:	689b      	ldr	r3, [r3, #8]
    edf4:	7a1b      	ldrb	r3, [r3, #8]
    edf6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    edfa:	429a      	cmp	r2, r3
    edfc:	d3d5      	bcc.n	edaa <Pwm_Ipw_InitInstance+0x3e>
                }
            }
            break;
    edfe:	e003      	b.n	ee08 <Pwm_Ipw_InitInstance+0x9c>
#endif
        case PWM_INSTANCE_NONE:
            /* Nothing to do. No hw instance assigned to the logical instance */
            break;
    ee00:	bf00      	nop
    ee02:	e002      	b.n	ee0a <Pwm_Ipw_InitInstance+0x9e>
        default:
            /* Nothing to do. */
            break;
    ee04:	bf00      	nop
    ee06:	e000      	b.n	ee0a <Pwm_Ipw_InitInstance+0x9e>
            break;
    ee08:	bf00      	nop
    }
}
    ee0a:	bf00      	nop
    ee0c:	b005      	add	sp, #20
    ee0e:	f85d fb04 	ldr.w	pc, [sp], #4
    ee12:	bf00      	nop
    ee14:	1fff913c 	.word	0x1fff913c

0000ee18 <Pwm_Ipw_DeInit>:
*
* @return       void
*
*/
void Pwm_Ipw_DeInit(const Pwm_IpwChannelConfigType * const IpConfig, Pwm_OutputStateType ChannelIdleState)
{
    ee18:	b082      	sub	sp, #8
    ee1a:	9001      	str	r0, [sp, #4]
    ee1c:	9100      	str	r1, [sp, #0]

    switch(IpConfig->ChannelType)
    ee1e:	9b01      	ldr	r3, [sp, #4]
    ee20:	681b      	ldr	r3, [r3, #0]
    ee22:	2b00      	cmp	r3, #0
    ee24:	d00f      	beq.n	ee46 <Pwm_Ipw_DeInit+0x2e>
    ee26:	2b01      	cmp	r3, #1
    ee28:	d10f      	bne.n	ee4a <Pwm_Ipw_DeInit+0x32>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            /* Duty cycle of Ftm Ip */
            Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = 0U;
    ee2a:	9b01      	ldr	r3, [sp, #4]
    ee2c:	7a1b      	ldrb	r3, [r3, #8]
    ee2e:	4618      	mov	r0, r3
    ee30:	9b01      	ldr	r3, [sp, #4]
    ee32:	685b      	ldr	r3, [r3, #4]
    ee34:	781b      	ldrb	r3, [r3, #0]
    ee36:	4619      	mov	r1, r3
    ee38:	4a06      	ldr	r2, [pc, #24]	; (ee54 <Pwm_Ipw_DeInit+0x3c>)
    ee3a:	00c3      	lsls	r3, r0, #3
    ee3c:	440b      	add	r3, r1
    ee3e:	2100      	movs	r1, #0
    ee40:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            break;
    ee44:	e002      	b.n	ee4c <Pwm_Ipw_DeInit+0x34>
            }
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    ee46:	bf00      	nop
    ee48:	e000      	b.n	ee4c <Pwm_Ipw_DeInit+0x34>
        default:
            /* Nothing to do. */
            break;
    ee4a:	bf00      	nop
    }
    (void) ChannelIdleState;

}
    ee4c:	bf00      	nop
    ee4e:	b002      	add	sp, #8
    ee50:	4770      	bx	lr
    ee52:	bf00      	nop
    ee54:	1fff91bc 	.word	0x1fff91bc

0000ee58 <Pwm_Ipw_DeInitInstance>:
*
* @return       void
*
*/
void Pwm_Ipw_DeInitInstance(const Pwm_IpwInstanceConfigType * const IpConfig)
{
    ee58:	b500      	push	{lr}
    ee5a:	b083      	sub	sp, #12
    ee5c:	9001      	str	r0, [sp, #4]

    switch(IpConfig->InstanceType)
    ee5e:	9b01      	ldr	r3, [sp, #4]
    ee60:	685b      	ldr	r3, [r3, #4]
    ee62:	2b00      	cmp	r3, #0
    ee64:	d00b      	beq.n	ee7e <Pwm_Ipw_DeInitInstance+0x26>
    ee66:	2b01      	cmp	r3, #1
    ee68:	d10b      	bne.n	ee82 <Pwm_Ipw_DeInitInstance+0x2a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_INSTANCE_FTM:
            if (NULL_PTR != IpConfig->FtmInsConfig)
    ee6a:	9b01      	ldr	r3, [sp, #4]
    ee6c:	689b      	ldr	r3, [r3, #8]
    ee6e:	2b00      	cmp	r3, #0
    ee70:	d009      	beq.n	ee86 <Pwm_Ipw_DeInitInstance+0x2e>
            {
                /* Call Ftm IP initialize instances */
                Ftm_Pwm_Ip_DeInit(IpConfig->InstanceId);
    ee72:	9b01      	ldr	r3, [sp, #4]
    ee74:	781b      	ldrb	r3, [r3, #0]
    ee76:	4618      	mov	r0, r3
    ee78:	f7fe fe80 	bl	db7c <Ftm_Pwm_Ip_DeInit>
            }
            break;
    ee7c:	e003      	b.n	ee86 <Pwm_Ipw_DeInitInstance+0x2e>
#endif
        case PWM_INSTANCE_NONE:
            /* Nothing to do. No hw instance assigned to the logical instance */
            break;
    ee7e:	bf00      	nop
    ee80:	e002      	b.n	ee88 <Pwm_Ipw_DeInitInstance+0x30>
        default:
            /* Nothing to do. */
            break;
    ee82:	bf00      	nop
    ee84:	e000      	b.n	ee88 <Pwm_Ipw_DeInitInstance+0x30>
            break;
    ee86:	bf00      	nop
    }
}
    ee88:	bf00      	nop
    ee8a:	b003      	add	sp, #12
    ee8c:	f85d fb04 	ldr.w	pc, [sp], #4

0000ee90 <Pwm_Ipw_SetDutyCycle>:
*               E_OK            The duty cycle is set to the new value
*
*/
Std_ReturnType Pwm_Ipw_SetDutyCycle(uint16                           DutyCycle,
                                    const Pwm_IpwChannelConfigType * const IpConfig)
{
    ee90:	b500      	push	{lr}
    ee92:	b085      	sub	sp, #20
    ee94:	4603      	mov	r3, r0
    ee96:	9100      	str	r1, [sp, #0]
    ee98:	f8ad 3006 	strh.w	r3, [sp, #6]

    Std_ReturnType RetVal = (Std_ReturnType)E_OK;
    ee9c:	2300      	movs	r3, #0
    ee9e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (PWM_FTM_USED == STD_ON)
    uint16 FtmDutyCycle = 0U;
    eea2:	2300      	movs	r3, #0
    eea4:	f8ad 300c 	strh.w	r3, [sp, #12]
#endif
#if (PWM_FLEXIO_USED == STD_ON)
    uint16 FlexioChDuty = 0U;
    uint16 FlexioPeriod = 0U;
#endif
    switch(IpConfig->ChannelType)
    eea8:	9b00      	ldr	r3, [sp, #0]
    eeaa:	681b      	ldr	r3, [r3, #0]
    eeac:	2b00      	cmp	r3, #0
    eeae:	d02c      	beq.n	ef0a <Pwm_Ipw_SetDutyCycle+0x7a>
    eeb0:	2b01      	cmp	r3, #1
    eeb2:	d12c      	bne.n	ef0e <Pwm_Ipw_SetDutyCycle+0x7e>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            if (NULL_PTR != IpConfig->FtmChConfig)
    eeb4:	9b00      	ldr	r3, [sp, #0]
    eeb6:	685b      	ldr	r3, [r3, #4]
    eeb8:	2b00      	cmp	r3, #0
    eeba:	d02a      	beq.n	ef12 <Pwm_Ipw_SetDutyCycle+0x82>
            {
                FtmDutyCycle = (uint16)(((uint32)Ftm_Pwm_Ip_aPeriod[IpConfig->ChannelInstanceId] * DutyCycle) / 0x8000U);
    eebc:	9b00      	ldr	r3, [sp, #0]
    eebe:	7a1b      	ldrb	r3, [r3, #8]
    eec0:	461a      	mov	r2, r3
    eec2:	4b17      	ldr	r3, [pc, #92]	; (ef20 <Pwm_Ipw_SetDutyCycle+0x90>)
    eec4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    eec8:	461a      	mov	r2, r3
    eeca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    eece:	fb02 f303 	mul.w	r3, r2, r3
    eed2:	0bdb      	lsrs	r3, r3, #15
    eed4:	f8ad 300c 	strh.w	r3, [sp, #12]
                /* Call Ftm IP initialize function */
                Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(IpConfig->ChannelInstanceId,
    eed8:	9b00      	ldr	r3, [sp, #0]
    eeda:	7a18      	ldrb	r0, [r3, #8]
                                                     ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId,
    eedc:	9b00      	ldr	r3, [sp, #0]
    eede:	685b      	ldr	r3, [r3, #4]
                Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(IpConfig->ChannelInstanceId,
    eee0:	7819      	ldrb	r1, [r3, #0]
    eee2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    eee6:	2301      	movs	r3, #1
    eee8:	f7fe fe90 	bl	dc0c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                                     FtmDutyCycle,
                                                     TRUE);
                /* Duty cycle of Ftm Ip */
                Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = DutyCycle;
    eeec:	9b00      	ldr	r3, [sp, #0]
    eeee:	7a1b      	ldrb	r3, [r3, #8]
    eef0:	4618      	mov	r0, r3
    eef2:	9b00      	ldr	r3, [sp, #0]
    eef4:	685b      	ldr	r3, [r3, #4]
    eef6:	781b      	ldrb	r3, [r3, #0]
    eef8:	461a      	mov	r2, r3
    eefa:	490a      	ldr	r1, [pc, #40]	; (ef24 <Pwm_Ipw_SetDutyCycle+0x94>)
    eefc:	00c3      	lsls	r3, r0, #3
    eefe:	4413      	add	r3, r2
    ef00:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    ef04:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            }
            break;
    ef08:	e003      	b.n	ef12 <Pwm_Ipw_SetDutyCycle+0x82>
            Pwm_Ipw_aFlexioDutyCycle[IpConfig->ChannelInstanceId][(IpConfig->FlexioChConfig)->TimerId] = DutyCycle;
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    ef0a:	bf00      	nop
    ef0c:	e002      	b.n	ef14 <Pwm_Ipw_SetDutyCycle+0x84>
        default:
            /* Nothing to do. */
            break;
    ef0e:	bf00      	nop
    ef10:	e000      	b.n	ef14 <Pwm_Ipw_SetDutyCycle+0x84>
            break;
    ef12:	bf00      	nop
    }

    return RetVal;
    ef14:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    ef18:	4618      	mov	r0, r3
    ef1a:	b005      	add	sp, #20
    ef1c:	f85d fb04 	ldr.w	pc, [sp], #4
    ef20:	1fff8e14 	.word	0x1fff8e14
    ef24:	1fff91bc 	.word	0x1fff91bc

0000ef28 <Pwm_Ipw_SetPeriodAndDuty>:
*
*/
void Pwm_Ipw_SetPeriodAndDuty(Pwm_PeriodType                   Period,
                              uint16                           DutyCycle,
                              const Pwm_IpwChannelConfigType * const IpConfig)
{
    ef28:	b510      	push	{r4, lr}
    ef2a:	b086      	sub	sp, #24
    ef2c:	4603      	mov	r3, r0
    ef2e:	9202      	str	r2, [sp, #8]
    ef30:	f8ad 300e 	strh.w	r3, [sp, #14]
    ef34:	460b      	mov	r3, r1
    ef36:	f8ad 300c 	strh.w	r3, [sp, #12]

#if (PWM_FTM_USED == STD_ON)
    uint16 FtmDutyCycle = 0U;
    ef3a:	2300      	movs	r3, #0
    ef3c:	f8ad 3016 	strh.w	r3, [sp, #22]
#endif
#if (PWM_FLEXIO_USED == STD_ON)
    uint16 FlexioChDuty = 0U;
#endif

    switch(IpConfig->ChannelType)
    ef40:	9b02      	ldr	r3, [sp, #8]
    ef42:	681b      	ldr	r3, [r3, #0]
    ef44:	2b00      	cmp	r3, #0
    ef46:	d02a      	beq.n	ef9e <Pwm_Ipw_SetPeriodAndDuty+0x76>
    ef48:	2b01      	cmp	r3, #1
    ef4a:	d12a      	bne.n	efa2 <Pwm_Ipw_SetPeriodAndDuty+0x7a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            if (NULL_PTR != IpConfig->FtmChConfig)
    ef4c:	9b02      	ldr	r3, [sp, #8]
    ef4e:	685b      	ldr	r3, [r3, #4]
    ef50:	2b00      	cmp	r3, #0
    ef52:	d028      	beq.n	efa6 <Pwm_Ipw_SetPeriodAndDuty+0x7e>
            {
                FtmDutyCycle = (uint16)(((uint32)Period * DutyCycle) / 0x8000U);
    ef54:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ef58:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    ef5c:	fb02 f303 	mul.w	r3, r2, r3
    ef60:	0bdb      	lsrs	r3, r3, #15
    ef62:	f8ad 3016 	strh.w	r3, [sp, #22]
                /* Call Ftm IP initialize function */
                Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(IpConfig->ChannelInstanceId,
    ef66:	9b02      	ldr	r3, [sp, #8]
    ef68:	7a18      	ldrb	r0, [r3, #8]
                                                  ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId,
    ef6a:	9b02      	ldr	r3, [sp, #8]
    ef6c:	685b      	ldr	r3, [r3, #4]
                Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(IpConfig->ChannelInstanceId,
    ef6e:	7819      	ldrb	r1, [r3, #0]
    ef70:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    ef74:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    ef78:	2401      	movs	r4, #1
    ef7a:	9400      	str	r4, [sp, #0]
    ef7c:	f7fe ff0c 	bl	dd98 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty>
                                                  Period,
                                                  FtmDutyCycle,
                                                  TRUE);
                /* Duty cycle of Ftm Ip */
                Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = DutyCycle;
    ef80:	9b02      	ldr	r3, [sp, #8]
    ef82:	7a1b      	ldrb	r3, [r3, #8]
    ef84:	4618      	mov	r0, r3
    ef86:	9b02      	ldr	r3, [sp, #8]
    ef88:	685b      	ldr	r3, [r3, #4]
    ef8a:	781b      	ldrb	r3, [r3, #0]
    ef8c:	461a      	mov	r2, r3
    ef8e:	4908      	ldr	r1, [pc, #32]	; (efb0 <Pwm_Ipw_SetPeriodAndDuty+0x88>)
    ef90:	00c3      	lsls	r3, r0, #3
    ef92:	4413      	add	r3, r2
    ef94:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    ef98:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            }
            break;
    ef9c:	e003      	b.n	efa6 <Pwm_Ipw_SetPeriodAndDuty+0x7e>
            Pwm_Ipw_aFlexioDutyCycle[IpConfig->ChannelInstanceId][(IpConfig->FlexioChConfig)->TimerId] = DutyCycle;
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    ef9e:	bf00      	nop
    efa0:	e002      	b.n	efa8 <Pwm_Ipw_SetPeriodAndDuty+0x80>
        default:
            /* Nothing to do. */
            break;
    efa2:	bf00      	nop
    efa4:	e000      	b.n	efa8 <Pwm_Ipw_SetPeriodAndDuty+0x80>
            break;
    efa6:	bf00      	nop
    }
}
    efa8:	bf00      	nop
    efaa:	b006      	add	sp, #24
    efac:	bd10      	pop	{r4, pc}
    efae:	bf00      	nop
    efb0:	1fff91bc 	.word	0x1fff91bc

0000efb4 <Pwm_Ipw_SetOutputToIdle>:
*
* @return       void
*
*/
void Pwm_Ipw_SetOutputToIdle(const Pwm_OutputStateType IdleState, const Pwm_IpwChannelConfigType * const IpConfig)
{
    efb4:	b500      	push	{lr}
    efb6:	b085      	sub	sp, #20
    efb8:	9001      	str	r0, [sp, #4]
    efba:	9100      	str	r1, [sp, #0]
#if (PWM_FTM_USED == STD_ON)
    uint8 Instance  =  IpConfig->ChannelInstanceId;
    efbc:	9b00      	ldr	r3, [sp, #0]
    efbe:	7a1b      	ldrb	r3, [r3, #8]
    efc0:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 Channel   =  ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId;
    efc4:	9b00      	ldr	r3, [sp, #0]
    efc6:	685b      	ldr	r3, [r3, #4]
    efc8:	781b      	ldrb	r3, [r3, #0]
    efca:	f88d 300e 	strb.w	r3, [sp, #14]
#endif

    switch(IpConfig->ChannelType)
    efce:	9b00      	ldr	r3, [sp, #0]
    efd0:	681b      	ldr	r3, [r3, #0]
    efd2:	2b00      	cmp	r3, #0
    efd4:	d02e      	beq.n	f034 <Pwm_Ipw_SetOutputToIdle+0x80>
    efd6:	2b01      	cmp	r3, #1
    efd8:	d12e      	bne.n	f038 <Pwm_Ipw_SetOutputToIdle+0x84>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            if ((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    efda:	f89d 200f 	ldrb.w	r2, [sp, #15]
    efde:	f89d 300e 	ldrb.w	r3, [sp, #14]
    efe2:	4919      	ldr	r1, [pc, #100]	; (f048 <Pwm_Ipw_SetOutputToIdle+0x94>)
    efe4:	00d2      	lsls	r2, r2, #3
    efe6:	4413      	add	r3, r2
    efe8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    efec:	2b01      	cmp	r3, #1
    efee:	d125      	bne.n	f03c <Pwm_Ipw_SetOutputToIdle+0x88>
            {
                /* update new state of channel */
                Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE;
    eff0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    eff4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    eff8:	4913      	ldr	r1, [pc, #76]	; (f048 <Pwm_Ipw_SetOutputToIdle+0x94>)
    effa:	00d2      	lsls	r2, r2, #3
    effc:	4413      	add	r3, r2
    effe:	2202      	movs	r2, #2
    f000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                
                Ftm_Pwm_Ip_SwOutputControl(Instance,
                                           Channel,
                                           ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->InitOut,
    f004:	9b00      	ldr	r3, [sp, #0]
    f006:	685b      	ldr	r3, [r3, #4]
                Ftm_Pwm_Ip_SwOutputControl(Instance,
    f008:	69da      	ldr	r2, [r3, #28]
    f00a:	f89d 100e 	ldrb.w	r1, [sp, #14]
    f00e:	f89d 000f 	ldrb.w	r0, [sp, #15]
    f012:	2301      	movs	r3, #1
    f014:	f7fe ff30 	bl	de78 <Ftm_Pwm_Ip_SwOutputControl>
                                           TRUE);
                /* Duty cycle of Ftm Ip */
                Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = 0U;
    f018:	9b00      	ldr	r3, [sp, #0]
    f01a:	7a1b      	ldrb	r3, [r3, #8]
    f01c:	4618      	mov	r0, r3
    f01e:	9b00      	ldr	r3, [sp, #0]
    f020:	685b      	ldr	r3, [r3, #4]
    f022:	781b      	ldrb	r3, [r3, #0]
    f024:	4619      	mov	r1, r3
    f026:	4a09      	ldr	r2, [pc, #36]	; (f04c <Pwm_Ipw_SetOutputToIdle+0x98>)
    f028:	00c3      	lsls	r3, r0, #3
    f02a:	440b      	add	r3, r1
    f02c:	2100      	movs	r1, #0
    f02e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }
            else
            {
                /* Do Nothing */
            }
            break;
    f032:	e003      	b.n	f03c <Pwm_Ipw_SetOutputToIdle+0x88>
            /* Nothing to do. this feature is not supported for Flexio */
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
    f034:	bf00      	nop
    f036:	e002      	b.n	f03e <Pwm_Ipw_SetOutputToIdle+0x8a>
        default:
            /* Nothing to do. */
            break;
    f038:	bf00      	nop
    f03a:	e000      	b.n	f03e <Pwm_Ipw_SetOutputToIdle+0x8a>
            break;
    f03c:	bf00      	nop
    }

    (void) IdleState;

}
    f03e:	bf00      	nop
    f040:	b005      	add	sp, #20
    f042:	f85d fb04 	ldr.w	pc, [sp], #4
    f046:	bf00      	nop
    f048:	1fff8fec 	.word	0x1fff8fec
    f04c:	1fff91bc 	.word	0x1fff91bc

0000f050 <Pwm_Ipw_GetMaxPeriodValue>:
*
* @return       uint32
*
*/  
uint32 Pwm_Ipw_GetMaxPeriodValue(const Pwm_IpwChannelConfigType * const IpConfig)
{
    f050:	b084      	sub	sp, #16
    f052:	9001      	str	r0, [sp, #4]
    /** @brief  Store return value */
    uint32               RetVal = (uint32)0xFFFFU;
    f054:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f058:	9303      	str	r3, [sp, #12]

    switch(IpConfig->ChannelType)
    f05a:	9b01      	ldr	r3, [sp, #4]
    f05c:	681b      	ldr	r3, [r3, #0]
    f05e:	2b01      	cmp	r3, #1
    f060:	d103      	bne.n	f06a <Pwm_Ipw_GetMaxPeriodValue+0x1a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            RetVal = (uint32)0xFFFEU;
    f062:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    f066:	9303      	str	r3, [sp, #12]
            break;
    f068:	e000      	b.n	f06c <Pwm_Ipw_GetMaxPeriodValue+0x1c>
            break;
#endif
        case PWM_CHANNEL_NONE:
        default:
            /* Do Nothing */
            break;
    f06a:	bf00      	nop
    }

    return RetVal;
    f06c:	9b03      	ldr	r3, [sp, #12]
}
    f06e:	4618      	mov	r0, r3
    f070:	b004      	add	sp, #16
    f072:	4770      	bx	lr

0000f074 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    f074:	b500      	push	{lr}
    f076:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f078:	f7f2 fb96 	bl	17a8 <Sys_GetCoreID>
    f07c:	4603      	mov	r3, r0
    f07e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId])
    f080:	4a10      	ldr	r2, [pc, #64]	; (f0c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    f082:	9b01      	ldr	r3, [sp, #4]
    f084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f088:	2b00      	cmp	r3, #0
    f08a:	d10d      	bne.n	f0a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f08c:	f7f1 fc20 	bl	8d0 <Adc_schm_read_msr>
    f090:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f092:	9b00      	ldr	r3, [sp, #0]
    f094:	f003 0301 	and.w	r3, r3, #1
    f098:	2b00      	cmp	r3, #0
    f09a:	d100      	bne.n	f09e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f09c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    f09e:	490a      	ldr	r1, [pc, #40]	; (f0c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x54>)
    f0a0:	9b01      	ldr	r3, [sp, #4]
    f0a2:	9a00      	ldr	r2, [sp, #0]
    f0a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]++;
    f0a8:	4a06      	ldr	r2, [pc, #24]	; (f0c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    f0aa:	9b01      	ldr	r3, [sp, #4]
    f0ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0b0:	1c5a      	adds	r2, r3, #1
    f0b2:	4904      	ldr	r1, [pc, #16]	; (f0c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
    f0b4:	9b01      	ldr	r3, [sp, #4]
    f0b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f0ba:	bf00      	nop
    f0bc:	b003      	add	sp, #12
    f0be:	f85d fb04 	ldr.w	pc, [sp], #4
    f0c2:	bf00      	nop
    f0c4:	1fff9200 	.word	0x1fff9200
    f0c8:	1fff91fc 	.word	0x1fff91fc

0000f0cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
    f0cc:	b500      	push	{lr}
    f0ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f0d0:	f7f2 fb6a 	bl	17a8 <Sys_GetCoreID>
    f0d4:	4603      	mov	r3, r0
    f0d6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]--;
    f0d8:	4a0d      	ldr	r2, [pc, #52]	; (f110 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    f0da:	9b01      	ldr	r3, [sp, #4]
    f0dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0e0:	1e5a      	subs	r2, r3, #1
    f0e2:	490b      	ldr	r1, [pc, #44]	; (f110 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    f0e4:	9b01      	ldr	r3, [sp, #4]
    f0e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    f0ea:	4a0a      	ldr	r2, [pc, #40]	; (f114 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x48>)
    f0ec:	9b01      	ldr	r3, [sp, #4]
    f0ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0f2:	f003 0301 	and.w	r3, r3, #1
    f0f6:	2b00      	cmp	r3, #0
    f0f8:	d106      	bne.n	f108 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    f0fa:	4a05      	ldr	r2, [pc, #20]	; (f110 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
    f0fc:	9b01      	ldr	r3, [sp, #4]
    f0fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f102:	2b00      	cmp	r3, #0
    f104:	d100      	bne.n	f108 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f106:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f108:	bf00      	nop
    f10a:	b003      	add	sp, #12
    f10c:	f85d fb04 	ldr.w	pc, [sp], #4
    f110:	1fff9200 	.word	0x1fff9200
    f114:	1fff91fc 	.word	0x1fff91fc

0000f118 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    f118:	b500      	push	{lr}
    f11a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f11c:	f7f2 fb44 	bl	17a8 <Sys_GetCoreID>
    f120:	4603      	mov	r3, r0
    f122:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId])
    f124:	4a10      	ldr	r2, [pc, #64]	; (f168 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    f126:	9b01      	ldr	r3, [sp, #4]
    f128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f12c:	2b00      	cmp	r3, #0
    f12e:	d10d      	bne.n	f14c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f130:	f7f1 fbce 	bl	8d0 <Adc_schm_read_msr>
    f134:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f136:	9b00      	ldr	r3, [sp, #0]
    f138:	f003 0301 	and.w	r3, r3, #1
    f13c:	2b00      	cmp	r3, #0
    f13e:	d100      	bne.n	f142 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f140:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    f142:	490a      	ldr	r1, [pc, #40]	; (f16c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x54>)
    f144:	9b01      	ldr	r3, [sp, #4]
    f146:	9a00      	ldr	r2, [sp, #0]
    f148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]++;
    f14c:	4a06      	ldr	r2, [pc, #24]	; (f168 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    f14e:	9b01      	ldr	r3, [sp, #4]
    f150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f154:	1c5a      	adds	r2, r3, #1
    f156:	4904      	ldr	r1, [pc, #16]	; (f168 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
    f158:	9b01      	ldr	r3, [sp, #4]
    f15a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f15e:	bf00      	nop
    f160:	b003      	add	sp, #12
    f162:	f85d fb04 	ldr.w	pc, [sp], #4
    f166:	bf00      	nop
    f168:	1fff9208 	.word	0x1fff9208
    f16c:	1fff9204 	.word	0x1fff9204

0000f170 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
    f170:	b500      	push	{lr}
    f172:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f174:	f7f2 fb18 	bl	17a8 <Sys_GetCoreID>
    f178:	4603      	mov	r3, r0
    f17a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]--;
    f17c:	4a0d      	ldr	r2, [pc, #52]	; (f1b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    f17e:	9b01      	ldr	r3, [sp, #4]
    f180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f184:	1e5a      	subs	r2, r3, #1
    f186:	490b      	ldr	r1, [pc, #44]	; (f1b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    f188:	9b01      	ldr	r3, [sp, #4]
    f18a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    f18e:	4a0a      	ldr	r2, [pc, #40]	; (f1b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x48>)
    f190:	9b01      	ldr	r3, [sp, #4]
    f192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f196:	f003 0301 	and.w	r3, r3, #1
    f19a:	2b00      	cmp	r3, #0
    f19c:	d106      	bne.n	f1ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    f19e:	4a05      	ldr	r2, [pc, #20]	; (f1b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
    f1a0:	9b01      	ldr	r3, [sp, #4]
    f1a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1a6:	2b00      	cmp	r3, #0
    f1a8:	d100      	bne.n	f1ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f1aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f1ac:	bf00      	nop
    f1ae:	b003      	add	sp, #12
    f1b0:	f85d fb04 	ldr.w	pc, [sp], #4
    f1b4:	1fff9208 	.word	0x1fff9208
    f1b8:	1fff9204 	.word	0x1fff9204

0000f1bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    f1bc:	b500      	push	{lr}
    f1be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f1c0:	f7f2 faf2 	bl	17a8 <Sys_GetCoreID>
    f1c4:	4603      	mov	r3, r0
    f1c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId])
    f1c8:	4a10      	ldr	r2, [pc, #64]	; (f20c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    f1ca:	9b01      	ldr	r3, [sp, #4]
    f1cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1d0:	2b00      	cmp	r3, #0
    f1d2:	d10d      	bne.n	f1f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f1d4:	f7f1 fb7c 	bl	8d0 <Adc_schm_read_msr>
    f1d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f1da:	9b00      	ldr	r3, [sp, #0]
    f1dc:	f003 0301 	and.w	r3, r3, #1
    f1e0:	2b00      	cmp	r3, #0
    f1e2:	d100      	bne.n	f1e6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f1e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    f1e6:	490a      	ldr	r1, [pc, #40]	; (f210 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x54>)
    f1e8:	9b01      	ldr	r3, [sp, #4]
    f1ea:	9a00      	ldr	r2, [sp, #0]
    f1ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]++;
    f1f0:	4a06      	ldr	r2, [pc, #24]	; (f20c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    f1f2:	9b01      	ldr	r3, [sp, #4]
    f1f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1f8:	1c5a      	adds	r2, r3, #1
    f1fa:	4904      	ldr	r1, [pc, #16]	; (f20c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
    f1fc:	9b01      	ldr	r3, [sp, #4]
    f1fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f202:	bf00      	nop
    f204:	b003      	add	sp, #12
    f206:	f85d fb04 	ldr.w	pc, [sp], #4
    f20a:	bf00      	nop
    f20c:	1fff9210 	.word	0x1fff9210
    f210:	1fff920c 	.word	0x1fff920c

0000f214 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
    f214:	b500      	push	{lr}
    f216:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f218:	f7f2 fac6 	bl	17a8 <Sys_GetCoreID>
    f21c:	4603      	mov	r3, r0
    f21e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]--;
    f220:	4a0d      	ldr	r2, [pc, #52]	; (f258 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    f222:	9b01      	ldr	r3, [sp, #4]
    f224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f228:	1e5a      	subs	r2, r3, #1
    f22a:	490b      	ldr	r1, [pc, #44]	; (f258 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    f22c:	9b01      	ldr	r3, [sp, #4]
    f22e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    f232:	4a0a      	ldr	r2, [pc, #40]	; (f25c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x48>)
    f234:	9b01      	ldr	r3, [sp, #4]
    f236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f23a:	f003 0301 	and.w	r3, r3, #1
    f23e:	2b00      	cmp	r3, #0
    f240:	d106      	bne.n	f250 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    f242:	4a05      	ldr	r2, [pc, #20]	; (f258 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
    f244:	9b01      	ldr	r3, [sp, #4]
    f246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f24a:	2b00      	cmp	r3, #0
    f24c:	d100      	bne.n	f250 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f24e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f250:	bf00      	nop
    f252:	b003      	add	sp, #12
    f254:	f85d fb04 	ldr.w	pc, [sp], #4
    f258:	1fff9210 	.word	0x1fff9210
    f25c:	1fff920c 	.word	0x1fff920c

0000f260 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
    f260:	b500      	push	{lr}
    f262:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f264:	f7f2 faa0 	bl	17a8 <Sys_GetCoreID>
    f268:	4603      	mov	r3, r0
    f26a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId])
    f26c:	4a10      	ldr	r2, [pc, #64]	; (f2b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    f26e:	9b01      	ldr	r3, [sp, #4]
    f270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f274:	2b00      	cmp	r3, #0
    f276:	d10d      	bne.n	f294 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f278:	f7f1 fb2a 	bl	8d0 <Adc_schm_read_msr>
    f27c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f27e:	9b00      	ldr	r3, [sp, #0]
    f280:	f003 0301 	and.w	r3, r3, #1
    f284:	2b00      	cmp	r3, #0
    f286:	d100      	bne.n	f28a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f288:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    f28a:	490a      	ldr	r1, [pc, #40]	; (f2b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x54>)
    f28c:	9b01      	ldr	r3, [sp, #4]
    f28e:	9a00      	ldr	r2, [sp, #0]
    f290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]++;
    f294:	4a06      	ldr	r2, [pc, #24]	; (f2b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    f296:	9b01      	ldr	r3, [sp, #4]
    f298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f29c:	1c5a      	adds	r2, r3, #1
    f29e:	4904      	ldr	r1, [pc, #16]	; (f2b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
    f2a0:	9b01      	ldr	r3, [sp, #4]
    f2a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f2a6:	bf00      	nop
    f2a8:	b003      	add	sp, #12
    f2aa:	f85d fb04 	ldr.w	pc, [sp], #4
    f2ae:	bf00      	nop
    f2b0:	1fff9218 	.word	0x1fff9218
    f2b4:	1fff9214 	.word	0x1fff9214

0000f2b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
    f2b8:	b500      	push	{lr}
    f2ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f2bc:	f7f2 fa74 	bl	17a8 <Sys_GetCoreID>
    f2c0:	4603      	mov	r3, r0
    f2c2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]--;
    f2c4:	4a0d      	ldr	r2, [pc, #52]	; (f2fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    f2c6:	9b01      	ldr	r3, [sp, #4]
    f2c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2cc:	1e5a      	subs	r2, r3, #1
    f2ce:	490b      	ldr	r1, [pc, #44]	; (f2fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    f2d0:	9b01      	ldr	r3, [sp, #4]
    f2d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    f2d6:	4a0a      	ldr	r2, [pc, #40]	; (f300 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x48>)
    f2d8:	9b01      	ldr	r3, [sp, #4]
    f2da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2de:	f003 0301 	and.w	r3, r3, #1
    f2e2:	2b00      	cmp	r3, #0
    f2e4:	d106      	bne.n	f2f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    f2e6:	4a05      	ldr	r2, [pc, #20]	; (f2fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
    f2e8:	9b01      	ldr	r3, [sp, #4]
    f2ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2ee:	2b00      	cmp	r3, #0
    f2f0:	d100      	bne.n	f2f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f2f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f2f4:	bf00      	nop
    f2f6:	b003      	add	sp, #12
    f2f8:	f85d fb04 	ldr.w	pc, [sp], #4
    f2fc:	1fff9218 	.word	0x1fff9218
    f300:	1fff9214 	.word	0x1fff9214

0000f304 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
    f304:	b500      	push	{lr}
    f306:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f308:	f7f2 fa4e 	bl	17a8 <Sys_GetCoreID>
    f30c:	4603      	mov	r3, r0
    f30e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId])
    f310:	4a10      	ldr	r2, [pc, #64]	; (f354 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    f312:	9b01      	ldr	r3, [sp, #4]
    f314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f318:	2b00      	cmp	r3, #0
    f31a:	d10d      	bne.n	f338 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f31c:	f7f1 fad8 	bl	8d0 <Adc_schm_read_msr>
    f320:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f322:	9b00      	ldr	r3, [sp, #0]
    f324:	f003 0301 	and.w	r3, r3, #1
    f328:	2b00      	cmp	r3, #0
    f32a:	d100      	bne.n	f32e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f32c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    f32e:	490a      	ldr	r1, [pc, #40]	; (f358 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x54>)
    f330:	9b01      	ldr	r3, [sp, #4]
    f332:	9a00      	ldr	r2, [sp, #0]
    f334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]++;
    f338:	4a06      	ldr	r2, [pc, #24]	; (f354 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    f33a:	9b01      	ldr	r3, [sp, #4]
    f33c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f340:	1c5a      	adds	r2, r3, #1
    f342:	4904      	ldr	r1, [pc, #16]	; (f354 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
    f344:	9b01      	ldr	r3, [sp, #4]
    f346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f34a:	bf00      	nop
    f34c:	b003      	add	sp, #12
    f34e:	f85d fb04 	ldr.w	pc, [sp], #4
    f352:	bf00      	nop
    f354:	1fff9220 	.word	0x1fff9220
    f358:	1fff921c 	.word	0x1fff921c

0000f35c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
    f35c:	b500      	push	{lr}
    f35e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f360:	f7f2 fa22 	bl	17a8 <Sys_GetCoreID>
    f364:	4603      	mov	r3, r0
    f366:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]--;
    f368:	4a0d      	ldr	r2, [pc, #52]	; (f3a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    f36a:	9b01      	ldr	r3, [sp, #4]
    f36c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f370:	1e5a      	subs	r2, r3, #1
    f372:	490b      	ldr	r1, [pc, #44]	; (f3a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    f374:	9b01      	ldr	r3, [sp, #4]
    f376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    f37a:	4a0a      	ldr	r2, [pc, #40]	; (f3a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x48>)
    f37c:	9b01      	ldr	r3, [sp, #4]
    f37e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f382:	f003 0301 	and.w	r3, r3, #1
    f386:	2b00      	cmp	r3, #0
    f388:	d106      	bne.n	f398 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    f38a:	4a05      	ldr	r2, [pc, #20]	; (f3a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
    f38c:	9b01      	ldr	r3, [sp, #4]
    f38e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f392:	2b00      	cmp	r3, #0
    f394:	d100      	bne.n	f398 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f396:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f398:	bf00      	nop
    f39a:	b003      	add	sp, #12
    f39c:	f85d fb04 	ldr.w	pc, [sp], #4
    f3a0:	1fff9220 	.word	0x1fff9220
    f3a4:	1fff921c 	.word	0x1fff921c

0000f3a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
    f3a8:	b500      	push	{lr}
    f3aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f3ac:	f7f2 f9fc 	bl	17a8 <Sys_GetCoreID>
    f3b0:	4603      	mov	r3, r0
    f3b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId])
    f3b4:	4a10      	ldr	r2, [pc, #64]	; (f3f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    f3b6:	9b01      	ldr	r3, [sp, #4]
    f3b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3bc:	2b00      	cmp	r3, #0
    f3be:	d10d      	bne.n	f3dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f3c0:	f7f1 fa86 	bl	8d0 <Adc_schm_read_msr>
    f3c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f3c6:	9b00      	ldr	r3, [sp, #0]
    f3c8:	f003 0301 	and.w	r3, r3, #1
    f3cc:	2b00      	cmp	r3, #0
    f3ce:	d100      	bne.n	f3d2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f3d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    f3d2:	490a      	ldr	r1, [pc, #40]	; (f3fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x54>)
    f3d4:	9b01      	ldr	r3, [sp, #4]
    f3d6:	9a00      	ldr	r2, [sp, #0]
    f3d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]++;
    f3dc:	4a06      	ldr	r2, [pc, #24]	; (f3f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    f3de:	9b01      	ldr	r3, [sp, #4]
    f3e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3e4:	1c5a      	adds	r2, r3, #1
    f3e6:	4904      	ldr	r1, [pc, #16]	; (f3f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
    f3e8:	9b01      	ldr	r3, [sp, #4]
    f3ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f3ee:	bf00      	nop
    f3f0:	b003      	add	sp, #12
    f3f2:	f85d fb04 	ldr.w	pc, [sp], #4
    f3f6:	bf00      	nop
    f3f8:	1fff9228 	.word	0x1fff9228
    f3fc:	1fff9224 	.word	0x1fff9224

0000f400 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
    f400:	b500      	push	{lr}
    f402:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f404:	f7f2 f9d0 	bl	17a8 <Sys_GetCoreID>
    f408:	4603      	mov	r3, r0
    f40a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]--;
    f40c:	4a0d      	ldr	r2, [pc, #52]	; (f444 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    f40e:	9b01      	ldr	r3, [sp, #4]
    f410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f414:	1e5a      	subs	r2, r3, #1
    f416:	490b      	ldr	r1, [pc, #44]	; (f444 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    f418:	9b01      	ldr	r3, [sp, #4]
    f41a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    f41e:	4a0a      	ldr	r2, [pc, #40]	; (f448 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x48>)
    f420:	9b01      	ldr	r3, [sp, #4]
    f422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f426:	f003 0301 	and.w	r3, r3, #1
    f42a:	2b00      	cmp	r3, #0
    f42c:	d106      	bne.n	f43c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    f42e:	4a05      	ldr	r2, [pc, #20]	; (f444 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
    f430:	9b01      	ldr	r3, [sp, #4]
    f432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f436:	2b00      	cmp	r3, #0
    f438:	d100      	bne.n	f43c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f43a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f43c:	bf00      	nop
    f43e:	b003      	add	sp, #12
    f440:	f85d fb04 	ldr.w	pc, [sp], #4
    f444:	1fff9228 	.word	0x1fff9228
    f448:	1fff9224 	.word	0x1fff9224

0000f44c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
    f44c:	b500      	push	{lr}
    f44e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f450:	f7f2 f9aa 	bl	17a8 <Sys_GetCoreID>
    f454:	4603      	mov	r3, r0
    f456:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId])
    f458:	4a10      	ldr	r2, [pc, #64]	; (f49c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    f45a:	9b01      	ldr	r3, [sp, #4]
    f45c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f460:	2b00      	cmp	r3, #0
    f462:	d10d      	bne.n	f480 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f464:	f7f1 fa34 	bl	8d0 <Adc_schm_read_msr>
    f468:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f46a:	9b00      	ldr	r3, [sp, #0]
    f46c:	f003 0301 	and.w	r3, r3, #1
    f470:	2b00      	cmp	r3, #0
    f472:	d100      	bne.n	f476 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f474:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    f476:	490a      	ldr	r1, [pc, #40]	; (f4a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x54>)
    f478:	9b01      	ldr	r3, [sp, #4]
    f47a:	9a00      	ldr	r2, [sp, #0]
    f47c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]++;
    f480:	4a06      	ldr	r2, [pc, #24]	; (f49c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    f482:	9b01      	ldr	r3, [sp, #4]
    f484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f488:	1c5a      	adds	r2, r3, #1
    f48a:	4904      	ldr	r1, [pc, #16]	; (f49c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
    f48c:	9b01      	ldr	r3, [sp, #4]
    f48e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f492:	bf00      	nop
    f494:	b003      	add	sp, #12
    f496:	f85d fb04 	ldr.w	pc, [sp], #4
    f49a:	bf00      	nop
    f49c:	1fff9230 	.word	0x1fff9230
    f4a0:	1fff922c 	.word	0x1fff922c

0000f4a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
    f4a4:	b500      	push	{lr}
    f4a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f4a8:	f7f2 f97e 	bl	17a8 <Sys_GetCoreID>
    f4ac:	4603      	mov	r3, r0
    f4ae:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]--;
    f4b0:	4a0d      	ldr	r2, [pc, #52]	; (f4e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    f4b2:	9b01      	ldr	r3, [sp, #4]
    f4b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4b8:	1e5a      	subs	r2, r3, #1
    f4ba:	490b      	ldr	r1, [pc, #44]	; (f4e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    f4bc:	9b01      	ldr	r3, [sp, #4]
    f4be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    f4c2:	4a0a      	ldr	r2, [pc, #40]	; (f4ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x48>)
    f4c4:	9b01      	ldr	r3, [sp, #4]
    f4c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4ca:	f003 0301 	and.w	r3, r3, #1
    f4ce:	2b00      	cmp	r3, #0
    f4d0:	d106      	bne.n	f4e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    f4d2:	4a05      	ldr	r2, [pc, #20]	; (f4e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
    f4d4:	9b01      	ldr	r3, [sp, #4]
    f4d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4da:	2b00      	cmp	r3, #0
    f4dc:	d100      	bne.n	f4e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f4de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f4e0:	bf00      	nop
    f4e2:	b003      	add	sp, #12
    f4e4:	f85d fb04 	ldr.w	pc, [sp], #4
    f4e8:	1fff9230 	.word	0x1fff9230
    f4ec:	1fff922c 	.word	0x1fff922c

0000f4f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
    f4f0:	b500      	push	{lr}
    f4f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f4f4:	f7f2 f958 	bl	17a8 <Sys_GetCoreID>
    f4f8:	4603      	mov	r3, r0
    f4fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId])
    f4fc:	4a10      	ldr	r2, [pc, #64]	; (f540 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    f4fe:	9b01      	ldr	r3, [sp, #4]
    f500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f504:	2b00      	cmp	r3, #0
    f506:	d10d      	bne.n	f524 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f508:	f7f1 f9e2 	bl	8d0 <Adc_schm_read_msr>
    f50c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f50e:	9b00      	ldr	r3, [sp, #0]
    f510:	f003 0301 	and.w	r3, r3, #1
    f514:	2b00      	cmp	r3, #0
    f516:	d100      	bne.n	f51a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f518:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_100[u32CoreId] = msr;
    f51a:	490a      	ldr	r1, [pc, #40]	; (f544 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x54>)
    f51c:	9b01      	ldr	r3, [sp, #4]
    f51e:	9a00      	ldr	r2, [sp, #0]
    f520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]++;
    f524:	4a06      	ldr	r2, [pc, #24]	; (f540 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    f526:	9b01      	ldr	r3, [sp, #4]
    f528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f52c:	1c5a      	adds	r2, r3, #1
    f52e:	4904      	ldr	r1, [pc, #16]	; (f540 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
    f530:	9b01      	ldr	r3, [sp, #4]
    f532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f536:	bf00      	nop
    f538:	b003      	add	sp, #12
    f53a:	f85d fb04 	ldr.w	pc, [sp], #4
    f53e:	bf00      	nop
    f540:	1fff9238 	.word	0x1fff9238
    f544:	1fff9234 	.word	0x1fff9234

0000f548 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
    f548:	b500      	push	{lr}
    f54a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f54c:	f7f2 f92c 	bl	17a8 <Sys_GetCoreID>
    f550:	4603      	mov	r3, r0
    f552:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]--;
    f554:	4a0d      	ldr	r2, [pc, #52]	; (f58c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    f556:	9b01      	ldr	r3, [sp, #4]
    f558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f55c:	1e5a      	subs	r2, r3, #1
    f55e:	490b      	ldr	r1, [pc, #44]	; (f58c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    f560:	9b01      	ldr	r3, [sp, #4]
    f562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_100[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]))         /*if interrupts were enabled*/
    f566:	4a0a      	ldr	r2, [pc, #40]	; (f590 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x48>)
    f568:	9b01      	ldr	r3, [sp, #4]
    f56a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f56e:	f003 0301 	and.w	r3, r3, #1
    f572:	2b00      	cmp	r3, #0
    f574:	d106      	bne.n	f584 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    f576:	4a05      	ldr	r2, [pc, #20]	; (f58c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
    f578:	9b01      	ldr	r3, [sp, #4]
    f57a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f57e:	2b00      	cmp	r3, #0
    f580:	d100      	bne.n	f584 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f582:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f584:	bf00      	nop
    f586:	b003      	add	sp, #12
    f588:	f85d fb04 	ldr.w	pc, [sp], #4
    f58c:	1fff9238 	.word	0x1fff9238
    f590:	1fff9234 	.word	0x1fff9234

0000f594 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
    f594:	b500      	push	{lr}
    f596:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f598:	f7f2 f906 	bl	17a8 <Sys_GetCoreID>
    f59c:	4603      	mov	r3, r0
    f59e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId])
    f5a0:	4a10      	ldr	r2, [pc, #64]	; (f5e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    f5a2:	9b01      	ldr	r3, [sp, #4]
    f5a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5a8:	2b00      	cmp	r3, #0
    f5aa:	d10d      	bne.n	f5c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f5ac:	f7f1 f990 	bl	8d0 <Adc_schm_read_msr>
    f5b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f5b2:	9b00      	ldr	r3, [sp, #0]
    f5b4:	f003 0301 	and.w	r3, r3, #1
    f5b8:	2b00      	cmp	r3, #0
    f5ba:	d100      	bne.n	f5be <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f5bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_101[u32CoreId] = msr;
    f5be:	490a      	ldr	r1, [pc, #40]	; (f5e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x54>)
    f5c0:	9b01      	ldr	r3, [sp, #4]
    f5c2:	9a00      	ldr	r2, [sp, #0]
    f5c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]++;
    f5c8:	4a06      	ldr	r2, [pc, #24]	; (f5e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    f5ca:	9b01      	ldr	r3, [sp, #4]
    f5cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5d0:	1c5a      	adds	r2, r3, #1
    f5d2:	4904      	ldr	r1, [pc, #16]	; (f5e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
    f5d4:	9b01      	ldr	r3, [sp, #4]
    f5d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f5da:	bf00      	nop
    f5dc:	b003      	add	sp, #12
    f5de:	f85d fb04 	ldr.w	pc, [sp], #4
    f5e2:	bf00      	nop
    f5e4:	1fff9240 	.word	0x1fff9240
    f5e8:	1fff923c 	.word	0x1fff923c

0000f5ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
    f5ec:	b500      	push	{lr}
    f5ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f5f0:	f7f2 f8da 	bl	17a8 <Sys_GetCoreID>
    f5f4:	4603      	mov	r3, r0
    f5f6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]--;
    f5f8:	4a0d      	ldr	r2, [pc, #52]	; (f630 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    f5fa:	9b01      	ldr	r3, [sp, #4]
    f5fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f600:	1e5a      	subs	r2, r3, #1
    f602:	490b      	ldr	r1, [pc, #44]	; (f630 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    f604:	9b01      	ldr	r3, [sp, #4]
    f606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_101[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]))         /*if interrupts were enabled*/
    f60a:	4a0a      	ldr	r2, [pc, #40]	; (f634 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x48>)
    f60c:	9b01      	ldr	r3, [sp, #4]
    f60e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f612:	f003 0301 	and.w	r3, r3, #1
    f616:	2b00      	cmp	r3, #0
    f618:	d106      	bne.n	f628 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    f61a:	4a05      	ldr	r2, [pc, #20]	; (f630 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
    f61c:	9b01      	ldr	r3, [sp, #4]
    f61e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f622:	2b00      	cmp	r3, #0
    f624:	d100      	bne.n	f628 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f626:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f628:	bf00      	nop
    f62a:	b003      	add	sp, #12
    f62c:	f85d fb04 	ldr.w	pc, [sp], #4
    f630:	1fff9240 	.word	0x1fff9240
    f634:	1fff923c 	.word	0x1fff923c

0000f638 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
    f638:	b500      	push	{lr}
    f63a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f63c:	f7f2 f8b4 	bl	17a8 <Sys_GetCoreID>
    f640:	4603      	mov	r3, r0
    f642:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId])
    f644:	4a10      	ldr	r2, [pc, #64]	; (f688 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    f646:	9b01      	ldr	r3, [sp, #4]
    f648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f64c:	2b00      	cmp	r3, #0
    f64e:	d10d      	bne.n	f66c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f650:	f7f1 f93e 	bl	8d0 <Adc_schm_read_msr>
    f654:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f656:	9b00      	ldr	r3, [sp, #0]
    f658:	f003 0301 	and.w	r3, r3, #1
    f65c:	2b00      	cmp	r3, #0
    f65e:	d100      	bne.n	f662 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f660:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_102[u32CoreId] = msr;
    f662:	490a      	ldr	r1, [pc, #40]	; (f68c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x54>)
    f664:	9b01      	ldr	r3, [sp, #4]
    f666:	9a00      	ldr	r2, [sp, #0]
    f668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]++;
    f66c:	4a06      	ldr	r2, [pc, #24]	; (f688 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    f66e:	9b01      	ldr	r3, [sp, #4]
    f670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f674:	1c5a      	adds	r2, r3, #1
    f676:	4904      	ldr	r1, [pc, #16]	; (f688 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
    f678:	9b01      	ldr	r3, [sp, #4]
    f67a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f67e:	bf00      	nop
    f680:	b003      	add	sp, #12
    f682:	f85d fb04 	ldr.w	pc, [sp], #4
    f686:	bf00      	nop
    f688:	1fff9248 	.word	0x1fff9248
    f68c:	1fff9244 	.word	0x1fff9244

0000f690 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
    f690:	b500      	push	{lr}
    f692:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f694:	f7f2 f888 	bl	17a8 <Sys_GetCoreID>
    f698:	4603      	mov	r3, r0
    f69a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]--;
    f69c:	4a0d      	ldr	r2, [pc, #52]	; (f6d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    f69e:	9b01      	ldr	r3, [sp, #4]
    f6a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6a4:	1e5a      	subs	r2, r3, #1
    f6a6:	490b      	ldr	r1, [pc, #44]	; (f6d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    f6a8:	9b01      	ldr	r3, [sp, #4]
    f6aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_102[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]))         /*if interrupts were enabled*/
    f6ae:	4a0a      	ldr	r2, [pc, #40]	; (f6d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x48>)
    f6b0:	9b01      	ldr	r3, [sp, #4]
    f6b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6b6:	f003 0301 	and.w	r3, r3, #1
    f6ba:	2b00      	cmp	r3, #0
    f6bc:	d106      	bne.n	f6cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    f6be:	4a05      	ldr	r2, [pc, #20]	; (f6d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
    f6c0:	9b01      	ldr	r3, [sp, #4]
    f6c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6c6:	2b00      	cmp	r3, #0
    f6c8:	d100      	bne.n	f6cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f6ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f6cc:	bf00      	nop
    f6ce:	b003      	add	sp, #12
    f6d0:	f85d fb04 	ldr.w	pc, [sp], #4
    f6d4:	1fff9248 	.word	0x1fff9248
    f6d8:	1fff9244 	.word	0x1fff9244

0000f6dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
    f6dc:	b500      	push	{lr}
    f6de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f6e0:	f7f2 f862 	bl	17a8 <Sys_GetCoreID>
    f6e4:	4603      	mov	r3, r0
    f6e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId])
    f6e8:	4a10      	ldr	r2, [pc, #64]	; (f72c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    f6ea:	9b01      	ldr	r3, [sp, #4]
    f6ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f6f0:	2b00      	cmp	r3, #0
    f6f2:	d10d      	bne.n	f710 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f6f4:	f7f1 f8ec 	bl	8d0 <Adc_schm_read_msr>
    f6f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f6fa:	9b00      	ldr	r3, [sp, #0]
    f6fc:	f003 0301 	and.w	r3, r3, #1
    f700:	2b00      	cmp	r3, #0
    f702:	d100      	bne.n	f706 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f704:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_103[u32CoreId] = msr;
    f706:	490a      	ldr	r1, [pc, #40]	; (f730 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x54>)
    f708:	9b01      	ldr	r3, [sp, #4]
    f70a:	9a00      	ldr	r2, [sp, #0]
    f70c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]++;
    f710:	4a06      	ldr	r2, [pc, #24]	; (f72c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    f712:	9b01      	ldr	r3, [sp, #4]
    f714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f718:	1c5a      	adds	r2, r3, #1
    f71a:	4904      	ldr	r1, [pc, #16]	; (f72c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
    f71c:	9b01      	ldr	r3, [sp, #4]
    f71e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f722:	bf00      	nop
    f724:	b003      	add	sp, #12
    f726:	f85d fb04 	ldr.w	pc, [sp], #4
    f72a:	bf00      	nop
    f72c:	1fff9250 	.word	0x1fff9250
    f730:	1fff924c 	.word	0x1fff924c

0000f734 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
    f734:	b500      	push	{lr}
    f736:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f738:	f7f2 f836 	bl	17a8 <Sys_GetCoreID>
    f73c:	4603      	mov	r3, r0
    f73e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]--;
    f740:	4a0d      	ldr	r2, [pc, #52]	; (f778 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    f742:	9b01      	ldr	r3, [sp, #4]
    f744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f748:	1e5a      	subs	r2, r3, #1
    f74a:	490b      	ldr	r1, [pc, #44]	; (f778 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    f74c:	9b01      	ldr	r3, [sp, #4]
    f74e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_103[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]))         /*if interrupts were enabled*/
    f752:	4a0a      	ldr	r2, [pc, #40]	; (f77c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x48>)
    f754:	9b01      	ldr	r3, [sp, #4]
    f756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f75a:	f003 0301 	and.w	r3, r3, #1
    f75e:	2b00      	cmp	r3, #0
    f760:	d106      	bne.n	f770 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    f762:	4a05      	ldr	r2, [pc, #20]	; (f778 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
    f764:	9b01      	ldr	r3, [sp, #4]
    f766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f76a:	2b00      	cmp	r3, #0
    f76c:	d100      	bne.n	f770 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f76e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f770:	bf00      	nop
    f772:	b003      	add	sp, #12
    f774:	f85d fb04 	ldr.w	pc, [sp], #4
    f778:	1fff9250 	.word	0x1fff9250
    f77c:	1fff924c 	.word	0x1fff924c

0000f780 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
    f780:	b500      	push	{lr}
    f782:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f784:	f7f2 f810 	bl	17a8 <Sys_GetCoreID>
    f788:	4603      	mov	r3, r0
    f78a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId])
    f78c:	4a10      	ldr	r2, [pc, #64]	; (f7d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    f78e:	9b01      	ldr	r3, [sp, #4]
    f790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f794:	2b00      	cmp	r3, #0
    f796:	d10d      	bne.n	f7b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f798:	f7f1 f89a 	bl	8d0 <Adc_schm_read_msr>
    f79c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f79e:	9b00      	ldr	r3, [sp, #0]
    f7a0:	f003 0301 	and.w	r3, r3, #1
    f7a4:	2b00      	cmp	r3, #0
    f7a6:	d100      	bne.n	f7aa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f7a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    f7aa:	490a      	ldr	r1, [pc, #40]	; (f7d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x54>)
    f7ac:	9b01      	ldr	r3, [sp, #4]
    f7ae:	9a00      	ldr	r2, [sp, #0]
    f7b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]++;
    f7b4:	4a06      	ldr	r2, [pc, #24]	; (f7d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    f7b6:	9b01      	ldr	r3, [sp, #4]
    f7b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7bc:	1c5a      	adds	r2, r3, #1
    f7be:	4904      	ldr	r1, [pc, #16]	; (f7d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
    f7c0:	9b01      	ldr	r3, [sp, #4]
    f7c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f7c6:	bf00      	nop
    f7c8:	b003      	add	sp, #12
    f7ca:	f85d fb04 	ldr.w	pc, [sp], #4
    f7ce:	bf00      	nop
    f7d0:	1fff9258 	.word	0x1fff9258
    f7d4:	1fff9254 	.word	0x1fff9254

0000f7d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
    f7d8:	b500      	push	{lr}
    f7da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f7dc:	f7f1 ffe4 	bl	17a8 <Sys_GetCoreID>
    f7e0:	4603      	mov	r3, r0
    f7e2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]--;
    f7e4:	4a0d      	ldr	r2, [pc, #52]	; (f81c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    f7e6:	9b01      	ldr	r3, [sp, #4]
    f7e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7ec:	1e5a      	subs	r2, r3, #1
    f7ee:	490b      	ldr	r1, [pc, #44]	; (f81c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    f7f0:	9b01      	ldr	r3, [sp, #4]
    f7f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    f7f6:	4a0a      	ldr	r2, [pc, #40]	; (f820 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x48>)
    f7f8:	9b01      	ldr	r3, [sp, #4]
    f7fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7fe:	f003 0301 	and.w	r3, r3, #1
    f802:	2b00      	cmp	r3, #0
    f804:	d106      	bne.n	f814 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    f806:	4a05      	ldr	r2, [pc, #20]	; (f81c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
    f808:	9b01      	ldr	r3, [sp, #4]
    f80a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f80e:	2b00      	cmp	r3, #0
    f810:	d100      	bne.n	f814 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f812:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f814:	bf00      	nop
    f816:	b003      	add	sp, #12
    f818:	f85d fb04 	ldr.w	pc, [sp], #4
    f81c:	1fff9258 	.word	0x1fff9258
    f820:	1fff9254 	.word	0x1fff9254

0000f824 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
    f824:	b500      	push	{lr}
    f826:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f828:	f7f1 ffbe 	bl	17a8 <Sys_GetCoreID>
    f82c:	4603      	mov	r3, r0
    f82e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId])
    f830:	4a10      	ldr	r2, [pc, #64]	; (f874 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    f832:	9b01      	ldr	r3, [sp, #4]
    f834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f838:	2b00      	cmp	r3, #0
    f83a:	d10d      	bne.n	f858 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f83c:	f7f1 f848 	bl	8d0 <Adc_schm_read_msr>
    f840:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f842:	9b00      	ldr	r3, [sp, #0]
    f844:	f003 0301 	and.w	r3, r3, #1
    f848:	2b00      	cmp	r3, #0
    f84a:	d100      	bne.n	f84e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f84c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    f84e:	490a      	ldr	r1, [pc, #40]	; (f878 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x54>)
    f850:	9b01      	ldr	r3, [sp, #4]
    f852:	9a00      	ldr	r2, [sp, #0]
    f854:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]++;
    f858:	4a06      	ldr	r2, [pc, #24]	; (f874 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    f85a:	9b01      	ldr	r3, [sp, #4]
    f85c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f860:	1c5a      	adds	r2, r3, #1
    f862:	4904      	ldr	r1, [pc, #16]	; (f874 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
    f864:	9b01      	ldr	r3, [sp, #4]
    f866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f86a:	bf00      	nop
    f86c:	b003      	add	sp, #12
    f86e:	f85d fb04 	ldr.w	pc, [sp], #4
    f872:	bf00      	nop
    f874:	1fff9260 	.word	0x1fff9260
    f878:	1fff925c 	.word	0x1fff925c

0000f87c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
    f87c:	b500      	push	{lr}
    f87e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f880:	f7f1 ff92 	bl	17a8 <Sys_GetCoreID>
    f884:	4603      	mov	r3, r0
    f886:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]--;
    f888:	4a0d      	ldr	r2, [pc, #52]	; (f8c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    f88a:	9b01      	ldr	r3, [sp, #4]
    f88c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f890:	1e5a      	subs	r2, r3, #1
    f892:	490b      	ldr	r1, [pc, #44]	; (f8c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    f894:	9b01      	ldr	r3, [sp, #4]
    f896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    f89a:	4a0a      	ldr	r2, [pc, #40]	; (f8c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x48>)
    f89c:	9b01      	ldr	r3, [sp, #4]
    f89e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8a2:	f003 0301 	and.w	r3, r3, #1
    f8a6:	2b00      	cmp	r3, #0
    f8a8:	d106      	bne.n	f8b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    f8aa:	4a05      	ldr	r2, [pc, #20]	; (f8c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
    f8ac:	9b01      	ldr	r3, [sp, #4]
    f8ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8b2:	2b00      	cmp	r3, #0
    f8b4:	d100      	bne.n	f8b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f8b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f8b8:	bf00      	nop
    f8ba:	b003      	add	sp, #12
    f8bc:	f85d fb04 	ldr.w	pc, [sp], #4
    f8c0:	1fff9260 	.word	0x1fff9260
    f8c4:	1fff925c 	.word	0x1fff925c

0000f8c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
    f8c8:	b500      	push	{lr}
    f8ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f8cc:	f7f1 ff6c 	bl	17a8 <Sys_GetCoreID>
    f8d0:	4603      	mov	r3, r0
    f8d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId])
    f8d4:	4a10      	ldr	r2, [pc, #64]	; (f918 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    f8d6:	9b01      	ldr	r3, [sp, #4]
    f8d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f8dc:	2b00      	cmp	r3, #0
    f8de:	d10d      	bne.n	f8fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f8e0:	f7f0 fff6 	bl	8d0 <Adc_schm_read_msr>
    f8e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f8e6:	9b00      	ldr	r3, [sp, #0]
    f8e8:	f003 0301 	and.w	r3, r3, #1
    f8ec:	2b00      	cmp	r3, #0
    f8ee:	d100      	bne.n	f8f2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f8f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    f8f2:	490a      	ldr	r1, [pc, #40]	; (f91c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x54>)
    f8f4:	9b01      	ldr	r3, [sp, #4]
    f8f6:	9a00      	ldr	r2, [sp, #0]
    f8f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]++;
    f8fc:	4a06      	ldr	r2, [pc, #24]	; (f918 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    f8fe:	9b01      	ldr	r3, [sp, #4]
    f900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f904:	1c5a      	adds	r2, r3, #1
    f906:	4904      	ldr	r1, [pc, #16]	; (f918 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
    f908:	9b01      	ldr	r3, [sp, #4]
    f90a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f90e:	bf00      	nop
    f910:	b003      	add	sp, #12
    f912:	f85d fb04 	ldr.w	pc, [sp], #4
    f916:	bf00      	nop
    f918:	1fff9268 	.word	0x1fff9268
    f91c:	1fff9264 	.word	0x1fff9264

0000f920 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
    f920:	b500      	push	{lr}
    f922:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f924:	f7f1 ff40 	bl	17a8 <Sys_GetCoreID>
    f928:	4603      	mov	r3, r0
    f92a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]--;
    f92c:	4a0d      	ldr	r2, [pc, #52]	; (f964 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    f92e:	9b01      	ldr	r3, [sp, #4]
    f930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f934:	1e5a      	subs	r2, r3, #1
    f936:	490b      	ldr	r1, [pc, #44]	; (f964 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    f938:	9b01      	ldr	r3, [sp, #4]
    f93a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    f93e:	4a0a      	ldr	r2, [pc, #40]	; (f968 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x48>)
    f940:	9b01      	ldr	r3, [sp, #4]
    f942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f946:	f003 0301 	and.w	r3, r3, #1
    f94a:	2b00      	cmp	r3, #0
    f94c:	d106      	bne.n	f95c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    f94e:	4a05      	ldr	r2, [pc, #20]	; (f964 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
    f950:	9b01      	ldr	r3, [sp, #4]
    f952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f956:	2b00      	cmp	r3, #0
    f958:	d100      	bne.n	f95c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f95a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f95c:	bf00      	nop
    f95e:	b003      	add	sp, #12
    f960:	f85d fb04 	ldr.w	pc, [sp], #4
    f964:	1fff9268 	.word	0x1fff9268
    f968:	1fff9264 	.word	0x1fff9264

0000f96c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
    f96c:	b500      	push	{lr}
    f96e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f970:	f7f1 ff1a 	bl	17a8 <Sys_GetCoreID>
    f974:	4603      	mov	r3, r0
    f976:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId])
    f978:	4a10      	ldr	r2, [pc, #64]	; (f9bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    f97a:	9b01      	ldr	r3, [sp, #4]
    f97c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f980:	2b00      	cmp	r3, #0
    f982:	d10d      	bne.n	f9a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f984:	f7f0 ffa4 	bl	8d0 <Adc_schm_read_msr>
    f988:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f98a:	9b00      	ldr	r3, [sp, #0]
    f98c:	f003 0301 	and.w	r3, r3, #1
    f990:	2b00      	cmp	r3, #0
    f992:	d100      	bne.n	f996 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f994:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    f996:	490a      	ldr	r1, [pc, #40]	; (f9c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x54>)
    f998:	9b01      	ldr	r3, [sp, #4]
    f99a:	9a00      	ldr	r2, [sp, #0]
    f99c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]++;
    f9a0:	4a06      	ldr	r2, [pc, #24]	; (f9bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    f9a2:	9b01      	ldr	r3, [sp, #4]
    f9a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9a8:	1c5a      	adds	r2, r3, #1
    f9aa:	4904      	ldr	r1, [pc, #16]	; (f9bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
    f9ac:	9b01      	ldr	r3, [sp, #4]
    f9ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f9b2:	bf00      	nop
    f9b4:	b003      	add	sp, #12
    f9b6:	f85d fb04 	ldr.w	pc, [sp], #4
    f9ba:	bf00      	nop
    f9bc:	1fff9270 	.word	0x1fff9270
    f9c0:	1fff926c 	.word	0x1fff926c

0000f9c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
    f9c4:	b500      	push	{lr}
    f9c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f9c8:	f7f1 feee 	bl	17a8 <Sys_GetCoreID>
    f9cc:	4603      	mov	r3, r0
    f9ce:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]--;
    f9d0:	4a0d      	ldr	r2, [pc, #52]	; (fa08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    f9d2:	9b01      	ldr	r3, [sp, #4]
    f9d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9d8:	1e5a      	subs	r2, r3, #1
    f9da:	490b      	ldr	r1, [pc, #44]	; (fa08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    f9dc:	9b01      	ldr	r3, [sp, #4]
    f9de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    f9e2:	4a0a      	ldr	r2, [pc, #40]	; (fa0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x48>)
    f9e4:	9b01      	ldr	r3, [sp, #4]
    f9e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9ea:	f003 0301 	and.w	r3, r3, #1
    f9ee:	2b00      	cmp	r3, #0
    f9f0:	d106      	bne.n	fa00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    f9f2:	4a05      	ldr	r2, [pc, #20]	; (fa08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
    f9f4:	9b01      	ldr	r3, [sp, #4]
    f9f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f9fa:	2b00      	cmp	r3, #0
    f9fc:	d100      	bne.n	fa00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f9fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fa00:	bf00      	nop
    fa02:	b003      	add	sp, #12
    fa04:	f85d fb04 	ldr.w	pc, [sp], #4
    fa08:	1fff9270 	.word	0x1fff9270
    fa0c:	1fff926c 	.word	0x1fff926c

0000fa10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
    fa10:	b500      	push	{lr}
    fa12:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fa14:	f7f1 fec8 	bl	17a8 <Sys_GetCoreID>
    fa18:	4603      	mov	r3, r0
    fa1a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId])
    fa1c:	4a10      	ldr	r2, [pc, #64]	; (fa60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    fa1e:	9b01      	ldr	r3, [sp, #4]
    fa20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa24:	2b00      	cmp	r3, #0
    fa26:	d10d      	bne.n	fa44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fa28:	f7f0 ff52 	bl	8d0 <Adc_schm_read_msr>
    fa2c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fa2e:	9b00      	ldr	r3, [sp, #0]
    fa30:	f003 0301 	and.w	r3, r3, #1
    fa34:	2b00      	cmp	r3, #0
    fa36:	d100      	bne.n	fa3a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fa38:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    fa3a:	490a      	ldr	r1, [pc, #40]	; (fa64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x54>)
    fa3c:	9b01      	ldr	r3, [sp, #4]
    fa3e:	9a00      	ldr	r2, [sp, #0]
    fa40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]++;
    fa44:	4a06      	ldr	r2, [pc, #24]	; (fa60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    fa46:	9b01      	ldr	r3, [sp, #4]
    fa48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa4c:	1c5a      	adds	r2, r3, #1
    fa4e:	4904      	ldr	r1, [pc, #16]	; (fa60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
    fa50:	9b01      	ldr	r3, [sp, #4]
    fa52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fa56:	bf00      	nop
    fa58:	b003      	add	sp, #12
    fa5a:	f85d fb04 	ldr.w	pc, [sp], #4
    fa5e:	bf00      	nop
    fa60:	1fff9278 	.word	0x1fff9278
    fa64:	1fff9274 	.word	0x1fff9274

0000fa68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
    fa68:	b500      	push	{lr}
    fa6a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fa6c:	f7f1 fe9c 	bl	17a8 <Sys_GetCoreID>
    fa70:	4603      	mov	r3, r0
    fa72:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]--;
    fa74:	4a0d      	ldr	r2, [pc, #52]	; (faac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    fa76:	9b01      	ldr	r3, [sp, #4]
    fa78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa7c:	1e5a      	subs	r2, r3, #1
    fa7e:	490b      	ldr	r1, [pc, #44]	; (faac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    fa80:	9b01      	ldr	r3, [sp, #4]
    fa82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    fa86:	4a0a      	ldr	r2, [pc, #40]	; (fab0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x48>)
    fa88:	9b01      	ldr	r3, [sp, #4]
    fa8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa8e:	f003 0301 	and.w	r3, r3, #1
    fa92:	2b00      	cmp	r3, #0
    fa94:	d106      	bne.n	faa4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    fa96:	4a05      	ldr	r2, [pc, #20]	; (faac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
    fa98:	9b01      	ldr	r3, [sp, #4]
    fa9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa9e:	2b00      	cmp	r3, #0
    faa0:	d100      	bne.n	faa4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    faa2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    faa4:	bf00      	nop
    faa6:	b003      	add	sp, #12
    faa8:	f85d fb04 	ldr.w	pc, [sp], #4
    faac:	1fff9278 	.word	0x1fff9278
    fab0:	1fff9274 	.word	0x1fff9274

0000fab4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
    fab4:	b500      	push	{lr}
    fab6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fab8:	f7f1 fe76 	bl	17a8 <Sys_GetCoreID>
    fabc:	4603      	mov	r3, r0
    fabe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId])
    fac0:	4a10      	ldr	r2, [pc, #64]	; (fb04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    fac2:	9b01      	ldr	r3, [sp, #4]
    fac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fac8:	2b00      	cmp	r3, #0
    faca:	d10d      	bne.n	fae8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    facc:	f7f0 ff00 	bl	8d0 <Adc_schm_read_msr>
    fad0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fad2:	9b00      	ldr	r3, [sp, #0]
    fad4:	f003 0301 	and.w	r3, r3, #1
    fad8:	2b00      	cmp	r3, #0
    fada:	d100      	bne.n	fade <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fadc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    fade:	490a      	ldr	r1, [pc, #40]	; (fb08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x54>)
    fae0:	9b01      	ldr	r3, [sp, #4]
    fae2:	9a00      	ldr	r2, [sp, #0]
    fae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]++;
    fae8:	4a06      	ldr	r2, [pc, #24]	; (fb04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    faea:	9b01      	ldr	r3, [sp, #4]
    faec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    faf0:	1c5a      	adds	r2, r3, #1
    faf2:	4904      	ldr	r1, [pc, #16]	; (fb04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
    faf4:	9b01      	ldr	r3, [sp, #4]
    faf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fafa:	bf00      	nop
    fafc:	b003      	add	sp, #12
    fafe:	f85d fb04 	ldr.w	pc, [sp], #4
    fb02:	bf00      	nop
    fb04:	1fff9280 	.word	0x1fff9280
    fb08:	1fff927c 	.word	0x1fff927c

0000fb0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
    fb0c:	b500      	push	{lr}
    fb0e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fb10:	f7f1 fe4a 	bl	17a8 <Sys_GetCoreID>
    fb14:	4603      	mov	r3, r0
    fb16:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]--;
    fb18:	4a0d      	ldr	r2, [pc, #52]	; (fb50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    fb1a:	9b01      	ldr	r3, [sp, #4]
    fb1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb20:	1e5a      	subs	r2, r3, #1
    fb22:	490b      	ldr	r1, [pc, #44]	; (fb50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    fb24:	9b01      	ldr	r3, [sp, #4]
    fb26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    fb2a:	4a0a      	ldr	r2, [pc, #40]	; (fb54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x48>)
    fb2c:	9b01      	ldr	r3, [sp, #4]
    fb2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb32:	f003 0301 	and.w	r3, r3, #1
    fb36:	2b00      	cmp	r3, #0
    fb38:	d106      	bne.n	fb48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    fb3a:	4a05      	ldr	r2, [pc, #20]	; (fb50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
    fb3c:	9b01      	ldr	r3, [sp, #4]
    fb3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb42:	2b00      	cmp	r3, #0
    fb44:	d100      	bne.n	fb48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fb46:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fb48:	bf00      	nop
    fb4a:	b003      	add	sp, #12
    fb4c:	f85d fb04 	ldr.w	pc, [sp], #4
    fb50:	1fff9280 	.word	0x1fff9280
    fb54:	1fff927c 	.word	0x1fff927c

0000fb58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
    fb58:	b500      	push	{lr}
    fb5a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fb5c:	f7f1 fe24 	bl	17a8 <Sys_GetCoreID>
    fb60:	4603      	mov	r3, r0
    fb62:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId])
    fb64:	4a10      	ldr	r2, [pc, #64]	; (fba8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    fb66:	9b01      	ldr	r3, [sp, #4]
    fb68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb6c:	2b00      	cmp	r3, #0
    fb6e:	d10d      	bne.n	fb8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fb70:	f7f0 feae 	bl	8d0 <Adc_schm_read_msr>
    fb74:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fb76:	9b00      	ldr	r3, [sp, #0]
    fb78:	f003 0301 	and.w	r3, r3, #1
    fb7c:	2b00      	cmp	r3, #0
    fb7e:	d100      	bne.n	fb82 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fb80:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    fb82:	490a      	ldr	r1, [pc, #40]	; (fbac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x54>)
    fb84:	9b01      	ldr	r3, [sp, #4]
    fb86:	9a00      	ldr	r2, [sp, #0]
    fb88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]++;
    fb8c:	4a06      	ldr	r2, [pc, #24]	; (fba8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    fb8e:	9b01      	ldr	r3, [sp, #4]
    fb90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb94:	1c5a      	adds	r2, r3, #1
    fb96:	4904      	ldr	r1, [pc, #16]	; (fba8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
    fb98:	9b01      	ldr	r3, [sp, #4]
    fb9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fb9e:	bf00      	nop
    fba0:	b003      	add	sp, #12
    fba2:	f85d fb04 	ldr.w	pc, [sp], #4
    fba6:	bf00      	nop
    fba8:	1fff9288 	.word	0x1fff9288
    fbac:	1fff9284 	.word	0x1fff9284

0000fbb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
    fbb0:	b500      	push	{lr}
    fbb2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fbb4:	f7f1 fdf8 	bl	17a8 <Sys_GetCoreID>
    fbb8:	4603      	mov	r3, r0
    fbba:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]--;
    fbbc:	4a0d      	ldr	r2, [pc, #52]	; (fbf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    fbbe:	9b01      	ldr	r3, [sp, #4]
    fbc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fbc4:	1e5a      	subs	r2, r3, #1
    fbc6:	490b      	ldr	r1, [pc, #44]	; (fbf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    fbc8:	9b01      	ldr	r3, [sp, #4]
    fbca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    fbce:	4a0a      	ldr	r2, [pc, #40]	; (fbf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x48>)
    fbd0:	9b01      	ldr	r3, [sp, #4]
    fbd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fbd6:	f003 0301 	and.w	r3, r3, #1
    fbda:	2b00      	cmp	r3, #0
    fbdc:	d106      	bne.n	fbec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    fbde:	4a05      	ldr	r2, [pc, #20]	; (fbf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
    fbe0:	9b01      	ldr	r3, [sp, #4]
    fbe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fbe6:	2b00      	cmp	r3, #0
    fbe8:	d100      	bne.n	fbec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fbea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fbec:	bf00      	nop
    fbee:	b003      	add	sp, #12
    fbf0:	f85d fb04 	ldr.w	pc, [sp], #4
    fbf4:	1fff9288 	.word	0x1fff9288
    fbf8:	1fff9284 	.word	0x1fff9284

0000fbfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
    fbfc:	b500      	push	{lr}
    fbfe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fc00:	f7f1 fdd2 	bl	17a8 <Sys_GetCoreID>
    fc04:	4603      	mov	r3, r0
    fc06:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId])
    fc08:	4a10      	ldr	r2, [pc, #64]	; (fc4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    fc0a:	9b01      	ldr	r3, [sp, #4]
    fc0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc10:	2b00      	cmp	r3, #0
    fc12:	d10d      	bne.n	fc30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fc14:	f7f0 fe5c 	bl	8d0 <Adc_schm_read_msr>
    fc18:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fc1a:	9b00      	ldr	r3, [sp, #0]
    fc1c:	f003 0301 	and.w	r3, r3, #1
    fc20:	2b00      	cmp	r3, #0
    fc22:	d100      	bne.n	fc26 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fc24:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    fc26:	490a      	ldr	r1, [pc, #40]	; (fc50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x54>)
    fc28:	9b01      	ldr	r3, [sp, #4]
    fc2a:	9a00      	ldr	r2, [sp, #0]
    fc2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]++;
    fc30:	4a06      	ldr	r2, [pc, #24]	; (fc4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    fc32:	9b01      	ldr	r3, [sp, #4]
    fc34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc38:	1c5a      	adds	r2, r3, #1
    fc3a:	4904      	ldr	r1, [pc, #16]	; (fc4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
    fc3c:	9b01      	ldr	r3, [sp, #4]
    fc3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fc42:	bf00      	nop
    fc44:	b003      	add	sp, #12
    fc46:	f85d fb04 	ldr.w	pc, [sp], #4
    fc4a:	bf00      	nop
    fc4c:	1fff9290 	.word	0x1fff9290
    fc50:	1fff928c 	.word	0x1fff928c

0000fc54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
    fc54:	b500      	push	{lr}
    fc56:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fc58:	f7f1 fda6 	bl	17a8 <Sys_GetCoreID>
    fc5c:	4603      	mov	r3, r0
    fc5e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]--;
    fc60:	4a0d      	ldr	r2, [pc, #52]	; (fc98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    fc62:	9b01      	ldr	r3, [sp, #4]
    fc64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc68:	1e5a      	subs	r2, r3, #1
    fc6a:	490b      	ldr	r1, [pc, #44]	; (fc98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    fc6c:	9b01      	ldr	r3, [sp, #4]
    fc6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    fc72:	4a0a      	ldr	r2, [pc, #40]	; (fc9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x48>)
    fc74:	9b01      	ldr	r3, [sp, #4]
    fc76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc7a:	f003 0301 	and.w	r3, r3, #1
    fc7e:	2b00      	cmp	r3, #0
    fc80:	d106      	bne.n	fc90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    fc82:	4a05      	ldr	r2, [pc, #20]	; (fc98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
    fc84:	9b01      	ldr	r3, [sp, #4]
    fc86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fc8a:	2b00      	cmp	r3, #0
    fc8c:	d100      	bne.n	fc90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fc8e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fc90:	bf00      	nop
    fc92:	b003      	add	sp, #12
    fc94:	f85d fb04 	ldr.w	pc, [sp], #4
    fc98:	1fff9290 	.word	0x1fff9290
    fc9c:	1fff928c 	.word	0x1fff928c

0000fca0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
    fca0:	b500      	push	{lr}
    fca2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fca4:	f7f1 fd80 	bl	17a8 <Sys_GetCoreID>
    fca8:	4603      	mov	r3, r0
    fcaa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId])
    fcac:	4a10      	ldr	r2, [pc, #64]	; (fcf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    fcae:	9b01      	ldr	r3, [sp, #4]
    fcb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fcb4:	2b00      	cmp	r3, #0
    fcb6:	d10d      	bne.n	fcd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fcb8:	f7f0 fe0a 	bl	8d0 <Adc_schm_read_msr>
    fcbc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fcbe:	9b00      	ldr	r3, [sp, #0]
    fcc0:	f003 0301 	and.w	r3, r3, #1
    fcc4:	2b00      	cmp	r3, #0
    fcc6:	d100      	bne.n	fcca <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fcc8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    fcca:	490a      	ldr	r1, [pc, #40]	; (fcf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x54>)
    fccc:	9b01      	ldr	r3, [sp, #4]
    fcce:	9a00      	ldr	r2, [sp, #0]
    fcd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]++;
    fcd4:	4a06      	ldr	r2, [pc, #24]	; (fcf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    fcd6:	9b01      	ldr	r3, [sp, #4]
    fcd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fcdc:	1c5a      	adds	r2, r3, #1
    fcde:	4904      	ldr	r1, [pc, #16]	; (fcf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
    fce0:	9b01      	ldr	r3, [sp, #4]
    fce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fce6:	bf00      	nop
    fce8:	b003      	add	sp, #12
    fcea:	f85d fb04 	ldr.w	pc, [sp], #4
    fcee:	bf00      	nop
    fcf0:	1fff9298 	.word	0x1fff9298
    fcf4:	1fff9294 	.word	0x1fff9294

0000fcf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
    fcf8:	b500      	push	{lr}
    fcfa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fcfc:	f7f1 fd54 	bl	17a8 <Sys_GetCoreID>
    fd00:	4603      	mov	r3, r0
    fd02:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]--;
    fd04:	4a0d      	ldr	r2, [pc, #52]	; (fd3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    fd06:	9b01      	ldr	r3, [sp, #4]
    fd08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd0c:	1e5a      	subs	r2, r3, #1
    fd0e:	490b      	ldr	r1, [pc, #44]	; (fd3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    fd10:	9b01      	ldr	r3, [sp, #4]
    fd12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    fd16:	4a0a      	ldr	r2, [pc, #40]	; (fd40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x48>)
    fd18:	9b01      	ldr	r3, [sp, #4]
    fd1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd1e:	f003 0301 	and.w	r3, r3, #1
    fd22:	2b00      	cmp	r3, #0
    fd24:	d106      	bne.n	fd34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    fd26:	4a05      	ldr	r2, [pc, #20]	; (fd3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
    fd28:	9b01      	ldr	r3, [sp, #4]
    fd2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd2e:	2b00      	cmp	r3, #0
    fd30:	d100      	bne.n	fd34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fd32:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fd34:	bf00      	nop
    fd36:	b003      	add	sp, #12
    fd38:	f85d fb04 	ldr.w	pc, [sp], #4
    fd3c:	1fff9298 	.word	0x1fff9298
    fd40:	1fff9294 	.word	0x1fff9294

0000fd44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
    fd44:	b500      	push	{lr}
    fd46:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fd48:	f7f1 fd2e 	bl	17a8 <Sys_GetCoreID>
    fd4c:	4603      	mov	r3, r0
    fd4e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId])
    fd50:	4a10      	ldr	r2, [pc, #64]	; (fd94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    fd52:	9b01      	ldr	r3, [sp, #4]
    fd54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd58:	2b00      	cmp	r3, #0
    fd5a:	d10d      	bne.n	fd78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fd5c:	f7f0 fdb8 	bl	8d0 <Adc_schm_read_msr>
    fd60:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fd62:	9b00      	ldr	r3, [sp, #0]
    fd64:	f003 0301 	and.w	r3, r3, #1
    fd68:	2b00      	cmp	r3, #0
    fd6a:	d100      	bne.n	fd6e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fd6c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    fd6e:	490a      	ldr	r1, [pc, #40]	; (fd98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x54>)
    fd70:	9b01      	ldr	r3, [sp, #4]
    fd72:	9a00      	ldr	r2, [sp, #0]
    fd74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]++;
    fd78:	4a06      	ldr	r2, [pc, #24]	; (fd94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    fd7a:	9b01      	ldr	r3, [sp, #4]
    fd7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fd80:	1c5a      	adds	r2, r3, #1
    fd82:	4904      	ldr	r1, [pc, #16]	; (fd94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
    fd84:	9b01      	ldr	r3, [sp, #4]
    fd86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fd8a:	bf00      	nop
    fd8c:	b003      	add	sp, #12
    fd8e:	f85d fb04 	ldr.w	pc, [sp], #4
    fd92:	bf00      	nop
    fd94:	1fff92a0 	.word	0x1fff92a0
    fd98:	1fff929c 	.word	0x1fff929c

0000fd9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
    fd9c:	b500      	push	{lr}
    fd9e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fda0:	f7f1 fd02 	bl	17a8 <Sys_GetCoreID>
    fda4:	4603      	mov	r3, r0
    fda6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]--;
    fda8:	4a0d      	ldr	r2, [pc, #52]	; (fde0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    fdaa:	9b01      	ldr	r3, [sp, #4]
    fdac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdb0:	1e5a      	subs	r2, r3, #1
    fdb2:	490b      	ldr	r1, [pc, #44]	; (fde0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    fdb4:	9b01      	ldr	r3, [sp, #4]
    fdb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    fdba:	4a0a      	ldr	r2, [pc, #40]	; (fde4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x48>)
    fdbc:	9b01      	ldr	r3, [sp, #4]
    fdbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdc2:	f003 0301 	and.w	r3, r3, #1
    fdc6:	2b00      	cmp	r3, #0
    fdc8:	d106      	bne.n	fdd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    fdca:	4a05      	ldr	r2, [pc, #20]	; (fde0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
    fdcc:	9b01      	ldr	r3, [sp, #4]
    fdce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdd2:	2b00      	cmp	r3, #0
    fdd4:	d100      	bne.n	fdd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fdd6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fdd8:	bf00      	nop
    fdda:	b003      	add	sp, #12
    fddc:	f85d fb04 	ldr.w	pc, [sp], #4
    fde0:	1fff92a0 	.word	0x1fff92a0
    fde4:	1fff929c 	.word	0x1fff929c

0000fde8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
    fde8:	b500      	push	{lr}
    fdea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fdec:	f7f1 fcdc 	bl	17a8 <Sys_GetCoreID>
    fdf0:	4603      	mov	r3, r0
    fdf2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId])
    fdf4:	4a10      	ldr	r2, [pc, #64]	; (fe38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    fdf6:	9b01      	ldr	r3, [sp, #4]
    fdf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fdfc:	2b00      	cmp	r3, #0
    fdfe:	d10d      	bne.n	fe1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fe00:	f7f0 fd66 	bl	8d0 <Adc_schm_read_msr>
    fe04:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fe06:	9b00      	ldr	r3, [sp, #0]
    fe08:	f003 0301 	and.w	r3, r3, #1
    fe0c:	2b00      	cmp	r3, #0
    fe0e:	d100      	bne.n	fe12 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fe10:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    fe12:	490a      	ldr	r1, [pc, #40]	; (fe3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x54>)
    fe14:	9b01      	ldr	r3, [sp, #4]
    fe16:	9a00      	ldr	r2, [sp, #0]
    fe18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]++;
    fe1c:	4a06      	ldr	r2, [pc, #24]	; (fe38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    fe1e:	9b01      	ldr	r3, [sp, #4]
    fe20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe24:	1c5a      	adds	r2, r3, #1
    fe26:	4904      	ldr	r1, [pc, #16]	; (fe38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
    fe28:	9b01      	ldr	r3, [sp, #4]
    fe2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fe2e:	bf00      	nop
    fe30:	b003      	add	sp, #12
    fe32:	f85d fb04 	ldr.w	pc, [sp], #4
    fe36:	bf00      	nop
    fe38:	1fff92a8 	.word	0x1fff92a8
    fe3c:	1fff92a4 	.word	0x1fff92a4

0000fe40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
    fe40:	b500      	push	{lr}
    fe42:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fe44:	f7f1 fcb0 	bl	17a8 <Sys_GetCoreID>
    fe48:	4603      	mov	r3, r0
    fe4a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]--;
    fe4c:	4a0d      	ldr	r2, [pc, #52]	; (fe84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    fe4e:	9b01      	ldr	r3, [sp, #4]
    fe50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe54:	1e5a      	subs	r2, r3, #1
    fe56:	490b      	ldr	r1, [pc, #44]	; (fe84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    fe58:	9b01      	ldr	r3, [sp, #4]
    fe5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    fe5e:	4a0a      	ldr	r2, [pc, #40]	; (fe88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x48>)
    fe60:	9b01      	ldr	r3, [sp, #4]
    fe62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe66:	f003 0301 	and.w	r3, r3, #1
    fe6a:	2b00      	cmp	r3, #0
    fe6c:	d106      	bne.n	fe7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    fe6e:	4a05      	ldr	r2, [pc, #20]	; (fe84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
    fe70:	9b01      	ldr	r3, [sp, #4]
    fe72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe76:	2b00      	cmp	r3, #0
    fe78:	d100      	bne.n	fe7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    fe7a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    fe7c:	bf00      	nop
    fe7e:	b003      	add	sp, #12
    fe80:	f85d fb04 	ldr.w	pc, [sp], #4
    fe84:	1fff92a8 	.word	0x1fff92a8
    fe88:	1fff92a4 	.word	0x1fff92a4

0000fe8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
    fe8c:	b500      	push	{lr}
    fe8e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fe90:	f7f1 fc8a 	bl	17a8 <Sys_GetCoreID>
    fe94:	4603      	mov	r3, r0
    fe96:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId])
    fe98:	4a10      	ldr	r2, [pc, #64]	; (fedc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    fe9a:	9b01      	ldr	r3, [sp, #4]
    fe9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fea0:	2b00      	cmp	r3, #0
    fea2:	d10d      	bne.n	fec0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    fea4:	f7f0 fd14 	bl	8d0 <Adc_schm_read_msr>
    fea8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    feaa:	9b00      	ldr	r3, [sp, #0]
    feac:	f003 0301 	and.w	r3, r3, #1
    feb0:	2b00      	cmp	r3, #0
    feb2:	d100      	bne.n	feb6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    feb4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    feb6:	490a      	ldr	r1, [pc, #40]	; (fee0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x54>)
    feb8:	9b01      	ldr	r3, [sp, #4]
    feba:	9a00      	ldr	r2, [sp, #0]
    febc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]++;
    fec0:	4a06      	ldr	r2, [pc, #24]	; (fedc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    fec2:	9b01      	ldr	r3, [sp, #4]
    fec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fec8:	1c5a      	adds	r2, r3, #1
    feca:	4904      	ldr	r1, [pc, #16]	; (fedc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
    fecc:	9b01      	ldr	r3, [sp, #4]
    fece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    fed2:	bf00      	nop
    fed4:	b003      	add	sp, #12
    fed6:	f85d fb04 	ldr.w	pc, [sp], #4
    feda:	bf00      	nop
    fedc:	1fff92b0 	.word	0x1fff92b0
    fee0:	1fff92ac 	.word	0x1fff92ac

0000fee4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
    fee4:	b500      	push	{lr}
    fee6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    fee8:	f7f1 fc5e 	bl	17a8 <Sys_GetCoreID>
    feec:	4603      	mov	r3, r0
    feee:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]--;
    fef0:	4a0d      	ldr	r2, [pc, #52]	; (ff28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    fef2:	9b01      	ldr	r3, [sp, #4]
    fef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fef8:	1e5a      	subs	r2, r3, #1
    fefa:	490b      	ldr	r1, [pc, #44]	; (ff28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    fefc:	9b01      	ldr	r3, [sp, #4]
    fefe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    ff02:	4a0a      	ldr	r2, [pc, #40]	; (ff2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x48>)
    ff04:	9b01      	ldr	r3, [sp, #4]
    ff06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff0a:	f003 0301 	and.w	r3, r3, #1
    ff0e:	2b00      	cmp	r3, #0
    ff10:	d106      	bne.n	ff20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    ff12:	4a05      	ldr	r2, [pc, #20]	; (ff28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
    ff14:	9b01      	ldr	r3, [sp, #4]
    ff16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff1a:	2b00      	cmp	r3, #0
    ff1c:	d100      	bne.n	ff20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ff1e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ff20:	bf00      	nop
    ff22:	b003      	add	sp, #12
    ff24:	f85d fb04 	ldr.w	pc, [sp], #4
    ff28:	1fff92b0 	.word	0x1fff92b0
    ff2c:	1fff92ac 	.word	0x1fff92ac

0000ff30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
    ff30:	b500      	push	{lr}
    ff32:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ff34:	f7f1 fc38 	bl	17a8 <Sys_GetCoreID>
    ff38:	4603      	mov	r3, r0
    ff3a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId])
    ff3c:	4a10      	ldr	r2, [pc, #64]	; (ff80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    ff3e:	9b01      	ldr	r3, [sp, #4]
    ff40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff44:	2b00      	cmp	r3, #0
    ff46:	d10d      	bne.n	ff64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ff48:	f7f0 fcc2 	bl	8d0 <Adc_schm_read_msr>
    ff4c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ff4e:	9b00      	ldr	r3, [sp, #0]
    ff50:	f003 0301 	and.w	r3, r3, #1
    ff54:	2b00      	cmp	r3, #0
    ff56:	d100      	bne.n	ff5a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ff58:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    ff5a:	490a      	ldr	r1, [pc, #40]	; (ff84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x54>)
    ff5c:	9b01      	ldr	r3, [sp, #4]
    ff5e:	9a00      	ldr	r2, [sp, #0]
    ff60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]++;
    ff64:	4a06      	ldr	r2, [pc, #24]	; (ff80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    ff66:	9b01      	ldr	r3, [sp, #4]
    ff68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff6c:	1c5a      	adds	r2, r3, #1
    ff6e:	4904      	ldr	r1, [pc, #16]	; (ff80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
    ff70:	9b01      	ldr	r3, [sp, #4]
    ff72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ff76:	bf00      	nop
    ff78:	b003      	add	sp, #12
    ff7a:	f85d fb04 	ldr.w	pc, [sp], #4
    ff7e:	bf00      	nop
    ff80:	1fff92b8 	.word	0x1fff92b8
    ff84:	1fff92b4 	.word	0x1fff92b4

0000ff88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
    ff88:	b500      	push	{lr}
    ff8a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ff8c:	f7f1 fc0c 	bl	17a8 <Sys_GetCoreID>
    ff90:	4603      	mov	r3, r0
    ff92:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]--;
    ff94:	4a0d      	ldr	r2, [pc, #52]	; (ffcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    ff96:	9b01      	ldr	r3, [sp, #4]
    ff98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff9c:	1e5a      	subs	r2, r3, #1
    ff9e:	490b      	ldr	r1, [pc, #44]	; (ffcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    ffa0:	9b01      	ldr	r3, [sp, #4]
    ffa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    ffa6:	4a0a      	ldr	r2, [pc, #40]	; (ffd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x48>)
    ffa8:	9b01      	ldr	r3, [sp, #4]
    ffaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffae:	f003 0301 	and.w	r3, r3, #1
    ffb2:	2b00      	cmp	r3, #0
    ffb4:	d106      	bne.n	ffc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    ffb6:	4a05      	ldr	r2, [pc, #20]	; (ffcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
    ffb8:	9b01      	ldr	r3, [sp, #4]
    ffba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffbe:	2b00      	cmp	r3, #0
    ffc0:	d100      	bne.n	ffc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ffc2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ffc4:	bf00      	nop
    ffc6:	b003      	add	sp, #12
    ffc8:	f85d fb04 	ldr.w	pc, [sp], #4
    ffcc:	1fff92b8 	.word	0x1fff92b8
    ffd0:	1fff92b4 	.word	0x1fff92b4

0000ffd4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
    ffd4:	b500      	push	{lr}
    ffd6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ffd8:	f7f1 fbe6 	bl	17a8 <Sys_GetCoreID>
    ffdc:	4603      	mov	r3, r0
    ffde:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId])
    ffe0:	4a10      	ldr	r2, [pc, #64]	; (10024 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
    ffe2:	9b01      	ldr	r3, [sp, #4]
    ffe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ffe8:	2b00      	cmp	r3, #0
    ffea:	d10d      	bne.n	10008 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ffec:	f7f0 fc70 	bl	8d0 <Adc_schm_read_msr>
    fff0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    fff2:	9b00      	ldr	r3, [sp, #0]
    fff4:	f003 0301 	and.w	r3, r3, #1
    fff8:	2b00      	cmp	r3, #0
    fffa:	d100      	bne.n	fffe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    fffc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    fffe:	490a      	ldr	r1, [pc, #40]	; (10028 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x54>)
   10000:	9b01      	ldr	r3, [sp, #4]
   10002:	9a00      	ldr	r2, [sp, #0]
   10004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]++;
   10008:	4a06      	ldr	r2, [pc, #24]	; (10024 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
   1000a:	9b01      	ldr	r3, [sp, #4]
   1000c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10010:	1c5a      	adds	r2, r3, #1
   10012:	4904      	ldr	r1, [pc, #16]	; (10024 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
   10014:	9b01      	ldr	r3, [sp, #4]
   10016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1001a:	bf00      	nop
   1001c:	b003      	add	sp, #12
   1001e:	f85d fb04 	ldr.w	pc, [sp], #4
   10022:	bf00      	nop
   10024:	1fff92c0 	.word	0x1fff92c0
   10028:	1fff92bc 	.word	0x1fff92bc

0001002c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
   1002c:	b500      	push	{lr}
   1002e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10030:	f7f1 fbba 	bl	17a8 <Sys_GetCoreID>
   10034:	4603      	mov	r3, r0
   10036:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]--;
   10038:	4a0d      	ldr	r2, [pc, #52]	; (10070 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
   1003a:	9b01      	ldr	r3, [sp, #4]
   1003c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10040:	1e5a      	subs	r2, r3, #1
   10042:	490b      	ldr	r1, [pc, #44]	; (10070 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
   10044:	9b01      	ldr	r3, [sp, #4]
   10046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   1004a:	4a0a      	ldr	r2, [pc, #40]	; (10074 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x48>)
   1004c:	9b01      	ldr	r3, [sp, #4]
   1004e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10052:	f003 0301 	and.w	r3, r3, #1
   10056:	2b00      	cmp	r3, #0
   10058:	d106      	bne.n	10068 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
   1005a:	4a05      	ldr	r2, [pc, #20]	; (10070 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
   1005c:	9b01      	ldr	r3, [sp, #4]
   1005e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10062:	2b00      	cmp	r3, #0
   10064:	d100      	bne.n	10068 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10066:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10068:	bf00      	nop
   1006a:	b003      	add	sp, #12
   1006c:	f85d fb04 	ldr.w	pc, [sp], #4
   10070:	1fff92c0 	.word	0x1fff92c0
   10074:	1fff92bc 	.word	0x1fff92bc

00010078 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
   10078:	b500      	push	{lr}
   1007a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1007c:	f7f1 fb94 	bl	17a8 <Sys_GetCoreID>
   10080:	4603      	mov	r3, r0
   10082:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId])
   10084:	4a10      	ldr	r2, [pc, #64]	; (100c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
   10086:	9b01      	ldr	r3, [sp, #4]
   10088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1008c:	2b00      	cmp	r3, #0
   1008e:	d10d      	bne.n	100ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10090:	f7f0 fc1e 	bl	8d0 <Adc_schm_read_msr>
   10094:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10096:	9b00      	ldr	r3, [sp, #0]
   10098:	f003 0301 	and.w	r3, r3, #1
   1009c:	2b00      	cmp	r3, #0
   1009e:	d100      	bne.n	100a2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   100a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   100a2:	490a      	ldr	r1, [pc, #40]	; (100cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x54>)
   100a4:	9b01      	ldr	r3, [sp, #4]
   100a6:	9a00      	ldr	r2, [sp, #0]
   100a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]++;
   100ac:	4a06      	ldr	r2, [pc, #24]	; (100c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
   100ae:	9b01      	ldr	r3, [sp, #4]
   100b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100b4:	1c5a      	adds	r2, r3, #1
   100b6:	4904      	ldr	r1, [pc, #16]	; (100c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
   100b8:	9b01      	ldr	r3, [sp, #4]
   100ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   100be:	bf00      	nop
   100c0:	b003      	add	sp, #12
   100c2:	f85d fb04 	ldr.w	pc, [sp], #4
   100c6:	bf00      	nop
   100c8:	1fff92c8 	.word	0x1fff92c8
   100cc:	1fff92c4 	.word	0x1fff92c4

000100d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
   100d0:	b500      	push	{lr}
   100d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   100d4:	f7f1 fb68 	bl	17a8 <Sys_GetCoreID>
   100d8:	4603      	mov	r3, r0
   100da:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]--;
   100dc:	4a0d      	ldr	r2, [pc, #52]	; (10114 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
   100de:	9b01      	ldr	r3, [sp, #4]
   100e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100e4:	1e5a      	subs	r2, r3, #1
   100e6:	490b      	ldr	r1, [pc, #44]	; (10114 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
   100e8:	9b01      	ldr	r3, [sp, #4]
   100ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   100ee:	4a0a      	ldr	r2, [pc, #40]	; (10118 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x48>)
   100f0:	9b01      	ldr	r3, [sp, #4]
   100f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100f6:	f003 0301 	and.w	r3, r3, #1
   100fa:	2b00      	cmp	r3, #0
   100fc:	d106      	bne.n	1010c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
   100fe:	4a05      	ldr	r2, [pc, #20]	; (10114 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
   10100:	9b01      	ldr	r3, [sp, #4]
   10102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10106:	2b00      	cmp	r3, #0
   10108:	d100      	bne.n	1010c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1010a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1010c:	bf00      	nop
   1010e:	b003      	add	sp, #12
   10110:	f85d fb04 	ldr.w	pc, [sp], #4
   10114:	1fff92c8 	.word	0x1fff92c8
   10118:	1fff92c4 	.word	0x1fff92c4

0001011c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
   1011c:	b500      	push	{lr}
   1011e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10120:	f7f1 fb42 	bl	17a8 <Sys_GetCoreID>
   10124:	4603      	mov	r3, r0
   10126:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId])
   10128:	4a10      	ldr	r2, [pc, #64]	; (1016c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
   1012a:	9b01      	ldr	r3, [sp, #4]
   1012c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10130:	2b00      	cmp	r3, #0
   10132:	d10d      	bne.n	10150 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10134:	f7f0 fbcc 	bl	8d0 <Adc_schm_read_msr>
   10138:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1013a:	9b00      	ldr	r3, [sp, #0]
   1013c:	f003 0301 	and.w	r3, r3, #1
   10140:	2b00      	cmp	r3, #0
   10142:	d100      	bne.n	10146 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10144:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   10146:	490a      	ldr	r1, [pc, #40]	; (10170 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x54>)
   10148:	9b01      	ldr	r3, [sp, #4]
   1014a:	9a00      	ldr	r2, [sp, #0]
   1014c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]++;
   10150:	4a06      	ldr	r2, [pc, #24]	; (1016c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
   10152:	9b01      	ldr	r3, [sp, #4]
   10154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10158:	1c5a      	adds	r2, r3, #1
   1015a:	4904      	ldr	r1, [pc, #16]	; (1016c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
   1015c:	9b01      	ldr	r3, [sp, #4]
   1015e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10162:	bf00      	nop
   10164:	b003      	add	sp, #12
   10166:	f85d fb04 	ldr.w	pc, [sp], #4
   1016a:	bf00      	nop
   1016c:	1fff92d0 	.word	0x1fff92d0
   10170:	1fff92cc 	.word	0x1fff92cc

00010174 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
   10174:	b500      	push	{lr}
   10176:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10178:	f7f1 fb16 	bl	17a8 <Sys_GetCoreID>
   1017c:	4603      	mov	r3, r0
   1017e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]--;
   10180:	4a0d      	ldr	r2, [pc, #52]	; (101b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
   10182:	9b01      	ldr	r3, [sp, #4]
   10184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10188:	1e5a      	subs	r2, r3, #1
   1018a:	490b      	ldr	r1, [pc, #44]	; (101b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
   1018c:	9b01      	ldr	r3, [sp, #4]
   1018e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   10192:	4a0a      	ldr	r2, [pc, #40]	; (101bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x48>)
   10194:	9b01      	ldr	r3, [sp, #4]
   10196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1019a:	f003 0301 	and.w	r3, r3, #1
   1019e:	2b00      	cmp	r3, #0
   101a0:	d106      	bne.n	101b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
   101a2:	4a05      	ldr	r2, [pc, #20]	; (101b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
   101a4:	9b01      	ldr	r3, [sp, #4]
   101a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101aa:	2b00      	cmp	r3, #0
   101ac:	d100      	bne.n	101b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   101ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   101b0:	bf00      	nop
   101b2:	b003      	add	sp, #12
   101b4:	f85d fb04 	ldr.w	pc, [sp], #4
   101b8:	1fff92d0 	.word	0x1fff92d0
   101bc:	1fff92cc 	.word	0x1fff92cc

000101c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
   101c0:	b500      	push	{lr}
   101c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   101c4:	f7f1 faf0 	bl	17a8 <Sys_GetCoreID>
   101c8:	4603      	mov	r3, r0
   101ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId])
   101cc:	4a10      	ldr	r2, [pc, #64]	; (10210 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
   101ce:	9b01      	ldr	r3, [sp, #4]
   101d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101d4:	2b00      	cmp	r3, #0
   101d6:	d10d      	bne.n	101f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   101d8:	f7f0 fb7a 	bl	8d0 <Adc_schm_read_msr>
   101dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   101de:	9b00      	ldr	r3, [sp, #0]
   101e0:	f003 0301 	and.w	r3, r3, #1
   101e4:	2b00      	cmp	r3, #0
   101e6:	d100      	bne.n	101ea <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   101e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   101ea:	490a      	ldr	r1, [pc, #40]	; (10214 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x54>)
   101ec:	9b01      	ldr	r3, [sp, #4]
   101ee:	9a00      	ldr	r2, [sp, #0]
   101f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]++;
   101f4:	4a06      	ldr	r2, [pc, #24]	; (10210 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
   101f6:	9b01      	ldr	r3, [sp, #4]
   101f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101fc:	1c5a      	adds	r2, r3, #1
   101fe:	4904      	ldr	r1, [pc, #16]	; (10210 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
   10200:	9b01      	ldr	r3, [sp, #4]
   10202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10206:	bf00      	nop
   10208:	b003      	add	sp, #12
   1020a:	f85d fb04 	ldr.w	pc, [sp], #4
   1020e:	bf00      	nop
   10210:	1fff92d8 	.word	0x1fff92d8
   10214:	1fff92d4 	.word	0x1fff92d4

00010218 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
   10218:	b500      	push	{lr}
   1021a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1021c:	f7f1 fac4 	bl	17a8 <Sys_GetCoreID>
   10220:	4603      	mov	r3, r0
   10222:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]--;
   10224:	4a0d      	ldr	r2, [pc, #52]	; (1025c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   10226:	9b01      	ldr	r3, [sp, #4]
   10228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1022c:	1e5a      	subs	r2, r3, #1
   1022e:	490b      	ldr	r1, [pc, #44]	; (1025c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   10230:	9b01      	ldr	r3, [sp, #4]
   10232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   10236:	4a0a      	ldr	r2, [pc, #40]	; (10260 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x48>)
   10238:	9b01      	ldr	r3, [sp, #4]
   1023a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1023e:	f003 0301 	and.w	r3, r3, #1
   10242:	2b00      	cmp	r3, #0
   10244:	d106      	bne.n	10254 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
   10246:	4a05      	ldr	r2, [pc, #20]	; (1025c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   10248:	9b01      	ldr	r3, [sp, #4]
   1024a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1024e:	2b00      	cmp	r3, #0
   10250:	d100      	bne.n	10254 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10252:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10254:	bf00      	nop
   10256:	b003      	add	sp, #12
   10258:	f85d fb04 	ldr.w	pc, [sp], #4
   1025c:	1fff92d8 	.word	0x1fff92d8
   10260:	1fff92d4 	.word	0x1fff92d4

00010264 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
   10264:	b500      	push	{lr}
   10266:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10268:	f7f1 fa9e 	bl	17a8 <Sys_GetCoreID>
   1026c:	4603      	mov	r3, r0
   1026e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId])
   10270:	4a10      	ldr	r2, [pc, #64]	; (102b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   10272:	9b01      	ldr	r3, [sp, #4]
   10274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10278:	2b00      	cmp	r3, #0
   1027a:	d10d      	bne.n	10298 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1027c:	f7f0 fb28 	bl	8d0 <Adc_schm_read_msr>
   10280:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10282:	9b00      	ldr	r3, [sp, #0]
   10284:	f003 0301 	and.w	r3, r3, #1
   10288:	2b00      	cmp	r3, #0
   1028a:	d100      	bne.n	1028e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1028c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_28[u32CoreId] = msr;
   1028e:	490a      	ldr	r1, [pc, #40]	; (102b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x54>)
   10290:	9b01      	ldr	r3, [sp, #4]
   10292:	9a00      	ldr	r2, [sp, #0]
   10294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]++;
   10298:	4a06      	ldr	r2, [pc, #24]	; (102b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   1029a:	9b01      	ldr	r3, [sp, #4]
   1029c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102a0:	1c5a      	adds	r2, r3, #1
   102a2:	4904      	ldr	r1, [pc, #16]	; (102b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   102a4:	9b01      	ldr	r3, [sp, #4]
   102a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   102aa:	bf00      	nop
   102ac:	b003      	add	sp, #12
   102ae:	f85d fb04 	ldr.w	pc, [sp], #4
   102b2:	bf00      	nop
   102b4:	1fff92e0 	.word	0x1fff92e0
   102b8:	1fff92dc 	.word	0x1fff92dc

000102bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
   102bc:	b500      	push	{lr}
   102be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   102c0:	f7f1 fa72 	bl	17a8 <Sys_GetCoreID>
   102c4:	4603      	mov	r3, r0
   102c6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]--;
   102c8:	4a0d      	ldr	r2, [pc, #52]	; (10300 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   102ca:	9b01      	ldr	r3, [sp, #4]
   102cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102d0:	1e5a      	subs	r2, r3, #1
   102d2:	490b      	ldr	r1, [pc, #44]	; (10300 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   102d4:	9b01      	ldr	r3, [sp, #4]
   102d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_28[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]))         /*if interrupts were enabled*/
   102da:	4a0a      	ldr	r2, [pc, #40]	; (10304 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x48>)
   102dc:	9b01      	ldr	r3, [sp, #4]
   102de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102e2:	f003 0301 	and.w	r3, r3, #1
   102e6:	2b00      	cmp	r3, #0
   102e8:	d106      	bne.n	102f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
   102ea:	4a05      	ldr	r2, [pc, #20]	; (10300 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   102ec:	9b01      	ldr	r3, [sp, #4]
   102ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102f2:	2b00      	cmp	r3, #0
   102f4:	d100      	bne.n	102f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   102f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   102f8:	bf00      	nop
   102fa:	b003      	add	sp, #12
   102fc:	f85d fb04 	ldr.w	pc, [sp], #4
   10300:	1fff92e0 	.word	0x1fff92e0
   10304:	1fff92dc 	.word	0x1fff92dc

00010308 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
   10308:	b500      	push	{lr}
   1030a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1030c:	f7f1 fa4c 	bl	17a8 <Sys_GetCoreID>
   10310:	4603      	mov	r3, r0
   10312:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId])
   10314:	4a10      	ldr	r2, [pc, #64]	; (10358 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   10316:	9b01      	ldr	r3, [sp, #4]
   10318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1031c:	2b00      	cmp	r3, #0
   1031e:	d10d      	bne.n	1033c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10320:	f7f0 fad6 	bl	8d0 <Adc_schm_read_msr>
   10324:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10326:	9b00      	ldr	r3, [sp, #0]
   10328:	f003 0301 	and.w	r3, r3, #1
   1032c:	2b00      	cmp	r3, #0
   1032e:	d100      	bne.n	10332 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10330:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_29[u32CoreId] = msr;
   10332:	490a      	ldr	r1, [pc, #40]	; (1035c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x54>)
   10334:	9b01      	ldr	r3, [sp, #4]
   10336:	9a00      	ldr	r2, [sp, #0]
   10338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]++;
   1033c:	4a06      	ldr	r2, [pc, #24]	; (10358 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   1033e:	9b01      	ldr	r3, [sp, #4]
   10340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10344:	1c5a      	adds	r2, r3, #1
   10346:	4904      	ldr	r1, [pc, #16]	; (10358 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   10348:	9b01      	ldr	r3, [sp, #4]
   1034a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1034e:	bf00      	nop
   10350:	b003      	add	sp, #12
   10352:	f85d fb04 	ldr.w	pc, [sp], #4
   10356:	bf00      	nop
   10358:	1fff92e8 	.word	0x1fff92e8
   1035c:	1fff92e4 	.word	0x1fff92e4

00010360 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
   10360:	b500      	push	{lr}
   10362:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10364:	f7f1 fa20 	bl	17a8 <Sys_GetCoreID>
   10368:	4603      	mov	r3, r0
   1036a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]--;
   1036c:	4a0d      	ldr	r2, [pc, #52]	; (103a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   1036e:	9b01      	ldr	r3, [sp, #4]
   10370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10374:	1e5a      	subs	r2, r3, #1
   10376:	490b      	ldr	r1, [pc, #44]	; (103a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   10378:	9b01      	ldr	r3, [sp, #4]
   1037a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
   1037e:	4a0a      	ldr	r2, [pc, #40]	; (103a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x48>)
   10380:	9b01      	ldr	r3, [sp, #4]
   10382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10386:	f003 0301 	and.w	r3, r3, #1
   1038a:	2b00      	cmp	r3, #0
   1038c:	d106      	bne.n	1039c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
   1038e:	4a05      	ldr	r2, [pc, #20]	; (103a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   10390:	9b01      	ldr	r3, [sp, #4]
   10392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10396:	2b00      	cmp	r3, #0
   10398:	d100      	bne.n	1039c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1039a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1039c:	bf00      	nop
   1039e:	b003      	add	sp, #12
   103a0:	f85d fb04 	ldr.w	pc, [sp], #4
   103a4:	1fff92e8 	.word	0x1fff92e8
   103a8:	1fff92e4 	.word	0x1fff92e4

000103ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
   103ac:	b500      	push	{lr}
   103ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   103b0:	f7f1 f9fa 	bl	17a8 <Sys_GetCoreID>
   103b4:	4603      	mov	r3, r0
   103b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId])
   103b8:	4a10      	ldr	r2, [pc, #64]	; (103fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   103ba:	9b01      	ldr	r3, [sp, #4]
   103bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103c0:	2b00      	cmp	r3, #0
   103c2:	d10d      	bne.n	103e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   103c4:	f7f0 fa84 	bl	8d0 <Adc_schm_read_msr>
   103c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   103ca:	9b00      	ldr	r3, [sp, #0]
   103cc:	f003 0301 	and.w	r3, r3, #1
   103d0:	2b00      	cmp	r3, #0
   103d2:	d100      	bne.n	103d6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   103d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_30[u32CoreId] = msr;
   103d6:	490a      	ldr	r1, [pc, #40]	; (10400 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x54>)
   103d8:	9b01      	ldr	r3, [sp, #4]
   103da:	9a00      	ldr	r2, [sp, #0]
   103dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]++;
   103e0:	4a06      	ldr	r2, [pc, #24]	; (103fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   103e2:	9b01      	ldr	r3, [sp, #4]
   103e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   103e8:	1c5a      	adds	r2, r3, #1
   103ea:	4904      	ldr	r1, [pc, #16]	; (103fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   103ec:	9b01      	ldr	r3, [sp, #4]
   103ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   103f2:	bf00      	nop
   103f4:	b003      	add	sp, #12
   103f6:	f85d fb04 	ldr.w	pc, [sp], #4
   103fa:	bf00      	nop
   103fc:	1fff92f0 	.word	0x1fff92f0
   10400:	1fff92ec 	.word	0x1fff92ec

00010404 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
   10404:	b500      	push	{lr}
   10406:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10408:	f7f1 f9ce 	bl	17a8 <Sys_GetCoreID>
   1040c:	4603      	mov	r3, r0
   1040e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]--;
   10410:	4a0d      	ldr	r2, [pc, #52]	; (10448 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   10412:	9b01      	ldr	r3, [sp, #4]
   10414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10418:	1e5a      	subs	r2, r3, #1
   1041a:	490b      	ldr	r1, [pc, #44]	; (10448 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   1041c:	9b01      	ldr	r3, [sp, #4]
   1041e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
   10422:	4a0a      	ldr	r2, [pc, #40]	; (1044c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x48>)
   10424:	9b01      	ldr	r3, [sp, #4]
   10426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1042a:	f003 0301 	and.w	r3, r3, #1
   1042e:	2b00      	cmp	r3, #0
   10430:	d106      	bne.n	10440 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
   10432:	4a05      	ldr	r2, [pc, #20]	; (10448 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   10434:	9b01      	ldr	r3, [sp, #4]
   10436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1043a:	2b00      	cmp	r3, #0
   1043c:	d100      	bne.n	10440 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1043e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10440:	bf00      	nop
   10442:	b003      	add	sp, #12
   10444:	f85d fb04 	ldr.w	pc, [sp], #4
   10448:	1fff92f0 	.word	0x1fff92f0
   1044c:	1fff92ec 	.word	0x1fff92ec

00010450 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
   10450:	b500      	push	{lr}
   10452:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10454:	f7f1 f9a8 	bl	17a8 <Sys_GetCoreID>
   10458:	4603      	mov	r3, r0
   1045a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId])
   1045c:	4a10      	ldr	r2, [pc, #64]	; (104a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   1045e:	9b01      	ldr	r3, [sp, #4]
   10460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10464:	2b00      	cmp	r3, #0
   10466:	d10d      	bne.n	10484 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10468:	f7f0 fa32 	bl	8d0 <Adc_schm_read_msr>
   1046c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1046e:	9b00      	ldr	r3, [sp, #0]
   10470:	f003 0301 	and.w	r3, r3, #1
   10474:	2b00      	cmp	r3, #0
   10476:	d100      	bne.n	1047a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10478:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_31[u32CoreId] = msr;
   1047a:	490a      	ldr	r1, [pc, #40]	; (104a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x54>)
   1047c:	9b01      	ldr	r3, [sp, #4]
   1047e:	9a00      	ldr	r2, [sp, #0]
   10480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]++;
   10484:	4a06      	ldr	r2, [pc, #24]	; (104a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   10486:	9b01      	ldr	r3, [sp, #4]
   10488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1048c:	1c5a      	adds	r2, r3, #1
   1048e:	4904      	ldr	r1, [pc, #16]	; (104a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   10490:	9b01      	ldr	r3, [sp, #4]
   10492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10496:	bf00      	nop
   10498:	b003      	add	sp, #12
   1049a:	f85d fb04 	ldr.w	pc, [sp], #4
   1049e:	bf00      	nop
   104a0:	1fff92f8 	.word	0x1fff92f8
   104a4:	1fff92f4 	.word	0x1fff92f4

000104a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
   104a8:	b500      	push	{lr}
   104aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   104ac:	f7f1 f97c 	bl	17a8 <Sys_GetCoreID>
   104b0:	4603      	mov	r3, r0
   104b2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]--;
   104b4:	4a0d      	ldr	r2, [pc, #52]	; (104ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   104b6:	9b01      	ldr	r3, [sp, #4]
   104b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104bc:	1e5a      	subs	r2, r3, #1
   104be:	490b      	ldr	r1, [pc, #44]	; (104ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   104c0:	9b01      	ldr	r3, [sp, #4]
   104c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
   104c6:	4a0a      	ldr	r2, [pc, #40]	; (104f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x48>)
   104c8:	9b01      	ldr	r3, [sp, #4]
   104ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104ce:	f003 0301 	and.w	r3, r3, #1
   104d2:	2b00      	cmp	r3, #0
   104d4:	d106      	bne.n	104e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
   104d6:	4a05      	ldr	r2, [pc, #20]	; (104ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   104d8:	9b01      	ldr	r3, [sp, #4]
   104da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104de:	2b00      	cmp	r3, #0
   104e0:	d100      	bne.n	104e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   104e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   104e4:	bf00      	nop
   104e6:	b003      	add	sp, #12
   104e8:	f85d fb04 	ldr.w	pc, [sp], #4
   104ec:	1fff92f8 	.word	0x1fff92f8
   104f0:	1fff92f4 	.word	0x1fff92f4

000104f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
   104f4:	b500      	push	{lr}
   104f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   104f8:	f7f1 f956 	bl	17a8 <Sys_GetCoreID>
   104fc:	4603      	mov	r3, r0
   104fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId])
   10500:	4a10      	ldr	r2, [pc, #64]	; (10544 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   10502:	9b01      	ldr	r3, [sp, #4]
   10504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10508:	2b00      	cmp	r3, #0
   1050a:	d10d      	bne.n	10528 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1050c:	f7f0 f9e0 	bl	8d0 <Adc_schm_read_msr>
   10510:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10512:	9b00      	ldr	r3, [sp, #0]
   10514:	f003 0301 	and.w	r3, r3, #1
   10518:	2b00      	cmp	r3, #0
   1051a:	d100      	bne.n	1051e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1051c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_32[u32CoreId] = msr;
   1051e:	490a      	ldr	r1, [pc, #40]	; (10548 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x54>)
   10520:	9b01      	ldr	r3, [sp, #4]
   10522:	9a00      	ldr	r2, [sp, #0]
   10524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]++;
   10528:	4a06      	ldr	r2, [pc, #24]	; (10544 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   1052a:	9b01      	ldr	r3, [sp, #4]
   1052c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10530:	1c5a      	adds	r2, r3, #1
   10532:	4904      	ldr	r1, [pc, #16]	; (10544 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   10534:	9b01      	ldr	r3, [sp, #4]
   10536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1053a:	bf00      	nop
   1053c:	b003      	add	sp, #12
   1053e:	f85d fb04 	ldr.w	pc, [sp], #4
   10542:	bf00      	nop
   10544:	1fff9300 	.word	0x1fff9300
   10548:	1fff92fc 	.word	0x1fff92fc

0001054c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
   1054c:	b500      	push	{lr}
   1054e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10550:	f7f1 f92a 	bl	17a8 <Sys_GetCoreID>
   10554:	4603      	mov	r3, r0
   10556:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]--;
   10558:	4a0d      	ldr	r2, [pc, #52]	; (10590 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   1055a:	9b01      	ldr	r3, [sp, #4]
   1055c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10560:	1e5a      	subs	r2, r3, #1
   10562:	490b      	ldr	r1, [pc, #44]	; (10590 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   10564:	9b01      	ldr	r3, [sp, #4]
   10566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_32[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]))         /*if interrupts were enabled*/
   1056a:	4a0a      	ldr	r2, [pc, #40]	; (10594 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x48>)
   1056c:	9b01      	ldr	r3, [sp, #4]
   1056e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10572:	f003 0301 	and.w	r3, r3, #1
   10576:	2b00      	cmp	r3, #0
   10578:	d106      	bne.n	10588 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
   1057a:	4a05      	ldr	r2, [pc, #20]	; (10590 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   1057c:	9b01      	ldr	r3, [sp, #4]
   1057e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10582:	2b00      	cmp	r3, #0
   10584:	d100      	bne.n	10588 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10586:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10588:	bf00      	nop
   1058a:	b003      	add	sp, #12
   1058c:	f85d fb04 	ldr.w	pc, [sp], #4
   10590:	1fff9300 	.word	0x1fff9300
   10594:	1fff92fc 	.word	0x1fff92fc

00010598 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
   10598:	b500      	push	{lr}
   1059a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1059c:	f7f1 f904 	bl	17a8 <Sys_GetCoreID>
   105a0:	4603      	mov	r3, r0
   105a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId])
   105a4:	4a10      	ldr	r2, [pc, #64]	; (105e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   105a6:	9b01      	ldr	r3, [sp, #4]
   105a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105ac:	2b00      	cmp	r3, #0
   105ae:	d10d      	bne.n	105cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   105b0:	f7f0 f98e 	bl	8d0 <Adc_schm_read_msr>
   105b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   105b6:	9b00      	ldr	r3, [sp, #0]
   105b8:	f003 0301 	and.w	r3, r3, #1
   105bc:	2b00      	cmp	r3, #0
   105be:	d100      	bne.n	105c2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   105c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_33[u32CoreId] = msr;
   105c2:	490a      	ldr	r1, [pc, #40]	; (105ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x54>)
   105c4:	9b01      	ldr	r3, [sp, #4]
   105c6:	9a00      	ldr	r2, [sp, #0]
   105c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]++;
   105cc:	4a06      	ldr	r2, [pc, #24]	; (105e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   105ce:	9b01      	ldr	r3, [sp, #4]
   105d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   105d4:	1c5a      	adds	r2, r3, #1
   105d6:	4904      	ldr	r1, [pc, #16]	; (105e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   105d8:	9b01      	ldr	r3, [sp, #4]
   105da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   105de:	bf00      	nop
   105e0:	b003      	add	sp, #12
   105e2:	f85d fb04 	ldr.w	pc, [sp], #4
   105e6:	bf00      	nop
   105e8:	1fff9308 	.word	0x1fff9308
   105ec:	1fff9304 	.word	0x1fff9304

000105f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
   105f0:	b500      	push	{lr}
   105f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   105f4:	f7f1 f8d8 	bl	17a8 <Sys_GetCoreID>
   105f8:	4603      	mov	r3, r0
   105fa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]--;
   105fc:	4a0d      	ldr	r2, [pc, #52]	; (10634 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   105fe:	9b01      	ldr	r3, [sp, #4]
   10600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10604:	1e5a      	subs	r2, r3, #1
   10606:	490b      	ldr	r1, [pc, #44]	; (10634 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   10608:	9b01      	ldr	r3, [sp, #4]
   1060a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_33[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]))         /*if interrupts were enabled*/
   1060e:	4a0a      	ldr	r2, [pc, #40]	; (10638 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x48>)
   10610:	9b01      	ldr	r3, [sp, #4]
   10612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10616:	f003 0301 	and.w	r3, r3, #1
   1061a:	2b00      	cmp	r3, #0
   1061c:	d106      	bne.n	1062c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
   1061e:	4a05      	ldr	r2, [pc, #20]	; (10634 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   10620:	9b01      	ldr	r3, [sp, #4]
   10622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10626:	2b00      	cmp	r3, #0
   10628:	d100      	bne.n	1062c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1062a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1062c:	bf00      	nop
   1062e:	b003      	add	sp, #12
   10630:	f85d fb04 	ldr.w	pc, [sp], #4
   10634:	1fff9308 	.word	0x1fff9308
   10638:	1fff9304 	.word	0x1fff9304

0001063c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
   1063c:	b500      	push	{lr}
   1063e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10640:	f7f1 f8b2 	bl	17a8 <Sys_GetCoreID>
   10644:	4603      	mov	r3, r0
   10646:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId])
   10648:	4a10      	ldr	r2, [pc, #64]	; (1068c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   1064a:	9b01      	ldr	r3, [sp, #4]
   1064c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10650:	2b00      	cmp	r3, #0
   10652:	d10d      	bne.n	10670 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10654:	f7f0 f93c 	bl	8d0 <Adc_schm_read_msr>
   10658:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1065a:	9b00      	ldr	r3, [sp, #0]
   1065c:	f003 0301 	and.w	r3, r3, #1
   10660:	2b00      	cmp	r3, #0
   10662:	d100      	bne.n	10666 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10664:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_34[u32CoreId] = msr;
   10666:	490a      	ldr	r1, [pc, #40]	; (10690 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x54>)
   10668:	9b01      	ldr	r3, [sp, #4]
   1066a:	9a00      	ldr	r2, [sp, #0]
   1066c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]++;
   10670:	4a06      	ldr	r2, [pc, #24]	; (1068c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   10672:	9b01      	ldr	r3, [sp, #4]
   10674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10678:	1c5a      	adds	r2, r3, #1
   1067a:	4904      	ldr	r1, [pc, #16]	; (1068c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   1067c:	9b01      	ldr	r3, [sp, #4]
   1067e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10682:	bf00      	nop
   10684:	b003      	add	sp, #12
   10686:	f85d fb04 	ldr.w	pc, [sp], #4
   1068a:	bf00      	nop
   1068c:	1fff9310 	.word	0x1fff9310
   10690:	1fff930c 	.word	0x1fff930c

00010694 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
   10694:	b500      	push	{lr}
   10696:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10698:	f7f1 f886 	bl	17a8 <Sys_GetCoreID>
   1069c:	4603      	mov	r3, r0
   1069e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]--;
   106a0:	4a0d      	ldr	r2, [pc, #52]	; (106d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   106a2:	9b01      	ldr	r3, [sp, #4]
   106a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106a8:	1e5a      	subs	r2, r3, #1
   106aa:	490b      	ldr	r1, [pc, #44]	; (106d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   106ac:	9b01      	ldr	r3, [sp, #4]
   106ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_34[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]))         /*if interrupts were enabled*/
   106b2:	4a0a      	ldr	r2, [pc, #40]	; (106dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x48>)
   106b4:	9b01      	ldr	r3, [sp, #4]
   106b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106ba:	f003 0301 	and.w	r3, r3, #1
   106be:	2b00      	cmp	r3, #0
   106c0:	d106      	bne.n	106d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
   106c2:	4a05      	ldr	r2, [pc, #20]	; (106d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   106c4:	9b01      	ldr	r3, [sp, #4]
   106c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106ca:	2b00      	cmp	r3, #0
   106cc:	d100      	bne.n	106d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   106ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   106d0:	bf00      	nop
   106d2:	b003      	add	sp, #12
   106d4:	f85d fb04 	ldr.w	pc, [sp], #4
   106d8:	1fff9310 	.word	0x1fff9310
   106dc:	1fff930c 	.word	0x1fff930c

000106e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
   106e0:	b500      	push	{lr}
   106e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   106e4:	f7f1 f860 	bl	17a8 <Sys_GetCoreID>
   106e8:	4603      	mov	r3, r0
   106ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId])
   106ec:	4a10      	ldr	r2, [pc, #64]	; (10730 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   106ee:	9b01      	ldr	r3, [sp, #4]
   106f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   106f4:	2b00      	cmp	r3, #0
   106f6:	d10d      	bne.n	10714 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   106f8:	f7f0 f8ea 	bl	8d0 <Adc_schm_read_msr>
   106fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   106fe:	9b00      	ldr	r3, [sp, #0]
   10700:	f003 0301 	and.w	r3, r3, #1
   10704:	2b00      	cmp	r3, #0
   10706:	d100      	bne.n	1070a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10708:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_35[u32CoreId] = msr;
   1070a:	490a      	ldr	r1, [pc, #40]	; (10734 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x54>)
   1070c:	9b01      	ldr	r3, [sp, #4]
   1070e:	9a00      	ldr	r2, [sp, #0]
   10710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]++;
   10714:	4a06      	ldr	r2, [pc, #24]	; (10730 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   10716:	9b01      	ldr	r3, [sp, #4]
   10718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1071c:	1c5a      	adds	r2, r3, #1
   1071e:	4904      	ldr	r1, [pc, #16]	; (10730 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   10720:	9b01      	ldr	r3, [sp, #4]
   10722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10726:	bf00      	nop
   10728:	b003      	add	sp, #12
   1072a:	f85d fb04 	ldr.w	pc, [sp], #4
   1072e:	bf00      	nop
   10730:	1fff9318 	.word	0x1fff9318
   10734:	1fff9314 	.word	0x1fff9314

00010738 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
   10738:	b500      	push	{lr}
   1073a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1073c:	f7f1 f834 	bl	17a8 <Sys_GetCoreID>
   10740:	4603      	mov	r3, r0
   10742:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]--;
   10744:	4a0d      	ldr	r2, [pc, #52]	; (1077c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   10746:	9b01      	ldr	r3, [sp, #4]
   10748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1074c:	1e5a      	subs	r2, r3, #1
   1074e:	490b      	ldr	r1, [pc, #44]	; (1077c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   10750:	9b01      	ldr	r3, [sp, #4]
   10752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_35[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]))         /*if interrupts were enabled*/
   10756:	4a0a      	ldr	r2, [pc, #40]	; (10780 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x48>)
   10758:	9b01      	ldr	r3, [sp, #4]
   1075a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1075e:	f003 0301 	and.w	r3, r3, #1
   10762:	2b00      	cmp	r3, #0
   10764:	d106      	bne.n	10774 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
   10766:	4a05      	ldr	r2, [pc, #20]	; (1077c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   10768:	9b01      	ldr	r3, [sp, #4]
   1076a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1076e:	2b00      	cmp	r3, #0
   10770:	d100      	bne.n	10774 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10772:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10774:	bf00      	nop
   10776:	b003      	add	sp, #12
   10778:	f85d fb04 	ldr.w	pc, [sp], #4
   1077c:	1fff9318 	.word	0x1fff9318
   10780:	1fff9314 	.word	0x1fff9314

00010784 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
   10784:	b500      	push	{lr}
   10786:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10788:	f7f1 f80e 	bl	17a8 <Sys_GetCoreID>
   1078c:	4603      	mov	r3, r0
   1078e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId])
   10790:	4a10      	ldr	r2, [pc, #64]	; (107d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   10792:	9b01      	ldr	r3, [sp, #4]
   10794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10798:	2b00      	cmp	r3, #0
   1079a:	d10d      	bne.n	107b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1079c:	f7f0 f898 	bl	8d0 <Adc_schm_read_msr>
   107a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   107a2:	9b00      	ldr	r3, [sp, #0]
   107a4:	f003 0301 	and.w	r3, r3, #1
   107a8:	2b00      	cmp	r3, #0
   107aa:	d100      	bne.n	107ae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   107ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_36[u32CoreId] = msr;
   107ae:	490a      	ldr	r1, [pc, #40]	; (107d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x54>)
   107b0:	9b01      	ldr	r3, [sp, #4]
   107b2:	9a00      	ldr	r2, [sp, #0]
   107b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]++;
   107b8:	4a06      	ldr	r2, [pc, #24]	; (107d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   107ba:	9b01      	ldr	r3, [sp, #4]
   107bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107c0:	1c5a      	adds	r2, r3, #1
   107c2:	4904      	ldr	r1, [pc, #16]	; (107d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   107c4:	9b01      	ldr	r3, [sp, #4]
   107c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   107ca:	bf00      	nop
   107cc:	b003      	add	sp, #12
   107ce:	f85d fb04 	ldr.w	pc, [sp], #4
   107d2:	bf00      	nop
   107d4:	1fff9320 	.word	0x1fff9320
   107d8:	1fff931c 	.word	0x1fff931c

000107dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
   107dc:	b500      	push	{lr}
   107de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   107e0:	f7f0 ffe2 	bl	17a8 <Sys_GetCoreID>
   107e4:	4603      	mov	r3, r0
   107e6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]--;
   107e8:	4a0d      	ldr	r2, [pc, #52]	; (10820 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   107ea:	9b01      	ldr	r3, [sp, #4]
   107ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   107f0:	1e5a      	subs	r2, r3, #1
   107f2:	490b      	ldr	r1, [pc, #44]	; (10820 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   107f4:	9b01      	ldr	r3, [sp, #4]
   107f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_36[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]))         /*if interrupts were enabled*/
   107fa:	4a0a      	ldr	r2, [pc, #40]	; (10824 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x48>)
   107fc:	9b01      	ldr	r3, [sp, #4]
   107fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10802:	f003 0301 	and.w	r3, r3, #1
   10806:	2b00      	cmp	r3, #0
   10808:	d106      	bne.n	10818 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
   1080a:	4a05      	ldr	r2, [pc, #20]	; (10820 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   1080c:	9b01      	ldr	r3, [sp, #4]
   1080e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10812:	2b00      	cmp	r3, #0
   10814:	d100      	bne.n	10818 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10816:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10818:	bf00      	nop
   1081a:	b003      	add	sp, #12
   1081c:	f85d fb04 	ldr.w	pc, [sp], #4
   10820:	1fff9320 	.word	0x1fff9320
   10824:	1fff931c 	.word	0x1fff931c

00010828 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
   10828:	b500      	push	{lr}
   1082a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1082c:	f7f0 ffbc 	bl	17a8 <Sys_GetCoreID>
   10830:	4603      	mov	r3, r0
   10832:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId])
   10834:	4a10      	ldr	r2, [pc, #64]	; (10878 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   10836:	9b01      	ldr	r3, [sp, #4]
   10838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1083c:	2b00      	cmp	r3, #0
   1083e:	d10d      	bne.n	1085c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10840:	f7f0 f846 	bl	8d0 <Adc_schm_read_msr>
   10844:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10846:	9b00      	ldr	r3, [sp, #0]
   10848:	f003 0301 	and.w	r3, r3, #1
   1084c:	2b00      	cmp	r3, #0
   1084e:	d100      	bne.n	10852 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10850:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_37[u32CoreId] = msr;
   10852:	490a      	ldr	r1, [pc, #40]	; (1087c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x54>)
   10854:	9b01      	ldr	r3, [sp, #4]
   10856:	9a00      	ldr	r2, [sp, #0]
   10858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]++;
   1085c:	4a06      	ldr	r2, [pc, #24]	; (10878 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   1085e:	9b01      	ldr	r3, [sp, #4]
   10860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10864:	1c5a      	adds	r2, r3, #1
   10866:	4904      	ldr	r1, [pc, #16]	; (10878 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   10868:	9b01      	ldr	r3, [sp, #4]
   1086a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1086e:	bf00      	nop
   10870:	b003      	add	sp, #12
   10872:	f85d fb04 	ldr.w	pc, [sp], #4
   10876:	bf00      	nop
   10878:	1fff9328 	.word	0x1fff9328
   1087c:	1fff9324 	.word	0x1fff9324

00010880 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
   10880:	b500      	push	{lr}
   10882:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10884:	f7f0 ff90 	bl	17a8 <Sys_GetCoreID>
   10888:	4603      	mov	r3, r0
   1088a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]--;
   1088c:	4a0d      	ldr	r2, [pc, #52]	; (108c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   1088e:	9b01      	ldr	r3, [sp, #4]
   10890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10894:	1e5a      	subs	r2, r3, #1
   10896:	490b      	ldr	r1, [pc, #44]	; (108c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   10898:	9b01      	ldr	r3, [sp, #4]
   1089a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_37[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]))         /*if interrupts were enabled*/
   1089e:	4a0a      	ldr	r2, [pc, #40]	; (108c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x48>)
   108a0:	9b01      	ldr	r3, [sp, #4]
   108a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   108a6:	f003 0301 	and.w	r3, r3, #1
   108aa:	2b00      	cmp	r3, #0
   108ac:	d106      	bne.n	108bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
   108ae:	4a05      	ldr	r2, [pc, #20]	; (108c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   108b0:	9b01      	ldr	r3, [sp, #4]
   108b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   108b6:	2b00      	cmp	r3, #0
   108b8:	d100      	bne.n	108bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   108ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   108bc:	bf00      	nop
   108be:	b003      	add	sp, #12
   108c0:	f85d fb04 	ldr.w	pc, [sp], #4
   108c4:	1fff9328 	.word	0x1fff9328
   108c8:	1fff9324 	.word	0x1fff9324

000108cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
   108cc:	b500      	push	{lr}
   108ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   108d0:	f7f0 ff6a 	bl	17a8 <Sys_GetCoreID>
   108d4:	4603      	mov	r3, r0
   108d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId])
   108d8:	4a10      	ldr	r2, [pc, #64]	; (1091c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   108da:	9b01      	ldr	r3, [sp, #4]
   108dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   108e0:	2b00      	cmp	r3, #0
   108e2:	d10d      	bne.n	10900 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   108e4:	f7ef fff4 	bl	8d0 <Adc_schm_read_msr>
   108e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   108ea:	9b00      	ldr	r3, [sp, #0]
   108ec:	f003 0301 	and.w	r3, r3, #1
   108f0:	2b00      	cmp	r3, #0
   108f2:	d100      	bne.n	108f6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   108f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_38[u32CoreId] = msr;
   108f6:	490a      	ldr	r1, [pc, #40]	; (10920 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x54>)
   108f8:	9b01      	ldr	r3, [sp, #4]
   108fa:	9a00      	ldr	r2, [sp, #0]
   108fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]++;
   10900:	4a06      	ldr	r2, [pc, #24]	; (1091c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   10902:	9b01      	ldr	r3, [sp, #4]
   10904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10908:	1c5a      	adds	r2, r3, #1
   1090a:	4904      	ldr	r1, [pc, #16]	; (1091c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   1090c:	9b01      	ldr	r3, [sp, #4]
   1090e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10912:	bf00      	nop
   10914:	b003      	add	sp, #12
   10916:	f85d fb04 	ldr.w	pc, [sp], #4
   1091a:	bf00      	nop
   1091c:	1fff9330 	.word	0x1fff9330
   10920:	1fff932c 	.word	0x1fff932c

00010924 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
   10924:	b500      	push	{lr}
   10926:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10928:	f7f0 ff3e 	bl	17a8 <Sys_GetCoreID>
   1092c:	4603      	mov	r3, r0
   1092e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]--;
   10930:	4a0d      	ldr	r2, [pc, #52]	; (10968 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   10932:	9b01      	ldr	r3, [sp, #4]
   10934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10938:	1e5a      	subs	r2, r3, #1
   1093a:	490b      	ldr	r1, [pc, #44]	; (10968 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   1093c:	9b01      	ldr	r3, [sp, #4]
   1093e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_38[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]))         /*if interrupts were enabled*/
   10942:	4a0a      	ldr	r2, [pc, #40]	; (1096c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x48>)
   10944:	9b01      	ldr	r3, [sp, #4]
   10946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1094a:	f003 0301 	and.w	r3, r3, #1
   1094e:	2b00      	cmp	r3, #0
   10950:	d106      	bne.n	10960 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
   10952:	4a05      	ldr	r2, [pc, #20]	; (10968 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   10954:	9b01      	ldr	r3, [sp, #4]
   10956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1095a:	2b00      	cmp	r3, #0
   1095c:	d100      	bne.n	10960 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1095e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10960:	bf00      	nop
   10962:	b003      	add	sp, #12
   10964:	f85d fb04 	ldr.w	pc, [sp], #4
   10968:	1fff9330 	.word	0x1fff9330
   1096c:	1fff932c 	.word	0x1fff932c

00010970 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
   10970:	b500      	push	{lr}
   10972:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10974:	f7f0 ff18 	bl	17a8 <Sys_GetCoreID>
   10978:	4603      	mov	r3, r0
   1097a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId])
   1097c:	4a10      	ldr	r2, [pc, #64]	; (109c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   1097e:	9b01      	ldr	r3, [sp, #4]
   10980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10984:	2b00      	cmp	r3, #0
   10986:	d10d      	bne.n	109a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10988:	f7ef ffa2 	bl	8d0 <Adc_schm_read_msr>
   1098c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1098e:	9b00      	ldr	r3, [sp, #0]
   10990:	f003 0301 	and.w	r3, r3, #1
   10994:	2b00      	cmp	r3, #0
   10996:	d100      	bne.n	1099a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10998:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_39[u32CoreId] = msr;
   1099a:	490a      	ldr	r1, [pc, #40]	; (109c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x54>)
   1099c:	9b01      	ldr	r3, [sp, #4]
   1099e:	9a00      	ldr	r2, [sp, #0]
   109a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]++;
   109a4:	4a06      	ldr	r2, [pc, #24]	; (109c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   109a6:	9b01      	ldr	r3, [sp, #4]
   109a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109ac:	1c5a      	adds	r2, r3, #1
   109ae:	4904      	ldr	r1, [pc, #16]	; (109c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   109b0:	9b01      	ldr	r3, [sp, #4]
   109b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   109b6:	bf00      	nop
   109b8:	b003      	add	sp, #12
   109ba:	f85d fb04 	ldr.w	pc, [sp], #4
   109be:	bf00      	nop
   109c0:	1fff9338 	.word	0x1fff9338
   109c4:	1fff9334 	.word	0x1fff9334

000109c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
   109c8:	b500      	push	{lr}
   109ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   109cc:	f7f0 feec 	bl	17a8 <Sys_GetCoreID>
   109d0:	4603      	mov	r3, r0
   109d2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]--;
   109d4:	4a0d      	ldr	r2, [pc, #52]	; (10a0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   109d6:	9b01      	ldr	r3, [sp, #4]
   109d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109dc:	1e5a      	subs	r2, r3, #1
   109de:	490b      	ldr	r1, [pc, #44]	; (10a0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   109e0:	9b01      	ldr	r3, [sp, #4]
   109e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_39[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]))         /*if interrupts were enabled*/
   109e6:	4a0a      	ldr	r2, [pc, #40]	; (10a10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x48>)
   109e8:	9b01      	ldr	r3, [sp, #4]
   109ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109ee:	f003 0301 	and.w	r3, r3, #1
   109f2:	2b00      	cmp	r3, #0
   109f4:	d106      	bne.n	10a04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
   109f6:	4a05      	ldr	r2, [pc, #20]	; (10a0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   109f8:	9b01      	ldr	r3, [sp, #4]
   109fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   109fe:	2b00      	cmp	r3, #0
   10a00:	d100      	bne.n	10a04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10a02:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10a04:	bf00      	nop
   10a06:	b003      	add	sp, #12
   10a08:	f85d fb04 	ldr.w	pc, [sp], #4
   10a0c:	1fff9338 	.word	0x1fff9338
   10a10:	1fff9334 	.word	0x1fff9334

00010a14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
   10a14:	b500      	push	{lr}
   10a16:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10a18:	f7f0 fec6 	bl	17a8 <Sys_GetCoreID>
   10a1c:	4603      	mov	r3, r0
   10a1e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId])
   10a20:	4a10      	ldr	r2, [pc, #64]	; (10a64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   10a22:	9b01      	ldr	r3, [sp, #4]
   10a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a28:	2b00      	cmp	r3, #0
   10a2a:	d10d      	bne.n	10a48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10a2c:	f7ef ff50 	bl	8d0 <Adc_schm_read_msr>
   10a30:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10a32:	9b00      	ldr	r3, [sp, #0]
   10a34:	f003 0301 	and.w	r3, r3, #1
   10a38:	2b00      	cmp	r3, #0
   10a3a:	d100      	bne.n	10a3e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10a3c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_40[u32CoreId] = msr;
   10a3e:	490a      	ldr	r1, [pc, #40]	; (10a68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x54>)
   10a40:	9b01      	ldr	r3, [sp, #4]
   10a42:	9a00      	ldr	r2, [sp, #0]
   10a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]++;
   10a48:	4a06      	ldr	r2, [pc, #24]	; (10a64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   10a4a:	9b01      	ldr	r3, [sp, #4]
   10a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a50:	1c5a      	adds	r2, r3, #1
   10a52:	4904      	ldr	r1, [pc, #16]	; (10a64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   10a54:	9b01      	ldr	r3, [sp, #4]
   10a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10a5a:	bf00      	nop
   10a5c:	b003      	add	sp, #12
   10a5e:	f85d fb04 	ldr.w	pc, [sp], #4
   10a62:	bf00      	nop
   10a64:	1fff9340 	.word	0x1fff9340
   10a68:	1fff933c 	.word	0x1fff933c

00010a6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
   10a6c:	b500      	push	{lr}
   10a6e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10a70:	f7f0 fe9a 	bl	17a8 <Sys_GetCoreID>
   10a74:	4603      	mov	r3, r0
   10a76:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]--;
   10a78:	4a0d      	ldr	r2, [pc, #52]	; (10ab0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   10a7a:	9b01      	ldr	r3, [sp, #4]
   10a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a80:	1e5a      	subs	r2, r3, #1
   10a82:	490b      	ldr	r1, [pc, #44]	; (10ab0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   10a84:	9b01      	ldr	r3, [sp, #4]
   10a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_40[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]))         /*if interrupts were enabled*/
   10a8a:	4a0a      	ldr	r2, [pc, #40]	; (10ab4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x48>)
   10a8c:	9b01      	ldr	r3, [sp, #4]
   10a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10a92:	f003 0301 	and.w	r3, r3, #1
   10a96:	2b00      	cmp	r3, #0
   10a98:	d106      	bne.n	10aa8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
   10a9a:	4a05      	ldr	r2, [pc, #20]	; (10ab0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   10a9c:	9b01      	ldr	r3, [sp, #4]
   10a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10aa2:	2b00      	cmp	r3, #0
   10aa4:	d100      	bne.n	10aa8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10aa6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10aa8:	bf00      	nop
   10aaa:	b003      	add	sp, #12
   10aac:	f85d fb04 	ldr.w	pc, [sp], #4
   10ab0:	1fff9340 	.word	0x1fff9340
   10ab4:	1fff933c 	.word	0x1fff933c

00010ab8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
   10ab8:	b500      	push	{lr}
   10aba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10abc:	f7f0 fe74 	bl	17a8 <Sys_GetCoreID>
   10ac0:	4603      	mov	r3, r0
   10ac2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId])
   10ac4:	4a10      	ldr	r2, [pc, #64]	; (10b08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   10ac6:	9b01      	ldr	r3, [sp, #4]
   10ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10acc:	2b00      	cmp	r3, #0
   10ace:	d10d      	bne.n	10aec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10ad0:	f7ef fefe 	bl	8d0 <Adc_schm_read_msr>
   10ad4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10ad6:	9b00      	ldr	r3, [sp, #0]
   10ad8:	f003 0301 	and.w	r3, r3, #1
   10adc:	2b00      	cmp	r3, #0
   10ade:	d100      	bne.n	10ae2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10ae0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_41[u32CoreId] = msr;
   10ae2:	490a      	ldr	r1, [pc, #40]	; (10b0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x54>)
   10ae4:	9b01      	ldr	r3, [sp, #4]
   10ae6:	9a00      	ldr	r2, [sp, #0]
   10ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]++;
   10aec:	4a06      	ldr	r2, [pc, #24]	; (10b08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   10aee:	9b01      	ldr	r3, [sp, #4]
   10af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10af4:	1c5a      	adds	r2, r3, #1
   10af6:	4904      	ldr	r1, [pc, #16]	; (10b08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   10af8:	9b01      	ldr	r3, [sp, #4]
   10afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10afe:	bf00      	nop
   10b00:	b003      	add	sp, #12
   10b02:	f85d fb04 	ldr.w	pc, [sp], #4
   10b06:	bf00      	nop
   10b08:	1fff9348 	.word	0x1fff9348
   10b0c:	1fff9344 	.word	0x1fff9344

00010b10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
   10b10:	b500      	push	{lr}
   10b12:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10b14:	f7f0 fe48 	bl	17a8 <Sys_GetCoreID>
   10b18:	4603      	mov	r3, r0
   10b1a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]--;
   10b1c:	4a0d      	ldr	r2, [pc, #52]	; (10b54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   10b1e:	9b01      	ldr	r3, [sp, #4]
   10b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b24:	1e5a      	subs	r2, r3, #1
   10b26:	490b      	ldr	r1, [pc, #44]	; (10b54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   10b28:	9b01      	ldr	r3, [sp, #4]
   10b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_41[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]))         /*if interrupts were enabled*/
   10b2e:	4a0a      	ldr	r2, [pc, #40]	; (10b58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x48>)
   10b30:	9b01      	ldr	r3, [sp, #4]
   10b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b36:	f003 0301 	and.w	r3, r3, #1
   10b3a:	2b00      	cmp	r3, #0
   10b3c:	d106      	bne.n	10b4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
   10b3e:	4a05      	ldr	r2, [pc, #20]	; (10b54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   10b40:	9b01      	ldr	r3, [sp, #4]
   10b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b46:	2b00      	cmp	r3, #0
   10b48:	d100      	bne.n	10b4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10b4a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10b4c:	bf00      	nop
   10b4e:	b003      	add	sp, #12
   10b50:	f85d fb04 	ldr.w	pc, [sp], #4
   10b54:	1fff9348 	.word	0x1fff9348
   10b58:	1fff9344 	.word	0x1fff9344

00010b5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
   10b5c:	b500      	push	{lr}
   10b5e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10b60:	f7f0 fe22 	bl	17a8 <Sys_GetCoreID>
   10b64:	4603      	mov	r3, r0
   10b66:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId])
   10b68:	4a10      	ldr	r2, [pc, #64]	; (10bac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   10b6a:	9b01      	ldr	r3, [sp, #4]
   10b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b70:	2b00      	cmp	r3, #0
   10b72:	d10d      	bne.n	10b90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10b74:	f7ef feac 	bl	8d0 <Adc_schm_read_msr>
   10b78:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10b7a:	9b00      	ldr	r3, [sp, #0]
   10b7c:	f003 0301 	and.w	r3, r3, #1
   10b80:	2b00      	cmp	r3, #0
   10b82:	d100      	bne.n	10b86 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10b84:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_42[u32CoreId] = msr;
   10b86:	490a      	ldr	r1, [pc, #40]	; (10bb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x54>)
   10b88:	9b01      	ldr	r3, [sp, #4]
   10b8a:	9a00      	ldr	r2, [sp, #0]
   10b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]++;
   10b90:	4a06      	ldr	r2, [pc, #24]	; (10bac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   10b92:	9b01      	ldr	r3, [sp, #4]
   10b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10b98:	1c5a      	adds	r2, r3, #1
   10b9a:	4904      	ldr	r1, [pc, #16]	; (10bac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   10b9c:	9b01      	ldr	r3, [sp, #4]
   10b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10ba2:	bf00      	nop
   10ba4:	b003      	add	sp, #12
   10ba6:	f85d fb04 	ldr.w	pc, [sp], #4
   10baa:	bf00      	nop
   10bac:	1fff9350 	.word	0x1fff9350
   10bb0:	1fff934c 	.word	0x1fff934c

00010bb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
   10bb4:	b500      	push	{lr}
   10bb6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10bb8:	f7f0 fdf6 	bl	17a8 <Sys_GetCoreID>
   10bbc:	4603      	mov	r3, r0
   10bbe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]--;
   10bc0:	4a0d      	ldr	r2, [pc, #52]	; (10bf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   10bc2:	9b01      	ldr	r3, [sp, #4]
   10bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10bc8:	1e5a      	subs	r2, r3, #1
   10bca:	490b      	ldr	r1, [pc, #44]	; (10bf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   10bcc:	9b01      	ldr	r3, [sp, #4]
   10bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_42[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]))         /*if interrupts were enabled*/
   10bd2:	4a0a      	ldr	r2, [pc, #40]	; (10bfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x48>)
   10bd4:	9b01      	ldr	r3, [sp, #4]
   10bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10bda:	f003 0301 	and.w	r3, r3, #1
   10bde:	2b00      	cmp	r3, #0
   10be0:	d106      	bne.n	10bf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
   10be2:	4a05      	ldr	r2, [pc, #20]	; (10bf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   10be4:	9b01      	ldr	r3, [sp, #4]
   10be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10bea:	2b00      	cmp	r3, #0
   10bec:	d100      	bne.n	10bf0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10bee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10bf0:	bf00      	nop
   10bf2:	b003      	add	sp, #12
   10bf4:	f85d fb04 	ldr.w	pc, [sp], #4
   10bf8:	1fff9350 	.word	0x1fff9350
   10bfc:	1fff934c 	.word	0x1fff934c

00010c00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
   10c00:	b500      	push	{lr}
   10c02:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10c04:	f7f0 fdd0 	bl	17a8 <Sys_GetCoreID>
   10c08:	4603      	mov	r3, r0
   10c0a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId])
   10c0c:	4a10      	ldr	r2, [pc, #64]	; (10c50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   10c0e:	9b01      	ldr	r3, [sp, #4]
   10c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c14:	2b00      	cmp	r3, #0
   10c16:	d10d      	bne.n	10c34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10c18:	f7ef fe5a 	bl	8d0 <Adc_schm_read_msr>
   10c1c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10c1e:	9b00      	ldr	r3, [sp, #0]
   10c20:	f003 0301 	and.w	r3, r3, #1
   10c24:	2b00      	cmp	r3, #0
   10c26:	d100      	bne.n	10c2a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10c28:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_43[u32CoreId] = msr;
   10c2a:	490a      	ldr	r1, [pc, #40]	; (10c54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x54>)
   10c2c:	9b01      	ldr	r3, [sp, #4]
   10c2e:	9a00      	ldr	r2, [sp, #0]
   10c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]++;
   10c34:	4a06      	ldr	r2, [pc, #24]	; (10c50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   10c36:	9b01      	ldr	r3, [sp, #4]
   10c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c3c:	1c5a      	adds	r2, r3, #1
   10c3e:	4904      	ldr	r1, [pc, #16]	; (10c50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   10c40:	9b01      	ldr	r3, [sp, #4]
   10c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10c46:	bf00      	nop
   10c48:	b003      	add	sp, #12
   10c4a:	f85d fb04 	ldr.w	pc, [sp], #4
   10c4e:	bf00      	nop
   10c50:	1fff9358 	.word	0x1fff9358
   10c54:	1fff9354 	.word	0x1fff9354

00010c58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
   10c58:	b500      	push	{lr}
   10c5a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10c5c:	f7f0 fda4 	bl	17a8 <Sys_GetCoreID>
   10c60:	4603      	mov	r3, r0
   10c62:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]--;
   10c64:	4a0d      	ldr	r2, [pc, #52]	; (10c9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   10c66:	9b01      	ldr	r3, [sp, #4]
   10c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c6c:	1e5a      	subs	r2, r3, #1
   10c6e:	490b      	ldr	r1, [pc, #44]	; (10c9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   10c70:	9b01      	ldr	r3, [sp, #4]
   10c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_43[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]))         /*if interrupts were enabled*/
   10c76:	4a0a      	ldr	r2, [pc, #40]	; (10ca0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x48>)
   10c78:	9b01      	ldr	r3, [sp, #4]
   10c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c7e:	f003 0301 	and.w	r3, r3, #1
   10c82:	2b00      	cmp	r3, #0
   10c84:	d106      	bne.n	10c94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
   10c86:	4a05      	ldr	r2, [pc, #20]	; (10c9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   10c88:	9b01      	ldr	r3, [sp, #4]
   10c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10c8e:	2b00      	cmp	r3, #0
   10c90:	d100      	bne.n	10c94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10c92:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10c94:	bf00      	nop
   10c96:	b003      	add	sp, #12
   10c98:	f85d fb04 	ldr.w	pc, [sp], #4
   10c9c:	1fff9358 	.word	0x1fff9358
   10ca0:	1fff9354 	.word	0x1fff9354

00010ca4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
   10ca4:	b500      	push	{lr}
   10ca6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10ca8:	f7f0 fd7e 	bl	17a8 <Sys_GetCoreID>
   10cac:	4603      	mov	r3, r0
   10cae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId])
   10cb0:	4a10      	ldr	r2, [pc, #64]	; (10cf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   10cb2:	9b01      	ldr	r3, [sp, #4]
   10cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10cb8:	2b00      	cmp	r3, #0
   10cba:	d10d      	bne.n	10cd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10cbc:	f7ef fe08 	bl	8d0 <Adc_schm_read_msr>
   10cc0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10cc2:	9b00      	ldr	r3, [sp, #0]
   10cc4:	f003 0301 	and.w	r3, r3, #1
   10cc8:	2b00      	cmp	r3, #0
   10cca:	d100      	bne.n	10cce <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10ccc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_44[u32CoreId] = msr;
   10cce:	490a      	ldr	r1, [pc, #40]	; (10cf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x54>)
   10cd0:	9b01      	ldr	r3, [sp, #4]
   10cd2:	9a00      	ldr	r2, [sp, #0]
   10cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]++;
   10cd8:	4a06      	ldr	r2, [pc, #24]	; (10cf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   10cda:	9b01      	ldr	r3, [sp, #4]
   10cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ce0:	1c5a      	adds	r2, r3, #1
   10ce2:	4904      	ldr	r1, [pc, #16]	; (10cf4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   10ce4:	9b01      	ldr	r3, [sp, #4]
   10ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10cea:	bf00      	nop
   10cec:	b003      	add	sp, #12
   10cee:	f85d fb04 	ldr.w	pc, [sp], #4
   10cf2:	bf00      	nop
   10cf4:	1fff9360 	.word	0x1fff9360
   10cf8:	1fff935c 	.word	0x1fff935c

00010cfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
   10cfc:	b500      	push	{lr}
   10cfe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10d00:	f7f0 fd52 	bl	17a8 <Sys_GetCoreID>
   10d04:	4603      	mov	r3, r0
   10d06:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]--;
   10d08:	4a0d      	ldr	r2, [pc, #52]	; (10d40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   10d0a:	9b01      	ldr	r3, [sp, #4]
   10d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d10:	1e5a      	subs	r2, r3, #1
   10d12:	490b      	ldr	r1, [pc, #44]	; (10d40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   10d14:	9b01      	ldr	r3, [sp, #4]
   10d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_44[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]))         /*if interrupts were enabled*/
   10d1a:	4a0a      	ldr	r2, [pc, #40]	; (10d44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x48>)
   10d1c:	9b01      	ldr	r3, [sp, #4]
   10d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d22:	f003 0301 	and.w	r3, r3, #1
   10d26:	2b00      	cmp	r3, #0
   10d28:	d106      	bne.n	10d38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
   10d2a:	4a05      	ldr	r2, [pc, #20]	; (10d40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   10d2c:	9b01      	ldr	r3, [sp, #4]
   10d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d32:	2b00      	cmp	r3, #0
   10d34:	d100      	bne.n	10d38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10d36:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10d38:	bf00      	nop
   10d3a:	b003      	add	sp, #12
   10d3c:	f85d fb04 	ldr.w	pc, [sp], #4
   10d40:	1fff9360 	.word	0x1fff9360
   10d44:	1fff935c 	.word	0x1fff935c

00010d48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
   10d48:	b500      	push	{lr}
   10d4a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10d4c:	f7f0 fd2c 	bl	17a8 <Sys_GetCoreID>
   10d50:	4603      	mov	r3, r0
   10d52:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId])
   10d54:	4a10      	ldr	r2, [pc, #64]	; (10d98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   10d56:	9b01      	ldr	r3, [sp, #4]
   10d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d5c:	2b00      	cmp	r3, #0
   10d5e:	d10d      	bne.n	10d7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10d60:	f7ef fdb6 	bl	8d0 <Adc_schm_read_msr>
   10d64:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10d66:	9b00      	ldr	r3, [sp, #0]
   10d68:	f003 0301 	and.w	r3, r3, #1
   10d6c:	2b00      	cmp	r3, #0
   10d6e:	d100      	bne.n	10d72 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10d70:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_45[u32CoreId] = msr;
   10d72:	490a      	ldr	r1, [pc, #40]	; (10d9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x54>)
   10d74:	9b01      	ldr	r3, [sp, #4]
   10d76:	9a00      	ldr	r2, [sp, #0]
   10d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]++;
   10d7c:	4a06      	ldr	r2, [pc, #24]	; (10d98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   10d7e:	9b01      	ldr	r3, [sp, #4]
   10d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10d84:	1c5a      	adds	r2, r3, #1
   10d86:	4904      	ldr	r1, [pc, #16]	; (10d98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   10d88:	9b01      	ldr	r3, [sp, #4]
   10d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10d8e:	bf00      	nop
   10d90:	b003      	add	sp, #12
   10d92:	f85d fb04 	ldr.w	pc, [sp], #4
   10d96:	bf00      	nop
   10d98:	1fff9368 	.word	0x1fff9368
   10d9c:	1fff9364 	.word	0x1fff9364

00010da0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
   10da0:	b500      	push	{lr}
   10da2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10da4:	f7f0 fd00 	bl	17a8 <Sys_GetCoreID>
   10da8:	4603      	mov	r3, r0
   10daa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]--;
   10dac:	4a0d      	ldr	r2, [pc, #52]	; (10de4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   10dae:	9b01      	ldr	r3, [sp, #4]
   10db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10db4:	1e5a      	subs	r2, r3, #1
   10db6:	490b      	ldr	r1, [pc, #44]	; (10de4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   10db8:	9b01      	ldr	r3, [sp, #4]
   10dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_45[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]))         /*if interrupts were enabled*/
   10dbe:	4a0a      	ldr	r2, [pc, #40]	; (10de8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x48>)
   10dc0:	9b01      	ldr	r3, [sp, #4]
   10dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10dc6:	f003 0301 	and.w	r3, r3, #1
   10dca:	2b00      	cmp	r3, #0
   10dcc:	d106      	bne.n	10ddc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
   10dce:	4a05      	ldr	r2, [pc, #20]	; (10de4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   10dd0:	9b01      	ldr	r3, [sp, #4]
   10dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10dd6:	2b00      	cmp	r3, #0
   10dd8:	d100      	bne.n	10ddc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10dda:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10ddc:	bf00      	nop
   10dde:	b003      	add	sp, #12
   10de0:	f85d fb04 	ldr.w	pc, [sp], #4
   10de4:	1fff9368 	.word	0x1fff9368
   10de8:	1fff9364 	.word	0x1fff9364

00010dec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
   10dec:	b500      	push	{lr}
   10dee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10df0:	f7f0 fcda 	bl	17a8 <Sys_GetCoreID>
   10df4:	4603      	mov	r3, r0
   10df6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId])
   10df8:	4a10      	ldr	r2, [pc, #64]	; (10e3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   10dfa:	9b01      	ldr	r3, [sp, #4]
   10dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e00:	2b00      	cmp	r3, #0
   10e02:	d10d      	bne.n	10e20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10e04:	f7ef fd64 	bl	8d0 <Adc_schm_read_msr>
   10e08:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10e0a:	9b00      	ldr	r3, [sp, #0]
   10e0c:	f003 0301 	and.w	r3, r3, #1
   10e10:	2b00      	cmp	r3, #0
   10e12:	d100      	bne.n	10e16 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10e14:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_46[u32CoreId] = msr;
   10e16:	490a      	ldr	r1, [pc, #40]	; (10e40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x54>)
   10e18:	9b01      	ldr	r3, [sp, #4]
   10e1a:	9a00      	ldr	r2, [sp, #0]
   10e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]++;
   10e20:	4a06      	ldr	r2, [pc, #24]	; (10e3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   10e22:	9b01      	ldr	r3, [sp, #4]
   10e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e28:	1c5a      	adds	r2, r3, #1
   10e2a:	4904      	ldr	r1, [pc, #16]	; (10e3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   10e2c:	9b01      	ldr	r3, [sp, #4]
   10e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10e32:	bf00      	nop
   10e34:	b003      	add	sp, #12
   10e36:	f85d fb04 	ldr.w	pc, [sp], #4
   10e3a:	bf00      	nop
   10e3c:	1fff9370 	.word	0x1fff9370
   10e40:	1fff936c 	.word	0x1fff936c

00010e44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
   10e44:	b500      	push	{lr}
   10e46:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10e48:	f7f0 fcae 	bl	17a8 <Sys_GetCoreID>
   10e4c:	4603      	mov	r3, r0
   10e4e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]--;
   10e50:	4a0d      	ldr	r2, [pc, #52]	; (10e88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   10e52:	9b01      	ldr	r3, [sp, #4]
   10e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e58:	1e5a      	subs	r2, r3, #1
   10e5a:	490b      	ldr	r1, [pc, #44]	; (10e88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   10e5c:	9b01      	ldr	r3, [sp, #4]
   10e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_46[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]))         /*if interrupts were enabled*/
   10e62:	4a0a      	ldr	r2, [pc, #40]	; (10e8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x48>)
   10e64:	9b01      	ldr	r3, [sp, #4]
   10e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e6a:	f003 0301 	and.w	r3, r3, #1
   10e6e:	2b00      	cmp	r3, #0
   10e70:	d106      	bne.n	10e80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
   10e72:	4a05      	ldr	r2, [pc, #20]	; (10e88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   10e74:	9b01      	ldr	r3, [sp, #4]
   10e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10e7a:	2b00      	cmp	r3, #0
   10e7c:	d100      	bne.n	10e80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10e7e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10e80:	bf00      	nop
   10e82:	b003      	add	sp, #12
   10e84:	f85d fb04 	ldr.w	pc, [sp], #4
   10e88:	1fff9370 	.word	0x1fff9370
   10e8c:	1fff936c 	.word	0x1fff936c

00010e90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
   10e90:	b500      	push	{lr}
   10e92:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10e94:	f7f0 fc88 	bl	17a8 <Sys_GetCoreID>
   10e98:	4603      	mov	r3, r0
   10e9a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId])
   10e9c:	4a10      	ldr	r2, [pc, #64]	; (10ee0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   10e9e:	9b01      	ldr	r3, [sp, #4]
   10ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ea4:	2b00      	cmp	r3, #0
   10ea6:	d10d      	bne.n	10ec4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10ea8:	f7ef fd12 	bl	8d0 <Adc_schm_read_msr>
   10eac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10eae:	9b00      	ldr	r3, [sp, #0]
   10eb0:	f003 0301 	and.w	r3, r3, #1
   10eb4:	2b00      	cmp	r3, #0
   10eb6:	d100      	bne.n	10eba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10eb8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_47[u32CoreId] = msr;
   10eba:	490a      	ldr	r1, [pc, #40]	; (10ee4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x54>)
   10ebc:	9b01      	ldr	r3, [sp, #4]
   10ebe:	9a00      	ldr	r2, [sp, #0]
   10ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]++;
   10ec4:	4a06      	ldr	r2, [pc, #24]	; (10ee0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   10ec6:	9b01      	ldr	r3, [sp, #4]
   10ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10ecc:	1c5a      	adds	r2, r3, #1
   10ece:	4904      	ldr	r1, [pc, #16]	; (10ee0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   10ed0:	9b01      	ldr	r3, [sp, #4]
   10ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10ed6:	bf00      	nop
   10ed8:	b003      	add	sp, #12
   10eda:	f85d fb04 	ldr.w	pc, [sp], #4
   10ede:	bf00      	nop
   10ee0:	1fff9378 	.word	0x1fff9378
   10ee4:	1fff9374 	.word	0x1fff9374

00010ee8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
   10ee8:	b500      	push	{lr}
   10eea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10eec:	f7f0 fc5c 	bl	17a8 <Sys_GetCoreID>
   10ef0:	4603      	mov	r3, r0
   10ef2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]--;
   10ef4:	4a0d      	ldr	r2, [pc, #52]	; (10f2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   10ef6:	9b01      	ldr	r3, [sp, #4]
   10ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10efc:	1e5a      	subs	r2, r3, #1
   10efe:	490b      	ldr	r1, [pc, #44]	; (10f2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   10f00:	9b01      	ldr	r3, [sp, #4]
   10f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_47[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]))         /*if interrupts were enabled*/
   10f06:	4a0a      	ldr	r2, [pc, #40]	; (10f30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x48>)
   10f08:	9b01      	ldr	r3, [sp, #4]
   10f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f0e:	f003 0301 	and.w	r3, r3, #1
   10f12:	2b00      	cmp	r3, #0
   10f14:	d106      	bne.n	10f24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
   10f16:	4a05      	ldr	r2, [pc, #20]	; (10f2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   10f18:	9b01      	ldr	r3, [sp, #4]
   10f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f1e:	2b00      	cmp	r3, #0
   10f20:	d100      	bne.n	10f24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10f22:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10f24:	bf00      	nop
   10f26:	b003      	add	sp, #12
   10f28:	f85d fb04 	ldr.w	pc, [sp], #4
   10f2c:	1fff9378 	.word	0x1fff9378
   10f30:	1fff9374 	.word	0x1fff9374

00010f34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
   10f34:	b500      	push	{lr}
   10f36:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10f38:	f7f0 fc36 	bl	17a8 <Sys_GetCoreID>
   10f3c:	4603      	mov	r3, r0
   10f3e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId])
   10f40:	4a10      	ldr	r2, [pc, #64]	; (10f84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   10f42:	9b01      	ldr	r3, [sp, #4]
   10f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f48:	2b00      	cmp	r3, #0
   10f4a:	d10d      	bne.n	10f68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10f4c:	f7ef fcc0 	bl	8d0 <Adc_schm_read_msr>
   10f50:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10f52:	9b00      	ldr	r3, [sp, #0]
   10f54:	f003 0301 	and.w	r3, r3, #1
   10f58:	2b00      	cmp	r3, #0
   10f5a:	d100      	bne.n	10f5e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   10f5c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_48[u32CoreId] = msr;
   10f5e:	490a      	ldr	r1, [pc, #40]	; (10f88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x54>)
   10f60:	9b01      	ldr	r3, [sp, #4]
   10f62:	9a00      	ldr	r2, [sp, #0]
   10f64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]++;
   10f68:	4a06      	ldr	r2, [pc, #24]	; (10f84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   10f6a:	9b01      	ldr	r3, [sp, #4]
   10f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10f70:	1c5a      	adds	r2, r3, #1
   10f72:	4904      	ldr	r1, [pc, #16]	; (10f84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   10f74:	9b01      	ldr	r3, [sp, #4]
   10f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   10f7a:	bf00      	nop
   10f7c:	b003      	add	sp, #12
   10f7e:	f85d fb04 	ldr.w	pc, [sp], #4
   10f82:	bf00      	nop
   10f84:	1fff9380 	.word	0x1fff9380
   10f88:	1fff937c 	.word	0x1fff937c

00010f8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
   10f8c:	b500      	push	{lr}
   10f8e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10f90:	f7f0 fc0a 	bl	17a8 <Sys_GetCoreID>
   10f94:	4603      	mov	r3, r0
   10f96:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]--;
   10f98:	4a0d      	ldr	r2, [pc, #52]	; (10fd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   10f9a:	9b01      	ldr	r3, [sp, #4]
   10f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10fa0:	1e5a      	subs	r2, r3, #1
   10fa2:	490b      	ldr	r1, [pc, #44]	; (10fd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   10fa4:	9b01      	ldr	r3, [sp, #4]
   10fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_48[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]))         /*if interrupts were enabled*/
   10faa:	4a0a      	ldr	r2, [pc, #40]	; (10fd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x48>)
   10fac:	9b01      	ldr	r3, [sp, #4]
   10fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10fb2:	f003 0301 	and.w	r3, r3, #1
   10fb6:	2b00      	cmp	r3, #0
   10fb8:	d106      	bne.n	10fc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
   10fba:	4a05      	ldr	r2, [pc, #20]	; (10fd0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   10fbc:	9b01      	ldr	r3, [sp, #4]
   10fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10fc2:	2b00      	cmp	r3, #0
   10fc4:	d100      	bne.n	10fc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   10fc6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   10fc8:	bf00      	nop
   10fca:	b003      	add	sp, #12
   10fcc:	f85d fb04 	ldr.w	pc, [sp], #4
   10fd0:	1fff9380 	.word	0x1fff9380
   10fd4:	1fff937c 	.word	0x1fff937c

00010fd8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
   10fd8:	b500      	push	{lr}
   10fda:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   10fdc:	f7f0 fbe4 	bl	17a8 <Sys_GetCoreID>
   10fe0:	4603      	mov	r3, r0
   10fe2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId])
   10fe4:	4a10      	ldr	r2, [pc, #64]	; (11028 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   10fe6:	9b01      	ldr	r3, [sp, #4]
   10fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10fec:	2b00      	cmp	r3, #0
   10fee:	d10d      	bne.n	1100c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   10ff0:	f7ef fc6e 	bl	8d0 <Adc_schm_read_msr>
   10ff4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   10ff6:	9b00      	ldr	r3, [sp, #0]
   10ff8:	f003 0301 	and.w	r3, r3, #1
   10ffc:	2b00      	cmp	r3, #0
   10ffe:	d100      	bne.n	11002 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11000:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_49[u32CoreId] = msr;
   11002:	490a      	ldr	r1, [pc, #40]	; (1102c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x54>)
   11004:	9b01      	ldr	r3, [sp, #4]
   11006:	9a00      	ldr	r2, [sp, #0]
   11008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]++;
   1100c:	4a06      	ldr	r2, [pc, #24]	; (11028 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   1100e:	9b01      	ldr	r3, [sp, #4]
   11010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11014:	1c5a      	adds	r2, r3, #1
   11016:	4904      	ldr	r1, [pc, #16]	; (11028 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   11018:	9b01      	ldr	r3, [sp, #4]
   1101a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1101e:	bf00      	nop
   11020:	b003      	add	sp, #12
   11022:	f85d fb04 	ldr.w	pc, [sp], #4
   11026:	bf00      	nop
   11028:	1fff9388 	.word	0x1fff9388
   1102c:	1fff9384 	.word	0x1fff9384

00011030 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
   11030:	b500      	push	{lr}
   11032:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11034:	f7f0 fbb8 	bl	17a8 <Sys_GetCoreID>
   11038:	4603      	mov	r3, r0
   1103a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]--;
   1103c:	4a0d      	ldr	r2, [pc, #52]	; (11074 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   1103e:	9b01      	ldr	r3, [sp, #4]
   11040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11044:	1e5a      	subs	r2, r3, #1
   11046:	490b      	ldr	r1, [pc, #44]	; (11074 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   11048:	9b01      	ldr	r3, [sp, #4]
   1104a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_49[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]))         /*if interrupts were enabled*/
   1104e:	4a0a      	ldr	r2, [pc, #40]	; (11078 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x48>)
   11050:	9b01      	ldr	r3, [sp, #4]
   11052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11056:	f003 0301 	and.w	r3, r3, #1
   1105a:	2b00      	cmp	r3, #0
   1105c:	d106      	bne.n	1106c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
   1105e:	4a05      	ldr	r2, [pc, #20]	; (11074 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   11060:	9b01      	ldr	r3, [sp, #4]
   11062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11066:	2b00      	cmp	r3, #0
   11068:	d100      	bne.n	1106c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1106a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1106c:	bf00      	nop
   1106e:	b003      	add	sp, #12
   11070:	f85d fb04 	ldr.w	pc, [sp], #4
   11074:	1fff9388 	.word	0x1fff9388
   11078:	1fff9384 	.word	0x1fff9384

0001107c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
   1107c:	b500      	push	{lr}
   1107e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11080:	f7f0 fb92 	bl	17a8 <Sys_GetCoreID>
   11084:	4603      	mov	r3, r0
   11086:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId])
   11088:	4a10      	ldr	r2, [pc, #64]	; (110cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   1108a:	9b01      	ldr	r3, [sp, #4]
   1108c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11090:	2b00      	cmp	r3, #0
   11092:	d10d      	bne.n	110b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11094:	f7ef fc1c 	bl	8d0 <Adc_schm_read_msr>
   11098:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1109a:	9b00      	ldr	r3, [sp, #0]
   1109c:	f003 0301 	and.w	r3, r3, #1
   110a0:	2b00      	cmp	r3, #0
   110a2:	d100      	bne.n	110a6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   110a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_50[u32CoreId] = msr;
   110a6:	490a      	ldr	r1, [pc, #40]	; (110d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x54>)
   110a8:	9b01      	ldr	r3, [sp, #4]
   110aa:	9a00      	ldr	r2, [sp, #0]
   110ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]++;
   110b0:	4a06      	ldr	r2, [pc, #24]	; (110cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   110b2:	9b01      	ldr	r3, [sp, #4]
   110b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   110b8:	1c5a      	adds	r2, r3, #1
   110ba:	4904      	ldr	r1, [pc, #16]	; (110cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   110bc:	9b01      	ldr	r3, [sp, #4]
   110be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   110c2:	bf00      	nop
   110c4:	b003      	add	sp, #12
   110c6:	f85d fb04 	ldr.w	pc, [sp], #4
   110ca:	bf00      	nop
   110cc:	1fff9390 	.word	0x1fff9390
   110d0:	1fff938c 	.word	0x1fff938c

000110d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
   110d4:	b500      	push	{lr}
   110d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   110d8:	f7f0 fb66 	bl	17a8 <Sys_GetCoreID>
   110dc:	4603      	mov	r3, r0
   110de:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]--;
   110e0:	4a0d      	ldr	r2, [pc, #52]	; (11118 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   110e2:	9b01      	ldr	r3, [sp, #4]
   110e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   110e8:	1e5a      	subs	r2, r3, #1
   110ea:	490b      	ldr	r1, [pc, #44]	; (11118 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   110ec:	9b01      	ldr	r3, [sp, #4]
   110ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_50[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]))         /*if interrupts were enabled*/
   110f2:	4a0a      	ldr	r2, [pc, #40]	; (1111c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x48>)
   110f4:	9b01      	ldr	r3, [sp, #4]
   110f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   110fa:	f003 0301 	and.w	r3, r3, #1
   110fe:	2b00      	cmp	r3, #0
   11100:	d106      	bne.n	11110 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
   11102:	4a05      	ldr	r2, [pc, #20]	; (11118 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   11104:	9b01      	ldr	r3, [sp, #4]
   11106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1110a:	2b00      	cmp	r3, #0
   1110c:	d100      	bne.n	11110 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1110e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11110:	bf00      	nop
   11112:	b003      	add	sp, #12
   11114:	f85d fb04 	ldr.w	pc, [sp], #4
   11118:	1fff9390 	.word	0x1fff9390
   1111c:	1fff938c 	.word	0x1fff938c

00011120 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
   11120:	b500      	push	{lr}
   11122:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11124:	f7f0 fb40 	bl	17a8 <Sys_GetCoreID>
   11128:	4603      	mov	r3, r0
   1112a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId])
   1112c:	4a10      	ldr	r2, [pc, #64]	; (11170 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   1112e:	9b01      	ldr	r3, [sp, #4]
   11130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11134:	2b00      	cmp	r3, #0
   11136:	d10d      	bne.n	11154 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11138:	f7ef fbca 	bl	8d0 <Adc_schm_read_msr>
   1113c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1113e:	9b00      	ldr	r3, [sp, #0]
   11140:	f003 0301 	and.w	r3, r3, #1
   11144:	2b00      	cmp	r3, #0
   11146:	d100      	bne.n	1114a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11148:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_51[u32CoreId] = msr;
   1114a:	490a      	ldr	r1, [pc, #40]	; (11174 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x54>)
   1114c:	9b01      	ldr	r3, [sp, #4]
   1114e:	9a00      	ldr	r2, [sp, #0]
   11150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]++;
   11154:	4a06      	ldr	r2, [pc, #24]	; (11170 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   11156:	9b01      	ldr	r3, [sp, #4]
   11158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1115c:	1c5a      	adds	r2, r3, #1
   1115e:	4904      	ldr	r1, [pc, #16]	; (11170 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   11160:	9b01      	ldr	r3, [sp, #4]
   11162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11166:	bf00      	nop
   11168:	b003      	add	sp, #12
   1116a:	f85d fb04 	ldr.w	pc, [sp], #4
   1116e:	bf00      	nop
   11170:	1fff9398 	.word	0x1fff9398
   11174:	1fff9394 	.word	0x1fff9394

00011178 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
   11178:	b500      	push	{lr}
   1117a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1117c:	f7f0 fb14 	bl	17a8 <Sys_GetCoreID>
   11180:	4603      	mov	r3, r0
   11182:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]--;
   11184:	4a0d      	ldr	r2, [pc, #52]	; (111bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   11186:	9b01      	ldr	r3, [sp, #4]
   11188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1118c:	1e5a      	subs	r2, r3, #1
   1118e:	490b      	ldr	r1, [pc, #44]	; (111bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   11190:	9b01      	ldr	r3, [sp, #4]
   11192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_51[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]))         /*if interrupts were enabled*/
   11196:	4a0a      	ldr	r2, [pc, #40]	; (111c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x48>)
   11198:	9b01      	ldr	r3, [sp, #4]
   1119a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1119e:	f003 0301 	and.w	r3, r3, #1
   111a2:	2b00      	cmp	r3, #0
   111a4:	d106      	bne.n	111b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
   111a6:	4a05      	ldr	r2, [pc, #20]	; (111bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   111a8:	9b01      	ldr	r3, [sp, #4]
   111aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   111ae:	2b00      	cmp	r3, #0
   111b0:	d100      	bne.n	111b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   111b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   111b4:	bf00      	nop
   111b6:	b003      	add	sp, #12
   111b8:	f85d fb04 	ldr.w	pc, [sp], #4
   111bc:	1fff9398 	.word	0x1fff9398
   111c0:	1fff9394 	.word	0x1fff9394

000111c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
   111c4:	b500      	push	{lr}
   111c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   111c8:	f7f0 faee 	bl	17a8 <Sys_GetCoreID>
   111cc:	4603      	mov	r3, r0
   111ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId])
   111d0:	4a10      	ldr	r2, [pc, #64]	; (11214 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   111d2:	9b01      	ldr	r3, [sp, #4]
   111d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   111d8:	2b00      	cmp	r3, #0
   111da:	d10d      	bne.n	111f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   111dc:	f7ef fb78 	bl	8d0 <Adc_schm_read_msr>
   111e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   111e2:	9b00      	ldr	r3, [sp, #0]
   111e4:	f003 0301 	and.w	r3, r3, #1
   111e8:	2b00      	cmp	r3, #0
   111ea:	d100      	bne.n	111ee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   111ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_54[u32CoreId] = msr;
   111ee:	490a      	ldr	r1, [pc, #40]	; (11218 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x54>)
   111f0:	9b01      	ldr	r3, [sp, #4]
   111f2:	9a00      	ldr	r2, [sp, #0]
   111f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]++;
   111f8:	4a06      	ldr	r2, [pc, #24]	; (11214 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   111fa:	9b01      	ldr	r3, [sp, #4]
   111fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11200:	1c5a      	adds	r2, r3, #1
   11202:	4904      	ldr	r1, [pc, #16]	; (11214 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   11204:	9b01      	ldr	r3, [sp, #4]
   11206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1120a:	bf00      	nop
   1120c:	b003      	add	sp, #12
   1120e:	f85d fb04 	ldr.w	pc, [sp], #4
   11212:	bf00      	nop
   11214:	1fff93a0 	.word	0x1fff93a0
   11218:	1fff939c 	.word	0x1fff939c

0001121c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
   1121c:	b500      	push	{lr}
   1121e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11220:	f7f0 fac2 	bl	17a8 <Sys_GetCoreID>
   11224:	4603      	mov	r3, r0
   11226:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]--;
   11228:	4a0d      	ldr	r2, [pc, #52]	; (11260 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   1122a:	9b01      	ldr	r3, [sp, #4]
   1122c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11230:	1e5a      	subs	r2, r3, #1
   11232:	490b      	ldr	r1, [pc, #44]	; (11260 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   11234:	9b01      	ldr	r3, [sp, #4]
   11236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_54[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]))         /*if interrupts were enabled*/
   1123a:	4a0a      	ldr	r2, [pc, #40]	; (11264 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x48>)
   1123c:	9b01      	ldr	r3, [sp, #4]
   1123e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11242:	f003 0301 	and.w	r3, r3, #1
   11246:	2b00      	cmp	r3, #0
   11248:	d106      	bne.n	11258 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
   1124a:	4a05      	ldr	r2, [pc, #20]	; (11260 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   1124c:	9b01      	ldr	r3, [sp, #4]
   1124e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11252:	2b00      	cmp	r3, #0
   11254:	d100      	bne.n	11258 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11256:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11258:	bf00      	nop
   1125a:	b003      	add	sp, #12
   1125c:	f85d fb04 	ldr.w	pc, [sp], #4
   11260:	1fff93a0 	.word	0x1fff93a0
   11264:	1fff939c 	.word	0x1fff939c

00011268 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
   11268:	b500      	push	{lr}
   1126a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1126c:	f7f0 fa9c 	bl	17a8 <Sys_GetCoreID>
   11270:	4603      	mov	r3, r0
   11272:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId])
   11274:	4a10      	ldr	r2, [pc, #64]	; (112b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   11276:	9b01      	ldr	r3, [sp, #4]
   11278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1127c:	2b00      	cmp	r3, #0
   1127e:	d10d      	bne.n	1129c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11280:	f7ef fb26 	bl	8d0 <Adc_schm_read_msr>
   11284:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11286:	9b00      	ldr	r3, [sp, #0]
   11288:	f003 0301 	and.w	r3, r3, #1
   1128c:	2b00      	cmp	r3, #0
   1128e:	d100      	bne.n	11292 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11290:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_55[u32CoreId] = msr;
   11292:	490a      	ldr	r1, [pc, #40]	; (112bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x54>)
   11294:	9b01      	ldr	r3, [sp, #4]
   11296:	9a00      	ldr	r2, [sp, #0]
   11298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]++;
   1129c:	4a06      	ldr	r2, [pc, #24]	; (112b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   1129e:	9b01      	ldr	r3, [sp, #4]
   112a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   112a4:	1c5a      	adds	r2, r3, #1
   112a6:	4904      	ldr	r1, [pc, #16]	; (112b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   112a8:	9b01      	ldr	r3, [sp, #4]
   112aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   112ae:	bf00      	nop
   112b0:	b003      	add	sp, #12
   112b2:	f85d fb04 	ldr.w	pc, [sp], #4
   112b6:	bf00      	nop
   112b8:	1fff93a8 	.word	0x1fff93a8
   112bc:	1fff93a4 	.word	0x1fff93a4

000112c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
   112c0:	b500      	push	{lr}
   112c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   112c4:	f7f0 fa70 	bl	17a8 <Sys_GetCoreID>
   112c8:	4603      	mov	r3, r0
   112ca:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]--;
   112cc:	4a0d      	ldr	r2, [pc, #52]	; (11304 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   112ce:	9b01      	ldr	r3, [sp, #4]
   112d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   112d4:	1e5a      	subs	r2, r3, #1
   112d6:	490b      	ldr	r1, [pc, #44]	; (11304 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   112d8:	9b01      	ldr	r3, [sp, #4]
   112da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_55[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]))         /*if interrupts were enabled*/
   112de:	4a0a      	ldr	r2, [pc, #40]	; (11308 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x48>)
   112e0:	9b01      	ldr	r3, [sp, #4]
   112e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   112e6:	f003 0301 	and.w	r3, r3, #1
   112ea:	2b00      	cmp	r3, #0
   112ec:	d106      	bne.n	112fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
   112ee:	4a05      	ldr	r2, [pc, #20]	; (11304 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   112f0:	9b01      	ldr	r3, [sp, #4]
   112f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   112f6:	2b00      	cmp	r3, #0
   112f8:	d100      	bne.n	112fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   112fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   112fc:	bf00      	nop
   112fe:	b003      	add	sp, #12
   11300:	f85d fb04 	ldr.w	pc, [sp], #4
   11304:	1fff93a8 	.word	0x1fff93a8
   11308:	1fff93a4 	.word	0x1fff93a4

0001130c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
   1130c:	b500      	push	{lr}
   1130e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11310:	f7f0 fa4a 	bl	17a8 <Sys_GetCoreID>
   11314:	4603      	mov	r3, r0
   11316:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId])
   11318:	4a10      	ldr	r2, [pc, #64]	; (1135c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   1131a:	9b01      	ldr	r3, [sp, #4]
   1131c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11320:	2b00      	cmp	r3, #0
   11322:	d10d      	bne.n	11340 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11324:	f7ef fad4 	bl	8d0 <Adc_schm_read_msr>
   11328:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1132a:	9b00      	ldr	r3, [sp, #0]
   1132c:	f003 0301 	and.w	r3, r3, #1
   11330:	2b00      	cmp	r3, #0
   11332:	d100      	bne.n	11336 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11334:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_56[u32CoreId] = msr;
   11336:	490a      	ldr	r1, [pc, #40]	; (11360 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x54>)
   11338:	9b01      	ldr	r3, [sp, #4]
   1133a:	9a00      	ldr	r2, [sp, #0]
   1133c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]++;
   11340:	4a06      	ldr	r2, [pc, #24]	; (1135c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   11342:	9b01      	ldr	r3, [sp, #4]
   11344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11348:	1c5a      	adds	r2, r3, #1
   1134a:	4904      	ldr	r1, [pc, #16]	; (1135c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   1134c:	9b01      	ldr	r3, [sp, #4]
   1134e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11352:	bf00      	nop
   11354:	b003      	add	sp, #12
   11356:	f85d fb04 	ldr.w	pc, [sp], #4
   1135a:	bf00      	nop
   1135c:	1fff93b0 	.word	0x1fff93b0
   11360:	1fff93ac 	.word	0x1fff93ac

00011364 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
   11364:	b500      	push	{lr}
   11366:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11368:	f7f0 fa1e 	bl	17a8 <Sys_GetCoreID>
   1136c:	4603      	mov	r3, r0
   1136e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]--;
   11370:	4a0d      	ldr	r2, [pc, #52]	; (113a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   11372:	9b01      	ldr	r3, [sp, #4]
   11374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11378:	1e5a      	subs	r2, r3, #1
   1137a:	490b      	ldr	r1, [pc, #44]	; (113a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   1137c:	9b01      	ldr	r3, [sp, #4]
   1137e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_56[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]))         /*if interrupts were enabled*/
   11382:	4a0a      	ldr	r2, [pc, #40]	; (113ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x48>)
   11384:	9b01      	ldr	r3, [sp, #4]
   11386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1138a:	f003 0301 	and.w	r3, r3, #1
   1138e:	2b00      	cmp	r3, #0
   11390:	d106      	bne.n	113a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
   11392:	4a05      	ldr	r2, [pc, #20]	; (113a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   11394:	9b01      	ldr	r3, [sp, #4]
   11396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1139a:	2b00      	cmp	r3, #0
   1139c:	d100      	bne.n	113a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1139e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   113a0:	bf00      	nop
   113a2:	b003      	add	sp, #12
   113a4:	f85d fb04 	ldr.w	pc, [sp], #4
   113a8:	1fff93b0 	.word	0x1fff93b0
   113ac:	1fff93ac 	.word	0x1fff93ac

000113b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
   113b0:	b500      	push	{lr}
   113b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   113b4:	f7f0 f9f8 	bl	17a8 <Sys_GetCoreID>
   113b8:	4603      	mov	r3, r0
   113ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId])
   113bc:	4a10      	ldr	r2, [pc, #64]	; (11400 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   113be:	9b01      	ldr	r3, [sp, #4]
   113c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   113c4:	2b00      	cmp	r3, #0
   113c6:	d10d      	bne.n	113e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   113c8:	f7ef fa82 	bl	8d0 <Adc_schm_read_msr>
   113cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   113ce:	9b00      	ldr	r3, [sp, #0]
   113d0:	f003 0301 	and.w	r3, r3, #1
   113d4:	2b00      	cmp	r3, #0
   113d6:	d100      	bne.n	113da <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   113d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_57[u32CoreId] = msr;
   113da:	490a      	ldr	r1, [pc, #40]	; (11404 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x54>)
   113dc:	9b01      	ldr	r3, [sp, #4]
   113de:	9a00      	ldr	r2, [sp, #0]
   113e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]++;
   113e4:	4a06      	ldr	r2, [pc, #24]	; (11400 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   113e6:	9b01      	ldr	r3, [sp, #4]
   113e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   113ec:	1c5a      	adds	r2, r3, #1
   113ee:	4904      	ldr	r1, [pc, #16]	; (11400 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   113f0:	9b01      	ldr	r3, [sp, #4]
   113f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   113f6:	bf00      	nop
   113f8:	b003      	add	sp, #12
   113fa:	f85d fb04 	ldr.w	pc, [sp], #4
   113fe:	bf00      	nop
   11400:	1fff93b8 	.word	0x1fff93b8
   11404:	1fff93b4 	.word	0x1fff93b4

00011408 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
   11408:	b500      	push	{lr}
   1140a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1140c:	f7f0 f9cc 	bl	17a8 <Sys_GetCoreID>
   11410:	4603      	mov	r3, r0
   11412:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]--;
   11414:	4a0d      	ldr	r2, [pc, #52]	; (1144c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   11416:	9b01      	ldr	r3, [sp, #4]
   11418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1141c:	1e5a      	subs	r2, r3, #1
   1141e:	490b      	ldr	r1, [pc, #44]	; (1144c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   11420:	9b01      	ldr	r3, [sp, #4]
   11422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_57[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]))         /*if interrupts were enabled*/
   11426:	4a0a      	ldr	r2, [pc, #40]	; (11450 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x48>)
   11428:	9b01      	ldr	r3, [sp, #4]
   1142a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1142e:	f003 0301 	and.w	r3, r3, #1
   11432:	2b00      	cmp	r3, #0
   11434:	d106      	bne.n	11444 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
   11436:	4a05      	ldr	r2, [pc, #20]	; (1144c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   11438:	9b01      	ldr	r3, [sp, #4]
   1143a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1143e:	2b00      	cmp	r3, #0
   11440:	d100      	bne.n	11444 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11442:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11444:	bf00      	nop
   11446:	b003      	add	sp, #12
   11448:	f85d fb04 	ldr.w	pc, [sp], #4
   1144c:	1fff93b8 	.word	0x1fff93b8
   11450:	1fff93b4 	.word	0x1fff93b4

00011454 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
   11454:	b500      	push	{lr}
   11456:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11458:	f7f0 f9a6 	bl	17a8 <Sys_GetCoreID>
   1145c:	4603      	mov	r3, r0
   1145e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId])
   11460:	4a10      	ldr	r2, [pc, #64]	; (114a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   11462:	9b01      	ldr	r3, [sp, #4]
   11464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11468:	2b00      	cmp	r3, #0
   1146a:	d10d      	bne.n	11488 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1146c:	f7ef fa30 	bl	8d0 <Adc_schm_read_msr>
   11470:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11472:	9b00      	ldr	r3, [sp, #0]
   11474:	f003 0301 	and.w	r3, r3, #1
   11478:	2b00      	cmp	r3, #0
   1147a:	d100      	bne.n	1147e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1147c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_58[u32CoreId] = msr;
   1147e:	490a      	ldr	r1, [pc, #40]	; (114a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x54>)
   11480:	9b01      	ldr	r3, [sp, #4]
   11482:	9a00      	ldr	r2, [sp, #0]
   11484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]++;
   11488:	4a06      	ldr	r2, [pc, #24]	; (114a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   1148a:	9b01      	ldr	r3, [sp, #4]
   1148c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11490:	1c5a      	adds	r2, r3, #1
   11492:	4904      	ldr	r1, [pc, #16]	; (114a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   11494:	9b01      	ldr	r3, [sp, #4]
   11496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1149a:	bf00      	nop
   1149c:	b003      	add	sp, #12
   1149e:	f85d fb04 	ldr.w	pc, [sp], #4
   114a2:	bf00      	nop
   114a4:	1fff93c0 	.word	0x1fff93c0
   114a8:	1fff93bc 	.word	0x1fff93bc

000114ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
   114ac:	b500      	push	{lr}
   114ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   114b0:	f7f0 f97a 	bl	17a8 <Sys_GetCoreID>
   114b4:	4603      	mov	r3, r0
   114b6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]--;
   114b8:	4a0d      	ldr	r2, [pc, #52]	; (114f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   114ba:	9b01      	ldr	r3, [sp, #4]
   114bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   114c0:	1e5a      	subs	r2, r3, #1
   114c2:	490b      	ldr	r1, [pc, #44]	; (114f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   114c4:	9b01      	ldr	r3, [sp, #4]
   114c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_58[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]))         /*if interrupts were enabled*/
   114ca:	4a0a      	ldr	r2, [pc, #40]	; (114f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x48>)
   114cc:	9b01      	ldr	r3, [sp, #4]
   114ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   114d2:	f003 0301 	and.w	r3, r3, #1
   114d6:	2b00      	cmp	r3, #0
   114d8:	d106      	bne.n	114e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
   114da:	4a05      	ldr	r2, [pc, #20]	; (114f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   114dc:	9b01      	ldr	r3, [sp, #4]
   114de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   114e2:	2b00      	cmp	r3, #0
   114e4:	d100      	bne.n	114e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   114e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   114e8:	bf00      	nop
   114ea:	b003      	add	sp, #12
   114ec:	f85d fb04 	ldr.w	pc, [sp], #4
   114f0:	1fff93c0 	.word	0x1fff93c0
   114f4:	1fff93bc 	.word	0x1fff93bc

000114f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
   114f8:	b500      	push	{lr}
   114fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   114fc:	f7f0 f954 	bl	17a8 <Sys_GetCoreID>
   11500:	4603      	mov	r3, r0
   11502:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId])
   11504:	4a10      	ldr	r2, [pc, #64]	; (11548 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   11506:	9b01      	ldr	r3, [sp, #4]
   11508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1150c:	2b00      	cmp	r3, #0
   1150e:	d10d      	bne.n	1152c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11510:	f7ef f9de 	bl	8d0 <Adc_schm_read_msr>
   11514:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11516:	9b00      	ldr	r3, [sp, #0]
   11518:	f003 0301 	and.w	r3, r3, #1
   1151c:	2b00      	cmp	r3, #0
   1151e:	d100      	bne.n	11522 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11520:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_59[u32CoreId] = msr;
   11522:	490a      	ldr	r1, [pc, #40]	; (1154c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x54>)
   11524:	9b01      	ldr	r3, [sp, #4]
   11526:	9a00      	ldr	r2, [sp, #0]
   11528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]++;
   1152c:	4a06      	ldr	r2, [pc, #24]	; (11548 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   1152e:	9b01      	ldr	r3, [sp, #4]
   11530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11534:	1c5a      	adds	r2, r3, #1
   11536:	4904      	ldr	r1, [pc, #16]	; (11548 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   11538:	9b01      	ldr	r3, [sp, #4]
   1153a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1153e:	bf00      	nop
   11540:	b003      	add	sp, #12
   11542:	f85d fb04 	ldr.w	pc, [sp], #4
   11546:	bf00      	nop
   11548:	1fff93c8 	.word	0x1fff93c8
   1154c:	1fff93c4 	.word	0x1fff93c4

00011550 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
   11550:	b500      	push	{lr}
   11552:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11554:	f7f0 f928 	bl	17a8 <Sys_GetCoreID>
   11558:	4603      	mov	r3, r0
   1155a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]--;
   1155c:	4a0d      	ldr	r2, [pc, #52]	; (11594 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   1155e:	9b01      	ldr	r3, [sp, #4]
   11560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11564:	1e5a      	subs	r2, r3, #1
   11566:	490b      	ldr	r1, [pc, #44]	; (11594 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   11568:	9b01      	ldr	r3, [sp, #4]
   1156a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_59[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]))         /*if interrupts were enabled*/
   1156e:	4a0a      	ldr	r2, [pc, #40]	; (11598 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x48>)
   11570:	9b01      	ldr	r3, [sp, #4]
   11572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11576:	f003 0301 	and.w	r3, r3, #1
   1157a:	2b00      	cmp	r3, #0
   1157c:	d106      	bne.n	1158c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
   1157e:	4a05      	ldr	r2, [pc, #20]	; (11594 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   11580:	9b01      	ldr	r3, [sp, #4]
   11582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11586:	2b00      	cmp	r3, #0
   11588:	d100      	bne.n	1158c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1158a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1158c:	bf00      	nop
   1158e:	b003      	add	sp, #12
   11590:	f85d fb04 	ldr.w	pc, [sp], #4
   11594:	1fff93c8 	.word	0x1fff93c8
   11598:	1fff93c4 	.word	0x1fff93c4

0001159c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
   1159c:	b500      	push	{lr}
   1159e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   115a0:	f7f0 f902 	bl	17a8 <Sys_GetCoreID>
   115a4:	4603      	mov	r3, r0
   115a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId])
   115a8:	4a10      	ldr	r2, [pc, #64]	; (115ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   115aa:	9b01      	ldr	r3, [sp, #4]
   115ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115b0:	2b00      	cmp	r3, #0
   115b2:	d10d      	bne.n	115d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   115b4:	f7ef f98c 	bl	8d0 <Adc_schm_read_msr>
   115b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   115ba:	9b00      	ldr	r3, [sp, #0]
   115bc:	f003 0301 	and.w	r3, r3, #1
   115c0:	2b00      	cmp	r3, #0
   115c2:	d100      	bne.n	115c6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   115c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_60[u32CoreId] = msr;
   115c6:	490a      	ldr	r1, [pc, #40]	; (115f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x54>)
   115c8:	9b01      	ldr	r3, [sp, #4]
   115ca:	9a00      	ldr	r2, [sp, #0]
   115cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]++;
   115d0:	4a06      	ldr	r2, [pc, #24]	; (115ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   115d2:	9b01      	ldr	r3, [sp, #4]
   115d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115d8:	1c5a      	adds	r2, r3, #1
   115da:	4904      	ldr	r1, [pc, #16]	; (115ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   115dc:	9b01      	ldr	r3, [sp, #4]
   115de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   115e2:	bf00      	nop
   115e4:	b003      	add	sp, #12
   115e6:	f85d fb04 	ldr.w	pc, [sp], #4
   115ea:	bf00      	nop
   115ec:	1fff93d0 	.word	0x1fff93d0
   115f0:	1fff93cc 	.word	0x1fff93cc

000115f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
   115f4:	b500      	push	{lr}
   115f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   115f8:	f7f0 f8d6 	bl	17a8 <Sys_GetCoreID>
   115fc:	4603      	mov	r3, r0
   115fe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]--;
   11600:	4a0d      	ldr	r2, [pc, #52]	; (11638 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   11602:	9b01      	ldr	r3, [sp, #4]
   11604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11608:	1e5a      	subs	r2, r3, #1
   1160a:	490b      	ldr	r1, [pc, #44]	; (11638 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   1160c:	9b01      	ldr	r3, [sp, #4]
   1160e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_60[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]))         /*if interrupts were enabled*/
   11612:	4a0a      	ldr	r2, [pc, #40]	; (1163c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x48>)
   11614:	9b01      	ldr	r3, [sp, #4]
   11616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1161a:	f003 0301 	and.w	r3, r3, #1
   1161e:	2b00      	cmp	r3, #0
   11620:	d106      	bne.n	11630 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
   11622:	4a05      	ldr	r2, [pc, #20]	; (11638 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   11624:	9b01      	ldr	r3, [sp, #4]
   11626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1162a:	2b00      	cmp	r3, #0
   1162c:	d100      	bne.n	11630 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1162e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11630:	bf00      	nop
   11632:	b003      	add	sp, #12
   11634:	f85d fb04 	ldr.w	pc, [sp], #4
   11638:	1fff93d0 	.word	0x1fff93d0
   1163c:	1fff93cc 	.word	0x1fff93cc

00011640 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
   11640:	b500      	push	{lr}
   11642:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11644:	f7f0 f8b0 	bl	17a8 <Sys_GetCoreID>
   11648:	4603      	mov	r3, r0
   1164a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId])
   1164c:	4a10      	ldr	r2, [pc, #64]	; (11690 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   1164e:	9b01      	ldr	r3, [sp, #4]
   11650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11654:	2b00      	cmp	r3, #0
   11656:	d10d      	bne.n	11674 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11658:	f7ef f93a 	bl	8d0 <Adc_schm_read_msr>
   1165c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1165e:	9b00      	ldr	r3, [sp, #0]
   11660:	f003 0301 	and.w	r3, r3, #1
   11664:	2b00      	cmp	r3, #0
   11666:	d100      	bne.n	1166a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11668:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_61[u32CoreId] = msr;
   1166a:	490a      	ldr	r1, [pc, #40]	; (11694 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x54>)
   1166c:	9b01      	ldr	r3, [sp, #4]
   1166e:	9a00      	ldr	r2, [sp, #0]
   11670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]++;
   11674:	4a06      	ldr	r2, [pc, #24]	; (11690 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   11676:	9b01      	ldr	r3, [sp, #4]
   11678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1167c:	1c5a      	adds	r2, r3, #1
   1167e:	4904      	ldr	r1, [pc, #16]	; (11690 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   11680:	9b01      	ldr	r3, [sp, #4]
   11682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11686:	bf00      	nop
   11688:	b003      	add	sp, #12
   1168a:	f85d fb04 	ldr.w	pc, [sp], #4
   1168e:	bf00      	nop
   11690:	1fff93d8 	.word	0x1fff93d8
   11694:	1fff93d4 	.word	0x1fff93d4

00011698 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
   11698:	b500      	push	{lr}
   1169a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1169c:	f7f0 f884 	bl	17a8 <Sys_GetCoreID>
   116a0:	4603      	mov	r3, r0
   116a2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]--;
   116a4:	4a0d      	ldr	r2, [pc, #52]	; (116dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   116a6:	9b01      	ldr	r3, [sp, #4]
   116a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116ac:	1e5a      	subs	r2, r3, #1
   116ae:	490b      	ldr	r1, [pc, #44]	; (116dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   116b0:	9b01      	ldr	r3, [sp, #4]
   116b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_61[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]))         /*if interrupts were enabled*/
   116b6:	4a0a      	ldr	r2, [pc, #40]	; (116e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x48>)
   116b8:	9b01      	ldr	r3, [sp, #4]
   116ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116be:	f003 0301 	and.w	r3, r3, #1
   116c2:	2b00      	cmp	r3, #0
   116c4:	d106      	bne.n	116d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
   116c6:	4a05      	ldr	r2, [pc, #20]	; (116dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   116c8:	9b01      	ldr	r3, [sp, #4]
   116ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116ce:	2b00      	cmp	r3, #0
   116d0:	d100      	bne.n	116d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   116d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   116d4:	bf00      	nop
   116d6:	b003      	add	sp, #12
   116d8:	f85d fb04 	ldr.w	pc, [sp], #4
   116dc:	1fff93d8 	.word	0x1fff93d8
   116e0:	1fff93d4 	.word	0x1fff93d4

000116e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
   116e4:	b500      	push	{lr}
   116e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   116e8:	f7f0 f85e 	bl	17a8 <Sys_GetCoreID>
   116ec:	4603      	mov	r3, r0
   116ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId])
   116f0:	4a10      	ldr	r2, [pc, #64]	; (11734 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   116f2:	9b01      	ldr	r3, [sp, #4]
   116f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116f8:	2b00      	cmp	r3, #0
   116fa:	d10d      	bne.n	11718 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   116fc:	f7ef f8e8 	bl	8d0 <Adc_schm_read_msr>
   11700:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11702:	9b00      	ldr	r3, [sp, #0]
   11704:	f003 0301 	and.w	r3, r3, #1
   11708:	2b00      	cmp	r3, #0
   1170a:	d100      	bne.n	1170e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1170c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_62[u32CoreId] = msr;
   1170e:	490a      	ldr	r1, [pc, #40]	; (11738 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x54>)
   11710:	9b01      	ldr	r3, [sp, #4]
   11712:	9a00      	ldr	r2, [sp, #0]
   11714:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]++;
   11718:	4a06      	ldr	r2, [pc, #24]	; (11734 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   1171a:	9b01      	ldr	r3, [sp, #4]
   1171c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11720:	1c5a      	adds	r2, r3, #1
   11722:	4904      	ldr	r1, [pc, #16]	; (11734 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   11724:	9b01      	ldr	r3, [sp, #4]
   11726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1172a:	bf00      	nop
   1172c:	b003      	add	sp, #12
   1172e:	f85d fb04 	ldr.w	pc, [sp], #4
   11732:	bf00      	nop
   11734:	1fff93e0 	.word	0x1fff93e0
   11738:	1fff93dc 	.word	0x1fff93dc

0001173c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
   1173c:	b500      	push	{lr}
   1173e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11740:	f7f0 f832 	bl	17a8 <Sys_GetCoreID>
   11744:	4603      	mov	r3, r0
   11746:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]--;
   11748:	4a0d      	ldr	r2, [pc, #52]	; (11780 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   1174a:	9b01      	ldr	r3, [sp, #4]
   1174c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11750:	1e5a      	subs	r2, r3, #1
   11752:	490b      	ldr	r1, [pc, #44]	; (11780 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   11754:	9b01      	ldr	r3, [sp, #4]
   11756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_62[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]))         /*if interrupts were enabled*/
   1175a:	4a0a      	ldr	r2, [pc, #40]	; (11784 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x48>)
   1175c:	9b01      	ldr	r3, [sp, #4]
   1175e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11762:	f003 0301 	and.w	r3, r3, #1
   11766:	2b00      	cmp	r3, #0
   11768:	d106      	bne.n	11778 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
   1176a:	4a05      	ldr	r2, [pc, #20]	; (11780 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   1176c:	9b01      	ldr	r3, [sp, #4]
   1176e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11772:	2b00      	cmp	r3, #0
   11774:	d100      	bne.n	11778 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11776:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11778:	bf00      	nop
   1177a:	b003      	add	sp, #12
   1177c:	f85d fb04 	ldr.w	pc, [sp], #4
   11780:	1fff93e0 	.word	0x1fff93e0
   11784:	1fff93dc 	.word	0x1fff93dc

00011788 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
   11788:	b500      	push	{lr}
   1178a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1178c:	f7f0 f80c 	bl	17a8 <Sys_GetCoreID>
   11790:	4603      	mov	r3, r0
   11792:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId])
   11794:	4a10      	ldr	r2, [pc, #64]	; (117d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   11796:	9b01      	ldr	r3, [sp, #4]
   11798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1179c:	2b00      	cmp	r3, #0
   1179e:	d10d      	bne.n	117bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   117a0:	f7ef f896 	bl	8d0 <Adc_schm_read_msr>
   117a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   117a6:	9b00      	ldr	r3, [sp, #0]
   117a8:	f003 0301 	and.w	r3, r3, #1
   117ac:	2b00      	cmp	r3, #0
   117ae:	d100      	bne.n	117b2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   117b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_63[u32CoreId] = msr;
   117b2:	490a      	ldr	r1, [pc, #40]	; (117dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x54>)
   117b4:	9b01      	ldr	r3, [sp, #4]
   117b6:	9a00      	ldr	r2, [sp, #0]
   117b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]++;
   117bc:	4a06      	ldr	r2, [pc, #24]	; (117d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   117be:	9b01      	ldr	r3, [sp, #4]
   117c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117c4:	1c5a      	adds	r2, r3, #1
   117c6:	4904      	ldr	r1, [pc, #16]	; (117d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   117c8:	9b01      	ldr	r3, [sp, #4]
   117ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   117ce:	bf00      	nop
   117d0:	b003      	add	sp, #12
   117d2:	f85d fb04 	ldr.w	pc, [sp], #4
   117d6:	bf00      	nop
   117d8:	1fff93e8 	.word	0x1fff93e8
   117dc:	1fff93e4 	.word	0x1fff93e4

000117e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
   117e0:	b500      	push	{lr}
   117e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   117e4:	f7ef ffe0 	bl	17a8 <Sys_GetCoreID>
   117e8:	4603      	mov	r3, r0
   117ea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]--;
   117ec:	4a0d      	ldr	r2, [pc, #52]	; (11824 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   117ee:	9b01      	ldr	r3, [sp, #4]
   117f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117f4:	1e5a      	subs	r2, r3, #1
   117f6:	490b      	ldr	r1, [pc, #44]	; (11824 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   117f8:	9b01      	ldr	r3, [sp, #4]
   117fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_63[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]))         /*if interrupts were enabled*/
   117fe:	4a0a      	ldr	r2, [pc, #40]	; (11828 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x48>)
   11800:	9b01      	ldr	r3, [sp, #4]
   11802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11806:	f003 0301 	and.w	r3, r3, #1
   1180a:	2b00      	cmp	r3, #0
   1180c:	d106      	bne.n	1181c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
   1180e:	4a05      	ldr	r2, [pc, #20]	; (11824 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   11810:	9b01      	ldr	r3, [sp, #4]
   11812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11816:	2b00      	cmp	r3, #0
   11818:	d100      	bne.n	1181c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1181a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1181c:	bf00      	nop
   1181e:	b003      	add	sp, #12
   11820:	f85d fb04 	ldr.w	pc, [sp], #4
   11824:	1fff93e8 	.word	0x1fff93e8
   11828:	1fff93e4 	.word	0x1fff93e4

0001182c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
   1182c:	b500      	push	{lr}
   1182e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11830:	f7ef ffba 	bl	17a8 <Sys_GetCoreID>
   11834:	4603      	mov	r3, r0
   11836:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId])
   11838:	4a10      	ldr	r2, [pc, #64]	; (1187c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   1183a:	9b01      	ldr	r3, [sp, #4]
   1183c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11840:	2b00      	cmp	r3, #0
   11842:	d10d      	bne.n	11860 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11844:	f7ef f844 	bl	8d0 <Adc_schm_read_msr>
   11848:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1184a:	9b00      	ldr	r3, [sp, #0]
   1184c:	f003 0301 	and.w	r3, r3, #1
   11850:	2b00      	cmp	r3, #0
   11852:	d100      	bne.n	11856 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11854:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_64[u32CoreId] = msr;
   11856:	490a      	ldr	r1, [pc, #40]	; (11880 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x54>)
   11858:	9b01      	ldr	r3, [sp, #4]
   1185a:	9a00      	ldr	r2, [sp, #0]
   1185c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]++;
   11860:	4a06      	ldr	r2, [pc, #24]	; (1187c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   11862:	9b01      	ldr	r3, [sp, #4]
   11864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11868:	1c5a      	adds	r2, r3, #1
   1186a:	4904      	ldr	r1, [pc, #16]	; (1187c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   1186c:	9b01      	ldr	r3, [sp, #4]
   1186e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11872:	bf00      	nop
   11874:	b003      	add	sp, #12
   11876:	f85d fb04 	ldr.w	pc, [sp], #4
   1187a:	bf00      	nop
   1187c:	1fff93f0 	.word	0x1fff93f0
   11880:	1fff93ec 	.word	0x1fff93ec

00011884 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
   11884:	b500      	push	{lr}
   11886:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11888:	f7ef ff8e 	bl	17a8 <Sys_GetCoreID>
   1188c:	4603      	mov	r3, r0
   1188e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]--;
   11890:	4a0d      	ldr	r2, [pc, #52]	; (118c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   11892:	9b01      	ldr	r3, [sp, #4]
   11894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11898:	1e5a      	subs	r2, r3, #1
   1189a:	490b      	ldr	r1, [pc, #44]	; (118c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   1189c:	9b01      	ldr	r3, [sp, #4]
   1189e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_64[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]))         /*if interrupts were enabled*/
   118a2:	4a0a      	ldr	r2, [pc, #40]	; (118cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x48>)
   118a4:	9b01      	ldr	r3, [sp, #4]
   118a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118aa:	f003 0301 	and.w	r3, r3, #1
   118ae:	2b00      	cmp	r3, #0
   118b0:	d106      	bne.n	118c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
   118b2:	4a05      	ldr	r2, [pc, #20]	; (118c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   118b4:	9b01      	ldr	r3, [sp, #4]
   118b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118ba:	2b00      	cmp	r3, #0
   118bc:	d100      	bne.n	118c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   118be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   118c0:	bf00      	nop
   118c2:	b003      	add	sp, #12
   118c4:	f85d fb04 	ldr.w	pc, [sp], #4
   118c8:	1fff93f0 	.word	0x1fff93f0
   118cc:	1fff93ec 	.word	0x1fff93ec

000118d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
   118d0:	b500      	push	{lr}
   118d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   118d4:	f7ef ff68 	bl	17a8 <Sys_GetCoreID>
   118d8:	4603      	mov	r3, r0
   118da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId])
   118dc:	4a10      	ldr	r2, [pc, #64]	; (11920 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   118de:	9b01      	ldr	r3, [sp, #4]
   118e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118e4:	2b00      	cmp	r3, #0
   118e6:	d10d      	bne.n	11904 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   118e8:	f7ee fff2 	bl	8d0 <Adc_schm_read_msr>
   118ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   118ee:	9b00      	ldr	r3, [sp, #0]
   118f0:	f003 0301 	and.w	r3, r3, #1
   118f4:	2b00      	cmp	r3, #0
   118f6:	d100      	bne.n	118fa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   118f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_65[u32CoreId] = msr;
   118fa:	490a      	ldr	r1, [pc, #40]	; (11924 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x54>)
   118fc:	9b01      	ldr	r3, [sp, #4]
   118fe:	9a00      	ldr	r2, [sp, #0]
   11900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]++;
   11904:	4a06      	ldr	r2, [pc, #24]	; (11920 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   11906:	9b01      	ldr	r3, [sp, #4]
   11908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1190c:	1c5a      	adds	r2, r3, #1
   1190e:	4904      	ldr	r1, [pc, #16]	; (11920 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   11910:	9b01      	ldr	r3, [sp, #4]
   11912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11916:	bf00      	nop
   11918:	b003      	add	sp, #12
   1191a:	f85d fb04 	ldr.w	pc, [sp], #4
   1191e:	bf00      	nop
   11920:	1fff93f8 	.word	0x1fff93f8
   11924:	1fff93f4 	.word	0x1fff93f4

00011928 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
   11928:	b500      	push	{lr}
   1192a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1192c:	f7ef ff3c 	bl	17a8 <Sys_GetCoreID>
   11930:	4603      	mov	r3, r0
   11932:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]--;
   11934:	4a0d      	ldr	r2, [pc, #52]	; (1196c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   11936:	9b01      	ldr	r3, [sp, #4]
   11938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1193c:	1e5a      	subs	r2, r3, #1
   1193e:	490b      	ldr	r1, [pc, #44]	; (1196c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   11940:	9b01      	ldr	r3, [sp, #4]
   11942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_65[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]))         /*if interrupts were enabled*/
   11946:	4a0a      	ldr	r2, [pc, #40]	; (11970 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x48>)
   11948:	9b01      	ldr	r3, [sp, #4]
   1194a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1194e:	f003 0301 	and.w	r3, r3, #1
   11952:	2b00      	cmp	r3, #0
   11954:	d106      	bne.n	11964 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
   11956:	4a05      	ldr	r2, [pc, #20]	; (1196c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   11958:	9b01      	ldr	r3, [sp, #4]
   1195a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1195e:	2b00      	cmp	r3, #0
   11960:	d100      	bne.n	11964 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11962:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11964:	bf00      	nop
   11966:	b003      	add	sp, #12
   11968:	f85d fb04 	ldr.w	pc, [sp], #4
   1196c:	1fff93f8 	.word	0x1fff93f8
   11970:	1fff93f4 	.word	0x1fff93f4

00011974 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
   11974:	b500      	push	{lr}
   11976:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11978:	f7ef ff16 	bl	17a8 <Sys_GetCoreID>
   1197c:	4603      	mov	r3, r0
   1197e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId])
   11980:	4a10      	ldr	r2, [pc, #64]	; (119c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   11982:	9b01      	ldr	r3, [sp, #4]
   11984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11988:	2b00      	cmp	r3, #0
   1198a:	d10d      	bne.n	119a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1198c:	f7ee ffa0 	bl	8d0 <Adc_schm_read_msr>
   11990:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11992:	9b00      	ldr	r3, [sp, #0]
   11994:	f003 0301 	and.w	r3, r3, #1
   11998:	2b00      	cmp	r3, #0
   1199a:	d100      	bne.n	1199e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1199c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_66[u32CoreId] = msr;
   1199e:	490a      	ldr	r1, [pc, #40]	; (119c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x54>)
   119a0:	9b01      	ldr	r3, [sp, #4]
   119a2:	9a00      	ldr	r2, [sp, #0]
   119a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]++;
   119a8:	4a06      	ldr	r2, [pc, #24]	; (119c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   119aa:	9b01      	ldr	r3, [sp, #4]
   119ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119b0:	1c5a      	adds	r2, r3, #1
   119b2:	4904      	ldr	r1, [pc, #16]	; (119c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   119b4:	9b01      	ldr	r3, [sp, #4]
   119b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   119ba:	bf00      	nop
   119bc:	b003      	add	sp, #12
   119be:	f85d fb04 	ldr.w	pc, [sp], #4
   119c2:	bf00      	nop
   119c4:	1fff9400 	.word	0x1fff9400
   119c8:	1fff93fc 	.word	0x1fff93fc

000119cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
   119cc:	b500      	push	{lr}
   119ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   119d0:	f7ef feea 	bl	17a8 <Sys_GetCoreID>
   119d4:	4603      	mov	r3, r0
   119d6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]--;
   119d8:	4a0d      	ldr	r2, [pc, #52]	; (11a10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   119da:	9b01      	ldr	r3, [sp, #4]
   119dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119e0:	1e5a      	subs	r2, r3, #1
   119e2:	490b      	ldr	r1, [pc, #44]	; (11a10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   119e4:	9b01      	ldr	r3, [sp, #4]
   119e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_66[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]))         /*if interrupts were enabled*/
   119ea:	4a0a      	ldr	r2, [pc, #40]	; (11a14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x48>)
   119ec:	9b01      	ldr	r3, [sp, #4]
   119ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119f2:	f003 0301 	and.w	r3, r3, #1
   119f6:	2b00      	cmp	r3, #0
   119f8:	d106      	bne.n	11a08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
   119fa:	4a05      	ldr	r2, [pc, #20]	; (11a10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   119fc:	9b01      	ldr	r3, [sp, #4]
   119fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a02:	2b00      	cmp	r3, #0
   11a04:	d100      	bne.n	11a08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11a06:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11a08:	bf00      	nop
   11a0a:	b003      	add	sp, #12
   11a0c:	f85d fb04 	ldr.w	pc, [sp], #4
   11a10:	1fff9400 	.word	0x1fff9400
   11a14:	1fff93fc 	.word	0x1fff93fc

00011a18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
   11a18:	b500      	push	{lr}
   11a1a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11a1c:	f7ef fec4 	bl	17a8 <Sys_GetCoreID>
   11a20:	4603      	mov	r3, r0
   11a22:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId])
   11a24:	4a10      	ldr	r2, [pc, #64]	; (11a68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   11a26:	9b01      	ldr	r3, [sp, #4]
   11a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a2c:	2b00      	cmp	r3, #0
   11a2e:	d10d      	bne.n	11a4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11a30:	f7ee ff4e 	bl	8d0 <Adc_schm_read_msr>
   11a34:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11a36:	9b00      	ldr	r3, [sp, #0]
   11a38:	f003 0301 	and.w	r3, r3, #1
   11a3c:	2b00      	cmp	r3, #0
   11a3e:	d100      	bne.n	11a42 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11a40:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_67[u32CoreId] = msr;
   11a42:	490a      	ldr	r1, [pc, #40]	; (11a6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x54>)
   11a44:	9b01      	ldr	r3, [sp, #4]
   11a46:	9a00      	ldr	r2, [sp, #0]
   11a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]++;
   11a4c:	4a06      	ldr	r2, [pc, #24]	; (11a68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   11a4e:	9b01      	ldr	r3, [sp, #4]
   11a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a54:	1c5a      	adds	r2, r3, #1
   11a56:	4904      	ldr	r1, [pc, #16]	; (11a68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   11a58:	9b01      	ldr	r3, [sp, #4]
   11a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11a5e:	bf00      	nop
   11a60:	b003      	add	sp, #12
   11a62:	f85d fb04 	ldr.w	pc, [sp], #4
   11a66:	bf00      	nop
   11a68:	1fff9408 	.word	0x1fff9408
   11a6c:	1fff9404 	.word	0x1fff9404

00011a70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
   11a70:	b500      	push	{lr}
   11a72:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11a74:	f7ef fe98 	bl	17a8 <Sys_GetCoreID>
   11a78:	4603      	mov	r3, r0
   11a7a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]--;
   11a7c:	4a0d      	ldr	r2, [pc, #52]	; (11ab4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   11a7e:	9b01      	ldr	r3, [sp, #4]
   11a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a84:	1e5a      	subs	r2, r3, #1
   11a86:	490b      	ldr	r1, [pc, #44]	; (11ab4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   11a88:	9b01      	ldr	r3, [sp, #4]
   11a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_67[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]))         /*if interrupts were enabled*/
   11a8e:	4a0a      	ldr	r2, [pc, #40]	; (11ab8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x48>)
   11a90:	9b01      	ldr	r3, [sp, #4]
   11a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a96:	f003 0301 	and.w	r3, r3, #1
   11a9a:	2b00      	cmp	r3, #0
   11a9c:	d106      	bne.n	11aac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
   11a9e:	4a05      	ldr	r2, [pc, #20]	; (11ab4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   11aa0:	9b01      	ldr	r3, [sp, #4]
   11aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11aa6:	2b00      	cmp	r3, #0
   11aa8:	d100      	bne.n	11aac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11aaa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11aac:	bf00      	nop
   11aae:	b003      	add	sp, #12
   11ab0:	f85d fb04 	ldr.w	pc, [sp], #4
   11ab4:	1fff9408 	.word	0x1fff9408
   11ab8:	1fff9404 	.word	0x1fff9404

00011abc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
   11abc:	b500      	push	{lr}
   11abe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11ac0:	f7ef fe72 	bl	17a8 <Sys_GetCoreID>
   11ac4:	4603      	mov	r3, r0
   11ac6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId])
   11ac8:	4a10      	ldr	r2, [pc, #64]	; (11b0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   11aca:	9b01      	ldr	r3, [sp, #4]
   11acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ad0:	2b00      	cmp	r3, #0
   11ad2:	d10d      	bne.n	11af0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11ad4:	f7ee fefc 	bl	8d0 <Adc_schm_read_msr>
   11ad8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11ada:	9b00      	ldr	r3, [sp, #0]
   11adc:	f003 0301 	and.w	r3, r3, #1
   11ae0:	2b00      	cmp	r3, #0
   11ae2:	d100      	bne.n	11ae6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11ae4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_68[u32CoreId] = msr;
   11ae6:	490a      	ldr	r1, [pc, #40]	; (11b10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x54>)
   11ae8:	9b01      	ldr	r3, [sp, #4]
   11aea:	9a00      	ldr	r2, [sp, #0]
   11aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]++;
   11af0:	4a06      	ldr	r2, [pc, #24]	; (11b0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   11af2:	9b01      	ldr	r3, [sp, #4]
   11af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11af8:	1c5a      	adds	r2, r3, #1
   11afa:	4904      	ldr	r1, [pc, #16]	; (11b0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   11afc:	9b01      	ldr	r3, [sp, #4]
   11afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11b02:	bf00      	nop
   11b04:	b003      	add	sp, #12
   11b06:	f85d fb04 	ldr.w	pc, [sp], #4
   11b0a:	bf00      	nop
   11b0c:	1fff9410 	.word	0x1fff9410
   11b10:	1fff940c 	.word	0x1fff940c

00011b14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
   11b14:	b500      	push	{lr}
   11b16:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11b18:	f7ef fe46 	bl	17a8 <Sys_GetCoreID>
   11b1c:	4603      	mov	r3, r0
   11b1e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]--;
   11b20:	4a0d      	ldr	r2, [pc, #52]	; (11b58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   11b22:	9b01      	ldr	r3, [sp, #4]
   11b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b28:	1e5a      	subs	r2, r3, #1
   11b2a:	490b      	ldr	r1, [pc, #44]	; (11b58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   11b2c:	9b01      	ldr	r3, [sp, #4]
   11b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_68[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]))         /*if interrupts were enabled*/
   11b32:	4a0a      	ldr	r2, [pc, #40]	; (11b5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x48>)
   11b34:	9b01      	ldr	r3, [sp, #4]
   11b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b3a:	f003 0301 	and.w	r3, r3, #1
   11b3e:	2b00      	cmp	r3, #0
   11b40:	d106      	bne.n	11b50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
   11b42:	4a05      	ldr	r2, [pc, #20]	; (11b58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   11b44:	9b01      	ldr	r3, [sp, #4]
   11b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b4a:	2b00      	cmp	r3, #0
   11b4c:	d100      	bne.n	11b50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11b4e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11b50:	bf00      	nop
   11b52:	b003      	add	sp, #12
   11b54:	f85d fb04 	ldr.w	pc, [sp], #4
   11b58:	1fff9410 	.word	0x1fff9410
   11b5c:	1fff940c 	.word	0x1fff940c

00011b60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
   11b60:	b500      	push	{lr}
   11b62:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11b64:	f7ef fe20 	bl	17a8 <Sys_GetCoreID>
   11b68:	4603      	mov	r3, r0
   11b6a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId])
   11b6c:	4a10      	ldr	r2, [pc, #64]	; (11bb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   11b6e:	9b01      	ldr	r3, [sp, #4]
   11b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b74:	2b00      	cmp	r3, #0
   11b76:	d10d      	bne.n	11b94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11b78:	f7ee feaa 	bl	8d0 <Adc_schm_read_msr>
   11b7c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11b7e:	9b00      	ldr	r3, [sp, #0]
   11b80:	f003 0301 	and.w	r3, r3, #1
   11b84:	2b00      	cmp	r3, #0
   11b86:	d100      	bne.n	11b8a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11b88:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_69[u32CoreId] = msr;
   11b8a:	490a      	ldr	r1, [pc, #40]	; (11bb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x54>)
   11b8c:	9b01      	ldr	r3, [sp, #4]
   11b8e:	9a00      	ldr	r2, [sp, #0]
   11b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]++;
   11b94:	4a06      	ldr	r2, [pc, #24]	; (11bb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   11b96:	9b01      	ldr	r3, [sp, #4]
   11b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b9c:	1c5a      	adds	r2, r3, #1
   11b9e:	4904      	ldr	r1, [pc, #16]	; (11bb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   11ba0:	9b01      	ldr	r3, [sp, #4]
   11ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11ba6:	bf00      	nop
   11ba8:	b003      	add	sp, #12
   11baa:	f85d fb04 	ldr.w	pc, [sp], #4
   11bae:	bf00      	nop
   11bb0:	1fff9418 	.word	0x1fff9418
   11bb4:	1fff9414 	.word	0x1fff9414

00011bb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
   11bb8:	b500      	push	{lr}
   11bba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11bbc:	f7ef fdf4 	bl	17a8 <Sys_GetCoreID>
   11bc0:	4603      	mov	r3, r0
   11bc2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]--;
   11bc4:	4a0d      	ldr	r2, [pc, #52]	; (11bfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   11bc6:	9b01      	ldr	r3, [sp, #4]
   11bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11bcc:	1e5a      	subs	r2, r3, #1
   11bce:	490b      	ldr	r1, [pc, #44]	; (11bfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   11bd0:	9b01      	ldr	r3, [sp, #4]
   11bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_69[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]))         /*if interrupts were enabled*/
   11bd6:	4a0a      	ldr	r2, [pc, #40]	; (11c00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x48>)
   11bd8:	9b01      	ldr	r3, [sp, #4]
   11bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11bde:	f003 0301 	and.w	r3, r3, #1
   11be2:	2b00      	cmp	r3, #0
   11be4:	d106      	bne.n	11bf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
   11be6:	4a05      	ldr	r2, [pc, #20]	; (11bfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   11be8:	9b01      	ldr	r3, [sp, #4]
   11bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11bee:	2b00      	cmp	r3, #0
   11bf0:	d100      	bne.n	11bf4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11bf2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11bf4:	bf00      	nop
   11bf6:	b003      	add	sp, #12
   11bf8:	f85d fb04 	ldr.w	pc, [sp], #4
   11bfc:	1fff9418 	.word	0x1fff9418
   11c00:	1fff9414 	.word	0x1fff9414

00011c04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
   11c04:	b500      	push	{lr}
   11c06:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11c08:	f7ef fdce 	bl	17a8 <Sys_GetCoreID>
   11c0c:	4603      	mov	r3, r0
   11c0e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId])
   11c10:	4a10      	ldr	r2, [pc, #64]	; (11c54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   11c12:	9b01      	ldr	r3, [sp, #4]
   11c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c18:	2b00      	cmp	r3, #0
   11c1a:	d10d      	bne.n	11c38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11c1c:	f7ee fe58 	bl	8d0 <Adc_schm_read_msr>
   11c20:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11c22:	9b00      	ldr	r3, [sp, #0]
   11c24:	f003 0301 	and.w	r3, r3, #1
   11c28:	2b00      	cmp	r3, #0
   11c2a:	d100      	bne.n	11c2e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11c2c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_70[u32CoreId] = msr;
   11c2e:	490a      	ldr	r1, [pc, #40]	; (11c58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x54>)
   11c30:	9b01      	ldr	r3, [sp, #4]
   11c32:	9a00      	ldr	r2, [sp, #0]
   11c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]++;
   11c38:	4a06      	ldr	r2, [pc, #24]	; (11c54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   11c3a:	9b01      	ldr	r3, [sp, #4]
   11c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c40:	1c5a      	adds	r2, r3, #1
   11c42:	4904      	ldr	r1, [pc, #16]	; (11c54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   11c44:	9b01      	ldr	r3, [sp, #4]
   11c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11c4a:	bf00      	nop
   11c4c:	b003      	add	sp, #12
   11c4e:	f85d fb04 	ldr.w	pc, [sp], #4
   11c52:	bf00      	nop
   11c54:	1fff9420 	.word	0x1fff9420
   11c58:	1fff941c 	.word	0x1fff941c

00011c5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
   11c5c:	b500      	push	{lr}
   11c5e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11c60:	f7ef fda2 	bl	17a8 <Sys_GetCoreID>
   11c64:	4603      	mov	r3, r0
   11c66:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]--;
   11c68:	4a0d      	ldr	r2, [pc, #52]	; (11ca0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   11c6a:	9b01      	ldr	r3, [sp, #4]
   11c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c70:	1e5a      	subs	r2, r3, #1
   11c72:	490b      	ldr	r1, [pc, #44]	; (11ca0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   11c74:	9b01      	ldr	r3, [sp, #4]
   11c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_70[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]))         /*if interrupts were enabled*/
   11c7a:	4a0a      	ldr	r2, [pc, #40]	; (11ca4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x48>)
   11c7c:	9b01      	ldr	r3, [sp, #4]
   11c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c82:	f003 0301 	and.w	r3, r3, #1
   11c86:	2b00      	cmp	r3, #0
   11c88:	d106      	bne.n	11c98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
   11c8a:	4a05      	ldr	r2, [pc, #20]	; (11ca0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   11c8c:	9b01      	ldr	r3, [sp, #4]
   11c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c92:	2b00      	cmp	r3, #0
   11c94:	d100      	bne.n	11c98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11c96:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11c98:	bf00      	nop
   11c9a:	b003      	add	sp, #12
   11c9c:	f85d fb04 	ldr.w	pc, [sp], #4
   11ca0:	1fff9420 	.word	0x1fff9420
   11ca4:	1fff941c 	.word	0x1fff941c

00011ca8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
   11ca8:	b500      	push	{lr}
   11caa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11cac:	f7ef fd7c 	bl	17a8 <Sys_GetCoreID>
   11cb0:	4603      	mov	r3, r0
   11cb2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId])
   11cb4:	4a10      	ldr	r2, [pc, #64]	; (11cf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   11cb6:	9b01      	ldr	r3, [sp, #4]
   11cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11cbc:	2b00      	cmp	r3, #0
   11cbe:	d10d      	bne.n	11cdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11cc0:	f7ee fe06 	bl	8d0 <Adc_schm_read_msr>
   11cc4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11cc6:	9b00      	ldr	r3, [sp, #0]
   11cc8:	f003 0301 	and.w	r3, r3, #1
   11ccc:	2b00      	cmp	r3, #0
   11cce:	d100      	bne.n	11cd2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11cd0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_71[u32CoreId] = msr;
   11cd2:	490a      	ldr	r1, [pc, #40]	; (11cfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x54>)
   11cd4:	9b01      	ldr	r3, [sp, #4]
   11cd6:	9a00      	ldr	r2, [sp, #0]
   11cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]++;
   11cdc:	4a06      	ldr	r2, [pc, #24]	; (11cf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   11cde:	9b01      	ldr	r3, [sp, #4]
   11ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ce4:	1c5a      	adds	r2, r3, #1
   11ce6:	4904      	ldr	r1, [pc, #16]	; (11cf8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   11ce8:	9b01      	ldr	r3, [sp, #4]
   11cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11cee:	bf00      	nop
   11cf0:	b003      	add	sp, #12
   11cf2:	f85d fb04 	ldr.w	pc, [sp], #4
   11cf6:	bf00      	nop
   11cf8:	1fff9428 	.word	0x1fff9428
   11cfc:	1fff9424 	.word	0x1fff9424

00011d00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
   11d00:	b500      	push	{lr}
   11d02:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11d04:	f7ef fd50 	bl	17a8 <Sys_GetCoreID>
   11d08:	4603      	mov	r3, r0
   11d0a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]--;
   11d0c:	4a0d      	ldr	r2, [pc, #52]	; (11d44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   11d0e:	9b01      	ldr	r3, [sp, #4]
   11d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d14:	1e5a      	subs	r2, r3, #1
   11d16:	490b      	ldr	r1, [pc, #44]	; (11d44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   11d18:	9b01      	ldr	r3, [sp, #4]
   11d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_71[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]))         /*if interrupts were enabled*/
   11d1e:	4a0a      	ldr	r2, [pc, #40]	; (11d48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x48>)
   11d20:	9b01      	ldr	r3, [sp, #4]
   11d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d26:	f003 0301 	and.w	r3, r3, #1
   11d2a:	2b00      	cmp	r3, #0
   11d2c:	d106      	bne.n	11d3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
   11d2e:	4a05      	ldr	r2, [pc, #20]	; (11d44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   11d30:	9b01      	ldr	r3, [sp, #4]
   11d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d36:	2b00      	cmp	r3, #0
   11d38:	d100      	bne.n	11d3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11d3a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11d3c:	bf00      	nop
   11d3e:	b003      	add	sp, #12
   11d40:	f85d fb04 	ldr.w	pc, [sp], #4
   11d44:	1fff9428 	.word	0x1fff9428
   11d48:	1fff9424 	.word	0x1fff9424

00011d4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
   11d4c:	b500      	push	{lr}
   11d4e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11d50:	f7ef fd2a 	bl	17a8 <Sys_GetCoreID>
   11d54:	4603      	mov	r3, r0
   11d56:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId])
   11d58:	4a10      	ldr	r2, [pc, #64]	; (11d9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   11d5a:	9b01      	ldr	r3, [sp, #4]
   11d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d60:	2b00      	cmp	r3, #0
   11d62:	d10d      	bne.n	11d80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11d64:	f7ee fdb4 	bl	8d0 <Adc_schm_read_msr>
   11d68:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11d6a:	9b00      	ldr	r3, [sp, #0]
   11d6c:	f003 0301 	and.w	r3, r3, #1
   11d70:	2b00      	cmp	r3, #0
   11d72:	d100      	bne.n	11d76 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11d74:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_72[u32CoreId] = msr;
   11d76:	490a      	ldr	r1, [pc, #40]	; (11da0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x54>)
   11d78:	9b01      	ldr	r3, [sp, #4]
   11d7a:	9a00      	ldr	r2, [sp, #0]
   11d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]++;
   11d80:	4a06      	ldr	r2, [pc, #24]	; (11d9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   11d82:	9b01      	ldr	r3, [sp, #4]
   11d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d88:	1c5a      	adds	r2, r3, #1
   11d8a:	4904      	ldr	r1, [pc, #16]	; (11d9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   11d8c:	9b01      	ldr	r3, [sp, #4]
   11d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11d92:	bf00      	nop
   11d94:	b003      	add	sp, #12
   11d96:	f85d fb04 	ldr.w	pc, [sp], #4
   11d9a:	bf00      	nop
   11d9c:	1fff9430 	.word	0x1fff9430
   11da0:	1fff942c 	.word	0x1fff942c

00011da4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
   11da4:	b500      	push	{lr}
   11da6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11da8:	f7ef fcfe 	bl	17a8 <Sys_GetCoreID>
   11dac:	4603      	mov	r3, r0
   11dae:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]--;
   11db0:	4a0d      	ldr	r2, [pc, #52]	; (11de8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   11db2:	9b01      	ldr	r3, [sp, #4]
   11db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11db8:	1e5a      	subs	r2, r3, #1
   11dba:	490b      	ldr	r1, [pc, #44]	; (11de8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   11dbc:	9b01      	ldr	r3, [sp, #4]
   11dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_72[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]))         /*if interrupts were enabled*/
   11dc2:	4a0a      	ldr	r2, [pc, #40]	; (11dec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x48>)
   11dc4:	9b01      	ldr	r3, [sp, #4]
   11dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11dca:	f003 0301 	and.w	r3, r3, #1
   11dce:	2b00      	cmp	r3, #0
   11dd0:	d106      	bne.n	11de0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
   11dd2:	4a05      	ldr	r2, [pc, #20]	; (11de8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   11dd4:	9b01      	ldr	r3, [sp, #4]
   11dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11dda:	2b00      	cmp	r3, #0
   11ddc:	d100      	bne.n	11de0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11dde:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11de0:	bf00      	nop
   11de2:	b003      	add	sp, #12
   11de4:	f85d fb04 	ldr.w	pc, [sp], #4
   11de8:	1fff9430 	.word	0x1fff9430
   11dec:	1fff942c 	.word	0x1fff942c

00011df0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
   11df0:	b500      	push	{lr}
   11df2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11df4:	f7ef fcd8 	bl	17a8 <Sys_GetCoreID>
   11df8:	4603      	mov	r3, r0
   11dfa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId])
   11dfc:	4a10      	ldr	r2, [pc, #64]	; (11e40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   11dfe:	9b01      	ldr	r3, [sp, #4]
   11e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e04:	2b00      	cmp	r3, #0
   11e06:	d10d      	bne.n	11e24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11e08:	f7ee fd62 	bl	8d0 <Adc_schm_read_msr>
   11e0c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11e0e:	9b00      	ldr	r3, [sp, #0]
   11e10:	f003 0301 	and.w	r3, r3, #1
   11e14:	2b00      	cmp	r3, #0
   11e16:	d100      	bne.n	11e1a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11e18:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_73[u32CoreId] = msr;
   11e1a:	490a      	ldr	r1, [pc, #40]	; (11e44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x54>)
   11e1c:	9b01      	ldr	r3, [sp, #4]
   11e1e:	9a00      	ldr	r2, [sp, #0]
   11e20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]++;
   11e24:	4a06      	ldr	r2, [pc, #24]	; (11e40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   11e26:	9b01      	ldr	r3, [sp, #4]
   11e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e2c:	1c5a      	adds	r2, r3, #1
   11e2e:	4904      	ldr	r1, [pc, #16]	; (11e40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   11e30:	9b01      	ldr	r3, [sp, #4]
   11e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11e36:	bf00      	nop
   11e38:	b003      	add	sp, #12
   11e3a:	f85d fb04 	ldr.w	pc, [sp], #4
   11e3e:	bf00      	nop
   11e40:	1fff9438 	.word	0x1fff9438
   11e44:	1fff9434 	.word	0x1fff9434

00011e48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
   11e48:	b500      	push	{lr}
   11e4a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11e4c:	f7ef fcac 	bl	17a8 <Sys_GetCoreID>
   11e50:	4603      	mov	r3, r0
   11e52:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]--;
   11e54:	4a0d      	ldr	r2, [pc, #52]	; (11e8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   11e56:	9b01      	ldr	r3, [sp, #4]
   11e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e5c:	1e5a      	subs	r2, r3, #1
   11e5e:	490b      	ldr	r1, [pc, #44]	; (11e8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   11e60:	9b01      	ldr	r3, [sp, #4]
   11e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_73[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]))         /*if interrupts were enabled*/
   11e66:	4a0a      	ldr	r2, [pc, #40]	; (11e90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x48>)
   11e68:	9b01      	ldr	r3, [sp, #4]
   11e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e6e:	f003 0301 	and.w	r3, r3, #1
   11e72:	2b00      	cmp	r3, #0
   11e74:	d106      	bne.n	11e84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
   11e76:	4a05      	ldr	r2, [pc, #20]	; (11e8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   11e78:	9b01      	ldr	r3, [sp, #4]
   11e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e7e:	2b00      	cmp	r3, #0
   11e80:	d100      	bne.n	11e84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11e82:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11e84:	bf00      	nop
   11e86:	b003      	add	sp, #12
   11e88:	f85d fb04 	ldr.w	pc, [sp], #4
   11e8c:	1fff9438 	.word	0x1fff9438
   11e90:	1fff9434 	.word	0x1fff9434

00011e94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
   11e94:	b500      	push	{lr}
   11e96:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11e98:	f7ef fc86 	bl	17a8 <Sys_GetCoreID>
   11e9c:	4603      	mov	r3, r0
   11e9e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId])
   11ea0:	4a10      	ldr	r2, [pc, #64]	; (11ee4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   11ea2:	9b01      	ldr	r3, [sp, #4]
   11ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ea8:	2b00      	cmp	r3, #0
   11eaa:	d10d      	bne.n	11ec8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11eac:	f7ee fd10 	bl	8d0 <Adc_schm_read_msr>
   11eb0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11eb2:	9b00      	ldr	r3, [sp, #0]
   11eb4:	f003 0301 	and.w	r3, r3, #1
   11eb8:	2b00      	cmp	r3, #0
   11eba:	d100      	bne.n	11ebe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11ebc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_74[u32CoreId] = msr;
   11ebe:	490a      	ldr	r1, [pc, #40]	; (11ee8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x54>)
   11ec0:	9b01      	ldr	r3, [sp, #4]
   11ec2:	9a00      	ldr	r2, [sp, #0]
   11ec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]++;
   11ec8:	4a06      	ldr	r2, [pc, #24]	; (11ee4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   11eca:	9b01      	ldr	r3, [sp, #4]
   11ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ed0:	1c5a      	adds	r2, r3, #1
   11ed2:	4904      	ldr	r1, [pc, #16]	; (11ee4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   11ed4:	9b01      	ldr	r3, [sp, #4]
   11ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11eda:	bf00      	nop
   11edc:	b003      	add	sp, #12
   11ede:	f85d fb04 	ldr.w	pc, [sp], #4
   11ee2:	bf00      	nop
   11ee4:	1fff9440 	.word	0x1fff9440
   11ee8:	1fff943c 	.word	0x1fff943c

00011eec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
   11eec:	b500      	push	{lr}
   11eee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11ef0:	f7ef fc5a 	bl	17a8 <Sys_GetCoreID>
   11ef4:	4603      	mov	r3, r0
   11ef6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]--;
   11ef8:	4a0d      	ldr	r2, [pc, #52]	; (11f30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   11efa:	9b01      	ldr	r3, [sp, #4]
   11efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f00:	1e5a      	subs	r2, r3, #1
   11f02:	490b      	ldr	r1, [pc, #44]	; (11f30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   11f04:	9b01      	ldr	r3, [sp, #4]
   11f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_74[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]))         /*if interrupts were enabled*/
   11f0a:	4a0a      	ldr	r2, [pc, #40]	; (11f34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x48>)
   11f0c:	9b01      	ldr	r3, [sp, #4]
   11f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f12:	f003 0301 	and.w	r3, r3, #1
   11f16:	2b00      	cmp	r3, #0
   11f18:	d106      	bne.n	11f28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
   11f1a:	4a05      	ldr	r2, [pc, #20]	; (11f30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   11f1c:	9b01      	ldr	r3, [sp, #4]
   11f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f22:	2b00      	cmp	r3, #0
   11f24:	d100      	bne.n	11f28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11f26:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11f28:	bf00      	nop
   11f2a:	b003      	add	sp, #12
   11f2c:	f85d fb04 	ldr.w	pc, [sp], #4
   11f30:	1fff9440 	.word	0x1fff9440
   11f34:	1fff943c 	.word	0x1fff943c

00011f38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
   11f38:	b500      	push	{lr}
   11f3a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11f3c:	f7ef fc34 	bl	17a8 <Sys_GetCoreID>
   11f40:	4603      	mov	r3, r0
   11f42:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId])
   11f44:	4a10      	ldr	r2, [pc, #64]	; (11f88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   11f46:	9b01      	ldr	r3, [sp, #4]
   11f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f4c:	2b00      	cmp	r3, #0
   11f4e:	d10d      	bne.n	11f6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11f50:	f7ee fcbe 	bl	8d0 <Adc_schm_read_msr>
   11f54:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11f56:	9b00      	ldr	r3, [sp, #0]
   11f58:	f003 0301 	and.w	r3, r3, #1
   11f5c:	2b00      	cmp	r3, #0
   11f5e:	d100      	bne.n	11f62 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11f60:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_75[u32CoreId] = msr;
   11f62:	490a      	ldr	r1, [pc, #40]	; (11f8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x54>)
   11f64:	9b01      	ldr	r3, [sp, #4]
   11f66:	9a00      	ldr	r2, [sp, #0]
   11f68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]++;
   11f6c:	4a06      	ldr	r2, [pc, #24]	; (11f88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   11f6e:	9b01      	ldr	r3, [sp, #4]
   11f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f74:	1c5a      	adds	r2, r3, #1
   11f76:	4904      	ldr	r1, [pc, #16]	; (11f88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   11f78:	9b01      	ldr	r3, [sp, #4]
   11f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11f7e:	bf00      	nop
   11f80:	b003      	add	sp, #12
   11f82:	f85d fb04 	ldr.w	pc, [sp], #4
   11f86:	bf00      	nop
   11f88:	1fff9448 	.word	0x1fff9448
   11f8c:	1fff9444 	.word	0x1fff9444

00011f90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
   11f90:	b500      	push	{lr}
   11f92:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11f94:	f7ef fc08 	bl	17a8 <Sys_GetCoreID>
   11f98:	4603      	mov	r3, r0
   11f9a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]--;
   11f9c:	4a0d      	ldr	r2, [pc, #52]	; (11fd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   11f9e:	9b01      	ldr	r3, [sp, #4]
   11fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fa4:	1e5a      	subs	r2, r3, #1
   11fa6:	490b      	ldr	r1, [pc, #44]	; (11fd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   11fa8:	9b01      	ldr	r3, [sp, #4]
   11faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_75[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]))         /*if interrupts were enabled*/
   11fae:	4a0a      	ldr	r2, [pc, #40]	; (11fd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x48>)
   11fb0:	9b01      	ldr	r3, [sp, #4]
   11fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fb6:	f003 0301 	and.w	r3, r3, #1
   11fba:	2b00      	cmp	r3, #0
   11fbc:	d106      	bne.n	11fcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
   11fbe:	4a05      	ldr	r2, [pc, #20]	; (11fd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   11fc0:	9b01      	ldr	r3, [sp, #4]
   11fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fc6:	2b00      	cmp	r3, #0
   11fc8:	d100      	bne.n	11fcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11fca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11fcc:	bf00      	nop
   11fce:	b003      	add	sp, #12
   11fd0:	f85d fb04 	ldr.w	pc, [sp], #4
   11fd4:	1fff9448 	.word	0x1fff9448
   11fd8:	1fff9444 	.word	0x1fff9444

00011fdc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
   11fdc:	b500      	push	{lr}
   11fde:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11fe0:	f7ef fbe2 	bl	17a8 <Sys_GetCoreID>
   11fe4:	4603      	mov	r3, r0
   11fe6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId])
   11fe8:	4a10      	ldr	r2, [pc, #64]	; (1202c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   11fea:	9b01      	ldr	r3, [sp, #4]
   11fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ff0:	2b00      	cmp	r3, #0
   11ff2:	d10d      	bne.n	12010 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11ff4:	f7ee fc6c 	bl	8d0 <Adc_schm_read_msr>
   11ff8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11ffa:	9b00      	ldr	r3, [sp, #0]
   11ffc:	f003 0301 	and.w	r3, r3, #1
   12000:	2b00      	cmp	r3, #0
   12002:	d100      	bne.n	12006 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12004:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_76[u32CoreId] = msr;
   12006:	490a      	ldr	r1, [pc, #40]	; (12030 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x54>)
   12008:	9b01      	ldr	r3, [sp, #4]
   1200a:	9a00      	ldr	r2, [sp, #0]
   1200c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]++;
   12010:	4a06      	ldr	r2, [pc, #24]	; (1202c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   12012:	9b01      	ldr	r3, [sp, #4]
   12014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12018:	1c5a      	adds	r2, r3, #1
   1201a:	4904      	ldr	r1, [pc, #16]	; (1202c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   1201c:	9b01      	ldr	r3, [sp, #4]
   1201e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12022:	bf00      	nop
   12024:	b003      	add	sp, #12
   12026:	f85d fb04 	ldr.w	pc, [sp], #4
   1202a:	bf00      	nop
   1202c:	1fff9450 	.word	0x1fff9450
   12030:	1fff944c 	.word	0x1fff944c

00012034 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
   12034:	b500      	push	{lr}
   12036:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12038:	f7ef fbb6 	bl	17a8 <Sys_GetCoreID>
   1203c:	4603      	mov	r3, r0
   1203e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]--;
   12040:	4a0d      	ldr	r2, [pc, #52]	; (12078 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   12042:	9b01      	ldr	r3, [sp, #4]
   12044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12048:	1e5a      	subs	r2, r3, #1
   1204a:	490b      	ldr	r1, [pc, #44]	; (12078 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   1204c:	9b01      	ldr	r3, [sp, #4]
   1204e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_76[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]))         /*if interrupts were enabled*/
   12052:	4a0a      	ldr	r2, [pc, #40]	; (1207c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x48>)
   12054:	9b01      	ldr	r3, [sp, #4]
   12056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1205a:	f003 0301 	and.w	r3, r3, #1
   1205e:	2b00      	cmp	r3, #0
   12060:	d106      	bne.n	12070 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
   12062:	4a05      	ldr	r2, [pc, #20]	; (12078 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   12064:	9b01      	ldr	r3, [sp, #4]
   12066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1206a:	2b00      	cmp	r3, #0
   1206c:	d100      	bne.n	12070 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1206e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12070:	bf00      	nop
   12072:	b003      	add	sp, #12
   12074:	f85d fb04 	ldr.w	pc, [sp], #4
   12078:	1fff9450 	.word	0x1fff9450
   1207c:	1fff944c 	.word	0x1fff944c

00012080 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
   12080:	b500      	push	{lr}
   12082:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12084:	f7ef fb90 	bl	17a8 <Sys_GetCoreID>
   12088:	4603      	mov	r3, r0
   1208a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId])
   1208c:	4a10      	ldr	r2, [pc, #64]	; (120d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   1208e:	9b01      	ldr	r3, [sp, #4]
   12090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12094:	2b00      	cmp	r3, #0
   12096:	d10d      	bne.n	120b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12098:	f7ee fc1a 	bl	8d0 <Adc_schm_read_msr>
   1209c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1209e:	9b00      	ldr	r3, [sp, #0]
   120a0:	f003 0301 	and.w	r3, r3, #1
   120a4:	2b00      	cmp	r3, #0
   120a6:	d100      	bne.n	120aa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   120a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_77[u32CoreId] = msr;
   120aa:	490a      	ldr	r1, [pc, #40]	; (120d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x54>)
   120ac:	9b01      	ldr	r3, [sp, #4]
   120ae:	9a00      	ldr	r2, [sp, #0]
   120b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]++;
   120b4:	4a06      	ldr	r2, [pc, #24]	; (120d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   120b6:	9b01      	ldr	r3, [sp, #4]
   120b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120bc:	1c5a      	adds	r2, r3, #1
   120be:	4904      	ldr	r1, [pc, #16]	; (120d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   120c0:	9b01      	ldr	r3, [sp, #4]
   120c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   120c6:	bf00      	nop
   120c8:	b003      	add	sp, #12
   120ca:	f85d fb04 	ldr.w	pc, [sp], #4
   120ce:	bf00      	nop
   120d0:	1fff9458 	.word	0x1fff9458
   120d4:	1fff9454 	.word	0x1fff9454

000120d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
   120d8:	b500      	push	{lr}
   120da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   120dc:	f7ef fb64 	bl	17a8 <Sys_GetCoreID>
   120e0:	4603      	mov	r3, r0
   120e2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]--;
   120e4:	4a0d      	ldr	r2, [pc, #52]	; (1211c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   120e6:	9b01      	ldr	r3, [sp, #4]
   120e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120ec:	1e5a      	subs	r2, r3, #1
   120ee:	490b      	ldr	r1, [pc, #44]	; (1211c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   120f0:	9b01      	ldr	r3, [sp, #4]
   120f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_77[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]))         /*if interrupts were enabled*/
   120f6:	4a0a      	ldr	r2, [pc, #40]	; (12120 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x48>)
   120f8:	9b01      	ldr	r3, [sp, #4]
   120fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120fe:	f003 0301 	and.w	r3, r3, #1
   12102:	2b00      	cmp	r3, #0
   12104:	d106      	bne.n	12114 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
   12106:	4a05      	ldr	r2, [pc, #20]	; (1211c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   12108:	9b01      	ldr	r3, [sp, #4]
   1210a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1210e:	2b00      	cmp	r3, #0
   12110:	d100      	bne.n	12114 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12112:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12114:	bf00      	nop
   12116:	b003      	add	sp, #12
   12118:	f85d fb04 	ldr.w	pc, [sp], #4
   1211c:	1fff9458 	.word	0x1fff9458
   12120:	1fff9454 	.word	0x1fff9454

00012124 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
   12124:	b500      	push	{lr}
   12126:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12128:	f7ef fb3e 	bl	17a8 <Sys_GetCoreID>
   1212c:	4603      	mov	r3, r0
   1212e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId])
   12130:	4a10      	ldr	r2, [pc, #64]	; (12174 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   12132:	9b01      	ldr	r3, [sp, #4]
   12134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12138:	2b00      	cmp	r3, #0
   1213a:	d10d      	bne.n	12158 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1213c:	f7ee fbc8 	bl	8d0 <Adc_schm_read_msr>
   12140:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12142:	9b00      	ldr	r3, [sp, #0]
   12144:	f003 0301 	and.w	r3, r3, #1
   12148:	2b00      	cmp	r3, #0
   1214a:	d100      	bne.n	1214e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1214c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_78[u32CoreId] = msr;
   1214e:	490a      	ldr	r1, [pc, #40]	; (12178 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x54>)
   12150:	9b01      	ldr	r3, [sp, #4]
   12152:	9a00      	ldr	r2, [sp, #0]
   12154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]++;
   12158:	4a06      	ldr	r2, [pc, #24]	; (12174 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   1215a:	9b01      	ldr	r3, [sp, #4]
   1215c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12160:	1c5a      	adds	r2, r3, #1
   12162:	4904      	ldr	r1, [pc, #16]	; (12174 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   12164:	9b01      	ldr	r3, [sp, #4]
   12166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1216a:	bf00      	nop
   1216c:	b003      	add	sp, #12
   1216e:	f85d fb04 	ldr.w	pc, [sp], #4
   12172:	bf00      	nop
   12174:	1fff9460 	.word	0x1fff9460
   12178:	1fff945c 	.word	0x1fff945c

0001217c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
   1217c:	b500      	push	{lr}
   1217e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12180:	f7ef fb12 	bl	17a8 <Sys_GetCoreID>
   12184:	4603      	mov	r3, r0
   12186:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]--;
   12188:	4a0d      	ldr	r2, [pc, #52]	; (121c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   1218a:	9b01      	ldr	r3, [sp, #4]
   1218c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12190:	1e5a      	subs	r2, r3, #1
   12192:	490b      	ldr	r1, [pc, #44]	; (121c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   12194:	9b01      	ldr	r3, [sp, #4]
   12196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_78[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]))         /*if interrupts were enabled*/
   1219a:	4a0a      	ldr	r2, [pc, #40]	; (121c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x48>)
   1219c:	9b01      	ldr	r3, [sp, #4]
   1219e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121a2:	f003 0301 	and.w	r3, r3, #1
   121a6:	2b00      	cmp	r3, #0
   121a8:	d106      	bne.n	121b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
   121aa:	4a05      	ldr	r2, [pc, #20]	; (121c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   121ac:	9b01      	ldr	r3, [sp, #4]
   121ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121b2:	2b00      	cmp	r3, #0
   121b4:	d100      	bne.n	121b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   121b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   121b8:	bf00      	nop
   121ba:	b003      	add	sp, #12
   121bc:	f85d fb04 	ldr.w	pc, [sp], #4
   121c0:	1fff9460 	.word	0x1fff9460
   121c4:	1fff945c 	.word	0x1fff945c

000121c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
   121c8:	b500      	push	{lr}
   121ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   121cc:	f7ef faec 	bl	17a8 <Sys_GetCoreID>
   121d0:	4603      	mov	r3, r0
   121d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId])
   121d4:	4a10      	ldr	r2, [pc, #64]	; (12218 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   121d6:	9b01      	ldr	r3, [sp, #4]
   121d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121dc:	2b00      	cmp	r3, #0
   121de:	d10d      	bne.n	121fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   121e0:	f7ee fb76 	bl	8d0 <Adc_schm_read_msr>
   121e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   121e6:	9b00      	ldr	r3, [sp, #0]
   121e8:	f003 0301 	and.w	r3, r3, #1
   121ec:	2b00      	cmp	r3, #0
   121ee:	d100      	bne.n	121f2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   121f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_79[u32CoreId] = msr;
   121f2:	490a      	ldr	r1, [pc, #40]	; (1221c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x54>)
   121f4:	9b01      	ldr	r3, [sp, #4]
   121f6:	9a00      	ldr	r2, [sp, #0]
   121f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]++;
   121fc:	4a06      	ldr	r2, [pc, #24]	; (12218 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   121fe:	9b01      	ldr	r3, [sp, #4]
   12200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12204:	1c5a      	adds	r2, r3, #1
   12206:	4904      	ldr	r1, [pc, #16]	; (12218 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   12208:	9b01      	ldr	r3, [sp, #4]
   1220a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1220e:	bf00      	nop
   12210:	b003      	add	sp, #12
   12212:	f85d fb04 	ldr.w	pc, [sp], #4
   12216:	bf00      	nop
   12218:	1fff9468 	.word	0x1fff9468
   1221c:	1fff9464 	.word	0x1fff9464

00012220 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
   12220:	b500      	push	{lr}
   12222:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12224:	f7ef fac0 	bl	17a8 <Sys_GetCoreID>
   12228:	4603      	mov	r3, r0
   1222a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]--;
   1222c:	4a0d      	ldr	r2, [pc, #52]	; (12264 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   1222e:	9b01      	ldr	r3, [sp, #4]
   12230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12234:	1e5a      	subs	r2, r3, #1
   12236:	490b      	ldr	r1, [pc, #44]	; (12264 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   12238:	9b01      	ldr	r3, [sp, #4]
   1223a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_79[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]))         /*if interrupts were enabled*/
   1223e:	4a0a      	ldr	r2, [pc, #40]	; (12268 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x48>)
   12240:	9b01      	ldr	r3, [sp, #4]
   12242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12246:	f003 0301 	and.w	r3, r3, #1
   1224a:	2b00      	cmp	r3, #0
   1224c:	d106      	bne.n	1225c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
   1224e:	4a05      	ldr	r2, [pc, #20]	; (12264 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   12250:	9b01      	ldr	r3, [sp, #4]
   12252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12256:	2b00      	cmp	r3, #0
   12258:	d100      	bne.n	1225c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1225a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1225c:	bf00      	nop
   1225e:	b003      	add	sp, #12
   12260:	f85d fb04 	ldr.w	pc, [sp], #4
   12264:	1fff9468 	.word	0x1fff9468
   12268:	1fff9464 	.word	0x1fff9464

0001226c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
   1226c:	b500      	push	{lr}
   1226e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12270:	f7ef fa9a 	bl	17a8 <Sys_GetCoreID>
   12274:	4603      	mov	r3, r0
   12276:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId])
   12278:	4a10      	ldr	r2, [pc, #64]	; (122bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   1227a:	9b01      	ldr	r3, [sp, #4]
   1227c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12280:	2b00      	cmp	r3, #0
   12282:	d10d      	bne.n	122a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12284:	f7ee fb24 	bl	8d0 <Adc_schm_read_msr>
   12288:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1228a:	9b00      	ldr	r3, [sp, #0]
   1228c:	f003 0301 	and.w	r3, r3, #1
   12290:	2b00      	cmp	r3, #0
   12292:	d100      	bne.n	12296 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12294:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_80[u32CoreId] = msr;
   12296:	490a      	ldr	r1, [pc, #40]	; (122c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x54>)
   12298:	9b01      	ldr	r3, [sp, #4]
   1229a:	9a00      	ldr	r2, [sp, #0]
   1229c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]++;
   122a0:	4a06      	ldr	r2, [pc, #24]	; (122bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   122a2:	9b01      	ldr	r3, [sp, #4]
   122a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122a8:	1c5a      	adds	r2, r3, #1
   122aa:	4904      	ldr	r1, [pc, #16]	; (122bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   122ac:	9b01      	ldr	r3, [sp, #4]
   122ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   122b2:	bf00      	nop
   122b4:	b003      	add	sp, #12
   122b6:	f85d fb04 	ldr.w	pc, [sp], #4
   122ba:	bf00      	nop
   122bc:	1fff9470 	.word	0x1fff9470
   122c0:	1fff946c 	.word	0x1fff946c

000122c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
   122c4:	b500      	push	{lr}
   122c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   122c8:	f7ef fa6e 	bl	17a8 <Sys_GetCoreID>
   122cc:	4603      	mov	r3, r0
   122ce:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]--;
   122d0:	4a0d      	ldr	r2, [pc, #52]	; (12308 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   122d2:	9b01      	ldr	r3, [sp, #4]
   122d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122d8:	1e5a      	subs	r2, r3, #1
   122da:	490b      	ldr	r1, [pc, #44]	; (12308 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   122dc:	9b01      	ldr	r3, [sp, #4]
   122de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_80[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]))         /*if interrupts were enabled*/
   122e2:	4a0a      	ldr	r2, [pc, #40]	; (1230c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x48>)
   122e4:	9b01      	ldr	r3, [sp, #4]
   122e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122ea:	f003 0301 	and.w	r3, r3, #1
   122ee:	2b00      	cmp	r3, #0
   122f0:	d106      	bne.n	12300 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
   122f2:	4a05      	ldr	r2, [pc, #20]	; (12308 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   122f4:	9b01      	ldr	r3, [sp, #4]
   122f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122fa:	2b00      	cmp	r3, #0
   122fc:	d100      	bne.n	12300 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   122fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12300:	bf00      	nop
   12302:	b003      	add	sp, #12
   12304:	f85d fb04 	ldr.w	pc, [sp], #4
   12308:	1fff9470 	.word	0x1fff9470
   1230c:	1fff946c 	.word	0x1fff946c

00012310 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
   12310:	b500      	push	{lr}
   12312:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12314:	f7ef fa48 	bl	17a8 <Sys_GetCoreID>
   12318:	4603      	mov	r3, r0
   1231a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId])
   1231c:	4a10      	ldr	r2, [pc, #64]	; (12360 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   1231e:	9b01      	ldr	r3, [sp, #4]
   12320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12324:	2b00      	cmp	r3, #0
   12326:	d10d      	bne.n	12344 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12328:	f7ee fad2 	bl	8d0 <Adc_schm_read_msr>
   1232c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1232e:	9b00      	ldr	r3, [sp, #0]
   12330:	f003 0301 	and.w	r3, r3, #1
   12334:	2b00      	cmp	r3, #0
   12336:	d100      	bne.n	1233a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12338:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_81[u32CoreId] = msr;
   1233a:	490a      	ldr	r1, [pc, #40]	; (12364 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x54>)
   1233c:	9b01      	ldr	r3, [sp, #4]
   1233e:	9a00      	ldr	r2, [sp, #0]
   12340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]++;
   12344:	4a06      	ldr	r2, [pc, #24]	; (12360 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   12346:	9b01      	ldr	r3, [sp, #4]
   12348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1234c:	1c5a      	adds	r2, r3, #1
   1234e:	4904      	ldr	r1, [pc, #16]	; (12360 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   12350:	9b01      	ldr	r3, [sp, #4]
   12352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12356:	bf00      	nop
   12358:	b003      	add	sp, #12
   1235a:	f85d fb04 	ldr.w	pc, [sp], #4
   1235e:	bf00      	nop
   12360:	1fff9478 	.word	0x1fff9478
   12364:	1fff9474 	.word	0x1fff9474

00012368 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
   12368:	b500      	push	{lr}
   1236a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1236c:	f7ef fa1c 	bl	17a8 <Sys_GetCoreID>
   12370:	4603      	mov	r3, r0
   12372:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]--;
   12374:	4a0d      	ldr	r2, [pc, #52]	; (123ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   12376:	9b01      	ldr	r3, [sp, #4]
   12378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1237c:	1e5a      	subs	r2, r3, #1
   1237e:	490b      	ldr	r1, [pc, #44]	; (123ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   12380:	9b01      	ldr	r3, [sp, #4]
   12382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_81[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]))         /*if interrupts were enabled*/
   12386:	4a0a      	ldr	r2, [pc, #40]	; (123b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x48>)
   12388:	9b01      	ldr	r3, [sp, #4]
   1238a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1238e:	f003 0301 	and.w	r3, r3, #1
   12392:	2b00      	cmp	r3, #0
   12394:	d106      	bne.n	123a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
   12396:	4a05      	ldr	r2, [pc, #20]	; (123ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   12398:	9b01      	ldr	r3, [sp, #4]
   1239a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1239e:	2b00      	cmp	r3, #0
   123a0:	d100      	bne.n	123a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   123a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   123a4:	bf00      	nop
   123a6:	b003      	add	sp, #12
   123a8:	f85d fb04 	ldr.w	pc, [sp], #4
   123ac:	1fff9478 	.word	0x1fff9478
   123b0:	1fff9474 	.word	0x1fff9474

000123b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
   123b4:	b500      	push	{lr}
   123b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   123b8:	f7ef f9f6 	bl	17a8 <Sys_GetCoreID>
   123bc:	4603      	mov	r3, r0
   123be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId])
   123c0:	4a10      	ldr	r2, [pc, #64]	; (12404 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   123c2:	9b01      	ldr	r3, [sp, #4]
   123c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123c8:	2b00      	cmp	r3, #0
   123ca:	d10d      	bne.n	123e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   123cc:	f7ee fa80 	bl	8d0 <Adc_schm_read_msr>
   123d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   123d2:	9b00      	ldr	r3, [sp, #0]
   123d4:	f003 0301 	and.w	r3, r3, #1
   123d8:	2b00      	cmp	r3, #0
   123da:	d100      	bne.n	123de <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   123dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_82[u32CoreId] = msr;
   123de:	490a      	ldr	r1, [pc, #40]	; (12408 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x54>)
   123e0:	9b01      	ldr	r3, [sp, #4]
   123e2:	9a00      	ldr	r2, [sp, #0]
   123e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]++;
   123e8:	4a06      	ldr	r2, [pc, #24]	; (12404 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   123ea:	9b01      	ldr	r3, [sp, #4]
   123ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123f0:	1c5a      	adds	r2, r3, #1
   123f2:	4904      	ldr	r1, [pc, #16]	; (12404 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   123f4:	9b01      	ldr	r3, [sp, #4]
   123f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   123fa:	bf00      	nop
   123fc:	b003      	add	sp, #12
   123fe:	f85d fb04 	ldr.w	pc, [sp], #4
   12402:	bf00      	nop
   12404:	1fff9480 	.word	0x1fff9480
   12408:	1fff947c 	.word	0x1fff947c

0001240c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
   1240c:	b500      	push	{lr}
   1240e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12410:	f7ef f9ca 	bl	17a8 <Sys_GetCoreID>
   12414:	4603      	mov	r3, r0
   12416:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]--;
   12418:	4a0d      	ldr	r2, [pc, #52]	; (12450 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   1241a:	9b01      	ldr	r3, [sp, #4]
   1241c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12420:	1e5a      	subs	r2, r3, #1
   12422:	490b      	ldr	r1, [pc, #44]	; (12450 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   12424:	9b01      	ldr	r3, [sp, #4]
   12426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_82[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]))         /*if interrupts were enabled*/
   1242a:	4a0a      	ldr	r2, [pc, #40]	; (12454 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x48>)
   1242c:	9b01      	ldr	r3, [sp, #4]
   1242e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12432:	f003 0301 	and.w	r3, r3, #1
   12436:	2b00      	cmp	r3, #0
   12438:	d106      	bne.n	12448 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
   1243a:	4a05      	ldr	r2, [pc, #20]	; (12450 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   1243c:	9b01      	ldr	r3, [sp, #4]
   1243e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12442:	2b00      	cmp	r3, #0
   12444:	d100      	bne.n	12448 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12446:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12448:	bf00      	nop
   1244a:	b003      	add	sp, #12
   1244c:	f85d fb04 	ldr.w	pc, [sp], #4
   12450:	1fff9480 	.word	0x1fff9480
   12454:	1fff947c 	.word	0x1fff947c

00012458 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
   12458:	b500      	push	{lr}
   1245a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1245c:	f7ef f9a4 	bl	17a8 <Sys_GetCoreID>
   12460:	4603      	mov	r3, r0
   12462:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId])
   12464:	4a10      	ldr	r2, [pc, #64]	; (124a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   12466:	9b01      	ldr	r3, [sp, #4]
   12468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1246c:	2b00      	cmp	r3, #0
   1246e:	d10d      	bne.n	1248c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12470:	f7ee fa2e 	bl	8d0 <Adc_schm_read_msr>
   12474:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12476:	9b00      	ldr	r3, [sp, #0]
   12478:	f003 0301 	and.w	r3, r3, #1
   1247c:	2b00      	cmp	r3, #0
   1247e:	d100      	bne.n	12482 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12480:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_83[u32CoreId] = msr;
   12482:	490a      	ldr	r1, [pc, #40]	; (124ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x54>)
   12484:	9b01      	ldr	r3, [sp, #4]
   12486:	9a00      	ldr	r2, [sp, #0]
   12488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]++;
   1248c:	4a06      	ldr	r2, [pc, #24]	; (124a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   1248e:	9b01      	ldr	r3, [sp, #4]
   12490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12494:	1c5a      	adds	r2, r3, #1
   12496:	4904      	ldr	r1, [pc, #16]	; (124a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   12498:	9b01      	ldr	r3, [sp, #4]
   1249a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1249e:	bf00      	nop
   124a0:	b003      	add	sp, #12
   124a2:	f85d fb04 	ldr.w	pc, [sp], #4
   124a6:	bf00      	nop
   124a8:	1fff9488 	.word	0x1fff9488
   124ac:	1fff9484 	.word	0x1fff9484

000124b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
   124b0:	b500      	push	{lr}
   124b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   124b4:	f7ef f978 	bl	17a8 <Sys_GetCoreID>
   124b8:	4603      	mov	r3, r0
   124ba:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]--;
   124bc:	4a0d      	ldr	r2, [pc, #52]	; (124f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   124be:	9b01      	ldr	r3, [sp, #4]
   124c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124c4:	1e5a      	subs	r2, r3, #1
   124c6:	490b      	ldr	r1, [pc, #44]	; (124f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   124c8:	9b01      	ldr	r3, [sp, #4]
   124ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_83[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]))         /*if interrupts were enabled*/
   124ce:	4a0a      	ldr	r2, [pc, #40]	; (124f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x48>)
   124d0:	9b01      	ldr	r3, [sp, #4]
   124d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124d6:	f003 0301 	and.w	r3, r3, #1
   124da:	2b00      	cmp	r3, #0
   124dc:	d106      	bne.n	124ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
   124de:	4a05      	ldr	r2, [pc, #20]	; (124f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   124e0:	9b01      	ldr	r3, [sp, #4]
   124e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124e6:	2b00      	cmp	r3, #0
   124e8:	d100      	bne.n	124ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   124ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   124ec:	bf00      	nop
   124ee:	b003      	add	sp, #12
   124f0:	f85d fb04 	ldr.w	pc, [sp], #4
   124f4:	1fff9488 	.word	0x1fff9488
   124f8:	1fff9484 	.word	0x1fff9484

000124fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
   124fc:	b500      	push	{lr}
   124fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12500:	f7ef f952 	bl	17a8 <Sys_GetCoreID>
   12504:	4603      	mov	r3, r0
   12506:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId])
   12508:	4a10      	ldr	r2, [pc, #64]	; (1254c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   1250a:	9b01      	ldr	r3, [sp, #4]
   1250c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12510:	2b00      	cmp	r3, #0
   12512:	d10d      	bne.n	12530 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12514:	f7ee f9dc 	bl	8d0 <Adc_schm_read_msr>
   12518:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1251a:	9b00      	ldr	r3, [sp, #0]
   1251c:	f003 0301 	and.w	r3, r3, #1
   12520:	2b00      	cmp	r3, #0
   12522:	d100      	bne.n	12526 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12524:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_84[u32CoreId] = msr;
   12526:	490a      	ldr	r1, [pc, #40]	; (12550 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x54>)
   12528:	9b01      	ldr	r3, [sp, #4]
   1252a:	9a00      	ldr	r2, [sp, #0]
   1252c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]++;
   12530:	4a06      	ldr	r2, [pc, #24]	; (1254c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   12532:	9b01      	ldr	r3, [sp, #4]
   12534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12538:	1c5a      	adds	r2, r3, #1
   1253a:	4904      	ldr	r1, [pc, #16]	; (1254c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   1253c:	9b01      	ldr	r3, [sp, #4]
   1253e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12542:	bf00      	nop
   12544:	b003      	add	sp, #12
   12546:	f85d fb04 	ldr.w	pc, [sp], #4
   1254a:	bf00      	nop
   1254c:	1fff9490 	.word	0x1fff9490
   12550:	1fff948c 	.word	0x1fff948c

00012554 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
   12554:	b500      	push	{lr}
   12556:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12558:	f7ef f926 	bl	17a8 <Sys_GetCoreID>
   1255c:	4603      	mov	r3, r0
   1255e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]--;
   12560:	4a0d      	ldr	r2, [pc, #52]	; (12598 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   12562:	9b01      	ldr	r3, [sp, #4]
   12564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12568:	1e5a      	subs	r2, r3, #1
   1256a:	490b      	ldr	r1, [pc, #44]	; (12598 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   1256c:	9b01      	ldr	r3, [sp, #4]
   1256e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_84[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]))         /*if interrupts were enabled*/
   12572:	4a0a      	ldr	r2, [pc, #40]	; (1259c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x48>)
   12574:	9b01      	ldr	r3, [sp, #4]
   12576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1257a:	f003 0301 	and.w	r3, r3, #1
   1257e:	2b00      	cmp	r3, #0
   12580:	d106      	bne.n	12590 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
   12582:	4a05      	ldr	r2, [pc, #20]	; (12598 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   12584:	9b01      	ldr	r3, [sp, #4]
   12586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1258a:	2b00      	cmp	r3, #0
   1258c:	d100      	bne.n	12590 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1258e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12590:	bf00      	nop
   12592:	b003      	add	sp, #12
   12594:	f85d fb04 	ldr.w	pc, [sp], #4
   12598:	1fff9490 	.word	0x1fff9490
   1259c:	1fff948c 	.word	0x1fff948c

000125a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
   125a0:	b500      	push	{lr}
   125a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   125a4:	f7ef f900 	bl	17a8 <Sys_GetCoreID>
   125a8:	4603      	mov	r3, r0
   125aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId])
   125ac:	4a10      	ldr	r2, [pc, #64]	; (125f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   125ae:	9b01      	ldr	r3, [sp, #4]
   125b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125b4:	2b00      	cmp	r3, #0
   125b6:	d10d      	bne.n	125d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   125b8:	f7ee f98a 	bl	8d0 <Adc_schm_read_msr>
   125bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   125be:	9b00      	ldr	r3, [sp, #0]
   125c0:	f003 0301 	and.w	r3, r3, #1
   125c4:	2b00      	cmp	r3, #0
   125c6:	d100      	bne.n	125ca <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   125c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_85[u32CoreId] = msr;
   125ca:	490a      	ldr	r1, [pc, #40]	; (125f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x54>)
   125cc:	9b01      	ldr	r3, [sp, #4]
   125ce:	9a00      	ldr	r2, [sp, #0]
   125d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]++;
   125d4:	4a06      	ldr	r2, [pc, #24]	; (125f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   125d6:	9b01      	ldr	r3, [sp, #4]
   125d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125dc:	1c5a      	adds	r2, r3, #1
   125de:	4904      	ldr	r1, [pc, #16]	; (125f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   125e0:	9b01      	ldr	r3, [sp, #4]
   125e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   125e6:	bf00      	nop
   125e8:	b003      	add	sp, #12
   125ea:	f85d fb04 	ldr.w	pc, [sp], #4
   125ee:	bf00      	nop
   125f0:	1fff9498 	.word	0x1fff9498
   125f4:	1fff9494 	.word	0x1fff9494

000125f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
   125f8:	b500      	push	{lr}
   125fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   125fc:	f7ef f8d4 	bl	17a8 <Sys_GetCoreID>
   12600:	4603      	mov	r3, r0
   12602:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]--;
   12604:	4a0d      	ldr	r2, [pc, #52]	; (1263c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   12606:	9b01      	ldr	r3, [sp, #4]
   12608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1260c:	1e5a      	subs	r2, r3, #1
   1260e:	490b      	ldr	r1, [pc, #44]	; (1263c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   12610:	9b01      	ldr	r3, [sp, #4]
   12612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_85[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]))         /*if interrupts were enabled*/
   12616:	4a0a      	ldr	r2, [pc, #40]	; (12640 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x48>)
   12618:	9b01      	ldr	r3, [sp, #4]
   1261a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1261e:	f003 0301 	and.w	r3, r3, #1
   12622:	2b00      	cmp	r3, #0
   12624:	d106      	bne.n	12634 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
   12626:	4a05      	ldr	r2, [pc, #20]	; (1263c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   12628:	9b01      	ldr	r3, [sp, #4]
   1262a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1262e:	2b00      	cmp	r3, #0
   12630:	d100      	bne.n	12634 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12632:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12634:	bf00      	nop
   12636:	b003      	add	sp, #12
   12638:	f85d fb04 	ldr.w	pc, [sp], #4
   1263c:	1fff9498 	.word	0x1fff9498
   12640:	1fff9494 	.word	0x1fff9494

00012644 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
   12644:	b500      	push	{lr}
   12646:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12648:	f7ef f8ae 	bl	17a8 <Sys_GetCoreID>
   1264c:	4603      	mov	r3, r0
   1264e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId])
   12650:	4a10      	ldr	r2, [pc, #64]	; (12694 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   12652:	9b01      	ldr	r3, [sp, #4]
   12654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12658:	2b00      	cmp	r3, #0
   1265a:	d10d      	bne.n	12678 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1265c:	f7ee f938 	bl	8d0 <Adc_schm_read_msr>
   12660:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12662:	9b00      	ldr	r3, [sp, #0]
   12664:	f003 0301 	and.w	r3, r3, #1
   12668:	2b00      	cmp	r3, #0
   1266a:	d100      	bne.n	1266e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1266c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_86[u32CoreId] = msr;
   1266e:	490a      	ldr	r1, [pc, #40]	; (12698 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x54>)
   12670:	9b01      	ldr	r3, [sp, #4]
   12672:	9a00      	ldr	r2, [sp, #0]
   12674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]++;
   12678:	4a06      	ldr	r2, [pc, #24]	; (12694 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   1267a:	9b01      	ldr	r3, [sp, #4]
   1267c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12680:	1c5a      	adds	r2, r3, #1
   12682:	4904      	ldr	r1, [pc, #16]	; (12694 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   12684:	9b01      	ldr	r3, [sp, #4]
   12686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1268a:	bf00      	nop
   1268c:	b003      	add	sp, #12
   1268e:	f85d fb04 	ldr.w	pc, [sp], #4
   12692:	bf00      	nop
   12694:	1fff94a0 	.word	0x1fff94a0
   12698:	1fff949c 	.word	0x1fff949c

0001269c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
   1269c:	b500      	push	{lr}
   1269e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   126a0:	f7ef f882 	bl	17a8 <Sys_GetCoreID>
   126a4:	4603      	mov	r3, r0
   126a6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]--;
   126a8:	4a0d      	ldr	r2, [pc, #52]	; (126e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   126aa:	9b01      	ldr	r3, [sp, #4]
   126ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126b0:	1e5a      	subs	r2, r3, #1
   126b2:	490b      	ldr	r1, [pc, #44]	; (126e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   126b4:	9b01      	ldr	r3, [sp, #4]
   126b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_86[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]))         /*if interrupts were enabled*/
   126ba:	4a0a      	ldr	r2, [pc, #40]	; (126e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x48>)
   126bc:	9b01      	ldr	r3, [sp, #4]
   126be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126c2:	f003 0301 	and.w	r3, r3, #1
   126c6:	2b00      	cmp	r3, #0
   126c8:	d106      	bne.n	126d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
   126ca:	4a05      	ldr	r2, [pc, #20]	; (126e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   126cc:	9b01      	ldr	r3, [sp, #4]
   126ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126d2:	2b00      	cmp	r3, #0
   126d4:	d100      	bne.n	126d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   126d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   126d8:	bf00      	nop
   126da:	b003      	add	sp, #12
   126dc:	f85d fb04 	ldr.w	pc, [sp], #4
   126e0:	1fff94a0 	.word	0x1fff94a0
   126e4:	1fff949c 	.word	0x1fff949c

000126e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
   126e8:	b500      	push	{lr}
   126ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   126ec:	f7ef f85c 	bl	17a8 <Sys_GetCoreID>
   126f0:	4603      	mov	r3, r0
   126f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId])
   126f4:	4a10      	ldr	r2, [pc, #64]	; (12738 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   126f6:	9b01      	ldr	r3, [sp, #4]
   126f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126fc:	2b00      	cmp	r3, #0
   126fe:	d10d      	bne.n	1271c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12700:	f7ee f8e6 	bl	8d0 <Adc_schm_read_msr>
   12704:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12706:	9b00      	ldr	r3, [sp, #0]
   12708:	f003 0301 	and.w	r3, r3, #1
   1270c:	2b00      	cmp	r3, #0
   1270e:	d100      	bne.n	12712 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12710:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_87[u32CoreId] = msr;
   12712:	490a      	ldr	r1, [pc, #40]	; (1273c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x54>)
   12714:	9b01      	ldr	r3, [sp, #4]
   12716:	9a00      	ldr	r2, [sp, #0]
   12718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]++;
   1271c:	4a06      	ldr	r2, [pc, #24]	; (12738 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   1271e:	9b01      	ldr	r3, [sp, #4]
   12720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12724:	1c5a      	adds	r2, r3, #1
   12726:	4904      	ldr	r1, [pc, #16]	; (12738 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   12728:	9b01      	ldr	r3, [sp, #4]
   1272a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1272e:	bf00      	nop
   12730:	b003      	add	sp, #12
   12732:	f85d fb04 	ldr.w	pc, [sp], #4
   12736:	bf00      	nop
   12738:	1fff94a8 	.word	0x1fff94a8
   1273c:	1fff94a4 	.word	0x1fff94a4

00012740 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
   12740:	b500      	push	{lr}
   12742:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12744:	f7ef f830 	bl	17a8 <Sys_GetCoreID>
   12748:	4603      	mov	r3, r0
   1274a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]--;
   1274c:	4a0d      	ldr	r2, [pc, #52]	; (12784 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   1274e:	9b01      	ldr	r3, [sp, #4]
   12750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12754:	1e5a      	subs	r2, r3, #1
   12756:	490b      	ldr	r1, [pc, #44]	; (12784 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   12758:	9b01      	ldr	r3, [sp, #4]
   1275a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_87[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]))         /*if interrupts were enabled*/
   1275e:	4a0a      	ldr	r2, [pc, #40]	; (12788 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x48>)
   12760:	9b01      	ldr	r3, [sp, #4]
   12762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12766:	f003 0301 	and.w	r3, r3, #1
   1276a:	2b00      	cmp	r3, #0
   1276c:	d106      	bne.n	1277c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
   1276e:	4a05      	ldr	r2, [pc, #20]	; (12784 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   12770:	9b01      	ldr	r3, [sp, #4]
   12772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12776:	2b00      	cmp	r3, #0
   12778:	d100      	bne.n	1277c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1277a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1277c:	bf00      	nop
   1277e:	b003      	add	sp, #12
   12780:	f85d fb04 	ldr.w	pc, [sp], #4
   12784:	1fff94a8 	.word	0x1fff94a8
   12788:	1fff94a4 	.word	0x1fff94a4

0001278c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
   1278c:	b500      	push	{lr}
   1278e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12790:	f7ef f80a 	bl	17a8 <Sys_GetCoreID>
   12794:	4603      	mov	r3, r0
   12796:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId])
   12798:	4a10      	ldr	r2, [pc, #64]	; (127dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   1279a:	9b01      	ldr	r3, [sp, #4]
   1279c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127a0:	2b00      	cmp	r3, #0
   127a2:	d10d      	bne.n	127c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   127a4:	f7ee f894 	bl	8d0 <Adc_schm_read_msr>
   127a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   127aa:	9b00      	ldr	r3, [sp, #0]
   127ac:	f003 0301 	and.w	r3, r3, #1
   127b0:	2b00      	cmp	r3, #0
   127b2:	d100      	bne.n	127b6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   127b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_88[u32CoreId] = msr;
   127b6:	490a      	ldr	r1, [pc, #40]	; (127e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x54>)
   127b8:	9b01      	ldr	r3, [sp, #4]
   127ba:	9a00      	ldr	r2, [sp, #0]
   127bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]++;
   127c0:	4a06      	ldr	r2, [pc, #24]	; (127dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   127c2:	9b01      	ldr	r3, [sp, #4]
   127c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127c8:	1c5a      	adds	r2, r3, #1
   127ca:	4904      	ldr	r1, [pc, #16]	; (127dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   127cc:	9b01      	ldr	r3, [sp, #4]
   127ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   127d2:	bf00      	nop
   127d4:	b003      	add	sp, #12
   127d6:	f85d fb04 	ldr.w	pc, [sp], #4
   127da:	bf00      	nop
   127dc:	1fff94b0 	.word	0x1fff94b0
   127e0:	1fff94ac 	.word	0x1fff94ac

000127e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
   127e4:	b500      	push	{lr}
   127e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   127e8:	f7ee ffde 	bl	17a8 <Sys_GetCoreID>
   127ec:	4603      	mov	r3, r0
   127ee:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]--;
   127f0:	4a0d      	ldr	r2, [pc, #52]	; (12828 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   127f2:	9b01      	ldr	r3, [sp, #4]
   127f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127f8:	1e5a      	subs	r2, r3, #1
   127fa:	490b      	ldr	r1, [pc, #44]	; (12828 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   127fc:	9b01      	ldr	r3, [sp, #4]
   127fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_88[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]))         /*if interrupts were enabled*/
   12802:	4a0a      	ldr	r2, [pc, #40]	; (1282c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x48>)
   12804:	9b01      	ldr	r3, [sp, #4]
   12806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1280a:	f003 0301 	and.w	r3, r3, #1
   1280e:	2b00      	cmp	r3, #0
   12810:	d106      	bne.n	12820 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
   12812:	4a05      	ldr	r2, [pc, #20]	; (12828 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   12814:	9b01      	ldr	r3, [sp, #4]
   12816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1281a:	2b00      	cmp	r3, #0
   1281c:	d100      	bne.n	12820 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1281e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12820:	bf00      	nop
   12822:	b003      	add	sp, #12
   12824:	f85d fb04 	ldr.w	pc, [sp], #4
   12828:	1fff94b0 	.word	0x1fff94b0
   1282c:	1fff94ac 	.word	0x1fff94ac

00012830 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
   12830:	b500      	push	{lr}
   12832:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12834:	f7ee ffb8 	bl	17a8 <Sys_GetCoreID>
   12838:	4603      	mov	r3, r0
   1283a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId])
   1283c:	4a10      	ldr	r2, [pc, #64]	; (12880 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   1283e:	9b01      	ldr	r3, [sp, #4]
   12840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12844:	2b00      	cmp	r3, #0
   12846:	d10d      	bne.n	12864 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12848:	f7ee f842 	bl	8d0 <Adc_schm_read_msr>
   1284c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1284e:	9b00      	ldr	r3, [sp, #0]
   12850:	f003 0301 	and.w	r3, r3, #1
   12854:	2b00      	cmp	r3, #0
   12856:	d100      	bne.n	1285a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12858:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_89[u32CoreId] = msr;
   1285a:	490a      	ldr	r1, [pc, #40]	; (12884 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x54>)
   1285c:	9b01      	ldr	r3, [sp, #4]
   1285e:	9a00      	ldr	r2, [sp, #0]
   12860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]++;
   12864:	4a06      	ldr	r2, [pc, #24]	; (12880 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   12866:	9b01      	ldr	r3, [sp, #4]
   12868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1286c:	1c5a      	adds	r2, r3, #1
   1286e:	4904      	ldr	r1, [pc, #16]	; (12880 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   12870:	9b01      	ldr	r3, [sp, #4]
   12872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12876:	bf00      	nop
   12878:	b003      	add	sp, #12
   1287a:	f85d fb04 	ldr.w	pc, [sp], #4
   1287e:	bf00      	nop
   12880:	1fff94b8 	.word	0x1fff94b8
   12884:	1fff94b4 	.word	0x1fff94b4

00012888 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
   12888:	b500      	push	{lr}
   1288a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1288c:	f7ee ff8c 	bl	17a8 <Sys_GetCoreID>
   12890:	4603      	mov	r3, r0
   12892:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]--;
   12894:	4a0d      	ldr	r2, [pc, #52]	; (128cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   12896:	9b01      	ldr	r3, [sp, #4]
   12898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1289c:	1e5a      	subs	r2, r3, #1
   1289e:	490b      	ldr	r1, [pc, #44]	; (128cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   128a0:	9b01      	ldr	r3, [sp, #4]
   128a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_89[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]))         /*if interrupts were enabled*/
   128a6:	4a0a      	ldr	r2, [pc, #40]	; (128d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x48>)
   128a8:	9b01      	ldr	r3, [sp, #4]
   128aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128ae:	f003 0301 	and.w	r3, r3, #1
   128b2:	2b00      	cmp	r3, #0
   128b4:	d106      	bne.n	128c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
   128b6:	4a05      	ldr	r2, [pc, #20]	; (128cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   128b8:	9b01      	ldr	r3, [sp, #4]
   128ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128be:	2b00      	cmp	r3, #0
   128c0:	d100      	bne.n	128c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   128c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   128c4:	bf00      	nop
   128c6:	b003      	add	sp, #12
   128c8:	f85d fb04 	ldr.w	pc, [sp], #4
   128cc:	1fff94b8 	.word	0x1fff94b8
   128d0:	1fff94b4 	.word	0x1fff94b4

000128d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
   128d4:	b500      	push	{lr}
   128d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   128d8:	f7ee ff66 	bl	17a8 <Sys_GetCoreID>
   128dc:	4603      	mov	r3, r0
   128de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId])
   128e0:	4a10      	ldr	r2, [pc, #64]	; (12924 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   128e2:	9b01      	ldr	r3, [sp, #4]
   128e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128e8:	2b00      	cmp	r3, #0
   128ea:	d10d      	bne.n	12908 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   128ec:	f7ed fff0 	bl	8d0 <Adc_schm_read_msr>
   128f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   128f2:	9b00      	ldr	r3, [sp, #0]
   128f4:	f003 0301 	and.w	r3, r3, #1
   128f8:	2b00      	cmp	r3, #0
   128fa:	d100      	bne.n	128fe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   128fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_90[u32CoreId] = msr;
   128fe:	490a      	ldr	r1, [pc, #40]	; (12928 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x54>)
   12900:	9b01      	ldr	r3, [sp, #4]
   12902:	9a00      	ldr	r2, [sp, #0]
   12904:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]++;
   12908:	4a06      	ldr	r2, [pc, #24]	; (12924 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   1290a:	9b01      	ldr	r3, [sp, #4]
   1290c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12910:	1c5a      	adds	r2, r3, #1
   12912:	4904      	ldr	r1, [pc, #16]	; (12924 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   12914:	9b01      	ldr	r3, [sp, #4]
   12916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1291a:	bf00      	nop
   1291c:	b003      	add	sp, #12
   1291e:	f85d fb04 	ldr.w	pc, [sp], #4
   12922:	bf00      	nop
   12924:	1fff94c0 	.word	0x1fff94c0
   12928:	1fff94bc 	.word	0x1fff94bc

0001292c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
   1292c:	b500      	push	{lr}
   1292e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12930:	f7ee ff3a 	bl	17a8 <Sys_GetCoreID>
   12934:	4603      	mov	r3, r0
   12936:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]--;
   12938:	4a0d      	ldr	r2, [pc, #52]	; (12970 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   1293a:	9b01      	ldr	r3, [sp, #4]
   1293c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12940:	1e5a      	subs	r2, r3, #1
   12942:	490b      	ldr	r1, [pc, #44]	; (12970 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   12944:	9b01      	ldr	r3, [sp, #4]
   12946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_90[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]))         /*if interrupts were enabled*/
   1294a:	4a0a      	ldr	r2, [pc, #40]	; (12974 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x48>)
   1294c:	9b01      	ldr	r3, [sp, #4]
   1294e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12952:	f003 0301 	and.w	r3, r3, #1
   12956:	2b00      	cmp	r3, #0
   12958:	d106      	bne.n	12968 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
   1295a:	4a05      	ldr	r2, [pc, #20]	; (12970 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   1295c:	9b01      	ldr	r3, [sp, #4]
   1295e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12962:	2b00      	cmp	r3, #0
   12964:	d100      	bne.n	12968 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12966:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12968:	bf00      	nop
   1296a:	b003      	add	sp, #12
   1296c:	f85d fb04 	ldr.w	pc, [sp], #4
   12970:	1fff94c0 	.word	0x1fff94c0
   12974:	1fff94bc 	.word	0x1fff94bc

00012978 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
   12978:	b500      	push	{lr}
   1297a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1297c:	f7ee ff14 	bl	17a8 <Sys_GetCoreID>
   12980:	4603      	mov	r3, r0
   12982:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId])
   12984:	4a10      	ldr	r2, [pc, #64]	; (129c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   12986:	9b01      	ldr	r3, [sp, #4]
   12988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1298c:	2b00      	cmp	r3, #0
   1298e:	d10d      	bne.n	129ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12990:	f7ed ff9e 	bl	8d0 <Adc_schm_read_msr>
   12994:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12996:	9b00      	ldr	r3, [sp, #0]
   12998:	f003 0301 	and.w	r3, r3, #1
   1299c:	2b00      	cmp	r3, #0
   1299e:	d100      	bne.n	129a2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   129a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_91[u32CoreId] = msr;
   129a2:	490a      	ldr	r1, [pc, #40]	; (129cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x54>)
   129a4:	9b01      	ldr	r3, [sp, #4]
   129a6:	9a00      	ldr	r2, [sp, #0]
   129a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]++;
   129ac:	4a06      	ldr	r2, [pc, #24]	; (129c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   129ae:	9b01      	ldr	r3, [sp, #4]
   129b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129b4:	1c5a      	adds	r2, r3, #1
   129b6:	4904      	ldr	r1, [pc, #16]	; (129c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   129b8:	9b01      	ldr	r3, [sp, #4]
   129ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   129be:	bf00      	nop
   129c0:	b003      	add	sp, #12
   129c2:	f85d fb04 	ldr.w	pc, [sp], #4
   129c6:	bf00      	nop
   129c8:	1fff94c8 	.word	0x1fff94c8
   129cc:	1fff94c4 	.word	0x1fff94c4

000129d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
   129d0:	b500      	push	{lr}
   129d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   129d4:	f7ee fee8 	bl	17a8 <Sys_GetCoreID>
   129d8:	4603      	mov	r3, r0
   129da:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]--;
   129dc:	4a0d      	ldr	r2, [pc, #52]	; (12a14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   129de:	9b01      	ldr	r3, [sp, #4]
   129e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129e4:	1e5a      	subs	r2, r3, #1
   129e6:	490b      	ldr	r1, [pc, #44]	; (12a14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   129e8:	9b01      	ldr	r3, [sp, #4]
   129ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_91[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]))         /*if interrupts were enabled*/
   129ee:	4a0a      	ldr	r2, [pc, #40]	; (12a18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x48>)
   129f0:	9b01      	ldr	r3, [sp, #4]
   129f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129f6:	f003 0301 	and.w	r3, r3, #1
   129fa:	2b00      	cmp	r3, #0
   129fc:	d106      	bne.n	12a0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
   129fe:	4a05      	ldr	r2, [pc, #20]	; (12a14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   12a00:	9b01      	ldr	r3, [sp, #4]
   12a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a06:	2b00      	cmp	r3, #0
   12a08:	d100      	bne.n	12a0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12a0a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12a0c:	bf00      	nop
   12a0e:	b003      	add	sp, #12
   12a10:	f85d fb04 	ldr.w	pc, [sp], #4
   12a14:	1fff94c8 	.word	0x1fff94c8
   12a18:	1fff94c4 	.word	0x1fff94c4

00012a1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
   12a1c:	b500      	push	{lr}
   12a1e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12a20:	f7ee fec2 	bl	17a8 <Sys_GetCoreID>
   12a24:	4603      	mov	r3, r0
   12a26:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId])
   12a28:	4a10      	ldr	r2, [pc, #64]	; (12a6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   12a2a:	9b01      	ldr	r3, [sp, #4]
   12a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a30:	2b00      	cmp	r3, #0
   12a32:	d10d      	bne.n	12a50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12a34:	f7ed ff4c 	bl	8d0 <Adc_schm_read_msr>
   12a38:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12a3a:	9b00      	ldr	r3, [sp, #0]
   12a3c:	f003 0301 	and.w	r3, r3, #1
   12a40:	2b00      	cmp	r3, #0
   12a42:	d100      	bne.n	12a46 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12a44:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_92[u32CoreId] = msr;
   12a46:	490a      	ldr	r1, [pc, #40]	; (12a70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x54>)
   12a48:	9b01      	ldr	r3, [sp, #4]
   12a4a:	9a00      	ldr	r2, [sp, #0]
   12a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]++;
   12a50:	4a06      	ldr	r2, [pc, #24]	; (12a6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   12a52:	9b01      	ldr	r3, [sp, #4]
   12a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a58:	1c5a      	adds	r2, r3, #1
   12a5a:	4904      	ldr	r1, [pc, #16]	; (12a6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   12a5c:	9b01      	ldr	r3, [sp, #4]
   12a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12a62:	bf00      	nop
   12a64:	b003      	add	sp, #12
   12a66:	f85d fb04 	ldr.w	pc, [sp], #4
   12a6a:	bf00      	nop
   12a6c:	1fff94d0 	.word	0x1fff94d0
   12a70:	1fff94cc 	.word	0x1fff94cc

00012a74 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
   12a74:	b500      	push	{lr}
   12a76:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12a78:	f7ee fe96 	bl	17a8 <Sys_GetCoreID>
   12a7c:	4603      	mov	r3, r0
   12a7e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]--;
   12a80:	4a0d      	ldr	r2, [pc, #52]	; (12ab8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   12a82:	9b01      	ldr	r3, [sp, #4]
   12a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a88:	1e5a      	subs	r2, r3, #1
   12a8a:	490b      	ldr	r1, [pc, #44]	; (12ab8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   12a8c:	9b01      	ldr	r3, [sp, #4]
   12a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_92[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]))         /*if interrupts were enabled*/
   12a92:	4a0a      	ldr	r2, [pc, #40]	; (12abc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x48>)
   12a94:	9b01      	ldr	r3, [sp, #4]
   12a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a9a:	f003 0301 	and.w	r3, r3, #1
   12a9e:	2b00      	cmp	r3, #0
   12aa0:	d106      	bne.n	12ab0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
   12aa2:	4a05      	ldr	r2, [pc, #20]	; (12ab8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   12aa4:	9b01      	ldr	r3, [sp, #4]
   12aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12aaa:	2b00      	cmp	r3, #0
   12aac:	d100      	bne.n	12ab0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12aae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12ab0:	bf00      	nop
   12ab2:	b003      	add	sp, #12
   12ab4:	f85d fb04 	ldr.w	pc, [sp], #4
   12ab8:	1fff94d0 	.word	0x1fff94d0
   12abc:	1fff94cc 	.word	0x1fff94cc

00012ac0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
   12ac0:	b500      	push	{lr}
   12ac2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12ac4:	f7ee fe70 	bl	17a8 <Sys_GetCoreID>
   12ac8:	4603      	mov	r3, r0
   12aca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId])
   12acc:	4a10      	ldr	r2, [pc, #64]	; (12b10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   12ace:	9b01      	ldr	r3, [sp, #4]
   12ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ad4:	2b00      	cmp	r3, #0
   12ad6:	d10d      	bne.n	12af4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12ad8:	f7ed fefa 	bl	8d0 <Adc_schm_read_msr>
   12adc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12ade:	9b00      	ldr	r3, [sp, #0]
   12ae0:	f003 0301 	and.w	r3, r3, #1
   12ae4:	2b00      	cmp	r3, #0
   12ae6:	d100      	bne.n	12aea <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12ae8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_93[u32CoreId] = msr;
   12aea:	490a      	ldr	r1, [pc, #40]	; (12b14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x54>)
   12aec:	9b01      	ldr	r3, [sp, #4]
   12aee:	9a00      	ldr	r2, [sp, #0]
   12af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]++;
   12af4:	4a06      	ldr	r2, [pc, #24]	; (12b10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   12af6:	9b01      	ldr	r3, [sp, #4]
   12af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12afc:	1c5a      	adds	r2, r3, #1
   12afe:	4904      	ldr	r1, [pc, #16]	; (12b10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   12b00:	9b01      	ldr	r3, [sp, #4]
   12b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12b06:	bf00      	nop
   12b08:	b003      	add	sp, #12
   12b0a:	f85d fb04 	ldr.w	pc, [sp], #4
   12b0e:	bf00      	nop
   12b10:	1fff94d8 	.word	0x1fff94d8
   12b14:	1fff94d4 	.word	0x1fff94d4

00012b18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
   12b18:	b500      	push	{lr}
   12b1a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12b1c:	f7ee fe44 	bl	17a8 <Sys_GetCoreID>
   12b20:	4603      	mov	r3, r0
   12b22:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]--;
   12b24:	4a0d      	ldr	r2, [pc, #52]	; (12b5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   12b26:	9b01      	ldr	r3, [sp, #4]
   12b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b2c:	1e5a      	subs	r2, r3, #1
   12b2e:	490b      	ldr	r1, [pc, #44]	; (12b5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   12b30:	9b01      	ldr	r3, [sp, #4]
   12b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_93[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]))         /*if interrupts were enabled*/
   12b36:	4a0a      	ldr	r2, [pc, #40]	; (12b60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x48>)
   12b38:	9b01      	ldr	r3, [sp, #4]
   12b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b3e:	f003 0301 	and.w	r3, r3, #1
   12b42:	2b00      	cmp	r3, #0
   12b44:	d106      	bne.n	12b54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
   12b46:	4a05      	ldr	r2, [pc, #20]	; (12b5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   12b48:	9b01      	ldr	r3, [sp, #4]
   12b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b4e:	2b00      	cmp	r3, #0
   12b50:	d100      	bne.n	12b54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12b52:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12b54:	bf00      	nop
   12b56:	b003      	add	sp, #12
   12b58:	f85d fb04 	ldr.w	pc, [sp], #4
   12b5c:	1fff94d8 	.word	0x1fff94d8
   12b60:	1fff94d4 	.word	0x1fff94d4

00012b64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
   12b64:	b500      	push	{lr}
   12b66:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12b68:	f7ee fe1e 	bl	17a8 <Sys_GetCoreID>
   12b6c:	4603      	mov	r3, r0
   12b6e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId])
   12b70:	4a10      	ldr	r2, [pc, #64]	; (12bb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   12b72:	9b01      	ldr	r3, [sp, #4]
   12b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b78:	2b00      	cmp	r3, #0
   12b7a:	d10d      	bne.n	12b98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12b7c:	f7ed fea8 	bl	8d0 <Adc_schm_read_msr>
   12b80:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12b82:	9b00      	ldr	r3, [sp, #0]
   12b84:	f003 0301 	and.w	r3, r3, #1
   12b88:	2b00      	cmp	r3, #0
   12b8a:	d100      	bne.n	12b8e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12b8c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_94[u32CoreId] = msr;
   12b8e:	490a      	ldr	r1, [pc, #40]	; (12bb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x54>)
   12b90:	9b01      	ldr	r3, [sp, #4]
   12b92:	9a00      	ldr	r2, [sp, #0]
   12b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]++;
   12b98:	4a06      	ldr	r2, [pc, #24]	; (12bb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   12b9a:	9b01      	ldr	r3, [sp, #4]
   12b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ba0:	1c5a      	adds	r2, r3, #1
   12ba2:	4904      	ldr	r1, [pc, #16]	; (12bb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   12ba4:	9b01      	ldr	r3, [sp, #4]
   12ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12baa:	bf00      	nop
   12bac:	b003      	add	sp, #12
   12bae:	f85d fb04 	ldr.w	pc, [sp], #4
   12bb2:	bf00      	nop
   12bb4:	1fff94e0 	.word	0x1fff94e0
   12bb8:	1fff94dc 	.word	0x1fff94dc

00012bbc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
   12bbc:	b500      	push	{lr}
   12bbe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12bc0:	f7ee fdf2 	bl	17a8 <Sys_GetCoreID>
   12bc4:	4603      	mov	r3, r0
   12bc6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]--;
   12bc8:	4a0d      	ldr	r2, [pc, #52]	; (12c00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   12bca:	9b01      	ldr	r3, [sp, #4]
   12bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bd0:	1e5a      	subs	r2, r3, #1
   12bd2:	490b      	ldr	r1, [pc, #44]	; (12c00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   12bd4:	9b01      	ldr	r3, [sp, #4]
   12bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_94[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]))         /*if interrupts were enabled*/
   12bda:	4a0a      	ldr	r2, [pc, #40]	; (12c04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x48>)
   12bdc:	9b01      	ldr	r3, [sp, #4]
   12bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12be2:	f003 0301 	and.w	r3, r3, #1
   12be6:	2b00      	cmp	r3, #0
   12be8:	d106      	bne.n	12bf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
   12bea:	4a05      	ldr	r2, [pc, #20]	; (12c00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   12bec:	9b01      	ldr	r3, [sp, #4]
   12bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bf2:	2b00      	cmp	r3, #0
   12bf4:	d100      	bne.n	12bf8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12bf6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12bf8:	bf00      	nop
   12bfa:	b003      	add	sp, #12
   12bfc:	f85d fb04 	ldr.w	pc, [sp], #4
   12c00:	1fff94e0 	.word	0x1fff94e0
   12c04:	1fff94dc 	.word	0x1fff94dc

00012c08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
   12c08:	b500      	push	{lr}
   12c0a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12c0c:	f7ee fdcc 	bl	17a8 <Sys_GetCoreID>
   12c10:	4603      	mov	r3, r0
   12c12:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId])
   12c14:	4a10      	ldr	r2, [pc, #64]	; (12c58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   12c16:	9b01      	ldr	r3, [sp, #4]
   12c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c1c:	2b00      	cmp	r3, #0
   12c1e:	d10d      	bne.n	12c3c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12c20:	f7ed fe56 	bl	8d0 <Adc_schm_read_msr>
   12c24:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12c26:	9b00      	ldr	r3, [sp, #0]
   12c28:	f003 0301 	and.w	r3, r3, #1
   12c2c:	2b00      	cmp	r3, #0
   12c2e:	d100      	bne.n	12c32 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12c30:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_95[u32CoreId] = msr;
   12c32:	490a      	ldr	r1, [pc, #40]	; (12c5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x54>)
   12c34:	9b01      	ldr	r3, [sp, #4]
   12c36:	9a00      	ldr	r2, [sp, #0]
   12c38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]++;
   12c3c:	4a06      	ldr	r2, [pc, #24]	; (12c58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   12c3e:	9b01      	ldr	r3, [sp, #4]
   12c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c44:	1c5a      	adds	r2, r3, #1
   12c46:	4904      	ldr	r1, [pc, #16]	; (12c58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   12c48:	9b01      	ldr	r3, [sp, #4]
   12c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12c4e:	bf00      	nop
   12c50:	b003      	add	sp, #12
   12c52:	f85d fb04 	ldr.w	pc, [sp], #4
   12c56:	bf00      	nop
   12c58:	1fff94e8 	.word	0x1fff94e8
   12c5c:	1fff94e4 	.word	0x1fff94e4

00012c60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
   12c60:	b500      	push	{lr}
   12c62:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12c64:	f7ee fda0 	bl	17a8 <Sys_GetCoreID>
   12c68:	4603      	mov	r3, r0
   12c6a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]--;
   12c6c:	4a0d      	ldr	r2, [pc, #52]	; (12ca4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   12c6e:	9b01      	ldr	r3, [sp, #4]
   12c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c74:	1e5a      	subs	r2, r3, #1
   12c76:	490b      	ldr	r1, [pc, #44]	; (12ca4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   12c78:	9b01      	ldr	r3, [sp, #4]
   12c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_95[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]))         /*if interrupts were enabled*/
   12c7e:	4a0a      	ldr	r2, [pc, #40]	; (12ca8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x48>)
   12c80:	9b01      	ldr	r3, [sp, #4]
   12c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c86:	f003 0301 	and.w	r3, r3, #1
   12c8a:	2b00      	cmp	r3, #0
   12c8c:	d106      	bne.n	12c9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
   12c8e:	4a05      	ldr	r2, [pc, #20]	; (12ca4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   12c90:	9b01      	ldr	r3, [sp, #4]
   12c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c96:	2b00      	cmp	r3, #0
   12c98:	d100      	bne.n	12c9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12c9a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12c9c:	bf00      	nop
   12c9e:	b003      	add	sp, #12
   12ca0:	f85d fb04 	ldr.w	pc, [sp], #4
   12ca4:	1fff94e8 	.word	0x1fff94e8
   12ca8:	1fff94e4 	.word	0x1fff94e4

00012cac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
   12cac:	b500      	push	{lr}
   12cae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12cb0:	f7ee fd7a 	bl	17a8 <Sys_GetCoreID>
   12cb4:	4603      	mov	r3, r0
   12cb6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId])
   12cb8:	4a10      	ldr	r2, [pc, #64]	; (12cfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   12cba:	9b01      	ldr	r3, [sp, #4]
   12cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12cc0:	2b00      	cmp	r3, #0
   12cc2:	d10d      	bne.n	12ce0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12cc4:	f7ed fe04 	bl	8d0 <Adc_schm_read_msr>
   12cc8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12cca:	9b00      	ldr	r3, [sp, #0]
   12ccc:	f003 0301 	and.w	r3, r3, #1
   12cd0:	2b00      	cmp	r3, #0
   12cd2:	d100      	bne.n	12cd6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12cd4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_96[u32CoreId] = msr;
   12cd6:	490a      	ldr	r1, [pc, #40]	; (12d00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x54>)
   12cd8:	9b01      	ldr	r3, [sp, #4]
   12cda:	9a00      	ldr	r2, [sp, #0]
   12cdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]++;
   12ce0:	4a06      	ldr	r2, [pc, #24]	; (12cfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   12ce2:	9b01      	ldr	r3, [sp, #4]
   12ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ce8:	1c5a      	adds	r2, r3, #1
   12cea:	4904      	ldr	r1, [pc, #16]	; (12cfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   12cec:	9b01      	ldr	r3, [sp, #4]
   12cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12cf2:	bf00      	nop
   12cf4:	b003      	add	sp, #12
   12cf6:	f85d fb04 	ldr.w	pc, [sp], #4
   12cfa:	bf00      	nop
   12cfc:	1fff94f0 	.word	0x1fff94f0
   12d00:	1fff94ec 	.word	0x1fff94ec

00012d04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
   12d04:	b500      	push	{lr}
   12d06:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12d08:	f7ee fd4e 	bl	17a8 <Sys_GetCoreID>
   12d0c:	4603      	mov	r3, r0
   12d0e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]--;
   12d10:	4a0d      	ldr	r2, [pc, #52]	; (12d48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   12d12:	9b01      	ldr	r3, [sp, #4]
   12d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d18:	1e5a      	subs	r2, r3, #1
   12d1a:	490b      	ldr	r1, [pc, #44]	; (12d48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   12d1c:	9b01      	ldr	r3, [sp, #4]
   12d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_96[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]))         /*if interrupts were enabled*/
   12d22:	4a0a      	ldr	r2, [pc, #40]	; (12d4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x48>)
   12d24:	9b01      	ldr	r3, [sp, #4]
   12d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d2a:	f003 0301 	and.w	r3, r3, #1
   12d2e:	2b00      	cmp	r3, #0
   12d30:	d106      	bne.n	12d40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
   12d32:	4a05      	ldr	r2, [pc, #20]	; (12d48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   12d34:	9b01      	ldr	r3, [sp, #4]
   12d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d3a:	2b00      	cmp	r3, #0
   12d3c:	d100      	bne.n	12d40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12d3e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12d40:	bf00      	nop
   12d42:	b003      	add	sp, #12
   12d44:	f85d fb04 	ldr.w	pc, [sp], #4
   12d48:	1fff94f0 	.word	0x1fff94f0
   12d4c:	1fff94ec 	.word	0x1fff94ec

00012d50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
   12d50:	b500      	push	{lr}
   12d52:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12d54:	f7ee fd28 	bl	17a8 <Sys_GetCoreID>
   12d58:	4603      	mov	r3, r0
   12d5a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId])
   12d5c:	4a10      	ldr	r2, [pc, #64]	; (12da0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   12d5e:	9b01      	ldr	r3, [sp, #4]
   12d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d64:	2b00      	cmp	r3, #0
   12d66:	d10d      	bne.n	12d84 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12d68:	f7ed fdb2 	bl	8d0 <Adc_schm_read_msr>
   12d6c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12d6e:	9b00      	ldr	r3, [sp, #0]
   12d70:	f003 0301 	and.w	r3, r3, #1
   12d74:	2b00      	cmp	r3, #0
   12d76:	d100      	bne.n	12d7a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12d78:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_97[u32CoreId] = msr;
   12d7a:	490a      	ldr	r1, [pc, #40]	; (12da4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x54>)
   12d7c:	9b01      	ldr	r3, [sp, #4]
   12d7e:	9a00      	ldr	r2, [sp, #0]
   12d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]++;
   12d84:	4a06      	ldr	r2, [pc, #24]	; (12da0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   12d86:	9b01      	ldr	r3, [sp, #4]
   12d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d8c:	1c5a      	adds	r2, r3, #1
   12d8e:	4904      	ldr	r1, [pc, #16]	; (12da0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   12d90:	9b01      	ldr	r3, [sp, #4]
   12d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12d96:	bf00      	nop
   12d98:	b003      	add	sp, #12
   12d9a:	f85d fb04 	ldr.w	pc, [sp], #4
   12d9e:	bf00      	nop
   12da0:	1fff94f8 	.word	0x1fff94f8
   12da4:	1fff94f4 	.word	0x1fff94f4

00012da8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
   12da8:	b500      	push	{lr}
   12daa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12dac:	f7ee fcfc 	bl	17a8 <Sys_GetCoreID>
   12db0:	4603      	mov	r3, r0
   12db2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]--;
   12db4:	4a0d      	ldr	r2, [pc, #52]	; (12dec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   12db6:	9b01      	ldr	r3, [sp, #4]
   12db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12dbc:	1e5a      	subs	r2, r3, #1
   12dbe:	490b      	ldr	r1, [pc, #44]	; (12dec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   12dc0:	9b01      	ldr	r3, [sp, #4]
   12dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_97[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]))         /*if interrupts were enabled*/
   12dc6:	4a0a      	ldr	r2, [pc, #40]	; (12df0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x48>)
   12dc8:	9b01      	ldr	r3, [sp, #4]
   12dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12dce:	f003 0301 	and.w	r3, r3, #1
   12dd2:	2b00      	cmp	r3, #0
   12dd4:	d106      	bne.n	12de4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
   12dd6:	4a05      	ldr	r2, [pc, #20]	; (12dec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   12dd8:	9b01      	ldr	r3, [sp, #4]
   12dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12dde:	2b00      	cmp	r3, #0
   12de0:	d100      	bne.n	12de4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12de2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12de4:	bf00      	nop
   12de6:	b003      	add	sp, #12
   12de8:	f85d fb04 	ldr.w	pc, [sp], #4
   12dec:	1fff94f8 	.word	0x1fff94f8
   12df0:	1fff94f4 	.word	0x1fff94f4

00012df4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
   12df4:	b500      	push	{lr}
   12df6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12df8:	f7ee fcd6 	bl	17a8 <Sys_GetCoreID>
   12dfc:	4603      	mov	r3, r0
   12dfe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId])
   12e00:	4a10      	ldr	r2, [pc, #64]	; (12e44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   12e02:	9b01      	ldr	r3, [sp, #4]
   12e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e08:	2b00      	cmp	r3, #0
   12e0a:	d10d      	bne.n	12e28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12e0c:	f7ed fd60 	bl	8d0 <Adc_schm_read_msr>
   12e10:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12e12:	9b00      	ldr	r3, [sp, #0]
   12e14:	f003 0301 	and.w	r3, r3, #1
   12e18:	2b00      	cmp	r3, #0
   12e1a:	d100      	bne.n	12e1e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12e1c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_98[u32CoreId] = msr;
   12e1e:	490a      	ldr	r1, [pc, #40]	; (12e48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x54>)
   12e20:	9b01      	ldr	r3, [sp, #4]
   12e22:	9a00      	ldr	r2, [sp, #0]
   12e24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]++;
   12e28:	4a06      	ldr	r2, [pc, #24]	; (12e44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   12e2a:	9b01      	ldr	r3, [sp, #4]
   12e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e30:	1c5a      	adds	r2, r3, #1
   12e32:	4904      	ldr	r1, [pc, #16]	; (12e44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   12e34:	9b01      	ldr	r3, [sp, #4]
   12e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12e3a:	bf00      	nop
   12e3c:	b003      	add	sp, #12
   12e3e:	f85d fb04 	ldr.w	pc, [sp], #4
   12e42:	bf00      	nop
   12e44:	1fff9500 	.word	0x1fff9500
   12e48:	1fff94fc 	.word	0x1fff94fc

00012e4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
   12e4c:	b500      	push	{lr}
   12e4e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12e50:	f7ee fcaa 	bl	17a8 <Sys_GetCoreID>
   12e54:	4603      	mov	r3, r0
   12e56:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]--;
   12e58:	4a0d      	ldr	r2, [pc, #52]	; (12e90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   12e5a:	9b01      	ldr	r3, [sp, #4]
   12e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e60:	1e5a      	subs	r2, r3, #1
   12e62:	490b      	ldr	r1, [pc, #44]	; (12e90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   12e64:	9b01      	ldr	r3, [sp, #4]
   12e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_98[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]))         /*if interrupts were enabled*/
   12e6a:	4a0a      	ldr	r2, [pc, #40]	; (12e94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x48>)
   12e6c:	9b01      	ldr	r3, [sp, #4]
   12e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e72:	f003 0301 	and.w	r3, r3, #1
   12e76:	2b00      	cmp	r3, #0
   12e78:	d106      	bne.n	12e88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
   12e7a:	4a05      	ldr	r2, [pc, #20]	; (12e90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   12e7c:	9b01      	ldr	r3, [sp, #4]
   12e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e82:	2b00      	cmp	r3, #0
   12e84:	d100      	bne.n	12e88 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12e86:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12e88:	bf00      	nop
   12e8a:	b003      	add	sp, #12
   12e8c:	f85d fb04 	ldr.w	pc, [sp], #4
   12e90:	1fff9500 	.word	0x1fff9500
   12e94:	1fff94fc 	.word	0x1fff94fc

00012e98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
   12e98:	b500      	push	{lr}
   12e9a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12e9c:	f7ee fc84 	bl	17a8 <Sys_GetCoreID>
   12ea0:	4603      	mov	r3, r0
   12ea2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId])
   12ea4:	4a10      	ldr	r2, [pc, #64]	; (12ee8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   12ea6:	9b01      	ldr	r3, [sp, #4]
   12ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12eac:	2b00      	cmp	r3, #0
   12eae:	d10d      	bne.n	12ecc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12eb0:	f7ed fd0e 	bl	8d0 <Adc_schm_read_msr>
   12eb4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12eb6:	9b00      	ldr	r3, [sp, #0]
   12eb8:	f003 0301 	and.w	r3, r3, #1
   12ebc:	2b00      	cmp	r3, #0
   12ebe:	d100      	bne.n	12ec2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12ec0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_99[u32CoreId] = msr;
   12ec2:	490a      	ldr	r1, [pc, #40]	; (12eec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x54>)
   12ec4:	9b01      	ldr	r3, [sp, #4]
   12ec6:	9a00      	ldr	r2, [sp, #0]
   12ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]++;
   12ecc:	4a06      	ldr	r2, [pc, #24]	; (12ee8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   12ece:	9b01      	ldr	r3, [sp, #4]
   12ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ed4:	1c5a      	adds	r2, r3, #1
   12ed6:	4904      	ldr	r1, [pc, #16]	; (12ee8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   12ed8:	9b01      	ldr	r3, [sp, #4]
   12eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12ede:	bf00      	nop
   12ee0:	b003      	add	sp, #12
   12ee2:	f85d fb04 	ldr.w	pc, [sp], #4
   12ee6:	bf00      	nop
   12ee8:	1fff9508 	.word	0x1fff9508
   12eec:	1fff9504 	.word	0x1fff9504

00012ef0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
   12ef0:	b500      	push	{lr}
   12ef2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12ef4:	f7ee fc58 	bl	17a8 <Sys_GetCoreID>
   12ef8:	4603      	mov	r3, r0
   12efa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]--;
   12efc:	4a0d      	ldr	r2, [pc, #52]	; (12f34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   12efe:	9b01      	ldr	r3, [sp, #4]
   12f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f04:	1e5a      	subs	r2, r3, #1
   12f06:	490b      	ldr	r1, [pc, #44]	; (12f34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   12f08:	9b01      	ldr	r3, [sp, #4]
   12f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_99[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]))         /*if interrupts were enabled*/
   12f0e:	4a0a      	ldr	r2, [pc, #40]	; (12f38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x48>)
   12f10:	9b01      	ldr	r3, [sp, #4]
   12f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f16:	f003 0301 	and.w	r3, r3, #1
   12f1a:	2b00      	cmp	r3, #0
   12f1c:	d106      	bne.n	12f2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
   12f1e:	4a05      	ldr	r2, [pc, #20]	; (12f34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   12f20:	9b01      	ldr	r3, [sp, #4]
   12f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f26:	2b00      	cmp	r3, #0
   12f28:	d100      	bne.n	12f2c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12f2a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12f2c:	bf00      	nop
   12f2e:	b003      	add	sp, #12
   12f30:	f85d fb04 	ldr.w	pc, [sp], #4
   12f34:	1fff9508 	.word	0x1fff9508
   12f38:	1fff9504 	.word	0x1fff9504

00012f3c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
   12f3c:	b500      	push	{lr}
   12f3e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12f40:	f7ee fc32 	bl	17a8 <Sys_GetCoreID>
   12f44:	4603      	mov	r3, r0
   12f46:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId])
   12f48:	4a10      	ldr	r2, [pc, #64]	; (12f8c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
   12f4a:	9b01      	ldr	r3, [sp, #4]
   12f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f50:	2b00      	cmp	r3, #0
   12f52:	d10d      	bne.n	12f70 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12f54:	f7ed fcc5 	bl	8e2 <Dio_schm_read_msr>
   12f58:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12f5a:	9b00      	ldr	r3, [sp, #0]
   12f5c:	f003 0301 	and.w	r3, r3, #1
   12f60:	2b00      	cmp	r3, #0
   12f62:	d100      	bne.n	12f66 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12f64:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   12f66:	490a      	ldr	r1, [pc, #40]	; (12f90 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x54>)
   12f68:	9b01      	ldr	r3, [sp, #4]
   12f6a:	9a00      	ldr	r2, [sp, #0]
   12f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]++;
   12f70:	4a06      	ldr	r2, [pc, #24]	; (12f8c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
   12f72:	9b01      	ldr	r3, [sp, #4]
   12f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f78:	1c5a      	adds	r2, r3, #1
   12f7a:	4904      	ldr	r1, [pc, #16]	; (12f8c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
   12f7c:	9b01      	ldr	r3, [sp, #4]
   12f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12f82:	bf00      	nop
   12f84:	b003      	add	sp, #12
   12f86:	f85d fb04 	ldr.w	pc, [sp], #4
   12f8a:	bf00      	nop
   12f8c:	1fff9510 	.word	0x1fff9510
   12f90:	1fff950c 	.word	0x1fff950c

00012f94 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
   12f94:	b500      	push	{lr}
   12f96:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12f98:	f7ee fc06 	bl	17a8 <Sys_GetCoreID>
   12f9c:	4603      	mov	r3, r0
   12f9e:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]--;
   12fa0:	4a0d      	ldr	r2, [pc, #52]	; (12fd8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
   12fa2:	9b01      	ldr	r3, [sp, #4]
   12fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fa8:	1e5a      	subs	r2, r3, #1
   12faa:	490b      	ldr	r1, [pc, #44]	; (12fd8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
   12fac:	9b01      	ldr	r3, [sp, #4]
   12fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   12fb2:	4a0a      	ldr	r2, [pc, #40]	; (12fdc <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x48>)
   12fb4:	9b01      	ldr	r3, [sp, #4]
   12fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fba:	f003 0301 	and.w	r3, r3, #1
   12fbe:	2b00      	cmp	r3, #0
   12fc0:	d106      	bne.n	12fd0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
   12fc2:	4a05      	ldr	r2, [pc, #20]	; (12fd8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
   12fc4:	9b01      	ldr	r3, [sp, #4]
   12fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fca:	2b00      	cmp	r3, #0
   12fcc:	d100      	bne.n	12fd0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12fce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12fd0:	bf00      	nop
   12fd2:	b003      	add	sp, #12
   12fd4:	f85d fb04 	ldr.w	pc, [sp], #4
   12fd8:	1fff9510 	.word	0x1fff9510
   12fdc:	1fff950c 	.word	0x1fff950c

00012fe0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
   12fe0:	b500      	push	{lr}
   12fe2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12fe4:	f7ee fbe0 	bl	17a8 <Sys_GetCoreID>
   12fe8:	4603      	mov	r3, r0
   12fea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId])
   12fec:	4a10      	ldr	r2, [pc, #64]	; (13030 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
   12fee:	9b01      	ldr	r3, [sp, #4]
   12ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ff4:	2b00      	cmp	r3, #0
   12ff6:	d10d      	bne.n	13014 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12ff8:	f7ed fc73 	bl	8e2 <Dio_schm_read_msr>
   12ffc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12ffe:	9b00      	ldr	r3, [sp, #0]
   13000:	f003 0301 	and.w	r3, r3, #1
   13004:	2b00      	cmp	r3, #0
   13006:	d100      	bne.n	1300a <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13008:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   1300a:	490a      	ldr	r1, [pc, #40]	; (13034 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x54>)
   1300c:	9b01      	ldr	r3, [sp, #4]
   1300e:	9a00      	ldr	r2, [sp, #0]
   13010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]++;
   13014:	4a06      	ldr	r2, [pc, #24]	; (13030 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
   13016:	9b01      	ldr	r3, [sp, #4]
   13018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1301c:	1c5a      	adds	r2, r3, #1
   1301e:	4904      	ldr	r1, [pc, #16]	; (13030 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
   13020:	9b01      	ldr	r3, [sp, #4]
   13022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13026:	bf00      	nop
   13028:	b003      	add	sp, #12
   1302a:	f85d fb04 	ldr.w	pc, [sp], #4
   1302e:	bf00      	nop
   13030:	1fff9518 	.word	0x1fff9518
   13034:	1fff9514 	.word	0x1fff9514

00013038 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
   13038:	b500      	push	{lr}
   1303a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1303c:	f7ee fbb4 	bl	17a8 <Sys_GetCoreID>
   13040:	4603      	mov	r3, r0
   13042:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]--;
   13044:	4a0d      	ldr	r2, [pc, #52]	; (1307c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
   13046:	9b01      	ldr	r3, [sp, #4]
   13048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1304c:	1e5a      	subs	r2, r3, #1
   1304e:	490b      	ldr	r1, [pc, #44]	; (1307c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
   13050:	9b01      	ldr	r3, [sp, #4]
   13052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   13056:	4a0a      	ldr	r2, [pc, #40]	; (13080 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x48>)
   13058:	9b01      	ldr	r3, [sp, #4]
   1305a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1305e:	f003 0301 	and.w	r3, r3, #1
   13062:	2b00      	cmp	r3, #0
   13064:	d106      	bne.n	13074 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
   13066:	4a05      	ldr	r2, [pc, #20]	; (1307c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
   13068:	9b01      	ldr	r3, [sp, #4]
   1306a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1306e:	2b00      	cmp	r3, #0
   13070:	d100      	bne.n	13074 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13072:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13074:	bf00      	nop
   13076:	b003      	add	sp, #12
   13078:	f85d fb04 	ldr.w	pc, [sp], #4
   1307c:	1fff9518 	.word	0x1fff9518
   13080:	1fff9514 	.word	0x1fff9514

00013084 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
   13084:	b500      	push	{lr}
   13086:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13088:	f7ee fb8e 	bl	17a8 <Sys_GetCoreID>
   1308c:	4603      	mov	r3, r0
   1308e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
   13090:	4a10      	ldr	r2, [pc, #64]	; (130d4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   13092:	9b01      	ldr	r3, [sp, #4]
   13094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13098:	2b00      	cmp	r3, #0
   1309a:	d10d      	bne.n	130b8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1309c:	f7ed fc2a 	bl	8f4 <Mcu_schm_read_msr>
   130a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   130a2:	9b00      	ldr	r3, [sp, #0]
   130a4:	f003 0301 	and.w	r3, r3, #1
   130a8:	2b00      	cmp	r3, #0
   130aa:	d100      	bne.n	130ae <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   130ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   130ae:	490a      	ldr	r1, [pc, #40]	; (130d8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
   130b0:	9b01      	ldr	r3, [sp, #4]
   130b2:	9a00      	ldr	r2, [sp, #0]
   130b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
   130b8:	4a06      	ldr	r2, [pc, #24]	; (130d4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   130ba:	9b01      	ldr	r3, [sp, #4]
   130bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130c0:	1c5a      	adds	r2, r3, #1
   130c2:	4904      	ldr	r1, [pc, #16]	; (130d4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   130c4:	9b01      	ldr	r3, [sp, #4]
   130c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   130ca:	bf00      	nop
   130cc:	b003      	add	sp, #12
   130ce:	f85d fb04 	ldr.w	pc, [sp], #4
   130d2:	bf00      	nop
   130d4:	1fff9520 	.word	0x1fff9520
   130d8:	1fff951c 	.word	0x1fff951c

000130dc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
   130dc:	b500      	push	{lr}
   130de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   130e0:	f7ee fb62 	bl	17a8 <Sys_GetCoreID>
   130e4:	4603      	mov	r3, r0
   130e6:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
   130e8:	4a0d      	ldr	r2, [pc, #52]	; (13120 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   130ea:	9b01      	ldr	r3, [sp, #4]
   130ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130f0:	1e5a      	subs	r2, r3, #1
   130f2:	490b      	ldr	r1, [pc, #44]	; (13120 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   130f4:	9b01      	ldr	r3, [sp, #4]
   130f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   130fa:	4a0a      	ldr	r2, [pc, #40]	; (13124 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
   130fc:	9b01      	ldr	r3, [sp, #4]
   130fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13102:	f003 0301 	and.w	r3, r3, #1
   13106:	2b00      	cmp	r3, #0
   13108:	d106      	bne.n	13118 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
   1310a:	4a05      	ldr	r2, [pc, #20]	; (13120 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   1310c:	9b01      	ldr	r3, [sp, #4]
   1310e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13112:	2b00      	cmp	r3, #0
   13114:	d100      	bne.n	13118 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13116:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13118:	bf00      	nop
   1311a:	b003      	add	sp, #12
   1311c:	f85d fb04 	ldr.w	pc, [sp], #4
   13120:	1fff9520 	.word	0x1fff9520
   13124:	1fff951c 	.word	0x1fff951c

00013128 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
   13128:	b500      	push	{lr}
   1312a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1312c:	f7ee fb3c 	bl	17a8 <Sys_GetCoreID>
   13130:	4603      	mov	r3, r0
   13132:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
   13134:	4a10      	ldr	r2, [pc, #64]	; (13178 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   13136:	9b01      	ldr	r3, [sp, #4]
   13138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1313c:	2b00      	cmp	r3, #0
   1313e:	d10d      	bne.n	1315c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13140:	f7ed fbd8 	bl	8f4 <Mcu_schm_read_msr>
   13144:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13146:	9b00      	ldr	r3, [sp, #0]
   13148:	f003 0301 	and.w	r3, r3, #1
   1314c:	2b00      	cmp	r3, #0
   1314e:	d100      	bne.n	13152 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13150:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   13152:	490a      	ldr	r1, [pc, #40]	; (1317c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
   13154:	9b01      	ldr	r3, [sp, #4]
   13156:	9a00      	ldr	r2, [sp, #0]
   13158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
   1315c:	4a06      	ldr	r2, [pc, #24]	; (13178 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   1315e:	9b01      	ldr	r3, [sp, #4]
   13160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13164:	1c5a      	adds	r2, r3, #1
   13166:	4904      	ldr	r1, [pc, #16]	; (13178 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   13168:	9b01      	ldr	r3, [sp, #4]
   1316a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1316e:	bf00      	nop
   13170:	b003      	add	sp, #12
   13172:	f85d fb04 	ldr.w	pc, [sp], #4
   13176:	bf00      	nop
   13178:	1fff9528 	.word	0x1fff9528
   1317c:	1fff9524 	.word	0x1fff9524

00013180 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
   13180:	b500      	push	{lr}
   13182:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13184:	f7ee fb10 	bl	17a8 <Sys_GetCoreID>
   13188:	4603      	mov	r3, r0
   1318a:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
   1318c:	4a0d      	ldr	r2, [pc, #52]	; (131c4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   1318e:	9b01      	ldr	r3, [sp, #4]
   13190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13194:	1e5a      	subs	r2, r3, #1
   13196:	490b      	ldr	r1, [pc, #44]	; (131c4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   13198:	9b01      	ldr	r3, [sp, #4]
   1319a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   1319e:	4a0a      	ldr	r2, [pc, #40]	; (131c8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
   131a0:	9b01      	ldr	r3, [sp, #4]
   131a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131a6:	f003 0301 	and.w	r3, r3, #1
   131aa:	2b00      	cmp	r3, #0
   131ac:	d106      	bne.n	131bc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
   131ae:	4a05      	ldr	r2, [pc, #20]	; (131c4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   131b0:	9b01      	ldr	r3, [sp, #4]
   131b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131b6:	2b00      	cmp	r3, #0
   131b8:	d100      	bne.n	131bc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   131ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   131bc:	bf00      	nop
   131be:	b003      	add	sp, #12
   131c0:	f85d fb04 	ldr.w	pc, [sp], #4
   131c4:	1fff9528 	.word	0x1fff9528
   131c8:	1fff9524 	.word	0x1fff9524

000131cc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
   131cc:	b500      	push	{lr}
   131ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   131d0:	f7ee faea 	bl	17a8 <Sys_GetCoreID>
   131d4:	4603      	mov	r3, r0
   131d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
   131d8:	4a10      	ldr	r2, [pc, #64]	; (1321c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   131da:	9b01      	ldr	r3, [sp, #4]
   131dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131e0:	2b00      	cmp	r3, #0
   131e2:	d10d      	bne.n	13200 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   131e4:	f7ed fb86 	bl	8f4 <Mcu_schm_read_msr>
   131e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   131ea:	9b00      	ldr	r3, [sp, #0]
   131ec:	f003 0301 	and.w	r3, r3, #1
   131f0:	2b00      	cmp	r3, #0
   131f2:	d100      	bne.n	131f6 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   131f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   131f6:	490a      	ldr	r1, [pc, #40]	; (13220 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
   131f8:	9b01      	ldr	r3, [sp, #4]
   131fa:	9a00      	ldr	r2, [sp, #0]
   131fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
   13200:	4a06      	ldr	r2, [pc, #24]	; (1321c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   13202:	9b01      	ldr	r3, [sp, #4]
   13204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13208:	1c5a      	adds	r2, r3, #1
   1320a:	4904      	ldr	r1, [pc, #16]	; (1321c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   1320c:	9b01      	ldr	r3, [sp, #4]
   1320e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13212:	bf00      	nop
   13214:	b003      	add	sp, #12
   13216:	f85d fb04 	ldr.w	pc, [sp], #4
   1321a:	bf00      	nop
   1321c:	1fff9530 	.word	0x1fff9530
   13220:	1fff952c 	.word	0x1fff952c

00013224 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
   13224:	b500      	push	{lr}
   13226:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13228:	f7ee fabe 	bl	17a8 <Sys_GetCoreID>
   1322c:	4603      	mov	r3, r0
   1322e:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
   13230:	4a0d      	ldr	r2, [pc, #52]	; (13268 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   13232:	9b01      	ldr	r3, [sp, #4]
   13234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13238:	1e5a      	subs	r2, r3, #1
   1323a:	490b      	ldr	r1, [pc, #44]	; (13268 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   1323c:	9b01      	ldr	r3, [sp, #4]
   1323e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   13242:	4a0a      	ldr	r2, [pc, #40]	; (1326c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
   13244:	9b01      	ldr	r3, [sp, #4]
   13246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1324a:	f003 0301 	and.w	r3, r3, #1
   1324e:	2b00      	cmp	r3, #0
   13250:	d106      	bne.n	13260 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
   13252:	4a05      	ldr	r2, [pc, #20]	; (13268 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   13254:	9b01      	ldr	r3, [sp, #4]
   13256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1325a:	2b00      	cmp	r3, #0
   1325c:	d100      	bne.n	13260 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1325e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13260:	bf00      	nop
   13262:	b003      	add	sp, #12
   13264:	f85d fb04 	ldr.w	pc, [sp], #4
   13268:	1fff9530 	.word	0x1fff9530
   1326c:	1fff952c 	.word	0x1fff952c

00013270 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
   13270:	b500      	push	{lr}
   13272:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13274:	f7ee fa98 	bl	17a8 <Sys_GetCoreID>
   13278:	4603      	mov	r3, r0
   1327a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
   1327c:	4a10      	ldr	r2, [pc, #64]	; (132c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   1327e:	9b01      	ldr	r3, [sp, #4]
   13280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13284:	2b00      	cmp	r3, #0
   13286:	d10d      	bne.n	132a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13288:	f7ed fb3d 	bl	906 <Port_schm_read_msr>
   1328c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1328e:	9b00      	ldr	r3, [sp, #0]
   13290:	f003 0301 	and.w	r3, r3, #1
   13294:	2b00      	cmp	r3, #0
   13296:	d100      	bne.n	1329a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13298:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   1329a:	490a      	ldr	r1, [pc, #40]	; (132c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
   1329c:	9b01      	ldr	r3, [sp, #4]
   1329e:	9a00      	ldr	r2, [sp, #0]
   132a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
   132a4:	4a06      	ldr	r2, [pc, #24]	; (132c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   132a6:	9b01      	ldr	r3, [sp, #4]
   132a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132ac:	1c5a      	adds	r2, r3, #1
   132ae:	4904      	ldr	r1, [pc, #16]	; (132c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   132b0:	9b01      	ldr	r3, [sp, #4]
   132b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   132b6:	bf00      	nop
   132b8:	b003      	add	sp, #12
   132ba:	f85d fb04 	ldr.w	pc, [sp], #4
   132be:	bf00      	nop
   132c0:	1fff9538 	.word	0x1fff9538
   132c4:	1fff9534 	.word	0x1fff9534

000132c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
   132c8:	b500      	push	{lr}
   132ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   132cc:	f7ee fa6c 	bl	17a8 <Sys_GetCoreID>
   132d0:	4603      	mov	r3, r0
   132d2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
   132d4:	4a0d      	ldr	r2, [pc, #52]	; (1330c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   132d6:	9b01      	ldr	r3, [sp, #4]
   132d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132dc:	1e5a      	subs	r2, r3, #1
   132de:	490b      	ldr	r1, [pc, #44]	; (1330c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   132e0:	9b01      	ldr	r3, [sp, #4]
   132e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   132e6:	4a0a      	ldr	r2, [pc, #40]	; (13310 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
   132e8:	9b01      	ldr	r3, [sp, #4]
   132ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132ee:	f003 0301 	and.w	r3, r3, #1
   132f2:	2b00      	cmp	r3, #0
   132f4:	d106      	bne.n	13304 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
   132f6:	4a05      	ldr	r2, [pc, #20]	; (1330c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   132f8:	9b01      	ldr	r3, [sp, #4]
   132fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132fe:	2b00      	cmp	r3, #0
   13300:	d100      	bne.n	13304 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13302:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13304:	bf00      	nop
   13306:	b003      	add	sp, #12
   13308:	f85d fb04 	ldr.w	pc, [sp], #4
   1330c:	1fff9538 	.word	0x1fff9538
   13310:	1fff9534 	.word	0x1fff9534

00013314 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
   13314:	b500      	push	{lr}
   13316:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13318:	f7ee fa46 	bl	17a8 <Sys_GetCoreID>
   1331c:	4603      	mov	r3, r0
   1331e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
   13320:	4a10      	ldr	r2, [pc, #64]	; (13364 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   13322:	9b01      	ldr	r3, [sp, #4]
   13324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13328:	2b00      	cmp	r3, #0
   1332a:	d10d      	bne.n	13348 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1332c:	f7ed faeb 	bl	906 <Port_schm_read_msr>
   13330:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13332:	9b00      	ldr	r3, [sp, #0]
   13334:	f003 0301 	and.w	r3, r3, #1
   13338:	2b00      	cmp	r3, #0
   1333a:	d100      	bne.n	1333e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1333c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   1333e:	490a      	ldr	r1, [pc, #40]	; (13368 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
   13340:	9b01      	ldr	r3, [sp, #4]
   13342:	9a00      	ldr	r2, [sp, #0]
   13344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
   13348:	4a06      	ldr	r2, [pc, #24]	; (13364 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   1334a:	9b01      	ldr	r3, [sp, #4]
   1334c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13350:	1c5a      	adds	r2, r3, #1
   13352:	4904      	ldr	r1, [pc, #16]	; (13364 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   13354:	9b01      	ldr	r3, [sp, #4]
   13356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1335a:	bf00      	nop
   1335c:	b003      	add	sp, #12
   1335e:	f85d fb04 	ldr.w	pc, [sp], #4
   13362:	bf00      	nop
   13364:	1fff9540 	.word	0x1fff9540
   13368:	1fff953c 	.word	0x1fff953c

0001336c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
   1336c:	b500      	push	{lr}
   1336e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13370:	f7ee fa1a 	bl	17a8 <Sys_GetCoreID>
   13374:	4603      	mov	r3, r0
   13376:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
   13378:	4a0d      	ldr	r2, [pc, #52]	; (133b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   1337a:	9b01      	ldr	r3, [sp, #4]
   1337c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13380:	1e5a      	subs	r2, r3, #1
   13382:	490b      	ldr	r1, [pc, #44]	; (133b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   13384:	9b01      	ldr	r3, [sp, #4]
   13386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   1338a:	4a0a      	ldr	r2, [pc, #40]	; (133b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
   1338c:	9b01      	ldr	r3, [sp, #4]
   1338e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13392:	f003 0301 	and.w	r3, r3, #1
   13396:	2b00      	cmp	r3, #0
   13398:	d106      	bne.n	133a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
   1339a:	4a05      	ldr	r2, [pc, #20]	; (133b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   1339c:	9b01      	ldr	r3, [sp, #4]
   1339e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133a2:	2b00      	cmp	r3, #0
   133a4:	d100      	bne.n	133a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   133a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   133a8:	bf00      	nop
   133aa:	b003      	add	sp, #12
   133ac:	f85d fb04 	ldr.w	pc, [sp], #4
   133b0:	1fff9540 	.word	0x1fff9540
   133b4:	1fff953c 	.word	0x1fff953c

000133b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
   133b8:	b500      	push	{lr}
   133ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   133bc:	f7ee f9f4 	bl	17a8 <Sys_GetCoreID>
   133c0:	4603      	mov	r3, r0
   133c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
   133c4:	4a10      	ldr	r2, [pc, #64]	; (13408 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   133c6:	9b01      	ldr	r3, [sp, #4]
   133c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133cc:	2b00      	cmp	r3, #0
   133ce:	d10d      	bne.n	133ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   133d0:	f7ed fa99 	bl	906 <Port_schm_read_msr>
   133d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   133d6:	9b00      	ldr	r3, [sp, #0]
   133d8:	f003 0301 	and.w	r3, r3, #1
   133dc:	2b00      	cmp	r3, #0
   133de:	d100      	bne.n	133e2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   133e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   133e2:	490a      	ldr	r1, [pc, #40]	; (1340c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
   133e4:	9b01      	ldr	r3, [sp, #4]
   133e6:	9a00      	ldr	r2, [sp, #0]
   133e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
   133ec:	4a06      	ldr	r2, [pc, #24]	; (13408 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   133ee:	9b01      	ldr	r3, [sp, #4]
   133f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133f4:	1c5a      	adds	r2, r3, #1
   133f6:	4904      	ldr	r1, [pc, #16]	; (13408 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   133f8:	9b01      	ldr	r3, [sp, #4]
   133fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   133fe:	bf00      	nop
   13400:	b003      	add	sp, #12
   13402:	f85d fb04 	ldr.w	pc, [sp], #4
   13406:	bf00      	nop
   13408:	1fff9548 	.word	0x1fff9548
   1340c:	1fff9544 	.word	0x1fff9544

00013410 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
   13410:	b500      	push	{lr}
   13412:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13414:	f7ee f9c8 	bl	17a8 <Sys_GetCoreID>
   13418:	4603      	mov	r3, r0
   1341a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
   1341c:	4a0d      	ldr	r2, [pc, #52]	; (13454 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   1341e:	9b01      	ldr	r3, [sp, #4]
   13420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13424:	1e5a      	subs	r2, r3, #1
   13426:	490b      	ldr	r1, [pc, #44]	; (13454 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   13428:	9b01      	ldr	r3, [sp, #4]
   1342a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   1342e:	4a0a      	ldr	r2, [pc, #40]	; (13458 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
   13430:	9b01      	ldr	r3, [sp, #4]
   13432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13436:	f003 0301 	and.w	r3, r3, #1
   1343a:	2b00      	cmp	r3, #0
   1343c:	d106      	bne.n	1344c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
   1343e:	4a05      	ldr	r2, [pc, #20]	; (13454 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   13440:	9b01      	ldr	r3, [sp, #4]
   13442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13446:	2b00      	cmp	r3, #0
   13448:	d100      	bne.n	1344c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1344a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1344c:	bf00      	nop
   1344e:	b003      	add	sp, #12
   13450:	f85d fb04 	ldr.w	pc, [sp], #4
   13454:	1fff9548 	.word	0x1fff9548
   13458:	1fff9544 	.word	0x1fff9544

0001345c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
   1345c:	b500      	push	{lr}
   1345e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13460:	f7ee f9a2 	bl	17a8 <Sys_GetCoreID>
   13464:	4603      	mov	r3, r0
   13466:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
   13468:	4a10      	ldr	r2, [pc, #64]	; (134ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   1346a:	9b01      	ldr	r3, [sp, #4]
   1346c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13470:	2b00      	cmp	r3, #0
   13472:	d10d      	bne.n	13490 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13474:	f7ed fa47 	bl	906 <Port_schm_read_msr>
   13478:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1347a:	9b00      	ldr	r3, [sp, #0]
   1347c:	f003 0301 	and.w	r3, r3, #1
   13480:	2b00      	cmp	r3, #0
   13482:	d100      	bne.n	13486 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13484:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   13486:	490a      	ldr	r1, [pc, #40]	; (134b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
   13488:	9b01      	ldr	r3, [sp, #4]
   1348a:	9a00      	ldr	r2, [sp, #0]
   1348c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
   13490:	4a06      	ldr	r2, [pc, #24]	; (134ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   13492:	9b01      	ldr	r3, [sp, #4]
   13494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13498:	1c5a      	adds	r2, r3, #1
   1349a:	4904      	ldr	r1, [pc, #16]	; (134ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   1349c:	9b01      	ldr	r3, [sp, #4]
   1349e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   134a2:	bf00      	nop
   134a4:	b003      	add	sp, #12
   134a6:	f85d fb04 	ldr.w	pc, [sp], #4
   134aa:	bf00      	nop
   134ac:	1fff9550 	.word	0x1fff9550
   134b0:	1fff954c 	.word	0x1fff954c

000134b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
   134b4:	b500      	push	{lr}
   134b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   134b8:	f7ee f976 	bl	17a8 <Sys_GetCoreID>
   134bc:	4603      	mov	r3, r0
   134be:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
   134c0:	4a0d      	ldr	r2, [pc, #52]	; (134f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   134c2:	9b01      	ldr	r3, [sp, #4]
   134c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134c8:	1e5a      	subs	r2, r3, #1
   134ca:	490b      	ldr	r1, [pc, #44]	; (134f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   134cc:	9b01      	ldr	r3, [sp, #4]
   134ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   134d2:	4a0a      	ldr	r2, [pc, #40]	; (134fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
   134d4:	9b01      	ldr	r3, [sp, #4]
   134d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134da:	f003 0301 	and.w	r3, r3, #1
   134de:	2b00      	cmp	r3, #0
   134e0:	d106      	bne.n	134f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
   134e2:	4a05      	ldr	r2, [pc, #20]	; (134f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   134e4:	9b01      	ldr	r3, [sp, #4]
   134e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134ea:	2b00      	cmp	r3, #0
   134ec:	d100      	bne.n	134f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   134ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   134f0:	bf00      	nop
   134f2:	b003      	add	sp, #12
   134f4:	f85d fb04 	ldr.w	pc, [sp], #4
   134f8:	1fff9550 	.word	0x1fff9550
   134fc:	1fff954c 	.word	0x1fff954c

00013500 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
   13500:	b500      	push	{lr}
   13502:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13504:	f7ee f950 	bl	17a8 <Sys_GetCoreID>
   13508:	4603      	mov	r3, r0
   1350a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
   1350c:	4a10      	ldr	r2, [pc, #64]	; (13550 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   1350e:	9b01      	ldr	r3, [sp, #4]
   13510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13514:	2b00      	cmp	r3, #0
   13516:	d10d      	bne.n	13534 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13518:	f7ed f9f5 	bl	906 <Port_schm_read_msr>
   1351c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1351e:	9b00      	ldr	r3, [sp, #0]
   13520:	f003 0301 	and.w	r3, r3, #1
   13524:	2b00      	cmp	r3, #0
   13526:	d100      	bne.n	1352a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13528:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   1352a:	490a      	ldr	r1, [pc, #40]	; (13554 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
   1352c:	9b01      	ldr	r3, [sp, #4]
   1352e:	9a00      	ldr	r2, [sp, #0]
   13530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
   13534:	4a06      	ldr	r2, [pc, #24]	; (13550 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   13536:	9b01      	ldr	r3, [sp, #4]
   13538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1353c:	1c5a      	adds	r2, r3, #1
   1353e:	4904      	ldr	r1, [pc, #16]	; (13550 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   13540:	9b01      	ldr	r3, [sp, #4]
   13542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13546:	bf00      	nop
   13548:	b003      	add	sp, #12
   1354a:	f85d fb04 	ldr.w	pc, [sp], #4
   1354e:	bf00      	nop
   13550:	1fff9558 	.word	0x1fff9558
   13554:	1fff9554 	.word	0x1fff9554

00013558 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
   13558:	b500      	push	{lr}
   1355a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1355c:	f7ee f924 	bl	17a8 <Sys_GetCoreID>
   13560:	4603      	mov	r3, r0
   13562:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
   13564:	4a0d      	ldr	r2, [pc, #52]	; (1359c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   13566:	9b01      	ldr	r3, [sp, #4]
   13568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1356c:	1e5a      	subs	r2, r3, #1
   1356e:	490b      	ldr	r1, [pc, #44]	; (1359c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   13570:	9b01      	ldr	r3, [sp, #4]
   13572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   13576:	4a0a      	ldr	r2, [pc, #40]	; (135a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
   13578:	9b01      	ldr	r3, [sp, #4]
   1357a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1357e:	f003 0301 	and.w	r3, r3, #1
   13582:	2b00      	cmp	r3, #0
   13584:	d106      	bne.n	13594 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
   13586:	4a05      	ldr	r2, [pc, #20]	; (1359c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   13588:	9b01      	ldr	r3, [sp, #4]
   1358a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1358e:	2b00      	cmp	r3, #0
   13590:	d100      	bne.n	13594 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13592:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13594:	bf00      	nop
   13596:	b003      	add	sp, #12
   13598:	f85d fb04 	ldr.w	pc, [sp], #4
   1359c:	1fff9558 	.word	0x1fff9558
   135a0:	1fff9554 	.word	0x1fff9554

000135a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
   135a4:	b500      	push	{lr}
   135a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   135a8:	f7ee f8fe 	bl	17a8 <Sys_GetCoreID>
   135ac:	4603      	mov	r3, r0
   135ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
   135b0:	4a10      	ldr	r2, [pc, #64]	; (135f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   135b2:	9b01      	ldr	r3, [sp, #4]
   135b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135b8:	2b00      	cmp	r3, #0
   135ba:	d10d      	bne.n	135d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   135bc:	f7ed f9a3 	bl	906 <Port_schm_read_msr>
   135c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   135c2:	9b00      	ldr	r3, [sp, #0]
   135c4:	f003 0301 	and.w	r3, r3, #1
   135c8:	2b00      	cmp	r3, #0
   135ca:	d100      	bne.n	135ce <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   135cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   135ce:	490a      	ldr	r1, [pc, #40]	; (135f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
   135d0:	9b01      	ldr	r3, [sp, #4]
   135d2:	9a00      	ldr	r2, [sp, #0]
   135d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
   135d8:	4a06      	ldr	r2, [pc, #24]	; (135f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   135da:	9b01      	ldr	r3, [sp, #4]
   135dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135e0:	1c5a      	adds	r2, r3, #1
   135e2:	4904      	ldr	r1, [pc, #16]	; (135f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   135e4:	9b01      	ldr	r3, [sp, #4]
   135e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   135ea:	bf00      	nop
   135ec:	b003      	add	sp, #12
   135ee:	f85d fb04 	ldr.w	pc, [sp], #4
   135f2:	bf00      	nop
   135f4:	1fff9560 	.word	0x1fff9560
   135f8:	1fff955c 	.word	0x1fff955c

000135fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
   135fc:	b500      	push	{lr}
   135fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13600:	f7ee f8d2 	bl	17a8 <Sys_GetCoreID>
   13604:	4603      	mov	r3, r0
   13606:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
   13608:	4a0d      	ldr	r2, [pc, #52]	; (13640 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   1360a:	9b01      	ldr	r3, [sp, #4]
   1360c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13610:	1e5a      	subs	r2, r3, #1
   13612:	490b      	ldr	r1, [pc, #44]	; (13640 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   13614:	9b01      	ldr	r3, [sp, #4]
   13616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   1361a:	4a0a      	ldr	r2, [pc, #40]	; (13644 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
   1361c:	9b01      	ldr	r3, [sp, #4]
   1361e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13622:	f003 0301 	and.w	r3, r3, #1
   13626:	2b00      	cmp	r3, #0
   13628:	d106      	bne.n	13638 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
   1362a:	4a05      	ldr	r2, [pc, #20]	; (13640 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   1362c:	9b01      	ldr	r3, [sp, #4]
   1362e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13632:	2b00      	cmp	r3, #0
   13634:	d100      	bne.n	13638 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13636:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13638:	bf00      	nop
   1363a:	b003      	add	sp, #12
   1363c:	f85d fb04 	ldr.w	pc, [sp], #4
   13640:	1fff9560 	.word	0x1fff9560
   13644:	1fff955c 	.word	0x1fff955c

00013648 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
   13648:	b500      	push	{lr}
   1364a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1364c:	f7ee f8ac 	bl	17a8 <Sys_GetCoreID>
   13650:	4603      	mov	r3, r0
   13652:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
   13654:	4a10      	ldr	r2, [pc, #64]	; (13698 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   13656:	9b01      	ldr	r3, [sp, #4]
   13658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1365c:	2b00      	cmp	r3, #0
   1365e:	d10d      	bne.n	1367c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13660:	f7ed f951 	bl	906 <Port_schm_read_msr>
   13664:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13666:	9b00      	ldr	r3, [sp, #0]
   13668:	f003 0301 	and.w	r3, r3, #1
   1366c:	2b00      	cmp	r3, #0
   1366e:	d100      	bne.n	13672 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13670:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
   13672:	490a      	ldr	r1, [pc, #40]	; (1369c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
   13674:	9b01      	ldr	r3, [sp, #4]
   13676:	9a00      	ldr	r2, [sp, #0]
   13678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
   1367c:	4a06      	ldr	r2, [pc, #24]	; (13698 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   1367e:	9b01      	ldr	r3, [sp, #4]
   13680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13684:	1c5a      	adds	r2, r3, #1
   13686:	4904      	ldr	r1, [pc, #16]	; (13698 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   13688:	9b01      	ldr	r3, [sp, #4]
   1368a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1368e:	bf00      	nop
   13690:	b003      	add	sp, #12
   13692:	f85d fb04 	ldr.w	pc, [sp], #4
   13696:	bf00      	nop
   13698:	1fff9568 	.word	0x1fff9568
   1369c:	1fff9564 	.word	0x1fff9564

000136a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
   136a0:	b500      	push	{lr}
   136a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   136a4:	f7ee f880 	bl	17a8 <Sys_GetCoreID>
   136a8:	4603      	mov	r3, r0
   136aa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
   136ac:	4a0d      	ldr	r2, [pc, #52]	; (136e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   136ae:	9b01      	ldr	r3, [sp, #4]
   136b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136b4:	1e5a      	subs	r2, r3, #1
   136b6:	490b      	ldr	r1, [pc, #44]	; (136e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   136b8:	9b01      	ldr	r3, [sp, #4]
   136ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
   136be:	4a0a      	ldr	r2, [pc, #40]	; (136e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
   136c0:	9b01      	ldr	r3, [sp, #4]
   136c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136c6:	f003 0301 	and.w	r3, r3, #1
   136ca:	2b00      	cmp	r3, #0
   136cc:	d106      	bne.n	136dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
   136ce:	4a05      	ldr	r2, [pc, #20]	; (136e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   136d0:	9b01      	ldr	r3, [sp, #4]
   136d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136d6:	2b00      	cmp	r3, #0
   136d8:	d100      	bne.n	136dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   136da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   136dc:	bf00      	nop
   136de:	b003      	add	sp, #12
   136e0:	f85d fb04 	ldr.w	pc, [sp], #4
   136e4:	1fff9568 	.word	0x1fff9568
   136e8:	1fff9564 	.word	0x1fff9564

000136ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
   136ec:	b500      	push	{lr}
   136ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   136f0:	f7ee f85a 	bl	17a8 <Sys_GetCoreID>
   136f4:	4603      	mov	r3, r0
   136f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
   136f8:	4a10      	ldr	r2, [pc, #64]	; (1373c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   136fa:	9b01      	ldr	r3, [sp, #4]
   136fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13700:	2b00      	cmp	r3, #0
   13702:	d10d      	bne.n	13720 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13704:	f7ed f8ff 	bl	906 <Port_schm_read_msr>
   13708:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1370a:	9b00      	ldr	r3, [sp, #0]
   1370c:	f003 0301 	and.w	r3, r3, #1
   13710:	2b00      	cmp	r3, #0
   13712:	d100      	bne.n	13716 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13714:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
   13716:	490a      	ldr	r1, [pc, #40]	; (13740 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
   13718:	9b01      	ldr	r3, [sp, #4]
   1371a:	9a00      	ldr	r2, [sp, #0]
   1371c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
   13720:	4a06      	ldr	r2, [pc, #24]	; (1373c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   13722:	9b01      	ldr	r3, [sp, #4]
   13724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13728:	1c5a      	adds	r2, r3, #1
   1372a:	4904      	ldr	r1, [pc, #16]	; (1373c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   1372c:	9b01      	ldr	r3, [sp, #4]
   1372e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13732:	bf00      	nop
   13734:	b003      	add	sp, #12
   13736:	f85d fb04 	ldr.w	pc, [sp], #4
   1373a:	bf00      	nop
   1373c:	1fff9570 	.word	0x1fff9570
   13740:	1fff956c 	.word	0x1fff956c

00013744 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
   13744:	b500      	push	{lr}
   13746:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13748:	f7ee f82e 	bl	17a8 <Sys_GetCoreID>
   1374c:	4603      	mov	r3, r0
   1374e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
   13750:	4a0d      	ldr	r2, [pc, #52]	; (13788 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   13752:	9b01      	ldr	r3, [sp, #4]
   13754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13758:	1e5a      	subs	r2, r3, #1
   1375a:	490b      	ldr	r1, [pc, #44]	; (13788 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   1375c:	9b01      	ldr	r3, [sp, #4]
   1375e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
   13762:	4a0a      	ldr	r2, [pc, #40]	; (1378c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
   13764:	9b01      	ldr	r3, [sp, #4]
   13766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1376a:	f003 0301 	and.w	r3, r3, #1
   1376e:	2b00      	cmp	r3, #0
   13770:	d106      	bne.n	13780 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
   13772:	4a05      	ldr	r2, [pc, #20]	; (13788 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   13774:	9b01      	ldr	r3, [sp, #4]
   13776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1377a:	2b00      	cmp	r3, #0
   1377c:	d100      	bne.n	13780 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1377e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13780:	bf00      	nop
   13782:	b003      	add	sp, #12
   13784:	f85d fb04 	ldr.w	pc, [sp], #4
   13788:	1fff9570 	.word	0x1fff9570
   1378c:	1fff956c 	.word	0x1fff956c

00013790 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
   13790:	b500      	push	{lr}
   13792:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13794:	f7ee f808 	bl	17a8 <Sys_GetCoreID>
   13798:	4603      	mov	r3, r0
   1379a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
   1379c:	4a10      	ldr	r2, [pc, #64]	; (137e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   1379e:	9b01      	ldr	r3, [sp, #4]
   137a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137a4:	2b00      	cmp	r3, #0
   137a6:	d10d      	bne.n	137c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   137a8:	f7ed f8ad 	bl	906 <Port_schm_read_msr>
   137ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   137ae:	9b00      	ldr	r3, [sp, #0]
   137b0:	f003 0301 	and.w	r3, r3, #1
   137b4:	2b00      	cmp	r3, #0
   137b6:	d100      	bne.n	137ba <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   137b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
   137ba:	490a      	ldr	r1, [pc, #40]	; (137e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
   137bc:	9b01      	ldr	r3, [sp, #4]
   137be:	9a00      	ldr	r2, [sp, #0]
   137c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
   137c4:	4a06      	ldr	r2, [pc, #24]	; (137e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   137c6:	9b01      	ldr	r3, [sp, #4]
   137c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137cc:	1c5a      	adds	r2, r3, #1
   137ce:	4904      	ldr	r1, [pc, #16]	; (137e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   137d0:	9b01      	ldr	r3, [sp, #4]
   137d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   137d6:	bf00      	nop
   137d8:	b003      	add	sp, #12
   137da:	f85d fb04 	ldr.w	pc, [sp], #4
   137de:	bf00      	nop
   137e0:	1fff9578 	.word	0x1fff9578
   137e4:	1fff9574 	.word	0x1fff9574

000137e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
   137e8:	b500      	push	{lr}
   137ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   137ec:	f7ed ffdc 	bl	17a8 <Sys_GetCoreID>
   137f0:	4603      	mov	r3, r0
   137f2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
   137f4:	4a0d      	ldr	r2, [pc, #52]	; (1382c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   137f6:	9b01      	ldr	r3, [sp, #4]
   137f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137fc:	1e5a      	subs	r2, r3, #1
   137fe:	490b      	ldr	r1, [pc, #44]	; (1382c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   13800:	9b01      	ldr	r3, [sp, #4]
   13802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
   13806:	4a0a      	ldr	r2, [pc, #40]	; (13830 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
   13808:	9b01      	ldr	r3, [sp, #4]
   1380a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1380e:	f003 0301 	and.w	r3, r3, #1
   13812:	2b00      	cmp	r3, #0
   13814:	d106      	bne.n	13824 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
   13816:	4a05      	ldr	r2, [pc, #20]	; (1382c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   13818:	9b01      	ldr	r3, [sp, #4]
   1381a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1381e:	2b00      	cmp	r3, #0
   13820:	d100      	bne.n	13824 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13822:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13824:	bf00      	nop
   13826:	b003      	add	sp, #12
   13828:	f85d fb04 	ldr.w	pc, [sp], #4
   1382c:	1fff9578 	.word	0x1fff9578
   13830:	1fff9574 	.word	0x1fff9574

00013834 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
   13834:	b500      	push	{lr}
   13836:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13838:	f7ed ffb6 	bl	17a8 <Sys_GetCoreID>
   1383c:	4603      	mov	r3, r0
   1383e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
   13840:	4a10      	ldr	r2, [pc, #64]	; (13884 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   13842:	9b01      	ldr	r3, [sp, #4]
   13844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13848:	2b00      	cmp	r3, #0
   1384a:	d10d      	bne.n	13868 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1384c:	f7ed f85b 	bl	906 <Port_schm_read_msr>
   13850:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13852:	9b00      	ldr	r3, [sp, #0]
   13854:	f003 0301 	and.w	r3, r3, #1
   13858:	2b00      	cmp	r3, #0
   1385a:	d100      	bne.n	1385e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1385c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
   1385e:	490a      	ldr	r1, [pc, #40]	; (13888 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
   13860:	9b01      	ldr	r3, [sp, #4]
   13862:	9a00      	ldr	r2, [sp, #0]
   13864:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
   13868:	4a06      	ldr	r2, [pc, #24]	; (13884 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   1386a:	9b01      	ldr	r3, [sp, #4]
   1386c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13870:	1c5a      	adds	r2, r3, #1
   13872:	4904      	ldr	r1, [pc, #16]	; (13884 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   13874:	9b01      	ldr	r3, [sp, #4]
   13876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1387a:	bf00      	nop
   1387c:	b003      	add	sp, #12
   1387e:	f85d fb04 	ldr.w	pc, [sp], #4
   13882:	bf00      	nop
   13884:	1fff9580 	.word	0x1fff9580
   13888:	1fff957c 	.word	0x1fff957c

0001388c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
   1388c:	b500      	push	{lr}
   1388e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13890:	f7ed ff8a 	bl	17a8 <Sys_GetCoreID>
   13894:	4603      	mov	r3, r0
   13896:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
   13898:	4a0d      	ldr	r2, [pc, #52]	; (138d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   1389a:	9b01      	ldr	r3, [sp, #4]
   1389c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138a0:	1e5a      	subs	r2, r3, #1
   138a2:	490b      	ldr	r1, [pc, #44]	; (138d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   138a4:	9b01      	ldr	r3, [sp, #4]
   138a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
   138aa:	4a0a      	ldr	r2, [pc, #40]	; (138d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
   138ac:	9b01      	ldr	r3, [sp, #4]
   138ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138b2:	f003 0301 	and.w	r3, r3, #1
   138b6:	2b00      	cmp	r3, #0
   138b8:	d106      	bne.n	138c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
   138ba:	4a05      	ldr	r2, [pc, #20]	; (138d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   138bc:	9b01      	ldr	r3, [sp, #4]
   138be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138c2:	2b00      	cmp	r3, #0
   138c4:	d100      	bne.n	138c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   138c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   138c8:	bf00      	nop
   138ca:	b003      	add	sp, #12
   138cc:	f85d fb04 	ldr.w	pc, [sp], #4
   138d0:	1fff9580 	.word	0x1fff9580
   138d4:	1fff957c 	.word	0x1fff957c

000138d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
   138d8:	b500      	push	{lr}
   138da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   138dc:	f7ed ff64 	bl	17a8 <Sys_GetCoreID>
   138e0:	4603      	mov	r3, r0
   138e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
   138e4:	4a10      	ldr	r2, [pc, #64]	; (13928 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   138e6:	9b01      	ldr	r3, [sp, #4]
   138e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138ec:	2b00      	cmp	r3, #0
   138ee:	d10d      	bne.n	1390c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   138f0:	f7ed f809 	bl	906 <Port_schm_read_msr>
   138f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   138f6:	9b00      	ldr	r3, [sp, #0]
   138f8:	f003 0301 	and.w	r3, r3, #1
   138fc:	2b00      	cmp	r3, #0
   138fe:	d100      	bne.n	13902 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13900:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   13902:	490a      	ldr	r1, [pc, #40]	; (1392c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
   13904:	9b01      	ldr	r3, [sp, #4]
   13906:	9a00      	ldr	r2, [sp, #0]
   13908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
   1390c:	4a06      	ldr	r2, [pc, #24]	; (13928 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   1390e:	9b01      	ldr	r3, [sp, #4]
   13910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13914:	1c5a      	adds	r2, r3, #1
   13916:	4904      	ldr	r1, [pc, #16]	; (13928 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   13918:	9b01      	ldr	r3, [sp, #4]
   1391a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1391e:	bf00      	nop
   13920:	b003      	add	sp, #12
   13922:	f85d fb04 	ldr.w	pc, [sp], #4
   13926:	bf00      	nop
   13928:	1fff9588 	.word	0x1fff9588
   1392c:	1fff9584 	.word	0x1fff9584

00013930 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
   13930:	b500      	push	{lr}
   13932:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13934:	f7ed ff38 	bl	17a8 <Sys_GetCoreID>
   13938:	4603      	mov	r3, r0
   1393a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
   1393c:	4a0d      	ldr	r2, [pc, #52]	; (13974 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   1393e:	9b01      	ldr	r3, [sp, #4]
   13940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13944:	1e5a      	subs	r2, r3, #1
   13946:	490b      	ldr	r1, [pc, #44]	; (13974 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   13948:	9b01      	ldr	r3, [sp, #4]
   1394a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   1394e:	4a0a      	ldr	r2, [pc, #40]	; (13978 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
   13950:	9b01      	ldr	r3, [sp, #4]
   13952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13956:	f003 0301 	and.w	r3, r3, #1
   1395a:	2b00      	cmp	r3, #0
   1395c:	d106      	bne.n	1396c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
   1395e:	4a05      	ldr	r2, [pc, #20]	; (13974 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   13960:	9b01      	ldr	r3, [sp, #4]
   13962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13966:	2b00      	cmp	r3, #0
   13968:	d100      	bne.n	1396c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1396a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1396c:	bf00      	nop
   1396e:	b003      	add	sp, #12
   13970:	f85d fb04 	ldr.w	pc, [sp], #4
   13974:	1fff9588 	.word	0x1fff9588
   13978:	1fff9584 	.word	0x1fff9584

0001397c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
   1397c:	b500      	push	{lr}
   1397e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13980:	f7ed ff12 	bl	17a8 <Sys_GetCoreID>
   13984:	4603      	mov	r3, r0
   13986:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
   13988:	4a10      	ldr	r2, [pc, #64]	; (139cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   1398a:	9b01      	ldr	r3, [sp, #4]
   1398c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13990:	2b00      	cmp	r3, #0
   13992:	d10d      	bne.n	139b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13994:	f7ec ffb7 	bl	906 <Port_schm_read_msr>
   13998:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1399a:	9b00      	ldr	r3, [sp, #0]
   1399c:	f003 0301 	and.w	r3, r3, #1
   139a0:	2b00      	cmp	r3, #0
   139a2:	d100      	bne.n	139a6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   139a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   139a6:	490a      	ldr	r1, [pc, #40]	; (139d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
   139a8:	9b01      	ldr	r3, [sp, #4]
   139aa:	9a00      	ldr	r2, [sp, #0]
   139ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
   139b0:	4a06      	ldr	r2, [pc, #24]	; (139cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   139b2:	9b01      	ldr	r3, [sp, #4]
   139b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139b8:	1c5a      	adds	r2, r3, #1
   139ba:	4904      	ldr	r1, [pc, #16]	; (139cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   139bc:	9b01      	ldr	r3, [sp, #4]
   139be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   139c2:	bf00      	nop
   139c4:	b003      	add	sp, #12
   139c6:	f85d fb04 	ldr.w	pc, [sp], #4
   139ca:	bf00      	nop
   139cc:	1fff9590 	.word	0x1fff9590
   139d0:	1fff958c 	.word	0x1fff958c

000139d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
   139d4:	b500      	push	{lr}
   139d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   139d8:	f7ed fee6 	bl	17a8 <Sys_GetCoreID>
   139dc:	4603      	mov	r3, r0
   139de:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
   139e0:	4a0d      	ldr	r2, [pc, #52]	; (13a18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   139e2:	9b01      	ldr	r3, [sp, #4]
   139e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139e8:	1e5a      	subs	r2, r3, #1
   139ea:	490b      	ldr	r1, [pc, #44]	; (13a18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   139ec:	9b01      	ldr	r3, [sp, #4]
   139ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   139f2:	4a0a      	ldr	r2, [pc, #40]	; (13a1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
   139f4:	9b01      	ldr	r3, [sp, #4]
   139f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139fa:	f003 0301 	and.w	r3, r3, #1
   139fe:	2b00      	cmp	r3, #0
   13a00:	d106      	bne.n	13a10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
   13a02:	4a05      	ldr	r2, [pc, #20]	; (13a18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   13a04:	9b01      	ldr	r3, [sp, #4]
   13a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a0a:	2b00      	cmp	r3, #0
   13a0c:	d100      	bne.n	13a10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13a0e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13a10:	bf00      	nop
   13a12:	b003      	add	sp, #12
   13a14:	f85d fb04 	ldr.w	pc, [sp], #4
   13a18:	1fff9590 	.word	0x1fff9590
   13a1c:	1fff958c 	.word	0x1fff958c

00013a20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
   13a20:	b500      	push	{lr}
   13a22:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13a24:	f7ed fec0 	bl	17a8 <Sys_GetCoreID>
   13a28:	4603      	mov	r3, r0
   13a2a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
   13a2c:	4a10      	ldr	r2, [pc, #64]	; (13a70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   13a2e:	9b01      	ldr	r3, [sp, #4]
   13a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a34:	2b00      	cmp	r3, #0
   13a36:	d10d      	bne.n	13a54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13a38:	f7ec ff65 	bl	906 <Port_schm_read_msr>
   13a3c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13a3e:	9b00      	ldr	r3, [sp, #0]
   13a40:	f003 0301 	and.w	r3, r3, #1
   13a44:	2b00      	cmp	r3, #0
   13a46:	d100      	bne.n	13a4a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13a48:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   13a4a:	490a      	ldr	r1, [pc, #40]	; (13a74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
   13a4c:	9b01      	ldr	r3, [sp, #4]
   13a4e:	9a00      	ldr	r2, [sp, #0]
   13a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
   13a54:	4a06      	ldr	r2, [pc, #24]	; (13a70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   13a56:	9b01      	ldr	r3, [sp, #4]
   13a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a5c:	1c5a      	adds	r2, r3, #1
   13a5e:	4904      	ldr	r1, [pc, #16]	; (13a70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   13a60:	9b01      	ldr	r3, [sp, #4]
   13a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13a66:	bf00      	nop
   13a68:	b003      	add	sp, #12
   13a6a:	f85d fb04 	ldr.w	pc, [sp], #4
   13a6e:	bf00      	nop
   13a70:	1fff9598 	.word	0x1fff9598
   13a74:	1fff9594 	.word	0x1fff9594

00013a78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
   13a78:	b500      	push	{lr}
   13a7a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13a7c:	f7ed fe94 	bl	17a8 <Sys_GetCoreID>
   13a80:	4603      	mov	r3, r0
   13a82:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
   13a84:	4a0d      	ldr	r2, [pc, #52]	; (13abc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   13a86:	9b01      	ldr	r3, [sp, #4]
   13a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a8c:	1e5a      	subs	r2, r3, #1
   13a8e:	490b      	ldr	r1, [pc, #44]	; (13abc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   13a90:	9b01      	ldr	r3, [sp, #4]
   13a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   13a96:	4a0a      	ldr	r2, [pc, #40]	; (13ac0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
   13a98:	9b01      	ldr	r3, [sp, #4]
   13a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a9e:	f003 0301 	and.w	r3, r3, #1
   13aa2:	2b00      	cmp	r3, #0
   13aa4:	d106      	bne.n	13ab4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
   13aa6:	4a05      	ldr	r2, [pc, #20]	; (13abc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   13aa8:	9b01      	ldr	r3, [sp, #4]
   13aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13aae:	2b00      	cmp	r3, #0
   13ab0:	d100      	bne.n	13ab4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13ab2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13ab4:	bf00      	nop
   13ab6:	b003      	add	sp, #12
   13ab8:	f85d fb04 	ldr.w	pc, [sp], #4
   13abc:	1fff9598 	.word	0x1fff9598
   13ac0:	1fff9594 	.word	0x1fff9594

00013ac4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
   13ac4:	b500      	push	{lr}
   13ac6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13ac8:	f7ed fe6e 	bl	17a8 <Sys_GetCoreID>
   13acc:	4603      	mov	r3, r0
   13ace:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
   13ad0:	4a10      	ldr	r2, [pc, #64]	; (13b14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   13ad2:	9b01      	ldr	r3, [sp, #4]
   13ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ad8:	2b00      	cmp	r3, #0
   13ada:	d10d      	bne.n	13af8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13adc:	f7ec ff13 	bl	906 <Port_schm_read_msr>
   13ae0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13ae2:	9b00      	ldr	r3, [sp, #0]
   13ae4:	f003 0301 	and.w	r3, r3, #1
   13ae8:	2b00      	cmp	r3, #0
   13aea:	d100      	bne.n	13aee <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13aec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   13aee:	490a      	ldr	r1, [pc, #40]	; (13b18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
   13af0:	9b01      	ldr	r3, [sp, #4]
   13af2:	9a00      	ldr	r2, [sp, #0]
   13af4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
   13af8:	4a06      	ldr	r2, [pc, #24]	; (13b14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   13afa:	9b01      	ldr	r3, [sp, #4]
   13afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b00:	1c5a      	adds	r2, r3, #1
   13b02:	4904      	ldr	r1, [pc, #16]	; (13b14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   13b04:	9b01      	ldr	r3, [sp, #4]
   13b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13b0a:	bf00      	nop
   13b0c:	b003      	add	sp, #12
   13b0e:	f85d fb04 	ldr.w	pc, [sp], #4
   13b12:	bf00      	nop
   13b14:	1fff95a0 	.word	0x1fff95a0
   13b18:	1fff959c 	.word	0x1fff959c

00013b1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
   13b1c:	b500      	push	{lr}
   13b1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13b20:	f7ed fe42 	bl	17a8 <Sys_GetCoreID>
   13b24:	4603      	mov	r3, r0
   13b26:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
   13b28:	4a0d      	ldr	r2, [pc, #52]	; (13b60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   13b2a:	9b01      	ldr	r3, [sp, #4]
   13b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b30:	1e5a      	subs	r2, r3, #1
   13b32:	490b      	ldr	r1, [pc, #44]	; (13b60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   13b34:	9b01      	ldr	r3, [sp, #4]
   13b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   13b3a:	4a0a      	ldr	r2, [pc, #40]	; (13b64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
   13b3c:	9b01      	ldr	r3, [sp, #4]
   13b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b42:	f003 0301 	and.w	r3, r3, #1
   13b46:	2b00      	cmp	r3, #0
   13b48:	d106      	bne.n	13b58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
   13b4a:	4a05      	ldr	r2, [pc, #20]	; (13b60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   13b4c:	9b01      	ldr	r3, [sp, #4]
   13b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b52:	2b00      	cmp	r3, #0
   13b54:	d100      	bne.n	13b58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13b56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13b58:	bf00      	nop
   13b5a:	b003      	add	sp, #12
   13b5c:	f85d fb04 	ldr.w	pc, [sp], #4
   13b60:	1fff95a0 	.word	0x1fff95a0
   13b64:	1fff959c 	.word	0x1fff959c

00013b68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
   13b68:	b500      	push	{lr}
   13b6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13b6c:	f7ed fe1c 	bl	17a8 <Sys_GetCoreID>
   13b70:	4603      	mov	r3, r0
   13b72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
   13b74:	4a10      	ldr	r2, [pc, #64]	; (13bb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   13b76:	9b01      	ldr	r3, [sp, #4]
   13b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b7c:	2b00      	cmp	r3, #0
   13b7e:	d10d      	bne.n	13b9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13b80:	f7ec fec1 	bl	906 <Port_schm_read_msr>
   13b84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13b86:	9b00      	ldr	r3, [sp, #0]
   13b88:	f003 0301 	and.w	r3, r3, #1
   13b8c:	2b00      	cmp	r3, #0
   13b8e:	d100      	bne.n	13b92 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13b90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   13b92:	490a      	ldr	r1, [pc, #40]	; (13bbc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
   13b94:	9b01      	ldr	r3, [sp, #4]
   13b96:	9a00      	ldr	r2, [sp, #0]
   13b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
   13b9c:	4a06      	ldr	r2, [pc, #24]	; (13bb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   13b9e:	9b01      	ldr	r3, [sp, #4]
   13ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ba4:	1c5a      	adds	r2, r3, #1
   13ba6:	4904      	ldr	r1, [pc, #16]	; (13bb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   13ba8:	9b01      	ldr	r3, [sp, #4]
   13baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13bae:	bf00      	nop
   13bb0:	b003      	add	sp, #12
   13bb2:	f85d fb04 	ldr.w	pc, [sp], #4
   13bb6:	bf00      	nop
   13bb8:	1fff95a8 	.word	0x1fff95a8
   13bbc:	1fff95a4 	.word	0x1fff95a4

00013bc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
   13bc0:	b500      	push	{lr}
   13bc2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13bc4:	f7ed fdf0 	bl	17a8 <Sys_GetCoreID>
   13bc8:	4603      	mov	r3, r0
   13bca:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
   13bcc:	4a0d      	ldr	r2, [pc, #52]	; (13c04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   13bce:	9b01      	ldr	r3, [sp, #4]
   13bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bd4:	1e5a      	subs	r2, r3, #1
   13bd6:	490b      	ldr	r1, [pc, #44]	; (13c04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   13bd8:	9b01      	ldr	r3, [sp, #4]
   13bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   13bde:	4a0a      	ldr	r2, [pc, #40]	; (13c08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
   13be0:	9b01      	ldr	r3, [sp, #4]
   13be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13be6:	f003 0301 	and.w	r3, r3, #1
   13bea:	2b00      	cmp	r3, #0
   13bec:	d106      	bne.n	13bfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
   13bee:	4a05      	ldr	r2, [pc, #20]	; (13c04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   13bf0:	9b01      	ldr	r3, [sp, #4]
   13bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bf6:	2b00      	cmp	r3, #0
   13bf8:	d100      	bne.n	13bfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13bfa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13bfc:	bf00      	nop
   13bfe:	b003      	add	sp, #12
   13c00:	f85d fb04 	ldr.w	pc, [sp], #4
   13c04:	1fff95a8 	.word	0x1fff95a8
   13c08:	1fff95a4 	.word	0x1fff95a4

00013c0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
   13c0c:	b500      	push	{lr}
   13c0e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13c10:	f7ed fdca 	bl	17a8 <Sys_GetCoreID>
   13c14:	4603      	mov	r3, r0
   13c16:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
   13c18:	4a10      	ldr	r2, [pc, #64]	; (13c5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   13c1a:	9b01      	ldr	r3, [sp, #4]
   13c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c20:	2b00      	cmp	r3, #0
   13c22:	d10d      	bne.n	13c40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13c24:	f7ec fe6f 	bl	906 <Port_schm_read_msr>
   13c28:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13c2a:	9b00      	ldr	r3, [sp, #0]
   13c2c:	f003 0301 	and.w	r3, r3, #1
   13c30:	2b00      	cmp	r3, #0
   13c32:	d100      	bne.n	13c36 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13c34:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   13c36:	490a      	ldr	r1, [pc, #40]	; (13c60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
   13c38:	9b01      	ldr	r3, [sp, #4]
   13c3a:	9a00      	ldr	r2, [sp, #0]
   13c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
   13c40:	4a06      	ldr	r2, [pc, #24]	; (13c5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   13c42:	9b01      	ldr	r3, [sp, #4]
   13c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c48:	1c5a      	adds	r2, r3, #1
   13c4a:	4904      	ldr	r1, [pc, #16]	; (13c5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   13c4c:	9b01      	ldr	r3, [sp, #4]
   13c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13c52:	bf00      	nop
   13c54:	b003      	add	sp, #12
   13c56:	f85d fb04 	ldr.w	pc, [sp], #4
   13c5a:	bf00      	nop
   13c5c:	1fff95b0 	.word	0x1fff95b0
   13c60:	1fff95ac 	.word	0x1fff95ac

00013c64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
   13c64:	b500      	push	{lr}
   13c66:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13c68:	f7ed fd9e 	bl	17a8 <Sys_GetCoreID>
   13c6c:	4603      	mov	r3, r0
   13c6e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
   13c70:	4a0d      	ldr	r2, [pc, #52]	; (13ca8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   13c72:	9b01      	ldr	r3, [sp, #4]
   13c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c78:	1e5a      	subs	r2, r3, #1
   13c7a:	490b      	ldr	r1, [pc, #44]	; (13ca8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   13c7c:	9b01      	ldr	r3, [sp, #4]
   13c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   13c82:	4a0a      	ldr	r2, [pc, #40]	; (13cac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
   13c84:	9b01      	ldr	r3, [sp, #4]
   13c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c8a:	f003 0301 	and.w	r3, r3, #1
   13c8e:	2b00      	cmp	r3, #0
   13c90:	d106      	bne.n	13ca0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
   13c92:	4a05      	ldr	r2, [pc, #20]	; (13ca8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   13c94:	9b01      	ldr	r3, [sp, #4]
   13c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c9a:	2b00      	cmp	r3, #0
   13c9c:	d100      	bne.n	13ca0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13c9e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13ca0:	bf00      	nop
   13ca2:	b003      	add	sp, #12
   13ca4:	f85d fb04 	ldr.w	pc, [sp], #4
   13ca8:	1fff95b0 	.word	0x1fff95b0
   13cac:	1fff95ac 	.word	0x1fff95ac

00013cb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
   13cb0:	b500      	push	{lr}
   13cb2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13cb4:	f7ed fd78 	bl	17a8 <Sys_GetCoreID>
   13cb8:	4603      	mov	r3, r0
   13cba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
   13cbc:	4a10      	ldr	r2, [pc, #64]	; (13d00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   13cbe:	9b01      	ldr	r3, [sp, #4]
   13cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13cc4:	2b00      	cmp	r3, #0
   13cc6:	d10d      	bne.n	13ce4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13cc8:	f7ec fe1d 	bl	906 <Port_schm_read_msr>
   13ccc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13cce:	9b00      	ldr	r3, [sp, #0]
   13cd0:	f003 0301 	and.w	r3, r3, #1
   13cd4:	2b00      	cmp	r3, #0
   13cd6:	d100      	bne.n	13cda <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13cd8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   13cda:	490a      	ldr	r1, [pc, #40]	; (13d04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
   13cdc:	9b01      	ldr	r3, [sp, #4]
   13cde:	9a00      	ldr	r2, [sp, #0]
   13ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
   13ce4:	4a06      	ldr	r2, [pc, #24]	; (13d00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   13ce6:	9b01      	ldr	r3, [sp, #4]
   13ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13cec:	1c5a      	adds	r2, r3, #1
   13cee:	4904      	ldr	r1, [pc, #16]	; (13d00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   13cf0:	9b01      	ldr	r3, [sp, #4]
   13cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13cf6:	bf00      	nop
   13cf8:	b003      	add	sp, #12
   13cfa:	f85d fb04 	ldr.w	pc, [sp], #4
   13cfe:	bf00      	nop
   13d00:	1fff95b8 	.word	0x1fff95b8
   13d04:	1fff95b4 	.word	0x1fff95b4

00013d08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
   13d08:	b500      	push	{lr}
   13d0a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13d0c:	f7ed fd4c 	bl	17a8 <Sys_GetCoreID>
   13d10:	4603      	mov	r3, r0
   13d12:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
   13d14:	4a0d      	ldr	r2, [pc, #52]	; (13d4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   13d16:	9b01      	ldr	r3, [sp, #4]
   13d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d1c:	1e5a      	subs	r2, r3, #1
   13d1e:	490b      	ldr	r1, [pc, #44]	; (13d4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   13d20:	9b01      	ldr	r3, [sp, #4]
   13d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   13d26:	4a0a      	ldr	r2, [pc, #40]	; (13d50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
   13d28:	9b01      	ldr	r3, [sp, #4]
   13d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d2e:	f003 0301 	and.w	r3, r3, #1
   13d32:	2b00      	cmp	r3, #0
   13d34:	d106      	bne.n	13d44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
   13d36:	4a05      	ldr	r2, [pc, #20]	; (13d4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   13d38:	9b01      	ldr	r3, [sp, #4]
   13d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d3e:	2b00      	cmp	r3, #0
   13d40:	d100      	bne.n	13d44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13d42:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13d44:	bf00      	nop
   13d46:	b003      	add	sp, #12
   13d48:	f85d fb04 	ldr.w	pc, [sp], #4
   13d4c:	1fff95b8 	.word	0x1fff95b8
   13d50:	1fff95b4 	.word	0x1fff95b4

00013d54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
   13d54:	b500      	push	{lr}
   13d56:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13d58:	f7ed fd26 	bl	17a8 <Sys_GetCoreID>
   13d5c:	4603      	mov	r3, r0
   13d5e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
   13d60:	4a10      	ldr	r2, [pc, #64]	; (13da4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   13d62:	9b01      	ldr	r3, [sp, #4]
   13d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d68:	2b00      	cmp	r3, #0
   13d6a:	d10d      	bne.n	13d88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13d6c:	f7ec fdcb 	bl	906 <Port_schm_read_msr>
   13d70:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13d72:	9b00      	ldr	r3, [sp, #0]
   13d74:	f003 0301 	and.w	r3, r3, #1
   13d78:	2b00      	cmp	r3, #0
   13d7a:	d100      	bne.n	13d7e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13d7c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   13d7e:	490a      	ldr	r1, [pc, #40]	; (13da8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
   13d80:	9b01      	ldr	r3, [sp, #4]
   13d82:	9a00      	ldr	r2, [sp, #0]
   13d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
   13d88:	4a06      	ldr	r2, [pc, #24]	; (13da4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   13d8a:	9b01      	ldr	r3, [sp, #4]
   13d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d90:	1c5a      	adds	r2, r3, #1
   13d92:	4904      	ldr	r1, [pc, #16]	; (13da4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   13d94:	9b01      	ldr	r3, [sp, #4]
   13d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13d9a:	bf00      	nop
   13d9c:	b003      	add	sp, #12
   13d9e:	f85d fb04 	ldr.w	pc, [sp], #4
   13da2:	bf00      	nop
   13da4:	1fff95c0 	.word	0x1fff95c0
   13da8:	1fff95bc 	.word	0x1fff95bc

00013dac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
   13dac:	b500      	push	{lr}
   13dae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13db0:	f7ed fcfa 	bl	17a8 <Sys_GetCoreID>
   13db4:	4603      	mov	r3, r0
   13db6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
   13db8:	4a0d      	ldr	r2, [pc, #52]	; (13df0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   13dba:	9b01      	ldr	r3, [sp, #4]
   13dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13dc0:	1e5a      	subs	r2, r3, #1
   13dc2:	490b      	ldr	r1, [pc, #44]	; (13df0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   13dc4:	9b01      	ldr	r3, [sp, #4]
   13dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   13dca:	4a0a      	ldr	r2, [pc, #40]	; (13df4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
   13dcc:	9b01      	ldr	r3, [sp, #4]
   13dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13dd2:	f003 0301 	and.w	r3, r3, #1
   13dd6:	2b00      	cmp	r3, #0
   13dd8:	d106      	bne.n	13de8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
   13dda:	4a05      	ldr	r2, [pc, #20]	; (13df0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   13ddc:	9b01      	ldr	r3, [sp, #4]
   13dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13de2:	2b00      	cmp	r3, #0
   13de4:	d100      	bne.n	13de8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13de6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13de8:	bf00      	nop
   13dea:	b003      	add	sp, #12
   13dec:	f85d fb04 	ldr.w	pc, [sp], #4
   13df0:	1fff95c0 	.word	0x1fff95c0
   13df4:	1fff95bc 	.word	0x1fff95bc

00013df8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
   13df8:	b500      	push	{lr}
   13dfa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13dfc:	f7ed fcd4 	bl	17a8 <Sys_GetCoreID>
   13e00:	4603      	mov	r3, r0
   13e02:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
   13e04:	4a10      	ldr	r2, [pc, #64]	; (13e48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   13e06:	9b01      	ldr	r3, [sp, #4]
   13e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e0c:	2b00      	cmp	r3, #0
   13e0e:	d10d      	bne.n	13e2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13e10:	f7ec fd79 	bl	906 <Port_schm_read_msr>
   13e14:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13e16:	9b00      	ldr	r3, [sp, #0]
   13e18:	f003 0301 	and.w	r3, r3, #1
   13e1c:	2b00      	cmp	r3, #0
   13e1e:	d100      	bne.n	13e22 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13e20:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   13e22:	490a      	ldr	r1, [pc, #40]	; (13e4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
   13e24:	9b01      	ldr	r3, [sp, #4]
   13e26:	9a00      	ldr	r2, [sp, #0]
   13e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
   13e2c:	4a06      	ldr	r2, [pc, #24]	; (13e48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   13e2e:	9b01      	ldr	r3, [sp, #4]
   13e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e34:	1c5a      	adds	r2, r3, #1
   13e36:	4904      	ldr	r1, [pc, #16]	; (13e48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   13e38:	9b01      	ldr	r3, [sp, #4]
   13e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13e3e:	bf00      	nop
   13e40:	b003      	add	sp, #12
   13e42:	f85d fb04 	ldr.w	pc, [sp], #4
   13e46:	bf00      	nop
   13e48:	1fff95c8 	.word	0x1fff95c8
   13e4c:	1fff95c4 	.word	0x1fff95c4

00013e50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
   13e50:	b500      	push	{lr}
   13e52:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13e54:	f7ed fca8 	bl	17a8 <Sys_GetCoreID>
   13e58:	4603      	mov	r3, r0
   13e5a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
   13e5c:	4a0d      	ldr	r2, [pc, #52]	; (13e94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   13e5e:	9b01      	ldr	r3, [sp, #4]
   13e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e64:	1e5a      	subs	r2, r3, #1
   13e66:	490b      	ldr	r1, [pc, #44]	; (13e94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   13e68:	9b01      	ldr	r3, [sp, #4]
   13e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   13e6e:	4a0a      	ldr	r2, [pc, #40]	; (13e98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
   13e70:	9b01      	ldr	r3, [sp, #4]
   13e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e76:	f003 0301 	and.w	r3, r3, #1
   13e7a:	2b00      	cmp	r3, #0
   13e7c:	d106      	bne.n	13e8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
   13e7e:	4a05      	ldr	r2, [pc, #20]	; (13e94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   13e80:	9b01      	ldr	r3, [sp, #4]
   13e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e86:	2b00      	cmp	r3, #0
   13e88:	d100      	bne.n	13e8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13e8a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13e8c:	bf00      	nop
   13e8e:	b003      	add	sp, #12
   13e90:	f85d fb04 	ldr.w	pc, [sp], #4
   13e94:	1fff95c8 	.word	0x1fff95c8
   13e98:	1fff95c4 	.word	0x1fff95c4

00013e9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
   13e9c:	b500      	push	{lr}
   13e9e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13ea0:	f7ed fc82 	bl	17a8 <Sys_GetCoreID>
   13ea4:	4603      	mov	r3, r0
   13ea6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
   13ea8:	4a10      	ldr	r2, [pc, #64]	; (13eec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   13eaa:	9b01      	ldr	r3, [sp, #4]
   13eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13eb0:	2b00      	cmp	r3, #0
   13eb2:	d10d      	bne.n	13ed0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13eb4:	f7ec fd27 	bl	906 <Port_schm_read_msr>
   13eb8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13eba:	9b00      	ldr	r3, [sp, #0]
   13ebc:	f003 0301 	and.w	r3, r3, #1
   13ec0:	2b00      	cmp	r3, #0
   13ec2:	d100      	bne.n	13ec6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13ec4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   13ec6:	490a      	ldr	r1, [pc, #40]	; (13ef0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
   13ec8:	9b01      	ldr	r3, [sp, #4]
   13eca:	9a00      	ldr	r2, [sp, #0]
   13ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
   13ed0:	4a06      	ldr	r2, [pc, #24]	; (13eec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   13ed2:	9b01      	ldr	r3, [sp, #4]
   13ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ed8:	1c5a      	adds	r2, r3, #1
   13eda:	4904      	ldr	r1, [pc, #16]	; (13eec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   13edc:	9b01      	ldr	r3, [sp, #4]
   13ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13ee2:	bf00      	nop
   13ee4:	b003      	add	sp, #12
   13ee6:	f85d fb04 	ldr.w	pc, [sp], #4
   13eea:	bf00      	nop
   13eec:	1fff95d0 	.word	0x1fff95d0
   13ef0:	1fff95cc 	.word	0x1fff95cc

00013ef4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
   13ef4:	b500      	push	{lr}
   13ef6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13ef8:	f7ed fc56 	bl	17a8 <Sys_GetCoreID>
   13efc:	4603      	mov	r3, r0
   13efe:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
   13f00:	4a0d      	ldr	r2, [pc, #52]	; (13f38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   13f02:	9b01      	ldr	r3, [sp, #4]
   13f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f08:	1e5a      	subs	r2, r3, #1
   13f0a:	490b      	ldr	r1, [pc, #44]	; (13f38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   13f0c:	9b01      	ldr	r3, [sp, #4]
   13f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   13f12:	4a0a      	ldr	r2, [pc, #40]	; (13f3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
   13f14:	9b01      	ldr	r3, [sp, #4]
   13f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f1a:	f003 0301 	and.w	r3, r3, #1
   13f1e:	2b00      	cmp	r3, #0
   13f20:	d106      	bne.n	13f30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
   13f22:	4a05      	ldr	r2, [pc, #20]	; (13f38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   13f24:	9b01      	ldr	r3, [sp, #4]
   13f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f2a:	2b00      	cmp	r3, #0
   13f2c:	d100      	bne.n	13f30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13f2e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13f30:	bf00      	nop
   13f32:	b003      	add	sp, #12
   13f34:	f85d fb04 	ldr.w	pc, [sp], #4
   13f38:	1fff95d0 	.word	0x1fff95d0
   13f3c:	1fff95cc 	.word	0x1fff95cc

00013f40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
   13f40:	b500      	push	{lr}
   13f42:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13f44:	f7ed fc30 	bl	17a8 <Sys_GetCoreID>
   13f48:	4603      	mov	r3, r0
   13f4a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
   13f4c:	4a10      	ldr	r2, [pc, #64]	; (13f90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   13f4e:	9b01      	ldr	r3, [sp, #4]
   13f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f54:	2b00      	cmp	r3, #0
   13f56:	d10d      	bne.n	13f74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13f58:	f7ec fcd5 	bl	906 <Port_schm_read_msr>
   13f5c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13f5e:	9b00      	ldr	r3, [sp, #0]
   13f60:	f003 0301 	and.w	r3, r3, #1
   13f64:	2b00      	cmp	r3, #0
   13f66:	d100      	bne.n	13f6a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13f68:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   13f6a:	490a      	ldr	r1, [pc, #40]	; (13f94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
   13f6c:	9b01      	ldr	r3, [sp, #4]
   13f6e:	9a00      	ldr	r2, [sp, #0]
   13f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
   13f74:	4a06      	ldr	r2, [pc, #24]	; (13f90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   13f76:	9b01      	ldr	r3, [sp, #4]
   13f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f7c:	1c5a      	adds	r2, r3, #1
   13f7e:	4904      	ldr	r1, [pc, #16]	; (13f90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   13f80:	9b01      	ldr	r3, [sp, #4]
   13f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13f86:	bf00      	nop
   13f88:	b003      	add	sp, #12
   13f8a:	f85d fb04 	ldr.w	pc, [sp], #4
   13f8e:	bf00      	nop
   13f90:	1fff95d8 	.word	0x1fff95d8
   13f94:	1fff95d4 	.word	0x1fff95d4

00013f98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
   13f98:	b500      	push	{lr}
   13f9a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13f9c:	f7ed fc04 	bl	17a8 <Sys_GetCoreID>
   13fa0:	4603      	mov	r3, r0
   13fa2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
   13fa4:	4a0d      	ldr	r2, [pc, #52]	; (13fdc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   13fa6:	9b01      	ldr	r3, [sp, #4]
   13fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13fac:	1e5a      	subs	r2, r3, #1
   13fae:	490b      	ldr	r1, [pc, #44]	; (13fdc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   13fb0:	9b01      	ldr	r3, [sp, #4]
   13fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   13fb6:	4a0a      	ldr	r2, [pc, #40]	; (13fe0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
   13fb8:	9b01      	ldr	r3, [sp, #4]
   13fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13fbe:	f003 0301 	and.w	r3, r3, #1
   13fc2:	2b00      	cmp	r3, #0
   13fc4:	d106      	bne.n	13fd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
   13fc6:	4a05      	ldr	r2, [pc, #20]	; (13fdc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   13fc8:	9b01      	ldr	r3, [sp, #4]
   13fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13fce:	2b00      	cmp	r3, #0
   13fd0:	d100      	bne.n	13fd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13fd2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13fd4:	bf00      	nop
   13fd6:	b003      	add	sp, #12
   13fd8:	f85d fb04 	ldr.w	pc, [sp], #4
   13fdc:	1fff95d8 	.word	0x1fff95d8
   13fe0:	1fff95d4 	.word	0x1fff95d4

00013fe4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
   13fe4:	b500      	push	{lr}
   13fe6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13fe8:	f7ed fbde 	bl	17a8 <Sys_GetCoreID>
   13fec:	4603      	mov	r3, r0
   13fee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
   13ff0:	4a10      	ldr	r2, [pc, #64]	; (14034 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   13ff2:	9b01      	ldr	r3, [sp, #4]
   13ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ff8:	2b00      	cmp	r3, #0
   13ffa:	d10d      	bne.n	14018 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13ffc:	f7ec fc83 	bl	906 <Port_schm_read_msr>
   14000:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14002:	9b00      	ldr	r3, [sp, #0]
   14004:	f003 0301 	and.w	r3, r3, #1
   14008:	2b00      	cmp	r3, #0
   1400a:	d100      	bne.n	1400e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1400c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
   1400e:	490a      	ldr	r1, [pc, #40]	; (14038 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
   14010:	9b01      	ldr	r3, [sp, #4]
   14012:	9a00      	ldr	r2, [sp, #0]
   14014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
   14018:	4a06      	ldr	r2, [pc, #24]	; (14034 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   1401a:	9b01      	ldr	r3, [sp, #4]
   1401c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14020:	1c5a      	adds	r2, r3, #1
   14022:	4904      	ldr	r1, [pc, #16]	; (14034 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   14024:	9b01      	ldr	r3, [sp, #4]
   14026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1402a:	bf00      	nop
   1402c:	b003      	add	sp, #12
   1402e:	f85d fb04 	ldr.w	pc, [sp], #4
   14032:	bf00      	nop
   14034:	1fff95e0 	.word	0x1fff95e0
   14038:	1fff95dc 	.word	0x1fff95dc

0001403c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
   1403c:	b500      	push	{lr}
   1403e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14040:	f7ed fbb2 	bl	17a8 <Sys_GetCoreID>
   14044:	4603      	mov	r3, r0
   14046:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
   14048:	4a0d      	ldr	r2, [pc, #52]	; (14080 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   1404a:	9b01      	ldr	r3, [sp, #4]
   1404c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14050:	1e5a      	subs	r2, r3, #1
   14052:	490b      	ldr	r1, [pc, #44]	; (14080 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   14054:	9b01      	ldr	r3, [sp, #4]
   14056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
   1405a:	4a0a      	ldr	r2, [pc, #40]	; (14084 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
   1405c:	9b01      	ldr	r3, [sp, #4]
   1405e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14062:	f003 0301 	and.w	r3, r3, #1
   14066:	2b00      	cmp	r3, #0
   14068:	d106      	bne.n	14078 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
   1406a:	4a05      	ldr	r2, [pc, #20]	; (14080 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   1406c:	9b01      	ldr	r3, [sp, #4]
   1406e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14072:	2b00      	cmp	r3, #0
   14074:	d100      	bne.n	14078 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14076:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14078:	bf00      	nop
   1407a:	b003      	add	sp, #12
   1407c:	f85d fb04 	ldr.w	pc, [sp], #4
   14080:	1fff95e0 	.word	0x1fff95e0
   14084:	1fff95dc 	.word	0x1fff95dc

00014088 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
   14088:	b500      	push	{lr}
   1408a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1408c:	f7ed fb8c 	bl	17a8 <Sys_GetCoreID>
   14090:	4603      	mov	r3, r0
   14092:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
   14094:	4a10      	ldr	r2, [pc, #64]	; (140d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   14096:	9b01      	ldr	r3, [sp, #4]
   14098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1409c:	2b00      	cmp	r3, #0
   1409e:	d10d      	bne.n	140bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   140a0:	f7ec fc31 	bl	906 <Port_schm_read_msr>
   140a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   140a6:	9b00      	ldr	r3, [sp, #0]
   140a8:	f003 0301 	and.w	r3, r3, #1
   140ac:	2b00      	cmp	r3, #0
   140ae:	d100      	bne.n	140b2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   140b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
   140b2:	490a      	ldr	r1, [pc, #40]	; (140dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
   140b4:	9b01      	ldr	r3, [sp, #4]
   140b6:	9a00      	ldr	r2, [sp, #0]
   140b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
   140bc:	4a06      	ldr	r2, [pc, #24]	; (140d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   140be:	9b01      	ldr	r3, [sp, #4]
   140c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140c4:	1c5a      	adds	r2, r3, #1
   140c6:	4904      	ldr	r1, [pc, #16]	; (140d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   140c8:	9b01      	ldr	r3, [sp, #4]
   140ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   140ce:	bf00      	nop
   140d0:	b003      	add	sp, #12
   140d2:	f85d fb04 	ldr.w	pc, [sp], #4
   140d6:	bf00      	nop
   140d8:	1fff95e8 	.word	0x1fff95e8
   140dc:	1fff95e4 	.word	0x1fff95e4

000140e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
   140e0:	b500      	push	{lr}
   140e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   140e4:	f7ed fb60 	bl	17a8 <Sys_GetCoreID>
   140e8:	4603      	mov	r3, r0
   140ea:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
   140ec:	4a0d      	ldr	r2, [pc, #52]	; (14124 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   140ee:	9b01      	ldr	r3, [sp, #4]
   140f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140f4:	1e5a      	subs	r2, r3, #1
   140f6:	490b      	ldr	r1, [pc, #44]	; (14124 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   140f8:	9b01      	ldr	r3, [sp, #4]
   140fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
   140fe:	4a0a      	ldr	r2, [pc, #40]	; (14128 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
   14100:	9b01      	ldr	r3, [sp, #4]
   14102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14106:	f003 0301 	and.w	r3, r3, #1
   1410a:	2b00      	cmp	r3, #0
   1410c:	d106      	bne.n	1411c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
   1410e:	4a05      	ldr	r2, [pc, #20]	; (14124 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   14110:	9b01      	ldr	r3, [sp, #4]
   14112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14116:	2b00      	cmp	r3, #0
   14118:	d100      	bne.n	1411c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1411a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1411c:	bf00      	nop
   1411e:	b003      	add	sp, #12
   14120:	f85d fb04 	ldr.w	pc, [sp], #4
   14124:	1fff95e8 	.word	0x1fff95e8
   14128:	1fff95e4 	.word	0x1fff95e4

0001412c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
   1412c:	b500      	push	{lr}
   1412e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14130:	f7ed fb3a 	bl	17a8 <Sys_GetCoreID>
   14134:	4603      	mov	r3, r0
   14136:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
   14138:	4a10      	ldr	r2, [pc, #64]	; (1417c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   1413a:	9b01      	ldr	r3, [sp, #4]
   1413c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14140:	2b00      	cmp	r3, #0
   14142:	d10d      	bne.n	14160 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14144:	f7ec fbdf 	bl	906 <Port_schm_read_msr>
   14148:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1414a:	9b00      	ldr	r3, [sp, #0]
   1414c:	f003 0301 	and.w	r3, r3, #1
   14150:	2b00      	cmp	r3, #0
   14152:	d100      	bne.n	14156 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14154:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
   14156:	490a      	ldr	r1, [pc, #40]	; (14180 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
   14158:	9b01      	ldr	r3, [sp, #4]
   1415a:	9a00      	ldr	r2, [sp, #0]
   1415c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
   14160:	4a06      	ldr	r2, [pc, #24]	; (1417c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   14162:	9b01      	ldr	r3, [sp, #4]
   14164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14168:	1c5a      	adds	r2, r3, #1
   1416a:	4904      	ldr	r1, [pc, #16]	; (1417c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   1416c:	9b01      	ldr	r3, [sp, #4]
   1416e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14172:	bf00      	nop
   14174:	b003      	add	sp, #12
   14176:	f85d fb04 	ldr.w	pc, [sp], #4
   1417a:	bf00      	nop
   1417c:	1fff95f0 	.word	0x1fff95f0
   14180:	1fff95ec 	.word	0x1fff95ec

00014184 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
   14184:	b500      	push	{lr}
   14186:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14188:	f7ed fb0e 	bl	17a8 <Sys_GetCoreID>
   1418c:	4603      	mov	r3, r0
   1418e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
   14190:	4a0d      	ldr	r2, [pc, #52]	; (141c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   14192:	9b01      	ldr	r3, [sp, #4]
   14194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14198:	1e5a      	subs	r2, r3, #1
   1419a:	490b      	ldr	r1, [pc, #44]	; (141c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   1419c:	9b01      	ldr	r3, [sp, #4]
   1419e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   141a2:	4a0a      	ldr	r2, [pc, #40]	; (141cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
   141a4:	9b01      	ldr	r3, [sp, #4]
   141a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141aa:	f003 0301 	and.w	r3, r3, #1
   141ae:	2b00      	cmp	r3, #0
   141b0:	d106      	bne.n	141c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
   141b2:	4a05      	ldr	r2, [pc, #20]	; (141c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   141b4:	9b01      	ldr	r3, [sp, #4]
   141b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141ba:	2b00      	cmp	r3, #0
   141bc:	d100      	bne.n	141c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   141be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   141c0:	bf00      	nop
   141c2:	b003      	add	sp, #12
   141c4:	f85d fb04 	ldr.w	pc, [sp], #4
   141c8:	1fff95f0 	.word	0x1fff95f0
   141cc:	1fff95ec 	.word	0x1fff95ec

000141d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   141d0:	b500      	push	{lr}
   141d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   141d4:	f7ed fae8 	bl	17a8 <Sys_GetCoreID>
   141d8:	4603      	mov	r3, r0
   141da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
   141dc:	4a10      	ldr	r2, [pc, #64]	; (14220 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   141de:	9b01      	ldr	r3, [sp, #4]
   141e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141e4:	2b00      	cmp	r3, #0
   141e6:	d10d      	bne.n	14204 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   141e8:	f7ec fb8d 	bl	906 <Port_schm_read_msr>
   141ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   141ee:	9b00      	ldr	r3, [sp, #0]
   141f0:	f003 0301 	and.w	r3, r3, #1
   141f4:	2b00      	cmp	r3, #0
   141f6:	d100      	bne.n	141fa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   141f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   141fa:	490a      	ldr	r1, [pc, #40]	; (14224 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
   141fc:	9b01      	ldr	r3, [sp, #4]
   141fe:	9a00      	ldr	r2, [sp, #0]
   14200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
   14204:	4a06      	ldr	r2, [pc, #24]	; (14220 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   14206:	9b01      	ldr	r3, [sp, #4]
   14208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1420c:	1c5a      	adds	r2, r3, #1
   1420e:	4904      	ldr	r1, [pc, #16]	; (14220 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   14210:	9b01      	ldr	r3, [sp, #4]
   14212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14216:	bf00      	nop
   14218:	b003      	add	sp, #12
   1421a:	f85d fb04 	ldr.w	pc, [sp], #4
   1421e:	bf00      	nop
   14220:	1fff95f8 	.word	0x1fff95f8
   14224:	1fff95f4 	.word	0x1fff95f4

00014228 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   14228:	b500      	push	{lr}
   1422a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1422c:	f7ed fabc 	bl	17a8 <Sys_GetCoreID>
   14230:	4603      	mov	r3, r0
   14232:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
   14234:	4a0d      	ldr	r2, [pc, #52]	; (1426c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   14236:	9b01      	ldr	r3, [sp, #4]
   14238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1423c:	1e5a      	subs	r2, r3, #1
   1423e:	490b      	ldr	r1, [pc, #44]	; (1426c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   14240:	9b01      	ldr	r3, [sp, #4]
   14242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   14246:	4a0a      	ldr	r2, [pc, #40]	; (14270 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
   14248:	9b01      	ldr	r3, [sp, #4]
   1424a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1424e:	f003 0301 	and.w	r3, r3, #1
   14252:	2b00      	cmp	r3, #0
   14254:	d106      	bne.n	14264 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
   14256:	4a05      	ldr	r2, [pc, #20]	; (1426c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   14258:	9b01      	ldr	r3, [sp, #4]
   1425a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1425e:	2b00      	cmp	r3, #0
   14260:	d100      	bne.n	14264 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14262:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14264:	bf00      	nop
   14266:	b003      	add	sp, #12
   14268:	f85d fb04 	ldr.w	pc, [sp], #4
   1426c:	1fff95f8 	.word	0x1fff95f8
   14270:	1fff95f4 	.word	0x1fff95f4

00014274 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   14274:	b500      	push	{lr}
   14276:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14278:	f7ed fa96 	bl	17a8 <Sys_GetCoreID>
   1427c:	4603      	mov	r3, r0
   1427e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
   14280:	4a10      	ldr	r2, [pc, #64]	; (142c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   14282:	9b01      	ldr	r3, [sp, #4]
   14284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14288:	2b00      	cmp	r3, #0
   1428a:	d10d      	bne.n	142a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1428c:	f7ec fb3b 	bl	906 <Port_schm_read_msr>
   14290:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14292:	9b00      	ldr	r3, [sp, #0]
   14294:	f003 0301 	and.w	r3, r3, #1
   14298:	2b00      	cmp	r3, #0
   1429a:	d100      	bne.n	1429e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1429c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   1429e:	490a      	ldr	r1, [pc, #40]	; (142c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
   142a0:	9b01      	ldr	r3, [sp, #4]
   142a2:	9a00      	ldr	r2, [sp, #0]
   142a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
   142a8:	4a06      	ldr	r2, [pc, #24]	; (142c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   142aa:	9b01      	ldr	r3, [sp, #4]
   142ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142b0:	1c5a      	adds	r2, r3, #1
   142b2:	4904      	ldr	r1, [pc, #16]	; (142c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   142b4:	9b01      	ldr	r3, [sp, #4]
   142b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   142ba:	bf00      	nop
   142bc:	b003      	add	sp, #12
   142be:	f85d fb04 	ldr.w	pc, [sp], #4
   142c2:	bf00      	nop
   142c4:	1fff9600 	.word	0x1fff9600
   142c8:	1fff95fc 	.word	0x1fff95fc

000142cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   142cc:	b500      	push	{lr}
   142ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   142d0:	f7ed fa6a 	bl	17a8 <Sys_GetCoreID>
   142d4:	4603      	mov	r3, r0
   142d6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
   142d8:	4a0d      	ldr	r2, [pc, #52]	; (14310 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   142da:	9b01      	ldr	r3, [sp, #4]
   142dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142e0:	1e5a      	subs	r2, r3, #1
   142e2:	490b      	ldr	r1, [pc, #44]	; (14310 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   142e4:	9b01      	ldr	r3, [sp, #4]
   142e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   142ea:	4a0a      	ldr	r2, [pc, #40]	; (14314 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
   142ec:	9b01      	ldr	r3, [sp, #4]
   142ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142f2:	f003 0301 	and.w	r3, r3, #1
   142f6:	2b00      	cmp	r3, #0
   142f8:	d106      	bne.n	14308 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
   142fa:	4a05      	ldr	r2, [pc, #20]	; (14310 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   142fc:	9b01      	ldr	r3, [sp, #4]
   142fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14302:	2b00      	cmp	r3, #0
   14304:	d100      	bne.n	14308 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14306:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14308:	bf00      	nop
   1430a:	b003      	add	sp, #12
   1430c:	f85d fb04 	ldr.w	pc, [sp], #4
   14310:	1fff9600 	.word	0x1fff9600
   14314:	1fff95fc 	.word	0x1fff95fc

00014318 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   14318:	b500      	push	{lr}
   1431a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1431c:	f7ed fa44 	bl	17a8 <Sys_GetCoreID>
   14320:	4603      	mov	r3, r0
   14322:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
   14324:	4a10      	ldr	r2, [pc, #64]	; (14368 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   14326:	9b01      	ldr	r3, [sp, #4]
   14328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1432c:	2b00      	cmp	r3, #0
   1432e:	d10d      	bne.n	1434c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14330:	f7ec fae9 	bl	906 <Port_schm_read_msr>
   14334:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14336:	9b00      	ldr	r3, [sp, #0]
   14338:	f003 0301 	and.w	r3, r3, #1
   1433c:	2b00      	cmp	r3, #0
   1433e:	d100      	bne.n	14342 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14340:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   14342:	490a      	ldr	r1, [pc, #40]	; (1436c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
   14344:	9b01      	ldr	r3, [sp, #4]
   14346:	9a00      	ldr	r2, [sp, #0]
   14348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
   1434c:	4a06      	ldr	r2, [pc, #24]	; (14368 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   1434e:	9b01      	ldr	r3, [sp, #4]
   14350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14354:	1c5a      	adds	r2, r3, #1
   14356:	4904      	ldr	r1, [pc, #16]	; (14368 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   14358:	9b01      	ldr	r3, [sp, #4]
   1435a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1435e:	bf00      	nop
   14360:	b003      	add	sp, #12
   14362:	f85d fb04 	ldr.w	pc, [sp], #4
   14366:	bf00      	nop
   14368:	1fff9608 	.word	0x1fff9608
   1436c:	1fff9604 	.word	0x1fff9604

00014370 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   14370:	b500      	push	{lr}
   14372:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14374:	f7ed fa18 	bl	17a8 <Sys_GetCoreID>
   14378:	4603      	mov	r3, r0
   1437a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
   1437c:	4a0d      	ldr	r2, [pc, #52]	; (143b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   1437e:	9b01      	ldr	r3, [sp, #4]
   14380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14384:	1e5a      	subs	r2, r3, #1
   14386:	490b      	ldr	r1, [pc, #44]	; (143b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   14388:	9b01      	ldr	r3, [sp, #4]
   1438a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   1438e:	4a0a      	ldr	r2, [pc, #40]	; (143b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
   14390:	9b01      	ldr	r3, [sp, #4]
   14392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14396:	f003 0301 	and.w	r3, r3, #1
   1439a:	2b00      	cmp	r3, #0
   1439c:	d106      	bne.n	143ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
   1439e:	4a05      	ldr	r2, [pc, #20]	; (143b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   143a0:	9b01      	ldr	r3, [sp, #4]
   143a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143a6:	2b00      	cmp	r3, #0
   143a8:	d100      	bne.n	143ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   143aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   143ac:	bf00      	nop
   143ae:	b003      	add	sp, #12
   143b0:	f85d fb04 	ldr.w	pc, [sp], #4
   143b4:	1fff9608 	.word	0x1fff9608
   143b8:	1fff9604 	.word	0x1fff9604

000143bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   143bc:	b500      	push	{lr}
   143be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   143c0:	f7ed f9f2 	bl	17a8 <Sys_GetCoreID>
   143c4:	4603      	mov	r3, r0
   143c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
   143c8:	4a10      	ldr	r2, [pc, #64]	; (1440c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   143ca:	9b01      	ldr	r3, [sp, #4]
   143cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143d0:	2b00      	cmp	r3, #0
   143d2:	d10d      	bne.n	143f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   143d4:	f7ec fa97 	bl	906 <Port_schm_read_msr>
   143d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   143da:	9b00      	ldr	r3, [sp, #0]
   143dc:	f003 0301 	and.w	r3, r3, #1
   143e0:	2b00      	cmp	r3, #0
   143e2:	d100      	bne.n	143e6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   143e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   143e6:	490a      	ldr	r1, [pc, #40]	; (14410 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
   143e8:	9b01      	ldr	r3, [sp, #4]
   143ea:	9a00      	ldr	r2, [sp, #0]
   143ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
   143f0:	4a06      	ldr	r2, [pc, #24]	; (1440c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   143f2:	9b01      	ldr	r3, [sp, #4]
   143f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143f8:	1c5a      	adds	r2, r3, #1
   143fa:	4904      	ldr	r1, [pc, #16]	; (1440c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   143fc:	9b01      	ldr	r3, [sp, #4]
   143fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14402:	bf00      	nop
   14404:	b003      	add	sp, #12
   14406:	f85d fb04 	ldr.w	pc, [sp], #4
   1440a:	bf00      	nop
   1440c:	1fff9610 	.word	0x1fff9610
   14410:	1fff960c 	.word	0x1fff960c

00014414 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   14414:	b500      	push	{lr}
   14416:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14418:	f7ed f9c6 	bl	17a8 <Sys_GetCoreID>
   1441c:	4603      	mov	r3, r0
   1441e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
   14420:	4a0d      	ldr	r2, [pc, #52]	; (14458 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   14422:	9b01      	ldr	r3, [sp, #4]
   14424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14428:	1e5a      	subs	r2, r3, #1
   1442a:	490b      	ldr	r1, [pc, #44]	; (14458 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   1442c:	9b01      	ldr	r3, [sp, #4]
   1442e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   14432:	4a0a      	ldr	r2, [pc, #40]	; (1445c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
   14434:	9b01      	ldr	r3, [sp, #4]
   14436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1443a:	f003 0301 	and.w	r3, r3, #1
   1443e:	2b00      	cmp	r3, #0
   14440:	d106      	bne.n	14450 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
   14442:	4a05      	ldr	r2, [pc, #20]	; (14458 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   14444:	9b01      	ldr	r3, [sp, #4]
   14446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1444a:	2b00      	cmp	r3, #0
   1444c:	d100      	bne.n	14450 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1444e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14450:	bf00      	nop
   14452:	b003      	add	sp, #12
   14454:	f85d fb04 	ldr.w	pc, [sp], #4
   14458:	1fff9610 	.word	0x1fff9610
   1445c:	1fff960c 	.word	0x1fff960c

00014460 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00(void)
{
   14460:	b500      	push	{lr}
   14462:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14464:	f7ed f9a0 	bl	17a8 <Sys_GetCoreID>
   14468:	4603      	mov	r3, r0
   1446a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId])
   1446c:	4a10      	ldr	r2, [pc, #64]	; (144b0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
   1446e:	9b01      	ldr	r3, [sp, #4]
   14470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14474:	2b00      	cmp	r3, #0
   14476:	d10d      	bne.n	14494 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14478:	f7ec fa4e 	bl	918 <Pwm_schm_read_msr>
   1447c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1447e:	9b00      	ldr	r3, [sp, #0]
   14480:	f003 0301 	and.w	r3, r3, #1
   14484:	2b00      	cmp	r3, #0
   14486:	d100      	bne.n	1448a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14488:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   1448a:	490a      	ldr	r1, [pc, #40]	; (144b4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x54>)
   1448c:	9b01      	ldr	r3, [sp, #4]
   1448e:	9a00      	ldr	r2, [sp, #0]
   14490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId]++;
   14494:	4a06      	ldr	r2, [pc, #24]	; (144b0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
   14496:	9b01      	ldr	r3, [sp, #4]
   14498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1449c:	1c5a      	adds	r2, r3, #1
   1449e:	4904      	ldr	r1, [pc, #16]	; (144b0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
   144a0:	9b01      	ldr	r3, [sp, #4]
   144a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   144a6:	bf00      	nop
   144a8:	b003      	add	sp, #12
   144aa:	f85d fb04 	ldr.w	pc, [sp], #4
   144ae:	bf00      	nop
   144b0:	1fff9618 	.word	0x1fff9618
   144b4:	1fff9614 	.word	0x1fff9614

000144b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00(void)
{
   144b8:	b500      	push	{lr}
   144ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   144bc:	f7ed f974 	bl	17a8 <Sys_GetCoreID>
   144c0:	4603      	mov	r3, r0
   144c2:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId]--;
   144c4:	4a0d      	ldr	r2, [pc, #52]	; (144fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
   144c6:	9b01      	ldr	r3, [sp, #4]
   144c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144cc:	1e5a      	subs	r2, r3, #1
   144ce:	490b      	ldr	r1, [pc, #44]	; (144fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
   144d0:	9b01      	ldr	r3, [sp, #4]
   144d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   144d6:	4a0a      	ldr	r2, [pc, #40]	; (14500 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x48>)
   144d8:	9b01      	ldr	r3, [sp, #4]
   144da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144de:	f003 0301 	and.w	r3, r3, #1
   144e2:	2b00      	cmp	r3, #0
   144e4:	d106      	bne.n	144f4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x3c>
   144e6:	4a05      	ldr	r2, [pc, #20]	; (144fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
   144e8:	9b01      	ldr	r3, [sp, #4]
   144ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144ee:	2b00      	cmp	r3, #0
   144f0:	d100      	bne.n	144f4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   144f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   144f4:	bf00      	nop
   144f6:	b003      	add	sp, #12
   144f8:	f85d fb04 	ldr.w	pc, [sp], #4
   144fc:	1fff9618 	.word	0x1fff9618
   14500:	1fff9614 	.word	0x1fff9614

00014504 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01(void)
{
   14504:	b500      	push	{lr}
   14506:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14508:	f7ed f94e 	bl	17a8 <Sys_GetCoreID>
   1450c:	4603      	mov	r3, r0
   1450e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId])
   14510:	4a10      	ldr	r2, [pc, #64]	; (14554 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
   14512:	9b01      	ldr	r3, [sp, #4]
   14514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14518:	2b00      	cmp	r3, #0
   1451a:	d10d      	bne.n	14538 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1451c:	f7ec f9fc 	bl	918 <Pwm_schm_read_msr>
   14520:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14522:	9b00      	ldr	r3, [sp, #0]
   14524:	f003 0301 	and.w	r3, r3, #1
   14528:	2b00      	cmp	r3, #0
   1452a:	d100      	bne.n	1452e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1452c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   1452e:	490a      	ldr	r1, [pc, #40]	; (14558 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x54>)
   14530:	9b01      	ldr	r3, [sp, #4]
   14532:	9a00      	ldr	r2, [sp, #0]
   14534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId]++;
   14538:	4a06      	ldr	r2, [pc, #24]	; (14554 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
   1453a:	9b01      	ldr	r3, [sp, #4]
   1453c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14540:	1c5a      	adds	r2, r3, #1
   14542:	4904      	ldr	r1, [pc, #16]	; (14554 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
   14544:	9b01      	ldr	r3, [sp, #4]
   14546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1454a:	bf00      	nop
   1454c:	b003      	add	sp, #12
   1454e:	f85d fb04 	ldr.w	pc, [sp], #4
   14552:	bf00      	nop
   14554:	1fff9620 	.word	0x1fff9620
   14558:	1fff961c 	.word	0x1fff961c

0001455c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01(void)
{
   1455c:	b500      	push	{lr}
   1455e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14560:	f7ed f922 	bl	17a8 <Sys_GetCoreID>
   14564:	4603      	mov	r3, r0
   14566:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId]--;
   14568:	4a0d      	ldr	r2, [pc, #52]	; (145a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
   1456a:	9b01      	ldr	r3, [sp, #4]
   1456c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14570:	1e5a      	subs	r2, r3, #1
   14572:	490b      	ldr	r1, [pc, #44]	; (145a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
   14574:	9b01      	ldr	r3, [sp, #4]
   14576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   1457a:	4a0a      	ldr	r2, [pc, #40]	; (145a4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x48>)
   1457c:	9b01      	ldr	r3, [sp, #4]
   1457e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14582:	f003 0301 	and.w	r3, r3, #1
   14586:	2b00      	cmp	r3, #0
   14588:	d106      	bne.n	14598 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x3c>
   1458a:	4a05      	ldr	r2, [pc, #20]	; (145a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
   1458c:	9b01      	ldr	r3, [sp, #4]
   1458e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14592:	2b00      	cmp	r3, #0
   14594:	d100      	bne.n	14598 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14596:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14598:	bf00      	nop
   1459a:	b003      	add	sp, #12
   1459c:	f85d fb04 	ldr.w	pc, [sp], #4
   145a0:	1fff9620 	.word	0x1fff9620
   145a4:	1fff961c 	.word	0x1fff961c

000145a8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02(void)
{
   145a8:	b500      	push	{lr}
   145aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   145ac:	f7ed f8fc 	bl	17a8 <Sys_GetCoreID>
   145b0:	4603      	mov	r3, r0
   145b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId])
   145b4:	4a10      	ldr	r2, [pc, #64]	; (145f8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
   145b6:	9b01      	ldr	r3, [sp, #4]
   145b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145bc:	2b00      	cmp	r3, #0
   145be:	d10d      	bne.n	145dc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   145c0:	f7ec f9aa 	bl	918 <Pwm_schm_read_msr>
   145c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   145c6:	9b00      	ldr	r3, [sp, #0]
   145c8:	f003 0301 	and.w	r3, r3, #1
   145cc:	2b00      	cmp	r3, #0
   145ce:	d100      	bne.n	145d2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   145d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   145d2:	490a      	ldr	r1, [pc, #40]	; (145fc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x54>)
   145d4:	9b01      	ldr	r3, [sp, #4]
   145d6:	9a00      	ldr	r2, [sp, #0]
   145d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId]++;
   145dc:	4a06      	ldr	r2, [pc, #24]	; (145f8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
   145de:	9b01      	ldr	r3, [sp, #4]
   145e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145e4:	1c5a      	adds	r2, r3, #1
   145e6:	4904      	ldr	r1, [pc, #16]	; (145f8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
   145e8:	9b01      	ldr	r3, [sp, #4]
   145ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   145ee:	bf00      	nop
   145f0:	b003      	add	sp, #12
   145f2:	f85d fb04 	ldr.w	pc, [sp], #4
   145f6:	bf00      	nop
   145f8:	1fff9628 	.word	0x1fff9628
   145fc:	1fff9624 	.word	0x1fff9624

00014600 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02(void)
{
   14600:	b500      	push	{lr}
   14602:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14604:	f7ed f8d0 	bl	17a8 <Sys_GetCoreID>
   14608:	4603      	mov	r3, r0
   1460a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId]--;
   1460c:	4a0d      	ldr	r2, [pc, #52]	; (14644 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
   1460e:	9b01      	ldr	r3, [sp, #4]
   14610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14614:	1e5a      	subs	r2, r3, #1
   14616:	490b      	ldr	r1, [pc, #44]	; (14644 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
   14618:	9b01      	ldr	r3, [sp, #4]
   1461a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   1461e:	4a0a      	ldr	r2, [pc, #40]	; (14648 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x48>)
   14620:	9b01      	ldr	r3, [sp, #4]
   14622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14626:	f003 0301 	and.w	r3, r3, #1
   1462a:	2b00      	cmp	r3, #0
   1462c:	d106      	bne.n	1463c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x3c>
   1462e:	4a05      	ldr	r2, [pc, #20]	; (14644 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
   14630:	9b01      	ldr	r3, [sp, #4]
   14632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14636:	2b00      	cmp	r3, #0
   14638:	d100      	bne.n	1463c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1463a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1463c:	bf00      	nop
   1463e:	b003      	add	sp, #12
   14640:	f85d fb04 	ldr.w	pc, [sp], #4
   14644:	1fff9628 	.word	0x1fff9628
   14648:	1fff9624 	.word	0x1fff9624

0001464c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03(void)
{
   1464c:	b500      	push	{lr}
   1464e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14650:	f7ed f8aa 	bl	17a8 <Sys_GetCoreID>
   14654:	4603      	mov	r3, r0
   14656:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId])
   14658:	4a10      	ldr	r2, [pc, #64]	; (1469c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
   1465a:	9b01      	ldr	r3, [sp, #4]
   1465c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14660:	2b00      	cmp	r3, #0
   14662:	d10d      	bne.n	14680 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14664:	f7ec f958 	bl	918 <Pwm_schm_read_msr>
   14668:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1466a:	9b00      	ldr	r3, [sp, #0]
   1466c:	f003 0301 	and.w	r3, r3, #1
   14670:	2b00      	cmp	r3, #0
   14672:	d100      	bne.n	14676 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14674:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   14676:	490a      	ldr	r1, [pc, #40]	; (146a0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x54>)
   14678:	9b01      	ldr	r3, [sp, #4]
   1467a:	9a00      	ldr	r2, [sp, #0]
   1467c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId]++;
   14680:	4a06      	ldr	r2, [pc, #24]	; (1469c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
   14682:	9b01      	ldr	r3, [sp, #4]
   14684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14688:	1c5a      	adds	r2, r3, #1
   1468a:	4904      	ldr	r1, [pc, #16]	; (1469c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
   1468c:	9b01      	ldr	r3, [sp, #4]
   1468e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14692:	bf00      	nop
   14694:	b003      	add	sp, #12
   14696:	f85d fb04 	ldr.w	pc, [sp], #4
   1469a:	bf00      	nop
   1469c:	1fff9630 	.word	0x1fff9630
   146a0:	1fff962c 	.word	0x1fff962c

000146a4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03(void)
{
   146a4:	b500      	push	{lr}
   146a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   146a8:	f7ed f87e 	bl	17a8 <Sys_GetCoreID>
   146ac:	4603      	mov	r3, r0
   146ae:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId]--;
   146b0:	4a0d      	ldr	r2, [pc, #52]	; (146e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
   146b2:	9b01      	ldr	r3, [sp, #4]
   146b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146b8:	1e5a      	subs	r2, r3, #1
   146ba:	490b      	ldr	r1, [pc, #44]	; (146e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
   146bc:	9b01      	ldr	r3, [sp, #4]
   146be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   146c2:	4a0a      	ldr	r2, [pc, #40]	; (146ec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x48>)
   146c4:	9b01      	ldr	r3, [sp, #4]
   146c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146ca:	f003 0301 	and.w	r3, r3, #1
   146ce:	2b00      	cmp	r3, #0
   146d0:	d106      	bne.n	146e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x3c>
   146d2:	4a05      	ldr	r2, [pc, #20]	; (146e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
   146d4:	9b01      	ldr	r3, [sp, #4]
   146d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146da:	2b00      	cmp	r3, #0
   146dc:	d100      	bne.n	146e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   146de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   146e0:	bf00      	nop
   146e2:	b003      	add	sp, #12
   146e4:	f85d fb04 	ldr.w	pc, [sp], #4
   146e8:	1fff9630 	.word	0x1fff9630
   146ec:	1fff962c 	.word	0x1fff962c

000146f0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04(void)
{
   146f0:	b500      	push	{lr}
   146f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   146f4:	f7ed f858 	bl	17a8 <Sys_GetCoreID>
   146f8:	4603      	mov	r3, r0
   146fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId])
   146fc:	4a10      	ldr	r2, [pc, #64]	; (14740 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
   146fe:	9b01      	ldr	r3, [sp, #4]
   14700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14704:	2b00      	cmp	r3, #0
   14706:	d10d      	bne.n	14724 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14708:	f7ec f906 	bl	918 <Pwm_schm_read_msr>
   1470c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1470e:	9b00      	ldr	r3, [sp, #0]
   14710:	f003 0301 	and.w	r3, r3, #1
   14714:	2b00      	cmp	r3, #0
   14716:	d100      	bne.n	1471a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14718:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   1471a:	490a      	ldr	r1, [pc, #40]	; (14744 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x54>)
   1471c:	9b01      	ldr	r3, [sp, #4]
   1471e:	9a00      	ldr	r2, [sp, #0]
   14720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId]++;
   14724:	4a06      	ldr	r2, [pc, #24]	; (14740 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
   14726:	9b01      	ldr	r3, [sp, #4]
   14728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1472c:	1c5a      	adds	r2, r3, #1
   1472e:	4904      	ldr	r1, [pc, #16]	; (14740 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
   14730:	9b01      	ldr	r3, [sp, #4]
   14732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14736:	bf00      	nop
   14738:	b003      	add	sp, #12
   1473a:	f85d fb04 	ldr.w	pc, [sp], #4
   1473e:	bf00      	nop
   14740:	1fff9638 	.word	0x1fff9638
   14744:	1fff9634 	.word	0x1fff9634

00014748 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04(void)
{
   14748:	b500      	push	{lr}
   1474a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1474c:	f7ed f82c 	bl	17a8 <Sys_GetCoreID>
   14750:	4603      	mov	r3, r0
   14752:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId]--;
   14754:	4a0d      	ldr	r2, [pc, #52]	; (1478c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
   14756:	9b01      	ldr	r3, [sp, #4]
   14758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1475c:	1e5a      	subs	r2, r3, #1
   1475e:	490b      	ldr	r1, [pc, #44]	; (1478c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
   14760:	9b01      	ldr	r3, [sp, #4]
   14762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   14766:	4a0a      	ldr	r2, [pc, #40]	; (14790 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x48>)
   14768:	9b01      	ldr	r3, [sp, #4]
   1476a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1476e:	f003 0301 	and.w	r3, r3, #1
   14772:	2b00      	cmp	r3, #0
   14774:	d106      	bne.n	14784 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x3c>
   14776:	4a05      	ldr	r2, [pc, #20]	; (1478c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
   14778:	9b01      	ldr	r3, [sp, #4]
   1477a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1477e:	2b00      	cmp	r3, #0
   14780:	d100      	bne.n	14784 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14782:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14784:	bf00      	nop
   14786:	b003      	add	sp, #12
   14788:	f85d fb04 	ldr.w	pc, [sp], #4
   1478c:	1fff9638 	.word	0x1fff9638
   14790:	1fff9634 	.word	0x1fff9634

00014794 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05(void)
{
   14794:	b500      	push	{lr}
   14796:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14798:	f7ed f806 	bl	17a8 <Sys_GetCoreID>
   1479c:	4603      	mov	r3, r0
   1479e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId])
   147a0:	4a10      	ldr	r2, [pc, #64]	; (147e4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
   147a2:	9b01      	ldr	r3, [sp, #4]
   147a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147a8:	2b00      	cmp	r3, #0
   147aa:	d10d      	bne.n	147c8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   147ac:	f7ec f8b4 	bl	918 <Pwm_schm_read_msr>
   147b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   147b2:	9b00      	ldr	r3, [sp, #0]
   147b4:	f003 0301 	and.w	r3, r3, #1
   147b8:	2b00      	cmp	r3, #0
   147ba:	d100      	bne.n	147be <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   147bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   147be:	490a      	ldr	r1, [pc, #40]	; (147e8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x54>)
   147c0:	9b01      	ldr	r3, [sp, #4]
   147c2:	9a00      	ldr	r2, [sp, #0]
   147c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId]++;
   147c8:	4a06      	ldr	r2, [pc, #24]	; (147e4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
   147ca:	9b01      	ldr	r3, [sp, #4]
   147cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147d0:	1c5a      	adds	r2, r3, #1
   147d2:	4904      	ldr	r1, [pc, #16]	; (147e4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
   147d4:	9b01      	ldr	r3, [sp, #4]
   147d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   147da:	bf00      	nop
   147dc:	b003      	add	sp, #12
   147de:	f85d fb04 	ldr.w	pc, [sp], #4
   147e2:	bf00      	nop
   147e4:	1fff9640 	.word	0x1fff9640
   147e8:	1fff963c 	.word	0x1fff963c

000147ec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05(void)
{
   147ec:	b500      	push	{lr}
   147ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   147f0:	f7ec ffda 	bl	17a8 <Sys_GetCoreID>
   147f4:	4603      	mov	r3, r0
   147f6:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId]--;
   147f8:	4a0d      	ldr	r2, [pc, #52]	; (14830 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
   147fa:	9b01      	ldr	r3, [sp, #4]
   147fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14800:	1e5a      	subs	r2, r3, #1
   14802:	490b      	ldr	r1, [pc, #44]	; (14830 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
   14804:	9b01      	ldr	r3, [sp, #4]
   14806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   1480a:	4a0a      	ldr	r2, [pc, #40]	; (14834 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x48>)
   1480c:	9b01      	ldr	r3, [sp, #4]
   1480e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14812:	f003 0301 	and.w	r3, r3, #1
   14816:	2b00      	cmp	r3, #0
   14818:	d106      	bne.n	14828 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x3c>
   1481a:	4a05      	ldr	r2, [pc, #20]	; (14830 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
   1481c:	9b01      	ldr	r3, [sp, #4]
   1481e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14822:	2b00      	cmp	r3, #0
   14824:	d100      	bne.n	14828 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14826:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14828:	bf00      	nop
   1482a:	b003      	add	sp, #12
   1482c:	f85d fb04 	ldr.w	pc, [sp], #4
   14830:	1fff9640 	.word	0x1fff9640
   14834:	1fff963c 	.word	0x1fff963c

00014838 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06(void)
{
   14838:	b500      	push	{lr}
   1483a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1483c:	f7ec ffb4 	bl	17a8 <Sys_GetCoreID>
   14840:	4603      	mov	r3, r0
   14842:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId])
   14844:	4a10      	ldr	r2, [pc, #64]	; (14888 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
   14846:	9b01      	ldr	r3, [sp, #4]
   14848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1484c:	2b00      	cmp	r3, #0
   1484e:	d10d      	bne.n	1486c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14850:	f7ec f862 	bl	918 <Pwm_schm_read_msr>
   14854:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14856:	9b00      	ldr	r3, [sp, #0]
   14858:	f003 0301 	and.w	r3, r3, #1
   1485c:	2b00      	cmp	r3, #0
   1485e:	d100      	bne.n	14862 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14860:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_06[u32CoreId] = msr;
   14862:	490a      	ldr	r1, [pc, #40]	; (1488c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x54>)
   14864:	9b01      	ldr	r3, [sp, #4]
   14866:	9a00      	ldr	r2, [sp, #0]
   14868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId]++;
   1486c:	4a06      	ldr	r2, [pc, #24]	; (14888 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
   1486e:	9b01      	ldr	r3, [sp, #4]
   14870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14874:	1c5a      	adds	r2, r3, #1
   14876:	4904      	ldr	r1, [pc, #16]	; (14888 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
   14878:	9b01      	ldr	r3, [sp, #4]
   1487a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1487e:	bf00      	nop
   14880:	b003      	add	sp, #12
   14882:	f85d fb04 	ldr.w	pc, [sp], #4
   14886:	bf00      	nop
   14888:	1fff9648 	.word	0x1fff9648
   1488c:	1fff9644 	.word	0x1fff9644

00014890 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06(void)
{
   14890:	b500      	push	{lr}
   14892:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14894:	f7ec ff88 	bl	17a8 <Sys_GetCoreID>
   14898:	4603      	mov	r3, r0
   1489a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId]--;
   1489c:	4a0d      	ldr	r2, [pc, #52]	; (148d4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
   1489e:	9b01      	ldr	r3, [sp, #4]
   148a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148a4:	1e5a      	subs	r2, r3, #1
   148a6:	490b      	ldr	r1, [pc, #44]	; (148d4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
   148a8:	9b01      	ldr	r3, [sp, #4]
   148aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
   148ae:	4a0a      	ldr	r2, [pc, #40]	; (148d8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x48>)
   148b0:	9b01      	ldr	r3, [sp, #4]
   148b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148b6:	f003 0301 	and.w	r3, r3, #1
   148ba:	2b00      	cmp	r3, #0
   148bc:	d106      	bne.n	148cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x3c>
   148be:	4a05      	ldr	r2, [pc, #20]	; (148d4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
   148c0:	9b01      	ldr	r3, [sp, #4]
   148c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148c6:	2b00      	cmp	r3, #0
   148c8:	d100      	bne.n	148cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   148ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   148cc:	bf00      	nop
   148ce:	b003      	add	sp, #12
   148d0:	f85d fb04 	ldr.w	pc, [sp], #4
   148d4:	1fff9648 	.word	0x1fff9648
   148d8:	1fff9644 	.word	0x1fff9644

000148dc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07(void)
{
   148dc:	b500      	push	{lr}
   148de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   148e0:	f7ec ff62 	bl	17a8 <Sys_GetCoreID>
   148e4:	4603      	mov	r3, r0
   148e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId])
   148e8:	4a10      	ldr	r2, [pc, #64]	; (1492c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
   148ea:	9b01      	ldr	r3, [sp, #4]
   148ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148f0:	2b00      	cmp	r3, #0
   148f2:	d10d      	bne.n	14910 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   148f4:	f7ec f810 	bl	918 <Pwm_schm_read_msr>
   148f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   148fa:	9b00      	ldr	r3, [sp, #0]
   148fc:	f003 0301 	and.w	r3, r3, #1
   14900:	2b00      	cmp	r3, #0
   14902:	d100      	bne.n	14906 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14904:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_07[u32CoreId] = msr;
   14906:	490a      	ldr	r1, [pc, #40]	; (14930 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x54>)
   14908:	9b01      	ldr	r3, [sp, #4]
   1490a:	9a00      	ldr	r2, [sp, #0]
   1490c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId]++;
   14910:	4a06      	ldr	r2, [pc, #24]	; (1492c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
   14912:	9b01      	ldr	r3, [sp, #4]
   14914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14918:	1c5a      	adds	r2, r3, #1
   1491a:	4904      	ldr	r1, [pc, #16]	; (1492c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
   1491c:	9b01      	ldr	r3, [sp, #4]
   1491e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14922:	bf00      	nop
   14924:	b003      	add	sp, #12
   14926:	f85d fb04 	ldr.w	pc, [sp], #4
   1492a:	bf00      	nop
   1492c:	1fff9650 	.word	0x1fff9650
   14930:	1fff964c 	.word	0x1fff964c

00014934 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07(void)
{
   14934:	b500      	push	{lr}
   14936:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14938:	f7ec ff36 	bl	17a8 <Sys_GetCoreID>
   1493c:	4603      	mov	r3, r0
   1493e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId]--;
   14940:	4a0d      	ldr	r2, [pc, #52]	; (14978 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
   14942:	9b01      	ldr	r3, [sp, #4]
   14944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14948:	1e5a      	subs	r2, r3, #1
   1494a:	490b      	ldr	r1, [pc, #44]	; (14978 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
   1494c:	9b01      	ldr	r3, [sp, #4]
   1494e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
   14952:	4a0a      	ldr	r2, [pc, #40]	; (1497c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x48>)
   14954:	9b01      	ldr	r3, [sp, #4]
   14956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1495a:	f003 0301 	and.w	r3, r3, #1
   1495e:	2b00      	cmp	r3, #0
   14960:	d106      	bne.n	14970 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x3c>
   14962:	4a05      	ldr	r2, [pc, #20]	; (14978 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
   14964:	9b01      	ldr	r3, [sp, #4]
   14966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1496a:	2b00      	cmp	r3, #0
   1496c:	d100      	bne.n	14970 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1496e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14970:	bf00      	nop
   14972:	b003      	add	sp, #12
   14974:	f85d fb04 	ldr.w	pc, [sp], #4
   14978:	1fff9650 	.word	0x1fff9650
   1497c:	1fff964c 	.word	0x1fff964c

00014980 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08(void)
{
   14980:	b500      	push	{lr}
   14982:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14984:	f7ec ff10 	bl	17a8 <Sys_GetCoreID>
   14988:	4603      	mov	r3, r0
   1498a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId])
   1498c:	4a10      	ldr	r2, [pc, #64]	; (149d0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
   1498e:	9b01      	ldr	r3, [sp, #4]
   14990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14994:	2b00      	cmp	r3, #0
   14996:	d10d      	bne.n	149b4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14998:	f7eb ffbe 	bl	918 <Pwm_schm_read_msr>
   1499c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1499e:	9b00      	ldr	r3, [sp, #0]
   149a0:	f003 0301 	and.w	r3, r3, #1
   149a4:	2b00      	cmp	r3, #0
   149a6:	d100      	bne.n	149aa <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   149a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_08[u32CoreId] = msr;
   149aa:	490a      	ldr	r1, [pc, #40]	; (149d4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x54>)
   149ac:	9b01      	ldr	r3, [sp, #4]
   149ae:	9a00      	ldr	r2, [sp, #0]
   149b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId]++;
   149b4:	4a06      	ldr	r2, [pc, #24]	; (149d0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
   149b6:	9b01      	ldr	r3, [sp, #4]
   149b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149bc:	1c5a      	adds	r2, r3, #1
   149be:	4904      	ldr	r1, [pc, #16]	; (149d0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
   149c0:	9b01      	ldr	r3, [sp, #4]
   149c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   149c6:	bf00      	nop
   149c8:	b003      	add	sp, #12
   149ca:	f85d fb04 	ldr.w	pc, [sp], #4
   149ce:	bf00      	nop
   149d0:	1fff9658 	.word	0x1fff9658
   149d4:	1fff9654 	.word	0x1fff9654

000149d8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08(void)
{
   149d8:	b500      	push	{lr}
   149da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   149dc:	f7ec fee4 	bl	17a8 <Sys_GetCoreID>
   149e0:	4603      	mov	r3, r0
   149e2:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId]--;
   149e4:	4a0d      	ldr	r2, [pc, #52]	; (14a1c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
   149e6:	9b01      	ldr	r3, [sp, #4]
   149e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149ec:	1e5a      	subs	r2, r3, #1
   149ee:	490b      	ldr	r1, [pc, #44]	; (14a1c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
   149f0:	9b01      	ldr	r3, [sp, #4]
   149f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
   149f6:	4a0a      	ldr	r2, [pc, #40]	; (14a20 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x48>)
   149f8:	9b01      	ldr	r3, [sp, #4]
   149fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149fe:	f003 0301 	and.w	r3, r3, #1
   14a02:	2b00      	cmp	r3, #0
   14a04:	d106      	bne.n	14a14 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x3c>
   14a06:	4a05      	ldr	r2, [pc, #20]	; (14a1c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
   14a08:	9b01      	ldr	r3, [sp, #4]
   14a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a0e:	2b00      	cmp	r3, #0
   14a10:	d100      	bne.n	14a14 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14a12:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14a14:	bf00      	nop
   14a16:	b003      	add	sp, #12
   14a18:	f85d fb04 	ldr.w	pc, [sp], #4
   14a1c:	1fff9658 	.word	0x1fff9658
   14a20:	1fff9654 	.word	0x1fff9654

00014a24 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09(void)
{
   14a24:	b500      	push	{lr}
   14a26:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14a28:	f7ec febe 	bl	17a8 <Sys_GetCoreID>
   14a2c:	4603      	mov	r3, r0
   14a2e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId])
   14a30:	4a10      	ldr	r2, [pc, #64]	; (14a74 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
   14a32:	9b01      	ldr	r3, [sp, #4]
   14a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a38:	2b00      	cmp	r3, #0
   14a3a:	d10d      	bne.n	14a58 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14a3c:	f7eb ff6c 	bl	918 <Pwm_schm_read_msr>
   14a40:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14a42:	9b00      	ldr	r3, [sp, #0]
   14a44:	f003 0301 	and.w	r3, r3, #1
   14a48:	2b00      	cmp	r3, #0
   14a4a:	d100      	bne.n	14a4e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14a4c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_09[u32CoreId] = msr;
   14a4e:	490a      	ldr	r1, [pc, #40]	; (14a78 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x54>)
   14a50:	9b01      	ldr	r3, [sp, #4]
   14a52:	9a00      	ldr	r2, [sp, #0]
   14a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId]++;
   14a58:	4a06      	ldr	r2, [pc, #24]	; (14a74 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
   14a5a:	9b01      	ldr	r3, [sp, #4]
   14a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a60:	1c5a      	adds	r2, r3, #1
   14a62:	4904      	ldr	r1, [pc, #16]	; (14a74 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
   14a64:	9b01      	ldr	r3, [sp, #4]
   14a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14a6a:	bf00      	nop
   14a6c:	b003      	add	sp, #12
   14a6e:	f85d fb04 	ldr.w	pc, [sp], #4
   14a72:	bf00      	nop
   14a74:	1fff9660 	.word	0x1fff9660
   14a78:	1fff965c 	.word	0x1fff965c

00014a7c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09(void)
{
   14a7c:	b500      	push	{lr}
   14a7e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14a80:	f7ec fe92 	bl	17a8 <Sys_GetCoreID>
   14a84:	4603      	mov	r3, r0
   14a86:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId]--;
   14a88:	4a0d      	ldr	r2, [pc, #52]	; (14ac0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
   14a8a:	9b01      	ldr	r3, [sp, #4]
   14a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a90:	1e5a      	subs	r2, r3, #1
   14a92:	490b      	ldr	r1, [pc, #44]	; (14ac0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
   14a94:	9b01      	ldr	r3, [sp, #4]
   14a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
   14a9a:	4a0a      	ldr	r2, [pc, #40]	; (14ac4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x48>)
   14a9c:	9b01      	ldr	r3, [sp, #4]
   14a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14aa2:	f003 0301 	and.w	r3, r3, #1
   14aa6:	2b00      	cmp	r3, #0
   14aa8:	d106      	bne.n	14ab8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x3c>
   14aaa:	4a05      	ldr	r2, [pc, #20]	; (14ac0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
   14aac:	9b01      	ldr	r3, [sp, #4]
   14aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ab2:	2b00      	cmp	r3, #0
   14ab4:	d100      	bne.n	14ab8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14ab6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14ab8:	bf00      	nop
   14aba:	b003      	add	sp, #12
   14abc:	f85d fb04 	ldr.w	pc, [sp], #4
   14ac0:	1fff9660 	.word	0x1fff9660
   14ac4:	1fff965c 	.word	0x1fff965c

00014ac8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10(void)
{
   14ac8:	b500      	push	{lr}
   14aca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14acc:	f7ec fe6c 	bl	17a8 <Sys_GetCoreID>
   14ad0:	4603      	mov	r3, r0
   14ad2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId])
   14ad4:	4a10      	ldr	r2, [pc, #64]	; (14b18 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
   14ad6:	9b01      	ldr	r3, [sp, #4]
   14ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14adc:	2b00      	cmp	r3, #0
   14ade:	d10d      	bne.n	14afc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14ae0:	f7eb ff1a 	bl	918 <Pwm_schm_read_msr>
   14ae4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14ae6:	9b00      	ldr	r3, [sp, #0]
   14ae8:	f003 0301 	and.w	r3, r3, #1
   14aec:	2b00      	cmp	r3, #0
   14aee:	d100      	bne.n	14af2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14af0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   14af2:	490a      	ldr	r1, [pc, #40]	; (14b1c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x54>)
   14af4:	9b01      	ldr	r3, [sp, #4]
   14af6:	9a00      	ldr	r2, [sp, #0]
   14af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId]++;
   14afc:	4a06      	ldr	r2, [pc, #24]	; (14b18 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
   14afe:	9b01      	ldr	r3, [sp, #4]
   14b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b04:	1c5a      	adds	r2, r3, #1
   14b06:	4904      	ldr	r1, [pc, #16]	; (14b18 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
   14b08:	9b01      	ldr	r3, [sp, #4]
   14b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14b0e:	bf00      	nop
   14b10:	b003      	add	sp, #12
   14b12:	f85d fb04 	ldr.w	pc, [sp], #4
   14b16:	bf00      	nop
   14b18:	1fff9668 	.word	0x1fff9668
   14b1c:	1fff9664 	.word	0x1fff9664

00014b20 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10(void)
{
   14b20:	b500      	push	{lr}
   14b22:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14b24:	f7ec fe40 	bl	17a8 <Sys_GetCoreID>
   14b28:	4603      	mov	r3, r0
   14b2a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId]--;
   14b2c:	4a0d      	ldr	r2, [pc, #52]	; (14b64 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
   14b2e:	9b01      	ldr	r3, [sp, #4]
   14b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b34:	1e5a      	subs	r2, r3, #1
   14b36:	490b      	ldr	r1, [pc, #44]	; (14b64 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
   14b38:	9b01      	ldr	r3, [sp, #4]
   14b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   14b3e:	4a0a      	ldr	r2, [pc, #40]	; (14b68 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x48>)
   14b40:	9b01      	ldr	r3, [sp, #4]
   14b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b46:	f003 0301 	and.w	r3, r3, #1
   14b4a:	2b00      	cmp	r3, #0
   14b4c:	d106      	bne.n	14b5c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x3c>
   14b4e:	4a05      	ldr	r2, [pc, #20]	; (14b64 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
   14b50:	9b01      	ldr	r3, [sp, #4]
   14b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b56:	2b00      	cmp	r3, #0
   14b58:	d100      	bne.n	14b5c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14b5a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14b5c:	bf00      	nop
   14b5e:	b003      	add	sp, #12
   14b60:	f85d fb04 	ldr.w	pc, [sp], #4
   14b64:	1fff9668 	.word	0x1fff9668
   14b68:	1fff9664 	.word	0x1fff9664

00014b6c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11(void)
{
   14b6c:	b500      	push	{lr}
   14b6e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14b70:	f7ec fe1a 	bl	17a8 <Sys_GetCoreID>
   14b74:	4603      	mov	r3, r0
   14b76:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId])
   14b78:	4a10      	ldr	r2, [pc, #64]	; (14bbc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
   14b7a:	9b01      	ldr	r3, [sp, #4]
   14b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b80:	2b00      	cmp	r3, #0
   14b82:	d10d      	bne.n	14ba0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14b84:	f7eb fec8 	bl	918 <Pwm_schm_read_msr>
   14b88:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14b8a:	9b00      	ldr	r3, [sp, #0]
   14b8c:	f003 0301 	and.w	r3, r3, #1
   14b90:	2b00      	cmp	r3, #0
   14b92:	d100      	bne.n	14b96 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14b94:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   14b96:	490a      	ldr	r1, [pc, #40]	; (14bc0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x54>)
   14b98:	9b01      	ldr	r3, [sp, #4]
   14b9a:	9a00      	ldr	r2, [sp, #0]
   14b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId]++;
   14ba0:	4a06      	ldr	r2, [pc, #24]	; (14bbc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
   14ba2:	9b01      	ldr	r3, [sp, #4]
   14ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ba8:	1c5a      	adds	r2, r3, #1
   14baa:	4904      	ldr	r1, [pc, #16]	; (14bbc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
   14bac:	9b01      	ldr	r3, [sp, #4]
   14bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14bb2:	bf00      	nop
   14bb4:	b003      	add	sp, #12
   14bb6:	f85d fb04 	ldr.w	pc, [sp], #4
   14bba:	bf00      	nop
   14bbc:	1fff9670 	.word	0x1fff9670
   14bc0:	1fff966c 	.word	0x1fff966c

00014bc4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11(void)
{
   14bc4:	b500      	push	{lr}
   14bc6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14bc8:	f7ec fdee 	bl	17a8 <Sys_GetCoreID>
   14bcc:	4603      	mov	r3, r0
   14bce:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId]--;
   14bd0:	4a0d      	ldr	r2, [pc, #52]	; (14c08 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
   14bd2:	9b01      	ldr	r3, [sp, #4]
   14bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14bd8:	1e5a      	subs	r2, r3, #1
   14bda:	490b      	ldr	r1, [pc, #44]	; (14c08 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
   14bdc:	9b01      	ldr	r3, [sp, #4]
   14bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   14be2:	4a0a      	ldr	r2, [pc, #40]	; (14c0c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x48>)
   14be4:	9b01      	ldr	r3, [sp, #4]
   14be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14bea:	f003 0301 	and.w	r3, r3, #1
   14bee:	2b00      	cmp	r3, #0
   14bf0:	d106      	bne.n	14c00 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x3c>
   14bf2:	4a05      	ldr	r2, [pc, #20]	; (14c08 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
   14bf4:	9b01      	ldr	r3, [sp, #4]
   14bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14bfa:	2b00      	cmp	r3, #0
   14bfc:	d100      	bne.n	14c00 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14bfe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14c00:	bf00      	nop
   14c02:	b003      	add	sp, #12
   14c04:	f85d fb04 	ldr.w	pc, [sp], #4
   14c08:	1fff9670 	.word	0x1fff9670
   14c0c:	1fff966c 	.word	0x1fff966c

00014c10 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12(void)
{
   14c10:	b500      	push	{lr}
   14c12:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14c14:	f7ec fdc8 	bl	17a8 <Sys_GetCoreID>
   14c18:	4603      	mov	r3, r0
   14c1a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId])
   14c1c:	4a10      	ldr	r2, [pc, #64]	; (14c60 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
   14c1e:	9b01      	ldr	r3, [sp, #4]
   14c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c24:	2b00      	cmp	r3, #0
   14c26:	d10d      	bne.n	14c44 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14c28:	f7eb fe76 	bl	918 <Pwm_schm_read_msr>
   14c2c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14c2e:	9b00      	ldr	r3, [sp, #0]
   14c30:	f003 0301 	and.w	r3, r3, #1
   14c34:	2b00      	cmp	r3, #0
   14c36:	d100      	bne.n	14c3a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14c38:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   14c3a:	490a      	ldr	r1, [pc, #40]	; (14c64 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x54>)
   14c3c:	9b01      	ldr	r3, [sp, #4]
   14c3e:	9a00      	ldr	r2, [sp, #0]
   14c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId]++;
   14c44:	4a06      	ldr	r2, [pc, #24]	; (14c60 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
   14c46:	9b01      	ldr	r3, [sp, #4]
   14c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c4c:	1c5a      	adds	r2, r3, #1
   14c4e:	4904      	ldr	r1, [pc, #16]	; (14c60 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
   14c50:	9b01      	ldr	r3, [sp, #4]
   14c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14c56:	bf00      	nop
   14c58:	b003      	add	sp, #12
   14c5a:	f85d fb04 	ldr.w	pc, [sp], #4
   14c5e:	bf00      	nop
   14c60:	1fff9678 	.word	0x1fff9678
   14c64:	1fff9674 	.word	0x1fff9674

00014c68 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12(void)
{
   14c68:	b500      	push	{lr}
   14c6a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14c6c:	f7ec fd9c 	bl	17a8 <Sys_GetCoreID>
   14c70:	4603      	mov	r3, r0
   14c72:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId]--;
   14c74:	4a0d      	ldr	r2, [pc, #52]	; (14cac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
   14c76:	9b01      	ldr	r3, [sp, #4]
   14c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c7c:	1e5a      	subs	r2, r3, #1
   14c7e:	490b      	ldr	r1, [pc, #44]	; (14cac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
   14c80:	9b01      	ldr	r3, [sp, #4]
   14c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   14c86:	4a0a      	ldr	r2, [pc, #40]	; (14cb0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x48>)
   14c88:	9b01      	ldr	r3, [sp, #4]
   14c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c8e:	f003 0301 	and.w	r3, r3, #1
   14c92:	2b00      	cmp	r3, #0
   14c94:	d106      	bne.n	14ca4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x3c>
   14c96:	4a05      	ldr	r2, [pc, #20]	; (14cac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
   14c98:	9b01      	ldr	r3, [sp, #4]
   14c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c9e:	2b00      	cmp	r3, #0
   14ca0:	d100      	bne.n	14ca4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14ca2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14ca4:	bf00      	nop
   14ca6:	b003      	add	sp, #12
   14ca8:	f85d fb04 	ldr.w	pc, [sp], #4
   14cac:	1fff9678 	.word	0x1fff9678
   14cb0:	1fff9674 	.word	0x1fff9674

00014cb4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13(void)
{
   14cb4:	b500      	push	{lr}
   14cb6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14cb8:	f7ec fd76 	bl	17a8 <Sys_GetCoreID>
   14cbc:	4603      	mov	r3, r0
   14cbe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId])
   14cc0:	4a10      	ldr	r2, [pc, #64]	; (14d04 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
   14cc2:	9b01      	ldr	r3, [sp, #4]
   14cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14cc8:	2b00      	cmp	r3, #0
   14cca:	d10d      	bne.n	14ce8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14ccc:	f7eb fe24 	bl	918 <Pwm_schm_read_msr>
   14cd0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14cd2:	9b00      	ldr	r3, [sp, #0]
   14cd4:	f003 0301 	and.w	r3, r3, #1
   14cd8:	2b00      	cmp	r3, #0
   14cda:	d100      	bne.n	14cde <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14cdc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   14cde:	490a      	ldr	r1, [pc, #40]	; (14d08 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x54>)
   14ce0:	9b01      	ldr	r3, [sp, #4]
   14ce2:	9a00      	ldr	r2, [sp, #0]
   14ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId]++;
   14ce8:	4a06      	ldr	r2, [pc, #24]	; (14d04 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
   14cea:	9b01      	ldr	r3, [sp, #4]
   14cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14cf0:	1c5a      	adds	r2, r3, #1
   14cf2:	4904      	ldr	r1, [pc, #16]	; (14d04 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
   14cf4:	9b01      	ldr	r3, [sp, #4]
   14cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14cfa:	bf00      	nop
   14cfc:	b003      	add	sp, #12
   14cfe:	f85d fb04 	ldr.w	pc, [sp], #4
   14d02:	bf00      	nop
   14d04:	1fff9680 	.word	0x1fff9680
   14d08:	1fff967c 	.word	0x1fff967c

00014d0c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13(void)
{
   14d0c:	b500      	push	{lr}
   14d0e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14d10:	f7ec fd4a 	bl	17a8 <Sys_GetCoreID>
   14d14:	4603      	mov	r3, r0
   14d16:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId]--;
   14d18:	4a0d      	ldr	r2, [pc, #52]	; (14d50 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
   14d1a:	9b01      	ldr	r3, [sp, #4]
   14d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d20:	1e5a      	subs	r2, r3, #1
   14d22:	490b      	ldr	r1, [pc, #44]	; (14d50 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
   14d24:	9b01      	ldr	r3, [sp, #4]
   14d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   14d2a:	4a0a      	ldr	r2, [pc, #40]	; (14d54 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x48>)
   14d2c:	9b01      	ldr	r3, [sp, #4]
   14d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d32:	f003 0301 	and.w	r3, r3, #1
   14d36:	2b00      	cmp	r3, #0
   14d38:	d106      	bne.n	14d48 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x3c>
   14d3a:	4a05      	ldr	r2, [pc, #20]	; (14d50 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
   14d3c:	9b01      	ldr	r3, [sp, #4]
   14d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d42:	2b00      	cmp	r3, #0
   14d44:	d100      	bne.n	14d48 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14d46:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14d48:	bf00      	nop
   14d4a:	b003      	add	sp, #12
   14d4c:	f85d fb04 	ldr.w	pc, [sp], #4
   14d50:	1fff9680 	.word	0x1fff9680
   14d54:	1fff967c 	.word	0x1fff967c

00014d58 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14(void)
{
   14d58:	b500      	push	{lr}
   14d5a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14d5c:	f7ec fd24 	bl	17a8 <Sys_GetCoreID>
   14d60:	4603      	mov	r3, r0
   14d62:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId])
   14d64:	4a10      	ldr	r2, [pc, #64]	; (14da8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
   14d66:	9b01      	ldr	r3, [sp, #4]
   14d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d6c:	2b00      	cmp	r3, #0
   14d6e:	d10d      	bne.n	14d8c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14d70:	f7eb fdd2 	bl	918 <Pwm_schm_read_msr>
   14d74:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14d76:	9b00      	ldr	r3, [sp, #0]
   14d78:	f003 0301 	and.w	r3, r3, #1
   14d7c:	2b00      	cmp	r3, #0
   14d7e:	d100      	bne.n	14d82 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14d80:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   14d82:	490a      	ldr	r1, [pc, #40]	; (14dac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x54>)
   14d84:	9b01      	ldr	r3, [sp, #4]
   14d86:	9a00      	ldr	r2, [sp, #0]
   14d88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId]++;
   14d8c:	4a06      	ldr	r2, [pc, #24]	; (14da8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
   14d8e:	9b01      	ldr	r3, [sp, #4]
   14d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d94:	1c5a      	adds	r2, r3, #1
   14d96:	4904      	ldr	r1, [pc, #16]	; (14da8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
   14d98:	9b01      	ldr	r3, [sp, #4]
   14d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14d9e:	bf00      	nop
   14da0:	b003      	add	sp, #12
   14da2:	f85d fb04 	ldr.w	pc, [sp], #4
   14da6:	bf00      	nop
   14da8:	1fff9688 	.word	0x1fff9688
   14dac:	1fff9684 	.word	0x1fff9684

00014db0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14(void)
{
   14db0:	b500      	push	{lr}
   14db2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14db4:	f7ec fcf8 	bl	17a8 <Sys_GetCoreID>
   14db8:	4603      	mov	r3, r0
   14dba:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId]--;
   14dbc:	4a0d      	ldr	r2, [pc, #52]	; (14df4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
   14dbe:	9b01      	ldr	r3, [sp, #4]
   14dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14dc4:	1e5a      	subs	r2, r3, #1
   14dc6:	490b      	ldr	r1, [pc, #44]	; (14df4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
   14dc8:	9b01      	ldr	r3, [sp, #4]
   14dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   14dce:	4a0a      	ldr	r2, [pc, #40]	; (14df8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x48>)
   14dd0:	9b01      	ldr	r3, [sp, #4]
   14dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14dd6:	f003 0301 	and.w	r3, r3, #1
   14dda:	2b00      	cmp	r3, #0
   14ddc:	d106      	bne.n	14dec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x3c>
   14dde:	4a05      	ldr	r2, [pc, #20]	; (14df4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
   14de0:	9b01      	ldr	r3, [sp, #4]
   14de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14de6:	2b00      	cmp	r3, #0
   14de8:	d100      	bne.n	14dec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14dea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14dec:	bf00      	nop
   14dee:	b003      	add	sp, #12
   14df0:	f85d fb04 	ldr.w	pc, [sp], #4
   14df4:	1fff9688 	.word	0x1fff9688
   14df8:	1fff9684 	.word	0x1fff9684

00014dfc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15(void)
{
   14dfc:	b500      	push	{lr}
   14dfe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14e00:	f7ec fcd2 	bl	17a8 <Sys_GetCoreID>
   14e04:	4603      	mov	r3, r0
   14e06:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId])
   14e08:	4a10      	ldr	r2, [pc, #64]	; (14e4c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
   14e0a:	9b01      	ldr	r3, [sp, #4]
   14e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e10:	2b00      	cmp	r3, #0
   14e12:	d10d      	bne.n	14e30 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14e14:	f7eb fd80 	bl	918 <Pwm_schm_read_msr>
   14e18:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14e1a:	9b00      	ldr	r3, [sp, #0]
   14e1c:	f003 0301 	and.w	r3, r3, #1
   14e20:	2b00      	cmp	r3, #0
   14e22:	d100      	bne.n	14e26 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14e24:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   14e26:	490a      	ldr	r1, [pc, #40]	; (14e50 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x54>)
   14e28:	9b01      	ldr	r3, [sp, #4]
   14e2a:	9a00      	ldr	r2, [sp, #0]
   14e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId]++;
   14e30:	4a06      	ldr	r2, [pc, #24]	; (14e4c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
   14e32:	9b01      	ldr	r3, [sp, #4]
   14e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e38:	1c5a      	adds	r2, r3, #1
   14e3a:	4904      	ldr	r1, [pc, #16]	; (14e4c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
   14e3c:	9b01      	ldr	r3, [sp, #4]
   14e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14e42:	bf00      	nop
   14e44:	b003      	add	sp, #12
   14e46:	f85d fb04 	ldr.w	pc, [sp], #4
   14e4a:	bf00      	nop
   14e4c:	1fff9690 	.word	0x1fff9690
   14e50:	1fff968c 	.word	0x1fff968c

00014e54 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15(void)
{
   14e54:	b500      	push	{lr}
   14e56:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14e58:	f7ec fca6 	bl	17a8 <Sys_GetCoreID>
   14e5c:	4603      	mov	r3, r0
   14e5e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId]--;
   14e60:	4a0d      	ldr	r2, [pc, #52]	; (14e98 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
   14e62:	9b01      	ldr	r3, [sp, #4]
   14e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e68:	1e5a      	subs	r2, r3, #1
   14e6a:	490b      	ldr	r1, [pc, #44]	; (14e98 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
   14e6c:	9b01      	ldr	r3, [sp, #4]
   14e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   14e72:	4a0a      	ldr	r2, [pc, #40]	; (14e9c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x48>)
   14e74:	9b01      	ldr	r3, [sp, #4]
   14e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e7a:	f003 0301 	and.w	r3, r3, #1
   14e7e:	2b00      	cmp	r3, #0
   14e80:	d106      	bne.n	14e90 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x3c>
   14e82:	4a05      	ldr	r2, [pc, #20]	; (14e98 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
   14e84:	9b01      	ldr	r3, [sp, #4]
   14e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e8a:	2b00      	cmp	r3, #0
   14e8c:	d100      	bne.n	14e90 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14e8e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14e90:	bf00      	nop
   14e92:	b003      	add	sp, #12
   14e94:	f85d fb04 	ldr.w	pc, [sp], #4
   14e98:	1fff9690 	.word	0x1fff9690
   14e9c:	1fff968c 	.word	0x1fff968c

00014ea0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16(void)
{
   14ea0:	b500      	push	{lr}
   14ea2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14ea4:	f7ec fc80 	bl	17a8 <Sys_GetCoreID>
   14ea8:	4603      	mov	r3, r0
   14eaa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId])
   14eac:	4a10      	ldr	r2, [pc, #64]	; (14ef0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
   14eae:	9b01      	ldr	r3, [sp, #4]
   14eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14eb4:	2b00      	cmp	r3, #0
   14eb6:	d10d      	bne.n	14ed4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14eb8:	f7eb fd2e 	bl	918 <Pwm_schm_read_msr>
   14ebc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14ebe:	9b00      	ldr	r3, [sp, #0]
   14ec0:	f003 0301 	and.w	r3, r3, #1
   14ec4:	2b00      	cmp	r3, #0
   14ec6:	d100      	bne.n	14eca <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14ec8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   14eca:	490a      	ldr	r1, [pc, #40]	; (14ef4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x54>)
   14ecc:	9b01      	ldr	r3, [sp, #4]
   14ece:	9a00      	ldr	r2, [sp, #0]
   14ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId]++;
   14ed4:	4a06      	ldr	r2, [pc, #24]	; (14ef0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
   14ed6:	9b01      	ldr	r3, [sp, #4]
   14ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14edc:	1c5a      	adds	r2, r3, #1
   14ede:	4904      	ldr	r1, [pc, #16]	; (14ef0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
   14ee0:	9b01      	ldr	r3, [sp, #4]
   14ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14ee6:	bf00      	nop
   14ee8:	b003      	add	sp, #12
   14eea:	f85d fb04 	ldr.w	pc, [sp], #4
   14eee:	bf00      	nop
   14ef0:	1fff9698 	.word	0x1fff9698
   14ef4:	1fff9694 	.word	0x1fff9694

00014ef8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16(void)
{
   14ef8:	b500      	push	{lr}
   14efa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14efc:	f7ec fc54 	bl	17a8 <Sys_GetCoreID>
   14f00:	4603      	mov	r3, r0
   14f02:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId]--;
   14f04:	4a0d      	ldr	r2, [pc, #52]	; (14f3c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
   14f06:	9b01      	ldr	r3, [sp, #4]
   14f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f0c:	1e5a      	subs	r2, r3, #1
   14f0e:	490b      	ldr	r1, [pc, #44]	; (14f3c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
   14f10:	9b01      	ldr	r3, [sp, #4]
   14f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   14f16:	4a0a      	ldr	r2, [pc, #40]	; (14f40 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x48>)
   14f18:	9b01      	ldr	r3, [sp, #4]
   14f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f1e:	f003 0301 	and.w	r3, r3, #1
   14f22:	2b00      	cmp	r3, #0
   14f24:	d106      	bne.n	14f34 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x3c>
   14f26:	4a05      	ldr	r2, [pc, #20]	; (14f3c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
   14f28:	9b01      	ldr	r3, [sp, #4]
   14f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f2e:	2b00      	cmp	r3, #0
   14f30:	d100      	bne.n	14f34 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14f32:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14f34:	bf00      	nop
   14f36:	b003      	add	sp, #12
   14f38:	f85d fb04 	ldr.w	pc, [sp], #4
   14f3c:	1fff9698 	.word	0x1fff9698
   14f40:	1fff9694 	.word	0x1fff9694

00014f44 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17(void)
{
   14f44:	b500      	push	{lr}
   14f46:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14f48:	f7ec fc2e 	bl	17a8 <Sys_GetCoreID>
   14f4c:	4603      	mov	r3, r0
   14f4e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId])
   14f50:	4a10      	ldr	r2, [pc, #64]	; (14f94 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
   14f52:	9b01      	ldr	r3, [sp, #4]
   14f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f58:	2b00      	cmp	r3, #0
   14f5a:	d10d      	bne.n	14f78 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14f5c:	f7eb fcdc 	bl	918 <Pwm_schm_read_msr>
   14f60:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14f62:	9b00      	ldr	r3, [sp, #0]
   14f64:	f003 0301 	and.w	r3, r3, #1
   14f68:	2b00      	cmp	r3, #0
   14f6a:	d100      	bne.n	14f6e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14f6c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   14f6e:	490a      	ldr	r1, [pc, #40]	; (14f98 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x54>)
   14f70:	9b01      	ldr	r3, [sp, #4]
   14f72:	9a00      	ldr	r2, [sp, #0]
   14f74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId]++;
   14f78:	4a06      	ldr	r2, [pc, #24]	; (14f94 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
   14f7a:	9b01      	ldr	r3, [sp, #4]
   14f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f80:	1c5a      	adds	r2, r3, #1
   14f82:	4904      	ldr	r1, [pc, #16]	; (14f94 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
   14f84:	9b01      	ldr	r3, [sp, #4]
   14f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14f8a:	bf00      	nop
   14f8c:	b003      	add	sp, #12
   14f8e:	f85d fb04 	ldr.w	pc, [sp], #4
   14f92:	bf00      	nop
   14f94:	1fff96a0 	.word	0x1fff96a0
   14f98:	1fff969c 	.word	0x1fff969c

00014f9c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17(void)
{
   14f9c:	b500      	push	{lr}
   14f9e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14fa0:	f7ec fc02 	bl	17a8 <Sys_GetCoreID>
   14fa4:	4603      	mov	r3, r0
   14fa6:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId]--;
   14fa8:	4a0d      	ldr	r2, [pc, #52]	; (14fe0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
   14faa:	9b01      	ldr	r3, [sp, #4]
   14fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fb0:	1e5a      	subs	r2, r3, #1
   14fb2:	490b      	ldr	r1, [pc, #44]	; (14fe0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
   14fb4:	9b01      	ldr	r3, [sp, #4]
   14fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   14fba:	4a0a      	ldr	r2, [pc, #40]	; (14fe4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x48>)
   14fbc:	9b01      	ldr	r3, [sp, #4]
   14fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fc2:	f003 0301 	and.w	r3, r3, #1
   14fc6:	2b00      	cmp	r3, #0
   14fc8:	d106      	bne.n	14fd8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x3c>
   14fca:	4a05      	ldr	r2, [pc, #20]	; (14fe0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
   14fcc:	9b01      	ldr	r3, [sp, #4]
   14fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fd2:	2b00      	cmp	r3, #0
   14fd4:	d100      	bne.n	14fd8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14fd6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14fd8:	bf00      	nop
   14fda:	b003      	add	sp, #12
   14fdc:	f85d fb04 	ldr.w	pc, [sp], #4
   14fe0:	1fff96a0 	.word	0x1fff96a0
   14fe4:	1fff969c 	.word	0x1fff969c

00014fe8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18(void)
{
   14fe8:	b500      	push	{lr}
   14fea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14fec:	f7ec fbdc 	bl	17a8 <Sys_GetCoreID>
   14ff0:	4603      	mov	r3, r0
   14ff2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId])
   14ff4:	4a10      	ldr	r2, [pc, #64]	; (15038 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
   14ff6:	9b01      	ldr	r3, [sp, #4]
   14ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ffc:	2b00      	cmp	r3, #0
   14ffe:	d10d      	bne.n	1501c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15000:	f7eb fc8a 	bl	918 <Pwm_schm_read_msr>
   15004:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15006:	9b00      	ldr	r3, [sp, #0]
   15008:	f003 0301 	and.w	r3, r3, #1
   1500c:	2b00      	cmp	r3, #0
   1500e:	d100      	bne.n	15012 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15010:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   15012:	490a      	ldr	r1, [pc, #40]	; (1503c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x54>)
   15014:	9b01      	ldr	r3, [sp, #4]
   15016:	9a00      	ldr	r2, [sp, #0]
   15018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId]++;
   1501c:	4a06      	ldr	r2, [pc, #24]	; (15038 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
   1501e:	9b01      	ldr	r3, [sp, #4]
   15020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15024:	1c5a      	adds	r2, r3, #1
   15026:	4904      	ldr	r1, [pc, #16]	; (15038 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
   15028:	9b01      	ldr	r3, [sp, #4]
   1502a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1502e:	bf00      	nop
   15030:	b003      	add	sp, #12
   15032:	f85d fb04 	ldr.w	pc, [sp], #4
   15036:	bf00      	nop
   15038:	1fff96a8 	.word	0x1fff96a8
   1503c:	1fff96a4 	.word	0x1fff96a4

00015040 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18(void)
{
   15040:	b500      	push	{lr}
   15042:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15044:	f7ec fbb0 	bl	17a8 <Sys_GetCoreID>
   15048:	4603      	mov	r3, r0
   1504a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId]--;
   1504c:	4a0d      	ldr	r2, [pc, #52]	; (15084 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
   1504e:	9b01      	ldr	r3, [sp, #4]
   15050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15054:	1e5a      	subs	r2, r3, #1
   15056:	490b      	ldr	r1, [pc, #44]	; (15084 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
   15058:	9b01      	ldr	r3, [sp, #4]
   1505a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   1505e:	4a0a      	ldr	r2, [pc, #40]	; (15088 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x48>)
   15060:	9b01      	ldr	r3, [sp, #4]
   15062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15066:	f003 0301 	and.w	r3, r3, #1
   1506a:	2b00      	cmp	r3, #0
   1506c:	d106      	bne.n	1507c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x3c>
   1506e:	4a05      	ldr	r2, [pc, #20]	; (15084 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
   15070:	9b01      	ldr	r3, [sp, #4]
   15072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15076:	2b00      	cmp	r3, #0
   15078:	d100      	bne.n	1507c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1507a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1507c:	bf00      	nop
   1507e:	b003      	add	sp, #12
   15080:	f85d fb04 	ldr.w	pc, [sp], #4
   15084:	1fff96a8 	.word	0x1fff96a8
   15088:	1fff96a4 	.word	0x1fff96a4

0001508c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19(void)
{
   1508c:	b500      	push	{lr}
   1508e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15090:	f7ec fb8a 	bl	17a8 <Sys_GetCoreID>
   15094:	4603      	mov	r3, r0
   15096:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId])
   15098:	4a10      	ldr	r2, [pc, #64]	; (150dc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
   1509a:	9b01      	ldr	r3, [sp, #4]
   1509c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150a0:	2b00      	cmp	r3, #0
   150a2:	d10d      	bne.n	150c0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   150a4:	f7eb fc38 	bl	918 <Pwm_schm_read_msr>
   150a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   150aa:	9b00      	ldr	r3, [sp, #0]
   150ac:	f003 0301 	and.w	r3, r3, #1
   150b0:	2b00      	cmp	r3, #0
   150b2:	d100      	bne.n	150b6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   150b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   150b6:	490a      	ldr	r1, [pc, #40]	; (150e0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x54>)
   150b8:	9b01      	ldr	r3, [sp, #4]
   150ba:	9a00      	ldr	r2, [sp, #0]
   150bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId]++;
   150c0:	4a06      	ldr	r2, [pc, #24]	; (150dc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
   150c2:	9b01      	ldr	r3, [sp, #4]
   150c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150c8:	1c5a      	adds	r2, r3, #1
   150ca:	4904      	ldr	r1, [pc, #16]	; (150dc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
   150cc:	9b01      	ldr	r3, [sp, #4]
   150ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   150d2:	bf00      	nop
   150d4:	b003      	add	sp, #12
   150d6:	f85d fb04 	ldr.w	pc, [sp], #4
   150da:	bf00      	nop
   150dc:	1fff96b0 	.word	0x1fff96b0
   150e0:	1fff96ac 	.word	0x1fff96ac

000150e4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19(void)
{
   150e4:	b500      	push	{lr}
   150e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   150e8:	f7ec fb5e 	bl	17a8 <Sys_GetCoreID>
   150ec:	4603      	mov	r3, r0
   150ee:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId]--;
   150f0:	4a0d      	ldr	r2, [pc, #52]	; (15128 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
   150f2:	9b01      	ldr	r3, [sp, #4]
   150f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150f8:	1e5a      	subs	r2, r3, #1
   150fa:	490b      	ldr	r1, [pc, #44]	; (15128 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
   150fc:	9b01      	ldr	r3, [sp, #4]
   150fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   15102:	4a0a      	ldr	r2, [pc, #40]	; (1512c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x48>)
   15104:	9b01      	ldr	r3, [sp, #4]
   15106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1510a:	f003 0301 	and.w	r3, r3, #1
   1510e:	2b00      	cmp	r3, #0
   15110:	d106      	bne.n	15120 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x3c>
   15112:	4a05      	ldr	r2, [pc, #20]	; (15128 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
   15114:	9b01      	ldr	r3, [sp, #4]
   15116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1511a:	2b00      	cmp	r3, #0
   1511c:	d100      	bne.n	15120 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1511e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15120:	bf00      	nop
   15122:	b003      	add	sp, #12
   15124:	f85d fb04 	ldr.w	pc, [sp], #4
   15128:	1fff96b0 	.word	0x1fff96b0
   1512c:	1fff96ac 	.word	0x1fff96ac

00015130 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20(void)
{
   15130:	b500      	push	{lr}
   15132:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15134:	f7ec fb38 	bl	17a8 <Sys_GetCoreID>
   15138:	4603      	mov	r3, r0
   1513a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId])
   1513c:	4a10      	ldr	r2, [pc, #64]	; (15180 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
   1513e:	9b01      	ldr	r3, [sp, #4]
   15140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15144:	2b00      	cmp	r3, #0
   15146:	d10d      	bne.n	15164 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15148:	f7eb fbe6 	bl	918 <Pwm_schm_read_msr>
   1514c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1514e:	9b00      	ldr	r3, [sp, #0]
   15150:	f003 0301 	and.w	r3, r3, #1
   15154:	2b00      	cmp	r3, #0
   15156:	d100      	bne.n	1515a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15158:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   1515a:	490a      	ldr	r1, [pc, #40]	; (15184 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x54>)
   1515c:	9b01      	ldr	r3, [sp, #4]
   1515e:	9a00      	ldr	r2, [sp, #0]
   15160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId]++;
   15164:	4a06      	ldr	r2, [pc, #24]	; (15180 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
   15166:	9b01      	ldr	r3, [sp, #4]
   15168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1516c:	1c5a      	adds	r2, r3, #1
   1516e:	4904      	ldr	r1, [pc, #16]	; (15180 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
   15170:	9b01      	ldr	r3, [sp, #4]
   15172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15176:	bf00      	nop
   15178:	b003      	add	sp, #12
   1517a:	f85d fb04 	ldr.w	pc, [sp], #4
   1517e:	bf00      	nop
   15180:	1fff96b8 	.word	0x1fff96b8
   15184:	1fff96b4 	.word	0x1fff96b4

00015188 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20(void)
{
   15188:	b500      	push	{lr}
   1518a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1518c:	f7ec fb0c 	bl	17a8 <Sys_GetCoreID>
   15190:	4603      	mov	r3, r0
   15192:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId]--;
   15194:	4a0d      	ldr	r2, [pc, #52]	; (151cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
   15196:	9b01      	ldr	r3, [sp, #4]
   15198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1519c:	1e5a      	subs	r2, r3, #1
   1519e:	490b      	ldr	r1, [pc, #44]	; (151cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
   151a0:	9b01      	ldr	r3, [sp, #4]
   151a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   151a6:	4a0a      	ldr	r2, [pc, #40]	; (151d0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x48>)
   151a8:	9b01      	ldr	r3, [sp, #4]
   151aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151ae:	f003 0301 	and.w	r3, r3, #1
   151b2:	2b00      	cmp	r3, #0
   151b4:	d106      	bne.n	151c4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x3c>
   151b6:	4a05      	ldr	r2, [pc, #20]	; (151cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
   151b8:	9b01      	ldr	r3, [sp, #4]
   151ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151be:	2b00      	cmp	r3, #0
   151c0:	d100      	bne.n	151c4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   151c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   151c4:	bf00      	nop
   151c6:	b003      	add	sp, #12
   151c8:	f85d fb04 	ldr.w	pc, [sp], #4
   151cc:	1fff96b8 	.word	0x1fff96b8
   151d0:	1fff96b4 	.word	0x1fff96b4

000151d4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21(void)
{
   151d4:	b500      	push	{lr}
   151d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   151d8:	f7ec fae6 	bl	17a8 <Sys_GetCoreID>
   151dc:	4603      	mov	r3, r0
   151de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId])
   151e0:	4a10      	ldr	r2, [pc, #64]	; (15224 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
   151e2:	9b01      	ldr	r3, [sp, #4]
   151e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151e8:	2b00      	cmp	r3, #0
   151ea:	d10d      	bne.n	15208 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   151ec:	f7eb fb94 	bl	918 <Pwm_schm_read_msr>
   151f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   151f2:	9b00      	ldr	r3, [sp, #0]
   151f4:	f003 0301 	and.w	r3, r3, #1
   151f8:	2b00      	cmp	r3, #0
   151fa:	d100      	bne.n	151fe <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   151fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_21[u32CoreId] = msr;
   151fe:	490a      	ldr	r1, [pc, #40]	; (15228 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x54>)
   15200:	9b01      	ldr	r3, [sp, #4]
   15202:	9a00      	ldr	r2, [sp, #0]
   15204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId]++;
   15208:	4a06      	ldr	r2, [pc, #24]	; (15224 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
   1520a:	9b01      	ldr	r3, [sp, #4]
   1520c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15210:	1c5a      	adds	r2, r3, #1
   15212:	4904      	ldr	r1, [pc, #16]	; (15224 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
   15214:	9b01      	ldr	r3, [sp, #4]
   15216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1521a:	bf00      	nop
   1521c:	b003      	add	sp, #12
   1521e:	f85d fb04 	ldr.w	pc, [sp], #4
   15222:	bf00      	nop
   15224:	1fff96c0 	.word	0x1fff96c0
   15228:	1fff96bc 	.word	0x1fff96bc

0001522c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21(void)
{
   1522c:	b500      	push	{lr}
   1522e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15230:	f7ec faba 	bl	17a8 <Sys_GetCoreID>
   15234:	4603      	mov	r3, r0
   15236:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId]--;
   15238:	4a0d      	ldr	r2, [pc, #52]	; (15270 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
   1523a:	9b01      	ldr	r3, [sp, #4]
   1523c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15240:	1e5a      	subs	r2, r3, #1
   15242:	490b      	ldr	r1, [pc, #44]	; (15270 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
   15244:	9b01      	ldr	r3, [sp, #4]
   15246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
   1524a:	4a0a      	ldr	r2, [pc, #40]	; (15274 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x48>)
   1524c:	9b01      	ldr	r3, [sp, #4]
   1524e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15252:	f003 0301 	and.w	r3, r3, #1
   15256:	2b00      	cmp	r3, #0
   15258:	d106      	bne.n	15268 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x3c>
   1525a:	4a05      	ldr	r2, [pc, #20]	; (15270 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
   1525c:	9b01      	ldr	r3, [sp, #4]
   1525e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15262:	2b00      	cmp	r3, #0
   15264:	d100      	bne.n	15268 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15266:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15268:	bf00      	nop
   1526a:	b003      	add	sp, #12
   1526c:	f85d fb04 	ldr.w	pc, [sp], #4
   15270:	1fff96c0 	.word	0x1fff96c0
   15274:	1fff96bc 	.word	0x1fff96bc

00015278 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22(void)
{
   15278:	b500      	push	{lr}
   1527a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1527c:	f7ec fa94 	bl	17a8 <Sys_GetCoreID>
   15280:	4603      	mov	r3, r0
   15282:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId])
   15284:	4a10      	ldr	r2, [pc, #64]	; (152c8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
   15286:	9b01      	ldr	r3, [sp, #4]
   15288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1528c:	2b00      	cmp	r3, #0
   1528e:	d10d      	bne.n	152ac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15290:	f7eb fb42 	bl	918 <Pwm_schm_read_msr>
   15294:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15296:	9b00      	ldr	r3, [sp, #0]
   15298:	f003 0301 	and.w	r3, r3, #1
   1529c:	2b00      	cmp	r3, #0
   1529e:	d100      	bne.n	152a2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   152a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_22[u32CoreId] = msr;
   152a2:	490a      	ldr	r1, [pc, #40]	; (152cc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x54>)
   152a4:	9b01      	ldr	r3, [sp, #4]
   152a6:	9a00      	ldr	r2, [sp, #0]
   152a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId]++;
   152ac:	4a06      	ldr	r2, [pc, #24]	; (152c8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
   152ae:	9b01      	ldr	r3, [sp, #4]
   152b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152b4:	1c5a      	adds	r2, r3, #1
   152b6:	4904      	ldr	r1, [pc, #16]	; (152c8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
   152b8:	9b01      	ldr	r3, [sp, #4]
   152ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   152be:	bf00      	nop
   152c0:	b003      	add	sp, #12
   152c2:	f85d fb04 	ldr.w	pc, [sp], #4
   152c6:	bf00      	nop
   152c8:	1fff96c8 	.word	0x1fff96c8
   152cc:	1fff96c4 	.word	0x1fff96c4

000152d0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22(void)
{
   152d0:	b500      	push	{lr}
   152d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   152d4:	f7ec fa68 	bl	17a8 <Sys_GetCoreID>
   152d8:	4603      	mov	r3, r0
   152da:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId]--;
   152dc:	4a0d      	ldr	r2, [pc, #52]	; (15314 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
   152de:	9b01      	ldr	r3, [sp, #4]
   152e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152e4:	1e5a      	subs	r2, r3, #1
   152e6:	490b      	ldr	r1, [pc, #44]	; (15314 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
   152e8:	9b01      	ldr	r3, [sp, #4]
   152ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
   152ee:	4a0a      	ldr	r2, [pc, #40]	; (15318 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x48>)
   152f0:	9b01      	ldr	r3, [sp, #4]
   152f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152f6:	f003 0301 	and.w	r3, r3, #1
   152fa:	2b00      	cmp	r3, #0
   152fc:	d106      	bne.n	1530c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x3c>
   152fe:	4a05      	ldr	r2, [pc, #20]	; (15314 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
   15300:	9b01      	ldr	r3, [sp, #4]
   15302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15306:	2b00      	cmp	r3, #0
   15308:	d100      	bne.n	1530c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1530a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1530c:	bf00      	nop
   1530e:	b003      	add	sp, #12
   15310:	f85d fb04 	ldr.w	pc, [sp], #4
   15314:	1fff96c8 	.word	0x1fff96c8
   15318:	1fff96c4 	.word	0x1fff96c4

0001531c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23(void)
{
   1531c:	b500      	push	{lr}
   1531e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15320:	f7ec fa42 	bl	17a8 <Sys_GetCoreID>
   15324:	4603      	mov	r3, r0
   15326:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId])
   15328:	4a10      	ldr	r2, [pc, #64]	; (1536c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
   1532a:	9b01      	ldr	r3, [sp, #4]
   1532c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15330:	2b00      	cmp	r3, #0
   15332:	d10d      	bne.n	15350 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15334:	f7eb faf0 	bl	918 <Pwm_schm_read_msr>
   15338:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1533a:	9b00      	ldr	r3, [sp, #0]
   1533c:	f003 0301 	and.w	r3, r3, #1
   15340:	2b00      	cmp	r3, #0
   15342:	d100      	bne.n	15346 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15344:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_23[u32CoreId] = msr;
   15346:	490a      	ldr	r1, [pc, #40]	; (15370 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x54>)
   15348:	9b01      	ldr	r3, [sp, #4]
   1534a:	9a00      	ldr	r2, [sp, #0]
   1534c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId]++;
   15350:	4a06      	ldr	r2, [pc, #24]	; (1536c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
   15352:	9b01      	ldr	r3, [sp, #4]
   15354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15358:	1c5a      	adds	r2, r3, #1
   1535a:	4904      	ldr	r1, [pc, #16]	; (1536c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
   1535c:	9b01      	ldr	r3, [sp, #4]
   1535e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15362:	bf00      	nop
   15364:	b003      	add	sp, #12
   15366:	f85d fb04 	ldr.w	pc, [sp], #4
   1536a:	bf00      	nop
   1536c:	1fff96d0 	.word	0x1fff96d0
   15370:	1fff96cc 	.word	0x1fff96cc

00015374 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23(void)
{
   15374:	b500      	push	{lr}
   15376:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15378:	f7ec fa16 	bl	17a8 <Sys_GetCoreID>
   1537c:	4603      	mov	r3, r0
   1537e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId]--;
   15380:	4a0d      	ldr	r2, [pc, #52]	; (153b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
   15382:	9b01      	ldr	r3, [sp, #4]
   15384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15388:	1e5a      	subs	r2, r3, #1
   1538a:	490b      	ldr	r1, [pc, #44]	; (153b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
   1538c:	9b01      	ldr	r3, [sp, #4]
   1538e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   15392:	4a0a      	ldr	r2, [pc, #40]	; (153bc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x48>)
   15394:	9b01      	ldr	r3, [sp, #4]
   15396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1539a:	f003 0301 	and.w	r3, r3, #1
   1539e:	2b00      	cmp	r3, #0
   153a0:	d106      	bne.n	153b0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x3c>
   153a2:	4a05      	ldr	r2, [pc, #20]	; (153b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
   153a4:	9b01      	ldr	r3, [sp, #4]
   153a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153aa:	2b00      	cmp	r3, #0
   153ac:	d100      	bne.n	153b0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   153ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   153b0:	bf00      	nop
   153b2:	b003      	add	sp, #12
   153b4:	f85d fb04 	ldr.w	pc, [sp], #4
   153b8:	1fff96d0 	.word	0x1fff96d0
   153bc:	1fff96cc 	.word	0x1fff96cc

000153c0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24(void)
{
   153c0:	b500      	push	{lr}
   153c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   153c4:	f7ec f9f0 	bl	17a8 <Sys_GetCoreID>
   153c8:	4603      	mov	r3, r0
   153ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId])
   153cc:	4a10      	ldr	r2, [pc, #64]	; (15410 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
   153ce:	9b01      	ldr	r3, [sp, #4]
   153d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153d4:	2b00      	cmp	r3, #0
   153d6:	d10d      	bne.n	153f4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   153d8:	f7eb fa9e 	bl	918 <Pwm_schm_read_msr>
   153dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   153de:	9b00      	ldr	r3, [sp, #0]
   153e0:	f003 0301 	and.w	r3, r3, #1
   153e4:	2b00      	cmp	r3, #0
   153e6:	d100      	bne.n	153ea <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   153e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   153ea:	490a      	ldr	r1, [pc, #40]	; (15414 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x54>)
   153ec:	9b01      	ldr	r3, [sp, #4]
   153ee:	9a00      	ldr	r2, [sp, #0]
   153f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId]++;
   153f4:	4a06      	ldr	r2, [pc, #24]	; (15410 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
   153f6:	9b01      	ldr	r3, [sp, #4]
   153f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153fc:	1c5a      	adds	r2, r3, #1
   153fe:	4904      	ldr	r1, [pc, #16]	; (15410 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
   15400:	9b01      	ldr	r3, [sp, #4]
   15402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15406:	bf00      	nop
   15408:	b003      	add	sp, #12
   1540a:	f85d fb04 	ldr.w	pc, [sp], #4
   1540e:	bf00      	nop
   15410:	1fff96d8 	.word	0x1fff96d8
   15414:	1fff96d4 	.word	0x1fff96d4

00015418 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24(void)
{
   15418:	b500      	push	{lr}
   1541a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1541c:	f7ec f9c4 	bl	17a8 <Sys_GetCoreID>
   15420:	4603      	mov	r3, r0
   15422:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId]--;
   15424:	4a0d      	ldr	r2, [pc, #52]	; (1545c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
   15426:	9b01      	ldr	r3, [sp, #4]
   15428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1542c:	1e5a      	subs	r2, r3, #1
   1542e:	490b      	ldr	r1, [pc, #44]	; (1545c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
   15430:	9b01      	ldr	r3, [sp, #4]
   15432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   15436:	4a0a      	ldr	r2, [pc, #40]	; (15460 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x48>)
   15438:	9b01      	ldr	r3, [sp, #4]
   1543a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1543e:	f003 0301 	and.w	r3, r3, #1
   15442:	2b00      	cmp	r3, #0
   15444:	d106      	bne.n	15454 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x3c>
   15446:	4a05      	ldr	r2, [pc, #20]	; (1545c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
   15448:	9b01      	ldr	r3, [sp, #4]
   1544a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1544e:	2b00      	cmp	r3, #0
   15450:	d100      	bne.n	15454 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15452:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15454:	bf00      	nop
   15456:	b003      	add	sp, #12
   15458:	f85d fb04 	ldr.w	pc, [sp], #4
   1545c:	1fff96d8 	.word	0x1fff96d8
   15460:	1fff96d4 	.word	0x1fff96d4

00015464 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25(void)
{
   15464:	b500      	push	{lr}
   15466:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15468:	f7ec f99e 	bl	17a8 <Sys_GetCoreID>
   1546c:	4603      	mov	r3, r0
   1546e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId])
   15470:	4a10      	ldr	r2, [pc, #64]	; (154b4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
   15472:	9b01      	ldr	r3, [sp, #4]
   15474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15478:	2b00      	cmp	r3, #0
   1547a:	d10d      	bne.n	15498 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1547c:	f7eb fa4c 	bl	918 <Pwm_schm_read_msr>
   15480:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15482:	9b00      	ldr	r3, [sp, #0]
   15484:	f003 0301 	and.w	r3, r3, #1
   15488:	2b00      	cmp	r3, #0
   1548a:	d100      	bne.n	1548e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1548c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   1548e:	490a      	ldr	r1, [pc, #40]	; (154b8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x54>)
   15490:	9b01      	ldr	r3, [sp, #4]
   15492:	9a00      	ldr	r2, [sp, #0]
   15494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId]++;
   15498:	4a06      	ldr	r2, [pc, #24]	; (154b4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
   1549a:	9b01      	ldr	r3, [sp, #4]
   1549c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154a0:	1c5a      	adds	r2, r3, #1
   154a2:	4904      	ldr	r1, [pc, #16]	; (154b4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
   154a4:	9b01      	ldr	r3, [sp, #4]
   154a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   154aa:	bf00      	nop
   154ac:	b003      	add	sp, #12
   154ae:	f85d fb04 	ldr.w	pc, [sp], #4
   154b2:	bf00      	nop
   154b4:	1fff96e0 	.word	0x1fff96e0
   154b8:	1fff96dc 	.word	0x1fff96dc

000154bc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25(void)
{
   154bc:	b500      	push	{lr}
   154be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   154c0:	f7ec f972 	bl	17a8 <Sys_GetCoreID>
   154c4:	4603      	mov	r3, r0
   154c6:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId]--;
   154c8:	4a0d      	ldr	r2, [pc, #52]	; (15500 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
   154ca:	9b01      	ldr	r3, [sp, #4]
   154cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154d0:	1e5a      	subs	r2, r3, #1
   154d2:	490b      	ldr	r1, [pc, #44]	; (15500 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
   154d4:	9b01      	ldr	r3, [sp, #4]
   154d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   154da:	4a0a      	ldr	r2, [pc, #40]	; (15504 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x48>)
   154dc:	9b01      	ldr	r3, [sp, #4]
   154de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154e2:	f003 0301 	and.w	r3, r3, #1
   154e6:	2b00      	cmp	r3, #0
   154e8:	d106      	bne.n	154f8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x3c>
   154ea:	4a05      	ldr	r2, [pc, #20]	; (15500 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
   154ec:	9b01      	ldr	r3, [sp, #4]
   154ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154f2:	2b00      	cmp	r3, #0
   154f4:	d100      	bne.n	154f8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   154f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   154f8:	bf00      	nop
   154fa:	b003      	add	sp, #12
   154fc:	f85d fb04 	ldr.w	pc, [sp], #4
   15500:	1fff96e0 	.word	0x1fff96e0
   15504:	1fff96dc 	.word	0x1fff96dc

00015508 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26(void)
{
   15508:	b500      	push	{lr}
   1550a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1550c:	f7ec f94c 	bl	17a8 <Sys_GetCoreID>
   15510:	4603      	mov	r3, r0
   15512:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId])
   15514:	4a10      	ldr	r2, [pc, #64]	; (15558 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
   15516:	9b01      	ldr	r3, [sp, #4]
   15518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1551c:	2b00      	cmp	r3, #0
   1551e:	d10d      	bne.n	1553c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15520:	f7eb f9fa 	bl	918 <Pwm_schm_read_msr>
   15524:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15526:	9b00      	ldr	r3, [sp, #0]
   15528:	f003 0301 	and.w	r3, r3, #1
   1552c:	2b00      	cmp	r3, #0
   1552e:	d100      	bne.n	15532 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15530:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   15532:	490a      	ldr	r1, [pc, #40]	; (1555c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x54>)
   15534:	9b01      	ldr	r3, [sp, #4]
   15536:	9a00      	ldr	r2, [sp, #0]
   15538:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId]++;
   1553c:	4a06      	ldr	r2, [pc, #24]	; (15558 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
   1553e:	9b01      	ldr	r3, [sp, #4]
   15540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15544:	1c5a      	adds	r2, r3, #1
   15546:	4904      	ldr	r1, [pc, #16]	; (15558 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
   15548:	9b01      	ldr	r3, [sp, #4]
   1554a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1554e:	bf00      	nop
   15550:	b003      	add	sp, #12
   15552:	f85d fb04 	ldr.w	pc, [sp], #4
   15556:	bf00      	nop
   15558:	1fff96e8 	.word	0x1fff96e8
   1555c:	1fff96e4 	.word	0x1fff96e4

00015560 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26(void)
{
   15560:	b500      	push	{lr}
   15562:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15564:	f7ec f920 	bl	17a8 <Sys_GetCoreID>
   15568:	4603      	mov	r3, r0
   1556a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId]--;
   1556c:	4a0d      	ldr	r2, [pc, #52]	; (155a4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
   1556e:	9b01      	ldr	r3, [sp, #4]
   15570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15574:	1e5a      	subs	r2, r3, #1
   15576:	490b      	ldr	r1, [pc, #44]	; (155a4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
   15578:	9b01      	ldr	r3, [sp, #4]
   1557a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   1557e:	4a0a      	ldr	r2, [pc, #40]	; (155a8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x48>)
   15580:	9b01      	ldr	r3, [sp, #4]
   15582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15586:	f003 0301 	and.w	r3, r3, #1
   1558a:	2b00      	cmp	r3, #0
   1558c:	d106      	bne.n	1559c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x3c>
   1558e:	4a05      	ldr	r2, [pc, #20]	; (155a4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
   15590:	9b01      	ldr	r3, [sp, #4]
   15592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15596:	2b00      	cmp	r3, #0
   15598:	d100      	bne.n	1559c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1559a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1559c:	bf00      	nop
   1559e:	b003      	add	sp, #12
   155a0:	f85d fb04 	ldr.w	pc, [sp], #4
   155a4:	1fff96e8 	.word	0x1fff96e8
   155a8:	1fff96e4 	.word	0x1fff96e4

000155ac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27(void)
{
   155ac:	b500      	push	{lr}
   155ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   155b0:	f7ec f8fa 	bl	17a8 <Sys_GetCoreID>
   155b4:	4603      	mov	r3, r0
   155b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId])
   155b8:	4a10      	ldr	r2, [pc, #64]	; (155fc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
   155ba:	9b01      	ldr	r3, [sp, #4]
   155bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155c0:	2b00      	cmp	r3, #0
   155c2:	d10d      	bne.n	155e0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   155c4:	f7eb f9a8 	bl	918 <Pwm_schm_read_msr>
   155c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   155ca:	9b00      	ldr	r3, [sp, #0]
   155cc:	f003 0301 	and.w	r3, r3, #1
   155d0:	2b00      	cmp	r3, #0
   155d2:	d100      	bne.n	155d6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   155d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   155d6:	490a      	ldr	r1, [pc, #40]	; (15600 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x54>)
   155d8:	9b01      	ldr	r3, [sp, #4]
   155da:	9a00      	ldr	r2, [sp, #0]
   155dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId]++;
   155e0:	4a06      	ldr	r2, [pc, #24]	; (155fc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
   155e2:	9b01      	ldr	r3, [sp, #4]
   155e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155e8:	1c5a      	adds	r2, r3, #1
   155ea:	4904      	ldr	r1, [pc, #16]	; (155fc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
   155ec:	9b01      	ldr	r3, [sp, #4]
   155ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   155f2:	bf00      	nop
   155f4:	b003      	add	sp, #12
   155f6:	f85d fb04 	ldr.w	pc, [sp], #4
   155fa:	bf00      	nop
   155fc:	1fff96f0 	.word	0x1fff96f0
   15600:	1fff96ec 	.word	0x1fff96ec

00015604 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27(void)
{
   15604:	b500      	push	{lr}
   15606:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15608:	f7ec f8ce 	bl	17a8 <Sys_GetCoreID>
   1560c:	4603      	mov	r3, r0
   1560e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId]--;
   15610:	4a0d      	ldr	r2, [pc, #52]	; (15648 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
   15612:	9b01      	ldr	r3, [sp, #4]
   15614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15618:	1e5a      	subs	r2, r3, #1
   1561a:	490b      	ldr	r1, [pc, #44]	; (15648 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
   1561c:	9b01      	ldr	r3, [sp, #4]
   1561e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   15622:	4a0a      	ldr	r2, [pc, #40]	; (1564c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x48>)
   15624:	9b01      	ldr	r3, [sp, #4]
   15626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1562a:	f003 0301 	and.w	r3, r3, #1
   1562e:	2b00      	cmp	r3, #0
   15630:	d106      	bne.n	15640 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x3c>
   15632:	4a05      	ldr	r2, [pc, #20]	; (15648 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
   15634:	9b01      	ldr	r3, [sp, #4]
   15636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1563a:	2b00      	cmp	r3, #0
   1563c:	d100      	bne.n	15640 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1563e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15640:	bf00      	nop
   15642:	b003      	add	sp, #12
   15644:	f85d fb04 	ldr.w	pc, [sp], #4
   15648:	1fff96f0 	.word	0x1fff96f0
   1564c:	1fff96ec 	.word	0x1fff96ec

00015650 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28(void)
{
   15650:	b500      	push	{lr}
   15652:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15654:	f7ec f8a8 	bl	17a8 <Sys_GetCoreID>
   15658:	4603      	mov	r3, r0
   1565a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId])
   1565c:	4a10      	ldr	r2, [pc, #64]	; (156a0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
   1565e:	9b01      	ldr	r3, [sp, #4]
   15660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15664:	2b00      	cmp	r3, #0
   15666:	d10d      	bne.n	15684 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15668:	f7eb f956 	bl	918 <Pwm_schm_read_msr>
   1566c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1566e:	9b00      	ldr	r3, [sp, #0]
   15670:	f003 0301 	and.w	r3, r3, #1
   15674:	2b00      	cmp	r3, #0
   15676:	d100      	bne.n	1567a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15678:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_28[u32CoreId] = msr;
   1567a:	490a      	ldr	r1, [pc, #40]	; (156a4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x54>)
   1567c:	9b01      	ldr	r3, [sp, #4]
   1567e:	9a00      	ldr	r2, [sp, #0]
   15680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId]++;
   15684:	4a06      	ldr	r2, [pc, #24]	; (156a0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
   15686:	9b01      	ldr	r3, [sp, #4]
   15688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1568c:	1c5a      	adds	r2, r3, #1
   1568e:	4904      	ldr	r1, [pc, #16]	; (156a0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
   15690:	9b01      	ldr	r3, [sp, #4]
   15692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15696:	bf00      	nop
   15698:	b003      	add	sp, #12
   1569a:	f85d fb04 	ldr.w	pc, [sp], #4
   1569e:	bf00      	nop
   156a0:	1fff96f8 	.word	0x1fff96f8
   156a4:	1fff96f4 	.word	0x1fff96f4

000156a8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28(void)
{
   156a8:	b500      	push	{lr}
   156aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   156ac:	f7ec f87c 	bl	17a8 <Sys_GetCoreID>
   156b0:	4603      	mov	r3, r0
   156b2:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId]--;
   156b4:	4a0d      	ldr	r2, [pc, #52]	; (156ec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
   156b6:	9b01      	ldr	r3, [sp, #4]
   156b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156bc:	1e5a      	subs	r2, r3, #1
   156be:	490b      	ldr	r1, [pc, #44]	; (156ec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
   156c0:	9b01      	ldr	r3, [sp, #4]
   156c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_28[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId]))         /*if interrupts were enabled*/
   156c6:	4a0a      	ldr	r2, [pc, #40]	; (156f0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x48>)
   156c8:	9b01      	ldr	r3, [sp, #4]
   156ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156ce:	f003 0301 	and.w	r3, r3, #1
   156d2:	2b00      	cmp	r3, #0
   156d4:	d106      	bne.n	156e4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x3c>
   156d6:	4a05      	ldr	r2, [pc, #20]	; (156ec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
   156d8:	9b01      	ldr	r3, [sp, #4]
   156da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156de:	2b00      	cmp	r3, #0
   156e0:	d100      	bne.n	156e4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   156e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   156e4:	bf00      	nop
   156e6:	b003      	add	sp, #12
   156e8:	f85d fb04 	ldr.w	pc, [sp], #4
   156ec:	1fff96f8 	.word	0x1fff96f8
   156f0:	1fff96f4 	.word	0x1fff96f4

000156f4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29(void)
{
   156f4:	b500      	push	{lr}
   156f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   156f8:	f7ec f856 	bl	17a8 <Sys_GetCoreID>
   156fc:	4603      	mov	r3, r0
   156fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId])
   15700:	4a10      	ldr	r2, [pc, #64]	; (15744 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
   15702:	9b01      	ldr	r3, [sp, #4]
   15704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15708:	2b00      	cmp	r3, #0
   1570a:	d10d      	bne.n	15728 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1570c:	f7eb f904 	bl	918 <Pwm_schm_read_msr>
   15710:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15712:	9b00      	ldr	r3, [sp, #0]
   15714:	f003 0301 	and.w	r3, r3, #1
   15718:	2b00      	cmp	r3, #0
   1571a:	d100      	bne.n	1571e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1571c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_29[u32CoreId] = msr;
   1571e:	490a      	ldr	r1, [pc, #40]	; (15748 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x54>)
   15720:	9b01      	ldr	r3, [sp, #4]
   15722:	9a00      	ldr	r2, [sp, #0]
   15724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId]++;
   15728:	4a06      	ldr	r2, [pc, #24]	; (15744 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
   1572a:	9b01      	ldr	r3, [sp, #4]
   1572c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15730:	1c5a      	adds	r2, r3, #1
   15732:	4904      	ldr	r1, [pc, #16]	; (15744 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
   15734:	9b01      	ldr	r3, [sp, #4]
   15736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1573a:	bf00      	nop
   1573c:	b003      	add	sp, #12
   1573e:	f85d fb04 	ldr.w	pc, [sp], #4
   15742:	bf00      	nop
   15744:	1fff9700 	.word	0x1fff9700
   15748:	1fff96fc 	.word	0x1fff96fc

0001574c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29(void)
{
   1574c:	b500      	push	{lr}
   1574e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15750:	f7ec f82a 	bl	17a8 <Sys_GetCoreID>
   15754:	4603      	mov	r3, r0
   15756:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId]--;
   15758:	4a0d      	ldr	r2, [pc, #52]	; (15790 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
   1575a:	9b01      	ldr	r3, [sp, #4]
   1575c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15760:	1e5a      	subs	r2, r3, #1
   15762:	490b      	ldr	r1, [pc, #44]	; (15790 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
   15764:	9b01      	ldr	r3, [sp, #4]
   15766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
   1576a:	4a0a      	ldr	r2, [pc, #40]	; (15794 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x48>)
   1576c:	9b01      	ldr	r3, [sp, #4]
   1576e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15772:	f003 0301 	and.w	r3, r3, #1
   15776:	2b00      	cmp	r3, #0
   15778:	d106      	bne.n	15788 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x3c>
   1577a:	4a05      	ldr	r2, [pc, #20]	; (15790 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
   1577c:	9b01      	ldr	r3, [sp, #4]
   1577e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15782:	2b00      	cmp	r3, #0
   15784:	d100      	bne.n	15788 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15786:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15788:	bf00      	nop
   1578a:	b003      	add	sp, #12
   1578c:	f85d fb04 	ldr.w	pc, [sp], #4
   15790:	1fff9700 	.word	0x1fff9700
   15794:	1fff96fc 	.word	0x1fff96fc

00015798 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30(void)
{
   15798:	b500      	push	{lr}
   1579a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1579c:	f7ec f804 	bl	17a8 <Sys_GetCoreID>
   157a0:	4603      	mov	r3, r0
   157a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId])
   157a4:	4a10      	ldr	r2, [pc, #64]	; (157e8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
   157a6:	9b01      	ldr	r3, [sp, #4]
   157a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157ac:	2b00      	cmp	r3, #0
   157ae:	d10d      	bne.n	157cc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   157b0:	f7eb f8b2 	bl	918 <Pwm_schm_read_msr>
   157b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   157b6:	9b00      	ldr	r3, [sp, #0]
   157b8:	f003 0301 	and.w	r3, r3, #1
   157bc:	2b00      	cmp	r3, #0
   157be:	d100      	bne.n	157c2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   157c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_30[u32CoreId] = msr;
   157c2:	490a      	ldr	r1, [pc, #40]	; (157ec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x54>)
   157c4:	9b01      	ldr	r3, [sp, #4]
   157c6:	9a00      	ldr	r2, [sp, #0]
   157c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId]++;
   157cc:	4a06      	ldr	r2, [pc, #24]	; (157e8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
   157ce:	9b01      	ldr	r3, [sp, #4]
   157d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157d4:	1c5a      	adds	r2, r3, #1
   157d6:	4904      	ldr	r1, [pc, #16]	; (157e8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
   157d8:	9b01      	ldr	r3, [sp, #4]
   157da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   157de:	bf00      	nop
   157e0:	b003      	add	sp, #12
   157e2:	f85d fb04 	ldr.w	pc, [sp], #4
   157e6:	bf00      	nop
   157e8:	1fff9708 	.word	0x1fff9708
   157ec:	1fff9704 	.word	0x1fff9704

000157f0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30(void)
{
   157f0:	b500      	push	{lr}
   157f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   157f4:	f7eb ffd8 	bl	17a8 <Sys_GetCoreID>
   157f8:	4603      	mov	r3, r0
   157fa:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId]--;
   157fc:	4a0d      	ldr	r2, [pc, #52]	; (15834 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
   157fe:	9b01      	ldr	r3, [sp, #4]
   15800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15804:	1e5a      	subs	r2, r3, #1
   15806:	490b      	ldr	r1, [pc, #44]	; (15834 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
   15808:	9b01      	ldr	r3, [sp, #4]
   1580a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
   1580e:	4a0a      	ldr	r2, [pc, #40]	; (15838 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x48>)
   15810:	9b01      	ldr	r3, [sp, #4]
   15812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15816:	f003 0301 	and.w	r3, r3, #1
   1581a:	2b00      	cmp	r3, #0
   1581c:	d106      	bne.n	1582c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x3c>
   1581e:	4a05      	ldr	r2, [pc, #20]	; (15834 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
   15820:	9b01      	ldr	r3, [sp, #4]
   15822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15826:	2b00      	cmp	r3, #0
   15828:	d100      	bne.n	1582c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1582a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1582c:	bf00      	nop
   1582e:	b003      	add	sp, #12
   15830:	f85d fb04 	ldr.w	pc, [sp], #4
   15834:	1fff9708 	.word	0x1fff9708
   15838:	1fff9704 	.word	0x1fff9704

0001583c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31(void)
{
   1583c:	b500      	push	{lr}
   1583e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15840:	f7eb ffb2 	bl	17a8 <Sys_GetCoreID>
   15844:	4603      	mov	r3, r0
   15846:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId])
   15848:	4a10      	ldr	r2, [pc, #64]	; (1588c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
   1584a:	9b01      	ldr	r3, [sp, #4]
   1584c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15850:	2b00      	cmp	r3, #0
   15852:	d10d      	bne.n	15870 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15854:	f7eb f860 	bl	918 <Pwm_schm_read_msr>
   15858:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1585a:	9b00      	ldr	r3, [sp, #0]
   1585c:	f003 0301 	and.w	r3, r3, #1
   15860:	2b00      	cmp	r3, #0
   15862:	d100      	bne.n	15866 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15864:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_31[u32CoreId] = msr;
   15866:	490a      	ldr	r1, [pc, #40]	; (15890 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x54>)
   15868:	9b01      	ldr	r3, [sp, #4]
   1586a:	9a00      	ldr	r2, [sp, #0]
   1586c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId]++;
   15870:	4a06      	ldr	r2, [pc, #24]	; (1588c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
   15872:	9b01      	ldr	r3, [sp, #4]
   15874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15878:	1c5a      	adds	r2, r3, #1
   1587a:	4904      	ldr	r1, [pc, #16]	; (1588c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
   1587c:	9b01      	ldr	r3, [sp, #4]
   1587e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15882:	bf00      	nop
   15884:	b003      	add	sp, #12
   15886:	f85d fb04 	ldr.w	pc, [sp], #4
   1588a:	bf00      	nop
   1588c:	1fff9710 	.word	0x1fff9710
   15890:	1fff970c 	.word	0x1fff970c

00015894 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31(void)
{
   15894:	b500      	push	{lr}
   15896:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15898:	f7eb ff86 	bl	17a8 <Sys_GetCoreID>
   1589c:	4603      	mov	r3, r0
   1589e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId]--;
   158a0:	4a0d      	ldr	r2, [pc, #52]	; (158d8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
   158a2:	9b01      	ldr	r3, [sp, #4]
   158a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158a8:	1e5a      	subs	r2, r3, #1
   158aa:	490b      	ldr	r1, [pc, #44]	; (158d8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
   158ac:	9b01      	ldr	r3, [sp, #4]
   158ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
   158b2:	4a0a      	ldr	r2, [pc, #40]	; (158dc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x48>)
   158b4:	9b01      	ldr	r3, [sp, #4]
   158b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158ba:	f003 0301 	and.w	r3, r3, #1
   158be:	2b00      	cmp	r3, #0
   158c0:	d106      	bne.n	158d0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x3c>
   158c2:	4a05      	ldr	r2, [pc, #20]	; (158d8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
   158c4:	9b01      	ldr	r3, [sp, #4]
   158c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158ca:	2b00      	cmp	r3, #0
   158cc:	d100      	bne.n	158d0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   158ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   158d0:	bf00      	nop
   158d2:	b003      	add	sp, #12
   158d4:	f85d fb04 	ldr.w	pc, [sp], #4
   158d8:	1fff9710 	.word	0x1fff9710
   158dc:	1fff970c 	.word	0x1fff970c

000158e0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32(void)
{
   158e0:	b500      	push	{lr}
   158e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   158e4:	f7eb ff60 	bl	17a8 <Sys_GetCoreID>
   158e8:	4603      	mov	r3, r0
   158ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId])
   158ec:	4a10      	ldr	r2, [pc, #64]	; (15930 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
   158ee:	9b01      	ldr	r3, [sp, #4]
   158f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158f4:	2b00      	cmp	r3, #0
   158f6:	d10d      	bne.n	15914 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   158f8:	f7eb f80e 	bl	918 <Pwm_schm_read_msr>
   158fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   158fe:	9b00      	ldr	r3, [sp, #0]
   15900:	f003 0301 	and.w	r3, r3, #1
   15904:	2b00      	cmp	r3, #0
   15906:	d100      	bne.n	1590a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15908:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_32[u32CoreId] = msr;
   1590a:	490a      	ldr	r1, [pc, #40]	; (15934 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x54>)
   1590c:	9b01      	ldr	r3, [sp, #4]
   1590e:	9a00      	ldr	r2, [sp, #0]
   15910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId]++;
   15914:	4a06      	ldr	r2, [pc, #24]	; (15930 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
   15916:	9b01      	ldr	r3, [sp, #4]
   15918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1591c:	1c5a      	adds	r2, r3, #1
   1591e:	4904      	ldr	r1, [pc, #16]	; (15930 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
   15920:	9b01      	ldr	r3, [sp, #4]
   15922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15926:	bf00      	nop
   15928:	b003      	add	sp, #12
   1592a:	f85d fb04 	ldr.w	pc, [sp], #4
   1592e:	bf00      	nop
   15930:	1fff9718 	.word	0x1fff9718
   15934:	1fff9714 	.word	0x1fff9714

00015938 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32(void)
{
   15938:	b500      	push	{lr}
   1593a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1593c:	f7eb ff34 	bl	17a8 <Sys_GetCoreID>
   15940:	4603      	mov	r3, r0
   15942:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId]--;
   15944:	4a0d      	ldr	r2, [pc, #52]	; (1597c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
   15946:	9b01      	ldr	r3, [sp, #4]
   15948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1594c:	1e5a      	subs	r2, r3, #1
   1594e:	490b      	ldr	r1, [pc, #44]	; (1597c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
   15950:	9b01      	ldr	r3, [sp, #4]
   15952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_32[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId]))         /*if interrupts were enabled*/
   15956:	4a0a      	ldr	r2, [pc, #40]	; (15980 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x48>)
   15958:	9b01      	ldr	r3, [sp, #4]
   1595a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1595e:	f003 0301 	and.w	r3, r3, #1
   15962:	2b00      	cmp	r3, #0
   15964:	d106      	bne.n	15974 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x3c>
   15966:	4a05      	ldr	r2, [pc, #20]	; (1597c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
   15968:	9b01      	ldr	r3, [sp, #4]
   1596a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1596e:	2b00      	cmp	r3, #0
   15970:	d100      	bne.n	15974 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15972:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15974:	bf00      	nop
   15976:	b003      	add	sp, #12
   15978:	f85d fb04 	ldr.w	pc, [sp], #4
   1597c:	1fff9718 	.word	0x1fff9718
   15980:	1fff9714 	.word	0x1fff9714

00015984 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33(void)
{
   15984:	b500      	push	{lr}
   15986:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15988:	f7eb ff0e 	bl	17a8 <Sys_GetCoreID>
   1598c:	4603      	mov	r3, r0
   1598e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId])
   15990:	4a10      	ldr	r2, [pc, #64]	; (159d4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
   15992:	9b01      	ldr	r3, [sp, #4]
   15994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15998:	2b00      	cmp	r3, #0
   1599a:	d10d      	bne.n	159b8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1599c:	f7ea ffbc 	bl	918 <Pwm_schm_read_msr>
   159a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   159a2:	9b00      	ldr	r3, [sp, #0]
   159a4:	f003 0301 	and.w	r3, r3, #1
   159a8:	2b00      	cmp	r3, #0
   159aa:	d100      	bne.n	159ae <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   159ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_33[u32CoreId] = msr;
   159ae:	490a      	ldr	r1, [pc, #40]	; (159d8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x54>)
   159b0:	9b01      	ldr	r3, [sp, #4]
   159b2:	9a00      	ldr	r2, [sp, #0]
   159b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId]++;
   159b8:	4a06      	ldr	r2, [pc, #24]	; (159d4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
   159ba:	9b01      	ldr	r3, [sp, #4]
   159bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159c0:	1c5a      	adds	r2, r3, #1
   159c2:	4904      	ldr	r1, [pc, #16]	; (159d4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
   159c4:	9b01      	ldr	r3, [sp, #4]
   159c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   159ca:	bf00      	nop
   159cc:	b003      	add	sp, #12
   159ce:	f85d fb04 	ldr.w	pc, [sp], #4
   159d2:	bf00      	nop
   159d4:	1fff9720 	.word	0x1fff9720
   159d8:	1fff971c 	.word	0x1fff971c

000159dc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33(void)
{
   159dc:	b500      	push	{lr}
   159de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   159e0:	f7eb fee2 	bl	17a8 <Sys_GetCoreID>
   159e4:	4603      	mov	r3, r0
   159e6:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId]--;
   159e8:	4a0d      	ldr	r2, [pc, #52]	; (15a20 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
   159ea:	9b01      	ldr	r3, [sp, #4]
   159ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159f0:	1e5a      	subs	r2, r3, #1
   159f2:	490b      	ldr	r1, [pc, #44]	; (15a20 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
   159f4:	9b01      	ldr	r3, [sp, #4]
   159f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_33[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId]))         /*if interrupts were enabled*/
   159fa:	4a0a      	ldr	r2, [pc, #40]	; (15a24 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x48>)
   159fc:	9b01      	ldr	r3, [sp, #4]
   159fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a02:	f003 0301 	and.w	r3, r3, #1
   15a06:	2b00      	cmp	r3, #0
   15a08:	d106      	bne.n	15a18 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x3c>
   15a0a:	4a05      	ldr	r2, [pc, #20]	; (15a20 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
   15a0c:	9b01      	ldr	r3, [sp, #4]
   15a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a12:	2b00      	cmp	r3, #0
   15a14:	d100      	bne.n	15a18 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15a16:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15a18:	bf00      	nop
   15a1a:	b003      	add	sp, #12
   15a1c:	f85d fb04 	ldr.w	pc, [sp], #4
   15a20:	1fff9720 	.word	0x1fff9720
   15a24:	1fff971c 	.word	0x1fff971c

00015a28 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34(void)
{
   15a28:	b500      	push	{lr}
   15a2a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15a2c:	f7eb febc 	bl	17a8 <Sys_GetCoreID>
   15a30:	4603      	mov	r3, r0
   15a32:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId])
   15a34:	4a10      	ldr	r2, [pc, #64]	; (15a78 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
   15a36:	9b01      	ldr	r3, [sp, #4]
   15a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a3c:	2b00      	cmp	r3, #0
   15a3e:	d10d      	bne.n	15a5c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15a40:	f7ea ff6a 	bl	918 <Pwm_schm_read_msr>
   15a44:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15a46:	9b00      	ldr	r3, [sp, #0]
   15a48:	f003 0301 	and.w	r3, r3, #1
   15a4c:	2b00      	cmp	r3, #0
   15a4e:	d100      	bne.n	15a52 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15a50:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_34[u32CoreId] = msr;
   15a52:	490a      	ldr	r1, [pc, #40]	; (15a7c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x54>)
   15a54:	9b01      	ldr	r3, [sp, #4]
   15a56:	9a00      	ldr	r2, [sp, #0]
   15a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId]++;
   15a5c:	4a06      	ldr	r2, [pc, #24]	; (15a78 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
   15a5e:	9b01      	ldr	r3, [sp, #4]
   15a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a64:	1c5a      	adds	r2, r3, #1
   15a66:	4904      	ldr	r1, [pc, #16]	; (15a78 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
   15a68:	9b01      	ldr	r3, [sp, #4]
   15a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15a6e:	bf00      	nop
   15a70:	b003      	add	sp, #12
   15a72:	f85d fb04 	ldr.w	pc, [sp], #4
   15a76:	bf00      	nop
   15a78:	1fff9728 	.word	0x1fff9728
   15a7c:	1fff9724 	.word	0x1fff9724

00015a80 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34(void)
{
   15a80:	b500      	push	{lr}
   15a82:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15a84:	f7eb fe90 	bl	17a8 <Sys_GetCoreID>
   15a88:	4603      	mov	r3, r0
   15a8a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId]--;
   15a8c:	4a0d      	ldr	r2, [pc, #52]	; (15ac4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
   15a8e:	9b01      	ldr	r3, [sp, #4]
   15a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a94:	1e5a      	subs	r2, r3, #1
   15a96:	490b      	ldr	r1, [pc, #44]	; (15ac4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
   15a98:	9b01      	ldr	r3, [sp, #4]
   15a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_34[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId]))         /*if interrupts were enabled*/
   15a9e:	4a0a      	ldr	r2, [pc, #40]	; (15ac8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x48>)
   15aa0:	9b01      	ldr	r3, [sp, #4]
   15aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15aa6:	f003 0301 	and.w	r3, r3, #1
   15aaa:	2b00      	cmp	r3, #0
   15aac:	d106      	bne.n	15abc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x3c>
   15aae:	4a05      	ldr	r2, [pc, #20]	; (15ac4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
   15ab0:	9b01      	ldr	r3, [sp, #4]
   15ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ab6:	2b00      	cmp	r3, #0
   15ab8:	d100      	bne.n	15abc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15aba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15abc:	bf00      	nop
   15abe:	b003      	add	sp, #12
   15ac0:	f85d fb04 	ldr.w	pc, [sp], #4
   15ac4:	1fff9728 	.word	0x1fff9728
   15ac8:	1fff9724 	.word	0x1fff9724

00015acc <Det_Init>:
*
*/
void Det_Init(void)
{
    /* Do nothing */
}
   15acc:	bf00      	nop
   15ace:	4770      	bx	lr

00015ad0 <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
   15ad0:	b510      	push	{r4, lr}
   15ad2:	b084      	sub	sp, #16
   15ad4:	4604      	mov	r4, r0
   15ad6:	4608      	mov	r0, r1
   15ad8:	4611      	mov	r1, r2
   15ada:	461a      	mov	r2, r3
   15adc:	4623      	mov	r3, r4
   15ade:	f8ad 3006 	strh.w	r3, [sp, #6]
   15ae2:	4603      	mov	r3, r0
   15ae4:	f88d 3005 	strb.w	r3, [sp, #5]
   15ae8:	460b      	mov	r3, r1
   15aea:	f88d 3004 	strb.w	r3, [sp, #4]
   15aee:	4613      	mov	r3, r2
   15af0:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15af4:	f7eb fe58 	bl	17a8 <Sys_GetCoreID>
   15af8:	4603      	mov	r3, r0
   15afa:	9303      	str	r3, [sp, #12]

    Det_ModuleId[u32CoreId] = ModuleId;
   15afc:	490d      	ldr	r1, [pc, #52]	; (15b34 <Det_ReportError+0x64>)
   15afe:	9b03      	ldr	r3, [sp, #12]
   15b00:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   15b04:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
   15b08:	4a0b      	ldr	r2, [pc, #44]	; (15b38 <Det_ReportError+0x68>)
   15b0a:	9b03      	ldr	r3, [sp, #12]
   15b0c:	4413      	add	r3, r2
   15b0e:	f89d 2005 	ldrb.w	r2, [sp, #5]
   15b12:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
   15b14:	4a09      	ldr	r2, [pc, #36]	; (15b3c <Det_ReportError+0x6c>)
   15b16:	9b03      	ldr	r3, [sp, #12]
   15b18:	4413      	add	r3, r2
   15b1a:	f89d 2004 	ldrb.w	r2, [sp, #4]
   15b1e:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
   15b20:	4a07      	ldr	r2, [pc, #28]	; (15b40 <Det_ReportError+0x70>)
   15b22:	9b03      	ldr	r3, [sp, #12]
   15b24:	4413      	add	r3, r2
   15b26:	f89d 2003 	ldrb.w	r2, [sp, #3]
   15b2a:	701a      	strb	r2, [r3, #0]

    return E_OK;
   15b2c:	2300      	movs	r3, #0
}
   15b2e:	4618      	mov	r0, r3
   15b30:	b004      	add	sp, #16
   15b32:	bd10      	pop	{r4, pc}
   15b34:	1fff9754 	.word	0x1fff9754
   15b38:	1fff972c 	.word	0x1fff972c
   15b3c:	1fff9730 	.word	0x1fff9730
   15b40:	1fff9734 	.word	0x1fff9734

00015b44 <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
   15b44:	b510      	push	{r4, lr}
   15b46:	b084      	sub	sp, #16
   15b48:	4604      	mov	r4, r0
   15b4a:	4608      	mov	r0, r1
   15b4c:	4611      	mov	r1, r2
   15b4e:	461a      	mov	r2, r3
   15b50:	4623      	mov	r3, r4
   15b52:	f8ad 3006 	strh.w	r3, [sp, #6]
   15b56:	4603      	mov	r3, r0
   15b58:	f88d 3005 	strb.w	r3, [sp, #5]
   15b5c:	460b      	mov	r3, r1
   15b5e:	f88d 3004 	strb.w	r3, [sp, #4]
   15b62:	4613      	mov	r3, r2
   15b64:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15b68:	f7eb fe1e 	bl	17a8 <Sys_GetCoreID>
   15b6c:	4603      	mov	r3, r0
   15b6e:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
   15b70:	490d      	ldr	r1, [pc, #52]	; (15ba8 <Det_ReportRuntimeError+0x64>)
   15b72:	9b03      	ldr	r3, [sp, #12]
   15b74:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   15b78:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
   15b7c:	4a0b      	ldr	r2, [pc, #44]	; (15bac <Det_ReportRuntimeError+0x68>)
   15b7e:	9b03      	ldr	r3, [sp, #12]
   15b80:	4413      	add	r3, r2
   15b82:	f89d 2005 	ldrb.w	r2, [sp, #5]
   15b86:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
   15b88:	4a09      	ldr	r2, [pc, #36]	; (15bb0 <Det_ReportRuntimeError+0x6c>)
   15b8a:	9b03      	ldr	r3, [sp, #12]
   15b8c:	4413      	add	r3, r2
   15b8e:	f89d 2004 	ldrb.w	r2, [sp, #4]
   15b92:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
   15b94:	4a07      	ldr	r2, [pc, #28]	; (15bb4 <Det_ReportRuntimeError+0x70>)
   15b96:	9b03      	ldr	r3, [sp, #12]
   15b98:	4413      	add	r3, r2
   15b9a:	f89d 2003 	ldrb.w	r2, [sp, #3]
   15b9e:	701a      	strb	r2, [r3, #0]

    return E_OK;
   15ba0:	2300      	movs	r3, #0
}
   15ba2:	4618      	mov	r0, r3
   15ba4:	b004      	add	sp, #16
   15ba6:	bd10      	pop	{r4, pc}
   15ba8:	1fff9758 	.word	0x1fff9758
   15bac:	1fff9738 	.word	0x1fff9738
   15bb0:	1fff973c 	.word	0x1fff973c
   15bb4:	1fff9740 	.word	0x1fff9740

00015bb8 <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
   15bb8:	b510      	push	{r4, lr}
   15bba:	b084      	sub	sp, #16
   15bbc:	4604      	mov	r4, r0
   15bbe:	4608      	mov	r0, r1
   15bc0:	4611      	mov	r1, r2
   15bc2:	461a      	mov	r2, r3
   15bc4:	4623      	mov	r3, r4
   15bc6:	f8ad 3006 	strh.w	r3, [sp, #6]
   15bca:	4603      	mov	r3, r0
   15bcc:	f88d 3005 	strb.w	r3, [sp, #5]
   15bd0:	460b      	mov	r3, r1
   15bd2:	f88d 3004 	strb.w	r3, [sp, #4]
   15bd6:	4613      	mov	r3, r2
   15bd8:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15bdc:	f7eb fde4 	bl	17a8 <Sys_GetCoreID>
   15be0:	4603      	mov	r3, r0
   15be2:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
   15be4:	490d      	ldr	r1, [pc, #52]	; (15c1c <Det_ReportTransientFault+0x64>)
   15be6:	9b03      	ldr	r3, [sp, #12]
   15be8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   15bec:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
   15bf0:	4a0b      	ldr	r2, [pc, #44]	; (15c20 <Det_ReportTransientFault+0x68>)
   15bf2:	9b03      	ldr	r3, [sp, #12]
   15bf4:	4413      	add	r3, r2
   15bf6:	f89d 2005 	ldrb.w	r2, [sp, #5]
   15bfa:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
   15bfc:	4a09      	ldr	r2, [pc, #36]	; (15c24 <Det_ReportTransientFault+0x6c>)
   15bfe:	9b03      	ldr	r3, [sp, #12]
   15c00:	4413      	add	r3, r2
   15c02:	f89d 2004 	ldrb.w	r2, [sp, #4]
   15c06:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
   15c08:	4a07      	ldr	r2, [pc, #28]	; (15c28 <Det_ReportTransientFault+0x70>)
   15c0a:	9b03      	ldr	r3, [sp, #12]
   15c0c:	4413      	add	r3, r2
   15c0e:	f89d 2003 	ldrb.w	r2, [sp, #3]
   15c12:	701a      	strb	r2, [r3, #0]

    return E_OK;
   15c14:	2300      	movs	r3, #0
}
   15c16:	4618      	mov	r0, r3
   15c18:	b004      	add	sp, #16
   15c1a:	bd10      	pop	{r4, pc}
   15c1c:	1fff9750 	.word	0x1fff9750
   15c20:	1fff9744 	.word	0x1fff9744
   15c24:	1fff9748 	.word	0x1fff9748
   15c28:	1fff974c 	.word	0x1fff974c

00015c2c <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
   15c2c:	bf00      	nop
   15c2e:	4770      	bx	lr

00015c30 <Fls_ACEraseRomEnd>:
   15c30:	20746f50 	.word	0x20746f50
   15c34:	65722031 	.word	0x65722031
   15c38:	74736973 	.word	0x74736973
   15c3c:	65636e61 	.word	0x65636e61
   15c40:	6c617620 	.word	0x6c617620
   15c44:	69206575 	.word	0x69206575
   15c48:	686f206e 	.word	0x686f206e
   15c4c:	203a736d 	.word	0x203a736d
   15c50:	000a6425 	.word	0x000a6425
   15c54:	20746f50 	.word	0x20746f50
   15c58:	65722032 	.word	0x65722032
   15c5c:	74736973 	.word	0x74736973
   15c60:	65636e61 	.word	0x65636e61
   15c64:	6c617620 	.word	0x6c617620
   15c68:	69206575 	.word	0x69206575
   15c6c:	686f206e 	.word	0x686f206e
   15c70:	203a736d 	.word	0x203a736d
   15c74:	000a6425 	.word	0x000a6425
   15c78:	20746f50 	.word	0x20746f50
   15c7c:	65722031 	.word	0x65722031
   15c80:	74736973 	.word	0x74736973
   15c84:	65636e61 	.word	0x65636e61
   15c88:	6c617620 	.word	0x6c617620
   15c8c:	69206575 	.word	0x69206575
   15c90:	686f206e 	.word	0x686f206e
   15c94:	203a736d 	.word	0x203a736d
   15c98:	202c6425 	.word	0x202c6425
   15c9c:	20746f50 	.word	0x20746f50
   15ca0:	65722032 	.word	0x65722032
   15ca4:	74736973 	.word	0x74736973
   15ca8:	65636e61 	.word	0x65636e61
   15cac:	6c617620 	.word	0x6c617620
   15cb0:	69206575 	.word	0x69206575
   15cb4:	686f206e 	.word	0x686f206e
   15cb8:	203a736d 	.word	0x203a736d
   15cbc:	000a6425 	.word	0x000a6425
   15cc0:	6d726554 	.word	0x6d726554
   15cc4:	6c616e69 	.word	0x6c616e69
   15cc8:	00000000 	.word	0x00000000
   15ccc:	4c554e28 	.word	0x4c554e28
   15cd0:	0000294c 	.word	0x0000294c

00015cd4 <Clock_Ip_au8DividerCallbackIndex>:
   15cd4:	0e0d0c00 06030201 0a070409 000b0805     ................

00015ce4 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

00015cf4 <Clock_Ip_au8XoscCallbackIndex>:
   15cf4:	00000100 00000000 00000000 00000000     ................

00015d04 <Clock_Ip_au8IrcoscCallbackIndex>:
   15d04:	03020100 00000004 00000000 00000000     ................

00015d14 <Clock_Ip_au8GateCallbackIndex>:
   15d14:	06010200 01040301 00000500 00000000     ................

00015d24 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

00015d34 <Clock_Ip_au8PllCallbackIndex>:
   15d34:	00000100 00000000 00000000 00000000     ................

00015d44 <Clock_Ip_au8SelectorCallbackIndex>:
   15d44:	0a090800 03020109 07060504 00000000     ................

00015d54 <Clock_Ip_au8PcfsCallbackIndex>:
	...

00015d64 <Clock_Ip_au8CmuCallbackIndex>:
	...

00015d74 <Clock_Ip_au8ClockFeatures>:
	...
   15d84:	01000000 00000000 00000000 00000002     ................
   15d94:	00000000 00000300 00000000 00040000     ................
   15da4:	00000000 05000000 00000000 00000000     ................
   15db4:	00000006 00000000 00000100 00000000     ................
   15dc4:	00010000 00000000 04000000 00000000     ................
   15dd4:	00000000 00000005 00000001 00000401     ................
   15de4:	00000200 00050100 00030000 04020000     ................
   15df4:	04000000 02000000 00000005 00000005     ................
   15e04:	00000403 00000600 00050300 00070000     ................
   15e14:	05000000 00000000 00000000 00000006     ................
	...
   15e54:	00050000 00000000 06000000 00000100     ................
   15e64:	00000000 00030007 00000000 00000000     ................
   15e74:	00000000 00060000 00000000 07000000     ................
   15e84:	00000100 00000000 00030008 00000000     ................
	...
   15e9c:	00090000 00000000 0a000000 00000100     ................
   15eac:	00000000 0003000b 00000000 00000000     ................
   15ebc:	00000000 000c0000 00000000 0d000000     ................
   15ecc:	00000100 00000000 0003000e 00000000     ................
   15edc:	00000800 00000000 00090000 00000000     ................
   15eec:	0a000000 00000000 00000000 0000000b     ................
   15efc:	00000000 00000b01 00000000 000b0200     ................
   15f0c:	00000000 0b030000 00000000 00000000     ................
	...
   15f24:	00000400 003b003b 00040000 27002700     ....;.;......'.'
   15f34:	01000000 00000000 00000000 00000007     ................
   15f44:	00007300 00000700 00320000 00090000     .s........2.....
   15f54:	02000000 07000000 00000000 00000021     ............!...
   15f64:	00000009 00000400 00000900 00030000     ................
   15f74:	00070000 61000000 07000000 00000000     .......a........
   15f84:	00000024 00000007 00002500 00000700     $........%......
   15f94:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
   15fa4:	00000000 00000020 38000004 00003800     .... ......8.8..
   15fb4:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
   15fc4:	04000000 00260000 00000026 66000004     ......&.&......f
   15fd4:	00006600 00000400 00370037 00040000     .f......7.7.....
   15fe4:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
   15ff4:	2e000004 00002e00 00000200 00404040     ............@@@.
   16004:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
   16014:	0000006b 6c000004 00006c00 00000900     k......l.l......
   16024:	00010000 00090000 00000000 07000000     ................
   16034:	00000000 00000036 00000007 00003100     ....6........1..
   16044:	00000700 00490000 00070000 4a000000     ......I........J
   16054:	07000000 00000000 0000004b 00000007     ........K.......
   16064:	00004c00 00000700 004d0000 00070000     .L........M.....
   16074:	3d000000 03000000 00000000 00000000     ...=............

00016084 <Clock_Ip_au16SelectorEntryHardwareValue>:
   16084:	01010a03 01010001 04040002 02000603     ................
   16094:	00010810 02020100 00000000 00000007     ................
   160a4:	00000009 00000000 00000c0e 00000000     ................
	...

000160dc <Clock_Ip_au8SelectorEntryScsHardwareValue>:
   160dc:	00020000 00000300 00000601 00000000     ................
	...

0001610c <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
   1610c:	00000700 00000000 02020000 01010303     ................
   1611c:	03020606 00000000 00000000 00000000     ................
	...

0001613c <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
   1613c:	00000001 00000000 02020000 01010303     ................
   1614c:	03020606 00000000 00000000 00000000     ................
	...

0001616c <Clock_Ip_au8DividerValueHardwareValue>:
   1616c:	00020100 00000003 00000004 00000000     ................
   1617c:	00000005 00000000 00000000 00000000     ................
   1618c:	00000006 00000000 00000000 00000000     ................
	...
   161ac:	00000007                                ....

000161b0 <Clock_Ip_apxScgPeriphAsyncDivs>:
   161b0:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

000161c0 <Clock_Ip_aeSourceTypeClockName>:
   161c0:	00000000 00000001 00000001 00000001     ................
   161d0:	00000001 00000001 00000001 00000001     ................
   161e0:	00000002 00000003 00000001 00000001     ................
   161f0:	00000001 00000001 00000002 00000002     ................
   16200:	00000003 00000003 00000001 00000001     ................
   16210:	00000004 00000004 00000004 00000004     ................
	...

0001627c <Clock_Ip_aeHwPllName>:
   1627c:	00000009                                ....

00016280 <Clock_Ip_aeHwDfsName>:
   16280:	00000057                                W...

00016284 <Clock_Ip_axDividerCallbacks>:
   16284:	00003851 0000385b 00003875 0000388f     Q8..[8..u8...8..
   16294:	000038a9 000038c3 000038dd 000038f7     .8...8...8...8..
   162a4:	00003911 0000392b 00003945 0000395f     .9..+9..E9.._9..
   162b4:	00003979 00003993 000039ad              y9...9...9..

000162c0 <Clock_Ip_axDividerTriggerCallbacks>:
   162c0:	00003d21 00003d21                       !=..!=..

000162c8 <Clock_Ip_axExtOscCallbacks>:
   162c8:	00003d2d 00003d2d 00003d2d 00003d37     -=..-=..-=..7=..
   162d8:	00003d2d 00003d41 00003d5b 00003d75     -=..A=..[=..u=..
   162e8:	00003df9 00003e0d                       .=...>..

000162f0 <Clock_Ip_axFracDivCallbacks>:
   162f0:	00003fcd 00003fcd 00003fd7              .?...?...?..

000162fc <Clock_Ip_axGateCallbacks>:
   162fc:	00003ff1 00003ffb 000040fb 00004115     .?...?...@...A..
   1630c:	000040ab 000040c5 0000405b 00004075     .@...@..[@..u@..
   1631c:	0000400b 00004025 0000414b 00004165     .@..%@..KA..eA..
   1632c:	0000419b 000041b5                       .A...A..

00016334 <Clock_Ip_axIntOscCallbacks>:
   16334:	00004361 00004361 0000436b 00004375     aC..aC..kC..uC..
   16344:	0000438f 000043a9 000043bd 000043d7     .C...C...C...C..
   16354:	000043f1 00004405 0000441f 00004439     .C...D...D..9D..
   16364:	000044e1 000044fb 00004515              .D...D...E..

00016370 <Clock_Ip_axCmuCallbacks>:
   16370:	00004ab1 00004abb 00004ac7 00004ab1     .J...J...J...J..

00016380 <Clock_Ip_axPllCallbacks>:
   16380:	00004ad1 00004ad1 00004adb 00004ad1     .J...J...J...J..
   16390:	00004ae7 00004af1 00004b0b 00004b25     .J...J...K..%K..
   163a0:	00004bc9 00004bb5                       .K...K..

000163a8 <Clock_Ip_axPcfsCallbacks>:
   163a8:	00004d25                                %M..

000163ac <Clock_Ip_axSelectorCallbacks>:
   163ac:	00004d31 00004d31 00004d3b 00004d55     1M..1M..;M..UM..
   163bc:	00004d31 00004d6f 00004d89 00004da3     1M..oM...M...M..
   163cc:	00004dbd 00004dd7 00004df1 00004e0b     .M...M...M...N..
   163dc:	00004e25 00004e3f 00004e59 00004e73     %N..?N..YN..sN..
   163ec:	00004e8d 00004ea7 00004ec1 00004edb     .N...N...N...N..
   163fc:	00004ef5 00004f0f                       .N...O..

00016404 <ClockSource>:
   16404:	00000000 00000008 00000002 00000005     ................
	...
   1641c:	00000009                                ....

00016420 <ResetReasonArray>:
   16420:	00000000 00000001 00000002 00000003     ................
   16430:	00000004 00000005 00000006 00000007     ................
   16440:	00000008 00000009 0000000a 0000000b     ................
   16450:	0000000c 0000000d 0000000e              ............

0001645c <Port_au32PortCiPortBaseAddr>:
   1645c:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
   1646c:	4004d000                                ...@

00016470 <Port_au32PortCiGpioBaseAddr>:
   16470:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
   16480:	400ff100                                ...@

00016484 <Adc_Ip_apxBase>:
   16484:	4003b000 40027000                       ...@.p.@

0001648c <Pdb_Adc_Ip_apxBase>:
   1648c:	40036000 40031000                       .`.@...@

00016494 <Ftm_Pwm_Ip_aFtmBase>:
   16494:	40038000 40039000 4003a000 40026000     ...@...@...@.`.@

000164a4 <Queue_Config>:
   164a4:	00000002 00000001 1fff8b70              ........p...

000164b0 <Task_Config>:
   164b0:	00000032 00000001 00000d69 00000064     2.......i...d...
   164c0:	00000001 00000d75                       ....u...

000164c8 <Timer_Config>:
   164c8:	00000064 00000000 00000f81              d...........

000164d4 <Scheduler_Config>:
   164d4:	0000000a 00000002 000164b0 00000001     .........d......
   164e4:	000164c8 00000001 000164a4              .d.......d..

000164f0 <ButtonsCfg>:
   164f0:	0000008c 0000012c 00000071 0000012c     ....,...q...,...
   16500:	0000000c 0000012c                       ....,...

00016508 <LedsCfg>:
   16508:	00010048 00010049 0001004a              H...I...J...

00016514 <AdcIpChansConfig_0>:
   16514:	00000000 00000005 00000000 00000001     ................
   16524:	00000008 00000000                       ........

0001652c <AdcIpChansConfig_1>:
   1652c:	00000000 0000000f 00000000 00000001     ................
   1653c:	00000008 00000000                       ........

00016544 <AdcIpConfig_0>:
   16544:	00000000 00000003 00000000 0000000c     ................
   16554:	00000000 00000001 00000001 00000000     ................
	...
   1656c:	00ff0000 00000000 00000000 00016514     .............e..
   1657c:	0000b261                                a...

00016580 <AdcIpConfig_1>:
   16580:	00000000 00000003 00000000 0000000c     ................
   16590:	00000000 00000001 00000001 00000000     ................
	...
   165a8:	00ff0000 00000000 00000000 0001652c     ............,e..
   165b8:	0000b283                                ....

000165bc <AdcIpwCfg>:
   165bc:	00016544 00016580 00016b8c 00016bac     De...e...k...k..
   165cc:	01010100 00010001 00020002 0101ffff     ................
   165dc:	00000100                                ....

000165e0 <AdcIpwGroupConfig_0>:
   165e0:	00000001 00000000 000000c8 00010000     ................
   165f0:	00000000                                ....

000165f4 <AdcIpwGroupConfig_1>:
   165f4:	00000001 00000000 000000c8 00010000     ................
   16604:	00000000                                ....

00016608 <Adc_Group0_Assignment_0>:
   16608:	00010000                                ....

0001660c <Adc_Group1_Assignment_1>:
   1660c:	00010000                                ....

00016610 <Adc_GroupsCfg>:
	...
   1662c:	00000001 00016608 00080002 00000005     .....f..........
   1663c:	00000000 000165e0 00010001 00000000     .....e..........
	...
   16660:	00000001 0001660c 000f0002 00000008     .....f..........
   16670:	00000000 000165f4                       .....e..

00016678 <Adc_au16GroupIdToIndexMap>:
   16678:	00010000                                ....

0001667c <Adc_Partition_Assignment>:
   1667c:	00000000                                ....

00016680 <Adc_Config>:
   16680:	000165bc 00016610 00000002 00016678     .e...f......xf..
   16690:	00000000 0001667c 00000001              ....|f......

0001669c <Mcu_aClockConfigPB>:
	...
   166a4:	14000002 0400000e 01000020 00000002     ........ .......
   166b4:	01000001 00000001 00000005 00000001     ................
   166c4:	00000000 00000057 00000000 00000000     ....W...........
	...
   166dc:	00000057 00000000 00000057 00000000     W.......W.......
	...
   16704:	00000019 00000005 0000001a 00000002     ................
   16714:	0000001b 00000005 0000002a 00000002     ........*.......
   16724:	0000003f 0000000a 00000040 0000000a     ?.......@.......
   16734:	00000041 00000000 00000042 00000000     A.......B.......
   16744:	00000031 0000000b 00000045 00000000     1.......E.......
   16754:	00000046 00000000 00000047 00000000     F.......G.......
   16764:	00000044 00000000 00000030 0000000b     D.......0.......
   16774:	0000003d 00000000 00000043 00000000     =.......C.......
   16784:	00000049 00000000 0000004a 00000000     I.......J.......
   16794:	0000004b 00000000 00000048 00000000     K.......H.......
   167a4:	00000057 00000057 00000057 00000057     W...W...W...W...
   167b4:	00000057 00000057 00000057 00000057     W...W...W...W...
   167c4:	00000057 00000057 00000057 00000057     W...W...W...W...
   167d4:	00000057 00000057 00000057 00000057     W...W...W...W...
   167e4:	0000000a 00000001 00000000 0000000b     ................
   167f4:	00000001 00000000 0000000c 00000001     ................
   16804:	00000000 0000000d 00000002 00000000     ................
   16814:	0000001d 00000001 00000000 0000001e     ................
   16824:	00000002 00000000 0000001f 00000001     ................
   16834:	00000000 00000021 00000001 00000000     ....!...........
   16844:	00000022 00000002 00000000 00000023     "...........#...
   16854:	00000001 00000000 00000025 00000002     ........%.......
   16864:	00000000 00000026 00000004 00000000     ....&...........
   16874:	00000027 00000002 00000000 00000048     '...........H...
   16884:	00000001 00000001 00000057 00000000     ........W.......
   16894:	00000000 00000057 00000000 00000000     ....W...........
   168a4:	00000057 00000000 00000000 00000057     W...........W...
	...
   168bc:	00000057 00000000 00000000 00000057     W...........W...
	...
   168d4:	00000057 00000000 00000057 00000057     W.......W...W...
	...
   168f0:	00000014 00007d00 00000015 00007d00     .....}.......}..
   16900:	00000016 00007d00 00000017 00008000     .....}..........
   16910:	00000030 00000001 00000031 00000001     0.......1.......
   16920:	00000033 00000000 00000034 00000000     3.......4.......
   16930:	00000036 00000000 00000039 00000000     6.......9.......
   16940:	0000003a 00000000 0000003b 00000000     :.......;.......
   16950:	0000003c 00000000 0000003d 00000000     <.......=.......
   16960:	0000003e 00000000 0000003f 00000000     >.......?.......
   16970:	00000040 00000001 00000041 00000000     @.......A.......
   16980:	00000042 00000000 00000043 00000000     B.......C.......
   16990:	00000044 00000000 00000045 00000000     D.......E.......
   169a0:	00000046 00000000 00000047 00000000     F.......G.......
   169b0:	00000048 00000000 00000049 00000000     H.......I.......
   169c0:	0000004a 00000000 0000004b 00000000     J.......K.......
   169d0:	0000004e 00000001 0000004f 00000001     N.......O.......
   169e0:	00000050 00000001 00000051 00000001     P.......Q.......
   169f0:	00000052 00000001 00000053 00000001     R.......S.......
   16a00:	00000054 00000001 00000055 00000000     T.......U.......
   16a10:	00000057 00000000 00000057 00000000     W.......W.......
   16a20:	00000057 00000000 00000057 00000000     W.......W.......
   16a30:	00000057 00000000 00000057 00000000     W.......W.......
   16a40:	00000057 00000000 00000057 00000000     W.......W.......
   16a50:	00000057 00000000 00000057 00000000     W.......W.......
   16a60:	00000000 00000057 00000000 00000057     ....W.......W...
	...

00016a94 <Ftm_Pwm_Ip_SyncCfg1>:
	...
   16ab0:	00000003 00000003                       ........

00016ab8 <Ftm_Pwm_Ip_InstCfg1>:
   16ab8:	00000003 00000000 00000000 00000000     ................
	...
   16aec:	000014d5 00000001 00000000 00000000     ................
   16afc:	00000000 00016a94                       .....j..

00016b04 <Ftm_Pwm_Ip_I1_Ch7>:
   16b04:	00000007 0000000a 00000000 00000000     ................
   16b14:	00000000 00000001 00000000 00000000     ................
	...

00016b2c <Ftm_Pwm_Ip_I1_ChArray>:
   16b2c:	00016b04                                .k..

00016b30 <Ftm_Pwm_Ip_UserCfg1>:
   16b30:	00016ab8 00016b2c 00000001 00000000     .j..,k..........
   16b40:	00000000                                ....

00016b44 <aIrqConfiguration>:
   16b44:	00000027 00000001 00009ba5 00000028     '...........(...
   16b54:	00000001 00009bb5                       ........

00016b5c <intCtrlConfig>:
   16b5c:	00000002 00016b44                       ....Dk..

00016b64 <Mcu_Config>:
   16b64:	0000005a 00000000 00000001 00000001     Z...............
   16b74:	00016fb0 0001669c 00016fbc              .o...f...o..

00016b80 <OsIf_xPredefinedConfig>:
   16b80:	00000000 02dc6c00                       .....l..

00016b88 <OsIf_apxPredefinedConfig>:
   16b88:	00016b80                                .k..

00016b8c <PdbAdcIpConfig_0>:
	...
   16b98:	0000000f ffff0000 00000000 00000000     ................
   16ba8:	00000000                                ....

00016bac <PdbAdcIpConfig_1>:
	...
   16bb8:	0000000f ffff0000 00000000 00000000     ................
   16bc8:	00000000                                ....

00016bcc <Platform_uConfiguration>:
   16bcc:	00016bd4                                .k..

00016bd0 <Platform_Config>:
   16bd0:	00016bcc                                .k..

00016bd4 <ipwConfig>:
   16bd4:	00016b5c 00000000                       \k......

00016bdc <g_pin_mux_InitConfigArr>:
   16bdc:	4004b000 400ff080 00000008 00000002     ...@...@........
   16bec:	00000001 00000002 00000000 00000000     ................
	...
   16c04:	4004b000 400ff080 00000009 00000002     ...@...@........
   16c14:	00000001 00000002 00000000 00000000     ................
	...
   16c2c:	4004b000 400ff080 0000000a 00000002     ...@...@........
   16c3c:	00000001 00000002 00000000 00000000     ................
	...
   16c54:	4004b000 400ff080 0000000b 00000002     ...@...@........
   16c64:	00000001 00000002 00000000 00000000     ................
	...
   16c7c:	4004b000 400ff080 0000000d 00000002     ...@...@........
   16c8c:	00000001 00000002 00000000 00000000     ................
	...
   16ca4:	4004b000 400ff080 0000000e 00000002     ...@...@........
   16cb4:	00000001 00000002 00000000 00000000     ................
	...
   16ccc:	4004d000 400ff100 0000000c 00000002     ...@...@........
   16cdc:	00000001 00000001 00000000 00000000     ................
	...
   16cf4:	4004c000 400ff0c0 00000011 00000002     ...@...@........
   16d04:	00000001 00000001 00000000 00000000     ................
	...
   16d1c:	40049000 400ff000 0000000c 00000002     ...@...@........
   16d2c:	00000001 00000001 00000000 00000000     ................
	...
   16d44:	40049000 00000000 0000000d 00000002     ...@............
   16d54:	00000002 00000002 00000000 00000000     ................
	...
   16d6c:	4004a000 00000000 00000001 00000002     ...@............
   16d7c:	00000000 00000001 00000000 00000000     ................
	...
   16d94:	4004a000 00000000 0000000d 00000002     ...@............
   16da4:	00000000 00000001 00000000 00000000     ................
	...

00016dbc <au8Port_PartitionList>:
   16dbc:	00000001                                ....

00016dc0 <au32Port_PinToPartitionMap>:
   16dc0:	00000001 00000001 00000001 00000001     ................
   16dd0:	00000001 00000001 00000001 00000001     ................
   16de0:	00000001 00000001 00000001 00000001     ................

00016df0 <Port_au16NoUnUsedPadsArrayDefault>:
   16df0:	00010000 00030002 00070006 00090008     ................
   16e00:	000e000b 0010000f 00200011 00230022     .......... .".#.
   16e10:	00250024 00270026 00290028 002b002a     $.%.&.'.(.).*.+.
   16e20:	002e002c 0030002f 00400031 00420041     ,.../.0.1.@.A.B.
   16e30:	00460043 004c0047 0050004f 00600051     C.F.G.L.O.P.Q.`.
   16e40:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
   16e50:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
   16e60:	00810080 00830082 00850084 00870086     ................
   16e70:	00890088 008b008a 008e008d 0090008f     ................

00016e80 <Port_UnUsedPin>:
   16e80:	00000000 00000001 00000000              ............

00016e8c <Port_aPinConfigDefault>:
   16e8c:	00000048 00000100 00000000 00000002     H...............
   16e9c:	00010001 00000049 00000100 00000000     ....I...........
   16eac:	00000002 00010101 0000004a 00000100     ........J.......
   16ebc:	00000000 00000002 00010101 0000008c     ................
   16ecc:	00000100 00000000 00000001 00010101     ................
   16edc:	0000004b 00000100 00000000 00000002     K...............
   16eec:	00010101 0000004d 00000100 00000000     ....M...........
   16efc:	00000002 00010101 0000004e 00000100     ........N.......
   16f0c:	00000000 00000002 00010101 00000071     ............q...
   16f1c:	00000100 00000000 00000001 00010101     ................
   16f2c:	0000000c 00000100 00000000 00000001     ................
   16f3c:	00010101 00000021 00000000 00000002     ....!...........
   16f4c:	00000000 00010000 0000002d 00000000     ........-.......
   16f5c:	00000002 00000000 00010000 0000000d     ................
   16f6c:	00000200 00000000 00000002 00010000     ................

00016f7c <Port_Config>:
   16f7c:	0048000c 00016df0 00016e80 00016e8c     ..H..m...n...n..
	...
   16f94:	00016dc0 00016dbc 00016bdc              .m...m...k..

00016fa0 <Power_Ip_RCM_ConfigPB>:
	...

00016fa8 <Power_Ip_PMC_ConfigPB>:
   16fa8:	00000000                                ....

00016fac <Power_Ip_SMC_ConfigPB>:
   16fac:	00000000                                ....

00016fb0 <Power_Ip_aModeConfigPB>:
	...

00016fbc <Power_Ip_HwIPsConfigPB>:
   16fbc:	00016fa0 00016fa8 00016fac              .o...o...o..

00016fc8 <Pwm_Channels_PB>:
   16fc8:	00000000 00000001 00000001 00016b04     .............k..
   16fd8:	00000001 00000001                       ........

00016fe0 <Pwm_Instances_PB>:
   16fe0:	00000001 00000001 00016b30              ........0k..

00016fec <Pwm_Config>:
   16fec:	00000001 00016fc8 00000001 00016fe0     .....o.......o..

00016ffc <_aInitStr.0>:
   16ffc:	00000000 54540000 45522052 53454747     ......TTR REGGES
   1700c:	00000000                                ....

00017010 <_aV2C.0>:
   17010:	33323130 37363534 42413938 46454443     0123456789ABCDEF

00017020 <__INIT_TABLE>:
   17020:	00000002 	.word	0x00000002
   17024:	1fff8b10 	.word	0x1fff8b10
   17028:	00017048 	.word	0x00017048
   1702c:	0001709c 	.word	0x0001709c
   17030:	1fff8800 	.word	0x1fff8800
   17034:	00000000 	.word	0x00000000
   17038:	00000310 	.word	0x00000310

0001703c <__ZERO_TABLE>:
   1703c:	00000001 	.word	0x00000001
   17040:	1fff8b70 	.word	0x1fff8b70
   17044:	1fff9c90 	.word	0x1fff9c90
