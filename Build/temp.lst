
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	000010cb 	.word	0x000010cb
  10:	000010cd 	.word	0x000010cd
  14:	000010cf 	.word	0x000010cf
  18:	000010d1 	.word	0x000010d1
	...
  2c:	000010d3 	.word	0x000010d3
  30:	000010d5 	.word	0x000010d5
  34:	00000000 	.word	0x00000000
  38:	000010d7 	.word	0x000010d7
  3c:	000010d9 	.word	0x000010d9
  40:	000010db 	.word	0x000010db
  44:	000010db 	.word	0x000010db
  48:	000010db 	.word	0x000010db
  4c:	000010db 	.word	0x000010db
  50:	000010db 	.word	0x000010db
  54:	000010db 	.word	0x000010db
  58:	000010db 	.word	0x000010db
  5c:	000010db 	.word	0x000010db
  60:	000010db 	.word	0x000010db
  64:	000010db 	.word	0x000010db
  68:	000010db 	.word	0x000010db
  6c:	000010db 	.word	0x000010db
  70:	000010db 	.word	0x000010db
  74:	000010db 	.word	0x000010db
  78:	000010db 	.word	0x000010db
  7c:	000010db 	.word	0x000010db
  80:	000010db 	.word	0x000010db
  84:	000010db 	.word	0x000010db
  88:	000010db 	.word	0x000010db
  8c:	000010db 	.word	0x000010db
  90:	000010db 	.word	0x000010db
  94:	000010db 	.word	0x000010db
  98:	000010db 	.word	0x000010db
  9c:	000010db 	.word	0x000010db
  a0:	000010db 	.word	0x000010db
  a4:	000010db 	.word	0x000010db
  a8:	000010db 	.word	0x000010db
  ac:	000010db 	.word	0x000010db
  b0:	000010db 	.word	0x000010db
  b4:	000010db 	.word	0x000010db
  b8:	000010db 	.word	0x000010db
  bc:	000010db 	.word	0x000010db
  c0:	000010db 	.word	0x000010db
  c4:	000010db 	.word	0x000010db
  c8:	000010db 	.word	0x000010db
  cc:	000010db 	.word	0x000010db
  d0:	000010db 	.word	0x000010db
  d4:	000010db 	.word	0x000010db
  d8:	000010db 	.word	0x000010db
  dc:	000010db 	.word	0x000010db
  e0:	000010db 	.word	0x000010db
  e4:	000010db 	.word	0x000010db
  e8:	000010db 	.word	0x000010db
  ec:	000010db 	.word	0x000010db
  f0:	000010db 	.word	0x000010db
  f4:	000010db 	.word	0x000010db
  f8:	000010db 	.word	0x000010db
  fc:	000010db 	.word	0x000010db
 100:	000010db 	.word	0x000010db
 104:	000010db 	.word	0x000010db
 108:	000010db 	.word	0x000010db
 10c:	000010db 	.word	0x000010db
 110:	000010db 	.word	0x000010db
 114:	000010db 	.word	0x000010db
 118:	000010db 	.word	0x000010db
 11c:	000010db 	.word	0x000010db
 120:	000010db 	.word	0x000010db
 124:	000010db 	.word	0x000010db
 128:	000010db 	.word	0x000010db
 12c:	000010db 	.word	0x000010db
 130:	000010db 	.word	0x000010db
 134:	000010db 	.word	0x000010db
 138:	000010db 	.word	0x000010db
 13c:	000010db 	.word	0x000010db
 140:	000010db 	.word	0x000010db
 144:	000010db 	.word	0x000010db
 148:	000010db 	.word	0x000010db
 14c:	000010db 	.word	0x000010db
 150:	000010db 	.word	0x000010db
 154:	000010db 	.word	0x000010db
 158:	000010db 	.word	0x000010db
 15c:	000010db 	.word	0x000010db
 160:	000010db 	.word	0x000010db
 164:	000010db 	.word	0x000010db
 168:	000010db 	.word	0x000010db
 16c:	000010db 	.word	0x000010db
 170:	000010db 	.word	0x000010db
 174:	000010db 	.word	0x000010db
 178:	000010db 	.word	0x000010db
 17c:	000010db 	.word	0x000010db
 180:	000010db 	.word	0x000010db
 184:	000010db 	.word	0x000010db
 188:	000010db 	.word	0x000010db
 18c:	000010db 	.word	0x000010db
 190:	000010db 	.word	0x000010db
 194:	000010db 	.word	0x000010db
 198:	000010db 	.word	0x000010db
 19c:	000010db 	.word	0x000010db
 1a0:	000010db 	.word	0x000010db
 1a4:	000010db 	.word	0x000010db
 1a8:	000010db 	.word	0x000010db
 1ac:	000010db 	.word	0x000010db
 1b0:	000010db 	.word	0x000010db
 1b4:	000010db 	.word	0x000010db
 1b8:	000010db 	.word	0x000010db
 1bc:	000010db 	.word	0x000010db
 1c0:	000010db 	.word	0x000010db
 1c4:	000010db 	.word	0x000010db
 1c8:	000010db 	.word	0x000010db
 1cc:	000010db 	.word	0x000010db
 1d0:	000010db 	.word	0x000010db
 1d4:	000010db 	.word	0x000010db
 1d8:	000010db 	.word	0x000010db
 1dc:	000010db 	.word	0x000010db
 1e0:	000010db 	.word	0x000010db
 1e4:	000010db 	.word	0x000010db
 1e8:	000010db 	.word	0x000010db
 1ec:	000010db 	.word	0x000010db
 1f0:	000010db 	.word	0x000010db
 1f4:	000010db 	.word	0x000010db
 1f8:	000010db 	.word	0x000010db
 1fc:	000010db 	.word	0x000010db
 200:	000010db 	.word	0x000010db
 204:	000010db 	.word	0x000010db
 208:	000010db 	.word	0x000010db
 20c:	000010db 	.word	0x000010db
 210:	000010db 	.word	0x000010db
 214:	000010db 	.word	0x000010db
 218:	000010db 	.word	0x000010db
 21c:	000010db 	.word	0x000010db
 220:	000010db 	.word	0x000010db
 224:	000010db 	.word	0x000010db
 228:	000010db 	.word	0x000010db
 22c:	000010db 	.word	0x000010db
 230:	000010db 	.word	0x000010db
 234:	000010db 	.word	0x000010db
 238:	000010db 	.word	0x000010db
 23c:	000010db 	.word	0x000010db
 240:	000010db 	.word	0x000010db
 244:	000010db 	.word	0x000010db
 248:	000010db 	.word	0x000010db
 24c:	000010db 	.word	0x000010db
 250:	000010db 	.word	0x000010db
 254:	000010db 	.word	0x000010db
 258:	000010db 	.word	0x000010db
 25c:	000010db 	.word	0x000010db
 260:	000010db 	.word	0x000010db
 264:	000010db 	.word	0x000010db
 268:	000010db 	.word	0x000010db
 26c:	000010db 	.word	0x000010db
 270:	000010db 	.word	0x000010db
 274:	000010db 	.word	0x000010db
 278:	000010db 	.word	0x000010db
 27c:	000010db 	.word	0x000010db
 280:	000010db 	.word	0x000010db
 284:	000010db 	.word	0x000010db
 288:	000010db 	.word	0x000010db
 28c:	000010db 	.word	0x000010db
 290:	000010db 	.word	0x000010db
 294:	000010db 	.word	0x000010db
 298:	000010db 	.word	0x000010db
 29c:	000010db 	.word	0x000010db
 2a0:	000010db 	.word	0x000010db
 2a4:	000010db 	.word	0x000010db
 2a8:	000010db 	.word	0x000010db
 2ac:	000010db 	.word	0x000010db
 2b0:	000010db 	.word	0x000010db
 2b4:	000010db 	.word	0x000010db
 2b8:	000010db 	.word	0x000010db
 2bc:	000010db 	.word	0x000010db
 2c0:	000010db 	.word	0x000010db
 2c4:	000010db 	.word	0x000010db
 2c8:	000010db 	.word	0x000010db
 2cc:	000010db 	.word	0x000010db
 2d0:	000010db 	.word	0x000010db
 2d4:	000010db 	.word	0x000010db
 2d8:	000010db 	.word	0x000010db
 2dc:	000010db 	.word	0x000010db
 2e0:	000010db 	.word	0x000010db
 2e4:	000010db 	.word	0x000010db
 2e8:	000010db 	.word	0x000010db
 2ec:	000010db 	.word	0x000010db
 2f0:	000010db 	.word	0x000010db
 2f4:	000010db 	.word	0x000010db
 2f8:	000010db 	.word	0x000010db
 2fc:	000010db 	.word	0x000010db
 300:	000010db 	.word	0x000010db
 304:	000010db 	.word	0x000010db
 308:	000010db 	.word	0x000010db
 30c:	000010db 	.word	0x000010db

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fd59 	bl	f38 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fe18 	bl	10c0 <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff8e50 	.word	0x1fff8e50

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 fd63 	bl	1064 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * 
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void ) {
     8b0:	b508      	push	{r3, lr}

    EcuM_Init();    //MCU configuration.
     8b2:	f000 fc21 	bl	10f8 <EcuM_Init>
    Scheduler_Init( &Scheduler_Control );   //Initializing control structure for scheduler.
     8b6:	4803      	ldr	r0, [pc, #12]	; (8c4 <main+0x14>)
     8b8:	f000 f8ee 	bl	a98 <Scheduler_Init>

    while( 1u ) {
        Scheduler_MainFunction();
     8bc:	f000 fa78 	bl	db0 <Scheduler_MainFunction>
     8c0:	e7fc      	b.n	8bc <main+0xc>
     8c2:	bf00      	nop
     8c4:	1fff8e18 	.word	0x1fff8e18

000008c8 <Dio_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Dio_schm_read_msr(void)
{
     8c8:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     8ca:	f3ef 8310 	mrs	r3, PRIMASK
     8ce:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     8d0:	4623      	mov	r3, r4
}
     8d2:	4618      	mov	r0, r3
     8d4:	f85d 4b04 	ldr.w	r4, [sp], #4
     8d8:	4770      	bx	lr

000008da <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     8da:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     8dc:	f3ef 8310 	mrs	r3, PRIMASK
     8e0:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     8e2:	4623      	mov	r3, r4
}
     8e4:	4618      	mov	r0, r3
     8e6:	f85d 4b04 	ldr.w	r4, [sp], #4
     8ea:	4770      	bx	lr

000008ec <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     8ec:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     8ee:	f3ef 8310 	mrs	r3, PRIMASK
     8f2:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     8f4:	4623      	mov	r3, r4
}
     8f6:	4618      	mov	r0, r3
     8f8:	f85d 4b04 	ldr.w	r4, [sp], #4
     8fc:	4770      	bx	lr

000008fe <Task1_callback>:
/**
 * @brief This is the callback function for the task 1.
 *
 * This function executes the state machine every 50ms.
 */
void Task1_callback( void ) {
     8fe:	b508      	push	{r3, lr}
    DoubleClick_stMachine();
     900:	f000 fc08 	bl	1114 <DoubleClick_stMachine>
}
     904:	bf00      	nop
     906:	bd08      	pop	{r3, pc}

00000908 <Task2_callback>:
/**
 * @brief This is the callback function for the task 2.
 *
 * This function is called every 100ms and toggles a led according to the kind of click detected in the state machine.
 */
void Task2_callback( void ) {
     908:	b508      	push	{r3, lr}
    //Checking actual state.
    switch ( click ) {
     90a:	4b11      	ldr	r3, [pc, #68]	; (950 <Task2_callback+0x48>)
     90c:	781b      	ldrb	r3, [r3, #0]
     90e:	2b03      	cmp	r3, #3
     910:	d014      	beq.n	93c <Task2_callback+0x34>
     912:	2b03      	cmp	r3, #3
     914:	dc19      	bgt.n	94a <Task2_callback+0x42>
     916:	2b01      	cmp	r3, #1
     918:	d002      	beq.n	920 <Task2_callback+0x18>
     91a:	2b02      	cmp	r3, #2
     91c:	d007      	beq.n	92e <Task2_callback+0x26>
        case HOLD_CLICK: 
            Dio_FlipChannel( DioConf_DioChannel_PTC10 );
            click = NO_CLICK; 
        break;
        default: 
        break; //No click detected
     91e:	e014      	b.n	94a <Task2_callback+0x42>
            Dio_FlipChannel( DioConf_DioChannel_PTC8 );
     920:	2048      	movs	r0, #72	; 0x48
     922:	f005 fb66 	bl	5ff2 <Dio_FlipChannel>
            click = NO_CLICK; 
     926:	4b0a      	ldr	r3, [pc, #40]	; (950 <Task2_callback+0x48>)
     928:	2200      	movs	r2, #0
     92a:	701a      	strb	r2, [r3, #0]
        break;
     92c:	e00e      	b.n	94c <Task2_callback+0x44>
            Dio_FlipChannel( DioConf_DioChannel_PTC9 );
     92e:	2049      	movs	r0, #73	; 0x49
     930:	f005 fb5f 	bl	5ff2 <Dio_FlipChannel>
            click = NO_CLICK; 
     934:	4b06      	ldr	r3, [pc, #24]	; (950 <Task2_callback+0x48>)
     936:	2200      	movs	r2, #0
     938:	701a      	strb	r2, [r3, #0]
        break;
     93a:	e007      	b.n	94c <Task2_callback+0x44>
            Dio_FlipChannel( DioConf_DioChannel_PTC10 );
     93c:	204a      	movs	r0, #74	; 0x4a
     93e:	f005 fb58 	bl	5ff2 <Dio_FlipChannel>
            click = NO_CLICK; 
     942:	4b03      	ldr	r3, [pc, #12]	; (950 <Task2_callback+0x48>)
     944:	2200      	movs	r2, #0
     946:	701a      	strb	r2, [r3, #0]
        break;
     948:	e000      	b.n	94c <Task2_callback+0x44>
        break; //No click detected
     94a:	bf00      	nop
    }
}
     94c:	bf00      	nop
     94e:	bd08      	pop	{r3, pc}
     950:	1fff8b40 	.word	0x1fff8b40

00000954 <Timer1_callback>:
/**
 * @brief This is the callback function for the timer 1.
 *
 * This function is called when the timer counts to 300ms. This is for detecting the timeout in the state machine.
 */
void Timer1_callback( void ) {    
     954:	b508      	push	{r3, lr}
    Scheduler_StopTimer( SCHEDULER_TIMER1_ID );    //Stoping timer.
     956:	2001      	movs	r0, #1
     958:	f000 f982 	bl	c60 <Scheduler_StopTimer>
}
     95c:	bf00      	nop
     95e:	bd08      	pop	{r3, pc}

00000960 <Bfx_SetBit_u32u8>:
 * @param[in] BitPn Bit position.
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_SetBit_u32u8( uint32* Data, uint8 BitPn ) {
     960:	b082      	sub	sp, #8
     962:	9001      	str	r0, [sp, #4]
     964:	460b      	mov	r3, r1
     966:	f88d 3003 	strb.w	r3, [sp, #3]
    *Data |= ( 1 << BitPn ); 
     96a:	9b01      	ldr	r3, [sp, #4]
     96c:	681b      	ldr	r3, [r3, #0]
     96e:	f89d 2003 	ldrb.w	r2, [sp, #3]
     972:	2101      	movs	r1, #1
     974:	fa01 f202 	lsl.w	r2, r1, r2
     978:	431a      	orrs	r2, r3
     97a:	9b01      	ldr	r3, [sp, #4]
     97c:	601a      	str	r2, [r3, #0]
}
     97e:	bf00      	nop
     980:	b002      	add	sp, #8
     982:	4770      	bx	lr

00000984 <Bfx_ClrBit_u32u8>:
 * @param[in] BitPn Bit position.
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_ClrBit_u32u8( uint32* Data, uint8 BitPn ) {
     984:	b082      	sub	sp, #8
     986:	9001      	str	r0, [sp, #4]
     988:	460b      	mov	r3, r1
     98a:	f88d 3003 	strb.w	r3, [sp, #3]
    *Data &= ~( 1 << BitPn );
     98e:	9b01      	ldr	r3, [sp, #4]
     990:	681b      	ldr	r3, [r3, #0]
     992:	f89d 2003 	ldrb.w	r2, [sp, #3]
     996:	2101      	movs	r1, #1
     998:	fa01 f202 	lsl.w	r2, r1, r2
     99c:	43d2      	mvns	r2, r2
     99e:	401a      	ands	r2, r3
     9a0:	9b01      	ldr	r3, [sp, #4]
     9a2:	601a      	str	r2, [r3, #0]
}
     9a4:	bf00      	nop
     9a6:	b002      	add	sp, #8
     9a8:	4770      	bx	lr

000009aa <Bfx_GetBit_u32u8_u8>:
 * @param[in] BitPn Bit position.
 * @retval Result It indicates the value of the bit of interest.
 * 
 * @note The max BitPn value is 31
 */
static inline boolean Bfx_GetBit_u32u8_u8( uint32 Data, uint8 BitPn ) {
     9aa:	b084      	sub	sp, #16
     9ac:	9001      	str	r0, [sp, #4]
     9ae:	460b      	mov	r3, r1
     9b0:	f88d 3003 	strb.w	r3, [sp, #3]
    //local data.
    boolean Result = FALSE;
     9b4:	2300      	movs	r3, #0
     9b6:	f88d 300f 	strb.w	r3, [sp, #15]
    
    Result = ( Data & ( 1 << BitPn ) ) != 0;
     9ba:	f89d 3003 	ldrb.w	r3, [sp, #3]
     9be:	2201      	movs	r2, #1
     9c0:	fa02 f303 	lsl.w	r3, r2, r3
     9c4:	461a      	mov	r2, r3
     9c6:	9b01      	ldr	r3, [sp, #4]
     9c8:	4013      	ands	r3, r2
     9ca:	2b00      	cmp	r3, #0
     9cc:	bf14      	ite	ne
     9ce:	2301      	movne	r3, #1
     9d0:	2300      	moveq	r3, #0
     9d2:	f88d 300f 	strb.w	r3, [sp, #15]
    return Result;
     9d6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     9da:	4618      	mov	r0, r3
     9dc:	b004      	add	sp, #16
     9de:	4770      	bx	lr

000009e0 <Bfx_PutBit_u32u8u8>:
 * @param[in] Status Status value (TRUE or FALSE).
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_PutBit_u32u8u8( uint32* Data, uint8 BitPn, boolean Status ) {
     9e0:	b082      	sub	sp, #8
     9e2:	9001      	str	r0, [sp, #4]
     9e4:	460b      	mov	r3, r1
     9e6:	f88d 3003 	strb.w	r3, [sp, #3]
     9ea:	4613      	mov	r3, r2
     9ec:	f88d 3002 	strb.w	r3, [sp, #2]
    if ( Status == TRUE ) { //Setting bit.
     9f0:	f89d 3002 	ldrb.w	r3, [sp, #2]
     9f4:	2b00      	cmp	r3, #0
     9f6:	d00a      	beq.n	a0e <Bfx_PutBit_u32u8u8+0x2e>
        *Data |= ( 1 << BitPn ); 
     9f8:	9b01      	ldr	r3, [sp, #4]
     9fa:	681b      	ldr	r3, [r3, #0]
     9fc:	f89d 2003 	ldrb.w	r2, [sp, #3]
     a00:	2101      	movs	r1, #1
     a02:	fa01 f202 	lsl.w	r2, r1, r2
     a06:	431a      	orrs	r2, r3
     a08:	9b01      	ldr	r3, [sp, #4]
     a0a:	601a      	str	r2, [r3, #0]
    }

    else { //Clearing bit.
        *Data &= ~( 1 << BitPn );
    }
}
     a0c:	e00a      	b.n	a24 <Bfx_PutBit_u32u8u8+0x44>
        *Data &= ~( 1 << BitPn );
     a0e:	9b01      	ldr	r3, [sp, #4]
     a10:	681b      	ldr	r3, [r3, #0]
     a12:	f89d 2003 	ldrb.w	r2, [sp, #3]
     a16:	2101      	movs	r1, #1
     a18:	fa01 f202 	lsl.w	r2, r1, r2
     a1c:	43d2      	mvns	r2, r2
     a1e:	401a      	ands	r2, r3
     a20:	9b01      	ldr	r3, [sp, #4]
     a22:	601a      	str	r2, [r3, #0]
}
     a24:	bf00      	nop
     a26:	b002      	add	sp, #8
     a28:	4770      	bx	lr

00000a2a <Scheduler_InitQueue>:
/**
 * @brief This function initialices the queue buffer control members.
 * 
 * @param SchedulerPtr Ptr to control struct instance, it allows the init of the members.
 */
void Scheduler_InitQueue( Scheduler_CtrlType *SchedulerPtr ) {
     a2a:	b500      	push	{lr}
     a2c:	b085      	sub	sp, #20
     a2e:	9001      	str	r0, [sp, #4]
    //local data.
    uint8 i = 0;
     a30:	2300      	movs	r3, #0
     a32:	f88d 300f 	strb.w	r3, [sp, #15]

    //Initializing members.
    for ( i = 0; i < SCHEDULER_QUEUES; i++ ) {
     a36:	2300      	movs	r3, #0
     a38:	f88d 300f 	strb.w	r3, [sp, #15]
     a3c:	e022      	b.n	a84 <Scheduler_InitQueue+0x5a>
        SchedulerPtr->QueueHeads[i] = 0;
     a3e:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a42:	9b01      	ldr	r3, [sp, #4]
     a44:	3208      	adds	r2, #8
     a46:	2100      	movs	r1, #0
     a48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        SchedulerPtr->QueueTails[i] = 0;
     a4c:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a50:	9b01      	ldr	r3, [sp, #4]
     a52:	320a      	adds	r2, #10
     a54:	2100      	movs	r1, #0
     a56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        Bfx_ClrBit_u32u8( &SchedulerPtr->QueueFulls, i );
     a5a:	9b01      	ldr	r3, [sp, #4]
     a5c:	3334      	adds	r3, #52	; 0x34
     a5e:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a62:	4611      	mov	r1, r2
     a64:	4618      	mov	r0, r3
     a66:	f7ff ff8d 	bl	984 <Bfx_ClrBit_u32u8>
        Bfx_SetBit_u32u8( &SchedulerPtr->QueueEmpties, i );
     a6a:	9b01      	ldr	r3, [sp, #4]
     a6c:	3330      	adds	r3, #48	; 0x30
     a6e:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a72:	4611      	mov	r1, r2
     a74:	4618      	mov	r0, r3
     a76:	f7ff ff73 	bl	960 <Bfx_SetBit_u32u8>
    for ( i = 0; i < SCHEDULER_QUEUES; i++ ) {
     a7a:	f89d 300f 	ldrb.w	r3, [sp, #15]
     a7e:	3301      	adds	r3, #1
     a80:	f88d 300f 	strb.w	r3, [sp, #15]
     a84:	f89d 300f 	ldrb.w	r3, [sp, #15]
     a88:	2b01      	cmp	r3, #1
     a8a:	d9d8      	bls.n	a3e <Scheduler_InitQueue+0x14>
    }
}
     a8c:	bf00      	nop
     a8e:	bf00      	nop
     a90:	b005      	add	sp, #20
     a92:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00000a98 <Scheduler_Init>:
 *
 * @note The timeout and periodicity values are the initial values registered in the buffers.
 * @note The elapsed and count values are initialized to 0 and timeout values respectively.
 * @note All the flags are initialiced to the initial values registered in the buffers.
 */
Std_ReturnType Scheduler_Init( Scheduler_CtrlType *SchedulerPtr ) {
     a98:	b500      	push	{lr}
     a9a:	b085      	sub	sp, #20
     a9c:	9001      	str	r0, [sp, #4]
    //local data 
    Std_ReturnType status = TRUE;
     a9e:	2301      	movs	r3, #1
     aa0:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8 i = 0;
     aa4:	2300      	movs	r3, #0
     aa6:	f88d 300f 	strb.w	r3, [sp, #15]

    //Initializing tasks related parameters.
    for ( i = 0; i < SCHEDULER_TASKS; i++ ) {
     aaa:	2300      	movs	r3, #0
     aac:	f88d 300f 	strb.w	r3, [sp, #15]
     ab0:	e033      	b.n	b1a <Scheduler_Init+0x82>
        SchedulerPtr->TaskPeriod[i] = SchedulerConfig_Ptr->TaskPtr[i].InitPeriod;   //Registering initial periodicity value of each task.
     ab2:	4b44      	ldr	r3, [pc, #272]	; (bc4 <Scheduler_Init+0x12c>)
     ab4:	681b      	ldr	r3, [r3, #0]
     ab6:	6899      	ldr	r1, [r3, #8]
     ab8:	f89d 200f 	ldrb.w	r2, [sp, #15]
     abc:	4613      	mov	r3, r2
     abe:	005b      	lsls	r3, r3, #1
     ac0:	4413      	add	r3, r2
     ac2:	009b      	lsls	r3, r3, #2
     ac4:	440b      	add	r3, r1
     ac6:	f89d 200f 	ldrb.w	r2, [sp, #15]
     aca:	6819      	ldr	r1, [r3, #0]
     acc:	9b01      	ldr	r3, [sp, #4]
     ace:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        SchedulerPtr->TaskElapsed[i] = 0;   //Initializing time follow up of each task.
     ad2:	f89d 200f 	ldrb.w	r2, [sp, #15]
     ad6:	9b01      	ldr	r3, [sp, #4]
     ad8:	3202      	adds	r2, #2
     ada:	2100      	movs	r1, #0
     adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        Bfx_PutBit_u32u8u8( &SchedulerPtr->TaskFlags, i, SchedulerConfig_Ptr->TaskPtr[i].InitFlag  );   //Registering initial flag of each task. 
     ae0:	9b01      	ldr	r3, [sp, #4]
     ae2:	f103 0018 	add.w	r0, r3, #24
     ae6:	4b37      	ldr	r3, [pc, #220]	; (bc4 <Scheduler_Init+0x12c>)
     ae8:	681b      	ldr	r3, [r3, #0]
     aea:	6899      	ldr	r1, [r3, #8]
     aec:	f89d 200f 	ldrb.w	r2, [sp, #15]
     af0:	4613      	mov	r3, r2
     af2:	005b      	lsls	r3, r3, #1
     af4:	4413      	add	r3, r2
     af6:	009b      	lsls	r3, r3, #2
     af8:	440b      	add	r3, r1
     afa:	791b      	ldrb	r3, [r3, #4]
     afc:	2b00      	cmp	r3, #0
     afe:	bf14      	ite	ne
     b00:	2301      	movne	r3, #1
     b02:	2300      	moveq	r3, #0
     b04:	b2da      	uxtb	r2, r3
     b06:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b0a:	4619      	mov	r1, r3
     b0c:	f7ff ff68 	bl	9e0 <Bfx_PutBit_u32u8u8>
    for ( i = 0; i < SCHEDULER_TASKS; i++ ) {
     b10:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b14:	3301      	adds	r3, #1
     b16:	f88d 300f 	strb.w	r3, [sp, #15]
     b1a:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b1e:	2b01      	cmp	r3, #1
     b20:	d9c7      	bls.n	ab2 <Scheduler_Init+0x1a>
    }

    //Initializing timers related parameters.
    for ( i = 0; i < SCHEDULER_TIMERS; i++ ) {
     b22:	2300      	movs	r3, #0
     b24:	f88d 300f 	strb.w	r3, [sp, #15]
     b28:	e03f      	b.n	baa <Scheduler_Init+0x112>
        SchedulerPtr->TimerTimeout[i] = SchedulerConfig_Ptr->TimerPtr[i].InitTimeout;   //Registering initial timeout value of each timer.
     b2a:	4b26      	ldr	r3, [pc, #152]	; (bc4 <Scheduler_Init+0x12c>)
     b2c:	681b      	ldr	r3, [r3, #0]
     b2e:	6919      	ldr	r1, [r3, #16]
     b30:	f89d 200f 	ldrb.w	r2, [sp, #15]
     b34:	4613      	mov	r3, r2
     b36:	005b      	lsls	r3, r3, #1
     b38:	4413      	add	r3, r2
     b3a:	009b      	lsls	r3, r3, #2
     b3c:	440b      	add	r3, r1
     b3e:	f89d 200f 	ldrb.w	r2, [sp, #15]
     b42:	6819      	ldr	r1, [r3, #0]
     b44:	9b01      	ldr	r3, [sp, #4]
     b46:	3204      	adds	r2, #4
     b48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        SchedulerPtr->TimerCount[i] = SchedulerConfig_Ptr->TimerPtr[i].InitTimeout; //Initializing timer count of each timer.
     b4c:	4b1d      	ldr	r3, [pc, #116]	; (bc4 <Scheduler_Init+0x12c>)
     b4e:	681b      	ldr	r3, [r3, #0]
     b50:	6919      	ldr	r1, [r3, #16]
     b52:	f89d 200f 	ldrb.w	r2, [sp, #15]
     b56:	4613      	mov	r3, r2
     b58:	005b      	lsls	r3, r3, #1
     b5a:	4413      	add	r3, r2
     b5c:	009b      	lsls	r3, r3, #2
     b5e:	18ca      	adds	r2, r1, r3
     b60:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b64:	6812      	ldr	r2, [r2, #0]
     b66:	9901      	ldr	r1, [sp, #4]
     b68:	3304      	adds	r3, #4
     b6a:	009b      	lsls	r3, r3, #2
     b6c:	440b      	add	r3, r1
     b6e:	605a      	str	r2, [r3, #4]
        Bfx_PutBit_u32u8u8( &SchedulerPtr->TimerFlags, i, SchedulerConfig_Ptr->TimerPtr[i].InitFlag  );   //Registering initial flag of each timer.
     b70:	9b01      	ldr	r3, [sp, #4]
     b72:	f103 001c 	add.w	r0, r3, #28
     b76:	4b13      	ldr	r3, [pc, #76]	; (bc4 <Scheduler_Init+0x12c>)
     b78:	681b      	ldr	r3, [r3, #0]
     b7a:	6919      	ldr	r1, [r3, #16]
     b7c:	f89d 200f 	ldrb.w	r2, [sp, #15]
     b80:	4613      	mov	r3, r2
     b82:	005b      	lsls	r3, r3, #1
     b84:	4413      	add	r3, r2
     b86:	009b      	lsls	r3, r3, #2
     b88:	440b      	add	r3, r1
     b8a:	791b      	ldrb	r3, [r3, #4]
     b8c:	2b00      	cmp	r3, #0
     b8e:	bf14      	ite	ne
     b90:	2301      	movne	r3, #1
     b92:	2300      	moveq	r3, #0
     b94:	b2da      	uxtb	r2, r3
     b96:	f89d 300f 	ldrb.w	r3, [sp, #15]
     b9a:	4619      	mov	r1, r3
     b9c:	f7ff ff20 	bl	9e0 <Bfx_PutBit_u32u8u8>
    for ( i = 0; i < SCHEDULER_TIMERS; i++ ) {
     ba0:	f89d 300f 	ldrb.w	r3, [sp, #15]
     ba4:	3301      	adds	r3, #1
     ba6:	f88d 300f 	strb.w	r3, [sp, #15]
     baa:	f89d 300f 	ldrb.w	r3, [sp, #15]
     bae:	2b00      	cmp	r3, #0
     bb0:	d0bb      	beq.n	b2a <Scheduler_Init+0x92>
    } 

    Scheduler_InitQueue( SchedulerPtr ); //Initializing queues related parameters.   
     bb2:	9801      	ldr	r0, [sp, #4]
     bb4:	f7ff ff39 	bl	a2a <Scheduler_InitQueue>

    return status;
     bb8:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
     bbc:	4618      	mov	r0, r3
     bbe:	b005      	add	sp, #20
     bc0:	f85d fb04 	ldr.w	pc, [sp], #4
     bc4:	1fff8b38 	.word	0x1fff8b38

00000bc8 <Scheduler_StartTimer>:
 *
 * @retval status Status of the operation, successfull 1 or not 0. 
 *
 * @note The timer ID must be valid.
 */
Std_ReturnType Scheduler_StartTimer( TimerType Timer ) {
     bc8:	b500      	push	{lr}
     bca:	b085      	sub	sp, #20
     bcc:	4603      	mov	r3, r0
     bce:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data
    Std_ReturnType status = FALSE;
     bd2:	2300      	movs	r3, #0
     bd4:	f88d 300f 	strb.w	r3, [sp, #15]

    //Verifying if the timer ID is valid.
    if ( ( Timer != 0 ) && ( Timer <= SchedulerConfig_Ptr->Timers ) ) { //valid ID
     bd8:	f89d 3007 	ldrb.w	r3, [sp, #7]
     bdc:	2b00      	cmp	r3, #0
     bde:	d032      	beq.n	c46 <Scheduler_StartTimer+0x7e>
     be0:	4b1d      	ldr	r3, [pc, #116]	; (c58 <Scheduler_StartTimer+0x90>)
     be2:	681b      	ldr	r3, [r3, #0]
     be4:	7b1b      	ldrb	r3, [r3, #12]
     be6:	f89d 2007 	ldrb.w	r2, [sp, #7]
     bea:	429a      	cmp	r2, r3
     bec:	d82b      	bhi.n	c46 <Scheduler_StartTimer+0x7e>
        Bfx_SetBit_u32u8( &SchedulerCtrl_Ptr->TimerFlags , Timer - 1 ); 
     bee:	4b1b      	ldr	r3, [pc, #108]	; (c5c <Scheduler_StartTimer+0x94>)
     bf0:	681b      	ldr	r3, [r3, #0]
     bf2:	f103 021c 	add.w	r2, r3, #28
     bf6:	f89d 3007 	ldrb.w	r3, [sp, #7]
     bfa:	3b01      	subs	r3, #1
     bfc:	b2db      	uxtb	r3, r3
     bfe:	4619      	mov	r1, r3
     c00:	4610      	mov	r0, r2
     c02:	f7ff fead 	bl	960 <Bfx_SetBit_u32u8>

        //Verifying if timer has reach 0.
        if ( SchedulerCtrl_Ptr->TimerCount[ Timer - 1 ] == 0 ) {
     c06:	4b15      	ldr	r3, [pc, #84]	; (c5c <Scheduler_StartTimer+0x94>)
     c08:	681a      	ldr	r2, [r3, #0]
     c0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c0e:	3b01      	subs	r3, #1
     c10:	3304      	adds	r3, #4
     c12:	009b      	lsls	r3, r3, #2
     c14:	4413      	add	r3, r2
     c16:	685b      	ldr	r3, [r3, #4]
     c18:	2b00      	cmp	r3, #0
     c1a:	d110      	bne.n	c3e <Scheduler_StartTimer+0x76>
             SchedulerCtrl_Ptr->TimerCount[ Timer - 1 ] = SchedulerCtrl_Ptr->TimerTimeout[ Timer - 1 ]; //restarting timer.
     c1c:	4b0f      	ldr	r3, [pc, #60]	; (c5c <Scheduler_StartTimer+0x94>)
     c1e:	681a      	ldr	r2, [r3, #0]
     c20:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c24:	1e58      	subs	r0, r3, #1
     c26:	4b0d      	ldr	r3, [pc, #52]	; (c5c <Scheduler_StartTimer+0x94>)
     c28:	6819      	ldr	r1, [r3, #0]
     c2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c2e:	3b01      	subs	r3, #1
     c30:	3004      	adds	r0, #4
     c32:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
     c36:	3304      	adds	r3, #4
     c38:	009b      	lsls	r3, r3, #2
     c3a:	440b      	add	r3, r1
     c3c:	605a      	str	r2, [r3, #4]
        }

        status = TRUE;
     c3e:	2301      	movs	r3, #1
     c40:	f88d 300f 	strb.w	r3, [sp, #15]
     c44:	e002      	b.n	c4c <Scheduler_StartTimer+0x84>
    }

    else {
        status = FALSE; //invalid ID.
     c46:	2300      	movs	r3, #0
     c48:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    return status;
     c4c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     c50:	4618      	mov	r0, r3
     c52:	b005      	add	sp, #20
     c54:	f85d fb04 	ldr.w	pc, [sp], #4
     c58:	1fff8b38 	.word	0x1fff8b38
     c5c:	1fff8b3c 	.word	0x1fff8b3c

00000c60 <Scheduler_StopTimer>:
 *
 * @retval status Status of the operation, successfull 1 or not 0. 
 *
 * @note The timer ID must be valid.
 */
Std_ReturnType Scheduler_StopTimer( TimerType Timer ) {
     c60:	b500      	push	{lr}
     c62:	b085      	sub	sp, #20
     c64:	4603      	mov	r3, r0
     c66:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data
    Std_ReturnType status = FALSE; 
     c6a:	2300      	movs	r3, #0
     c6c:	f88d 300f 	strb.w	r3, [sp, #15]

    //Verifying if the timer ID is valid.
    if ( ( Timer != 0 ) && ( Timer <= SchedulerConfig_Ptr->Timers ) ) {//valid ID
     c70:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c74:	2b00      	cmp	r3, #0
     c76:	d016      	beq.n	ca6 <Scheduler_StopTimer+0x46>
     c78:	4b0f      	ldr	r3, [pc, #60]	; (cb8 <Scheduler_StopTimer+0x58>)
     c7a:	681b      	ldr	r3, [r3, #0]
     c7c:	7b1b      	ldrb	r3, [r3, #12]
     c7e:	f89d 2007 	ldrb.w	r2, [sp, #7]
     c82:	429a      	cmp	r2, r3
     c84:	d80f      	bhi.n	ca6 <Scheduler_StopTimer+0x46>
        Bfx_ClrBit_u32u8( &SchedulerCtrl_Ptr->TimerFlags , Timer - 1 );
     c86:	4b0d      	ldr	r3, [pc, #52]	; (cbc <Scheduler_StopTimer+0x5c>)
     c88:	681b      	ldr	r3, [r3, #0]
     c8a:	f103 021c 	add.w	r2, r3, #28
     c8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c92:	3b01      	subs	r3, #1
     c94:	b2db      	uxtb	r3, r3
     c96:	4619      	mov	r1, r3
     c98:	4610      	mov	r0, r2
     c9a:	f7ff fe73 	bl	984 <Bfx_ClrBit_u32u8>
        status = TRUE;
     c9e:	2301      	movs	r3, #1
     ca0:	f88d 300f 	strb.w	r3, [sp, #15]
     ca4:	e002      	b.n	cac <Scheduler_StopTimer+0x4c>
    }

    else {
        status = FALSE;//invalid ID.
     ca6:	2300      	movs	r3, #0
     ca8:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    return status;
     cac:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     cb0:	4618      	mov	r0, r3
     cb2:	b005      	add	sp, #20
     cb4:	f85d fb04 	ldr.w	pc, [sp], #4
     cb8:	1fff8b38 	.word	0x1fff8b38
     cbc:	1fff8b3c 	.word	0x1fff8b3c

00000cc0 <Scheduler_GetTimer>:
 *
 * @retval counter_value Actual count value of timer, if operation was a success counter_value = n, otherwise 0. 
 *
 * @note The timer ID must be valid.
 */
uint32 Scheduler_GetTimer( TimerType Timer ) {
     cc0:	b084      	sub	sp, #16
     cc2:	4603      	mov	r3, r0
     cc4:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data
    uint32 counter_value = 0;
     cc8:	2300      	movs	r3, #0
     cca:	9303      	str	r3, [sp, #12]

    //Verifying if the timer ID is valid.
    if ( ( Timer != 0 ) && ( Timer <= SchedulerConfig_Ptr->Timers ) ) { //valid ID
     ccc:	f89d 3007 	ldrb.w	r3, [sp, #7]
     cd0:	2b00      	cmp	r3, #0
     cd2:	d011      	beq.n	cf8 <Scheduler_GetTimer+0x38>
     cd4:	4b0b      	ldr	r3, [pc, #44]	; (d04 <Scheduler_GetTimer+0x44>)
     cd6:	681b      	ldr	r3, [r3, #0]
     cd8:	7b1b      	ldrb	r3, [r3, #12]
     cda:	f89d 2007 	ldrb.w	r2, [sp, #7]
     cde:	429a      	cmp	r2, r3
     ce0:	d80a      	bhi.n	cf8 <Scheduler_GetTimer+0x38>
        counter_value = SchedulerCtrl_Ptr->TimerCount[ Timer - 1 ];
     ce2:	4b09      	ldr	r3, [pc, #36]	; (d08 <Scheduler_GetTimer+0x48>)
     ce4:	681a      	ldr	r2, [r3, #0]
     ce6:	f89d 3007 	ldrb.w	r3, [sp, #7]
     cea:	3b01      	subs	r3, #1
     cec:	3304      	adds	r3, #4
     cee:	009b      	lsls	r3, r3, #2
     cf0:	4413      	add	r3, r2
     cf2:	685b      	ldr	r3, [r3, #4]
     cf4:	9303      	str	r3, [sp, #12]
     cf6:	e001      	b.n	cfc <Scheduler_GetTimer+0x3c>
    }

    else {
        counter_value = FALSE;  //invalid ID.
     cf8:	2300      	movs	r3, #0
     cfa:	9303      	str	r3, [sp, #12]
    }

    return counter_value;
     cfc:	9b03      	ldr	r3, [sp, #12]
}
     cfe:	4618      	mov	r0, r3
     d00:	b004      	add	sp, #16
     d02:	4770      	bx	lr
     d04:	1fff8b38 	.word	0x1fff8b38
     d08:	1fff8b3c 	.word	0x1fff8b3c

00000d0c <Scheduler_ReloadTimer>:
 * @retval status Status of the operation, successfull 1 or not 0. 
 *
 * @note The timeout value must be >= tick and a multiple of tick.
 * @note The timer ID must be valid.
 */
Std_ReturnType Scheduler_ReloadTimer( TimerType Timer, uint32 NewTimeout ) {
     d0c:	b500      	push	{lr}
     d0e:	b085      	sub	sp, #20
     d10:	4603      	mov	r3, r0
     d12:	9100      	str	r1, [sp, #0]
     d14:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data
    Std_ReturnType status = FALSE;
     d18:	2300      	movs	r3, #0
     d1a:	f88d 300f 	strb.w	r3, [sp, #15]

    //Verifying if the timer ID is valid.
    if ( ( Timer != 0 ) && ( Timer <= SchedulerConfig_Ptr->Timers ) ) { //valid ID
     d1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d22:	2b00      	cmp	r3, #0
     d24:	d037      	beq.n	d96 <Scheduler_ReloadTimer+0x8a>
     d26:	4b20      	ldr	r3, [pc, #128]	; (da8 <Scheduler_ReloadTimer+0x9c>)
     d28:	681b      	ldr	r3, [r3, #0]
     d2a:	7b1b      	ldrb	r3, [r3, #12]
     d2c:	f89d 2007 	ldrb.w	r2, [sp, #7]
     d30:	429a      	cmp	r2, r3
     d32:	d830      	bhi.n	d96 <Scheduler_ReloadTimer+0x8a>
        //Verifying if timeout value is valid according to tick value. timeout >= tick, timeout must be multiple of tick.
        if ( ( NewTimeout >= SchedulerConfig_Ptr->Tick ) && ( NewTimeout % SchedulerConfig_Ptr->Tick == 0 ) ) { //valid timeout.
     d34:	4b1c      	ldr	r3, [pc, #112]	; (da8 <Scheduler_ReloadTimer+0x9c>)
     d36:	681b      	ldr	r3, [r3, #0]
     d38:	681b      	ldr	r3, [r3, #0]
     d3a:	9a00      	ldr	r2, [sp, #0]
     d3c:	429a      	cmp	r2, r3
     d3e:	d326      	bcc.n	d8e <Scheduler_ReloadTimer+0x82>
     d40:	4b19      	ldr	r3, [pc, #100]	; (da8 <Scheduler_ReloadTimer+0x9c>)
     d42:	681b      	ldr	r3, [r3, #0]
     d44:	681a      	ldr	r2, [r3, #0]
     d46:	9b00      	ldr	r3, [sp, #0]
     d48:	fbb3 f1f2 	udiv	r1, r3, r2
     d4c:	fb01 f202 	mul.w	r2, r1, r2
     d50:	1a9b      	subs	r3, r3, r2
     d52:	2b00      	cmp	r3, #0
     d54:	d11b      	bne.n	d8e <Scheduler_ReloadTimer+0x82>
            SchedulerCtrl_Ptr->TimerTimeout[ Timer - 1 ] = NewTimeout;
     d56:	4b15      	ldr	r3, [pc, #84]	; (dac <Scheduler_ReloadTimer+0xa0>)
     d58:	681b      	ldr	r3, [r3, #0]
     d5a:	f89d 2007 	ldrb.w	r2, [sp, #7]
     d5e:	3a01      	subs	r2, #1
     d60:	3204      	adds	r2, #4
     d62:	9900      	ldr	r1, [sp, #0]
     d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            SchedulerCtrl_Ptr->TimerCount[ Timer - 1 ]  = NewTimeout; //reseting timer to new reference value.
     d68:	4b10      	ldr	r3, [pc, #64]	; (dac <Scheduler_ReloadTimer+0xa0>)
     d6a:	681a      	ldr	r2, [r3, #0]
     d6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d70:	3b01      	subs	r3, #1
     d72:	3304      	adds	r3, #4
     d74:	009b      	lsls	r3, r3, #2
     d76:	4413      	add	r3, r2
     d78:	9a00      	ldr	r2, [sp, #0]
     d7a:	605a      	str	r2, [r3, #4]
            Scheduler_StartTimer( Timer );
     d7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d80:	4618      	mov	r0, r3
     d82:	f7ff ff21 	bl	bc8 <Scheduler_StartTimer>
            status = TRUE;
     d86:	2301      	movs	r3, #1
     d88:	f88d 300f 	strb.w	r3, [sp, #15]
        if ( ( NewTimeout >= SchedulerConfig_Ptr->Tick ) && ( NewTimeout % SchedulerConfig_Ptr->Tick == 0 ) ) { //valid timeout.
     d8c:	e006      	b.n	d9c <Scheduler_ReloadTimer+0x90>
        }

        else {
            status = FALSE; //Invalid timeout.
     d8e:	2300      	movs	r3, #0
     d90:	f88d 300f 	strb.w	r3, [sp, #15]
        if ( ( NewTimeout >= SchedulerConfig_Ptr->Tick ) && ( NewTimeout % SchedulerConfig_Ptr->Tick == 0 ) ) { //valid timeout.
     d94:	e002      	b.n	d9c <Scheduler_ReloadTimer+0x90>
        }
     }

    else {
        status = FALSE; //invalid ID.
     d96:	2300      	movs	r3, #0
     d98:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    return status;
     d9c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     da0:	4618      	mov	r0, r3
     da2:	b005      	add	sp, #20
     da4:	f85d fb04 	ldr.w	pc, [sp], #4
     da8:	1fff8b38 	.word	0x1fff8b38
     dac:	1fff8b3c 	.word	0x1fff8b3c

00000db0 <Scheduler_MainFunction>:
 *
 * @note At least 1 timer and 1 task needs to be register in order to the scheduler to work.
 * @note After a timer reaches 0 is important to restart, stop or reload that timer else it will still decrement --> risk of overflow.
 * @note It´s important that previous to using the scheduler the buffers for the timers and task must be correctly defined, specially their flags.
 */
void Scheduler_MainFunction( void ) {
     db0:	b500      	push	{lr}
     db2:	b085      	sub	sp, #20
    //local data
    uint32 tick_value = OsIf_MicrosToTicks( SchedulerConfig_Ptr->Tick * 1000, OSIF_COUNTER_SYSTEM );    //Translating tick value from us to counter increments.
     db4:	4b5e      	ldr	r3, [pc, #376]	; (f30 <Scheduler_MainFunction+0x180>)
     db6:	681b      	ldr	r3, [r3, #0]
     db8:	681b      	ldr	r3, [r3, #0]
     dba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     dbe:	fb02 f303 	mul.w	r3, r2, r3
     dc2:	2101      	movs	r1, #1
     dc4:	4618      	mov	r0, r3
     dc6:	f000 fa92 	bl	12ee <OsIf_MicrosToTicks>
     dca:	9001      	str	r0, [sp, #4]
    uint32 count_value = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );    //First counter value capture.
     dcc:	2001      	movs	r0, #1
     dce:	f000 fa42 	bl	1256 <OsIf_GetCounter>
     dd2:	4603      	mov	r3, r0
     dd4:	9300      	str	r3, [sp, #0]
    uint32 elapsed_time = 0;    //Time follow up for tick (timer increments).
     dd6:	2300      	movs	r3, #0
     dd8:	9303      	str	r3, [sp, #12]
    uint8 i = 0;
     dda:	2300      	movs	r3, #0
     ddc:	f88d 300b 	strb.w	r3, [sp, #11]

    while( 1 ) {    //tasks are executed during timeout.
        //Time follow up update for tick.
        elapsed_time += OsIf_GetElapsed( &count_value, OSIF_COUNTER_SYSTEM );   //time capture update
     de0:	466b      	mov	r3, sp
     de2:	2101      	movs	r1, #1
     de4:	4618      	mov	r0, r3
     de6:	f000 fa4f 	bl	1288 <OsIf_GetElapsed>
     dea:	4602      	mov	r2, r0
     dec:	9b03      	ldr	r3, [sp, #12]
     dee:	4413      	add	r3, r2
     df0:	9303      	str	r3, [sp, #12]
        
        //Verifying if a scheduler´s tick has occurred.
        if ( elapsed_time >= tick_value ) {          
     df2:	9a03      	ldr	r2, [sp, #12]
     df4:	9b01      	ldr	r3, [sp, #4]
     df6:	429a      	cmp	r2, r3
     df8:	d3f2      	bcc.n	de0 <Scheduler_MainFunction+0x30>
            
            //Executing timers
            for ( i = 0; i < SchedulerConfig_Ptr->Timers; i++ ) {
     dfa:	2300      	movs	r3, #0
     dfc:	f88d 300b 	strb.w	r3, [sp, #11]
     e00:	e03a      	b.n	e78 <Scheduler_MainFunction+0xc8>
                //Verifying execution of timer i
                if ( Bfx_GetBit_u32u8_u8( SchedulerCtrl_Ptr->TimerFlags, i ) == TRUE ) {    //timer activated
     e02:	4b4c      	ldr	r3, [pc, #304]	; (f34 <Scheduler_MainFunction+0x184>)
     e04:	681b      	ldr	r3, [r3, #0]
     e06:	69db      	ldr	r3, [r3, #28]
     e08:	f89d 200b 	ldrb.w	r2, [sp, #11]
     e0c:	4611      	mov	r1, r2
     e0e:	4618      	mov	r0, r3
     e10:	f7ff fdcb 	bl	9aa <Bfx_GetBit_u32u8_u8>
     e14:	4603      	mov	r3, r0
     e16:	2b00      	cmp	r3, #0
     e18:	d029      	beq.n	e6e <Scheduler_MainFunction+0xbe>
                    SchedulerCtrl_Ptr->TimerCount[i] -= SchedulerConfig_Ptr->Tick;    //decrement
     e1a:	4b46      	ldr	r3, [pc, #280]	; (f34 <Scheduler_MainFunction+0x184>)
     e1c:	681a      	ldr	r2, [r3, #0]
     e1e:	f89d 300b 	ldrb.w	r3, [sp, #11]
     e22:	3304      	adds	r3, #4
     e24:	009b      	lsls	r3, r3, #2
     e26:	4413      	add	r3, r2
     e28:	6858      	ldr	r0, [r3, #4]
     e2a:	4b41      	ldr	r3, [pc, #260]	; (f30 <Scheduler_MainFunction+0x180>)
     e2c:	681b      	ldr	r3, [r3, #0]
     e2e:	681a      	ldr	r2, [r3, #0]
     e30:	4b40      	ldr	r3, [pc, #256]	; (f34 <Scheduler_MainFunction+0x184>)
     e32:	6819      	ldr	r1, [r3, #0]
     e34:	f89d 300b 	ldrb.w	r3, [sp, #11]
     e38:	1a82      	subs	r2, r0, r2
     e3a:	3304      	adds	r3, #4
     e3c:	009b      	lsls	r3, r3, #2
     e3e:	440b      	add	r3, r1
     e40:	605a      	str	r2, [r3, #4]
                    
                    //Verifying execution of callback i
                    if ( Scheduler_GetTimer( i + 1 ) == 0 ) {   //timeout achieved.
     e42:	f89d 300b 	ldrb.w	r3, [sp, #11]
     e46:	3301      	adds	r3, #1
     e48:	b2db      	uxtb	r3, r3
     e4a:	4618      	mov	r0, r3
     e4c:	f7ff ff38 	bl	cc0 <Scheduler_GetTimer>
     e50:	4603      	mov	r3, r0
     e52:	2b00      	cmp	r3, #0
     e54:	d10b      	bne.n	e6e <Scheduler_MainFunction+0xbe>
                        SchedulerConfig_Ptr->TimerPtr[i].CallbackFunc();
     e56:	4b36      	ldr	r3, [pc, #216]	; (f30 <Scheduler_MainFunction+0x180>)
     e58:	681b      	ldr	r3, [r3, #0]
     e5a:	6919      	ldr	r1, [r3, #16]
     e5c:	f89d 200b 	ldrb.w	r2, [sp, #11]
     e60:	4613      	mov	r3, r2
     e62:	005b      	lsls	r3, r3, #1
     e64:	4413      	add	r3, r2
     e66:	009b      	lsls	r3, r3, #2
     e68:	440b      	add	r3, r1
     e6a:	689b      	ldr	r3, [r3, #8]
     e6c:	4798      	blx	r3
            for ( i = 0; i < SchedulerConfig_Ptr->Timers; i++ ) {
     e6e:	f89d 300b 	ldrb.w	r3, [sp, #11]
     e72:	3301      	adds	r3, #1
     e74:	f88d 300b 	strb.w	r3, [sp, #11]
     e78:	4b2d      	ldr	r3, [pc, #180]	; (f30 <Scheduler_MainFunction+0x180>)
     e7a:	681b      	ldr	r3, [r3, #0]
     e7c:	7b1b      	ldrb	r3, [r3, #12]
     e7e:	f89d 200b 	ldrb.w	r2, [sp, #11]
     e82:	429a      	cmp	r2, r3
     e84:	d3bd      	bcc.n	e02 <Scheduler_MainFunction+0x52>
                    }
                }
            }

            //Executing tasks.
            for ( i = 0; i < SchedulerConfig_Ptr->Tasks; i++ ) {
     e86:	2300      	movs	r3, #0
     e88:	f88d 300b 	strb.w	r3, [sp, #11]
     e8c:	e045      	b.n	f1a <Scheduler_MainFunction+0x16a>
                //Verifying execution of task i
                if ( Bfx_GetBit_u32u8_u8( SchedulerCtrl_Ptr->TaskFlags, i ) == TRUE ) {
     e8e:	4b29      	ldr	r3, [pc, #164]	; (f34 <Scheduler_MainFunction+0x184>)
     e90:	681b      	ldr	r3, [r3, #0]
     e92:	699b      	ldr	r3, [r3, #24]
     e94:	f89d 200b 	ldrb.w	r2, [sp, #11]
     e98:	4611      	mov	r1, r2
     e9a:	4618      	mov	r0, r3
     e9c:	f7ff fd85 	bl	9aa <Bfx_GetBit_u32u8_u8>
     ea0:	4603      	mov	r3, r0
     ea2:	2b00      	cmp	r3, #0
     ea4:	d034      	beq.n	f10 <Scheduler_MainFunction+0x160>
                    SchedulerCtrl_Ptr->TaskElapsed[i] += SchedulerConfig_Ptr->Tick;   //Time follow-up update for task i.
     ea6:	4b23      	ldr	r3, [pc, #140]	; (f34 <Scheduler_MainFunction+0x184>)
     ea8:	681b      	ldr	r3, [r3, #0]
     eaa:	f89d 200b 	ldrb.w	r2, [sp, #11]
     eae:	3202      	adds	r2, #2
     eb0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
     eb4:	4b1e      	ldr	r3, [pc, #120]	; (f30 <Scheduler_MainFunction+0x180>)
     eb6:	681b      	ldr	r3, [r3, #0]
     eb8:	6819      	ldr	r1, [r3, #0]
     eba:	4b1e      	ldr	r3, [pc, #120]	; (f34 <Scheduler_MainFunction+0x184>)
     ebc:	681b      	ldr	r3, [r3, #0]
     ebe:	f89d 200b 	ldrb.w	r2, [sp, #11]
     ec2:	4401      	add	r1, r0
     ec4:	3202      	adds	r2, #2
     ec6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                
                    //Verifying the execution of callback i.
                    if ( SchedulerCtrl_Ptr->TaskElapsed[i] >= SchedulerCtrl_Ptr->TaskPeriod[i] ) {  //periodicity achieved.
     eca:	4b1a      	ldr	r3, [pc, #104]	; (f34 <Scheduler_MainFunction+0x184>)
     ecc:	681b      	ldr	r3, [r3, #0]
     ece:	f89d 200b 	ldrb.w	r2, [sp, #11]
     ed2:	3202      	adds	r2, #2
     ed4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
     ed8:	4b16      	ldr	r3, [pc, #88]	; (f34 <Scheduler_MainFunction+0x184>)
     eda:	681b      	ldr	r3, [r3, #0]
     edc:	f89d 100b 	ldrb.w	r1, [sp, #11]
     ee0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
     ee4:	429a      	cmp	r2, r3
     ee6:	d313      	bcc.n	f10 <Scheduler_MainFunction+0x160>
                        SchedulerConfig_Ptr->TaskPtr[i].TaskFunc();
     ee8:	4b11      	ldr	r3, [pc, #68]	; (f30 <Scheduler_MainFunction+0x180>)
     eea:	681b      	ldr	r3, [r3, #0]
     eec:	6899      	ldr	r1, [r3, #8]
     eee:	f89d 200b 	ldrb.w	r2, [sp, #11]
     ef2:	4613      	mov	r3, r2
     ef4:	005b      	lsls	r3, r3, #1
     ef6:	4413      	add	r3, r2
     ef8:	009b      	lsls	r3, r3, #2
     efa:	440b      	add	r3, r1
     efc:	689b      	ldr	r3, [r3, #8]
     efe:	4798      	blx	r3
                        SchedulerCtrl_Ptr->TaskElapsed[i] = 0;  //Time follow-up reset for task i.
     f00:	4b0c      	ldr	r3, [pc, #48]	; (f34 <Scheduler_MainFunction+0x184>)
     f02:	681b      	ldr	r3, [r3, #0]
     f04:	f89d 200b 	ldrb.w	r2, [sp, #11]
     f08:	3202      	adds	r2, #2
     f0a:	2100      	movs	r1, #0
     f0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for ( i = 0; i < SchedulerConfig_Ptr->Tasks; i++ ) {
     f10:	f89d 300b 	ldrb.w	r3, [sp, #11]
     f14:	3301      	adds	r3, #1
     f16:	f88d 300b 	strb.w	r3, [sp, #11]
     f1a:	4b05      	ldr	r3, [pc, #20]	; (f30 <Scheduler_MainFunction+0x180>)
     f1c:	681b      	ldr	r3, [r3, #0]
     f1e:	791b      	ldrb	r3, [r3, #4]
     f20:	f89d 200b 	ldrb.w	r2, [sp, #11]
     f24:	429a      	cmp	r2, r3
     f26:	d3b2      	bcc.n	e8e <Scheduler_MainFunction+0xde>
                    }
                }
            }

            elapsed_time = 0;   //Reset time follow up for tick.
     f28:	2300      	movs	r3, #0
     f2a:	9303      	str	r3, [sp, #12]
        elapsed_time += OsIf_GetElapsed( &count_value, OSIF_COUNTER_SYSTEM );   //time capture update
     f2c:	e758      	b.n	de0 <Scheduler_MainFunction+0x30>
     f2e:	bf00      	nop
     f30:	1fff8b38 	.word	0x1fff8b38
     f34:	1fff8b3c 	.word	0x1fff8b3c

00000f38 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     f38:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     f3a:	2300      	movs	r3, #0
     f3c:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     f3e:	2300      	movs	r3, #0
     f40:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     f42:	2300      	movs	r3, #0
     f44:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     f46:	2300      	movs	r3, #0
     f48:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     f4a:	4b44      	ldr	r3, [pc, #272]	; (105c <init_data_bss+0x124>)
     f4c:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     f4e:	4b44      	ldr	r3, [pc, #272]	; (1060 <init_data_bss+0x128>)
     f50:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     f52:	9b05      	ldr	r3, [sp, #20]
     f54:	681b      	ldr	r3, [r3, #0]
     f56:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     f58:	9b05      	ldr	r3, [sp, #20]
     f5a:	3304      	adds	r3, #4
     f5c:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     f5e:	9b05      	ldr	r3, [sp, #20]
     f60:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     f62:	2300      	movs	r3, #0
     f64:	9309      	str	r3, [sp, #36]	; 0x24
     f66:	e03d      	b.n	fe4 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
     f68:	9a09      	ldr	r2, [sp, #36]	; 0x24
     f6a:	4613      	mov	r3, r2
     f6c:	005b      	lsls	r3, r3, #1
     f6e:	4413      	add	r3, r2
     f70:	009b      	lsls	r3, r3, #2
     f72:	461a      	mov	r2, r3
     f74:	9b03      	ldr	r3, [sp, #12]
     f76:	4413      	add	r3, r2
     f78:	685b      	ldr	r3, [r3, #4]
     f7a:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     f7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     f7e:	4613      	mov	r3, r2
     f80:	005b      	lsls	r3, r3, #1
     f82:	4413      	add	r3, r2
     f84:	009b      	lsls	r3, r3, #2
     f86:	461a      	mov	r2, r3
     f88:	9b03      	ldr	r3, [sp, #12]
     f8a:	4413      	add	r3, r2
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     f90:	9a09      	ldr	r2, [sp, #36]	; 0x24
     f92:	4613      	mov	r3, r2
     f94:	005b      	lsls	r3, r3, #1
     f96:	4413      	add	r3, r2
     f98:	009b      	lsls	r3, r3, #2
     f9a:	461a      	mov	r2, r3
     f9c:	9b03      	ldr	r3, [sp, #12]
     f9e:	4413      	add	r3, r2
     fa0:	689b      	ldr	r3, [r3, #8]
     fa2:	4619      	mov	r1, r3
     fa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
     fa6:	4613      	mov	r3, r2
     fa8:	005b      	lsls	r3, r3, #1
     faa:	4413      	add	r3, r2
     fac:	009b      	lsls	r3, r3, #2
     fae:	461a      	mov	r2, r3
     fb0:	9b03      	ldr	r3, [sp, #12]
     fb2:	4413      	add	r3, r2
     fb4:	685b      	ldr	r3, [r3, #4]
     fb6:	1acb      	subs	r3, r1, r3
     fb8:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     fba:	2300      	movs	r3, #0
     fbc:	9308      	str	r3, [sp, #32]
     fbe:	e00a      	b.n	fd6 <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
     fc0:	9a00      	ldr	r2, [sp, #0]
     fc2:	9b08      	ldr	r3, [sp, #32]
     fc4:	441a      	add	r2, r3
     fc6:	9901      	ldr	r1, [sp, #4]
     fc8:	9b08      	ldr	r3, [sp, #32]
     fca:	440b      	add	r3, r1
     fcc:	7812      	ldrb	r2, [r2, #0]
     fce:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     fd0:	9b08      	ldr	r3, [sp, #32]
     fd2:	3301      	adds	r3, #1
     fd4:	9308      	str	r3, [sp, #32]
     fd6:	9a08      	ldr	r2, [sp, #32]
     fd8:	9b06      	ldr	r3, [sp, #24]
     fda:	429a      	cmp	r2, r3
     fdc:	d3f0      	bcc.n	fc0 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
     fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
     fe0:	3301      	adds	r3, #1
     fe2:	9309      	str	r3, [sp, #36]	; 0x24
     fe4:	9a09      	ldr	r2, [sp, #36]	; 0x24
     fe6:	9b07      	ldr	r3, [sp, #28]
     fe8:	429a      	cmp	r2, r3
     fea:	d3bd      	bcc.n	f68 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     fec:	9b04      	ldr	r3, [sp, #16]
     fee:	681b      	ldr	r3, [r3, #0]
     ff0:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     ff2:	9b04      	ldr	r3, [sp, #16]
     ff4:	3304      	adds	r3, #4
     ff6:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     ff8:	9b04      	ldr	r3, [sp, #16]
     ffa:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     ffc:	2300      	movs	r3, #0
     ffe:	9309      	str	r3, [sp, #36]	; 0x24
    1000:	e024      	b.n	104c <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
    1002:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1004:	00db      	lsls	r3, r3, #3
    1006:	9a02      	ldr	r2, [sp, #8]
    1008:	4413      	add	r3, r2
    100a:	681b      	ldr	r3, [r3, #0]
    100c:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
    100e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1010:	00db      	lsls	r3, r3, #3
    1012:	9a02      	ldr	r2, [sp, #8]
    1014:	4413      	add	r3, r2
    1016:	685b      	ldr	r3, [r3, #4]
    1018:	4619      	mov	r1, r3
    101a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    101c:	00db      	lsls	r3, r3, #3
    101e:	9a02      	ldr	r2, [sp, #8]
    1020:	4413      	add	r3, r2
    1022:	681b      	ldr	r3, [r3, #0]
    1024:	1acb      	subs	r3, r1, r3
    1026:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    1028:	2300      	movs	r3, #0
    102a:	9308      	str	r3, [sp, #32]
    102c:	e007      	b.n	103e <init_data_bss+0x106>
        {
            ram[j] = 0U;
    102e:	9a01      	ldr	r2, [sp, #4]
    1030:	9b08      	ldr	r3, [sp, #32]
    1032:	4413      	add	r3, r2
    1034:	2200      	movs	r2, #0
    1036:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    1038:	9b08      	ldr	r3, [sp, #32]
    103a:	3301      	adds	r3, #1
    103c:	9308      	str	r3, [sp, #32]
    103e:	9a08      	ldr	r2, [sp, #32]
    1040:	9b06      	ldr	r3, [sp, #24]
    1042:	429a      	cmp	r2, r3
    1044:	d3f3      	bcc.n	102e <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
    1046:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1048:	3301      	adds	r3, #1
    104a:	9309      	str	r3, [sp, #36]	; 0x24
    104c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    104e:	9b07      	ldr	r3, [sp, #28]
    1050:	429a      	cmp	r2, r3
    1052:	d3d6      	bcc.n	1002 <init_data_bss+0xca>
        }
    }
}
    1054:	bf00      	nop
    1056:	bf00      	nop
    1058:	b00a      	add	sp, #40	; 0x28
    105a:	4770      	bx	lr
    105c:	00008704 	.word	0x00008704
    1060:	00008720 	.word	0x00008720

00001064 <sys_m4_cache_init>:
{
    1064:	b084      	sub	sp, #16
    1066:	4603      	mov	r3, r0
    1068:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
    106c:	2300      	movs	r3, #0
    106e:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
    1072:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1076:	2b00      	cmp	r3, #0
    1078:	d118      	bne.n	10ac <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
    107a:	4b10      	ldr	r3, [pc, #64]	; (10bc <sys_m4_cache_init+0x58>)
    107c:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
    1080:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
    1082:	4b0e      	ldr	r3, [pc, #56]	; (10bc <sys_m4_cache_init+0x58>)
    1084:	681b      	ldr	r3, [r3, #0]
    1086:	4a0d      	ldr	r2, [pc, #52]	; (10bc <sys_m4_cache_init+0x58>)
    1088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    108c:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
    108e:	bf00      	nop
    1090:	4b0a      	ldr	r3, [pc, #40]	; (10bc <sys_m4_cache_init+0x58>)
    1092:	681b      	ldr	r3, [r3, #0]
    1094:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    1098:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    109c:	d0f8      	beq.n	1090 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
    109e:	4b07      	ldr	r3, [pc, #28]	; (10bc <sys_m4_cache_init+0x58>)
    10a0:	681b      	ldr	r3, [r3, #0]
    10a2:	4a06      	ldr	r2, [pc, #24]	; (10bc <sys_m4_cache_init+0x58>)
    10a4:	f043 0301 	orr.w	r3, r3, #1
    10a8:	6013      	str	r3, [r2, #0]
    10aa:	e002      	b.n	10b2 <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
    10ac:	2301      	movs	r3, #1
    10ae:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
    10b2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    10b6:	4618      	mov	r0, r3
    10b8:	b004      	add	sp, #16
    10ba:	4770      	bx	lr
    10bc:	e0082000 	.word	0xe0082000

000010c0 <startup_go_to_user_mode>:
}
    10c0:	bf00      	nop
    10c2:	4770      	bx	lr

000010c4 <Sys_GetCoreID>:
    return 0U;
    10c4:	2300      	movs	r3, #0
}
    10c6:	4618      	mov	r0, r3
    10c8:	4770      	bx	lr

000010ca <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
    10ca:	e7fe      	b.n	10ca <HardFault_Handler>

000010cc <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
    10cc:	e7fe      	b.n	10cc <MemManage_Handler>

000010ce <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
    10ce:	e7fe      	b.n	10ce <BusFault_Handler>

000010d0 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
    10d0:	e7fe      	b.n	10d0 <UsageFault_Handler>

000010d2 <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
    10d2:	e7fe      	b.n	10d2 <SVC_Handler>

000010d4 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
    10d4:	e7fe      	b.n	10d4 <DebugMon_Handler>

000010d6 <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
    10d6:	e7fe      	b.n	10d6 <PendSV_Handler>

000010d8 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
    10d8:	e7fe      	b.n	10d8 <SysTick_Handler>

000010da <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
    10da:	e7fe      	b.n	10da <undefined_handler>

000010dc <MCU_clocks>:
 *  -SIRCDIV1_CLK -->1 Mhz.
 *  -SIRCDIV2_CLK -->Disabled
 *  -SOSCDIV1_CLK  -->Disabled
 *  -SOSCDIV2_CLK  -->Disabled
 */
void MCU_clocks( void ) {
    10dc:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );//Initializing MCU driver
    10de:	4805      	ldr	r0, [pc, #20]	; (10f4 <MCU_clocks+0x18>)
    10e0:	f003 fe46 	bl	4d70 <Mcu_Init>
    Mcu_SetMode( Run_mode );//MCU on run mode.
    10e4:	2000      	movs	r0, #0
    10e6:	f003 febb 	bl	4e60 <Mcu_SetMode>
    Mcu_InitClock( Clocks_conf_0 );//Executing clock configurations established in container.
    10ea:	2000      	movs	r0, #0
    10ec:	f003 fe94 	bl	4e18 <Mcu_InitClock>
    
    //Configuring Pll clock.
    /*while ( Mcu_GetPllStatus() != MCU_PLL_LOCKED );//Waiting until PLL is locked.
    Mcu_DistributePllClock();//Executing pll clock configuration established in container.*/
}
    10f0:	bf00      	nop
    10f2:	bd08      	pop	{r3, pc}
    10f4:	000084a0 	.word	0x000084a0

000010f8 <EcuM_Init>:
 * @brief This function initialize the microcontroller and the peripherals
 * 
 * 
 */
void EcuM_Init( void )
{   
    10f8:	b508      	push	{r3, lr}
    MCU_clocks();
    10fa:	f7ff ffef 	bl	10dc <MCU_clocks>
    OsIf_Init( NULL_PTR );//Init Osif timer.
    10fe:	2000      	movs	r0, #0
    1100:	f000 f8a0 	bl	1244 <OsIf_Init>
    Port_Init( &Port_Config );//Init port driver and configuration.
    1104:	4802      	ldr	r0, [pc, #8]	; (1110 <EcuM_Init+0x18>)
    1106:	f004 fa35 	bl	5574 <Port_Init>
    110a:	bf00      	nop
    110c:	bd08      	pop	{r3, pc}
    110e:	bf00      	nop
    1110:	000086b8 	.word	0x000086b8

00001114 <DoubleClick_stMachine>:

/**
 * @brief This function is the double click state machine.
 * 
 */
void DoubleClick_stMachine( void ) {
    1114:	b508      	push	{r3, lr}
    //local data
    static uint8 state = IDLE;

    switch( state ) {
    1116:	4b3f      	ldr	r3, [pc, #252]	; (1214 <DoubleClick_stMachine+0x100>)
    1118:	781b      	ldrb	r3, [r3, #0]
    111a:	2b04      	cmp	r3, #4
    111c:	d86c      	bhi.n	11f8 <DoubleClick_stMachine+0xe4>
    111e:	a201      	add	r2, pc, #4	; (adr r2, 1124 <DoubleClick_stMachine+0x10>)
    1120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1124:	00001139 	.word	0x00001139
    1128:	00001157 	.word	0x00001157
    112c:	0000117d 	.word	0x0000117d
    1130:	000011b3 	.word	0x000011b3
    1134:	000011df 	.word	0x000011df
        case IDLE :
            //Checks if the button is pressed.
            if ( Dio_ReadChannel( DioConf_DioChannel_PTE12 ) == STD_LOW ) {
    1138:	208c      	movs	r0, #140	; 0x8c
    113a:	f004 ff2f 	bl	5f9c <Dio_ReadChannel>
    113e:	4603      	mov	r3, r0
    1140:	2b00      	cmp	r3, #0
    1142:	d15b      	bne.n	11fc <DoubleClick_stMachine+0xe8>
                Scheduler_ReloadTimer( SCHEDULER_TIMER1_ID, SCHEDULER_TIMER1_TIMEOUT_300MS );   //Starting timer 300ms.
    1144:	f44f 7196 	mov.w	r1, #300	; 0x12c
    1148:	2001      	movs	r0, #1
    114a:	f7ff fddf 	bl	d0c <Scheduler_ReloadTimer>
                state = SINGLE_PRESS;
    114e:	4b31      	ldr	r3, [pc, #196]	; (1214 <DoubleClick_stMachine+0x100>)
    1150:	2201      	movs	r2, #1
    1152:	701a      	strb	r2, [r3, #0]
            }
        break;
    1154:	e052      	b.n	11fc <DoubleClick_stMachine+0xe8>
        
        case SINGLE_PRESS :
            //Checking timer timeout.
            if ( Scheduler_GetTimer( SCHEDULER_TIMER1_ID ) == 0 ) {
    1156:	2001      	movs	r0, #1
    1158:	f7ff fdb2 	bl	cc0 <Scheduler_GetTimer>
    115c:	4603      	mov	r3, r0
    115e:	2b00      	cmp	r3, #0
    1160:	d102      	bne.n	1168 <DoubleClick_stMachine+0x54>
                state = HOLD;
    1162:	4b2c      	ldr	r3, [pc, #176]	; (1214 <DoubleClick_stMachine+0x100>)
    1164:	2204      	movs	r2, #4
    1166:	701a      	strb	r2, [r3, #0]
            }

            //Checking if the button is released.
            if ( Dio_ReadChannel( DioConf_DioChannel_PTE12 ) == STD_HIGH ) {
    1168:	208c      	movs	r0, #140	; 0x8c
    116a:	f004 ff17 	bl	5f9c <Dio_ReadChannel>
    116e:	4603      	mov	r3, r0
    1170:	2b01      	cmp	r3, #1
    1172:	d145      	bne.n	1200 <DoubleClick_stMachine+0xec>
                state = SINGLE_RELEASE;
    1174:	4b27      	ldr	r3, [pc, #156]	; (1214 <DoubleClick_stMachine+0x100>)
    1176:	2202      	movs	r2, #2
    1178:	701a      	strb	r2, [r3, #0]
            }
        break;
    117a:	e041      	b.n	1200 <DoubleClick_stMachine+0xec>
        
        case SINGLE_RELEASE :
            //Checking timer timeout.
            if ( Scheduler_GetTimer( SCHEDULER_TIMER1_ID ) == 0 ) { //Single click
    117c:	2001      	movs	r0, #1
    117e:	f7ff fd9f 	bl	cc0 <Scheduler_GetTimer>
    1182:	4603      	mov	r3, r0
    1184:	2b00      	cmp	r3, #0
    1186:	d105      	bne.n	1194 <DoubleClick_stMachine+0x80>
                click = SINGLE_CLICK;
    1188:	4b23      	ldr	r3, [pc, #140]	; (1218 <DoubleClick_stMachine+0x104>)
    118a:	2201      	movs	r2, #1
    118c:	701a      	strb	r2, [r3, #0]
                state = IDLE;
    118e:	4b21      	ldr	r3, [pc, #132]	; (1214 <DoubleClick_stMachine+0x100>)
    1190:	2200      	movs	r2, #0
    1192:	701a      	strb	r2, [r3, #0]
            }

            //Checks if the button is pressed.
            if ( Dio_ReadChannel( DioConf_DioChannel_PTE12 ) == STD_LOW ) {
    1194:	208c      	movs	r0, #140	; 0x8c
    1196:	f004 ff01 	bl	5f9c <Dio_ReadChannel>
    119a:	4603      	mov	r3, r0
    119c:	2b00      	cmp	r3, #0
    119e:	d131      	bne.n	1204 <DoubleClick_stMachine+0xf0>
                Scheduler_ReloadTimer( SCHEDULER_TIMER1_ID, SCHEDULER_TIMER1_TIMEOUT_300MS );   //Starting timer 300ms.
    11a0:	f44f 7196 	mov.w	r1, #300	; 0x12c
    11a4:	2001      	movs	r0, #1
    11a6:	f7ff fdb1 	bl	d0c <Scheduler_ReloadTimer>
                state = DOUBLE_PRESS;
    11aa:	4b1a      	ldr	r3, [pc, #104]	; (1214 <DoubleClick_stMachine+0x100>)
    11ac:	2203      	movs	r2, #3
    11ae:	701a      	strb	r2, [r3, #0]
            }
        break;
    11b0:	e028      	b.n	1204 <DoubleClick_stMachine+0xf0>
        
        case DOUBLE_PRESS :
            //Checking timer timeout.
            if ( Scheduler_GetTimer( SCHEDULER_TIMER1_ID ) == 0 ) {
    11b2:	2001      	movs	r0, #1
    11b4:	f7ff fd84 	bl	cc0 <Scheduler_GetTimer>
    11b8:	4603      	mov	r3, r0
    11ba:	2b00      	cmp	r3, #0
    11bc:	d102      	bne.n	11c4 <DoubleClick_stMachine+0xb0>
                state = HOLD;
    11be:	4b15      	ldr	r3, [pc, #84]	; (1214 <DoubleClick_stMachine+0x100>)
    11c0:	2204      	movs	r2, #4
    11c2:	701a      	strb	r2, [r3, #0]
            }

            //Checking if the button is released.
            if ( Dio_ReadChannel( DioConf_DioChannel_PTE12 ) == STD_HIGH ) {//Double click.
    11c4:	208c      	movs	r0, #140	; 0x8c
    11c6:	f004 fee9 	bl	5f9c <Dio_ReadChannel>
    11ca:	4603      	mov	r3, r0
    11cc:	2b01      	cmp	r3, #1
    11ce:	d11b      	bne.n	1208 <DoubleClick_stMachine+0xf4>
                click = DOUBLE_CLICK;
    11d0:	4b11      	ldr	r3, [pc, #68]	; (1218 <DoubleClick_stMachine+0x104>)
    11d2:	2202      	movs	r2, #2
    11d4:	701a      	strb	r2, [r3, #0]
                state = IDLE;
    11d6:	4b0f      	ldr	r3, [pc, #60]	; (1214 <DoubleClick_stMachine+0x100>)
    11d8:	2200      	movs	r2, #0
    11da:	701a      	strb	r2, [r3, #0]
            }
        break;
    11dc:	e014      	b.n	1208 <DoubleClick_stMachine+0xf4>
        
        case HOLD ://Hold click.
            //Checking if the button is released.
            if ( Dio_ReadChannel( DioConf_DioChannel_PTE12 ) == STD_HIGH ) {
    11de:	208c      	movs	r0, #140	; 0x8c
    11e0:	f004 fedc 	bl	5f9c <Dio_ReadChannel>
    11e4:	4603      	mov	r3, r0
    11e6:	2b01      	cmp	r3, #1
    11e8:	d110      	bne.n	120c <DoubleClick_stMachine+0xf8>
                click = HOLD_CLICK;
    11ea:	4b0b      	ldr	r3, [pc, #44]	; (1218 <DoubleClick_stMachine+0x104>)
    11ec:	2203      	movs	r2, #3
    11ee:	701a      	strb	r2, [r3, #0]
                state = IDLE;
    11f0:	4b08      	ldr	r3, [pc, #32]	; (1214 <DoubleClick_stMachine+0x100>)
    11f2:	2200      	movs	r2, #0
    11f4:	701a      	strb	r2, [r3, #0]
            }
        break;
    11f6:	e009      	b.n	120c <DoubleClick_stMachine+0xf8>
        
        default :
        break;
    11f8:	bf00      	nop
    11fa:	e008      	b.n	120e <DoubleClick_stMachine+0xfa>
        break;
    11fc:	bf00      	nop
    11fe:	e006      	b.n	120e <DoubleClick_stMachine+0xfa>
        break;
    1200:	bf00      	nop
    1202:	e004      	b.n	120e <DoubleClick_stMachine+0xfa>
        break;
    1204:	bf00      	nop
    1206:	e002      	b.n	120e <DoubleClick_stMachine+0xfa>
        break;
    1208:	bf00      	nop
    120a:	e000      	b.n	120e <DoubleClick_stMachine+0xfa>
        break;
    120c:	bf00      	nop
    }
}
    120e:	bf00      	nop
    1210:	bd08      	pop	{r3, pc}
    1212:	bf00      	nop
    1214:	1fff8e54 	.word	0x1fff8e54
    1218:	1fff8b40 	.word	0x1fff8b40

0000121c <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    121c:	2300      	movs	r3, #0
}
    121e:	4618      	mov	r0, r3
    1220:	4770      	bx	lr

00001222 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    1222:	b082      	sub	sp, #8
    1224:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    1226:	2301      	movs	r3, #1
}
    1228:	4618      	mov	r0, r3
    122a:	b002      	add	sp, #8
    122c:	4770      	bx	lr

0000122e <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    122e:	b082      	sub	sp, #8
    1230:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    1232:	bf00      	nop
    1234:	b002      	add	sp, #8
    1236:	4770      	bx	lr

00001238 <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    1238:	b082      	sub	sp, #8
    123a:	9001      	str	r0, [sp, #4]
    return Micros;
    123c:	9b01      	ldr	r3, [sp, #4]
}
    123e:	4618      	mov	r0, r3
    1240:	b002      	add	sp, #8
    1242:	4770      	bx	lr

00001244 <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    1244:	b500      	push	{lr}
    1246:	b083      	sub	sp, #12
    1248:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    124a:	f000 f86d 	bl	1328 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    124e:	bf00      	nop
    1250:	b003      	add	sp, #12
    1252:	f85d fb04 	ldr.w	pc, [sp], #4

00001256 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    1256:	b500      	push	{lr}
    1258:	b085      	sub	sp, #20
    125a:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    125c:	2300      	movs	r3, #0
    125e:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1260:	9b01      	ldr	r3, [sp, #4]
    1262:	2b00      	cmp	r3, #0
    1264:	d003      	beq.n	126e <OsIf_GetCounter+0x18>
    1266:	9b01      	ldr	r3, [sp, #4]
    1268:	2b01      	cmp	r3, #1
    126a:	d004      	beq.n	1276 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    126c:	e007      	b.n	127e <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    126e:	f7ff ffd5 	bl	121c <OsIf_Timer_Dummy_GetCounter>
    1272:	9003      	str	r0, [sp, #12]
            break;
    1274:	e003      	b.n	127e <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    1276:	f000 f873 	bl	1360 <OsIf_Timer_System_GetCounter>
    127a:	9003      	str	r0, [sp, #12]
            break;
    127c:	bf00      	nop
    }

    return Value;
    127e:	9b03      	ldr	r3, [sp, #12]
}
    1280:	4618      	mov	r0, r3
    1282:	b005      	add	sp, #20
    1284:	f85d fb04 	ldr.w	pc, [sp], #4

00001288 <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    1288:	b500      	push	{lr}
    128a:	b085      	sub	sp, #20
    128c:	9001      	str	r0, [sp, #4]
    128e:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1290:	2300      	movs	r3, #0
    1292:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1294:	9b00      	ldr	r3, [sp, #0]
    1296:	2b00      	cmp	r3, #0
    1298:	d003      	beq.n	12a2 <OsIf_GetElapsed+0x1a>
    129a:	9b00      	ldr	r3, [sp, #0]
    129c:	2b01      	cmp	r3, #1
    129e:	d005      	beq.n	12ac <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    12a0:	e009      	b.n	12b6 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    12a2:	9801      	ldr	r0, [sp, #4]
    12a4:	f7ff ffbd 	bl	1222 <OsIf_Timer_Dummy_GetElapsed>
    12a8:	9003      	str	r0, [sp, #12]
            break;
    12aa:	e004      	b.n	12b6 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    12ac:	9801      	ldr	r0, [sp, #4]
    12ae:	f000 f865 	bl	137c <OsIf_Timer_System_GetElapsed>
    12b2:	9003      	str	r0, [sp, #12]
            break;
    12b4:	bf00      	nop
    }

    return Value;
    12b6:	9b03      	ldr	r3, [sp, #12]
}
    12b8:	4618      	mov	r0, r3
    12ba:	b005      	add	sp, #20
    12bc:	f85d fb04 	ldr.w	pc, [sp], #4

000012c0 <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    12c0:	b500      	push	{lr}
    12c2:	b083      	sub	sp, #12
    12c4:	9001      	str	r0, [sp, #4]
    12c6:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    12c8:	9b00      	ldr	r3, [sp, #0]
    12ca:	2b00      	cmp	r3, #0
    12cc:	d003      	beq.n	12d6 <OsIf_SetTimerFrequency+0x16>
    12ce:	9b00      	ldr	r3, [sp, #0]
    12d0:	2b01      	cmp	r3, #1
    12d2:	d004      	beq.n	12de <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    12d4:	e007      	b.n	12e6 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    12d6:	9801      	ldr	r0, [sp, #4]
    12d8:	f7ff ffa9 	bl	122e <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    12dc:	e003      	b.n	12e6 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    12de:	9801      	ldr	r0, [sp, #4]
    12e0:	f000 f85c 	bl	139c <OsIf_Timer_System_SetTimerFrequency>
            break;
    12e4:	bf00      	nop
    }
}
    12e6:	bf00      	nop
    12e8:	b003      	add	sp, #12
    12ea:	f85d fb04 	ldr.w	pc, [sp], #4

000012ee <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    12ee:	b500      	push	{lr}
    12f0:	b085      	sub	sp, #20
    12f2:	9001      	str	r0, [sp, #4]
    12f4:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    12f6:	2300      	movs	r3, #0
    12f8:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    12fa:	9b00      	ldr	r3, [sp, #0]
    12fc:	2b00      	cmp	r3, #0
    12fe:	d003      	beq.n	1308 <OsIf_MicrosToTicks+0x1a>
    1300:	9b00      	ldr	r3, [sp, #0]
    1302:	2b01      	cmp	r3, #1
    1304:	d005      	beq.n	1312 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1306:	e009      	b.n	131c <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    1308:	9801      	ldr	r0, [sp, #4]
    130a:	f7ff ff95 	bl	1238 <OsIf_Timer_Dummy_MicrosToTicks>
    130e:	9003      	str	r0, [sp, #12]
            break;
    1310:	e004      	b.n	131c <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    1312:	9801      	ldr	r0, [sp, #4]
    1314:	f000 f850 	bl	13b8 <OsIf_Timer_System_MicrosToTicks>
    1318:	9003      	str	r0, [sp, #12]
            break;
    131a:	bf00      	nop
    }

    return Value;
    131c:	9b03      	ldr	r3, [sp, #12]
}
    131e:	4618      	mov	r0, r3
    1320:	b005      	add	sp, #20
    1322:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00001328 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    1328:	b500      	push	{lr}
    132a:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    132c:	2300      	movs	r3, #0
    132e:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    1330:	4a09      	ldr	r2, [pc, #36]	; (1358 <OsIf_Timer_System_Init+0x30>)
    1332:	9b01      	ldr	r3, [sp, #4]
    1334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1338:	685a      	ldr	r2, [r3, #4]
    133a:	4908      	ldr	r1, [pc, #32]	; (135c <OsIf_Timer_System_Init+0x34>)
    133c:	9b01      	ldr	r3, [sp, #4]
    133e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    1342:	4a06      	ldr	r2, [pc, #24]	; (135c <OsIf_Timer_System_Init+0x34>)
    1344:	9b01      	ldr	r3, [sp, #4]
    1346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    134a:	4618      	mov	r0, r3
    134c:	f000 f868 	bl	1420 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    1350:	bf00      	nop
    1352:	b003      	add	sp, #12
    1354:	f85d fb04 	ldr.w	pc, [sp], #4
    1358:	000084c4 	.word	0x000084c4
    135c:	1fff8b58 	.word	0x1fff8b58

00001360 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    1360:	b500      	push	{lr}
    1362:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    1364:	2300      	movs	r3, #0
    1366:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1368:	2300      	movs	r3, #0
    136a:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    136c:	f000 f86c 	bl	1448 <OsIf_Timer_System_Internal_GetCounter>
    1370:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    1372:	9b01      	ldr	r3, [sp, #4]
}
    1374:	4618      	mov	r0, r3
    1376:	b003      	add	sp, #12
    1378:	f85d fb04 	ldr.w	pc, [sp], #4

0000137c <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    137c:	b500      	push	{lr}
    137e:	b085      	sub	sp, #20
    1380:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    1382:	2300      	movs	r3, #0
    1384:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    1386:	2300      	movs	r3, #0
    1388:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    138a:	9801      	ldr	r0, [sp, #4]
    138c:	f000 f864 	bl	1458 <OsIf_Timer_System_Internal_GetElapsed>
    1390:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    1392:	9b03      	ldr	r3, [sp, #12]
}
    1394:	4618      	mov	r0, r3
    1396:	b005      	add	sp, #20
    1398:	f85d fb04 	ldr.w	pc, [sp], #4

0000139c <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    139c:	b084      	sub	sp, #16
    139e:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    13a0:	2300      	movs	r3, #0
    13a2:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    13a4:	4903      	ldr	r1, [pc, #12]	; (13b4 <OsIf_Timer_System_SetTimerFrequency+0x18>)
    13a6:	9b03      	ldr	r3, [sp, #12]
    13a8:	9a01      	ldr	r2, [sp, #4]
    13aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    13ae:	bf00      	nop
    13b0:	b004      	add	sp, #16
    13b2:	4770      	bx	lr
    13b4:	1fff8b58 	.word	0x1fff8b58

000013b8 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    13b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    13ba:	b087      	sub	sp, #28
    13bc:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    13be:	2100      	movs	r1, #0
    13c0:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    13c2:	2100      	movs	r1, #0
    13c4:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    13c6:	9901      	ldr	r1, [sp, #4]
    13c8:	2000      	movs	r0, #0
    13ca:	460e      	mov	r6, r1
    13cc:	4607      	mov	r7, r0
    13ce:	4812      	ldr	r0, [pc, #72]	; (1418 <OsIf_Timer_System_MicrosToTicks+0x60>)
    13d0:	9904      	ldr	r1, [sp, #16]
    13d2:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    13d6:	2000      	movs	r0, #0
    13d8:	460c      	mov	r4, r1
    13da:	4605      	mov	r5, r0
    13dc:	fb04 f007 	mul.w	r0, r4, r7
    13e0:	fb06 f105 	mul.w	r1, r6, r5
    13e4:	4401      	add	r1, r0
    13e6:	fba6 2304 	umull	r2, r3, r6, r4
    13ea:	4419      	add	r1, r3
    13ec:	460b      	mov	r3, r1
    13ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
    13f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    13f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    13fa:	4a08      	ldr	r2, [pc, #32]	; (141c <OsIf_Timer_System_MicrosToTicks+0x64>)
    13fc:	f04f 0300 	mov.w	r3, #0
    1400:	f7ff f8d0 	bl	5a4 <__aeabi_uldivmod>
    1404:	4602      	mov	r2, r0
    1406:	460b      	mov	r3, r1
    1408:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    140c:	9b02      	ldr	r3, [sp, #8]
    140e:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    1410:	9b05      	ldr	r3, [sp, #20]
}
    1412:	4618      	mov	r0, r3
    1414:	b007      	add	sp, #28
    1416:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1418:	1fff8b58 	.word	0x1fff8b58
    141c:	000f4240 	.word	0x000f4240

00001420 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    1420:	b082      	sub	sp, #8
    1422:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    1424:	4b07      	ldr	r3, [pc, #28]	; (1444 <OsIf_Timer_System_Internal_Init+0x24>)
    1426:	2200      	movs	r2, #0
    1428:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    142a:	4b06      	ldr	r3, [pc, #24]	; (1444 <OsIf_Timer_System_Internal_Init+0x24>)
    142c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1430:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    1432:	4b04      	ldr	r3, [pc, #16]	; (1444 <OsIf_Timer_System_Internal_Init+0x24>)
    1434:	2200      	movs	r2, #0
    1436:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    1438:	4b02      	ldr	r3, [pc, #8]	; (1444 <OsIf_Timer_System_Internal_Init+0x24>)
    143a:	2205      	movs	r2, #5
    143c:	601a      	str	r2, [r3, #0]
}
    143e:	bf00      	nop
    1440:	b002      	add	sp, #8
    1442:	4770      	bx	lr
    1444:	e000e010 	.word	0xe000e010

00001448 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    1448:	4b02      	ldr	r3, [pc, #8]	; (1454 <OsIf_Timer_System_Internal_GetCounter+0xc>)
    144a:	689b      	ldr	r3, [r3, #8]
    144c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    1450:	4618      	mov	r0, r3
    1452:	4770      	bx	lr
    1454:	e000e010 	.word	0xe000e010

00001458 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    1458:	b084      	sub	sp, #16
    145a:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    145c:	4b10      	ldr	r3, [pc, #64]	; (14a0 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    145e:	689b      	ldr	r3, [r3, #8]
    1460:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1464:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    1466:	2300      	movs	r3, #0
    1468:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    146a:	9b01      	ldr	r3, [sp, #4]
    146c:	681b      	ldr	r3, [r3, #0]
    146e:	9a02      	ldr	r2, [sp, #8]
    1470:	429a      	cmp	r2, r3
    1472:	d909      	bls.n	1488 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    1474:	9b01      	ldr	r3, [sp, #4]
    1476:	681a      	ldr	r2, [r3, #0]
    1478:	9b02      	ldr	r3, [sp, #8]
    147a:	1ad3      	subs	r3, r2, r3
    147c:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    1480:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    1484:	9303      	str	r3, [sp, #12]
    1486:	e004      	b.n	1492 <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    1488:	9b01      	ldr	r3, [sp, #4]
    148a:	681a      	ldr	r2, [r3, #0]
    148c:	9b02      	ldr	r3, [sp, #8]
    148e:	1ad3      	subs	r3, r2, r3
    1490:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    1492:	9b01      	ldr	r3, [sp, #4]
    1494:	9a02      	ldr	r2, [sp, #8]
    1496:	601a      	str	r2, [r3, #0]

    return dif;
    1498:	9b03      	ldr	r3, [sp, #12]
}
    149a:	4618      	mov	r0, r3
    149c:	b004      	add	sp, #16
    149e:	4770      	bx	lr
    14a0:	e000e010 	.word	0xe000e010

000014a4 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    14a4:	b082      	sub	sp, #8
    14a6:	9001      	str	r0, [sp, #4]
    14a8:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    14aa:	bf00      	nop
    14ac:	b002      	add	sp, #8
    14ae:	4770      	bx	lr

000014b0 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    14b0:	b500      	push	{lr}
    14b2:	b085      	sub	sp, #20
    14b4:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    14b6:	4b24      	ldr	r3, [pc, #144]	; (1548 <Clock_Ip_UpdateDriverContext+0x98>)
    14b8:	2201      	movs	r2, #1
    14ba:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    14bc:	4b23      	ldr	r3, [pc, #140]	; (154c <Clock_Ip_UpdateDriverContext+0x9c>)
    14be:	681b      	ldr	r3, [r3, #0]
    14c0:	2102      	movs	r1, #2
    14c2:	4618      	mov	r0, r3
    14c4:	f003 fc32 	bl	4d2c <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    14c8:	2300      	movs	r3, #0
    14ca:	f88d 300f 	strb.w	r3, [sp, #15]
    14ce:	e015      	b.n	14fc <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    14d0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    14d4:	9a01      	ldr	r2, [sp, #4]
    14d6:	334a      	adds	r3, #74	; 0x4a
    14d8:	00db      	lsls	r3, r3, #3
    14da:	4413      	add	r3, r2
    14dc:	6858      	ldr	r0, [r3, #4]
    14de:	f89d 300f 	ldrb.w	r3, [sp, #15]
    14e2:	9a01      	ldr	r2, [sp, #4]
    14e4:	334a      	adds	r3, #74	; 0x4a
    14e6:	00db      	lsls	r3, r3, #3
    14e8:	4413      	add	r3, r2
    14ea:	689b      	ldr	r3, [r3, #8]
    14ec:	4619      	mov	r1, r3
    14ee:	f001 fadc 	bl	2aaa <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    14f2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    14f6:	3301      	adds	r3, #1
    14f8:	f88d 300f 	strb.w	r3, [sp, #15]
    14fc:	9b01      	ldr	r3, [sp, #4]
    14fe:	7bdb      	ldrb	r3, [r3, #15]
    1500:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1504:	429a      	cmp	r2, r3
    1506:	d3e3      	bcc.n	14d0 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    1508:	f000 f824 	bl	1554 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    150c:	2301      	movs	r3, #1
    150e:	f88d 300f 	strb.w	r3, [sp, #15]
    1512:	e00e      	b.n	1532 <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    1514:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1518:	9b01      	ldr	r3, [sp, #4]
    151a:	327e      	adds	r2, #126	; 0x7e
    151c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    1520:	490b      	ldr	r1, [pc, #44]	; (1550 <Clock_Ip_UpdateDriverContext+0xa0>)
    1522:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1526:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1528:	f89d 300f 	ldrb.w	r3, [sp, #15]
    152c:	3301      	adds	r3, #1
    152e:	f88d 300f 	strb.w	r3, [sp, #15]
    1532:	9b01      	ldr	r3, [sp, #4]
    1534:	7cdb      	ldrb	r3, [r3, #19]
    1536:	f89d 200f 	ldrb.w	r2, [sp, #15]
    153a:	429a      	cmp	r2, r3
    153c:	d3ea      	bcc.n	1514 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    153e:	bf00      	nop
    1540:	bf00      	nop
    1542:	b005      	add	sp, #20
    1544:	f85d fb04 	ldr.w	pc, [sp], #4
    1548:	1fff8b10 	.word	0x1fff8b10
    154c:	1fff8b5c 	.word	0x1fff8b5c
    1550:	1fff8b68 	.word	0x1fff8b68

00001554 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    1554:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    1556:	4b23      	ldr	r3, [pc, #140]	; (15e4 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1558:	781b      	ldrb	r3, [r3, #0]
    155a:	f083 0301 	eor.w	r3, r3, #1
    155e:	b2db      	uxtb	r3, r3
    1560:	2b00      	cmp	r3, #0
    1562:	d03d      	beq.n	15e0 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    1564:	4b1f      	ldr	r3, [pc, #124]	; (15e4 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1566:	2201      	movs	r2, #1
    1568:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    156a:	4b1f      	ldr	r3, [pc, #124]	; (15e8 <Clock_Ip_CallEmptyCallbacks+0x94>)
    156c:	685b      	ldr	r3, [r3, #4]
    156e:	2100      	movs	r1, #0
    1570:	2000      	movs	r0, #0
    1572:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    1574:	4b1c      	ldr	r3, [pc, #112]	; (15e8 <Clock_Ip_CallEmptyCallbacks+0x94>)
    1576:	689b      	ldr	r3, [r3, #8]
    1578:	2057      	movs	r0, #87	; 0x57
    157a:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    157c:	4b1b      	ldr	r3, [pc, #108]	; (15ec <Clock_Ip_CallEmptyCallbacks+0x98>)
    157e:	681b      	ldr	r3, [r3, #0]
    1580:	2000      	movs	r0, #0
    1582:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    1584:	4b1a      	ldr	r3, [pc, #104]	; (15f0 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    1586:	681b      	ldr	r3, [r3, #0]
    1588:	2000      	movs	r0, #0
    158a:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    158c:	4b19      	ldr	r3, [pc, #100]	; (15f4 <Clock_Ip_CallEmptyCallbacks+0xa0>)
    158e:	681b      	ldr	r3, [r3, #0]
    1590:	2000      	movs	r0, #0
    1592:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1594:	4b18      	ldr	r3, [pc, #96]	; (15f8 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1596:	685b      	ldr	r3, [r3, #4]
    1598:	2000      	movs	r0, #0
    159a:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    159c:	4b16      	ldr	r3, [pc, #88]	; (15f8 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    159e:	689b      	ldr	r3, [r3, #8]
    15a0:	2057      	movs	r0, #87	; 0x57
    15a2:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    15a4:	4b15      	ldr	r3, [pc, #84]	; (15fc <Clock_Ip_CallEmptyCallbacks+0xa8>)
    15a6:	681b      	ldr	r3, [r3, #0]
    15a8:	2000      	movs	r0, #0
    15aa:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    15ac:	4b13      	ldr	r3, [pc, #76]	; (15fc <Clock_Ip_CallEmptyCallbacks+0xa8>)
    15ae:	685b      	ldr	r3, [r3, #4]
    15b0:	2100      	movs	r1, #0
    15b2:	2057      	movs	r0, #87	; 0x57
    15b4:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    15b6:	4b12      	ldr	r3, [pc, #72]	; (1600 <Clock_Ip_CallEmptyCallbacks+0xac>)
    15b8:	681b      	ldr	r3, [r3, #0]
    15ba:	2000      	movs	r0, #0
    15bc:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    15be:	4b11      	ldr	r3, [pc, #68]	; (1604 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    15c0:	685b      	ldr	r3, [r3, #4]
    15c2:	2000      	movs	r0, #0
    15c4:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    15c6:	4b0f      	ldr	r3, [pc, #60]	; (1604 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    15c8:	689b      	ldr	r3, [r3, #8]
    15ca:	2057      	movs	r0, #87	; 0x57
    15cc:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    15ce:	4b0e      	ldr	r3, [pc, #56]	; (1608 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    15d0:	685b      	ldr	r3, [r3, #4]
    15d2:	2000      	movs	r0, #0
    15d4:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    15d6:	4b0d      	ldr	r3, [pc, #52]	; (160c <Clock_Ip_CallEmptyCallbacks+0xb8>)
    15d8:	681b      	ldr	r3, [r3, #0]
    15da:	2100      	movs	r1, #0
    15dc:	2000      	movs	r0, #0
    15de:	4798      	blx	r3
    }
}
    15e0:	bf00      	nop
    15e2:	bd08      	pop	{r3, pc}
    15e4:	1fff8b60 	.word	0x1fff8b60
    15e8:	00007f3c 	.word	0x00007f3c
    15ec:	00007e50 	.word	0x00007e50
    15f0:	00007e8c 	.word	0x00007e8c
    15f4:	00007e94 	.word	0x00007e94
    15f8:	00007ebc 	.word	0x00007ebc
    15fc:	00007ec8 	.word	0x00007ec8
    1600:	00007f00 	.word	0x00007f00
    1604:	00007f4c 	.word	0x00007f4c
    1608:	00007f78 	.word	0x00007f78
    160c:	00007f74 	.word	0x00007f74

00001610 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    1610:	b500      	push	{lr}
    1612:	b085      	sub	sp, #20
    1614:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1616:	9b01      	ldr	r3, [sp, #4]
    1618:	7adb      	ldrb	r3, [r3, #11]
    161a:	9303      	str	r3, [sp, #12]
    161c:	e01f      	b.n	165e <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    161e:	9b03      	ldr	r3, [sp, #12]
    1620:	1e5a      	subs	r2, r3, #1
    1622:	9b01      	ldr	r3, [sp, #4]
    1624:	320d      	adds	r2, #13
    1626:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    162a:	495a      	ldr	r1, [pc, #360]	; (1794 <Clock_Ip_ResetClockConfiguration+0x184>)
    162c:	4613      	mov	r3, r2
    162e:	00db      	lsls	r3, r3, #3
    1630:	4413      	add	r3, r2
    1632:	440b      	add	r3, r1
    1634:	3301      	adds	r3, #1
    1636:	781b      	ldrb	r3, [r3, #0]
    1638:	461a      	mov	r2, r3
    163a:	4b57      	ldr	r3, [pc, #348]	; (1798 <Clock_Ip_ResetClockConfiguration+0x188>)
    163c:	5c9b      	ldrb	r3, [r3, r2]
    163e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    1640:	4a56      	ldr	r2, [pc, #344]	; (179c <Clock_Ip_ResetClockConfiguration+0x18c>)
    1642:	9b02      	ldr	r3, [sp, #8]
    1644:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1648:	9a03      	ldr	r2, [sp, #12]
    164a:	3a01      	subs	r2, #1
    164c:	320d      	adds	r2, #13
    164e:	00d2      	lsls	r2, r2, #3
    1650:	9901      	ldr	r1, [sp, #4]
    1652:	440a      	add	r2, r1
    1654:	4610      	mov	r0, r2
    1656:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1658:	9b03      	ldr	r3, [sp, #12]
    165a:	3b01      	subs	r3, #1
    165c:	9303      	str	r3, [sp, #12]
    165e:	9b03      	ldr	r3, [sp, #12]
    1660:	2b00      	cmp	r3, #0
    1662:	d1dc      	bne.n	161e <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1664:	9b01      	ldr	r3, [sp, #4]
    1666:	7b9b      	ldrb	r3, [r3, #14]
    1668:	9303      	str	r3, [sp, #12]
    166a:	e026      	b.n	16ba <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    166c:	9b03      	ldr	r3, [sp, #12]
    166e:	3b01      	subs	r3, #1
    1670:	9a01      	ldr	r2, [sp, #4]
    1672:	3324      	adds	r3, #36	; 0x24
    1674:	011b      	lsls	r3, r3, #4
    1676:	4413      	add	r3, r2
    1678:	3304      	adds	r3, #4
    167a:	681a      	ldr	r2, [r3, #0]
    167c:	4945      	ldr	r1, [pc, #276]	; (1794 <Clock_Ip_ResetClockConfiguration+0x184>)
    167e:	4613      	mov	r3, r2
    1680:	00db      	lsls	r3, r3, #3
    1682:	4413      	add	r3, r2
    1684:	440b      	add	r3, r1
    1686:	3301      	adds	r3, #1
    1688:	781b      	ldrb	r3, [r3, #0]
    168a:	461a      	mov	r2, r3
    168c:	4b44      	ldr	r3, [pc, #272]	; (17a0 <Clock_Ip_ResetClockConfiguration+0x190>)
    168e:	5c9b      	ldrb	r3, [r3, r2]
    1690:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    1692:	4944      	ldr	r1, [pc, #272]	; (17a4 <Clock_Ip_ResetClockConfiguration+0x194>)
    1694:	9a02      	ldr	r2, [sp, #8]
    1696:	4613      	mov	r3, r2
    1698:	005b      	lsls	r3, r3, #1
    169a:	4413      	add	r3, r2
    169c:	009b      	lsls	r3, r3, #2
    169e:	440b      	add	r3, r1
    16a0:	681b      	ldr	r3, [r3, #0]
    16a2:	9a03      	ldr	r2, [sp, #12]
    16a4:	3a01      	subs	r2, #1
    16a6:	3224      	adds	r2, #36	; 0x24
    16a8:	0112      	lsls	r2, r2, #4
    16aa:	9901      	ldr	r1, [sp, #4]
    16ac:	440a      	add	r2, r1
    16ae:	3204      	adds	r2, #4
    16b0:	4610      	mov	r0, r2
    16b2:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    16b4:	9b03      	ldr	r3, [sp, #12]
    16b6:	3b01      	subs	r3, #1
    16b8:	9303      	str	r3, [sp, #12]
    16ba:	9b03      	ldr	r3, [sp, #12]
    16bc:	2b00      	cmp	r3, #0
    16be:	d1d5      	bne.n	166c <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    16c0:	9b01      	ldr	r3, [sp, #4]
    16c2:	7a9b      	ldrb	r3, [r3, #10]
    16c4:	9303      	str	r3, [sp, #12]
    16c6:	e02a      	b.n	171e <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    16c8:	9b03      	ldr	r3, [sp, #12]
    16ca:	1e5a      	subs	r2, r3, #1
    16cc:	9901      	ldr	r1, [sp, #4]
    16ce:	4613      	mov	r3, r2
    16d0:	009b      	lsls	r3, r3, #2
    16d2:	4413      	add	r3, r2
    16d4:	00db      	lsls	r3, r3, #3
    16d6:	440b      	add	r3, r1
    16d8:	3340      	adds	r3, #64	; 0x40
    16da:	681a      	ldr	r2, [r3, #0]
    16dc:	492d      	ldr	r1, [pc, #180]	; (1794 <Clock_Ip_ResetClockConfiguration+0x184>)
    16de:	4613      	mov	r3, r2
    16e0:	00db      	lsls	r3, r3, #3
    16e2:	4413      	add	r3, r2
    16e4:	440b      	add	r3, r1
    16e6:	3301      	adds	r3, #1
    16e8:	781b      	ldrb	r3, [r3, #0]
    16ea:	461a      	mov	r2, r3
    16ec:	4b2e      	ldr	r3, [pc, #184]	; (17a8 <Clock_Ip_ResetClockConfiguration+0x198>)
    16ee:	5c9b      	ldrb	r3, [r3, r2]
    16f0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    16f2:	492e      	ldr	r1, [pc, #184]	; (17ac <Clock_Ip_ResetClockConfiguration+0x19c>)
    16f4:	9a02      	ldr	r2, [sp, #8]
    16f6:	4613      	mov	r3, r2
    16f8:	009b      	lsls	r3, r3, #2
    16fa:	4413      	add	r3, r2
    16fc:	009b      	lsls	r3, r3, #2
    16fe:	440b      	add	r3, r1
    1700:	6819      	ldr	r1, [r3, #0]
    1702:	9b03      	ldr	r3, [sp, #12]
    1704:	1e5a      	subs	r2, r3, #1
    1706:	4613      	mov	r3, r2
    1708:	009b      	lsls	r3, r3, #2
    170a:	4413      	add	r3, r2
    170c:	00db      	lsls	r3, r3, #3
    170e:	3340      	adds	r3, #64	; 0x40
    1710:	9a01      	ldr	r2, [sp, #4]
    1712:	4413      	add	r3, r2
    1714:	4618      	mov	r0, r3
    1716:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1718:	9b03      	ldr	r3, [sp, #12]
    171a:	3b01      	subs	r3, #1
    171c:	9303      	str	r3, [sp, #12]
    171e:	9b03      	ldr	r3, [sp, #12]
    1720:	2b00      	cmp	r3, #0
    1722:	d1d1      	bne.n	16c8 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    1724:	9b01      	ldr	r3, [sp, #4]
    1726:	7a5b      	ldrb	r3, [r3, #9]
    1728:	9303      	str	r3, [sp, #12]
    172a:	e02b      	b.n	1784 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    172c:	9b03      	ldr	r3, [sp, #12]
    172e:	1e5a      	subs	r2, r3, #1
    1730:	9901      	ldr	r1, [sp, #4]
    1732:	4613      	mov	r3, r2
    1734:	009b      	lsls	r3, r3, #2
    1736:	4413      	add	r3, r2
    1738:	009b      	lsls	r3, r3, #2
    173a:	440b      	add	r3, r1
    173c:	332c      	adds	r3, #44	; 0x2c
    173e:	681a      	ldr	r2, [r3, #0]
    1740:	4914      	ldr	r1, [pc, #80]	; (1794 <Clock_Ip_ResetClockConfiguration+0x184>)
    1742:	4613      	mov	r3, r2
    1744:	00db      	lsls	r3, r3, #3
    1746:	4413      	add	r3, r2
    1748:	440b      	add	r3, r1
    174a:	3301      	adds	r3, #1
    174c:	781b      	ldrb	r3, [r3, #0]
    174e:	461a      	mov	r2, r3
    1750:	4b17      	ldr	r3, [pc, #92]	; (17b0 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    1752:	5c9b      	ldrb	r3, [r3, r2]
    1754:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    1756:	4917      	ldr	r1, [pc, #92]	; (17b4 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    1758:	9a02      	ldr	r2, [sp, #8]
    175a:	4613      	mov	r3, r2
    175c:	009b      	lsls	r3, r3, #2
    175e:	4413      	add	r3, r2
    1760:	009b      	lsls	r3, r3, #2
    1762:	440b      	add	r3, r1
    1764:	6819      	ldr	r1, [r3, #0]
    1766:	9b03      	ldr	r3, [sp, #12]
    1768:	1e5a      	subs	r2, r3, #1
    176a:	4613      	mov	r3, r2
    176c:	009b      	lsls	r3, r3, #2
    176e:	4413      	add	r3, r2
    1770:	009b      	lsls	r3, r3, #2
    1772:	3328      	adds	r3, #40	; 0x28
    1774:	9a01      	ldr	r2, [sp, #4]
    1776:	4413      	add	r3, r2
    1778:	3304      	adds	r3, #4
    177a:	4618      	mov	r0, r3
    177c:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    177e:	9b03      	ldr	r3, [sp, #12]
    1780:	3b01      	subs	r3, #1
    1782:	9303      	str	r3, [sp, #12]
    1784:	9b03      	ldr	r3, [sp, #12]
    1786:	2b00      	cmp	r3, #0
    1788:	d1d0      	bne.n	172c <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    178a:	bf00      	nop
    178c:	bf00      	nop
    178e:	b005      	add	sp, #20
    1790:	f85d fb04 	ldr.w	pc, [sp], #4
    1794:	00007940 	.word	0x00007940
    1798:	00007910 	.word	0x00007910
    179c:	00007f78 	.word	0x00007f78
    17a0:	000078f0 	.word	0x000078f0
    17a4:	00007ebc 	.word	0x00007ebc
    17a8:	00007900 	.word	0x00007900
    17ac:	00007f4c 	.word	0x00007f4c
    17b0:	000078c0 	.word	0x000078c0
    17b4:	00007e94 	.word	0x00007e94

000017b8 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    17b8:	b500      	push	{lr}
    17ba:	b085      	sub	sp, #20
    17bc:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    17be:	2301      	movs	r3, #1
    17c0:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    17c2:	9801      	ldr	r0, [sp, #4]
    17c4:	f000 f818 	bl	17f8 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    17c8:	4b0a      	ldr	r3, [pc, #40]	; (17f4 <Clock_Ip_Init+0x3c>)
    17ca:	781b      	ldrb	r3, [r3, #0]
    17cc:	2b00      	cmp	r3, #0
    17ce:	d00a      	beq.n	17e6 <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    17d0:	f000 fb74 	bl	1ebc <Clock_Ip_GetPllStatus>
    17d4:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    17d6:	9b02      	ldr	r3, [sp, #8]
    17d8:	2b00      	cmp	r3, #0
    17da:	d106      	bne.n	17ea <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    17dc:	f000 fbf2 	bl	1fc4 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    17e0:	2300      	movs	r3, #0
    17e2:	9303      	str	r3, [sp, #12]
    17e4:	e001      	b.n	17ea <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    17e6:	2300      	movs	r3, #0
    17e8:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    17ea:	9b03      	ldr	r3, [sp, #12]
}
    17ec:	4618      	mov	r0, r3
    17ee:	b005      	add	sp, #20
    17f0:	f85d fb04 	ldr.w	pc, [sp], #4
    17f4:	1fff8b64 	.word	0x1fff8b64

000017f8 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    17f8:	b510      	push	{r4, lr}
    17fa:	b084      	sub	sp, #16
    17fc:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    17fe:	4a9f      	ldr	r2, [pc, #636]	; (1a7c <Clock_Ip_InitClock+0x284>)
    1800:	9b01      	ldr	r3, [sp, #4]
    1802:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    1804:	2101      	movs	r1, #1
    1806:	9801      	ldr	r0, [sp, #4]
    1808:	f003 fa90 	bl	4d2c <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    180c:	4b9b      	ldr	r3, [pc, #620]	; (1a7c <Clock_Ip_InitClock+0x284>)
    180e:	681b      	ldr	r3, [r3, #0]
    1810:	2b00      	cmp	r3, #0
    1812:	d030      	beq.n	1876 <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    1814:	2300      	movs	r3, #0
    1816:	9303      	str	r3, [sp, #12]
    1818:	e027      	b.n	186a <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    181a:	9901      	ldr	r1, [sp, #4]
    181c:	9a03      	ldr	r2, [sp, #12]
    181e:	4613      	mov	r3, r2
    1820:	009b      	lsls	r3, r3, #2
    1822:	4413      	add	r3, r2
    1824:	009b      	lsls	r3, r3, #2
    1826:	440b      	add	r3, r1
    1828:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    182c:	681a      	ldr	r2, [r3, #0]
    182e:	4994      	ldr	r1, [pc, #592]	; (1a80 <Clock_Ip_InitClock+0x288>)
    1830:	4613      	mov	r3, r2
    1832:	00db      	lsls	r3, r3, #3
    1834:	4413      	add	r3, r2
    1836:	440b      	add	r3, r1
    1838:	3301      	adds	r3, #1
    183a:	781b      	ldrb	r3, [r3, #0]
    183c:	461a      	mov	r2, r3
    183e:	4b91      	ldr	r3, [pc, #580]	; (1a84 <Clock_Ip_InitClock+0x28c>)
    1840:	5c9b      	ldrb	r3, [r3, r2]
    1842:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    1844:	4a90      	ldr	r2, [pc, #576]	; (1a88 <Clock_Ip_InitClock+0x290>)
    1846:	9b02      	ldr	r3, [sp, #8]
    1848:	011b      	lsls	r3, r3, #4
    184a:	4413      	add	r3, r2
    184c:	6819      	ldr	r1, [r3, #0]
    184e:	9a03      	ldr	r2, [sp, #12]
    1850:	4613      	mov	r3, r2
    1852:	009b      	lsls	r3, r3, #2
    1854:	4413      	add	r3, r2
    1856:	009b      	lsls	r3, r3, #2
    1858:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    185c:	9a01      	ldr	r2, [sp, #4]
    185e:	4413      	add	r3, r2
    1860:	4618      	mov	r0, r3
    1862:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    1864:	9b03      	ldr	r3, [sp, #12]
    1866:	3301      	adds	r3, #1
    1868:	9303      	str	r3, [sp, #12]
    186a:	9b01      	ldr	r3, [sp, #4]
    186c:	7c9b      	ldrb	r3, [r3, #18]
    186e:	461a      	mov	r2, r3
    1870:	9b03      	ldr	r3, [sp, #12]
    1872:	4293      	cmp	r3, r2
    1874:	d3d1      	bcc.n	181a <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    1876:	9801      	ldr	r0, [sp, #4]
    1878:	f7ff feca 	bl	1610 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    187c:	2300      	movs	r3, #0
    187e:	9303      	str	r3, [sp, #12]
    1880:	e029      	b.n	18d6 <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1882:	9901      	ldr	r1, [sp, #4]
    1884:	9a03      	ldr	r2, [sp, #12]
    1886:	4613      	mov	r3, r2
    1888:	005b      	lsls	r3, r3, #1
    188a:	4413      	add	r3, r2
    188c:	009b      	lsls	r3, r3, #2
    188e:	440b      	add	r3, r1
    1890:	3314      	adds	r3, #20
    1892:	681a      	ldr	r2, [r3, #0]
    1894:	497a      	ldr	r1, [pc, #488]	; (1a80 <Clock_Ip_InitClock+0x288>)
    1896:	4613      	mov	r3, r2
    1898:	00db      	lsls	r3, r3, #3
    189a:	4413      	add	r3, r2
    189c:	440b      	add	r3, r1
    189e:	3301      	adds	r3, #1
    18a0:	781b      	ldrb	r3, [r3, #0]
    18a2:	461a      	mov	r2, r3
    18a4:	4b79      	ldr	r3, [pc, #484]	; (1a8c <Clock_Ip_InitClock+0x294>)
    18a6:	5c9b      	ldrb	r3, [r3, r2]
    18a8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    18aa:	4979      	ldr	r1, [pc, #484]	; (1a90 <Clock_Ip_InitClock+0x298>)
    18ac:	9a02      	ldr	r2, [sp, #8]
    18ae:	4613      	mov	r3, r2
    18b0:	005b      	lsls	r3, r3, #1
    18b2:	4413      	add	r3, r2
    18b4:	009b      	lsls	r3, r3, #2
    18b6:	440b      	add	r3, r1
    18b8:	6819      	ldr	r1, [r3, #0]
    18ba:	9a03      	ldr	r2, [sp, #12]
    18bc:	4613      	mov	r3, r2
    18be:	005b      	lsls	r3, r3, #1
    18c0:	4413      	add	r3, r2
    18c2:	009b      	lsls	r3, r3, #2
    18c4:	3310      	adds	r3, #16
    18c6:	9a01      	ldr	r2, [sp, #4]
    18c8:	4413      	add	r3, r2
    18ca:	3304      	adds	r3, #4
    18cc:	4618      	mov	r0, r3
    18ce:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    18d0:	9b03      	ldr	r3, [sp, #12]
    18d2:	3301      	adds	r3, #1
    18d4:	9303      	str	r3, [sp, #12]
    18d6:	9b01      	ldr	r3, [sp, #4]
    18d8:	7a1b      	ldrb	r3, [r3, #8]
    18da:	461a      	mov	r2, r3
    18dc:	9b03      	ldr	r3, [sp, #12]
    18de:	4293      	cmp	r3, r2
    18e0:	d3cf      	bcc.n	1882 <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    18e2:	2300      	movs	r3, #0
    18e4:	9303      	str	r3, [sp, #12]
    18e6:	e02a      	b.n	193e <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    18e8:	9901      	ldr	r1, [sp, #4]
    18ea:	9a03      	ldr	r2, [sp, #12]
    18ec:	4613      	mov	r3, r2
    18ee:	009b      	lsls	r3, r3, #2
    18f0:	4413      	add	r3, r2
    18f2:	009b      	lsls	r3, r3, #2
    18f4:	440b      	add	r3, r1
    18f6:	332c      	adds	r3, #44	; 0x2c
    18f8:	681a      	ldr	r2, [r3, #0]
    18fa:	4961      	ldr	r1, [pc, #388]	; (1a80 <Clock_Ip_InitClock+0x288>)
    18fc:	4613      	mov	r3, r2
    18fe:	00db      	lsls	r3, r3, #3
    1900:	4413      	add	r3, r2
    1902:	440b      	add	r3, r1
    1904:	3301      	adds	r3, #1
    1906:	781b      	ldrb	r3, [r3, #0]
    1908:	461a      	mov	r2, r3
    190a:	4b62      	ldr	r3, [pc, #392]	; (1a94 <Clock_Ip_InitClock+0x29c>)
    190c:	5c9b      	ldrb	r3, [r3, r2]
    190e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    1910:	4961      	ldr	r1, [pc, #388]	; (1a98 <Clock_Ip_InitClock+0x2a0>)
    1912:	9a02      	ldr	r2, [sp, #8]
    1914:	4613      	mov	r3, r2
    1916:	009b      	lsls	r3, r3, #2
    1918:	4413      	add	r3, r2
    191a:	009b      	lsls	r3, r3, #2
    191c:	440b      	add	r3, r1
    191e:	3304      	adds	r3, #4
    1920:	6819      	ldr	r1, [r3, #0]
    1922:	9a03      	ldr	r2, [sp, #12]
    1924:	4613      	mov	r3, r2
    1926:	009b      	lsls	r3, r3, #2
    1928:	4413      	add	r3, r2
    192a:	009b      	lsls	r3, r3, #2
    192c:	3328      	adds	r3, #40	; 0x28
    192e:	9a01      	ldr	r2, [sp, #4]
    1930:	4413      	add	r3, r2
    1932:	3304      	adds	r3, #4
    1934:	4618      	mov	r0, r3
    1936:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    1938:	9b03      	ldr	r3, [sp, #12]
    193a:	3301      	adds	r3, #1
    193c:	9303      	str	r3, [sp, #12]
    193e:	9b01      	ldr	r3, [sp, #4]
    1940:	7a5b      	ldrb	r3, [r3, #9]
    1942:	461a      	mov	r2, r3
    1944:	9b03      	ldr	r3, [sp, #12]
    1946:	4293      	cmp	r3, r2
    1948:	d3ce      	bcc.n	18e8 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    194a:	9801      	ldr	r0, [sp, #4]
    194c:	f7ff fdb0 	bl	14b0 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    1950:	2300      	movs	r3, #0
    1952:	9303      	str	r3, [sp, #12]
    1954:	e028      	b.n	19a8 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    1956:	9901      	ldr	r1, [sp, #4]
    1958:	9a03      	ldr	r2, [sp, #12]
    195a:	4613      	mov	r3, r2
    195c:	009b      	lsls	r3, r3, #2
    195e:	4413      	add	r3, r2
    1960:	009b      	lsls	r3, r3, #2
    1962:	440b      	add	r3, r1
    1964:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    1968:	681a      	ldr	r2, [r3, #0]
    196a:	4945      	ldr	r1, [pc, #276]	; (1a80 <Clock_Ip_InitClock+0x288>)
    196c:	4613      	mov	r3, r2
    196e:	00db      	lsls	r3, r3, #3
    1970:	4413      	add	r3, r2
    1972:	440b      	add	r3, r1
    1974:	3301      	adds	r3, #1
    1976:	781b      	ldrb	r3, [r3, #0]
    1978:	461a      	mov	r2, r3
    197a:	4b48      	ldr	r3, [pc, #288]	; (1a9c <Clock_Ip_InitClock+0x2a4>)
    197c:	5c9b      	ldrb	r3, [r3, r2]
    197e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    1980:	4a47      	ldr	r2, [pc, #284]	; (1aa0 <Clock_Ip_InitClock+0x2a8>)
    1982:	9b02      	ldr	r3, [sp, #8]
    1984:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    1988:	9a03      	ldr	r2, [sp, #12]
    198a:	4613      	mov	r3, r2
    198c:	009b      	lsls	r3, r3, #2
    198e:	4413      	add	r3, r2
    1990:	009b      	lsls	r3, r3, #2
    1992:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    1996:	9a01      	ldr	r2, [sp, #4]
    1998:	4413      	add	r3, r2
    199a:	3304      	adds	r3, #4
    199c:	9903      	ldr	r1, [sp, #12]
    199e:	4618      	mov	r0, r3
    19a0:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    19a2:	9b03      	ldr	r3, [sp, #12]
    19a4:	3301      	adds	r3, #1
    19a6:	9303      	str	r3, [sp, #12]
    19a8:	9b01      	ldr	r3, [sp, #4]
    19aa:	7c5b      	ldrb	r3, [r3, #17]
    19ac:	461a      	mov	r2, r3
    19ae:	9b03      	ldr	r3, [sp, #12]
    19b0:	4293      	cmp	r3, r2
    19b2:	d3d0      	bcc.n	1956 <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    19b4:	2300      	movs	r3, #0
    19b6:	9303      	str	r3, [sp, #12]
    19b8:	e026      	b.n	1a08 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    19ba:	9901      	ldr	r1, [sp, #4]
    19bc:	9a03      	ldr	r2, [sp, #12]
    19be:	4613      	mov	r3, r2
    19c0:	005b      	lsls	r3, r3, #1
    19c2:	4413      	add	r3, r2
    19c4:	009b      	lsls	r3, r3, #2
    19c6:	440b      	add	r3, r1
    19c8:	f503 730e 	add.w	r3, r3, #568	; 0x238
    19cc:	681a      	ldr	r2, [r3, #0]
    19ce:	492c      	ldr	r1, [pc, #176]	; (1a80 <Clock_Ip_InitClock+0x288>)
    19d0:	4613      	mov	r3, r2
    19d2:	00db      	lsls	r3, r3, #3
    19d4:	4413      	add	r3, r2
    19d6:	440b      	add	r3, r1
    19d8:	3301      	adds	r3, #1
    19da:	781b      	ldrb	r3, [r3, #0]
    19dc:	461a      	mov	r2, r3
    19de:	4b31      	ldr	r3, [pc, #196]	; (1aa4 <Clock_Ip_InitClock+0x2ac>)
    19e0:	5c9b      	ldrb	r3, [r3, r2]
    19e2:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    19e4:	4a30      	ldr	r2, [pc, #192]	; (1aa8 <Clock_Ip_InitClock+0x2b0>)
    19e6:	9b02      	ldr	r3, [sp, #8]
    19e8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    19ec:	9a03      	ldr	r2, [sp, #12]
    19ee:	4613      	mov	r3, r2
    19f0:	005b      	lsls	r3, r3, #1
    19f2:	4413      	add	r3, r2
    19f4:	009b      	lsls	r3, r3, #2
    19f6:	f503 730e 	add.w	r3, r3, #568	; 0x238
    19fa:	9a01      	ldr	r2, [sp, #4]
    19fc:	4413      	add	r3, r2
    19fe:	4618      	mov	r0, r3
    1a00:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1a02:	9b03      	ldr	r3, [sp, #12]
    1a04:	3301      	adds	r3, #1
    1a06:	9303      	str	r3, [sp, #12]
    1a08:	9b01      	ldr	r3, [sp, #4]
    1a0a:	7b5b      	ldrb	r3, [r3, #13]
    1a0c:	461a      	mov	r2, r3
    1a0e:	9b03      	ldr	r3, [sp, #12]
    1a10:	4293      	cmp	r3, r2
    1a12:	d3d2      	bcc.n	19ba <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    1a14:	2300      	movs	r3, #0
    1a16:	9303      	str	r3, [sp, #12]
    1a18:	e026      	b.n	1a68 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    1a1a:	9901      	ldr	r1, [sp, #4]
    1a1c:	9a03      	ldr	r2, [sp, #12]
    1a1e:	4613      	mov	r3, r2
    1a20:	005b      	lsls	r3, r3, #1
    1a22:	4413      	add	r3, r2
    1a24:	009b      	lsls	r3, r3, #2
    1a26:	440b      	add	r3, r1
    1a28:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    1a2c:	681a      	ldr	r2, [r3, #0]
    1a2e:	4914      	ldr	r1, [pc, #80]	; (1a80 <Clock_Ip_InitClock+0x288>)
    1a30:	4613      	mov	r3, r2
    1a32:	00db      	lsls	r3, r3, #3
    1a34:	4413      	add	r3, r2
    1a36:	440b      	add	r3, r1
    1a38:	3301      	adds	r3, #1
    1a3a:	781b      	ldrb	r3, [r3, #0]
    1a3c:	461a      	mov	r2, r3
    1a3e:	4b1b      	ldr	r3, [pc, #108]	; (1aac <Clock_Ip_InitClock+0x2b4>)
    1a40:	5c9b      	ldrb	r3, [r3, r2]
    1a42:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    1a44:	4a1a      	ldr	r2, [pc, #104]	; (1ab0 <Clock_Ip_InitClock+0x2b8>)
    1a46:	9b02      	ldr	r3, [sp, #8]
    1a48:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    1a4c:	9a03      	ldr	r2, [sp, #12]
    1a4e:	4613      	mov	r3, r2
    1a50:	005b      	lsls	r3, r3, #1
    1a52:	4413      	add	r3, r2
    1a54:	009b      	lsls	r3, r3, #2
    1a56:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    1a5a:	9a01      	ldr	r2, [sp, #4]
    1a5c:	4413      	add	r3, r2
    1a5e:	4618      	mov	r0, r3
    1a60:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    1a62:	9b03      	ldr	r3, [sp, #12]
    1a64:	3301      	adds	r3, #1
    1a66:	9303      	str	r3, [sp, #12]
    1a68:	9b01      	ldr	r3, [sp, #4]
    1a6a:	7b1b      	ldrb	r3, [r3, #12]
    1a6c:	461a      	mov	r2, r3
    1a6e:	9b03      	ldr	r3, [sp, #12]
    1a70:	4293      	cmp	r3, r2
    1a72:	d3d2      	bcc.n	1a1a <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1a74:	2300      	movs	r3, #0
    1a76:	9303      	str	r3, [sp, #12]
    1a78:	e044      	b.n	1b04 <Clock_Ip_InitClock+0x30c>
    1a7a:	bf00      	nop
    1a7c:	1fff8b5c 	.word	0x1fff8b5c
    1a80:	00007940 	.word	0x00007940
    1a84:	00007930 	.word	0x00007930
    1a88:	00007f3c 	.word	0x00007f3c
    1a8c:	000078d0 	.word	0x000078d0
    1a90:	00007f00 	.word	0x00007f00
    1a94:	000078c0 	.word	0x000078c0
    1a98:	00007e94 	.word	0x00007e94
    1a9c:	00007920 	.word	0x00007920
    1aa0:	00007f74 	.word	0x00007f74
    1aa4:	000078b0 	.word	0x000078b0
    1aa8:	00007e8c 	.word	0x00007e8c
    1aac:	000078a0 	.word	0x000078a0
    1ab0:	00007e50 	.word	0x00007e50
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    1ab4:	9901      	ldr	r1, [sp, #4]
    1ab6:	9a03      	ldr	r2, [sp, #12]
    1ab8:	4613      	mov	r3, r2
    1aba:	005b      	lsls	r3, r3, #1
    1abc:	4413      	add	r3, r2
    1abe:	009b      	lsls	r3, r3, #2
    1ac0:	440b      	add	r3, r1
    1ac2:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1ac6:	681a      	ldr	r2, [r3, #0]
    1ac8:	49ac      	ldr	r1, [pc, #688]	; (1d7c <Clock_Ip_InitClock+0x584>)
    1aca:	4613      	mov	r3, r2
    1acc:	00db      	lsls	r3, r3, #3
    1ace:	4413      	add	r3, r2
    1ad0:	440b      	add	r3, r1
    1ad2:	3301      	adds	r3, #1
    1ad4:	781b      	ldrb	r3, [r3, #0]
    1ad6:	461a      	mov	r2, r3
    1ad8:	4ba9      	ldr	r3, [pc, #676]	; (1d80 <Clock_Ip_InitClock+0x588>)
    1ada:	5c9b      	ldrb	r3, [r3, r2]
    1adc:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    1ade:	4aa9      	ldr	r2, [pc, #676]	; (1d84 <Clock_Ip_InitClock+0x58c>)
    1ae0:	9b02      	ldr	r3, [sp, #8]
    1ae2:	00db      	lsls	r3, r3, #3
    1ae4:	4413      	add	r3, r2
    1ae6:	6859      	ldr	r1, [r3, #4]
    1ae8:	9a03      	ldr	r2, [sp, #12]
    1aea:	4613      	mov	r3, r2
    1aec:	005b      	lsls	r3, r3, #1
    1aee:	4413      	add	r3, r2
    1af0:	009b      	lsls	r3, r3, #2
    1af2:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1af6:	9a01      	ldr	r2, [sp, #4]
    1af8:	4413      	add	r3, r2
    1afa:	4618      	mov	r0, r3
    1afc:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1afe:	9b03      	ldr	r3, [sp, #12]
    1b00:	3301      	adds	r3, #1
    1b02:	9303      	str	r3, [sp, #12]
    1b04:	9b01      	ldr	r3, [sp, #4]
    1b06:	7b5b      	ldrb	r3, [r3, #13]
    1b08:	461a      	mov	r2, r3
    1b0a:	9b03      	ldr	r3, [sp, #12]
    1b0c:	4293      	cmp	r3, r2
    1b0e:	d3d1      	bcc.n	1ab4 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    1b10:	2300      	movs	r3, #0
    1b12:	9303      	str	r3, [sp, #12]
    1b14:	e029      	b.n	1b6a <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    1b16:	9901      	ldr	r1, [sp, #4]
    1b18:	9a03      	ldr	r2, [sp, #12]
    1b1a:	4613      	mov	r3, r2
    1b1c:	009b      	lsls	r3, r3, #2
    1b1e:	4413      	add	r3, r2
    1b20:	00db      	lsls	r3, r3, #3
    1b22:	440b      	add	r3, r1
    1b24:	3340      	adds	r3, #64	; 0x40
    1b26:	681a      	ldr	r2, [r3, #0]
    1b28:	4994      	ldr	r1, [pc, #592]	; (1d7c <Clock_Ip_InitClock+0x584>)
    1b2a:	4613      	mov	r3, r2
    1b2c:	00db      	lsls	r3, r3, #3
    1b2e:	4413      	add	r3, r2
    1b30:	440b      	add	r3, r1
    1b32:	3301      	adds	r3, #1
    1b34:	781b      	ldrb	r3, [r3, #0]
    1b36:	461a      	mov	r2, r3
    1b38:	4b93      	ldr	r3, [pc, #588]	; (1d88 <Clock_Ip_InitClock+0x590>)
    1b3a:	5c9b      	ldrb	r3, [r3, r2]
    1b3c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    1b3e:	4993      	ldr	r1, [pc, #588]	; (1d8c <Clock_Ip_InitClock+0x594>)
    1b40:	9a02      	ldr	r2, [sp, #8]
    1b42:	4613      	mov	r3, r2
    1b44:	009b      	lsls	r3, r3, #2
    1b46:	4413      	add	r3, r2
    1b48:	009b      	lsls	r3, r3, #2
    1b4a:	440b      	add	r3, r1
    1b4c:	3304      	adds	r3, #4
    1b4e:	6819      	ldr	r1, [r3, #0]
    1b50:	9a03      	ldr	r2, [sp, #12]
    1b52:	4613      	mov	r3, r2
    1b54:	009b      	lsls	r3, r3, #2
    1b56:	4413      	add	r3, r2
    1b58:	00db      	lsls	r3, r3, #3
    1b5a:	3340      	adds	r3, #64	; 0x40
    1b5c:	9a01      	ldr	r2, [sp, #4]
    1b5e:	4413      	add	r3, r2
    1b60:	4618      	mov	r0, r3
    1b62:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    1b64:	9b03      	ldr	r3, [sp, #12]
    1b66:	3301      	adds	r3, #1
    1b68:	9303      	str	r3, [sp, #12]
    1b6a:	9b01      	ldr	r3, [sp, #4]
    1b6c:	7a9b      	ldrb	r3, [r3, #10]
    1b6e:	461a      	mov	r2, r3
    1b70:	9b03      	ldr	r3, [sp, #12]
    1b72:	4293      	cmp	r3, r2
    1b74:	d3cf      	bcc.n	1b16 <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    1b76:	2300      	movs	r3, #0
    1b78:	9303      	str	r3, [sp, #12]
    1b7a:	e029      	b.n	1bd0 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1b7c:	9901      	ldr	r1, [sp, #4]
    1b7e:	9a03      	ldr	r2, [sp, #12]
    1b80:	4613      	mov	r3, r2
    1b82:	009b      	lsls	r3, r3, #2
    1b84:	4413      	add	r3, r2
    1b86:	009b      	lsls	r3, r3, #2
    1b88:	440b      	add	r3, r1
    1b8a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1b8e:	681a      	ldr	r2, [r3, #0]
    1b90:	497a      	ldr	r1, [pc, #488]	; (1d7c <Clock_Ip_InitClock+0x584>)
    1b92:	4613      	mov	r3, r2
    1b94:	00db      	lsls	r3, r3, #3
    1b96:	4413      	add	r3, r2
    1b98:	440b      	add	r3, r1
    1b9a:	3301      	adds	r3, #1
    1b9c:	781b      	ldrb	r3, [r3, #0]
    1b9e:	461a      	mov	r2, r3
    1ba0:	4b7b      	ldr	r3, [pc, #492]	; (1d90 <Clock_Ip_InitClock+0x598>)
    1ba2:	5c9b      	ldrb	r3, [r3, r2]
    1ba4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    1ba6:	4a7b      	ldr	r2, [pc, #492]	; (1d94 <Clock_Ip_InitClock+0x59c>)
    1ba8:	9b02      	ldr	r3, [sp, #8]
    1baa:	011b      	lsls	r3, r3, #4
    1bac:	4413      	add	r3, r2
    1bae:	3304      	adds	r3, #4
    1bb0:	681c      	ldr	r4, [r3, #0]
    1bb2:	9a03      	ldr	r2, [sp, #12]
    1bb4:	4613      	mov	r3, r2
    1bb6:	009b      	lsls	r3, r3, #2
    1bb8:	4413      	add	r3, r2
    1bba:	009b      	lsls	r3, r3, #2
    1bbc:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1bc0:	9a01      	ldr	r2, [sp, #4]
    1bc2:	4413      	add	r3, r2
    1bc4:	9903      	ldr	r1, [sp, #12]
    1bc6:	4618      	mov	r0, r3
    1bc8:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    1bca:	9b03      	ldr	r3, [sp, #12]
    1bcc:	3301      	adds	r3, #1
    1bce:	9303      	str	r3, [sp, #12]
    1bd0:	9b01      	ldr	r3, [sp, #4]
    1bd2:	7c9b      	ldrb	r3, [r3, #18]
    1bd4:	461a      	mov	r2, r3
    1bd6:	9b03      	ldr	r3, [sp, #12]
    1bd8:	4293      	cmp	r3, r2
    1bda:	d3cf      	bcc.n	1b7c <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    1bdc:	2300      	movs	r3, #0
    1bde:	9303      	str	r3, [sp, #12]
    1be0:	e02a      	b.n	1c38 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1be2:	9901      	ldr	r1, [sp, #4]
    1be4:	9a03      	ldr	r2, [sp, #12]
    1be6:	4613      	mov	r3, r2
    1be8:	009b      	lsls	r3, r3, #2
    1bea:	4413      	add	r3, r2
    1bec:	009b      	lsls	r3, r3, #2
    1bee:	440b      	add	r3, r1
    1bf0:	332c      	adds	r3, #44	; 0x2c
    1bf2:	681a      	ldr	r2, [r3, #0]
    1bf4:	4961      	ldr	r1, [pc, #388]	; (1d7c <Clock_Ip_InitClock+0x584>)
    1bf6:	4613      	mov	r3, r2
    1bf8:	00db      	lsls	r3, r3, #3
    1bfa:	4413      	add	r3, r2
    1bfc:	440b      	add	r3, r1
    1bfe:	3301      	adds	r3, #1
    1c00:	781b      	ldrb	r3, [r3, #0]
    1c02:	461a      	mov	r2, r3
    1c04:	4b64      	ldr	r3, [pc, #400]	; (1d98 <Clock_Ip_InitClock+0x5a0>)
    1c06:	5c9b      	ldrb	r3, [r3, r2]
    1c08:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    1c0a:	4964      	ldr	r1, [pc, #400]	; (1d9c <Clock_Ip_InitClock+0x5a4>)
    1c0c:	9a02      	ldr	r2, [sp, #8]
    1c0e:	4613      	mov	r3, r2
    1c10:	009b      	lsls	r3, r3, #2
    1c12:	4413      	add	r3, r2
    1c14:	009b      	lsls	r3, r3, #2
    1c16:	440b      	add	r3, r1
    1c18:	3308      	adds	r3, #8
    1c1a:	6819      	ldr	r1, [r3, #0]
    1c1c:	9a03      	ldr	r2, [sp, #12]
    1c1e:	4613      	mov	r3, r2
    1c20:	009b      	lsls	r3, r3, #2
    1c22:	4413      	add	r3, r2
    1c24:	009b      	lsls	r3, r3, #2
    1c26:	3328      	adds	r3, #40	; 0x28
    1c28:	9a01      	ldr	r2, [sp, #4]
    1c2a:	4413      	add	r3, r2
    1c2c:	3304      	adds	r3, #4
    1c2e:	4618      	mov	r0, r3
    1c30:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    1c32:	9b03      	ldr	r3, [sp, #12]
    1c34:	3301      	adds	r3, #1
    1c36:	9303      	str	r3, [sp, #12]
    1c38:	9b01      	ldr	r3, [sp, #4]
    1c3a:	7a5b      	ldrb	r3, [r3, #9]
    1c3c:	461a      	mov	r2, r3
    1c3e:	9b03      	ldr	r3, [sp, #12]
    1c40:	4293      	cmp	r3, r2
    1c42:	d3ce      	bcc.n	1be2 <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    1c44:	2300      	movs	r3, #0
    1c46:	9303      	str	r3, [sp, #12]
    1c48:	e029      	b.n	1c9e <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    1c4a:	9901      	ldr	r1, [sp, #4]
    1c4c:	9a03      	ldr	r2, [sp, #12]
    1c4e:	4613      	mov	r3, r2
    1c50:	009b      	lsls	r3, r3, #2
    1c52:	4413      	add	r3, r2
    1c54:	00db      	lsls	r3, r3, #3
    1c56:	440b      	add	r3, r1
    1c58:	3340      	adds	r3, #64	; 0x40
    1c5a:	681a      	ldr	r2, [r3, #0]
    1c5c:	4947      	ldr	r1, [pc, #284]	; (1d7c <Clock_Ip_InitClock+0x584>)
    1c5e:	4613      	mov	r3, r2
    1c60:	00db      	lsls	r3, r3, #3
    1c62:	4413      	add	r3, r2
    1c64:	440b      	add	r3, r1
    1c66:	3301      	adds	r3, #1
    1c68:	781b      	ldrb	r3, [r3, #0]
    1c6a:	461a      	mov	r2, r3
    1c6c:	4b46      	ldr	r3, [pc, #280]	; (1d88 <Clock_Ip_InitClock+0x590>)
    1c6e:	5c9b      	ldrb	r3, [r3, r2]
    1c70:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    1c72:	4946      	ldr	r1, [pc, #280]	; (1d8c <Clock_Ip_InitClock+0x594>)
    1c74:	9a02      	ldr	r2, [sp, #8]
    1c76:	4613      	mov	r3, r2
    1c78:	009b      	lsls	r3, r3, #2
    1c7a:	4413      	add	r3, r2
    1c7c:	009b      	lsls	r3, r3, #2
    1c7e:	440b      	add	r3, r1
    1c80:	330c      	adds	r3, #12
    1c82:	6819      	ldr	r1, [r3, #0]
    1c84:	9a03      	ldr	r2, [sp, #12]
    1c86:	4613      	mov	r3, r2
    1c88:	009b      	lsls	r3, r3, #2
    1c8a:	4413      	add	r3, r2
    1c8c:	00db      	lsls	r3, r3, #3
    1c8e:	3340      	adds	r3, #64	; 0x40
    1c90:	9a01      	ldr	r2, [sp, #4]
    1c92:	4413      	add	r3, r2
    1c94:	4618      	mov	r0, r3
    1c96:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    1c98:	9b03      	ldr	r3, [sp, #12]
    1c9a:	3301      	adds	r3, #1
    1c9c:	9303      	str	r3, [sp, #12]
    1c9e:	9b01      	ldr	r3, [sp, #4]
    1ca0:	7a9b      	ldrb	r3, [r3, #10]
    1ca2:	461a      	mov	r2, r3
    1ca4:	9b03      	ldr	r3, [sp, #12]
    1ca6:	4293      	cmp	r3, r2
    1ca8:	d3cf      	bcc.n	1c4a <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    1caa:	2300      	movs	r3, #0
    1cac:	9303      	str	r3, [sp, #12]
    1cae:	e025      	b.n	1cfc <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    1cb0:	9a01      	ldr	r2, [sp, #4]
    1cb2:	9b03      	ldr	r3, [sp, #12]
    1cb4:	3324      	adds	r3, #36	; 0x24
    1cb6:	011b      	lsls	r3, r3, #4
    1cb8:	4413      	add	r3, r2
    1cba:	3304      	adds	r3, #4
    1cbc:	681a      	ldr	r2, [r3, #0]
    1cbe:	492f      	ldr	r1, [pc, #188]	; (1d7c <Clock_Ip_InitClock+0x584>)
    1cc0:	4613      	mov	r3, r2
    1cc2:	00db      	lsls	r3, r3, #3
    1cc4:	4413      	add	r3, r2
    1cc6:	440b      	add	r3, r1
    1cc8:	3301      	adds	r3, #1
    1cca:	781b      	ldrb	r3, [r3, #0]
    1ccc:	461a      	mov	r2, r3
    1cce:	4b34      	ldr	r3, [pc, #208]	; (1da0 <Clock_Ip_InitClock+0x5a8>)
    1cd0:	5c9b      	ldrb	r3, [r3, r2]
    1cd2:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    1cd4:	4933      	ldr	r1, [pc, #204]	; (1da4 <Clock_Ip_InitClock+0x5ac>)
    1cd6:	9a02      	ldr	r2, [sp, #8]
    1cd8:	4613      	mov	r3, r2
    1cda:	005b      	lsls	r3, r3, #1
    1cdc:	4413      	add	r3, r2
    1cde:	009b      	lsls	r3, r3, #2
    1ce0:	440b      	add	r3, r1
    1ce2:	3304      	adds	r3, #4
    1ce4:	681b      	ldr	r3, [r3, #0]
    1ce6:	9a03      	ldr	r2, [sp, #12]
    1ce8:	3224      	adds	r2, #36	; 0x24
    1cea:	0112      	lsls	r2, r2, #4
    1cec:	9901      	ldr	r1, [sp, #4]
    1cee:	440a      	add	r2, r1
    1cf0:	3204      	adds	r2, #4
    1cf2:	4610      	mov	r0, r2
    1cf4:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    1cf6:	9b03      	ldr	r3, [sp, #12]
    1cf8:	3301      	adds	r3, #1
    1cfa:	9303      	str	r3, [sp, #12]
    1cfc:	9b01      	ldr	r3, [sp, #4]
    1cfe:	7b9b      	ldrb	r3, [r3, #14]
    1d00:	461a      	mov	r2, r3
    1d02:	9b03      	ldr	r3, [sp, #12]
    1d04:	4293      	cmp	r3, r2
    1d06:	d3d3      	bcc.n	1cb0 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    1d08:	4b27      	ldr	r3, [pc, #156]	; (1da8 <Clock_Ip_InitClock+0x5b0>)
    1d0a:	2200      	movs	r2, #0
    1d0c:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    1d0e:	4b26      	ldr	r3, [pc, #152]	; (1da8 <Clock_Ip_InitClock+0x5b0>)
    1d10:	2200      	movs	r2, #0
    1d12:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    1d14:	4b24      	ldr	r3, [pc, #144]	; (1da8 <Clock_Ip_InitClock+0x5b0>)
    1d16:	2201      	movs	r2, #1
    1d18:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    1d1a:	4b23      	ldr	r3, [pc, #140]	; (1da8 <Clock_Ip_InitClock+0x5b0>)
    1d1c:	2200      	movs	r2, #0
    1d1e:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    1d20:	f000 fa9c 	bl	225c <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    1d24:	2300      	movs	r3, #0
    1d26:	9303      	str	r3, [sp, #12]
    1d28:	e04c      	b.n	1dc4 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    1d2a:	9a01      	ldr	r2, [sp, #4]
    1d2c:	9b03      	ldr	r3, [sp, #12]
    1d2e:	330d      	adds	r3, #13
    1d30:	00db      	lsls	r3, r3, #3
    1d32:	4413      	add	r3, r2
    1d34:	685b      	ldr	r3, [r3, #4]
    1d36:	4a1d      	ldr	r2, [pc, #116]	; (1dac <Clock_Ip_InitClock+0x5b4>)
    1d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1d3c:	2b03      	cmp	r3, #3
    1d3e:	d03b      	beq.n	1db8 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    1d40:	9b01      	ldr	r3, [sp, #4]
    1d42:	9a03      	ldr	r2, [sp, #12]
    1d44:	320d      	adds	r2, #13
    1d46:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1d4a:	490c      	ldr	r1, [pc, #48]	; (1d7c <Clock_Ip_InitClock+0x584>)
    1d4c:	4613      	mov	r3, r2
    1d4e:	00db      	lsls	r3, r3, #3
    1d50:	4413      	add	r3, r2
    1d52:	440b      	add	r3, r1
    1d54:	3301      	adds	r3, #1
    1d56:	781b      	ldrb	r3, [r3, #0]
    1d58:	461a      	mov	r2, r3
    1d5a:	4b15      	ldr	r3, [pc, #84]	; (1db0 <Clock_Ip_InitClock+0x5b8>)
    1d5c:	5c9b      	ldrb	r3, [r3, r2]
    1d5e:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    1d60:	4a14      	ldr	r2, [pc, #80]	; (1db4 <Clock_Ip_InitClock+0x5bc>)
    1d62:	9b02      	ldr	r3, [sp, #8]
    1d64:	00db      	lsls	r3, r3, #3
    1d66:	4413      	add	r3, r2
    1d68:	685b      	ldr	r3, [r3, #4]
    1d6a:	9a03      	ldr	r2, [sp, #12]
    1d6c:	320d      	adds	r2, #13
    1d6e:	00d2      	lsls	r2, r2, #3
    1d70:	9901      	ldr	r1, [sp, #4]
    1d72:	440a      	add	r2, r1
    1d74:	4610      	mov	r0, r2
    1d76:	4798      	blx	r3
    1d78:	e021      	b.n	1dbe <Clock_Ip_InitClock+0x5c6>
    1d7a:	bf00      	nop
    1d7c:	00007940 	.word	0x00007940
    1d80:	000078b0 	.word	0x000078b0
    1d84:	00007e8c 	.word	0x00007e8c
    1d88:	00007900 	.word	0x00007900
    1d8c:	00007f4c 	.word	0x00007f4c
    1d90:	00007930 	.word	0x00007930
    1d94:	00007f3c 	.word	0x00007f3c
    1d98:	000078c0 	.word	0x000078c0
    1d9c:	00007e94 	.word	0x00007e94
    1da0:	000078f0 	.word	0x000078f0
    1da4:	00007ebc 	.word	0x00007ebc
    1da8:	1fff8b64 	.word	0x1fff8b64
    1dac:	00007d8c 	.word	0x00007d8c
    1db0:	00007910 	.word	0x00007910
    1db4:	00007f78 	.word	0x00007f78
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    1db8:	4b3a      	ldr	r3, [pc, #232]	; (1ea4 <Clock_Ip_InitClock+0x6ac>)
    1dba:	2201      	movs	r2, #1
    1dbc:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    1dbe:	9b03      	ldr	r3, [sp, #12]
    1dc0:	3301      	adds	r3, #1
    1dc2:	9303      	str	r3, [sp, #12]
    1dc4:	9b01      	ldr	r3, [sp, #4]
    1dc6:	7adb      	ldrb	r3, [r3, #11]
    1dc8:	461a      	mov	r2, r3
    1dca:	9b03      	ldr	r3, [sp, #12]
    1dcc:	4293      	cmp	r3, r2
    1dce:	d3ac      	bcc.n	1d2a <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    1dd0:	4b34      	ldr	r3, [pc, #208]	; (1ea4 <Clock_Ip_InitClock+0x6ac>)
    1dd2:	781b      	ldrb	r3, [r3, #0]
    1dd4:	f083 0301 	eor.w	r3, r3, #1
    1dd8:	b2db      	uxtb	r3, r3
    1dda:	2b00      	cmp	r3, #0
    1ddc:	d05e      	beq.n	1e9c <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1dde:	2300      	movs	r3, #0
    1de0:	9303      	str	r3, [sp, #12]
    1de2:	e01f      	b.n	1e24 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    1de4:	9a01      	ldr	r2, [sp, #4]
    1de6:	9b03      	ldr	r3, [sp, #12]
    1de8:	334e      	adds	r3, #78	; 0x4e
    1dea:	00db      	lsls	r3, r3, #3
    1dec:	4413      	add	r3, r2
    1dee:	685a      	ldr	r2, [r3, #4]
    1df0:	492d      	ldr	r1, [pc, #180]	; (1ea8 <Clock_Ip_InitClock+0x6b0>)
    1df2:	4613      	mov	r3, r2
    1df4:	00db      	lsls	r3, r3, #3
    1df6:	4413      	add	r3, r2
    1df8:	440b      	add	r3, r1
    1dfa:	3301      	adds	r3, #1
    1dfc:	781b      	ldrb	r3, [r3, #0]
    1dfe:	461a      	mov	r2, r3
    1e00:	4b2a      	ldr	r3, [pc, #168]	; (1eac <Clock_Ip_InitClock+0x6b4>)
    1e02:	5c9b      	ldrb	r3, [r3, r2]
    1e04:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    1e06:	4a2a      	ldr	r2, [pc, #168]	; (1eb0 <Clock_Ip_InitClock+0x6b8>)
    1e08:	9b02      	ldr	r3, [sp, #8]
    1e0a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1e0e:	9a03      	ldr	r2, [sp, #12]
    1e10:	324e      	adds	r2, #78	; 0x4e
    1e12:	00d2      	lsls	r2, r2, #3
    1e14:	9901      	ldr	r1, [sp, #4]
    1e16:	440a      	add	r2, r1
    1e18:	3204      	adds	r2, #4
    1e1a:	4610      	mov	r0, r2
    1e1c:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1e1e:	9b03      	ldr	r3, [sp, #12]
    1e20:	3301      	adds	r3, #1
    1e22:	9303      	str	r3, [sp, #12]
    1e24:	9b01      	ldr	r3, [sp, #4]
    1e26:	7c1b      	ldrb	r3, [r3, #16]
    1e28:	461a      	mov	r2, r3
    1e2a:	9b03      	ldr	r3, [sp, #12]
    1e2c:	4293      	cmp	r3, r2
    1e2e:	d3d9      	bcc.n	1de4 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    1e30:	2300      	movs	r3, #0
    1e32:	9303      	str	r3, [sp, #12]
    1e34:	e028      	b.n	1e88 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1e36:	9901      	ldr	r1, [sp, #4]
    1e38:	9a03      	ldr	r2, [sp, #12]
    1e3a:	4613      	mov	r3, r2
    1e3c:	009b      	lsls	r3, r3, #2
    1e3e:	4413      	add	r3, r2
    1e40:	009b      	lsls	r3, r3, #2
    1e42:	440b      	add	r3, r1
    1e44:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1e48:	681a      	ldr	r2, [r3, #0]
    1e4a:	4917      	ldr	r1, [pc, #92]	; (1ea8 <Clock_Ip_InitClock+0x6b0>)
    1e4c:	4613      	mov	r3, r2
    1e4e:	00db      	lsls	r3, r3, #3
    1e50:	4413      	add	r3, r2
    1e52:	440b      	add	r3, r1
    1e54:	3301      	adds	r3, #1
    1e56:	781b      	ldrb	r3, [r3, #0]
    1e58:	461a      	mov	r2, r3
    1e5a:	4b16      	ldr	r3, [pc, #88]	; (1eb4 <Clock_Ip_InitClock+0x6bc>)
    1e5c:	5c9b      	ldrb	r3, [r3, r2]
    1e5e:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    1e60:	4a15      	ldr	r2, [pc, #84]	; (1eb8 <Clock_Ip_InitClock+0x6c0>)
    1e62:	9b02      	ldr	r3, [sp, #8]
    1e64:	011b      	lsls	r3, r3, #4
    1e66:	4413      	add	r3, r2
    1e68:	330c      	adds	r3, #12
    1e6a:	6819      	ldr	r1, [r3, #0]
    1e6c:	9a03      	ldr	r2, [sp, #12]
    1e6e:	4613      	mov	r3, r2
    1e70:	009b      	lsls	r3, r3, #2
    1e72:	4413      	add	r3, r2
    1e74:	009b      	lsls	r3, r3, #2
    1e76:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1e7a:	9a01      	ldr	r2, [sp, #4]
    1e7c:	4413      	add	r3, r2
    1e7e:	4618      	mov	r0, r3
    1e80:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    1e82:	9b03      	ldr	r3, [sp, #12]
    1e84:	3301      	adds	r3, #1
    1e86:	9303      	str	r3, [sp, #12]
    1e88:	9b01      	ldr	r3, [sp, #4]
    1e8a:	7c9b      	ldrb	r3, [r3, #18]
    1e8c:	461a      	mov	r2, r3
    1e8e:	9b03      	ldr	r3, [sp, #12]
    1e90:	4293      	cmp	r3, r2
    1e92:	d3d0      	bcc.n	1e36 <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    1e94:	2104      	movs	r1, #4
    1e96:	9801      	ldr	r0, [sp, #4]
    1e98:	f002 ff48 	bl	4d2c <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    1e9c:	bf00      	nop
    1e9e:	b004      	add	sp, #16
    1ea0:	bd10      	pop	{r4, pc}
    1ea2:	bf00      	nop
    1ea4:	1fff8b64 	.word	0x1fff8b64
    1ea8:	00007940 	.word	0x00007940
    1eac:	000078e0 	.word	0x000078e0
    1eb0:	00007ec8 	.word	0x00007ec8
    1eb4:	00007930 	.word	0x00007930
    1eb8:	00007f3c 	.word	0x00007f3c

00001ebc <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    1ebc:	b500      	push	{lr}
    1ebe:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    1ec0:	2302      	movs	r3, #2
    1ec2:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    1ec4:	2300      	movs	r3, #0
    1ec6:	9304      	str	r3, [sp, #16]
    1ec8:	e02c      	b.n	1f24 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    1eca:	4a36      	ldr	r2, [pc, #216]	; (1fa4 <Clock_Ip_GetPllStatus+0xe8>)
    1ecc:	9b04      	ldr	r3, [sp, #16]
    1ece:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1ed2:	4935      	ldr	r1, [pc, #212]	; (1fa8 <Clock_Ip_GetPllStatus+0xec>)
    1ed4:	4613      	mov	r3, r2
    1ed6:	00db      	lsls	r3, r3, #3
    1ed8:	4413      	add	r3, r2
    1eda:	440b      	add	r3, r1
    1edc:	3301      	adds	r3, #1
    1ede:	781b      	ldrb	r3, [r3, #0]
    1ee0:	461a      	mov	r2, r3
    1ee2:	4b32      	ldr	r3, [pc, #200]	; (1fac <Clock_Ip_GetPllStatus+0xf0>)
    1ee4:	5c9b      	ldrb	r3, [r3, r2]
    1ee6:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    1ee8:	4931      	ldr	r1, [pc, #196]	; (1fb0 <Clock_Ip_GetPllStatus+0xf4>)
    1eea:	9a03      	ldr	r2, [sp, #12]
    1eec:	4613      	mov	r3, r2
    1eee:	009b      	lsls	r3, r3, #2
    1ef0:	4413      	add	r3, r2
    1ef2:	009b      	lsls	r3, r3, #2
    1ef4:	440b      	add	r3, r1
    1ef6:	3308      	adds	r3, #8
    1ef8:	681b      	ldr	r3, [r3, #0]
    1efa:	492a      	ldr	r1, [pc, #168]	; (1fa4 <Clock_Ip_GetPllStatus+0xe8>)
    1efc:	9a04      	ldr	r2, [sp, #16]
    1efe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1f02:	4610      	mov	r0, r2
    1f04:	4798      	blx	r3
    1f06:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    1f08:	9b02      	ldr	r3, [sp, #8]
    1f0a:	2b01      	cmp	r3, #1
    1f0c:	d102      	bne.n	1f14 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    1f0e:	2301      	movs	r3, #1
    1f10:	9305      	str	r3, [sp, #20]
            break;
    1f12:	e00d      	b.n	1f30 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    1f14:	9b02      	ldr	r3, [sp, #8]
    1f16:	2b02      	cmp	r3, #2
    1f18:	d101      	bne.n	1f1e <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    1f1a:	2300      	movs	r3, #0
    1f1c:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    1f1e:	9b04      	ldr	r3, [sp, #16]
    1f20:	3301      	adds	r3, #1
    1f22:	9304      	str	r3, [sp, #16]
    1f24:	4b23      	ldr	r3, [pc, #140]	; (1fb4 <Clock_Ip_GetPllStatus+0xf8>)
    1f26:	789b      	ldrb	r3, [r3, #2]
    1f28:	461a      	mov	r2, r3
    1f2a:	9b04      	ldr	r3, [sp, #16]
    1f2c:	4293      	cmp	r3, r2
    1f2e:	d3cc      	bcc.n	1eca <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    1f30:	9b05      	ldr	r3, [sp, #20]
    1f32:	2b00      	cmp	r3, #0
    1f34:	d130      	bne.n	1f98 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    1f36:	2300      	movs	r3, #0
    1f38:	9304      	str	r3, [sp, #16]
    1f3a:	e027      	b.n	1f8c <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    1f3c:	4a1e      	ldr	r2, [pc, #120]	; (1fb8 <Clock_Ip_GetPllStatus+0xfc>)
    1f3e:	9b04      	ldr	r3, [sp, #16]
    1f40:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1f44:	4918      	ldr	r1, [pc, #96]	; (1fa8 <Clock_Ip_GetPllStatus+0xec>)
    1f46:	4613      	mov	r3, r2
    1f48:	00db      	lsls	r3, r3, #3
    1f4a:	4413      	add	r3, r2
    1f4c:	440b      	add	r3, r1
    1f4e:	3301      	adds	r3, #1
    1f50:	781b      	ldrb	r3, [r3, #0]
    1f52:	461a      	mov	r2, r3
    1f54:	4b19      	ldr	r3, [pc, #100]	; (1fbc <Clock_Ip_GetPllStatus+0x100>)
    1f56:	5c9b      	ldrb	r3, [r3, r2]
    1f58:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    1f5a:	4919      	ldr	r1, [pc, #100]	; (1fc0 <Clock_Ip_GetPllStatus+0x104>)
    1f5c:	9a03      	ldr	r2, [sp, #12]
    1f5e:	4613      	mov	r3, r2
    1f60:	005b      	lsls	r3, r3, #1
    1f62:	4413      	add	r3, r2
    1f64:	009b      	lsls	r3, r3, #2
    1f66:	440b      	add	r3, r1
    1f68:	3308      	adds	r3, #8
    1f6a:	681b      	ldr	r3, [r3, #0]
    1f6c:	4912      	ldr	r1, [pc, #72]	; (1fb8 <Clock_Ip_GetPllStatus+0xfc>)
    1f6e:	9a04      	ldr	r2, [sp, #16]
    1f70:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1f74:	4610      	mov	r0, r2
    1f76:	4798      	blx	r3
    1f78:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    1f7a:	9b01      	ldr	r3, [sp, #4]
    1f7c:	2b01      	cmp	r3, #1
    1f7e:	d102      	bne.n	1f86 <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    1f80:	2301      	movs	r3, #1
    1f82:	9305      	str	r3, [sp, #20]
                break;
    1f84:	e008      	b.n	1f98 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    1f86:	9b04      	ldr	r3, [sp, #16]
    1f88:	3301      	adds	r3, #1
    1f8a:	9304      	str	r3, [sp, #16]
    1f8c:	4b09      	ldr	r3, [pc, #36]	; (1fb4 <Clock_Ip_GetPllStatus+0xf8>)
    1f8e:	78db      	ldrb	r3, [r3, #3]
    1f90:	461a      	mov	r2, r3
    1f92:	9b04      	ldr	r3, [sp, #16]
    1f94:	4293      	cmp	r3, r2
    1f96:	d3d1      	bcc.n	1f3c <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    1f98:	9b05      	ldr	r3, [sp, #20]
}
    1f9a:	4618      	mov	r0, r3
    1f9c:	b007      	add	sp, #28
    1f9e:	f85d fb04 	ldr.w	pc, [sp], #4
    1fa2:	bf00      	nop
    1fa4:	00007e48 	.word	0x00007e48
    1fa8:	00007940 	.word	0x00007940
    1fac:	00007900 	.word	0x00007900
    1fb0:	00007f4c 	.word	0x00007f4c
    1fb4:	1fff8b64 	.word	0x1fff8b64
    1fb8:	00007e4c 	.word	0x00007e4c
    1fbc:	000078f0 	.word	0x000078f0
    1fc0:	00007ebc 	.word	0x00007ebc

00001fc4 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    1fc4:	b500      	push	{lr}
    1fc6:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    1fc8:	4b55      	ldr	r3, [pc, #340]	; (2120 <Clock_Ip_DistributePll+0x15c>)
    1fca:	681b      	ldr	r3, [r3, #0]
    1fcc:	2b00      	cmp	r3, #0
    1fce:	f000 80a2 	beq.w	2116 <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    1fd2:	2300      	movs	r3, #0
    1fd4:	9301      	str	r3, [sp, #4]
    1fd6:	e02c      	b.n	2032 <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    1fd8:	4b51      	ldr	r3, [pc, #324]	; (2120 <Clock_Ip_DistributePll+0x15c>)
    1fda:	681a      	ldr	r2, [r3, #0]
    1fdc:	9b01      	ldr	r3, [sp, #4]
    1fde:	330d      	adds	r3, #13
    1fe0:	00db      	lsls	r3, r3, #3
    1fe2:	4413      	add	r3, r2
    1fe4:	685b      	ldr	r3, [r3, #4]
    1fe6:	4a4f      	ldr	r2, [pc, #316]	; (2124 <Clock_Ip_DistributePll+0x160>)
    1fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1fec:	2b03      	cmp	r3, #3
    1fee:	d11d      	bne.n	202c <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    1ff0:	4b4b      	ldr	r3, [pc, #300]	; (2120 <Clock_Ip_DistributePll+0x15c>)
    1ff2:	681b      	ldr	r3, [r3, #0]
    1ff4:	9a01      	ldr	r2, [sp, #4]
    1ff6:	320d      	adds	r2, #13
    1ff8:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1ffc:	494a      	ldr	r1, [pc, #296]	; (2128 <Clock_Ip_DistributePll+0x164>)
    1ffe:	4613      	mov	r3, r2
    2000:	00db      	lsls	r3, r3, #3
    2002:	4413      	add	r3, r2
    2004:	440b      	add	r3, r1
    2006:	3301      	adds	r3, #1
    2008:	781b      	ldrb	r3, [r3, #0]
    200a:	461a      	mov	r2, r3
    200c:	4b47      	ldr	r3, [pc, #284]	; (212c <Clock_Ip_DistributePll+0x168>)
    200e:	5c9b      	ldrb	r3, [r3, r2]
    2010:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    2012:	4a47      	ldr	r2, [pc, #284]	; (2130 <Clock_Ip_DistributePll+0x16c>)
    2014:	9b00      	ldr	r3, [sp, #0]
    2016:	00db      	lsls	r3, r3, #3
    2018:	4413      	add	r3, r2
    201a:	685b      	ldr	r3, [r3, #4]
    201c:	4a40      	ldr	r2, [pc, #256]	; (2120 <Clock_Ip_DistributePll+0x15c>)
    201e:	6811      	ldr	r1, [r2, #0]
    2020:	9a01      	ldr	r2, [sp, #4]
    2022:	320d      	adds	r2, #13
    2024:	00d2      	lsls	r2, r2, #3
    2026:	440a      	add	r2, r1
    2028:	4610      	mov	r0, r2
    202a:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    202c:	9b01      	ldr	r3, [sp, #4]
    202e:	3301      	adds	r3, #1
    2030:	9301      	str	r3, [sp, #4]
    2032:	4b3b      	ldr	r3, [pc, #236]	; (2120 <Clock_Ip_DistributePll+0x15c>)
    2034:	681b      	ldr	r3, [r3, #0]
    2036:	7adb      	ldrb	r3, [r3, #11]
    2038:	461a      	mov	r2, r3
    203a:	9b01      	ldr	r3, [sp, #4]
    203c:	4293      	cmp	r3, r2
    203e:	d3cb      	bcc.n	1fd8 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    2040:	4b3c      	ldr	r3, [pc, #240]	; (2134 <Clock_Ip_DistributePll+0x170>)
    2042:	781b      	ldrb	r3, [r3, #0]
    2044:	2b00      	cmp	r3, #0
    2046:	d066      	beq.n	2116 <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2048:	2300      	movs	r3, #0
    204a:	9301      	str	r3, [sp, #4]
    204c:	e021      	b.n	2092 <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    204e:	4b34      	ldr	r3, [pc, #208]	; (2120 <Clock_Ip_DistributePll+0x15c>)
    2050:	681a      	ldr	r2, [r3, #0]
    2052:	9b01      	ldr	r3, [sp, #4]
    2054:	334e      	adds	r3, #78	; 0x4e
    2056:	00db      	lsls	r3, r3, #3
    2058:	4413      	add	r3, r2
    205a:	685a      	ldr	r2, [r3, #4]
    205c:	4932      	ldr	r1, [pc, #200]	; (2128 <Clock_Ip_DistributePll+0x164>)
    205e:	4613      	mov	r3, r2
    2060:	00db      	lsls	r3, r3, #3
    2062:	4413      	add	r3, r2
    2064:	440b      	add	r3, r1
    2066:	3301      	adds	r3, #1
    2068:	781b      	ldrb	r3, [r3, #0]
    206a:	461a      	mov	r2, r3
    206c:	4b32      	ldr	r3, [pc, #200]	; (2138 <Clock_Ip_DistributePll+0x174>)
    206e:	5c9b      	ldrb	r3, [r3, r2]
    2070:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    2072:	4a32      	ldr	r2, [pc, #200]	; (213c <Clock_Ip_DistributePll+0x178>)
    2074:	9b00      	ldr	r3, [sp, #0]
    2076:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    207a:	4a29      	ldr	r2, [pc, #164]	; (2120 <Clock_Ip_DistributePll+0x15c>)
    207c:	6811      	ldr	r1, [r2, #0]
    207e:	9a01      	ldr	r2, [sp, #4]
    2080:	324e      	adds	r2, #78	; 0x4e
    2082:	00d2      	lsls	r2, r2, #3
    2084:	440a      	add	r2, r1
    2086:	3204      	adds	r2, #4
    2088:	4610      	mov	r0, r2
    208a:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    208c:	9b01      	ldr	r3, [sp, #4]
    208e:	3301      	adds	r3, #1
    2090:	9301      	str	r3, [sp, #4]
    2092:	4b23      	ldr	r3, [pc, #140]	; (2120 <Clock_Ip_DistributePll+0x15c>)
    2094:	681b      	ldr	r3, [r3, #0]
    2096:	7c1b      	ldrb	r3, [r3, #16]
    2098:	461a      	mov	r2, r3
    209a:	9b01      	ldr	r3, [sp, #4]
    209c:	4293      	cmp	r3, r2
    209e:	d3d6      	bcc.n	204e <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    20a0:	2300      	movs	r3, #0
    20a2:	9301      	str	r3, [sp, #4]
    20a4:	e02a      	b.n	20fc <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    20a6:	4b1e      	ldr	r3, [pc, #120]	; (2120 <Clock_Ip_DistributePll+0x15c>)
    20a8:	6819      	ldr	r1, [r3, #0]
    20aa:	9a01      	ldr	r2, [sp, #4]
    20ac:	4613      	mov	r3, r2
    20ae:	009b      	lsls	r3, r3, #2
    20b0:	4413      	add	r3, r2
    20b2:	009b      	lsls	r3, r3, #2
    20b4:	440b      	add	r3, r1
    20b6:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    20ba:	681a      	ldr	r2, [r3, #0]
    20bc:	491a      	ldr	r1, [pc, #104]	; (2128 <Clock_Ip_DistributePll+0x164>)
    20be:	4613      	mov	r3, r2
    20c0:	00db      	lsls	r3, r3, #3
    20c2:	4413      	add	r3, r2
    20c4:	440b      	add	r3, r1
    20c6:	3301      	adds	r3, #1
    20c8:	781b      	ldrb	r3, [r3, #0]
    20ca:	461a      	mov	r2, r3
    20cc:	4b1c      	ldr	r3, [pc, #112]	; (2140 <Clock_Ip_DistributePll+0x17c>)
    20ce:	5c9b      	ldrb	r3, [r3, r2]
    20d0:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    20d2:	4a1c      	ldr	r2, [pc, #112]	; (2144 <Clock_Ip_DistributePll+0x180>)
    20d4:	9b00      	ldr	r3, [sp, #0]
    20d6:	011b      	lsls	r3, r3, #4
    20d8:	4413      	add	r3, r2
    20da:	330c      	adds	r3, #12
    20dc:	6819      	ldr	r1, [r3, #0]
    20de:	4b10      	ldr	r3, [pc, #64]	; (2120 <Clock_Ip_DistributePll+0x15c>)
    20e0:	6818      	ldr	r0, [r3, #0]
    20e2:	9a01      	ldr	r2, [sp, #4]
    20e4:	4613      	mov	r3, r2
    20e6:	009b      	lsls	r3, r3, #2
    20e8:	4413      	add	r3, r2
    20ea:	009b      	lsls	r3, r3, #2
    20ec:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    20f0:	4403      	add	r3, r0
    20f2:	4618      	mov	r0, r3
    20f4:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    20f6:	9b01      	ldr	r3, [sp, #4]
    20f8:	3301      	adds	r3, #1
    20fa:	9301      	str	r3, [sp, #4]
    20fc:	4b08      	ldr	r3, [pc, #32]	; (2120 <Clock_Ip_DistributePll+0x15c>)
    20fe:	681b      	ldr	r3, [r3, #0]
    2100:	7c9b      	ldrb	r3, [r3, #18]
    2102:	461a      	mov	r2, r3
    2104:	9b01      	ldr	r3, [sp, #4]
    2106:	4293      	cmp	r3, r2
    2108:	d3cd      	bcc.n	20a6 <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    210a:	4b05      	ldr	r3, [pc, #20]	; (2120 <Clock_Ip_DistributePll+0x15c>)
    210c:	681b      	ldr	r3, [r3, #0]
    210e:	2104      	movs	r1, #4
    2110:	4618      	mov	r0, r3
    2112:	f002 fe0b 	bl	4d2c <Clock_Ip_Command>
        }
    }
}
    2116:	bf00      	nop
    2118:	b003      	add	sp, #12
    211a:	f85d fb04 	ldr.w	pc, [sp], #4
    211e:	bf00      	nop
    2120:	1fff8b5c 	.word	0x1fff8b5c
    2124:	00007d8c 	.word	0x00007d8c
    2128:	00007940 	.word	0x00007940
    212c:	00007910 	.word	0x00007910
    2130:	00007f78 	.word	0x00007f78
    2134:	1fff8b64 	.word	0x1fff8b64
    2138:	000078e0 	.word	0x000078e0
    213c:	00007ec8 	.word	0x00007ec8
    2140:	00007930 	.word	0x00007930
    2144:	00007f3c 	.word	0x00007f3c

00002148 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    2148:	b500      	push	{lr}
    214a:	b085      	sub	sp, #20
    214c:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    214e:	490c      	ldr	r1, [pc, #48]	; (2180 <Clock_Ip_DisableClockMonitor+0x38>)
    2150:	9a01      	ldr	r2, [sp, #4]
    2152:	4613      	mov	r3, r2
    2154:	00db      	lsls	r3, r3, #3
    2156:	4413      	add	r3, r2
    2158:	440b      	add	r3, r1
    215a:	3301      	adds	r3, #1
    215c:	781b      	ldrb	r3, [r3, #0]
    215e:	461a      	mov	r2, r3
    2160:	4b08      	ldr	r3, [pc, #32]	; (2184 <Clock_Ip_DisableClockMonitor+0x3c>)
    2162:	5c9b      	ldrb	r3, [r3, r2]
    2164:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    2166:	4a08      	ldr	r2, [pc, #32]	; (2188 <Clock_Ip_DisableClockMonitor+0x40>)
    2168:	9b03      	ldr	r3, [sp, #12]
    216a:	011b      	lsls	r3, r3, #4
    216c:	4413      	add	r3, r2
    216e:	3308      	adds	r3, #8
    2170:	681b      	ldr	r3, [r3, #0]
    2172:	9801      	ldr	r0, [sp, #4]
    2174:	4798      	blx	r3
}
    2176:	bf00      	nop
    2178:	b005      	add	sp, #20
    217a:	f85d fb04 	ldr.w	pc, [sp], #4
    217e:	bf00      	nop
    2180:	00007940 	.word	0x00007940
    2184:	00007930 	.word	0x00007930
    2188:	00007f3c 	.word	0x00007f3c

0000218c <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    218c:	b082      	sub	sp, #8
    218e:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    2190:	4a02      	ldr	r2, [pc, #8]	; (219c <Clock_Ip_InstallNotificationsCallback+0x10>)
    2192:	9b01      	ldr	r3, [sp, #4]
    2194:	6013      	str	r3, [r2, #0]
}
    2196:	bf00      	nop
    2198:	b002      	add	sp, #8
    219a:	4770      	bx	lr
    219c:	1fff8b14 	.word	0x1fff8b14

000021a0 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    21a0:	b500      	push	{lr}
    21a2:	b085      	sub	sp, #20
    21a4:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    21a6:	490c      	ldr	r1, [pc, #48]	; (21d8 <Clock_Ip_DisableModuleClock+0x38>)
    21a8:	9a01      	ldr	r2, [sp, #4]
    21aa:	4613      	mov	r3, r2
    21ac:	00db      	lsls	r3, r3, #3
    21ae:	4413      	add	r3, r2
    21b0:	440b      	add	r3, r1
    21b2:	3301      	adds	r3, #1
    21b4:	781b      	ldrb	r3, [r3, #0]
    21b6:	461a      	mov	r2, r3
    21b8:	4b08      	ldr	r3, [pc, #32]	; (21dc <Clock_Ip_DisableModuleClock+0x3c>)
    21ba:	5c9b      	ldrb	r3, [r3, r2]
    21bc:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    21be:	4a08      	ldr	r2, [pc, #32]	; (21e0 <Clock_Ip_DisableModuleClock+0x40>)
    21c0:	9b03      	ldr	r3, [sp, #12]
    21c2:	00db      	lsls	r3, r3, #3
    21c4:	4413      	add	r3, r2
    21c6:	685b      	ldr	r3, [r3, #4]
    21c8:	2101      	movs	r1, #1
    21ca:	9801      	ldr	r0, [sp, #4]
    21cc:	4798      	blx	r3
}
    21ce:	bf00      	nop
    21d0:	b005      	add	sp, #20
    21d2:	f85d fb04 	ldr.w	pc, [sp], #4
    21d6:	bf00      	nop
    21d8:	00007940 	.word	0x00007940
    21dc:	000078e0 	.word	0x000078e0
    21e0:	00007ec8 	.word	0x00007ec8

000021e4 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    21e4:	b500      	push	{lr}
    21e6:	b085      	sub	sp, #20
    21e8:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    21ea:	490c      	ldr	r1, [pc, #48]	; (221c <Clock_Ip_EnableModuleClock+0x38>)
    21ec:	9a01      	ldr	r2, [sp, #4]
    21ee:	4613      	mov	r3, r2
    21f0:	00db      	lsls	r3, r3, #3
    21f2:	4413      	add	r3, r2
    21f4:	440b      	add	r3, r1
    21f6:	3301      	adds	r3, #1
    21f8:	781b      	ldrb	r3, [r3, #0]
    21fa:	461a      	mov	r2, r3
    21fc:	4b08      	ldr	r3, [pc, #32]	; (2220 <Clock_Ip_EnableModuleClock+0x3c>)
    21fe:	5c9b      	ldrb	r3, [r3, r2]
    2200:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    2202:	4a08      	ldr	r2, [pc, #32]	; (2224 <Clock_Ip_EnableModuleClock+0x40>)
    2204:	9b03      	ldr	r3, [sp, #12]
    2206:	00db      	lsls	r3, r3, #3
    2208:	4413      	add	r3, r2
    220a:	685b      	ldr	r3, [r3, #4]
    220c:	2100      	movs	r1, #0
    220e:	9801      	ldr	r0, [sp, #4]
    2210:	4798      	blx	r3
}
    2212:	bf00      	nop
    2214:	b005      	add	sp, #20
    2216:	f85d fb04 	ldr.w	pc, [sp], #4
    221a:	bf00      	nop
    221c:	00007940 	.word	0x00007940
    2220:	000078e0 	.word	0x000078e0
    2224:	00007ec8 	.word	0x00007ec8

00002228 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    2228:	b500      	push	{lr}
    222a:	b083      	sub	sp, #12
    222c:	9001      	str	r0, [sp, #4]
    222e:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    2230:	4b08      	ldr	r3, [pc, #32]	; (2254 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    2232:	2200      	movs	r2, #0
    2234:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2236:	4b08      	ldr	r3, [pc, #32]	; (2258 <Clock_Ip_PowerModeChangeNotification+0x30>)
    2238:	681b      	ldr	r3, [r3, #0]
    223a:	2102      	movs	r1, #2
    223c:	4618      	mov	r0, r3
    223e:	f002 fd75 	bl	4d2c <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    2242:	9900      	ldr	r1, [sp, #0]
    2244:	9801      	ldr	r0, [sp, #4]
    2246:	f002 fc51 	bl	4aec <Clock_Ip_ClockPowerModeChangeNotification>
}
    224a:	bf00      	nop
    224c:	b003      	add	sp, #12
    224e:	f85d fb04 	ldr.w	pc, [sp], #4
    2252:	bf00      	nop
    2254:	1fff8b10 	.word	0x1fff8b10
    2258:	1fff8b5c 	.word	0x1fff8b5c

0000225c <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    225c:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    225e:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    2262:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    2264:	4b06      	ldr	r3, [pc, #24]	; (2280 <Clock_Ip_SetWaitStates+0x24>)
    2266:	785b      	ldrb	r3, [r3, #1]
    2268:	2b00      	cmp	r3, #0
    226a:	d005      	beq.n	2278 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    226c:	9b01      	ldr	r3, [sp, #4]
    226e:	3b01      	subs	r3, #1
    2270:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    2272:	9b01      	ldr	r3, [sp, #4]
    2274:	2b00      	cmp	r3, #0
    2276:	d1f9      	bne.n	226c <Clock_Ip_SetWaitStates+0x10>
    }
}
    2278:	bf00      	nop
    227a:	b002      	add	sp, #8
    227c:	4770      	bx	lr
    227e:	bf00      	nop
    2280:	1fff8b64 	.word	0x1fff8b64

00002284 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    2284:	b500      	push	{lr}
    2286:	b083      	sub	sp, #12
    2288:	9001      	str	r0, [sp, #4]
    228a:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    228c:	4b04      	ldr	r3, [pc, #16]	; (22a0 <Clock_Ip_ReportClockErrors+0x1c>)
    228e:	681b      	ldr	r3, [r3, #0]
    2290:	9900      	ldr	r1, [sp, #0]
    2292:	9801      	ldr	r0, [sp, #4]
    2294:	4798      	blx	r3
}
    2296:	bf00      	nop
    2298:	b003      	add	sp, #12
    229a:	f85d fb04 	ldr.w	pc, [sp], #4
    229e:	bf00      	nop
    22a0:	1fff8b14 	.word	0x1fff8b14

000022a4 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    22a4:	b500      	push	{lr}
    22a6:	b085      	sub	sp, #20
    22a8:	9003      	str	r0, [sp, #12]
    22aa:	9102      	str	r1, [sp, #8]
    22ac:	9201      	str	r2, [sp, #4]
    22ae:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    22b0:	2000      	movs	r0, #0
    22b2:	f7fe ffd0 	bl	1256 <OsIf_GetCounter>
    22b6:	4602      	mov	r2, r0
    22b8:	9b03      	ldr	r3, [sp, #12]
    22ba:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    22bc:	9b02      	ldr	r3, [sp, #8]
    22be:	2200      	movs	r2, #0
    22c0:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    22c2:	2100      	movs	r1, #0
    22c4:	9800      	ldr	r0, [sp, #0]
    22c6:	f7ff f812 	bl	12ee <OsIf_MicrosToTicks>
    22ca:	4602      	mov	r2, r0
    22cc:	9b01      	ldr	r3, [sp, #4]
    22ce:	601a      	str	r2, [r3, #0]
}
    22d0:	bf00      	nop
    22d2:	b005      	add	sp, #20
    22d4:	f85d fb04 	ldr.w	pc, [sp], #4

000022d8 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    22d8:	b500      	push	{lr}
    22da:	b087      	sub	sp, #28
    22dc:	9003      	str	r0, [sp, #12]
    22de:	9102      	str	r1, [sp, #8]
    22e0:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    22e2:	2300      	movs	r3, #0
    22e4:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    22e8:	2100      	movs	r1, #0
    22ea:	9803      	ldr	r0, [sp, #12]
    22ec:	f7fe ffcc 	bl	1288 <OsIf_GetElapsed>
    22f0:	4602      	mov	r2, r0
    22f2:	9b02      	ldr	r3, [sp, #8]
    22f4:	681b      	ldr	r3, [r3, #0]
    22f6:	441a      	add	r2, r3
    22f8:	9b02      	ldr	r3, [sp, #8]
    22fa:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    22fc:	9b02      	ldr	r3, [sp, #8]
    22fe:	681b      	ldr	r3, [r3, #0]
    2300:	9a01      	ldr	r2, [sp, #4]
    2302:	429a      	cmp	r2, r3
    2304:	d802      	bhi.n	230c <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    2306:	2301      	movs	r3, #1
    2308:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    230c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    2310:	4618      	mov	r0, r3
    2312:	b007      	add	sp, #28
    2314:	f85d fb04 	ldr.w	pc, [sp], #4

00002318 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    2318:	b082      	sub	sp, #8
    231a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    231c:	bf00      	nop
    231e:	b002      	add	sp, #8
    2320:	4770      	bx	lr

00002322 <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    2322:	b500      	push	{lr}
    2324:	b083      	sub	sp, #12
    2326:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2328:	9b01      	ldr	r3, [sp, #4]
    232a:	2b00      	cmp	r3, #0
    232c:	d002      	beq.n	2334 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    232e:	9801      	ldr	r0, [sp, #4]
    2330:	f000 f8ad 	bl	248e <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2334:	bf00      	nop
    2336:	b003      	add	sp, #12
    2338:	f85d fb04 	ldr.w	pc, [sp], #4

0000233c <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    233c:	b500      	push	{lr}
    233e:	b083      	sub	sp, #12
    2340:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2342:	9b01      	ldr	r3, [sp, #4]
    2344:	2b00      	cmp	r3, #0
    2346:	d002      	beq.n	234e <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    2348:	9801      	ldr	r0, [sp, #4]
    234a:	f000 f8cd 	bl	24e8 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    234e:	bf00      	nop
    2350:	b003      	add	sp, #12
    2352:	f85d fb04 	ldr.w	pc, [sp], #4

00002356 <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2356:	b500      	push	{lr}
    2358:	b083      	sub	sp, #12
    235a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    235c:	9b01      	ldr	r3, [sp, #4]
    235e:	2b00      	cmp	r3, #0
    2360:	d002      	beq.n	2368 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    2362:	9801      	ldr	r0, [sp, #4]
    2364:	f000 f8ee 	bl	2544 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2368:	bf00      	nop
    236a:	b003      	add	sp, #12
    236c:	f85d fb04 	ldr.w	pc, [sp], #4

00002370 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2370:	b500      	push	{lr}
    2372:	b083      	sub	sp, #12
    2374:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2376:	9b01      	ldr	r3, [sp, #4]
    2378:	2b00      	cmp	r3, #0
    237a:	d002      	beq.n	2382 <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    237c:	9801      	ldr	r0, [sp, #4]
    237e:	f000 f8f9 	bl	2574 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2382:	bf00      	nop
    2384:	b003      	add	sp, #12
    2386:	f85d fb04 	ldr.w	pc, [sp], #4

0000238a <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    238a:	b500      	push	{lr}
    238c:	b083      	sub	sp, #12
    238e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2390:	9b01      	ldr	r3, [sp, #4]
    2392:	2b00      	cmp	r3, #0
    2394:	d002      	beq.n	239c <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    2396:	9801      	ldr	r0, [sp, #4]
    2398:	f000 f904 	bl	25a4 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    239c:	bf00      	nop
    239e:	b003      	add	sp, #12
    23a0:	f85d fb04 	ldr.w	pc, [sp], #4

000023a4 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    23a4:	b500      	push	{lr}
    23a6:	b083      	sub	sp, #12
    23a8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    23aa:	9b01      	ldr	r3, [sp, #4]
    23ac:	2b00      	cmp	r3, #0
    23ae:	d002      	beq.n	23b6 <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    23b0:	9801      	ldr	r0, [sp, #4]
    23b2:	f000 f90f 	bl	25d4 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    23b6:	bf00      	nop
    23b8:	b003      	add	sp, #12
    23ba:	f85d fb04 	ldr.w	pc, [sp], #4

000023be <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    23be:	b500      	push	{lr}
    23c0:	b083      	sub	sp, #12
    23c2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    23c4:	9b01      	ldr	r3, [sp, #4]
    23c6:	2b00      	cmp	r3, #0
    23c8:	d002      	beq.n	23d0 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    23ca:	9801      	ldr	r0, [sp, #4]
    23cc:	f000 f91a 	bl	2604 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    23d0:	bf00      	nop
    23d2:	b003      	add	sp, #12
    23d4:	f85d fb04 	ldr.w	pc, [sp], #4

000023d8 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    23d8:	b500      	push	{lr}
    23da:	b083      	sub	sp, #12
    23dc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    23de:	9b01      	ldr	r3, [sp, #4]
    23e0:	2b00      	cmp	r3, #0
    23e2:	d002      	beq.n	23ea <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    23e4:	9801      	ldr	r0, [sp, #4]
    23e6:	f000 f925 	bl	2634 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    23ea:	bf00      	nop
    23ec:	b003      	add	sp, #12
    23ee:	f85d fb04 	ldr.w	pc, [sp], #4

000023f2 <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    23f2:	b500      	push	{lr}
    23f4:	b083      	sub	sp, #12
    23f6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    23f8:	9b01      	ldr	r3, [sp, #4]
    23fa:	2b00      	cmp	r3, #0
    23fc:	d002      	beq.n	2404 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    23fe:	9801      	ldr	r0, [sp, #4]
    2400:	f000 f930 	bl	2664 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2404:	bf00      	nop
    2406:	b003      	add	sp, #12
    2408:	f85d fb04 	ldr.w	pc, [sp], #4

0000240c <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    240c:	b500      	push	{lr}
    240e:	b083      	sub	sp, #12
    2410:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2412:	9b01      	ldr	r3, [sp, #4]
    2414:	2b00      	cmp	r3, #0
    2416:	d002      	beq.n	241e <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    2418:	9801      	ldr	r0, [sp, #4]
    241a:	f000 f93b 	bl	2694 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    241e:	bf00      	nop
    2420:	b003      	add	sp, #12
    2422:	f85d fb04 	ldr.w	pc, [sp], #4

00002426 <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2426:	b500      	push	{lr}
    2428:	b083      	sub	sp, #12
    242a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    242c:	9b01      	ldr	r3, [sp, #4]
    242e:	2b00      	cmp	r3, #0
    2430:	d002      	beq.n	2438 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    2432:	9801      	ldr	r0, [sp, #4]
    2434:	f000 f946 	bl	26c4 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2438:	bf00      	nop
    243a:	b003      	add	sp, #12
    243c:	f85d fb04 	ldr.w	pc, [sp], #4

00002440 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    2440:	b500      	push	{lr}
    2442:	b083      	sub	sp, #12
    2444:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2446:	9b01      	ldr	r3, [sp, #4]
    2448:	2b00      	cmp	r3, #0
    244a:	d002      	beq.n	2452 <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    244c:	9801      	ldr	r0, [sp, #4]
    244e:	f000 f951 	bl	26f4 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2452:	bf00      	nop
    2454:	b003      	add	sp, #12
    2456:	f85d fb04 	ldr.w	pc, [sp], #4

0000245a <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    245a:	b500      	push	{lr}
    245c:	b083      	sub	sp, #12
    245e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2460:	9b01      	ldr	r3, [sp, #4]
    2462:	2b00      	cmp	r3, #0
    2464:	d002      	beq.n	246c <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    2466:	9801      	ldr	r0, [sp, #4]
    2468:	f000 f95e 	bl	2728 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    246c:	bf00      	nop
    246e:	b003      	add	sp, #12
    2470:	f85d fb04 	ldr.w	pc, [sp], #4

00002474 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    2474:	b500      	push	{lr}
    2476:	b083      	sub	sp, #12
    2478:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    247a:	9b01      	ldr	r3, [sp, #4]
    247c:	2b00      	cmp	r3, #0
    247e:	d002      	beq.n	2486 <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    2480:	9801      	ldr	r0, [sp, #4]
    2482:	f000 f98b 	bl	279c <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2486:	bf00      	nop
    2488:	b003      	add	sp, #12
    248a:	f85d fb04 	ldr.w	pc, [sp], #4

0000248e <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    248e:	b086      	sub	sp, #24
    2490:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2492:	9b01      	ldr	r3, [sp, #4]
    2494:	681a      	ldr	r2, [r3, #0]
    2496:	4911      	ldr	r1, [pc, #68]	; (24dc <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    2498:	4613      	mov	r3, r2
    249a:	00db      	lsls	r3, r3, #3
    249c:	4413      	add	r3, r2
    249e:	440b      	add	r3, r1
    24a0:	781b      	ldrb	r3, [r3, #0]
    24a2:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    24a4:	9b01      	ldr	r3, [sp, #4]
    24a6:	685b      	ldr	r3, [r3, #4]
    24a8:	4a0d      	ldr	r2, [pc, #52]	; (24e0 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    24aa:	5cd3      	ldrb	r3, [r2, r3]
    24ac:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    24ae:	4a0d      	ldr	r2, [pc, #52]	; (24e4 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    24b0:	9b05      	ldr	r3, [sp, #20]
    24b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    24b6:	681b      	ldr	r3, [r3, #0]
    24b8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    24ba:	9b03      	ldr	r3, [sp, #12]
    24bc:	f023 0307 	bic.w	r3, r3, #7
    24c0:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    24c2:	9a03      	ldr	r2, [sp, #12]
    24c4:	9b04      	ldr	r3, [sp, #16]
    24c6:	4313      	orrs	r3, r2
    24c8:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    24ca:	4a06      	ldr	r2, [pc, #24]	; (24e4 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    24cc:	9b05      	ldr	r3, [sp, #20]
    24ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    24d2:	9a03      	ldr	r2, [sp, #12]
    24d4:	601a      	str	r2, [r3, #0]
}
    24d6:	bf00      	nop
    24d8:	b006      	add	sp, #24
    24da:	4770      	bx	lr
    24dc:	00007940 	.word	0x00007940
    24e0:	00007d38 	.word	0x00007d38
    24e4:	00007d7c 	.word	0x00007d7c

000024e8 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    24e8:	b086      	sub	sp, #24
    24ea:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    24ec:	9b01      	ldr	r3, [sp, #4]
    24ee:	681a      	ldr	r2, [r3, #0]
    24f0:	4911      	ldr	r1, [pc, #68]	; (2538 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    24f2:	4613      	mov	r3, r2
    24f4:	00db      	lsls	r3, r3, #3
    24f6:	4413      	add	r3, r2
    24f8:	440b      	add	r3, r1
    24fa:	781b      	ldrb	r3, [r3, #0]
    24fc:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    24fe:	9b01      	ldr	r3, [sp, #4]
    2500:	685b      	ldr	r3, [r3, #4]
    2502:	4a0e      	ldr	r2, [pc, #56]	; (253c <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    2504:	5cd3      	ldrb	r3, [r2, r3]
    2506:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2508:	4a0d      	ldr	r2, [pc, #52]	; (2540 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    250a:	9b05      	ldr	r3, [sp, #20]
    250c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2510:	681b      	ldr	r3, [r3, #0]
    2512:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    2514:	9b03      	ldr	r3, [sp, #12]
    2516:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    251a:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    251c:	9b04      	ldr	r3, [sp, #16]
    251e:	021b      	lsls	r3, r3, #8
    2520:	9a03      	ldr	r2, [sp, #12]
    2522:	4313      	orrs	r3, r2
    2524:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2526:	4a06      	ldr	r2, [pc, #24]	; (2540 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2528:	9b05      	ldr	r3, [sp, #20]
    252a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    252e:	9a03      	ldr	r2, [sp, #12]
    2530:	601a      	str	r2, [r3, #0]
}
    2532:	bf00      	nop
    2534:	b006      	add	sp, #24
    2536:	4770      	bx	lr
    2538:	00007940 	.word	0x00007940
    253c:	00007d38 	.word	0x00007d38
    2540:	00007d7c 	.word	0x00007d7c

00002544 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2544:	b084      	sub	sp, #16
    2546:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2548:	4b09      	ldr	r3, [pc, #36]	; (2570 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    254a:	695b      	ldr	r3, [r3, #20]
    254c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    254e:	9b03      	ldr	r3, [sp, #12]
    2550:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2554:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    2556:	9b01      	ldr	r3, [sp, #4]
    2558:	685b      	ldr	r3, [r3, #4]
    255a:	3b01      	subs	r3, #1
    255c:	041b      	lsls	r3, r3, #16
    255e:	9a03      	ldr	r2, [sp, #12]
    2560:	4313      	orrs	r3, r2
    2562:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2564:	4a02      	ldr	r2, [pc, #8]	; (2570 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2566:	9b03      	ldr	r3, [sp, #12]
    2568:	6153      	str	r3, [r2, #20]
}
    256a:	bf00      	nop
    256c:	b004      	add	sp, #16
    256e:	4770      	bx	lr
    2570:	40064000 	.word	0x40064000

00002574 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2574:	b084      	sub	sp, #16
    2576:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2578:	4b09      	ldr	r3, [pc, #36]	; (25a0 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    257a:	695b      	ldr	r3, [r3, #20]
    257c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    257e:	9b03      	ldr	r3, [sp, #12]
    2580:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2584:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    2586:	9b01      	ldr	r3, [sp, #4]
    2588:	685b      	ldr	r3, [r3, #4]
    258a:	3b01      	subs	r3, #1
    258c:	011b      	lsls	r3, r3, #4
    258e:	9a03      	ldr	r2, [sp, #12]
    2590:	4313      	orrs	r3, r2
    2592:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2594:	4a02      	ldr	r2, [pc, #8]	; (25a0 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2596:	9b03      	ldr	r3, [sp, #12]
    2598:	6153      	str	r3, [r2, #20]
}
    259a:	bf00      	nop
    259c:	b004      	add	sp, #16
    259e:	4770      	bx	lr
    25a0:	40064000 	.word	0x40064000

000025a4 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    25a4:	b084      	sub	sp, #16
    25a6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    25a8:	4b09      	ldr	r3, [pc, #36]	; (25d0 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    25aa:	695b      	ldr	r3, [r3, #20]
    25ac:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    25ae:	9b03      	ldr	r3, [sp, #12]
    25b0:	f023 030f 	bic.w	r3, r3, #15
    25b4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    25b6:	9b01      	ldr	r3, [sp, #4]
    25b8:	685b      	ldr	r3, [r3, #4]
    25ba:	3b01      	subs	r3, #1
    25bc:	9a03      	ldr	r2, [sp, #12]
    25be:	4313      	orrs	r3, r2
    25c0:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    25c2:	4a03      	ldr	r2, [pc, #12]	; (25d0 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    25c4:	9b03      	ldr	r3, [sp, #12]
    25c6:	6153      	str	r3, [r2, #20]
}
    25c8:	bf00      	nop
    25ca:	b004      	add	sp, #16
    25cc:	4770      	bx	lr
    25ce:	bf00      	nop
    25d0:	40064000 	.word	0x40064000

000025d4 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    25d4:	b084      	sub	sp, #16
    25d6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    25d8:	4b09      	ldr	r3, [pc, #36]	; (2600 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    25da:	699b      	ldr	r3, [r3, #24]
    25dc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    25de:	9b03      	ldr	r3, [sp, #12]
    25e0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    25e4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    25e6:	9b01      	ldr	r3, [sp, #4]
    25e8:	685b      	ldr	r3, [r3, #4]
    25ea:	3b01      	subs	r3, #1
    25ec:	041b      	lsls	r3, r3, #16
    25ee:	9a03      	ldr	r2, [sp, #12]
    25f0:	4313      	orrs	r3, r2
    25f2:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    25f4:	4a02      	ldr	r2, [pc, #8]	; (2600 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    25f6:	9b03      	ldr	r3, [sp, #12]
    25f8:	6193      	str	r3, [r2, #24]
}
    25fa:	bf00      	nop
    25fc:	b004      	add	sp, #16
    25fe:	4770      	bx	lr
    2600:	40064000 	.word	0x40064000

00002604 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2604:	b084      	sub	sp, #16
    2606:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2608:	4b09      	ldr	r3, [pc, #36]	; (2630 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    260a:	699b      	ldr	r3, [r3, #24]
    260c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    260e:	9b03      	ldr	r3, [sp, #12]
    2610:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2614:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    2616:	9b01      	ldr	r3, [sp, #4]
    2618:	685b      	ldr	r3, [r3, #4]
    261a:	3b01      	subs	r3, #1
    261c:	011b      	lsls	r3, r3, #4
    261e:	9a03      	ldr	r2, [sp, #12]
    2620:	4313      	orrs	r3, r2
    2622:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2624:	4a02      	ldr	r2, [pc, #8]	; (2630 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2626:	9b03      	ldr	r3, [sp, #12]
    2628:	6193      	str	r3, [r2, #24]
}
    262a:	bf00      	nop
    262c:	b004      	add	sp, #16
    262e:	4770      	bx	lr
    2630:	40064000 	.word	0x40064000

00002634 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2634:	b084      	sub	sp, #16
    2636:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2638:	4b09      	ldr	r3, [pc, #36]	; (2660 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    263a:	699b      	ldr	r3, [r3, #24]
    263c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    263e:	9b03      	ldr	r3, [sp, #12]
    2640:	f023 030f 	bic.w	r3, r3, #15
    2644:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    2646:	9b01      	ldr	r3, [sp, #4]
    2648:	685b      	ldr	r3, [r3, #4]
    264a:	3b01      	subs	r3, #1
    264c:	9a03      	ldr	r2, [sp, #12]
    264e:	4313      	orrs	r3, r2
    2650:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2652:	4a03      	ldr	r2, [pc, #12]	; (2660 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2654:	9b03      	ldr	r3, [sp, #12]
    2656:	6193      	str	r3, [r2, #24]
}
    2658:	bf00      	nop
    265a:	b004      	add	sp, #16
    265c:	4770      	bx	lr
    265e:	bf00      	nop
    2660:	40064000 	.word	0x40064000

00002664 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2664:	b084      	sub	sp, #16
    2666:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2668:	4b09      	ldr	r3, [pc, #36]	; (2690 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    266a:	69db      	ldr	r3, [r3, #28]
    266c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    266e:	9b03      	ldr	r3, [sp, #12]
    2670:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2674:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    2676:	9b01      	ldr	r3, [sp, #4]
    2678:	685b      	ldr	r3, [r3, #4]
    267a:	3b01      	subs	r3, #1
    267c:	041b      	lsls	r3, r3, #16
    267e:	9a03      	ldr	r2, [sp, #12]
    2680:	4313      	orrs	r3, r2
    2682:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2684:	4a02      	ldr	r2, [pc, #8]	; (2690 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2686:	9b03      	ldr	r3, [sp, #12]
    2688:	61d3      	str	r3, [r2, #28]
}
    268a:	bf00      	nop
    268c:	b004      	add	sp, #16
    268e:	4770      	bx	lr
    2690:	40064000 	.word	0x40064000

00002694 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2694:	b084      	sub	sp, #16
    2696:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2698:	4b09      	ldr	r3, [pc, #36]	; (26c0 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    269a:	69db      	ldr	r3, [r3, #28]
    269c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    269e:	9b03      	ldr	r3, [sp, #12]
    26a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    26a4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    26a6:	9b01      	ldr	r3, [sp, #4]
    26a8:	685b      	ldr	r3, [r3, #4]
    26aa:	3b01      	subs	r3, #1
    26ac:	011b      	lsls	r3, r3, #4
    26ae:	9a03      	ldr	r2, [sp, #12]
    26b0:	4313      	orrs	r3, r2
    26b2:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    26b4:	4a02      	ldr	r2, [pc, #8]	; (26c0 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    26b6:	9b03      	ldr	r3, [sp, #12]
    26b8:	61d3      	str	r3, [r2, #28]
}
    26ba:	bf00      	nop
    26bc:	b004      	add	sp, #16
    26be:	4770      	bx	lr
    26c0:	40064000 	.word	0x40064000

000026c4 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    26c4:	b084      	sub	sp, #16
    26c6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    26c8:	4b09      	ldr	r3, [pc, #36]	; (26f0 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    26ca:	69db      	ldr	r3, [r3, #28]
    26cc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    26ce:	9b03      	ldr	r3, [sp, #12]
    26d0:	f023 030f 	bic.w	r3, r3, #15
    26d4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    26d6:	9b01      	ldr	r3, [sp, #4]
    26d8:	685b      	ldr	r3, [r3, #4]
    26da:	3b01      	subs	r3, #1
    26dc:	9a03      	ldr	r2, [sp, #12]
    26de:	4313      	orrs	r3, r2
    26e0:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    26e2:	4a03      	ldr	r2, [pc, #12]	; (26f0 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    26e4:	9b03      	ldr	r3, [sp, #12]
    26e6:	61d3      	str	r3, [r2, #28]
}
    26e8:	bf00      	nop
    26ea:	b004      	add	sp, #16
    26ec:	4770      	bx	lr
    26ee:	bf00      	nop
    26f0:	40064000 	.word	0x40064000

000026f4 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    26f4:	b084      	sub	sp, #16
    26f6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    26f8:	4b0a      	ldr	r3, [pc, #40]	; (2724 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    26fa:	685b      	ldr	r3, [r3, #4]
    26fc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    26fe:	9b03      	ldr	r3, [sp, #12]
    2700:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2704:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    2706:	9b01      	ldr	r3, [sp, #4]
    2708:	685b      	ldr	r3, [r3, #4]
    270a:	3b01      	subs	r3, #1
    270c:	021b      	lsls	r3, r3, #8
    270e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    2712:	9a03      	ldr	r2, [sp, #12]
    2714:	4313      	orrs	r3, r2
    2716:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    2718:	4a02      	ldr	r2, [pc, #8]	; (2724 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    271a:	9b03      	ldr	r3, [sp, #12]
    271c:	6053      	str	r3, [r2, #4]
}
    271e:	bf00      	nop
    2720:	b004      	add	sp, #16
    2722:	4770      	bx	lr
    2724:	40048000 	.word	0x40048000

00002728 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2728:	b084      	sub	sp, #16
    272a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    272c:	4919      	ldr	r1, [pc, #100]	; (2794 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    272e:	9b01      	ldr	r3, [sp, #4]
    2730:	681a      	ldr	r2, [r3, #0]
    2732:	4819      	ldr	r0, [pc, #100]	; (2798 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2734:	4613      	mov	r3, r2
    2736:	00db      	lsls	r3, r3, #3
    2738:	4413      	add	r3, r2
    273a:	4403      	add	r3, r0
    273c:	3305      	adds	r3, #5
    273e:	781b      	ldrb	r3, [r3, #0]
    2740:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    2744:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    2746:	9b03      	ldr	r3, [sp, #12]
    2748:	f023 030f 	bic.w	r3, r3, #15
    274c:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    274e:	9b01      	ldr	r3, [sp, #4]
    2750:	685b      	ldr	r3, [r3, #4]
    2752:	3b01      	subs	r3, #1
    2754:	f003 0307 	and.w	r3, r3, #7
    2758:	9a03      	ldr	r2, [sp, #12]
    275a:	4313      	orrs	r3, r2
    275c:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    275e:	9b01      	ldr	r3, [sp, #4]
    2760:	7a1b      	ldrb	r3, [r3, #8]
    2762:	3b01      	subs	r3, #1
    2764:	00db      	lsls	r3, r3, #3
    2766:	f003 0308 	and.w	r3, r3, #8
    276a:	9a03      	ldr	r2, [sp, #12]
    276c:	4313      	orrs	r3, r2
    276e:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    2770:	4908      	ldr	r1, [pc, #32]	; (2794 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    2772:	9b01      	ldr	r3, [sp, #4]
    2774:	681a      	ldr	r2, [r3, #0]
    2776:	4808      	ldr	r0, [pc, #32]	; (2798 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2778:	4613      	mov	r3, r2
    277a:	00db      	lsls	r3, r3, #3
    277c:	4413      	add	r3, r2
    277e:	4403      	add	r3, r0
    2780:	3305      	adds	r3, #5
    2782:	781b      	ldrb	r3, [r3, #0]
    2784:	461a      	mov	r2, r3
    2786:	9b03      	ldr	r3, [sp, #12]
    2788:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    278c:	bf00      	nop
    278e:	b004      	add	sp, #16
    2790:	4770      	bx	lr
    2792:	bf00      	nop
    2794:	40065000 	.word	0x40065000
    2798:	00007940 	.word	0x00007940

0000279c <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    279c:	b084      	sub	sp, #16
    279e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    27a0:	4b10      	ldr	r3, [pc, #64]	; (27e4 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    27a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    27a4:	4a0f      	ldr	r2, [pc, #60]	; (27e4 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    27a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    27aa:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    27ac:	4b0d      	ldr	r3, [pc, #52]	; (27e4 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    27ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    27b0:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    27b2:	9b03      	ldr	r3, [sp, #12]
    27b4:	f023 030f 	bic.w	r3, r3, #15
    27b8:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    27ba:	9b01      	ldr	r3, [sp, #4]
    27bc:	685b      	ldr	r3, [r3, #4]
    27be:	3b01      	subs	r3, #1
    27c0:	005b      	lsls	r3, r3, #1
    27c2:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    27c6:	9b01      	ldr	r3, [sp, #4]
    27c8:	7a1b      	ldrb	r3, [r3, #8]
    27ca:	3b01      	subs	r3, #1
    27cc:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    27d0:	4313      	orrs	r3, r2
    27d2:	9a03      	ldr	r2, [sp, #12]
    27d4:	4313      	orrs	r3, r2
    27d6:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    27d8:	4a02      	ldr	r2, [pc, #8]	; (27e4 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    27da:	9b03      	ldr	r3, [sp, #12]
    27dc:	6693      	str	r3, [r2, #104]	; 0x68
}
    27de:	bf00      	nop
    27e0:	b004      	add	sp, #16
    27e2:	4770      	bx	lr
    27e4:	40048000 	.word	0x40048000

000027e8 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    27e8:	b082      	sub	sp, #8
    27ea:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    27ec:	bf00      	nop
    27ee:	b002      	add	sp, #8
    27f0:	4770      	bx	lr
	...

000027f4 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    27f4:	b082      	sub	sp, #8
    27f6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    27f8:	bf00      	nop
    27fa:	b002      	add	sp, #8
    27fc:	4770      	bx	lr

000027fe <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    27fe:	b082      	sub	sp, #8
    2800:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    2802:	bf00      	nop
    2804:	b002      	add	sp, #8
    2806:	4770      	bx	lr

00002808 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2808:	b500      	push	{lr}
    280a:	b083      	sub	sp, #12
    280c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    280e:	9b01      	ldr	r3, [sp, #4]
    2810:	2b00      	cmp	r3, #0
    2812:	d002      	beq.n	281a <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    2814:	9801      	ldr	r0, [sp, #4]
    2816:	f000 f86a 	bl	28ee <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    281a:	bf00      	nop
    281c:	b003      	add	sp, #12
    281e:	f85d fb04 	ldr.w	pc, [sp], #4

00002822 <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2822:	b500      	push	{lr}
    2824:	b083      	sub	sp, #12
    2826:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2828:	9b01      	ldr	r3, [sp, #4]
    282a:	2b00      	cmp	r3, #0
    282c:	d002      	beq.n	2834 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    282e:	9801      	ldr	r0, [sp, #4]
    2830:	f000 f884 	bl	293c <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    2834:	bf00      	nop
    2836:	b003      	add	sp, #12
    2838:	f85d fb04 	ldr.w	pc, [sp], #4

0000283c <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    283c:	b500      	push	{lr}
    283e:	b089      	sub	sp, #36	; 0x24
    2840:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2842:	2300      	movs	r3, #0
    2844:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    2848:	9b01      	ldr	r3, [sp, #4]
    284a:	2b00      	cmp	r3, #0
    284c:	d031      	beq.n	28b2 <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    284e:	4b1b      	ldr	r3, [pc, #108]	; (28bc <Clock_Ip_CompleteSOSC+0x80>)
    2850:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2854:	f003 0301 	and.w	r3, r3, #1
    2858:	2b00      	cmp	r3, #0
    285a:	d02a      	beq.n	28b2 <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    285c:	aa03      	add	r2, sp, #12
    285e:	a904      	add	r1, sp, #16
    2860:	a805      	add	r0, sp, #20
    2862:	f24c 3350 	movw	r3, #50000	; 0xc350
    2866:	f7ff fd1d 	bl	22a4 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    286a:	4b14      	ldr	r3, [pc, #80]	; (28bc <Clock_Ip_CompleteSOSC+0x80>)
    286c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2870:	0e1b      	lsrs	r3, r3, #24
    2872:	f003 0301 	and.w	r3, r3, #1
    2876:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2878:	9a03      	ldr	r2, [sp, #12]
    287a:	a904      	add	r1, sp, #16
    287c:	ab05      	add	r3, sp, #20
    287e:	4618      	mov	r0, r3
    2880:	f7ff fd2a 	bl	22d8 <Clock_Ip_TimeoutExpired>
    2884:	4603      	mov	r3, r0
    2886:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    288a:	9b06      	ldr	r3, [sp, #24]
    288c:	2b00      	cmp	r3, #0
    288e:	d106      	bne.n	289e <Clock_Ip_CompleteSOSC+0x62>
    2890:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2894:	f083 0301 	eor.w	r3, r3, #1
    2898:	b2db      	uxtb	r3, r3
    289a:	2b00      	cmp	r3, #0
    289c:	d1e5      	bne.n	286a <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    289e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    28a2:	2b00      	cmp	r3, #0
    28a4:	d005      	beq.n	28b2 <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    28a6:	9b01      	ldr	r3, [sp, #4]
    28a8:	681b      	ldr	r3, [r3, #0]
    28aa:	4619      	mov	r1, r3
    28ac:	2001      	movs	r0, #1
    28ae:	f7ff fce9 	bl	2284 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    28b2:	bf00      	nop
    28b4:	b009      	add	sp, #36	; 0x24
    28b6:	f85d fb04 	ldr.w	pc, [sp], #4
    28ba:	bf00      	nop
    28bc:	40064000 	.word	0x40064000

000028c0 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    28c0:	b500      	push	{lr}
    28c2:	b083      	sub	sp, #12
    28c4:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    28c6:	9801      	ldr	r0, [sp, #4]
    28c8:	f000 f8c0 	bl	2a4c <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    28cc:	bf00      	nop
    28ce:	b003      	add	sp, #12
    28d0:	f85d fb04 	ldr.w	pc, [sp], #4

000028d4 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    28d4:	b500      	push	{lr}
    28d6:	b083      	sub	sp, #12
    28d8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    28da:	9b01      	ldr	r3, [sp, #4]
    28dc:	2b00      	cmp	r3, #0
    28de:	d002      	beq.n	28e6 <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    28e0:	9801      	ldr	r0, [sp, #4]
    28e2:	f000 f8c3 	bl	2a6c <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    28e6:	bf00      	nop
    28e8:	b003      	add	sp, #12
    28ea:	f85d fb04 	ldr.w	pc, [sp], #4

000028ee <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    28ee:	b082      	sub	sp, #8
    28f0:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    28f2:	4b11      	ldr	r3, [pc, #68]	; (2938 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    28f4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    28f8:	4a0f      	ldr	r2, [pc, #60]	; (2938 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    28fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    28fe:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    2902:	4b0d      	ldr	r3, [pc, #52]	; (2938 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2904:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2908:	4a0b      	ldr	r2, [pc, #44]	; (2938 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    290a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    290e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    2912:	4b09      	ldr	r3, [pc, #36]	; (2938 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2914:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2918:	4a07      	ldr	r2, [pc, #28]	; (2938 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    291a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    291e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    2922:	4b05      	ldr	r3, [pc, #20]	; (2938 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2924:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2928:	4a03      	ldr	r2, [pc, #12]	; (2938 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    292a:	f023 0301 	bic.w	r3, r3, #1
    292e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    2932:	bf00      	nop
    2934:	b002      	add	sp, #8
    2936:	4770      	bx	lr
    2938:	40064000 	.word	0x40064000

0000293c <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    293c:	b082      	sub	sp, #8
    293e:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    2940:	9b01      	ldr	r3, [sp, #4]
    2942:	891b      	ldrh	r3, [r3, #8]
    2944:	2b01      	cmp	r3, #1
    2946:	d174      	bne.n	2a32 <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    2948:	9b01      	ldr	r3, [sp, #4]
    294a:	7bdb      	ldrb	r3, [r3, #15]
    294c:	2b00      	cmp	r3, #0
    294e:	d002      	beq.n	2956 <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    2950:	2b01      	cmp	r3, #1
    2952:	d009      	beq.n	2968 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    2954:	e011      	b.n	297a <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    2956:	4b39      	ldr	r3, [pc, #228]	; (2a3c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2958:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    295c:	4a37      	ldr	r2, [pc, #220]	; (2a3c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    295e:	f023 0308 	bic.w	r3, r3, #8
    2962:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    2966:	e008      	b.n	297a <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    2968:	4b34      	ldr	r3, [pc, #208]	; (2a3c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    296a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    296e:	4a33      	ldr	r2, [pc, #204]	; (2a3c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2970:	f043 0308 	orr.w	r3, r3, #8
    2974:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    2978:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    297a:	4b30      	ldr	r3, [pc, #192]	; (2a3c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    297c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2980:	4a2e      	ldr	r2, [pc, #184]	; (2a3c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2982:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    2986:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    298a:	9b01      	ldr	r3, [sp, #4]
    298c:	685b      	ldr	r3, [r3, #4]
    298e:	4a2c      	ldr	r2, [pc, #176]	; (2a40 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    2990:	4293      	cmp	r3, r2
    2992:	d90d      	bls.n	29b0 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    2994:	9b01      	ldr	r3, [sp, #4]
    2996:	685b      	ldr	r3, [r3, #4]
    2998:	4a2a      	ldr	r2, [pc, #168]	; (2a44 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    299a:	4293      	cmp	r3, r2
    299c:	d208      	bcs.n	29b0 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    299e:	4b27      	ldr	r3, [pc, #156]	; (2a3c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    29a0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    29a4:	4a25      	ldr	r2, [pc, #148]	; (2a3c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    29a6:	f043 0320 	orr.w	r3, r3, #32
    29aa:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    29ae:	e007      	b.n	29c0 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    29b0:	4b22      	ldr	r3, [pc, #136]	; (2a3c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    29b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    29b6:	4a21      	ldr	r2, [pc, #132]	; (2a3c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    29b8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    29bc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    29c0:	9b01      	ldr	r3, [sp, #4]
    29c2:	7b1b      	ldrb	r3, [r3, #12]
    29c4:	2b00      	cmp	r3, #0
    29c6:	d108      	bne.n	29da <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    29c8:	4b1c      	ldr	r3, [pc, #112]	; (2a3c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    29ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    29ce:	4a1b      	ldr	r2, [pc, #108]	; (2a3c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    29d0:	f043 0304 	orr.w	r3, r3, #4
    29d4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    29d8:	e007      	b.n	29ea <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    29da:	4b18      	ldr	r3, [pc, #96]	; (2a3c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    29dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    29e0:	4a16      	ldr	r2, [pc, #88]	; (2a3c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    29e2:	f023 0304 	bic.w	r3, r3, #4
    29e6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    29ea:	9b01      	ldr	r3, [sp, #4]
    29ec:	7c1b      	ldrb	r3, [r3, #16]
    29ee:	2b02      	cmp	r3, #2
    29f0:	d011      	beq.n	2a16 <Clock_Ip_SetSOSC_TrustedCall+0xda>
    29f2:	2b02      	cmp	r3, #2
    29f4:	dc14      	bgt.n	2a20 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    29f6:	2b00      	cmp	r3, #0
    29f8:	d002      	beq.n	2a00 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    29fa:	2b01      	cmp	r3, #1
    29fc:	d005      	beq.n	2a0a <Clock_Ip_SetSOSC_TrustedCall+0xce>
    29fe:	e00f      	b.n	2a20 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    2a00:	4b0e      	ldr	r3, [pc, #56]	; (2a3c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2a02:	2201      	movs	r2, #1
    2a04:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    2a08:	e014      	b.n	2a34 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    2a0a:	4b0c      	ldr	r3, [pc, #48]	; (2a3c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2a0c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    2a10:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    2a14:	e00e      	b.n	2a34 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    2a16:	4b09      	ldr	r3, [pc, #36]	; (2a3c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2a18:	4a0b      	ldr	r2, [pc, #44]	; (2a48 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    2a1a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    2a1e:	e009      	b.n	2a34 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    2a20:	4b06      	ldr	r3, [pc, #24]	; (2a3c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2a22:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2a26:	4a05      	ldr	r2, [pc, #20]	; (2a3c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2a28:	f043 0301 	orr.w	r3, r3, #1
    2a2c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    2a30:	e000      	b.n	2a34 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    2a32:	bf00      	nop
}
    2a34:	bf00      	nop
    2a36:	b002      	add	sp, #8
    2a38:	4770      	bx	lr
    2a3a:	bf00      	nop
    2a3c:	40064000 	.word	0x40064000
    2a40:	003d08ff 	.word	0x003d08ff
    2a44:	007a1200 	.word	0x007a1200
    2a48:	00030001 	.word	0x00030001

00002a4c <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    2a4c:	b082      	sub	sp, #8
    2a4e:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    2a50:	4b05      	ldr	r3, [pc, #20]	; (2a68 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    2a52:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2a56:	4a04      	ldr	r2, [pc, #16]	; (2a68 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    2a58:	f023 0301 	bic.w	r3, r3, #1
    2a5c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    2a60:	bf00      	nop
    2a62:	b002      	add	sp, #8
    2a64:	4770      	bx	lr
    2a66:	bf00      	nop
    2a68:	40064000 	.word	0x40064000

00002a6c <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    2a6c:	b082      	sub	sp, #8
    2a6e:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    2a70:	9b01      	ldr	r3, [sp, #4]
    2a72:	891b      	ldrh	r3, [r3, #8]
    2a74:	2b01      	cmp	r3, #1
    2a76:	d107      	bne.n	2a88 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    2a78:	4b05      	ldr	r3, [pc, #20]	; (2a90 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    2a7a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2a7e:	4a04      	ldr	r2, [pc, #16]	; (2a90 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    2a80:	f043 0301 	orr.w	r3, r3, #1
    2a84:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    2a88:	bf00      	nop
    2a8a:	b002      	add	sp, #8
    2a8c:	4770      	bx	lr
    2a8e:	bf00      	nop
    2a90:	40064000 	.word	0x40064000

00002a94 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    2a94:	b082      	sub	sp, #8
    2a96:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2a98:	bf00      	nop
    2a9a:	b002      	add	sp, #8
    2a9c:	4770      	bx	lr

00002a9e <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    2a9e:	b082      	sub	sp, #8
    2aa0:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    2aa2:	2300      	movs	r3, #0
}
    2aa4:	4618      	mov	r0, r3
    2aa6:	b002      	add	sp, #8
    2aa8:	4770      	bx	lr

00002aaa <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    2aaa:	b082      	sub	sp, #8
    2aac:	9001      	str	r0, [sp, #4]
    2aae:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    2ab0:	bf00      	nop
    2ab2:	b002      	add	sp, #8
    2ab4:	4770      	bx	lr
	...

00002ab8 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    2ab8:	b082      	sub	sp, #8
    2aba:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2abc:	bf00      	nop
    2abe:	b002      	add	sp, #8
    2ac0:	4770      	bx	lr

00002ac2 <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    2ac2:	b082      	sub	sp, #8
    2ac4:	9001      	str	r0, [sp, #4]
    2ac6:	460b      	mov	r3, r1
    2ac8:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    2acc:	bf00      	nop
    2ace:	b002      	add	sp, #8
    2ad0:	4770      	bx	lr

00002ad2 <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    2ad2:	b500      	push	{lr}
    2ad4:	b083      	sub	sp, #12
    2ad6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ad8:	9b01      	ldr	r3, [sp, #4]
    2ada:	2b00      	cmp	r3, #0
    2adc:	d002      	beq.n	2ae4 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    2ade:	9801      	ldr	r0, [sp, #4]
    2ae0:	f000 f8e7 	bl	2cb2 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ae4:	bf00      	nop
    2ae6:	b003      	add	sp, #12
    2ae8:	f85d fb04 	ldr.w	pc, [sp], #4

00002aec <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2aec:	b500      	push	{lr}
    2aee:	b085      	sub	sp, #20
    2af0:	9001      	str	r0, [sp, #4]
    2af2:	460b      	mov	r3, r1
    2af4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2af8:	9b01      	ldr	r3, [sp, #4]
    2afa:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2afc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2b00:	2b00      	cmp	r3, #0
    2b02:	d003      	beq.n	2b0c <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    2b04:	2300      	movs	r3, #0
    2b06:	f8ad 300c 	strh.w	r3, [sp, #12]
    2b0a:	e002      	b.n	2b12 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2b0c:	2301      	movs	r3, #1
    2b0e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    2b12:	ab02      	add	r3, sp, #8
    2b14:	4618      	mov	r0, r3
    2b16:	f7ff ffdc 	bl	2ad2 <Clock_Ip_ClockSetSimLPO1KEnable>
}
    2b1a:	bf00      	nop
    2b1c:	b005      	add	sp, #20
    2b1e:	f85d fb04 	ldr.w	pc, [sp], #4

00002b22 <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    2b22:	b500      	push	{lr}
    2b24:	b083      	sub	sp, #12
    2b26:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2b28:	9b01      	ldr	r3, [sp, #4]
    2b2a:	2b00      	cmp	r3, #0
    2b2c:	d002      	beq.n	2b34 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    2b2e:	9801      	ldr	r0, [sp, #4]
    2b30:	f000 f8d6 	bl	2ce0 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2b34:	bf00      	nop
    2b36:	b003      	add	sp, #12
    2b38:	f85d fb04 	ldr.w	pc, [sp], #4

00002b3c <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2b3c:	b500      	push	{lr}
    2b3e:	b085      	sub	sp, #20
    2b40:	9001      	str	r0, [sp, #4]
    2b42:	460b      	mov	r3, r1
    2b44:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2b48:	9b01      	ldr	r3, [sp, #4]
    2b4a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2b4c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2b50:	2b00      	cmp	r3, #0
    2b52:	d003      	beq.n	2b5c <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    2b54:	2300      	movs	r3, #0
    2b56:	f8ad 300c 	strh.w	r3, [sp, #12]
    2b5a:	e002      	b.n	2b62 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2b5c:	2301      	movs	r3, #1
    2b5e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    2b62:	ab02      	add	r3, sp, #8
    2b64:	4618      	mov	r0, r3
    2b66:	f7ff ffdc 	bl	2b22 <Clock_Ip_ClockSetSimLPO32KEnable>
}
    2b6a:	bf00      	nop
    2b6c:	b005      	add	sp, #20
    2b6e:	f85d fb04 	ldr.w	pc, [sp], #4

00002b72 <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    2b72:	b500      	push	{lr}
    2b74:	b083      	sub	sp, #12
    2b76:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2b78:	9b01      	ldr	r3, [sp, #4]
    2b7a:	2b00      	cmp	r3, #0
    2b7c:	d002      	beq.n	2b84 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    2b7e:	9801      	ldr	r0, [sp, #4]
    2b80:	f000 f8c6 	bl	2d10 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2b84:	bf00      	nop
    2b86:	b003      	add	sp, #12
    2b88:	f85d fb04 	ldr.w	pc, [sp], #4

00002b8c <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2b8c:	b500      	push	{lr}
    2b8e:	b085      	sub	sp, #20
    2b90:	9001      	str	r0, [sp, #4]
    2b92:	460b      	mov	r3, r1
    2b94:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2b98:	9b01      	ldr	r3, [sp, #4]
    2b9a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2b9c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2ba0:	2b00      	cmp	r3, #0
    2ba2:	d003      	beq.n	2bac <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    2ba4:	2300      	movs	r3, #0
    2ba6:	f8ad 300c 	strh.w	r3, [sp, #12]
    2baa:	e002      	b.n	2bb2 <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2bac:	2301      	movs	r3, #1
    2bae:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    2bb2:	ab02      	add	r3, sp, #8
    2bb4:	4618      	mov	r0, r3
    2bb6:	f7ff ffdc 	bl	2b72 <Clock_Ip_ClockSetSimClkoutEnable>
}
    2bba:	bf00      	nop
    2bbc:	b005      	add	sp, #20
    2bbe:	f85d fb04 	ldr.w	pc, [sp], #4

00002bc2 <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    2bc2:	b500      	push	{lr}
    2bc4:	b083      	sub	sp, #12
    2bc6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2bc8:	9b01      	ldr	r3, [sp, #4]
    2bca:	2b00      	cmp	r3, #0
    2bcc:	d002      	beq.n	2bd4 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    2bce:	9801      	ldr	r0, [sp, #4]
    2bd0:	f000 f8b6 	bl	2d40 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2bd4:	bf00      	nop
    2bd6:	b003      	add	sp, #12
    2bd8:	f85d fb04 	ldr.w	pc, [sp], #4

00002bdc <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2bdc:	b500      	push	{lr}
    2bde:	b085      	sub	sp, #20
    2be0:	9001      	str	r0, [sp, #4]
    2be2:	460b      	mov	r3, r1
    2be4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2be8:	9b01      	ldr	r3, [sp, #4]
    2bea:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2bec:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2bf0:	2b00      	cmp	r3, #0
    2bf2:	d003      	beq.n	2bfc <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    2bf4:	2300      	movs	r3, #0
    2bf6:	f8ad 300c 	strh.w	r3, [sp, #12]
    2bfa:	e002      	b.n	2c02 <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2bfc:	2301      	movs	r3, #1
    2bfe:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    2c02:	ab02      	add	r3, sp, #8
    2c04:	4618      	mov	r0, r3
    2c06:	f7ff ffdc 	bl	2bc2 <Clock_Ip_ClockSetPccCgcEnable>
}
    2c0a:	bf00      	nop
    2c0c:	b005      	add	sp, #20
    2c0e:	f85d fb04 	ldr.w	pc, [sp], #4

00002c12 <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    2c12:	b500      	push	{lr}
    2c14:	b083      	sub	sp, #12
    2c16:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c18:	9b01      	ldr	r3, [sp, #4]
    2c1a:	2b00      	cmp	r3, #0
    2c1c:	d002      	beq.n	2c24 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    2c1e:	9801      	ldr	r0, [sp, #4]
    2c20:	f000 f8bc 	bl	2d9c <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c24:	bf00      	nop
    2c26:	b003      	add	sp, #12
    2c28:	f85d fb04 	ldr.w	pc, [sp], #4

00002c2c <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    2c2c:	b500      	push	{lr}
    2c2e:	b085      	sub	sp, #20
    2c30:	9001      	str	r0, [sp, #4]
    2c32:	460b      	mov	r3, r1
    2c34:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2c38:	9b01      	ldr	r3, [sp, #4]
    2c3a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2c3c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2c40:	2b00      	cmp	r3, #0
    2c42:	d003      	beq.n	2c4c <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    2c44:	2300      	movs	r3, #0
    2c46:	f8ad 300c 	strh.w	r3, [sp, #12]
    2c4a:	e002      	b.n	2c52 <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2c4c:	2301      	movs	r3, #1
    2c4e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    2c52:	ab02      	add	r3, sp, #8
    2c54:	4618      	mov	r0, r3
    2c56:	f7ff ffdc 	bl	2c12 <Clock_Ip_ClockSetSimGate>
}
    2c5a:	bf00      	nop
    2c5c:	b005      	add	sp, #20
    2c5e:	f85d fb04 	ldr.w	pc, [sp], #4

00002c62 <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    2c62:	b500      	push	{lr}
    2c64:	b083      	sub	sp, #12
    2c66:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c68:	9b01      	ldr	r3, [sp, #4]
    2c6a:	2b00      	cmp	r3, #0
    2c6c:	d002      	beq.n	2c74 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    2c6e:	9801      	ldr	r0, [sp, #4]
    2c70:	f000 f8c0 	bl	2df4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c74:	bf00      	nop
    2c76:	b003      	add	sp, #12
    2c78:	f85d fb04 	ldr.w	pc, [sp], #4

00002c7c <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2c7c:	b500      	push	{lr}
    2c7e:	b085      	sub	sp, #20
    2c80:	9001      	str	r0, [sp, #4]
    2c82:	460b      	mov	r3, r1
    2c84:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2c88:	9b01      	ldr	r3, [sp, #4]
    2c8a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2c8c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2c90:	2b00      	cmp	r3, #0
    2c92:	d003      	beq.n	2c9c <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    2c94:	2300      	movs	r3, #0
    2c96:	f8ad 300c 	strh.w	r3, [sp, #12]
    2c9a:	e002      	b.n	2ca2 <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2c9c:	2301      	movs	r3, #1
    2c9e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    2ca2:	ab02      	add	r3, sp, #8
    2ca4:	4618      	mov	r0, r3
    2ca6:	f7ff ffdc 	bl	2c62 <Clock_Ip_ClockSetSimTraceEnable>
}
    2caa:	bf00      	nop
    2cac:	b005      	add	sp, #20
    2cae:	f85d fb04 	ldr.w	pc, [sp], #4

00002cb2 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2cb2:	b084      	sub	sp, #16
    2cb4:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    2cb6:	4b09      	ldr	r3, [pc, #36]	; (2cdc <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    2cb8:	691b      	ldr	r3, [r3, #16]
    2cba:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    2cbc:	9b03      	ldr	r3, [sp, #12]
    2cbe:	f023 0301 	bic.w	r3, r3, #1
    2cc2:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    2cc4:	9b01      	ldr	r3, [sp, #4]
    2cc6:	889b      	ldrh	r3, [r3, #4]
    2cc8:	461a      	mov	r2, r3
    2cca:	9b03      	ldr	r3, [sp, #12]
    2ccc:	4313      	orrs	r3, r2
    2cce:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    2cd0:	4a02      	ldr	r2, [pc, #8]	; (2cdc <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    2cd2:	9b03      	ldr	r3, [sp, #12]
    2cd4:	6113      	str	r3, [r2, #16]
}
    2cd6:	bf00      	nop
    2cd8:	b004      	add	sp, #16
    2cda:	4770      	bx	lr
    2cdc:	40048000 	.word	0x40048000

00002ce0 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2ce0:	b084      	sub	sp, #16
    2ce2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    2ce4:	4b09      	ldr	r3, [pc, #36]	; (2d0c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    2ce6:	691b      	ldr	r3, [r3, #16]
    2ce8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    2cea:	9b03      	ldr	r3, [sp, #12]
    2cec:	f023 0302 	bic.w	r3, r3, #2
    2cf0:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    2cf2:	9b01      	ldr	r3, [sp, #4]
    2cf4:	889b      	ldrh	r3, [r3, #4]
    2cf6:	005b      	lsls	r3, r3, #1
    2cf8:	9a03      	ldr	r2, [sp, #12]
    2cfa:	4313      	orrs	r3, r2
    2cfc:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    2cfe:	4a03      	ldr	r2, [pc, #12]	; (2d0c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    2d00:	9b03      	ldr	r3, [sp, #12]
    2d02:	6113      	str	r3, [r2, #16]
}
    2d04:	bf00      	nop
    2d06:	b004      	add	sp, #16
    2d08:	4770      	bx	lr
    2d0a:	bf00      	nop
    2d0c:	40048000 	.word	0x40048000

00002d10 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2d10:	b084      	sub	sp, #16
    2d12:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    2d14:	4b09      	ldr	r3, [pc, #36]	; (2d3c <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    2d16:	685b      	ldr	r3, [r3, #4]
    2d18:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    2d1a:	9b03      	ldr	r3, [sp, #12]
    2d1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    2d20:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    2d22:	9b01      	ldr	r3, [sp, #4]
    2d24:	889b      	ldrh	r3, [r3, #4]
    2d26:	02db      	lsls	r3, r3, #11
    2d28:	9a03      	ldr	r2, [sp, #12]
    2d2a:	4313      	orrs	r3, r2
    2d2c:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    2d2e:	4a03      	ldr	r2, [pc, #12]	; (2d3c <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    2d30:	9b03      	ldr	r3, [sp, #12]
    2d32:	6053      	str	r3, [r2, #4]
}
    2d34:	bf00      	nop
    2d36:	b004      	add	sp, #16
    2d38:	4770      	bx	lr
    2d3a:	bf00      	nop
    2d3c:	40048000 	.word	0x40048000

00002d40 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2d40:	b084      	sub	sp, #16
    2d42:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    2d44:	4913      	ldr	r1, [pc, #76]	; (2d94 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    2d46:	9b01      	ldr	r3, [sp, #4]
    2d48:	681a      	ldr	r2, [r3, #0]
    2d4a:	4813      	ldr	r0, [pc, #76]	; (2d98 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    2d4c:	4613      	mov	r3, r2
    2d4e:	00db      	lsls	r3, r3, #3
    2d50:	4413      	add	r3, r2
    2d52:	4403      	add	r3, r0
    2d54:	3306      	adds	r3, #6
    2d56:	781b      	ldrb	r3, [r3, #0]
    2d58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    2d5c:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    2d5e:	9b03      	ldr	r3, [sp, #12]
    2d60:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    2d64:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    2d66:	9b01      	ldr	r3, [sp, #4]
    2d68:	889b      	ldrh	r3, [r3, #4]
    2d6a:	079b      	lsls	r3, r3, #30
    2d6c:	9a03      	ldr	r2, [sp, #12]
    2d6e:	4313      	orrs	r3, r2
    2d70:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    2d72:	4908      	ldr	r1, [pc, #32]	; (2d94 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    2d74:	9b01      	ldr	r3, [sp, #4]
    2d76:	681a      	ldr	r2, [r3, #0]
    2d78:	4807      	ldr	r0, [pc, #28]	; (2d98 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    2d7a:	4613      	mov	r3, r2
    2d7c:	00db      	lsls	r3, r3, #3
    2d7e:	4413      	add	r3, r2
    2d80:	4403      	add	r3, r0
    2d82:	3306      	adds	r3, #6
    2d84:	781b      	ldrb	r3, [r3, #0]
    2d86:	461a      	mov	r2, r3
    2d88:	9b03      	ldr	r3, [sp, #12]
    2d8a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    2d8e:	bf00      	nop
    2d90:	b004      	add	sp, #16
    2d92:	4770      	bx	lr
    2d94:	40065000 	.word	0x40065000
    2d98:	00007940 	.word	0x00007940

00002d9c <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2d9c:	b086      	sub	sp, #24
    2d9e:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    2da0:	9b01      	ldr	r3, [sp, #4]
    2da2:	889b      	ldrh	r3, [r3, #4]
    2da4:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    2da6:	9b01      	ldr	r3, [sp, #4]
    2da8:	681a      	ldr	r2, [r3, #0]
    2daa:	4910      	ldr	r1, [pc, #64]	; (2dec <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    2dac:	4613      	mov	r3, r2
    2dae:	00db      	lsls	r3, r3, #3
    2db0:	4413      	add	r3, r2
    2db2:	440b      	add	r3, r1
    2db4:	3306      	adds	r3, #6
    2db6:	781b      	ldrb	r3, [r3, #0]
    2db8:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    2dba:	4b0d      	ldr	r3, [pc, #52]	; (2df0 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    2dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2dbe:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    2dc0:	2201      	movs	r2, #1
    2dc2:	9b04      	ldr	r3, [sp, #16]
    2dc4:	fa02 f303 	lsl.w	r3, r2, r3
    2dc8:	43db      	mvns	r3, r3
    2dca:	9a03      	ldr	r2, [sp, #12]
    2dcc:	4013      	ands	r3, r2
    2dce:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    2dd0:	9a05      	ldr	r2, [sp, #20]
    2dd2:	9b04      	ldr	r3, [sp, #16]
    2dd4:	fa02 f303 	lsl.w	r3, r2, r3
    2dd8:	9a03      	ldr	r2, [sp, #12]
    2dda:	4313      	orrs	r3, r2
    2ddc:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    2dde:	4a04      	ldr	r2, [pc, #16]	; (2df0 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    2de0:	9b03      	ldr	r3, [sp, #12]
    2de2:	6413      	str	r3, [r2, #64]	; 0x40
}
    2de4:	bf00      	nop
    2de6:	b006      	add	sp, #24
    2de8:	4770      	bx	lr
    2dea:	bf00      	nop
    2dec:	00007940 	.word	0x00007940
    2df0:	40048000 	.word	0x40048000

00002df4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2df4:	b084      	sub	sp, #16
    2df6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    2df8:	4b0a      	ldr	r3, [pc, #40]	; (2e24 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    2dfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2dfc:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    2dfe:	9b01      	ldr	r3, [sp, #4]
    2e00:	889b      	ldrh	r3, [r3, #4]
    2e02:	2b01      	cmp	r3, #1
    2e04:	d104      	bne.n	2e10 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    2e06:	9b03      	ldr	r3, [sp, #12]
    2e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2e0c:	9303      	str	r3, [sp, #12]
    2e0e:	e003      	b.n	2e18 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    2e10:	9b03      	ldr	r3, [sp, #12]
    2e12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    2e16:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    2e18:	4a02      	ldr	r2, [pc, #8]	; (2e24 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    2e1a:	9b03      	ldr	r3, [sp, #12]
    2e1c:	6693      	str	r3, [r2, #104]	; 0x68
}
    2e1e:	bf00      	nop
    2e20:	b004      	add	sp, #16
    2e22:	4770      	bx	lr
    2e24:	40048000 	.word	0x40048000

00002e28 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    2e28:	b082      	sub	sp, #8
    2e2a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2e2c:	bf00      	nop
    2e2e:	b002      	add	sp, #8
    2e30:	4770      	bx	lr

00002e32 <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    2e32:	b082      	sub	sp, #8
    2e34:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    2e36:	bf00      	nop
    2e38:	b002      	add	sp, #8
    2e3a:	4770      	bx	lr

00002e3c <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2e3c:	b500      	push	{lr}
    2e3e:	b083      	sub	sp, #12
    2e40:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e42:	9b01      	ldr	r3, [sp, #4]
    2e44:	2b00      	cmp	r3, #0
    2e46:	d002      	beq.n	2e4e <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    2e48:	9801      	ldr	r0, [sp, #4]
    2e4a:	f000 f8d1 	bl	2ff0 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2e4e:	bf00      	nop
    2e50:	b003      	add	sp, #12
    2e52:	f85d fb04 	ldr.w	pc, [sp], #4

00002e56 <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2e56:	b500      	push	{lr}
    2e58:	b083      	sub	sp, #12
    2e5a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e5c:	9b01      	ldr	r3, [sp, #4]
    2e5e:	2b00      	cmp	r3, #0
    2e60:	d002      	beq.n	2e68 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    2e62:	9801      	ldr	r0, [sp, #4]
    2e64:	f000 f950 	bl	3108 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2e68:	bf00      	nop
    2e6a:	b003      	add	sp, #12
    2e6c:	f85d fb04 	ldr.w	pc, [sp], #4

00002e70 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    2e70:	b500      	push	{lr}
    2e72:	b083      	sub	sp, #12
    2e74:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    2e76:	9801      	ldr	r0, [sp, #4]
    2e78:	f000 f98e 	bl	3198 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2e7c:	bf00      	nop
    2e7e:	b003      	add	sp, #12
    2e80:	f85d fb04 	ldr.w	pc, [sp], #4

00002e84 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    2e84:	b500      	push	{lr}
    2e86:	b083      	sub	sp, #12
    2e88:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e8a:	9b01      	ldr	r3, [sp, #4]
    2e8c:	2b00      	cmp	r3, #0
    2e8e:	d002      	beq.n	2e96 <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    2e90:	9801      	ldr	r0, [sp, #4]
    2e92:	f000 f999 	bl	31c8 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2e96:	bf00      	nop
    2e98:	b003      	add	sp, #12
    2e9a:	f85d fb04 	ldr.w	pc, [sp], #4

00002e9e <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    2e9e:	b500      	push	{lr}
    2ea0:	b083      	sub	sp, #12
    2ea2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ea4:	9b01      	ldr	r3, [sp, #4]
    2ea6:	2b00      	cmp	r3, #0
    2ea8:	d002      	beq.n	2eb0 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    2eaa:	9801      	ldr	r0, [sp, #4]
    2eac:	f000 f9b0 	bl	3210 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2eb0:	bf00      	nop
    2eb2:	b003      	add	sp, #12
    2eb4:	f85d fb04 	ldr.w	pc, [sp], #4

00002eb8 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    2eb8:	b500      	push	{lr}
    2eba:	b083      	sub	sp, #12
    2ebc:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    2ebe:	9801      	ldr	r0, [sp, #4]
    2ec0:	f000 f9ba 	bl	3238 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2ec4:	bf00      	nop
    2ec6:	b003      	add	sp, #12
    2ec8:	f85d fb04 	ldr.w	pc, [sp], #4

00002ecc <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    2ecc:	b500      	push	{lr}
    2ece:	b083      	sub	sp, #12
    2ed0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ed2:	9b01      	ldr	r3, [sp, #4]
    2ed4:	2b00      	cmp	r3, #0
    2ed6:	d002      	beq.n	2ede <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    2ed8:	9801      	ldr	r0, [sp, #4]
    2eda:	f000 f9bd 	bl	3258 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ede:	bf00      	nop
    2ee0:	b003      	add	sp, #12
    2ee2:	f85d fb04 	ldr.w	pc, [sp], #4

00002ee6 <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    2ee6:	b500      	push	{lr}
    2ee8:	b083      	sub	sp, #12
    2eea:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2eec:	9b01      	ldr	r3, [sp, #4]
    2eee:	2b00      	cmp	r3, #0
    2ef0:	d002      	beq.n	2ef8 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    2ef2:	9801      	ldr	r0, [sp, #4]
    2ef4:	f000 f9d4 	bl	32a0 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ef8:	bf00      	nop
    2efa:	b003      	add	sp, #12
    2efc:	f85d fb04 	ldr.w	pc, [sp], #4

00002f00 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    2f00:	b500      	push	{lr}
    2f02:	b083      	sub	sp, #12
    2f04:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    2f06:	9801      	ldr	r0, [sp, #4]
    2f08:	f000 f9de 	bl	32c8 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2f0c:	bf00      	nop
    2f0e:	b003      	add	sp, #12
    2f10:	f85d fb04 	ldr.w	pc, [sp], #4

00002f14 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    2f14:	b500      	push	{lr}
    2f16:	b089      	sub	sp, #36	; 0x24
    2f18:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    2f1a:	2300      	movs	r3, #0
    2f1c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    2f20:	4b20      	ldr	r3, [pc, #128]	; (2fa4 <SetInputSouceSytemClock+0x90>)
    2f22:	695b      	ldr	r3, [r3, #20]
    2f24:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    2f26:	9b06      	ldr	r3, [sp, #24]
    2f28:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    2f2c:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    2f2e:	9b01      	ldr	r3, [sp, #4]
    2f30:	061b      	lsls	r3, r3, #24
    2f32:	9a06      	ldr	r2, [sp, #24]
    2f34:	4313      	orrs	r3, r2
    2f36:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    2f38:	4a1a      	ldr	r2, [pc, #104]	; (2fa4 <SetInputSouceSytemClock+0x90>)
    2f3a:	9b06      	ldr	r3, [sp, #24]
    2f3c:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2f3e:	aa02      	add	r2, sp, #8
    2f40:	a903      	add	r1, sp, #12
    2f42:	a804      	add	r0, sp, #16
    2f44:	f24c 3350 	movw	r3, #50000	; 0xc350
    2f48:	f7ff f9ac 	bl	22a4 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    2f4c:	4b15      	ldr	r3, [pc, #84]	; (2fa4 <SetInputSouceSytemClock+0x90>)
    2f4e:	691b      	ldr	r3, [r3, #16]
    2f50:	0e1b      	lsrs	r3, r3, #24
    2f52:	f003 030f 	and.w	r3, r3, #15
    2f56:	9a01      	ldr	r2, [sp, #4]
    2f58:	429a      	cmp	r2, r3
    2f5a:	bf0c      	ite	eq
    2f5c:	2301      	moveq	r3, #1
    2f5e:	2300      	movne	r3, #0
    2f60:	b2db      	uxtb	r3, r3
    2f62:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2f64:	9a02      	ldr	r2, [sp, #8]
    2f66:	a903      	add	r1, sp, #12
    2f68:	ab04      	add	r3, sp, #16
    2f6a:	4618      	mov	r0, r3
    2f6c:	f7ff f9b4 	bl	22d8 <Clock_Ip_TimeoutExpired>
    2f70:	4603      	mov	r3, r0
    2f72:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    2f76:	9b05      	ldr	r3, [sp, #20]
    2f78:	2b00      	cmp	r3, #0
    2f7a:	d106      	bne.n	2f8a <SetInputSouceSytemClock+0x76>
    2f7c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2f80:	f083 0301 	eor.w	r3, r3, #1
    2f84:	b2db      	uxtb	r3, r3
    2f86:	2b00      	cmp	r3, #0
    2f88:	d1e0      	bne.n	2f4c <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    2f8a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2f8e:	2b00      	cmp	r3, #0
    2f90:	d003      	beq.n	2f9a <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    2f92:	2105      	movs	r1, #5
    2f94:	2001      	movs	r0, #1
    2f96:	f7ff f975 	bl	2284 <Clock_Ip_ReportClockErrors>
    }
}
    2f9a:	bf00      	nop
    2f9c:	b009      	add	sp, #36	; 0x24
    2f9e:	f85d fb04 	ldr.w	pc, [sp], #4
    2fa2:	bf00      	nop
    2fa4:	40064000 	.word	0x40064000

00002fa8 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2fa8:	b500      	push	{lr}
    2faa:	b083      	sub	sp, #12
    2fac:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2fae:	9b01      	ldr	r3, [sp, #4]
    2fb0:	2b00      	cmp	r3, #0
    2fb2:	d002      	beq.n	2fba <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    2fb4:	9801      	ldr	r0, [sp, #4]
    2fb6:	f000 f997 	bl	32e8 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2fba:	bf00      	nop
    2fbc:	b003      	add	sp, #12
    2fbe:	f85d fb04 	ldr.w	pc, [sp], #4

00002fc2 <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2fc2:	b500      	push	{lr}
    2fc4:	b083      	sub	sp, #12
    2fc6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2fc8:	9b01      	ldr	r3, [sp, #4]
    2fca:	2b00      	cmp	r3, #0
    2fcc:	d002      	beq.n	2fd4 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    2fce:	9801      	ldr	r0, [sp, #4]
    2fd0:	f000 fa7e 	bl	34d0 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2fd4:	bf00      	nop
    2fd6:	b003      	add	sp, #12
    2fd8:	f85d fb04 	ldr.w	pc, [sp], #4

00002fdc <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    2fdc:	b500      	push	{lr}
    2fde:	b083      	sub	sp, #12
    2fe0:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    2fe2:	9801      	ldr	r0, [sp, #4]
    2fe4:	f000 fab8 	bl	3558 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2fe8:	bf00      	nop
    2fea:	b003      	add	sp, #12
    2fec:	f85d fb04 	ldr.w	pc, [sp], #4

00002ff0 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2ff0:	b500      	push	{lr}
    2ff2:	b08b      	sub	sp, #44	; 0x2c
    2ff4:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2ff6:	2300      	movs	r3, #0
    2ff8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    2ffc:	9b01      	ldr	r3, [sp, #4]
    2ffe:	2b00      	cmp	r3, #0
    3000:	d10b      	bne.n	301a <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    3002:	2305      	movs	r3, #5
    3004:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    3006:	2301      	movs	r3, #1
    3008:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    300c:	2301      	movs	r3, #1
    300e:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    3012:	2301      	movs	r3, #1
    3014:	f88d 3010 	strb.w	r3, [sp, #16]
    3018:	e00e      	b.n	3038 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    301a:	9b01      	ldr	r3, [sp, #4]
    301c:	681b      	ldr	r3, [r3, #0]
    301e:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    3020:	9b01      	ldr	r3, [sp, #4]
    3022:	79db      	ldrb	r3, [r3, #7]
    3024:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    3028:	9b01      	ldr	r3, [sp, #4]
    302a:	889b      	ldrh	r3, [r3, #4]
    302c:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    3030:	9b01      	ldr	r3, [sp, #4]
    3032:	7a1b      	ldrb	r3, [r3, #8]
    3034:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3038:	4b32      	ldr	r3, [pc, #200]	; (3104 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    303a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    303e:	4a31      	ldr	r2, [pc, #196]	; (3104 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3040:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3044:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    3048:	4b2e      	ldr	r3, [pc, #184]	; (3104 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    304a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    304e:	4a2d      	ldr	r2, [pc, #180]	; (3104 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3050:	f023 0301 	bic.w	r3, r3, #1
    3054:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3058:	4b2a      	ldr	r3, [pc, #168]	; (3104 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    305a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    305e:	4a29      	ldr	r2, [pc, #164]	; (3104 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3060:	f023 0304 	bic.w	r3, r3, #4
    3064:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    3068:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    306c:	2b01      	cmp	r3, #1
    306e:	d144      	bne.n	30fa <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    3070:	f89d 300f 	ldrb.w	r3, [sp, #15]
    3074:	4a23      	ldr	r2, [pc, #140]	; (3104 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3076:	f003 0301 	and.w	r3, r3, #1
    307a:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    307e:	4b21      	ldr	r3, [pc, #132]	; (3104 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3080:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3084:	4a1f      	ldr	r2, [pc, #124]	; (3104 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3086:	f043 0301 	orr.w	r3, r3, #1
    308a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    308e:	4b1d      	ldr	r3, [pc, #116]	; (3104 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3090:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3094:	f89d 3010 	ldrb.w	r3, [sp, #16]
    3098:	009b      	lsls	r3, r3, #2
    309a:	f003 0304 	and.w	r3, r3, #4
    309e:	4919      	ldr	r1, [pc, #100]	; (3104 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    30a0:	4313      	orrs	r3, r2
    30a2:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    30a6:	aa05      	add	r2, sp, #20
    30a8:	a906      	add	r1, sp, #24
    30aa:	a807      	add	r0, sp, #28
    30ac:	f24c 3350 	movw	r3, #50000	; 0xc350
    30b0:	f7ff f8f8 	bl	22a4 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    30b4:	4b13      	ldr	r3, [pc, #76]	; (3104 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    30b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    30ba:	0e1b      	lsrs	r3, r3, #24
    30bc:	f003 0301 	and.w	r3, r3, #1
    30c0:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    30c2:	9a05      	ldr	r2, [sp, #20]
    30c4:	a906      	add	r1, sp, #24
    30c6:	ab07      	add	r3, sp, #28
    30c8:	4618      	mov	r0, r3
    30ca:	f7ff f905 	bl	22d8 <Clock_Ip_TimeoutExpired>
    30ce:	4603      	mov	r3, r0
    30d0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    30d4:	9b08      	ldr	r3, [sp, #32]
    30d6:	2b00      	cmp	r3, #0
    30d8:	d106      	bne.n	30e8 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    30da:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    30de:	f083 0301 	eor.w	r3, r3, #1
    30e2:	b2db      	uxtb	r3, r3
    30e4:	2b00      	cmp	r3, #0
    30e6:	d1e5      	bne.n	30b4 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    30e8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    30ec:	2b00      	cmp	r3, #0
    30ee:	d004      	beq.n	30fa <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    30f0:	9b02      	ldr	r3, [sp, #8]
    30f2:	4619      	mov	r1, r3
    30f4:	2001      	movs	r0, #1
    30f6:	f7ff f8c5 	bl	2284 <Clock_Ip_ReportClockErrors>
        }
    }
}
    30fa:	bf00      	nop
    30fc:	b00b      	add	sp, #44	; 0x2c
    30fe:	f85d fb04 	ldr.w	pc, [sp], #4
    3102:	bf00      	nop
    3104:	40064000 	.word	0x40064000

00003108 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3108:	b500      	push	{lr}
    310a:	b089      	sub	sp, #36	; 0x24
    310c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    310e:	2300      	movs	r3, #0
    3110:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3114:	4b1f      	ldr	r3, [pc, #124]	; (3194 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3116:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    311a:	4a1e      	ldr	r2, [pc, #120]	; (3194 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    311c:	f043 0301 	orr.w	r3, r3, #1
    3120:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    3124:	4b1b      	ldr	r3, [pc, #108]	; (3194 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3126:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    312a:	4a1a      	ldr	r2, [pc, #104]	; (3194 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    312c:	f043 0304 	orr.w	r3, r3, #4
    3130:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3134:	aa03      	add	r2, sp, #12
    3136:	a904      	add	r1, sp, #16
    3138:	a805      	add	r0, sp, #20
    313a:	f24c 3350 	movw	r3, #50000	; 0xc350
    313e:	f7ff f8b1 	bl	22a4 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3142:	4b14      	ldr	r3, [pc, #80]	; (3194 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3144:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3148:	0e1b      	lsrs	r3, r3, #24
    314a:	f003 0301 	and.w	r3, r3, #1
    314e:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3150:	9a03      	ldr	r2, [sp, #12]
    3152:	a904      	add	r1, sp, #16
    3154:	ab05      	add	r3, sp, #20
    3156:	4618      	mov	r0, r3
    3158:	f7ff f8be 	bl	22d8 <Clock_Ip_TimeoutExpired>
    315c:	4603      	mov	r3, r0
    315e:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3162:	9b06      	ldr	r3, [sp, #24]
    3164:	2b00      	cmp	r3, #0
    3166:	d106      	bne.n	3176 <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    3168:	f89d 301f 	ldrb.w	r3, [sp, #31]
    316c:	f083 0301 	eor.w	r3, r3, #1
    3170:	b2db      	uxtb	r3, r3
    3172:	2b00      	cmp	r3, #0
    3174:	d1e5      	bne.n	3142 <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    3176:	f89d 301f 	ldrb.w	r3, [sp, #31]
    317a:	2b00      	cmp	r3, #0
    317c:	d005      	beq.n	318a <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    317e:	9b01      	ldr	r3, [sp, #4]
    3180:	681b      	ldr	r3, [r3, #0]
    3182:	4619      	mov	r1, r3
    3184:	2001      	movs	r0, #1
    3186:	f7ff f87d 	bl	2284 <Clock_Ip_ReportClockErrors>
    }
}
    318a:	bf00      	nop
    318c:	b009      	add	sp, #36	; 0x24
    318e:	f85d fb04 	ldr.w	pc, [sp], #4
    3192:	bf00      	nop
    3194:	40064000 	.word	0x40064000

00003198 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    3198:	b082      	sub	sp, #8
    319a:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    319c:	4b09      	ldr	r3, [pc, #36]	; (31c4 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    319e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    31a2:	4a08      	ldr	r2, [pc, #32]	; (31c4 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    31a4:	f023 0301 	bic.w	r3, r3, #1
    31a8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    31ac:	4b05      	ldr	r3, [pc, #20]	; (31c4 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    31ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    31b2:	4a04      	ldr	r2, [pc, #16]	; (31c4 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    31b4:	f023 0304 	bic.w	r3, r3, #4
    31b8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    31bc:	bf00      	nop
    31be:	b002      	add	sp, #8
    31c0:	4770      	bx	lr
    31c2:	bf00      	nop
    31c4:	40064000 	.word	0x40064000

000031c8 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    31c8:	b082      	sub	sp, #8
    31ca:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    31cc:	4b0f      	ldr	r3, [pc, #60]	; (320c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    31ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    31d2:	4a0e      	ldr	r2, [pc, #56]	; (320c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    31d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    31d8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    31dc:	4b0b      	ldr	r3, [pc, #44]	; (320c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    31de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    31e2:	4a0a      	ldr	r2, [pc, #40]	; (320c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    31e4:	f023 0304 	bic.w	r3, r3, #4
    31e8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    31ec:	4b07      	ldr	r3, [pc, #28]	; (320c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    31ee:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    31f2:	9b01      	ldr	r3, [sp, #4]
    31f4:	7a1b      	ldrb	r3, [r3, #8]
    31f6:	009b      	lsls	r3, r3, #2
    31f8:	f003 0304 	and.w	r3, r3, #4
    31fc:	4903      	ldr	r1, [pc, #12]	; (320c <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    31fe:	4313      	orrs	r3, r2
    3200:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3204:	bf00      	nop
    3206:	b002      	add	sp, #8
    3208:	4770      	bx	lr
    320a:	bf00      	nop
    320c:	40064000 	.word	0x40064000

00003210 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3210:	b082      	sub	sp, #8
    3212:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3214:	9b01      	ldr	r3, [sp, #4]
    3216:	889b      	ldrh	r3, [r3, #4]
    3218:	2b01      	cmp	r3, #1
    321a:	d107      	bne.n	322c <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    321c:	4b05      	ldr	r3, [pc, #20]	; (3234 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    321e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3222:	4a04      	ldr	r2, [pc, #16]	; (3234 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3224:	f043 0304 	orr.w	r3, r3, #4
    3228:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    322c:	bf00      	nop
    322e:	b002      	add	sp, #8
    3230:	4770      	bx	lr
    3232:	bf00      	nop
    3234:	40064000 	.word	0x40064000

00003238 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    3238:	b082      	sub	sp, #8
    323a:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    323c:	4b05      	ldr	r3, [pc, #20]	; (3254 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    323e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3242:	4a04      	ldr	r2, [pc, #16]	; (3254 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3244:	f023 0304 	bic.w	r3, r3, #4
    3248:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    324c:	bf00      	nop
    324e:	b002      	add	sp, #8
    3250:	4770      	bx	lr
    3252:	bf00      	nop
    3254:	40064000 	.word	0x40064000

00003258 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3258:	b082      	sub	sp, #8
    325a:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    325c:	4b0f      	ldr	r3, [pc, #60]	; (329c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    325e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3262:	4a0e      	ldr	r2, [pc, #56]	; (329c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3264:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3268:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    326c:	4b0b      	ldr	r3, [pc, #44]	; (329c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    326e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3272:	4a0a      	ldr	r2, [pc, #40]	; (329c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3274:	f023 0302 	bic.w	r3, r3, #2
    3278:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    327c:	4b07      	ldr	r3, [pc, #28]	; (329c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    327e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3282:	9b01      	ldr	r3, [sp, #4]
    3284:	7a5b      	ldrb	r3, [r3, #9]
    3286:	005b      	lsls	r3, r3, #1
    3288:	f003 0302 	and.w	r3, r3, #2
    328c:	4903      	ldr	r1, [pc, #12]	; (329c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    328e:	4313      	orrs	r3, r2
    3290:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3294:	bf00      	nop
    3296:	b002      	add	sp, #8
    3298:	4770      	bx	lr
    329a:	bf00      	nop
    329c:	40064000 	.word	0x40064000

000032a0 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    32a0:	b082      	sub	sp, #8
    32a2:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    32a4:	9b01      	ldr	r3, [sp, #4]
    32a6:	889b      	ldrh	r3, [r3, #4]
    32a8:	2b01      	cmp	r3, #1
    32aa:	d107      	bne.n	32bc <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    32ac:	4b05      	ldr	r3, [pc, #20]	; (32c4 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    32ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    32b2:	4a04      	ldr	r2, [pc, #16]	; (32c4 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    32b4:	f043 0302 	orr.w	r3, r3, #2
    32b8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    32bc:	bf00      	nop
    32be:	b002      	add	sp, #8
    32c0:	4770      	bx	lr
    32c2:	bf00      	nop
    32c4:	40064000 	.word	0x40064000

000032c8 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    32c8:	b082      	sub	sp, #8
    32ca:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    32cc:	4b05      	ldr	r3, [pc, #20]	; (32e4 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    32ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    32d2:	4a04      	ldr	r2, [pc, #16]	; (32e4 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    32d4:	f023 0302 	bic.w	r3, r3, #2
    32d8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    32dc:	bf00      	nop
    32de:	b002      	add	sp, #8
    32e0:	4770      	bx	lr
    32e2:	bf00      	nop
    32e4:	40064000 	.word	0x40064000

000032e8 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    32e8:	b500      	push	{lr}
    32ea:	b08b      	sub	sp, #44	; 0x2c
    32ec:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    32ee:	9b01      	ldr	r3, [sp, #4]
    32f0:	681a      	ldr	r2, [r3, #0]
    32f2:	4975      	ldr	r1, [pc, #468]	; (34c8 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    32f4:	4613      	mov	r3, r2
    32f6:	00db      	lsls	r3, r3, #3
    32f8:	4413      	add	r3, r2
    32fa:	440b      	add	r3, r1
    32fc:	781b      	ldrb	r3, [r3, #0]
    32fe:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    3300:	2300      	movs	r3, #0
    3302:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    3306:	2300      	movs	r3, #0
    3308:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    330c:	4b6f      	ldr	r3, [pc, #444]	; (34cc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    330e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3312:	4a6e      	ldr	r2, [pc, #440]	; (34cc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3314:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3318:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    331c:	4b6b      	ldr	r3, [pc, #428]	; (34cc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    331e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3326:	2b00      	cmp	r3, #0
    3328:	d07d      	beq.n	3426 <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    332a:	9b01      	ldr	r3, [sp, #4]
    332c:	79db      	ldrb	r3, [r3, #7]
    332e:	461a      	mov	r2, r3
    3330:	4b66      	ldr	r3, [pc, #408]	; (34cc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3332:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3336:	f003 0303 	and.w	r3, r3, #3
    333a:	429a      	cmp	r2, r3
    333c:	d10b      	bne.n	3356 <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    333e:	9b01      	ldr	r3, [sp, #4]
    3340:	799b      	ldrb	r3, [r3, #6]
    3342:	461a      	mov	r2, r3
    3344:	4b61      	ldr	r3, [pc, #388]	; (34cc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3346:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    334a:	08db      	lsrs	r3, r3, #3
    334c:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3350:	429a      	cmp	r2, r3
    3352:	f000 80b4 	beq.w	34be <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    3356:	4b5d      	ldr	r3, [pc, #372]	; (34cc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3358:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    335c:	f003 0301 	and.w	r3, r3, #1
    3360:	2b00      	cmp	r3, #0
    3362:	d105      	bne.n	3370 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    3364:	2301      	movs	r3, #1
    3366:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    336a:	2000      	movs	r0, #0
    336c:	f7ff fd66 	bl	2e3c <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    3370:	2002      	movs	r0, #2
    3372:	f7ff fdcf 	bl	2f14 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3376:	4b55      	ldr	r3, [pc, #340]	; (34cc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3378:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    337c:	4a53      	ldr	r2, [pc, #332]	; (34cc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    337e:	f023 0301 	bic.w	r3, r3, #1
    3382:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    3386:	9b01      	ldr	r3, [sp, #4]
    3388:	889b      	ldrh	r3, [r3, #4]
    338a:	2b01      	cmp	r3, #1
    338c:	f040 8097 	bne.w	34be <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3390:	9b01      	ldr	r3, [sp, #4]
    3392:	79db      	ldrb	r3, [r3, #7]
    3394:	4a4d      	ldr	r2, [pc, #308]	; (34cc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3396:	f003 0303 	and.w	r3, r3, #3
    339a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    339e:	4b4b      	ldr	r3, [pc, #300]	; (34cc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    33a0:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    33a4:	9b01      	ldr	r3, [sp, #4]
    33a6:	799b      	ldrb	r3, [r3, #6]
    33a8:	00db      	lsls	r3, r3, #3
    33aa:	f003 0308 	and.w	r3, r3, #8
    33ae:	4313      	orrs	r3, r2
    33b0:	4a46      	ldr	r2, [pc, #280]	; (34cc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    33b2:	f043 0301 	orr.w	r3, r3, #1
    33b6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    33ba:	aa03      	add	r2, sp, #12
    33bc:	a904      	add	r1, sp, #16
    33be:	a805      	add	r0, sp, #20
    33c0:	f24c 3350 	movw	r3, #50000	; 0xc350
    33c4:	f7fe ff6e 	bl	22a4 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    33c8:	4b40      	ldr	r3, [pc, #256]	; (34cc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    33ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    33ce:	0e1b      	lsrs	r3, r3, #24
    33d0:	f003 0301 	and.w	r3, r3, #1
    33d4:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    33d6:	9a03      	ldr	r2, [sp, #12]
    33d8:	a904      	add	r1, sp, #16
    33da:	ab05      	add	r3, sp, #20
    33dc:	4618      	mov	r0, r3
    33de:	f7fe ff7b 	bl	22d8 <Clock_Ip_TimeoutExpired>
    33e2:	4603      	mov	r3, r0
    33e4:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    33e8:	9b06      	ldr	r3, [sp, #24]
    33ea:	2b00      	cmp	r3, #0
    33ec:	d106      	bne.n	33fc <Clock_Ip_SetFirc_TrustedCall+0x114>
    33ee:	f89d 301f 	ldrb.w	r3, [sp, #31]
    33f2:	f083 0301 	eor.w	r3, r3, #1
    33f6:	b2db      	uxtb	r3, r3
    33f8:	2b00      	cmp	r3, #0
    33fa:	d1e5      	bne.n	33c8 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    33fc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3400:	2b00      	cmp	r3, #0
    3402:	d005      	beq.n	3410 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3404:	9b01      	ldr	r3, [sp, #4]
    3406:	681b      	ldr	r3, [r3, #0]
    3408:	4619      	mov	r1, r3
    340a:	2001      	movs	r0, #1
    340c:	f7fe ff3a 	bl	2284 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    3410:	2003      	movs	r0, #3
    3412:	f7ff fd7f 	bl	2f14 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    3416:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    341a:	2b00      	cmp	r3, #0
    341c:	d04f      	beq.n	34be <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    341e:	2002      	movs	r0, #2
    3420:	f7ff fd26 	bl	2e70 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    3424:	e04b      	b.n	34be <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3426:	4b29      	ldr	r3, [pc, #164]	; (34cc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3428:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    342c:	4a27      	ldr	r2, [pc, #156]	; (34cc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    342e:	f023 0301 	bic.w	r3, r3, #1
    3432:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    3436:	9b01      	ldr	r3, [sp, #4]
    3438:	889b      	ldrh	r3, [r3, #4]
    343a:	2b01      	cmp	r3, #1
    343c:	d13f      	bne.n	34be <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    343e:	9b01      	ldr	r3, [sp, #4]
    3440:	79db      	ldrb	r3, [r3, #7]
    3442:	4a22      	ldr	r2, [pc, #136]	; (34cc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3444:	f003 0303 	and.w	r3, r3, #3
    3448:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    344c:	4b1f      	ldr	r3, [pc, #124]	; (34cc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    344e:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3452:	9b01      	ldr	r3, [sp, #4]
    3454:	799b      	ldrb	r3, [r3, #6]
    3456:	00db      	lsls	r3, r3, #3
    3458:	f003 0308 	and.w	r3, r3, #8
    345c:	4313      	orrs	r3, r2
    345e:	4a1b      	ldr	r2, [pc, #108]	; (34cc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3460:	f043 0301 	orr.w	r3, r3, #1
    3464:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3468:	aa03      	add	r2, sp, #12
    346a:	a904      	add	r1, sp, #16
    346c:	a805      	add	r0, sp, #20
    346e:	f24c 3350 	movw	r3, #50000	; 0xc350
    3472:	f7fe ff17 	bl	22a4 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3476:	4b15      	ldr	r3, [pc, #84]	; (34cc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3478:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    347c:	0e1b      	lsrs	r3, r3, #24
    347e:	f003 0301 	and.w	r3, r3, #1
    3482:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3484:	9a03      	ldr	r2, [sp, #12]
    3486:	a904      	add	r1, sp, #16
    3488:	ab05      	add	r3, sp, #20
    348a:	4618      	mov	r0, r3
    348c:	f7fe ff24 	bl	22d8 <Clock_Ip_TimeoutExpired>
    3490:	4603      	mov	r3, r0
    3492:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3496:	9b06      	ldr	r3, [sp, #24]
    3498:	2b00      	cmp	r3, #0
    349a:	d106      	bne.n	34aa <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    349c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    34a0:	f083 0301 	eor.w	r3, r3, #1
    34a4:	b2db      	uxtb	r3, r3
    34a6:	2b00      	cmp	r3, #0
    34a8:	d1e5      	bne.n	3476 <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    34aa:	f89d 301f 	ldrb.w	r3, [sp, #31]
    34ae:	2b00      	cmp	r3, #0
    34b0:	d005      	beq.n	34be <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    34b2:	9b01      	ldr	r3, [sp, #4]
    34b4:	681b      	ldr	r3, [r3, #0]
    34b6:	4619      	mov	r1, r3
    34b8:	2001      	movs	r0, #1
    34ba:	f7fe fee3 	bl	2284 <Clock_Ip_ReportClockErrors>
}
    34be:	bf00      	nop
    34c0:	b00b      	add	sp, #44	; 0x2c
    34c2:	f85d fb04 	ldr.w	pc, [sp], #4
    34c6:	bf00      	nop
    34c8:	00007940 	.word	0x00007940
    34cc:	40064000 	.word	0x40064000

000034d0 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    34d0:	b500      	push	{lr}
    34d2:	b089      	sub	sp, #36	; 0x24
    34d4:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    34d6:	2300      	movs	r3, #0
    34d8:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    34dc:	9b01      	ldr	r3, [sp, #4]
    34de:	889b      	ldrh	r3, [r3, #4]
    34e0:	2b01      	cmp	r3, #1
    34e2:	d132      	bne.n	354a <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    34e4:	4b1b      	ldr	r3, [pc, #108]	; (3554 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    34e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    34ea:	4a1a      	ldr	r2, [pc, #104]	; (3554 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    34ec:	f043 0301 	orr.w	r3, r3, #1
    34f0:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    34f4:	aa03      	add	r2, sp, #12
    34f6:	a904      	add	r1, sp, #16
    34f8:	a805      	add	r0, sp, #20
    34fa:	f24c 3350 	movw	r3, #50000	; 0xc350
    34fe:	f7fe fed1 	bl	22a4 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3502:	4b14      	ldr	r3, [pc, #80]	; (3554 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3504:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3508:	0e1b      	lsrs	r3, r3, #24
    350a:	f003 0301 	and.w	r3, r3, #1
    350e:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3510:	9a03      	ldr	r2, [sp, #12]
    3512:	a904      	add	r1, sp, #16
    3514:	ab05      	add	r3, sp, #20
    3516:	4618      	mov	r0, r3
    3518:	f7fe fede 	bl	22d8 <Clock_Ip_TimeoutExpired>
    351c:	4603      	mov	r3, r0
    351e:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3522:	9b06      	ldr	r3, [sp, #24]
    3524:	2b00      	cmp	r3, #0
    3526:	d106      	bne.n	3536 <Clock_Ip_EnableFirc_TrustedCall+0x66>
    3528:	f89d 301f 	ldrb.w	r3, [sp, #31]
    352c:	f083 0301 	eor.w	r3, r3, #1
    3530:	b2db      	uxtb	r3, r3
    3532:	2b00      	cmp	r3, #0
    3534:	d1e5      	bne.n	3502 <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    3536:	f89d 301f 	ldrb.w	r3, [sp, #31]
    353a:	2b00      	cmp	r3, #0
    353c:	d005      	beq.n	354a <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    353e:	9b01      	ldr	r3, [sp, #4]
    3540:	681b      	ldr	r3, [r3, #0]
    3542:	4619      	mov	r1, r3
    3544:	2001      	movs	r0, #1
    3546:	f7fe fe9d 	bl	2284 <Clock_Ip_ReportClockErrors>
        }
    }
}
    354a:	bf00      	nop
    354c:	b009      	add	sp, #36	; 0x24
    354e:	f85d fb04 	ldr.w	pc, [sp], #4
    3552:	bf00      	nop
    3554:	40064000 	.word	0x40064000

00003558 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    3558:	b082      	sub	sp, #8
    355a:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    355c:	4b05      	ldr	r3, [pc, #20]	; (3574 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    355e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3562:	4a04      	ldr	r2, [pc, #16]	; (3574 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3564:	f023 0301 	bic.w	r3, r3, #1
    3568:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    356c:	bf00      	nop
    356e:	b002      	add	sp, #8
    3570:	4770      	bx	lr
    3572:	bf00      	nop
    3574:	40064000 	.word	0x40064000

00003578 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    3578:	b082      	sub	sp, #8
    357a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    357c:	bf00      	nop
    357e:	b002      	add	sp, #8
    3580:	4770      	bx	lr

00003582 <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    3582:	b082      	sub	sp, #8
    3584:	9001      	str	r0, [sp, #4]
    3586:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    3588:	bf00      	nop
    358a:	b002      	add	sp, #8
    358c:	4770      	bx	lr

0000358e <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    358e:	b082      	sub	sp, #8
    3590:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    3592:	bf00      	nop
    3594:	b002      	add	sp, #8
    3596:	4770      	bx	lr

00003598 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    3598:	b082      	sub	sp, #8
    359a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    359c:	bf00      	nop
    359e:	b002      	add	sp, #8
    35a0:	4770      	bx	lr

000035a2 <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    35a2:	b082      	sub	sp, #8
    35a4:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    35a6:	2302      	movs	r3, #2
}
    35a8:	4618      	mov	r0, r3
    35aa:	b002      	add	sp, #8
    35ac:	4770      	bx	lr

000035ae <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    35ae:	b082      	sub	sp, #8
    35b0:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    35b2:	bf00      	nop
    35b4:	b002      	add	sp, #8
    35b6:	4770      	bx	lr

000035b8 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    35b8:	b500      	push	{lr}
    35ba:	b083      	sub	sp, #12
    35bc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    35be:	9b01      	ldr	r3, [sp, #4]
    35c0:	2b00      	cmp	r3, #0
    35c2:	d002      	beq.n	35ca <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    35c4:	9801      	ldr	r0, [sp, #4]
    35c6:	f000 f870 	bl	36aa <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    35ca:	bf00      	nop
    35cc:	b003      	add	sp, #12
    35ce:	f85d fb04 	ldr.w	pc, [sp], #4

000035d2 <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    35d2:	b500      	push	{lr}
    35d4:	b083      	sub	sp, #12
    35d6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    35d8:	9b01      	ldr	r3, [sp, #4]
    35da:	2b00      	cmp	r3, #0
    35dc:	d002      	beq.n	35e4 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    35de:	9801      	ldr	r0, [sp, #4]
    35e0:	f000 f89a 	bl	3718 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    35e4:	bf00      	nop
    35e6:	b003      	add	sp, #12
    35e8:	f85d fb04 	ldr.w	pc, [sp], #4

000035ec <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    35ec:	b500      	push	{lr}
    35ee:	b089      	sub	sp, #36	; 0x24
    35f0:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    35f2:	2301      	movs	r3, #1
    35f4:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    35f6:	2300      	movs	r3, #0
    35f8:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    35fc:	4b1e      	ldr	r3, [pc, #120]	; (3678 <Clock_Ip_CompleteSpll+0x8c>)
    35fe:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3602:	f003 0301 	and.w	r3, r3, #1
    3606:	2b00      	cmp	r3, #0
    3608:	d02f      	beq.n	366a <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    360a:	aa02      	add	r2, sp, #8
    360c:	a903      	add	r1, sp, #12
    360e:	a804      	add	r0, sp, #16
    3610:	f24c 3350 	movw	r3, #50000	; 0xc350
    3614:	f7fe fe46 	bl	22a4 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    3618:	4b17      	ldr	r3, [pc, #92]	; (3678 <Clock_Ip_CompleteSpll+0x8c>)
    361a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    361e:	0e1b      	lsrs	r3, r3, #24
    3620:	f003 0301 	and.w	r3, r3, #1
    3624:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3626:	9a02      	ldr	r2, [sp, #8]
    3628:	a903      	add	r1, sp, #12
    362a:	ab04      	add	r3, sp, #16
    362c:	4618      	mov	r0, r3
    362e:	f7fe fe53 	bl	22d8 <Clock_Ip_TimeoutExpired>
    3632:	4603      	mov	r3, r0
    3634:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    3638:	9b05      	ldr	r3, [sp, #20]
    363a:	2b00      	cmp	r3, #0
    363c:	d106      	bne.n	364c <Clock_Ip_CompleteSpll+0x60>
    363e:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3642:	f083 0301 	eor.w	r3, r3, #1
    3646:	b2db      	uxtb	r3, r3
    3648:	2b00      	cmp	r3, #0
    364a:	d1e5      	bne.n	3618 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    364c:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3650:	f083 0301 	eor.w	r3, r3, #1
    3654:	b2db      	uxtb	r3, r3
    3656:	2b00      	cmp	r3, #0
    3658:	d002      	beq.n	3660 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    365a:	2302      	movs	r3, #2
    365c:	9307      	str	r3, [sp, #28]
    365e:	e006      	b.n	366e <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    3660:	9901      	ldr	r1, [sp, #4]
    3662:	2001      	movs	r0, #1
    3664:	f7fe fe0e 	bl	2284 <Clock_Ip_ReportClockErrors>
    3668:	e001      	b.n	366e <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    366a:	2300      	movs	r3, #0
    366c:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    366e:	9b07      	ldr	r3, [sp, #28]
}
    3670:	4618      	mov	r0, r3
    3672:	b009      	add	sp, #36	; 0x24
    3674:	f85d fb04 	ldr.w	pc, [sp], #4
    3678:	40064000 	.word	0x40064000

0000367c <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    367c:	b500      	push	{lr}
    367e:	b083      	sub	sp, #12
    3680:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    3682:	9801      	ldr	r0, [sp, #4]
    3684:	f000 f886 	bl	3794 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3688:	bf00      	nop
    368a:	b003      	add	sp, #12
    368c:	f85d fb04 	ldr.w	pc, [sp], #4

00003690 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    3690:	b500      	push	{lr}
    3692:	b083      	sub	sp, #12
    3694:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3696:	9b01      	ldr	r3, [sp, #4]
    3698:	2b00      	cmp	r3, #0
    369a:	d002      	beq.n	36a2 <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    369c:	9801      	ldr	r0, [sp, #4]
    369e:	f000 f891 	bl	37c4 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    36a2:	bf00      	nop
    36a4:	b003      	add	sp, #12
    36a6:	f85d fb04 	ldr.w	pc, [sp], #4

000036aa <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    36aa:	b082      	sub	sp, #8
    36ac:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    36ae:	4b19      	ldr	r3, [pc, #100]	; (3714 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    36b0:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    36b4:	4a17      	ldr	r2, [pc, #92]	; (3714 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    36b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    36ba:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    36be:	4b15      	ldr	r3, [pc, #84]	; (3714 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    36c0:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    36c4:	4a13      	ldr	r2, [pc, #76]	; (3714 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    36c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    36ca:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    36ce:	4b11      	ldr	r3, [pc, #68]	; (3714 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    36d0:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    36d4:	4a0f      	ldr	r2, [pc, #60]	; (3714 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    36d6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    36da:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    36de:	4b0d      	ldr	r3, [pc, #52]	; (3714 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    36e0:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    36e4:	4a0b      	ldr	r2, [pc, #44]	; (3714 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    36e6:	f023 0301 	bic.w	r3, r3, #1
    36ea:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    36ee:	4b09      	ldr	r3, [pc, #36]	; (3714 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    36f0:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    36f4:	4a07      	ldr	r2, [pc, #28]	; (3714 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    36f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    36fa:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    36fe:	4b05      	ldr	r3, [pc, #20]	; (3714 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3700:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3704:	4a03      	ldr	r2, [pc, #12]	; (3714 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3706:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    370a:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    370e:	bf00      	nop
    3710:	b002      	add	sp, #8
    3712:	4770      	bx	lr
    3714:	40064000 	.word	0x40064000

00003718 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3718:	b082      	sub	sp, #8
    371a:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    371c:	9b01      	ldr	r3, [sp, #4]
    371e:	889b      	ldrh	r3, [r3, #4]
    3720:	2b01      	cmp	r3, #1
    3722:	d12f      	bne.n	3784 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    3724:	4b1a      	ldr	r3, [pc, #104]	; (3790 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3726:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    372a:	9b01      	ldr	r3, [sp, #4]
    372c:	7b5b      	ldrb	r3, [r3, #13]
    372e:	3b01      	subs	r3, #1
    3730:	021b      	lsls	r3, r3, #8
    3732:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    3736:	9b01      	ldr	r3, [sp, #4]
    3738:	7d1b      	ldrb	r3, [r3, #20]
    373a:	3b10      	subs	r3, #16
    373c:	041b      	lsls	r3, r3, #16
    373e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    3742:	430b      	orrs	r3, r1
    3744:	4912      	ldr	r1, [pc, #72]	; (3790 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3746:	4313      	orrs	r3, r2
    3748:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    374c:	9b01      	ldr	r3, [sp, #4]
    374e:	7fdb      	ldrb	r3, [r3, #31]
    3750:	2b02      	cmp	r3, #2
    3752:	d011      	beq.n	3778 <Clock_Ip_SetSpll_TrustedCall+0x60>
    3754:	2b02      	cmp	r3, #2
    3756:	dc17      	bgt.n	3788 <Clock_Ip_SetSpll_TrustedCall+0x70>
    3758:	2b00      	cmp	r3, #0
    375a:	d002      	beq.n	3762 <Clock_Ip_SetSpll_TrustedCall+0x4a>
    375c:	2b01      	cmp	r3, #1
    375e:	d005      	beq.n	376c <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    3760:	e012      	b.n	3788 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    3762:	4b0b      	ldr	r3, [pc, #44]	; (3790 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3764:	2200      	movs	r2, #0
    3766:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    376a:	e00e      	b.n	378a <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    376c:	4b08      	ldr	r3, [pc, #32]	; (3790 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    376e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3772:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3776:	e008      	b.n	378a <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    3778:	4b05      	ldr	r3, [pc, #20]	; (3790 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    377a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    377e:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3782:	e002      	b.n	378a <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    3784:	bf00      	nop
    3786:	e000      	b.n	378a <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    3788:	bf00      	nop
}
    378a:	bf00      	nop
    378c:	b002      	add	sp, #8
    378e:	4770      	bx	lr
    3790:	40064000 	.word	0x40064000

00003794 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    3794:	b082      	sub	sp, #8
    3796:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    3798:	4b09      	ldr	r3, [pc, #36]	; (37c0 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    379a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    379e:	4a08      	ldr	r2, [pc, #32]	; (37c0 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    37a0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    37a4:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    37a8:	4b05      	ldr	r3, [pc, #20]	; (37c0 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    37aa:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    37ae:	4a04      	ldr	r2, [pc, #16]	; (37c0 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    37b0:	f023 0301 	bic.w	r3, r3, #1
    37b4:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    37b8:	bf00      	nop
    37ba:	b002      	add	sp, #8
    37bc:	4770      	bx	lr
    37be:	bf00      	nop
    37c0:	40064000 	.word	0x40064000

000037c4 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    37c4:	b082      	sub	sp, #8
    37c6:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    37c8:	9b01      	ldr	r3, [sp, #4]
    37ca:	889b      	ldrh	r3, [r3, #4]
    37cc:	2b01      	cmp	r3, #1
    37ce:	d107      	bne.n	37e0 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    37d0:	4b05      	ldr	r3, [pc, #20]	; (37e8 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    37d2:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    37d6:	4a04      	ldr	r2, [pc, #16]	; (37e8 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    37d8:	f043 0301 	orr.w	r3, r3, #1
    37dc:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    37e0:	bf00      	nop
    37e2:	b002      	add	sp, #8
    37e4:	4770      	bx	lr
    37e6:	bf00      	nop
    37e8:	40064000 	.word	0x40064000

000037ec <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    37ec:	b082      	sub	sp, #8
    37ee:	9001      	str	r0, [sp, #4]
    37f0:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    37f2:	bf00      	nop
    37f4:	b002      	add	sp, #8
    37f6:	4770      	bx	lr

000037f8 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    37f8:	b082      	sub	sp, #8
    37fa:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    37fc:	bf00      	nop
    37fe:	b002      	add	sp, #8
    3800:	4770      	bx	lr

00003802 <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3802:	b500      	push	{lr}
    3804:	b083      	sub	sp, #12
    3806:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3808:	9b01      	ldr	r3, [sp, #4]
    380a:	2b00      	cmp	r3, #0
    380c:	d002      	beq.n	3814 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    380e:	9801      	ldr	r0, [sp, #4]
    3810:	f000 f8ee 	bl	39f0 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3814:	bf00      	nop
    3816:	b003      	add	sp, #12
    3818:	f85d fb04 	ldr.w	pc, [sp], #4

0000381c <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    381c:	b500      	push	{lr}
    381e:	b083      	sub	sp, #12
    3820:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3822:	9b01      	ldr	r3, [sp, #4]
    3824:	2b00      	cmp	r3, #0
    3826:	d002      	beq.n	382e <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    3828:	9801      	ldr	r0, [sp, #4]
    382a:	f000 f8ff 	bl	3a2c <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    382e:	bf00      	nop
    3830:	b003      	add	sp, #12
    3832:	f85d fb04 	ldr.w	pc, [sp], #4

00003836 <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    3836:	b500      	push	{lr}
    3838:	b083      	sub	sp, #12
    383a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    383c:	9b01      	ldr	r3, [sp, #4]
    383e:	2b00      	cmp	r3, #0
    3840:	d002      	beq.n	3848 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    3842:	9801      	ldr	r0, [sp, #4]
    3844:	f000 f912 	bl	3a6c <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3848:	bf00      	nop
    384a:	b003      	add	sp, #12
    384c:	f85d fb04 	ldr.w	pc, [sp], #4

00003850 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3850:	b500      	push	{lr}
    3852:	b083      	sub	sp, #12
    3854:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3856:	9b01      	ldr	r3, [sp, #4]
    3858:	2b00      	cmp	r3, #0
    385a:	d002      	beq.n	3862 <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    385c:	9801      	ldr	r0, [sp, #4]
    385e:	f000 f925 	bl	3aac <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3862:	bf00      	nop
    3864:	b003      	add	sp, #12
    3866:	f85d fb04 	ldr.w	pc, [sp], #4

0000386a <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    386a:	b500      	push	{lr}
    386c:	b083      	sub	sp, #12
    386e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3870:	9b01      	ldr	r3, [sp, #4]
    3872:	2b00      	cmp	r3, #0
    3874:	d002      	beq.n	387c <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    3876:	9801      	ldr	r0, [sp, #4]
    3878:	f000 f936 	bl	3ae8 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    387c:	bf00      	nop
    387e:	b003      	add	sp, #12
    3880:	f85d fb04 	ldr.w	pc, [sp], #4

00003884 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    3884:	b500      	push	{lr}
    3886:	b083      	sub	sp, #12
    3888:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    388a:	9b01      	ldr	r3, [sp, #4]
    388c:	2b00      	cmp	r3, #0
    388e:	d002      	beq.n	3896 <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    3890:	9801      	ldr	r0, [sp, #4]
    3892:	f000 f949 	bl	3b28 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3896:	bf00      	nop
    3898:	b003      	add	sp, #12
    389a:	f85d fb04 	ldr.w	pc, [sp], #4

0000389e <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    389e:	b500      	push	{lr}
    38a0:	b083      	sub	sp, #12
    38a2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38a4:	9b01      	ldr	r3, [sp, #4]
    38a6:	2b00      	cmp	r3, #0
    38a8:	d002      	beq.n	38b0 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    38aa:	9801      	ldr	r0, [sp, #4]
    38ac:	f000 f958 	bl	3b60 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38b0:	bf00      	nop
    38b2:	b003      	add	sp, #12
    38b4:	f85d fb04 	ldr.w	pc, [sp], #4

000038b8 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    38b8:	b500      	push	{lr}
    38ba:	b083      	sub	sp, #12
    38bc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38be:	9b01      	ldr	r3, [sp, #4]
    38c0:	2b00      	cmp	r3, #0
    38c2:	d002      	beq.n	38ca <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    38c4:	9801      	ldr	r0, [sp, #4]
    38c6:	f000 f969 	bl	3b9c <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38ca:	bf00      	nop
    38cc:	b003      	add	sp, #12
    38ce:	f85d fb04 	ldr.w	pc, [sp], #4

000038d2 <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    38d2:	b500      	push	{lr}
    38d4:	b083      	sub	sp, #12
    38d6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38d8:	9b01      	ldr	r3, [sp, #4]
    38da:	2b00      	cmp	r3, #0
    38dc:	d002      	beq.n	38e4 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    38de:	9801      	ldr	r0, [sp, #4]
    38e0:	f000 f978 	bl	3bd4 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38e4:	bf00      	nop
    38e6:	b003      	add	sp, #12
    38e8:	f85d fb04 	ldr.w	pc, [sp], #4

000038ec <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    38ec:	b500      	push	{lr}
    38ee:	b083      	sub	sp, #12
    38f0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38f2:	9b01      	ldr	r3, [sp, #4]
    38f4:	2b00      	cmp	r3, #0
    38f6:	d002      	beq.n	38fe <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    38f8:	9801      	ldr	r0, [sp, #4]
    38fa:	f000 f989 	bl	3c10 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38fe:	bf00      	nop
    3900:	b003      	add	sp, #12
    3902:	f85d fb04 	ldr.w	pc, [sp], #4

00003906 <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3906:	b500      	push	{lr}
    3908:	b083      	sub	sp, #12
    390a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    390c:	9b01      	ldr	r3, [sp, #4]
    390e:	2b00      	cmp	r3, #0
    3910:	d002      	beq.n	3918 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    3912:	9801      	ldr	r0, [sp, #4]
    3914:	f000 f998 	bl	3c48 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3918:	bf00      	nop
    391a:	b003      	add	sp, #12
    391c:	f85d fb04 	ldr.w	pc, [sp], #4

00003920 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    3920:	b500      	push	{lr}
    3922:	b083      	sub	sp, #12
    3924:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3926:	9b01      	ldr	r3, [sp, #4]
    3928:	2b00      	cmp	r3, #0
    392a:	d002      	beq.n	3932 <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    392c:	9801      	ldr	r0, [sp, #4]
    392e:	f000 f9a9 	bl	3c84 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3932:	bf00      	nop
    3934:	b003      	add	sp, #12
    3936:	f85d fb04 	ldr.w	pc, [sp], #4

0000393a <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    393a:	b500      	push	{lr}
    393c:	b083      	sub	sp, #12
    393e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3940:	9b01      	ldr	r3, [sp, #4]
    3942:	2b00      	cmp	r3, #0
    3944:	d002      	beq.n	394c <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    3946:	9801      	ldr	r0, [sp, #4]
    3948:	f000 f9e6 	bl	3d18 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    394c:	bf00      	nop
    394e:	b003      	add	sp, #12
    3950:	f85d fb04 	ldr.w	pc, [sp], #4

00003954 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3954:	b500      	push	{lr}
    3956:	b083      	sub	sp, #12
    3958:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    395a:	9b01      	ldr	r3, [sp, #4]
    395c:	2b00      	cmp	r3, #0
    395e:	d002      	beq.n	3966 <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    3960:	9801      	ldr	r0, [sp, #4]
    3962:	f000 fa25 	bl	3db0 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3966:	bf00      	nop
    3968:	b003      	add	sp, #12
    396a:	f85d fb04 	ldr.w	pc, [sp], #4

0000396e <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    396e:	b500      	push	{lr}
    3970:	b083      	sub	sp, #12
    3972:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3974:	9b01      	ldr	r3, [sp, #4]
    3976:	2b00      	cmp	r3, #0
    3978:	d002      	beq.n	3980 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    397a:	9801      	ldr	r0, [sp, #4]
    397c:	f000 fa2a 	bl	3dd4 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3980:	bf00      	nop
    3982:	b003      	add	sp, #12
    3984:	f85d fb04 	ldr.w	pc, [sp], #4

00003988 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    3988:	b500      	push	{lr}
    398a:	b083      	sub	sp, #12
    398c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    398e:	9b01      	ldr	r3, [sp, #4]
    3990:	2b00      	cmp	r3, #0
    3992:	d002      	beq.n	399a <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    3994:	9801      	ldr	r0, [sp, #4]
    3996:	f000 fa3b 	bl	3e10 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    399a:	bf00      	nop
    399c:	b003      	add	sp, #12
    399e:	f85d fb04 	ldr.w	pc, [sp], #4

000039a2 <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    39a2:	b500      	push	{lr}
    39a4:	b083      	sub	sp, #12
    39a6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    39a8:	9b01      	ldr	r3, [sp, #4]
    39aa:	2b00      	cmp	r3, #0
    39ac:	d002      	beq.n	39b4 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    39ae:	9801      	ldr	r0, [sp, #4]
    39b0:	f000 fa56 	bl	3e60 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    39b4:	bf00      	nop
    39b6:	b003      	add	sp, #12
    39b8:	f85d fb04 	ldr.w	pc, [sp], #4

000039bc <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    39bc:	b500      	push	{lr}
    39be:	b083      	sub	sp, #12
    39c0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    39c2:	9b01      	ldr	r3, [sp, #4]
    39c4:	2b00      	cmp	r3, #0
    39c6:	d002      	beq.n	39ce <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    39c8:	9801      	ldr	r0, [sp, #4]
    39ca:	f000 fa79 	bl	3ec0 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    39ce:	bf00      	nop
    39d0:	b003      	add	sp, #12
    39d2:	f85d fb04 	ldr.w	pc, [sp], #4

000039d6 <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    39d6:	b500      	push	{lr}
    39d8:	b083      	sub	sp, #12
    39da:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    39dc:	9b01      	ldr	r3, [sp, #4]
    39de:	2b00      	cmp	r3, #0
    39e0:	d002      	beq.n	39e8 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    39e2:	9801      	ldr	r0, [sp, #4]
    39e4:	f000 fa8a 	bl	3efc <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    39e8:	bf00      	nop
    39ea:	b003      	add	sp, #12
    39ec:	f85d fb04 	ldr.w	pc, [sp], #4

000039f0 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    39f0:	b084      	sub	sp, #16
    39f2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    39f4:	4b0b      	ldr	r3, [pc, #44]	; (3a24 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    39f6:	795b      	ldrb	r3, [r3, #5]
    39f8:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    39fa:	4b0b      	ldr	r3, [pc, #44]	; (3a28 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    39fc:	695b      	ldr	r3, [r3, #20]
    39fe:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    3a00:	9b02      	ldr	r3, [sp, #8]
    3a02:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3a06:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    3a08:	9b03      	ldr	r3, [sp, #12]
    3a0a:	061b      	lsls	r3, r3, #24
    3a0c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3a10:	9a02      	ldr	r2, [sp, #8]
    3a12:	4313      	orrs	r3, r2
    3a14:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    3a16:	4a04      	ldr	r2, [pc, #16]	; (3a28 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    3a18:	9b02      	ldr	r3, [sp, #8]
    3a1a:	6153      	str	r3, [r2, #20]
}
    3a1c:	bf00      	nop
    3a1e:	b004      	add	sp, #16
    3a20:	4770      	bx	lr
    3a22:	bf00      	nop
    3a24:	00007ca8 	.word	0x00007ca8
    3a28:	40064000 	.word	0x40064000

00003a2c <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3a2c:	b084      	sub	sp, #16
    3a2e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3a30:	9b01      	ldr	r3, [sp, #4]
    3a32:	685b      	ldr	r3, [r3, #4]
    3a34:	4a0b      	ldr	r2, [pc, #44]	; (3a64 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    3a36:	5cd3      	ldrb	r3, [r2, r3]
    3a38:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    3a3a:	4b0b      	ldr	r3, [pc, #44]	; (3a68 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    3a3c:	695b      	ldr	r3, [r3, #20]
    3a3e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    3a40:	9b02      	ldr	r3, [sp, #8]
    3a42:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3a46:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    3a48:	9b03      	ldr	r3, [sp, #12]
    3a4a:	061b      	lsls	r3, r3, #24
    3a4c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3a50:	9a02      	ldr	r2, [sp, #8]
    3a52:	4313      	orrs	r3, r2
    3a54:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    3a56:	4a04      	ldr	r2, [pc, #16]	; (3a68 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    3a58:	9b02      	ldr	r3, [sp, #8]
    3a5a:	6153      	str	r3, [r2, #20]
}
    3a5c:	bf00      	nop
    3a5e:	b004      	add	sp, #16
    3a60:	4770      	bx	lr
    3a62:	bf00      	nop
    3a64:	00007ca8 	.word	0x00007ca8
    3a68:	40064000 	.word	0x40064000

00003a6c <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3a6c:	b084      	sub	sp, #16
    3a6e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3a70:	9b01      	ldr	r3, [sp, #4]
    3a72:	685b      	ldr	r3, [r3, #4]
    3a74:	4a0b      	ldr	r2, [pc, #44]	; (3aa4 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    3a76:	5cd3      	ldrb	r3, [r2, r3]
    3a78:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    3a7a:	4b0b      	ldr	r3, [pc, #44]	; (3aa8 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    3a7c:	699b      	ldr	r3, [r3, #24]
    3a7e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    3a80:	9b02      	ldr	r3, [sp, #8]
    3a82:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3a86:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    3a88:	9b03      	ldr	r3, [sp, #12]
    3a8a:	061b      	lsls	r3, r3, #24
    3a8c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3a90:	9a02      	ldr	r2, [sp, #8]
    3a92:	4313      	orrs	r3, r2
    3a94:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    3a96:	4a04      	ldr	r2, [pc, #16]	; (3aa8 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    3a98:	9b02      	ldr	r3, [sp, #8]
    3a9a:	6193      	str	r3, [r2, #24]
}
    3a9c:	bf00      	nop
    3a9e:	b004      	add	sp, #16
    3aa0:	4770      	bx	lr
    3aa2:	bf00      	nop
    3aa4:	00007ca8 	.word	0x00007ca8
    3aa8:	40064000 	.word	0x40064000

00003aac <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3aac:	b084      	sub	sp, #16
    3aae:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3ab0:	4b0b      	ldr	r3, [pc, #44]	; (3ae0 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    3ab2:	795b      	ldrb	r3, [r3, #5]
    3ab4:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    3ab6:	4b0b      	ldr	r3, [pc, #44]	; (3ae4 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    3ab8:	69db      	ldr	r3, [r3, #28]
    3aba:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    3abc:	9b02      	ldr	r3, [sp, #8]
    3abe:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3ac2:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    3ac4:	9b03      	ldr	r3, [sp, #12]
    3ac6:	061b      	lsls	r3, r3, #24
    3ac8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3acc:	9a02      	ldr	r2, [sp, #8]
    3ace:	4313      	orrs	r3, r2
    3ad0:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    3ad2:	4a04      	ldr	r2, [pc, #16]	; (3ae4 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    3ad4:	9b02      	ldr	r3, [sp, #8]
    3ad6:	61d3      	str	r3, [r2, #28]
}
    3ad8:	bf00      	nop
    3ada:	b004      	add	sp, #16
    3adc:	4770      	bx	lr
    3ade:	bf00      	nop
    3ae0:	00007ca8 	.word	0x00007ca8
    3ae4:	40064000 	.word	0x40064000

00003ae8 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3ae8:	b084      	sub	sp, #16
    3aea:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3aec:	9b01      	ldr	r3, [sp, #4]
    3aee:	685b      	ldr	r3, [r3, #4]
    3af0:	4a0b      	ldr	r2, [pc, #44]	; (3b20 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    3af2:	5cd3      	ldrb	r3, [r2, r3]
    3af4:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    3af6:	4b0b      	ldr	r3, [pc, #44]	; (3b24 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    3af8:	69db      	ldr	r3, [r3, #28]
    3afa:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    3afc:	9b02      	ldr	r3, [sp, #8]
    3afe:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3b02:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    3b04:	9b03      	ldr	r3, [sp, #12]
    3b06:	061b      	lsls	r3, r3, #24
    3b08:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3b0c:	9a02      	ldr	r2, [sp, #8]
    3b0e:	4313      	orrs	r3, r2
    3b10:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    3b12:	4a04      	ldr	r2, [pc, #16]	; (3b24 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    3b14:	9b02      	ldr	r3, [sp, #8]
    3b16:	61d3      	str	r3, [r2, #28]
}
    3b18:	bf00      	nop
    3b1a:	b004      	add	sp, #16
    3b1c:	4770      	bx	lr
    3b1e:	bf00      	nop
    3b20:	00007ca8 	.word	0x00007ca8
    3b24:	40064000 	.word	0x40064000

00003b28 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3b28:	b084      	sub	sp, #16
    3b2a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3b2c:	4b0a      	ldr	r3, [pc, #40]	; (3b58 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    3b2e:	7b9b      	ldrb	r3, [r3, #14]
    3b30:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3b32:	4b0a      	ldr	r3, [pc, #40]	; (3b5c <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    3b34:	691b      	ldr	r3, [r3, #16]
    3b36:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    3b38:	9b02      	ldr	r3, [sp, #8]
    3b3a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3b3e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3b40:	9b03      	ldr	r3, [sp, #12]
    3b42:	011b      	lsls	r3, r3, #4
    3b44:	9a02      	ldr	r2, [sp, #8]
    3b46:	4313      	orrs	r3, r2
    3b48:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3b4a:	4a04      	ldr	r2, [pc, #16]	; (3b5c <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    3b4c:	9b02      	ldr	r3, [sp, #8]
    3b4e:	6113      	str	r3, [r2, #16]
}
    3b50:	bf00      	nop
    3b52:	b004      	add	sp, #16
    3b54:	4770      	bx	lr
    3b56:	bf00      	nop
    3b58:	00007c50 	.word	0x00007c50
    3b5c:	40048000 	.word	0x40048000

00003b60 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3b60:	b084      	sub	sp, #16
    3b62:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3b64:	9b01      	ldr	r3, [sp, #4]
    3b66:	685b      	ldr	r3, [r3, #4]
    3b68:	4a0a      	ldr	r2, [pc, #40]	; (3b94 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    3b6a:	5cd3      	ldrb	r3, [r2, r3]
    3b6c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    3b6e:	4b0a      	ldr	r3, [pc, #40]	; (3b98 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    3b70:	691b      	ldr	r3, [r3, #16]
    3b72:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    3b74:	9b02      	ldr	r3, [sp, #8]
    3b76:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3b7a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3b7c:	9b03      	ldr	r3, [sp, #12]
    3b7e:	011b      	lsls	r3, r3, #4
    3b80:	9a02      	ldr	r2, [sp, #8]
    3b82:	4313      	orrs	r3, r2
    3b84:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3b86:	4a04      	ldr	r2, [pc, #16]	; (3b98 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    3b88:	9b02      	ldr	r3, [sp, #8]
    3b8a:	6113      	str	r3, [r2, #16]
}
    3b8c:	bf00      	nop
    3b8e:	b004      	add	sp, #16
    3b90:	4770      	bx	lr
    3b92:	bf00      	nop
    3b94:	00007c50 	.word	0x00007c50
    3b98:	40048000 	.word	0x40048000

00003b9c <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3b9c:	b084      	sub	sp, #16
    3b9e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3ba0:	4b0a      	ldr	r3, [pc, #40]	; (3bcc <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    3ba2:	785b      	ldrb	r3, [r3, #1]
    3ba4:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3ba6:	4b0a      	ldr	r3, [pc, #40]	; (3bd0 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    3ba8:	691b      	ldr	r3, [r3, #16]
    3baa:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    3bac:	9b02      	ldr	r3, [sp, #8]
    3bae:	f023 030c 	bic.w	r3, r3, #12
    3bb2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3bb4:	9b03      	ldr	r3, [sp, #12]
    3bb6:	009b      	lsls	r3, r3, #2
    3bb8:	9a02      	ldr	r2, [sp, #8]
    3bba:	4313      	orrs	r3, r2
    3bbc:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3bbe:	4a04      	ldr	r2, [pc, #16]	; (3bd0 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    3bc0:	9b02      	ldr	r3, [sp, #8]
    3bc2:	6113      	str	r3, [r2, #16]
}
    3bc4:	bf00      	nop
    3bc6:	b004      	add	sp, #16
    3bc8:	4770      	bx	lr
    3bca:	bf00      	nop
    3bcc:	00007d08 	.word	0x00007d08
    3bd0:	40048000 	.word	0x40048000

00003bd4 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3bd4:	b084      	sub	sp, #16
    3bd6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3bd8:	9b01      	ldr	r3, [sp, #4]
    3bda:	685b      	ldr	r3, [r3, #4]
    3bdc:	4a0a      	ldr	r2, [pc, #40]	; (3c08 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    3bde:	5cd3      	ldrb	r3, [r2, r3]
    3be0:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3be2:	4b0a      	ldr	r3, [pc, #40]	; (3c0c <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    3be4:	691b      	ldr	r3, [r3, #16]
    3be6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    3be8:	9b02      	ldr	r3, [sp, #8]
    3bea:	f023 030c 	bic.w	r3, r3, #12
    3bee:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3bf0:	9b03      	ldr	r3, [sp, #12]
    3bf2:	009b      	lsls	r3, r3, #2
    3bf4:	9a02      	ldr	r2, [sp, #8]
    3bf6:	4313      	orrs	r3, r2
    3bf8:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3bfa:	4a04      	ldr	r2, [pc, #16]	; (3c0c <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    3bfc:	9b02      	ldr	r3, [sp, #8]
    3bfe:	6113      	str	r3, [r2, #16]
}
    3c00:	bf00      	nop
    3c02:	b004      	add	sp, #16
    3c04:	4770      	bx	lr
    3c06:	bf00      	nop
    3c08:	00007d08 	.word	0x00007d08
    3c0c:	40048000 	.word	0x40048000

00003c10 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3c10:	b084      	sub	sp, #16
    3c12:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3c14:	4b0a      	ldr	r3, [pc, #40]	; (3c40 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    3c16:	795b      	ldrb	r3, [r3, #5]
    3c18:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    3c1a:	4b0a      	ldr	r3, [pc, #40]	; (3c44 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    3c1c:	6a1b      	ldr	r3, [r3, #32]
    3c1e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    3c20:	9b02      	ldr	r3, [sp, #8]
    3c22:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3c26:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    3c28:	9b03      	ldr	r3, [sp, #12]
    3c2a:	061b      	lsls	r3, r3, #24
    3c2c:	9a02      	ldr	r2, [sp, #8]
    3c2e:	4313      	orrs	r3, r2
    3c30:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    3c32:	4a04      	ldr	r2, [pc, #16]	; (3c44 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    3c34:	9b02      	ldr	r3, [sp, #8]
    3c36:	6213      	str	r3, [r2, #32]
}
    3c38:	bf00      	nop
    3c3a:	b004      	add	sp, #16
    3c3c:	4770      	bx	lr
    3c3e:	bf00      	nop
    3c40:	00007ca8 	.word	0x00007ca8
    3c44:	40064000 	.word	0x40064000

00003c48 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3c48:	b084      	sub	sp, #16
    3c4a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3c4c:	9b01      	ldr	r3, [sp, #4]
    3c4e:	685b      	ldr	r3, [r3, #4]
    3c50:	4a0a      	ldr	r2, [pc, #40]	; (3c7c <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    3c52:	5cd3      	ldrb	r3, [r2, r3]
    3c54:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    3c56:	4b0a      	ldr	r3, [pc, #40]	; (3c80 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    3c58:	6a1b      	ldr	r3, [r3, #32]
    3c5a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    3c5c:	9b02      	ldr	r3, [sp, #8]
    3c5e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3c62:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    3c64:	9b03      	ldr	r3, [sp, #12]
    3c66:	061b      	lsls	r3, r3, #24
    3c68:	9a02      	ldr	r2, [sp, #8]
    3c6a:	4313      	orrs	r3, r2
    3c6c:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    3c6e:	4a04      	ldr	r2, [pc, #16]	; (3c80 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    3c70:	9b02      	ldr	r3, [sp, #8]
    3c72:	6213      	str	r3, [r2, #32]
}
    3c74:	bf00      	nop
    3c76:	b004      	add	sp, #16
    3c78:	4770      	bx	lr
    3c7a:	bf00      	nop
    3c7c:	00007ca8 	.word	0x00007ca8
    3c80:	40064000 	.word	0x40064000

00003c84 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3c84:	b086      	sub	sp, #24
    3c86:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3c88:	4b20      	ldr	r3, [pc, #128]	; (3d0c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    3c8a:	795b      	ldrb	r3, [r3, #5]
    3c8c:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3c8e:	9b01      	ldr	r3, [sp, #4]
    3c90:	681a      	ldr	r2, [r3, #0]
    3c92:	491f      	ldr	r1, [pc, #124]	; (3d10 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    3c94:	4613      	mov	r3, r2
    3c96:	00db      	lsls	r3, r3, #3
    3c98:	4413      	add	r3, r2
    3c9a:	440b      	add	r3, r1
    3c9c:	781b      	ldrb	r3, [r3, #0]
    3c9e:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    3ca0:	4b1c      	ldr	r3, [pc, #112]	; (3d14 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    3ca2:	68db      	ldr	r3, [r3, #12]
    3ca4:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    3ca6:	9b03      	ldr	r3, [sp, #12]
    3ca8:	2b03      	cmp	r3, #3
    3caa:	d813      	bhi.n	3cd4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    3cac:	9b03      	ldr	r3, [sp, #12]
    3cae:	005b      	lsls	r3, r3, #1
    3cb0:	3318      	adds	r3, #24
    3cb2:	2203      	movs	r2, #3
    3cb4:	fa02 f303 	lsl.w	r3, r2, r3
    3cb8:	43db      	mvns	r3, r3
    3cba:	9a05      	ldr	r2, [sp, #20]
    3cbc:	4013      	ands	r3, r2
    3cbe:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    3cc0:	9b03      	ldr	r3, [sp, #12]
    3cc2:	005b      	lsls	r3, r3, #1
    3cc4:	3318      	adds	r3, #24
    3cc6:	9a04      	ldr	r2, [sp, #16]
    3cc8:	fa02 f303 	lsl.w	r3, r2, r3
    3ccc:	9a05      	ldr	r2, [sp, #20]
    3cce:	4313      	orrs	r3, r2
    3cd0:	9305      	str	r3, [sp, #20]
    3cd2:	e014      	b.n	3cfe <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    3cd4:	9b03      	ldr	r3, [sp, #12]
    3cd6:	3b04      	subs	r3, #4
    3cd8:	005b      	lsls	r3, r3, #1
    3cda:	3310      	adds	r3, #16
    3cdc:	2203      	movs	r2, #3
    3cde:	fa02 f303 	lsl.w	r3, r2, r3
    3ce2:	43db      	mvns	r3, r3
    3ce4:	9a05      	ldr	r2, [sp, #20]
    3ce6:	4013      	ands	r3, r2
    3ce8:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    3cea:	9b03      	ldr	r3, [sp, #12]
    3cec:	3b04      	subs	r3, #4
    3cee:	005b      	lsls	r3, r3, #1
    3cf0:	3310      	adds	r3, #16
    3cf2:	9a04      	ldr	r2, [sp, #16]
    3cf4:	fa02 f303 	lsl.w	r3, r2, r3
    3cf8:	9a05      	ldr	r2, [sp, #20]
    3cfa:	4313      	orrs	r3, r2
    3cfc:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    3cfe:	4a05      	ldr	r2, [pc, #20]	; (3d14 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    3d00:	9b05      	ldr	r3, [sp, #20]
    3d02:	60d3      	str	r3, [r2, #12]
}
    3d04:	bf00      	nop
    3d06:	b006      	add	sp, #24
    3d08:	4770      	bx	lr
    3d0a:	bf00      	nop
    3d0c:	00007c50 	.word	0x00007c50
    3d10:	00007940 	.word	0x00007940
    3d14:	40048000 	.word	0x40048000

00003d18 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3d18:	b086      	sub	sp, #24
    3d1a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3d1c:	9b01      	ldr	r3, [sp, #4]
    3d1e:	685b      	ldr	r3, [r3, #4]
    3d20:	4a20      	ldr	r2, [pc, #128]	; (3da4 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    3d22:	5cd3      	ldrb	r3, [r2, r3]
    3d24:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3d26:	9b01      	ldr	r3, [sp, #4]
    3d28:	681a      	ldr	r2, [r3, #0]
    3d2a:	491f      	ldr	r1, [pc, #124]	; (3da8 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    3d2c:	4613      	mov	r3, r2
    3d2e:	00db      	lsls	r3, r3, #3
    3d30:	4413      	add	r3, r2
    3d32:	440b      	add	r3, r1
    3d34:	781b      	ldrb	r3, [r3, #0]
    3d36:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    3d38:	4b1c      	ldr	r3, [pc, #112]	; (3dac <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    3d3a:	68db      	ldr	r3, [r3, #12]
    3d3c:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    3d3e:	9b03      	ldr	r3, [sp, #12]
    3d40:	2b03      	cmp	r3, #3
    3d42:	d813      	bhi.n	3d6c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    3d44:	9b03      	ldr	r3, [sp, #12]
    3d46:	005b      	lsls	r3, r3, #1
    3d48:	3318      	adds	r3, #24
    3d4a:	2203      	movs	r2, #3
    3d4c:	fa02 f303 	lsl.w	r3, r2, r3
    3d50:	43db      	mvns	r3, r3
    3d52:	9a05      	ldr	r2, [sp, #20]
    3d54:	4013      	ands	r3, r2
    3d56:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    3d58:	9b03      	ldr	r3, [sp, #12]
    3d5a:	005b      	lsls	r3, r3, #1
    3d5c:	3318      	adds	r3, #24
    3d5e:	9a04      	ldr	r2, [sp, #16]
    3d60:	fa02 f303 	lsl.w	r3, r2, r3
    3d64:	9a05      	ldr	r2, [sp, #20]
    3d66:	4313      	orrs	r3, r2
    3d68:	9305      	str	r3, [sp, #20]
    3d6a:	e014      	b.n	3d96 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    3d6c:	9b03      	ldr	r3, [sp, #12]
    3d6e:	3b04      	subs	r3, #4
    3d70:	005b      	lsls	r3, r3, #1
    3d72:	3310      	adds	r3, #16
    3d74:	2203      	movs	r2, #3
    3d76:	fa02 f303 	lsl.w	r3, r2, r3
    3d7a:	43db      	mvns	r3, r3
    3d7c:	9a05      	ldr	r2, [sp, #20]
    3d7e:	4013      	ands	r3, r2
    3d80:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    3d82:	9b03      	ldr	r3, [sp, #12]
    3d84:	3b04      	subs	r3, #4
    3d86:	005b      	lsls	r3, r3, #1
    3d88:	3310      	adds	r3, #16
    3d8a:	9a04      	ldr	r2, [sp, #16]
    3d8c:	fa02 f303 	lsl.w	r3, r2, r3
    3d90:	9a05      	ldr	r2, [sp, #20]
    3d92:	4313      	orrs	r3, r2
    3d94:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    3d96:	4a05      	ldr	r2, [pc, #20]	; (3dac <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    3d98:	9b05      	ldr	r3, [sp, #20]
    3d9a:	60d3      	str	r3, [r2, #12]
}
    3d9c:	bf00      	nop
    3d9e:	b006      	add	sp, #24
    3da0:	4770      	bx	lr
    3da2:	bf00      	nop
    3da4:	00007c50 	.word	0x00007c50
    3da8:	00007940 	.word	0x00007940
    3dac:	40048000 	.word	0x40048000

00003db0 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3db0:	b084      	sub	sp, #16
    3db2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    3db4:	4b06      	ldr	r3, [pc, #24]	; (3dd0 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    3db6:	685b      	ldr	r3, [r3, #4]
    3db8:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    3dba:	9b03      	ldr	r3, [sp, #12]
    3dbc:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    3dc0:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3dc2:	4a03      	ldr	r2, [pc, #12]	; (3dd0 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    3dc4:	9b03      	ldr	r3, [sp, #12]
    3dc6:	6053      	str	r3, [r2, #4]
}
    3dc8:	bf00      	nop
    3dca:	b004      	add	sp, #16
    3dcc:	4770      	bx	lr
    3dce:	bf00      	nop
    3dd0:	40048000 	.word	0x40048000

00003dd4 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3dd4:	b084      	sub	sp, #16
    3dd6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3dd8:	9b01      	ldr	r3, [sp, #4]
    3dda:	685b      	ldr	r3, [r3, #4]
    3ddc:	4a0a      	ldr	r2, [pc, #40]	; (3e08 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    3dde:	5cd3      	ldrb	r3, [r2, r3]
    3de0:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    3de2:	4b0a      	ldr	r3, [pc, #40]	; (3e0c <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    3de4:	685b      	ldr	r3, [r3, #4]
    3de6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    3de8:	9b02      	ldr	r3, [sp, #8]
    3dea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3dee:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    3df0:	9b03      	ldr	r3, [sp, #12]
    3df2:	011b      	lsls	r3, r3, #4
    3df4:	9a02      	ldr	r2, [sp, #8]
    3df6:	4313      	orrs	r3, r2
    3df8:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    3dfa:	4a04      	ldr	r2, [pc, #16]	; (3e0c <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    3dfc:	9b02      	ldr	r3, [sp, #8]
    3dfe:	6053      	str	r3, [r2, #4]
}
    3e00:	bf00      	nop
    3e02:	b004      	add	sp, #16
    3e04:	4770      	bx	lr
    3e06:	bf00      	nop
    3e08:	00007c50 	.word	0x00007c50
    3e0c:	40048000 	.word	0x40048000

00003e10 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3e10:	b084      	sub	sp, #16
    3e12:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    3e14:	9b01      	ldr	r3, [sp, #4]
    3e16:	681a      	ldr	r2, [r3, #0]
    3e18:	490f      	ldr	r1, [pc, #60]	; (3e58 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    3e1a:	4613      	mov	r3, r2
    3e1c:	00db      	lsls	r3, r3, #3
    3e1e:	4413      	add	r3, r2
    3e20:	440b      	add	r3, r1
    3e22:	3304      	adds	r3, #4
    3e24:	781b      	ldrb	r3, [r3, #0]
    3e26:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    3e28:	4a0c      	ldr	r2, [pc, #48]	; (3e5c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3e2a:	9b03      	ldr	r3, [sp, #12]
    3e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3e30:	490a      	ldr	r1, [pc, #40]	; (3e5c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3e32:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    3e36:	9b03      	ldr	r3, [sp, #12]
    3e38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    3e3c:	4a07      	ldr	r2, [pc, #28]	; (3e5c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3e3e:	9b03      	ldr	r3, [sp, #12]
    3e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3e44:	4905      	ldr	r1, [pc, #20]	; (3e5c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3e46:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    3e4a:	9b03      	ldr	r3, [sp, #12]
    3e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3e50:	bf00      	nop
    3e52:	b004      	add	sp, #16
    3e54:	4770      	bx	lr
    3e56:	bf00      	nop
    3e58:	00007940 	.word	0x00007940
    3e5c:	40065000 	.word	0x40065000

00003e60 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3e60:	b086      	sub	sp, #24
    3e62:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    3e64:	9b01      	ldr	r3, [sp, #4]
    3e66:	681a      	ldr	r2, [r3, #0]
    3e68:	4912      	ldr	r1, [pc, #72]	; (3eb4 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    3e6a:	4613      	mov	r3, r2
    3e6c:	00db      	lsls	r3, r3, #3
    3e6e:	4413      	add	r3, r2
    3e70:	440b      	add	r3, r1
    3e72:	3304      	adds	r3, #4
    3e74:	781b      	ldrb	r3, [r3, #0]
    3e76:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3e78:	9b01      	ldr	r3, [sp, #4]
    3e7a:	685b      	ldr	r3, [r3, #4]
    3e7c:	4a0e      	ldr	r2, [pc, #56]	; (3eb8 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    3e7e:	5cd3      	ldrb	r3, [r2, r3]
    3e80:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    3e82:	4a0e      	ldr	r2, [pc, #56]	; (3ebc <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    3e84:	9b05      	ldr	r3, [sp, #20]
    3e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3e8a:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    3e8c:	9b03      	ldr	r3, [sp, #12]
    3e8e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    3e92:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    3e94:	9b04      	ldr	r3, [sp, #16]
    3e96:	061b      	lsls	r3, r3, #24
    3e98:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    3e9c:	9a03      	ldr	r2, [sp, #12]
    3e9e:	4313      	orrs	r3, r2
    3ea0:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    3ea2:	4906      	ldr	r1, [pc, #24]	; (3ebc <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    3ea4:	9b05      	ldr	r3, [sp, #20]
    3ea6:	9a03      	ldr	r2, [sp, #12]
    3ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3eac:	bf00      	nop
    3eae:	b006      	add	sp, #24
    3eb0:	4770      	bx	lr
    3eb2:	bf00      	nop
    3eb4:	00007940 	.word	0x00007940
    3eb8:	00007cd8 	.word	0x00007cd8
    3ebc:	40065000 	.word	0x40065000

00003ec0 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3ec0:	b084      	sub	sp, #16
    3ec2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3ec4:	4b0b      	ldr	r3, [pc, #44]	; (3ef4 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    3ec6:	7f1b      	ldrb	r3, [r3, #28]
    3ec8:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    3eca:	4b0b      	ldr	r3, [pc, #44]	; (3ef8 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    3ecc:	685b      	ldr	r3, [r3, #4]
    3ece:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    3ed0:	9b02      	ldr	r3, [sp, #8]
    3ed2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3ed6:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    3ed8:	9b03      	ldr	r3, [sp, #12]
    3eda:	031b      	lsls	r3, r3, #12
    3edc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    3ee0:	9a02      	ldr	r2, [sp, #8]
    3ee2:	4313      	orrs	r3, r2
    3ee4:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    3ee6:	4a04      	ldr	r2, [pc, #16]	; (3ef8 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    3ee8:	9b02      	ldr	r3, [sp, #8]
    3eea:	6053      	str	r3, [r2, #4]
}
    3eec:	bf00      	nop
    3eee:	b004      	add	sp, #16
    3ef0:	4770      	bx	lr
    3ef2:	bf00      	nop
    3ef4:	00007c50 	.word	0x00007c50
    3ef8:	40048000 	.word	0x40048000

00003efc <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3efc:	b084      	sub	sp, #16
    3efe:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3f00:	9b01      	ldr	r3, [sp, #4]
    3f02:	685b      	ldr	r3, [r3, #4]
    3f04:	4a0b      	ldr	r2, [pc, #44]	; (3f34 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    3f06:	5cd3      	ldrb	r3, [r2, r3]
    3f08:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    3f0a:	4b0b      	ldr	r3, [pc, #44]	; (3f38 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    3f0c:	685b      	ldr	r3, [r3, #4]
    3f0e:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    3f10:	9b02      	ldr	r3, [sp, #8]
    3f12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3f16:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    3f18:	9b03      	ldr	r3, [sp, #12]
    3f1a:	031b      	lsls	r3, r3, #12
    3f1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    3f20:	9a02      	ldr	r2, [sp, #8]
    3f22:	4313      	orrs	r3, r2
    3f24:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    3f26:	4a04      	ldr	r2, [pc, #16]	; (3f38 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    3f28:	9b02      	ldr	r3, [sp, #8]
    3f2a:	6053      	str	r3, [r2, #4]
}
    3f2c:	bf00      	nop
    3f2e:	b004      	add	sp, #16
    3f30:	4770      	bx	lr
    3f32:	bf00      	nop
    3f34:	00007c50 	.word	0x00007c50
    3f38:	40048000 	.word	0x40048000

00003f3c <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    3f3c:	b500      	push	{lr}
    3f3e:	b085      	sub	sp, #20
    3f40:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    3f42:	2300      	movs	r3, #0
    3f44:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    3f48:	9b01      	ldr	r3, [sp, #4]
    3f4a:	2b00      	cmp	r3, #0
    3f4c:	d037      	beq.n	3fbe <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3f4e:	2300      	movs	r3, #0
    3f50:	9303      	str	r3, [sp, #12]
    3f52:	e02b      	b.n	3fac <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    3f54:	4b29      	ldr	r3, [pc, #164]	; (3ffc <DisableSafeClock+0xc0>)
    3f56:	6819      	ldr	r1, [r3, #0]
    3f58:	9a03      	ldr	r2, [sp, #12]
    3f5a:	4613      	mov	r3, r2
    3f5c:	005b      	lsls	r3, r3, #1
    3f5e:	4413      	add	r3, r2
    3f60:	009b      	lsls	r3, r3, #2
    3f62:	440b      	add	r3, r1
    3f64:	3314      	adds	r3, #20
    3f66:	681b      	ldr	r3, [r3, #0]
    3f68:	2b05      	cmp	r3, #5
    3f6a:	d11c      	bne.n	3fa6 <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    3f6c:	2301      	movs	r3, #1
    3f6e:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    3f72:	4b22      	ldr	r3, [pc, #136]	; (3ffc <DisableSafeClock+0xc0>)
    3f74:	6819      	ldr	r1, [r3, #0]
    3f76:	9a03      	ldr	r2, [sp, #12]
    3f78:	4613      	mov	r3, r2
    3f7a:	005b      	lsls	r3, r3, #1
    3f7c:	4413      	add	r3, r2
    3f7e:	009b      	lsls	r3, r3, #2
    3f80:	440b      	add	r3, r1
    3f82:	3318      	adds	r3, #24
    3f84:	881b      	ldrh	r3, [r3, #0]
    3f86:	2b00      	cmp	r3, #0
    3f88:	d118      	bne.n	3fbc <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    3f8a:	4b1d      	ldr	r3, [pc, #116]	; (4000 <DisableSafeClock+0xc4>)
    3f8c:	791b      	ldrb	r3, [r3, #4]
    3f8e:	4619      	mov	r1, r3
    3f90:	4a1c      	ldr	r2, [pc, #112]	; (4004 <DisableSafeClock+0xc8>)
    3f92:	460b      	mov	r3, r1
    3f94:	005b      	lsls	r3, r3, #1
    3f96:	440b      	add	r3, r1
    3f98:	009b      	lsls	r3, r3, #2
    3f9a:	4413      	add	r3, r2
    3f9c:	3308      	adds	r3, #8
    3f9e:	681b      	ldr	r3, [r3, #0]
    3fa0:	2005      	movs	r0, #5
    3fa2:	4798      	blx	r3
                }
                break;
    3fa4:	e00a      	b.n	3fbc <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3fa6:	9b03      	ldr	r3, [sp, #12]
    3fa8:	3301      	adds	r3, #1
    3faa:	9303      	str	r3, [sp, #12]
    3fac:	4b13      	ldr	r3, [pc, #76]	; (3ffc <DisableSafeClock+0xc0>)
    3fae:	681b      	ldr	r3, [r3, #0]
    3fb0:	7a1b      	ldrb	r3, [r3, #8]
    3fb2:	461a      	mov	r2, r3
    3fb4:	9b03      	ldr	r3, [sp, #12]
    3fb6:	4293      	cmp	r3, r2
    3fb8:	d3cc      	bcc.n	3f54 <DisableSafeClock+0x18>
    3fba:	e000      	b.n	3fbe <DisableSafeClock+0x82>
                break;
    3fbc:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    3fbe:	f89d 300b 	ldrb.w	r3, [sp, #11]
    3fc2:	f083 0301 	eor.w	r3, r3, #1
    3fc6:	b2db      	uxtb	r3, r3
    3fc8:	2b00      	cmp	r3, #0
    3fca:	d013      	beq.n	3ff4 <DisableSafeClock+0xb8>
    3fcc:	4b0e      	ldr	r3, [pc, #56]	; (4008 <DisableSafeClock+0xcc>)
    3fce:	781b      	ldrb	r3, [r3, #0]
    3fd0:	f083 0301 	eor.w	r3, r3, #1
    3fd4:	b2db      	uxtb	r3, r3
    3fd6:	2b00      	cmp	r3, #0
    3fd8:	d00c      	beq.n	3ff4 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    3fda:	4b09      	ldr	r3, [pc, #36]	; (4000 <DisableSafeClock+0xc4>)
    3fdc:	791b      	ldrb	r3, [r3, #4]
    3fde:	4619      	mov	r1, r3
    3fe0:	4a08      	ldr	r2, [pc, #32]	; (4004 <DisableSafeClock+0xc8>)
    3fe2:	460b      	mov	r3, r1
    3fe4:	005b      	lsls	r3, r3, #1
    3fe6:	440b      	add	r3, r1
    3fe8:	009b      	lsls	r3, r3, #2
    3fea:	4413      	add	r3, r2
    3fec:	3308      	adds	r3, #8
    3fee:	681b      	ldr	r3, [r3, #0]
    3ff0:	2005      	movs	r0, #5
    3ff2:	4798      	blx	r3
    }
}
    3ff4:	bf00      	nop
    3ff6:	b005      	add	sp, #20
    3ff8:	f85d fb04 	ldr.w	pc, [sp], #4
    3ffc:	1fff8bc0 	.word	0x1fff8bc0
    4000:	000078d0 	.word	0x000078d0
    4004:	00007f00 	.word	0x00007f00
    4008:	1fff8b18 	.word	0x1fff8b18

0000400c <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    400c:	4b06      	ldr	r3, [pc, #24]	; (4028 <SetFircToResetValue_TrustedCall+0x1c>)
    400e:	2200      	movs	r2, #0
    4010:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    4014:	4b04      	ldr	r3, [pc, #16]	; (4028 <SetFircToResetValue_TrustedCall+0x1c>)
    4016:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    401a:	4a03      	ldr	r2, [pc, #12]	; (4028 <SetFircToResetValue_TrustedCall+0x1c>)
    401c:	f043 0301 	orr.w	r3, r3, #1
    4020:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    4024:	bf00      	nop
    4026:	4770      	bx	lr
    4028:	40064000 	.word	0x40064000

0000402c <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    402c:	b084      	sub	sp, #16
    402e:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    4030:	2303      	movs	r3, #3
    4032:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4034:	2300      	movs	r3, #0
    4036:	9302      	str	r3, [sp, #8]
    4038:	e028      	b.n	408c <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    403a:	9b01      	ldr	r3, [sp, #4]
    403c:	9a02      	ldr	r2, [sp, #8]
    403e:	320d      	adds	r2, #13
    4040:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4044:	2b28      	cmp	r3, #40	; 0x28
    4046:	d10b      	bne.n	4060 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4048:	9a01      	ldr	r2, [sp, #4]
    404a:	9b02      	ldr	r3, [sp, #8]
    404c:	330d      	adds	r3, #13
    404e:	00db      	lsls	r3, r3, #3
    4050:	4413      	add	r3, r2
    4052:	685b      	ldr	r3, [r3, #4]
    4054:	4a2b      	ldr	r2, [pc, #172]	; (4104 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    4056:	5cd3      	ldrb	r3, [r2, r3]
    4058:	011b      	lsls	r3, r3, #4
    405a:	9a03      	ldr	r2, [sp, #12]
    405c:	4313      	orrs	r3, r2
    405e:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    4060:	9b01      	ldr	r3, [sp, #4]
    4062:	9a02      	ldr	r2, [sp, #8]
    4064:	320d      	adds	r2, #13
    4066:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    406a:	2b29      	cmp	r3, #41	; 0x29
    406c:	d10b      	bne.n	4086 <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    406e:	9a01      	ldr	r2, [sp, #4]
    4070:	9b02      	ldr	r3, [sp, #8]
    4072:	330d      	adds	r3, #13
    4074:	00db      	lsls	r3, r3, #3
    4076:	4413      	add	r3, r2
    4078:	685b      	ldr	r3, [r3, #4]
    407a:	4a23      	ldr	r2, [pc, #140]	; (4108 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    407c:	5cd3      	ldrb	r3, [r2, r3]
    407e:	009b      	lsls	r3, r3, #2
    4080:	9a03      	ldr	r2, [sp, #12]
    4082:	4313      	orrs	r3, r2
    4084:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4086:	9b02      	ldr	r3, [sp, #8]
    4088:	3301      	adds	r3, #1
    408a:	9302      	str	r3, [sp, #8]
    408c:	9b01      	ldr	r3, [sp, #4]
    408e:	7adb      	ldrb	r3, [r3, #11]
    4090:	461a      	mov	r2, r3
    4092:	9b02      	ldr	r3, [sp, #8]
    4094:	4293      	cmp	r3, r2
    4096:	d3d0      	bcc.n	403a <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4098:	2300      	movs	r3, #0
    409a:	9302      	str	r3, [sp, #8]
    409c:	e026      	b.n	40ec <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    409e:	9a01      	ldr	r2, [sp, #4]
    40a0:	9b02      	ldr	r3, [sp, #8]
    40a2:	334e      	adds	r3, #78	; 0x4e
    40a4:	00db      	lsls	r3, r3, #3
    40a6:	4413      	add	r3, r2
    40a8:	685b      	ldr	r3, [r3, #4]
    40aa:	2b12      	cmp	r3, #18
    40ac:	d109      	bne.n	40c2 <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    40ae:	9a01      	ldr	r2, [sp, #4]
    40b0:	9b02      	ldr	r3, [sp, #8]
    40b2:	334e      	adds	r3, #78	; 0x4e
    40b4:	00db      	lsls	r3, r3, #3
    40b6:	4413      	add	r3, r2
    40b8:	891b      	ldrh	r3, [r3, #8]
    40ba:	005b      	lsls	r3, r3, #1
    40bc:	9a03      	ldr	r2, [sp, #12]
    40be:	4313      	orrs	r3, r2
    40c0:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    40c2:	9a01      	ldr	r2, [sp, #4]
    40c4:	9b02      	ldr	r3, [sp, #8]
    40c6:	334e      	adds	r3, #78	; 0x4e
    40c8:	00db      	lsls	r3, r3, #3
    40ca:	4413      	add	r3, r2
    40cc:	685b      	ldr	r3, [r3, #4]
    40ce:	2b13      	cmp	r3, #19
    40d0:	d109      	bne.n	40e6 <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    40d2:	9a01      	ldr	r2, [sp, #4]
    40d4:	9b02      	ldr	r3, [sp, #8]
    40d6:	334e      	adds	r3, #78	; 0x4e
    40d8:	00db      	lsls	r3, r3, #3
    40da:	4413      	add	r3, r2
    40dc:	891b      	ldrh	r3, [r3, #8]
    40de:	461a      	mov	r2, r3
    40e0:	9b03      	ldr	r3, [sp, #12]
    40e2:	4313      	orrs	r3, r2
    40e4:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    40e6:	9b02      	ldr	r3, [sp, #8]
    40e8:	3301      	adds	r3, #1
    40ea:	9302      	str	r3, [sp, #8]
    40ec:	9b01      	ldr	r3, [sp, #4]
    40ee:	7c1b      	ldrb	r3, [r3, #16]
    40f0:	461a      	mov	r2, r3
    40f2:	9b02      	ldr	r3, [sp, #8]
    40f4:	4293      	cmp	r3, r2
    40f6:	d3d2      	bcc.n	409e <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    40f8:	4a04      	ldr	r2, [pc, #16]	; (410c <SetSimLpoclksRegister_TrustedCall+0xe0>)
    40fa:	9b03      	ldr	r3, [sp, #12]
    40fc:	6113      	str	r3, [r2, #16]
}
    40fe:	bf00      	nop
    4100:	b004      	add	sp, #16
    4102:	4770      	bx	lr
    4104:	00007c50 	.word	0x00007c50
    4108:	00007d08 	.word	0x00007d08
    410c:	40048000 	.word	0x40048000

00004110 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    4110:	b500      	push	{lr}
    4112:	b089      	sub	sp, #36	; 0x24
    4114:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4116:	2300      	movs	r3, #0
    4118:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    411c:	4a21      	ldr	r2, [pc, #132]	; (41a4 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    411e:	9b01      	ldr	r3, [sp, #4]
    4120:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    4122:	4b21      	ldr	r3, [pc, #132]	; (41a8 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4124:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4128:	f003 0301 	and.w	r3, r3, #1
    412c:	2b00      	cmp	r3, #0
    412e:	d12e      	bne.n	418e <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    4130:	4b1e      	ldr	r3, [pc, #120]	; (41ac <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4132:	2200      	movs	r2, #0
    4134:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    4136:	f7ff ff69 	bl	400c <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    413a:	aa03      	add	r2, sp, #12
    413c:	a904      	add	r1, sp, #16
    413e:	a805      	add	r0, sp, #20
    4140:	f24c 3350 	movw	r3, #50000	; 0xc350
    4144:	f7fe f8ae 	bl	22a4 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4148:	4b17      	ldr	r3, [pc, #92]	; (41a8 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    414a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    414e:	0e1b      	lsrs	r3, r3, #24
    4150:	f003 0301 	and.w	r3, r3, #1
    4154:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4156:	9a03      	ldr	r2, [sp, #12]
    4158:	a904      	add	r1, sp, #16
    415a:	ab05      	add	r3, sp, #20
    415c:	4618      	mov	r0, r3
    415e:	f7fe f8bb 	bl	22d8 <Clock_Ip_TimeoutExpired>
    4162:	4603      	mov	r3, r0
    4164:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    4168:	9b06      	ldr	r3, [sp, #24]
    416a:	2b00      	cmp	r3, #0
    416c:	d106      	bne.n	417c <Clock_Ip_SpecificPlatformInitClock+0x6c>
    416e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4172:	f083 0301 	eor.w	r3, r3, #1
    4176:	b2db      	uxtb	r3, r3
    4178:	2b00      	cmp	r3, #0
    417a:	d1e5      	bne.n	4148 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    417c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4180:	2b00      	cmp	r3, #0
    4182:	d007      	beq.n	4194 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    4184:	2105      	movs	r1, #5
    4186:	2001      	movs	r0, #1
    4188:	f7fe f87c 	bl	2284 <Clock_Ip_ReportClockErrors>
    418c:	e002      	b.n	4194 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    418e:	4b07      	ldr	r3, [pc, #28]	; (41ac <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4190:	2201      	movs	r2, #1
    4192:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    4194:	9801      	ldr	r0, [sp, #4]
    4196:	f7ff ff49 	bl	402c <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    419a:	bf00      	nop
    419c:	b009      	add	sp, #36	; 0x24
    419e:	f85d fb04 	ldr.w	pc, [sp], #4
    41a2:	bf00      	nop
    41a4:	1fff8bc0 	.word	0x1fff8bc0
    41a8:	40064000 	.word	0x40064000
    41ac:	1fff8b18 	.word	0x1fff8b18

000041b0 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    41b0:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    41b2:	2300      	movs	r3, #0
    41b4:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    41b6:	4b29      	ldr	r3, [pc, #164]	; (425c <getFircConfig+0xac>)
    41b8:	681b      	ldr	r3, [r3, #0]
    41ba:	2b00      	cmp	r3, #0
    41bc:	d024      	beq.n	4208 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    41be:	2300      	movs	r3, #0
    41c0:	9301      	str	r3, [sp, #4]
    41c2:	e01a      	b.n	41fa <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    41c4:	4b25      	ldr	r3, [pc, #148]	; (425c <getFircConfig+0xac>)
    41c6:	6819      	ldr	r1, [r3, #0]
    41c8:	9a01      	ldr	r2, [sp, #4]
    41ca:	4613      	mov	r3, r2
    41cc:	005b      	lsls	r3, r3, #1
    41ce:	4413      	add	r3, r2
    41d0:	009b      	lsls	r3, r3, #2
    41d2:	440b      	add	r3, r1
    41d4:	3314      	adds	r3, #20
    41d6:	681b      	ldr	r3, [r3, #0]
    41d8:	2b05      	cmp	r3, #5
    41da:	d10b      	bne.n	41f4 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    41dc:	4b1f      	ldr	r3, [pc, #124]	; (425c <getFircConfig+0xac>)
    41de:	6819      	ldr	r1, [r3, #0]
    41e0:	9a01      	ldr	r2, [sp, #4]
    41e2:	4613      	mov	r3, r2
    41e4:	005b      	lsls	r3, r3, #1
    41e6:	4413      	add	r3, r2
    41e8:	009b      	lsls	r3, r3, #2
    41ea:	3310      	adds	r3, #16
    41ec:	440b      	add	r3, r1
    41ee:	3304      	adds	r3, #4
    41f0:	9300      	str	r3, [sp, #0]
                break;
    41f2:	e009      	b.n	4208 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    41f4:	9b01      	ldr	r3, [sp, #4]
    41f6:	3301      	adds	r3, #1
    41f8:	9301      	str	r3, [sp, #4]
    41fa:	4b18      	ldr	r3, [pc, #96]	; (425c <getFircConfig+0xac>)
    41fc:	681b      	ldr	r3, [r3, #0]
    41fe:	7a1b      	ldrb	r3, [r3, #8]
    4200:	461a      	mov	r2, r3
    4202:	9b01      	ldr	r3, [sp, #4]
    4204:	4293      	cmp	r3, r2
    4206:	d3dd      	bcc.n	41c4 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4208:	9b00      	ldr	r3, [sp, #0]
    420a:	2b00      	cmp	r3, #0
    420c:	d121      	bne.n	4252 <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    420e:	4b14      	ldr	r3, [pc, #80]	; (4260 <getFircConfig+0xb0>)
    4210:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    4212:	4b13      	ldr	r3, [pc, #76]	; (4260 <getFircConfig+0xb0>)
    4214:	2205      	movs	r2, #5
    4216:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    4218:	4b12      	ldr	r3, [pc, #72]	; (4264 <getFircConfig+0xb4>)
    421a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    421e:	b29b      	uxth	r3, r3
    4220:	f003 0301 	and.w	r3, r3, #1
    4224:	b29a      	uxth	r2, r3
    4226:	4b0e      	ldr	r3, [pc, #56]	; (4260 <getFircConfig+0xb0>)
    4228:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    422a:	4b0e      	ldr	r3, [pc, #56]	; (4264 <getFircConfig+0xb4>)
    422c:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    4230:	b2db      	uxtb	r3, r3
    4232:	f003 0303 	and.w	r3, r3, #3
    4236:	b2da      	uxtb	r2, r3
    4238:	4b09      	ldr	r3, [pc, #36]	; (4260 <getFircConfig+0xb0>)
    423a:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    423c:	4b09      	ldr	r3, [pc, #36]	; (4264 <getFircConfig+0xb4>)
    423e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4242:	b2db      	uxtb	r3, r3
    4244:	10db      	asrs	r3, r3, #3
    4246:	b2db      	uxtb	r3, r3
    4248:	f003 0301 	and.w	r3, r3, #1
    424c:	b2da      	uxtb	r2, r3
    424e:	4b04      	ldr	r3, [pc, #16]	; (4260 <getFircConfig+0xb0>)
    4250:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    4252:	9b00      	ldr	r3, [sp, #0]
}
    4254:	4618      	mov	r0, r3
    4256:	b002      	add	sp, #8
    4258:	4770      	bx	lr
    425a:	bf00      	nop
    425c:	1fff8bc0 	.word	0x1fff8bc0
    4260:	1fff8c2c 	.word	0x1fff8c2c
    4264:	40064000 	.word	0x40064000

00004268 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    4268:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    426a:	2300      	movs	r3, #0
    426c:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    426e:	4b20      	ldr	r3, [pc, #128]	; (42f0 <getSoscConfig+0x88>)
    4270:	681b      	ldr	r3, [r3, #0]
    4272:	2b00      	cmp	r3, #0
    4274:	d024      	beq.n	42c0 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4276:	2300      	movs	r3, #0
    4278:	9301      	str	r3, [sp, #4]
    427a:	e01a      	b.n	42b2 <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    427c:	4b1c      	ldr	r3, [pc, #112]	; (42f0 <getSoscConfig+0x88>)
    427e:	6819      	ldr	r1, [r3, #0]
    4280:	9a01      	ldr	r2, [sp, #4]
    4282:	4613      	mov	r3, r2
    4284:	009b      	lsls	r3, r3, #2
    4286:	4413      	add	r3, r2
    4288:	009b      	lsls	r3, r3, #2
    428a:	440b      	add	r3, r1
    428c:	332c      	adds	r3, #44	; 0x2c
    428e:	681b      	ldr	r3, [r3, #0]
    4290:	2b08      	cmp	r3, #8
    4292:	d10b      	bne.n	42ac <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    4294:	4b16      	ldr	r3, [pc, #88]	; (42f0 <getSoscConfig+0x88>)
    4296:	6819      	ldr	r1, [r3, #0]
    4298:	9a01      	ldr	r2, [sp, #4]
    429a:	4613      	mov	r3, r2
    429c:	009b      	lsls	r3, r3, #2
    429e:	4413      	add	r3, r2
    42a0:	009b      	lsls	r3, r3, #2
    42a2:	3328      	adds	r3, #40	; 0x28
    42a4:	440b      	add	r3, r1
    42a6:	3304      	adds	r3, #4
    42a8:	9300      	str	r3, [sp, #0]
                break;
    42aa:	e009      	b.n	42c0 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    42ac:	9b01      	ldr	r3, [sp, #4]
    42ae:	3301      	adds	r3, #1
    42b0:	9301      	str	r3, [sp, #4]
    42b2:	4b0f      	ldr	r3, [pc, #60]	; (42f0 <getSoscConfig+0x88>)
    42b4:	681b      	ldr	r3, [r3, #0]
    42b6:	7a5b      	ldrb	r3, [r3, #9]
    42b8:	461a      	mov	r2, r3
    42ba:	9b01      	ldr	r3, [sp, #4]
    42bc:	4293      	cmp	r3, r2
    42be:	d3dd      	bcc.n	427c <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    42c0:	9b00      	ldr	r3, [sp, #0]
    42c2:	2b00      	cmp	r3, #0
    42c4:	d110      	bne.n	42e8 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    42c6:	4b0b      	ldr	r3, [pc, #44]	; (42f4 <getSoscConfig+0x8c>)
    42c8:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    42ca:	4b0a      	ldr	r3, [pc, #40]	; (42f4 <getSoscConfig+0x8c>)
    42cc:	2208      	movs	r2, #8
    42ce:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    42d0:	4b09      	ldr	r3, [pc, #36]	; (42f8 <getSoscConfig+0x90>)
    42d2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    42d6:	b29b      	uxth	r3, r3
    42d8:	f003 0301 	and.w	r3, r3, #1
    42dc:	b29a      	uxth	r2, r3
    42de:	4b05      	ldr	r3, [pc, #20]	; (42f4 <getSoscConfig+0x8c>)
    42e0:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    42e2:	4b04      	ldr	r3, [pc, #16]	; (42f4 <getSoscConfig+0x8c>)
    42e4:	4a05      	ldr	r2, [pc, #20]	; (42fc <getSoscConfig+0x94>)
    42e6:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    42e8:	9b00      	ldr	r3, [sp, #0]
}
    42ea:	4618      	mov	r0, r3
    42ec:	b002      	add	sp, #8
    42ee:	4770      	bx	lr
    42f0:	1fff8bc0 	.word	0x1fff8bc0
    42f4:	1fff8c38 	.word	0x1fff8c38
    42f8:	40064000 	.word	0x40064000
    42fc:	02625a00 	.word	0x02625a00

00004300 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    4300:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    4302:	2300      	movs	r3, #0
    4304:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4306:	4b28      	ldr	r3, [pc, #160]	; (43a8 <getSpllConfig+0xa8>)
    4308:	681b      	ldr	r3, [r3, #0]
    430a:	2b00      	cmp	r3, #0
    430c:	d023      	beq.n	4356 <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    430e:	2300      	movs	r3, #0
    4310:	9301      	str	r3, [sp, #4]
    4312:	e019      	b.n	4348 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    4314:	4b24      	ldr	r3, [pc, #144]	; (43a8 <getSpllConfig+0xa8>)
    4316:	6819      	ldr	r1, [r3, #0]
    4318:	9a01      	ldr	r2, [sp, #4]
    431a:	4613      	mov	r3, r2
    431c:	009b      	lsls	r3, r3, #2
    431e:	4413      	add	r3, r2
    4320:	00db      	lsls	r3, r3, #3
    4322:	440b      	add	r3, r1
    4324:	3340      	adds	r3, #64	; 0x40
    4326:	681b      	ldr	r3, [r3, #0]
    4328:	2b09      	cmp	r3, #9
    432a:	d10a      	bne.n	4342 <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    432c:	4b1e      	ldr	r3, [pc, #120]	; (43a8 <getSpllConfig+0xa8>)
    432e:	6819      	ldr	r1, [r3, #0]
    4330:	9a01      	ldr	r2, [sp, #4]
    4332:	4613      	mov	r3, r2
    4334:	009b      	lsls	r3, r3, #2
    4336:	4413      	add	r3, r2
    4338:	00db      	lsls	r3, r3, #3
    433a:	3340      	adds	r3, #64	; 0x40
    433c:	440b      	add	r3, r1
    433e:	9300      	str	r3, [sp, #0]
                break;
    4340:	e009      	b.n	4356 <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4342:	9b01      	ldr	r3, [sp, #4]
    4344:	3301      	adds	r3, #1
    4346:	9301      	str	r3, [sp, #4]
    4348:	4b17      	ldr	r3, [pc, #92]	; (43a8 <getSpllConfig+0xa8>)
    434a:	681b      	ldr	r3, [r3, #0]
    434c:	7a9b      	ldrb	r3, [r3, #10]
    434e:	461a      	mov	r2, r3
    4350:	9b01      	ldr	r3, [sp, #4]
    4352:	4293      	cmp	r3, r2
    4354:	d3de      	bcc.n	4314 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4356:	9b00      	ldr	r3, [sp, #0]
    4358:	2b00      	cmp	r3, #0
    435a:	d121      	bne.n	43a0 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    435c:	4b13      	ldr	r3, [pc, #76]	; (43ac <getSpllConfig+0xac>)
    435e:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    4360:	4b12      	ldr	r3, [pc, #72]	; (43ac <getSpllConfig+0xac>)
    4362:	2209      	movs	r2, #9
    4364:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    4366:	4b12      	ldr	r3, [pc, #72]	; (43b0 <getSpllConfig+0xb0>)
    4368:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    436c:	b29b      	uxth	r3, r3
    436e:	f003 0301 	and.w	r3, r3, #1
    4372:	b29a      	uxth	r2, r3
    4374:	4b0d      	ldr	r3, [pc, #52]	; (43ac <getSpllConfig+0xac>)
    4376:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    4378:	4b0d      	ldr	r3, [pc, #52]	; (43b0 <getSpllConfig+0xb0>)
    437a:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    437e:	0a1b      	lsrs	r3, r3, #8
    4380:	b2db      	uxtb	r3, r3
    4382:	f003 0307 	and.w	r3, r3, #7
    4386:	b2da      	uxtb	r2, r3
    4388:	4b08      	ldr	r3, [pc, #32]	; (43ac <getSpllConfig+0xac>)
    438a:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    438c:	4b08      	ldr	r3, [pc, #32]	; (43b0 <getSpllConfig+0xb0>)
    438e:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4392:	0c1b      	lsrs	r3, r3, #16
    4394:	b2db      	uxtb	r3, r3
    4396:	f003 031f 	and.w	r3, r3, #31
    439a:	b2da      	uxtb	r2, r3
    439c:	4b03      	ldr	r3, [pc, #12]	; (43ac <getSpllConfig+0xac>)
    439e:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    43a0:	9b00      	ldr	r3, [sp, #0]
}
    43a2:	4618      	mov	r0, r3
    43a4:	b002      	add	sp, #8
    43a6:	4770      	bx	lr
    43a8:	1fff8bc0 	.word	0x1fff8bc0
    43ac:	1fff8c4c 	.word	0x1fff8c4c
    43b0:	40064000 	.word	0x40064000

000043b4 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    43b4:	b086      	sub	sp, #24
    43b6:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    43b8:	2300      	movs	r3, #0
    43ba:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    43bc:	9b01      	ldr	r3, [sp, #4]
    43be:	2b1b      	cmp	r3, #27
    43c0:	d00f      	beq.n	43e2 <getSelectorConfig+0x2e>
    43c2:	9b01      	ldr	r3, [sp, #4]
    43c4:	2b1b      	cmp	r3, #27
    43c6:	d80f      	bhi.n	43e8 <getSelectorConfig+0x34>
    43c8:	9b01      	ldr	r3, [sp, #4]
    43ca:	2b19      	cmp	r3, #25
    43cc:	d003      	beq.n	43d6 <getSelectorConfig+0x22>
    43ce:	9b01      	ldr	r3, [sp, #4]
    43d0:	2b1a      	cmp	r3, #26
    43d2:	d003      	beq.n	43dc <getSelectorConfig+0x28>
    43d4:	e008      	b.n	43e8 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    43d6:	2300      	movs	r3, #0
    43d8:	9304      	str	r3, [sp, #16]
            break;
    43da:	e008      	b.n	43ee <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    43dc:	2301      	movs	r3, #1
    43de:	9304      	str	r3, [sp, #16]
            break;
    43e0:	e005      	b.n	43ee <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    43e2:	2302      	movs	r3, #2
    43e4:	9304      	str	r3, [sp, #16]
            break;
    43e6:	e002      	b.n	43ee <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    43e8:	2300      	movs	r3, #0
    43ea:	9304      	str	r3, [sp, #16]
            break;
    43ec:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    43ee:	4b36      	ldr	r3, [pc, #216]	; (44c8 <getSelectorConfig+0x114>)
    43f0:	681b      	ldr	r3, [r3, #0]
    43f2:	2b00      	cmp	r3, #0
    43f4:	d01d      	beq.n	4432 <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    43f6:	2300      	movs	r3, #0
    43f8:	9303      	str	r3, [sp, #12]
    43fa:	e013      	b.n	4424 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    43fc:	4b32      	ldr	r3, [pc, #200]	; (44c8 <getSelectorConfig+0x114>)
    43fe:	681b      	ldr	r3, [r3, #0]
    4400:	9a03      	ldr	r2, [sp, #12]
    4402:	320d      	adds	r2, #13
    4404:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4408:	9a01      	ldr	r2, [sp, #4]
    440a:	429a      	cmp	r2, r3
    440c:	d107      	bne.n	441e <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    440e:	4b2e      	ldr	r3, [pc, #184]	; (44c8 <getSelectorConfig+0x114>)
    4410:	681a      	ldr	r2, [r3, #0]
    4412:	9b03      	ldr	r3, [sp, #12]
    4414:	330d      	adds	r3, #13
    4416:	00db      	lsls	r3, r3, #3
    4418:	4413      	add	r3, r2
    441a:	9305      	str	r3, [sp, #20]
                break;
    441c:	e009      	b.n	4432 <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    441e:	9b03      	ldr	r3, [sp, #12]
    4420:	3301      	adds	r3, #1
    4422:	9303      	str	r3, [sp, #12]
    4424:	4b28      	ldr	r3, [pc, #160]	; (44c8 <getSelectorConfig+0x114>)
    4426:	681b      	ldr	r3, [r3, #0]
    4428:	7adb      	ldrb	r3, [r3, #11]
    442a:	461a      	mov	r2, r3
    442c:	9b03      	ldr	r3, [sp, #12]
    442e:	4293      	cmp	r3, r2
    4430:	d3e4      	bcc.n	43fc <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4432:	9b05      	ldr	r3, [sp, #20]
    4434:	2b00      	cmp	r3, #0
    4436:	d140      	bne.n	44ba <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    4438:	9b04      	ldr	r3, [sp, #16]
    443a:	00db      	lsls	r3, r3, #3
    443c:	4a23      	ldr	r2, [pc, #140]	; (44cc <getSelectorConfig+0x118>)
    443e:	4413      	add	r3, r2
    4440:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    4442:	4922      	ldr	r1, [pc, #136]	; (44cc <getSelectorConfig+0x118>)
    4444:	9b04      	ldr	r3, [sp, #16]
    4446:	9a01      	ldr	r2, [sp, #4]
    4448:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    444c:	9b01      	ldr	r3, [sp, #4]
    444e:	2b1b      	cmp	r3, #27
    4450:	d025      	beq.n	449e <getSelectorConfig+0xea>
    4452:	9b01      	ldr	r3, [sp, #4]
    4454:	2b1b      	cmp	r3, #27
    4456:	d832      	bhi.n	44be <getSelectorConfig+0x10a>
    4458:	9b01      	ldr	r3, [sp, #4]
    445a:	2b19      	cmp	r3, #25
    445c:	d003      	beq.n	4466 <getSelectorConfig+0xb2>
    445e:	9b01      	ldr	r3, [sp, #4]
    4460:	2b1a      	cmp	r3, #26
    4462:	d00e      	beq.n	4482 <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4464:	e02b      	b.n	44be <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    4466:	4b1a      	ldr	r3, [pc, #104]	; (44d0 <getSelectorConfig+0x11c>)
    4468:	695b      	ldr	r3, [r3, #20]
    446a:	0e1b      	lsrs	r3, r3, #24
    446c:	f003 030f 	and.w	r3, r3, #15
    4470:	4a18      	ldr	r2, [pc, #96]	; (44d4 <getSelectorConfig+0x120>)
    4472:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4476:	4915      	ldr	r1, [pc, #84]	; (44cc <getSelectorConfig+0x118>)
    4478:	9b04      	ldr	r3, [sp, #16]
    447a:	00db      	lsls	r3, r3, #3
    447c:	440b      	add	r3, r1
    447e:	605a      	str	r2, [r3, #4]
                break;
    4480:	e01e      	b.n	44c0 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    4482:	4b13      	ldr	r3, [pc, #76]	; (44d0 <getSelectorConfig+0x11c>)
    4484:	699b      	ldr	r3, [r3, #24]
    4486:	0e1b      	lsrs	r3, r3, #24
    4488:	f003 030f 	and.w	r3, r3, #15
    448c:	4a11      	ldr	r2, [pc, #68]	; (44d4 <getSelectorConfig+0x120>)
    448e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4492:	490e      	ldr	r1, [pc, #56]	; (44cc <getSelectorConfig+0x118>)
    4494:	9b04      	ldr	r3, [sp, #16]
    4496:	00db      	lsls	r3, r3, #3
    4498:	440b      	add	r3, r1
    449a:	605a      	str	r2, [r3, #4]
                break;
    449c:	e010      	b.n	44c0 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    449e:	4b0c      	ldr	r3, [pc, #48]	; (44d0 <getSelectorConfig+0x11c>)
    44a0:	69db      	ldr	r3, [r3, #28]
    44a2:	0e1b      	lsrs	r3, r3, #24
    44a4:	f003 030f 	and.w	r3, r3, #15
    44a8:	4a0a      	ldr	r2, [pc, #40]	; (44d4 <getSelectorConfig+0x120>)
    44aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    44ae:	4907      	ldr	r1, [pc, #28]	; (44cc <getSelectorConfig+0x118>)
    44b0:	9b04      	ldr	r3, [sp, #16]
    44b2:	00db      	lsls	r3, r3, #3
    44b4:	440b      	add	r3, r1
    44b6:	605a      	str	r2, [r3, #4]
                break;
    44b8:	e002      	b.n	44c0 <getSelectorConfig+0x10c>
        }
    }
    44ba:	bf00      	nop
    44bc:	e000      	b.n	44c0 <getSelectorConfig+0x10c>
                break;
    44be:	bf00      	nop

    return ReturnValue;
    44c0:	9b05      	ldr	r3, [sp, #20]
}
    44c2:	4618      	mov	r0, r3
    44c4:	b006      	add	sp, #24
    44c6:	4770      	bx	lr
    44c8:	1fff8bc0 	.word	0x1fff8bc0
    44cc:	1fff8c74 	.word	0x1fff8c74
    44d0:	40064000 	.word	0x40064000
    44d4:	00007fd0 	.word	0x00007fd0

000044d8 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    44d8:	b086      	sub	sp, #24
    44da:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    44dc:	2300      	movs	r3, #0
    44de:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    44e0:	2300      	movs	r3, #0
    44e2:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    44e4:	9b01      	ldr	r3, [sp, #4]
    44e6:	2b1f      	cmp	r3, #31
    44e8:	d00f      	beq.n	450a <getCoreDividerConfig+0x32>
    44ea:	9b01      	ldr	r3, [sp, #4]
    44ec:	2b1f      	cmp	r3, #31
    44ee:	d80f      	bhi.n	4510 <getCoreDividerConfig+0x38>
    44f0:	9b01      	ldr	r3, [sp, #4]
    44f2:	2b1d      	cmp	r3, #29
    44f4:	d003      	beq.n	44fe <getCoreDividerConfig+0x26>
    44f6:	9b01      	ldr	r3, [sp, #4]
    44f8:	2b1e      	cmp	r3, #30
    44fa:	d003      	beq.n	4504 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    44fc:	e008      	b.n	4510 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    44fe:	2300      	movs	r3, #0
    4500:	9304      	str	r3, [sp, #16]
            break;
    4502:	e006      	b.n	4512 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4504:	2301      	movs	r3, #1
    4506:	9304      	str	r3, [sp, #16]
            break;
    4508:	e003      	b.n	4512 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    450a:	2302      	movs	r3, #2
    450c:	9304      	str	r3, [sp, #16]
            break;
    450e:	e000      	b.n	4512 <getCoreDividerConfig+0x3a>
                break;
    4510:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4512:	4b41      	ldr	r3, [pc, #260]	; (4618 <getCoreDividerConfig+0x140>)
    4514:	681b      	ldr	r3, [r3, #0]
    4516:	2b00      	cmp	r3, #0
    4518:	d026      	beq.n	4568 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    451a:	2300      	movs	r3, #0
    451c:	9303      	str	r3, [sp, #12]
    451e:	e01c      	b.n	455a <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4520:	4b3d      	ldr	r3, [pc, #244]	; (4618 <getCoreDividerConfig+0x140>)
    4522:	6819      	ldr	r1, [r3, #0]
    4524:	9a03      	ldr	r2, [sp, #12]
    4526:	4613      	mov	r3, r2
    4528:	005b      	lsls	r3, r3, #1
    452a:	4413      	add	r3, r2
    452c:	009b      	lsls	r3, r3, #2
    452e:	440b      	add	r3, r1
    4530:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4534:	681b      	ldr	r3, [r3, #0]
    4536:	9a01      	ldr	r2, [sp, #4]
    4538:	429a      	cmp	r2, r3
    453a:	d10b      	bne.n	4554 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    453c:	4b36      	ldr	r3, [pc, #216]	; (4618 <getCoreDividerConfig+0x140>)
    453e:	6819      	ldr	r1, [r3, #0]
    4540:	9a03      	ldr	r2, [sp, #12]
    4542:	4613      	mov	r3, r2
    4544:	005b      	lsls	r3, r3, #1
    4546:	4413      	add	r3, r2
    4548:	009b      	lsls	r3, r3, #2
    454a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    454e:	440b      	add	r3, r1
    4550:	9305      	str	r3, [sp, #20]
                break;
    4552:	e009      	b.n	4568 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4554:	9b03      	ldr	r3, [sp, #12]
    4556:	3301      	adds	r3, #1
    4558:	9303      	str	r3, [sp, #12]
    455a:	4b2f      	ldr	r3, [pc, #188]	; (4618 <getCoreDividerConfig+0x140>)
    455c:	681b      	ldr	r3, [r3, #0]
    455e:	7b1b      	ldrb	r3, [r3, #12]
    4560:	461a      	mov	r2, r3
    4562:	9b03      	ldr	r3, [sp, #12]
    4564:	4293      	cmp	r3, r2
    4566:	d3db      	bcc.n	4520 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4568:	9b05      	ldr	r3, [sp, #20]
    456a:	2b00      	cmp	r3, #0
    456c:	d14d      	bne.n	460a <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    456e:	9a04      	ldr	r2, [sp, #16]
    4570:	4613      	mov	r3, r2
    4572:	005b      	lsls	r3, r3, #1
    4574:	4413      	add	r3, r2
    4576:	009b      	lsls	r3, r3, #2
    4578:	4a28      	ldr	r2, [pc, #160]	; (461c <getCoreDividerConfig+0x144>)
    457a:	4413      	add	r3, r2
    457c:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    457e:	4927      	ldr	r1, [pc, #156]	; (461c <getCoreDividerConfig+0x144>)
    4580:	9a04      	ldr	r2, [sp, #16]
    4582:	4613      	mov	r3, r2
    4584:	005b      	lsls	r3, r3, #1
    4586:	4413      	add	r3, r2
    4588:	009b      	lsls	r3, r3, #2
    458a:	440b      	add	r3, r1
    458c:	9a01      	ldr	r2, [sp, #4]
    458e:	601a      	str	r2, [r3, #0]
        switch(Name)
    4590:	9b01      	ldr	r3, [sp, #4]
    4592:	2b1f      	cmp	r3, #31
    4594:	d029      	beq.n	45ea <getCoreDividerConfig+0x112>
    4596:	9b01      	ldr	r3, [sp, #4]
    4598:	2b1f      	cmp	r3, #31
    459a:	d838      	bhi.n	460e <getCoreDividerConfig+0x136>
    459c:	9b01      	ldr	r3, [sp, #4]
    459e:	2b1d      	cmp	r3, #29
    45a0:	d003      	beq.n	45aa <getCoreDividerConfig+0xd2>
    45a2:	9b01      	ldr	r3, [sp, #4]
    45a4:	2b1e      	cmp	r3, #30
    45a6:	d010      	beq.n	45ca <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    45a8:	e031      	b.n	460e <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    45aa:	4b1d      	ldr	r3, [pc, #116]	; (4620 <getCoreDividerConfig+0x148>)
    45ac:	695b      	ldr	r3, [r3, #20]
    45ae:	0c1b      	lsrs	r3, r3, #16
    45b0:	f003 030f 	and.w	r3, r3, #15
    45b4:	1c59      	adds	r1, r3, #1
    45b6:	4819      	ldr	r0, [pc, #100]	; (461c <getCoreDividerConfig+0x144>)
    45b8:	9a04      	ldr	r2, [sp, #16]
    45ba:	4613      	mov	r3, r2
    45bc:	005b      	lsls	r3, r3, #1
    45be:	4413      	add	r3, r2
    45c0:	009b      	lsls	r3, r3, #2
    45c2:	4403      	add	r3, r0
    45c4:	3304      	adds	r3, #4
    45c6:	6019      	str	r1, [r3, #0]
                break;
    45c8:	e022      	b.n	4610 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    45ca:	4b15      	ldr	r3, [pc, #84]	; (4620 <getCoreDividerConfig+0x148>)
    45cc:	699b      	ldr	r3, [r3, #24]
    45ce:	0c1b      	lsrs	r3, r3, #16
    45d0:	f003 030f 	and.w	r3, r3, #15
    45d4:	1c59      	adds	r1, r3, #1
    45d6:	4811      	ldr	r0, [pc, #68]	; (461c <getCoreDividerConfig+0x144>)
    45d8:	9a04      	ldr	r2, [sp, #16]
    45da:	4613      	mov	r3, r2
    45dc:	005b      	lsls	r3, r3, #1
    45de:	4413      	add	r3, r2
    45e0:	009b      	lsls	r3, r3, #2
    45e2:	4403      	add	r3, r0
    45e4:	3304      	adds	r3, #4
    45e6:	6019      	str	r1, [r3, #0]
                break;
    45e8:	e012      	b.n	4610 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    45ea:	4b0d      	ldr	r3, [pc, #52]	; (4620 <getCoreDividerConfig+0x148>)
    45ec:	69db      	ldr	r3, [r3, #28]
    45ee:	0c1b      	lsrs	r3, r3, #16
    45f0:	f003 030f 	and.w	r3, r3, #15
    45f4:	1c59      	adds	r1, r3, #1
    45f6:	4809      	ldr	r0, [pc, #36]	; (461c <getCoreDividerConfig+0x144>)
    45f8:	9a04      	ldr	r2, [sp, #16]
    45fa:	4613      	mov	r3, r2
    45fc:	005b      	lsls	r3, r3, #1
    45fe:	4413      	add	r3, r2
    4600:	009b      	lsls	r3, r3, #2
    4602:	4403      	add	r3, r0
    4604:	3304      	adds	r3, #4
    4606:	6019      	str	r1, [r3, #0]
                break;
    4608:	e002      	b.n	4610 <getCoreDividerConfig+0x138>
        }
    }
    460a:	bf00      	nop
    460c:	e000      	b.n	4610 <getCoreDividerConfig+0x138>
                break;
    460e:	bf00      	nop

    return ReturnValue;
    4610:	9b05      	ldr	r3, [sp, #20]
}
    4612:	4618      	mov	r0, r3
    4614:	b006      	add	sp, #24
    4616:	4770      	bx	lr
    4618:	1fff8bc0 	.word	0x1fff8bc0
    461c:	1fff8c8c 	.word	0x1fff8c8c
    4620:	40064000 	.word	0x40064000

00004624 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    4624:	b086      	sub	sp, #24
    4626:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4628:	2300      	movs	r3, #0
    462a:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    462c:	2300      	movs	r3, #0
    462e:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4630:	9b01      	ldr	r3, [sp, #4]
    4632:	2b23      	cmp	r3, #35	; 0x23
    4634:	d00f      	beq.n	4656 <getBusDividerConfig+0x32>
    4636:	9b01      	ldr	r3, [sp, #4]
    4638:	2b23      	cmp	r3, #35	; 0x23
    463a:	d80f      	bhi.n	465c <getBusDividerConfig+0x38>
    463c:	9b01      	ldr	r3, [sp, #4]
    463e:	2b21      	cmp	r3, #33	; 0x21
    4640:	d003      	beq.n	464a <getBusDividerConfig+0x26>
    4642:	9b01      	ldr	r3, [sp, #4]
    4644:	2b22      	cmp	r3, #34	; 0x22
    4646:	d003      	beq.n	4650 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4648:	e008      	b.n	465c <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    464a:	2300      	movs	r3, #0
    464c:	9304      	str	r3, [sp, #16]
            break;
    464e:	e006      	b.n	465e <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4650:	2301      	movs	r3, #1
    4652:	9304      	str	r3, [sp, #16]
            break;
    4654:	e003      	b.n	465e <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4656:	2302      	movs	r3, #2
    4658:	9304      	str	r3, [sp, #16]
            break;
    465a:	e000      	b.n	465e <getBusDividerConfig+0x3a>
                break;
    465c:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    465e:	4b41      	ldr	r3, [pc, #260]	; (4764 <getBusDividerConfig+0x140>)
    4660:	681b      	ldr	r3, [r3, #0]
    4662:	2b00      	cmp	r3, #0
    4664:	d026      	beq.n	46b4 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4666:	2300      	movs	r3, #0
    4668:	9303      	str	r3, [sp, #12]
    466a:	e01c      	b.n	46a6 <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    466c:	4b3d      	ldr	r3, [pc, #244]	; (4764 <getBusDividerConfig+0x140>)
    466e:	6819      	ldr	r1, [r3, #0]
    4670:	9a03      	ldr	r2, [sp, #12]
    4672:	4613      	mov	r3, r2
    4674:	005b      	lsls	r3, r3, #1
    4676:	4413      	add	r3, r2
    4678:	009b      	lsls	r3, r3, #2
    467a:	440b      	add	r3, r1
    467c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4680:	681b      	ldr	r3, [r3, #0]
    4682:	9a01      	ldr	r2, [sp, #4]
    4684:	429a      	cmp	r2, r3
    4686:	d10b      	bne.n	46a0 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4688:	4b36      	ldr	r3, [pc, #216]	; (4764 <getBusDividerConfig+0x140>)
    468a:	6819      	ldr	r1, [r3, #0]
    468c:	9a03      	ldr	r2, [sp, #12]
    468e:	4613      	mov	r3, r2
    4690:	005b      	lsls	r3, r3, #1
    4692:	4413      	add	r3, r2
    4694:	009b      	lsls	r3, r3, #2
    4696:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    469a:	440b      	add	r3, r1
    469c:	9305      	str	r3, [sp, #20]
                break;
    469e:	e009      	b.n	46b4 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    46a0:	9b03      	ldr	r3, [sp, #12]
    46a2:	3301      	adds	r3, #1
    46a4:	9303      	str	r3, [sp, #12]
    46a6:	4b2f      	ldr	r3, [pc, #188]	; (4764 <getBusDividerConfig+0x140>)
    46a8:	681b      	ldr	r3, [r3, #0]
    46aa:	7b1b      	ldrb	r3, [r3, #12]
    46ac:	461a      	mov	r2, r3
    46ae:	9b03      	ldr	r3, [sp, #12]
    46b0:	4293      	cmp	r3, r2
    46b2:	d3db      	bcc.n	466c <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    46b4:	9b05      	ldr	r3, [sp, #20]
    46b6:	2b00      	cmp	r3, #0
    46b8:	d14d      	bne.n	4756 <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    46ba:	9a04      	ldr	r2, [sp, #16]
    46bc:	4613      	mov	r3, r2
    46be:	005b      	lsls	r3, r3, #1
    46c0:	4413      	add	r3, r2
    46c2:	009b      	lsls	r3, r3, #2
    46c4:	4a28      	ldr	r2, [pc, #160]	; (4768 <getBusDividerConfig+0x144>)
    46c6:	4413      	add	r3, r2
    46c8:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    46ca:	4927      	ldr	r1, [pc, #156]	; (4768 <getBusDividerConfig+0x144>)
    46cc:	9a04      	ldr	r2, [sp, #16]
    46ce:	4613      	mov	r3, r2
    46d0:	005b      	lsls	r3, r3, #1
    46d2:	4413      	add	r3, r2
    46d4:	009b      	lsls	r3, r3, #2
    46d6:	440b      	add	r3, r1
    46d8:	9a01      	ldr	r2, [sp, #4]
    46da:	601a      	str	r2, [r3, #0]
        switch(Name)
    46dc:	9b01      	ldr	r3, [sp, #4]
    46de:	2b23      	cmp	r3, #35	; 0x23
    46e0:	d029      	beq.n	4736 <getBusDividerConfig+0x112>
    46e2:	9b01      	ldr	r3, [sp, #4]
    46e4:	2b23      	cmp	r3, #35	; 0x23
    46e6:	d838      	bhi.n	475a <getBusDividerConfig+0x136>
    46e8:	9b01      	ldr	r3, [sp, #4]
    46ea:	2b21      	cmp	r3, #33	; 0x21
    46ec:	d003      	beq.n	46f6 <getBusDividerConfig+0xd2>
    46ee:	9b01      	ldr	r3, [sp, #4]
    46f0:	2b22      	cmp	r3, #34	; 0x22
    46f2:	d010      	beq.n	4716 <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    46f4:	e031      	b.n	475a <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    46f6:	4b1d      	ldr	r3, [pc, #116]	; (476c <getBusDividerConfig+0x148>)
    46f8:	695b      	ldr	r3, [r3, #20]
    46fa:	091b      	lsrs	r3, r3, #4
    46fc:	f003 030f 	and.w	r3, r3, #15
    4700:	1c59      	adds	r1, r3, #1
    4702:	4819      	ldr	r0, [pc, #100]	; (4768 <getBusDividerConfig+0x144>)
    4704:	9a04      	ldr	r2, [sp, #16]
    4706:	4613      	mov	r3, r2
    4708:	005b      	lsls	r3, r3, #1
    470a:	4413      	add	r3, r2
    470c:	009b      	lsls	r3, r3, #2
    470e:	4403      	add	r3, r0
    4710:	3304      	adds	r3, #4
    4712:	6019      	str	r1, [r3, #0]
                break;
    4714:	e022      	b.n	475c <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    4716:	4b15      	ldr	r3, [pc, #84]	; (476c <getBusDividerConfig+0x148>)
    4718:	699b      	ldr	r3, [r3, #24]
    471a:	091b      	lsrs	r3, r3, #4
    471c:	f003 030f 	and.w	r3, r3, #15
    4720:	1c59      	adds	r1, r3, #1
    4722:	4811      	ldr	r0, [pc, #68]	; (4768 <getBusDividerConfig+0x144>)
    4724:	9a04      	ldr	r2, [sp, #16]
    4726:	4613      	mov	r3, r2
    4728:	005b      	lsls	r3, r3, #1
    472a:	4413      	add	r3, r2
    472c:	009b      	lsls	r3, r3, #2
    472e:	4403      	add	r3, r0
    4730:	3304      	adds	r3, #4
    4732:	6019      	str	r1, [r3, #0]
                break;
    4734:	e012      	b.n	475c <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    4736:	4b0d      	ldr	r3, [pc, #52]	; (476c <getBusDividerConfig+0x148>)
    4738:	69db      	ldr	r3, [r3, #28]
    473a:	091b      	lsrs	r3, r3, #4
    473c:	f003 030f 	and.w	r3, r3, #15
    4740:	1c59      	adds	r1, r3, #1
    4742:	4809      	ldr	r0, [pc, #36]	; (4768 <getBusDividerConfig+0x144>)
    4744:	9a04      	ldr	r2, [sp, #16]
    4746:	4613      	mov	r3, r2
    4748:	005b      	lsls	r3, r3, #1
    474a:	4413      	add	r3, r2
    474c:	009b      	lsls	r3, r3, #2
    474e:	4403      	add	r3, r0
    4750:	3304      	adds	r3, #4
    4752:	6019      	str	r1, [r3, #0]
                break;
    4754:	e002      	b.n	475c <getBusDividerConfig+0x138>
        }
    }
    4756:	bf00      	nop
    4758:	e000      	b.n	475c <getBusDividerConfig+0x138>
                break;
    475a:	bf00      	nop

    return ReturnValue;
    475c:	9b05      	ldr	r3, [sp, #20]
}
    475e:	4618      	mov	r0, r3
    4760:	b006      	add	sp, #24
    4762:	4770      	bx	lr
    4764:	1fff8bc0 	.word	0x1fff8bc0
    4768:	1fff8cb0 	.word	0x1fff8cb0
    476c:	40064000 	.word	0x40064000

00004770 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    4770:	b086      	sub	sp, #24
    4772:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4774:	2300      	movs	r3, #0
    4776:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4778:	2300      	movs	r3, #0
    477a:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    477c:	9b01      	ldr	r3, [sp, #4]
    477e:	2b27      	cmp	r3, #39	; 0x27
    4780:	d00f      	beq.n	47a2 <getSlowDividerConfig+0x32>
    4782:	9b01      	ldr	r3, [sp, #4]
    4784:	2b27      	cmp	r3, #39	; 0x27
    4786:	d80f      	bhi.n	47a8 <getSlowDividerConfig+0x38>
    4788:	9b01      	ldr	r3, [sp, #4]
    478a:	2b25      	cmp	r3, #37	; 0x25
    478c:	d003      	beq.n	4796 <getSlowDividerConfig+0x26>
    478e:	9b01      	ldr	r3, [sp, #4]
    4790:	2b26      	cmp	r3, #38	; 0x26
    4792:	d003      	beq.n	479c <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4794:	e008      	b.n	47a8 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4796:	2300      	movs	r3, #0
    4798:	9304      	str	r3, [sp, #16]
            break;
    479a:	e006      	b.n	47aa <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    479c:	2301      	movs	r3, #1
    479e:	9304      	str	r3, [sp, #16]
            break;
    47a0:	e003      	b.n	47aa <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    47a2:	2302      	movs	r3, #2
    47a4:	9304      	str	r3, [sp, #16]
            break;
    47a6:	e000      	b.n	47aa <getSlowDividerConfig+0x3a>
                break;
    47a8:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    47aa:	4b40      	ldr	r3, [pc, #256]	; (48ac <getSlowDividerConfig+0x13c>)
    47ac:	681b      	ldr	r3, [r3, #0]
    47ae:	2b00      	cmp	r3, #0
    47b0:	d026      	beq.n	4800 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    47b2:	2300      	movs	r3, #0
    47b4:	9303      	str	r3, [sp, #12]
    47b6:	e01c      	b.n	47f2 <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    47b8:	4b3c      	ldr	r3, [pc, #240]	; (48ac <getSlowDividerConfig+0x13c>)
    47ba:	6819      	ldr	r1, [r3, #0]
    47bc:	9a03      	ldr	r2, [sp, #12]
    47be:	4613      	mov	r3, r2
    47c0:	005b      	lsls	r3, r3, #1
    47c2:	4413      	add	r3, r2
    47c4:	009b      	lsls	r3, r3, #2
    47c6:	440b      	add	r3, r1
    47c8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    47cc:	681b      	ldr	r3, [r3, #0]
    47ce:	9a01      	ldr	r2, [sp, #4]
    47d0:	429a      	cmp	r2, r3
    47d2:	d10b      	bne.n	47ec <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    47d4:	4b35      	ldr	r3, [pc, #212]	; (48ac <getSlowDividerConfig+0x13c>)
    47d6:	6819      	ldr	r1, [r3, #0]
    47d8:	9a03      	ldr	r2, [sp, #12]
    47da:	4613      	mov	r3, r2
    47dc:	005b      	lsls	r3, r3, #1
    47de:	4413      	add	r3, r2
    47e0:	009b      	lsls	r3, r3, #2
    47e2:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    47e6:	440b      	add	r3, r1
    47e8:	9305      	str	r3, [sp, #20]
                break;
    47ea:	e009      	b.n	4800 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    47ec:	9b03      	ldr	r3, [sp, #12]
    47ee:	3301      	adds	r3, #1
    47f0:	9303      	str	r3, [sp, #12]
    47f2:	4b2e      	ldr	r3, [pc, #184]	; (48ac <getSlowDividerConfig+0x13c>)
    47f4:	681b      	ldr	r3, [r3, #0]
    47f6:	7b1b      	ldrb	r3, [r3, #12]
    47f8:	461a      	mov	r2, r3
    47fa:	9b03      	ldr	r3, [sp, #12]
    47fc:	4293      	cmp	r3, r2
    47fe:	d3db      	bcc.n	47b8 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4800:	9b05      	ldr	r3, [sp, #20]
    4802:	2b00      	cmp	r3, #0
    4804:	d14a      	bne.n	489c <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    4806:	9a04      	ldr	r2, [sp, #16]
    4808:	4613      	mov	r3, r2
    480a:	005b      	lsls	r3, r3, #1
    480c:	4413      	add	r3, r2
    480e:	009b      	lsls	r3, r3, #2
    4810:	4a27      	ldr	r2, [pc, #156]	; (48b0 <getSlowDividerConfig+0x140>)
    4812:	4413      	add	r3, r2
    4814:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    4816:	4926      	ldr	r1, [pc, #152]	; (48b0 <getSlowDividerConfig+0x140>)
    4818:	9a04      	ldr	r2, [sp, #16]
    481a:	4613      	mov	r3, r2
    481c:	005b      	lsls	r3, r3, #1
    481e:	4413      	add	r3, r2
    4820:	009b      	lsls	r3, r3, #2
    4822:	440b      	add	r3, r1
    4824:	9a01      	ldr	r2, [sp, #4]
    4826:	601a      	str	r2, [r3, #0]
        switch(Name)
    4828:	9b01      	ldr	r3, [sp, #4]
    482a:	2b27      	cmp	r3, #39	; 0x27
    482c:	d027      	beq.n	487e <getSlowDividerConfig+0x10e>
    482e:	9b01      	ldr	r3, [sp, #4]
    4830:	2b27      	cmp	r3, #39	; 0x27
    4832:	d835      	bhi.n	48a0 <getSlowDividerConfig+0x130>
    4834:	9b01      	ldr	r3, [sp, #4]
    4836:	2b25      	cmp	r3, #37	; 0x25
    4838:	d003      	beq.n	4842 <getSlowDividerConfig+0xd2>
    483a:	9b01      	ldr	r3, [sp, #4]
    483c:	2b26      	cmp	r3, #38	; 0x26
    483e:	d00f      	beq.n	4860 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4840:	e02e      	b.n	48a0 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    4842:	4b1c      	ldr	r3, [pc, #112]	; (48b4 <getSlowDividerConfig+0x144>)
    4844:	695b      	ldr	r3, [r3, #20]
    4846:	f003 030f 	and.w	r3, r3, #15
    484a:	1c59      	adds	r1, r3, #1
    484c:	4818      	ldr	r0, [pc, #96]	; (48b0 <getSlowDividerConfig+0x140>)
    484e:	9a04      	ldr	r2, [sp, #16]
    4850:	4613      	mov	r3, r2
    4852:	005b      	lsls	r3, r3, #1
    4854:	4413      	add	r3, r2
    4856:	009b      	lsls	r3, r3, #2
    4858:	4403      	add	r3, r0
    485a:	3304      	adds	r3, #4
    485c:	6019      	str	r1, [r3, #0]
                break;
    485e:	e020      	b.n	48a2 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    4860:	4b14      	ldr	r3, [pc, #80]	; (48b4 <getSlowDividerConfig+0x144>)
    4862:	699b      	ldr	r3, [r3, #24]
    4864:	f003 030f 	and.w	r3, r3, #15
    4868:	1c59      	adds	r1, r3, #1
    486a:	4811      	ldr	r0, [pc, #68]	; (48b0 <getSlowDividerConfig+0x140>)
    486c:	9a04      	ldr	r2, [sp, #16]
    486e:	4613      	mov	r3, r2
    4870:	005b      	lsls	r3, r3, #1
    4872:	4413      	add	r3, r2
    4874:	009b      	lsls	r3, r3, #2
    4876:	4403      	add	r3, r0
    4878:	3304      	adds	r3, #4
    487a:	6019      	str	r1, [r3, #0]
                break;
    487c:	e011      	b.n	48a2 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    487e:	4b0d      	ldr	r3, [pc, #52]	; (48b4 <getSlowDividerConfig+0x144>)
    4880:	69db      	ldr	r3, [r3, #28]
    4882:	f003 030f 	and.w	r3, r3, #15
    4886:	1c59      	adds	r1, r3, #1
    4888:	4809      	ldr	r0, [pc, #36]	; (48b0 <getSlowDividerConfig+0x140>)
    488a:	9a04      	ldr	r2, [sp, #16]
    488c:	4613      	mov	r3, r2
    488e:	005b      	lsls	r3, r3, #1
    4890:	4413      	add	r3, r2
    4892:	009b      	lsls	r3, r3, #2
    4894:	4403      	add	r3, r0
    4896:	3304      	adds	r3, #4
    4898:	6019      	str	r1, [r3, #0]
                break;
    489a:	e002      	b.n	48a2 <getSlowDividerConfig+0x132>
        }
    }
    489c:	bf00      	nop
    489e:	e000      	b.n	48a2 <getSlowDividerConfig+0x132>
                break;
    48a0:	bf00      	nop

    return ReturnValue;
    48a2:	9b05      	ldr	r3, [sp, #20]
}
    48a4:	4618      	mov	r0, r3
    48a6:	b006      	add	sp, #24
    48a8:	4770      	bx	lr
    48aa:	bf00      	nop
    48ac:	1fff8bc0 	.word	0x1fff8bc0
    48b0:	1fff8cd4 	.word	0x1fff8cd4
    48b4:	40064000 	.word	0x40064000

000048b8 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    48b8:	b500      	push	{lr}
    48ba:	b083      	sub	sp, #12
    48bc:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    48be:	4b64      	ldr	r3, [pc, #400]	; (4a50 <Clock_Ip_ClockInitializeObjects+0x198>)
    48c0:	781b      	ldrb	r3, [r3, #0]
    48c2:	f083 0301 	eor.w	r3, r3, #1
    48c6:	b2db      	uxtb	r3, r3
    48c8:	2b00      	cmp	r3, #0
    48ca:	d05b      	beq.n	4984 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    48cc:	4b60      	ldr	r3, [pc, #384]	; (4a50 <Clock_Ip_ClockInitializeObjects+0x198>)
    48ce:	2201      	movs	r2, #1
    48d0:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    48d2:	4b60      	ldr	r3, [pc, #384]	; (4a54 <Clock_Ip_ClockInitializeObjects+0x19c>)
    48d4:	785b      	ldrb	r3, [r3, #1]
    48d6:	461a      	mov	r2, r3
    48d8:	4613      	mov	r3, r2
    48da:	009b      	lsls	r3, r3, #2
    48dc:	4413      	add	r3, r2
    48de:	009b      	lsls	r3, r3, #2
    48e0:	4a5d      	ldr	r2, [pc, #372]	; (4a58 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    48e2:	4413      	add	r3, r2
    48e4:	4a5d      	ldr	r2, [pc, #372]	; (4a5c <Clock_Ip_ClockInitializeObjects+0x1a4>)
    48e6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    48e8:	4b5d      	ldr	r3, [pc, #372]	; (4a60 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    48ea:	785b      	ldrb	r3, [r3, #1]
    48ec:	461a      	mov	r2, r3
    48ee:	4613      	mov	r3, r2
    48f0:	009b      	lsls	r3, r3, #2
    48f2:	4413      	add	r3, r2
    48f4:	009b      	lsls	r3, r3, #2
    48f6:	4a5b      	ldr	r2, [pc, #364]	; (4a64 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    48f8:	4413      	add	r3, r2
    48fa:	4a5b      	ldr	r2, [pc, #364]	; (4a68 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    48fc:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    48fe:	4b5b      	ldr	r3, [pc, #364]	; (4a6c <Clock_Ip_ClockInitializeObjects+0x1b4>)
    4900:	791b      	ldrb	r3, [r3, #4]
    4902:	461a      	mov	r2, r3
    4904:	4613      	mov	r3, r2
    4906:	005b      	lsls	r3, r3, #1
    4908:	4413      	add	r3, r2
    490a:	009b      	lsls	r3, r3, #2
    490c:	4a58      	ldr	r2, [pc, #352]	; (4a70 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    490e:	4413      	add	r3, r2
    4910:	4a58      	ldr	r2, [pc, #352]	; (4a74 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    4912:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    4914:	4b58      	ldr	r3, [pc, #352]	; (4a78 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    4916:	795b      	ldrb	r3, [r3, #5]
    4918:	00db      	lsls	r3, r3, #3
    491a:	4a58      	ldr	r2, [pc, #352]	; (4a7c <Clock_Ip_ClockInitializeObjects+0x1c4>)
    491c:	4413      	add	r3, r2
    491e:	4a58      	ldr	r2, [pc, #352]	; (4a80 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    4920:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    4922:	4b55      	ldr	r3, [pc, #340]	; (4a78 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    4924:	79db      	ldrb	r3, [r3, #7]
    4926:	00db      	lsls	r3, r3, #3
    4928:	4a54      	ldr	r2, [pc, #336]	; (4a7c <Clock_Ip_ClockInitializeObjects+0x1c4>)
    492a:	4413      	add	r3, r2
    492c:	4a55      	ldr	r2, [pc, #340]	; (4a84 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    492e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    4930:	4b55      	ldr	r3, [pc, #340]	; (4a88 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4932:	799b      	ldrb	r3, [r3, #6]
    4934:	009b      	lsls	r3, r3, #2
    4936:	4a55      	ldr	r2, [pc, #340]	; (4a8c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4938:	4413      	add	r3, r2
    493a:	4a55      	ldr	r2, [pc, #340]	; (4a90 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    493c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    493e:	4b52      	ldr	r3, [pc, #328]	; (4a88 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4940:	7a1b      	ldrb	r3, [r3, #8]
    4942:	009b      	lsls	r3, r3, #2
    4944:	4a51      	ldr	r2, [pc, #324]	; (4a8c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4946:	4413      	add	r3, r2
    4948:	4a52      	ldr	r2, [pc, #328]	; (4a94 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    494a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    494c:	4b4e      	ldr	r3, [pc, #312]	; (4a88 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    494e:	7a5b      	ldrb	r3, [r3, #9]
    4950:	009b      	lsls	r3, r3, #2
    4952:	4a4e      	ldr	r2, [pc, #312]	; (4a8c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4954:	4413      	add	r3, r2
    4956:	4a50      	ldr	r2, [pc, #320]	; (4a98 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    4958:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    495a:	4b4b      	ldr	r3, [pc, #300]	; (4a88 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    495c:	7adb      	ldrb	r3, [r3, #11]
    495e:	009b      	lsls	r3, r3, #2
    4960:	4a4a      	ldr	r2, [pc, #296]	; (4a8c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4962:	4413      	add	r3, r2
    4964:	4a4d      	ldr	r2, [pc, #308]	; (4a9c <Clock_Ip_ClockInitializeObjects+0x1e4>)
    4966:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    4968:	4b47      	ldr	r3, [pc, #284]	; (4a88 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    496a:	7b1b      	ldrb	r3, [r3, #12]
    496c:	009b      	lsls	r3, r3, #2
    496e:	4a47      	ldr	r2, [pc, #284]	; (4a8c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4970:	4413      	add	r3, r2
    4972:	4a4b      	ldr	r2, [pc, #300]	; (4aa0 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    4974:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    4976:	4b44      	ldr	r3, [pc, #272]	; (4a88 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4978:	7b9b      	ldrb	r3, [r3, #14]
    497a:	009b      	lsls	r3, r3, #2
    497c:	4a43      	ldr	r2, [pc, #268]	; (4a8c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    497e:	4413      	add	r3, r2
    4980:	4a48      	ldr	r2, [pc, #288]	; (4aa4 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    4982:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    4984:	4b48      	ldr	r3, [pc, #288]	; (4aa8 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    4986:	781b      	ldrb	r3, [r3, #0]
    4988:	2b00      	cmp	r3, #0
    498a:	d002      	beq.n	4992 <Clock_Ip_ClockInitializeObjects+0xda>
    498c:	9b01      	ldr	r3, [sp, #4]
    498e:	2b00      	cmp	r3, #0
    4990:	d003      	beq.n	499a <Clock_Ip_ClockInitializeObjects+0xe2>
    4992:	4b46      	ldr	r3, [pc, #280]	; (4aac <Clock_Ip_ClockInitializeObjects+0x1f4>)
    4994:	781b      	ldrb	r3, [r3, #0]
    4996:	2b00      	cmp	r3, #0
    4998:	d056      	beq.n	4a48 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    499a:	f7ff fc09 	bl	41b0 <getFircConfig>
    499e:	4603      	mov	r3, r0
    49a0:	4a43      	ldr	r2, [pc, #268]	; (4ab0 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    49a2:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    49a4:	f7ff fc60 	bl	4268 <getSoscConfig>
    49a8:	4603      	mov	r3, r0
    49aa:	4a42      	ldr	r2, [pc, #264]	; (4ab4 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    49ac:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    49ae:	f7ff fca7 	bl	4300 <getSpllConfig>
    49b2:	4603      	mov	r3, r0
    49b4:	4a40      	ldr	r2, [pc, #256]	; (4ab8 <Clock_Ip_ClockInitializeObjects+0x200>)
    49b6:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    49b8:	2019      	movs	r0, #25
    49ba:	f7ff fcfb 	bl	43b4 <getSelectorConfig>
    49be:	4603      	mov	r3, r0
    49c0:	4a3e      	ldr	r2, [pc, #248]	; (4abc <Clock_Ip_ClockInitializeObjects+0x204>)
    49c2:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    49c4:	201a      	movs	r0, #26
    49c6:	f7ff fcf5 	bl	43b4 <getSelectorConfig>
    49ca:	4603      	mov	r3, r0
    49cc:	4a3c      	ldr	r2, [pc, #240]	; (4ac0 <Clock_Ip_ClockInitializeObjects+0x208>)
    49ce:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    49d0:	201b      	movs	r0, #27
    49d2:	f7ff fcef 	bl	43b4 <getSelectorConfig>
    49d6:	4603      	mov	r3, r0
    49d8:	4a3a      	ldr	r2, [pc, #232]	; (4ac4 <Clock_Ip_ClockInitializeObjects+0x20c>)
    49da:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    49dc:	201d      	movs	r0, #29
    49de:	f7ff fd7b 	bl	44d8 <getCoreDividerConfig>
    49e2:	4603      	mov	r3, r0
    49e4:	4a38      	ldr	r2, [pc, #224]	; (4ac8 <Clock_Ip_ClockInitializeObjects+0x210>)
    49e6:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    49e8:	201e      	movs	r0, #30
    49ea:	f7ff fd75 	bl	44d8 <getCoreDividerConfig>
    49ee:	4603      	mov	r3, r0
    49f0:	4a36      	ldr	r2, [pc, #216]	; (4acc <Clock_Ip_ClockInitializeObjects+0x214>)
    49f2:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    49f4:	201f      	movs	r0, #31
    49f6:	f7ff fd6f 	bl	44d8 <getCoreDividerConfig>
    49fa:	4603      	mov	r3, r0
    49fc:	4a34      	ldr	r2, [pc, #208]	; (4ad0 <Clock_Ip_ClockInitializeObjects+0x218>)
    49fe:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    4a00:	2021      	movs	r0, #33	; 0x21
    4a02:	f7ff fe0f 	bl	4624 <getBusDividerConfig>
    4a06:	4603      	mov	r3, r0
    4a08:	4a32      	ldr	r2, [pc, #200]	; (4ad4 <Clock_Ip_ClockInitializeObjects+0x21c>)
    4a0a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    4a0c:	2022      	movs	r0, #34	; 0x22
    4a0e:	f7ff fe09 	bl	4624 <getBusDividerConfig>
    4a12:	4603      	mov	r3, r0
    4a14:	4a30      	ldr	r2, [pc, #192]	; (4ad8 <Clock_Ip_ClockInitializeObjects+0x220>)
    4a16:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    4a18:	2023      	movs	r0, #35	; 0x23
    4a1a:	f7ff fe03 	bl	4624 <getBusDividerConfig>
    4a1e:	4603      	mov	r3, r0
    4a20:	4a2e      	ldr	r2, [pc, #184]	; (4adc <Clock_Ip_ClockInitializeObjects+0x224>)
    4a22:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    4a24:	2025      	movs	r0, #37	; 0x25
    4a26:	f7ff fea3 	bl	4770 <getSlowDividerConfig>
    4a2a:	4603      	mov	r3, r0
    4a2c:	4a2c      	ldr	r2, [pc, #176]	; (4ae0 <Clock_Ip_ClockInitializeObjects+0x228>)
    4a2e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    4a30:	2026      	movs	r0, #38	; 0x26
    4a32:	f7ff fe9d 	bl	4770 <getSlowDividerConfig>
    4a36:	4603      	mov	r3, r0
    4a38:	4a2a      	ldr	r2, [pc, #168]	; (4ae4 <Clock_Ip_ClockInitializeObjects+0x22c>)
    4a3a:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    4a3c:	2027      	movs	r0, #39	; 0x27
    4a3e:	f7ff fe97 	bl	4770 <getSlowDividerConfig>
    4a42:	4603      	mov	r3, r0
    4a44:	4a28      	ldr	r2, [pc, #160]	; (4ae8 <Clock_Ip_ClockInitializeObjects+0x230>)
    4a46:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    4a48:	bf00      	nop
    4a4a:	b003      	add	sp, #12
    4a4c:	f85d fb04 	ldr.w	pc, [sp], #4
    4a50:	1fff8cf8 	.word	0x1fff8cf8
    4a54:	00007900 	.word	0x00007900
    4a58:	00007f4c 	.word	0x00007f4c
    4a5c:	1fff8bc4 	.word	0x1fff8bc4
    4a60:	000078c0 	.word	0x000078c0
    4a64:	00007e94 	.word	0x00007e94
    4a68:	1fff8bc8 	.word	0x1fff8bc8
    4a6c:	000078d0 	.word	0x000078d0
    4a70:	00007f00 	.word	0x00007f00
    4a74:	1fff8bcc 	.word	0x1fff8bcc
    4a78:	00007910 	.word	0x00007910
    4a7c:	00007f78 	.word	0x00007f78
    4a80:	1fff8bd0 	.word	0x1fff8bd0
    4a84:	1fff8c0c 	.word	0x1fff8c0c
    4a88:	000078a0 	.word	0x000078a0
    4a8c:	00007e50 	.word	0x00007e50
    4a90:	1fff8bd4 	.word	0x1fff8bd4
    4a94:	1fff8c10 	.word	0x1fff8c10
    4a98:	1fff8bd8 	.word	0x1fff8bd8
    4a9c:	1fff8c14 	.word	0x1fff8c14
    4aa0:	1fff8bdc 	.word	0x1fff8bdc
    4aa4:	1fff8c18 	.word	0x1fff8c18
    4aa8:	1fff8b19 	.word	0x1fff8b19
    4aac:	1fff8b10 	.word	0x1fff8b10
    4ab0:	1fff8be0 	.word	0x1fff8be0
    4ab4:	1fff8be4 	.word	0x1fff8be4
    4ab8:	1fff8be8 	.word	0x1fff8be8
    4abc:	1fff8bec 	.word	0x1fff8bec
    4ac0:	1fff8bf0 	.word	0x1fff8bf0
    4ac4:	1fff8c1c 	.word	0x1fff8c1c
    4ac8:	1fff8bf4 	.word	0x1fff8bf4
    4acc:	1fff8bf8 	.word	0x1fff8bf8
    4ad0:	1fff8c20 	.word	0x1fff8c20
    4ad4:	1fff8bfc 	.word	0x1fff8bfc
    4ad8:	1fff8c00 	.word	0x1fff8c00
    4adc:	1fff8c24 	.word	0x1fff8c24
    4ae0:	1fff8c04 	.word	0x1fff8c04
    4ae4:	1fff8c08 	.word	0x1fff8c08
    4ae8:	1fff8c28 	.word	0x1fff8c28

00004aec <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    4aec:	b500      	push	{lr}
    4aee:	b083      	sub	sp, #12
    4af0:	9001      	str	r0, [sp, #4]
    4af2:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    4af4:	9b01      	ldr	r3, [sp, #4]
    4af6:	2b03      	cmp	r3, #3
    4af8:	f000 8090 	beq.w	4c1c <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    4afc:	9b01      	ldr	r3, [sp, #4]
    4afe:	2b03      	cmp	r3, #3
    4b00:	f200 80d3 	bhi.w	4caa <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    4b04:	9b01      	ldr	r3, [sp, #4]
    4b06:	2b00      	cmp	r3, #0
    4b08:	d040      	beq.n	4b8c <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    4b0a:	9b01      	ldr	r3, [sp, #4]
    4b0c:	3b01      	subs	r3, #1
    4b0e:	2b01      	cmp	r3, #1
    4b10:	f200 80cb 	bhi.w	4caa <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    4b14:	9b00      	ldr	r3, [sp, #0]
    4b16:	2b00      	cmp	r3, #0
    4b18:	f040 80c9 	bne.w	4cae <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    4b1c:	4b68      	ldr	r3, [pc, #416]	; (4cc0 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4b1e:	2200      	movs	r2, #0
    4b20:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    4b22:	4b68      	ldr	r3, [pc, #416]	; (4cc4 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    4b24:	681b      	ldr	r3, [r3, #0]
    4b26:	685b      	ldr	r3, [r3, #4]
    4b28:	4a67      	ldr	r2, [pc, #412]	; (4cc8 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    4b2a:	6812      	ldr	r2, [r2, #0]
    4b2c:	4610      	mov	r0, r2
    4b2e:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    4b30:	4b66      	ldr	r3, [pc, #408]	; (4ccc <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    4b32:	681b      	ldr	r3, [r3, #0]
    4b34:	681b      	ldr	r3, [r3, #0]
    4b36:	4a66      	ldr	r2, [pc, #408]	; (4cd0 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    4b38:	6812      	ldr	r2, [r2, #0]
    4b3a:	4610      	mov	r0, r2
    4b3c:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    4b3e:	4b65      	ldr	r3, [pc, #404]	; (4cd4 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    4b40:	681b      	ldr	r3, [r3, #0]
    4b42:	681b      	ldr	r3, [r3, #0]
    4b44:	4a64      	ldr	r2, [pc, #400]	; (4cd8 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    4b46:	6812      	ldr	r2, [r2, #0]
    4b48:	4610      	mov	r0, r2
    4b4a:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    4b4c:	4b63      	ldr	r3, [pc, #396]	; (4cdc <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    4b4e:	681b      	ldr	r3, [r3, #0]
    4b50:	681b      	ldr	r3, [r3, #0]
    4b52:	4a63      	ldr	r2, [pc, #396]	; (4ce0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    4b54:	6812      	ldr	r2, [r2, #0]
    4b56:	4610      	mov	r0, r2
    4b58:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    4b5a:	4b62      	ldr	r3, [pc, #392]	; (4ce4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4b5c:	681b      	ldr	r3, [r3, #0]
    4b5e:	691b      	ldr	r3, [r3, #16]
    4b60:	4a61      	ldr	r2, [pc, #388]	; (4ce8 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4b62:	6812      	ldr	r2, [r2, #0]
    4b64:	6812      	ldr	r2, [r2, #0]
    4b66:	4610      	mov	r0, r2
    4b68:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    4b6a:	4b60      	ldr	r3, [pc, #384]	; (4cec <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4b6c:	681b      	ldr	r3, [r3, #0]
    4b6e:	68db      	ldr	r3, [r3, #12]
    4b70:	4a5f      	ldr	r2, [pc, #380]	; (4cf0 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4b72:	6812      	ldr	r2, [r2, #0]
    4b74:	6812      	ldr	r2, [r2, #0]
    4b76:	4610      	mov	r0, r2
    4b78:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    4b7a:	4b5e      	ldr	r3, [pc, #376]	; (4cf4 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4b7c:	681b      	ldr	r3, [r3, #0]
    4b7e:	689b      	ldr	r3, [r3, #8]
    4b80:	4a5d      	ldr	r2, [pc, #372]	; (4cf8 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4b82:	6812      	ldr	r2, [r2, #0]
    4b84:	6812      	ldr	r2, [r2, #0]
    4b86:	4610      	mov	r0, r2
    4b88:	4798      	blx	r3
            }
        }
        break;
    4b8a:	e090      	b.n	4cae <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    4b8c:	9b00      	ldr	r3, [sp, #0]
    4b8e:	2b02      	cmp	r3, #2
    4b90:	f040 808f 	bne.w	4cb2 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    4b94:	4b4a      	ldr	r3, [pc, #296]	; (4cc0 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4b96:	2201      	movs	r2, #1
    4b98:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    4b9a:	4b56      	ldr	r3, [pc, #344]	; (4cf4 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4b9c:	681b      	ldr	r3, [r3, #0]
    4b9e:	685b      	ldr	r3, [r3, #4]
    4ba0:	4a55      	ldr	r2, [pc, #340]	; (4cf8 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4ba2:	6812      	ldr	r2, [r2, #0]
    4ba4:	4610      	mov	r0, r2
    4ba6:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    4ba8:	4b50      	ldr	r3, [pc, #320]	; (4cec <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4baa:	681b      	ldr	r3, [r3, #0]
    4bac:	691b      	ldr	r3, [r3, #16]
    4bae:	4a50      	ldr	r2, [pc, #320]	; (4cf0 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4bb0:	6812      	ldr	r2, [r2, #0]
    4bb2:	4610      	mov	r0, r2
    4bb4:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    4bb6:	4b4d      	ldr	r3, [pc, #308]	; (4cec <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4bb8:	681b      	ldr	r3, [r3, #0]
    4bba:	689b      	ldr	r3, [r3, #8]
    4bbc:	4a4c      	ldr	r2, [pc, #304]	; (4cf0 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4bbe:	6812      	ldr	r2, [r2, #0]
    4bc0:	4610      	mov	r0, r2
    4bc2:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    4bc4:	4b47      	ldr	r3, [pc, #284]	; (4ce4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4bc6:	681b      	ldr	r3, [r3, #0]
    4bc8:	68db      	ldr	r3, [r3, #12]
    4bca:	4a47      	ldr	r2, [pc, #284]	; (4ce8 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4bcc:	6812      	ldr	r2, [r2, #0]
    4bce:	4610      	mov	r0, r2
    4bd0:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    4bd2:	4b44      	ldr	r3, [pc, #272]	; (4ce4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4bd4:	681b      	ldr	r3, [r3, #0]
    4bd6:	689b      	ldr	r3, [r3, #8]
    4bd8:	4a43      	ldr	r2, [pc, #268]	; (4ce8 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4bda:	6812      	ldr	r2, [r2, #0]
    4bdc:	6812      	ldr	r2, [r2, #0]
    4bde:	4610      	mov	r0, r2
    4be0:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    4be2:	4b38      	ldr	r3, [pc, #224]	; (4cc4 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    4be4:	681b      	ldr	r3, [r3, #0]
    4be6:	685b      	ldr	r3, [r3, #4]
    4be8:	4a44      	ldr	r2, [pc, #272]	; (4cfc <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    4bea:	6812      	ldr	r2, [r2, #0]
    4bec:	4610      	mov	r0, r2
    4bee:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    4bf0:	4b36      	ldr	r3, [pc, #216]	; (4ccc <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    4bf2:	681b      	ldr	r3, [r3, #0]
    4bf4:	681b      	ldr	r3, [r3, #0]
    4bf6:	4a42      	ldr	r2, [pc, #264]	; (4d00 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    4bf8:	6812      	ldr	r2, [r2, #0]
    4bfa:	4610      	mov	r0, r2
    4bfc:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    4bfe:	4b35      	ldr	r3, [pc, #212]	; (4cd4 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    4c00:	681b      	ldr	r3, [r3, #0]
    4c02:	681b      	ldr	r3, [r3, #0]
    4c04:	4a3f      	ldr	r2, [pc, #252]	; (4d04 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    4c06:	6812      	ldr	r2, [r2, #0]
    4c08:	4610      	mov	r0, r2
    4c0a:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    4c0c:	4b33      	ldr	r3, [pc, #204]	; (4cdc <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    4c0e:	681b      	ldr	r3, [r3, #0]
    4c10:	681b      	ldr	r3, [r3, #0]
    4c12:	4a3d      	ldr	r2, [pc, #244]	; (4d08 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    4c14:	6812      	ldr	r2, [r2, #0]
    4c16:	4610      	mov	r0, r2
    4c18:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    4c1a:	e04a      	b.n	4cb2 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    4c1c:	9b00      	ldr	r3, [sp, #0]
    4c1e:	2b02      	cmp	r3, #2
    4c20:	d149      	bne.n	4cb6 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    4c22:	4b27      	ldr	r3, [pc, #156]	; (4cc0 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4c24:	2201      	movs	r2, #1
    4c26:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    4c28:	4b32      	ldr	r3, [pc, #200]	; (4cf4 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4c2a:	681b      	ldr	r3, [r3, #0]
    4c2c:	685b      	ldr	r3, [r3, #4]
    4c2e:	4a32      	ldr	r2, [pc, #200]	; (4cf8 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4c30:	6812      	ldr	r2, [r2, #0]
    4c32:	4610      	mov	r0, r2
    4c34:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    4c36:	4b2d      	ldr	r3, [pc, #180]	; (4cec <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4c38:	681b      	ldr	r3, [r3, #0]
    4c3a:	691b      	ldr	r3, [r3, #16]
    4c3c:	4a2c      	ldr	r2, [pc, #176]	; (4cf0 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4c3e:	6812      	ldr	r2, [r2, #0]
    4c40:	4610      	mov	r0, r2
    4c42:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    4c44:	4b29      	ldr	r3, [pc, #164]	; (4cec <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4c46:	681b      	ldr	r3, [r3, #0]
    4c48:	689b      	ldr	r3, [r3, #8]
    4c4a:	4a29      	ldr	r2, [pc, #164]	; (4cf0 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4c4c:	6812      	ldr	r2, [r2, #0]
    4c4e:	4610      	mov	r0, r2
    4c50:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    4c52:	4b24      	ldr	r3, [pc, #144]	; (4ce4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4c54:	681b      	ldr	r3, [r3, #0]
    4c56:	68db      	ldr	r3, [r3, #12]
    4c58:	4a23      	ldr	r2, [pc, #140]	; (4ce8 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4c5a:	6812      	ldr	r2, [r2, #0]
    4c5c:	4610      	mov	r0, r2
    4c5e:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    4c60:	4b20      	ldr	r3, [pc, #128]	; (4ce4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4c62:	681b      	ldr	r3, [r3, #0]
    4c64:	689b      	ldr	r3, [r3, #8]
    4c66:	4a20      	ldr	r2, [pc, #128]	; (4ce8 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4c68:	6812      	ldr	r2, [r2, #0]
    4c6a:	6812      	ldr	r2, [r2, #0]
    4c6c:	4610      	mov	r0, r2
    4c6e:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    4c70:	4b26      	ldr	r3, [pc, #152]	; (4d0c <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    4c72:	681b      	ldr	r3, [r3, #0]
    4c74:	685b      	ldr	r3, [r3, #4]
    4c76:	4a26      	ldr	r2, [pc, #152]	; (4d10 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    4c78:	6812      	ldr	r2, [r2, #0]
    4c7a:	4610      	mov	r0, r2
    4c7c:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    4c7e:	4b25      	ldr	r3, [pc, #148]	; (4d14 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    4c80:	681b      	ldr	r3, [r3, #0]
    4c82:	681b      	ldr	r3, [r3, #0]
    4c84:	4a24      	ldr	r2, [pc, #144]	; (4d18 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    4c86:	6812      	ldr	r2, [r2, #0]
    4c88:	4610      	mov	r0, r2
    4c8a:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    4c8c:	4b23      	ldr	r3, [pc, #140]	; (4d1c <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    4c8e:	681b      	ldr	r3, [r3, #0]
    4c90:	681b      	ldr	r3, [r3, #0]
    4c92:	4a23      	ldr	r2, [pc, #140]	; (4d20 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    4c94:	6812      	ldr	r2, [r2, #0]
    4c96:	4610      	mov	r0, r2
    4c98:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    4c9a:	4b22      	ldr	r3, [pc, #136]	; (4d24 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    4c9c:	681b      	ldr	r3, [r3, #0]
    4c9e:	681b      	ldr	r3, [r3, #0]
    4ca0:	4a21      	ldr	r2, [pc, #132]	; (4d28 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    4ca2:	6812      	ldr	r2, [r2, #0]
    4ca4:	4610      	mov	r0, r2
    4ca6:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    4ca8:	e005      	b.n	4cb6 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    4caa:	bf00      	nop
    4cac:	e004      	b.n	4cb8 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4cae:	bf00      	nop
    4cb0:	e002      	b.n	4cb8 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4cb2:	bf00      	nop
    4cb4:	e000      	b.n	4cb8 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4cb6:	bf00      	nop
    }

}
    4cb8:	bf00      	nop
    4cba:	b003      	add	sp, #12
    4cbc:	f85d fb04 	ldr.w	pc, [sp], #4
    4cc0:	1fff8b19 	.word	0x1fff8b19
    4cc4:	1fff8bd0 	.word	0x1fff8bd0
    4cc8:	1fff8bf0 	.word	0x1fff8bf0
    4ccc:	1fff8bd4 	.word	0x1fff8bd4
    4cd0:	1fff8bf8 	.word	0x1fff8bf8
    4cd4:	1fff8bd8 	.word	0x1fff8bd8
    4cd8:	1fff8c00 	.word	0x1fff8c00
    4cdc:	1fff8bdc 	.word	0x1fff8bdc
    4ce0:	1fff8c08 	.word	0x1fff8c08
    4ce4:	1fff8bc4 	.word	0x1fff8bc4
    4ce8:	1fff8be8 	.word	0x1fff8be8
    4cec:	1fff8bc8 	.word	0x1fff8bc8
    4cf0:	1fff8be4 	.word	0x1fff8be4
    4cf4:	1fff8bcc 	.word	0x1fff8bcc
    4cf8:	1fff8be0 	.word	0x1fff8be0
    4cfc:	1fff8bec 	.word	0x1fff8bec
    4d00:	1fff8bf4 	.word	0x1fff8bf4
    4d04:	1fff8bfc 	.word	0x1fff8bfc
    4d08:	1fff8c04 	.word	0x1fff8c04
    4d0c:	1fff8c0c 	.word	0x1fff8c0c
    4d10:	1fff8c1c 	.word	0x1fff8c1c
    4d14:	1fff8c10 	.word	0x1fff8c10
    4d18:	1fff8c20 	.word	0x1fff8c20
    4d1c:	1fff8c14 	.word	0x1fff8c14
    4d20:	1fff8c24 	.word	0x1fff8c24
    4d24:	1fff8c18 	.word	0x1fff8c18
    4d28:	1fff8c28 	.word	0x1fff8c28

00004d2c <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    4d2c:	b500      	push	{lr}
    4d2e:	b083      	sub	sp, #12
    4d30:	9001      	str	r0, [sp, #4]
    4d32:	9100      	str	r1, [sp, #0]
    switch(Command)
    4d34:	9b00      	ldr	r3, [sp, #0]
    4d36:	2b04      	cmp	r3, #4
    4d38:	d010      	beq.n	4d5c <Clock_Ip_Command+0x30>
    4d3a:	9b00      	ldr	r3, [sp, #0]
    4d3c:	2b04      	cmp	r3, #4
    4d3e:	d811      	bhi.n	4d64 <Clock_Ip_Command+0x38>
    4d40:	9b00      	ldr	r3, [sp, #0]
    4d42:	2b01      	cmp	r3, #1
    4d44:	d006      	beq.n	4d54 <Clock_Ip_Command+0x28>
    4d46:	9b00      	ldr	r3, [sp, #0]
    4d48:	2b02      	cmp	r3, #2
    4d4a:	d10b      	bne.n	4d64 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    4d4c:	9801      	ldr	r0, [sp, #4]
    4d4e:	f7ff fdb3 	bl	48b8 <Clock_Ip_ClockInitializeObjects>
            break;
    4d52:	e008      	b.n	4d66 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    4d54:	9801      	ldr	r0, [sp, #4]
    4d56:	f7ff f9db 	bl	4110 <Clock_Ip_SpecificPlatformInitClock>
            break;
    4d5a:	e004      	b.n	4d66 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    4d5c:	9801      	ldr	r0, [sp, #4]
    4d5e:	f7ff f8ed 	bl	3f3c <DisableSafeClock>
            break;
    4d62:	e000      	b.n	4d66 <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    4d64:	bf00      	nop
    }
}
    4d66:	bf00      	nop
    4d68:	b003      	add	sp, #12
    4d6a:	f85d fb04 	ldr.w	pc, [sp], #4
    4d6e:	bf00      	nop

00004d70 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    4d70:	b500      	push	{lr}
    4d72:	b085      	sub	sp, #20
    4d74:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    4d76:	4a20      	ldr	r2, [pc, #128]	; (4df8 <Mcu_Init+0x88>)
    4d78:	9b01      	ldr	r3, [sp, #4]
    4d7a:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    4d7c:	2300      	movs	r3, #0
    4d7e:	9303      	str	r3, [sp, #12]
    4d80:	e010      	b.n	4da4 <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    4d82:	4b1d      	ldr	r3, [pc, #116]	; (4df8 <Mcu_Init+0x88>)
    4d84:	681b      	ldr	r3, [r3, #0]
    4d86:	6919      	ldr	r1, [r3, #16]
    4d88:	9a03      	ldr	r2, [sp, #12]
    4d8a:	4613      	mov	r3, r2
    4d8c:	005b      	lsls	r3, r3, #1
    4d8e:	4413      	add	r3, r2
    4d90:	009b      	lsls	r3, r3, #2
    4d92:	440b      	add	r3, r1
    4d94:	681b      	ldr	r3, [r3, #0]
    4d96:	9a03      	ldr	r2, [sp, #12]
    4d98:	b2d1      	uxtb	r1, r2
    4d9a:	4a18      	ldr	r2, [pc, #96]	; (4dfc <Mcu_Init+0x8c>)
    4d9c:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    4d9e:	9b03      	ldr	r3, [sp, #12]
    4da0:	3301      	adds	r3, #1
    4da2:	9303      	str	r3, [sp, #12]
    4da4:	4b14      	ldr	r3, [pc, #80]	; (4df8 <Mcu_Init+0x88>)
    4da6:	681b      	ldr	r3, [r3, #0]
    4da8:	689b      	ldr	r3, [r3, #8]
    4daa:	9a03      	ldr	r2, [sp, #12]
    4dac:	429a      	cmp	r2, r3
    4dae:	d3e8      	bcc.n	4d82 <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    4db0:	2300      	movs	r3, #0
    4db2:	9303      	str	r3, [sp, #12]
    4db4:	e010      	b.n	4dd8 <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    4db6:	4b10      	ldr	r3, [pc, #64]	; (4df8 <Mcu_Init+0x88>)
    4db8:	681b      	ldr	r3, [r3, #0]
    4dba:	6959      	ldr	r1, [r3, #20]
    4dbc:	9a03      	ldr	r2, [sp, #12]
    4dbe:	4613      	mov	r3, r2
    4dc0:	01db      	lsls	r3, r3, #7
    4dc2:	1a9b      	subs	r3, r3, r2
    4dc4:	00db      	lsls	r3, r3, #3
    4dc6:	440b      	add	r3, r1
    4dc8:	681b      	ldr	r3, [r3, #0]
    4dca:	9a03      	ldr	r2, [sp, #12]
    4dcc:	b2d1      	uxtb	r1, r2
    4dce:	4a0c      	ldr	r2, [pc, #48]	; (4e00 <Mcu_Init+0x90>)
    4dd0:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    4dd2:	9b03      	ldr	r3, [sp, #12]
    4dd4:	3301      	adds	r3, #1
    4dd6:	9303      	str	r3, [sp, #12]
    4dd8:	4b07      	ldr	r3, [pc, #28]	; (4df8 <Mcu_Init+0x88>)
    4dda:	681b      	ldr	r3, [r3, #0]
    4ddc:	68db      	ldr	r3, [r3, #12]
    4dde:	9a03      	ldr	r2, [sp, #12]
    4de0:	429a      	cmp	r2, r3
    4de2:	d3e8      	bcc.n	4db6 <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    4de4:	4b04      	ldr	r3, [pc, #16]	; (4df8 <Mcu_Init+0x88>)
    4de6:	681b      	ldr	r3, [r3, #0]
    4de8:	699b      	ldr	r3, [r3, #24]
    4dea:	4618      	mov	r0, r3
    4dec:	f000 f88a 	bl	4f04 <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    4df0:	bf00      	nop
    4df2:	b005      	add	sp, #20
    4df4:	f85d fb04 	ldr.w	pc, [sp], #4
    4df8:	1fff8d04 	.word	0x1fff8d04
    4dfc:	1fff8d00 	.word	0x1fff8d00
    4e00:	1fff8cfc 	.word	0x1fff8cfc

00004e04 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    4e04:	b084      	sub	sp, #16
    4e06:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    4e08:	2301      	movs	r3, #1
    4e0a:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    4e0e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    4e12:	4618      	mov	r0, r3
    4e14:	b004      	add	sp, #16
    4e16:	4770      	bx	lr

00004e18 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    4e18:	b500      	push	{lr}
    4e1a:	b085      	sub	sp, #20
    4e1c:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    4e1e:	4a0e      	ldr	r2, [pc, #56]	; (4e58 <Mcu_InitClock+0x40>)
    4e20:	9b01      	ldr	r3, [sp, #4]
    4e22:	4413      	add	r3, r2
    4e24:	781b      	ldrb	r3, [r3, #0]
    4e26:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    4e2a:	4b0c      	ldr	r3, [pc, #48]	; (4e5c <Mcu_InitClock+0x44>)
    4e2c:	681b      	ldr	r3, [r3, #0]
    4e2e:	6959      	ldr	r1, [r3, #20]
    4e30:	f89d 200f 	ldrb.w	r2, [sp, #15]
    4e34:	4613      	mov	r3, r2
    4e36:	01db      	lsls	r3, r3, #7
    4e38:	1a9b      	subs	r3, r3, r2
    4e3a:	00db      	lsls	r3, r3, #3
    4e3c:	440b      	add	r3, r1
    4e3e:	4618      	mov	r0, r3
    4e40:	f000 f86a 	bl	4f18 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    4e44:	2300      	movs	r3, #0
    4e46:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    4e4a:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    4e4e:	4618      	mov	r0, r3
    4e50:	b005      	add	sp, #20
    4e52:	f85d fb04 	ldr.w	pc, [sp], #4
    4e56:	bf00      	nop
    4e58:	1fff8cfc 	.word	0x1fff8cfc
    4e5c:	1fff8d04 	.word	0x1fff8d04

00004e60 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    4e60:	b500      	push	{lr}
    4e62:	b085      	sub	sp, #20
    4e64:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    4e66:	4a0d      	ldr	r2, [pc, #52]	; (4e9c <Mcu_SetMode+0x3c>)
    4e68:	9b01      	ldr	r3, [sp, #4]
    4e6a:	4413      	add	r3, r2
    4e6c:	781b      	ldrb	r3, [r3, #0]
    4e6e:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    4e72:	f001 fb27 	bl	64c4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    4e76:	4b0a      	ldr	r3, [pc, #40]	; (4ea0 <Mcu_SetMode+0x40>)
    4e78:	681b      	ldr	r3, [r3, #0]
    4e7a:	6919      	ldr	r1, [r3, #16]
    4e7c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    4e80:	4613      	mov	r3, r2
    4e82:	005b      	lsls	r3, r3, #1
    4e84:	4413      	add	r3, r2
    4e86:	009b      	lsls	r3, r3, #2
    4e88:	440b      	add	r3, r1
    4e8a:	4618      	mov	r0, r3
    4e8c:	f000 f84e 	bl	4f2c <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    4e90:	f001 fb44 	bl	651c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    4e94:	bf00      	nop
    4e96:	b005      	add	sp, #20
    4e98:	f85d fb04 	ldr.w	pc, [sp], #4
    4e9c:	1fff8d00 	.word	0x1fff8d00
    4ea0:	1fff8d04 	.word	0x1fff8d04

00004ea4 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    4ea4:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    4ea6:	2302      	movs	r3, #2
    4ea8:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    4eaa:	9b01      	ldr	r3, [sp, #4]
}
    4eac:	4618      	mov	r0, r3
    4eae:	b002      	add	sp, #8
    4eb0:	4770      	bx	lr

00004eb2 <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    4eb2:	b500      	push	{lr}
    4eb4:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    4eb6:	f000 f843 	bl	4f40 <Mcu_Ipw_GetResetReason>
    4eba:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    4ebc:	9b01      	ldr	r3, [sp, #4]
}
    4ebe:	4618      	mov	r0, r3
    4ec0:	b003      	add	sp, #12
    4ec2:	f85d fb04 	ldr.w	pc, [sp], #4

00004ec6 <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    4ec6:	b500      	push	{lr}
    4ec8:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    4eca:	f000 f83f 	bl	4f4c <Mcu_Ipw_GetResetRawValue>
    4ece:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    4ed0:	9b01      	ldr	r3, [sp, #4]
}
    4ed2:	4618      	mov	r0, r3
    4ed4:	b003      	add	sp, #12
    4ed6:	f85d fb04 	ldr.w	pc, [sp], #4

00004eda <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    4eda:	b500      	push	{lr}
    4edc:	b083      	sub	sp, #12
    4ede:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    4ee0:	9801      	ldr	r0, [sp, #4]
    4ee2:	f000 f839 	bl	4f58 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    4ee6:	bf00      	nop
    4ee8:	b003      	add	sp, #12
    4eea:	f85d fb04 	ldr.w	pc, [sp], #4

00004eee <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    4eee:	b082      	sub	sp, #8
    4ef0:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    4ef2:	4b03      	ldr	r3, [pc, #12]	; (4f00 <Mcu_ClkSrcFailureNotification+0x12>)
    4ef4:	681b      	ldr	r3, [r3, #0]
    4ef6:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    4ef8:	bf00      	nop
    4efa:	b002      	add	sp, #8
    4efc:	4770      	bx	lr
    4efe:	bf00      	nop
    4f00:	1fff8d04 	.word	0x1fff8d04

00004f04 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    4f04:	b500      	push	{lr}
    4f06:	b083      	sub	sp, #12
    4f08:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    4f0a:	9801      	ldr	r0, [sp, #4]
    4f0c:	f000 f882 	bl	5014 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    4f10:	bf00      	nop
    4f12:	b003      	add	sp, #12
    4f14:	f85d fb04 	ldr.w	pc, [sp], #4

00004f18 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    4f18:	b500      	push	{lr}
    4f1a:	b083      	sub	sp, #12
    4f1c:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    4f1e:	9801      	ldr	r0, [sp, #4]
    4f20:	f7fc fc6a 	bl	17f8 <Clock_Ip_InitClock>
}
    4f24:	bf00      	nop
    4f26:	b003      	add	sp, #12
    4f28:	f85d fb04 	ldr.w	pc, [sp], #4

00004f2c <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    4f2c:	b500      	push	{lr}
    4f2e:	b083      	sub	sp, #12
    4f30:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    4f32:	9801      	ldr	r0, [sp, #4]
    4f34:	f000 f820 	bl	4f78 <Power_Ip_SetMode>
}
    4f38:	bf00      	nop
    4f3a:	b003      	add	sp, #12
    4f3c:	f85d fb04 	ldr.w	pc, [sp], #4

00004f40 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    4f40:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    4f42:	f000 f84f 	bl	4fe4 <Power_Ip_GetResetReason>
    4f46:	4603      	mov	r3, r0
}
    4f48:	4618      	mov	r0, r3
    4f4a:	bd08      	pop	{r3, pc}

00004f4c <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    4f4c:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    4f4e:	f000 f857 	bl	5000 <Power_Ip_GetResetRawValue>
    4f52:	4603      	mov	r3, r0
}
    4f54:	4618      	mov	r0, r3
    4f56:	bd08      	pop	{r3, pc}

00004f58 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    4f58:	b500      	push	{lr}
    4f5a:	b083      	sub	sp, #12
    4f5c:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    4f5e:	9b01      	ldr	r3, [sp, #4]
    4f60:	2b00      	cmp	r3, #0
    4f62:	d102      	bne.n	4f6a <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    4f64:	f000 f86c 	bl	5040 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    4f68:	e001      	b.n	4f6e <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    4f6a:	f000 f86e 	bl	504a <Power_Ip_EnableSleepOnExit>
}
    4f6e:	bf00      	nop
    4f70:	b003      	add	sp, #12
    4f72:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00004f78 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    4f78:	b500      	push	{lr}
    4f7a:	b085      	sub	sp, #20
    4f7c:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    4f7e:	9b01      	ldr	r3, [sp, #4]
    4f80:	685b      	ldr	r3, [r3, #4]
    4f82:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    4f84:	9802      	ldr	r0, [sp, #8]
    4f86:	f000 f9f5 	bl	5374 <Power_Ip_SMC_ModeCheckEntry>
    4f8a:	4603      	mov	r3, r0
    4f8c:	2b00      	cmp	r3, #0
    4f8e:	d002      	beq.n	4f96 <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4f90:	2301      	movs	r3, #1
    4f92:	9303      	str	r3, [sp, #12]
    4f94:	e003      	b.n	4f9e <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    4f96:	9801      	ldr	r0, [sp, #4]
    4f98:	f000 fa1e 	bl	53d8 <Power_Ip_SMC_ModeConfig>
    4f9c:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    4f9e:	9b03      	ldr	r3, [sp, #12]
    4fa0:	2b01      	cmp	r3, #1
    4fa2:	d103      	bne.n	4fac <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    4fa4:	21ff      	movs	r1, #255	; 0xff
    4fa6:	2003      	movs	r0, #3
    4fa8:	f000 f8f4 	bl	5194 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    4fac:	bf00      	nop
    4fae:	b005      	add	sp, #20
    4fb0:	f85d fb04 	ldr.w	pc, [sp], #4

00004fb4 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    4fb4:	b084      	sub	sp, #16
    4fb6:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    4fb8:	230c      	movs	r3, #12
    4fba:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    4fbc:	4a08      	ldr	r2, [pc, #32]	; (4fe0 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    4fbe:	9b01      	ldr	r3, [sp, #4]
    4fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4fc4:	2b0e      	cmp	r3, #14
    4fc6:	d805      	bhi.n	4fd4 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    4fc8:	4a05      	ldr	r2, [pc, #20]	; (4fe0 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    4fca:	9b01      	ldr	r3, [sp, #4]
    4fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4fd0:	9303      	str	r3, [sp, #12]
    4fd2:	e001      	b.n	4fd8 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    4fd4:	230c      	movs	r3, #12
    4fd6:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    4fd8:	9b03      	ldr	r3, [sp, #12]
}
    4fda:	4618      	mov	r0, r3
    4fdc:	b004      	add	sp, #16
    4fde:	4770      	bx	lr
    4fe0:	00007fec 	.word	0x00007fec

00004fe4 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    4fe4:	b500      	push	{lr}
    4fe6:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    4fe8:	f000 f940 	bl	526c <Power_Ip_RCM_GetResetReason>
    4fec:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    4fee:	9801      	ldr	r0, [sp, #4]
    4ff0:	f7ff ffe0 	bl	4fb4 <Power_Ip_ConvertIntergeToResetType>
    4ff4:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    4ff6:	9b00      	ldr	r3, [sp, #0]
}
    4ff8:	4618      	mov	r0, r3
    4ffa:	b003      	add	sp, #12
    4ffc:	f85d fb04 	ldr.w	pc, [sp], #4

00005000 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    5000:	b500      	push	{lr}
    5002:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    5004:	f000 f98a 	bl	531c <Power_Ip_RCM_GetResetRawValue>
    5008:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    500a:	9b01      	ldr	r3, [sp, #4]
}
    500c:	4618      	mov	r0, r3
    500e:	b003      	add	sp, #12
    5010:	f85d fb04 	ldr.w	pc, [sp], #4

00005014 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    5014:	b500      	push	{lr}
    5016:	b083      	sub	sp, #12
    5018:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    501a:	9b01      	ldr	r3, [sp, #4]
    501c:	681b      	ldr	r3, [r3, #0]
    501e:	4618      	mov	r0, r3
    5020:	f000 f90e 	bl	5240 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    5024:	9b01      	ldr	r3, [sp, #4]
    5026:	685b      	ldr	r3, [r3, #4]
    5028:	4618      	mov	r0, r3
    502a:	f000 f86d 	bl	5108 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    502e:	9b01      	ldr	r3, [sp, #4]
    5030:	689b      	ldr	r3, [r3, #8]
    5032:	4618      	mov	r0, r3
    5034:	f000 f990 	bl	5358 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    5038:	bf00      	nop
    503a:	b003      	add	sp, #12
    503c:	f85d fb04 	ldr.w	pc, [sp], #4

00005040 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    5040:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    5042:	f000 f811 	bl	5068 <Power_Ip_CM4_DisableSleepOnExit>
}
    5046:	bf00      	nop
    5048:	bd08      	pop	{r3, pc}

0000504a <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    504a:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    504c:	f000 f820 	bl	5090 <Power_Ip_CM4_EnableSleepOnExit>
}
    5050:	bf00      	nop
    5052:	bd08      	pop	{r3, pc}

00005054 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    5054:	b082      	sub	sp, #8
    5056:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    5058:	4a02      	ldr	r2, [pc, #8]	; (5064 <Power_Ip_InstallNotificationsCallback+0x10>)
    505a:	9b01      	ldr	r3, [sp, #4]
    505c:	6013      	str	r3, [r2, #0]
}
    505e:	bf00      	nop
    5060:	b002      	add	sp, #8
    5062:	4770      	bx	lr
    5064:	1fff8b1c 	.word	0x1fff8b1c

00005068 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    5068:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    506a:	2300      	movs	r3, #0
    506c:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    506e:	4b07      	ldr	r3, [pc, #28]	; (508c <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5070:	681b      	ldr	r3, [r3, #0]
    5072:	685b      	ldr	r3, [r3, #4]
    5074:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    5076:	9b01      	ldr	r3, [sp, #4]
    5078:	f023 0302 	bic.w	r3, r3, #2
    507c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    507e:	4b03      	ldr	r3, [pc, #12]	; (508c <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5080:	681b      	ldr	r3, [r3, #0]
    5082:	9a01      	ldr	r2, [sp, #4]
    5084:	605a      	str	r2, [r3, #4]
}
    5086:	bf00      	nop
    5088:	b002      	add	sp, #8
    508a:	4770      	bx	lr
    508c:	1fff8b20 	.word	0x1fff8b20

00005090 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    5090:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5092:	2300      	movs	r3, #0
    5094:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5096:	4b07      	ldr	r3, [pc, #28]	; (50b4 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5098:	681b      	ldr	r3, [r3, #0]
    509a:	685b      	ldr	r3, [r3, #4]
    509c:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    509e:	9b01      	ldr	r3, [sp, #4]
    50a0:	f043 0302 	orr.w	r3, r3, #2
    50a4:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    50a6:	4b03      	ldr	r3, [pc, #12]	; (50b4 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    50a8:	681b      	ldr	r3, [r3, #0]
    50aa:	9a01      	ldr	r2, [sp, #4]
    50ac:	605a      	str	r2, [r3, #4]
}
    50ae:	bf00      	nop
    50b0:	b002      	add	sp, #8
    50b2:	4770      	bx	lr
    50b4:	1fff8b20 	.word	0x1fff8b20

000050b8 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    50b8:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    50ba:	2300      	movs	r3, #0
    50bc:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    50be:	4b07      	ldr	r3, [pc, #28]	; (50dc <Power_Ip_CM4_EnableDeepSleep+0x24>)
    50c0:	681b      	ldr	r3, [r3, #0]
    50c2:	685b      	ldr	r3, [r3, #4]
    50c4:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    50c6:	9b01      	ldr	r3, [sp, #4]
    50c8:	f043 0304 	orr.w	r3, r3, #4
    50cc:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    50ce:	4b03      	ldr	r3, [pc, #12]	; (50dc <Power_Ip_CM4_EnableDeepSleep+0x24>)
    50d0:	681b      	ldr	r3, [r3, #0]
    50d2:	9a01      	ldr	r2, [sp, #4]
    50d4:	605a      	str	r2, [r3, #4]
}
    50d6:	bf00      	nop
    50d8:	b002      	add	sp, #8
    50da:	4770      	bx	lr
    50dc:	1fff8b20 	.word	0x1fff8b20

000050e0 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    50e0:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    50e2:	2300      	movs	r3, #0
    50e4:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    50e6:	4b07      	ldr	r3, [pc, #28]	; (5104 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    50e8:	681b      	ldr	r3, [r3, #0]
    50ea:	685b      	ldr	r3, [r3, #4]
    50ec:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    50ee:	9b01      	ldr	r3, [sp, #4]
    50f0:	f023 0304 	bic.w	r3, r3, #4
    50f4:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    50f6:	4b03      	ldr	r3, [pc, #12]	; (5104 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    50f8:	681b      	ldr	r3, [r3, #0]
    50fa:	9a01      	ldr	r2, [sp, #4]
    50fc:	605a      	str	r2, [r3, #4]
}
    50fe:	bf00      	nop
    5100:	b002      	add	sp, #8
    5102:	4770      	bx	lr
    5104:	1fff8b20 	.word	0x1fff8b20

00005108 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    5108:	b084      	sub	sp, #16
    510a:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    510c:	4b20      	ldr	r3, [pc, #128]	; (5190 <Power_Ip_PMC_PowerInit+0x88>)
    510e:	781b      	ldrb	r3, [r3, #0]
    5110:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    5114:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5118:	f003 030f 	and.w	r3, r3, #15
    511c:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    5120:	9b01      	ldr	r3, [sp, #4]
    5122:	781a      	ldrb	r2, [r3, #0]
    5124:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5128:	4313      	orrs	r3, r2
    512a:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    512e:	4a18      	ldr	r2, [pc, #96]	; (5190 <Power_Ip_PMC_PowerInit+0x88>)
    5130:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5134:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    5136:	4b16      	ldr	r3, [pc, #88]	; (5190 <Power_Ip_PMC_PowerInit+0x88>)
    5138:	785b      	ldrb	r3, [r3, #1]
    513a:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    513e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5142:	f003 031f 	and.w	r3, r3, #31
    5146:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    514a:	9b01      	ldr	r3, [sp, #4]
    514c:	785a      	ldrb	r2, [r3, #1]
    514e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5152:	4313      	orrs	r3, r2
    5154:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    5158:	4a0d      	ldr	r2, [pc, #52]	; (5190 <Power_Ip_PMC_PowerInit+0x88>)
    515a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    515e:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    5160:	4b0b      	ldr	r3, [pc, #44]	; (5190 <Power_Ip_PMC_PowerInit+0x88>)
    5162:	789b      	ldrb	r3, [r3, #2]
    5164:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    5168:	f89d 300f 	ldrb.w	r3, [sp, #15]
    516c:	f003 0338 	and.w	r3, r3, #56	; 0x38
    5170:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    5174:	9b01      	ldr	r3, [sp, #4]
    5176:	789a      	ldrb	r2, [r3, #2]
    5178:	f89d 300f 	ldrb.w	r3, [sp, #15]
    517c:	4313      	orrs	r3, r2
    517e:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    5182:	4a03      	ldr	r2, [pc, #12]	; (5190 <Power_Ip_PMC_PowerInit+0x88>)
    5184:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5188:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    518a:	bf00      	nop
    518c:	b004      	add	sp, #16
    518e:	4770      	bx	lr
    5190:	4007d000 	.word	0x4007d000

00005194 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5194:	b500      	push	{lr}
    5196:	b083      	sub	sp, #12
    5198:	9001      	str	r0, [sp, #4]
    519a:	460b      	mov	r3, r1
    519c:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    51a0:	4b05      	ldr	r3, [pc, #20]	; (51b8 <Power_Ip_ReportPowerErrors+0x24>)
    51a2:	681b      	ldr	r3, [r3, #0]
    51a4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    51a8:	4611      	mov	r1, r2
    51aa:	9801      	ldr	r0, [sp, #4]
    51ac:	4798      	blx	r3
}
    51ae:	bf00      	nop
    51b0:	b003      	add	sp, #12
    51b2:	f85d fb04 	ldr.w	pc, [sp], #4
    51b6:	bf00      	nop
    51b8:	1fff8b1c 	.word	0x1fff8b1c

000051bc <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    51bc:	b082      	sub	sp, #8
    51be:	9001      	str	r0, [sp, #4]
    51c0:	460b      	mov	r3, r1
    51c2:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    51c6:	bf00      	nop
    51c8:	b002      	add	sp, #8
    51ca:	4770      	bx	lr

000051cc <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    51cc:	b500      	push	{lr}
    51ce:	b085      	sub	sp, #20
    51d0:	9003      	str	r0, [sp, #12]
    51d2:	9102      	str	r1, [sp, #8]
    51d4:	9201      	str	r2, [sp, #4]
    51d6:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    51d8:	2000      	movs	r0, #0
    51da:	f7fc f83c 	bl	1256 <OsIf_GetCounter>
    51de:	4602      	mov	r2, r0
    51e0:	9b03      	ldr	r3, [sp, #12]
    51e2:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    51e4:	9b02      	ldr	r3, [sp, #8]
    51e6:	2200      	movs	r2, #0
    51e8:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    51ea:	2100      	movs	r1, #0
    51ec:	9800      	ldr	r0, [sp, #0]
    51ee:	f7fc f87e 	bl	12ee <OsIf_MicrosToTicks>
    51f2:	4602      	mov	r2, r0
    51f4:	9b01      	ldr	r3, [sp, #4]
    51f6:	601a      	str	r2, [r3, #0]
}
    51f8:	bf00      	nop
    51fa:	b005      	add	sp, #20
    51fc:	f85d fb04 	ldr.w	pc, [sp], #4

00005200 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    5200:	b500      	push	{lr}
    5202:	b087      	sub	sp, #28
    5204:	9003      	str	r0, [sp, #12]
    5206:	9102      	str	r1, [sp, #8]
    5208:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    520a:	2300      	movs	r3, #0
    520c:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    5210:	2100      	movs	r1, #0
    5212:	9803      	ldr	r0, [sp, #12]
    5214:	f7fc f838 	bl	1288 <OsIf_GetElapsed>
    5218:	4602      	mov	r2, r0
    521a:	9b02      	ldr	r3, [sp, #8]
    521c:	681b      	ldr	r3, [r3, #0]
    521e:	441a      	add	r2, r3
    5220:	9b02      	ldr	r3, [sp, #8]
    5222:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    5224:	9b02      	ldr	r3, [sp, #8]
    5226:	681b      	ldr	r3, [r3, #0]
    5228:	9a01      	ldr	r2, [sp, #4]
    522a:	429a      	cmp	r2, r3
    522c:	d802      	bhi.n	5234 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    522e:	2301      	movs	r3, #1
    5230:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    5234:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    5238:	4618      	mov	r0, r3
    523a:	b007      	add	sp, #28
    523c:	f85d fb04 	ldr.w	pc, [sp], #4

00005240 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    5240:	b082      	sub	sp, #8
    5242:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    5244:	9b01      	ldr	r3, [sp, #4]
    5246:	681a      	ldr	r2, [r3, #0]
    5248:	4907      	ldr	r1, [pc, #28]	; (5268 <Power_Ip_RCM_ResetInit+0x28>)
    524a:	f641 7307 	movw	r3, #7943	; 0x1f07
    524e:	4013      	ands	r3, r2
    5250:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    5252:	9b01      	ldr	r3, [sp, #4]
    5254:	685a      	ldr	r2, [r3, #4]
    5256:	4904      	ldr	r1, [pc, #16]	; (5268 <Power_Ip_RCM_ResetInit+0x28>)
    5258:	f642 73ff 	movw	r3, #12287	; 0x2fff
    525c:	4013      	ands	r3, r2
    525e:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    5260:	bf00      	nop
    5262:	b002      	add	sp, #8
    5264:	4770      	bx	lr
    5266:	bf00      	nop
    5268:	4007f000 	.word	0x4007f000

0000526c <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    526c:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    526e:	230c      	movs	r3, #12
    5270:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    5272:	2300      	movs	r3, #0
    5274:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    5276:	2300      	movs	r3, #0
    5278:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    527a:	2300      	movs	r3, #0
    527c:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    527e:	4b25      	ldr	r3, [pc, #148]	; (5314 <Power_Ip_RCM_GetResetReason+0xa8>)
    5280:	699a      	ldr	r2, [r3, #24]
    5282:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5286:	4013      	ands	r3, r2
    5288:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    528a:	9b03      	ldr	r3, [sp, #12]
    528c:	2b00      	cmp	r3, #0
    528e:	d008      	beq.n	52a2 <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5290:	4920      	ldr	r1, [pc, #128]	; (5314 <Power_Ip_RCM_GetResetReason+0xa8>)
    5292:	9a03      	ldr	r2, [sp, #12]
    5294:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5298:	4013      	ands	r3, r2
    529a:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    529c:	4a1e      	ldr	r2, [pc, #120]	; (5318 <Power_Ip_RCM_GetResetReason+0xac>)
    529e:	9b03      	ldr	r3, [sp, #12]
    52a0:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    52a2:	4b1d      	ldr	r3, [pc, #116]	; (5318 <Power_Ip_RCM_GetResetReason+0xac>)
    52a4:	681b      	ldr	r3, [r3, #0]
    52a6:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    52a8:	9a02      	ldr	r2, [sp, #8]
    52aa:	f642 73ee 	movw	r3, #12270	; 0x2fee
    52ae:	4013      	ands	r3, r2
    52b0:	2b82      	cmp	r3, #130	; 0x82
    52b2:	d102      	bne.n	52ba <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    52b4:	2305      	movs	r3, #5
    52b6:	9307      	str	r3, [sp, #28]
    52b8:	e027      	b.n	530a <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    52ba:	2300      	movs	r3, #0
    52bc:	9306      	str	r3, [sp, #24]
    52be:	e021      	b.n	5304 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    52c0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    52c4:	9b06      	ldr	r3, [sp, #24]
    52c6:	fa22 f303 	lsr.w	r3, r2, r3
    52ca:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    52cc:	9a01      	ldr	r2, [sp, #4]
    52ce:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    52d2:	4013      	ands	r3, r2
    52d4:	2b00      	cmp	r3, #0
    52d6:	d012      	beq.n	52fe <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    52d8:	9a01      	ldr	r2, [sp, #4]
    52da:	9b02      	ldr	r3, [sp, #8]
    52dc:	4013      	ands	r3, r2
    52de:	2b00      	cmp	r3, #0
    52e0:	d00a      	beq.n	52f8 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    52e2:	9b05      	ldr	r3, [sp, #20]
    52e4:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    52e6:	9b04      	ldr	r3, [sp, #16]
    52e8:	3301      	adds	r3, #1
    52ea:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    52ec:	9b04      	ldr	r3, [sp, #16]
    52ee:	2b01      	cmp	r3, #1
    52f0:	d902      	bls.n	52f8 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    52f2:	230d      	movs	r3, #13
    52f4:	9307      	str	r3, [sp, #28]
                        break;
    52f6:	e008      	b.n	530a <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    52f8:	9b05      	ldr	r3, [sp, #20]
    52fa:	3301      	adds	r3, #1
    52fc:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    52fe:	9b06      	ldr	r3, [sp, #24]
    5300:	3301      	adds	r3, #1
    5302:	9306      	str	r3, [sp, #24]
    5304:	9b06      	ldr	r3, [sp, #24]
    5306:	2b1f      	cmp	r3, #31
    5308:	d9da      	bls.n	52c0 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    530a:	9b07      	ldr	r3, [sp, #28]
}
    530c:	4618      	mov	r0, r3
    530e:	b008      	add	sp, #32
    5310:	4770      	bx	lr
    5312:	bf00      	nop
    5314:	4007f000 	.word	0x4007f000
    5318:	1fff8d08 	.word	0x1fff8d08

0000531c <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    531c:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    531e:	4b0c      	ldr	r3, [pc, #48]	; (5350 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5320:	699a      	ldr	r2, [r3, #24]
    5322:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5326:	4013      	ands	r3, r2
    5328:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    532a:	9b01      	ldr	r3, [sp, #4]
    532c:	2b00      	cmp	r3, #0
    532e:	d008      	beq.n	5342 <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5330:	4907      	ldr	r1, [pc, #28]	; (5350 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5332:	9a01      	ldr	r2, [sp, #4]
    5334:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5338:	4013      	ands	r3, r2
    533a:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    533c:	4a05      	ldr	r2, [pc, #20]	; (5354 <Power_Ip_RCM_GetResetRawValue+0x38>)
    533e:	9b01      	ldr	r3, [sp, #4]
    5340:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    5342:	4b04      	ldr	r3, [pc, #16]	; (5354 <Power_Ip_RCM_GetResetRawValue+0x38>)
    5344:	681b      	ldr	r3, [r3, #0]
    5346:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    5348:	9b00      	ldr	r3, [sp, #0]
}
    534a:	4618      	mov	r0, r3
    534c:	b002      	add	sp, #8
    534e:	4770      	bx	lr
    5350:	4007f000 	.word	0x4007f000
    5354:	1fff8d08 	.word	0x1fff8d08

00005358 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    5358:	b082      	sub	sp, #8
    535a:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    535c:	9b01      	ldr	r3, [sp, #4]
    535e:	681b      	ldr	r3, [r3, #0]
    5360:	4a03      	ldr	r2, [pc, #12]	; (5370 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    5362:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    5366:	6093      	str	r3, [r2, #8]
}
    5368:	bf00      	nop
    536a:	b002      	add	sp, #8
    536c:	4770      	bx	lr
    536e:	bf00      	nop
    5370:	4007e000 	.word	0x4007e000

00005374 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    5374:	b084      	sub	sp, #16
    5376:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    5378:	2301      	movs	r3, #1
    537a:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    537c:	4b15      	ldr	r3, [pc, #84]	; (53d4 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    537e:	695b      	ldr	r3, [r3, #20]
    5380:	b2db      	uxtb	r3, r3
    5382:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    5384:	9b01      	ldr	r3, [sp, #4]
    5386:	2b02      	cmp	r3, #2
    5388:	d012      	beq.n	53b0 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    538a:	9b01      	ldr	r3, [sp, #4]
    538c:	2b02      	cmp	r3, #2
    538e:	d818      	bhi.n	53c2 <Power_Ip_SMC_ModeCheckEntry+0x4e>
    5390:	9b01      	ldr	r3, [sp, #4]
    5392:	2b00      	cmp	r3, #0
    5394:	d003      	beq.n	539e <Power_Ip_SMC_ModeCheckEntry+0x2a>
    5396:	9b01      	ldr	r3, [sp, #4]
    5398:	2b01      	cmp	r3, #1
    539a:	d003      	beq.n	53a4 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    539c:	e011      	b.n	53c2 <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    539e:	2300      	movs	r3, #0
    53a0:	9303      	str	r3, [sp, #12]
            break;
    53a2:	e013      	b.n	53cc <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    53a4:	9b02      	ldr	r3, [sp, #8]
    53a6:	2b01      	cmp	r3, #1
    53a8:	d10d      	bne.n	53c6 <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    53aa:	2300      	movs	r3, #0
    53ac:	9303      	str	r3, [sp, #12]
            break;
    53ae:	e00a      	b.n	53c6 <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    53b0:	9b02      	ldr	r3, [sp, #8]
    53b2:	2b01      	cmp	r3, #1
    53b4:	d002      	beq.n	53bc <Power_Ip_SMC_ModeCheckEntry+0x48>
    53b6:	9b02      	ldr	r3, [sp, #8]
    53b8:	2b10      	cmp	r3, #16
    53ba:	d106      	bne.n	53ca <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    53bc:	2300      	movs	r3, #0
    53be:	9303      	str	r3, [sp, #12]
            break;
    53c0:	e003      	b.n	53ca <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    53c2:	bf00      	nop
    53c4:	e002      	b.n	53cc <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    53c6:	bf00      	nop
    53c8:	e000      	b.n	53cc <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    53ca:	bf00      	nop
        }
    }

    return PowerModeCheck;
    53cc:	9b03      	ldr	r3, [sp, #12]
}
    53ce:	4618      	mov	r0, r3
    53d0:	b004      	add	sp, #16
    53d2:	4770      	bx	lr
    53d4:	4007e000 	.word	0x4007e000

000053d8 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    53d8:	b500      	push	{lr}
    53da:	b08b      	sub	sp, #44	; 0x2c
    53dc:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    53de:	2300      	movs	r3, #0
    53e0:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    53e2:	2300      	movs	r3, #0
    53e4:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    53e6:	2300      	movs	r3, #0
    53e8:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    53ec:	9b01      	ldr	r3, [sp, #4]
    53ee:	685b      	ldr	r3, [r3, #4]
    53f0:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    53f2:	9b08      	ldr	r3, [sp, #32]
    53f4:	2b02      	cmp	r3, #2
    53f6:	d076      	beq.n	54e6 <Power_Ip_SMC_ModeConfig+0x10e>
    53f8:	9b08      	ldr	r3, [sp, #32]
    53fa:	2b02      	cmp	r3, #2
    53fc:	f200 80ab 	bhi.w	5556 <Power_Ip_SMC_ModeConfig+0x17e>
    5400:	9b08      	ldr	r3, [sp, #32]
    5402:	2b00      	cmp	r3, #0
    5404:	d003      	beq.n	540e <Power_Ip_SMC_ModeConfig+0x36>
    5406:	9b08      	ldr	r3, [sp, #32]
    5408:	2b01      	cmp	r3, #1
    540a:	d034      	beq.n	5476 <Power_Ip_SMC_ModeConfig+0x9e>
    540c:	e0a3      	b.n	5556 <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    540e:	4b58      	ldr	r3, [pc, #352]	; (5570 <Power_Ip_SMC_ModeConfig+0x198>)
    5410:	68db      	ldr	r3, [r3, #12]
    5412:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5414:	9b06      	ldr	r3, [sp, #24]
    5416:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    541a:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    541c:	4a54      	ldr	r2, [pc, #336]	; (5570 <Power_Ip_SMC_ModeConfig+0x198>)
    541e:	9b06      	ldr	r3, [sp, #24]
    5420:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5422:	aa02      	add	r2, sp, #8
    5424:	a903      	add	r1, sp, #12
    5426:	a804      	add	r0, sp, #16
    5428:	f24c 3350 	movw	r3, #50000	; 0xc350
    542c:	f7ff fece 	bl	51cc <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5430:	9a02      	ldr	r2, [sp, #8]
    5432:	a903      	add	r1, sp, #12
    5434:	ab04      	add	r3, sp, #16
    5436:	4618      	mov	r0, r3
    5438:	f7ff fee2 	bl	5200 <Power_Ip_TimeoutExpired>
    543c:	4603      	mov	r3, r0
    543e:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    5442:	4b4b      	ldr	r3, [pc, #300]	; (5570 <Power_Ip_SMC_ModeConfig+0x198>)
    5444:	695b      	ldr	r3, [r3, #20]
    5446:	f003 0301 	and.w	r3, r3, #1
    544a:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    544c:	9b05      	ldr	r3, [sp, #20]
    544e:	2b01      	cmp	r3, #1
    5450:	d006      	beq.n	5460 <Power_Ip_SMC_ModeConfig+0x88>
    5452:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5456:	f083 0301 	eor.w	r3, r3, #1
    545a:	b2db      	uxtb	r3, r3
    545c:	2b00      	cmp	r3, #0
    545e:	d1e7      	bne.n	5430 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    5460:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5464:	2b00      	cmp	r3, #0
    5466:	d079      	beq.n	555c <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5468:	2301      	movs	r3, #1
    546a:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    546c:	21ff      	movs	r1, #255	; 0xff
    546e:	2000      	movs	r0, #0
    5470:	f7ff fe90 	bl	5194 <Power_Ip_ReportPowerErrors>
            }

            break;
    5474:	e072      	b.n	555c <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    5476:	4b3e      	ldr	r3, [pc, #248]	; (5570 <Power_Ip_SMC_ModeConfig+0x198>)
    5478:	68db      	ldr	r3, [r3, #12]
    547a:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    547c:	9b06      	ldr	r3, [sp, #24]
    547e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5482:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    5484:	9b06      	ldr	r3, [sp, #24]
    5486:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    548a:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    548c:	4a38      	ldr	r2, [pc, #224]	; (5570 <Power_Ip_SMC_ModeConfig+0x198>)
    548e:	9b06      	ldr	r3, [sp, #24]
    5490:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5492:	aa02      	add	r2, sp, #8
    5494:	a903      	add	r1, sp, #12
    5496:	a804      	add	r0, sp, #16
    5498:	f24c 3350 	movw	r3, #50000	; 0xc350
    549c:	f7ff fe96 	bl	51cc <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    54a0:	9a02      	ldr	r2, [sp, #8]
    54a2:	a903      	add	r1, sp, #12
    54a4:	ab04      	add	r3, sp, #16
    54a6:	4618      	mov	r0, r3
    54a8:	f7ff feaa 	bl	5200 <Power_Ip_TimeoutExpired>
    54ac:	4603      	mov	r3, r0
    54ae:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    54b2:	4b2f      	ldr	r3, [pc, #188]	; (5570 <Power_Ip_SMC_ModeConfig+0x198>)
    54b4:	695b      	ldr	r3, [r3, #20]
    54b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    54ba:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    54bc:	9b05      	ldr	r3, [sp, #20]
    54be:	2b80      	cmp	r3, #128	; 0x80
    54c0:	d006      	beq.n	54d0 <Power_Ip_SMC_ModeConfig+0xf8>
    54c2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    54c6:	f083 0301 	eor.w	r3, r3, #1
    54ca:	b2db      	uxtb	r3, r3
    54cc:	2b00      	cmp	r3, #0
    54ce:	d1e7      	bne.n	54a0 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    54d0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    54d4:	2b00      	cmp	r3, #0
    54d6:	d043      	beq.n	5560 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    54d8:	2301      	movs	r3, #1
    54da:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    54dc:	21ff      	movs	r1, #255	; 0xff
    54de:	2000      	movs	r0, #0
    54e0:	f7ff fe58 	bl	5194 <Power_Ip_ReportPowerErrors>
            }

            break;
    54e4:	e03c      	b.n	5560 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    54e6:	4b22      	ldr	r3, [pc, #136]	; (5570 <Power_Ip_SMC_ModeConfig+0x198>)
    54e8:	68db      	ldr	r3, [r3, #12]
    54ea:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    54ec:	9b06      	ldr	r3, [sp, #24]
    54ee:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    54f2:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    54f4:	9b06      	ldr	r3, [sp, #24]
    54f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    54fa:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    54fc:	4a1c      	ldr	r2, [pc, #112]	; (5570 <Power_Ip_SMC_ModeConfig+0x198>)
    54fe:	9b06      	ldr	r3, [sp, #24]
    5500:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5502:	aa02      	add	r2, sp, #8
    5504:	a903      	add	r1, sp, #12
    5506:	a804      	add	r0, sp, #16
    5508:	f24c 3350 	movw	r3, #50000	; 0xc350
    550c:	f7ff fe5e 	bl	51cc <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5510:	9a02      	ldr	r2, [sp, #8]
    5512:	a903      	add	r1, sp, #12
    5514:	ab04      	add	r3, sp, #16
    5516:	4618      	mov	r0, r3
    5518:	f7ff fe72 	bl	5200 <Power_Ip_TimeoutExpired>
    551c:	4603      	mov	r3, r0
    551e:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    5522:	4b13      	ldr	r3, [pc, #76]	; (5570 <Power_Ip_SMC_ModeConfig+0x198>)
    5524:	695b      	ldr	r3, [r3, #20]
    5526:	f003 0304 	and.w	r3, r3, #4
    552a:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    552c:	9b05      	ldr	r3, [sp, #20]
    552e:	2b04      	cmp	r3, #4
    5530:	d006      	beq.n	5540 <Power_Ip_SMC_ModeConfig+0x168>
    5532:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5536:	f083 0301 	eor.w	r3, r3, #1
    553a:	b2db      	uxtb	r3, r3
    553c:	2b00      	cmp	r3, #0
    553e:	d1e7      	bne.n	5510 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    5540:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5544:	2b00      	cmp	r3, #0
    5546:	d00d      	beq.n	5564 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5548:	2301      	movs	r3, #1
    554a:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    554c:	21ff      	movs	r1, #255	; 0xff
    554e:	2000      	movs	r0, #0
    5550:	f7ff fe20 	bl	5194 <Power_Ip_ReportPowerErrors>
            }

            break;
    5554:	e006      	b.n	5564 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5556:	2301      	movs	r3, #1
    5558:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    555a:	e004      	b.n	5566 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    555c:	bf00      	nop
    555e:	e002      	b.n	5566 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5560:	bf00      	nop
    5562:	e000      	b.n	5566 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5564:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    5566:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    5568:	4618      	mov	r0, r3
    556a:	b00b      	add	sp, #44	; 0x2c
    556c:	f85d fb04 	ldr.w	pc, [sp], #4
    5570:	4007e000 	.word	0x4007e000

00005574 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    5574:	b500      	push	{lr}
    5576:	b085      	sub	sp, #20
    5578:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    557a:	9b01      	ldr	r3, [sp, #4]
    557c:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    557e:	9803      	ldr	r0, [sp, #12]
    5580:	f000 fbc8 	bl	5d14 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    5584:	4a03      	ldr	r2, [pc, #12]	; (5594 <Port_Init+0x20>)
    5586:	9b03      	ldr	r3, [sp, #12]
    5588:	6013      	str	r3, [r2, #0]
        }
    }
}
    558a:	bf00      	nop
    558c:	b005      	add	sp, #20
    558e:	f85d fb04 	ldr.w	pc, [sp], #4
    5592:	bf00      	nop
    5594:	1fff8d0c 	.word	0x1fff8d0c

00005598 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    5598:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    559a:	4b03      	ldr	r3, [pc, #12]	; (55a8 <Port_RefreshPortDirection+0x10>)
    559c:	681b      	ldr	r3, [r3, #0]
    559e:	4618      	mov	r0, r3
    55a0:	f000 fc10 	bl	5dc4 <Port_Ipw_RefreshPortDirection>
    }
}
    55a4:	bf00      	nop
    55a6:	bd08      	pop	{r3, pc}
    55a8:	1fff8d0c 	.word	0x1fff8d0c

000055ac <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    55ac:	b086      	sub	sp, #24
    55ae:	9003      	str	r0, [sp, #12]
    55b0:	9102      	str	r1, [sp, #8]
    55b2:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    55b4:	23ff      	movs	r3, #255	; 0xff
    55b6:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    55b8:	9b03      	ldr	r3, [sp, #12]
    55ba:	4a39      	ldr	r2, [pc, #228]	; (56a0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    55bc:	4293      	cmp	r3, r2
    55be:	d151      	bne.n	5664 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    55c0:	9b02      	ldr	r3, [sp, #8]
    55c2:	2b10      	cmp	r3, #16
    55c4:	d867      	bhi.n	5696 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    55c6:	a201      	add	r2, pc, #4	; (adr r2, 55cc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    55c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    55cc:	00005611 	.word	0x00005611
    55d0:	0000561f 	.word	0x0000561f
    55d4:	00005697 	.word	0x00005697
    55d8:	00005697 	.word	0x00005697
    55dc:	00005697 	.word	0x00005697
    55e0:	00005697 	.word	0x00005697
    55e4:	00005697 	.word	0x00005697
    55e8:	00005697 	.word	0x00005697
    55ec:	00005697 	.word	0x00005697
    55f0:	00005697 	.word	0x00005697
    55f4:	00005697 	.word	0x00005697
    55f8:	00005697 	.word	0x00005697
    55fc:	00005697 	.word	0x00005697
    5600:	0000562d 	.word	0x0000562d
    5604:	0000563b 	.word	0x0000563b
    5608:	00005649 	.word	0x00005649
    560c:	00005657 	.word	0x00005657
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    5610:	2301      	movs	r3, #1
    5612:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5614:	9a05      	ldr	r2, [sp, #20]
    5616:	9b01      	ldr	r3, [sp, #4]
    5618:	4313      	orrs	r3, r2
    561a:	9305      	str	r3, [sp, #20]
                break;
    561c:	e03c      	b.n	5698 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    561e:	2302      	movs	r3, #2
    5620:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5622:	9a05      	ldr	r2, [sp, #20]
    5624:	9b01      	ldr	r3, [sp, #4]
    5626:	4313      	orrs	r3, r2
    5628:	9305      	str	r3, [sp, #20]
                break;
    562a:	e035      	b.n	5698 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    562c:	2304      	movs	r3, #4
    562e:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5630:	9a05      	ldr	r2, [sp, #20]
    5632:	9b01      	ldr	r3, [sp, #4]
    5634:	4313      	orrs	r3, r2
    5636:	9305      	str	r3, [sp, #20]
                break;
    5638:	e02e      	b.n	5698 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    563a:	2308      	movs	r3, #8
    563c:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    563e:	9a05      	ldr	r2, [sp, #20]
    5640:	9b01      	ldr	r3, [sp, #4]
    5642:	4313      	orrs	r3, r2
    5644:	9305      	str	r3, [sp, #20]
                break;
    5646:	e027      	b.n	5698 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    5648:	230e      	movs	r3, #14
    564a:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    564c:	9a05      	ldr	r2, [sp, #20]
    564e:	9b01      	ldr	r3, [sp, #4]
    5650:	4013      	ands	r3, r2
    5652:	9305      	str	r3, [sp, #20]
                break;
    5654:	e020      	b.n	5698 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    5656:	230d      	movs	r3, #13
    5658:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    565a:	9a05      	ldr	r2, [sp, #20]
    565c:	9b01      	ldr	r3, [sp, #4]
    565e:	4013      	ands	r3, r2
    5660:	9305      	str	r3, [sp, #20]
                break;
    5662:	e019      	b.n	5698 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    5664:	9b03      	ldr	r3, [sp, #12]
    5666:	4a0f      	ldr	r2, [pc, #60]	; (56a4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    5668:	4293      	cmp	r3, r2
    566a:	d115      	bne.n	5698 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    566c:	9b02      	ldr	r3, [sp, #8]
    566e:	2b00      	cmp	r3, #0
    5670:	d003      	beq.n	567a <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    5672:	9b02      	ldr	r3, [sp, #8]
    5674:	2b01      	cmp	r3, #1
    5676:	d007      	beq.n	5688 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    5678:	e00e      	b.n	5698 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    567a:	230b      	movs	r3, #11
    567c:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    567e:	9a05      	ldr	r2, [sp, #20]
    5680:	9b01      	ldr	r3, [sp, #4]
    5682:	4013      	ands	r3, r2
    5684:	9305      	str	r3, [sp, #20]
                break;
    5686:	e007      	b.n	5698 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    5688:	2307      	movs	r3, #7
    568a:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    568c:	9a05      	ldr	r2, [sp, #20]
    568e:	9b01      	ldr	r3, [sp, #4]
    5690:	4013      	ands	r3, r2
    5692:	9305      	str	r3, [sp, #20]
                break;
    5694:	e000      	b.n	5698 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    5696:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    5698:	9b05      	ldr	r3, [sp, #20]
}
    569a:	4618      	mov	r0, r3
    569c:	b006      	add	sp, #24
    569e:	4770      	bx	lr
    56a0:	4004a000 	.word	0x4004a000
    56a4:	4004b000 	.word	0x4004b000

000056a8 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    56a8:	b500      	push	{lr}
    56aa:	b089      	sub	sp, #36	; 0x24
    56ac:	9003      	str	r0, [sp, #12]
    56ae:	9102      	str	r1, [sp, #8]
    56b0:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    56b2:	9b01      	ldr	r3, [sp, #4]
    56b4:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    56b6:	9b01      	ldr	r3, [sp, #4]
    56b8:	2b08      	cmp	r3, #8
    56ba:	d121      	bne.n	5700 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    56bc:	4b13      	ldr	r3, [pc, #76]	; (570c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    56be:	685b      	ldr	r3, [r3, #4]
    56c0:	f003 030f 	and.w	r3, r3, #15
    56c4:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    56c6:	9a06      	ldr	r2, [sp, #24]
    56c8:	9902      	ldr	r1, [sp, #8]
    56ca:	9803      	ldr	r0, [sp, #12]
    56cc:	f7ff ff6e 	bl	55ac <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    56d0:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    56d2:	9b05      	ldr	r3, [sp, #20]
    56d4:	2bff      	cmp	r3, #255	; 0xff
    56d6:	d011      	beq.n	56fc <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    56d8:	f001 f984 	bl	69e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    56dc:	4b0b      	ldr	r3, [pc, #44]	; (570c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    56de:	685b      	ldr	r3, [r3, #4]
    56e0:	4a0a      	ldr	r2, [pc, #40]	; (570c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    56e2:	f023 030f 	bic.w	r3, r3, #15
    56e6:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    56e8:	4b08      	ldr	r3, [pc, #32]	; (570c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    56ea:	685a      	ldr	r2, [r3, #4]
    56ec:	9b05      	ldr	r3, [sp, #20]
    56ee:	f003 030f 	and.w	r3, r3, #15
    56f2:	4906      	ldr	r1, [pc, #24]	; (570c <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    56f4:	4313      	orrs	r3, r2
    56f6:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    56f8:	f001 f9a0 	bl	6a3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    56fc:	2300      	movs	r3, #0
    56fe:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    5700:	9b07      	ldr	r3, [sp, #28]
}
    5702:	4618      	mov	r0, r3
    5704:	b009      	add	sp, #36	; 0x24
    5706:	f85d fb04 	ldr.w	pc, [sp], #4
    570a:	bf00      	nop
    570c:	40048000 	.word	0x40048000

00005710 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    5710:	b500      	push	{lr}
    5712:	b087      	sub	sp, #28
    5714:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    5716:	2300      	movs	r3, #0
    5718:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    571a:	2300      	movs	r3, #0
    571c:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    571e:	2300      	movs	r3, #0
    5720:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    5722:	9b01      	ldr	r3, [sp, #4]
    5724:	68db      	ldr	r3, [r3, #12]
    5726:	2b02      	cmp	r3, #2
    5728:	d00a      	beq.n	5740 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    572a:	9b05      	ldr	r3, [sp, #20]
    572c:	f043 0302 	orr.w	r3, r3, #2
    5730:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    5732:	9b01      	ldr	r3, [sp, #4]
    5734:	68db      	ldr	r3, [r3, #12]
    5736:	f003 0301 	and.w	r3, r3, #1
    573a:	9a05      	ldr	r2, [sp, #20]
    573c:	4313      	orrs	r3, r2
    573e:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    5740:	9b01      	ldr	r3, [sp, #4]
    5742:	699b      	ldr	r3, [r3, #24]
    5744:	019b      	lsls	r3, r3, #6
    5746:	f003 0340 	and.w	r3, r3, #64	; 0x40
    574a:	9a05      	ldr	r2, [sp, #20]
    574c:	4313      	orrs	r3, r2
    574e:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    5750:	9b01      	ldr	r3, [sp, #4]
    5752:	6a1b      	ldr	r3, [r3, #32]
    5754:	03db      	lsls	r3, r3, #15
    5756:	b29b      	uxth	r3, r3
    5758:	9a05      	ldr	r2, [sp, #20]
    575a:	4313      	orrs	r3, r2
    575c:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    575e:	9b01      	ldr	r3, [sp, #4]
    5760:	7f1b      	ldrb	r3, [r3, #28]
    5762:	2b00      	cmp	r3, #0
    5764:	d001      	beq.n	576a <Port_Ci_Port_Ip_PinInit+0x5a>
    5766:	2310      	movs	r3, #16
    5768:	e000      	b.n	576c <Port_Ci_Port_Ip_PinInit+0x5c>
    576a:	2300      	movs	r3, #0
    576c:	9a05      	ldr	r2, [sp, #20]
    576e:	4313      	orrs	r3, r2
    5770:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    5772:	9b01      	ldr	r3, [sp, #4]
    5774:	691b      	ldr	r3, [r3, #16]
    5776:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    5778:	9b01      	ldr	r3, [sp, #4]
    577a:	6818      	ldr	r0, [r3, #0]
    577c:	9b01      	ldr	r3, [sp, #4]
    577e:	689b      	ldr	r3, [r3, #8]
    5780:	9a04      	ldr	r2, [sp, #16]
    5782:	4619      	mov	r1, r3
    5784:	f7ff ff90 	bl	56a8 <Port_Ci_Port_Ip_ConfigureInterleave>
    5788:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    578a:	9b03      	ldr	r3, [sp, #12]
    578c:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    578e:	9b04      	ldr	r3, [sp, #16]
    5790:	021b      	lsls	r3, r3, #8
    5792:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    5796:	9a05      	ldr	r2, [sp, #20]
    5798:	4313      	orrs	r3, r2
    579a:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    579c:	f000 ff88 	bl	66b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    57a0:	9b01      	ldr	r3, [sp, #4]
    57a2:	681b      	ldr	r3, [r3, #0]
    57a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    57a8:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    57aa:	9b01      	ldr	r3, [sp, #4]
    57ac:	689b      	ldr	r3, [r3, #8]
    57ae:	2201      	movs	r2, #1
    57b0:	fa02 f303 	lsl.w	r3, r2, r3
    57b4:	43db      	mvns	r3, r3
    57b6:	9a02      	ldr	r2, [sp, #8]
    57b8:	4013      	ands	r3, r2
    57ba:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    57bc:	9b01      	ldr	r3, [sp, #4]
    57be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    57c2:	2b00      	cmp	r3, #0
    57c4:	d001      	beq.n	57ca <Port_Ci_Port_Ip_PinInit+0xba>
    57c6:	2201      	movs	r2, #1
    57c8:	e000      	b.n	57cc <Port_Ci_Port_Ip_PinInit+0xbc>
    57ca:	2200      	movs	r2, #0
    57cc:	9b01      	ldr	r3, [sp, #4]
    57ce:	689b      	ldr	r3, [r3, #8]
    57d0:	fa02 f303 	lsl.w	r3, r2, r3
    57d4:	9a02      	ldr	r2, [sp, #8]
    57d6:	4313      	orrs	r3, r2
    57d8:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    57da:	9b01      	ldr	r3, [sp, #4]
    57dc:	681b      	ldr	r3, [r3, #0]
    57de:	9a02      	ldr	r2, [sp, #8]
    57e0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    57e4:	f000 ff90 	bl	6708 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    57e8:	9b04      	ldr	r3, [sp, #16]
    57ea:	2b01      	cmp	r3, #1
    57ec:	d16d      	bne.n	58ca <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    57ee:	9b01      	ldr	r3, [sp, #4]
    57f0:	695b      	ldr	r3, [r3, #20]
    57f2:	2b02      	cmp	r3, #2
    57f4:	d138      	bne.n	5868 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    57f6:	9b01      	ldr	r3, [sp, #4]
    57f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    57fc:	2b01      	cmp	r3, #1
    57fe:	d10f      	bne.n	5820 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    5800:	f000 ffa8 	bl	6754 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    5804:	9b01      	ldr	r3, [sp, #4]
    5806:	685b      	ldr	r3, [r3, #4]
    5808:	6859      	ldr	r1, [r3, #4]
    580a:	9b01      	ldr	r3, [sp, #4]
    580c:	689b      	ldr	r3, [r3, #8]
    580e:	2201      	movs	r2, #1
    5810:	409a      	lsls	r2, r3
    5812:	9b01      	ldr	r3, [sp, #4]
    5814:	685b      	ldr	r3, [r3, #4]
    5816:	430a      	orrs	r2, r1
    5818:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    581a:	f000 ffc7 	bl	67ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    581e:	e013      	b.n	5848 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    5820:	9b01      	ldr	r3, [sp, #4]
    5822:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    5826:	2b00      	cmp	r3, #0
    5828:	d10e      	bne.n	5848 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    582a:	f000 ffe5 	bl	67f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    582e:	9b01      	ldr	r3, [sp, #4]
    5830:	685b      	ldr	r3, [r3, #4]
    5832:	6899      	ldr	r1, [r3, #8]
    5834:	9b01      	ldr	r3, [sp, #4]
    5836:	689b      	ldr	r3, [r3, #8]
    5838:	2201      	movs	r2, #1
    583a:	409a      	lsls	r2, r3
    583c:	9b01      	ldr	r3, [sp, #4]
    583e:	685b      	ldr	r3, [r3, #4]
    5840:	430a      	orrs	r2, r1
    5842:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    5844:	f001 f804 	bl	6850 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    5848:	f001 f828 	bl	689c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    584c:	9b01      	ldr	r3, [sp, #4]
    584e:	685b      	ldr	r3, [r3, #4]
    5850:	6959      	ldr	r1, [r3, #20]
    5852:	9b01      	ldr	r3, [sp, #4]
    5854:	689b      	ldr	r3, [r3, #8]
    5856:	2201      	movs	r2, #1
    5858:	409a      	lsls	r2, r3
    585a:	9b01      	ldr	r3, [sp, #4]
    585c:	685b      	ldr	r3, [r3, #4]
    585e:	430a      	orrs	r2, r1
    5860:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    5862:	f001 f847 	bl	68f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    5866:	e030      	b.n	58ca <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    5868:	f001 f818 	bl	689c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    586c:	9b01      	ldr	r3, [sp, #4]
    586e:	685b      	ldr	r3, [r3, #4]
    5870:	6959      	ldr	r1, [r3, #20]
    5872:	9b01      	ldr	r3, [sp, #4]
    5874:	689b      	ldr	r3, [r3, #8]
    5876:	2201      	movs	r2, #1
    5878:	fa02 f303 	lsl.w	r3, r2, r3
    587c:	43da      	mvns	r2, r3
    587e:	9b01      	ldr	r3, [sp, #4]
    5880:	685b      	ldr	r3, [r3, #4]
    5882:	400a      	ands	r2, r1
    5884:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    5886:	f001 f835 	bl	68f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    588a:	f001 f859 	bl	6940 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    588e:	9b01      	ldr	r3, [sp, #4]
    5890:	685b      	ldr	r3, [r3, #4]
    5892:	6999      	ldr	r1, [r3, #24]
    5894:	9b01      	ldr	r3, [sp, #4]
    5896:	689b      	ldr	r3, [r3, #8]
    5898:	2201      	movs	r2, #1
    589a:	fa02 f303 	lsl.w	r3, r2, r3
    589e:	43da      	mvns	r2, r3
    58a0:	9b01      	ldr	r3, [sp, #4]
    58a2:	685b      	ldr	r3, [r3, #4]
    58a4:	400a      	ands	r2, r1
    58a6:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    58a8:	9b01      	ldr	r3, [sp, #4]
    58aa:	695b      	ldr	r3, [r3, #20]
    58ac:	2b03      	cmp	r3, #3
    58ae:	d10a      	bne.n	58c6 <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    58b0:	9b01      	ldr	r3, [sp, #4]
    58b2:	685b      	ldr	r3, [r3, #4]
    58b4:	6999      	ldr	r1, [r3, #24]
    58b6:	9b01      	ldr	r3, [sp, #4]
    58b8:	689b      	ldr	r3, [r3, #8]
    58ba:	2201      	movs	r2, #1
    58bc:	409a      	lsls	r2, r3
    58be:	9b01      	ldr	r3, [sp, #4]
    58c0:	685b      	ldr	r3, [r3, #4]
    58c2:	430a      	orrs	r2, r1
    58c4:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    58c6:	f001 f867 	bl	6998 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    58ca:	9b01      	ldr	r3, [sp, #4]
    58cc:	681b      	ldr	r3, [r3, #0]
    58ce:	9a01      	ldr	r2, [sp, #4]
    58d0:	6892      	ldr	r2, [r2, #8]
    58d2:	9905      	ldr	r1, [sp, #20]
    58d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    58d8:	bf00      	nop
    58da:	b007      	add	sp, #28
    58dc:	f85d fb04 	ldr.w	pc, [sp], #4

000058e0 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    58e0:	b500      	push	{lr}
    58e2:	b085      	sub	sp, #20
    58e4:	9001      	str	r0, [sp, #4]
    58e6:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    58e8:	2300      	movs	r3, #0
    58ea:	9303      	str	r3, [sp, #12]
    58ec:	e00d      	b.n	590a <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    58ee:	9a03      	ldr	r2, [sp, #12]
    58f0:	4613      	mov	r3, r2
    58f2:	009b      	lsls	r3, r3, #2
    58f4:	4413      	add	r3, r2
    58f6:	00db      	lsls	r3, r3, #3
    58f8:	461a      	mov	r2, r3
    58fa:	9b00      	ldr	r3, [sp, #0]
    58fc:	4413      	add	r3, r2
    58fe:	4618      	mov	r0, r3
    5900:	f7ff ff06 	bl	5710 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    5904:	9b03      	ldr	r3, [sp, #12]
    5906:	3301      	adds	r3, #1
    5908:	9303      	str	r3, [sp, #12]
    590a:	9a03      	ldr	r2, [sp, #12]
    590c:	9b01      	ldr	r3, [sp, #4]
    590e:	429a      	cmp	r2, r3
    5910:	d3ed      	bcc.n	58ee <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    5912:	2300      	movs	r3, #0
}
    5914:	4618      	mov	r0, r3
    5916:	b005      	add	sp, #20
    5918:	f85d fb04 	ldr.w	pc, [sp], #4

0000591c <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    591c:	b500      	push	{lr}
    591e:	b087      	sub	sp, #28
    5920:	9003      	str	r0, [sp, #12]
    5922:	9102      	str	r1, [sp, #8]
    5924:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    5926:	9a01      	ldr	r2, [sp, #4]
    5928:	9902      	ldr	r1, [sp, #8]
    592a:	9803      	ldr	r0, [sp, #12]
    592c:	f7ff febc 	bl	56a8 <Port_Ci_Port_Ip_ConfigureInterleave>
    5930:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    5932:	f001 f8a9 	bl	6a88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    5936:	9b03      	ldr	r3, [sp, #12]
    5938:	9a02      	ldr	r2, [sp, #8]
    593a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    593e:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    5940:	9b04      	ldr	r3, [sp, #16]
    5942:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    5946:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    5948:	9b05      	ldr	r3, [sp, #20]
    594a:	021b      	lsls	r3, r3, #8
    594c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    5950:	9a04      	ldr	r2, [sp, #16]
    5952:	4313      	orrs	r3, r2
    5954:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    5956:	9b03      	ldr	r3, [sp, #12]
    5958:	9a02      	ldr	r2, [sp, #8]
    595a:	9904      	ldr	r1, [sp, #16]
    595c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    5960:	f001 f8be 	bl	6ae0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    5964:	bf00      	nop
    5966:	b007      	add	sp, #28
    5968:	f85d fb04 	ldr.w	pc, [sp], #4

0000596c <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    596c:	b500      	push	{lr}
    596e:	b083      	sub	sp, #12
    5970:	9001      	str	r0, [sp, #4]
    5972:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    5974:	f001 f8da 	bl	6b2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    5978:	9b01      	ldr	r3, [sp, #4]
    597a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    597e:	2101      	movs	r1, #1
    5980:	9b00      	ldr	r3, [sp, #0]
    5982:	fa01 f303 	lsl.w	r3, r1, r3
    5986:	431a      	orrs	r2, r3
    5988:	9b01      	ldr	r3, [sp, #4]
    598a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    598e:	f001 f8f9 	bl	6b84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    5992:	bf00      	nop
    5994:	b003      	add	sp, #12
    5996:	f85d fb04 	ldr.w	pc, [sp], #4

0000599a <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    599a:	b500      	push	{lr}
    599c:	b083      	sub	sp, #12
    599e:	9001      	str	r0, [sp, #4]
    59a0:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    59a2:	f001 f915 	bl	6bd0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    59a6:	9b01      	ldr	r3, [sp, #4]
    59a8:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    59ac:	2101      	movs	r1, #1
    59ae:	9b00      	ldr	r3, [sp, #0]
    59b0:	fa01 f303 	lsl.w	r3, r1, r3
    59b4:	43db      	mvns	r3, r3
    59b6:	401a      	ands	r2, r3
    59b8:	9b01      	ldr	r3, [sp, #4]
    59ba:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    59be:	f001 f933 	bl	6c28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    59c2:	bf00      	nop
    59c4:	b003      	add	sp, #12
    59c6:	f85d fb04 	ldr.w	pc, [sp], #4

000059ca <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    59ca:	b082      	sub	sp, #8
    59cc:	9001      	str	r0, [sp, #4]
    59ce:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    59d0:	9b00      	ldr	r3, [sp, #0]
    59d2:	785b      	ldrb	r3, [r3, #1]
    59d4:	f003 0201 	and.w	r2, r3, #1
    59d8:	9b01      	ldr	r3, [sp, #4]
    59da:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    59de:	9b00      	ldr	r3, [sp, #0]
    59e0:	789b      	ldrb	r3, [r3, #2]
    59e2:	f003 021f 	and.w	r2, r3, #31
    59e6:	9b01      	ldr	r3, [sp, #4]
    59e8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    59ec:	bf00      	nop
    59ee:	b002      	add	sp, #8
    59f0:	4770      	bx	lr

000059f2 <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    59f2:	b086      	sub	sp, #24
    59f4:	9003      	str	r0, [sp, #12]
    59f6:	9301      	str	r3, [sp, #4]
    59f8:	460b      	mov	r3, r1
    59fa:	f8ad 300a 	strh.w	r3, [sp, #10]
    59fe:	4613      	mov	r3, r2
    5a00:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    5a04:	2300      	movs	r3, #0
    5a06:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    5a0a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a0e:	f043 0301 	orr.w	r3, r3, #1
    5a12:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    5a16:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a1a:	f043 0302 	orr.w	r3, r3, #2
    5a1e:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    5a22:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a26:	f043 0310 	orr.w	r3, r3, #16
    5a2a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    5a2e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5a36:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    5a3a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    5a42:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    5a46:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    5a4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    5a52:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    5a56:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5a5a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    5a5e:	4013      	ands	r3, r2
    5a60:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    5a64:	9b01      	ldr	r3, [sp, #4]
    5a66:	2b00      	cmp	r3, #0
    5a68:	d003      	beq.n	5a72 <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    5a6a:	9b01      	ldr	r3, [sp, #4]
    5a6c:	2b01      	cmp	r3, #1
    5a6e:	d00a      	beq.n	5a86 <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    5a70:	e013      	b.n	5a9a <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    5a72:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5a76:	041a      	lsls	r2, r3, #16
    5a78:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a7c:	431a      	orrs	r2, r3
    5a7e:	9b03      	ldr	r3, [sp, #12]
    5a80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    5a84:	e009      	b.n	5a9a <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    5a86:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5a8a:	041a      	lsls	r2, r3, #16
    5a8c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a90:	431a      	orrs	r2, r3
    5a92:	9b03      	ldr	r3, [sp, #12]
    5a94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    5a98:	bf00      	nop
    }
}
    5a9a:	bf00      	nop
    5a9c:	b006      	add	sp, #24
    5a9e:	4770      	bx	lr

00005aa0 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    5aa0:	b500      	push	{lr}
    5aa2:	b087      	sub	sp, #28
    5aa4:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    5aa6:	9b01      	ldr	r3, [sp, #4]
    5aa8:	885b      	ldrh	r3, [r3, #2]
    5aaa:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    5aae:	9b01      	ldr	r3, [sp, #4]
    5ab0:	689b      	ldr	r3, [r3, #8]
    5ab2:	7a1b      	ldrb	r3, [r3, #8]
    5ab4:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    5ab8:	9b01      	ldr	r3, [sp, #4]
    5aba:	689b      	ldr	r3, [r3, #8]
    5abc:	681b      	ldr	r3, [r3, #0]
    5abe:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    5ac0:	9b01      	ldr	r3, [sp, #4]
    5ac2:	689b      	ldr	r3, [r3, #8]
    5ac4:	685b      	ldr	r3, [r3, #4]
    5ac6:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    5ac8:	2300      	movs	r3, #0
    5aca:	f8ad 3016 	strh.w	r3, [sp, #22]
    5ace:	e111      	b.n	5cf4 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    5ad0:	9b02      	ldr	r3, [sp, #8]
    5ad2:	2b02      	cmp	r3, #2
    5ad4:	d169      	bne.n	5baa <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    5ad6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    5ada:	2b01      	cmp	r3, #1
    5adc:	d11a      	bne.n	5b14 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5ade:	9b01      	ldr	r3, [sp, #4]
    5ae0:	685a      	ldr	r2, [r3, #4]
    5ae2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5ae6:	005b      	lsls	r3, r3, #1
    5ae8:	4413      	add	r3, r2
    5aea:	881b      	ldrh	r3, [r3, #0]
    5aec:	f003 021f 	and.w	r2, r3, #31
    5af0:	9b01      	ldr	r3, [sp, #4]
    5af2:	6859      	ldr	r1, [r3, #4]
    5af4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5af8:	005b      	lsls	r3, r3, #1
    5afa:	440b      	add	r3, r1
    5afc:	881b      	ldrh	r3, [r3, #0]
    5afe:	095b      	lsrs	r3, r3, #5
    5b00:	b29b      	uxth	r3, r3
    5b02:	4619      	mov	r1, r3
    5b04:	4b81      	ldr	r3, [pc, #516]	; (5d0c <Port_Ipw_Init_UnusedPins+0x26c>)
    5b06:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    5b0a:	2101      	movs	r1, #1
    5b0c:	fa01 f202 	lsl.w	r2, r1, r2
    5b10:	605a      	str	r2, [r3, #4]
    5b12:	e01d      	b.n	5b50 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    5b14:	f89d 3013 	ldrb.w	r3, [sp, #19]
    5b18:	2b00      	cmp	r3, #0
    5b1a:	d119      	bne.n	5b50 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5b1c:	9b01      	ldr	r3, [sp, #4]
    5b1e:	685a      	ldr	r2, [r3, #4]
    5b20:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b24:	005b      	lsls	r3, r3, #1
    5b26:	4413      	add	r3, r2
    5b28:	881b      	ldrh	r3, [r3, #0]
    5b2a:	f003 021f 	and.w	r2, r3, #31
    5b2e:	9b01      	ldr	r3, [sp, #4]
    5b30:	6859      	ldr	r1, [r3, #4]
    5b32:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b36:	005b      	lsls	r3, r3, #1
    5b38:	440b      	add	r3, r1
    5b3a:	881b      	ldrh	r3, [r3, #0]
    5b3c:	095b      	lsrs	r3, r3, #5
    5b3e:	b29b      	uxth	r3, r3
    5b40:	4619      	mov	r1, r3
    5b42:	4b72      	ldr	r3, [pc, #456]	; (5d0c <Port_Ipw_Init_UnusedPins+0x26c>)
    5b44:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    5b48:	2101      	movs	r1, #1
    5b4a:	fa01 f202 	lsl.w	r2, r1, r2
    5b4e:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    5b50:	f001 f890 	bl	6c74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5b54:	9b01      	ldr	r3, [sp, #4]
    5b56:	685a      	ldr	r2, [r3, #4]
    5b58:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b5c:	005b      	lsls	r3, r3, #1
    5b5e:	4413      	add	r3, r2
    5b60:	881b      	ldrh	r3, [r3, #0]
    5b62:	095b      	lsrs	r3, r3, #5
    5b64:	b29b      	uxth	r3, r3
    5b66:	461a      	mov	r2, r3
    5b68:	4b68      	ldr	r3, [pc, #416]	; (5d0c <Port_Ipw_Init_UnusedPins+0x26c>)
    5b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5b6e:	6959      	ldr	r1, [r3, #20]
    5b70:	9b01      	ldr	r3, [sp, #4]
    5b72:	685a      	ldr	r2, [r3, #4]
    5b74:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b78:	005b      	lsls	r3, r3, #1
    5b7a:	4413      	add	r3, r2
    5b7c:	881b      	ldrh	r3, [r3, #0]
    5b7e:	f003 031f 	and.w	r3, r3, #31
    5b82:	2201      	movs	r2, #1
    5b84:	409a      	lsls	r2, r3
    5b86:	9b01      	ldr	r3, [sp, #4]
    5b88:	6858      	ldr	r0, [r3, #4]
    5b8a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b8e:	005b      	lsls	r3, r3, #1
    5b90:	4403      	add	r3, r0
    5b92:	881b      	ldrh	r3, [r3, #0]
    5b94:	095b      	lsrs	r3, r3, #5
    5b96:	b29b      	uxth	r3, r3
    5b98:	4618      	mov	r0, r3
    5b9a:	4b5c      	ldr	r3, [pc, #368]	; (5d0c <Port_Ipw_Init_UnusedPins+0x26c>)
    5b9c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5ba0:	430a      	orrs	r2, r1
    5ba2:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    5ba4:	f001 f892 	bl	6ccc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    5ba8:	e086      	b.n	5cb8 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    5baa:	f001 f863 	bl	6c74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    5bae:	9b01      	ldr	r3, [sp, #4]
    5bb0:	685a      	ldr	r2, [r3, #4]
    5bb2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5bb6:	005b      	lsls	r3, r3, #1
    5bb8:	4413      	add	r3, r2
    5bba:	881b      	ldrh	r3, [r3, #0]
    5bbc:	095b      	lsrs	r3, r3, #5
    5bbe:	b29b      	uxth	r3, r3
    5bc0:	461a      	mov	r2, r3
    5bc2:	4b52      	ldr	r3, [pc, #328]	; (5d0c <Port_Ipw_Init_UnusedPins+0x26c>)
    5bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5bc8:	6959      	ldr	r1, [r3, #20]
    5bca:	9b01      	ldr	r3, [sp, #4]
    5bcc:	685a      	ldr	r2, [r3, #4]
    5bce:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5bd2:	005b      	lsls	r3, r3, #1
    5bd4:	4413      	add	r3, r2
    5bd6:	881b      	ldrh	r3, [r3, #0]
    5bd8:	f003 031f 	and.w	r3, r3, #31
    5bdc:	2201      	movs	r2, #1
    5bde:	fa02 f303 	lsl.w	r3, r2, r3
    5be2:	43da      	mvns	r2, r3
    5be4:	9b01      	ldr	r3, [sp, #4]
    5be6:	6858      	ldr	r0, [r3, #4]
    5be8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5bec:	005b      	lsls	r3, r3, #1
    5bee:	4403      	add	r3, r0
    5bf0:	881b      	ldrh	r3, [r3, #0]
    5bf2:	095b      	lsrs	r3, r3, #5
    5bf4:	b29b      	uxth	r3, r3
    5bf6:	4618      	mov	r0, r3
    5bf8:	4b44      	ldr	r3, [pc, #272]	; (5d0c <Port_Ipw_Init_UnusedPins+0x26c>)
    5bfa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5bfe:	400a      	ands	r2, r1
    5c00:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    5c02:	f001 f863 	bl	6ccc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    5c06:	f001 f887 	bl	6d18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5c0a:	9b01      	ldr	r3, [sp, #4]
    5c0c:	685a      	ldr	r2, [r3, #4]
    5c0e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5c12:	005b      	lsls	r3, r3, #1
    5c14:	4413      	add	r3, r2
    5c16:	881b      	ldrh	r3, [r3, #0]
    5c18:	095b      	lsrs	r3, r3, #5
    5c1a:	b29b      	uxth	r3, r3
    5c1c:	461a      	mov	r2, r3
    5c1e:	4b3b      	ldr	r3, [pc, #236]	; (5d0c <Port_Ipw_Init_UnusedPins+0x26c>)
    5c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5c24:	6999      	ldr	r1, [r3, #24]
    5c26:	9b01      	ldr	r3, [sp, #4]
    5c28:	685a      	ldr	r2, [r3, #4]
    5c2a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5c2e:	005b      	lsls	r3, r3, #1
    5c30:	4413      	add	r3, r2
    5c32:	881b      	ldrh	r3, [r3, #0]
    5c34:	f003 031f 	and.w	r3, r3, #31
    5c38:	2201      	movs	r2, #1
    5c3a:	fa02 f303 	lsl.w	r3, r2, r3
    5c3e:	43da      	mvns	r2, r3
    5c40:	9b01      	ldr	r3, [sp, #4]
    5c42:	6858      	ldr	r0, [r3, #4]
    5c44:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5c48:	005b      	lsls	r3, r3, #1
    5c4a:	4403      	add	r3, r0
    5c4c:	881b      	ldrh	r3, [r3, #0]
    5c4e:	095b      	lsrs	r3, r3, #5
    5c50:	b29b      	uxth	r3, r3
    5c52:	4618      	mov	r0, r3
    5c54:	4b2d      	ldr	r3, [pc, #180]	; (5d0c <Port_Ipw_Init_UnusedPins+0x26c>)
    5c56:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5c5a:	400a      	ands	r2, r1
    5c5c:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    5c5e:	9b02      	ldr	r3, [sp, #8]
    5c60:	2b03      	cmp	r3, #3
    5c62:	d127      	bne.n	5cb4 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5c64:	9b01      	ldr	r3, [sp, #4]
    5c66:	685a      	ldr	r2, [r3, #4]
    5c68:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5c6c:	005b      	lsls	r3, r3, #1
    5c6e:	4413      	add	r3, r2
    5c70:	881b      	ldrh	r3, [r3, #0]
    5c72:	095b      	lsrs	r3, r3, #5
    5c74:	b29b      	uxth	r3, r3
    5c76:	461a      	mov	r2, r3
    5c78:	4b24      	ldr	r3, [pc, #144]	; (5d0c <Port_Ipw_Init_UnusedPins+0x26c>)
    5c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5c7e:	6999      	ldr	r1, [r3, #24]
    5c80:	9b01      	ldr	r3, [sp, #4]
    5c82:	685a      	ldr	r2, [r3, #4]
    5c84:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5c88:	005b      	lsls	r3, r3, #1
    5c8a:	4413      	add	r3, r2
    5c8c:	881b      	ldrh	r3, [r3, #0]
    5c8e:	f003 031f 	and.w	r3, r3, #31
    5c92:	2201      	movs	r2, #1
    5c94:	409a      	lsls	r2, r3
    5c96:	9b01      	ldr	r3, [sp, #4]
    5c98:	6858      	ldr	r0, [r3, #4]
    5c9a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5c9e:	005b      	lsls	r3, r3, #1
    5ca0:	4403      	add	r3, r0
    5ca2:	881b      	ldrh	r3, [r3, #0]
    5ca4:	095b      	lsrs	r3, r3, #5
    5ca6:	b29b      	uxth	r3, r3
    5ca8:	4618      	mov	r0, r3
    5caa:	4b18      	ldr	r3, [pc, #96]	; (5d0c <Port_Ipw_Init_UnusedPins+0x26c>)
    5cac:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5cb0:	430a      	orrs	r2, r1
    5cb2:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    5cb4:	f001 f85c 	bl	6d70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    5cb8:	9b01      	ldr	r3, [sp, #4]
    5cba:	685a      	ldr	r2, [r3, #4]
    5cbc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5cc0:	005b      	lsls	r3, r3, #1
    5cc2:	4413      	add	r3, r2
    5cc4:	881b      	ldrh	r3, [r3, #0]
    5cc6:	095b      	lsrs	r3, r3, #5
    5cc8:	b29b      	uxth	r3, r3
    5cca:	461a      	mov	r2, r3
    5ccc:	4b10      	ldr	r3, [pc, #64]	; (5d10 <Port_Ipw_Init_UnusedPins+0x270>)
    5cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5cd2:	9a01      	ldr	r2, [sp, #4]
    5cd4:	6851      	ldr	r1, [r2, #4]
    5cd6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5cda:	0052      	lsls	r2, r2, #1
    5cdc:	440a      	add	r2, r1
    5cde:	8812      	ldrh	r2, [r2, #0]
    5ce0:	f002 021f 	and.w	r2, r2, #31
    5ce4:	9903      	ldr	r1, [sp, #12]
    5ce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    5cea:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5cee:	3301      	adds	r3, #1
    5cf0:	f8ad 3016 	strh.w	r3, [sp, #22]
    5cf4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5cf8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    5cfc:	429a      	cmp	r2, r3
    5cfe:	f4ff aee7 	bcc.w	5ad0 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    5d02:	bf00      	nop
    5d04:	bf00      	nop
    5d06:	b007      	add	sp, #28
    5d08:	f85d fb04 	ldr.w	pc, [sp], #4
    5d0c:	0000803c 	.word	0x0000803c
    5d10:	00008028 	.word	0x00008028

00005d14 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    5d14:	b500      	push	{lr}
    5d16:	b085      	sub	sp, #20
    5d18:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    5d1a:	9b01      	ldr	r3, [sp, #4]
    5d1c:	7c1b      	ldrb	r3, [r3, #16]
    5d1e:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    5d22:	2300      	movs	r3, #0
    5d24:	f8ad 300e 	strh.w	r3, [sp, #14]
    5d28:	e035      	b.n	5d96 <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    5d2a:	9b01      	ldr	r3, [sp, #4]
    5d2c:	695a      	ldr	r2, [r3, #20]
    5d2e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5d32:	00db      	lsls	r3, r3, #3
    5d34:	4413      	add	r3, r2
    5d36:	781b      	ldrb	r3, [r3, #0]
    5d38:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    5d3c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5d40:	4a1f      	ldr	r2, [pc, #124]	; (5dc0 <Port_Ipw_Init+0xac>)
    5d42:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    5d46:	9b01      	ldr	r3, [sp, #4]
    5d48:	695a      	ldr	r2, [r3, #20]
    5d4a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5d4e:	00db      	lsls	r3, r3, #3
    5d50:	4413      	add	r3, r2
    5d52:	4619      	mov	r1, r3
    5d54:	f7ff fe39 	bl	59ca <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    5d58:	f001 f978 	bl	704c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    5d5c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5d60:	4a17      	ldr	r2, [pc, #92]	; (5dc0 <Port_Ipw_Init+0xac>)
    5d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5d66:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    5d6a:	9b01      	ldr	r3, [sp, #4]
    5d6c:	695a      	ldr	r2, [r3, #20]
    5d6e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5d72:	00db      	lsls	r3, r3, #3
    5d74:	4413      	add	r3, r2
    5d76:	685a      	ldr	r2, [r3, #4]
    5d78:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5d7c:	4810      	ldr	r0, [pc, #64]	; (5dc0 <Port_Ipw_Init+0xac>)
    5d7e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    5d82:	430a      	orrs	r2, r1
    5d84:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    5d88:	f001 f98c 	bl	70a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    5d8c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5d90:	3301      	adds	r3, #1
    5d92:	f8ad 300e 	strh.w	r3, [sp, #14]
    5d96:	f89d 300d 	ldrb.w	r3, [sp, #13]
    5d9a:	b29b      	uxth	r3, r3
    5d9c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5da0:	429a      	cmp	r2, r3
    5da2:	d3c2      	bcc.n	5d2a <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    5da4:	9b01      	ldr	r3, [sp, #4]
    5da6:	6a1b      	ldr	r3, [r3, #32]
    5da8:	4619      	mov	r1, r3
    5daa:	2005      	movs	r0, #5
    5dac:	f7ff fd98 	bl	58e0 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    5db0:	9801      	ldr	r0, [sp, #4]
    5db2:	f7ff fe75 	bl	5aa0 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    5db6:	bf00      	nop
    5db8:	b005      	add	sp, #20
    5dba:	f85d fb04 	ldr.w	pc, [sp], #4
    5dbe:	bf00      	nop
    5dc0:	00008028 	.word	0x00008028

00005dc4 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    5dc4:	b500      	push	{lr}
    5dc6:	b085      	sub	sp, #20
    5dc8:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    5dca:	9b01      	ldr	r3, [sp, #4]
    5dcc:	881b      	ldrh	r3, [r3, #0]
    5dce:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    5dd2:	2300      	movs	r3, #0
    5dd4:	f8ad 300e 	strh.w	r3, [sp, #14]
    5dd8:	e0d2      	b.n	5f80 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    5dda:	9b01      	ldr	r3, [sp, #4]
    5ddc:	68d9      	ldr	r1, [r3, #12]
    5dde:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5de2:	4613      	mov	r3, r2
    5de4:	009b      	lsls	r3, r3, #2
    5de6:	4413      	add	r3, r2
    5de8:	009b      	lsls	r3, r3, #2
    5dea:	440b      	add	r3, r1
    5dec:	7c5b      	ldrb	r3, [r3, #17]
    5dee:	f083 0301 	eor.w	r3, r3, #1
    5df2:	b2db      	uxtb	r3, r3
    5df4:	2b00      	cmp	r3, #0
    5df6:	f000 80be 	beq.w	5f76 <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    5dfa:	9b01      	ldr	r3, [sp, #4]
    5dfc:	68d9      	ldr	r1, [r3, #12]
    5dfe:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5e02:	4613      	mov	r3, r2
    5e04:	009b      	lsls	r3, r3, #2
    5e06:	4413      	add	r3, r2
    5e08:	009b      	lsls	r3, r3, #2
    5e0a:	440b      	add	r3, r1
    5e0c:	7c1b      	ldrb	r3, [r3, #16]
    5e0e:	2b00      	cmp	r3, #0
    5e10:	f000 80b1 	beq.w	5f76 <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    5e14:	9b01      	ldr	r3, [sp, #4]
    5e16:	68d9      	ldr	r1, [r3, #12]
    5e18:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5e1c:	4613      	mov	r3, r2
    5e1e:	009b      	lsls	r3, r3, #2
    5e20:	4413      	add	r3, r2
    5e22:	009b      	lsls	r3, r3, #2
    5e24:	440b      	add	r3, r1
    5e26:	881b      	ldrh	r3, [r3, #0]
    5e28:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    5e2c:	9b01      	ldr	r3, [sp, #4]
    5e2e:	68d9      	ldr	r1, [r3, #12]
    5e30:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5e34:	4613      	mov	r3, r2
    5e36:	009b      	lsls	r3, r3, #2
    5e38:	4413      	add	r3, r2
    5e3a:	009b      	lsls	r3, r3, #2
    5e3c:	440b      	add	r3, r1
    5e3e:	68db      	ldr	r3, [r3, #12]
    5e40:	2b02      	cmp	r3, #2
    5e42:	d11d      	bne.n	5e80 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    5e44:	f001 fa4a 	bl	72dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5e48:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5e4c:	095b      	lsrs	r3, r3, #5
    5e4e:	b29b      	uxth	r3, r3
    5e50:	461a      	mov	r2, r3
    5e52:	4b51      	ldr	r3, [pc, #324]	; (5f98 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5e58:	6959      	ldr	r1, [r3, #20]
    5e5a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5e5e:	f003 031f 	and.w	r3, r3, #31
    5e62:	2201      	movs	r2, #1
    5e64:	409a      	lsls	r2, r3
    5e66:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5e6a:	095b      	lsrs	r3, r3, #5
    5e6c:	b29b      	uxth	r3, r3
    5e6e:	4618      	mov	r0, r3
    5e70:	4b49      	ldr	r3, [pc, #292]	; (5f98 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5e72:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5e76:	430a      	orrs	r2, r1
    5e78:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    5e7a:	f001 fa5b 	bl	7334 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    5e7e:	e07a      	b.n	5f76 <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    5e80:	9b01      	ldr	r3, [sp, #4]
    5e82:	68d9      	ldr	r1, [r3, #12]
    5e84:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5e88:	4613      	mov	r3, r2
    5e8a:	009b      	lsls	r3, r3, #2
    5e8c:	4413      	add	r3, r2
    5e8e:	009b      	lsls	r3, r3, #2
    5e90:	440b      	add	r3, r1
    5e92:	68db      	ldr	r3, [r3, #12]
    5e94:	2b01      	cmp	r3, #1
    5e96:	d00b      	beq.n	5eb0 <Port_Ipw_RefreshPortDirection+0xec>
    5e98:	9b01      	ldr	r3, [sp, #4]
    5e9a:	68d9      	ldr	r1, [r3, #12]
    5e9c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5ea0:	4613      	mov	r3, r2
    5ea2:	009b      	lsls	r3, r3, #2
    5ea4:	4413      	add	r3, r2
    5ea6:	009b      	lsls	r3, r3, #2
    5ea8:	440b      	add	r3, r1
    5eaa:	68db      	ldr	r3, [r3, #12]
    5eac:	2b03      	cmp	r3, #3
    5eae:	d162      	bne.n	5f76 <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    5eb0:	f001 fa14 	bl	72dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5eb4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5eb8:	095b      	lsrs	r3, r3, #5
    5eba:	b29b      	uxth	r3, r3
    5ebc:	461a      	mov	r2, r3
    5ebe:	4b36      	ldr	r3, [pc, #216]	; (5f98 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5ec4:	6959      	ldr	r1, [r3, #20]
    5ec6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5eca:	f003 031f 	and.w	r3, r3, #31
    5ece:	2201      	movs	r2, #1
    5ed0:	fa02 f303 	lsl.w	r3, r2, r3
    5ed4:	43da      	mvns	r2, r3
    5ed6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5eda:	095b      	lsrs	r3, r3, #5
    5edc:	b29b      	uxth	r3, r3
    5ede:	4618      	mov	r0, r3
    5ee0:	4b2d      	ldr	r3, [pc, #180]	; (5f98 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5ee2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5ee6:	400a      	ands	r2, r1
    5ee8:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    5eea:	f001 fa23 	bl	7334 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    5eee:	f001 fa47 	bl	7380 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5ef2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5ef6:	095b      	lsrs	r3, r3, #5
    5ef8:	b29b      	uxth	r3, r3
    5efa:	461a      	mov	r2, r3
    5efc:	4b26      	ldr	r3, [pc, #152]	; (5f98 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5f02:	6999      	ldr	r1, [r3, #24]
    5f04:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5f08:	f003 031f 	and.w	r3, r3, #31
    5f0c:	2201      	movs	r2, #1
    5f0e:	fa02 f303 	lsl.w	r3, r2, r3
    5f12:	43da      	mvns	r2, r3
    5f14:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5f18:	095b      	lsrs	r3, r3, #5
    5f1a:	b29b      	uxth	r3, r3
    5f1c:	4618      	mov	r0, r3
    5f1e:	4b1e      	ldr	r3, [pc, #120]	; (5f98 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5f20:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5f24:	400a      	ands	r2, r1
    5f26:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    5f28:	9b01      	ldr	r3, [sp, #4]
    5f2a:	68d9      	ldr	r1, [r3, #12]
    5f2c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5f30:	4613      	mov	r3, r2
    5f32:	009b      	lsls	r3, r3, #2
    5f34:	4413      	add	r3, r2
    5f36:	009b      	lsls	r3, r3, #2
    5f38:	440b      	add	r3, r1
    5f3a:	68db      	ldr	r3, [r3, #12]
    5f3c:	2b03      	cmp	r3, #3
    5f3e:	d118      	bne.n	5f72 <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5f40:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5f44:	095b      	lsrs	r3, r3, #5
    5f46:	b29b      	uxth	r3, r3
    5f48:	461a      	mov	r2, r3
    5f4a:	4b13      	ldr	r3, [pc, #76]	; (5f98 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5f50:	6999      	ldr	r1, [r3, #24]
    5f52:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5f56:	f003 031f 	and.w	r3, r3, #31
    5f5a:	2201      	movs	r2, #1
    5f5c:	409a      	lsls	r2, r3
    5f5e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5f62:	095b      	lsrs	r3, r3, #5
    5f64:	b29b      	uxth	r3, r3
    5f66:	4618      	mov	r0, r3
    5f68:	4b0b      	ldr	r3, [pc, #44]	; (5f98 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5f6a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5f6e:	430a      	orrs	r2, r1
    5f70:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    5f72:	f001 fa31 	bl	73d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    5f76:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5f7a:	3301      	adds	r3, #1
    5f7c:	f8ad 300e 	strh.w	r3, [sp, #14]
    5f80:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5f84:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    5f88:	429a      	cmp	r2, r3
    5f8a:	f4ff af26 	bcc.w	5dda <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    5f8e:	bf00      	nop
    5f90:	bf00      	nop
    5f92:	b005      	add	sp, #20
    5f94:	f85d fb04 	ldr.w	pc, [sp], #4
    5f98:	0000803c 	.word	0x0000803c

00005f9c <Dio_ReadChannel>:
*/
Dio_LevelType Dio_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    5f9c:	b500      	push	{lr}
    5f9e:	b085      	sub	sp, #20
    5fa0:	4603      	mov	r3, r0
    5fa2:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    5fa6:	2300      	movs	r3, #0
    5fa8:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForRead(ChannelId, DIO_READCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_ReadChannel(ChannelId);
    5fac:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5fb0:	4618      	mov	r0, r3
    5fb2:	f000 f871 	bl	6098 <Dio_Ipw_ReadChannel>
    5fb6:	4603      	mov	r3, r0
    5fb8:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return ChannelLevel;
    5fbc:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5fc0:	4618      	mov	r0, r3
    5fc2:	b005      	add	sp, #20
    5fc4:	f85d fb04 	ldr.w	pc, [sp], #4

00005fc8 <Dio_WriteChannel>:
void Dio_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    5fc8:	b500      	push	{lr}
    5fca:	b083      	sub	sp, #12
    5fcc:	4603      	mov	r3, r0
    5fce:	460a      	mov	r2, r1
    5fd0:	f8ad 3006 	strh.w	r3, [sp, #6]
    5fd4:	4613      	mov	r3, r2
    5fd6:	f88d 3005 	strb.w	r3, [sp, #5]
    {
        Valid = Dio_ValidateChannelLevel(Level);
        if ((Std_ReturnType) E_OK == Valid)
        {
#endif
            Dio_Ipw_WriteChannel(ChannelId, Level);
    5fda:	f89d 2005 	ldrb.w	r2, [sp, #5]
    5fde:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5fe2:	4611      	mov	r1, r2
    5fe4:	4618      	mov	r0, r3
    5fe6:	f000 f87d 	bl	60e4 <Dio_Ipw_WriteChannel>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
        }
    }
#endif

}
    5fea:	bf00      	nop
    5fec:	b003      	add	sp, #12
    5fee:	f85d fb04 	ldr.w	pc, [sp], #4

00005ff2 <Dio_FlipChannel>:
*/
Dio_LevelType Dio_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    5ff2:	b500      	push	{lr}
    5ff4:	b085      	sub	sp, #20
    5ff6:	4603      	mov	r3, r0
    5ff8:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    5ffc:	2300      	movs	r3, #0
    5ffe:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForWrite(ChannelId, DIO_FLIPCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_FlipChannel(ChannelId);
    6002:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6006:	4618      	mov	r0, r3
    6008:	f000 f892 	bl	6130 <Dio_Ipw_FlipChannel>
    600c:	4603      	mov	r3, r0
    600e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

   return ChannelLevel;
    6012:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6016:	4618      	mov	r0, r3
    6018:	b005      	add	sp, #20
    601a:	f85d fb04 	ldr.w	pc, [sp], #4

0000601e <Dio_ReadPort>:
*/
Dio_PortLevelType Dio_ReadPort
(
    Dio_PortType PortId
)
{
    601e:	b500      	push	{lr}
    6020:	b085      	sub	sp, #20
    6022:	4603      	mov	r3, r0
    6024:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6028:	2300      	movs	r3, #0
    602a:	9303      	str	r3, [sp, #12]
    Std_ReturnType Valid = Dio_ValidatePortForRead(PortId, DIO_READPORT_ID);

    if ((Std_ReturnType) E_OK == Valid)
    {
#endif
        PortLevel = Dio_Ipw_ReadPort(PortId);
    602c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6030:	4618      	mov	r0, r3
    6032:	f000 f8b3 	bl	619c <Dio_Ipw_ReadPort>
    6036:	9003      	str	r0, [sp, #12]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return PortLevel;
    6038:	9b03      	ldr	r3, [sp, #12]
}
    603a:	4618      	mov	r0, r3
    603c:	b005      	add	sp, #20
    603e:	f85d fb04 	ldr.w	pc, [sp], #4

00006042 <Dio_WritePort>:
void Dio_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    6042:	b500      	push	{lr}
    6044:	b083      	sub	sp, #12
    6046:	4603      	mov	r3, r0
    6048:	9100      	str	r1, [sp, #0]
    604a:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType Valid = Dio_ValidatePortForWrite(PortId, DIO_WRITEPORT_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        Dio_Ipw_WritePort(PortId, Level);
    604e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6052:	9900      	ldr	r1, [sp, #0]
    6054:	4618      	mov	r0, r3
    6056:	f000 f8b9 	bl	61cc <Dio_Ipw_WritePort>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif
}
    605a:	bf00      	nop
    605c:	b003      	add	sp, #12
    605e:	f85d fb04 	ldr.w	pc, [sp], #4

00006062 <Dio_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_ReadChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr
)
{
    6062:	b500      	push	{lr}
    6064:	b085      	sub	sp, #20
    6066:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6068:	2300      	movs	r3, #0
    606a:	9303      	str	r3, [sp, #12]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            PortLevel = Dio_Ipw_ReadChannelGroup(ChannelGroupIdPtr);
    606c:	9801      	ldr	r0, [sp, #4]
    606e:	f000 f8c5 	bl	61fc <Dio_Ipw_ReadChannelGroup>
    6072:	9003      	str	r0, [sp, #12]
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */

    return PortLevel;
    6074:	9b03      	ldr	r3, [sp, #12]
}
    6076:	4618      	mov	r0, r3
    6078:	b005      	add	sp, #20
    607a:	f85d fb04 	ldr.w	pc, [sp], #4

0000607e <Dio_WriteChannelGroup>:
void Dio_WriteChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr,
    Dio_PortLevelType Level
)
{
    607e:	b500      	push	{lr}
    6080:	b083      	sub	sp, #12
    6082:	9001      	str	r0, [sp, #4]
    6084:	9100      	str	r1, [sp, #0]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            Dio_Ipw_WriteChannelGroup(ChannelGroupIdPtr, Level);
    6086:	9900      	ldr	r1, [sp, #0]
    6088:	9801      	ldr	r0, [sp, #4]
    608a:	f000 f8d7 	bl	623c <Dio_Ipw_WriteChannelGroup>
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNELGROUP_ID, DIO_E_PARAM_CONFIG);
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */
}
    608e:	bf00      	nop
    6090:	b003      	add	sp, #12
    6092:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00006098 <Dio_Ipw_ReadChannel>:
*/
Dio_LevelType Dio_Ipw_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    6098:	b500      	push	{lr}
    609a:	b087      	sub	sp, #28
    609c:	4603      	mov	r3, r0
    609e:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType) STD_LOW;
    60a2:	2300      	movs	r3, #0
    60a4:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    60a8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    60ac:	095b      	lsrs	r3, r3, #5
    60ae:	b29b      	uxth	r3, r3
    60b0:	9304      	str	r3, [sp, #16]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    60b2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    60b6:	f003 031f 	and.w	r3, r3, #31
    60ba:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    60bc:	4a08      	ldr	r2, [pc, #32]	; (60e0 <Dio_Ipw_ReadChannel+0x48>)
    60be:	9b04      	ldr	r3, [sp, #16]
    60c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    60c4:	9302      	str	r3, [sp, #8]

    ChannelLevel = Gpio_Dio_Ip_ReadPin(GpioBase, u32PinIndex);
    60c6:	9903      	ldr	r1, [sp, #12]
    60c8:	9802      	ldr	r0, [sp, #8]
    60ca:	f000 f940 	bl	634e <Gpio_Dio_Ip_ReadPin>
    60ce:	4603      	mov	r3, r0
    60d0:	f88d 3017 	strb.w	r3, [sp, #23]
    return ChannelLevel;
    60d4:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    60d8:	4618      	mov	r0, r3
    60da:	b007      	add	sp, #28
    60dc:	f85d fb04 	ldr.w	pc, [sp], #4
    60e0:	1fff8b24 	.word	0x1fff8b24

000060e4 <Dio_Ipw_WriteChannel>:
void Dio_Ipw_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    60e4:	b500      	push	{lr}
    60e6:	b087      	sub	sp, #28
    60e8:	4603      	mov	r3, r0
    60ea:	460a      	mov	r2, r1
    60ec:	f8ad 3006 	strh.w	r3, [sp, #6]
    60f0:	4613      	mov	r3, r2
    60f2:	f88d 3005 	strb.w	r3, [sp, #5]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    60f6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    60fa:	095b      	lsrs	r3, r3, #5
    60fc:	b29b      	uxth	r3, r3
    60fe:	9305      	str	r3, [sp, #20]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    6100:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6104:	f003 031f 	and.w	r3, r3, #31
    6108:	9304      	str	r3, [sp, #16]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    610a:	4a08      	ldr	r2, [pc, #32]	; (612c <Dio_Ipw_WriteChannel+0x48>)
    610c:	9b05      	ldr	r3, [sp, #20]
    610e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6112:	9303      	str	r3, [sp, #12]

    Gpio_Dio_Ip_WritePin(GpioBase, u32PinIndex, Level);
    6114:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6118:	461a      	mov	r2, r3
    611a:	9904      	ldr	r1, [sp, #16]
    611c:	9803      	ldr	r0, [sp, #12]
    611e:	f000 f8b7 	bl	6290 <Gpio_Dio_Ip_WritePin>
}
    6122:	bf00      	nop
    6124:	b007      	add	sp, #28
    6126:	f85d fb04 	ldr.w	pc, [sp], #4
    612a:	bf00      	nop
    612c:	1fff8b24 	.word	0x1fff8b24

00006130 <Dio_Ipw_FlipChannel>:
*/
Dio_LevelType Dio_Ipw_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    6130:	b500      	push	{lr}
    6132:	b089      	sub	sp, #36	; 0x24
    6134:	4603      	mov	r3, r0
    6136:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    613a:	2300      	movs	r3, #0
    613c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;
    uint32 u32PortOutPutLevel;
    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    6140:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6144:	095b      	lsrs	r3, r3, #5
    6146:	b29b      	uxth	r3, r3
    6148:	9306      	str	r3, [sp, #24]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    614a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    614e:	f003 031f 	and.w	r3, r3, #31
    6152:	9305      	str	r3, [sp, #20]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    6154:	4a10      	ldr	r2, [pc, #64]	; (6198 <Dio_Ipw_FlipChannel+0x68>)
    6156:	9b06      	ldr	r3, [sp, #24]
    6158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    615c:	9304      	str	r3, [sp, #16]

    Gpio_Dio_Ip_TogglePins(GpioBase, ((uint32)1U << u32PinIndex));
    615e:	2201      	movs	r2, #1
    6160:	9b05      	ldr	r3, [sp, #20]
    6162:	fa02 f303 	lsl.w	r3, r2, r3
    6166:	4619      	mov	r1, r3
    6168:	9804      	ldr	r0, [sp, #16]
    616a:	f000 f8dc 	bl	6326 <Gpio_Dio_Ip_TogglePins>

    u32PortOutPutLevel = Gpio_Dio_Ip_GetPinsOutput(GpioBase);
    616e:	9804      	ldr	r0, [sp, #16]
    6170:	f000 f8bc 	bl	62ec <Gpio_Dio_Ip_GetPinsOutput>
    6174:	9003      	str	r0, [sp, #12]
    ChannelLevel = (Dio_LevelType)((u32PortOutPutLevel & ((uint32)1U << u32PinIndex)) >> u32PinIndex);
    6176:	2201      	movs	r2, #1
    6178:	9b05      	ldr	r3, [sp, #20]
    617a:	409a      	lsls	r2, r3
    617c:	9b03      	ldr	r3, [sp, #12]
    617e:	401a      	ands	r2, r3
    6180:	9b05      	ldr	r3, [sp, #20]
    6182:	fa22 f303 	lsr.w	r3, r2, r3
    6186:	f88d 301f 	strb.w	r3, [sp, #31]

    return ChannelLevel;
    618a:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    618e:	4618      	mov	r0, r3
    6190:	b009      	add	sp, #36	; 0x24
    6192:	f85d fb04 	ldr.w	pc, [sp], #4
    6196:	bf00      	nop
    6198:	1fff8b24 	.word	0x1fff8b24

0000619c <Dio_Ipw_ReadPort>:
*/
Dio_PortLevelType Dio_Ipw_ReadPort
(
    Dio_PortType PortId
)
{
    619c:	b500      	push	{lr}
    619e:	b085      	sub	sp, #20
    61a0:	4603      	mov	r3, r0
    61a2:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    61a6:	2300      	movs	r3, #0
    61a8:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    61aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    61ae:	4a06      	ldr	r2, [pc, #24]	; (61c8 <Dio_Ipw_ReadPort+0x2c>)
    61b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    61b4:	9302      	str	r3, [sp, #8]

    PortLevel = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    61b6:	9802      	ldr	r0, [sp, #8]
    61b8:	f000 f8be 	bl	6338 <Gpio_Dio_Ip_ReadPins>
    61bc:	9003      	str	r0, [sp, #12]
#endif
#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#endif

    return PortLevel;
    61be:	9b03      	ldr	r3, [sp, #12]
}
    61c0:	4618      	mov	r0, r3
    61c2:	b005      	add	sp, #20
    61c4:	f85d fb04 	ldr.w	pc, [sp], #4
    61c8:	1fff8b24 	.word	0x1fff8b24

000061cc <Dio_Ipw_WritePort>:
void Dio_Ipw_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    61cc:	b500      	push	{lr}
    61ce:	b085      	sub	sp, #20
    61d0:	4603      	mov	r3, r0
    61d2:	9100      	str	r1, [sp, #0]
    61d4:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType CrtLevel = Level;
    61d8:	9b00      	ldr	r3, [sp, #0]
    61da:	9303      	str	r3, [sp, #12]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    61dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    61e0:	4a05      	ldr	r2, [pc, #20]	; (61f8 <Dio_Ipw_WritePort+0x2c>)
    61e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    61e6:	9302      	str	r3, [sp, #8]

#if (STD_ON == DIO_REVERSEPORTBITS)
    CrtLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(CrtLevel));
#endif /* STD_ON == DIO_REVERSEPORTBITS */
    Gpio_Dio_Ip_WritePins(GpioBase, CrtLevel);
    61e8:	9903      	ldr	r1, [sp, #12]
    61ea:	9802      	ldr	r0, [sp, #8]
    61ec:	f000 f875 	bl	62da <Gpio_Dio_Ip_WritePins>
}
    61f0:	bf00      	nop
    61f2:	b005      	add	sp, #20
    61f4:	f85d fb04 	ldr.w	pc, [sp], #4
    61f8:	1fff8b24 	.word	0x1fff8b24

000061fc <Dio_Ipw_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_Ipw_ReadChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr
)
{
    61fc:	b500      	push	{lr}
    61fe:	b087      	sub	sp, #28
    6200:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6202:	2300      	movs	r3, #0
    6204:	9305      	str	r3, [sp, #20]
    Dio_PortLevelType pinsValue;
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    6206:	9b01      	ldr	r3, [sp, #4]
    6208:	781b      	ldrb	r3, [r3, #0]
    620a:	461a      	mov	r2, r3
    620c:	4b0a      	ldr	r3, [pc, #40]	; (6238 <Dio_Ipw_ReadChannelGroup+0x3c>)
    620e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6212:	9304      	str	r3, [sp, #16]

    pinsValue = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    6214:	9804      	ldr	r0, [sp, #16]
    6216:	f000 f88f 	bl	6338 <Gpio_Dio_Ip_ReadPins>
    621a:	9003      	str	r0, [sp, #12]

#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) << (pChannelGroupIdPtr->u8offset));
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#else
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) >> (pChannelGroupIdPtr->u8offset));
    621c:	9b01      	ldr	r3, [sp, #4]
    621e:	685a      	ldr	r2, [r3, #4]
    6220:	9b03      	ldr	r3, [sp, #12]
    6222:	4013      	ands	r3, r2
    6224:	9a01      	ldr	r2, [sp, #4]
    6226:	7852      	ldrb	r2, [r2, #1]
    6228:	40d3      	lsrs	r3, r2
    622a:	9305      	str	r3, [sp, #20]
#endif

    return PortLevel;
    622c:	9b05      	ldr	r3, [sp, #20]
}
    622e:	4618      	mov	r0, r3
    6230:	b007      	add	sp, #28
    6232:	f85d fb04 	ldr.w	pc, [sp], #4
    6236:	bf00      	nop
    6238:	1fff8b24 	.word	0x1fff8b24

0000623c <Dio_Ipw_WriteChannelGroup>:
void Dio_Ipw_WriteChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr,
    Dio_PortLevelType                 Level
)
{
    623c:	b500      	push	{lr}
    623e:	b087      	sub	sp, #28
    6240:	9001      	str	r0, [sp, #4]
    6242:	9100      	str	r1, [sp, #0]
    Dio_PortLevelType ValueSet;
    Dio_PortLevelType ValueClear;

    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    6244:	9b01      	ldr	r3, [sp, #4]
    6246:	781b      	ldrb	r3, [r3, #0]
    6248:	461a      	mov	r2, r3
    624a:	4b10      	ldr	r3, [pc, #64]	; (628c <Dio_Ipw_WriteChannelGroup+0x50>)
    624c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6250:	9305      	str	r3, [sp, #20]

#if (STD_ON == DIO_REVERSEPORTBITS)
    ValueSet = (((Dio_PortLevelType)(Dio_Ipw_ReverseBits(Level)) >> (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
#else
    ValueSet = (((Dio_PortLevelType)(Level) << (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
    6252:	9b01      	ldr	r3, [sp, #4]
    6254:	785b      	ldrb	r3, [r3, #1]
    6256:	461a      	mov	r2, r3
    6258:	9b00      	ldr	r3, [sp, #0]
    625a:	fa03 f202 	lsl.w	r2, r3, r2
    625e:	9b01      	ldr	r3, [sp, #4]
    6260:	685b      	ldr	r3, [r3, #4]
    6262:	4013      	ands	r3, r2
    6264:	9304      	str	r3, [sp, #16]
#endif

    Gpio_Dio_Ip_SetPins(GpioBase, ValueSet);
    6266:	9904      	ldr	r1, [sp, #16]
    6268:	9805      	ldr	r0, [sp, #20]
    626a:	f000 f84a 	bl	6302 <Gpio_Dio_Ip_SetPins>
    ValueClear = (~ValueSet) & pChannelGroupIdPtr->mask;
    626e:	9b04      	ldr	r3, [sp, #16]
    6270:	43da      	mvns	r2, r3
    6272:	9b01      	ldr	r3, [sp, #4]
    6274:	685b      	ldr	r3, [r3, #4]
    6276:	4013      	ands	r3, r2
    6278:	9303      	str	r3, [sp, #12]
    Gpio_Dio_Ip_ClearPins(GpioBase, ValueClear);
    627a:	9903      	ldr	r1, [sp, #12]
    627c:	9805      	ldr	r0, [sp, #20]
    627e:	f000 f849 	bl	6314 <Gpio_Dio_Ip_ClearPins>

}
    6282:	bf00      	nop
    6284:	b007      	add	sp, #28
    6286:	f85d fb04 	ldr.w	pc, [sp], #4
    628a:	bf00      	nop
    628c:	1fff8b24 	.word	0x1fff8b24

00006290 <Gpio_Dio_Ip_WritePin>:
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pin,
    Gpio_Dio_Ip_PinsLevelType value
)
{
    6290:	b500      	push	{lr}
    6292:	b087      	sub	sp, #28
    6294:	9003      	str	r0, [sp, #12]
    6296:	9102      	str	r1, [sp, #8]
    6298:	4613      	mov	r3, r2
    629a:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Enter critical region */
    SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00();
    629e:	f000 f86d 	bl	637c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>
    Gpio_Dio_Ip_PinsChannelType pinsValues = (Gpio_Dio_Ip_PinsChannelType)base->PDOR;
    62a2:	9b03      	ldr	r3, [sp, #12]
    62a4:	681b      	ldr	r3, [r3, #0]
    62a6:	9305      	str	r3, [sp, #20]
    pinsValues &= (Gpio_Dio_Ip_PinsChannelType)(~((Gpio_Dio_Ip_PinsChannelType)1U << pin));
    62a8:	2201      	movs	r2, #1
    62aa:	9b02      	ldr	r3, [sp, #8]
    62ac:	fa02 f303 	lsl.w	r3, r2, r3
    62b0:	43db      	mvns	r3, r3
    62b2:	9a05      	ldr	r2, [sp, #20]
    62b4:	4013      	ands	r3, r2
    62b6:	9305      	str	r3, [sp, #20]
    pinsValues |= (Gpio_Dio_Ip_PinsChannelType)((Gpio_Dio_Ip_PinsChannelType)value << pin);
    62b8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    62bc:	9b02      	ldr	r3, [sp, #8]
    62be:	fa02 f303 	lsl.w	r3, r2, r3
    62c2:	9a05      	ldr	r2, [sp, #20]
    62c4:	4313      	orrs	r3, r2
    62c6:	9305      	str	r3, [sp, #20]
    base->PDOR = GPIO_PDOR_PDO(pinsValues);
    62c8:	9b03      	ldr	r3, [sp, #12]
    62ca:	9a05      	ldr	r2, [sp, #20]
    62cc:	601a      	str	r2, [r3, #0]
    /* Exit critical region */
    SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00();
    62ce:	f000 f881 	bl	63d4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>
}
    62d2:	bf00      	nop
    62d4:	b007      	add	sp, #28
    62d6:	f85d fb04 	ldr.w	pc, [sp], #4

000062da <Gpio_Dio_Ip_WritePins>:
void Gpio_Dio_Ip_WritePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    62da:	b082      	sub	sp, #8
    62dc:	9001      	str	r0, [sp, #4]
    62de:	9100      	str	r1, [sp, #0]
    base->PDOR = GPIO_PDOR_PDO(pins);
    62e0:	9b01      	ldr	r3, [sp, #4]
    62e2:	9a00      	ldr	r2, [sp, #0]
    62e4:	601a      	str	r2, [r3, #0]
}
    62e6:	bf00      	nop
    62e8:	b002      	add	sp, #8
    62ea:	4770      	bx	lr

000062ec <Gpio_Dio_Ip_GetPinsOutput>:
 * that are configured as output will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_GetPinsOutput_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_GetPinsOutput(const GPIO_Type * const base)
{
    62ec:	b084      	sub	sp, #16
    62ee:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    62f0:	2300      	movs	r3, #0
    62f2:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDOR);
    62f4:	9b01      	ldr	r3, [sp, #4]
    62f6:	681b      	ldr	r3, [r3, #0]
    62f8:	9303      	str	r3, [sp, #12]
    return returnValue;
    62fa:	9b03      	ldr	r3, [sp, #12]
}
    62fc:	4618      	mov	r0, r3
    62fe:	b004      	add	sp, #16
    6300:	4770      	bx	lr

00006302 <Gpio_Dio_Ip_SetPins>:
void Gpio_Dio_Ip_SetPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6302:	b082      	sub	sp, #8
    6304:	9001      	str	r0, [sp, #4]
    6306:	9100      	str	r1, [sp, #0]
    base->PSOR = GPIO_PSOR_PTSO(pins);
    6308:	9b01      	ldr	r3, [sp, #4]
    630a:	9a00      	ldr	r2, [sp, #0]
    630c:	605a      	str	r2, [r3, #4]
}
    630e:	bf00      	nop
    6310:	b002      	add	sp, #8
    6312:	4770      	bx	lr

00006314 <Gpio_Dio_Ip_ClearPins>:
void Gpio_Dio_Ip_ClearPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6314:	b082      	sub	sp, #8
    6316:	9001      	str	r0, [sp, #4]
    6318:	9100      	str	r1, [sp, #0]
    base->PCOR = GPIO_PCOR_PTCO(pins);
    631a:	9b01      	ldr	r3, [sp, #4]
    631c:	9a00      	ldr	r2, [sp, #0]
    631e:	609a      	str	r2, [r3, #8]
}
    6320:	bf00      	nop
    6322:	b002      	add	sp, #8
    6324:	4770      	bx	lr

00006326 <Gpio_Dio_Ip_TogglePins>:
void Gpio_Dio_Ip_TogglePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    6326:	b082      	sub	sp, #8
    6328:	9001      	str	r0, [sp, #4]
    632a:	9100      	str	r1, [sp, #0]
    base->PTOR = GPIO_PTOR_PTTO(pins);
    632c:	9b01      	ldr	r3, [sp, #4]
    632e:	9a00      	ldr	r2, [sp, #0]
    6330:	60da      	str	r2, [r3, #12]
}
    6332:	bf00      	nop
    6334:	b002      	add	sp, #8
    6336:	4770      	bx	lr

00006338 <Gpio_Dio_Ip_ReadPins>:
 * configured as input will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_ReadPins_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_ReadPins(const GPIO_Type * const base)
{
    6338:	b084      	sub	sp, #16
    633a:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    633c:	2300      	movs	r3, #0
    633e:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDIR);
    6340:	9b01      	ldr	r3, [sp, #4]
    6342:	691b      	ldr	r3, [r3, #16]
    6344:	9303      	str	r3, [sp, #12]
    return returnValue;
    6346:	9b03      	ldr	r3, [sp, #12]
}
    6348:	4618      	mov	r0, r3
    634a:	b004      	add	sp, #16
    634c:	4770      	bx	lr

0000634e <Gpio_Dio_Ip_ReadPin>:
 * configured as input will have meaningful value.
 *
 * @implements    Gpio_Dio_Ip_ReadPin_Activity
 */
Gpio_Dio_Ip_PinsLevelType Gpio_Dio_Ip_ReadPin(const GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pin)
{
    634e:	b084      	sub	sp, #16
    6350:	9001      	str	r0, [sp, #4]
    6352:	9100      	str	r1, [sp, #0]
    Gpio_Dio_Ip_PinsLevelType returnValue = 0U;
    6354:	2300      	movs	r3, #0
    6356:	f88d 300f 	strb.w	r3, [sp, #15]
    returnValue  = (Gpio_Dio_Ip_PinsLevelType)(((base->PDIR)&((uint32)1<<pin))>>(pin));
    635a:	9b01      	ldr	r3, [sp, #4]
    635c:	691a      	ldr	r2, [r3, #16]
    635e:	2101      	movs	r1, #1
    6360:	9b00      	ldr	r3, [sp, #0]
    6362:	fa01 f303 	lsl.w	r3, r1, r3
    6366:	401a      	ands	r2, r3
    6368:	9b00      	ldr	r3, [sp, #0]
    636a:	fa22 f303 	lsr.w	r3, r2, r3
    636e:	f88d 300f 	strb.w	r3, [sp, #15]

    return returnValue;
    6372:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6376:	4618      	mov	r0, r3
    6378:	b004      	add	sp, #16
    637a:	4770      	bx	lr

0000637c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    637c:	b500      	push	{lr}
    637e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6380:	f7fa fea0 	bl	10c4 <Sys_GetCoreID>
    6384:	4603      	mov	r3, r0
    6386:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId])
    6388:	4a10      	ldr	r2, [pc, #64]	; (63cc <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    638a:	9b01      	ldr	r3, [sp, #4]
    638c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6390:	2b00      	cmp	r3, #0
    6392:	d10d      	bne.n	63b0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6394:	f7fa fa98 	bl	8c8 <Dio_schm_read_msr>
    6398:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    639a:	9b00      	ldr	r3, [sp, #0]
    639c:	f003 0301 	and.w	r3, r3, #1
    63a0:	2b00      	cmp	r3, #0
    63a2:	d100      	bne.n	63a6 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    63a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    63a6:	490a      	ldr	r1, [pc, #40]	; (63d0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x54>)
    63a8:	9b01      	ldr	r3, [sp, #4]
    63aa:	9a00      	ldr	r2, [sp, #0]
    63ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]++;
    63b0:	4a06      	ldr	r2, [pc, #24]	; (63cc <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    63b2:	9b01      	ldr	r3, [sp, #4]
    63b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    63b8:	1c5a      	adds	r2, r3, #1
    63ba:	4904      	ldr	r1, [pc, #16]	; (63cc <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    63bc:	9b01      	ldr	r3, [sp, #4]
    63be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    63c2:	bf00      	nop
    63c4:	b003      	add	sp, #12
    63c6:	f85d fb04 	ldr.w	pc, [sp], #4
    63ca:	bf00      	nop
    63cc:	1fff8d14 	.word	0x1fff8d14
    63d0:	1fff8d10 	.word	0x1fff8d10

000063d4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    63d4:	b500      	push	{lr}
    63d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    63d8:	f7fa fe74 	bl	10c4 <Sys_GetCoreID>
    63dc:	4603      	mov	r3, r0
    63de:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]--;
    63e0:	4a0d      	ldr	r2, [pc, #52]	; (6418 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    63e2:	9b01      	ldr	r3, [sp, #4]
    63e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    63e8:	1e5a      	subs	r2, r3, #1
    63ea:	490b      	ldr	r1, [pc, #44]	; (6418 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    63ec:	9b01      	ldr	r3, [sp, #4]
    63ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    63f2:	4a0a      	ldr	r2, [pc, #40]	; (641c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x48>)
    63f4:	9b01      	ldr	r3, [sp, #4]
    63f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    63fa:	f003 0301 	and.w	r3, r3, #1
    63fe:	2b00      	cmp	r3, #0
    6400:	d106      	bne.n	6410 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    6402:	4a05      	ldr	r2, [pc, #20]	; (6418 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    6404:	9b01      	ldr	r3, [sp, #4]
    6406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    640a:	2b00      	cmp	r3, #0
    640c:	d100      	bne.n	6410 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    640e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6410:	bf00      	nop
    6412:	b003      	add	sp, #12
    6414:	f85d fb04 	ldr.w	pc, [sp], #4
    6418:	1fff8d14 	.word	0x1fff8d14
    641c:	1fff8d10 	.word	0x1fff8d10

00006420 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    6420:	b500      	push	{lr}
    6422:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6424:	f7fa fe4e 	bl	10c4 <Sys_GetCoreID>
    6428:	4603      	mov	r3, r0
    642a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId])
    642c:	4a10      	ldr	r2, [pc, #64]	; (6470 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    642e:	9b01      	ldr	r3, [sp, #4]
    6430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6434:	2b00      	cmp	r3, #0
    6436:	d10d      	bne.n	6454 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6438:	f7fa fa46 	bl	8c8 <Dio_schm_read_msr>
    643c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    643e:	9b00      	ldr	r3, [sp, #0]
    6440:	f003 0301 	and.w	r3, r3, #1
    6444:	2b00      	cmp	r3, #0
    6446:	d100      	bne.n	644a <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6448:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    644a:	490a      	ldr	r1, [pc, #40]	; (6474 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x54>)
    644c:	9b01      	ldr	r3, [sp, #4]
    644e:	9a00      	ldr	r2, [sp, #0]
    6450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]++;
    6454:	4a06      	ldr	r2, [pc, #24]	; (6470 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    6456:	9b01      	ldr	r3, [sp, #4]
    6458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    645c:	1c5a      	adds	r2, r3, #1
    645e:	4904      	ldr	r1, [pc, #16]	; (6470 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    6460:	9b01      	ldr	r3, [sp, #4]
    6462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6466:	bf00      	nop
    6468:	b003      	add	sp, #12
    646a:	f85d fb04 	ldr.w	pc, [sp], #4
    646e:	bf00      	nop
    6470:	1fff8d1c 	.word	0x1fff8d1c
    6474:	1fff8d18 	.word	0x1fff8d18

00006478 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    6478:	b500      	push	{lr}
    647a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    647c:	f7fa fe22 	bl	10c4 <Sys_GetCoreID>
    6480:	4603      	mov	r3, r0
    6482:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]--;
    6484:	4a0d      	ldr	r2, [pc, #52]	; (64bc <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    6486:	9b01      	ldr	r3, [sp, #4]
    6488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    648c:	1e5a      	subs	r2, r3, #1
    648e:	490b      	ldr	r1, [pc, #44]	; (64bc <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    6490:	9b01      	ldr	r3, [sp, #4]
    6492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    6496:	4a0a      	ldr	r2, [pc, #40]	; (64c0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x48>)
    6498:	9b01      	ldr	r3, [sp, #4]
    649a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    649e:	f003 0301 	and.w	r3, r3, #1
    64a2:	2b00      	cmp	r3, #0
    64a4:	d106      	bne.n	64b4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    64a6:	4a05      	ldr	r2, [pc, #20]	; (64bc <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    64a8:	9b01      	ldr	r3, [sp, #4]
    64aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    64ae:	2b00      	cmp	r3, #0
    64b0:	d100      	bne.n	64b4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    64b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    64b4:	bf00      	nop
    64b6:	b003      	add	sp, #12
    64b8:	f85d fb04 	ldr.w	pc, [sp], #4
    64bc:	1fff8d1c 	.word	0x1fff8d1c
    64c0:	1fff8d18 	.word	0x1fff8d18

000064c4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    64c4:	b500      	push	{lr}
    64c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    64c8:	f7fa fdfc 	bl	10c4 <Sys_GetCoreID>
    64cc:	4603      	mov	r3, r0
    64ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    64d0:	4a10      	ldr	r2, [pc, #64]	; (6514 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    64d2:	9b01      	ldr	r3, [sp, #4]
    64d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    64d8:	2b00      	cmp	r3, #0
    64da:	d10d      	bne.n	64f8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    64dc:	f7fa f9fd 	bl	8da <Mcu_schm_read_msr>
    64e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    64e2:	9b00      	ldr	r3, [sp, #0]
    64e4:	f003 0301 	and.w	r3, r3, #1
    64e8:	2b00      	cmp	r3, #0
    64ea:	d100      	bne.n	64ee <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    64ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    64ee:	490a      	ldr	r1, [pc, #40]	; (6518 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    64f0:	9b01      	ldr	r3, [sp, #4]
    64f2:	9a00      	ldr	r2, [sp, #0]
    64f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    64f8:	4a06      	ldr	r2, [pc, #24]	; (6514 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    64fa:	9b01      	ldr	r3, [sp, #4]
    64fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6500:	1c5a      	adds	r2, r3, #1
    6502:	4904      	ldr	r1, [pc, #16]	; (6514 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    6504:	9b01      	ldr	r3, [sp, #4]
    6506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    650a:	bf00      	nop
    650c:	b003      	add	sp, #12
    650e:	f85d fb04 	ldr.w	pc, [sp], #4
    6512:	bf00      	nop
    6514:	1fff8d24 	.word	0x1fff8d24
    6518:	1fff8d20 	.word	0x1fff8d20

0000651c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    651c:	b500      	push	{lr}
    651e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6520:	f7fa fdd0 	bl	10c4 <Sys_GetCoreID>
    6524:	4603      	mov	r3, r0
    6526:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    6528:	4a0d      	ldr	r2, [pc, #52]	; (6560 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    652a:	9b01      	ldr	r3, [sp, #4]
    652c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6530:	1e5a      	subs	r2, r3, #1
    6532:	490b      	ldr	r1, [pc, #44]	; (6560 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    6534:	9b01      	ldr	r3, [sp, #4]
    6536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    653a:	4a0a      	ldr	r2, [pc, #40]	; (6564 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    653c:	9b01      	ldr	r3, [sp, #4]
    653e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6542:	f003 0301 	and.w	r3, r3, #1
    6546:	2b00      	cmp	r3, #0
    6548:	d106      	bne.n	6558 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    654a:	4a05      	ldr	r2, [pc, #20]	; (6560 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    654c:	9b01      	ldr	r3, [sp, #4]
    654e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6552:	2b00      	cmp	r3, #0
    6554:	d100      	bne.n	6558 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6556:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6558:	bf00      	nop
    655a:	b003      	add	sp, #12
    655c:	f85d fb04 	ldr.w	pc, [sp], #4
    6560:	1fff8d24 	.word	0x1fff8d24
    6564:	1fff8d20 	.word	0x1fff8d20

00006568 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    6568:	b500      	push	{lr}
    656a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    656c:	f7fa fdaa 	bl	10c4 <Sys_GetCoreID>
    6570:	4603      	mov	r3, r0
    6572:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    6574:	4a10      	ldr	r2, [pc, #64]	; (65b8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    6576:	9b01      	ldr	r3, [sp, #4]
    6578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    657c:	2b00      	cmp	r3, #0
    657e:	d10d      	bne.n	659c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6580:	f7fa f9ab 	bl	8da <Mcu_schm_read_msr>
    6584:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6586:	9b00      	ldr	r3, [sp, #0]
    6588:	f003 0301 	and.w	r3, r3, #1
    658c:	2b00      	cmp	r3, #0
    658e:	d100      	bne.n	6592 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6590:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    6592:	490a      	ldr	r1, [pc, #40]	; (65bc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    6594:	9b01      	ldr	r3, [sp, #4]
    6596:	9a00      	ldr	r2, [sp, #0]
    6598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    659c:	4a06      	ldr	r2, [pc, #24]	; (65b8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    659e:	9b01      	ldr	r3, [sp, #4]
    65a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    65a4:	1c5a      	adds	r2, r3, #1
    65a6:	4904      	ldr	r1, [pc, #16]	; (65b8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    65a8:	9b01      	ldr	r3, [sp, #4]
    65aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    65ae:	bf00      	nop
    65b0:	b003      	add	sp, #12
    65b2:	f85d fb04 	ldr.w	pc, [sp], #4
    65b6:	bf00      	nop
    65b8:	1fff8d2c 	.word	0x1fff8d2c
    65bc:	1fff8d28 	.word	0x1fff8d28

000065c0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    65c0:	b500      	push	{lr}
    65c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    65c4:	f7fa fd7e 	bl	10c4 <Sys_GetCoreID>
    65c8:	4603      	mov	r3, r0
    65ca:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    65cc:	4a0d      	ldr	r2, [pc, #52]	; (6604 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    65ce:	9b01      	ldr	r3, [sp, #4]
    65d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    65d4:	1e5a      	subs	r2, r3, #1
    65d6:	490b      	ldr	r1, [pc, #44]	; (6604 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    65d8:	9b01      	ldr	r3, [sp, #4]
    65da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    65de:	4a0a      	ldr	r2, [pc, #40]	; (6608 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    65e0:	9b01      	ldr	r3, [sp, #4]
    65e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    65e6:	f003 0301 	and.w	r3, r3, #1
    65ea:	2b00      	cmp	r3, #0
    65ec:	d106      	bne.n	65fc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    65ee:	4a05      	ldr	r2, [pc, #20]	; (6604 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    65f0:	9b01      	ldr	r3, [sp, #4]
    65f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    65f6:	2b00      	cmp	r3, #0
    65f8:	d100      	bne.n	65fc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    65fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    65fc:	bf00      	nop
    65fe:	b003      	add	sp, #12
    6600:	f85d fb04 	ldr.w	pc, [sp], #4
    6604:	1fff8d2c 	.word	0x1fff8d2c
    6608:	1fff8d28 	.word	0x1fff8d28

0000660c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    660c:	b500      	push	{lr}
    660e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6610:	f7fa fd58 	bl	10c4 <Sys_GetCoreID>
    6614:	4603      	mov	r3, r0
    6616:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    6618:	4a10      	ldr	r2, [pc, #64]	; (665c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    661a:	9b01      	ldr	r3, [sp, #4]
    661c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6620:	2b00      	cmp	r3, #0
    6622:	d10d      	bne.n	6640 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6624:	f7fa f959 	bl	8da <Mcu_schm_read_msr>
    6628:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    662a:	9b00      	ldr	r3, [sp, #0]
    662c:	f003 0301 	and.w	r3, r3, #1
    6630:	2b00      	cmp	r3, #0
    6632:	d100      	bne.n	6636 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6634:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    6636:	490a      	ldr	r1, [pc, #40]	; (6660 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    6638:	9b01      	ldr	r3, [sp, #4]
    663a:	9a00      	ldr	r2, [sp, #0]
    663c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    6640:	4a06      	ldr	r2, [pc, #24]	; (665c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    6642:	9b01      	ldr	r3, [sp, #4]
    6644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6648:	1c5a      	adds	r2, r3, #1
    664a:	4904      	ldr	r1, [pc, #16]	; (665c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    664c:	9b01      	ldr	r3, [sp, #4]
    664e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6652:	bf00      	nop
    6654:	b003      	add	sp, #12
    6656:	f85d fb04 	ldr.w	pc, [sp], #4
    665a:	bf00      	nop
    665c:	1fff8d34 	.word	0x1fff8d34
    6660:	1fff8d30 	.word	0x1fff8d30

00006664 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    6664:	b500      	push	{lr}
    6666:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6668:	f7fa fd2c 	bl	10c4 <Sys_GetCoreID>
    666c:	4603      	mov	r3, r0
    666e:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    6670:	4a0d      	ldr	r2, [pc, #52]	; (66a8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    6672:	9b01      	ldr	r3, [sp, #4]
    6674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6678:	1e5a      	subs	r2, r3, #1
    667a:	490b      	ldr	r1, [pc, #44]	; (66a8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    667c:	9b01      	ldr	r3, [sp, #4]
    667e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    6682:	4a0a      	ldr	r2, [pc, #40]	; (66ac <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    6684:	9b01      	ldr	r3, [sp, #4]
    6686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    668a:	f003 0301 	and.w	r3, r3, #1
    668e:	2b00      	cmp	r3, #0
    6690:	d106      	bne.n	66a0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    6692:	4a05      	ldr	r2, [pc, #20]	; (66a8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    6694:	9b01      	ldr	r3, [sp, #4]
    6696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    669a:	2b00      	cmp	r3, #0
    669c:	d100      	bne.n	66a0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    669e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    66a0:	bf00      	nop
    66a2:	b003      	add	sp, #12
    66a4:	f85d fb04 	ldr.w	pc, [sp], #4
    66a8:	1fff8d34 	.word	0x1fff8d34
    66ac:	1fff8d30 	.word	0x1fff8d30

000066b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    66b0:	b500      	push	{lr}
    66b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    66b4:	f7fa fd06 	bl	10c4 <Sys_GetCoreID>
    66b8:	4603      	mov	r3, r0
    66ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    66bc:	4a10      	ldr	r2, [pc, #64]	; (6700 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    66be:	9b01      	ldr	r3, [sp, #4]
    66c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    66c4:	2b00      	cmp	r3, #0
    66c6:	d10d      	bne.n	66e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    66c8:	f7fa f910 	bl	8ec <Port_schm_read_msr>
    66cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    66ce:	9b00      	ldr	r3, [sp, #0]
    66d0:	f003 0301 	and.w	r3, r3, #1
    66d4:	2b00      	cmp	r3, #0
    66d6:	d100      	bne.n	66da <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    66d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    66da:	490a      	ldr	r1, [pc, #40]	; (6704 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    66dc:	9b01      	ldr	r3, [sp, #4]
    66de:	9a00      	ldr	r2, [sp, #0]
    66e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    66e4:	4a06      	ldr	r2, [pc, #24]	; (6700 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    66e6:	9b01      	ldr	r3, [sp, #4]
    66e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    66ec:	1c5a      	adds	r2, r3, #1
    66ee:	4904      	ldr	r1, [pc, #16]	; (6700 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    66f0:	9b01      	ldr	r3, [sp, #4]
    66f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    66f6:	bf00      	nop
    66f8:	b003      	add	sp, #12
    66fa:	f85d fb04 	ldr.w	pc, [sp], #4
    66fe:	bf00      	nop
    6700:	1fff8d3c 	.word	0x1fff8d3c
    6704:	1fff8d38 	.word	0x1fff8d38

00006708 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    6708:	b500      	push	{lr}
    670a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    670c:	f7fa fcda 	bl	10c4 <Sys_GetCoreID>
    6710:	4603      	mov	r3, r0
    6712:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    6714:	4a0d      	ldr	r2, [pc, #52]	; (674c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    6716:	9b01      	ldr	r3, [sp, #4]
    6718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    671c:	1e5a      	subs	r2, r3, #1
    671e:	490b      	ldr	r1, [pc, #44]	; (674c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    6720:	9b01      	ldr	r3, [sp, #4]
    6722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    6726:	4a0a      	ldr	r2, [pc, #40]	; (6750 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    6728:	9b01      	ldr	r3, [sp, #4]
    672a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    672e:	f003 0301 	and.w	r3, r3, #1
    6732:	2b00      	cmp	r3, #0
    6734:	d106      	bne.n	6744 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    6736:	4a05      	ldr	r2, [pc, #20]	; (674c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    6738:	9b01      	ldr	r3, [sp, #4]
    673a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    673e:	2b00      	cmp	r3, #0
    6740:	d100      	bne.n	6744 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6742:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6744:	bf00      	nop
    6746:	b003      	add	sp, #12
    6748:	f85d fb04 	ldr.w	pc, [sp], #4
    674c:	1fff8d3c 	.word	0x1fff8d3c
    6750:	1fff8d38 	.word	0x1fff8d38

00006754 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    6754:	b500      	push	{lr}
    6756:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6758:	f7fa fcb4 	bl	10c4 <Sys_GetCoreID>
    675c:	4603      	mov	r3, r0
    675e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    6760:	4a10      	ldr	r2, [pc, #64]	; (67a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    6762:	9b01      	ldr	r3, [sp, #4]
    6764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6768:	2b00      	cmp	r3, #0
    676a:	d10d      	bne.n	6788 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    676c:	f7fa f8be 	bl	8ec <Port_schm_read_msr>
    6770:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6772:	9b00      	ldr	r3, [sp, #0]
    6774:	f003 0301 	and.w	r3, r3, #1
    6778:	2b00      	cmp	r3, #0
    677a:	d100      	bne.n	677e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    677c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    677e:	490a      	ldr	r1, [pc, #40]	; (67a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    6780:	9b01      	ldr	r3, [sp, #4]
    6782:	9a00      	ldr	r2, [sp, #0]
    6784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    6788:	4a06      	ldr	r2, [pc, #24]	; (67a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    678a:	9b01      	ldr	r3, [sp, #4]
    678c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6790:	1c5a      	adds	r2, r3, #1
    6792:	4904      	ldr	r1, [pc, #16]	; (67a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    6794:	9b01      	ldr	r3, [sp, #4]
    6796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    679a:	bf00      	nop
    679c:	b003      	add	sp, #12
    679e:	f85d fb04 	ldr.w	pc, [sp], #4
    67a2:	bf00      	nop
    67a4:	1fff8d44 	.word	0x1fff8d44
    67a8:	1fff8d40 	.word	0x1fff8d40

000067ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    67ac:	b500      	push	{lr}
    67ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    67b0:	f7fa fc88 	bl	10c4 <Sys_GetCoreID>
    67b4:	4603      	mov	r3, r0
    67b6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    67b8:	4a0d      	ldr	r2, [pc, #52]	; (67f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    67ba:	9b01      	ldr	r3, [sp, #4]
    67bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    67c0:	1e5a      	subs	r2, r3, #1
    67c2:	490b      	ldr	r1, [pc, #44]	; (67f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    67c4:	9b01      	ldr	r3, [sp, #4]
    67c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    67ca:	4a0a      	ldr	r2, [pc, #40]	; (67f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    67cc:	9b01      	ldr	r3, [sp, #4]
    67ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    67d2:	f003 0301 	and.w	r3, r3, #1
    67d6:	2b00      	cmp	r3, #0
    67d8:	d106      	bne.n	67e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    67da:	4a05      	ldr	r2, [pc, #20]	; (67f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    67dc:	9b01      	ldr	r3, [sp, #4]
    67de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    67e2:	2b00      	cmp	r3, #0
    67e4:	d100      	bne.n	67e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    67e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    67e8:	bf00      	nop
    67ea:	b003      	add	sp, #12
    67ec:	f85d fb04 	ldr.w	pc, [sp], #4
    67f0:	1fff8d44 	.word	0x1fff8d44
    67f4:	1fff8d40 	.word	0x1fff8d40

000067f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    67f8:	b500      	push	{lr}
    67fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    67fc:	f7fa fc62 	bl	10c4 <Sys_GetCoreID>
    6800:	4603      	mov	r3, r0
    6802:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    6804:	4a10      	ldr	r2, [pc, #64]	; (6848 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    6806:	9b01      	ldr	r3, [sp, #4]
    6808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    680c:	2b00      	cmp	r3, #0
    680e:	d10d      	bne.n	682c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6810:	f7fa f86c 	bl	8ec <Port_schm_read_msr>
    6814:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6816:	9b00      	ldr	r3, [sp, #0]
    6818:	f003 0301 	and.w	r3, r3, #1
    681c:	2b00      	cmp	r3, #0
    681e:	d100      	bne.n	6822 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6820:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    6822:	490a      	ldr	r1, [pc, #40]	; (684c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    6824:	9b01      	ldr	r3, [sp, #4]
    6826:	9a00      	ldr	r2, [sp, #0]
    6828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    682c:	4a06      	ldr	r2, [pc, #24]	; (6848 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    682e:	9b01      	ldr	r3, [sp, #4]
    6830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6834:	1c5a      	adds	r2, r3, #1
    6836:	4904      	ldr	r1, [pc, #16]	; (6848 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    6838:	9b01      	ldr	r3, [sp, #4]
    683a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    683e:	bf00      	nop
    6840:	b003      	add	sp, #12
    6842:	f85d fb04 	ldr.w	pc, [sp], #4
    6846:	bf00      	nop
    6848:	1fff8d4c 	.word	0x1fff8d4c
    684c:	1fff8d48 	.word	0x1fff8d48

00006850 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    6850:	b500      	push	{lr}
    6852:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6854:	f7fa fc36 	bl	10c4 <Sys_GetCoreID>
    6858:	4603      	mov	r3, r0
    685a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    685c:	4a0d      	ldr	r2, [pc, #52]	; (6894 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    685e:	9b01      	ldr	r3, [sp, #4]
    6860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6864:	1e5a      	subs	r2, r3, #1
    6866:	490b      	ldr	r1, [pc, #44]	; (6894 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    6868:	9b01      	ldr	r3, [sp, #4]
    686a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    686e:	4a0a      	ldr	r2, [pc, #40]	; (6898 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    6870:	9b01      	ldr	r3, [sp, #4]
    6872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6876:	f003 0301 	and.w	r3, r3, #1
    687a:	2b00      	cmp	r3, #0
    687c:	d106      	bne.n	688c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    687e:	4a05      	ldr	r2, [pc, #20]	; (6894 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    6880:	9b01      	ldr	r3, [sp, #4]
    6882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6886:	2b00      	cmp	r3, #0
    6888:	d100      	bne.n	688c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    688a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    688c:	bf00      	nop
    688e:	b003      	add	sp, #12
    6890:	f85d fb04 	ldr.w	pc, [sp], #4
    6894:	1fff8d4c 	.word	0x1fff8d4c
    6898:	1fff8d48 	.word	0x1fff8d48

0000689c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    689c:	b500      	push	{lr}
    689e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    68a0:	f7fa fc10 	bl	10c4 <Sys_GetCoreID>
    68a4:	4603      	mov	r3, r0
    68a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    68a8:	4a10      	ldr	r2, [pc, #64]	; (68ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    68aa:	9b01      	ldr	r3, [sp, #4]
    68ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    68b0:	2b00      	cmp	r3, #0
    68b2:	d10d      	bne.n	68d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    68b4:	f7fa f81a 	bl	8ec <Port_schm_read_msr>
    68b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    68ba:	9b00      	ldr	r3, [sp, #0]
    68bc:	f003 0301 	and.w	r3, r3, #1
    68c0:	2b00      	cmp	r3, #0
    68c2:	d100      	bne.n	68c6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    68c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    68c6:	490a      	ldr	r1, [pc, #40]	; (68f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    68c8:	9b01      	ldr	r3, [sp, #4]
    68ca:	9a00      	ldr	r2, [sp, #0]
    68cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    68d0:	4a06      	ldr	r2, [pc, #24]	; (68ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    68d2:	9b01      	ldr	r3, [sp, #4]
    68d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    68d8:	1c5a      	adds	r2, r3, #1
    68da:	4904      	ldr	r1, [pc, #16]	; (68ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    68dc:	9b01      	ldr	r3, [sp, #4]
    68de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    68e2:	bf00      	nop
    68e4:	b003      	add	sp, #12
    68e6:	f85d fb04 	ldr.w	pc, [sp], #4
    68ea:	bf00      	nop
    68ec:	1fff8d54 	.word	0x1fff8d54
    68f0:	1fff8d50 	.word	0x1fff8d50

000068f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    68f4:	b500      	push	{lr}
    68f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    68f8:	f7fa fbe4 	bl	10c4 <Sys_GetCoreID>
    68fc:	4603      	mov	r3, r0
    68fe:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    6900:	4a0d      	ldr	r2, [pc, #52]	; (6938 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    6902:	9b01      	ldr	r3, [sp, #4]
    6904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6908:	1e5a      	subs	r2, r3, #1
    690a:	490b      	ldr	r1, [pc, #44]	; (6938 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    690c:	9b01      	ldr	r3, [sp, #4]
    690e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    6912:	4a0a      	ldr	r2, [pc, #40]	; (693c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    6914:	9b01      	ldr	r3, [sp, #4]
    6916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    691a:	f003 0301 	and.w	r3, r3, #1
    691e:	2b00      	cmp	r3, #0
    6920:	d106      	bne.n	6930 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    6922:	4a05      	ldr	r2, [pc, #20]	; (6938 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    6924:	9b01      	ldr	r3, [sp, #4]
    6926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    692a:	2b00      	cmp	r3, #0
    692c:	d100      	bne.n	6930 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    692e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6930:	bf00      	nop
    6932:	b003      	add	sp, #12
    6934:	f85d fb04 	ldr.w	pc, [sp], #4
    6938:	1fff8d54 	.word	0x1fff8d54
    693c:	1fff8d50 	.word	0x1fff8d50

00006940 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    6940:	b500      	push	{lr}
    6942:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6944:	f7fa fbbe 	bl	10c4 <Sys_GetCoreID>
    6948:	4603      	mov	r3, r0
    694a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    694c:	4a10      	ldr	r2, [pc, #64]	; (6990 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    694e:	9b01      	ldr	r3, [sp, #4]
    6950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6954:	2b00      	cmp	r3, #0
    6956:	d10d      	bne.n	6974 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6958:	f7f9 ffc8 	bl	8ec <Port_schm_read_msr>
    695c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    695e:	9b00      	ldr	r3, [sp, #0]
    6960:	f003 0301 	and.w	r3, r3, #1
    6964:	2b00      	cmp	r3, #0
    6966:	d100      	bne.n	696a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6968:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    696a:	490a      	ldr	r1, [pc, #40]	; (6994 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    696c:	9b01      	ldr	r3, [sp, #4]
    696e:	9a00      	ldr	r2, [sp, #0]
    6970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    6974:	4a06      	ldr	r2, [pc, #24]	; (6990 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    6976:	9b01      	ldr	r3, [sp, #4]
    6978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    697c:	1c5a      	adds	r2, r3, #1
    697e:	4904      	ldr	r1, [pc, #16]	; (6990 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    6980:	9b01      	ldr	r3, [sp, #4]
    6982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6986:	bf00      	nop
    6988:	b003      	add	sp, #12
    698a:	f85d fb04 	ldr.w	pc, [sp], #4
    698e:	bf00      	nop
    6990:	1fff8d5c 	.word	0x1fff8d5c
    6994:	1fff8d58 	.word	0x1fff8d58

00006998 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    6998:	b500      	push	{lr}
    699a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    699c:	f7fa fb92 	bl	10c4 <Sys_GetCoreID>
    69a0:	4603      	mov	r3, r0
    69a2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    69a4:	4a0d      	ldr	r2, [pc, #52]	; (69dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    69a6:	9b01      	ldr	r3, [sp, #4]
    69a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69ac:	1e5a      	subs	r2, r3, #1
    69ae:	490b      	ldr	r1, [pc, #44]	; (69dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    69b0:	9b01      	ldr	r3, [sp, #4]
    69b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    69b6:	4a0a      	ldr	r2, [pc, #40]	; (69e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    69b8:	9b01      	ldr	r3, [sp, #4]
    69ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69be:	f003 0301 	and.w	r3, r3, #1
    69c2:	2b00      	cmp	r3, #0
    69c4:	d106      	bne.n	69d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    69c6:	4a05      	ldr	r2, [pc, #20]	; (69dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    69c8:	9b01      	ldr	r3, [sp, #4]
    69ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69ce:	2b00      	cmp	r3, #0
    69d0:	d100      	bne.n	69d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    69d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    69d4:	bf00      	nop
    69d6:	b003      	add	sp, #12
    69d8:	f85d fb04 	ldr.w	pc, [sp], #4
    69dc:	1fff8d5c 	.word	0x1fff8d5c
    69e0:	1fff8d58 	.word	0x1fff8d58

000069e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    69e4:	b500      	push	{lr}
    69e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    69e8:	f7fa fb6c 	bl	10c4 <Sys_GetCoreID>
    69ec:	4603      	mov	r3, r0
    69ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    69f0:	4a10      	ldr	r2, [pc, #64]	; (6a34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    69f2:	9b01      	ldr	r3, [sp, #4]
    69f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69f8:	2b00      	cmp	r3, #0
    69fa:	d10d      	bne.n	6a18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    69fc:	f7f9 ff76 	bl	8ec <Port_schm_read_msr>
    6a00:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6a02:	9b00      	ldr	r3, [sp, #0]
    6a04:	f003 0301 	and.w	r3, r3, #1
    6a08:	2b00      	cmp	r3, #0
    6a0a:	d100      	bne.n	6a0e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6a0c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    6a0e:	490a      	ldr	r1, [pc, #40]	; (6a38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    6a10:	9b01      	ldr	r3, [sp, #4]
    6a12:	9a00      	ldr	r2, [sp, #0]
    6a14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    6a18:	4a06      	ldr	r2, [pc, #24]	; (6a34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    6a1a:	9b01      	ldr	r3, [sp, #4]
    6a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a20:	1c5a      	adds	r2, r3, #1
    6a22:	4904      	ldr	r1, [pc, #16]	; (6a34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    6a24:	9b01      	ldr	r3, [sp, #4]
    6a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6a2a:	bf00      	nop
    6a2c:	b003      	add	sp, #12
    6a2e:	f85d fb04 	ldr.w	pc, [sp], #4
    6a32:	bf00      	nop
    6a34:	1fff8d64 	.word	0x1fff8d64
    6a38:	1fff8d60 	.word	0x1fff8d60

00006a3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    6a3c:	b500      	push	{lr}
    6a3e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6a40:	f7fa fb40 	bl	10c4 <Sys_GetCoreID>
    6a44:	4603      	mov	r3, r0
    6a46:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    6a48:	4a0d      	ldr	r2, [pc, #52]	; (6a80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    6a4a:	9b01      	ldr	r3, [sp, #4]
    6a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a50:	1e5a      	subs	r2, r3, #1
    6a52:	490b      	ldr	r1, [pc, #44]	; (6a80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    6a54:	9b01      	ldr	r3, [sp, #4]
    6a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    6a5a:	4a0a      	ldr	r2, [pc, #40]	; (6a84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    6a5c:	9b01      	ldr	r3, [sp, #4]
    6a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a62:	f003 0301 	and.w	r3, r3, #1
    6a66:	2b00      	cmp	r3, #0
    6a68:	d106      	bne.n	6a78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    6a6a:	4a05      	ldr	r2, [pc, #20]	; (6a80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    6a6c:	9b01      	ldr	r3, [sp, #4]
    6a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a72:	2b00      	cmp	r3, #0
    6a74:	d100      	bne.n	6a78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6a76:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6a78:	bf00      	nop
    6a7a:	b003      	add	sp, #12
    6a7c:	f85d fb04 	ldr.w	pc, [sp], #4
    6a80:	1fff8d64 	.word	0x1fff8d64
    6a84:	1fff8d60 	.word	0x1fff8d60

00006a88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    6a88:	b500      	push	{lr}
    6a8a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6a8c:	f7fa fb1a 	bl	10c4 <Sys_GetCoreID>
    6a90:	4603      	mov	r3, r0
    6a92:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    6a94:	4a10      	ldr	r2, [pc, #64]	; (6ad8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    6a96:	9b01      	ldr	r3, [sp, #4]
    6a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a9c:	2b00      	cmp	r3, #0
    6a9e:	d10d      	bne.n	6abc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6aa0:	f7f9 ff24 	bl	8ec <Port_schm_read_msr>
    6aa4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6aa6:	9b00      	ldr	r3, [sp, #0]
    6aa8:	f003 0301 	and.w	r3, r3, #1
    6aac:	2b00      	cmp	r3, #0
    6aae:	d100      	bne.n	6ab2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6ab0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    6ab2:	490a      	ldr	r1, [pc, #40]	; (6adc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    6ab4:	9b01      	ldr	r3, [sp, #4]
    6ab6:	9a00      	ldr	r2, [sp, #0]
    6ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    6abc:	4a06      	ldr	r2, [pc, #24]	; (6ad8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    6abe:	9b01      	ldr	r3, [sp, #4]
    6ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ac4:	1c5a      	adds	r2, r3, #1
    6ac6:	4904      	ldr	r1, [pc, #16]	; (6ad8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    6ac8:	9b01      	ldr	r3, [sp, #4]
    6aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6ace:	bf00      	nop
    6ad0:	b003      	add	sp, #12
    6ad2:	f85d fb04 	ldr.w	pc, [sp], #4
    6ad6:	bf00      	nop
    6ad8:	1fff8d6c 	.word	0x1fff8d6c
    6adc:	1fff8d68 	.word	0x1fff8d68

00006ae0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    6ae0:	b500      	push	{lr}
    6ae2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6ae4:	f7fa faee 	bl	10c4 <Sys_GetCoreID>
    6ae8:	4603      	mov	r3, r0
    6aea:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    6aec:	4a0d      	ldr	r2, [pc, #52]	; (6b24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    6aee:	9b01      	ldr	r3, [sp, #4]
    6af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6af4:	1e5a      	subs	r2, r3, #1
    6af6:	490b      	ldr	r1, [pc, #44]	; (6b24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    6af8:	9b01      	ldr	r3, [sp, #4]
    6afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    6afe:	4a0a      	ldr	r2, [pc, #40]	; (6b28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    6b00:	9b01      	ldr	r3, [sp, #4]
    6b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b06:	f003 0301 	and.w	r3, r3, #1
    6b0a:	2b00      	cmp	r3, #0
    6b0c:	d106      	bne.n	6b1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    6b0e:	4a05      	ldr	r2, [pc, #20]	; (6b24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    6b10:	9b01      	ldr	r3, [sp, #4]
    6b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b16:	2b00      	cmp	r3, #0
    6b18:	d100      	bne.n	6b1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6b1a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6b1c:	bf00      	nop
    6b1e:	b003      	add	sp, #12
    6b20:	f85d fb04 	ldr.w	pc, [sp], #4
    6b24:	1fff8d6c 	.word	0x1fff8d6c
    6b28:	1fff8d68 	.word	0x1fff8d68

00006b2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    6b2c:	b500      	push	{lr}
    6b2e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6b30:	f7fa fac8 	bl	10c4 <Sys_GetCoreID>
    6b34:	4603      	mov	r3, r0
    6b36:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    6b38:	4a10      	ldr	r2, [pc, #64]	; (6b7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    6b3a:	9b01      	ldr	r3, [sp, #4]
    6b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b40:	2b00      	cmp	r3, #0
    6b42:	d10d      	bne.n	6b60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6b44:	f7f9 fed2 	bl	8ec <Port_schm_read_msr>
    6b48:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6b4a:	9b00      	ldr	r3, [sp, #0]
    6b4c:	f003 0301 	and.w	r3, r3, #1
    6b50:	2b00      	cmp	r3, #0
    6b52:	d100      	bne.n	6b56 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6b54:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    6b56:	490a      	ldr	r1, [pc, #40]	; (6b80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    6b58:	9b01      	ldr	r3, [sp, #4]
    6b5a:	9a00      	ldr	r2, [sp, #0]
    6b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    6b60:	4a06      	ldr	r2, [pc, #24]	; (6b7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    6b62:	9b01      	ldr	r3, [sp, #4]
    6b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b68:	1c5a      	adds	r2, r3, #1
    6b6a:	4904      	ldr	r1, [pc, #16]	; (6b7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    6b6c:	9b01      	ldr	r3, [sp, #4]
    6b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6b72:	bf00      	nop
    6b74:	b003      	add	sp, #12
    6b76:	f85d fb04 	ldr.w	pc, [sp], #4
    6b7a:	bf00      	nop
    6b7c:	1fff8d74 	.word	0x1fff8d74
    6b80:	1fff8d70 	.word	0x1fff8d70

00006b84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    6b84:	b500      	push	{lr}
    6b86:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6b88:	f7fa fa9c 	bl	10c4 <Sys_GetCoreID>
    6b8c:	4603      	mov	r3, r0
    6b8e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    6b90:	4a0d      	ldr	r2, [pc, #52]	; (6bc8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    6b92:	9b01      	ldr	r3, [sp, #4]
    6b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b98:	1e5a      	subs	r2, r3, #1
    6b9a:	490b      	ldr	r1, [pc, #44]	; (6bc8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    6b9c:	9b01      	ldr	r3, [sp, #4]
    6b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    6ba2:	4a0a      	ldr	r2, [pc, #40]	; (6bcc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    6ba4:	9b01      	ldr	r3, [sp, #4]
    6ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6baa:	f003 0301 	and.w	r3, r3, #1
    6bae:	2b00      	cmp	r3, #0
    6bb0:	d106      	bne.n	6bc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    6bb2:	4a05      	ldr	r2, [pc, #20]	; (6bc8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    6bb4:	9b01      	ldr	r3, [sp, #4]
    6bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6bba:	2b00      	cmp	r3, #0
    6bbc:	d100      	bne.n	6bc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6bbe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6bc0:	bf00      	nop
    6bc2:	b003      	add	sp, #12
    6bc4:	f85d fb04 	ldr.w	pc, [sp], #4
    6bc8:	1fff8d74 	.word	0x1fff8d74
    6bcc:	1fff8d70 	.word	0x1fff8d70

00006bd0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    6bd0:	b500      	push	{lr}
    6bd2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6bd4:	f7fa fa76 	bl	10c4 <Sys_GetCoreID>
    6bd8:	4603      	mov	r3, r0
    6bda:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    6bdc:	4a10      	ldr	r2, [pc, #64]	; (6c20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    6bde:	9b01      	ldr	r3, [sp, #4]
    6be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6be4:	2b00      	cmp	r3, #0
    6be6:	d10d      	bne.n	6c04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6be8:	f7f9 fe80 	bl	8ec <Port_schm_read_msr>
    6bec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6bee:	9b00      	ldr	r3, [sp, #0]
    6bf0:	f003 0301 	and.w	r3, r3, #1
    6bf4:	2b00      	cmp	r3, #0
    6bf6:	d100      	bne.n	6bfa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6bf8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    6bfa:	490a      	ldr	r1, [pc, #40]	; (6c24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    6bfc:	9b01      	ldr	r3, [sp, #4]
    6bfe:	9a00      	ldr	r2, [sp, #0]
    6c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    6c04:	4a06      	ldr	r2, [pc, #24]	; (6c20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    6c06:	9b01      	ldr	r3, [sp, #4]
    6c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c0c:	1c5a      	adds	r2, r3, #1
    6c0e:	4904      	ldr	r1, [pc, #16]	; (6c20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    6c10:	9b01      	ldr	r3, [sp, #4]
    6c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6c16:	bf00      	nop
    6c18:	b003      	add	sp, #12
    6c1a:	f85d fb04 	ldr.w	pc, [sp], #4
    6c1e:	bf00      	nop
    6c20:	1fff8d7c 	.word	0x1fff8d7c
    6c24:	1fff8d78 	.word	0x1fff8d78

00006c28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    6c28:	b500      	push	{lr}
    6c2a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6c2c:	f7fa fa4a 	bl	10c4 <Sys_GetCoreID>
    6c30:	4603      	mov	r3, r0
    6c32:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    6c34:	4a0d      	ldr	r2, [pc, #52]	; (6c6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    6c36:	9b01      	ldr	r3, [sp, #4]
    6c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c3c:	1e5a      	subs	r2, r3, #1
    6c3e:	490b      	ldr	r1, [pc, #44]	; (6c6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    6c40:	9b01      	ldr	r3, [sp, #4]
    6c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    6c46:	4a0a      	ldr	r2, [pc, #40]	; (6c70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    6c48:	9b01      	ldr	r3, [sp, #4]
    6c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c4e:	f003 0301 	and.w	r3, r3, #1
    6c52:	2b00      	cmp	r3, #0
    6c54:	d106      	bne.n	6c64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    6c56:	4a05      	ldr	r2, [pc, #20]	; (6c6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    6c58:	9b01      	ldr	r3, [sp, #4]
    6c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c5e:	2b00      	cmp	r3, #0
    6c60:	d100      	bne.n	6c64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6c62:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6c64:	bf00      	nop
    6c66:	b003      	add	sp, #12
    6c68:	f85d fb04 	ldr.w	pc, [sp], #4
    6c6c:	1fff8d7c 	.word	0x1fff8d7c
    6c70:	1fff8d78 	.word	0x1fff8d78

00006c74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    6c74:	b500      	push	{lr}
    6c76:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6c78:	f7fa fa24 	bl	10c4 <Sys_GetCoreID>
    6c7c:	4603      	mov	r3, r0
    6c7e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    6c80:	4a10      	ldr	r2, [pc, #64]	; (6cc4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    6c82:	9b01      	ldr	r3, [sp, #4]
    6c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c88:	2b00      	cmp	r3, #0
    6c8a:	d10d      	bne.n	6ca8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6c8c:	f7f9 fe2e 	bl	8ec <Port_schm_read_msr>
    6c90:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6c92:	9b00      	ldr	r3, [sp, #0]
    6c94:	f003 0301 	and.w	r3, r3, #1
    6c98:	2b00      	cmp	r3, #0
    6c9a:	d100      	bne.n	6c9e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6c9c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    6c9e:	490a      	ldr	r1, [pc, #40]	; (6cc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    6ca0:	9b01      	ldr	r3, [sp, #4]
    6ca2:	9a00      	ldr	r2, [sp, #0]
    6ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    6ca8:	4a06      	ldr	r2, [pc, #24]	; (6cc4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    6caa:	9b01      	ldr	r3, [sp, #4]
    6cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cb0:	1c5a      	adds	r2, r3, #1
    6cb2:	4904      	ldr	r1, [pc, #16]	; (6cc4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    6cb4:	9b01      	ldr	r3, [sp, #4]
    6cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6cba:	bf00      	nop
    6cbc:	b003      	add	sp, #12
    6cbe:	f85d fb04 	ldr.w	pc, [sp], #4
    6cc2:	bf00      	nop
    6cc4:	1fff8d84 	.word	0x1fff8d84
    6cc8:	1fff8d80 	.word	0x1fff8d80

00006ccc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    6ccc:	b500      	push	{lr}
    6cce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6cd0:	f7fa f9f8 	bl	10c4 <Sys_GetCoreID>
    6cd4:	4603      	mov	r3, r0
    6cd6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    6cd8:	4a0d      	ldr	r2, [pc, #52]	; (6d10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    6cda:	9b01      	ldr	r3, [sp, #4]
    6cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ce0:	1e5a      	subs	r2, r3, #1
    6ce2:	490b      	ldr	r1, [pc, #44]	; (6d10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    6ce4:	9b01      	ldr	r3, [sp, #4]
    6ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    6cea:	4a0a      	ldr	r2, [pc, #40]	; (6d14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    6cec:	9b01      	ldr	r3, [sp, #4]
    6cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cf2:	f003 0301 	and.w	r3, r3, #1
    6cf6:	2b00      	cmp	r3, #0
    6cf8:	d106      	bne.n	6d08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    6cfa:	4a05      	ldr	r2, [pc, #20]	; (6d10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    6cfc:	9b01      	ldr	r3, [sp, #4]
    6cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d02:	2b00      	cmp	r3, #0
    6d04:	d100      	bne.n	6d08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6d06:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6d08:	bf00      	nop
    6d0a:	b003      	add	sp, #12
    6d0c:	f85d fb04 	ldr.w	pc, [sp], #4
    6d10:	1fff8d84 	.word	0x1fff8d84
    6d14:	1fff8d80 	.word	0x1fff8d80

00006d18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    6d18:	b500      	push	{lr}
    6d1a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6d1c:	f7fa f9d2 	bl	10c4 <Sys_GetCoreID>
    6d20:	4603      	mov	r3, r0
    6d22:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    6d24:	4a10      	ldr	r2, [pc, #64]	; (6d68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    6d26:	9b01      	ldr	r3, [sp, #4]
    6d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d2c:	2b00      	cmp	r3, #0
    6d2e:	d10d      	bne.n	6d4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6d30:	f7f9 fddc 	bl	8ec <Port_schm_read_msr>
    6d34:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6d36:	9b00      	ldr	r3, [sp, #0]
    6d38:	f003 0301 	and.w	r3, r3, #1
    6d3c:	2b00      	cmp	r3, #0
    6d3e:	d100      	bne.n	6d42 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6d40:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    6d42:	490a      	ldr	r1, [pc, #40]	; (6d6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    6d44:	9b01      	ldr	r3, [sp, #4]
    6d46:	9a00      	ldr	r2, [sp, #0]
    6d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    6d4c:	4a06      	ldr	r2, [pc, #24]	; (6d68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    6d4e:	9b01      	ldr	r3, [sp, #4]
    6d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d54:	1c5a      	adds	r2, r3, #1
    6d56:	4904      	ldr	r1, [pc, #16]	; (6d68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    6d58:	9b01      	ldr	r3, [sp, #4]
    6d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6d5e:	bf00      	nop
    6d60:	b003      	add	sp, #12
    6d62:	f85d fb04 	ldr.w	pc, [sp], #4
    6d66:	bf00      	nop
    6d68:	1fff8d8c 	.word	0x1fff8d8c
    6d6c:	1fff8d88 	.word	0x1fff8d88

00006d70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    6d70:	b500      	push	{lr}
    6d72:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6d74:	f7fa f9a6 	bl	10c4 <Sys_GetCoreID>
    6d78:	4603      	mov	r3, r0
    6d7a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    6d7c:	4a0d      	ldr	r2, [pc, #52]	; (6db4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    6d7e:	9b01      	ldr	r3, [sp, #4]
    6d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d84:	1e5a      	subs	r2, r3, #1
    6d86:	490b      	ldr	r1, [pc, #44]	; (6db4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    6d88:	9b01      	ldr	r3, [sp, #4]
    6d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    6d8e:	4a0a      	ldr	r2, [pc, #40]	; (6db8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    6d90:	9b01      	ldr	r3, [sp, #4]
    6d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d96:	f003 0301 	and.w	r3, r3, #1
    6d9a:	2b00      	cmp	r3, #0
    6d9c:	d106      	bne.n	6dac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    6d9e:	4a05      	ldr	r2, [pc, #20]	; (6db4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    6da0:	9b01      	ldr	r3, [sp, #4]
    6da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6da6:	2b00      	cmp	r3, #0
    6da8:	d100      	bne.n	6dac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6daa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6dac:	bf00      	nop
    6dae:	b003      	add	sp, #12
    6db0:	f85d fb04 	ldr.w	pc, [sp], #4
    6db4:	1fff8d8c 	.word	0x1fff8d8c
    6db8:	1fff8d88 	.word	0x1fff8d88

00006dbc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    6dbc:	b500      	push	{lr}
    6dbe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6dc0:	f7fa f980 	bl	10c4 <Sys_GetCoreID>
    6dc4:	4603      	mov	r3, r0
    6dc6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    6dc8:	4a10      	ldr	r2, [pc, #64]	; (6e0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    6dca:	9b01      	ldr	r3, [sp, #4]
    6dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6dd0:	2b00      	cmp	r3, #0
    6dd2:	d10d      	bne.n	6df0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6dd4:	f7f9 fd8a 	bl	8ec <Port_schm_read_msr>
    6dd8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6dda:	9b00      	ldr	r3, [sp, #0]
    6ddc:	f003 0301 	and.w	r3, r3, #1
    6de0:	2b00      	cmp	r3, #0
    6de2:	d100      	bne.n	6de6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6de4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    6de6:	490a      	ldr	r1, [pc, #40]	; (6e10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    6de8:	9b01      	ldr	r3, [sp, #4]
    6dea:	9a00      	ldr	r2, [sp, #0]
    6dec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    6df0:	4a06      	ldr	r2, [pc, #24]	; (6e0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    6df2:	9b01      	ldr	r3, [sp, #4]
    6df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6df8:	1c5a      	adds	r2, r3, #1
    6dfa:	4904      	ldr	r1, [pc, #16]	; (6e0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    6dfc:	9b01      	ldr	r3, [sp, #4]
    6dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6e02:	bf00      	nop
    6e04:	b003      	add	sp, #12
    6e06:	f85d fb04 	ldr.w	pc, [sp], #4
    6e0a:	bf00      	nop
    6e0c:	1fff8d94 	.word	0x1fff8d94
    6e10:	1fff8d90 	.word	0x1fff8d90

00006e14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    6e14:	b500      	push	{lr}
    6e16:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6e18:	f7fa f954 	bl	10c4 <Sys_GetCoreID>
    6e1c:	4603      	mov	r3, r0
    6e1e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    6e20:	4a0d      	ldr	r2, [pc, #52]	; (6e58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    6e22:	9b01      	ldr	r3, [sp, #4]
    6e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e28:	1e5a      	subs	r2, r3, #1
    6e2a:	490b      	ldr	r1, [pc, #44]	; (6e58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    6e2c:	9b01      	ldr	r3, [sp, #4]
    6e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    6e32:	4a0a      	ldr	r2, [pc, #40]	; (6e5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    6e34:	9b01      	ldr	r3, [sp, #4]
    6e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e3a:	f003 0301 	and.w	r3, r3, #1
    6e3e:	2b00      	cmp	r3, #0
    6e40:	d106      	bne.n	6e50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    6e42:	4a05      	ldr	r2, [pc, #20]	; (6e58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    6e44:	9b01      	ldr	r3, [sp, #4]
    6e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e4a:	2b00      	cmp	r3, #0
    6e4c:	d100      	bne.n	6e50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6e4e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6e50:	bf00      	nop
    6e52:	b003      	add	sp, #12
    6e54:	f85d fb04 	ldr.w	pc, [sp], #4
    6e58:	1fff8d94 	.word	0x1fff8d94
    6e5c:	1fff8d90 	.word	0x1fff8d90

00006e60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    6e60:	b500      	push	{lr}
    6e62:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6e64:	f7fa f92e 	bl	10c4 <Sys_GetCoreID>
    6e68:	4603      	mov	r3, r0
    6e6a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    6e6c:	4a10      	ldr	r2, [pc, #64]	; (6eb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    6e6e:	9b01      	ldr	r3, [sp, #4]
    6e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e74:	2b00      	cmp	r3, #0
    6e76:	d10d      	bne.n	6e94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6e78:	f7f9 fd38 	bl	8ec <Port_schm_read_msr>
    6e7c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6e7e:	9b00      	ldr	r3, [sp, #0]
    6e80:	f003 0301 	and.w	r3, r3, #1
    6e84:	2b00      	cmp	r3, #0
    6e86:	d100      	bne.n	6e8a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6e88:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    6e8a:	490a      	ldr	r1, [pc, #40]	; (6eb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    6e8c:	9b01      	ldr	r3, [sp, #4]
    6e8e:	9a00      	ldr	r2, [sp, #0]
    6e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    6e94:	4a06      	ldr	r2, [pc, #24]	; (6eb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    6e96:	9b01      	ldr	r3, [sp, #4]
    6e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e9c:	1c5a      	adds	r2, r3, #1
    6e9e:	4904      	ldr	r1, [pc, #16]	; (6eb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    6ea0:	9b01      	ldr	r3, [sp, #4]
    6ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6ea6:	bf00      	nop
    6ea8:	b003      	add	sp, #12
    6eaa:	f85d fb04 	ldr.w	pc, [sp], #4
    6eae:	bf00      	nop
    6eb0:	1fff8d9c 	.word	0x1fff8d9c
    6eb4:	1fff8d98 	.word	0x1fff8d98

00006eb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    6eb8:	b500      	push	{lr}
    6eba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6ebc:	f7fa f902 	bl	10c4 <Sys_GetCoreID>
    6ec0:	4603      	mov	r3, r0
    6ec2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    6ec4:	4a0d      	ldr	r2, [pc, #52]	; (6efc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    6ec6:	9b01      	ldr	r3, [sp, #4]
    6ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ecc:	1e5a      	subs	r2, r3, #1
    6ece:	490b      	ldr	r1, [pc, #44]	; (6efc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    6ed0:	9b01      	ldr	r3, [sp, #4]
    6ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    6ed6:	4a0a      	ldr	r2, [pc, #40]	; (6f00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    6ed8:	9b01      	ldr	r3, [sp, #4]
    6eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ede:	f003 0301 	and.w	r3, r3, #1
    6ee2:	2b00      	cmp	r3, #0
    6ee4:	d106      	bne.n	6ef4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    6ee6:	4a05      	ldr	r2, [pc, #20]	; (6efc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    6ee8:	9b01      	ldr	r3, [sp, #4]
    6eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6eee:	2b00      	cmp	r3, #0
    6ef0:	d100      	bne.n	6ef4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6ef2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6ef4:	bf00      	nop
    6ef6:	b003      	add	sp, #12
    6ef8:	f85d fb04 	ldr.w	pc, [sp], #4
    6efc:	1fff8d9c 	.word	0x1fff8d9c
    6f00:	1fff8d98 	.word	0x1fff8d98

00006f04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    6f04:	b500      	push	{lr}
    6f06:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6f08:	f7fa f8dc 	bl	10c4 <Sys_GetCoreID>
    6f0c:	4603      	mov	r3, r0
    6f0e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    6f10:	4a10      	ldr	r2, [pc, #64]	; (6f54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    6f12:	9b01      	ldr	r3, [sp, #4]
    6f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f18:	2b00      	cmp	r3, #0
    6f1a:	d10d      	bne.n	6f38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6f1c:	f7f9 fce6 	bl	8ec <Port_schm_read_msr>
    6f20:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6f22:	9b00      	ldr	r3, [sp, #0]
    6f24:	f003 0301 	and.w	r3, r3, #1
    6f28:	2b00      	cmp	r3, #0
    6f2a:	d100      	bne.n	6f2e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6f2c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    6f2e:	490a      	ldr	r1, [pc, #40]	; (6f58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    6f30:	9b01      	ldr	r3, [sp, #4]
    6f32:	9a00      	ldr	r2, [sp, #0]
    6f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    6f38:	4a06      	ldr	r2, [pc, #24]	; (6f54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    6f3a:	9b01      	ldr	r3, [sp, #4]
    6f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f40:	1c5a      	adds	r2, r3, #1
    6f42:	4904      	ldr	r1, [pc, #16]	; (6f54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    6f44:	9b01      	ldr	r3, [sp, #4]
    6f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6f4a:	bf00      	nop
    6f4c:	b003      	add	sp, #12
    6f4e:	f85d fb04 	ldr.w	pc, [sp], #4
    6f52:	bf00      	nop
    6f54:	1fff8da4 	.word	0x1fff8da4
    6f58:	1fff8da0 	.word	0x1fff8da0

00006f5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    6f5c:	b500      	push	{lr}
    6f5e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6f60:	f7fa f8b0 	bl	10c4 <Sys_GetCoreID>
    6f64:	4603      	mov	r3, r0
    6f66:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    6f68:	4a0d      	ldr	r2, [pc, #52]	; (6fa0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    6f6a:	9b01      	ldr	r3, [sp, #4]
    6f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f70:	1e5a      	subs	r2, r3, #1
    6f72:	490b      	ldr	r1, [pc, #44]	; (6fa0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    6f74:	9b01      	ldr	r3, [sp, #4]
    6f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    6f7a:	4a0a      	ldr	r2, [pc, #40]	; (6fa4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    6f7c:	9b01      	ldr	r3, [sp, #4]
    6f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f82:	f003 0301 	and.w	r3, r3, #1
    6f86:	2b00      	cmp	r3, #0
    6f88:	d106      	bne.n	6f98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    6f8a:	4a05      	ldr	r2, [pc, #20]	; (6fa0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    6f8c:	9b01      	ldr	r3, [sp, #4]
    6f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f92:	2b00      	cmp	r3, #0
    6f94:	d100      	bne.n	6f98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    6f96:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    6f98:	bf00      	nop
    6f9a:	b003      	add	sp, #12
    6f9c:	f85d fb04 	ldr.w	pc, [sp], #4
    6fa0:	1fff8da4 	.word	0x1fff8da4
    6fa4:	1fff8da0 	.word	0x1fff8da0

00006fa8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    6fa8:	b500      	push	{lr}
    6faa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    6fac:	f7fa f88a 	bl	10c4 <Sys_GetCoreID>
    6fb0:	4603      	mov	r3, r0
    6fb2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    6fb4:	4a10      	ldr	r2, [pc, #64]	; (6ff8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    6fb6:	9b01      	ldr	r3, [sp, #4]
    6fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fbc:	2b00      	cmp	r3, #0
    6fbe:	d10d      	bne.n	6fdc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    6fc0:	f7f9 fc94 	bl	8ec <Port_schm_read_msr>
    6fc4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    6fc6:	9b00      	ldr	r3, [sp, #0]
    6fc8:	f003 0301 	and.w	r3, r3, #1
    6fcc:	2b00      	cmp	r3, #0
    6fce:	d100      	bne.n	6fd2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    6fd0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    6fd2:	490a      	ldr	r1, [pc, #40]	; (6ffc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    6fd4:	9b01      	ldr	r3, [sp, #4]
    6fd6:	9a00      	ldr	r2, [sp, #0]
    6fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    6fdc:	4a06      	ldr	r2, [pc, #24]	; (6ff8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    6fde:	9b01      	ldr	r3, [sp, #4]
    6fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6fe4:	1c5a      	adds	r2, r3, #1
    6fe6:	4904      	ldr	r1, [pc, #16]	; (6ff8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    6fe8:	9b01      	ldr	r3, [sp, #4]
    6fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6fee:	bf00      	nop
    6ff0:	b003      	add	sp, #12
    6ff2:	f85d fb04 	ldr.w	pc, [sp], #4
    6ff6:	bf00      	nop
    6ff8:	1fff8dac 	.word	0x1fff8dac
    6ffc:	1fff8da8 	.word	0x1fff8da8

00007000 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    7000:	b500      	push	{lr}
    7002:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7004:	f7fa f85e 	bl	10c4 <Sys_GetCoreID>
    7008:	4603      	mov	r3, r0
    700a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    700c:	4a0d      	ldr	r2, [pc, #52]	; (7044 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    700e:	9b01      	ldr	r3, [sp, #4]
    7010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7014:	1e5a      	subs	r2, r3, #1
    7016:	490b      	ldr	r1, [pc, #44]	; (7044 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    7018:	9b01      	ldr	r3, [sp, #4]
    701a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    701e:	4a0a      	ldr	r2, [pc, #40]	; (7048 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    7020:	9b01      	ldr	r3, [sp, #4]
    7022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7026:	f003 0301 	and.w	r3, r3, #1
    702a:	2b00      	cmp	r3, #0
    702c:	d106      	bne.n	703c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    702e:	4a05      	ldr	r2, [pc, #20]	; (7044 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    7030:	9b01      	ldr	r3, [sp, #4]
    7032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7036:	2b00      	cmp	r3, #0
    7038:	d100      	bne.n	703c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    703a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    703c:	bf00      	nop
    703e:	b003      	add	sp, #12
    7040:	f85d fb04 	ldr.w	pc, [sp], #4
    7044:	1fff8dac 	.word	0x1fff8dac
    7048:	1fff8da8 	.word	0x1fff8da8

0000704c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    704c:	b500      	push	{lr}
    704e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7050:	f7fa f838 	bl	10c4 <Sys_GetCoreID>
    7054:	4603      	mov	r3, r0
    7056:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    7058:	4a10      	ldr	r2, [pc, #64]	; (709c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    705a:	9b01      	ldr	r3, [sp, #4]
    705c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7060:	2b00      	cmp	r3, #0
    7062:	d10d      	bne.n	7080 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7064:	f7f9 fc42 	bl	8ec <Port_schm_read_msr>
    7068:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    706a:	9b00      	ldr	r3, [sp, #0]
    706c:	f003 0301 	and.w	r3, r3, #1
    7070:	2b00      	cmp	r3, #0
    7072:	d100      	bne.n	7076 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7074:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    7076:	490a      	ldr	r1, [pc, #40]	; (70a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    7078:	9b01      	ldr	r3, [sp, #4]
    707a:	9a00      	ldr	r2, [sp, #0]
    707c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    7080:	4a06      	ldr	r2, [pc, #24]	; (709c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    7082:	9b01      	ldr	r3, [sp, #4]
    7084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7088:	1c5a      	adds	r2, r3, #1
    708a:	4904      	ldr	r1, [pc, #16]	; (709c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    708c:	9b01      	ldr	r3, [sp, #4]
    708e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7092:	bf00      	nop
    7094:	b003      	add	sp, #12
    7096:	f85d fb04 	ldr.w	pc, [sp], #4
    709a:	bf00      	nop
    709c:	1fff8db4 	.word	0x1fff8db4
    70a0:	1fff8db0 	.word	0x1fff8db0

000070a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    70a4:	b500      	push	{lr}
    70a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    70a8:	f7fa f80c 	bl	10c4 <Sys_GetCoreID>
    70ac:	4603      	mov	r3, r0
    70ae:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    70b0:	4a0d      	ldr	r2, [pc, #52]	; (70e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    70b2:	9b01      	ldr	r3, [sp, #4]
    70b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70b8:	1e5a      	subs	r2, r3, #1
    70ba:	490b      	ldr	r1, [pc, #44]	; (70e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    70bc:	9b01      	ldr	r3, [sp, #4]
    70be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    70c2:	4a0a      	ldr	r2, [pc, #40]	; (70ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    70c4:	9b01      	ldr	r3, [sp, #4]
    70c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70ca:	f003 0301 	and.w	r3, r3, #1
    70ce:	2b00      	cmp	r3, #0
    70d0:	d106      	bne.n	70e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    70d2:	4a05      	ldr	r2, [pc, #20]	; (70e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    70d4:	9b01      	ldr	r3, [sp, #4]
    70d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70da:	2b00      	cmp	r3, #0
    70dc:	d100      	bne.n	70e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    70de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    70e0:	bf00      	nop
    70e2:	b003      	add	sp, #12
    70e4:	f85d fb04 	ldr.w	pc, [sp], #4
    70e8:	1fff8db4 	.word	0x1fff8db4
    70ec:	1fff8db0 	.word	0x1fff8db0

000070f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    70f0:	b500      	push	{lr}
    70f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    70f4:	f7f9 ffe6 	bl	10c4 <Sys_GetCoreID>
    70f8:	4603      	mov	r3, r0
    70fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    70fc:	4a10      	ldr	r2, [pc, #64]	; (7140 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    70fe:	9b01      	ldr	r3, [sp, #4]
    7100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7104:	2b00      	cmp	r3, #0
    7106:	d10d      	bne.n	7124 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7108:	f7f9 fbf0 	bl	8ec <Port_schm_read_msr>
    710c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    710e:	9b00      	ldr	r3, [sp, #0]
    7110:	f003 0301 	and.w	r3, r3, #1
    7114:	2b00      	cmp	r3, #0
    7116:	d100      	bne.n	711a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7118:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    711a:	490a      	ldr	r1, [pc, #40]	; (7144 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    711c:	9b01      	ldr	r3, [sp, #4]
    711e:	9a00      	ldr	r2, [sp, #0]
    7120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    7124:	4a06      	ldr	r2, [pc, #24]	; (7140 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    7126:	9b01      	ldr	r3, [sp, #4]
    7128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    712c:	1c5a      	adds	r2, r3, #1
    712e:	4904      	ldr	r1, [pc, #16]	; (7140 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    7130:	9b01      	ldr	r3, [sp, #4]
    7132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7136:	bf00      	nop
    7138:	b003      	add	sp, #12
    713a:	f85d fb04 	ldr.w	pc, [sp], #4
    713e:	bf00      	nop
    7140:	1fff8dbc 	.word	0x1fff8dbc
    7144:	1fff8db8 	.word	0x1fff8db8

00007148 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    7148:	b500      	push	{lr}
    714a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    714c:	f7f9 ffba 	bl	10c4 <Sys_GetCoreID>
    7150:	4603      	mov	r3, r0
    7152:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    7154:	4a0d      	ldr	r2, [pc, #52]	; (718c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    7156:	9b01      	ldr	r3, [sp, #4]
    7158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    715c:	1e5a      	subs	r2, r3, #1
    715e:	490b      	ldr	r1, [pc, #44]	; (718c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    7160:	9b01      	ldr	r3, [sp, #4]
    7162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    7166:	4a0a      	ldr	r2, [pc, #40]	; (7190 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    7168:	9b01      	ldr	r3, [sp, #4]
    716a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    716e:	f003 0301 	and.w	r3, r3, #1
    7172:	2b00      	cmp	r3, #0
    7174:	d106      	bne.n	7184 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    7176:	4a05      	ldr	r2, [pc, #20]	; (718c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    7178:	9b01      	ldr	r3, [sp, #4]
    717a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    717e:	2b00      	cmp	r3, #0
    7180:	d100      	bne.n	7184 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7182:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7184:	bf00      	nop
    7186:	b003      	add	sp, #12
    7188:	f85d fb04 	ldr.w	pc, [sp], #4
    718c:	1fff8dbc 	.word	0x1fff8dbc
    7190:	1fff8db8 	.word	0x1fff8db8

00007194 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    7194:	b500      	push	{lr}
    7196:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7198:	f7f9 ff94 	bl	10c4 <Sys_GetCoreID>
    719c:	4603      	mov	r3, r0
    719e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    71a0:	4a10      	ldr	r2, [pc, #64]	; (71e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    71a2:	9b01      	ldr	r3, [sp, #4]
    71a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71a8:	2b00      	cmp	r3, #0
    71aa:	d10d      	bne.n	71c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    71ac:	f7f9 fb9e 	bl	8ec <Port_schm_read_msr>
    71b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    71b2:	9b00      	ldr	r3, [sp, #0]
    71b4:	f003 0301 	and.w	r3, r3, #1
    71b8:	2b00      	cmp	r3, #0
    71ba:	d100      	bne.n	71be <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    71bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    71be:	490a      	ldr	r1, [pc, #40]	; (71e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    71c0:	9b01      	ldr	r3, [sp, #4]
    71c2:	9a00      	ldr	r2, [sp, #0]
    71c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    71c8:	4a06      	ldr	r2, [pc, #24]	; (71e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    71ca:	9b01      	ldr	r3, [sp, #4]
    71cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71d0:	1c5a      	adds	r2, r3, #1
    71d2:	4904      	ldr	r1, [pc, #16]	; (71e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    71d4:	9b01      	ldr	r3, [sp, #4]
    71d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    71da:	bf00      	nop
    71dc:	b003      	add	sp, #12
    71de:	f85d fb04 	ldr.w	pc, [sp], #4
    71e2:	bf00      	nop
    71e4:	1fff8dc4 	.word	0x1fff8dc4
    71e8:	1fff8dc0 	.word	0x1fff8dc0

000071ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    71ec:	b500      	push	{lr}
    71ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    71f0:	f7f9 ff68 	bl	10c4 <Sys_GetCoreID>
    71f4:	4603      	mov	r3, r0
    71f6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    71f8:	4a0d      	ldr	r2, [pc, #52]	; (7230 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    71fa:	9b01      	ldr	r3, [sp, #4]
    71fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7200:	1e5a      	subs	r2, r3, #1
    7202:	490b      	ldr	r1, [pc, #44]	; (7230 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    7204:	9b01      	ldr	r3, [sp, #4]
    7206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    720a:	4a0a      	ldr	r2, [pc, #40]	; (7234 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    720c:	9b01      	ldr	r3, [sp, #4]
    720e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7212:	f003 0301 	and.w	r3, r3, #1
    7216:	2b00      	cmp	r3, #0
    7218:	d106      	bne.n	7228 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    721a:	4a05      	ldr	r2, [pc, #20]	; (7230 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    721c:	9b01      	ldr	r3, [sp, #4]
    721e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7222:	2b00      	cmp	r3, #0
    7224:	d100      	bne.n	7228 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7226:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7228:	bf00      	nop
    722a:	b003      	add	sp, #12
    722c:	f85d fb04 	ldr.w	pc, [sp], #4
    7230:	1fff8dc4 	.word	0x1fff8dc4
    7234:	1fff8dc0 	.word	0x1fff8dc0

00007238 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    7238:	b500      	push	{lr}
    723a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    723c:	f7f9 ff42 	bl	10c4 <Sys_GetCoreID>
    7240:	4603      	mov	r3, r0
    7242:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    7244:	4a10      	ldr	r2, [pc, #64]	; (7288 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    7246:	9b01      	ldr	r3, [sp, #4]
    7248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    724c:	2b00      	cmp	r3, #0
    724e:	d10d      	bne.n	726c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7250:	f7f9 fb4c 	bl	8ec <Port_schm_read_msr>
    7254:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7256:	9b00      	ldr	r3, [sp, #0]
    7258:	f003 0301 	and.w	r3, r3, #1
    725c:	2b00      	cmp	r3, #0
    725e:	d100      	bne.n	7262 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7260:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    7262:	490a      	ldr	r1, [pc, #40]	; (728c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    7264:	9b01      	ldr	r3, [sp, #4]
    7266:	9a00      	ldr	r2, [sp, #0]
    7268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    726c:	4a06      	ldr	r2, [pc, #24]	; (7288 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    726e:	9b01      	ldr	r3, [sp, #4]
    7270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7274:	1c5a      	adds	r2, r3, #1
    7276:	4904      	ldr	r1, [pc, #16]	; (7288 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    7278:	9b01      	ldr	r3, [sp, #4]
    727a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    727e:	bf00      	nop
    7280:	b003      	add	sp, #12
    7282:	f85d fb04 	ldr.w	pc, [sp], #4
    7286:	bf00      	nop
    7288:	1fff8dcc 	.word	0x1fff8dcc
    728c:	1fff8dc8 	.word	0x1fff8dc8

00007290 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    7290:	b500      	push	{lr}
    7292:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7294:	f7f9 ff16 	bl	10c4 <Sys_GetCoreID>
    7298:	4603      	mov	r3, r0
    729a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    729c:	4a0d      	ldr	r2, [pc, #52]	; (72d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    729e:	9b01      	ldr	r3, [sp, #4]
    72a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72a4:	1e5a      	subs	r2, r3, #1
    72a6:	490b      	ldr	r1, [pc, #44]	; (72d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    72a8:	9b01      	ldr	r3, [sp, #4]
    72aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    72ae:	4a0a      	ldr	r2, [pc, #40]	; (72d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    72b0:	9b01      	ldr	r3, [sp, #4]
    72b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72b6:	f003 0301 	and.w	r3, r3, #1
    72ba:	2b00      	cmp	r3, #0
    72bc:	d106      	bne.n	72cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    72be:	4a05      	ldr	r2, [pc, #20]	; (72d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    72c0:	9b01      	ldr	r3, [sp, #4]
    72c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72c6:	2b00      	cmp	r3, #0
    72c8:	d100      	bne.n	72cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    72ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    72cc:	bf00      	nop
    72ce:	b003      	add	sp, #12
    72d0:	f85d fb04 	ldr.w	pc, [sp], #4
    72d4:	1fff8dcc 	.word	0x1fff8dcc
    72d8:	1fff8dc8 	.word	0x1fff8dc8

000072dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    72dc:	b500      	push	{lr}
    72de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    72e0:	f7f9 fef0 	bl	10c4 <Sys_GetCoreID>
    72e4:	4603      	mov	r3, r0
    72e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    72e8:	4a10      	ldr	r2, [pc, #64]	; (732c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    72ea:	9b01      	ldr	r3, [sp, #4]
    72ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    72f0:	2b00      	cmp	r3, #0
    72f2:	d10d      	bne.n	7310 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    72f4:	f7f9 fafa 	bl	8ec <Port_schm_read_msr>
    72f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    72fa:	9b00      	ldr	r3, [sp, #0]
    72fc:	f003 0301 	and.w	r3, r3, #1
    7300:	2b00      	cmp	r3, #0
    7302:	d100      	bne.n	7306 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7304:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    7306:	490a      	ldr	r1, [pc, #40]	; (7330 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    7308:	9b01      	ldr	r3, [sp, #4]
    730a:	9a00      	ldr	r2, [sp, #0]
    730c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    7310:	4a06      	ldr	r2, [pc, #24]	; (732c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    7312:	9b01      	ldr	r3, [sp, #4]
    7314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7318:	1c5a      	adds	r2, r3, #1
    731a:	4904      	ldr	r1, [pc, #16]	; (732c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    731c:	9b01      	ldr	r3, [sp, #4]
    731e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7322:	bf00      	nop
    7324:	b003      	add	sp, #12
    7326:	f85d fb04 	ldr.w	pc, [sp], #4
    732a:	bf00      	nop
    732c:	1fff8dd4 	.word	0x1fff8dd4
    7330:	1fff8dd0 	.word	0x1fff8dd0

00007334 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    7334:	b500      	push	{lr}
    7336:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7338:	f7f9 fec4 	bl	10c4 <Sys_GetCoreID>
    733c:	4603      	mov	r3, r0
    733e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    7340:	4a0d      	ldr	r2, [pc, #52]	; (7378 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    7342:	9b01      	ldr	r3, [sp, #4]
    7344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7348:	1e5a      	subs	r2, r3, #1
    734a:	490b      	ldr	r1, [pc, #44]	; (7378 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    734c:	9b01      	ldr	r3, [sp, #4]
    734e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    7352:	4a0a      	ldr	r2, [pc, #40]	; (737c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    7354:	9b01      	ldr	r3, [sp, #4]
    7356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    735a:	f003 0301 	and.w	r3, r3, #1
    735e:	2b00      	cmp	r3, #0
    7360:	d106      	bne.n	7370 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    7362:	4a05      	ldr	r2, [pc, #20]	; (7378 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    7364:	9b01      	ldr	r3, [sp, #4]
    7366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    736a:	2b00      	cmp	r3, #0
    736c:	d100      	bne.n	7370 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    736e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7370:	bf00      	nop
    7372:	b003      	add	sp, #12
    7374:	f85d fb04 	ldr.w	pc, [sp], #4
    7378:	1fff8dd4 	.word	0x1fff8dd4
    737c:	1fff8dd0 	.word	0x1fff8dd0

00007380 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    7380:	b500      	push	{lr}
    7382:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7384:	f7f9 fe9e 	bl	10c4 <Sys_GetCoreID>
    7388:	4603      	mov	r3, r0
    738a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
    738c:	4a10      	ldr	r2, [pc, #64]	; (73d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    738e:	9b01      	ldr	r3, [sp, #4]
    7390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7394:	2b00      	cmp	r3, #0
    7396:	d10d      	bne.n	73b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7398:	f7f9 faa8 	bl	8ec <Port_schm_read_msr>
    739c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    739e:	9b00      	ldr	r3, [sp, #0]
    73a0:	f003 0301 	and.w	r3, r3, #1
    73a4:	2b00      	cmp	r3, #0
    73a6:	d100      	bne.n	73aa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    73a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    73aa:	490a      	ldr	r1, [pc, #40]	; (73d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    73ac:	9b01      	ldr	r3, [sp, #4]
    73ae:	9a00      	ldr	r2, [sp, #0]
    73b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
    73b4:	4a06      	ldr	r2, [pc, #24]	; (73d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    73b6:	9b01      	ldr	r3, [sp, #4]
    73b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73bc:	1c5a      	adds	r2, r3, #1
    73be:	4904      	ldr	r1, [pc, #16]	; (73d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    73c0:	9b01      	ldr	r3, [sp, #4]
    73c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    73c6:	bf00      	nop
    73c8:	b003      	add	sp, #12
    73ca:	f85d fb04 	ldr.w	pc, [sp], #4
    73ce:	bf00      	nop
    73d0:	1fff8ddc 	.word	0x1fff8ddc
    73d4:	1fff8dd8 	.word	0x1fff8dd8

000073d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    73d8:	b500      	push	{lr}
    73da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    73dc:	f7f9 fe72 	bl	10c4 <Sys_GetCoreID>
    73e0:	4603      	mov	r3, r0
    73e2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
    73e4:	4a0d      	ldr	r2, [pc, #52]	; (741c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    73e6:	9b01      	ldr	r3, [sp, #4]
    73e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73ec:	1e5a      	subs	r2, r3, #1
    73ee:	490b      	ldr	r1, [pc, #44]	; (741c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    73f0:	9b01      	ldr	r3, [sp, #4]
    73f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    73f6:	4a0a      	ldr	r2, [pc, #40]	; (7420 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    73f8:	9b01      	ldr	r3, [sp, #4]
    73fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73fe:	f003 0301 	and.w	r3, r3, #1
    7402:	2b00      	cmp	r3, #0
    7404:	d106      	bne.n	7414 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    7406:	4a05      	ldr	r2, [pc, #20]	; (741c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    7408:	9b01      	ldr	r3, [sp, #4]
    740a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    740e:	2b00      	cmp	r3, #0
    7410:	d100      	bne.n	7414 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7412:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7414:	bf00      	nop
    7416:	b003      	add	sp, #12
    7418:	f85d fb04 	ldr.w	pc, [sp], #4
    741c:	1fff8ddc 	.word	0x1fff8ddc
    7420:	1fff8dd8 	.word	0x1fff8dd8

00007424 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    7424:	b500      	push	{lr}
    7426:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7428:	f7f9 fe4c 	bl	10c4 <Sys_GetCoreID>
    742c:	4603      	mov	r3, r0
    742e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
    7430:	4a10      	ldr	r2, [pc, #64]	; (7474 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    7432:	9b01      	ldr	r3, [sp, #4]
    7434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7438:	2b00      	cmp	r3, #0
    743a:	d10d      	bne.n	7458 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    743c:	f7f9 fa56 	bl	8ec <Port_schm_read_msr>
    7440:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7442:	9b00      	ldr	r3, [sp, #0]
    7444:	f003 0301 	and.w	r3, r3, #1
    7448:	2b00      	cmp	r3, #0
    744a:	d100      	bne.n	744e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    744c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    744e:	490a      	ldr	r1, [pc, #40]	; (7478 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    7450:	9b01      	ldr	r3, [sp, #4]
    7452:	9a00      	ldr	r2, [sp, #0]
    7454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
    7458:	4a06      	ldr	r2, [pc, #24]	; (7474 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    745a:	9b01      	ldr	r3, [sp, #4]
    745c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7460:	1c5a      	adds	r2, r3, #1
    7462:	4904      	ldr	r1, [pc, #16]	; (7474 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    7464:	9b01      	ldr	r3, [sp, #4]
    7466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    746a:	bf00      	nop
    746c:	b003      	add	sp, #12
    746e:	f85d fb04 	ldr.w	pc, [sp], #4
    7472:	bf00      	nop
    7474:	1fff8de4 	.word	0x1fff8de4
    7478:	1fff8de0 	.word	0x1fff8de0

0000747c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    747c:	b500      	push	{lr}
    747e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7480:	f7f9 fe20 	bl	10c4 <Sys_GetCoreID>
    7484:	4603      	mov	r3, r0
    7486:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
    7488:	4a0d      	ldr	r2, [pc, #52]	; (74c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    748a:	9b01      	ldr	r3, [sp, #4]
    748c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7490:	1e5a      	subs	r2, r3, #1
    7492:	490b      	ldr	r1, [pc, #44]	; (74c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    7494:	9b01      	ldr	r3, [sp, #4]
    7496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    749a:	4a0a      	ldr	r2, [pc, #40]	; (74c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    749c:	9b01      	ldr	r3, [sp, #4]
    749e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74a2:	f003 0301 	and.w	r3, r3, #1
    74a6:	2b00      	cmp	r3, #0
    74a8:	d106      	bne.n	74b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    74aa:	4a05      	ldr	r2, [pc, #20]	; (74c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    74ac:	9b01      	ldr	r3, [sp, #4]
    74ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74b2:	2b00      	cmp	r3, #0
    74b4:	d100      	bne.n	74b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    74b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    74b8:	bf00      	nop
    74ba:	b003      	add	sp, #12
    74bc:	f85d fb04 	ldr.w	pc, [sp], #4
    74c0:	1fff8de4 	.word	0x1fff8de4
    74c4:	1fff8de0 	.word	0x1fff8de0

000074c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    74c8:	b500      	push	{lr}
    74ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    74cc:	f7f9 fdfa 	bl	10c4 <Sys_GetCoreID>
    74d0:	4603      	mov	r3, r0
    74d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
    74d4:	4a10      	ldr	r2, [pc, #64]	; (7518 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    74d6:	9b01      	ldr	r3, [sp, #4]
    74d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74dc:	2b00      	cmp	r3, #0
    74de:	d10d      	bne.n	74fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    74e0:	f7f9 fa04 	bl	8ec <Port_schm_read_msr>
    74e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    74e6:	9b00      	ldr	r3, [sp, #0]
    74e8:	f003 0301 	and.w	r3, r3, #1
    74ec:	2b00      	cmp	r3, #0
    74ee:	d100      	bne.n	74f2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    74f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    74f2:	490a      	ldr	r1, [pc, #40]	; (751c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    74f4:	9b01      	ldr	r3, [sp, #4]
    74f6:	9a00      	ldr	r2, [sp, #0]
    74f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
    74fc:	4a06      	ldr	r2, [pc, #24]	; (7518 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    74fe:	9b01      	ldr	r3, [sp, #4]
    7500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7504:	1c5a      	adds	r2, r3, #1
    7506:	4904      	ldr	r1, [pc, #16]	; (7518 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    7508:	9b01      	ldr	r3, [sp, #4]
    750a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    750e:	bf00      	nop
    7510:	b003      	add	sp, #12
    7512:	f85d fb04 	ldr.w	pc, [sp], #4
    7516:	bf00      	nop
    7518:	1fff8dec 	.word	0x1fff8dec
    751c:	1fff8de8 	.word	0x1fff8de8

00007520 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    7520:	b500      	push	{lr}
    7522:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7524:	f7f9 fdce 	bl	10c4 <Sys_GetCoreID>
    7528:	4603      	mov	r3, r0
    752a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
    752c:	4a0d      	ldr	r2, [pc, #52]	; (7564 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    752e:	9b01      	ldr	r3, [sp, #4]
    7530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7534:	1e5a      	subs	r2, r3, #1
    7536:	490b      	ldr	r1, [pc, #44]	; (7564 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    7538:	9b01      	ldr	r3, [sp, #4]
    753a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    753e:	4a0a      	ldr	r2, [pc, #40]	; (7568 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    7540:	9b01      	ldr	r3, [sp, #4]
    7542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7546:	f003 0301 	and.w	r3, r3, #1
    754a:	2b00      	cmp	r3, #0
    754c:	d106      	bne.n	755c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    754e:	4a05      	ldr	r2, [pc, #20]	; (7564 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    7550:	9b01      	ldr	r3, [sp, #4]
    7552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7556:	2b00      	cmp	r3, #0
    7558:	d100      	bne.n	755c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    755a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    755c:	bf00      	nop
    755e:	b003      	add	sp, #12
    7560:	f85d fb04 	ldr.w	pc, [sp], #4
    7564:	1fff8dec 	.word	0x1fff8dec
    7568:	1fff8de8 	.word	0x1fff8de8

0000756c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    756c:	b500      	push	{lr}
    756e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7570:	f7f9 fda8 	bl	10c4 <Sys_GetCoreID>
    7574:	4603      	mov	r3, r0
    7576:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
    7578:	4a10      	ldr	r2, [pc, #64]	; (75bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    757a:	9b01      	ldr	r3, [sp, #4]
    757c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7580:	2b00      	cmp	r3, #0
    7582:	d10d      	bne.n	75a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7584:	f7f9 f9b2 	bl	8ec <Port_schm_read_msr>
    7588:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    758a:	9b00      	ldr	r3, [sp, #0]
    758c:	f003 0301 	and.w	r3, r3, #1
    7590:	2b00      	cmp	r3, #0
    7592:	d100      	bne.n	7596 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7594:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    7596:	490a      	ldr	r1, [pc, #40]	; (75c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    7598:	9b01      	ldr	r3, [sp, #4]
    759a:	9a00      	ldr	r2, [sp, #0]
    759c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
    75a0:	4a06      	ldr	r2, [pc, #24]	; (75bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    75a2:	9b01      	ldr	r3, [sp, #4]
    75a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75a8:	1c5a      	adds	r2, r3, #1
    75aa:	4904      	ldr	r1, [pc, #16]	; (75bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    75ac:	9b01      	ldr	r3, [sp, #4]
    75ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    75b2:	bf00      	nop
    75b4:	b003      	add	sp, #12
    75b6:	f85d fb04 	ldr.w	pc, [sp], #4
    75ba:	bf00      	nop
    75bc:	1fff8df4 	.word	0x1fff8df4
    75c0:	1fff8df0 	.word	0x1fff8df0

000075c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    75c4:	b500      	push	{lr}
    75c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    75c8:	f7f9 fd7c 	bl	10c4 <Sys_GetCoreID>
    75cc:	4603      	mov	r3, r0
    75ce:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
    75d0:	4a0d      	ldr	r2, [pc, #52]	; (7608 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    75d2:	9b01      	ldr	r3, [sp, #4]
    75d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75d8:	1e5a      	subs	r2, r3, #1
    75da:	490b      	ldr	r1, [pc, #44]	; (7608 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    75dc:	9b01      	ldr	r3, [sp, #4]
    75de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    75e2:	4a0a      	ldr	r2, [pc, #40]	; (760c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    75e4:	9b01      	ldr	r3, [sp, #4]
    75e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75ea:	f003 0301 	and.w	r3, r3, #1
    75ee:	2b00      	cmp	r3, #0
    75f0:	d106      	bne.n	7600 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    75f2:	4a05      	ldr	r2, [pc, #20]	; (7608 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    75f4:	9b01      	ldr	r3, [sp, #4]
    75f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75fa:	2b00      	cmp	r3, #0
    75fc:	d100      	bne.n	7600 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    75fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7600:	bf00      	nop
    7602:	b003      	add	sp, #12
    7604:	f85d fb04 	ldr.w	pc, [sp], #4
    7608:	1fff8df4 	.word	0x1fff8df4
    760c:	1fff8df0 	.word	0x1fff8df0

00007610 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    7610:	b500      	push	{lr}
    7612:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7614:	f7f9 fd56 	bl	10c4 <Sys_GetCoreID>
    7618:	4603      	mov	r3, r0
    761a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
    761c:	4a10      	ldr	r2, [pc, #64]	; (7660 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    761e:	9b01      	ldr	r3, [sp, #4]
    7620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7624:	2b00      	cmp	r3, #0
    7626:	d10d      	bne.n	7644 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7628:	f7f9 f960 	bl	8ec <Port_schm_read_msr>
    762c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    762e:	9b00      	ldr	r3, [sp, #0]
    7630:	f003 0301 	and.w	r3, r3, #1
    7634:	2b00      	cmp	r3, #0
    7636:	d100      	bne.n	763a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7638:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    763a:	490a      	ldr	r1, [pc, #40]	; (7664 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    763c:	9b01      	ldr	r3, [sp, #4]
    763e:	9a00      	ldr	r2, [sp, #0]
    7640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
    7644:	4a06      	ldr	r2, [pc, #24]	; (7660 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    7646:	9b01      	ldr	r3, [sp, #4]
    7648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    764c:	1c5a      	adds	r2, r3, #1
    764e:	4904      	ldr	r1, [pc, #16]	; (7660 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    7650:	9b01      	ldr	r3, [sp, #4]
    7652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7656:	bf00      	nop
    7658:	b003      	add	sp, #12
    765a:	f85d fb04 	ldr.w	pc, [sp], #4
    765e:	bf00      	nop
    7660:	1fff8dfc 	.word	0x1fff8dfc
    7664:	1fff8df8 	.word	0x1fff8df8

00007668 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    7668:	b500      	push	{lr}
    766a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    766c:	f7f9 fd2a 	bl	10c4 <Sys_GetCoreID>
    7670:	4603      	mov	r3, r0
    7672:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
    7674:	4a0d      	ldr	r2, [pc, #52]	; (76ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    7676:	9b01      	ldr	r3, [sp, #4]
    7678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    767c:	1e5a      	subs	r2, r3, #1
    767e:	490b      	ldr	r1, [pc, #44]	; (76ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    7680:	9b01      	ldr	r3, [sp, #4]
    7682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    7686:	4a0a      	ldr	r2, [pc, #40]	; (76b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    7688:	9b01      	ldr	r3, [sp, #4]
    768a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    768e:	f003 0301 	and.w	r3, r3, #1
    7692:	2b00      	cmp	r3, #0
    7694:	d106      	bne.n	76a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    7696:	4a05      	ldr	r2, [pc, #20]	; (76ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    7698:	9b01      	ldr	r3, [sp, #4]
    769a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    769e:	2b00      	cmp	r3, #0
    76a0:	d100      	bne.n	76a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    76a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    76a4:	bf00      	nop
    76a6:	b003      	add	sp, #12
    76a8:	f85d fb04 	ldr.w	pc, [sp], #4
    76ac:	1fff8dfc 	.word	0x1fff8dfc
    76b0:	1fff8df8 	.word	0x1fff8df8

000076b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    76b4:	b500      	push	{lr}
    76b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    76b8:	f7f9 fd04 	bl	10c4 <Sys_GetCoreID>
    76bc:	4603      	mov	r3, r0
    76be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
    76c0:	4a10      	ldr	r2, [pc, #64]	; (7704 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    76c2:	9b01      	ldr	r3, [sp, #4]
    76c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76c8:	2b00      	cmp	r3, #0
    76ca:	d10d      	bne.n	76e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    76cc:	f7f9 f90e 	bl	8ec <Port_schm_read_msr>
    76d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    76d2:	9b00      	ldr	r3, [sp, #0]
    76d4:	f003 0301 	and.w	r3, r3, #1
    76d8:	2b00      	cmp	r3, #0
    76da:	d100      	bne.n	76de <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    76dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    76de:	490a      	ldr	r1, [pc, #40]	; (7708 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    76e0:	9b01      	ldr	r3, [sp, #4]
    76e2:	9a00      	ldr	r2, [sp, #0]
    76e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
    76e8:	4a06      	ldr	r2, [pc, #24]	; (7704 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    76ea:	9b01      	ldr	r3, [sp, #4]
    76ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76f0:	1c5a      	adds	r2, r3, #1
    76f2:	4904      	ldr	r1, [pc, #16]	; (7704 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    76f4:	9b01      	ldr	r3, [sp, #4]
    76f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    76fa:	bf00      	nop
    76fc:	b003      	add	sp, #12
    76fe:	f85d fb04 	ldr.w	pc, [sp], #4
    7702:	bf00      	nop
    7704:	1fff8e04 	.word	0x1fff8e04
    7708:	1fff8e00 	.word	0x1fff8e00

0000770c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    770c:	b500      	push	{lr}
    770e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7710:	f7f9 fcd8 	bl	10c4 <Sys_GetCoreID>
    7714:	4603      	mov	r3, r0
    7716:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
    7718:	4a0d      	ldr	r2, [pc, #52]	; (7750 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    771a:	9b01      	ldr	r3, [sp, #4]
    771c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7720:	1e5a      	subs	r2, r3, #1
    7722:	490b      	ldr	r1, [pc, #44]	; (7750 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    7724:	9b01      	ldr	r3, [sp, #4]
    7726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    772a:	4a0a      	ldr	r2, [pc, #40]	; (7754 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    772c:	9b01      	ldr	r3, [sp, #4]
    772e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7732:	f003 0301 	and.w	r3, r3, #1
    7736:	2b00      	cmp	r3, #0
    7738:	d106      	bne.n	7748 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    773a:	4a05      	ldr	r2, [pc, #20]	; (7750 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    773c:	9b01      	ldr	r3, [sp, #4]
    773e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7742:	2b00      	cmp	r3, #0
    7744:	d100      	bne.n	7748 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    7746:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7748:	bf00      	nop
    774a:	b003      	add	sp, #12
    774c:	f85d fb04 	ldr.w	pc, [sp], #4
    7750:	1fff8e04 	.word	0x1fff8e04
    7754:	1fff8e00 	.word	0x1fff8e00

00007758 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    7758:	b500      	push	{lr}
    775a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    775c:	f7f9 fcb2 	bl	10c4 <Sys_GetCoreID>
    7760:	4603      	mov	r3, r0
    7762:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
    7764:	4a10      	ldr	r2, [pc, #64]	; (77a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    7766:	9b01      	ldr	r3, [sp, #4]
    7768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    776c:	2b00      	cmp	r3, #0
    776e:	d10d      	bne.n	778c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7770:	f7f9 f8bc 	bl	8ec <Port_schm_read_msr>
    7774:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    7776:	9b00      	ldr	r3, [sp, #0]
    7778:	f003 0301 	and.w	r3, r3, #1
    777c:	2b00      	cmp	r3, #0
    777e:	d100      	bne.n	7782 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7780:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    7782:	490a      	ldr	r1, [pc, #40]	; (77ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    7784:	9b01      	ldr	r3, [sp, #4]
    7786:	9a00      	ldr	r2, [sp, #0]
    7788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
    778c:	4a06      	ldr	r2, [pc, #24]	; (77a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    778e:	9b01      	ldr	r3, [sp, #4]
    7790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7794:	1c5a      	adds	r2, r3, #1
    7796:	4904      	ldr	r1, [pc, #16]	; (77a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    7798:	9b01      	ldr	r3, [sp, #4]
    779a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    779e:	bf00      	nop
    77a0:	b003      	add	sp, #12
    77a2:	f85d fb04 	ldr.w	pc, [sp], #4
    77a6:	bf00      	nop
    77a8:	1fff8e0c 	.word	0x1fff8e0c
    77ac:	1fff8e08 	.word	0x1fff8e08

000077b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    77b0:	b500      	push	{lr}
    77b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    77b4:	f7f9 fc86 	bl	10c4 <Sys_GetCoreID>
    77b8:	4603      	mov	r3, r0
    77ba:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
    77bc:	4a0d      	ldr	r2, [pc, #52]	; (77f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    77be:	9b01      	ldr	r3, [sp, #4]
    77c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77c4:	1e5a      	subs	r2, r3, #1
    77c6:	490b      	ldr	r1, [pc, #44]	; (77f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    77c8:	9b01      	ldr	r3, [sp, #4]
    77ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    77ce:	4a0a      	ldr	r2, [pc, #40]	; (77f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    77d0:	9b01      	ldr	r3, [sp, #4]
    77d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77d6:	f003 0301 	and.w	r3, r3, #1
    77da:	2b00      	cmp	r3, #0
    77dc:	d106      	bne.n	77ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    77de:	4a05      	ldr	r2, [pc, #20]	; (77f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    77e0:	9b01      	ldr	r3, [sp, #4]
    77e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77e6:	2b00      	cmp	r3, #0
    77e8:	d100      	bne.n	77ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    77ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    77ec:	bf00      	nop
    77ee:	b003      	add	sp, #12
    77f0:	f85d fb04 	ldr.w	pc, [sp], #4
    77f4:	1fff8e0c 	.word	0x1fff8e0c
    77f8:	1fff8e08 	.word	0x1fff8e08

000077fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    77fc:	b500      	push	{lr}
    77fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7800:	f7f9 fc60 	bl	10c4 <Sys_GetCoreID>
    7804:	4603      	mov	r3, r0
    7806:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
    7808:	4a10      	ldr	r2, [pc, #64]	; (784c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    780a:	9b01      	ldr	r3, [sp, #4]
    780c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7810:	2b00      	cmp	r3, #0
    7812:	d10d      	bne.n	7830 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    7814:	f7f9 f86a 	bl	8ec <Port_schm_read_msr>
    7818:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    781a:	9b00      	ldr	r3, [sp, #0]
    781c:	f003 0301 	and.w	r3, r3, #1
    7820:	2b00      	cmp	r3, #0
    7822:	d100      	bne.n	7826 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    7824:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    7826:	490a      	ldr	r1, [pc, #40]	; (7850 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    7828:	9b01      	ldr	r3, [sp, #4]
    782a:	9a00      	ldr	r2, [sp, #0]
    782c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
    7830:	4a06      	ldr	r2, [pc, #24]	; (784c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    7832:	9b01      	ldr	r3, [sp, #4]
    7834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7838:	1c5a      	adds	r2, r3, #1
    783a:	4904      	ldr	r1, [pc, #16]	; (784c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    783c:	9b01      	ldr	r3, [sp, #4]
    783e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7842:	bf00      	nop
    7844:	b003      	add	sp, #12
    7846:	f85d fb04 	ldr.w	pc, [sp], #4
    784a:	bf00      	nop
    784c:	1fff8e14 	.word	0x1fff8e14
    7850:	1fff8e10 	.word	0x1fff8e10

00007854 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    7854:	b500      	push	{lr}
    7856:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    7858:	f7f9 fc34 	bl	10c4 <Sys_GetCoreID>
    785c:	4603      	mov	r3, r0
    785e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
    7860:	4a0d      	ldr	r2, [pc, #52]	; (7898 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    7862:	9b01      	ldr	r3, [sp, #4]
    7864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7868:	1e5a      	subs	r2, r3, #1
    786a:	490b      	ldr	r1, [pc, #44]	; (7898 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    786c:	9b01      	ldr	r3, [sp, #4]
    786e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    7872:	4a0a      	ldr	r2, [pc, #40]	; (789c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    7874:	9b01      	ldr	r3, [sp, #4]
    7876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    787a:	f003 0301 	and.w	r3, r3, #1
    787e:	2b00      	cmp	r3, #0
    7880:	d106      	bne.n	7890 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    7882:	4a05      	ldr	r2, [pc, #20]	; (7898 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    7884:	9b01      	ldr	r3, [sp, #4]
    7886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    788a:	2b00      	cmp	r3, #0
    788c:	d100      	bne.n	7890 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    788e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    7890:	bf00      	nop
    7892:	b003      	add	sp, #12
    7894:	f85d fb04 	ldr.w	pc, [sp], #4
    7898:	1fff8e14 	.word	0x1fff8e14
    789c:	1fff8e10 	.word	0x1fff8e10

000078a0 <Clock_Ip_au8DividerCallbackIndex>:
    78a0:	0e0d0c00 06030201 0a070409 000b0805     ................

000078b0 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

000078c0 <Clock_Ip_au8XoscCallbackIndex>:
    78c0:	00000100 00000000 00000000 00000000     ................

000078d0 <Clock_Ip_au8IrcoscCallbackIndex>:
    78d0:	03020100 00000004 00000000 00000000     ................

000078e0 <Clock_Ip_au8GateCallbackIndex>:
    78e0:	06010200 01040301 00000500 00000000     ................

000078f0 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

00007900 <Clock_Ip_au8PllCallbackIndex>:
    7900:	00000100 00000000 00000000 00000000     ................

00007910 <Clock_Ip_au8SelectorCallbackIndex>:
    7910:	0a090800 03020109 07060504 00000000     ................

00007920 <Clock_Ip_au8PcfsCallbackIndex>:
	...

00007930 <Clock_Ip_au8CmuCallbackIndex>:
	...

00007940 <Clock_Ip_au8ClockFeatures>:
	...
    7950:	01000000 00000000 00000000 00000002     ................
    7960:	00000000 00000300 00000000 00040000     ................
    7970:	00000000 05000000 00000000 00000000     ................
    7980:	00000006 00000000 00000100 00000000     ................
    7990:	00010000 00000000 04000000 00000000     ................
    79a0:	00000000 00000005 00000001 00000401     ................
    79b0:	00000200 00050100 00030000 04020000     ................
    79c0:	04000000 02000000 00000005 00000005     ................
    79d0:	00000403 00000600 00050300 00070000     ................
    79e0:	05000000 00000000 00000000 00000006     ................
	...
    7a20:	00050000 00000000 06000000 00000100     ................
    7a30:	00000000 00030007 00000000 00000000     ................
    7a40:	00000000 00060000 00000000 07000000     ................
    7a50:	00000100 00000000 00030008 00000000     ................
	...
    7a68:	00090000 00000000 0a000000 00000100     ................
    7a78:	00000000 0003000b 00000000 00000000     ................
    7a88:	00000000 000c0000 00000000 0d000000     ................
    7a98:	00000100 00000000 0003000e 00000000     ................
    7aa8:	00000800 00000000 00090000 00000000     ................
    7ab8:	0a000000 00000000 00000000 0000000b     ................
    7ac8:	00000000 00000b01 00000000 000b0200     ................
    7ad8:	00000000 0b030000 00000000 00000000     ................
	...
    7af0:	00000400 003b003b 00040000 27002700     ....;.;......'.'
    7b00:	01000000 00000000 00000000 00000007     ................
    7b10:	00007300 00000700 00320000 00090000     .s........2.....
    7b20:	02000000 07000000 00000000 00000021     ............!...
    7b30:	00000009 00000400 00000900 00030000     ................
    7b40:	00070000 61000000 07000000 00000000     .......a........
    7b50:	00000024 00000007 00002500 00000700     $........%......
    7b60:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
    7b70:	00000000 00000020 38000004 00003800     .... ......8.8..
    7b80:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
    7b90:	04000000 00260000 00000026 66000004     ......&.&......f
    7ba0:	00006600 00000400 00370037 00040000     .f......7.7.....
    7bb0:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
    7bc0:	2e000004 00002e00 00000200 00404040     ............@@@.
    7bd0:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
    7be0:	0000006b 6c000004 00006c00 00000900     k......l.l......
    7bf0:	00010000 00090000 00000000 07000000     ................
    7c00:	00000000 00000036 00000007 00003100     ....6........1..
    7c10:	00000700 00490000 00070000 4a000000     ......I........J
    7c20:	07000000 00000000 0000004b 00000007     ........K.......
    7c30:	00004c00 00000700 004d0000 00070000     .L........M.....
    7c40:	3d000000 03000000 00000000 00000000     ...=............

00007c50 <Clock_Ip_au16SelectorEntryHardwareValue>:
    7c50:	01010a03 01010001 04040002 02000603     ................
    7c60:	00010810 02020100 00000000 00000007     ................
    7c70:	00000009 00000000 00000c0e 00000000     ................
	...

00007ca8 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
    7ca8:	00020000 00000300 00000601 00000000     ................
	...

00007cd8 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
    7cd8:	00000700 00000000 02020000 01010303     ................
    7ce8:	03020606 00000000 00000000 00000000     ................
	...

00007d08 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
    7d08:	00000001 00000000 02020000 01010303     ................
    7d18:	03020606 00000000 00000000 00000000     ................
	...

00007d38 <Clock_Ip_au8DividerValueHardwareValue>:
    7d38:	00020100 00000003 00000004 00000000     ................
    7d48:	00000005 00000000 00000000 00000000     ................
    7d58:	00000006 00000000 00000000 00000000     ................
	...
    7d78:	00000007                                ....

00007d7c <Clock_Ip_apxScgPeriphAsyncDivs>:
    7d7c:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

00007d8c <Clock_Ip_aeSourceTypeClockName>:
    7d8c:	00000000 00000001 00000001 00000001     ................
    7d9c:	00000001 00000001 00000001 00000001     ................
    7dac:	00000002 00000003 00000001 00000001     ................
    7dbc:	00000001 00000001 00000002 00000002     ................
    7dcc:	00000003 00000003 00000001 00000001     ................
    7ddc:	00000004 00000004 00000004 00000004     ................
	...

00007e48 <Clock_Ip_aeHwPllName>:
    7e48:	00000009                                ....

00007e4c <Clock_Ip_aeHwDfsName>:
    7e4c:	00000057                                W...

00007e50 <Clock_Ip_axDividerCallbacks>:
    7e50:	00002319 00002323 0000233d 00002357     .#..##..=#..W#..
    7e60:	00002371 0000238b 000023a5 000023bf     q#...#...#...#..
    7e70:	000023d9 000023f3 0000240d 00002427     .#...#...$..'$..
    7e80:	00002441 0000245b 00002475              A$..[$..u$..

00007e8c <Clock_Ip_axDividerTriggerCallbacks>:
    7e8c:	000027e9 000027e9                       .'...'..

00007e94 <Clock_Ip_axExtOscCallbacks>:
    7e94:	000027f5 000027f5 000027f5 000027ff     .'...'...'...'..
    7ea4:	000027f5 00002809 00002823 0000283d     .'...(..#(..=(..
    7eb4:	000028c1 000028d5                       .(...(..

00007ebc <Clock_Ip_axFracDivCallbacks>:
    7ebc:	00002a95 00002a95 00002a9f              .*...*...*..

00007ec8 <Clock_Ip_axGateCallbacks>:
    7ec8:	00002ab9 00002ac3 00002bc3 00002bdd     .*...*...+...+..
    7ed8:	00002b73 00002b8d 00002b23 00002b3d     s+...+..#+..=+..
    7ee8:	00002ad3 00002aed 00002c13 00002c2d     .*...*...,..-,..
    7ef8:	00002c63 00002c7d                       c,..},..

00007f00 <Clock_Ip_axIntOscCallbacks>:
    7f00:	00002e29 00002e29 00002e33 00002e3d     )...)...3...=...
    7f10:	00002e57 00002e71 00002e85 00002e9f     W...q...........
    7f20:	00002eb9 00002ecd 00002ee7 00002f01     ............./..
    7f30:	00002fa9 00002fc3 00002fdd              ./.../.../..

00007f3c <Clock_Ip_axCmuCallbacks>:
    7f3c:	00003579 00003583 0000358f 00003579     y5...5...5..y5..

00007f4c <Clock_Ip_axPllCallbacks>:
    7f4c:	00003599 00003599 000035a3 00003599     .5...5...5...5..
    7f5c:	000035af 000035b9 000035d3 000035ed     .5...5...5...5..
    7f6c:	00003691 0000367d                       .6..}6..

00007f74 <Clock_Ip_axPcfsCallbacks>:
    7f74:	000037ed                                .7..

00007f78 <Clock_Ip_axSelectorCallbacks>:
    7f78:	000037f9 000037f9 00003803 0000381d     .7...7...8...8..
    7f88:	000037f9 00003837 00003851 0000386b     .7..78..Q8..k8..
    7f98:	00003885 0000389f 000038b9 000038d3     .8...8...8...8..
    7fa8:	000038ed 00003907 00003921 0000393b     .8...9..!9..;9..
    7fb8:	00003955 0000396f 00003989 000039a3     U9..o9...9...9..
    7fc8:	000039bd 000039d7                       .9...9..

00007fd0 <ClockSource>:
    7fd0:	00000000 00000008 00000002 00000005     ................
	...
    7fe8:	00000009                                ....

00007fec <ResetReasonArray>:
    7fec:	00000000 00000001 00000002 00000003     ................
    7ffc:	00000004 00000005 00000006 00000007     ................
    800c:	00000008 00000009 0000000a 0000000b     ................
    801c:	0000000c 0000000d 0000000e              ............

00008028 <Port_au32PortCiPortBaseAddr>:
    8028:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
    8038:	4004d000                                ...@

0000803c <Port_au32PortCiGpioBaseAddr>:
    803c:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
    804c:	400ff100                                ...@

00008050 <Queue_Config>:
    8050:	00000004 00000003 1fff8b44 00000002     ........D.......
    8060:	00000003 1fff8b50                       ....P...

00008068 <Task_Config>:
    8068:	00000032 00000001 000008ff 00000064     2...........d...
    8078:	00000001 00000909                       ........

00008080 <Timer_Config>:
    8080:	0000012c 00000000 00000955              ,.......U...

0000808c <Scheduler_Config>:
    808c:	0000000a 00000002 00008068 00000001     ........h.......
    809c:	00008080 00000002 00008050              ........P...

000080a8 <Mcu_aClockConfigPB>:
	...
    80b0:	14000002 0400000e 01000020 00000002     ........ .......
    80c0:	01000001 00000001 00000005 00000001     ................
    80d0:	00000000 00000057 00000000 00000000     ....W...........
	...
    80e8:	00000057 00000000 00000057 00000000     W.......W.......
	...
    8110:	00000019 00000005 0000001a 00000002     ................
    8120:	0000001b 00000005 0000002a 00000002     ........*.......
    8130:	0000003f 0000000a 00000040 00000000     ?.......@.......
    8140:	00000041 00000000 00000042 00000000     A.......B.......
    8150:	00000031 00000000 00000045 00000000     1.......E.......
    8160:	00000046 00000000 00000047 00000000     F.......G.......
    8170:	00000044 00000000 00000030 00000000     D.......0.......
    8180:	0000003d 00000000 00000043 00000000     =.......C.......
    8190:	00000049 00000000 0000004a 00000000     I.......J.......
    81a0:	0000004b 00000000 00000048 00000000     K.......H.......
    81b0:	00000057 00000057 00000057 00000057     W...W...W...W...
    81c0:	00000057 00000057 00000057 00000057     W...W...W...W...
    81d0:	00000057 00000057 00000057 00000057     W...W...W...W...
    81e0:	00000057 00000057 00000057 00000057     W...W...W...W...
    81f0:	0000000a 00000008 00000000 0000000b     ................
    8200:	00000001 00000000 0000000c 00000001     ................
    8210:	00000000 0000000d 00000001 00000000     ................
    8220:	0000001d 00000001 00000000 0000001e     ................
    8230:	00000002 00000000 0000001f 00000001     ................
    8240:	00000000 00000021 00000001 00000000     ....!...........
    8250:	00000022 00000002 00000000 00000023     "...........#...
    8260:	00000001 00000000 00000025 00000002     ........%.......
    8270:	00000000 00000026 00000004 00000000     ....&...........
    8280:	00000027 00000002 00000000 00000048     '...........H...
    8290:	00000001 00000001 00000057 00000000     ........W.......
    82a0:	00000000 00000057 00000000 00000000     ....W...........
    82b0:	00000057 00000000 00000000 00000057     W...........W...
	...
    82c8:	00000057 00000000 00000000 00000057     W...........W...
	...
    82e0:	00000057 00000000 00000057 00000057     W.......W...W...
	...
    82fc:	00000014 00007d00 00000015 00007d00     .....}.......}..
    830c:	00000016 00007d00 00000017 00008000     .....}..........
    831c:	00000030 00000000 00000031 00000000     0.......1.......
    832c:	00000033 00000000 00000034 00000000     3.......4.......
    833c:	00000036 00000000 00000039 00000000     6.......9.......
    834c:	0000003a 00000000 0000003b 00000000     :.......;.......
    835c:	0000003c 00000000 0000003d 00000000     <.......=.......
    836c:	0000003e 00000000 0000003f 00000000     >.......?.......
    837c:	00000040 00000000 00000041 00000000     @.......A.......
    838c:	00000042 00000000 00000043 00000000     B.......C.......
    839c:	00000044 00000000 00000045 00000000     D.......E.......
    83ac:	00000046 00000000 00000047 00000000     F.......G.......
    83bc:	00000048 00000000 00000049 00000000     H.......I.......
    83cc:	0000004a 00000000 0000004b 00000000     J.......K.......
    83dc:	0000004e 00000000 0000004f 00000000     N.......O.......
    83ec:	00000050 00000001 00000051 00000001     P.......Q.......
    83fc:	00000052 00000001 00000053 00000001     R.......S.......
    840c:	00000054 00000001 00000055 00000000     T.......U.......
    841c:	00000057 00000000 00000057 00000000     W.......W.......
    842c:	00000057 00000000 00000057 00000000     W.......W.......
    843c:	00000057 00000000 00000057 00000000     W.......W.......
    844c:	00000057 00000000 00000057 00000000     W.......W.......
    845c:	00000057 00000000 00000057 00000000     W.......W.......
    846c:	00000000 00000057 00000000 00000057     ....W.......W...
	...

000084a0 <Mcu_Config>:
    84a0:	0000005a 00000000 00000001 00000001     Z...............
    84b0:	000086ec 000080a8 000086f8              ............

000084bc <OsIf_xPredefinedConfig>:
    84bc:	00000000 02dc6c00                       .....l..

000084c4 <OsIf_apxPredefinedConfig>:
    84c4:	000084bc                                ....

000084c8 <g_pin_mux_InitConfigArr>:
    84c8:	4004b000 400ff080 00000008 00000002     ...@...@........
    84d8:	00000001 00000002 00000000 00000000     ................
	...
    84f0:	4004b000 400ff080 00000009 00000002     ...@...@........
    8500:	00000001 00000002 00000000 00000000     ................
	...
    8518:	4004b000 400ff080 0000000a 00000002     ...@...@........
    8528:	00000001 00000002 00000000 00000000     ................
	...
    8540:	4004b000 400ff080 0000000b 00000002     ...@...@........
    8550:	00000001 00000002 00000000 00000000     ................
	...
    8568:	4004d000 400ff100 0000000c 00000002     ...@...@........
    8578:	00000001 00000001 00000000 00000000     ................
	...

00008590 <au8Port_PartitionList>:
    8590:	00000001                                ....

00008594 <au32Port_PinToPartitionMap>:
    8594:	00000001 00000001 00000001 00000001     ................
    85a4:	00000001                                ....

000085a8 <Port_au16NoUnUsedPadsArrayDefault>:
    85a8:	00010000 00030002 00070006 00090008     ................
    85b8:	000c000b 000e000d 0010000f 00200011     .............. .
    85c8:	00220021 00240023 00260025 00280027     !.".#.$.%.&.'.(.
    85d8:	002a0029 002c002b 002e002d 0030002f     ).*.+.,.-.../.0.
    85e8:	00400031 00420041 00460043 004c0047     1.@.A.B.C.F.G.L.
    85f8:	004e004d 0050004f 00600051 00620061     M.N.O.P.Q.`.a.b.
    8608:	00640063 00660065 00680067 006a0069     c.d.e.f.g.h.i.j.
    8618:	006c006b 006e006d 0070006f 00800071     k.l.m.n.o.p.q...
    8628:	00820081 00840083 00860085 00880087     ................
    8638:	008a0089 008d008b 008f008e 00000090     ................

00008648 <Port_UnUsedPin>:
    8648:	00000000 00000001 00000000              ............

00008654 <Port_aPinConfigDefault>:
    8654:	00000048 00000100 00000000 00000002     H...............
    8664:	00010001 00000049 00000100 00000000     ....I...........
    8674:	00000002 00010101 0000004a 00000100     ........J.......
    8684:	00000000 00000002 00010101 0000008c     ................
    8694:	00000100 00000000 00000001 00010101     ................
    86a4:	0000004b 00000100 00000000 00000002     K...............
    86b4:	00010101                                ....

000086b8 <Port_Config>:
    86b8:	004f0005 000085a8 00008648 00008654     ..O.....H...T...
	...
    86d0:	00008594 00008590 000084c8              ............

000086dc <Power_Ip_RCM_ConfigPB>:
	...

000086e4 <Power_Ip_PMC_ConfigPB>:
    86e4:	00000000                                ....

000086e8 <Power_Ip_SMC_ConfigPB>:
    86e8:	00000000                                ....

000086ec <Power_Ip_aModeConfigPB>:
	...

000086f8 <Power_Ip_HwIPsConfigPB>:
    86f8:	000086dc 000086e4 000086e8              ............

00008704 <__INIT_TABLE>:
    8704:	00000002 	.word	0x00000002
    8708:	1fff8b10 	.word	0x1fff8b10
    870c:	0000872c 	.word	0x0000872c
    8710:	0000875c 	.word	0x0000875c
    8714:	1fff8800 	.word	0x1fff8800
    8718:	00000000 	.word	0x00000000
    871c:	00000310 	.word	0x00000310

00008720 <__ZERO_TABLE>:
    8720:	00000001 	.word	0x00000001
    8724:	1fff8b40 	.word	0x1fff8b40
    8728:	1fff8e60 	.word	0x1fff8e60
