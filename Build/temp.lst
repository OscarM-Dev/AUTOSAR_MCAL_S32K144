
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	000018c7 	.word	0x000018c7
  10:	000018c9 	.word	0x000018c9
  14:	000018cb 	.word	0x000018cb
  18:	000018cd 	.word	0x000018cd
	...
  2c:	000018cf 	.word	0x000018cf
  30:	000018d1 	.word	0x000018d1
  34:	00000000 	.word	0x00000000
  38:	000018d3 	.word	0x000018d3
  3c:	000018d5 	.word	0x000018d5
  40:	000018d7 	.word	0x000018d7
  44:	000018d7 	.word	0x000018d7
  48:	000018d7 	.word	0x000018d7
  4c:	000018d7 	.word	0x000018d7
  50:	000018d7 	.word	0x000018d7
  54:	000018d7 	.word	0x000018d7
  58:	000018d7 	.word	0x000018d7
  5c:	000018d7 	.word	0x000018d7
  60:	000018d7 	.word	0x000018d7
  64:	000018d7 	.word	0x000018d7
  68:	000018d7 	.word	0x000018d7
  6c:	000018d7 	.word	0x000018d7
  70:	000018d7 	.word	0x000018d7
  74:	000018d7 	.word	0x000018d7
  78:	000018d7 	.word	0x000018d7
  7c:	000018d7 	.word	0x000018d7
  80:	000018d7 	.word	0x000018d7
  84:	000018d7 	.word	0x000018d7
  88:	000018d7 	.word	0x000018d7
  8c:	000018d7 	.word	0x000018d7
  90:	000018d7 	.word	0x000018d7
  94:	000018d7 	.word	0x000018d7
  98:	000018d7 	.word	0x000018d7
  9c:	000018d7 	.word	0x000018d7
  a0:	000018d7 	.word	0x000018d7
  a4:	000018d7 	.word	0x000018d7
  a8:	000018d7 	.word	0x000018d7
  ac:	000018d7 	.word	0x000018d7
  b0:	000018d7 	.word	0x000018d7
  b4:	000018d7 	.word	0x000018d7
  b8:	000018d7 	.word	0x000018d7
  bc:	000018d7 	.word	0x000018d7
  c0:	000018d7 	.word	0x000018d7
  c4:	000018d7 	.word	0x000018d7
  c8:	000018d7 	.word	0x000018d7
  cc:	000018d7 	.word	0x000018d7
  d0:	000018d7 	.word	0x000018d7
  d4:	000018d7 	.word	0x000018d7
  d8:	000018d7 	.word	0x000018d7
  dc:	000018d7 	.word	0x000018d7
  e0:	000018d7 	.word	0x000018d7
  e4:	000018d7 	.word	0x000018d7
  e8:	000018d7 	.word	0x000018d7
  ec:	000018d7 	.word	0x000018d7
  f0:	000018d7 	.word	0x000018d7
  f4:	000018d7 	.word	0x000018d7
  f8:	000018d7 	.word	0x000018d7
  fc:	000018d7 	.word	0x000018d7
 100:	000018d7 	.word	0x000018d7
 104:	000018d7 	.word	0x000018d7
 108:	000018d7 	.word	0x000018d7
 10c:	000018d7 	.word	0x000018d7
 110:	000018d7 	.word	0x000018d7
 114:	000018d7 	.word	0x000018d7
 118:	000018d7 	.word	0x000018d7
 11c:	000018d7 	.word	0x000018d7
 120:	000018d7 	.word	0x000018d7
 124:	000018d7 	.word	0x000018d7
 128:	000018d7 	.word	0x000018d7
 12c:	000018d7 	.word	0x000018d7
 130:	000018d7 	.word	0x000018d7
 134:	000018d7 	.word	0x000018d7
 138:	000018d7 	.word	0x000018d7
 13c:	000018d7 	.word	0x000018d7
 140:	000018d7 	.word	0x000018d7
 144:	000018d7 	.word	0x000018d7
 148:	000018d7 	.word	0x000018d7
 14c:	000018d7 	.word	0x000018d7
 150:	000018d7 	.word	0x000018d7
 154:	000018d7 	.word	0x000018d7
 158:	000018d7 	.word	0x000018d7
 15c:	000018d7 	.word	0x000018d7
 160:	000018d7 	.word	0x000018d7
 164:	000018d7 	.word	0x000018d7
 168:	000018d7 	.word	0x000018d7
 16c:	000018d7 	.word	0x000018d7
 170:	000018d7 	.word	0x000018d7
 174:	000018d7 	.word	0x000018d7
 178:	000018d7 	.word	0x000018d7
 17c:	000018d7 	.word	0x000018d7
 180:	000018d7 	.word	0x000018d7
 184:	000018d7 	.word	0x000018d7
 188:	000018d7 	.word	0x000018d7
 18c:	000018d7 	.word	0x000018d7
 190:	000018d7 	.word	0x000018d7
 194:	000018d7 	.word	0x000018d7
 198:	000018d7 	.word	0x000018d7
 19c:	000018d7 	.word	0x000018d7
 1a0:	000018d7 	.word	0x000018d7
 1a4:	000018d7 	.word	0x000018d7
 1a8:	000018d7 	.word	0x000018d7
 1ac:	000018d7 	.word	0x000018d7
 1b0:	000018d7 	.word	0x000018d7
 1b4:	000018d7 	.word	0x000018d7
 1b8:	000018d7 	.word	0x000018d7
 1bc:	000018d7 	.word	0x000018d7
 1c0:	000018d7 	.word	0x000018d7
 1c4:	000018d7 	.word	0x000018d7
 1c8:	000018d7 	.word	0x000018d7
 1cc:	000018d7 	.word	0x000018d7
 1d0:	000018d7 	.word	0x000018d7
 1d4:	000018d7 	.word	0x000018d7
 1d8:	000018d7 	.word	0x000018d7
 1dc:	000018d7 	.word	0x000018d7
 1e0:	000018d7 	.word	0x000018d7
 1e4:	000018d7 	.word	0x000018d7
 1e8:	000018d7 	.word	0x000018d7
 1ec:	000018d7 	.word	0x000018d7
 1f0:	000018d7 	.word	0x000018d7
 1f4:	000018d7 	.word	0x000018d7
 1f8:	000018d7 	.word	0x000018d7
 1fc:	000018d7 	.word	0x000018d7
 200:	000018d7 	.word	0x000018d7
 204:	000018d7 	.word	0x000018d7
 208:	000018d7 	.word	0x000018d7
 20c:	000018d7 	.word	0x000018d7
 210:	000018d7 	.word	0x000018d7
 214:	000018d7 	.word	0x000018d7
 218:	000018d7 	.word	0x000018d7
 21c:	000018d7 	.word	0x000018d7
 220:	000018d7 	.word	0x000018d7
 224:	000018d7 	.word	0x000018d7
 228:	000018d7 	.word	0x000018d7
 22c:	000018d7 	.word	0x000018d7
 230:	000018d7 	.word	0x000018d7
 234:	000018d7 	.word	0x000018d7
 238:	000018d7 	.word	0x000018d7
 23c:	000018d7 	.word	0x000018d7
 240:	000018d7 	.word	0x000018d7
 244:	000018d7 	.word	0x000018d7
 248:	000018d7 	.word	0x000018d7
 24c:	000018d7 	.word	0x000018d7
 250:	000018d7 	.word	0x000018d7
 254:	000018d7 	.word	0x000018d7
 258:	000018d7 	.word	0x000018d7
 25c:	000018d7 	.word	0x000018d7
 260:	000018d7 	.word	0x000018d7
 264:	000018d7 	.word	0x000018d7
 268:	000018d7 	.word	0x000018d7
 26c:	000018d7 	.word	0x000018d7
 270:	000018d7 	.word	0x000018d7
 274:	000018d7 	.word	0x000018d7
 278:	000018d7 	.word	0x000018d7
 27c:	000018d7 	.word	0x000018d7
 280:	000018d7 	.word	0x000018d7
 284:	000018d7 	.word	0x000018d7
 288:	000018d7 	.word	0x000018d7
 28c:	000018d7 	.word	0x000018d7
 290:	000018d7 	.word	0x000018d7
 294:	000018d7 	.word	0x000018d7
 298:	000018d7 	.word	0x000018d7
 29c:	000018d7 	.word	0x000018d7
 2a0:	000018d7 	.word	0x000018d7
 2a4:	000018d7 	.word	0x000018d7
 2a8:	000018d7 	.word	0x000018d7
 2ac:	000018d7 	.word	0x000018d7
 2b0:	000018d7 	.word	0x000018d7
 2b4:	000018d7 	.word	0x000018d7
 2b8:	000018d7 	.word	0x000018d7
 2bc:	000018d7 	.word	0x000018d7
 2c0:	000018d7 	.word	0x000018d7
 2c4:	000018d7 	.word	0x000018d7
 2c8:	000018d7 	.word	0x000018d7
 2cc:	000018d7 	.word	0x000018d7
 2d0:	000018d7 	.word	0x000018d7
 2d4:	000018d7 	.word	0x000018d7
 2d8:	000018d7 	.word	0x000018d7
 2dc:	000018d7 	.word	0x000018d7
 2e0:	000018d7 	.word	0x000018d7
 2e4:	000018d7 	.word	0x000018d7
 2e8:	000018d7 	.word	0x000018d7
 2ec:	000018d7 	.word	0x000018d7
 2f0:	000018d7 	.word	0x000018d7
 2f4:	000018d7 	.word	0x000018d7
 2f8:	000018d7 	.word	0x000018d7
 2fc:	000018d7 	.word	0x000018d7
 300:	000018d7 	.word	0x000018d7
 304:	000018d7 	.word	0x000018d7
 308:	000018d7 	.word	0x000018d7
 30c:	000018d7 	.word	0x000018d7

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f001 f957 	bl	1734 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f001 fa16 	bl	18bc <startup_go_to_user_mode>
     490:	f000 fa0e 	bl	8b0 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff97f0 	.word	0x1fff97f0

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f001 f961 	bl	1860 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <main>:
 * 
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void ) {
     8b0:	b508      	push	{r3, lr}
    EcuM_Init();    //MCU configuration.
     8b2:	f001 fd2d 	bl	2310 <EcuM_Init>
    IoHwAb_Init0( NULL_PTR );  //Initializing IO hardware abstractions.
     8b6:	2000      	movs	r0, #0
     8b8:	f000 ff24 	bl	1704 <IoHwAb_Init0>
    SEGGER_RTT_Init();  //Initializing RTT library.
     8bc:	f001 f99e 	bl	1bfc <SEGGER_RTT_Init>
    Scheduler_Init( &Scheduler_Control );   //Initializing control structure for scheduler.
     8c0:	4802      	ldr	r0, [pc, #8]	; (8cc <main+0x1c>)
     8c2:	f000 f8eb 	bl	a9c <Scheduler_Init>

    while( 1u ) {
        Scheduler_MainFunction();
     8c6:	f000 f9df 	bl	c88 <Scheduler_MainFunction>
     8ca:	e7fc      	b.n	8c6 <main+0x16>
     8cc:	1fff9780 	.word	0x1fff9780

000008d0 <DevAssert>:
    #error "Unsupported architecture!"
#endif

/* Implement default assert macro */
static inline void DevAssert(volatile boolean x)
{
     8d0:	b082      	sub	sp, #8
     8d2:	4603      	mov	r3, r0
     8d4:	f88d 3007 	strb.w	r3, [sp, #7]
    if(x) { } else { for(;;) {ASM_KEYWORD(BREAKPOINT_INSTR);} }
     8d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
     8dc:	b2db      	uxtb	r3, r3
     8de:	2b00      	cmp	r3, #0
     8e0:	d101      	bne.n	8e6 <DevAssert+0x16>
     8e2:	be00      	bkpt	0x0000
     8e4:	e7fd      	b.n	8e2 <DevAssert+0x12>
}
     8e6:	bf00      	nop
     8e8:	b002      	add	sp, #8
     8ea:	4770      	bx	lr

000008ec <DevAssert>:
{
     8ec:	b082      	sub	sp, #8
     8ee:	4603      	mov	r3, r0
     8f0:	f88d 3007 	strb.w	r3, [sp, #7]
    if(x) { } else { for(;;) {ASM_KEYWORD(BREAKPOINT_INSTR);} }
     8f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     8f8:	b2db      	uxtb	r3, r3
     8fa:	2b00      	cmp	r3, #0
     8fc:	d101      	bne.n	902 <DevAssert+0x16>
     8fe:	be00      	bkpt	0x0000
     900:	e7fd      	b.n	8fe <DevAssert+0x12>
}
     902:	bf00      	nop
     904:	b002      	add	sp, #8
     906:	4770      	bx	lr

00000908 <Adc_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Adc_schm_read_msr(void)
{
     908:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     90a:	f3ef 8310 	mrs	r3, PRIMASK
     90e:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     910:	4623      	mov	r3, r4
}
     912:	4618      	mov	r0, r3
     914:	f85d 4b04 	ldr.w	r4, [sp], #4
     918:	4770      	bx	lr

0000091a <Dio_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Dio_schm_read_msr(void)
{
     91a:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     91c:	f3ef 8310 	mrs	r3, PRIMASK
     920:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     922:	4623      	mov	r3, r4
}
     924:	4618      	mov	r0, r3
     926:	f85d 4b04 	ldr.w	r4, [sp], #4
     92a:	4770      	bx	lr

0000092c <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     92c:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     92e:	f3ef 8310 	mrs	r3, PRIMASK
     932:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     934:	4623      	mov	r3, r4
}
     936:	4618      	mov	r0, r3
     938:	f85d 4b04 	ldr.w	r4, [sp], #4
     93c:	4770      	bx	lr

0000093e <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     93e:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     940:	f3ef 8310 	mrs	r3, PRIMASK
     944:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     946:	4623      	mov	r3, r4
}
     948:	4618      	mov	r0, r3
     94a:	f85d 4b04 	ldr.w	r4, [sp], #4
     94e:	4770      	bx	lr

00000950 <Pwm_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Pwm_schm_read_msr(void)
{
     950:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     952:	f3ef 8310 	mrs	r3, PRIMASK
     956:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     958:	4623      	mov	r3, r4
}
     95a:	4618      	mov	r0, r3
     95c:	f85d 4b04 	ldr.w	r4, [sp], #4
     960:	4770      	bx	lr

00000962 <Bfx_SetBit_u32u8>:
 * @param[in] BitPn Bit position.
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_SetBit_u32u8( uint32* Data, uint8 BitPn ) {
     962:	b082      	sub	sp, #8
     964:	9001      	str	r0, [sp, #4]
     966:	460b      	mov	r3, r1
     968:	f88d 3003 	strb.w	r3, [sp, #3]
    *Data |= ( 1 << BitPn ); 
     96c:	9b01      	ldr	r3, [sp, #4]
     96e:	681b      	ldr	r3, [r3, #0]
     970:	f89d 2003 	ldrb.w	r2, [sp, #3]
     974:	2101      	movs	r1, #1
     976:	fa01 f202 	lsl.w	r2, r1, r2
     97a:	431a      	orrs	r2, r3
     97c:	9b01      	ldr	r3, [sp, #4]
     97e:	601a      	str	r2, [r3, #0]
}
     980:	bf00      	nop
     982:	b002      	add	sp, #8
     984:	4770      	bx	lr

00000986 <Bfx_ClrBit_u32u8>:
 * @param[in] BitPn Bit position.
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_ClrBit_u32u8( uint32* Data, uint8 BitPn ) {
     986:	b082      	sub	sp, #8
     988:	9001      	str	r0, [sp, #4]
     98a:	460b      	mov	r3, r1
     98c:	f88d 3003 	strb.w	r3, [sp, #3]
    *Data &= ~( 1 << BitPn );
     990:	9b01      	ldr	r3, [sp, #4]
     992:	681b      	ldr	r3, [r3, #0]
     994:	f89d 2003 	ldrb.w	r2, [sp, #3]
     998:	2101      	movs	r1, #1
     99a:	fa01 f202 	lsl.w	r2, r1, r2
     99e:	43d2      	mvns	r2, r2
     9a0:	401a      	ands	r2, r3
     9a2:	9b01      	ldr	r3, [sp, #4]
     9a4:	601a      	str	r2, [r3, #0]
}
     9a6:	bf00      	nop
     9a8:	b002      	add	sp, #8
     9aa:	4770      	bx	lr

000009ac <Bfx_GetBit_u32u8_u8>:
 * @param[in] BitPn Bit position.
 * @retval Result It indicates the value of the bit of interest.
 * 
 * @note The max BitPn value is 31
 */
static inline boolean Bfx_GetBit_u32u8_u8( uint32 Data, uint8 BitPn ) {
     9ac:	b084      	sub	sp, #16
     9ae:	9001      	str	r0, [sp, #4]
     9b0:	460b      	mov	r3, r1
     9b2:	f88d 3003 	strb.w	r3, [sp, #3]
    //local data.
    boolean Result = FALSE;
     9b6:	2300      	movs	r3, #0
     9b8:	f88d 300f 	strb.w	r3, [sp, #15]
    
    Result = ( Data & ( 1 << BitPn ) ) != 0;
     9bc:	f89d 3003 	ldrb.w	r3, [sp, #3]
     9c0:	2201      	movs	r2, #1
     9c2:	fa02 f303 	lsl.w	r3, r2, r3
     9c6:	461a      	mov	r2, r3
     9c8:	9b01      	ldr	r3, [sp, #4]
     9ca:	4013      	ands	r3, r2
     9cc:	2b00      	cmp	r3, #0
     9ce:	bf14      	ite	ne
     9d0:	2301      	movne	r3, #1
     9d2:	2300      	moveq	r3, #0
     9d4:	f88d 300f 	strb.w	r3, [sp, #15]
    return Result;
     9d8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     9dc:	4618      	mov	r0, r3
     9de:	b004      	add	sp, #16
     9e0:	4770      	bx	lr

000009e2 <Bfx_PutBit_u32u8u8>:
 * @param[in] Status Status value (TRUE or FALSE).
 * 
 * @note The operation is done by pointer dereference.
 * @note The max BitPn value is 31.
 */
static inline void Bfx_PutBit_u32u8u8( uint32* Data, uint8 BitPn, boolean Status ) {
     9e2:	b082      	sub	sp, #8
     9e4:	9001      	str	r0, [sp, #4]
     9e6:	460b      	mov	r3, r1
     9e8:	f88d 3003 	strb.w	r3, [sp, #3]
     9ec:	4613      	mov	r3, r2
     9ee:	f88d 3002 	strb.w	r3, [sp, #2]
    if ( Status == TRUE ) { //Setting bit.
     9f2:	f89d 3002 	ldrb.w	r3, [sp, #2]
     9f6:	2b00      	cmp	r3, #0
     9f8:	d00a      	beq.n	a10 <Bfx_PutBit_u32u8u8+0x2e>
        *Data |= ( 1 << BitPn ); 
     9fa:	9b01      	ldr	r3, [sp, #4]
     9fc:	681b      	ldr	r3, [r3, #0]
     9fe:	f89d 2003 	ldrb.w	r2, [sp, #3]
     a02:	2101      	movs	r1, #1
     a04:	fa01 f202 	lsl.w	r2, r1, r2
     a08:	431a      	orrs	r2, r3
     a0a:	9b01      	ldr	r3, [sp, #4]
     a0c:	601a      	str	r2, [r3, #0]
    }

    else { //Clearing bit.
        *Data &= ~( 1 << BitPn );
    }
}
     a0e:	e00a      	b.n	a26 <Bfx_PutBit_u32u8u8+0x44>
        *Data &= ~( 1 << BitPn );
     a10:	9b01      	ldr	r3, [sp, #4]
     a12:	681b      	ldr	r3, [r3, #0]
     a14:	f89d 2003 	ldrb.w	r2, [sp, #3]
     a18:	2101      	movs	r1, #1
     a1a:	fa01 f202 	lsl.w	r2, r1, r2
     a1e:	43d2      	mvns	r2, r2
     a20:	401a      	ands	r2, r3
     a22:	9b01      	ldr	r3, [sp, #4]
     a24:	601a      	str	r2, [r3, #0]
}
     a26:	bf00      	nop
     a28:	b002      	add	sp, #8
     a2a:	4770      	bx	lr

00000a2c <Scheduler_InitQueue>:
/**
 * @brief This function initialices the queue buffer control members.
 * 
 * @param[in] SchedulerPtr Ptr to control struct instance, it allows the init of the members.
 */
void Scheduler_InitQueue( Scheduler_CtrlType *SchedulerPtr ) {
     a2c:	b500      	push	{lr}
     a2e:	b085      	sub	sp, #20
     a30:	9001      	str	r0, [sp, #4]
    //local data.
    uint8 i = 0;
     a32:	2300      	movs	r3, #0
     a34:	f88d 300f 	strb.w	r3, [sp, #15]

    //Initializing members.
    for ( i = 0; i < SCHEDULER_MAX_QUEUES; i++ ) {
     a38:	2300      	movs	r3, #0
     a3a:	f88d 300f 	strb.w	r3, [sp, #15]
     a3e:	e023      	b.n	a88 <Scheduler_InitQueue+0x5c>
        SchedulerPtr->QueueHeads[i] = 0;
     a40:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a44:	9b01      	ldr	r3, [sp, #4]
     a46:	3208      	adds	r2, #8
     a48:	2100      	movs	r1, #0
     a4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        SchedulerPtr->QueueTails[i] = 0;
     a4e:	f89d 300f 	ldrb.w	r3, [sp, #15]
     a52:	9a01      	ldr	r2, [sp, #4]
     a54:	3308      	adds	r3, #8
     a56:	009b      	lsls	r3, r3, #2
     a58:	4413      	add	r3, r2
     a5a:	2200      	movs	r2, #0
     a5c:	605a      	str	r2, [r3, #4]
        Bfx_ClrBit_u32u8( &SchedulerPtr->QueueFulls, i );
     a5e:	9b01      	ldr	r3, [sp, #4]
     a60:	332c      	adds	r3, #44	; 0x2c
     a62:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a66:	4611      	mov	r1, r2
     a68:	4618      	mov	r0, r3
     a6a:	f7ff ff8c 	bl	986 <Bfx_ClrBit_u32u8>
        Bfx_SetBit_u32u8( &SchedulerPtr->QueueEmpties, i );
     a6e:	9b01      	ldr	r3, [sp, #4]
     a70:	3328      	adds	r3, #40	; 0x28
     a72:	f89d 200f 	ldrb.w	r2, [sp, #15]
     a76:	4611      	mov	r1, r2
     a78:	4618      	mov	r0, r3
     a7a:	f7ff ff72 	bl	962 <Bfx_SetBit_u32u8>
    for ( i = 0; i < SCHEDULER_MAX_QUEUES; i++ ) {
     a7e:	f89d 300f 	ldrb.w	r3, [sp, #15]
     a82:	3301      	adds	r3, #1
     a84:	f88d 300f 	strb.w	r3, [sp, #15]
     a88:	f89d 300f 	ldrb.w	r3, [sp, #15]
     a8c:	2b00      	cmp	r3, #0
     a8e:	d0d7      	beq.n	a40 <Scheduler_InitQueue+0x14>
    }
}
     a90:	bf00      	nop
     a92:	bf00      	nop
     a94:	b005      	add	sp, #20
     a96:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00000a9c <Scheduler_Init>:
 *
 * @note The timeout and periodicity values are the initial values registered in the buffers.
 * @note The elapsed and count values are initialized to 0 and timeout values respectively.
 * @note All the flags are initialiced to the initial values registered in the buffers.
 */
Std_ReturnType Scheduler_Init( Scheduler_CtrlType *SchedulerPtr ) {
     a9c:	b500      	push	{lr}
     a9e:	b085      	sub	sp, #20
     aa0:	9001      	str	r0, [sp, #4]
    //local data 
    Std_ReturnType status = E_OK;
     aa2:	2300      	movs	r3, #0
     aa4:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 i = 0;
     aa8:	2300      	movs	r3, #0
     aaa:	f88d 300e 	strb.w	r3, [sp, #14]

    //Verifying config pointer.
    #if ( SCHEDULER_DEV_ERROR_DETECT == STD_ON )
        if ( SchedulerPtr == NULL_PTR ) { //Invalid pointer
     aae:	9b01      	ldr	r3, [sp, #4]
     ab0:	2b00      	cmp	r3, #0
     ab2:	d109      	bne.n	ac8 <Scheduler_Init+0x2c>
            Det_ReportError( SCHEDULER_MODULE_ID, SCHEDULER_INSTANCE_ID, SCHEDULER_INIT_ID, SCHEDULER_E_PARAM_CONFIG );
     ab4:	2300      	movs	r3, #0
     ab6:	2200      	movs	r2, #0
     ab8:	2100      	movs	r1, #0
     aba:	f44f 7096 	mov.w	r0, #300	; 0x12c
     abe:	f018 f905 	bl	18ccc <Det_ReportError>
            status = E_NOT_OK;
     ac2:	2301      	movs	r3, #1
     ac4:	f88d 300f 	strb.w	r3, [sp, #15]
        }
    #endif

    if ( status == E_OK ) {
     ac8:	f89d 300f 	ldrb.w	r3, [sp, #15]
     acc:	2b00      	cmp	r3, #0
     ace:	f040 808b 	bne.w	be8 <Scheduler_Init+0x14c>
        //Initializing tasks related parameters.
        for ( i = 0; i < SCHEDULER_MAX_TASKS; i++ ) {
     ad2:	2300      	movs	r3, #0
     ad4:	f88d 300e 	strb.w	r3, [sp, #14]
     ad8:	e033      	b.n	b42 <Scheduler_Init+0xa6>
            SchedulerPtr->TaskPeriod[i] = SchedulerConfig_Ptr->TaskPtr[i].InitPeriod;   //Registering initial periodicity value of each task.
     ada:	4b46      	ldr	r3, [pc, #280]	; (bf4 <Scheduler_Init+0x158>)
     adc:	681b      	ldr	r3, [r3, #0]
     ade:	6899      	ldr	r1, [r3, #8]
     ae0:	f89d 200e 	ldrb.w	r2, [sp, #14]
     ae4:	4613      	mov	r3, r2
     ae6:	005b      	lsls	r3, r3, #1
     ae8:	4413      	add	r3, r2
     aea:	009b      	lsls	r3, r3, #2
     aec:	440b      	add	r3, r1
     aee:	f89d 200e 	ldrb.w	r2, [sp, #14]
     af2:	6819      	ldr	r1, [r3, #0]
     af4:	9b01      	ldr	r3, [sp, #4]
     af6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            SchedulerPtr->TaskElapsed[i] = 0;   //Initializing time follow up of each task.
     afa:	f89d 200e 	ldrb.w	r2, [sp, #14]
     afe:	9b01      	ldr	r3, [sp, #4]
     b00:	3202      	adds	r2, #2
     b02:	2100      	movs	r1, #0
     b04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            Bfx_PutBit_u32u8u8( &SchedulerPtr->TaskFlags, i, SchedulerConfig_Ptr->TaskPtr[i].InitFlag  );   //Registering initial flag of each task. 
     b08:	9b01      	ldr	r3, [sp, #4]
     b0a:	f103 0018 	add.w	r0, r3, #24
     b0e:	4b39      	ldr	r3, [pc, #228]	; (bf4 <Scheduler_Init+0x158>)
     b10:	681b      	ldr	r3, [r3, #0]
     b12:	6899      	ldr	r1, [r3, #8]
     b14:	f89d 200e 	ldrb.w	r2, [sp, #14]
     b18:	4613      	mov	r3, r2
     b1a:	005b      	lsls	r3, r3, #1
     b1c:	4413      	add	r3, r2
     b1e:	009b      	lsls	r3, r3, #2
     b20:	440b      	add	r3, r1
     b22:	791b      	ldrb	r3, [r3, #4]
     b24:	2b00      	cmp	r3, #0
     b26:	bf14      	ite	ne
     b28:	2301      	movne	r3, #1
     b2a:	2300      	moveq	r3, #0
     b2c:	b2da      	uxtb	r2, r3
     b2e:	f89d 300e 	ldrb.w	r3, [sp, #14]
     b32:	4619      	mov	r1, r3
     b34:	f7ff ff55 	bl	9e2 <Bfx_PutBit_u32u8u8>
        for ( i = 0; i < SCHEDULER_MAX_TASKS; i++ ) {
     b38:	f89d 300e 	ldrb.w	r3, [sp, #14]
     b3c:	3301      	adds	r3, #1
     b3e:	f88d 300e 	strb.w	r3, [sp, #14]
     b42:	f89d 300e 	ldrb.w	r3, [sp, #14]
     b46:	2b01      	cmp	r3, #1
     b48:	d9c7      	bls.n	ada <Scheduler_Init+0x3e>
        }

        //Initializing timers related parameters.
        for ( i = 0; i < SCHEDULER_MAX_TIMERS; i++ ) {
     b4a:	2300      	movs	r3, #0
     b4c:	f88d 300e 	strb.w	r3, [sp, #14]
     b50:	e03f      	b.n	bd2 <Scheduler_Init+0x136>
            SchedulerPtr->TimerTimeout[i] = SchedulerConfig_Ptr->TimerPtr[i].InitTimeout;   //Registering initial timeout value of each timer.
     b52:	4b28      	ldr	r3, [pc, #160]	; (bf4 <Scheduler_Init+0x158>)
     b54:	681b      	ldr	r3, [r3, #0]
     b56:	6919      	ldr	r1, [r3, #16]
     b58:	f89d 200e 	ldrb.w	r2, [sp, #14]
     b5c:	4613      	mov	r3, r2
     b5e:	005b      	lsls	r3, r3, #1
     b60:	4413      	add	r3, r2
     b62:	009b      	lsls	r3, r3, #2
     b64:	440b      	add	r3, r1
     b66:	f89d 200e 	ldrb.w	r2, [sp, #14]
     b6a:	6819      	ldr	r1, [r3, #0]
     b6c:	9b01      	ldr	r3, [sp, #4]
     b6e:	3204      	adds	r2, #4
     b70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            SchedulerPtr->TimerCount[i] = SchedulerConfig_Ptr->TimerPtr[i].InitTimeout; //Initializing timer count of each timer.
     b74:	4b1f      	ldr	r3, [pc, #124]	; (bf4 <Scheduler_Init+0x158>)
     b76:	681b      	ldr	r3, [r3, #0]
     b78:	6919      	ldr	r1, [r3, #16]
     b7a:	f89d 200e 	ldrb.w	r2, [sp, #14]
     b7e:	4613      	mov	r3, r2
     b80:	005b      	lsls	r3, r3, #1
     b82:	4413      	add	r3, r2
     b84:	009b      	lsls	r3, r3, #2
     b86:	18ca      	adds	r2, r1, r3
     b88:	f89d 300e 	ldrb.w	r3, [sp, #14]
     b8c:	6812      	ldr	r2, [r2, #0]
     b8e:	9901      	ldr	r1, [sp, #4]
     b90:	3304      	adds	r3, #4
     b92:	009b      	lsls	r3, r3, #2
     b94:	440b      	add	r3, r1
     b96:	605a      	str	r2, [r3, #4]
            Bfx_PutBit_u32u8u8( &SchedulerPtr->TimerFlags, i, SchedulerConfig_Ptr->TimerPtr[i].InitFlag  );   //Registering initial flag of each timer.
     b98:	9b01      	ldr	r3, [sp, #4]
     b9a:	f103 001c 	add.w	r0, r3, #28
     b9e:	4b15      	ldr	r3, [pc, #84]	; (bf4 <Scheduler_Init+0x158>)
     ba0:	681b      	ldr	r3, [r3, #0]
     ba2:	6919      	ldr	r1, [r3, #16]
     ba4:	f89d 200e 	ldrb.w	r2, [sp, #14]
     ba8:	4613      	mov	r3, r2
     baa:	005b      	lsls	r3, r3, #1
     bac:	4413      	add	r3, r2
     bae:	009b      	lsls	r3, r3, #2
     bb0:	440b      	add	r3, r1
     bb2:	791b      	ldrb	r3, [r3, #4]
     bb4:	2b00      	cmp	r3, #0
     bb6:	bf14      	ite	ne
     bb8:	2301      	movne	r3, #1
     bba:	2300      	moveq	r3, #0
     bbc:	b2da      	uxtb	r2, r3
     bbe:	f89d 300e 	ldrb.w	r3, [sp, #14]
     bc2:	4619      	mov	r1, r3
     bc4:	f7ff ff0d 	bl	9e2 <Bfx_PutBit_u32u8u8>
        for ( i = 0; i < SCHEDULER_MAX_TIMERS; i++ ) {
     bc8:	f89d 300e 	ldrb.w	r3, [sp, #14]
     bcc:	3301      	adds	r3, #1
     bce:	f88d 300e 	strb.w	r3, [sp, #14]
     bd2:	f89d 300e 	ldrb.w	r3, [sp, #14]
     bd6:	2b00      	cmp	r3, #0
     bd8:	d0bb      	beq.n	b52 <Scheduler_Init+0xb6>
        } 

        Scheduler_InitQueue( SchedulerPtr ); //Initializing queues related parameters.
     bda:	9801      	ldr	r0, [sp, #4]
     bdc:	f7ff ff26 	bl	a2c <Scheduler_InitQueue>
        SchedulerPtr->SchedulerInit = TRUE;   
     be0:	9b01      	ldr	r3, [sp, #4]
     be2:	2201      	movs	r2, #1
     be4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    }

    return status;
     be8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     bec:	4618      	mov	r0, r3
     bee:	b005      	add	sp, #20
     bf0:	f85d fb04 	ldr.w	pc, [sp], #4
     bf4:	1fff8b54 	.word	0x1fff8b54

00000bf8 <Scheduler_GetTimer>:
 *
 * @retval counter_value Actual count value of timer, if operation was a success counter_value = n, otherwise 1. 
 *
 * @note The timer ID must be valid.
 */
uint32 Scheduler_GetTimer( TimerType Timer ) {
     bf8:	b500      	push	{lr}
     bfa:	b085      	sub	sp, #20
     bfc:	4603      	mov	r3, r0
     bfe:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data
    uint32 counter_value = 0;
     c02:	2300      	movs	r3, #0
     c04:	9303      	str	r3, [sp, #12]
    uint8 status = E_OK;
     c06:	2300      	movs	r3, #0
     c08:	f88d 300b 	strb.w	r3, [sp, #11]

    #if ( SCHEDULER_DEV_ERROR_DETECT == STD_ON )
        if ( SchedulerCtrl_Ptr->SchedulerInit  == FALSE ) { //Scheduler not initialized.
     c0c:	4b1c      	ldr	r3, [pc, #112]	; (c80 <Scheduler_GetTimer+0x88>)
     c0e:	681b      	ldr	r3, [r3, #0]
     c10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
     c14:	f083 0301 	eor.w	r3, r3, #1
     c18:	b2db      	uxtb	r3, r3
     c1a:	2b00      	cmp	r3, #0
     c1c:	d00b      	beq.n	c36 <Scheduler_GetTimer+0x3e>
            Det_ReportError( SCHEDULER_MODULE_ID, SCHEDULER_INSTANCE_ID, SCHEDULER_GETSTATUSQUEUE_ID, SCHEDULER_E_UNINIT );
     c1e:	2306      	movs	r3, #6
     c20:	2202      	movs	r2, #2
     c22:	2100      	movs	r1, #0
     c24:	f44f 7096 	mov.w	r0, #300	; 0x12c
     c28:	f018 f850 	bl	18ccc <Det_ReportError>
            status = E_NOT_OK;
     c2c:	2301      	movs	r3, #1
     c2e:	f88d 300b 	strb.w	r3, [sp, #11]
            counter_value = E_NOT_OK;
     c32:	2301      	movs	r3, #1
     c34:	9303      	str	r3, [sp, #12]
        }

        if ( Timer > SchedulerConfig_Ptr->Timers - 1 ) {    //Invalid timer id.
     c36:	4b13      	ldr	r3, [pc, #76]	; (c84 <Scheduler_GetTimer+0x8c>)
     c38:	681b      	ldr	r3, [r3, #0]
     c3a:	7b1b      	ldrb	r3, [r3, #12]
     c3c:	f89d 2007 	ldrb.w	r2, [sp, #7]
     c40:	429a      	cmp	r2, r3
     c42:	d30b      	bcc.n	c5c <Scheduler_GetTimer+0x64>
            Det_ReportError( SCHEDULER_MODULE_ID, SCHEDULER_INSTANCE_ID, SCHEDULER_GETSTATUSQUEUE_ID, SCHEDULER_E_TIMER_ID );
     c44:	2305      	movs	r3, #5
     c46:	2202      	movs	r2, #2
     c48:	2100      	movs	r1, #0
     c4a:	f44f 7096 	mov.w	r0, #300	; 0x12c
     c4e:	f018 f83d 	bl	18ccc <Det_ReportError>
            status = E_NOT_OK;
     c52:	2301      	movs	r3, #1
     c54:	f88d 300b 	strb.w	r3, [sp, #11]
            counter_value = E_NOT_OK;
     c58:	2301      	movs	r3, #1
     c5a:	9303      	str	r3, [sp, #12]
        }
    #endif

    if ( status == E_OK ) {
     c5c:	f89d 300b 	ldrb.w	r3, [sp, #11]
     c60:	2b00      	cmp	r3, #0
     c62:	d108      	bne.n	c76 <Scheduler_GetTimer+0x7e>
        counter_value = SchedulerCtrl_Ptr->TimerCount[ Timer ];
     c64:	4b06      	ldr	r3, [pc, #24]	; (c80 <Scheduler_GetTimer+0x88>)
     c66:	681a      	ldr	r2, [r3, #0]
     c68:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c6c:	3304      	adds	r3, #4
     c6e:	009b      	lsls	r3, r3, #2
     c70:	4413      	add	r3, r2
     c72:	685b      	ldr	r3, [r3, #4]
     c74:	9303      	str	r3, [sp, #12]
    }

    return counter_value;
     c76:	9b03      	ldr	r3, [sp, #12]
}
     c78:	4618      	mov	r0, r3
     c7a:	b005      	add	sp, #20
     c7c:	f85d fb04 	ldr.w	pc, [sp], #4
     c80:	1fff8b58 	.word	0x1fff8b58
     c84:	1fff8b54 	.word	0x1fff8b54

00000c88 <Scheduler_MainFunction>:
 *
 * @note At least 1 timer and 1 task needs to be register in order to the scheduler to work.
 * @note After a timer reaches 0 is important to restart, stop or reload that timer else it will still decrement --> risk of overflow.
 * @note It´s important that previous to using the scheduler the buffers for the timers and task must be correctly defined, specially their flags.
 */
void Scheduler_MainFunction( void ) {
     c88:	b500      	push	{lr}
     c8a:	b085      	sub	sp, #20
    //local data
    uint32 tick_value = OsIf_MicrosToTicks( SchedulerConfig_Ptr->Tick * 1000, OSIF_COUNTER_SYSTEM );    //Translating tick value from us to counter increments.
     c8c:	4b6c      	ldr	r3, [pc, #432]	; (e40 <Scheduler_MainFunction+0x1b8>)
     c8e:	681b      	ldr	r3, [r3, #0]
     c90:	681b      	ldr	r3, [r3, #0]
     c92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     c96:	fb02 f303 	mul.w	r3, r2, r3
     c9a:	2101      	movs	r1, #1
     c9c:	4618      	mov	r0, r3
     c9e:	f001 ff43 	bl	2b28 <OsIf_MicrosToTicks>
     ca2:	9001      	str	r0, [sp, #4]
    uint32 count_value = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );    //First counter value capture.
     ca4:	2001      	movs	r0, #1
     ca6:	f001 fef3 	bl	2a90 <OsIf_GetCounter>
     caa:	4603      	mov	r3, r0
     cac:	9300      	str	r3, [sp, #0]
    uint32 elapsed_time = 0;    //Time follow up for tick (timer increments).
     cae:	2300      	movs	r3, #0
     cb0:	9303      	str	r3, [sp, #12]
    uint8 i = 0;
     cb2:	2300      	movs	r3, #0
     cb4:	f88d 300b 	strb.w	r3, [sp, #11]
    uint8 status = E_OK;
     cb8:	2300      	movs	r3, #0
     cba:	f88d 300a 	strb.w	r3, [sp, #10]

    #if ( SCHEDULER_DEV_ERROR_DETECT == STD_ON )
        if ( SchedulerCtrl_Ptr->SchedulerInit  == FALSE ) { //Scheduler not initialized.
     cbe:	4b61      	ldr	r3, [pc, #388]	; (e44 <Scheduler_MainFunction+0x1bc>)
     cc0:	681b      	ldr	r3, [r3, #0]
     cc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
     cc6:	f083 0301 	eor.w	r3, r3, #1
     cca:	b2db      	uxtb	r3, r3
     ccc:	2b00      	cmp	r3, #0
     cce:	d009      	beq.n	ce4 <Scheduler_MainFunction+0x5c>
            Det_ReportError( SCHEDULER_MODULE_ID, SCHEDULER_INSTANCE_ID, SCHEDULER_GETSTATUSQUEUE_ID, SCHEDULER_E_UNINIT );
     cd0:	2306      	movs	r3, #6
     cd2:	2202      	movs	r2, #2
     cd4:	2100      	movs	r1, #0
     cd6:	f44f 7096 	mov.w	r0, #300	; 0x12c
     cda:	f017 fff7 	bl	18ccc <Det_ReportError>
            status = E_NOT_OK;
     cde:	2301      	movs	r3, #1
     ce0:	f88d 300a 	strb.w	r3, [sp, #10]
        }
    #endif
      
    if ( status == E_OK ) {
     ce4:	f89d 300a 	ldrb.w	r3, [sp, #10]
     ce8:	2b00      	cmp	r3, #0
     cea:	f040 80a5 	bne.w	e38 <Scheduler_MainFunction+0x1b0>
        while( 1 ) {    //tasks are executed during timeout.
            //Time follow up update for tick.
            elapsed_time += OsIf_GetElapsed( &count_value, OSIF_COUNTER_SYSTEM );   //time capture update
     cee:	466b      	mov	r3, sp
     cf0:	2101      	movs	r1, #1
     cf2:	4618      	mov	r0, r3
     cf4:	f001 fee5 	bl	2ac2 <OsIf_GetElapsed>
     cf8:	4602      	mov	r2, r0
     cfa:	9b03      	ldr	r3, [sp, #12]
     cfc:	4413      	add	r3, r2
     cfe:	9303      	str	r3, [sp, #12]
        
            //Verifying if a scheduler´s tick has occurred.
            if ( elapsed_time >= tick_value ) {          
     d00:	9a03      	ldr	r2, [sp, #12]
     d02:	9b01      	ldr	r3, [sp, #4]
     d04:	429a      	cmp	r2, r3
     d06:	d3f2      	bcc.n	cee <Scheduler_MainFunction+0x66>
            
                //Executing timers
                for ( i = 0; i < SchedulerConfig_Ptr->Timers; i++ ) {
     d08:	2300      	movs	r3, #0
     d0a:	f88d 300b 	strb.w	r3, [sp, #11]
     d0e:	e038      	b.n	d82 <Scheduler_MainFunction+0xfa>
                    //Verifying execution of timer i
                    if ( Bfx_GetBit_u32u8_u8( SchedulerCtrl_Ptr->TimerFlags, i ) == TRUE ) {    //timer activated
     d10:	4b4c      	ldr	r3, [pc, #304]	; (e44 <Scheduler_MainFunction+0x1bc>)
     d12:	681b      	ldr	r3, [r3, #0]
     d14:	69db      	ldr	r3, [r3, #28]
     d16:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d1a:	4611      	mov	r1, r2
     d1c:	4618      	mov	r0, r3
     d1e:	f7ff fe45 	bl	9ac <Bfx_GetBit_u32u8_u8>
     d22:	4603      	mov	r3, r0
     d24:	2b00      	cmp	r3, #0
     d26:	d027      	beq.n	d78 <Scheduler_MainFunction+0xf0>
                        SchedulerCtrl_Ptr->TimerCount[i] -= SchedulerConfig_Ptr->Tick;    //decrement
     d28:	4b46      	ldr	r3, [pc, #280]	; (e44 <Scheduler_MainFunction+0x1bc>)
     d2a:	681a      	ldr	r2, [r3, #0]
     d2c:	f89d 300b 	ldrb.w	r3, [sp, #11]
     d30:	3304      	adds	r3, #4
     d32:	009b      	lsls	r3, r3, #2
     d34:	4413      	add	r3, r2
     d36:	6858      	ldr	r0, [r3, #4]
     d38:	4b41      	ldr	r3, [pc, #260]	; (e40 <Scheduler_MainFunction+0x1b8>)
     d3a:	681b      	ldr	r3, [r3, #0]
     d3c:	681a      	ldr	r2, [r3, #0]
     d3e:	4b41      	ldr	r3, [pc, #260]	; (e44 <Scheduler_MainFunction+0x1bc>)
     d40:	6819      	ldr	r1, [r3, #0]
     d42:	f89d 300b 	ldrb.w	r3, [sp, #11]
     d46:	1a82      	subs	r2, r0, r2
     d48:	3304      	adds	r3, #4
     d4a:	009b      	lsls	r3, r3, #2
     d4c:	440b      	add	r3, r1
     d4e:	605a      	str	r2, [r3, #4]
                    
                        //Verifying execution of callback i
                        if ( Scheduler_GetTimer( i ) == 0 ) {   //timeout achieved.
     d50:	f89d 300b 	ldrb.w	r3, [sp, #11]
     d54:	4618      	mov	r0, r3
     d56:	f7ff ff4f 	bl	bf8 <Scheduler_GetTimer>
     d5a:	4603      	mov	r3, r0
     d5c:	2b00      	cmp	r3, #0
     d5e:	d10b      	bne.n	d78 <Scheduler_MainFunction+0xf0>
                            SchedulerConfig_Ptr->TimerPtr[i].CallbackFunc();
     d60:	4b37      	ldr	r3, [pc, #220]	; (e40 <Scheduler_MainFunction+0x1b8>)
     d62:	681b      	ldr	r3, [r3, #0]
     d64:	6919      	ldr	r1, [r3, #16]
     d66:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d6a:	4613      	mov	r3, r2
     d6c:	005b      	lsls	r3, r3, #1
     d6e:	4413      	add	r3, r2
     d70:	009b      	lsls	r3, r3, #2
     d72:	440b      	add	r3, r1
     d74:	689b      	ldr	r3, [r3, #8]
     d76:	4798      	blx	r3
                for ( i = 0; i < SchedulerConfig_Ptr->Timers; i++ ) {
     d78:	f89d 300b 	ldrb.w	r3, [sp, #11]
     d7c:	3301      	adds	r3, #1
     d7e:	f88d 300b 	strb.w	r3, [sp, #11]
     d82:	4b2f      	ldr	r3, [pc, #188]	; (e40 <Scheduler_MainFunction+0x1b8>)
     d84:	681b      	ldr	r3, [r3, #0]
     d86:	7b1b      	ldrb	r3, [r3, #12]
     d88:	f89d 200b 	ldrb.w	r2, [sp, #11]
     d8c:	429a      	cmp	r2, r3
     d8e:	d3bf      	bcc.n	d10 <Scheduler_MainFunction+0x88>
                        }
                    }
                }

                //Executing tasks.
                for ( i = 0; i < SchedulerConfig_Ptr->Tasks; i++ ) {
     d90:	2300      	movs	r3, #0
     d92:	f88d 300b 	strb.w	r3, [sp, #11]
     d96:	e045      	b.n	e24 <Scheduler_MainFunction+0x19c>
                    //Verifying execution of task i
                    if ( Bfx_GetBit_u32u8_u8( SchedulerCtrl_Ptr->TaskFlags, i ) == TRUE ) {
     d98:	4b2a      	ldr	r3, [pc, #168]	; (e44 <Scheduler_MainFunction+0x1bc>)
     d9a:	681b      	ldr	r3, [r3, #0]
     d9c:	699b      	ldr	r3, [r3, #24]
     d9e:	f89d 200b 	ldrb.w	r2, [sp, #11]
     da2:	4611      	mov	r1, r2
     da4:	4618      	mov	r0, r3
     da6:	f7ff fe01 	bl	9ac <Bfx_GetBit_u32u8_u8>
     daa:	4603      	mov	r3, r0
     dac:	2b00      	cmp	r3, #0
     dae:	d034      	beq.n	e1a <Scheduler_MainFunction+0x192>
                        SchedulerCtrl_Ptr->TaskElapsed[i] += SchedulerConfig_Ptr->Tick;   //Time follow-up update for task i.
     db0:	4b24      	ldr	r3, [pc, #144]	; (e44 <Scheduler_MainFunction+0x1bc>)
     db2:	681b      	ldr	r3, [r3, #0]
     db4:	f89d 200b 	ldrb.w	r2, [sp, #11]
     db8:	3202      	adds	r2, #2
     dba:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
     dbe:	4b20      	ldr	r3, [pc, #128]	; (e40 <Scheduler_MainFunction+0x1b8>)
     dc0:	681b      	ldr	r3, [r3, #0]
     dc2:	6819      	ldr	r1, [r3, #0]
     dc4:	4b1f      	ldr	r3, [pc, #124]	; (e44 <Scheduler_MainFunction+0x1bc>)
     dc6:	681b      	ldr	r3, [r3, #0]
     dc8:	f89d 200b 	ldrb.w	r2, [sp, #11]
     dcc:	4401      	add	r1, r0
     dce:	3202      	adds	r2, #2
     dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                
                        //Verifying the execution of callback i.
                        if ( SchedulerCtrl_Ptr->TaskElapsed[i] >= SchedulerCtrl_Ptr->TaskPeriod[i] ) {  //periodicity achieved.
     dd4:	4b1b      	ldr	r3, [pc, #108]	; (e44 <Scheduler_MainFunction+0x1bc>)
     dd6:	681b      	ldr	r3, [r3, #0]
     dd8:	f89d 200b 	ldrb.w	r2, [sp, #11]
     ddc:	3202      	adds	r2, #2
     dde:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
     de2:	4b18      	ldr	r3, [pc, #96]	; (e44 <Scheduler_MainFunction+0x1bc>)
     de4:	681b      	ldr	r3, [r3, #0]
     de6:	f89d 100b 	ldrb.w	r1, [sp, #11]
     dea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
     dee:	429a      	cmp	r2, r3
     df0:	d313      	bcc.n	e1a <Scheduler_MainFunction+0x192>
                            SchedulerConfig_Ptr->TaskPtr[i].TaskFunc();
     df2:	4b13      	ldr	r3, [pc, #76]	; (e40 <Scheduler_MainFunction+0x1b8>)
     df4:	681b      	ldr	r3, [r3, #0]
     df6:	6899      	ldr	r1, [r3, #8]
     df8:	f89d 200b 	ldrb.w	r2, [sp, #11]
     dfc:	4613      	mov	r3, r2
     dfe:	005b      	lsls	r3, r3, #1
     e00:	4413      	add	r3, r2
     e02:	009b      	lsls	r3, r3, #2
     e04:	440b      	add	r3, r1
     e06:	689b      	ldr	r3, [r3, #8]
     e08:	4798      	blx	r3
                            SchedulerCtrl_Ptr->TaskElapsed[i] = 0;  //Time follow-up reset for task i.
     e0a:	4b0e      	ldr	r3, [pc, #56]	; (e44 <Scheduler_MainFunction+0x1bc>)
     e0c:	681b      	ldr	r3, [r3, #0]
     e0e:	f89d 200b 	ldrb.w	r2, [sp, #11]
     e12:	3202      	adds	r2, #2
     e14:	2100      	movs	r1, #0
     e16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                for ( i = 0; i < SchedulerConfig_Ptr->Tasks; i++ ) {
     e1a:	f89d 300b 	ldrb.w	r3, [sp, #11]
     e1e:	3301      	adds	r3, #1
     e20:	f88d 300b 	strb.w	r3, [sp, #11]
     e24:	4b06      	ldr	r3, [pc, #24]	; (e40 <Scheduler_MainFunction+0x1b8>)
     e26:	681b      	ldr	r3, [r3, #0]
     e28:	791b      	ldrb	r3, [r3, #4]
     e2a:	f89d 200b 	ldrb.w	r2, [sp, #11]
     e2e:	429a      	cmp	r2, r3
     e30:	d3b2      	bcc.n	d98 <Scheduler_MainFunction+0x110>
                        }
                    }
                }

                elapsed_time = 0;   //Reset time follow up for tick.
     e32:	2300      	movs	r3, #0
     e34:	9303      	str	r3, [sp, #12]
            elapsed_time += OsIf_GetElapsed( &count_value, OSIF_COUNTER_SYSTEM );   //time capture update
     e36:	e75a      	b.n	cee <Scheduler_MainFunction+0x66>
            }
        }
    }
}
     e38:	bf00      	nop
     e3a:	b005      	add	sp, #20
     e3c:	f85d fb04 	ldr.w	pc, [sp], #4
     e40:	1fff8b54 	.word	0x1fff8b54
     e44:	1fff8b58 	.word	0x1fff8b58

00000e48 <Task1_callback>:
/**
 * @brief This is the callback function for the task 1.
 *
 * This function executes the state machine every 50ms.
 */
void Task1_callback( void ) {
     e48:	b508      	push	{r3, lr}
    HwIoAb_Buttons_MainFunction();
     e4a:	f000 f971 	bl	1130 <HwIoAb_Buttons_MainFunction>
}
     e4e:	bf00      	nop
     e50:	bd08      	pop	{r3, pc}
	...

00000e54 <Task2_callback>:
 * @note Button 1, Single click toggle only led0 (PTC8), double click prints ohms value of pot 1 main, hold click tone 1 for buzzer, release stops buzzer.
 * @note Button 2, Single click toggle only led1 (PTC9), double click prints ohms value of pot 2 main, hold click tone 2 for buzzer, release stops buzzer.
 * @note Button 3, Single click toggle only led2 (PTC10), double click prints ohms values of pot1 and pot 2 alter , hold click tone 3 for buzzer, release stops buzzer.
 * @note The tone of the buzzer is always the last activated.
 */
void Task2_callback( void ) {
     e54:	b500      	push	{lr}
     e56:	b083      	sub	sp, #12
    //local data.
    static boolean flags[3] = { TRUE, TRUE, TRUE }; //Flags for executing buzzer tones.
    uint8 i = 0;
     e58:	2300      	movs	r3, #0
     e5a:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 actual_event = 0; //Actual event of button.
     e5e:	2300      	movs	r3, #0
     e60:	f88d 3006 	strb.w	r3, [sp, #6]


    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) { //Checking each button and its event detected.
     e64:	2300      	movs	r3, #0
     e66:	f88d 3007 	strb.w	r3, [sp, #7]
     e6a:	e0e0      	b.n	102e <Task2_callback+0x1da>
        actual_event =  HwIoAb_Buttons_GetEvent( i + 1 );   //Obtaining event of actual button.
     e6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e70:	3301      	adds	r3, #1
     e72:	b2db      	uxtb	r3, r3
     e74:	4618      	mov	r0, r3
     e76:	f000 f92d 	bl	10d4 <HwIoAb_Buttons_GetEvent>
     e7a:	4603      	mov	r3, r0
     e7c:	f88d 3006 	strb.w	r3, [sp, #6]
        if ( actual_event != HWIOAB_BTN_EVENT_IDLE ) {  //A click was detected.
     e80:	f89d 3006 	ldrb.w	r3, [sp, #6]
     e84:	2b00      	cmp	r3, #0
     e86:	f000 80ca 	beq.w	101e <Task2_callback+0x1ca>
            switch ( i ) {    
     e8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e8e:	2b02      	cmp	r3, #2
     e90:	f000 8084 	beq.w	f9c <Task2_callback+0x148>
     e94:	2b02      	cmp	r3, #2
     e96:	f300 80c4 	bgt.w	1022 <Task2_callback+0x1ce>
     e9a:	2b00      	cmp	r3, #0
     e9c:	d002      	beq.n	ea4 <Task2_callback+0x50>
     e9e:	2b01      	cmp	r3, #1
     ea0:	d03e      	beq.n	f20 <Task2_callback+0xcc>
                            break;
                        }
                break;

                default:    //Invalid button.
                break;
     ea2:	e0be      	b.n	1022 <Task2_callback+0x1ce>
                    switch ( actual_event ) {
     ea4:	f89d 3006 	ldrb.w	r3, [sp, #6]
     ea8:	3b01      	subs	r3, #1
     eaa:	2b03      	cmp	r3, #3
     eac:	d834      	bhi.n	f18 <Task2_callback+0xc4>
     eae:	a201      	add	r2, pc, #4	; (adr r2, eb4 <Task2_callback+0x60>)
     eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     eb4:	00000ec5 	.word	0x00000ec5
     eb8:	00000ecd 	.word	0x00000ecd
     ebc:	00000eeb 	.word	0x00000eeb
     ec0:	00000f09 	.word	0x00000f09
                            HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_0_ID );
     ec4:	2000      	movs	r0, #0
     ec6:	f000 fad1 	bl	146c <HwIoAb_Leds_TurnToggle>
                        break;
     eca:	e028      	b.n	f1e <Task2_callback+0xca>
                            HwIoAb_Pots_GetValue( HWIOAB_POTS_MAIN_RESULTS );
     ecc:	4b5e      	ldr	r3, [pc, #376]	; (1048 <Task2_callback+0x1f4>)
     ece:	681b      	ldr	r3, [r3, #0]
     ed0:	330a      	adds	r3, #10
     ed2:	4618      	mov	r0, r3
     ed4:	f000 fb0e 	bl	14f4 <HwIoAb_Pots_GetValue>
                            SEGGER_RTT_printf( 0, "Pot 1 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_main[0] );
     ed8:	4b5b      	ldr	r3, [pc, #364]	; (1048 <Task2_callback+0x1f4>)
     eda:	681b      	ldr	r3, [r3, #0]
     edc:	895b      	ldrh	r3, [r3, #10]
     ede:	461a      	mov	r2, r3
     ee0:	495a      	ldr	r1, [pc, #360]	; (104c <Task2_callback+0x1f8>)
     ee2:	2000      	movs	r0, #0
     ee4:	f001 f9f2 	bl	22cc <SEGGER_RTT_printf>
                        break;
     ee8:	e019      	b.n	f1e <Task2_callback+0xca>
                            if ( flags[i]  == TRUE ) {  //Just executes the first time it was detected.
     eea:	f89d 3007 	ldrb.w	r3, [sp, #7]
     eee:	4a58      	ldr	r2, [pc, #352]	; (1050 <Task2_callback+0x1fc>)
     ef0:	5cd3      	ldrb	r3, [r2, r3]
     ef2:	2b00      	cmp	r3, #0
     ef4:	d012      	beq.n	f1c <Task2_callback+0xc8>
                                HwIoAb_Buzzer_Beep( HWIOAB_BUZZER_TONE_1 );
     ef6:	2000      	movs	r0, #0
     ef8:	f000 fbd1 	bl	169e <HwIoAb_Buzzer_Beep>
                                flags[i] = FALSE;
     efc:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f00:	4a53      	ldr	r2, [pc, #332]	; (1050 <Task2_callback+0x1fc>)
     f02:	2100      	movs	r1, #0
     f04:	54d1      	strb	r1, [r2, r3]
                        break;
     f06:	e009      	b.n	f1c <Task2_callback+0xc8>
                            HwIoAb_Buzzer_Stop();
     f08:	f000 fbf6 	bl	16f8 <HwIoAb_Buzzer_Stop>
                            flags[i] = TRUE;
     f0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f10:	4a4f      	ldr	r2, [pc, #316]	; (1050 <Task2_callback+0x1fc>)
     f12:	2101      	movs	r1, #1
     f14:	54d1      	strb	r1, [r2, r3]
                        break;
     f16:	e002      	b.n	f1e <Task2_callback+0xca>
                        break;
     f18:	bf00      	nop
     f1a:	e083      	b.n	1024 <Task2_callback+0x1d0>
                        break;
     f1c:	bf00      	nop
                break;
     f1e:	e081      	b.n	1024 <Task2_callback+0x1d0>
                    switch ( actual_event ) {
     f20:	f89d 3006 	ldrb.w	r3, [sp, #6]
     f24:	3b01      	subs	r3, #1
     f26:	2b03      	cmp	r3, #3
     f28:	d834      	bhi.n	f94 <Task2_callback+0x140>
     f2a:	a201      	add	r2, pc, #4	; (adr r2, f30 <Task2_callback+0xdc>)
     f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     f30:	00000f41 	.word	0x00000f41
     f34:	00000f49 	.word	0x00000f49
     f38:	00000f67 	.word	0x00000f67
     f3c:	00000f85 	.word	0x00000f85
                            HwIoAb_Leds_TurnToggle( HWI0AB_LEDS_1_ID );
     f40:	2001      	movs	r0, #1
     f42:	f000 fa93 	bl	146c <HwIoAb_Leds_TurnToggle>
                        break;
     f46:	e028      	b.n	f9a <Task2_callback+0x146>
                            HwIoAb_Pots_GetValue( HWIOAB_POTS_MAIN_RESULTS );
     f48:	4b3f      	ldr	r3, [pc, #252]	; (1048 <Task2_callback+0x1f4>)
     f4a:	681b      	ldr	r3, [r3, #0]
     f4c:	330a      	adds	r3, #10
     f4e:	4618      	mov	r0, r3
     f50:	f000 fad0 	bl	14f4 <HwIoAb_Pots_GetValue>
                            SEGGER_RTT_printf( 0, "Pot 2 resistance value in ohms: %d\n", PotsControl_Ptr->Ohms_results_main[1] );
     f54:	4b3c      	ldr	r3, [pc, #240]	; (1048 <Task2_callback+0x1f4>)
     f56:	681b      	ldr	r3, [r3, #0]
     f58:	899b      	ldrh	r3, [r3, #12]
     f5a:	461a      	mov	r2, r3
     f5c:	493d      	ldr	r1, [pc, #244]	; (1054 <Task2_callback+0x200>)
     f5e:	2000      	movs	r0, #0
     f60:	f001 f9b4 	bl	22cc <SEGGER_RTT_printf>
                        break;
     f64:	e019      	b.n	f9a <Task2_callback+0x146>
                            if ( flags[i]  == TRUE ) {  //Just executes the first time it was detected.
     f66:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f6a:	4a39      	ldr	r2, [pc, #228]	; (1050 <Task2_callback+0x1fc>)
     f6c:	5cd3      	ldrb	r3, [r2, r3]
     f6e:	2b00      	cmp	r3, #0
     f70:	d012      	beq.n	f98 <Task2_callback+0x144>
                                HwIoAb_Buzzer_Beep( HWIOAB_BUZZER_TONE_2 );
     f72:	2001      	movs	r0, #1
     f74:	f000 fb93 	bl	169e <HwIoAb_Buzzer_Beep>
                                flags[i] = FALSE;
     f78:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f7c:	4a34      	ldr	r2, [pc, #208]	; (1050 <Task2_callback+0x1fc>)
     f7e:	2100      	movs	r1, #0
     f80:	54d1      	strb	r1, [r2, r3]
                        break;
     f82:	e009      	b.n	f98 <Task2_callback+0x144>
                            HwIoAb_Buzzer_Stop();
     f84:	f000 fbb8 	bl	16f8 <HwIoAb_Buzzer_Stop>
                            flags[i] = TRUE;
     f88:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f8c:	4a30      	ldr	r2, [pc, #192]	; (1050 <Task2_callback+0x1fc>)
     f8e:	2101      	movs	r1, #1
     f90:	54d1      	strb	r1, [r2, r3]
                        break;
     f92:	e002      	b.n	f9a <Task2_callback+0x146>
                        break;
     f94:	bf00      	nop
     f96:	e045      	b.n	1024 <Task2_callback+0x1d0>
                        break;
     f98:	bf00      	nop
                break;
     f9a:	e043      	b.n	1024 <Task2_callback+0x1d0>
                        switch ( actual_event ) {
     f9c:	f89d 3006 	ldrb.w	r3, [sp, #6]
     fa0:	3b01      	subs	r3, #1
     fa2:	2b03      	cmp	r3, #3
     fa4:	d837      	bhi.n	1016 <Task2_callback+0x1c2>
     fa6:	a201      	add	r2, pc, #4	; (adr r2, fac <Task2_callback+0x158>)
     fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     fac:	00000fbd 	.word	0x00000fbd
     fb0:	00000fc5 	.word	0x00000fc5
     fb4:	00000fe9 	.word	0x00000fe9
     fb8:	00001007 	.word	0x00001007
                                HwIoAb_Leds_TurnToggle( HWIOAB_LEDS_2_ID );
     fbc:	2002      	movs	r0, #2
     fbe:	f000 fa55 	bl	146c <HwIoAb_Leds_TurnToggle>
                            break;
     fc2:	e02b      	b.n	101c <Task2_callback+0x1c8>
                                HwIoAb_Pots_GetAltValue( HWIOAB_POTS_ALTER_RESULTS );
     fc4:	4b20      	ldr	r3, [pc, #128]	; (1048 <Task2_callback+0x1f4>)
     fc6:	681b      	ldr	r3, [r3, #0]
     fc8:	330e      	adds	r3, #14
     fca:	4618      	mov	r0, r3
     fcc:	f000 fafa 	bl	15c4 <HwIoAb_Pots_GetAltValue>
                                    PotsControl_Ptr->Ohms_results_alter[0], PotsControl_Ptr->Ohms_results_alter[1] );
     fd0:	4b1d      	ldr	r3, [pc, #116]	; (1048 <Task2_callback+0x1f4>)
     fd2:	681b      	ldr	r3, [r3, #0]
     fd4:	89db      	ldrh	r3, [r3, #14]
                                SEGGER_RTT_printf( 0, "Pot 1 resistance value in ohms: %d, Pot 2 resistance value in ohms: %d\n", 
     fd6:	461a      	mov	r2, r3
                                    PotsControl_Ptr->Ohms_results_alter[0], PotsControl_Ptr->Ohms_results_alter[1] );
     fd8:	4b1b      	ldr	r3, [pc, #108]	; (1048 <Task2_callback+0x1f4>)
     fda:	681b      	ldr	r3, [r3, #0]
     fdc:	8a1b      	ldrh	r3, [r3, #16]
                                SEGGER_RTT_printf( 0, "Pot 1 resistance value in ohms: %d, Pot 2 resistance value in ohms: %d\n", 
     fde:	491e      	ldr	r1, [pc, #120]	; (1058 <Task2_callback+0x204>)
     fe0:	2000      	movs	r0, #0
     fe2:	f001 f973 	bl	22cc <SEGGER_RTT_printf>
                            break;
     fe6:	e019      	b.n	101c <Task2_callback+0x1c8>
                                if ( flags[i]  == TRUE ) {  //Just executes the first time it was detected.
     fe8:	f89d 3007 	ldrb.w	r3, [sp, #7]
     fec:	4a18      	ldr	r2, [pc, #96]	; (1050 <Task2_callback+0x1fc>)
     fee:	5cd3      	ldrb	r3, [r2, r3]
     ff0:	2b00      	cmp	r3, #0
     ff2:	d012      	beq.n	101a <Task2_callback+0x1c6>
                                    HwIoAb_Buzzer_Beep( HWIOAB_BUZZER_TONE_3 );
     ff4:	2002      	movs	r0, #2
     ff6:	f000 fb52 	bl	169e <HwIoAb_Buzzer_Beep>
                                    flags[i] = FALSE;
     ffa:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ffe:	4a14      	ldr	r2, [pc, #80]	; (1050 <Task2_callback+0x1fc>)
    1000:	2100      	movs	r1, #0
    1002:	54d1      	strb	r1, [r2, r3]
                            break;
    1004:	e009      	b.n	101a <Task2_callback+0x1c6>
                                HwIoAb_Buzzer_Stop();
    1006:	f000 fb77 	bl	16f8 <HwIoAb_Buzzer_Stop>
                                flags[i] = TRUE;
    100a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    100e:	4a10      	ldr	r2, [pc, #64]	; (1050 <Task2_callback+0x1fc>)
    1010:	2101      	movs	r1, #1
    1012:	54d1      	strb	r1, [r2, r3]
                            break;
    1014:	e002      	b.n	101c <Task2_callback+0x1c8>
                            break;
    1016:	bf00      	nop
    1018:	e004      	b.n	1024 <Task2_callback+0x1d0>
                            break;
    101a:	bf00      	nop
                break;
    101c:	e002      	b.n	1024 <Task2_callback+0x1d0>
            }
        }
    101e:	bf00      	nop
    1020:	e000      	b.n	1024 <Task2_callback+0x1d0>
                break;
    1022:	bf00      	nop
    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) { //Checking each button and its event detected.
    1024:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1028:	3301      	adds	r3, #1
    102a:	f88d 3007 	strb.w	r3, [sp, #7]
    102e:	4b0b      	ldr	r3, [pc, #44]	; (105c <Task2_callback+0x208>)
    1030:	681b      	ldr	r3, [r3, #0]
    1032:	781b      	ldrb	r3, [r3, #0]
    1034:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1038:	429a      	cmp	r2, r3
    103a:	f4ff af17 	bcc.w	e6c <Task2_callback+0x18>
    }
}
    103e:	bf00      	nop
    1040:	bf00      	nop
    1042:	b003      	add	sp, #12
    1044:	f85d fb04 	ldr.w	pc, [sp], #4
    1048:	1fff8b68 	.word	0x1fff8b68
    104c:	000197f8 	.word	0x000197f8
    1050:	1fff8b5c 	.word	0x1fff8b5c
    1054:	0001981c 	.word	0x0001981c
    1058:	00019840 	.word	0x00019840
    105c:	1fff8b60 	.word	0x1fff8b60

00001060 <Timer1_callback>:
/**
 * @brief This is the callback function for the timer 1.
 *
 */
void Timer1_callback( void ) {
}
    1060:	bf00      	nop
    1062:	4770      	bx	lr

00001064 <HwIoAb_Buttons_Init>:
 * @brief This function initialices the control structure for the double click state machine. 
 * 
 * @param Buttons_Config Pointer to configuration array.
 * 
 */
void HwIoAb_Buttons_Init( const HwIoAb_Buttons_Config *Buttons_Config ) {
    1064:	b084      	sub	sp, #16
    1066:	9001      	str	r0, [sp, #4]
    //local data 
    uint8 i = 0;
    1068:	2300      	movs	r3, #0
    106a:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean status = TRUE;
    106e:	2301      	movs	r3, #1
    1070:	f88d 300e 	strb.w	r3, [sp, #14]
                Det_ReportError( HWIOAB_BUTTONS_MODULE_ID, HWIOAB_BUTTONS_INSTANCE_ID, HWIOAB_BUTTONS_INIT_ID, HWIOAB_BUTTONS_E_CONFIG );
                status = FALSE;
            }
    #endif

    if ( status == TRUE ) {
    1074:	f89d 300e 	ldrb.w	r3, [sp, #14]
    1078:	2b00      	cmp	r3, #0
    107a:	d025      	beq.n	10c8 <HwIoAb_Buttons_Init+0x64>
        //Initializing members.
        ButtonsControl_Ptr->Buttons = HWIOAB_BUTTONS_MAX;
    107c:	4b14      	ldr	r3, [pc, #80]	; (10d0 <HwIoAb_Buttons_Init+0x6c>)
    107e:	681b      	ldr	r3, [r3, #0]
    1080:	2203      	movs	r2, #3
    1082:	701a      	strb	r2, [r3, #0]
        ButtonsControl_Ptr->ButtonsConfig_Ptr = Buttons_Config;
    1084:	4b12      	ldr	r3, [pc, #72]	; (10d0 <HwIoAb_Buttons_Init+0x6c>)
    1086:	681b      	ldr	r3, [r3, #0]
    1088:	9a01      	ldr	r2, [sp, #4]
    108a:	605a      	str	r2, [r3, #4]

        for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) {   //All button states and events to IDLE.
    108c:	2300      	movs	r3, #0
    108e:	f88d 300f 	strb.w	r3, [sp, #15]
    1092:	e012      	b.n	10ba <HwIoAb_Buttons_Init+0x56>
            ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
    1094:	4b0e      	ldr	r3, [pc, #56]	; (10d0 <HwIoAb_Buttons_Init+0x6c>)
    1096:	681a      	ldr	r2, [r3, #0]
    1098:	f89d 300f 	ldrb.w	r3, [sp, #15]
    109c:	4413      	add	r3, r2
    109e:	2200      	movs	r2, #0
    10a0:	721a      	strb	r2, [r3, #8]
            ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_IDLE;
    10a2:	4b0b      	ldr	r3, [pc, #44]	; (10d0 <HwIoAb_Buttons_Init+0x6c>)
    10a4:	681a      	ldr	r2, [r3, #0]
    10a6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    10aa:	4413      	add	r3, r2
    10ac:	2200      	movs	r2, #0
    10ae:	72da      	strb	r2, [r3, #11]
        for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) {   //All button states and events to IDLE.
    10b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    10b4:	3301      	adds	r3, #1
    10b6:	f88d 300f 	strb.w	r3, [sp, #15]
    10ba:	4b05      	ldr	r3, [pc, #20]	; (10d0 <HwIoAb_Buttons_Init+0x6c>)
    10bc:	681b      	ldr	r3, [r3, #0]
    10be:	781b      	ldrb	r3, [r3, #0]
    10c0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    10c4:	429a      	cmp	r2, r3
    10c6:	d3e5      	bcc.n	1094 <HwIoAb_Buttons_Init+0x30>
        }
    }

}
    10c8:	bf00      	nop
    10ca:	b004      	add	sp, #16
    10cc:	4770      	bx	lr
    10ce:	bf00      	nop
    10d0:	1fff8b60 	.word	0x1fff8b60

000010d4 <HwIoAb_Buttons_GetEvent>:
 * @param Button Button ID. 
 * @return event Last event detected in button.
 * 
 * @note The Button ID must be valid.
 */
uint8 HwIoAb_Buttons_GetEvent( uint8 Button ) {
    10d4:	b084      	sub	sp, #16
    10d6:	4603      	mov	r3, r0
    10d8:	f88d 3007 	strb.w	r3, [sp, #7]
    //local data.
    uint8 event = 0;
    10dc:	2300      	movs	r3, #0
    10de:	f88d 300f 	strb.w	r3, [sp, #15]

    //Verifying if ID is valid
    if ( ( Button != 0 ) && ( Button <= ButtonsControl_Ptr->Buttons ) ) {
    10e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    10e6:	2b00      	cmp	r3, #0
    10e8:	d018      	beq.n	111c <HwIoAb_Buttons_GetEvent+0x48>
    10ea:	4b10      	ldr	r3, [pc, #64]	; (112c <HwIoAb_Buttons_GetEvent+0x58>)
    10ec:	681b      	ldr	r3, [r3, #0]
    10ee:	781b      	ldrb	r3, [r3, #0]
    10f0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    10f4:	429a      	cmp	r2, r3
    10f6:	d811      	bhi.n	111c <HwIoAb_Buttons_GetEvent+0x48>
        event = ButtonsControl_Ptr->Events[ Button - 1 ]; //Obtaining last event.
    10f8:	4b0c      	ldr	r3, [pc, #48]	; (112c <HwIoAb_Buttons_GetEvent+0x58>)
    10fa:	681a      	ldr	r2, [r3, #0]
    10fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1100:	3b01      	subs	r3, #1
    1102:	4413      	add	r3, r2
    1104:	7adb      	ldrb	r3, [r3, #11]
    1106:	f88d 300f 	strb.w	r3, [sp, #15]
        ButtonsControl_Ptr->Events[ Button - 1 ] = HWIOAB_BTN_EVENT_IDLE;   //Clearing event of button.
    110a:	4b08      	ldr	r3, [pc, #32]	; (112c <HwIoAb_Buttons_GetEvent+0x58>)
    110c:	681a      	ldr	r2, [r3, #0]
    110e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1112:	3b01      	subs	r3, #1
    1114:	4413      	add	r3, r2
    1116:	2200      	movs	r2, #0
    1118:	72da      	strb	r2, [r3, #11]
    111a:	e002      	b.n	1122 <HwIoAb_Buttons_GetEvent+0x4e>

    else {  //Invalid ID.
        #if ( HWIOAB_BUTTONS_DEV_ERROR_DETECT == STD_ON )
            Det_ReportError( HWIOAB_BUTTONS_MODULE_ID, HWIOAB_BUTTONS_INSTANCE_ID, HWIOAB_BUTTONS_GETEVENT_ID, HWIOAB_BUTTONS_E_BUTTON_ID );
        #endif
        event = 50;
    111c:	2332      	movs	r3, #50	; 0x32
    111e:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    return event;
    1122:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1126:	4618      	mov	r0, r3
    1128:	b004      	add	sp, #16
    112a:	4770      	bx	lr
    112c:	1fff8b60 	.word	0x1fff8b60

00001130 <HwIoAb_Buttons_MainFunction>:
 * @note This function is called every HWIOAB_BUTTONS_PERIOD.
 * @note Remember that the timeout count is for detecting a hold click when the button is pressed 1 and 2 times.
 * @note Each button has its own dedicated count.
 * 
 */
void HwIoAb_Buttons_MainFunction( void ) {
    1130:	b500      	push	{lr}
    1132:	b083      	sub	sp, #12
    //local data
    static boolean count_flags[ HWIOAB_BUTTONS_MAX ] = { FALSE, FALSE, FALSE };
    static uint32 count[ HWIOAB_BUTTONS_MAX ] = { 0, 0, 0 };
    uint8 i = 0;
    1134:	2300      	movs	r3, #0
    1136:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean active = FALSE;
    113a:	2300      	movs	r3, #0
    113c:	f88d 3006 	strb.w	r3, [sp, #6]
    
    //Counting in every function call
    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) {   //Counting for each button.
    1140:	2300      	movs	r3, #0
    1142:	f88d 3007 	strb.w	r3, [sp, #7]
    1146:	e029      	b.n	119c <__BSS_SRAM_SIZE+0x5c>
        if ( count_flags[i] == TRUE ) {
    1148:	f89d 3007 	ldrb.w	r3, [sp, #7]
    114c:	4ab9      	ldr	r2, [pc, #740]	; (1434 <__BSS_SRAM_SIZE+0x2f4>)
    114e:	5cd3      	ldrb	r3, [r2, r3]
    1150:	2b00      	cmp	r3, #0
    1152:	d01e      	beq.n	1192 <__BSS_SRAM_SIZE+0x52>
            count[i] += HWIOAB_BUTTONS_PERIOD;
    1154:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1158:	4ab7      	ldr	r2, [pc, #732]	; (1438 <__BSS_SRAM_SIZE+0x2f8>)
    115a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    115e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1162:	3232      	adds	r2, #50	; 0x32
    1164:	49b4      	ldr	r1, [pc, #720]	; (1438 <__BSS_SRAM_SIZE+0x2f8>)
    1166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

            if ( count[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout ) {   //Once reaching timeout count stops.
    116a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    116e:	4ab2      	ldr	r2, [pc, #712]	; (1438 <__BSS_SRAM_SIZE+0x2f8>)
    1170:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1174:	4bb1      	ldr	r3, [pc, #708]	; (143c <__BSS_SRAM_SIZE+0x2fc>)
    1176:	681b      	ldr	r3, [r3, #0]
    1178:	6859      	ldr	r1, [r3, #4]
    117a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    117e:	00db      	lsls	r3, r3, #3
    1180:	440b      	add	r3, r1
    1182:	685b      	ldr	r3, [r3, #4]
    1184:	429a      	cmp	r2, r3
    1186:	d104      	bne.n	1192 <__BSS_SRAM_SIZE+0x52>
                count_flags[i] = FALSE;
    1188:	f89d 3007 	ldrb.w	r3, [sp, #7]
    118c:	4aa9      	ldr	r2, [pc, #676]	; (1434 <__BSS_SRAM_SIZE+0x2f4>)
    118e:	2100      	movs	r1, #0
    1190:	54d1      	strb	r1, [r2, r3]
    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) {   //Counting for each button.
    1192:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1196:	3301      	adds	r3, #1
    1198:	f88d 3007 	strb.w	r3, [sp, #7]
    119c:	4ba7      	ldr	r3, [pc, #668]	; (143c <__BSS_SRAM_SIZE+0x2fc>)
    119e:	681b      	ldr	r3, [r3, #0]
    11a0:	781b      	ldrb	r3, [r3, #0]
    11a2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    11a6:	429a      	cmp	r2, r3
    11a8:	d3ce      	bcc.n	1148 <__BSS_SRAM_SIZE+0x8>
            }
        }
    }

    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) { //Executing state machine for each button.
    11aa:	2300      	movs	r3, #0
    11ac:	f88d 3007 	strb.w	r3, [sp, #7]
    11b0:	e132      	b.n	1418 <__BSS_SRAM_SIZE+0x2d8>
        
        //Defining the active value according to the active status.
        if ( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active == HWIOAB_BTN_ACTIVE_HIGH ) {  //Pull down.
    11b2:	4ba2      	ldr	r3, [pc, #648]	; (143c <__BSS_SRAM_SIZE+0x2fc>)
    11b4:	681b      	ldr	r3, [r3, #0]
    11b6:	685a      	ldr	r2, [r3, #4]
    11b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11bc:	00db      	lsls	r3, r3, #3
    11be:	4413      	add	r3, r2
    11c0:	789b      	ldrb	r3, [r3, #2]
    11c2:	2b01      	cmp	r3, #1
    11c4:	d103      	bne.n	11ce <__BSS_SRAM_SIZE+0x8e>
            active = STD_HIGH;
    11c6:	2301      	movs	r3, #1
    11c8:	f88d 3006 	strb.w	r3, [sp, #6]
    11cc:	e002      	b.n	11d4 <__BSS_SRAM_SIZE+0x94>
        }

        else {  //Pull up.
            active = STD_LOW;
    11ce:	2300      	movs	r3, #0
    11d0:	f88d 3006 	strb.w	r3, [sp, #6]
        }
        
        switch( ButtonsControl_Ptr->States[i] ) {
    11d4:	4b99      	ldr	r3, [pc, #612]	; (143c <__BSS_SRAM_SIZE+0x2fc>)
    11d6:	681a      	ldr	r2, [r3, #0]
    11d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    11dc:	4413      	add	r3, r2
    11de:	7a1b      	ldrb	r3, [r3, #8]
    11e0:	2b04      	cmp	r3, #4
    11e2:	f200 8109 	bhi.w	13f8 <__BSS_SRAM_SIZE+0x2b8>
    11e6:	a201      	add	r2, pc, #4	; (adr r2, 11ec <__BSS_SRAM_SIZE+0xac>)
    11e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    11ec:	00001201 	.word	0x00001201
    11f0:	0000124b 	.word	0x0000124b
    11f4:	00001333 	.word	0x00001333
    11f8:	000013a5 	.word	0x000013a5
    11fc:	000012b1 	.word	0x000012b1
            case HWIOAB_BTN_STATE_IDLE :
                //Checks if the button is pressed.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == active ) {
    1200:	4b8e      	ldr	r3, [pc, #568]	; (143c <__BSS_SRAM_SIZE+0x2fc>)
    1202:	681b      	ldr	r3, [r3, #0]
    1204:	685a      	ldr	r2, [r3, #4]
    1206:	f89d 3007 	ldrb.w	r3, [sp, #7]
    120a:	00db      	lsls	r3, r3, #3
    120c:	4413      	add	r3, r2
    120e:	881b      	ldrh	r3, [r3, #0]
    1210:	4618      	mov	r0, r3
    1212:	f007 f98f 	bl	8534 <Dio_ReadChannel>
    1216:	4603      	mov	r3, r0
    1218:	461a      	mov	r2, r3
    121a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    121e:	429a      	cmp	r2, r3
    1220:	f040 80ec 	bne.w	13fc <__BSS_SRAM_SIZE+0x2bc>
                    count_flags[i] = TRUE;  //Starting count.
    1224:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1228:	4a82      	ldr	r2, [pc, #520]	; (1434 <__BSS_SRAM_SIZE+0x2f4>)
    122a:	2101      	movs	r1, #1
    122c:	54d1      	strb	r1, [r2, r3]
                    count[i] = 0;   //Restarting count.
    122e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1232:	4a81      	ldr	r2, [pc, #516]	; (1438 <__BSS_SRAM_SIZE+0x2f8>)
    1234:	2100      	movs	r1, #0
    1236:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_SINGLE_PRESS;
    123a:	4b80      	ldr	r3, [pc, #512]	; (143c <__BSS_SRAM_SIZE+0x2fc>)
    123c:	681a      	ldr	r2, [r3, #0]
    123e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1242:	4413      	add	r3, r2
    1244:	2201      	movs	r2, #1
    1246:	721a      	strb	r2, [r3, #8]
                }
            break;
    1248:	e0d8      	b.n	13fc <__BSS_SRAM_SIZE+0x2bc>
        
            case HWIOAB_BTN_STATE_SINGLE_PRESS :
                //Checking count timeout.
                if ( count[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout ) {
    124a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    124e:	4a7a      	ldr	r2, [pc, #488]	; (1438 <__BSS_SRAM_SIZE+0x2f8>)
    1250:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1254:	4b79      	ldr	r3, [pc, #484]	; (143c <__BSS_SRAM_SIZE+0x2fc>)
    1256:	681b      	ldr	r3, [r3, #0]
    1258:	6859      	ldr	r1, [r3, #4]
    125a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    125e:	00db      	lsls	r3, r3, #3
    1260:	440b      	add	r3, r1
    1262:	685b      	ldr	r3, [r3, #4]
    1264:	429a      	cmp	r2, r3
    1266:	d106      	bne.n	1276 <__BSS_SRAM_SIZE+0x136>
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_HOLD_PRESS;
    1268:	4b74      	ldr	r3, [pc, #464]	; (143c <__BSS_SRAM_SIZE+0x2fc>)
    126a:	681a      	ldr	r2, [r3, #0]
    126c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1270:	4413      	add	r3, r2
    1272:	2203      	movs	r2, #3
    1274:	721a      	strb	r2, [r3, #8]
                }

                //Checking if the button is released.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !active ) {
    1276:	4b71      	ldr	r3, [pc, #452]	; (143c <__BSS_SRAM_SIZE+0x2fc>)
    1278:	681b      	ldr	r3, [r3, #0]
    127a:	685a      	ldr	r2, [r3, #4]
    127c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1280:	00db      	lsls	r3, r3, #3
    1282:	4413      	add	r3, r2
    1284:	881b      	ldrh	r3, [r3, #0]
    1286:	4618      	mov	r0, r3
    1288:	f007 f954 	bl	8534 <Dio_ReadChannel>
    128c:	4603      	mov	r3, r0
    128e:	461a      	mov	r2, r3
    1290:	f89d 3006 	ldrb.w	r3, [sp, #6]
    1294:	f083 0301 	eor.w	r3, r3, #1
    1298:	b2db      	uxtb	r3, r3
    129a:	429a      	cmp	r2, r3
    129c:	f040 80b0 	bne.w	1400 <__BSS_SRAM_SIZE+0x2c0>
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_RELEASE;
    12a0:	4b66      	ldr	r3, [pc, #408]	; (143c <__BSS_SRAM_SIZE+0x2fc>)
    12a2:	681a      	ldr	r2, [r3, #0]
    12a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    12a8:	4413      	add	r3, r2
    12aa:	2204      	movs	r2, #4
    12ac:	721a      	strb	r2, [r3, #8]
                }
            break;
    12ae:	e0a7      	b.n	1400 <__BSS_SRAM_SIZE+0x2c0>
        
            case HWIOAB_BTN_STATE_RELEASE :
                //Checking count timeout.
                if ( count[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout ) { //Single click
    12b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    12b4:	4a60      	ldr	r2, [pc, #384]	; (1438 <__BSS_SRAM_SIZE+0x2f8>)
    12b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    12ba:	4b60      	ldr	r3, [pc, #384]	; (143c <__BSS_SRAM_SIZE+0x2fc>)
    12bc:	681b      	ldr	r3, [r3, #0]
    12be:	6859      	ldr	r1, [r3, #4]
    12c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    12c4:	00db      	lsls	r3, r3, #3
    12c6:	440b      	add	r3, r1
    12c8:	685b      	ldr	r3, [r3, #4]
    12ca:	429a      	cmp	r2, r3
    12cc:	d10d      	bne.n	12ea <__BSS_SRAM_SIZE+0x1aa>
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_SINGLE_CLICK;
    12ce:	4b5b      	ldr	r3, [pc, #364]	; (143c <__BSS_SRAM_SIZE+0x2fc>)
    12d0:	681a      	ldr	r2, [r3, #0]
    12d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    12d6:	4413      	add	r3, r2
    12d8:	2201      	movs	r2, #1
    12da:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
    12dc:	4b57      	ldr	r3, [pc, #348]	; (143c <__BSS_SRAM_SIZE+0x2fc>)
    12de:	681a      	ldr	r2, [r3, #0]
    12e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    12e4:	4413      	add	r3, r2
    12e6:	2200      	movs	r2, #0
    12e8:	721a      	strb	r2, [r3, #8]
                }

                //Checks if the button is pressed.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == active ) {
    12ea:	4b54      	ldr	r3, [pc, #336]	; (143c <__BSS_SRAM_SIZE+0x2fc>)
    12ec:	681b      	ldr	r3, [r3, #0]
    12ee:	685a      	ldr	r2, [r3, #4]
    12f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    12f4:	00db      	lsls	r3, r3, #3
    12f6:	4413      	add	r3, r2
    12f8:	881b      	ldrh	r3, [r3, #0]
    12fa:	4618      	mov	r0, r3
    12fc:	f007 f91a 	bl	8534 <Dio_ReadChannel>
    1300:	4603      	mov	r3, r0
    1302:	461a      	mov	r2, r3
    1304:	f89d 3006 	ldrb.w	r3, [sp, #6]
    1308:	429a      	cmp	r2, r3
    130a:	d17b      	bne.n	1404 <__BSS_SRAM_SIZE+0x2c4>
                    count_flags[i] = TRUE;  //Starting count.
    130c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1310:	4a48      	ldr	r2, [pc, #288]	; (1434 <__BSS_SRAM_SIZE+0x2f4>)
    1312:	2101      	movs	r1, #1
    1314:	54d1      	strb	r1, [r2, r3]
                    count[i] = 0;   //Restarting count.
    1316:	f89d 3007 	ldrb.w	r3, [sp, #7]
    131a:	4a47      	ldr	r2, [pc, #284]	; (1438 <__BSS_SRAM_SIZE+0x2f8>)
    131c:	2100      	movs	r1, #0
    131e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_DOUBLE_PRESS;
    1322:	4b46      	ldr	r3, [pc, #280]	; (143c <__BSS_SRAM_SIZE+0x2fc>)
    1324:	681a      	ldr	r2, [r3, #0]
    1326:	f89d 3007 	ldrb.w	r3, [sp, #7]
    132a:	4413      	add	r3, r2
    132c:	2202      	movs	r2, #2
    132e:	721a      	strb	r2, [r3, #8]
                }
            break;
    1330:	e068      	b.n	1404 <__BSS_SRAM_SIZE+0x2c4>
        
            case HWIOAB_BTN_STATE_DOUBLE_PRESS :
                //Checking count timeout.
                if ( count[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout ) {
    1332:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1336:	4a40      	ldr	r2, [pc, #256]	; (1438 <__BSS_SRAM_SIZE+0x2f8>)
    1338:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    133c:	4b3f      	ldr	r3, [pc, #252]	; (143c <__BSS_SRAM_SIZE+0x2fc>)
    133e:	681b      	ldr	r3, [r3, #0]
    1340:	6859      	ldr	r1, [r3, #4]
    1342:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1346:	00db      	lsls	r3, r3, #3
    1348:	440b      	add	r3, r1
    134a:	685b      	ldr	r3, [r3, #4]
    134c:	429a      	cmp	r2, r3
    134e:	d106      	bne.n	135e <__BSS_SRAM_SIZE+0x21e>
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_HOLD_PRESS;
    1350:	4b3a      	ldr	r3, [pc, #232]	; (143c <__BSS_SRAM_SIZE+0x2fc>)
    1352:	681a      	ldr	r2, [r3, #0]
    1354:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1358:	4413      	add	r3, r2
    135a:	2203      	movs	r2, #3
    135c:	721a      	strb	r2, [r3, #8]
                }

                //Checking if the button is released.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !active ) {  //Double click.
    135e:	4b37      	ldr	r3, [pc, #220]	; (143c <__BSS_SRAM_SIZE+0x2fc>)
    1360:	681b      	ldr	r3, [r3, #0]
    1362:	685a      	ldr	r2, [r3, #4]
    1364:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1368:	00db      	lsls	r3, r3, #3
    136a:	4413      	add	r3, r2
    136c:	881b      	ldrh	r3, [r3, #0]
    136e:	4618      	mov	r0, r3
    1370:	f007 f8e0 	bl	8534 <Dio_ReadChannel>
    1374:	4603      	mov	r3, r0
    1376:	461a      	mov	r2, r3
    1378:	f89d 3006 	ldrb.w	r3, [sp, #6]
    137c:	f083 0301 	eor.w	r3, r3, #1
    1380:	b2db      	uxtb	r3, r3
    1382:	429a      	cmp	r2, r3
    1384:	d140      	bne.n	1408 <__BSS_SRAM_SIZE+0x2c8>
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_DOUBLE_CLICK;
    1386:	4b2d      	ldr	r3, [pc, #180]	; (143c <__BSS_SRAM_SIZE+0x2fc>)
    1388:	681a      	ldr	r2, [r3, #0]
    138a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    138e:	4413      	add	r3, r2
    1390:	2202      	movs	r2, #2
    1392:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
    1394:	4b29      	ldr	r3, [pc, #164]	; (143c <__BSS_SRAM_SIZE+0x2fc>)
    1396:	681a      	ldr	r2, [r3, #0]
    1398:	f89d 3007 	ldrb.w	r3, [sp, #7]
    139c:	4413      	add	r3, r2
    139e:	2200      	movs	r2, #0
    13a0:	721a      	strb	r2, [r3, #8]
                }
            break;
    13a2:	e031      	b.n	1408 <__BSS_SRAM_SIZE+0x2c8>
        
            case HWIOAB_BTN_STATE_HOLD_PRESS :  //Hold click.
                ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_HOLD_CLICK;
    13a4:	4b25      	ldr	r3, [pc, #148]	; (143c <__BSS_SRAM_SIZE+0x2fc>)
    13a6:	681a      	ldr	r2, [r3, #0]
    13a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    13ac:	4413      	add	r3, r2
    13ae:	2203      	movs	r2, #3
    13b0:	72da      	strb	r2, [r3, #11]
                //Checking if the button is released.
                if ( Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !active ) {
    13b2:	4b22      	ldr	r3, [pc, #136]	; (143c <__BSS_SRAM_SIZE+0x2fc>)
    13b4:	681b      	ldr	r3, [r3, #0]
    13b6:	685a      	ldr	r2, [r3, #4]
    13b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    13bc:	00db      	lsls	r3, r3, #3
    13be:	4413      	add	r3, r2
    13c0:	881b      	ldrh	r3, [r3, #0]
    13c2:	4618      	mov	r0, r3
    13c4:	f007 f8b6 	bl	8534 <Dio_ReadChannel>
    13c8:	4603      	mov	r3, r0
    13ca:	461a      	mov	r2, r3
    13cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    13d0:	f083 0301 	eor.w	r3, r3, #1
    13d4:	b2db      	uxtb	r3, r3
    13d6:	429a      	cmp	r2, r3
    13d8:	d118      	bne.n	140c <__BSS_SRAM_SIZE+0x2cc>
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_RELEASE;
    13da:	4b18      	ldr	r3, [pc, #96]	; (143c <__BSS_SRAM_SIZE+0x2fc>)
    13dc:	681a      	ldr	r2, [r3, #0]
    13de:	f89d 3007 	ldrb.w	r3, [sp, #7]
    13e2:	4413      	add	r3, r2
    13e4:	2204      	movs	r2, #4
    13e6:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
    13e8:	4b14      	ldr	r3, [pc, #80]	; (143c <__BSS_SRAM_SIZE+0x2fc>)
    13ea:	681a      	ldr	r2, [r3, #0]
    13ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    13f0:	4413      	add	r3, r2
    13f2:	2200      	movs	r2, #0
    13f4:	721a      	strb	r2, [r3, #8]
                }
            break;
    13f6:	e009      	b.n	140c <__BSS_SRAM_SIZE+0x2cc>
        
            default: //Invalid state
                #if ( HWIOAB_BUTTONS_DEV_ERROR_DETECT == STD_ON )
                    Det_ReportError( HWIOAB_BUTTONS_MODULE_ID, HWIOAB_BUTTONS_INSTANCE_ID, HWIOAB_BUTTONS_MAINFUNCTION_ID, HWIOAB_BUTTONS_E_STATE );
                #endif
            break;
    13f8:	bf00      	nop
    13fa:	e008      	b.n	140e <__BSS_SRAM_SIZE+0x2ce>
            break;
    13fc:	bf00      	nop
    13fe:	e006      	b.n	140e <__BSS_SRAM_SIZE+0x2ce>
            break;
    1400:	bf00      	nop
    1402:	e004      	b.n	140e <__BSS_SRAM_SIZE+0x2ce>
            break;
    1404:	bf00      	nop
    1406:	e002      	b.n	140e <__BSS_SRAM_SIZE+0x2ce>
            break;
    1408:	bf00      	nop
    140a:	e000      	b.n	140e <__BSS_SRAM_SIZE+0x2ce>
            break;
    140c:	bf00      	nop
    for ( i = 0; i < ButtonsControl_Ptr->Buttons; i++ ) { //Executing state machine for each button.
    140e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1412:	3301      	adds	r3, #1
    1414:	f88d 3007 	strb.w	r3, [sp, #7]
    1418:	4b08      	ldr	r3, [pc, #32]	; (143c <__BSS_SRAM_SIZE+0x2fc>)
    141a:	681b      	ldr	r3, [r3, #0]
    141c:	781b      	ldrb	r3, [r3, #0]
    141e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1422:	429a      	cmp	r2, r3
    1424:	f4ff aec5 	bcc.w	11b2 <__BSS_SRAM_SIZE+0x72>
        }
    }
}
    1428:	bf00      	nop
    142a:	bf00      	nop
    142c:	b003      	add	sp, #12
    142e:	f85d fb04 	ldr.w	pc, [sp], #4
    1432:	bf00      	nop
    1434:	1fff97b4 	.word	0x1fff97b4
    1438:	1fff97b8 	.word	0x1fff97b8
    143c:	1fff8b60 	.word	0x1fff8b60

00001440 <HwIoAb_Leds_Init>:
/**
 * @brief This function initialices the control structure for the leds.
 * 
 * @param [in] Leds_Config Pointer to configuration array.
 */
void HwIoAb_Leds_Init( const HwIoAb_Leds_Config *Leds_Config ) {
    1440:	b084      	sub	sp, #16
    1442:	9001      	str	r0, [sp, #4]
    //local data.
    uint8 status = TRUE;
    1444:	2301      	movs	r3, #1
    1446:	f88d 300f 	strb.w	r3, [sp, #15]
            Det_ReportError( HWIOAB_LEDS_MODULE_ID, HWIOAB_LEDS_INSTANCE_ID, HWIOAB_LEDS_INIT_ID, HWIOAB_LEDS_E_CONFIG );
            status = FALSE;
        }
    #endif
    
    if ( status == TRUE ) {
    144a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    144e:	2b01      	cmp	r3, #1
    1450:	d107      	bne.n	1462 <HwIoAb_Leds_Init+0x22>
        //Initializing members.
        LedsControl_Ptr->Leds = HWIOAB_LEDS;
    1452:	4b05      	ldr	r3, [pc, #20]	; (1468 <HwIoAb_Leds_Init+0x28>)
    1454:	681b      	ldr	r3, [r3, #0]
    1456:	2203      	movs	r2, #3
    1458:	701a      	strb	r2, [r3, #0]
        LedsControl_Ptr->LedsConfig_Ptr = Leds_Config;
    145a:	4b03      	ldr	r3, [pc, #12]	; (1468 <HwIoAb_Leds_Init+0x28>)
    145c:	681b      	ldr	r3, [r3, #0]
    145e:	9a01      	ldr	r2, [sp, #4]
    1460:	605a      	str	r2, [r3, #4]
    }
}
    1462:	bf00      	nop
    1464:	b004      	add	sp, #16
    1466:	4770      	bx	lr
    1468:	1fff8b64 	.word	0x1fff8b64

0000146c <HwIoAb_Leds_TurnToggle>:
 * 
 * @param Led Led ID.
 * 
 * @note The led ID must be valid.
 */
void HwIoAb_Leds_TurnToggle( uint8 Led ) {
    146c:	b500      	push	{lr}
    146e:	b083      	sub	sp, #12
    1470:	4603      	mov	r3, r0
    1472:	f88d 3007 	strb.w	r3, [sp, #7]
    //Verifying if the ID is valid.
    if ( Led <= LedsControl_Ptr->Leds - 1 ) {   //Valid ID.
    1476:	4b0b      	ldr	r3, [pc, #44]	; (14a4 <HwIoAb_Leds_TurnToggle+0x38>)
    1478:	681b      	ldr	r3, [r3, #0]
    147a:	781b      	ldrb	r3, [r3, #0]
    147c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1480:	429a      	cmp	r2, r3
    1482:	d20a      	bcs.n	149a <HwIoAb_Leds_TurnToggle+0x2e>
        Dio_FlipChannel( LedsControl_Ptr->LedsConfig_Ptr[ Led ].Led );
    1484:	4b07      	ldr	r3, [pc, #28]	; (14a4 <HwIoAb_Leds_TurnToggle+0x38>)
    1486:	681b      	ldr	r3, [r3, #0]
    1488:	685a      	ldr	r2, [r3, #4]
    148a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    148e:	009b      	lsls	r3, r3, #2
    1490:	4413      	add	r3, r2
    1492:	881b      	ldrh	r3, [r3, #0]
    1494:	4618      	mov	r0, r3
    1496:	f007 f89e 	bl	85d6 <Dio_FlipChannel>
    else {  //Invalid id.
        #if ( HWIOAB_LEDS_DEV_ERROR_DETECT == STD_ON )
            Det_ReportError( HWIOAB_LEDS_MODULE_ID, HWIOAB_LEDS_INSTANCE_ID, HWIOAB_LEDS_TURNTOGGLE_ID, HWIOAB_LEDS_E_LED_ID );
        #endif
    }
}
    149a:	bf00      	nop
    149c:	b003      	add	sp, #12
    149e:	f85d fb04 	ldr.w	pc, [sp], #4
    14a2:	bf00      	nop
    14a4:	1fff8b64 	.word	0x1fff8b64

000014a8 <HwIoAb_Pots_Init>:
 * 
 * It calibrates both ADC modules and initialices the raw results arrays for the conversions.
 * 
 * @param Pots_Config Pointer to configuration structure instance, in this case is not use. 
 */
void HwIoAb_Pots_Init( const HwIoAb_Pots_Config *Pots_Config ) {
    14a8:	b500      	push	{lr}
    14aa:	b085      	sub	sp, #20
    14ac:	9001      	str	r0, [sp, #4]
    //local data.
    Adc_CalibrationStatusType Calib_Status_ADC0;
    Adc_CalibrationStatusType Calib_Status_ADC1;

    //Calibrating ADC modules.
    Adc_Calibrate( Adc0, &Calib_Status_ADC0 );
    14ae:	ab03      	add	r3, sp, #12
    14b0:	4619      	mov	r1, r3
    14b2:	2000      	movs	r0, #0
    14b4:	f008 ffe5 	bl	a482 <Adc_Calibrate>
    Adc_Calibrate( Adc1, &Calib_Status_ADC1 );
    14b8:	ab02      	add	r3, sp, #8
    14ba:	4619      	mov	r1, r3
    14bc:	2001      	movs	r0, #1
    14be:	f008 ffe0 	bl	a482 <Adc_Calibrate>

    //Initializing raw results array.
    Adc_SetupResultBuffer( Adc0Group_0, HWIOAB_POTS_MAIN_RAW_RESULTS );
    14c2:	4b0b      	ldr	r3, [pc, #44]	; (14f0 <HwIoAb_Pots_Init+0x48>)
    14c4:	681b      	ldr	r3, [r3, #0]
    14c6:	3302      	adds	r3, #2
    14c8:	4619      	mov	r1, r3
    14ca:	2000      	movs	r0, #0
    14cc:	f008 fcd2 	bl	9e74 <Adc_SetupResultBuffer>
    Adc_SetupResultBuffer( Adc1Group_0, HWIOAB_POTS_ALTER_RAW_RESULTS );
    14d0:	4b07      	ldr	r3, [pc, #28]	; (14f0 <HwIoAb_Pots_Init+0x48>)
    14d2:	681b      	ldr	r3, [r3, #0]
    14d4:	3306      	adds	r3, #6
    14d6:	4619      	mov	r1, r3
    14d8:	2001      	movs	r0, #1
    14da:	f008 fccb 	bl	9e74 <Adc_SetupResultBuffer>

    PotsControl_Ptr->Pots = HWIOAB_POTS;
    14de:	4b04      	ldr	r3, [pc, #16]	; (14f0 <HwIoAb_Pots_Init+0x48>)
    14e0:	681b      	ldr	r3, [r3, #0]
    14e2:	2202      	movs	r2, #2
    14e4:	701a      	strb	r2, [r3, #0]
}
    14e6:	bf00      	nop
    14e8:	b005      	add	sp, #20
    14ea:	f85d fb04 	ldr.w	pc, [sp], #4
    14ee:	bf00      	nop
    14f0:	1fff8b68 	.word	0x1fff8b68

000014f4 <HwIoAb_Pots_GetValue>:
 * @param Pots Pointer to array of results in Ohms.
 * 
 * @note The group uses hardware average of 4 samples. 
 * @note The total conversion time is 117.42us
 */
void HwIoAb_Pots_GetValue( uint16 *Pots ) {
    14f4:	b500      	push	{lr}
    14f6:	b085      	sub	sp, #20
    14f8:	9001      	str	r0, [sp, #4]
    //local data.
    uint8 i = 0;
    14fa:	2300      	movs	r3, #0
    14fc:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 status = TRUE;
    1500:	2301      	movs	r3, #1
    1502:	f88d 300e 	strb.w	r3, [sp, #14]
            Det_ReportError( HWIOAB_POTS_MODULE_ID, HWIOAB_POTS_INSTANCE_ID, HWIOAB_POTS_GETVALUE_ID, HWIOAB_POTS_E_PARAM );
            status = FALSE;
        }
    #endif

    if ( status == TRUE ) {
    1506:	f89d 300e 	ldrb.w	r3, [sp, #14]
    150a:	2b01      	cmp	r3, #1
    150c:	d150      	bne.n	15b0 <HwIoAb_Pots_GetValue+0xbc>
        Adc_StartGroupConversion( Adc0Group_0 );    //Triggering group conversion.
    150e:	2000      	movs	r0, #0
    1510:	f008 fd7e 	bl	a010 <Adc_StartGroupConversion>
        while( Adc_GetGroupStatus( Adc0Group_0 ) == ADC_BUSY ); //Wating until group conversion is done.
    1514:	bf00      	nop
    1516:	2000      	movs	r0, #0
    1518:	f008 fe9a 	bl	a250 <Adc_GetGroupStatus>
    151c:	4603      	mov	r3, r0
    151e:	2b01      	cmp	r3, #1
    1520:	d0f9      	beq.n	1516 <HwIoAb_Pots_GetValue+0x22>
        Adc_ReadGroup( Adc0Group_0, HWIOAB_POTS_MAIN_RAW_RESULTS ); //Reading group conversion values and storing them to the raw result array.
    1522:	4b25      	ldr	r3, [pc, #148]	; (15b8 <HwIoAb_Pots_GetValue+0xc4>)
    1524:	681b      	ldr	r3, [r3, #0]
    1526:	3302      	adds	r3, #2
    1528:	4619      	mov	r1, r3
    152a:	2000      	movs	r0, #0
    152c:	f008 fe38 	bl	a1a0 <Adc_ReadGroup>

        //Calculating resistance of each Pot.
        for ( i = 0; i < PotsControl_Ptr->Pots; i++ ) {
    1530:	2300      	movs	r3, #0
    1532:	f88d 300f 	strb.w	r3, [sp, #15]
    1536:	e034      	b.n	15a2 <HwIoAb_Pots_GetValue+0xae>
            Pots[i] = HWIOAB_POTS_TOTAL_RESISTANCE * 
            ( ( float ) PotsControl_Ptr->Raw_results_main[i] / HWIOAB_MAX_ADC_VALUE_12_B );
    1538:	4b1f      	ldr	r3, [pc, #124]	; (15b8 <HwIoAb_Pots_GetValue+0xc4>)
    153a:	681a      	ldr	r2, [r3, #0]
    153c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1540:	005b      	lsls	r3, r3, #1
    1542:	4413      	add	r3, r2
    1544:	885b      	ldrh	r3, [r3, #2]
    1546:	ee07 3a90 	vmov	s15, r3
    154a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    154e:	eddf 6a1b 	vldr	s13, [pc, #108]	; 15bc <HwIoAb_Pots_GetValue+0xc8>
    1552:	eec7 7a26 	vdiv.f32	s15, s14, s13
            Pots[i] = HWIOAB_POTS_TOTAL_RESISTANCE * 
    1556:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 15c0 <HwIoAb_Pots_GetValue+0xcc>
    155a:	ee67 7a87 	vmul.f32	s15, s15, s14
    155e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1562:	005b      	lsls	r3, r3, #1
    1564:	9a01      	ldr	r2, [sp, #4]
    1566:	4413      	add	r3, r2
    1568:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    156c:	ee17 2a90 	vmov	r2, s15
    1570:	b292      	uxth	r2, r2
    1572:	801a      	strh	r2, [r3, #0]

            if ( Pots[i] > HWIOAB_POTS_TOTAL_RESISTANCE ) { //Saturating value if needed.
    1574:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1578:	005b      	lsls	r3, r3, #1
    157a:	9a01      	ldr	r2, [sp, #4]
    157c:	4413      	add	r3, r2
    157e:	881b      	ldrh	r3, [r3, #0]
    1580:	f242 7210 	movw	r2, #10000	; 0x2710
    1584:	4293      	cmp	r3, r2
    1586:	d907      	bls.n	1598 <HwIoAb_Pots_GetValue+0xa4>
                Pots[i] = HWIOAB_POTS_TOTAL_RESISTANCE;
    1588:	f89d 300f 	ldrb.w	r3, [sp, #15]
    158c:	005b      	lsls	r3, r3, #1
    158e:	9a01      	ldr	r2, [sp, #4]
    1590:	4413      	add	r3, r2
    1592:	f242 7210 	movw	r2, #10000	; 0x2710
    1596:	801a      	strh	r2, [r3, #0]
        for ( i = 0; i < PotsControl_Ptr->Pots; i++ ) {
    1598:	f89d 300f 	ldrb.w	r3, [sp, #15]
    159c:	3301      	adds	r3, #1
    159e:	f88d 300f 	strb.w	r3, [sp, #15]
    15a2:	4b05      	ldr	r3, [pc, #20]	; (15b8 <HwIoAb_Pots_GetValue+0xc4>)
    15a4:	681b      	ldr	r3, [r3, #0]
    15a6:	781b      	ldrb	r3, [r3, #0]
    15a8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    15ac:	429a      	cmp	r2, r3
    15ae:	d3c3      	bcc.n	1538 <HwIoAb_Pots_GetValue+0x44>
            }
        }
    }
}
    15b0:	bf00      	nop
    15b2:	b005      	add	sp, #20
    15b4:	f85d fb04 	ldr.w	pc, [sp], #4
    15b8:	1fff8b68 	.word	0x1fff8b68
    15bc:	45310000 	.word	0x45310000
    15c0:	461c4000 	.word	0x461c4000

000015c4 <HwIoAb_Pots_GetAltValue>:
 * @param AltPots Pointer to array of results in Ohms.
 * 
 * @note The group uses hardware average of 4 samples.
 * @note The total conversion time is 117.42us
 */
void HwIoAb_Pots_GetAltValue( uint16 *AltPots ) {
    15c4:	b500      	push	{lr}
    15c6:	b085      	sub	sp, #20
    15c8:	9001      	str	r0, [sp, #4]
    //local data.
    uint8 i = 0;
    15ca:	2300      	movs	r3, #0
    15cc:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 status = TRUE;
    15d0:	2301      	movs	r3, #1
    15d2:	f88d 300e 	strb.w	r3, [sp, #14]
            Det_ReportError( HWIOAB_POTS_MODULE_ID, HWIOAB_POTS_INSTANCE_ID, HWIOAB_POTS_GETALTVALUE_ID, HWIOAB_POTS_E_PARAM );
            status = FALSE;
        }
    #endif

    if ( status == TRUE ) {
    15d6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    15da:	2b01      	cmp	r3, #1
    15dc:	d150      	bne.n	1680 <HwIoAb_Pots_GetAltValue+0xbc>
        Adc_StartGroupConversion( Adc1Group_0 );    //Triggering group conversion.
    15de:	2001      	movs	r0, #1
    15e0:	f008 fd16 	bl	a010 <Adc_StartGroupConversion>
        while( Adc_GetGroupStatus( Adc1Group_0 ) == ADC_BUSY ); //Wating until group conversion is done.
    15e4:	bf00      	nop
    15e6:	2001      	movs	r0, #1
    15e8:	f008 fe32 	bl	a250 <Adc_GetGroupStatus>
    15ec:	4603      	mov	r3, r0
    15ee:	2b01      	cmp	r3, #1
    15f0:	d0f9      	beq.n	15e6 <HwIoAb_Pots_GetAltValue+0x22>
        Adc_ReadGroup( Adc1Group_0, HWIOAB_POTS_ALTER_RAW_RESULTS ); //Reading group conversion values and storing them to the raw result array.
    15f2:	4b25      	ldr	r3, [pc, #148]	; (1688 <HwIoAb_Pots_GetAltValue+0xc4>)
    15f4:	681b      	ldr	r3, [r3, #0]
    15f6:	3306      	adds	r3, #6
    15f8:	4619      	mov	r1, r3
    15fa:	2001      	movs	r0, #1
    15fc:	f008 fdd0 	bl	a1a0 <Adc_ReadGroup>

        //Calculating resistance of each Pot.
        for ( i = 0; i < PotsControl_Ptr->Pots; i++ ) {
    1600:	2300      	movs	r3, #0
    1602:	f88d 300f 	strb.w	r3, [sp, #15]
    1606:	e034      	b.n	1672 <HwIoAb_Pots_GetAltValue+0xae>
            AltPots[i] = HWIOAB_POTS_TOTAL_RESISTANCE *
            ( ( float ) PotsControl_Ptr->Raw_results_alter[i] / HWIOAB_MAX_ADC_VALUE_12_B );
    1608:	4b1f      	ldr	r3, [pc, #124]	; (1688 <HwIoAb_Pots_GetAltValue+0xc4>)
    160a:	681a      	ldr	r2, [r3, #0]
    160c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1610:	005b      	lsls	r3, r3, #1
    1612:	4413      	add	r3, r2
    1614:	88db      	ldrh	r3, [r3, #6]
    1616:	ee07 3a90 	vmov	s15, r3
    161a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    161e:	eddf 6a1b 	vldr	s13, [pc, #108]	; 168c <HwIoAb_Pots_GetAltValue+0xc8>
    1622:	eec7 7a26 	vdiv.f32	s15, s14, s13
            AltPots[i] = HWIOAB_POTS_TOTAL_RESISTANCE *
    1626:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 1690 <HwIoAb_Pots_GetAltValue+0xcc>
    162a:	ee67 7a87 	vmul.f32	s15, s15, s14
    162e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1632:	005b      	lsls	r3, r3, #1
    1634:	9a01      	ldr	r2, [sp, #4]
    1636:	4413      	add	r3, r2
    1638:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    163c:	ee17 2a90 	vmov	r2, s15
    1640:	b292      	uxth	r2, r2
    1642:	801a      	strh	r2, [r3, #0]

            if ( AltPots[i] > HWIOAB_POTS_TOTAL_RESISTANCE ) { //Saturating value if needed.
    1644:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1648:	005b      	lsls	r3, r3, #1
    164a:	9a01      	ldr	r2, [sp, #4]
    164c:	4413      	add	r3, r2
    164e:	881b      	ldrh	r3, [r3, #0]
    1650:	f242 7210 	movw	r2, #10000	; 0x2710
    1654:	4293      	cmp	r3, r2
    1656:	d907      	bls.n	1668 <HwIoAb_Pots_GetAltValue+0xa4>
                AltPots[i] = HWIOAB_POTS_TOTAL_RESISTANCE;
    1658:	f89d 300f 	ldrb.w	r3, [sp, #15]
    165c:	005b      	lsls	r3, r3, #1
    165e:	9a01      	ldr	r2, [sp, #4]
    1660:	4413      	add	r3, r2
    1662:	f242 7210 	movw	r2, #10000	; 0x2710
    1666:	801a      	strh	r2, [r3, #0]
        for ( i = 0; i < PotsControl_Ptr->Pots; i++ ) {
    1668:	f89d 300f 	ldrb.w	r3, [sp, #15]
    166c:	3301      	adds	r3, #1
    166e:	f88d 300f 	strb.w	r3, [sp, #15]
    1672:	4b05      	ldr	r3, [pc, #20]	; (1688 <HwIoAb_Pots_GetAltValue+0xc4>)
    1674:	681b      	ldr	r3, [r3, #0]
    1676:	781b      	ldrb	r3, [r3, #0]
    1678:	f89d 200f 	ldrb.w	r2, [sp, #15]
    167c:	429a      	cmp	r2, r3
    167e:	d3c3      	bcc.n	1608 <HwIoAb_Pots_GetAltValue+0x44>
            }
        }
    }
    1680:	bf00      	nop
    1682:	b005      	add	sp, #20
    1684:	f85d fb04 	ldr.w	pc, [sp], #4
    1688:	1fff8b68 	.word	0x1fff8b68
    168c:	45310000 	.word	0x45310000
    1690:	461c4000 	.word	0x461c4000

00001694 <HwIoAb_Buzzer_Init>:
 * It does the configurations neccesary for using the buzzer.
 * In this case no configurations are needeed.
 * 
 * @param Buzzer_Config Pointer to config structure instance, in this case is not use.
 */
void HwIoAb_Buzzer_Init( const HwIoAb_Buzzer_Config *Buzzer_Config ) {
    1694:	b082      	sub	sp, #8
    1696:	9001      	str	r0, [sp, #4]

}
    1698:	bf00      	nop
    169a:	b002      	add	sp, #8
    169c:	4770      	bx	lr

0000169e <HwIoAb_Buzzer_Beep>:
/**
 * @brief This function beeps the buzzer according to the tone given.
 * 
 * @param Tone Tone of interest.
 */
void HwIoAb_Buzzer_Beep( uint8 Tone ) {
    169e:	b500      	push	{lr}
    16a0:	b083      	sub	sp, #12
    16a2:	4603      	mov	r3, r0
    16a4:	f88d 3007 	strb.w	r3, [sp, #7]
    switch ( Tone ) {
    16a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    16ac:	2b02      	cmp	r3, #2
    16ae:	d016      	beq.n	16de <HwIoAb_Buzzer_Beep+0x40>
    16b0:	2b02      	cmp	r3, #2
    16b2:	dc1c      	bgt.n	16ee <HwIoAb_Buzzer_Beep+0x50>
    16b4:	2b00      	cmp	r3, #0
    16b6:	d002      	beq.n	16be <HwIoAb_Buzzer_Beep+0x20>
    16b8:	2b01      	cmp	r3, #1
    16ba:	d008      	beq.n	16ce <HwIoAb_Buzzer_Beep+0x30>
        break;
        default:    //Invalid tone.
            #if ( HWIOAB_BUZZER_DEV_ERROR_DETECT == STD_ON )
                Det_ReportError( HWIOAB_BUZZER_MODULE_ID, HWIOAB_BUZZER_INSTANCE_ID, HWIOAB_BUZZER_BEEP_ID, HWIOAB_BUZZER_E_TONE );
           #endif
        break;
    16bc:	e017      	b.n	16ee <HwIoAb_Buzzer_Beep+0x50>
            Pwm_SetPeriodAndDuty( HWIOAB_BUZZER_CH, HWIOAB_BUZZER_PERIOD_1, HWIOAB_BUZZER_25_DUTY_CYCLE );
    16be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    16c2:	f241 41d5 	movw	r1, #5333	; 0x14d5
    16c6:	2000      	movs	r0, #0
    16c8:	f00f fcc6 	bl	11058 <Pwm_SetPeriodAndDuty>
        break;
    16cc:	e010      	b.n	16f0 <HwIoAb_Buzzer_Beep+0x52>
            Pwm_SetPeriodAndDuty( HWIOAB_BUZZER_CH, HWIOAB_BUZZER_PERIOD_2, HWIOAB_BUZZER_25_DUTY_CYCLE );
    16ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    16d2:	f640 216a 	movw	r1, #2666	; 0xa6a
    16d6:	2000      	movs	r0, #0
    16d8:	f00f fcbe 	bl	11058 <Pwm_SetPeriodAndDuty>
        break;
    16dc:	e008      	b.n	16f0 <HwIoAb_Buzzer_Beep+0x52>
            Pwm_SetPeriodAndDuty( HWIOAB_BUZZER_CH, HWIOAB_BUZZER_PERIOD_3, HWIOAB_BUZZER_25_DUTY_CYCLE );
    16de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    16e2:	f44f 61c8 	mov.w	r1, #1600	; 0x640
    16e6:	2000      	movs	r0, #0
    16e8:	f00f fcb6 	bl	11058 <Pwm_SetPeriodAndDuty>
        break;
    16ec:	e000      	b.n	16f0 <HwIoAb_Buzzer_Beep+0x52>
        break;
    16ee:	bf00      	nop
    }
}
    16f0:	bf00      	nop
    16f2:	b003      	add	sp, #12
    16f4:	f85d fb04 	ldr.w	pc, [sp], #4

000016f8 <HwIoAb_Buzzer_Stop>:

/**
 * @brief This function stops the beep of the buzzer.
 * 
 */
void HwIoAb_Buzzer_Stop( void ) {
    16f8:	b508      	push	{r3, lr}
    Pwm_SetOutputToIdle( HWIOAB_BUZZER_CH );    //Stopping buzzer.
    16fa:	2000      	movs	r0, #0
    16fc:	f00f fd16 	bl	1112c <Pwm_SetOutputToIdle>
}
    1700:	bf00      	nop
    1702:	bd08      	pop	{r3, pc}

00001704 <IoHwAb_Init0>:
/**
 * @brief This function initialices all the IO hardware abstractions.
 * 
 * @param ConfigPtr Pointer to configuration structure instance, in this case is not used.
 */
void IoHwAb_Init0( const IoHwAb0_ConfigType* ConfigPtr ) {
    1704:	b500      	push	{lr}
    1706:	b083      	sub	sp, #12
    1708:	9001      	str	r0, [sp, #4]
    HwIoAb_Buttons_Init( ButtonsCfg );  //Buttons init.
    170a:	4808      	ldr	r0, [pc, #32]	; (172c <IoHwAb_Init0+0x28>)
    170c:	f7ff fcaa 	bl	1064 <HwIoAb_Buttons_Init>
    HwIoAb_Leds_Init( LedsCfg );    //Leds init.
    1710:	4807      	ldr	r0, [pc, #28]	; (1730 <IoHwAb_Init0+0x2c>)
    1712:	f7ff fe95 	bl	1440 <HwIoAb_Leds_Init>
    HwIoAb_Pots_Init( NULL_PTR );   //Pots init.
    1716:	2000      	movs	r0, #0
    1718:	f7ff fec6 	bl	14a8 <HwIoAb_Pots_Init>
    HwIoAb_Buzzer_Init( NULL_PTR ); //Buzzer init.
    171c:	2000      	movs	r0, #0
    171e:	f7ff ffb9 	bl	1694 <HwIoAb_Buzzer_Init>
}
    1722:	bf00      	nop
    1724:	b003      	add	sp, #12
    1726:	f85d fb04 	ldr.w	pc, [sp], #4
    172a:	bf00      	nop
    172c:	0001a0b8 	.word	0x0001a0b8
    1730:	0001a0d0 	.word	0x0001a0d0

00001734 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
    1734:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
    1736:	2300      	movs	r3, #0
    1738:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
    173a:	2300      	movs	r3, #0
    173c:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
    173e:	2300      	movs	r3, #0
    1740:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
    1742:	2300      	movs	r3, #0
    1744:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
    1746:	4b44      	ldr	r3, [pc, #272]	; (1858 <init_data_bss+0x124>)
    1748:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
    174a:	4b44      	ldr	r3, [pc, #272]	; (185c <init_data_bss+0x128>)
    174c:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
    174e:	9b05      	ldr	r3, [sp, #20]
    1750:	681b      	ldr	r3, [r3, #0]
    1752:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
    1754:	9b05      	ldr	r3, [sp, #20]
    1756:	3304      	adds	r3, #4
    1758:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
    175a:	9b05      	ldr	r3, [sp, #20]
    175c:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
    175e:	2300      	movs	r3, #0
    1760:	9309      	str	r3, [sp, #36]	; 0x24
    1762:	e03d      	b.n	17e0 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
    1764:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1766:	4613      	mov	r3, r2
    1768:	005b      	lsls	r3, r3, #1
    176a:	4413      	add	r3, r2
    176c:	009b      	lsls	r3, r3, #2
    176e:	461a      	mov	r2, r3
    1770:	9b03      	ldr	r3, [sp, #12]
    1772:	4413      	add	r3, r2
    1774:	685b      	ldr	r3, [r3, #4]
    1776:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
    1778:	9a09      	ldr	r2, [sp, #36]	; 0x24
    177a:	4613      	mov	r3, r2
    177c:	005b      	lsls	r3, r3, #1
    177e:	4413      	add	r3, r2
    1780:	009b      	lsls	r3, r3, #2
    1782:	461a      	mov	r2, r3
    1784:	9b03      	ldr	r3, [sp, #12]
    1786:	4413      	add	r3, r2
    1788:	681b      	ldr	r3, [r3, #0]
    178a:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
    178c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    178e:	4613      	mov	r3, r2
    1790:	005b      	lsls	r3, r3, #1
    1792:	4413      	add	r3, r2
    1794:	009b      	lsls	r3, r3, #2
    1796:	461a      	mov	r2, r3
    1798:	9b03      	ldr	r3, [sp, #12]
    179a:	4413      	add	r3, r2
    179c:	689b      	ldr	r3, [r3, #8]
    179e:	4619      	mov	r1, r3
    17a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    17a2:	4613      	mov	r3, r2
    17a4:	005b      	lsls	r3, r3, #1
    17a6:	4413      	add	r3, r2
    17a8:	009b      	lsls	r3, r3, #2
    17aa:	461a      	mov	r2, r3
    17ac:	9b03      	ldr	r3, [sp, #12]
    17ae:	4413      	add	r3, r2
    17b0:	685b      	ldr	r3, [r3, #4]
    17b2:	1acb      	subs	r3, r1, r3
    17b4:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    17b6:	2300      	movs	r3, #0
    17b8:	9308      	str	r3, [sp, #32]
    17ba:	e00a      	b.n	17d2 <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
    17bc:	9a00      	ldr	r2, [sp, #0]
    17be:	9b08      	ldr	r3, [sp, #32]
    17c0:	441a      	add	r2, r3
    17c2:	9901      	ldr	r1, [sp, #4]
    17c4:	9b08      	ldr	r3, [sp, #32]
    17c6:	440b      	add	r3, r1
    17c8:	7812      	ldrb	r2, [r2, #0]
    17ca:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    17cc:	9b08      	ldr	r3, [sp, #32]
    17ce:	3301      	adds	r3, #1
    17d0:	9308      	str	r3, [sp, #32]
    17d2:	9a08      	ldr	r2, [sp, #32]
    17d4:	9b06      	ldr	r3, [sp, #24]
    17d6:	429a      	cmp	r2, r3
    17d8:	d3f0      	bcc.n	17bc <init_data_bss+0x88>
    for(i = 0; i < len; i++)
    17da:	9b09      	ldr	r3, [sp, #36]	; 0x24
    17dc:	3301      	adds	r3, #1
    17de:	9309      	str	r3, [sp, #36]	; 0x24
    17e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    17e2:	9b07      	ldr	r3, [sp, #28]
    17e4:	429a      	cmp	r2, r3
    17e6:	d3bd      	bcc.n	1764 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
    17e8:	9b04      	ldr	r3, [sp, #16]
    17ea:	681b      	ldr	r3, [r3, #0]
    17ec:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
    17ee:	9b04      	ldr	r3, [sp, #16]
    17f0:	3304      	adds	r3, #4
    17f2:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
    17f4:	9b04      	ldr	r3, [sp, #16]
    17f6:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
    17f8:	2300      	movs	r3, #0
    17fa:	9309      	str	r3, [sp, #36]	; 0x24
    17fc:	e024      	b.n	1848 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
    17fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1800:	00db      	lsls	r3, r3, #3
    1802:	9a02      	ldr	r2, [sp, #8]
    1804:	4413      	add	r3, r2
    1806:	681b      	ldr	r3, [r3, #0]
    1808:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
    180a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    180c:	00db      	lsls	r3, r3, #3
    180e:	9a02      	ldr	r2, [sp, #8]
    1810:	4413      	add	r3, r2
    1812:	685b      	ldr	r3, [r3, #4]
    1814:	4619      	mov	r1, r3
    1816:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1818:	00db      	lsls	r3, r3, #3
    181a:	9a02      	ldr	r2, [sp, #8]
    181c:	4413      	add	r3, r2
    181e:	681b      	ldr	r3, [r3, #0]
    1820:	1acb      	subs	r3, r1, r3
    1822:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    1824:	2300      	movs	r3, #0
    1826:	9308      	str	r3, [sp, #32]
    1828:	e007      	b.n	183a <init_data_bss+0x106>
        {
            ram[j] = 0U;
    182a:	9a01      	ldr	r2, [sp, #4]
    182c:	9b08      	ldr	r3, [sp, #32]
    182e:	4413      	add	r3, r2
    1830:	2200      	movs	r2, #0
    1832:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    1834:	9b08      	ldr	r3, [sp, #32]
    1836:	3301      	adds	r3, #1
    1838:	9308      	str	r3, [sp, #32]
    183a:	9a08      	ldr	r2, [sp, #32]
    183c:	9b06      	ldr	r3, [sp, #24]
    183e:	429a      	cmp	r2, r3
    1840:	d3f3      	bcc.n	182a <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
    1842:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1844:	3301      	adds	r3, #1
    1846:	9309      	str	r3, [sp, #36]	; 0x24
    1848:	9a09      	ldr	r2, [sp, #36]	; 0x24
    184a:	9b07      	ldr	r3, [sp, #28]
    184c:	429a      	cmp	r2, r3
    184e:	d3d6      	bcc.n	17fe <init_data_bss+0xca>
        }
    }
}
    1850:	bf00      	nop
    1852:	bf00      	nop
    1854:	b00a      	add	sp, #40	; 0x28
    1856:	4770      	bx	lr
    1858:	0001af18 	.word	0x0001af18
    185c:	0001af34 	.word	0x0001af34

00001860 <sys_m4_cache_init>:
{
    1860:	b084      	sub	sp, #16
    1862:	4603      	mov	r3, r0
    1864:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
    1868:	2300      	movs	r3, #0
    186a:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
    186e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1872:	2b00      	cmp	r3, #0
    1874:	d118      	bne.n	18a8 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
    1876:	4b10      	ldr	r3, [pc, #64]	; (18b8 <sys_m4_cache_init+0x58>)
    1878:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
    187c:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
    187e:	4b0e      	ldr	r3, [pc, #56]	; (18b8 <sys_m4_cache_init+0x58>)
    1880:	681b      	ldr	r3, [r3, #0]
    1882:	4a0d      	ldr	r2, [pc, #52]	; (18b8 <sys_m4_cache_init+0x58>)
    1884:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1888:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
    188a:	bf00      	nop
    188c:	4b0a      	ldr	r3, [pc, #40]	; (18b8 <sys_m4_cache_init+0x58>)
    188e:	681b      	ldr	r3, [r3, #0]
    1890:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    1894:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    1898:	d0f8      	beq.n	188c <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
    189a:	4b07      	ldr	r3, [pc, #28]	; (18b8 <sys_m4_cache_init+0x58>)
    189c:	681b      	ldr	r3, [r3, #0]
    189e:	4a06      	ldr	r2, [pc, #24]	; (18b8 <sys_m4_cache_init+0x58>)
    18a0:	f043 0301 	orr.w	r3, r3, #1
    18a4:	6013      	str	r3, [r2, #0]
    18a6:	e002      	b.n	18ae <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
    18a8:	2301      	movs	r3, #1
    18aa:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
    18ae:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    18b2:	4618      	mov	r0, r3
    18b4:	b004      	add	sp, #16
    18b6:	4770      	bx	lr
    18b8:	e0082000 	.word	0xe0082000

000018bc <startup_go_to_user_mode>:
}
    18bc:	bf00      	nop
    18be:	4770      	bx	lr

000018c0 <Sys_GetCoreID>:
    return 0U;
    18c0:	2300      	movs	r3, #0
}
    18c2:	4618      	mov	r0, r3
    18c4:	4770      	bx	lr

000018c6 <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
    18c6:	e7fe      	b.n	18c6 <HardFault_Handler>

000018c8 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
    18c8:	e7fe      	b.n	18c8 <MemManage_Handler>

000018ca <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
    18ca:	e7fe      	b.n	18ca <BusFault_Handler>

000018cc <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
    18cc:	e7fe      	b.n	18cc <UsageFault_Handler>

000018ce <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
    18ce:	e7fe      	b.n	18ce <SVC_Handler>

000018d0 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
    18d0:	e7fe      	b.n	18d0 <DebugMon_Handler>

000018d2 <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
    18d2:	e7fe      	b.n	18d2 <PendSV_Handler>

000018d4 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
    18d4:	e7fe      	b.n	18d4 <SysTick_Handler>

000018d6 <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
    18d6:	e7fe      	b.n	18d6 <undefined_handler>

000018d8 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
    18d8:	b500      	push	{lr}
    18da:	b083      	sub	sp, #12
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
    18dc:	4b26      	ldr	r3, [pc, #152]	; (1978 <_DoInit+0xa0>)
    18de:	9300      	str	r3, [sp, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
    18e0:	22a8      	movs	r2, #168	; 0xa8
    18e2:	2100      	movs	r1, #0
    18e4:	9800      	ldr	r0, [sp, #0]
    18e6:	f000 fd47 	bl	2378 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    18ea:	9b00      	ldr	r3, [sp, #0]
    18ec:	2203      	movs	r2, #3
    18ee:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    18f0:	9b00      	ldr	r3, [sp, #0]
    18f2:	2203      	movs	r2, #3
    18f4:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    18f6:	9b00      	ldr	r3, [sp, #0]
    18f8:	4a20      	ldr	r2, [pc, #128]	; (197c <_DoInit+0xa4>)
    18fa:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    18fc:	9b00      	ldr	r3, [sp, #0]
    18fe:	4a20      	ldr	r2, [pc, #128]	; (1980 <_DoInit+0xa8>)
    1900:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    1902:	9b00      	ldr	r3, [sp, #0]
    1904:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1908:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
    190a:	9b00      	ldr	r3, [sp, #0]
    190c:	2200      	movs	r2, #0
    190e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    1910:	9b00      	ldr	r3, [sp, #0]
    1912:	2200      	movs	r2, #0
    1914:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    1916:	9b00      	ldr	r3, [sp, #0]
    1918:	2200      	movs	r2, #0
    191a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    191c:	9b00      	ldr	r3, [sp, #0]
    191e:	4a17      	ldr	r2, [pc, #92]	; (197c <_DoInit+0xa4>)
    1920:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    1922:	9b00      	ldr	r3, [sp, #0]
    1924:	4a17      	ldr	r2, [pc, #92]	; (1984 <_DoInit+0xac>)
    1926:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    1928:	9b00      	ldr	r3, [sp, #0]
    192a:	2210      	movs	r2, #16
    192c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    192e:	9b00      	ldr	r3, [sp, #0]
    1930:	2200      	movs	r2, #0
    1932:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    1934:	9b00      	ldr	r3, [sp, #0]
    1936:	2200      	movs	r2, #0
    1938:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    193a:	9b00      	ldr	r3, [sp, #0]
    193c:	2200      	movs	r2, #0
    193e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
    1940:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
    1944:	2300      	movs	r3, #0
    1946:	9301      	str	r3, [sp, #4]
    1948:	e00c      	b.n	1964 <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
    194a:	9b01      	ldr	r3, [sp, #4]
    194c:	f1c3 030f 	rsb	r3, r3, #15
    1950:	4a0d      	ldr	r2, [pc, #52]	; (1988 <_DoInit+0xb0>)
    1952:	5cd1      	ldrb	r1, [r2, r3]
    1954:	9a00      	ldr	r2, [sp, #0]
    1956:	9b01      	ldr	r3, [sp, #4]
    1958:	4413      	add	r3, r2
    195a:	460a      	mov	r2, r1
    195c:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
    195e:	9b01      	ldr	r3, [sp, #4]
    1960:	3301      	adds	r3, #1
    1962:	9301      	str	r3, [sp, #4]
    1964:	9b01      	ldr	r3, [sp, #4]
    1966:	2b0f      	cmp	r3, #15
    1968:	d9ef      	bls.n	194a <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
    196a:	f3bf 8f5f 	dmb	sy
}
    196e:	bf00      	nop
    1970:	b003      	add	sp, #12
    1972:	f85d fb04 	ldr.w	pc, [sp], #4
    1976:	bf00      	nop
    1978:	1fff97f4 	.word	0x1fff97f4
    197c:	00019888 	.word	0x00019888
    1980:	1fff989c 	.word	0x1fff989c
    1984:	1fff9c9c 	.word	0x1fff9c9c
    1988:	0001aef4 	.word	0x0001aef4

0000198c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    198c:	b500      	push	{lr}
    198e:	b08b      	sub	sp, #44	; 0x2c
    1990:	9003      	str	r0, [sp, #12]
    1992:	9102      	str	r1, [sp, #8]
    1994:	9201      	str	r2, [sp, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
    1996:	2300      	movs	r3, #0
    1998:	9308      	str	r3, [sp, #32]
  WrOff = pRing->WrOff;
    199a:	9b03      	ldr	r3, [sp, #12]
    199c:	68db      	ldr	r3, [r3, #12]
    199e:	9307      	str	r3, [sp, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    19a0:	9b03      	ldr	r3, [sp, #12]
    19a2:	691b      	ldr	r3, [r3, #16]
    19a4:	9306      	str	r3, [sp, #24]
    if (RdOff > WrOff) {
    19a6:	9a06      	ldr	r2, [sp, #24]
    19a8:	9b07      	ldr	r3, [sp, #28]
    19aa:	429a      	cmp	r2, r3
    19ac:	d905      	bls.n	19ba <_WriteBlocking+0x2e>
      NumBytesToWrite = RdOff - WrOff - 1u;
    19ae:	9a06      	ldr	r2, [sp, #24]
    19b0:	9b07      	ldr	r3, [sp, #28]
    19b2:	1ad3      	subs	r3, r2, r3
    19b4:	3b01      	subs	r3, #1
    19b6:	9309      	str	r3, [sp, #36]	; 0x24
    19b8:	e007      	b.n	19ca <_WriteBlocking+0x3e>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    19ba:	9b03      	ldr	r3, [sp, #12]
    19bc:	689a      	ldr	r2, [r3, #8]
    19be:	9906      	ldr	r1, [sp, #24]
    19c0:	9b07      	ldr	r3, [sp, #28]
    19c2:	1acb      	subs	r3, r1, r3
    19c4:	4413      	add	r3, r2
    19c6:	3b01      	subs	r3, #1
    19c8:	9309      	str	r3, [sp, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    19ca:	9b03      	ldr	r3, [sp, #12]
    19cc:	689a      	ldr	r2, [r3, #8]
    19ce:	9b07      	ldr	r3, [sp, #28]
    19d0:	1ad3      	subs	r3, r2, r3
    19d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    19d4:	4293      	cmp	r3, r2
    19d6:	bf28      	it	cs
    19d8:	4613      	movcs	r3, r2
    19da:	9309      	str	r3, [sp, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    19dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    19de:	9b01      	ldr	r3, [sp, #4]
    19e0:	4293      	cmp	r3, r2
    19e2:	bf28      	it	cs
    19e4:	4613      	movcs	r3, r2
    19e6:	9309      	str	r3, [sp, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    19e8:	9b03      	ldr	r3, [sp, #12]
    19ea:	685a      	ldr	r2, [r3, #4]
    19ec:	9b07      	ldr	r3, [sp, #28]
    19ee:	4413      	add	r3, r2
    19f0:	9305      	str	r3, [sp, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    19f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    19f4:	9902      	ldr	r1, [sp, #8]
    19f6:	9805      	ldr	r0, [sp, #20]
    19f8:	f000 fcb0 	bl	235c <memcpy>
    NumBytesWritten += NumBytesToWrite;
    19fc:	9a08      	ldr	r2, [sp, #32]
    19fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1a00:	4413      	add	r3, r2
    1a02:	9308      	str	r3, [sp, #32]
    pBuffer         += NumBytesToWrite;
    1a04:	9a02      	ldr	r2, [sp, #8]
    1a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1a08:	4413      	add	r3, r2
    1a0a:	9302      	str	r3, [sp, #8]
    NumBytes        -= NumBytesToWrite;
    1a0c:	9a01      	ldr	r2, [sp, #4]
    1a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1a10:	1ad3      	subs	r3, r2, r3
    1a12:	9301      	str	r3, [sp, #4]
    WrOff           += NumBytesToWrite;
    1a14:	9a07      	ldr	r2, [sp, #28]
    1a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1a18:	4413      	add	r3, r2
    1a1a:	9307      	str	r3, [sp, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
    1a1c:	9b03      	ldr	r3, [sp, #12]
    1a1e:	689b      	ldr	r3, [r3, #8]
    1a20:	9a07      	ldr	r2, [sp, #28]
    1a22:	429a      	cmp	r2, r3
    1a24:	d101      	bne.n	1a2a <_WriteBlocking+0x9e>
      WrOff = 0u;
    1a26:	2300      	movs	r3, #0
    1a28:	9307      	str	r3, [sp, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    1a2a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
    1a2e:	9b03      	ldr	r3, [sp, #12]
    1a30:	9a07      	ldr	r2, [sp, #28]
    1a32:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
    1a34:	9b01      	ldr	r3, [sp, #4]
    1a36:	2b00      	cmp	r3, #0
    1a38:	d1b2      	bne.n	19a0 <_WriteBlocking+0x14>
  return NumBytesWritten;
    1a3a:	9b08      	ldr	r3, [sp, #32]
}
    1a3c:	4618      	mov	r0, r3
    1a3e:	b00b      	add	sp, #44	; 0x2c
    1a40:	f85d fb04 	ldr.w	pc, [sp], #4

00001a44 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    1a44:	b500      	push	{lr}
    1a46:	b089      	sub	sp, #36	; 0x24
    1a48:	9003      	str	r0, [sp, #12]
    1a4a:	9102      	str	r1, [sp, #8]
    1a4c:	9201      	str	r2, [sp, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
    1a4e:	9b03      	ldr	r3, [sp, #12]
    1a50:	68db      	ldr	r3, [r3, #12]
    1a52:	9307      	str	r3, [sp, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
    1a54:	9b03      	ldr	r3, [sp, #12]
    1a56:	689a      	ldr	r2, [r3, #8]
    1a58:	9b07      	ldr	r3, [sp, #28]
    1a5a:	1ad3      	subs	r3, r2, r3
    1a5c:	9306      	str	r3, [sp, #24]
  if (Rem > NumBytes) {
    1a5e:	9a06      	ldr	r2, [sp, #24]
    1a60:	9b01      	ldr	r3, [sp, #4]
    1a62:	429a      	cmp	r2, r3
    1a64:	d911      	bls.n	1a8a <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    1a66:	9b03      	ldr	r3, [sp, #12]
    1a68:	685a      	ldr	r2, [r3, #4]
    1a6a:	9b07      	ldr	r3, [sp, #28]
    1a6c:	4413      	add	r3, r2
    1a6e:	9304      	str	r3, [sp, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
    1a70:	9a01      	ldr	r2, [sp, #4]
    1a72:	9902      	ldr	r1, [sp, #8]
    1a74:	9804      	ldr	r0, [sp, #16]
    1a76:	f000 fc71 	bl	235c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    1a7a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
    1a7e:	9a07      	ldr	r2, [sp, #28]
    1a80:	9b01      	ldr	r3, [sp, #4]
    1a82:	441a      	add	r2, r3
    1a84:	9b03      	ldr	r3, [sp, #12]
    1a86:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
    1a88:	e01f      	b.n	1aca <_WriteNoCheck+0x86>
    NumBytesAtOnce = Rem;
    1a8a:	9b06      	ldr	r3, [sp, #24]
    1a8c:	9305      	str	r3, [sp, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    1a8e:	9b03      	ldr	r3, [sp, #12]
    1a90:	685a      	ldr	r2, [r3, #4]
    1a92:	9b07      	ldr	r3, [sp, #28]
    1a94:	4413      	add	r3, r2
    1a96:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    1a98:	9a05      	ldr	r2, [sp, #20]
    1a9a:	9902      	ldr	r1, [sp, #8]
    1a9c:	9804      	ldr	r0, [sp, #16]
    1a9e:	f000 fc5d 	bl	235c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
    1aa2:	9a01      	ldr	r2, [sp, #4]
    1aa4:	9b06      	ldr	r3, [sp, #24]
    1aa6:	1ad3      	subs	r3, r2, r3
    1aa8:	9305      	str	r3, [sp, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    1aaa:	9b03      	ldr	r3, [sp, #12]
    1aac:	685b      	ldr	r3, [r3, #4]
    1aae:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    1ab0:	9a02      	ldr	r2, [sp, #8]
    1ab2:	9b06      	ldr	r3, [sp, #24]
    1ab4:	4413      	add	r3, r2
    1ab6:	9a05      	ldr	r2, [sp, #20]
    1ab8:	4619      	mov	r1, r3
    1aba:	9804      	ldr	r0, [sp, #16]
    1abc:	f000 fc4e 	bl	235c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    1ac0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
    1ac4:	9b03      	ldr	r3, [sp, #12]
    1ac6:	9a05      	ldr	r2, [sp, #20]
    1ac8:	60da      	str	r2, [r3, #12]
}
    1aca:	bf00      	nop
    1acc:	b009      	add	sp, #36	; 0x24
    1ace:	f85d fb04 	ldr.w	pc, [sp], #4

00001ad2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
    1ad2:	b086      	sub	sp, #24
    1ad4:	9001      	str	r0, [sp, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
    1ad6:	9b01      	ldr	r3, [sp, #4]
    1ad8:	691b      	ldr	r3, [r3, #16]
    1ada:	9304      	str	r3, [sp, #16]
  WrOff = pRing->WrOff;
    1adc:	9b01      	ldr	r3, [sp, #4]
    1ade:	68db      	ldr	r3, [r3, #12]
    1ae0:	9303      	str	r3, [sp, #12]
  if (RdOff <= WrOff) {
    1ae2:	9a04      	ldr	r2, [sp, #16]
    1ae4:	9b03      	ldr	r3, [sp, #12]
    1ae6:	429a      	cmp	r2, r3
    1ae8:	d808      	bhi.n	1afc <_GetAvailWriteSpace+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    1aea:	9b01      	ldr	r3, [sp, #4]
    1aec:	689a      	ldr	r2, [r3, #8]
    1aee:	9b03      	ldr	r3, [sp, #12]
    1af0:	1ad2      	subs	r2, r2, r3
    1af2:	9b04      	ldr	r3, [sp, #16]
    1af4:	4413      	add	r3, r2
    1af6:	3b01      	subs	r3, #1
    1af8:	9305      	str	r3, [sp, #20]
    1afa:	e004      	b.n	1b06 <_GetAvailWriteSpace+0x34>
  } else {
    r = RdOff - WrOff - 1u;
    1afc:	9a04      	ldr	r2, [sp, #16]
    1afe:	9b03      	ldr	r3, [sp, #12]
    1b00:	1ad3      	subs	r3, r2, r3
    1b02:	3b01      	subs	r3, #1
    1b04:	9305      	str	r3, [sp, #20]
  }
  return r;
    1b06:	9b05      	ldr	r3, [sp, #20]
}
    1b08:	4618      	mov	r0, r3
    1b0a:	b006      	add	sp, #24
    1b0c:	4770      	bx	lr
	...

00001b10 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1b10:	b500      	push	{lr}
    1b12:	b089      	sub	sp, #36	; 0x24
    1b14:	9003      	str	r0, [sp, #12]
    1b16:	9102      	str	r1, [sp, #8]
    1b18:	9201      	str	r2, [sp, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
    1b1a:	9b02      	ldr	r3, [sp, #8]
    1b1c:	9306      	str	r3, [sp, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    1b1e:	9b03      	ldr	r3, [sp, #12]
    1b20:	1c5a      	adds	r2, r3, #1
    1b22:	4613      	mov	r3, r2
    1b24:	005b      	lsls	r3, r3, #1
    1b26:	4413      	add	r3, r2
    1b28:	00db      	lsls	r3, r3, #3
    1b2a:	4a20      	ldr	r2, [pc, #128]	; (1bac <SEGGER_RTT_WriteNoLock+0x9c>)
    1b2c:	4413      	add	r3, r2
    1b2e:	9305      	str	r3, [sp, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    1b30:	9b05      	ldr	r3, [sp, #20]
    1b32:	695b      	ldr	r3, [r3, #20]
    1b34:	2b02      	cmp	r3, #2
    1b36:	d029      	beq.n	1b8c <SEGGER_RTT_WriteNoLock+0x7c>
    1b38:	2b02      	cmp	r3, #2
    1b3a:	d82e      	bhi.n	1b9a <SEGGER_RTT_WriteNoLock+0x8a>
    1b3c:	2b00      	cmp	r3, #0
    1b3e:	d002      	beq.n	1b46 <SEGGER_RTT_WriteNoLock+0x36>
    1b40:	2b01      	cmp	r3, #1
    1b42:	d013      	beq.n	1b6c <SEGGER_RTT_WriteNoLock+0x5c>
    1b44:	e029      	b.n	1b9a <SEGGER_RTT_WriteNoLock+0x8a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    1b46:	9805      	ldr	r0, [sp, #20]
    1b48:	f7ff ffc3 	bl	1ad2 <_GetAvailWriteSpace>
    1b4c:	9004      	str	r0, [sp, #16]
    if (Avail < NumBytes) {
    1b4e:	9a04      	ldr	r2, [sp, #16]
    1b50:	9b01      	ldr	r3, [sp, #4]
    1b52:	429a      	cmp	r2, r3
    1b54:	d202      	bcs.n	1b5c <SEGGER_RTT_WriteNoLock+0x4c>
      Status = 0u;
    1b56:	2300      	movs	r3, #0
    1b58:	9307      	str	r3, [sp, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
    1b5a:	e021      	b.n	1ba0 <SEGGER_RTT_WriteNoLock+0x90>
      Status = NumBytes;
    1b5c:	9b01      	ldr	r3, [sp, #4]
    1b5e:	9307      	str	r3, [sp, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
    1b60:	9a01      	ldr	r2, [sp, #4]
    1b62:	9906      	ldr	r1, [sp, #24]
    1b64:	9805      	ldr	r0, [sp, #20]
    1b66:	f7ff ff6d 	bl	1a44 <_WriteNoCheck>
    break;
    1b6a:	e019      	b.n	1ba0 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
    1b6c:	9805      	ldr	r0, [sp, #20]
    1b6e:	f7ff ffb0 	bl	1ad2 <_GetAvailWriteSpace>
    1b72:	9004      	str	r0, [sp, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
    1b74:	9a01      	ldr	r2, [sp, #4]
    1b76:	9b04      	ldr	r3, [sp, #16]
    1b78:	4293      	cmp	r3, r2
    1b7a:	bf28      	it	cs
    1b7c:	4613      	movcs	r3, r2
    1b7e:	9307      	str	r3, [sp, #28]
    _WriteNoCheck(pRing, pData, Status);
    1b80:	9a07      	ldr	r2, [sp, #28]
    1b82:	9906      	ldr	r1, [sp, #24]
    1b84:	9805      	ldr	r0, [sp, #20]
    1b86:	f7ff ff5d 	bl	1a44 <_WriteNoCheck>
    break;
    1b8a:	e009      	b.n	1ba0 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    1b8c:	9a01      	ldr	r2, [sp, #4]
    1b8e:	9906      	ldr	r1, [sp, #24]
    1b90:	9805      	ldr	r0, [sp, #20]
    1b92:	f7ff fefb 	bl	198c <_WriteBlocking>
    1b96:	9007      	str	r0, [sp, #28]
    break;
    1b98:	e002      	b.n	1ba0 <SEGGER_RTT_WriteNoLock+0x90>
  default:
    Status = 0u;
    1b9a:	2300      	movs	r3, #0
    1b9c:	9307      	str	r3, [sp, #28]
    break;
    1b9e:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
    1ba0:	9b07      	ldr	r3, [sp, #28]
}
    1ba2:	4618      	mov	r0, r3
    1ba4:	b009      	add	sp, #36	; 0x24
    1ba6:	f85d fb04 	ldr.w	pc, [sp], #4
    1baa:	bf00      	nop
    1bac:	1fff97f4 	.word	0x1fff97f4

00001bb0 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1bb0:	b500      	push	{lr}
    1bb2:	b089      	sub	sp, #36	; 0x24
    1bb4:	9003      	str	r0, [sp, #12]
    1bb6:	9102      	str	r1, [sp, #8]
    1bb8:	9201      	str	r2, [sp, #4]
  unsigned Status;

  INIT();
    1bba:	4b0f      	ldr	r3, [pc, #60]	; (1bf8 <SEGGER_RTT_Write+0x48>)
    1bbc:	9307      	str	r3, [sp, #28]
    1bbe:	9b07      	ldr	r3, [sp, #28]
    1bc0:	781b      	ldrb	r3, [r3, #0]
    1bc2:	b2db      	uxtb	r3, r3
    1bc4:	2b53      	cmp	r3, #83	; 0x53
    1bc6:	d001      	beq.n	1bcc <SEGGER_RTT_Write+0x1c>
    1bc8:	f7ff fe86 	bl	18d8 <_DoInit>
  SEGGER_RTT_LOCK();
    1bcc:	f3ef 8311 	mrs	r3, BASEPRI
    1bd0:	f04f 0120 	mov.w	r1, #32
    1bd4:	f381 8811 	msr	BASEPRI, r1
    1bd8:	9306      	str	r3, [sp, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
    1bda:	9a01      	ldr	r2, [sp, #4]
    1bdc:	9902      	ldr	r1, [sp, #8]
    1bde:	9803      	ldr	r0, [sp, #12]
    1be0:	f7ff ff96 	bl	1b10 <SEGGER_RTT_WriteNoLock>
    1be4:	9005      	str	r0, [sp, #20]
  SEGGER_RTT_UNLOCK();
    1be6:	9b06      	ldr	r3, [sp, #24]
    1be8:	f383 8811 	msr	BASEPRI, r3
  return Status;
    1bec:	9b05      	ldr	r3, [sp, #20]
}
    1bee:	4618      	mov	r0, r3
    1bf0:	b009      	add	sp, #36	; 0x24
    1bf2:	f85d fb04 	ldr.w	pc, [sp], #4
    1bf6:	bf00      	nop
    1bf8:	1fff97f4 	.word	0x1fff97f4

00001bfc <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    1bfc:	b508      	push	{r3, lr}
  _DoInit();
    1bfe:	f7ff fe6b 	bl	18d8 <_DoInit>
}
    1c02:	bf00      	nop
    1c04:	bd08      	pop	{r3, pc}

00001c06 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
    1c06:	b500      	push	{lr}
    1c08:	b085      	sub	sp, #20
    1c0a:	9001      	str	r0, [sp, #4]
    1c0c:	460b      	mov	r3, r1
    1c0e:	f88d 3003 	strb.w	r3, [sp, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
    1c12:	9b01      	ldr	r3, [sp, #4]
    1c14:	689b      	ldr	r3, [r3, #8]
    1c16:	9303      	str	r3, [sp, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
    1c18:	9b03      	ldr	r3, [sp, #12]
    1c1a:	1c5a      	adds	r2, r3, #1
    1c1c:	9b01      	ldr	r3, [sp, #4]
    1c1e:	685b      	ldr	r3, [r3, #4]
    1c20:	429a      	cmp	r2, r3
    1c22:	d80f      	bhi.n	1c44 <_StoreChar+0x3e>
    *(p->pBuffer + Cnt) = c;
    1c24:	9b01      	ldr	r3, [sp, #4]
    1c26:	681a      	ldr	r2, [r3, #0]
    1c28:	9b03      	ldr	r3, [sp, #12]
    1c2a:	4413      	add	r3, r2
    1c2c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    1c30:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
    1c32:	9b03      	ldr	r3, [sp, #12]
    1c34:	1c5a      	adds	r2, r3, #1
    1c36:	9b01      	ldr	r3, [sp, #4]
    1c38:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
    1c3a:	9b01      	ldr	r3, [sp, #4]
    1c3c:	68db      	ldr	r3, [r3, #12]
    1c3e:	1c5a      	adds	r2, r3, #1
    1c40:	9b01      	ldr	r3, [sp, #4]
    1c42:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
    1c44:	9b01      	ldr	r3, [sp, #4]
    1c46:	689a      	ldr	r2, [r3, #8]
    1c48:	9b01      	ldr	r3, [sp, #4]
    1c4a:	685b      	ldr	r3, [r3, #4]
    1c4c:	429a      	cmp	r2, r3
    1c4e:	d115      	bne.n	1c7c <_StoreChar+0x76>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
    1c50:	9b01      	ldr	r3, [sp, #4]
    1c52:	6918      	ldr	r0, [r3, #16]
    1c54:	9b01      	ldr	r3, [sp, #4]
    1c56:	6819      	ldr	r1, [r3, #0]
    1c58:	9b01      	ldr	r3, [sp, #4]
    1c5a:	689b      	ldr	r3, [r3, #8]
    1c5c:	461a      	mov	r2, r3
    1c5e:	f7ff ffa7 	bl	1bb0 <SEGGER_RTT_Write>
    1c62:	4602      	mov	r2, r0
    1c64:	9b01      	ldr	r3, [sp, #4]
    1c66:	689b      	ldr	r3, [r3, #8]
    1c68:	429a      	cmp	r2, r3
    1c6a:	d004      	beq.n	1c76 <_StoreChar+0x70>
      p->ReturnValue = -1;
    1c6c:	9b01      	ldr	r3, [sp, #4]
    1c6e:	f04f 32ff 	mov.w	r2, #4294967295
    1c72:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
    1c74:	e002      	b.n	1c7c <_StoreChar+0x76>
      p->Cnt = 0u;
    1c76:	9b01      	ldr	r3, [sp, #4]
    1c78:	2200      	movs	r2, #0
    1c7a:	609a      	str	r2, [r3, #8]
}
    1c7c:	bf00      	nop
    1c7e:	b005      	add	sp, #20
    1c80:	f85d fb04 	ldr.w	pc, [sp], #4

00001c84 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    1c84:	b500      	push	{lr}
    1c86:	b08b      	sub	sp, #44	; 0x2c
    1c88:	9003      	str	r0, [sp, #12]
    1c8a:	9102      	str	r1, [sp, #8]
    1c8c:	9201      	str	r2, [sp, #4]
    1c8e:	9300      	str	r3, [sp, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
    1c90:	9b02      	ldr	r3, [sp, #8]
    1c92:	9308      	str	r3, [sp, #32]
  Digit = 1u;
    1c94:	2301      	movs	r3, #1
    1c96:	9309      	str	r3, [sp, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
    1c98:	2301      	movs	r3, #1
    1c9a:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    1c9c:	e007      	b.n	1cae <_PrintUnsigned+0x2a>
    Number = (Number / Base);
    1c9e:	9a08      	ldr	r2, [sp, #32]
    1ca0:	9b01      	ldr	r3, [sp, #4]
    1ca2:	fbb2 f3f3 	udiv	r3, r2, r3
    1ca6:	9308      	str	r3, [sp, #32]
    Width++;
    1ca8:	9b07      	ldr	r3, [sp, #28]
    1caa:	3301      	adds	r3, #1
    1cac:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    1cae:	9a08      	ldr	r2, [sp, #32]
    1cb0:	9b01      	ldr	r3, [sp, #4]
    1cb2:	429a      	cmp	r2, r3
    1cb4:	d2f3      	bcs.n	1c9e <_PrintUnsigned+0x1a>
  }
  if (NumDigits > Width) {
    1cb6:	9a00      	ldr	r2, [sp, #0]
    1cb8:	9b07      	ldr	r3, [sp, #28]
    1cba:	429a      	cmp	r2, r3
    1cbc:	d901      	bls.n	1cc2 <_PrintUnsigned+0x3e>
    Width = NumDigits;
    1cbe:	9b00      	ldr	r3, [sp, #0]
    1cc0:	9307      	str	r3, [sp, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
    1cc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1cc4:	f003 0301 	and.w	r3, r3, #1
    1cc8:	2b00      	cmp	r3, #0
    1cca:	d128      	bne.n	1d1e <_PrintUnsigned+0x9a>
    if (FieldWidth != 0u) {
    1ccc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1cce:	2b00      	cmp	r3, #0
    1cd0:	d025      	beq.n	1d1e <_PrintUnsigned+0x9a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
    1cd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1cd4:	f003 0302 	and.w	r3, r3, #2
    1cd8:	2b00      	cmp	r3, #0
    1cda:	d006      	beq.n	1cea <_PrintUnsigned+0x66>
    1cdc:	9b00      	ldr	r3, [sp, #0]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d103      	bne.n	1cea <_PrintUnsigned+0x66>
        c = '0';
    1ce2:	2330      	movs	r3, #48	; 0x30
    1ce4:	f88d 301b 	strb.w	r3, [sp, #27]
    1ce8:	e002      	b.n	1cf0 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
    1cea:	2320      	movs	r3, #32
    1cec:	f88d 301b 	strb.w	r3, [sp, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1cf0:	e00c      	b.n	1d0c <_PrintUnsigned+0x88>
        FieldWidth--;
    1cf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1cf4:	3b01      	subs	r3, #1
    1cf6:	930c      	str	r3, [sp, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
    1cf8:	f89d 301b 	ldrb.w	r3, [sp, #27]
    1cfc:	4619      	mov	r1, r3
    1cfe:	9803      	ldr	r0, [sp, #12]
    1d00:	f7ff ff81 	bl	1c06 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1d04:	9b03      	ldr	r3, [sp, #12]
    1d06:	68db      	ldr	r3, [r3, #12]
    1d08:	2b00      	cmp	r3, #0
    1d0a:	db07      	blt.n	1d1c <_PrintUnsigned+0x98>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1d0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1d0e:	2b00      	cmp	r3, #0
    1d10:	d005      	beq.n	1d1e <_PrintUnsigned+0x9a>
    1d12:	9a07      	ldr	r2, [sp, #28]
    1d14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1d16:	429a      	cmp	r2, r3
    1d18:	d3eb      	bcc.n	1cf2 <_PrintUnsigned+0x6e>
    1d1a:	e000      	b.n	1d1e <_PrintUnsigned+0x9a>
          break;
    1d1c:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
    1d1e:	9b03      	ldr	r3, [sp, #12]
    1d20:	68db      	ldr	r3, [r3, #12]
    1d22:	2b00      	cmp	r3, #0
    1d24:	db55      	blt.n	1dd2 <_PrintUnsigned+0x14e>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    1d26:	9b00      	ldr	r3, [sp, #0]
    1d28:	2b01      	cmp	r3, #1
    1d2a:	d903      	bls.n	1d34 <_PrintUnsigned+0xb0>
        NumDigits--;
    1d2c:	9b00      	ldr	r3, [sp, #0]
    1d2e:	3b01      	subs	r3, #1
    1d30:	9300      	str	r3, [sp, #0]
    1d32:	e009      	b.n	1d48 <_PrintUnsigned+0xc4>
      } else {
        Div = v / Digit;
    1d34:	9a02      	ldr	r2, [sp, #8]
    1d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1d38:	fbb2 f3f3 	udiv	r3, r2, r3
    1d3c:	9305      	str	r3, [sp, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
    1d3e:	9a05      	ldr	r2, [sp, #20]
    1d40:	9b01      	ldr	r3, [sp, #4]
    1d42:	429a      	cmp	r2, r3
    1d44:	d200      	bcs.n	1d48 <_PrintUnsigned+0xc4>
          break;
    1d46:	e005      	b.n	1d54 <_PrintUnsigned+0xd0>
        }
      }
      Digit *= Base;
    1d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1d4a:	9a01      	ldr	r2, [sp, #4]
    1d4c:	fb02 f303 	mul.w	r3, r2, r3
    1d50:	9309      	str	r3, [sp, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    1d52:	e7e8      	b.n	1d26 <_PrintUnsigned+0xa2>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
    1d54:	9a02      	ldr	r2, [sp, #8]
    1d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1d58:	fbb2 f3f3 	udiv	r3, r2, r3
    1d5c:	9305      	str	r3, [sp, #20]
      v -= Div * Digit;
    1d5e:	9b05      	ldr	r3, [sp, #20]
    1d60:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1d62:	fb02 f303 	mul.w	r3, r2, r3
    1d66:	9a02      	ldr	r2, [sp, #8]
    1d68:	1ad3      	subs	r3, r2, r3
    1d6a:	9302      	str	r3, [sp, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
    1d6c:	4a1b      	ldr	r2, [pc, #108]	; (1ddc <_PrintUnsigned+0x158>)
    1d6e:	9b05      	ldr	r3, [sp, #20]
    1d70:	4413      	add	r3, r2
    1d72:	781b      	ldrb	r3, [r3, #0]
    1d74:	4619      	mov	r1, r3
    1d76:	9803      	ldr	r0, [sp, #12]
    1d78:	f7ff ff45 	bl	1c06 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
    1d7c:	9b03      	ldr	r3, [sp, #12]
    1d7e:	68db      	ldr	r3, [r3, #12]
    1d80:	2b00      	cmp	r3, #0
    1d82:	db08      	blt.n	1d96 <_PrintUnsigned+0x112>
        break;
      }
      Digit /= Base;
    1d84:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1d86:	9b01      	ldr	r3, [sp, #4]
    1d88:	fbb2 f3f3 	udiv	r3, r2, r3
    1d8c:	9309      	str	r3, [sp, #36]	; 0x24
    } while (Digit);
    1d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1d90:	2b00      	cmp	r3, #0
    1d92:	d1df      	bne.n	1d54 <_PrintUnsigned+0xd0>
    1d94:	e000      	b.n	1d98 <_PrintUnsigned+0x114>
        break;
    1d96:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    1d98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1d9a:	f003 0301 	and.w	r3, r3, #1
    1d9e:	2b00      	cmp	r3, #0
    1da0:	d017      	beq.n	1dd2 <_PrintUnsigned+0x14e>
      if (FieldWidth != 0u) {
    1da2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1da4:	2b00      	cmp	r3, #0
    1da6:	d014      	beq.n	1dd2 <_PrintUnsigned+0x14e>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1da8:	e00a      	b.n	1dc0 <_PrintUnsigned+0x13c>
          FieldWidth--;
    1daa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1dac:	3b01      	subs	r3, #1
    1dae:	930c      	str	r3, [sp, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
    1db0:	2120      	movs	r1, #32
    1db2:	9803      	ldr	r0, [sp, #12]
    1db4:	f7ff ff27 	bl	1c06 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
    1db8:	9b03      	ldr	r3, [sp, #12]
    1dba:	68db      	ldr	r3, [r3, #12]
    1dbc:	2b00      	cmp	r3, #0
    1dbe:	db07      	blt.n	1dd0 <_PrintUnsigned+0x14c>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1dc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1dc2:	2b00      	cmp	r3, #0
    1dc4:	d005      	beq.n	1dd2 <_PrintUnsigned+0x14e>
    1dc6:	9a07      	ldr	r2, [sp, #28]
    1dc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1dca:	429a      	cmp	r2, r3
    1dcc:	d3ed      	bcc.n	1daa <_PrintUnsigned+0x126>
          }
        }
      }
    }
  }
}
    1dce:	e000      	b.n	1dd2 <_PrintUnsigned+0x14e>
            break;
    1dd0:	bf00      	nop
}
    1dd2:	bf00      	nop
    1dd4:	b00b      	add	sp, #44	; 0x2c
    1dd6:	f85d fb04 	ldr.w	pc, [sp], #4
    1dda:	bf00      	nop
    1ddc:	0001af08 	.word	0x0001af08

00001de0 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    1de0:	b500      	push	{lr}
    1de2:	b089      	sub	sp, #36	; 0x24
    1de4:	9005      	str	r0, [sp, #20]
    1de6:	9104      	str	r1, [sp, #16]
    1de8:	9203      	str	r2, [sp, #12]
    1dea:	9302      	str	r3, [sp, #8]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
    1dec:	9b04      	ldr	r3, [sp, #16]
    1dee:	2b00      	cmp	r3, #0
    1df0:	bfb8      	it	lt
    1df2:	425b      	neglt	r3, r3
    1df4:	9306      	str	r3, [sp, #24]

  //
  // Get actual field width
  //
  Width = 1u;
    1df6:	2301      	movs	r3, #1
    1df8:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1dfa:	e007      	b.n	1e0c <_PrintInt+0x2c>
    Number = (Number / (int)Base);
    1dfc:	9b03      	ldr	r3, [sp, #12]
    1dfe:	9a06      	ldr	r2, [sp, #24]
    1e00:	fb92 f3f3 	sdiv	r3, r2, r3
    1e04:	9306      	str	r3, [sp, #24]
    Width++;
    1e06:	9b07      	ldr	r3, [sp, #28]
    1e08:	3301      	adds	r3, #1
    1e0a:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1e0c:	9b03      	ldr	r3, [sp, #12]
    1e0e:	9a06      	ldr	r2, [sp, #24]
    1e10:	429a      	cmp	r2, r3
    1e12:	daf3      	bge.n	1dfc <_PrintInt+0x1c>
  }
  if (NumDigits > Width) {
    1e14:	9a02      	ldr	r2, [sp, #8]
    1e16:	9b07      	ldr	r3, [sp, #28]
    1e18:	429a      	cmp	r2, r3
    1e1a:	d901      	bls.n	1e20 <_PrintInt+0x40>
    Width = NumDigits;
    1e1c:	9b02      	ldr	r3, [sp, #8]
    1e1e:	9307      	str	r3, [sp, #28]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    1e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1e22:	2b00      	cmp	r3, #0
    1e24:	d00a      	beq.n	1e3c <_PrintInt+0x5c>
    1e26:	9b04      	ldr	r3, [sp, #16]
    1e28:	2b00      	cmp	r3, #0
    1e2a:	db04      	blt.n	1e36 <_PrintInt+0x56>
    1e2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1e2e:	f003 0304 	and.w	r3, r3, #4
    1e32:	2b00      	cmp	r3, #0
    1e34:	d002      	beq.n	1e3c <_PrintInt+0x5c>
    FieldWidth--;
    1e36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1e38:	3b01      	subs	r3, #1
    1e3a:	930a      	str	r3, [sp, #40]	; 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    1e3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1e3e:	f003 0302 	and.w	r3, r3, #2
    1e42:	2b00      	cmp	r3, #0
    1e44:	d002      	beq.n	1e4c <_PrintInt+0x6c>
    1e46:	9b02      	ldr	r3, [sp, #8]
    1e48:	2b00      	cmp	r3, #0
    1e4a:	d01c      	beq.n	1e86 <_PrintInt+0xa6>
    1e4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1e4e:	f003 0301 	and.w	r3, r3, #1
    1e52:	2b00      	cmp	r3, #0
    1e54:	d117      	bne.n	1e86 <_PrintInt+0xa6>
    if (FieldWidth != 0u) {
    1e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1e58:	2b00      	cmp	r3, #0
    1e5a:	d014      	beq.n	1e86 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1e5c:	e00a      	b.n	1e74 <_PrintInt+0x94>
        FieldWidth--;
    1e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1e60:	3b01      	subs	r3, #1
    1e62:	930a      	str	r3, [sp, #40]	; 0x28
        _StoreChar(pBufferDesc, ' ');
    1e64:	2120      	movs	r1, #32
    1e66:	9805      	ldr	r0, [sp, #20]
    1e68:	f7ff fecd 	bl	1c06 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1e6c:	9b05      	ldr	r3, [sp, #20]
    1e6e:	68db      	ldr	r3, [r3, #12]
    1e70:	2b00      	cmp	r3, #0
    1e72:	db07      	blt.n	1e84 <_PrintInt+0xa4>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1e74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1e76:	2b00      	cmp	r3, #0
    1e78:	d005      	beq.n	1e86 <_PrintInt+0xa6>
    1e7a:	9a07      	ldr	r2, [sp, #28]
    1e7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1e7e:	429a      	cmp	r2, r3
    1e80:	d3ed      	bcc.n	1e5e <_PrintInt+0x7e>
    1e82:	e000      	b.n	1e86 <_PrintInt+0xa6>
          break;
    1e84:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
    1e86:	9b05      	ldr	r3, [sp, #20]
    1e88:	68db      	ldr	r3, [r3, #12]
    1e8a:	2b00      	cmp	r3, #0
    1e8c:	db4a      	blt.n	1f24 <_PrintInt+0x144>
    if (v < 0) {
    1e8e:	9b04      	ldr	r3, [sp, #16]
    1e90:	2b00      	cmp	r3, #0
    1e92:	da07      	bge.n	1ea4 <_PrintInt+0xc4>
      v = -v;
    1e94:	9b04      	ldr	r3, [sp, #16]
    1e96:	425b      	negs	r3, r3
    1e98:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '-');
    1e9a:	212d      	movs	r1, #45	; 0x2d
    1e9c:	9805      	ldr	r0, [sp, #20]
    1e9e:	f7ff feb2 	bl	1c06 <_StoreChar>
    1ea2:	e008      	b.n	1eb6 <_PrintInt+0xd6>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    1ea4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1ea6:	f003 0304 	and.w	r3, r3, #4
    1eaa:	2b00      	cmp	r3, #0
    1eac:	d003      	beq.n	1eb6 <_PrintInt+0xd6>
      _StoreChar(pBufferDesc, '+');
    1eae:	212b      	movs	r1, #43	; 0x2b
    1eb0:	9805      	ldr	r0, [sp, #20]
    1eb2:	f7ff fea8 	bl	1c06 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
    1eb6:	9b05      	ldr	r3, [sp, #20]
    1eb8:	68db      	ldr	r3, [r3, #12]
    1eba:	2b00      	cmp	r3, #0
    1ebc:	db32      	blt.n	1f24 <_PrintInt+0x144>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    1ebe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1ec0:	f003 0302 	and.w	r3, r3, #2
    1ec4:	2b00      	cmp	r3, #0
    1ec6:	d01f      	beq.n	1f08 <_PrintInt+0x128>
    1ec8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1eca:	f003 0301 	and.w	r3, r3, #1
    1ece:	2b00      	cmp	r3, #0
    1ed0:	d11a      	bne.n	1f08 <_PrintInt+0x128>
    1ed2:	9b02      	ldr	r3, [sp, #8]
    1ed4:	2b00      	cmp	r3, #0
    1ed6:	d117      	bne.n	1f08 <_PrintInt+0x128>
        if (FieldWidth != 0u) {
    1ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1eda:	2b00      	cmp	r3, #0
    1edc:	d014      	beq.n	1f08 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1ede:	e00a      	b.n	1ef6 <_PrintInt+0x116>
            FieldWidth--;
    1ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1ee2:	3b01      	subs	r3, #1
    1ee4:	930a      	str	r3, [sp, #40]	; 0x28
            _StoreChar(pBufferDesc, '0');
    1ee6:	2130      	movs	r1, #48	; 0x30
    1ee8:	9805      	ldr	r0, [sp, #20]
    1eea:	f7ff fe8c 	bl	1c06 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
    1eee:	9b05      	ldr	r3, [sp, #20]
    1ef0:	68db      	ldr	r3, [r3, #12]
    1ef2:	2b00      	cmp	r3, #0
    1ef4:	db07      	blt.n	1f06 <_PrintInt+0x126>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1ef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1ef8:	2b00      	cmp	r3, #0
    1efa:	d005      	beq.n	1f08 <_PrintInt+0x128>
    1efc:	9a07      	ldr	r2, [sp, #28]
    1efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1f00:	429a      	cmp	r2, r3
    1f02:	d3ed      	bcc.n	1ee0 <_PrintInt+0x100>
    1f04:	e000      	b.n	1f08 <_PrintInt+0x128>
              break;
    1f06:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
    1f08:	9b05      	ldr	r3, [sp, #20]
    1f0a:	68db      	ldr	r3, [r3, #12]
    1f0c:	2b00      	cmp	r3, #0
    1f0e:	db09      	blt.n	1f24 <_PrintInt+0x144>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    1f10:	9904      	ldr	r1, [sp, #16]
    1f12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1f14:	9301      	str	r3, [sp, #4]
    1f16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1f18:	9300      	str	r3, [sp, #0]
    1f1a:	9b02      	ldr	r3, [sp, #8]
    1f1c:	9a03      	ldr	r2, [sp, #12]
    1f1e:	9805      	ldr	r0, [sp, #20]
    1f20:	f7ff feb0 	bl	1c84 <_PrintUnsigned>
      }
    }
  }
}
    1f24:	bf00      	nop
    1f26:	b009      	add	sp, #36	; 0x24
    1f28:	f85d fb04 	ldr.w	pc, [sp], #4

00001f2c <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
    1f2c:	b500      	push	{lr}
    1f2e:	b0a3      	sub	sp, #140	; 0x8c
    1f30:	9005      	str	r0, [sp, #20]
    1f32:	9104      	str	r1, [sp, #16]
    1f34:	9203      	str	r2, [sp, #12]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
    1f36:	ab06      	add	r3, sp, #24
    1f38:	9316      	str	r3, [sp, #88]	; 0x58
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    1f3a:	2340      	movs	r3, #64	; 0x40
    1f3c:	9317      	str	r3, [sp, #92]	; 0x5c
  BufferDesc.Cnt            = 0u;
    1f3e:	2300      	movs	r3, #0
    1f40:	9318      	str	r3, [sp, #96]	; 0x60
  BufferDesc.RTTBufferIndex = BufferIndex;
    1f42:	9b05      	ldr	r3, [sp, #20]
    1f44:	931a      	str	r3, [sp, #104]	; 0x68
  BufferDesc.ReturnValue    = 0;
    1f46:	2300      	movs	r3, #0
    1f48:	9319      	str	r3, [sp, #100]	; 0x64

  do {
    c = *sFormat;
    1f4a:	9b04      	ldr	r3, [sp, #16]
    1f4c:	781b      	ldrb	r3, [r3, #0]
    1f4e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    sFormat++;
    1f52:	9b04      	ldr	r3, [sp, #16]
    1f54:	3301      	adds	r3, #1
    1f56:	9304      	str	r3, [sp, #16]
    if (c == 0u) {
    1f58:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1f5c:	2b00      	cmp	r3, #0
    1f5e:	f000 819c 	beq.w	229a <SEGGER_RTT_vprintf+0x36e>
      break;
    }
    if (c == '%') {
    1f62:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1f66:	2b25      	cmp	r3, #37	; 0x25
    1f68:	f040 818b 	bne.w	2282 <SEGGER_RTT_vprintf+0x356>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
    1f6c:	2300      	movs	r3, #0
    1f6e:	931e      	str	r3, [sp, #120]	; 0x78
      v = 1;
    1f70:	2301      	movs	r3, #1
    1f72:	9320      	str	r3, [sp, #128]	; 0x80
      do {
        c = *sFormat;
    1f74:	9b04      	ldr	r3, [sp, #16]
    1f76:	781b      	ldrb	r3, [r3, #0]
    1f78:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        switch (c) {
    1f7c:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1f80:	3b23      	subs	r3, #35	; 0x23
    1f82:	2b0d      	cmp	r3, #13
    1f84:	d83e      	bhi.n	2004 <SEGGER_RTT_vprintf+0xd8>
    1f86:	a201      	add	r2, pc, #4	; (adr r2, 1f8c <SEGGER_RTT_vprintf+0x60>)
    1f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1f8c:	00001ff5 	.word	0x00001ff5
    1f90:	00002005 	.word	0x00002005
    1f94:	00002005 	.word	0x00002005
    1f98:	00002005 	.word	0x00002005
    1f9c:	00002005 	.word	0x00002005
    1fa0:	00002005 	.word	0x00002005
    1fa4:	00002005 	.word	0x00002005
    1fa8:	00002005 	.word	0x00002005
    1fac:	00001fe5 	.word	0x00001fe5
    1fb0:	00002005 	.word	0x00002005
    1fb4:	00001fc5 	.word	0x00001fc5
    1fb8:	00002005 	.word	0x00002005
    1fbc:	00002005 	.word	0x00002005
    1fc0:	00001fd5 	.word	0x00001fd5
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    1fc4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1fc6:	f043 0301 	orr.w	r3, r3, #1
    1fca:	931e      	str	r3, [sp, #120]	; 0x78
    1fcc:	9b04      	ldr	r3, [sp, #16]
    1fce:	3301      	adds	r3, #1
    1fd0:	9304      	str	r3, [sp, #16]
    1fd2:	e01a      	b.n	200a <SEGGER_RTT_vprintf+0xde>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    1fd4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1fd6:	f043 0302 	orr.w	r3, r3, #2
    1fda:	931e      	str	r3, [sp, #120]	; 0x78
    1fdc:	9b04      	ldr	r3, [sp, #16]
    1fde:	3301      	adds	r3, #1
    1fe0:	9304      	str	r3, [sp, #16]
    1fe2:	e012      	b.n	200a <SEGGER_RTT_vprintf+0xde>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    1fe4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1fe6:	f043 0304 	orr.w	r3, r3, #4
    1fea:	931e      	str	r3, [sp, #120]	; 0x78
    1fec:	9b04      	ldr	r3, [sp, #16]
    1fee:	3301      	adds	r3, #1
    1ff0:	9304      	str	r3, [sp, #16]
    1ff2:	e00a      	b.n	200a <SEGGER_RTT_vprintf+0xde>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    1ff4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1ff6:	f043 0308 	orr.w	r3, r3, #8
    1ffa:	931e      	str	r3, [sp, #120]	; 0x78
    1ffc:	9b04      	ldr	r3, [sp, #16]
    1ffe:	3301      	adds	r3, #1
    2000:	9304      	str	r3, [sp, #16]
    2002:	e002      	b.n	200a <SEGGER_RTT_vprintf+0xde>
        default:  v = 0; break;
    2004:	2300      	movs	r3, #0
    2006:	9320      	str	r3, [sp, #128]	; 0x80
    2008:	bf00      	nop
        }
      } while (v);
    200a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    200c:	2b00      	cmp	r3, #0
    200e:	d1b1      	bne.n	1f74 <SEGGER_RTT_vprintf+0x48>
      //
      // filter out field with
      //
      FieldWidth = 0u;
    2010:	2300      	movs	r3, #0
    2012:	931d      	str	r3, [sp, #116]	; 0x74
      do {
        c = *sFormat;
    2014:	9b04      	ldr	r3, [sp, #16]
    2016:	781b      	ldrb	r3, [r3, #0]
    2018:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c < '0') || (c > '9')) {
    201c:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    2020:	2b2f      	cmp	r3, #47	; 0x2f
    2022:	d912      	bls.n	204a <SEGGER_RTT_vprintf+0x11e>
    2024:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    2028:	2b39      	cmp	r3, #57	; 0x39
    202a:	d80e      	bhi.n	204a <SEGGER_RTT_vprintf+0x11e>
          break;
        }
        sFormat++;
    202c:	9b04      	ldr	r3, [sp, #16]
    202e:	3301      	adds	r3, #1
    2030:	9304      	str	r3, [sp, #16]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    2032:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    2034:	4613      	mov	r3, r2
    2036:	009b      	lsls	r3, r3, #2
    2038:	4413      	add	r3, r2
    203a:	005b      	lsls	r3, r3, #1
    203c:	461a      	mov	r2, r3
    203e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    2042:	4413      	add	r3, r2
    2044:	3b30      	subs	r3, #48	; 0x30
    2046:	931d      	str	r3, [sp, #116]	; 0x74
        c = *sFormat;
    2048:	e7e4      	b.n	2014 <SEGGER_RTT_vprintf+0xe8>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
    204a:	2300      	movs	r3, #0
    204c:	931f      	str	r3, [sp, #124]	; 0x7c
      c = *sFormat;
    204e:	9b04      	ldr	r3, [sp, #16]
    2050:	781b      	ldrb	r3, [r3, #0]
    2052:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      if (c == '.') {
    2056:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    205a:	2b2e      	cmp	r3, #46	; 0x2e
    205c:	d11d      	bne.n	209a <SEGGER_RTT_vprintf+0x16e>
        sFormat++;
    205e:	9b04      	ldr	r3, [sp, #16]
    2060:	3301      	adds	r3, #1
    2062:	9304      	str	r3, [sp, #16]
        do {
          c = *sFormat;
    2064:	9b04      	ldr	r3, [sp, #16]
    2066:	781b      	ldrb	r3, [r3, #0]
    2068:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
          if ((c < '0') || (c > '9')) {
    206c:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    2070:	2b2f      	cmp	r3, #47	; 0x2f
    2072:	d912      	bls.n	209a <SEGGER_RTT_vprintf+0x16e>
    2074:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    2078:	2b39      	cmp	r3, #57	; 0x39
    207a:	d80e      	bhi.n	209a <SEGGER_RTT_vprintf+0x16e>
            break;
          }
          sFormat++;
    207c:	9b04      	ldr	r3, [sp, #16]
    207e:	3301      	adds	r3, #1
    2080:	9304      	str	r3, [sp, #16]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
    2082:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    2084:	4613      	mov	r3, r2
    2086:	009b      	lsls	r3, r3, #2
    2088:	4413      	add	r3, r2
    208a:	005b      	lsls	r3, r3, #1
    208c:	461a      	mov	r2, r3
    208e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    2092:	4413      	add	r3, r2
    2094:	3b30      	subs	r3, #48	; 0x30
    2096:	931f      	str	r3, [sp, #124]	; 0x7c
          c = *sFormat;
    2098:	e7e4      	b.n	2064 <SEGGER_RTT_vprintf+0x138>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
    209a:	9b04      	ldr	r3, [sp, #16]
    209c:	781b      	ldrb	r3, [r3, #0]
    209e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
    20a2:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    20a6:	2b6c      	cmp	r3, #108	; 0x6c
    20a8:	d003      	beq.n	20b2 <SEGGER_RTT_vprintf+0x186>
    20aa:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    20ae:	2b68      	cmp	r3, #104	; 0x68
    20b0:	d107      	bne.n	20c2 <SEGGER_RTT_vprintf+0x196>
          sFormat++;
    20b2:	9b04      	ldr	r3, [sp, #16]
    20b4:	3301      	adds	r3, #1
    20b6:	9304      	str	r3, [sp, #16]
          c = *sFormat;
    20b8:	9b04      	ldr	r3, [sp, #16]
    20ba:	781b      	ldrb	r3, [r3, #0]
    20bc:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c == 'l') || (c == 'h')) {
    20c0:	e7ef      	b.n	20a2 <SEGGER_RTT_vprintf+0x176>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    20c2:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    20c6:	2b25      	cmp	r3, #37	; 0x25
    20c8:	f000 80d0 	beq.w	226c <SEGGER_RTT_vprintf+0x340>
    20cc:	2b25      	cmp	r3, #37	; 0x25
    20ce:	f2c0 80d3 	blt.w	2278 <SEGGER_RTT_vprintf+0x34c>
    20d2:	2b78      	cmp	r3, #120	; 0x78
    20d4:	f300 80d0 	bgt.w	2278 <SEGGER_RTT_vprintf+0x34c>
    20d8:	2b58      	cmp	r3, #88	; 0x58
    20da:	f2c0 80cd 	blt.w	2278 <SEGGER_RTT_vprintf+0x34c>
    20de:	3b58      	subs	r3, #88	; 0x58
    20e0:	2b20      	cmp	r3, #32
    20e2:	f200 80c9 	bhi.w	2278 <SEGGER_RTT_vprintf+0x34c>
    20e6:	a201      	add	r2, pc, #4	; (adr r2, 20ec <SEGGER_RTT_vprintf+0x1c0>)
    20e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    20ec:	000021dd 	.word	0x000021dd
    20f0:	00002279 	.word	0x00002279
    20f4:	00002279 	.word	0x00002279
    20f8:	00002279 	.word	0x00002279
    20fc:	00002279 	.word	0x00002279
    2100:	00002279 	.word	0x00002279
    2104:	00002279 	.word	0x00002279
    2108:	00002279 	.word	0x00002279
    210c:	00002279 	.word	0x00002279
    2110:	00002279 	.word	0x00002279
    2114:	00002279 	.word	0x00002279
    2118:	00002171 	.word	0x00002171
    211c:	00002195 	.word	0x00002195
    2120:	00002279 	.word	0x00002279
    2124:	00002279 	.word	0x00002279
    2128:	00002279 	.word	0x00002279
    212c:	00002279 	.word	0x00002279
    2130:	00002279 	.word	0x00002279
    2134:	00002279 	.word	0x00002279
    2138:	00002279 	.word	0x00002279
    213c:	00002279 	.word	0x00002279
    2140:	00002279 	.word	0x00002279
    2144:	00002279 	.word	0x00002279
    2148:	00002279 	.word	0x00002279
    214c:	00002249 	.word	0x00002249
    2150:	00002279 	.word	0x00002279
    2154:	00002279 	.word	0x00002279
    2158:	00002201 	.word	0x00002201
    215c:	00002279 	.word	0x00002279
    2160:	000021b9 	.word	0x000021b9
    2164:	00002279 	.word	0x00002279
    2168:	00002279 	.word	0x00002279
    216c:	000021dd 	.word	0x000021dd
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
    2170:	9b03      	ldr	r3, [sp, #12]
    2172:	681b      	ldr	r3, [r3, #0]
    2174:	1d19      	adds	r1, r3, #4
    2176:	9a03      	ldr	r2, [sp, #12]
    2178:	6011      	str	r1, [r2, #0]
    217a:	681b      	ldr	r3, [r3, #0]
    217c:	9320      	str	r3, [sp, #128]	; 0x80
        c0 = (char)v;
    217e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    2180:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
        _StoreChar(&BufferDesc, c0);
    2184:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    2188:	ab16      	add	r3, sp, #88	; 0x58
    218a:	4611      	mov	r1, r2
    218c:	4618      	mov	r0, r3
    218e:	f7ff fd3a 	bl	1c06 <_StoreChar>
        break;
    2192:	e072      	b.n	227a <SEGGER_RTT_vprintf+0x34e>
      }
      case 'd':
        v = va_arg(*pParamList, int);
    2194:	9b03      	ldr	r3, [sp, #12]
    2196:	681b      	ldr	r3, [r3, #0]
    2198:	1d19      	adds	r1, r3, #4
    219a:	9a03      	ldr	r2, [sp, #12]
    219c:	6011      	str	r1, [r2, #0]
    219e:	681b      	ldr	r3, [r3, #0]
    21a0:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
    21a2:	a816      	add	r0, sp, #88	; 0x58
    21a4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    21a6:	9301      	str	r3, [sp, #4]
    21a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    21aa:	9300      	str	r3, [sp, #0]
    21ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    21ae:	220a      	movs	r2, #10
    21b0:	9920      	ldr	r1, [sp, #128]	; 0x80
    21b2:	f7ff fe15 	bl	1de0 <_PrintInt>
        break;
    21b6:	e060      	b.n	227a <SEGGER_RTT_vprintf+0x34e>
      case 'u':
        v = va_arg(*pParamList, int);
    21b8:	9b03      	ldr	r3, [sp, #12]
    21ba:	681b      	ldr	r3, [r3, #0]
    21bc:	1d19      	adds	r1, r3, #4
    21be:	9a03      	ldr	r2, [sp, #12]
    21c0:	6011      	str	r1, [r2, #0]
    21c2:	681b      	ldr	r3, [r3, #0]
    21c4:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
    21c6:	9920      	ldr	r1, [sp, #128]	; 0x80
    21c8:	a816      	add	r0, sp, #88	; 0x58
    21ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    21cc:	9301      	str	r3, [sp, #4]
    21ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    21d0:	9300      	str	r3, [sp, #0]
    21d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    21d4:	220a      	movs	r2, #10
    21d6:	f7ff fd55 	bl	1c84 <_PrintUnsigned>
        break;
    21da:	e04e      	b.n	227a <SEGGER_RTT_vprintf+0x34e>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
    21dc:	9b03      	ldr	r3, [sp, #12]
    21de:	681b      	ldr	r3, [r3, #0]
    21e0:	1d19      	adds	r1, r3, #4
    21e2:	9a03      	ldr	r2, [sp, #12]
    21e4:	6011      	str	r1, [r2, #0]
    21e6:	681b      	ldr	r3, [r3, #0]
    21e8:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
    21ea:	9920      	ldr	r1, [sp, #128]	; 0x80
    21ec:	a816      	add	r0, sp, #88	; 0x58
    21ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    21f0:	9301      	str	r3, [sp, #4]
    21f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    21f4:	9300      	str	r3, [sp, #0]
    21f6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    21f8:	2210      	movs	r2, #16
    21fa:	f7ff fd43 	bl	1c84 <_PrintUnsigned>
        break;
    21fe:	e03c      	b.n	227a <SEGGER_RTT_vprintf+0x34e>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
    2200:	9b03      	ldr	r3, [sp, #12]
    2202:	681b      	ldr	r3, [r3, #0]
    2204:	1d19      	adds	r1, r3, #4
    2206:	9a03      	ldr	r2, [sp, #12]
    2208:	6011      	str	r1, [r2, #0]
    220a:	681b      	ldr	r3, [r3, #0]
    220c:	931c      	str	r3, [sp, #112]	; 0x70
          if (s == NULL) {
    220e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    2210:	2b00      	cmp	r3, #0
    2212:	d101      	bne.n	2218 <SEGGER_RTT_vprintf+0x2ec>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
    2214:	4b2c      	ldr	r3, [pc, #176]	; (22c8 <SEGGER_RTT_vprintf+0x39c>)
    2216:	931c      	str	r3, [sp, #112]	; 0x70
          }
          do {
            c = *s;
    2218:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    221a:	781b      	ldrb	r3, [r3, #0]
    221c:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
            s++;
    2220:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    2222:	3301      	adds	r3, #1
    2224:	931c      	str	r3, [sp, #112]	; 0x70
            if (c == '\0') {
    2226:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    222a:	2b00      	cmp	r3, #0
    222c:	d00a      	beq.n	2244 <SEGGER_RTT_vprintf+0x318>
              break;
            }
           _StoreChar(&BufferDesc, c);
    222e:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    2232:	ab16      	add	r3, sp, #88	; 0x58
    2234:	4611      	mov	r1, r2
    2236:	4618      	mov	r0, r3
    2238:	f7ff fce5 	bl	1c06 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
    223c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    223e:	2b00      	cmp	r3, #0
    2240:	daea      	bge.n	2218 <SEGGER_RTT_vprintf+0x2ec>
        }
        break;
    2242:	e01a      	b.n	227a <SEGGER_RTT_vprintf+0x34e>
              break;
    2244:	bf00      	nop
        break;
    2246:	e018      	b.n	227a <SEGGER_RTT_vprintf+0x34e>
      case 'p':
        v = va_arg(*pParamList, int);
    2248:	9b03      	ldr	r3, [sp, #12]
    224a:	681b      	ldr	r3, [r3, #0]
    224c:	1d19      	adds	r1, r3, #4
    224e:	9a03      	ldr	r2, [sp, #12]
    2250:	6011      	str	r1, [r2, #0]
    2252:	681b      	ldr	r3, [r3, #0]
    2254:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    2256:	9920      	ldr	r1, [sp, #128]	; 0x80
    2258:	a816      	add	r0, sp, #88	; 0x58
    225a:	2300      	movs	r3, #0
    225c:	9301      	str	r3, [sp, #4]
    225e:	2308      	movs	r3, #8
    2260:	9300      	str	r3, [sp, #0]
    2262:	2308      	movs	r3, #8
    2264:	2210      	movs	r2, #16
    2266:	f7ff fd0d 	bl	1c84 <_PrintUnsigned>
        break;
    226a:	e006      	b.n	227a <SEGGER_RTT_vprintf+0x34e>
      case '%':
        _StoreChar(&BufferDesc, '%');
    226c:	ab16      	add	r3, sp, #88	; 0x58
    226e:	2125      	movs	r1, #37	; 0x25
    2270:	4618      	mov	r0, r3
    2272:	f7ff fcc8 	bl	1c06 <_StoreChar>
        break;
    2276:	e000      	b.n	227a <SEGGER_RTT_vprintf+0x34e>
      default:
        break;
    2278:	bf00      	nop
      }
      sFormat++;
    227a:	9b04      	ldr	r3, [sp, #16]
    227c:	3301      	adds	r3, #1
    227e:	9304      	str	r3, [sp, #16]
    2280:	e006      	b.n	2290 <SEGGER_RTT_vprintf+0x364>
    } else {
      _StoreChar(&BufferDesc, c);
    2282:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    2286:	ab16      	add	r3, sp, #88	; 0x58
    2288:	4611      	mov	r1, r2
    228a:	4618      	mov	r0, r3
    228c:	f7ff fcbb 	bl	1c06 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
    2290:	9b19      	ldr	r3, [sp, #100]	; 0x64
    2292:	2b00      	cmp	r3, #0
    2294:	f6bf ae59 	bge.w	1f4a <SEGGER_RTT_vprintf+0x1e>
    2298:	e000      	b.n	229c <SEGGER_RTT_vprintf+0x370>
      break;
    229a:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
    229c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    229e:	2b00      	cmp	r3, #0
    22a0:	dd0c      	ble.n	22bc <SEGGER_RTT_vprintf+0x390>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
    22a2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    22a4:	2b00      	cmp	r3, #0
    22a6:	d005      	beq.n	22b4 <SEGGER_RTT_vprintf+0x388>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    22a8:	9a18      	ldr	r2, [sp, #96]	; 0x60
    22aa:	ab06      	add	r3, sp, #24
    22ac:	4619      	mov	r1, r3
    22ae:	9805      	ldr	r0, [sp, #20]
    22b0:	f7ff fc7e 	bl	1bb0 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
    22b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    22b6:	9a18      	ldr	r2, [sp, #96]	; 0x60
    22b8:	4413      	add	r3, r2
    22ba:	9319      	str	r3, [sp, #100]	; 0x64
  }
  return BufferDesc.ReturnValue;
    22bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
    22be:	4618      	mov	r0, r3
    22c0:	b023      	add	sp, #140	; 0x8c
    22c2:	f85d fb04 	ldr.w	pc, [sp], #4
    22c6:	bf00      	nop
    22c8:	00019894 	.word	0x00019894

000022cc <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
    22cc:	b40e      	push	{r1, r2, r3}
    22ce:	b500      	push	{lr}
    22d0:	b084      	sub	sp, #16
    22d2:	9001      	str	r0, [sp, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
    22d4:	ab06      	add	r3, sp, #24
    22d6:	9302      	str	r3, [sp, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
    22d8:	ab02      	add	r3, sp, #8
    22da:	461a      	mov	r2, r3
    22dc:	9905      	ldr	r1, [sp, #20]
    22de:	9801      	ldr	r0, [sp, #4]
    22e0:	f7ff fe24 	bl	1f2c <SEGGER_RTT_vprintf>
    22e4:	9003      	str	r0, [sp, #12]
  va_end(ParamList);
  return r;
    22e6:	9b03      	ldr	r3, [sp, #12]
}
    22e8:	4618      	mov	r0, r3
    22ea:	b004      	add	sp, #16
    22ec:	f85d eb04 	ldr.w	lr, [sp], #4
    22f0:	b003      	add	sp, #12
    22f2:	4770      	bx	lr

000022f4 <MCU_clocks>:
 *  -SIRCDIV1_CLK -->8 Mhz
 *  -SIRCDIV2_CLK -->8 Mhz
 *  -SOSCDIV1_CLK  -->Disabled
 *  -SOSCDIV2_CLK  -->Disabled
 */
void MCU_clocks( void ) {
    22f4:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );//Initializing MCU driver
    22f6:	4805      	ldr	r0, [pc, #20]	; (230c <MCU_clocks+0x18>)
    22f8:	f004 fa18 	bl	672c <Mcu_Init>
    Mcu_SetMode( Run_mode );//MCU on run mode.
    22fc:	2000      	movs	r0, #0
    22fe:	f004 fac9 	bl	6894 <Mcu_SetMode>
    Mcu_InitClock( Clocks_conf_0 );//Executing clock configurations established in container.
    2302:	2000      	movs	r0, #0
    2304:	f004 fa90 	bl	6828 <Mcu_InitClock>

    //Configuring Pll clock.
    /*while ( Mcu_GetPllStatus() != MCU_PLL_LOCKED );//Waiting until PLL is locked.
    Mcu_DistributePllClock();//Executing pll clock configuration established in container.*/
}
    2308:	bf00      	nop
    230a:	bd08      	pop	{r3, pc}
    230c:	0001a9bc 	.word	0x0001a9bc

00002310 <EcuM_Init>:
 * @brief This function initialices the microcontroller and the peripherals
 * 
 * 
 */
void EcuM_Init( void )
{   
    2310:	b508      	push	{r3, lr}
    MCU_clocks();
    2312:	f7ff ffef 	bl	22f4 <MCU_clocks>
    OsIf_Init( NULL_PTR );  //Init Osif timer.
    2316:	2000      	movs	r0, #0
    2318:	f000 fbb1 	bl	2a7e <OsIf_Init>
    Platform_Init( NULL_PTR );  //Init platform driver and configuration.
    231c:	2000      	movs	r0, #0
    231e:	f000 fa51 	bl	27c4 <Platform_Init>
    Port_Init( &Port_Config );  //Init port driver and configuration.
    2322:	480a      	ldr	r0, [pc, #40]	; (234c <EcuM_Init+0x3c>)
    2324:	f004 fe9a 	bl	705c <Port_Init>
    Adc_Init( &Adc_Config );    //Init Adc driver and configuration.
    2328:	4809      	ldr	r0, [pc, #36]	; (2350 <EcuM_Init+0x40>)
    232a:	f007 fd29 	bl	9d80 <Adc_Init>
    Pwm_Init( &Pwm_Config );    //Init Pwm driver and configuration.
    232e:	4809      	ldr	r0, [pc, #36]	; (2354 <EcuM_Init+0x44>)
    2330:	f00e fce6 	bl	10d00 <Pwm_Init>
    
    //Configuring interleave for PTB1 and PTB13.
    Port_Ci_Port_Ip_SetMuxModeSel( IP_PORTB, 1, PORT_MUX_ADC_INTERLEAVE );
    2334:	2208      	movs	r2, #8
    2336:	2101      	movs	r1, #1
    2338:	4807      	ldr	r0, [pc, #28]	; (2358 <EcuM_Init+0x48>)
    233a:	f005 f91b 	bl	7574 <Port_Ci_Port_Ip_SetMuxModeSel>
    Port_Ci_Port_Ip_SetMuxModeSel( IP_PORTB, 13, PORT_MUX_ADC_INTERLEAVE );
    233e:	2208      	movs	r2, #8
    2340:	210d      	movs	r1, #13
    2342:	4805      	ldr	r0, [pc, #20]	; (2358 <EcuM_Init+0x48>)
    2344:	f005 f916 	bl	7574 <Port_Ci_Port_Ip_SetMuxModeSel>
}
    2348:	bf00      	nop
    234a:	bd08      	pop	{r3, pc}
    234c:	0001ae74 	.word	0x0001ae74
    2350:	0001a248 	.word	0x0001a248
    2354:	0001aee4 	.word	0x0001aee4
    2358:	4004a000 	.word	0x4004a000

0000235c <memcpy>:
    235c:	440a      	add	r2, r1
    235e:	4291      	cmp	r1, r2
    2360:	f100 33ff 	add.w	r3, r0, #4294967295
    2364:	d100      	bne.n	2368 <memcpy+0xc>
    2366:	4770      	bx	lr
    2368:	b510      	push	{r4, lr}
    236a:	f811 4b01 	ldrb.w	r4, [r1], #1
    236e:	f803 4f01 	strb.w	r4, [r3, #1]!
    2372:	4291      	cmp	r1, r2
    2374:	d1f9      	bne.n	236a <memcpy+0xe>
    2376:	bd10      	pop	{r4, pc}

00002378 <memset>:
    2378:	4402      	add	r2, r0
    237a:	4603      	mov	r3, r0
    237c:	4293      	cmp	r3, r2
    237e:	d100      	bne.n	2382 <memset+0xa>
    2380:	4770      	bx	lr
    2382:	f803 1b01 	strb.w	r1, [r3], #1
    2386:	e7f9      	b.n	237c <memset+0x4>

00002388 <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    2388:	b500      	push	{lr}
    238a:	b087      	sub	sp, #28
    238c:	9003      	str	r0, [sp, #12]
    238e:	9102      	str	r1, [sp, #8]
    2390:	9201      	str	r2, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number - dev_irqNumber is used to avoid compiler warning */
    sint32 dev_irqNumber = (sint32)eIrqNumber;
    2392:	9b03      	ldr	r3, [sp, #12]
    2394:	9305      	str	r3, [sp, #20]
    DevAssert((sint32)INT_CTRL_IP_IRQ_MIN <= dev_irqNumber);
    2396:	9b05      	ldr	r3, [sp, #20]
    2398:	43db      	mvns	r3, r3
    239a:	0fdb      	lsrs	r3, r3, #31
    239c:	b2db      	uxtb	r3, r3
    239e:	4618      	mov	r0, r3
    23a0:	f7fe fa96 	bl	8d0 <DevAssert>
    DevAssert(dev_irqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    23a4:	9b05      	ldr	r3, [sp, #20]
    23a6:	2b7a      	cmp	r3, #122	; 0x7a
    23a8:	bfd4      	ite	le
    23aa:	2301      	movle	r3, #1
    23ac:	2300      	movgt	r3, #0
    23ae:	b2db      	uxtb	r3, r3
    23b0:	4618      	mov	r0, r3
    23b2:	f7fe fa8d 	bl	8d0 <DevAssert>
#if (MCAL_PLATFORM_ARM == MCAL_ARM_MARCH)
#if defined(S32K3XX) || defined(SAF85) || defined(S32R41)
    DevAssert(S32_SCB->VTOR >= (uint32)__RAM_INTERRUPT_START);
#else
    DevAssert(S32_SCB->VTOR >= (uint32)__INT_SRAM_START);
    23b6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    23ba:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    23be:	4a14      	ldr	r2, [pc, #80]	; (2410 <IntCtrl_Ip_InstallHandlerPrivileged+0x88>)
    23c0:	4293      	cmp	r3, r2
    23c2:	bf2c      	ite	cs
    23c4:	2301      	movcs	r3, #1
    23c6:	2300      	movcc	r3, #0
    23c8:	b2db      	uxtb	r3, r3
    23ca:	4618      	mov	r0, r3
    23cc:	f7fe fa80 	bl	8d0 <DevAssert>

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
    23d0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    23d4:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    23d8:	9304      	str	r3, [sp, #16]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
    23da:	9b01      	ldr	r3, [sp, #4]
    23dc:	2b00      	cmp	r3, #0
    23de:	d007      	beq.n	23f0 <IntCtrl_Ip_InstallHandlerPrivileged+0x68>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
    23e0:	9b03      	ldr	r3, [sp, #12]
    23e2:	3310      	adds	r3, #16
    23e4:	009b      	lsls	r3, r3, #2
    23e6:	9a04      	ldr	r2, [sp, #16]
    23e8:	4413      	add	r3, r2
    23ea:	681a      	ldr	r2, [r3, #0]
    23ec:	9b01      	ldr	r3, [sp, #4]
    23ee:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
    23f0:	9b03      	ldr	r3, [sp, #12]
    23f2:	3310      	adds	r3, #16
    23f4:	009b      	lsls	r3, r3, #2
    23f6:	9a04      	ldr	r2, [sp, #16]
    23f8:	4413      	add	r3, r2
    23fa:	9a02      	ldr	r2, [sp, #8]
    23fc:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
    23fe:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
    2402:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
    2406:	bf00      	nop
    2408:	b007      	add	sp, #28
    240a:	f85d fb04 	ldr.w	pc, [sp], #4
    240e:	bf00      	nop
    2410:	1fff8000 	.word	0x1fff8000

00002414 <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
    2414:	b500      	push	{lr}
    2416:	b083      	sub	sp, #12
    2418:	9001      	str	r0, [sp, #4]

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number - dev_irqNumber is used to avoid compiler warning */
    DevAssert(0 <= (sint32)eIrqNumber);
    241a:	9b01      	ldr	r3, [sp, #4]
    241c:	43db      	mvns	r3, r3
    241e:	0fdb      	lsrs	r3, r3, #31
    2420:	b2db      	uxtb	r3, r3
    2422:	4618      	mov	r0, r3
    2424:	f7fe fa54 	bl	8d0 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    2428:	9b01      	ldr	r3, [sp, #4]
    242a:	2b7a      	cmp	r3, #122	; 0x7a
    242c:	bfd4      	ite	le
    242e:	2301      	movle	r3, #1
    2430:	2300      	movgt	r3, #0
    2432:	b2db      	uxtb	r3, r3
    2434:	4618      	mov	r0, r3
    2436:	f7fe fa4b 	bl	8d0 <DevAssert>
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    243a:	9b01      	ldr	r3, [sp, #4]
    243c:	f003 021f 	and.w	r2, r3, #31
    2440:	4905      	ldr	r1, [pc, #20]	; (2458 <IntCtrl_Ip_EnableIrqPrivileged+0x44>)
    2442:	9b01      	ldr	r3, [sp, #4]
    2444:	095b      	lsrs	r3, r3, #5
    2446:	2001      	movs	r0, #1
    2448:	fa00 f202 	lsl.w	r2, r0, r2
    244c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    2450:	bf00      	nop
    2452:	b003      	add	sp, #12
    2454:	f85d fb04 	ldr.w	pc, [sp], #4
    2458:	e000e100 	.word	0xe000e100

0000245c <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
    245c:	b500      	push	{lr}
    245e:	b083      	sub	sp, #12
    2460:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number - dev_irqNumber is used to avoid compiler warning */
    DevAssert(0 <= (sint32)eIrqNumber);
    2462:	9b01      	ldr	r3, [sp, #4]
    2464:	43db      	mvns	r3, r3
    2466:	0fdb      	lsrs	r3, r3, #31
    2468:	b2db      	uxtb	r3, r3
    246a:	4618      	mov	r0, r3
    246c:	f7fe fa30 	bl	8d0 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    2470:	9b01      	ldr	r3, [sp, #4]
    2472:	2b7a      	cmp	r3, #122	; 0x7a
    2474:	bfd4      	ite	le
    2476:	2301      	movle	r3, #1
    2478:	2300      	movgt	r3, #0
    247a:	b2db      	uxtb	r3, r3
    247c:	4618      	mov	r0, r3
    247e:	f7fe fa27 	bl	8d0 <DevAssert>
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    2482:	9b01      	ldr	r3, [sp, #4]
    2484:	f003 021f 	and.w	r2, r3, #31
    2488:	4906      	ldr	r1, [pc, #24]	; (24a4 <IntCtrl_Ip_DisableIrqPrivileged+0x48>)
    248a:	9b01      	ldr	r3, [sp, #4]
    248c:	095b      	lsrs	r3, r3, #5
    248e:	2001      	movs	r0, #1
    2490:	fa00 f202 	lsl.w	r2, r0, r2
    2494:	3320      	adds	r3, #32
    2496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    249a:	bf00      	nop
    249c:	b003      	add	sp, #12
    249e:	f85d fb04 	ldr.w	pc, [sp], #4
    24a2:	bf00      	nop
    24a4:	e000e100 	.word	0xe000e100

000024a8 <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    24a8:	b500      	push	{lr}
    24aa:	b085      	sub	sp, #20
    24ac:	9001      	str	r0, [sp, #4]
    24ae:	460b      	mov	r3, r1
    24b0:	f88d 3003 	strb.w	r3, [sp, #3]

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)

    /* Check IRQ number and priority - dev_irqNumber is used to avoid compiler warning */
    DevAssert((sint32)INT_CTRL_IP_IRQ_MIN <= (sint32)eIrqNumber);
    24b4:	9b01      	ldr	r3, [sp, #4]
    24b6:	43db      	mvns	r3, r3
    24b8:	0fdb      	lsrs	r3, r3, #31
    24ba:	b2db      	uxtb	r3, r3
    24bc:	4618      	mov	r0, r3
    24be:	f7fe fa07 	bl	8d0 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    24c2:	9b01      	ldr	r3, [sp, #4]
    24c4:	2b7a      	cmp	r3, #122	; 0x7a
    24c6:	bfd4      	ite	le
    24c8:	2301      	movle	r3, #1
    24ca:	2300      	movgt	r3, #0
    24cc:	b2db      	uxtb	r3, r3
    24ce:	4618      	mov	r0, r3
    24d0:	f7fe f9fe 	bl	8d0 <DevAssert>
#if (INT_CTRL_IP_CORTEXM == STD_ON)
    DevAssert(u8Priority < (uint8)(1U << INT_CTRL_IP_NVIC_PRIO_BITS));
    24d4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    24d8:	2b0f      	cmp	r3, #15
    24da:	bf94      	ite	ls
    24dc:	2301      	movls	r3, #1
    24de:	2300      	movhi	r3, #0
    24e0:	b2db      	uxtb	r3, r3
    24e2:	4618      	mov	r0, r3
    24e4:	f7fe f9f4 	bl	8d0 <DevAssert>
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    24e8:	2304      	movs	r3, #4
    24ea:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
    24ee:	f89d 2003 	ldrb.w	r2, [sp, #3]
    24f2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    24f6:	fa02 f103 	lsl.w	r1, r2, r3
    24fa:	4a05      	ldr	r2, [pc, #20]	; (2510 <IntCtrl_Ip_SetPriorityPrivileged+0x68>)
    24fc:	9b01      	ldr	r3, [sp, #4]
    24fe:	b2c9      	uxtb	r1, r1
    2500:	4413      	add	r3, r2
    2502:	460a      	mov	r2, r1
    2504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
    2508:	bf00      	nop
    250a:	b005      	add	sp, #20
    250c:	f85d fb04 	ldr.w	pc, [sp], #4
    2510:	e000e100 	.word	0xe000e100

00002514 <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
    2514:	b500      	push	{lr}
    2516:	b085      	sub	sp, #20
    2518:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)

    /* Check IRQ number */
    DevAssert(INT_CTRL_IP_IRQ_MIN <= eIrqNumber);
    251a:	9b01      	ldr	r3, [sp, #4]
    251c:	43db      	mvns	r3, r3
    251e:	0fdb      	lsrs	r3, r3, #31
    2520:	b2db      	uxtb	r3, r3
    2522:	4618      	mov	r0, r3
    2524:	f7fe f9d4 	bl	8d0 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    2528:	9b01      	ldr	r3, [sp, #4]
    252a:	2b7a      	cmp	r3, #122	; 0x7a
    252c:	bfd4      	ite	le
    252e:	2301      	movle	r3, #1
    2530:	2300      	movgt	r3, #0
    2532:	b2db      	uxtb	r3, r3
    2534:	4618      	mov	r0, r3
    2536:	f7fe f9cb 	bl	8d0 <DevAssert>

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    253a:	2304      	movs	r3, #4
    253c:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
    2540:	4a09      	ldr	r2, [pc, #36]	; (2568 <IntCtrl_Ip_GetPriorityPrivileged+0x54>)
    2542:	9b01      	ldr	r3, [sp, #4]
    2544:	4413      	add	r3, r2
    2546:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
    254a:	b2db      	uxtb	r3, r3
    254c:	461a      	mov	r2, r3
    254e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2552:	fa42 f303 	asr.w	r3, r2, r3
    2556:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
    255a:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    255e:	4618      	mov	r0, r3
    2560:	b005      	add	sp, #20
    2562:	f85d fb04 	ldr.w	pc, [sp], #4
    2566:	bf00      	nop
    2568:	e000e100 	.word	0xe000e100

0000256c <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
    256c:	b500      	push	{lr}
    256e:	b083      	sub	sp, #12
    2570:	9001      	str	r0, [sp, #4]

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    /* Check IRQ number */
    DevAssert(0 <= (sint32)eIrqNumber);
    2572:	9b01      	ldr	r3, [sp, #4]
    2574:	43db      	mvns	r3, r3
    2576:	0fdb      	lsrs	r3, r3, #31
    2578:	b2db      	uxtb	r3, r3
    257a:	4618      	mov	r0, r3
    257c:	f7fe f9a8 	bl	8d0 <DevAssert>
    DevAssert((sint32)eIrqNumber <= (sint32)INT_CTRL_IP_IRQ_MAX);
    2580:	9b01      	ldr	r3, [sp, #4]
    2582:	2b7a      	cmp	r3, #122	; 0x7a
    2584:	bfd4      	ite	le
    2586:	2301      	movle	r3, #1
    2588:	2300      	movgt	r3, #0
    258a:	b2db      	uxtb	r3, r3
    258c:	4618      	mov	r0, r3
    258e:	f7fe f99f 	bl	8d0 <DevAssert>
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    2592:	9b01      	ldr	r3, [sp, #4]
    2594:	f003 021f 	and.w	r2, r3, #31
    2598:	4906      	ldr	r1, [pc, #24]	; (25b4 <IntCtrl_Ip_ClearPendingPrivileged+0x48>)
    259a:	9b01      	ldr	r3, [sp, #4]
    259c:	095b      	lsrs	r3, r3, #5
    259e:	2001      	movs	r0, #1
    25a0:	fa00 f202 	lsl.w	r2, r0, r2
    25a4:	3360      	adds	r3, #96	; 0x60
    25a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
    25aa:	bf00      	nop
    25ac:	b003      	add	sp, #12
    25ae:	f85d fb04 	ldr.w	pc, [sp], #4
    25b2:	bf00      	nop
    25b4:	e000e100 	.word	0xe000e100

000025b8 <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    25b8:	b500      	push	{lr}
    25ba:	b085      	sub	sp, #20
    25bc:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_ENABLE_VTOR_CONFIG == STD_ON)
    S32_SCB->VTOR = pIntCtrlCtrlConfig->u32VectorTableAddress;
#endif

#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    25be:	9b01      	ldr	r3, [sp, #4]
    25c0:	2b00      	cmp	r3, #0
    25c2:	bf14      	ite	ne
    25c4:	2301      	movne	r3, #1
    25c6:	2300      	moveq	r3, #0
    25c8:	b2db      	uxtb	r3, r3
    25ca:	4618      	mov	r0, r3
    25cc:	f7fe f980 	bl	8d0 <DevAssert>
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
    25d0:	9b01      	ldr	r3, [sp, #4]
    25d2:	681b      	ldr	r3, [r3, #0]
    25d4:	2b59      	cmp	r3, #89	; 0x59
    25d6:	bf94      	ite	ls
    25d8:	2301      	movls	r3, #1
    25da:	2300      	movhi	r3, #0
    25dc:	b2db      	uxtb	r3, r3
    25de:	4618      	mov	r0, r3
    25e0:	f7fe f976 	bl	8d0 <DevAssert>
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    25e4:	2300      	movs	r3, #0
    25e6:	9303      	str	r3, [sp, #12]
    25e8:	e05d      	b.n	26a6 <IntCtrl_Ip_Init+0xee>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    25ea:	9b01      	ldr	r3, [sp, #4]
    25ec:	6859      	ldr	r1, [r3, #4]
    25ee:	9a03      	ldr	r2, [sp, #12]
    25f0:	4613      	mov	r3, r2
    25f2:	005b      	lsls	r3, r3, #1
    25f4:	4413      	add	r3, r2
    25f6:	009b      	lsls	r3, r3, #2
    25f8:	440b      	add	r3, r1
    25fa:	681b      	ldr	r3, [r3, #0]
    25fc:	4618      	mov	r0, r3
    25fe:	f000 f899 	bl	2734 <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    2602:	9b01      	ldr	r3, [sp, #4]
    2604:	6859      	ldr	r1, [r3, #4]
    2606:	9a03      	ldr	r2, [sp, #12]
    2608:	4613      	mov	r3, r2
    260a:	005b      	lsls	r3, r3, #1
    260c:	4413      	add	r3, r2
    260e:	009b      	lsls	r3, r3, #2
    2610:	440b      	add	r3, r1
    2612:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    2614:	9b01      	ldr	r3, [sp, #4]
    2616:	6859      	ldr	r1, [r3, #4]
    2618:	9a03      	ldr	r2, [sp, #12]
    261a:	4613      	mov	r3, r2
    261c:	005b      	lsls	r3, r3, #1
    261e:	4413      	add	r3, r2
    2620:	009b      	lsls	r3, r3, #2
    2622:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    2624:	795b      	ldrb	r3, [r3, #5]
    2626:	4619      	mov	r1, r3
    2628:	f000 f869 	bl	26fe <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    262c:	9b01      	ldr	r3, [sp, #4]
    262e:	6859      	ldr	r1, [r3, #4]
    2630:	9a03      	ldr	r2, [sp, #12]
    2632:	4613      	mov	r3, r2
    2634:	005b      	lsls	r3, r3, #1
    2636:	4413      	add	r3, r2
    2638:	009b      	lsls	r3, r3, #2
    263a:	440b      	add	r3, r1
    263c:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    263e:	9b01      	ldr	r3, [sp, #4]
    2640:	6859      	ldr	r1, [r3, #4]
    2642:	9a03      	ldr	r2, [sp, #12]
    2644:	4613      	mov	r3, r2
    2646:	005b      	lsls	r3, r3, #1
    2648:	4413      	add	r3, r2
    264a:	009b      	lsls	r3, r3, #2
    264c:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    264e:	689b      	ldr	r3, [r3, #8]
    2650:	2200      	movs	r2, #0
    2652:	4619      	mov	r1, r3
    2654:	f000 f831 	bl	26ba <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    2658:	9b01      	ldr	r3, [sp, #4]
    265a:	6859      	ldr	r1, [r3, #4]
    265c:	9a03      	ldr	r2, [sp, #12]
    265e:	4613      	mov	r3, r2
    2660:	005b      	lsls	r3, r3, #1
    2662:	4413      	add	r3, r2
    2664:	009b      	lsls	r3, r3, #2
    2666:	440b      	add	r3, r1
    2668:	791b      	ldrb	r3, [r3, #4]
    266a:	2b00      	cmp	r3, #0
    266c:	d00c      	beq.n	2688 <IntCtrl_Ip_Init+0xd0>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    266e:	9b01      	ldr	r3, [sp, #4]
    2670:	6859      	ldr	r1, [r3, #4]
    2672:	9a03      	ldr	r2, [sp, #12]
    2674:	4613      	mov	r3, r2
    2676:	005b      	lsls	r3, r3, #1
    2678:	4413      	add	r3, r2
    267a:	009b      	lsls	r3, r3, #2
    267c:	440b      	add	r3, r1
    267e:	681b      	ldr	r3, [r3, #0]
    2680:	4618      	mov	r0, r3
    2682:	f000 f828 	bl	26d6 <IntCtrl_Ip_EnableIrq>
    2686:	e00b      	b.n	26a0 <IntCtrl_Ip_Init+0xe8>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    2688:	9b01      	ldr	r3, [sp, #4]
    268a:	6859      	ldr	r1, [r3, #4]
    268c:	9a03      	ldr	r2, [sp, #12]
    268e:	4613      	mov	r3, r2
    2690:	005b      	lsls	r3, r3, #1
    2692:	4413      	add	r3, r2
    2694:	009b      	lsls	r3, r3, #2
    2696:	440b      	add	r3, r1
    2698:	681b      	ldr	r3, [r3, #0]
    269a:	4618      	mov	r0, r3
    269c:	f000 f825 	bl	26ea <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    26a0:	9b03      	ldr	r3, [sp, #12]
    26a2:	3301      	adds	r3, #1
    26a4:	9303      	str	r3, [sp, #12]
    26a6:	9b01      	ldr	r3, [sp, #4]
    26a8:	681b      	ldr	r3, [r3, #0]
    26aa:	9a03      	ldr	r2, [sp, #12]
    26ac:	429a      	cmp	r2, r3
    26ae:	d39c      	bcc.n	25ea <IntCtrl_Ip_Init+0x32>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
    26b0:	2300      	movs	r3, #0
}
    26b2:	4618      	mov	r0, r3
    26b4:	b005      	add	sp, #20
    26b6:	f85d fb04 	ldr.w	pc, [sp], #4

000026ba <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    26ba:	b500      	push	{lr}
    26bc:	b085      	sub	sp, #20
    26be:	9003      	str	r0, [sp, #12]
    26c0:	9102      	str	r1, [sp, #8]
    26c2:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
    26c4:	9a01      	ldr	r2, [sp, #4]
    26c6:	9902      	ldr	r1, [sp, #8]
    26c8:	9803      	ldr	r0, [sp, #12]
    26ca:	f7ff fe5d 	bl	2388 <IntCtrl_Ip_InstallHandlerPrivileged>
}
    26ce:	bf00      	nop
    26d0:	b005      	add	sp, #20
    26d2:	f85d fb04 	ldr.w	pc, [sp], #4

000026d6 <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
    26d6:	b500      	push	{lr}
    26d8:	b083      	sub	sp, #12
    26da:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
    26dc:	9801      	ldr	r0, [sp, #4]
    26de:	f7ff fe99 	bl	2414 <IntCtrl_Ip_EnableIrqPrivileged>
}
    26e2:	bf00      	nop
    26e4:	b003      	add	sp, #12
    26e6:	f85d fb04 	ldr.w	pc, [sp], #4

000026ea <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
    26ea:	b500      	push	{lr}
    26ec:	b083      	sub	sp, #12
    26ee:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
    26f0:	9801      	ldr	r0, [sp, #4]
    26f2:	f7ff feb3 	bl	245c <IntCtrl_Ip_DisableIrqPrivileged>
}
    26f6:	bf00      	nop
    26f8:	b003      	add	sp, #12
    26fa:	f85d fb04 	ldr.w	pc, [sp], #4

000026fe <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    26fe:	b500      	push	{lr}
    2700:	b083      	sub	sp, #12
    2702:	9001      	str	r0, [sp, #4]
    2704:	460b      	mov	r3, r1
    2706:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
    270a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    270e:	4619      	mov	r1, r3
    2710:	9801      	ldr	r0, [sp, #4]
    2712:	f7ff fec9 	bl	24a8 <IntCtrl_Ip_SetPriorityPrivileged>
}
    2716:	bf00      	nop
    2718:	b003      	add	sp, #12
    271a:	f85d fb04 	ldr.w	pc, [sp], #4

0000271e <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
    271e:	b500      	push	{lr}
    2720:	b083      	sub	sp, #12
    2722:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
    2724:	9801      	ldr	r0, [sp, #4]
    2726:	f7ff fef5 	bl	2514 <IntCtrl_Ip_GetPriorityPrivileged>
    272a:	4603      	mov	r3, r0
}
    272c:	4618      	mov	r0, r3
    272e:	b003      	add	sp, #12
    2730:	f85d fb04 	ldr.w	pc, [sp], #4

00002734 <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
    2734:	b500      	push	{lr}
    2736:	b083      	sub	sp, #12
    2738:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
    273a:	9801      	ldr	r0, [sp, #4]
    273c:	f7ff ff16 	bl	256c <IntCtrl_Ip_ClearPendingPrivileged>
}
    2740:	bf00      	nop
    2742:	b003      	add	sp, #12
    2744:	f85d fb04 	ldr.w	pc, [sp], #4

00002748 <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    2748:	b500      	push	{lr}
    274a:	b083      	sub	sp, #12
    274c:	9001      	str	r0, [sp, #4]
    274e:	460b      	mov	r3, r1
    2750:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
    2754:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2758:	2b00      	cmp	r3, #0
    275a:	d003      	beq.n	2764 <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
    275c:	9801      	ldr	r0, [sp, #4]
    275e:	f7ff ffba 	bl	26d6 <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
    2762:	e002      	b.n	276a <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    2764:	9801      	ldr	r0, [sp, #4]
    2766:	f7ff ffc0 	bl	26ea <IntCtrl_Ip_DisableIrq>
}
    276a:	bf00      	nop
    276c:	b003      	add	sp, #12
    276e:	f85d fb04 	ldr.w	pc, [sp], #4

00002772 <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    2772:	b500      	push	{lr}
    2774:	b083      	sub	sp, #12
    2776:	9001      	str	r0, [sp, #4]
    2778:	460b      	mov	r3, r1
    277a:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
    277e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2782:	4619      	mov	r1, r3
    2784:	9801      	ldr	r0, [sp, #4]
    2786:	f7ff ffba 	bl	26fe <IntCtrl_Ip_SetPriority>
}
    278a:	bf00      	nop
    278c:	b003      	add	sp, #12
    278e:	f85d fb04 	ldr.w	pc, [sp], #4

00002792 <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
    2792:	b500      	push	{lr}
    2794:	b083      	sub	sp, #12
    2796:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
    2798:	9801      	ldr	r0, [sp, #4]
    279a:	f7ff ffc0 	bl	271e <IntCtrl_Ip_GetPriority>
    279e:	4603      	mov	r3, r0
}
    27a0:	4618      	mov	r0, r3
    27a2:	b003      	add	sp, #12
    27a4:	f85d fb04 	ldr.w	pc, [sp], #4

000027a8 <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    27a8:	b500      	push	{lr}
    27aa:	b085      	sub	sp, #20
    27ac:	9003      	str	r0, [sp, #12]
    27ae:	9102      	str	r1, [sp, #8]
    27b0:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    27b2:	9a01      	ldr	r2, [sp, #4]
    27b4:	9902      	ldr	r1, [sp, #8]
    27b6:	9803      	ldr	r0, [sp, #12]
    27b8:	f7ff ff7f 	bl	26ba <IntCtrl_Ip_InstallHandler>
}
    27bc:	bf00      	nop
    27be:	b005      	add	sp, #20
    27c0:	f85d fb04 	ldr.w	pc, [sp], #4

000027c4 <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
    27c4:	b500      	push	{lr}
    27c6:	b085      	sub	sp, #20
    27c8:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
    27ca:	2300      	movs	r3, #0
    27cc:	f88d 300f 	strb.w	r3, [sp, #15]
    (void)pConfig;
#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (NULL_PTR != pConfig)
    27d0:	9b01      	ldr	r3, [sp, #4]
    27d2:	2b00      	cmp	r3, #0
    27d4:	d006      	beq.n	27e4 <Platform_Init+0x20>
    {
        (void)Det_ReportError((uint16)CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_INIT_ID, PLATFORM_E_PARAM_POINTER);
    27d6:	2301      	movs	r3, #1
    27d8:	2220      	movs	r2, #32
    27da:	2100      	movs	r1, #0
    27dc:	20ff      	movs	r0, #255	; 0xff
    27de:	f016 fa75 	bl	18ccc <Det_ReportError>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
    27e2:	e008      	b.n	27f6 <Platform_Init+0x32>
            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
    27e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    27e8:	4a05      	ldr	r2, [pc, #20]	; (2800 <Platform_Init+0x3c>)
    27ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    27ee:	681b      	ldr	r3, [r3, #0]
    27f0:	4618      	mov	r0, r3
    27f2:	f000 f917 	bl	2a24 <Platform_Ipw_Init>
}
    27f6:	bf00      	nop
    27f8:	b005      	add	sp, #20
    27fa:	f85d fb04 	ldr.w	pc, [sp], #4
    27fe:	bf00      	nop
    2800:	0001aa28 	.word	0x0001aa28

00002804 <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    2804:	b500      	push	{lr}
    2806:	b085      	sub	sp, #20
    2808:	9001      	str	r0, [sp, #4]
    280a:	460b      	mov	r3, r1
    280c:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    2810:	2300      	movs	r3, #0
    2812:	f88d 300f 	strb.w	r3, [sp, #15]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    2816:	9b01      	ldr	r3, [sp, #4]
    2818:	2b7a      	cmp	r3, #122	; 0x7a
    281a:	dc02      	bgt.n	2822 <Platform_SetIrq+0x1e>
    281c:	9b01      	ldr	r3, [sp, #4]
    281e:	2b00      	cmp	r3, #0
    2820:	da09      	bge.n	2836 <Platform_SetIrq+0x32>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber))
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_SET_IRQ_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    2822:	2302      	movs	r3, #2
    2824:	2221      	movs	r2, #33	; 0x21
    2826:	2100      	movs	r1, #0
    2828:	20ff      	movs	r0, #255	; 0xff
    282a:	f016 fa4f 	bl	18ccc <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    282e:	2301      	movs	r3, #1
    2830:	f88d 300f 	strb.w	r3, [sp, #15]
    2834:	e005      	b.n	2842 <Platform_SetIrq+0x3e>
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
    2836:	f89d 3003 	ldrb.w	r3, [sp, #3]
    283a:	4619      	mov	r1, r3
    283c:	9801      	ldr	r0, [sp, #4]
    283e:	f7ff ff83 	bl	2748 <Platform_Ipw_SetIrq>
    }
    return RetValue;
    2842:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    2846:	4618      	mov	r0, r3
    2848:	b005      	add	sp, #20
    284a:	f85d fb04 	ldr.w	pc, [sp], #4

0000284e <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    284e:	b500      	push	{lr}
    2850:	b085      	sub	sp, #20
    2852:	9001      	str	r0, [sp, #4]
    2854:	460b      	mov	r3, r1
    2856:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    285a:	2300      	movs	r3, #0
    285c:	f88d 300f 	strb.w	r3, [sp, #15]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
#if (INT_CTRL_IP_CORTEXM == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    2860:	9b01      	ldr	r3, [sp, #4]
    2862:	2b7a      	cmp	r3, #122	; 0x7a
    2864:	dc06      	bgt.n	2874 <Platform_SetIrqPriority+0x26>
    2866:	9b01      	ldr	r3, [sp, #4]
    2868:	2b00      	cmp	r3, #0
    286a:	db03      	blt.n	2874 <Platform_SetIrqPriority+0x26>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber) || \
    286c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2870:	2b0f      	cmp	r3, #15
    2872:	d909      	bls.n	2888 <Platform_SetIrqPriority+0x3a>
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber) || \
        (u8Priority >= (uint8)(1U << INT_CTRL_IP_GIC_PRIO_BITS)))
#endif
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_SET_IRQ_PRIO_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    2874:	2302      	movs	r3, #2
    2876:	2222      	movs	r2, #34	; 0x22
    2878:	2100      	movs	r1, #0
    287a:	20ff      	movs	r0, #255	; 0xff
    287c:	f016 fa26 	bl	18ccc <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    2880:	2301      	movs	r3, #1
    2882:	f88d 300f 	strb.w	r3, [sp, #15]
    2886:	e005      	b.n	2894 <Platform_SetIrqPriority+0x46>
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
    2888:	f89d 3003 	ldrb.w	r3, [sp, #3]
    288c:	4619      	mov	r1, r3
    288e:	9801      	ldr	r0, [sp, #4]
    2890:	f7ff ff6f 	bl	2772 <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
    2894:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    2898:	4618      	mov	r0, r3
    289a:	b005      	add	sp, #20
    289c:	f85d fb04 	ldr.w	pc, [sp], #4

000028a0 <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
    28a0:	b500      	push	{lr}
    28a2:	b085      	sub	sp, #20
    28a4:	9001      	str	r0, [sp, #4]
    28a6:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    28a8:	2300      	movs	r3, #0
    28aa:	f88d 300f 	strb.w	r3, [sp, #15]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    28ae:	9b01      	ldr	r3, [sp, #4]
    28b0:	2b7a      	cmp	r3, #122	; 0x7a
    28b2:	dc02      	bgt.n	28ba <Platform_GetIrqPriority+0x1a>
    28b4:	9b01      	ldr	r3, [sp, #4]
    28b6:	2b00      	cmp	r3, #0
    28b8:	da09      	bge.n	28ce <Platform_GetIrqPriority+0x2e>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber))
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_GET_IRQ_PRIO_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    28ba:	2302      	movs	r3, #2
    28bc:	2223      	movs	r2, #35	; 0x23
    28be:	2100      	movs	r1, #0
    28c0:	20ff      	movs	r0, #255	; 0xff
    28c2:	f016 fa03 	bl	18ccc <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    28c6:	2301      	movs	r3, #1
    28c8:	f88d 300f 	strb.w	r3, [sp, #15]
    28cc:	e013      	b.n	28f6 <Platform_GetIrqPriority+0x56>
    }
    else if (u8Priority == NULL_PTR)
    28ce:	9b00      	ldr	r3, [sp, #0]
    28d0:	2b00      	cmp	r3, #0
    28d2:	d109      	bne.n	28e8 <Platform_GetIrqPriority+0x48>
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_GET_IRQ_PRIO_ID, PLATFORM_E_PARAM_POINTER);
    28d4:	2301      	movs	r3, #1
    28d6:	2223      	movs	r2, #35	; 0x23
    28d8:	2100      	movs	r1, #0
    28da:	20ff      	movs	r0, #255	; 0xff
    28dc:	f016 f9f6 	bl	18ccc <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    28e0:	2301      	movs	r3, #1
    28e2:	f88d 300f 	strb.w	r3, [sp, #15]
    28e6:	e006      	b.n	28f6 <Platform_GetIrqPriority+0x56>
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
    28e8:	9801      	ldr	r0, [sp, #4]
    28ea:	f7ff ff52 	bl	2792 <Platform_Ipw_GetIrqPriority>
    28ee:	4603      	mov	r3, r0
    28f0:	461a      	mov	r2, r3
    28f2:	9b00      	ldr	r3, [sp, #0]
    28f4:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
    28f6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    28fa:	4618      	mov	r0, r3
    28fc:	b005      	add	sp, #20
    28fe:	f85d fb04 	ldr.w	pc, [sp], #4

00002902 <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
    2902:	b500      	push	{lr}
    2904:	b087      	sub	sp, #28
    2906:	9003      	str	r0, [sp, #12]
    2908:	9102      	str	r1, [sp, #8]
    290a:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    290c:	2300      	movs	r3, #0
    290e:	f88d 3017 	strb.w	r3, [sp, #23]

#if (PLATFORM_DEV_ERROR_DETECT == STD_ON)
    if (((sint32)eIrqNumber > (sint32)INT_CTRL_IP_IRQ_MAX) || \
    2912:	9b03      	ldr	r3, [sp, #12]
    2914:	2b7a      	cmp	r3, #122	; 0x7a
    2916:	dc02      	bgt.n	291e <Platform_InstallIrqHandler+0x1c>
    2918:	9b03      	ldr	r3, [sp, #12]
    291a:	2b00      	cmp	r3, #0
    291c:	da09      	bge.n	2932 <Platform_InstallIrqHandler+0x30>
        ((sint32)INT_CTRL_IP_IRQ_MIN > (sint32)eIrqNumber))
    {
        (void)Det_ReportError(CDD_PLATFORM_MODULE_ID, 0U, PLATFORM_INSTALL_HANDLER_ID, PLATFORM_E_PARAM_OUT_OF_RANGE);
    291e:	2302      	movs	r3, #2
    2920:	2224      	movs	r2, #36	; 0x24
    2922:	2100      	movs	r1, #0
    2924:	20ff      	movs	r0, #255	; 0xff
    2926:	f016 f9d1 	bl	18ccc <Det_ReportError>
        RetValue = (Std_ReturnType)E_NOT_OK;
    292a:	2301      	movs	r3, #1
    292c:	f88d 3017 	strb.w	r3, [sp, #23]
    2930:	e004      	b.n	293c <Platform_InstallIrqHandler+0x3a>
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    2932:	9a01      	ldr	r2, [sp, #4]
    2934:	9902      	ldr	r1, [sp, #8]
    2936:	9803      	ldr	r0, [sp, #12]
    2938:	f7ff ff36 	bl	27a8 <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
    293c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    2940:	4618      	mov	r0, r3
    2942:	b007      	add	sp, #28
    2944:	f85d fb04 	ldr.w	pc, [sp], #4

00002948 <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    2948:	b500      	push	{lr}
    294a:	b085      	sub	sp, #20
    294c:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    294e:	2300      	movs	r3, #0
    2950:	9303      	str	r3, [sp, #12]
    2952:	e05d      	b.n	2a10 <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    2954:	9b01      	ldr	r3, [sp, #4]
    2956:	6859      	ldr	r1, [r3, #4]
    2958:	9a03      	ldr	r2, [sp, #12]
    295a:	4613      	mov	r3, r2
    295c:	005b      	lsls	r3, r3, #1
    295e:	4413      	add	r3, r2
    2960:	009b      	lsls	r3, r3, #2
    2962:	440b      	add	r3, r1
    2964:	681b      	ldr	r3, [r3, #0]
    2966:	4618      	mov	r0, r3
    2968:	f7ff fee4 	bl	2734 <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    296c:	9b01      	ldr	r3, [sp, #4]
    296e:	6859      	ldr	r1, [r3, #4]
    2970:	9a03      	ldr	r2, [sp, #12]
    2972:	4613      	mov	r3, r2
    2974:	005b      	lsls	r3, r3, #1
    2976:	4413      	add	r3, r2
    2978:	009b      	lsls	r3, r3, #2
    297a:	440b      	add	r3, r1
    297c:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    297e:	9b01      	ldr	r3, [sp, #4]
    2980:	6859      	ldr	r1, [r3, #4]
    2982:	9a03      	ldr	r2, [sp, #12]
    2984:	4613      	mov	r3, r2
    2986:	005b      	lsls	r3, r3, #1
    2988:	4413      	add	r3, r2
    298a:	009b      	lsls	r3, r3, #2
    298c:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    298e:	795b      	ldrb	r3, [r3, #5]
    2990:	4619      	mov	r1, r3
    2992:	f7ff feb4 	bl	26fe <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    2996:	9b01      	ldr	r3, [sp, #4]
    2998:	6859      	ldr	r1, [r3, #4]
    299a:	9a03      	ldr	r2, [sp, #12]
    299c:	4613      	mov	r3, r2
    299e:	005b      	lsls	r3, r3, #1
    29a0:	4413      	add	r3, r2
    29a2:	009b      	lsls	r3, r3, #2
    29a4:	440b      	add	r3, r1
    29a6:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    29a8:	9b01      	ldr	r3, [sp, #4]
    29aa:	6859      	ldr	r1, [r3, #4]
    29ac:	9a03      	ldr	r2, [sp, #12]
    29ae:	4613      	mov	r3, r2
    29b0:	005b      	lsls	r3, r3, #1
    29b2:	4413      	add	r3, r2
    29b4:	009b      	lsls	r3, r3, #2
    29b6:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    29b8:	689b      	ldr	r3, [r3, #8]
    29ba:	2200      	movs	r2, #0
    29bc:	4619      	mov	r1, r3
    29be:	f7ff fe7c 	bl	26ba <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    29c2:	9b01      	ldr	r3, [sp, #4]
    29c4:	6859      	ldr	r1, [r3, #4]
    29c6:	9a03      	ldr	r2, [sp, #12]
    29c8:	4613      	mov	r3, r2
    29ca:	005b      	lsls	r3, r3, #1
    29cc:	4413      	add	r3, r2
    29ce:	009b      	lsls	r3, r3, #2
    29d0:	440b      	add	r3, r1
    29d2:	791b      	ldrb	r3, [r3, #4]
    29d4:	2b00      	cmp	r3, #0
    29d6:	d00c      	beq.n	29f2 <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    29d8:	9b01      	ldr	r3, [sp, #4]
    29da:	6859      	ldr	r1, [r3, #4]
    29dc:	9a03      	ldr	r2, [sp, #12]
    29de:	4613      	mov	r3, r2
    29e0:	005b      	lsls	r3, r3, #1
    29e2:	4413      	add	r3, r2
    29e4:	009b      	lsls	r3, r3, #2
    29e6:	440b      	add	r3, r1
    29e8:	681b      	ldr	r3, [r3, #0]
    29ea:	4618      	mov	r0, r3
    29ec:	f7ff fe73 	bl	26d6 <IntCtrl_Ip_EnableIrq>
    29f0:	e00b      	b.n	2a0a <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    29f2:	9b01      	ldr	r3, [sp, #4]
    29f4:	6859      	ldr	r1, [r3, #4]
    29f6:	9a03      	ldr	r2, [sp, #12]
    29f8:	4613      	mov	r3, r2
    29fa:	005b      	lsls	r3, r3, #1
    29fc:	4413      	add	r3, r2
    29fe:	009b      	lsls	r3, r3, #2
    2a00:	440b      	add	r3, r1
    2a02:	681b      	ldr	r3, [r3, #0]
    2a04:	4618      	mov	r0, r3
    2a06:	f7ff fe70 	bl	26ea <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    2a0a:	9b03      	ldr	r3, [sp, #12]
    2a0c:	3301      	adds	r3, #1
    2a0e:	9303      	str	r3, [sp, #12]
    2a10:	9b01      	ldr	r3, [sp, #4]
    2a12:	681b      	ldr	r3, [r3, #0]
    2a14:	9a03      	ldr	r2, [sp, #12]
    2a16:	429a      	cmp	r2, r3
    2a18:	d39c      	bcc.n	2954 <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    2a1a:	2300      	movs	r3, #0
}
    2a1c:	4618      	mov	r0, r3
    2a1e:	b005      	add	sp, #20
    2a20:	f85d fb04 	ldr.w	pc, [sp], #4

00002a24 <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    2a24:	b500      	push	{lr}
    2a26:	b085      	sub	sp, #20
    2a28:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    2a2a:	2300      	movs	r3, #0
    2a2c:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    2a30:	9b01      	ldr	r3, [sp, #4]
    2a32:	681b      	ldr	r3, [r3, #0]
    2a34:	2b00      	cmp	r3, #0
    2a36:	d007      	beq.n	2a48 <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    2a38:	9b01      	ldr	r3, [sp, #4]
    2a3a:	681b      	ldr	r3, [r3, #0]
    2a3c:	4618      	mov	r0, r3
    2a3e:	f7ff ff83 	bl	2948 <Platform_Ipw_InitIntCtrl>
    2a42:	4603      	mov	r3, r0
    2a44:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    2a48:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2a4c:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    2a4e:	bf00      	nop
    2a50:	b005      	add	sp, #20
    2a52:	f85d fb04 	ldr.w	pc, [sp], #4

00002a56 <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    2a56:	2300      	movs	r3, #0
}
    2a58:	4618      	mov	r0, r3
    2a5a:	4770      	bx	lr

00002a5c <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    2a5c:	b082      	sub	sp, #8
    2a5e:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    2a60:	2301      	movs	r3, #1
}
    2a62:	4618      	mov	r0, r3
    2a64:	b002      	add	sp, #8
    2a66:	4770      	bx	lr

00002a68 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    2a68:	b082      	sub	sp, #8
    2a6a:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    2a6c:	bf00      	nop
    2a6e:	b002      	add	sp, #8
    2a70:	4770      	bx	lr

00002a72 <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    2a72:	b082      	sub	sp, #8
    2a74:	9001      	str	r0, [sp, #4]
    return Micros;
    2a76:	9b01      	ldr	r3, [sp, #4]
}
    2a78:	4618      	mov	r0, r3
    2a7a:	b002      	add	sp, #8
    2a7c:	4770      	bx	lr

00002a7e <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    2a7e:	b500      	push	{lr}
    2a80:	b083      	sub	sp, #12
    2a82:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    2a84:	f000 f86c 	bl	2b60 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    2a88:	bf00      	nop
    2a8a:	b003      	add	sp, #12
    2a8c:	f85d fb04 	ldr.w	pc, [sp], #4

00002a90 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    2a90:	b500      	push	{lr}
    2a92:	b085      	sub	sp, #20
    2a94:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    2a96:	2300      	movs	r3, #0
    2a98:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    2a9a:	9b01      	ldr	r3, [sp, #4]
    2a9c:	2b00      	cmp	r3, #0
    2a9e:	d003      	beq.n	2aa8 <OsIf_GetCounter+0x18>
    2aa0:	9b01      	ldr	r3, [sp, #4]
    2aa2:	2b01      	cmp	r3, #1
    2aa4:	d004      	beq.n	2ab0 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    2aa6:	e007      	b.n	2ab8 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    2aa8:	f7ff ffd5 	bl	2a56 <OsIf_Timer_Dummy_GetCounter>
    2aac:	9003      	str	r0, [sp, #12]
            break;
    2aae:	e003      	b.n	2ab8 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    2ab0:	f000 f872 	bl	2b98 <OsIf_Timer_System_GetCounter>
    2ab4:	9003      	str	r0, [sp, #12]
            break;
    2ab6:	bf00      	nop
    }

    return Value;
    2ab8:	9b03      	ldr	r3, [sp, #12]
}
    2aba:	4618      	mov	r0, r3
    2abc:	b005      	add	sp, #20
    2abe:	f85d fb04 	ldr.w	pc, [sp], #4

00002ac2 <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    2ac2:	b500      	push	{lr}
    2ac4:	b085      	sub	sp, #20
    2ac6:	9001      	str	r0, [sp, #4]
    2ac8:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    2aca:	2300      	movs	r3, #0
    2acc:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    2ace:	9b00      	ldr	r3, [sp, #0]
    2ad0:	2b00      	cmp	r3, #0
    2ad2:	d003      	beq.n	2adc <OsIf_GetElapsed+0x1a>
    2ad4:	9b00      	ldr	r3, [sp, #0]
    2ad6:	2b01      	cmp	r3, #1
    2ad8:	d005      	beq.n	2ae6 <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    2ada:	e009      	b.n	2af0 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    2adc:	9801      	ldr	r0, [sp, #4]
    2ade:	f7ff ffbd 	bl	2a5c <OsIf_Timer_Dummy_GetElapsed>
    2ae2:	9003      	str	r0, [sp, #12]
            break;
    2ae4:	e004      	b.n	2af0 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    2ae6:	9801      	ldr	r0, [sp, #4]
    2ae8:	f000 f864 	bl	2bb4 <OsIf_Timer_System_GetElapsed>
    2aec:	9003      	str	r0, [sp, #12]
            break;
    2aee:	bf00      	nop
    }

    return Value;
    2af0:	9b03      	ldr	r3, [sp, #12]
}
    2af2:	4618      	mov	r0, r3
    2af4:	b005      	add	sp, #20
    2af6:	f85d fb04 	ldr.w	pc, [sp], #4

00002afa <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    2afa:	b500      	push	{lr}
    2afc:	b083      	sub	sp, #12
    2afe:	9001      	str	r0, [sp, #4]
    2b00:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    2b02:	9b00      	ldr	r3, [sp, #0]
    2b04:	2b00      	cmp	r3, #0
    2b06:	d003      	beq.n	2b10 <OsIf_SetTimerFrequency+0x16>
    2b08:	9b00      	ldr	r3, [sp, #0]
    2b0a:	2b01      	cmp	r3, #1
    2b0c:	d004      	beq.n	2b18 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    2b0e:	e007      	b.n	2b20 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    2b10:	9801      	ldr	r0, [sp, #4]
    2b12:	f7ff ffa9 	bl	2a68 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    2b16:	e003      	b.n	2b20 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    2b18:	9801      	ldr	r0, [sp, #4]
    2b1a:	f000 f85b 	bl	2bd4 <OsIf_Timer_System_SetTimerFrequency>
            break;
    2b1e:	bf00      	nop
    }
}
    2b20:	bf00      	nop
    2b22:	b003      	add	sp, #12
    2b24:	f85d fb04 	ldr.w	pc, [sp], #4

00002b28 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    2b28:	b500      	push	{lr}
    2b2a:	b085      	sub	sp, #20
    2b2c:	9001      	str	r0, [sp, #4]
    2b2e:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    2b30:	2300      	movs	r3, #0
    2b32:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    2b34:	9b00      	ldr	r3, [sp, #0]
    2b36:	2b00      	cmp	r3, #0
    2b38:	d003      	beq.n	2b42 <OsIf_MicrosToTicks+0x1a>
    2b3a:	9b00      	ldr	r3, [sp, #0]
    2b3c:	2b01      	cmp	r3, #1
    2b3e:	d005      	beq.n	2b4c <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    2b40:	e009      	b.n	2b56 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    2b42:	9801      	ldr	r0, [sp, #4]
    2b44:	f7ff ff95 	bl	2a72 <OsIf_Timer_Dummy_MicrosToTicks>
    2b48:	9003      	str	r0, [sp, #12]
            break;
    2b4a:	e004      	b.n	2b56 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    2b4c:	9801      	ldr	r0, [sp, #4]
    2b4e:	f000 f84f 	bl	2bf0 <OsIf_Timer_System_MicrosToTicks>
    2b52:	9003      	str	r0, [sp, #12]
            break;
    2b54:	bf00      	nop
    }

    return Value;
    2b56:	9b03      	ldr	r3, [sp, #12]
}
    2b58:	4618      	mov	r0, r3
    2b5a:	b005      	add	sp, #20
    2b5c:	f85d fb04 	ldr.w	pc, [sp], #4

00002b60 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    2b60:	b500      	push	{lr}
    2b62:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    2b64:	2300      	movs	r3, #0
    2b66:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    2b68:	4a09      	ldr	r2, [pc, #36]	; (2b90 <OsIf_Timer_System_Init+0x30>)
    2b6a:	9b01      	ldr	r3, [sp, #4]
    2b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2b70:	685a      	ldr	r2, [r3, #4]
    2b72:	4908      	ldr	r1, [pc, #32]	; (2b94 <OsIf_Timer_System_Init+0x34>)
    2b74:	9b01      	ldr	r3, [sp, #4]
    2b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    2b7a:	4a06      	ldr	r2, [pc, #24]	; (2b94 <OsIf_Timer_System_Init+0x34>)
    2b7c:	9b01      	ldr	r3, [sp, #4]
    2b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2b82:	4618      	mov	r0, r3
    2b84:	f000 f868 	bl	2c58 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    2b88:	bf00      	nop
    2b8a:	b003      	add	sp, #12
    2b8c:	f85d fb04 	ldr.w	pc, [sp], #4
    2b90:	0001a9e0 	.word	0x0001a9e0
    2b94:	1fff8b74 	.word	0x1fff8b74

00002b98 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    2b98:	b500      	push	{lr}
    2b9a:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    2b9c:	2300      	movs	r3, #0
    2b9e:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    2ba0:	2300      	movs	r3, #0
    2ba2:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    2ba4:	f000 f86c 	bl	2c80 <OsIf_Timer_System_Internal_GetCounter>
    2ba8:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    2baa:	9b01      	ldr	r3, [sp, #4]
}
    2bac:	4618      	mov	r0, r3
    2bae:	b003      	add	sp, #12
    2bb0:	f85d fb04 	ldr.w	pc, [sp], #4

00002bb4 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    2bb4:	b500      	push	{lr}
    2bb6:	b085      	sub	sp, #20
    2bb8:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    2bba:	2300      	movs	r3, #0
    2bbc:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    2bbe:	2300      	movs	r3, #0
    2bc0:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    2bc2:	9801      	ldr	r0, [sp, #4]
    2bc4:	f000 f864 	bl	2c90 <OsIf_Timer_System_Internal_GetElapsed>
    2bc8:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    2bca:	9b03      	ldr	r3, [sp, #12]
}
    2bcc:	4618      	mov	r0, r3
    2bce:	b005      	add	sp, #20
    2bd0:	f85d fb04 	ldr.w	pc, [sp], #4

00002bd4 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    2bd4:	b084      	sub	sp, #16
    2bd6:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    2bd8:	2300      	movs	r3, #0
    2bda:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    2bdc:	4903      	ldr	r1, [pc, #12]	; (2bec <OsIf_Timer_System_SetTimerFrequency+0x18>)
    2bde:	9b03      	ldr	r3, [sp, #12]
    2be0:	9a01      	ldr	r2, [sp, #4]
    2be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    2be6:	bf00      	nop
    2be8:	b004      	add	sp, #16
    2bea:	4770      	bx	lr
    2bec:	1fff8b74 	.word	0x1fff8b74

00002bf0 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    2bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bf2:	b087      	sub	sp, #28
    2bf4:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    2bf6:	2100      	movs	r1, #0
    2bf8:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    2bfa:	2100      	movs	r1, #0
    2bfc:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    2bfe:	9901      	ldr	r1, [sp, #4]
    2c00:	2000      	movs	r0, #0
    2c02:	460e      	mov	r6, r1
    2c04:	4607      	mov	r7, r0
    2c06:	4812      	ldr	r0, [pc, #72]	; (2c50 <OsIf_Timer_System_MicrosToTicks+0x60>)
    2c08:	9904      	ldr	r1, [sp, #16]
    2c0a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    2c0e:	2000      	movs	r0, #0
    2c10:	460c      	mov	r4, r1
    2c12:	4605      	mov	r5, r0
    2c14:	fb04 f007 	mul.w	r0, r4, r7
    2c18:	fb06 f105 	mul.w	r1, r6, r5
    2c1c:	4401      	add	r1, r0
    2c1e:	fba6 2304 	umull	r2, r3, r6, r4
    2c22:	4419      	add	r1, r3
    2c24:	460b      	mov	r3, r1
    2c26:	e9cd 2302 	strd	r2, r3, [sp, #8]
    2c2a:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    2c2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    2c32:	4a08      	ldr	r2, [pc, #32]	; (2c54 <OsIf_Timer_System_MicrosToTicks+0x64>)
    2c34:	f04f 0300 	mov.w	r3, #0
    2c38:	f7fd fcb4 	bl	5a4 <__aeabi_uldivmod>
    2c3c:	4602      	mov	r2, r0
    2c3e:	460b      	mov	r3, r1
    2c40:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    2c44:	9b02      	ldr	r3, [sp, #8]
    2c46:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    2c48:	9b05      	ldr	r3, [sp, #20]
}
    2c4a:	4618      	mov	r0, r3
    2c4c:	b007      	add	sp, #28
    2c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c50:	1fff8b74 	.word	0x1fff8b74
    2c54:	000f4240 	.word	0x000f4240

00002c58 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    2c58:	b082      	sub	sp, #8
    2c5a:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    2c5c:	4b07      	ldr	r3, [pc, #28]	; (2c7c <OsIf_Timer_System_Internal_Init+0x24>)
    2c5e:	2200      	movs	r2, #0
    2c60:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    2c62:	4b06      	ldr	r3, [pc, #24]	; (2c7c <OsIf_Timer_System_Internal_Init+0x24>)
    2c64:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    2c68:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    2c6a:	4b04      	ldr	r3, [pc, #16]	; (2c7c <OsIf_Timer_System_Internal_Init+0x24>)
    2c6c:	2200      	movs	r2, #0
    2c6e:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    2c70:	4b02      	ldr	r3, [pc, #8]	; (2c7c <OsIf_Timer_System_Internal_Init+0x24>)
    2c72:	2205      	movs	r2, #5
    2c74:	601a      	str	r2, [r3, #0]
}
    2c76:	bf00      	nop
    2c78:	b002      	add	sp, #8
    2c7a:	4770      	bx	lr
    2c7c:	e000e010 	.word	0xe000e010

00002c80 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    2c80:	4b02      	ldr	r3, [pc, #8]	; (2c8c <OsIf_Timer_System_Internal_GetCounter+0xc>)
    2c82:	689b      	ldr	r3, [r3, #8]
    2c84:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    2c88:	4618      	mov	r0, r3
    2c8a:	4770      	bx	lr
    2c8c:	e000e010 	.word	0xe000e010

00002c90 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    2c90:	b084      	sub	sp, #16
    2c92:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    2c94:	4b10      	ldr	r3, [pc, #64]	; (2cd8 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    2c96:	689b      	ldr	r3, [r3, #8]
    2c98:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2c9c:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    2c9e:	2300      	movs	r3, #0
    2ca0:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    2ca2:	9b01      	ldr	r3, [sp, #4]
    2ca4:	681b      	ldr	r3, [r3, #0]
    2ca6:	9a02      	ldr	r2, [sp, #8]
    2ca8:	429a      	cmp	r2, r3
    2caa:	d909      	bls.n	2cc0 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    2cac:	9b01      	ldr	r3, [sp, #4]
    2cae:	681a      	ldr	r2, [r3, #0]
    2cb0:	9b02      	ldr	r3, [sp, #8]
    2cb2:	1ad3      	subs	r3, r2, r3
    2cb4:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    2cb8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    2cbc:	9303      	str	r3, [sp, #12]
    2cbe:	e004      	b.n	2cca <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    2cc0:	9b01      	ldr	r3, [sp, #4]
    2cc2:	681a      	ldr	r2, [r3, #0]
    2cc4:	9b02      	ldr	r3, [sp, #8]
    2cc6:	1ad3      	subs	r3, r2, r3
    2cc8:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    2cca:	9b01      	ldr	r3, [sp, #4]
    2ccc:	9a02      	ldr	r2, [sp, #8]
    2cce:	601a      	str	r2, [r3, #0]

    return dif;
    2cd0:	9b03      	ldr	r3, [sp, #12]
}
    2cd2:	4618      	mov	r0, r3
    2cd4:	b004      	add	sp, #16
    2cd6:	4770      	bx	lr
    2cd8:	e000e010 	.word	0xe000e010

00002cdc <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    2cdc:	b082      	sub	sp, #8
    2cde:	9001      	str	r0, [sp, #4]
    2ce0:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    2ce2:	bf00      	nop
    2ce4:	b002      	add	sp, #8
    2ce6:	4770      	bx	lr

00002ce8 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    2ce8:	b500      	push	{lr}
    2cea:	b085      	sub	sp, #20
    2cec:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    2cee:	4b24      	ldr	r3, [pc, #144]	; (2d80 <Clock_Ip_UpdateDriverContext+0x98>)
    2cf0:	2201      	movs	r2, #1
    2cf2:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2cf4:	4b23      	ldr	r3, [pc, #140]	; (2d84 <Clock_Ip_UpdateDriverContext+0x9c>)
    2cf6:	681b      	ldr	r3, [r3, #0]
    2cf8:	2102      	movs	r1, #2
    2cfa:	4618      	mov	r0, r3
    2cfc:	f003 fc32 	bl	6564 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    2d00:	2300      	movs	r3, #0
    2d02:	f88d 300f 	strb.w	r3, [sp, #15]
    2d06:	e015      	b.n	2d34 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    2d08:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2d0c:	9a01      	ldr	r2, [sp, #4]
    2d0e:	334a      	adds	r3, #74	; 0x4a
    2d10:	00db      	lsls	r3, r3, #3
    2d12:	4413      	add	r3, r2
    2d14:	6858      	ldr	r0, [r3, #4]
    2d16:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2d1a:	9a01      	ldr	r2, [sp, #4]
    2d1c:	334a      	adds	r3, #74	; 0x4a
    2d1e:	00db      	lsls	r3, r3, #3
    2d20:	4413      	add	r3, r2
    2d22:	689b      	ldr	r3, [r3, #8]
    2d24:	4619      	mov	r1, r3
    2d26:	f001 fadc 	bl	42e2 <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    2d2a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2d2e:	3301      	adds	r3, #1
    2d30:	f88d 300f 	strb.w	r3, [sp, #15]
    2d34:	9b01      	ldr	r3, [sp, #4]
    2d36:	7bdb      	ldrb	r3, [r3, #15]
    2d38:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2d3c:	429a      	cmp	r2, r3
    2d3e:	d3e3      	bcc.n	2d08 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    2d40:	f000 f824 	bl	2d8c <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    2d44:	2301      	movs	r3, #1
    2d46:	f88d 300f 	strb.w	r3, [sp, #15]
    2d4a:	e00e      	b.n	2d6a <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    2d4c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2d50:	9b01      	ldr	r3, [sp, #4]
    2d52:	327e      	adds	r2, #126	; 0x7e
    2d54:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    2d58:	490b      	ldr	r1, [pc, #44]	; (2d88 <Clock_Ip_UpdateDriverContext+0xa0>)
    2d5a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2d5e:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    2d60:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2d64:	3301      	adds	r3, #1
    2d66:	f88d 300f 	strb.w	r3, [sp, #15]
    2d6a:	9b01      	ldr	r3, [sp, #4]
    2d6c:	7cdb      	ldrb	r3, [r3, #19]
    2d6e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2d72:	429a      	cmp	r2, r3
    2d74:	d3ea      	bcc.n	2d4c <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    2d76:	bf00      	nop
    2d78:	bf00      	nop
    2d7a:	b005      	add	sp, #20
    2d7c:	f85d fb04 	ldr.w	pc, [sp], #4
    2d80:	1fff8b10 	.word	0x1fff8b10
    2d84:	1fff8b78 	.word	0x1fff8b78
    2d88:	1fff8b84 	.word	0x1fff8b84

00002d8c <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    2d8c:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    2d8e:	4b23      	ldr	r3, [pc, #140]	; (2e1c <Clock_Ip_CallEmptyCallbacks+0x90>)
    2d90:	781b      	ldrb	r3, [r3, #0]
    2d92:	f083 0301 	eor.w	r3, r3, #1
    2d96:	b2db      	uxtb	r3, r3
    2d98:	2b00      	cmp	r3, #0
    2d9a:	d03d      	beq.n	2e18 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    2d9c:	4b1f      	ldr	r3, [pc, #124]	; (2e1c <Clock_Ip_CallEmptyCallbacks+0x90>)
    2d9e:	2201      	movs	r2, #1
    2da0:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    2da2:	4b1f      	ldr	r3, [pc, #124]	; (2e20 <Clock_Ip_CallEmptyCallbacks+0x94>)
    2da4:	685b      	ldr	r3, [r3, #4]
    2da6:	2100      	movs	r1, #0
    2da8:	2000      	movs	r0, #0
    2daa:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    2dac:	4b1c      	ldr	r3, [pc, #112]	; (2e20 <Clock_Ip_CallEmptyCallbacks+0x94>)
    2dae:	689b      	ldr	r3, [r3, #8]
    2db0:	2057      	movs	r0, #87	; 0x57
    2db2:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2db4:	4b1b      	ldr	r3, [pc, #108]	; (2e24 <Clock_Ip_CallEmptyCallbacks+0x98>)
    2db6:	681b      	ldr	r3, [r3, #0]
    2db8:	2000      	movs	r0, #0
    2dba:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    2dbc:	4b1a      	ldr	r3, [pc, #104]	; (2e28 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    2dbe:	681b      	ldr	r3, [r3, #0]
    2dc0:	2000      	movs	r0, #0
    2dc2:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    2dc4:	4b19      	ldr	r3, [pc, #100]	; (2e2c <Clock_Ip_CallEmptyCallbacks+0xa0>)
    2dc6:	681b      	ldr	r3, [r3, #0]
    2dc8:	2000      	movs	r0, #0
    2dca:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2dcc:	4b18      	ldr	r3, [pc, #96]	; (2e30 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    2dce:	685b      	ldr	r3, [r3, #4]
    2dd0:	2000      	movs	r0, #0
    2dd2:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    2dd4:	4b16      	ldr	r3, [pc, #88]	; (2e30 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    2dd6:	689b      	ldr	r3, [r3, #8]
    2dd8:	2057      	movs	r0, #87	; 0x57
    2dda:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2ddc:	4b15      	ldr	r3, [pc, #84]	; (2e34 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    2dde:	681b      	ldr	r3, [r3, #0]
    2de0:	2000      	movs	r0, #0
    2de2:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    2de4:	4b13      	ldr	r3, [pc, #76]	; (2e34 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    2de6:	685b      	ldr	r3, [r3, #4]
    2de8:	2100      	movs	r1, #0
    2dea:	2057      	movs	r0, #87	; 0x57
    2dec:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2dee:	4b12      	ldr	r3, [pc, #72]	; (2e38 <Clock_Ip_CallEmptyCallbacks+0xac>)
    2df0:	681b      	ldr	r3, [r3, #0]
    2df2:	2000      	movs	r0, #0
    2df4:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2df6:	4b11      	ldr	r3, [pc, #68]	; (2e3c <Clock_Ip_CallEmptyCallbacks+0xb0>)
    2df8:	685b      	ldr	r3, [r3, #4]
    2dfa:	2000      	movs	r0, #0
    2dfc:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    2dfe:	4b0f      	ldr	r3, [pc, #60]	; (2e3c <Clock_Ip_CallEmptyCallbacks+0xb0>)
    2e00:	689b      	ldr	r3, [r3, #8]
    2e02:	2057      	movs	r0, #87	; 0x57
    2e04:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2e06:	4b0e      	ldr	r3, [pc, #56]	; (2e40 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    2e08:	685b      	ldr	r3, [r3, #4]
    2e0a:	2000      	movs	r0, #0
    2e0c:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    2e0e:	4b0d      	ldr	r3, [pc, #52]	; (2e44 <Clock_Ip_CallEmptyCallbacks+0xb8>)
    2e10:	681b      	ldr	r3, [r3, #0]
    2e12:	2100      	movs	r1, #0
    2e14:	2000      	movs	r0, #0
    2e16:	4798      	blx	r3
    }
}
    2e18:	bf00      	nop
    2e1a:	bd08      	pop	{r3, pc}
    2e1c:	1fff8b7c 	.word	0x1fff8b7c
    2e20:	00019f38 	.word	0x00019f38
    2e24:	00019e4c 	.word	0x00019e4c
    2e28:	00019e88 	.word	0x00019e88
    2e2c:	00019e90 	.word	0x00019e90
    2e30:	00019eb8 	.word	0x00019eb8
    2e34:	00019ec4 	.word	0x00019ec4
    2e38:	00019efc 	.word	0x00019efc
    2e3c:	00019f48 	.word	0x00019f48
    2e40:	00019f74 	.word	0x00019f74
    2e44:	00019f70 	.word	0x00019f70

00002e48 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    2e48:	b500      	push	{lr}
    2e4a:	b085      	sub	sp, #20
    2e4c:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    2e4e:	9b01      	ldr	r3, [sp, #4]
    2e50:	7adb      	ldrb	r3, [r3, #11]
    2e52:	9303      	str	r3, [sp, #12]
    2e54:	e01f      	b.n	2e96 <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2e56:	9b03      	ldr	r3, [sp, #12]
    2e58:	1e5a      	subs	r2, r3, #1
    2e5a:	9b01      	ldr	r3, [sp, #4]
    2e5c:	320d      	adds	r2, #13
    2e5e:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2e62:	495a      	ldr	r1, [pc, #360]	; (2fcc <Clock_Ip_ResetClockConfiguration+0x184>)
    2e64:	4613      	mov	r3, r2
    2e66:	00db      	lsls	r3, r3, #3
    2e68:	4413      	add	r3, r2
    2e6a:	440b      	add	r3, r1
    2e6c:	3301      	adds	r3, #1
    2e6e:	781b      	ldrb	r3, [r3, #0]
    2e70:	461a      	mov	r2, r3
    2e72:	4b57      	ldr	r3, [pc, #348]	; (2fd0 <Clock_Ip_ResetClockConfiguration+0x188>)
    2e74:	5c9b      	ldrb	r3, [r3, r2]
    2e76:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    2e78:	4a56      	ldr	r2, [pc, #344]	; (2fd4 <Clock_Ip_ResetClockConfiguration+0x18c>)
    2e7a:	9b02      	ldr	r3, [sp, #8]
    2e7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2e80:	9a03      	ldr	r2, [sp, #12]
    2e82:	3a01      	subs	r2, #1
    2e84:	320d      	adds	r2, #13
    2e86:	00d2      	lsls	r2, r2, #3
    2e88:	9901      	ldr	r1, [sp, #4]
    2e8a:	440a      	add	r2, r1
    2e8c:	4610      	mov	r0, r2
    2e8e:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    2e90:	9b03      	ldr	r3, [sp, #12]
    2e92:	3b01      	subs	r3, #1
    2e94:	9303      	str	r3, [sp, #12]
    2e96:	9b03      	ldr	r3, [sp, #12]
    2e98:	2b00      	cmp	r3, #0
    2e9a:	d1dc      	bne.n	2e56 <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    2e9c:	9b01      	ldr	r3, [sp, #4]
    2e9e:	7b9b      	ldrb	r3, [r3, #14]
    2ea0:	9303      	str	r3, [sp, #12]
    2ea2:	e026      	b.n	2ef2 <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2ea4:	9b03      	ldr	r3, [sp, #12]
    2ea6:	3b01      	subs	r3, #1
    2ea8:	9a01      	ldr	r2, [sp, #4]
    2eaa:	3324      	adds	r3, #36	; 0x24
    2eac:	011b      	lsls	r3, r3, #4
    2eae:	4413      	add	r3, r2
    2eb0:	3304      	adds	r3, #4
    2eb2:	681a      	ldr	r2, [r3, #0]
    2eb4:	4945      	ldr	r1, [pc, #276]	; (2fcc <Clock_Ip_ResetClockConfiguration+0x184>)
    2eb6:	4613      	mov	r3, r2
    2eb8:	00db      	lsls	r3, r3, #3
    2eba:	4413      	add	r3, r2
    2ebc:	440b      	add	r3, r1
    2ebe:	3301      	adds	r3, #1
    2ec0:	781b      	ldrb	r3, [r3, #0]
    2ec2:	461a      	mov	r2, r3
    2ec4:	4b44      	ldr	r3, [pc, #272]	; (2fd8 <Clock_Ip_ResetClockConfiguration+0x190>)
    2ec6:	5c9b      	ldrb	r3, [r3, r2]
    2ec8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    2eca:	4944      	ldr	r1, [pc, #272]	; (2fdc <Clock_Ip_ResetClockConfiguration+0x194>)
    2ecc:	9a02      	ldr	r2, [sp, #8]
    2ece:	4613      	mov	r3, r2
    2ed0:	005b      	lsls	r3, r3, #1
    2ed2:	4413      	add	r3, r2
    2ed4:	009b      	lsls	r3, r3, #2
    2ed6:	440b      	add	r3, r1
    2ed8:	681b      	ldr	r3, [r3, #0]
    2eda:	9a03      	ldr	r2, [sp, #12]
    2edc:	3a01      	subs	r2, #1
    2ede:	3224      	adds	r2, #36	; 0x24
    2ee0:	0112      	lsls	r2, r2, #4
    2ee2:	9901      	ldr	r1, [sp, #4]
    2ee4:	440a      	add	r2, r1
    2ee6:	3204      	adds	r2, #4
    2ee8:	4610      	mov	r0, r2
    2eea:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    2eec:	9b03      	ldr	r3, [sp, #12]
    2eee:	3b01      	subs	r3, #1
    2ef0:	9303      	str	r3, [sp, #12]
    2ef2:	9b03      	ldr	r3, [sp, #12]
    2ef4:	2b00      	cmp	r3, #0
    2ef6:	d1d5      	bne.n	2ea4 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    2ef8:	9b01      	ldr	r3, [sp, #4]
    2efa:	7a9b      	ldrb	r3, [r3, #10]
    2efc:	9303      	str	r3, [sp, #12]
    2efe:	e02a      	b.n	2f56 <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2f00:	9b03      	ldr	r3, [sp, #12]
    2f02:	1e5a      	subs	r2, r3, #1
    2f04:	9901      	ldr	r1, [sp, #4]
    2f06:	4613      	mov	r3, r2
    2f08:	009b      	lsls	r3, r3, #2
    2f0a:	4413      	add	r3, r2
    2f0c:	00db      	lsls	r3, r3, #3
    2f0e:	440b      	add	r3, r1
    2f10:	3340      	adds	r3, #64	; 0x40
    2f12:	681a      	ldr	r2, [r3, #0]
    2f14:	492d      	ldr	r1, [pc, #180]	; (2fcc <Clock_Ip_ResetClockConfiguration+0x184>)
    2f16:	4613      	mov	r3, r2
    2f18:	00db      	lsls	r3, r3, #3
    2f1a:	4413      	add	r3, r2
    2f1c:	440b      	add	r3, r1
    2f1e:	3301      	adds	r3, #1
    2f20:	781b      	ldrb	r3, [r3, #0]
    2f22:	461a      	mov	r2, r3
    2f24:	4b2e      	ldr	r3, [pc, #184]	; (2fe0 <Clock_Ip_ResetClockConfiguration+0x198>)
    2f26:	5c9b      	ldrb	r3, [r3, r2]
    2f28:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    2f2a:	492e      	ldr	r1, [pc, #184]	; (2fe4 <Clock_Ip_ResetClockConfiguration+0x19c>)
    2f2c:	9a02      	ldr	r2, [sp, #8]
    2f2e:	4613      	mov	r3, r2
    2f30:	009b      	lsls	r3, r3, #2
    2f32:	4413      	add	r3, r2
    2f34:	009b      	lsls	r3, r3, #2
    2f36:	440b      	add	r3, r1
    2f38:	6819      	ldr	r1, [r3, #0]
    2f3a:	9b03      	ldr	r3, [sp, #12]
    2f3c:	1e5a      	subs	r2, r3, #1
    2f3e:	4613      	mov	r3, r2
    2f40:	009b      	lsls	r3, r3, #2
    2f42:	4413      	add	r3, r2
    2f44:	00db      	lsls	r3, r3, #3
    2f46:	3340      	adds	r3, #64	; 0x40
    2f48:	9a01      	ldr	r2, [sp, #4]
    2f4a:	4413      	add	r3, r2
    2f4c:	4618      	mov	r0, r3
    2f4e:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    2f50:	9b03      	ldr	r3, [sp, #12]
    2f52:	3b01      	subs	r3, #1
    2f54:	9303      	str	r3, [sp, #12]
    2f56:	9b03      	ldr	r3, [sp, #12]
    2f58:	2b00      	cmp	r3, #0
    2f5a:	d1d1      	bne.n	2f00 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    2f5c:	9b01      	ldr	r3, [sp, #4]
    2f5e:	7a5b      	ldrb	r3, [r3, #9]
    2f60:	9303      	str	r3, [sp, #12]
    2f62:	e02b      	b.n	2fbc <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2f64:	9b03      	ldr	r3, [sp, #12]
    2f66:	1e5a      	subs	r2, r3, #1
    2f68:	9901      	ldr	r1, [sp, #4]
    2f6a:	4613      	mov	r3, r2
    2f6c:	009b      	lsls	r3, r3, #2
    2f6e:	4413      	add	r3, r2
    2f70:	009b      	lsls	r3, r3, #2
    2f72:	440b      	add	r3, r1
    2f74:	332c      	adds	r3, #44	; 0x2c
    2f76:	681a      	ldr	r2, [r3, #0]
    2f78:	4914      	ldr	r1, [pc, #80]	; (2fcc <Clock_Ip_ResetClockConfiguration+0x184>)
    2f7a:	4613      	mov	r3, r2
    2f7c:	00db      	lsls	r3, r3, #3
    2f7e:	4413      	add	r3, r2
    2f80:	440b      	add	r3, r1
    2f82:	3301      	adds	r3, #1
    2f84:	781b      	ldrb	r3, [r3, #0]
    2f86:	461a      	mov	r2, r3
    2f88:	4b17      	ldr	r3, [pc, #92]	; (2fe8 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    2f8a:	5c9b      	ldrb	r3, [r3, r2]
    2f8c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    2f8e:	4917      	ldr	r1, [pc, #92]	; (2fec <Clock_Ip_ResetClockConfiguration+0x1a4>)
    2f90:	9a02      	ldr	r2, [sp, #8]
    2f92:	4613      	mov	r3, r2
    2f94:	009b      	lsls	r3, r3, #2
    2f96:	4413      	add	r3, r2
    2f98:	009b      	lsls	r3, r3, #2
    2f9a:	440b      	add	r3, r1
    2f9c:	6819      	ldr	r1, [r3, #0]
    2f9e:	9b03      	ldr	r3, [sp, #12]
    2fa0:	1e5a      	subs	r2, r3, #1
    2fa2:	4613      	mov	r3, r2
    2fa4:	009b      	lsls	r3, r3, #2
    2fa6:	4413      	add	r3, r2
    2fa8:	009b      	lsls	r3, r3, #2
    2faa:	3328      	adds	r3, #40	; 0x28
    2fac:	9a01      	ldr	r2, [sp, #4]
    2fae:	4413      	add	r3, r2
    2fb0:	3304      	adds	r3, #4
    2fb2:	4618      	mov	r0, r3
    2fb4:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    2fb6:	9b03      	ldr	r3, [sp, #12]
    2fb8:	3b01      	subs	r3, #1
    2fba:	9303      	str	r3, [sp, #12]
    2fbc:	9b03      	ldr	r3, [sp, #12]
    2fbe:	2b00      	cmp	r3, #0
    2fc0:	d1d0      	bne.n	2f64 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    2fc2:	bf00      	nop
    2fc4:	bf00      	nop
    2fc6:	b005      	add	sp, #20
    2fc8:	f85d fb04 	ldr.w	pc, [sp], #4
    2fcc:	0001993c 	.word	0x0001993c
    2fd0:	0001990c 	.word	0x0001990c
    2fd4:	00019f74 	.word	0x00019f74
    2fd8:	000198ec 	.word	0x000198ec
    2fdc:	00019eb8 	.word	0x00019eb8
    2fe0:	000198fc 	.word	0x000198fc
    2fe4:	00019f48 	.word	0x00019f48
    2fe8:	000198bc 	.word	0x000198bc
    2fec:	00019e90 	.word	0x00019e90

00002ff0 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    2ff0:	b500      	push	{lr}
    2ff2:	b085      	sub	sp, #20
    2ff4:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    2ff6:	2301      	movs	r3, #1
    2ff8:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    2ffa:	9801      	ldr	r0, [sp, #4]
    2ffc:	f000 f818 	bl	3030 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    3000:	4b0a      	ldr	r3, [pc, #40]	; (302c <Clock_Ip_Init+0x3c>)
    3002:	781b      	ldrb	r3, [r3, #0]
    3004:	2b00      	cmp	r3, #0
    3006:	d00a      	beq.n	301e <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    3008:	f000 fb74 	bl	36f4 <Clock_Ip_GetPllStatus>
    300c:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    300e:	9b02      	ldr	r3, [sp, #8]
    3010:	2b00      	cmp	r3, #0
    3012:	d106      	bne.n	3022 <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    3014:	f000 fbf2 	bl	37fc <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    3018:	2300      	movs	r3, #0
    301a:	9303      	str	r3, [sp, #12]
    301c:	e001      	b.n	3022 <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    301e:	2300      	movs	r3, #0
    3020:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    3022:	9b03      	ldr	r3, [sp, #12]
}
    3024:	4618      	mov	r0, r3
    3026:	b005      	add	sp, #20
    3028:	f85d fb04 	ldr.w	pc, [sp], #4
    302c:	1fff8b80 	.word	0x1fff8b80

00003030 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    3030:	b510      	push	{r4, lr}
    3032:	b084      	sub	sp, #16
    3034:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    3036:	4a9f      	ldr	r2, [pc, #636]	; (32b4 <Clock_Ip_InitClock+0x284>)
    3038:	9b01      	ldr	r3, [sp, #4]
    303a:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    303c:	2101      	movs	r1, #1
    303e:	9801      	ldr	r0, [sp, #4]
    3040:	f003 fa90 	bl	6564 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    3044:	4b9b      	ldr	r3, [pc, #620]	; (32b4 <Clock_Ip_InitClock+0x284>)
    3046:	681b      	ldr	r3, [r3, #0]
    3048:	2b00      	cmp	r3, #0
    304a:	d030      	beq.n	30ae <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    304c:	2300      	movs	r3, #0
    304e:	9303      	str	r3, [sp, #12]
    3050:	e027      	b.n	30a2 <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    3052:	9901      	ldr	r1, [sp, #4]
    3054:	9a03      	ldr	r2, [sp, #12]
    3056:	4613      	mov	r3, r2
    3058:	009b      	lsls	r3, r3, #2
    305a:	4413      	add	r3, r2
    305c:	009b      	lsls	r3, r3, #2
    305e:	440b      	add	r3, r1
    3060:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    3064:	681a      	ldr	r2, [r3, #0]
    3066:	4994      	ldr	r1, [pc, #592]	; (32b8 <Clock_Ip_InitClock+0x288>)
    3068:	4613      	mov	r3, r2
    306a:	00db      	lsls	r3, r3, #3
    306c:	4413      	add	r3, r2
    306e:	440b      	add	r3, r1
    3070:	3301      	adds	r3, #1
    3072:	781b      	ldrb	r3, [r3, #0]
    3074:	461a      	mov	r2, r3
    3076:	4b91      	ldr	r3, [pc, #580]	; (32bc <Clock_Ip_InitClock+0x28c>)
    3078:	5c9b      	ldrb	r3, [r3, r2]
    307a:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    307c:	4a90      	ldr	r2, [pc, #576]	; (32c0 <Clock_Ip_InitClock+0x290>)
    307e:	9b02      	ldr	r3, [sp, #8]
    3080:	011b      	lsls	r3, r3, #4
    3082:	4413      	add	r3, r2
    3084:	6819      	ldr	r1, [r3, #0]
    3086:	9a03      	ldr	r2, [sp, #12]
    3088:	4613      	mov	r3, r2
    308a:	009b      	lsls	r3, r3, #2
    308c:	4413      	add	r3, r2
    308e:	009b      	lsls	r3, r3, #2
    3090:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    3094:	9a01      	ldr	r2, [sp, #4]
    3096:	4413      	add	r3, r2
    3098:	4618      	mov	r0, r3
    309a:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    309c:	9b03      	ldr	r3, [sp, #12]
    309e:	3301      	adds	r3, #1
    30a0:	9303      	str	r3, [sp, #12]
    30a2:	9b01      	ldr	r3, [sp, #4]
    30a4:	7c9b      	ldrb	r3, [r3, #18]
    30a6:	461a      	mov	r2, r3
    30a8:	9b03      	ldr	r3, [sp, #12]
    30aa:	4293      	cmp	r3, r2
    30ac:	d3d1      	bcc.n	3052 <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    30ae:	9801      	ldr	r0, [sp, #4]
    30b0:	f7ff feca 	bl	2e48 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    30b4:	2300      	movs	r3, #0
    30b6:	9303      	str	r3, [sp, #12]
    30b8:	e029      	b.n	310e <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    30ba:	9901      	ldr	r1, [sp, #4]
    30bc:	9a03      	ldr	r2, [sp, #12]
    30be:	4613      	mov	r3, r2
    30c0:	005b      	lsls	r3, r3, #1
    30c2:	4413      	add	r3, r2
    30c4:	009b      	lsls	r3, r3, #2
    30c6:	440b      	add	r3, r1
    30c8:	3314      	adds	r3, #20
    30ca:	681a      	ldr	r2, [r3, #0]
    30cc:	497a      	ldr	r1, [pc, #488]	; (32b8 <Clock_Ip_InitClock+0x288>)
    30ce:	4613      	mov	r3, r2
    30d0:	00db      	lsls	r3, r3, #3
    30d2:	4413      	add	r3, r2
    30d4:	440b      	add	r3, r1
    30d6:	3301      	adds	r3, #1
    30d8:	781b      	ldrb	r3, [r3, #0]
    30da:	461a      	mov	r2, r3
    30dc:	4b79      	ldr	r3, [pc, #484]	; (32c4 <Clock_Ip_InitClock+0x294>)
    30de:	5c9b      	ldrb	r3, [r3, r2]
    30e0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    30e2:	4979      	ldr	r1, [pc, #484]	; (32c8 <Clock_Ip_InitClock+0x298>)
    30e4:	9a02      	ldr	r2, [sp, #8]
    30e6:	4613      	mov	r3, r2
    30e8:	005b      	lsls	r3, r3, #1
    30ea:	4413      	add	r3, r2
    30ec:	009b      	lsls	r3, r3, #2
    30ee:	440b      	add	r3, r1
    30f0:	6819      	ldr	r1, [r3, #0]
    30f2:	9a03      	ldr	r2, [sp, #12]
    30f4:	4613      	mov	r3, r2
    30f6:	005b      	lsls	r3, r3, #1
    30f8:	4413      	add	r3, r2
    30fa:	009b      	lsls	r3, r3, #2
    30fc:	3310      	adds	r3, #16
    30fe:	9a01      	ldr	r2, [sp, #4]
    3100:	4413      	add	r3, r2
    3102:	3304      	adds	r3, #4
    3104:	4618      	mov	r0, r3
    3106:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    3108:	9b03      	ldr	r3, [sp, #12]
    310a:	3301      	adds	r3, #1
    310c:	9303      	str	r3, [sp, #12]
    310e:	9b01      	ldr	r3, [sp, #4]
    3110:	7a1b      	ldrb	r3, [r3, #8]
    3112:	461a      	mov	r2, r3
    3114:	9b03      	ldr	r3, [sp, #12]
    3116:	4293      	cmp	r3, r2
    3118:	d3cf      	bcc.n	30ba <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    311a:	2300      	movs	r3, #0
    311c:	9303      	str	r3, [sp, #12]
    311e:	e02a      	b.n	3176 <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    3120:	9901      	ldr	r1, [sp, #4]
    3122:	9a03      	ldr	r2, [sp, #12]
    3124:	4613      	mov	r3, r2
    3126:	009b      	lsls	r3, r3, #2
    3128:	4413      	add	r3, r2
    312a:	009b      	lsls	r3, r3, #2
    312c:	440b      	add	r3, r1
    312e:	332c      	adds	r3, #44	; 0x2c
    3130:	681a      	ldr	r2, [r3, #0]
    3132:	4961      	ldr	r1, [pc, #388]	; (32b8 <Clock_Ip_InitClock+0x288>)
    3134:	4613      	mov	r3, r2
    3136:	00db      	lsls	r3, r3, #3
    3138:	4413      	add	r3, r2
    313a:	440b      	add	r3, r1
    313c:	3301      	adds	r3, #1
    313e:	781b      	ldrb	r3, [r3, #0]
    3140:	461a      	mov	r2, r3
    3142:	4b62      	ldr	r3, [pc, #392]	; (32cc <Clock_Ip_InitClock+0x29c>)
    3144:	5c9b      	ldrb	r3, [r3, r2]
    3146:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    3148:	4961      	ldr	r1, [pc, #388]	; (32d0 <Clock_Ip_InitClock+0x2a0>)
    314a:	9a02      	ldr	r2, [sp, #8]
    314c:	4613      	mov	r3, r2
    314e:	009b      	lsls	r3, r3, #2
    3150:	4413      	add	r3, r2
    3152:	009b      	lsls	r3, r3, #2
    3154:	440b      	add	r3, r1
    3156:	3304      	adds	r3, #4
    3158:	6819      	ldr	r1, [r3, #0]
    315a:	9a03      	ldr	r2, [sp, #12]
    315c:	4613      	mov	r3, r2
    315e:	009b      	lsls	r3, r3, #2
    3160:	4413      	add	r3, r2
    3162:	009b      	lsls	r3, r3, #2
    3164:	3328      	adds	r3, #40	; 0x28
    3166:	9a01      	ldr	r2, [sp, #4]
    3168:	4413      	add	r3, r2
    316a:	3304      	adds	r3, #4
    316c:	4618      	mov	r0, r3
    316e:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    3170:	9b03      	ldr	r3, [sp, #12]
    3172:	3301      	adds	r3, #1
    3174:	9303      	str	r3, [sp, #12]
    3176:	9b01      	ldr	r3, [sp, #4]
    3178:	7a5b      	ldrb	r3, [r3, #9]
    317a:	461a      	mov	r2, r3
    317c:	9b03      	ldr	r3, [sp, #12]
    317e:	4293      	cmp	r3, r2
    3180:	d3ce      	bcc.n	3120 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    3182:	9801      	ldr	r0, [sp, #4]
    3184:	f7ff fdb0 	bl	2ce8 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    3188:	2300      	movs	r3, #0
    318a:	9303      	str	r3, [sp, #12]
    318c:	e028      	b.n	31e0 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    318e:	9901      	ldr	r1, [sp, #4]
    3190:	9a03      	ldr	r2, [sp, #12]
    3192:	4613      	mov	r3, r2
    3194:	009b      	lsls	r3, r3, #2
    3196:	4413      	add	r3, r2
    3198:	009b      	lsls	r3, r3, #2
    319a:	440b      	add	r3, r1
    319c:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    31a0:	681a      	ldr	r2, [r3, #0]
    31a2:	4945      	ldr	r1, [pc, #276]	; (32b8 <Clock_Ip_InitClock+0x288>)
    31a4:	4613      	mov	r3, r2
    31a6:	00db      	lsls	r3, r3, #3
    31a8:	4413      	add	r3, r2
    31aa:	440b      	add	r3, r1
    31ac:	3301      	adds	r3, #1
    31ae:	781b      	ldrb	r3, [r3, #0]
    31b0:	461a      	mov	r2, r3
    31b2:	4b48      	ldr	r3, [pc, #288]	; (32d4 <Clock_Ip_InitClock+0x2a4>)
    31b4:	5c9b      	ldrb	r3, [r3, r2]
    31b6:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    31b8:	4a47      	ldr	r2, [pc, #284]	; (32d8 <Clock_Ip_InitClock+0x2a8>)
    31ba:	9b02      	ldr	r3, [sp, #8]
    31bc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    31c0:	9a03      	ldr	r2, [sp, #12]
    31c2:	4613      	mov	r3, r2
    31c4:	009b      	lsls	r3, r3, #2
    31c6:	4413      	add	r3, r2
    31c8:	009b      	lsls	r3, r3, #2
    31ca:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    31ce:	9a01      	ldr	r2, [sp, #4]
    31d0:	4413      	add	r3, r2
    31d2:	3304      	adds	r3, #4
    31d4:	9903      	ldr	r1, [sp, #12]
    31d6:	4618      	mov	r0, r3
    31d8:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    31da:	9b03      	ldr	r3, [sp, #12]
    31dc:	3301      	adds	r3, #1
    31de:	9303      	str	r3, [sp, #12]
    31e0:	9b01      	ldr	r3, [sp, #4]
    31e2:	7c5b      	ldrb	r3, [r3, #17]
    31e4:	461a      	mov	r2, r3
    31e6:	9b03      	ldr	r3, [sp, #12]
    31e8:	4293      	cmp	r3, r2
    31ea:	d3d0      	bcc.n	318e <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    31ec:	2300      	movs	r3, #0
    31ee:	9303      	str	r3, [sp, #12]
    31f0:	e026      	b.n	3240 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    31f2:	9901      	ldr	r1, [sp, #4]
    31f4:	9a03      	ldr	r2, [sp, #12]
    31f6:	4613      	mov	r3, r2
    31f8:	005b      	lsls	r3, r3, #1
    31fa:	4413      	add	r3, r2
    31fc:	009b      	lsls	r3, r3, #2
    31fe:	440b      	add	r3, r1
    3200:	f503 730e 	add.w	r3, r3, #568	; 0x238
    3204:	681a      	ldr	r2, [r3, #0]
    3206:	492c      	ldr	r1, [pc, #176]	; (32b8 <Clock_Ip_InitClock+0x288>)
    3208:	4613      	mov	r3, r2
    320a:	00db      	lsls	r3, r3, #3
    320c:	4413      	add	r3, r2
    320e:	440b      	add	r3, r1
    3210:	3301      	adds	r3, #1
    3212:	781b      	ldrb	r3, [r3, #0]
    3214:	461a      	mov	r2, r3
    3216:	4b31      	ldr	r3, [pc, #196]	; (32dc <Clock_Ip_InitClock+0x2ac>)
    3218:	5c9b      	ldrb	r3, [r3, r2]
    321a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    321c:	4a30      	ldr	r2, [pc, #192]	; (32e0 <Clock_Ip_InitClock+0x2b0>)
    321e:	9b02      	ldr	r3, [sp, #8]
    3220:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    3224:	9a03      	ldr	r2, [sp, #12]
    3226:	4613      	mov	r3, r2
    3228:	005b      	lsls	r3, r3, #1
    322a:	4413      	add	r3, r2
    322c:	009b      	lsls	r3, r3, #2
    322e:	f503 730e 	add.w	r3, r3, #568	; 0x238
    3232:	9a01      	ldr	r2, [sp, #4]
    3234:	4413      	add	r3, r2
    3236:	4618      	mov	r0, r3
    3238:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    323a:	9b03      	ldr	r3, [sp, #12]
    323c:	3301      	adds	r3, #1
    323e:	9303      	str	r3, [sp, #12]
    3240:	9b01      	ldr	r3, [sp, #4]
    3242:	7b5b      	ldrb	r3, [r3, #13]
    3244:	461a      	mov	r2, r3
    3246:	9b03      	ldr	r3, [sp, #12]
    3248:	4293      	cmp	r3, r2
    324a:	d3d2      	bcc.n	31f2 <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    324c:	2300      	movs	r3, #0
    324e:	9303      	str	r3, [sp, #12]
    3250:	e026      	b.n	32a0 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    3252:	9901      	ldr	r1, [sp, #4]
    3254:	9a03      	ldr	r2, [sp, #12]
    3256:	4613      	mov	r3, r2
    3258:	005b      	lsls	r3, r3, #1
    325a:	4413      	add	r3, r2
    325c:	009b      	lsls	r3, r3, #2
    325e:	440b      	add	r3, r1
    3260:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    3264:	681a      	ldr	r2, [r3, #0]
    3266:	4914      	ldr	r1, [pc, #80]	; (32b8 <Clock_Ip_InitClock+0x288>)
    3268:	4613      	mov	r3, r2
    326a:	00db      	lsls	r3, r3, #3
    326c:	4413      	add	r3, r2
    326e:	440b      	add	r3, r1
    3270:	3301      	adds	r3, #1
    3272:	781b      	ldrb	r3, [r3, #0]
    3274:	461a      	mov	r2, r3
    3276:	4b1b      	ldr	r3, [pc, #108]	; (32e4 <Clock_Ip_InitClock+0x2b4>)
    3278:	5c9b      	ldrb	r3, [r3, r2]
    327a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    327c:	4a1a      	ldr	r2, [pc, #104]	; (32e8 <Clock_Ip_InitClock+0x2b8>)
    327e:	9b02      	ldr	r3, [sp, #8]
    3280:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    3284:	9a03      	ldr	r2, [sp, #12]
    3286:	4613      	mov	r3, r2
    3288:	005b      	lsls	r3, r3, #1
    328a:	4413      	add	r3, r2
    328c:	009b      	lsls	r3, r3, #2
    328e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    3292:	9a01      	ldr	r2, [sp, #4]
    3294:	4413      	add	r3, r2
    3296:	4618      	mov	r0, r3
    3298:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    329a:	9b03      	ldr	r3, [sp, #12]
    329c:	3301      	adds	r3, #1
    329e:	9303      	str	r3, [sp, #12]
    32a0:	9b01      	ldr	r3, [sp, #4]
    32a2:	7b1b      	ldrb	r3, [r3, #12]
    32a4:	461a      	mov	r2, r3
    32a6:	9b03      	ldr	r3, [sp, #12]
    32a8:	4293      	cmp	r3, r2
    32aa:	d3d2      	bcc.n	3252 <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    32ac:	2300      	movs	r3, #0
    32ae:	9303      	str	r3, [sp, #12]
    32b0:	e044      	b.n	333c <Clock_Ip_InitClock+0x30c>
    32b2:	bf00      	nop
    32b4:	1fff8b78 	.word	0x1fff8b78
    32b8:	0001993c 	.word	0x0001993c
    32bc:	0001992c 	.word	0x0001992c
    32c0:	00019f38 	.word	0x00019f38
    32c4:	000198cc 	.word	0x000198cc
    32c8:	00019efc 	.word	0x00019efc
    32cc:	000198bc 	.word	0x000198bc
    32d0:	00019e90 	.word	0x00019e90
    32d4:	0001991c 	.word	0x0001991c
    32d8:	00019f70 	.word	0x00019f70
    32dc:	000198ac 	.word	0x000198ac
    32e0:	00019e88 	.word	0x00019e88
    32e4:	0001989c 	.word	0x0001989c
    32e8:	00019e4c 	.word	0x00019e4c
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    32ec:	9901      	ldr	r1, [sp, #4]
    32ee:	9a03      	ldr	r2, [sp, #12]
    32f0:	4613      	mov	r3, r2
    32f2:	005b      	lsls	r3, r3, #1
    32f4:	4413      	add	r3, r2
    32f6:	009b      	lsls	r3, r3, #2
    32f8:	440b      	add	r3, r1
    32fa:	f503 730e 	add.w	r3, r3, #568	; 0x238
    32fe:	681a      	ldr	r2, [r3, #0]
    3300:	49ac      	ldr	r1, [pc, #688]	; (35b4 <Clock_Ip_InitClock+0x584>)
    3302:	4613      	mov	r3, r2
    3304:	00db      	lsls	r3, r3, #3
    3306:	4413      	add	r3, r2
    3308:	440b      	add	r3, r1
    330a:	3301      	adds	r3, #1
    330c:	781b      	ldrb	r3, [r3, #0]
    330e:	461a      	mov	r2, r3
    3310:	4ba9      	ldr	r3, [pc, #676]	; (35b8 <Clock_Ip_InitClock+0x588>)
    3312:	5c9b      	ldrb	r3, [r3, r2]
    3314:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    3316:	4aa9      	ldr	r2, [pc, #676]	; (35bc <Clock_Ip_InitClock+0x58c>)
    3318:	9b02      	ldr	r3, [sp, #8]
    331a:	00db      	lsls	r3, r3, #3
    331c:	4413      	add	r3, r2
    331e:	6859      	ldr	r1, [r3, #4]
    3320:	9a03      	ldr	r2, [sp, #12]
    3322:	4613      	mov	r3, r2
    3324:	005b      	lsls	r3, r3, #1
    3326:	4413      	add	r3, r2
    3328:	009b      	lsls	r3, r3, #2
    332a:	f503 730e 	add.w	r3, r3, #568	; 0x238
    332e:	9a01      	ldr	r2, [sp, #4]
    3330:	4413      	add	r3, r2
    3332:	4618      	mov	r0, r3
    3334:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    3336:	9b03      	ldr	r3, [sp, #12]
    3338:	3301      	adds	r3, #1
    333a:	9303      	str	r3, [sp, #12]
    333c:	9b01      	ldr	r3, [sp, #4]
    333e:	7b5b      	ldrb	r3, [r3, #13]
    3340:	461a      	mov	r2, r3
    3342:	9b03      	ldr	r3, [sp, #12]
    3344:	4293      	cmp	r3, r2
    3346:	d3d1      	bcc.n	32ec <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    3348:	2300      	movs	r3, #0
    334a:	9303      	str	r3, [sp, #12]
    334c:	e029      	b.n	33a2 <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    334e:	9901      	ldr	r1, [sp, #4]
    3350:	9a03      	ldr	r2, [sp, #12]
    3352:	4613      	mov	r3, r2
    3354:	009b      	lsls	r3, r3, #2
    3356:	4413      	add	r3, r2
    3358:	00db      	lsls	r3, r3, #3
    335a:	440b      	add	r3, r1
    335c:	3340      	adds	r3, #64	; 0x40
    335e:	681a      	ldr	r2, [r3, #0]
    3360:	4994      	ldr	r1, [pc, #592]	; (35b4 <Clock_Ip_InitClock+0x584>)
    3362:	4613      	mov	r3, r2
    3364:	00db      	lsls	r3, r3, #3
    3366:	4413      	add	r3, r2
    3368:	440b      	add	r3, r1
    336a:	3301      	adds	r3, #1
    336c:	781b      	ldrb	r3, [r3, #0]
    336e:	461a      	mov	r2, r3
    3370:	4b93      	ldr	r3, [pc, #588]	; (35c0 <Clock_Ip_InitClock+0x590>)
    3372:	5c9b      	ldrb	r3, [r3, r2]
    3374:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    3376:	4993      	ldr	r1, [pc, #588]	; (35c4 <Clock_Ip_InitClock+0x594>)
    3378:	9a02      	ldr	r2, [sp, #8]
    337a:	4613      	mov	r3, r2
    337c:	009b      	lsls	r3, r3, #2
    337e:	4413      	add	r3, r2
    3380:	009b      	lsls	r3, r3, #2
    3382:	440b      	add	r3, r1
    3384:	3304      	adds	r3, #4
    3386:	6819      	ldr	r1, [r3, #0]
    3388:	9a03      	ldr	r2, [sp, #12]
    338a:	4613      	mov	r3, r2
    338c:	009b      	lsls	r3, r3, #2
    338e:	4413      	add	r3, r2
    3390:	00db      	lsls	r3, r3, #3
    3392:	3340      	adds	r3, #64	; 0x40
    3394:	9a01      	ldr	r2, [sp, #4]
    3396:	4413      	add	r3, r2
    3398:	4618      	mov	r0, r3
    339a:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    339c:	9b03      	ldr	r3, [sp, #12]
    339e:	3301      	adds	r3, #1
    33a0:	9303      	str	r3, [sp, #12]
    33a2:	9b01      	ldr	r3, [sp, #4]
    33a4:	7a9b      	ldrb	r3, [r3, #10]
    33a6:	461a      	mov	r2, r3
    33a8:	9b03      	ldr	r3, [sp, #12]
    33aa:	4293      	cmp	r3, r2
    33ac:	d3cf      	bcc.n	334e <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    33ae:	2300      	movs	r3, #0
    33b0:	9303      	str	r3, [sp, #12]
    33b2:	e029      	b.n	3408 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    33b4:	9901      	ldr	r1, [sp, #4]
    33b6:	9a03      	ldr	r2, [sp, #12]
    33b8:	4613      	mov	r3, r2
    33ba:	009b      	lsls	r3, r3, #2
    33bc:	4413      	add	r3, r2
    33be:	009b      	lsls	r3, r3, #2
    33c0:	440b      	add	r3, r1
    33c2:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    33c6:	681a      	ldr	r2, [r3, #0]
    33c8:	497a      	ldr	r1, [pc, #488]	; (35b4 <Clock_Ip_InitClock+0x584>)
    33ca:	4613      	mov	r3, r2
    33cc:	00db      	lsls	r3, r3, #3
    33ce:	4413      	add	r3, r2
    33d0:	440b      	add	r3, r1
    33d2:	3301      	adds	r3, #1
    33d4:	781b      	ldrb	r3, [r3, #0]
    33d6:	461a      	mov	r2, r3
    33d8:	4b7b      	ldr	r3, [pc, #492]	; (35c8 <Clock_Ip_InitClock+0x598>)
    33da:	5c9b      	ldrb	r3, [r3, r2]
    33dc:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    33de:	4a7b      	ldr	r2, [pc, #492]	; (35cc <Clock_Ip_InitClock+0x59c>)
    33e0:	9b02      	ldr	r3, [sp, #8]
    33e2:	011b      	lsls	r3, r3, #4
    33e4:	4413      	add	r3, r2
    33e6:	3304      	adds	r3, #4
    33e8:	681c      	ldr	r4, [r3, #0]
    33ea:	9a03      	ldr	r2, [sp, #12]
    33ec:	4613      	mov	r3, r2
    33ee:	009b      	lsls	r3, r3, #2
    33f0:	4413      	add	r3, r2
    33f2:	009b      	lsls	r3, r3, #2
    33f4:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    33f8:	9a01      	ldr	r2, [sp, #4]
    33fa:	4413      	add	r3, r2
    33fc:	9903      	ldr	r1, [sp, #12]
    33fe:	4618      	mov	r0, r3
    3400:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    3402:	9b03      	ldr	r3, [sp, #12]
    3404:	3301      	adds	r3, #1
    3406:	9303      	str	r3, [sp, #12]
    3408:	9b01      	ldr	r3, [sp, #4]
    340a:	7c9b      	ldrb	r3, [r3, #18]
    340c:	461a      	mov	r2, r3
    340e:	9b03      	ldr	r3, [sp, #12]
    3410:	4293      	cmp	r3, r2
    3412:	d3cf      	bcc.n	33b4 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    3414:	2300      	movs	r3, #0
    3416:	9303      	str	r3, [sp, #12]
    3418:	e02a      	b.n	3470 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    341a:	9901      	ldr	r1, [sp, #4]
    341c:	9a03      	ldr	r2, [sp, #12]
    341e:	4613      	mov	r3, r2
    3420:	009b      	lsls	r3, r3, #2
    3422:	4413      	add	r3, r2
    3424:	009b      	lsls	r3, r3, #2
    3426:	440b      	add	r3, r1
    3428:	332c      	adds	r3, #44	; 0x2c
    342a:	681a      	ldr	r2, [r3, #0]
    342c:	4961      	ldr	r1, [pc, #388]	; (35b4 <Clock_Ip_InitClock+0x584>)
    342e:	4613      	mov	r3, r2
    3430:	00db      	lsls	r3, r3, #3
    3432:	4413      	add	r3, r2
    3434:	440b      	add	r3, r1
    3436:	3301      	adds	r3, #1
    3438:	781b      	ldrb	r3, [r3, #0]
    343a:	461a      	mov	r2, r3
    343c:	4b64      	ldr	r3, [pc, #400]	; (35d0 <Clock_Ip_InitClock+0x5a0>)
    343e:	5c9b      	ldrb	r3, [r3, r2]
    3440:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    3442:	4964      	ldr	r1, [pc, #400]	; (35d4 <Clock_Ip_InitClock+0x5a4>)
    3444:	9a02      	ldr	r2, [sp, #8]
    3446:	4613      	mov	r3, r2
    3448:	009b      	lsls	r3, r3, #2
    344a:	4413      	add	r3, r2
    344c:	009b      	lsls	r3, r3, #2
    344e:	440b      	add	r3, r1
    3450:	3308      	adds	r3, #8
    3452:	6819      	ldr	r1, [r3, #0]
    3454:	9a03      	ldr	r2, [sp, #12]
    3456:	4613      	mov	r3, r2
    3458:	009b      	lsls	r3, r3, #2
    345a:	4413      	add	r3, r2
    345c:	009b      	lsls	r3, r3, #2
    345e:	3328      	adds	r3, #40	; 0x28
    3460:	9a01      	ldr	r2, [sp, #4]
    3462:	4413      	add	r3, r2
    3464:	3304      	adds	r3, #4
    3466:	4618      	mov	r0, r3
    3468:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    346a:	9b03      	ldr	r3, [sp, #12]
    346c:	3301      	adds	r3, #1
    346e:	9303      	str	r3, [sp, #12]
    3470:	9b01      	ldr	r3, [sp, #4]
    3472:	7a5b      	ldrb	r3, [r3, #9]
    3474:	461a      	mov	r2, r3
    3476:	9b03      	ldr	r3, [sp, #12]
    3478:	4293      	cmp	r3, r2
    347a:	d3ce      	bcc.n	341a <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    347c:	2300      	movs	r3, #0
    347e:	9303      	str	r3, [sp, #12]
    3480:	e029      	b.n	34d6 <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    3482:	9901      	ldr	r1, [sp, #4]
    3484:	9a03      	ldr	r2, [sp, #12]
    3486:	4613      	mov	r3, r2
    3488:	009b      	lsls	r3, r3, #2
    348a:	4413      	add	r3, r2
    348c:	00db      	lsls	r3, r3, #3
    348e:	440b      	add	r3, r1
    3490:	3340      	adds	r3, #64	; 0x40
    3492:	681a      	ldr	r2, [r3, #0]
    3494:	4947      	ldr	r1, [pc, #284]	; (35b4 <Clock_Ip_InitClock+0x584>)
    3496:	4613      	mov	r3, r2
    3498:	00db      	lsls	r3, r3, #3
    349a:	4413      	add	r3, r2
    349c:	440b      	add	r3, r1
    349e:	3301      	adds	r3, #1
    34a0:	781b      	ldrb	r3, [r3, #0]
    34a2:	461a      	mov	r2, r3
    34a4:	4b46      	ldr	r3, [pc, #280]	; (35c0 <Clock_Ip_InitClock+0x590>)
    34a6:	5c9b      	ldrb	r3, [r3, r2]
    34a8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    34aa:	4946      	ldr	r1, [pc, #280]	; (35c4 <Clock_Ip_InitClock+0x594>)
    34ac:	9a02      	ldr	r2, [sp, #8]
    34ae:	4613      	mov	r3, r2
    34b0:	009b      	lsls	r3, r3, #2
    34b2:	4413      	add	r3, r2
    34b4:	009b      	lsls	r3, r3, #2
    34b6:	440b      	add	r3, r1
    34b8:	330c      	adds	r3, #12
    34ba:	6819      	ldr	r1, [r3, #0]
    34bc:	9a03      	ldr	r2, [sp, #12]
    34be:	4613      	mov	r3, r2
    34c0:	009b      	lsls	r3, r3, #2
    34c2:	4413      	add	r3, r2
    34c4:	00db      	lsls	r3, r3, #3
    34c6:	3340      	adds	r3, #64	; 0x40
    34c8:	9a01      	ldr	r2, [sp, #4]
    34ca:	4413      	add	r3, r2
    34cc:	4618      	mov	r0, r3
    34ce:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    34d0:	9b03      	ldr	r3, [sp, #12]
    34d2:	3301      	adds	r3, #1
    34d4:	9303      	str	r3, [sp, #12]
    34d6:	9b01      	ldr	r3, [sp, #4]
    34d8:	7a9b      	ldrb	r3, [r3, #10]
    34da:	461a      	mov	r2, r3
    34dc:	9b03      	ldr	r3, [sp, #12]
    34de:	4293      	cmp	r3, r2
    34e0:	d3cf      	bcc.n	3482 <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    34e2:	2300      	movs	r3, #0
    34e4:	9303      	str	r3, [sp, #12]
    34e6:	e025      	b.n	3534 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    34e8:	9a01      	ldr	r2, [sp, #4]
    34ea:	9b03      	ldr	r3, [sp, #12]
    34ec:	3324      	adds	r3, #36	; 0x24
    34ee:	011b      	lsls	r3, r3, #4
    34f0:	4413      	add	r3, r2
    34f2:	3304      	adds	r3, #4
    34f4:	681a      	ldr	r2, [r3, #0]
    34f6:	492f      	ldr	r1, [pc, #188]	; (35b4 <Clock_Ip_InitClock+0x584>)
    34f8:	4613      	mov	r3, r2
    34fa:	00db      	lsls	r3, r3, #3
    34fc:	4413      	add	r3, r2
    34fe:	440b      	add	r3, r1
    3500:	3301      	adds	r3, #1
    3502:	781b      	ldrb	r3, [r3, #0]
    3504:	461a      	mov	r2, r3
    3506:	4b34      	ldr	r3, [pc, #208]	; (35d8 <Clock_Ip_InitClock+0x5a8>)
    3508:	5c9b      	ldrb	r3, [r3, r2]
    350a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    350c:	4933      	ldr	r1, [pc, #204]	; (35dc <Clock_Ip_InitClock+0x5ac>)
    350e:	9a02      	ldr	r2, [sp, #8]
    3510:	4613      	mov	r3, r2
    3512:	005b      	lsls	r3, r3, #1
    3514:	4413      	add	r3, r2
    3516:	009b      	lsls	r3, r3, #2
    3518:	440b      	add	r3, r1
    351a:	3304      	adds	r3, #4
    351c:	681b      	ldr	r3, [r3, #0]
    351e:	9a03      	ldr	r2, [sp, #12]
    3520:	3224      	adds	r2, #36	; 0x24
    3522:	0112      	lsls	r2, r2, #4
    3524:	9901      	ldr	r1, [sp, #4]
    3526:	440a      	add	r2, r1
    3528:	3204      	adds	r2, #4
    352a:	4610      	mov	r0, r2
    352c:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    352e:	9b03      	ldr	r3, [sp, #12]
    3530:	3301      	adds	r3, #1
    3532:	9303      	str	r3, [sp, #12]
    3534:	9b01      	ldr	r3, [sp, #4]
    3536:	7b9b      	ldrb	r3, [r3, #14]
    3538:	461a      	mov	r2, r3
    353a:	9b03      	ldr	r3, [sp, #12]
    353c:	4293      	cmp	r3, r2
    353e:	d3d3      	bcc.n	34e8 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    3540:	4b27      	ldr	r3, [pc, #156]	; (35e0 <Clock_Ip_InitClock+0x5b0>)
    3542:	2200      	movs	r2, #0
    3544:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    3546:	4b26      	ldr	r3, [pc, #152]	; (35e0 <Clock_Ip_InitClock+0x5b0>)
    3548:	2200      	movs	r2, #0
    354a:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    354c:	4b24      	ldr	r3, [pc, #144]	; (35e0 <Clock_Ip_InitClock+0x5b0>)
    354e:	2201      	movs	r2, #1
    3550:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    3552:	4b23      	ldr	r3, [pc, #140]	; (35e0 <Clock_Ip_InitClock+0x5b0>)
    3554:	2200      	movs	r2, #0
    3556:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    3558:	f000 fa9c 	bl	3a94 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    355c:	2300      	movs	r3, #0
    355e:	9303      	str	r3, [sp, #12]
    3560:	e04c      	b.n	35fc <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    3562:	9a01      	ldr	r2, [sp, #4]
    3564:	9b03      	ldr	r3, [sp, #12]
    3566:	330d      	adds	r3, #13
    3568:	00db      	lsls	r3, r3, #3
    356a:	4413      	add	r3, r2
    356c:	685b      	ldr	r3, [r3, #4]
    356e:	4a1d      	ldr	r2, [pc, #116]	; (35e4 <Clock_Ip_InitClock+0x5b4>)
    3570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3574:	2b03      	cmp	r3, #3
    3576:	d03b      	beq.n	35f0 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    3578:	9b01      	ldr	r3, [sp, #4]
    357a:	9a03      	ldr	r2, [sp, #12]
    357c:	320d      	adds	r2, #13
    357e:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    3582:	490c      	ldr	r1, [pc, #48]	; (35b4 <Clock_Ip_InitClock+0x584>)
    3584:	4613      	mov	r3, r2
    3586:	00db      	lsls	r3, r3, #3
    3588:	4413      	add	r3, r2
    358a:	440b      	add	r3, r1
    358c:	3301      	adds	r3, #1
    358e:	781b      	ldrb	r3, [r3, #0]
    3590:	461a      	mov	r2, r3
    3592:	4b15      	ldr	r3, [pc, #84]	; (35e8 <Clock_Ip_InitClock+0x5b8>)
    3594:	5c9b      	ldrb	r3, [r3, r2]
    3596:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    3598:	4a14      	ldr	r2, [pc, #80]	; (35ec <Clock_Ip_InitClock+0x5bc>)
    359a:	9b02      	ldr	r3, [sp, #8]
    359c:	00db      	lsls	r3, r3, #3
    359e:	4413      	add	r3, r2
    35a0:	685b      	ldr	r3, [r3, #4]
    35a2:	9a03      	ldr	r2, [sp, #12]
    35a4:	320d      	adds	r2, #13
    35a6:	00d2      	lsls	r2, r2, #3
    35a8:	9901      	ldr	r1, [sp, #4]
    35aa:	440a      	add	r2, r1
    35ac:	4610      	mov	r0, r2
    35ae:	4798      	blx	r3
    35b0:	e021      	b.n	35f6 <Clock_Ip_InitClock+0x5c6>
    35b2:	bf00      	nop
    35b4:	0001993c 	.word	0x0001993c
    35b8:	000198ac 	.word	0x000198ac
    35bc:	00019e88 	.word	0x00019e88
    35c0:	000198fc 	.word	0x000198fc
    35c4:	00019f48 	.word	0x00019f48
    35c8:	0001992c 	.word	0x0001992c
    35cc:	00019f38 	.word	0x00019f38
    35d0:	000198bc 	.word	0x000198bc
    35d4:	00019e90 	.word	0x00019e90
    35d8:	000198ec 	.word	0x000198ec
    35dc:	00019eb8 	.word	0x00019eb8
    35e0:	1fff8b80 	.word	0x1fff8b80
    35e4:	00019d88 	.word	0x00019d88
    35e8:	0001990c 	.word	0x0001990c
    35ec:	00019f74 	.word	0x00019f74
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    35f0:	4b3a      	ldr	r3, [pc, #232]	; (36dc <Clock_Ip_InitClock+0x6ac>)
    35f2:	2201      	movs	r2, #1
    35f4:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    35f6:	9b03      	ldr	r3, [sp, #12]
    35f8:	3301      	adds	r3, #1
    35fa:	9303      	str	r3, [sp, #12]
    35fc:	9b01      	ldr	r3, [sp, #4]
    35fe:	7adb      	ldrb	r3, [r3, #11]
    3600:	461a      	mov	r2, r3
    3602:	9b03      	ldr	r3, [sp, #12]
    3604:	4293      	cmp	r3, r2
    3606:	d3ac      	bcc.n	3562 <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    3608:	4b34      	ldr	r3, [pc, #208]	; (36dc <Clock_Ip_InitClock+0x6ac>)
    360a:	781b      	ldrb	r3, [r3, #0]
    360c:	f083 0301 	eor.w	r3, r3, #1
    3610:	b2db      	uxtb	r3, r3
    3612:	2b00      	cmp	r3, #0
    3614:	d05e      	beq.n	36d4 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3616:	2300      	movs	r3, #0
    3618:	9303      	str	r3, [sp, #12]
    361a:	e01f      	b.n	365c <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    361c:	9a01      	ldr	r2, [sp, #4]
    361e:	9b03      	ldr	r3, [sp, #12]
    3620:	334e      	adds	r3, #78	; 0x4e
    3622:	00db      	lsls	r3, r3, #3
    3624:	4413      	add	r3, r2
    3626:	685a      	ldr	r2, [r3, #4]
    3628:	492d      	ldr	r1, [pc, #180]	; (36e0 <Clock_Ip_InitClock+0x6b0>)
    362a:	4613      	mov	r3, r2
    362c:	00db      	lsls	r3, r3, #3
    362e:	4413      	add	r3, r2
    3630:	440b      	add	r3, r1
    3632:	3301      	adds	r3, #1
    3634:	781b      	ldrb	r3, [r3, #0]
    3636:	461a      	mov	r2, r3
    3638:	4b2a      	ldr	r3, [pc, #168]	; (36e4 <Clock_Ip_InitClock+0x6b4>)
    363a:	5c9b      	ldrb	r3, [r3, r2]
    363c:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    363e:	4a2a      	ldr	r2, [pc, #168]	; (36e8 <Clock_Ip_InitClock+0x6b8>)
    3640:	9b02      	ldr	r3, [sp, #8]
    3642:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    3646:	9a03      	ldr	r2, [sp, #12]
    3648:	324e      	adds	r2, #78	; 0x4e
    364a:	00d2      	lsls	r2, r2, #3
    364c:	9901      	ldr	r1, [sp, #4]
    364e:	440a      	add	r2, r1
    3650:	3204      	adds	r2, #4
    3652:	4610      	mov	r0, r2
    3654:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3656:	9b03      	ldr	r3, [sp, #12]
    3658:	3301      	adds	r3, #1
    365a:	9303      	str	r3, [sp, #12]
    365c:	9b01      	ldr	r3, [sp, #4]
    365e:	7c1b      	ldrb	r3, [r3, #16]
    3660:	461a      	mov	r2, r3
    3662:	9b03      	ldr	r3, [sp, #12]
    3664:	4293      	cmp	r3, r2
    3666:	d3d9      	bcc.n	361c <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    3668:	2300      	movs	r3, #0
    366a:	9303      	str	r3, [sp, #12]
    366c:	e028      	b.n	36c0 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    366e:	9901      	ldr	r1, [sp, #4]
    3670:	9a03      	ldr	r2, [sp, #12]
    3672:	4613      	mov	r3, r2
    3674:	009b      	lsls	r3, r3, #2
    3676:	4413      	add	r3, r2
    3678:	009b      	lsls	r3, r3, #2
    367a:	440b      	add	r3, r1
    367c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    3680:	681a      	ldr	r2, [r3, #0]
    3682:	4917      	ldr	r1, [pc, #92]	; (36e0 <Clock_Ip_InitClock+0x6b0>)
    3684:	4613      	mov	r3, r2
    3686:	00db      	lsls	r3, r3, #3
    3688:	4413      	add	r3, r2
    368a:	440b      	add	r3, r1
    368c:	3301      	adds	r3, #1
    368e:	781b      	ldrb	r3, [r3, #0]
    3690:	461a      	mov	r2, r3
    3692:	4b16      	ldr	r3, [pc, #88]	; (36ec <Clock_Ip_InitClock+0x6bc>)
    3694:	5c9b      	ldrb	r3, [r3, r2]
    3696:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    3698:	4a15      	ldr	r2, [pc, #84]	; (36f0 <Clock_Ip_InitClock+0x6c0>)
    369a:	9b02      	ldr	r3, [sp, #8]
    369c:	011b      	lsls	r3, r3, #4
    369e:	4413      	add	r3, r2
    36a0:	330c      	adds	r3, #12
    36a2:	6819      	ldr	r1, [r3, #0]
    36a4:	9a03      	ldr	r2, [sp, #12]
    36a6:	4613      	mov	r3, r2
    36a8:	009b      	lsls	r3, r3, #2
    36aa:	4413      	add	r3, r2
    36ac:	009b      	lsls	r3, r3, #2
    36ae:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    36b2:	9a01      	ldr	r2, [sp, #4]
    36b4:	4413      	add	r3, r2
    36b6:	4618      	mov	r0, r3
    36b8:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    36ba:	9b03      	ldr	r3, [sp, #12]
    36bc:	3301      	adds	r3, #1
    36be:	9303      	str	r3, [sp, #12]
    36c0:	9b01      	ldr	r3, [sp, #4]
    36c2:	7c9b      	ldrb	r3, [r3, #18]
    36c4:	461a      	mov	r2, r3
    36c6:	9b03      	ldr	r3, [sp, #12]
    36c8:	4293      	cmp	r3, r2
    36ca:	d3d0      	bcc.n	366e <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    36cc:	2104      	movs	r1, #4
    36ce:	9801      	ldr	r0, [sp, #4]
    36d0:	f002 ff48 	bl	6564 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    36d4:	bf00      	nop
    36d6:	b004      	add	sp, #16
    36d8:	bd10      	pop	{r4, pc}
    36da:	bf00      	nop
    36dc:	1fff8b80 	.word	0x1fff8b80
    36e0:	0001993c 	.word	0x0001993c
    36e4:	000198dc 	.word	0x000198dc
    36e8:	00019ec4 	.word	0x00019ec4
    36ec:	0001992c 	.word	0x0001992c
    36f0:	00019f38 	.word	0x00019f38

000036f4 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    36f4:	b500      	push	{lr}
    36f6:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    36f8:	2302      	movs	r3, #2
    36fa:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    36fc:	2300      	movs	r3, #0
    36fe:	9304      	str	r3, [sp, #16]
    3700:	e02c      	b.n	375c <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    3702:	4a36      	ldr	r2, [pc, #216]	; (37dc <Clock_Ip_GetPllStatus+0xe8>)
    3704:	9b04      	ldr	r3, [sp, #16]
    3706:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    370a:	4935      	ldr	r1, [pc, #212]	; (37e0 <Clock_Ip_GetPllStatus+0xec>)
    370c:	4613      	mov	r3, r2
    370e:	00db      	lsls	r3, r3, #3
    3710:	4413      	add	r3, r2
    3712:	440b      	add	r3, r1
    3714:	3301      	adds	r3, #1
    3716:	781b      	ldrb	r3, [r3, #0]
    3718:	461a      	mov	r2, r3
    371a:	4b32      	ldr	r3, [pc, #200]	; (37e4 <Clock_Ip_GetPllStatus+0xf0>)
    371c:	5c9b      	ldrb	r3, [r3, r2]
    371e:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    3720:	4931      	ldr	r1, [pc, #196]	; (37e8 <Clock_Ip_GetPllStatus+0xf4>)
    3722:	9a03      	ldr	r2, [sp, #12]
    3724:	4613      	mov	r3, r2
    3726:	009b      	lsls	r3, r3, #2
    3728:	4413      	add	r3, r2
    372a:	009b      	lsls	r3, r3, #2
    372c:	440b      	add	r3, r1
    372e:	3308      	adds	r3, #8
    3730:	681b      	ldr	r3, [r3, #0]
    3732:	492a      	ldr	r1, [pc, #168]	; (37dc <Clock_Ip_GetPllStatus+0xe8>)
    3734:	9a04      	ldr	r2, [sp, #16]
    3736:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    373a:	4610      	mov	r0, r2
    373c:	4798      	blx	r3
    373e:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    3740:	9b02      	ldr	r3, [sp, #8]
    3742:	2b01      	cmp	r3, #1
    3744:	d102      	bne.n	374c <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    3746:	2301      	movs	r3, #1
    3748:	9305      	str	r3, [sp, #20]
            break;
    374a:	e00d      	b.n	3768 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    374c:	9b02      	ldr	r3, [sp, #8]
    374e:	2b02      	cmp	r3, #2
    3750:	d101      	bne.n	3756 <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    3752:	2300      	movs	r3, #0
    3754:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    3756:	9b04      	ldr	r3, [sp, #16]
    3758:	3301      	adds	r3, #1
    375a:	9304      	str	r3, [sp, #16]
    375c:	4b23      	ldr	r3, [pc, #140]	; (37ec <Clock_Ip_GetPllStatus+0xf8>)
    375e:	789b      	ldrb	r3, [r3, #2]
    3760:	461a      	mov	r2, r3
    3762:	9b04      	ldr	r3, [sp, #16]
    3764:	4293      	cmp	r3, r2
    3766:	d3cc      	bcc.n	3702 <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    3768:	9b05      	ldr	r3, [sp, #20]
    376a:	2b00      	cmp	r3, #0
    376c:	d130      	bne.n	37d0 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    376e:	2300      	movs	r3, #0
    3770:	9304      	str	r3, [sp, #16]
    3772:	e027      	b.n	37c4 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    3774:	4a1e      	ldr	r2, [pc, #120]	; (37f0 <Clock_Ip_GetPllStatus+0xfc>)
    3776:	9b04      	ldr	r3, [sp, #16]
    3778:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    377c:	4918      	ldr	r1, [pc, #96]	; (37e0 <Clock_Ip_GetPllStatus+0xec>)
    377e:	4613      	mov	r3, r2
    3780:	00db      	lsls	r3, r3, #3
    3782:	4413      	add	r3, r2
    3784:	440b      	add	r3, r1
    3786:	3301      	adds	r3, #1
    3788:	781b      	ldrb	r3, [r3, #0]
    378a:	461a      	mov	r2, r3
    378c:	4b19      	ldr	r3, [pc, #100]	; (37f4 <Clock_Ip_GetPllStatus+0x100>)
    378e:	5c9b      	ldrb	r3, [r3, r2]
    3790:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    3792:	4919      	ldr	r1, [pc, #100]	; (37f8 <Clock_Ip_GetPllStatus+0x104>)
    3794:	9a03      	ldr	r2, [sp, #12]
    3796:	4613      	mov	r3, r2
    3798:	005b      	lsls	r3, r3, #1
    379a:	4413      	add	r3, r2
    379c:	009b      	lsls	r3, r3, #2
    379e:	440b      	add	r3, r1
    37a0:	3308      	adds	r3, #8
    37a2:	681b      	ldr	r3, [r3, #0]
    37a4:	4912      	ldr	r1, [pc, #72]	; (37f0 <Clock_Ip_GetPllStatus+0xfc>)
    37a6:	9a04      	ldr	r2, [sp, #16]
    37a8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    37ac:	4610      	mov	r0, r2
    37ae:	4798      	blx	r3
    37b0:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    37b2:	9b01      	ldr	r3, [sp, #4]
    37b4:	2b01      	cmp	r3, #1
    37b6:	d102      	bne.n	37be <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    37b8:	2301      	movs	r3, #1
    37ba:	9305      	str	r3, [sp, #20]
                break;
    37bc:	e008      	b.n	37d0 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    37be:	9b04      	ldr	r3, [sp, #16]
    37c0:	3301      	adds	r3, #1
    37c2:	9304      	str	r3, [sp, #16]
    37c4:	4b09      	ldr	r3, [pc, #36]	; (37ec <Clock_Ip_GetPllStatus+0xf8>)
    37c6:	78db      	ldrb	r3, [r3, #3]
    37c8:	461a      	mov	r2, r3
    37ca:	9b04      	ldr	r3, [sp, #16]
    37cc:	4293      	cmp	r3, r2
    37ce:	d3d1      	bcc.n	3774 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    37d0:	9b05      	ldr	r3, [sp, #20]
}
    37d2:	4618      	mov	r0, r3
    37d4:	b007      	add	sp, #28
    37d6:	f85d fb04 	ldr.w	pc, [sp], #4
    37da:	bf00      	nop
    37dc:	00019e44 	.word	0x00019e44
    37e0:	0001993c 	.word	0x0001993c
    37e4:	000198fc 	.word	0x000198fc
    37e8:	00019f48 	.word	0x00019f48
    37ec:	1fff8b80 	.word	0x1fff8b80
    37f0:	00019e48 	.word	0x00019e48
    37f4:	000198ec 	.word	0x000198ec
    37f8:	00019eb8 	.word	0x00019eb8

000037fc <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    37fc:	b500      	push	{lr}
    37fe:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    3800:	4b55      	ldr	r3, [pc, #340]	; (3958 <Clock_Ip_DistributePll+0x15c>)
    3802:	681b      	ldr	r3, [r3, #0]
    3804:	2b00      	cmp	r3, #0
    3806:	f000 80a2 	beq.w	394e <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    380a:	2300      	movs	r3, #0
    380c:	9301      	str	r3, [sp, #4]
    380e:	e02c      	b.n	386a <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    3810:	4b51      	ldr	r3, [pc, #324]	; (3958 <Clock_Ip_DistributePll+0x15c>)
    3812:	681a      	ldr	r2, [r3, #0]
    3814:	9b01      	ldr	r3, [sp, #4]
    3816:	330d      	adds	r3, #13
    3818:	00db      	lsls	r3, r3, #3
    381a:	4413      	add	r3, r2
    381c:	685b      	ldr	r3, [r3, #4]
    381e:	4a4f      	ldr	r2, [pc, #316]	; (395c <Clock_Ip_DistributePll+0x160>)
    3820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3824:	2b03      	cmp	r3, #3
    3826:	d11d      	bne.n	3864 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    3828:	4b4b      	ldr	r3, [pc, #300]	; (3958 <Clock_Ip_DistributePll+0x15c>)
    382a:	681b      	ldr	r3, [r3, #0]
    382c:	9a01      	ldr	r2, [sp, #4]
    382e:	320d      	adds	r2, #13
    3830:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    3834:	494a      	ldr	r1, [pc, #296]	; (3960 <Clock_Ip_DistributePll+0x164>)
    3836:	4613      	mov	r3, r2
    3838:	00db      	lsls	r3, r3, #3
    383a:	4413      	add	r3, r2
    383c:	440b      	add	r3, r1
    383e:	3301      	adds	r3, #1
    3840:	781b      	ldrb	r3, [r3, #0]
    3842:	461a      	mov	r2, r3
    3844:	4b47      	ldr	r3, [pc, #284]	; (3964 <Clock_Ip_DistributePll+0x168>)
    3846:	5c9b      	ldrb	r3, [r3, r2]
    3848:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    384a:	4a47      	ldr	r2, [pc, #284]	; (3968 <Clock_Ip_DistributePll+0x16c>)
    384c:	9b00      	ldr	r3, [sp, #0]
    384e:	00db      	lsls	r3, r3, #3
    3850:	4413      	add	r3, r2
    3852:	685b      	ldr	r3, [r3, #4]
    3854:	4a40      	ldr	r2, [pc, #256]	; (3958 <Clock_Ip_DistributePll+0x15c>)
    3856:	6811      	ldr	r1, [r2, #0]
    3858:	9a01      	ldr	r2, [sp, #4]
    385a:	320d      	adds	r2, #13
    385c:	00d2      	lsls	r2, r2, #3
    385e:	440a      	add	r2, r1
    3860:	4610      	mov	r0, r2
    3862:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    3864:	9b01      	ldr	r3, [sp, #4]
    3866:	3301      	adds	r3, #1
    3868:	9301      	str	r3, [sp, #4]
    386a:	4b3b      	ldr	r3, [pc, #236]	; (3958 <Clock_Ip_DistributePll+0x15c>)
    386c:	681b      	ldr	r3, [r3, #0]
    386e:	7adb      	ldrb	r3, [r3, #11]
    3870:	461a      	mov	r2, r3
    3872:	9b01      	ldr	r3, [sp, #4]
    3874:	4293      	cmp	r3, r2
    3876:	d3cb      	bcc.n	3810 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    3878:	4b3c      	ldr	r3, [pc, #240]	; (396c <Clock_Ip_DistributePll+0x170>)
    387a:	781b      	ldrb	r3, [r3, #0]
    387c:	2b00      	cmp	r3, #0
    387e:	d066      	beq.n	394e <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3880:	2300      	movs	r3, #0
    3882:	9301      	str	r3, [sp, #4]
    3884:	e021      	b.n	38ca <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    3886:	4b34      	ldr	r3, [pc, #208]	; (3958 <Clock_Ip_DistributePll+0x15c>)
    3888:	681a      	ldr	r2, [r3, #0]
    388a:	9b01      	ldr	r3, [sp, #4]
    388c:	334e      	adds	r3, #78	; 0x4e
    388e:	00db      	lsls	r3, r3, #3
    3890:	4413      	add	r3, r2
    3892:	685a      	ldr	r2, [r3, #4]
    3894:	4932      	ldr	r1, [pc, #200]	; (3960 <Clock_Ip_DistributePll+0x164>)
    3896:	4613      	mov	r3, r2
    3898:	00db      	lsls	r3, r3, #3
    389a:	4413      	add	r3, r2
    389c:	440b      	add	r3, r1
    389e:	3301      	adds	r3, #1
    38a0:	781b      	ldrb	r3, [r3, #0]
    38a2:	461a      	mov	r2, r3
    38a4:	4b32      	ldr	r3, [pc, #200]	; (3970 <Clock_Ip_DistributePll+0x174>)
    38a6:	5c9b      	ldrb	r3, [r3, r2]
    38a8:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    38aa:	4a32      	ldr	r2, [pc, #200]	; (3974 <Clock_Ip_DistributePll+0x178>)
    38ac:	9b00      	ldr	r3, [sp, #0]
    38ae:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    38b2:	4a29      	ldr	r2, [pc, #164]	; (3958 <Clock_Ip_DistributePll+0x15c>)
    38b4:	6811      	ldr	r1, [r2, #0]
    38b6:	9a01      	ldr	r2, [sp, #4]
    38b8:	324e      	adds	r2, #78	; 0x4e
    38ba:	00d2      	lsls	r2, r2, #3
    38bc:	440a      	add	r2, r1
    38be:	3204      	adds	r2, #4
    38c0:	4610      	mov	r0, r2
    38c2:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    38c4:	9b01      	ldr	r3, [sp, #4]
    38c6:	3301      	adds	r3, #1
    38c8:	9301      	str	r3, [sp, #4]
    38ca:	4b23      	ldr	r3, [pc, #140]	; (3958 <Clock_Ip_DistributePll+0x15c>)
    38cc:	681b      	ldr	r3, [r3, #0]
    38ce:	7c1b      	ldrb	r3, [r3, #16]
    38d0:	461a      	mov	r2, r3
    38d2:	9b01      	ldr	r3, [sp, #4]
    38d4:	4293      	cmp	r3, r2
    38d6:	d3d6      	bcc.n	3886 <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    38d8:	2300      	movs	r3, #0
    38da:	9301      	str	r3, [sp, #4]
    38dc:	e02a      	b.n	3934 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    38de:	4b1e      	ldr	r3, [pc, #120]	; (3958 <Clock_Ip_DistributePll+0x15c>)
    38e0:	6819      	ldr	r1, [r3, #0]
    38e2:	9a01      	ldr	r2, [sp, #4]
    38e4:	4613      	mov	r3, r2
    38e6:	009b      	lsls	r3, r3, #2
    38e8:	4413      	add	r3, r2
    38ea:	009b      	lsls	r3, r3, #2
    38ec:	440b      	add	r3, r1
    38ee:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    38f2:	681a      	ldr	r2, [r3, #0]
    38f4:	491a      	ldr	r1, [pc, #104]	; (3960 <Clock_Ip_DistributePll+0x164>)
    38f6:	4613      	mov	r3, r2
    38f8:	00db      	lsls	r3, r3, #3
    38fa:	4413      	add	r3, r2
    38fc:	440b      	add	r3, r1
    38fe:	3301      	adds	r3, #1
    3900:	781b      	ldrb	r3, [r3, #0]
    3902:	461a      	mov	r2, r3
    3904:	4b1c      	ldr	r3, [pc, #112]	; (3978 <Clock_Ip_DistributePll+0x17c>)
    3906:	5c9b      	ldrb	r3, [r3, r2]
    3908:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    390a:	4a1c      	ldr	r2, [pc, #112]	; (397c <Clock_Ip_DistributePll+0x180>)
    390c:	9b00      	ldr	r3, [sp, #0]
    390e:	011b      	lsls	r3, r3, #4
    3910:	4413      	add	r3, r2
    3912:	330c      	adds	r3, #12
    3914:	6819      	ldr	r1, [r3, #0]
    3916:	4b10      	ldr	r3, [pc, #64]	; (3958 <Clock_Ip_DistributePll+0x15c>)
    3918:	6818      	ldr	r0, [r3, #0]
    391a:	9a01      	ldr	r2, [sp, #4]
    391c:	4613      	mov	r3, r2
    391e:	009b      	lsls	r3, r3, #2
    3920:	4413      	add	r3, r2
    3922:	009b      	lsls	r3, r3, #2
    3924:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    3928:	4403      	add	r3, r0
    392a:	4618      	mov	r0, r3
    392c:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    392e:	9b01      	ldr	r3, [sp, #4]
    3930:	3301      	adds	r3, #1
    3932:	9301      	str	r3, [sp, #4]
    3934:	4b08      	ldr	r3, [pc, #32]	; (3958 <Clock_Ip_DistributePll+0x15c>)
    3936:	681b      	ldr	r3, [r3, #0]
    3938:	7c9b      	ldrb	r3, [r3, #18]
    393a:	461a      	mov	r2, r3
    393c:	9b01      	ldr	r3, [sp, #4]
    393e:	4293      	cmp	r3, r2
    3940:	d3cd      	bcc.n	38de <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    3942:	4b05      	ldr	r3, [pc, #20]	; (3958 <Clock_Ip_DistributePll+0x15c>)
    3944:	681b      	ldr	r3, [r3, #0]
    3946:	2104      	movs	r1, #4
    3948:	4618      	mov	r0, r3
    394a:	f002 fe0b 	bl	6564 <Clock_Ip_Command>
        }
    }
}
    394e:	bf00      	nop
    3950:	b003      	add	sp, #12
    3952:	f85d fb04 	ldr.w	pc, [sp], #4
    3956:	bf00      	nop
    3958:	1fff8b78 	.word	0x1fff8b78
    395c:	00019d88 	.word	0x00019d88
    3960:	0001993c 	.word	0x0001993c
    3964:	0001990c 	.word	0x0001990c
    3968:	00019f74 	.word	0x00019f74
    396c:	1fff8b80 	.word	0x1fff8b80
    3970:	000198dc 	.word	0x000198dc
    3974:	00019ec4 	.word	0x00019ec4
    3978:	0001992c 	.word	0x0001992c
    397c:	00019f38 	.word	0x00019f38

00003980 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    3980:	b500      	push	{lr}
    3982:	b085      	sub	sp, #20
    3984:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    3986:	490c      	ldr	r1, [pc, #48]	; (39b8 <Clock_Ip_DisableClockMonitor+0x38>)
    3988:	9a01      	ldr	r2, [sp, #4]
    398a:	4613      	mov	r3, r2
    398c:	00db      	lsls	r3, r3, #3
    398e:	4413      	add	r3, r2
    3990:	440b      	add	r3, r1
    3992:	3301      	adds	r3, #1
    3994:	781b      	ldrb	r3, [r3, #0]
    3996:	461a      	mov	r2, r3
    3998:	4b08      	ldr	r3, [pc, #32]	; (39bc <Clock_Ip_DisableClockMonitor+0x3c>)
    399a:	5c9b      	ldrb	r3, [r3, r2]
    399c:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    399e:	4a08      	ldr	r2, [pc, #32]	; (39c0 <Clock_Ip_DisableClockMonitor+0x40>)
    39a0:	9b03      	ldr	r3, [sp, #12]
    39a2:	011b      	lsls	r3, r3, #4
    39a4:	4413      	add	r3, r2
    39a6:	3308      	adds	r3, #8
    39a8:	681b      	ldr	r3, [r3, #0]
    39aa:	9801      	ldr	r0, [sp, #4]
    39ac:	4798      	blx	r3
}
    39ae:	bf00      	nop
    39b0:	b005      	add	sp, #20
    39b2:	f85d fb04 	ldr.w	pc, [sp], #4
    39b6:	bf00      	nop
    39b8:	0001993c 	.word	0x0001993c
    39bc:	0001992c 	.word	0x0001992c
    39c0:	00019f38 	.word	0x00019f38

000039c4 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    39c4:	b082      	sub	sp, #8
    39c6:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    39c8:	4a02      	ldr	r2, [pc, #8]	; (39d4 <Clock_Ip_InstallNotificationsCallback+0x10>)
    39ca:	9b01      	ldr	r3, [sp, #4]
    39cc:	6013      	str	r3, [r2, #0]
}
    39ce:	bf00      	nop
    39d0:	b002      	add	sp, #8
    39d2:	4770      	bx	lr
    39d4:	1fff8b14 	.word	0x1fff8b14

000039d8 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    39d8:	b500      	push	{lr}
    39da:	b085      	sub	sp, #20
    39dc:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    39de:	490c      	ldr	r1, [pc, #48]	; (3a10 <Clock_Ip_DisableModuleClock+0x38>)
    39e0:	9a01      	ldr	r2, [sp, #4]
    39e2:	4613      	mov	r3, r2
    39e4:	00db      	lsls	r3, r3, #3
    39e6:	4413      	add	r3, r2
    39e8:	440b      	add	r3, r1
    39ea:	3301      	adds	r3, #1
    39ec:	781b      	ldrb	r3, [r3, #0]
    39ee:	461a      	mov	r2, r3
    39f0:	4b08      	ldr	r3, [pc, #32]	; (3a14 <Clock_Ip_DisableModuleClock+0x3c>)
    39f2:	5c9b      	ldrb	r3, [r3, r2]
    39f4:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    39f6:	4a08      	ldr	r2, [pc, #32]	; (3a18 <Clock_Ip_DisableModuleClock+0x40>)
    39f8:	9b03      	ldr	r3, [sp, #12]
    39fa:	00db      	lsls	r3, r3, #3
    39fc:	4413      	add	r3, r2
    39fe:	685b      	ldr	r3, [r3, #4]
    3a00:	2101      	movs	r1, #1
    3a02:	9801      	ldr	r0, [sp, #4]
    3a04:	4798      	blx	r3
}
    3a06:	bf00      	nop
    3a08:	b005      	add	sp, #20
    3a0a:	f85d fb04 	ldr.w	pc, [sp], #4
    3a0e:	bf00      	nop
    3a10:	0001993c 	.word	0x0001993c
    3a14:	000198dc 	.word	0x000198dc
    3a18:	00019ec4 	.word	0x00019ec4

00003a1c <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    3a1c:	b500      	push	{lr}
    3a1e:	b085      	sub	sp, #20
    3a20:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    3a22:	490c      	ldr	r1, [pc, #48]	; (3a54 <Clock_Ip_EnableModuleClock+0x38>)
    3a24:	9a01      	ldr	r2, [sp, #4]
    3a26:	4613      	mov	r3, r2
    3a28:	00db      	lsls	r3, r3, #3
    3a2a:	4413      	add	r3, r2
    3a2c:	440b      	add	r3, r1
    3a2e:	3301      	adds	r3, #1
    3a30:	781b      	ldrb	r3, [r3, #0]
    3a32:	461a      	mov	r2, r3
    3a34:	4b08      	ldr	r3, [pc, #32]	; (3a58 <Clock_Ip_EnableModuleClock+0x3c>)
    3a36:	5c9b      	ldrb	r3, [r3, r2]
    3a38:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    3a3a:	4a08      	ldr	r2, [pc, #32]	; (3a5c <Clock_Ip_EnableModuleClock+0x40>)
    3a3c:	9b03      	ldr	r3, [sp, #12]
    3a3e:	00db      	lsls	r3, r3, #3
    3a40:	4413      	add	r3, r2
    3a42:	685b      	ldr	r3, [r3, #4]
    3a44:	2100      	movs	r1, #0
    3a46:	9801      	ldr	r0, [sp, #4]
    3a48:	4798      	blx	r3
}
    3a4a:	bf00      	nop
    3a4c:	b005      	add	sp, #20
    3a4e:	f85d fb04 	ldr.w	pc, [sp], #4
    3a52:	bf00      	nop
    3a54:	0001993c 	.word	0x0001993c
    3a58:	000198dc 	.word	0x000198dc
    3a5c:	00019ec4 	.word	0x00019ec4

00003a60 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    3a60:	b500      	push	{lr}
    3a62:	b083      	sub	sp, #12
    3a64:	9001      	str	r0, [sp, #4]
    3a66:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    3a68:	4b08      	ldr	r3, [pc, #32]	; (3a8c <Clock_Ip_PowerModeChangeNotification+0x2c>)
    3a6a:	2200      	movs	r2, #0
    3a6c:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    3a6e:	4b08      	ldr	r3, [pc, #32]	; (3a90 <Clock_Ip_PowerModeChangeNotification+0x30>)
    3a70:	681b      	ldr	r3, [r3, #0]
    3a72:	2102      	movs	r1, #2
    3a74:	4618      	mov	r0, r3
    3a76:	f002 fd75 	bl	6564 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    3a7a:	9900      	ldr	r1, [sp, #0]
    3a7c:	9801      	ldr	r0, [sp, #4]
    3a7e:	f002 fc51 	bl	6324 <Clock_Ip_ClockPowerModeChangeNotification>
}
    3a82:	bf00      	nop
    3a84:	b003      	add	sp, #12
    3a86:	f85d fb04 	ldr.w	pc, [sp], #4
    3a8a:	bf00      	nop
    3a8c:	1fff8b10 	.word	0x1fff8b10
    3a90:	1fff8b78 	.word	0x1fff8b78

00003a94 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    3a94:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    3a96:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    3a9a:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    3a9c:	4b06      	ldr	r3, [pc, #24]	; (3ab8 <Clock_Ip_SetWaitStates+0x24>)
    3a9e:	785b      	ldrb	r3, [r3, #1]
    3aa0:	2b00      	cmp	r3, #0
    3aa2:	d005      	beq.n	3ab0 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    3aa4:	9b01      	ldr	r3, [sp, #4]
    3aa6:	3b01      	subs	r3, #1
    3aa8:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    3aaa:	9b01      	ldr	r3, [sp, #4]
    3aac:	2b00      	cmp	r3, #0
    3aae:	d1f9      	bne.n	3aa4 <Clock_Ip_SetWaitStates+0x10>
    }
}
    3ab0:	bf00      	nop
    3ab2:	b002      	add	sp, #8
    3ab4:	4770      	bx	lr
    3ab6:	bf00      	nop
    3ab8:	1fff8b80 	.word	0x1fff8b80

00003abc <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    3abc:	b500      	push	{lr}
    3abe:	b083      	sub	sp, #12
    3ac0:	9001      	str	r0, [sp, #4]
    3ac2:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    3ac4:	4b04      	ldr	r3, [pc, #16]	; (3ad8 <Clock_Ip_ReportClockErrors+0x1c>)
    3ac6:	681b      	ldr	r3, [r3, #0]
    3ac8:	9900      	ldr	r1, [sp, #0]
    3aca:	9801      	ldr	r0, [sp, #4]
    3acc:	4798      	blx	r3
}
    3ace:	bf00      	nop
    3ad0:	b003      	add	sp, #12
    3ad2:	f85d fb04 	ldr.w	pc, [sp], #4
    3ad6:	bf00      	nop
    3ad8:	1fff8b14 	.word	0x1fff8b14

00003adc <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    3adc:	b500      	push	{lr}
    3ade:	b085      	sub	sp, #20
    3ae0:	9003      	str	r0, [sp, #12]
    3ae2:	9102      	str	r1, [sp, #8]
    3ae4:	9201      	str	r2, [sp, #4]
    3ae6:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    3ae8:	2000      	movs	r0, #0
    3aea:	f7fe ffd1 	bl	2a90 <OsIf_GetCounter>
    3aee:	4602      	mov	r2, r0
    3af0:	9b03      	ldr	r3, [sp, #12]
    3af2:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    3af4:	9b02      	ldr	r3, [sp, #8]
    3af6:	2200      	movs	r2, #0
    3af8:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    3afa:	2100      	movs	r1, #0
    3afc:	9800      	ldr	r0, [sp, #0]
    3afe:	f7ff f813 	bl	2b28 <OsIf_MicrosToTicks>
    3b02:	4602      	mov	r2, r0
    3b04:	9b01      	ldr	r3, [sp, #4]
    3b06:	601a      	str	r2, [r3, #0]
}
    3b08:	bf00      	nop
    3b0a:	b005      	add	sp, #20
    3b0c:	f85d fb04 	ldr.w	pc, [sp], #4

00003b10 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    3b10:	b500      	push	{lr}
    3b12:	b087      	sub	sp, #28
    3b14:	9003      	str	r0, [sp, #12]
    3b16:	9102      	str	r1, [sp, #8]
    3b18:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    3b1a:	2300      	movs	r3, #0
    3b1c:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    3b20:	2100      	movs	r1, #0
    3b22:	9803      	ldr	r0, [sp, #12]
    3b24:	f7fe ffcd 	bl	2ac2 <OsIf_GetElapsed>
    3b28:	4602      	mov	r2, r0
    3b2a:	9b02      	ldr	r3, [sp, #8]
    3b2c:	681b      	ldr	r3, [r3, #0]
    3b2e:	441a      	add	r2, r3
    3b30:	9b02      	ldr	r3, [sp, #8]
    3b32:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    3b34:	9b02      	ldr	r3, [sp, #8]
    3b36:	681b      	ldr	r3, [r3, #0]
    3b38:	9a01      	ldr	r2, [sp, #4]
    3b3a:	429a      	cmp	r2, r3
    3b3c:	d802      	bhi.n	3b44 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    3b3e:	2301      	movs	r3, #1
    3b40:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    3b44:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    3b48:	4618      	mov	r0, r3
    3b4a:	b007      	add	sp, #28
    3b4c:	f85d fb04 	ldr.w	pc, [sp], #4

00003b50 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    3b50:	b082      	sub	sp, #8
    3b52:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3b54:	bf00      	nop
    3b56:	b002      	add	sp, #8
    3b58:	4770      	bx	lr

00003b5a <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    3b5a:	b500      	push	{lr}
    3b5c:	b083      	sub	sp, #12
    3b5e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b60:	9b01      	ldr	r3, [sp, #4]
    3b62:	2b00      	cmp	r3, #0
    3b64:	d002      	beq.n	3b6c <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    3b66:	9801      	ldr	r0, [sp, #4]
    3b68:	f000 f8ad 	bl	3cc6 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b6c:	bf00      	nop
    3b6e:	b003      	add	sp, #12
    3b70:	f85d fb04 	ldr.w	pc, [sp], #4

00003b74 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    3b74:	b500      	push	{lr}
    3b76:	b083      	sub	sp, #12
    3b78:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b7a:	9b01      	ldr	r3, [sp, #4]
    3b7c:	2b00      	cmp	r3, #0
    3b7e:	d002      	beq.n	3b86 <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    3b80:	9801      	ldr	r0, [sp, #4]
    3b82:	f000 f8cd 	bl	3d20 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b86:	bf00      	nop
    3b88:	b003      	add	sp, #12
    3b8a:	f85d fb04 	ldr.w	pc, [sp], #4

00003b8e <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    3b8e:	b500      	push	{lr}
    3b90:	b083      	sub	sp, #12
    3b92:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b94:	9b01      	ldr	r3, [sp, #4]
    3b96:	2b00      	cmp	r3, #0
    3b98:	d002      	beq.n	3ba0 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    3b9a:	9801      	ldr	r0, [sp, #4]
    3b9c:	f000 f8ee 	bl	3d7c <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3ba0:	bf00      	nop
    3ba2:	b003      	add	sp, #12
    3ba4:	f85d fb04 	ldr.w	pc, [sp], #4

00003ba8 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    3ba8:	b500      	push	{lr}
    3baa:	b083      	sub	sp, #12
    3bac:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3bae:	9b01      	ldr	r3, [sp, #4]
    3bb0:	2b00      	cmp	r3, #0
    3bb2:	d002      	beq.n	3bba <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    3bb4:	9801      	ldr	r0, [sp, #4]
    3bb6:	f000 f8f9 	bl	3dac <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3bba:	bf00      	nop
    3bbc:	b003      	add	sp, #12
    3bbe:	f85d fb04 	ldr.w	pc, [sp], #4

00003bc2 <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    3bc2:	b500      	push	{lr}
    3bc4:	b083      	sub	sp, #12
    3bc6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3bc8:	9b01      	ldr	r3, [sp, #4]
    3bca:	2b00      	cmp	r3, #0
    3bcc:	d002      	beq.n	3bd4 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    3bce:	9801      	ldr	r0, [sp, #4]
    3bd0:	f000 f904 	bl	3ddc <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3bd4:	bf00      	nop
    3bd6:	b003      	add	sp, #12
    3bd8:	f85d fb04 	ldr.w	pc, [sp], #4

00003bdc <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    3bdc:	b500      	push	{lr}
    3bde:	b083      	sub	sp, #12
    3be0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3be2:	9b01      	ldr	r3, [sp, #4]
    3be4:	2b00      	cmp	r3, #0
    3be6:	d002      	beq.n	3bee <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    3be8:	9801      	ldr	r0, [sp, #4]
    3bea:	f000 f90f 	bl	3e0c <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3bee:	bf00      	nop
    3bf0:	b003      	add	sp, #12
    3bf2:	f85d fb04 	ldr.w	pc, [sp], #4

00003bf6 <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    3bf6:	b500      	push	{lr}
    3bf8:	b083      	sub	sp, #12
    3bfa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3bfc:	9b01      	ldr	r3, [sp, #4]
    3bfe:	2b00      	cmp	r3, #0
    3c00:	d002      	beq.n	3c08 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    3c02:	9801      	ldr	r0, [sp, #4]
    3c04:	f000 f91a 	bl	3e3c <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3c08:	bf00      	nop
    3c0a:	b003      	add	sp, #12
    3c0c:	f85d fb04 	ldr.w	pc, [sp], #4

00003c10 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    3c10:	b500      	push	{lr}
    3c12:	b083      	sub	sp, #12
    3c14:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3c16:	9b01      	ldr	r3, [sp, #4]
    3c18:	2b00      	cmp	r3, #0
    3c1a:	d002      	beq.n	3c22 <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    3c1c:	9801      	ldr	r0, [sp, #4]
    3c1e:	f000 f925 	bl	3e6c <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3c22:	bf00      	nop
    3c24:	b003      	add	sp, #12
    3c26:	f85d fb04 	ldr.w	pc, [sp], #4

00003c2a <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    3c2a:	b500      	push	{lr}
    3c2c:	b083      	sub	sp, #12
    3c2e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3c30:	9b01      	ldr	r3, [sp, #4]
    3c32:	2b00      	cmp	r3, #0
    3c34:	d002      	beq.n	3c3c <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    3c36:	9801      	ldr	r0, [sp, #4]
    3c38:	f000 f930 	bl	3e9c <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3c3c:	bf00      	nop
    3c3e:	b003      	add	sp, #12
    3c40:	f85d fb04 	ldr.w	pc, [sp], #4

00003c44 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    3c44:	b500      	push	{lr}
    3c46:	b083      	sub	sp, #12
    3c48:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3c4a:	9b01      	ldr	r3, [sp, #4]
    3c4c:	2b00      	cmp	r3, #0
    3c4e:	d002      	beq.n	3c56 <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    3c50:	9801      	ldr	r0, [sp, #4]
    3c52:	f000 f93b 	bl	3ecc <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3c56:	bf00      	nop
    3c58:	b003      	add	sp, #12
    3c5a:	f85d fb04 	ldr.w	pc, [sp], #4

00003c5e <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    3c5e:	b500      	push	{lr}
    3c60:	b083      	sub	sp, #12
    3c62:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3c64:	9b01      	ldr	r3, [sp, #4]
    3c66:	2b00      	cmp	r3, #0
    3c68:	d002      	beq.n	3c70 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    3c6a:	9801      	ldr	r0, [sp, #4]
    3c6c:	f000 f946 	bl	3efc <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3c70:	bf00      	nop
    3c72:	b003      	add	sp, #12
    3c74:	f85d fb04 	ldr.w	pc, [sp], #4

00003c78 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    3c78:	b500      	push	{lr}
    3c7a:	b083      	sub	sp, #12
    3c7c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3c7e:	9b01      	ldr	r3, [sp, #4]
    3c80:	2b00      	cmp	r3, #0
    3c82:	d002      	beq.n	3c8a <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    3c84:	9801      	ldr	r0, [sp, #4]
    3c86:	f000 f951 	bl	3f2c <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3c8a:	bf00      	nop
    3c8c:	b003      	add	sp, #12
    3c8e:	f85d fb04 	ldr.w	pc, [sp], #4

00003c92 <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    3c92:	b500      	push	{lr}
    3c94:	b083      	sub	sp, #12
    3c96:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3c98:	9b01      	ldr	r3, [sp, #4]
    3c9a:	2b00      	cmp	r3, #0
    3c9c:	d002      	beq.n	3ca4 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    3c9e:	9801      	ldr	r0, [sp, #4]
    3ca0:	f000 f95e 	bl	3f60 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3ca4:	bf00      	nop
    3ca6:	b003      	add	sp, #12
    3ca8:	f85d fb04 	ldr.w	pc, [sp], #4

00003cac <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    3cac:	b500      	push	{lr}
    3cae:	b083      	sub	sp, #12
    3cb0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3cb2:	9b01      	ldr	r3, [sp, #4]
    3cb4:	2b00      	cmp	r3, #0
    3cb6:	d002      	beq.n	3cbe <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    3cb8:	9801      	ldr	r0, [sp, #4]
    3cba:	f000 f98b 	bl	3fd4 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3cbe:	bf00      	nop
    3cc0:	b003      	add	sp, #12
    3cc2:	f85d fb04 	ldr.w	pc, [sp], #4

00003cc6 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3cc6:	b086      	sub	sp, #24
    3cc8:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3cca:	9b01      	ldr	r3, [sp, #4]
    3ccc:	681a      	ldr	r2, [r3, #0]
    3cce:	4911      	ldr	r1, [pc, #68]	; (3d14 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    3cd0:	4613      	mov	r3, r2
    3cd2:	00db      	lsls	r3, r3, #3
    3cd4:	4413      	add	r3, r2
    3cd6:	440b      	add	r3, r1
    3cd8:	781b      	ldrb	r3, [r3, #0]
    3cda:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    3cdc:	9b01      	ldr	r3, [sp, #4]
    3cde:	685b      	ldr	r3, [r3, #4]
    3ce0:	4a0d      	ldr	r2, [pc, #52]	; (3d18 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    3ce2:	5cd3      	ldrb	r3, [r2, r3]
    3ce4:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    3ce6:	4a0d      	ldr	r2, [pc, #52]	; (3d1c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    3ce8:	9b05      	ldr	r3, [sp, #20]
    3cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3cee:	681b      	ldr	r3, [r3, #0]
    3cf0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    3cf2:	9b03      	ldr	r3, [sp, #12]
    3cf4:	f023 0307 	bic.w	r3, r3, #7
    3cf8:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    3cfa:	9a03      	ldr	r2, [sp, #12]
    3cfc:	9b04      	ldr	r3, [sp, #16]
    3cfe:	4313      	orrs	r3, r2
    3d00:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    3d02:	4a06      	ldr	r2, [pc, #24]	; (3d1c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    3d04:	9b05      	ldr	r3, [sp, #20]
    3d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3d0a:	9a03      	ldr	r2, [sp, #12]
    3d0c:	601a      	str	r2, [r3, #0]
}
    3d0e:	bf00      	nop
    3d10:	b006      	add	sp, #24
    3d12:	4770      	bx	lr
    3d14:	0001993c 	.word	0x0001993c
    3d18:	00019d34 	.word	0x00019d34
    3d1c:	00019d78 	.word	0x00019d78

00003d20 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3d20:	b086      	sub	sp, #24
    3d22:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3d24:	9b01      	ldr	r3, [sp, #4]
    3d26:	681a      	ldr	r2, [r3, #0]
    3d28:	4911      	ldr	r1, [pc, #68]	; (3d70 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    3d2a:	4613      	mov	r3, r2
    3d2c:	00db      	lsls	r3, r3, #3
    3d2e:	4413      	add	r3, r2
    3d30:	440b      	add	r3, r1
    3d32:	781b      	ldrb	r3, [r3, #0]
    3d34:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    3d36:	9b01      	ldr	r3, [sp, #4]
    3d38:	685b      	ldr	r3, [r3, #4]
    3d3a:	4a0e      	ldr	r2, [pc, #56]	; (3d74 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    3d3c:	5cd3      	ldrb	r3, [r2, r3]
    3d3e:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    3d40:	4a0d      	ldr	r2, [pc, #52]	; (3d78 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    3d42:	9b05      	ldr	r3, [sp, #20]
    3d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3d48:	681b      	ldr	r3, [r3, #0]
    3d4a:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    3d4c:	9b03      	ldr	r3, [sp, #12]
    3d4e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3d52:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    3d54:	9b04      	ldr	r3, [sp, #16]
    3d56:	021b      	lsls	r3, r3, #8
    3d58:	9a03      	ldr	r2, [sp, #12]
    3d5a:	4313      	orrs	r3, r2
    3d5c:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    3d5e:	4a06      	ldr	r2, [pc, #24]	; (3d78 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    3d60:	9b05      	ldr	r3, [sp, #20]
    3d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3d66:	9a03      	ldr	r2, [sp, #12]
    3d68:	601a      	str	r2, [r3, #0]
}
    3d6a:	bf00      	nop
    3d6c:	b006      	add	sp, #24
    3d6e:	4770      	bx	lr
    3d70:	0001993c 	.word	0x0001993c
    3d74:	00019d34 	.word	0x00019d34
    3d78:	00019d78 	.word	0x00019d78

00003d7c <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3d7c:	b084      	sub	sp, #16
    3d7e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    3d80:	4b09      	ldr	r3, [pc, #36]	; (3da8 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    3d82:	695b      	ldr	r3, [r3, #20]
    3d84:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    3d86:	9b03      	ldr	r3, [sp, #12]
    3d88:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3d8c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    3d8e:	9b01      	ldr	r3, [sp, #4]
    3d90:	685b      	ldr	r3, [r3, #4]
    3d92:	3b01      	subs	r3, #1
    3d94:	041b      	lsls	r3, r3, #16
    3d96:	9a03      	ldr	r2, [sp, #12]
    3d98:	4313      	orrs	r3, r2
    3d9a:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    3d9c:	4a02      	ldr	r2, [pc, #8]	; (3da8 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    3d9e:	9b03      	ldr	r3, [sp, #12]
    3da0:	6153      	str	r3, [r2, #20]
}
    3da2:	bf00      	nop
    3da4:	b004      	add	sp, #16
    3da6:	4770      	bx	lr
    3da8:	40064000 	.word	0x40064000

00003dac <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3dac:	b084      	sub	sp, #16
    3dae:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    3db0:	4b09      	ldr	r3, [pc, #36]	; (3dd8 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    3db2:	695b      	ldr	r3, [r3, #20]
    3db4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    3db6:	9b03      	ldr	r3, [sp, #12]
    3db8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3dbc:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    3dbe:	9b01      	ldr	r3, [sp, #4]
    3dc0:	685b      	ldr	r3, [r3, #4]
    3dc2:	3b01      	subs	r3, #1
    3dc4:	011b      	lsls	r3, r3, #4
    3dc6:	9a03      	ldr	r2, [sp, #12]
    3dc8:	4313      	orrs	r3, r2
    3dca:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    3dcc:	4a02      	ldr	r2, [pc, #8]	; (3dd8 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    3dce:	9b03      	ldr	r3, [sp, #12]
    3dd0:	6153      	str	r3, [r2, #20]
}
    3dd2:	bf00      	nop
    3dd4:	b004      	add	sp, #16
    3dd6:	4770      	bx	lr
    3dd8:	40064000 	.word	0x40064000

00003ddc <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3ddc:	b084      	sub	sp, #16
    3dde:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    3de0:	4b09      	ldr	r3, [pc, #36]	; (3e08 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    3de2:	695b      	ldr	r3, [r3, #20]
    3de4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    3de6:	9b03      	ldr	r3, [sp, #12]
    3de8:	f023 030f 	bic.w	r3, r3, #15
    3dec:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    3dee:	9b01      	ldr	r3, [sp, #4]
    3df0:	685b      	ldr	r3, [r3, #4]
    3df2:	3b01      	subs	r3, #1
    3df4:	9a03      	ldr	r2, [sp, #12]
    3df6:	4313      	orrs	r3, r2
    3df8:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    3dfa:	4a03      	ldr	r2, [pc, #12]	; (3e08 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    3dfc:	9b03      	ldr	r3, [sp, #12]
    3dfe:	6153      	str	r3, [r2, #20]
}
    3e00:	bf00      	nop
    3e02:	b004      	add	sp, #16
    3e04:	4770      	bx	lr
    3e06:	bf00      	nop
    3e08:	40064000 	.word	0x40064000

00003e0c <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3e0c:	b084      	sub	sp, #16
    3e0e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3e10:	4b09      	ldr	r3, [pc, #36]	; (3e38 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    3e12:	699b      	ldr	r3, [r3, #24]
    3e14:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    3e16:	9b03      	ldr	r3, [sp, #12]
    3e18:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3e1c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    3e1e:	9b01      	ldr	r3, [sp, #4]
    3e20:	685b      	ldr	r3, [r3, #4]
    3e22:	3b01      	subs	r3, #1
    3e24:	041b      	lsls	r3, r3, #16
    3e26:	9a03      	ldr	r2, [sp, #12]
    3e28:	4313      	orrs	r3, r2
    3e2a:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    3e2c:	4a02      	ldr	r2, [pc, #8]	; (3e38 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    3e2e:	9b03      	ldr	r3, [sp, #12]
    3e30:	6193      	str	r3, [r2, #24]
}
    3e32:	bf00      	nop
    3e34:	b004      	add	sp, #16
    3e36:	4770      	bx	lr
    3e38:	40064000 	.word	0x40064000

00003e3c <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3e3c:	b084      	sub	sp, #16
    3e3e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3e40:	4b09      	ldr	r3, [pc, #36]	; (3e68 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    3e42:	699b      	ldr	r3, [r3, #24]
    3e44:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    3e46:	9b03      	ldr	r3, [sp, #12]
    3e48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3e4c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    3e4e:	9b01      	ldr	r3, [sp, #4]
    3e50:	685b      	ldr	r3, [r3, #4]
    3e52:	3b01      	subs	r3, #1
    3e54:	011b      	lsls	r3, r3, #4
    3e56:	9a03      	ldr	r2, [sp, #12]
    3e58:	4313      	orrs	r3, r2
    3e5a:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    3e5c:	4a02      	ldr	r2, [pc, #8]	; (3e68 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    3e5e:	9b03      	ldr	r3, [sp, #12]
    3e60:	6193      	str	r3, [r2, #24]
}
    3e62:	bf00      	nop
    3e64:	b004      	add	sp, #16
    3e66:	4770      	bx	lr
    3e68:	40064000 	.word	0x40064000

00003e6c <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3e6c:	b084      	sub	sp, #16
    3e6e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    3e70:	4b09      	ldr	r3, [pc, #36]	; (3e98 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    3e72:	699b      	ldr	r3, [r3, #24]
    3e74:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    3e76:	9b03      	ldr	r3, [sp, #12]
    3e78:	f023 030f 	bic.w	r3, r3, #15
    3e7c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    3e7e:	9b01      	ldr	r3, [sp, #4]
    3e80:	685b      	ldr	r3, [r3, #4]
    3e82:	3b01      	subs	r3, #1
    3e84:	9a03      	ldr	r2, [sp, #12]
    3e86:	4313      	orrs	r3, r2
    3e88:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    3e8a:	4a03      	ldr	r2, [pc, #12]	; (3e98 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    3e8c:	9b03      	ldr	r3, [sp, #12]
    3e8e:	6193      	str	r3, [r2, #24]
}
    3e90:	bf00      	nop
    3e92:	b004      	add	sp, #16
    3e94:	4770      	bx	lr
    3e96:	bf00      	nop
    3e98:	40064000 	.word	0x40064000

00003e9c <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3e9c:	b084      	sub	sp, #16
    3e9e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    3ea0:	4b09      	ldr	r3, [pc, #36]	; (3ec8 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    3ea2:	69db      	ldr	r3, [r3, #28]
    3ea4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    3ea6:	9b03      	ldr	r3, [sp, #12]
    3ea8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3eac:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    3eae:	9b01      	ldr	r3, [sp, #4]
    3eb0:	685b      	ldr	r3, [r3, #4]
    3eb2:	3b01      	subs	r3, #1
    3eb4:	041b      	lsls	r3, r3, #16
    3eb6:	9a03      	ldr	r2, [sp, #12]
    3eb8:	4313      	orrs	r3, r2
    3eba:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3ebc:	4a02      	ldr	r2, [pc, #8]	; (3ec8 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    3ebe:	9b03      	ldr	r3, [sp, #12]
    3ec0:	61d3      	str	r3, [r2, #28]
}
    3ec2:	bf00      	nop
    3ec4:	b004      	add	sp, #16
    3ec6:	4770      	bx	lr
    3ec8:	40064000 	.word	0x40064000

00003ecc <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3ecc:	b084      	sub	sp, #16
    3ece:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    3ed0:	4b09      	ldr	r3, [pc, #36]	; (3ef8 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    3ed2:	69db      	ldr	r3, [r3, #28]
    3ed4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    3ed6:	9b03      	ldr	r3, [sp, #12]
    3ed8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3edc:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    3ede:	9b01      	ldr	r3, [sp, #4]
    3ee0:	685b      	ldr	r3, [r3, #4]
    3ee2:	3b01      	subs	r3, #1
    3ee4:	011b      	lsls	r3, r3, #4
    3ee6:	9a03      	ldr	r2, [sp, #12]
    3ee8:	4313      	orrs	r3, r2
    3eea:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3eec:	4a02      	ldr	r2, [pc, #8]	; (3ef8 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    3eee:	9b03      	ldr	r3, [sp, #12]
    3ef0:	61d3      	str	r3, [r2, #28]
}
    3ef2:	bf00      	nop
    3ef4:	b004      	add	sp, #16
    3ef6:	4770      	bx	lr
    3ef8:	40064000 	.word	0x40064000

00003efc <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3efc:	b084      	sub	sp, #16
    3efe:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    3f00:	4b09      	ldr	r3, [pc, #36]	; (3f28 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    3f02:	69db      	ldr	r3, [r3, #28]
    3f04:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    3f06:	9b03      	ldr	r3, [sp, #12]
    3f08:	f023 030f 	bic.w	r3, r3, #15
    3f0c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    3f0e:	9b01      	ldr	r3, [sp, #4]
    3f10:	685b      	ldr	r3, [r3, #4]
    3f12:	3b01      	subs	r3, #1
    3f14:	9a03      	ldr	r2, [sp, #12]
    3f16:	4313      	orrs	r3, r2
    3f18:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3f1a:	4a03      	ldr	r2, [pc, #12]	; (3f28 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    3f1c:	9b03      	ldr	r3, [sp, #12]
    3f1e:	61d3      	str	r3, [r2, #28]
}
    3f20:	bf00      	nop
    3f22:	b004      	add	sp, #16
    3f24:	4770      	bx	lr
    3f26:	bf00      	nop
    3f28:	40064000 	.word	0x40064000

00003f2c <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    3f2c:	b084      	sub	sp, #16
    3f2e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    3f30:	4b0a      	ldr	r3, [pc, #40]	; (3f5c <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    3f32:	685b      	ldr	r3, [r3, #4]
    3f34:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    3f36:	9b03      	ldr	r3, [sp, #12]
    3f38:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3f3c:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    3f3e:	9b01      	ldr	r3, [sp, #4]
    3f40:	685b      	ldr	r3, [r3, #4]
    3f42:	3b01      	subs	r3, #1
    3f44:	021b      	lsls	r3, r3, #8
    3f46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    3f4a:	9a03      	ldr	r2, [sp, #12]
    3f4c:	4313      	orrs	r3, r2
    3f4e:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3f50:	4a02      	ldr	r2, [pc, #8]	; (3f5c <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    3f52:	9b03      	ldr	r3, [sp, #12]
    3f54:	6053      	str	r3, [r2, #4]
}
    3f56:	bf00      	nop
    3f58:	b004      	add	sp, #16
    3f5a:	4770      	bx	lr
    3f5c:	40048000 	.word	0x40048000

00003f60 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3f60:	b084      	sub	sp, #16
    3f62:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    3f64:	4919      	ldr	r1, [pc, #100]	; (3fcc <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    3f66:	9b01      	ldr	r3, [sp, #4]
    3f68:	681a      	ldr	r2, [r3, #0]
    3f6a:	4819      	ldr	r0, [pc, #100]	; (3fd0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    3f6c:	4613      	mov	r3, r2
    3f6e:	00db      	lsls	r3, r3, #3
    3f70:	4413      	add	r3, r2
    3f72:	4403      	add	r3, r0
    3f74:	3305      	adds	r3, #5
    3f76:	781b      	ldrb	r3, [r3, #0]
    3f78:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3f7c:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    3f7e:	9b03      	ldr	r3, [sp, #12]
    3f80:	f023 030f 	bic.w	r3, r3, #15
    3f84:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    3f86:	9b01      	ldr	r3, [sp, #4]
    3f88:	685b      	ldr	r3, [r3, #4]
    3f8a:	3b01      	subs	r3, #1
    3f8c:	f003 0307 	and.w	r3, r3, #7
    3f90:	9a03      	ldr	r2, [sp, #12]
    3f92:	4313      	orrs	r3, r2
    3f94:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    3f96:	9b01      	ldr	r3, [sp, #4]
    3f98:	7a1b      	ldrb	r3, [r3, #8]
    3f9a:	3b01      	subs	r3, #1
    3f9c:	00db      	lsls	r3, r3, #3
    3f9e:	f003 0308 	and.w	r3, r3, #8
    3fa2:	9a03      	ldr	r2, [sp, #12]
    3fa4:	4313      	orrs	r3, r2
    3fa6:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    3fa8:	4908      	ldr	r1, [pc, #32]	; (3fcc <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    3faa:	9b01      	ldr	r3, [sp, #4]
    3fac:	681a      	ldr	r2, [r3, #0]
    3fae:	4808      	ldr	r0, [pc, #32]	; (3fd0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    3fb0:	4613      	mov	r3, r2
    3fb2:	00db      	lsls	r3, r3, #3
    3fb4:	4413      	add	r3, r2
    3fb6:	4403      	add	r3, r0
    3fb8:	3305      	adds	r3, #5
    3fba:	781b      	ldrb	r3, [r3, #0]
    3fbc:	461a      	mov	r2, r3
    3fbe:	9b03      	ldr	r3, [sp, #12]
    3fc0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    3fc4:	bf00      	nop
    3fc6:	b004      	add	sp, #16
    3fc8:	4770      	bx	lr
    3fca:	bf00      	nop
    3fcc:	40065000 	.word	0x40065000
    3fd0:	0001993c 	.word	0x0001993c

00003fd4 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3fd4:	b084      	sub	sp, #16
    3fd6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3fd8:	4b10      	ldr	r3, [pc, #64]	; (401c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3fda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3fdc:	4a0f      	ldr	r2, [pc, #60]	; (401c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3fde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    3fe2:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    3fe4:	4b0d      	ldr	r3, [pc, #52]	; (401c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3fe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3fe8:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    3fea:	9b03      	ldr	r3, [sp, #12]
    3fec:	f023 030f 	bic.w	r3, r3, #15
    3ff0:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    3ff2:	9b01      	ldr	r3, [sp, #4]
    3ff4:	685b      	ldr	r3, [r3, #4]
    3ff6:	3b01      	subs	r3, #1
    3ff8:	005b      	lsls	r3, r3, #1
    3ffa:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    3ffe:	9b01      	ldr	r3, [sp, #4]
    4000:	7a1b      	ldrb	r3, [r3, #8]
    4002:	3b01      	subs	r3, #1
    4004:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    4008:	4313      	orrs	r3, r2
    400a:	9a03      	ldr	r2, [sp, #12]
    400c:	4313      	orrs	r3, r2
    400e:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    4010:	4a02      	ldr	r2, [pc, #8]	; (401c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    4012:	9b03      	ldr	r3, [sp, #12]
    4014:	6693      	str	r3, [r2, #104]	; 0x68
}
    4016:	bf00      	nop
    4018:	b004      	add	sp, #16
    401a:	4770      	bx	lr
    401c:	40048000 	.word	0x40048000

00004020 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    4020:	b082      	sub	sp, #8
    4022:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4024:	bf00      	nop
    4026:	b002      	add	sp, #8
    4028:	4770      	bx	lr
	...

0000402c <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    402c:	b082      	sub	sp, #8
    402e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4030:	bf00      	nop
    4032:	b002      	add	sp, #8
    4034:	4770      	bx	lr

00004036 <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    4036:	b082      	sub	sp, #8
    4038:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    403a:	bf00      	nop
    403c:	b002      	add	sp, #8
    403e:	4770      	bx	lr

00004040 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    4040:	b500      	push	{lr}
    4042:	b083      	sub	sp, #12
    4044:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4046:	9b01      	ldr	r3, [sp, #4]
    4048:	2b00      	cmp	r3, #0
    404a:	d002      	beq.n	4052 <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    404c:	9801      	ldr	r0, [sp, #4]
    404e:	f000 f86a 	bl	4126 <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4052:	bf00      	nop
    4054:	b003      	add	sp, #12
    4056:	f85d fb04 	ldr.w	pc, [sp], #4

0000405a <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    405a:	b500      	push	{lr}
    405c:	b083      	sub	sp, #12
    405e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4060:	9b01      	ldr	r3, [sp, #4]
    4062:	2b00      	cmp	r3, #0
    4064:	d002      	beq.n	406c <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    4066:	9801      	ldr	r0, [sp, #4]
    4068:	f000 f884 	bl	4174 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    406c:	bf00      	nop
    406e:	b003      	add	sp, #12
    4070:	f85d fb04 	ldr.w	pc, [sp], #4

00004074 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    4074:	b500      	push	{lr}
    4076:	b089      	sub	sp, #36	; 0x24
    4078:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    407a:	2300      	movs	r3, #0
    407c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    4080:	9b01      	ldr	r3, [sp, #4]
    4082:	2b00      	cmp	r3, #0
    4084:	d031      	beq.n	40ea <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    4086:	4b1b      	ldr	r3, [pc, #108]	; (40f4 <Clock_Ip_CompleteSOSC+0x80>)
    4088:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    408c:	f003 0301 	and.w	r3, r3, #1
    4090:	2b00      	cmp	r3, #0
    4092:	d02a      	beq.n	40ea <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4094:	aa03      	add	r2, sp, #12
    4096:	a904      	add	r1, sp, #16
    4098:	a805      	add	r0, sp, #20
    409a:	f24c 3350 	movw	r3, #50000	; 0xc350
    409e:	f7ff fd1d 	bl	3adc <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    40a2:	4b14      	ldr	r3, [pc, #80]	; (40f4 <Clock_Ip_CompleteSOSC+0x80>)
    40a4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    40a8:	0e1b      	lsrs	r3, r3, #24
    40aa:	f003 0301 	and.w	r3, r3, #1
    40ae:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    40b0:	9a03      	ldr	r2, [sp, #12]
    40b2:	a904      	add	r1, sp, #16
    40b4:	ab05      	add	r3, sp, #20
    40b6:	4618      	mov	r0, r3
    40b8:	f7ff fd2a 	bl	3b10 <Clock_Ip_TimeoutExpired>
    40bc:	4603      	mov	r3, r0
    40be:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    40c2:	9b06      	ldr	r3, [sp, #24]
    40c4:	2b00      	cmp	r3, #0
    40c6:	d106      	bne.n	40d6 <Clock_Ip_CompleteSOSC+0x62>
    40c8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    40cc:	f083 0301 	eor.w	r3, r3, #1
    40d0:	b2db      	uxtb	r3, r3
    40d2:	2b00      	cmp	r3, #0
    40d4:	d1e5      	bne.n	40a2 <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    40d6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    40da:	2b00      	cmp	r3, #0
    40dc:	d005      	beq.n	40ea <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    40de:	9b01      	ldr	r3, [sp, #4]
    40e0:	681b      	ldr	r3, [r3, #0]
    40e2:	4619      	mov	r1, r3
    40e4:	2001      	movs	r0, #1
    40e6:	f7ff fce9 	bl	3abc <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    40ea:	bf00      	nop
    40ec:	b009      	add	sp, #36	; 0x24
    40ee:	f85d fb04 	ldr.w	pc, [sp], #4
    40f2:	bf00      	nop
    40f4:	40064000 	.word	0x40064000

000040f8 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    40f8:	b500      	push	{lr}
    40fa:	b083      	sub	sp, #12
    40fc:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    40fe:	9801      	ldr	r0, [sp, #4]
    4100:	f000 f8c0 	bl	4284 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    4104:	bf00      	nop
    4106:	b003      	add	sp, #12
    4108:	f85d fb04 	ldr.w	pc, [sp], #4

0000410c <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    410c:	b500      	push	{lr}
    410e:	b083      	sub	sp, #12
    4110:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4112:	9b01      	ldr	r3, [sp, #4]
    4114:	2b00      	cmp	r3, #0
    4116:	d002      	beq.n	411e <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    4118:	9801      	ldr	r0, [sp, #4]
    411a:	f000 f8c3 	bl	42a4 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    411e:	bf00      	nop
    4120:	b003      	add	sp, #12
    4122:	f85d fb04 	ldr.w	pc, [sp], #4

00004126 <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    4126:	b082      	sub	sp, #8
    4128:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    412a:	4b11      	ldr	r3, [pc, #68]	; (4170 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    412c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4130:	4a0f      	ldr	r2, [pc, #60]	; (4170 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    4132:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4136:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    413a:	4b0d      	ldr	r3, [pc, #52]	; (4170 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    413c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4140:	4a0b      	ldr	r2, [pc, #44]	; (4170 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    4142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    4146:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    414a:	4b09      	ldr	r3, [pc, #36]	; (4170 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    414c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4150:	4a07      	ldr	r2, [pc, #28]	; (4170 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    4152:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    4156:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    415a:	4b05      	ldr	r3, [pc, #20]	; (4170 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    415c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4160:	4a03      	ldr	r2, [pc, #12]	; (4170 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    4162:	f023 0301 	bic.w	r3, r3, #1
    4166:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    416a:	bf00      	nop
    416c:	b002      	add	sp, #8
    416e:	4770      	bx	lr
    4170:	40064000 	.word	0x40064000

00004174 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    4174:	b082      	sub	sp, #8
    4176:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    4178:	9b01      	ldr	r3, [sp, #4]
    417a:	891b      	ldrh	r3, [r3, #8]
    417c:	2b01      	cmp	r3, #1
    417e:	d174      	bne.n	426a <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    4180:	9b01      	ldr	r3, [sp, #4]
    4182:	7bdb      	ldrb	r3, [r3, #15]
    4184:	2b00      	cmp	r3, #0
    4186:	d002      	beq.n	418e <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    4188:	2b01      	cmp	r3, #1
    418a:	d009      	beq.n	41a0 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    418c:	e011      	b.n	41b2 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    418e:	4b39      	ldr	r3, [pc, #228]	; (4274 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    4190:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    4194:	4a37      	ldr	r2, [pc, #220]	; (4274 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    4196:	f023 0308 	bic.w	r3, r3, #8
    419a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    419e:	e008      	b.n	41b2 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    41a0:	4b34      	ldr	r3, [pc, #208]	; (4274 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    41a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    41a6:	4a33      	ldr	r2, [pc, #204]	; (4274 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    41a8:	f043 0308 	orr.w	r3, r3, #8
    41ac:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    41b0:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    41b2:	4b30      	ldr	r3, [pc, #192]	; (4274 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    41b4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    41b8:	4a2e      	ldr	r2, [pc, #184]	; (4274 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    41ba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    41be:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    41c2:	9b01      	ldr	r3, [sp, #4]
    41c4:	685b      	ldr	r3, [r3, #4]
    41c6:	4a2c      	ldr	r2, [pc, #176]	; (4278 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    41c8:	4293      	cmp	r3, r2
    41ca:	d90d      	bls.n	41e8 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    41cc:	9b01      	ldr	r3, [sp, #4]
    41ce:	685b      	ldr	r3, [r3, #4]
    41d0:	4a2a      	ldr	r2, [pc, #168]	; (427c <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    41d2:	4293      	cmp	r3, r2
    41d4:	d208      	bcs.n	41e8 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    41d6:	4b27      	ldr	r3, [pc, #156]	; (4274 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    41d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    41dc:	4a25      	ldr	r2, [pc, #148]	; (4274 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    41de:	f043 0320 	orr.w	r3, r3, #32
    41e2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    41e6:	e007      	b.n	41f8 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    41e8:	4b22      	ldr	r3, [pc, #136]	; (4274 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    41ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    41ee:	4a21      	ldr	r2, [pc, #132]	; (4274 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    41f0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    41f4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    41f8:	9b01      	ldr	r3, [sp, #4]
    41fa:	7b1b      	ldrb	r3, [r3, #12]
    41fc:	2b00      	cmp	r3, #0
    41fe:	d108      	bne.n	4212 <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    4200:	4b1c      	ldr	r3, [pc, #112]	; (4274 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    4202:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    4206:	4a1b      	ldr	r2, [pc, #108]	; (4274 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    4208:	f043 0304 	orr.w	r3, r3, #4
    420c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    4210:	e007      	b.n	4222 <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    4212:	4b18      	ldr	r3, [pc, #96]	; (4274 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    4214:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    4218:	4a16      	ldr	r2, [pc, #88]	; (4274 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    421a:	f023 0304 	bic.w	r3, r3, #4
    421e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    4222:	9b01      	ldr	r3, [sp, #4]
    4224:	7c1b      	ldrb	r3, [r3, #16]
    4226:	2b02      	cmp	r3, #2
    4228:	d011      	beq.n	424e <Clock_Ip_SetSOSC_TrustedCall+0xda>
    422a:	2b02      	cmp	r3, #2
    422c:	dc14      	bgt.n	4258 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    422e:	2b00      	cmp	r3, #0
    4230:	d002      	beq.n	4238 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    4232:	2b01      	cmp	r3, #1
    4234:	d005      	beq.n	4242 <Clock_Ip_SetSOSC_TrustedCall+0xce>
    4236:	e00f      	b.n	4258 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    4238:	4b0e      	ldr	r3, [pc, #56]	; (4274 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    423a:	2201      	movs	r2, #1
    423c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    4240:	e014      	b.n	426c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    4242:	4b0c      	ldr	r3, [pc, #48]	; (4274 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    4244:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    4248:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    424c:	e00e      	b.n	426c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    424e:	4b09      	ldr	r3, [pc, #36]	; (4274 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    4250:	4a0b      	ldr	r2, [pc, #44]	; (4280 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    4252:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    4256:	e009      	b.n	426c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    4258:	4b06      	ldr	r3, [pc, #24]	; (4274 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    425a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    425e:	4a05      	ldr	r2, [pc, #20]	; (4274 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    4260:	f043 0301 	orr.w	r3, r3, #1
    4264:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    4268:	e000      	b.n	426c <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    426a:	bf00      	nop
}
    426c:	bf00      	nop
    426e:	b002      	add	sp, #8
    4270:	4770      	bx	lr
    4272:	bf00      	nop
    4274:	40064000 	.word	0x40064000
    4278:	003d08ff 	.word	0x003d08ff
    427c:	007a1200 	.word	0x007a1200
    4280:	00030001 	.word	0x00030001

00004284 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    4284:	b082      	sub	sp, #8
    4286:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    4288:	4b05      	ldr	r3, [pc, #20]	; (42a0 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    428a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    428e:	4a04      	ldr	r2, [pc, #16]	; (42a0 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    4290:	f023 0301 	bic.w	r3, r3, #1
    4294:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    4298:	bf00      	nop
    429a:	b002      	add	sp, #8
    429c:	4770      	bx	lr
    429e:	bf00      	nop
    42a0:	40064000 	.word	0x40064000

000042a4 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    42a4:	b082      	sub	sp, #8
    42a6:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    42a8:	9b01      	ldr	r3, [sp, #4]
    42aa:	891b      	ldrh	r3, [r3, #8]
    42ac:	2b01      	cmp	r3, #1
    42ae:	d107      	bne.n	42c0 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    42b0:	4b05      	ldr	r3, [pc, #20]	; (42c8 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    42b2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    42b6:	4a04      	ldr	r2, [pc, #16]	; (42c8 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    42b8:	f043 0301 	orr.w	r3, r3, #1
    42bc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    42c0:	bf00      	nop
    42c2:	b002      	add	sp, #8
    42c4:	4770      	bx	lr
    42c6:	bf00      	nop
    42c8:	40064000 	.word	0x40064000

000042cc <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    42cc:	b082      	sub	sp, #8
    42ce:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    42d0:	bf00      	nop
    42d2:	b002      	add	sp, #8
    42d4:	4770      	bx	lr

000042d6 <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    42d6:	b082      	sub	sp, #8
    42d8:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    42da:	2300      	movs	r3, #0
}
    42dc:	4618      	mov	r0, r3
    42de:	b002      	add	sp, #8
    42e0:	4770      	bx	lr

000042e2 <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    42e2:	b082      	sub	sp, #8
    42e4:	9001      	str	r0, [sp, #4]
    42e6:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    42e8:	bf00      	nop
    42ea:	b002      	add	sp, #8
    42ec:	4770      	bx	lr
	...

000042f0 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    42f0:	b082      	sub	sp, #8
    42f2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    42f4:	bf00      	nop
    42f6:	b002      	add	sp, #8
    42f8:	4770      	bx	lr

000042fa <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    42fa:	b082      	sub	sp, #8
    42fc:	9001      	str	r0, [sp, #4]
    42fe:	460b      	mov	r3, r1
    4300:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    4304:	bf00      	nop
    4306:	b002      	add	sp, #8
    4308:	4770      	bx	lr

0000430a <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    430a:	b500      	push	{lr}
    430c:	b083      	sub	sp, #12
    430e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4310:	9b01      	ldr	r3, [sp, #4]
    4312:	2b00      	cmp	r3, #0
    4314:	d002      	beq.n	431c <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    4316:	9801      	ldr	r0, [sp, #4]
    4318:	f000 f8e7 	bl	44ea <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    431c:	bf00      	nop
    431e:	b003      	add	sp, #12
    4320:	f85d fb04 	ldr.w	pc, [sp], #4

00004324 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    4324:	b500      	push	{lr}
    4326:	b085      	sub	sp, #20
    4328:	9001      	str	r0, [sp, #4]
    432a:	460b      	mov	r3, r1
    432c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    4330:	9b01      	ldr	r3, [sp, #4]
    4332:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    4334:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4338:	2b00      	cmp	r3, #0
    433a:	d003      	beq.n	4344 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    433c:	2300      	movs	r3, #0
    433e:	f8ad 300c 	strh.w	r3, [sp, #12]
    4342:	e002      	b.n	434a <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    4344:	2301      	movs	r3, #1
    4346:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    434a:	ab02      	add	r3, sp, #8
    434c:	4618      	mov	r0, r3
    434e:	f7ff ffdc 	bl	430a <Clock_Ip_ClockSetSimLPO1KEnable>
}
    4352:	bf00      	nop
    4354:	b005      	add	sp, #20
    4356:	f85d fb04 	ldr.w	pc, [sp], #4

0000435a <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    435a:	b500      	push	{lr}
    435c:	b083      	sub	sp, #12
    435e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4360:	9b01      	ldr	r3, [sp, #4]
    4362:	2b00      	cmp	r3, #0
    4364:	d002      	beq.n	436c <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    4366:	9801      	ldr	r0, [sp, #4]
    4368:	f000 f8d6 	bl	4518 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    436c:	bf00      	nop
    436e:	b003      	add	sp, #12
    4370:	f85d fb04 	ldr.w	pc, [sp], #4

00004374 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    4374:	b500      	push	{lr}
    4376:	b085      	sub	sp, #20
    4378:	9001      	str	r0, [sp, #4]
    437a:	460b      	mov	r3, r1
    437c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    4380:	9b01      	ldr	r3, [sp, #4]
    4382:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    4384:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4388:	2b00      	cmp	r3, #0
    438a:	d003      	beq.n	4394 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    438c:	2300      	movs	r3, #0
    438e:	f8ad 300c 	strh.w	r3, [sp, #12]
    4392:	e002      	b.n	439a <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    4394:	2301      	movs	r3, #1
    4396:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    439a:	ab02      	add	r3, sp, #8
    439c:	4618      	mov	r0, r3
    439e:	f7ff ffdc 	bl	435a <Clock_Ip_ClockSetSimLPO32KEnable>
}
    43a2:	bf00      	nop
    43a4:	b005      	add	sp, #20
    43a6:	f85d fb04 	ldr.w	pc, [sp], #4

000043aa <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    43aa:	b500      	push	{lr}
    43ac:	b083      	sub	sp, #12
    43ae:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    43b0:	9b01      	ldr	r3, [sp, #4]
    43b2:	2b00      	cmp	r3, #0
    43b4:	d002      	beq.n	43bc <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    43b6:	9801      	ldr	r0, [sp, #4]
    43b8:	f000 f8c6 	bl	4548 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    43bc:	bf00      	nop
    43be:	b003      	add	sp, #12
    43c0:	f85d fb04 	ldr.w	pc, [sp], #4

000043c4 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    43c4:	b500      	push	{lr}
    43c6:	b085      	sub	sp, #20
    43c8:	9001      	str	r0, [sp, #4]
    43ca:	460b      	mov	r3, r1
    43cc:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    43d0:	9b01      	ldr	r3, [sp, #4]
    43d2:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    43d4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    43d8:	2b00      	cmp	r3, #0
    43da:	d003      	beq.n	43e4 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    43dc:	2300      	movs	r3, #0
    43de:	f8ad 300c 	strh.w	r3, [sp, #12]
    43e2:	e002      	b.n	43ea <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    43e4:	2301      	movs	r3, #1
    43e6:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    43ea:	ab02      	add	r3, sp, #8
    43ec:	4618      	mov	r0, r3
    43ee:	f7ff ffdc 	bl	43aa <Clock_Ip_ClockSetSimClkoutEnable>
}
    43f2:	bf00      	nop
    43f4:	b005      	add	sp, #20
    43f6:	f85d fb04 	ldr.w	pc, [sp], #4

000043fa <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    43fa:	b500      	push	{lr}
    43fc:	b083      	sub	sp, #12
    43fe:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4400:	9b01      	ldr	r3, [sp, #4]
    4402:	2b00      	cmp	r3, #0
    4404:	d002      	beq.n	440c <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    4406:	9801      	ldr	r0, [sp, #4]
    4408:	f000 f8b6 	bl	4578 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    440c:	bf00      	nop
    440e:	b003      	add	sp, #12
    4410:	f85d fb04 	ldr.w	pc, [sp], #4

00004414 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    4414:	b500      	push	{lr}
    4416:	b085      	sub	sp, #20
    4418:	9001      	str	r0, [sp, #4]
    441a:	460b      	mov	r3, r1
    441c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    4420:	9b01      	ldr	r3, [sp, #4]
    4422:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    4424:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4428:	2b00      	cmp	r3, #0
    442a:	d003      	beq.n	4434 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    442c:	2300      	movs	r3, #0
    442e:	f8ad 300c 	strh.w	r3, [sp, #12]
    4432:	e002      	b.n	443a <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    4434:	2301      	movs	r3, #1
    4436:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    443a:	ab02      	add	r3, sp, #8
    443c:	4618      	mov	r0, r3
    443e:	f7ff ffdc 	bl	43fa <Clock_Ip_ClockSetPccCgcEnable>
}
    4442:	bf00      	nop
    4444:	b005      	add	sp, #20
    4446:	f85d fb04 	ldr.w	pc, [sp], #4

0000444a <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    444a:	b500      	push	{lr}
    444c:	b083      	sub	sp, #12
    444e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4450:	9b01      	ldr	r3, [sp, #4]
    4452:	2b00      	cmp	r3, #0
    4454:	d002      	beq.n	445c <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    4456:	9801      	ldr	r0, [sp, #4]
    4458:	f000 f8bc 	bl	45d4 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    445c:	bf00      	nop
    445e:	b003      	add	sp, #12
    4460:	f85d fb04 	ldr.w	pc, [sp], #4

00004464 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    4464:	b500      	push	{lr}
    4466:	b085      	sub	sp, #20
    4468:	9001      	str	r0, [sp, #4]
    446a:	460b      	mov	r3, r1
    446c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    4470:	9b01      	ldr	r3, [sp, #4]
    4472:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    4474:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4478:	2b00      	cmp	r3, #0
    447a:	d003      	beq.n	4484 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    447c:	2300      	movs	r3, #0
    447e:	f8ad 300c 	strh.w	r3, [sp, #12]
    4482:	e002      	b.n	448a <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    4484:	2301      	movs	r3, #1
    4486:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    448a:	ab02      	add	r3, sp, #8
    448c:	4618      	mov	r0, r3
    448e:	f7ff ffdc 	bl	444a <Clock_Ip_ClockSetSimGate>
}
    4492:	bf00      	nop
    4494:	b005      	add	sp, #20
    4496:	f85d fb04 	ldr.w	pc, [sp], #4

0000449a <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    449a:	b500      	push	{lr}
    449c:	b083      	sub	sp, #12
    449e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    44a0:	9b01      	ldr	r3, [sp, #4]
    44a2:	2b00      	cmp	r3, #0
    44a4:	d002      	beq.n	44ac <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    44a6:	9801      	ldr	r0, [sp, #4]
    44a8:	f000 f8c0 	bl	462c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    44ac:	bf00      	nop
    44ae:	b003      	add	sp, #12
    44b0:	f85d fb04 	ldr.w	pc, [sp], #4

000044b4 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    44b4:	b500      	push	{lr}
    44b6:	b085      	sub	sp, #20
    44b8:	9001      	str	r0, [sp, #4]
    44ba:	460b      	mov	r3, r1
    44bc:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    44c0:	9b01      	ldr	r3, [sp, #4]
    44c2:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    44c4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    44c8:	2b00      	cmp	r3, #0
    44ca:	d003      	beq.n	44d4 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    44cc:	2300      	movs	r3, #0
    44ce:	f8ad 300c 	strh.w	r3, [sp, #12]
    44d2:	e002      	b.n	44da <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    44d4:	2301      	movs	r3, #1
    44d6:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    44da:	ab02      	add	r3, sp, #8
    44dc:	4618      	mov	r0, r3
    44de:	f7ff ffdc 	bl	449a <Clock_Ip_ClockSetSimTraceEnable>
}
    44e2:	bf00      	nop
    44e4:	b005      	add	sp, #20
    44e6:	f85d fb04 	ldr.w	pc, [sp], #4

000044ea <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    44ea:	b084      	sub	sp, #16
    44ec:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    44ee:	4b09      	ldr	r3, [pc, #36]	; (4514 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    44f0:	691b      	ldr	r3, [r3, #16]
    44f2:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    44f4:	9b03      	ldr	r3, [sp, #12]
    44f6:	f023 0301 	bic.w	r3, r3, #1
    44fa:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    44fc:	9b01      	ldr	r3, [sp, #4]
    44fe:	889b      	ldrh	r3, [r3, #4]
    4500:	461a      	mov	r2, r3
    4502:	9b03      	ldr	r3, [sp, #12]
    4504:	4313      	orrs	r3, r2
    4506:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    4508:	4a02      	ldr	r2, [pc, #8]	; (4514 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    450a:	9b03      	ldr	r3, [sp, #12]
    450c:	6113      	str	r3, [r2, #16]
}
    450e:	bf00      	nop
    4510:	b004      	add	sp, #16
    4512:	4770      	bx	lr
    4514:	40048000 	.word	0x40048000

00004518 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    4518:	b084      	sub	sp, #16
    451a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    451c:	4b09      	ldr	r3, [pc, #36]	; (4544 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    451e:	691b      	ldr	r3, [r3, #16]
    4520:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    4522:	9b03      	ldr	r3, [sp, #12]
    4524:	f023 0302 	bic.w	r3, r3, #2
    4528:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    452a:	9b01      	ldr	r3, [sp, #4]
    452c:	889b      	ldrh	r3, [r3, #4]
    452e:	005b      	lsls	r3, r3, #1
    4530:	9a03      	ldr	r2, [sp, #12]
    4532:	4313      	orrs	r3, r2
    4534:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    4536:	4a03      	ldr	r2, [pc, #12]	; (4544 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    4538:	9b03      	ldr	r3, [sp, #12]
    453a:	6113      	str	r3, [r2, #16]
}
    453c:	bf00      	nop
    453e:	b004      	add	sp, #16
    4540:	4770      	bx	lr
    4542:	bf00      	nop
    4544:	40048000 	.word	0x40048000

00004548 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    4548:	b084      	sub	sp, #16
    454a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    454c:	4b09      	ldr	r3, [pc, #36]	; (4574 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    454e:	685b      	ldr	r3, [r3, #4]
    4550:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    4552:	9b03      	ldr	r3, [sp, #12]
    4554:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    4558:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    455a:	9b01      	ldr	r3, [sp, #4]
    455c:	889b      	ldrh	r3, [r3, #4]
    455e:	02db      	lsls	r3, r3, #11
    4560:	9a03      	ldr	r2, [sp, #12]
    4562:	4313      	orrs	r3, r2
    4564:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    4566:	4a03      	ldr	r2, [pc, #12]	; (4574 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    4568:	9b03      	ldr	r3, [sp, #12]
    456a:	6053      	str	r3, [r2, #4]
}
    456c:	bf00      	nop
    456e:	b004      	add	sp, #16
    4570:	4770      	bx	lr
    4572:	bf00      	nop
    4574:	40048000 	.word	0x40048000

00004578 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    4578:	b084      	sub	sp, #16
    457a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    457c:	4913      	ldr	r1, [pc, #76]	; (45cc <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    457e:	9b01      	ldr	r3, [sp, #4]
    4580:	681a      	ldr	r2, [r3, #0]
    4582:	4813      	ldr	r0, [pc, #76]	; (45d0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    4584:	4613      	mov	r3, r2
    4586:	00db      	lsls	r3, r3, #3
    4588:	4413      	add	r3, r2
    458a:	4403      	add	r3, r0
    458c:	3306      	adds	r3, #6
    458e:	781b      	ldrb	r3, [r3, #0]
    4590:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    4594:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    4596:	9b03      	ldr	r3, [sp, #12]
    4598:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    459c:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    459e:	9b01      	ldr	r3, [sp, #4]
    45a0:	889b      	ldrh	r3, [r3, #4]
    45a2:	079b      	lsls	r3, r3, #30
    45a4:	9a03      	ldr	r2, [sp, #12]
    45a6:	4313      	orrs	r3, r2
    45a8:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    45aa:	4908      	ldr	r1, [pc, #32]	; (45cc <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    45ac:	9b01      	ldr	r3, [sp, #4]
    45ae:	681a      	ldr	r2, [r3, #0]
    45b0:	4807      	ldr	r0, [pc, #28]	; (45d0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    45b2:	4613      	mov	r3, r2
    45b4:	00db      	lsls	r3, r3, #3
    45b6:	4413      	add	r3, r2
    45b8:	4403      	add	r3, r0
    45ba:	3306      	adds	r3, #6
    45bc:	781b      	ldrb	r3, [r3, #0]
    45be:	461a      	mov	r2, r3
    45c0:	9b03      	ldr	r3, [sp, #12]
    45c2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    45c6:	bf00      	nop
    45c8:	b004      	add	sp, #16
    45ca:	4770      	bx	lr
    45cc:	40065000 	.word	0x40065000
    45d0:	0001993c 	.word	0x0001993c

000045d4 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    45d4:	b086      	sub	sp, #24
    45d6:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    45d8:	9b01      	ldr	r3, [sp, #4]
    45da:	889b      	ldrh	r3, [r3, #4]
    45dc:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    45de:	9b01      	ldr	r3, [sp, #4]
    45e0:	681a      	ldr	r2, [r3, #0]
    45e2:	4910      	ldr	r1, [pc, #64]	; (4624 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    45e4:	4613      	mov	r3, r2
    45e6:	00db      	lsls	r3, r3, #3
    45e8:	4413      	add	r3, r2
    45ea:	440b      	add	r3, r1
    45ec:	3306      	adds	r3, #6
    45ee:	781b      	ldrb	r3, [r3, #0]
    45f0:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    45f2:	4b0d      	ldr	r3, [pc, #52]	; (4628 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    45f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    45f6:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    45f8:	2201      	movs	r2, #1
    45fa:	9b04      	ldr	r3, [sp, #16]
    45fc:	fa02 f303 	lsl.w	r3, r2, r3
    4600:	43db      	mvns	r3, r3
    4602:	9a03      	ldr	r2, [sp, #12]
    4604:	4013      	ands	r3, r2
    4606:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    4608:	9a05      	ldr	r2, [sp, #20]
    460a:	9b04      	ldr	r3, [sp, #16]
    460c:	fa02 f303 	lsl.w	r3, r2, r3
    4610:	9a03      	ldr	r2, [sp, #12]
    4612:	4313      	orrs	r3, r2
    4614:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    4616:	4a04      	ldr	r2, [pc, #16]	; (4628 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    4618:	9b03      	ldr	r3, [sp, #12]
    461a:	6413      	str	r3, [r2, #64]	; 0x40
}
    461c:	bf00      	nop
    461e:	b006      	add	sp, #24
    4620:	4770      	bx	lr
    4622:	bf00      	nop
    4624:	0001993c 	.word	0x0001993c
    4628:	40048000 	.word	0x40048000

0000462c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    462c:	b084      	sub	sp, #16
    462e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    4630:	4b0a      	ldr	r3, [pc, #40]	; (465c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    4632:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    4634:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    4636:	9b01      	ldr	r3, [sp, #4]
    4638:	889b      	ldrh	r3, [r3, #4]
    463a:	2b01      	cmp	r3, #1
    463c:	d104      	bne.n	4648 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    463e:	9b03      	ldr	r3, [sp, #12]
    4640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4644:	9303      	str	r3, [sp, #12]
    4646:	e003      	b.n	4650 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    4648:	9b03      	ldr	r3, [sp, #12]
    464a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    464e:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    4650:	4a02      	ldr	r2, [pc, #8]	; (465c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    4652:	9b03      	ldr	r3, [sp, #12]
    4654:	6693      	str	r3, [r2, #104]	; 0x68
}
    4656:	bf00      	nop
    4658:	b004      	add	sp, #16
    465a:	4770      	bx	lr
    465c:	40048000 	.word	0x40048000

00004660 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    4660:	b082      	sub	sp, #8
    4662:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4664:	bf00      	nop
    4666:	b002      	add	sp, #8
    4668:	4770      	bx	lr

0000466a <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    466a:	b082      	sub	sp, #8
    466c:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    466e:	bf00      	nop
    4670:	b002      	add	sp, #8
    4672:	4770      	bx	lr

00004674 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    4674:	b500      	push	{lr}
    4676:	b083      	sub	sp, #12
    4678:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    467a:	9b01      	ldr	r3, [sp, #4]
    467c:	2b00      	cmp	r3, #0
    467e:	d002      	beq.n	4686 <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    4680:	9801      	ldr	r0, [sp, #4]
    4682:	f000 f8d1 	bl	4828 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4686:	bf00      	nop
    4688:	b003      	add	sp, #12
    468a:	f85d fb04 	ldr.w	pc, [sp], #4

0000468e <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    468e:	b500      	push	{lr}
    4690:	b083      	sub	sp, #12
    4692:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4694:	9b01      	ldr	r3, [sp, #4]
    4696:	2b00      	cmp	r3, #0
    4698:	d002      	beq.n	46a0 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    469a:	9801      	ldr	r0, [sp, #4]
    469c:	f000 f950 	bl	4940 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    46a0:	bf00      	nop
    46a2:	b003      	add	sp, #12
    46a4:	f85d fb04 	ldr.w	pc, [sp], #4

000046a8 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    46a8:	b500      	push	{lr}
    46aa:	b083      	sub	sp, #12
    46ac:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    46ae:	9801      	ldr	r0, [sp, #4]
    46b0:	f000 f98e 	bl	49d0 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    46b4:	bf00      	nop
    46b6:	b003      	add	sp, #12
    46b8:	f85d fb04 	ldr.w	pc, [sp], #4

000046bc <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    46bc:	b500      	push	{lr}
    46be:	b083      	sub	sp, #12
    46c0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    46c2:	9b01      	ldr	r3, [sp, #4]
    46c4:	2b00      	cmp	r3, #0
    46c6:	d002      	beq.n	46ce <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    46c8:	9801      	ldr	r0, [sp, #4]
    46ca:	f000 f999 	bl	4a00 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    46ce:	bf00      	nop
    46d0:	b003      	add	sp, #12
    46d2:	f85d fb04 	ldr.w	pc, [sp], #4

000046d6 <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    46d6:	b500      	push	{lr}
    46d8:	b083      	sub	sp, #12
    46da:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    46dc:	9b01      	ldr	r3, [sp, #4]
    46de:	2b00      	cmp	r3, #0
    46e0:	d002      	beq.n	46e8 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    46e2:	9801      	ldr	r0, [sp, #4]
    46e4:	f000 f9b0 	bl	4a48 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    46e8:	bf00      	nop
    46ea:	b003      	add	sp, #12
    46ec:	f85d fb04 	ldr.w	pc, [sp], #4

000046f0 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    46f0:	b500      	push	{lr}
    46f2:	b083      	sub	sp, #12
    46f4:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    46f6:	9801      	ldr	r0, [sp, #4]
    46f8:	f000 f9ba 	bl	4a70 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    46fc:	bf00      	nop
    46fe:	b003      	add	sp, #12
    4700:	f85d fb04 	ldr.w	pc, [sp], #4

00004704 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    4704:	b500      	push	{lr}
    4706:	b083      	sub	sp, #12
    4708:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    470a:	9b01      	ldr	r3, [sp, #4]
    470c:	2b00      	cmp	r3, #0
    470e:	d002      	beq.n	4716 <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    4710:	9801      	ldr	r0, [sp, #4]
    4712:	f000 f9bd 	bl	4a90 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4716:	bf00      	nop
    4718:	b003      	add	sp, #12
    471a:	f85d fb04 	ldr.w	pc, [sp], #4

0000471e <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    471e:	b500      	push	{lr}
    4720:	b083      	sub	sp, #12
    4722:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4724:	9b01      	ldr	r3, [sp, #4]
    4726:	2b00      	cmp	r3, #0
    4728:	d002      	beq.n	4730 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    472a:	9801      	ldr	r0, [sp, #4]
    472c:	f000 f9d4 	bl	4ad8 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4730:	bf00      	nop
    4732:	b003      	add	sp, #12
    4734:	f85d fb04 	ldr.w	pc, [sp], #4

00004738 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    4738:	b500      	push	{lr}
    473a:	b083      	sub	sp, #12
    473c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    473e:	9801      	ldr	r0, [sp, #4]
    4740:	f000 f9de 	bl	4b00 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    4744:	bf00      	nop
    4746:	b003      	add	sp, #12
    4748:	f85d fb04 	ldr.w	pc, [sp], #4

0000474c <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    474c:	b500      	push	{lr}
    474e:	b089      	sub	sp, #36	; 0x24
    4750:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    4752:	2300      	movs	r3, #0
    4754:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    4758:	4b20      	ldr	r3, [pc, #128]	; (47dc <SetInputSouceSytemClock+0x90>)
    475a:	695b      	ldr	r3, [r3, #20]
    475c:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    475e:	9b06      	ldr	r3, [sp, #24]
    4760:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4764:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    4766:	9b01      	ldr	r3, [sp, #4]
    4768:	061b      	lsls	r3, r3, #24
    476a:	9a06      	ldr	r2, [sp, #24]
    476c:	4313      	orrs	r3, r2
    476e:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    4770:	4a1a      	ldr	r2, [pc, #104]	; (47dc <SetInputSouceSytemClock+0x90>)
    4772:	9b06      	ldr	r3, [sp, #24]
    4774:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4776:	aa02      	add	r2, sp, #8
    4778:	a903      	add	r1, sp, #12
    477a:	a804      	add	r0, sp, #16
    477c:	f24c 3350 	movw	r3, #50000	; 0xc350
    4780:	f7ff f9ac 	bl	3adc <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    4784:	4b15      	ldr	r3, [pc, #84]	; (47dc <SetInputSouceSytemClock+0x90>)
    4786:	691b      	ldr	r3, [r3, #16]
    4788:	0e1b      	lsrs	r3, r3, #24
    478a:	f003 030f 	and.w	r3, r3, #15
    478e:	9a01      	ldr	r2, [sp, #4]
    4790:	429a      	cmp	r2, r3
    4792:	bf0c      	ite	eq
    4794:	2301      	moveq	r3, #1
    4796:	2300      	movne	r3, #0
    4798:	b2db      	uxtb	r3, r3
    479a:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    479c:	9a02      	ldr	r2, [sp, #8]
    479e:	a903      	add	r1, sp, #12
    47a0:	ab04      	add	r3, sp, #16
    47a2:	4618      	mov	r0, r3
    47a4:	f7ff f9b4 	bl	3b10 <Clock_Ip_TimeoutExpired>
    47a8:	4603      	mov	r3, r0
    47aa:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    47ae:	9b05      	ldr	r3, [sp, #20]
    47b0:	2b00      	cmp	r3, #0
    47b2:	d106      	bne.n	47c2 <SetInputSouceSytemClock+0x76>
    47b4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    47b8:	f083 0301 	eor.w	r3, r3, #1
    47bc:	b2db      	uxtb	r3, r3
    47be:	2b00      	cmp	r3, #0
    47c0:	d1e0      	bne.n	4784 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    47c2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    47c6:	2b00      	cmp	r3, #0
    47c8:	d003      	beq.n	47d2 <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    47ca:	2105      	movs	r1, #5
    47cc:	2001      	movs	r0, #1
    47ce:	f7ff f975 	bl	3abc <Clock_Ip_ReportClockErrors>
    }
}
    47d2:	bf00      	nop
    47d4:	b009      	add	sp, #36	; 0x24
    47d6:	f85d fb04 	ldr.w	pc, [sp], #4
    47da:	bf00      	nop
    47dc:	40064000 	.word	0x40064000

000047e0 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    47e0:	b500      	push	{lr}
    47e2:	b083      	sub	sp, #12
    47e4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    47e6:	9b01      	ldr	r3, [sp, #4]
    47e8:	2b00      	cmp	r3, #0
    47ea:	d002      	beq.n	47f2 <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    47ec:	9801      	ldr	r0, [sp, #4]
    47ee:	f000 f997 	bl	4b20 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    47f2:	bf00      	nop
    47f4:	b003      	add	sp, #12
    47f6:	f85d fb04 	ldr.w	pc, [sp], #4

000047fa <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    47fa:	b500      	push	{lr}
    47fc:	b083      	sub	sp, #12
    47fe:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4800:	9b01      	ldr	r3, [sp, #4]
    4802:	2b00      	cmp	r3, #0
    4804:	d002      	beq.n	480c <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    4806:	9801      	ldr	r0, [sp, #4]
    4808:	f000 fa7e 	bl	4d08 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    480c:	bf00      	nop
    480e:	b003      	add	sp, #12
    4810:	f85d fb04 	ldr.w	pc, [sp], #4

00004814 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    4814:	b500      	push	{lr}
    4816:	b083      	sub	sp, #12
    4818:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    481a:	9801      	ldr	r0, [sp, #4]
    481c:	f000 fab8 	bl	4d90 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    4820:	bf00      	nop
    4822:	b003      	add	sp, #12
    4824:	f85d fb04 	ldr.w	pc, [sp], #4

00004828 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4828:	b500      	push	{lr}
    482a:	b08b      	sub	sp, #44	; 0x2c
    482c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    482e:	2300      	movs	r3, #0
    4830:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    4834:	9b01      	ldr	r3, [sp, #4]
    4836:	2b00      	cmp	r3, #0
    4838:	d10b      	bne.n	4852 <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    483a:	2305      	movs	r3, #5
    483c:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    483e:	2301      	movs	r3, #1
    4840:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    4844:	2301      	movs	r3, #1
    4846:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    484a:	2301      	movs	r3, #1
    484c:	f88d 3010 	strb.w	r3, [sp, #16]
    4850:	e00e      	b.n	4870 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    4852:	9b01      	ldr	r3, [sp, #4]
    4854:	681b      	ldr	r3, [r3, #0]
    4856:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    4858:	9b01      	ldr	r3, [sp, #4]
    485a:	79db      	ldrb	r3, [r3, #7]
    485c:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    4860:	9b01      	ldr	r3, [sp, #4]
    4862:	889b      	ldrh	r3, [r3, #4]
    4864:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    4868:	9b01      	ldr	r3, [sp, #4]
    486a:	7a1b      	ldrb	r3, [r3, #8]
    486c:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    4870:	4b32      	ldr	r3, [pc, #200]	; (493c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4872:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4876:	4a31      	ldr	r2, [pc, #196]	; (493c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4878:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    487c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    4880:	4b2e      	ldr	r3, [pc, #184]	; (493c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4882:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4886:	4a2d      	ldr	r2, [pc, #180]	; (493c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4888:	f023 0301 	bic.w	r3, r3, #1
    488c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    4890:	4b2a      	ldr	r3, [pc, #168]	; (493c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4892:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4896:	4a29      	ldr	r2, [pc, #164]	; (493c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4898:	f023 0304 	bic.w	r3, r3, #4
    489c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    48a0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    48a4:	2b01      	cmp	r3, #1
    48a6:	d144      	bne.n	4932 <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    48a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    48ac:	4a23      	ldr	r2, [pc, #140]	; (493c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    48ae:	f003 0301 	and.w	r3, r3, #1
    48b2:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    48b6:	4b21      	ldr	r3, [pc, #132]	; (493c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    48b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    48bc:	4a1f      	ldr	r2, [pc, #124]	; (493c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    48be:	f043 0301 	orr.w	r3, r3, #1
    48c2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    48c6:	4b1d      	ldr	r3, [pc, #116]	; (493c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    48c8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    48cc:	f89d 3010 	ldrb.w	r3, [sp, #16]
    48d0:	009b      	lsls	r3, r3, #2
    48d2:	f003 0304 	and.w	r3, r3, #4
    48d6:	4919      	ldr	r1, [pc, #100]	; (493c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    48d8:	4313      	orrs	r3, r2
    48da:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    48de:	aa05      	add	r2, sp, #20
    48e0:	a906      	add	r1, sp, #24
    48e2:	a807      	add	r0, sp, #28
    48e4:	f24c 3350 	movw	r3, #50000	; 0xc350
    48e8:	f7ff f8f8 	bl	3adc <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    48ec:	4b13      	ldr	r3, [pc, #76]	; (493c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    48ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    48f2:	0e1b      	lsrs	r3, r3, #24
    48f4:	f003 0301 	and.w	r3, r3, #1
    48f8:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    48fa:	9a05      	ldr	r2, [sp, #20]
    48fc:	a906      	add	r1, sp, #24
    48fe:	ab07      	add	r3, sp, #28
    4900:	4618      	mov	r0, r3
    4902:	f7ff f905 	bl	3b10 <Clock_Ip_TimeoutExpired>
    4906:	4603      	mov	r3, r0
    4908:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    490c:	9b08      	ldr	r3, [sp, #32]
    490e:	2b00      	cmp	r3, #0
    4910:	d106      	bne.n	4920 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    4912:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    4916:	f083 0301 	eor.w	r3, r3, #1
    491a:	b2db      	uxtb	r3, r3
    491c:	2b00      	cmp	r3, #0
    491e:	d1e5      	bne.n	48ec <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    4920:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    4924:	2b00      	cmp	r3, #0
    4926:	d004      	beq.n	4932 <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    4928:	9b02      	ldr	r3, [sp, #8]
    492a:	4619      	mov	r1, r3
    492c:	2001      	movs	r0, #1
    492e:	f7ff f8c5 	bl	3abc <Clock_Ip_ReportClockErrors>
        }
    }
}
    4932:	bf00      	nop
    4934:	b00b      	add	sp, #44	; 0x2c
    4936:	f85d fb04 	ldr.w	pc, [sp], #4
    493a:	bf00      	nop
    493c:	40064000 	.word	0x40064000

00004940 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4940:	b500      	push	{lr}
    4942:	b089      	sub	sp, #36	; 0x24
    4944:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4946:	2300      	movs	r3, #0
    4948:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    494c:	4b1f      	ldr	r3, [pc, #124]	; (49cc <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    494e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4952:	4a1e      	ldr	r2, [pc, #120]	; (49cc <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    4954:	f043 0301 	orr.w	r3, r3, #1
    4958:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    495c:	4b1b      	ldr	r3, [pc, #108]	; (49cc <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    495e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4962:	4a1a      	ldr	r2, [pc, #104]	; (49cc <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    4964:	f043 0304 	orr.w	r3, r3, #4
    4968:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    496c:	aa03      	add	r2, sp, #12
    496e:	a904      	add	r1, sp, #16
    4970:	a805      	add	r0, sp, #20
    4972:	f24c 3350 	movw	r3, #50000	; 0xc350
    4976:	f7ff f8b1 	bl	3adc <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    497a:	4b14      	ldr	r3, [pc, #80]	; (49cc <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    497c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4980:	0e1b      	lsrs	r3, r3, #24
    4982:	f003 0301 	and.w	r3, r3, #1
    4986:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4988:	9a03      	ldr	r2, [sp, #12]
    498a:	a904      	add	r1, sp, #16
    498c:	ab05      	add	r3, sp, #20
    498e:	4618      	mov	r0, r3
    4990:	f7ff f8be 	bl	3b10 <Clock_Ip_TimeoutExpired>
    4994:	4603      	mov	r3, r0
    4996:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    499a:	9b06      	ldr	r3, [sp, #24]
    499c:	2b00      	cmp	r3, #0
    499e:	d106      	bne.n	49ae <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    49a0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    49a4:	f083 0301 	eor.w	r3, r3, #1
    49a8:	b2db      	uxtb	r3, r3
    49aa:	2b00      	cmp	r3, #0
    49ac:	d1e5      	bne.n	497a <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    49ae:	f89d 301f 	ldrb.w	r3, [sp, #31]
    49b2:	2b00      	cmp	r3, #0
    49b4:	d005      	beq.n	49c2 <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    49b6:	9b01      	ldr	r3, [sp, #4]
    49b8:	681b      	ldr	r3, [r3, #0]
    49ba:	4619      	mov	r1, r3
    49bc:	2001      	movs	r0, #1
    49be:	f7ff f87d 	bl	3abc <Clock_Ip_ReportClockErrors>
    }
}
    49c2:	bf00      	nop
    49c4:	b009      	add	sp, #36	; 0x24
    49c6:	f85d fb04 	ldr.w	pc, [sp], #4
    49ca:	bf00      	nop
    49cc:	40064000 	.word	0x40064000

000049d0 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    49d0:	b082      	sub	sp, #8
    49d2:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    49d4:	4b09      	ldr	r3, [pc, #36]	; (49fc <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    49d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    49da:	4a08      	ldr	r2, [pc, #32]	; (49fc <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    49dc:	f023 0301 	bic.w	r3, r3, #1
    49e0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    49e4:	4b05      	ldr	r3, [pc, #20]	; (49fc <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    49e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    49ea:	4a04      	ldr	r2, [pc, #16]	; (49fc <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    49ec:	f023 0304 	bic.w	r3, r3, #4
    49f0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    49f4:	bf00      	nop
    49f6:	b002      	add	sp, #8
    49f8:	4770      	bx	lr
    49fa:	bf00      	nop
    49fc:	40064000 	.word	0x40064000

00004a00 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4a00:	b082      	sub	sp, #8
    4a02:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    4a04:	4b0f      	ldr	r3, [pc, #60]	; (4a44 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4a06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4a0a:	4a0e      	ldr	r2, [pc, #56]	; (4a44 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4a0c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4a10:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    4a14:	4b0b      	ldr	r3, [pc, #44]	; (4a44 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4a16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4a1a:	4a0a      	ldr	r2, [pc, #40]	; (4a44 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4a1c:	f023 0304 	bic.w	r3, r3, #4
    4a20:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    4a24:	4b07      	ldr	r3, [pc, #28]	; (4a44 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4a26:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4a2a:	9b01      	ldr	r3, [sp, #4]
    4a2c:	7a1b      	ldrb	r3, [r3, #8]
    4a2e:	009b      	lsls	r3, r3, #2
    4a30:	f003 0304 	and.w	r3, r3, #4
    4a34:	4903      	ldr	r1, [pc, #12]	; (4a44 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4a36:	4313      	orrs	r3, r2
    4a38:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    4a3c:	bf00      	nop
    4a3e:	b002      	add	sp, #8
    4a40:	4770      	bx	lr
    4a42:	bf00      	nop
    4a44:	40064000 	.word	0x40064000

00004a48 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4a48:	b082      	sub	sp, #8
    4a4a:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    4a4c:	9b01      	ldr	r3, [sp, #4]
    4a4e:	889b      	ldrh	r3, [r3, #4]
    4a50:	2b01      	cmp	r3, #1
    4a52:	d107      	bne.n	4a64 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    4a54:	4b05      	ldr	r3, [pc, #20]	; (4a6c <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    4a56:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4a5a:	4a04      	ldr	r2, [pc, #16]	; (4a6c <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    4a5c:	f043 0304 	orr.w	r3, r3, #4
    4a60:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    4a64:	bf00      	nop
    4a66:	b002      	add	sp, #8
    4a68:	4770      	bx	lr
    4a6a:	bf00      	nop
    4a6c:	40064000 	.word	0x40064000

00004a70 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    4a70:	b082      	sub	sp, #8
    4a72:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    4a74:	4b05      	ldr	r3, [pc, #20]	; (4a8c <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    4a76:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4a7a:	4a04      	ldr	r2, [pc, #16]	; (4a8c <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    4a7c:	f023 0304 	bic.w	r3, r3, #4
    4a80:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    4a84:	bf00      	nop
    4a86:	b002      	add	sp, #8
    4a88:	4770      	bx	lr
    4a8a:	bf00      	nop
    4a8c:	40064000 	.word	0x40064000

00004a90 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4a90:	b082      	sub	sp, #8
    4a92:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    4a94:	4b0f      	ldr	r3, [pc, #60]	; (4ad4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    4a96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4a9a:	4a0e      	ldr	r2, [pc, #56]	; (4ad4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    4a9c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4aa0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    4aa4:	4b0b      	ldr	r3, [pc, #44]	; (4ad4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    4aa6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4aaa:	4a0a      	ldr	r2, [pc, #40]	; (4ad4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    4aac:	f023 0302 	bic.w	r3, r3, #2
    4ab0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    4ab4:	4b07      	ldr	r3, [pc, #28]	; (4ad4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    4ab6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4aba:	9b01      	ldr	r3, [sp, #4]
    4abc:	7a5b      	ldrb	r3, [r3, #9]
    4abe:	005b      	lsls	r3, r3, #1
    4ac0:	f003 0302 	and.w	r3, r3, #2
    4ac4:	4903      	ldr	r1, [pc, #12]	; (4ad4 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    4ac6:	4313      	orrs	r3, r2
    4ac8:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    4acc:	bf00      	nop
    4ace:	b002      	add	sp, #8
    4ad0:	4770      	bx	lr
    4ad2:	bf00      	nop
    4ad4:	40064000 	.word	0x40064000

00004ad8 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4ad8:	b082      	sub	sp, #8
    4ada:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    4adc:	9b01      	ldr	r3, [sp, #4]
    4ade:	889b      	ldrh	r3, [r3, #4]
    4ae0:	2b01      	cmp	r3, #1
    4ae2:	d107      	bne.n	4af4 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    4ae4:	4b05      	ldr	r3, [pc, #20]	; (4afc <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    4ae6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4aea:	4a04      	ldr	r2, [pc, #16]	; (4afc <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    4aec:	f043 0302 	orr.w	r3, r3, #2
    4af0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    4af4:	bf00      	nop
    4af6:	b002      	add	sp, #8
    4af8:	4770      	bx	lr
    4afa:	bf00      	nop
    4afc:	40064000 	.word	0x40064000

00004b00 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    4b00:	b082      	sub	sp, #8
    4b02:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    4b04:	4b05      	ldr	r3, [pc, #20]	; (4b1c <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    4b06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4b0a:	4a04      	ldr	r2, [pc, #16]	; (4b1c <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    4b0c:	f023 0302 	bic.w	r3, r3, #2
    4b10:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    4b14:	bf00      	nop
    4b16:	b002      	add	sp, #8
    4b18:	4770      	bx	lr
    4b1a:	bf00      	nop
    4b1c:	40064000 	.word	0x40064000

00004b20 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4b20:	b500      	push	{lr}
    4b22:	b08b      	sub	sp, #44	; 0x2c
    4b24:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    4b26:	9b01      	ldr	r3, [sp, #4]
    4b28:	681a      	ldr	r2, [r3, #0]
    4b2a:	4975      	ldr	r1, [pc, #468]	; (4d00 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    4b2c:	4613      	mov	r3, r2
    4b2e:	00db      	lsls	r3, r3, #3
    4b30:	4413      	add	r3, r2
    4b32:	440b      	add	r3, r1
    4b34:	781b      	ldrb	r3, [r3, #0]
    4b36:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    4b38:	2300      	movs	r3, #0
    4b3a:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    4b3e:	2300      	movs	r3, #0
    4b40:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    4b44:	4b6f      	ldr	r3, [pc, #444]	; (4d04 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4b46:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4b4a:	4a6e      	ldr	r2, [pc, #440]	; (4d04 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4b4c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4b50:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    4b54:	4b6b      	ldr	r3, [pc, #428]	; (4d04 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4b56:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    4b5e:	2b00      	cmp	r3, #0
    4b60:	d07d      	beq.n	4c5e <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    4b62:	9b01      	ldr	r3, [sp, #4]
    4b64:	79db      	ldrb	r3, [r3, #7]
    4b66:	461a      	mov	r2, r3
    4b68:	4b66      	ldr	r3, [pc, #408]	; (4d04 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4b6a:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    4b6e:	f003 0303 	and.w	r3, r3, #3
    4b72:	429a      	cmp	r2, r3
    4b74:	d10b      	bne.n	4b8e <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    4b76:	9b01      	ldr	r3, [sp, #4]
    4b78:	799b      	ldrb	r3, [r3, #6]
    4b7a:	461a      	mov	r2, r3
    4b7c:	4b61      	ldr	r3, [pc, #388]	; (4d04 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4b7e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4b82:	08db      	lsrs	r3, r3, #3
    4b84:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    4b88:	429a      	cmp	r2, r3
    4b8a:	f000 80b4 	beq.w	4cf6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    4b8e:	4b5d      	ldr	r3, [pc, #372]	; (4d04 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4b90:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4b94:	f003 0301 	and.w	r3, r3, #1
    4b98:	2b00      	cmp	r3, #0
    4b9a:	d105      	bne.n	4ba8 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    4b9c:	2301      	movs	r3, #1
    4b9e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    4ba2:	2000      	movs	r0, #0
    4ba4:	f7ff fd66 	bl	4674 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    4ba8:	2002      	movs	r0, #2
    4baa:	f7ff fdcf 	bl	474c <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    4bae:	4b55      	ldr	r3, [pc, #340]	; (4d04 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4bb0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4bb4:	4a53      	ldr	r2, [pc, #332]	; (4d04 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4bb6:	f023 0301 	bic.w	r3, r3, #1
    4bba:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    4bbe:	9b01      	ldr	r3, [sp, #4]
    4bc0:	889b      	ldrh	r3, [r3, #4]
    4bc2:	2b01      	cmp	r3, #1
    4bc4:	f040 8097 	bne.w	4cf6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    4bc8:	9b01      	ldr	r3, [sp, #4]
    4bca:	79db      	ldrb	r3, [r3, #7]
    4bcc:	4a4d      	ldr	r2, [pc, #308]	; (4d04 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4bce:	f003 0303 	and.w	r3, r3, #3
    4bd2:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    4bd6:	4b4b      	ldr	r3, [pc, #300]	; (4d04 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4bd8:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    4bdc:	9b01      	ldr	r3, [sp, #4]
    4bde:	799b      	ldrb	r3, [r3, #6]
    4be0:	00db      	lsls	r3, r3, #3
    4be2:	f003 0308 	and.w	r3, r3, #8
    4be6:	4313      	orrs	r3, r2
    4be8:	4a46      	ldr	r2, [pc, #280]	; (4d04 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4bea:	f043 0301 	orr.w	r3, r3, #1
    4bee:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4bf2:	aa03      	add	r2, sp, #12
    4bf4:	a904      	add	r1, sp, #16
    4bf6:	a805      	add	r0, sp, #20
    4bf8:	f24c 3350 	movw	r3, #50000	; 0xc350
    4bfc:	f7fe ff6e 	bl	3adc <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4c00:	4b40      	ldr	r3, [pc, #256]	; (4d04 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4c02:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4c06:	0e1b      	lsrs	r3, r3, #24
    4c08:	f003 0301 	and.w	r3, r3, #1
    4c0c:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4c0e:	9a03      	ldr	r2, [sp, #12]
    4c10:	a904      	add	r1, sp, #16
    4c12:	ab05      	add	r3, sp, #20
    4c14:	4618      	mov	r0, r3
    4c16:	f7fe ff7b 	bl	3b10 <Clock_Ip_TimeoutExpired>
    4c1a:	4603      	mov	r3, r0
    4c1c:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4c20:	9b06      	ldr	r3, [sp, #24]
    4c22:	2b00      	cmp	r3, #0
    4c24:	d106      	bne.n	4c34 <Clock_Ip_SetFirc_TrustedCall+0x114>
    4c26:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4c2a:	f083 0301 	eor.w	r3, r3, #1
    4c2e:	b2db      	uxtb	r3, r3
    4c30:	2b00      	cmp	r3, #0
    4c32:	d1e5      	bne.n	4c00 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    4c34:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4c38:	2b00      	cmp	r3, #0
    4c3a:	d005      	beq.n	4c48 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4c3c:	9b01      	ldr	r3, [sp, #4]
    4c3e:	681b      	ldr	r3, [r3, #0]
    4c40:	4619      	mov	r1, r3
    4c42:	2001      	movs	r0, #1
    4c44:	f7fe ff3a 	bl	3abc <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    4c48:	2003      	movs	r0, #3
    4c4a:	f7ff fd7f 	bl	474c <SetInputSouceSytemClock>

                if (SircWasDisabled)
    4c4e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    4c52:	2b00      	cmp	r3, #0
    4c54:	d04f      	beq.n	4cf6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    4c56:	2002      	movs	r0, #2
    4c58:	f7ff fd26 	bl	46a8 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    4c5c:	e04b      	b.n	4cf6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    4c5e:	4b29      	ldr	r3, [pc, #164]	; (4d04 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4c60:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4c64:	4a27      	ldr	r2, [pc, #156]	; (4d04 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4c66:	f023 0301 	bic.w	r3, r3, #1
    4c6a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    4c6e:	9b01      	ldr	r3, [sp, #4]
    4c70:	889b      	ldrh	r3, [r3, #4]
    4c72:	2b01      	cmp	r3, #1
    4c74:	d13f      	bne.n	4cf6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    4c76:	9b01      	ldr	r3, [sp, #4]
    4c78:	79db      	ldrb	r3, [r3, #7]
    4c7a:	4a22      	ldr	r2, [pc, #136]	; (4d04 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4c7c:	f003 0303 	and.w	r3, r3, #3
    4c80:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    4c84:	4b1f      	ldr	r3, [pc, #124]	; (4d04 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4c86:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    4c8a:	9b01      	ldr	r3, [sp, #4]
    4c8c:	799b      	ldrb	r3, [r3, #6]
    4c8e:	00db      	lsls	r3, r3, #3
    4c90:	f003 0308 	and.w	r3, r3, #8
    4c94:	4313      	orrs	r3, r2
    4c96:	4a1b      	ldr	r2, [pc, #108]	; (4d04 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4c98:	f043 0301 	orr.w	r3, r3, #1
    4c9c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4ca0:	aa03      	add	r2, sp, #12
    4ca2:	a904      	add	r1, sp, #16
    4ca4:	a805      	add	r0, sp, #20
    4ca6:	f24c 3350 	movw	r3, #50000	; 0xc350
    4caa:	f7fe ff17 	bl	3adc <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4cae:	4b15      	ldr	r3, [pc, #84]	; (4d04 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4cb0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4cb4:	0e1b      	lsrs	r3, r3, #24
    4cb6:	f003 0301 	and.w	r3, r3, #1
    4cba:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4cbc:	9a03      	ldr	r2, [sp, #12]
    4cbe:	a904      	add	r1, sp, #16
    4cc0:	ab05      	add	r3, sp, #20
    4cc2:	4618      	mov	r0, r3
    4cc4:	f7fe ff24 	bl	3b10 <Clock_Ip_TimeoutExpired>
    4cc8:	4603      	mov	r3, r0
    4cca:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4cce:	9b06      	ldr	r3, [sp, #24]
    4cd0:	2b00      	cmp	r3, #0
    4cd2:	d106      	bne.n	4ce2 <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    4cd4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4cd8:	f083 0301 	eor.w	r3, r3, #1
    4cdc:	b2db      	uxtb	r3, r3
    4cde:	2b00      	cmp	r3, #0
    4ce0:	d1e5      	bne.n	4cae <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    4ce2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4ce6:	2b00      	cmp	r3, #0
    4ce8:	d005      	beq.n	4cf6 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4cea:	9b01      	ldr	r3, [sp, #4]
    4cec:	681b      	ldr	r3, [r3, #0]
    4cee:	4619      	mov	r1, r3
    4cf0:	2001      	movs	r0, #1
    4cf2:	f7fe fee3 	bl	3abc <Clock_Ip_ReportClockErrors>
}
    4cf6:	bf00      	nop
    4cf8:	b00b      	add	sp, #44	; 0x2c
    4cfa:	f85d fb04 	ldr.w	pc, [sp], #4
    4cfe:	bf00      	nop
    4d00:	0001993c 	.word	0x0001993c
    4d04:	40064000 	.word	0x40064000

00004d08 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4d08:	b500      	push	{lr}
    4d0a:	b089      	sub	sp, #36	; 0x24
    4d0c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4d0e:	2300      	movs	r3, #0
    4d10:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    4d14:	9b01      	ldr	r3, [sp, #4]
    4d16:	889b      	ldrh	r3, [r3, #4]
    4d18:	2b01      	cmp	r3, #1
    4d1a:	d132      	bne.n	4d82 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    4d1c:	4b1b      	ldr	r3, [pc, #108]	; (4d8c <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4d1e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4d22:	4a1a      	ldr	r2, [pc, #104]	; (4d8c <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4d24:	f043 0301 	orr.w	r3, r3, #1
    4d28:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4d2c:	aa03      	add	r2, sp, #12
    4d2e:	a904      	add	r1, sp, #16
    4d30:	a805      	add	r0, sp, #20
    4d32:	f24c 3350 	movw	r3, #50000	; 0xc350
    4d36:	f7fe fed1 	bl	3adc <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4d3a:	4b14      	ldr	r3, [pc, #80]	; (4d8c <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4d3c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4d40:	0e1b      	lsrs	r3, r3, #24
    4d42:	f003 0301 	and.w	r3, r3, #1
    4d46:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4d48:	9a03      	ldr	r2, [sp, #12]
    4d4a:	a904      	add	r1, sp, #16
    4d4c:	ab05      	add	r3, sp, #20
    4d4e:	4618      	mov	r0, r3
    4d50:	f7fe fede 	bl	3b10 <Clock_Ip_TimeoutExpired>
    4d54:	4603      	mov	r3, r0
    4d56:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4d5a:	9b06      	ldr	r3, [sp, #24]
    4d5c:	2b00      	cmp	r3, #0
    4d5e:	d106      	bne.n	4d6e <Clock_Ip_EnableFirc_TrustedCall+0x66>
    4d60:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4d64:	f083 0301 	eor.w	r3, r3, #1
    4d68:	b2db      	uxtb	r3, r3
    4d6a:	2b00      	cmp	r3, #0
    4d6c:	d1e5      	bne.n	4d3a <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    4d6e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4d72:	2b00      	cmp	r3, #0
    4d74:	d005      	beq.n	4d82 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4d76:	9b01      	ldr	r3, [sp, #4]
    4d78:	681b      	ldr	r3, [r3, #0]
    4d7a:	4619      	mov	r1, r3
    4d7c:	2001      	movs	r0, #1
    4d7e:	f7fe fe9d 	bl	3abc <Clock_Ip_ReportClockErrors>
        }
    }
}
    4d82:	bf00      	nop
    4d84:	b009      	add	sp, #36	; 0x24
    4d86:	f85d fb04 	ldr.w	pc, [sp], #4
    4d8a:	bf00      	nop
    4d8c:	40064000 	.word	0x40064000

00004d90 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    4d90:	b082      	sub	sp, #8
    4d92:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    4d94:	4b05      	ldr	r3, [pc, #20]	; (4dac <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    4d96:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4d9a:	4a04      	ldr	r2, [pc, #16]	; (4dac <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    4d9c:	f023 0301 	bic.w	r3, r3, #1
    4da0:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    4da4:	bf00      	nop
    4da6:	b002      	add	sp, #8
    4da8:	4770      	bx	lr
    4daa:	bf00      	nop
    4dac:	40064000 	.word	0x40064000

00004db0 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    4db0:	b082      	sub	sp, #8
    4db2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4db4:	bf00      	nop
    4db6:	b002      	add	sp, #8
    4db8:	4770      	bx	lr

00004dba <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    4dba:	b082      	sub	sp, #8
    4dbc:	9001      	str	r0, [sp, #4]
    4dbe:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    4dc0:	bf00      	nop
    4dc2:	b002      	add	sp, #8
    4dc4:	4770      	bx	lr

00004dc6 <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    4dc6:	b082      	sub	sp, #8
    4dc8:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    4dca:	bf00      	nop
    4dcc:	b002      	add	sp, #8
    4dce:	4770      	bx	lr

00004dd0 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    4dd0:	b082      	sub	sp, #8
    4dd2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4dd4:	bf00      	nop
    4dd6:	b002      	add	sp, #8
    4dd8:	4770      	bx	lr

00004dda <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    4dda:	b082      	sub	sp, #8
    4ddc:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    4dde:	2302      	movs	r3, #2
}
    4de0:	4618      	mov	r0, r3
    4de2:	b002      	add	sp, #8
    4de4:	4770      	bx	lr

00004de6 <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    4de6:	b082      	sub	sp, #8
    4de8:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    4dea:	bf00      	nop
    4dec:	b002      	add	sp, #8
    4dee:	4770      	bx	lr

00004df0 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    4df0:	b500      	push	{lr}
    4df2:	b083      	sub	sp, #12
    4df4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4df6:	9b01      	ldr	r3, [sp, #4]
    4df8:	2b00      	cmp	r3, #0
    4dfa:	d002      	beq.n	4e02 <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    4dfc:	9801      	ldr	r0, [sp, #4]
    4dfe:	f000 f870 	bl	4ee2 <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4e02:	bf00      	nop
    4e04:	b003      	add	sp, #12
    4e06:	f85d fb04 	ldr.w	pc, [sp], #4

00004e0a <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    4e0a:	b500      	push	{lr}
    4e0c:	b083      	sub	sp, #12
    4e0e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4e10:	9b01      	ldr	r3, [sp, #4]
    4e12:	2b00      	cmp	r3, #0
    4e14:	d002      	beq.n	4e1c <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    4e16:	9801      	ldr	r0, [sp, #4]
    4e18:	f000 f89a 	bl	4f50 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4e1c:	bf00      	nop
    4e1e:	b003      	add	sp, #12
    4e20:	f85d fb04 	ldr.w	pc, [sp], #4

00004e24 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    4e24:	b500      	push	{lr}
    4e26:	b089      	sub	sp, #36	; 0x24
    4e28:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    4e2a:	2301      	movs	r3, #1
    4e2c:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    4e2e:	2300      	movs	r3, #0
    4e30:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    4e34:	4b1e      	ldr	r3, [pc, #120]	; (4eb0 <Clock_Ip_CompleteSpll+0x8c>)
    4e36:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4e3a:	f003 0301 	and.w	r3, r3, #1
    4e3e:	2b00      	cmp	r3, #0
    4e40:	d02f      	beq.n	4ea2 <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4e42:	aa02      	add	r2, sp, #8
    4e44:	a903      	add	r1, sp, #12
    4e46:	a804      	add	r0, sp, #16
    4e48:	f24c 3350 	movw	r3, #50000	; 0xc350
    4e4c:	f7fe fe46 	bl	3adc <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    4e50:	4b17      	ldr	r3, [pc, #92]	; (4eb0 <Clock_Ip_CompleteSpll+0x8c>)
    4e52:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4e56:	0e1b      	lsrs	r3, r3, #24
    4e58:	f003 0301 	and.w	r3, r3, #1
    4e5c:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4e5e:	9a02      	ldr	r2, [sp, #8]
    4e60:	a903      	add	r1, sp, #12
    4e62:	ab04      	add	r3, sp, #16
    4e64:	4618      	mov	r0, r3
    4e66:	f7fe fe53 	bl	3b10 <Clock_Ip_TimeoutExpired>
    4e6a:	4603      	mov	r3, r0
    4e6c:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    4e70:	9b05      	ldr	r3, [sp, #20]
    4e72:	2b00      	cmp	r3, #0
    4e74:	d106      	bne.n	4e84 <Clock_Ip_CompleteSpll+0x60>
    4e76:	f89d 301b 	ldrb.w	r3, [sp, #27]
    4e7a:	f083 0301 	eor.w	r3, r3, #1
    4e7e:	b2db      	uxtb	r3, r3
    4e80:	2b00      	cmp	r3, #0
    4e82:	d1e5      	bne.n	4e50 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    4e84:	f89d 301b 	ldrb.w	r3, [sp, #27]
    4e88:	f083 0301 	eor.w	r3, r3, #1
    4e8c:	b2db      	uxtb	r3, r3
    4e8e:	2b00      	cmp	r3, #0
    4e90:	d002      	beq.n	4e98 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    4e92:	2302      	movs	r3, #2
    4e94:	9307      	str	r3, [sp, #28]
    4e96:	e006      	b.n	4ea6 <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    4e98:	9901      	ldr	r1, [sp, #4]
    4e9a:	2001      	movs	r0, #1
    4e9c:	f7fe fe0e 	bl	3abc <Clock_Ip_ReportClockErrors>
    4ea0:	e001      	b.n	4ea6 <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    4ea2:	2300      	movs	r3, #0
    4ea4:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    4ea6:	9b07      	ldr	r3, [sp, #28]
}
    4ea8:	4618      	mov	r0, r3
    4eaa:	b009      	add	sp, #36	; 0x24
    4eac:	f85d fb04 	ldr.w	pc, [sp], #4
    4eb0:	40064000 	.word	0x40064000

00004eb4 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    4eb4:	b500      	push	{lr}
    4eb6:	b083      	sub	sp, #12
    4eb8:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    4eba:	9801      	ldr	r0, [sp, #4]
    4ebc:	f000 f886 	bl	4fcc <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    4ec0:	bf00      	nop
    4ec2:	b003      	add	sp, #12
    4ec4:	f85d fb04 	ldr.w	pc, [sp], #4

00004ec8 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    4ec8:	b500      	push	{lr}
    4eca:	b083      	sub	sp, #12
    4ecc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4ece:	9b01      	ldr	r3, [sp, #4]
    4ed0:	2b00      	cmp	r3, #0
    4ed2:	d002      	beq.n	4eda <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    4ed4:	9801      	ldr	r0, [sp, #4]
    4ed6:	f000 f891 	bl	4ffc <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4eda:	bf00      	nop
    4edc:	b003      	add	sp, #12
    4ede:	f85d fb04 	ldr.w	pc, [sp], #4

00004ee2 <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4ee2:	b082      	sub	sp, #8
    4ee4:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    4ee6:	4b19      	ldr	r3, [pc, #100]	; (4f4c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4ee8:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4eec:	4a17      	ldr	r2, [pc, #92]	; (4f4c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4eee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4ef2:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    4ef6:	4b15      	ldr	r3, [pc, #84]	; (4f4c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4ef8:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4efc:	4a13      	ldr	r2, [pc, #76]	; (4f4c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    4f02:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    4f06:	4b11      	ldr	r3, [pc, #68]	; (4f4c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4f08:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4f0c:	4a0f      	ldr	r2, [pc, #60]	; (4f4c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4f0e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    4f12:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    4f16:	4b0d      	ldr	r3, [pc, #52]	; (4f4c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4f18:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4f1c:	4a0b      	ldr	r2, [pc, #44]	; (4f4c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4f1e:	f023 0301 	bic.w	r3, r3, #1
    4f22:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    4f26:	4b09      	ldr	r3, [pc, #36]	; (4f4c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4f28:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4f2c:	4a07      	ldr	r2, [pc, #28]	; (4f4c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4f2e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    4f32:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    4f36:	4b05      	ldr	r3, [pc, #20]	; (4f4c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4f38:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4f3c:	4a03      	ldr	r2, [pc, #12]	; (4f4c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4f3e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    4f42:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    4f46:	bf00      	nop
    4f48:	b002      	add	sp, #8
    4f4a:	4770      	bx	lr
    4f4c:	40064000 	.word	0x40064000

00004f50 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4f50:	b082      	sub	sp, #8
    4f52:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4f54:	9b01      	ldr	r3, [sp, #4]
    4f56:	889b      	ldrh	r3, [r3, #4]
    4f58:	2b01      	cmp	r3, #1
    4f5a:	d12f      	bne.n	4fbc <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    4f5c:	4b1a      	ldr	r3, [pc, #104]	; (4fc8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4f5e:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    4f62:	9b01      	ldr	r3, [sp, #4]
    4f64:	7b5b      	ldrb	r3, [r3, #13]
    4f66:	3b01      	subs	r3, #1
    4f68:	021b      	lsls	r3, r3, #8
    4f6a:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    4f6e:	9b01      	ldr	r3, [sp, #4]
    4f70:	7d1b      	ldrb	r3, [r3, #20]
    4f72:	3b10      	subs	r3, #16
    4f74:	041b      	lsls	r3, r3, #16
    4f76:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    4f7a:	430b      	orrs	r3, r1
    4f7c:	4912      	ldr	r1, [pc, #72]	; (4fc8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4f7e:	4313      	orrs	r3, r2
    4f80:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    4f84:	9b01      	ldr	r3, [sp, #4]
    4f86:	7fdb      	ldrb	r3, [r3, #31]
    4f88:	2b02      	cmp	r3, #2
    4f8a:	d011      	beq.n	4fb0 <Clock_Ip_SetSpll_TrustedCall+0x60>
    4f8c:	2b02      	cmp	r3, #2
    4f8e:	dc17      	bgt.n	4fc0 <Clock_Ip_SetSpll_TrustedCall+0x70>
    4f90:	2b00      	cmp	r3, #0
    4f92:	d002      	beq.n	4f9a <Clock_Ip_SetSpll_TrustedCall+0x4a>
    4f94:	2b01      	cmp	r3, #1
    4f96:	d005      	beq.n	4fa4 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    4f98:	e012      	b.n	4fc0 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    4f9a:	4b0b      	ldr	r3, [pc, #44]	; (4fc8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4f9c:	2200      	movs	r2, #0
    4f9e:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4fa2:	e00e      	b.n	4fc2 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    4fa4:	4b08      	ldr	r3, [pc, #32]	; (4fc8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4fa6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4faa:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4fae:	e008      	b.n	4fc2 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    4fb0:	4b05      	ldr	r3, [pc, #20]	; (4fc8 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4fb2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    4fb6:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4fba:	e002      	b.n	4fc2 <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    4fbc:	bf00      	nop
    4fbe:	e000      	b.n	4fc2 <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    4fc0:	bf00      	nop
}
    4fc2:	bf00      	nop
    4fc4:	b002      	add	sp, #8
    4fc6:	4770      	bx	lr
    4fc8:	40064000 	.word	0x40064000

00004fcc <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    4fcc:	b082      	sub	sp, #8
    4fce:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    4fd0:	4b09      	ldr	r3, [pc, #36]	; (4ff8 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4fd2:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4fd6:	4a08      	ldr	r2, [pc, #32]	; (4ff8 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4fd8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4fdc:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    4fe0:	4b05      	ldr	r3, [pc, #20]	; (4ff8 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4fe2:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4fe6:	4a04      	ldr	r2, [pc, #16]	; (4ff8 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4fe8:	f023 0301 	bic.w	r3, r3, #1
    4fec:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    4ff0:	bf00      	nop
    4ff2:	b002      	add	sp, #8
    4ff4:	4770      	bx	lr
    4ff6:	bf00      	nop
    4ff8:	40064000 	.word	0x40064000

00004ffc <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4ffc:	b082      	sub	sp, #8
    4ffe:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    5000:	9b01      	ldr	r3, [sp, #4]
    5002:	889b      	ldrh	r3, [r3, #4]
    5004:	2b01      	cmp	r3, #1
    5006:	d107      	bne.n	5018 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    5008:	4b05      	ldr	r3, [pc, #20]	; (5020 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    500a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    500e:	4a04      	ldr	r2, [pc, #16]	; (5020 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    5010:	f043 0301 	orr.w	r3, r3, #1
    5014:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    5018:	bf00      	nop
    501a:	b002      	add	sp, #8
    501c:	4770      	bx	lr
    501e:	bf00      	nop
    5020:	40064000 	.word	0x40064000

00005024 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    5024:	b082      	sub	sp, #8
    5026:	9001      	str	r0, [sp, #4]
    5028:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    502a:	bf00      	nop
    502c:	b002      	add	sp, #8
    502e:	4770      	bx	lr

00005030 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    5030:	b082      	sub	sp, #8
    5032:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    5034:	bf00      	nop
    5036:	b002      	add	sp, #8
    5038:	4770      	bx	lr

0000503a <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    503a:	b500      	push	{lr}
    503c:	b083      	sub	sp, #12
    503e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    5040:	9b01      	ldr	r3, [sp, #4]
    5042:	2b00      	cmp	r3, #0
    5044:	d002      	beq.n	504c <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    5046:	9801      	ldr	r0, [sp, #4]
    5048:	f000 f8ee 	bl	5228 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    504c:	bf00      	nop
    504e:	b003      	add	sp, #12
    5050:	f85d fb04 	ldr.w	pc, [sp], #4

00005054 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    5054:	b500      	push	{lr}
    5056:	b083      	sub	sp, #12
    5058:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    505a:	9b01      	ldr	r3, [sp, #4]
    505c:	2b00      	cmp	r3, #0
    505e:	d002      	beq.n	5066 <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    5060:	9801      	ldr	r0, [sp, #4]
    5062:	f000 f8ff 	bl	5264 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    5066:	bf00      	nop
    5068:	b003      	add	sp, #12
    506a:	f85d fb04 	ldr.w	pc, [sp], #4

0000506e <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    506e:	b500      	push	{lr}
    5070:	b083      	sub	sp, #12
    5072:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    5074:	9b01      	ldr	r3, [sp, #4]
    5076:	2b00      	cmp	r3, #0
    5078:	d002      	beq.n	5080 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    507a:	9801      	ldr	r0, [sp, #4]
    507c:	f000 f912 	bl	52a4 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    5080:	bf00      	nop
    5082:	b003      	add	sp, #12
    5084:	f85d fb04 	ldr.w	pc, [sp], #4

00005088 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    5088:	b500      	push	{lr}
    508a:	b083      	sub	sp, #12
    508c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    508e:	9b01      	ldr	r3, [sp, #4]
    5090:	2b00      	cmp	r3, #0
    5092:	d002      	beq.n	509a <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    5094:	9801      	ldr	r0, [sp, #4]
    5096:	f000 f925 	bl	52e4 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    509a:	bf00      	nop
    509c:	b003      	add	sp, #12
    509e:	f85d fb04 	ldr.w	pc, [sp], #4

000050a2 <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    50a2:	b500      	push	{lr}
    50a4:	b083      	sub	sp, #12
    50a6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    50a8:	9b01      	ldr	r3, [sp, #4]
    50aa:	2b00      	cmp	r3, #0
    50ac:	d002      	beq.n	50b4 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    50ae:	9801      	ldr	r0, [sp, #4]
    50b0:	f000 f936 	bl	5320 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    50b4:	bf00      	nop
    50b6:	b003      	add	sp, #12
    50b8:	f85d fb04 	ldr.w	pc, [sp], #4

000050bc <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    50bc:	b500      	push	{lr}
    50be:	b083      	sub	sp, #12
    50c0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    50c2:	9b01      	ldr	r3, [sp, #4]
    50c4:	2b00      	cmp	r3, #0
    50c6:	d002      	beq.n	50ce <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    50c8:	9801      	ldr	r0, [sp, #4]
    50ca:	f000 f949 	bl	5360 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    50ce:	bf00      	nop
    50d0:	b003      	add	sp, #12
    50d2:	f85d fb04 	ldr.w	pc, [sp], #4

000050d6 <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    50d6:	b500      	push	{lr}
    50d8:	b083      	sub	sp, #12
    50da:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    50dc:	9b01      	ldr	r3, [sp, #4]
    50de:	2b00      	cmp	r3, #0
    50e0:	d002      	beq.n	50e8 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    50e2:	9801      	ldr	r0, [sp, #4]
    50e4:	f000 f958 	bl	5398 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    50e8:	bf00      	nop
    50ea:	b003      	add	sp, #12
    50ec:	f85d fb04 	ldr.w	pc, [sp], #4

000050f0 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    50f0:	b500      	push	{lr}
    50f2:	b083      	sub	sp, #12
    50f4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    50f6:	9b01      	ldr	r3, [sp, #4]
    50f8:	2b00      	cmp	r3, #0
    50fa:	d002      	beq.n	5102 <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    50fc:	9801      	ldr	r0, [sp, #4]
    50fe:	f000 f969 	bl	53d4 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    5102:	bf00      	nop
    5104:	b003      	add	sp, #12
    5106:	f85d fb04 	ldr.w	pc, [sp], #4

0000510a <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    510a:	b500      	push	{lr}
    510c:	b083      	sub	sp, #12
    510e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    5110:	9b01      	ldr	r3, [sp, #4]
    5112:	2b00      	cmp	r3, #0
    5114:	d002      	beq.n	511c <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    5116:	9801      	ldr	r0, [sp, #4]
    5118:	f000 f978 	bl	540c <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    511c:	bf00      	nop
    511e:	b003      	add	sp, #12
    5120:	f85d fb04 	ldr.w	pc, [sp], #4

00005124 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    5124:	b500      	push	{lr}
    5126:	b083      	sub	sp, #12
    5128:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    512a:	9b01      	ldr	r3, [sp, #4]
    512c:	2b00      	cmp	r3, #0
    512e:	d002      	beq.n	5136 <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    5130:	9801      	ldr	r0, [sp, #4]
    5132:	f000 f989 	bl	5448 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    5136:	bf00      	nop
    5138:	b003      	add	sp, #12
    513a:	f85d fb04 	ldr.w	pc, [sp], #4

0000513e <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    513e:	b500      	push	{lr}
    5140:	b083      	sub	sp, #12
    5142:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    5144:	9b01      	ldr	r3, [sp, #4]
    5146:	2b00      	cmp	r3, #0
    5148:	d002      	beq.n	5150 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    514a:	9801      	ldr	r0, [sp, #4]
    514c:	f000 f998 	bl	5480 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    5150:	bf00      	nop
    5152:	b003      	add	sp, #12
    5154:	f85d fb04 	ldr.w	pc, [sp], #4

00005158 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    5158:	b500      	push	{lr}
    515a:	b083      	sub	sp, #12
    515c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    515e:	9b01      	ldr	r3, [sp, #4]
    5160:	2b00      	cmp	r3, #0
    5162:	d002      	beq.n	516a <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    5164:	9801      	ldr	r0, [sp, #4]
    5166:	f000 f9a9 	bl	54bc <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    516a:	bf00      	nop
    516c:	b003      	add	sp, #12
    516e:	f85d fb04 	ldr.w	pc, [sp], #4

00005172 <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    5172:	b500      	push	{lr}
    5174:	b083      	sub	sp, #12
    5176:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    5178:	9b01      	ldr	r3, [sp, #4]
    517a:	2b00      	cmp	r3, #0
    517c:	d002      	beq.n	5184 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    517e:	9801      	ldr	r0, [sp, #4]
    5180:	f000 f9e6 	bl	5550 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    5184:	bf00      	nop
    5186:	b003      	add	sp, #12
    5188:	f85d fb04 	ldr.w	pc, [sp], #4

0000518c <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    518c:	b500      	push	{lr}
    518e:	b083      	sub	sp, #12
    5190:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    5192:	9b01      	ldr	r3, [sp, #4]
    5194:	2b00      	cmp	r3, #0
    5196:	d002      	beq.n	519e <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    5198:	9801      	ldr	r0, [sp, #4]
    519a:	f000 fa25 	bl	55e8 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    519e:	bf00      	nop
    51a0:	b003      	add	sp, #12
    51a2:	f85d fb04 	ldr.w	pc, [sp], #4

000051a6 <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    51a6:	b500      	push	{lr}
    51a8:	b083      	sub	sp, #12
    51aa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    51ac:	9b01      	ldr	r3, [sp, #4]
    51ae:	2b00      	cmp	r3, #0
    51b0:	d002      	beq.n	51b8 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    51b2:	9801      	ldr	r0, [sp, #4]
    51b4:	f000 fa2a 	bl	560c <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    51b8:	bf00      	nop
    51ba:	b003      	add	sp, #12
    51bc:	f85d fb04 	ldr.w	pc, [sp], #4

000051c0 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    51c0:	b500      	push	{lr}
    51c2:	b083      	sub	sp, #12
    51c4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    51c6:	9b01      	ldr	r3, [sp, #4]
    51c8:	2b00      	cmp	r3, #0
    51ca:	d002      	beq.n	51d2 <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    51cc:	9801      	ldr	r0, [sp, #4]
    51ce:	f000 fa3b 	bl	5648 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    51d2:	bf00      	nop
    51d4:	b003      	add	sp, #12
    51d6:	f85d fb04 	ldr.w	pc, [sp], #4

000051da <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    51da:	b500      	push	{lr}
    51dc:	b083      	sub	sp, #12
    51de:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    51e0:	9b01      	ldr	r3, [sp, #4]
    51e2:	2b00      	cmp	r3, #0
    51e4:	d002      	beq.n	51ec <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    51e6:	9801      	ldr	r0, [sp, #4]
    51e8:	f000 fa56 	bl	5698 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    51ec:	bf00      	nop
    51ee:	b003      	add	sp, #12
    51f0:	f85d fb04 	ldr.w	pc, [sp], #4

000051f4 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    51f4:	b500      	push	{lr}
    51f6:	b083      	sub	sp, #12
    51f8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    51fa:	9b01      	ldr	r3, [sp, #4]
    51fc:	2b00      	cmp	r3, #0
    51fe:	d002      	beq.n	5206 <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    5200:	9801      	ldr	r0, [sp, #4]
    5202:	f000 fa79 	bl	56f8 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    5206:	bf00      	nop
    5208:	b003      	add	sp, #12
    520a:	f85d fb04 	ldr.w	pc, [sp], #4

0000520e <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    520e:	b500      	push	{lr}
    5210:	b083      	sub	sp, #12
    5212:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    5214:	9b01      	ldr	r3, [sp, #4]
    5216:	2b00      	cmp	r3, #0
    5218:	d002      	beq.n	5220 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    521a:	9801      	ldr	r0, [sp, #4]
    521c:	f000 fa8a 	bl	5734 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    5220:	bf00      	nop
    5222:	b003      	add	sp, #12
    5224:	f85d fb04 	ldr.w	pc, [sp], #4

00005228 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5228:	b084      	sub	sp, #16
    522a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    522c:	4b0b      	ldr	r3, [pc, #44]	; (525c <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    522e:	795b      	ldrb	r3, [r3, #5]
    5230:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    5232:	4b0b      	ldr	r3, [pc, #44]	; (5260 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    5234:	695b      	ldr	r3, [r3, #20]
    5236:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    5238:	9b02      	ldr	r3, [sp, #8]
    523a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    523e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    5240:	9b03      	ldr	r3, [sp, #12]
    5242:	061b      	lsls	r3, r3, #24
    5244:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    5248:	9a02      	ldr	r2, [sp, #8]
    524a:	4313      	orrs	r3, r2
    524c:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    524e:	4a04      	ldr	r2, [pc, #16]	; (5260 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    5250:	9b02      	ldr	r3, [sp, #8]
    5252:	6153      	str	r3, [r2, #20]
}
    5254:	bf00      	nop
    5256:	b004      	add	sp, #16
    5258:	4770      	bx	lr
    525a:	bf00      	nop
    525c:	00019ca4 	.word	0x00019ca4
    5260:	40064000 	.word	0x40064000

00005264 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5264:	b084      	sub	sp, #16
    5266:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5268:	9b01      	ldr	r3, [sp, #4]
    526a:	685b      	ldr	r3, [r3, #4]
    526c:	4a0b      	ldr	r2, [pc, #44]	; (529c <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    526e:	5cd3      	ldrb	r3, [r2, r3]
    5270:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    5272:	4b0b      	ldr	r3, [pc, #44]	; (52a0 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    5274:	695b      	ldr	r3, [r3, #20]
    5276:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    5278:	9b02      	ldr	r3, [sp, #8]
    527a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    527e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    5280:	9b03      	ldr	r3, [sp, #12]
    5282:	061b      	lsls	r3, r3, #24
    5284:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    5288:	9a02      	ldr	r2, [sp, #8]
    528a:	4313      	orrs	r3, r2
    528c:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    528e:	4a04      	ldr	r2, [pc, #16]	; (52a0 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    5290:	9b02      	ldr	r3, [sp, #8]
    5292:	6153      	str	r3, [r2, #20]
}
    5294:	bf00      	nop
    5296:	b004      	add	sp, #16
    5298:	4770      	bx	lr
    529a:	bf00      	nop
    529c:	00019ca4 	.word	0x00019ca4
    52a0:	40064000 	.word	0x40064000

000052a4 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    52a4:	b084      	sub	sp, #16
    52a6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    52a8:	9b01      	ldr	r3, [sp, #4]
    52aa:	685b      	ldr	r3, [r3, #4]
    52ac:	4a0b      	ldr	r2, [pc, #44]	; (52dc <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    52ae:	5cd3      	ldrb	r3, [r2, r3]
    52b0:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    52b2:	4b0b      	ldr	r3, [pc, #44]	; (52e0 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    52b4:	699b      	ldr	r3, [r3, #24]
    52b6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    52b8:	9b02      	ldr	r3, [sp, #8]
    52ba:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    52be:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    52c0:	9b03      	ldr	r3, [sp, #12]
    52c2:	061b      	lsls	r3, r3, #24
    52c4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    52c8:	9a02      	ldr	r2, [sp, #8]
    52ca:	4313      	orrs	r3, r2
    52cc:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    52ce:	4a04      	ldr	r2, [pc, #16]	; (52e0 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    52d0:	9b02      	ldr	r3, [sp, #8]
    52d2:	6193      	str	r3, [r2, #24]
}
    52d4:	bf00      	nop
    52d6:	b004      	add	sp, #16
    52d8:	4770      	bx	lr
    52da:	bf00      	nop
    52dc:	00019ca4 	.word	0x00019ca4
    52e0:	40064000 	.word	0x40064000

000052e4 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    52e4:	b084      	sub	sp, #16
    52e6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    52e8:	4b0b      	ldr	r3, [pc, #44]	; (5318 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    52ea:	795b      	ldrb	r3, [r3, #5]
    52ec:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    52ee:	4b0b      	ldr	r3, [pc, #44]	; (531c <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    52f0:	69db      	ldr	r3, [r3, #28]
    52f2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    52f4:	9b02      	ldr	r3, [sp, #8]
    52f6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    52fa:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    52fc:	9b03      	ldr	r3, [sp, #12]
    52fe:	061b      	lsls	r3, r3, #24
    5300:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    5304:	9a02      	ldr	r2, [sp, #8]
    5306:	4313      	orrs	r3, r2
    5308:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    530a:	4a04      	ldr	r2, [pc, #16]	; (531c <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    530c:	9b02      	ldr	r3, [sp, #8]
    530e:	61d3      	str	r3, [r2, #28]
}
    5310:	bf00      	nop
    5312:	b004      	add	sp, #16
    5314:	4770      	bx	lr
    5316:	bf00      	nop
    5318:	00019ca4 	.word	0x00019ca4
    531c:	40064000 	.word	0x40064000

00005320 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5320:	b084      	sub	sp, #16
    5322:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5324:	9b01      	ldr	r3, [sp, #4]
    5326:	685b      	ldr	r3, [r3, #4]
    5328:	4a0b      	ldr	r2, [pc, #44]	; (5358 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    532a:	5cd3      	ldrb	r3, [r2, r3]
    532c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    532e:	4b0b      	ldr	r3, [pc, #44]	; (535c <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    5330:	69db      	ldr	r3, [r3, #28]
    5332:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    5334:	9b02      	ldr	r3, [sp, #8]
    5336:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    533a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    533c:	9b03      	ldr	r3, [sp, #12]
    533e:	061b      	lsls	r3, r3, #24
    5340:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    5344:	9a02      	ldr	r2, [sp, #8]
    5346:	4313      	orrs	r3, r2
    5348:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    534a:	4a04      	ldr	r2, [pc, #16]	; (535c <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    534c:	9b02      	ldr	r3, [sp, #8]
    534e:	61d3      	str	r3, [r2, #28]
}
    5350:	bf00      	nop
    5352:	b004      	add	sp, #16
    5354:	4770      	bx	lr
    5356:	bf00      	nop
    5358:	00019ca4 	.word	0x00019ca4
    535c:	40064000 	.word	0x40064000

00005360 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5360:	b084      	sub	sp, #16
    5362:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5364:	4b0a      	ldr	r3, [pc, #40]	; (5390 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    5366:	7b9b      	ldrb	r3, [r3, #14]
    5368:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    536a:	4b0a      	ldr	r3, [pc, #40]	; (5394 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    536c:	691b      	ldr	r3, [r3, #16]
    536e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    5370:	9b02      	ldr	r3, [sp, #8]
    5372:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    5376:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    5378:	9b03      	ldr	r3, [sp, #12]
    537a:	011b      	lsls	r3, r3, #4
    537c:	9a02      	ldr	r2, [sp, #8]
    537e:	4313      	orrs	r3, r2
    5380:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    5382:	4a04      	ldr	r2, [pc, #16]	; (5394 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    5384:	9b02      	ldr	r3, [sp, #8]
    5386:	6113      	str	r3, [r2, #16]
}
    5388:	bf00      	nop
    538a:	b004      	add	sp, #16
    538c:	4770      	bx	lr
    538e:	bf00      	nop
    5390:	00019c4c 	.word	0x00019c4c
    5394:	40048000 	.word	0x40048000

00005398 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5398:	b084      	sub	sp, #16
    539a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    539c:	9b01      	ldr	r3, [sp, #4]
    539e:	685b      	ldr	r3, [r3, #4]
    53a0:	4a0a      	ldr	r2, [pc, #40]	; (53cc <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    53a2:	5cd3      	ldrb	r3, [r2, r3]
    53a4:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    53a6:	4b0a      	ldr	r3, [pc, #40]	; (53d0 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    53a8:	691b      	ldr	r3, [r3, #16]
    53aa:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    53ac:	9b02      	ldr	r3, [sp, #8]
    53ae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    53b2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    53b4:	9b03      	ldr	r3, [sp, #12]
    53b6:	011b      	lsls	r3, r3, #4
    53b8:	9a02      	ldr	r2, [sp, #8]
    53ba:	4313      	orrs	r3, r2
    53bc:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    53be:	4a04      	ldr	r2, [pc, #16]	; (53d0 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    53c0:	9b02      	ldr	r3, [sp, #8]
    53c2:	6113      	str	r3, [r2, #16]
}
    53c4:	bf00      	nop
    53c6:	b004      	add	sp, #16
    53c8:	4770      	bx	lr
    53ca:	bf00      	nop
    53cc:	00019c4c 	.word	0x00019c4c
    53d0:	40048000 	.word	0x40048000

000053d4 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    53d4:	b084      	sub	sp, #16
    53d6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    53d8:	4b0a      	ldr	r3, [pc, #40]	; (5404 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    53da:	785b      	ldrb	r3, [r3, #1]
    53dc:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    53de:	4b0a      	ldr	r3, [pc, #40]	; (5408 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    53e0:	691b      	ldr	r3, [r3, #16]
    53e2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    53e4:	9b02      	ldr	r3, [sp, #8]
    53e6:	f023 030c 	bic.w	r3, r3, #12
    53ea:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    53ec:	9b03      	ldr	r3, [sp, #12]
    53ee:	009b      	lsls	r3, r3, #2
    53f0:	9a02      	ldr	r2, [sp, #8]
    53f2:	4313      	orrs	r3, r2
    53f4:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    53f6:	4a04      	ldr	r2, [pc, #16]	; (5408 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    53f8:	9b02      	ldr	r3, [sp, #8]
    53fa:	6113      	str	r3, [r2, #16]
}
    53fc:	bf00      	nop
    53fe:	b004      	add	sp, #16
    5400:	4770      	bx	lr
    5402:	bf00      	nop
    5404:	00019d04 	.word	0x00019d04
    5408:	40048000 	.word	0x40048000

0000540c <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    540c:	b084      	sub	sp, #16
    540e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5410:	9b01      	ldr	r3, [sp, #4]
    5412:	685b      	ldr	r3, [r3, #4]
    5414:	4a0a      	ldr	r2, [pc, #40]	; (5440 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    5416:	5cd3      	ldrb	r3, [r2, r3]
    5418:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    541a:	4b0a      	ldr	r3, [pc, #40]	; (5444 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    541c:	691b      	ldr	r3, [r3, #16]
    541e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    5420:	9b02      	ldr	r3, [sp, #8]
    5422:	f023 030c 	bic.w	r3, r3, #12
    5426:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    5428:	9b03      	ldr	r3, [sp, #12]
    542a:	009b      	lsls	r3, r3, #2
    542c:	9a02      	ldr	r2, [sp, #8]
    542e:	4313      	orrs	r3, r2
    5430:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    5432:	4a04      	ldr	r2, [pc, #16]	; (5444 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    5434:	9b02      	ldr	r3, [sp, #8]
    5436:	6113      	str	r3, [r2, #16]
}
    5438:	bf00      	nop
    543a:	b004      	add	sp, #16
    543c:	4770      	bx	lr
    543e:	bf00      	nop
    5440:	00019d04 	.word	0x00019d04
    5444:	40048000 	.word	0x40048000

00005448 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5448:	b084      	sub	sp, #16
    544a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    544c:	4b0a      	ldr	r3, [pc, #40]	; (5478 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    544e:	795b      	ldrb	r3, [r3, #5]
    5450:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    5452:	4b0a      	ldr	r3, [pc, #40]	; (547c <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    5454:	6a1b      	ldr	r3, [r3, #32]
    5456:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    5458:	9b02      	ldr	r3, [sp, #8]
    545a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    545e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    5460:	9b03      	ldr	r3, [sp, #12]
    5462:	061b      	lsls	r3, r3, #24
    5464:	9a02      	ldr	r2, [sp, #8]
    5466:	4313      	orrs	r3, r2
    5468:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    546a:	4a04      	ldr	r2, [pc, #16]	; (547c <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    546c:	9b02      	ldr	r3, [sp, #8]
    546e:	6213      	str	r3, [r2, #32]
}
    5470:	bf00      	nop
    5472:	b004      	add	sp, #16
    5474:	4770      	bx	lr
    5476:	bf00      	nop
    5478:	00019ca4 	.word	0x00019ca4
    547c:	40064000 	.word	0x40064000

00005480 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5480:	b084      	sub	sp, #16
    5482:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5484:	9b01      	ldr	r3, [sp, #4]
    5486:	685b      	ldr	r3, [r3, #4]
    5488:	4a0a      	ldr	r2, [pc, #40]	; (54b4 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    548a:	5cd3      	ldrb	r3, [r2, r3]
    548c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    548e:	4b0a      	ldr	r3, [pc, #40]	; (54b8 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    5490:	6a1b      	ldr	r3, [r3, #32]
    5492:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    5494:	9b02      	ldr	r3, [sp, #8]
    5496:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    549a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    549c:	9b03      	ldr	r3, [sp, #12]
    549e:	061b      	lsls	r3, r3, #24
    54a0:	9a02      	ldr	r2, [sp, #8]
    54a2:	4313      	orrs	r3, r2
    54a4:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    54a6:	4a04      	ldr	r2, [pc, #16]	; (54b8 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    54a8:	9b02      	ldr	r3, [sp, #8]
    54aa:	6213      	str	r3, [r2, #32]
}
    54ac:	bf00      	nop
    54ae:	b004      	add	sp, #16
    54b0:	4770      	bx	lr
    54b2:	bf00      	nop
    54b4:	00019ca4 	.word	0x00019ca4
    54b8:	40064000 	.word	0x40064000

000054bc <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    54bc:	b086      	sub	sp, #24
    54be:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    54c0:	4b20      	ldr	r3, [pc, #128]	; (5544 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    54c2:	795b      	ldrb	r3, [r3, #5]
    54c4:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    54c6:	9b01      	ldr	r3, [sp, #4]
    54c8:	681a      	ldr	r2, [r3, #0]
    54ca:	491f      	ldr	r1, [pc, #124]	; (5548 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    54cc:	4613      	mov	r3, r2
    54ce:	00db      	lsls	r3, r3, #3
    54d0:	4413      	add	r3, r2
    54d2:	440b      	add	r3, r1
    54d4:	781b      	ldrb	r3, [r3, #0]
    54d6:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    54d8:	4b1c      	ldr	r3, [pc, #112]	; (554c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    54da:	68db      	ldr	r3, [r3, #12]
    54dc:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    54de:	9b03      	ldr	r3, [sp, #12]
    54e0:	2b03      	cmp	r3, #3
    54e2:	d813      	bhi.n	550c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    54e4:	9b03      	ldr	r3, [sp, #12]
    54e6:	005b      	lsls	r3, r3, #1
    54e8:	3318      	adds	r3, #24
    54ea:	2203      	movs	r2, #3
    54ec:	fa02 f303 	lsl.w	r3, r2, r3
    54f0:	43db      	mvns	r3, r3
    54f2:	9a05      	ldr	r2, [sp, #20]
    54f4:	4013      	ands	r3, r2
    54f6:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    54f8:	9b03      	ldr	r3, [sp, #12]
    54fa:	005b      	lsls	r3, r3, #1
    54fc:	3318      	adds	r3, #24
    54fe:	9a04      	ldr	r2, [sp, #16]
    5500:	fa02 f303 	lsl.w	r3, r2, r3
    5504:	9a05      	ldr	r2, [sp, #20]
    5506:	4313      	orrs	r3, r2
    5508:	9305      	str	r3, [sp, #20]
    550a:	e014      	b.n	5536 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    550c:	9b03      	ldr	r3, [sp, #12]
    550e:	3b04      	subs	r3, #4
    5510:	005b      	lsls	r3, r3, #1
    5512:	3310      	adds	r3, #16
    5514:	2203      	movs	r2, #3
    5516:	fa02 f303 	lsl.w	r3, r2, r3
    551a:	43db      	mvns	r3, r3
    551c:	9a05      	ldr	r2, [sp, #20]
    551e:	4013      	ands	r3, r2
    5520:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    5522:	9b03      	ldr	r3, [sp, #12]
    5524:	3b04      	subs	r3, #4
    5526:	005b      	lsls	r3, r3, #1
    5528:	3310      	adds	r3, #16
    552a:	9a04      	ldr	r2, [sp, #16]
    552c:	fa02 f303 	lsl.w	r3, r2, r3
    5530:	9a05      	ldr	r2, [sp, #20]
    5532:	4313      	orrs	r3, r2
    5534:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    5536:	4a05      	ldr	r2, [pc, #20]	; (554c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    5538:	9b05      	ldr	r3, [sp, #20]
    553a:	60d3      	str	r3, [r2, #12]
}
    553c:	bf00      	nop
    553e:	b006      	add	sp, #24
    5540:	4770      	bx	lr
    5542:	bf00      	nop
    5544:	00019c4c 	.word	0x00019c4c
    5548:	0001993c 	.word	0x0001993c
    554c:	40048000 	.word	0x40048000

00005550 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5550:	b086      	sub	sp, #24
    5552:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5554:	9b01      	ldr	r3, [sp, #4]
    5556:	685b      	ldr	r3, [r3, #4]
    5558:	4a20      	ldr	r2, [pc, #128]	; (55dc <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    555a:	5cd3      	ldrb	r3, [r2, r3]
    555c:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    555e:	9b01      	ldr	r3, [sp, #4]
    5560:	681a      	ldr	r2, [r3, #0]
    5562:	491f      	ldr	r1, [pc, #124]	; (55e0 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    5564:	4613      	mov	r3, r2
    5566:	00db      	lsls	r3, r3, #3
    5568:	4413      	add	r3, r2
    556a:	440b      	add	r3, r1
    556c:	781b      	ldrb	r3, [r3, #0]
    556e:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    5570:	4b1c      	ldr	r3, [pc, #112]	; (55e4 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    5572:	68db      	ldr	r3, [r3, #12]
    5574:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    5576:	9b03      	ldr	r3, [sp, #12]
    5578:	2b03      	cmp	r3, #3
    557a:	d813      	bhi.n	55a4 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    557c:	9b03      	ldr	r3, [sp, #12]
    557e:	005b      	lsls	r3, r3, #1
    5580:	3318      	adds	r3, #24
    5582:	2203      	movs	r2, #3
    5584:	fa02 f303 	lsl.w	r3, r2, r3
    5588:	43db      	mvns	r3, r3
    558a:	9a05      	ldr	r2, [sp, #20]
    558c:	4013      	ands	r3, r2
    558e:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    5590:	9b03      	ldr	r3, [sp, #12]
    5592:	005b      	lsls	r3, r3, #1
    5594:	3318      	adds	r3, #24
    5596:	9a04      	ldr	r2, [sp, #16]
    5598:	fa02 f303 	lsl.w	r3, r2, r3
    559c:	9a05      	ldr	r2, [sp, #20]
    559e:	4313      	orrs	r3, r2
    55a0:	9305      	str	r3, [sp, #20]
    55a2:	e014      	b.n	55ce <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    55a4:	9b03      	ldr	r3, [sp, #12]
    55a6:	3b04      	subs	r3, #4
    55a8:	005b      	lsls	r3, r3, #1
    55aa:	3310      	adds	r3, #16
    55ac:	2203      	movs	r2, #3
    55ae:	fa02 f303 	lsl.w	r3, r2, r3
    55b2:	43db      	mvns	r3, r3
    55b4:	9a05      	ldr	r2, [sp, #20]
    55b6:	4013      	ands	r3, r2
    55b8:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    55ba:	9b03      	ldr	r3, [sp, #12]
    55bc:	3b04      	subs	r3, #4
    55be:	005b      	lsls	r3, r3, #1
    55c0:	3310      	adds	r3, #16
    55c2:	9a04      	ldr	r2, [sp, #16]
    55c4:	fa02 f303 	lsl.w	r3, r2, r3
    55c8:	9a05      	ldr	r2, [sp, #20]
    55ca:	4313      	orrs	r3, r2
    55cc:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    55ce:	4a05      	ldr	r2, [pc, #20]	; (55e4 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    55d0:	9b05      	ldr	r3, [sp, #20]
    55d2:	60d3      	str	r3, [r2, #12]
}
    55d4:	bf00      	nop
    55d6:	b006      	add	sp, #24
    55d8:	4770      	bx	lr
    55da:	bf00      	nop
    55dc:	00019c4c 	.word	0x00019c4c
    55e0:	0001993c 	.word	0x0001993c
    55e4:	40048000 	.word	0x40048000

000055e8 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    55e8:	b084      	sub	sp, #16
    55ea:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    55ec:	4b06      	ldr	r3, [pc, #24]	; (5608 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    55ee:	685b      	ldr	r3, [r3, #4]
    55f0:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    55f2:	9b03      	ldr	r3, [sp, #12]
    55f4:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    55f8:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    55fa:	4a03      	ldr	r2, [pc, #12]	; (5608 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    55fc:	9b03      	ldr	r3, [sp, #12]
    55fe:	6053      	str	r3, [r2, #4]
}
    5600:	bf00      	nop
    5602:	b004      	add	sp, #16
    5604:	4770      	bx	lr
    5606:	bf00      	nop
    5608:	40048000 	.word	0x40048000

0000560c <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    560c:	b084      	sub	sp, #16
    560e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5610:	9b01      	ldr	r3, [sp, #4]
    5612:	685b      	ldr	r3, [r3, #4]
    5614:	4a0a      	ldr	r2, [pc, #40]	; (5640 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    5616:	5cd3      	ldrb	r3, [r2, r3]
    5618:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    561a:	4b0a      	ldr	r3, [pc, #40]	; (5644 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    561c:	685b      	ldr	r3, [r3, #4]
    561e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    5620:	9b02      	ldr	r3, [sp, #8]
    5622:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    5626:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    5628:	9b03      	ldr	r3, [sp, #12]
    562a:	011b      	lsls	r3, r3, #4
    562c:	9a02      	ldr	r2, [sp, #8]
    562e:	4313      	orrs	r3, r2
    5630:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    5632:	4a04      	ldr	r2, [pc, #16]	; (5644 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    5634:	9b02      	ldr	r3, [sp, #8]
    5636:	6053      	str	r3, [r2, #4]
}
    5638:	bf00      	nop
    563a:	b004      	add	sp, #16
    563c:	4770      	bx	lr
    563e:	bf00      	nop
    5640:	00019c4c 	.word	0x00019c4c
    5644:	40048000 	.word	0x40048000

00005648 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5648:	b084      	sub	sp, #16
    564a:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    564c:	9b01      	ldr	r3, [sp, #4]
    564e:	681a      	ldr	r2, [r3, #0]
    5650:	490f      	ldr	r1, [pc, #60]	; (5690 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    5652:	4613      	mov	r3, r2
    5654:	00db      	lsls	r3, r3, #3
    5656:	4413      	add	r3, r2
    5658:	440b      	add	r3, r1
    565a:	3304      	adds	r3, #4
    565c:	781b      	ldrb	r3, [r3, #0]
    565e:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    5660:	4a0c      	ldr	r2, [pc, #48]	; (5694 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    5662:	9b03      	ldr	r3, [sp, #12]
    5664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5668:	490a      	ldr	r1, [pc, #40]	; (5694 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    566a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    566e:	9b03      	ldr	r3, [sp, #12]
    5670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    5674:	4a07      	ldr	r2, [pc, #28]	; (5694 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    5676:	9b03      	ldr	r3, [sp, #12]
    5678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    567c:	4905      	ldr	r1, [pc, #20]	; (5694 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    567e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    5682:	9b03      	ldr	r3, [sp, #12]
    5684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    5688:	bf00      	nop
    568a:	b004      	add	sp, #16
    568c:	4770      	bx	lr
    568e:	bf00      	nop
    5690:	0001993c 	.word	0x0001993c
    5694:	40065000 	.word	0x40065000

00005698 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5698:	b086      	sub	sp, #24
    569a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    569c:	9b01      	ldr	r3, [sp, #4]
    569e:	681a      	ldr	r2, [r3, #0]
    56a0:	4912      	ldr	r1, [pc, #72]	; (56ec <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    56a2:	4613      	mov	r3, r2
    56a4:	00db      	lsls	r3, r3, #3
    56a6:	4413      	add	r3, r2
    56a8:	440b      	add	r3, r1
    56aa:	3304      	adds	r3, #4
    56ac:	781b      	ldrb	r3, [r3, #0]
    56ae:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    56b0:	9b01      	ldr	r3, [sp, #4]
    56b2:	685b      	ldr	r3, [r3, #4]
    56b4:	4a0e      	ldr	r2, [pc, #56]	; (56f0 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    56b6:	5cd3      	ldrb	r3, [r2, r3]
    56b8:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    56ba:	4a0e      	ldr	r2, [pc, #56]	; (56f4 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    56bc:	9b05      	ldr	r3, [sp, #20]
    56be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    56c2:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    56c4:	9b03      	ldr	r3, [sp, #12]
    56c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    56ca:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    56cc:	9b04      	ldr	r3, [sp, #16]
    56ce:	061b      	lsls	r3, r3, #24
    56d0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    56d4:	9a03      	ldr	r2, [sp, #12]
    56d6:	4313      	orrs	r3, r2
    56d8:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    56da:	4906      	ldr	r1, [pc, #24]	; (56f4 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    56dc:	9b05      	ldr	r3, [sp, #20]
    56de:	9a03      	ldr	r2, [sp, #12]
    56e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    56e4:	bf00      	nop
    56e6:	b006      	add	sp, #24
    56e8:	4770      	bx	lr
    56ea:	bf00      	nop
    56ec:	0001993c 	.word	0x0001993c
    56f0:	00019cd4 	.word	0x00019cd4
    56f4:	40065000 	.word	0x40065000

000056f8 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    56f8:	b084      	sub	sp, #16
    56fa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    56fc:	4b0b      	ldr	r3, [pc, #44]	; (572c <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    56fe:	7f1b      	ldrb	r3, [r3, #28]
    5700:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    5702:	4b0b      	ldr	r3, [pc, #44]	; (5730 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    5704:	685b      	ldr	r3, [r3, #4]
    5706:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    5708:	9b02      	ldr	r3, [sp, #8]
    570a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    570e:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    5710:	9b03      	ldr	r3, [sp, #12]
    5712:	031b      	lsls	r3, r3, #12
    5714:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    5718:	9a02      	ldr	r2, [sp, #8]
    571a:	4313      	orrs	r3, r2
    571c:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    571e:	4a04      	ldr	r2, [pc, #16]	; (5730 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    5720:	9b02      	ldr	r3, [sp, #8]
    5722:	6053      	str	r3, [r2, #4]
}
    5724:	bf00      	nop
    5726:	b004      	add	sp, #16
    5728:	4770      	bx	lr
    572a:	bf00      	nop
    572c:	00019c4c 	.word	0x00019c4c
    5730:	40048000 	.word	0x40048000

00005734 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    5734:	b084      	sub	sp, #16
    5736:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    5738:	9b01      	ldr	r3, [sp, #4]
    573a:	685b      	ldr	r3, [r3, #4]
    573c:	4a0b      	ldr	r2, [pc, #44]	; (576c <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    573e:	5cd3      	ldrb	r3, [r2, r3]
    5740:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    5742:	4b0b      	ldr	r3, [pc, #44]	; (5770 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    5744:	685b      	ldr	r3, [r3, #4]
    5746:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    5748:	9b02      	ldr	r3, [sp, #8]
    574a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    574e:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    5750:	9b03      	ldr	r3, [sp, #12]
    5752:	031b      	lsls	r3, r3, #12
    5754:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    5758:	9a02      	ldr	r2, [sp, #8]
    575a:	4313      	orrs	r3, r2
    575c:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    575e:	4a04      	ldr	r2, [pc, #16]	; (5770 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    5760:	9b02      	ldr	r3, [sp, #8]
    5762:	6053      	str	r3, [r2, #4]
}
    5764:	bf00      	nop
    5766:	b004      	add	sp, #16
    5768:	4770      	bx	lr
    576a:	bf00      	nop
    576c:	00019c4c 	.word	0x00019c4c
    5770:	40048000 	.word	0x40048000

00005774 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    5774:	b500      	push	{lr}
    5776:	b085      	sub	sp, #20
    5778:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    577a:	2300      	movs	r3, #0
    577c:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    5780:	9b01      	ldr	r3, [sp, #4]
    5782:	2b00      	cmp	r3, #0
    5784:	d037      	beq.n	57f6 <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    5786:	2300      	movs	r3, #0
    5788:	9303      	str	r3, [sp, #12]
    578a:	e02b      	b.n	57e4 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    578c:	4b29      	ldr	r3, [pc, #164]	; (5834 <DisableSafeClock+0xc0>)
    578e:	6819      	ldr	r1, [r3, #0]
    5790:	9a03      	ldr	r2, [sp, #12]
    5792:	4613      	mov	r3, r2
    5794:	005b      	lsls	r3, r3, #1
    5796:	4413      	add	r3, r2
    5798:	009b      	lsls	r3, r3, #2
    579a:	440b      	add	r3, r1
    579c:	3314      	adds	r3, #20
    579e:	681b      	ldr	r3, [r3, #0]
    57a0:	2b05      	cmp	r3, #5
    57a2:	d11c      	bne.n	57de <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    57a4:	2301      	movs	r3, #1
    57a6:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    57aa:	4b22      	ldr	r3, [pc, #136]	; (5834 <DisableSafeClock+0xc0>)
    57ac:	6819      	ldr	r1, [r3, #0]
    57ae:	9a03      	ldr	r2, [sp, #12]
    57b0:	4613      	mov	r3, r2
    57b2:	005b      	lsls	r3, r3, #1
    57b4:	4413      	add	r3, r2
    57b6:	009b      	lsls	r3, r3, #2
    57b8:	440b      	add	r3, r1
    57ba:	3318      	adds	r3, #24
    57bc:	881b      	ldrh	r3, [r3, #0]
    57be:	2b00      	cmp	r3, #0
    57c0:	d118      	bne.n	57f4 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    57c2:	4b1d      	ldr	r3, [pc, #116]	; (5838 <DisableSafeClock+0xc4>)
    57c4:	791b      	ldrb	r3, [r3, #4]
    57c6:	4619      	mov	r1, r3
    57c8:	4a1c      	ldr	r2, [pc, #112]	; (583c <DisableSafeClock+0xc8>)
    57ca:	460b      	mov	r3, r1
    57cc:	005b      	lsls	r3, r3, #1
    57ce:	440b      	add	r3, r1
    57d0:	009b      	lsls	r3, r3, #2
    57d2:	4413      	add	r3, r2
    57d4:	3308      	adds	r3, #8
    57d6:	681b      	ldr	r3, [r3, #0]
    57d8:	2005      	movs	r0, #5
    57da:	4798      	blx	r3
                }
                break;
    57dc:	e00a      	b.n	57f4 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    57de:	9b03      	ldr	r3, [sp, #12]
    57e0:	3301      	adds	r3, #1
    57e2:	9303      	str	r3, [sp, #12]
    57e4:	4b13      	ldr	r3, [pc, #76]	; (5834 <DisableSafeClock+0xc0>)
    57e6:	681b      	ldr	r3, [r3, #0]
    57e8:	7a1b      	ldrb	r3, [r3, #8]
    57ea:	461a      	mov	r2, r3
    57ec:	9b03      	ldr	r3, [sp, #12]
    57ee:	4293      	cmp	r3, r2
    57f0:	d3cc      	bcc.n	578c <DisableSafeClock+0x18>
    57f2:	e000      	b.n	57f6 <DisableSafeClock+0x82>
                break;
    57f4:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    57f6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    57fa:	f083 0301 	eor.w	r3, r3, #1
    57fe:	b2db      	uxtb	r3, r3
    5800:	2b00      	cmp	r3, #0
    5802:	d013      	beq.n	582c <DisableSafeClock+0xb8>
    5804:	4b0e      	ldr	r3, [pc, #56]	; (5840 <DisableSafeClock+0xcc>)
    5806:	781b      	ldrb	r3, [r3, #0]
    5808:	f083 0301 	eor.w	r3, r3, #1
    580c:	b2db      	uxtb	r3, r3
    580e:	2b00      	cmp	r3, #0
    5810:	d00c      	beq.n	582c <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    5812:	4b09      	ldr	r3, [pc, #36]	; (5838 <DisableSafeClock+0xc4>)
    5814:	791b      	ldrb	r3, [r3, #4]
    5816:	4619      	mov	r1, r3
    5818:	4a08      	ldr	r2, [pc, #32]	; (583c <DisableSafeClock+0xc8>)
    581a:	460b      	mov	r3, r1
    581c:	005b      	lsls	r3, r3, #1
    581e:	440b      	add	r3, r1
    5820:	009b      	lsls	r3, r3, #2
    5822:	4413      	add	r3, r2
    5824:	3308      	adds	r3, #8
    5826:	681b      	ldr	r3, [r3, #0]
    5828:	2005      	movs	r0, #5
    582a:	4798      	blx	r3
    }
}
    582c:	bf00      	nop
    582e:	b005      	add	sp, #20
    5830:	f85d fb04 	ldr.w	pc, [sp], #4
    5834:	1fff8bdc 	.word	0x1fff8bdc
    5838:	000198cc 	.word	0x000198cc
    583c:	00019efc 	.word	0x00019efc
    5840:	1fff8b18 	.word	0x1fff8b18

00005844 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    5844:	4b06      	ldr	r3, [pc, #24]	; (5860 <SetFircToResetValue_TrustedCall+0x1c>)
    5846:	2200      	movs	r2, #0
    5848:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    584c:	4b04      	ldr	r3, [pc, #16]	; (5860 <SetFircToResetValue_TrustedCall+0x1c>)
    584e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    5852:	4a03      	ldr	r2, [pc, #12]	; (5860 <SetFircToResetValue_TrustedCall+0x1c>)
    5854:	f043 0301 	orr.w	r3, r3, #1
    5858:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    585c:	bf00      	nop
    585e:	4770      	bx	lr
    5860:	40064000 	.word	0x40064000

00005864 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    5864:	b084      	sub	sp, #16
    5866:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    5868:	2303      	movs	r3, #3
    586a:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    586c:	2300      	movs	r3, #0
    586e:	9302      	str	r3, [sp, #8]
    5870:	e028      	b.n	58c4 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    5872:	9b01      	ldr	r3, [sp, #4]
    5874:	9a02      	ldr	r2, [sp, #8]
    5876:	320d      	adds	r2, #13
    5878:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    587c:	2b28      	cmp	r3, #40	; 0x28
    587e:	d10b      	bne.n	5898 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    5880:	9a01      	ldr	r2, [sp, #4]
    5882:	9b02      	ldr	r3, [sp, #8]
    5884:	330d      	adds	r3, #13
    5886:	00db      	lsls	r3, r3, #3
    5888:	4413      	add	r3, r2
    588a:	685b      	ldr	r3, [r3, #4]
    588c:	4a2b      	ldr	r2, [pc, #172]	; (593c <SetSimLpoclksRegister_TrustedCall+0xd8>)
    588e:	5cd3      	ldrb	r3, [r2, r3]
    5890:	011b      	lsls	r3, r3, #4
    5892:	9a03      	ldr	r2, [sp, #12]
    5894:	4313      	orrs	r3, r2
    5896:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    5898:	9b01      	ldr	r3, [sp, #4]
    589a:	9a02      	ldr	r2, [sp, #8]
    589c:	320d      	adds	r2, #13
    589e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    58a2:	2b29      	cmp	r3, #41	; 0x29
    58a4:	d10b      	bne.n	58be <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    58a6:	9a01      	ldr	r2, [sp, #4]
    58a8:	9b02      	ldr	r3, [sp, #8]
    58aa:	330d      	adds	r3, #13
    58ac:	00db      	lsls	r3, r3, #3
    58ae:	4413      	add	r3, r2
    58b0:	685b      	ldr	r3, [r3, #4]
    58b2:	4a23      	ldr	r2, [pc, #140]	; (5940 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    58b4:	5cd3      	ldrb	r3, [r2, r3]
    58b6:	009b      	lsls	r3, r3, #2
    58b8:	9a03      	ldr	r2, [sp, #12]
    58ba:	4313      	orrs	r3, r2
    58bc:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    58be:	9b02      	ldr	r3, [sp, #8]
    58c0:	3301      	adds	r3, #1
    58c2:	9302      	str	r3, [sp, #8]
    58c4:	9b01      	ldr	r3, [sp, #4]
    58c6:	7adb      	ldrb	r3, [r3, #11]
    58c8:	461a      	mov	r2, r3
    58ca:	9b02      	ldr	r3, [sp, #8]
    58cc:	4293      	cmp	r3, r2
    58ce:	d3d0      	bcc.n	5872 <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    58d0:	2300      	movs	r3, #0
    58d2:	9302      	str	r3, [sp, #8]
    58d4:	e026      	b.n	5924 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    58d6:	9a01      	ldr	r2, [sp, #4]
    58d8:	9b02      	ldr	r3, [sp, #8]
    58da:	334e      	adds	r3, #78	; 0x4e
    58dc:	00db      	lsls	r3, r3, #3
    58de:	4413      	add	r3, r2
    58e0:	685b      	ldr	r3, [r3, #4]
    58e2:	2b12      	cmp	r3, #18
    58e4:	d109      	bne.n	58fa <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    58e6:	9a01      	ldr	r2, [sp, #4]
    58e8:	9b02      	ldr	r3, [sp, #8]
    58ea:	334e      	adds	r3, #78	; 0x4e
    58ec:	00db      	lsls	r3, r3, #3
    58ee:	4413      	add	r3, r2
    58f0:	891b      	ldrh	r3, [r3, #8]
    58f2:	005b      	lsls	r3, r3, #1
    58f4:	9a03      	ldr	r2, [sp, #12]
    58f6:	4313      	orrs	r3, r2
    58f8:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    58fa:	9a01      	ldr	r2, [sp, #4]
    58fc:	9b02      	ldr	r3, [sp, #8]
    58fe:	334e      	adds	r3, #78	; 0x4e
    5900:	00db      	lsls	r3, r3, #3
    5902:	4413      	add	r3, r2
    5904:	685b      	ldr	r3, [r3, #4]
    5906:	2b13      	cmp	r3, #19
    5908:	d109      	bne.n	591e <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    590a:	9a01      	ldr	r2, [sp, #4]
    590c:	9b02      	ldr	r3, [sp, #8]
    590e:	334e      	adds	r3, #78	; 0x4e
    5910:	00db      	lsls	r3, r3, #3
    5912:	4413      	add	r3, r2
    5914:	891b      	ldrh	r3, [r3, #8]
    5916:	461a      	mov	r2, r3
    5918:	9b03      	ldr	r3, [sp, #12]
    591a:	4313      	orrs	r3, r2
    591c:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    591e:	9b02      	ldr	r3, [sp, #8]
    5920:	3301      	adds	r3, #1
    5922:	9302      	str	r3, [sp, #8]
    5924:	9b01      	ldr	r3, [sp, #4]
    5926:	7c1b      	ldrb	r3, [r3, #16]
    5928:	461a      	mov	r2, r3
    592a:	9b02      	ldr	r3, [sp, #8]
    592c:	4293      	cmp	r3, r2
    592e:	d3d2      	bcc.n	58d6 <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    5930:	4a04      	ldr	r2, [pc, #16]	; (5944 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    5932:	9b03      	ldr	r3, [sp, #12]
    5934:	6113      	str	r3, [r2, #16]
}
    5936:	bf00      	nop
    5938:	b004      	add	sp, #16
    593a:	4770      	bx	lr
    593c:	00019c4c 	.word	0x00019c4c
    5940:	00019d04 	.word	0x00019d04
    5944:	40048000 	.word	0x40048000

00005948 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    5948:	b500      	push	{lr}
    594a:	b089      	sub	sp, #36	; 0x24
    594c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    594e:	2300      	movs	r3, #0
    5950:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    5954:	4a21      	ldr	r2, [pc, #132]	; (59dc <Clock_Ip_SpecificPlatformInitClock+0x94>)
    5956:	9b01      	ldr	r3, [sp, #4]
    5958:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    595a:	4b21      	ldr	r3, [pc, #132]	; (59e0 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    595c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    5960:	f003 0301 	and.w	r3, r3, #1
    5964:	2b00      	cmp	r3, #0
    5966:	d12e      	bne.n	59c6 <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    5968:	4b1e      	ldr	r3, [pc, #120]	; (59e4 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    596a:	2200      	movs	r2, #0
    596c:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    596e:	f7ff ff69 	bl	5844 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    5972:	aa03      	add	r2, sp, #12
    5974:	a904      	add	r1, sp, #16
    5976:	a805      	add	r0, sp, #20
    5978:	f24c 3350 	movw	r3, #50000	; 0xc350
    597c:	f7fe f8ae 	bl	3adc <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    5980:	4b17      	ldr	r3, [pc, #92]	; (59e0 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    5982:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    5986:	0e1b      	lsrs	r3, r3, #24
    5988:	f003 0301 	and.w	r3, r3, #1
    598c:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    598e:	9a03      	ldr	r2, [sp, #12]
    5990:	a904      	add	r1, sp, #16
    5992:	ab05      	add	r3, sp, #20
    5994:	4618      	mov	r0, r3
    5996:	f7fe f8bb 	bl	3b10 <Clock_Ip_TimeoutExpired>
    599a:	4603      	mov	r3, r0
    599c:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    59a0:	9b06      	ldr	r3, [sp, #24]
    59a2:	2b00      	cmp	r3, #0
    59a4:	d106      	bne.n	59b4 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    59a6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    59aa:	f083 0301 	eor.w	r3, r3, #1
    59ae:	b2db      	uxtb	r3, r3
    59b0:	2b00      	cmp	r3, #0
    59b2:	d1e5      	bne.n	5980 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    59b4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    59b8:	2b00      	cmp	r3, #0
    59ba:	d007      	beq.n	59cc <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    59bc:	2105      	movs	r1, #5
    59be:	2001      	movs	r0, #1
    59c0:	f7fe f87c 	bl	3abc <Clock_Ip_ReportClockErrors>
    59c4:	e002      	b.n	59cc <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    59c6:	4b07      	ldr	r3, [pc, #28]	; (59e4 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    59c8:	2201      	movs	r2, #1
    59ca:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    59cc:	9801      	ldr	r0, [sp, #4]
    59ce:	f7ff ff49 	bl	5864 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    59d2:	bf00      	nop
    59d4:	b009      	add	sp, #36	; 0x24
    59d6:	f85d fb04 	ldr.w	pc, [sp], #4
    59da:	bf00      	nop
    59dc:	1fff8bdc 	.word	0x1fff8bdc
    59e0:	40064000 	.word	0x40064000
    59e4:	1fff8b18 	.word	0x1fff8b18

000059e8 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    59e8:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    59ea:	2300      	movs	r3, #0
    59ec:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    59ee:	4b29      	ldr	r3, [pc, #164]	; (5a94 <getFircConfig+0xac>)
    59f0:	681b      	ldr	r3, [r3, #0]
    59f2:	2b00      	cmp	r3, #0
    59f4:	d024      	beq.n	5a40 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    59f6:	2300      	movs	r3, #0
    59f8:	9301      	str	r3, [sp, #4]
    59fa:	e01a      	b.n	5a32 <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    59fc:	4b25      	ldr	r3, [pc, #148]	; (5a94 <getFircConfig+0xac>)
    59fe:	6819      	ldr	r1, [r3, #0]
    5a00:	9a01      	ldr	r2, [sp, #4]
    5a02:	4613      	mov	r3, r2
    5a04:	005b      	lsls	r3, r3, #1
    5a06:	4413      	add	r3, r2
    5a08:	009b      	lsls	r3, r3, #2
    5a0a:	440b      	add	r3, r1
    5a0c:	3314      	adds	r3, #20
    5a0e:	681b      	ldr	r3, [r3, #0]
    5a10:	2b05      	cmp	r3, #5
    5a12:	d10b      	bne.n	5a2c <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    5a14:	4b1f      	ldr	r3, [pc, #124]	; (5a94 <getFircConfig+0xac>)
    5a16:	6819      	ldr	r1, [r3, #0]
    5a18:	9a01      	ldr	r2, [sp, #4]
    5a1a:	4613      	mov	r3, r2
    5a1c:	005b      	lsls	r3, r3, #1
    5a1e:	4413      	add	r3, r2
    5a20:	009b      	lsls	r3, r3, #2
    5a22:	3310      	adds	r3, #16
    5a24:	440b      	add	r3, r1
    5a26:	3304      	adds	r3, #4
    5a28:	9300      	str	r3, [sp, #0]
                break;
    5a2a:	e009      	b.n	5a40 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    5a2c:	9b01      	ldr	r3, [sp, #4]
    5a2e:	3301      	adds	r3, #1
    5a30:	9301      	str	r3, [sp, #4]
    5a32:	4b18      	ldr	r3, [pc, #96]	; (5a94 <getFircConfig+0xac>)
    5a34:	681b      	ldr	r3, [r3, #0]
    5a36:	7a1b      	ldrb	r3, [r3, #8]
    5a38:	461a      	mov	r2, r3
    5a3a:	9b01      	ldr	r3, [sp, #4]
    5a3c:	4293      	cmp	r3, r2
    5a3e:	d3dd      	bcc.n	59fc <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5a40:	9b00      	ldr	r3, [sp, #0]
    5a42:	2b00      	cmp	r3, #0
    5a44:	d121      	bne.n	5a8a <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    5a46:	4b14      	ldr	r3, [pc, #80]	; (5a98 <getFircConfig+0xb0>)
    5a48:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    5a4a:	4b13      	ldr	r3, [pc, #76]	; (5a98 <getFircConfig+0xb0>)
    5a4c:	2205      	movs	r2, #5
    5a4e:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    5a50:	4b12      	ldr	r3, [pc, #72]	; (5a9c <getFircConfig+0xb4>)
    5a52:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    5a56:	b29b      	uxth	r3, r3
    5a58:	f003 0301 	and.w	r3, r3, #1
    5a5c:	b29a      	uxth	r2, r3
    5a5e:	4b0e      	ldr	r3, [pc, #56]	; (5a98 <getFircConfig+0xb0>)
    5a60:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    5a62:	4b0e      	ldr	r3, [pc, #56]	; (5a9c <getFircConfig+0xb4>)
    5a64:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    5a68:	b2db      	uxtb	r3, r3
    5a6a:	f003 0303 	and.w	r3, r3, #3
    5a6e:	b2da      	uxtb	r2, r3
    5a70:	4b09      	ldr	r3, [pc, #36]	; (5a98 <getFircConfig+0xb0>)
    5a72:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    5a74:	4b09      	ldr	r3, [pc, #36]	; (5a9c <getFircConfig+0xb4>)
    5a76:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    5a7a:	b2db      	uxtb	r3, r3
    5a7c:	10db      	asrs	r3, r3, #3
    5a7e:	b2db      	uxtb	r3, r3
    5a80:	f003 0301 	and.w	r3, r3, #1
    5a84:	b2da      	uxtb	r2, r3
    5a86:	4b04      	ldr	r3, [pc, #16]	; (5a98 <getFircConfig+0xb0>)
    5a88:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    5a8a:	9b00      	ldr	r3, [sp, #0]
}
    5a8c:	4618      	mov	r0, r3
    5a8e:	b002      	add	sp, #8
    5a90:	4770      	bx	lr
    5a92:	bf00      	nop
    5a94:	1fff8bdc 	.word	0x1fff8bdc
    5a98:	1fff8c48 	.word	0x1fff8c48
    5a9c:	40064000 	.word	0x40064000

00005aa0 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    5aa0:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    5aa2:	2300      	movs	r3, #0
    5aa4:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    5aa6:	4b20      	ldr	r3, [pc, #128]	; (5b28 <getSoscConfig+0x88>)
    5aa8:	681b      	ldr	r3, [r3, #0]
    5aaa:	2b00      	cmp	r3, #0
    5aac:	d024      	beq.n	5af8 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    5aae:	2300      	movs	r3, #0
    5ab0:	9301      	str	r3, [sp, #4]
    5ab2:	e01a      	b.n	5aea <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    5ab4:	4b1c      	ldr	r3, [pc, #112]	; (5b28 <getSoscConfig+0x88>)
    5ab6:	6819      	ldr	r1, [r3, #0]
    5ab8:	9a01      	ldr	r2, [sp, #4]
    5aba:	4613      	mov	r3, r2
    5abc:	009b      	lsls	r3, r3, #2
    5abe:	4413      	add	r3, r2
    5ac0:	009b      	lsls	r3, r3, #2
    5ac2:	440b      	add	r3, r1
    5ac4:	332c      	adds	r3, #44	; 0x2c
    5ac6:	681b      	ldr	r3, [r3, #0]
    5ac8:	2b08      	cmp	r3, #8
    5aca:	d10b      	bne.n	5ae4 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    5acc:	4b16      	ldr	r3, [pc, #88]	; (5b28 <getSoscConfig+0x88>)
    5ace:	6819      	ldr	r1, [r3, #0]
    5ad0:	9a01      	ldr	r2, [sp, #4]
    5ad2:	4613      	mov	r3, r2
    5ad4:	009b      	lsls	r3, r3, #2
    5ad6:	4413      	add	r3, r2
    5ad8:	009b      	lsls	r3, r3, #2
    5ada:	3328      	adds	r3, #40	; 0x28
    5adc:	440b      	add	r3, r1
    5ade:	3304      	adds	r3, #4
    5ae0:	9300      	str	r3, [sp, #0]
                break;
    5ae2:	e009      	b.n	5af8 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    5ae4:	9b01      	ldr	r3, [sp, #4]
    5ae6:	3301      	adds	r3, #1
    5ae8:	9301      	str	r3, [sp, #4]
    5aea:	4b0f      	ldr	r3, [pc, #60]	; (5b28 <getSoscConfig+0x88>)
    5aec:	681b      	ldr	r3, [r3, #0]
    5aee:	7a5b      	ldrb	r3, [r3, #9]
    5af0:	461a      	mov	r2, r3
    5af2:	9b01      	ldr	r3, [sp, #4]
    5af4:	4293      	cmp	r3, r2
    5af6:	d3dd      	bcc.n	5ab4 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5af8:	9b00      	ldr	r3, [sp, #0]
    5afa:	2b00      	cmp	r3, #0
    5afc:	d110      	bne.n	5b20 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    5afe:	4b0b      	ldr	r3, [pc, #44]	; (5b2c <getSoscConfig+0x8c>)
    5b00:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    5b02:	4b0a      	ldr	r3, [pc, #40]	; (5b2c <getSoscConfig+0x8c>)
    5b04:	2208      	movs	r2, #8
    5b06:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    5b08:	4b09      	ldr	r3, [pc, #36]	; (5b30 <getSoscConfig+0x90>)
    5b0a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    5b0e:	b29b      	uxth	r3, r3
    5b10:	f003 0301 	and.w	r3, r3, #1
    5b14:	b29a      	uxth	r2, r3
    5b16:	4b05      	ldr	r3, [pc, #20]	; (5b2c <getSoscConfig+0x8c>)
    5b18:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    5b1a:	4b04      	ldr	r3, [pc, #16]	; (5b2c <getSoscConfig+0x8c>)
    5b1c:	4a05      	ldr	r2, [pc, #20]	; (5b34 <getSoscConfig+0x94>)
    5b1e:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    5b20:	9b00      	ldr	r3, [sp, #0]
}
    5b22:	4618      	mov	r0, r3
    5b24:	b002      	add	sp, #8
    5b26:	4770      	bx	lr
    5b28:	1fff8bdc 	.word	0x1fff8bdc
    5b2c:	1fff8c54 	.word	0x1fff8c54
    5b30:	40064000 	.word	0x40064000
    5b34:	02625a00 	.word	0x02625a00

00005b38 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    5b38:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    5b3a:	2300      	movs	r3, #0
    5b3c:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    5b3e:	4b28      	ldr	r3, [pc, #160]	; (5be0 <getSpllConfig+0xa8>)
    5b40:	681b      	ldr	r3, [r3, #0]
    5b42:	2b00      	cmp	r3, #0
    5b44:	d023      	beq.n	5b8e <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    5b46:	2300      	movs	r3, #0
    5b48:	9301      	str	r3, [sp, #4]
    5b4a:	e019      	b.n	5b80 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    5b4c:	4b24      	ldr	r3, [pc, #144]	; (5be0 <getSpllConfig+0xa8>)
    5b4e:	6819      	ldr	r1, [r3, #0]
    5b50:	9a01      	ldr	r2, [sp, #4]
    5b52:	4613      	mov	r3, r2
    5b54:	009b      	lsls	r3, r3, #2
    5b56:	4413      	add	r3, r2
    5b58:	00db      	lsls	r3, r3, #3
    5b5a:	440b      	add	r3, r1
    5b5c:	3340      	adds	r3, #64	; 0x40
    5b5e:	681b      	ldr	r3, [r3, #0]
    5b60:	2b09      	cmp	r3, #9
    5b62:	d10a      	bne.n	5b7a <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    5b64:	4b1e      	ldr	r3, [pc, #120]	; (5be0 <getSpllConfig+0xa8>)
    5b66:	6819      	ldr	r1, [r3, #0]
    5b68:	9a01      	ldr	r2, [sp, #4]
    5b6a:	4613      	mov	r3, r2
    5b6c:	009b      	lsls	r3, r3, #2
    5b6e:	4413      	add	r3, r2
    5b70:	00db      	lsls	r3, r3, #3
    5b72:	3340      	adds	r3, #64	; 0x40
    5b74:	440b      	add	r3, r1
    5b76:	9300      	str	r3, [sp, #0]
                break;
    5b78:	e009      	b.n	5b8e <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    5b7a:	9b01      	ldr	r3, [sp, #4]
    5b7c:	3301      	adds	r3, #1
    5b7e:	9301      	str	r3, [sp, #4]
    5b80:	4b17      	ldr	r3, [pc, #92]	; (5be0 <getSpllConfig+0xa8>)
    5b82:	681b      	ldr	r3, [r3, #0]
    5b84:	7a9b      	ldrb	r3, [r3, #10]
    5b86:	461a      	mov	r2, r3
    5b88:	9b01      	ldr	r3, [sp, #4]
    5b8a:	4293      	cmp	r3, r2
    5b8c:	d3de      	bcc.n	5b4c <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5b8e:	9b00      	ldr	r3, [sp, #0]
    5b90:	2b00      	cmp	r3, #0
    5b92:	d121      	bne.n	5bd8 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    5b94:	4b13      	ldr	r3, [pc, #76]	; (5be4 <getSpllConfig+0xac>)
    5b96:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    5b98:	4b12      	ldr	r3, [pc, #72]	; (5be4 <getSpllConfig+0xac>)
    5b9a:	2209      	movs	r2, #9
    5b9c:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    5b9e:	4b12      	ldr	r3, [pc, #72]	; (5be8 <getSpllConfig+0xb0>)
    5ba0:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    5ba4:	b29b      	uxth	r3, r3
    5ba6:	f003 0301 	and.w	r3, r3, #1
    5baa:	b29a      	uxth	r2, r3
    5bac:	4b0d      	ldr	r3, [pc, #52]	; (5be4 <getSpllConfig+0xac>)
    5bae:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    5bb0:	4b0d      	ldr	r3, [pc, #52]	; (5be8 <getSpllConfig+0xb0>)
    5bb2:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    5bb6:	0a1b      	lsrs	r3, r3, #8
    5bb8:	b2db      	uxtb	r3, r3
    5bba:	f003 0307 	and.w	r3, r3, #7
    5bbe:	b2da      	uxtb	r2, r3
    5bc0:	4b08      	ldr	r3, [pc, #32]	; (5be4 <getSpllConfig+0xac>)
    5bc2:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    5bc4:	4b08      	ldr	r3, [pc, #32]	; (5be8 <getSpllConfig+0xb0>)
    5bc6:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    5bca:	0c1b      	lsrs	r3, r3, #16
    5bcc:	b2db      	uxtb	r3, r3
    5bce:	f003 031f 	and.w	r3, r3, #31
    5bd2:	b2da      	uxtb	r2, r3
    5bd4:	4b03      	ldr	r3, [pc, #12]	; (5be4 <getSpllConfig+0xac>)
    5bd6:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    5bd8:	9b00      	ldr	r3, [sp, #0]
}
    5bda:	4618      	mov	r0, r3
    5bdc:	b002      	add	sp, #8
    5bde:	4770      	bx	lr
    5be0:	1fff8bdc 	.word	0x1fff8bdc
    5be4:	1fff8c68 	.word	0x1fff8c68
    5be8:	40064000 	.word	0x40064000

00005bec <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    5bec:	b086      	sub	sp, #24
    5bee:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    5bf0:	2300      	movs	r3, #0
    5bf2:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    5bf4:	9b01      	ldr	r3, [sp, #4]
    5bf6:	2b1b      	cmp	r3, #27
    5bf8:	d00f      	beq.n	5c1a <getSelectorConfig+0x2e>
    5bfa:	9b01      	ldr	r3, [sp, #4]
    5bfc:	2b1b      	cmp	r3, #27
    5bfe:	d80f      	bhi.n	5c20 <getSelectorConfig+0x34>
    5c00:	9b01      	ldr	r3, [sp, #4]
    5c02:	2b19      	cmp	r3, #25
    5c04:	d003      	beq.n	5c0e <getSelectorConfig+0x22>
    5c06:	9b01      	ldr	r3, [sp, #4]
    5c08:	2b1a      	cmp	r3, #26
    5c0a:	d003      	beq.n	5c14 <getSelectorConfig+0x28>
    5c0c:	e008      	b.n	5c20 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    5c0e:	2300      	movs	r3, #0
    5c10:	9304      	str	r3, [sp, #16]
            break;
    5c12:	e008      	b.n	5c26 <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    5c14:	2301      	movs	r3, #1
    5c16:	9304      	str	r3, [sp, #16]
            break;
    5c18:	e005      	b.n	5c26 <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    5c1a:	2302      	movs	r3, #2
    5c1c:	9304      	str	r3, [sp, #16]
            break;
    5c1e:	e002      	b.n	5c26 <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    5c20:	2300      	movs	r3, #0
    5c22:	9304      	str	r3, [sp, #16]
            break;
    5c24:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5c26:	4b36      	ldr	r3, [pc, #216]	; (5d00 <getSelectorConfig+0x114>)
    5c28:	681b      	ldr	r3, [r3, #0]
    5c2a:	2b00      	cmp	r3, #0
    5c2c:	d01d      	beq.n	5c6a <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    5c2e:	2300      	movs	r3, #0
    5c30:	9303      	str	r3, [sp, #12]
    5c32:	e013      	b.n	5c5c <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    5c34:	4b32      	ldr	r3, [pc, #200]	; (5d00 <getSelectorConfig+0x114>)
    5c36:	681b      	ldr	r3, [r3, #0]
    5c38:	9a03      	ldr	r2, [sp, #12]
    5c3a:	320d      	adds	r2, #13
    5c3c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    5c40:	9a01      	ldr	r2, [sp, #4]
    5c42:	429a      	cmp	r2, r3
    5c44:	d107      	bne.n	5c56 <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    5c46:	4b2e      	ldr	r3, [pc, #184]	; (5d00 <getSelectorConfig+0x114>)
    5c48:	681a      	ldr	r2, [r3, #0]
    5c4a:	9b03      	ldr	r3, [sp, #12]
    5c4c:	330d      	adds	r3, #13
    5c4e:	00db      	lsls	r3, r3, #3
    5c50:	4413      	add	r3, r2
    5c52:	9305      	str	r3, [sp, #20]
                break;
    5c54:	e009      	b.n	5c6a <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    5c56:	9b03      	ldr	r3, [sp, #12]
    5c58:	3301      	adds	r3, #1
    5c5a:	9303      	str	r3, [sp, #12]
    5c5c:	4b28      	ldr	r3, [pc, #160]	; (5d00 <getSelectorConfig+0x114>)
    5c5e:	681b      	ldr	r3, [r3, #0]
    5c60:	7adb      	ldrb	r3, [r3, #11]
    5c62:	461a      	mov	r2, r3
    5c64:	9b03      	ldr	r3, [sp, #12]
    5c66:	4293      	cmp	r3, r2
    5c68:	d3e4      	bcc.n	5c34 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5c6a:	9b05      	ldr	r3, [sp, #20]
    5c6c:	2b00      	cmp	r3, #0
    5c6e:	d140      	bne.n	5cf2 <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    5c70:	9b04      	ldr	r3, [sp, #16]
    5c72:	00db      	lsls	r3, r3, #3
    5c74:	4a23      	ldr	r2, [pc, #140]	; (5d04 <getSelectorConfig+0x118>)
    5c76:	4413      	add	r3, r2
    5c78:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    5c7a:	4922      	ldr	r1, [pc, #136]	; (5d04 <getSelectorConfig+0x118>)
    5c7c:	9b04      	ldr	r3, [sp, #16]
    5c7e:	9a01      	ldr	r2, [sp, #4]
    5c80:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    5c84:	9b01      	ldr	r3, [sp, #4]
    5c86:	2b1b      	cmp	r3, #27
    5c88:	d025      	beq.n	5cd6 <getSelectorConfig+0xea>
    5c8a:	9b01      	ldr	r3, [sp, #4]
    5c8c:	2b1b      	cmp	r3, #27
    5c8e:	d832      	bhi.n	5cf6 <getSelectorConfig+0x10a>
    5c90:	9b01      	ldr	r3, [sp, #4]
    5c92:	2b19      	cmp	r3, #25
    5c94:	d003      	beq.n	5c9e <getSelectorConfig+0xb2>
    5c96:	9b01      	ldr	r3, [sp, #4]
    5c98:	2b1a      	cmp	r3, #26
    5c9a:	d00e      	beq.n	5cba <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5c9c:	e02b      	b.n	5cf6 <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    5c9e:	4b1a      	ldr	r3, [pc, #104]	; (5d08 <getSelectorConfig+0x11c>)
    5ca0:	695b      	ldr	r3, [r3, #20]
    5ca2:	0e1b      	lsrs	r3, r3, #24
    5ca4:	f003 030f 	and.w	r3, r3, #15
    5ca8:	4a18      	ldr	r2, [pc, #96]	; (5d0c <getSelectorConfig+0x120>)
    5caa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5cae:	4915      	ldr	r1, [pc, #84]	; (5d04 <getSelectorConfig+0x118>)
    5cb0:	9b04      	ldr	r3, [sp, #16]
    5cb2:	00db      	lsls	r3, r3, #3
    5cb4:	440b      	add	r3, r1
    5cb6:	605a      	str	r2, [r3, #4]
                break;
    5cb8:	e01e      	b.n	5cf8 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    5cba:	4b13      	ldr	r3, [pc, #76]	; (5d08 <getSelectorConfig+0x11c>)
    5cbc:	699b      	ldr	r3, [r3, #24]
    5cbe:	0e1b      	lsrs	r3, r3, #24
    5cc0:	f003 030f 	and.w	r3, r3, #15
    5cc4:	4a11      	ldr	r2, [pc, #68]	; (5d0c <getSelectorConfig+0x120>)
    5cc6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5cca:	490e      	ldr	r1, [pc, #56]	; (5d04 <getSelectorConfig+0x118>)
    5ccc:	9b04      	ldr	r3, [sp, #16]
    5cce:	00db      	lsls	r3, r3, #3
    5cd0:	440b      	add	r3, r1
    5cd2:	605a      	str	r2, [r3, #4]
                break;
    5cd4:	e010      	b.n	5cf8 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    5cd6:	4b0c      	ldr	r3, [pc, #48]	; (5d08 <getSelectorConfig+0x11c>)
    5cd8:	69db      	ldr	r3, [r3, #28]
    5cda:	0e1b      	lsrs	r3, r3, #24
    5cdc:	f003 030f 	and.w	r3, r3, #15
    5ce0:	4a0a      	ldr	r2, [pc, #40]	; (5d0c <getSelectorConfig+0x120>)
    5ce2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5ce6:	4907      	ldr	r1, [pc, #28]	; (5d04 <getSelectorConfig+0x118>)
    5ce8:	9b04      	ldr	r3, [sp, #16]
    5cea:	00db      	lsls	r3, r3, #3
    5cec:	440b      	add	r3, r1
    5cee:	605a      	str	r2, [r3, #4]
                break;
    5cf0:	e002      	b.n	5cf8 <getSelectorConfig+0x10c>
        }
    }
    5cf2:	bf00      	nop
    5cf4:	e000      	b.n	5cf8 <getSelectorConfig+0x10c>
                break;
    5cf6:	bf00      	nop

    return ReturnValue;
    5cf8:	9b05      	ldr	r3, [sp, #20]
}
    5cfa:	4618      	mov	r0, r3
    5cfc:	b006      	add	sp, #24
    5cfe:	4770      	bx	lr
    5d00:	1fff8bdc 	.word	0x1fff8bdc
    5d04:	1fff8c90 	.word	0x1fff8c90
    5d08:	40064000 	.word	0x40064000
    5d0c:	00019fcc 	.word	0x00019fcc

00005d10 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    5d10:	b086      	sub	sp, #24
    5d12:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5d14:	2300      	movs	r3, #0
    5d16:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5d18:	2300      	movs	r3, #0
    5d1a:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5d1c:	9b01      	ldr	r3, [sp, #4]
    5d1e:	2b1f      	cmp	r3, #31
    5d20:	d00f      	beq.n	5d42 <getCoreDividerConfig+0x32>
    5d22:	9b01      	ldr	r3, [sp, #4]
    5d24:	2b1f      	cmp	r3, #31
    5d26:	d80f      	bhi.n	5d48 <getCoreDividerConfig+0x38>
    5d28:	9b01      	ldr	r3, [sp, #4]
    5d2a:	2b1d      	cmp	r3, #29
    5d2c:	d003      	beq.n	5d36 <getCoreDividerConfig+0x26>
    5d2e:	9b01      	ldr	r3, [sp, #4]
    5d30:	2b1e      	cmp	r3, #30
    5d32:	d003      	beq.n	5d3c <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5d34:	e008      	b.n	5d48 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    5d36:	2300      	movs	r3, #0
    5d38:	9304      	str	r3, [sp, #16]
            break;
    5d3a:	e006      	b.n	5d4a <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5d3c:	2301      	movs	r3, #1
    5d3e:	9304      	str	r3, [sp, #16]
            break;
    5d40:	e003      	b.n	5d4a <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    5d42:	2302      	movs	r3, #2
    5d44:	9304      	str	r3, [sp, #16]
            break;
    5d46:	e000      	b.n	5d4a <getCoreDividerConfig+0x3a>
                break;
    5d48:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5d4a:	4b41      	ldr	r3, [pc, #260]	; (5e50 <getCoreDividerConfig+0x140>)
    5d4c:	681b      	ldr	r3, [r3, #0]
    5d4e:	2b00      	cmp	r3, #0
    5d50:	d026      	beq.n	5da0 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5d52:	2300      	movs	r3, #0
    5d54:	9303      	str	r3, [sp, #12]
    5d56:	e01c      	b.n	5d92 <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5d58:	4b3d      	ldr	r3, [pc, #244]	; (5e50 <getCoreDividerConfig+0x140>)
    5d5a:	6819      	ldr	r1, [r3, #0]
    5d5c:	9a03      	ldr	r2, [sp, #12]
    5d5e:	4613      	mov	r3, r2
    5d60:	005b      	lsls	r3, r3, #1
    5d62:	4413      	add	r3, r2
    5d64:	009b      	lsls	r3, r3, #2
    5d66:	440b      	add	r3, r1
    5d68:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5d6c:	681b      	ldr	r3, [r3, #0]
    5d6e:	9a01      	ldr	r2, [sp, #4]
    5d70:	429a      	cmp	r2, r3
    5d72:	d10b      	bne.n	5d8c <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5d74:	4b36      	ldr	r3, [pc, #216]	; (5e50 <getCoreDividerConfig+0x140>)
    5d76:	6819      	ldr	r1, [r3, #0]
    5d78:	9a03      	ldr	r2, [sp, #12]
    5d7a:	4613      	mov	r3, r2
    5d7c:	005b      	lsls	r3, r3, #1
    5d7e:	4413      	add	r3, r2
    5d80:	009b      	lsls	r3, r3, #2
    5d82:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5d86:	440b      	add	r3, r1
    5d88:	9305      	str	r3, [sp, #20]
                break;
    5d8a:	e009      	b.n	5da0 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5d8c:	9b03      	ldr	r3, [sp, #12]
    5d8e:	3301      	adds	r3, #1
    5d90:	9303      	str	r3, [sp, #12]
    5d92:	4b2f      	ldr	r3, [pc, #188]	; (5e50 <getCoreDividerConfig+0x140>)
    5d94:	681b      	ldr	r3, [r3, #0]
    5d96:	7b1b      	ldrb	r3, [r3, #12]
    5d98:	461a      	mov	r2, r3
    5d9a:	9b03      	ldr	r3, [sp, #12]
    5d9c:	4293      	cmp	r3, r2
    5d9e:	d3db      	bcc.n	5d58 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5da0:	9b05      	ldr	r3, [sp, #20]
    5da2:	2b00      	cmp	r3, #0
    5da4:	d14d      	bne.n	5e42 <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    5da6:	9a04      	ldr	r2, [sp, #16]
    5da8:	4613      	mov	r3, r2
    5daa:	005b      	lsls	r3, r3, #1
    5dac:	4413      	add	r3, r2
    5dae:	009b      	lsls	r3, r3, #2
    5db0:	4a28      	ldr	r2, [pc, #160]	; (5e54 <getCoreDividerConfig+0x144>)
    5db2:	4413      	add	r3, r2
    5db4:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    5db6:	4927      	ldr	r1, [pc, #156]	; (5e54 <getCoreDividerConfig+0x144>)
    5db8:	9a04      	ldr	r2, [sp, #16]
    5dba:	4613      	mov	r3, r2
    5dbc:	005b      	lsls	r3, r3, #1
    5dbe:	4413      	add	r3, r2
    5dc0:	009b      	lsls	r3, r3, #2
    5dc2:	440b      	add	r3, r1
    5dc4:	9a01      	ldr	r2, [sp, #4]
    5dc6:	601a      	str	r2, [r3, #0]
        switch(Name)
    5dc8:	9b01      	ldr	r3, [sp, #4]
    5dca:	2b1f      	cmp	r3, #31
    5dcc:	d029      	beq.n	5e22 <getCoreDividerConfig+0x112>
    5dce:	9b01      	ldr	r3, [sp, #4]
    5dd0:	2b1f      	cmp	r3, #31
    5dd2:	d838      	bhi.n	5e46 <getCoreDividerConfig+0x136>
    5dd4:	9b01      	ldr	r3, [sp, #4]
    5dd6:	2b1d      	cmp	r3, #29
    5dd8:	d003      	beq.n	5de2 <getCoreDividerConfig+0xd2>
    5dda:	9b01      	ldr	r3, [sp, #4]
    5ddc:	2b1e      	cmp	r3, #30
    5dde:	d010      	beq.n	5e02 <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5de0:	e031      	b.n	5e46 <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    5de2:	4b1d      	ldr	r3, [pc, #116]	; (5e58 <getCoreDividerConfig+0x148>)
    5de4:	695b      	ldr	r3, [r3, #20]
    5de6:	0c1b      	lsrs	r3, r3, #16
    5de8:	f003 030f 	and.w	r3, r3, #15
    5dec:	1c59      	adds	r1, r3, #1
    5dee:	4819      	ldr	r0, [pc, #100]	; (5e54 <getCoreDividerConfig+0x144>)
    5df0:	9a04      	ldr	r2, [sp, #16]
    5df2:	4613      	mov	r3, r2
    5df4:	005b      	lsls	r3, r3, #1
    5df6:	4413      	add	r3, r2
    5df8:	009b      	lsls	r3, r3, #2
    5dfa:	4403      	add	r3, r0
    5dfc:	3304      	adds	r3, #4
    5dfe:	6019      	str	r1, [r3, #0]
                break;
    5e00:	e022      	b.n	5e48 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    5e02:	4b15      	ldr	r3, [pc, #84]	; (5e58 <getCoreDividerConfig+0x148>)
    5e04:	699b      	ldr	r3, [r3, #24]
    5e06:	0c1b      	lsrs	r3, r3, #16
    5e08:	f003 030f 	and.w	r3, r3, #15
    5e0c:	1c59      	adds	r1, r3, #1
    5e0e:	4811      	ldr	r0, [pc, #68]	; (5e54 <getCoreDividerConfig+0x144>)
    5e10:	9a04      	ldr	r2, [sp, #16]
    5e12:	4613      	mov	r3, r2
    5e14:	005b      	lsls	r3, r3, #1
    5e16:	4413      	add	r3, r2
    5e18:	009b      	lsls	r3, r3, #2
    5e1a:	4403      	add	r3, r0
    5e1c:	3304      	adds	r3, #4
    5e1e:	6019      	str	r1, [r3, #0]
                break;
    5e20:	e012      	b.n	5e48 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    5e22:	4b0d      	ldr	r3, [pc, #52]	; (5e58 <getCoreDividerConfig+0x148>)
    5e24:	69db      	ldr	r3, [r3, #28]
    5e26:	0c1b      	lsrs	r3, r3, #16
    5e28:	f003 030f 	and.w	r3, r3, #15
    5e2c:	1c59      	adds	r1, r3, #1
    5e2e:	4809      	ldr	r0, [pc, #36]	; (5e54 <getCoreDividerConfig+0x144>)
    5e30:	9a04      	ldr	r2, [sp, #16]
    5e32:	4613      	mov	r3, r2
    5e34:	005b      	lsls	r3, r3, #1
    5e36:	4413      	add	r3, r2
    5e38:	009b      	lsls	r3, r3, #2
    5e3a:	4403      	add	r3, r0
    5e3c:	3304      	adds	r3, #4
    5e3e:	6019      	str	r1, [r3, #0]
                break;
    5e40:	e002      	b.n	5e48 <getCoreDividerConfig+0x138>
        }
    }
    5e42:	bf00      	nop
    5e44:	e000      	b.n	5e48 <getCoreDividerConfig+0x138>
                break;
    5e46:	bf00      	nop

    return ReturnValue;
    5e48:	9b05      	ldr	r3, [sp, #20]
}
    5e4a:	4618      	mov	r0, r3
    5e4c:	b006      	add	sp, #24
    5e4e:	4770      	bx	lr
    5e50:	1fff8bdc 	.word	0x1fff8bdc
    5e54:	1fff8ca8 	.word	0x1fff8ca8
    5e58:	40064000 	.word	0x40064000

00005e5c <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    5e5c:	b086      	sub	sp, #24
    5e5e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5e60:	2300      	movs	r3, #0
    5e62:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5e64:	2300      	movs	r3, #0
    5e66:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5e68:	9b01      	ldr	r3, [sp, #4]
    5e6a:	2b23      	cmp	r3, #35	; 0x23
    5e6c:	d00f      	beq.n	5e8e <getBusDividerConfig+0x32>
    5e6e:	9b01      	ldr	r3, [sp, #4]
    5e70:	2b23      	cmp	r3, #35	; 0x23
    5e72:	d80f      	bhi.n	5e94 <getBusDividerConfig+0x38>
    5e74:	9b01      	ldr	r3, [sp, #4]
    5e76:	2b21      	cmp	r3, #33	; 0x21
    5e78:	d003      	beq.n	5e82 <getBusDividerConfig+0x26>
    5e7a:	9b01      	ldr	r3, [sp, #4]
    5e7c:	2b22      	cmp	r3, #34	; 0x22
    5e7e:	d003      	beq.n	5e88 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5e80:	e008      	b.n	5e94 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    5e82:	2300      	movs	r3, #0
    5e84:	9304      	str	r3, [sp, #16]
            break;
    5e86:	e006      	b.n	5e96 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5e88:	2301      	movs	r3, #1
    5e8a:	9304      	str	r3, [sp, #16]
            break;
    5e8c:	e003      	b.n	5e96 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    5e8e:	2302      	movs	r3, #2
    5e90:	9304      	str	r3, [sp, #16]
            break;
    5e92:	e000      	b.n	5e96 <getBusDividerConfig+0x3a>
                break;
    5e94:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5e96:	4b41      	ldr	r3, [pc, #260]	; (5f9c <getBusDividerConfig+0x140>)
    5e98:	681b      	ldr	r3, [r3, #0]
    5e9a:	2b00      	cmp	r3, #0
    5e9c:	d026      	beq.n	5eec <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5e9e:	2300      	movs	r3, #0
    5ea0:	9303      	str	r3, [sp, #12]
    5ea2:	e01c      	b.n	5ede <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5ea4:	4b3d      	ldr	r3, [pc, #244]	; (5f9c <getBusDividerConfig+0x140>)
    5ea6:	6819      	ldr	r1, [r3, #0]
    5ea8:	9a03      	ldr	r2, [sp, #12]
    5eaa:	4613      	mov	r3, r2
    5eac:	005b      	lsls	r3, r3, #1
    5eae:	4413      	add	r3, r2
    5eb0:	009b      	lsls	r3, r3, #2
    5eb2:	440b      	add	r3, r1
    5eb4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5eb8:	681b      	ldr	r3, [r3, #0]
    5eba:	9a01      	ldr	r2, [sp, #4]
    5ebc:	429a      	cmp	r2, r3
    5ebe:	d10b      	bne.n	5ed8 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5ec0:	4b36      	ldr	r3, [pc, #216]	; (5f9c <getBusDividerConfig+0x140>)
    5ec2:	6819      	ldr	r1, [r3, #0]
    5ec4:	9a03      	ldr	r2, [sp, #12]
    5ec6:	4613      	mov	r3, r2
    5ec8:	005b      	lsls	r3, r3, #1
    5eca:	4413      	add	r3, r2
    5ecc:	009b      	lsls	r3, r3, #2
    5ece:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5ed2:	440b      	add	r3, r1
    5ed4:	9305      	str	r3, [sp, #20]
                break;
    5ed6:	e009      	b.n	5eec <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5ed8:	9b03      	ldr	r3, [sp, #12]
    5eda:	3301      	adds	r3, #1
    5edc:	9303      	str	r3, [sp, #12]
    5ede:	4b2f      	ldr	r3, [pc, #188]	; (5f9c <getBusDividerConfig+0x140>)
    5ee0:	681b      	ldr	r3, [r3, #0]
    5ee2:	7b1b      	ldrb	r3, [r3, #12]
    5ee4:	461a      	mov	r2, r3
    5ee6:	9b03      	ldr	r3, [sp, #12]
    5ee8:	4293      	cmp	r3, r2
    5eea:	d3db      	bcc.n	5ea4 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5eec:	9b05      	ldr	r3, [sp, #20]
    5eee:	2b00      	cmp	r3, #0
    5ef0:	d14d      	bne.n	5f8e <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    5ef2:	9a04      	ldr	r2, [sp, #16]
    5ef4:	4613      	mov	r3, r2
    5ef6:	005b      	lsls	r3, r3, #1
    5ef8:	4413      	add	r3, r2
    5efa:	009b      	lsls	r3, r3, #2
    5efc:	4a28      	ldr	r2, [pc, #160]	; (5fa0 <getBusDividerConfig+0x144>)
    5efe:	4413      	add	r3, r2
    5f00:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    5f02:	4927      	ldr	r1, [pc, #156]	; (5fa0 <getBusDividerConfig+0x144>)
    5f04:	9a04      	ldr	r2, [sp, #16]
    5f06:	4613      	mov	r3, r2
    5f08:	005b      	lsls	r3, r3, #1
    5f0a:	4413      	add	r3, r2
    5f0c:	009b      	lsls	r3, r3, #2
    5f0e:	440b      	add	r3, r1
    5f10:	9a01      	ldr	r2, [sp, #4]
    5f12:	601a      	str	r2, [r3, #0]
        switch(Name)
    5f14:	9b01      	ldr	r3, [sp, #4]
    5f16:	2b23      	cmp	r3, #35	; 0x23
    5f18:	d029      	beq.n	5f6e <getBusDividerConfig+0x112>
    5f1a:	9b01      	ldr	r3, [sp, #4]
    5f1c:	2b23      	cmp	r3, #35	; 0x23
    5f1e:	d838      	bhi.n	5f92 <getBusDividerConfig+0x136>
    5f20:	9b01      	ldr	r3, [sp, #4]
    5f22:	2b21      	cmp	r3, #33	; 0x21
    5f24:	d003      	beq.n	5f2e <getBusDividerConfig+0xd2>
    5f26:	9b01      	ldr	r3, [sp, #4]
    5f28:	2b22      	cmp	r3, #34	; 0x22
    5f2a:	d010      	beq.n	5f4e <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5f2c:	e031      	b.n	5f92 <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    5f2e:	4b1d      	ldr	r3, [pc, #116]	; (5fa4 <getBusDividerConfig+0x148>)
    5f30:	695b      	ldr	r3, [r3, #20]
    5f32:	091b      	lsrs	r3, r3, #4
    5f34:	f003 030f 	and.w	r3, r3, #15
    5f38:	1c59      	adds	r1, r3, #1
    5f3a:	4819      	ldr	r0, [pc, #100]	; (5fa0 <getBusDividerConfig+0x144>)
    5f3c:	9a04      	ldr	r2, [sp, #16]
    5f3e:	4613      	mov	r3, r2
    5f40:	005b      	lsls	r3, r3, #1
    5f42:	4413      	add	r3, r2
    5f44:	009b      	lsls	r3, r3, #2
    5f46:	4403      	add	r3, r0
    5f48:	3304      	adds	r3, #4
    5f4a:	6019      	str	r1, [r3, #0]
                break;
    5f4c:	e022      	b.n	5f94 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    5f4e:	4b15      	ldr	r3, [pc, #84]	; (5fa4 <getBusDividerConfig+0x148>)
    5f50:	699b      	ldr	r3, [r3, #24]
    5f52:	091b      	lsrs	r3, r3, #4
    5f54:	f003 030f 	and.w	r3, r3, #15
    5f58:	1c59      	adds	r1, r3, #1
    5f5a:	4811      	ldr	r0, [pc, #68]	; (5fa0 <getBusDividerConfig+0x144>)
    5f5c:	9a04      	ldr	r2, [sp, #16]
    5f5e:	4613      	mov	r3, r2
    5f60:	005b      	lsls	r3, r3, #1
    5f62:	4413      	add	r3, r2
    5f64:	009b      	lsls	r3, r3, #2
    5f66:	4403      	add	r3, r0
    5f68:	3304      	adds	r3, #4
    5f6a:	6019      	str	r1, [r3, #0]
                break;
    5f6c:	e012      	b.n	5f94 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    5f6e:	4b0d      	ldr	r3, [pc, #52]	; (5fa4 <getBusDividerConfig+0x148>)
    5f70:	69db      	ldr	r3, [r3, #28]
    5f72:	091b      	lsrs	r3, r3, #4
    5f74:	f003 030f 	and.w	r3, r3, #15
    5f78:	1c59      	adds	r1, r3, #1
    5f7a:	4809      	ldr	r0, [pc, #36]	; (5fa0 <getBusDividerConfig+0x144>)
    5f7c:	9a04      	ldr	r2, [sp, #16]
    5f7e:	4613      	mov	r3, r2
    5f80:	005b      	lsls	r3, r3, #1
    5f82:	4413      	add	r3, r2
    5f84:	009b      	lsls	r3, r3, #2
    5f86:	4403      	add	r3, r0
    5f88:	3304      	adds	r3, #4
    5f8a:	6019      	str	r1, [r3, #0]
                break;
    5f8c:	e002      	b.n	5f94 <getBusDividerConfig+0x138>
        }
    }
    5f8e:	bf00      	nop
    5f90:	e000      	b.n	5f94 <getBusDividerConfig+0x138>
                break;
    5f92:	bf00      	nop

    return ReturnValue;
    5f94:	9b05      	ldr	r3, [sp, #20]
}
    5f96:	4618      	mov	r0, r3
    5f98:	b006      	add	sp, #24
    5f9a:	4770      	bx	lr
    5f9c:	1fff8bdc 	.word	0x1fff8bdc
    5fa0:	1fff8ccc 	.word	0x1fff8ccc
    5fa4:	40064000 	.word	0x40064000

00005fa8 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    5fa8:	b086      	sub	sp, #24
    5faa:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5fac:	2300      	movs	r3, #0
    5fae:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5fb0:	2300      	movs	r3, #0
    5fb2:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5fb4:	9b01      	ldr	r3, [sp, #4]
    5fb6:	2b27      	cmp	r3, #39	; 0x27
    5fb8:	d00f      	beq.n	5fda <getSlowDividerConfig+0x32>
    5fba:	9b01      	ldr	r3, [sp, #4]
    5fbc:	2b27      	cmp	r3, #39	; 0x27
    5fbe:	d80f      	bhi.n	5fe0 <getSlowDividerConfig+0x38>
    5fc0:	9b01      	ldr	r3, [sp, #4]
    5fc2:	2b25      	cmp	r3, #37	; 0x25
    5fc4:	d003      	beq.n	5fce <getSlowDividerConfig+0x26>
    5fc6:	9b01      	ldr	r3, [sp, #4]
    5fc8:	2b26      	cmp	r3, #38	; 0x26
    5fca:	d003      	beq.n	5fd4 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5fcc:	e008      	b.n	5fe0 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    5fce:	2300      	movs	r3, #0
    5fd0:	9304      	str	r3, [sp, #16]
            break;
    5fd2:	e006      	b.n	5fe2 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5fd4:	2301      	movs	r3, #1
    5fd6:	9304      	str	r3, [sp, #16]
            break;
    5fd8:	e003      	b.n	5fe2 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    5fda:	2302      	movs	r3, #2
    5fdc:	9304      	str	r3, [sp, #16]
            break;
    5fde:	e000      	b.n	5fe2 <getSlowDividerConfig+0x3a>
                break;
    5fe0:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5fe2:	4b40      	ldr	r3, [pc, #256]	; (60e4 <getSlowDividerConfig+0x13c>)
    5fe4:	681b      	ldr	r3, [r3, #0]
    5fe6:	2b00      	cmp	r3, #0
    5fe8:	d026      	beq.n	6038 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5fea:	2300      	movs	r3, #0
    5fec:	9303      	str	r3, [sp, #12]
    5fee:	e01c      	b.n	602a <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5ff0:	4b3c      	ldr	r3, [pc, #240]	; (60e4 <getSlowDividerConfig+0x13c>)
    5ff2:	6819      	ldr	r1, [r3, #0]
    5ff4:	9a03      	ldr	r2, [sp, #12]
    5ff6:	4613      	mov	r3, r2
    5ff8:	005b      	lsls	r3, r3, #1
    5ffa:	4413      	add	r3, r2
    5ffc:	009b      	lsls	r3, r3, #2
    5ffe:	440b      	add	r3, r1
    6000:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    6004:	681b      	ldr	r3, [r3, #0]
    6006:	9a01      	ldr	r2, [sp, #4]
    6008:	429a      	cmp	r2, r3
    600a:	d10b      	bne.n	6024 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    600c:	4b35      	ldr	r3, [pc, #212]	; (60e4 <getSlowDividerConfig+0x13c>)
    600e:	6819      	ldr	r1, [r3, #0]
    6010:	9a03      	ldr	r2, [sp, #12]
    6012:	4613      	mov	r3, r2
    6014:	005b      	lsls	r3, r3, #1
    6016:	4413      	add	r3, r2
    6018:	009b      	lsls	r3, r3, #2
    601a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    601e:	440b      	add	r3, r1
    6020:	9305      	str	r3, [sp, #20]
                break;
    6022:	e009      	b.n	6038 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    6024:	9b03      	ldr	r3, [sp, #12]
    6026:	3301      	adds	r3, #1
    6028:	9303      	str	r3, [sp, #12]
    602a:	4b2e      	ldr	r3, [pc, #184]	; (60e4 <getSlowDividerConfig+0x13c>)
    602c:	681b      	ldr	r3, [r3, #0]
    602e:	7b1b      	ldrb	r3, [r3, #12]
    6030:	461a      	mov	r2, r3
    6032:	9b03      	ldr	r3, [sp, #12]
    6034:	4293      	cmp	r3, r2
    6036:	d3db      	bcc.n	5ff0 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    6038:	9b05      	ldr	r3, [sp, #20]
    603a:	2b00      	cmp	r3, #0
    603c:	d14a      	bne.n	60d4 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    603e:	9a04      	ldr	r2, [sp, #16]
    6040:	4613      	mov	r3, r2
    6042:	005b      	lsls	r3, r3, #1
    6044:	4413      	add	r3, r2
    6046:	009b      	lsls	r3, r3, #2
    6048:	4a27      	ldr	r2, [pc, #156]	; (60e8 <getSlowDividerConfig+0x140>)
    604a:	4413      	add	r3, r2
    604c:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    604e:	4926      	ldr	r1, [pc, #152]	; (60e8 <getSlowDividerConfig+0x140>)
    6050:	9a04      	ldr	r2, [sp, #16]
    6052:	4613      	mov	r3, r2
    6054:	005b      	lsls	r3, r3, #1
    6056:	4413      	add	r3, r2
    6058:	009b      	lsls	r3, r3, #2
    605a:	440b      	add	r3, r1
    605c:	9a01      	ldr	r2, [sp, #4]
    605e:	601a      	str	r2, [r3, #0]
        switch(Name)
    6060:	9b01      	ldr	r3, [sp, #4]
    6062:	2b27      	cmp	r3, #39	; 0x27
    6064:	d027      	beq.n	60b6 <getSlowDividerConfig+0x10e>
    6066:	9b01      	ldr	r3, [sp, #4]
    6068:	2b27      	cmp	r3, #39	; 0x27
    606a:	d835      	bhi.n	60d8 <getSlowDividerConfig+0x130>
    606c:	9b01      	ldr	r3, [sp, #4]
    606e:	2b25      	cmp	r3, #37	; 0x25
    6070:	d003      	beq.n	607a <getSlowDividerConfig+0xd2>
    6072:	9b01      	ldr	r3, [sp, #4]
    6074:	2b26      	cmp	r3, #38	; 0x26
    6076:	d00f      	beq.n	6098 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    6078:	e02e      	b.n	60d8 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    607a:	4b1c      	ldr	r3, [pc, #112]	; (60ec <getSlowDividerConfig+0x144>)
    607c:	695b      	ldr	r3, [r3, #20]
    607e:	f003 030f 	and.w	r3, r3, #15
    6082:	1c59      	adds	r1, r3, #1
    6084:	4818      	ldr	r0, [pc, #96]	; (60e8 <getSlowDividerConfig+0x140>)
    6086:	9a04      	ldr	r2, [sp, #16]
    6088:	4613      	mov	r3, r2
    608a:	005b      	lsls	r3, r3, #1
    608c:	4413      	add	r3, r2
    608e:	009b      	lsls	r3, r3, #2
    6090:	4403      	add	r3, r0
    6092:	3304      	adds	r3, #4
    6094:	6019      	str	r1, [r3, #0]
                break;
    6096:	e020      	b.n	60da <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    6098:	4b14      	ldr	r3, [pc, #80]	; (60ec <getSlowDividerConfig+0x144>)
    609a:	699b      	ldr	r3, [r3, #24]
    609c:	f003 030f 	and.w	r3, r3, #15
    60a0:	1c59      	adds	r1, r3, #1
    60a2:	4811      	ldr	r0, [pc, #68]	; (60e8 <getSlowDividerConfig+0x140>)
    60a4:	9a04      	ldr	r2, [sp, #16]
    60a6:	4613      	mov	r3, r2
    60a8:	005b      	lsls	r3, r3, #1
    60aa:	4413      	add	r3, r2
    60ac:	009b      	lsls	r3, r3, #2
    60ae:	4403      	add	r3, r0
    60b0:	3304      	adds	r3, #4
    60b2:	6019      	str	r1, [r3, #0]
                break;
    60b4:	e011      	b.n	60da <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    60b6:	4b0d      	ldr	r3, [pc, #52]	; (60ec <getSlowDividerConfig+0x144>)
    60b8:	69db      	ldr	r3, [r3, #28]
    60ba:	f003 030f 	and.w	r3, r3, #15
    60be:	1c59      	adds	r1, r3, #1
    60c0:	4809      	ldr	r0, [pc, #36]	; (60e8 <getSlowDividerConfig+0x140>)
    60c2:	9a04      	ldr	r2, [sp, #16]
    60c4:	4613      	mov	r3, r2
    60c6:	005b      	lsls	r3, r3, #1
    60c8:	4413      	add	r3, r2
    60ca:	009b      	lsls	r3, r3, #2
    60cc:	4403      	add	r3, r0
    60ce:	3304      	adds	r3, #4
    60d0:	6019      	str	r1, [r3, #0]
                break;
    60d2:	e002      	b.n	60da <getSlowDividerConfig+0x132>
        }
    }
    60d4:	bf00      	nop
    60d6:	e000      	b.n	60da <getSlowDividerConfig+0x132>
                break;
    60d8:	bf00      	nop

    return ReturnValue;
    60da:	9b05      	ldr	r3, [sp, #20]
}
    60dc:	4618      	mov	r0, r3
    60de:	b006      	add	sp, #24
    60e0:	4770      	bx	lr
    60e2:	bf00      	nop
    60e4:	1fff8bdc 	.word	0x1fff8bdc
    60e8:	1fff8cf0 	.word	0x1fff8cf0
    60ec:	40064000 	.word	0x40064000

000060f0 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    60f0:	b500      	push	{lr}
    60f2:	b083      	sub	sp, #12
    60f4:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    60f6:	4b64      	ldr	r3, [pc, #400]	; (6288 <Clock_Ip_ClockInitializeObjects+0x198>)
    60f8:	781b      	ldrb	r3, [r3, #0]
    60fa:	f083 0301 	eor.w	r3, r3, #1
    60fe:	b2db      	uxtb	r3, r3
    6100:	2b00      	cmp	r3, #0
    6102:	d05b      	beq.n	61bc <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    6104:	4b60      	ldr	r3, [pc, #384]	; (6288 <Clock_Ip_ClockInitializeObjects+0x198>)
    6106:	2201      	movs	r2, #1
    6108:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    610a:	4b60      	ldr	r3, [pc, #384]	; (628c <Clock_Ip_ClockInitializeObjects+0x19c>)
    610c:	785b      	ldrb	r3, [r3, #1]
    610e:	461a      	mov	r2, r3
    6110:	4613      	mov	r3, r2
    6112:	009b      	lsls	r3, r3, #2
    6114:	4413      	add	r3, r2
    6116:	009b      	lsls	r3, r3, #2
    6118:	4a5d      	ldr	r2, [pc, #372]	; (6290 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    611a:	4413      	add	r3, r2
    611c:	4a5d      	ldr	r2, [pc, #372]	; (6294 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    611e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    6120:	4b5d      	ldr	r3, [pc, #372]	; (6298 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    6122:	785b      	ldrb	r3, [r3, #1]
    6124:	461a      	mov	r2, r3
    6126:	4613      	mov	r3, r2
    6128:	009b      	lsls	r3, r3, #2
    612a:	4413      	add	r3, r2
    612c:	009b      	lsls	r3, r3, #2
    612e:	4a5b      	ldr	r2, [pc, #364]	; (629c <Clock_Ip_ClockInitializeObjects+0x1ac>)
    6130:	4413      	add	r3, r2
    6132:	4a5b      	ldr	r2, [pc, #364]	; (62a0 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    6134:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    6136:	4b5b      	ldr	r3, [pc, #364]	; (62a4 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    6138:	791b      	ldrb	r3, [r3, #4]
    613a:	461a      	mov	r2, r3
    613c:	4613      	mov	r3, r2
    613e:	005b      	lsls	r3, r3, #1
    6140:	4413      	add	r3, r2
    6142:	009b      	lsls	r3, r3, #2
    6144:	4a58      	ldr	r2, [pc, #352]	; (62a8 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    6146:	4413      	add	r3, r2
    6148:	4a58      	ldr	r2, [pc, #352]	; (62ac <Clock_Ip_ClockInitializeObjects+0x1bc>)
    614a:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    614c:	4b58      	ldr	r3, [pc, #352]	; (62b0 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    614e:	795b      	ldrb	r3, [r3, #5]
    6150:	00db      	lsls	r3, r3, #3
    6152:	4a58      	ldr	r2, [pc, #352]	; (62b4 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    6154:	4413      	add	r3, r2
    6156:	4a58      	ldr	r2, [pc, #352]	; (62b8 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    6158:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    615a:	4b55      	ldr	r3, [pc, #340]	; (62b0 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    615c:	79db      	ldrb	r3, [r3, #7]
    615e:	00db      	lsls	r3, r3, #3
    6160:	4a54      	ldr	r2, [pc, #336]	; (62b4 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    6162:	4413      	add	r3, r2
    6164:	4a55      	ldr	r2, [pc, #340]	; (62bc <Clock_Ip_ClockInitializeObjects+0x1cc>)
    6166:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    6168:	4b55      	ldr	r3, [pc, #340]	; (62c0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    616a:	799b      	ldrb	r3, [r3, #6]
    616c:	009b      	lsls	r3, r3, #2
    616e:	4a55      	ldr	r2, [pc, #340]	; (62c4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    6170:	4413      	add	r3, r2
    6172:	4a55      	ldr	r2, [pc, #340]	; (62c8 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    6174:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    6176:	4b52      	ldr	r3, [pc, #328]	; (62c0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    6178:	7a1b      	ldrb	r3, [r3, #8]
    617a:	009b      	lsls	r3, r3, #2
    617c:	4a51      	ldr	r2, [pc, #324]	; (62c4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    617e:	4413      	add	r3, r2
    6180:	4a52      	ldr	r2, [pc, #328]	; (62cc <Clock_Ip_ClockInitializeObjects+0x1dc>)
    6182:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    6184:	4b4e      	ldr	r3, [pc, #312]	; (62c0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    6186:	7a5b      	ldrb	r3, [r3, #9]
    6188:	009b      	lsls	r3, r3, #2
    618a:	4a4e      	ldr	r2, [pc, #312]	; (62c4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    618c:	4413      	add	r3, r2
    618e:	4a50      	ldr	r2, [pc, #320]	; (62d0 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    6190:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    6192:	4b4b      	ldr	r3, [pc, #300]	; (62c0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    6194:	7adb      	ldrb	r3, [r3, #11]
    6196:	009b      	lsls	r3, r3, #2
    6198:	4a4a      	ldr	r2, [pc, #296]	; (62c4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    619a:	4413      	add	r3, r2
    619c:	4a4d      	ldr	r2, [pc, #308]	; (62d4 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    619e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    61a0:	4b47      	ldr	r3, [pc, #284]	; (62c0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    61a2:	7b1b      	ldrb	r3, [r3, #12]
    61a4:	009b      	lsls	r3, r3, #2
    61a6:	4a47      	ldr	r2, [pc, #284]	; (62c4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    61a8:	4413      	add	r3, r2
    61aa:	4a4b      	ldr	r2, [pc, #300]	; (62d8 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    61ac:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    61ae:	4b44      	ldr	r3, [pc, #272]	; (62c0 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    61b0:	7b9b      	ldrb	r3, [r3, #14]
    61b2:	009b      	lsls	r3, r3, #2
    61b4:	4a43      	ldr	r2, [pc, #268]	; (62c4 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    61b6:	4413      	add	r3, r2
    61b8:	4a48      	ldr	r2, [pc, #288]	; (62dc <Clock_Ip_ClockInitializeObjects+0x1ec>)
    61ba:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    61bc:	4b48      	ldr	r3, [pc, #288]	; (62e0 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    61be:	781b      	ldrb	r3, [r3, #0]
    61c0:	2b00      	cmp	r3, #0
    61c2:	d002      	beq.n	61ca <Clock_Ip_ClockInitializeObjects+0xda>
    61c4:	9b01      	ldr	r3, [sp, #4]
    61c6:	2b00      	cmp	r3, #0
    61c8:	d003      	beq.n	61d2 <Clock_Ip_ClockInitializeObjects+0xe2>
    61ca:	4b46      	ldr	r3, [pc, #280]	; (62e4 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    61cc:	781b      	ldrb	r3, [r3, #0]
    61ce:	2b00      	cmp	r3, #0
    61d0:	d056      	beq.n	6280 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    61d2:	f7ff fc09 	bl	59e8 <getFircConfig>
    61d6:	4603      	mov	r3, r0
    61d8:	4a43      	ldr	r2, [pc, #268]	; (62e8 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    61da:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    61dc:	f7ff fc60 	bl	5aa0 <getSoscConfig>
    61e0:	4603      	mov	r3, r0
    61e2:	4a42      	ldr	r2, [pc, #264]	; (62ec <Clock_Ip_ClockInitializeObjects+0x1fc>)
    61e4:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    61e6:	f7ff fca7 	bl	5b38 <getSpllConfig>
    61ea:	4603      	mov	r3, r0
    61ec:	4a40      	ldr	r2, [pc, #256]	; (62f0 <Clock_Ip_ClockInitializeObjects+0x200>)
    61ee:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    61f0:	2019      	movs	r0, #25
    61f2:	f7ff fcfb 	bl	5bec <getSelectorConfig>
    61f6:	4603      	mov	r3, r0
    61f8:	4a3e      	ldr	r2, [pc, #248]	; (62f4 <Clock_Ip_ClockInitializeObjects+0x204>)
    61fa:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    61fc:	201a      	movs	r0, #26
    61fe:	f7ff fcf5 	bl	5bec <getSelectorConfig>
    6202:	4603      	mov	r3, r0
    6204:	4a3c      	ldr	r2, [pc, #240]	; (62f8 <Clock_Ip_ClockInitializeObjects+0x208>)
    6206:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    6208:	201b      	movs	r0, #27
    620a:	f7ff fcef 	bl	5bec <getSelectorConfig>
    620e:	4603      	mov	r3, r0
    6210:	4a3a      	ldr	r2, [pc, #232]	; (62fc <Clock_Ip_ClockInitializeObjects+0x20c>)
    6212:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    6214:	201d      	movs	r0, #29
    6216:	f7ff fd7b 	bl	5d10 <getCoreDividerConfig>
    621a:	4603      	mov	r3, r0
    621c:	4a38      	ldr	r2, [pc, #224]	; (6300 <Clock_Ip_ClockInitializeObjects+0x210>)
    621e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    6220:	201e      	movs	r0, #30
    6222:	f7ff fd75 	bl	5d10 <getCoreDividerConfig>
    6226:	4603      	mov	r3, r0
    6228:	4a36      	ldr	r2, [pc, #216]	; (6304 <Clock_Ip_ClockInitializeObjects+0x214>)
    622a:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    622c:	201f      	movs	r0, #31
    622e:	f7ff fd6f 	bl	5d10 <getCoreDividerConfig>
    6232:	4603      	mov	r3, r0
    6234:	4a34      	ldr	r2, [pc, #208]	; (6308 <Clock_Ip_ClockInitializeObjects+0x218>)
    6236:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    6238:	2021      	movs	r0, #33	; 0x21
    623a:	f7ff fe0f 	bl	5e5c <getBusDividerConfig>
    623e:	4603      	mov	r3, r0
    6240:	4a32      	ldr	r2, [pc, #200]	; (630c <Clock_Ip_ClockInitializeObjects+0x21c>)
    6242:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    6244:	2022      	movs	r0, #34	; 0x22
    6246:	f7ff fe09 	bl	5e5c <getBusDividerConfig>
    624a:	4603      	mov	r3, r0
    624c:	4a30      	ldr	r2, [pc, #192]	; (6310 <Clock_Ip_ClockInitializeObjects+0x220>)
    624e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    6250:	2023      	movs	r0, #35	; 0x23
    6252:	f7ff fe03 	bl	5e5c <getBusDividerConfig>
    6256:	4603      	mov	r3, r0
    6258:	4a2e      	ldr	r2, [pc, #184]	; (6314 <Clock_Ip_ClockInitializeObjects+0x224>)
    625a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    625c:	2025      	movs	r0, #37	; 0x25
    625e:	f7ff fea3 	bl	5fa8 <getSlowDividerConfig>
    6262:	4603      	mov	r3, r0
    6264:	4a2c      	ldr	r2, [pc, #176]	; (6318 <Clock_Ip_ClockInitializeObjects+0x228>)
    6266:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    6268:	2026      	movs	r0, #38	; 0x26
    626a:	f7ff fe9d 	bl	5fa8 <getSlowDividerConfig>
    626e:	4603      	mov	r3, r0
    6270:	4a2a      	ldr	r2, [pc, #168]	; (631c <Clock_Ip_ClockInitializeObjects+0x22c>)
    6272:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    6274:	2027      	movs	r0, #39	; 0x27
    6276:	f7ff fe97 	bl	5fa8 <getSlowDividerConfig>
    627a:	4603      	mov	r3, r0
    627c:	4a28      	ldr	r2, [pc, #160]	; (6320 <Clock_Ip_ClockInitializeObjects+0x230>)
    627e:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    6280:	bf00      	nop
    6282:	b003      	add	sp, #12
    6284:	f85d fb04 	ldr.w	pc, [sp], #4
    6288:	1fff8d14 	.word	0x1fff8d14
    628c:	000198fc 	.word	0x000198fc
    6290:	00019f48 	.word	0x00019f48
    6294:	1fff8be0 	.word	0x1fff8be0
    6298:	000198bc 	.word	0x000198bc
    629c:	00019e90 	.word	0x00019e90
    62a0:	1fff8be4 	.word	0x1fff8be4
    62a4:	000198cc 	.word	0x000198cc
    62a8:	00019efc 	.word	0x00019efc
    62ac:	1fff8be8 	.word	0x1fff8be8
    62b0:	0001990c 	.word	0x0001990c
    62b4:	00019f74 	.word	0x00019f74
    62b8:	1fff8bec 	.word	0x1fff8bec
    62bc:	1fff8c28 	.word	0x1fff8c28
    62c0:	0001989c 	.word	0x0001989c
    62c4:	00019e4c 	.word	0x00019e4c
    62c8:	1fff8bf0 	.word	0x1fff8bf0
    62cc:	1fff8c2c 	.word	0x1fff8c2c
    62d0:	1fff8bf4 	.word	0x1fff8bf4
    62d4:	1fff8c30 	.word	0x1fff8c30
    62d8:	1fff8bf8 	.word	0x1fff8bf8
    62dc:	1fff8c34 	.word	0x1fff8c34
    62e0:	1fff8b19 	.word	0x1fff8b19
    62e4:	1fff8b10 	.word	0x1fff8b10
    62e8:	1fff8bfc 	.word	0x1fff8bfc
    62ec:	1fff8c00 	.word	0x1fff8c00
    62f0:	1fff8c04 	.word	0x1fff8c04
    62f4:	1fff8c08 	.word	0x1fff8c08
    62f8:	1fff8c0c 	.word	0x1fff8c0c
    62fc:	1fff8c38 	.word	0x1fff8c38
    6300:	1fff8c10 	.word	0x1fff8c10
    6304:	1fff8c14 	.word	0x1fff8c14
    6308:	1fff8c3c 	.word	0x1fff8c3c
    630c:	1fff8c18 	.word	0x1fff8c18
    6310:	1fff8c1c 	.word	0x1fff8c1c
    6314:	1fff8c40 	.word	0x1fff8c40
    6318:	1fff8c20 	.word	0x1fff8c20
    631c:	1fff8c24 	.word	0x1fff8c24
    6320:	1fff8c44 	.word	0x1fff8c44

00006324 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    6324:	b500      	push	{lr}
    6326:	b083      	sub	sp, #12
    6328:	9001      	str	r0, [sp, #4]
    632a:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    632c:	9b01      	ldr	r3, [sp, #4]
    632e:	2b03      	cmp	r3, #3
    6330:	f000 8090 	beq.w	6454 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    6334:	9b01      	ldr	r3, [sp, #4]
    6336:	2b03      	cmp	r3, #3
    6338:	f200 80d3 	bhi.w	64e2 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    633c:	9b01      	ldr	r3, [sp, #4]
    633e:	2b00      	cmp	r3, #0
    6340:	d040      	beq.n	63c4 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    6342:	9b01      	ldr	r3, [sp, #4]
    6344:	3b01      	subs	r3, #1
    6346:	2b01      	cmp	r3, #1
    6348:	f200 80cb 	bhi.w	64e2 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    634c:	9b00      	ldr	r3, [sp, #0]
    634e:	2b00      	cmp	r3, #0
    6350:	f040 80c9 	bne.w	64e6 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    6354:	4b68      	ldr	r3, [pc, #416]	; (64f8 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    6356:	2200      	movs	r2, #0
    6358:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    635a:	4b68      	ldr	r3, [pc, #416]	; (64fc <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    635c:	681b      	ldr	r3, [r3, #0]
    635e:	685b      	ldr	r3, [r3, #4]
    6360:	4a67      	ldr	r2, [pc, #412]	; (6500 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    6362:	6812      	ldr	r2, [r2, #0]
    6364:	4610      	mov	r0, r2
    6366:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    6368:	4b66      	ldr	r3, [pc, #408]	; (6504 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    636a:	681b      	ldr	r3, [r3, #0]
    636c:	681b      	ldr	r3, [r3, #0]
    636e:	4a66      	ldr	r2, [pc, #408]	; (6508 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    6370:	6812      	ldr	r2, [r2, #0]
    6372:	4610      	mov	r0, r2
    6374:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    6376:	4b65      	ldr	r3, [pc, #404]	; (650c <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    6378:	681b      	ldr	r3, [r3, #0]
    637a:	681b      	ldr	r3, [r3, #0]
    637c:	4a64      	ldr	r2, [pc, #400]	; (6510 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    637e:	6812      	ldr	r2, [r2, #0]
    6380:	4610      	mov	r0, r2
    6382:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    6384:	4b63      	ldr	r3, [pc, #396]	; (6514 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    6386:	681b      	ldr	r3, [r3, #0]
    6388:	681b      	ldr	r3, [r3, #0]
    638a:	4a63      	ldr	r2, [pc, #396]	; (6518 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    638c:	6812      	ldr	r2, [r2, #0]
    638e:	4610      	mov	r0, r2
    6390:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    6392:	4b62      	ldr	r3, [pc, #392]	; (651c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    6394:	681b      	ldr	r3, [r3, #0]
    6396:	691b      	ldr	r3, [r3, #16]
    6398:	4a61      	ldr	r2, [pc, #388]	; (6520 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    639a:	6812      	ldr	r2, [r2, #0]
    639c:	6812      	ldr	r2, [r2, #0]
    639e:	4610      	mov	r0, r2
    63a0:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    63a2:	4b60      	ldr	r3, [pc, #384]	; (6524 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    63a4:	681b      	ldr	r3, [r3, #0]
    63a6:	68db      	ldr	r3, [r3, #12]
    63a8:	4a5f      	ldr	r2, [pc, #380]	; (6528 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    63aa:	6812      	ldr	r2, [r2, #0]
    63ac:	6812      	ldr	r2, [r2, #0]
    63ae:	4610      	mov	r0, r2
    63b0:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    63b2:	4b5e      	ldr	r3, [pc, #376]	; (652c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    63b4:	681b      	ldr	r3, [r3, #0]
    63b6:	689b      	ldr	r3, [r3, #8]
    63b8:	4a5d      	ldr	r2, [pc, #372]	; (6530 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    63ba:	6812      	ldr	r2, [r2, #0]
    63bc:	6812      	ldr	r2, [r2, #0]
    63be:	4610      	mov	r0, r2
    63c0:	4798      	blx	r3
            }
        }
        break;
    63c2:	e090      	b.n	64e6 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    63c4:	9b00      	ldr	r3, [sp, #0]
    63c6:	2b02      	cmp	r3, #2
    63c8:	f040 808f 	bne.w	64ea <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    63cc:	4b4a      	ldr	r3, [pc, #296]	; (64f8 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    63ce:	2201      	movs	r2, #1
    63d0:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    63d2:	4b56      	ldr	r3, [pc, #344]	; (652c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    63d4:	681b      	ldr	r3, [r3, #0]
    63d6:	685b      	ldr	r3, [r3, #4]
    63d8:	4a55      	ldr	r2, [pc, #340]	; (6530 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    63da:	6812      	ldr	r2, [r2, #0]
    63dc:	4610      	mov	r0, r2
    63de:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    63e0:	4b50      	ldr	r3, [pc, #320]	; (6524 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    63e2:	681b      	ldr	r3, [r3, #0]
    63e4:	691b      	ldr	r3, [r3, #16]
    63e6:	4a50      	ldr	r2, [pc, #320]	; (6528 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    63e8:	6812      	ldr	r2, [r2, #0]
    63ea:	4610      	mov	r0, r2
    63ec:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    63ee:	4b4d      	ldr	r3, [pc, #308]	; (6524 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    63f0:	681b      	ldr	r3, [r3, #0]
    63f2:	689b      	ldr	r3, [r3, #8]
    63f4:	4a4c      	ldr	r2, [pc, #304]	; (6528 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    63f6:	6812      	ldr	r2, [r2, #0]
    63f8:	4610      	mov	r0, r2
    63fa:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    63fc:	4b47      	ldr	r3, [pc, #284]	; (651c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    63fe:	681b      	ldr	r3, [r3, #0]
    6400:	68db      	ldr	r3, [r3, #12]
    6402:	4a47      	ldr	r2, [pc, #284]	; (6520 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    6404:	6812      	ldr	r2, [r2, #0]
    6406:	4610      	mov	r0, r2
    6408:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    640a:	4b44      	ldr	r3, [pc, #272]	; (651c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    640c:	681b      	ldr	r3, [r3, #0]
    640e:	689b      	ldr	r3, [r3, #8]
    6410:	4a43      	ldr	r2, [pc, #268]	; (6520 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    6412:	6812      	ldr	r2, [r2, #0]
    6414:	6812      	ldr	r2, [r2, #0]
    6416:	4610      	mov	r0, r2
    6418:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    641a:	4b38      	ldr	r3, [pc, #224]	; (64fc <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    641c:	681b      	ldr	r3, [r3, #0]
    641e:	685b      	ldr	r3, [r3, #4]
    6420:	4a44      	ldr	r2, [pc, #272]	; (6534 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    6422:	6812      	ldr	r2, [r2, #0]
    6424:	4610      	mov	r0, r2
    6426:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    6428:	4b36      	ldr	r3, [pc, #216]	; (6504 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    642a:	681b      	ldr	r3, [r3, #0]
    642c:	681b      	ldr	r3, [r3, #0]
    642e:	4a42      	ldr	r2, [pc, #264]	; (6538 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    6430:	6812      	ldr	r2, [r2, #0]
    6432:	4610      	mov	r0, r2
    6434:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    6436:	4b35      	ldr	r3, [pc, #212]	; (650c <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    6438:	681b      	ldr	r3, [r3, #0]
    643a:	681b      	ldr	r3, [r3, #0]
    643c:	4a3f      	ldr	r2, [pc, #252]	; (653c <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    643e:	6812      	ldr	r2, [r2, #0]
    6440:	4610      	mov	r0, r2
    6442:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    6444:	4b33      	ldr	r3, [pc, #204]	; (6514 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    6446:	681b      	ldr	r3, [r3, #0]
    6448:	681b      	ldr	r3, [r3, #0]
    644a:	4a3d      	ldr	r2, [pc, #244]	; (6540 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    644c:	6812      	ldr	r2, [r2, #0]
    644e:	4610      	mov	r0, r2
    6450:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    6452:	e04a      	b.n	64ea <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    6454:	9b00      	ldr	r3, [sp, #0]
    6456:	2b02      	cmp	r3, #2
    6458:	d149      	bne.n	64ee <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    645a:	4b27      	ldr	r3, [pc, #156]	; (64f8 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    645c:	2201      	movs	r2, #1
    645e:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    6460:	4b32      	ldr	r3, [pc, #200]	; (652c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    6462:	681b      	ldr	r3, [r3, #0]
    6464:	685b      	ldr	r3, [r3, #4]
    6466:	4a32      	ldr	r2, [pc, #200]	; (6530 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    6468:	6812      	ldr	r2, [r2, #0]
    646a:	4610      	mov	r0, r2
    646c:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    646e:	4b2d      	ldr	r3, [pc, #180]	; (6524 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    6470:	681b      	ldr	r3, [r3, #0]
    6472:	691b      	ldr	r3, [r3, #16]
    6474:	4a2c      	ldr	r2, [pc, #176]	; (6528 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    6476:	6812      	ldr	r2, [r2, #0]
    6478:	4610      	mov	r0, r2
    647a:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    647c:	4b29      	ldr	r3, [pc, #164]	; (6524 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    647e:	681b      	ldr	r3, [r3, #0]
    6480:	689b      	ldr	r3, [r3, #8]
    6482:	4a29      	ldr	r2, [pc, #164]	; (6528 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    6484:	6812      	ldr	r2, [r2, #0]
    6486:	4610      	mov	r0, r2
    6488:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    648a:	4b24      	ldr	r3, [pc, #144]	; (651c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    648c:	681b      	ldr	r3, [r3, #0]
    648e:	68db      	ldr	r3, [r3, #12]
    6490:	4a23      	ldr	r2, [pc, #140]	; (6520 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    6492:	6812      	ldr	r2, [r2, #0]
    6494:	4610      	mov	r0, r2
    6496:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    6498:	4b20      	ldr	r3, [pc, #128]	; (651c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    649a:	681b      	ldr	r3, [r3, #0]
    649c:	689b      	ldr	r3, [r3, #8]
    649e:	4a20      	ldr	r2, [pc, #128]	; (6520 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    64a0:	6812      	ldr	r2, [r2, #0]
    64a2:	6812      	ldr	r2, [r2, #0]
    64a4:	4610      	mov	r0, r2
    64a6:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    64a8:	4b26      	ldr	r3, [pc, #152]	; (6544 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    64aa:	681b      	ldr	r3, [r3, #0]
    64ac:	685b      	ldr	r3, [r3, #4]
    64ae:	4a26      	ldr	r2, [pc, #152]	; (6548 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    64b0:	6812      	ldr	r2, [r2, #0]
    64b2:	4610      	mov	r0, r2
    64b4:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    64b6:	4b25      	ldr	r3, [pc, #148]	; (654c <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    64b8:	681b      	ldr	r3, [r3, #0]
    64ba:	681b      	ldr	r3, [r3, #0]
    64bc:	4a24      	ldr	r2, [pc, #144]	; (6550 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    64be:	6812      	ldr	r2, [r2, #0]
    64c0:	4610      	mov	r0, r2
    64c2:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    64c4:	4b23      	ldr	r3, [pc, #140]	; (6554 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    64c6:	681b      	ldr	r3, [r3, #0]
    64c8:	681b      	ldr	r3, [r3, #0]
    64ca:	4a23      	ldr	r2, [pc, #140]	; (6558 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    64cc:	6812      	ldr	r2, [r2, #0]
    64ce:	4610      	mov	r0, r2
    64d0:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    64d2:	4b22      	ldr	r3, [pc, #136]	; (655c <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    64d4:	681b      	ldr	r3, [r3, #0]
    64d6:	681b      	ldr	r3, [r3, #0]
    64d8:	4a21      	ldr	r2, [pc, #132]	; (6560 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    64da:	6812      	ldr	r2, [r2, #0]
    64dc:	4610      	mov	r0, r2
    64de:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    64e0:	e005      	b.n	64ee <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    64e2:	bf00      	nop
    64e4:	e004      	b.n	64f0 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    64e6:	bf00      	nop
    64e8:	e002      	b.n	64f0 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    64ea:	bf00      	nop
    64ec:	e000      	b.n	64f0 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    64ee:	bf00      	nop
    }

}
    64f0:	bf00      	nop
    64f2:	b003      	add	sp, #12
    64f4:	f85d fb04 	ldr.w	pc, [sp], #4
    64f8:	1fff8b19 	.word	0x1fff8b19
    64fc:	1fff8bec 	.word	0x1fff8bec
    6500:	1fff8c0c 	.word	0x1fff8c0c
    6504:	1fff8bf0 	.word	0x1fff8bf0
    6508:	1fff8c14 	.word	0x1fff8c14
    650c:	1fff8bf4 	.word	0x1fff8bf4
    6510:	1fff8c1c 	.word	0x1fff8c1c
    6514:	1fff8bf8 	.word	0x1fff8bf8
    6518:	1fff8c24 	.word	0x1fff8c24
    651c:	1fff8be0 	.word	0x1fff8be0
    6520:	1fff8c04 	.word	0x1fff8c04
    6524:	1fff8be4 	.word	0x1fff8be4
    6528:	1fff8c00 	.word	0x1fff8c00
    652c:	1fff8be8 	.word	0x1fff8be8
    6530:	1fff8bfc 	.word	0x1fff8bfc
    6534:	1fff8c08 	.word	0x1fff8c08
    6538:	1fff8c10 	.word	0x1fff8c10
    653c:	1fff8c18 	.word	0x1fff8c18
    6540:	1fff8c20 	.word	0x1fff8c20
    6544:	1fff8c28 	.word	0x1fff8c28
    6548:	1fff8c38 	.word	0x1fff8c38
    654c:	1fff8c2c 	.word	0x1fff8c2c
    6550:	1fff8c3c 	.word	0x1fff8c3c
    6554:	1fff8c30 	.word	0x1fff8c30
    6558:	1fff8c40 	.word	0x1fff8c40
    655c:	1fff8c34 	.word	0x1fff8c34
    6560:	1fff8c44 	.word	0x1fff8c44

00006564 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    6564:	b500      	push	{lr}
    6566:	b083      	sub	sp, #12
    6568:	9001      	str	r0, [sp, #4]
    656a:	9100      	str	r1, [sp, #0]
    switch(Command)
    656c:	9b00      	ldr	r3, [sp, #0]
    656e:	2b04      	cmp	r3, #4
    6570:	d010      	beq.n	6594 <Clock_Ip_Command+0x30>
    6572:	9b00      	ldr	r3, [sp, #0]
    6574:	2b04      	cmp	r3, #4
    6576:	d811      	bhi.n	659c <Clock_Ip_Command+0x38>
    6578:	9b00      	ldr	r3, [sp, #0]
    657a:	2b01      	cmp	r3, #1
    657c:	d006      	beq.n	658c <Clock_Ip_Command+0x28>
    657e:	9b00      	ldr	r3, [sp, #0]
    6580:	2b02      	cmp	r3, #2
    6582:	d10b      	bne.n	659c <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    6584:	9801      	ldr	r0, [sp, #4]
    6586:	f7ff fdb3 	bl	60f0 <Clock_Ip_ClockInitializeObjects>
            break;
    658a:	e008      	b.n	659e <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    658c:	9801      	ldr	r0, [sp, #4]
    658e:	f7ff f9db 	bl	5948 <Clock_Ip_SpecificPlatformInitClock>
            break;
    6592:	e004      	b.n	659e <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    6594:	9801      	ldr	r0, [sp, #4]
    6596:	f7ff f8ed 	bl	5774 <DisableSafeClock>
            break;
    659a:	e000      	b.n	659e <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    659c:	bf00      	nop
    }
}
    659e:	bf00      	nop
    65a0:	b003      	add	sp, #12
    65a2:	f85d fb04 	ldr.w	pc, [sp], #4
    65a6:	bf00      	nop

000065a8 <Mcu_CheckInit>:
/**
* @brief Mcu_CheckInit - checks for Mcu_Init
* @implements Mcu_CheckInit_Activity
*/
static Std_ReturnType Mcu_CheckInit(const Mcu_ConfigType * ConfigPtr)
{
    65a8:	b500      	push	{lr}
    65aa:	b085      	sub	sp, #20
    65ac:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    65ae:	2300      	movs	r3, #0
    65b0:	f88d 300f 	strb.w	r3, [sp, #15]

#if (MCU_PRECOMPILE_SUPPORT == STD_OFF)
    if (NULL_PTR == ConfigPtr)
    65b4:	9b01      	ldr	r3, [sp, #4]
    65b6:	2b00      	cmp	r3, #0
    65b8:	d108      	bne.n	65cc <Mcu_CheckInit+0x24>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    65ba:	2301      	movs	r3, #1
    65bc:	f88d 300f 	strb.w	r3, [sp, #15]

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_INIT_ID, MCU_E_INIT_FAILED);
    65c0:	2311      	movs	r3, #17
    65c2:	2200      	movs	r2, #0
    65c4:	2100      	movs	r1, #0
    65c6:	2065      	movs	r0, #101	; 0x65
    65c8:	f012 fb80 	bl	18ccc <Det_ReportError>

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_INIT_ID, MCU_E_INIT_FAILED);
    }
#endif /* (MCU_PRECOMPILE_SUPPORT == STD_ON) */

    return CheckStatus;
    65cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    65d0:	4618      	mov	r0, r3
    65d2:	b005      	add	sp, #20
    65d4:	f85d fb04 	ldr.w	pc, [sp], #4

000065d8 <Mcu_CheckInitClock>:
/**
* @brief Mcu_CheckInitClock - checks for Mcu_InitClock
* @implements Mcu_CheckInitClock_Activity
*/
static Std_ReturnType Mcu_CheckInitClock(Mcu_ClockType ClockSetting)
{
    65d8:	b500      	push	{lr}
    65da:	b085      	sub	sp, #20
    65dc:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    65de:	2300      	movs	r3, #0
    65e0:	f88d 300f 	strb.w	r3, [sp, #15]

    if (ClockSetting >= Mcu_pConfigPtr->NoClkConfigs)
    65e4:	4b0a      	ldr	r3, [pc, #40]	; (6610 <Mcu_CheckInitClock+0x38>)
    65e6:	681b      	ldr	r3, [r3, #0]
    65e8:	68db      	ldr	r3, [r3, #12]
    65ea:	9a01      	ldr	r2, [sp, #4]
    65ec:	429a      	cmp	r2, r3
    65ee:	d308      	bcc.n	6602 <Mcu_CheckInitClock+0x2a>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    65f0:	2301      	movs	r3, #1
    65f2:	f88d 300f 	strb.w	r3, [sp, #15]

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_INITCLOCK_ID, MCU_E_PARAM_CLOCK);
    65f6:	230b      	movs	r3, #11
    65f8:	2202      	movs	r2, #2
    65fa:	2100      	movs	r1, #0
    65fc:	2065      	movs	r0, #101	; 0x65
    65fe:	f012 fb65 	bl	18ccc <Det_ReportError>
    }

    return CheckStatus;
    6602:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6606:	4618      	mov	r0, r3
    6608:	b005      	add	sp, #20
    660a:	f85d fb04 	ldr.w	pc, [sp], #4
    660e:	bf00      	nop
    6610:	1fff8d20 	.word	0x1fff8d20

00006614 <Mcu_CheckSetMode>:
/**
* @brief Mcu_CheckSetMode - checks for Mcu_SetMode
* @implements Mcu_CheckSetMode_Activity
*/
static Std_ReturnType Mcu_CheckSetMode(Power_Ip_ModeType McuMode)
{
    6614:	b500      	push	{lr}
    6616:	b085      	sub	sp, #20
    6618:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    661a:	2300      	movs	r3, #0
    661c:	f88d 300f 	strb.w	r3, [sp, #15]

    if (McuMode >= Mcu_pConfigPtr->NoModeConfigs)
    6620:	4b0a      	ldr	r3, [pc, #40]	; (664c <Mcu_CheckSetMode+0x38>)
    6622:	681b      	ldr	r3, [r3, #0]
    6624:	689b      	ldr	r3, [r3, #8]
    6626:	9a01      	ldr	r2, [sp, #4]
    6628:	429a      	cmp	r2, r3
    662a:	d308      	bcc.n	663e <Mcu_CheckSetMode+0x2a>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    662c:	2301      	movs	r3, #1
    662e:	f88d 300f 	strb.w	r3, [sp, #15]

        (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_SETMODE_ID, MCU_E_PARAM_MODE);
    6632:	230c      	movs	r3, #12
    6634:	2208      	movs	r2, #8
    6636:	2100      	movs	r1, #0
    6638:	2065      	movs	r0, #101	; 0x65
    663a:	f012 fb47 	bl	18ccc <Det_ReportError>
    }

    return CheckStatus;
    663e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6642:	4618      	mov	r0, r3
    6644:	b005      	add	sp, #20
    6646:	f85d fb04 	ldr.w	pc, [sp], #4
    664a:	bf00      	nop
    664c:	1fff8d20 	.word	0x1fff8d20

00006650 <Mcu_CheckGetVersionInfo>:
/**
* @brief Mcu_CheckGetVersionInfo - checks for Mcu_GetVersionInfo
* @implements Mcu_CheckGetVersionInfo_Activity
*/
static Std_ReturnType Mcu_CheckGetVersionInfo(const Std_VersionInfoType * VersionInfo)
{
    6650:	b500      	push	{lr}
    6652:	b085      	sub	sp, #20
    6654:	9001      	str	r0, [sp, #4]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    6656:	2300      	movs	r3, #0
    6658:	f88d 300f 	strb.w	r3, [sp, #15]

    if (NULL_PTR == VersionInfo)
    665c:	9b01      	ldr	r3, [sp, #4]
    665e:	2b00      	cmp	r3, #0
    6660:	d108      	bne.n	6674 <Mcu_CheckGetVersionInfo+0x24>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    6662:	2301      	movs	r3, #1
    6664:	f88d 300f 	strb.w	r3, [sp, #15]

        (void)Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, MCU_GETVERSIONINFO_ID, MCU_E_PARAM_POINTER);
    6668:	2310      	movs	r3, #16
    666a:	2209      	movs	r2, #9
    666c:	2100      	movs	r1, #0
    666e:	2065      	movs	r0, #101	; 0x65
    6670:	f012 fb2c 	bl	18ccc <Det_ReportError>
    }

    return CheckStatus;
    6674:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6678:	4618      	mov	r0, r3
    667a:	b005      	add	sp, #20
    667c:	f85d fb04 	ldr.w	pc, [sp], #4

00006680 <Mcu_HLDChecksEntry>:
/**
* @brief Mcu_HLDChecksEntry - checks for invalid mode transitions.
* @implements Mcu_HLDChecksEntry_Activity
*/
static Std_ReturnType Mcu_HLDChecksEntry(uint8 McuServiceID)
{
    6680:	b500      	push	{lr}
    6682:	b085      	sub	sp, #20
    6684:	4603      	mov	r3, r0
    6686:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    668a:	2300      	movs	r3, #0
    668c:	f88d 300f 	strb.w	r3, [sp, #15]

    if (MCU_INIT_ID == McuServiceID)
    6690:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6694:	2b00      	cmp	r3, #0
    6696:	d10e      	bne.n	66b6 <Mcu_HLDChecksEntry+0x36>
    {
        if (MCU_UNINIT != Mcu_eStatus) /* If "Mcu_Init" was already called (i.e. driver is initialized). */
    6698:	4b13      	ldr	r3, [pc, #76]	; (66e8 <Mcu_HLDChecksEntry+0x68>)
    669a:	681b      	ldr	r3, [r3, #0]
    669c:	2b03      	cmp	r3, #3
    669e:	d01c      	beq.n	66da <Mcu_HLDChecksEntry+0x5a>
        {
            CheckStatus = (Std_ReturnType)E_NOT_OK;
    66a0:	2301      	movs	r3, #1
    66a2:	f88d 300f 	strb.w	r3, [sp, #15]
            (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, McuServiceID, MCU_E_ALREADY_INITIALIZED);
    66a6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    66aa:	2313      	movs	r3, #19
    66ac:	2100      	movs	r1, #0
    66ae:	2065      	movs	r0, #101	; 0x65
    66b0:	f012 fb0c 	bl	18ccc <Det_ReportError>
    66b4:	e011      	b.n	66da <Mcu_HLDChecksEntry+0x5a>
        }
    }
    else
    {
        if (MCU_UNINIT == Mcu_eStatus) /* If "Mcu_Init" was not called (i.e driver is uninitialized). */
    66b6:	4b0c      	ldr	r3, [pc, #48]	; (66e8 <Mcu_HLDChecksEntry+0x68>)
    66b8:	681b      	ldr	r3, [r3, #0]
    66ba:	2b03      	cmp	r3, #3
    66bc:	d10a      	bne.n	66d4 <Mcu_HLDChecksEntry+0x54>
        {
            CheckStatus = (Std_ReturnType)E_NOT_OK;
    66be:	2301      	movs	r3, #1
    66c0:	f88d 300f 	strb.w	r3, [sp, #15]
            (void) Det_ReportError((uint16)MCU_MODULE_ID, MCU_INSTANCE_ID, McuServiceID, MCU_E_UNINIT);
    66c4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    66c8:	230f      	movs	r3, #15
    66ca:	2100      	movs	r1, #0
    66cc:	2065      	movs	r0, #101	; 0x65
    66ce:	f012 fafd 	bl	18ccc <Det_ReportError>
    66d2:	e002      	b.n	66da <Mcu_HLDChecksEntry+0x5a>
        }
        else
        {
            Mcu_eStatus = MCU_BUSY;
    66d4:	4b04      	ldr	r3, [pc, #16]	; (66e8 <Mcu_HLDChecksEntry+0x68>)
    66d6:	220a      	movs	r2, #10
    66d8:	601a      	str	r2, [r3, #0]
        }
    }

    return CheckStatus;
    66da:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    66de:	4618      	mov	r0, r3
    66e0:	b005      	add	sp, #20
    66e2:	f85d fb04 	ldr.w	pc, [sp], #4
    66e6:	bf00      	nop
    66e8:	1fff8b1c 	.word	0x1fff8b1c

000066ec <Mcu_HLDChecksExit>:
* @implements Mcu_HLDChecksExit_Activity
*/
static void Mcu_HLDChecksExit(  Std_ReturnType RetStatus,
                                uint8 McuServiceID
                              )
{
    66ec:	b082      	sub	sp, #8
    66ee:	4603      	mov	r3, r0
    66f0:	460a      	mov	r2, r1
    66f2:	f88d 3007 	strb.w	r3, [sp, #7]
    66f6:	4613      	mov	r3, r2
    66f8:	f88d 3006 	strb.w	r3, [sp, #6]
    if (MCU_INIT_ID == McuServiceID)
    66fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6700:	2b00      	cmp	r3, #0
    6702:	d10b      	bne.n	671c <Mcu_HLDChecksExit+0x30>
    {
        if ((Std_ReturnType)E_OK == (Std_ReturnType)RetStatus)
    6704:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6708:	2b00      	cmp	r3, #0
    670a:	d103      	bne.n	6714 <Mcu_HLDChecksExit+0x28>
        {
            Mcu_eStatus = MCU_IDLE;
    670c:	4b06      	ldr	r3, [pc, #24]	; (6728 <Mcu_HLDChecksExit+0x3c>)
    670e:	220c      	movs	r2, #12
    6710:	601a      	str	r2, [r3, #0]
    }
    else
    {
        Mcu_eStatus = MCU_IDLE;
    }
}
    6712:	e006      	b.n	6722 <Mcu_HLDChecksExit+0x36>
            Mcu_eStatus = MCU_UNINIT;
    6714:	4b04      	ldr	r3, [pc, #16]	; (6728 <Mcu_HLDChecksExit+0x3c>)
    6716:	2203      	movs	r2, #3
    6718:	601a      	str	r2, [r3, #0]
}
    671a:	e002      	b.n	6722 <Mcu_HLDChecksExit+0x36>
        Mcu_eStatus = MCU_IDLE;
    671c:	4b02      	ldr	r3, [pc, #8]	; (6728 <Mcu_HLDChecksExit+0x3c>)
    671e:	220c      	movs	r2, #12
    6720:	601a      	str	r2, [r3, #0]
}
    6722:	bf00      	nop
    6724:	b002      	add	sp, #8
    6726:	4770      	bx	lr
    6728:	1fff8b1c 	.word	0x1fff8b1c

0000672c <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    672c:	b500      	push	{lr}
    672e:	b085      	sub	sp, #20
    6730:	9001      	str	r0, [sp, #4]
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_PARAM_CHECK == STD_ON) )
    Std_ReturnType CheckStatus;
#endif /* ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_PARAM_CHECK == STD_ON) ) */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    CheckStatus = (Std_ReturnType) Mcu_HLDChecksEntry(MCU_INIT_ID);
    6732:	2000      	movs	r0, #0
    6734:	f7ff ffa4 	bl	6680 <Mcu_HLDChecksEntry>
    6738:	4603      	mov	r3, r0
    673a:	f88d 300b 	strb.w	r3, [sp, #11]

    if ( (Std_ReturnType)E_OK == CheckStatus )
    673e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6742:	2b00      	cmp	r3, #0
    6744:	d150      	bne.n	67e8 <Mcu_Init+0xbc>

#if (MCU_PARAM_CHECK == STD_ON)
        /* When PostBuild is used and #(Variants) > 1, the input parameter 'ConfigPtr' is mandatory
         * to be different than NULL_PTR. */
        /* Check the config. In case of error, return immediately. The "Mcu_CheckInit" function will report DET errors. */
        CheckStatus = Mcu_CheckInit(ConfigPtr);
    6746:	9801      	ldr	r0, [sp, #4]
    6748:	f7ff ff2e 	bl	65a8 <Mcu_CheckInit>
    674c:	4603      	mov	r3, r0
    674e:	f88d 300b 	strb.w	r3, [sp, #11]

        if ((Std_ReturnType)E_OK == CheckStatus)
    6752:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6756:	2b00      	cmp	r3, #0
    6758:	d13d      	bne.n	67d6 <Mcu_Init+0xaa>

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    675a:	4a25      	ldr	r2, [pc, #148]	; (67f0 <Mcu_Init+0xc4>)
    675c:	9b01      	ldr	r3, [sp, #4]
    675e:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    6760:	2300      	movs	r3, #0
    6762:	9303      	str	r3, [sp, #12]
    6764:	e010      	b.n	6788 <Mcu_Init+0x5c>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    6766:	4b22      	ldr	r3, [pc, #136]	; (67f0 <Mcu_Init+0xc4>)
    6768:	681b      	ldr	r3, [r3, #0]
    676a:	6919      	ldr	r1, [r3, #16]
    676c:	9a03      	ldr	r2, [sp, #12]
    676e:	4613      	mov	r3, r2
    6770:	005b      	lsls	r3, r3, #1
    6772:	4413      	add	r3, r2
    6774:	009b      	lsls	r3, r3, #2
    6776:	440b      	add	r3, r1
    6778:	681b      	ldr	r3, [r3, #0]
    677a:	9a03      	ldr	r2, [sp, #12]
    677c:	b2d1      	uxtb	r1, r2
    677e:	4a1d      	ldr	r2, [pc, #116]	; (67f4 <Mcu_Init+0xc8>)
    6780:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    6782:	9b03      	ldr	r3, [sp, #12]
    6784:	3301      	adds	r3, #1
    6786:	9303      	str	r3, [sp, #12]
    6788:	4b19      	ldr	r3, [pc, #100]	; (67f0 <Mcu_Init+0xc4>)
    678a:	681b      	ldr	r3, [r3, #0]
    678c:	689b      	ldr	r3, [r3, #8]
    678e:	9a03      	ldr	r2, [sp, #12]
    6790:	429a      	cmp	r2, r3
    6792:	d3e8      	bcc.n	6766 <Mcu_Init+0x3a>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    6794:	2300      	movs	r3, #0
    6796:	9303      	str	r3, [sp, #12]
    6798:	e010      	b.n	67bc <Mcu_Init+0x90>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    679a:	4b15      	ldr	r3, [pc, #84]	; (67f0 <Mcu_Init+0xc4>)
    679c:	681b      	ldr	r3, [r3, #0]
    679e:	6959      	ldr	r1, [r3, #20]
    67a0:	9a03      	ldr	r2, [sp, #12]
    67a2:	4613      	mov	r3, r2
    67a4:	01db      	lsls	r3, r3, #7
    67a6:	1a9b      	subs	r3, r3, r2
    67a8:	00db      	lsls	r3, r3, #3
    67aa:	440b      	add	r3, r1
    67ac:	681b      	ldr	r3, [r3, #0]
    67ae:	9a03      	ldr	r2, [sp, #12]
    67b0:	b2d1      	uxtb	r1, r2
    67b2:	4a11      	ldr	r2, [pc, #68]	; (67f8 <Mcu_Init+0xcc>)
    67b4:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    67b6:	9b03      	ldr	r3, [sp, #12]
    67b8:	3301      	adds	r3, #1
    67ba:	9303      	str	r3, [sp, #12]
    67bc:	4b0c      	ldr	r3, [pc, #48]	; (67f0 <Mcu_Init+0xc4>)
    67be:	681b      	ldr	r3, [r3, #0]
    67c0:	68db      	ldr	r3, [r3, #12]
    67c2:	9a03      	ldr	r2, [sp, #12]
    67c4:	429a      	cmp	r2, r3
    67c6:	d3e8      	bcc.n	679a <Mcu_Init+0x6e>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    67c8:	4b09      	ldr	r3, [pc, #36]	; (67f0 <Mcu_Init+0xc4>)
    67ca:	681b      	ldr	r3, [r3, #0]
    67cc:	699b      	ldr	r3, [r3, #24]
    67ce:	4618      	mov	r0, r3
    67d0:	f000 f90c 	bl	69ec <Mcu_Ipw_Init>
    67d4:	e002      	b.n	67dc <Mcu_Init+0xb0>
#if (MCU_PARAM_CHECK == STD_ON)
        }
        else
        {
            /* Clean the init pointer in case of an error. */
            Mcu_pConfigPtr = NULL_PTR;
    67d6:	4b06      	ldr	r3, [pc, #24]	; (67f0 <Mcu_Init+0xc4>)
    67d8:	2200      	movs	r2, #0
    67da:	601a      	str	r2, [r3, #0]
#endif /* (MCU_PARAM_CHECK == STD_ON) */


#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    67dc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    67e0:	2100      	movs	r1, #0
    67e2:	4618      	mov	r0, r3
    67e4:	f7ff ff82 	bl	66ec <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    67e8:	bf00      	nop
    67ea:	b005      	add	sp, #20
    67ec:	f85d fb04 	ldr.w	pc, [sp], #4
    67f0:	1fff8d20 	.word	0x1fff8d20
    67f4:	1fff8d1c 	.word	0x1fff8d1c
    67f8:	1fff8d18 	.word	0x1fff8d18

000067fc <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    67fc:	b500      	push	{lr}
    67fe:	b085      	sub	sp, #20
    6800:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    6802:	2301      	movs	r3, #1
    6804:	f88d 300f 	strb.w	r3, [sp, #15]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    /* Check if the driver is initialized. */
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_INITRAMSECTION_ID) )
    6808:	2001      	movs	r0, #1
    680a:	f7ff ff39 	bl	6680 <Mcu_HLDChecksEntry>
    680e:	4603      	mov	r3, r0
    6810:	2b00      	cmp	r3, #0
    6812:	d103      	bne.n	681c <Mcu_InitRamSection+0x20>
        /* To avoid compiler warning. */
        MCU_PARAM_UNUSED(RamSection);
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    6814:	2101      	movs	r1, #1
    6816:	2000      	movs	r0, #0
    6818:	f7ff ff68 	bl	66ec <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    681c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6820:	4618      	mov	r0, r3
    6822:	b005      	add	sp, #20
    6824:	f85d fb04 	ldr.w	pc, [sp], #4

00006828 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    6828:	b500      	push	{lr}
    682a:	b085      	sub	sp, #20
    682c:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    682e:	4a17      	ldr	r2, [pc, #92]	; (688c <Mcu_InitClock+0x64>)
    6830:	9b01      	ldr	r3, [sp, #4]
    6832:	4413      	add	r3, r2
    6834:	781b      	ldrb	r3, [r3, #0]
    6836:	f88d 300e 	strb.w	r3, [sp, #14]
    /* Return the success of the clock initalization operation. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_PARAM_CHECK == STD_ON) )
    Std_ReturnType ClockStatus = (Std_ReturnType)E_NOT_OK;
    683a:	2301      	movs	r3, #1
    683c:	f88d 300f 	strb.w	r3, [sp, #15]
#else
    Std_ReturnType ClockStatus;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_INITCLOCK_ID) )
    6840:	2002      	movs	r0, #2
    6842:	f7ff ff1d 	bl	6680 <Mcu_HLDChecksEntry>
    6846:	4603      	mov	r3, r0
    6848:	2b00      	cmp	r3, #0
    684a:	d119      	bne.n	6880 <Mcu_InitClock+0x58>
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
    684c:	9801      	ldr	r0, [sp, #4]
    684e:	f7ff fec3 	bl	65d8 <Mcu_CheckInitClock>
    6852:	4603      	mov	r3, r0
    6854:	2b00      	cmp	r3, #0
    6856:	d10f      	bne.n	6878 <Mcu_InitClock+0x50>
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    6858:	4b0d      	ldr	r3, [pc, #52]	; (6890 <Mcu_InitClock+0x68>)
    685a:	681b      	ldr	r3, [r3, #0]
    685c:	6959      	ldr	r1, [r3, #20]
    685e:	f89d 200e 	ldrb.w	r2, [sp, #14]
    6862:	4613      	mov	r3, r2
    6864:	01db      	lsls	r3, r3, #7
    6866:	1a9b      	subs	r3, r3, r2
    6868:	00db      	lsls	r3, r3, #3
    686a:	440b      	add	r3, r1
    686c:	4618      	mov	r0, r3
    686e:	f000 f8c7 	bl	6a00 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    6872:	2300      	movs	r3, #0
    6874:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_PARAM_CHECK == STD_ON)
        }
#endif /* (MCU_PARAM_CHECK == STD_ON) */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    6878:	2102      	movs	r1, #2
    687a:	2000      	movs	r0, #0
    687c:	f7ff ff36 	bl	66ec <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    6880:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6884:	4618      	mov	r0, r3
    6886:	b005      	add	sp, #20
    6888:	f85d fb04 	ldr.w	pc, [sp], #4
    688c:	1fff8d18 	.word	0x1fff8d18
    6890:	1fff8d20 	.word	0x1fff8d20

00006894 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    6894:	b500      	push	{lr}
    6896:	b085      	sub	sp, #20
    6898:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    689a:	4a15      	ldr	r2, [pc, #84]	; (68f0 <Mcu_SetMode+0x5c>)
    689c:	9b01      	ldr	r3, [sp, #4]
    689e:	4413      	add	r3, r2
    68a0:	781b      	ldrb	r3, [r3, #0]
    68a2:	f88d 300f 	strb.w	r3, [sp, #15]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_SETMODE_ID) )
    68a6:	2008      	movs	r0, #8
    68a8:	f7ff feea 	bl	6680 <Mcu_HLDChecksEntry>
    68ac:	4603      	mov	r3, r0
    68ae:	2b00      	cmp	r3, #0
    68b0:	d11a      	bne.n	68e8 <Mcu_SetMode+0x54>
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

#if (MCU_PARAM_CHECK == STD_ON)
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
    68b2:	9801      	ldr	r0, [sp, #4]
    68b4:	f7ff feae 	bl	6614 <Mcu_CheckSetMode>
    68b8:	4603      	mov	r3, r0
    68ba:	2b00      	cmp	r3, #0
    68bc:	d110      	bne.n	68e0 <Mcu_SetMode+0x4c>
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    68be:	f00e fe79 	bl	155b4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    68c2:	4b0c      	ldr	r3, [pc, #48]	; (68f4 <Mcu_SetMode+0x60>)
    68c4:	681b      	ldr	r3, [r3, #0]
    68c6:	6919      	ldr	r1, [r3, #16]
    68c8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    68cc:	4613      	mov	r3, r2
    68ce:	005b      	lsls	r3, r3, #1
    68d0:	4413      	add	r3, r2
    68d2:	009b      	lsls	r3, r3, #2
    68d4:	440b      	add	r3, r1
    68d6:	4618      	mov	r0, r3
    68d8:	f000 f89c 	bl	6a14 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    68dc:	f00e fe96 	bl	1560c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>
        }
#endif /* (MCU_PARAM_CHECK == STD_ON) */


#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    68e0:	2108      	movs	r1, #8
    68e2:	2000      	movs	r0, #0
    68e4:	f7ff ff02 	bl	66ec <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    68e8:	bf00      	nop
    68ea:	b005      	add	sp, #20
    68ec:	f85d fb04 	ldr.w	pc, [sp], #4
    68f0:	1fff8d1c 	.word	0x1fff8d1c
    68f4:	1fff8d20 	.word	0x1fff8d20

000068f8 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    68f8:	b500      	push	{lr}
    68fa:	b083      	sub	sp, #12
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    68fc:	2302      	movs	r3, #2
    68fe:	9301      	str	r3, [sp, #4]
#else
    Mcu_PllStatusType PllStatus;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETPLLSTATUS_ID) )
    6900:	2004      	movs	r0, #4
    6902:	f7ff febd 	bl	6680 <Mcu_HLDChecksEntry>
    6906:	4603      	mov	r3, r0
    6908:	2b00      	cmp	r3, #0
    690a:	d103      	bne.n	6914 <Mcu_GetPllStatus+0x1c>
           At this point, the return value can be only MCU_PLL_LOCKED or MCU_PLL_UNLOCKED. */
        PllStatus = Mcu_Ipw_GetPllStatus();
#endif /* (MCU_NO_PLL == STD_OFF) */

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    690c:	2104      	movs	r1, #4
    690e:	2000      	movs	r0, #0
    6910:	f7ff feec 	bl	66ec <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    6914:	9b01      	ldr	r3, [sp, #4]
}
    6916:	4618      	mov	r0, r3
    6918:	b003      	add	sp, #12
    691a:	f85d fb04 	ldr.w	pc, [sp], #4

0000691e <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    691e:	b500      	push	{lr}
    6920:	b083      	sub	sp, #12
    /* Return value of the function. */
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    Mcu_ResetType ResetReason = MCU_RESET_UNDEFINED;
    6922:	230e      	movs	r3, #14
    6924:	9301      	str	r3, [sp, #4]
#else
    Mcu_ResetType ResetReason;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    6926:	2005      	movs	r0, #5
    6928:	f7ff feaa 	bl	6680 <Mcu_HLDChecksEntry>
    692c:	4603      	mov	r3, r0
    692e:	2b00      	cmp	r3, #0
    6930:	d106      	bne.n	6940 <Mcu_GetResetReason+0x22>
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    6932:	f000 f879 	bl	6a28 <Mcu_Ipw_GetResetReason>
    6936:	9001      	str	r0, [sp, #4]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    6938:	2105      	movs	r1, #5
    693a:	2000      	movs	r0, #0
    693c:	f7ff fed6 	bl	66ec <Mcu_HLDChecksExit>
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    6940:	9b01      	ldr	r3, [sp, #4]
}
    6942:	4618      	mov	r0, r3
    6944:	b003      	add	sp, #12
    6946:	f85d fb04 	ldr.w	pc, [sp], #4

0000694a <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    694a:	b500      	push	{lr}
    694c:	b083      	sub	sp, #12
    /* Return value of the function. */
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    Mcu_RawResetType RawResetValue = MCU_RAW_RESET_DEFAULT;
    694e:	f04f 33ff 	mov.w	r3, #4294967295
    6952:	9301      	str	r3, [sp, #4]
#else
    Mcu_RawResetType RawResetValue;
#endif

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    6954:	2006      	movs	r0, #6
    6956:	f7ff fe93 	bl	6680 <Mcu_HLDChecksEntry>
    695a:	4603      	mov	r3, r0
    695c:	2b00      	cmp	r3, #0
    695e:	d106      	bne.n	696e <Mcu_GetResetRawValue+0x24>
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    6960:	f000 f868 	bl	6a34 <Mcu_Ipw_GetResetRawValue>
    6964:	9001      	str	r0, [sp, #4]

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    6966:	2106      	movs	r1, #6
    6968:	2000      	movs	r0, #0
    696a:	f7ff febf 	bl	66ec <Mcu_HLDChecksExit>
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    696e:	9b01      	ldr	r3, [sp, #4]
}
    6970:	4618      	mov	r0, r3
    6972:	b003      	add	sp, #12
    6974:	f85d fb04 	ldr.w	pc, [sp], #4

00006978 <Mcu_GetVersionInfo>:
* @api
*
* @implements Mcu_GetVersionInfo_Activity
*/
void Mcu_GetVersionInfo(Std_VersionInfoType * versioninfo)
{
    6978:	b500      	push	{lr}
    697a:	b083      	sub	sp, #12
    697c:	9001      	str	r0, [sp, #4]
#if (MCU_PARAM_CHECK == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckGetVersionInfo(versioninfo) )
    697e:	9801      	ldr	r0, [sp, #4]
    6980:	f7ff fe66 	bl	6650 <Mcu_CheckGetVersionInfo>
    6984:	4603      	mov	r3, r0
    6986:	2b00      	cmp	r3, #0
    6988:	d10e      	bne.n	69a8 <Mcu_GetVersionInfo+0x30>
    {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
        (versioninfo)->vendorID = (uint16)MCU_VENDOR_ID;
    698a:	9b01      	ldr	r3, [sp, #4]
    698c:	222b      	movs	r2, #43	; 0x2b
    698e:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID = (uint8)MCU_MODULE_ID;
    6990:	9b01      	ldr	r3, [sp, #4]
    6992:	2265      	movs	r2, #101	; 0x65
    6994:	805a      	strh	r2, [r3, #2]
        (versioninfo)->sw_major_version = (uint8)MCU_SW_MAJOR_VERSION;
    6996:	9b01      	ldr	r3, [sp, #4]
    6998:	2202      	movs	r2, #2
    699a:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)MCU_SW_MINOR_VERSION;
    699c:	9b01      	ldr	r3, [sp, #4]
    699e:	2200      	movs	r2, #0
    69a0:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)MCU_SW_PATCH_VERSION;
    69a2:	9b01      	ldr	r3, [sp, #4]
    69a4:	2200      	movs	r2, #0
    69a6:	719a      	strb	r2, [r3, #6]
#if (MCU_PARAM_CHECK == STD_ON)
    }
#endif /* (MCU_PARAM_CHECK == STD_ON) */
}
    69a8:	bf00      	nop
    69aa:	b003      	add	sp, #12
    69ac:	f85d fb04 	ldr.w	pc, [sp], #4

000069b0 <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    69b0:	b500      	push	{lr}
    69b2:	b083      	sub	sp, #12
    69b4:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    69b6:	201a      	movs	r0, #26
    69b8:	f7ff fe62 	bl	6680 <Mcu_HLDChecksEntry>
    69bc:	4603      	mov	r3, r0
    69be:	2b00      	cmp	r3, #0
    69c0:	d106      	bne.n	69d0 <Mcu_SleepOnExit+0x20>
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    69c2:	9801      	ldr	r0, [sp, #4]
    69c4:	f000 f83c 	bl	6a40 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    69c8:	211a      	movs	r1, #26
    69ca:	2000      	movs	r0, #0
    69cc:	f7ff fe8e 	bl	66ec <Mcu_HLDChecksExit>
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    69d0:	bf00      	nop
    69d2:	b003      	add	sp, #12
    69d4:	f85d fb04 	ldr.w	pc, [sp], #4

000069d8 <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    69d8:	b082      	sub	sp, #8
    69da:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    69dc:	4b02      	ldr	r3, [pc, #8]	; (69e8 <Mcu_ClkSrcFailureNotification+0x10>)
    69de:	681b      	ldr	r3, [r3, #0]
    69e0:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    69e2:	bf00      	nop
    69e4:	b002      	add	sp, #8
    69e6:	4770      	bx	lr
    69e8:	1fff8d20 	.word	0x1fff8d20

000069ec <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    69ec:	b500      	push	{lr}
    69ee:	b083      	sub	sp, #12
    69f0:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    69f2:	9801      	ldr	r0, [sp, #4]
    69f4:	f000 f882 	bl	6afc <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    69f8:	bf00      	nop
    69fa:	b003      	add	sp, #12
    69fc:	f85d fb04 	ldr.w	pc, [sp], #4

00006a00 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    6a00:	b500      	push	{lr}
    6a02:	b083      	sub	sp, #12
    6a04:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    6a06:	9801      	ldr	r0, [sp, #4]
    6a08:	f7fc fb12 	bl	3030 <Clock_Ip_InitClock>
}
    6a0c:	bf00      	nop
    6a0e:	b003      	add	sp, #12
    6a10:	f85d fb04 	ldr.w	pc, [sp], #4

00006a14 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    6a14:	b500      	push	{lr}
    6a16:	b083      	sub	sp, #12
    6a18:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    6a1a:	9801      	ldr	r0, [sp, #4]
    6a1c:	f000 f820 	bl	6a60 <Power_Ip_SetMode>
}
    6a20:	bf00      	nop
    6a22:	b003      	add	sp, #12
    6a24:	f85d fb04 	ldr.w	pc, [sp], #4

00006a28 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    6a28:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    6a2a:	f000 f84f 	bl	6acc <Power_Ip_GetResetReason>
    6a2e:	4603      	mov	r3, r0
}
    6a30:	4618      	mov	r0, r3
    6a32:	bd08      	pop	{r3, pc}

00006a34 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    6a34:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    6a36:	f000 f857 	bl	6ae8 <Power_Ip_GetResetRawValue>
    6a3a:	4603      	mov	r3, r0
}
    6a3c:	4618      	mov	r0, r3
    6a3e:	bd08      	pop	{r3, pc}

00006a40 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    6a40:	b500      	push	{lr}
    6a42:	b083      	sub	sp, #12
    6a44:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    6a46:	9b01      	ldr	r3, [sp, #4]
    6a48:	2b00      	cmp	r3, #0
    6a4a:	d102      	bne.n	6a52 <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    6a4c:	f000 f86c 	bl	6b28 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    6a50:	e001      	b.n	6a56 <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    6a52:	f000 f86e 	bl	6b32 <Power_Ip_EnableSleepOnExit>
}
    6a56:	bf00      	nop
    6a58:	b003      	add	sp, #12
    6a5a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00006a60 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    6a60:	b500      	push	{lr}
    6a62:	b085      	sub	sp, #20
    6a64:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    6a66:	9b01      	ldr	r3, [sp, #4]
    6a68:	685b      	ldr	r3, [r3, #4]
    6a6a:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    6a6c:	9802      	ldr	r0, [sp, #8]
    6a6e:	f000 f9f5 	bl	6e5c <Power_Ip_SMC_ModeCheckEntry>
    6a72:	4603      	mov	r3, r0
    6a74:	2b00      	cmp	r3, #0
    6a76:	d002      	beq.n	6a7e <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6a78:	2301      	movs	r3, #1
    6a7a:	9303      	str	r3, [sp, #12]
    6a7c:	e003      	b.n	6a86 <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    6a7e:	9801      	ldr	r0, [sp, #4]
    6a80:	f000 fa1e 	bl	6ec0 <Power_Ip_SMC_ModeConfig>
    6a84:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    6a86:	9b03      	ldr	r3, [sp, #12]
    6a88:	2b01      	cmp	r3, #1
    6a8a:	d103      	bne.n	6a94 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6a8c:	21ff      	movs	r1, #255	; 0xff
    6a8e:	2003      	movs	r0, #3
    6a90:	f000 f8f4 	bl	6c7c <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    6a94:	bf00      	nop
    6a96:	b005      	add	sp, #20
    6a98:	f85d fb04 	ldr.w	pc, [sp], #4

00006a9c <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    6a9c:	b084      	sub	sp, #16
    6a9e:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    6aa0:	230c      	movs	r3, #12
    6aa2:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    6aa4:	4a08      	ldr	r2, [pc, #32]	; (6ac8 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    6aa6:	9b01      	ldr	r3, [sp, #4]
    6aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6aac:	2b0e      	cmp	r3, #14
    6aae:	d805      	bhi.n	6abc <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    6ab0:	4a05      	ldr	r2, [pc, #20]	; (6ac8 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    6ab2:	9b01      	ldr	r3, [sp, #4]
    6ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ab8:	9303      	str	r3, [sp, #12]
    6aba:	e001      	b.n	6ac0 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    6abc:	230c      	movs	r3, #12
    6abe:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    6ac0:	9b03      	ldr	r3, [sp, #12]
}
    6ac2:	4618      	mov	r0, r3
    6ac4:	b004      	add	sp, #16
    6ac6:	4770      	bx	lr
    6ac8:	00019fe8 	.word	0x00019fe8

00006acc <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    6acc:	b500      	push	{lr}
    6ace:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    6ad0:	f000 f940 	bl	6d54 <Power_Ip_RCM_GetResetReason>
    6ad4:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    6ad6:	9801      	ldr	r0, [sp, #4]
    6ad8:	f7ff ffe0 	bl	6a9c <Power_Ip_ConvertIntergeToResetType>
    6adc:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    6ade:	9b00      	ldr	r3, [sp, #0]
}
    6ae0:	4618      	mov	r0, r3
    6ae2:	b003      	add	sp, #12
    6ae4:	f85d fb04 	ldr.w	pc, [sp], #4

00006ae8 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    6ae8:	b500      	push	{lr}
    6aea:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    6aec:	f000 f98a 	bl	6e04 <Power_Ip_RCM_GetResetRawValue>
    6af0:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    6af2:	9b01      	ldr	r3, [sp, #4]
}
    6af4:	4618      	mov	r0, r3
    6af6:	b003      	add	sp, #12
    6af8:	f85d fb04 	ldr.w	pc, [sp], #4

00006afc <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    6afc:	b500      	push	{lr}
    6afe:	b083      	sub	sp, #12
    6b00:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    6b02:	9b01      	ldr	r3, [sp, #4]
    6b04:	681b      	ldr	r3, [r3, #0]
    6b06:	4618      	mov	r0, r3
    6b08:	f000 f90e 	bl	6d28 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    6b0c:	9b01      	ldr	r3, [sp, #4]
    6b0e:	685b      	ldr	r3, [r3, #4]
    6b10:	4618      	mov	r0, r3
    6b12:	f000 f86d 	bl	6bf0 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    6b16:	9b01      	ldr	r3, [sp, #4]
    6b18:	689b      	ldr	r3, [r3, #8]
    6b1a:	4618      	mov	r0, r3
    6b1c:	f000 f990 	bl	6e40 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    6b20:	bf00      	nop
    6b22:	b003      	add	sp, #12
    6b24:	f85d fb04 	ldr.w	pc, [sp], #4

00006b28 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    6b28:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    6b2a:	f000 f811 	bl	6b50 <Power_Ip_CM4_DisableSleepOnExit>
}
    6b2e:	bf00      	nop
    6b30:	bd08      	pop	{r3, pc}

00006b32 <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    6b32:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    6b34:	f000 f820 	bl	6b78 <Power_Ip_CM4_EnableSleepOnExit>
}
    6b38:	bf00      	nop
    6b3a:	bd08      	pop	{r3, pc}

00006b3c <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    6b3c:	b082      	sub	sp, #8
    6b3e:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    6b40:	4a02      	ldr	r2, [pc, #8]	; (6b4c <Power_Ip_InstallNotificationsCallback+0x10>)
    6b42:	9b01      	ldr	r3, [sp, #4]
    6b44:	6013      	str	r3, [r2, #0]
}
    6b46:	bf00      	nop
    6b48:	b002      	add	sp, #8
    6b4a:	4770      	bx	lr
    6b4c:	1fff8b20 	.word	0x1fff8b20

00006b50 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    6b50:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    6b52:	2300      	movs	r3, #0
    6b54:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    6b56:	4b07      	ldr	r3, [pc, #28]	; (6b74 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    6b58:	681b      	ldr	r3, [r3, #0]
    6b5a:	685b      	ldr	r3, [r3, #4]
    6b5c:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    6b5e:	9b01      	ldr	r3, [sp, #4]
    6b60:	f023 0302 	bic.w	r3, r3, #2
    6b64:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    6b66:	4b03      	ldr	r3, [pc, #12]	; (6b74 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    6b68:	681b      	ldr	r3, [r3, #0]
    6b6a:	9a01      	ldr	r2, [sp, #4]
    6b6c:	605a      	str	r2, [r3, #4]
}
    6b6e:	bf00      	nop
    6b70:	b002      	add	sp, #8
    6b72:	4770      	bx	lr
    6b74:	1fff8b24 	.word	0x1fff8b24

00006b78 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    6b78:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    6b7a:	2300      	movs	r3, #0
    6b7c:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    6b7e:	4b07      	ldr	r3, [pc, #28]	; (6b9c <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    6b80:	681b      	ldr	r3, [r3, #0]
    6b82:	685b      	ldr	r3, [r3, #4]
    6b84:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    6b86:	9b01      	ldr	r3, [sp, #4]
    6b88:	f043 0302 	orr.w	r3, r3, #2
    6b8c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    6b8e:	4b03      	ldr	r3, [pc, #12]	; (6b9c <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    6b90:	681b      	ldr	r3, [r3, #0]
    6b92:	9a01      	ldr	r2, [sp, #4]
    6b94:	605a      	str	r2, [r3, #4]
}
    6b96:	bf00      	nop
    6b98:	b002      	add	sp, #8
    6b9a:	4770      	bx	lr
    6b9c:	1fff8b24 	.word	0x1fff8b24

00006ba0 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    6ba0:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    6ba2:	2300      	movs	r3, #0
    6ba4:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    6ba6:	4b07      	ldr	r3, [pc, #28]	; (6bc4 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    6ba8:	681b      	ldr	r3, [r3, #0]
    6baa:	685b      	ldr	r3, [r3, #4]
    6bac:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    6bae:	9b01      	ldr	r3, [sp, #4]
    6bb0:	f043 0304 	orr.w	r3, r3, #4
    6bb4:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    6bb6:	4b03      	ldr	r3, [pc, #12]	; (6bc4 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    6bb8:	681b      	ldr	r3, [r3, #0]
    6bba:	9a01      	ldr	r2, [sp, #4]
    6bbc:	605a      	str	r2, [r3, #4]
}
    6bbe:	bf00      	nop
    6bc0:	b002      	add	sp, #8
    6bc2:	4770      	bx	lr
    6bc4:	1fff8b24 	.word	0x1fff8b24

00006bc8 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    6bc8:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    6bca:	2300      	movs	r3, #0
    6bcc:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    6bce:	4b07      	ldr	r3, [pc, #28]	; (6bec <Power_Ip_CM4_DisableDeepSleep+0x24>)
    6bd0:	681b      	ldr	r3, [r3, #0]
    6bd2:	685b      	ldr	r3, [r3, #4]
    6bd4:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    6bd6:	9b01      	ldr	r3, [sp, #4]
    6bd8:	f023 0304 	bic.w	r3, r3, #4
    6bdc:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    6bde:	4b03      	ldr	r3, [pc, #12]	; (6bec <Power_Ip_CM4_DisableDeepSleep+0x24>)
    6be0:	681b      	ldr	r3, [r3, #0]
    6be2:	9a01      	ldr	r2, [sp, #4]
    6be4:	605a      	str	r2, [r3, #4]
}
    6be6:	bf00      	nop
    6be8:	b002      	add	sp, #8
    6bea:	4770      	bx	lr
    6bec:	1fff8b24 	.word	0x1fff8b24

00006bf0 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    6bf0:	b084      	sub	sp, #16
    6bf2:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    6bf4:	4b20      	ldr	r3, [pc, #128]	; (6c78 <Power_Ip_PMC_PowerInit+0x88>)
    6bf6:	781b      	ldrb	r3, [r3, #0]
    6bf8:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    6bfc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6c00:	f003 030f 	and.w	r3, r3, #15
    6c04:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    6c08:	9b01      	ldr	r3, [sp, #4]
    6c0a:	781a      	ldrb	r2, [r3, #0]
    6c0c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6c10:	4313      	orrs	r3, r2
    6c12:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    6c16:	4a18      	ldr	r2, [pc, #96]	; (6c78 <Power_Ip_PMC_PowerInit+0x88>)
    6c18:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6c1c:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    6c1e:	4b16      	ldr	r3, [pc, #88]	; (6c78 <Power_Ip_PMC_PowerInit+0x88>)
    6c20:	785b      	ldrb	r3, [r3, #1]
    6c22:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    6c26:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6c2a:	f003 031f 	and.w	r3, r3, #31
    6c2e:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    6c32:	9b01      	ldr	r3, [sp, #4]
    6c34:	785a      	ldrb	r2, [r3, #1]
    6c36:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6c3a:	4313      	orrs	r3, r2
    6c3c:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    6c40:	4a0d      	ldr	r2, [pc, #52]	; (6c78 <Power_Ip_PMC_PowerInit+0x88>)
    6c42:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6c46:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    6c48:	4b0b      	ldr	r3, [pc, #44]	; (6c78 <Power_Ip_PMC_PowerInit+0x88>)
    6c4a:	789b      	ldrb	r3, [r3, #2]
    6c4c:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    6c50:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6c54:	f003 0338 	and.w	r3, r3, #56	; 0x38
    6c58:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    6c5c:	9b01      	ldr	r3, [sp, #4]
    6c5e:	789a      	ldrb	r2, [r3, #2]
    6c60:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6c64:	4313      	orrs	r3, r2
    6c66:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    6c6a:	4a03      	ldr	r2, [pc, #12]	; (6c78 <Power_Ip_PMC_PowerInit+0x88>)
    6c6c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6c70:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    6c72:	bf00      	nop
    6c74:	b004      	add	sp, #16
    6c76:	4770      	bx	lr
    6c78:	4007d000 	.word	0x4007d000

00006c7c <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    6c7c:	b500      	push	{lr}
    6c7e:	b083      	sub	sp, #12
    6c80:	9001      	str	r0, [sp, #4]
    6c82:	460b      	mov	r3, r1
    6c84:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    6c88:	4b05      	ldr	r3, [pc, #20]	; (6ca0 <Power_Ip_ReportPowerErrors+0x24>)
    6c8a:	681b      	ldr	r3, [r3, #0]
    6c8c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6c90:	4611      	mov	r1, r2
    6c92:	9801      	ldr	r0, [sp, #4]
    6c94:	4798      	blx	r3
}
    6c96:	bf00      	nop
    6c98:	b003      	add	sp, #12
    6c9a:	f85d fb04 	ldr.w	pc, [sp], #4
    6c9e:	bf00      	nop
    6ca0:	1fff8b20 	.word	0x1fff8b20

00006ca4 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    6ca4:	b082      	sub	sp, #8
    6ca6:	9001      	str	r0, [sp, #4]
    6ca8:	460b      	mov	r3, r1
    6caa:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    6cae:	bf00      	nop
    6cb0:	b002      	add	sp, #8
    6cb2:	4770      	bx	lr

00006cb4 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    6cb4:	b500      	push	{lr}
    6cb6:	b085      	sub	sp, #20
    6cb8:	9003      	str	r0, [sp, #12]
    6cba:	9102      	str	r1, [sp, #8]
    6cbc:	9201      	str	r2, [sp, #4]
    6cbe:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    6cc0:	2000      	movs	r0, #0
    6cc2:	f7fb fee5 	bl	2a90 <OsIf_GetCounter>
    6cc6:	4602      	mov	r2, r0
    6cc8:	9b03      	ldr	r3, [sp, #12]
    6cca:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    6ccc:	9b02      	ldr	r3, [sp, #8]
    6cce:	2200      	movs	r2, #0
    6cd0:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    6cd2:	2100      	movs	r1, #0
    6cd4:	9800      	ldr	r0, [sp, #0]
    6cd6:	f7fb ff27 	bl	2b28 <OsIf_MicrosToTicks>
    6cda:	4602      	mov	r2, r0
    6cdc:	9b01      	ldr	r3, [sp, #4]
    6cde:	601a      	str	r2, [r3, #0]
}
    6ce0:	bf00      	nop
    6ce2:	b005      	add	sp, #20
    6ce4:	f85d fb04 	ldr.w	pc, [sp], #4

00006ce8 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    6ce8:	b500      	push	{lr}
    6cea:	b087      	sub	sp, #28
    6cec:	9003      	str	r0, [sp, #12]
    6cee:	9102      	str	r1, [sp, #8]
    6cf0:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    6cf2:	2300      	movs	r3, #0
    6cf4:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    6cf8:	2100      	movs	r1, #0
    6cfa:	9803      	ldr	r0, [sp, #12]
    6cfc:	f7fb fee1 	bl	2ac2 <OsIf_GetElapsed>
    6d00:	4602      	mov	r2, r0
    6d02:	9b02      	ldr	r3, [sp, #8]
    6d04:	681b      	ldr	r3, [r3, #0]
    6d06:	441a      	add	r2, r3
    6d08:	9b02      	ldr	r3, [sp, #8]
    6d0a:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    6d0c:	9b02      	ldr	r3, [sp, #8]
    6d0e:	681b      	ldr	r3, [r3, #0]
    6d10:	9a01      	ldr	r2, [sp, #4]
    6d12:	429a      	cmp	r2, r3
    6d14:	d802      	bhi.n	6d1c <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    6d16:	2301      	movs	r3, #1
    6d18:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    6d1c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    6d20:	4618      	mov	r0, r3
    6d22:	b007      	add	sp, #28
    6d24:	f85d fb04 	ldr.w	pc, [sp], #4

00006d28 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    6d28:	b082      	sub	sp, #8
    6d2a:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    6d2c:	9b01      	ldr	r3, [sp, #4]
    6d2e:	681a      	ldr	r2, [r3, #0]
    6d30:	4907      	ldr	r1, [pc, #28]	; (6d50 <Power_Ip_RCM_ResetInit+0x28>)
    6d32:	f641 7307 	movw	r3, #7943	; 0x1f07
    6d36:	4013      	ands	r3, r2
    6d38:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    6d3a:	9b01      	ldr	r3, [sp, #4]
    6d3c:	685a      	ldr	r2, [r3, #4]
    6d3e:	4904      	ldr	r1, [pc, #16]	; (6d50 <Power_Ip_RCM_ResetInit+0x28>)
    6d40:	f642 73ff 	movw	r3, #12287	; 0x2fff
    6d44:	4013      	ands	r3, r2
    6d46:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    6d48:	bf00      	nop
    6d4a:	b002      	add	sp, #8
    6d4c:	4770      	bx	lr
    6d4e:	bf00      	nop
    6d50:	4007f000 	.word	0x4007f000

00006d54 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    6d54:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    6d56:	230c      	movs	r3, #12
    6d58:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    6d5a:	2300      	movs	r3, #0
    6d5c:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    6d5e:	2300      	movs	r3, #0
    6d60:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    6d62:	2300      	movs	r3, #0
    6d64:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    6d66:	4b25      	ldr	r3, [pc, #148]	; (6dfc <Power_Ip_RCM_GetResetReason+0xa8>)
    6d68:	699a      	ldr	r2, [r3, #24]
    6d6a:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6d6e:	4013      	ands	r3, r2
    6d70:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    6d72:	9b03      	ldr	r3, [sp, #12]
    6d74:	2b00      	cmp	r3, #0
    6d76:	d008      	beq.n	6d8a <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    6d78:	4920      	ldr	r1, [pc, #128]	; (6dfc <Power_Ip_RCM_GetResetReason+0xa8>)
    6d7a:	9a03      	ldr	r2, [sp, #12]
    6d7c:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6d80:	4013      	ands	r3, r2
    6d82:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    6d84:	4a1e      	ldr	r2, [pc, #120]	; (6e00 <Power_Ip_RCM_GetResetReason+0xac>)
    6d86:	9b03      	ldr	r3, [sp, #12]
    6d88:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    6d8a:	4b1d      	ldr	r3, [pc, #116]	; (6e00 <Power_Ip_RCM_GetResetReason+0xac>)
    6d8c:	681b      	ldr	r3, [r3, #0]
    6d8e:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    6d90:	9a02      	ldr	r2, [sp, #8]
    6d92:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6d96:	4013      	ands	r3, r2
    6d98:	2b82      	cmp	r3, #130	; 0x82
    6d9a:	d102      	bne.n	6da2 <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    6d9c:	2305      	movs	r3, #5
    6d9e:	9307      	str	r3, [sp, #28]
    6da0:	e027      	b.n	6df2 <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    6da2:	2300      	movs	r3, #0
    6da4:	9306      	str	r3, [sp, #24]
    6da6:	e021      	b.n	6dec <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    6da8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6dac:	9b06      	ldr	r3, [sp, #24]
    6dae:	fa22 f303 	lsr.w	r3, r2, r3
    6db2:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    6db4:	9a01      	ldr	r2, [sp, #4]
    6db6:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    6dba:	4013      	ands	r3, r2
    6dbc:	2b00      	cmp	r3, #0
    6dbe:	d012      	beq.n	6de6 <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    6dc0:	9a01      	ldr	r2, [sp, #4]
    6dc2:	9b02      	ldr	r3, [sp, #8]
    6dc4:	4013      	ands	r3, r2
    6dc6:	2b00      	cmp	r3, #0
    6dc8:	d00a      	beq.n	6de0 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    6dca:	9b05      	ldr	r3, [sp, #20]
    6dcc:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    6dce:	9b04      	ldr	r3, [sp, #16]
    6dd0:	3301      	adds	r3, #1
    6dd2:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    6dd4:	9b04      	ldr	r3, [sp, #16]
    6dd6:	2b01      	cmp	r3, #1
    6dd8:	d902      	bls.n	6de0 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    6dda:	230d      	movs	r3, #13
    6ddc:	9307      	str	r3, [sp, #28]
                        break;
    6dde:	e008      	b.n	6df2 <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    6de0:	9b05      	ldr	r3, [sp, #20]
    6de2:	3301      	adds	r3, #1
    6de4:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    6de6:	9b06      	ldr	r3, [sp, #24]
    6de8:	3301      	adds	r3, #1
    6dea:	9306      	str	r3, [sp, #24]
    6dec:	9b06      	ldr	r3, [sp, #24]
    6dee:	2b1f      	cmp	r3, #31
    6df0:	d9da      	bls.n	6da8 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    6df2:	9b07      	ldr	r3, [sp, #28]
}
    6df4:	4618      	mov	r0, r3
    6df6:	b008      	add	sp, #32
    6df8:	4770      	bx	lr
    6dfa:	bf00      	nop
    6dfc:	4007f000 	.word	0x4007f000
    6e00:	1fff8d24 	.word	0x1fff8d24

00006e04 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    6e04:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    6e06:	4b0c      	ldr	r3, [pc, #48]	; (6e38 <Power_Ip_RCM_GetResetRawValue+0x34>)
    6e08:	699a      	ldr	r2, [r3, #24]
    6e0a:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6e0e:	4013      	ands	r3, r2
    6e10:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    6e12:	9b01      	ldr	r3, [sp, #4]
    6e14:	2b00      	cmp	r3, #0
    6e16:	d008      	beq.n	6e2a <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    6e18:	4907      	ldr	r1, [pc, #28]	; (6e38 <Power_Ip_RCM_GetResetRawValue+0x34>)
    6e1a:	9a01      	ldr	r2, [sp, #4]
    6e1c:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6e20:	4013      	ands	r3, r2
    6e22:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    6e24:	4a05      	ldr	r2, [pc, #20]	; (6e3c <Power_Ip_RCM_GetResetRawValue+0x38>)
    6e26:	9b01      	ldr	r3, [sp, #4]
    6e28:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    6e2a:	4b04      	ldr	r3, [pc, #16]	; (6e3c <Power_Ip_RCM_GetResetRawValue+0x38>)
    6e2c:	681b      	ldr	r3, [r3, #0]
    6e2e:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    6e30:	9b00      	ldr	r3, [sp, #0]
}
    6e32:	4618      	mov	r0, r3
    6e34:	b002      	add	sp, #8
    6e36:	4770      	bx	lr
    6e38:	4007f000 	.word	0x4007f000
    6e3c:	1fff8d24 	.word	0x1fff8d24

00006e40 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    6e40:	b082      	sub	sp, #8
    6e42:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    6e44:	9b01      	ldr	r3, [sp, #4]
    6e46:	681b      	ldr	r3, [r3, #0]
    6e48:	4a03      	ldr	r2, [pc, #12]	; (6e58 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    6e4a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    6e4e:	6093      	str	r3, [r2, #8]
}
    6e50:	bf00      	nop
    6e52:	b002      	add	sp, #8
    6e54:	4770      	bx	lr
    6e56:	bf00      	nop
    6e58:	4007e000 	.word	0x4007e000

00006e5c <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    6e5c:	b084      	sub	sp, #16
    6e5e:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    6e60:	2301      	movs	r3, #1
    6e62:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    6e64:	4b15      	ldr	r3, [pc, #84]	; (6ebc <Power_Ip_SMC_ModeCheckEntry+0x60>)
    6e66:	695b      	ldr	r3, [r3, #20]
    6e68:	b2db      	uxtb	r3, r3
    6e6a:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    6e6c:	9b01      	ldr	r3, [sp, #4]
    6e6e:	2b02      	cmp	r3, #2
    6e70:	d012      	beq.n	6e98 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    6e72:	9b01      	ldr	r3, [sp, #4]
    6e74:	2b02      	cmp	r3, #2
    6e76:	d818      	bhi.n	6eaa <Power_Ip_SMC_ModeCheckEntry+0x4e>
    6e78:	9b01      	ldr	r3, [sp, #4]
    6e7a:	2b00      	cmp	r3, #0
    6e7c:	d003      	beq.n	6e86 <Power_Ip_SMC_ModeCheckEntry+0x2a>
    6e7e:	9b01      	ldr	r3, [sp, #4]
    6e80:	2b01      	cmp	r3, #1
    6e82:	d003      	beq.n	6e8c <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    6e84:	e011      	b.n	6eaa <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    6e86:	2300      	movs	r3, #0
    6e88:	9303      	str	r3, [sp, #12]
            break;
    6e8a:	e013      	b.n	6eb4 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    6e8c:	9b02      	ldr	r3, [sp, #8]
    6e8e:	2b01      	cmp	r3, #1
    6e90:	d10d      	bne.n	6eae <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    6e92:	2300      	movs	r3, #0
    6e94:	9303      	str	r3, [sp, #12]
            break;
    6e96:	e00a      	b.n	6eae <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    6e98:	9b02      	ldr	r3, [sp, #8]
    6e9a:	2b01      	cmp	r3, #1
    6e9c:	d002      	beq.n	6ea4 <Power_Ip_SMC_ModeCheckEntry+0x48>
    6e9e:	9b02      	ldr	r3, [sp, #8]
    6ea0:	2b10      	cmp	r3, #16
    6ea2:	d106      	bne.n	6eb2 <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    6ea4:	2300      	movs	r3, #0
    6ea6:	9303      	str	r3, [sp, #12]
            break;
    6ea8:	e003      	b.n	6eb2 <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    6eaa:	bf00      	nop
    6eac:	e002      	b.n	6eb4 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    6eae:	bf00      	nop
    6eb0:	e000      	b.n	6eb4 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    6eb2:	bf00      	nop
        }
    }

    return PowerModeCheck;
    6eb4:	9b03      	ldr	r3, [sp, #12]
}
    6eb6:	4618      	mov	r0, r3
    6eb8:	b004      	add	sp, #16
    6eba:	4770      	bx	lr
    6ebc:	4007e000 	.word	0x4007e000

00006ec0 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    6ec0:	b500      	push	{lr}
    6ec2:	b08b      	sub	sp, #44	; 0x2c
    6ec4:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    6ec6:	2300      	movs	r3, #0
    6ec8:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    6eca:	2300      	movs	r3, #0
    6ecc:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    6ece:	2300      	movs	r3, #0
    6ed0:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    6ed4:	9b01      	ldr	r3, [sp, #4]
    6ed6:	685b      	ldr	r3, [r3, #4]
    6ed8:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    6eda:	9b08      	ldr	r3, [sp, #32]
    6edc:	2b02      	cmp	r3, #2
    6ede:	d076      	beq.n	6fce <Power_Ip_SMC_ModeConfig+0x10e>
    6ee0:	9b08      	ldr	r3, [sp, #32]
    6ee2:	2b02      	cmp	r3, #2
    6ee4:	f200 80ab 	bhi.w	703e <Power_Ip_SMC_ModeConfig+0x17e>
    6ee8:	9b08      	ldr	r3, [sp, #32]
    6eea:	2b00      	cmp	r3, #0
    6eec:	d003      	beq.n	6ef6 <Power_Ip_SMC_ModeConfig+0x36>
    6eee:	9b08      	ldr	r3, [sp, #32]
    6ef0:	2b01      	cmp	r3, #1
    6ef2:	d034      	beq.n	6f5e <Power_Ip_SMC_ModeConfig+0x9e>
    6ef4:	e0a3      	b.n	703e <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    6ef6:	4b58      	ldr	r3, [pc, #352]	; (7058 <Power_Ip_SMC_ModeConfig+0x198>)
    6ef8:	68db      	ldr	r3, [r3, #12]
    6efa:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6efc:	9b06      	ldr	r3, [sp, #24]
    6efe:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    6f02:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    6f04:	4a54      	ldr	r2, [pc, #336]	; (7058 <Power_Ip_SMC_ModeConfig+0x198>)
    6f06:	9b06      	ldr	r3, [sp, #24]
    6f08:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    6f0a:	aa02      	add	r2, sp, #8
    6f0c:	a903      	add	r1, sp, #12
    6f0e:	a804      	add	r0, sp, #16
    6f10:	f24c 3350 	movw	r3, #50000	; 0xc350
    6f14:	f7ff fece 	bl	6cb4 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    6f18:	9a02      	ldr	r2, [sp, #8]
    6f1a:	a903      	add	r1, sp, #12
    6f1c:	ab04      	add	r3, sp, #16
    6f1e:	4618      	mov	r0, r3
    6f20:	f7ff fee2 	bl	6ce8 <Power_Ip_TimeoutExpired>
    6f24:	4603      	mov	r3, r0
    6f26:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    6f2a:	4b4b      	ldr	r3, [pc, #300]	; (7058 <Power_Ip_SMC_ModeConfig+0x198>)
    6f2c:	695b      	ldr	r3, [r3, #20]
    6f2e:	f003 0301 	and.w	r3, r3, #1
    6f32:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    6f34:	9b05      	ldr	r3, [sp, #20]
    6f36:	2b01      	cmp	r3, #1
    6f38:	d006      	beq.n	6f48 <Power_Ip_SMC_ModeConfig+0x88>
    6f3a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6f3e:	f083 0301 	eor.w	r3, r3, #1
    6f42:	b2db      	uxtb	r3, r3
    6f44:	2b00      	cmp	r3, #0
    6f46:	d1e7      	bne.n	6f18 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    6f48:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6f4c:	2b00      	cmp	r3, #0
    6f4e:	d079      	beq.n	7044 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6f50:	2301      	movs	r3, #1
    6f52:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6f54:	21ff      	movs	r1, #255	; 0xff
    6f56:	2000      	movs	r0, #0
    6f58:	f7ff fe90 	bl	6c7c <Power_Ip_ReportPowerErrors>
            }

            break;
    6f5c:	e072      	b.n	7044 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    6f5e:	4b3e      	ldr	r3, [pc, #248]	; (7058 <Power_Ip_SMC_ModeConfig+0x198>)
    6f60:	68db      	ldr	r3, [r3, #12]
    6f62:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6f64:	9b06      	ldr	r3, [sp, #24]
    6f66:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    6f6a:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    6f6c:	9b06      	ldr	r3, [sp, #24]
    6f6e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    6f72:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    6f74:	4a38      	ldr	r2, [pc, #224]	; (7058 <Power_Ip_SMC_ModeConfig+0x198>)
    6f76:	9b06      	ldr	r3, [sp, #24]
    6f78:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    6f7a:	aa02      	add	r2, sp, #8
    6f7c:	a903      	add	r1, sp, #12
    6f7e:	a804      	add	r0, sp, #16
    6f80:	f24c 3350 	movw	r3, #50000	; 0xc350
    6f84:	f7ff fe96 	bl	6cb4 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    6f88:	9a02      	ldr	r2, [sp, #8]
    6f8a:	a903      	add	r1, sp, #12
    6f8c:	ab04      	add	r3, sp, #16
    6f8e:	4618      	mov	r0, r3
    6f90:	f7ff feaa 	bl	6ce8 <Power_Ip_TimeoutExpired>
    6f94:	4603      	mov	r3, r0
    6f96:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    6f9a:	4b2f      	ldr	r3, [pc, #188]	; (7058 <Power_Ip_SMC_ModeConfig+0x198>)
    6f9c:	695b      	ldr	r3, [r3, #20]
    6f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    6fa2:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    6fa4:	9b05      	ldr	r3, [sp, #20]
    6fa6:	2b80      	cmp	r3, #128	; 0x80
    6fa8:	d006      	beq.n	6fb8 <Power_Ip_SMC_ModeConfig+0xf8>
    6faa:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6fae:	f083 0301 	eor.w	r3, r3, #1
    6fb2:	b2db      	uxtb	r3, r3
    6fb4:	2b00      	cmp	r3, #0
    6fb6:	d1e7      	bne.n	6f88 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    6fb8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6fbc:	2b00      	cmp	r3, #0
    6fbe:	d043      	beq.n	7048 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    6fc0:	2301      	movs	r3, #1
    6fc2:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6fc4:	21ff      	movs	r1, #255	; 0xff
    6fc6:	2000      	movs	r0, #0
    6fc8:	f7ff fe58 	bl	6c7c <Power_Ip_ReportPowerErrors>
            }

            break;
    6fcc:	e03c      	b.n	7048 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    6fce:	4b22      	ldr	r3, [pc, #136]	; (7058 <Power_Ip_SMC_ModeConfig+0x198>)
    6fd0:	68db      	ldr	r3, [r3, #12]
    6fd2:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6fd4:	9b06      	ldr	r3, [sp, #24]
    6fd6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    6fda:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    6fdc:	9b06      	ldr	r3, [sp, #24]
    6fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6fe2:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    6fe4:	4a1c      	ldr	r2, [pc, #112]	; (7058 <Power_Ip_SMC_ModeConfig+0x198>)
    6fe6:	9b06      	ldr	r3, [sp, #24]
    6fe8:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    6fea:	aa02      	add	r2, sp, #8
    6fec:	a903      	add	r1, sp, #12
    6fee:	a804      	add	r0, sp, #16
    6ff0:	f24c 3350 	movw	r3, #50000	; 0xc350
    6ff4:	f7ff fe5e 	bl	6cb4 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    6ff8:	9a02      	ldr	r2, [sp, #8]
    6ffa:	a903      	add	r1, sp, #12
    6ffc:	ab04      	add	r3, sp, #16
    6ffe:	4618      	mov	r0, r3
    7000:	f7ff fe72 	bl	6ce8 <Power_Ip_TimeoutExpired>
    7004:	4603      	mov	r3, r0
    7006:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    700a:	4b13      	ldr	r3, [pc, #76]	; (7058 <Power_Ip_SMC_ModeConfig+0x198>)
    700c:	695b      	ldr	r3, [r3, #20]
    700e:	f003 0304 	and.w	r3, r3, #4
    7012:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    7014:	9b05      	ldr	r3, [sp, #20]
    7016:	2b04      	cmp	r3, #4
    7018:	d006      	beq.n	7028 <Power_Ip_SMC_ModeConfig+0x168>
    701a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    701e:	f083 0301 	eor.w	r3, r3, #1
    7022:	b2db      	uxtb	r3, r3
    7024:	2b00      	cmp	r3, #0
    7026:	d1e7      	bne.n	6ff8 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    7028:	f89d 301f 	ldrb.w	r3, [sp, #31]
    702c:	2b00      	cmp	r3, #0
    702e:	d00d      	beq.n	704c <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    7030:	2301      	movs	r3, #1
    7032:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    7034:	21ff      	movs	r1, #255	; 0xff
    7036:	2000      	movs	r0, #0
    7038:	f7ff fe20 	bl	6c7c <Power_Ip_ReportPowerErrors>
            }

            break;
    703c:	e006      	b.n	704c <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    703e:	2301      	movs	r3, #1
    7040:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    7042:	e004      	b.n	704e <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    7044:	bf00      	nop
    7046:	e002      	b.n	704e <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    7048:	bf00      	nop
    704a:	e000      	b.n	704e <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    704c:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    704e:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    7050:	4618      	mov	r0, r3
    7052:	b00b      	add	sp, #44	; 0x2c
    7054:	f85d fb04 	ldr.w	pc, [sp], #4
    7058:	4007e000 	.word	0x4007e000

0000705c <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    705c:	b500      	push	{lr}
    705e:	b085      	sub	sp, #20
    7060:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    7062:	9b01      	ldr	r3, [sp, #4]
    7064:	9303      	str	r3, [sp, #12]
#endif /* (STD_ON == PORT_PRECOMPILE_SUPPORT) */

#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;

    CoreId = (uint8)Port_GetCoreID();
    7066:	2300      	movs	r3, #0
    7068:	f88d 300b 	strb.w	r3, [sp, #11]
#if (STD_OFF == PORT_PRECOMPILE_SUPPORT)
    if (NULL_PTR == ConfigPtr)
    706c:	9b01      	ldr	r3, [sp, #4]
    706e:	2b00      	cmp	r3, #0
    7070:	d106      	bne.n	7080 <Port_Init+0x24>
#else /*(STD_OFF == PORT_PRECOMPILE_SUPPORT) */
    if (NULL_PTR != ConfigPtr)
#endif /* (STD_OFF == PORT_PRECOMPILE_SUPPORT) */
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_INIT_FAILED);
    7072:	230c      	movs	r3, #12
    7074:	2200      	movs	r2, #0
    7076:	2100      	movs	r1, #0
    7078:	207c      	movs	r0, #124	; 0x7c
    707a:	f011 fe27 	bl	18ccc <Det_ReportError>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
        }
    }
}
    707e:	e014      	b.n	70aa <Port_Init+0x4e>
        if ((uint32)1 != pLocalConfigPtr->pau8Port_PartitionList[CoreId])
    7080:	9b03      	ldr	r3, [sp, #12]
    7082:	69da      	ldr	r2, [r3, #28]
    7084:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7088:	4413      	add	r3, r2
    708a:	781b      	ldrb	r3, [r3, #0]
    708c:	2b01      	cmp	r3, #1
    708e:	d006      	beq.n	709e <Port_Init+0x42>
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
    7090:	23f0      	movs	r3, #240	; 0xf0
    7092:	2200      	movs	r2, #0
    7094:	2100      	movs	r1, #0
    7096:	207c      	movs	r0, #124	; 0x7c
    7098:	f011 fe18 	bl	18ccc <Det_ReportError>
}
    709c:	e005      	b.n	70aa <Port_Init+0x4e>
            Port_Ipw_Init(pLocalConfigPtr);
    709e:	9803      	ldr	r0, [sp, #12]
    70a0:	f000 fc64 	bl	796c <Port_Ipw_Init>
            Port_pConfigPtr = pLocalConfigPtr;
    70a4:	4a03      	ldr	r2, [pc, #12]	; (70b4 <Port_Init+0x58>)
    70a6:	9b03      	ldr	r3, [sp, #12]
    70a8:	6013      	str	r3, [r2, #0]
}
    70aa:	bf00      	nop
    70ac:	b005      	add	sp, #20
    70ae:	f85d fb04 	ldr.w	pc, [sp], #4
    70b2:	bf00      	nop
    70b4:	1fff8d28 	.word	0x1fff8d28

000070b8 <Port_SetPinDirection>:
void Port_SetPinDirection
(
    Port_PinType Pin,
    Port_PinDirectionType Direction
)
{
    70b8:	b500      	push	{lr}
    70ba:	b085      	sub	sp, #20
    70bc:	9001      	str	r0, [sp, #4]
    70be:	9100      	str	r1, [sp, #0]
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    /* Variable used to store current error status */
    Std_ReturnType ErrStatus;

    /* Check if Port module is initialized */
    if (NULL_PTR == Port_pConfigPtr)
    70c0:	4b11      	ldr	r3, [pc, #68]	; (7108 <Port_SetPinDirection+0x50>)
    70c2:	681b      	ldr	r3, [r3, #0]
    70c4:	2b00      	cmp	r3, #0
    70c6:	d106      	bne.n	70d6 <Port_SetPinDirection+0x1e>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_UNINIT);
    70c8:	230f      	movs	r3, #15
    70ca:	2201      	movs	r2, #1
    70cc:	2100      	movs	r1, #0
    70ce:	207c      	movs	r0, #124	; 0x7c
    70d0:	f011 fdfc 	bl	18ccc <Det_ReportError>
        {
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_DIRECTION_UNCHANGEABLE);
        }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    }
}
    70d4:	e013      	b.n	70fe <Port_SetPinDirection+0x46>
        ErrStatus = Port_Ipw_SetPinDirection(Pin, Direction, Port_pConfigPtr);
    70d6:	4b0c      	ldr	r3, [pc, #48]	; (7108 <Port_SetPinDirection+0x50>)
    70d8:	681b      	ldr	r3, [r3, #0]
    70da:	461a      	mov	r2, r3
    70dc:	9900      	ldr	r1, [sp, #0]
    70de:	9801      	ldr	r0, [sp, #4]
    70e0:	f000 fcb2 	bl	7a48 <Port_Ipw_SetPinDirection>
    70e4:	4603      	mov	r3, r0
    70e6:	f88d 300f 	strb.w	r3, [sp, #15]
        if ((Std_ReturnType)E_NOT_OK == ErrStatus)
    70ea:	f89d 300f 	ldrb.w	r3, [sp, #15]
    70ee:	2b01      	cmp	r3, #1
    70f0:	d105      	bne.n	70fe <Port_SetPinDirection+0x46>
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_DIRECTION_UNCHANGEABLE);
    70f2:	230b      	movs	r3, #11
    70f4:	2201      	movs	r2, #1
    70f6:	2100      	movs	r1, #0
    70f8:	207c      	movs	r0, #124	; 0x7c
    70fa:	f011 fde7 	bl	18ccc <Det_ReportError>
}
    70fe:	bf00      	nop
    7100:	b005      	add	sp, #20
    7102:	f85d fb04 	ldr.w	pc, [sp], #4
    7106:	bf00      	nop
    7108:	1fff8d28 	.word	0x1fff8d28

0000710c <Port_SetPinMode>:
void Port_SetPinMode
(
    Port_PinType Pin,
    Port_PinModeType Mode
)
{
    710c:	b500      	push	{lr}
    710e:	b085      	sub	sp, #20
    7110:	9001      	str	r0, [sp, #4]
    7112:	460b      	mov	r3, r1
    7114:	f88d 3003 	strb.w	r3, [sp, #3]
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 u8PinModeError = (uint8)0U;
    7118:	2300      	movs	r3, #0
    711a:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Check if port is initialized */
    if (NULL_PTR == Port_pConfigPtr)
    711e:	4b12      	ldr	r3, [pc, #72]	; (7168 <Port_SetPinMode+0x5c>)
    7120:	681b      	ldr	r3, [r3, #0]
    7122:	2b00      	cmp	r3, #0
    7124:	d106      	bne.n	7134 <Port_SetPinMode+0x28>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_UNINIT);
    7126:	230f      	movs	r3, #15
    7128:	2204      	movs	r2, #4
    712a:	2100      	movs	r1, #0
    712c:	207c      	movs	r0, #124	; 0x7c
    712e:	f011 fdcd 	bl	18ccc <Det_ReportError>
        {
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_INVALID_MODE);
        }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    }
}
    7132:	e014      	b.n	715e <Port_SetPinMode+0x52>
        u8PinModeError = (uint8)Port_Ipw_SetPinMode(Pin, Mode, Port_pConfigPtr);
    7134:	4b0c      	ldr	r3, [pc, #48]	; (7168 <Port_SetPinMode+0x5c>)
    7136:	681a      	ldr	r2, [r3, #0]
    7138:	f89d 3003 	ldrb.w	r3, [sp, #3]
    713c:	4619      	mov	r1, r3
    713e:	9801      	ldr	r0, [sp, #4]
    7140:	f000 fd7a 	bl	7c38 <Port_Ipw_SetPinMode>
    7144:	4603      	mov	r3, r0
    7146:	f88d 300f 	strb.w	r3, [sp, #15]
        if (PORT_E_PARAM_INVALID_MODE == u8PinModeError)
    714a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    714e:	2b0d      	cmp	r3, #13
    7150:	d105      	bne.n	715e <Port_SetPinMode+0x52>
            (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_INVALID_MODE);
    7152:	230d      	movs	r3, #13
    7154:	2204      	movs	r2, #4
    7156:	2100      	movs	r1, #0
    7158:	207c      	movs	r0, #124	; 0x7c
    715a:	f011 fdb7 	bl	18ccc <Det_ReportError>
}
    715e:	bf00      	nop
    7160:	b005      	add	sp, #20
    7162:	f85d fb04 	ldr.w	pc, [sp], #4
    7166:	bf00      	nop
    7168:	1fff8d28 	.word	0x1fff8d28

0000716c <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    716c:	b500      	push	{lr}
    716e:	b083      	sub	sp, #12
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;

    CoreId = (uint8)Port_GetCoreID();
    7170:	2300      	movs	r3, #0
    7172:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Check if Port module is initialized */
    if (NULL_PTR == Port_pConfigPtr)
    7176:	4b12      	ldr	r3, [pc, #72]	; (71c0 <Port_RefreshPortDirection+0x54>)
    7178:	681b      	ldr	r3, [r3, #0]
    717a:	2b00      	cmp	r3, #0
    717c:	d106      	bne.n	718c <Port_RefreshPortDirection+0x20>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_UNINIT);
    717e:	230f      	movs	r3, #15
    7180:	2202      	movs	r2, #2
    7182:	2100      	movs	r1, #0
    7184:	207c      	movs	r0, #124	; 0x7c
    7186:	f011 fda1 	bl	18ccc <Det_ReportError>
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    }
}
    718a:	e014      	b.n	71b6 <Port_RefreshPortDirection+0x4a>
    else if ((uint32)1 != Port_pConfigPtr->pau8Port_PartitionList[CoreId])
    718c:	4b0c      	ldr	r3, [pc, #48]	; (71c0 <Port_RefreshPortDirection+0x54>)
    718e:	681b      	ldr	r3, [r3, #0]
    7190:	69da      	ldr	r2, [r3, #28]
    7192:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7196:	4413      	add	r3, r2
    7198:	781b      	ldrb	r3, [r3, #0]
    719a:	2b01      	cmp	r3, #1
    719c:	d006      	beq.n	71ac <Port_RefreshPortDirection+0x40>
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    719e:	23f0      	movs	r3, #240	; 0xf0
    71a0:	2202      	movs	r2, #2
    71a2:	2100      	movs	r1, #0
    71a4:	207c      	movs	r0, #124	; 0x7c
    71a6:	f011 fd91 	bl	18ccc <Det_ReportError>
}
    71aa:	e004      	b.n	71b6 <Port_RefreshPortDirection+0x4a>
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    71ac:	4b04      	ldr	r3, [pc, #16]	; (71c0 <Port_RefreshPortDirection+0x54>)
    71ae:	681b      	ldr	r3, [r3, #0]
    71b0:	4618      	mov	r0, r3
    71b2:	f000 febf 	bl	7f34 <Port_Ipw_RefreshPortDirection>
}
    71b6:	bf00      	nop
    71b8:	b003      	add	sp, #12
    71ba:	f85d fb04 	ldr.w	pc, [sp], #4
    71be:	bf00      	nop
    71c0:	1fff8d28 	.word	0x1fff8d28

000071c4 <Port_GetVersionInfo>:
*/
void Port_GetVersionInfo
(
    Std_VersionInfoType * versioninfo
)
{
    71c4:	b500      	push	{lr}
    71c6:	b083      	sub	sp, #12
    71c8:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    if (NULL_PTR == versioninfo)
    71ca:	9b01      	ldr	r3, [sp, #4]
    71cc:	2b00      	cmp	r3, #0
    71ce:	d106      	bne.n	71de <Port_GetVersionInfo+0x1a>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_GETVERSIONINFO_ID, (uint8)PORT_E_PARAM_POINTER);
    71d0:	2310      	movs	r3, #16
    71d2:	2203      	movs	r2, #3
    71d4:	2100      	movs	r1, #0
    71d6:	207c      	movs	r0, #124	; 0x7c
    71d8:	f011 fd78 	bl	18ccc <Det_ReportError>
        (versioninfo)->moduleID         = (uint16)PORT_MODULE_ID;
        (versioninfo)->sw_major_version = (uint8)PORT_SW_MAJOR_VERSION;
        (versioninfo)->sw_minor_version = (uint8)PORT_SW_MINOR_VERSION;
        (versioninfo)->sw_patch_version = (uint8)PORT_SW_PATCH_VERSION;
    }
}
    71dc:	e00e      	b.n	71fc <Port_GetVersionInfo+0x38>
        (versioninfo)->vendorID         = (uint16)PORT_VENDOR_ID;
    71de:	9b01      	ldr	r3, [sp, #4]
    71e0:	222b      	movs	r2, #43	; 0x2b
    71e2:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID         = (uint16)PORT_MODULE_ID;
    71e4:	9b01      	ldr	r3, [sp, #4]
    71e6:	227c      	movs	r2, #124	; 0x7c
    71e8:	805a      	strh	r2, [r3, #2]
        (versioninfo)->sw_major_version = (uint8)PORT_SW_MAJOR_VERSION;
    71ea:	9b01      	ldr	r3, [sp, #4]
    71ec:	2202      	movs	r2, #2
    71ee:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)PORT_SW_MINOR_VERSION;
    71f0:	9b01      	ldr	r3, [sp, #4]
    71f2:	2200      	movs	r2, #0
    71f4:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)PORT_SW_PATCH_VERSION;
    71f6:	9b01      	ldr	r3, [sp, #4]
    71f8:	2200      	movs	r2, #0
    71fa:	719a      	strb	r2, [r3, #6]
}
    71fc:	bf00      	nop
    71fe:	b003      	add	sp, #12
    7200:	f85d fb04 	ldr.w	pc, [sp], #4

00007204 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    7204:	b086      	sub	sp, #24
    7206:	9003      	str	r0, [sp, #12]
    7208:	9102      	str	r1, [sp, #8]
    720a:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    720c:	23ff      	movs	r3, #255	; 0xff
    720e:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    7210:	9b03      	ldr	r3, [sp, #12]
    7212:	4a39      	ldr	r2, [pc, #228]	; (72f8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    7214:	4293      	cmp	r3, r2
    7216:	d151      	bne.n	72bc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    7218:	9b02      	ldr	r3, [sp, #8]
    721a:	2b10      	cmp	r3, #16
    721c:	d867      	bhi.n	72ee <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    721e:	a201      	add	r2, pc, #4	; (adr r2, 7224 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    7220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7224:	00007269 	.word	0x00007269
    7228:	00007277 	.word	0x00007277
    722c:	000072ef 	.word	0x000072ef
    7230:	000072ef 	.word	0x000072ef
    7234:	000072ef 	.word	0x000072ef
    7238:	000072ef 	.word	0x000072ef
    723c:	000072ef 	.word	0x000072ef
    7240:	000072ef 	.word	0x000072ef
    7244:	000072ef 	.word	0x000072ef
    7248:	000072ef 	.word	0x000072ef
    724c:	000072ef 	.word	0x000072ef
    7250:	000072ef 	.word	0x000072ef
    7254:	000072ef 	.word	0x000072ef
    7258:	00007285 	.word	0x00007285
    725c:	00007293 	.word	0x00007293
    7260:	000072a1 	.word	0x000072a1
    7264:	000072af 	.word	0x000072af
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    7268:	2301      	movs	r3, #1
    726a:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    726c:	9a05      	ldr	r2, [sp, #20]
    726e:	9b01      	ldr	r3, [sp, #4]
    7270:	4313      	orrs	r3, r2
    7272:	9305      	str	r3, [sp, #20]
                break;
    7274:	e03c      	b.n	72f0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    7276:	2302      	movs	r3, #2
    7278:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    727a:	9a05      	ldr	r2, [sp, #20]
    727c:	9b01      	ldr	r3, [sp, #4]
    727e:	4313      	orrs	r3, r2
    7280:	9305      	str	r3, [sp, #20]
                break;
    7282:	e035      	b.n	72f0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    7284:	2304      	movs	r3, #4
    7286:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    7288:	9a05      	ldr	r2, [sp, #20]
    728a:	9b01      	ldr	r3, [sp, #4]
    728c:	4313      	orrs	r3, r2
    728e:	9305      	str	r3, [sp, #20]
                break;
    7290:	e02e      	b.n	72f0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    7292:	2308      	movs	r3, #8
    7294:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    7296:	9a05      	ldr	r2, [sp, #20]
    7298:	9b01      	ldr	r3, [sp, #4]
    729a:	4313      	orrs	r3, r2
    729c:	9305      	str	r3, [sp, #20]
                break;
    729e:	e027      	b.n	72f0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    72a0:	230e      	movs	r3, #14
    72a2:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    72a4:	9a05      	ldr	r2, [sp, #20]
    72a6:	9b01      	ldr	r3, [sp, #4]
    72a8:	4013      	ands	r3, r2
    72aa:	9305      	str	r3, [sp, #20]
                break;
    72ac:	e020      	b.n	72f0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    72ae:	230d      	movs	r3, #13
    72b0:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    72b2:	9a05      	ldr	r2, [sp, #20]
    72b4:	9b01      	ldr	r3, [sp, #4]
    72b6:	4013      	ands	r3, r2
    72b8:	9305      	str	r3, [sp, #20]
                break;
    72ba:	e019      	b.n	72f0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    72bc:	9b03      	ldr	r3, [sp, #12]
    72be:	4a0f      	ldr	r2, [pc, #60]	; (72fc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    72c0:	4293      	cmp	r3, r2
    72c2:	d115      	bne.n	72f0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    72c4:	9b02      	ldr	r3, [sp, #8]
    72c6:	2b00      	cmp	r3, #0
    72c8:	d003      	beq.n	72d2 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    72ca:	9b02      	ldr	r3, [sp, #8]
    72cc:	2b01      	cmp	r3, #1
    72ce:	d007      	beq.n	72e0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    72d0:	e00e      	b.n	72f0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    72d2:	230b      	movs	r3, #11
    72d4:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    72d6:	9a05      	ldr	r2, [sp, #20]
    72d8:	9b01      	ldr	r3, [sp, #4]
    72da:	4013      	ands	r3, r2
    72dc:	9305      	str	r3, [sp, #20]
                break;
    72de:	e007      	b.n	72f0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    72e0:	2307      	movs	r3, #7
    72e2:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    72e4:	9a05      	ldr	r2, [sp, #20]
    72e6:	9b01      	ldr	r3, [sp, #4]
    72e8:	4013      	ands	r3, r2
    72ea:	9305      	str	r3, [sp, #20]
                break;
    72ec:	e000      	b.n	72f0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    72ee:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    72f0:	9b05      	ldr	r3, [sp, #20]
}
    72f2:	4618      	mov	r0, r3
    72f4:	b006      	add	sp, #24
    72f6:	4770      	bx	lr
    72f8:	4004a000 	.word	0x4004a000
    72fc:	4004b000 	.word	0x4004b000

00007300 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    7300:	b500      	push	{lr}
    7302:	b089      	sub	sp, #36	; 0x24
    7304:	9003      	str	r0, [sp, #12]
    7306:	9102      	str	r1, [sp, #8]
    7308:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    730a:	9b01      	ldr	r3, [sp, #4]
    730c:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    730e:	9b01      	ldr	r3, [sp, #4]
    7310:	2b08      	cmp	r3, #8
    7312:	d121      	bne.n	7358 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    7314:	4b13      	ldr	r3, [pc, #76]	; (7364 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    7316:	685b      	ldr	r3, [r3, #4]
    7318:	f003 030f 	and.w	r3, r3, #15
    731c:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    731e:	9a06      	ldr	r2, [sp, #24]
    7320:	9902      	ldr	r1, [sp, #8]
    7322:	9803      	ldr	r0, [sp, #12]
    7324:	f7ff ff6e 	bl	7204 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    7328:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    732a:	9b05      	ldr	r3, [sp, #20]
    732c:	2bff      	cmp	r3, #255	; 0xff
    732e:	d011      	beq.n	7354 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    7330:	f00e fbd0 	bl	15ad4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    7334:	4b0b      	ldr	r3, [pc, #44]	; (7364 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    7336:	685b      	ldr	r3, [r3, #4]
    7338:	4a0a      	ldr	r2, [pc, #40]	; (7364 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    733a:	f023 030f 	bic.w	r3, r3, #15
    733e:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    7340:	4b08      	ldr	r3, [pc, #32]	; (7364 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    7342:	685a      	ldr	r2, [r3, #4]
    7344:	9b05      	ldr	r3, [sp, #20]
    7346:	f003 030f 	and.w	r3, r3, #15
    734a:	4906      	ldr	r1, [pc, #24]	; (7364 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    734c:	4313      	orrs	r3, r2
    734e:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    7350:	f00e fbec 	bl	15b2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    7354:	2300      	movs	r3, #0
    7356:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    7358:	9b07      	ldr	r3, [sp, #28]
}
    735a:	4618      	mov	r0, r3
    735c:	b009      	add	sp, #36	; 0x24
    735e:	f85d fb04 	ldr.w	pc, [sp], #4
    7362:	bf00      	nop
    7364:	40048000 	.word	0x40048000

00007368 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    7368:	b500      	push	{lr}
    736a:	b087      	sub	sp, #28
    736c:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    736e:	2300      	movs	r3, #0
    7370:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    7372:	2300      	movs	r3, #0
    7374:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    7376:	2300      	movs	r3, #0
    7378:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    737a:	9b01      	ldr	r3, [sp, #4]
    737c:	68db      	ldr	r3, [r3, #12]
    737e:	2b02      	cmp	r3, #2
    7380:	d00a      	beq.n	7398 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    7382:	9b05      	ldr	r3, [sp, #20]
    7384:	f043 0302 	orr.w	r3, r3, #2
    7388:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    738a:	9b01      	ldr	r3, [sp, #4]
    738c:	68db      	ldr	r3, [r3, #12]
    738e:	f003 0301 	and.w	r3, r3, #1
    7392:	9a05      	ldr	r2, [sp, #20]
    7394:	4313      	orrs	r3, r2
    7396:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    7398:	9b01      	ldr	r3, [sp, #4]
    739a:	699b      	ldr	r3, [r3, #24]
    739c:	019b      	lsls	r3, r3, #6
    739e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    73a2:	9a05      	ldr	r2, [sp, #20]
    73a4:	4313      	orrs	r3, r2
    73a6:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    73a8:	9b01      	ldr	r3, [sp, #4]
    73aa:	6a1b      	ldr	r3, [r3, #32]
    73ac:	03db      	lsls	r3, r3, #15
    73ae:	b29b      	uxth	r3, r3
    73b0:	9a05      	ldr	r2, [sp, #20]
    73b2:	4313      	orrs	r3, r2
    73b4:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    73b6:	9b01      	ldr	r3, [sp, #4]
    73b8:	7f1b      	ldrb	r3, [r3, #28]
    73ba:	2b00      	cmp	r3, #0
    73bc:	d001      	beq.n	73c2 <Port_Ci_Port_Ip_PinInit+0x5a>
    73be:	2310      	movs	r3, #16
    73c0:	e000      	b.n	73c4 <Port_Ci_Port_Ip_PinInit+0x5c>
    73c2:	2300      	movs	r3, #0
    73c4:	9a05      	ldr	r2, [sp, #20]
    73c6:	4313      	orrs	r3, r2
    73c8:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    73ca:	9b01      	ldr	r3, [sp, #4]
    73cc:	691b      	ldr	r3, [r3, #16]
    73ce:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    73d0:	9b01      	ldr	r3, [sp, #4]
    73d2:	6818      	ldr	r0, [r3, #0]
    73d4:	9b01      	ldr	r3, [sp, #4]
    73d6:	689b      	ldr	r3, [r3, #8]
    73d8:	9a04      	ldr	r2, [sp, #16]
    73da:	4619      	mov	r1, r3
    73dc:	f7ff ff90 	bl	7300 <Port_Ci_Port_Ip_ConfigureInterleave>
    73e0:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    73e2:	9b03      	ldr	r3, [sp, #12]
    73e4:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    73e6:	9b04      	ldr	r3, [sp, #16]
    73e8:	021b      	lsls	r3, r3, #8
    73ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    73ee:	9a05      	ldr	r2, [sp, #20]
    73f0:	4313      	orrs	r3, r2
    73f2:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    73f4:	f00e f9d4 	bl	157a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    73f8:	9b01      	ldr	r3, [sp, #4]
    73fa:	681b      	ldr	r3, [r3, #0]
    73fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    7400:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    7402:	9b01      	ldr	r3, [sp, #4]
    7404:	689b      	ldr	r3, [r3, #8]
    7406:	2201      	movs	r2, #1
    7408:	fa02 f303 	lsl.w	r3, r2, r3
    740c:	43db      	mvns	r3, r3
    740e:	9a02      	ldr	r2, [sp, #8]
    7410:	4013      	ands	r3, r2
    7412:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    7414:	9b01      	ldr	r3, [sp, #4]
    7416:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    741a:	2b00      	cmp	r3, #0
    741c:	d001      	beq.n	7422 <Port_Ci_Port_Ip_PinInit+0xba>
    741e:	2201      	movs	r2, #1
    7420:	e000      	b.n	7424 <Port_Ci_Port_Ip_PinInit+0xbc>
    7422:	2200      	movs	r2, #0
    7424:	9b01      	ldr	r3, [sp, #4]
    7426:	689b      	ldr	r3, [r3, #8]
    7428:	fa02 f303 	lsl.w	r3, r2, r3
    742c:	9a02      	ldr	r2, [sp, #8]
    742e:	4313      	orrs	r3, r2
    7430:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    7432:	9b01      	ldr	r3, [sp, #4]
    7434:	681b      	ldr	r3, [r3, #0]
    7436:	9a02      	ldr	r2, [sp, #8]
    7438:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    743c:	f00e f9dc 	bl	157f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    7440:	9b04      	ldr	r3, [sp, #16]
    7442:	2b01      	cmp	r3, #1
    7444:	d16d      	bne.n	7522 <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    7446:	9b01      	ldr	r3, [sp, #4]
    7448:	695b      	ldr	r3, [r3, #20]
    744a:	2b02      	cmp	r3, #2
    744c:	d138      	bne.n	74c0 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    744e:	9b01      	ldr	r3, [sp, #4]
    7450:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    7454:	2b01      	cmp	r3, #1
    7456:	d10f      	bne.n	7478 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    7458:	f00e f9f4 	bl	15844 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    745c:	9b01      	ldr	r3, [sp, #4]
    745e:	685b      	ldr	r3, [r3, #4]
    7460:	6859      	ldr	r1, [r3, #4]
    7462:	9b01      	ldr	r3, [sp, #4]
    7464:	689b      	ldr	r3, [r3, #8]
    7466:	2201      	movs	r2, #1
    7468:	409a      	lsls	r2, r3
    746a:	9b01      	ldr	r3, [sp, #4]
    746c:	685b      	ldr	r3, [r3, #4]
    746e:	430a      	orrs	r2, r1
    7470:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    7472:	f00e fa13 	bl	1589c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    7476:	e013      	b.n	74a0 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    7478:	9b01      	ldr	r3, [sp, #4]
    747a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    747e:	2b00      	cmp	r3, #0
    7480:	d10e      	bne.n	74a0 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    7482:	f00e fa31 	bl	158e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    7486:	9b01      	ldr	r3, [sp, #4]
    7488:	685b      	ldr	r3, [r3, #4]
    748a:	6899      	ldr	r1, [r3, #8]
    748c:	9b01      	ldr	r3, [sp, #4]
    748e:	689b      	ldr	r3, [r3, #8]
    7490:	2201      	movs	r2, #1
    7492:	409a      	lsls	r2, r3
    7494:	9b01      	ldr	r3, [sp, #4]
    7496:	685b      	ldr	r3, [r3, #4]
    7498:	430a      	orrs	r2, r1
    749a:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    749c:	f00e fa50 	bl	15940 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    74a0:	f00e fa74 	bl	1598c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    74a4:	9b01      	ldr	r3, [sp, #4]
    74a6:	685b      	ldr	r3, [r3, #4]
    74a8:	6959      	ldr	r1, [r3, #20]
    74aa:	9b01      	ldr	r3, [sp, #4]
    74ac:	689b      	ldr	r3, [r3, #8]
    74ae:	2201      	movs	r2, #1
    74b0:	409a      	lsls	r2, r3
    74b2:	9b01      	ldr	r3, [sp, #4]
    74b4:	685b      	ldr	r3, [r3, #4]
    74b6:	430a      	orrs	r2, r1
    74b8:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    74ba:	f00e fa93 	bl	159e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    74be:	e030      	b.n	7522 <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    74c0:	f00e fa64 	bl	1598c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    74c4:	9b01      	ldr	r3, [sp, #4]
    74c6:	685b      	ldr	r3, [r3, #4]
    74c8:	6959      	ldr	r1, [r3, #20]
    74ca:	9b01      	ldr	r3, [sp, #4]
    74cc:	689b      	ldr	r3, [r3, #8]
    74ce:	2201      	movs	r2, #1
    74d0:	fa02 f303 	lsl.w	r3, r2, r3
    74d4:	43da      	mvns	r2, r3
    74d6:	9b01      	ldr	r3, [sp, #4]
    74d8:	685b      	ldr	r3, [r3, #4]
    74da:	400a      	ands	r2, r1
    74dc:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    74de:	f00e fa81 	bl	159e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    74e2:	f00e faa5 	bl	15a30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    74e6:	9b01      	ldr	r3, [sp, #4]
    74e8:	685b      	ldr	r3, [r3, #4]
    74ea:	6999      	ldr	r1, [r3, #24]
    74ec:	9b01      	ldr	r3, [sp, #4]
    74ee:	689b      	ldr	r3, [r3, #8]
    74f0:	2201      	movs	r2, #1
    74f2:	fa02 f303 	lsl.w	r3, r2, r3
    74f6:	43da      	mvns	r2, r3
    74f8:	9b01      	ldr	r3, [sp, #4]
    74fa:	685b      	ldr	r3, [r3, #4]
    74fc:	400a      	ands	r2, r1
    74fe:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    7500:	9b01      	ldr	r3, [sp, #4]
    7502:	695b      	ldr	r3, [r3, #20]
    7504:	2b03      	cmp	r3, #3
    7506:	d10a      	bne.n	751e <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    7508:	9b01      	ldr	r3, [sp, #4]
    750a:	685b      	ldr	r3, [r3, #4]
    750c:	6999      	ldr	r1, [r3, #24]
    750e:	9b01      	ldr	r3, [sp, #4]
    7510:	689b      	ldr	r3, [r3, #8]
    7512:	2201      	movs	r2, #1
    7514:	409a      	lsls	r2, r3
    7516:	9b01      	ldr	r3, [sp, #4]
    7518:	685b      	ldr	r3, [r3, #4]
    751a:	430a      	orrs	r2, r1
    751c:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    751e:	f00e fab3 	bl	15a88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    7522:	9b01      	ldr	r3, [sp, #4]
    7524:	681b      	ldr	r3, [r3, #0]
    7526:	9a01      	ldr	r2, [sp, #4]
    7528:	6892      	ldr	r2, [r2, #8]
    752a:	9905      	ldr	r1, [sp, #20]
    752c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    7530:	bf00      	nop
    7532:	b007      	add	sp, #28
    7534:	f85d fb04 	ldr.w	pc, [sp], #4

00007538 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    7538:	b500      	push	{lr}
    753a:	b085      	sub	sp, #20
    753c:	9001      	str	r0, [sp, #4]
    753e:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    7540:	2300      	movs	r3, #0
    7542:	9303      	str	r3, [sp, #12]
    7544:	e00d      	b.n	7562 <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    7546:	9a03      	ldr	r2, [sp, #12]
    7548:	4613      	mov	r3, r2
    754a:	009b      	lsls	r3, r3, #2
    754c:	4413      	add	r3, r2
    754e:	00db      	lsls	r3, r3, #3
    7550:	461a      	mov	r2, r3
    7552:	9b00      	ldr	r3, [sp, #0]
    7554:	4413      	add	r3, r2
    7556:	4618      	mov	r0, r3
    7558:	f7ff ff06 	bl	7368 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    755c:	9b03      	ldr	r3, [sp, #12]
    755e:	3301      	adds	r3, #1
    7560:	9303      	str	r3, [sp, #12]
    7562:	9a03      	ldr	r2, [sp, #12]
    7564:	9b01      	ldr	r3, [sp, #4]
    7566:	429a      	cmp	r2, r3
    7568:	d3ed      	bcc.n	7546 <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    756a:	2300      	movs	r3, #0
}
    756c:	4618      	mov	r0, r3
    756e:	b005      	add	sp, #20
    7570:	f85d fb04 	ldr.w	pc, [sp], #4

00007574 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    7574:	b500      	push	{lr}
    7576:	b087      	sub	sp, #28
    7578:	9003      	str	r0, [sp, #12]
    757a:	9102      	str	r1, [sp, #8]
    757c:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    757e:	9a01      	ldr	r2, [sp, #4]
    7580:	9902      	ldr	r1, [sp, #8]
    7582:	9803      	ldr	r0, [sp, #12]
    7584:	f7ff febc 	bl	7300 <Port_Ci_Port_Ip_ConfigureInterleave>
    7588:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    758a:	f00e faf5 	bl	15b78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    758e:	9b03      	ldr	r3, [sp, #12]
    7590:	9a02      	ldr	r2, [sp, #8]
    7592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7596:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    7598:	9b04      	ldr	r3, [sp, #16]
    759a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    759e:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    75a0:	9b05      	ldr	r3, [sp, #20]
    75a2:	021b      	lsls	r3, r3, #8
    75a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    75a8:	9a04      	ldr	r2, [sp, #16]
    75aa:	4313      	orrs	r3, r2
    75ac:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    75ae:	9b03      	ldr	r3, [sp, #12]
    75b0:	9a02      	ldr	r2, [sp, #8]
    75b2:	9904      	ldr	r1, [sp, #16]
    75b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    75b8:	f00e fb0a 	bl	15bd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    75bc:	bf00      	nop
    75be:	b007      	add	sp, #28
    75c0:	f85d fb04 	ldr.w	pc, [sp], #4

000075c4 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    75c4:	b500      	push	{lr}
    75c6:	b083      	sub	sp, #12
    75c8:	9001      	str	r0, [sp, #4]
    75ca:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    75cc:	f00e fb26 	bl	15c1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    75d0:	9b01      	ldr	r3, [sp, #4]
    75d2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    75d6:	2101      	movs	r1, #1
    75d8:	9b00      	ldr	r3, [sp, #0]
    75da:	fa01 f303 	lsl.w	r3, r1, r3
    75de:	431a      	orrs	r2, r3
    75e0:	9b01      	ldr	r3, [sp, #4]
    75e2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    75e6:	f00e fb45 	bl	15c74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    75ea:	bf00      	nop
    75ec:	b003      	add	sp, #12
    75ee:	f85d fb04 	ldr.w	pc, [sp], #4

000075f2 <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    75f2:	b500      	push	{lr}
    75f4:	b083      	sub	sp, #12
    75f6:	9001      	str	r0, [sp, #4]
    75f8:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    75fa:	f00e fb61 	bl	15cc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    75fe:	9b01      	ldr	r3, [sp, #4]
    7600:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    7604:	2101      	movs	r1, #1
    7606:	9b00      	ldr	r3, [sp, #0]
    7608:	fa01 f303 	lsl.w	r3, r1, r3
    760c:	43db      	mvns	r3, r3
    760e:	401a      	ands	r2, r3
    7610:	9b01      	ldr	r3, [sp, #4]
    7612:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    7616:	f00e fb7f 	bl	15d18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    761a:	bf00      	nop
    761c:	b003      	add	sp, #12
    761e:	f85d fb04 	ldr.w	pc, [sp], #4

00007622 <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    7622:	b082      	sub	sp, #8
    7624:	9001      	str	r0, [sp, #4]
    7626:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    7628:	9b00      	ldr	r3, [sp, #0]
    762a:	785b      	ldrb	r3, [r3, #1]
    762c:	f003 0201 	and.w	r2, r3, #1
    7630:	9b01      	ldr	r3, [sp, #4]
    7632:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    7636:	9b00      	ldr	r3, [sp, #0]
    7638:	789b      	ldrb	r3, [r3, #2]
    763a:	f003 021f 	and.w	r2, r3, #31
    763e:	9b01      	ldr	r3, [sp, #4]
    7640:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    7644:	bf00      	nop
    7646:	b002      	add	sp, #8
    7648:	4770      	bx	lr

0000764a <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    764a:	b086      	sub	sp, #24
    764c:	9003      	str	r0, [sp, #12]
    764e:	9301      	str	r3, [sp, #4]
    7650:	460b      	mov	r3, r1
    7652:	f8ad 300a 	strh.w	r3, [sp, #10]
    7656:	4613      	mov	r3, r2
    7658:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    765c:	2300      	movs	r3, #0
    765e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    7662:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7666:	f043 0301 	orr.w	r3, r3, #1
    766a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    766e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7672:	f043 0302 	orr.w	r3, r3, #2
    7676:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    767a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    767e:	f043 0310 	orr.w	r3, r3, #16
    7682:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    7686:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    768a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    768e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    7692:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7696:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    769a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    769e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    76a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    76a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    76aa:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    76ae:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    76b2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    76b6:	4013      	ands	r3, r2
    76b8:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    76bc:	9b01      	ldr	r3, [sp, #4]
    76be:	2b00      	cmp	r3, #0
    76c0:	d003      	beq.n	76ca <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    76c2:	9b01      	ldr	r3, [sp, #4]
    76c4:	2b01      	cmp	r3, #1
    76c6:	d00a      	beq.n	76de <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    76c8:	e013      	b.n	76f2 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    76ca:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    76ce:	041a      	lsls	r2, r3, #16
    76d0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    76d4:	431a      	orrs	r2, r3
    76d6:	9b03      	ldr	r3, [sp, #12]
    76d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    76dc:	e009      	b.n	76f2 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    76de:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    76e2:	041a      	lsls	r2, r3, #16
    76e4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    76e8:	431a      	orrs	r2, r3
    76ea:	9b03      	ldr	r3, [sp, #12]
    76ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    76f0:	bf00      	nop
    }
}
    76f2:	bf00      	nop
    76f4:	b006      	add	sp, #24
    76f6:	4770      	bx	lr

000076f8 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    76f8:	b500      	push	{lr}
    76fa:	b087      	sub	sp, #28
    76fc:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    76fe:	9b01      	ldr	r3, [sp, #4]
    7700:	885b      	ldrh	r3, [r3, #2]
    7702:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    7706:	9b01      	ldr	r3, [sp, #4]
    7708:	689b      	ldr	r3, [r3, #8]
    770a:	7a1b      	ldrb	r3, [r3, #8]
    770c:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    7710:	9b01      	ldr	r3, [sp, #4]
    7712:	689b      	ldr	r3, [r3, #8]
    7714:	681b      	ldr	r3, [r3, #0]
    7716:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    7718:	9b01      	ldr	r3, [sp, #4]
    771a:	689b      	ldr	r3, [r3, #8]
    771c:	685b      	ldr	r3, [r3, #4]
    771e:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    7720:	2300      	movs	r3, #0
    7722:	f8ad 3016 	strh.w	r3, [sp, #22]
    7726:	e111      	b.n	794c <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    7728:	9b02      	ldr	r3, [sp, #8]
    772a:	2b02      	cmp	r3, #2
    772c:	d169      	bne.n	7802 <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    772e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7732:	2b01      	cmp	r3, #1
    7734:	d11a      	bne.n	776c <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    7736:	9b01      	ldr	r3, [sp, #4]
    7738:	685a      	ldr	r2, [r3, #4]
    773a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    773e:	005b      	lsls	r3, r3, #1
    7740:	4413      	add	r3, r2
    7742:	881b      	ldrh	r3, [r3, #0]
    7744:	f003 021f 	and.w	r2, r3, #31
    7748:	9b01      	ldr	r3, [sp, #4]
    774a:	6859      	ldr	r1, [r3, #4]
    774c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7750:	005b      	lsls	r3, r3, #1
    7752:	440b      	add	r3, r1
    7754:	881b      	ldrh	r3, [r3, #0]
    7756:	095b      	lsrs	r3, r3, #5
    7758:	b29b      	uxth	r3, r3
    775a:	4619      	mov	r1, r3
    775c:	4b81      	ldr	r3, [pc, #516]	; (7964 <Port_Ipw_Init_UnusedPins+0x26c>)
    775e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    7762:	2101      	movs	r1, #1
    7764:	fa01 f202 	lsl.w	r2, r1, r2
    7768:	605a      	str	r2, [r3, #4]
    776a:	e01d      	b.n	77a8 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    776c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7770:	2b00      	cmp	r3, #0
    7772:	d119      	bne.n	77a8 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    7774:	9b01      	ldr	r3, [sp, #4]
    7776:	685a      	ldr	r2, [r3, #4]
    7778:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    777c:	005b      	lsls	r3, r3, #1
    777e:	4413      	add	r3, r2
    7780:	881b      	ldrh	r3, [r3, #0]
    7782:	f003 021f 	and.w	r2, r3, #31
    7786:	9b01      	ldr	r3, [sp, #4]
    7788:	6859      	ldr	r1, [r3, #4]
    778a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    778e:	005b      	lsls	r3, r3, #1
    7790:	440b      	add	r3, r1
    7792:	881b      	ldrh	r3, [r3, #0]
    7794:	095b      	lsrs	r3, r3, #5
    7796:	b29b      	uxth	r3, r3
    7798:	4619      	mov	r1, r3
    779a:	4b72      	ldr	r3, [pc, #456]	; (7964 <Port_Ipw_Init_UnusedPins+0x26c>)
    779c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    77a0:	2101      	movs	r1, #1
    77a2:	fa01 f202 	lsl.w	r2, r1, r2
    77a6:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    77a8:	f00e fadc 	bl	15d64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    77ac:	9b01      	ldr	r3, [sp, #4]
    77ae:	685a      	ldr	r2, [r3, #4]
    77b0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    77b4:	005b      	lsls	r3, r3, #1
    77b6:	4413      	add	r3, r2
    77b8:	881b      	ldrh	r3, [r3, #0]
    77ba:	095b      	lsrs	r3, r3, #5
    77bc:	b29b      	uxth	r3, r3
    77be:	461a      	mov	r2, r3
    77c0:	4b68      	ldr	r3, [pc, #416]	; (7964 <Port_Ipw_Init_UnusedPins+0x26c>)
    77c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    77c6:	6959      	ldr	r1, [r3, #20]
    77c8:	9b01      	ldr	r3, [sp, #4]
    77ca:	685a      	ldr	r2, [r3, #4]
    77cc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    77d0:	005b      	lsls	r3, r3, #1
    77d2:	4413      	add	r3, r2
    77d4:	881b      	ldrh	r3, [r3, #0]
    77d6:	f003 031f 	and.w	r3, r3, #31
    77da:	2201      	movs	r2, #1
    77dc:	409a      	lsls	r2, r3
    77de:	9b01      	ldr	r3, [sp, #4]
    77e0:	6858      	ldr	r0, [r3, #4]
    77e2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    77e6:	005b      	lsls	r3, r3, #1
    77e8:	4403      	add	r3, r0
    77ea:	881b      	ldrh	r3, [r3, #0]
    77ec:	095b      	lsrs	r3, r3, #5
    77ee:	b29b      	uxth	r3, r3
    77f0:	4618      	mov	r0, r3
    77f2:	4b5c      	ldr	r3, [pc, #368]	; (7964 <Port_Ipw_Init_UnusedPins+0x26c>)
    77f4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    77f8:	430a      	orrs	r2, r1
    77fa:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    77fc:	f00e fade 	bl	15dbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    7800:	e086      	b.n	7910 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    7802:	f00e faaf 	bl	15d64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    7806:	9b01      	ldr	r3, [sp, #4]
    7808:	685a      	ldr	r2, [r3, #4]
    780a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    780e:	005b      	lsls	r3, r3, #1
    7810:	4413      	add	r3, r2
    7812:	881b      	ldrh	r3, [r3, #0]
    7814:	095b      	lsrs	r3, r3, #5
    7816:	b29b      	uxth	r3, r3
    7818:	461a      	mov	r2, r3
    781a:	4b52      	ldr	r3, [pc, #328]	; (7964 <Port_Ipw_Init_UnusedPins+0x26c>)
    781c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7820:	6959      	ldr	r1, [r3, #20]
    7822:	9b01      	ldr	r3, [sp, #4]
    7824:	685a      	ldr	r2, [r3, #4]
    7826:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    782a:	005b      	lsls	r3, r3, #1
    782c:	4413      	add	r3, r2
    782e:	881b      	ldrh	r3, [r3, #0]
    7830:	f003 031f 	and.w	r3, r3, #31
    7834:	2201      	movs	r2, #1
    7836:	fa02 f303 	lsl.w	r3, r2, r3
    783a:	43da      	mvns	r2, r3
    783c:	9b01      	ldr	r3, [sp, #4]
    783e:	6858      	ldr	r0, [r3, #4]
    7840:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7844:	005b      	lsls	r3, r3, #1
    7846:	4403      	add	r3, r0
    7848:	881b      	ldrh	r3, [r3, #0]
    784a:	095b      	lsrs	r3, r3, #5
    784c:	b29b      	uxth	r3, r3
    784e:	4618      	mov	r0, r3
    7850:	4b44      	ldr	r3, [pc, #272]	; (7964 <Port_Ipw_Init_UnusedPins+0x26c>)
    7852:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7856:	400a      	ands	r2, r1
    7858:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    785a:	f00e faaf 	bl	15dbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    785e:	f00e fad3 	bl	15e08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    7862:	9b01      	ldr	r3, [sp, #4]
    7864:	685a      	ldr	r2, [r3, #4]
    7866:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    786a:	005b      	lsls	r3, r3, #1
    786c:	4413      	add	r3, r2
    786e:	881b      	ldrh	r3, [r3, #0]
    7870:	095b      	lsrs	r3, r3, #5
    7872:	b29b      	uxth	r3, r3
    7874:	461a      	mov	r2, r3
    7876:	4b3b      	ldr	r3, [pc, #236]	; (7964 <Port_Ipw_Init_UnusedPins+0x26c>)
    7878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    787c:	6999      	ldr	r1, [r3, #24]
    787e:	9b01      	ldr	r3, [sp, #4]
    7880:	685a      	ldr	r2, [r3, #4]
    7882:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7886:	005b      	lsls	r3, r3, #1
    7888:	4413      	add	r3, r2
    788a:	881b      	ldrh	r3, [r3, #0]
    788c:	f003 031f 	and.w	r3, r3, #31
    7890:	2201      	movs	r2, #1
    7892:	fa02 f303 	lsl.w	r3, r2, r3
    7896:	43da      	mvns	r2, r3
    7898:	9b01      	ldr	r3, [sp, #4]
    789a:	6858      	ldr	r0, [r3, #4]
    789c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    78a0:	005b      	lsls	r3, r3, #1
    78a2:	4403      	add	r3, r0
    78a4:	881b      	ldrh	r3, [r3, #0]
    78a6:	095b      	lsrs	r3, r3, #5
    78a8:	b29b      	uxth	r3, r3
    78aa:	4618      	mov	r0, r3
    78ac:	4b2d      	ldr	r3, [pc, #180]	; (7964 <Port_Ipw_Init_UnusedPins+0x26c>)
    78ae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    78b2:	400a      	ands	r2, r1
    78b4:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    78b6:	9b02      	ldr	r3, [sp, #8]
    78b8:	2b03      	cmp	r3, #3
    78ba:	d127      	bne.n	790c <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    78bc:	9b01      	ldr	r3, [sp, #4]
    78be:	685a      	ldr	r2, [r3, #4]
    78c0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    78c4:	005b      	lsls	r3, r3, #1
    78c6:	4413      	add	r3, r2
    78c8:	881b      	ldrh	r3, [r3, #0]
    78ca:	095b      	lsrs	r3, r3, #5
    78cc:	b29b      	uxth	r3, r3
    78ce:	461a      	mov	r2, r3
    78d0:	4b24      	ldr	r3, [pc, #144]	; (7964 <Port_Ipw_Init_UnusedPins+0x26c>)
    78d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    78d6:	6999      	ldr	r1, [r3, #24]
    78d8:	9b01      	ldr	r3, [sp, #4]
    78da:	685a      	ldr	r2, [r3, #4]
    78dc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    78e0:	005b      	lsls	r3, r3, #1
    78e2:	4413      	add	r3, r2
    78e4:	881b      	ldrh	r3, [r3, #0]
    78e6:	f003 031f 	and.w	r3, r3, #31
    78ea:	2201      	movs	r2, #1
    78ec:	409a      	lsls	r2, r3
    78ee:	9b01      	ldr	r3, [sp, #4]
    78f0:	6858      	ldr	r0, [r3, #4]
    78f2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    78f6:	005b      	lsls	r3, r3, #1
    78f8:	4403      	add	r3, r0
    78fa:	881b      	ldrh	r3, [r3, #0]
    78fc:	095b      	lsrs	r3, r3, #5
    78fe:	b29b      	uxth	r3, r3
    7900:	4618      	mov	r0, r3
    7902:	4b18      	ldr	r3, [pc, #96]	; (7964 <Port_Ipw_Init_UnusedPins+0x26c>)
    7904:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7908:	430a      	orrs	r2, r1
    790a:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    790c:	f00e faa8 	bl	15e60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    7910:	9b01      	ldr	r3, [sp, #4]
    7912:	685a      	ldr	r2, [r3, #4]
    7914:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7918:	005b      	lsls	r3, r3, #1
    791a:	4413      	add	r3, r2
    791c:	881b      	ldrh	r3, [r3, #0]
    791e:	095b      	lsrs	r3, r3, #5
    7920:	b29b      	uxth	r3, r3
    7922:	461a      	mov	r2, r3
    7924:	4b10      	ldr	r3, [pc, #64]	; (7968 <Port_Ipw_Init_UnusedPins+0x270>)
    7926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    792a:	9a01      	ldr	r2, [sp, #4]
    792c:	6851      	ldr	r1, [r2, #4]
    792e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    7932:	0052      	lsls	r2, r2, #1
    7934:	440a      	add	r2, r1
    7936:	8812      	ldrh	r2, [r2, #0]
    7938:	f002 021f 	and.w	r2, r2, #31
    793c:	9903      	ldr	r1, [sp, #12]
    793e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    7942:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7946:	3301      	adds	r3, #1
    7948:	f8ad 3016 	strh.w	r3, [sp, #22]
    794c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    7950:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7954:	429a      	cmp	r2, r3
    7956:	f4ff aee7 	bcc.w	7728 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    795a:	bf00      	nop
    795c:	bf00      	nop
    795e:	b007      	add	sp, #28
    7960:	f85d fb04 	ldr.w	pc, [sp], #4
    7964:	0001a038 	.word	0x0001a038
    7968:	0001a024 	.word	0x0001a024

0000796c <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    796c:	b500      	push	{lr}
    796e:	b085      	sub	sp, #20
    7970:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    7972:	9b01      	ldr	r3, [sp, #4]
    7974:	7c1b      	ldrb	r3, [r3, #16]
    7976:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    797a:	2300      	movs	r3, #0
    797c:	f8ad 300e 	strh.w	r3, [sp, #14]
    7980:	e035      	b.n	79ee <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    7982:	9b01      	ldr	r3, [sp, #4]
    7984:	695a      	ldr	r2, [r3, #20]
    7986:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    798a:	00db      	lsls	r3, r3, #3
    798c:	4413      	add	r3, r2
    798e:	781b      	ldrb	r3, [r3, #0]
    7990:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    7994:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7998:	4a29      	ldr	r2, [pc, #164]	; (7a40 <Port_Ipw_Init+0xd4>)
    799a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    799e:	9b01      	ldr	r3, [sp, #4]
    79a0:	695a      	ldr	r2, [r3, #20]
    79a2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    79a6:	00db      	lsls	r3, r3, #3
    79a8:	4413      	add	r3, r2
    79aa:	4619      	mov	r1, r3
    79ac:	f7ff fe39 	bl	7622 <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    79b0:	f00e fbc4 	bl	1613c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    79b4:	f89d 300c 	ldrb.w	r3, [sp, #12]
    79b8:	4a21      	ldr	r2, [pc, #132]	; (7a40 <Port_Ipw_Init+0xd4>)
    79ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79be:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    79c2:	9b01      	ldr	r3, [sp, #4]
    79c4:	695a      	ldr	r2, [r3, #20]
    79c6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    79ca:	00db      	lsls	r3, r3, #3
    79cc:	4413      	add	r3, r2
    79ce:	685a      	ldr	r2, [r3, #4]
    79d0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    79d4:	481a      	ldr	r0, [pc, #104]	; (7a40 <Port_Ipw_Init+0xd4>)
    79d6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    79da:	430a      	orrs	r2, r1
    79dc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    79e0:	f00e fbd8 	bl	16194 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    79e4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    79e8:	3301      	adds	r3, #1
    79ea:	f8ad 300e 	strh.w	r3, [sp, #14]
    79ee:	f89d 300d 	ldrb.w	r3, [sp, #13]
    79f2:	b29b      	uxth	r3, r3
    79f4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    79f8:	429a      	cmp	r2, r3
    79fa:	d3c2      	bcc.n	7982 <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    79fc:	9b01      	ldr	r3, [sp, #4]
    79fe:	6a1b      	ldr	r3, [r3, #32]
    7a00:	4619      	mov	r1, r3
    7a02:	200c      	movs	r0, #12
    7a04:	f7ff fd98 	bl	7538 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    7a08:	9801      	ldr	r0, [sp, #4]
    7a0a:	f7ff fe75 	bl	76f8 <Port_Ipw_Init_UnusedPins>
     (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
    )
    /* Port_Ipw_au16GpioDirChangeability is only used by Port_Ci_Port_Ip_SetPinDirection, Port_Ci_Port_Ip_Set2PinsDirection
       and Port_Ci_Port_Ip_SetPinMode functions */
    /* Initialize the Array with Change Direction Flags for GPIO */
    for (u16PinIndex = (uint16)0U; u16PinIndex < PAD_16BLOCK_NO_U8; u16PinIndex++)
    7a0e:	2300      	movs	r3, #0
    7a10:	f8ad 300e 	strh.w	r3, [sp, #14]
    7a14:	e00a      	b.n	7a2c <Port_Ipw_Init+0xc0>
    {
        Port_Ipw_au16GpioDirChangeability[u16PinIndex] = (uint16)0UL;
    7a16:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7a1a:	4a0a      	ldr	r2, [pc, #40]	; (7a44 <Port_Ipw_Init+0xd8>)
    7a1c:	2100      	movs	r1, #0
    7a1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (u16PinIndex = (uint16)0U; u16PinIndex < PAD_16BLOCK_NO_U8; u16PinIndex++)
    7a22:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7a26:	3301      	adds	r3, #1
    7a28:	f8ad 300e 	strh.w	r3, [sp, #14]
    7a2c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7a30:	2b09      	cmp	r3, #9
    7a32:	d9f0      	bls.n	7a16 <Port_Ipw_Init+0xaa>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    7a34:	bf00      	nop
    7a36:	bf00      	nop
    7a38:	b005      	add	sp, #20
    7a3a:	f85d fb04 	ldr.w	pc, [sp], #4
    7a3e:	bf00      	nop
    7a40:	0001a024 	.word	0x0001a024
    7a44:	1fff8d2c 	.word	0x1fff8d2c

00007a48 <Port_Ipw_SetPinDirection>:
(
    Port_PinType            PinIndex,
    Port_PinDirectionType   eDirection,
    const Port_ConfigType * pConfigPtr
)
{
    7a48:	b500      	push	{lr}
    7a4a:	b087      	sub	sp, #28
    7a4c:	9003      	str	r0, [sp, #12]
    7a4e:	9102      	str	r1, [sp, #8]
    7a50:	9201      	str	r2, [sp, #4]
    /* Point to the Port Pin PCR register address */
    uint16 Pin = pConfigPtr->pUsedPadConfig[PinIndex].Pin;
    7a52:	9b01      	ldr	r3, [sp, #4]
    7a54:	68d9      	ldr	r1, [r3, #12]
    7a56:	9a03      	ldr	r2, [sp, #12]
    7a58:	4613      	mov	r3, r2
    7a5a:	009b      	lsls	r3, r3, #2
    7a5c:	4413      	add	r3, r2
    7a5e:	009b      	lsls	r3, r3, #2
    7a60:	440b      	add	r3, r1
    7a62:	881b      	ldrh	r3, [r3, #0]
    7a64:	f8ad 3014 	strh.w	r3, [sp, #20]
    /* Return value */
    Std_ReturnType PinDirError             = (Std_ReturnType)E_OK;
    7a68:	2300      	movs	r3, #0
    7a6a:	f88d 3017 	strb.w	r3, [sp, #23]

#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;
    CoreId = (uint8)Port_GetCoreID();
    7a6e:	2300      	movs	r3, #0
    7a70:	f88d 3013 	strb.w	r3, [sp, #19]

    if ((PinIndex >= (Port_PinType)pConfigPtr->u16NumPins))
    7a74:	9b01      	ldr	r3, [sp, #4]
    7a76:	881b      	ldrh	r3, [r3, #0]
    7a78:	461a      	mov	r2, r3
    7a7a:	9b03      	ldr	r3, [sp, #12]
    7a7c:	4293      	cmp	r3, r2
    7a7e:	d306      	bcc.n	7a8e <Port_Ipw_SetPinDirection+0x46>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_PARAM_PIN);
    7a80:	230a      	movs	r3, #10
    7a82:	2201      	movs	r2, #1
    7a84:	2100      	movs	r1, #0
    7a86:	207c      	movs	r0, #124	; 0x7c
    7a88:	f011 f920 	bl	18ccc <Det_ReportError>
    7a8c:	e0c9      	b.n	7c22 <Port_Ipw_SetPinDirection+0x1da>
    }
    /* Check port pin validity */
    else if ((uint32)1 != (((pConfigPtr->pau32Port_PinToPartitionMap[PinIndex]) & ((uint32)1 << CoreId)) >> CoreId))
    7a8e:	9b01      	ldr	r3, [sp, #4]
    7a90:	699a      	ldr	r2, [r3, #24]
    7a92:	9b03      	ldr	r3, [sp, #12]
    7a94:	009b      	lsls	r3, r3, #2
    7a96:	4413      	add	r3, r2
    7a98:	681a      	ldr	r2, [r3, #0]
    7a9a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7a9e:	2101      	movs	r1, #1
    7aa0:	fa01 f303 	lsl.w	r3, r1, r3
    7aa4:	401a      	ands	r2, r3
    7aa6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7aaa:	fa22 f303 	lsr.w	r3, r2, r3
    7aae:	2b01      	cmp	r3, #1
    7ab0:	d006      	beq.n	7ac0 <Port_Ipw_SetPinDirection+0x78>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    7ab2:	23f0      	movs	r3, #240	; 0xf0
    7ab4:	2201      	movs	r2, #1
    7ab6:	2100      	movs	r1, #0
    7ab8:	207c      	movs	r0, #124	; 0x7c
    7aba:	f011 f907 	bl	18ccc <Det_ReportError>
    7abe:	e0b0      	b.n	7c22 <Port_Ipw_SetPinDirection+0x1da>
    }
    else
    {
        /* Bit Offset and Table value for change direction flag word */
        uint8 u8PinDescBitOffset       = (uint8)(Pin & PORT_CI_BIT_OFFSET_MASK_U8);
    7ac0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7ac4:	b2db      	uxtb	r3, r3
    7ac6:	f003 030f 	and.w	r3, r3, #15
    7aca:	f88d 3012 	strb.w	r3, [sp, #18]
        /* Number of block 16 */
        uint16 u16PinChangeDirFlagWord  = Port_Ipw_au16GpioDirChangeability[(uint8)(Pin >> 4)];
    7ace:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7ad2:	091b      	lsrs	r3, r3, #4
    7ad4:	b29b      	uxth	r3, r3
    7ad6:	b2db      	uxtb	r3, r3
    7ad8:	461a      	mov	r2, r3
    7ada:	4b55      	ldr	r3, [pc, #340]	; (7c30 <Port_Ipw_SetPinDirection+0x1e8>)
    7adc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    7ae0:	f8ad 3010 	strh.w	r3, [sp, #16]

        /* Check the Direction changeability option */
        if ((TRUE == pConfigPtr->pUsedPadConfig[PinIndex].bDC) || ((uint16)0 != (u16PinChangeDirFlagWord & (uint16)(1UL << u8PinDescBitOffset))))
    7ae4:	9b01      	ldr	r3, [sp, #4]
    7ae6:	68d9      	ldr	r1, [r3, #12]
    7ae8:	9a03      	ldr	r2, [sp, #12]
    7aea:	4613      	mov	r3, r2
    7aec:	009b      	lsls	r3, r3, #2
    7aee:	4413      	add	r3, r2
    7af0:	009b      	lsls	r3, r3, #2
    7af2:	440b      	add	r3, r1
    7af4:	7c5b      	ldrb	r3, [r3, #17]
    7af6:	2b00      	cmp	r3, #0
    7af8:	d10c      	bne.n	7b14 <Port_Ipw_SetPinDirection+0xcc>
    7afa:	f89d 3012 	ldrb.w	r3, [sp, #18]
    7afe:	2201      	movs	r2, #1
    7b00:	fa02 f303 	lsl.w	r3, r2, r3
    7b04:	b29a      	uxth	r2, r3
    7b06:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    7b0a:	4013      	ands	r3, r2
    7b0c:	b29b      	uxth	r3, r3
    7b0e:	2b00      	cmp	r3, #0
    7b10:	f000 8082 	beq.w	7c18 <Port_Ipw_SetPinDirection+0x1d0>
        {
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
            /* Configures Port Pin as Output */
            if (PORT_PIN_OUT == eDirection)
    7b14:	9b02      	ldr	r3, [sp, #8]
    7b16:	2b02      	cmp	r3, #2
    7b18:	d11d      	bne.n	7b56 <Port_Ipw_SetPinDirection+0x10e>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16();
    7b1a:	f00e fb61 	bl	161e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PDDR |= (uint32)(1UL << GPIO_CHANNEL_U32(Pin));
    7b1e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7b22:	095b      	lsrs	r3, r3, #5
    7b24:	b29b      	uxth	r3, r3
    7b26:	461a      	mov	r2, r3
    7b28:	4b42      	ldr	r3, [pc, #264]	; (7c34 <Port_Ipw_SetPinDirection+0x1ec>)
    7b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7b2e:	6959      	ldr	r1, [r3, #20]
    7b30:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7b34:	f003 031f 	and.w	r3, r3, #31
    7b38:	2201      	movs	r2, #1
    7b3a:	409a      	lsls	r2, r3
    7b3c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7b40:	095b      	lsrs	r3, r3, #5
    7b42:	b29b      	uxth	r3, r3
    7b44:	4618      	mov	r0, r3
    7b46:	4b3b      	ldr	r3, [pc, #236]	; (7c34 <Port_Ipw_SetPinDirection+0x1ec>)
    7b48:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7b4c:	430a      	orrs	r2, r1
    7b4e:	615a      	str	r2, [r3, #20]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16();
    7b50:	f00e fb72 	bl	16238 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>
            if (PORT_PIN_OUT == eDirection)
    7b54:	e064      	b.n	7c20 <Port_Ipw_SetPinDirection+0x1d8>
            }
            /* Configures Port Pin as Input or High-Z*/
            else if ((PORT_PIN_IN == eDirection) || (PORT_PIN_HIGH_Z == eDirection))
    7b56:	9b02      	ldr	r3, [sp, #8]
    7b58:	2b01      	cmp	r3, #1
    7b5a:	d002      	beq.n	7b62 <Port_Ipw_SetPinDirection+0x11a>
    7b5c:	9b02      	ldr	r3, [sp, #8]
    7b5e:	2b03      	cmp	r3, #3
    7b60:	d15e      	bne.n	7c20 <Port_Ipw_SetPinDirection+0x1d8>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16();
    7b62:	f00e fb3d 	bl	161e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PDDR &= ~((uint32)(1UL << GPIO_CHANNEL_U32(Pin)));
    7b66:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7b6a:	095b      	lsrs	r3, r3, #5
    7b6c:	b29b      	uxth	r3, r3
    7b6e:	461a      	mov	r2, r3
    7b70:	4b30      	ldr	r3, [pc, #192]	; (7c34 <Port_Ipw_SetPinDirection+0x1ec>)
    7b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7b76:	6959      	ldr	r1, [r3, #20]
    7b78:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7b7c:	f003 031f 	and.w	r3, r3, #31
    7b80:	2201      	movs	r2, #1
    7b82:	fa02 f303 	lsl.w	r3, r2, r3
    7b86:	43da      	mvns	r2, r3
    7b88:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7b8c:	095b      	lsrs	r3, r3, #5
    7b8e:	b29b      	uxth	r3, r3
    7b90:	4618      	mov	r0, r3
    7b92:	4b28      	ldr	r3, [pc, #160]	; (7c34 <Port_Ipw_SetPinDirection+0x1ec>)
    7b94:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7b98:	400a      	ands	r2, r1
    7b9a:	615a      	str	r2, [r3, #20]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16();
    7b9c:	f00e fb4c 	bl	16238 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17();
    7ba0:	f00e fb70 	bl	16284 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PIDR &= ~((uint32)(1UL << GPIO_CHANNEL_U32(Pin)));
    7ba4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7ba8:	095b      	lsrs	r3, r3, #5
    7baa:	b29b      	uxth	r3, r3
    7bac:	461a      	mov	r2, r3
    7bae:	4b21      	ldr	r3, [pc, #132]	; (7c34 <Port_Ipw_SetPinDirection+0x1ec>)
    7bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7bb4:	6999      	ldr	r1, [r3, #24]
    7bb6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7bba:	f003 031f 	and.w	r3, r3, #31
    7bbe:	2201      	movs	r2, #1
    7bc0:	fa02 f303 	lsl.w	r3, r2, r3
    7bc4:	43da      	mvns	r2, r3
    7bc6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7bca:	095b      	lsrs	r3, r3, #5
    7bcc:	b29b      	uxth	r3, r3
    7bce:	4618      	mov	r0, r3
    7bd0:	4b18      	ldr	r3, [pc, #96]	; (7c34 <Port_Ipw_SetPinDirection+0x1ec>)
    7bd2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7bd6:	400a      	ands	r2, r1
    7bd8:	619a      	str	r2, [r3, #24]

                /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                if (PORT_PIN_HIGH_Z == eDirection)
    7bda:	9b02      	ldr	r3, [sp, #8]
    7bdc:	2b03      	cmp	r3, #3
    7bde:	d118      	bne.n	7c12 <Port_Ipw_SetPinDirection+0x1ca>
                {
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PIDR |= ((uint32)(1UL << GPIO_CHANNEL_U32(Pin)));
    7be0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7be4:	095b      	lsrs	r3, r3, #5
    7be6:	b29b      	uxth	r3, r3
    7be8:	461a      	mov	r2, r3
    7bea:	4b12      	ldr	r3, [pc, #72]	; (7c34 <Port_Ipw_SetPinDirection+0x1ec>)
    7bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7bf0:	6999      	ldr	r1, [r3, #24]
    7bf2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7bf6:	f003 031f 	and.w	r3, r3, #31
    7bfa:	2201      	movs	r2, #1
    7bfc:	409a      	lsls	r2, r3
    7bfe:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7c02:	095b      	lsrs	r3, r3, #5
    7c04:	b29b      	uxth	r3, r3
    7c06:	4618      	mov	r0, r3
    7c08:	4b0a      	ldr	r3, [pc, #40]	; (7c34 <Port_Ipw_SetPinDirection+0x1ec>)
    7c0a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7c0e:	430a      	orrs	r2, r1
    7c10:	619a      	str	r2, [r3, #24]
                }
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17();
    7c12:	f00e fb63 	bl	162dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>
            if (PORT_PIN_OUT == eDirection)
    7c16:	e003      	b.n	7c20 <Port_Ipw_SetPinDirection+0x1d8>
#if (STD_ON == PORT_DEV_ERROR_DETECT)
        }
        /* Direction changeability is NOT supported */
        else
        {
            PinDirError = (Std_ReturnType)E_NOT_OK;
    7c18:	2301      	movs	r3, #1
    7c1a:	f88d 3017 	strb.w	r3, [sp, #23]
    7c1e:	e000      	b.n	7c22 <Port_Ipw_SetPinDirection+0x1da>
            if (PORT_PIN_OUT == eDirection)
    7c20:	bf00      	nop
        }
    }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

    return PinDirError;
    7c22:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    7c26:	4618      	mov	r0, r3
    7c28:	b007      	add	sp, #28
    7c2a:	f85d fb04 	ldr.w	pc, [sp], #4
    7c2e:	bf00      	nop
    7c30:	1fff8d2c 	.word	0x1fff8d2c
    7c34:	0001a038 	.word	0x0001a038

00007c38 <Port_Ipw_SetPinMode>:
(
    Port_PinType PinIndex,
    Port_PinModeType PinMode,
    const Port_ConfigType * pConfigPtr
)
{
    7c38:	b500      	push	{lr}
    7c3a:	b08b      	sub	sp, #44	; 0x2c
    7c3c:	9003      	str	r0, [sp, #12]
    7c3e:	460b      	mov	r3, r1
    7c40:	9201      	str	r2, [sp, #4]
    7c42:	f88d 300b 	strb.w	r3, [sp, #11]
    Std_ReturnType PinModeError             = (Std_ReturnType)0UL;
    7c46:	2300      	movs	r3, #0
    7c48:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint16 PinPad                           = pConfigPtr->pUsedPadConfig[PinIndex].Pin;
    7c4c:	9b01      	ldr	r3, [sp, #4]
    7c4e:	68d9      	ldr	r1, [r3, #12]
    7c50:	9a03      	ldr	r2, [sp, #12]
    7c52:	4613      	mov	r3, r2
    7c54:	009b      	lsls	r3, r3, #2
    7c56:	4413      	add	r3, r2
    7c58:	009b      	lsls	r3, r3, #2
    7c5a:	440b      	add	r3, r1
    7c5c:	881b      	ldrh	r3, [r3, #0]
    7c5e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    Port_PinModeType PinCfgRegValue         = (Port_PinModeType)PinMode;
    7c62:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7c66:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint16 u16PinDescBitOffset;
    /* Variable used to clear and updated PCR register */
    uint32 u32LocalPCR;
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    uint8 CoreId;
    CoreId = (uint8)Port_GetCoreID();
    7c6a:	2300      	movs	r3, #0
    7c6c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22

    if ((PinIndex >= (Port_PinType)pConfigPtr->u16NumPins))
    7c70:	9b01      	ldr	r3, [sp, #4]
    7c72:	881b      	ldrh	r3, [r3, #0]
    7c74:	461a      	mov	r2, r3
    7c76:	9b03      	ldr	r3, [sp, #12]
    7c78:	4293      	cmp	r3, r2
    7c7a:	d306      	bcc.n	7c8a <Port_Ipw_SetPinMode+0x52>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_PIN);
    7c7c:	230a      	movs	r3, #10
    7c7e:	2204      	movs	r2, #4
    7c80:	2100      	movs	r1, #0
    7c82:	207c      	movs	r0, #124	; 0x7c
    7c84:	f011 f822 	bl	18ccc <Det_ReportError>
    7c88:	e0b3      	b.n	7df2 <Port_Ipw_SetPinMode+0x1ba>
    }
    /* Check if this function was called with wrong core */
    else if ((uint32)1 != (((pConfigPtr->pau32Port_PinToPartitionMap[PinIndex]) & ((uint32)1 << CoreId)) >> CoreId))
    7c8a:	9b01      	ldr	r3, [sp, #4]
    7c8c:	699a      	ldr	r2, [r3, #24]
    7c8e:	9b03      	ldr	r3, [sp, #12]
    7c90:	009b      	lsls	r3, r3, #2
    7c92:	4413      	add	r3, r2
    7c94:	681a      	ldr	r2, [r3, #0]
    7c96:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    7c9a:	2101      	movs	r1, #1
    7c9c:	fa01 f303 	lsl.w	r3, r1, r3
    7ca0:	401a      	ands	r2, r3
    7ca2:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    7ca6:	fa22 f303 	lsr.w	r3, r2, r3
    7caa:	2b01      	cmp	r3, #1
    7cac:	d006      	beq.n	7cbc <Port_Ipw_SetPinMode+0x84>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_PARAM_CONFIG);
    7cae:	23f0      	movs	r3, #240	; 0xf0
    7cb0:	2204      	movs	r2, #4
    7cb2:	2100      	movs	r1, #0
    7cb4:	207c      	movs	r0, #124	; 0x7c
    7cb6:	f011 f809 	bl	18ccc <Det_ReportError>
    7cba:	e09a      	b.n	7df2 <Port_Ipw_SetPinMode+0x1ba>
    }
    /* Check port pin mode Unchangeable */
    else if (FALSE ==  pConfigPtr->pUsedPadConfig[PinIndex].bMC)
    7cbc:	9b01      	ldr	r3, [sp, #4]
    7cbe:	68d9      	ldr	r1, [r3, #12]
    7cc0:	9a03      	ldr	r2, [sp, #12]
    7cc2:	4613      	mov	r3, r2
    7cc4:	009b      	lsls	r3, r3, #2
    7cc6:	4413      	add	r3, r2
    7cc8:	009b      	lsls	r3, r3, #2
    7cca:	440b      	add	r3, r1
    7ccc:	7c9b      	ldrb	r3, [r3, #18]
    7cce:	f083 0301 	eor.w	r3, r3, #1
    7cd2:	b2db      	uxtb	r3, r3
    7cd4:	2b00      	cmp	r3, #0
    7cd6:	d006      	beq.n	7ce6 <Port_Ipw_SetPinMode+0xae>
    {
        (void)Det_ReportError((uint16)PORT_MODULE_ID, (uint8)PORT_INSTANCE_ID, (uint8)PORT_SETPINMODE_ID, (uint8)PORT_E_MODE_UNCHANGEABLE);
    7cd8:	230e      	movs	r3, #14
    7cda:	2204      	movs	r2, #4
    7cdc:	2100      	movs	r1, #0
    7cde:	207c      	movs	r0, #124	; 0x7c
    7ce0:	f010 fff4 	bl	18ccc <Det_ReportError>
    7ce4:	e085      	b.n	7df2 <Port_Ipw_SetPinMode+0x1ba>
    }
    else
    {
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

        if (PAD_MODE_OPTIONS_U8 <= PinMode)
    7ce6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7cea:	2b07      	cmp	r3, #7
    7cec:	d903      	bls.n	7cf6 <Port_Ipw_SetPinMode+0xbe>
        {
            PinModeError = PORT_E_PARAM_INVALID_MODE;
    7cee:	230d      	movs	r3, #13
    7cf0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    7cf4:	e07d      	b.n	7df2 <Port_Ipw_SetPinMode+0x1ba>
        }
        else
        {
            Port_PinDirectionType ePadDirection = PORT_PIN_DISABLED;
    7cf6:	2300      	movs	r3, #0
    7cf8:	9307      	str	r3, [sp, #28]

            /* Bit offset of Pin index inside the pin description matrix */
            u16PinDescBitOffset = PinPad & PORT_MODE_BIT_OFFSET_MASK_U8;
    7cfa:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7cfe:	f003 030f 	and.w	r3, r3, #15
    7d02:	f8ad 301a 	strh.w	r3, [sp, #26]
            /* Selected word inside the pin description matrix */
            u16PinDescWord = (uint16)Port_au16PinDescription[(uint8)PinMode][PinPad >> 4U];
    7d06:	f89d 200b 	ldrb.w	r2, [sp, #11]
    7d0a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7d0e:	091b      	lsrs	r3, r3, #4
    7d10:	b29b      	uxth	r3, r3
    7d12:	4618      	mov	r0, r3
    7d14:	493a      	ldr	r1, [pc, #232]	; (7e00 <Port_Ipw_SetPinMode+0x1c8>)
    7d16:	4613      	mov	r3, r2
    7d18:	009b      	lsls	r3, r3, #2
    7d1a:	4413      	add	r3, r2
    7d1c:	005b      	lsls	r3, r3, #1
    7d1e:	4403      	add	r3, r0
    7d20:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    7d24:	f8ad 3018 	strh.w	r3, [sp, #24]

            /* Check if desired mode is valid for selected pin */
            if ((u16PinDescWord & ((uint16)1UL<<u16PinDescBitOffset)) != (uint16)0U)
    7d28:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    7d2c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    7d30:	fa42 f303 	asr.w	r3, r2, r3
    7d34:	f003 0301 	and.w	r3, r3, #1
    7d38:	2b00      	cmp	r3, #0
    7d3a:	d057      	beq.n	7dec <Port_Ipw_SetPinMode+0x1b4>
            {
                switch(PinMode)
    7d3c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7d40:	2b01      	cmp	r3, #1
    7d42:	d11f      	bne.n	7d84 <Port_Ipw_SetPinMode+0x14c>
                {
                    case PORT_GPIO_MODE:
#if (STD_ON == PORT_DEV_ERROR_DETECT)
                        Port_Ipw_SetGpioDirChangeability(PinPad, TRUE);
    7d44:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7d48:	2101      	movs	r1, #1
    7d4a:	4618      	mov	r0, r3
    7d4c:	f000 f85c 	bl	7e08 <Port_Ipw_SetGpioDirChangeability>
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
                        ePadDirection = pConfigPtr->pUsedPadConfig[PinIndex].ePadDir;
    7d50:	9b01      	ldr	r3, [sp, #4]
    7d52:	68d9      	ldr	r1, [r3, #12]
    7d54:	9a03      	ldr	r2, [sp, #12]
    7d56:	4613      	mov	r3, r2
    7d58:	009b      	lsls	r3, r3, #2
    7d5a:	4413      	add	r3, r2
    7d5c:	009b      	lsls	r3, r3, #2
    7d5e:	440b      	add	r3, r1
    7d60:	68db      	ldr	r3, [r3, #12]
    7d62:	9307      	str	r3, [sp, #28]
#if (STD_OFF == PORT_SETPINMODE_DOES_NOT_TOUCH_GPIO_LEVEL)
                        if ((PORT_PIN_IN != ePadDirection) && (PORT_PIN_HIGH_Z != ePadDirection))
    7d64:	9b07      	ldr	r3, [sp, #28]
    7d66:	2b01      	cmp	r3, #1
    7d68:	d006      	beq.n	7d78 <Port_Ipw_SetPinMode+0x140>
    7d6a:	9b07      	ldr	r3, [sp, #28]
    7d6c:	2b03      	cmp	r3, #3
    7d6e:	d003      	beq.n	7d78 <Port_Ipw_SetPinMode+0x140>
                        {
                            Port_Ipw_SetGpioPadOutput(PinIndex, pConfigPtr);
    7d70:	9901      	ldr	r1, [sp, #4]
    7d72:	9803      	ldr	r0, [sp, #12]
    7d74:	f000 f896 	bl	7ea4 <Port_Ipw_SetGpioPadOutput>
                        }
#endif /* (STD_OFF == PORT_SETPINMODE_DOES_NOT_TOUCH_GPIO_LEVEL) */
                        (void)Port_Ipw_SetPinDirection(PinIndex, ePadDirection, pConfigPtr);
    7d78:	9a01      	ldr	r2, [sp, #4]
    7d7a:	9907      	ldr	r1, [sp, #28]
    7d7c:	9803      	ldr	r0, [sp, #12]
    7d7e:	f7ff fe63 	bl	7a48 <Port_Ipw_SetPinDirection>
                        break;
    7d82:	e006      	b.n	7d92 <Port_Ipw_SetPinMode+0x15a>

                    default:
#if (STD_ON == PORT_DEV_ERROR_DETECT)
                    /* All the ALT modes except GPIO*/
                        Port_Ipw_SetGpioDirChangeability(PinPad,FALSE);
    7d84:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7d88:	2100      	movs	r1, #0
    7d8a:	4618      	mov	r0, r3
    7d8c:	f000 f83c 	bl	7e08 <Port_Ipw_SetGpioDirChangeability>
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
                        break;
    7d90:	bf00      	nop
                }
                /* Sets the port pin mode */
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27();
    7d92:	f00e fdab 	bl	168ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>
                u32LocalPCR  = (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(PinPad)])->PCR[GPIO_CHANNEL_U32(PinPad)];
    7d96:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7d9a:	095b      	lsrs	r3, r3, #5
    7d9c:	b29b      	uxth	r3, r3
    7d9e:	461a      	mov	r2, r3
    7da0:	4b18      	ldr	r3, [pc, #96]	; (7e04 <Port_Ipw_SetPinMode+0x1cc>)
    7da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7da6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    7daa:	f002 021f 	and.w	r2, r2, #31
    7dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7db2:	9305      	str	r3, [sp, #20]

                u32LocalPCR &= ~(PORT_CI_PCR_ALT_MODE_U32);
    7db4:	9b05      	ldr	r3, [sp, #20]
    7db6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    7dba:	9305      	str	r3, [sp, #20]
                u32LocalPCR |= ((uint32)PinCfgRegValue << PORT_CI_PCR_ALT_MODE_OFFSET_U32);
    7dbc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    7dc0:	021b      	lsls	r3, r3, #8
    7dc2:	9a05      	ldr	r2, [sp, #20]
    7dc4:	4313      	orrs	r3, r2
    7dc6:	9305      	str	r3, [sp, #20]

                (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(PinPad)])->PCR[GPIO_CHANNEL_U32(PinPad)] = u32LocalPCR;
    7dc8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7dcc:	095b      	lsrs	r3, r3, #5
    7dce:	b29b      	uxth	r3, r3
    7dd0:	461a      	mov	r2, r3
    7dd2:	4b0c      	ldr	r3, [pc, #48]	; (7e04 <Port_Ipw_SetPinMode+0x1cc>)
    7dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7dd8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    7ddc:	f002 021f 	and.w	r2, r2, #31
    7de0:	9905      	ldr	r1, [sp, #20]
    7de2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27();
    7de6:	f00e fdad 	bl	16944 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>
    7dea:	e002      	b.n	7df2 <Port_Ipw_SetPinMode+0x1ba>
            }
            else
            {
                PinModeError = PORT_E_PARAM_INVALID_MODE;
    7dec:	230d      	movs	r3, #13
    7dee:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
#if (STD_ON == PORT_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

    return PinModeError;
    7df2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
    7df6:	4618      	mov	r0, r3
    7df8:	b00b      	add	sp, #44	; 0x2c
    7dfa:	f85d fb04 	ldr.w	pc, [sp], #4
    7dfe:	bf00      	nop
    7e00:	0001aa34 	.word	0x0001aa34
    7e04:	0001a024 	.word	0x0001a024

00007e08 <Port_Ipw_SetGpioDirChangeability>:
void Port_Ipw_SetGpioDirChangeability
(
    uint16 PadID,
    boolean bStatus
)
{
    7e08:	b500      	push	{lr}
    7e0a:	b085      	sub	sp, #20
    7e0c:	4603      	mov	r3, r0
    7e0e:	460a      	mov	r2, r1
    7e10:	f8ad 3006 	strh.w	r3, [sp, #6]
    7e14:	4613      	mov	r3, r2
    7e16:	f88d 3005 	strb.w	r3, [sp, #5]
    /* Pin description variables */
    uint8 u8PinBitOffset;
    uint16 u16PinDirFlagWord;

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18();
    7e1a:	f00e fa85 	bl	16328 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>
    /* Bit offset of Pin index inside the pin description matrix */
    u8PinBitOffset      = (uint8)((uint8)PadID & PORT_CI_BIT_OFFSET_MASK_U8);
    7e1e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7e22:	b2db      	uxtb	r3, r3
    7e24:	f003 030f 	and.w	r3, r3, #15
    7e28:	f88d 300d 	strb.w	r3, [sp, #13]
    u16PinDirFlagWord   = Port_Ipw_au16GpioDirChangeability[(uint8)((uint8)PadID >> 4)];
    7e2c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7e30:	b2db      	uxtb	r3, r3
    7e32:	091b      	lsrs	r3, r3, #4
    7e34:	b2db      	uxtb	r3, r3
    7e36:	461a      	mov	r2, r3
    7e38:	4b19      	ldr	r3, [pc, #100]	; (7ea0 <Port_Ipw_SetGpioDirChangeability+0x98>)
    7e3a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    7e3e:	f8ad 300e 	strh.w	r3, [sp, #14]

    if (TRUE == bStatus)
    7e42:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7e46:	2b00      	cmp	r3, #0
    7e48:	d00b      	beq.n	7e62 <Port_Ipw_SetGpioDirChangeability+0x5a>
    {
        /* Set the change direction flag */
        u16PinDirFlagWord |= (uint16)(1UL<<u8PinBitOffset);
    7e4a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7e4e:	2201      	movs	r2, #1
    7e50:	fa02 f303 	lsl.w	r3, r2, r3
    7e54:	b29a      	uxth	r2, r3
    7e56:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7e5a:	4313      	orrs	r3, r2
    7e5c:	f8ad 300e 	strh.w	r3, [sp, #14]
    7e60:	e00c      	b.n	7e7c <Port_Ipw_SetGpioDirChangeability+0x74>
    }
    else
    {
        /* Reset the change direction flag */
        u16PinDirFlagWord &= (uint16)(~((uint16)(1UL<<u8PinBitOffset)));
    7e62:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7e66:	2201      	movs	r2, #1
    7e68:	fa02 f303 	lsl.w	r3, r2, r3
    7e6c:	b29b      	uxth	r3, r3
    7e6e:	43db      	mvns	r3, r3
    7e70:	b29a      	uxth	r2, r3
    7e72:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7e76:	4013      	ands	r3, r2
    7e78:	f8ad 300e 	strh.w	r3, [sp, #14]
    }
    Port_Ipw_au16GpioDirChangeability[(uint8)((uint8)PadID >> 4)] = u16PinDirFlagWord;
    7e7c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7e80:	b2db      	uxtb	r3, r3
    7e82:	091b      	lsrs	r3, r3, #4
    7e84:	b2db      	uxtb	r3, r3
    7e86:	4619      	mov	r1, r3
    7e88:	4a05      	ldr	r2, [pc, #20]	; (7ea0 <Port_Ipw_SetGpioDirChangeability+0x98>)
    7e8a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7e8e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    /* Exit critical region */
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18();
    7e92:	f00e fa75 	bl	16380 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>
}
    7e96:	bf00      	nop
    7e98:	b005      	add	sp, #20
    7e9a:	f85d fb04 	ldr.w	pc, [sp], #4
    7e9e:	bf00      	nop
    7ea0:	1fff8d2c 	.word	0x1fff8d2c

00007ea4 <Port_Ipw_SetGpioPadOutput>:
void Port_Ipw_SetGpioPadOutput
(
    Port_PinType            PinIndex,
    const Port_ConfigType * pConfigPtr
)
{
    7ea4:	b084      	sub	sp, #16
    7ea6:	9001      	str	r0, [sp, #4]
    7ea8:	9100      	str	r1, [sp, #0]
    uint16 Pin = pConfigPtr->pUsedPadConfig[PinIndex].Pin;
    7eaa:	9b00      	ldr	r3, [sp, #0]
    7eac:	68d9      	ldr	r1, [r3, #12]
    7eae:	9a01      	ldr	r2, [sp, #4]
    7eb0:	4613      	mov	r3, r2
    7eb2:	009b      	lsls	r3, r3, #2
    7eb4:	4413      	add	r3, r2
    7eb6:	009b      	lsls	r3, r3, #2
    7eb8:	440b      	add	r3, r1
    7eba:	881b      	ldrh	r3, [r3, #0]
    7ebc:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint8 u8LocalPDO = pConfigPtr->pUsedPadConfig[PinIndex].u8PDO;
    7ec0:	9b00      	ldr	r3, [sp, #0]
    7ec2:	68d9      	ldr	r1, [r3, #12]
    7ec4:	9a01      	ldr	r2, [sp, #4]
    7ec6:	4613      	mov	r3, r2
    7ec8:	009b      	lsls	r3, r3, #2
    7eca:	4413      	add	r3, r2
    7ecc:	009b      	lsls	r3, r3, #2
    7ece:	440b      	add	r3, r1
    7ed0:	7a1b      	ldrb	r3, [r3, #8]
    7ed2:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Set pin to High value */
    if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    7ed6:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7eda:	2b01      	cmp	r3, #1
    7edc:	d110      	bne.n	7f00 <Port_Ipw_SetGpioPadOutput+0x5c>
    {
        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(Pin));
    7ede:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7ee2:	f003 021f 	and.w	r2, r3, #31
    7ee6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7eea:	095b      	lsrs	r3, r3, #5
    7eec:	b29b      	uxth	r3, r3
    7eee:	4619      	mov	r1, r3
    7ef0:	4b0f      	ldr	r3, [pc, #60]	; (7f30 <Port_Ipw_SetGpioPadOutput+0x8c>)
    7ef2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    7ef6:	2101      	movs	r1, #1
    7ef8:	fa01 f202 	lsl.w	r2, r1, r2
    7efc:	605a      	str	r2, [r3, #4]
    }
    else
    {
        /* No action to be done */
    }
}
    7efe:	e013      	b.n	7f28 <Port_Ipw_SetGpioPadOutput+0x84>
    else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    7f00:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7f04:	2b00      	cmp	r3, #0
    7f06:	d10f      	bne.n	7f28 <Port_Ipw_SetGpioPadOutput+0x84>
        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(Pin)])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(Pin));
    7f08:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7f0c:	f003 021f 	and.w	r2, r3, #31
    7f10:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7f14:	095b      	lsrs	r3, r3, #5
    7f16:	b29b      	uxth	r3, r3
    7f18:	4619      	mov	r1, r3
    7f1a:	4b05      	ldr	r3, [pc, #20]	; (7f30 <Port_Ipw_SetGpioPadOutput+0x8c>)
    7f1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    7f20:	2101      	movs	r1, #1
    7f22:	fa01 f202 	lsl.w	r2, r1, r2
    7f26:	609a      	str	r2, [r3, #8]
}
    7f28:	bf00      	nop
    7f2a:	b004      	add	sp, #16
    7f2c:	4770      	bx	lr
    7f2e:	bf00      	nop
    7f30:	0001a038 	.word	0x0001a038

00007f34 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    7f34:	b500      	push	{lr}
    7f36:	b085      	sub	sp, #20
    7f38:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    7f3a:	9b01      	ldr	r3, [sp, #4]
    7f3c:	881b      	ldrh	r3, [r3, #0]
    7f3e:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    7f42:	2300      	movs	r3, #0
    7f44:	f8ad 300e 	strh.w	r3, [sp, #14]
    7f48:	e0d2      	b.n	80f0 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    7f4a:	9b01      	ldr	r3, [sp, #4]
    7f4c:	68d9      	ldr	r1, [r3, #12]
    7f4e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7f52:	4613      	mov	r3, r2
    7f54:	009b      	lsls	r3, r3, #2
    7f56:	4413      	add	r3, r2
    7f58:	009b      	lsls	r3, r3, #2
    7f5a:	440b      	add	r3, r1
    7f5c:	7c5b      	ldrb	r3, [r3, #17]
    7f5e:	f083 0301 	eor.w	r3, r3, #1
    7f62:	b2db      	uxtb	r3, r3
    7f64:	2b00      	cmp	r3, #0
    7f66:	f000 80be 	beq.w	80e6 <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    7f6a:	9b01      	ldr	r3, [sp, #4]
    7f6c:	68d9      	ldr	r1, [r3, #12]
    7f6e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7f72:	4613      	mov	r3, r2
    7f74:	009b      	lsls	r3, r3, #2
    7f76:	4413      	add	r3, r2
    7f78:	009b      	lsls	r3, r3, #2
    7f7a:	440b      	add	r3, r1
    7f7c:	7c1b      	ldrb	r3, [r3, #16]
    7f7e:	2b00      	cmp	r3, #0
    7f80:	f000 80b1 	beq.w	80e6 <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    7f84:	9b01      	ldr	r3, [sp, #4]
    7f86:	68d9      	ldr	r1, [r3, #12]
    7f88:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7f8c:	4613      	mov	r3, r2
    7f8e:	009b      	lsls	r3, r3, #2
    7f90:	4413      	add	r3, r2
    7f92:	009b      	lsls	r3, r3, #2
    7f94:	440b      	add	r3, r1
    7f96:	881b      	ldrh	r3, [r3, #0]
    7f98:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    7f9c:	9b01      	ldr	r3, [sp, #4]
    7f9e:	68d9      	ldr	r1, [r3, #12]
    7fa0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7fa4:	4613      	mov	r3, r2
    7fa6:	009b      	lsls	r3, r3, #2
    7fa8:	4413      	add	r3, r2
    7faa:	009b      	lsls	r3, r3, #2
    7fac:	440b      	add	r3, r1
    7fae:	68db      	ldr	r3, [r3, #12]
    7fb0:	2b02      	cmp	r3, #2
    7fb2:	d11d      	bne.n	7ff0 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    7fb4:	f00e fa0a 	bl	163cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    7fb8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7fbc:	095b      	lsrs	r3, r3, #5
    7fbe:	b29b      	uxth	r3, r3
    7fc0:	461a      	mov	r2, r3
    7fc2:	4b51      	ldr	r3, [pc, #324]	; (8108 <Port_Ipw_RefreshPortDirection+0x1d4>)
    7fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7fc8:	6959      	ldr	r1, [r3, #20]
    7fca:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7fce:	f003 031f 	and.w	r3, r3, #31
    7fd2:	2201      	movs	r2, #1
    7fd4:	409a      	lsls	r2, r3
    7fd6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7fda:	095b      	lsrs	r3, r3, #5
    7fdc:	b29b      	uxth	r3, r3
    7fde:	4618      	mov	r0, r3
    7fe0:	4b49      	ldr	r3, [pc, #292]	; (8108 <Port_Ipw_RefreshPortDirection+0x1d4>)
    7fe2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7fe6:	430a      	orrs	r2, r1
    7fe8:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    7fea:	f00e fa1b 	bl	16424 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    7fee:	e07a      	b.n	80e6 <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    7ff0:	9b01      	ldr	r3, [sp, #4]
    7ff2:	68d9      	ldr	r1, [r3, #12]
    7ff4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7ff8:	4613      	mov	r3, r2
    7ffa:	009b      	lsls	r3, r3, #2
    7ffc:	4413      	add	r3, r2
    7ffe:	009b      	lsls	r3, r3, #2
    8000:	440b      	add	r3, r1
    8002:	68db      	ldr	r3, [r3, #12]
    8004:	2b01      	cmp	r3, #1
    8006:	d00b      	beq.n	8020 <Port_Ipw_RefreshPortDirection+0xec>
    8008:	9b01      	ldr	r3, [sp, #4]
    800a:	68d9      	ldr	r1, [r3, #12]
    800c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    8010:	4613      	mov	r3, r2
    8012:	009b      	lsls	r3, r3, #2
    8014:	4413      	add	r3, r2
    8016:	009b      	lsls	r3, r3, #2
    8018:	440b      	add	r3, r1
    801a:	68db      	ldr	r3, [r3, #12]
    801c:	2b03      	cmp	r3, #3
    801e:	d162      	bne.n	80e6 <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    8020:	f00e f9d4 	bl	163cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    8024:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8028:	095b      	lsrs	r3, r3, #5
    802a:	b29b      	uxth	r3, r3
    802c:	461a      	mov	r2, r3
    802e:	4b36      	ldr	r3, [pc, #216]	; (8108 <Port_Ipw_RefreshPortDirection+0x1d4>)
    8030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8034:	6959      	ldr	r1, [r3, #20]
    8036:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    803a:	f003 031f 	and.w	r3, r3, #31
    803e:	2201      	movs	r2, #1
    8040:	fa02 f303 	lsl.w	r3, r2, r3
    8044:	43da      	mvns	r2, r3
    8046:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    804a:	095b      	lsrs	r3, r3, #5
    804c:	b29b      	uxth	r3, r3
    804e:	4618      	mov	r0, r3
    8050:	4b2d      	ldr	r3, [pc, #180]	; (8108 <Port_Ipw_RefreshPortDirection+0x1d4>)
    8052:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    8056:	400a      	ands	r2, r1
    8058:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    805a:	f00e f9e3 	bl	16424 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    805e:	f00e fa07 	bl	16470 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    8062:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8066:	095b      	lsrs	r3, r3, #5
    8068:	b29b      	uxth	r3, r3
    806a:	461a      	mov	r2, r3
    806c:	4b26      	ldr	r3, [pc, #152]	; (8108 <Port_Ipw_RefreshPortDirection+0x1d4>)
    806e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8072:	6999      	ldr	r1, [r3, #24]
    8074:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8078:	f003 031f 	and.w	r3, r3, #31
    807c:	2201      	movs	r2, #1
    807e:	fa02 f303 	lsl.w	r3, r2, r3
    8082:	43da      	mvns	r2, r3
    8084:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8088:	095b      	lsrs	r3, r3, #5
    808a:	b29b      	uxth	r3, r3
    808c:	4618      	mov	r0, r3
    808e:	4b1e      	ldr	r3, [pc, #120]	; (8108 <Port_Ipw_RefreshPortDirection+0x1d4>)
    8090:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    8094:	400a      	ands	r2, r1
    8096:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    8098:	9b01      	ldr	r3, [sp, #4]
    809a:	68d9      	ldr	r1, [r3, #12]
    809c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    80a0:	4613      	mov	r3, r2
    80a2:	009b      	lsls	r3, r3, #2
    80a4:	4413      	add	r3, r2
    80a6:	009b      	lsls	r3, r3, #2
    80a8:	440b      	add	r3, r1
    80aa:	68db      	ldr	r3, [r3, #12]
    80ac:	2b03      	cmp	r3, #3
    80ae:	d118      	bne.n	80e2 <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    80b0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    80b4:	095b      	lsrs	r3, r3, #5
    80b6:	b29b      	uxth	r3, r3
    80b8:	461a      	mov	r2, r3
    80ba:	4b13      	ldr	r3, [pc, #76]	; (8108 <Port_Ipw_RefreshPortDirection+0x1d4>)
    80bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    80c0:	6999      	ldr	r1, [r3, #24]
    80c2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    80c6:	f003 031f 	and.w	r3, r3, #31
    80ca:	2201      	movs	r2, #1
    80cc:	409a      	lsls	r2, r3
    80ce:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    80d2:	095b      	lsrs	r3, r3, #5
    80d4:	b29b      	uxth	r3, r3
    80d6:	4618      	mov	r0, r3
    80d8:	4b0b      	ldr	r3, [pc, #44]	; (8108 <Port_Ipw_RefreshPortDirection+0x1d4>)
    80da:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    80de:	430a      	orrs	r2, r1
    80e0:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    80e2:	f00e f9f1 	bl	164c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    80e6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    80ea:	3301      	adds	r3, #1
    80ec:	f8ad 300e 	strh.w	r3, [sp, #14]
    80f0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    80f4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    80f8:	429a      	cmp	r2, r3
    80fa:	f4ff af26 	bcc.w	7f4a <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    80fe:	bf00      	nop
    8100:	bf00      	nop
    8102:	b005      	add	sp, #20
    8104:	f85d fb04 	ldr.w	pc, [sp], #4
    8108:	0001a038 	.word	0x0001a038

0000810c <Dio_ValidateChannelLevel>:
 */
static inline Std_ReturnType Dio_ValidateChannelLevel
(
    Dio_LevelType Level
)
{
    810c:	b500      	push	{lr}
    810e:	b085      	sub	sp, #20
    8110:	4603      	mov	r3, r0
    8112:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType Valid = (Std_ReturnType)E_NOT_OK;
    8116:	2301      	movs	r3, #1
    8118:	f88d 300f 	strb.w	r3, [sp, #15]

    if (((Dio_LevelType)STD_HIGH == Level) || ((Dio_LevelType)STD_LOW == Level))
    811c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8120:	2b01      	cmp	r3, #1
    8122:	d003      	beq.n	812c <Dio_ValidateChannelLevel+0x20>
    8124:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8128:	2b00      	cmp	r3, #0
    812a:	d103      	bne.n	8134 <Dio_ValidateChannelLevel+0x28>
    {
        Valid = (Std_ReturnType)E_OK;
    812c:	2300      	movs	r3, #0
    812e:	f88d 300f 	strb.w	r3, [sp, #15]
    8132:	e005      	b.n	8140 <Dio_ValidateChannelLevel+0x34>
    }
    else
    {
        (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNEL_ID, DIO_E_PARAM_LEVEL);
    8134:	2321      	movs	r3, #33	; 0x21
    8136:	2201      	movs	r2, #1
    8138:	2100      	movs	r1, #0
    813a:	2078      	movs	r0, #120	; 0x78
    813c:	f010 fdc6 	bl	18ccc <Det_ReportError>
    }

    return Valid;
    8140:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8144:	4618      	mov	r0, r3
    8146:	b005      	add	sp, #20
    8148:	f85d fb04 	ldr.w	pc, [sp], #4

0000814c <Dio_ValidateChannelForWrite>:
static inline Std_ReturnType Dio_ValidateChannelForWrite
(
    Dio_ChannelType ChannelId,
    uint8 u8ServiceId
)
{
    814c:	b500      	push	{lr}
    814e:	b085      	sub	sp, #20
    8150:	4603      	mov	r3, r0
    8152:	460a      	mov	r2, r1
    8154:	f8ad 3006 	strh.w	r3, [sp, #6]
    8158:	4613      	mov	r3, r2
    815a:	f88d 3005 	strb.w	r3, [sp, #5]
    Std_ReturnType Valid = (Std_ReturnType)E_NOT_OK;
    815e:	2301      	movs	r3, #1
    8160:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 CoreId = (uint8)Dio_GetCoreID();
    8164:	2300      	movs	r3, #0
    8166:	f88d 300e 	strb.w	r3, [sp, #14]
    Dio_ChannelType maxChannelId = (Dio_ChannelType)DIO_NUM_CHANNELS_U16;
    816a:	2390      	movs	r3, #144	; 0x90
    816c:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (SIUL2_DIO_IP_MAX_MSCR_REGISTERS <= ChannelId)
    {
        maxChannelId = (Dio_ChannelType)(SIUL2_DIO_IP_MAX_MSCR_REGISTERS + SIUL2_DIO_IP_MAX_SIUL2_AE_CHANNELS);
    }
#endif /* SIUL2_DIO_IP_HAS_SIUL2_AE_INSTANCE */
    if ((((Dio_ChannelType)(ChannelId) <= (Dio_ChannelType)maxChannelId)) &&
    8170:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8174:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8178:	429a      	cmp	r2, r3
    817a:	d831      	bhi.n	81e0 <Dio_ValidateChannelForWrite+0x94>
        ((Dio_PortLevelType)0 != (Dio_aAvailablePinsForWrite[(DIO_IPW_PORTID_EXTRACT(ChannelId))] &
    817c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8180:	095b      	lsrs	r3, r3, #5
    8182:	b29b      	uxth	r3, r3
    8184:	461a      	mov	r2, r3
    8186:	4b1d      	ldr	r3, [pc, #116]	; (81fc <Dio_ValidateChannelForWrite+0xb0>)
    8188:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                                                    (DIO_IPW_CHECK_CHANNEL_VALIDITY((uint16)ChannelId))
    818c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8190:	f003 031f 	and.w	r3, r3, #31
        ((Dio_PortLevelType)0 != (Dio_aAvailablePinsForWrite[(DIO_IPW_PORTID_EXTRACT(ChannelId))] &
    8194:	fa22 f303 	lsr.w	r3, r2, r3
    8198:	f003 0301 	and.w	r3, r3, #1
    if ((((Dio_ChannelType)(ChannelId) <= (Dio_ChannelType)maxChannelId)) &&
    819c:	2b00      	cmp	r3, #0
    819e:	d01f      	beq.n	81e0 <Dio_ValidateChannelForWrite+0x94>
        else
        {
            u32ChannelToPartitionMap = Dio_ConfigPC.pau32Dio_ChannelToPartitionMap[ChannelId];
        }
#else
        u32ChannelToPartitionMap = Dio_ConfigPC.pau32Dio_ChannelToPartitionMap[ChannelId];
    81a0:	4b17      	ldr	r3, [pc, #92]	; (8200 <Dio_ValidateChannelForWrite+0xb4>)
    81a2:	689a      	ldr	r2, [r3, #8]
    81a4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    81a8:	009b      	lsls	r3, r3, #2
    81aa:	4413      	add	r3, r2
    81ac:	681b      	ldr	r3, [r3, #0]
    81ae:	9302      	str	r3, [sp, #8]
#endif /* SIUL2_DIO_IP_HAS_SIUL2_AE_INSTANCE */
        if ((uint32)1 == ((u32ChannelToPartitionMap & ((uint32)1 << CoreId)) >> CoreId))
    81b0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    81b4:	2201      	movs	r2, #1
    81b6:	409a      	lsls	r2, r3
    81b8:	9b02      	ldr	r3, [sp, #8]
    81ba:	401a      	ands	r2, r3
    81bc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    81c0:	fa22 f303 	lsr.w	r3, r2, r3
    81c4:	2b01      	cmp	r3, #1
    81c6:	d103      	bne.n	81d0 <Dio_ValidateChannelForWrite+0x84>
        {
            Valid = (Std_ReturnType)E_OK;
    81c8:	2300      	movs	r3, #0
    81ca:	f88d 300f 	strb.w	r3, [sp, #15]
        if ((uint32)1 == ((u32ChannelToPartitionMap & ((uint32)1 << CoreId)) >> CoreId))
    81ce:	e00e      	b.n	81ee <Dio_ValidateChannelForWrite+0xa2>
        }
        else
        {
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_CONFIG);
    81d0:	f89d 2005 	ldrb.w	r2, [sp, #5]
    81d4:	23f0      	movs	r3, #240	; 0xf0
    81d6:	2100      	movs	r1, #0
    81d8:	2078      	movs	r0, #120	; 0x78
    81da:	f010 fd77 	bl	18ccc <Det_ReportError>
        if ((uint32)1 == ((u32ChannelToPartitionMap & ((uint32)1 << CoreId)) >> CoreId))
    81de:	e006      	b.n	81ee <Dio_ValidateChannelForWrite+0xa2>
        }
    }
    else
    {
        (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_INVALID_CHANNEL_ID);
    81e0:	f89d 2005 	ldrb.w	r2, [sp, #5]
    81e4:	230a      	movs	r3, #10
    81e6:	2100      	movs	r1, #0
    81e8:	2078      	movs	r0, #120	; 0x78
    81ea:	f010 fd6f 	bl	18ccc <Det_ReportError>
    }

    return Valid;
    81ee:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    81f2:	4618      	mov	r0, r3
    81f4:	b005      	add	sp, #20
    81f6:	f85d fb04 	ldr.w	pc, [sp], #4
    81fa:	bf00      	nop
    81fc:	0001a8b4 	.word	0x0001a8b4
    8200:	0001a8dc 	.word	0x0001a8dc

00008204 <Dio_ValidateChannelForRead>:
static inline Std_ReturnType Dio_ValidateChannelForRead
(
    Dio_ChannelType ChannelId,
    uint8 u8ServiceId
)
{
    8204:	b500      	push	{lr}
    8206:	b085      	sub	sp, #20
    8208:	4603      	mov	r3, r0
    820a:	460a      	mov	r2, r1
    820c:	f8ad 3006 	strh.w	r3, [sp, #6]
    8210:	4613      	mov	r3, r2
    8212:	f88d 3005 	strb.w	r3, [sp, #5]
    Std_ReturnType Valid  = (Std_ReturnType)E_NOT_OK;
    8216:	2301      	movs	r3, #1
    8218:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 CoreId = (uint8)Dio_GetCoreID();
    821c:	2300      	movs	r3, #0
    821e:	f88d 300e 	strb.w	r3, [sp, #14]
    Dio_ChannelType maxChannelId = (Dio_ChannelType)DIO_NUM_CHANNELS_U16;
    8222:	2390      	movs	r3, #144	; 0x90
    8224:	f8ad 300c 	strh.w	r3, [sp, #12]
        maxChannelId = (Dio_ChannelType)(SIUL2_DIO_IP_MAX_MSCR_REGISTERS + SIUL2_DIO_IP_MAX_SIUL2_AE_CHANNELS);
    }
#endif /* SIUL2_DIO_IP_HAS_SIUL2_AE_INSTANCE */

    /* Check if that channel ID is available for read */
    if ((((Dio_ChannelType)(ChannelId) <= (Dio_ChannelType)maxChannelId)) &&
    8228:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    822c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8230:	429a      	cmp	r2, r3
    8232:	d831      	bhi.n	8298 <Dio_ValidateChannelForRead+0x94>
        ((Dio_PortLevelType)0 != (Dio_aAvailablePinsForRead[(DIO_IPW_PORTID_EXTRACT(ChannelId))] &
    8234:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8238:	095b      	lsrs	r3, r3, #5
    823a:	b29b      	uxth	r3, r3
    823c:	461a      	mov	r2, r3
    823e:	4b1d      	ldr	r3, [pc, #116]	; (82b4 <Dio_ValidateChannelForRead+0xb0>)
    8240:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                                  (DIO_IPW_CHECK_CHANNEL_VALIDITY((uint16)ChannelId))
    8244:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8248:	f003 031f 	and.w	r3, r3, #31
        ((Dio_PortLevelType)0 != (Dio_aAvailablePinsForRead[(DIO_IPW_PORTID_EXTRACT(ChannelId))] &
    824c:	fa22 f303 	lsr.w	r3, r2, r3
    8250:	f003 0301 	and.w	r3, r3, #1
    if ((((Dio_ChannelType)(ChannelId) <= (Dio_ChannelType)maxChannelId)) &&
    8254:	2b00      	cmp	r3, #0
    8256:	d01f      	beq.n	8298 <Dio_ValidateChannelForRead+0x94>
        else
        {
            u32ChannelToPartitionMap = Dio_ConfigPC.pau32Dio_ChannelToPartitionMap[ChannelId];
        }
#else
        u32ChannelToPartitionMap = Dio_ConfigPC.pau32Dio_ChannelToPartitionMap[ChannelId];
    8258:	4b17      	ldr	r3, [pc, #92]	; (82b8 <Dio_ValidateChannelForRead+0xb4>)
    825a:	689a      	ldr	r2, [r3, #8]
    825c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8260:	009b      	lsls	r3, r3, #2
    8262:	4413      	add	r3, r2
    8264:	681b      	ldr	r3, [r3, #0]
    8266:	9302      	str	r3, [sp, #8]
#endif /* SIUL2_DIO_IP_HAS_SIUL2_AE_INSTANCE */
        /* Check if port was assigned to the current coreID */
        if ((uint32)1 == ((u32ChannelToPartitionMap & ((uint32)1 << CoreId)) >> CoreId))
    8268:	f89d 300e 	ldrb.w	r3, [sp, #14]
    826c:	2201      	movs	r2, #1
    826e:	409a      	lsls	r2, r3
    8270:	9b02      	ldr	r3, [sp, #8]
    8272:	401a      	ands	r2, r3
    8274:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8278:	fa22 f303 	lsr.w	r3, r2, r3
    827c:	2b01      	cmp	r3, #1
    827e:	d103      	bne.n	8288 <Dio_ValidateChannelForRead+0x84>
        {
            Valid = (Std_ReturnType)E_OK;
    8280:	2300      	movs	r3, #0
    8282:	f88d 300f 	strb.w	r3, [sp, #15]
        if ((uint32)1 == ((u32ChannelToPartitionMap & ((uint32)1 << CoreId)) >> CoreId))
    8286:	e00e      	b.n	82a6 <Dio_ValidateChannelForRead+0xa2>
        }
        else
        {
            /* Raise Det error when invalid serviceID */
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_CONFIG);
    8288:	f89d 2005 	ldrb.w	r2, [sp, #5]
    828c:	23f0      	movs	r3, #240	; 0xf0
    828e:	2100      	movs	r1, #0
    8290:	2078      	movs	r0, #120	; 0x78
    8292:	f010 fd1b 	bl	18ccc <Det_ReportError>
        if ((uint32)1 == ((u32ChannelToPartitionMap & ((uint32)1 << CoreId)) >> CoreId))
    8296:	e006      	b.n	82a6 <Dio_ValidateChannelForRead+0xa2>
        }
    }
    else
    {
        /* Raise Det error when invalid channel ID */
        (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_INVALID_CHANNEL_ID);
    8298:	f89d 2005 	ldrb.w	r2, [sp, #5]
    829c:	230a      	movs	r3, #10
    829e:	2100      	movs	r1, #0
    82a0:	2078      	movs	r0, #120	; 0x78
    82a2:	f010 fd13 	bl	18ccc <Det_ReportError>
    }

    return Valid;
    82a6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    82aa:	4618      	mov	r0, r3
    82ac:	b005      	add	sp, #20
    82ae:	f85d fb04 	ldr.w	pc, [sp], #4
    82b2:	bf00      	nop
    82b4:	0001a8c8 	.word	0x0001a8c8
    82b8:	0001a8dc 	.word	0x0001a8dc

000082bc <Dio_ValidatePortForWrite>:
static inline Std_ReturnType Dio_ValidatePortForWrite
(
    Dio_PortType PortId,
    uint8 u8ServiceId
)
{
    82bc:	b500      	push	{lr}
    82be:	b085      	sub	sp, #20
    82c0:	4603      	mov	r3, r0
    82c2:	460a      	mov	r2, r1
    82c4:	f88d 3007 	strb.w	r3, [sp, #7]
    82c8:	4613      	mov	r3, r2
    82ca:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType Valid  = (Std_ReturnType)E_NOT_OK;
    82ce:	2301      	movs	r3, #1
    82d0:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 CoreId = (uint8)Dio_GetCoreID();
    82d4:	2300      	movs	r3, #0
    82d6:	f88d 300e 	strb.w	r3, [sp, #14]

    if (((uint8)(PortId) < DIO_NUM_PORTS_U16) &&
    82da:	f89d 3007 	ldrb.w	r3, [sp, #7]
    82de:	2b04      	cmp	r3, #4
    82e0:	d825      	bhi.n	832e <Dio_ValidatePortForWrite+0x72>
        (Dio_aAvailablePinsForWrite[(uint8)(PortId)] != DIO_NO_AVAILABLE_CHANNELS_U16)
    82e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    82e6:	4a18      	ldr	r2, [pc, #96]	; (8348 <Dio_ValidatePortForWrite+0x8c>)
    82e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (((uint8)(PortId) < DIO_NUM_PORTS_U16) &&
    82ec:	2b00      	cmp	r3, #0
    82ee:	d01e      	beq.n	832e <Dio_ValidatePortForWrite+0x72>
       )
    {
        if ((uint32)1 == ((Dio_ConfigPC.pau32Dio_PortToPartitionMap[PortId] & ((uint32)1 << CoreId)) >> CoreId))
    82f0:	4b16      	ldr	r3, [pc, #88]	; (834c <Dio_ValidatePortForWrite+0x90>)
    82f2:	68da      	ldr	r2, [r3, #12]
    82f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    82f8:	009b      	lsls	r3, r3, #2
    82fa:	4413      	add	r3, r2
    82fc:	681a      	ldr	r2, [r3, #0]
    82fe:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8302:	2101      	movs	r1, #1
    8304:	fa01 f303 	lsl.w	r3, r1, r3
    8308:	401a      	ands	r2, r3
    830a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    830e:	fa22 f303 	lsr.w	r3, r2, r3
    8312:	2b01      	cmp	r3, #1
    8314:	d103      	bne.n	831e <Dio_ValidatePortForWrite+0x62>
        {
            Valid = ( Std_ReturnType)E_OK;
    8316:	2300      	movs	r3, #0
    8318:	f88d 300f 	strb.w	r3, [sp, #15]
        if ((uint32)1 == ((Dio_ConfigPC.pau32Dio_PortToPartitionMap[PortId] & ((uint32)1 << CoreId)) >> CoreId))
    831c:	e00e      	b.n	833c <Dio_ValidatePortForWrite+0x80>
        }
        else
        {
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_CONFIG);
    831e:	f89d 2006 	ldrb.w	r2, [sp, #6]
    8322:	23f0      	movs	r3, #240	; 0xf0
    8324:	2100      	movs	r1, #0
    8326:	2078      	movs	r0, #120	; 0x78
    8328:	f010 fcd0 	bl	18ccc <Det_ReportError>
        if ((uint32)1 == ((Dio_ConfigPC.pau32Dio_PortToPartitionMap[PortId] & ((uint32)1 << CoreId)) >> CoreId))
    832c:	e006      	b.n	833c <Dio_ValidatePortForWrite+0x80>
        }
    }
    else
    {
        (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_INVALID_PORT_ID);
    832e:	f89d 2006 	ldrb.w	r2, [sp, #6]
    8332:	2314      	movs	r3, #20
    8334:	2100      	movs	r1, #0
    8336:	2078      	movs	r0, #120	; 0x78
    8338:	f010 fcc8 	bl	18ccc <Det_ReportError>
    }

    return Valid;
    833c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8340:	4618      	mov	r0, r3
    8342:	b005      	add	sp, #20
    8344:	f85d fb04 	ldr.w	pc, [sp], #4
    8348:	0001a8b4 	.word	0x0001a8b4
    834c:	0001a8dc 	.word	0x0001a8dc

00008350 <Dio_ValidatePortForRead>:
static inline Std_ReturnType Dio_ValidatePortForRead
(
    Dio_PortType PortId,
    uint8 u8ServiceId
)
{
    8350:	b500      	push	{lr}
    8352:	b085      	sub	sp, #20
    8354:	4603      	mov	r3, r0
    8356:	460a      	mov	r2, r1
    8358:	f88d 3007 	strb.w	r3, [sp, #7]
    835c:	4613      	mov	r3, r2
    835e:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType Valid  = (Std_ReturnType)E_NOT_OK;
    8362:	2301      	movs	r3, #1
    8364:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 CoreId = (uint8)Dio_GetCoreID();
    8368:	2300      	movs	r3, #0
    836a:	f88d 300e 	strb.w	r3, [sp, #14]

    /* Check input parameters are available for read */
    if (((uint8)(PortId) < DIO_NUM_PORTS_U16) &&
    836e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8372:	2b04      	cmp	r3, #4
    8374:	d825      	bhi.n	83c2 <Dio_ValidatePortForRead+0x72>
        (Dio_aAvailablePinsForRead[(uint8)(PortId)] != DIO_NO_AVAILABLE_CHANNELS_U16)
    8376:	f89d 3007 	ldrb.w	r3, [sp, #7]
    837a:	4a18      	ldr	r2, [pc, #96]	; (83dc <Dio_ValidatePortForRead+0x8c>)
    837c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (((uint8)(PortId) < DIO_NUM_PORTS_U16) &&
    8380:	2b00      	cmp	r3, #0
    8382:	d01e      	beq.n	83c2 <Dio_ValidatePortForRead+0x72>
       )
    {
        /* Check if Port was assigned to the current coreID */
        if ((uint32)1 == ((Dio_ConfigPC.pau32Dio_PortToPartitionMap[PortId] & ((uint32)1 << CoreId)) >> CoreId))
    8384:	4b16      	ldr	r3, [pc, #88]	; (83e0 <Dio_ValidatePortForRead+0x90>)
    8386:	68da      	ldr	r2, [r3, #12]
    8388:	f89d 3007 	ldrb.w	r3, [sp, #7]
    838c:	009b      	lsls	r3, r3, #2
    838e:	4413      	add	r3, r2
    8390:	681a      	ldr	r2, [r3, #0]
    8392:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8396:	2101      	movs	r1, #1
    8398:	fa01 f303 	lsl.w	r3, r1, r3
    839c:	401a      	ands	r2, r3
    839e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    83a2:	fa22 f303 	lsr.w	r3, r2, r3
    83a6:	2b01      	cmp	r3, #1
    83a8:	d103      	bne.n	83b2 <Dio_ValidatePortForRead+0x62>
        {
            Valid = ( Std_ReturnType)E_OK;
    83aa:	2300      	movs	r3, #0
    83ac:	f88d 300f 	strb.w	r3, [sp, #15]
        if ((uint32)1 == ((Dio_ConfigPC.pau32Dio_PortToPartitionMap[PortId] & ((uint32)1 << CoreId)) >> CoreId))
    83b0:	e00e      	b.n	83d0 <Dio_ValidatePortForRead+0x80>
        }
        else
        {
            /* Raise Det error when invalid serviceID */
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_CONFIG);
    83b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
    83b6:	23f0      	movs	r3, #240	; 0xf0
    83b8:	2100      	movs	r1, #0
    83ba:	2078      	movs	r0, #120	; 0x78
    83bc:	f010 fc86 	bl	18ccc <Det_ReportError>
        if ((uint32)1 == ((Dio_ConfigPC.pau32Dio_PortToPartitionMap[PortId] & ((uint32)1 << CoreId)) >> CoreId))
    83c0:	e006      	b.n	83d0 <Dio_ValidatePortForRead+0x80>
        }
    }
    else
    {
        /* Raise Det error when invalid port ID */
        (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_INVALID_PORT_ID);
    83c2:	f89d 2006 	ldrb.w	r2, [sp, #6]
    83c6:	2314      	movs	r3, #20
    83c8:	2100      	movs	r1, #0
    83ca:	2078      	movs	r0, #120	; 0x78
    83cc:	f010 fc7e 	bl	18ccc <Det_ReportError>
    }

    return Valid;
    83d0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    83d4:	4618      	mov	r0, r3
    83d6:	b005      	add	sp, #20
    83d8:	f85d fb04 	ldr.w	pc, [sp], #4
    83dc:	0001a8c8 	.word	0x0001a8c8
    83e0:	0001a8dc 	.word	0x0001a8dc

000083e4 <Dio_ValidateChannelGroupForWrite>:
static inline Std_ReturnType Dio_ValidateChannelGroupForWrite
(
    const Dio_ChannelGroupType * pChannelGroup,
    uint8                u8ServiceId
)
{
    83e4:	b500      	push	{lr}
    83e6:	b085      	sub	sp, #20
    83e8:	9001      	str	r0, [sp, #4]
    83ea:	460b      	mov	r3, r1
    83ec:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType Valid = (Std_ReturnType)E_NOT_OK;
    83f0:	2301      	movs	r3, #1
    83f2:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ChannelGroup = pChannelGroup->port;
    83f6:	9b01      	ldr	r3, [sp, #4]
    83f8:	781b      	ldrb	r3, [r3, #0]
    83fa:	f88d 300e 	strb.w	r3, [sp, #14]

    /* Compiler_Warning: Pointer to channel group is converted to unsigned long in order for it to
                          be compared with the boundaries of the channel group list. */
    if ((((pointerSizeType)(pChannelGroup)) >= ((pointerSizeType)Dio_ConfigPC.pChannelGroupList))                                  &&  \
    83fe:	4b19      	ldr	r3, [pc, #100]	; (8464 <Dio_ValidateChannelGroupForWrite+0x80>)
    8400:	685b      	ldr	r3, [r3, #4]
    8402:	461a      	mov	r2, r3
    8404:	9b01      	ldr	r3, [sp, #4]
    8406:	429a      	cmp	r2, r3
    8408:	d81f      	bhi.n	844a <Dio_ValidateChannelGroupForWrite+0x66>
        (((pointerSizeType)(pChannelGroup)) <= (pointerSizeType)(&Dio_ConfigPC.pChannelGroupList[Dio_ConfigPC.u8NumChannelGroups - 1U])) &&  \
    840a:	4b16      	ldr	r3, [pc, #88]	; (8464 <Dio_ValidateChannelGroupForWrite+0x80>)
    840c:	685a      	ldr	r2, [r3, #4]
    840e:	4b15      	ldr	r3, [pc, #84]	; (8464 <Dio_ValidateChannelGroupForWrite+0x80>)
    8410:	781b      	ldrb	r3, [r3, #0]
    8412:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    8416:	3b01      	subs	r3, #1
    8418:	00db      	lsls	r3, r3, #3
    841a:	4413      	add	r3, r2
    841c:	461a      	mov	r2, r3
    841e:	9b01      	ldr	r3, [sp, #4]
    if ((((pointerSizeType)(pChannelGroup)) >= ((pointerSizeType)Dio_ConfigPC.pChannelGroupList))                                  &&  \
    8420:	429a      	cmp	r2, r3
    8422:	d312      	bcc.n	844a <Dio_ValidateChannelGroupForWrite+0x66>
        (((pointerSizeType)(pChannelGroup)) <= (pointerSizeType)(&Dio_ConfigPC.pChannelGroupList[Dio_ConfigPC.u8NumChannelGroups - 1U])) &&  \
    8424:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8428:	2b04      	cmp	r3, #4
    842a:	d80e      	bhi.n	844a <Dio_ValidateChannelGroupForWrite+0x66>
        (u8ChannelGroup < DIO_NUM_PORTS_U16)                                                       &&  \
        (Dio_aAvailablePinsForWrite[u8ChannelGroup] != DIO_NO_AVAILABLE_CHANNELS_U16)              &&  \
    842c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8430:	4a0d      	ldr	r2, [pc, #52]	; (8468 <Dio_ValidateChannelGroupForWrite+0x84>)
    8432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        (u8ChannelGroup < DIO_NUM_PORTS_U16)                                                       &&  \
    8436:	2b00      	cmp	r3, #0
    8438:	d007      	beq.n	844a <Dio_ValidateChannelGroupForWrite+0x66>
        ((uint8)(pChannelGroup->u8offset) <= DIO_MAX_VALID_OFFSET_U8)
    843a:	9b01      	ldr	r3, [sp, #4]
    843c:	785b      	ldrb	r3, [r3, #1]
        (Dio_aAvailablePinsForWrite[u8ChannelGroup] != DIO_NO_AVAILABLE_CHANNELS_U16)              &&  \
    843e:	2b1f      	cmp	r3, #31
    8440:	d803      	bhi.n	844a <Dio_ValidateChannelGroupForWrite+0x66>
       )
    {
        Valid = (Std_ReturnType)E_OK;
    8442:	2300      	movs	r3, #0
    8444:	f88d 300f 	strb.w	r3, [sp, #15]
    8448:	e006      	b.n	8458 <Dio_ValidateChannelGroupForWrite+0x74>
    }
    else
    {
        (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_INVALID_GROUP_ID);
    844a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    844e:	231f      	movs	r3, #31
    8450:	2100      	movs	r1, #0
    8452:	2078      	movs	r0, #120	; 0x78
    8454:	f010 fc3a 	bl	18ccc <Det_ReportError>
    }

    return Valid;
    8458:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    845c:	4618      	mov	r0, r3
    845e:	b005      	add	sp, #20
    8460:	f85d fb04 	ldr.w	pc, [sp], #4
    8464:	0001a8dc 	.word	0x0001a8dc
    8468:	0001a8b4 	.word	0x0001a8b4

0000846c <Dio_ValidateChannelGroupForRead>:
static inline Std_ReturnType Dio_ValidateChannelGroupForRead
(
    const Dio_ChannelGroupType * pChannelGroup,
    uint8                 u8ServiceId
)
{
    846c:	b500      	push	{lr}
    846e:	b085      	sub	sp, #20
    8470:	9001      	str	r0, [sp, #4]
    8472:	460b      	mov	r3, r1
    8474:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType Valid = (Std_ReturnType)E_NOT_OK;
    8478:	2301      	movs	r3, #1
    847a:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ChannelGroup = pChannelGroup->port;
    847e:	9b01      	ldr	r3, [sp, #4]
    8480:	781b      	ldrb	r3, [r3, #0]
    8482:	f88d 300e 	strb.w	r3, [sp, #14]

    /* Compiler_Warning: Pointer to channel group is converted to unsigned long in order for it to
                          be compared with the boundaries of the channel group list. */
    if ((((pointerSizeType)(pChannelGroup)) >= ((pointerSizeType)Dio_ConfigPC.pChannelGroupList))                                  &&  \
    8486:	4b19      	ldr	r3, [pc, #100]	; (84ec <Dio_ValidateChannelGroupForRead+0x80>)
    8488:	685b      	ldr	r3, [r3, #4]
    848a:	461a      	mov	r2, r3
    848c:	9b01      	ldr	r3, [sp, #4]
    848e:	429a      	cmp	r2, r3
    8490:	d81f      	bhi.n	84d2 <Dio_ValidateChannelGroupForRead+0x66>
        (((pointerSizeType)(pChannelGroup)) <= (pointerSizeType)(&Dio_ConfigPC.pChannelGroupList[Dio_ConfigPC.u8NumChannelGroups - 1U])) &&  \
    8492:	4b16      	ldr	r3, [pc, #88]	; (84ec <Dio_ValidateChannelGroupForRead+0x80>)
    8494:	685a      	ldr	r2, [r3, #4]
    8496:	4b15      	ldr	r3, [pc, #84]	; (84ec <Dio_ValidateChannelGroupForRead+0x80>)
    8498:	781b      	ldrb	r3, [r3, #0]
    849a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    849e:	3b01      	subs	r3, #1
    84a0:	00db      	lsls	r3, r3, #3
    84a2:	4413      	add	r3, r2
    84a4:	461a      	mov	r2, r3
    84a6:	9b01      	ldr	r3, [sp, #4]
    if ((((pointerSizeType)(pChannelGroup)) >= ((pointerSizeType)Dio_ConfigPC.pChannelGroupList))                                  &&  \
    84a8:	429a      	cmp	r2, r3
    84aa:	d312      	bcc.n	84d2 <Dio_ValidateChannelGroupForRead+0x66>
        (((pointerSizeType)(pChannelGroup)) <= (pointerSizeType)(&Dio_ConfigPC.pChannelGroupList[Dio_ConfigPC.u8NumChannelGroups - 1U])) &&  \
    84ac:	f89d 300e 	ldrb.w	r3, [sp, #14]
    84b0:	2b04      	cmp	r3, #4
    84b2:	d80e      	bhi.n	84d2 <Dio_ValidateChannelGroupForRead+0x66>
        (u8ChannelGroup < DIO_NUM_PORTS_U16)                                                       &&  \
        (Dio_aAvailablePinsForRead[u8ChannelGroup] != DIO_NO_AVAILABLE_CHANNELS_U16)               &&  \
    84b4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    84b8:	4a0d      	ldr	r2, [pc, #52]	; (84f0 <Dio_ValidateChannelGroupForRead+0x84>)
    84ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        (u8ChannelGroup < DIO_NUM_PORTS_U16)                                                       &&  \
    84be:	2b00      	cmp	r3, #0
    84c0:	d007      	beq.n	84d2 <Dio_ValidateChannelGroupForRead+0x66>
        ((uint8)(pChannelGroup->u8offset) <= DIO_MAX_VALID_OFFSET_U8)
    84c2:	9b01      	ldr	r3, [sp, #4]
    84c4:	785b      	ldrb	r3, [r3, #1]
        (Dio_aAvailablePinsForRead[u8ChannelGroup] != DIO_NO_AVAILABLE_CHANNELS_U16)               &&  \
    84c6:	2b1f      	cmp	r3, #31
    84c8:	d803      	bhi.n	84d2 <Dio_ValidateChannelGroupForRead+0x66>
       )
    {
        Valid = (Std_ReturnType)E_OK;
    84ca:	2300      	movs	r3, #0
    84cc:	f88d 300f 	strb.w	r3, [sp, #15]
    84d0:	e006      	b.n	84e0 <Dio_ValidateChannelGroupForRead+0x74>
    }
    else
    {
        (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, u8ServiceId, DIO_E_PARAM_INVALID_GROUP_ID);
    84d2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    84d6:	231f      	movs	r3, #31
    84d8:	2100      	movs	r1, #0
    84da:	2078      	movs	r0, #120	; 0x78
    84dc:	f010 fbf6 	bl	18ccc <Det_ReportError>
    }

    return Valid;
    84e0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    84e4:	4618      	mov	r0, r3
    84e6:	b005      	add	sp, #20
    84e8:	f85d fb04 	ldr.w	pc, [sp], #4
    84ec:	0001a8dc 	.word	0x0001a8dc
    84f0:	0001a8c8 	.word	0x0001a8c8

000084f4 <Dio_GetVersionInfo>:
*/
void Dio_GetVersionInfo
(
    Std_VersionInfoType * VersionInfo
)
{
    84f4:	b500      	push	{lr}
    84f6:	b083      	sub	sp, #12
    84f8:	9001      	str	r0, [sp, #4]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    if (NULL_PTR == VersionInfo)
    84fa:	9b01      	ldr	r3, [sp, #4]
    84fc:	2b00      	cmp	r3, #0
    84fe:	d106      	bne.n	850e <Dio_GetVersionInfo+0x1a>
    {
        (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_GETVERSIONINFO_ID, DIO_E_PARAM_POINTER);
    8500:	2320      	movs	r3, #32
    8502:	2212      	movs	r2, #18
    8504:	2100      	movs	r1, #0
    8506:	2078      	movs	r0, #120	; 0x78
    8508:	f010 fbe0 	bl	18ccc <Det_ReportError>
        VersionInfo->moduleID         = (uint16)DIO_MODULE_ID;
        VersionInfo->sw_major_version = (uint8)DIO_SW_MAJOR_VERSION;
        VersionInfo->sw_minor_version = (uint8)DIO_SW_MINOR_VERSION;
        VersionInfo->sw_patch_version = (uint8)DIO_SW_PATCH_VERSION;
    }
}
    850c:	e00e      	b.n	852c <Dio_GetVersionInfo+0x38>
        VersionInfo->vendorID         = (uint16)DIO_VENDOR_ID;
    850e:	9b01      	ldr	r3, [sp, #4]
    8510:	222b      	movs	r2, #43	; 0x2b
    8512:	801a      	strh	r2, [r3, #0]
        VersionInfo->moduleID         = (uint16)DIO_MODULE_ID;
    8514:	9b01      	ldr	r3, [sp, #4]
    8516:	2278      	movs	r2, #120	; 0x78
    8518:	805a      	strh	r2, [r3, #2]
        VersionInfo->sw_major_version = (uint8)DIO_SW_MAJOR_VERSION;
    851a:	9b01      	ldr	r3, [sp, #4]
    851c:	2202      	movs	r2, #2
    851e:	711a      	strb	r2, [r3, #4]
        VersionInfo->sw_minor_version = (uint8)DIO_SW_MINOR_VERSION;
    8520:	9b01      	ldr	r3, [sp, #4]
    8522:	2200      	movs	r2, #0
    8524:	715a      	strb	r2, [r3, #5]
        VersionInfo->sw_patch_version = (uint8)DIO_SW_PATCH_VERSION;
    8526:	9b01      	ldr	r3, [sp, #4]
    8528:	2200      	movs	r2, #0
    852a:	719a      	strb	r2, [r3, #6]
}
    852c:	bf00      	nop
    852e:	b003      	add	sp, #12
    8530:	f85d fb04 	ldr.w	pc, [sp], #4

00008534 <Dio_ReadChannel>:
*/
Dio_LevelType Dio_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    8534:	b500      	push	{lr}
    8536:	b085      	sub	sp, #20
    8538:	4603      	mov	r3, r0
    853a:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    853e:	2300      	movs	r3, #0
    8540:	f88d 300f 	strb.w	r3, [sp, #15]

#if (STD_ON == DIO_DEV_ERROR_DETECT)
    Std_ReturnType Valid = Dio_ValidateChannelForRead(ChannelId, DIO_READCHANNEL_ID);
    8544:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8548:	2100      	movs	r1, #0
    854a:	4618      	mov	r0, r3
    854c:	f7ff fe5a 	bl	8204 <Dio_ValidateChannelForRead>
    8550:	4603      	mov	r3, r0
    8552:	f88d 300e 	strb.w	r3, [sp, #14]

    if ((Std_ReturnType)E_OK == Valid)
    8556:	f89d 300e 	ldrb.w	r3, [sp, #14]
    855a:	2b00      	cmp	r3, #0
    855c:	d107      	bne.n	856e <Dio_ReadChannel+0x3a>
    {
#endif
        ChannelLevel = Dio_Ipw_ReadChannel(ChannelId);
    855e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8562:	4618      	mov	r0, r3
    8564:	f000 f8c6 	bl	86f4 <Dio_Ipw_ReadChannel>
    8568:	4603      	mov	r3, r0
    856a:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return ChannelLevel;
    856e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8572:	4618      	mov	r0, r3
    8574:	b005      	add	sp, #20
    8576:	f85d fb04 	ldr.w	pc, [sp], #4

0000857a <Dio_WriteChannel>:
void Dio_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    857a:	b500      	push	{lr}
    857c:	b085      	sub	sp, #20
    857e:	4603      	mov	r3, r0
    8580:	460a      	mov	r2, r1
    8582:	f8ad 3006 	strh.w	r3, [sp, #6]
    8586:	4613      	mov	r3, r2
    8588:	f88d 3005 	strb.w	r3, [sp, #5]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    Std_ReturnType Valid = Dio_ValidateChannelForWrite(ChannelId, DIO_WRITECHANNEL_ID);
    858c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8590:	2101      	movs	r1, #1
    8592:	4618      	mov	r0, r3
    8594:	f7ff fdda 	bl	814c <Dio_ValidateChannelForWrite>
    8598:	4603      	mov	r3, r0
    859a:	f88d 300f 	strb.w	r3, [sp, #15]

    if ((Std_ReturnType) E_OK == Valid)
    859e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    85a2:	2b00      	cmp	r3, #0
    85a4:	d113      	bne.n	85ce <Dio_WriteChannel+0x54>
    {
        Valid = Dio_ValidateChannelLevel(Level);
    85a6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    85aa:	4618      	mov	r0, r3
    85ac:	f7ff fdae 	bl	810c <Dio_ValidateChannelLevel>
    85b0:	4603      	mov	r3, r0
    85b2:	f88d 300f 	strb.w	r3, [sp, #15]
        if ((Std_ReturnType) E_OK == Valid)
    85b6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    85ba:	2b00      	cmp	r3, #0
    85bc:	d107      	bne.n	85ce <Dio_WriteChannel+0x54>
        {
#endif
            Dio_Ipw_WriteChannel(ChannelId, Level);
    85be:	f89d 2005 	ldrb.w	r2, [sp, #5]
    85c2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    85c6:	4611      	mov	r1, r2
    85c8:	4618      	mov	r0, r3
    85ca:	f000 f8b9 	bl	8740 <Dio_Ipw_WriteChannel>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
        }
    }
#endif

}
    85ce:	bf00      	nop
    85d0:	b005      	add	sp, #20
    85d2:	f85d fb04 	ldr.w	pc, [sp], #4

000085d6 <Dio_FlipChannel>:
*/
Dio_LevelType Dio_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    85d6:	b500      	push	{lr}
    85d8:	b085      	sub	sp, #20
    85da:	4603      	mov	r3, r0
    85dc:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    85e0:	2300      	movs	r3, #0
    85e2:	f88d 300f 	strb.w	r3, [sp, #15]

#if (STD_ON == DIO_DEV_ERROR_DETECT)
    Std_ReturnType Valid = Dio_ValidateChannelForWrite(ChannelId, DIO_FLIPCHANNEL_ID);
    85e6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    85ea:	2111      	movs	r1, #17
    85ec:	4618      	mov	r0, r3
    85ee:	f7ff fdad 	bl	814c <Dio_ValidateChannelForWrite>
    85f2:	4603      	mov	r3, r0
    85f4:	f88d 300e 	strb.w	r3, [sp, #14]

    if ((Std_ReturnType)E_OK == Valid)
    85f8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    85fc:	2b00      	cmp	r3, #0
    85fe:	d107      	bne.n	8610 <Dio_FlipChannel+0x3a>
    {
#endif
        ChannelLevel = Dio_Ipw_FlipChannel(ChannelId);
    8600:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8604:	4618      	mov	r0, r3
    8606:	f000 f8c1 	bl	878c <Dio_Ipw_FlipChannel>
    860a:	4603      	mov	r3, r0
    860c:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

   return ChannelLevel;
    8610:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8614:	4618      	mov	r0, r3
    8616:	b005      	add	sp, #20
    8618:	f85d fb04 	ldr.w	pc, [sp], #4

0000861c <Dio_ReadPort>:
*/
Dio_PortLevelType Dio_ReadPort
(
    Dio_PortType PortId
)
{
    861c:	b500      	push	{lr}
    861e:	b085      	sub	sp, #20
    8620:	4603      	mov	r3, r0
    8622:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    8626:	2300      	movs	r3, #0
    8628:	9303      	str	r3, [sp, #12]

#if (STD_ON == DIO_DEV_ERROR_DETECT)
    Std_ReturnType Valid = Dio_ValidatePortForRead(PortId, DIO_READPORT_ID);
    862a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    862e:	2102      	movs	r1, #2
    8630:	4618      	mov	r0, r3
    8632:	f7ff fe8d 	bl	8350 <Dio_ValidatePortForRead>
    8636:	4603      	mov	r3, r0
    8638:	f88d 300b 	strb.w	r3, [sp, #11]

    if ((Std_ReturnType) E_OK == Valid)
    863c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8640:	2b00      	cmp	r3, #0
    8642:	d105      	bne.n	8650 <Dio_ReadPort+0x34>
    {
#endif
        PortLevel = Dio_Ipw_ReadPort(PortId);
    8644:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8648:	4618      	mov	r0, r3
    864a:	f000 f8d5 	bl	87f8 <Dio_Ipw_ReadPort>
    864e:	9003      	str	r0, [sp, #12]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return PortLevel;
    8650:	9b03      	ldr	r3, [sp, #12]
}
    8652:	4618      	mov	r0, r3
    8654:	b005      	add	sp, #20
    8656:	f85d fb04 	ldr.w	pc, [sp], #4

0000865a <Dio_WritePort>:
void Dio_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    865a:	b500      	push	{lr}
    865c:	b085      	sub	sp, #20
    865e:	4603      	mov	r3, r0
    8660:	9100      	str	r1, [sp, #0]
    8662:	f88d 3007 	strb.w	r3, [sp, #7]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    Std_ReturnType Valid = Dio_ValidatePortForWrite(PortId, DIO_WRITEPORT_ID);
    8666:	f89d 3007 	ldrb.w	r3, [sp, #7]
    866a:	2103      	movs	r1, #3
    866c:	4618      	mov	r0, r3
    866e:	f7ff fe25 	bl	82bc <Dio_ValidatePortForWrite>
    8672:	4603      	mov	r3, r0
    8674:	f88d 300f 	strb.w	r3, [sp, #15]

    if ((Std_ReturnType)E_OK == Valid)
    8678:	f89d 300f 	ldrb.w	r3, [sp, #15]
    867c:	2b00      	cmp	r3, #0
    867e:	d105      	bne.n	868c <Dio_WritePort+0x32>
    {
#endif
        Dio_Ipw_WritePort(PortId, Level);
    8680:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8684:	9900      	ldr	r1, [sp, #0]
    8686:	4618      	mov	r0, r3
    8688:	f000 f8ce 	bl	8828 <Dio_Ipw_WritePort>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif
}
    868c:	bf00      	nop
    868e:	b005      	add	sp, #20
    8690:	f85d fb04 	ldr.w	pc, [sp], #4

00008694 <Dio_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_ReadChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr
)
{
    8694:	b500      	push	{lr}
    8696:	b085      	sub	sp, #20
    8698:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    869a:	2300      	movs	r3, #0
    869c:	9303      	str	r3, [sp, #12]
    Std_ReturnType Valid;

#ifdef DIO_CHANNEL_GROUPS_AVAILABLE
    CoreId = (uint8)Dio_GetCoreID();
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    Valid = Dio_ValidateChannelGroupForRead(ChannelGroupIdPtr, DIO_READCHANNELGROUP_ID);
    869e:	2104      	movs	r1, #4
    86a0:	9801      	ldr	r0, [sp, #4]
    86a2:	f7ff fee3 	bl	846c <Dio_ValidateChannelGroupForRead>
    86a6:	4603      	mov	r3, r0
    86a8:	f88d 300b 	strb.w	r3, [sp, #11]

    if ((Std_ReturnType)E_OK == Valid)
    86ac:	f89d 300b 	ldrb.w	r3, [sp, #11]
    86b0:	2b00      	cmp	r3, #0
    86b2:	d103      	bne.n	86bc <Dio_ReadChannelGroup+0x28>
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            PortLevel = Dio_Ipw_ReadChannelGroup(ChannelGroupIdPtr);
    86b4:	9801      	ldr	r0, [sp, #4]
    86b6:	f000 f8cf 	bl	8858 <Dio_Ipw_ReadChannelGroup>
    86ba:	9003      	str	r0, [sp, #12]
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */

    return PortLevel;
    86bc:	9b03      	ldr	r3, [sp, #12]
}
    86be:	4618      	mov	r0, r3
    86c0:	b005      	add	sp, #20
    86c2:	f85d fb04 	ldr.w	pc, [sp], #4

000086c6 <Dio_WriteChannelGroup>:
void Dio_WriteChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr,
    Dio_PortLevelType Level
)
{
    86c6:	b500      	push	{lr}
    86c8:	b085      	sub	sp, #20
    86ca:	9001      	str	r0, [sp, #4]
    86cc:	9100      	str	r1, [sp, #0]

#ifdef DIO_CHANNEL_GROUPS_AVAILABLE
    CoreId = (uint8)Dio_GetCoreID();
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */

    Valid = Dio_ValidateChannelGroupForWrite(ChannelGroupIdPtr, DIO_WRITECHANNELGROUP_ID);
    86ce:	2105      	movs	r1, #5
    86d0:	9801      	ldr	r0, [sp, #4]
    86d2:	f7ff fe87 	bl	83e4 <Dio_ValidateChannelGroupForWrite>
    86d6:	4603      	mov	r3, r0
    86d8:	f88d 300f 	strb.w	r3, [sp, #15]

    if ((Std_ReturnType)E_OK == Valid)
    86dc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    86e0:	2b00      	cmp	r3, #0
    86e2:	d103      	bne.n	86ec <Dio_WriteChannelGroup+0x26>
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            Dio_Ipw_WriteChannelGroup(ChannelGroupIdPtr, Level);
    86e4:	9900      	ldr	r1, [sp, #0]
    86e6:	9801      	ldr	r0, [sp, #4]
    86e8:	f000 f8d6 	bl	8898 <Dio_Ipw_WriteChannelGroup>
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNELGROUP_ID, DIO_E_PARAM_CONFIG);
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */
}
    86ec:	bf00      	nop
    86ee:	b005      	add	sp, #20
    86f0:	f85d fb04 	ldr.w	pc, [sp], #4

000086f4 <Dio_Ipw_ReadChannel>:
*/
Dio_LevelType Dio_Ipw_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    86f4:	b500      	push	{lr}
    86f6:	b087      	sub	sp, #28
    86f8:	4603      	mov	r3, r0
    86fa:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType) STD_LOW;
    86fe:	2300      	movs	r3, #0
    8700:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    8704:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8708:	095b      	lsrs	r3, r3, #5
    870a:	b29b      	uxth	r3, r3
    870c:	9304      	str	r3, [sp, #16]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    870e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8712:	f003 031f 	and.w	r3, r3, #31
    8716:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    8718:	4a08      	ldr	r2, [pc, #32]	; (873c <Dio_Ipw_ReadChannel+0x48>)
    871a:	9b04      	ldr	r3, [sp, #16]
    871c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8720:	9302      	str	r3, [sp, #8]

    ChannelLevel = Gpio_Dio_Ip_ReadPin(GpioBase, u32PinIndex);
    8722:	9903      	ldr	r1, [sp, #12]
    8724:	9802      	ldr	r0, [sp, #8]
    8726:	f000 f940 	bl	89aa <Gpio_Dio_Ip_ReadPin>
    872a:	4603      	mov	r3, r0
    872c:	f88d 3017 	strb.w	r3, [sp, #23]
    return ChannelLevel;
    8730:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    8734:	4618      	mov	r0, r3
    8736:	b007      	add	sp, #28
    8738:	f85d fb04 	ldr.w	pc, [sp], #4
    873c:	1fff8b28 	.word	0x1fff8b28

00008740 <Dio_Ipw_WriteChannel>:
void Dio_Ipw_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    8740:	b500      	push	{lr}
    8742:	b087      	sub	sp, #28
    8744:	4603      	mov	r3, r0
    8746:	460a      	mov	r2, r1
    8748:	f8ad 3006 	strh.w	r3, [sp, #6]
    874c:	4613      	mov	r3, r2
    874e:	f88d 3005 	strb.w	r3, [sp, #5]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    8752:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8756:	095b      	lsrs	r3, r3, #5
    8758:	b29b      	uxth	r3, r3
    875a:	9305      	str	r3, [sp, #20]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    875c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8760:	f003 031f 	and.w	r3, r3, #31
    8764:	9304      	str	r3, [sp, #16]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    8766:	4a08      	ldr	r2, [pc, #32]	; (8788 <Dio_Ipw_WriteChannel+0x48>)
    8768:	9b05      	ldr	r3, [sp, #20]
    876a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    876e:	9303      	str	r3, [sp, #12]

    Gpio_Dio_Ip_WritePin(GpioBase, u32PinIndex, Level);
    8770:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8774:	461a      	mov	r2, r3
    8776:	9904      	ldr	r1, [sp, #16]
    8778:	9803      	ldr	r0, [sp, #12]
    877a:	f000 f8b7 	bl	88ec <Gpio_Dio_Ip_WritePin>
}
    877e:	bf00      	nop
    8780:	b007      	add	sp, #28
    8782:	f85d fb04 	ldr.w	pc, [sp], #4
    8786:	bf00      	nop
    8788:	1fff8b28 	.word	0x1fff8b28

0000878c <Dio_Ipw_FlipChannel>:
*/
Dio_LevelType Dio_Ipw_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    878c:	b500      	push	{lr}
    878e:	b089      	sub	sp, #36	; 0x24
    8790:	4603      	mov	r3, r0
    8792:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    8796:	2300      	movs	r3, #0
    8798:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;
    uint32 u32PortOutPutLevel;
    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    879c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    87a0:	095b      	lsrs	r3, r3, #5
    87a2:	b29b      	uxth	r3, r3
    87a4:	9306      	str	r3, [sp, #24]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    87a6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    87aa:	f003 031f 	and.w	r3, r3, #31
    87ae:	9305      	str	r3, [sp, #20]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    87b0:	4a10      	ldr	r2, [pc, #64]	; (87f4 <Dio_Ipw_FlipChannel+0x68>)
    87b2:	9b06      	ldr	r3, [sp, #24]
    87b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    87b8:	9304      	str	r3, [sp, #16]

    Gpio_Dio_Ip_TogglePins(GpioBase, ((uint32)1U << u32PinIndex));
    87ba:	2201      	movs	r2, #1
    87bc:	9b05      	ldr	r3, [sp, #20]
    87be:	fa02 f303 	lsl.w	r3, r2, r3
    87c2:	4619      	mov	r1, r3
    87c4:	9804      	ldr	r0, [sp, #16]
    87c6:	f000 f8dc 	bl	8982 <Gpio_Dio_Ip_TogglePins>

    u32PortOutPutLevel = Gpio_Dio_Ip_GetPinsOutput(GpioBase);
    87ca:	9804      	ldr	r0, [sp, #16]
    87cc:	f000 f8bc 	bl	8948 <Gpio_Dio_Ip_GetPinsOutput>
    87d0:	9003      	str	r0, [sp, #12]
    ChannelLevel = (Dio_LevelType)((u32PortOutPutLevel & ((uint32)1U << u32PinIndex)) >> u32PinIndex);
    87d2:	2201      	movs	r2, #1
    87d4:	9b05      	ldr	r3, [sp, #20]
    87d6:	409a      	lsls	r2, r3
    87d8:	9b03      	ldr	r3, [sp, #12]
    87da:	401a      	ands	r2, r3
    87dc:	9b05      	ldr	r3, [sp, #20]
    87de:	fa22 f303 	lsr.w	r3, r2, r3
    87e2:	f88d 301f 	strb.w	r3, [sp, #31]

    return ChannelLevel;
    87e6:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    87ea:	4618      	mov	r0, r3
    87ec:	b009      	add	sp, #36	; 0x24
    87ee:	f85d fb04 	ldr.w	pc, [sp], #4
    87f2:	bf00      	nop
    87f4:	1fff8b28 	.word	0x1fff8b28

000087f8 <Dio_Ipw_ReadPort>:
*/
Dio_PortLevelType Dio_Ipw_ReadPort
(
    Dio_PortType PortId
)
{
    87f8:	b500      	push	{lr}
    87fa:	b085      	sub	sp, #20
    87fc:	4603      	mov	r3, r0
    87fe:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    8802:	2300      	movs	r3, #0
    8804:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    8806:	f89d 3007 	ldrb.w	r3, [sp, #7]
    880a:	4a06      	ldr	r2, [pc, #24]	; (8824 <Dio_Ipw_ReadPort+0x2c>)
    880c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8810:	9302      	str	r3, [sp, #8]

    PortLevel = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    8812:	9802      	ldr	r0, [sp, #8]
    8814:	f000 f8be 	bl	8994 <Gpio_Dio_Ip_ReadPins>
    8818:	9003      	str	r0, [sp, #12]
#endif
#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#endif

    return PortLevel;
    881a:	9b03      	ldr	r3, [sp, #12]
}
    881c:	4618      	mov	r0, r3
    881e:	b005      	add	sp, #20
    8820:	f85d fb04 	ldr.w	pc, [sp], #4
    8824:	1fff8b28 	.word	0x1fff8b28

00008828 <Dio_Ipw_WritePort>:
void Dio_Ipw_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    8828:	b500      	push	{lr}
    882a:	b085      	sub	sp, #20
    882c:	4603      	mov	r3, r0
    882e:	9100      	str	r1, [sp, #0]
    8830:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType CrtLevel = Level;
    8834:	9b00      	ldr	r3, [sp, #0]
    8836:	9303      	str	r3, [sp, #12]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    8838:	f89d 3007 	ldrb.w	r3, [sp, #7]
    883c:	4a05      	ldr	r2, [pc, #20]	; (8854 <Dio_Ipw_WritePort+0x2c>)
    883e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8842:	9302      	str	r3, [sp, #8]

#if (STD_ON == DIO_REVERSEPORTBITS)
    CrtLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(CrtLevel));
#endif /* STD_ON == DIO_REVERSEPORTBITS */
    Gpio_Dio_Ip_WritePins(GpioBase, CrtLevel);
    8844:	9903      	ldr	r1, [sp, #12]
    8846:	9802      	ldr	r0, [sp, #8]
    8848:	f000 f875 	bl	8936 <Gpio_Dio_Ip_WritePins>
}
    884c:	bf00      	nop
    884e:	b005      	add	sp, #20
    8850:	f85d fb04 	ldr.w	pc, [sp], #4
    8854:	1fff8b28 	.word	0x1fff8b28

00008858 <Dio_Ipw_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_Ipw_ReadChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr
)
{
    8858:	b500      	push	{lr}
    885a:	b087      	sub	sp, #28
    885c:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    885e:	2300      	movs	r3, #0
    8860:	9305      	str	r3, [sp, #20]
    Dio_PortLevelType pinsValue;
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    8862:	9b01      	ldr	r3, [sp, #4]
    8864:	781b      	ldrb	r3, [r3, #0]
    8866:	461a      	mov	r2, r3
    8868:	4b0a      	ldr	r3, [pc, #40]	; (8894 <Dio_Ipw_ReadChannelGroup+0x3c>)
    886a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    886e:	9304      	str	r3, [sp, #16]

    pinsValue = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    8870:	9804      	ldr	r0, [sp, #16]
    8872:	f000 f88f 	bl	8994 <Gpio_Dio_Ip_ReadPins>
    8876:	9003      	str	r0, [sp, #12]

#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) << (pChannelGroupIdPtr->u8offset));
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#else
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) >> (pChannelGroupIdPtr->u8offset));
    8878:	9b01      	ldr	r3, [sp, #4]
    887a:	685a      	ldr	r2, [r3, #4]
    887c:	9b03      	ldr	r3, [sp, #12]
    887e:	4013      	ands	r3, r2
    8880:	9a01      	ldr	r2, [sp, #4]
    8882:	7852      	ldrb	r2, [r2, #1]
    8884:	40d3      	lsrs	r3, r2
    8886:	9305      	str	r3, [sp, #20]
#endif

    return PortLevel;
    8888:	9b05      	ldr	r3, [sp, #20]
}
    888a:	4618      	mov	r0, r3
    888c:	b007      	add	sp, #28
    888e:	f85d fb04 	ldr.w	pc, [sp], #4
    8892:	bf00      	nop
    8894:	1fff8b28 	.word	0x1fff8b28

00008898 <Dio_Ipw_WriteChannelGroup>:
void Dio_Ipw_WriteChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr,
    Dio_PortLevelType                 Level
)
{
    8898:	b500      	push	{lr}
    889a:	b087      	sub	sp, #28
    889c:	9001      	str	r0, [sp, #4]
    889e:	9100      	str	r1, [sp, #0]
    Dio_PortLevelType ValueSet;
    Dio_PortLevelType ValueClear;

    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    88a0:	9b01      	ldr	r3, [sp, #4]
    88a2:	781b      	ldrb	r3, [r3, #0]
    88a4:	461a      	mov	r2, r3
    88a6:	4b10      	ldr	r3, [pc, #64]	; (88e8 <Dio_Ipw_WriteChannelGroup+0x50>)
    88a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    88ac:	9305      	str	r3, [sp, #20]

#if (STD_ON == DIO_REVERSEPORTBITS)
    ValueSet = (((Dio_PortLevelType)(Dio_Ipw_ReverseBits(Level)) >> (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
#else
    ValueSet = (((Dio_PortLevelType)(Level) << (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
    88ae:	9b01      	ldr	r3, [sp, #4]
    88b0:	785b      	ldrb	r3, [r3, #1]
    88b2:	461a      	mov	r2, r3
    88b4:	9b00      	ldr	r3, [sp, #0]
    88b6:	fa03 f202 	lsl.w	r2, r3, r2
    88ba:	9b01      	ldr	r3, [sp, #4]
    88bc:	685b      	ldr	r3, [r3, #4]
    88be:	4013      	ands	r3, r2
    88c0:	9304      	str	r3, [sp, #16]
#endif

    Gpio_Dio_Ip_SetPins(GpioBase, ValueSet);
    88c2:	9904      	ldr	r1, [sp, #16]
    88c4:	9805      	ldr	r0, [sp, #20]
    88c6:	f000 f84a 	bl	895e <Gpio_Dio_Ip_SetPins>
    ValueClear = (~ValueSet) & pChannelGroupIdPtr->mask;
    88ca:	9b04      	ldr	r3, [sp, #16]
    88cc:	43da      	mvns	r2, r3
    88ce:	9b01      	ldr	r3, [sp, #4]
    88d0:	685b      	ldr	r3, [r3, #4]
    88d2:	4013      	ands	r3, r2
    88d4:	9303      	str	r3, [sp, #12]
    Gpio_Dio_Ip_ClearPins(GpioBase, ValueClear);
    88d6:	9903      	ldr	r1, [sp, #12]
    88d8:	9805      	ldr	r0, [sp, #20]
    88da:	f000 f849 	bl	8970 <Gpio_Dio_Ip_ClearPins>

}
    88de:	bf00      	nop
    88e0:	b007      	add	sp, #28
    88e2:	f85d fb04 	ldr.w	pc, [sp], #4
    88e6:	bf00      	nop
    88e8:	1fff8b28 	.word	0x1fff8b28

000088ec <Gpio_Dio_Ip_WritePin>:
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pin,
    Gpio_Dio_Ip_PinsLevelType value
)
{
    88ec:	b500      	push	{lr}
    88ee:	b087      	sub	sp, #28
    88f0:	9003      	str	r0, [sp, #12]
    88f2:	9102      	str	r1, [sp, #8]
    88f4:	4613      	mov	r3, r2
    88f6:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Enter critical region */
    SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00();
    88fa:	f00c fdb7 	bl	1546c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>
    Gpio_Dio_Ip_PinsChannelType pinsValues = (Gpio_Dio_Ip_PinsChannelType)base->PDOR;
    88fe:	9b03      	ldr	r3, [sp, #12]
    8900:	681b      	ldr	r3, [r3, #0]
    8902:	9305      	str	r3, [sp, #20]
    pinsValues &= (Gpio_Dio_Ip_PinsChannelType)(~((Gpio_Dio_Ip_PinsChannelType)1U << pin));
    8904:	2201      	movs	r2, #1
    8906:	9b02      	ldr	r3, [sp, #8]
    8908:	fa02 f303 	lsl.w	r3, r2, r3
    890c:	43db      	mvns	r3, r3
    890e:	9a05      	ldr	r2, [sp, #20]
    8910:	4013      	ands	r3, r2
    8912:	9305      	str	r3, [sp, #20]
    pinsValues |= (Gpio_Dio_Ip_PinsChannelType)((Gpio_Dio_Ip_PinsChannelType)value << pin);
    8914:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8918:	9b02      	ldr	r3, [sp, #8]
    891a:	fa02 f303 	lsl.w	r3, r2, r3
    891e:	9a05      	ldr	r2, [sp, #20]
    8920:	4313      	orrs	r3, r2
    8922:	9305      	str	r3, [sp, #20]
    base->PDOR = GPIO_PDOR_PDO(pinsValues);
    8924:	9b03      	ldr	r3, [sp, #12]
    8926:	9a05      	ldr	r2, [sp, #20]
    8928:	601a      	str	r2, [r3, #0]
    /* Exit critical region */
    SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00();
    892a:	f00c fdcb 	bl	154c4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>
}
    892e:	bf00      	nop
    8930:	b007      	add	sp, #28
    8932:	f85d fb04 	ldr.w	pc, [sp], #4

00008936 <Gpio_Dio_Ip_WritePins>:
void Gpio_Dio_Ip_WritePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    8936:	b082      	sub	sp, #8
    8938:	9001      	str	r0, [sp, #4]
    893a:	9100      	str	r1, [sp, #0]
    base->PDOR = GPIO_PDOR_PDO(pins);
    893c:	9b01      	ldr	r3, [sp, #4]
    893e:	9a00      	ldr	r2, [sp, #0]
    8940:	601a      	str	r2, [r3, #0]
}
    8942:	bf00      	nop
    8944:	b002      	add	sp, #8
    8946:	4770      	bx	lr

00008948 <Gpio_Dio_Ip_GetPinsOutput>:
 * that are configured as output will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_GetPinsOutput_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_GetPinsOutput(const GPIO_Type * const base)
{
    8948:	b084      	sub	sp, #16
    894a:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    894c:	2300      	movs	r3, #0
    894e:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDOR);
    8950:	9b01      	ldr	r3, [sp, #4]
    8952:	681b      	ldr	r3, [r3, #0]
    8954:	9303      	str	r3, [sp, #12]
    return returnValue;
    8956:	9b03      	ldr	r3, [sp, #12]
}
    8958:	4618      	mov	r0, r3
    895a:	b004      	add	sp, #16
    895c:	4770      	bx	lr

0000895e <Gpio_Dio_Ip_SetPins>:
void Gpio_Dio_Ip_SetPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    895e:	b082      	sub	sp, #8
    8960:	9001      	str	r0, [sp, #4]
    8962:	9100      	str	r1, [sp, #0]
    base->PSOR = GPIO_PSOR_PTSO(pins);
    8964:	9b01      	ldr	r3, [sp, #4]
    8966:	9a00      	ldr	r2, [sp, #0]
    8968:	605a      	str	r2, [r3, #4]
}
    896a:	bf00      	nop
    896c:	b002      	add	sp, #8
    896e:	4770      	bx	lr

00008970 <Gpio_Dio_Ip_ClearPins>:
void Gpio_Dio_Ip_ClearPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    8970:	b082      	sub	sp, #8
    8972:	9001      	str	r0, [sp, #4]
    8974:	9100      	str	r1, [sp, #0]
    base->PCOR = GPIO_PCOR_PTCO(pins);
    8976:	9b01      	ldr	r3, [sp, #4]
    8978:	9a00      	ldr	r2, [sp, #0]
    897a:	609a      	str	r2, [r3, #8]
}
    897c:	bf00      	nop
    897e:	b002      	add	sp, #8
    8980:	4770      	bx	lr

00008982 <Gpio_Dio_Ip_TogglePins>:
void Gpio_Dio_Ip_TogglePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    8982:	b082      	sub	sp, #8
    8984:	9001      	str	r0, [sp, #4]
    8986:	9100      	str	r1, [sp, #0]
    base->PTOR = GPIO_PTOR_PTTO(pins);
    8988:	9b01      	ldr	r3, [sp, #4]
    898a:	9a00      	ldr	r2, [sp, #0]
    898c:	60da      	str	r2, [r3, #12]
}
    898e:	bf00      	nop
    8990:	b002      	add	sp, #8
    8992:	4770      	bx	lr

00008994 <Gpio_Dio_Ip_ReadPins>:
 * configured as input will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_ReadPins_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_ReadPins(const GPIO_Type * const base)
{
    8994:	b084      	sub	sp, #16
    8996:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    8998:	2300      	movs	r3, #0
    899a:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDIR);
    899c:	9b01      	ldr	r3, [sp, #4]
    899e:	691b      	ldr	r3, [r3, #16]
    89a0:	9303      	str	r3, [sp, #12]
    return returnValue;
    89a2:	9b03      	ldr	r3, [sp, #12]
}
    89a4:	4618      	mov	r0, r3
    89a6:	b004      	add	sp, #16
    89a8:	4770      	bx	lr

000089aa <Gpio_Dio_Ip_ReadPin>:
 * configured as input will have meaningful value.
 *
 * @implements    Gpio_Dio_Ip_ReadPin_Activity
 */
Gpio_Dio_Ip_PinsLevelType Gpio_Dio_Ip_ReadPin(const GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pin)
{
    89aa:	b084      	sub	sp, #16
    89ac:	9001      	str	r0, [sp, #4]
    89ae:	9100      	str	r1, [sp, #0]
    Gpio_Dio_Ip_PinsLevelType returnValue = 0U;
    89b0:	2300      	movs	r3, #0
    89b2:	f88d 300f 	strb.w	r3, [sp, #15]
    returnValue  = (Gpio_Dio_Ip_PinsLevelType)(((base->PDIR)&((uint32)1<<pin))>>(pin));
    89b6:	9b01      	ldr	r3, [sp, #4]
    89b8:	691a      	ldr	r2, [r3, #16]
    89ba:	2101      	movs	r1, #1
    89bc:	9b00      	ldr	r3, [sp, #0]
    89be:	fa01 f303 	lsl.w	r3, r1, r3
    89c2:	401a      	ands	r2, r3
    89c4:	9b00      	ldr	r3, [sp, #0]
    89c6:	fa22 f303 	lsr.w	r3, r2, r3
    89ca:	f88d 300f 	strb.w	r3, [sp, #15]

    return returnValue;
    89ce:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    89d2:	4618      	mov	r0, r3
    89d4:	b004      	add	sp, #16
    89d6:	4770      	bx	lr

000089d8 <Adc_ReportDetError>:
* @return     void
* SWS_Adc_00377
*/
static inline void Adc_ReportDetError(uint8 ServiceId,
                                      uint8 ErrorId)
{
    89d8:	b500      	push	{lr}
    89da:	b083      	sub	sp, #12
    89dc:	4603      	mov	r3, r0
    89de:	460a      	mov	r2, r1
    89e0:	f88d 3007 	strb.w	r3, [sp, #7]
    89e4:	4613      	mov	r3, r2
    89e6:	f88d 3006 	strb.w	r3, [sp, #6]
    (void)Det_ReportError((uint16)ADC_MODULE_ID, (uint8)0U, ServiceId, ErrorId);
    89ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
    89ee:	f89d 2007 	ldrb.w	r2, [sp, #7]
    89f2:	2100      	movs	r1, #0
    89f4:	207b      	movs	r0, #123	; 0x7b
    89f6:	f010 f969 	bl	18ccc <Det_ReportError>
}
    89fa:	bf00      	nop
    89fc:	b003      	add	sp, #12
    89fe:	f85d fb04 	ldr.w	pc, [sp], #4

00008a02 <Adc_ReportDetRuntimeError>:
* @return     void
* SWS_Adc_00530
*/
static inline void Adc_ReportDetRuntimeError(uint8 ServiceId,
                                             uint8 ErrorId)
{
    8a02:	b500      	push	{lr}
    8a04:	b083      	sub	sp, #12
    8a06:	4603      	mov	r3, r0
    8a08:	460a      	mov	r2, r1
    8a0a:	f88d 3007 	strb.w	r3, [sp, #7]
    8a0e:	4613      	mov	r3, r2
    8a10:	f88d 3006 	strb.w	r3, [sp, #6]
    (void)Det_ReportRuntimeError((uint16)ADC_MODULE_ID, (uint8)0U, ServiceId, ErrorId);
    8a14:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8a18:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8a1c:	2100      	movs	r1, #0
    8a1e:	207b      	movs	r0, #123	; 0x7b
    8a20:	f010 f9b8 	bl	18d94 <Det_ReportRuntimeError>
}
    8a24:	bf00      	nop
    8a26:	b003      	add	sp, #12
    8a28:	f85d fb04 	ldr.w	pc, [sp], #4

00008a2c <Adc_ReportValidationError>:
* @return     void
*/
static void Adc_ReportValidationError(Adc_ValidationResultType * Result,
                                      uint8 ServiceId,
                                      uint8 ErrorId)
{
    8a2c:	b500      	push	{lr}
    8a2e:	b083      	sub	sp, #12
    8a30:	9001      	str	r0, [sp, #4]
    8a32:	460b      	mov	r3, r1
    8a34:	f88d 3003 	strb.w	r3, [sp, #3]
    8a38:	4613      	mov	r3, r2
    8a3a:	f88d 3002 	strb.w	r3, [sp, #2]
    Result->EndValidations = TRUE;
    8a3e:	9b01      	ldr	r3, [sp, #4]
    8a40:	2201      	movs	r2, #1
    8a42:	701a      	strb	r2, [r3, #0]
    Result->ValidParams = (Std_ReturnType)E_NOT_OK;
    8a44:	9b01      	ldr	r3, [sp, #4]
    8a46:	2201      	movs	r2, #1
    8a48:	705a      	strb	r2, [r3, #1]

    Adc_ReportDetError(ServiceId, ErrorId);
    8a4a:	f89d 2002 	ldrb.w	r2, [sp, #2]
    8a4e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8a52:	4611      	mov	r1, r2
    8a54:	4618      	mov	r0, r3
    8a56:	f7ff ffbf 	bl	89d8 <Adc_ReportDetError>
}
    8a5a:	bf00      	nop
    8a5c:	b003      	add	sp, #12
    8a5e:	f85d fb04 	ldr.w	pc, [sp], #4

00008a62 <Adc_ValidateGloballCall>:
* @implements  Adc_ValidateGlobalCall_Activity
*
*/
static inline Std_ReturnType Adc_ValidateGloballCall(uint8 ServiceId,
                                                     uint8 CoreId)
{
    8a62:	b500      	push	{lr}
    8a64:	b085      	sub	sp, #20
    8a66:	4603      	mov	r3, r0
    8a68:	460a      	mov	r2, r1
    8a6a:	f88d 3007 	strb.w	r3, [sp, #7]
    8a6e:	4613      	mov	r3, r2
    8a70:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    8a74:	2301      	movs	r3, #1
    8a76:	f88d 300f 	strb.w	r3, [sp, #15]

    if (ADC_STATE_UNINIT == Adc_aeGlobalState[CoreId])
    8a7a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8a7e:	4a14      	ldr	r2, [pc, #80]	; (8ad0 <Adc_ValidateGloballCall+0x6e>)
    8a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a84:	2b00      	cmp	r3, #0
    8a86:	d10e      	bne.n	8aa6 <Adc_ValidateGloballCall+0x44>
    {
        if (ADC_INIT_ID == ServiceId)
    8a88:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8a8c:	2b00      	cmp	r3, #0
    8a8e:	d103      	bne.n	8a98 <Adc_ValidateGloballCall+0x36>
        {
            ValidState = (Std_ReturnType)E_OK;
    8a90:	2300      	movs	r3, #0
    8a92:	f88d 300f 	strb.w	r3, [sp, #15]
    8a96:	e014      	b.n	8ac2 <Adc_ValidateGloballCall+0x60>
        }
        else
        {
            /* SWS_Adc_00154 */
            Adc_ReportDetError(ServiceId, (uint8)ADC_E_UNINIT);
    8a98:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8a9c:	210a      	movs	r1, #10
    8a9e:	4618      	mov	r0, r3
    8aa0:	f7ff ff9a 	bl	89d8 <Adc_ReportDetError>
    8aa4:	e00d      	b.n	8ac2 <Adc_ValidateGloballCall+0x60>
        }
    }
    else
    {
        if (ADC_INIT_ID == ServiceId)
    8aa6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8aaa:	2b00      	cmp	r3, #0
    8aac:	d106      	bne.n	8abc <Adc_ValidateGloballCall+0x5a>
        {
            /* Error: ADC already initialized */
            /* SWS_Adc_00107 */
            Adc_ReportDetError(ServiceId, (uint8)ADC_E_ALREADY_INITIALIZED);
    8aae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8ab2:	210d      	movs	r1, #13
    8ab4:	4618      	mov	r0, r3
    8ab6:	f7ff ff8f 	bl	89d8 <Adc_ReportDetError>
    8aba:	e002      	b.n	8ac2 <Adc_ValidateGloballCall+0x60>
        }
        else
        {
            ValidState = (Std_ReturnType)E_OK;
    8abc:	2300      	movs	r3, #0
    8abe:	f88d 300f 	strb.w	r3, [sp, #15]
        }
    }

    return ValidState;
    8ac2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8ac6:	4618      	mov	r0, r3
    8ac8:	b005      	add	sp, #20
    8aca:	f85d fb04 	ldr.w	pc, [sp], #4
    8ace:	bf00      	nop
    8ad0:	1fff8d44 	.word	0x1fff8d44

00008ad4 <Adc_ValidatePtrInit>:
*
* @note       Non Reentrant function.
*
*/
static inline Std_ReturnType Adc_ValidatePtrInit(const Adc_ConfigType * ConfigPtr)
{
    8ad4:	b500      	push	{lr}
    8ad6:	b085      	sub	sp, #20
    8ad8:	9001      	str	r0, [sp, #4]
    Std_ReturnType ValidPtr = (Std_ReturnType)E_OK;
    8ada:	2300      	movs	r3, #0
    8adc:	f88d 300f 	strb.w	r3, [sp, #15]
#if (ADC_PRECOMPILE_SUPPORT == STD_ON)
    /* ADC344 */
    if (NULL_PTR != ConfigPtr)
#else
    /* ADC343 */
    if (NULL_PTR == ConfigPtr)
    8ae0:	9b01      	ldr	r3, [sp, #4]
    8ae2:	2b00      	cmp	r3, #0
    8ae4:	d106      	bne.n	8af4 <Adc_ValidatePtrInit+0x20>
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
    {
        ValidPtr = (Std_ReturnType)E_NOT_OK;
    8ae6:	2301      	movs	r3, #1
    8ae8:	f88d 300f 	strb.w	r3, [sp, #15]
        Adc_ReportDetError((uint8)ADC_INIT_ID, (uint8) ADC_E_PARAM_POINTER);
    8aec:	2114      	movs	r1, #20
    8aee:	2000      	movs	r0, #0
    8af0:	f7ff ff72 	bl	89d8 <Adc_ReportDetError>
    }
    return ValidPtr;
    8af4:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8af8:	4618      	mov	r0, r3
    8afa:	b005      	add	sp, #20
    8afc:	f85d fb04 	ldr.w	pc, [sp], #4

00008b00 <Adc_ValidatePtr>:
* @note       ...
* ADC_VALUEREADGROUP_ID
*/
static inline Std_ReturnType Adc_ValidatePtr(uint8 ServiceId,
                                             const void * PtrVal)
{
    8b00:	b500      	push	{lr}
    8b02:	b085      	sub	sp, #20
    8b04:	4603      	mov	r3, r0
    8b06:	9100      	str	r1, [sp, #0]
    8b08:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType ValidPtr = (Std_ReturnType)E_OK;
    8b0c:	2300      	movs	r3, #0
    8b0e:	f88d 300f 	strb.w	r3, [sp, #15]

    /* SWS_Adc_00458, SWS_Adc_00457, CPR_RTD_00264.adc */
    if (NULL_PTR == PtrVal)
    8b12:	9b00      	ldr	r3, [sp, #0]
    8b14:	2b00      	cmp	r3, #0
    8b16:	d108      	bne.n	8b2a <Adc_ValidatePtr+0x2a>
    {
        ValidPtr = (Std_ReturnType)E_NOT_OK;
    8b18:	2301      	movs	r3, #1
    8b1a:	f88d 300f 	strb.w	r3, [sp, #15]
        Adc_ReportDetError(ServiceId, (uint8)ADC_E_PARAM_POINTER);
    8b1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8b22:	2114      	movs	r1, #20
    8b24:	4618      	mov	r0, r3
    8b26:	f7ff ff57 	bl	89d8 <Adc_ReportDetError>
    }

    return ValidPtr;
    8b2a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8b2e:	4618      	mov	r0, r3
    8b30:	b005      	add	sp, #20
    8b32:	f85d fb04 	ldr.w	pc, [sp], #4

00008b36 <Adc_ValidateBufferUninit>:

#if ((ADC_ENABLE_START_STOP_GROUP_API == STD_ON) || (ADC_HW_TRIGGER_API == STD_ON))
static inline void Adc_ValidateBufferUninit(Adc_ValidationResultType * ReturnValue,
                                            uint8 ServiceId,
                                            Adc_GroupType Group)
{
    8b36:	b500      	push	{lr}
    8b38:	b083      	sub	sp, #12
    8b3a:	9001      	str	r0, [sp, #4]
    8b3c:	460b      	mov	r3, r1
    8b3e:	f88d 3003 	strb.w	r3, [sp, #3]
    8b42:	4613      	mov	r3, r2
    8b44:	f8ad 3000 	strh.w	r3, [sp]
    switch (ServiceId)
    8b48:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8b4c:	2b02      	cmp	r3, #2
    8b4e:	d113      	bne.n	8b78 <Adc_ValidateBufferUninit+0x42>
#if (ADC_HW_TRIGGER_API == STD_ON)
        /* fall-through */
        case ADC_ENABLEHARDWARETRIGGER_ID:
#endif /* ADC_HW_TRIGGER_API == STD_ON */
        {
            if (NULL_PTR == Adc_axGroupStatus[Group].ResultsBufferPtr)
    8b50:	f8bd 2000 	ldrh.w	r2, [sp]
    8b54:	490c      	ldr	r1, [pc, #48]	; (8b88 <Adc_ValidateBufferUninit+0x52>)
    8b56:	4613      	mov	r3, r2
    8b58:	009b      	lsls	r3, r3, #2
    8b5a:	4413      	add	r3, r2
    8b5c:	009b      	lsls	r3, r3, #2
    8b5e:	440b      	add	r3, r1
    8b60:	330c      	adds	r3, #12
    8b62:	681b      	ldr	r3, [r3, #0]
    8b64:	2b00      	cmp	r3, #0
    8b66:	d109      	bne.n	8b7c <Adc_ValidateBufferUninit+0x46>
            {
                /* SWS_Adc_00425, SWS_Adc_00424 */
                Adc_ReportValidationError(ReturnValue, ServiceId, (uint8)ADC_E_BUFFER_UNINIT);
    8b68:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8b6c:	2219      	movs	r2, #25
    8b6e:	4619      	mov	r1, r3
    8b70:	9801      	ldr	r0, [sp, #4]
    8b72:	f7ff ff5b 	bl	8a2c <Adc_ReportValidationError>
            }
            break;
    8b76:	e001      	b.n	8b7c <Adc_ValidateBufferUninit+0x46>
        }
        default:
        {
            ; /* no-op */
            break;
    8b78:	bf00      	nop
    8b7a:	e000      	b.n	8b7e <Adc_ValidateBufferUninit+0x48>
            break;
    8b7c:	bf00      	nop
        }
    }
}
    8b7e:	bf00      	nop
    8b80:	b003      	add	sp, #12
    8b82:	f85d fb04 	ldr.w	pc, [sp], #4
    8b86:	bf00      	nop
    8b88:	1fff8d48 	.word	0x1fff8d48

00008b8c <Adc_ValidateTriggerSrc>:
    )
static inline void Adc_ValidateTriggerSrc(Adc_ValidationResultType * ReturnValue,
                                          uint8 ServiceId,
                                          Adc_GroupType Group,
                                          uint8 CoreId)
{
    8b8c:	b500      	push	{lr}
    8b8e:	b085      	sub	sp, #20
    8b90:	9001      	str	r0, [sp, #4]
    8b92:	4608      	mov	r0, r1
    8b94:	4611      	mov	r1, r2
    8b96:	461a      	mov	r2, r3
    8b98:	4603      	mov	r3, r0
    8b9a:	f88d 3003 	strb.w	r3, [sp, #3]
    8b9e:	460b      	mov	r3, r1
    8ba0:	f8ad 3000 	strh.w	r3, [sp]
    8ba4:	4613      	mov	r3, r2
    8ba6:	f88d 3002 	strb.w	r3, [sp, #2]
    /* Get the mapping index of group in the current partition */
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    8baa:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8bae:	4a17      	ldr	r2, [pc, #92]	; (8c0c <Adc_ValidateTriggerSrc+0x80>)
    8bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8bb4:	68da      	ldr	r2, [r3, #12]
    8bb6:	f8bd 3000 	ldrh.w	r3, [sp]
    8bba:	005b      	lsls	r3, r3, #1
    8bbc:	4413      	add	r3, r2
    8bbe:	881b      	ldrh	r3, [r3, #0]
    8bc0:	f8ad 300e 	strh.w	r3, [sp, #14]

    switch (ServiceId)
    8bc4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8bc8:	3b02      	subs	r3, #2
    8bca:	2b01      	cmp	r3, #1
    8bcc:	d816      	bhi.n	8bfc <Adc_ValidateTriggerSrc+0x70>
#if (ADC_ENABLE_CH_DISABLE_CH_NONAUTO_API == STD_ON)
        case ADC_ENABLE_CHANNEL_ID:
        case ADC_DISABLE_CHANNEL_ID:
#endif /* ADC_ENABLE_CH_DISABLE_CH_NONAUTO_API == STD_ON */
        {
            if (ADC_TRIGG_SRC_SW != Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    8bce:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8bd2:	4a0e      	ldr	r2, [pc, #56]	; (8c0c <Adc_ValidateTriggerSrc+0x80>)
    8bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8bd8:	685a      	ldr	r2, [r3, #4]
    8bda:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    8bde:	2134      	movs	r1, #52	; 0x34
    8be0:	fb01 f303 	mul.w	r3, r1, r3
    8be4:	4413      	add	r3, r2
    8be6:	695b      	ldr	r3, [r3, #20]
    8be8:	2b00      	cmp	r3, #0
    8bea:	d009      	beq.n	8c00 <Adc_ValidateTriggerSrc+0x74>
            {
                /* SWS_Adc_00164, SWS_Adc_00133 */
                Adc_ReportValidationError(ReturnValue, ServiceId, (uint8)ADC_E_WRONG_TRIGG_SRC);
    8bec:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8bf0:	2217      	movs	r2, #23
    8bf2:	4619      	mov	r1, r3
    8bf4:	9801      	ldr	r0, [sp, #4]
    8bf6:	f7ff ff19 	bl	8a2c <Adc_ReportValidationError>
            }
            break;
    8bfa:	e001      	b.n	8c00 <Adc_ValidateTriggerSrc+0x74>
        }
#endif /* ADC_HW_TRIGGER_API == STD_ON */
        default:
        {
            ; /* no-op */
            break;
    8bfc:	bf00      	nop
    8bfe:	e000      	b.n	8c02 <Adc_ValidateTriggerSrc+0x76>
            break;
    8c00:	bf00      	nop
        }
    }
}
    8c02:	bf00      	nop
    8c04:	b005      	add	sp, #20
    8c06:	f85d fb04 	ldr.w	pc, [sp], #4
    8c0a:	bf00      	nop
    8c0c:	1fff8d40 	.word	0x1fff8d40

00008c10 <Adc_ValidateQueueNotFull>:
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
static inline void Adc_ValidateQueueNotFull(Adc_ValidationResultType * ReturnValue,
                                            uint8 ServiceId,
                                            Adc_GroupType Group,
                                            uint8 CoreId)
{
    8c10:	b500      	push	{lr}
    8c12:	b085      	sub	sp, #20
    8c14:	9001      	str	r0, [sp, #4]
    8c16:	4608      	mov	r0, r1
    8c18:	4611      	mov	r1, r2
    8c1a:	461a      	mov	r2, r3
    8c1c:	4603      	mov	r3, r0
    8c1e:	f88d 3003 	strb.w	r3, [sp, #3]
    8c22:	460b      	mov	r3, r1
    8c24:	f8ad 3000 	strh.w	r3, [sp]
    8c28:	4613      	mov	r3, r2
    8c2a:	f88d 3002 	strb.w	r3, [sp, #2]
    Adc_GroupType GroupIndex;
    Adc_HwUnitType LogicalHwUnitId = 0U;
    8c2e:	2300      	movs	r3, #0
    8c30:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Get the mapping index of group in the current partition */
    GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    8c34:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8c38:	4a21      	ldr	r2, [pc, #132]	; (8cc0 <Adc_ValidateQueueNotFull+0xb0>)
    8c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c3e:	68da      	ldr	r2, [r3, #12]
    8c40:	f8bd 3000 	ldrh.w	r3, [sp]
    8c44:	005b      	lsls	r3, r3, #1
    8c46:	4413      	add	r3, r2
    8c48:	881b      	ldrh	r3, [r3, #0]
    8c4a:	f8ad 300c 	strh.w	r3, [sp, #12]
    LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    8c4e:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8c52:	4a1b      	ldr	r2, [pc, #108]	; (8cc0 <Adc_ValidateQueueNotFull+0xb0>)
    8c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c58:	685a      	ldr	r2, [r3, #4]
    8c5a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8c5e:	2134      	movs	r1, #52	; 0x34
    8c60:	fb01 f303 	mul.w	r3, r1, r3
    8c64:	4413      	add	r3, r2
    8c66:	789b      	ldrb	r3, [r3, #2]
    8c68:	f88d 300f 	strb.w	r3, [sp, #15]

    switch (ServiceId)
    8c6c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8c70:	2b02      	cmp	r3, #2
    8c72:	d11e      	bne.n	8cb2 <Adc_ValidateQueueNotFull+0xa2>
    {
        case ADC_STARTGROUPCONVERSION_ID:
        {
            if (ADC_CONV_TYPE_NORMAL == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Type)
    8c74:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8c78:	4a11      	ldr	r2, [pc, #68]	; (8cc0 <Adc_ValidateQueueNotFull+0xb0>)
    8c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c7e:	685a      	ldr	r2, [r3, #4]
    8c80:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8c84:	2134      	movs	r1, #52	; 0x34
    8c86:	fb01 f303 	mul.w	r3, r1, r3
    8c8a:	4413      	add	r3, r2
    8c8c:	68db      	ldr	r3, [r3, #12]
    8c8e:	2b00      	cmp	r3, #0
    8c90:	d111      	bne.n	8cb6 <Adc_ValidateQueueNotFull+0xa6>
            {
                if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex >= ADC_QUEUE_MAX_DEPTH_MAX)
    8c92:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8c96:	4a0b      	ldr	r2, [pc, #44]	; (8cc4 <Adc_ValidateQueueNotFull+0xb4>)
    8c98:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    8c9c:	b29b      	uxth	r3, r3
    8c9e:	2b01      	cmp	r3, #1
    8ca0:	d909      	bls.n	8cb6 <Adc_ValidateQueueNotFull+0xa6>
                {
                    Adc_ReportValidationError(ReturnValue, ServiceId, (uint8)ADC_E_QUEUE_FULL);
    8ca2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8ca6:	2220      	movs	r2, #32
    8ca8:	4619      	mov	r1, r3
    8caa:	9801      	ldr	r0, [sp, #4]
    8cac:	f7ff febe 	bl	8a2c <Adc_ReportValidationError>
                }
            }
            break;
    8cb0:	e001      	b.n	8cb6 <Adc_ValidateQueueNotFull+0xa6>
        }

        default:
        {
            ; /* no-op */
            break;
    8cb2:	bf00      	nop
    8cb4:	e000      	b.n	8cb8 <Adc_ValidateQueueNotFull+0xa8>
            break;
    8cb6:	bf00      	nop
        }
    }
}
    8cb8:	bf00      	nop
    8cba:	b005      	add	sp, #20
    8cbc:	f85d fb04 	ldr.w	pc, [sp], #4
    8cc0:	1fff8d40 	.word	0x1fff8d40
    8cc4:	1fff8d70 	.word	0x1fff8d70

00008cc8 <Adc_ValidateExtraParams>:
    )
static inline Std_ReturnType Adc_ValidateExtraParams(uint8 ServiceId,
                                                     uint32 ErrorIdList,
                                                     Adc_GroupType Group,
                                                     uint8 CoreId)
{
    8cc8:	b500      	push	{lr}
    8cca:	b085      	sub	sp, #20
    8ccc:	9100      	str	r1, [sp, #0]
    8cce:	4611      	mov	r1, r2
    8cd0:	461a      	mov	r2, r3
    8cd2:	4603      	mov	r3, r0
    8cd4:	f88d 3007 	strb.w	r3, [sp, #7]
    8cd8:	460b      	mov	r3, r1
    8cda:	f8ad 3004 	strh.w	r3, [sp, #4]
    8cde:	4613      	mov	r3, r2
    8ce0:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_ValidationResultType ValidationStatus;

    ValidationStatus.EndValidations = FALSE;
    8ce4:	2300      	movs	r3, #0
    8ce6:	f88d 300c 	strb.w	r3, [sp, #12]
    ValidationStatus.ValidParams = (Std_ReturnType)E_OK;
    8cea:	2300      	movs	r3, #0
    8cec:	f88d 300d 	strb.w	r3, [sp, #13]

#if ((ADC_ENABLE_START_STOP_GROUP_API == STD_ON) || (ADC_HW_TRIGGER_API == STD_ON))
    if ((0U != (ErrorIdList&ADC_E_BUFFER_UNINIT_LIST)) && (FALSE == ValidationStatus.EndValidations))
    8cf0:	9b00      	ldr	r3, [sp, #0]
    8cf2:	f003 0301 	and.w	r3, r3, #1
    8cf6:	2b00      	cmp	r3, #0
    8cf8:	d00e      	beq.n	8d18 <Adc_ValidateExtraParams+0x50>
    8cfa:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8cfe:	f083 0301 	eor.w	r3, r3, #1
    8d02:	b2db      	uxtb	r3, r3
    8d04:	2b00      	cmp	r3, #0
    8d06:	d007      	beq.n	8d18 <Adc_ValidateExtraParams+0x50>
    {
        Adc_ValidateBufferUninit(&ValidationStatus, ServiceId, Group);
    8d08:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    8d0c:	f89d 1007 	ldrb.w	r1, [sp, #7]
    8d10:	ab03      	add	r3, sp, #12
    8d12:	4618      	mov	r0, r3
    8d14:	f7ff ff0f 	bl	8b36 <Adc_ValidateBufferUninit>
    }
#endif
    if ((0U != (ErrorIdList&ADC_E_WRONG_TRIGG_SRC_LIST)) && (FALSE == ValidationStatus.EndValidations))
    8d18:	9b00      	ldr	r3, [sp, #0]
    8d1a:	f003 0302 	and.w	r3, r3, #2
    8d1e:	2b00      	cmp	r3, #0
    8d20:	d00f      	beq.n	8d42 <Adc_ValidateExtraParams+0x7a>
    8d22:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8d26:	f083 0301 	eor.w	r3, r3, #1
    8d2a:	b2db      	uxtb	r3, r3
    8d2c:	2b00      	cmp	r3, #0
    8d2e:	d008      	beq.n	8d42 <Adc_ValidateExtraParams+0x7a>
    {
       Adc_ValidateTriggerSrc(&ValidationStatus, ServiceId, Group, CoreId);
    8d30:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8d34:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    8d38:	f89d 1007 	ldrb.w	r1, [sp, #7]
    8d3c:	a803      	add	r0, sp, #12
    8d3e:	f7ff ff25 	bl	8b8c <Adc_ValidateTriggerSrc>
    }
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
    if ((0U != (ErrorIdList&ADC_E_QUEUE_FULL_LIST)) && (FALSE == ValidationStatus.EndValidations))
    8d42:	9b00      	ldr	r3, [sp, #0]
    8d44:	f003 0304 	and.w	r3, r3, #4
    8d48:	2b00      	cmp	r3, #0
    8d4a:	d00f      	beq.n	8d6c <Adc_ValidateExtraParams+0xa4>
    8d4c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8d50:	f083 0301 	eor.w	r3, r3, #1
    8d54:	b2db      	uxtb	r3, r3
    8d56:	2b00      	cmp	r3, #0
    8d58:	d008      	beq.n	8d6c <Adc_ValidateExtraParams+0xa4>
    {
        Adc_ValidateQueueNotFull(&ValidationStatus, ServiceId, Group, CoreId);
    8d5a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8d5e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    8d62:	f89d 1007 	ldrb.w	r1, [sp, #7]
    8d66:	a803      	add	r0, sp, #12
    8d68:	f7ff ff52 	bl	8c10 <Adc_ValidateQueueNotFull>
    {
        Adc_ValidateEnableDisbleGroupList(&ValidationStatus, ServiceId, Group, CoreId);
    }
#endif /* ADC_ENABLE_CH_DISABLE_CH_NONAUTO_API == STD_ON */

    return ValidationStatus.ValidParams;
    8d6c:	f89d 300d 	ldrb.w	r3, [sp, #13]
}
    8d70:	4618      	mov	r0, r3
    8d72:	b005      	add	sp, #20
    8d74:	f85d fb04 	ldr.w	pc, [sp], #4

00008d78 <Adc_EndValidateGloballCall>:
* @return void
*/
static inline void Adc_EndValidateGloballCall(Std_ReturnType ValidCall,
                                              uint8 ServiceId,
                                              uint8 CoreId)
{
    8d78:	b082      	sub	sp, #8
    8d7a:	4603      	mov	r3, r0
    8d7c:	f88d 3007 	strb.w	r3, [sp, #7]
    8d80:	460b      	mov	r3, r1
    8d82:	f88d 3006 	strb.w	r3, [sp, #6]
    8d86:	4613      	mov	r3, r2
    8d88:	f88d 3005 	strb.w	r3, [sp, #5]
    if ((Std_ReturnType)E_OK == ValidCall)
    8d8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8d90:	2b00      	cmp	r3, #0
    8d92:	d110      	bne.n	8db6 <Adc_EndValidateGloballCall+0x3e>
    {
        if (ADC_DEINIT_ID == ServiceId)
    8d94:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8d98:	2b01      	cmp	r3, #1
    8d9a:	d106      	bne.n	8daa <Adc_EndValidateGloballCall+0x32>
        {
            Adc_aeGlobalState[CoreId] = ADC_STATE_UNINIT;
    8d9c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8da0:	4a06      	ldr	r2, [pc, #24]	; (8dbc <Adc_EndValidateGloballCall+0x44>)
    8da2:	2100      	movs	r1, #0
    8da4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        else
        {
            Adc_aeGlobalState[CoreId] = ADC_STATE_IDLE;
        }
    }
}
    8da8:	e005      	b.n	8db6 <Adc_EndValidateGloballCall+0x3e>
            Adc_aeGlobalState[CoreId] = ADC_STATE_IDLE;
    8daa:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8dae:	4a03      	ldr	r2, [pc, #12]	; (8dbc <Adc_EndValidateGloballCall+0x44>)
    8db0:	2102      	movs	r1, #2
    8db2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    8db6:	bf00      	nop
    8db8:	b002      	add	sp, #8
    8dba:	4770      	bx	lr
    8dbc:	1fff8d44 	.word	0x1fff8d44

00008dc0 <Adc_ValidateNotBusyNoQueue>:
* @retval     E_OK:           The call means that unit is not busy
* @retval     E_NOT_OK:       The call means that unit is busy
*/
static inline Std_ReturnType Adc_ValidateNotBusyNoQueue(Adc_HwUnitType Unit,
                                                        uint8 ServiceId)
{
    8dc0:	b500      	push	{lr}
    8dc2:	b085      	sub	sp, #20
    8dc4:	4603      	mov	r3, r0
    8dc6:	460a      	mov	r2, r1
    8dc8:	f88d 3007 	strb.w	r3, [sp, #7]
    8dcc:	4613      	mov	r3, r2
    8dce:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    8dd2:	2300      	movs	r3, #0
    8dd4:	f88d 300f 	strb.w	r3, [sp, #15]
#if (ADC_HW_TRIGGER_API == STD_ON)
    Adc_GroupType OngoingHwGroupId;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    const Adc_QueueIndexType NoGroupsInSwNormalQueue = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    8dd8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8ddc:	4a0b      	ldr	r2, [pc, #44]	; (8e0c <Adc_ValidateNotBusyNoQueue+0x4c>)
    8dde:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    8de2:	f8ad 300c 	strh.w	r3, [sp, #12]
#if (ADC_HW_TRIGGER_API == STD_ON)
    OngoingHwGroupId = Adc_axUnitStatus[Unit].OngoingHwGroup;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    /* CPR_RTD_00035.adc, CPR_RTD_00325.adc, CPR_RTD_00326.adc, CPR_RTD_00327.adc */
    /* Check for ongoing conversions */
    if ((NoGroupsInSwNormalQueue > (Adc_QueueIndexType)0U)
    8de6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    8dea:	2b00      	cmp	r3, #0
    8dec:	d008      	beq.n	8e00 <Adc_ValidateNotBusyNoQueue+0x40>
        || (OngoingHwGroupId != ADC_INVALID_HW_GROUP_ID)
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
       )
    {
        /* SWS_Adc_00321, SWS_Adc_00346, SWS_Adc_00426 */
        Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
    8dee:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8df2:	210b      	movs	r1, #11
    8df4:	4618      	mov	r0, r3
    8df6:	f7ff fe04 	bl	8a02 <Adc_ReportDetRuntimeError>
        ErrorFound = (Std_ReturnType)E_NOT_OK;
    8dfa:	2301      	movs	r3, #1
    8dfc:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return ErrorFound;
    8e00:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8e04:	4618      	mov	r0, r3
    8e06:	b005      	add	sp, #20
    8e08:	f85d fb04 	ldr.w	pc, [sp], #4
    8e0c:	1fff8d70 	.word	0x1fff8d70

00008e10 <Adc_ValidateNotBusyNoPrio>:
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateNotBusyNoPrio(Adc_GroupType Group,
                                                       boolean Implicitly,
                                                       uint8 CoreId)
{
    8e10:	b500      	push	{lr}
    8e12:	b085      	sub	sp, #20
    8e14:	4603      	mov	r3, r0
    8e16:	f8ad 3006 	strh.w	r3, [sp, #6]
    8e1a:	460b      	mov	r3, r1
    8e1c:	f88d 3005 	strb.w	r3, [sp, #5]
    8e20:	4613      	mov	r3, r2
    8e22:	f88d 3004 	strb.w	r3, [sp, #4]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    8e26:	2301      	movs	r3, #1
    8e28:	f88d 300f 	strb.w	r3, [sp, #15]
    ValidState =  Adc_ValidateNotBusyNoQueue(LogicalHwUnitId, ADC_STARTGROUPCONVERSION_ID);

    (void)Implicitly;
    (void)Group;
#else /* ADC_ENABLE_QUEUING == STD_ON */
    Conversion = Adc_axGroupStatus[Group].Conversion;
    8e2c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8e30:	4917      	ldr	r1, [pc, #92]	; (8e90 <Adc_ValidateNotBusyNoPrio+0x80>)
    8e32:	4613      	mov	r3, r2
    8e34:	009b      	lsls	r3, r3, #2
    8e36:	4413      	add	r3, r2
    8e38:	009b      	lsls	r3, r3, #2
    8e3a:	440b      	add	r3, r1
    8e3c:	681b      	ldr	r3, [r3, #0]
    8e3e:	9302      	str	r3, [sp, #8]
    /* SWS_Adc_00351 */
    if ((FALSE == Implicitly) && (ADC_IDLE != Conversion))
    8e40:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8e44:	f083 0301 	eor.w	r3, r3, #1
    8e48:	b2db      	uxtb	r3, r3
    8e4a:	2b00      	cmp	r3, #0
    8e4c:	d007      	beq.n	8e5e <Adc_ValidateNotBusyNoPrio+0x4e>
    8e4e:	9b02      	ldr	r3, [sp, #8]
    8e50:	2b00      	cmp	r3, #0
    8e52:	d004      	beq.n	8e5e <Adc_ValidateNotBusyNoPrio+0x4e>
    {
        Adc_ReportDetRuntimeError((uint8)ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    8e54:	210b      	movs	r1, #11
    8e56:	2002      	movs	r0, #2
    8e58:	f7ff fdd3 	bl	8a02 <Adc_ReportDetRuntimeError>
    8e5c:	e011      	b.n	8e82 <Adc_ValidateNotBusyNoPrio+0x72>
    }
    /* SWS_Adc_00428 */
    else if ((TRUE == Implicitly) && (ADC_IDLE != Conversion) && \
    8e5e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8e62:	2b00      	cmp	r3, #0
    8e64:	d00a      	beq.n	8e7c <Adc_ValidateNotBusyNoPrio+0x6c>
    8e66:	9b02      	ldr	r3, [sp, #8]
    8e68:	2b00      	cmp	r3, #0
    8e6a:	d007      	beq.n	8e7c <Adc_ValidateNotBusyNoPrio+0x6c>
    8e6c:	9b02      	ldr	r3, [sp, #8]
    8e6e:	2b03      	cmp	r3, #3
    8e70:	d004      	beq.n	8e7c <Adc_ValidateNotBusyNoPrio+0x6c>
             (ADC_STREAM_COMPLETED != Conversion) \
            )
    {
        Adc_ReportDetRuntimeError((uint8)ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    8e72:	210b      	movs	r1, #11
    8e74:	2002      	movs	r0, #2
    8e76:	f7ff fdc4 	bl	8a02 <Adc_ReportDetRuntimeError>
    8e7a:	e002      	b.n	8e82 <Adc_ValidateNotBusyNoPrio+0x72>
    }
    else
    {
        ValidState = (Std_ReturnType)E_OK;
    8e7c:	2300      	movs	r3, #0
    8e7e:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    (void)CoreId;
#endif /* ADC_ENABLE_QUEUING */

    return ValidState;
    8e82:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8e86:	4618      	mov	r0, r3
    8e88:	b005      	add	sp, #20
    8e8a:	f85d fb04 	ldr.w	pc, [sp], #4
    8e8e:	bf00      	nop
    8e90:	1fff8d48 	.word	0x1fff8d48

00008e94 <Adc_ValidateCheckGroupNotConversion>:
* @retval       E_OK:           The call means that at least one group is not busy
* @retval       E_NOT_OK:       The call means that at least one group is busy
*/
static inline Std_ReturnType Adc_ValidateCheckGroupNotConversion(uint8 ServiceId,
                                                                 uint8 CoreId)
{
    8e94:	b500      	push	{lr}
    8e96:	b087      	sub	sp, #28
    8e98:	4603      	mov	r3, r0
    8e9a:	460a      	mov	r2, r1
    8e9c:	f88d 3007 	strb.w	r3, [sp, #7]
    8ea0:	4613      	mov	r3, r2
    8ea2:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_StatusType Conversion;
    Adc_GroupType GroupIter;
    Adc_GroupType GroupId;
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    8ea6:	2300      	movs	r3, #0
    8ea8:	f88d 3015 	strb.w	r3, [sp, #21]

    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    8eac:	2300      	movs	r3, #0
    8eae:	f8ad 3016 	strh.w	r3, [sp, #22]
    8eb2:	e02c      	b.n	8f0e <Adc_ValidateCheckGroupNotConversion+0x7a>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIter].GroupId;
    8eb4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8eb8:	4a1d      	ldr	r2, [pc, #116]	; (8f30 <Adc_ValidateCheckGroupNotConversion+0x9c>)
    8eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ebe:	685a      	ldr	r2, [r3, #4]
    8ec0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    8ec4:	2134      	movs	r1, #52	; 0x34
    8ec6:	fb01 f303 	mul.w	r3, r1, r3
    8eca:	4413      	add	r3, r2
    8ecc:	881b      	ldrh	r3, [r3, #0]
    8ece:	f8ad 3012 	strh.w	r3, [sp, #18]
        Conversion = Adc_axGroupStatus[GroupId].Conversion;
    8ed2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    8ed6:	4917      	ldr	r1, [pc, #92]	; (8f34 <Adc_ValidateCheckGroupNotConversion+0xa0>)
    8ed8:	4613      	mov	r3, r2
    8eda:	009b      	lsls	r3, r3, #2
    8edc:	4413      	add	r3, r2
    8ede:	009b      	lsls	r3, r3, #2
    8ee0:	440b      	add	r3, r1
    8ee2:	681b      	ldr	r3, [r3, #0]
    8ee4:	9303      	str	r3, [sp, #12]
        /*  Check if ADC is still converting */
        /* SWS_Adc_00112 */
        if ((ADC_IDLE != Conversion) && (ADC_STREAM_COMPLETED != Conversion))
    8ee6:	9b03      	ldr	r3, [sp, #12]
    8ee8:	2b00      	cmp	r3, #0
    8eea:	d00b      	beq.n	8f04 <Adc_ValidateCheckGroupNotConversion+0x70>
    8eec:	9b03      	ldr	r3, [sp, #12]
    8eee:	2b03      	cmp	r3, #3
    8ef0:	d008      	beq.n	8f04 <Adc_ValidateCheckGroupNotConversion+0x70>
        {
            Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
    8ef2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8ef6:	210b      	movs	r1, #11
    8ef8:	4618      	mov	r0, r3
    8efa:	f7ff fd82 	bl	8a02 <Adc_ReportDetRuntimeError>
            ErrorFound = (Std_ReturnType)E_NOT_OK;
    8efe:	2301      	movs	r3, #1
    8f00:	f88d 3015 	strb.w	r3, [sp, #21]
    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    8f04:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    8f08:	3301      	adds	r3, #1
    8f0a:	f8ad 3016 	strh.w	r3, [sp, #22]
    8f0e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8f12:	4a07      	ldr	r2, [pc, #28]	; (8f30 <Adc_ValidateCheckGroupNotConversion+0x9c>)
    8f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f18:	891b      	ldrh	r3, [r3, #8]
    8f1a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    8f1e:	429a      	cmp	r2, r3
    8f20:	d3c8      	bcc.n	8eb4 <Adc_ValidateCheckGroupNotConversion+0x20>
        }
    }
    return ErrorFound;
    8f22:	f89d 3015 	ldrb.w	r3, [sp, #21]
}
    8f26:	4618      	mov	r0, r3
    8f28:	b007      	add	sp, #28
    8f2a:	f85d fb04 	ldr.w	pc, [sp], #4
    8f2e:	bf00      	nop
    8f30:	1fff8d40 	.word	0x1fff8d40
    8f34:	1fff8d48 	.word	0x1fff8d48

00008f38 <Adc_ValidateDeInitNotBusy>:
* @return     Std_ReturnType  Standard return type.
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateDeInitNotBusy(uint8 CoreId)
{
    8f38:	b500      	push	{lr}
    8f3a:	b085      	sub	sp, #20
    8f3c:	4603      	mov	r3, r0
    8f3e:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType ErrorFound = (Std_ReturnType)E_OK;
    8f42:	2300      	movs	r3, #0
    8f44:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    8f48:	2301      	movs	r3, #1
    8f4a:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    8f4e:	2300      	movs	r3, #0
    8f50:	f88d 300d 	strb.w	r3, [sp, #13]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    8f54:	2300      	movs	r3, #0
    8f56:	f88d 300d 	strb.w	r3, [sp, #13]
    8f5a:	e01d      	b.n	8f98 <Adc_ValidateDeInitNotBusy+0x60>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    8f5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8f60:	4a1b      	ldr	r2, [pc, #108]	; (8fd0 <Adc_ValidateDeInitNotBusy+0x98>)
    8f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f66:	681a      	ldr	r2, [r3, #0]
    8f68:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8f6c:	4413      	add	r3, r2
    8f6e:	7f9b      	ldrb	r3, [r3, #30]
    8f70:	2b01      	cmp	r3, #1
    8f72:	d10c      	bne.n	8f8e <Adc_ValidateDeInitNotBusy+0x56>
        {
            ErrorFound = Adc_ValidateNotBusyNoQueue(LogicalHwUnitId, ADC_DEINIT_ID);
    8f74:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8f78:	2101      	movs	r1, #1
    8f7a:	4618      	mov	r0, r3
    8f7c:	f7ff ff20 	bl	8dc0 <Adc_ValidateNotBusyNoQueue>
    8f80:	4603      	mov	r3, r0
    8f82:	f88d 300f 	strb.w	r3, [sp, #15]
            if ((Std_ReturnType)E_NOT_OK == ErrorFound)
    8f86:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8f8a:	2b01      	cmp	r3, #1
    8f8c:	d009      	beq.n	8fa2 <Adc_ValidateDeInitNotBusy+0x6a>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    8f8e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8f92:	3301      	adds	r3, #1
    8f94:	f88d 300d 	strb.w	r3, [sp, #13]
    8f98:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8f9c:	2b01      	cmp	r3, #1
    8f9e:	d9dd      	bls.n	8f5c <Adc_ValidateDeInitNotBusy+0x24>
    8fa0:	e000      	b.n	8fa4 <Adc_ValidateDeInitNotBusy+0x6c>
            {
                break;
    8fa2:	bf00      	nop
            }
        }
    }
    if ((Std_ReturnType)E_OK == ErrorFound)
    8fa4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8fa8:	2b00      	cmp	r3, #0
    8faa:	d10b      	bne.n	8fc4 <Adc_ValidateDeInitNotBusy+0x8c>
    {
        if ((Std_ReturnType)E_OK == Adc_ValidateCheckGroupNotConversion(ADC_DEINIT_ID, CoreId))
    8fac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8fb0:	4619      	mov	r1, r3
    8fb2:	2001      	movs	r0, #1
    8fb4:	f7ff ff6e 	bl	8e94 <Adc_ValidateCheckGroupNotConversion>
    8fb8:	4603      	mov	r3, r0
    8fba:	2b00      	cmp	r3, #0
    8fbc:	d102      	bne.n	8fc4 <Adc_ValidateDeInitNotBusy+0x8c>
        {
            ValidState = (Std_ReturnType)E_OK;
    8fbe:	2300      	movs	r3, #0
    8fc0:	f88d 300e 	strb.w	r3, [sp, #14]
        }
    }

    return ValidState;
    8fc4:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    8fc8:	4618      	mov	r0, r3
    8fca:	b005      	add	sp, #20
    8fcc:	f85d fb04 	ldr.w	pc, [sp], #4
    8fd0:	1fff8d40 	.word	0x1fff8d40

00008fd4 <Adc_ValidateSetupBufferNotBusy>:
* @return     Std_ReturnType  Standard return type.
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateSetupBufferNotBusy(Adc_GroupType Group)
{
    8fd4:	b500      	push	{lr}
    8fd6:	b085      	sub	sp, #20
    8fd8:	4603      	mov	r3, r0
    8fda:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_NOT_OK;
    8fde:	2301      	movs	r3, #1
    8fe0:	f88d 300f 	strb.w	r3, [sp, #15]

    if (ADC_IDLE != Adc_axGroupStatus[Group].Conversion)
    8fe4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8fe8:	490b      	ldr	r1, [pc, #44]	; (9018 <Adc_ValidateSetupBufferNotBusy+0x44>)
    8fea:	4613      	mov	r3, r2
    8fec:	009b      	lsls	r3, r3, #2
    8fee:	4413      	add	r3, r2
    8ff0:	009b      	lsls	r3, r3, #2
    8ff2:	440b      	add	r3, r1
    8ff4:	681b      	ldr	r3, [r3, #0]
    8ff6:	2b00      	cmp	r3, #0
    8ff8:	d004      	beq.n	9004 <Adc_ValidateSetupBufferNotBusy+0x30>
    {
        /* SWS_Adc_00433 */
        Adc_ReportDetRuntimeError(ADC_SETUPRESULTBUFFER_ID, (uint8)ADC_E_BUSY);
    8ffa:	210b      	movs	r1, #11
    8ffc:	200c      	movs	r0, #12
    8ffe:	f7ff fd00 	bl	8a02 <Adc_ReportDetRuntimeError>
    9002:	e002      	b.n	900a <Adc_ValidateSetupBufferNotBusy+0x36>
    }
    else
    {
        ValidState = (Std_ReturnType)E_OK;
    9004:	2300      	movs	r3, #0
    9006:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return ValidState;
    900a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    900e:	4618      	mov	r0, r3
    9010:	b005      	add	sp, #20
    9012:	f85d fb04 	ldr.w	pc, [sp], #4
    9016:	bf00      	nop
    9018:	1fff8d48 	.word	0x1fff8d48

0000901c <Adc_ValidateStateStartGroupConvNotBusy>:
* @retval     E_OK:           The call is valid
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateStateStartGroupConvNotBusy(Adc_GroupType Group,
                                                                    uint8 CoreId)
{
    901c:	b500      	push	{lr}
    901e:	b085      	sub	sp, #20
    9020:	4603      	mov	r3, r0
    9022:	460a      	mov	r2, r1
    9024:	f8ad 3006 	strh.w	r3, [sp, #6]
    9028:	4613      	mov	r3, r2
    902a:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex;
    Std_ReturnType ValidState = (Std_ReturnType)E_OK;
    902e:	2300      	movs	r3, #0
    9030:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean Implicitly = FALSE;
    9034:	2300      	movs	r3, #0
    9036:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType HwGroupId;
    Adc_GroupConvType TypeHwGroup;
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */

    /* Get the mapping index of group in the current partition */
    GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    903a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    903e:	4a32      	ldr	r2, [pc, #200]	; (9108 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    9040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9044:	68da      	ldr	r2, [r3, #12]
    9046:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    904a:	005b      	lsls	r3, r3, #1
    904c:	4413      	add	r3, r2
    904e:	881b      	ldrh	r3, [r3, #0]
    9050:	f8ad 300c 	strh.w	r3, [sp, #12]
    if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    9054:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9058:	4a2b      	ldr	r2, [pc, #172]	; (9108 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    905a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    905e:	685a      	ldr	r2, [r3, #4]
    9060:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9064:	2134      	movs	r1, #52	; 0x34
    9066:	fb01 f303 	mul.w	r3, r1, r3
    906a:	4413      	add	r3, r2
    906c:	689b      	ldr	r3, [r3, #8]
    906e:	2b00      	cmp	r3, #0
    9070:	d02c      	beq.n	90cc <Adc_ValidateStateStartGroupConvNotBusy+0xb0>
        ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    9072:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9076:	4a24      	ldr	r2, [pc, #144]	; (9108 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    9078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    907c:	685a      	ldr	r2, [r3, #4]
    907e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9082:	2134      	movs	r1, #52	; 0x34
    9084:	fb01 f303 	mul.w	r3, r1, r3
    9088:	4413      	add	r3, r2
    908a:	689b      	ldr	r3, [r3, #8]
    if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    908c:	2b01      	cmp	r3, #1
    908e:	d120      	bne.n	90d2 <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    9090:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9094:	4a1c      	ldr	r2, [pc, #112]	; (9108 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    9096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    909a:	685a      	ldr	r2, [r3, #4]
    909c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    90a0:	2134      	movs	r1, #52	; 0x34
    90a2:	fb01 f303 	mul.w	r3, r1, r3
    90a6:	4413      	add	r3, r2
    90a8:	685b      	ldr	r3, [r3, #4]
        ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    90aa:	2b01      	cmp	r3, #1
    90ac:	d111      	bne.n	90d2 <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode)
    90ae:	f89d 3005 	ldrb.w	r3, [sp, #5]
    90b2:	4a15      	ldr	r2, [pc, #84]	; (9108 <Adc_ValidateStateStartGroupConvNotBusy+0xec>)
    90b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90b8:	685a      	ldr	r2, [r3, #4]
    90ba:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    90be:	2134      	movs	r1, #52	; 0x34
    90c0:	fb01 f303 	mul.w	r3, r1, r3
    90c4:	4413      	add	r3, r2
    90c6:	699b      	ldr	r3, [r3, #24]
        (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    90c8:	2b00      	cmp	r3, #0
    90ca:	d102      	bne.n	90d2 <Adc_ValidateStateStartGroupConvNotBusy+0xb6>
        )
       )
    {
        /* The current group can be implicitly stopped */
        Implicitly = TRUE;
    90cc:	2301      	movs	r3, #1
    90ce:	f88d 300e 	strb.w	r3, [sp, #14]
    {
        ValidState = (Std_ReturnType)E_NOT_OK;
    }
#endif /* (ADC_ENABLE_CTU_CONTROL_MODE_API == STD_ON) */

    if ((Std_ReturnType)E_NOT_OK == ValidState)
    90d2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    90d6:	2b01      	cmp	r3, #1
    90d8:	d104      	bne.n	90e4 <Adc_ValidateStateStartGroupConvNotBusy+0xc8>
    {
        Adc_ReportDetRuntimeError(ADC_STARTGROUPCONVERSION_ID, (uint8)ADC_E_BUSY);
    90da:	210b      	movs	r1, #11
    90dc:	2002      	movs	r0, #2
    90de:	f7ff fc90 	bl	8a02 <Adc_ReportDetRuntimeError>
    90e2:	e00b      	b.n	90fc <Adc_ValidateStateStartGroupConvNotBusy+0xe0>
    }
    else
    {
#if (ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE)
        ValidState = Adc_ValidateNotBusyNoPrio(Group, Implicitly, CoreId);
    90e4:	f89d 2005 	ldrb.w	r2, [sp, #5]
    90e8:	f89d 100e 	ldrb.w	r1, [sp, #14]
    90ec:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    90f0:	4618      	mov	r0, r3
    90f2:	f7ff fe8d 	bl	8e10 <Adc_ValidateNotBusyNoPrio>
    90f6:	4603      	mov	r3, r0
    90f8:	f88d 300f 	strb.w	r3, [sp, #15]
#else /* ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE */
        ValidState = Adc_ValidateNotBusyWithPrio(Group, Implicitly, CoreId);
#endif  /* ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE */
    }
    return ValidState;
    90fc:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    9100:	4618      	mov	r0, r3
    9102:	b005      	add	sp, #20
    9104:	f85d fb04 	ldr.w	pc, [sp], #4
    9108:	1fff8d40 	.word	0x1fff8d40

0000910c <Adc_ValidateStateNotIdle>:
* @retval     E_NOT_OK:       The call is not valid
*/
static inline Std_ReturnType Adc_ValidateStateNotIdle(uint8 ServiceId,
                                                      Adc_GroupType Group,
                                                      uint8 CoreId)
{
    910c:	b500      	push	{lr}
    910e:	b085      	sub	sp, #20
    9110:	4603      	mov	r3, r0
    9112:	f88d 3007 	strb.w	r3, [sp, #7]
    9116:	460b      	mov	r3, r1
    9118:	f8ad 3004 	strh.w	r3, [sp, #4]
    911c:	4613      	mov	r3, r2
    911e:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ValidState = (Std_ReturnType)E_OK;
    9122:	2300      	movs	r3, #0
    9124:	f88d 300f 	strb.w	r3, [sp, #15]
    SwInjectedQueueIndex = Adc_axUnitStatus[LogicalHwUnitId].SwInjectedQueueIndex;
#else
    (void)CoreId;
#endif /* (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON) */

    switch (ServiceId)
    9128:	f89d 3007 	ldrb.w	r3, [sp, #7]
    912c:	2b0b      	cmp	r3, #11
    912e:	d03b      	beq.n	91a8 <Adc_ValidateStateNotIdle+0x9c>
    9130:	2b0b      	cmp	r3, #11
    9132:	dc4e      	bgt.n	91d2 <Adc_ValidateStateNotIdle+0xc6>
    9134:	2b03      	cmp	r3, #3
    9136:	d022      	beq.n	917e <Adc_ValidateStateNotIdle+0x72>
    9138:	2b04      	cmp	r3, #4
    913a:	d14a      	bne.n	91d2 <Adc_ValidateStateNotIdle+0xc6>
    {
#if (ADC_READ_GROUP_API == STD_ON)
        case ADC_VALUEREADGROUP_ID:
        {
            if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    913c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9140:	492a      	ldr	r1, [pc, #168]	; (91ec <Adc_ValidateStateNotIdle+0xe0>)
    9142:	4613      	mov	r3, r2
    9144:	009b      	lsls	r3, r3, #2
    9146:	4413      	add	r3, r2
    9148:	009b      	lsls	r3, r3, #2
    914a:	440b      	add	r3, r1
    914c:	681b      	ldr	r3, [r3, #0]
    914e:	2b00      	cmp	r3, #0
    9150:	d141      	bne.n	91d6 <Adc_ValidateStateNotIdle+0xca>
            {
                if (ADC_NOT_YET_CONVERTED == Adc_axGroupStatus[Group].AlreadyConverted)
    9152:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9156:	4925      	ldr	r1, [pc, #148]	; (91ec <Adc_ValidateStateNotIdle+0xe0>)
    9158:	4613      	mov	r3, r2
    915a:	009b      	lsls	r3, r3, #2
    915c:	4413      	add	r3, r2
    915e:	009b      	lsls	r3, r3, #2
    9160:	440b      	add	r3, r1
    9162:	3304      	adds	r3, #4
    9164:	681b      	ldr	r3, [r3, #0]
    9166:	2b00      	cmp	r3, #0
    9168:	d135      	bne.n	91d6 <Adc_ValidateStateNotIdle+0xca>
                {
                    /* SWS_Adc_00388 */
                    Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    916a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    916e:	210c      	movs	r1, #12
    9170:	4618      	mov	r0, r3
    9172:	f7ff fc46 	bl	8a02 <Adc_ReportDetRuntimeError>
                    ValidState = (Std_ReturnType)E_NOT_OK;
    9176:	2301      	movs	r3, #1
    9178:	f88d 300f 	strb.w	r3, [sp, #15]
                }
            }
            break;
    917c:	e02b      	b.n	91d6 <Adc_ValidateStateNotIdle+0xca>
        }
#endif /* ADC_READ_GROUP_API == STD_ON */
        case ADC_STOPGROUPCONVERSION_ID:
        {
            if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    917e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    9182:	491a      	ldr	r1, [pc, #104]	; (91ec <Adc_ValidateStateNotIdle+0xe0>)
    9184:	4613      	mov	r3, r2
    9186:	009b      	lsls	r3, r3, #2
    9188:	4413      	add	r3, r2
    918a:	009b      	lsls	r3, r3, #2
    918c:	440b      	add	r3, r1
    918e:	681b      	ldr	r3, [r3, #0]
    9190:	2b00      	cmp	r3, #0
    9192:	d122      	bne.n	91da <Adc_ValidateStateNotIdle+0xce>
            {
                /* SWS_Adc_00241 */
                Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    9194:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9198:	210c      	movs	r1, #12
    919a:	4618      	mov	r0, r3
    919c:	f7ff fc31 	bl	8a02 <Adc_ReportDetRuntimeError>
                ValidState = (Std_ReturnType)E_NOT_OK;
    91a0:	2301      	movs	r3, #1
    91a2:	f88d 300f 	strb.w	r3, [sp, #15]
                    Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_BUSY);
                    ValidState = (Std_ReturnType)E_NOT_OK;
                }
#endif /* (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON) */
            }
            break;
    91a6:	e018      	b.n	91da <Adc_ValidateStateNotIdle+0xce>
            break;
        }
#endif /* ADC_HW_TRIGGER_API == STD_ON */
        case ADC_GETSTREAMLASTPOINTER_ID:
        {
             if (ADC_IDLE == Adc_axGroupStatus[Group].Conversion)
    91a8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    91ac:	490f      	ldr	r1, [pc, #60]	; (91ec <Adc_ValidateStateNotIdle+0xe0>)
    91ae:	4613      	mov	r3, r2
    91b0:	009b      	lsls	r3, r3, #2
    91b2:	4413      	add	r3, r2
    91b4:	009b      	lsls	r3, r3, #2
    91b6:	440b      	add	r3, r1
    91b8:	681b      	ldr	r3, [r3, #0]
    91ba:	2b00      	cmp	r3, #0
    91bc:	d10f      	bne.n	91de <Adc_ValidateStateNotIdle+0xd2>
             {
                 /* SWS_Adc_00215 */
                 Adc_ReportDetRuntimeError(ServiceId, (uint8)ADC_E_IDLE);
    91be:	f89d 3007 	ldrb.w	r3, [sp, #7]
    91c2:	210c      	movs	r1, #12
    91c4:	4618      	mov	r0, r3
    91c6:	f7ff fc1c 	bl	8a02 <Adc_ReportDetRuntimeError>
                 ValidState = (Std_ReturnType)E_NOT_OK;
    91ca:	2301      	movs	r3, #1
    91cc:	f88d 300f 	strb.w	r3, [sp, #15]
             }
            break;
    91d0:	e005      	b.n	91de <Adc_ValidateStateNotIdle+0xd2>
        }
        default:
        {
            ; /* no-op */
            break;
    91d2:	bf00      	nop
    91d4:	e004      	b.n	91e0 <Adc_ValidateStateNotIdle+0xd4>
            break;
    91d6:	bf00      	nop
    91d8:	e002      	b.n	91e0 <Adc_ValidateStateNotIdle+0xd4>
            break;
    91da:	bf00      	nop
    91dc:	e000      	b.n	91e0 <Adc_ValidateStateNotIdle+0xd4>
            break;
    91de:	bf00      	nop
        }
    }

    return ValidState;
    91e0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    91e4:	4618      	mov	r0, r3
    91e6:	b005      	add	sp, #20
    91e8:	f85d fb04 	ldr.w	pc, [sp], #4
    91ec:	1fff8d48 	.word	0x1fff8d48

000091f0 <Adc_ValidateCallAndGroup>:
* @implements     Adc_ValidateCallAndGroup_Activity
*/
static inline Std_ReturnType Adc_ValidateCallAndGroup(uint8 ServiceId,
                                                      Adc_GroupType Group,
                                                      uint8 CoreId)
{
    91f0:	b500      	push	{lr}
    91f2:	b085      	sub	sp, #20
    91f4:	4603      	mov	r3, r0
    91f6:	f88d 3007 	strb.w	r3, [sp, #7]
    91fa:	460b      	mov	r3, r1
    91fc:	f8ad 3004 	strh.w	r3, [sp, #4]
    9200:	4613      	mov	r3, r2
    9202:	f88d 3006 	strb.w	r3, [sp, #6]
    Std_ReturnType ValidCallAndGroup = (Std_ReturnType)E_NOT_OK;
    9206:	2301      	movs	r3, #1
    9208:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidCoreId = (Std_ReturnType)E_NOT_OK;
    920c:	2301      	movs	r3, #1
    920e:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType GroupIndex = 0U;
    9212:	2300      	movs	r3, #0
    9214:	f8ad 300c 	strh.w	r3, [sp, #12]

    if (NULL_PTR == Adc_apxCfgPtr[CoreId])
    9218:	f89d 3006 	ldrb.w	r3, [sp, #6]
    921c:	4a2e      	ldr	r2, [pc, #184]	; (92d8 <Adc_ValidateCallAndGroup+0xe8>)
    921e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9222:	2b00      	cmp	r3, #0
    9224:	d106      	bne.n	9234 <Adc_ValidateCallAndGroup+0x44>
    {
        /* SWS_Adc_00300, SWS_Adc_00301, SWS_Adc_00302, SWS_Adc_00299, SWS_Adc_00298, SWS_Adc_00297, SWS_Adc_00296, SWS_Adc_00295, SWS_Adc_00294, SWS_Adc_00434 */
        Adc_ReportDetError(ServiceId, (uint8)ADC_E_UNINIT);
    9226:	f89d 3007 	ldrb.w	r3, [sp, #7]
    922a:	210a      	movs	r1, #10
    922c:	4618      	mov	r0, r3
    922e:	f7ff fbd3 	bl	89d8 <Adc_ReportDetError>
    9232:	e04b      	b.n	92cc <Adc_ValidateCallAndGroup+0xdc>
        (void)GroupIndex;
        (void)ValidCoreId;
    }
    else
    {
        ValidCoreId = Adc_CheckCurrentCoreId(Adc_apxCfgPtr[CoreId], CoreId);
    9234:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9238:	4a27      	ldr	r2, [pc, #156]	; (92d8 <Adc_ValidateCallAndGroup+0xe8>)
    923a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    923e:	f89d 2006 	ldrb.w	r2, [sp, #6]
    9242:	4611      	mov	r1, r2
    9244:	4618      	mov	r0, r3
    9246:	f000 f961 	bl	950c <Adc_CheckCurrentCoreId>
    924a:	4603      	mov	r3, r0
    924c:	f88d 300e 	strb.w	r3, [sp, #14]
        if ((Std_ReturnType)E_OK == ValidCoreId)
    9250:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9254:	2b00      	cmp	r3, #0
    9256:	d133      	bne.n	92c0 <Adc_ValidateCallAndGroup+0xd0>
        {
            if (Group >= ADC_MAX_GROUPS)
    9258:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    925c:	2b01      	cmp	r3, #1
    925e:	d906      	bls.n	926e <Adc_ValidateCallAndGroup+0x7e>
            {
                /* SWS_Adc_00218, SWS_Adc_00225, SWS_Adc_00131, SWS_Adc_00130, SWS_Adc_00129, SWS_Adc_00128, SWS_Adc_00152, SWS_Adc_00126, SWS_Adc_00125, SWS_Adc_00423 */
                Adc_ReportDetError(ServiceId, (uint8)ADC_E_PARAM_GROUP);
    9260:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9264:	2115      	movs	r1, #21
    9266:	4618      	mov	r0, r3
    9268:	f7ff fbb6 	bl	89d8 <Adc_ReportDetError>
    926c:	e02e      	b.n	92cc <Adc_ValidateCallAndGroup+0xdc>
                (void)GroupIndex;
            }
            else
            {
                /* Get the mapping index of group in the current partition */
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    926e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9272:	4a19      	ldr	r2, [pc, #100]	; (92d8 <Adc_ValidateCallAndGroup+0xe8>)
    9274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9278:	68da      	ldr	r2, [r3, #12]
    927a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    927e:	005b      	lsls	r3, r3, #1
    9280:	4413      	add	r3, r2
    9282:	881b      	ldrh	r3, [r3, #0]
    9284:	f8ad 300c 	strh.w	r3, [sp, #12]
                if (Group != Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].GroupId)
    9288:	f89d 3006 	ldrb.w	r3, [sp, #6]
    928c:	4a12      	ldr	r2, [pc, #72]	; (92d8 <Adc_ValidateCallAndGroup+0xe8>)
    928e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9292:	685a      	ldr	r2, [r3, #4]
    9294:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9298:	2134      	movs	r1, #52	; 0x34
    929a:	fb01 f303 	mul.w	r3, r1, r3
    929e:	4413      	add	r3, r2
    92a0:	881b      	ldrh	r3, [r3, #0]
    92a2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    92a6:	429a      	cmp	r2, r3
    92a8:	d006      	beq.n	92b8 <Adc_ValidateCallAndGroup+0xc8>
                {
                    /* Group doesn't belong to current core */
                    Adc_ReportDetError(ServiceId, (uint8)ADC_E_PARAM_CONFIG);
    92aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    92ae:	210e      	movs	r1, #14
    92b0:	4618      	mov	r0, r3
    92b2:	f7ff fb91 	bl	89d8 <Adc_ReportDetError>
    92b6:	e009      	b.n	92cc <Adc_ValidateCallAndGroup+0xdc>
                }
                else
                {
                    ValidCallAndGroup = (Std_ReturnType)E_OK;
    92b8:	2300      	movs	r3, #0
    92ba:	f88d 300f 	strb.w	r3, [sp, #15]
    92be:	e005      	b.n	92cc <Adc_ValidateCallAndGroup+0xdc>
            }
        }
        else
        {
            /* CPR_RTD_00420.adc */
            Adc_ReportDetError(ServiceId, (uint8)ADC_E_PARAM_CONFIG);
    92c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    92c4:	210e      	movs	r1, #14
    92c6:	4618      	mov	r0, r3
    92c8:	f7ff fb86 	bl	89d8 <Adc_ReportDetError>
        }
    }

    return ValidCallAndGroup;
    92cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    92d0:	4618      	mov	r0, r3
    92d2:	b005      	add	sp, #20
    92d4:	f85d fb04 	ldr.w	pc, [sp], #4
    92d8:	1fff8d40 	.word	0x1fff8d40

000092dc <Adc_ValidateCallAndUnit>:
* @implements     Adc_ValidateCallAndUnit_Activity
*/
static inline Std_ReturnType Adc_ValidateCallAndUnit(uint8 ServiceId,
                                                     Adc_HwUnitType Unit,
                                                     uint8 CoreId)
{
    92dc:	b500      	push	{lr}
    92de:	b085      	sub	sp, #20
    92e0:	4603      	mov	r3, r0
    92e2:	f88d 3007 	strb.w	r3, [sp, #7]
    92e6:	460b      	mov	r3, r1
    92e8:	f88d 3006 	strb.w	r3, [sp, #6]
    92ec:	4613      	mov	r3, r2
    92ee:	f88d 3005 	strb.w	r3, [sp, #5]
    Std_ReturnType ValidCallAndUnit = (Std_ReturnType)E_NOT_OK;
    92f2:	2301      	movs	r3, #1
    92f4:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidCoreId;

    if (NULL_PTR == Adc_apxCfgPtr[CoreId])
    92f8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    92fc:	4a25      	ldr	r2, [pc, #148]	; (9394 <Adc_ValidateCallAndUnit+0xb8>)
    92fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9302:	2b00      	cmp	r3, #0
    9304:	d106      	bne.n	9314 <Adc_ValidateCallAndUnit+0x38>
    {
        /* CPR_RTD_00272.adc, CPR_RTD_00273.adc */
        Adc_ReportDetError(ServiceId, (uint8)ADC_E_UNINIT);
    9306:	f89d 3007 	ldrb.w	r3, [sp, #7]
    930a:	210a      	movs	r1, #10
    930c:	4618      	mov	r0, r3
    930e:	f7ff fb63 	bl	89d8 <Adc_ReportDetError>
    9312:	e039      	b.n	9388 <Adc_ValidateCallAndUnit+0xac>
    }
    else if (Unit >= ADC_IPW_MAX_HW_UNITS_CFG)
    9314:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9318:	2b01      	cmp	r3, #1
    931a:	d906      	bls.n	932a <Adc_ValidateCallAndUnit+0x4e>
    {
        Adc_ReportDetError(ServiceId, (uint8)ADC_E_PARAM_UNIT);
    931c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9320:	2126      	movs	r1, #38	; 0x26
    9322:	4618      	mov	r0, r3
    9324:	f7ff fb58 	bl	89d8 <Adc_ReportDetError>
    9328:	e02e      	b.n	9388 <Adc_ValidateCallAndUnit+0xac>
    }
    else
    {
        ValidCoreId = Adc_CheckCurrentCoreId(Adc_apxCfgPtr[CoreId], CoreId);
    932a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    932e:	4a19      	ldr	r2, [pc, #100]	; (9394 <Adc_ValidateCallAndUnit+0xb8>)
    9330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9334:	f89d 2005 	ldrb.w	r2, [sp, #5]
    9338:	4611      	mov	r1, r2
    933a:	4618      	mov	r0, r3
    933c:	f000 f8e6 	bl	950c <Adc_CheckCurrentCoreId>
    9340:	4603      	mov	r3, r0
    9342:	f88d 300e 	strb.w	r3, [sp, #14]
        if ((Std_ReturnType)E_OK == ValidCoreId)
    9346:	f89d 300e 	ldrb.w	r3, [sp, #14]
    934a:	2b00      	cmp	r3, #0
    934c:	d116      	bne.n	937c <Adc_ValidateCallAndUnit+0xa0>
        {
            if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[Unit] == (uint8)STD_ON) /* HW unit enabled on current partition */
    934e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9352:	4a10      	ldr	r2, [pc, #64]	; (9394 <Adc_ValidateCallAndUnit+0xb8>)
    9354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9358:	681a      	ldr	r2, [r3, #0]
    935a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    935e:	4413      	add	r3, r2
    9360:	7f9b      	ldrb	r3, [r3, #30]
    9362:	2b01      	cmp	r3, #1
    9364:	d103      	bne.n	936e <Adc_ValidateCallAndUnit+0x92>
            {
                ValidCallAndUnit = (Std_ReturnType)E_OK;
    9366:	2300      	movs	r3, #0
    9368:	f88d 300f 	strb.w	r3, [sp, #15]
    936c:	e00c      	b.n	9388 <Adc_ValidateCallAndUnit+0xac>
            }
            else
            {
                Adc_ReportDetError(ServiceId, (uint8)ADC_E_PARAM_CONFIG);
    936e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9372:	210e      	movs	r1, #14
    9374:	4618      	mov	r0, r3
    9376:	f7ff fb2f 	bl	89d8 <Adc_ReportDetError>
    937a:	e005      	b.n	9388 <Adc_ValidateCallAndUnit+0xac>
            }
        }
        else
        {
            /* CPR_RTD_00420.adc */
            Adc_ReportDetError(ServiceId, (uint8)ADC_E_PARAM_CONFIG);
    937c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9380:	210e      	movs	r1, #14
    9382:	4618      	mov	r0, r3
    9384:	f7ff fb28 	bl	89d8 <Adc_ReportDetError>
        }
    }

    return ValidCallAndUnit;
    9388:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    938c:	4618      	mov	r0, r3
    938e:	b005      	add	sp, #20
    9390:	f85d fb04 	ldr.w	pc, [sp], #4
    9394:	1fff8d40 	.word	0x1fff8d40

00009398 <Adc_InitGroupsStatus>:
* @return         void
*
* @pre            Driver must be initialized.
*/
static inline void Adc_InitGroupsStatus(uint8 CoreId)
{
    9398:	b084      	sub	sp, #16
    939a:	4603      	mov	r3, r0
    939c:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_GroupType GroupCnt = 0U;
    93a0:	2300      	movs	r3, #0
    93a2:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_GroupType GroupId = 0U;
    93a6:	2300      	movs	r3, #0
    93a8:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Initialize Group Status structures to beginning values */
    for (GroupCnt = 0U; GroupCnt < Adc_apxCfgPtr[CoreId]->GroupCount; GroupCnt++)
    93ac:	2300      	movs	r3, #0
    93ae:	f8ad 300e 	strh.w	r3, [sp, #14]
    93b2:	e049      	b.n	9448 <Adc_InitGroupsStatus+0xb0>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupCnt].GroupId;
    93b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    93b8:	4a2a      	ldr	r2, [pc, #168]	; (9464 <Adc_InitGroupsStatus+0xcc>)
    93ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93be:	685a      	ldr	r2, [r3, #4]
    93c0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    93c4:	2134      	movs	r1, #52	; 0x34
    93c6:	fb01 f303 	mul.w	r3, r1, r3
    93ca:	4413      	add	r3, r2
    93cc:	881b      	ldrh	r3, [r3, #0]
    93ce:	f8ad 300c 	strh.w	r3, [sp, #12]
        /* SWS_Adc_00221, SWS_Adc_00307 */
        Adc_axGroupStatus[GroupId].Conversion = ADC_IDLE;
    93d2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    93d6:	4924      	ldr	r1, [pc, #144]	; (9468 <Adc_InitGroupsStatus+0xd0>)
    93d8:	4613      	mov	r3, r2
    93da:	009b      	lsls	r3, r3, #2
    93dc:	4413      	add	r3, r2
    93de:	009b      	lsls	r3, r3, #2
    93e0:	440b      	add	r3, r1
    93e2:	2200      	movs	r2, #0
    93e4:	601a      	str	r2, [r3, #0]
        /* this group was not converted yet */
        Adc_axGroupStatus[GroupId].AlreadyConverted = ADC_NOT_YET_CONVERTED;
    93e6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    93ea:	491f      	ldr	r1, [pc, #124]	; (9468 <Adc_InitGroupsStatus+0xd0>)
    93ec:	4613      	mov	r3, r2
    93ee:	009b      	lsls	r3, r3, #2
    93f0:	4413      	add	r3, r2
    93f2:	009b      	lsls	r3, r3, #2
    93f4:	440b      	add	r3, r1
    93f6:	3304      	adds	r3, #4
    93f8:	2200      	movs	r2, #0
    93fa:	601a      	str	r2, [r3, #0]

        Adc_axGroupStatus[GroupId].ResultIndex = 0U;
    93fc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9400:	4919      	ldr	r1, [pc, #100]	; (9468 <Adc_InitGroupsStatus+0xd0>)
    9402:	4613      	mov	r3, r2
    9404:	009b      	lsls	r3, r3, #2
    9406:	4413      	add	r3, r2
    9408:	009b      	lsls	r3, r3, #2
    940a:	440b      	add	r3, r1
    940c:	3308      	adds	r3, #8
    940e:	2200      	movs	r2, #0
    9410:	801a      	strh	r2, [r3, #0]
        Adc_axGroupStatus[GroupId].ResultsBufferPtr = NULL_PTR;
    9412:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9416:	4914      	ldr	r1, [pc, #80]	; (9468 <Adc_InitGroupsStatus+0xd0>)
    9418:	4613      	mov	r3, r2
    941a:	009b      	lsls	r3, r3, #2
    941c:	4413      	add	r3, r2
    941e:	009b      	lsls	r3, r3, #2
    9420:	440b      	add	r3, r1
    9422:	330c      	adds	r3, #12
    9424:	2200      	movs	r2, #0
    9426:	601a      	str	r2, [r3, #0]
#ifdef ADC_CURRENT_CHANNEL_USED
        Adc_axGroupStatus[GroupId].CurrentChannel = 0U;
    9428:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    942c:	490e      	ldr	r1, [pc, #56]	; (9468 <Adc_InitGroupsStatus+0xd0>)
    942e:	4613      	mov	r3, r2
    9430:	009b      	lsls	r3, r3, #2
    9432:	4413      	add	r3, r2
    9434:	009b      	lsls	r3, r3, #2
    9436:	440b      	add	r3, r1
    9438:	3310      	adds	r3, #16
    943a:	2200      	movs	r2, #0
    943c:	701a      	strb	r2, [r3, #0]
    for (GroupCnt = 0U; GroupCnt < Adc_apxCfgPtr[CoreId]->GroupCount; GroupCnt++)
    943e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9442:	3301      	adds	r3, #1
    9444:	f8ad 300e 	strh.w	r3, [sp, #14]
    9448:	f89d 3007 	ldrb.w	r3, [sp, #7]
    944c:	4a05      	ldr	r2, [pc, #20]	; (9464 <Adc_InitGroupsStatus+0xcc>)
    944e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9452:	891b      	ldrh	r3, [r3, #8]
    9454:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9458:	429a      	cmp	r2, r3
    945a:	d3ab      	bcc.n	93b4 <Adc_InitGroupsStatus+0x1c>
        Adc_axRuntimeGroupChannel[GroupId].RuntimeChanMask = 0xFFFFFFFFUL;
#endif /* (ADC_IPW_PDB_AVAILABLE == STD_ON) */
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    }
}
    945c:	bf00      	nop
    945e:	bf00      	nop
    9460:	b004      	add	sp, #16
    9462:	4770      	bx	lr
    9464:	1fff8d40 	.word	0x1fff8d40
    9468:	1fff8d48 	.word	0x1fff8d48

0000946c <Adc_InitUnitStatus>:
* @return         void
*
* @pre            Driver must be initialized.
*/
static inline void Adc_InitUnitStatus(uint8 CoreId)
{
    946c:	b084      	sub	sp, #16
    946e:	4603      	mov	r3, r0
    9470:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    9474:	2300      	movs	r3, #0
    9476:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_QueueIndexType QueueIdx = 0U;
    947a:	2300      	movs	r3, #0
    947c:	f8ad 300c 	strh.w	r3, [sp, #12]

    /* Loop for all configured hardware units in current partition */
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    9480:	2300      	movs	r3, #0
    9482:	f88d 300f 	strb.w	r3, [sp, #15]
    9486:	e035      	b.n	94f4 <Adc_InitUnitStatus+0x88>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    9488:	f89d 3007 	ldrb.w	r3, [sp, #7]
    948c:	4a1d      	ldr	r2, [pc, #116]	; (9504 <Adc_InitUnitStatus+0x98>)
    948e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9492:	681a      	ldr	r2, [r3, #0]
    9494:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9498:	4413      	add	r3, r2
    949a:	7f9b      	ldrb	r3, [r3, #30]
    949c:	2b01      	cmp	r3, #1
    949e:	d124      	bne.n	94ea <Adc_InitUnitStatus+0x7e>
        {
            /* Filled slots in the queue */
            Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex = 0U;
    94a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    94a4:	4a18      	ldr	r2, [pc, #96]	; (9508 <Adc_InitUnitStatus+0x9c>)
    94a6:	2100      	movs	r1, #0
    94a8:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            /* Mark all the queue slots as "empty" */
            for (QueueIdx = 0U; QueueIdx < ADC_QUEUE_MAX_DEPTH_MAX; QueueIdx++)
    94ac:	2300      	movs	r3, #0
    94ae:	f8ad 300c 	strh.w	r3, [sp, #12]
    94b2:	e00f      	b.n	94d4 <Adc_InitUnitStatus+0x68>
            {
                Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[QueueIdx] = 0U;
    94b4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    94b8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    94bc:	4912      	ldr	r1, [pc, #72]	; (9508 <Adc_InitUnitStatus+0x9c>)
    94be:	0092      	lsls	r2, r2, #2
    94c0:	4413      	add	r3, r2
    94c2:	005b      	lsls	r3, r3, #1
    94c4:	440b      	add	r3, r1
    94c6:	2200      	movs	r2, #0
    94c8:	805a      	strh	r2, [r3, #2]
            for (QueueIdx = 0U; QueueIdx < ADC_QUEUE_MAX_DEPTH_MAX; QueueIdx++)
    94ca:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    94ce:	3301      	adds	r3, #1
    94d0:	f8ad 300c 	strh.w	r3, [sp, #12]
    94d4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    94d8:	2b01      	cmp	r3, #1
    94da:	d9eb      	bls.n	94b4 <Adc_InitUnitStatus+0x48>
            /* If there is no ongoing HW group then HW trigger capability is disabled */
            Adc_axUnitStatus[LogicalHwUnitId].OngoingHwGroup = ADC_INVALID_HW_GROUP_ID;
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */

#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
            Adc_axUnitStatus[LogicalHwUnitId].Sc1Used = 0U;
    94dc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    94e0:	4a09      	ldr	r2, [pc, #36]	; (9508 <Adc_InitUnitStatus+0x9c>)
    94e2:	00db      	lsls	r3, r3, #3
    94e4:	4413      	add	r3, r2
    94e6:	2200      	movs	r2, #0
    94e8:	719a      	strb	r2, [r3, #6]
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    94ea:	f89d 300f 	ldrb.w	r3, [sp, #15]
    94ee:	3301      	adds	r3, #1
    94f0:	f88d 300f 	strb.w	r3, [sp, #15]
    94f4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    94f8:	2b01      	cmp	r3, #1
    94fa:	d9c5      	bls.n	9488 <Adc_InitUnitStatus+0x1c>
#if (ADC_DUAL_CLOCK_MODE == STD_ON)
#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
    Adc_aeClockMode[CoreId] = ADC_NORMAL;
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */
}
    94fc:	bf00      	nop
    94fe:	bf00      	nop
    9500:	b004      	add	sp, #16
    9502:	4770      	bx	lr
    9504:	1fff8d40 	.word	0x1fff8d40
    9508:	1fff8d70 	.word	0x1fff8d70

0000950c <Adc_CheckCurrentCoreId>:
* @retval       E_OK:           CoreId is valid
* @retval       E_NOT_OK:       CoreId is not valid
*/
static inline Std_ReturnType Adc_CheckCurrentCoreId(const Adc_ConfigType * CfgPtr,
                                                    uint8 CoreId)
{
    950c:	b084      	sub	sp, #16
    950e:	9001      	str	r0, [sp, #4]
    9510:	460b      	mov	r3, r1
    9512:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 Index = 0U;
    9516:	2300      	movs	r3, #0
    9518:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType ValidCoreId = (Std_ReturnType)E_NOT_OK;
    951c:	2301      	movs	r3, #1
    951e:	f88d 300e 	strb.w	r3, [sp, #14]

    if (CoreId == CfgPtr->CoreId)
    9522:	9b01      	ldr	r3, [sp, #4]
    9524:	7c1b      	ldrb	r3, [r3, #16]
    9526:	f89d 2003 	ldrb.w	r2, [sp, #3]
    952a:	429a      	cmp	r2, r3
    952c:	d11c      	bne.n	9568 <Adc_CheckCurrentCoreId+0x5c>
    {
        for (Index = 0U; Index < CfgPtr->AssignedPartitionCount; Index++)
    952e:	2300      	movs	r3, #0
    9530:	f88d 300f 	strb.w	r3, [sp, #15]
    9534:	e012      	b.n	955c <Adc_CheckCurrentCoreId+0x50>
        {
            if (CoreId == CfgPtr->AssignmentPartitionPtr[Index])
    9536:	9b01      	ldr	r3, [sp, #4]
    9538:	695a      	ldr	r2, [r3, #20]
    953a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    953e:	4413      	add	r3, r2
    9540:	781b      	ldrb	r3, [r3, #0]
    9542:	f89d 2003 	ldrb.w	r2, [sp, #3]
    9546:	429a      	cmp	r2, r3
    9548:	d103      	bne.n	9552 <Adc_CheckCurrentCoreId+0x46>
            {
                ValidCoreId = (Std_ReturnType)E_OK;
    954a:	2300      	movs	r3, #0
    954c:	f88d 300e 	strb.w	r3, [sp, #14]
                break;
    9550:	e00a      	b.n	9568 <Adc_CheckCurrentCoreId+0x5c>
        for (Index = 0U; Index < CfgPtr->AssignedPartitionCount; Index++)
    9552:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9556:	3301      	adds	r3, #1
    9558:	f88d 300f 	strb.w	r3, [sp, #15]
    955c:	9b01      	ldr	r3, [sp, #4]
    955e:	7e1b      	ldrb	r3, [r3, #24]
    9560:	f89d 200f 	ldrb.w	r2, [sp, #15]
    9564:	429a      	cmp	r2, r3
    9566:	d3e6      	bcc.n	9536 <Adc_CheckCurrentCoreId+0x2a>
            }
        }
    }

    return ValidCoreId;
    9568:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    956c:	4618      	mov	r0, r3
    956e:	b004      	add	sp, #16
    9570:	4770      	bx	lr

00009572 <Adc_UpdateStatusStartConversion>:
* SWS_Adc_00335
*/
static inline void Adc_UpdateStatusStartConversion(const Adc_GroupType Group,
                                                   const Adc_HwUnitType Unit,
                                                   uint8 CoreId)
{
    9572:	b500      	push	{lr}
    9574:	b085      	sub	sp, #20
    9576:	4603      	mov	r3, r0
    9578:	f8ad 3006 	strh.w	r3, [sp, #6]
    957c:	460b      	mov	r3, r1
    957e:	f88d 3005 	strb.w	r3, [sp, #5]
    9582:	4613      	mov	r3, r2
    9584:	f88d 3004 	strb.w	r3, [sp, #4]
#if (ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON)
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    /* First available slot in the Queue */
#if ((ADC_PRIORITY_IMPLEMENTATION != ADC_PRIORITY_NONE) || ((ADC_ENABLE_QUEUING == STD_ON) && (ADC_QUEUE_MAX_DEPTH_MAX != 1U)))
    Adc_QueueIndexType QueueIndex = 0U;
    9588:	2300      	movs	r3, #0
    958a:	f8ad 300e 	strh.w	r3, [sp, #14]
#endif
#if (ADC_ENABLE_QUEUING == STD_ON)
    Adc_QueueIndexType SwNormalQueueIndex;
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    958e:	2300      	movs	r3, #0
    9590:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Mark the Group as BUSY when the Group goes to the Queue or gets started */
    /* SWS_Adc_00222 */
    Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    9594:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9598:	493e      	ldr	r1, [pc, #248]	; (9694 <Adc_UpdateStatusStartConversion+0x122>)
    959a:	4613      	mov	r3, r2
    959c:	009b      	lsls	r3, r3, #2
    959e:	4413      	add	r3, r2
    95a0:	009b      	lsls	r3, r3, #2
    95a2:	440b      	add	r3, r1
    95a4:	2201      	movs	r2, #1
    95a6:	601a      	str	r2, [r3, #0]
    /* SWS_Adc_00431 */
    Adc_axGroupStatus[Group].ResultIndex = 0U;
    95a8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    95ac:	4939      	ldr	r1, [pc, #228]	; (9694 <Adc_UpdateStatusStartConversion+0x122>)
    95ae:	4613      	mov	r3, r2
    95b0:	009b      	lsls	r3, r3, #2
    95b2:	4413      	add	r3, r2
    95b4:	009b      	lsls	r3, r3, #2
    95b6:	440b      	add	r3, r1
    95b8:	3308      	adds	r3, #8
    95ba:	2200      	movs	r2, #0
    95bc:	801a      	strh	r2, [r3, #0]
            }
        }
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
#else /* ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE */
#if (ADC_ENABLE_QUEUING == STD_ON) && (ADC_QUEUE_MAX_DEPTH_MAX != 1U)
        SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01();
    95be:	f008 f843 	bl	11648 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>
        QueueIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    95c2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    95c6:	4a34      	ldr	r2, [pc, #208]	; (9698 <Adc_UpdateStatusStartConversion+0x126>)
    95c8:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    95cc:	f8ad 300e 	strh.w	r3, [sp, #14]
        if (QueueIndex > (Adc_QueueIndexType)0U)
    95d0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    95d4:	2b00      	cmp	r3, #0
    95d6:	d016      	beq.n	9606 <Adc_UpdateStatusStartConversion+0x94>
        {
            /* Place the Group in the Queue */
            Adc_axUnitStatus[Unit].SwNormalQueue[QueueIndex] = Group;
    95d8:	f89d 2005 	ldrb.w	r2, [sp, #5]
    95dc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    95e0:	492d      	ldr	r1, [pc, #180]	; (9698 <Adc_UpdateStatusStartConversion+0x126>)
    95e2:	0092      	lsls	r2, r2, #2
    95e4:	4413      	add	r3, r2
    95e6:	005b      	lsls	r3, r3, #1
    95e8:	440b      	add	r3, r1
    95ea:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    95ee:	805a      	strh	r2, [r3, #2]
            /* Increase the Queue Index */
            Adc_axUnitStatus[Unit].SwNormalQueueIndex++;
    95f0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    95f4:	4a28      	ldr	r2, [pc, #160]	; (9698 <Adc_UpdateStatusStartConversion+0x126>)
    95f6:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    95fa:	b292      	uxth	r2, r2
    95fc:	3201      	adds	r2, #1
    95fe:	b291      	uxth	r1, r2
    9600:	4a25      	ldr	r2, [pc, #148]	; (9698 <Adc_UpdateStatusStartConversion+0x126>)
    9602:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
        }
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    9606:	f008 f84b 	bl	116a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
#else /* ADC_ENABLE_QUEUING == STD_OFF*/
    /* In this case all the StartConversion should be rejected by DET */
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
#endif /* ADC_PRIORITY_IMPLEMENTATION == ADC_PRIORITY_NONE */

        SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01();
    960a:	f008 f81d 	bl	11648 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>
#if (ADC_ENABLE_QUEUING == STD_ON)
        SwNormalQueueIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    960e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9612:	4a21      	ldr	r2, [pc, #132]	; (9698 <Adc_UpdateStatusStartConversion+0x126>)
    9614:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    9618:	f8ad 300a 	strh.w	r3, [sp, #10]
        /* SWS_Adc_00338, SWS_Adc_00417 */
        if ((Adc_axUnitStatus[Unit].SwNormalQueue[0U] == Group) || (0U == SwNormalQueueIndex))
    961c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9620:	4a1d      	ldr	r2, [pc, #116]	; (9698 <Adc_UpdateStatusStartConversion+0x126>)
    9622:	00db      	lsls	r3, r3, #3
    9624:	4413      	add	r3, r2
    9626:	885b      	ldrh	r3, [r3, #2]
    9628:	b29b      	uxth	r3, r3
    962a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    962e:	429a      	cmp	r2, r3
    9630:	d003      	beq.n	963a <Adc_UpdateStatusStartConversion+0xc8>
    9632:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    9636:	2b00      	cmp	r3, #0
    9638:	d125      	bne.n	9686 <Adc_UpdateStatusStartConversion+0x114>
        {
            /* No_priorities OR Queue_is_empty */
            /* Indicate a new group was added to the queue */
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
            if (0U == Adc_axUnitStatus[Unit].SwNormalQueueIndex)
    963a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    963e:	4a16      	ldr	r2, [pc, #88]	; (9698 <Adc_UpdateStatusStartConversion+0x126>)
    9640:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    9644:	b29b      	uxth	r3, r3
    9646:	2b00      	cmp	r3, #0
    9648:	d112      	bne.n	9670 <Adc_UpdateStatusStartConversion+0xfe>
            {
                /* Place the Group in the Queue */
                Adc_axUnitStatus[Unit].SwNormalQueue[0U] = Group;
    964a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    964e:	4a12      	ldr	r2, [pc, #72]	; (9698 <Adc_UpdateStatusStartConversion+0x126>)
    9650:	00db      	lsls	r3, r3, #3
    9652:	4413      	add	r3, r2
    9654:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9658:	805a      	strh	r2, [r3, #2]
                Adc_axUnitStatus[Unit].SwNormalQueueIndex++;
    965a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    965e:	4a0e      	ldr	r2, [pc, #56]	; (9698 <Adc_UpdateStatusStartConversion+0x126>)
    9660:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    9664:	b292      	uxth	r2, r2
    9666:	3201      	adds	r2, #1
    9668:	b291      	uxth	r1, r2
    966a:	4a0b      	ldr	r2, [pc, #44]	; (9698 <Adc_UpdateStatusStartConversion+0x126>)
    966c:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
            }
            /* exit critical region */
            SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    9670:	f008 f816 	bl	116a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
            /* ADC will not be running - no ISR can occur now */
            Adc_Ipw_StartNormalConversion(Unit, CoreId);
    9674:	f89d 2004 	ldrb.w	r2, [sp, #4]
    9678:	f89d 3005 	ldrb.w	r3, [sp, #5]
    967c:	4611      	mov	r1, r2
    967e:	4618      	mov	r0, r3
    9680:	f002 fcda 	bl	c038 <Adc_Ipw_StartNormalConversion>
    9684:	e002      	b.n	968c <Adc_UpdateStatusStartConversion+0x11a>
#if (ADC_ENABLE_QUEUING == STD_ON)
        }
        else
        {
        /* exit critical region */
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01();
    9686:	f008 f80b 	bl	116a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>
        }
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    }
    (void)TimeOutStatus;
}
    968a:	bf00      	nop
    968c:	bf00      	nop
    968e:	b005      	add	sp, #20
    9690:	f85d fb04 	ldr.w	pc, [sp], #4
    9694:	1fff8d48 	.word	0x1fff8d48
    9698:	1fff8d70 	.word	0x1fff8d70

0000969c <Adc_StopSwGroupConversion>:
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Adc_GroupType Group,
    Adc_HwUnitType Unit,
    uint8 CoreId
)
{
    969c:	b500      	push	{lr}
    969e:	b085      	sub	sp, #20
    96a0:	9001      	str	r0, [sp, #4]
    96a2:	4608      	mov	r0, r1
    96a4:	4611      	mov	r1, r2
    96a6:	461a      	mov	r2, r3
    96a8:	4603      	mov	r3, r0
    96aa:	f8ad 3002 	strh.w	r3, [sp, #2]
    96ae:	460b      	mov	r3, r1
    96b0:	f88d 3001 	strb.w	r3, [sp, #1]
    96b4:	4613      	mov	r3, r2
    96b6:	f88d 3000 	strb.w	r3, [sp]
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    96ba:	2300      	movs	r3, #0
    96bc:	f88d 300f 	strb.w	r3, [sp, #15]
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    {
#if (ADC_ENABLE_QUEUING == STD_ON)
        /* SWS_Adc_00437 */
        /* Find the Group in the Queue */
        *RemovedPos = Adc_axUnitStatus[Unit].SwNormalQueueIndex;  /* initialize with something invalid */
    96c0:	f89d 3001 	ldrb.w	r3, [sp, #1]
    96c4:	4a26      	ldr	r2, [pc, #152]	; (9760 <Adc_StopSwGroupConversion+0xc4>)
    96c6:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    96ca:	b29a      	uxth	r2, r3
    96cc:	9b01      	ldr	r3, [sp, #4]
    96ce:	801a      	strh	r2, [r3, #0]
        NumOfSwNormalQueue = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    96d0:	f89d 3001 	ldrb.w	r3, [sp, #1]
    96d4:	4a22      	ldr	r2, [pc, #136]	; (9760 <Adc_StopSwGroupConversion+0xc4>)
    96d6:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    96da:	f8ad 300a 	strh.w	r3, [sp, #10]
        for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    96de:	2300      	movs	r3, #0
    96e0:	f8ad 300c 	strh.w	r3, [sp, #12]
    96e4:	e02f      	b.n	9746 <Adc_StopSwGroupConversion+0xaa>
        {
            if (Group == Adc_axUnitStatus[Unit].SwNormalQueue[SwNormalQueueIndex])
    96e6:	f89d 2001 	ldrb.w	r2, [sp, #1]
    96ea:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    96ee:	491c      	ldr	r1, [pc, #112]	; (9760 <Adc_StopSwGroupConversion+0xc4>)
    96f0:	0092      	lsls	r2, r2, #2
    96f2:	4413      	add	r3, r2
    96f4:	005b      	lsls	r3, r3, #1
    96f6:	440b      	add	r3, r1
    96f8:	885b      	ldrh	r3, [r3, #2]
    96fa:	b29b      	uxth	r3, r3
    96fc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    9700:	429a      	cmp	r2, r3
    9702:	d11b      	bne.n	973c <Adc_StopSwGroupConversion+0xa0>
            {
                /* The group is found in the Queue */
                /* Store the position of the group to be removed */
                *RemovedPos = SwNormalQueueIndex;
    9704:	9b01      	ldr	r3, [sp, #4]
    9706:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    970a:	801a      	strh	r2, [r3, #0]

                /* Stop the conversion of all channels belonging to this group */
                if ((Adc_QueueIndexType)0U == SwNormalQueueIndex) /* In this case the group might be under conversion */
    970c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9710:	2b00      	cmp	r3, #0
    9712:	d10b      	bne.n	972c <Adc_StopSwGroupConversion+0x90>
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
                {
                    /* SWS_Adc_00386 */
                    TimeOutStatus = Adc_Ipw_StopCurrentConversion(Unit, Group, CoreId);
    9714:	f89d 2000 	ldrb.w	r2, [sp]
    9718:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    971c:	f89d 3001 	ldrb.w	r3, [sp, #1]
    9720:	4618      	mov	r0, r3
    9722:	f002 fd33 	bl	c18c <Adc_Ipw_StopCurrentConversion>
    9726:	4603      	mov	r3, r0
    9728:	f88d 300f 	strb.w	r3, [sp, #15]
                }
#if (ADC_ENABLE_QUEUING == STD_ON)
                /* SWS_Adc_00438 */
                /* Remove group from Queue */
                Adc_Ipw_RemoveFromQueue(Unit, SwNormalQueueIndex);
    972c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    9730:	f89d 3001 	ldrb.w	r3, [sp, #1]
    9734:	4611      	mov	r1, r2
    9736:	4618      	mov	r0, r3
    9738:	f001 fe70 	bl	b41c <Adc_Ipw_RemoveFromQueue>
        for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    973c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9740:	3301      	adds	r3, #1
    9742:	f8ad 300c 	strh.w	r3, [sp, #12]
    9746:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    974a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    974e:	429a      	cmp	r2, r3
    9750:	d3c9      	bcc.n	96e6 <Adc_StopSwGroupConversion+0x4a>
        /* No element will be present in the queue */
        Adc_axUnitStatus[Unit].SwNormalQueueIndex = 0U;
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    }

    return TimeOutStatus;
    9752:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    9756:	4618      	mov	r0, r3
    9758:	b005      	add	sp, #20
    975a:	f85d fb04 	ldr.w	pc, [sp], #4
    975e:	bf00      	nop
    9760:	1fff8d70 	.word	0x1fff8d70

00009764 <Adc_UpdateStatusStopConversion>:
* SWS_Adc_00437
*/
static inline void Adc_UpdateStatusStopConversion(Adc_GroupType Group,
                                                  Adc_HwUnitType Unit,
                                                  uint8 CoreId)
{
    9764:	b500      	push	{lr}
    9766:	b089      	sub	sp, #36	; 0x24
    9768:	4603      	mov	r3, r0
    976a:	f8ad 3006 	strh.w	r3, [sp, #6]
    976e:	460b      	mov	r3, r1
    9770:	f88d 3005 	strb.w	r3, [sp, #5]
    9774:	4613      	mov	r3, r2
    9776:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    977a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    977e:	4a4f      	ldr	r2, [pc, #316]	; (98bc <Adc_UpdateStatusStopConversion+0x158>)
    9780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9784:	68da      	ldr	r2, [r3, #12]
    9786:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    978a:	005b      	lsls	r3, r3, #1
    978c:	4413      	add	r3, r2
    978e:	881b      	ldrh	r3, [r3, #0]
    9790:	f8ad 301e 	strh.w	r3, [sp, #30]
#if (ADC_ENABLE_QUEUING == STD_ON)
    Adc_QueueIndexType RemovedPos = 0U;
    9794:	2300      	movs	r3, #0
    9796:	f8ad 300a 	strh.w	r3, [sp, #10]
#endif /* (ADC_ENABLE_QUEUING == STD_ON) */
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    979a:	2300      	movs	r3, #0
    979c:	f88d 301d 	strb.w	r3, [sp, #29]

#if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
    Adc_axGroupStatus[Group].LimitCheckFailed = FALSE;
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_ON */

    Mode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode;
    97a0:	f89d 3004 	ldrb.w	r3, [sp, #4]
    97a4:	4a45      	ldr	r2, [pc, #276]	; (98bc <Adc_UpdateStatusStopConversion+0x158>)
    97a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97aa:	685a      	ldr	r2, [r3, #4]
    97ac:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    97b0:	2134      	movs	r1, #52	; 0x34
    97b2:	fb01 f303 	mul.w	r3, r1, r3
    97b6:	4413      	add	r3, r2
    97b8:	689b      	ldr	r3, [r3, #8]
    97ba:	9306      	str	r3, [sp, #24]
    AccessMode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode;
    97bc:	f89d 3004 	ldrb.w	r3, [sp, #4]
    97c0:	4a3e      	ldr	r2, [pc, #248]	; (98bc <Adc_UpdateStatusStopConversion+0x158>)
    97c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97c6:	685a      	ldr	r2, [r3, #4]
    97c8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    97cc:	2134      	movs	r1, #52	; 0x34
    97ce:	fb01 f303 	mul.w	r3, r1, r3
    97d2:	4413      	add	r3, r2
    97d4:	685b      	ldr	r3, [r3, #4]
    97d6:	9305      	str	r3, [sp, #20]
    BufferMode = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode;
    97d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    97dc:	4a37      	ldr	r2, [pc, #220]	; (98bc <Adc_UpdateStatusStopConversion+0x158>)
    97de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97e2:	685a      	ldr	r2, [r3, #4]
    97e4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    97e8:	2134      	movs	r1, #52	; 0x34
    97ea:	fb01 f303 	mul.w	r3, r1, r3
    97ee:	4413      	add	r3, r2
    97f0:	699b      	ldr	r3, [r3, #24]
    97f2:	9304      	str	r3, [sp, #16]
    Conversion = Adc_axGroupStatus[Group].Conversion;
    97f4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    97f8:	4931      	ldr	r1, [pc, #196]	; (98c0 <Adc_UpdateStatusStopConversion+0x15c>)
    97fa:	4613      	mov	r3, r2
    97fc:	009b      	lsls	r3, r3, #2
    97fe:	4413      	add	r3, r2
    9800:	009b      	lsls	r3, r3, #2
    9802:	440b      	add	r3, r1
    9804:	681b      	ldr	r3, [r3, #0]
    9806:	9303      	str	r3, [sp, #12]

     /* FD reset number of samples completed */
     Adc_axGroupStatus[Group].ResultIndex = 0U;
    9808:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    980c:	492c      	ldr	r1, [pc, #176]	; (98c0 <Adc_UpdateStatusStopConversion+0x15c>)
    980e:	4613      	mov	r3, r2
    9810:	009b      	lsls	r3, r3, #2
    9812:	4413      	add	r3, r2
    9814:	009b      	lsls	r3, r3, #2
    9816:	440b      	add	r3, r1
    9818:	3308      	adds	r3, #8
    981a:	2200      	movs	r2, #0
    981c:	801a      	strh	r2, [r3, #0]
     Adc_axGroupStatus[Group].Notification = ADC_NOTIFICATION_DISABLED;
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */
#if ((ADC_SETCHANNEL_API == STD_ON) && (ADC_IPW_PDB_AVAILABLE == STD_ON))
     Adc_axRuntimeGroupChannel[Group].RuntimeChanMask = 0xFFFFFFFFUL;
#endif /* ((ADC_SETCHANNEL_API == STD_ON) && (ADC_IPW_PDB_AVAILABLE == STD_ON)) */
    if (((ADC_CONV_MODE_ONESHOT == Mode) || \
    981e:	9b06      	ldr	r3, [sp, #24]
    9820:	2b00      	cmp	r3, #0
    9822:	d005      	beq.n	9830 <Adc_UpdateStatusStopConversion+0xcc>
    9824:	9b05      	ldr	r3, [sp, #20]
    9826:	2b01      	cmp	r3, #1
    9828:	d110      	bne.n	984c <Adc_UpdateStatusStopConversion+0xe8>
        ((ADC_ACCESS_MODE_STREAMING == AccessMode) && (ADC_STREAM_BUFFER_LINEAR == BufferMode)) \
    982a:	9b04      	ldr	r3, [sp, #16]
    982c:	2b00      	cmp	r3, #0
    982e:	d10d      	bne.n	984c <Adc_UpdateStatusStopConversion+0xe8>
       ) && (ADC_STREAM_COMPLETED == Conversion) \
    9830:	9b03      	ldr	r3, [sp, #12]
    9832:	2b03      	cmp	r3, #3
    9834:	d10a      	bne.n	984c <Adc_UpdateStatusStopConversion+0xe8>
      )
    {
        /* SWS_Adc_00221, SWS_Adc_00360 */
        /* group is stopped, change its status to IDLE  */
        Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    9836:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    983a:	4921      	ldr	r1, [pc, #132]	; (98c0 <Adc_UpdateStatusStopConversion+0x15c>)
    983c:	4613      	mov	r3, r2
    983e:	009b      	lsls	r3, r3, #2
    9840:	4413      	add	r3, r2
    9842:	009b      	lsls	r3, r3, #2
    9844:	440b      	add	r3, r1
    9846:	2200      	movs	r2, #0
    9848:	601a      	str	r2, [r3, #0]
        {
            /* Timeout is expired.*/
            Adc_ReportDetRuntimeError((uint8)ADC_STOPGROUPCONVERSION_ID, (uint8)ADC_E_TIMEOUT);
        }
    }
}
    984a:	e032      	b.n	98b2 <Adc_UpdateStatusStopConversion+0x14e>
        TimeOutStatus = Adc_StopSwGroupConversion(&RemovedPos, Group, Unit, CoreId);
    984c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9850:	f89d 2005 	ldrb.w	r2, [sp, #5]
    9854:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    9858:	f10d 000a 	add.w	r0, sp, #10
    985c:	f7ff ff1e 	bl	969c <Adc_StopSwGroupConversion>
    9860:	4603      	mov	r3, r0
    9862:	f88d 301d 	strb.w	r3, [sp, #29]
        Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    9866:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    986a:	4915      	ldr	r1, [pc, #84]	; (98c0 <Adc_UpdateStatusStopConversion+0x15c>)
    986c:	4613      	mov	r3, r2
    986e:	009b      	lsls	r3, r3, #2
    9870:	4413      	add	r3, r2
    9872:	009b      	lsls	r3, r3, #2
    9874:	440b      	add	r3, r1
    9876:	2200      	movs	r2, #0
    9878:	601a      	str	r2, [r3, #0]
        if ((Adc_QueueIndexType)0U == RemovedPos)
    987a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    987e:	2b00      	cmp	r3, #0
    9880:	d10f      	bne.n	98a2 <Adc_UpdateStatusStopConversion+0x13e>
            if (Adc_axUnitStatus[Unit].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    9882:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9886:	4a0f      	ldr	r2, [pc, #60]	; (98c4 <Adc_UpdateStatusStopConversion+0x160>)
    9888:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    988c:	b29b      	uxth	r3, r3
    988e:	2b00      	cmp	r3, #0
    9890:	d007      	beq.n	98a2 <Adc_UpdateStatusStopConversion+0x13e>
                Adc_Ipw_StartNormalConversion(Unit, CoreId);
    9892:	f89d 2004 	ldrb.w	r2, [sp, #4]
    9896:	f89d 3005 	ldrb.w	r3, [sp, #5]
    989a:	4611      	mov	r1, r2
    989c:	4618      	mov	r0, r3
    989e:	f002 fbcb 	bl	c038 <Adc_Ipw_StartNormalConversion>
        if ((Std_ReturnType)E_NOT_OK == TimeOutStatus)
    98a2:	f89d 301d 	ldrb.w	r3, [sp, #29]
    98a6:	2b01      	cmp	r3, #1
    98a8:	d103      	bne.n	98b2 <Adc_UpdateStatusStopConversion+0x14e>
            Adc_ReportDetRuntimeError((uint8)ADC_STOPGROUPCONVERSION_ID, (uint8)ADC_E_TIMEOUT);
    98aa:	212b      	movs	r1, #43	; 0x2b
    98ac:	2003      	movs	r0, #3
    98ae:	f7ff f8a8 	bl	8a02 <Adc_ReportDetRuntimeError>
}
    98b2:	bf00      	nop
    98b4:	b009      	add	sp, #36	; 0x24
    98b6:	f85d fb04 	ldr.w	pc, [sp], #4
    98ba:	bf00      	nop
    98bc:	1fff8d40 	.word	0x1fff8d40
    98c0:	1fff8d48 	.word	0x1fff8d48
    98c4:	1fff8d70 	.word	0x1fff8d70

000098c8 <Adc_UpdateStatusReadGroup>:
*
*/
static inline void Adc_UpdateStatusReadGroup(const Adc_GroupType Group,
                                             const boolean Flag,
                                             uint8 CoreId)
{
    98c8:	b500      	push	{lr}
    98ca:	b085      	sub	sp, #20
    98cc:	4603      	mov	r3, r0
    98ce:	f8ad 3006 	strh.w	r3, [sp, #6]
    98d2:	460b      	mov	r3, r1
    98d4:	f88d 3005 	strb.w	r3, [sp, #5]
    98d8:	4613      	mov	r3, r2
    98da:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    98de:	f89d 3004 	ldrb.w	r3, [sp, #4]
    98e2:	4a18      	ldr	r2, [pc, #96]	; (9944 <Adc_UpdateStatusReadGroup+0x7c>)
    98e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98e8:	68da      	ldr	r2, [r3, #12]
    98ea:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    98ee:	005b      	lsls	r3, r3, #1
    98f0:	4413      	add	r3, r2
    98f2:	881b      	ldrh	r3, [r3, #0]
    98f4:	f8ad 300e 	strh.w	r3, [sp, #14]
    if ((uint8)STD_ON == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcWithoutInterrupt)
    98f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    98fc:	4a11      	ldr	r2, [pc, #68]	; (9944 <Adc_UpdateStatusReadGroup+0x7c>)
    98fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9902:	685a      	ldr	r2, [r3, #4]
    9904:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9908:	2134      	movs	r1, #52	; 0x34
    990a:	fb01 f303 	mul.w	r3, r1, r3
    990e:	4413      	add	r3, r2
    9910:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    9914:	2b01      	cmp	r3, #1
    9916:	d109      	bne.n	992c <Adc_UpdateStatusReadGroup+0x64>
    {
        Adc_UpdateStatusReadGroupNoInt(Group, Flag, CoreId);
    9918:	f89d 2004 	ldrb.w	r2, [sp, #4]
    991c:	f89d 1005 	ldrb.w	r1, [sp, #5]
    9920:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9924:	4618      	mov	r0, r3
    9926:	f000 f80f 	bl	9948 <Adc_UpdateStatusReadGroupNoInt>
    }
    else
    {
        Adc_UpdateStatusReadGroupInt(Group, CoreId);
    }
}
    992a:	e007      	b.n	993c <Adc_UpdateStatusReadGroup+0x74>
        Adc_UpdateStatusReadGroupInt(Group, CoreId);
    992c:	f89d 2004 	ldrb.w	r2, [sp, #4]
    9930:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9934:	4611      	mov	r1, r2
    9936:	4618      	mov	r0, r3
    9938:	f000 f8e8 	bl	9b0c <Adc_UpdateStatusReadGroupInt>
}
    993c:	bf00      	nop
    993e:	b005      	add	sp, #20
    9940:	f85d fb04 	ldr.w	pc, [sp], #4
    9944:	1fff8d40 	.word	0x1fff8d40

00009948 <Adc_UpdateStatusReadGroupNoInt>:

static inline void Adc_UpdateStatusReadGroupNoInt(const Adc_GroupType Group,
                                                  const boolean Flag,
                                                  uint8 CoreId)
{
    9948:	b500      	push	{lr}
    994a:	b085      	sub	sp, #20
    994c:	4603      	mov	r3, r0
    994e:	f8ad 3006 	strh.w	r3, [sp, #6]
    9952:	460b      	mov	r3, r1
    9954:	f88d 3005 	strb.w	r3, [sp, #5]
    9958:	4613      	mov	r3, r2
    995a:	f88d 3004 	strb.w	r3, [sp, #4]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    995e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9962:	4a2c      	ldr	r2, [pc, #176]	; (9a14 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    9964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9968:	68da      	ldr	r2, [r3, #12]
    996a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    996e:	005b      	lsls	r3, r3, #1
    9970:	4413      	add	r3, r2
    9972:	881b      	ldrh	r3, [r3, #0]
    9974:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* at least once the group was converted */
    Adc_axGroupStatus[Group].AlreadyConverted = ADC_ALREADY_CONVERTED;
    9978:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    997c:	4926      	ldr	r1, [pc, #152]	; (9a18 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    997e:	4613      	mov	r3, r2
    9980:	009b      	lsls	r3, r3, #2
    9982:	4413      	add	r3, r2
    9984:	009b      	lsls	r3, r3, #2
    9986:	440b      	add	r3, r1
    9988:	3304      	adds	r3, #4
    998a:	2201      	movs	r2, #1
    998c:	601a      	str	r2, [r3, #0]
    /* Update conversion status*/
    /* Conversion values are not in the configured range */
    if (TRUE == Flag)
    998e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9992:	2b00      	cmp	r3, #0
    9994:	d03a      	beq.n	9a0c <Adc_UpdateStatusReadGroupNoInt+0xc4>
    {
        /* NOTE: Streaming groups are NOT allowed without interrupts in configuration */
        if (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)
    9996:	f89d 3004 	ldrb.w	r3, [sp, #4]
    999a:	4a1e      	ldr	r2, [pc, #120]	; (9a14 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    999c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99a0:	685a      	ldr	r2, [r3, #4]
    99a2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    99a6:	2134      	movs	r1, #52	; 0x34
    99a8:	fb01 f303 	mul.w	r3, r1, r3
    99ac:	4413      	add	r3, r2
    99ae:	689b      	ldr	r3, [r3, #8]
    99b0:	2b01      	cmp	r3, #1
    99b2:	d10a      	bne.n	99ca <Adc_UpdateStatusReadGroupNoInt+0x82>
        {
            Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    99b4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    99b8:	4917      	ldr	r1, [pc, #92]	; (9a18 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    99ba:	4613      	mov	r3, r2
    99bc:	009b      	lsls	r3, r3, #2
    99be:	4413      	add	r3, r2
    99c0:	009b      	lsls	r3, r3, #2
    99c2:	440b      	add	r3, r1
    99c4:	2201      	movs	r2, #1
    99c6:	601a      	str	r2, [r3, #0]
            /* SWS_Adc_00449, SWS_Adc_00450 */
            Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
        }
    }
    #endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
}
    99c8:	e020      	b.n	9a0c <Adc_UpdateStatusReadGroupNoInt+0xc4>
            if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    99ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
    99ce:	4a11      	ldr	r2, [pc, #68]	; (9a14 <Adc_UpdateStatusReadGroupNoInt+0xcc>)
    99d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99d4:	685a      	ldr	r2, [r3, #4]
    99d6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    99da:	2134      	movs	r1, #52	; 0x34
    99dc:	fb01 f303 	mul.w	r3, r1, r3
    99e0:	4413      	add	r3, r2
    99e2:	695b      	ldr	r3, [r3, #20]
    99e4:	2b00      	cmp	r3, #0
    99e6:	d111      	bne.n	9a0c <Adc_UpdateStatusReadGroupNoInt+0xc4>
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    99e8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    99ec:	490a      	ldr	r1, [pc, #40]	; (9a18 <Adc_UpdateStatusReadGroupNoInt+0xd0>)
    99ee:	4613      	mov	r3, r2
    99f0:	009b      	lsls	r3, r3, #2
    99f2:	4413      	add	r3, r2
    99f4:	009b      	lsls	r3, r3, #2
    99f6:	440b      	add	r3, r1
    99f8:	2200      	movs	r2, #0
    99fa:	601a      	str	r2, [r3, #0]
                Adc_UpdateSwQueueIndexNoInt(Group, CoreId);
    99fc:	f89d 2004 	ldrb.w	r2, [sp, #4]
    9a00:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9a04:	4611      	mov	r1, r2
    9a06:	4618      	mov	r0, r3
    9a08:	f000 f808 	bl	9a1c <Adc_UpdateSwQueueIndexNoInt>
}
    9a0c:	bf00      	nop
    9a0e:	b005      	add	sp, #20
    9a10:	f85d fb04 	ldr.w	pc, [sp], #4
    9a14:	1fff8d40 	.word	0x1fff8d40
    9a18:	1fff8d48 	.word	0x1fff8d48

00009a1c <Adc_UpdateSwQueueIndexNoInt>:

static inline void Adc_UpdateSwQueueIndexNoInt(const Adc_GroupType Group,
                                               uint8 CoreId)
{
    9a1c:	b500      	push	{lr}
    9a1e:	b085      	sub	sp, #20
    9a20:	4603      	mov	r3, r0
    9a22:	460a      	mov	r2, r1
    9a24:	f8ad 3006 	strh.w	r3, [sp, #6]
    9a28:	4613      	mov	r3, r2
    9a2a:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9a2e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9a32:	4a34      	ldr	r2, [pc, #208]	; (9b04 <Adc_UpdateSwQueueIndexNoInt+0xe8>)
    9a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a38:	68da      	ldr	r2, [r3, #12]
    9a3a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9a3e:	005b      	lsls	r3, r3, #1
    9a40:	4413      	add	r3, r2
    9a42:	881b      	ldrh	r3, [r3, #0]
    9a44:	f8ad 300c 	strh.w	r3, [sp, #12]
    Adc_HwUnitType LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcLogicalUnitId;
    9a48:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9a4c:	4a2d      	ldr	r2, [pc, #180]	; (9b04 <Adc_UpdateSwQueueIndexNoInt+0xe8>)
    9a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a52:	685a      	ldr	r2, [r3, #4]
    9a54:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    9a58:	2134      	movs	r1, #52	; 0x34
    9a5a:	fb01 f303 	mul.w	r3, r1, r3
    9a5e:	4413      	add	r3, r2
    9a60:	789b      	ldrb	r3, [r3, #2]
    9a62:	f88d 300b 	strb.w	r3, [sp, #11]
        SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03();
    }
    else /* SW NORMAL CONVERSION */
#endif /* ADC_SOFTWARE_INJECTED_CONVERSIONS_USED == STD_ON */
    {
        if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    9a66:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9a6a:	4a27      	ldr	r2, [pc, #156]	; (9b08 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    9a6c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    9a70:	b29b      	uxth	r3, r3
    9a72:	2b00      	cmp	r3, #0
    9a74:	d041      	beq.n	9afa <Adc_UpdateSwQueueIndexNoInt+0xde>
        {
#if (ADC_ENABLE_QUEUING == STD_ON)
            /* remove group without interrupts from queue  */
            NumOfSwNormalQueue = Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex;
    9a76:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9a7a:	4a23      	ldr	r2, [pc, #140]	; (9b08 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    9a7c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    9a80:	f8ad 3008 	strh.w	r3, [sp, #8]
            for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    9a84:	2300      	movs	r3, #0
    9a86:	f8ad 300e 	strh.w	r3, [sp, #14]
    9a8a:	e01c      	b.n	9ac6 <Adc_UpdateSwQueueIndexNoInt+0xaa>
            {
                if (Group == Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[SwNormalQueueIndex])
    9a8c:	f89d 200b 	ldrb.w	r2, [sp, #11]
    9a90:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9a94:	491c      	ldr	r1, [pc, #112]	; (9b08 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    9a96:	0092      	lsls	r2, r2, #2
    9a98:	4413      	add	r3, r2
    9a9a:	005b      	lsls	r3, r3, #1
    9a9c:	440b      	add	r3, r1
    9a9e:	885b      	ldrh	r3, [r3, #2]
    9aa0:	b29b      	uxth	r3, r3
    9aa2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9aa6:	429a      	cmp	r2, r3
    9aa8:	d108      	bne.n	9abc <Adc_UpdateSwQueueIndexNoInt+0xa0>
                {
                    /* The group is found in the Queue */
                    Adc_Ipw_RemoveFromQueue(LogicalHwUnitId, SwNormalQueueIndex);
    9aaa:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9aae:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9ab2:	4611      	mov	r1, r2
    9ab4:	4618      	mov	r0, r3
    9ab6:	f001 fcb1 	bl	b41c <Adc_Ipw_RemoveFromQueue>
                    break;
    9aba:	e00a      	b.n	9ad2 <Adc_UpdateSwQueueIndexNoInt+0xb6>
            for (SwNormalQueueIndex = 0U; SwNormalQueueIndex < NumOfSwNormalQueue; SwNormalQueueIndex++)
    9abc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9ac0:	3301      	adds	r3, #1
    9ac2:	f8ad 300e 	strh.w	r3, [sp, #14]
    9ac6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9aca:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    9ace:	429a      	cmp	r2, r3
    9ad0:	d3dc      	bcc.n	9a8c <Adc_UpdateSwQueueIndexNoInt+0x70>
                }
            }
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
            /* Start / restore next conversion in the queue*/
            if (0U == SwNormalQueueIndex)
    9ad2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9ad6:	2b00      	cmp	r3, #0
    9ad8:	d10f      	bne.n	9afa <Adc_UpdateSwQueueIndexNoInt+0xde>
            {
                if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > 0U)
    9ada:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9ade:	4a0a      	ldr	r2, [pc, #40]	; (9b08 <Adc_UpdateSwQueueIndexNoInt+0xec>)
    9ae0:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    9ae4:	b29b      	uxth	r3, r3
    9ae6:	2b00      	cmp	r3, #0
    9ae8:	d007      	beq.n	9afa <Adc_UpdateSwQueueIndexNoInt+0xde>
                {
                    Adc_Ipw_StartNormalConversion(LogicalHwUnitId, CoreId);
    9aea:	f89d 2005 	ldrb.w	r2, [sp, #5]
    9aee:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9af2:	4611      	mov	r1, r2
    9af4:	4618      	mov	r0, r3
    9af6:	f002 fa9f 	bl	c038 <Adc_Ipw_StartNormalConversion>
#else
            Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex--;
#endif
        }
    }
}
    9afa:	bf00      	nop
    9afc:	b005      	add	sp, #20
    9afe:	f85d fb04 	ldr.w	pc, [sp], #4
    9b02:	bf00      	nop
    9b04:	1fff8d40 	.word	0x1fff8d40
    9b08:	1fff8d70 	.word	0x1fff8d70

00009b0c <Adc_UpdateStatusReadGroupInt>:

static inline void Adc_UpdateStatusReadGroupInt(const Adc_GroupType Group,
                                                uint8 CoreId)
{
    9b0c:	b084      	sub	sp, #16
    9b0e:	4603      	mov	r3, r0
    9b10:	460a      	mov	r2, r1
    9b12:	f8ad 3006 	strh.w	r3, [sp, #6]
    9b16:	4613      	mov	r3, r2
    9b18:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9b1c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9b20:	4a47      	ldr	r2, [pc, #284]	; (9c40 <Adc_UpdateStatusReadGroupInt+0x134>)
    9b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b26:	68da      	ldr	r2, [r3, #12]
    9b28:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9b2c:	005b      	lsls	r3, r3, #1
    9b2e:	4413      	add	r3, r2
    9b30:	881b      	ldrh	r3, [r3, #0]
    9b32:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* The following code has been added to respect the State Diagram of Streaming Access Mode */
    if (ADC_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    9b36:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9b3a:	4942      	ldr	r1, [pc, #264]	; (9c44 <Adc_UpdateStatusReadGroupInt+0x138>)
    9b3c:	4613      	mov	r3, r2
    9b3e:	009b      	lsls	r3, r3, #2
    9b40:	4413      	add	r3, r2
    9b42:	009b      	lsls	r3, r3, #2
    9b44:	440b      	add	r3, r1
    9b46:	681b      	ldr	r3, [r3, #0]
    9b48:	2b02      	cmp	r3, #2
    9b4a:	d10a      	bne.n	9b62 <Adc_UpdateStatusReadGroupInt+0x56>
    {
        /* SWS_Adc_00331 -- SWS_Adc_00222 */
        Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    9b4c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9b50:	493c      	ldr	r1, [pc, #240]	; (9c44 <Adc_UpdateStatusReadGroupInt+0x138>)
    9b52:	4613      	mov	r3, r2
    9b54:	009b      	lsls	r3, r3, #2
    9b56:	4413      	add	r3, r2
    9b58:	009b      	lsls	r3, r3, #2
    9b5a:	440b      	add	r3, r1
    9b5c:	2201      	movs	r2, #1
    9b5e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        ; /* Empty else branch to avoid MISRA */
    }
}
    9b60:	e06a      	b.n	9c38 <Adc_UpdateStatusReadGroupInt+0x12c>
    else if (ADC_STREAM_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    9b62:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9b66:	4937      	ldr	r1, [pc, #220]	; (9c44 <Adc_UpdateStatusReadGroupInt+0x138>)
    9b68:	4613      	mov	r3, r2
    9b6a:	009b      	lsls	r3, r3, #2
    9b6c:	4413      	add	r3, r2
    9b6e:	009b      	lsls	r3, r3, #2
    9b70:	440b      	add	r3, r1
    9b72:	681b      	ldr	r3, [r3, #0]
    9b74:	2b03      	cmp	r3, #3
    9b76:	d15f      	bne.n	9c38 <Adc_UpdateStatusReadGroupInt+0x12c>
        if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    9b78:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9b7c:	4a30      	ldr	r2, [pc, #192]	; (9c40 <Adc_UpdateStatusReadGroupInt+0x134>)
    9b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b82:	685a      	ldr	r2, [r3, #4]
    9b84:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9b88:	2134      	movs	r1, #52	; 0x34
    9b8a:	fb01 f303 	mul.w	r3, r1, r3
    9b8e:	4413      	add	r3, r2
    9b90:	695b      	ldr	r3, [r3, #20]
    9b92:	2b00      	cmp	r3, #0
    9b94:	d150      	bne.n	9c38 <Adc_UpdateStatusReadGroupInt+0x12c>
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)|| \
    9b96:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9b9a:	4a29      	ldr	r2, [pc, #164]	; (9c40 <Adc_UpdateStatusReadGroupInt+0x134>)
    9b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ba0:	685a      	ldr	r2, [r3, #4]
    9ba2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9ba6:	2134      	movs	r1, #52	; 0x34
    9ba8:	fb01 f303 	mul.w	r3, r1, r3
    9bac:	4413      	add	r3, r2
    9bae:	689b      	ldr	r3, [r3, #8]
    9bb0:	2b00      	cmp	r3, #0
    9bb2:	d02c      	beq.n	9c0e <Adc_UpdateStatusReadGroupInt+0x102>
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    9bb4:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9bb8:	4a21      	ldr	r2, [pc, #132]	; (9c40 <Adc_UpdateStatusReadGroupInt+0x134>)
    9bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bbe:	685a      	ldr	r2, [r3, #4]
    9bc0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9bc4:	2134      	movs	r1, #52	; 0x34
    9bc6:	fb01 f303 	mul.w	r3, r1, r3
    9bca:	4413      	add	r3, r2
    9bcc:	689b      	ldr	r3, [r3, #8]
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)|| \
    9bce:	2b01      	cmp	r3, #1
    9bd0:	d128      	bne.n	9c24 <Adc_UpdateStatusReadGroupInt+0x118>
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    9bd2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9bd6:	4a1a      	ldr	r2, [pc, #104]	; (9c40 <Adc_UpdateStatusReadGroupInt+0x134>)
    9bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bdc:	685a      	ldr	r2, [r3, #4]
    9bde:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9be2:	2134      	movs	r1, #52	; 0x34
    9be4:	fb01 f303 	mul.w	r3, r1, r3
    9be8:	4413      	add	r3, r2
    9bea:	685b      	ldr	r3, [r3, #4]
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    9bec:	2b01      	cmp	r3, #1
    9bee:	d119      	bne.n	9c24 <Adc_UpdateStatusReadGroupInt+0x118>
                (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) \
    9bf0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9bf4:	4a12      	ldr	r2, [pc, #72]	; (9c40 <Adc_UpdateStatusReadGroupInt+0x134>)
    9bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bfa:	685a      	ldr	r2, [r3, #4]
    9bfc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9c00:	2134      	movs	r1, #52	; 0x34
    9c02:	fb01 f303 	mul.w	r3, r1, r3
    9c06:	4413      	add	r3, r2
    9c08:	699b      	ldr	r3, [r3, #24]
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    9c0a:	2b00      	cmp	r3, #0
    9c0c:	d10a      	bne.n	9c24 <Adc_UpdateStatusReadGroupInt+0x118>
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    9c0e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9c12:	490c      	ldr	r1, [pc, #48]	; (9c44 <Adc_UpdateStatusReadGroupInt+0x138>)
    9c14:	4613      	mov	r3, r2
    9c16:	009b      	lsls	r3, r3, #2
    9c18:	4413      	add	r3, r2
    9c1a:	009b      	lsls	r3, r3, #2
    9c1c:	440b      	add	r3, r1
    9c1e:	2200      	movs	r2, #0
    9c20:	601a      	str	r2, [r3, #0]
}
    9c22:	e009      	b.n	9c38 <Adc_UpdateStatusReadGroupInt+0x12c>
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    9c24:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9c28:	4906      	ldr	r1, [pc, #24]	; (9c44 <Adc_UpdateStatusReadGroupInt+0x138>)
    9c2a:	4613      	mov	r3, r2
    9c2c:	009b      	lsls	r3, r3, #2
    9c2e:	4413      	add	r3, r2
    9c30:	009b      	lsls	r3, r3, #2
    9c32:	440b      	add	r3, r1
    9c34:	2201      	movs	r2, #1
    9c36:	601a      	str	r2, [r3, #0]
}
    9c38:	bf00      	nop
    9c3a:	b004      	add	sp, #16
    9c3c:	4770      	bx	lr
    9c3e:	bf00      	nop
    9c40:	1fff8d40 	.word	0x1fff8d40
    9c44:	1fff8d48 	.word	0x1fff8d48

00009c48 <Adc_UpdateStatusAfterGetStream>:
* @return         void
*
*/
static inline void Adc_UpdateStatusAfterGetStream(Adc_GroupType Group,
                                                  uint8 CoreId)
{
    9c48:	b084      	sub	sp, #16
    9c4a:	4603      	mov	r3, r0
    9c4c:	460a      	mov	r2, r1
    9c4e:	f8ad 3006 	strh.w	r3, [sp, #6]
    9c52:	4613      	mov	r3, r2
    9c54:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    9c58:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9c5c:	4a46      	ldr	r2, [pc, #280]	; (9d78 <Adc_UpdateStatusAfterGetStream+0x130>)
    9c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c62:	68da      	ldr	r2, [r3, #12]
    9c64:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9c68:	005b      	lsls	r3, r3, #1
    9c6a:	4413      	add	r3, r2
    9c6c:	881b      	ldrh	r3, [r3, #0]
    9c6e:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* The following code has been added to respect the State Diagram of Streaming Access Mode */
    if (ADC_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    9c72:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9c76:	4941      	ldr	r1, [pc, #260]	; (9d7c <Adc_UpdateStatusAfterGetStream+0x134>)
    9c78:	4613      	mov	r3, r2
    9c7a:	009b      	lsls	r3, r3, #2
    9c7c:	4413      	add	r3, r2
    9c7e:	009b      	lsls	r3, r3, #2
    9c80:	440b      	add	r3, r1
    9c82:	681b      	ldr	r3, [r3, #0]
    9c84:	2b02      	cmp	r3, #2
    9c86:	d109      	bne.n	9c9c <Adc_UpdateStatusAfterGetStream+0x54>
    {
        /* SWS_Adc_00328 -- SWS_Adc_00222 */
        Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    9c88:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9c8c:	493b      	ldr	r1, [pc, #236]	; (9d7c <Adc_UpdateStatusAfterGetStream+0x134>)
    9c8e:	4613      	mov	r3, r2
    9c90:	009b      	lsls	r3, r3, #2
    9c92:	4413      	add	r3, r2
    9c94:	009b      	lsls	r3, r3, #2
    9c96:	440b      	add	r3, r1
    9c98:	2201      	movs	r2, #1
    9c9a:	601a      	str	r2, [r3, #0]
    }

    if (ADC_STREAM_COMPLETED == Adc_axGroupStatus[Group].Conversion)
    9c9c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9ca0:	4936      	ldr	r1, [pc, #216]	; (9d7c <Adc_UpdateStatusAfterGetStream+0x134>)
    9ca2:	4613      	mov	r3, r2
    9ca4:	009b      	lsls	r3, r3, #2
    9ca6:	4413      	add	r3, r2
    9ca8:	009b      	lsls	r3, r3, #2
    9caa:	440b      	add	r3, r1
    9cac:	681b      	ldr	r3, [r3, #0]
    9cae:	2b03      	cmp	r3, #3
    9cb0:	d15f      	bne.n	9d72 <Adc_UpdateStatusAfterGetStream+0x12a>
    {
        /* Compliance with State Diagram */
        if (ADC_TRIGG_SRC_SW == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].TriggerSource)
    9cb2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9cb6:	4a30      	ldr	r2, [pc, #192]	; (9d78 <Adc_UpdateStatusAfterGetStream+0x130>)
    9cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cbc:	685a      	ldr	r2, [r3, #4]
    9cbe:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9cc2:	2134      	movs	r1, #52	; 0x34
    9cc4:	fb01 f303 	mul.w	r3, r1, r3
    9cc8:	4413      	add	r3, r2
    9cca:	695b      	ldr	r3, [r3, #20]
    9ccc:	2b00      	cmp	r3, #0
    9cce:	d150      	bne.n	9d72 <Adc_UpdateStatusAfterGetStream+0x12a>
        {
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    9cd0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9cd4:	4a28      	ldr	r2, [pc, #160]	; (9d78 <Adc_UpdateStatusAfterGetStream+0x130>)
    9cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cda:	685a      	ldr	r2, [r3, #4]
    9cdc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9ce0:	2134      	movs	r1, #52	; 0x34
    9ce2:	fb01 f303 	mul.w	r3, r1, r3
    9ce6:	4413      	add	r3, r2
    9ce8:	689b      	ldr	r3, [r3, #8]
    9cea:	2b00      	cmp	r3, #0
    9cec:	d02c      	beq.n	9d48 <Adc_UpdateStatusAfterGetStream+0x100>
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    9cee:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9cf2:	4a21      	ldr	r2, [pc, #132]	; (9d78 <Adc_UpdateStatusAfterGetStream+0x130>)
    9cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cf8:	685a      	ldr	r2, [r3, #4]
    9cfa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9cfe:	2134      	movs	r1, #52	; 0x34
    9d00:	fb01 f303 	mul.w	r3, r1, r3
    9d04:	4413      	add	r3, r2
    9d06:	689b      	ldr	r3, [r3, #8]
            if ((ADC_CONV_MODE_ONESHOT == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) || \
    9d08:	2b01      	cmp	r3, #1
    9d0a:	d128      	bne.n	9d5e <Adc_UpdateStatusAfterGetStream+0x116>
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    9d0c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9d10:	4a19      	ldr	r2, [pc, #100]	; (9d78 <Adc_UpdateStatusAfterGetStream+0x130>)
    9d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d16:	685a      	ldr	r2, [r3, #4]
    9d18:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9d1c:	2134      	movs	r1, #52	; 0x34
    9d1e:	fb01 f303 	mul.w	r3, r1, r3
    9d22:	4413      	add	r3, r2
    9d24:	685b      	ldr	r3, [r3, #4]
               ((ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode) && \
    9d26:	2b01      	cmp	r3, #1
    9d28:	d119      	bne.n	9d5e <Adc_UpdateStatusAfterGetStream+0x116>
                (ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) \
    9d2a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9d2e:	4a12      	ldr	r2, [pc, #72]	; (9d78 <Adc_UpdateStatusAfterGetStream+0x130>)
    9d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d34:	685a      	ldr	r2, [r3, #4]
    9d36:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9d3a:	2134      	movs	r1, #52	; 0x34
    9d3c:	fb01 f303 	mul.w	r3, r1, r3
    9d40:	4413      	add	r3, r2
    9d42:	699b      	ldr	r3, [r3, #24]
                (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) && \
    9d44:	2b00      	cmp	r3, #0
    9d46:	d10a      	bne.n	9d5e <Adc_UpdateStatusAfterGetStream+0x116>
               )
              )
            {
                /* SWS_Adc_00327 -- SWS_Adc_00221 */
                Adc_axGroupStatus[Group].Conversion = ADC_IDLE;
    9d48:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9d4c:	490b      	ldr	r1, [pc, #44]	; (9d7c <Adc_UpdateStatusAfterGetStream+0x134>)
    9d4e:	4613      	mov	r3, r2
    9d50:	009b      	lsls	r3, r3, #2
    9d52:	4413      	add	r3, r2
    9d54:	009b      	lsls	r3, r3, #2
    9d56:	440b      	add	r3, r1
    9d58:	2200      	movs	r2, #0
    9d5a:	601a      	str	r2, [r3, #0]
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
            }
        }
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */
    }
}
    9d5c:	e009      	b.n	9d72 <Adc_UpdateStatusAfterGetStream+0x12a>
                Adc_axGroupStatus[Group].Conversion = ADC_BUSY;
    9d5e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9d62:	4906      	ldr	r1, [pc, #24]	; (9d7c <Adc_UpdateStatusAfterGetStream+0x134>)
    9d64:	4613      	mov	r3, r2
    9d66:	009b      	lsls	r3, r3, #2
    9d68:	4413      	add	r3, r2
    9d6a:	009b      	lsls	r3, r3, #2
    9d6c:	440b      	add	r3, r1
    9d6e:	2201      	movs	r2, #1
    9d70:	601a      	str	r2, [r3, #0]
}
    9d72:	bf00      	nop
    9d74:	b004      	add	sp, #16
    9d76:	4770      	bx	lr
    9d78:	1fff8d40 	.word	0x1fff8d40
    9d7c:	1fff8d48 	.word	0x1fff8d48

00009d80 <Adc_Init>:
                                       GLOBAL FUNCTIONS
==================================================================================================*/
/* SWS_Adc_00365, SWS_Adc_00246, SWS_Adc_00056 */
/** @implements      Adc_Init_Activity */
void Adc_Init(const Adc_ConfigType * ConfigPtr)
{
    9d80:	b500      	push	{lr}
    9d82:	b085      	sub	sp, #20
    9d84:	9001      	str	r0, [sp, #4]
    Std_ReturnType TimeOutStatus;
#if (ADC_DEV_ERROR_DETECT == STD_ON) && ((ADC_VALIDATE_GLOBAL_CALL == STD_ON) || (ADC_VALIDATE_PARAMS == STD_ON))
    Std_ReturnType ValidStatus;
#endif

    CoreId = Adc_GetCoreID();
    9d86:	f002 fb43 	bl	c410 <Adc_GetCoreID>
    9d8a:	4603      	mov	r3, r0
    9d8c:	f88d 300b 	strb.w	r3, [sp, #11]
    CoreIdTemp = CoreId; /* Used to avoid MISRA */
    9d90:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9d94:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_GLOBAL_CALL == STD_ON)
        ValidStatus = Adc_ValidateGloballCall(ADC_INIT_ID, CoreId);
    9d98:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9d9c:	b2db      	uxtb	r3, r3
    9d9e:	4619      	mov	r1, r3
    9da0:	2000      	movs	r0, #0
    9da2:	f7fe fe5e 	bl	8a62 <Adc_ValidateGloballCall>
    9da6:	4603      	mov	r3, r0
    9da8:	f88d 300f 	strb.w	r3, [sp, #15]
        if ((Std_ReturnType)E_OK == ValidStatus)
    9dac:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9db0:	2b00      	cmp	r3, #0
    9db2:	d14c      	bne.n	9e4e <Adc_Init+0xce>
        {
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_GLOBAL_CALL == STD_ON) */

#if (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_PARAMS == STD_ON)
            ValidStatus = Adc_ValidatePtrInit(ConfigPtr);
    9db4:	9801      	ldr	r0, [sp, #4]
    9db6:	f7fe fe8d 	bl	8ad4 <Adc_ValidatePtrInit>
    9dba:	4603      	mov	r3, r0
    9dbc:	f88d 300f 	strb.w	r3, [sp, #15]
            if ((Std_ReturnType)E_OK == ValidStatus)
    9dc0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9dc4:	2b00      	cmp	r3, #0
    9dc6:	d142      	bne.n	9e4e <Adc_Init+0xce>
            {
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_PARAMS == STD_ON) */
#if (ADC_PRECOMPILE_SUPPORT == STD_ON)
                ValidCoreId = Adc_CheckCurrentCoreId(Adc_ConfigVariantPredefined[CoreId], CoreIdTemp);
#else
                ValidCoreId = Adc_CheckCurrentCoreId(ConfigPtr, CoreId);
    9dc8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9dcc:	b2db      	uxtb	r3, r3
    9dce:	4619      	mov	r1, r3
    9dd0:	9801      	ldr	r0, [sp, #4]
    9dd2:	f7ff fb9b 	bl	950c <Adc_CheckCurrentCoreId>
    9dd6:	4603      	mov	r3, r0
    9dd8:	f88d 300d 	strb.w	r3, [sp, #13]
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
                if ((Std_ReturnType)E_OK == ValidCoreId)
    9ddc:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9de0:	2b00      	cmp	r3, #0
    9de2:	d12d      	bne.n	9e40 <Adc_Init+0xc0>
                    /* ADC342 */
                    const Adc_ConfigType * predefined = Adc_ConfigVariantPredefined[CoreId];
                    Adc_apxCfgPtr[CoreId] = predefined;
#else
                    /* SWS_Adc_00054 */
                    Adc_apxCfgPtr[CoreId] = ConfigPtr;
    9de4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9de8:	b2db      	uxtb	r3, r3
    9dea:	4619      	mov	r1, r3
    9dec:	4a20      	ldr	r2, [pc, #128]	; (9e70 <Adc_Init+0xf0>)
    9dee:	9b01      	ldr	r3, [sp, #4]
    9df0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
#endif /* (ADC_PRECOMPILE_SUPPORT == STD_ON) */
                    /* Initialize the unit status for all units */
                    Adc_InitUnitStatus(CoreId);
    9df4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9df8:	b2db      	uxtb	r3, r3
    9dfa:	4618      	mov	r0, r3
    9dfc:	f7ff fb36 	bl	946c <Adc_InitUnitStatus>
                    /* Initialize the group status for all groups */
                    Adc_InitGroupsStatus(CoreId);
    9e00:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9e04:	b2db      	uxtb	r3, r3
    9e06:	4618      	mov	r0, r3
    9e08:	f7ff fac6 	bl	9398 <Adc_InitGroupsStatus>
                    /* Call the low level function to initialize driver */
                    TimeOutStatus = Adc_Ipw_Init(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr, CoreIdTemp);
    9e0c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9e10:	b2db      	uxtb	r3, r3
    9e12:	461a      	mov	r2, r3
    9e14:	4b16      	ldr	r3, [pc, #88]	; (9e70 <Adc_Init+0xf0>)
    9e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9e1a:	681b      	ldr	r3, [r3, #0]
    9e1c:	f89d 200e 	ldrb.w	r2, [sp, #14]
    9e20:	4611      	mov	r1, r2
    9e22:	4618      	mov	r0, r3
    9e24:	f002 f848 	bl	beb8 <Adc_Ipw_Init>
    9e28:	4603      	mov	r3, r0
    9e2a:	f88d 300c 	strb.w	r3, [sp, #12]

                    if ((Std_ReturnType)E_NOT_OK == TimeOutStatus)
    9e2e:	f89d 300c 	ldrb.w	r3, [sp, #12]
    9e32:	2b01      	cmp	r3, #1
    9e34:	d10b      	bne.n	9e4e <Adc_Init+0xce>
                    {
                        /* Timeout is expired.*/
                        Adc_ReportDetRuntimeError((uint8)ADC_INIT_ID, (uint8)ADC_E_TIMEOUT);
    9e36:	212b      	movs	r1, #43	; 0x2b
    9e38:	2000      	movs	r0, #0
    9e3a:	f7fe fde2 	bl	8a02 <Adc_ReportDetRuntimeError>
    9e3e:	e006      	b.n	9e4e <Adc_Init+0xce>
#endif /* ((ADC_ENABLE_TEMPSENSE_API == STD_ON) && (ADC_POWER_ON_TEMPSENSE == STD_ON)) */
                }
#if (ADC_DEV_ERROR_DETECT == STD_ON)
                else
                {
                    ValidStatus = (Std_ReturnType)E_NOT_OK;
    9e40:	2301      	movs	r3, #1
    9e42:	f88d 300f 	strb.w	r3, [sp, #15]
                    /* CPR_RTD_00420.adc */
                    Adc_ReportDetError((uint8)ADC_INIT_ID, (uint8)ADC_E_PARAM_CONFIG);
    9e46:	210e      	movs	r1, #14
    9e48:	2000      	movs	r0, #0
    9e4a:	f7fe fdc5 	bl	89d8 <Adc_ReportDetError>
            }
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

#if (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_GLOBAL_CALL == STD_ON)
        }
        if ((Std_ReturnType)E_OK == ValidStatus)
    9e4e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9e52:	2b00      	cmp	r3, #0
    9e54:	d108      	bne.n	9e68 <Adc_Init+0xe8>
        {
            Adc_EndValidateGloballCall(ValidStatus, ADC_INIT_ID, CoreId);
    9e56:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9e5a:	b2da      	uxtb	r2, r3
    9e5c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9e60:	2100      	movs	r1, #0
    9e62:	4618      	mov	r0, r3
    9e64:	f7fe ff88 	bl	8d78 <Adc_EndValidateGloballCall>
        }
#endif /* (ADC_DEV_ERROR_DETECT == STD_ON) && (ADC_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    9e68:	bf00      	nop
    9e6a:	b005      	add	sp, #20
    9e6c:	f85d fb04 	ldr.w	pc, [sp], #4
    9e70:	1fff8d40 	.word	0x1fff8d40

00009e74 <Adc_SetupResultBuffer>:

/* SWS_Adc_00419 */
/** @implements      Adc_SetupResultBuffer_Activity */
Std_ReturnType Adc_SetupResultBuffer(Adc_GroupType Group,
                                     Adc_ValueGroupType * const DataBufferPtr)
{
    9e74:	b500      	push	{lr}
    9e76:	b085      	sub	sp, #20
    9e78:	4603      	mov	r3, r0
    9e7a:	9100      	str	r1, [sp, #0]
    9e7c:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType TempReturn = (Std_ReturnType)E_NOT_OK;
    9e80:	2301      	movs	r3, #1
    9e82:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_GroupType GroupIndex;
    const Adc_GroupConfigurationType * GroupPtr = NULL_PTR;
#endif /* ADC_DMA_SUPPORTED */
#if ((ADC_VALIDATE_CALL_AND_GROUP == STD_ON) || (defined(ADC_DMA_SUPPORTED)))
    volatile uint8 CoreId;
    CoreId = Adc_GetCoreID();
    9e86:	f002 fac3 	bl	c410 <Adc_GetCoreID>
    9e8a:	4603      	mov	r3, r0
    9e8c:	f88d 300e 	strb.w	r3, [sp, #14]
#endif /* ((ADC_VALIDATE_CALL_AND_GROUP == STD_ON) || (defined(ADC_DMA_SUPPORTED))) */
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_SETUPRESULTBUFFER_ID, Group, CoreId))
    9e90:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9e94:	b2da      	uxtb	r2, r3
    9e96:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9e9a:	4619      	mov	r1, r3
    9e9c:	200c      	movs	r0, #12
    9e9e:	f7ff f9a7 	bl	91f0 <Adc_ValidateCallAndGroup>
    9ea2:	4603      	mov	r3, r0
    9ea4:	2b00      	cmp	r3, #0
    9ea6:	d11c      	bne.n	9ee2 <Adc_SetupResultBuffer+0x6e>
           to avoid false detection of CWE AUDIT.SPECULATIVE_EXECUTION_DATA_LEAK */
        GroupPtr = &Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex];
#endif /* ADC_DMA_SUPPORTED */

#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_SETUPRESULTBUFFER_ID, DataBufferPtr))
    9ea8:	9900      	ldr	r1, [sp, #0]
    9eaa:	200c      	movs	r0, #12
    9eac:	f7fe fe28 	bl	8b00 <Adc_ValidatePtr>
    9eb0:	4603      	mov	r3, r0
    9eb2:	2b00      	cmp	r3, #0
    9eb4:	d115      	bne.n	9ee2 <Adc_SetupResultBuffer+0x6e>
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
            if ((Std_ReturnType)E_OK == Adc_ValidateSetupBufferNotBusy(Group))
    9eb6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    9eba:	4618      	mov	r0, r3
    9ebc:	f7ff f88a 	bl	8fd4 <Adc_ValidateSetupBufferNotBusy>
    9ec0:	4603      	mov	r3, r0
    9ec2:	2b00      	cmp	r3, #0
    9ec4:	d10d      	bne.n	9ee2 <Adc_SetupResultBuffer+0x6e>
            {
                /* SWS_Adc_00420 */
                Adc_axGroupStatus[Group].ResultsBufferPtr = DataBufferPtr;
    9ec6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9eca:	4909      	ldr	r1, [pc, #36]	; (9ef0 <Adc_SetupResultBuffer+0x7c>)
    9ecc:	4613      	mov	r3, r2
    9ece:	009b      	lsls	r3, r3, #2
    9ed0:	4413      	add	r3, r2
    9ed2:	009b      	lsls	r3, r3, #2
    9ed4:	440b      	add	r3, r1
    9ed6:	330c      	adds	r3, #12
    9ed8:	9a00      	ldr	r2, [sp, #0]
    9eda:	601a      	str	r2, [r3, #0]
                    /* Need to reset last buffer to invalid value before starting conversion. Because since External Dma Channel is used,
                    last buffer will be used to check by Adc_ReadGroup to make sure the results of all channel was available. */
                    DataBufferPtr[(GroupPtr->AssignedChannelCount - (Adc_ChannelIndexType)1U)] = ADC_IPW_INVALID_DATA_RESULT_DMA;
                }
#endif /* ADC_DMA_SUPPORTED */
                TempReturn = (Std_ReturnType)E_OK;
    9edc:	2300      	movs	r3, #0
    9ede:	f88d 300f 	strb.w	r3, [sp, #15]

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return TempReturn;
    9ee2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    9ee6:	4618      	mov	r0, r3
    9ee8:	b005      	add	sp, #20
    9eea:	f85d fb04 	ldr.w	pc, [sp], #4
    9eee:	bf00      	nop
    9ef0:	1fff8d48 	.word	0x1fff8d48

00009ef4 <Adc_DeInit>:

#if (ADC_DEINIT_API == STD_ON)
/* SWS_Adc_00366, SWS_Adc_00111, SWS_Adc_00110 */
/** @implements      Adc_DeInit_Activity */
void Adc_DeInit(void)
{
    9ef4:	b500      	push	{lr}
    9ef6:	b083      	sub	sp, #12
    volatile uint8 CoreId;
#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
    Adc_HwUnitType LogicalHwUnitId = 0U;
    9ef8:	2300      	movs	r3, #0
    9efa:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 CoreIdTemp;
    Std_ReturnType TempReturn;

    Std_ReturnType ValidStatus;

    CoreId = Adc_GetCoreID();
    9efe:	f002 fa87 	bl	c410 <Adc_GetCoreID>
    9f02:	4603      	mov	r3, r0
    9f04:	f88d 3002 	strb.w	r3, [sp, #2]
    CoreIdTemp = CoreId; /* Used to avoid MISRA */
    9f08:	f89d 3002 	ldrb.w	r3, [sp, #2]
    9f0c:	f88d 3005 	strb.w	r3, [sp, #5]
#if (ADC_VALIDATE_GLOBAL_CALL == STD_ON)
    ValidStatus = Adc_ValidateGloballCall(ADC_DEINIT_ID, CoreId);
    9f10:	f89d 3002 	ldrb.w	r3, [sp, #2]
    9f14:	b2db      	uxtb	r3, r3
    9f16:	4619      	mov	r1, r3
    9f18:	2001      	movs	r0, #1
    9f1a:	f7fe fda2 	bl	8a62 <Adc_ValidateGloballCall>
    9f1e:	4603      	mov	r3, r0
    9f20:	f88d 3006 	strb.w	r3, [sp, #6]
    if ((Std_ReturnType)E_OK == ValidStatus)
    9f24:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9f28:	2b00      	cmp	r3, #0
    9f2a:	d160      	bne.n	9fee <Adc_DeInit+0xfa>
    {
#endif /* ADC_VALIDATE_GLOBAL_CALL == STD_ON */
        ValidCoreId = Adc_CheckCurrentCoreId(Adc_apxCfgPtr[CoreId], CoreIdTemp);
    9f2c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    9f30:	b2db      	uxtb	r3, r3
    9f32:	461a      	mov	r2, r3
    9f34:	4b34      	ldr	r3, [pc, #208]	; (a008 <Adc_DeInit+0x114>)
    9f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9f3a:	f89d 2005 	ldrb.w	r2, [sp, #5]
    9f3e:	4611      	mov	r1, r2
    9f40:	4618      	mov	r0, r3
    9f42:	f7ff fae3 	bl	950c <Adc_CheckCurrentCoreId>
    9f46:	4603      	mov	r3, r0
    9f48:	f88d 3004 	strb.w	r3, [sp, #4]
        if ((Std_ReturnType)E_OK == ValidCoreId)
    9f4c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9f50:	2b00      	cmp	r3, #0
    9f52:	d148      	bne.n	9fe6 <Adc_DeInit+0xf2>
        {
            ValidStatus = Adc_ValidateDeInitNotBusy(CoreId);
    9f54:	f89d 3002 	ldrb.w	r3, [sp, #2]
    9f58:	b2db      	uxtb	r3, r3
    9f5a:	4618      	mov	r0, r3
    9f5c:	f7fe ffec 	bl	8f38 <Adc_ValidateDeInitNotBusy>
    9f60:	4603      	mov	r3, r0
    9f62:	f88d 3006 	strb.w	r3, [sp, #6]
            if ((Std_ReturnType)E_OK == ValidStatus)
    9f66:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9f6a:	2b00      	cmp	r3, #0
    9f6c:	d13f      	bne.n	9fee <Adc_DeInit+0xfa>
            {

                TempReturn = Adc_Ipw_DeInit(CoreId);
    9f6e:	f89d 3002 	ldrb.w	r3, [sp, #2]
    9f72:	b2db      	uxtb	r3, r3
    9f74:	4618      	mov	r0, r3
    9f76:	f001 ffe4 	bl	bf42 <Adc_Ipw_DeInit>
    9f7a:	4603      	mov	r3, r0
    9f7c:	f88d 3003 	strb.w	r3, [sp, #3]
                if ((Std_ReturnType)E_NOT_OK == TempReturn)
    9f80:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9f84:	2b01      	cmp	r3, #1
    9f86:	d103      	bne.n	9f90 <Adc_DeInit+0x9c>
                {
                    Adc_ReportDetRuntimeError((uint8)ADC_DEINIT_ID, (uint8)ADC_E_TIMEOUT);
    9f88:	212b      	movs	r1, #43	; 0x2b
    9f8a:	2001      	movs	r0, #1
    9f8c:	f7fe fd39 	bl	8a02 <Adc_ReportDetRuntimeError>
                }
#if (ADC_IPW_PDB_AVAILABLE == STD_ON)
                for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    9f90:	2300      	movs	r3, #0
    9f92:	f88d 3007 	strb.w	r3, [sp, #7]
    9f96:	e019      	b.n	9fcc <Adc_DeInit+0xd8>
                {
                    if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    9f98:	f89d 3002 	ldrb.w	r3, [sp, #2]
    9f9c:	b2db      	uxtb	r3, r3
    9f9e:	461a      	mov	r2, r3
    9fa0:	4b19      	ldr	r3, [pc, #100]	; (a008 <Adc_DeInit+0x114>)
    9fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9fa6:	681a      	ldr	r2, [r3, #0]
    9fa8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9fac:	4413      	add	r3, r2
    9fae:	7f9b      	ldrb	r3, [r3, #30]
    9fb0:	2b01      	cmp	r3, #1
    9fb2:	d106      	bne.n	9fc2 <Adc_DeInit+0xce>
                    {
                        Adc_axUnitStatus[LogicalHwUnitId].Sc1Used = 0U;
    9fb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9fb8:	4a14      	ldr	r2, [pc, #80]	; (a00c <Adc_DeInit+0x118>)
    9fba:	00db      	lsls	r3, r3, #3
    9fbc:	4413      	add	r3, r2
    9fbe:	2200      	movs	r2, #0
    9fc0:	719a      	strb	r2, [r3, #6]
                for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS; LogicalHwUnitId++)
    9fc2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9fc6:	3301      	adds	r3, #1
    9fc8:	f88d 3007 	strb.w	r3, [sp, #7]
    9fcc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9fd0:	2b01      	cmp	r3, #1
    9fd2:	d9e1      	bls.n	9f98 <Adc_DeInit+0xa4>
                    }
                }
#endif /* (ADC_IPW_PDB_AVAILABLE == STD_ON) */
                /* Undefined the global pointer to the configuration */
                Adc_apxCfgPtr[CoreId] = NULL_PTR;
    9fd4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    9fd8:	b2db      	uxtb	r3, r3
    9fda:	4619      	mov	r1, r3
    9fdc:	4b0a      	ldr	r3, [pc, #40]	; (a008 <Adc_DeInit+0x114>)
    9fde:	2200      	movs	r2, #0
    9fe0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    9fe4:	e003      	b.n	9fee <Adc_DeInit+0xfa>
        }
#if (ADC_VALIDATE_GLOBAL_CALL == STD_ON)
        else
        {
            /* CPR_RTD_00420.adc */
            Adc_ReportDetError(ADC_DEINIT_ID, (uint8)ADC_E_PARAM_CONFIG);
    9fe6:	210e      	movs	r1, #14
    9fe8:	2001      	movs	r0, #1
    9fea:	f7fe fcf5 	bl	89d8 <Adc_ReportDetError>
        }
    }
    Adc_EndValidateGloballCall(ValidStatus, ADC_DEINIT_ID, CoreId);
    9fee:	f89d 3002 	ldrb.w	r3, [sp, #2]
    9ff2:	b2da      	uxtb	r2, r3
    9ff4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9ff8:	2101      	movs	r1, #1
    9ffa:	4618      	mov	r0, r3
    9ffc:	f7fe febc 	bl	8d78 <Adc_EndValidateGloballCall>
#endif /* ADC_VALIDATE_GLOBAL_CALL == STD_ON */
}
    a000:	bf00      	nop
    a002:	b003      	add	sp, #12
    a004:	f85d fb04 	ldr.w	pc, [sp], #4
    a008:	1fff8d40 	.word	0x1fff8d40
    a00c:	1fff8d70 	.word	0x1fff8d70

0000a010 <Adc_StartGroupConversion>:

#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
/* SWS_Adc_00367, SWS_Adc_00356, SWS_Adc_00156, SWS_Adc_00061, SWS_Adc_00413 */
/** @implements      Adc_StartGroupConversion_Activity */
void Adc_StartGroupConversion(Adc_GroupType Group)
{
    a010:	b500      	push	{lr}
    a012:	b085      	sub	sp, #20
    a014:	4603      	mov	r3, r0
    a016:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId;
    Adc_GroupType GroupIndex = 0U;
    a01a:	2300      	movs	r3, #0
    a01c:	f8ad 300e 	strh.w	r3, [sp, #14]
    /* ADC Hardware unit on which the requested group will run */
    Adc_HwUnitType LogicalHwUnitId = 0U;
    a020:	2300      	movs	r3, #0
    a022:	f88d 300d 	strb.w	r3, [sp, #13]

    CoreId = Adc_GetCoreID();
    a026:	f002 f9f3 	bl	c410 <Adc_GetCoreID>
    a02a:	4603      	mov	r3, r0
    a02c:	f88d 300c 	strb.w	r3, [sp, #12]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_STARTGROUPCONVERSION_ID, Group, CoreId))
    a030:	f89d 300c 	ldrb.w	r3, [sp, #12]
    a034:	b2da      	uxtb	r2, r3
    a036:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a03a:	4619      	mov	r1, r3
    a03c:	2002      	movs	r0, #2
    a03e:	f7ff f8d7 	bl	91f0 <Adc_ValidateCallAndGroup>
    a042:	4603      	mov	r3, r0
    a044:	2b00      	cmp	r3, #0
    a046:	d141      	bne.n	a0cc <Adc_StartGroupConversion+0xbc>
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
        /* Get the mapping index of group in the current partition */
        GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a048:	f89d 300c 	ldrb.w	r3, [sp, #12]
    a04c:	b2db      	uxtb	r3, r3
    a04e:	461a      	mov	r2, r3
    a050:	4b20      	ldr	r3, [pc, #128]	; (a0d4 <Adc_StartGroupConversion+0xc4>)
    a052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a056:	68da      	ldr	r2, [r3, #12]
    a058:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a05c:	005b      	lsls	r3, r3, #1
    a05e:	4413      	add	r3, r2
    a060:	881b      	ldrh	r3, [r3, #0]
    a062:	f8ad 300e 	strh.w	r3, [sp, #14]

        if ((Std_ReturnType)E_OK == Adc_ValidateStateStartGroupConvNotBusy(Group, CoreId))
    a066:	f89d 300c 	ldrb.w	r3, [sp, #12]
    a06a:	b2da      	uxtb	r2, r3
    a06c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a070:	4611      	mov	r1, r2
    a072:	4618      	mov	r0, r3
    a074:	f7fe ffd2 	bl	901c <Adc_ValidateStateStartGroupConvNotBusy>
    a078:	4603      	mov	r3, r0
    a07a:	2b00      	cmp	r3, #0
    a07c:	d126      	bne.n	a0cc <Adc_StartGroupConversion+0xbc>
        {
#if (ADC_VALIDATE_PARAMS == STD_ON)
            if ((Std_ReturnType)E_OK == Adc_ValidateExtraParams(ADC_STARTGROUPCONVERSION_ID,
    a07e:	f89d 300c 	ldrb.w	r3, [sp, #12]
    a082:	b2db      	uxtb	r3, r3
    a084:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a088:	2107      	movs	r1, #7
    a08a:	2002      	movs	r0, #2
    a08c:	f7fe fe1c 	bl	8cc8 <Adc_ValidateExtraParams>
    a090:	4603      	mov	r3, r0
    a092:	2b00      	cmp	r3, #0
    a094:	d11a      	bne.n	a0cc <Adc_StartGroupConversion+0xbc>
               )
            {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

                /* Get the unit to which the group belongs to */
                LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    a096:	f89d 300c 	ldrb.w	r3, [sp, #12]
    a09a:	b2db      	uxtb	r3, r3
    a09c:	461a      	mov	r2, r3
    a09e:	4b0d      	ldr	r3, [pc, #52]	; (a0d4 <Adc_StartGroupConversion+0xc4>)
    a0a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a0a4:	685a      	ldr	r2, [r3, #4]
    a0a6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    a0aa:	2134      	movs	r1, #52	; 0x34
    a0ac:	fb01 f303 	mul.w	r3, r1, r3
    a0b0:	4413      	add	r3, r2
    a0b2:	789b      	ldrb	r3, [r3, #2]
    a0b4:	f88d 300d 	strb.w	r3, [sp, #13]
                /* Update queue */
                Adc_UpdateStatusStartConversion(Group, LogicalHwUnitId, CoreId);
    a0b8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    a0bc:	b2da      	uxtb	r2, r3
    a0be:	f89d 100d 	ldrb.w	r1, [sp, #13]
    a0c2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a0c6:	4618      	mov	r0, r3
    a0c8:	f7ff fa53 	bl	9572 <Adc_UpdateStatusStartConversion>
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
        }
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    a0cc:	bf00      	nop
    a0ce:	b005      	add	sp, #20
    a0d0:	f85d fb04 	ldr.w	pc, [sp], #4
    a0d4:	1fff8d40 	.word	0x1fff8d40

0000a0d8 <Adc_StopGroupConversion>:

/* SWS_Adc_00368, SWS_Adc_00356, SWS_Adc_00413 */
/** @implements      Adc_StopGroupConversion_Activity */
void Adc_StopGroupConversion(Adc_GroupType Group)
{
    a0d8:	b500      	push	{lr}
    a0da:	b085      	sub	sp, #20
    a0dc:	4603      	mov	r3, r0
    a0de:	f8ad 3006 	strh.w	r3, [sp, #6]
    /* ADC Logical Unit Id on which the requested group will run */
    Adc_HwUnitType LogicalHwUnitId = 0U;
    a0e2:	2300      	movs	r3, #0
    a0e4:	f88d 300f 	strb.w	r3, [sp, #15]
    volatile uint8 CoreId;
    Adc_GroupType GroupIndex = 0U;
    a0e8:	2300      	movs	r3, #0
    a0ea:	f8ad 300c 	strh.w	r3, [sp, #12]

    CoreId = Adc_GetCoreID();
    a0ee:	f002 f98f 	bl	c410 <Adc_GetCoreID>
    a0f2:	4603      	mov	r3, r0
    a0f4:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_STOPGROUPCONVERSION_ID, Group, CoreId))
    a0f8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a0fc:	b2da      	uxtb	r2, r3
    a0fe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a102:	4619      	mov	r1, r3
    a104:	2003      	movs	r0, #3
    a106:	f7ff f873 	bl	91f0 <Adc_ValidateCallAndGroup>
    a10a:	4603      	mov	r3, r0
    a10c:	2b00      	cmp	r3, #0
    a10e:	d141      	bne.n	a194 <Adc_StopGroupConversion+0xbc>
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

        if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_STOPGROUPCONVERSION_ID, Group, CoreId))
    a110:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a114:	b2da      	uxtb	r2, r3
    a116:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a11a:	4619      	mov	r1, r3
    a11c:	2003      	movs	r0, #3
    a11e:	f7fe fff5 	bl	910c <Adc_ValidateStateNotIdle>
    a122:	4603      	mov	r3, r0
    a124:	2b00      	cmp	r3, #0
    a126:	d135      	bne.n	a194 <Adc_StopGroupConversion+0xbc>
        {
#if (ADC_VALIDATE_PARAMS == STD_ON)
            if ((Std_ReturnType)E_OK == Adc_ValidateExtraParams(ADC_STOPGROUPCONVERSION_ID,
    a128:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a12c:	b2db      	uxtb	r3, r3
    a12e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a132:	2102      	movs	r1, #2
    a134:	2003      	movs	r0, #3
    a136:	f7fe fdc7 	bl	8cc8 <Adc_ValidateExtraParams>
    a13a:	4603      	mov	r3, r0
    a13c:	2b00      	cmp	r3, #0
    a13e:	d129      	bne.n	a194 <Adc_StopGroupConversion+0xbc>
                                                                CoreId
                                                               )
               )
            {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a140:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a144:	b2db      	uxtb	r3, r3
    a146:	461a      	mov	r2, r3
    a148:	4b14      	ldr	r3, [pc, #80]	; (a19c <Adc_StopGroupConversion+0xc4>)
    a14a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a14e:	68da      	ldr	r2, [r3, #12]
    a150:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a154:	005b      	lsls	r3, r3, #1
    a156:	4413      	add	r3, r2
    a158:	881b      	ldrh	r3, [r3, #0]
    a15a:	f8ad 300c 	strh.w	r3, [sp, #12]
                /* Get the unit to which the group belongs to */
                LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->GroupsPtr[(GroupIndex)].AdcLogicalUnitId;
    a15e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a162:	b2db      	uxtb	r3, r3
    a164:	461a      	mov	r2, r3
    a166:	4b0d      	ldr	r3, [pc, #52]	; (a19c <Adc_StopGroupConversion+0xc4>)
    a168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a16c:	685a      	ldr	r2, [r3, #4]
    a16e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    a172:	2134      	movs	r1, #52	; 0x34
    a174:	fb01 f303 	mul.w	r3, r1, r3
    a178:	4413      	add	r3, r2
    a17a:	789b      	ldrb	r3, [r3, #2]
    a17c:	f88d 300f 	strb.w	r3, [sp, #15]
                Adc_UpdateStatusStopConversion(Group, LogicalHwUnitId, CoreId);
    a180:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a184:	b2da      	uxtb	r2, r3
    a186:	f89d 100f 	ldrb.w	r1, [sp, #15]
    a18a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a18e:	4618      	mov	r0, r3
    a190:	f7ff fae8 	bl	9764 <Adc_UpdateStatusStopConversion>
        }

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
}
    a194:	bf00      	nop
    a196:	b005      	add	sp, #20
    a198:	f85d fb04 	ldr.w	pc, [sp], #4
    a19c:	1fff8d40 	.word	0x1fff8d40

0000a1a0 <Adc_ReadGroup>:
#if (ADC_READ_GROUP_API == STD_ON)
/* SWS_Adc_00369, SWS_Adc_00383, SWS_Adc_00503 */
/** @implements      Adc_ReadGroup_Activity */
Std_ReturnType Adc_ReadGroup(Adc_GroupType Group,
                             Adc_ValueGroupType * DataBufferPtr)
{
    a1a0:	b500      	push	{lr}
    a1a2:	b085      	sub	sp, #20
    a1a4:	4603      	mov	r3, r0
    a1a6:	9100      	str	r1, [sp, #0]
    a1a8:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId;
    /* Return Value */
    Std_ReturnType GroupRet = (Std_ReturnType)E_NOT_OK;
    a1ac:	2301      	movs	r3, #1
    a1ae:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean Flag = TRUE;
    a1b2:	2301      	movs	r3, #1
    a1b4:	f88d 300d 	strb.w	r3, [sp, #13]

    CoreId = Adc_GetCoreID();
    a1b8:	f002 f92a 	bl	c410 <Adc_GetCoreID>
    a1bc:	4603      	mov	r3, r0
    a1be:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_VALUEREADGROUP_ID, Group, CoreId))
    a1c2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a1c6:	b2da      	uxtb	r2, r3
    a1c8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a1cc:	4619      	mov	r1, r3
    a1ce:	2004      	movs	r0, #4
    a1d0:	f7ff f80e 	bl	91f0 <Adc_ValidateCallAndGroup>
    a1d4:	4603      	mov	r3, r0
    a1d6:	2b00      	cmp	r3, #0
    a1d8:	d134      	bne.n	a244 <Adc_ReadGroup+0xa4>
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_VALUEREADGROUP_ID, DataBufferPtr))
    a1da:	9900      	ldr	r1, [sp, #0]
    a1dc:	2004      	movs	r0, #4
    a1de:	f7fe fc8f 	bl	8b00 <Adc_ValidatePtr>
    a1e2:	4603      	mov	r3, r0
    a1e4:	2b00      	cmp	r3, #0
    a1e6:	d12d      	bne.n	a244 <Adc_ReadGroup+0xa4>
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

            if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_VALUEREADGROUP_ID, Group, CoreId))
    a1e8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a1ec:	b2da      	uxtb	r2, r3
    a1ee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a1f2:	4619      	mov	r1, r3
    a1f4:	2004      	movs	r0, #4
    a1f6:	f7fe ff89 	bl	910c <Adc_ValidateStateNotIdle>
    a1fa:	4603      	mov	r3, r0
    a1fc:	2b00      	cmp	r3, #0
    a1fe:	d121      	bne.n	a244 <Adc_ReadGroup+0xa4>
            {
                /* SWS_Adc_00447 */
                GroupRet = Adc_Ipw_ReadGroup(Group, DataBufferPtr, &Flag, CoreId);
    a200:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a204:	b2db      	uxtb	r3, r3
    a206:	f10d 020d 	add.w	r2, sp, #13
    a20a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    a20e:	9900      	ldr	r1, [sp, #0]
    a210:	f002 f857 	bl	c2c2 <Adc_Ipw_ReadGroup>
    a214:	4603      	mov	r3, r0
    a216:	f88d 300f 	strb.w	r3, [sp, #15]
                /*if the conversion is finished or if the limit checking was failed for the group without interrupts*/
                if (((Std_ReturnType)E_OK == GroupRet) || (FALSE == Flag))
    a21a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a21e:	2b00      	cmp	r3, #0
    a220:	d006      	beq.n	a230 <Adc_ReadGroup+0x90>
    a222:	f89d 300d 	ldrb.w	r3, [sp, #13]
    a226:	f083 0301 	eor.w	r3, r3, #1
    a22a:	b2db      	uxtb	r3, r3
    a22c:	2b00      	cmp	r3, #0
    a22e:	d009      	beq.n	a244 <Adc_ReadGroup+0xa4>
                {
                    Adc_UpdateStatusReadGroup(Group, Flag, CoreId);
    a230:	f89d 100d 	ldrb.w	r1, [sp, #13]
    a234:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a238:	b2da      	uxtb	r2, r3
    a23a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a23e:	4618      	mov	r0, r3
    a240:	f7ff fb42 	bl	98c8 <Adc_UpdateStatusReadGroup>

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return GroupRet;
    a244:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    a248:	4618      	mov	r0, r3
    a24a:	b005      	add	sp, #20
    a24c:	f85d fb04 	ldr.w	pc, [sp], #4

0000a250 <Adc_GetGroupStatus>:
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */

/* SWS_Adc_00374, SWS_Adc_00140, SWS_Adc_00503, SWS_Adc_00413 */
/** @implements      Adc_GetGroupStatus_Activity */
Adc_StatusType Adc_GetGroupStatus(Adc_GroupType Group)
{
    a250:	b500      	push	{lr}
    a252:	b085      	sub	sp, #20
    a254:	4603      	mov	r3, r0
    a256:	f8ad 3006 	strh.w	r3, [sp, #6]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    volatile uint8 CoreId;
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
    Adc_StatusType TempReturn = ADC_IDLE;
    a25a:	2300      	movs	r3, #0
    a25c:	9303      	str	r3, [sp, #12]

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    CoreId = Adc_GetCoreID();
    a25e:	f002 f8d7 	bl	c410 <Adc_GetCoreID>
    a262:	4603      	mov	r3, r0
    a264:	f88d 300b 	strb.w	r3, [sp, #11]
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndGroup(ADC_GETGROUPSTATUS_ID, Group, CoreId))
    a268:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a26c:	b2da      	uxtb	r2, r3
    a26e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a272:	4619      	mov	r1, r3
    a274:	2009      	movs	r0, #9
    a276:	f7fe ffbb 	bl	91f0 <Adc_ValidateCallAndGroup>
    a27a:	4603      	mov	r3, r0
    a27c:	2b00      	cmp	r3, #0
    a27e:	d109      	bne.n	a294 <Adc_GetGroupStatus+0x44>
    {
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */
        /* SWS_Adc_00220 */
        TempReturn = Adc_axGroupStatus[Group].Conversion;
    a280:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a284:	4906      	ldr	r1, [pc, #24]	; (a2a0 <Adc_GetGroupStatus+0x50>)
    a286:	4613      	mov	r3, r2
    a288:	009b      	lsls	r3, r3, #2
    a28a:	4413      	add	r3, r2
    a28c:	009b      	lsls	r3, r3, #2
    a28e:	440b      	add	r3, r1
    a290:	681b      	ldr	r3, [r3, #0]
    a292:	9303      	str	r3, [sp, #12]
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return(TempReturn);
    a294:	9b03      	ldr	r3, [sp, #12]
}
    a296:	4618      	mov	r0, r3
    a298:	b005      	add	sp, #20
    a29a:	f85d fb04 	ldr.w	pc, [sp], #4
    a29e:	bf00      	nop
    a2a0:	1fff8d48 	.word	0x1fff8d48

0000a2a4 <Adc_GetStreamLastPointer>:

/* SWS_Adc_00375, SWS_Adc_00382 */
/** @implements      Adc_GetStreamLastPointer_Activity */
Adc_StreamNumSampleType Adc_GetStreamLastPointer(Adc_GroupType Group,
                                                 Adc_ValueGroupType ** PtrToSamplePtr)
{
    a2a4:	b500      	push	{lr}
    a2a6:	b085      	sub	sp, #20
    a2a8:	4603      	mov	r3, r0
    a2aa:	9100      	str	r1, [sp, #0]
    a2ac:	f8ad 3006 	strh.w	r3, [sp, #6]
    volatile uint8 CoreId = Adc_GetCoreID();
    a2b0:	f002 f8ae 	bl	c410 <Adc_GetCoreID>
    a2b4:	4603      	mov	r3, r0
    a2b6:	f88d 3008 	strb.w	r3, [sp, #8]
    Adc_GroupType GroupIndex = 0U;
    a2ba:	2300      	movs	r3, #0
    a2bc:	f8ad 300a 	strh.w	r3, [sp, #10]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    const Adc_GroupConfigurationType * GroupPtr;
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
    /* Number of samples to return */
    Adc_StreamNumSampleType NumberOfResults = 0U;
    a2c0:	2300      	movs	r3, #0
    a2c2:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_StreamNumSampleType ResultIndex = 0U;
    a2c6:	2300      	movs	r3, #0
    a2c8:	f8ad 300c 	strh.w	r3, [sp, #12]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    Adc_ChannelIndexType ChannelCount;
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    Std_ReturnType ValidStatus = Adc_ValidateCallAndGroup(ADC_GETSTREAMLASTPOINTER_ID, Group, CoreId);
    a2cc:	f89d 3008 	ldrb.w	r3, [sp, #8]
    a2d0:	b2da      	uxtb	r2, r3
    a2d2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a2d6:	4619      	mov	r1, r3
    a2d8:	200b      	movs	r0, #11
    a2da:	f7fe ff89 	bl	91f0 <Adc_ValidateCallAndGroup>
    a2de:	4603      	mov	r3, r0
    a2e0:	f88d 3009 	strb.w	r3, [sp, #9]
    if (ValidStatus == (Std_ReturnType)E_OK)
    a2e4:	f89d 3009 	ldrb.w	r3, [sp, #9]
    a2e8:	2b00      	cmp	r3, #0
    a2ea:	f040 809f 	bne.w	a42c <Adc_GetStreamLastPointer+0x188>
        /* Get channel count from configuration */
        ChannelCount = GroupPtr->AssignedChannelCount;
#endif
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

        if ((Std_ReturnType)E_OK == Adc_ValidateStateNotIdle(ADC_GETSTREAMLASTPOINTER_ID, Group, CoreId))
    a2ee:	f89d 3008 	ldrb.w	r3, [sp, #8]
    a2f2:	b2da      	uxtb	r2, r3
    a2f4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a2f8:	4619      	mov	r1, r3
    a2fa:	200b      	movs	r0, #11
    a2fc:	f7fe ff06 	bl	910c <Adc_ValidateStateNotIdle>
    a300:	4603      	mov	r3, r0
    a302:	2b00      	cmp	r3, #0
    a304:	f040 808e 	bne.w	a424 <Adc_GetStreamLastPointer+0x180>
        {
            *PtrToSamplePtr = NULL_PTR;
    a308:	9b00      	ldr	r3, [sp, #0]
    a30a:	2200      	movs	r2, #0
    a30c:	601a      	str	r2, [r3, #0]

            if ((ADC_IDLE != Adc_axGroupStatus[Group].Conversion) && \
    a30e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a312:	494b      	ldr	r1, [pc, #300]	; (a440 <Adc_GetStreamLastPointer+0x19c>)
    a314:	4613      	mov	r3, r2
    a316:	009b      	lsls	r3, r3, #2
    a318:	4413      	add	r3, r2
    a31a:	009b      	lsls	r3, r3, #2
    a31c:	440b      	add	r3, r1
    a31e:	681b      	ldr	r3, [r3, #0]
    a320:	2b00      	cmp	r3, #0
    a322:	f000 8086 	beq.w	a432 <Adc_GetStreamLastPointer+0x18e>
                (ADC_BUSY != Adc_axGroupStatus[Group].Conversion)) /* SWS_Adc_00216 */
    a326:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a32a:	4945      	ldr	r1, [pc, #276]	; (a440 <Adc_GetStreamLastPointer+0x19c>)
    a32c:	4613      	mov	r3, r2
    a32e:	009b      	lsls	r3, r3, #2
    a330:	4413      	add	r3, r2
    a332:	009b      	lsls	r3, r3, #2
    a334:	440b      	add	r3, r1
    a336:	681b      	ldr	r3, [r3, #0]
            if ((ADC_IDLE != Adc_axGroupStatus[Group].Conversion) && \
    a338:	2b01      	cmp	r3, #1
    a33a:	d07a      	beq.n	a432 <Adc_GetStreamLastPointer+0x18e>
            {
                GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    a33c:	f89d 3008 	ldrb.w	r3, [sp, #8]
    a340:	b2db      	uxtb	r3, r3
    a342:	461a      	mov	r2, r3
    a344:	4b3f      	ldr	r3, [pc, #252]	; (a444 <Adc_GetStreamLastPointer+0x1a0>)
    a346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a34a:	68da      	ldr	r2, [r3, #12]
    a34c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a350:	005b      	lsls	r3, r3, #1
    a352:	4413      	add	r3, r2
    a354:	881b      	ldrh	r3, [r3, #0]
    a356:	f8ad 300a 	strh.w	r3, [sp, #10]
                if ((Adc_StreamNumSampleType)0U == Adc_axGroupStatus[Group].ResultIndex)
    a35a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a35e:	4938      	ldr	r1, [pc, #224]	; (a440 <Adc_GetStreamLastPointer+0x19c>)
    a360:	4613      	mov	r3, r2
    a362:	009b      	lsls	r3, r3, #2
    a364:	4413      	add	r3, r2
    a366:	009b      	lsls	r3, r3, #2
    a368:	440b      	add	r3, r1
    a36a:	3308      	adds	r3, #8
    a36c:	881b      	ldrh	r3, [r3, #0]
    a36e:	b29b      	uxth	r3, r3
    a370:	2b00      	cmp	r3, #0
    a372:	d123      	bne.n	a3bc <Adc_GetStreamLastPointer+0x118>
                {
                    ResultIndex = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].NumSamples - (Adc_StreamNumSampleType)1U;
    a374:	f89d 3008 	ldrb.w	r3, [sp, #8]
    a378:	b2db      	uxtb	r3, r3
    a37a:	461a      	mov	r2, r3
    a37c:	4b31      	ldr	r3, [pc, #196]	; (a444 <Adc_GetStreamLastPointer+0x1a0>)
    a37e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a382:	685a      	ldr	r2, [r3, #4]
    a384:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    a388:	2134      	movs	r1, #52	; 0x34
    a38a:	fb01 f303 	mul.w	r3, r1, r3
    a38e:	4413      	add	r3, r2
    a390:	8b9b      	ldrh	r3, [r3, #28]
    a392:	3b01      	subs	r3, #1
    a394:	f8ad 300c 	strh.w	r3, [sp, #12]
                    /* SWS_Adc_00387 */
                    NumberOfResults = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].NumSamples;
    a398:	f89d 3008 	ldrb.w	r3, [sp, #8]
    a39c:	b2db      	uxtb	r3, r3
    a39e:	461a      	mov	r2, r3
    a3a0:	4b28      	ldr	r3, [pc, #160]	; (a444 <Adc_GetStreamLastPointer+0x1a0>)
    a3a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a3a6:	685a      	ldr	r2, [r3, #4]
    a3a8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    a3ac:	2134      	movs	r1, #52	; 0x34
    a3ae:	fb01 f303 	mul.w	r3, r1, r3
    a3b2:	4413      	add	r3, r2
    a3b4:	8b9b      	ldrh	r3, [r3, #28]
    a3b6:	f8ad 300e 	strh.w	r3, [sp, #14]
    a3ba:	e019      	b.n	a3f0 <Adc_GetStreamLastPointer+0x14c>
                }
                else
                {
                    ResultIndex = Adc_axGroupStatus[Group].ResultIndex - (Adc_StreamNumSampleType)1U;
    a3bc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a3c0:	491f      	ldr	r1, [pc, #124]	; (a440 <Adc_GetStreamLastPointer+0x19c>)
    a3c2:	4613      	mov	r3, r2
    a3c4:	009b      	lsls	r3, r3, #2
    a3c6:	4413      	add	r3, r2
    a3c8:	009b      	lsls	r3, r3, #2
    a3ca:	440b      	add	r3, r1
    a3cc:	3308      	adds	r3, #8
    a3ce:	881b      	ldrh	r3, [r3, #0]
    a3d0:	b29b      	uxth	r3, r3
    a3d2:	3b01      	subs	r3, #1
    a3d4:	f8ad 300c 	strh.w	r3, [sp, #12]
                    /* SWS_Adc_00387 */
                    NumberOfResults = Adc_axGroupStatus[Group].ResultIndex;
    a3d8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a3dc:	4918      	ldr	r1, [pc, #96]	; (a440 <Adc_GetStreamLastPointer+0x19c>)
    a3de:	4613      	mov	r3, r2
    a3e0:	009b      	lsls	r3, r3, #2
    a3e2:	4413      	add	r3, r2
    a3e4:	009b      	lsls	r3, r3, #2
    a3e6:	440b      	add	r3, r1
    a3e8:	3308      	adds	r3, #8
    a3ea:	881b      	ldrh	r3, [r3, #0]
    a3ec:	f8ad 300e 	strh.w	r3, [sp, #14]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
                /* SWS_Adc_00214 -- SWS_Adc_00418 -- ADC382 */
                if (FALSE == GroupPtr->StreamResultGroupMultiSets)
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
                {
                    *PtrToSamplePtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex]));
    a3f0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    a3f4:	4912      	ldr	r1, [pc, #72]	; (a440 <Adc_GetStreamLastPointer+0x19c>)
    a3f6:	4613      	mov	r3, r2
    a3f8:	009b      	lsls	r3, r3, #2
    a3fa:	4413      	add	r3, r2
    a3fc:	009b      	lsls	r3, r3, #2
    a3fe:	440b      	add	r3, r1
    a400:	330c      	adds	r3, #12
    a402:	681a      	ldr	r2, [r3, #0]
    a404:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    a408:	005b      	lsls	r3, r3, #1
    a40a:	441a      	add	r2, r3
    a40c:	9b00      	ldr	r3, [sp, #0]
    a40e:	601a      	str	r2, [r3, #0]
                else
                {
                    *PtrToSamplePtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex * ChannelCount]));
                }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
                Adc_UpdateStatusAfterGetStream(Group, CoreId);
    a410:	f89d 3008 	ldrb.w	r3, [sp, #8]
    a414:	b2da      	uxtb	r2, r3
    a416:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a41a:	4611      	mov	r1, r2
    a41c:	4618      	mov	r0, r3
    a41e:	f7ff fc13 	bl	9c48 <Adc_UpdateStatusAfterGetStream>
    a422:	e006      	b.n	a432 <Adc_GetStreamLastPointer+0x18e>
            }
        }
        else
        {
            *PtrToSamplePtr = NULL_PTR;
    a424:	9b00      	ldr	r3, [sp, #0]
    a426:	2200      	movs	r2, #0
    a428:	601a      	str	r2, [r3, #0]
    a42a:	e002      	b.n	a432 <Adc_GetStreamLastPointer+0x18e>
#if (ADC_VALIDATE_CALL_AND_GROUP == STD_ON)
    }
    else
    {
        /* SWS_Adc_00302, SWS_Adc_00218 */
        *PtrToSamplePtr = NULL_PTR;
    a42c:	9b00      	ldr	r3, [sp, #0]
    a42e:	2200      	movs	r2, #0
    a430:	601a      	str	r2, [r3, #0]
    }
#endif /* ADC_VALIDATE_CALL_AND_GROUP == STD_ON */

    return NumberOfResults;
    a432:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    a436:	4618      	mov	r0, r3
    a438:	b005      	add	sp, #20
    a43a:	f85d fb04 	ldr.w	pc, [sp], #4
    a43e:	bf00      	nop
    a440:	1fff8d48 	.word	0x1fff8d48
    a444:	1fff8d40 	.word	0x1fff8d40

0000a448 <Adc_GetVersionInfo>:

#if (ADC_VERSION_INFO_API == STD_ON)
/* SWS_Adc_00376 */
/** @implements      Adc_GetVersionInfo_Activity */
void Adc_GetVersionInfo(Std_VersionInfoType * versioninfo)
{
    a448:	b500      	push	{lr}
    a44a:	b083      	sub	sp, #12
    a44c:	9001      	str	r0, [sp, #4]
#if (ADC_VALIDATE_PARAMS == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_GETVERSIONINFO_ID, versioninfo))
    a44e:	9901      	ldr	r1, [sp, #4]
    a450:	200a      	movs	r0, #10
    a452:	f7fe fb55 	bl	8b00 <Adc_ValidatePtr>
    a456:	4603      	mov	r3, r0
    a458:	2b00      	cmp	r3, #0
    a45a:	d10e      	bne.n	a47a <Adc_GetVersionInfo+0x32>
    {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

        (versioninfo)->vendorID = (uint16)ADC_VENDOR_ID;
    a45c:	9b01      	ldr	r3, [sp, #4]
    a45e:	222b      	movs	r2, #43	; 0x2b
    a460:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID = (uint16)ADC_MODULE_ID;
    a462:	9b01      	ldr	r3, [sp, #4]
    a464:	227b      	movs	r2, #123	; 0x7b
    a466:	805a      	strh	r2, [r3, #2]
        (versioninfo)->sw_major_version = (uint8)ADC_SW_MAJOR_VERSION;
    a468:	9b01      	ldr	r3, [sp, #4]
    a46a:	2202      	movs	r2, #2
    a46c:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)ADC_SW_MINOR_VERSION;
    a46e:	9b01      	ldr	r3, [sp, #4]
    a470:	2200      	movs	r2, #0
    a472:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)ADC_SW_PATCH_VERSION;
    a474:	9b01      	ldr	r3, [sp, #4]
    a476:	2200      	movs	r2, #0
    a478:	719a      	strb	r2, [r3, #6]

#if (ADC_VALIDATE_PARAMS == STD_ON)
    }
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
}
    a47a:	bf00      	nop
    a47c:	b003      	add	sp, #12
    a47e:	f85d fb04 	ldr.w	pc, [sp], #4

0000a482 <Adc_Calibrate>:
#if (ADC_CALIBRATION == STD_ON)
/* CPR_RTD_00014.adc, CPR_RTD_00029.adc */
/** @implements      Adc_Calibrate_Activity */
void Adc_Calibrate(Adc_HwUnitType Unit,
                   Adc_CalibrationStatusType * pStatus)
{
    a482:	b500      	push	{lr}
    a484:	b085      	sub	sp, #20
    a486:	4603      	mov	r3, r0
    a488:	9100      	str	r1, [sp, #0]
    a48a:	f88d 3007 	strb.w	r3, [sp, #7]
    volatile uint8 CoreId;
    boolean IsCalibrateCalled = FALSE;
    a48e:	2300      	movs	r3, #0
    a490:	f88d 300f 	strb.w	r3, [sp, #15]

    CoreId = Adc_GetCoreID();
    a494:	f001 ffbc 	bl	c410 <Adc_GetCoreID>
    a498:	4603      	mov	r3, r0
    a49a:	f88d 300e 	strb.w	r3, [sp, #14]
#if (ADC_VALIDATE_CALL_AND_UNIT == STD_ON)
    if ((Std_ReturnType)E_OK == Adc_ValidateCallAndUnit(ADC_CALIBRATE_ID, Unit, CoreId))
    a49e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a4a2:	b2da      	uxtb	r2, r3
    a4a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a4a8:	4619      	mov	r1, r3
    a4aa:	2029      	movs	r0, #41	; 0x29
    a4ac:	f7fe ff16 	bl	92dc <Adc_ValidateCallAndUnit>
    a4b0:	4603      	mov	r3, r0
    a4b2:	2b00      	cmp	r3, #0
    a4b4:	d134      	bne.n	a520 <Adc_Calibrate+0x9e>
    {
#endif /* ADC_VALIDATE_CALL_AND_UNIT == STD_ON */

#if (ADC_VALIDATE_PARAMS == STD_ON)
        if ((Std_ReturnType)E_OK == Adc_ValidatePtr(ADC_CALIBRATE_ID, pStatus))
    a4b6:	9900      	ldr	r1, [sp, #0]
    a4b8:	2029      	movs	r0, #41	; 0x29
    a4ba:	f7fe fb21 	bl	8b00 <Adc_ValidatePtr>
    a4be:	4603      	mov	r3, r0
    a4c0:	2b00      	cmp	r3, #0
    a4c2:	d12d      	bne.n	a520 <Adc_Calibrate+0x9e>
        {
#endif /* ADC_VALIDATE_PARAMS == STD_ON */
            /* Reset status before executing the calibration */
            pStatus->AdcUnitSelfTestStatus = E_NOT_OK;
    a4c4:	9b00      	ldr	r3, [sp, #0]
    a4c6:	2201      	movs	r2, #1
    a4c8:	701a      	strb	r2, [r3, #0]
            if ((Std_ReturnType)E_OK == Adc_ValidateNotBusyNoQueue(Unit, ADC_CALIBRATE_ID))
    a4ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a4ce:	2129      	movs	r1, #41	; 0x29
    a4d0:	4618      	mov	r0, r3
    a4d2:	f7fe fc75 	bl	8dc0 <Adc_ValidateNotBusyNoQueue>
    a4d6:	4603      	mov	r3, r0
    a4d8:	2b00      	cmp	r3, #0
    a4da:	d115      	bne.n	a508 <Adc_Calibrate+0x86>
            {
                if ((Std_ReturnType)E_OK == Adc_ValidateCheckGroupNotConversion(ADC_CALIBRATE_ID, CoreId))
    a4dc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a4e0:	b2db      	uxtb	r3, r3
    a4e2:	4619      	mov	r1, r3
    a4e4:	2029      	movs	r0, #41	; 0x29
    a4e6:	f7fe fcd5 	bl	8e94 <Adc_ValidateCheckGroupNotConversion>
    a4ea:	4603      	mov	r3, r0
    a4ec:	2b00      	cmp	r3, #0
    a4ee:	d10b      	bne.n	a508 <Adc_Calibrate+0x86>
                {
                    Adc_Ipw_Calibrate(Unit, pStatus, CoreId);
    a4f0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a4f4:	b2da      	uxtb	r2, r3
    a4f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a4fa:	9900      	ldr	r1, [sp, #0]
    a4fc:	4618      	mov	r0, r3
    a4fe:	f001 ff5d 	bl	c3bc <Adc_Ipw_Calibrate>
                    IsCalibrateCalled = TRUE;
    a502:	2301      	movs	r3, #1
    a504:	f88d 300f 	strb.w	r3, [sp, #15]
                }
            }
            if (TRUE == IsCalibrateCalled)
    a508:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a50c:	2b00      	cmp	r3, #0
    a50e:	d007      	beq.n	a520 <Adc_Calibrate+0x9e>
            {
                if ((Std_ReturnType)E_NOT_OK == pStatus->AdcUnitSelfTestStatus)
    a510:	9b00      	ldr	r3, [sp, #0]
    a512:	781b      	ldrb	r3, [r3, #0]
    a514:	2b01      	cmp	r3, #1
    a516:	d103      	bne.n	a520 <Adc_Calibrate+0x9e>
                {
                    Adc_ReportDetRuntimeError((uint8)ADC_CALIBRATE_ID, (uint8)ADC_E_TIMEOUT);
    a518:	212b      	movs	r1, #43	; 0x2b
    a51a:	2029      	movs	r0, #41	; 0x29
    a51c:	f7fe fa71 	bl	8a02 <Adc_ReportDetRuntimeError>
#endif /* ADC_VALIDATE_PARAMS == STD_ON */

#if (ADC_VALIDATE_CALL_AND_UNIT == STD_ON)
    }
#endif /* ADC_VALIDATE_CALL_AND_UNIT == STD_ON */
}
    a520:	bf00      	nop
    a522:	b005      	add	sp, #20
    a524:	f85d fb04 	ldr.w	pc, [sp], #4

0000a528 <Adc_HwAcc_SetSC2Reg>:
#include "Adc_MemMap.h"

static inline void Adc_HwAcc_SetSC2Reg(ADC_Type * const Base,
                                       const uint32 ClearMask,
                                       const uint32 Value)
{
    a528:	b086      	sub	sp, #24
    a52a:	9003      	str	r0, [sp, #12]
    a52c:	9102      	str	r1, [sp, #8]
    a52e:	9201      	str	r2, [sp, #4]
    /* Clear and set SC2 register based on ClearMask and Value */
    uint32 Sc2Reg = Base->SC2;
    a530:	9b03      	ldr	r3, [sp, #12]
    a532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    a536:	9305      	str	r3, [sp, #20]
    Sc2Reg &= ~(ClearMask);
    a538:	9b02      	ldr	r3, [sp, #8]
    a53a:	43db      	mvns	r3, r3
    a53c:	9a05      	ldr	r2, [sp, #20]
    a53e:	4013      	ands	r3, r2
    a540:	9305      	str	r3, [sp, #20]
    Sc2Reg |= Value;
    a542:	9a05      	ldr	r2, [sp, #20]
    a544:	9b01      	ldr	r3, [sp, #4]
    a546:	4313      	orrs	r3, r2
    a548:	9305      	str	r3, [sp, #20]
    Base->SC2 = Sc2Reg;
    a54a:	9b03      	ldr	r3, [sp, #12]
    a54c:	9a05      	ldr	r2, [sp, #20]
    a54e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    a552:	bf00      	nop
    a554:	b006      	add	sp, #24
    a556:	4770      	bx	lr

0000a558 <Adc_HwAcc_SetClock>:

static inline void Adc_HwAcc_SetClock(ADC_Type * const Base,
                                      const Adc_Ip_ClockSelType ClockDivide,
                                      const Adc_Ip_ClkSourceType InputClock)
{
    a558:	b086      	sub	sp, #24
    a55a:	9003      	str	r0, [sp, #12]
    a55c:	9102      	str	r1, [sp, #8]
    a55e:	9201      	str	r2, [sp, #4]
    /* Update ClockDivide and InputClock values found in CFG1 register */
    uint32 Cfg1Reg = Base->CFG1;
    a560:	9b03      	ldr	r3, [sp, #12]
    a562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    a564:	9305      	str	r3, [sp, #20]
    Cfg1Reg &= ~(ADC_CFG1_ADIV_MASK | ADC_CFG1_ADICLK_MASK);
    a566:	9b05      	ldr	r3, [sp, #20]
    a568:	f023 0363 	bic.w	r3, r3, #99	; 0x63
    a56c:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADIV(ClockDivide);
    a56e:	9b02      	ldr	r3, [sp, #8]
    a570:	015b      	lsls	r3, r3, #5
    a572:	f003 0360 	and.w	r3, r3, #96	; 0x60
    a576:	9a05      	ldr	r2, [sp, #20]
    a578:	4313      	orrs	r3, r2
    a57a:	9305      	str	r3, [sp, #20]
    Cfg1Reg |= ADC_CFG1_ADICLK(InputClock);
    a57c:	9b01      	ldr	r3, [sp, #4]
    a57e:	f003 0303 	and.w	r3, r3, #3
    a582:	9a05      	ldr	r2, [sp, #20]
    a584:	4313      	orrs	r3, r2
    a586:	9305      	str	r3, [sp, #20]
    Base->CFG1 = Cfg1Reg;
    a588:	9b03      	ldr	r3, [sp, #12]
    a58a:	9a05      	ldr	r2, [sp, #20]
    a58c:	641a      	str	r2, [r3, #64]	; 0x40
}
    a58e:	bf00      	nop
    a590:	b006      	add	sp, #24
    a592:	4770      	bx	lr

0000a594 <Adc_HwAcc_GetClockDivide>:

static inline Adc_Ip_ClockSelType Adc_HwAcc_GetClockDivide(const uint32 Reg)
{
    a594:	b084      	sub	sp, #16
    a596:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve ClockDivide value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClockSelType ReturnValue = ADC_IP_CLK_FULL_BUS;
    a598:	2300      	movs	r3, #0
    a59a:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADIV_MASK) >> ADC_CFG1_ADIV_SHIFT)
    a59c:	9b01      	ldr	r3, [sp, #4]
    a59e:	095b      	lsrs	r3, r3, #5
    a5a0:	f003 0303 	and.w	r3, r3, #3
    a5a4:	2b03      	cmp	r3, #3
    a5a6:	d00c      	beq.n	a5c2 <Adc_HwAcc_GetClockDivide+0x2e>
    a5a8:	2b03      	cmp	r3, #3
    a5aa:	d80d      	bhi.n	a5c8 <Adc_HwAcc_GetClockDivide+0x34>
    a5ac:	2b01      	cmp	r3, #1
    a5ae:	d002      	beq.n	a5b6 <Adc_HwAcc_GetClockDivide+0x22>
    a5b0:	2b02      	cmp	r3, #2
    a5b2:	d003      	beq.n	a5bc <Adc_HwAcc_GetClockDivide+0x28>
        case 3u:
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
            break;
        default:
            ; /* no-op */
            break;
    a5b4:	e008      	b.n	a5c8 <Adc_HwAcc_GetClockDivide+0x34>
            ReturnValue = ADC_IP_CLK_HALF_BUS;
    a5b6:	2301      	movs	r3, #1
    a5b8:	9303      	str	r3, [sp, #12]
            break;
    a5ba:	e006      	b.n	a5ca <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_QUARTER_BUS;
    a5bc:	2302      	movs	r3, #2
    a5be:	9303      	str	r3, [sp, #12]
            break;
    a5c0:	e003      	b.n	a5ca <Adc_HwAcc_GetClockDivide+0x36>
            ReturnValue = ADC_IP_CLK_EIGHTH_BUS;
    a5c2:	2303      	movs	r3, #3
    a5c4:	9303      	str	r3, [sp, #12]
            break;
    a5c6:	e000      	b.n	a5ca <Adc_HwAcc_GetClockDivide+0x36>
            break;
    a5c8:	bf00      	nop
    }
    return ReturnValue;
    a5ca:	9b03      	ldr	r3, [sp, #12]
}
    a5cc:	4618      	mov	r0, r3
    a5ce:	b004      	add	sp, #16
    a5d0:	4770      	bx	lr

0000a5d2 <Adc_HwAcc_GetInputClock>:

static inline Adc_Ip_ClkSourceType Adc_HwAcc_GetInputClock(const uint32 Reg)
{
    a5d2:	b084      	sub	sp, #16
    a5d4:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve InputClock value found in CFG1 register
     * Note: Reg should be the value of CFG1 register
     */
    Adc_Ip_ClkSourceType ReturnValue = ADC_IP_CLK_ALT_1;
    a5d6:	2300      	movs	r3, #0
    a5d8:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_CFG1_ADICLK_MASK) >> ADC_CFG1_ADICLK_SHIFT)
    a5da:	9b01      	ldr	r3, [sp, #4]
    a5dc:	f003 0303 	and.w	r3, r3, #3
    a5e0:	2b03      	cmp	r3, #3
    a5e2:	d00c      	beq.n	a5fe <Adc_HwAcc_GetInputClock+0x2c>
    a5e4:	2b03      	cmp	r3, #3
    a5e6:	d80d      	bhi.n	a604 <Adc_HwAcc_GetInputClock+0x32>
    a5e8:	2b01      	cmp	r3, #1
    a5ea:	d002      	beq.n	a5f2 <Adc_HwAcc_GetInputClock+0x20>
    a5ec:	2b02      	cmp	r3, #2
    a5ee:	d003      	beq.n	a5f8 <Adc_HwAcc_GetInputClock+0x26>
        case 3u:
            ReturnValue = ADC_IP_CLK_ALT_4;
            break;
        default:
            ; /* no-op */
            break;
    a5f0:	e008      	b.n	a604 <Adc_HwAcc_GetInputClock+0x32>
            ReturnValue = ADC_IP_CLK_ALT_2;
    a5f2:	2301      	movs	r3, #1
    a5f4:	9303      	str	r3, [sp, #12]
            break;
    a5f6:	e006      	b.n	a606 <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_3;
    a5f8:	2302      	movs	r3, #2
    a5fa:	9303      	str	r3, [sp, #12]
            break;
    a5fc:	e003      	b.n	a606 <Adc_HwAcc_GetInputClock+0x34>
            ReturnValue = ADC_IP_CLK_ALT_4;
    a5fe:	2303      	movs	r3, #3
    a600:	9303      	str	r3, [sp, #12]
            break;
    a602:	e000      	b.n	a606 <Adc_HwAcc_GetInputClock+0x34>
            break;
    a604:	bf00      	nop
    }
    return ReturnValue;
    a606:	9b03      	ldr	r3, [sp, #12]
}
    a608:	4618      	mov	r0, r3
    a60a:	b004      	add	sp, #16
    a60c:	4770      	bx	lr

0000a60e <Adc_HwAcc_SetSampleTime>:

static inline void Adc_HwAcc_SetSampleTime(ADC_Type * const Base,
                                           const uint8 SampleTime)
{
    a60e:	b084      	sub	sp, #16
    a610:	9001      	str	r0, [sp, #4]
    a612:	460b      	mov	r3, r1
    a614:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Clip sample time to minimum value */
    uint8 ClippedSampleTime = (uint8)((SampleTime > 0U) ? SampleTime : 1U);
    a618:	f89d 3003 	ldrb.w	r3, [sp, #3]
    a61c:	2b00      	cmp	r3, #0
    a61e:	d002      	beq.n	a626 <Adc_HwAcc_SetSampleTime+0x18>
    a620:	f89d 3003 	ldrb.w	r3, [sp, #3]
    a624:	e000      	b.n	a628 <Adc_HwAcc_SetSampleTime+0x1a>
    a626:	2301      	movs	r3, #1
    a628:	f88d 300f 	strb.w	r3, [sp, #15]
    /* Update SampleTime values found in SC3 register */
    uint32 Cfg2Reg = Base->CFG2;
    a62c:	9b01      	ldr	r3, [sp, #4]
    a62e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    a630:	9302      	str	r3, [sp, #8]
    Cfg2Reg &= ~(ADC_CFG2_SMPLTS_MASK);
    a632:	9b02      	ldr	r3, [sp, #8]
    a634:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    a638:	9302      	str	r3, [sp, #8]
    Cfg2Reg |= ADC_CFG2_SMPLTS(ClippedSampleTime);
    a63a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a63e:	9a02      	ldr	r2, [sp, #8]
    a640:	4313      	orrs	r3, r2
    a642:	9302      	str	r3, [sp, #8]
    Base->CFG2 = Cfg2Reg;
    a644:	9b01      	ldr	r3, [sp, #4]
    a646:	9a02      	ldr	r2, [sp, #8]
    a648:	645a      	str	r2, [r3, #68]	; 0x44
}
    a64a:	bf00      	nop
    a64c:	b004      	add	sp, #16
    a64e:	4770      	bx	lr

0000a650 <Adc_HwAcc_SetAveraging>:

static inline void Adc_HwAcc_SetAveraging(ADC_Type * const Base,
                                          const boolean AvgEn,
                                          const Adc_Ip_AvgSelectType AvgSel)
{
    a650:	b086      	sub	sp, #24
    a652:	9003      	str	r0, [sp, #12]
    a654:	460b      	mov	r3, r1
    a656:	9201      	str	r2, [sp, #4]
    a658:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Update AvgEn and AvgSel values found in SC3 register */
    uint32 Sc3Reg = Base->SC3;
    a65c:	9b03      	ldr	r3, [sp, #12]
    a65e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    a662:	9305      	str	r3, [sp, #20]
    Sc3Reg &= ~(ADC_SC3_AVGE_MASK | ADC_SC3_AVGS_MASK);
    a664:	9b05      	ldr	r3, [sp, #20]
    a666:	f023 0307 	bic.w	r3, r3, #7
    a66a:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGE(AvgEn ? 1u : 0u);
    a66c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a670:	2b00      	cmp	r3, #0
    a672:	d001      	beq.n	a678 <Adc_HwAcc_SetAveraging+0x28>
    a674:	2304      	movs	r3, #4
    a676:	e000      	b.n	a67a <Adc_HwAcc_SetAveraging+0x2a>
    a678:	2300      	movs	r3, #0
    a67a:	9a05      	ldr	r2, [sp, #20]
    a67c:	4313      	orrs	r3, r2
    a67e:	9305      	str	r3, [sp, #20]
    Sc3Reg |= ADC_SC3_AVGS(AvgSel);
    a680:	9b01      	ldr	r3, [sp, #4]
    a682:	f003 0303 	and.w	r3, r3, #3
    a686:	9a05      	ldr	r2, [sp, #20]
    a688:	4313      	orrs	r3, r2
    a68a:	9305      	str	r3, [sp, #20]
    Base->SC3 = Sc3Reg;
    a68c:	9b03      	ldr	r3, [sp, #12]
    a68e:	9a05      	ldr	r2, [sp, #20]
    a690:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    a694:	bf00      	nop
    a696:	b006      	add	sp, #24
    a698:	4770      	bx	lr

0000a69a <Adc_HwAcc_GetAverageSelect>:

static inline Adc_Ip_AvgSelectType Adc_HwAcc_GetAverageSelect(const uint32 Reg)
{
    a69a:	b084      	sub	sp, #16
    a69c:	9001      	str	r0, [sp, #4]
    /*
     * Retrieve AvgSelect value found in SC3 register
     * Note: Reg should be the value of SC3 register
     */
    Adc_Ip_AvgSelectType ReturnValue = ADC_IP_AVG_4_CONV;
    a69e:	2300      	movs	r3, #0
    a6a0:	9303      	str	r3, [sp, #12]
    switch ((Reg & ADC_SC3_AVGS_MASK) >> ADC_SC3_AVGS_SHIFT)
    a6a2:	9b01      	ldr	r3, [sp, #4]
    a6a4:	f003 0303 	and.w	r3, r3, #3
    a6a8:	2b03      	cmp	r3, #3
    a6aa:	d00c      	beq.n	a6c6 <Adc_HwAcc_GetAverageSelect+0x2c>
    a6ac:	2b03      	cmp	r3, #3
    a6ae:	d80d      	bhi.n	a6cc <Adc_HwAcc_GetAverageSelect+0x32>
    a6b0:	2b01      	cmp	r3, #1
    a6b2:	d002      	beq.n	a6ba <Adc_HwAcc_GetAverageSelect+0x20>
    a6b4:	2b02      	cmp	r3, #2
    a6b6:	d003      	beq.n	a6c0 <Adc_HwAcc_GetAverageSelect+0x26>
        case 3u:
            ReturnValue = ADC_IP_AVG_32_CONV;
            break;
        default:
            ; /* no-op */
            break;
    a6b8:	e008      	b.n	a6cc <Adc_HwAcc_GetAverageSelect+0x32>
            ReturnValue = ADC_IP_AVG_8_CONV;
    a6ba:	2301      	movs	r3, #1
    a6bc:	9303      	str	r3, [sp, #12]
            break;
    a6be:	e006      	b.n	a6ce <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_16_CONV;
    a6c0:	2302      	movs	r3, #2
    a6c2:	9303      	str	r3, [sp, #12]
            break;
    a6c4:	e003      	b.n	a6ce <Adc_HwAcc_GetAverageSelect+0x34>
            ReturnValue = ADC_IP_AVG_32_CONV;
    a6c6:	2303      	movs	r3, #3
    a6c8:	9303      	str	r3, [sp, #12]
            break;
    a6ca:	e000      	b.n	a6ce <Adc_HwAcc_GetAverageSelect+0x34>
            break;
    a6cc:	bf00      	nop
    }
    return ReturnValue;
    a6ce:	9b03      	ldr	r3, [sp, #12]
}
    a6d0:	4618      	mov	r0, r3
    a6d2:	b004      	add	sp, #16
    a6d4:	4770      	bx	lr

0000a6d6 <Adc_HwAcc_SetTriggerMode>:

static inline void Adc_HwAcc_SetTriggerMode(ADC_Type * const Base,
                                            const Adc_Ip_TrigType TriggerMode)
{
    a6d6:	b084      	sub	sp, #16
    a6d8:	9001      	str	r0, [sp, #4]
    a6da:	9100      	str	r1, [sp, #0]
    /* Update TriggerMode value found in SC2 register */
    uint32 Sc2Reg = Base->SC2;
    a6dc:	9b01      	ldr	r3, [sp, #4]
    a6de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    a6e2:	9303      	str	r3, [sp, #12]
    Sc2Reg &= ~(ADC_SC2_ADTRG_MASK);
    a6e4:	9b03      	ldr	r3, [sp, #12]
    a6e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    a6ea:	9303      	str	r3, [sp, #12]
    Sc2Reg |= ADC_SC2_ADTRG(TriggerMode);
    a6ec:	9b00      	ldr	r3, [sp, #0]
    a6ee:	019b      	lsls	r3, r3, #6
    a6f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a6f4:	9a03      	ldr	r2, [sp, #12]
    a6f6:	4313      	orrs	r3, r2
    a6f8:	9303      	str	r3, [sp, #12]
    Base->SC2 = Sc2Reg;
    a6fa:	9b01      	ldr	r3, [sp, #4]
    a6fc:	9a03      	ldr	r2, [sp, #12]
    a6fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
    a702:	bf00      	nop
    a704:	b004      	add	sp, #16
    a706:	4770      	bx	lr

0000a708 <Adc_HwAcc_GetTriggerMode>:

static inline Adc_Ip_TrigType Adc_HwAcc_GetTriggerMode(const uint32 Reg)
{
    a708:	b084      	sub	sp, #16
    a70a:	9001      	str	r0, [sp, #4]
    /* Retrieve TriggerMode value found in SC2 register */
    Adc_Ip_TrigType ReturnValue = ADC_IP_TRIGGER_SOFTWARE;
    a70c:	2300      	movs	r3, #0
    a70e:	9303      	str	r3, [sp, #12]
    if (((Reg & ADC_SC2_ADTRG_MASK) >> ADC_SC2_ADTRG_SHIFT) == 1u)
    a710:	9b01      	ldr	r3, [sp, #4]
    a712:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a716:	2b00      	cmp	r3, #0
    a718:	d001      	beq.n	a71e <Adc_HwAcc_GetTriggerMode+0x16>
    {
        ReturnValue = ADC_IP_TRIGGER_HARDWARE;
    a71a:	2301      	movs	r3, #1
    a71c:	9303      	str	r3, [sp, #12]
    }
    return ReturnValue;
    a71e:	9b03      	ldr	r3, [sp, #12]
}
    a720:	4618      	mov	r0, r3
    a722:	b004      	add	sp, #16
    a724:	4770      	bx	lr

0000a726 <Adc_HwAcc_SetChannel>:

static inline void Adc_HwAcc_SetChannel(ADC_Type * const Base,
                                        const uint8 ChnIdx,
                                        const Adc_Ip_InputChannelType InputChannel,
                                        const boolean InterruptEnable)
{
    a726:	b086      	sub	sp, #24
    a728:	9003      	str	r0, [sp, #12]
    a72a:	9201      	str	r2, [sp, #4]
    a72c:	461a      	mov	r2, r3
    a72e:	460b      	mov	r3, r1
    a730:	f88d 300b 	strb.w	r3, [sp, #11]
    a734:	4613      	mov	r3, r2
    a736:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Configure channel by writing all SC1n register fields */
    uint32 Sc1Reg = SC1(Base, ChnIdx);
    a73a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a73e:	9b03      	ldr	r3, [sp, #12]
    a740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a744:	9305      	str	r3, [sp, #20]
    Sc1Reg &= ~(ADC_SC1_ADCH_MASK | ADC_SC1_AIEN_MASK);
    a746:	9b05      	ldr	r3, [sp, #20]
    a748:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
    a74c:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_ADCH(InputChannel);
    a74e:	9b01      	ldr	r3, [sp, #4]
    a750:	f003 031f 	and.w	r3, r3, #31
    a754:	9a05      	ldr	r2, [sp, #20]
    a756:	4313      	orrs	r3, r2
    a758:	9305      	str	r3, [sp, #20]
    Sc1Reg |= ADC_SC1_AIEN(InterruptEnable ? 1u : 0u);
    a75a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    a75e:	2b00      	cmp	r3, #0
    a760:	d001      	beq.n	a766 <Adc_HwAcc_SetChannel+0x40>
    a762:	2340      	movs	r3, #64	; 0x40
    a764:	e000      	b.n	a768 <Adc_HwAcc_SetChannel+0x42>
    a766:	2300      	movs	r3, #0
    a768:	9a05      	ldr	r2, [sp, #20]
    a76a:	4313      	orrs	r3, r2
    a76c:	9305      	str	r3, [sp, #20]
    SC1(Base, ChnIdx) = Sc1Reg;
    a76e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a772:	9b03      	ldr	r3, [sp, #12]
    a774:	9905      	ldr	r1, [sp, #20]
    a776:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    a77a:	bf00      	nop
    a77c:	b006      	add	sp, #24
    a77e:	4770      	bx	lr

0000a780 <Adc_HwAcc_SetUserGainAndOffset>:

static inline void Adc_HwAcc_SetUserGainAndOffset(ADC_Type * const Base,
                                                  const uint16 UsrGain,
                                                  const uint16 UsrOffset)
{
    a780:	b082      	sub	sp, #8
    a782:	9001      	str	r0, [sp, #4]
    a784:	460b      	mov	r3, r1
    a786:	f8ad 3002 	strh.w	r3, [sp, #2]
    a78a:	4613      	mov	r3, r2
    a78c:	f8ad 3000 	strh.w	r3, [sp]
     * 2. RegVal <- Sum & 0xF800U
     * 3. if RegVal != 0x0000U then RegVal <- 0xFFFFU
     * 4. Base->G <- RegVal
     */

    Base->USR_OFS = ADC_USR_OFS_USR_OFS(UsrOffset);
    a790:	f8bd 3000 	ldrh.w	r3, [sp]
    a794:	b2da      	uxtb	r2, r3
    a796:	9b01      	ldr	r3, [sp, #4]
    a798:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    Base->UG = ADC_UG_UG(UsrGain);
    a79c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    a7a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
    a7a4:	9b01      	ldr	r3, [sp, #4]
    a7a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
    a7aa:	bf00      	nop
    a7ac:	b002      	add	sp, #8
    a7ae:	4770      	bx	lr

0000a7b0 <Adc_HwAcc_GetAIEN>:

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
static inline boolean Adc_HwAcc_GetAIEN(const uint32 Reg)
{
    a7b0:	b082      	sub	sp, #8
    a7b2:	9001      	str	r0, [sp, #4]
    /* Retrive AIEN flag from given SC1 register */
    return (((Reg & ADC_SC1_AIEN_MASK) >> ADC_SC1_AIEN_SHIFT) != 0u) ? TRUE : FALSE;
    a7b4:	9b01      	ldr	r3, [sp, #4]
    a7b6:	099b      	lsrs	r3, r3, #6
    a7b8:	f003 0301 	and.w	r3, r3, #1
    a7bc:	2b00      	cmp	r3, #0
    a7be:	bf14      	ite	ne
    a7c0:	2301      	movne	r3, #1
    a7c2:	2300      	moveq	r3, #0
    a7c4:	b2db      	uxtb	r3, r3
}
    a7c6:	4618      	mov	r0, r3
    a7c8:	b002      	add	sp, #8
    a7ca:	4770      	bx	lr

0000a7cc <Adc_HwAcc_GetCOCO>:
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

static inline boolean Adc_HwAcc_GetCOCO(const uint32 Reg)
{
    a7cc:	b082      	sub	sp, #8
    a7ce:	9001      	str	r0, [sp, #4]
    /* Retrive COCO flag from given SC1 register */
    return (((Reg & ADC_SC1_COCO_MASK) >> ADC_SC1_COCO_SHIFT) != 0u) ? TRUE : FALSE;
    a7d0:	9b01      	ldr	r3, [sp, #4]
    a7d2:	09db      	lsrs	r3, r3, #7
    a7d4:	f003 0301 	and.w	r3, r3, #1
    a7d8:	2b00      	cmp	r3, #0
    a7da:	bf14      	ite	ne
    a7dc:	2301      	movne	r3, #1
    a7de:	2300      	moveq	r3, #0
    a7e0:	b2db      	uxtb	r3, r3
}
    a7e2:	4618      	mov	r0, r3
    a7e4:	b002      	add	sp, #8
    a7e6:	4770      	bx	lr

0000a7e8 <Adc_HwAcc_GetData>:

static inline uint16 Adc_HwAcc_GetData(const ADC_Type * const Base,
                                       const uint8 ChnIdx)
{
    a7e8:	b084      	sub	sp, #16
    a7ea:	9001      	str	r0, [sp, #4]
    a7ec:	460b      	mov	r3, r1
    a7ee:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Retrieve the conversion result of a given channel */
    uint16 Result = (uint16) R(Base, ChnIdx);
    a7f2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a7f6:	9b01      	ldr	r3, [sp, #4]
    a7f8:	3212      	adds	r2, #18
    a7fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a7fe:	f8ad 300e 	strh.w	r3, [sp, #14]
    Result = (uint16) ((Result & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    a802:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    a806:	f3c3 030b 	ubfx	r3, r3, #0, #12
    a80a:	f8ad 300e 	strh.w	r3, [sp, #14]
    return Result;
    a80e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    a812:	4618      	mov	r0, r3
    a814:	b004      	add	sp, #16
    a816:	4770      	bx	lr

0000a818 <ADC_DoCalibration_SetParams>:
*
* END**************************************************************************/
static inline void ADC_DoCalibration_SetParams(ADC_Type * const Base,
                                               const Adc_Ip_ClockConfigType * const Config,
                                               const Adc_Ip_TrigType TriggerMode)
{
    a818:	b500      	push	{lr}
    a81a:	b085      	sub	sp, #20
    a81c:	9003      	str	r0, [sp, #12]
    a81e:	9102      	str	r1, [sp, #8]
    a820:	9201      	str	r2, [sp, #4]
    /* Configure averaging */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    a822:	f008 f809 	bl	12838 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    a826:	9b02      	ldr	r3, [sp, #8]
    a828:	7a59      	ldrb	r1, [r3, #9]
    a82a:	9b02      	ldr	r3, [sp, #8]
    a82c:	68db      	ldr	r3, [r3, #12]
    a82e:	461a      	mov	r2, r3
    a830:	9803      	ldr	r0, [sp, #12]
    a832:	f7ff ff0d 	bl	a650 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    a836:	f008 f82b 	bl	12890 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Configure trigger mode */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24();
    a83a:	f007 fe63 	bl	12504 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    a83e:	9901      	ldr	r1, [sp, #4]
    a840:	9803      	ldr	r0, [sp, #12]
    a842:	f7ff ff48 	bl	a6d6 <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24();
    a846:	f007 fe89 	bl	1255c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>

    /* Configure sample time */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15();
    a84a:	f007 fb79 	bl	11f40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    a84e:	9b02      	ldr	r3, [sp, #8]
    a850:	7a1b      	ldrb	r3, [r3, #8]
    a852:	4619      	mov	r1, r3
    a854:	9803      	ldr	r0, [sp, #12]
    a856:	f7ff feda 	bl	a60e <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15();
    a85a:	f007 fb9d 	bl	11f98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>

    /* Configure input clock */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13();
    a85e:	f007 facb 	bl	11df8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    a862:	9b02      	ldr	r3, [sp, #8]
    a864:	6819      	ldr	r1, [r3, #0]
    a866:	9b02      	ldr	r3, [sp, #8]
    a868:	685b      	ldr	r3, [r3, #4]
    a86a:	461a      	mov	r2, r3
    a86c:	9803      	ldr	r0, [sp, #12]
    a86e:	f7ff fe73 	bl	a558 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13();
    a872:	f007 faed 	bl	11e50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>
}
    a876:	bf00      	nop
    a878:	b005      	add	sp, #20
    a87a:	f85d fb04 	ldr.w	pc, [sp], #4

0000a87e <Adc_Ip_Init>:
*
* @implements     Adc_Ip_Init_Activity
* END**************************************************************************/
void Adc_Ip_Init(const uint32 Instance,
                 const Adc_Ip_ConfigType * const Config)
{
    a87e:	b500      	push	{lr}
    a880:	b087      	sub	sp, #28
    a882:	9001      	str	r0, [sp, #4]
    a884:	9100      	str	r1, [sp, #0]
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
    DevAssert(Config->NumChannels <= ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    a886:	4a67      	ldr	r2, [pc, #412]	; (aa24 <Adc_Ip_Init+0x1a6>)
    a888:	9b01      	ldr	r3, [sp, #4]
    a88a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a88e:	9302      	str	r3, [sp, #8]
    uint32 SC2Reg = 0u;
    a890:	2300      	movs	r3, #0
    a892:	9305      	str	r3, [sp, #20]
    uint32 SC2ClearMask = 0u;
    a894:	2300      	movs	r3, #0
    a896:	9304      	str	r3, [sp, #16]
    uint8 Index;

    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    a898:	9b00      	ldr	r3, [sp, #0]
    a89a:	6819      	ldr	r1, [r3, #0]
    a89c:	9b00      	ldr	r3, [sp, #0]
    a89e:	689b      	ldr	r3, [r3, #8]
    a8a0:	461a      	mov	r2, r3
    a8a2:	9802      	ldr	r0, [sp, #8]
    a8a4:	f7ff fe58 	bl	a558 <Adc_HwAcc_SetClock>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    a8a8:	9b00      	ldr	r3, [sp, #0]
    a8aa:	7b1b      	ldrb	r3, [r3, #12]
    a8ac:	4619      	mov	r1, r3
    a8ae:	9802      	ldr	r0, [sp, #8]
    a8b0:	f7ff fead 	bl	a60e <Adc_HwAcc_SetSampleTime>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    a8b4:	9b00      	ldr	r3, [sp, #0]
    a8b6:	7b59      	ldrb	r1, [r3, #13]
    a8b8:	9b00      	ldr	r3, [sp, #0]
    a8ba:	691b      	ldr	r3, [r3, #16]
    a8bc:	461a      	mov	r2, r3
    a8be:	9802      	ldr	r0, [sp, #8]
    a8c0:	f7ff fec6 	bl	a650 <Adc_HwAcc_SetAveraging>

    Adc_Ip_SetResolution(Instance, Config->Resolution);
    a8c4:	9b00      	ldr	r3, [sp, #0]
    a8c6:	695b      	ldr	r3, [r3, #20]
    a8c8:	4619      	mov	r1, r3
    a8ca:	9801      	ldr	r0, [sp, #4]
    a8cc:	f000 f9ea 	bl	aca4 <Adc_Ip_SetResolution>
        ADC_SetSupplyMonitoringEnable(Config->SupplyMonitoringEnable);
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    /* Configure trigger mode */
    SC2ClearMask |= ADC_SC2_ADTRG_MASK;
    a8d0:	9b04      	ldr	r3, [sp, #16]
    a8d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a8d6:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ADTRG(Config->TriggerMode);
    a8d8:	9b00      	ldr	r3, [sp, #0]
    a8da:	699b      	ldr	r3, [r3, #24]
    a8dc:	019b      	lsls	r3, r3, #6
    a8de:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a8e2:	9a05      	ldr	r2, [sp, #20]
    a8e4:	4313      	orrs	r3, r2
    a8e6:	9305      	str	r3, [sp, #20]

    /* Configure DMA enable */
    if (Config->DmaEnable)
    a8e8:	9b00      	ldr	r3, [sp, #0]
    a8ea:	7f1b      	ldrb	r3, [r3, #28]
    a8ec:	2b00      	cmp	r3, #0
    a8ee:	d004      	beq.n	a8fa <Adc_Ip_Init+0x7c>
    {
        SC2Reg |= ADC_SC2_DMAEN_MASK;
    a8f0:	9b05      	ldr	r3, [sp, #20]
    a8f2:	f043 0304 	orr.w	r3, r3, #4
    a8f6:	9305      	str	r3, [sp, #20]
    a8f8:	e003      	b.n	a902 <Adc_Ip_Init+0x84>
    }
    else
    {
        SC2ClearMask |= ADC_SC2_DMAEN_MASK;
    a8fa:	9b04      	ldr	r3, [sp, #16]
    a8fc:	f043 0304 	orr.w	r3, r3, #4
    a900:	9304      	str	r3, [sp, #16]
    }

    /* Configure voltage reference selector */
    SC2ClearMask |= ADC_SC2_REFSEL_MASK;
    a902:	9b04      	ldr	r3, [sp, #16]
    a904:	f043 0303 	orr.w	r3, r3, #3
    a908:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_REFSEL(Config->VoltageRef);
    a90a:	9b00      	ldr	r3, [sp, #0]
    a90c:	6a1b      	ldr	r3, [r3, #32]
    a90e:	f003 0303 	and.w	r3, r3, #3
    a912:	9a05      	ldr	r2, [sp, #20]
    a914:	4313      	orrs	r3, r2
    a916:	9305      	str	r3, [sp, #20]

    /* Configure compare enables and values */
    SC2ClearMask |= ADC_SC2_ACFE_MASK | ADC_SC2_ACFGT_MASK | ADC_SC2_ACREN_MASK;
    a918:	9b04      	ldr	r3, [sp, #16]
    a91a:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    a91e:	9304      	str	r3, [sp, #16]
    SC2Reg |= ADC_SC2_ACFE(Config->CompareEnable ? 1u : 0u);
    a920:	9b00      	ldr	r3, [sp, #0]
    a922:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    a926:	2b00      	cmp	r3, #0
    a928:	d001      	beq.n	a92e <Adc_Ip_Init+0xb0>
    a92a:	2320      	movs	r3, #32
    a92c:	e000      	b.n	a930 <Adc_Ip_Init+0xb2>
    a92e:	2300      	movs	r3, #0
    a930:	9a05      	ldr	r2, [sp, #20]
    a932:	4313      	orrs	r3, r2
    a934:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACFGT(Config->CompareGreaterThanEnable ? 1u : 0u);
    a936:	9b00      	ldr	r3, [sp, #0]
    a938:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    a93c:	2b00      	cmp	r3, #0
    a93e:	d001      	beq.n	a944 <Adc_Ip_Init+0xc6>
    a940:	2310      	movs	r3, #16
    a942:	e000      	b.n	a946 <Adc_Ip_Init+0xc8>
    a944:	2300      	movs	r3, #0
    a946:	9a05      	ldr	r2, [sp, #20]
    a948:	4313      	orrs	r3, r2
    a94a:	9305      	str	r3, [sp, #20]
    SC2Reg |= ADC_SC2_ACREN(Config->CompareRangeFuncEnable ? 1u : 0u);
    a94c:	9b00      	ldr	r3, [sp, #0]
    a94e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    a952:	2b00      	cmp	r3, #0
    a954:	d001      	beq.n	a95a <Adc_Ip_Init+0xdc>
    a956:	2308      	movs	r3, #8
    a958:	e000      	b.n	a95c <Adc_Ip_Init+0xde>
    a95a:	2300      	movs	r3, #0
    a95c:	9a05      	ldr	r2, [sp, #20]
    a95e:	4313      	orrs	r3, r2
    a960:	9305      	str	r3, [sp, #20]
    Base->CV[0u] = ADC_CV_CV(Config->CompVal1);
    a962:	9b00      	ldr	r3, [sp, #0]
    a964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    a966:	461a      	mov	r2, r3
    a968:	9b02      	ldr	r3, [sp, #8]
    a96a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Base->CV[1u] = ADC_CV_CV(Config->CompVal2);
    a96e:	9b00      	ldr	r3, [sp, #0]
    a970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    a972:	461a      	mov	r2, r3
    a974:	9b02      	ldr	r3, [sp, #8]
    a976:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    Adc_HwAcc_SetSC2Reg(Base, SC2ClearMask, SC2Reg);
    a97a:	9a05      	ldr	r2, [sp, #20]
    a97c:	9904      	ldr	r1, [sp, #16]
    a97e:	9802      	ldr	r0, [sp, #8]
    a980:	f7ff fdd2 	bl	a528 <Adc_HwAcc_SetSC2Reg>

    Adc_HwAcc_SetUserGainAndOffset(Base, Config->UsrGain, Config->UsrOffset);
    a984:	9b00      	ldr	r3, [sp, #0]
    a986:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
    a988:	9b00      	ldr	r3, [sp, #0]
    a98a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    a98c:	461a      	mov	r2, r3
    a98e:	9802      	ldr	r0, [sp, #8]
    a990:	f7ff fef6 	bl	a780 <Adc_HwAcc_SetUserGainAndOffset>

    Adc_Ip_SetContinuousMode(Instance, Config->ContinuousConvEnable);
    a994:	9b00      	ldr	r3, [sp, #0]
    a996:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    a99a:	4619      	mov	r1, r3
    a99c:	9801      	ldr	r0, [sp, #4]
    a99e:	f000 f955 	bl	ac4c <Adc_Ip_SetContinuousMode>

    if (Config->ChannelConfigs != NULL_PTR)
    a9a2:	9b00      	ldr	r3, [sp, #0]
    a9a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a9a6:	2b00      	cmp	r3, #0
    a9a8:	d01c      	beq.n	a9e4 <Adc_Ip_Init+0x166>
    {
        for (Index = 0u; Index < Config->NumChannels; Index++)
    a9aa:	2300      	movs	r3, #0
    a9ac:	f88d 300f 	strb.w	r3, [sp, #15]
    a9b0:	e011      	b.n	a9d6 <Adc_Ip_Init+0x158>
        {
            Adc_Ip_ConfigChannel(Instance, &(Config->ChannelConfigs[Index]));
    a9b2:	9b00      	ldr	r3, [sp, #0]
    a9b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
    a9b6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a9ba:	4613      	mov	r3, r2
    a9bc:	005b      	lsls	r3, r3, #1
    a9be:	4413      	add	r3, r2
    a9c0:	009b      	lsls	r3, r3, #2
    a9c2:	440b      	add	r3, r1
    a9c4:	4619      	mov	r1, r3
    a9c6:	9801      	ldr	r0, [sp, #4]
    a9c8:	f000 f9c2 	bl	ad50 <Adc_Ip_ConfigChannel>
        for (Index = 0u; Index < Config->NumChannels; Index++)
    a9cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a9d0:	3301      	adds	r3, #1
    a9d2:	f88d 300f 	strb.w	r3, [sp, #15]
    a9d6:	9b00      	ldr	r3, [sp, #0]
    a9d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    a9dc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    a9e0:	429a      	cmp	r2, r3
    a9e2:	d3e6      	bcc.n	a9b2 <Adc_Ip_Init+0x134>
        }
    }

#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_Ip_axState[Instance].ConversionCompleteNotification = Config->ConversionCompleteNotification;
    a9e4:	9b00      	ldr	r3, [sp, #0]
    a9e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    a9e8:	490f      	ldr	r1, [pc, #60]	; (aa28 <Adc_Ip_Init+0x1aa>)
    a9ea:	9b01      	ldr	r3, [sp, #4]
    a9ec:	204c      	movs	r0, #76	; 0x4c
    a9ee:	fb00 f303 	mul.w	r3, r0, r3
    a9f2:	440b      	add	r3, r1
    a9f4:	3308      	adds	r3, #8
    a9f6:	601a      	str	r2, [r3, #0]
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    Adc_Ip_axState[Instance].CalibrationClockDivide = Config->CalibrationClockDivide;
    a9f8:	9b00      	ldr	r3, [sp, #0]
    a9fa:	685a      	ldr	r2, [r3, #4]
    a9fc:	490a      	ldr	r1, [pc, #40]	; (aa28 <Adc_Ip_Init+0x1aa>)
    a9fe:	9b01      	ldr	r3, [sp, #4]
    aa00:	204c      	movs	r0, #76	; 0x4c
    aa02:	fb00 f303 	mul.w	r3, r0, r3
    aa06:	440b      	add	r3, r1
    aa08:	3304      	adds	r3, #4
    aa0a:	601a      	str	r2, [r3, #0]
    Adc_Ip_axState[Instance].Init = TRUE;
    aa0c:	4a06      	ldr	r2, [pc, #24]	; (aa28 <Adc_Ip_Init+0x1aa>)
    aa0e:	9b01      	ldr	r3, [sp, #4]
    aa10:	214c      	movs	r1, #76	; 0x4c
    aa12:	fb01 f303 	mul.w	r3, r1, r3
    aa16:	4413      	add	r3, r2
    aa18:	2201      	movs	r2, #1
    aa1a:	701a      	strb	r2, [r3, #0]
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    Adc_Ip_axState[Instance].PretriggerSel = Config->PretriggerSel;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
}
    aa1c:	bf00      	nop
    aa1e:	b007      	add	sp, #28
    aa20:	f85d fb04 	ldr.w	pc, [sp], #4
    aa24:	0001a04c 	.word	0x0001a04c
    aa28:	1fff8d80 	.word	0x1fff8d80

0000aa2c <Adc_Ip_DeInit>:
* Description   : This function resets the ADC internal registers to default values.
*
* @implements     Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Adc_Ip_DeInit(const uint32 Instance)
{
    aa2c:	b500      	push	{lr}
    aa2e:	b0c3      	sub	sp, #268	; 0x10c
    aa30:	ab42      	add	r3, sp, #264	; 0x108
    aa32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    aa36:	6018      	str	r0, [r3, #0]

    Adc_Ip_ConfigType DefaultConfig;
    Adc_Ip_ChanConfigType ChannelConfigs[ADC_MAX_CHAN_COUNT];
    uint8 Index;

    DefaultConfig.ClockDivide = ADC_IP_CLK_FULL_BUS;
    aa38:	2300      	movs	r3, #0
    aa3a:	9332      	str	r3, [sp, #200]	; 0xc8
    DefaultConfig.CalibrationClockDivide = ADC_IP_CLK_EIGHTH_BUS;
    aa3c:	2303      	movs	r3, #3
    aa3e:	9333      	str	r3, [sp, #204]	; 0xcc
    DefaultConfig.InputClock = ADC_IP_CLK_ALT_1;
    aa40:	2300      	movs	r3, #0
    aa42:	9334      	str	r3, [sp, #208]	; 0xd0
    DefaultConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    aa44:	230c      	movs	r3, #12
    aa46:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
    DefaultConfig.AvgEn = FALSE;
    aa4a:	2300      	movs	r3, #0
    aa4c:	f88d 30d5 	strb.w	r3, [sp, #213]	; 0xd5
    DefaultConfig.AvgSel = ADC_IP_AVG_4_CONV;
    aa50:	2300      	movs	r3, #0
    aa52:	9336      	str	r3, [sp, #216]	; 0xd8
    DefaultConfig.Resolution = ADC_IP_RESOLUTION_8BIT;
    aa54:	2300      	movs	r3, #0
    aa56:	9337      	str	r3, [sp, #220]	; 0xdc
    DefaultConfig.TriggerMode = ADC_IP_TRIGGER_SOFTWARE;
    aa58:	2300      	movs	r3, #0
    aa5a:	9338      	str	r3, [sp, #224]	; 0xe0
#if (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON)
    DefaultConfig.PretriggerSel = ADC_IP_PRETRIGGER_SEL_PDB;
    DefaultConfig.TriggerSel = ADC_IP_TRIGGER_SEL_PDB;
#endif /* (ADC_IP_ENABLE_SIM_SOURCE_SELECTION == STD_ON) */
    DefaultConfig.DmaEnable = FALSE;
    aa5c:	2300      	movs	r3, #0
    aa5e:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
    DefaultConfig.VoltageRef = ADC_IP_VOLTAGEREF_VREF;
    aa62:	2300      	movs	r3, #0
    aa64:	933a      	str	r3, [sp, #232]	; 0xe8
    DefaultConfig.ContinuousConvEnable = FALSE;
    aa66:	2300      	movs	r3, #0
    aa68:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DefaultConfig.SupplyMonitoringEnable = FALSE;
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    DefaultConfig.CompareEnable = FALSE;
    aa6c:	2300      	movs	r3, #0
    aa6e:	f88d 30ed 	strb.w	r3, [sp, #237]	; 0xed
    DefaultConfig.CompareGreaterThanEnable = FALSE;
    aa72:	2300      	movs	r3, #0
    aa74:	f88d 30ee 	strb.w	r3, [sp, #238]	; 0xee
    DefaultConfig.CompareRangeFuncEnable = FALSE;
    aa78:	2300      	movs	r3, #0
    aa7a:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
    DefaultConfig.CompVal1 = 0u;
    aa7e:	2300      	movs	r3, #0
    aa80:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
    DefaultConfig.CompVal2 = 0u;
    aa84:	2300      	movs	r3, #0
    aa86:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
    DefaultConfig.UsrGain = ADC_IP_DEFAULT_USER_GAIN;
    aa8a:	2304      	movs	r3, #4
    aa8c:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
    DefaultConfig.UsrOffset = 0u;
    aa90:	2300      	movs	r3, #0
    aa92:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6
    DefaultConfig.NumChannels = ADC_MAX_CHAN_COUNT;
    aa96:	2310      	movs	r3, #16
    aa98:	f88d 30f8 	strb.w	r3, [sp, #248]	; 0xf8
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    aa9c:	2300      	movs	r3, #0
    aa9e:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    aaa2:	e02b      	b.n	aafc <Adc_Ip_DeInit+0xd0>
    {
        ChannelConfigs[Index].ChnIdx = Index;
    aaa4:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    aaa8:	ab42      	add	r3, sp, #264	; 0x108
    aaaa:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    aaae:	4613      	mov	r3, r2
    aab0:	005b      	lsls	r3, r3, #1
    aab2:	4413      	add	r3, r2
    aab4:	009b      	lsls	r3, r3, #2
    aab6:	440b      	add	r3, r1
    aab8:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    aabc:	701a      	strb	r2, [r3, #0]
        ChannelConfigs[Index].Channel = ADC_IP_INPUTCHAN_DISABLED;
    aabe:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    aac2:	ab42      	add	r3, sp, #264	; 0x108
    aac4:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    aac8:	4613      	mov	r3, r2
    aaca:	005b      	lsls	r3, r3, #1
    aacc:	4413      	add	r3, r2
    aace:	009b      	lsls	r3, r3, #2
    aad0:	440b      	add	r3, r1
    aad2:	3304      	adds	r3, #4
    aad4:	221f      	movs	r2, #31
    aad6:	601a      	str	r2, [r3, #0]
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
        ChannelConfigs[Index].InterruptEnable = FALSE;
    aad8:	f89d 2107 	ldrb.w	r2, [sp, #263]	; 0x107
    aadc:	ab42      	add	r3, sp, #264	; 0x108
    aade:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
    aae2:	4613      	mov	r3, r2
    aae4:	005b      	lsls	r3, r3, #1
    aae6:	4413      	add	r3, r2
    aae8:	009b      	lsls	r3, r3, #2
    aaea:	440b      	add	r3, r1
    aaec:	3308      	adds	r3, #8
    aaee:	2200      	movs	r2, #0
    aaf0:	701a      	strb	r2, [r3, #0]
    for (Index = 0u; Index < ADC_MAX_CHAN_COUNT; Index++)
    aaf2:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    aaf6:	3301      	adds	r3, #1
    aaf8:	f88d 3107 	strb.w	r3, [sp, #263]	; 0x107
    aafc:	f89d 3107 	ldrb.w	r3, [sp, #263]	; 0x107
    ab00:	2b0f      	cmp	r3, #15
    ab02:	d9cf      	bls.n	aaa4 <Adc_Ip_DeInit+0x78>
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    }
    DefaultConfig.ChannelConfigs = ChannelConfigs;
    ab04:	ab02      	add	r3, sp, #8
    ab06:	933f      	str	r3, [sp, #252]	; 0xfc
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    DefaultConfig.ConversionCompleteNotification = NULL_PTR;
    ab08:	2300      	movs	r3, #0
    ab0a:	9340      	str	r3, [sp, #256]	; 0x100
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */

    Adc_Ip_Init(Instance, &DefaultConfig);
    ab0c:	aa32      	add	r2, sp, #200	; 0xc8
    ab0e:	ab42      	add	r3, sp, #264	; 0x108
    ab10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    ab14:	4611      	mov	r1, r2
    ab16:	6818      	ldr	r0, [r3, #0]
    ab18:	f7ff feb1 	bl	a87e <Adc_Ip_Init>
    {
        ADC_ResetSupplyMonitoringChannel();
    }
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */

    Adc_Ip_axState[Instance].Init = FALSE;
    ab1c:	4a07      	ldr	r2, [pc, #28]	; (ab3c <Adc_Ip_DeInit+0x110>)
    ab1e:	ab42      	add	r3, sp, #264	; 0x108
    ab20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    ab24:	681b      	ldr	r3, [r3, #0]
    ab26:	214c      	movs	r1, #76	; 0x4c
    ab28:	fb01 f303 	mul.w	r3, r1, r3
    ab2c:	4413      	add	r3, r2
    ab2e:	2200      	movs	r2, #0
    ab30:	701a      	strb	r2, [r3, #0]
}
    ab32:	bf00      	nop
    ab34:	b043      	add	sp, #268	; 0x10c
    ab36:	f85d fb04 	ldr.w	pc, [sp], #4
    ab3a:	bf00      	nop
    ab3c:	1fff8d80 	.word	0x1fff8d80

0000ab40 <Adc_Ip_SetAveraging>:
* @implements     Adc_Ip_SetAveraging_Activity
* END**************************************************************************/
void Adc_Ip_SetAveraging(const uint32 Instance,
                         const boolean AvgEn,
                         const Adc_Ip_AvgSelectType AvgSel)
{
    ab40:	b500      	push	{lr}
    ab42:	b087      	sub	sp, #28
    ab44:	9003      	str	r0, [sp, #12]
    ab46:	460b      	mov	r3, r1
    ab48:	9201      	str	r2, [sp, #4]
    ab4a:	f88d 300b 	strb.w	r3, [sp, #11]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    ab4e:	4a0a      	ldr	r2, [pc, #40]	; (ab78 <Adc_Ip_SetAveraging+0x38>)
    ab50:	9b03      	ldr	r3, [sp, #12]
    ab52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab56:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27();
    ab58:	f007 fdca 	bl	126f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>
    Adc_HwAcc_SetAveraging(Base, AvgEn, AvgSel);
    ab5c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ab60:	9a01      	ldr	r2, [sp, #4]
    ab62:	4619      	mov	r1, r3
    ab64:	9805      	ldr	r0, [sp, #20]
    ab66:	f7ff fd73 	bl	a650 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27();
    ab6a:	f007 fded 	bl	12748 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>
}
    ab6e:	bf00      	nop
    ab70:	b007      	add	sp, #28
    ab72:	f85d fb04 	ldr.w	pc, [sp], #4
    ab76:	bf00      	nop
    ab78:	0001a04c 	.word	0x0001a04c

0000ab7c <Adc_Ip_SetSampleTime>:
*
* @implements     Adc_Ip_SetSampleTime_Activity
* END**************************************************************************/
void Adc_Ip_SetSampleTime(const uint32 Instance,
                          const uint8 SampleTime)
{
    ab7c:	b500      	push	{lr}
    ab7e:	b085      	sub	sp, #20
    ab80:	9001      	str	r0, [sp, #4]
    ab82:	460b      	mov	r3, r1
    ab84:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    ab88:	4a09      	ldr	r2, [pc, #36]	; (abb0 <Adc_Ip_SetSampleTime+0x34>)
    ab8a:	9b01      	ldr	r3, [sp, #4]
    ab8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab90:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16();
    ab92:	f007 fa27 	bl	11fe4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>
    Adc_HwAcc_SetSampleTime(Base, SampleTime);
    ab96:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ab9a:	4619      	mov	r1, r3
    ab9c:	9803      	ldr	r0, [sp, #12]
    ab9e:	f7ff fd36 	bl	a60e <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16();
    aba2:	f007 fa4b 	bl	1203c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>
}
    aba6:	bf00      	nop
    aba8:	b005      	add	sp, #20
    abaa:	f85d fb04 	ldr.w	pc, [sp], #4
    abae:	bf00      	nop
    abb0:	0001a04c 	.word	0x0001a04c

0000abb4 <Adc_Ip_EnableDma>:
* Description   : This function enables DMA.
*
* @implements     Adc_Ip_EnableDma_Activity
* END**************************************************************************/
void Adc_Ip_EnableDma(const uint32 Instance)
{
    abb4:	b500      	push	{lr}
    abb6:	b085      	sub	sp, #20
    abb8:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    abba:	4a0a      	ldr	r2, [pc, #40]	; (abe4 <Adc_Ip_EnableDma+0x30>)
    abbc:	9b01      	ldr	r3, [sp, #4]
    abbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abc2:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26();
    abc4:	f007 fd42 	bl	1264c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>
    Base->SC2 |= ADC_SC2_DMAEN_MASK;
    abc8:	9b03      	ldr	r3, [sp, #12]
    abca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    abce:	f043 0204 	orr.w	r2, r3, #4
    abd2:	9b03      	ldr	r3, [sp, #12]
    abd4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26();
    abd8:	f007 fd64 	bl	126a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>
}
    abdc:	bf00      	nop
    abde:	b005      	add	sp, #20
    abe0:	f85d fb04 	ldr.w	pc, [sp], #4
    abe4:	0001a04c 	.word	0x0001a04c

0000abe8 <Adc_Ip_DisableDma>:
* Description   : This function disables DMA.
*
* @implements     Adc_Ip_DisableDma_Activity
* END**************************************************************************/
void Adc_Ip_DisableDma(const uint32 Instance)
{
    abe8:	b500      	push	{lr}
    abea:	b085      	sub	sp, #20
    abec:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    abee:	4a0a      	ldr	r2, [pc, #40]	; (ac18 <Adc_Ip_DisableDma+0x30>)
    abf0:	9b01      	ldr	r3, [sp, #4]
    abf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abf6:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22();
    abf8:	f007 fbe0 	bl	123bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>
    Base->SC2 &= ~(ADC_SC2_DMAEN_MASK);
    abfc:	9b03      	ldr	r3, [sp, #12]
    abfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    ac02:	f023 0204 	bic.w	r2, r3, #4
    ac06:	9b03      	ldr	r3, [sp, #12]
    ac08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22();
    ac0c:	f007 fc02 	bl	12414 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>
}
    ac10:	bf00      	nop
    ac12:	b005      	add	sp, #20
    ac14:	f85d fb04 	ldr.w	pc, [sp], #4
    ac18:	0001a04c 	.word	0x0001a04c

0000ac1c <Adc_Ip_SetTriggerMode>:
*
* @implements     Adc_Ip_SetTriggerMode_Activity
* END**************************************************************************/
void Adc_Ip_SetTriggerMode(const uint32 Instance,
                           const Adc_Ip_TrigType TriggerMode)
{
    ac1c:	b500      	push	{lr}
    ac1e:	b085      	sub	sp, #20
    ac20:	9001      	str	r0, [sp, #4]
    ac22:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    ac24:	4a08      	ldr	r2, [pc, #32]	; (ac48 <Adc_Ip_SetTriggerMode+0x2c>)
    ac26:	9b01      	ldr	r3, [sp, #4]
    ac28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac2c:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23();
    ac2e:	f007 fc17 	bl	12460 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>
    Adc_HwAcc_SetTriggerMode(Base, TriggerMode);
    ac32:	9900      	ldr	r1, [sp, #0]
    ac34:	9803      	ldr	r0, [sp, #12]
    ac36:	f7ff fd4e 	bl	a6d6 <Adc_HwAcc_SetTriggerMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23();
    ac3a:	f007 fc3d 	bl	124b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>
}
    ac3e:	bf00      	nop
    ac40:	b005      	add	sp, #20
    ac42:	f85d fb04 	ldr.w	pc, [sp], #4
    ac46:	bf00      	nop
    ac48:	0001a04c 	.word	0x0001a04c

0000ac4c <Adc_Ip_SetContinuousMode>:
*
* @implements     Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Adc_Ip_SetContinuousMode(const uint32 Instance,
                              const boolean ContinuousModeEnable)
{
    ac4c:	b500      	push	{lr}
    ac4e:	b085      	sub	sp, #20
    ac50:	9001      	str	r0, [sp, #4]
    ac52:	460b      	mov	r3, r1
    ac54:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    ac58:	4a11      	ldr	r2, [pc, #68]	; (aca0 <Adc_Ip_SetContinuousMode+0x54>)
    ac5a:	9b01      	ldr	r3, [sp, #4]
    ac5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac60:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30();
    ac62:	f007 fe3b 	bl	128dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>
    uint32 Sc3Reg = Base->SC3;
    ac66:	9b03      	ldr	r3, [sp, #12]
    ac68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    ac6c:	9302      	str	r3, [sp, #8]
    Sc3Reg &= ~(ADC_SC3_ADCO_MASK);
    ac6e:	9b02      	ldr	r3, [sp, #8]
    ac70:	f023 0308 	bic.w	r3, r3, #8
    ac74:	9302      	str	r3, [sp, #8]
    Sc3Reg |= ADC_SC3_ADCO(ContinuousModeEnable ? 1u : 0u);
    ac76:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ac7a:	2b00      	cmp	r3, #0
    ac7c:	d001      	beq.n	ac82 <Adc_Ip_SetContinuousMode+0x36>
    ac7e:	2308      	movs	r3, #8
    ac80:	e000      	b.n	ac84 <Adc_Ip_SetContinuousMode+0x38>
    ac82:	2300      	movs	r3, #0
    ac84:	9a02      	ldr	r2, [sp, #8]
    ac86:	4313      	orrs	r3, r2
    ac88:	9302      	str	r3, [sp, #8]
    Base->SC3 = Sc3Reg;
    ac8a:	9b03      	ldr	r3, [sp, #12]
    ac8c:	9a02      	ldr	r2, [sp, #8]
    ac8e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30();
    ac92:	f007 fe4f 	bl	12934 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>
}
    ac96:	bf00      	nop
    ac98:	b005      	add	sp, #20
    ac9a:	f85d fb04 	ldr.w	pc, [sp], #4
    ac9e:	bf00      	nop
    aca0:	0001a04c 	.word	0x0001a04c

0000aca4 <Adc_Ip_SetResolution>:
*
* @implements     Adc_Ip_SetResolution_Activity
* END**************************************************************************/
void Adc_Ip_SetResolution(const uint32 Instance,
                          const Adc_Ip_ResolutionType Resolution)
{
    aca4:	b500      	push	{lr}
    aca6:	b085      	sub	sp, #20
    aca8:	9001      	str	r0, [sp, #4]
    acaa:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    acac:	4a0e      	ldr	r2, [pc, #56]	; (ace8 <Adc_Ip_SetResolution+0x44>)
    acae:	9b01      	ldr	r3, [sp, #4]
    acb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acb4:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10();
    acb6:	f006 fe61 	bl	1197c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>
    uint32 Cfg1Reg = Base->CFG1;
    acba:	9b03      	ldr	r3, [sp, #12]
    acbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    acbe:	9302      	str	r3, [sp, #8]
    Cfg1Reg &= ~(ADC_CFG1_MODE_MASK);
    acc0:	9b02      	ldr	r3, [sp, #8]
    acc2:	f023 030c 	bic.w	r3, r3, #12
    acc6:	9302      	str	r3, [sp, #8]
    Cfg1Reg |= ADC_CFG1_MODE(Resolution);
    acc8:	9b00      	ldr	r3, [sp, #0]
    acca:	009b      	lsls	r3, r3, #2
    accc:	f003 030c 	and.w	r3, r3, #12
    acd0:	9a02      	ldr	r2, [sp, #8]
    acd2:	4313      	orrs	r3, r2
    acd4:	9302      	str	r3, [sp, #8]
    Base->CFG1 = Cfg1Reg;
    acd6:	9b03      	ldr	r3, [sp, #12]
    acd8:	9a02      	ldr	r2, [sp, #8]
    acda:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10();
    acdc:	f006 fe7a 	bl	119d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>
}
    ace0:	bf00      	nop
    ace2:	b005      	add	sp, #20
    ace4:	f85d fb04 	ldr.w	pc, [sp], #4
    ace8:	0001a04c 	.word	0x0001a04c

0000acec <Adc_Ip_SetClockMode>:
*
* @implements     Adc_Ip_SetClockMode_Activity
* END**************************************************************************/
void Adc_Ip_SetClockMode(const uint32 Instance,
                         const Adc_Ip_ClockConfigType * const Config)
{
    acec:	b500      	push	{lr}
    acee:	b085      	sub	sp, #20
    acf0:	9001      	str	r0, [sp, #4]
    acf2:	9100      	str	r1, [sp, #0]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    acf4:	4a15      	ldr	r2, [pc, #84]	; (ad4c <Adc_Ip_SetClockMode+0x60>)
    acf6:	9b01      	ldr	r3, [sp, #4]
    acf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acfc:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11();
    acfe:	f006 ffd7 	bl	11cb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>
    Adc_HwAcc_SetClock(Base, Config->ClockDivide, Config->InputClock);
    ad02:	9b00      	ldr	r3, [sp, #0]
    ad04:	6819      	ldr	r1, [r3, #0]
    ad06:	9b00      	ldr	r3, [sp, #0]
    ad08:	685b      	ldr	r3, [r3, #4]
    ad0a:	461a      	mov	r2, r3
    ad0c:	9803      	ldr	r0, [sp, #12]
    ad0e:	f7ff fc23 	bl	a558 <Adc_HwAcc_SetClock>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11();
    ad12:	f006 fff9 	bl	11d08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14();
    ad16:	f007 f8c1 	bl	11e9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>
    Adc_HwAcc_SetSampleTime(Base, Config->SampleTime);
    ad1a:	9b00      	ldr	r3, [sp, #0]
    ad1c:	7a1b      	ldrb	r3, [r3, #8]
    ad1e:	4619      	mov	r1, r3
    ad20:	9803      	ldr	r0, [sp, #12]
    ad22:	f7ff fc74 	bl	a60e <Adc_HwAcc_SetSampleTime>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14();
    ad26:	f007 f8e5 	bl	11ef4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28();
    ad2a:	f007 fd33 	bl	12794 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>
    Adc_HwAcc_SetAveraging(Base, Config->AvgEn, Config->AvgSel);
    ad2e:	9b00      	ldr	r3, [sp, #0]
    ad30:	7a59      	ldrb	r1, [r3, #9]
    ad32:	9b00      	ldr	r3, [sp, #0]
    ad34:	68db      	ldr	r3, [r3, #12]
    ad36:	461a      	mov	r2, r3
    ad38:	9803      	ldr	r0, [sp, #12]
    ad3a:	f7ff fc89 	bl	a650 <Adc_HwAcc_SetAveraging>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28();
    ad3e:	f007 fd55 	bl	127ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>
}
    ad42:	bf00      	nop
    ad44:	b005      	add	sp, #20
    ad46:	f85d fb04 	ldr.w	pc, [sp], #4
    ad4a:	bf00      	nop
    ad4c:	0001a04c 	.word	0x0001a04c

0000ad50 <Adc_Ip_ConfigChannel>:
*
* @implements     Adc_Ip_ConfigChannel_Activity
* END**************************************************************************/
void Adc_Ip_ConfigChannel(const uint32 Instance,
                          const Adc_Ip_ChanConfigType * const ChanConfig)
{
    ad50:	b510      	push	{r4, lr}
    ad52:	b084      	sub	sp, #16
    ad54:	9001      	str	r0, [sp, #4]
    ad56:	9100      	str	r1, [sp, #0]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)ChanConfig->Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    ad58:	4a13      	ldr	r2, [pc, #76]	; (ada8 <Adc_Ip_ConfigChannel+0x58>)
    ad5a:	9b01      	ldr	r3, [sp, #4]
    ad5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad60:	9303      	str	r3, [sp, #12]
        InputChanDemapped = ADC_IP_INPUTCHAN_INT0;
    }
    else
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
    {
        InputChanDemapped = ChanConfig->Channel;
    ad62:	9b00      	ldr	r3, [sp, #0]
    ad64:	685b      	ldr	r3, [r3, #4]
    ad66:	9302      	str	r3, [sp, #8]
    }

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21();
    ad68:	f007 fad6 	bl	12318 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, ChanConfig->InterruptEnable);
    ad6c:	9b00      	ldr	r3, [sp, #0]
    ad6e:	7819      	ldrb	r1, [r3, #0]
    ad70:	9b00      	ldr	r3, [sp, #0]
    ad72:	7a1b      	ldrb	r3, [r3, #8]
    ad74:	9a02      	ldr	r2, [sp, #8]
    ad76:	9803      	ldr	r0, [sp, #12]
    ad78:	f7ff fcd5 	bl	a726 <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, ChanConfig->ChnIdx, InputChanDemapped, FALSE);
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21();
    ad7c:	f007 faf8 	bl	12370 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>

    /* Also update in state structure */
    Adc_Ip_axState[Instance].ChannelConfig[ChanConfig->ChnIdx] = ChanConfig->Channel;
    ad80:	9b00      	ldr	r3, [sp, #0]
    ad82:	781b      	ldrb	r3, [r3, #0]
    ad84:	461c      	mov	r4, r3
    ad86:	9b00      	ldr	r3, [sp, #0]
    ad88:	6859      	ldr	r1, [r3, #4]
    ad8a:	4808      	ldr	r0, [pc, #32]	; (adac <Adc_Ip_ConfigChannel+0x5c>)
    ad8c:	9a01      	ldr	r2, [sp, #4]
    ad8e:	4613      	mov	r3, r2
    ad90:	00db      	lsls	r3, r3, #3
    ad92:	4413      	add	r3, r2
    ad94:	005b      	lsls	r3, r3, #1
    ad96:	4413      	add	r3, r2
    ad98:	4423      	add	r3, r4
    ad9a:	3302      	adds	r3, #2
    ad9c:	009b      	lsls	r3, r3, #2
    ad9e:	4403      	add	r3, r0
    ada0:	6059      	str	r1, [r3, #4]
}
    ada2:	bf00      	nop
    ada4:	b004      	add	sp, #16
    ada6:	bd10      	pop	{r4, pc}
    ada8:	0001a04c 	.word	0x0001a04c
    adac:	1fff8d80 	.word	0x1fff8d80

0000adb0 <Adc_Ip_SetDisabledChannel>:
* @implements     Adc_Ip_SetDisabledChannel_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_SetDisabledChannel(const uint32 Instance,
                                            const uint8 ControlChanIdx,
                                            const boolean WithTimeout)
{
    adb0:	b500      	push	{lr}
    adb2:	b089      	sub	sp, #36	; 0x24
    adb4:	9001      	str	r0, [sp, #4]
    adb6:	460b      	mov	r3, r1
    adb8:	f88d 3003 	strb.w	r3, [sp, #3]
    adbc:	4613      	mov	r3, r2
    adbe:	f88d 3002 	strb.w	r3, [sp, #2]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    adc2:	4a24      	ldr	r2, [pc, #144]	; (ae54 <Adc_Ip_SetDisabledChannel+0xa4>)
    adc4:	9b01      	ldr	r3, [sp, #4]
    adc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adca:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    adcc:	2300      	movs	r3, #0
    adce:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    add0:	2100      	movs	r1, #0
    add2:	4821      	ldr	r0, [pc, #132]	; (ae58 <Adc_Ip_SetDisabledChannel+0xa8>)
    add4:	f7f7 fea8 	bl	2b28 <OsIf_MicrosToTicks>
    add8:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    adda:	2000      	movs	r0, #0
    addc:	f7f7 fe58 	bl	2a90 <OsIf_GetCounter>
    ade0:	4603      	mov	r3, r0
    ade2:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    ade4:	2300      	movs	r3, #0
    ade6:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17();
    ade8:	f007 f94e 	bl	12088 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>
    /* Set input channel select to disabled */
    SC1(Base, ControlChanIdx) |= ADC_SC1_ADCH_MASK;
    adec:	f89d 2003 	ldrb.w	r2, [sp, #3]
    adf0:	9b05      	ldr	r3, [sp, #20]
    adf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    adf6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    adfa:	f043 011f 	orr.w	r1, r3, #31
    adfe:	9b05      	ldr	r3, [sp, #20]
    ae00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17();
    ae04:	f007 f96c 	bl	120e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>

    if (WithTimeout == TRUE)
    ae08:	f89d 3002 	ldrb.w	r3, [sp, #2]
    ae0c:	2b00      	cmp	r3, #0
    ae0e:	d01c      	beq.n	ae4a <Adc_Ip_SetDisabledChannel+0x9a>
    {
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    ae10:	e008      	b.n	ae24 <Adc_Ip_SetDisabledChannel+0x74>
        {
            ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    ae12:	ab03      	add	r3, sp, #12
    ae14:	2100      	movs	r1, #0
    ae16:	4618      	mov	r0, r3
    ae18:	f7f7 fe53 	bl	2ac2 <OsIf_GetElapsed>
    ae1c:	4602      	mov	r2, r0
    ae1e:	9b06      	ldr	r3, [sp, #24]
    ae20:	4413      	add	r3, r2
    ae22:	9306      	str	r3, [sp, #24]
        while (((SC1(Base, ControlChanIdx) & ADC_SC1_ADCH_MASK) != ADC_SC1_ADCH_MASK) && (ElapsedTicks < TimeoutTicks))
    ae24:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ae28:	9b05      	ldr	r3, [sp, #20]
    ae2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    ae2e:	f003 031f 	and.w	r3, r3, #31
    ae32:	2b1f      	cmp	r3, #31
    ae34:	d003      	beq.n	ae3e <Adc_Ip_SetDisabledChannel+0x8e>
    ae36:	9a06      	ldr	r2, [sp, #24]
    ae38:	9b04      	ldr	r3, [sp, #16]
    ae3a:	429a      	cmp	r2, r3
    ae3c:	d3e9      	bcc.n	ae12 <Adc_Ip_SetDisabledChannel+0x62>
        }
        if (ElapsedTicks >= TimeoutTicks)
    ae3e:	9a06      	ldr	r2, [sp, #24]
    ae40:	9b04      	ldr	r3, [sp, #16]
    ae42:	429a      	cmp	r2, r3
    ae44:	d301      	bcc.n	ae4a <Adc_Ip_SetDisabledChannel+0x9a>
        {
            Status = ADC_IP_STATUS_TIMEOUT;
    ae46:	2302      	movs	r3, #2
    ae48:	9307      	str	r3, [sp, #28]
        }
    }

    return Status;
    ae4a:	9b07      	ldr	r3, [sp, #28]
}
    ae4c:	4618      	mov	r0, r3
    ae4e:	b009      	add	sp, #36	; 0x24
    ae50:	f85d fb04 	ldr.w	pc, [sp], #4
    ae54:	0001a04c 	.word	0x0001a04c
    ae58:	000186a0 	.word	0x000186a0

0000ae5c <Adc_Ip_StartConversion>:
* @implements     Adc_Ip_StartConversion_Activity
* END**************************************************************************/
void Adc_Ip_StartConversion(const uint32 Instance,
                            Adc_Ip_InputChannelType InputChannel,
                            const boolean InterruptEnable)
{
    ae5c:	b500      	push	{lr}
    ae5e:	b087      	sub	sp, #28
    ae60:	9003      	str	r0, [sp, #12]
    ae62:	9102      	str	r1, [sp, #8]
    ae64:	4613      	mov	r3, r2
    ae66:	f88d 3007 	strb.w	r3, [sp, #7]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    ae6a:	4a0a      	ldr	r2, [pc, #40]	; (ae94 <Adc_Ip_StartConversion+0x38>)
    ae6c:	9b03      	ldr	r3, [sp, #12]
    ae6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae72:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18();
    ae74:	f007 f95a 	bl	1212c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>
    /* Configure SC1A register */
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, InterruptEnable);
    ae78:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ae7c:	9a02      	ldr	r2, [sp, #8]
    ae7e:	2100      	movs	r1, #0
    ae80:	9805      	ldr	r0, [sp, #20]
    ae82:	f7ff fc50 	bl	a726 <Adc_HwAcc_SetChannel>
#else
    Adc_HwAcc_SetChannel(Base, 0u, InputChannel, FALSE);
    (void)InterruptEnable;
#endif /* (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON) */
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18();
    ae86:	f007 f97d 	bl	12184 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>
}
    ae8a:	bf00      	nop
    ae8c:	b007      	add	sp, #28
    ae8e:	f85d fb04 	ldr.w	pc, [sp], #4
    ae92:	bf00      	nop
    ae94:	0001a04c 	.word	0x0001a04c

0000ae98 <Adc_Ip_GetConvActiveFlag>:
* Description   : Reads and return conversion active flag status.
*
* @implements     Adc_Ip_GetConvActiveFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvActiveFlag(const uint32 Instance)
{
    ae98:	b084      	sub	sp, #16
    ae9a:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    ae9c:	4a0b      	ldr	r2, [pc, #44]	; (aecc <Adc_Ip_GetConvActiveFlag+0x34>)
    ae9e:	9b01      	ldr	r3, [sp, #4]
    aea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aea4:	9303      	str	r3, [sp, #12]
    uint32 Sc2Reg = Base->SC2;
    aea6:	9b03      	ldr	r3, [sp, #12]
    aea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    aeac:	9302      	str	r3, [sp, #8]

    Sc2Reg = (Sc2Reg & ADC_SC2_ADACT_MASK) >> ADC_SC2_ADACT_SHIFT;
    aeae:	9b02      	ldr	r3, [sp, #8]
    aeb0:	09db      	lsrs	r3, r3, #7
    aeb2:	f003 0301 	and.w	r3, r3, #1
    aeb6:	9302      	str	r3, [sp, #8]

    return (Sc2Reg != 0u) ? TRUE : FALSE;
    aeb8:	9b02      	ldr	r3, [sp, #8]
    aeba:	2b00      	cmp	r3, #0
    aebc:	bf14      	ite	ne
    aebe:	2301      	movne	r3, #1
    aec0:	2300      	moveq	r3, #0
    aec2:	b2db      	uxtb	r3, r3
}
    aec4:	4618      	mov	r0, r3
    aec6:	b004      	add	sp, #16
    aec8:	4770      	bx	lr
    aeca:	bf00      	nop
    aecc:	0001a04c 	.word	0x0001a04c

0000aed0 <Adc_Ip_GetChanInterrupt>:
*
* @implements     Adc_Ip_GetChanInterrupt_Activity
* END**************************************************************************/
boolean Adc_Ip_GetChanInterrupt(const uint32 Instance,
                                const uint8 ControlChanIdx)
{
    aed0:	b500      	push	{lr}
    aed2:	b085      	sub	sp, #20
    aed4:	9001      	str	r0, [sp, #4]
    aed6:	460b      	mov	r3, r1
    aed8:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    aedc:	4a08      	ldr	r2, [pc, #32]	; (af00 <Adc_Ip_GetChanInterrupt+0x30>)
    aede:	9b01      	ldr	r3, [sp, #4]
    aee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aee4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    aee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    aeec:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetAIEN(Sc1Reg);
    aeee:	9803      	ldr	r0, [sp, #12]
    aef0:	f7ff fc5e 	bl	a7b0 <Adc_HwAcc_GetAIEN>
    aef4:	4603      	mov	r3, r0
}
    aef6:	4618      	mov	r0, r3
    aef8:	b005      	add	sp, #20
    aefa:	f85d fb04 	ldr.w	pc, [sp], #4
    aefe:	bf00      	nop
    af00:	0001a04c 	.word	0x0001a04c

0000af04 <Adc_Ip_GetConvCompleteFlag>:
*
* @implements     Adc_Ip_GetConvCompleteFlag_Activity
* END**************************************************************************/
boolean Adc_Ip_GetConvCompleteFlag(const uint32 Instance,
                                   const uint8 ControlChanIdx)
{
    af04:	b500      	push	{lr}
    af06:	b085      	sub	sp, #20
    af08:	9001      	str	r0, [sp, #4]
    af0a:	460b      	mov	r3, r1
    af0c:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const uint32 Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    af10:	4a08      	ldr	r2, [pc, #32]	; (af34 <Adc_Ip_GetConvCompleteFlag+0x30>)
    af12:	9b01      	ldr	r3, [sp, #4]
    af14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af18:	f89d 2003 	ldrb.w	r2, [sp, #3]
    af1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    af20:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetCOCO(Sc1Reg);
    af22:	9803      	ldr	r0, [sp, #12]
    af24:	f7ff fc52 	bl	a7cc <Adc_HwAcc_GetCOCO>
    af28:	4603      	mov	r3, r0
}
    af2a:	4618      	mov	r0, r3
    af2c:	b005      	add	sp, #20
    af2e:	f85d fb04 	ldr.w	pc, [sp], #4
    af32:	bf00      	nop
    af34:	0001a04c 	.word	0x0001a04c

0000af38 <Adc_Ip_GetConvData>:
*
* @implements     Adc_Ip_GetConvData_Activity
* END**************************************************************************/
uint16 Adc_Ip_GetConvData(const uint32 Instance,
                          const uint8 ControlChanIdx)
{
    af38:	b500      	push	{lr}
    af3a:	b085      	sub	sp, #20
    af3c:	9001      	str	r0, [sp, #4]
    af3e:	460b      	mov	r3, r1
    af40:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    af44:	4a07      	ldr	r2, [pc, #28]	; (af64 <Adc_Ip_GetConvData+0x2c>)
    af46:	9b01      	ldr	r3, [sp, #4]
    af48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af4c:	9303      	str	r3, [sp, #12]

    return Adc_HwAcc_GetData(Base, ControlChanIdx);
    af4e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    af52:	4619      	mov	r1, r3
    af54:	9803      	ldr	r0, [sp, #12]
    af56:	f7ff fc47 	bl	a7e8 <Adc_HwAcc_GetData>
    af5a:	4603      	mov	r3, r0
}
    af5c:	4618      	mov	r0, r3
    af5e:	b005      	add	sp, #20
    af60:	f85d fb04 	ldr.w	pc, [sp], #4
    af64:	0001a04c 	.word	0x0001a04c

0000af68 <Adc_Ip_DoCalibration>:
* specified frequency (50Mhz) and greater than minimum specified frequency (20Mhz).
*
* @implements     Adc_Ip_DoCalibration_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_DoCalibration(const uint32 Instance)
{
    af68:	b500      	push	{lr}
    af6a:	b093      	sub	sp, #76	; 0x4c
    af6c:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    af6e:	4a59      	ldr	r2, [pc, #356]	; (b0d4 <Adc_Ip_DoCalibration+0x16c>)
    af70:	9b01      	ldr	r3, [sp, #4]
    af72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af76:	930f      	str	r3, [sp, #60]	; 0x3c
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    af78:	2300      	movs	r3, #0
    af7a:	9311      	str	r3, [sp, #68]	; 0x44
    Adc_Ip_TrigType TriggerMode;
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    af7c:	2100      	movs	r1, #0
    af7e:	4856      	ldr	r0, [pc, #344]	; (b0d8 <Adc_Ip_DoCalibration+0x170>)
    af80:	f7f7 fdd2 	bl	2b28 <OsIf_MicrosToTicks>
    af84:	900e      	str	r0, [sp, #56]	; 0x38
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    af86:	2000      	movs	r0, #0
    af88:	f7f7 fd82 	bl	2a90 <OsIf_GetCounter>
    af8c:	4603      	mov	r3, r0
    af8e:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 ElapsedTicks = 0u;
    af90:	2300      	movs	r3, #0
    af92:	9310      	str	r3, [sp, #64]	; 0x40
    uint32 Reg;
    Adc_Ip_ClockConfigType PreClockConfig;
    Adc_Ip_ClockConfigType CalClockConfig;

    /* Store settings before calibration */
    Reg = Base->SC3;
    af94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    af96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    af9a:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.AvgEn = ((Reg & ADC_SC3_AVGE_MASK) != 0u) ? TRUE : FALSE;
    af9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    af9e:	089b      	lsrs	r3, r3, #2
    afa0:	f003 0301 	and.w	r3, r3, #1
    afa4:	2b00      	cmp	r3, #0
    afa6:	bf14      	ite	ne
    afa8:	2301      	movne	r3, #1
    afaa:	2300      	moveq	r3, #0
    afac:	b2db      	uxtb	r3, r3
    afae:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    PreClockConfig.AvgSel = Adc_HwAcc_GetAverageSelect(Reg);
    afb2:	980d      	ldr	r0, [sp, #52]	; 0x34
    afb4:	f7ff fb71 	bl	a69a <Adc_HwAcc_GetAverageSelect>
    afb8:	4603      	mov	r3, r0
    afba:	930a      	str	r3, [sp, #40]	; 0x28

    Reg = Base->CFG2;
    afbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    afbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    afc0:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.SampleTime = (uint8) ((Reg & ADC_CFG2_SMPLTS_MASK) >> ADC_CFG2_SMPLTS_SHIFT);
    afc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    afc4:	b2db      	uxtb	r3, r3
    afc6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    TriggerMode = Adc_HwAcc_GetTriggerMode(Base->SC2);
    afca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    afcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    afd0:	4618      	mov	r0, r3
    afd2:	f7ff fb99 	bl	a708 <Adc_HwAcc_GetTriggerMode>
    afd6:	900c      	str	r0, [sp, #48]	; 0x30

    Reg = Base->CFG1;
    afd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    afda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    afdc:	930d      	str	r3, [sp, #52]	; 0x34
    PreClockConfig.ClockDivide = Adc_HwAcc_GetClockDivide(Reg);
    afde:	980d      	ldr	r0, [sp, #52]	; 0x34
    afe0:	f7ff fad8 	bl	a594 <Adc_HwAcc_GetClockDivide>
    afe4:	4603      	mov	r3, r0
    afe6:	9307      	str	r3, [sp, #28]
    PreClockConfig.InputClock = Adc_HwAcc_GetInputClock(Reg);
    afe8:	980d      	ldr	r0, [sp, #52]	; 0x34
    afea:	f7ff faf2 	bl	a5d2 <Adc_HwAcc_GetInputClock>
    afee:	4603      	mov	r3, r0
    aff0:	9308      	str	r3, [sp, #32]

    CalClockConfig.AvgEn = TRUE;
    aff2:	2301      	movs	r3, #1
    aff4:	f88d 3015 	strb.w	r3, [sp, #21]
    CalClockConfig.AvgSel = ADC_IP_AVG_32_CONV;
    aff8:	2303      	movs	r3, #3
    affa:	9306      	str	r3, [sp, #24]
    CalClockConfig.SampleTime = ADC_IP_DEFAULT_SAMPLE_TIME;
    affc:	230c      	movs	r3, #12
    affe:	f88d 3014 	strb.w	r3, [sp, #20]
    CalClockConfig.ClockDivide = Adc_Ip_axState[Instance].CalibrationClockDivide;
    b002:	4a36      	ldr	r2, [pc, #216]	; (b0dc <Adc_Ip_DoCalibration+0x174>)
    b004:	9b01      	ldr	r3, [sp, #4]
    b006:	214c      	movs	r1, #76	; 0x4c
    b008:	fb01 f303 	mul.w	r3, r1, r3
    b00c:	4413      	add	r3, r2
    b00e:	3304      	adds	r3, #4
    b010:	681b      	ldr	r3, [r3, #0]
    b012:	9303      	str	r3, [sp, #12]
    CalClockConfig.InputClock = PreClockConfig.InputClock;
    b014:	9b08      	ldr	r3, [sp, #32]
    b016:	9304      	str	r3, [sp, #16]

    /* Prepare required settings for calibration. */
    ADC_DoCalibration_SetParams(Base, &CalClockConfig, ADC_IP_TRIGGER_SOFTWARE);
    b018:	ab03      	add	r3, sp, #12
    b01a:	2200      	movs	r2, #0
    b01c:	4619      	mov	r1, r3
    b01e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    b020:	f7ff fbfa 	bl	a818 <ADC_DoCalibration_SetParams>

    Base->CLPS = 0u;
    b024:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b026:	2200      	movs	r2, #0
    b028:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    Base->CLP3 = 0u;
    b02c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b02e:	2200      	movs	r2, #0
    b030:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    Base->CLP2 = 0u;
    b034:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b036:	2200      	movs	r2, #0
    b038:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    Base->CLP1 = 0u;
    b03c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b03e:	2200      	movs	r2, #0
    b040:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    Base->CLP0 = 0u;
    b044:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b046:	2200      	movs	r2, #0
    b048:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    Base->CLPX = 0u;
    b04c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b04e:	2200      	movs	r2, #0
    b050:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    Base->CLP9 = 0u;
    b054:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b056:	2200      	movs	r2, #0
    b058:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Start calibration by writing to the calibration field */
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29();
    b05c:	f007 fbec 	bl	12838 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>
    Reg = Base->SC3;
    b060:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b062:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    b066:	930d      	str	r3, [sp, #52]	; 0x34
    Reg &= ~(ADC_SC3_CAL_MASK);
    b068:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b06a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    b06e:	930d      	str	r3, [sp, #52]	; 0x34
    Reg |= ADC_SC3_CAL(1u);
    b070:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b076:	930d      	str	r3, [sp, #52]	; 0x34
    Base->SC3 = Reg;
    b078:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b07a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    b07c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29();
    b080:	f007 fc06 	bl	12890 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>

    /* Wait for the calibration to finish */
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    b084:	e008      	b.n	b098 <Adc_Ip_DoCalibration+0x130>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    b086:	ab0b      	add	r3, sp, #44	; 0x2c
    b088:	2100      	movs	r1, #0
    b08a:	4618      	mov	r0, r3
    b08c:	f7f7 fd19 	bl	2ac2 <OsIf_GetElapsed>
    b090:	4602      	mov	r2, r0
    b092:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b094:	4413      	add	r3, r2
    b096:	9310      	str	r3, [sp, #64]	; 0x40
    while (((Base->SC3 & ADC_SC3_CAL_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    b098:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b09a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    b09e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    b0a2:	2b00      	cmp	r3, #0
    b0a4:	d003      	beq.n	b0ae <Adc_Ip_DoCalibration+0x146>
    b0a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b0a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b0aa:	429a      	cmp	r2, r3
    b0ac:	d3eb      	bcc.n	b086 <Adc_Ip_DoCalibration+0x11e>
    }
    if (ElapsedTicks >= TimeoutTicks)
    b0ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b0b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b0b2:	429a      	cmp	r2, r3
    b0b4:	d301      	bcc.n	b0ba <Adc_Ip_DoCalibration+0x152>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    b0b6:	2302      	movs	r3, #2
    b0b8:	9311      	str	r3, [sp, #68]	; 0x44
    }

    /* Revert settings as same as before calibration. */
    ADC_DoCalibration_SetParams(Base, &PreClockConfig, TriggerMode);
    b0ba:	ab07      	add	r3, sp, #28
    b0bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b0be:	4619      	mov	r1, r3
    b0c0:	980f      	ldr	r0, [sp, #60]	; 0x3c
    b0c2:	f7ff fba9 	bl	a818 <ADC_DoCalibration_SetParams>

    /* Clear COCO flag */
    (void) R(Base, 0u);
    b0c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b0c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return Status;
    b0ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
}
    b0cc:	4618      	mov	r0, r3
    b0ce:	b013      	add	sp, #76	; 0x4c
    b0d0:	f85d fb04 	ldr.w	pc, [sp], #4
    b0d4:	0001a04c 	.word	0x0001a04c
    b0d8:	000186a0 	.word	0x000186a0
    b0dc:	1fff8d80 	.word	0x1fff8d80

0000b0e0 <Adc_Ip_ClearLatchedTriggers>:
* has been deactivated.
*
* @implements     Adc_Ip_ClearLatchedTriggers_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_ClearLatchedTriggers(const uint32 Instance)
{
    b0e0:	b500      	push	{lr}
    b0e2:	b089      	sub	sp, #36	; 0x24
    b0e4:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    b0e6:	4a1e      	ldr	r2, [pc, #120]	; (b160 <Adc_Ip_ClearLatchedTriggers+0x80>)
    b0e8:	9b01      	ldr	r3, [sp, #4]
    b0ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0ee:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    b0f0:	2300      	movs	r3, #0
    b0f2:	9307      	str	r3, [sp, #28]
    uint32 TimeoutTicks = OsIf_MicrosToTicks(ADC_IP_TIMEOUT_VAL, ADC_IP_TIMEOUT_TYPE);
    b0f4:	2100      	movs	r1, #0
    b0f6:	481b      	ldr	r0, [pc, #108]	; (b164 <Adc_Ip_ClearLatchedTriggers+0x84>)
    b0f8:	f7f7 fd16 	bl	2b28 <OsIf_MicrosToTicks>
    b0fc:	9004      	str	r0, [sp, #16]
    uint32 CurrentTicks = OsIf_GetCounter(ADC_IP_TIMEOUT_TYPE);
    b0fe:	2000      	movs	r0, #0
    b100:	f7f7 fcc6 	bl	2a90 <OsIf_GetCounter>
    b104:	4603      	mov	r3, r0
    b106:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTicks = 0u;
    b108:	2300      	movs	r3, #0
    b10a:	9306      	str	r3, [sp, #24]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12();
    b10c:	f006 fe22 	bl	11d54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>
    /* Write bit to clear latched triggers */
    Base->CFG1 |= ADC_CFG1_CLRLTRG(0x01u);
    b110:	9b05      	ldr	r3, [sp, #20]
    b112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b114:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    b118:	9b05      	ldr	r3, [sp, #20]
    b11a:	641a      	str	r2, [r3, #64]	; 0x40
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12();
    b11c:	f006 fe46 	bl	11dac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>

    /* Wait for latched triggers to be cleared */
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    b120:	e008      	b.n	b134 <Adc_Ip_ClearLatchedTriggers+0x54>
    {
        ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, ADC_IP_TIMEOUT_TYPE);
    b122:	ab03      	add	r3, sp, #12
    b124:	2100      	movs	r1, #0
    b126:	4618      	mov	r0, r3
    b128:	f7f7 fccb 	bl	2ac2 <OsIf_GetElapsed>
    b12c:	4602      	mov	r2, r0
    b12e:	9b06      	ldr	r3, [sp, #24]
    b130:	4413      	add	r3, r2
    b132:	9306      	str	r3, [sp, #24]
    while (((Base->SC2 & ADC_SC2_TRGSTLAT_MASK) != 0u) && (ElapsedTicks < TimeoutTicks))
    b134:	9b05      	ldr	r3, [sp, #20]
    b136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    b13a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    b13e:	2b00      	cmp	r3, #0
    b140:	d003      	beq.n	b14a <Adc_Ip_ClearLatchedTriggers+0x6a>
    b142:	9a06      	ldr	r2, [sp, #24]
    b144:	9b04      	ldr	r3, [sp, #16]
    b146:	429a      	cmp	r2, r3
    b148:	d3eb      	bcc.n	b122 <Adc_Ip_ClearLatchedTriggers+0x42>
    }
    if (ElapsedTicks >= TimeoutTicks)
    b14a:	9a06      	ldr	r2, [sp, #24]
    b14c:	9b04      	ldr	r3, [sp, #16]
    b14e:	429a      	cmp	r2, r3
    b150:	d301      	bcc.n	b156 <Adc_Ip_ClearLatchedTriggers+0x76>
    {
        Status = ADC_IP_STATUS_TIMEOUT;
    b152:	2302      	movs	r3, #2
    b154:	9307      	str	r3, [sp, #28]
    }

    return Status;
    b156:	9b07      	ldr	r3, [sp, #28]
}
    b158:	4618      	mov	r0, r3
    b15a:	b009      	add	sp, #36	; 0x24
    b15c:	f85d fb04 	ldr.w	pc, [sp], #4
    b160:	0001a04c 	.word	0x0001a04c
    b164:	000186a0 	.word	0x000186a0

0000b168 <Adc_Ip_EnableChannelNotification>:
*
* @implements     Adc_Ip_EnableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_EnableChannelNotification(const uint32 Instance,
                                      const uint8 ControlChanIdx)
{
    b168:	b500      	push	{lr}
    b16a:	b085      	sub	sp, #20
    b16c:	9001      	str	r0, [sp, #4]
    b16e:	460b      	mov	r3, r1
    b170:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    b174:	4a0c      	ldr	r2, [pc, #48]	; (b1a8 <Adc_Ip_EnableChannelNotification+0x40>)
    b176:	9b01      	ldr	r3, [sp, #4]
    b178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b17c:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19();
    b17e:	f007 f827 	bl	121d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>
    SC1(Base, ControlChanIdx) |= ADC_SC1_AIEN_MASK;
    b182:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b186:	9b03      	ldr	r3, [sp, #12]
    b188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b18c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b190:	f043 0140 	orr.w	r1, r3, #64	; 0x40
    b194:	9b03      	ldr	r3, [sp, #12]
    b196:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19();
    b19a:	f007 f845 	bl	12228 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>
}
    b19e:	bf00      	nop
    b1a0:	b005      	add	sp, #20
    b1a2:	f85d fb04 	ldr.w	pc, [sp], #4
    b1a6:	bf00      	nop
    b1a8:	0001a04c 	.word	0x0001a04c

0000b1ac <Adc_Ip_DisableChannelNotification>:
*
* @implements     Adc_Ip_DisableChannelNotification_Activity
* END**************************************************************************/
void Adc_Ip_DisableChannelNotification(const uint32 Instance,
                                       const uint8 ControlChanIdx)
{
    b1ac:	b500      	push	{lr}
    b1ae:	b085      	sub	sp, #20
    b1b0:	9001      	str	r0, [sp, #4]
    b1b2:	460b      	mov	r3, r1
    b1b4:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(ControlChanIdx < ADC_MAX_CHAN_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    b1b8:	4a0c      	ldr	r2, [pc, #48]	; (b1ec <Adc_Ip_DisableChannelNotification+0x40>)
    b1ba:	9b01      	ldr	r3, [sp, #4]
    b1bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1c0:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20();
    b1c2:	f007 f857 	bl	12274 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>
    SC1(Base, ControlChanIdx) &= ~(ADC_SC1_AIEN_MASK);
    b1c6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b1ca:	9b03      	ldr	r3, [sp, #12]
    b1cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b1d0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b1d4:	f023 0140 	bic.w	r1, r3, #64	; 0x40
    b1d8:	9b03      	ldr	r3, [sp, #12]
    b1da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20();
    b1de:	f007 f875 	bl	122cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>
}
    b1e2:	bf00      	nop
    b1e4:	b005      	add	sp, #20
    b1e6:	f85d fb04 	ldr.w	pc, [sp], #4
    b1ea:	bf00      	nop
    b1ec:	0001a04c 	.word	0x0001a04c

0000b1f0 <Adc_Ip_ClearTrigErrReg>:
* Description   : This function clears all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_ClearTrigErrReg_Activity
* END**************************************************************************/
void Adc_Ip_ClearTrigErrReg(const uint32 Instance)
{
    b1f0:	b500      	push	{lr}
    b1f2:	b085      	sub	sp, #20
    b1f4:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    b1f6:	4a0a      	ldr	r2, [pc, #40]	; (b220 <Adc_Ip_ClearTrigErrReg+0x30>)
    b1f8:	9b01      	ldr	r3, [sp, #4]
    b1fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1fe:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25();
    b200:	f007 f9d2 	bl	125a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>
    Base->SC2 |= ADC_SC2_TRGSTERR_MASK;
    b204:	9b03      	ldr	r3, [sp, #12]
    b206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    b20a:	f043 6270 	orr.w	r2, r3, #251658240	; 0xf000000
    b20e:	9b03      	ldr	r3, [sp, #12]
    b210:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25();
    b214:	f007 f9f4 	bl	12600 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>
}
    b218:	bf00      	nop
    b21a:	b005      	add	sp, #20
    b21c:	f85d fb04 	ldr.w	pc, [sp], #4
    b220:	0001a04c 	.word	0x0001a04c

0000b224 <Adc_Ip_GetTrigErrReg>:
* Description   : This function returns all trigger error flags of the ADC instance.
*
* @implements     Adc_Ip_GetTrigErrReg_Activity
* END**************************************************************************/
uint32 Adc_Ip_GetTrigErrReg(const uint32 Instance)
{
    b224:	b084      	sub	sp, #16
    b226:	9001      	str	r0, [sp, #4]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
    DevAssert(Instance != 0u);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    b228:	4a06      	ldr	r2, [pc, #24]	; (b244 <Adc_Ip_GetTrigErrReg+0x20>)
    b22a:	9b01      	ldr	r3, [sp, #4]
    b22c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b230:	9303      	str	r3, [sp, #12]

    return (Base->SC2 & ADC_SC2_TRGSTERR_MASK) >> ADC_SC2_TRGSTERR_SHIFT;
    b232:	9b03      	ldr	r3, [sp, #12]
    b234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    b238:	0e1b      	lsrs	r3, r3, #24
    b23a:	f003 030f 	and.w	r3, r3, #15
}
    b23e:	4618      	mov	r0, r3
    b240:	b004      	add	sp, #16
    b242:	4770      	bx	lr
    b244:	0001a04c 	.word	0x0001a04c

0000b248 <Adc_Ip_GetDataAddress>:
 *
 * @implements     Adc_Ip_GetDataAddress_Activity
 *END*************************************************************************/
uint32 Adc_Ip_GetDataAddress(const uint32 Instance,
                             const uint8 Index)
{
    b248:	b082      	sub	sp, #8
    b24a:	9001      	str	r0, [sp, #4]
    b24c:	460b      	mov	r3, r1
    b24e:	f88d 3003 	strb.w	r3, [sp, #3]
#if (ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < ADC_INSTANCE_COUNT);
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    return (uint32)&(R(Adc_Ip_apxBase[Instance], Index));
    b252:	4a06      	ldr	r2, [pc, #24]	; (b26c <Adc_Ip_GetDataAddress+0x24>)
    b254:	9b01      	ldr	r3, [sp, #4]
    b256:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    b25a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b25e:	3312      	adds	r3, #18
    b260:	009b      	lsls	r3, r3, #2
    b262:	4413      	add	r3, r2
}
    b264:	4618      	mov	r0, r3
    b266:	b002      	add	sp, #8
    b268:	4770      	bx	lr
    b26a:	bf00      	nop
    b26c:	0001a04c 	.word	0x0001a04c

0000b270 <Adc_Ip_GetChanData>:
* @implements     Adc_Ip_GetChanData_Activity
* END**************************************************************************/
Adc_Ip_StatusType Adc_Ip_GetChanData(const uint32 Instance,
                                     const Adc_Ip_InputChannelType Channel,
                                     uint16 * const Result)
{
    b270:	b088      	sub	sp, #32
    b272:	9003      	str	r0, [sp, #12]
    b274:	9102      	str	r1, [sp, #8]
    b276:	9201      	str	r2, [sp, #4]
#if (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON)
    DevAssert((Instance == 0u) || ((uint32)Channel < (uint32)ADC_IP_INPUTCHAN_SUPPLY_VDD));
#endif /* (ADC_IP_SUPPLY_MONITORING_ENABLED == STD_ON) */
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const ADC_Type * const Base = Adc_Ip_apxBase[Instance];
    b278:	4a25      	ldr	r2, [pc, #148]	; (b310 <Adc_Ip_GetChanData+0xa0>)
    b27a:	9b03      	ldr	r3, [sp, #12]
    b27c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b280:	9305      	str	r3, [sp, #20]
    Adc_Ip_StatusType Status = ADC_IP_STATUS_SUCCESS;
    b282:	2300      	movs	r3, #0
    b284:	9307      	str	r3, [sp, #28]
    uint16 Temp = 0u;
    b286:	2300      	movs	r3, #0
    b288:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint8 ControlChanIdx;
    boolean Found = FALSE;
    b28c:	2300      	movs	r3, #0
    b28e:	f88d 3018 	strb.w	r3, [sp, #24]

    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    b292:	2300      	movs	r3, #0
    b294:	f88d 3019 	strb.w	r3, [sp, #25]
    b298:	e019      	b.n	b2ce <Adc_Ip_GetChanData+0x5e>
    {
        if (Adc_Ip_axState[Instance].ChannelConfig[ControlChanIdx] == Channel)
    b29a:	f89d 1019 	ldrb.w	r1, [sp, #25]
    b29e:	481d      	ldr	r0, [pc, #116]	; (b314 <Adc_Ip_GetChanData+0xa4>)
    b2a0:	9a03      	ldr	r2, [sp, #12]
    b2a2:	4613      	mov	r3, r2
    b2a4:	00db      	lsls	r3, r3, #3
    b2a6:	4413      	add	r3, r2
    b2a8:	005b      	lsls	r3, r3, #1
    b2aa:	4413      	add	r3, r2
    b2ac:	440b      	add	r3, r1
    b2ae:	3302      	adds	r3, #2
    b2b0:	009b      	lsls	r3, r3, #2
    b2b2:	4403      	add	r3, r0
    b2b4:	685b      	ldr	r3, [r3, #4]
    b2b6:	9a02      	ldr	r2, [sp, #8]
    b2b8:	429a      	cmp	r2, r3
    b2ba:	d103      	bne.n	b2c4 <Adc_Ip_GetChanData+0x54>
        {
            Found = TRUE;
    b2bc:	2301      	movs	r3, #1
    b2be:	f88d 3018 	strb.w	r3, [sp, #24]
            break;
    b2c2:	e008      	b.n	b2d6 <Adc_Ip_GetChanData+0x66>
    for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    b2c4:	f89d 3019 	ldrb.w	r3, [sp, #25]
    b2c8:	3301      	adds	r3, #1
    b2ca:	f88d 3019 	strb.w	r3, [sp, #25]
    b2ce:	f89d 3019 	ldrb.w	r3, [sp, #25]
    b2d2:	2b0f      	cmp	r3, #15
    b2d4:	d9e1      	bls.n	b29a <Adc_Ip_GetChanData+0x2a>
        }
    }

    if (Found == TRUE)
    b2d6:	f89d 3018 	ldrb.w	r3, [sp, #24]
    b2da:	2b00      	cmp	r3, #0
    b2dc:	d00e      	beq.n	b2fc <Adc_Ip_GetChanData+0x8c>
    {
        Temp = (uint16) R(Base, ControlChanIdx);
    b2de:	f89d 2019 	ldrb.w	r2, [sp, #25]
    b2e2:	9b05      	ldr	r3, [sp, #20]
    b2e4:	3212      	adds	r2, #18
    b2e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b2ea:	f8ad 301a 	strh.w	r3, [sp, #26]
        Temp = (uint16) ((Temp & ADC_R_D_MASK) >> ADC_R_D_SHIFT);
    b2ee:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    b2f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    b2f6:	f8ad 301a 	strh.w	r3, [sp, #26]
    b2fa:	e001      	b.n	b300 <Adc_Ip_GetChanData+0x90>
    }
    else
    {
        Status = ADC_IP_STATUS_ERROR;
    b2fc:	2301      	movs	r3, #1
    b2fe:	9307      	str	r3, [sp, #28]
    }

    *Result = Temp;
    b300:	9b01      	ldr	r3, [sp, #4]
    b302:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    b306:	801a      	strh	r2, [r3, #0]

    return Status;
    b308:	9b07      	ldr	r3, [sp, #28]
}
    b30a:	4618      	mov	r0, r3
    b30c:	b008      	add	sp, #32
    b30e:	4770      	bx	lr
    b310:	0001a04c 	.word	0x0001a04c
    b314:	1fff8d80 	.word	0x1fff8d80

0000b318 <Adc_Ip_IRQHandler>:
 * Note          : It's required to read result data in user notification in order to clear the COCO flags and avoid ISR getting invoked repeatedly
 *
 * @implements     Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Adc_Ip_IRQHandler(const uint32 Instance)
{
    b318:	b500      	push	{lr}
    b31a:	b085      	sub	sp, #20
    b31c:	9001      	str	r0, [sp, #4]
#endif /* (ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    uint8 ControlChanIdx;
#if (ADC_IP_AIEN_INTERRUPT_ENABLE == STD_ON)
    uint32 Sc1Reg;
    boolean ChanIntFlag = FALSE;
    b31e:	2300      	movs	r3, #0
    b320:	f88d 300e 	strb.w	r3, [sp, #14]
    boolean ChanCocoFlag = FALSE;
    b324:	2300      	movs	r3, #0
    b326:	f88d 300d 	strb.w	r3, [sp, #13]

    /* Check whether the respective driver is initialized */
    if (TRUE == Adc_Ip_axState[Instance].Init)
    b32a:	4a32      	ldr	r2, [pc, #200]	; (b3f4 <Adc_Ip_IRQHandler+0xdc>)
    b32c:	9b01      	ldr	r3, [sp, #4]
    b32e:	214c      	movs	r1, #76	; 0x4c
    b330:	fb01 f303 	mul.w	r3, r1, r3
    b334:	4413      	add	r3, r2
    b336:	781b      	ldrb	r3, [r3, #0]
    b338:	2b00      	cmp	r3, #0
    b33a:	d040      	beq.n	b3be <Adc_Ip_IRQHandler+0xa6>
    {
        /* Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop) */
        if (Adc_Ip_axState[Instance].ConversionCompleteNotification != NULL_PTR)
    b33c:	4a2d      	ldr	r2, [pc, #180]	; (b3f4 <Adc_Ip_IRQHandler+0xdc>)
    b33e:	9b01      	ldr	r3, [sp, #4]
    b340:	214c      	movs	r1, #76	; 0x4c
    b342:	fb01 f303 	mul.w	r3, r1, r3
    b346:	4413      	add	r3, r2
    b348:	3308      	adds	r3, #8
    b34a:	681b      	ldr	r3, [r3, #0]
    b34c:	2b00      	cmp	r3, #0
    b34e:	d04d      	beq.n	b3ec <Adc_Ip_IRQHandler+0xd4>
        {
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    b350:	2300      	movs	r3, #0
    b352:	f88d 300f 	strb.w	r3, [sp, #15]
    b356:	e02d      	b.n	b3b4 <Adc_Ip_IRQHandler+0x9c>
            {
                Sc1Reg = SC1(Adc_Ip_apxBase[Instance], ControlChanIdx);
    b358:	4a27      	ldr	r2, [pc, #156]	; (b3f8 <Adc_Ip_IRQHandler+0xe0>)
    b35a:	9b01      	ldr	r3, [sp, #4]
    b35c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b360:	f89d 200f 	ldrb.w	r2, [sp, #15]
    b364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b368:	9302      	str	r3, [sp, #8]
                ChanIntFlag = Adc_HwAcc_GetAIEN(Sc1Reg);
    b36a:	9802      	ldr	r0, [sp, #8]
    b36c:	f7ff fa20 	bl	a7b0 <Adc_HwAcc_GetAIEN>
    b370:	4603      	mov	r3, r0
    b372:	f88d 300e 	strb.w	r3, [sp, #14]
                ChanCocoFlag = Adc_HwAcc_GetCOCO(Sc1Reg);
    b376:	9802      	ldr	r0, [sp, #8]
    b378:	f7ff fa28 	bl	a7cc <Adc_HwAcc_GetCOCO>
    b37c:	4603      	mov	r3, r0
    b37e:	f88d 300d 	strb.w	r3, [sp, #13]
                /* CPR_RTD_00664
                 * Check if the interrupt not spurious (the interrupt is enabled and equivalent conversion has finished)
                 * Ignore spurious ones (return immediately from ISR)
                 */
                if ((TRUE == ChanIntFlag) && (TRUE == ChanCocoFlag))
    b382:	f89d 300e 	ldrb.w	r3, [sp, #14]
    b386:	2b00      	cmp	r3, #0
    b388:	d00f      	beq.n	b3aa <Adc_Ip_IRQHandler+0x92>
    b38a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    b38e:	2b00      	cmp	r3, #0
    b390:	d00b      	beq.n	b3aa <Adc_Ip_IRQHandler+0x92>
                {
                    /* Call the associated callback.
                     * The COCO flag will be cleared by reading the respective result data register in the callback
                     */
                    Adc_Ip_axState[Instance].ConversionCompleteNotification(ControlChanIdx);
    b392:	4a18      	ldr	r2, [pc, #96]	; (b3f4 <Adc_Ip_IRQHandler+0xdc>)
    b394:	9b01      	ldr	r3, [sp, #4]
    b396:	214c      	movs	r1, #76	; 0x4c
    b398:	fb01 f303 	mul.w	r3, r1, r3
    b39c:	4413      	add	r3, r2
    b39e:	3308      	adds	r3, #8
    b3a0:	681b      	ldr	r3, [r3, #0]
    b3a2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    b3a6:	4610      	mov	r0, r2
    b3a8:	4798      	blx	r3
            for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    b3aa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b3ae:	3301      	adds	r3, #1
    b3b0:	f88d 300f 	strb.w	r3, [sp, #15]
    b3b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b3b8:	2b0f      	cmp	r3, #15
    b3ba:	d9cd      	bls.n	b358 <Adc_Ip_IRQHandler+0x40>
        {
            /* Do a dummy read to clear the COCO flags */
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
        }
    }
}
    b3bc:	e016      	b.n	b3ec <Adc_Ip_IRQHandler+0xd4>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    b3be:	2300      	movs	r3, #0
    b3c0:	f88d 300f 	strb.w	r3, [sp, #15]
    b3c4:	e00e      	b.n	b3e4 <Adc_Ip_IRQHandler+0xcc>
            (void)Adc_HwAcc_GetData(Adc_Ip_apxBase[Instance], ControlChanIdx);
    b3c6:	4a0c      	ldr	r2, [pc, #48]	; (b3f8 <Adc_Ip_IRQHandler+0xe0>)
    b3c8:	9b01      	ldr	r3, [sp, #4]
    b3ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3ce:	f89d 200f 	ldrb.w	r2, [sp, #15]
    b3d2:	4611      	mov	r1, r2
    b3d4:	4618      	mov	r0, r3
    b3d6:	f7ff fa07 	bl	a7e8 <Adc_HwAcc_GetData>
        for (ControlChanIdx = 0u; ControlChanIdx < ADC_MAX_CHAN_COUNT; ControlChanIdx++)
    b3da:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b3de:	3301      	adds	r3, #1
    b3e0:	f88d 300f 	strb.w	r3, [sp, #15]
    b3e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b3e8:	2b0f      	cmp	r3, #15
    b3ea:	d9ec      	bls.n	b3c6 <Adc_Ip_IRQHandler+0xae>
}
    b3ec:	bf00      	nop
    b3ee:	b005      	add	sp, #20
    b3f0:	f85d fb04 	ldr.w	pc, [sp], #4
    b3f4:	1fff8d80 	.word	0x1fff8d80
    b3f8:	0001a04c 	.word	0x0001a04c

0000b3fc <Adc_0_Isr>:
==================================================================================================*/
#define ADC_START_SEC_CODE
#include "Adc_MemMap.h"

ISR(Adc_0_Isr)
{
    b3fc:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(0UL);
    b3fe:	2000      	movs	r0, #0
    b400:	f7ff ff8a 	bl	b318 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    b404:	f3bf 8f4f 	dsb	sy
}
    b408:	bf00      	nop
    b40a:	bd08      	pop	{r3, pc}

0000b40c <Adc_1_Isr>:

#if (ADC_INSTANCE_COUNT > 1)
ISR(Adc_1_Isr)
{
    b40c:	b508      	push	{r3, lr}
    /* Call IRQ handler with the correct instance */
    Adc_Ip_IRQHandler(1UL);
    b40e:	2001      	movs	r0, #1
    b410:	f7ff ff82 	bl	b318 <Adc_Ip_IRQHandler>

    EXIT_INTERRUPT();
    b414:	f3bf 8f4f 	dsb	sy
}
    b418:	bf00      	nop
    b41a:	bd08      	pop	{r3, pc}

0000b41c <Adc_Ipw_RemoveFromQueue>:
*
* @pre This function must be called from a critical region. It is not protecting itself against interruptions.
*/
void Adc_Ipw_RemoveFromQueue(const Adc_HwUnitType Unit,
                             const Adc_QueueIndexType CurQueueIndex)
{
    b41c:	b510      	push	{r4, lr}
    b41e:	b084      	sub	sp, #16
    b420:	4603      	mov	r3, r0
    b422:	460a      	mov	r2, r1
    b424:	f88d 3007 	strb.w	r3, [sp, #7]
    b428:	4613      	mov	r3, r2
    b42a:	f8ad 3004 	strh.w	r3, [sp, #4]
    Adc_QueueIndexType PositionIndex = 0U;
    b42e:	2300      	movs	r3, #0
    b430:	f8ad 300e 	strh.w	r3, [sp, #14]
    Adc_QueueIndexType CurrentIndex = 0U;
    b434:	2300      	movs	r3, #0
    b436:	f8ad 300c 	strh.w	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00();
    b43a:	f006 f8b3 	bl	115a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>
    CurrentIndex = Adc_axUnitStatus[Unit].SwNormalQueueIndex;
    b43e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b442:	4a24      	ldr	r2, [pc, #144]	; (b4d4 <Adc_Ipw_RemoveFromQueue+0xb8>)
    b444:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    b448:	f8ad 300c 	strh.w	r3, [sp, #12]
    if ((Adc_QueueIndexType)1U >= CurrentIndex)
    b44c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    b450:	2b01      	cmp	r3, #1
    b452:	d806      	bhi.n	b462 <Adc_Ipw_RemoveFromQueue+0x46>
    {
        /* Zero or one element present in the queue */
        Adc_axUnitStatus[Unit].SwNormalQueueIndex = 0U;
    b454:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b458:	4a1e      	ldr	r2, [pc, #120]	; (b4d4 <Adc_Ipw_RemoveFromQueue+0xb8>)
    b45a:	2100      	movs	r1, #0
    b45c:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
    b460:	e032      	b.n	b4c8 <Adc_Ipw_RemoveFromQueue+0xac>
    }
    else
    {
        /* More than one element in the queue */
        /* Move all elements after the one to remove (from CurQueueIndex position) one place to the left */
        for (PositionIndex = (CurQueueIndex + 1U); PositionIndex < CurrentIndex; PositionIndex++)
    b462:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    b466:	3301      	adds	r3, #1
    b468:	f8ad 300e 	strh.w	r3, [sp, #14]
    b46c:	e01b      	b.n	b4a6 <Adc_Ipw_RemoveFromQueue+0x8a>
        {
            Adc_axUnitStatus[Unit].SwNormalQueue[PositionIndex - 1U] = (Adc_GroupType)Adc_axUnitStatus[Unit].SwNormalQueue[PositionIndex];
    b46e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    b472:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    b476:	f89d 1007 	ldrb.w	r1, [sp, #7]
    b47a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    b47e:	3a01      	subs	r2, #1
    b480:	4c14      	ldr	r4, [pc, #80]	; (b4d4 <Adc_Ipw_RemoveFromQueue+0xb8>)
    b482:	0080      	lsls	r0, r0, #2
    b484:	4403      	add	r3, r0
    b486:	005b      	lsls	r3, r3, #1
    b488:	4423      	add	r3, r4
    b48a:	885b      	ldrh	r3, [r3, #2]
    b48c:	b29c      	uxth	r4, r3
    b48e:	4811      	ldr	r0, [pc, #68]	; (b4d4 <Adc_Ipw_RemoveFromQueue+0xb8>)
    b490:	008b      	lsls	r3, r1, #2
    b492:	4413      	add	r3, r2
    b494:	005b      	lsls	r3, r3, #1
    b496:	4403      	add	r3, r0
    b498:	4622      	mov	r2, r4
    b49a:	805a      	strh	r2, [r3, #2]
        for (PositionIndex = (CurQueueIndex + 1U); PositionIndex < CurrentIndex; PositionIndex++)
    b49c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    b4a0:	3301      	adds	r3, #1
    b4a2:	f8ad 300e 	strh.w	r3, [sp, #14]
    b4a6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    b4aa:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    b4ae:	429a      	cmp	r2, r3
    b4b0:	d3dd      	bcc.n	b46e <Adc_Ipw_RemoveFromQueue+0x52>
        }
        Adc_axUnitStatus[Unit].SwNormalQueueIndex--;
    b4b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b4b6:	4a07      	ldr	r2, [pc, #28]	; (b4d4 <Adc_Ipw_RemoveFromQueue+0xb8>)
    b4b8:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
    b4bc:	b292      	uxth	r2, r2
    b4be:	3a01      	subs	r2, #1
    b4c0:	b291      	uxth	r1, r2
    b4c2:	4a04      	ldr	r2, [pc, #16]	; (b4d4 <Adc_Ipw_RemoveFromQueue+0xb8>)
    b4c4:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
    }
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00();
    b4c8:	f006 f898 	bl	115fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>
}
    b4cc:	bf00      	nop
    b4ce:	b004      	add	sp, #16
    b4d0:	bd10      	pop	{r4, pc}
    b4d2:	bf00      	nop
    b4d4:	1fff8d70 	.word	0x1fff8d70

0000b4d8 <Adc_Ipw_ReadGroupConvData>:

static inline Std_ReturnType Adc_Ipw_ReadGroupConvData(const Adc_GroupConfigurationType * GroupPtr,
                                                       Adc_ValueGroupType * DataPtr,
                                                       boolean * Flag,
                                                       uint8 CoreId)
{
    b4d8:	b500      	push	{lr}
    b4da:	b087      	sub	sp, #28
    b4dc:	9003      	str	r0, [sp, #12]
    b4de:	9102      	str	r1, [sp, #8]
    b4e0:	9201      	str	r2, [sp, #4]
    b4e2:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 Channel;
    Adc_ValueGroupType AdcResult;
    Std_ReturnType ReadGroupRet = (Std_ReturnType) E_OK;
    b4e6:	2300      	movs	r3, #0
    b4e8:	f88d 3016 	strb.w	r3, [sp, #22]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    b4ec:	9b03      	ldr	r3, [sp, #12]
    b4ee:	789b      	ldrb	r3, [r3, #2]
    b4f0:	f88d 3015 	strb.w	r3, [sp, #21]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    b4f4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b4f8:	4a29      	ldr	r2, [pc, #164]	; (b5a0 <Adc_Ipw_ReadGroupConvData+0xc8>)
    b4fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4fe:	681a      	ldr	r2, [r3, #0]
    b500:	f89d 3015 	ldrb.w	r3, [sp, #21]
    b504:	4413      	add	r3, r2
    b506:	7c1b      	ldrb	r3, [r3, #16]
    b508:	f88d 3014 	strb.w	r3, [sp, #20]
    const uint8 NumsBitShift = Adc_Ipw_CalculateNumsBitShift(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[LogicalHwUnitId]->Resolution);
    b50c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b510:	4a23      	ldr	r2, [pc, #140]	; (b5a0 <Adc_Ipw_ReadGroupConvData+0xc8>)
    b512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b516:	681b      	ldr	r3, [r3, #0]
    b518:	f89d 2015 	ldrb.w	r2, [sp, #21]
    b51c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b520:	695b      	ldr	r3, [r3, #20]
    b522:	4618      	mov	r0, r3
    b524:	f000 fbce 	bl	bcc4 <Adc_Ipw_CalculateNumsBitShift>
    b528:	4603      	mov	r3, r0
    b52a:	f88d 3013 	strb.w	r3, [sp, #19]
    boolean ResultInRange = TRUE;
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
#if (ADC_SETCHANNEL_API == STD_ON)
    const Adc_ChannelIndexType ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    const Adc_ChannelIndexType ChannelCount = GroupPtr->AssignedChannelCount;
    b52e:	9b03      	ldr	r3, [sp, #12]
    b530:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    b534:	f88d 3012 	strb.w	r3, [sp, #18]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    for (Channel = 0U; Channel < ChannelCount; Channel++)
    b538:	2300      	movs	r3, #0
    b53a:	f88d 3017 	strb.w	r3, [sp, #23]
    b53e:	e022      	b.n	b586 <Adc_Ipw_ReadGroupConvData+0xae>
            }
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            AdcResult = Adc_Ip_GetConvData(PhysicalHwUnitId, Channel);
    b540:	f89d 3014 	ldrb.w	r3, [sp, #20]
    b544:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b548:	4611      	mov	r1, r2
    b54a:	4618      	mov	r0, r3
    b54c:	f7ff fcf4 	bl	af38 <Adc_Ip_GetConvData>
    b550:	4603      	mov	r3, r0
    b552:	f8ad 3010 	strh.w	r3, [sp, #16]
            /* Assumption: the width of the register is less than 16 */
            AdcResult = AdcResult << (NumsBitShift);
    b556:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    b55a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    b55e:	fa02 f303 	lsl.w	r3, r2, r3
    b562:	f8ad 3010 	strh.w	r3, [sp, #16]
        }
#if (ADC_ENABLE_LIMIT_CHECK == STD_OFF)
        (*Flag) = TRUE;
    b566:	9b01      	ldr	r3, [sp, #4]
    b568:	2201      	movs	r2, #1
    b56a:	701a      	strb	r2, [r3, #0]
            }
        }
        if (TRUE == ResultInRange)
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_OFF */
        {
            DataPtr[Channel] = AdcResult;
    b56c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b570:	005b      	lsls	r3, r3, #1
    b572:	9a02      	ldr	r2, [sp, #8]
    b574:	4413      	add	r3, r2
    b576:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    b57a:	801a      	strh	r2, [r3, #0]
    for (Channel = 0U; Channel < ChannelCount; Channel++)
    b57c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b580:	3301      	adds	r3, #1
    b582:	f88d 3017 	strb.w	r3, [sp, #23]
    b586:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b58a:	f89d 3012 	ldrb.w	r3, [sp, #18]
    b58e:	429a      	cmp	r2, r3
    b590:	d3d6      	bcc.n	b540 <Adc_Ipw_ReadGroupConvData+0x68>
        }
    }
    return ReadGroupRet;
    b592:	f89d 3016 	ldrb.w	r3, [sp, #22]
}
    b596:	4618      	mov	r0, r3
    b598:	b007      	add	sp, #28
    b59a:	f85d fb04 	ldr.w	pc, [sp], #4
    b59e:	bf00      	nop
    b5a0:	1fff8d40 	.word	0x1fff8d40

0000b5a4 <Adc_Ipw_ReadGroupNoInt>:
*/
static inline Std_ReturnType Adc_Ipw_ReadGroupNoInt(const Adc_GroupConfigurationType * GroupPtr,
                                                    Adc_ValueGroupType * DataPtr,
                                                    boolean * Flag,
                                                    uint8 CoreId)
{
    b5a4:	b500      	push	{lr}
    b5a6:	b087      	sub	sp, #28
    b5a8:	9003      	str	r0, [sp, #12]
    b5aa:	9102      	str	r1, [sp, #8]
    b5ac:	9201      	str	r2, [sp, #4]
    b5ae:	f88d 3003 	strb.w	r3, [sp, #3]
    Adc_ChannelIndexType ChannelCount;
    boolean ValidConversion = TRUE;
    b5b2:	2301      	movs	r3, #1
    b5b4:	f88d 3016 	strb.w	r3, [sp, #22]
    Std_ReturnType ReadGroupRet = (Std_ReturnType) E_OK;
    b5b8:	2300      	movs	r3, #0
    b5ba:	f88d 3017 	strb.w	r3, [sp, #23]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    b5be:	9b03      	ldr	r3, [sp, #12]
    b5c0:	789b      	ldrb	r3, [r3, #2]
    b5c2:	f88d 3015 	strb.w	r3, [sp, #21]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    b5c6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b5ca:	4a19      	ldr	r2, [pc, #100]	; (b630 <Adc_Ipw_ReadGroupNoInt+0x8c>)
    b5cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5d0:	681a      	ldr	r2, [r3, #0]
    b5d2:	f89d 3015 	ldrb.w	r3, [sp, #21]
    b5d6:	4413      	add	r3, r2
    b5d8:	7c1b      	ldrb	r3, [r3, #16]
    b5da:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) || defined(ADC_DMA_SUPPORTED) */

#if (ADC_SETCHANNEL_API == STD_ON)
    ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    ChannelCount = GroupPtr->AssignedChannelCount;
    b5de:	9b03      	ldr	r3, [sp, #12]
    b5e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    b5e4:	f88d 3013 	strb.w	r3, [sp, #19]
        }
    }
    else
#endif /* ADC_DMA_SUPPORTED */
    {
        ValidConversion = Adc_Ipw_CheckValidConversion(PhysicalHwUnitId, 0U, ChannelCount);
    b5e8:	f89d 2013 	ldrb.w	r2, [sp, #19]
    b5ec:	f89d 3014 	ldrb.w	r3, [sp, #20]
    b5f0:	2100      	movs	r1, #0
    b5f2:	4618      	mov	r0, r3
    b5f4:	f000 fe2a 	bl	c24c <Adc_Ipw_CheckValidConversion>
    b5f8:	4603      	mov	r3, r0
    b5fa:	f88d 3016 	strb.w	r3, [sp, #22]
    }

    /* All results are valid, so all conversions from the group have been completed */
    if (TRUE == ValidConversion)
    b5fe:	f89d 3016 	ldrb.w	r3, [sp, #22]
    b602:	2b00      	cmp	r3, #0
    b604:	d00a      	beq.n	b61c <Adc_Ipw_ReadGroupNoInt+0x78>
    {
        ReadGroupRet = Adc_Ipw_ReadGroupConvData(GroupPtr, DataPtr, Flag, CoreId);
    b606:	f89d 3003 	ldrb.w	r3, [sp, #3]
    b60a:	9a01      	ldr	r2, [sp, #4]
    b60c:	9902      	ldr	r1, [sp, #8]
    b60e:	9803      	ldr	r0, [sp, #12]
    b610:	f7ff ff62 	bl	b4d8 <Adc_Ipw_ReadGroupConvData>
    b614:	4603      	mov	r3, r0
    b616:	f88d 3017 	strb.w	r3, [sp, #23]
    b61a:	e002      	b.n	b622 <Adc_Ipw_ReadGroupNoInt+0x7e>
        }
#endif /* ADC_DMA_SUPPORTED */
    }
    else
    {
        ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    b61c:	2301      	movs	r3, #1
    b61e:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    return ReadGroupRet;
    b622:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    b626:	4618      	mov	r0, r3
    b628:	b007      	add	sp, #28
    b62a:	f85d fb04 	ldr.w	pc, [sp], #4
    b62e:	bf00      	nop
    b630:	1fff8d40 	.word	0x1fff8d40

0000b634 <Adc_Ipw_WriteDataBuffer>:

static inline void Adc_Ipw_WriteDataBuffer(const Adc_GroupType Group,
                                           Adc_ValueGroupType * DataPtr,
                                           uint8 CoreId)
{
    b634:	b088      	sub	sp, #32
    b636:	4603      	mov	r3, r0
    b638:	9100      	str	r1, [sp, #0]
    b63a:	f8ad 3006 	strh.w	r3, [sp, #6]
    b63e:	4613      	mov	r3, r2
    b640:	f88d 3005 	strb.w	r3, [sp, #5]
    uint8 Index;
    uint16 ResultOffset;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    b644:	f89d 3005 	ldrb.w	r3, [sp, #5]
    b648:	4a3a      	ldr	r2, [pc, #232]	; (b734 <Adc_Ipw_WriteDataBuffer+0x100>)
    b64a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b64e:	68da      	ldr	r2, [r3, #12]
    b650:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    b654:	005b      	lsls	r3, r3, #1
    b656:	4413      	add	r3, r2
    b658:	881b      	ldrh	r3, [r3, #0]
    b65a:	f8ad 3014 	strh.w	r3, [sp, #20]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    b65e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    b662:	4a34      	ldr	r2, [pc, #208]	; (b734 <Adc_Ipw_WriteDataBuffer+0x100>)
    b664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b668:	685a      	ldr	r2, [r3, #4]
    b66a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    b66e:	2134      	movs	r1, #52	; 0x34
    b670:	fb01 f303 	mul.w	r3, r1, r3
    b674:	4413      	add	r3, r2
    b676:	9304      	str	r3, [sp, #16]
    uint16 DmaBufferMask = Adc_Ipw_GetAdcDataMask(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[LogicalHwUnitId]->Resolution);
#endif /* ADC_DMA_SUPPORTED */
#if (ADC_SETCHANNEL_API == STD_ON)
    const Adc_ChannelIndexType ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    const Adc_ChannelIndexType ChannelCount = GroupPtr->AssignedChannelCount;
    b678:	9b04      	ldr	r3, [sp, #16]
    b67a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    b67e:	f88d 300f 	strb.w	r3, [sp, #15]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    Adc_ValueGroupType * ResultPtr = NULL_PTR;
    b682:	2300      	movs	r3, #0
    b684:	9306      	str	r3, [sp, #24]
    Adc_StreamNumSampleType ResultIndex = 0U;
    b686:	2300      	movs	r3, #0
    b688:	f8ad 3016 	strh.w	r3, [sp, #22]

    /* Get index of last completed sample */
    ResultIndex = Adc_axGroupStatus[Group].ResultIndex - (Adc_StreamNumSampleType)1U;
    b68c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    b690:	4929      	ldr	r1, [pc, #164]	; (b738 <Adc_Ipw_WriteDataBuffer+0x104>)
    b692:	4613      	mov	r3, r2
    b694:	009b      	lsls	r3, r3, #2
    b696:	4413      	add	r3, r2
    b698:	009b      	lsls	r3, r3, #2
    b69a:	440b      	add	r3, r1
    b69c:	3308      	adds	r3, #8
    b69e:	881b      	ldrh	r3, [r3, #0]
    b6a0:	b29b      	uxth	r3, r3
    b6a2:	3b01      	subs	r3, #1
    b6a4:	f8ad 3016 	strh.w	r3, [sp, #22]
    if ((Adc_StreamNumSampleType)0U == Adc_axGroupStatus[Group].ResultIndex)
    b6a8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    b6ac:	4922      	ldr	r1, [pc, #136]	; (b738 <Adc_Ipw_WriteDataBuffer+0x104>)
    b6ae:	4613      	mov	r3, r2
    b6b0:	009b      	lsls	r3, r3, #2
    b6b2:	4413      	add	r3, r2
    b6b4:	009b      	lsls	r3, r3, #2
    b6b6:	440b      	add	r3, r1
    b6b8:	3308      	adds	r3, #8
    b6ba:	881b      	ldrh	r3, [r3, #0]
    b6bc:	b29b      	uxth	r3, r3
    b6be:	2b00      	cmp	r3, #0
    b6c0:	d104      	bne.n	b6cc <Adc_Ipw_WriteDataBuffer+0x98>
    {
        ResultIndex = GroupPtr->NumSamples - (Adc_StreamNumSampleType)1U;
    b6c2:	9b04      	ldr	r3, [sp, #16]
    b6c4:	8b9b      	ldrh	r3, [r3, #28]
    b6c6:	3b01      	subs	r3, #1
    b6c8:	f8ad 3016 	strh.w	r3, [sp, #22]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    /* Get the result buffer pointer */
    if (FALSE == GroupPtr->StreamResultGroupMultiSets)
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
    {
        ResultPtr = (Adc_ValueGroupType *)(&(Adc_axGroupStatus[Group].ResultsBufferPtr[ResultIndex]));
    b6cc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    b6d0:	4919      	ldr	r1, [pc, #100]	; (b738 <Adc_Ipw_WriteDataBuffer+0x104>)
    b6d2:	4613      	mov	r3, r2
    b6d4:	009b      	lsls	r3, r3, #2
    b6d6:	4413      	add	r3, r2
    b6d8:	009b      	lsls	r3, r3, #2
    b6da:	440b      	add	r3, r1
    b6dc:	330c      	adds	r3, #12
    b6de:	681a      	ldr	r2, [r3, #0]
    b6e0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    b6e4:	005b      	lsls	r3, r3, #1
    b6e6:	4413      	add	r3, r2
    b6e8:	9306      	str	r3, [sp, #24]
        ResultOffset = GroupPtr->NumSamples;
    b6ea:	9b04      	ldr	r3, [sp, #16]
    b6ec:	8b9b      	ldrh	r3, [r3, #28]
    b6ee:	f8ad 300c 	strh.w	r3, [sp, #12]

        /* Copy results of last conversion from streaming buffer to internal buffer */
        for (Index = 0U; Index < ChannelCount; Index++)
    b6f2:	2300      	movs	r3, #0
    b6f4:	f88d 301f 	strb.w	r3, [sp, #31]
    b6f8:	e012      	b.n	b720 <Adc_Ipw_WriteDataBuffer+0xec>
                DataPtr[Index] = (Adc_ValueGroupType)((*ResultPtr) & DmaBufferMask);
            }
            else
#endif /* ADC_DMA_SUPPORTED */
            {
                DataPtr[Index] = (*ResultPtr);
    b6fa:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b6fe:	005b      	lsls	r3, r3, #1
    b700:	9a00      	ldr	r2, [sp, #0]
    b702:	4413      	add	r3, r2
    b704:	9a06      	ldr	r2, [sp, #24]
    b706:	8812      	ldrh	r2, [r2, #0]
    b708:	801a      	strh	r2, [r3, #0]
            }
            ResultPtr = &(ResultPtr[ResultOffset]);
    b70a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    b70e:	005b      	lsls	r3, r3, #1
    b710:	9a06      	ldr	r2, [sp, #24]
    b712:	4413      	add	r3, r2
    b714:	9306      	str	r3, [sp, #24]
        for (Index = 0U; Index < ChannelCount; Index++)
    b716:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b71a:	3301      	adds	r3, #1
    b71c:	f88d 301f 	strb.w	r3, [sp, #31]
    b720:	f89d 201f 	ldrb.w	r2, [sp, #31]
    b724:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b728:	429a      	cmp	r2, r3
    b72a:	d3e6      	bcc.n	b6fa <Adc_Ipw_WriteDataBuffer+0xc6>
                DataPtr[Index] = ResultPtr[Index];
            }
        }
    }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
}
    b72c:	bf00      	nop
    b72e:	bf00      	nop
    b730:	b008      	add	sp, #32
    b732:	4770      	bx	lr
    b734:	1fff8d40 	.word	0x1fff8d40
    b738:	1fff8d48 	.word	0x1fff8d48

0000b73c <Adc_Ipw_ConfigurePdbChannels>:
*/
static inline uint8 Adc_Ipw_ConfigurePdbChannels(Adc_HwUnitType Unit,
                                                 Adc_GroupType Group,
                                                 const Adc_GroupConfigurationType * GroupPtr,
                                                 uint8 NumChannel)
{
    b73c:	b500      	push	{lr}
    b73e:	b089      	sub	sp, #36	; 0x24
    b740:	9200      	str	r2, [sp, #0]
    b742:	461a      	mov	r2, r3
    b744:	4603      	mov	r3, r0
    b746:	f88d 3007 	strb.w	r3, [sp, #7]
    b74a:	460b      	mov	r3, r1
    b74c:	f8ad 3004 	strh.w	r3, [sp, #4]
    b750:	4613      	mov	r3, r2
    b752:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8 PdbIndex;
    uint8 PreTriggerCtr;
    uint8 ChUsed;
    uint8 LeftChannel = NumChannel;
    b756:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b75a:	f88d 301d 	strb.w	r3, [sp, #29]
    uint8 PdbChannelUsed = (uint8)ADC_IPW_PDB_CHANNELS_USED(NumChannel);
    b75e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b762:	f003 0307 	and.w	r3, r3, #7
    b766:	b2db      	uxtb	r3, r3
    b768:	2b00      	cmp	r3, #0
    b76a:	d006      	beq.n	b77a <Adc_Ipw_ConfigurePdbChannels+0x3e>
    b76c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b770:	08db      	lsrs	r3, r3, #3
    b772:	b2db      	uxtb	r3, r3
    b774:	3301      	adds	r3, #1
    b776:	b2db      	uxtb	r3, r3
    b778:	e003      	b.n	b782 <Adc_Ipw_ConfigurePdbChannels+0x46>
    b77a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b77e:	08db      	lsrs	r3, r3, #3
    b780:	b2db      	uxtb	r3, r3
    b782:	f88d 3019 	strb.w	r3, [sp, #25]
    uint16 PdbDelay;
    uint16 CurrentCh = Adc_axGroupStatus[Group].CurrentChannel;
    b786:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    b78a:	4987      	ldr	r1, [pc, #540]	; (b9a8 <Adc_Ipw_ConfigurePdbChannels+0x26c>)
    b78c:	4613      	mov	r3, r2
    b78e:	009b      	lsls	r3, r3, #2
    b790:	4413      	add	r3, r2
    b792:	009b      	lsls	r3, r3, #2
    b794:	440b      	add	r3, r1
    b796:	3310      	adds	r3, #16
    b798:	781b      	ldrb	r3, [r3, #0]
    b79a:	f8ad 301a 	strh.w	r3, [sp, #26]
    Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    b79e:	4b83      	ldr	r3, [pc, #524]	; (b9ac <Adc_Ipw_ConfigurePdbChannels+0x270>)
    b7a0:	681b      	ldr	r3, [r3, #0]
    b7a2:	681a      	ldr	r2, [r3, #0]
    b7a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b7a8:	4413      	add	r3, r2
    b7aa:	7c1b      	ldrb	r3, [r3, #16]
    b7ac:	f88d 3018 	strb.w	r3, [sp, #24]
    uint32 TempMask = Adc_axRuntimeGroupChannel[Group].RuntimeChanMask;
    /* Get delay configuration of each pre-trigger at runtime */
    const uint16 * GroupDelay = Adc_axRuntimeGroupChannel[Group].DelaysPtr;
#else
    /* Follow user configuration */
    const uint16 * GroupDelay = GroupPtr->AdcIpwGroupConfigPtr->DelayPtr;
    b7b0:	9b00      	ldr	r3, [sp, #0]
    b7b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b7b4:	691b      	ldr	r3, [r3, #16]
    b7b6:	9305      	str	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Configure PDB channels */
    for (PdbIndex = 0U; PdbIndex < PdbChannelUsed; PdbIndex++)
    b7b8:	2300      	movs	r3, #0
    b7ba:	f88d 301f 	strb.w	r3, [sp, #31]
    b7be:	e0e6      	b.n	b98e <Adc_Ipw_ConfigurePdbChannels+0x252>
    {
        /* Get channels used depending on number of pre-triggers per PDB channel */
        ChUsed = ADC_IPW_NUM_CHANNELS_USED(LeftChannel);
    b7c0:	f89d 301d 	ldrb.w	r3, [sp, #29]
    b7c4:	08db      	lsrs	r3, r3, #3
    b7c6:	b2db      	uxtb	r3, r3
    b7c8:	2b00      	cmp	r3, #0
    b7ca:	d102      	bne.n	b7d2 <Adc_Ipw_ConfigurePdbChannels+0x96>
    b7cc:	f89d 301d 	ldrb.w	r3, [sp, #29]
    b7d0:	e000      	b.n	b7d4 <Adc_Ipw_ConfigurePdbChannels+0x98>
    b7d2:	2308      	movs	r3, #8
    b7d4:	f88d 3013 	strb.w	r3, [sp, #19]

        /* If group channel delay, not bypass mode */
        if ((TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableChannelDelays)
    b7d8:	9b00      	ldr	r3, [sp, #0]
    b7da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b7dc:	7bdb      	ldrb	r3, [r3, #15]
    b7de:	2b00      	cmp	r3, #0
    b7e0:	d05e      	beq.n	b8a0 <Adc_Ipw_ConfigurePdbChannels+0x164>
                && (GroupDelay != NULL_PTR)
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
           )
        {
            /* If Back to Back mode is disabled, enable and configure delays for all channels */
            if (FALSE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    b7e2:	9b00      	ldr	r3, [sp, #0]
    b7e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b7e6:	7b9b      	ldrb	r3, [r3, #14]
    b7e8:	f083 0301 	eor.w	r3, r3, #1
    b7ec:	b2db      	uxtb	r3, r3
    b7ee:	2b00      	cmp	r3, #0
    b7f0:	d02a      	beq.n	b848 <Adc_Ipw_ConfigurePdbChannels+0x10c>
            {
                PdbPretriggsConfig.EnableDelayMask = (uint8)ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
    b7f2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    b7f6:	f1c3 0308 	rsb	r3, r3, #8
    b7fa:	22ff      	movs	r2, #255	; 0xff
    b7fc:	fa22 f303 	lsr.w	r3, r2, r3
    b800:	b2db      	uxtb	r3, r3
    b802:	f88d 300d 	strb.w	r3, [sp, #13]
                for (PreTriggerCtr = 0U; PreTriggerCtr < ChUsed; PreTriggerCtr++)
    b806:	2300      	movs	r3, #0
    b808:	f88d 301e 	strb.w	r3, [sp, #30]
    b80c:	e015      	b.n	b83a <Adc_Ipw_ConfigurePdbChannels+0xfe>
                {
#if (ADC_SETCHANNEL_API == STD_ON)
                    if ((uint32)1U == (TempMask & (uint32)1U))
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
                    {
                        Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, PreTriggerCtr, GroupDelay[CurrentCh + PreTriggerCtr]);
    b80e:	f89d 0018 	ldrb.w	r0, [sp, #24]
    b812:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    b816:	f89d 301e 	ldrb.w	r3, [sp, #30]
    b81a:	4413      	add	r3, r2
    b81c:	005b      	lsls	r3, r3, #1
    b81e:	9a05      	ldr	r2, [sp, #20]
    b820:	4413      	add	r3, r2
    b822:	881b      	ldrh	r3, [r3, #0]
    b824:	f89d 201e 	ldrb.w	r2, [sp, #30]
    b828:	f89d 101f 	ldrb.w	r1, [sp, #31]
    b82c:	f001 fd16 	bl	d25c <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
                for (PreTriggerCtr = 0U; PreTriggerCtr < ChUsed; PreTriggerCtr++)
    b830:	f89d 301e 	ldrb.w	r3, [sp, #30]
    b834:	3301      	adds	r3, #1
    b836:	f88d 301e 	strb.w	r3, [sp, #30]
    b83a:	f89d 201e 	ldrb.w	r2, [sp, #30]
    b83e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    b842:	429a      	cmp	r2, r3
    b844:	d3e3      	bcc.n	b80e <Adc_Ipw_ConfigurePdbChannels+0xd2>
    b846:	e051      	b.n	b8ec <Adc_Ipw_ConfigurePdbChannels+0x1b0>
                }
            }
            else
            {
                /* Beginning part (8 ADC channels) of group will be configured in PDB channel 0 */
                if (0U == PdbIndex)
    b848:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b84c:	2b00      	cmp	r3, #0
    b84e:	d110      	bne.n	b872 <Adc_Ipw_ConfigurePdbChannels+0x136>
                {
                    PdbPretriggsConfig.EnableDelayMask = 1U;
    b850:	2301      	movs	r3, #1
    b852:	f88d 300d 	strb.w	r3, [sp, #13]
                    /* First pre-trigger need to be configured as delay, others will be in back to back mode */
                    PdbDelay = GroupDelay[0U];
    b856:	9b05      	ldr	r3, [sp, #20]
    b858:	881b      	ldrh	r3, [r3, #0]
    b85a:	f8ad 3010 	strh.w	r3, [sp, #16]
                    Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    b85e:	f89d 0018 	ldrb.w	r0, [sp, #24]
    b862:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    b866:	f89d 101f 	ldrb.w	r1, [sp, #31]
    b86a:	2200      	movs	r2, #0
    b86c:	f001 fcf6 	bl	d25c <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    b870:	e03c      	b.n	b8ec <Adc_Ipw_ConfigurePdbChannels+0x1b0>
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
                    if (FALSE == Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->PdbConfig[LogicalHwUnitId]->InterChannelBackToBackEnable)
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                    {
                        /* The other parts will be configured in following PDB channels */
                        PdbPretriggsConfig.EnableDelayMask = 1U;
    b872:	2301      	movs	r3, #1
    b874:	f88d 300d 	strb.w	r3, [sp, #13]
                        PdbDelay = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*PdbIndex;
    b878:	9b00      	ldr	r3, [sp, #0]
    b87a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b87c:	899a      	ldrh	r2, [r3, #12]
    b87e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b882:	b29b      	uxth	r3, r3
    b884:	fb12 f303 	smulbb	r3, r2, r3
    b888:	f8ad 3010 	strh.w	r3, [sp, #16]
                        Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    b88c:	f89d 0018 	ldrb.w	r0, [sp, #24]
    b890:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    b894:	f89d 101f 	ldrb.w	r1, [sp, #31]
    b898:	2200      	movs	r2, #0
    b89a:	f001 fcdf 	bl	d25c <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    b89e:	e025      	b.n	b8ec <Adc_Ipw_ConfigurePdbChannels+0x1b0>
                }
            }
        }
        else    /* Back-to-back mode only */
        {
            if (0U == PdbIndex)
    b8a0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b8a4:	2b00      	cmp	r3, #0
    b8a6:	d10b      	bne.n	b8c0 <Adc_Ipw_ConfigurePdbChannels+0x184>
            {
                /* Configure the delay for the second PDB in case of only back to back used */
                /* The first PDB channel, pre-trigger 0 also need to use channel delay (TOS bit = 1) in order to work with continuous PDB mode */
                PdbPretriggsConfig.EnableDelayMask = 1U;
    b8a8:	2301      	movs	r3, #1
    b8aa:	f88d 300d 	strb.w	r3, [sp, #13]
                Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, 0U);
    b8ae:	f89d 0018 	ldrb.w	r0, [sp, #24]
    b8b2:	f89d 101f 	ldrb.w	r1, [sp, #31]
    b8b6:	2300      	movs	r3, #0
    b8b8:	2200      	movs	r2, #0
    b8ba:	f001 fccf 	bl	d25c <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
    b8be:	e015      	b.n	b8ec <Adc_Ipw_ConfigurePdbChannels+0x1b0>
            {
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
                if (FALSE == Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->PdbConfig[LogicalHwUnitId]->InterChannelBackToBackEnable)
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                {
                    PdbPretriggsConfig.EnableDelayMask = 1U;
    b8c0:	2301      	movs	r3, #1
    b8c2:	f88d 300d 	strb.w	r3, [sp, #13]
                    PdbDelay = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*PdbIndex;
    b8c6:	9b00      	ldr	r3, [sp, #0]
    b8c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b8ca:	899a      	ldrh	r2, [r3, #12]
    b8cc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b8d0:	b29b      	uxth	r3, r3
    b8d2:	fb12 f303 	smulbb	r3, r2, r3
    b8d6:	f8ad 3010 	strh.w	r3, [sp, #16]
                    Pdb_Adc_Ip_SetAdcPretriggerDelayValue(PhysicalHwUnitId, PdbIndex, 0U, PdbDelay);
    b8da:	f89d 0018 	ldrb.w	r0, [sp, #24]
    b8de:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    b8e2:	f89d 101f 	ldrb.w	r1, [sp, #31]
    b8e6:	2200      	movs	r2, #0
    b8e8:	f001 fcb8 	bl	d25c <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
                }
            }
        }

        Pdb_Adc_Ip_LoadRegValues(PhysicalHwUnitId);
    b8ec:	f89d 3018 	ldrb.w	r3, [sp, #24]
    b8f0:	4618      	mov	r0, r3
    b8f2:	f001 fb87 	bl	d004 <Pdb_Adc_Ip_LoadRegValues>

        /* Update status channel for configuring PDB channel in next loop */
        LeftChannel -= ChUsed;
    b8f6:	f89d 201d 	ldrb.w	r2, [sp, #29]
    b8fa:	f89d 3013 	ldrb.w	r3, [sp, #19]
    b8fe:	1ad3      	subs	r3, r2, r3
    b900:	f88d 301d 	strb.w	r3, [sp, #29]
        CurrentCh += ChUsed;
    b904:	f89d 3013 	ldrb.w	r3, [sp, #19]
    b908:	b29a      	uxth	r2, r3
    b90a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    b90e:	4413      	add	r3, r2
    b910:	f8ad 301a 	strh.w	r3, [sp, #26]

        /* Use back to back mode for all channels but using delay in pre-trigger 0 */
        if (TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    b914:	9b00      	ldr	r3, [sp, #0]
    b916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b918:	7b9b      	ldrb	r3, [r3, #14]
    b91a:	2b00      	cmp	r3, #0
    b91c:	d01d      	beq.n	b95a <Adc_Ipw_ConfigurePdbChannels+0x21e>
        {
            if (0U == PdbIndex)
    b91e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b922:	2b00      	cmp	r3, #0
    b924:	d10c      	bne.n	b940 <Adc_Ipw_ConfigurePdbChannels+0x204>
            {
                PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed) - 1U;
    b926:	f89d 3013 	ldrb.w	r3, [sp, #19]
    b92a:	f1c3 0308 	rsb	r3, r3, #8
    b92e:	22ff      	movs	r2, #255	; 0xff
    b930:	fa22 f303 	lsr.w	r3, r2, r3
    b934:	b2db      	uxtb	r3, r3
    b936:	3b01      	subs	r3, #1
    b938:	b2db      	uxtb	r3, r3
    b93a:	f88d 300e 	strb.w	r3, [sp, #14]
    b93e:	e00f      	b.n	b960 <Adc_Ipw_ConfigurePdbChannels+0x224>
                    PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
                }
                else
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */
                {
                    PdbPretriggsConfig.BackToBackEnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed) - 1U;
    b940:	f89d 3013 	ldrb.w	r3, [sp, #19]
    b944:	f1c3 0308 	rsb	r3, r3, #8
    b948:	22ff      	movs	r2, #255	; 0xff
    b94a:	fa22 f303 	lsr.w	r3, r2, r3
    b94e:	b2db      	uxtb	r3, r3
    b950:	3b01      	subs	r3, #1
    b952:	b2db      	uxtb	r3, r3
    b954:	f88d 300e 	strb.w	r3, [sp, #14]
    b958:	e002      	b.n	b960 <Adc_Ipw_ConfigurePdbChannels+0x224>
                }
            }
        }
        else
        {
            PdbPretriggsConfig.BackToBackEnableMask = 0u;
    b95a:	2300      	movs	r3, #0
    b95c:	f88d 300e 	strb.w	r3, [sp, #14]
        }
        PdbPretriggsConfig.EnableMask = (uint8) ADC_IPW_PDB_PRETRIGG_MASK(ChUsed);
    b960:	f89d 3013 	ldrb.w	r3, [sp, #19]
    b964:	f1c3 0308 	rsb	r3, r3, #8
    b968:	22ff      	movs	r2, #255	; 0xff
    b96a:	fa22 f303 	lsr.w	r3, r2, r3
    b96e:	b2db      	uxtb	r3, r3
    b970:	f88d 300c 	strb.w	r3, [sp, #12]
        /* Update configuration to CHnC1 register for pre-trigger */
        Pdb_Adc_Ip_ConfigAdcPretriggers(PhysicalHwUnitId, PdbIndex, &PdbPretriggsConfig);
    b974:	f89d 3018 	ldrb.w	r3, [sp, #24]
    b978:	aa03      	add	r2, sp, #12
    b97a:	f89d 101f 	ldrb.w	r1, [sp, #31]
    b97e:	4618      	mov	r0, r3
    b980:	f001 fb7c 	bl	d07c <Pdb_Adc_Ip_ConfigAdcPretriggers>
    for (PdbIndex = 0U; PdbIndex < PdbChannelUsed; PdbIndex++)
    b984:	f89d 301f 	ldrb.w	r3, [sp, #31]
    b988:	3301      	adds	r3, #1
    b98a:	f88d 301f 	strb.w	r3, [sp, #31]
    b98e:	f89d 201f 	ldrb.w	r2, [sp, #31]
    b992:	f89d 3019 	ldrb.w	r3, [sp, #25]
    b996:	429a      	cmp	r2, r3
    b998:	f4ff af12 	bcc.w	b7c0 <Adc_Ipw_ConfigurePdbChannels+0x84>
    }
    return PdbIndex;
    b99c:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    b9a0:	4618      	mov	r0, r3
    b9a2:	b009      	add	sp, #36	; 0x24
    b9a4:	f85d fb04 	ldr.w	pc, [sp], #4
    b9a8:	1fff8d48 	.word	0x1fff8d48
    b9ac:	1fff8d40 	.word	0x1fff8d40

0000b9b0 <Adc_Ipw_ConfigurePdbConversion>:
static inline void Adc_Ipw_ConfigurePdbConversion(Adc_HwUnitType Unit,
                                                    Adc_GroupType Group,
                                                    const Adc_GroupConfigurationType * GroupPtr,
                                                    Adc_HwTriggerTimerType Trigger,
                                                    uint8 NumChannel)
{
    b9b0:	b500      	push	{lr}
    b9b2:	b089      	sub	sp, #36	; 0x24
    b9b4:	9202      	str	r2, [sp, #8]
    b9b6:	9301      	str	r3, [sp, #4]
    b9b8:	4603      	mov	r3, r0
    b9ba:	f88d 300f 	strb.w	r3, [sp, #15]
    b9be:	460b      	mov	r3, r1
    b9c0:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint8 PdbIndex;
    uint8 PdbChannelUsed;
    uint16 PdbPeriod = 0U;
    b9c4:	2300      	movs	r3, #0
    b9c6:	f8ad 301c 	strh.w	r3, [sp, #28]
    Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[0U]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    b9ca:	4b62      	ldr	r3, [pc, #392]	; (bb54 <Adc_Ipw_ConfigurePdbConversion+0x1a4>)
    b9cc:	681b      	ldr	r3, [r3, #0]
    b9ce:	681a      	ldr	r2, [r3, #0]
    b9d0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b9d4:	4413      	add	r3, r2
    b9d6:	7c1b      	ldrb	r3, [r3, #16]
    b9d8:	f88d 301b 	strb.w	r3, [sp, #27]
    /* Get delay configuration of each pre-trigger */
    /* At runtime */
    const uint16 * GroupDelay = Adc_axRuntimeGroupChannel[Group].DelaysPtr;
#else
    /* Follow user configuration */
    const uint16 * GroupDelay = GroupPtr->AdcIpwGroupConfigPtr->DelayPtr;
    b9dc:	9b02      	ldr	r3, [sp, #8]
    b9de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b9e0:	691b      	ldr	r3, [r3, #16]
    b9e2:	9305      	str	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Calculate number of PDB channels depending on the ADC channels used */
    /* Note that 1 PDB channel triggers to 8 ADC channels */
    PdbChannelUsed = (uint8)ADC_IPW_PDB_CHANNELS_USED(NumChannel);
    b9e4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    b9e8:	f003 0307 	and.w	r3, r3, #7
    b9ec:	b2db      	uxtb	r3, r3
    b9ee:	2b00      	cmp	r3, #0
    b9f0:	d006      	beq.n	ba00 <Adc_Ipw_ConfigurePdbConversion+0x50>
    b9f2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    b9f6:	08db      	lsrs	r3, r3, #3
    b9f8:	b2db      	uxtb	r3, r3
    b9fa:	3301      	adds	r3, #1
    b9fc:	b2db      	uxtb	r3, r3
    b9fe:	e003      	b.n	ba08 <Adc_Ipw_ConfigurePdbConversion+0x58>
    ba00:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    ba04:	08db      	lsrs	r3, r3, #3
    ba06:	b2db      	uxtb	r3, r3
    ba08:	f88d 3013 	strb.w	r3, [sp, #19]
    /* Select the input trigger source for PDB */
    Pdb_Adc_Ip_Enable(PhysicalHwUnitId);
    ba0c:	f89d 301b 	ldrb.w	r3, [sp, #27]
    ba10:	4618      	mov	r0, r3
    ba12:	f001 fa61 	bl	ced8 <Pdb_Adc_Ip_Enable>
    Pdb_Adc_Ip_SetTriggerInput(PhysicalHwUnitId, Trigger);
    ba16:	f89d 301b 	ldrb.w	r3, [sp, #27]
    ba1a:	9901      	ldr	r1, [sp, #4]
    ba1c:	4618      	mov	r0, r3
    ba1e:	f001 fa89 	bl	cf34 <Pdb_Adc_Ip_SetTriggerInput>

    PdbIndex = Adc_Ipw_ConfigurePdbChannels(Unit, Group, GroupPtr, NumChannel);
    ba22:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    ba26:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    ba2a:	f89d 000f 	ldrb.w	r0, [sp, #15]
    ba2e:	9a02      	ldr	r2, [sp, #8]
    ba30:	f7ff fe84 	bl	b73c <Adc_Ipw_ConfigurePdbChannels>
    ba34:	4603      	mov	r3, r0
    ba36:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    else
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */
    {
        /* If group channel delay, not bypass mode */
        if (TRUE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableChannelDelays)
    ba3a:	9b02      	ldr	r3, [sp, #8]
    ba3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    ba3e:	7bdb      	ldrb	r3, [r3, #15]
    ba40:	2b00      	cmp	r3, #0
    ba42:	d02f      	beq.n	baa4 <Adc_Ipw_ConfigurePdbConversion+0xf4>
        {
            if (FALSE == GroupPtr->AdcIpwGroupConfigPtr->AdcGroupEnableBackToBack)
    ba44:	9b02      	ldr	r3, [sp, #8]
    ba46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    ba48:	7b9b      	ldrb	r3, [r3, #14]
    ba4a:	f083 0301 	eor.w	r3, r3, #1
    ba4e:	b2db      	uxtb	r3, r3
    ba50:	2b00      	cmp	r3, #0
    ba52:	d017      	beq.n	ba84 <Adc_Ipw_ConfigurePdbConversion+0xd4>
            {
                /* If delay mode for all pre-triggers, PDB period equals to value of last pre-trigger delay (i.e longest delay) */
                PdbPeriod = GroupDelay[(Adc_axGroupStatus[Group].CurrentChannel + NumChannel) - 1U];
    ba54:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    ba58:	493f      	ldr	r1, [pc, #252]	; (bb58 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    ba5a:	4613      	mov	r3, r2
    ba5c:	009b      	lsls	r3, r3, #2
    ba5e:	4413      	add	r3, r2
    ba60:	009b      	lsls	r3, r3, #2
    ba62:	440b      	add	r3, r1
    ba64:	3310      	adds	r3, #16
    ba66:	781b      	ldrb	r3, [r3, #0]
    ba68:	461a      	mov	r2, r3
    ba6a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    ba6e:	4413      	add	r3, r2
    ba70:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    ba74:	3b01      	subs	r3, #1
    ba76:	005b      	lsls	r3, r3, #1
    ba78:	9a05      	ldr	r2, [sp, #20]
    ba7a:	4413      	add	r3, r2
    ba7c:	881b      	ldrh	r3, [r3, #0]
    ba7e:	f8ad 301c 	strh.w	r3, [sp, #28]
    ba82:	e01a      	b.n	baba <Adc_Ipw_ConfigurePdbConversion+0x10a>
            }
            else
            {
                /* Period will be calculated depending on user configuration in back to back mode */
                PdbPeriod = GroupDelay[0U] + (uint16)((GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*((uint16)PdbChannelUsed - 1U));
    ba84:	9b05      	ldr	r3, [sp, #20]
    ba86:	881a      	ldrh	r2, [r3, #0]
    ba88:	9b02      	ldr	r3, [sp, #8]
    ba8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    ba8c:	8999      	ldrh	r1, [r3, #12]
    ba8e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    ba92:	3b01      	subs	r3, #1
    ba94:	b29b      	uxth	r3, r3
    ba96:	fb11 f303 	smulbb	r3, r1, r3
    ba9a:	b29b      	uxth	r3, r3
    ba9c:	4413      	add	r3, r2
    ba9e:	f8ad 301c 	strh.w	r3, [sp, #28]
    baa2:	e00a      	b.n	baba <Adc_Ipw_ConfigurePdbConversion+0x10a>
            }
        }
        else
        {
            /* All pre-trigger configured as user PdbDelay */
            PdbPeriod = (GroupPtr->AdcIpwGroupConfigPtr->PdbDelay)*((uint16)PdbChannelUsed - 1U);
    baa4:	9b02      	ldr	r3, [sp, #8]
    baa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    baa8:	899a      	ldrh	r2, [r3, #12]
    baaa:	f89d 3013 	ldrb.w	r3, [sp, #19]
    baae:	3b01      	subs	r3, #1
    bab0:	b29b      	uxth	r3, r3
    bab2:	fb12 f303 	smulbb	r3, r2, r3
    bab6:	f8ad 301c 	strh.w	r3, [sp, #28]
        }
    }

    /* Configure the period of counter */
    Pdb_Adc_Ip_SetModulus(PhysicalHwUnitId, PdbPeriod);
    baba:	f89d 301b 	ldrb.w	r3, [sp, #27]
    babe:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    bac2:	4611      	mov	r1, r2
    bac4:	4618      	mov	r0, r3
    bac6:	f001 fab5 	bl	d034 <Pdb_Adc_Ip_SetModulus>

    /* Load the configuration */
    Pdb_Adc_Ip_LoadRegValues(PhysicalHwUnitId);
    baca:	f89d 301b 	ldrb.w	r3, [sp, #27]
    bace:	4618      	mov	r0, r3
    bad0:	f001 fa98 	bl	d004 <Pdb_Adc_Ip_LoadRegValues>

    PdbPretriggsConfig.EnableMask = 0u;
    bad4:	2300      	movs	r3, #0
    bad6:	f88d 3010 	strb.w	r3, [sp, #16]
    PdbPretriggsConfig.EnableDelayMask = 0u;
    bada:	2300      	movs	r3, #0
    badc:	f88d 3011 	strb.w	r3, [sp, #17]
    PdbPretriggsConfig.BackToBackEnableMask = 0u;
    bae0:	2300      	movs	r3, #0
    bae2:	f88d 3012 	strb.w	r3, [sp, #18]

    /* Disable others PDB channels to avoid errors when PDB trigger the disabled channels */
    for (; PdbIndex < PDB_CH_COUNT; PdbIndex++)
    bae6:	e00c      	b.n	bb02 <Adc_Ipw_ConfigurePdbConversion+0x152>
    {
        Pdb_Adc_Ip_ConfigAdcPretriggers(PhysicalHwUnitId, PdbIndex, &PdbPretriggsConfig);
    bae8:	f89d 301b 	ldrb.w	r3, [sp, #27]
    baec:	aa04      	add	r2, sp, #16
    baee:	f89d 101f 	ldrb.w	r1, [sp, #31]
    baf2:	4618      	mov	r0, r3
    baf4:	f001 fac2 	bl	d07c <Pdb_Adc_Ip_ConfigAdcPretriggers>
    for (; PdbIndex < PDB_CH_COUNT; PdbIndex++)
    baf8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    bafc:	3301      	adds	r3, #1
    bafe:	f88d 301f 	strb.w	r3, [sp, #31]
    bb02:	f89d 301f 	ldrb.w	r3, [sp, #31]
    bb06:	2b01      	cmp	r3, #1
    bb08:	d9ee      	bls.n	bae8 <Adc_Ipw_ConfigurePdbConversion+0x138>
    }

    /* Update current channel */
    Adc_axGroupStatus[Group].CurrentChannel += NumChannel;
    bb0a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    bb0e:	4912      	ldr	r1, [pc, #72]	; (bb58 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    bb10:	4613      	mov	r3, r2
    bb12:	009b      	lsls	r3, r3, #2
    bb14:	4413      	add	r3, r2
    bb16:	009b      	lsls	r3, r3, #2
    bb18:	440b      	add	r3, r1
    bb1a:	3310      	adds	r3, #16
    bb1c:	7819      	ldrb	r1, [r3, #0]
    bb1e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    bb22:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    bb26:	440b      	add	r3, r1
    bb28:	b2d8      	uxtb	r0, r3
    bb2a:	490b      	ldr	r1, [pc, #44]	; (bb58 <Adc_Ipw_ConfigurePdbConversion+0x1a8>)
    bb2c:	4613      	mov	r3, r2
    bb2e:	009b      	lsls	r3, r3, #2
    bb30:	4413      	add	r3, r2
    bb32:	009b      	lsls	r3, r3, #2
    bb34:	440b      	add	r3, r1
    bb36:	3310      	adds	r3, #16
    bb38:	4602      	mov	r2, r0
    bb3a:	701a      	strb	r2, [r3, #0]

    /* SWS_Adc_00356, SWS_Adc_00357 */
    /* Start software trigger */
    /* If trigger is not software trigger, hardware trigger or external trigger will be used */
    if (PDB_ADC_IP_SOFTWARE_TRIGGER == Trigger)
    bb3c:	9b01      	ldr	r3, [sp, #4]
    bb3e:	2b0f      	cmp	r3, #15
    bb40:	d104      	bne.n	bb4c <Adc_Ipw_ConfigurePdbConversion+0x19c>
            /* PDB operation in Continuous mode for software */
            Pdb_Adc_Ip_SetContinuousMode(PhysicalHwUnitId, TRUE);
        }
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */

        Pdb_Adc_Ip_SwTrigger(PhysicalHwUnitId);
    bb42:	f89d 301b 	ldrb.w	r3, [sp, #27]
    bb46:	4618      	mov	r0, r3
    bb48:	f001 fa34 	bl	cfb4 <Pdb_Adc_Ip_SwTrigger>
    }
#if (ADC_SETCHANNEL_API == STD_OFF)
    /* Avoid compiler warning */
    (void)Group;
#endif /* (ADC_SETCHANNEL_API == STD_OFF) */
}
    bb4c:	bf00      	nop
    bb4e:	b009      	add	sp, #36	; 0x24
    bb50:	f85d fb04 	ldr.w	pc, [sp], #4
    bb54:	1fff8d40 	.word	0x1fff8d40
    bb58:	1fff8d48 	.word	0x1fff8d48

0000bb5c <Adc_Ipw_StopConversionCheckTimeout>:
*
*/
static inline Std_ReturnType Adc_Ipw_StopConversionCheckTimeout(Adc_HwUnitType Unit,
                                                                Adc_GroupType Group,
                                                                uint8 CoreId)
{
    bb5c:	b500      	push	{lr}
    bb5e:	b087      	sub	sp, #28
    bb60:	4603      	mov	r3, r0
    bb62:	f88d 3007 	strb.w	r3, [sp, #7]
    bb66:	460b      	mov	r3, r1
    bb68:	f8ad 3004 	strh.w	r3, [sp, #4]
    bb6c:	4613      	mov	r3, r2
    bb6e:	f88d 3006 	strb.w	r3, [sp, #6]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    bb72:	f89d 3006 	ldrb.w	r3, [sp, #6]
    bb76:	4a36      	ldr	r2, [pc, #216]	; (bc50 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    bb78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb7c:	68da      	ldr	r2, [r3, #12]
    bb7e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    bb82:	005b      	lsls	r3, r3, #1
    bb84:	4413      	add	r3, r2
    bb86:	881b      	ldrh	r3, [r3, #0]
    bb88:	f8ad 3014 	strh.w	r3, [sp, #20]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    bb8c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    bb90:	4a2f      	ldr	r2, [pc, #188]	; (bc50 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    bb92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bb96:	681a      	ldr	r2, [r3, #0]
    bb98:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bb9c:	4413      	add	r3, r2
    bb9e:	7c1b      	ldrb	r3, [r3, #16]
    bba0:	f88d 3013 	strb.w	r3, [sp, #19]
    Std_ReturnType Status = E_OK;
    bba4:	2300      	movs	r3, #0
    bba6:	f88d 3017 	strb.w	r3, [sp, #23]
    Adc_Ip_StatusType AdcIpStatus;
    uint8 ChIndex;

    /* Stop PDB hardware trigger unit */
    Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
    bbaa:	f89d 3013 	ldrb.w	r3, [sp, #19]
    bbae:	4618      	mov	r0, r3
    bbb0:	f001 fb7e 	bl	d2b0 <Pdb_Adc_Ip_DisableAndClearPdb>

    /* Check if ADC is in continuous mode */
    if (((uint8)STD_ON == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AdcWithoutInterrupt) && (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode))
    bbb4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    bbb8:	4a25      	ldr	r2, [pc, #148]	; (bc50 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    bbba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bbbe:	685a      	ldr	r2, [r3, #4]
    bbc0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    bbc4:	2134      	movs	r1, #52	; 0x34
    bbc6:	fb01 f303 	mul.w	r3, r1, r3
    bbca:	4413      	add	r3, r2
    bbcc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    bbd0:	2b01      	cmp	r3, #1
    bbd2:	d114      	bne.n	bbfe <Adc_Ipw_StopConversionCheckTimeout+0xa2>
    bbd4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    bbd8:	4a1d      	ldr	r2, [pc, #116]	; (bc50 <Adc_Ipw_StopConversionCheckTimeout+0xf4>)
    bbda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bbde:	685a      	ldr	r2, [r3, #4]
    bbe0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    bbe4:	2134      	movs	r1, #52	; 0x34
    bbe6:	fb01 f303 	mul.w	r3, r1, r3
    bbea:	4413      	add	r3, r2
    bbec:	689b      	ldr	r3, [r3, #8]
    bbee:	2b01      	cmp	r3, #1
    bbf0:	d105      	bne.n	bbfe <Adc_Ipw_StopConversionCheckTimeout+0xa2>
    {
        /* Set to Oneshot mode */
        Adc_Ip_SetContinuousMode(PhysicalHwUnitId, FALSE);
    bbf2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    bbf6:	2100      	movs	r1, #0
    bbf8:	4618      	mov	r0, r3
    bbfa:	f7ff f827 	bl	ac4c <Adc_Ip_SetContinuousMode>
    }

    /* Disable all channels */
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    bbfe:	2300      	movs	r3, #0
    bc00:	f88d 3016 	strb.w	r3, [sp, #22]
    bc04:	e013      	b.n	bc2e <Adc_Ipw_StopConversionCheckTimeout+0xd2>
    {
        /* Stop conversion in SC1n register and wait until conversion is aborted. */
        /* Because some channels in chain are not converted yet */
        AdcIpStatus = Adc_Ip_SetDisabledChannel(PhysicalHwUnitId, ChIndex, TRUE);
    bc06:	f89d 3013 	ldrb.w	r3, [sp, #19]
    bc0a:	f89d 1016 	ldrb.w	r1, [sp, #22]
    bc0e:	2201      	movs	r2, #1
    bc10:	4618      	mov	r0, r3
    bc12:	f7ff f8cd 	bl	adb0 <Adc_Ip_SetDisabledChannel>
    bc16:	9003      	str	r0, [sp, #12]
        if (AdcIpStatus == ADC_IP_STATUS_TIMEOUT)
    bc18:	9b03      	ldr	r3, [sp, #12]
    bc1a:	2b02      	cmp	r3, #2
    bc1c:	d102      	bne.n	bc24 <Adc_Ipw_StopConversionCheckTimeout+0xc8>
        {
            Status = E_NOT_OK;
    bc1e:	2301      	movs	r3, #1
    bc20:	f88d 3017 	strb.w	r3, [sp, #23]
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    bc24:	f89d 3016 	ldrb.w	r3, [sp, #22]
    bc28:	3301      	adds	r3, #1
    bc2a:	f88d 3016 	strb.w	r3, [sp, #22]
    bc2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bc32:	4a08      	ldr	r2, [pc, #32]	; (bc54 <Adc_Ipw_StopConversionCheckTimeout+0xf8>)
    bc34:	00db      	lsls	r3, r3, #3
    bc36:	4413      	add	r3, r2
    bc38:	799b      	ldrb	r3, [r3, #6]
    bc3a:	f89d 2016 	ldrb.w	r2, [sp, #22]
    bc3e:	429a      	cmp	r2, r3
    bc40:	d3e1      	bcc.n	bc06 <Adc_Ipw_StopConversionCheckTimeout+0xaa>
        }
    }
    return Status;
    bc42:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    bc46:	4618      	mov	r0, r3
    bc48:	b007      	add	sp, #28
    bc4a:	f85d fb04 	ldr.w	pc, [sp], #4
    bc4e:	bf00      	nop
    bc50:	1fff8d40 	.word	0x1fff8d40
    bc54:	1fff8d70 	.word	0x1fff8d70

0000bc58 <Adc_Ipw_PrepareGroupStart>:
* @return         void
*/
static inline void Adc_Ipw_PrepareGroupStart(Adc_HwUnitType Unit,
                                             const Adc_GroupConfigurationType * GroupPtr,
                                             uint8 CoreId)
{
    bc58:	b500      	push	{lr}
    bc5a:	b085      	sub	sp, #20
    bc5c:	4603      	mov	r3, r0
    bc5e:	9100      	str	r1, [sp, #0]
    bc60:	f88d 3007 	strb.w	r3, [sp, #7]
    bc64:	4613      	mov	r3, r2
    bc66:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_ConversionTimeType ConvTime;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    bc6a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    bc6e:	4a14      	ldr	r2, [pc, #80]	; (bcc0 <Adc_Ipw_PrepareGroupStart+0x68>)
    bc70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc74:	681a      	ldr	r2, [r3, #0]
    bc76:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bc7a:	4413      	add	r3, r2
    bc7c:	7c1b      	ldrb	r3, [r3, #16]
    bc7e:	f88d 300f 	strb.w	r3, [sp, #15]
            Adc_Ip_SetAveraging(PhysicalHwUnitId, TRUE, GroupPtr->AdcIpwGroupConfigPtr->GroupAvgSelectAlternate);
        }
    }
#else /* (ADC_DUAL_CLOCK_MODE == STD_OFF) */
    {
        if ((uint8)STD_ON == GroupPtr->AdcIpwGroupConfigPtr->GroupAvgEnable)
    bc82:	9b00      	ldr	r3, [sp, #0]
    bc84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    bc86:	781b      	ldrb	r3, [r3, #0]
    bc88:	2b01      	cmp	r3, #1
    bc8a:	d108      	bne.n	bc9e <Adc_Ipw_PrepareGroupStart+0x46>
        {
            Adc_Ip_SetAveraging(PhysicalHwUnitId, TRUE, GroupPtr->AdcIpwGroupConfigPtr->GroupAvgSelect);
    bc8c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    bc90:	9b00      	ldr	r3, [sp, #0]
    bc92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    bc94:	685b      	ldr	r3, [r3, #4]
    bc96:	461a      	mov	r2, r3
    bc98:	2101      	movs	r1, #1
    bc9a:	f7fe ff51 	bl	ab40 <Adc_Ip_SetAveraging>
    else
    {
        ConvTime = GroupPtr->AdcIpwGroupConfigPtr->AlternateConvTime;
    }
#else /* (ADC_DUAL_CLOCK_MODE == STD_OFF) */
    ConvTime = GroupPtr->AdcIpwGroupConfigPtr->ConvTime;
    bc9e:	9b00      	ldr	r3, [sp, #0]
    bca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    bca2:	7a1b      	ldrb	r3, [r3, #8]
    bca4:	f88d 300e 	strb.w	r3, [sp, #14]
    (void)CoreId;
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */
    /*  Program Conversion Time */
    Adc_Ip_SetSampleTime(PhysicalHwUnitId, ConvTime);
    bca8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bcac:	f89d 200e 	ldrb.w	r2, [sp, #14]
    bcb0:	4611      	mov	r1, r2
    bcb2:	4618      	mov	r0, r3
    bcb4:	f7fe ff62 	bl	ab7c <Adc_Ip_SetSampleTime>
}
    bcb8:	bf00      	nop
    bcba:	b005      	add	sp, #20
    bcbc:	f85d fb04 	ldr.w	pc, [sp], #4
    bcc0:	1fff8d40 	.word	0x1fff8d40

0000bcc4 <Adc_Ipw_CalculateNumsBitShift>:
* @param[in]      Resolution    Adc resolution enum value
*
* @return         uint8        Number of bits shift
*/
uint8 Adc_Ipw_CalculateNumsBitShift(Adc_Ip_ResolutionType Resolution)
{
    bcc4:	b084      	sub	sp, #16
    bcc6:	9001      	str	r0, [sp, #4]
            /* Default is 12 bits */
            NumsBitShift = 4U;
            break;
    }
#else
    NumsBitShift = 0U;
    bcc8:	2300      	movs	r3, #0
    bcca:	f88d 300f 	strb.w	r3, [sp, #15]
    (void) Resolution;
#endif /* (ADC_RESULT_ALIGNMENT == ADC_ALIGN_LEFT) */

    return NumsBitShift;
    bcce:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    bcd2:	4618      	mov	r0, r3
    bcd4:	b004      	add	sp, #16
    bcd6:	4770      	bx	lr

0000bcd8 <Adc_Ipw_ConfigureConversion>:
void Adc_Ipw_ConfigureConversion(Adc_HwUnitType Unit,
                                 Adc_GroupType Group,
                                 Adc_HwTriggerTimerType Trigger,
                                 uint8 NumChannel,
                                 uint8 CoreId)
{
    bcd8:	b500      	push	{lr}
    bcda:	b08f      	sub	sp, #60	; 0x3c
    bcdc:	9202      	str	r2, [sp, #8]
    bcde:	461a      	mov	r2, r3
    bce0:	4603      	mov	r3, r0
    bce2:	f88d 300f 	strb.w	r3, [sp, #15]
    bce6:	460b      	mov	r3, r1
    bce8:	f8ad 300c 	strh.w	r3, [sp, #12]
    bcec:	4613      	mov	r3, r2
    bcee:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8 ChIndex;
    Adc_ChannelIndexType CurrentChannel;
    Adc_Ip_ChanConfigType ChannelConfig;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    bcf2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    bcf6:	4a6d      	ldr	r2, [pc, #436]	; (beac <Adc_Ipw_ConfigureConversion+0x1d4>)
    bcf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bcfc:	68da      	ldr	r2, [r3, #12]
    bcfe:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    bd02:	005b      	lsls	r3, r3, #1
    bd04:	4413      	add	r3, r2
    bd06:	881b      	ldrh	r3, [r3, #0]
    bd08:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    bd0c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    bd10:	4a66      	ldr	r2, [pc, #408]	; (beac <Adc_Ipw_ConfigureConversion+0x1d4>)
    bd12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd16:	685a      	ldr	r2, [r3, #4]
    bd18:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    bd1c:	2134      	movs	r1, #52	; 0x34
    bd1e:	fb01 f303 	mul.w	r3, r1, r3
    bd22:	4413      	add	r3, r2
    bd24:	930c      	str	r3, [sp, #48]	; 0x30
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    bd26:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    bd2a:	4a60      	ldr	r2, [pc, #384]	; (beac <Adc_Ipw_ConfigureConversion+0x1d4>)
    bd2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd30:	681a      	ldr	r2, [r3, #0]
    bd32:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bd36:	4413      	add	r3, r2
    bd38:	7c1b      	ldrb	r3, [r3, #16]
    bd3a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    Adc_Ip_InputChannelType Channel;
    const Adc_GroupDefType * ChannelsDefinition = NULL_PTR;
    bd3e:	2300      	movs	r3, #0
    bd40:	930a      	str	r3, [sp, #40]	; 0x28

    /* Next channel will be converted */
    CurrentChannel = Adc_axGroupStatus[Group].CurrentChannel;
    bd42:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    bd46:	495a      	ldr	r1, [pc, #360]	; (beb0 <Adc_Ipw_ConfigureConversion+0x1d8>)
    bd48:	4613      	mov	r3, r2
    bd4a:	009b      	lsls	r3, r3, #2
    bd4c:	4413      	add	r3, r2
    bd4e:	009b      	lsls	r3, r3, #2
    bd50:	440b      	add	r3, r1
    bd52:	3310      	adds	r3, #16
    bd54:	781b      	ldrb	r3, [r3, #0]
    bd56:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    /* Get configured channels */
    /* At runtime */
    ChannelsDefinition = Adc_axRuntimeGroupChannel[Group].ChannelPtr;
#else
    /* Pre-configuration */
    ChannelsDefinition = GroupPtr->AssignmentPtr;
    bd5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bd5c:	6a1b      	ldr	r3, [r3, #32]
    bd5e:	930a      	str	r3, [sp, #40]	; 0x28
#endif /* ADC_SETCHANNEL_API */

    /* Configure channels from current to (last channel - 1) */
    for (ChIndex = 0U; ChIndex < (NumChannel - 1U); ChIndex++)
    bd60:	2300      	movs	r3, #0
    bd62:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    bd66:	e030      	b.n	bdca <Adc_Ipw_ConfigureConversion+0xf2>
    {
        /* Physical channel ID */
        Channel = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->ChannelConfigs[ChannelsDefinition[(CurrentChannel + ChIndex)]].Channel;
    bd68:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    bd6c:	4a4f      	ldr	r2, [pc, #316]	; (beac <Adc_Ipw_ConfigureConversion+0x1d4>)
    bd6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd72:	681b      	ldr	r3, [r3, #0]
    bd74:	f89d 200f 	ldrb.w	r2, [sp, #15]
    bd78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    bd7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    bd7e:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    bd82:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    bd86:	440b      	add	r3, r1
    bd88:	005b      	lsls	r3, r3, #1
    bd8a:	990a      	ldr	r1, [sp, #40]	; 0x28
    bd8c:	440b      	add	r3, r1
    bd8e:	881b      	ldrh	r3, [r3, #0]
    bd90:	4619      	mov	r1, r3
    bd92:	460b      	mov	r3, r1
    bd94:	005b      	lsls	r3, r3, #1
    bd96:	440b      	add	r3, r1
    bd98:	009b      	lsls	r3, r3, #2
    bd9a:	4413      	add	r3, r2
    bd9c:	685b      	ldr	r3, [r3, #4]
    bd9e:	9308      	str	r3, [sp, #32]
        /* Channel was changed? */
        if (1U == (TempMask & 1U))
#endif /* ADC_SETCHANNEL_API */
        {
            /* Configure all channels except the last one with interrupts disabled */
            ChannelConfig.ChnIdx = ChIndex;
    bda0:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    bda4:	f88d 3014 	strb.w	r3, [sp, #20]
            ChannelConfig.Channel = Channel;
    bda8:	9b08      	ldr	r3, [sp, #32]
    bdaa:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
            ChannelConfig.InterruptEnable = FALSE;
    bdac:	2300      	movs	r3, #0
    bdae:	f88d 301c 	strb.w	r3, [sp, #28]
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
            Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    bdb2:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    bdb6:	aa05      	add	r2, sp, #20
    bdb8:	4611      	mov	r1, r2
    bdba:	4618      	mov	r0, r3
    bdbc:	f7fe ffc8 	bl	ad50 <Adc_Ip_ConfigChannel>
    for (ChIndex = 0U; ChIndex < (NumChannel - 1U); ChIndex++)
    bdc0:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    bdc4:	3301      	adds	r3, #1
    bdc6:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    bdca:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    bdce:	f89d 300e 	ldrb.w	r3, [sp, #14]
    bdd2:	3b01      	subs	r3, #1
    bdd4:	429a      	cmp	r2, r3
    bdd6:	d3c7      	bcc.n	bd68 <Adc_Ipw_ConfigureConversion+0x90>
    /* Last channel was changed? */
    if (1U == (TempMask & 1U))
#endif
    {
        /* Get channel ID */
        Channel = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->ChannelConfigs[ChannelsDefinition[(CurrentChannel + ChIndex)]].Channel;
    bdd8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    bddc:	4a33      	ldr	r2, [pc, #204]	; (beac <Adc_Ipw_ConfigureConversion+0x1d4>)
    bdde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bde2:	681b      	ldr	r3, [r3, #0]
    bde4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    bde8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    bdec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    bdee:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    bdf2:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    bdf6:	440b      	add	r3, r1
    bdf8:	005b      	lsls	r3, r3, #1
    bdfa:	990a      	ldr	r1, [sp, #40]	; 0x28
    bdfc:	440b      	add	r3, r1
    bdfe:	881b      	ldrh	r3, [r3, #0]
    be00:	4619      	mov	r1, r3
    be02:	460b      	mov	r3, r1
    be04:	005b      	lsls	r3, r3, #1
    be06:	440b      	add	r3, r1
    be08:	009b      	lsls	r3, r3, #2
    be0a:	4413      	add	r3, r2
    be0c:	685b      	ldr	r3, [r3, #4]
    be0e:	9308      	str	r3, [sp, #32]
        ChannelConfig.ChnIdx = ChIndex;
    be10:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    be14:	f88d 3014 	strb.w	r3, [sp, #20]
        ChannelConfig.Channel = Channel;
    be18:	9b08      	ldr	r3, [sp, #32]
    be1a:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
        /* In case of group is configured with interrupt, the complete int bit of the last channel must be enabled */
        if ((uint8)STD_OFF == GroupPtr->AdcWithoutInterrupt)
    be1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    be1e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    be22:	2b00      	cmp	r3, #0
    be24:	d103      	bne.n	be2e <Adc_Ipw_ConfigureConversion+0x156>
        {
            ChannelConfig.InterruptEnable = TRUE;
    be26:	2301      	movs	r3, #1
    be28:	f88d 301c 	strb.w	r3, [sp, #28]
    be2c:	e002      	b.n	be34 <Adc_Ipw_ConfigureConversion+0x15c>
        }
        else
        {
            ChannelConfig.InterruptEnable = FALSE;
    be2e:	2300      	movs	r3, #0
    be30:	f88d 301c 	strb.w	r3, [sp, #28]
        }
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
        /* Configure last channel */
        Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    be34:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    be38:	aa05      	add	r2, sp, #20
    be3a:	4611      	mov	r1, r2
    be3c:	4618      	mov	r0, r3
    be3e:	f7fe ff87 	bl	ad50 <Adc_Ip_ConfigChannel>
    }

#if ((ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF) || (ADC_SETCHANNEL_API == STD_ON))
    for (ChIndex = NumChannel; ChIndex < ADC_MAX_CHAN_COUNT; ChIndex++)
    be42:	f89d 300e 	ldrb.w	r3, [sp, #14]
    be46:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    be4a:	e014      	b.n	be76 <Adc_Ipw_ConfigureConversion+0x19e>
    {
        /* Disable other channels by configuring them as disabled */
        ChannelConfig.ChnIdx = ChIndex;
    be4c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    be50:	f88d 3014 	strb.w	r3, [sp, #20]
        ChannelConfig.Channel = ADC_IP_INPUTCHAN_DISABLED;
    be54:	231f      	movs	r3, #31
    be56:	9306      	str	r3, [sp, #24]
#if (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED))
        ChannelConfig.InterruptEnable = FALSE;
    be58:	2300      	movs	r3, #0
    be5a:	f88d 301c 	strb.w	r3, [sp, #28]
#endif /* (defined(ADC_UNIT_0_END_CONVERSION_NOTIF_USED) || defined(ADC_UNIT_1_END_CONVERSION_NOTIF_USED)) */
        Adc_Ip_ConfigChannel(PhysicalHwUnitId, &ChannelConfig);
    be5e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    be62:	aa05      	add	r2, sp, #20
    be64:	4611      	mov	r1, r2
    be66:	4618      	mov	r0, r3
    be68:	f7fe ff72 	bl	ad50 <Adc_Ip_ConfigChannel>
    for (ChIndex = NumChannel; ChIndex < ADC_MAX_CHAN_COUNT; ChIndex++)
    be6c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    be70:	3301      	adds	r3, #1
    be72:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    be76:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    be7a:	2b0f      	cmp	r3, #15
    be7c:	d9e6      	bls.n	be4c <Adc_Ipw_ConfigureConversion+0x174>
    }
#endif /* (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF) || (ADC_SETCHANNEL_API == STD_ON) */

     /* Save the Sc1Used register equal the number of channels configured */
     Adc_axUnitStatus[Unit].Sc1Used = NumChannel;
    be7e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    be82:	4a0c      	ldr	r2, [pc, #48]	; (beb4 <Adc_Ipw_ConfigureConversion+0x1dc>)
    be84:	00db      	lsls	r3, r3, #3
    be86:	4413      	add	r3, r2
    be88:	f89d 200e 	ldrb.w	r2, [sp, #14]
    be8c:	719a      	strb	r2, [r3, #6]
     /* Start software trigger through PDB or enable PDB hardware trigger */
     Adc_Ipw_ConfigurePdbConversion(Unit, Group, GroupPtr, Trigger, NumChannel);
    be8e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    be92:	f89d 000f 	ldrb.w	r0, [sp, #15]
    be96:	f89d 300e 	ldrb.w	r3, [sp, #14]
    be9a:	9300      	str	r3, [sp, #0]
    be9c:	9b02      	ldr	r3, [sp, #8]
    be9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    bea0:	f7ff fd86 	bl	b9b0 <Adc_Ipw_ConfigurePdbConversion>
}
    bea4:	bf00      	nop
    bea6:	b00f      	add	sp, #60	; 0x3c
    bea8:	f85d fb04 	ldr.w	pc, [sp], #4
    beac:	1fff8d40 	.word	0x1fff8d40
    beb0:	1fff8d48 	.word	0x1fff8d48
    beb4:	1fff8d70 	.word	0x1fff8d70

0000beb8 <Adc_Ipw_Init>:
* @retval         E_NOT_OK          If Power up/Power down activities couldn't return status as expected.
*
*/
Std_ReturnType Adc_Ipw_Init(const Adc_Ipw_Config * AdcIpwCfgPtr,
                            const uint8 CoreId)
{
    beb8:	b500      	push	{lr}
    beba:	b085      	sub	sp, #20
    bebc:	9001      	str	r0, [sp, #4]
    bebe:	460b      	mov	r3, r1
    bec0:	f88d 3003 	strb.w	r3, [sp, #3]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    bec4:	2300      	movs	r3, #0
    bec6:	f88d 300f 	strb.w	r3, [sp, #15]
    Adc_HwUnitType PhysicalHwUnitId = 0U;
    beca:	2300      	movs	r3, #0
    becc:	f88d 300e 	strb.w	r3, [sp, #14]
    Std_ReturnType TimeOutStatus = (Std_ReturnType)E_OK;
    bed0:	2300      	movs	r3, #0
    bed2:	f88d 300d 	strb.w	r3, [sp, #13]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    bed6:	2300      	movs	r3, #0
    bed8:	f88d 300f 	strb.w	r3, [sp, #15]
    bedc:	e027      	b.n	bf2e <Adc_Ipw_Init+0x76>
    {
        /* HW unit enabled on current partition */
        if ((uint8)STD_ON == AdcIpwCfgPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId])
    bede:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bee2:	9a01      	ldr	r2, [sp, #4]
    bee4:	4413      	add	r3, r2
    bee6:	7f9b      	ldrb	r3, [r3, #30]
    bee8:	2b01      	cmp	r3, #1
    beea:	d11b      	bne.n	bf24 <Adc_Ipw_Init+0x6c>
        {
            PhysicalHwUnitId = AdcIpwCfgPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    beec:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bef0:	9a01      	ldr	r2, [sp, #4]
    bef2:	4413      	add	r3, r2
    bef4:	7c1b      	ldrb	r3, [r3, #16]
    bef6:	f88d 300e 	strb.w	r3, [sp, #14]
            Adc_Ip_Init(PhysicalHwUnitId, AdcIpwCfgPtr->AdcConfigPtrArr[LogicalHwUnitId]);
    befa:	f89d 000e 	ldrb.w	r0, [sp, #14]
    befe:	f89d 200f 	ldrb.w	r2, [sp, #15]
    bf02:	9b01      	ldr	r3, [sp, #4]
    bf04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    bf08:	4619      	mov	r1, r3
    bf0a:	f7fe fcb8 	bl	a87e <Adc_Ip_Init>
            Pdb_Adc_Ip_Init(PhysicalHwUnitId, AdcIpwCfgPtr->PdbConfig[LogicalHwUnitId]);
    bf0e:	f89d 000e 	ldrb.w	r0, [sp, #14]
    bf12:	f89d 200f 	ldrb.w	r2, [sp, #15]
    bf16:	9b01      	ldr	r3, [sp, #4]
    bf18:	3202      	adds	r2, #2
    bf1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    bf1e:	4619      	mov	r1, r3
    bf20:	f000 fead 	bl	cc7e <Pdb_Adc_Ip_Init>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    bf24:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bf28:	3301      	adds	r3, #1
    bf2a:	f88d 300f 	strb.w	r3, [sp, #15]
    bf2e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bf32:	2b01      	cmp	r3, #1
    bf34:	d9d3      	bls.n	bede <Adc_Ipw_Init+0x26>
        }
    }

    (void)CoreId;

    return TimeOutStatus;
    bf36:	f89d 300d 	ldrb.w	r3, [sp, #13]
}
    bf3a:	4618      	mov	r0, r3
    bf3c:	b005      	add	sp, #20
    bf3e:	f85d fb04 	ldr.w	pc, [sp], #4

0000bf42 <Adc_Ipw_DeInit>:
* @retval         E_OK              If the operation completed successfully.
* @retval         E_NOT_OK          In case of timeout while waiting for adc hardware operations.
*
*/
Std_ReturnType Adc_Ipw_DeInit(uint8 CoreId)
{
    bf42:	b500      	push	{lr}
    bf44:	b087      	sub	sp, #28
    bf46:	4603      	mov	r3, r0
    bf48:	f88d 3007 	strb.w	r3, [sp, #7]
    Adc_HwUnitType PhysicalHwUnitId = 0U;
    bf4c:	2300      	movs	r3, #0
    bf4e:	f88d 3013 	strb.w	r3, [sp, #19]
    Adc_HwUnitType LogicalHwUnitId = 0U;
    bf52:	2300      	movs	r3, #0
    bf54:	f88d 3017 	strb.w	r3, [sp, #23]
    Adc_GroupType GroupId = 0U;
    bf58:	2300      	movs	r3, #0
    bf5a:	f8ad 3010 	strh.w	r3, [sp, #16]
    Adc_GroupType GroupIter = 0U;
    bf5e:	2300      	movs	r3, #0
    bf60:	f8ad 3014 	strh.w	r3, [sp, #20]
    Std_ReturnType ReturnStatus = E_OK;
    bf64:	2300      	movs	r3, #0
    bf66:	f88d 300f 	strb.w	r3, [sp, #15]

    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    bf6a:	2300      	movs	r3, #0
    bf6c:	f88d 3017 	strb.w	r3, [sp, #23]
    bf70:	e026      	b.n	bfc0 <Adc_Ipw_DeInit+0x7e>
    {
        if (Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcHwUnitArr[LogicalHwUnitId] == (uint8)STD_ON) /* HW unit enabled on current partition */
    bf72:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bf76:	4a2e      	ldr	r2, [pc, #184]	; (c030 <Adc_Ipw_DeInit+0xee>)
    bf78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf7c:	681a      	ldr	r2, [r3, #0]
    bf7e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    bf82:	4413      	add	r3, r2
    bf84:	7f9b      	ldrb	r3, [r3, #30]
    bf86:	2b01      	cmp	r3, #1
    bf88:	d115      	bne.n	bfb6 <Adc_Ipw_DeInit+0x74>
        {
            PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[LogicalHwUnitId];
    bf8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bf8e:	4a28      	ldr	r2, [pc, #160]	; (c030 <Adc_Ipw_DeInit+0xee>)
    bf90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf94:	681a      	ldr	r2, [r3, #0]
    bf96:	f89d 3017 	ldrb.w	r3, [sp, #23]
    bf9a:	4413      	add	r3, r2
    bf9c:	7c1b      	ldrb	r3, [r3, #16]
    bf9e:	f88d 3013 	strb.w	r3, [sp, #19]
            Adc_Ip_DeInit(PhysicalHwUnitId);
    bfa2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    bfa6:	4618      	mov	r0, r3
    bfa8:	f7fe fd40 	bl	aa2c <Adc_Ip_DeInit>
            Pdb_Adc_Ip_DeInit(PhysicalHwUnitId);
    bfac:	f89d 3013 	ldrb.w	r3, [sp, #19]
    bfb0:	4618      	mov	r0, r3
    bfb2:	f000 ff0d 	bl	cdd0 <Pdb_Adc_Ip_DeInit>
    for (LogicalHwUnitId = 0U; LogicalHwUnitId < ADC_IPW_MAX_HW_UNITS_CFG; LogicalHwUnitId++)
    bfb6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    bfba:	3301      	adds	r3, #1
    bfbc:	f88d 3017 	strb.w	r3, [sp, #23]
    bfc0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    bfc4:	2b01      	cmp	r3, #1
    bfc6:	d9d4      	bls.n	bf72 <Adc_Ipw_DeInit+0x30>
        }
    }

    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    bfc8:	2300      	movs	r3, #0
    bfca:	f8ad 3014 	strh.w	r3, [sp, #20]
    bfce:	e01e      	b.n	c00e <Adc_Ipw_DeInit+0xcc>
    {
        GroupId = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIter].GroupId;
    bfd0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bfd4:	4a16      	ldr	r2, [pc, #88]	; (c030 <Adc_Ipw_DeInit+0xee>)
    bfd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bfda:	685a      	ldr	r2, [r3, #4]
    bfdc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    bfe0:	2134      	movs	r1, #52	; 0x34
    bfe2:	fb01 f303 	mul.w	r3, r1, r3
    bfe6:	4413      	add	r3, r2
    bfe8:	881b      	ldrh	r3, [r3, #0]
    bfea:	f8ad 3010 	strh.w	r3, [sp, #16]
        Adc_axRuntimeGroupChannel[GroupId].RuntimeUpdated = FALSE;
#if (ADC_ENABLE_LIMIT_CHECK == STD_ON)
        Adc_axRuntimeGroupChannel[GroupId].AdcRuntimeGroupLimitcheck = FALSE;
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
#endif
        Adc_axGroupStatus[GroupId].ResultsBufferPtr = NULL_PTR;
    bfee:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    bff2:	4910      	ldr	r1, [pc, #64]	; (c034 <Adc_Ipw_DeInit+0xf2>)
    bff4:	4613      	mov	r3, r2
    bff6:	009b      	lsls	r3, r3, #2
    bff8:	4413      	add	r3, r2
    bffa:	009b      	lsls	r3, r3, #2
    bffc:	440b      	add	r3, r1
    bffe:	330c      	adds	r3, #12
    c000:	2200      	movs	r2, #0
    c002:	601a      	str	r2, [r3, #0]
    for (GroupIter = 0U; GroupIter < (Adc_GroupType)Adc_apxCfgPtr[CoreId]->GroupCount; GroupIter++)
    c004:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    c008:	3301      	adds	r3, #1
    c00a:	f8ad 3014 	strh.w	r3, [sp, #20]
    c00e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c012:	4a07      	ldr	r2, [pc, #28]	; (c030 <Adc_Ipw_DeInit+0xee>)
    c014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c018:	891b      	ldrh	r3, [r3, #8]
    c01a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    c01e:	429a      	cmp	r2, r3
    c020:	d3d6      	bcc.n	bfd0 <Adc_Ipw_DeInit+0x8e>
#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
    Adc_aeClockMode[CoreId] = ADC_NORMAL;
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */
#endif /* (ADC_DUAL_CLOCK_MODE == STD_ON) */

    return ReturnStatus;
    c022:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    c026:	4618      	mov	r0, r3
    c028:	b007      	add	sp, #28
    c02a:	f85d fb04 	ldr.w	pc, [sp], #4
    c02e:	bf00      	nop
    c030:	1fff8d40 	.word	0x1fff8d40
    c034:	1fff8d48 	.word	0x1fff8d48

0000c038 <Adc_Ipw_StartNormalConversion>:
* @return         void
*
*/
void Adc_Ipw_StartNormalConversion(Adc_HwUnitType Unit,
                                   uint8 CoreId)
{
    c038:	b500      	push	{lr}
    c03a:	b089      	sub	sp, #36	; 0x24
    c03c:	4603      	mov	r3, r0
    c03e:	460a      	mov	r2, r1
    c040:	f88d 300f 	strb.w	r3, [sp, #15]
    c044:	4613      	mov	r3, r2
    c046:	f88d 300e 	strb.w	r3, [sp, #14]
    Adc_GroupType Group = Adc_axUnitStatus[Unit].SwNormalQueue[0U]; /* Active group in the Queue */
    c04a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c04e:	4a4c      	ldr	r2, [pc, #304]	; (c180 <Adc_Ipw_StartNormalConversion+0x148>)
    c050:	00db      	lsls	r3, r3, #3
    c052:	4413      	add	r3, r2
    c054:	885b      	ldrh	r3, [r3, #2]
    c056:	f8ad 301c 	strh.w	r3, [sp, #28]
#if (defined(ADC_DMA_SUPPORTED) || defined(ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED) || \
    (ADC_ENABLE_LIMIT_CHECK == STD_ON) || (ADC_SETCHANNEL_API == STD_OFF) || \
    (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF))
    Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group]; /* Group index in each partition */
    c05a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c05e:	4a49      	ldr	r2, [pc, #292]	; (c184 <Adc_Ipw_StartNormalConversion+0x14c>)
    c060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c064:	68da      	ldr	r2, [r3, #12]
    c066:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    c06a:	005b      	lsls	r3, r3, #1
    c06c:	4413      	add	r3, r2
    c06e:	881b      	ldrh	r3, [r3, #0]
    c070:	f8ad 301a 	strh.w	r3, [sp, #26]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]); /* Pointer to AdcGroup */
    c074:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c078:	4a42      	ldr	r2, [pc, #264]	; (c184 <Adc_Ipw_StartNormalConversion+0x14c>)
    c07a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c07e:	685a      	ldr	r2, [r3, #4]
    c080:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    c084:	2134      	movs	r1, #52	; 0x34
    c086:	fb01 f303 	mul.w	r3, r1, r3
    c08a:	4413      	add	r3, r2
    c08c:	9305      	str	r3, [sp, #20]
#endif /* (defined(ADC_DMA_SUPPORTED) ||... */
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    c08e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c092:	4a3c      	ldr	r2, [pc, #240]	; (c184 <Adc_Ipw_StartNormalConversion+0x14c>)
    c094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c098:	681a      	ldr	r2, [r3, #0]
    c09a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c09e:	4413      	add	r3, r2
    c0a0:	7c1b      	ldrb	r3, [r3, #16]
    c0a2:	f88d 3013 	strb.w	r3, [sp, #19]
#ifdef ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED
    boolean PdbMode;
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */

    /* Do nothing if there is no request available in queue */
    if ((Adc_axUnitStatus[Unit].SwNormalQueueIndex != (Adc_QueueIndexType)0U)
    c0a6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c0aa:	4a35      	ldr	r2, [pc, #212]	; (c180 <Adc_Ipw_StartNormalConversion+0x148>)
    c0ac:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    c0b0:	b29b      	uxth	r3, r3
    c0b2:	2b00      	cmp	r3, #0
    c0b4:	d05f      	beq.n	c176 <Adc_Ipw_StartNormalConversion+0x13e>
       )
    {

#if (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF)
        /* Configure group params (e.g. conversion time) if needed before starting conversion */
        Adc_Ipw_PrepareGroupStart(Unit, GroupPtr, CoreId);
    c0b6:	f89d 200e 	ldrb.w	r2, [sp, #14]
    c0ba:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c0be:	9905      	ldr	r1, [sp, #20]
    c0c0:	4618      	mov	r0, r3
    c0c2:	f7ff fdc9 	bl	bc58 <Adc_Ipw_PrepareGroupStart>
#endif /* (ADC_SET_ADC_CONV_TIME_ONCE == STD_OFF) */

        /* Reset to start conversion from channel logical index 0 */
        Adc_axGroupStatus[Group].CurrentChannel = 0U;
    c0c6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    c0ca:	492f      	ldr	r1, [pc, #188]	; (c188 <Adc_Ipw_StartNormalConversion+0x150>)
    c0cc:	4613      	mov	r3, r2
    c0ce:	009b      	lsls	r3, r3, #2
    c0d0:	4413      	add	r3, r2
    c0d2:	009b      	lsls	r3, r3, #2
    c0d4:	440b      	add	r3, r1
    c0d6:	3310      	adds	r3, #16
    c0d8:	2200      	movs	r2, #0
    c0da:	701a      	strb	r2, [r3, #0]
#if (ADC_SETCHANNEL_API == STD_ON)
        /* Channel enabled at runtime */
        NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(Adc_axRuntimeGroupChannel[Group].ChannelCount);
#else
        /* Channel enabled from initialzing */
        NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(GroupPtr->AssignedChannelCount);
    c0dc:	9b05      	ldr	r3, [sp, #20]
    c0de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    c0e2:	2b0f      	cmp	r3, #15
    c0e4:	d806      	bhi.n	c0f4 <Adc_Ipw_StartNormalConversion+0xbc>
    c0e6:	9b05      	ldr	r3, [sp, #20]
    c0e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    c0ec:	f003 030f 	and.w	r3, r3, #15
    c0f0:	b2db      	uxtb	r3, r3
    c0f2:	e000      	b.n	c0f6 <Adc_Ipw_StartNormalConversion+0xbe>
    c0f4:	2310      	movs	r3, #16
    c0f6:	f88d 3012 	strb.w	r3, [sp, #18]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

        /* Update Sc1Used for the first time */
        if (0U == Adc_axUnitStatus[Unit].Sc1Used)
    c0fa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c0fe:	4a20      	ldr	r2, [pc, #128]	; (c180 <Adc_Ipw_StartNormalConversion+0x148>)
    c100:	00db      	lsls	r3, r3, #3
    c102:	4413      	add	r3, r2
    c104:	799b      	ldrb	r3, [r3, #6]
    c106:	2b00      	cmp	r3, #0
    c108:	d107      	bne.n	c11a <Adc_Ipw_StartNormalConversion+0xe2>
        {
            Adc_axUnitStatus[Unit].Sc1Used = NumChannel;
    c10a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c10e:	4a1c      	ldr	r2, [pc, #112]	; (c180 <Adc_Ipw_StartNormalConversion+0x148>)
    c110:	00db      	lsls	r3, r3, #3
    c112:	4413      	add	r3, r2
    c114:	f89d 2012 	ldrb.w	r2, [sp, #18]
    c118:	719a      	strb	r2, [r3, #6]
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            /* Clear all of COCO flag by reading Rn registers */
            for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    c11a:	2300      	movs	r3, #0
    c11c:	f88d 301f 	strb.w	r3, [sp, #31]
    c120:	e00c      	b.n	c13c <Adc_Ipw_StartNormalConversion+0x104>
            {
                (void)Adc_Ip_GetConvData(PhysicalHwUnitId, ChIndex);
    c122:	f89d 3013 	ldrb.w	r3, [sp, #19]
    c126:	f89d 201f 	ldrb.w	r2, [sp, #31]
    c12a:	4611      	mov	r1, r2
    c12c:	4618      	mov	r0, r3
    c12e:	f7fe ff03 	bl	af38 <Adc_Ip_GetConvData>
            for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    c132:	f89d 301f 	ldrb.w	r3, [sp, #31]
    c136:	3301      	adds	r3, #1
    c138:	f88d 301f 	strb.w	r3, [sp, #31]
    c13c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c140:	4a0f      	ldr	r2, [pc, #60]	; (c180 <Adc_Ipw_StartNormalConversion+0x148>)
    c142:	00db      	lsls	r3, r3, #3
    c144:	4413      	add	r3, r2
    c146:	799b      	ldrb	r3, [r3, #6]
    c148:	f89d 201f 	ldrb.w	r2, [sp, #31]
    c14c:	429a      	cmp	r2, r3
    c14e:	d3e8      	bcc.n	c122 <Adc_Ipw_StartNormalConversion+0xea>
            }
            Adc_Ip_SetTriggerMode(PhysicalHwUnitId, ADC_IP_TRIGGER_HARDWARE);
    c150:	f89d 3013 	ldrb.w	r3, [sp, #19]
    c154:	2101      	movs	r1, #1
    c156:	4618      	mov	r0, r3
    c158:	f7fe fd60 	bl	ac1c <Adc_Ip_SetTriggerMode>

            /* Update group configuration to registers and start conversion */
            Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
    c15c:	f89d 2012 	ldrb.w	r2, [sp, #18]
    c160:	f8bd 101c 	ldrh.w	r1, [sp, #28]
    c164:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c168:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c16c:	9300      	str	r3, [sp, #0]
    c16e:	4613      	mov	r3, r2
    c170:	220f      	movs	r2, #15
    c172:	f7ff fdb1 	bl	bcd8 <Adc_Ipw_ConfigureConversion>
            /* Reset the update status */
            Adc_axRuntimeGroupChannel[Group].RuntimeUpdated =  FALSE;
        }
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    }
}
    c176:	bf00      	nop
    c178:	b009      	add	sp, #36	; 0x24
    c17a:	f85d fb04 	ldr.w	pc, [sp], #4
    c17e:	bf00      	nop
    c180:	1fff8d70 	.word	0x1fff8d70
    c184:	1fff8d40 	.word	0x1fff8d40
    c188:	1fff8d48 	.word	0x1fff8d48

0000c18c <Adc_Ipw_StopCurrentConversion>:
*
*/
Std_ReturnType Adc_Ipw_StopCurrentConversion(Adc_HwUnitType Unit,
                                             Adc_GroupType Group,
                                             uint8 CoreId)
{
    c18c:	b500      	push	{lr}
    c18e:	b085      	sub	sp, #20
    c190:	4603      	mov	r3, r0
    c192:	f88d 3007 	strb.w	r3, [sp, #7]
    c196:	460b      	mov	r3, r1
    c198:	f8ad 3004 	strh.w	r3, [sp, #4]
    c19c:	4613      	mov	r3, r2
    c19e:	f88d 3006 	strb.w	r3, [sp, #6]
#if ((ADC_BYPASS_ABORT_CHAIN_CHECK == STD_ON) || defined(ADC_DMA_SUPPORTED))
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
#endif /* (ADC_BYPASS_ABORT_CHAIN_CHECK == STD_ON) */
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    c1a2:	2300      	movs	r3, #0
    c1a4:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    c1a8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c1ac:	4a24      	ldr	r2, [pc, #144]	; (c240 <Adc_Ipw_StopCurrentConversion+0xb4>)
    c1ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1b2:	681a      	ldr	r2, [r3, #0]
    c1b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c1b8:	4413      	add	r3, r2
    c1ba:	7c1b      	ldrb	r3, [r3, #16]
    c1bc:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 ChIndex;

    /* Disable Adc hardware unit and clear all of COCO flag by reading Rn register */
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    c1c0:	2300      	movs	r3, #0
    c1c2:	f88d 300f 	strb.w	r3, [sp, #15]
    c1c6:	e014      	b.n	c1f2 <Adc_Ipw_StopCurrentConversion+0x66>
    {
        (void) Adc_Ip_SetDisabledChannel(PhysicalHwUnitId, ChIndex, FALSE);
    c1c8:	f89d 300d 	ldrb.w	r3, [sp, #13]
    c1cc:	f89d 100f 	ldrb.w	r1, [sp, #15]
    c1d0:	2200      	movs	r2, #0
    c1d2:	4618      	mov	r0, r3
    c1d4:	f7fe fdec 	bl	adb0 <Adc_Ip_SetDisabledChannel>

        /* Make a dummy read to clear COCO flag */
        (void) Adc_Ip_GetConvData(PhysicalHwUnitId, ChIndex);
    c1d8:	f89d 300d 	ldrb.w	r3, [sp, #13]
    c1dc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    c1e0:	4611      	mov	r1, r2
    c1e2:	4618      	mov	r0, r3
    c1e4:	f7fe fea8 	bl	af38 <Adc_Ip_GetConvData>
    for (ChIndex = 0U; ChIndex < Adc_axUnitStatus[Unit].Sc1Used; ChIndex++)
    c1e8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c1ec:	3301      	adds	r3, #1
    c1ee:	f88d 300f 	strb.w	r3, [sp, #15]
    c1f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c1f6:	4a13      	ldr	r2, [pc, #76]	; (c244 <Adc_Ipw_StopCurrentConversion+0xb8>)
    c1f8:	00db      	lsls	r3, r3, #3
    c1fa:	4413      	add	r3, r2
    c1fc:	799b      	ldrb	r3, [r3, #6]
    c1fe:	f89d 200f 	ldrb.w	r2, [sp, #15]
    c202:	429a      	cmp	r2, r3
    c204:	d3e0      	bcc.n	c1c8 <Adc_Ipw_StopCurrentConversion+0x3c>
            (void)Dma_Ip_SetLogicChannelCommand(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcDmaChannelLogicId[Unit], DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
        }
    }
#endif /* ADC_DMA_SUPPORTED */
    /* Reset current channel status to 0 */
    Adc_axGroupStatus[Group].CurrentChannel = 0U;
    c206:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    c20a:	490f      	ldr	r1, [pc, #60]	; (c248 <Adc_Ipw_StopCurrentConversion+0xbc>)
    c20c:	4613      	mov	r3, r2
    c20e:	009b      	lsls	r3, r3, #2
    c210:	4413      	add	r3, r2
    c212:	009b      	lsls	r3, r3, #2
    c214:	440b      	add	r3, r1
    c216:	3310      	adds	r3, #16
    c218:	2200      	movs	r2, #0
    c21a:	701a      	strb	r2, [r3, #0]
            Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
        }
    }
#endif /* ADC_CONTINUOUS_NO_INTERRUPT_SUPPORTED */
#else
    Status = Adc_Ipw_StopConversionCheckTimeout(Unit, Group, CoreId);
    c21c:	f89d 2006 	ldrb.w	r2, [sp, #6]
    c220:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    c224:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c228:	4618      	mov	r0, r3
    c22a:	f7ff fc97 	bl	bb5c <Adc_Ipw_StopConversionCheckTimeout>
    c22e:	4603      	mov	r3, r0
    c230:	f88d 300e 	strb.w	r3, [sp, #14]
#endif /* (ADC_BYPASS_ABORT_CHAIN_CHECK == STD_OFF) */

    return Status;
    c234:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    c238:	4618      	mov	r0, r3
    c23a:	b005      	add	sp, #20
    c23c:	f85d fb04 	ldr.w	pc, [sp], #4
    c240:	1fff8d40 	.word	0x1fff8d40
    c244:	1fff8d70 	.word	0x1fff8d70
    c248:	1fff8d48 	.word	0x1fff8d48

0000c24c <Adc_Ipw_CheckValidConversion>:
*
*/
boolean Adc_Ipw_CheckValidConversion(Adc_HwUnitType PhysicalHwUnitId,
                                     Adc_ChannelIndexType StartIndex,
                                     Adc_ChannelIndexType EndIndex)
{
    c24c:	b500      	push	{lr}
    c24e:	b085      	sub	sp, #20
    c250:	4603      	mov	r3, r0
    c252:	f88d 3007 	strb.w	r3, [sp, #7]
    c256:	460b      	mov	r3, r1
    c258:	f88d 3006 	strb.w	r3, [sp, #6]
    c25c:	4613      	mov	r3, r2
    c25e:	f88d 3005 	strb.w	r3, [sp, #5]
    Adc_ChannelIndexType Index;
    boolean ValidConversion = TRUE;
    c262:	2301      	movs	r3, #1
    c264:	f88d 300e 	strb.w	r3, [sp, #14]

    for (Index = StartIndex; Index < EndIndex; Index++)
    c268:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c26c:	f88d 300f 	strb.w	r3, [sp, #15]
    c270:	e019      	b.n	c2a6 <Adc_Ipw_CheckValidConversion+0x5a>
    {
        ValidConversion = Adc_Ip_GetConvCompleteFlag(PhysicalHwUnitId, Index - StartIndex);
    c272:	f89d 0007 	ldrb.w	r0, [sp, #7]
    c276:	f89d 200f 	ldrb.w	r2, [sp, #15]
    c27a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c27e:	1ad3      	subs	r3, r2, r3
    c280:	b2db      	uxtb	r3, r3
    c282:	4619      	mov	r1, r3
    c284:	f7fe fe3e 	bl	af04 <Adc_Ip_GetConvCompleteFlag>
    c288:	4603      	mov	r3, r0
    c28a:	f88d 300e 	strb.w	r3, [sp, #14]
        if (FALSE == ValidConversion)
    c28e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c292:	f083 0301 	eor.w	r3, r3, #1
    c296:	b2db      	uxtb	r3, r3
    c298:	2b00      	cmp	r3, #0
    c29a:	d10b      	bne.n	c2b4 <Adc_Ipw_CheckValidConversion+0x68>
    for (Index = StartIndex; Index < EndIndex; Index++)
    c29c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c2a0:	3301      	adds	r3, #1
    c2a2:	f88d 300f 	strb.w	r3, [sp, #15]
    c2a6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    c2aa:	f89d 3005 	ldrb.w	r3, [sp, #5]
    c2ae:	429a      	cmp	r2, r3
    c2b0:	d3df      	bcc.n	c272 <Adc_Ipw_CheckValidConversion+0x26>
    c2b2:	e000      	b.n	c2b6 <Adc_Ipw_CheckValidConversion+0x6a>
        {
            break;
    c2b4:	bf00      	nop
        }
    }

    return ValidConversion;
    c2b6:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    c2ba:	4618      	mov	r0, r3
    c2bc:	b005      	add	sp, #20
    c2be:	f85d fb04 	ldr.w	pc, [sp], #4

0000c2c2 <Adc_Ipw_ReadGroup>:
*/
Std_ReturnType Adc_Ipw_ReadGroup(const Adc_GroupType Group,
                                 Adc_ValueGroupType * DataPtr,
                                 boolean * Flag,
                                 uint8 CoreId)
{
    c2c2:	b500      	push	{lr}
    c2c4:	b089      	sub	sp, #36	; 0x24
    c2c6:	9102      	str	r1, [sp, #8]
    c2c8:	9201      	str	r2, [sp, #4]
    c2ca:	461a      	mov	r2, r3
    c2cc:	4603      	mov	r3, r0
    c2ce:	f8ad 300e 	strh.w	r3, [sp, #14]
    c2d2:	4613      	mov	r3, r2
    c2d4:	f88d 300d 	strb.w	r3, [sp, #13]
    Std_ReturnType ReadGroupRet = (Std_ReturnType)E_OK;
    c2d8:	2300      	movs	r3, #0
    c2da:	f88d 301f 	strb.w	r3, [sp, #31]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    c2de:	f89d 300d 	ldrb.w	r3, [sp, #13]
    c2e2:	4a33      	ldr	r2, [pc, #204]	; (c3b0 <Adc_Ipw_ReadGroup+0xee>)
    c2e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2e8:	68da      	ldr	r2, [r3, #12]
    c2ea:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    c2ee:	005b      	lsls	r3, r3, #1
    c2f0:	4413      	add	r3, r2
    c2f2:	881b      	ldrh	r3, [r3, #0]
    c2f4:	f8ad 301c 	strh.w	r3, [sp, #28]
    const Adc_GroupConfigurationType * GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    c2f8:	f89d 300d 	ldrb.w	r3, [sp, #13]
    c2fc:	4a2c      	ldr	r2, [pc, #176]	; (c3b0 <Adc_Ipw_ReadGroup+0xee>)
    c2fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c302:	685a      	ldr	r2, [r3, #4]
    c304:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    c308:	2134      	movs	r1, #52	; 0x34
    c30a:	fb01 f303 	mul.w	r3, r1, r3
    c30e:	4413      	add	r3, r2
    c310:	9306      	str	r3, [sp, #24]
    const Adc_HwUnitType LogicalHwUnitId = GroupPtr->AdcLogicalUnitId;
    c312:	9b06      	ldr	r3, [sp, #24]
    c314:	789b      	ldrb	r3, [r3, #2]
    c316:	f88d 3017 	strb.w	r3, [sp, #23]

    /* If the group is configured for without interrupts */
    if ((uint8)STD_ON == GroupPtr->AdcWithoutInterrupt)
    c31a:	9b06      	ldr	r3, [sp, #24]
    c31c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    c320:	2b01      	cmp	r3, #1
    c322:	d124      	bne.n	c36e <Adc_Ipw_ReadGroup+0xac>
    {
        /* Return error if group is not at the first of queue */
        if (ADC_CONV_TYPE_NORMAL == GroupPtr->Type)
    c324:	9b06      	ldr	r3, [sp, #24]
    c326:	68db      	ldr	r3, [r3, #12]
    c328:	2b00      	cmp	r3, #0
    c32a:	d111      	bne.n	c350 <Adc_Ipw_ReadGroup+0x8e>
        {
            if (ADC_TRIGG_SRC_SW == GroupPtr->TriggerSource)
    c32c:	9b06      	ldr	r3, [sp, #24]
    c32e:	695b      	ldr	r3, [r3, #20]
    c330:	2b00      	cmp	r3, #0
    c332:	d10d      	bne.n	c350 <Adc_Ipw_ReadGroup+0x8e>
            {
                if (Group != Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[0U])
    c334:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c338:	4a1e      	ldr	r2, [pc, #120]	; (c3b4 <Adc_Ipw_ReadGroup+0xf2>)
    c33a:	00db      	lsls	r3, r3, #3
    c33c:	4413      	add	r3, r2
    c33e:	885b      	ldrh	r3, [r3, #2]
    c340:	b29b      	uxth	r3, r3
    c342:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    c346:	429a      	cmp	r2, r3
    c348:	d002      	beq.n	c350 <Adc_Ipw_ReadGroup+0x8e>
                {
                    ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    c34a:	2301      	movs	r3, #1
    c34c:	f88d 301f 	strb.w	r3, [sp, #31]
                    ReadGroupRet = (Std_ReturnType)E_NOT_OK;
                }
            }
#endif /* (STD_ON == ADC_HW_TRIGGER_API) */
        }
        if ((Std_ReturnType)E_OK == ReadGroupRet)
    c350:	f89d 301f 	ldrb.w	r3, [sp, #31]
    c354:	2b00      	cmp	r3, #0
    c356:	d124      	bne.n	c3a2 <Adc_Ipw_ReadGroup+0xe0>
        {
            ReadGroupRet = Adc_Ipw_ReadGroupNoInt(GroupPtr, DataPtr, Flag, CoreId);
    c358:	f89d 300d 	ldrb.w	r3, [sp, #13]
    c35c:	9a01      	ldr	r2, [sp, #4]
    c35e:	9902      	ldr	r1, [sp, #8]
    c360:	9806      	ldr	r0, [sp, #24]
    c362:	f7ff f91f 	bl	b5a4 <Adc_Ipw_ReadGroupNoInt>
    c366:	4603      	mov	r3, r0
    c368:	f88d 301f 	strb.w	r3, [sp, #31]
    c36c:	e019      	b.n	c3a2 <Adc_Ipw_ReadGroup+0xe0>
        }
    }
    else  /* If the group is configured with interrupts */
    {
        if (ADC_BUSY == Adc_axGroupStatus[Group].Conversion)
    c36e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    c372:	4911      	ldr	r1, [pc, #68]	; (c3b8 <Adc_Ipw_ReadGroup+0xf6>)
    c374:	4613      	mov	r3, r2
    c376:	009b      	lsls	r3, r3, #2
    c378:	4413      	add	r3, r2
    c37a:	009b      	lsls	r3, r3, #2
    c37c:	440b      	add	r3, r1
    c37e:	681b      	ldr	r3, [r3, #0]
    c380:	2b01      	cmp	r3, #1
    c382:	d102      	bne.n	c38a <Adc_Ipw_ReadGroup+0xc8>
        {
            ReadGroupRet = (Std_ReturnType)E_NOT_OK;
    c384:	2301      	movs	r3, #1
    c386:	f88d 301f 	strb.w	r3, [sp, #31]
        }

        if ((Std_ReturnType)E_OK == ReadGroupRet)
    c38a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    c38e:	2b00      	cmp	r3, #0
    c390:	d107      	bne.n	c3a2 <Adc_Ipw_ReadGroup+0xe0>
        {
            Adc_Ipw_WriteDataBuffer(Group, DataPtr, CoreId);
    c392:	f89d 200d 	ldrb.w	r2, [sp, #13]
    c396:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    c39a:	9902      	ldr	r1, [sp, #8]
    c39c:	4618      	mov	r0, r3
    c39e:	f7ff f949 	bl	b634 <Adc_Ipw_WriteDataBuffer>
        }
    }

    return ReadGroupRet;
    c3a2:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    c3a6:	4618      	mov	r0, r3
    c3a8:	b009      	add	sp, #36	; 0x24
    c3aa:	f85d fb04 	ldr.w	pc, [sp], #4
    c3ae:	bf00      	nop
    c3b0:	1fff8d40 	.word	0x1fff8d40
    c3b4:	1fff8d70 	.word	0x1fff8d70
    c3b8:	1fff8d48 	.word	0x1fff8d48

0000c3bc <Adc_Ipw_Calibrate>:

#if (ADC_CALIBRATION == STD_ON)
void Adc_Ipw_Calibrate(Adc_HwUnitType Unit,
                       Adc_CalibrationStatusType * Status,
                       uint8 CoreId)
{
    c3bc:	b500      	push	{lr}
    c3be:	b085      	sub	sp, #20
    c3c0:	4603      	mov	r3, r0
    c3c2:	9100      	str	r1, [sp, #0]
    c3c4:	f88d 3007 	strb.w	r3, [sp, #7]
    c3c8:	4613      	mov	r3, r2
    c3ca:	f88d 3006 	strb.w	r3, [sp, #6]
    Adc_Ip_StatusType IpStatus;
    const Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    c3ce:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c3d2:	4a0e      	ldr	r2, [pc, #56]	; (c40c <Adc_Ipw_Calibrate+0x50>)
    c3d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3d8:	681a      	ldr	r2, [r3, #0]
    c3da:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c3de:	4413      	add	r3, r2
    c3e0:	7c1b      	ldrb	r3, [r3, #16]
    c3e2:	f88d 300f 	strb.w	r3, [sp, #15]

    Status->AdcUnitSelfTestStatus = E_OK;
    c3e6:	9b00      	ldr	r3, [sp, #0]
    c3e8:	2200      	movs	r2, #0
    c3ea:	701a      	strb	r2, [r3, #0]
    /* Call IPL calibration function */
    IpStatus = Adc_Ip_DoCalibration(PhysicalHwUnitId);
    c3ec:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c3f0:	4618      	mov	r0, r3
    c3f2:	f7fe fdb9 	bl	af68 <Adc_Ip_DoCalibration>
    c3f6:	9002      	str	r0, [sp, #8]

    if (IpStatus != ADC_IP_STATUS_SUCCESS)
    c3f8:	9b02      	ldr	r3, [sp, #8]
    c3fa:	2b00      	cmp	r3, #0
    c3fc:	d002      	beq.n	c404 <Adc_Ipw_Calibrate+0x48>
    {
        Status->AdcUnitSelfTestStatus = E_NOT_OK;
    c3fe:	9b00      	ldr	r3, [sp, #0]
    c400:	2201      	movs	r2, #1
    c402:	701a      	strb	r2, [r3, #0]
    }
}
    c404:	bf00      	nop
    c406:	b005      	add	sp, #20
    c408:	f85d fb04 	ldr.w	pc, [sp], #4
    c40c:	1fff8d40 	.word	0x1fff8d40

0000c410 <Adc_GetCoreID>:
*
* @return      uint8  the core number.
*/
uint8 Adc_GetCoreID(void)
{
    return 0U;
    c410:	2300      	movs	r3, #0
}
    c412:	4618      	mov	r0, r3
    c414:	4770      	bx	lr
    c416:	bf00      	nop

0000c418 <Adc_Ipw_UpdateQueue>:
* @return         void
*
*/
static inline void Adc_Ipw_UpdateQueue(Adc_HwUnitType Unit,
                                       uint8 CoreId)
{
    c418:	b500      	push	{lr}
    c41a:	b083      	sub	sp, #12
    c41c:	4603      	mov	r3, r0
    c41e:	460a      	mov	r2, r1
    c420:	f88d 3007 	strb.w	r3, [sp, #7]
    c424:	4613      	mov	r3, r2
    c426:	f88d 3006 	strb.w	r3, [sp, #6]
#if (ADC_ENABLE_QUEUING == STD_ON)
    /* Remove current request element in queue */
    Adc_Ipw_RemoveFromQueue(Unit, 0U);
    c42a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c42e:	2100      	movs	r1, #0
    c430:	4618      	mov	r0, r3
    c432:	f7fe fff3 	bl	b41c <Adc_Ipw_RemoveFromQueue>
#if (ADC_ENABLE_START_STOP_GROUP_API == STD_ON)
    if (Adc_axUnitStatus[Unit].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    c436:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c43a:	4a09      	ldr	r2, [pc, #36]	; (c460 <Adc_Ipw_UpdateQueue+0x48>)
    c43c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    c440:	b29b      	uxth	r3, r3
    c442:	2b00      	cmp	r3, #0
    c444:	d007      	beq.n	c456 <Adc_Ipw_UpdateQueue+0x3e>
    {
        /* Start conversion if request elements are still available in queue */
        Adc_Ipw_StartNormalConversion(Unit, CoreId);
    c446:	f89d 2006 	ldrb.w	r2, [sp, #6]
    c44a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c44e:	4611      	mov	r1, r2
    c450:	4618      	mov	r0, r3
    c452:	f7ff fdf1 	bl	c038 <Adc_Ipw_StartNormalConversion>
#else
    /* No element will be present in the queue */
    Adc_axUnitStatus[Unit].SwNormalQueueIndex = (Adc_QueueIndexType)0;
#endif /* ADC_ENABLE_QUEUING == STD_ON */
    (void)CoreId;
}
    c456:	bf00      	nop
    c458:	b003      	add	sp, #12
    c45a:	f85d fb04 	ldr.w	pc, [sp], #4
    c45e:	bf00      	nop
    c460:	1fff8d70 	.word	0x1fff8d70

0000c464 <Adc_Ipw_CheckConversionChannels>:
*/
static inline Std_ReturnType Adc_Ipw_CheckConversionChannels(Adc_HwUnitType Unit,
                                                            Adc_GroupType Group,
                                                            Adc_StreamNumSampleType GroupSamples,
                                                            uint8 CoreId)
{
    c464:	b510      	push	{r4, lr}
    c466:	b08a      	sub	sp, #40	; 0x28
    c468:	4604      	mov	r4, r0
    c46a:	4608      	mov	r0, r1
    c46c:	4611      	mov	r1, r2
    c46e:	461a      	mov	r2, r3
    c470:	4623      	mov	r3, r4
    c472:	f88d 300f 	strb.w	r3, [sp, #15]
    c476:	4603      	mov	r3, r0
    c478:	f8ad 300c 	strh.w	r3, [sp, #12]
    c47c:	460b      	mov	r3, r1
    c47e:	f8ad 300a 	strh.w	r3, [sp, #10]
    c482:	4613      	mov	r3, r2
    c484:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    c488:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c48c:	4a68      	ldr	r2, [pc, #416]	; (c630 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    c48e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c492:	68da      	ldr	r2, [r3, #12]
    c494:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    c498:	005b      	lsls	r3, r3, #1
    c49a:	4413      	add	r3, r2
    c49c:	881b      	ldrh	r3, [r3, #0]
    c49e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    const Adc_GroupConfigurationType * GroupPtr; /* Pointer to AdcGroup */
    Adc_ChannelIndexType CurrentChannel = Adc_axGroupStatus[Group].CurrentChannel;
    c4a2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    c4a6:	4963      	ldr	r1, [pc, #396]	; (c634 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    c4a8:	4613      	mov	r3, r2
    c4aa:	009b      	lsls	r3, r3, #2
    c4ac:	4413      	add	r3, r2
    c4ae:	009b      	lsls	r3, r3, #2
    c4b0:	440b      	add	r3, r1
    c4b2:	3310      	adds	r3, #16
    c4b4:	781b      	ldrb	r3, [r3, #0]
    c4b6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    Adc_ChannelIndexType Temp;
    Adc_ChannelIndexType Index;
    uint16 ConvResult;
    Adc_ValueGroupType * ResultIndex = NULL_PTR;
    c4ba:	2300      	movs	r3, #0
    c4bc:	9307      	str	r3, [sp, #28]
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    c4be:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c4c2:	4a5b      	ldr	r2, [pc, #364]	; (c630 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    c4c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c4c8:	681a      	ldr	r2, [r3, #0]
    c4ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c4ce:	4413      	add	r3, r2
    c4d0:	7c1b      	ldrb	r3, [r3, #16]
    c4d2:	f88d 301b 	strb.w	r3, [sp, #27]
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    c4d6:	2300      	movs	r3, #0
    c4d8:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    const uint8 NumsBitShift = Adc_Ipw_CalculateNumsBitShift(Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcConfigPtrArr[Unit]->Resolution);
    c4dc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c4e0:	4a53      	ldr	r2, [pc, #332]	; (c630 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    c4e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c4e6:	681b      	ldr	r3, [r3, #0]
    c4e8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    c4ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    c4f0:	695b      	ldr	r3, [r3, #20]
    c4f2:	4618      	mov	r0, r3
    c4f4:	f7ff fbe6 	bl	bcc4 <Adc_Ipw_CalculateNumsBitShift>
    c4f8:	4603      	mov	r3, r0
    c4fa:	f88d 301a 	strb.w	r3, [sp, #26]

    /* record the result of the Channel conversion and update group status */
#if (ADC_SETCHANNEL_API == STD_ON)
    Index = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    Index = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AssignedChannelCount;
    c4fe:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c502:	4a4b      	ldr	r2, [pc, #300]	; (c630 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    c504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c508:	685a      	ldr	r2, [r3, #4]
    c50a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    c50e:	2134      	movs	r1, #52	; 0x34
    c510:	fb01 f303 	mul.w	r3, r1, r3
    c514:	4413      	add	r3, r2
    c516:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    c51a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    c51e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c522:	4a43      	ldr	r2, [pc, #268]	; (c630 <Adc_Ipw_CheckConversionChannels+0x1cc>)
    c524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c528:	685a      	ldr	r2, [r3, #4]
    c52a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    c52e:	2134      	movs	r1, #52	; 0x34
    c530:	fb01 f303 	mul.w	r3, r1, r3
    c534:	4413      	add	r3, r2
    c536:	9305      	str	r3, [sp, #20]

    if (CurrentChannel <= Index)
    c538:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    c53c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    c540:	429a      	cmp	r2, r3
    c542:	d870      	bhi.n	c626 <Adc_Ipw_CheckConversionChannels+0x1c2>
    {
        /* Calculate the index of the first channel in the previous configuration */
        Temp = (Adc_ChannelIndexType)ADC_IPW_PREV_CHANNEL_INDEX(CurrentChannel);
    c544:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    c548:	f003 030f 	and.w	r3, r3, #15
    c54c:	b2db      	uxtb	r3, r3
    c54e:	2b00      	cmp	r3, #0
    c550:	d104      	bne.n	c55c <Adc_Ipw_CheckConversionChannels+0xf8>
    c552:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    c556:	3b10      	subs	r3, #16
    c558:	b2db      	uxtb	r3, r3
    c55a:	e004      	b.n	c566 <Adc_Ipw_CheckConversionChannels+0x102>
    c55c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    c560:	f023 030f 	bic.w	r3, r3, #15
    c564:	b2db      	uxtb	r3, r3
    c566:	f88d 3013 	strb.w	r3, [sp, #19]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
        /* Get the result buffer pointer */
        if (FALSE == GroupPtr->StreamResultGroupMultiSets)
        {
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
            ResultIndex = &(Adc_axGroupStatus[Group].ResultsBufferPtr[Adc_axGroupStatus[Group].ResultIndex]);
    c56a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    c56e:	4931      	ldr	r1, [pc, #196]	; (c634 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    c570:	4613      	mov	r3, r2
    c572:	009b      	lsls	r3, r3, #2
    c574:	4413      	add	r3, r2
    c576:	009b      	lsls	r3, r3, #2
    c578:	440b      	add	r3, r1
    c57a:	330c      	adds	r3, #12
    c57c:	6819      	ldr	r1, [r3, #0]
    c57e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    c582:	482c      	ldr	r0, [pc, #176]	; (c634 <Adc_Ipw_CheckConversionChannels+0x1d0>)
    c584:	4613      	mov	r3, r2
    c586:	009b      	lsls	r3, r3, #2
    c588:	4413      	add	r3, r2
    c58a:	009b      	lsls	r3, r3, #2
    c58c:	4403      	add	r3, r0
    c58e:	3308      	adds	r3, #8
    c590:	881b      	ldrh	r3, [r3, #0]
    c592:	b29b      	uxth	r3, r3
    c594:	005b      	lsls	r3, r3, #1
    c596:	440b      	add	r3, r1
    c598:	9307      	str	r3, [sp, #28]
        {
            ResultIndex = &(Adc_axGroupStatus[Group].ResultsBufferPtr[(Adc_axGroupStatus[Group].ResultIndex * Index)]);
        }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */

        ValidConversion = Adc_Ipw_CheckValidConversion(PhysicalHwUnitId, Temp, CurrentChannel);
    c59a:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    c59e:	f89d 1013 	ldrb.w	r1, [sp, #19]
    c5a2:	f89d 301b 	ldrb.w	r3, [sp, #27]
    c5a6:	4618      	mov	r0, r3
    c5a8:	f7ff fe50 	bl	c24c <Adc_Ipw_CheckValidConversion>
    c5ac:	4603      	mov	r3, r0
    c5ae:	f88d 3012 	strb.w	r3, [sp, #18]

        if (TRUE == ValidConversion)
    c5b2:	f89d 3012 	ldrb.w	r3, [sp, #18]
    c5b6:	2b00      	cmp	r3, #0
    c5b8:	d032      	beq.n	c620 <Adc_Ipw_CheckConversionChannels+0x1bc>
        {
            /* For each of channels in the list of previous configuration, read data and take result into user buffer */
            for (Index = Temp; Index < CurrentChannel; Index++)
    c5ba:	f89d 3013 	ldrb.w	r3, [sp, #19]
    c5be:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    c5c2:	e026      	b.n	c612 <Adc_Ipw_CheckConversionChannels+0x1ae>
            {
                ConvResult = Adc_Ip_GetConvData(PhysicalHwUnitId, Index - Temp);
    c5c4:	f89d 001b 	ldrb.w	r0, [sp, #27]
    c5c8:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    c5cc:	f89d 3013 	ldrb.w	r3, [sp, #19]
    c5d0:	1ad3      	subs	r3, r2, r3
    c5d2:	b2db      	uxtb	r3, r3
    c5d4:	4619      	mov	r1, r3
    c5d6:	f7fe fcaf 	bl	af38 <Adc_Ip_GetConvData>
    c5da:	4603      	mov	r3, r0
    c5dc:	f8ad 3010 	strh.w	r3, [sp, #16]
                /* Assumption: the width of the register is less than 16 */
                ConvResult = ConvResult << (NumsBitShift);
    c5e0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    c5e4:	f89d 301a 	ldrb.w	r3, [sp, #26]
    c5e8:	fa02 f303 	lsl.w	r3, r2, r3
    c5ec:	f8ad 3010 	strh.w	r3, [sp, #16]
                else
                {
                    Adc_Ipw_ReadData(GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);
                }
#else
                Adc_Ipw_ReadData(GroupPtr, ResultIndex, GroupSamples, Index, ConvResult);
    c5f0:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
    c5f4:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    c5f8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    c5fc:	9300      	str	r3, [sp, #0]
    c5fe:	460b      	mov	r3, r1
    c600:	9907      	ldr	r1, [sp, #28]
    c602:	9805      	ldr	r0, [sp, #20]
    c604:	f000 fa02 	bl	ca0c <Adc_Ipw_ReadData>
            for (Index = Temp; Index < CurrentChannel; Index++)
    c608:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    c60c:	3301      	adds	r3, #1
    c60e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    c612:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    c616:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    c61a:	429a      	cmp	r2, r3
    c61c:	d3d2      	bcc.n	c5c4 <Adc_Ipw_CheckConversionChannels+0x160>
    c61e:	e002      	b.n	c626 <Adc_Ipw_CheckConversionChannels+0x1c2>
#endif /* ADC_ENABLE_LIMIT_CHECK == STD_ON */
            }
        }
        else
        {
            Status = (Std_ReturnType)E_NOT_OK;
    c620:	2301      	movs	r3, #1
    c622:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        }
    }

    return Status;
    c626:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
}
    c62a:	4618      	mov	r0, r3
    c62c:	b00a      	add	sp, #40	; 0x28
    c62e:	bd10      	pop	{r4, pc}
    c630:	1fff8d40 	.word	0x1fff8d40
    c634:	1fff8d48 	.word	0x1fff8d48

0000c638 <Adc_Ipw_RestartConversion>:
* @return         void
*/
static inline void Adc_Ipw_RestartConversion(Adc_HwUnitType Unit,
                                             Adc_GroupType Group,
                                             uint8 CoreId)
{
    c638:	b500      	push	{lr}
    c63a:	b087      	sub	sp, #28
    c63c:	4603      	mov	r3, r0
    c63e:	f88d 300f 	strb.w	r3, [sp, #15]
    c642:	460b      	mov	r3, r1
    c644:	f8ad 300c 	strh.w	r3, [sp, #12]
    c648:	4613      	mov	r3, r2
    c64a:	f88d 300e 	strb.w	r3, [sp, #14]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    c64e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c652:	4a33      	ldr	r2, [pc, #204]	; (c720 <Adc_Ipw_RestartConversion+0xe8>)
    c654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c658:	68da      	ldr	r2, [r3, #12]
    c65a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    c65e:	005b      	lsls	r3, r3, #1
    c660:	4413      	add	r3, r2
    c662:	881b      	ldrh	r3, [r3, #0]
    c664:	f8ad 3016 	strh.w	r3, [sp, #22]
    const uint32 AdcDmaLogicChId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.AdcDmaChannelLogicId[Unit];
    uint16 ResultIndex;
#endif /*ADC_DMA_SUPPORTED*/
    uint8 NumChannel;
    Adc_ChannelIndexType ChannelCount;
    Adc_HwUnitType PhysicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->AdcPhysicalIdArr[Unit];
    c668:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c66c:	4a2c      	ldr	r2, [pc, #176]	; (c720 <Adc_Ipw_RestartConversion+0xe8>)
    c66e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c672:	681a      	ldr	r2, [r3, #0]
    c674:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c678:	4413      	add	r3, r2
    c67a:	7c1b      	ldrb	r3, [r3, #16]
    c67c:	f88d 3015 	strb.w	r3, [sp, #21]
#if (ADC_SETCHANNEL_API == STD_ON)
    /* Get channel count in case of changing at runtime */
    ChannelCount = Adc_axRuntimeGroupChannel[Group].ChannelCount;
#else
    /* Get channel count from configuration */
    ChannelCount = Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AssignedChannelCount;
    c680:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c684:	4a26      	ldr	r2, [pc, #152]	; (c720 <Adc_Ipw_RestartConversion+0xe8>)
    c686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c68a:	685a      	ldr	r2, [r3, #4]
    c68c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    c690:	2134      	movs	r1, #52	; 0x34
    c692:	fb01 f303 	mul.w	r3, r1, r3
    c696:	4413      	add	r3, r2
    c698:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    c69c:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

    /* Get left channel from channel count */
    NumChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(ChannelCount);
    c6a0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    c6a4:	2b0f      	cmp	r3, #15
    c6a6:	d805      	bhi.n	c6b4 <Adc_Ipw_RestartConversion+0x7c>
    c6a8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    c6ac:	f003 030f 	and.w	r3, r3, #15
    c6b0:	b2db      	uxtb	r3, r3
    c6b2:	e000      	b.n	c6b6 <Adc_Ipw_RestartConversion+0x7e>
    c6b4:	2310      	movs	r3, #16
    c6b6:	f88d 3013 	strb.w	r3, [sp, #19]
        if (FALSE == GroupPtr->AdcOptimizeDmaStream)
#endif /*  (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /*ADC_DMA_SUPPORTED*/
        {
            /* Incase of the number of channels in group less than the SC1 register used then update group status and start Pdb */
            if (ChannelCount <= ADC_MAX_CHAN_COUNT)
    c6ba:	f89d 3014 	ldrb.w	r3, [sp, #20]
    c6be:	2b10      	cmp	r3, #16
    c6c0:	d811      	bhi.n	c6e6 <Adc_Ipw_RestartConversion+0xae>
            {
                /* No need to re-configure channels if they are not changed */
                /* End of chain interrupt (if used) is still in last channel (= ChannelCount) */
                Adc_axGroupStatus[Group].CurrentChannel = ChannelCount;
    c6c2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    c6c6:	4917      	ldr	r1, [pc, #92]	; (c724 <Adc_Ipw_RestartConversion+0xec>)
    c6c8:	4613      	mov	r3, r2
    c6ca:	009b      	lsls	r3, r3, #2
    c6cc:	4413      	add	r3, r2
    c6ce:	009b      	lsls	r3, r3, #2
    c6d0:	440b      	add	r3, r1
    c6d2:	3310      	adds	r3, #16
    c6d4:	f89d 2014 	ldrb.w	r2, [sp, #20]
    c6d8:	701a      	strb	r2, [r3, #0]

                /* Trigger PDB by software */
                Pdb_Adc_Ip_SwTrigger(PhysicalHwUnitId);
    c6da:	f89d 3015 	ldrb.w	r3, [sp, #21]
    c6de:	4618      	mov	r0, r3
    c6e0:	f000 fc68 	bl	cfb4 <Pdb_Adc_Ip_SwTrigger>
                    Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
                }
            }
        }
    }
}
    c6e4:	e017      	b.n	c716 <Adc_Ipw_RestartConversion+0xde>
                Adc_axGroupStatus[Group].CurrentChannel = 0U;
    c6e6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    c6ea:	490e      	ldr	r1, [pc, #56]	; (c724 <Adc_Ipw_RestartConversion+0xec>)
    c6ec:	4613      	mov	r3, r2
    c6ee:	009b      	lsls	r3, r3, #2
    c6f0:	4413      	add	r3, r2
    c6f2:	009b      	lsls	r3, r3, #2
    c6f4:	440b      	add	r3, r1
    c6f6:	3310      	adds	r3, #16
    c6f8:	2200      	movs	r2, #0
    c6fa:	701a      	strb	r2, [r3, #0]
                    Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, NumChannel, CoreId);
    c6fc:	f89d 2013 	ldrb.w	r2, [sp, #19]
    c700:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    c704:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c708:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c70c:	9300      	str	r3, [sp, #0]
    c70e:	4613      	mov	r3, r2
    c710:	220f      	movs	r2, #15
    c712:	f7ff fae1 	bl	bcd8 <Adc_Ipw_ConfigureConversion>
}
    c716:	bf00      	nop
    c718:	b007      	add	sp, #28
    c71a:	f85d fb04 	ldr.w	pc, [sp], #4
    c71e:	bf00      	nop
    c720:	1fff8d40 	.word	0x1fff8d40
    c724:	1fff8d48 	.word	0x1fff8d48

0000c728 <Adc_Ipw_GetCurrentSampleCount>:
                                                   , Adc_HwUnitType Unit,
                                                   Adc_StreamNumSampleType GroupSamples,
                                                   uint8 CoreId
                                                #endif
                                                  )
{
    c728:	b084      	sub	sp, #16
    c72a:	4603      	mov	r3, r0
    c72c:	f8ad 3006 	strh.w	r3, [sp, #6]
    }
    else
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /* ADC_DMA_SUPPORTED */
    {
        CurrentSampleCount = Adc_axGroupStatus[Group].ResultIndex;
    c730:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    c734:	4907      	ldr	r1, [pc, #28]	; (c754 <Adc_Ipw_GetCurrentSampleCount+0x2c>)
    c736:	4613      	mov	r3, r2
    c738:	009b      	lsls	r3, r3, #2
    c73a:	4413      	add	r3, r2
    c73c:	009b      	lsls	r3, r3, #2
    c73e:	440b      	add	r3, r1
    c740:	3308      	adds	r3, #8
    c742:	881b      	ldrh	r3, [r3, #0]
    c744:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    return CurrentSampleCount;
    c748:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    c74c:	4618      	mov	r0, r3
    c74e:	b004      	add	sp, #16
    c750:	4770      	bx	lr
    c752:	bf00      	nop
    c754:	1fff8d48 	.word	0x1fff8d48

0000c758 <Adc_Ipw_UpdateSoftwareGroupState>:
*/
static inline void Adc_Ipw_UpdateSoftwareGroupState(Adc_HwUnitType Unit,
                                                    Adc_GroupType Group,
                                                    Adc_StreamNumSampleType GroupSamples,
                                                    uint8 CoreId)
{
    c758:	b510      	push	{r4, lr}
    c75a:	b084      	sub	sp, #16
    c75c:	4604      	mov	r4, r0
    c75e:	4608      	mov	r0, r1
    c760:	4611      	mov	r1, r2
    c762:	461a      	mov	r2, r3
    c764:	4623      	mov	r3, r4
    c766:	f88d 3007 	strb.w	r3, [sp, #7]
    c76a:	4603      	mov	r3, r0
    c76c:	f8ad 3004 	strh.w	r3, [sp, #4]
    c770:	460b      	mov	r3, r1
    c772:	f8ad 3002 	strh.w	r3, [sp, #2]
    c776:	4613      	mov	r3, r2
    c778:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 CurrentSampleCount;
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    c77c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c780:	4a4f      	ldr	r2, [pc, #316]	; (c8c0 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    c782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c786:	68da      	ldr	r2, [r3, #12]
    c788:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    c78c:	005b      	lsls	r3, r3, #1
    c78e:	4413      	add	r3, r2
    c790:	881b      	ldrh	r3, [r3, #0]
    c792:	f8ad 300e 	strh.w	r3, [sp, #14]
    Dma_Ip_LogicChannelScatterGatherListType LocTransferList[1U];
#endif /* ADC_DMA_SUPPORTED */

    /* At least once the group was converted */
    /* It's already check for validation */
    Adc_axGroupStatus[Group].AlreadyConverted = ADC_ALREADY_CONVERTED;
    c796:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    c79a:	494a      	ldr	r1, [pc, #296]	; (c8c4 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    c79c:	4613      	mov	r3, r2
    c79e:	009b      	lsls	r3, r3, #2
    c7a0:	4413      	add	r3, r2
    c7a2:	009b      	lsls	r3, r3, #2
    c7a4:	440b      	add	r3, r1
    c7a6:	3304      	adds	r3, #4
    c7a8:	2201      	movs	r2, #1
    c7aa:	601a      	str	r2, [r3, #0]
    /* Although updating Conversion is a RMW operation, it does not need an
     * exclusive area because two simultaneous interrupts will not access the
     * same areas e.g. the interrupt for ADC1 will not have the same group as
     * an interrupt on ADC0 */
    /* Change when configuration is ADC streaming access mode */
    if (ADC_BUSY == Adc_axGroupStatus[Group].Conversion)
    c7ac:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    c7b0:	4944      	ldr	r1, [pc, #272]	; (c8c4 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    c7b2:	4613      	mov	r3, r2
    c7b4:	009b      	lsls	r3, r3, #2
    c7b6:	4413      	add	r3, r2
    c7b8:	009b      	lsls	r3, r3, #2
    c7ba:	440b      	add	r3, r1
    c7bc:	681b      	ldr	r3, [r3, #0]
    c7be:	2b01      	cmp	r3, #1
    c7c0:	d109      	bne.n	c7d6 <Adc_Ipw_UpdateSoftwareGroupState+0x7e>
    {
        /* SWS_Adc_00224 */
        Adc_axGroupStatus[Group].Conversion = ADC_COMPLETED;
    c7c2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    c7c6:	493f      	ldr	r1, [pc, #252]	; (c8c4 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    c7c8:	4613      	mov	r3, r2
    c7ca:	009b      	lsls	r3, r3, #2
    c7cc:	4413      	add	r3, r2
    c7ce:	009b      	lsls	r3, r3, #2
    c7d0:	440b      	add	r3, r1
    c7d2:	2202      	movs	r2, #2
    c7d4:	601a      	str	r2, [r3, #0]
    }

#if (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS)
    CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount(Group, Unit, GroupSamples, CoreId);
#else
    CurrentSampleCount = Adc_Ipw_GetCurrentSampleCount(Group);
    c7d6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    c7da:	4618      	mov	r0, r3
    c7dc:	f7ff ffa4 	bl	c728 <Adc_Ipw_GetCurrentSampleCount>
    c7e0:	9002      	str	r0, [sp, #8]
#endif /* (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */

    /* If buffer is full of samples */
    if (CurrentSampleCount >= GroupSamples)
    c7e2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    c7e6:	9a02      	ldr	r2, [sp, #8]
    c7e8:	429a      	cmp	r2, r3
    c7ea:	d35d      	bcc.n	c8a8 <Adc_Ipw_UpdateSoftwareGroupState+0x150>
    {
        /* Change to stream complete according to AutoSar diagram */
        Adc_axGroupStatus[Group].Conversion = ADC_STREAM_COMPLETED;
    c7ec:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    c7f0:	4934      	ldr	r1, [pc, #208]	; (c8c4 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    c7f2:	4613      	mov	r3, r2
    c7f4:	009b      	lsls	r3, r3, #2
    c7f6:	4413      	add	r3, r2
    c7f8:	009b      	lsls	r3, r3, #2
    c7fa:	440b      	add	r3, r1
    c7fc:	2203      	movs	r2, #3
    c7fe:	601a      	str	r2, [r3, #0]

        if ((ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) && \
    c800:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c804:	4a2e      	ldr	r2, [pc, #184]	; (c8c0 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    c806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c80a:	685a      	ldr	r2, [r3, #4]
    c80c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    c810:	2134      	movs	r1, #52	; 0x34
    c812:	fb01 f303 	mul.w	r3, r1, r3
    c816:	4413      	add	r3, r2
    c818:	699b      	ldr	r3, [r3, #24]
    c81a:	2b00      	cmp	r3, #0
    c81c:	d117      	bne.n	c84e <Adc_Ipw_UpdateSoftwareGroupState+0xf6>
            (ADC_ACCESS_MODE_STREAMING == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].AccessMode) \
    c81e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c822:	4a27      	ldr	r2, [pc, #156]	; (c8c0 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    c824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c828:	685a      	ldr	r2, [r3, #4]
    c82a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    c82e:	2134      	movs	r1, #52	; 0x34
    c830:	fb01 f303 	mul.w	r3, r1, r3
    c834:	4413      	add	r3, r2
    c836:	685b      	ldr	r3, [r3, #4]
        if ((ADC_STREAM_BUFFER_LINEAR == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].BufferMode) && \
    c838:	2b01      	cmp	r3, #1
    c83a:	d108      	bne.n	c84e <Adc_Ipw_UpdateSoftwareGroupState+0xf6>
                Pdb_Adc_Ip_DisableAndClearPdb(PhysicalHwUnitId);
            }
#endif /*  (STD_ON == ADC_OPTIMIZE_DMA_STREAMING_GROUPS) */
#endif /* ADC_DMA_SUPPORTED */
            /* Update queue and execute new start conversion request from queue if available */
            Adc_Ipw_UpdateQueue(Unit, CoreId);
    c83c:	f89d 2006 	ldrb.w	r2, [sp, #6]
    c840:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c844:	4611      	mov	r1, r2
    c846:	4618      	mov	r0, r3
    c848:	f7ff fde6 	bl	c418 <Adc_Ipw_UpdateQueue>

#if (ADC_GRP_NOTIF_CAPABILITY == STD_ON)
    /* Implement user notification function if available */
    Adc_Ipw_CallNotification(Group, CoreId);
#endif /* (ADC_GRP_NOTIF_CAPABILITY == STD_ON) */
}
    c84c:	e035      	b.n	c8ba <Adc_Ipw_UpdateSoftwareGroupState+0x162>
            if (ADC_CONV_MODE_CONTINUOUS == Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex].Mode)
    c84e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c852:	4a1b      	ldr	r2, [pc, #108]	; (c8c0 <Adc_Ipw_UpdateSoftwareGroupState+0x168>)
    c854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c858:	685a      	ldr	r2, [r3, #4]
    c85a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    c85e:	2134      	movs	r1, #52	; 0x34
    c860:	fb01 f303 	mul.w	r3, r1, r3
    c864:	4413      	add	r3, r2
    c866:	689b      	ldr	r3, [r3, #8]
    c868:	2b01      	cmp	r3, #1
    c86a:	d114      	bne.n	c896 <Adc_Ipw_UpdateSoftwareGroupState+0x13e>
                Adc_axGroupStatus[Group].ResultIndex = 0U;
    c86c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    c870:	4914      	ldr	r1, [pc, #80]	; (c8c4 <Adc_Ipw_UpdateSoftwareGroupState+0x16c>)
    c872:	4613      	mov	r3, r2
    c874:	009b      	lsls	r3, r3, #2
    c876:	4413      	add	r3, r2
    c878:	009b      	lsls	r3, r3, #2
    c87a:	440b      	add	r3, r1
    c87c:	3308      	adds	r3, #8
    c87e:	2200      	movs	r2, #0
    c880:	801a      	strh	r2, [r3, #0]
                Adc_Ipw_RestartConversion(Unit, Group, CoreId);
    c882:	f89d 2006 	ldrb.w	r2, [sp, #6]
    c886:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    c88a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c88e:	4618      	mov	r0, r3
    c890:	f7ff fed2 	bl	c638 <Adc_Ipw_RestartConversion>
}
    c894:	e011      	b.n	c8ba <Adc_Ipw_UpdateSoftwareGroupState+0x162>
                Adc_Ipw_UpdateQueue(Unit, CoreId);
    c896:	f89d 2006 	ldrb.w	r2, [sp, #6]
    c89a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c89e:	4611      	mov	r1, r2
    c8a0:	4618      	mov	r0, r3
    c8a2:	f7ff fdb9 	bl	c418 <Adc_Ipw_UpdateQueue>
}
    c8a6:	e008      	b.n	c8ba <Adc_Ipw_UpdateSoftwareGroupState+0x162>
        Adc_Ipw_RestartConversion(Unit, Group, CoreId);
    c8a8:	f89d 2006 	ldrb.w	r2, [sp, #6]
    c8ac:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    c8b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c8b4:	4618      	mov	r0, r3
    c8b6:	f7ff febf 	bl	c638 <Adc_Ipw_RestartConversion>
}
    c8ba:	bf00      	nop
    c8bc:	b004      	add	sp, #16
    c8be:	bd10      	pop	{r4, pc}
    c8c0:	1fff8d40 	.word	0x1fff8d40
    c8c4:	1fff8d48 	.word	0x1fff8d48

0000c8c8 <Adc_Ipw_EndConversion>:
*/
static inline void Adc_Ipw_EndConversion(Adc_HwUnitType Unit,
                                         Adc_GroupType Group,
                                         boolean IsSoftwareConversion,
                                         uint8 CoreId)
{
    c8c8:	b510      	push	{r4, lr}
    c8ca:	b088      	sub	sp, #32
    c8cc:	4604      	mov	r4, r0
    c8ce:	4608      	mov	r0, r1
    c8d0:	4611      	mov	r1, r2
    c8d2:	461a      	mov	r2, r3
    c8d4:	4623      	mov	r3, r4
    c8d6:	f88d 300f 	strb.w	r3, [sp, #15]
    c8da:	4603      	mov	r3, r0
    c8dc:	f8ad 300c 	strh.w	r3, [sp, #12]
    c8e0:	460b      	mov	r3, r1
    c8e2:	f88d 300e 	strb.w	r3, [sp, #14]
    c8e6:	4613      	mov	r3, r2
    c8e8:	f88d 300b 	strb.w	r3, [sp, #11]
    const Adc_GroupType GroupIndex = Adc_apxCfgPtr[CoreId]->GroupIdToIndexMapPtr[Group];
    c8ec:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c8f0:	4a44      	ldr	r2, [pc, #272]	; (ca04 <Adc_Ipw_EndConversion+0x13c>)
    c8f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8f6:	68da      	ldr	r2, [r3, #12]
    c8f8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    c8fc:	005b      	lsls	r3, r3, #1
    c8fe:	4413      	add	r3, r2
    c900:	881b      	ldrh	r3, [r3, #0]
    c902:	f8ad 301e 	strh.w	r3, [sp, #30]
#if ((ADC_SETCHANNEL_API == STD_ON) || ((ADC_SETCHANNEL_API == STD_OFF) && (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF)))
    Adc_ChannelIndexType ChannelCount;
#endif /* ((ADC_SETCHANNEL_API == STD_ON) || ((ADC_SETCHANNEL_API == STD_OFF) && (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF))) */

    /* Get the group configuration */
    GroupPtr = &(Adc_apxCfgPtr[CoreId]->GroupsPtr[GroupIndex]);
    c906:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c90a:	4a3e      	ldr	r2, [pc, #248]	; (ca04 <Adc_Ipw_EndConversion+0x13c>)
    c90c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c910:	685a      	ldr	r2, [r3, #4]
    c912:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    c916:	2134      	movs	r1, #52	; 0x34
    c918:	fb01 f303 	mul.w	r3, r1, r3
    c91c:	4413      	add	r3, r2
    c91e:	9306      	str	r3, [sp, #24]
    }
    else
#endif /* (ADC_SETCHANNEL_API == STD_ON) */
    {
        /* Limit checking */
        if ((Std_ReturnType)E_OK == Adc_Ipw_CheckConversionChannels(Unit, Group, GroupPtr->NumSamples, CoreId))
    c920:	9b06      	ldr	r3, [sp, #24]
    c922:	8b9a      	ldrh	r2, [r3, #28]
    c924:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c928:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    c92c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c930:	f7ff fd98 	bl	c464 <Adc_Ipw_CheckConversionChannels>
    c934:	4603      	mov	r3, r0
    c936:	2b00      	cmp	r3, #0
    c938:	d160      	bne.n	c9fc <Adc_Ipw_EndConversion+0x134>
        {
#if (ADC_OPTIMIZE_ONESHOT_HW_TRIGGER == STD_OFF)
            /* Following code will not be reduced when oneshot hardware trigger optimization is not enabled */
#if (ADC_SETCHANNEL_API == STD_OFF)
            /* Channels configured when initializing */
            ChannelCount = GroupPtr->AssignedChannelCount;
    c93a:	9b06      	ldr	r3, [sp, #24]
    c93c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    c940:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* (ADC_SETCHANNEL_API == STD_ON) */

            /* More channels in group */
            /* Both HW and SW groups are using PDB SW trigger mode to restart conversion when ChannelCount > Max SC registers */
            if (Adc_axGroupStatus[Group].CurrentChannel < ChannelCount)
    c944:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    c948:	492f      	ldr	r1, [pc, #188]	; (ca08 <Adc_Ipw_EndConversion+0x140>)
    c94a:	4613      	mov	r3, r2
    c94c:	009b      	lsls	r3, r3, #2
    c94e:	4413      	add	r3, r2
    c950:	009b      	lsls	r3, r3, #2
    c952:	440b      	add	r3, r1
    c954:	3310      	adds	r3, #16
    c956:	781b      	ldrb	r3, [r3, #0]
    c958:	f89d 2017 	ldrb.w	r2, [sp, #23]
    c95c:	429a      	cmp	r2, r3
    c95e:	d929      	bls.n	c9b4 <Adc_Ipw_EndConversion+0xec>
            {
                /* Get left channel */
                NumChannel = ChannelCount - Adc_axGroupStatus[Group].CurrentChannel;
    c960:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    c964:	4928      	ldr	r1, [pc, #160]	; (ca08 <Adc_Ipw_EndConversion+0x140>)
    c966:	4613      	mov	r3, r2
    c968:	009b      	lsls	r3, r3, #2
    c96a:	4413      	add	r3, r2
    c96c:	009b      	lsls	r3, r3, #2
    c96e:	440b      	add	r3, r1
    c970:	3310      	adds	r3, #16
    c972:	781b      	ldrb	r3, [r3, #0]
    c974:	f89d 2017 	ldrb.w	r2, [sp, #23]
    c978:	1ad3      	subs	r3, r2, r3
    c97a:	f88d 3016 	strb.w	r3, [sp, #22]

                /* In case of left channels excess maximum allowed channels */
                LeftChannel = (uint8)ADC_IPW_CALCULATE_CHAN_NUMBER(NumChannel);
    c97e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c982:	2b0f      	cmp	r3, #15
    c984:	d805      	bhi.n	c992 <Adc_Ipw_EndConversion+0xca>
    c986:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c98a:	f003 030f 	and.w	r3, r3, #15
    c98e:	b2db      	uxtb	r3, r3
    c990:	e000      	b.n	c994 <Adc_Ipw_EndConversion+0xcc>
    c992:	2310      	movs	r3, #16
    c994:	f88d 3015 	strb.w	r3, [sp, #21]

                /* Configure left channels and start more conversions */
                Adc_Ipw_ConfigureConversion(Unit, Group, PDB_ADC_IP_SOFTWARE_TRIGGER, LeftChannel, CoreId);
    c998:	f89d 2015 	ldrb.w	r2, [sp, #21]
    c99c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    c9a0:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c9a4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c9a8:	9300      	str	r3, [sp, #0]
    c9aa:	4613      	mov	r3, r2
    c9ac:	220f      	movs	r2, #15
    c9ae:	f7ff f993 	bl	bcd8 <Adc_Ipw_ConfigureConversion>
                Adc_Ipw_HandleConversionCheckFail(Unit, Group, GroupPtr, CoreId);
            }
        }
#endif /* (ADC_ENABLE_LIMIT_CHECK == STD_ON) */
    }
}
    c9b2:	e023      	b.n	c9fc <Adc_Ipw_EndConversion+0x134>
                Adc_axGroupStatus[Group].ResultIndex++;
    c9b4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    c9b8:	4913      	ldr	r1, [pc, #76]	; (ca08 <Adc_Ipw_EndConversion+0x140>)
    c9ba:	4613      	mov	r3, r2
    c9bc:	009b      	lsls	r3, r3, #2
    c9be:	4413      	add	r3, r2
    c9c0:	009b      	lsls	r3, r3, #2
    c9c2:	440b      	add	r3, r1
    c9c4:	3308      	adds	r3, #8
    c9c6:	881b      	ldrh	r3, [r3, #0]
    c9c8:	b29b      	uxth	r3, r3
    c9ca:	3301      	adds	r3, #1
    c9cc:	b298      	uxth	r0, r3
    c9ce:	490e      	ldr	r1, [pc, #56]	; (ca08 <Adc_Ipw_EndConversion+0x140>)
    c9d0:	4613      	mov	r3, r2
    c9d2:	009b      	lsls	r3, r3, #2
    c9d4:	4413      	add	r3, r2
    c9d6:	009b      	lsls	r3, r3, #2
    c9d8:	440b      	add	r3, r1
    c9da:	3308      	adds	r3, #8
    c9dc:	4602      	mov	r2, r0
    c9de:	801a      	strh	r2, [r3, #0]
                if (TRUE == IsSoftwareConversion)
    c9e0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c9e4:	2b00      	cmp	r3, #0
    c9e6:	d009      	beq.n	c9fc <Adc_Ipw_EndConversion+0x134>
                    Adc_Ipw_UpdateSoftwareGroupState(Unit, Group, GroupPtr->NumSamples, CoreId);
    c9e8:	9b06      	ldr	r3, [sp, #24]
    c9ea:	8b9a      	ldrh	r2, [r3, #28]
    c9ec:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c9f0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    c9f4:	f89d 000f 	ldrb.w	r0, [sp, #15]
    c9f8:	f7ff feae 	bl	c758 <Adc_Ipw_UpdateSoftwareGroupState>
}
    c9fc:	bf00      	nop
    c9fe:	b008      	add	sp, #32
    ca00:	bd10      	pop	{r4, pc}
    ca02:	bf00      	nop
    ca04:	1fff8d40 	.word	0x1fff8d40
    ca08:	1fff8d48 	.word	0x1fff8d48

0000ca0c <Adc_Ipw_ReadData>:
static inline void Adc_Ipw_ReadData(const Adc_GroupConfigurationType * GroupPtr,
                                    Adc_ValueGroupType * ResultPtr,
                                    const Adc_StreamNumSampleType GroupSamples,
                                    const Adc_ChannelIndexType Index,
                                    const uint16 ConvResult)
{
    ca0c:	b084      	sub	sp, #16
    ca0e:	9003      	str	r0, [sp, #12]
    ca10:	9102      	str	r1, [sp, #8]
    ca12:	4611      	mov	r1, r2
    ca14:	461a      	mov	r2, r3
    ca16:	460b      	mov	r3, r1
    ca18:	f8ad 3006 	strh.w	r3, [sp, #6]
    ca1c:	4613      	mov	r3, r2
    ca1e:	f88d 3005 	strb.w	r3, [sp, #5]
#if (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON)
    if (FALSE == GroupPtr->StreamResultGroupMultiSets)
    {
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
        ResultPtr[(Index * GroupSamples)] = ConvResult;
    ca22:	f89d 3005 	ldrb.w	r3, [sp, #5]
    ca26:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    ca2a:	fb02 f303 	mul.w	r3, r2, r3
    ca2e:	005b      	lsls	r3, r3, #1
    ca30:	9a02      	ldr	r2, [sp, #8]
    ca32:	4413      	add	r3, r2
    ca34:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    ca38:	801a      	strh	r2, [r3, #0]
    else
    {
        ResultPtr[Index] = ConvResult;
    }
#endif /* (ADC_ENABLE_GROUP_STREAMING_RESULTS_REORDER == STD_ON) */
}
    ca3a:	bf00      	nop
    ca3c:	b004      	add	sp, #16
    ca3e:	4770      	bx	lr

0000ca40 <Adc_Ipw_EndConversionNotification>:
* @param[in]      PhysicalAdcUnit   ADC Hardware Unit
*
* @return         void
*/
static inline void Adc_Ipw_EndConversionNotification(const Adc_HwUnitType PhysicalAdcUnit)
{
    ca40:	b500      	push	{lr}
    ca42:	b085      	sub	sp, #20
    ca44:	4603      	mov	r3, r0
    ca46:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Check that ADC unit is assigned to current core partition */
    const volatile uint8 CoreId = Adc_GetCoreID();
    ca4a:	f7ff fce1 	bl	c410 <Adc_GetCoreID>
    ca4e:	4603      	mov	r3, r0
    ca50:	f88d 300b 	strb.w	r3, [sp, #11]
    const Adc_HwUnitType LogicalHwUnitId = Adc_apxCfgPtr[CoreId]->AdcIpwConfigPtr->Mapping.HwLogicalId[PhysicalAdcUnit];
    ca54:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ca58:	b2db      	uxtb	r3, r3
    ca5a:	461a      	mov	r2, r3
    ca5c:	4b14      	ldr	r3, [pc, #80]	; (cab0 <Adc_Ipw_EndConversionNotification+0x70>)
    ca5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    ca62:	681a      	ldr	r2, [r3, #0]
    ca64:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ca68:	4413      	add	r3, r2
    ca6a:	f893 3020 	ldrb.w	r3, [r3, #32]
    ca6e:	f88d 300f 	strb.w	r3, [sp, #15]
    const Adc_GroupType SwGroupId = Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueue[0U];
    ca72:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ca76:	4a0f      	ldr	r2, [pc, #60]	; (cab4 <Adc_Ipw_EndConversionNotification+0x74>)
    ca78:	00db      	lsls	r3, r3, #3
    ca7a:	4413      	add	r3, r2
    ca7c:	885b      	ldrh	r3, [r3, #2]
    ca7e:	f8ad 300c 	strh.w	r3, [sp, #12]
            Adc_Ipw_EndConversion(LogicalHwUnitId, HwGroupId, FALSE, CoreId);
        }
    }
    else
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
    if (Adc_axUnitStatus[LogicalHwUnitId].SwNormalQueueIndex > (Adc_QueueIndexType)0U)
    ca82:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ca86:	4a0b      	ldr	r2, [pc, #44]	; (cab4 <Adc_Ipw_EndConversionNotification+0x74>)
    ca88:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
    ca8c:	b29b      	uxth	r3, r3
    ca8e:	2b00      	cmp	r3, #0
    ca90:	d009      	beq.n	caa6 <Adc_Ipw_EndConversionNotification+0x66>
            Adc_Ipw_EndDmaConversion(LogicalHwUnitId, SwGroupId, TRUE, CoreId);
        }
        else
#endif /* ADC_DMA_SUPPORTED */
        {
            Adc_Ipw_EndConversion(LogicalHwUnitId, SwGroupId, TRUE, CoreId);
    ca92:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ca96:	b2db      	uxtb	r3, r3
    ca98:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    ca9c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    caa0:	2201      	movs	r2, #1
    caa2:	f7ff ff11 	bl	c8c8 <Adc_Ipw_EndConversion>
    else
    {
        ; /* Empty else branch to avoid MISRA */
    }
#endif /* (ADC_HW_TRIGGER_API == STD_ON) */
}
    caa6:	bf00      	nop
    caa8:	b005      	add	sp, #20
    caaa:	f85d fb04 	ldr.w	pc, [sp], #4
    caae:	bf00      	nop
    cab0:	1fff8d40 	.word	0x1fff8d40
    cab4:	1fff8d70 	.word	0x1fff8d70

0000cab8 <Adc_Ipw_Adc0EndConversionNotification>:
*
* @return         void
*
*/
void Adc_Ipw_Adc0EndConversionNotification(const uint8 ControlChanIdx)
{
    cab8:	b500      	push	{lr}
    caba:	b085      	sub	sp, #20
    cabc:	4603      	mov	r3, r0
    cabe:	f88d 3007 	strb.w	r3, [sp, #7]
    const Adc_HwUnitType PhysicalAdcUnit = 0U;
    cac2:	2300      	movs	r3, #0
    cac4:	f88d 300f 	strb.w	r3, [sp, #15]

    (void)ControlChanIdx;

    Adc_Ipw_EndConversionNotification(PhysicalAdcUnit);
    cac8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    cacc:	4618      	mov	r0, r3
    cace:	f7ff ffb7 	bl	ca40 <Adc_Ipw_EndConversionNotification>
}
    cad2:	bf00      	nop
    cad4:	b005      	add	sp, #20
    cad6:	f85d fb04 	ldr.w	pc, [sp], #4

0000cada <Adc_Ipw_Adc1EndConversionNotification>:
*
* @return         void
*
*/
void Adc_Ipw_Adc1EndConversionNotification(const uint8 ControlChanIdx)
{
    cada:	b500      	push	{lr}
    cadc:	b085      	sub	sp, #20
    cade:	4603      	mov	r3, r0
    cae0:	f88d 3007 	strb.w	r3, [sp, #7]
    const Adc_HwUnitType PhysicalAdcUnit = 1U;
    cae4:	2301      	movs	r3, #1
    cae6:	f88d 300f 	strb.w	r3, [sp, #15]

    (void)ControlChanIdx;

    Adc_Ipw_EndConversionNotification(PhysicalAdcUnit);
    caea:	f89d 300f 	ldrb.w	r3, [sp, #15]
    caee:	4618      	mov	r0, r3
    caf0:	f7ff ffa6 	bl	ca40 <Adc_Ipw_EndConversionNotification>
}
    caf4:	bf00      	nop
    caf6:	b005      	add	sp, #20
    caf8:	f85d fb04 	ldr.w	pc, [sp], #4

0000cafc <Pdb_Adc_HwAcc_SetAdcPretriggerMask>:

static inline void Pdb_Adc_HwAcc_SetAdcPretriggerMask(PDB_Type * const Base,
                                                      const uint8 ChanIdx,
                                                      const uint32 Mask,
                                                      const boolean Value)
{
    cafc:	b084      	sub	sp, #16
    cafe:	9003      	str	r0, [sp, #12]
    cb00:	9201      	str	r2, [sp, #4]
    cb02:	461a      	mov	r2, r3
    cb04:	460b      	mov	r3, r1
    cb06:	f88d 300b 	strb.w	r3, [sp, #11]
    cb0a:	4613      	mov	r3, r2
    cb0c:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Set C1 register of a channel based on mask */
    if (Value == TRUE)
    cb10:	f89d 300a 	ldrb.w	r3, [sp, #10]
    cb14:	2b00      	cmp	r3, #0
    cb16:	d016      	beq.n	cb46 <Pdb_Adc_HwAcc_SetAdcPretriggerMask+0x4a>
    {
        Base->CH[ChanIdx].C1 |= Mask;
    cb18:	f89d 200b 	ldrb.w	r2, [sp, #11]
    cb1c:	9903      	ldr	r1, [sp, #12]
    cb1e:	4613      	mov	r3, r2
    cb20:	009b      	lsls	r3, r3, #2
    cb22:	4413      	add	r3, r2
    cb24:	00db      	lsls	r3, r3, #3
    cb26:	440b      	add	r3, r1
    cb28:	3310      	adds	r3, #16
    cb2a:	6819      	ldr	r1, [r3, #0]
    cb2c:	f89d 200b 	ldrb.w	r2, [sp, #11]
    cb30:	9b01      	ldr	r3, [sp, #4]
    cb32:	4319      	orrs	r1, r3
    cb34:	9803      	ldr	r0, [sp, #12]
    cb36:	4613      	mov	r3, r2
    cb38:	009b      	lsls	r3, r3, #2
    cb3a:	4413      	add	r3, r2
    cb3c:	00db      	lsls	r3, r3, #3
    cb3e:	4403      	add	r3, r0
    cb40:	3310      	adds	r3, #16
    cb42:	6019      	str	r1, [r3, #0]
    }
    else
    {
        Base->CH[ChanIdx].C1 &= ~(Mask);
    }
}
    cb44:	e016      	b.n	cb74 <Pdb_Adc_HwAcc_SetAdcPretriggerMask+0x78>
        Base->CH[ChanIdx].C1 &= ~(Mask);
    cb46:	f89d 200b 	ldrb.w	r2, [sp, #11]
    cb4a:	9903      	ldr	r1, [sp, #12]
    cb4c:	4613      	mov	r3, r2
    cb4e:	009b      	lsls	r3, r3, #2
    cb50:	4413      	add	r3, r2
    cb52:	00db      	lsls	r3, r3, #3
    cb54:	440b      	add	r3, r1
    cb56:	3310      	adds	r3, #16
    cb58:	6819      	ldr	r1, [r3, #0]
    cb5a:	9b01      	ldr	r3, [sp, #4]
    cb5c:	43db      	mvns	r3, r3
    cb5e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    cb62:	4019      	ands	r1, r3
    cb64:	9803      	ldr	r0, [sp, #12]
    cb66:	4613      	mov	r3, r2
    cb68:	009b      	lsls	r3, r3, #2
    cb6a:	4413      	add	r3, r2
    cb6c:	00db      	lsls	r3, r3, #3
    cb6e:	4403      	add	r3, r0
    cb70:	3310      	adds	r3, #16
    cb72:	6019      	str	r1, [r3, #0]
}
    cb74:	bf00      	nop
    cb76:	b004      	add	sp, #16
    cb78:	4770      	bx	lr

0000cb7a <Pdb_Adc_HwAcc_DisablePdb>:

static inline void Pdb_Adc_HwAcc_DisablePdb(PDB_Type * const Base)
{
    cb7a:	b082      	sub	sp, #8
    cb7c:	9001      	str	r0, [sp, #4]
    /* Disable PDB by clearing PDBEN bit of SC register */
    Base->SC &= ~(PDB_SC_PDBEN_MASK);
    cb7e:	9b01      	ldr	r3, [sp, #4]
    cb80:	681b      	ldr	r3, [r3, #0]
    cb82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    cb86:	9b01      	ldr	r3, [sp, #4]
    cb88:	601a      	str	r2, [r3, #0]
}
    cb8a:	bf00      	nop
    cb8c:	b002      	add	sp, #8
    cb8e:	4770      	bx	lr

0000cb90 <Pdb_Adc_HwAcc_SetContinuousMode>:

static inline void Pdb_Adc_HwAcc_SetContinuousMode(PDB_Type * const Base,
                                                   const boolean State)
{
    cb90:	b082      	sub	sp, #8
    cb92:	9001      	str	r0, [sp, #4]
    cb94:	460b      	mov	r3, r1
    cb96:	f88d 3003 	strb.w	r3, [sp, #3]
    /* Update ContinuousMode value found in SC register */
    if (State == TRUE)
    cb9a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cb9e:	2b00      	cmp	r3, #0
    cba0:	d006      	beq.n	cbb0 <Pdb_Adc_HwAcc_SetContinuousMode+0x20>
    {
        Base->SC |= PDB_SC_CONT_MASK;
    cba2:	9b01      	ldr	r3, [sp, #4]
    cba4:	681b      	ldr	r3, [r3, #0]
    cba6:	f043 0202 	orr.w	r2, r3, #2
    cbaa:	9b01      	ldr	r3, [sp, #4]
    cbac:	601a      	str	r2, [r3, #0]
    }
    else
    {
        Base->SC &= ~(PDB_SC_CONT_MASK);
    }
}
    cbae:	e005      	b.n	cbbc <Pdb_Adc_HwAcc_SetContinuousMode+0x2c>
        Base->SC &= ~(PDB_SC_CONT_MASK);
    cbb0:	9b01      	ldr	r3, [sp, #4]
    cbb2:	681b      	ldr	r3, [r3, #0]
    cbb4:	f023 0202 	bic.w	r2, r3, #2
    cbb8:	9b01      	ldr	r3, [sp, #4]
    cbba:	601a      	str	r2, [r3, #0]
}
    cbbc:	bf00      	nop
    cbbe:	b002      	add	sp, #8
    cbc0:	4770      	bx	lr

0000cbc2 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>:

static inline void Pdb_Adc_HwAcc_ConfigAdcPretriggers(PDB_Type * const Base,
                                                      const uint8 ChanIdx,
                                                      const Pdb_Adc_Ip_PretriggersConfigType * const Config)
{
    cbc2:	b086      	sub	sp, #24
    cbc4:	9003      	str	r0, [sp, #12]
    cbc6:	460b      	mov	r3, r1
    cbc8:	9201      	str	r2, [sp, #4]
    cbca:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Configure all channel's pretriggers by updating all fields of the C1 register */
    uint32 C1Reg = Base->CH[ChanIdx].C1;
    cbce:	f89d 200b 	ldrb.w	r2, [sp, #11]
    cbd2:	9903      	ldr	r1, [sp, #12]
    cbd4:	4613      	mov	r3, r2
    cbd6:	009b      	lsls	r3, r3, #2
    cbd8:	4413      	add	r3, r2
    cbda:	00db      	lsls	r3, r3, #3
    cbdc:	440b      	add	r3, r1
    cbde:	3310      	adds	r3, #16
    cbe0:	681b      	ldr	r3, [r3, #0]
    cbe2:	9305      	str	r3, [sp, #20]
    C1Reg &= ~(PDB_C1_EN_MASK | PDB_C1_TOS_MASK | PDB_C1_BB_MASK);
    cbe4:	9b05      	ldr	r3, [sp, #20]
    cbe6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    cbea:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_EN(Config->EnableMask);
    cbec:	9b01      	ldr	r3, [sp, #4]
    cbee:	781b      	ldrb	r3, [r3, #0]
    cbf0:	461a      	mov	r2, r3
    cbf2:	9b05      	ldr	r3, [sp, #20]
    cbf4:	4313      	orrs	r3, r2
    cbf6:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_TOS(Config->EnableDelayMask);
    cbf8:	9b01      	ldr	r3, [sp, #4]
    cbfa:	785b      	ldrb	r3, [r3, #1]
    cbfc:	021b      	lsls	r3, r3, #8
    cbfe:	b29b      	uxth	r3, r3
    cc00:	9a05      	ldr	r2, [sp, #20]
    cc02:	4313      	orrs	r3, r2
    cc04:	9305      	str	r3, [sp, #20]
    C1Reg |= PDB_C1_BB(Config->BackToBackEnableMask);
    cc06:	9b01      	ldr	r3, [sp, #4]
    cc08:	789b      	ldrb	r3, [r3, #2]
    cc0a:	041b      	lsls	r3, r3, #16
    cc0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    cc10:	9a05      	ldr	r2, [sp, #20]
    cc12:	4313      	orrs	r3, r2
    cc14:	9305      	str	r3, [sp, #20]
    Base->CH[ChanIdx].C1 = C1Reg;
    cc16:	f89d 200b 	ldrb.w	r2, [sp, #11]
    cc1a:	9903      	ldr	r1, [sp, #12]
    cc1c:	4613      	mov	r3, r2
    cc1e:	009b      	lsls	r3, r3, #2
    cc20:	4413      	add	r3, r2
    cc22:	00db      	lsls	r3, r3, #3
    cc24:	440b      	add	r3, r1
    cc26:	3310      	adds	r3, #16
    cc28:	9a05      	ldr	r2, [sp, #20]
    cc2a:	601a      	str	r2, [r3, #0]
}
    cc2c:	bf00      	nop
    cc2e:	b006      	add	sp, #24
    cc30:	4770      	bx	lr

0000cc32 <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>:

static inline void Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(PDB_Type * const Base,
                                                         const uint8 ChanIdx,
                                                         const uint16 PretriggMask)
{
    cc32:	b082      	sub	sp, #8
    cc34:	9001      	str	r0, [sp, #4]
    cc36:	460b      	mov	r3, r1
    cc38:	f88d 3003 	strb.w	r3, [sp, #3]
    cc3c:	4613      	mov	r3, r2
    cc3e:	f8ad 3000 	strh.w	r3, [sp]
    /* Clear pretrigger status flags found in S register based on PretriggMask */
    Base->CH[ChanIdx].S &= ~PDB_S_CF(PretriggMask);
    cc42:	f89d 2003 	ldrb.w	r2, [sp, #3]
    cc46:	9901      	ldr	r1, [sp, #4]
    cc48:	4613      	mov	r3, r2
    cc4a:	009b      	lsls	r3, r3, #2
    cc4c:	4413      	add	r3, r2
    cc4e:	00db      	lsls	r3, r3, #3
    cc50:	440b      	add	r3, r1
    cc52:	3314      	adds	r3, #20
    cc54:	6819      	ldr	r1, [r3, #0]
    cc56:	f8bd 3000 	ldrh.w	r3, [sp]
    cc5a:	041b      	lsls	r3, r3, #16
    cc5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    cc60:	43db      	mvns	r3, r3
    cc62:	f89d 2003 	ldrb.w	r2, [sp, #3]
    cc66:	4019      	ands	r1, r3
    cc68:	9801      	ldr	r0, [sp, #4]
    cc6a:	4613      	mov	r3, r2
    cc6c:	009b      	lsls	r3, r3, #2
    cc6e:	4413      	add	r3, r2
    cc70:	00db      	lsls	r3, r3, #3
    cc72:	4403      	add	r3, r0
    cc74:	3314      	adds	r3, #20
    cc76:	6019      	str	r1, [r3, #0]
}
    cc78:	bf00      	nop
    cc7a:	b002      	add	sp, #8
    cc7c:	4770      	bx	lr

0000cc7e <Pdb_Adc_Ip_Init>:
*
* @implements     Pdb_Adc_Ip_Init_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Init(const uint32 Instance,
                     const Pdb_Adc_Ip_ConfigType * const Config)
{
    cc7e:	b500      	push	{lr}
    cc80:	b087      	sub	sp, #28
    cc82:	9001      	str	r0, [sp, #4]
    cc84:	9100      	str	r1, [sp, #0]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    cc86:	4a50      	ldr	r2, [pc, #320]	; (cdc8 <Pdb_Adc_Ip_Init+0x14a>)
    cc88:	9b01      	ldr	r3, [sp, #4]
    cc8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc8e:	9303      	str	r3, [sp, #12]
    uint8 ChannelIndex;
    uint8 PretriggerIndex;
    uint32 Reg = 0u;
    cc90:	2300      	movs	r3, #0
    cc92:	9304      	str	r3, [sp, #16]

    Reg |= PDB_SC_LDMOD(Config->LoadValueMode);
    cc94:	9b00      	ldr	r3, [sp, #0]
    cc96:	681b      	ldr	r3, [r3, #0]
    cc98:	049b      	lsls	r3, r3, #18
    cc9a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
    cc9e:	9a04      	ldr	r2, [sp, #16]
    cca0:	4313      	orrs	r3, r2
    cca2:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_PRESCALER(Config->PrescalerDiv);
    cca4:	9b00      	ldr	r3, [sp, #0]
    cca6:	685b      	ldr	r3, [r3, #4]
    cca8:	031b      	lsls	r3, r3, #12
    ccaa:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    ccae:	9a04      	ldr	r2, [sp, #16]
    ccb0:	4313      	orrs	r3, r2
    ccb2:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_MULT(Config->ClkPreMultFactor);
    ccb4:	9b00      	ldr	r3, [sp, #0]
    ccb6:	689b      	ldr	r3, [r3, #8]
    ccb8:	009b      	lsls	r3, r3, #2
    ccba:	f003 030c 	and.w	r3, r3, #12
    ccbe:	9a04      	ldr	r2, [sp, #16]
    ccc0:	4313      	orrs	r3, r2
    ccc2:	9304      	str	r3, [sp, #16]
    Reg |= PDB_SC_TRGSEL(Config->TriggerSource);
    ccc4:	9b00      	ldr	r3, [sp, #0]
    ccc6:	68db      	ldr	r3, [r3, #12]
    ccc8:	021b      	lsls	r3, r3, #8
    ccca:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    ccce:	9a04      	ldr	r2, [sp, #16]
    ccd0:	4313      	orrs	r3, r2
    ccd2:	9304      	str	r3, [sp, #16]

    if (Config->ContinuousModeEnable == TRUE)
    ccd4:	9b00      	ldr	r3, [sp, #0]
    ccd6:	7c1b      	ldrb	r3, [r3, #16]
    ccd8:	2b00      	cmp	r3, #0
    ccda:	d003      	beq.n	cce4 <Pdb_Adc_Ip_Init+0x66>
    {
        Reg |= PDB_SC_CONT_MASK;
    ccdc:	9b04      	ldr	r3, [sp, #16]
    ccde:	f043 0302 	orr.w	r3, r3, #2
    cce2:	9304      	str	r3, [sp, #16]
    }
    if (Config->DmaEnable == TRUE)
    cce4:	9b00      	ldr	r3, [sp, #0]
    cce6:	7c5b      	ldrb	r3, [r3, #17]
    cce8:	2b00      	cmp	r3, #0
    ccea:	d003      	beq.n	ccf4 <Pdb_Adc_Ip_Init+0x76>
    {
        Reg |= PDB_SC_DMAEN_MASK;
    ccec:	9b04      	ldr	r3, [sp, #16]
    ccee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    ccf2:	9304      	str	r3, [sp, #16]
    }
    if (Config->SeqErrNotification != NULL_PTR)
    ccf4:	9b00      	ldr	r3, [sp, #0]
    ccf6:	69db      	ldr	r3, [r3, #28]
    ccf8:	2b00      	cmp	r3, #0
    ccfa:	d003      	beq.n	cd04 <Pdb_Adc_Ip_Init+0x86>
    {
        Reg |= PDB_SC_PDBEIE_MASK;
    ccfc:	9b04      	ldr	r3, [sp, #16]
    ccfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    cd02:	9304      	str	r3, [sp, #16]
    }

    Base->SC = Reg;
    cd04:	9b03      	ldr	r3, [sp, #12]
    cd06:	9a04      	ldr	r2, [sp, #16]
    cd08:	601a      	str	r2, [r3, #0]
#endif /* (STD_ON == FEATURE_PDB_HAS_INSTANCE_BACKTOBACK) */
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
    PDB_ADC_ConfigInterChannelBackToBack(Instance, Config->InterChannelBackToBackEnable);
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */

    Pdb_Adc_Ip_SetModulus(Instance, Config->ModValue);
    cd0a:	9b00      	ldr	r3, [sp, #0]
    cd0c:	8a5b      	ldrh	r3, [r3, #18]
    cd0e:	4619      	mov	r1, r3
    cd10:	9801      	ldr	r0, [sp, #4]
    cd12:	f000 f98f 	bl	d034 <Pdb_Adc_Ip_SetModulus>

    if ((Config->NumChans > 0u) && (Config->ChanConfigs != NULL_PTR))
    cd16:	9b00      	ldr	r3, [sp, #0]
    cd18:	7d1b      	ldrb	r3, [r3, #20]
    cd1a:	2b00      	cmp	r3, #0
    cd1c:	d03e      	beq.n	cd9c <Pdb_Adc_Ip_Init+0x11e>
    cd1e:	9b00      	ldr	r3, [sp, #0]
    cd20:	699b      	ldr	r3, [r3, #24]
    cd22:	2b00      	cmp	r3, #0
    cd24:	d03a      	beq.n	cd9c <Pdb_Adc_Ip_Init+0x11e>
    {
        for (ChannelIndex = 0u; ChannelIndex < Config->NumChans; ChannelIndex++)
    cd26:	2300      	movs	r3, #0
    cd28:	f88d 3017 	strb.w	r3, [sp, #23]
    cd2c:	e030      	b.n	cd90 <Pdb_Adc_Ip_Init+0x112>
        {
            const Pdb_Adc_Ip_ChanConfigType * ChanConfig = &(Config->ChanConfigs[ChannelIndex]);
    cd2e:	9b00      	ldr	r3, [sp, #0]
    cd30:	6999      	ldr	r1, [r3, #24]
    cd32:	f89d 2017 	ldrb.w	r2, [sp, #23]
    cd36:	4613      	mov	r3, r2
    cd38:	009b      	lsls	r3, r3, #2
    cd3a:	4413      	add	r3, r2
    cd3c:	009b      	lsls	r3, r3, #2
    cd3e:	440b      	add	r3, r1
    cd40:	9302      	str	r3, [sp, #8]
            Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanConfig->ChnIdx, &(ChanConfig->PretriggersConfig));
    cd42:	9b02      	ldr	r3, [sp, #8]
    cd44:	7819      	ldrb	r1, [r3, #0]
    cd46:	9b02      	ldr	r3, [sp, #8]
    cd48:	3301      	adds	r3, #1
    cd4a:	461a      	mov	r2, r3
    cd4c:	9803      	ldr	r0, [sp, #12]
    cd4e:	f7ff ff38 	bl	cbc2 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
            for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    cd52:	2300      	movs	r3, #0
    cd54:	f88d 3016 	strb.w	r3, [sp, #22]
    cd58:	e011      	b.n	cd7e <Pdb_Adc_Ip_Init+0x100>
            {
                Pdb_Adc_Ip_SetAdcPretriggerDelayValue(Instance, ChanConfig->ChnIdx, PretriggerIndex, ChanConfig->PretriggerDelays[PretriggerIndex]);
    cd5a:	9b02      	ldr	r3, [sp, #8]
    cd5c:	7819      	ldrb	r1, [r3, #0]
    cd5e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    cd62:	9a02      	ldr	r2, [sp, #8]
    cd64:	005b      	lsls	r3, r3, #1
    cd66:	4413      	add	r3, r2
    cd68:	889b      	ldrh	r3, [r3, #4]
    cd6a:	f89d 2016 	ldrb.w	r2, [sp, #22]
    cd6e:	9801      	ldr	r0, [sp, #4]
    cd70:	f000 fa74 	bl	d25c <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>
            for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    cd74:	f89d 3016 	ldrb.w	r3, [sp, #22]
    cd78:	3301      	adds	r3, #1
    cd7a:	f88d 3016 	strb.w	r3, [sp, #22]
    cd7e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    cd82:	2b07      	cmp	r3, #7
    cd84:	d9e9      	bls.n	cd5a <Pdb_Adc_Ip_Init+0xdc>
        for (ChannelIndex = 0u; ChannelIndex < Config->NumChans; ChannelIndex++)
    cd86:	f89d 3017 	ldrb.w	r3, [sp, #23]
    cd8a:	3301      	adds	r3, #1
    cd8c:	f88d 3017 	strb.w	r3, [sp, #23]
    cd90:	9b00      	ldr	r3, [sp, #0]
    cd92:	7d1b      	ldrb	r3, [r3, #20]
    cd94:	f89d 2017 	ldrb.w	r2, [sp, #23]
    cd98:	429a      	cmp	r2, r3
    cd9a:	d3c8      	bcc.n	cd2e <Pdb_Adc_Ip_Init+0xb0>
            }
        }
    }

    Pdb_Adc_Ip_Enable(Instance);
    cd9c:	9801      	ldr	r0, [sp, #4]
    cd9e:	f000 f89b 	bl	ced8 <Pdb_Adc_Ip_Enable>

    /* Modulus and pretrigger delay values require call to LoadRegValues */
    Pdb_Adc_Ip_LoadRegValues(Instance);
    cda2:	9801      	ldr	r0, [sp, #4]
    cda4:	f000 f92e 	bl	d004 <Pdb_Adc_Ip_LoadRegValues>

    Pdb_Adc_Ip_axState[Instance].SeqErrNotification = Config->SeqErrNotification;
    cda8:	9b00      	ldr	r3, [sp, #0]
    cdaa:	69da      	ldr	r2, [r3, #28]
    cdac:	4907      	ldr	r1, [pc, #28]	; (cdcc <Pdb_Adc_Ip_Init+0x14e>)
    cdae:	9b01      	ldr	r3, [sp, #4]
    cdb0:	00db      	lsls	r3, r3, #3
    cdb2:	440b      	add	r3, r1
    cdb4:	605a      	str	r2, [r3, #4]
    Pdb_Adc_Ip_axState[Instance].Init = TRUE;
    cdb6:	4a05      	ldr	r2, [pc, #20]	; (cdcc <Pdb_Adc_Ip_Init+0x14e>)
    cdb8:	9b01      	ldr	r3, [sp, #4]
    cdba:	2101      	movs	r1, #1
    cdbc:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
    cdc0:	bf00      	nop
    cdc2:	b007      	add	sp, #28
    cdc4:	f85d fb04 	ldr.w	pc, [sp], #4
    cdc8:	0001a054 	.word	0x0001a054
    cdcc:	1fff8e18 	.word	0x1fff8e18

0000cdd0 <Pdb_Adc_Ip_DeInit>:
* This function disables it, so affects all other instances.
*
* @implements     Pdb_Adc_Ip_Deinit_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_DeInit(const uint32 Instance)
{
    cdd0:	b500      	push	{lr}
    cdd2:	b097      	sub	sp, #92	; 0x5c
    cdd4:	9001      	str	r0, [sp, #4]

    Pdb_Adc_Ip_ConfigType DefaultConfig;
    Pdb_Adc_Ip_ChanConfigType ChanConfigs[PDB_CH_COUNT];
    uint8 ChannelIndex, PretriggerIndex;

    DefaultConfig.LoadValueMode = PDB_ADC_IP_LOAD_VAL_IMMEDIATELY;
    cdd6:	2300      	movs	r3, #0
    cdd8:	930d      	str	r3, [sp, #52]	; 0x34
    DefaultConfig.PrescalerDiv = PDB_ADC_IP_CLK_PREDIV_BY_1;
    cdda:	2300      	movs	r3, #0
    cddc:	930e      	str	r3, [sp, #56]	; 0x38
    DefaultConfig.ClkPreMultFactor = PDB_ADC_IP_CLK_PREMULT_FACT_AS_1;
    cdde:	2300      	movs	r3, #0
    cde0:	930f      	str	r3, [sp, #60]	; 0x3c
    DefaultConfig.TriggerSource = PDB_ADC_IP_TRIGGER_IN0;
    cde2:	2300      	movs	r3, #0
    cde4:	9310      	str	r3, [sp, #64]	; 0x40
    DefaultConfig.ContinuousModeEnable = FALSE;
    cde6:	2300      	movs	r3, #0
    cde8:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    DefaultConfig.DmaEnable = FALSE;
    cdec:	2300      	movs	r3, #0
    cdee:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    DefaultConfig.ModValue = 0u;
    cdf2:	2300      	movs	r3, #0
    cdf4:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
#if  (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK)
    DefaultConfig.InterChannelBackToBackEnable = FALSE;
    PDB_ADC_ConfigInterChannelBackToBack(Instance, DefaultConfig.InterChannelBackToBackEnable);
#endif /* (STD_ON == FEATURE_PDB_HAS_INTERCHANNEL_BACKTOBACK) */

    DefaultConfig.NumChans = PDB_CH_COUNT;
    cdf8:	2302      	movs	r3, #2
    cdfa:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    for (ChannelIndex = 0u; ChannelIndex < PDB_CH_COUNT; ChannelIndex++)
    cdfe:	2300      	movs	r3, #0
    ce00:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    ce04:	e04d      	b.n	cea2 <Pdb_Adc_Ip_DeInit+0xd2>
    {
        ChanConfigs[ChannelIndex].ChnIdx = ChannelIndex;
    ce06:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    ce0a:	4613      	mov	r3, r2
    ce0c:	009b      	lsls	r3, r3, #2
    ce0e:	4413      	add	r3, r2
    ce10:	009b      	lsls	r3, r3, #2
    ce12:	aa16      	add	r2, sp, #88	; 0x58
    ce14:	4413      	add	r3, r2
    ce16:	3b4c      	subs	r3, #76	; 0x4c
    ce18:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    ce1c:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.EnableMask = 0u;
    ce1e:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    ce22:	4613      	mov	r3, r2
    ce24:	009b      	lsls	r3, r3, #2
    ce26:	4413      	add	r3, r2
    ce28:	009b      	lsls	r3, r3, #2
    ce2a:	aa16      	add	r2, sp, #88	; 0x58
    ce2c:	4413      	add	r3, r2
    ce2e:	3b4b      	subs	r3, #75	; 0x4b
    ce30:	2200      	movs	r2, #0
    ce32:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.EnableDelayMask = 0u;
    ce34:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    ce38:	4613      	mov	r3, r2
    ce3a:	009b      	lsls	r3, r3, #2
    ce3c:	4413      	add	r3, r2
    ce3e:	009b      	lsls	r3, r3, #2
    ce40:	aa16      	add	r2, sp, #88	; 0x58
    ce42:	4413      	add	r3, r2
    ce44:	3b4a      	subs	r3, #74	; 0x4a
    ce46:	2200      	movs	r2, #0
    ce48:	701a      	strb	r2, [r3, #0]
        ChanConfigs[ChannelIndex].PretriggersConfig.BackToBackEnableMask = 0u;
    ce4a:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    ce4e:	4613      	mov	r3, r2
    ce50:	009b      	lsls	r3, r3, #2
    ce52:	4413      	add	r3, r2
    ce54:	009b      	lsls	r3, r3, #2
    ce56:	aa16      	add	r2, sp, #88	; 0x58
    ce58:	4413      	add	r3, r2
    ce5a:	3b49      	subs	r3, #73	; 0x49
    ce5c:	2200      	movs	r2, #0
    ce5e:	701a      	strb	r2, [r3, #0]
        for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    ce60:	2300      	movs	r3, #0
    ce62:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    ce66:	e013      	b.n	ce90 <Pdb_Adc_Ip_DeInit+0xc0>
        {
            ChanConfigs[ChannelIndex].PretriggerDelays[PretriggerIndex] = 0u;
    ce68:	f89d 2057 	ldrb.w	r2, [sp, #87]	; 0x57
    ce6c:	f89d 1056 	ldrb.w	r1, [sp, #86]	; 0x56
    ce70:	4613      	mov	r3, r2
    ce72:	009b      	lsls	r3, r3, #2
    ce74:	4413      	add	r3, r2
    ce76:	005b      	lsls	r3, r3, #1
    ce78:	440b      	add	r3, r1
    ce7a:	005b      	lsls	r3, r3, #1
    ce7c:	aa16      	add	r2, sp, #88	; 0x58
    ce7e:	4413      	add	r3, r2
    ce80:	2200      	movs	r2, #0
    ce82:	f823 2c48 	strh.w	r2, [r3, #-72]
        for (PretriggerIndex = 0u; PretriggerIndex < PDB_DLY_COUNT; PretriggerIndex++)
    ce86:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    ce8a:	3301      	adds	r3, #1
    ce8c:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    ce90:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    ce94:	2b07      	cmp	r3, #7
    ce96:	d9e7      	bls.n	ce68 <Pdb_Adc_Ip_DeInit+0x98>
    for (ChannelIndex = 0u; ChannelIndex < PDB_CH_COUNT; ChannelIndex++)
    ce98:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
    ce9c:	3301      	adds	r3, #1
    ce9e:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    cea2:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
    cea6:	2b01      	cmp	r3, #1
    cea8:	d9ad      	bls.n	ce06 <Pdb_Adc_Ip_DeInit+0x36>
        }
    }
    DefaultConfig.ChanConfigs = ChanConfigs;
    ceaa:	ab03      	add	r3, sp, #12
    ceac:	9313      	str	r3, [sp, #76]	; 0x4c
    DefaultConfig.SeqErrNotification = NULL_PTR;
    ceae:	2300      	movs	r3, #0
    ceb0:	9314      	str	r3, [sp, #80]	; 0x50

    Pdb_Adc_Ip_Init(Instance, &DefaultConfig);
    ceb2:	ab0d      	add	r3, sp, #52	; 0x34
    ceb4:	4619      	mov	r1, r3
    ceb6:	9801      	ldr	r0, [sp, #4]
    ceb8:	f7ff fee1 	bl	cc7e <Pdb_Adc_Ip_Init>

    Pdb_Adc_Ip_Disable(Instance);
    cebc:	9801      	ldr	r0, [sp, #4]
    cebe:	f000 f823 	bl	cf08 <Pdb_Adc_Ip_Disable>

    Pdb_Adc_Ip_axState[Instance].Init = FALSE;
    cec2:	4a04      	ldr	r2, [pc, #16]	; (ced4 <Pdb_Adc_Ip_DeInit+0x104>)
    cec4:	9b01      	ldr	r3, [sp, #4]
    cec6:	2100      	movs	r1, #0
    cec8:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
    cecc:	bf00      	nop
    cece:	b017      	add	sp, #92	; 0x5c
    ced0:	f85d fb04 	ldr.w	pc, [sp], #4
    ced4:	1fff8e18 	.word	0x1fff8e18

0000ced8 <Pdb_Adc_Ip_Enable>:
* Description   : This function enables the PDB module, counter is on.
*
* @implements     Pdb_Adc_Ip_Enable_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Enable(const uint32 Instance)
{
    ced8:	b500      	push	{lr}
    ceda:	b085      	sub	sp, #20
    cedc:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    cede:	4a09      	ldr	r2, [pc, #36]	; (cf04 <Pdb_Adc_Ip_Enable+0x2c>)
    cee0:	9b01      	ldr	r3, [sp, #4]
    cee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cee6:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34();
    cee8:	f005 fe40 	bl	12b6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>
    Base->SC |= PDB_SC_PDBEN_MASK;
    ceec:	9b03      	ldr	r3, [sp, #12]
    ceee:	681b      	ldr	r3, [r3, #0]
    cef0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
    cef4:	9b03      	ldr	r3, [sp, #12]
    cef6:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34();
    cef8:	f005 fe64 	bl	12bc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>
}
    cefc:	bf00      	nop
    cefe:	b005      	add	sp, #20
    cf00:	f85d fb04 	ldr.w	pc, [sp], #4
    cf04:	0001a054 	.word	0x0001a054

0000cf08 <Pdb_Adc_Ip_Disable>:
* Description   : This function disables the PDB module, counter is off.
*
* @implements     Pdb_Adc_Ip_Disable_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_Disable(const uint32 Instance)
{
    cf08:	b500      	push	{lr}
    cf0a:	b085      	sub	sp, #20
    cf0c:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    cf0e:	4a08      	ldr	r2, [pc, #32]	; (cf30 <Pdb_Adc_Ip_Disable+0x28>)
    cf10:	9b01      	ldr	r3, [sp, #4]
    cf12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf16:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35();
    cf18:	f005 fe7a 	bl	12c10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>
    Pdb_Adc_HwAcc_DisablePdb(Base);
    cf1c:	9803      	ldr	r0, [sp, #12]
    cf1e:	f7ff fe2c 	bl	cb7a <Pdb_Adc_HwAcc_DisablePdb>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35();
    cf22:	f005 fea1 	bl	12c68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>
}
    cf26:	bf00      	nop
    cf28:	b005      	add	sp, #20
    cf2a:	f85d fb04 	ldr.w	pc, [sp], #4
    cf2e:	bf00      	nop
    cf30:	0001a054 	.word	0x0001a054

0000cf34 <Pdb_Adc_Ip_SetTriggerInput>:
*
* @implements     Pdb_Adc_Ip_SetTriggerInput_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetTriggerInput(const uint32 Instance,
                                const Pdb_Adc_Ip_TriggerSrcType TriggerSource)
{
    cf34:	b500      	push	{lr}
    cf36:	b085      	sub	sp, #20
    cf38:	9001      	str	r0, [sp, #4]
    cf3a:	9100      	str	r1, [sp, #0]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    cf3c:	4a0e      	ldr	r2, [pc, #56]	; (cf78 <Pdb_Adc_Ip_SetTriggerInput+0x44>)
    cf3e:	9b01      	ldr	r3, [sp, #4]
    cf40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf44:	9303      	str	r3, [sp, #12]
    uint32 SCReg;

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36();
    cf46:	f005 feb5 	bl	12cb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>
    SCReg = Base->SC;
    cf4a:	9b03      	ldr	r3, [sp, #12]
    cf4c:	681b      	ldr	r3, [r3, #0]
    cf4e:	9302      	str	r3, [sp, #8]
    SCReg &= ~(PDB_SC_TRGSEL_MASK);
    cf50:	9b02      	ldr	r3, [sp, #8]
    cf52:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    cf56:	9302      	str	r3, [sp, #8]
    SCReg |= PDB_SC_TRGSEL(TriggerSource);
    cf58:	9b00      	ldr	r3, [sp, #0]
    cf5a:	021b      	lsls	r3, r3, #8
    cf5c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    cf60:	9a02      	ldr	r2, [sp, #8]
    cf62:	4313      	orrs	r3, r2
    cf64:	9302      	str	r3, [sp, #8]
    Base->SC = SCReg;
    cf66:	9b03      	ldr	r3, [sp, #12]
    cf68:	9a02      	ldr	r2, [sp, #8]
    cf6a:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36();
    cf6c:	f005 fece 	bl	12d0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>
}
    cf70:	bf00      	nop
    cf72:	b005      	add	sp, #20
    cf74:	f85d fb04 	ldr.w	pc, [sp], #4
    cf78:	0001a054 	.word	0x0001a054

0000cf7c <Pdb_Adc_Ip_SetContinuousMode>:
*
* @implements     Pdb_Adc_Ip_SetContinuousMode_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetContinuousMode(const uint32 Instance,
                                  const boolean State)
{
    cf7c:	b500      	push	{lr}
    cf7e:	b085      	sub	sp, #20
    cf80:	9001      	str	r0, [sp, #4]
    cf82:	460b      	mov	r3, r1
    cf84:	f88d 3003 	strb.w	r3, [sp, #3]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    cf88:	4a09      	ldr	r2, [pc, #36]	; (cfb0 <Pdb_Adc_Ip_SetContinuousMode+0x34>)
    cf8a:	9b01      	ldr	r3, [sp, #4]
    cf8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf90:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37();
    cf92:	f005 fee1 	bl	12d58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>
    Pdb_Adc_HwAcc_SetContinuousMode(Base, State);
    cf96:	f89d 3003 	ldrb.w	r3, [sp, #3]
    cf9a:	4619      	mov	r1, r3
    cf9c:	9803      	ldr	r0, [sp, #12]
    cf9e:	f7ff fdf7 	bl	cb90 <Pdb_Adc_HwAcc_SetContinuousMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37();
    cfa2:	f005 ff05 	bl	12db0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>
}
    cfa6:	bf00      	nop
    cfa8:	b005      	add	sp, #20
    cfaa:	f85d fb04 	ldr.w	pc, [sp], #4
    cfae:	bf00      	nop
    cfb0:	0001a054 	.word	0x0001a054

0000cfb4 <Pdb_Adc_Ip_SwTrigger>:
* triggers the PDB.
*
* @implements     Pdb_Adc_Ip_SwTrigger_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SwTrigger(const uint32 Instance)
{
    cfb4:	b500      	push	{lr}
    cfb6:	b085      	sub	sp, #20
    cfb8:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    cfba:	4a09      	ldr	r2, [pc, #36]	; (cfe0 <Pdb_Adc_Ip_SwTrigger+0x2c>)
    cfbc:	9b01      	ldr	r3, [sp, #4]
    cfbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfc2:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38();
    cfc4:	f005 ff1a 	bl	12dfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>
    Base->SC |= PDB_SC_SWTRIG_MASK;
    cfc8:	9b03      	ldr	r3, [sp, #12]
    cfca:	681b      	ldr	r3, [r3, #0]
    cfcc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    cfd0:	9b03      	ldr	r3, [sp, #12]
    cfd2:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38();
    cfd4:	f005 ff3e 	bl	12e54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>
}
    cfd8:	bf00      	nop
    cfda:	b005      	add	sp, #20
    cfdc:	f85d fb04 	ldr.w	pc, [sp], #4
    cfe0:	0001a054 	.word	0x0001a054

0000cfe4 <Pdb_Adc_Ip_GetTimerValue>:
* Description   : This function gets the current counter value.
*
* @implements     Pdb_Adc_Ip_GetTimerValue_Activity
* END**************************************************************************/
uint32 Pdb_Adc_Ip_GetTimerValue(const uint32 Instance)
{
    cfe4:	b084      	sub	sp, #16
    cfe6:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    cfe8:	4a05      	ldr	r2, [pc, #20]	; (d000 <Pdb_Adc_Ip_GetTimerValue+0x1c>)
    cfea:	9b01      	ldr	r3, [sp, #4]
    cfec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cff0:	9303      	str	r3, [sp, #12]

    return ((Base->CNT & PDB_CNT_CNT_MASK) >> PDB_CNT_CNT_SHIFT);
    cff2:	9b03      	ldr	r3, [sp, #12]
    cff4:	689b      	ldr	r3, [r3, #8]
    cff6:	b29b      	uxth	r3, r3
}
    cff8:	4618      	mov	r0, r3
    cffa:	b004      	add	sp, #16
    cffc:	4770      	bx	lr
    cffe:	bf00      	nop
    d000:	0001a054 	.word	0x0001a054

0000d004 <Pdb_Adc_Ip_LoadRegValues>:
* internal registers or when the PDB is disabled.
*
* @implements     Pdb_Adc_Ip_LoadRegValues_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_LoadRegValues(const uint32 Instance)
{
    d004:	b500      	push	{lr}
    d006:	b085      	sub	sp, #20
    d008:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d00a:	4a09      	ldr	r2, [pc, #36]	; (d030 <Pdb_Adc_Ip_LoadRegValues+0x2c>)
    d00c:	9b01      	ldr	r3, [sp, #4]
    d00e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d012:	9303      	str	r3, [sp, #12]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    /* PDB must be enabled in order to load register values */
    DevAssert((Base->SC & PDB_SC_PDBEN_MASK) != 0u);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39();
    d014:	f005 ff44 	bl	12ea0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>
    Base->SC |= PDB_SC_LDOK_MASK;
    d018:	9b03      	ldr	r3, [sp, #12]
    d01a:	681b      	ldr	r3, [r3, #0]
    d01c:	f043 0201 	orr.w	r2, r3, #1
    d020:	9b03      	ldr	r3, [sp, #12]
    d022:	601a      	str	r2, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39();
    d024:	f005 ff68 	bl	12ef8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>
}
    d028:	bf00      	nop
    d02a:	b005      	add	sp, #20
    d02c:	f85d fb04 	ldr.w	pc, [sp], #4
    d030:	0001a054 	.word	0x0001a054

0000d034 <Pdb_Adc_Ip_SetModulus>:
*
* @implements     Pdb_Adc_Ip_SetModulus_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_SetModulus(const uint32 Instance,
                           const uint16 ModVal)
{
    d034:	b500      	push	{lr}
    d036:	b085      	sub	sp, #20
    d038:	9001      	str	r0, [sp, #4]
    d03a:	460b      	mov	r3, r1
    d03c:	f8ad 3002 	strh.w	r3, [sp, #2]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d040:	4a0d      	ldr	r2, [pc, #52]	; (d078 <Pdb_Adc_Ip_SetModulus+0x44>)
    d042:	9b01      	ldr	r3, [sp, #4]
    d044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d048:	9303      	str	r3, [sp, #12]
    uint32 ModReg;

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48();
    d04a:	f006 fa0b 	bl	13464 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>
    ModReg = Base->MOD;
    d04e:	9b03      	ldr	r3, [sp, #12]
    d050:	685b      	ldr	r3, [r3, #4]
    d052:	9302      	str	r3, [sp, #8]
    ModReg &= ~(PDB_MOD_MOD_MASK);
    d054:	9b02      	ldr	r3, [sp, #8]
    d056:	0c1b      	lsrs	r3, r3, #16
    d058:	041b      	lsls	r3, r3, #16
    d05a:	9302      	str	r3, [sp, #8]
    ModReg |= PDB_MOD_MOD(ModVal);
    d05c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    d060:	9a02      	ldr	r2, [sp, #8]
    d062:	4313      	orrs	r3, r2
    d064:	9302      	str	r3, [sp, #8]
    Base->MOD = ModReg;
    d066:	9b03      	ldr	r3, [sp, #12]
    d068:	9a02      	ldr	r2, [sp, #8]
    d06a:	605a      	str	r2, [r3, #4]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48();
    d06c:	f006 fa26 	bl	134bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>
}
    d070:	bf00      	nop
    d072:	b005      	add	sp, #20
    d074:	f85d fb04 	ldr.w	pc, [sp], #4
    d078:	0001a054 	.word	0x0001a054

0000d07c <Pdb_Adc_Ip_ConfigAdcPretriggers>:
* @implements     Pdb_Adc_Ip_ConfigAdcPretriggers_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_ConfigAdcPretriggers(const uint32 Instance,
                                     const uint8 ChanIdx,
                                     const Pdb_Adc_Ip_PretriggersConfigType * const Config)
{
    d07c:	b500      	push	{lr}
    d07e:	b087      	sub	sp, #28
    d080:	9003      	str	r0, [sp, #12]
    d082:	460b      	mov	r3, r1
    d084:	9201      	str	r2, [sp, #4]
    d086:	f88d 300b 	strb.w	r3, [sp, #11]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(Config != NULL_PTR);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */
    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d08a:	4a0a      	ldr	r2, [pc, #40]	; (d0b4 <Pdb_Adc_Ip_ConfigAdcPretriggers+0x38>)
    d08c:	9b03      	ldr	r3, [sp, #12]
    d08e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d092:	9305      	str	r3, [sp, #20]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41();
    d094:	f005 ffa8 	bl	12fe8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>
    Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanIdx, Config);
    d098:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d09c:	9a01      	ldr	r2, [sp, #4]
    d09e:	4619      	mov	r1, r3
    d0a0:	9805      	ldr	r0, [sp, #20]
    d0a2:	f7ff fd8e 	bl	cbc2 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41();
    d0a6:	f005 ffcb 	bl	13040 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>
}
    d0aa:	bf00      	nop
    d0ac:	b007      	add	sp, #28
    d0ae:	f85d fb04 	ldr.w	pc, [sp], #4
    d0b2:	bf00      	nop
    d0b4:	0001a054 	.word	0x0001a054

0000d0b8 <Pdb_Adc_Ip_GetAdcPretriggerFlags>:
*
* @implements     Pdb_Adc_Ip_GetAdcPretriggerFlags_Activity
* END**************************************************************************/
uint32 Pdb_Adc_Ip_GetAdcPretriggerFlags(const uint32 Instance,
                                        const uint8 ChanIdx)
{
    d0b8:	b084      	sub	sp, #16
    d0ba:	9001      	str	r0, [sp, #4]
    d0bc:	460b      	mov	r3, r1
    d0be:	f88d 3003 	strb.w	r3, [sp, #3]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    const PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d0c2:	4a0c      	ldr	r2, [pc, #48]	; (d0f4 <Pdb_Adc_Ip_GetAdcPretriggerFlags+0x3c>)
    d0c4:	9b01      	ldr	r3, [sp, #4]
    d0c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0ca:	9303      	str	r3, [sp, #12]
    uint32 Result;

    Result = Base->CH[ChanIdx].S;
    d0cc:	f89d 2003 	ldrb.w	r2, [sp, #3]
    d0d0:	9903      	ldr	r1, [sp, #12]
    d0d2:	4613      	mov	r3, r2
    d0d4:	009b      	lsls	r3, r3, #2
    d0d6:	4413      	add	r3, r2
    d0d8:	00db      	lsls	r3, r3, #3
    d0da:	440b      	add	r3, r1
    d0dc:	3314      	adds	r3, #20
    d0de:	681b      	ldr	r3, [r3, #0]
    d0e0:	9302      	str	r3, [sp, #8]
    Result = (Result & PDB_S_CF_MASK) >> PDB_S_CF_SHIFT;
    d0e2:	9b02      	ldr	r3, [sp, #8]
    d0e4:	0c1b      	lsrs	r3, r3, #16
    d0e6:	b2db      	uxtb	r3, r3
    d0e8:	9302      	str	r3, [sp, #8]

    return Result;
    d0ea:	9b02      	ldr	r3, [sp, #8]
}
    d0ec:	4618      	mov	r0, r3
    d0ee:	b004      	add	sp, #16
    d0f0:	4770      	bx	lr
    d0f2:	bf00      	nop
    d0f4:	0001a054 	.word	0x0001a054

0000d0f8 <Pdb_Adc_Ip_ClearAdcPretriggerFlags>:
* @implements     Pdb_Adc_Ip_ClearAdcPretriggerFlags_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_ClearAdcPretriggerFlags(const uint32 Instance,
                                        const uint8 ChanIdx,
                                        const uint16 PretriggMask)
{
    d0f8:	b500      	push	{lr}
    d0fa:	b085      	sub	sp, #20
    d0fc:	9001      	str	r0, [sp, #4]
    d0fe:	460b      	mov	r3, r1
    d100:	f88d 3003 	strb.w	r3, [sp, #3]
    d104:	4613      	mov	r3, r2
    d106:	f8ad 3000 	strh.w	r3, [sp]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d10a:	4a0a      	ldr	r2, [pc, #40]	; (d134 <Pdb_Adc_Ip_ClearAdcPretriggerFlags+0x3c>)
    d10c:	9b01      	ldr	r3, [sp, #4]
    d10e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d112:	9303      	str	r3, [sp, #12]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46();
    d114:	f006 f902 	bl	1331c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>
    /* Write 0 to clear */
    Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(Base, ChanIdx, PretriggMask);
    d118:	f8bd 2000 	ldrh.w	r2, [sp]
    d11c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d120:	4619      	mov	r1, r3
    d122:	9803      	ldr	r0, [sp, #12]
    d124:	f7ff fd85 	bl	cc32 <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46();
    d128:	f006 f924 	bl	13374 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>
}
    d12c:	bf00      	nop
    d12e:	b005      	add	sp, #20
    d130:	f85d fb04 	ldr.w	pc, [sp], #4
    d134:	0001a054 	.word	0x0001a054

0000d138 <Pdb_Adc_Ip_SetAdcPretriggerBackToBack>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerBackToBack(const uint32 Instance,
                                           const uint8 ChanIdx,
                                           const uint8 PretriggIdx,
                                           const boolean Value)
{
    d138:	b500      	push	{lr}
    d13a:	b085      	sub	sp, #20
    d13c:	9001      	str	r0, [sp, #4]
    d13e:	4608      	mov	r0, r1
    d140:	4611      	mov	r1, r2
    d142:	461a      	mov	r2, r3
    d144:	4603      	mov	r3, r0
    d146:	f88d 3003 	strb.w	r3, [sp, #3]
    d14a:	460b      	mov	r3, r1
    d14c:	f88d 3002 	strb.w	r3, [sp, #2]
    d150:	4613      	mov	r3, r2
    d152:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d156:	4a10      	ldr	r2, [pc, #64]	; (d198 <Pdb_Adc_Ip_SetAdcPretriggerBackToBack+0x60>)
    d158:	9b01      	ldr	r3, [sp, #4]
    d15a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d15e:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    d160:	f89d 3002 	ldrb.w	r3, [sp, #2]
    d164:	2201      	movs	r2, #1
    d166:	fa02 f303 	lsl.w	r3, r2, r3
    d16a:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_BB(Mask);
    d16c:	9b02      	ldr	r3, [sp, #8]
    d16e:	041b      	lsls	r3, r3, #16
    d170:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    d174:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42();
    d176:	f005 ff89 	bl	1308c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    d17a:	f89d 3001 	ldrb.w	r3, [sp, #1]
    d17e:	f89d 1003 	ldrb.w	r1, [sp, #3]
    d182:	9a02      	ldr	r2, [sp, #8]
    d184:	9803      	ldr	r0, [sp, #12]
    d186:	f7ff fcb9 	bl	cafc <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42();
    d18a:	f005 ffab 	bl	130e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>
}
    d18e:	bf00      	nop
    d190:	b005      	add	sp, #20
    d192:	f85d fb04 	ldr.w	pc, [sp], #4
    d196:	bf00      	nop
    d198:	0001a054 	.word	0x0001a054

0000d19c <Pdb_Adc_Ip_SetAdcPretriggerEnable>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerEnable(const uint32 Instance,
                                       const uint8 ChanIdx,
                                       const uint8 PretriggIdx,
                                       const boolean Value)
{
    d19c:	b500      	push	{lr}
    d19e:	b085      	sub	sp, #20
    d1a0:	9001      	str	r0, [sp, #4]
    d1a2:	4608      	mov	r0, r1
    d1a4:	4611      	mov	r1, r2
    d1a6:	461a      	mov	r2, r3
    d1a8:	4603      	mov	r3, r0
    d1aa:	f88d 3003 	strb.w	r3, [sp, #3]
    d1ae:	460b      	mov	r3, r1
    d1b0:	f88d 3002 	strb.w	r3, [sp, #2]
    d1b4:	4613      	mov	r3, r2
    d1b6:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d1ba:	4a0f      	ldr	r2, [pc, #60]	; (d1f8 <Pdb_Adc_Ip_SetAdcPretriggerEnable+0x5c>)
    d1bc:	9b01      	ldr	r3, [sp, #4]
    d1be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1c2:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    d1c4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    d1c8:	2201      	movs	r2, #1
    d1ca:	fa02 f303 	lsl.w	r3, r2, r3
    d1ce:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_EN(Mask);
    d1d0:	9b02      	ldr	r3, [sp, #8]
    d1d2:	b2db      	uxtb	r3, r3
    d1d4:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43();
    d1d6:	f005 ffab 	bl	13130 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    d1da:	f89d 3001 	ldrb.w	r3, [sp, #1]
    d1de:	f89d 1003 	ldrb.w	r1, [sp, #3]
    d1e2:	9a02      	ldr	r2, [sp, #8]
    d1e4:	9803      	ldr	r0, [sp, #12]
    d1e6:	f7ff fc89 	bl	cafc <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43();
    d1ea:	f005 ffcd 	bl	13188 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>
}
    d1ee:	bf00      	nop
    d1f0:	b005      	add	sp, #20
    d1f2:	f85d fb04 	ldr.w	pc, [sp], #4
    d1f6:	bf00      	nop
    d1f8:	0001a054 	.word	0x0001a054

0000d1fc <Pdb_Adc_Ip_SetAdcPretriggerDelayEnable>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerDelayEnable(const uint32 Instance,
                                            const uint8 ChanIdx,
                                            const uint8 PretriggIdx,
                                            const boolean Value)
{
    d1fc:	b500      	push	{lr}
    d1fe:	b085      	sub	sp, #20
    d200:	9001      	str	r0, [sp, #4]
    d202:	4608      	mov	r0, r1
    d204:	4611      	mov	r1, r2
    d206:	461a      	mov	r2, r3
    d208:	4603      	mov	r3, r0
    d20a:	f88d 3003 	strb.w	r3, [sp, #3]
    d20e:	460b      	mov	r3, r1
    d210:	f88d 3002 	strb.w	r3, [sp, #2]
    d214:	4613      	mov	r3, r2
    d216:	f88d 3001 	strb.w	r3, [sp, #1]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d21a:	4a0f      	ldr	r2, [pc, #60]	; (d258 <Pdb_Adc_Ip_SetAdcPretriggerDelayEnable+0x5c>)
    d21c:	9b01      	ldr	r3, [sp, #4]
    d21e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d222:	9303      	str	r3, [sp, #12]
    uint32 Mask = (uint32)1u << PretriggIdx;
    d224:	f89d 3002 	ldrb.w	r3, [sp, #2]
    d228:	2201      	movs	r2, #1
    d22a:	fa02 f303 	lsl.w	r3, r2, r3
    d22e:	9302      	str	r3, [sp, #8]

    Mask = PDB_C1_TOS(Mask);
    d230:	9b02      	ldr	r3, [sp, #8]
    d232:	021b      	lsls	r3, r3, #8
    d234:	b29b      	uxth	r3, r3
    d236:	9302      	str	r3, [sp, #8]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44();
    d238:	f005 ffcc 	bl	131d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>
    Pdb_Adc_HwAcc_SetAdcPretriggerMask(Base, ChanIdx, Mask, Value);
    d23c:	f89d 3001 	ldrb.w	r3, [sp, #1]
    d240:	f89d 1003 	ldrb.w	r1, [sp, #3]
    d244:	9a02      	ldr	r2, [sp, #8]
    d246:	9803      	ldr	r0, [sp, #12]
    d248:	f7ff fc58 	bl	cafc <Pdb_Adc_HwAcc_SetAdcPretriggerMask>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44();
    d24c:	f005 ffee 	bl	1322c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>
}
    d250:	bf00      	nop
    d252:	b005      	add	sp, #20
    d254:	f85d fb04 	ldr.w	pc, [sp], #4
    d258:	0001a054 	.word	0x0001a054

0000d25c <Pdb_Adc_Ip_SetAdcPretriggerDelayValue>:
* END**************************************************************************/
void Pdb_Adc_Ip_SetAdcPretriggerDelayValue(const uint32 Instance,
                                           const uint8 ChanIdx,
                                           const uint8 PretriggIdx,
                                           const uint16 DelayValue)
{
    d25c:	b410      	push	{r4}
    d25e:	b085      	sub	sp, #20
    d260:	9001      	str	r0, [sp, #4]
    d262:	4608      	mov	r0, r1
    d264:	4611      	mov	r1, r2
    d266:	461a      	mov	r2, r3
    d268:	4603      	mov	r3, r0
    d26a:	f88d 3003 	strb.w	r3, [sp, #3]
    d26e:	460b      	mov	r3, r1
    d270:	f88d 3002 	strb.w	r3, [sp, #2]
    d274:	4613      	mov	r3, r2
    d276:	f8ad 3000 	strh.w	r3, [sp]
    DevAssert(Instance < PDB_INSTANCE_COUNT);
    DevAssert(ChanIdx < PDB_CH_COUNT);
    DevAssert(PretriggIdx < PDB_DLY_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d27a:	4a0c      	ldr	r2, [pc, #48]	; (d2ac <Pdb_Adc_Ip_SetAdcPretriggerDelayValue+0x50>)
    d27c:	9b01      	ldr	r3, [sp, #4]
    d27e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d282:	9303      	str	r3, [sp, #12]

    Base->CH[ChanIdx].DLY[PretriggIdx] = PDB_DLY_DLY(DelayValue);
    d284:	f89d 2003 	ldrb.w	r2, [sp, #3]
    d288:	f89d 4002 	ldrb.w	r4, [sp, #2]
    d28c:	f8bd 0000 	ldrh.w	r0, [sp]
    d290:	9903      	ldr	r1, [sp, #12]
    d292:	4613      	mov	r3, r2
    d294:	009b      	lsls	r3, r3, #2
    d296:	4413      	add	r3, r2
    d298:	005b      	lsls	r3, r3, #1
    d29a:	4423      	add	r3, r4
    d29c:	3306      	adds	r3, #6
    d29e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
}
    d2a2:	bf00      	nop
    d2a4:	b005      	add	sp, #20
    d2a6:	f85d 4b04 	ldr.w	r4, [sp], #4
    d2aa:	4770      	bx	lr
    d2ac:	0001a054 	.word	0x0001a054

0000d2b0 <Pdb_Adc_Ip_DisableAndClearPdb>:
* configuration and status registers.
*
* @implements     Pdb_Adc_Ip_DisableAndClearPdb_Activity
* END**************************************************************************/
void Pdb_Adc_Ip_DisableAndClearPdb(const uint32 Instance)
{
    d2b0:	b500      	push	{lr}
    d2b2:	b087      	sub	sp, #28
    d2b4:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d2b6:	4a19      	ldr	r2, [pc, #100]	; (d31c <Pdb_Adc_Ip_DisableAndClearPdb+0x6c>)
    d2b8:	9b01      	ldr	r3, [sp, #4]
    d2ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2be:	9304      	str	r3, [sp, #16]
    uint8 ChanIdx;
    const Pdb_Adc_Ip_PretriggersConfigType PdbPretriggsConfig = { 0u, 0u, 0u };
    d2c0:	2300      	movs	r3, #0
    d2c2:	f88d 300c 	strb.w	r3, [sp, #12]
    d2c6:	2300      	movs	r3, #0
    d2c8:	f88d 300d 	strb.w	r3, [sp, #13]
    d2cc:	2300      	movs	r3, #0
    d2ce:	f88d 300e 	strb.w	r3, [sp, #14]

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40();
    d2d2:	f005 fe37 	bl	12f44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>
    Pdb_Adc_HwAcc_DisablePdb(Base);
    d2d6:	9804      	ldr	r0, [sp, #16]
    d2d8:	f7ff fc4f 	bl	cb7a <Pdb_Adc_HwAcc_DisablePdb>
    Pdb_Adc_HwAcc_SetContinuousMode(Base, FALSE);
    d2dc:	2100      	movs	r1, #0
    d2de:	9804      	ldr	r0, [sp, #16]
    d2e0:	f7ff fc56 	bl	cb90 <Pdb_Adc_HwAcc_SetContinuousMode>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40();
    d2e4:	f005 fe5a 	bl	12f9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>

    for (ChanIdx = 0U; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    d2e8:	2300      	movs	r3, #0
    d2ea:	f88d 3017 	strb.w	r3, [sp, #23]
    d2ee:	e00b      	b.n	d308 <Pdb_Adc_Ip_DisableAndClearPdb+0x58>
    {
        PDB_ADC_ResetChannel(Base, ChanIdx, &PdbPretriggsConfig);
    d2f0:	aa03      	add	r2, sp, #12
    d2f2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d2f6:	4619      	mov	r1, r3
    d2f8:	9804      	ldr	r0, [sp, #16]
    d2fa:	f000 f899 	bl	d430 <PDB_ADC_ResetChannel>
    for (ChanIdx = 0U; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    d2fe:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d302:	3301      	adds	r3, #1
    d304:	f88d 3017 	strb.w	r3, [sp, #23]
    d308:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d30c:	2b01      	cmp	r3, #1
    d30e:	d9ef      	bls.n	d2f0 <Pdb_Adc_Ip_DisableAndClearPdb+0x40>
    }
}
    d310:	bf00      	nop
    d312:	bf00      	nop
    d314:	b007      	add	sp, #28
    d316:	f85d fb04 	ldr.w	pc, [sp], #4
    d31a:	bf00      	nop
    d31c:	0001a054 	.word	0x0001a054

0000d320 <Pdb_Adc_Ip_IRQHandler>:
 * Description   : Handles Pdb sequence error interrupt.
 *
 * @implements     Pdb_Adc_Ip_IRQHandler_Activity
 *END*************************************************************************/
void Pdb_Adc_Ip_IRQHandler(const uint32 Instance)
{
    d320:	b500      	push	{lr}
    d322:	b087      	sub	sp, #28
    d324:	9001      	str	r0, [sp, #4]
#if (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < PDB_INSTANCE_COUNT);
#endif /* (PDB_ADC_IP_DEV_ERROR_DETECT == STD_ON) */

    PDB_Type * const Base = Pdb_Adc_Ip_apxBase[Instance];
    d326:	4a40      	ldr	r2, [pc, #256]	; (d428 <Pdb_Adc_Ip_IRQHandler+0x108>)
    d328:	9b01      	ldr	r3, [sp, #4]
    d32a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d32e:	9304      	str	r3, [sp, #16]
    uint8 ChanIdx;
    uint16 SeqErrMask;

    /* Check whether the respective driver is initialized */
    if (TRUE == Pdb_Adc_Ip_axState[Instance].Init)
    d330:	4a3e      	ldr	r2, [pc, #248]	; (d42c <Pdb_Adc_Ip_IRQHandler+0x10c>)
    d332:	9b01      	ldr	r3, [sp, #4]
    d334:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    d338:	2b00      	cmp	r3, #0
    d33a:	d04d      	beq.n	d3d8 <Pdb_Adc_Ip_IRQHandler+0xb8>
    {
        /* CPR_RTD_00664
         * Check if the callback is not NULL since all channels use the same one (to avoid checking inside the loop).
         * Check if the interrupt not spurious (sequence error interrupt is enabled and sequence error flag is set).
         */
        if ( ((Base->SC & PDB_SC_PDBEIE_MASK) != 0u) && (Pdb_Adc_Ip_axState[Instance].SeqErrNotification != NULL_PTR) )
    d33c:	9b04      	ldr	r3, [sp, #16]
    d33e:	681b      	ldr	r3, [r3, #0]
    d340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    d344:	2b00      	cmp	r3, #0
    d346:	d06a      	beq.n	d41e <Pdb_Adc_Ip_IRQHandler+0xfe>
    d348:	4a38      	ldr	r2, [pc, #224]	; (d42c <Pdb_Adc_Ip_IRQHandler+0x10c>)
    d34a:	9b01      	ldr	r3, [sp, #4]
    d34c:	00db      	lsls	r3, r3, #3
    d34e:	4413      	add	r3, r2
    d350:	685b      	ldr	r3, [r3, #4]
    d352:	2b00      	cmp	r3, #0
    d354:	d063      	beq.n	d41e <Pdb_Adc_Ip_IRQHandler+0xfe>
        {
            for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    d356:	2300      	movs	r3, #0
    d358:	f88d 3017 	strb.w	r3, [sp, #23]
    d35c:	e037      	b.n	d3ce <Pdb_Adc_Ip_IRQHandler+0xae>
            {
                SeqErrMask = (uint16) ((Base->CH[ChanIdx].S & PDB_S_ERR_MASK) >> PDB_S_ERR_SHIFT);
    d35e:	f89d 2017 	ldrb.w	r2, [sp, #23]
    d362:	9904      	ldr	r1, [sp, #16]
    d364:	4613      	mov	r3, r2
    d366:	009b      	lsls	r3, r3, #2
    d368:	4413      	add	r3, r2
    d36a:	00db      	lsls	r3, r3, #3
    d36c:	440b      	add	r3, r1
    d36e:	3314      	adds	r3, #20
    d370:	681b      	ldr	r3, [r3, #0]
    d372:	b29b      	uxth	r3, r3
    d374:	b2db      	uxtb	r3, r3
    d376:	f8ad 300e 	strh.w	r3, [sp, #14]
                if (SeqErrMask != 0u)
    d37a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    d37e:	2b00      	cmp	r3, #0
    d380:	d020      	beq.n	d3c4 <Pdb_Adc_Ip_IRQHandler+0xa4>
                {
                    /* Clear the sequence error flag triggered from the current channel (W0C).
                     * And call the associated callback.
                     */
                    Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    d382:	f89d 2017 	ldrb.w	r2, [sp, #23]
    d386:	9904      	ldr	r1, [sp, #16]
    d388:	4613      	mov	r3, r2
    d38a:	009b      	lsls	r3, r3, #2
    d38c:	4413      	add	r3, r2
    d38e:	00db      	lsls	r3, r3, #3
    d390:	440b      	add	r3, r1
    d392:	3314      	adds	r3, #20
    d394:	681b      	ldr	r3, [r3, #0]
    d396:	f89d 2017 	ldrb.w	r2, [sp, #23]
    d39a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    d39e:	9804      	ldr	r0, [sp, #16]
    d3a0:	4613      	mov	r3, r2
    d3a2:	009b      	lsls	r3, r3, #2
    d3a4:	4413      	add	r3, r2
    d3a6:	00db      	lsls	r3, r3, #3
    d3a8:	4403      	add	r3, r0
    d3aa:	3314      	adds	r3, #20
    d3ac:	6019      	str	r1, [r3, #0]
                    Pdb_Adc_Ip_axState[Instance].SeqErrNotification(ChanIdx, SeqErrMask);
    d3ae:	4a1f      	ldr	r2, [pc, #124]	; (d42c <Pdb_Adc_Ip_IRQHandler+0x10c>)
    d3b0:	9b01      	ldr	r3, [sp, #4]
    d3b2:	00db      	lsls	r3, r3, #3
    d3b4:	4413      	add	r3, r2
    d3b6:	685b      	ldr	r3, [r3, #4]
    d3b8:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    d3bc:	f89d 2017 	ldrb.w	r2, [sp, #23]
    d3c0:	4610      	mov	r0, r2
    d3c2:	4798      	blx	r3
            for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    d3c4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d3c8:	3301      	adds	r3, #1
    d3ca:	f88d 3017 	strb.w	r3, [sp, #23]
    d3ce:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d3d2:	2b01      	cmp	r3, #1
    d3d4:	d9c3      	bls.n	d35e <Pdb_Adc_Ip_IRQHandler+0x3e>
            /* Clear all sequence error flags triggered from the current channel
            * by writing 0 to raised bits. */
            Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
        }
    }
}
    d3d6:	e022      	b.n	d41e <Pdb_Adc_Ip_IRQHandler+0xfe>
        for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    d3d8:	2300      	movs	r3, #0
    d3da:	f88d 3017 	strb.w	r3, [sp, #23]
    d3de:	e01a      	b.n	d416 <Pdb_Adc_Ip_IRQHandler+0xf6>
            Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    d3e0:	f89d 2017 	ldrb.w	r2, [sp, #23]
    d3e4:	9904      	ldr	r1, [sp, #16]
    d3e6:	4613      	mov	r3, r2
    d3e8:	009b      	lsls	r3, r3, #2
    d3ea:	4413      	add	r3, r2
    d3ec:	00db      	lsls	r3, r3, #3
    d3ee:	440b      	add	r3, r1
    d3f0:	3314      	adds	r3, #20
    d3f2:	681b      	ldr	r3, [r3, #0]
    d3f4:	f89d 2017 	ldrb.w	r2, [sp, #23]
    d3f8:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    d3fc:	9804      	ldr	r0, [sp, #16]
    d3fe:	4613      	mov	r3, r2
    d400:	009b      	lsls	r3, r3, #2
    d402:	4413      	add	r3, r2
    d404:	00db      	lsls	r3, r3, #3
    d406:	4403      	add	r3, r0
    d408:	3314      	adds	r3, #20
    d40a:	6019      	str	r1, [r3, #0]
        for (ChanIdx = 0u; ChanIdx < PDB_CH_COUNT; ChanIdx++)
    d40c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d410:	3301      	adds	r3, #1
    d412:	f88d 3017 	strb.w	r3, [sp, #23]
    d416:	f89d 3017 	ldrb.w	r3, [sp, #23]
    d41a:	2b01      	cmp	r3, #1
    d41c:	d9e0      	bls.n	d3e0 <Pdb_Adc_Ip_IRQHandler+0xc0>
}
    d41e:	bf00      	nop
    d420:	b007      	add	sp, #28
    d422:	f85d fb04 	ldr.w	pc, [sp], #4
    d426:	bf00      	nop
    d428:	0001a054 	.word	0x0001a054
    d42c:	1fff8e18 	.word	0x1fff8e18

0000d430 <PDB_ADC_ResetChannel>:

static inline void PDB_ADC_ResetChannel(PDB_Type * const Base,
                                        const uint8 ChanIdx,
                                        const Pdb_Adc_Ip_PretriggersConfigType * PdbPretriggsConfig)
{
    d430:	b500      	push	{lr}
    d432:	b085      	sub	sp, #20
    d434:	9003      	str	r0, [sp, #12]
    d436:	460b      	mov	r3, r1
    d438:	9201      	str	r2, [sp, #4]
    d43a:	f88d 300b 	strb.w	r3, [sp, #11]
    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45();
    d43e:	f005 ff1b 	bl	13278 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>
    Pdb_Adc_HwAcc_ConfigAdcPretriggers(Base, ChanIdx, PdbPretriggsConfig);
    d442:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d446:	9a01      	ldr	r2, [sp, #4]
    d448:	4619      	mov	r1, r3
    d44a:	9803      	ldr	r0, [sp, #12]
    d44c:	f7ff fbb9 	bl	cbc2 <Pdb_Adc_HwAcc_ConfigAdcPretriggers>
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45();
    d450:	f005 ff3e 	bl	132d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>

    SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47();
    d454:	f005 ffb4 	bl	133c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>
    Pdb_Adc_HwAcc_ClearAdcPretriggerFlags(Base, ChanIdx, 0xFFu);
    d458:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d45c:	22ff      	movs	r2, #255	; 0xff
    d45e:	4619      	mov	r1, r3
    d460:	9803      	ldr	r0, [sp, #12]
    d462:	f7ff fbe6 	bl	cc32 <Pdb_Adc_HwAcc_ClearAdcPretriggerFlags>

    /* Clear all sequence error flags. */
    Base->CH[ChanIdx].S &= ~(PDB_S_ERR_MASK);
    d466:	f89d 200b 	ldrb.w	r2, [sp, #11]
    d46a:	9903      	ldr	r1, [sp, #12]
    d46c:	4613      	mov	r3, r2
    d46e:	009b      	lsls	r3, r3, #2
    d470:	4413      	add	r3, r2
    d472:	00db      	lsls	r3, r3, #3
    d474:	440b      	add	r3, r1
    d476:	3314      	adds	r3, #20
    d478:	681b      	ldr	r3, [r3, #0]
    d47a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    d47e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    d482:	9803      	ldr	r0, [sp, #12]
    d484:	4613      	mov	r3, r2
    d486:	009b      	lsls	r3, r3, #2
    d488:	4413      	add	r3, r2
    d48a:	00db      	lsls	r3, r3, #3
    d48c:	4403      	add	r3, r0
    d48e:	3314      	adds	r3, #20
    d490:	6019      	str	r1, [r3, #0]
    SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47();
    d492:	f005 ffc1 	bl	13418 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>
}
    d496:	bf00      	nop
    d498:	b005      	add	sp, #20
    d49a:	f85d fb04 	ldr.w	pc, [sp], #4
    d49e:	bf00      	nop

0000d4a0 <Ftm_Pwm_Ip_SetClockPs>:
 * @param[in] FtmBase    The FTM base address pointer
 * @param[in] Prescaler  The FTM peripheral clock pre-scale divider
 */
static inline void Ftm_Pwm_Ip_SetClockPs(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         Ftm_Pwm_Ip_ClkPrescalerType   Prescaler)
{
    d4a0:	b082      	sub	sp, #8
    d4a2:	9001      	str	r0, [sp, #4]
    d4a4:	9100      	str	r1, [sp, #0]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_PS_MASK) | FTM_SC_PS(Prescaler);
    d4a6:	9b01      	ldr	r3, [sp, #4]
    d4a8:	681b      	ldr	r3, [r3, #0]
    d4aa:	f023 0207 	bic.w	r2, r3, #7
    d4ae:	9b00      	ldr	r3, [sp, #0]
    d4b0:	f003 0307 	and.w	r3, r3, #7
    d4b4:	431a      	orrs	r2, r3
    d4b6:	9b01      	ldr	r3, [sp, #4]
    d4b8:	601a      	str	r2, [r3, #0]
}
    d4ba:	bf00      	nop
    d4bc:	b002      	add	sp, #8
    d4be:	4770      	bx	lr

0000d4c0 <Ftm_Pwm_Ip_GetClockPs>:
 * @param[in] FtmBase The FTM base address pointer
 *
 * @return The FTM clock pre-scale divider
 */
static inline uint8 Ftm_Pwm_Ip_GetClockPs(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    d4c0:	b082      	sub	sp, #8
    d4c2:	9001      	str	r0, [sp, #4]
    return (uint8)((FtmBase->SC & FTM_SC_PS_MASK) >> FTM_SC_PS_SHIFT);
    d4c4:	9b01      	ldr	r3, [sp, #4]
    d4c6:	681b      	ldr	r3, [r3, #0]
    d4c8:	b2db      	uxtb	r3, r3
    d4ca:	f003 0307 	and.w	r3, r3, #7
    d4ce:	b2db      	uxtb	r3, r3
}
    d4d0:	4618      	mov	r0, r3
    d4d2:	b002      	add	sp, #8
    d4d4:	4770      	bx	lr

0000d4d6 <Ftm_Pwm_Ip_SetClockSource>:
 *            - 10: Fixed clock
 *            - 11: External clock
 */
static inline void Ftm_Pwm_Ip_SetClockSource(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             Ftm_Pwm_Ip_ClkSourceType      ClockSrc)
{
    d4d6:	b082      	sub	sp, #8
    d4d8:	9001      	str	r0, [sp, #4]
    d4da:	9100      	str	r1, [sp, #0]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_CLKS_MASK) | FTM_SC_CLKS(ClockSrc);
    d4dc:	9b01      	ldr	r3, [sp, #4]
    d4de:	681b      	ldr	r3, [r3, #0]
    d4e0:	f023 0218 	bic.w	r2, r3, #24
    d4e4:	9b00      	ldr	r3, [sp, #0]
    d4e6:	00db      	lsls	r3, r3, #3
    d4e8:	f003 0318 	and.w	r3, r3, #24
    d4ec:	431a      	orrs	r2, r3
    d4ee:	9b01      	ldr	r3, [sp, #4]
    d4f0:	601a      	str	r2, [r3, #0]
}
    d4f2:	bf00      	nop
    d4f4:	b002      	add	sp, #8
    d4f6:	4770      	bx	lr

0000d4f8 <Ftm_Pwm_Ip_SetCpwms>:
 *                     - 0U: Up counting mode
 *                     - 1U: Up down counting mode
 */
static inline void Ftm_Pwm_Ip_SetCpwms(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                       boolean                       Mode)
{
    d4f8:	b082      	sub	sp, #8
    d4fa:	9001      	str	r0, [sp, #4]
    d4fc:	460b      	mov	r3, r1
    d4fe:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_CPWMS_MASK) | FTM_SC_CPWMS((Mode == TRUE) ? 0x01U : 0x00U);
    d502:	9b01      	ldr	r3, [sp, #4]
    d504:	681b      	ldr	r3, [r3, #0]
    d506:	f023 0320 	bic.w	r3, r3, #32
    d50a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    d50e:	2a00      	cmp	r2, #0
    d510:	d001      	beq.n	d516 <Ftm_Pwm_Ip_SetCpwms+0x1e>
    d512:	2220      	movs	r2, #32
    d514:	e000      	b.n	d518 <Ftm_Pwm_Ip_SetCpwms+0x20>
    d516:	2200      	movs	r2, #0
    d518:	431a      	orrs	r2, r3
    d51a:	9b01      	ldr	r3, [sp, #4]
    d51c:	601a      	str	r2, [r3, #0]
}
    d51e:	bf00      	nop
    d520:	b002      	add	sp, #8
    d522:	4770      	bx	lr

0000d524 <Ftm_Pwm_Ip_GetCpwms>:
 * @return The Center-Aligned PWM selection
 *         - 0U: Up counting mode
 *         - 1U: Up down counting mode
 */
static inline Ftm_Pwm_Ip_CounterModeType Ftm_Pwm_Ip_GetCpwms(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    d524:	b082      	sub	sp, #8
    d526:	9001      	str	r0, [sp, #4]
    return  (((FtmBase->SC & FTM_SC_CPWMS_MASK) >> FTM_SC_CPWMS_SHIFT) == 0U)? FTM_PWM_IP_EDGE_ALIGNED : FTM_PWM_IP_CENTER_ALIGNED;
    d528:	9b01      	ldr	r3, [sp, #4]
    d52a:	681b      	ldr	r3, [r3, #0]
    d52c:	f003 0320 	and.w	r3, r3, #32
    d530:	2b00      	cmp	r3, #0
    d532:	bf14      	ite	ne
    d534:	2301      	movne	r3, #1
    d536:	2300      	moveq	r3, #0
    d538:	b2db      	uxtb	r3, r3
}
    d53a:	4618      	mov	r0, r3
    d53c:	b002      	add	sp, #8
    d53e:	4770      	bx	lr

0000d540 <Ftm_Pwm_Ip_SetTimerOverflowInt>:
 * @param[in] State - TRUE : Overflow interrupt enabled
 *                  - FALSE: Overflow interrupt disabled
 */
static inline void Ftm_Pwm_Ip_SetTimerOverflowInt(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  boolean                       State)
{
    d540:	b082      	sub	sp, #8
    d542:	9001      	str	r0, [sp, #4]
    d544:	460b      	mov	r3, r1
    d546:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_TOIE_MASK) | FTM_SC_TOIE((State == TRUE) ? 0x01U : 0x00U);
    d54a:	9b01      	ldr	r3, [sp, #4]
    d54c:	681b      	ldr	r3, [r3, #0]
    d54e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    d552:	f89d 2003 	ldrb.w	r2, [sp, #3]
    d556:	2a00      	cmp	r2, #0
    d558:	d002      	beq.n	d560 <Ftm_Pwm_Ip_SetTimerOverflowInt+0x20>
    d55a:	f44f 7280 	mov.w	r2, #256	; 0x100
    d55e:	e000      	b.n	d562 <Ftm_Pwm_Ip_SetTimerOverflowInt+0x22>
    d560:	2200      	movs	r2, #0
    d562:	431a      	orrs	r2, r3
    d564:	9b01      	ldr	r3, [sp, #4]
    d566:	601a      	str	r2, [r3, #0]
}
    d568:	bf00      	nop
    d56a:	b002      	add	sp, #8
    d56c:	4770      	bx	lr

0000d56e <Ftm_Pwm_Ip_ClearTimerOverflow>:
 * @brief Clears the timer overflow interrupt flag.
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_ClearTimerOverflow(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    d56e:	b082      	sub	sp, #8
    d570:	9001      	str	r0, [sp, #4]
    FtmBase->SC = (FtmBase->SC & ~FTM_SC_TOF_MASK) | FTM_SC_TOF(0U);
    d572:	9b01      	ldr	r3, [sp, #4]
    d574:	681b      	ldr	r3, [r3, #0]
    d576:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    d57a:	9b01      	ldr	r3, [sp, #4]
    d57c:	601a      	str	r2, [r3, #0]
#ifdef ERRATA_E9005
    /* Read-after-write sequence to guarantee required serialization of memory operations */
    FtmBase->SC;
#endif
}
    d57e:	bf00      	nop
    d580:	b002      	add	sp, #8
    d582:	4770      	bx	lr

0000d584 <Ftm_Pwm_Ip_EnablePwmChannelOutputs>:
 * @param[in] Channel The FTM channel

 */
static inline void Ftm_Pwm_Ip_EnablePwmChannelOutputs(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8                         Channel)
{
    d584:	b082      	sub	sp, #8
    d586:	9001      	str	r0, [sp, #4]
    d588:	460b      	mov	r3, r1
    d58a:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SC = (FtmBase->SC & ~(1UL << (Channel + FTM_SC_PWMEN0_SHIFT))) | (1UL << (Channel + FTM_SC_PWMEN0_SHIFT));
    d58e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d592:	3310      	adds	r3, #16
    d594:	2201      	movs	r2, #1
    d596:	409a      	lsls	r2, r3
    d598:	9b01      	ldr	r3, [sp, #4]
    d59a:	681b      	ldr	r3, [r3, #0]
    d59c:	431a      	orrs	r2, r3
    d59e:	9b01      	ldr	r3, [sp, #4]
    d5a0:	601a      	str	r2, [r3, #0]
}
    d5a2:	bf00      	nop
    d5a4:	b002      	add	sp, #8
    d5a6:	4770      	bx	lr

0000d5a8 <Ftm_Pwm_Ip_SetCounter>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The FTM timer counter value to be set
 */
static inline void Ftm_Pwm_Ip_SetCounter(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         uint16                        Value)
{
    d5a8:	b082      	sub	sp, #8
    d5aa:	9001      	str	r0, [sp, #4]
    d5ac:	460b      	mov	r3, r1
    d5ae:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->CNT = (FtmBase->CNT & ~FTM_CNT_COUNT_MASK) | FTM_CNT_COUNT(Value);
    d5b2:	9b01      	ldr	r3, [sp, #4]
    d5b4:	685b      	ldr	r3, [r3, #4]
    d5b6:	0c1b      	lsrs	r3, r3, #16
    d5b8:	041b      	lsls	r3, r3, #16
    d5ba:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    d5be:	431a      	orrs	r2, r3
    d5c0:	9b01      	ldr	r3, [sp, #4]
    d5c2:	605a      	str	r2, [r3, #4]
}
    d5c4:	bf00      	nop
    d5c6:	b002      	add	sp, #8
    d5c8:	4770      	bx	lr

0000d5ca <Ftm_Pwm_Ip_SetMod>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The value to be set to the timer modulo
 */
static inline void Ftm_Pwm_Ip_SetMod(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                     uint16                        Value)
{
    d5ca:	b082      	sub	sp, #8
    d5cc:	9001      	str	r0, [sp, #4]
    d5ce:	460b      	mov	r3, r1
    d5d0:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->MOD = (FtmBase->MOD & ~FTM_MOD_MOD_MASK) | FTM_MOD_MOD(Value);
    d5d4:	9b01      	ldr	r3, [sp, #4]
    d5d6:	689b      	ldr	r3, [r3, #8]
    d5d8:	0c1b      	lsrs	r3, r3, #16
    d5da:	041b      	lsls	r3, r3, #16
    d5dc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    d5e0:	431a      	orrs	r2, r3
    d5e2:	9b01      	ldr	r3, [sp, #4]
    d5e4:	609a      	str	r2, [r3, #8]
}
    d5e6:	bf00      	nop
    d5e8:	b002      	add	sp, #8
    d5ea:	4770      	bx	lr

0000d5ec <Ftm_Pwm_Ip_GetChnEdgeLevel>:
 *
 * Implements : Ftm_Pwm_Ip_GetChnEdgeLevel_Activity
 */
static inline uint8 Ftm_Pwm_Ip_GetChnEdgeLevel(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                               Channel)
{
    d5ec:	b084      	sub	sp, #16
    d5ee:	9001      	str	r0, [sp, #4]
    d5f0:	460b      	mov	r3, r1
    d5f2:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 RetValue;

    RetValue = (uint8)((FtmBase->CONTROLS[Channel].CSC & FTM_CSC_ELSA_MASK) >> FTM_CSC_ELSA_SHIFT);
    d5f6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d5fa:	9a01      	ldr	r2, [sp, #4]
    d5fc:	3301      	adds	r3, #1
    d5fe:	00db      	lsls	r3, r3, #3
    d600:	4413      	add	r3, r2
    d602:	685b      	ldr	r3, [r3, #4]
    d604:	089b      	lsrs	r3, r3, #2
    d606:	b2db      	uxtb	r3, r3
    d608:	f003 0301 	and.w	r3, r3, #1
    d60c:	f88d 300f 	strb.w	r3, [sp, #15]

    RetValue |= (uint8)(((FtmBase->CONTROLS[Channel].CSC & FTM_CSC_ELSB_MASK) >> FTM_CSC_ELSB_SHIFT) << 1U);
    d610:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d614:	9a01      	ldr	r2, [sp, #4]
    d616:	3301      	adds	r3, #1
    d618:	00db      	lsls	r3, r3, #3
    d61a:	4413      	add	r3, r2
    d61c:	685b      	ldr	r3, [r3, #4]
    d61e:	08db      	lsrs	r3, r3, #3
    d620:	b2db      	uxtb	r3, r3
    d622:	005b      	lsls	r3, r3, #1
    d624:	b2db      	uxtb	r3, r3
    d626:	f003 0302 	and.w	r3, r3, #2
    d62a:	b2da      	uxtb	r2, r3
    d62c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d630:	4313      	orrs	r3, r2
    d632:	f88d 300f 	strb.w	r3, [sp, #15]

    return RetValue;
    d636:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    d63a:	4618      	mov	r0, r3
    d63c:	b004      	add	sp, #16
    d63e:	4770      	bx	lr

0000d640 <Ftm_Pwm_Ip_SetChnEdgeLevel>:
 * @param[in] Level    ELSnB:ELSnA :00, 01, 10, 11
 */
static inline void Ftm_Pwm_Ip_SetChnEdgeLevel(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              uint8                         Channel,
                                              Ftm_Pwm_Ip_ChannelModeType    Level)
{
    d640:	b086      	sub	sp, #24
    d642:	9003      	str	r0, [sp, #12]
    d644:	460b      	mov	r3, r1
    d646:	9201      	str	r2, [sp, #4]
    d648:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 LevelA = (uint32)(((uint32)(Level) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_ELSA_MASK);
    d64c:	9b01      	ldr	r3, [sp, #4]
    d64e:	009b      	lsls	r3, r3, #2
    d650:	f003 0304 	and.w	r3, r3, #4
    d654:	9305      	str	r3, [sp, #20]

    uint32 LevelB = (uint32)(((uint32)(Level) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_ELSB_MASK);
    d656:	9b01      	ldr	r3, [sp, #4]
    d658:	009b      	lsls	r3, r3, #2
    d65a:	f003 0308 	and.w	r3, r3, #8
    d65e:	9304      	str	r3, [sp, #16]

    /* write ELSA bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_ELSA_MASK) | LevelA;
    d660:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d664:	9a03      	ldr	r2, [sp, #12]
    d666:	3301      	adds	r3, #1
    d668:	00db      	lsls	r3, r3, #3
    d66a:	4413      	add	r3, r2
    d66c:	685b      	ldr	r3, [r3, #4]
    d66e:	f023 0104 	bic.w	r1, r3, #4
    d672:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d676:	9a05      	ldr	r2, [sp, #20]
    d678:	430a      	orrs	r2, r1
    d67a:	9903      	ldr	r1, [sp, #12]
    d67c:	3301      	adds	r3, #1
    d67e:	00db      	lsls	r3, r3, #3
    d680:	440b      	add	r3, r1
    d682:	605a      	str	r2, [r3, #4]

    /* write ELSB bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_ELSB_MASK) | LevelB;
    d684:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d688:	9a03      	ldr	r2, [sp, #12]
    d68a:	3301      	adds	r3, #1
    d68c:	00db      	lsls	r3, r3, #3
    d68e:	4413      	add	r3, r2
    d690:	685b      	ldr	r3, [r3, #4]
    d692:	f023 0108 	bic.w	r1, r3, #8
    d696:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d69a:	9a04      	ldr	r2, [sp, #16]
    d69c:	430a      	orrs	r2, r1
    d69e:	9903      	ldr	r1, [sp, #12]
    d6a0:	3301      	adds	r3, #1
    d6a2:	00db      	lsls	r3, r3, #3
    d6a4:	440b      	add	r3, r1
    d6a6:	605a      	str	r2, [r3, #4]
}
    d6a8:	bf00      	nop
    d6aa:	b006      	add	sp, #24
    d6ac:	4770      	bx	lr

0000d6ae <Ftm_Pwm_Ip_SetChnMSBAMode>:
 * @param[in] Selection  The mode to be set valid value MSnB:MSnA :00, 01, 10, 11
 */
static inline void Ftm_Pwm_Ip_SetChnMSBAMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             uint8                         Channel,
                                             Ftm_Pwm_Ip_ChannelModeType    Selection)
{
    d6ae:	b086      	sub	sp, #24
    d6b0:	9003      	str	r0, [sp, #12]
    d6b2:	460b      	mov	r3, r1
    d6b4:	9201      	str	r2, [sp, #4]
    d6b6:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 SelectionA = (uint32)(((uint32)(Selection) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_MSA_MASK);
    d6ba:	9b01      	ldr	r3, [sp, #4]
    d6bc:	009b      	lsls	r3, r3, #2
    d6be:	f003 0310 	and.w	r3, r3, #16
    d6c2:	9305      	str	r3, [sp, #20]

    uint32 SelectionB = (uint32)(((uint32)(Selection) << FTM_CSC_ELSA_SHIFT) & FTM_CSC_MSB_MASK);
    d6c4:	9b01      	ldr	r3, [sp, #4]
    d6c6:	009b      	lsls	r3, r3, #2
    d6c8:	f003 0320 	and.w	r3, r3, #32
    d6cc:	9304      	str	r3, [sp, #16]

    /* write MSA bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_MSA_MASK) | SelectionA;
    d6ce:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d6d2:	9a03      	ldr	r2, [sp, #12]
    d6d4:	3301      	adds	r3, #1
    d6d6:	00db      	lsls	r3, r3, #3
    d6d8:	4413      	add	r3, r2
    d6da:	685b      	ldr	r3, [r3, #4]
    d6dc:	f023 0110 	bic.w	r1, r3, #16
    d6e0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d6e4:	9a05      	ldr	r2, [sp, #20]
    d6e6:	430a      	orrs	r2, r1
    d6e8:	9903      	ldr	r1, [sp, #12]
    d6ea:	3301      	adds	r3, #1
    d6ec:	00db      	lsls	r3, r3, #3
    d6ee:	440b      	add	r3, r1
    d6f0:	605a      	str	r2, [r3, #4]

    /* write MSB bit */
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_MSB_MASK) | SelectionB;
    d6f2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d6f6:	9a03      	ldr	r2, [sp, #12]
    d6f8:	3301      	adds	r3, #1
    d6fa:	00db      	lsls	r3, r3, #3
    d6fc:	4413      	add	r3, r2
    d6fe:	685b      	ldr	r3, [r3, #4]
    d700:	f023 0120 	bic.w	r1, r3, #32
    d704:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d708:	9a04      	ldr	r2, [sp, #16]
    d70a:	430a      	orrs	r2, r1
    d70c:	9903      	ldr	r1, [sp, #12]
    d70e:	3301      	adds	r3, #1
    d710:	00db      	lsls	r3, r3, #3
    d712:	440b      	add	r3, r1
    d714:	605a      	str	r2, [r3, #4]
}
    d716:	bf00      	nop
    d718:	b006      	add	sp, #24
    d71a:	4770      	bx	lr

0000d71c <Ftm_Pwm_Ip_GetChnMode>:
 * @return The MSnB:MSnA mode value, will be 00, 01, 10, 11
 *
 */
static inline uint8 Ftm_Pwm_Ip_GetChnMode(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                          uint8                               Channel)
{
    d71c:	b084      	sub	sp, #16
    d71e:	9001      	str	r0, [sp, #4]
    d720:	460b      	mov	r3, r1
    d722:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 RetValue;

    RetValue = (uint8)(((FtmBase->CONTROLS[Channel].CSC) & FTM_CSC_MSA_MASK) >> FTM_CSC_MSA_SHIFT);
    d726:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d72a:	9a01      	ldr	r2, [sp, #4]
    d72c:	3301      	adds	r3, #1
    d72e:	00db      	lsls	r3, r3, #3
    d730:	4413      	add	r3, r2
    d732:	685b      	ldr	r3, [r3, #4]
    d734:	091b      	lsrs	r3, r3, #4
    d736:	b2db      	uxtb	r3, r3
    d738:	f003 0301 	and.w	r3, r3, #1
    d73c:	f88d 300f 	strb.w	r3, [sp, #15]

    RetValue |= (uint8)((((FtmBase->CONTROLS[Channel].CSC) & FTM_CSC_MSB_MASK) >> FTM_CSC_MSB_SHIFT) << 1U);
    d740:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d744:	9a01      	ldr	r2, [sp, #4]
    d746:	3301      	adds	r3, #1
    d748:	00db      	lsls	r3, r3, #3
    d74a:	4413      	add	r3, r2
    d74c:	685b      	ldr	r3, [r3, #4]
    d74e:	095b      	lsrs	r3, r3, #5
    d750:	b2db      	uxtb	r3, r3
    d752:	005b      	lsls	r3, r3, #1
    d754:	b2db      	uxtb	r3, r3
    d756:	f003 0302 	and.w	r3, r3, #2
    d75a:	b2da      	uxtb	r2, r3
    d75c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d760:	4313      	orrs	r3, r2
    d762:	f88d 300f 	strb.w	r3, [sp, #15]

    return RetValue;
    d766:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    d76a:	4618      	mov	r0, r3
    d76c:	b004      	add	sp, #16
    d76e:	4770      	bx	lr

0000d770 <Ftm_Pwm_Ip_UpdateChnInt>:
 * @param[in] Enable  Enable or Disable the FTM peripheral timer channel(n) interrupt.
 */
static inline void Ftm_Pwm_Ip_UpdateChnInt(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                           uint8                         Channel,
                                           boolean                       Enable)
{
    d770:	b082      	sub	sp, #8
    d772:	9001      	str	r0, [sp, #4]
    d774:	460b      	mov	r3, r1
    d776:	f88d 3003 	strb.w	r3, [sp, #3]
    d77a:	4613      	mov	r3, r2
    d77c:	f88d 3002 	strb.w	r3, [sp, #2]
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_CHIE_MASK) | FTM_CSC_CHIE((Enable == TRUE) ? 0x01U : 0x00U);
    d780:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d784:	9a01      	ldr	r2, [sp, #4]
    d786:	3301      	adds	r3, #1
    d788:	00db      	lsls	r3, r3, #3
    d78a:	4413      	add	r3, r2
    d78c:	685b      	ldr	r3, [r3, #4]
    d78e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
    d792:	f89d 3002 	ldrb.w	r3, [sp, #2]
    d796:	2b00      	cmp	r3, #0
    d798:	d001      	beq.n	d79e <Ftm_Pwm_Ip_UpdateChnInt+0x2e>
    d79a:	2140      	movs	r1, #64	; 0x40
    d79c:	e000      	b.n	d7a0 <Ftm_Pwm_Ip_UpdateChnInt+0x30>
    d79e:	2100      	movs	r1, #0
    d7a0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d7a4:	430a      	orrs	r2, r1
    d7a6:	9901      	ldr	r1, [sp, #4]
    d7a8:	3301      	adds	r3, #1
    d7aa:	00db      	lsls	r3, r3, #3
    d7ac:	440b      	add	r3, r1
    d7ae:	605a      	str	r2, [r3, #4]
}
    d7b0:	bf00      	nop
    d7b2:	b002      	add	sp, #8
    d7b4:	4770      	bx	lr

0000d7b6 <Ftm_Pwm_Ip_ClearChnEventFlag>:
 * @param[in] FtmBase The FTM base address pointer
 * @param[in] Channel The FTM peripheral channel number
 */
static inline void Ftm_Pwm_Ip_ClearChnEventFlag(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         Channel)
{
    d7b6:	b082      	sub	sp, #8
    d7b8:	9001      	str	r0, [sp, #4]
    d7ba:	460b      	mov	r3, r1
    d7bc:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->CONTROLS[Channel].CSC = (FtmBase->CONTROLS[Channel].CSC & ~FTM_CSC_CHF_MASK) | FTM_CSC_CHF(0U);
    d7c0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d7c4:	9a01      	ldr	r2, [sp, #4]
    d7c6:	3301      	adds	r3, #1
    d7c8:	00db      	lsls	r3, r3, #3
    d7ca:	4413      	add	r3, r2
    d7cc:	685a      	ldr	r2, [r3, #4]
    d7ce:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d7d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    d7d6:	9901      	ldr	r1, [sp, #4]
    d7d8:	3301      	adds	r3, #1
    d7da:	00db      	lsls	r3, r3, #3
    d7dc:	440b      	add	r3, r1
    d7de:	605a      	str	r2, [r3, #4]
#ifdef ERRATA_E9005
    /* Read-after-write sequence to guarantee required serialization of memory operations */
    FtmBase->CONTROLS[Channel].CSC;
#endif
}
    d7e0:	bf00      	nop
    d7e2:	b002      	add	sp, #8
    d7e4:	4770      	bx	lr

0000d7e6 <Ftm_Pwm_Ip_GetChOutputValue>:
 *
 * Implements : Ftm_Pwm_Ip_GetChOutputValue_Activity
 */
static inline boolean Ftm_Pwm_Ip_GetChOutputValue(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                               Channel)
{
    d7e6:	b082      	sub	sp, #8
    d7e8:	9001      	str	r0, [sp, #4]
    d7ea:	460b      	mov	r3, r1
    d7ec:	f88d 3003 	strb.w	r3, [sp, #3]
    return (FtmBase->CONTROLS[Channel].CSC & FTM_CSC_CHOV_MASK) != 0U;
    d7f0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d7f4:	9a01      	ldr	r2, [sp, #4]
    d7f6:	3301      	adds	r3, #1
    d7f8:	00db      	lsls	r3, r3, #3
    d7fa:	4413      	add	r3, r2
    d7fc:	685b      	ldr	r3, [r3, #4]
    d7fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    d802:	2b00      	cmp	r3, #0
    d804:	bf14      	ite	ne
    d806:	2301      	movne	r3, #1
    d808:	2300      	moveq	r3, #0
    d80a:	b2db      	uxtb	r3, r3
}
    d80c:	4618      	mov	r0, r3
    d80e:	b002      	add	sp, #8
    d810:	4770      	bx	lr

0000d812 <Ftm_Pwm_Ip_SetChnCountVal>:
 * @param[in] Value Counter value to be set
 */
static inline void Ftm_Pwm_Ip_SetChnCountVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             uint8                         Channel,
                                             uint16                        Value)
{
    d812:	b082      	sub	sp, #8
    d814:	9001      	str	r0, [sp, #4]
    d816:	460b      	mov	r3, r1
    d818:	f88d 3003 	strb.w	r3, [sp, #3]
    d81c:	4613      	mov	r3, r2
    d81e:	f8ad 3000 	strh.w	r3, [sp]
    FtmBase->CONTROLS[Channel].CV = Value;
    d822:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d826:	f8bd 2000 	ldrh.w	r2, [sp]
    d82a:	9901      	ldr	r1, [sp, #4]
    d82c:	3301      	adds	r3, #1
    d82e:	00db      	lsls	r3, r3, #3
    d830:	440b      	add	r3, r1
    d832:	609a      	str	r2, [r3, #8]
}
    d834:	bf00      	nop
    d836:	b002      	add	sp, #8
    d838:	4770      	bx	lr

0000d83a <Ftm_Pwm_Ip_GetChnCountVal>:
 *
 * Implements : Ftm_Pwm_Ip_GetChnCountVal_Activity
 */
static inline uint16 Ftm_Pwm_Ip_GetChnCountVal(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                               Channel)
{
    d83a:	b082      	sub	sp, #8
    d83c:	9001      	str	r0, [sp, #4]
    d83e:	460b      	mov	r3, r1
    d840:	f88d 3003 	strb.w	r3, [sp, #3]
    return (uint16)(FtmBase->CONTROLS[Channel].CV);
    d844:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d848:	9a01      	ldr	r2, [sp, #4]
    d84a:	3301      	adds	r3, #1
    d84c:	00db      	lsls	r3, r3, #3
    d84e:	4413      	add	r3, r2
    d850:	689b      	ldr	r3, [r3, #8]
    d852:	b29b      	uxth	r3, r3
}
    d854:	4618      	mov	r0, r3
    d856:	b002      	add	sp, #8
    d858:	4770      	bx	lr

0000d85a <Ftm_Pwm_Ip_SetCounterInitVal>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    Initial value to be set
 */
static inline void Ftm_Pwm_Ip_SetCounterInitVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint16                        Value)
{
    d85a:	b082      	sub	sp, #8
    d85c:	9001      	str	r0, [sp, #4]
    d85e:	460b      	mov	r3, r1
    d860:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->CNTIN = (FtmBase->CNTIN & ~FTM_CNTIN_INIT_MASK) | FTM_CNTIN_INIT(Value);
    d864:	9b01      	ldr	r3, [sp, #4]
    d866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    d868:	0c1b      	lsrs	r3, r3, #16
    d86a:	041b      	lsls	r3, r3, #16
    d86c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    d870:	431a      	orrs	r2, r3
    d872:	9b01      	ldr	r3, [sp, #4]
    d874:	64da      	str	r2, [r3, #76]	; 0x4c
}
    d876:	bf00      	nop
    d878:	b002      	add	sp, #8
    d87a:	4770      	bx	lr

0000d87c <Ftm_Pwm_Ip_Enable>:
 *                     - TRUE : All registers including FTM-specific registers are available
 *                     - FALSE: Only the TPM-compatible registers are available
 */
static inline void Ftm_Pwm_Ip_Enable(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                     boolean                       Enable)
{
    d87c:	b082      	sub	sp, #8
    d87e:	9001      	str	r0, [sp, #4]
    d880:	460b      	mov	r3, r1
    d882:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FTMEN_MASK) | FTM_MODE_FTMEN((Enable == TRUE) ? 0x01U : 0x00U);
    d886:	9b01      	ldr	r3, [sp, #4]
    d888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    d88a:	f023 0301 	bic.w	r3, r3, #1
    d88e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    d892:	2a00      	cmp	r2, #0
    d894:	d001      	beq.n	d89a <Ftm_Pwm_Ip_Enable+0x1e>
    d896:	2201      	movs	r2, #1
    d898:	e000      	b.n	d89c <Ftm_Pwm_Ip_Enable+0x20>
    d89a:	2200      	movs	r2, #0
    d89c:	431a      	orrs	r2, r3
    d89e:	9b01      	ldr	r3, [sp, #4]
    d8a0:	655a      	str	r2, [r3, #84]	; 0x54
}
    d8a2:	bf00      	nop
    d8a4:	b002      	add	sp, #8
    d8a6:	4770      	bx	lr

0000d8a8 <Ftm_Pwm_Ip_SetPwmSyncMode>:
 *                     - TRUE : Software trigger can only be used for MOD and CV synchronization,
 *                            hardware trigger only for OUTMASK and FTM counter synchronization.
 */
static inline void Ftm_Pwm_Ip_SetPwmSyncMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                             boolean                       Enable)
{
    d8a8:	b082      	sub	sp, #8
    d8aa:	9001      	str	r0, [sp, #4]
    d8ac:	460b      	mov	r3, r1
    d8ae:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_PWMSYNC_MASK) | FTM_MODE_PWMSYNC((Enable == TRUE) ? 0x01U : 0x00U);
    d8b2:	9b01      	ldr	r3, [sp, #4]
    d8b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    d8b6:	f023 0308 	bic.w	r3, r3, #8
    d8ba:	f89d 2003 	ldrb.w	r2, [sp, #3]
    d8be:	2a00      	cmp	r2, #0
    d8c0:	d001      	beq.n	d8c6 <Ftm_Pwm_Ip_SetPwmSyncMode+0x1e>
    d8c2:	2208      	movs	r2, #8
    d8c4:	e000      	b.n	d8c8 <Ftm_Pwm_Ip_SetPwmSyncMode+0x20>
    d8c6:	2200      	movs	r2, #0
    d8c8:	431a      	orrs	r2, r3
    d8ca:	9b01      	ldr	r3, [sp, #4]
    d8cc:	655a      	str	r2, [r3, #84]	; 0x54
}
    d8ce:	bf00      	nop
    d8d0:	b002      	add	sp, #8
    d8d2:	4770      	bx	lr

0000d8d4 <Ftm_Pwm_Ip_SetMinLoadingCmd>:
 *                     - TRUE : To enable minimum loading point
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetMinLoadingCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               boolean                       Enable)
{
    d8d4:	b082      	sub	sp, #8
    d8d6:	9001      	str	r0, [sp, #4]
    d8d8:	460b      	mov	r3, r1
    d8da:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_CNTMIN_MASK) | FTM_SYNC_CNTMIN((Enable == TRUE) ? 0x01U : 0x00U);
    d8de:	9b01      	ldr	r3, [sp, #4]
    d8e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    d8e2:	f023 0301 	bic.w	r3, r3, #1
    d8e6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    d8ea:	2a00      	cmp	r2, #0
    d8ec:	d001      	beq.n	d8f2 <Ftm_Pwm_Ip_SetMinLoadingCmd+0x1e>
    d8ee:	2201      	movs	r2, #1
    d8f0:	e000      	b.n	d8f4 <Ftm_Pwm_Ip_SetMinLoadingCmd+0x20>
    d8f2:	2200      	movs	r2, #0
    d8f4:	431a      	orrs	r2, r3
    d8f6:	9b01      	ldr	r3, [sp, #4]
    d8f8:	659a      	str	r2, [r3, #88]	; 0x58
}
    d8fa:	bf00      	nop
    d8fc:	b002      	add	sp, #8
    d8fe:	4770      	bx	lr

0000d900 <Ftm_Pwm_Ip_SetMaxLoadingCmd>:
 *                     - TRUE : To enable maximum loading point
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetMaxLoadingCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               boolean                       Enable)
{
    d900:	b082      	sub	sp, #8
    d902:	9001      	str	r0, [sp, #4]
    d904:	460b      	mov	r3, r1
    d906:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_CNTMAX_MASK) | FTM_SYNC_CNTMAX((Enable == TRUE) ? 0x01U : 0x00U);
    d90a:	9b01      	ldr	r3, [sp, #4]
    d90c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    d90e:	f023 0302 	bic.w	r3, r3, #2
    d912:	f89d 2003 	ldrb.w	r2, [sp, #3]
    d916:	2a00      	cmp	r2, #0
    d918:	d001      	beq.n	d91e <Ftm_Pwm_Ip_SetMaxLoadingCmd+0x1e>
    d91a:	2202      	movs	r2, #2
    d91c:	e000      	b.n	d920 <Ftm_Pwm_Ip_SetMaxLoadingCmd+0x20>
    d91e:	2200      	movs	r2, #0
    d920:	431a      	orrs	r2, r3
    d922:	9b01      	ldr	r3, [sp, #4]
    d924:	659a      	str	r2, [r3, #88]	; 0x58
}
    d926:	bf00      	nop
    d928:	b002      	add	sp, #8
    d92a:	4770      	bx	lr

0000d92c <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>:
 *                     - TRUE : OUTMASK register is updated only by PWM synchronization
 *                     - FALSE: OUTMASK register is updated in all rising edges of the system clock
 */
static inline void Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    d92c:	b082      	sub	sp, #8
    d92e:	9001      	str	r0, [sp, #4]
    d930:	460b      	mov	r3, r1
    d932:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_SYNCHOM_MASK) | FTM_SYNC_SYNCHOM((Enable == TRUE) ? 0x01U : 0x00U);
    d936:	9b01      	ldr	r3, [sp, #4]
    d938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    d93a:	f023 0308 	bic.w	r3, r3, #8
    d93e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    d942:	2a00      	cmp	r2, #0
    d944:	d001      	beq.n	d94a <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd+0x1e>
    d946:	2208      	movs	r2, #8
    d948:	e000      	b.n	d94c <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd+0x20>
    d94a:	2200      	movs	r2, #0
    d94c:	431a      	orrs	r2, r3
    d94e:	9b01      	ldr	r3, [sp, #4]
    d950:	659a      	str	r2, [r3, #88]	; 0x58
}
    d952:	bf00      	nop
    d954:	b002      	add	sp, #8
    d956:	4770      	bx	lr

0000d958 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>:
 *                           - FALSE: Disable hardware trigger from field TriggerNumber for PWM synchronization
 */
static inline void Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                        uint8                         TriggerNumber,
                                                        boolean                       Enable)
{
    d958:	b082      	sub	sp, #8
    d95a:	9001      	str	r0, [sp, #4]
    d95c:	460b      	mov	r3, r1
    d95e:	f88d 3003 	strb.w	r3, [sp, #3]
    d962:	4613      	mov	r3, r2
    d964:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    d968:	f89d 3002 	ldrb.w	r3, [sp, #2]
    d96c:	2b00      	cmp	r3, #0
    d96e:	d00a      	beq.n	d986 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc+0x2e>
    {
        FtmBase->SYNC |= (uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber;
    d970:	9b01      	ldr	r3, [sp, #4]
    d972:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    d974:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d978:	2110      	movs	r1, #16
    d97a:	fa01 f303 	lsl.w	r3, r1, r3
    d97e:	431a      	orrs	r2, r3
    d980:	9b01      	ldr	r3, [sp, #4]
    d982:	659a      	str	r2, [r3, #88]	; 0x58
    }
    else
    {
        FtmBase->SYNC &= ~((uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber);
    }
}
    d984:	e00a      	b.n	d99c <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc+0x44>
        FtmBase->SYNC &= ~((uint32)FTM_SYNC_TRIG0_MASK << TriggerNumber);
    d986:	9b01      	ldr	r3, [sp, #4]
    d988:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    d98a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    d98e:	2110      	movs	r1, #16
    d990:	fa01 f303 	lsl.w	r3, r1, r3
    d994:	43db      	mvns	r3, r3
    d996:	401a      	ands	r2, r3
    d998:	9b01      	ldr	r3, [sp, #4]
    d99a:	659a      	str	r2, [r3, #88]	; 0x58
}
    d99c:	bf00      	nop
    d99e:	b002      	add	sp, #8
    d9a0:	4770      	bx	lr

0000d9a2 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>:
 *                     - TRUE : Software trigger is selected
 *                     - FALSE: Software trigger is not selected
 */
static inline void Ftm_Pwm_Ip_SetSoftwareTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    boolean                       Enable)
{
    d9a2:	b082      	sub	sp, #8
    d9a4:	9001      	str	r0, [sp, #4]
    d9a6:	460b      	mov	r3, r1
    d9a8:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNC = (FtmBase->SYNC & ~FTM_SYNC_SWSYNC_MASK) | FTM_SYNC_SWSYNC((Enable == TRUE) ? 0x01U : 0x00U);
    d9ac:	9b01      	ldr	r3, [sp, #4]
    d9ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    d9b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    d9b4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    d9b8:	2a00      	cmp	r2, #0
    d9ba:	d001      	beq.n	d9c0 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd+0x1e>
    d9bc:	2280      	movs	r2, #128	; 0x80
    d9be:	e000      	b.n	d9c2 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd+0x20>
    d9c0:	2200      	movs	r2, #0
    d9c2:	431a      	orrs	r2, r3
    d9c4:	9b01      	ldr	r3, [sp, #4]
    d9c6:	659a      	str	r2, [r3, #88]	; 0x58
}
    d9c8:	bf00      	nop
    d9ca:	b002      	add	sp, #8
    d9cc:	4770      	bx	lr

0000d9ce <Ftm_Pwm_Ip_SetChnOutputInitStateCmd>:
 * Implements : Ftm_Pwm_Ip_SetChnOutputInitStateCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnOutputInitStateCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       uint8                         Channel,
                                                       Ftm_Pwm_Ip_OutputStateType    State)
{
    d9ce:	b084      	sub	sp, #16
    d9d0:	9003      	str	r0, [sp, #12]
    d9d2:	460b      	mov	r3, r1
    d9d4:	9201      	str	r2, [sp, #4]
    d9d6:	f88d 300b 	strb.w	r3, [sp, #11]
    if (FTM_PWM_IP_OUTPUT_STATE_HIGH == State)
    d9da:	9b01      	ldr	r3, [sp, #4]
    d9dc:	2b01      	cmp	r3, #1
    d9de:	d10a      	bne.n	d9f6 <Ftm_Pwm_Ip_SetChnOutputInitStateCmd+0x28>
    {
        FtmBase->OUTINIT |= (1UL << Channel);
    d9e0:	9b03      	ldr	r3, [sp, #12]
    d9e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    d9e4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d9e8:	2101      	movs	r1, #1
    d9ea:	fa01 f303 	lsl.w	r3, r1, r3
    d9ee:	431a      	orrs	r2, r3
    d9f0:	9b03      	ldr	r3, [sp, #12]
    d9f2:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    else
    {
        FtmBase->OUTINIT &= ~(1UL << Channel);
    }
}
    d9f4:	e00a      	b.n	da0c <Ftm_Pwm_Ip_SetChnOutputInitStateCmd+0x3e>
        FtmBase->OUTINIT &= ~(1UL << Channel);
    d9f6:	9b03      	ldr	r3, [sp, #12]
    d9f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    d9fa:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d9fe:	2101      	movs	r1, #1
    da00:	fa01 f303 	lsl.w	r3, r1, r3
    da04:	43db      	mvns	r3, r3
    da06:	401a      	ands	r2, r3
    da08:	9b03      	ldr	r3, [sp, #12]
    da0a:	65da      	str	r2, [r3, #92]	; 0x5c
}
    da0c:	bf00      	nop
    da0e:	b004      	add	sp, #16
    da10:	4770      	bx	lr

0000da12 <Ftm_Pwm_Ip_SetChnOutputMask>:
 * Implements : Ftm_Pwm_Ip_SetChnOutputMask_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnOutputMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Channel,
                                               boolean                       EnableMask)
{
    da12:	b082      	sub	sp, #8
    da14:	9001      	str	r0, [sp, #4]
    da16:	460b      	mov	r3, r1
    da18:	f88d 3003 	strb.w	r3, [sp, #3]
    da1c:	4613      	mov	r3, r2
    da1e:	f88d 3002 	strb.w	r3, [sp, #2]
    if (EnableMask)
    da22:	f89d 3002 	ldrb.w	r3, [sp, #2]
    da26:	2b00      	cmp	r3, #0
    da28:	d00a      	beq.n	da40 <Ftm_Pwm_Ip_SetChnOutputMask+0x2e>
    {
        FtmBase->OUTMASK |= 1UL << Channel;
    da2a:	9b01      	ldr	r3, [sp, #4]
    da2c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    da2e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    da32:	2101      	movs	r1, #1
    da34:	fa01 f303 	lsl.w	r3, r1, r3
    da38:	431a      	orrs	r2, r3
    da3a:	9b01      	ldr	r3, [sp, #4]
    da3c:	661a      	str	r2, [r3, #96]	; 0x60
    }
    else
    {
        FtmBase->OUTMASK &= ~(1UL << Channel);
    }
}
    da3e:	e00a      	b.n	da56 <Ftm_Pwm_Ip_SetChnOutputMask+0x44>
        FtmBase->OUTMASK &= ~(1UL << Channel);
    da40:	9b01      	ldr	r3, [sp, #4]
    da42:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    da44:	f89d 3003 	ldrb.w	r3, [sp, #3]
    da48:	2101      	movs	r1, #1
    da4a:	fa01 f303 	lsl.w	r3, r1, r3
    da4e:	43db      	mvns	r3, r3
    da50:	401a      	ands	r2, r3
    da52:	9b01      	ldr	r3, [sp, #4]
    da54:	661a      	str	r2, [r3, #96]	; 0x60
}
    da56:	bf00      	nop
    da58:	b002      	add	sp, #8
    da5a:	4770      	bx	lr

0000da5c <Ftm_Pwm_Ip_SetOutmaskReg>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] RegVal   Value to be written to the register
 */
static inline void Ftm_Pwm_Ip_SetOutmaskReg(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                            uint32                        RegVal)
{
    da5c:	b082      	sub	sp, #8
    da5e:	9001      	str	r0, [sp, #4]
    da60:	9100      	str	r1, [sp, #0]
    FtmBase->OUTMASK = ((FtmBase->OUTMASK & (uint32)(~RegVal))| RegVal);
    da62:	9b01      	ldr	r3, [sp, #4]
    da64:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    da66:	9b00      	ldr	r3, [sp, #0]
    da68:	43db      	mvns	r3, r3
    da6a:	401a      	ands	r2, r3
    da6c:	9b00      	ldr	r3, [sp, #0]
    da6e:	431a      	orrs	r2, r3
    da70:	9b01      	ldr	r3, [sp, #4]
    da72:	661a      	str	r2, [r3, #96]	; 0x60
}
    da74:	bf00      	nop
    da76:	b002      	add	sp, #8
    da78:	4770      	bx	lr

0000da7a <Ftm_Pwm_Ip_ClearOutmaskReg>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] RegVal   Value to be written to the register
 */
static inline void Ftm_Pwm_Ip_ClearOutmaskReg(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              uint32                        RegVal)
{
    da7a:	b082      	sub	sp, #8
    da7c:	9001      	str	r0, [sp, #4]
    da7e:	9100      	str	r1, [sp, #0]
    FtmBase->OUTMASK = ((FtmBase->OUTMASK & (uint32)(~RegVal))|0U);
    da80:	9b01      	ldr	r3, [sp, #4]
    da82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    da84:	9b00      	ldr	r3, [sp, #0]
    da86:	43db      	mvns	r3, r3
    da88:	401a      	ands	r2, r3
    da8a:	9b01      	ldr	r3, [sp, #4]
    da8c:	661a      	str	r2, [r3, #96]	; 0x60
}
    da8e:	bf00      	nop
    da90:	b002      	add	sp, #8
    da92:	4770      	bx	lr

0000da94 <Ftm_Pwm_Ip_SetDualChnCombineCmd>:
 *                      - FALSE: Channels pair are independent
 */
static inline void Ftm_Pwm_Ip_SetDualChnCombineCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   uint8                         ChPairId,
                                                   boolean                       Enable)
{
    da94:	b082      	sub	sp, #8
    da96:	9001      	str	r0, [sp, #4]
    da98:	460b      	mov	r3, r1
    da9a:	f88d 3003 	strb.w	r3, [sp, #3]
    da9e:	4613      	mov	r3, r2
    daa0:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    daa4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    daa8:	2b00      	cmp	r3, #0
    daaa:	d00b      	beq.n	dac4 <Ftm_Pwm_Ip_SetDualChnCombineCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    daac:	9b01      	ldr	r3, [sp, #4]
    daae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    dab0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    dab4:	00db      	lsls	r3, r3, #3
    dab6:	2101      	movs	r1, #1
    dab8:	fa01 f303 	lsl.w	r3, r1, r3
    dabc:	431a      	orrs	r2, r3
    dabe:	9b01      	ldr	r3, [sp, #4]
    dac0:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    dac2:	e00b      	b.n	dadc <Ftm_Pwm_Ip_SetDualChnCombineCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    dac4:	9b01      	ldr	r3, [sp, #4]
    dac6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    dac8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    dacc:	00db      	lsls	r3, r3, #3
    dace:	2101      	movs	r1, #1
    dad0:	fa01 f303 	lsl.w	r3, r1, r3
    dad4:	43db      	mvns	r3, r3
    dad6:	401a      	ands	r2, r3
    dad8:	9b01      	ldr	r3, [sp, #4]
    dada:	665a      	str	r2, [r3, #100]	; 0x64
}
    dadc:	bf00      	nop
    dade:	b002      	add	sp, #8
    dae0:	4770      	bx	lr

0000dae2 <Ftm_Pwm_Ip_GetDualChnCombineCmd>:
 *         - TRUE : Channels pair are combined
 *         - FALSE: Channels pair are independent
 */
static inline boolean Ftm_Pwm_Ip_GetDualChnCombineCmd(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8 ChPairId)
{
    dae2:	b082      	sub	sp, #8
    dae4:	9001      	str	r0, [sp, #4]
    dae6:	460b      	mov	r3, r1
    dae8:	f88d 3003 	strb.w	r3, [sp, #3]
    return (FtmBase->COMBINE & ((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) != 0U;
    daec:	9b01      	ldr	r3, [sp, #4]
    daee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    daf0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    daf4:	00db      	lsls	r3, r3, #3
    daf6:	fa22 f303 	lsr.w	r3, r2, r3
    dafa:	f003 0301 	and.w	r3, r3, #1
    dafe:	2b00      	cmp	r3, #0
    db00:	bf14      	ite	ne
    db02:	2301      	movne	r3, #1
    db04:	2300      	moveq	r3, #0
    db06:	b2db      	uxtb	r3, r3
}
    db08:	4618      	mov	r0, r3
    db0a:	b002      	add	sp, #8
    db0c:	4770      	bx	lr

0000db0e <Ftm_Pwm_Ip_SetDualChnCompCmd>:
 *                      - FALSE: The channel (n+1) output is the same as the channel (n) output
 */
static inline void Ftm_Pwm_Ip_SetDualChnCompCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         ChPairId,
                                                boolean                       Enable)
{
    db0e:	b082      	sub	sp, #8
    db10:	9001      	str	r0, [sp, #4]
    db12:	460b      	mov	r3, r1
    db14:	f88d 3003 	strb.w	r3, [sp, #3]
    db18:	4613      	mov	r3, r2
    db1a:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable == TRUE)
    db1e:	f89d 3002 	ldrb.w	r3, [sp, #2]
    db22:	2b00      	cmp	r3, #0
    db24:	d00b      	beq.n	db3e <Ftm_Pwm_Ip_SetDualChnCompCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    db26:	9b01      	ldr	r3, [sp, #4]
    db28:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    db2a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    db2e:	00db      	lsls	r3, r3, #3
    db30:	2102      	movs	r1, #2
    db32:	fa01 f303 	lsl.w	r3, r1, r3
    db36:	431a      	orrs	r2, r3
    db38:	9b01      	ldr	r3, [sp, #4]
    db3a:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    db3c:	e00b      	b.n	db56 <Ftm_Pwm_Ip_SetDualChnCompCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    db3e:	9b01      	ldr	r3, [sp, #4]
    db40:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    db42:	f89d 3003 	ldrb.w	r3, [sp, #3]
    db46:	00db      	lsls	r3, r3, #3
    db48:	2102      	movs	r1, #2
    db4a:	fa01 f303 	lsl.w	r3, r1, r3
    db4e:	43db      	mvns	r3, r3
    db50:	401a      	ands	r2, r3
    db52:	9b01      	ldr	r3, [sp, #4]
    db54:	665a      	str	r2, [r3, #100]	; 0x64
}
    db56:	bf00      	nop
    db58:	b002      	add	sp, #8
    db5a:	4770      	bx	lr

0000db5c <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd>:
 *                      - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetDualChnDeadtimeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         ChPairId,
                                                    boolean                       Enable)
{
    db5c:	b082      	sub	sp, #8
    db5e:	9001      	str	r0, [sp, #4]
    db60:	460b      	mov	r3, r1
    db62:	f88d 3003 	strb.w	r3, [sp, #3]
    db66:	4613      	mov	r3, r2
    db68:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    db6c:	f89d 3002 	ldrb.w	r3, [sp, #2]
    db70:	2b00      	cmp	r3, #0
    db72:	d00b      	beq.n	db8c <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    db74:	9b01      	ldr	r3, [sp, #4]
    db76:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    db78:	f89d 3003 	ldrb.w	r3, [sp, #3]
    db7c:	00db      	lsls	r3, r3, #3
    db7e:	2110      	movs	r1, #16
    db80:	fa01 f303 	lsl.w	r3, r1, r3
    db84:	431a      	orrs	r2, r3
    db86:	9b01      	ldr	r3, [sp, #4]
    db88:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    db8a:	e00b      	b.n	dba4 <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_DTEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    db8c:	9b01      	ldr	r3, [sp, #4]
    db8e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    db90:	f89d 3003 	ldrb.w	r3, [sp, #3]
    db94:	00db      	lsls	r3, r3, #3
    db96:	2110      	movs	r1, #16
    db98:	fa01 f303 	lsl.w	r3, r1, r3
    db9c:	43db      	mvns	r3, r3
    db9e:	401a      	ands	r2, r3
    dba0:	9b01      	ldr	r3, [sp, #4]
    dba2:	665a      	str	r2, [r3, #100]	; 0x64
}
    dba4:	bf00      	nop
    dba6:	b002      	add	sp, #8
    dba8:	4770      	bx	lr

0000dbaa <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>:
 *                      - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   uint8                         ChPairId,
                                                   boolean                       Enable)
{
    dbaa:	b082      	sub	sp, #8
    dbac:	9001      	str	r0, [sp, #4]
    dbae:	460b      	mov	r3, r1
    dbb0:	f88d 3003 	strb.w	r3, [sp, #3]
    dbb4:	4613      	mov	r3, r2
    dbb6:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    dbba:	f89d 3002 	ldrb.w	r3, [sp, #2]
    dbbe:	2b00      	cmp	r3, #0
    dbc0:	d00b      	beq.n	dbda <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    dbc2:	9b01      	ldr	r3, [sp, #4]
    dbc4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    dbc6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    dbca:	00db      	lsls	r3, r3, #3
    dbcc:	2120      	movs	r1, #32
    dbce:	fa01 f303 	lsl.w	r3, r1, r3
    dbd2:	431a      	orrs	r2, r3
    dbd4:	9b01      	ldr	r3, [sp, #4]
    dbd6:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    dbd8:	e00b      	b.n	dbf2 <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_SYNCEN0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    dbda:	9b01      	ldr	r3, [sp, #4]
    dbdc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    dbde:	f89d 3003 	ldrb.w	r3, [sp, #3]
    dbe2:	00db      	lsls	r3, r3, #3
    dbe4:	2120      	movs	r1, #32
    dbe6:	fa01 f303 	lsl.w	r3, r1, r3
    dbea:	43db      	mvns	r3, r3
    dbec:	401a      	ands	r2, r3
    dbee:	9b01      	ldr	r3, [sp, #4]
    dbf0:	665a      	str	r2, [r3, #100]	; 0x64
}
    dbf2:	bf00      	nop
    dbf4:	b002      	add	sp, #8
    dbf6:	4770      	bx	lr

0000dbf8 <Ftm_Pwm_Ip_SetDualChnMCombineCmd>:
 *                      - FALSE: To disable modified combine
 */
static inline void Ftm_Pwm_Ip_SetDualChnMCombineCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         ChPairId,
                                                    boolean                       Enable)
{
    dbf8:	b082      	sub	sp, #8
    dbfa:	9001      	str	r0, [sp, #4]
    dbfc:	460b      	mov	r3, r1
    dbfe:	f88d 3003 	strb.w	r3, [sp, #3]
    dc02:	4613      	mov	r3, r2
    dc04:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    dc08:	f89d 3002 	ldrb.w	r3, [sp, #2]
    dc0c:	2b00      	cmp	r3, #0
    dc0e:	d00b      	beq.n	dc28 <Ftm_Pwm_Ip_SetDualChnMCombineCmd+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    dc10:	9b01      	ldr	r3, [sp, #4]
    dc12:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    dc14:	f89d 3003 	ldrb.w	r3, [sp, #3]
    dc18:	00db      	lsls	r3, r3, #3
    dc1a:	2180      	movs	r1, #128	; 0x80
    dc1c:	fa01 f303 	lsl.w	r3, r1, r3
    dc20:	431a      	orrs	r2, r3
    dc22:	9b01      	ldr	r3, [sp, #4]
    dc24:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    dc26:	e00b      	b.n	dc40 <Ftm_Pwm_Ip_SetDualChnMCombineCmd+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_MCOMBINE0_MASK << (ChPairId * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    dc28:	9b01      	ldr	r3, [sp, #4]
    dc2a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    dc2c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    dc30:	00db      	lsls	r3, r3, #3
    dc32:	2180      	movs	r1, #128	; 0x80
    dc34:	fa01 f303 	lsl.w	r3, r1, r3
    dc38:	43db      	mvns	r3, r3
    dc3a:	401a      	ands	r2, r3
    dc3c:	9b01      	ldr	r3, [sp, #4]
    dc3e:	665a      	str	r2, [r3, #100]	; 0x64
}
    dc40:	bf00      	nop
    dc42:	b002      	add	sp, #8
    dc44:	4770      	bx	lr

0000dc46 <Ftm_Pwm_Ip_SetDeadtimeCount>:
 *                     - 2U : 2 count is inserted
 *                     - ... up to a possible 63 counts
 */
static inline void Ftm_Pwm_Ip_SetDeadtimeCount(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Count)
{
    dc46:	b082      	sub	sp, #8
    dc48:	9001      	str	r0, [sp, #4]
    dc4a:	460b      	mov	r3, r1
    dc4c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTVAL_MASK) | FTM_DEADTIME_DTVAL(Count);
    dc50:	9b01      	ldr	r3, [sp, #4]
    dc52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    dc54:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
    dc58:	f89d 3003 	ldrb.w	r3, [sp, #3]
    dc5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    dc60:	431a      	orrs	r2, r3
    dc62:	9b01      	ldr	r3, [sp, #4]
    dc64:	669a      	str	r2, [r3, #104]	; 0x68
}
    dc66:	bf00      	nop
    dc68:	b002      	add	sp, #8
    dc6a:	4770      	bx	lr

0000dc6c <Ftm_Pwm_Ip_SetDeadtimePrescaler>:
 *                    - FTM_DEADTIME_DIV_4 : Divide by 4
 *                    - FTM_DEADTIME_DIV_16: Divide by 16
 */
static inline void Ftm_Pwm_Ip_SetDeadtimePrescaler(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   Ftm_Pwm_Ip_DeadtimePrescalerType Divider)
{
    dc6c:	b082      	sub	sp, #8
    dc6e:	9001      	str	r0, [sp, #4]
    dc70:	9100      	str	r1, [sp, #0]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTPS_MASK) | FTM_DEADTIME_DTPS((uint8)Divider);
    dc72:	9b01      	ldr	r3, [sp, #4]
    dc74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    dc76:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
    dc7a:	9b00      	ldr	r3, [sp, #0]
    dc7c:	b2db      	uxtb	r3, r3
    dc7e:	019b      	lsls	r3, r3, #6
    dc80:	b2db      	uxtb	r3, r3
    dc82:	431a      	orrs	r2, r3
    dc84:	9b01      	ldr	r3, [sp, #4]
    dc86:	669a      	str	r2, [r3, #104]	; 0x68
}
    dc88:	bf00      	nop
    dc8a:	b002      	add	sp, #8
    dc8c:	4770      	bx	lr

0000dc8e <Ftm_Pwm_Ip_GetDeadtimePrescaler>:
 * @brief Get the FTM dead time divider.
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline uint8 Ftm_Pwm_Ip_GetDeadtimePrescaler(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    dc8e:	b082      	sub	sp, #8
    dc90:	9001      	str	r0, [sp, #4]
    return (uint8)(FtmBase->DEADTIME & FTM_DEADTIME_DTPS_MASK)>>FTM_DEADTIME_DTPS_SHIFT;
    dc92:	9b01      	ldr	r3, [sp, #4]
    dc94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    dc96:	b2db      	uxtb	r3, r3
    dc98:	119b      	asrs	r3, r3, #6
    dc9a:	b2db      	uxtb	r3, r3
    dc9c:	f003 0303 	and.w	r3, r3, #3
    dca0:	b2db      	uxtb	r3, r3
}
    dca2:	4618      	mov	r0, r3
    dca4:	b002      	add	sp, #8
    dca6:	4770      	bx	lr

0000dca8 <Ftm_Pwm_Ip_SetExtDeadtimeValue>:
 * @param[in] FtmBase The FTM base address pointer
 * @param[in] Value The FTM peripheral extend pre-scale divider
 */
static inline void Ftm_Pwm_Ip_SetExtDeadtimeValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         Value)
{
    dca8:	b082      	sub	sp, #8
    dcaa:	9001      	str	r0, [sp, #4]
    dcac:	460b      	mov	r3, r1
    dcae:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->DEADTIME = (FtmBase->DEADTIME & ~FTM_DEADTIME_DTVALEX_MASK) | FTM_DEADTIME_DTVALEX(Value);
    dcb2:	9b01      	ldr	r3, [sp, #4]
    dcb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    dcb6:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
    dcba:	f89d 3003 	ldrb.w	r3, [sp, #3]
    dcbe:	041b      	lsls	r3, r3, #16
    dcc0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    dcc4:	431a      	orrs	r2, r3
    dcc6:	9b01      	ldr	r3, [sp, #4]
    dcc8:	669a      	str	r2, [r3, #104]	; 0x68
}
    dcca:	bf00      	nop
    dccc:	b002      	add	sp, #8
    dcce:	4770      	bx	lr

0000dcd0 <Ftm_Pwm_Ip_SetInitTriggerCmd>:
 *                     - TRUE : To enable
 *                     - FALSE: To disable
 */
static inline void Ftm_Pwm_Ip_SetInitTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                boolean Enable)
{
    dcd0:	b082      	sub	sp, #8
    dcd2:	9001      	str	r0, [sp, #4]
    dcd4:	460b      	mov	r3, r1
    dcd6:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->EXTTRIG = (FtmBase->EXTTRIG & ~FTM_EXTTRIG_INITTRIGEN_MASK) | FTM_EXTTRIG_INITTRIGEN((Enable == TRUE) ? 0x01U : 0x00U);
    dcda:	9b01      	ldr	r3, [sp, #4]
    dcdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    dcde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    dce2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    dce6:	2a00      	cmp	r2, #0
    dce8:	d001      	beq.n	dcee <Ftm_Pwm_Ip_SetInitTriggerCmd+0x1e>
    dcea:	2240      	movs	r2, #64	; 0x40
    dcec:	e000      	b.n	dcf0 <Ftm_Pwm_Ip_SetInitTriggerCmd+0x20>
    dcee:	2200      	movs	r2, #0
    dcf0:	431a      	orrs	r2, r3
    dcf2:	9b01      	ldr	r3, [sp, #4]
    dcf4:	66da      	str	r2, [r3, #108]	; 0x6c
}
    dcf6:	bf00      	nop
    dcf8:	b002      	add	sp, #8
    dcfa:	4770      	bx	lr

0000dcfc <Ftm_Pwm_Ip_DisableTriggerMask>:
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_DisableTriggerMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                 uint32                        TriggerMask)
{
    dcfc:	b082      	sub	sp, #8
    dcfe:	9001      	str	r0, [sp, #4]
    dd00:	9100      	str	r1, [sp, #0]
    FtmBase->EXTTRIG = ((FtmBase->EXTTRIG & ~TriggerMask) | (0U));
    dd02:	9b01      	ldr	r3, [sp, #4]
    dd04:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    dd06:	9b00      	ldr	r3, [sp, #0]
    dd08:	43db      	mvns	r3, r3
    dd0a:	401a      	ands	r2, r3
    dd0c:	9b01      	ldr	r3, [sp, #4]
    dd0e:	66da      	str	r2, [r3, #108]	; 0x6c
}
    dd10:	bf00      	nop
    dd12:	b002      	add	sp, #8
    dd14:	4770      	bx	lr

0000dd16 <Ftm_Pwm_Ip_EnableTriggerMask>:
 *
 * @param[in] FtmBase The FTM base address pointer
 */
static inline void Ftm_Pwm_Ip_EnableTriggerMask(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint32                        TriggerMask)
{
    dd16:	b082      	sub	sp, #8
    dd18:	9001      	str	r0, [sp, #4]
    dd1a:	9100      	str	r1, [sp, #0]
    FtmBase->EXTTRIG = ((FtmBase->EXTTRIG & ~TriggerMask) | TriggerMask);
    dd1c:	9b01      	ldr	r3, [sp, #4]
    dd1e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    dd20:	9b00      	ldr	r3, [sp, #0]
    dd22:	43db      	mvns	r3, r3
    dd24:	401a      	ands	r2, r3
    dd26:	9b00      	ldr	r3, [sp, #0]
    dd28:	431a      	orrs	r2, r3
    dd2a:	9b01      	ldr	r3, [sp, #4]
    dd2c:	66da      	str	r2, [r3, #108]	; 0x6c
}
    dd2e:	bf00      	nop
    dd30:	b002      	add	sp, #8
    dd32:	4770      	bx	lr

0000dd34 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>:
 *                      - FALSE  : The channel polarity is active high
 */
static inline void Ftm_Pwm_Ip_SetChnOutputPolarityCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      uint8                         Channel,
                                                      Ftm_Pwm_Ip_PolarityType       Polarity)
{
    dd34:	b084      	sub	sp, #16
    dd36:	9003      	str	r0, [sp, #12]
    dd38:	460b      	mov	r3, r1
    dd3a:	9201      	str	r2, [sp, #4]
    dd3c:	f88d 300b 	strb.w	r3, [sp, #11]
    if (FTM_PWM_IP_POLARITY_HIGH == Polarity)
    dd40:	9b01      	ldr	r3, [sp, #4]
    dd42:	2b00      	cmp	r3, #0
    dd44:	d10b      	bne.n	dd5e <Ftm_Pwm_Ip_SetChnOutputPolarityCmd+0x2a>
    {
        FtmBase->POL &= ~(1UL << Channel);
    dd46:	9b03      	ldr	r3, [sp, #12]
    dd48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    dd4a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dd4e:	2101      	movs	r1, #1
    dd50:	fa01 f303 	lsl.w	r3, r1, r3
    dd54:	43db      	mvns	r3, r3
    dd56:	401a      	ands	r2, r3
    dd58:	9b03      	ldr	r3, [sp, #12]
    dd5a:	671a      	str	r2, [r3, #112]	; 0x70
    }
    else
    {
        FtmBase->POL |= 1UL << Channel;
    }
}
    dd5c:	e009      	b.n	dd72 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd+0x3e>
        FtmBase->POL |= 1UL << Channel;
    dd5e:	9b03      	ldr	r3, [sp, #12]
    dd60:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    dd62:	f89d 300b 	ldrb.w	r3, [sp, #11]
    dd66:	2101      	movs	r1, #1
    dd68:	fa01 f303 	lsl.w	r3, r1, r3
    dd6c:	431a      	orrs	r2, r3
    dd6e:	9b03      	ldr	r3, [sp, #12]
    dd70:	671a      	str	r2, [r3, #112]	; 0x70
}
    dd72:	bf00      	nop
    dd74:	b004      	add	sp, #16
    dd76:	4770      	bx	lr

0000dd78 <Ftm_Pwm_Ip_GetChnOutputPolarity>:
 *            - FTM_PWM_IP_POLARITY_LOW : The channel polarity is active low
 *            - FTM_PWM_IP_POLARITY_HIGH  : The channel polarity is active high
 */
static inline Ftm_Pwm_Ip_PolarityType Ftm_Pwm_Ip_GetChnOutputPolarity(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                                      uint8                               Channel)
{
    dd78:	b082      	sub	sp, #8
    dd7a:	9001      	str	r0, [sp, #4]
    dd7c:	460b      	mov	r3, r1
    dd7e:	f88d 3003 	strb.w	r3, [sp, #3]
    return (((FtmBase->POL >> Channel) & 1U) == 1U)? FTM_PWM_IP_POLARITY_LOW : FTM_PWM_IP_POLARITY_HIGH;
    dd82:	9b01      	ldr	r3, [sp, #4]
    dd84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    dd86:	f89d 3003 	ldrb.w	r3, [sp, #3]
    dd8a:	fa22 f303 	lsr.w	r3, r2, r3
    dd8e:	f003 0301 	and.w	r3, r3, #1
    dd92:	2b01      	cmp	r3, #1
    dd94:	bf0c      	ite	eq
    dd96:	2301      	moveq	r3, #1
    dd98:	2300      	movne	r3, #0
    dd9a:	b2db      	uxtb	r3, r3
}
    dd9c:	4618      	mov	r0, r3
    dd9e:	b002      	add	sp, #8
    dda0:	4770      	bx	lr

0000dda2 <Ftm_Pwm_Ip_SetLoadFreq>:
 *
 * Implements : Ftm_Pwm_Ip_SetLoadFreq_Activity
 */
static inline void Ftm_Pwm_Ip_SetLoadFreq(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                          uint8                         Val)
{
    dda2:	b082      	sub	sp, #8
    dda4:	9001      	str	r0, [sp, #4]
    dda6:	460b      	mov	r3, r1
    dda8:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_LDFQ_MASK) | FTM_CONF_LDFQ(Val);
    ddac:	9b01      	ldr	r3, [sp, #4]
    ddae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    ddb2:	f023 021f 	bic.w	r2, r3, #31
    ddb6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ddba:	f003 031f 	and.w	r3, r3, #31
    ddbe:	431a      	orrs	r2, r3
    ddc0:	9b01      	ldr	r3, [sp, #4]
    ddc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    ddc6:	bf00      	nop
    ddc8:	b002      	add	sp, #8
    ddca:	4770      	bx	lr

0000ddcc <Ftm_Pwm_Ip_SetBdmMode>:
 *                                        FTM channels in functional mode, writes to MOD,CNTIN and C(n)V
 *                                        registers is in fully functional mode
 */
static inline void Ftm_Pwm_Ip_SetBdmMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                         Ftm_Pwm_Ip_DebugModeType      Val)
{
    ddcc:	b082      	sub	sp, #8
    ddce:	9001      	str	r0, [sp, #4]
    ddd0:	9100      	str	r1, [sp, #0]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_BDMMODE_MASK) | FTM_CONF_BDMMODE(Val);
    ddd2:	9b01      	ldr	r3, [sp, #4]
    ddd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    ddd8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
    dddc:	9b00      	ldr	r3, [sp, #0]
    ddde:	019b      	lsls	r3, r3, #6
    dde0:	b2db      	uxtb	r3, r3
    dde2:	431a      	orrs	r2, r3
    dde4:	9b01      	ldr	r3, [sp, #4]
    dde6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    ddea:	bf00      	nop
    ddec:	b002      	add	sp, #8
    ddee:	4770      	bx	lr

0000ddf0 <Ftm_Pwm_Ip_SetInitTriggerMode>:
 *
 * Implements : Ftm_Pwm_Ip_SetInitTrigOnReloadCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetInitTriggerMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                 Ftm_Pwm_Ip_InitTriggModeType  InitTrigMode)
{
    ddf0:	b082      	sub	sp, #8
    ddf2:	9001      	str	r0, [sp, #4]
    ddf4:	9100      	str	r1, [sp, #0]
    FtmBase->CONF = (FtmBase->CONF & ~FTM_CONF_ITRIGR_MASK) | FTM_CONF_ITRIGR(InitTrigMode);
    ddf6:	9b01      	ldr	r3, [sp, #4]
    ddf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    ddfc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
    de00:	9b00      	ldr	r3, [sp, #0]
    de02:	02db      	lsls	r3, r3, #11
    de04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    de08:	431a      	orrs	r2, r3
    de0a:	9b01      	ldr	r3, [sp, #4]
    de0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    de10:	bf00      	nop
    de12:	b002      	add	sp, #8
    de14:	4770      	bx	lr

0000de16 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd>:
 *                     - TRUE : FTM does not clear the TRIGx bit when the hardware trigger j is detected
 *                     - FALSE: FTM clears the TRIGx bit when the hardware trigger j is detected
 */
static inline void Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      boolean                       Enable)
{
    de16:	b082      	sub	sp, #8
    de18:	9001      	str	r0, [sp, #4]
    de1a:	460b      	mov	r3, r1
    de1c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWTRIGMODE_MASK) | FTM_SYNCONF_HWTRIGMODE((Enable == TRUE) ? 0x01U : 0x00U);
    de20:	9b01      	ldr	r3, [sp, #4]
    de22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    de26:	f023 0301 	bic.w	r3, r3, #1
    de2a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    de2e:	2a00      	cmp	r2, #0
    de30:	d001      	beq.n	de36 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd+0x20>
    de32:	2201      	movs	r2, #1
    de34:	e000      	b.n	de38 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd+0x22>
    de36:	2200      	movs	r2, #0
    de38:	431a      	orrs	r2, r3
    de3a:	9b01      	ldr	r3, [sp, #4]
    de3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    de40:	bf00      	nop
    de42:	b002      	add	sp, #8
    de44:	4770      	bx	lr

0000de46 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd>:
 *                     - TRUE : CNTIN register is updated by PWM sync
 *                     - FALSE: CNTIN register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                     boolean                       Enable)
{
    de46:	b082      	sub	sp, #8
    de48:	9001      	str	r0, [sp, #4]
    de4a:	460b      	mov	r3, r1
    de4c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_CNTINC_MASK) | FTM_SYNCONF_CNTINC((Enable == TRUE) ? 0x01U : 0x00U);
    de50:	9b01      	ldr	r3, [sp, #4]
    de52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    de56:	f023 0304 	bic.w	r3, r3, #4
    de5a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    de5e:	2a00      	cmp	r2, #0
    de60:	d001      	beq.n	de66 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd+0x20>
    de62:	2204      	movs	r2, #4
    de64:	e000      	b.n	de68 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd+0x22>
    de66:	2200      	movs	r2, #0
    de68:	431a      	orrs	r2, r3
    de6a:	9b01      	ldr	r3, [sp, #4]
    de6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    de70:	bf00      	nop
    de72:	b002      	add	sp, #8
    de74:	4770      	bx	lr

0000de76 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd>:
 *                     - TRUE : INVCTRL register is updated by PWM sync
 *                     - FALSE: INVCTRL register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    de76:	b082      	sub	sp, #8
    de78:	9001      	str	r0, [sp, #4]
    de7a:	460b      	mov	r3, r1
    de7c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_INVC_MASK) | FTM_SYNCONF_INVC((Enable == TRUE) ? 0x01U : 0x00U);
    de80:	9b01      	ldr	r3, [sp, #4]
    de82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    de86:	f023 0310 	bic.w	r3, r3, #16
    de8a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    de8e:	2a00      	cmp	r2, #0
    de90:	d001      	beq.n	de96 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd+0x20>
    de92:	2210      	movs	r2, #16
    de94:	e000      	b.n	de98 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd+0x22>
    de96:	2200      	movs	r2, #0
    de98:	431a      	orrs	r2, r3
    de9a:	9b01      	ldr	r3, [sp, #4]
    de9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    dea0:	bf00      	nop
    dea2:	b002      	add	sp, #8
    dea4:	4770      	bx	lr

0000dea6 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd>:
 *                     - TRUE : SWOCTRL register is updated by PWM sync
 *                     - FALSE: SWOCTRL register is updated at all rising edges of system clock
 */
static inline void Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       boolean                       Enable)
{
    dea6:	b082      	sub	sp, #8
    dea8:	9001      	str	r0, [sp, #4]
    deaa:	460b      	mov	r3, r1
    deac:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWOC_MASK) | FTM_SYNCONF_SWOC((Enable == TRUE) ? 0x01U : 0x00U);
    deb0:	9b01      	ldr	r3, [sp, #4]
    deb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    deb6:	f023 0320 	bic.w	r3, r3, #32
    deba:	f89d 2003 	ldrb.w	r2, [sp, #3]
    debe:	2a00      	cmp	r2, #0
    dec0:	d001      	beq.n	dec6 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd+0x20>
    dec2:	2220      	movs	r2, #32
    dec4:	e000      	b.n	dec8 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd+0x22>
    dec6:	2200      	movs	r2, #0
    dec8:	431a      	orrs	r2, r3
    deca:	9b01      	ldr	r3, [sp, #4]
    decc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    ded0:	bf00      	nop
    ded2:	b002      	add	sp, #8
    ded4:	4770      	bx	lr

0000ded6 <Ftm_Pwm_Ip_SetPwmSyncModeCmd>:
 *                     - TRUE : Enhanced PWM synchronization is selected
 *                     - FALSE: Legacy PWM synchronization is selected
 */
static inline void Ftm_Pwm_Ip_SetPwmSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                boolean                       Mode)
{
    ded6:	b082      	sub	sp, #8
    ded8:	9001      	str	r0, [sp, #4]
    deda:	460b      	mov	r3, r1
    dedc:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SYNCMODE_MASK) | FTM_SYNCONF_SYNCMODE((Mode == TRUE) ? 0x01U : 0x00U);
    dee0:	9b01      	ldr	r3, [sp, #4]
    dee2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    dee6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    deea:	f89d 2003 	ldrb.w	r2, [sp, #3]
    deee:	2a00      	cmp	r2, #0
    def0:	d001      	beq.n	def6 <Ftm_Pwm_Ip_SetPwmSyncModeCmd+0x20>
    def2:	2280      	movs	r2, #128	; 0x80
    def4:	e000      	b.n	def8 <Ftm_Pwm_Ip_SetPwmSyncModeCmd+0x22>
    def6:	2200      	movs	r2, #0
    def8:	431a      	orrs	r2, r3
    defa:	9b01      	ldr	r3, [sp, #4]
    defc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    df00:	bf00      	nop
    df02:	b002      	add	sp, #8
    df04:	4770      	bx	lr

0000df06 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates FTM counter sync
 *                     - FALSE: The software trigger does not activate FTM counter sync
 */
static inline void Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean Enable)
{
    df06:	b082      	sub	sp, #8
    df08:	9001      	str	r0, [sp, #4]
    df0a:	460b      	mov	r3, r1
    df0c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWRSTCNT_MASK) | FTM_SYNCONF_SWRSTCNT((Enable == TRUE) ? 0x01U : 0x00U);
    df10:	9b01      	ldr	r3, [sp, #4]
    df12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    df16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    df1a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    df1e:	2a00      	cmp	r2, #0
    df20:	d002      	beq.n	df28 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd+0x22>
    df22:	f44f 7280 	mov.w	r2, #256	; 0x100
    df26:	e000      	b.n	df2a <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd+0x24>
    df28:	2200      	movs	r2, #0
    df2a:	431a      	orrs	r2, r3
    df2c:	9b01      	ldr	r3, [sp, #4]
    df2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    df32:	bf00      	nop
    df34:	b002      	add	sp, #8
    df36:	4770      	bx	lr

0000df38 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates FTM MOD, CNTIN and CV registers sync
 *                     - FALSE: The software trigger does not activate FTM MOD, CNTIN and CV registers sync
 */
static inline void Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                               boolean                       Enable)
{
    df38:	b082      	sub	sp, #8
    df3a:	9001      	str	r0, [sp, #4]
    df3c:	460b      	mov	r3, r1
    df3e:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWWRBUF_MASK) | FTM_SYNCONF_SWWRBUF((Enable == TRUE) ? 0x01U : 0x00U);
    df42:	9b01      	ldr	r3, [sp, #4]
    df44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    df48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    df4c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    df50:	2a00      	cmp	r2, #0
    df52:	d002      	beq.n	df5a <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd+0x22>
    df54:	f44f 7200 	mov.w	r2, #512	; 0x200
    df58:	e000      	b.n	df5c <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd+0x24>
    df5a:	2200      	movs	r2, #0
    df5c:	431a      	orrs	r2, r3
    df5e:	9b01      	ldr	r3, [sp, #4]
    df60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    df64:	bf00      	nop
    df66:	b002      	add	sp, #8
    df68:	4770      	bx	lr

0000df6a <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates OUTMASK register sync
 *                     - FALSE: The software trigger does not activate OUTMASK register sync
 */
static inline void Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    df6a:	b082      	sub	sp, #8
    df6c:	9001      	str	r0, [sp, #4]
    df6e:	460b      	mov	r3, r1
    df70:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWOM_MASK) | FTM_SYNCONF_SWOM((Enable == TRUE) ? 0x01U : 0x00U);
    df74:	9b01      	ldr	r3, [sp, #4]
    df76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    df7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    df7e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    df82:	2a00      	cmp	r2, #0
    df84:	d002      	beq.n	df8c <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd+0x22>
    df86:	f44f 6280 	mov.w	r2, #1024	; 0x400
    df8a:	e000      	b.n	df8e <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd+0x24>
    df8c:	2200      	movs	r2, #0
    df8e:	431a      	orrs	r2, r3
    df90:	9b01      	ldr	r3, [sp, #4]
    df92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    df96:	bf00      	nop
    df98:	b002      	add	sp, #8
    df9a:	4770      	bx	lr

0000df9c <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>:
 *                     - TRUE : The software trigger activates INVCTRL register sync
 *                     - FALSE: The software trigger does not activate INVCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    df9c:	b082      	sub	sp, #8
    df9e:	9001      	str	r0, [sp, #4]
    dfa0:	460b      	mov	r3, r1
    dfa2:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWINVC_MASK) | FTM_SYNCONF_SWINVC((Enable == TRUE) ? 0x01U : 0x00U);
    dfa6:	9b01      	ldr	r3, [sp, #4]
    dfa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    dfac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    dfb0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    dfb4:	2a00      	cmp	r2, #0
    dfb6:	d002      	beq.n	dfbe <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd+0x22>
    dfb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
    dfbc:	e000      	b.n	dfc0 <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd+0x24>
    dfbe:	2200      	movs	r2, #0
    dfc0:	431a      	orrs	r2, r3
    dfc2:	9b01      	ldr	r3, [sp, #4]
    dfc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    dfc8:	bf00      	nop
    dfca:	b002      	add	sp, #8
    dfcc:	4770      	bx	lr

0000dfce <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>:
 *                    - TRUE : The software trigger activates SWOCTRL register sync
 *                    - FALSE: The software trigger does not activate SWOCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    dfce:	b082      	sub	sp, #8
    dfd0:	9001      	str	r0, [sp, #4]
    dfd2:	460b      	mov	r3, r1
    dfd4:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_SWSOC_MASK) | FTM_SYNCONF_SWSOC((Enable == TRUE) ? 0x01U : 0x00U);
    dfd8:	9b01      	ldr	r3, [sp, #4]
    dfda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    dfde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    dfe2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    dfe6:	2a00      	cmp	r2, #0
    dfe8:	d002      	beq.n	dff0 <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd+0x22>
    dfea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    dfee:	e000      	b.n	dff2 <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd+0x24>
    dff0:	2200      	movs	r2, #0
    dff2:	431a      	orrs	r2, r3
    dff4:	9b01      	ldr	r3, [sp, #4]
    dff6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    dffa:	bf00      	nop
    dffc:	b002      	add	sp, #8
    dffe:	4770      	bx	lr

0000e000 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates FTM counter sync
 *                     - FALSE: The hardware trigger does not activate FTM counter sync
 */
static inline void Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    e000:	b082      	sub	sp, #8
    e002:	9001      	str	r0, [sp, #4]
    e004:	460b      	mov	r3, r1
    e006:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWRSTCNT_MASK) | FTM_SYNCONF_HWRSTCNT((Enable == TRUE) ? 0x01U : 0x00U);
    e00a:	9b01      	ldr	r3, [sp, #4]
    e00c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    e010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    e014:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e018:	2a00      	cmp	r2, #0
    e01a:	d002      	beq.n	e022 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd+0x22>
    e01c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    e020:	e000      	b.n	e024 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd+0x24>
    e022:	2200      	movs	r2, #0
    e024:	431a      	orrs	r2, r3
    e026:	9b01      	ldr	r3, [sp, #4]
    e028:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    e02c:	bf00      	nop
    e02e:	b002      	add	sp, #8
    e030:	4770      	bx	lr

0000e032 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates  MOD, HCR, CNTIN, and CV registers sync
 *                     - FALSE: The hardware trigger does not activate MOD, HCR, CNTIN, and CV registers sync
 */
static inline void Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                               boolean                       Enable)
{
    e032:	b082      	sub	sp, #8
    e034:	9001      	str	r0, [sp, #4]
    e036:	460b      	mov	r3, r1
    e038:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWWRBUF_MASK) | FTM_SYNCONF_HWWRBUF((Enable == TRUE) ? 0x01U : 0x00U);
    e03c:	9b01      	ldr	r3, [sp, #4]
    e03e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    e042:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    e046:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e04a:	2a00      	cmp	r2, #0
    e04c:	d002      	beq.n	e054 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd+0x22>
    e04e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    e052:	e000      	b.n	e056 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd+0x24>
    e054:	2200      	movs	r2, #0
    e056:	431a      	orrs	r2, r3
    e058:	9b01      	ldr	r3, [sp, #4]
    e05a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    e05e:	bf00      	nop
    e060:	b002      	add	sp, #8
    e062:	4770      	bx	lr

0000e064 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates OUTMASK register sync
 *                     - FALSE: The hardware trigger does not activate OUTMASK register sync
 */
static inline void Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    e064:	b082      	sub	sp, #8
    e066:	9001      	str	r0, [sp, #4]
    e068:	460b      	mov	r3, r1
    e06a:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWOM_MASK) | FTM_SYNCONF_HWOM((Enable == TRUE) ? 0x01U : 0x00U);
    e06e:	9b01      	ldr	r3, [sp, #4]
    e070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    e074:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    e078:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e07c:	2a00      	cmp	r2, #0
    e07e:	d002      	beq.n	e086 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd+0x22>
    e080:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    e084:	e000      	b.n	e088 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd+0x24>
    e086:	2200      	movs	r2, #0
    e088:	431a      	orrs	r2, r3
    e08a:	9b01      	ldr	r3, [sp, #4]
    e08c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    e090:	bf00      	nop
    e092:	b002      	add	sp, #8
    e094:	4770      	bx	lr

0000e096 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>:
 *                     - TRUE : The hardware trigger activates INVCTRL register sync
 *                     - FALSE: The hardware trigger does not activate INVCTRL register sync
 */
static inline void Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                            boolean                       Enable)
{
    e096:	b082      	sub	sp, #8
    e098:	9001      	str	r0, [sp, #4]
    e09a:	460b      	mov	r3, r1
    e09c:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->SYNCONF = (FtmBase->SYNCONF & ~FTM_SYNCONF_HWINVC_MASK) | FTM_SYNCONF_HWINVC((Enable == TRUE) ? 0x01U : 0x00U);
    e0a0:	9b01      	ldr	r3, [sp, #4]
    e0a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    e0a6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
    e0aa:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e0ae:	2a00      	cmp	r2, #0
    e0b0:	d002      	beq.n	e0b8 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd+0x22>
    e0b2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    e0b6:	e000      	b.n	e0ba <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd+0x24>
    e0b8:	2200      	movs	r2, #0
    e0ba:	431a      	orrs	r2, r3
    e0bc:	9b01      	ldr	r3, [sp, #4]
    e0be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
    e0c2:	bf00      	nop
    e0c4:	b002      	add	sp, #8
    e0c6:	4770      	bx	lr

0000e0c8 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal>:
 * Implements : Ftm_Pwm_Ip_SetChnSoftwareCtrlVal_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnSoftwareCtrlVal(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         Channel,
                                                    boolean                       Enable)
{
    e0c8:	b084      	sub	sp, #16
    e0ca:	9001      	str	r0, [sp, #4]
    e0cc:	460b      	mov	r3, r1
    e0ce:	f88d 3003 	strb.w	r3, [sp, #3]
    e0d2:	4613      	mov	r3, r2
    e0d4:	f88d 3002 	strb.w	r3, [sp, #2]
    uint8 ChPol = (uint8)(((uint32)FtmBase->POL >> (uint32)Channel) & (uint32)1U);
    e0d8:	9b01      	ldr	r3, [sp, #4]
    e0da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    e0dc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e0e0:	fa22 f303 	lsr.w	r3, r2, r3
    e0e4:	b2db      	uxtb	r3, r3
    e0e6:	f003 0301 	and.w	r3, r3, #1
    e0ea:	f88d 300f 	strb.w	r3, [sp, #15]
    boolean StatusPol = (ChPol == 0x00U)? FALSE : TRUE;
    e0ee:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e0f2:	2b00      	cmp	r3, #0
    e0f4:	bf14      	ite	ne
    e0f6:	2301      	movne	r3, #1
    e0f8:	2300      	moveq	r3, #0
    e0fa:	f88d 300e 	strb.w	r3, [sp, #14]
    if (Enable != StatusPol)
    e0fe:	f89d 2002 	ldrb.w	r2, [sp, #2]
    e102:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e106:	429a      	cmp	r2, r3
    e108:	d00d      	beq.n	e126 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal+0x5e>
    {
        FtmBase->SWOCTRL |= 1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT);
    e10a:	9b01      	ldr	r3, [sp, #4]
    e10c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    e110:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e114:	3308      	adds	r3, #8
    e116:	2101      	movs	r1, #1
    e118:	fa01 f303 	lsl.w	r3, r1, r3
    e11c:	431a      	orrs	r2, r3
    e11e:	9b01      	ldr	r3, [sp, #4]
    e120:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }
    else
    {
        FtmBase->SWOCTRL &= ~(1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    }
}
    e124:	e00d      	b.n	e142 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal+0x7a>
        FtmBase->SWOCTRL &= ~(1UL << (Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    e126:	9b01      	ldr	r3, [sp, #4]
    e128:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    e12c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e130:	3308      	adds	r3, #8
    e132:	2101      	movs	r1, #1
    e134:	fa01 f303 	lsl.w	r3, r1, r3
    e138:	43db      	mvns	r3, r3
    e13a:	401a      	ands	r2, r3
    e13c:	9b01      	ldr	r3, [sp, #4]
    e13e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    e142:	bf00      	nop
    e144:	b004      	add	sp, #16
    e146:	4770      	bx	lr

0000e148 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd>:
 * Implements : Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint8                         Channel,
                                                    boolean                       Enable)
{
    e148:	b082      	sub	sp, #8
    e14a:	9001      	str	r0, [sp, #4]
    e14c:	460b      	mov	r3, r1
    e14e:	f88d 3003 	strb.w	r3, [sp, #3]
    e152:	4613      	mov	r3, r2
    e154:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    e158:	f89d 3002 	ldrb.w	r3, [sp, #2]
    e15c:	2b00      	cmp	r3, #0
    e15e:	d00c      	beq.n	e17a <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd+0x32>
    {
        FtmBase->SWOCTRL |= 1UL << Channel;
    e160:	9b01      	ldr	r3, [sp, #4]
    e162:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    e166:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e16a:	2101      	movs	r1, #1
    e16c:	fa01 f303 	lsl.w	r3, r1, r3
    e170:	431a      	orrs	r2, r3
    e172:	9b01      	ldr	r3, [sp, #4]
    e174:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }
    else
    {
        FtmBase->SWOCTRL &= ~(1UL << Channel);
    }
}
    e178:	e00c      	b.n	e194 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd+0x4c>
        FtmBase->SWOCTRL &= ~(1UL << Channel);
    e17a:	9b01      	ldr	r3, [sp, #4]
    e17c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
    e180:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e184:	2101      	movs	r1, #1
    e186:	fa01 f303 	lsl.w	r3, r1, r3
    e18a:	43db      	mvns	r3, r3
    e18c:	401a      	ands	r2, r3
    e18e:	9b01      	ldr	r3, [sp, #4]
    e190:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    e194:	bf00      	nop
    e196:	b002      	add	sp, #8
    e198:	4770      	bx	lr

0000e19a <Ftm_Pwm_Ip_SoftwareOutputControl>:
 * @param[in] FtmBase  The FTM base address pointer.
 * @param[in] Value    The values which enables and force the software control of channels output
 */
static inline void Ftm_Pwm_Ip_SoftwareOutputControl(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    uint16                        Value)
{
    e19a:	b082      	sub	sp, #8
    e19c:	9001      	str	r0, [sp, #4]
    e19e:	460b      	mov	r3, r1
    e1a0:	f8ad 3002 	strh.w	r3, [sp, #2]
   FtmBase->SWOCTRL = Value;
    e1a4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    e1a8:	9b01      	ldr	r3, [sp, #4]
    e1aa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    e1ae:	bf00      	nop
    e1b0:	b002      	add	sp, #8
    e1b2:	4770      	bx	lr

0000e1b4 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd>:
 * Implements : Ftm_Pwm_Ip_SetPwmLoadChnSelCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetPwmLoadChnSelCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         Channel,
                                                  boolean                       Enable)
{
    e1b4:	b082      	sub	sp, #8
    e1b6:	9001      	str	r0, [sp, #4]
    e1b8:	460b      	mov	r3, r1
    e1ba:	f88d 3003 	strb.w	r3, [sp, #3]
    e1be:	4613      	mov	r3, r2
    e1c0:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    e1c4:	f89d 3002 	ldrb.w	r3, [sp, #2]
    e1c8:	2b00      	cmp	r3, #0
    e1ca:	d00c      	beq.n	e1e6 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd+0x32>
    {
        FtmBase->PWMLOAD |= 1UL << Channel;
    e1cc:	9b01      	ldr	r3, [sp, #4]
    e1ce:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    e1d2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e1d6:	2101      	movs	r1, #1
    e1d8:	fa01 f303 	lsl.w	r3, r1, r3
    e1dc:	431a      	orrs	r2, r3
    e1de:	9b01      	ldr	r3, [sp, #4]
    e1e0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
    else
    {
        FtmBase->PWMLOAD &= ~(1UL << Channel);
    }
}
    e1e4:	e00c      	b.n	e200 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd+0x4c>
        FtmBase->PWMLOAD &= ~(1UL << Channel);
    e1e6:	9b01      	ldr	r3, [sp, #4]
    e1e8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    e1ec:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e1f0:	2101      	movs	r1, #1
    e1f2:	fa01 f303 	lsl.w	r3, r1, r3
    e1f6:	43db      	mvns	r3, r3
    e1f8:	401a      	ands	r2, r3
    e1fa:	9b01      	ldr	r3, [sp, #4]
    e1fc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
    e200:	bf00      	nop
    e202:	b002      	add	sp, #8
    e204:	4770      	bx	lr

0000e206 <Ftm_Pwm_Ip_SetHalfCycleCmd>:
 *
 * Implements : Ftm_Pwm_Ip_SetHalfCycleCmd_Activity
 */
static inline void Ftm_Pwm_Ip_SetHalfCycleCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                              boolean                       Enable)
{
    e206:	b082      	sub	sp, #8
    e208:	9001      	str	r0, [sp, #4]
    e20a:	460b      	mov	r3, r1
    e20c:	f88d 3003 	strb.w	r3, [sp, #3]
    if (Enable)
    e210:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e214:	2b00      	cmp	r3, #0
    e216:	d008      	beq.n	e22a <Ftm_Pwm_Ip_SetHalfCycleCmd+0x24>
    {
        FtmBase->PWMLOAD |= 1UL << FTM_PWMLOAD_HCSEL_SHIFT;
    e218:	9b01      	ldr	r3, [sp, #4]
    e21a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    e21e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    e222:	9b01      	ldr	r3, [sp, #4]
    e224:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
    else
    {
        FtmBase->PWMLOAD &= ~(1UL << FTM_PWMLOAD_HCSEL_SHIFT);
    }
}
    e228:	e007      	b.n	e23a <Ftm_Pwm_Ip_SetHalfCycleCmd+0x34>
        FtmBase->PWMLOAD &= ~(1UL << FTM_PWMLOAD_HCSEL_SHIFT);
    e22a:	9b01      	ldr	r3, [sp, #4]
    e22c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    e230:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    e234:	9b01      	ldr	r3, [sp, #4]
    e236:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
    e23a:	bf00      	nop
    e23c:	b002      	add	sp, #8
    e23e:	4770      	bx	lr

0000e240 <Ftm_Pwm_Ip_SetHalfCycleValue>:
 * @param[in] FtmBase  The FTM base address pointer
 * @param[in] Value    The 16 bit counter value
 */
static inline void Ftm_Pwm_Ip_SetHalfCycleValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint16                        Value)
{
    e240:	b082      	sub	sp, #8
    e242:	9001      	str	r0, [sp, #4]
    e244:	460b      	mov	r3, r1
    e246:	f8ad 3002 	strh.w	r3, [sp, #2]
    FtmBase->HCR = Value;
    e24a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    e24e:	9b01      	ldr	r3, [sp, #4]
    e250:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
    e254:	bf00      	nop
    e256:	b002      	add	sp, #8
    e258:	4770      	bx	lr

0000e25a <Ftm_Pwm_Ip_GetSoftwareOutputControl>:
 * @return the FTM software Output Control.
 *
 * Implements : Ftm_Pwm_Ip_GetSoftwareOutputControl
 */
static inline uint16 Ftm_Pwm_Ip_GetSoftwareOutputControl(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    e25a:	b082      	sub	sp, #8
    e25c:	9001      	str	r0, [sp, #4]
    return (uint16)(FtmBase->SWOCTRL);
    e25e:	9b01      	ldr	r3, [sp, #4]
    e260:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    e264:	b29b      	uxth	r3, r3
}
    e266:	4618      	mov	r0, r3
    e268:	b002      	add	sp, #8
    e26a:	4770      	bx	lr

0000e26c <Ftm_Pwm_Ip_GetPolInstance>:
 * @return the polarity value of all channel
 *
 * Implements : Ftm_Pwm_Ip_GetPolInstance
 */
static inline uint16 Ftm_Pwm_Ip_GetPolInstance(const Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    e26c:	b082      	sub	sp, #8
    e26e:	9001      	str	r0, [sp, #4]
    return (uint16)(FtmBase->POL);
    e270:	9b01      	ldr	r3, [sp, #4]
    e272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    e274:	b29b      	uxth	r3, r3
}
    e276:	4618      	mov	r0, r3
    e278:	b002      	add	sp, #8
    e27a:	4770      	bx	lr

0000e27c <Ftm_Pwm_Ip_GetDualChnCompCmd>:
 *            - TRUE : The channel (n+1) output is the complement of the channel (n) output
 *            - FALSE: The channel (n+1) output is the same as the channel (n) output
 */
static inline boolean Ftm_Pwm_Ip_GetDualChnCompCmd(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                   uint8                               Channel)
{
    e27c:	b084      	sub	sp, #16
    e27e:	9001      	str	r0, [sp, #4]
    e280:	460b      	mov	r3, r1
    e282:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 ChPairId = Channel >> 1U;
    e286:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e28a:	085b      	lsrs	r3, r3, #1
    e28c:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 Comp = (uint8)((uint32)(FtmBase->COMBINE & ((uint32)FTM_COMBINE_COMP0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) >>  ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    e290:	9b01      	ldr	r3, [sp, #4]
    e292:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    e294:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e298:	00db      	lsls	r3, r3, #3
    e29a:	2102      	movs	r1, #2
    e29c:	fa01 f303 	lsl.w	r3, r1, r3
    e2a0:	401a      	ands	r2, r3
    e2a2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e2a6:	00db      	lsls	r3, r3, #3
    e2a8:	fa22 f303 	lsr.w	r3, r2, r3
    e2ac:	f88d 300e 	strb.w	r3, [sp, #14]
    return ((Comp == FTM_COMBINE_COMP0_MASK)? TRUE : FALSE);
    e2b0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e2b4:	2b02      	cmp	r3, #2
    e2b6:	bf0c      	ite	eq
    e2b8:	2301      	moveq	r3, #1
    e2ba:	2300      	movne	r3, #0
    e2bc:	b2db      	uxtb	r3, r3
}
    e2be:	4618      	mov	r0, r3
    e2c0:	b004      	add	sp, #16
    e2c2:	4770      	bx	lr

0000e2c4 <Ftm_Pwm_Ip_GetDualChnDeadtimeCmd>:
 *            - TRUE : The deadtime insertion in this pair of channels is disabled.
 *            - FALSE: The deadtime insertion in this pair of channels is enabled.
 */
static inline boolean Ftm_Pwm_Ip_GetDualChnDeadtimeCmd(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                       uint8                               Channel)
{
    e2c4:	b084      	sub	sp, #16
    e2c6:	9001      	str	r0, [sp, #4]
    e2c8:	460b      	mov	r3, r1
    e2ca:	f88d 3003 	strb.w	r3, [sp, #3]
    uint8 ChPairId = Channel >> 1U;
    e2ce:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e2d2:	085b      	lsrs	r3, r3, #1
    e2d4:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 DetEnable = (uint8)((uint32)(FtmBase->COMBINE & ((uint32)FTM_COMBINE_DTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) >>  ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    e2d8:	9b01      	ldr	r3, [sp, #4]
    e2da:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    e2dc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e2e0:	00db      	lsls	r3, r3, #3
    e2e2:	2110      	movs	r1, #16
    e2e4:	fa01 f303 	lsl.w	r3, r1, r3
    e2e8:	401a      	ands	r2, r3
    e2ea:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e2ee:	00db      	lsls	r3, r3, #3
    e2f0:	fa22 f303 	lsr.w	r3, r2, r3
    e2f4:	f88d 300e 	strb.w	r3, [sp, #14]
    return ((DetEnable == FTM_COMBINE_DTEN0_MASK)? TRUE : FALSE);
    e2f8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    e2fc:	2b10      	cmp	r3, #16
    e2fe:	bf0c      	ite	eq
    e300:	2301      	moveq	r3, #1
    e302:	2300      	movne	r3, #0
    e304:	b2db      	uxtb	r3, r3
}
    e306:	4618      	mov	r0, r3
    e308:	b004      	add	sp, #16
    e30a:	4770      	bx	lr

0000e30c <Ftm_Pwm_Ip_GetChannelMode>:
/*!
 * @brief Get the channel Mode
 */
static inline Ftm_Pwm_Ip_ChannelModeType Ftm_Pwm_Ip_GetChannelMode(const Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                                   uint8                               Channel)
{
    e30c:	b500      	push	{lr}
    e30e:	b085      	sub	sp, #20
    e310:	9001      	str	r0, [sp, #4]
    e312:	460b      	mov	r3, r1
    e314:	f88d 3003 	strb.w	r3, [sp, #3]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 RetValue;
    uint8 Combine;
    uint8 Mcombine;
    uint8 ChPairId = Channel >> 1U;
    e318:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e31c:	085b      	lsrs	r3, r3, #1
    e31e:	f88d 300b 	strb.w	r3, [sp, #11]

    Combine = (uint8)((FtmBase->COMBINE & ((uint32)FTM_COMBINE_COMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) >>  ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    e322:	9b01      	ldr	r3, [sp, #4]
    e324:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    e326:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e32a:	00db      	lsls	r3, r3, #3
    e32c:	2101      	movs	r1, #1
    e32e:	fa01 f303 	lsl.w	r3, r1, r3
    e332:	401a      	ands	r2, r3
    e334:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e338:	00db      	lsls	r3, r3, #3
    e33a:	fa22 f303 	lsr.w	r3, r2, r3
    e33e:	f88d 300a 	strb.w	r3, [sp, #10]
    Mcombine = (uint8)((FtmBase->COMBINE & ((uint32)FTM_COMBINE_MCOMBINE0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH))) >> ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    e342:	9b01      	ldr	r3, [sp, #4]
    e344:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    e346:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e34a:	00db      	lsls	r3, r3, #3
    e34c:	2180      	movs	r1, #128	; 0x80
    e34e:	fa01 f303 	lsl.w	r3, r1, r3
    e352:	401a      	ands	r2, r3
    e354:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e358:	00db      	lsls	r3, r3, #3
    e35a:	fa22 f303 	lsr.w	r3, r2, r3
    e35e:	f88d 3009 	strb.w	r3, [sp, #9]
    Mcombine = (Mcombine == (uint8)FTM_COMBINE_MCOMBINE0_MASK)? 0x01U : 0x00U;
    e362:	f89d 3009 	ldrb.w	r3, [sp, #9]
    e366:	2b80      	cmp	r3, #128	; 0x80
    e368:	d101      	bne.n	e36e <Ftm_Pwm_Ip_GetChannelMode+0x62>
    e36a:	2301      	movs	r3, #1
    e36c:	e000      	b.n	e370 <Ftm_Pwm_Ip_GetChannelMode+0x64>
    e36e:	2300      	movs	r3, #0
    e370:	f88d 3009 	strb.w	r3, [sp, #9]
    RetValue = (uint8)Ftm_Pwm_Ip_GetChnEdgeLevel(FtmBase, Channel);
    e374:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e378:	4619      	mov	r1, r3
    e37a:	9801      	ldr	r0, [sp, #4]
    e37c:	f7ff f936 	bl	d5ec <Ftm_Pwm_Ip_GetChnEdgeLevel>
    e380:	4603      	mov	r3, r0
    e382:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Ftm_Pwm_Ip_GetChnMode(FtmBase, Channel) << 2U);
    e386:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e38a:	4619      	mov	r1, r3
    e38c:	9801      	ldr	r0, [sp, #4]
    e38e:	f7ff f9c5 	bl	d71c <Ftm_Pwm_Ip_GetChnMode>
    e392:	4603      	mov	r3, r0
    e394:	009b      	lsls	r3, r3, #2
    e396:	b2da      	uxtb	r2, r3
    e398:	f89d 3008 	ldrb.w	r3, [sp, #8]
    e39c:	4313      	orrs	r3, r2
    e39e:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)((uint8)Ftm_Pwm_Ip_GetCpwms(FtmBase) << 4U);
    e3a2:	9801      	ldr	r0, [sp, #4]
    e3a4:	f7ff f8be 	bl	d524 <Ftm_Pwm_Ip_GetCpwms>
    e3a8:	4603      	mov	r3, r0
    e3aa:	b2db      	uxtb	r3, r3
    e3ac:	011b      	lsls	r3, r3, #4
    e3ae:	b2da      	uxtb	r2, r3
    e3b0:	f89d 3008 	ldrb.w	r3, [sp, #8]
    e3b4:	4313      	orrs	r3, r2
    e3b6:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Combine << 5U);
    e3ba:	f89d 300a 	ldrb.w	r3, [sp, #10]
    e3be:	015b      	lsls	r3, r3, #5
    e3c0:	b2da      	uxtb	r2, r3
    e3c2:	f89d 3008 	ldrb.w	r3, [sp, #8]
    e3c6:	4313      	orrs	r3, r2
    e3c8:	f88d 3008 	strb.w	r3, [sp, #8]
    RetValue |= (uint8)(Mcombine << 6U);
    e3cc:	f89d 3009 	ldrb.w	r3, [sp, #9]
    e3d0:	019b      	lsls	r3, r3, #6
    e3d2:	b2da      	uxtb	r2, r3
    e3d4:	f89d 3008 	ldrb.w	r3, [sp, #8]
    e3d8:	4313      	orrs	r3, r2
    e3da:	f88d 3008 	strb.w	r3, [sp, #8]

    switch (RetValue)
    e3de:	f89d 3008 	ldrb.w	r3, [sp, #8]
    e3e2:	2b62      	cmp	r3, #98	; 0x62
    e3e4:	d055      	beq.n	e492 <Ftm_Pwm_Ip_GetChannelMode+0x186>
    e3e6:	2b62      	cmp	r3, #98	; 0x62
    e3e8:	dc59      	bgt.n	e49e <Ftm_Pwm_Ip_GetChannelMode+0x192>
    e3ea:	2b22      	cmp	r3, #34	; 0x22
    e3ec:	dc3c      	bgt.n	e468 <Ftm_Pwm_Ip_GetChannelMode+0x15c>
    e3ee:	2b09      	cmp	r3, #9
    e3f0:	db55      	blt.n	e49e <Ftm_Pwm_Ip_GetChannelMode+0x192>
    e3f2:	3b09      	subs	r3, #9
    e3f4:	2b19      	cmp	r3, #25
    e3f6:	d852      	bhi.n	e49e <Ftm_Pwm_Ip_GetChannelMode+0x192>
    e3f8:	a201      	add	r2, pc, #4	; (adr r2, e400 <Ftm_Pwm_Ip_GetChannelMode+0xf4>)
    e3fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e3fe:	bf00      	nop
    e400:	0000e475 	.word	0x0000e475
    e404:	0000e46f 	.word	0x0000e46f
    e408:	0000e49f 	.word	0x0000e49f
    e40c:	0000e49f 	.word	0x0000e49f
    e410:	0000e49f 	.word	0x0000e49f
    e414:	0000e49f 	.word	0x0000e49f
    e418:	0000e49f 	.word	0x0000e49f
    e41c:	0000e49f 	.word	0x0000e49f
    e420:	0000e481 	.word	0x0000e481
    e424:	0000e47b 	.word	0x0000e47b
    e428:	0000e49f 	.word	0x0000e49f
    e42c:	0000e49f 	.word	0x0000e49f
    e430:	0000e49f 	.word	0x0000e49f
    e434:	0000e49f 	.word	0x0000e49f
    e438:	0000e49f 	.word	0x0000e49f
    e43c:	0000e49f 	.word	0x0000e49f
    e440:	0000e49f 	.word	0x0000e49f
    e444:	0000e49f 	.word	0x0000e49f
    e448:	0000e49f 	.word	0x0000e49f
    e44c:	0000e49f 	.word	0x0000e49f
    e450:	0000e49f 	.word	0x0000e49f
    e454:	0000e49f 	.word	0x0000e49f
    e458:	0000e49f 	.word	0x0000e49f
    e45c:	0000e49f 	.word	0x0000e49f
    e460:	0000e48d 	.word	0x0000e48d
    e464:	0000e487 	.word	0x0000e487
    e468:	2b61      	cmp	r3, #97	; 0x61
    e46a:	d015      	beq.n	e498 <Ftm_Pwm_Ip_GetChannelMode+0x18c>
    e46c:	e017      	b.n	e49e <Ftm_Pwm_Ip_GetChannelMode+0x192>
    {
        case 0x0AU:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_EDGE_ALIGNED_HIGH;
    e46e:	230a      	movs	r3, #10
    e470:	9303      	str	r3, [sp, #12]
            break;
    e472:	e017      	b.n	e4a4 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x09U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_EDGE_ALIGNED_LOW;
    e474:	2309      	movs	r3, #9
    e476:	9303      	str	r3, [sp, #12]
            break;
    e478:	e014      	b.n	e4a4 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x12U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_CENTER_ALIGNED_HIGH;
    e47a:	2312      	movs	r3, #18
    e47c:	9303      	str	r3, [sp, #12]
            break;
    e47e:	e011      	b.n	e4a4 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x11U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_CENTER_ALIGNED_LOW;
    e480:	2311      	movs	r3, #17
    e482:	9303      	str	r3, [sp, #12]
            break;
    e484:	e00e      	b.n	e4a4 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x22U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_COMBINE_HIGH;
    e486:	2322      	movs	r3, #34	; 0x22
    e488:	9303      	str	r3, [sp, #12]
            break;
    e48a:	e00b      	b.n	e4a4 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x21U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_COMBINE_LOW;
    e48c:	2321      	movs	r3, #33	; 0x21
    e48e:	9303      	str	r3, [sp, #12]
            break;
    e490:	e008      	b.n	e4a4 <Ftm_Pwm_Ip_GetChannelMode+0x198>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        case 0x62U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH;
    e492:	2362      	movs	r3, #98	; 0x62
    e494:	9303      	str	r3, [sp, #12]
            break;
    e496:	e005      	b.n	e4a4 <Ftm_Pwm_Ip_GetChannelMode+0x198>
        case 0x61U:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW;
    e498:	2361      	movs	r3, #97	; 0x61
    e49a:	9303      	str	r3, [sp, #12]
            break;
    e49c:	e002      	b.n	e4a4 <Ftm_Pwm_Ip_GetChannelMode+0x198>
#endif
        default:
            ChMode = (Ftm_Pwm_Ip_ChannelModeType)FTM_PWM_IP_MODE_NODEFINED;
    e49e:	23ff      	movs	r3, #255	; 0xff
    e4a0:	9303      	str	r3, [sp, #12]
            break;
    e4a2:	bf00      	nop
    }

    return ChMode; 
    e4a4:	9b03      	ldr	r3, [sp, #12]
}
    e4a6:	4618      	mov	r0, r3
    e4a8:	b005      	add	sp, #20
    e4aa:	f85d fb04 	ldr.w	pc, [sp], #4

0000e4ae <Ftm_Pwm_Ip_UpdateWriteProtection>:
 * Function Name : Ftm_Pwm_Ip_UpdateWriteProtection
 * Description   : Enables or disables the FTM write protection.
 */
static inline void Ftm_Pwm_Ip_UpdateWriteProtection(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                    boolean                       Enable)
{
    e4ae:	b082      	sub	sp, #8
    e4b0:	9001      	str	r0, [sp, #4]
    e4b2:	460b      	mov	r3, r1
    e4b4:	f88d 3003 	strb.w	r3, [sp, #3]
    if (Enable == TRUE)
    e4b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e4bc:	2b00      	cmp	r3, #0
    e4be:	d006      	beq.n	e4ce <Ftm_Pwm_Ip_UpdateWriteProtection+0x20>
    {/* Enable write protection */
        /* WPEN is set when 1 is written to it. */
        FtmBase->FMS = (FtmBase->FMS & ~FTM_FMS_WPEN_MASK) | FTM_FMS_WPEN(1U);
    e4c0:	9b01      	ldr	r3, [sp, #4]
    e4c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    e4c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    e4c8:	9b01      	ldr	r3, [sp, #4]
    e4ca:	675a      	str	r2, [r3, #116]	; 0x74
    }
    else
    {
        /* MISRA Rule 15.7 All if...else if constructs shall be terminated with an else statement */
    }
}
    e4cc:	e00b      	b.n	e4e6 <Ftm_Pwm_Ip_UpdateWriteProtection+0x38>
    else if ((FtmBase->FMS & FTM_FMS_WPEN_MASK) != 0U)
    e4ce:	9b01      	ldr	r3, [sp, #4]
    e4d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    e4d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    e4d6:	2b00      	cmp	r3, #0
    e4d8:	d005      	beq.n	e4e6 <Ftm_Pwm_Ip_UpdateWriteProtection+0x38>
        FtmBase->MODE |= FTM_MODE_WPDIS(TRUE);
    e4da:	9b01      	ldr	r3, [sp, #4]
    e4dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    e4de:	f043 0204 	orr.w	r2, r3, #4
    e4e2:	9b01      	ldr	r3, [sp, #4]
    e4e4:	655a      	str	r2, [r3, #84]	; 0x54
}
    e4e6:	bf00      	nop
    e4e8:	b002      	add	sp, #8
    e4ea:	4770      	bx	lr

0000e4ec <Ftm_Pwm_Ip_Reset>:
 * Function Name : Ftm_Pwm_Ip_Reset
 * Description   : Resets the FTM registers. All the register use in the driver should be
 * reset to default value of each register.
 */
static inline void Ftm_Pwm_Ip_Reset(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    e4ec:	b500      	push	{lr}
    e4ee:	b085      	sub	sp, #20
    e4f0:	9001      	str	r0, [sp, #4]
    uint8 ChnIndex;

    /* Disable the write protection mechanism */
    Ftm_Pwm_Ip_UpdateWriteProtection(FtmBase, FALSE);
    e4f2:	2100      	movs	r1, #0
    e4f4:	9801      	ldr	r0, [sp, #4]
    e4f6:	f7ff ffda 	bl	e4ae <Ftm_Pwm_Ip_UpdateWriteProtection>

    /* Reset all registers to the default value */
    REG_RMW32(&(FtmBase->SC), 0U, 0U);
    e4fa:	9b01      	ldr	r3, [sp, #4]
    e4fc:	681a      	ldr	r2, [r3, #0]
    e4fe:	9b01      	ldr	r3, [sp, #4]
    e500:	601a      	str	r2, [r3, #0]
    FtmBase->CNT        = 0U;
    e502:	9b01      	ldr	r3, [sp, #4]
    e504:	2200      	movs	r2, #0
    e506:	605a      	str	r2, [r3, #4]
    FtmBase->MOD        = 0U;
    e508:	9b01      	ldr	r3, [sp, #4]
    e50a:	2200      	movs	r2, #0
    e50c:	609a      	str	r2, [r3, #8]
    FtmBase->CNTIN      = 0U;
    e50e:	9b01      	ldr	r3, [sp, #4]
    e510:	2200      	movs	r2, #0
    e512:	64da      	str	r2, [r3, #76]	; 0x4c
    REG_RMW32(&(FtmBase->STATUS), 0U, 0U);
    e514:	9b01      	ldr	r3, [sp, #4]
    e516:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    e518:	9b01      	ldr	r3, [sp, #4]
    e51a:	651a      	str	r2, [r3, #80]	; 0x50
    FtmBase->MODE       = 4U;
    e51c:	9b01      	ldr	r3, [sp, #4]
    e51e:	2204      	movs	r2, #4
    e520:	655a      	str	r2, [r3, #84]	; 0x54
    FtmBase->SYNC       = 0U;
    e522:	9b01      	ldr	r3, [sp, #4]
    e524:	2200      	movs	r2, #0
    e526:	659a      	str	r2, [r3, #88]	; 0x58
    FtmBase->OUTINIT    = 0U;
    e528:	9b01      	ldr	r3, [sp, #4]
    e52a:	2200      	movs	r2, #0
    e52c:	65da      	str	r2, [r3, #92]	; 0x5c
    FtmBase->OUTMASK    = 0U;
    e52e:	9b01      	ldr	r3, [sp, #4]
    e530:	2200      	movs	r2, #0
    e532:	661a      	str	r2, [r3, #96]	; 0x60
    FtmBase->COMBINE    = 0U;
    e534:	9b01      	ldr	r3, [sp, #4]
    e536:	2200      	movs	r2, #0
    e538:	665a      	str	r2, [r3, #100]	; 0x64
    FtmBase->DEADTIME   = 0U;
    e53a:	9b01      	ldr	r3, [sp, #4]
    e53c:	2200      	movs	r2, #0
    e53e:	669a      	str	r2, [r3, #104]	; 0x68
    REG_RMW32(&(FtmBase->EXTTRIG), 0U, 0U);
    e540:	9b01      	ldr	r3, [sp, #4]
    e542:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    e544:	9b01      	ldr	r3, [sp, #4]
    e546:	66da      	str	r2, [r3, #108]	; 0x6c
    FtmBase->POL        = 0U;
    e548:	9b01      	ldr	r3, [sp, #4]
    e54a:	2200      	movs	r2, #0
    e54c:	671a      	str	r2, [r3, #112]	; 0x70
    FtmBase->FMS        = 0U;
    e54e:	9b01      	ldr	r3, [sp, #4]
    e550:	2200      	movs	r2, #0
    e552:	675a      	str	r2, [r3, #116]	; 0x74
    FtmBase->FILTER     = 0U;
    e554:	9b01      	ldr	r3, [sp, #4]
    e556:	2200      	movs	r2, #0
    e558:	679a      	str	r2, [r3, #120]	; 0x78
    FtmBase->QDCTRL     = 0U;
    e55a:	9b01      	ldr	r3, [sp, #4]
    e55c:	2200      	movs	r2, #0
    e55e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    FtmBase->CONF       = 0U;
    e562:	9b01      	ldr	r3, [sp, #4]
    e564:	2200      	movs	r2, #0
    e566:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    FtmBase->SYNCONF    = 0U;
    e56a:	9b01      	ldr	r3, [sp, #4]
    e56c:	2200      	movs	r2, #0
    e56e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    FtmBase->INVCTRL    = 0U;
    e572:	9b01      	ldr	r3, [sp, #4]
    e574:	2200      	movs	r2, #0
    e576:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    FtmBase->SWOCTRL    = 0U;
    e57a:	9b01      	ldr	r3, [sp, #4]
    e57c:	2200      	movs	r2, #0
    e57e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    FtmBase->PWMLOAD    = 0U;
    e582:	9b01      	ldr	r3, [sp, #4]
    e584:	2200      	movs	r2, #0
    e586:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (defined(FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD) && (FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD == STD_ON))
    FtmBase->HCR        = 0U;
    e58a:	9b01      	ldr	r3, [sp, #4]
    e58c:	2200      	movs	r2, #0
    e58e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        FtmBase->MOD_MIRROR = 0U;
    }
#endif

    /* Reset values of all CV and CSC registers */
    for (ChnIndex = 0; ChnIndex < FTM_PWM_IP_CHANNEL_COUNT; ChnIndex++)
    e592:	2300      	movs	r3, #0
    e594:	f88d 300f 	strb.w	r3, [sp, #15]
    e598:	e014      	b.n	e5c4 <Ftm_Pwm_Ip_Reset+0xd8>
    {
        FtmBase->CONTROLS[ChnIndex].CSC = 0U;
    e59a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e59e:	9a01      	ldr	r2, [sp, #4]
    e5a0:	3301      	adds	r3, #1
    e5a2:	00db      	lsls	r3, r3, #3
    e5a4:	4413      	add	r3, r2
    e5a6:	2200      	movs	r2, #0
    e5a8:	605a      	str	r2, [r3, #4]
        FtmBase->CONTROLS[ChnIndex].CV = 0U;
    e5aa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e5ae:	9a01      	ldr	r2, [sp, #4]
    e5b0:	3301      	adds	r3, #1
    e5b2:	00db      	lsls	r3, r3, #3
    e5b4:	4413      	add	r3, r2
    e5b6:	2200      	movs	r2, #0
    e5b8:	609a      	str	r2, [r3, #8]
    for (ChnIndex = 0; ChnIndex < FTM_PWM_IP_CHANNEL_COUNT; ChnIndex++)
    e5ba:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e5be:	3301      	adds	r3, #1
    e5c0:	f88d 300f 	strb.w	r3, [sp, #15]
    e5c4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    e5c8:	2b07      	cmp	r3, #7
    e5ca:	d9e6      	bls.n	e59a <Ftm_Pwm_Ip_Reset+0xae>
            {
                FtmBase->CV_MIRROR[ChnIndex] = 0U;
            }
        #endif
    }
}
    e5cc:	bf00      	nop
    e5ce:	bf00      	nop
    e5d0:	b005      	add	sp, #20
    e5d2:	f85d fb04 	ldr.w	pc, [sp], #4

0000e5d6 <Ftm_Pwm_Ip_SetChnTriggerCmd>:
 * FTM counter is equal to its initial value.
 */
static inline void Ftm_Pwm_Ip_SetChnTriggerCmd(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         Channel,
                                               boolean                       Enable)
{
    e5d6:	b084      	sub	sp, #16
    e5d8:	9001      	str	r0, [sp, #4]
    e5da:	460b      	mov	r3, r1
    e5dc:	f88d 3003 	strb.w	r3, [sp, #3]
    e5e0:	4613      	mov	r3, r2
    e5e2:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 Value = 0U;
    e5e6:	2300      	movs	r3, #0
    e5e8:	9303      	str	r3, [sp, #12]

    if (Channel < 2U)
    e5ea:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e5ee:	2b01      	cmp	r3, #1
    e5f0:	d806      	bhi.n	e600 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x2a>
    {
        Value = (uint32)FTM_EXTTRIG_CH0TRIG_MASK << (uint32)Channel;
    e5f2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e5f6:	2210      	movs	r2, #16
    e5f8:	fa02 f303 	lsl.w	r3, r2, r3
    e5fc:	9303      	str	r3, [sp, #12]
    e5fe:	e013      	b.n	e628 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x52>
    }
    else if (Channel < 6U)
    e600:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e604:	2b05      	cmp	r3, #5
    e606:	d807      	bhi.n	e618 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x42>
    {
        Value = (uint32)FTM_EXTTRIG_CH2TRIG_MASK << ((uint32)(Channel) - 2U);
    e608:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e60c:	3b02      	subs	r3, #2
    e60e:	2201      	movs	r2, #1
    e610:	fa02 f303 	lsl.w	r3, r2, r3
    e614:	9303      	str	r3, [sp, #12]
    e616:	e007      	b.n	e628 <Ftm_Pwm_Ip_SetChnTriggerCmd+0x52>
    }
    else
    {
        /* Set trigger to other channels which are not aligned */
        #if (FTM_PWM_IP_CHANNEL_COUNT > 6U)
        Value = (uint32)FTM_EXTTRIG_CH6TRIG_MASK << ((uint32)(Channel) - 6U);
    e618:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e61c:	3b06      	subs	r3, #6
    e61e:	f44f 7280 	mov.w	r2, #256	; 0x100
    e622:	fa02 f303 	lsl.w	r3, r2, r3
    e626:	9303      	str	r3, [sp, #12]
        #endif
    }

    if (TRUE == Enable)
    e628:	f89d 3002 	ldrb.w	r3, [sp, #2]
    e62c:	2b00      	cmp	r3, #0
    e62e:	d006      	beq.n	e63e <Ftm_Pwm_Ip_SetChnTriggerCmd+0x68>
    {
        FtmBase->EXTTRIG |= Value;
    e630:	9b01      	ldr	r3, [sp, #4]
    e632:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    e634:	9b03      	ldr	r3, [sp, #12]
    e636:	431a      	orrs	r2, r3
    e638:	9b01      	ldr	r3, [sp, #4]
    e63a:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    else
    {
        FtmBase->EXTTRIG &= ~Value;
    }
}
    e63c:	e006      	b.n	e64c <Ftm_Pwm_Ip_SetChnTriggerCmd+0x76>
        FtmBase->EXTTRIG &= ~Value;
    e63e:	9b01      	ldr	r3, [sp, #4]
    e640:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    e642:	9b03      	ldr	r3, [sp, #12]
    e644:	43db      	mvns	r3, r3
    e646:	401a      	ands	r2, r3
    e648:	9b01      	ldr	r3, [sp, #4]
    e64a:	66da      	str	r2, [r3, #108]	; 0x6c
}
    e64c:	bf00      	nop
    e64e:	b004      	add	sp, #16
    e650:	4770      	bx	lr

0000e652 <Ftm_Pwm_Ip_SetFaultControlMode>:
 * Function Name : Ftm_Pwm_Ip_SetFaultControlMode
 * Description   : Set the FTM fault control mode.
 */
static inline void Ftm_Pwm_Ip_SetFaultControlMode(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  Ftm_Pwm_Ip_FaultControlModeType FaultMode)
{
    e652:	b082      	sub	sp, #8
    e654:	9001      	str	r0, [sp, #4]
    e656:	9100      	str	r1, [sp, #0]
    e658:	9b00      	ldr	r3, [sp, #0]
    e65a:	2b03      	cmp	r3, #3
    e65c:	d82a      	bhi.n	e6b4 <Ftm_Pwm_Ip_SetFaultControlMode+0x62>
    e65e:	a201      	add	r2, pc, #4	; (adr r2, e664 <Ftm_Pwm_Ip_SetFaultControlMode+0x12>)
    e660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e664:	0000e675 	.word	0x0000e675
    e668:	0000e683 	.word	0x0000e683
    e66c:	0000e695 	.word	0x0000e695
    e670:	0000e6a7 	.word	0x0000e6a7
    switch(FaultMode)
    {
        case FTM_PWM_IP_FAULT_DISABLED:
            /*  Fault control is disabled for all channels. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x00U);
    e674:	9b01      	ldr	r3, [sp, #4]
    e676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    e678:	f023 0260 	bic.w	r2, r3, #96	; 0x60
    e67c:	9b01      	ldr	r3, [sp, #4]
    e67e:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    e680:	e019      	b.n	e6b6 <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_EVEN_CHANNELS_MANUAL_CLEAR:
            /* Fault control is enabled for even channels only (channels 0, 2, 4, and 6), and the selected
               mode is the manual fault clearing. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x01U);
    e682:	9b01      	ldr	r3, [sp, #4]
    e684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    e686:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    e68a:	f043 0220 	orr.w	r2, r3, #32
    e68e:	9b01      	ldr	r3, [sp, #4]
    e690:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    e692:	e010      	b.n	e6b6 <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_ALL_CHANNELS_MANUAL_CLEAR:
            /* Fault control is enabled for all channels, and the selected mode is the manual fault clearing. */
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x02U);
    e694:	9b01      	ldr	r3, [sp, #4]
    e696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    e698:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    e69c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    e6a0:	9b01      	ldr	r3, [sp, #4]
    e6a2:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    e6a4:	e007      	b.n	e6b6 <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        case FTM_PWM_IP_FAULT_ALL_CHANNELS_AUTO_CLEAR:
            /*  Fault control is enabled for all channels, and the selected mode is the automatic fault clearing.*/
            FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTM_MASK) | FTM_MODE_FAULTM(0x03U);
    e6a6:	9b01      	ldr	r3, [sp, #4]
    e6a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    e6aa:	f043 0260 	orr.w	r2, r3, #96	; 0x60
    e6ae:	9b01      	ldr	r3, [sp, #4]
    e6b0:	655a      	str	r2, [r3, #84]	; 0x54
            break;
    e6b2:	e000      	b.n	e6b6 <Ftm_Pwm_Ip_SetFaultControlMode+0x64>
        default:
            /* Nothing to do. This switch branch is empty because it shall not be executed for normal behaviour */
            break;
    e6b4:	bf00      	nop
    }
}
    e6b6:	bf00      	nop
    e6b8:	b002      	add	sp, #8
    e6ba:	4770      	bx	lr

0000e6bc <Ftm_Pwm_Ip_SetDualChFaultCtr>:
 * Description   : Enables/Disables the fault control in channels (n) and (n+1)
 */
static inline void Ftm_Pwm_Ip_SetDualChFaultCtr(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                uint8                         ChPairId,
                                                boolean                       Enable)
{
    e6bc:	b082      	sub	sp, #8
    e6be:	9001      	str	r0, [sp, #4]
    e6c0:	460b      	mov	r3, r1
    e6c2:	f88d 3003 	strb.w	r3, [sp, #3]
    e6c6:	4613      	mov	r3, r2
    e6c8:	f88d 3002 	strb.w	r3, [sp, #2]
    if (Enable)
    e6cc:	f89d 3002 	ldrb.w	r3, [sp, #2]
    e6d0:	2b00      	cmp	r3, #0
    e6d2:	d00b      	beq.n	e6ec <Ftm_Pwm_Ip_SetDualChFaultCtr+0x30>
    {
        FtmBase->COMBINE |= (uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH);
    e6d4:	9b01      	ldr	r3, [sp, #4]
    e6d6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    e6d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e6dc:	00db      	lsls	r3, r3, #3
    e6de:	2140      	movs	r1, #64	; 0x40
    e6e0:	fa01 f303 	lsl.w	r3, r1, r3
    e6e4:	431a      	orrs	r2, r3
    e6e6:	9b01      	ldr	r3, [sp, #4]
    e6e8:	665a      	str	r2, [r3, #100]	; 0x64
    }
    else
    {
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    }
}
    e6ea:	e00b      	b.n	e704 <Ftm_Pwm_Ip_SetDualChFaultCtr+0x48>
        FtmBase->COMBINE &= ~((uint32)FTM_COMBINE_FAULTEN0_MASK << ((uint32)(ChPairId) * FTM_PWM_IP_COMBINE_CHAN_CTRL_WIDTH));
    e6ec:	9b01      	ldr	r3, [sp, #4]
    e6ee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    e6f0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e6f4:	00db      	lsls	r3, r3, #3
    e6f6:	2140      	movs	r1, #64	; 0x40
    e6f8:	fa01 f303 	lsl.w	r3, r1, r3
    e6fc:	43db      	mvns	r3, r3
    e6fe:	401a      	ands	r2, r3
    e700:	9b01      	ldr	r3, [sp, #4]
    e702:	665a      	str	r2, [r3, #100]	; 0x64
}
    e704:	bf00      	nop
    e706:	b002      	add	sp, #8
    e708:	4770      	bx	lr

0000e70a <Ftm_Pwm_Ip_SetFaultInterruptEnable>:
 * Function Name : Ftm_Pwm_Ip_SetFaultInterruptEnable
 * Description   : Enables/Disables the FTM fault interrupt.
 */
static inline void Ftm_Pwm_Ip_SetFaultInterruptEnable(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                      boolean                       Enable)
{
    e70a:	b082      	sub	sp, #8
    e70c:	9001      	str	r0, [sp, #4]
    e70e:	460b      	mov	r3, r1
    e710:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->MODE = (FtmBase->MODE & ~FTM_MODE_FAULTIE_MASK) | FTM_MODE_FAULTIE((Enable == TRUE) ? 0x01U : 0x00U);
    e714:	9b01      	ldr	r3, [sp, #4]
    e716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    e718:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    e71c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    e720:	2a00      	cmp	r2, #0
    e722:	d001      	beq.n	e728 <Ftm_Pwm_Ip_SetFaultInterruptEnable+0x1e>
    e724:	2280      	movs	r2, #128	; 0x80
    e726:	e000      	b.n	e72a <Ftm_Pwm_Ip_SetFaultInterruptEnable+0x20>
    e728:	2200      	movs	r2, #0
    e72a:	431a      	orrs	r2, r3
    e72c:	9b01      	ldr	r3, [sp, #4]
    e72e:	655a      	str	r2, [r3, #84]	; 0x54
}
    e730:	bf00      	nop
    e732:	b002      	add	sp, #8
    e734:	4770      	bx	lr

0000e736 <Ftm_Pwm_Ip_ClearFaultFlag>:
/*!
 * Function Name : Ftm_Pwm_Ip_ClearFaultFlag
 * Description   : Clears the fault interrupt flag.
 */
static inline void Ftm_Pwm_Ip_ClearFaultFlag(Ftm_Pwm_Ip_HwAddrType * const FtmBase)
{
    e736:	b082      	sub	sp, #8
    e738:	9001      	str	r0, [sp, #4]
    FtmBase->FMS = (FtmBase->FMS & ~FTM_FMS_FAULTF_MASK) | FTM_FMS_FAULTF(0U);
    e73a:	9b01      	ldr	r3, [sp, #4]
    e73c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    e73e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    e742:	9b01      	ldr	r3, [sp, #4]
    e744:	675a      	str	r2, [r3, #116]	; 0x74
}
    e746:	bf00      	nop
    e748:	b002      	add	sp, #8
    e74a:	4770      	bx	lr

0000e74c <Ftm_Pwm_Ip_SetFaultFilterValue>:
 * Function Name : Ftm_Pwm_Ip_SetFaultFilterValue
 * Description   : Selects the filter value for the fault inputs.
 */
static inline void Ftm_Pwm_Ip_SetFaultFilterValue(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  uint8                         FaultFilterValue)
{
    e74c:	b082      	sub	sp, #8
    e74e:	9001      	str	r0, [sp, #4]
    e750:	460b      	mov	r3, r1
    e752:	f88d 3003 	strb.w	r3, [sp, #3]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~FTM_FLTCTRL_FFVAL_MASK) | FTM_FLTCTRL_FFVAL((uint32)FaultFilterValue);
    e756:	9b01      	ldr	r3, [sp, #4]
    e758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    e75a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
    e75e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e762:	021b      	lsls	r3, r3, #8
    e764:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    e768:	431a      	orrs	r2, r3
    e76a:	9b01      	ldr	r3, [sp, #4]
    e76c:	67da      	str	r2, [r3, #124]	; 0x7c
}
    e76e:	bf00      	nop
    e770:	b002      	add	sp, #8
    e772:	4770      	bx	lr

0000e774 <Ftm_Pwm_Ip_SetFaultOutputState>:
 * Function Name : Ftm_Pwm_Ip_SetFaultOutputState
 * Description   : Selects the fault output state when a fault event is ongoing.
 */
static inline void Ftm_Pwm_Ip_SetFaultOutputState(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                                  Ftm_Pwm_Ip_FaultOutputStateType FaultState)
{
    e774:	b082      	sub	sp, #8
    e776:	9001      	str	r0, [sp, #4]
    e778:	9100      	str	r1, [sp, #0]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~FTM_FLTCTRL_FSTATE_MASK) | FTM_FLTCTRL_FSTATE((FaultState == FTM_PWM_IP_OUT_SAFE_VALUE)? 0x00U : 0x01U);
    e77a:	9b01      	ldr	r3, [sp, #4]
    e77c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    e77e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    e782:	9a00      	ldr	r2, [sp, #0]
    e784:	2a00      	cmp	r2, #0
    e786:	d002      	beq.n	e78e <Ftm_Pwm_Ip_SetFaultOutputState+0x1a>
    e788:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    e78c:	e000      	b.n	e790 <Ftm_Pwm_Ip_SetFaultOutputState+0x1c>
    e78e:	2200      	movs	r2, #0
    e790:	431a      	orrs	r2, r3
    e792:	9b01      	ldr	r3, [sp, #4]
    e794:	67da      	str	r2, [r3, #124]	; 0x7c
}
    e796:	bf00      	nop
    e798:	b002      	add	sp, #8
    e79a:	4770      	bx	lr

0000e79c <Ftm_Pwm_Ip_SetFaultPolarity>:
 * Description   : Selects the fault inputs polarity.
 */
static inline void Ftm_Pwm_Ip_SetFaultPolarity(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         FaultId,
                                               Ftm_Pwm_Ip_PolarityType       FaultPol)
{
    e79c:	b086      	sub	sp, #24
    e79e:	9003      	str	r0, [sp, #12]
    e7a0:	460b      	mov	r3, r1
    e7a2:	9201      	str	r2, [sp, #4]
    e7a4:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 FaultInPol = ((FaultPol == FTM_PWM_IP_POLARITY_HIGH)? (uint32)0U : (uint32)1U);
    e7a8:	9b01      	ldr	r3, [sp, #4]
    e7aa:	2b00      	cmp	r3, #0
    e7ac:	bf14      	ite	ne
    e7ae:	2301      	movne	r3, #1
    e7b0:	2300      	moveq	r3, #0
    e7b2:	b2db      	uxtb	r3, r3
    e7b4:	9305      	str	r3, [sp, #20]
    FtmBase->FLTPOL = (FtmBase->FLTPOL & ~(1UL << FaultId)) | ((uint32)FaultInPol << FaultId);
    e7b6:	9b03      	ldr	r3, [sp, #12]
    e7b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    e7bc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e7c0:	2101      	movs	r1, #1
    e7c2:	fa01 f303 	lsl.w	r3, r1, r3
    e7c6:	43db      	mvns	r3, r3
    e7c8:	401a      	ands	r2, r3
    e7ca:	f89d 300b 	ldrb.w	r3, [sp, #11]
    e7ce:	9905      	ldr	r1, [sp, #20]
    e7d0:	fa01 f303 	lsl.w	r3, r1, r3
    e7d4:	431a      	orrs	r2, r3
    e7d6:	9b03      	ldr	r3, [sp, #12]
    e7d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    e7dc:	bf00      	nop
    e7de:	b006      	add	sp, #24
    e7e0:	4770      	bx	lr

0000e7e2 <Ftm_Pwm_Ip_SetFaultInputEn>:
 * Description   : Enables/Disables the fault inputs.
 */
static inline void Ftm_Pwm_Ip_SetFaultInputEn(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                        FaultId,
                                               boolean                      FaultEn)
{
    e7e2:	b084      	sub	sp, #16
    e7e4:	9001      	str	r0, [sp, #4]
    e7e6:	460b      	mov	r3, r1
    e7e8:	f88d 3003 	strb.w	r3, [sp, #3]
    e7ec:	4613      	mov	r3, r2
    e7ee:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 FaultInEn = ((FaultEn == TRUE)? (uint32)1U : (uint32)0U);
    e7f2:	f89d 3002 	ldrb.w	r3, [sp, #2]
    e7f6:	2b00      	cmp	r3, #0
    e7f8:	d001      	beq.n	e7fe <Ftm_Pwm_Ip_SetFaultInputEn+0x1c>
    e7fa:	2301      	movs	r3, #1
    e7fc:	e000      	b.n	e800 <Ftm_Pwm_Ip_SetFaultInputEn+0x1e>
    e7fe:	2300      	movs	r3, #0
    e800:	9303      	str	r3, [sp, #12]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~(1UL << FaultId)) | ((uint32)FaultInEn << FaultId);
    e802:	9b01      	ldr	r3, [sp, #4]
    e804:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    e806:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e80a:	2101      	movs	r1, #1
    e80c:	fa01 f303 	lsl.w	r3, r1, r3
    e810:	43db      	mvns	r3, r3
    e812:	401a      	ands	r2, r3
    e814:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e818:	9903      	ldr	r1, [sp, #12]
    e81a:	fa01 f303 	lsl.w	r3, r1, r3
    e81e:	431a      	orrs	r2, r3
    e820:	9b01      	ldr	r3, [sp, #4]
    e822:	67da      	str	r2, [r3, #124]	; 0x7c
}
    e824:	bf00      	nop
    e826:	b004      	add	sp, #16
    e828:	4770      	bx	lr

0000e82a <Ftm_Pwm_Ip_SetFaultFilterEn>:
 * Description   : Enables/Disables the filter for the fault input.
 */
static inline void Ftm_Pwm_Ip_SetFaultFilterEn(Ftm_Pwm_Ip_HwAddrType * const FtmBase,
                                               uint8                         FaultId,
                                               boolean                       FaultFilEn)
{
    e82a:	b084      	sub	sp, #16
    e82c:	9001      	str	r0, [sp, #4]
    e82e:	460b      	mov	r3, r1
    e830:	f88d 3003 	strb.w	r3, [sp, #3]
    e834:	4613      	mov	r3, r2
    e836:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 FaultFilterEn = ((FaultFilEn == TRUE)? (uint32)1U : (uint32)0U);
    e83a:	f89d 3002 	ldrb.w	r3, [sp, #2]
    e83e:	2b00      	cmp	r3, #0
    e840:	d001      	beq.n	e846 <Ftm_Pwm_Ip_SetFaultFilterEn+0x1c>
    e842:	2301      	movs	r3, #1
    e844:	e000      	b.n	e848 <Ftm_Pwm_Ip_SetFaultFilterEn+0x1e>
    e846:	2300      	movs	r3, #0
    e848:	9303      	str	r3, [sp, #12]
    FtmBase->FLTCTRL = (FtmBase->FLTCTRL & ~((uint32)FTM_FLTCTRL_FFLTR0EN_MASK << FaultId)) | (((uint32)FaultFilterEn << FaultId) << FTM_FLTCTRL_FFLTR0EN_SHIFT);
    e84a:	9b01      	ldr	r3, [sp, #4]
    e84c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    e84e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e852:	2110      	movs	r1, #16
    e854:	fa01 f303 	lsl.w	r3, r1, r3
    e858:	43db      	mvns	r3, r3
    e85a:	401a      	ands	r2, r3
    e85c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e860:	9903      	ldr	r1, [sp, #12]
    e862:	fa01 f303 	lsl.w	r3, r1, r3
    e866:	011b      	lsls	r3, r3, #4
    e868:	431a      	orrs	r2, r3
    e86a:	9b01      	ldr	r3, [sp, #4]
    e86c:	67da      	str	r2, [r3, #124]	; 0x7c
}
    e86e:	bf00      	nop
    e870:	b004      	add	sp, #16
    e872:	4770      	bx	lr

0000e874 <Ftm_Pwm_Ip_SetSimOutputBufferEn>:
 * Function Name : Ftm_Pwm_Ip_SetSimOutputBufferEn
 * Description   : The FTM channel output state is retained when the channel is in output mode.
 */
static inline void Ftm_Pwm_Ip_SetSimOutputBufferEn(Ftm_Pwm_Ip_SimType * const SimBase,
                                                   uint8                      Instance)
{
    e874:	b082      	sub	sp, #8
    e876:	9001      	str	r0, [sp, #4]
    e878:	460b      	mov	r3, r1
    e87a:	f88d 3003 	strb.w	r3, [sp, #3]
    SimBase->MISCTRL0 = (SimBase->MISCTRL0  & ~(uint32)((uint32)SIM_MISCTRL0_FTM0_OBE_CTRL_MASK << Instance)) | (uint32)((uint32)SIM_MISCTRL0_FTM0_OBE_CTRL_MASK << Instance);
    e87e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e882:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    e886:	409a      	lsls	r2, r3
    e888:	9b01      	ldr	r3, [sp, #4]
    e88a:	6a1b      	ldr	r3, [r3, #32]
    e88c:	431a      	orrs	r2, r3
    e88e:	9b01      	ldr	r3, [sp, #4]
    e890:	621a      	str	r2, [r3, #32]
}
    e892:	bf00      	nop
    e894:	b002      	add	sp, #8
    e896:	4770      	bx	lr

0000e898 <Ftm_Pwm_Ip_ValidateParamDeadTime>:
 *
 *END**************************************************************************/  
static boolean Ftm_Pwm_Ip_ValidateParamDeadTime(uint8 Instance,
                                                uint8 Channel,
                                                uint16 DeadTimeVal)
{
    e898:	b500      	push	{lr}
    e89a:	b089      	sub	sp, #36	; 0x24
    e89c:	4603      	mov	r3, r0
    e89e:	f88d 3007 	strb.w	r3, [sp, #7]
    e8a2:	460b      	mov	r3, r1
    e8a4:	f88d 3006 	strb.w	r3, [sp, #6]
    e8a8:	4613      	mov	r3, r2
    e8aa:	f8ad 3004 	strh.w	r3, [sp, #4]
    const Ftm_Pwm_Ip_HwAddrType *const FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    e8ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e8b2:	4a39      	ldr	r2, [pc, #228]	; (e998 <Ftm_Pwm_Ip_ValidateParamDeadTime+0x100>)
    e8b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8b8:	9306      	str	r3, [sp, #24]
    boolean RetVal = FALSE;
    e8ba:	2300      	movs	r3, #0
    e8bc:	f88d 301f 	strb.w	r3, [sp, #31]

    uint8 PairId = Channel >> 1U;
    e8c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    e8c4:	085b      	lsrs	r3, r3, #1
    e8c6:	f88d 3017 	strb.w	r3, [sp, #23]
    uint16 EvenCounterVal = Ftm_Pwm_Ip_GetChnCountVal(FtmBase, (PairId * 2U));
    e8ca:	f89d 3017 	ldrb.w	r3, [sp, #23]
    e8ce:	005b      	lsls	r3, r3, #1
    e8d0:	b2db      	uxtb	r3, r3
    e8d2:	4619      	mov	r1, r3
    e8d4:	9806      	ldr	r0, [sp, #24]
    e8d6:	f7fe ffb0 	bl	d83a <Ftm_Pwm_Ip_GetChnCountVal>
    e8da:	4603      	mov	r3, r0
    e8dc:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint16 OddCounterVal  = Ftm_Pwm_Ip_GetChnCountVal(FtmBase, ((PairId * 2U) + 1U));
    e8e0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    e8e4:	005b      	lsls	r3, r3, #1
    e8e6:	b2db      	uxtb	r3, r3
    e8e8:	3301      	adds	r3, #1
    e8ea:	b2db      	uxtb	r3, r3
    e8ec:	4619      	mov	r1, r3
    e8ee:	9806      	ldr	r0, [sp, #24]
    e8f0:	f7fe ffa3 	bl	d83a <Ftm_Pwm_Ip_GetChnCountVal>
    e8f4:	4603      	mov	r3, r0
    e8f6:	f8ad 3012 	strh.w	r3, [sp, #18]
    uint8 Prescaler = Ftm_Pwm_Ip_GetClockPs(FtmBase);
    e8fa:	9806      	ldr	r0, [sp, #24]
    e8fc:	f7fe fde0 	bl	d4c0 <Ftm_Pwm_Ip_GetClockPs>
    e900:	4603      	mov	r3, r0
    e902:	f88d 3011 	strb.w	r3, [sp, #17]
    uint8 DeadTimePs = Ftm_Pwm_Ip_GetDeadtimePrescaler(FtmBase);
    e906:	9806      	ldr	r0, [sp, #24]
    e908:	f7ff f9c1 	bl	dc8e <Ftm_Pwm_Ip_GetDeadtimePrescaler>
    e90c:	4603      	mov	r3, r0
    e90e:	f88d 3010 	strb.w	r3, [sp, #16]

    uint16 CompareEven = (OddCounterVal - EvenCounterVal);
    e912:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    e916:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    e91a:	1ad3      	subs	r3, r2, r3
    e91c:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16 CompareOdd = Ftm_Pwm_Ip_aPeriod[Instance] - CompareEven;
    e920:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e924:	4a1d      	ldr	r2, [pc, #116]	; (e99c <Ftm_Pwm_Ip_ValidateParamDeadTime+0x104>)
    e926:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    e92a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    e92e:	1ad3      	subs	r3, r2, r3
    e930:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Validate the range deadtime value is less than 1024U and greater than 0U */
    if ((DeadTimeVal < 1024U) && (DeadTimeVal > 0U))
    e934:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    e93c:	d206      	bcs.n	e94c <Ftm_Pwm_Ip_ValidateParamDeadTime+0xb4>
    e93e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e942:	2b00      	cmp	r3, #0
    e944:	d002      	beq.n	e94c <Ftm_Pwm_Ip_ValidateParamDeadTime+0xb4>
    {
        RetVal = TRUE;
    e946:	2301      	movs	r3, #1
    e948:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    /* Deadtime insertion corner cases */
    /* The deadtime delay is less than the channel (n) duty cycle */
    /* The deadtime delay is less than the channel (n+1) duty cycle */
    if ((0U == Prescaler) && ((0U == DeadTimePs) || (1U == DeadTimePs)))
    e94c:	f89d 3011 	ldrb.w	r3, [sp, #17]
    e950:	2b00      	cmp	r3, #0
    e952:	d11a      	bne.n	e98a <Ftm_Pwm_Ip_ValidateParamDeadTime+0xf2>
    e954:	f89d 3010 	ldrb.w	r3, [sp, #16]
    e958:	2b00      	cmp	r3, #0
    e95a:	d003      	beq.n	e964 <Ftm_Pwm_Ip_ValidateParamDeadTime+0xcc>
    e95c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    e960:	2b01      	cmp	r3, #1
    e962:	d112      	bne.n	e98a <Ftm_Pwm_Ip_ValidateParamDeadTime+0xf2>
    { 
        if ((DeadTimeVal < CompareEven) && (DeadTimeVal < CompareOdd))
    e964:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    e968:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    e96c:	429a      	cmp	r2, r3
    e96e:	d209      	bcs.n	e984 <Ftm_Pwm_Ip_ValidateParamDeadTime+0xec>
    e970:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    e974:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    e978:	429a      	cmp	r2, r3
    e97a:	d203      	bcs.n	e984 <Ftm_Pwm_Ip_ValidateParamDeadTime+0xec>
        {
            RetVal = TRUE;
    e97c:	2301      	movs	r3, #1
    e97e:	f88d 301f 	strb.w	r3, [sp, #31]
    e982:	e002      	b.n	e98a <Ftm_Pwm_Ip_ValidateParamDeadTime+0xf2>
        }
        else
        {
            RetVal = FALSE;
    e984:	2300      	movs	r3, #0
    e986:	f88d 301f 	strb.w	r3, [sp, #31]
        }
    }

    return RetVal;
    e98a:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    e98e:	4618      	mov	r0, r3
    e990:	b009      	add	sp, #36	; 0x24
    e992:	f85d fb04 	ldr.w	pc, [sp], #4
    e996:	bf00      	nop
    e998:	0001a05c 	.word	0x0001a05c
    e99c:	1fff8e2c 	.word	0x1fff8e2c

0000e9a0 <Ftm_Pwm_Ip_CalculatePhaseShift>:
 *
 *END**************************************************************************/
static uint16 Ftm_Pwm_Ip_CalculatePhaseShift(uint8 Instance,
                                             uint16 DutyCycle,
                                             uint16 PhaseShift)
{
    e9a0:	b084      	sub	sp, #16
    e9a2:	4603      	mov	r3, r0
    e9a4:	f88d 3007 	strb.w	r3, [sp, #7]
    e9a8:	460b      	mov	r3, r1
    e9aa:	f8ad 3004 	strh.w	r3, [sp, #4]
    e9ae:	4613      	mov	r3, r2
    e9b0:	f8ad 3002 	strh.w	r3, [sp, #2]
    uint16 CnVValue = 0U;
    e9b4:	2300      	movs	r3, #0
    e9b6:	f8ad 300e 	strh.w	r3, [sp, #14]

    /* If 100% duty cycle, C(n+1)V > MOD.
    Then choose C(n+1)V = Period = MOD + 1 for optimization. */
    if (Ftm_Pwm_Ip_aPeriod[Instance] == DutyCycle)
    e9ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e9be:	4a17      	ldr	r2, [pc, #92]	; (ea1c <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    e9c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    e9c4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    e9c8:	429a      	cmp	r2, r3
    e9ca:	d107      	bne.n	e9dc <Ftm_Pwm_Ip_CalculatePhaseShift+0x3c>
    {
        CnVValue = Ftm_Pwm_Ip_aPeriod[Instance];
    e9cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e9d0:	4a12      	ldr	r2, [pc, #72]	; (ea1c <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    e9d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    e9d6:	f8ad 300e 	strh.w	r3, [sp, #14]
    e9da:	e019      	b.n	ea10 <Ftm_Pwm_Ip_CalculatePhaseShift+0x70>
        (void) PhaseShift;
    }
    /* If 0% duty cycle, C(n+1)V = CnV = phase-shift value. */
    else if (0U == DutyCycle)
    e9dc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e9e0:	2b00      	cmp	r3, #0
    e9e2:	d104      	bne.n	e9ee <Ftm_Pwm_Ip_CalculatePhaseShift+0x4e>
    {
        CnVValue = PhaseShift;
    e9e4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    e9e8:	f8ad 300e 	strh.w	r3, [sp, #14]
    e9ec:	e010      	b.n	ea10 <Ftm_Pwm_Ip_CalculatePhaseShift+0x70>
        (void) Instance;
    }
    else
    {
        /* The n+1 match can occur at the next cycle */
        CnVValue = (PhaseShift + DutyCycle) % Ftm_Pwm_Ip_aPeriod[Instance];
    e9ee:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    e9f2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e9f6:	4413      	add	r3, r2
    e9f8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    e9fc:	4907      	ldr	r1, [pc, #28]	; (ea1c <Ftm_Pwm_Ip_CalculatePhaseShift+0x7c>)
    e9fe:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
    ea02:	fb93 f1f2 	sdiv	r1, r3, r2
    ea06:	fb01 f202 	mul.w	r2, r1, r2
    ea0a:	1a9b      	subs	r3, r3, r2
    ea0c:	f8ad 300e 	strh.w	r3, [sp, #14]
    }

    return CnVValue;
    ea10:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
    ea14:	4618      	mov	r0, r3
    ea16:	b004      	add	sp, #16
    ea18:	4770      	bx	lr
    ea1a:	bf00      	nop
    ea1c:	1fff8e2c 	.word	0x1fff8e2c

0000ea20 <Ftm_Pwm_Ip_InitPair>:
 * Description   : Configures the PWM signal for the combined channel.
 *
 *END**************************************************************************/
static void  Ftm_Pwm_Ip_InitPair(uint8 Instance,
                                 const Ftm_Pwm_Ip_PairCfgType * UserPairCfg)
{
    ea20:	b500      	push	{lr}
    ea22:	b085      	sub	sp, #20
    ea24:	4603      	mov	r3, r0
    ea26:	9100      	str	r1, [sp, #0]
    ea28:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    ea2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ea30:	4a53      	ldr	r2, [pc, #332]	; (eb80 <Ftm_Pwm_Ip_InitPair+0x160>)
    ea32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea36:	9303      	str	r3, [sp, #12]
    uint8 MainChId = 0U;
    ea38:	2300      	movs	r3, #0
    ea3a:	f88d 300b 	strb.w	r3, [sp, #11]
    uint8 PairChId = 0U;
    ea3e:	2300      	movs	r3, #0
    ea40:	f88d 300a 	strb.w	r3, [sp, #10]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    ea44:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ea48:	2b03      	cmp	r3, #3
    ea4a:	bf94      	ite	ls
    ea4c:	2301      	movls	r3, #1
    ea4e:	2300      	movhi	r3, #0
    ea50:	b2db      	uxtb	r3, r3
    ea52:	4618      	mov	r0, r3
    ea54:	f7f1 ff4a 	bl	8ec <DevAssert>
    DevAssert(NULL_PTR != UserPairCfg);
    ea58:	9b00      	ldr	r3, [sp, #0]
    ea5a:	2b00      	cmp	r3, #0
    ea5c:	bf14      	ite	ne
    ea5e:	2301      	movne	r3, #1
    ea60:	2300      	moveq	r3, #0
    ea62:	b2db      	uxtb	r3, r3
    ea64:	4618      	mov	r0, r3
    ea66:	f7f1 ff41 	bl	8ec <DevAssert>
    DevAssert(FTM_PWM_IP_PAIR_COUNT > UserPairCfg->PairId);
    ea6a:	9b00      	ldr	r3, [sp, #0]
    ea6c:	781b      	ldrb	r3, [r3, #0]
    ea6e:	2b03      	cmp	r3, #3
    ea70:	bf94      	ite	ls
    ea72:	2301      	movls	r3, #1
    ea74:	2300      	movhi	r3, #0
    ea76:	b2db      	uxtb	r3, r3
    ea78:	4618      	mov	r0, r3
    ea7a:	f7f1 ff37 	bl	8ec <DevAssert>
    /* Check that deadtime is used in complementary mode */
    if (TRUE == UserPairCfg->DeadtimeEn)
    ea7e:	9b00      	ldr	r3, [sp, #0]
    ea80:	785b      	ldrb	r3, [r3, #1]
    ea82:	2b00      	cmp	r3, #0
    ea84:	d004      	beq.n	ea90 <Ftm_Pwm_Ip_InitPair+0x70>
    {
        DevAssert(TRUE == UserPairCfg->ComplementaryModeEn);
    ea86:	9b00      	ldr	r3, [sp, #0]
    ea88:	789b      	ldrb	r3, [r3, #2]
    ea8a:	4618      	mov	r0, r3
    ea8c:	f7f1 ff2e 	bl	8ec <DevAssert>
    }
#endif

    /* Get channel ids for pair */
    MainChId = (uint8)(UserPairCfg->PairId * 2U);
    ea90:	9b00      	ldr	r3, [sp, #0]
    ea92:	781b      	ldrb	r3, [r3, #0]
    ea94:	005b      	lsls	r3, r3, #1
    ea96:	f88d 300b 	strb.w	r3, [sp, #11]
    PairChId = (uint8)(MainChId + 1U);
    ea9a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ea9e:	3301      	adds	r3, #1
    eaa0:	f88d 300a 	strb.w	r3, [sp, #10]

    Ftm_Pwm_Ip_aPhaseShift[Instance][UserPairCfg->PairId] = UserPairCfg->PhaseShiftValue;
    eaa4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    eaa8:	9a00      	ldr	r2, [sp, #0]
    eaaa:	7812      	ldrb	r2, [r2, #0]
    eaac:	4610      	mov	r0, r2
    eaae:	9a00      	ldr	r2, [sp, #0]
    eab0:	8951      	ldrh	r1, [r2, #10]
    eab2:	4a34      	ldr	r2, [pc, #208]	; (eb84 <Ftm_Pwm_Ip_InitPair+0x164>)
    eab4:	009b      	lsls	r3, r3, #2
    eab6:	4403      	add	r3, r0
    eab8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    /* Configure Complementary mode for the Pair */
    Ftm_Pwm_Ip_SetDualChnCompCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->ComplementaryModeEn);
    eabc:	9b00      	ldr	r3, [sp, #0]
    eabe:	7819      	ldrb	r1, [r3, #0]
    eac0:	9b00      	ldr	r3, [sp, #0]
    eac2:	789b      	ldrb	r3, [r3, #2]
    eac4:	461a      	mov	r2, r3
    eac6:	9803      	ldr	r0, [sp, #12]
    eac8:	f7ff f821 	bl	db0e <Ftm_Pwm_Ip_SetDualChnCompCmd>

    /* Configure polarity of the PWM signal taking into consideration POL of main channel */
    if (TRUE == UserPairCfg->ComplementaryModeEn)
    eacc:	9b00      	ldr	r3, [sp, #0]
    eace:	789b      	ldrb	r3, [r3, #2]
    ead0:	2b00      	cmp	r3, #0
    ead2:	d02f      	beq.n	eb34 <Ftm_Pwm_Ip_InitPair+0x114>
    {
        /* Complementary mode active. Second channel active state is inverted. */
        if (FTM_PWM_IP_POLARITY_LOW == Ftm_Pwm_Ip_GetChnOutputPolarity(FtmBase, MainChId))
    ead4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ead8:	4619      	mov	r1, r3
    eada:	9803      	ldr	r0, [sp, #12]
    eadc:	f7ff f94c 	bl	dd78 <Ftm_Pwm_Ip_GetChnOutputPolarity>
    eae0:	4603      	mov	r3, r0
    eae2:	2b01      	cmp	r3, #1
    eae4:	d113      	bne.n	eb0e <Ftm_Pwm_Ip_InitPair+0xee>
        {
            /* Main channel polarity is Active Low */
            if (FTM_PWM_IP_MAIN_DUPLICATED == UserPairCfg->PairChPolarity)
    eae6:	9b00      	ldr	r3, [sp, #0]
    eae8:	685b      	ldr	r3, [r3, #4]
    eaea:	2b01      	cmp	r3, #1
    eaec:	d107      	bne.n	eafe <Ftm_Pwm_Ip_InitPair+0xde>
            {
                /* User wants to duplicate main channel active state. Set polarity to Active High. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_HIGH);
    eaee:	f89d 300a 	ldrb.w	r3, [sp, #10]
    eaf2:	2200      	movs	r2, #0
    eaf4:	4619      	mov	r1, r3
    eaf6:	9803      	ldr	r0, [sp, #12]
    eaf8:	f7ff f91c 	bl	dd34 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    eafc:	e01a      	b.n	eb34 <Ftm_Pwm_Ip_InitPair+0x114>
            }
            else
            {
                /* User wants to invert main channel active state. Set polarity to Active Low. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_LOW);
    eafe:	f89d 300a 	ldrb.w	r3, [sp, #10]
    eb02:	2201      	movs	r2, #1
    eb04:	4619      	mov	r1, r3
    eb06:	9803      	ldr	r0, [sp, #12]
    eb08:	f7ff f914 	bl	dd34 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    eb0c:	e012      	b.n	eb34 <Ftm_Pwm_Ip_InitPair+0x114>
            }
        }
        else
        {
            /* Main channel polarity is Active High */
            if (FTM_PWM_IP_MAIN_DUPLICATED == UserPairCfg->PairChPolarity)
    eb0e:	9b00      	ldr	r3, [sp, #0]
    eb10:	685b      	ldr	r3, [r3, #4]
    eb12:	2b01      	cmp	r3, #1
    eb14:	d107      	bne.n	eb26 <Ftm_Pwm_Ip_InitPair+0x106>
            {
                /* User wants to duplicate main channel active state. Set polarity to Active Low. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_LOW);
    eb16:	f89d 300a 	ldrb.w	r3, [sp, #10]
    eb1a:	2201      	movs	r2, #1
    eb1c:	4619      	mov	r1, r3
    eb1e:	9803      	ldr	r0, [sp, #12]
    eb20:	f7ff f908 	bl	dd34 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    eb24:	e006      	b.n	eb34 <Ftm_Pwm_Ip_InitPair+0x114>
            }
            else
            {
                /* User wants to invert main channel active state. Set polarity to Active High. */
                Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, PairChId, FTM_PWM_IP_POLARITY_HIGH);
    eb26:	f89d 300a 	ldrb.w	r3, [sp, #10]
    eb2a:	2200      	movs	r2, #0
    eb2c:	4619      	mov	r1, r3
    eb2e:	9803      	ldr	r0, [sp, #12]
    eb30:	f7ff f900 	bl	dd34 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
            }
        }
    }
#if (defined(FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE) && (FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE == STD_ON))
    /* Enable PWM output */
    Ftm_Pwm_Ip_EnablePwmChannelOutputs(FtmBase, PairChId);
    eb34:	f89d 300a 	ldrb.w	r3, [sp, #10]
    eb38:	4619      	mov	r1, r3
    eb3a:	9803      	ldr	r0, [sp, #12]
    eb3c:	f7fe fd22 	bl	d584 <Ftm_Pwm_Ip_EnablePwmChannelOutputs>
#endif

    /* Configure sync control for channels CV registers */
    Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->PairSyncEn);
    eb40:	9b00      	ldr	r3, [sp, #0]
    eb42:	7819      	ldrb	r1, [r3, #0]
    eb44:	9b00      	ldr	r3, [sp, #0]
    eb46:	7a5b      	ldrb	r3, [r3, #9]
    eb48:	461a      	mov	r2, r3
    eb4a:	9803      	ldr	r0, [sp, #12]
    eb4c:	f7ff f82d 	bl	dbaa <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>
    /* Configure dead time */
    Ftm_Pwm_Ip_SetDualChnDeadtimeCmd(FtmBase, UserPairCfg->PairId, UserPairCfg->DeadtimeEn);
    eb50:	9b00      	ldr	r3, [sp, #0]
    eb52:	7819      	ldrb	r1, [r3, #0]
    eb54:	9b00      	ldr	r3, [sp, #0]
    eb56:	785b      	ldrb	r3, [r3, #1]
    eb58:	461a      	mov	r2, r3
    eb5a:	9803      	ldr	r0, [sp, #12]
    eb5c:	f7fe fffe 	bl	db5c <Ftm_Pwm_Ip_SetDualChnDeadtimeCmd>
    /* Configure the generation of external trigger on the channel (n+1) */
    Ftm_Pwm_Ip_SetChnTriggerCmd(FtmBase, PairChId, UserPairCfg->PairExtTrigEn);
    eb60:	9b00      	ldr	r3, [sp, #0]
    eb62:	7a1a      	ldrb	r2, [r3, #8]
    eb64:	f89d 300a 	ldrb.w	r3, [sp, #10]
    eb68:	4619      	mov	r1, r3
    eb6a:	9803      	ldr	r0, [sp, #12]
    eb6c:	f7ff fd33 	bl	e5d6 <Ftm_Pwm_Ip_SetChnTriggerCmd>
    /* Sync Write buffered registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    eb70:	2101      	movs	r1, #1
    eb72:	9803      	ldr	r0, [sp, #12]
    eb74:	f7fe ff15 	bl	d9a2 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    eb78:	bf00      	nop
    eb7a:	b005      	add	sp, #20
    eb7c:	f85d fb04 	ldr.w	pc, [sp], #4
    eb80:	0001a05c 	.word	0x0001a05c
    eb84:	1fff8e74 	.word	0x1fff8e74

0000eb88 <Ftm_Pwm_Ip_DisableCmpIrq>:
 *                 time-overflow (TOIE, TOF) for the specified channel.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DisableCmpIrq(uint8 Instance,
                                     uint8 Channel)
{
    eb88:	b500      	push	{lr}
    eb8a:	b085      	sub	sp, #20
    eb8c:	4603      	mov	r3, r0
    eb8e:	460a      	mov	r2, r1
    eb90:	f88d 3007 	strb.w	r3, [sp, #7]
    eb94:	4613      	mov	r3, r2
    eb96:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    eb9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    eb9e:	4a0a      	ldr	r2, [pc, #40]	; (ebc8 <Ftm_Pwm_Ip_DisableCmpIrq+0x40>)
    eba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eba4:	9303      	str	r3, [sp, #12]

    Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
#endif

    /* Clear CHIE bit in CnSC register for the given channel to disable match-compare interrupts */
    Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, FALSE);
    eba6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ebaa:	2200      	movs	r2, #0
    ebac:	4619      	mov	r1, r3
    ebae:	9803      	ldr	r0, [sp, #12]
    ebb0:	f7fe fdde 	bl	d770 <Ftm_Pwm_Ip_UpdateChnInt>
    /* Clear CHnF bit interrupt flag */
    Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, Channel);
    ebb4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ebb8:	4619      	mov	r1, r3
    ebba:	9803      	ldr	r0, [sp, #12]
    ebbc:	f7fe fdfb 	bl	d7b6 <Ftm_Pwm_Ip_ClearChnEventFlag>
}
    ebc0:	bf00      	nop
    ebc2:	b005      	add	sp, #20
    ebc4:	f85d fb04 	ldr.w	pc, [sp], #4
    ebc8:	0001a05c 	.word	0x0001a05c

0000ebcc <Ftm_Pwm_Ip_ConfigureSWandHWSync>:

static void Ftm_Pwm_Ip_ConfigureSWandHWSync(uint8 Instance, const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    ebcc:	b500      	push	{lr}
    ebce:	b085      	sub	sp, #20
    ebd0:	4603      	mov	r3, r0
    ebd2:	9100      	str	r1, [sp, #0]
    ebd4:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    ebd8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ebdc:	4a53      	ldr	r2, [pc, #332]	; (ed2c <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x160>)
    ebde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebe2:	9303      	str	r3, [sp, #12]
    switch (SyncCfg->SyncMode)
    ebe4:	9b00      	ldr	r3, [sp, #0]
    ebe6:	681b      	ldr	r3, [r3, #0]
    ebe8:	2b00      	cmp	r3, #0
    ebea:	d002      	beq.n	ebf2 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x26>
    ebec:	2b01      	cmp	r3, #1
    ebee:	d04c      	beq.n	ec8a <Ftm_Pwm_Ip_ConfigureSWandHWSync+0xbe>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, FALSE);
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
            break;

        default:    /* Nothing to do */
            break;
    ebf0:	e097      	b.n	ed22 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x156>
            Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync != FTM_PWM_IP_SYNC_DISABLED));
    ebf2:	9b00      	ldr	r3, [sp, #0]
    ebf4:	699b      	ldr	r3, [r3, #24]
    ebf6:	2b00      	cmp	r3, #0
    ebf8:	bf14      	ite	ne
    ebfa:	2301      	movne	r3, #1
    ebfc:	2300      	moveq	r3, #0
    ebfe:	b2db      	uxtb	r3, r3
    ec00:	4619      	mov	r1, r3
    ec02:	9803      	ldr	r0, [sp, #12]
    ec04:	f7ff f9b1 	bl	df6a <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(FtmBase, FALSE);
    ec08:	2100      	movs	r1, #0
    ec0a:	9803      	ldr	r0, [sp, #12]
    ec0c:	f7ff fa2a 	bl	e064 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(FtmBase, (SyncCfg->InverterSync != FTM_PWM_IP_SYNC_DISABLED));
    ec10:	9b00      	ldr	r3, [sp, #0]
    ec12:	691b      	ldr	r3, [r3, #16]
    ec14:	2b00      	cmp	r3, #0
    ec16:	bf14      	ite	ne
    ec18:	2301      	movne	r3, #1
    ec1a:	2300      	moveq	r3, #0
    ec1c:	b2db      	uxtb	r3, r3
    ec1e:	4619      	mov	r1, r3
    ec20:	9803      	ldr	r0, [sp, #12]
    ec22:	f7ff f9bb 	bl	df9c <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, FALSE);
    ec26:	2100      	movs	r1, #0
    ec28:	9803      	ldr	r0, [sp, #12]
    ec2a:	f7ff fa34 	bl	e096 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(FtmBase, (SyncCfg->OutRegSync != FTM_PWM_IP_SYNC_DISABLED));
    ec2e:	9b00      	ldr	r3, [sp, #0]
    ec30:	695b      	ldr	r3, [r3, #20]
    ec32:	2b00      	cmp	r3, #0
    ec34:	bf14      	ite	ne
    ec36:	2301      	movne	r3, #1
    ec38:	2300      	moveq	r3, #0
    ec3a:	b2db      	uxtb	r3, r3
    ec3c:	4619      	mov	r1, r3
    ec3e:	9803      	ldr	r0, [sp, #12]
    ec40:	f7ff f9c5 	bl	dfce <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, FALSE);
    ec44:	2100      	movs	r1, #0
    ec46:	9803      	ldr	r0, [sp, #12]
    ec48:	f7ff fa25 	bl	e096 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync != FTM_PWM_IP_SYNC_DISABLED));
    ec4c:	9b00      	ldr	r3, [sp, #0]
    ec4e:	69db      	ldr	r3, [r3, #28]
    ec50:	2b00      	cmp	r3, #0
    ec52:	bf14      	ite	ne
    ec54:	2301      	movne	r3, #1
    ec56:	2300      	moveq	r3, #0
    ec58:	b2db      	uxtb	r3, r3
    ec5a:	4619      	mov	r1, r3
    ec5c:	9803      	ldr	r0, [sp, #12]
    ec5e:	f7ff f96b 	bl	df38 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(FtmBase, FALSE);
    ec62:	2100      	movs	r1, #0
    ec64:	9803      	ldr	r0, [sp, #12]
    ec66:	f7ff f9e4 	bl	e032 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
    ec6a:	9b00      	ldr	r3, [sp, #0]
    ec6c:	6a1b      	ldr	r3, [r3, #32]
    ec6e:	2b00      	cmp	r3, #0
    ec70:	bf14      	ite	ne
    ec72:	2301      	movne	r3, #1
    ec74:	2300      	moveq	r3, #0
    ec76:	b2db      	uxtb	r3, r3
    ec78:	4619      	mov	r1, r3
    ec7a:	9803      	ldr	r0, [sp, #12]
    ec7c:	f7ff f943 	bl	df06 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, FALSE);
    ec80:	2100      	movs	r1, #0
    ec82:	9803      	ldr	r0, [sp, #12]
    ec84:	f7ff f9bc 	bl	e000 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>
            break;
    ec88:	e04b      	b.n	ed22 <Ftm_Pwm_Ip_ConfigureSWandHWSync+0x156>
            Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, FALSE);
    ec8a:	2100      	movs	r1, #0
    ec8c:	9803      	ldr	r0, [sp, #12]
    ec8e:	f7ff f96c 	bl	df6a <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync != FTM_PWM_IP_SYNC_DISABLED));
    ec92:	9b00      	ldr	r3, [sp, #0]
    ec94:	699b      	ldr	r3, [r3, #24]
    ec96:	2b00      	cmp	r3, #0
    ec98:	bf14      	ite	ne
    ec9a:	2301      	movne	r3, #1
    ec9c:	2300      	moveq	r3, #0
    ec9e:	b2db      	uxtb	r3, r3
    eca0:	4619      	mov	r1, r3
    eca2:	9803      	ldr	r0, [sp, #12]
    eca4:	f7ff f9de 	bl	e064 <Ftm_Pwm_Ip_SetOutmaskHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd(FtmBase, FALSE);
    eca8:	2100      	movs	r1, #0
    ecaa:	9803      	ldr	r0, [sp, #12]
    ecac:	f7ff f976 	bl	df9c <Ftm_Pwm_Ip_SetInvctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, (SyncCfg->InverterSync != FTM_PWM_IP_SYNC_DISABLED));
    ecb0:	9b00      	ldr	r3, [sp, #0]
    ecb2:	691b      	ldr	r3, [r3, #16]
    ecb4:	2b00      	cmp	r3, #0
    ecb6:	bf14      	ite	ne
    ecb8:	2301      	movne	r3, #1
    ecba:	2300      	moveq	r3, #0
    ecbc:	b2db      	uxtb	r3, r3
    ecbe:	4619      	mov	r1, r3
    ecc0:	9803      	ldr	r0, [sp, #12]
    ecc2:	f7ff f9e8 	bl	e096 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd(FtmBase, FALSE);
    ecc6:	2100      	movs	r1, #0
    ecc8:	9803      	ldr	r0, [sp, #12]
    ecca:	f7ff f980 	bl	dfce <Ftm_Pwm_Ip_SetSwoctrlSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd(FtmBase, (SyncCfg->OutRegSync != FTM_PWM_IP_SYNC_DISABLED));
    ecce:	9b00      	ldr	r3, [sp, #0]
    ecd0:	695b      	ldr	r3, [r3, #20]
    ecd2:	2b00      	cmp	r3, #0
    ecd4:	bf14      	ite	ne
    ecd6:	2301      	movne	r3, #1
    ecd8:	2300      	moveq	r3, #0
    ecda:	b2db      	uxtb	r3, r3
    ecdc:	4619      	mov	r1, r3
    ecde:	9803      	ldr	r0, [sp, #12]
    ece0:	f7ff f9d9 	bl	e096 <Ftm_Pwm_Ip_SetInvctrlHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd(FtmBase, FALSE);
    ece4:	2100      	movs	r1, #0
    ece6:	9803      	ldr	r0, [sp, #12]
    ece8:	f7ff f926 	bl	df38 <Ftm_Pwm_Ip_SetModCntinCvSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync != FTM_PWM_IP_SYNC_DISABLED));
    ecec:	9b00      	ldr	r3, [sp, #0]
    ecee:	69db      	ldr	r3, [r3, #28]
    ecf0:	2b00      	cmp	r3, #0
    ecf2:	bf14      	ite	ne
    ecf4:	2301      	movne	r3, #1
    ecf6:	2300      	moveq	r3, #0
    ecf8:	b2db      	uxtb	r3, r3
    ecfa:	4619      	mov	r1, r3
    ecfc:	9803      	ldr	r0, [sp, #12]
    ecfe:	f7ff f998 	bl	e032 <Ftm_Pwm_Ip_SetModCntinCvHardwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, FALSE);
    ed02:	2100      	movs	r1, #0
    ed04:	9803      	ldr	r0, [sp, #12]
    ed06:	f7ff f8fe 	bl	df06 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>
            Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd(FtmBase, (SyncCfg->CounterSync != FTM_PWM_IP_SYNC_DISABLED));
    ed0a:	9b00      	ldr	r3, [sp, #0]
    ed0c:	6a1b      	ldr	r3, [r3, #32]
    ed0e:	2b00      	cmp	r3, #0
    ed10:	bf14      	ite	ne
    ed12:	2301      	movne	r3, #1
    ed14:	2300      	moveq	r3, #0
    ed16:	b2db      	uxtb	r3, r3
    ed18:	4619      	mov	r1, r3
    ed1a:	9803      	ldr	r0, [sp, #12]
    ed1c:	f7ff f970 	bl	e000 <Ftm_Pwm_Ip_SetCounterHardwareSyncModeCmd>
            break;
    ed20:	bf00      	nop
    }
}
    ed22:	bf00      	nop
    ed24:	b005      	add	sp, #20
    ed26:	f85d fb04 	ldr.w	pc, [sp], #4
    ed2a:	bf00      	nop
    ed2c:	0001a05c 	.word	0x0001a05c

0000ed30 <Ftm_Pwm_Ip_ConfigureSyncType>:


static void Ftm_Pwm_Ip_ConfigureSyncType(uint8 Instance, const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    ed30:	b500      	push	{lr}
    ed32:	b085      	sub	sp, #20
    ed34:	4603      	mov	r3, r0
    ed36:	9100      	str	r1, [sp, #0]
    ed38:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    ed3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ed40:	4a19      	ldr	r2, [pc, #100]	; (eda8 <Ftm_Pwm_Ip_ConfigureSyncType+0x78>)
    ed42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed46:	9303      	str	r3, [sp, #12]

    /* Configure sync for OUTMASK register */
    Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(FtmBase, (SyncCfg->OutMaskSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    ed48:	9b00      	ldr	r3, [sp, #0]
    ed4a:	699b      	ldr	r3, [r3, #24]
    ed4c:	2b00      	cmp	r3, #0
    ed4e:	bf14      	ite	ne
    ed50:	2301      	movne	r3, #1
    ed52:	2300      	moveq	r3, #0
    ed54:	b2db      	uxtb	r3, r3
    ed56:	4619      	mov	r1, r3
    ed58:	9803      	ldr	r0, [sp, #12]
    ed5a:	f7fe fde7 	bl	d92c <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>
    /* Configure sync for INVCTRL register */
    Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd(FtmBase, (SyncCfg->InverterSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    ed5e:	9b00      	ldr	r3, [sp, #0]
    ed60:	691b      	ldr	r3, [r3, #16]
    ed62:	2b00      	cmp	r3, #0
    ed64:	bf14      	ite	ne
    ed66:	2301      	movne	r3, #1
    ed68:	2300      	moveq	r3, #0
    ed6a:	b2db      	uxtb	r3, r3
    ed6c:	4619      	mov	r1, r3
    ed6e:	9803      	ldr	r0, [sp, #12]
    ed70:	f7ff f881 	bl	de76 <Ftm_Pwm_Ip_SetInvctrlPwmSyncModeCmd>
    /* Configure sync for SWOCTRL register */
    Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd(FtmBase, (SyncCfg->OutRegSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    ed74:	9b00      	ldr	r3, [sp, #0]
    ed76:	695b      	ldr	r3, [r3, #20]
    ed78:	2b00      	cmp	r3, #0
    ed7a:	bf14      	ite	ne
    ed7c:	2301      	movne	r3, #1
    ed7e:	2300      	moveq	r3, #0
    ed80:	b2db      	uxtb	r3, r3
    ed82:	4619      	mov	r1, r3
    ed84:	9803      	ldr	r0, [sp, #12]
    ed86:	f7ff f88e 	bl	dea6 <Ftm_Pwm_Ip_SetSwoctrlPwmSyncModeCmd>
    /* Configure sync for MOD, HCR, CNTIN, and CV registers */
    Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd(FtmBase, (SyncCfg->InitCounterSync  == FTM_PWM_IP_SYNC_DISABLED)? FALSE : TRUE);
    ed8a:	9b00      	ldr	r3, [sp, #0]
    ed8c:	69db      	ldr	r3, [r3, #28]
    ed8e:	2b00      	cmp	r3, #0
    ed90:	bf14      	ite	ne
    ed92:	2301      	movne	r3, #1
    ed94:	2300      	moveq	r3, #0
    ed96:	b2db      	uxtb	r3, r3
    ed98:	4619      	mov	r1, r3
    ed9a:	9803      	ldr	r0, [sp, #12]
    ed9c:	f7ff f853 	bl	de46 <Ftm_Pwm_Ip_SetCntinPwmSyncModeCmd>
}
    eda0:	bf00      	nop
    eda2:	b005      	add	sp, #20
    eda4:	f85d fb04 	ldr.w	pc, [sp], #4
    eda8:	0001a05c 	.word	0x0001a05c

0000edac <Ftm_Pwm_Ip_UpdateSync>:
 *
 * Implements : Ftm_Pwm_Ip_UpdateSync_Activity
 *END**************************************************************************/
static Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdateSync(uint8 Instance,
                                                   const Ftm_Pwm_Ip_SyncCfgType * SyncCfg)
{
    edac:	b500      	push	{lr}
    edae:	b087      	sub	sp, #28
    edb0:	4603      	mov	r3, r0
    edb2:	9100      	str	r1, [sp, #0]
    edb4:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    edb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    edbc:	4a4b      	ldr	r2, [pc, #300]	; (eeec <Ftm_Pwm_Ip_UpdateSync+0x140>)
    edbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    edc2:	9304      	str	r3, [sp, #16]
    Ftm_Pwm_Ip_StatusType RetStatus = FTM_PWM_IP_STATUS_SUCCESS;
    edc4:	2300      	movs	r3, #0
    edc6:	9305      	str	r3, [sp, #20]
    boolean HardwareSync = FALSE;
    edc8:	2300      	movs	r3, #0
    edca:	f88d 300f 	strb.w	r3, [sp, #15]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    edce:	f89d 3007 	ldrb.w	r3, [sp, #7]
    edd2:	2b03      	cmp	r3, #3
    edd4:	bf94      	ite	ls
    edd6:	2301      	movls	r3, #1
    edd8:	2300      	movhi	r3, #0
    edda:	b2db      	uxtb	r3, r3
    eddc:	4618      	mov	r0, r3
    edde:	f7f1 fd85 	bl	8ec <DevAssert>
    DevAssert(SyncCfg != NULL_PTR);
    ede2:	9b00      	ldr	r3, [sp, #0]
    ede4:	2b00      	cmp	r3, #0
    ede6:	bf14      	ite	ne
    ede8:	2301      	movne	r3, #1
    edea:	2300      	moveq	r3, #0
    edec:	b2db      	uxtb	r3, r3
    edee:	4618      	mov	r0, r3
    edf0:	f7f1 fd7c 	bl	8ec <DevAssert>
#endif

    HardwareSync = SyncCfg->HwSync0 || SyncCfg->HwSync1 || SyncCfg->HwSync2;
    edf4:	9b00      	ldr	r3, [sp, #0]
    edf6:	791b      	ldrb	r3, [r3, #4]
    edf8:	2b00      	cmp	r3, #0
    edfa:	d107      	bne.n	ee0c <Ftm_Pwm_Ip_UpdateSync+0x60>
    edfc:	9b00      	ldr	r3, [sp, #0]
    edfe:	795b      	ldrb	r3, [r3, #5]
    ee00:	2b00      	cmp	r3, #0
    ee02:	d103      	bne.n	ee0c <Ftm_Pwm_Ip_UpdateSync+0x60>
    ee04:	9b00      	ldr	r3, [sp, #0]
    ee06:	799b      	ldrb	r3, [r3, #6]
    ee08:	2b00      	cmp	r3, #0
    ee0a:	d001      	beq.n	ee10 <Ftm_Pwm_Ip_UpdateSync+0x64>
    ee0c:	2301      	movs	r3, #1
    ee0e:	e000      	b.n	ee12 <Ftm_Pwm_Ip_UpdateSync+0x66>
    ee10:	2300      	movs	r3, #0
    ee12:	f88d 300f 	strb.w	r3, [sp, #15]
    ee16:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ee1a:	f003 0301 	and.w	r3, r3, #1
    ee1e:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Software and hardware triggers are not allowed at the same time */
    if ((SyncCfg->SyncMode == FTM_PWM_IP_SYNC_SWTRIGGER) && (HardwareSync == TRUE))
    ee22:	9b00      	ldr	r3, [sp, #0]
    ee24:	681b      	ldr	r3, [r3, #0]
    ee26:	2b00      	cmp	r3, #0
    ee28:	d105      	bne.n	ee36 <Ftm_Pwm_Ip_UpdateSync+0x8a>
    ee2a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ee2e:	2b00      	cmp	r3, #0
    ee30:	d001      	beq.n	ee36 <Ftm_Pwm_Ip_UpdateSync+0x8a>
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    ee32:	2301      	movs	r3, #1
    ee34:	9305      	str	r3, [sp, #20]
    }
    if (SyncCfg->CounterSync == FTM_PWM_IP_SYNC_ON_CLK)
    ee36:	9b00      	ldr	r3, [sp, #0]
    ee38:	6a1b      	ldr	r3, [r3, #32]
    ee3a:	2b02      	cmp	r3, #2
    ee3c:	d101      	bne.n	ee42 <Ftm_Pwm_Ip_UpdateSync+0x96>
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    ee3e:	2301      	movs	r3, #1
    ee40:	9305      	str	r3, [sp, #20]
    }

    if (RetStatus == FTM_PWM_IP_STATUS_SUCCESS)
    ee42:	9b05      	ldr	r3, [sp, #20]
    ee44:	2b00      	cmp	r3, #0
    ee46:	d14c      	bne.n	eee2 <Ftm_Pwm_Ip_UpdateSync+0x136>
    {
        Ftm_Pwm_Ip_ConfigureSWandHWSync(Instance, SyncCfg);
    ee48:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ee4c:	9900      	ldr	r1, [sp, #0]
    ee4e:	4618      	mov	r0, r3
    ee50:	f7ff febc 	bl	ebcc <Ftm_Pwm_Ip_ConfigureSWandHWSync>
        /* Enhanced PWM sync is used */
        Ftm_Pwm_Ip_SetPwmSyncModeCmd(FtmBase, TRUE);
    ee54:	2101      	movs	r1, #1
    ee56:	9804      	ldr	r0, [sp, #16]
    ee58:	f7ff f83d 	bl	ded6 <Ftm_Pwm_Ip_SetPwmSyncModeCmd>
        /* Configure trigger source for sync */
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 0U, SyncCfg->HwSync0);
    ee5c:	9b00      	ldr	r3, [sp, #0]
    ee5e:	791b      	ldrb	r3, [r3, #4]
    ee60:	461a      	mov	r2, r3
    ee62:	2100      	movs	r1, #0
    ee64:	9804      	ldr	r0, [sp, #16]
    ee66:	f7fe fd77 	bl	d958 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 1U, SyncCfg->HwSync1);
    ee6a:	9b00      	ldr	r3, [sp, #0]
    ee6c:	795b      	ldrb	r3, [r3, #5]
    ee6e:	461a      	mov	r2, r3
    ee70:	2101      	movs	r1, #1
    ee72:	9804      	ldr	r0, [sp, #16]
    ee74:	f7fe fd70 	bl	d958 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc(FtmBase, 2U, SyncCfg->HwSync2);
    ee78:	9b00      	ldr	r3, [sp, #0]
    ee7a:	799b      	ldrb	r3, [r3, #6]
    ee7c:	461a      	mov	r2, r3
    ee7e:	2102      	movs	r1, #2
    ee80:	9804      	ldr	r0, [sp, #16]
    ee82:	f7fe fd69 	bl	d958 <Ftm_Pwm_Ip_SetHardwareSyncTriggerSrc>
        /* Configure if FTM clears TRIGn (n=0,1,2) when the hardware trigger n is detected. */
        Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd(FtmBase, SyncCfg->HwTriggerAutoClear);
    ee86:	9b00      	ldr	r3, [sp, #0]
    ee88:	79db      	ldrb	r3, [r3, #7]
    ee8a:	4619      	mov	r1, r3
    ee8c:	9804      	ldr	r0, [sp, #16]
    ee8e:	f7fe ffc2 	bl	de16 <Ftm_Pwm_Ip_SetHwTriggerSyncModeCmd>

        /* Configure loading points */
        Ftm_Pwm_Ip_SetMaxLoadingCmd(FtmBase, SyncCfg->MaxLoadPoint);
    ee92:	9b00      	ldr	r3, [sp, #0]
    ee94:	7a1b      	ldrb	r3, [r3, #8]
    ee96:	4619      	mov	r1, r3
    ee98:	9804      	ldr	r0, [sp, #16]
    ee9a:	f7fe fd31 	bl	d900 <Ftm_Pwm_Ip_SetMaxLoadingCmd>
        Ftm_Pwm_Ip_SetMinLoadingCmd(FtmBase, SyncCfg->MinLoadPoint);
    ee9e:	9b00      	ldr	r3, [sp, #0]
    eea0:	7a5b      	ldrb	r3, [r3, #9]
    eea2:	4619      	mov	r1, r3
    eea4:	9804      	ldr	r0, [sp, #16]
    eea6:	f7fe fd15 	bl	d8d4 <Ftm_Pwm_Ip_SetMinLoadingCmd>

#if (defined(FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD) && (FTM_PWM_IP_HAS_HALF_CYCLE_RELOAD == STD_ON))
        if(TRUE == SyncCfg->HalfCycleLoadPoint)
    eeaa:	9b00      	ldr	r3, [sp, #0]
    eeac:	7a9b      	ldrb	r3, [r3, #10]
    eeae:	2b00      	cmp	r3, #0
    eeb0:	d005      	beq.n	eebe <Ftm_Pwm_Ip_UpdateSync+0x112>
        {
            Ftm_Pwm_Ip_SetHalfCycleValue(FtmBase, SyncCfg->HalfCycleLoadPointValue);
    eeb2:	9b00      	ldr	r3, [sp, #0]
    eeb4:	899b      	ldrh	r3, [r3, #12]
    eeb6:	4619      	mov	r1, r3
    eeb8:	9804      	ldr	r0, [sp, #16]
    eeba:	f7ff f9c1 	bl	e240 <Ftm_Pwm_Ip_SetHalfCycleValue>
        }
        Ftm_Pwm_Ip_SetHalfCycleCmd(FtmBase, SyncCfg->HalfCycleLoadPoint);
    eebe:	9b00      	ldr	r3, [sp, #0]
    eec0:	7a9b      	ldrb	r3, [r3, #10]
    eec2:	4619      	mov	r1, r3
    eec4:	9804      	ldr	r0, [sp, #16]
    eec6:	f7ff f99e 	bl	e206 <Ftm_Pwm_Ip_SetHalfCycleCmd>
#endif

#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
        /* Sets the frequency of reload points */
        Ftm_Pwm_Ip_SetLoadFreq(FtmBase, SyncCfg->LoadPointFreq);
    eeca:	9b00      	ldr	r3, [sp, #0]
    eecc:	7b9b      	ldrb	r3, [r3, #14]
    eece:	4619      	mov	r1, r3
    eed0:	9804      	ldr	r0, [sp, #16]
    eed2:	f7fe ff66 	bl	dda2 <Ftm_Pwm_Ip_SetLoadFreq>
#endif        
        
        Ftm_Pwm_Ip_ConfigureSyncType(Instance, SyncCfg);
    eed6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    eeda:	9900      	ldr	r1, [sp, #0]
    eedc:	4618      	mov	r0, r3
    eede:	f7ff ff27 	bl	ed30 <Ftm_Pwm_Ip_ConfigureSyncType>
    }

    return RetStatus;
    eee2:	9b05      	ldr	r3, [sp, #20]
}
    eee4:	4618      	mov	r0, r3
    eee6:	b007      	add	sp, #28
    eee8:	f85d fb04 	ldr.w	pc, [sp], #4
    eeec:	0001a05c 	.word	0x0001a05c

0000eef0 <Ftm_Pwm_Ip_ResetAndFirstConfigure>:
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
#endif /* (STD_ON == FTM_PWM_IP_USER_ACCESS_ALLOWED_AVAILABLE) */


static void Ftm_Pwm_Ip_ResetAndFirstConfigure(uint8 Instance, const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    eef0:	b500      	push	{lr}
    eef2:	b085      	sub	sp, #20
    eef4:	4603      	mov	r3, r0
    eef6:	9100      	str	r1, [sp, #0]
    eef8:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    eefc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ef00:	4a1f      	ldr	r2, [pc, #124]	; (ef80 <Ftm_Pwm_Ip_ResetAndFirstConfigure+0x90>)
    ef02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef06:	9303      	str	r3, [sp, #12]

    Ftm_Pwm_Ip_Reset(FtmBase);
    ef08:	9803      	ldr	r0, [sp, #12]
    ef0a:	f7ff faef 	bl	e4ec <Ftm_Pwm_Ip_Reset>
    /* Disable counter clock */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
    ef0e:	2100      	movs	r1, #0
    ef10:	9803      	ldr	r0, [sp, #12]
    ef12:	f7fe fae0 	bl	d4d6 <Ftm_Pwm_Ip_SetClockSource>
    /* Clear the overflow flag */
    Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
    ef16:	9803      	ldr	r0, [sp, #12]
    ef18:	f7fe fb29 	bl	d56e <Ftm_Pwm_Ip_ClearTimerOverflow>
    /* Set Counter mode */
    Ftm_Pwm_Ip_SetCpwms(FtmBase, (UserInstCfg->CntMode == FTM_PWM_IP_EDGE_ALIGNED)? FALSE : TRUE);
    ef1c:	9b00      	ldr	r3, [sp, #0]
    ef1e:	68db      	ldr	r3, [r3, #12]
    ef20:	2b00      	cmp	r3, #0
    ef22:	bf14      	ite	ne
    ef24:	2301      	movne	r3, #1
    ef26:	2300      	moveq	r3, #0
    ef28:	b2db      	uxtb	r3, r3
    ef2a:	4619      	mov	r1, r3
    ef2c:	9803      	ldr	r0, [sp, #12]
    ef2e:	f7fe fae3 	bl	d4f8 <Ftm_Pwm_Ip_SetCpwms>
    /* Disable FTM mode */
    Ftm_Pwm_Ip_Enable(FtmBase, FALSE);
    ef32:	2100      	movs	r1, #0
    ef34:	9803      	ldr	r0, [sp, #12]
    ef36:	f7fe fca1 	bl	d87c <Ftm_Pwm_Ip_Enable>
    /* Configure debug mode */
    Ftm_Pwm_Ip_SetBdmMode(FtmBase, UserInstCfg->DebugMode);
    ef3a:	9b00      	ldr	r3, [sp, #0]
    ef3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ef3e:	4619      	mov	r1, r3
    ef40:	9803      	ldr	r0, [sp, #12]
    ef42:	f7fe ff43 	bl	ddcc <Ftm_Pwm_Ip_SetBdmMode>
    /* Configure Deadtime insertion */
    Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, (uint8)(UserInstCfg->DeadTimeValue & FTM_DEADTIME_DTVAL_MASK));
    ef46:	9b00      	ldr	r3, [sp, #0]
    ef48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    ef4a:	b2db      	uxtb	r3, r3
    ef4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ef50:	b2db      	uxtb	r3, r3
    ef52:	4619      	mov	r1, r3
    ef54:	9803      	ldr	r0, [sp, #12]
    ef56:	f7fe fe76 	bl	dc46 <Ftm_Pwm_Ip_SetDeadtimeCount>
    Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, (uint8)(UserInstCfg->DeadTimeValue >> FTM_DEADTIME_DTVAL_WIDTH));
    ef5a:	9b00      	ldr	r3, [sp, #0]
    ef5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    ef5e:	099b      	lsrs	r3, r3, #6
    ef60:	b29b      	uxth	r3, r3
    ef62:	b2db      	uxtb	r3, r3
    ef64:	4619      	mov	r1, r3
    ef66:	9803      	ldr	r0, [sp, #12]
    ef68:	f7fe fe9e 	bl	dca8 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    Ftm_Pwm_Ip_SetDeadtimePrescaler(FtmBase, UserInstCfg->DeadTimePs);
    ef6c:	9b00      	ldr	r3, [sp, #0]
    ef6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    ef70:	4619      	mov	r1, r3
    ef72:	9803      	ldr	r0, [sp, #12]
    ef74:	f7fe fe7a 	bl	dc6c <Ftm_Pwm_Ip_SetDeadtimePrescaler>
}
    ef78:	bf00      	nop
    ef7a:	b005      	add	sp, #20
    ef7c:	f85d fb04 	ldr.w	pc, [sp], #4
    ef80:	0001a05c 	.word	0x0001a05c

0000ef84 <Ftm_Pwm_Ip_InitInstance>:
 * Description   : Configures the FTM Instance in PWM mode and all general registers.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitInstance(uint8 Instance,
                                    const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    ef84:	b500      	push	{lr}
    ef86:	b085      	sub	sp, #20
    ef88:	4603      	mov	r3, r0
    ef8a:	9100      	str	r1, [sp, #0]
    ef8c:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    ef90:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ef94:	4a48      	ldr	r2, [pc, #288]	; (f0b8 <Ftm_Pwm_Ip_InitInstance+0x134>)
    ef96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef9a:	9303      	str	r3, [sp, #12]

#if (defined(FTM_PWM_IP_SIM_AVAILABLE) && (FTM_PWM_IP_SIM_AVAILABLE == STD_ON))
    Ftm_Pwm_Ip_SimType * SimBase  = Ftm_Pwm_Ip_aSimBase[0U];
    ef9c:	4b47      	ldr	r3, [pc, #284]	; (f0bc <Ftm_Pwm_Ip_InitInstance+0x138>)
    ef9e:	9302      	str	r3, [sp, #8]
#endif

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    efa0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    efa4:	2b03      	cmp	r3, #3
    efa6:	bf94      	ite	ls
    efa8:	2301      	movls	r3, #1
    efaa:	2300      	movhi	r3, #0
    efac:	b2db      	uxtb	r3, r3
    efae:	4618      	mov	r0, r3
    efb0:	f7f1 fc9c 	bl	8ec <DevAssert>
    DevAssert(NULL_PTR != UserInstCfg);
    efb4:	9b00      	ldr	r3, [sp, #0]
    efb6:	2b00      	cmp	r3, #0
    efb8:	bf14      	ite	ne
    efba:	2301      	movne	r3, #1
    efbc:	2300      	moveq	r3, #0
    efbe:	b2db      	uxtb	r3, r3
    efc0:	4618      	mov	r0, r3
    efc2:	f7f1 fc93 	bl	8ec <DevAssert>
    /* Maximum value for Deadtime is 1023 including the extension */
    DevAssert((uint16)0x3FF >= UserInstCfg->DeadTimeValue);
    efc6:	9b00      	ldr	r3, [sp, #0]
    efc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
    efca:	f240 32ff 	movw	r2, #1023	; 0x3ff
    efce:	4293      	cmp	r3, r2
    efd0:	bf94      	ite	ls
    efd2:	2301      	movls	r3, #1
    efd4:	2300      	movhi	r3, #0
    efd6:	b2db      	uxtb	r3, r3
    efd8:	4618      	mov	r0, r3
    efda:	f7f1 fc87 	bl	8ec <DevAssert>
#ifdef MCAL_ENABLE_USER_MODE_SUPPORT
    /* The FTM channel output state is retained when the channel is in output mode.*/
    OsIf_Trusted_Call2params(Ftm_Pwm_Ip_SetSimOutputBufferEn, SimBase, Instance);
#else   
    /* The FTM channel output state is retained when the channel is in output mode.*/
    Ftm_Pwm_Ip_SetSimOutputBufferEn(SimBase, Instance);
    efde:	f89d 3007 	ldrb.w	r3, [sp, #7]
    efe2:	4619      	mov	r1, r3
    efe4:	9802      	ldr	r0, [sp, #8]
    efe6:	f7ff fc45 	bl	e874 <Ftm_Pwm_Ip_SetSimOutputBufferEn>
#endif
#endif

    Ftm_Pwm_Ip_ResetAndFirstConfigure(Instance, UserInstCfg);
    efea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    efee:	9900      	ldr	r1, [sp, #0]
    eff0:	4618      	mov	r0, r3
    eff2:	f7ff ff7d 	bl	eef0 <Ftm_Pwm_Ip_ResetAndFirstConfigure>

    /* Configure the synchronization and reload points */
    (void)Ftm_Pwm_Ip_UpdateSync(Instance, UserInstCfg->SyncCfg);
    eff6:	9b00      	ldr	r3, [sp, #0]
    eff8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    effa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    effe:	4611      	mov	r1, r2
    f000:	4618      	mov	r0, r3
    f002:	f7ff fed3 	bl	edac <Ftm_Pwm_Ip_UpdateSync>

    /* Configure PWM period */
    Ftm_Pwm_Ip_SetCounterInitVal(FtmBase, 0x00U);
    f006:	2100      	movs	r1, #0
    f008:	9803      	ldr	r0, [sp, #12]
    f00a:	f7fe fc26 	bl	d85a <Ftm_Pwm_Ip_SetCounterInitVal>

    Ftm_Pwm_Ip_aPeriod[Instance] = UserInstCfg->PwmPeriod;
    f00e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f012:	9a00      	ldr	r2, [sp, #0]
    f014:	8e91      	ldrh	r1, [r2, #52]	; 0x34
    f016:	4a2a      	ldr	r2, [pc, #168]	; (f0c0 <Ftm_Pwm_Ip_InitInstance+0x13c>)
    f018:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    Ftm_Pwm_Ip_aClockSource[Instance] = UserInstCfg->ClkSrc;
    f01c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f020:	9a00      	ldr	r2, [sp, #0]
    f022:	6812      	ldr	r2, [r2, #0]
    f024:	4927      	ldr	r1, [pc, #156]	; (f0c4 <Ftm_Pwm_Ip_InitInstance+0x140>)
    f026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    Ftm_Pwm_Ip_aClockPrescaler[Instance] = UserInstCfg->ClkPs;
    f02a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f02e:	9a00      	ldr	r2, [sp, #0]
    f030:	6852      	ldr	r2, [r2, #4]
    f032:	4925      	ldr	r1, [pc, #148]	; (f0c8 <Ftm_Pwm_Ip_InitInstance+0x144>)
    f034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    Ftm_Pwm_Ip_aAlternateClockPrescaler[Instance] = UserInstCfg->AlternateClkPs;
    f038:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f03c:	9a00      	ldr	r2, [sp, #0]
    f03e:	6892      	ldr	r2, [r2, #8]
    f040:	4922      	ldr	r1, [pc, #136]	; (f0cc <Ftm_Pwm_Ip_InitInstance+0x148>)
    f042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if (TRUE == UserInstCfg->OverflowIrqEn)
    f046:	9b00      	ldr	r3, [sp, #0]
    f048:	7c1b      	ldrb	r3, [r3, #16]
    f04a:	2b00      	cmp	r3, #0
    f04c:	d00e      	beq.n	f06c <Ftm_Pwm_Ip_InitInstance+0xe8>
    {
        Ftm_Pwm_Ip_pOverflowIrqCallback[Instance].FunctionCallback = UserInstCfg->OverflowCb.FunctionCallback;
    f04e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f052:	9a00      	ldr	r2, [sp, #0]
    f054:	6952      	ldr	r2, [r2, #20]
    f056:	491e      	ldr	r1, [pc, #120]	; (f0d0 <Ftm_Pwm_Ip_InitInstance+0x14c>)
    f058:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        Ftm_Pwm_Ip_pOverflowIrqCallback[Instance].CbParam = UserInstCfg->OverflowCb.CbParam;
    f05c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f060:	9a00      	ldr	r2, [sp, #0]
    f062:	6992      	ldr	r2, [r2, #24]
    f064:	491a      	ldr	r1, [pc, #104]	; (f0d0 <Ftm_Pwm_Ip_InitInstance+0x14c>)
    f066:	00db      	lsls	r3, r3, #3
    f068:	440b      	add	r3, r1
    f06a:	605a      	str	r2, [r3, #4]
        Ftm_Pwm_Ip_pReloadIrqCallback[Instance].FunctionCallback = UserInstCfg->ReloadCb.FunctionCallback;
        Ftm_Pwm_Ip_pReloadIrqCallback[Instance].CbParam = UserInstCfg->ReloadCb.CbParam;
    }
#endif    

    if (FTM_PWM_IP_CENTER_ALIGNED == UserInstCfg->CntMode)
    f06c:	9b00      	ldr	r3, [sp, #0]
    f06e:	68db      	ldr	r3, [r3, #12]
    f070:	2b01      	cmp	r3, #1
    f072:	d108      	bne.n	f086 <Ftm_Pwm_Ip_InitInstance+0x102>
    {
        /* For Center Aligned mode MOD register should be divided by 2. Period is 2 * (MOD − CNTIN) */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(UserInstCfg->PwmPeriod >> 1U));
    f074:	9b00      	ldr	r3, [sp, #0]
    f076:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    f078:	085b      	lsrs	r3, r3, #1
    f07a:	b29b      	uxth	r3, r3
    f07c:	4619      	mov	r1, r3
    f07e:	9803      	ldr	r0, [sp, #12]
    f080:	f7fe faa3 	bl	d5ca <Ftm_Pwm_Ip_SetMod>
    f084:	e007      	b.n	f096 <Ftm_Pwm_Ip_InitInstance+0x112>
    }
    else
    {
        /* For Edge Aligned mode period is determined by: MOD-CNTIN+1 */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(UserInstCfg->PwmPeriod - 1U));
    f086:	9b00      	ldr	r3, [sp, #0]
    f088:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    f08a:	3b01      	subs	r3, #1
    f08c:	b29b      	uxth	r3, r3
    f08e:	4619      	mov	r1, r3
    f090:	9803      	ldr	r0, [sp, #12]
    f092:	f7fe fa9a 	bl	d5ca <Ftm_Pwm_Ip_SetMod>
    /* Configure PWM period dither */
    Ftm_Pwm_Ip_SetModFracVal(FtmBase, UserInstCfg->PwmPeriodDither);
#endif

    /* Configure Initialization feature */
    Ftm_Pwm_Ip_SetInitTriggerCmd(FtmBase, UserInstCfg->InitTriggerEn);
    f096:	9b00      	ldr	r3, [sp, #0]
    f098:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    f09c:	4619      	mov	r1, r3
    f09e:	9803      	ldr	r0, [sp, #12]
    f0a0:	f7fe fe16 	bl	dcd0 <Ftm_Pwm_Ip_SetInitTriggerCmd>
#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
    Ftm_Pwm_Ip_SetInitTriggerMode(FtmBase, UserInstCfg->InitTrigMode);
    f0a4:	9b00      	ldr	r3, [sp, #0]
    f0a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    f0a8:	4619      	mov	r1, r3
    f0aa:	9803      	ldr	r0, [sp, #12]
    f0ac:	f7fe fea0 	bl	ddf0 <Ftm_Pwm_Ip_SetInitTriggerMode>
#endif
}
    f0b0:	bf00      	nop
    f0b2:	b005      	add	sp, #20
    f0b4:	f85d fb04 	ldr.w	pc, [sp], #4
    f0b8:	0001a05c 	.word	0x0001a05c
    f0bc:	40048000 	.word	0x40048000
    f0c0:	1fff8e2c 	.word	0x1fff8e2c
    f0c4:	1fff9124 	.word	0x1fff9124
    f0c8:	1fff9134 	.word	0x1fff9134
    f0cc:	1fff9144 	.word	0x1fff9144
    f0d0:	1fff8fd4 	.word	0x1fff8fd4

0000f0d4 <Ftm_Pwm_Ip_InitInstanceStart>:
 * Description   : Configures the FTM clock and pre-scaler, enable FTM mode
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitInstanceStart(uint8 Instance,
                                         const Ftm_Pwm_Ip_InstanceCfgType * UserInstCfg)
{
    f0d4:	b500      	push	{lr}
    f0d6:	b085      	sub	sp, #20
    f0d8:	4603      	mov	r3, r0
    f0da:	9100      	str	r1, [sp, #0]
    f0dc:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    f0e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f0e4:	4a23      	ldr	r2, [pc, #140]	; (f174 <Ftm_Pwm_Ip_InitInstanceStart+0xa0>)
    f0e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0ea:	9303      	str	r3, [sp, #12]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    f0ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f0f0:	2b03      	cmp	r3, #3
    f0f2:	bf94      	ite	ls
    f0f4:	2301      	movls	r3, #1
    f0f6:	2300      	movhi	r3, #0
    f0f8:	b2db      	uxtb	r3, r3
    f0fa:	4618      	mov	r0, r3
    f0fc:	f7f1 fbf6 	bl	8ec <DevAssert>
    DevAssert(NULL_PTR != UserInstCfg);
    f100:	9b00      	ldr	r3, [sp, #0]
    f102:	2b00      	cmp	r3, #0
    f104:	bf14      	ite	ne
    f106:	2301      	movne	r3, #1
    f108:	2300      	moveq	r3, #0
    f10a:	b2db      	uxtb	r3, r3
    f10c:	4618      	mov	r0, r3
    f10e:	f7f1 fbed 	bl	8ec <DevAssert>
#endif

#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    /* Set Fault Input Filter Value */  
    Ftm_Pwm_Ip_SetFaultFilterValue(FtmBase, UserInstCfg->FaultInFilter);
    f112:	9b00      	ldr	r3, [sp, #0]
    f114:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    f118:	4619      	mov	r1, r3
    f11a:	9803      	ldr	r0, [sp, #12]
    f11c:	f7ff fb16 	bl	e74c <Ftm_Pwm_Ip_SetFaultFilterValue>
    /* Set Fault output state */  
    Ftm_Pwm_Ip_SetFaultOutputState(FtmBase, UserInstCfg->FaultOutState);
    f120:	9b00      	ldr	r3, [sp, #0]
    f122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    f124:	4619      	mov	r1, r3
    f126:	9803      	ldr	r0, [sp, #12]
    f128:	f7ff fb24 	bl	e774 <Ftm_Pwm_Ip_SetFaultOutputState>
    /* Defines the FTM fault control mode */
    Ftm_Pwm_Ip_SetFaultControlMode(FtmBase, UserInstCfg->FaultCtrMode);
    f12c:	9b00      	ldr	r3, [sp, #0]
    f12e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    f130:	4619      	mov	r1, r3
    f132:	9803      	ldr	r0, [sp, #12]
    f134:	f7ff fa8d 	bl	e652 <Ftm_Pwm_Ip_SetFaultControlMode>
#endif

    /* Enable FTM mode */
    Ftm_Pwm_Ip_Enable(FtmBase, TRUE);
    f138:	2101      	movs	r1, #1
    f13a:	9803      	ldr	r0, [sp, #12]
    f13c:	f7fe fb9e 	bl	d87c <Ftm_Pwm_Ip_Enable>

    Ftm_Pwm_Ip_SetPwmSyncMode(FtmBase, TRUE);
    f140:	2101      	movs	r1, #1
    f142:	9803      	ldr	r0, [sp, #12]
    f144:	f7fe fbb0 	bl	d8a8 <Ftm_Pwm_Ip_SetPwmSyncMode>

    /* Configure the clock prescaler */
    Ftm_Pwm_Ip_SetClockPs(FtmBase, UserInstCfg->ClkPs);
    f148:	9b00      	ldr	r3, [sp, #0]
    f14a:	685b      	ldr	r3, [r3, #4]
    f14c:	4619      	mov	r1, r3
    f14e:	9803      	ldr	r0, [sp, #12]
    f150:	f7fe f9a6 	bl	d4a0 <Ftm_Pwm_Ip_SetClockPs>
    /* Configure the clock source */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, UserInstCfg->ClkSrc);
    f154:	9b00      	ldr	r3, [sp, #0]
    f156:	681b      	ldr	r3, [r3, #0]
    f158:	4619      	mov	r1, r3
    f15a:	9803      	ldr	r0, [sp, #12]
    f15c:	f7fe f9bb 	bl	d4d6 <Ftm_Pwm_Ip_SetClockSource>
    /* Confirm the instance is active */
    Ftm_Pwm_Ip_aInstanceState[Instance] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    f160:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f164:	4a04      	ldr	r2, [pc, #16]	; (f178 <Ftm_Pwm_Ip_InitInstanceStart+0xa4>)
    f166:	2101      	movs	r1, #1
    f168:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    f16c:	bf00      	nop
    f16e:	b005      	add	sp, #20
    f170:	f85d fb04 	ldr.w	pc, [sp], #4
    f174:	0001a05c 	.word	0x0001a05c
    f178:	1fff8ff4 	.word	0x1fff8ff4

0000f17c <Ftm_Pwm_Ip_ConfigurePairedChannel>:

static void Ftm_Pwm_Ip_ConfigurePairedChannel(uint8 Instance, const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    f17c:	b500      	push	{lr}
    f17e:	b085      	sub	sp, #20
    f180:	4603      	mov	r3, r0
    f182:	9100      	str	r1, [sp, #0]
    f184:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    f188:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f18c:	4a37      	ldr	r2, [pc, #220]	; (f26c <Ftm_Pwm_Ip_ConfigurePairedChannel+0xf0>)
    f18e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f192:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = 0U;
    f194:	2300      	movs	r3, #0
    f196:	f88d 300b 	strb.w	r3, [sp, #11]
    uint8 ChPairId = 0U;
    f19a:	2300      	movs	r3, #0
    f19c:	f88d 300a 	strb.w	r3, [sp, #10]
    
    /* Configure the PWM channel */
    ChannelId = UserChCfg->ChannelId;
    f1a0:	9b00      	ldr	r3, [sp, #0]
    f1a2:	781b      	ldrb	r3, [r3, #0]
    f1a4:	f88d 300b 	strb.w	r3, [sp, #11]
    ChPairId =  (uint8)(ChannelId >> 1U);
    f1a8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f1ac:	085b      	lsrs	r3, r3, #1
    f1ae:	f88d 300a 	strb.w	r3, [sp, #10]
    /* Enable sync control for channels*/
    Ftm_Pwm_Ip_SetDualChnPwmSyncCmd(FtmBase, ChPairId, TRUE);
    f1b2:	f89d 300a 	ldrb.w	r3, [sp, #10]
    f1b6:	2201      	movs	r2, #1
    f1b8:	4619      	mov	r1, r3
    f1ba:	9803      	ldr	r0, [sp, #12]
    f1bc:	f7fe fcf5 	bl	dbaa <Ftm_Pwm_Ip_SetDualChnPwmSyncCmd>
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    /* Enables the fault control in pair of channels */
    Ftm_Pwm_Ip_SetDualChFaultCtr(FtmBase, ChPairId, TRUE);
    f1c0:	f89d 300a 	ldrb.w	r3, [sp, #10]
    f1c4:	2201      	movs	r2, #1
    f1c6:	4619      	mov	r1, r3
    f1c8:	9803      	ldr	r0, [sp, #12]
    f1ca:	f7ff fa77 	bl	e6bc <Ftm_Pwm_Ip_SetDualChFaultCtr>
#endif
    /* Configure Paired channel for combined/mCombined modes */
    if ((FTM_PWM_IP_MODE_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    f1ce:	9b00      	ldr	r3, [sp, #0]
    f1d0:	685b      	ldr	r3, [r3, #4]
    f1d2:	2b22      	cmp	r3, #34	; 0x22
    f1d4:	d003      	beq.n	f1de <Ftm_Pwm_Ip_ConfigurePairedChannel+0x62>
        (FTM_PWM_IP_MODE_COMBINE_LOW == UserChCfg->ChannelMode))
    f1d6:	9b00      	ldr	r3, [sp, #0]
    f1d8:	685b      	ldr	r3, [r3, #4]
    if ((FTM_PWM_IP_MODE_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    f1da:	2b21      	cmp	r3, #33	; 0x21
    f1dc:	d113      	bne.n	f206 <Ftm_Pwm_Ip_ConfigurePairedChannel+0x8a>
    {
        /* Configure ELSA/ELSB for an odd channel*/
        Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->ChannelMode);
    f1de:	f89d 300a 	ldrb.w	r3, [sp, #10]
    f1e2:	005b      	lsls	r3, r3, #1
    f1e4:	b2db      	uxtb	r3, r3
    f1e6:	3301      	adds	r3, #1
    f1e8:	b2d9      	uxtb	r1, r3
    f1ea:	9b00      	ldr	r3, [sp, #0]
    f1ec:	685b      	ldr	r3, [r3, #4]
    f1ee:	461a      	mov	r2, r3
    f1f0:	9803      	ldr	r0, [sp, #12]
    f1f2:	f7fe fa25 	bl	d640 <Ftm_Pwm_Ip_SetChnEdgeLevel>
        /* Enable State of channel pair output combine mode */
        Ftm_Pwm_Ip_SetDualChnCombineCmd(FtmBase, ChPairId, TRUE);
    f1f6:	f89d 300a 	ldrb.w	r3, [sp, #10]
    f1fa:	2201      	movs	r2, #1
    f1fc:	4619      	mov	r1, r3
    f1fe:	9803      	ldr	r0, [sp, #12]
    f200:	f7fe fc48 	bl	da94 <Ftm_Pwm_Ip_SetDualChnCombineCmd>
    f204:	e021      	b.n	f24a <Ftm_Pwm_Ip_ConfigurePairedChannel+0xce>
    }
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
    else if ((FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    f206:	9b00      	ldr	r3, [sp, #0]
    f208:	685b      	ldr	r3, [r3, #4]
    f20a:	2b62      	cmp	r3, #98	; 0x62
    f20c:	d003      	beq.n	f216 <Ftm_Pwm_Ip_ConfigurePairedChannel+0x9a>
             (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW == UserChCfg->ChannelMode))
    f20e:	9b00      	ldr	r3, [sp, #0]
    f210:	685b      	ldr	r3, [r3, #4]
    else if ((FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    f212:	2b61      	cmp	r3, #97	; 0x61
    f214:	d119      	bne.n	f24a <Ftm_Pwm_Ip_ConfigurePairedChannel+0xce>
    {
        /* Configure ELSA/ELSB for an odd channel*/
        Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->ChannelMode);
    f216:	f89d 300a 	ldrb.w	r3, [sp, #10]
    f21a:	005b      	lsls	r3, r3, #1
    f21c:	b2db      	uxtb	r3, r3
    f21e:	3301      	adds	r3, #1
    f220:	b2d9      	uxtb	r1, r3
    f222:	9b00      	ldr	r3, [sp, #0]
    f224:	685b      	ldr	r3, [r3, #4]
    f226:	461a      	mov	r2, r3
    f228:	9803      	ldr	r0, [sp, #12]
    f22a:	f7fe fa09 	bl	d640 <Ftm_Pwm_Ip_SetChnEdgeLevel>
        /* Enable State of channel pair output combine mode */
        Ftm_Pwm_Ip_SetDualChnCombineCmd(FtmBase, ChPairId, TRUE);
    f22e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    f232:	2201      	movs	r2, #1
    f234:	4619      	mov	r1, r3
    f236:	9803      	ldr	r0, [sp, #12]
    f238:	f7fe fc2c 	bl	da94 <Ftm_Pwm_Ip_SetDualChnCombineCmd>
        /* Enables the FTM peripheral timer channel modified combine mode.*/
        Ftm_Pwm_Ip_SetDualChnMCombineCmd(FtmBase, ChPairId, TRUE);
    f23c:	f89d 300a 	ldrb.w	r3, [sp, #10]
    f240:	2201      	movs	r2, #1
    f242:	4619      	mov	r1, r3
    f244:	9803      	ldr	r0, [sp, #12]
    f246:	f7fe fcd7 	bl	dbf8 <Ftm_Pwm_Ip_SetDualChnMCombineCmd>
    {
        /* Do Nothing */
    }

    /* Configure paired channel and pair */
    if (NULL_PTR != UserChCfg->PairCfg)
    f24a:	9b00      	ldr	r3, [sp, #0]
    f24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f24e:	2b00      	cmp	r3, #0
    f250:	d007      	beq.n	f262 <Ftm_Pwm_Ip_ConfigurePairedChannel+0xe6>
    {
        Ftm_Pwm_Ip_InitPair(Instance, UserChCfg->PairCfg);
    f252:	9b00      	ldr	r3, [sp, #0]
    f254:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    f256:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f25a:	4611      	mov	r1, r2
    f25c:	4618      	mov	r0, r3
    f25e:	f7ff fbdf 	bl	ea20 <Ftm_Pwm_Ip_InitPair>
        {
            Ftm_Pwm_Ip_SetChnMatchFracVal(FtmBase, (uint8)((ChPairId * 2U) + 1U), UserChCfg->DutyCycleDither);
        }
#endif
    }
}
    f262:	bf00      	nop
    f264:	b005      	add	sp, #20
    f266:	f85d fb04 	ldr.w	pc, [sp], #4
    f26a:	bf00      	nop
    f26c:	0001a05c 	.word	0x0001a05c

0000f270 <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl>:

static void Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl(uint8 Instance, const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    f270:	b500      	push	{lr}
    f272:	b085      	sub	sp, #20
    f274:	4603      	mov	r3, r0
    f276:	9100      	str	r1, [sp, #0]
    f278:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    f27c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f280:	4a15      	ldr	r2, [pc, #84]	; (f2d8 <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl+0x68>)
    f282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f286:	9303      	str	r3, [sp, #12]

    /* Configure External Trigger */
    Ftm_Pwm_Ip_SetChnTriggerCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->ExtTrigEn);
    f288:	9b00      	ldr	r3, [sp, #0]
    f28a:	7819      	ldrb	r1, [r3, #0]
    f28c:	9b00      	ldr	r3, [sp, #0]
    f28e:	7ddb      	ldrb	r3, [r3, #23]
    f290:	461a      	mov	r2, r3
    f292:	9803      	ldr	r0, [sp, #12]
    f294:	f7ff f99f 	bl	e5d6 <Ftm_Pwm_Ip_SetChnTriggerCmd>

#if (defined(FTM_PWM_IP_HAS_RELOAD_POINT) && (FTM_PWM_IP_HAS_RELOAD_POINT == STD_ON))
    /* Configure Ch Match Reload point */
    Ftm_Pwm_Ip_SetPwmLoadChnSelCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->ChMatchLoadEn);
    f298:	9b00      	ldr	r3, [sp, #0]
    f29a:	7819      	ldrb	r1, [r3, #0]
    f29c:	9b00      	ldr	r3, [sp, #0]
    f29e:	7e1b      	ldrb	r3, [r3, #24]
    f2a0:	461a      	mov	r2, r3
    f2a2:	9803      	ldr	r0, [sp, #12]
    f2a4:	f7fe ff86 	bl	e1b4 <Ftm_Pwm_Ip_SetPwmLoadChnSelCmd>
#endif

    /* Configure  Software Output Control Enable */
    Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd(FtmBase, UserChCfg->ChannelId, UserChCfg->SwControlEn);
    f2a8:	9b00      	ldr	r3, [sp, #0]
    f2aa:	7819      	ldrb	r1, [r3, #0]
    f2ac:	9b00      	ldr	r3, [sp, #0]
    f2ae:	7d5b      	ldrb	r3, [r3, #21]
    f2b0:	461a      	mov	r2, r3
    f2b2:	9803      	ldr	r0, [sp, #12]
    f2b4:	f7fe ff48 	bl	e148 <Ftm_Pwm_Ip_SetChnSoftwareCtrlCmd>

    /* Configure Channel Software Output Control Value */
    Ftm_Pwm_Ip_SetChnSoftwareCtrlVal(FtmBase, UserChCfg->ChannelId, UserChCfg->SwControlVal);
    f2b8:	9b00      	ldr	r3, [sp, #0]
    f2ba:	7819      	ldrb	r1, [r3, #0]
    f2bc:	9b00      	ldr	r3, [sp, #0]
    f2be:	7d9b      	ldrb	r3, [r3, #22]
    f2c0:	461a      	mov	r2, r3
    f2c2:	9803      	ldr	r0, [sp, #12]
    f2c4:	f7fe ff00 	bl	e0c8 <Ftm_Pwm_Ip_SetChnSoftwareCtrlVal>

    /* Sync Write buffered registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    f2c8:	2101      	movs	r1, #1
    f2ca:	9803      	ldr	r0, [sp, #12]
    f2cc:	f7fe fb69 	bl	d9a2 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    f2d0:	bf00      	nop
    f2d2:	b005      	add	sp, #20
    f2d4:	f85d fb04 	ldr.w	pc, [sp], #4
    f2d8:	0001a05c 	.word	0x0001a05c

0000f2dc <Ftm_Pwm_Ip_InitChannel>:
 * Description   : Configures the PWM signal for the ftm channel.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitChannel(uint8 Instance,
                                   const Ftm_Pwm_Ip_ChannelConfigType * UserChCfg)
{
    f2dc:	b500      	push	{lr}
    f2de:	b085      	sub	sp, #20
    f2e0:	4603      	mov	r3, r0
    f2e2:	9100      	str	r1, [sp, #0]
    f2e4:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    f2e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f2ec:	4a7b      	ldr	r2, [pc, #492]	; (f4dc <Ftm_Pwm_Ip_InitChannel+0x200>)
    f2ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2f2:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = 0U;
    f2f4:	2300      	movs	r3, #0
    f2f6:	f88d 300b 	strb.w	r3, [sp, #11]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    f2fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f2fe:	2b03      	cmp	r3, #3
    f300:	bf94      	ite	ls
    f302:	2301      	movls	r3, #1
    f304:	2300      	movhi	r3, #0
    f306:	b2db      	uxtb	r3, r3
    f308:	4618      	mov	r0, r3
    f30a:	f7f1 faef 	bl	8ec <DevAssert>
    DevAssert(NULL_PTR != UserChCfg);
    f30e:	9b00      	ldr	r3, [sp, #0]
    f310:	2b00      	cmp	r3, #0
    f312:	bf14      	ite	ne
    f314:	2301      	movne	r3, #1
    f316:	2300      	moveq	r3, #0
    f318:	b2db      	uxtb	r3, r3
    f31a:	4618      	mov	r0, r3
    f31c:	f7f1 fae6 	bl	8ec <DevAssert>
#endif

    /* Configure the PWM channel */
    ChannelId = UserChCfg->ChannelId;
    f320:	9b00      	ldr	r3, [sp, #0]
    f322:	781b      	ldrb	r3, [r3, #0]
    f324:	f88d 300b 	strb.w	r3, [sp, #11]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)

    /* Center Aligned PWM is available only in FTM CPWM counter mode */
    if ((FTM_PWM_IP_MODE_CENTER_ALIGNED_HIGH == UserChCfg->ChannelMode) ||
    f328:	9b00      	ldr	r3, [sp, #0]
    f32a:	685b      	ldr	r3, [r3, #4]
    f32c:	2b12      	cmp	r3, #18
    f32e:	d003      	beq.n	f338 <Ftm_Pwm_Ip_InitChannel+0x5c>
        (FTM_PWM_IP_MODE_CENTER_ALIGNED_LOW == UserChCfg->ChannelMode))
    f330:	9b00      	ldr	r3, [sp, #0]
    f332:	685b      	ldr	r3, [r3, #4]
    if ((FTM_PWM_IP_MODE_CENTER_ALIGNED_HIGH == UserChCfg->ChannelMode) ||
    f334:	2b11      	cmp	r3, #17
    f336:	d10b      	bne.n	f350 <Ftm_Pwm_Ip_InitChannel+0x74>
    {
        DevAssert(FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase));
    f338:	9803      	ldr	r0, [sp, #12]
    f33a:	f7fe f8f3 	bl	d524 <Ftm_Pwm_Ip_GetCpwms>
    f33e:	4603      	mov	r3, r0
    f340:	2b01      	cmp	r3, #1
    f342:	bf0c      	ite	eq
    f344:	2301      	moveq	r3, #1
    f346:	2300      	movne	r3, #0
    f348:	b2db      	uxtb	r3, r3
    f34a:	4618      	mov	r0, r3
    f34c:	f7f1 face 	bl	8ec <DevAssert>
    }
    /* Only the main channel of a pair can have the PairCfg pointer set */
    if (NULL_PTR != UserChCfg->PairCfg)
    f350:	9b00      	ldr	r3, [sp, #0]
    f352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f354:	2b00      	cmp	r3, #0
    f356:	d015      	beq.n	f384 <Ftm_Pwm_Ip_InitChannel+0xa8>
    {
        if (0x01U == (ChannelId % 2U))
    f358:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f35c:	f003 0301 	and.w	r3, r3, #1
    f360:	b2db      	uxtb	r3, r3
    f362:	2b00      	cmp	r3, #0
    f364:	d003      	beq.n	f36e <Ftm_Pwm_Ip_InitChannel+0x92>
        {
            DevAssert(FALSE);
    f366:	2000      	movs	r0, #0
    f368:	f7f1 fac0 	bl	8ec <DevAssert>
    f36c:	e00a      	b.n	f384 <Ftm_Pwm_Ip_InitChannel+0xa8>
        }/* Check if pair configuration */
        else if ((UserChCfg->PairCfg->PairId * 2U) != ChannelId)
    f36e:	9b00      	ldr	r3, [sp, #0]
    f370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f372:	781b      	ldrb	r3, [r3, #0]
    f374:	005a      	lsls	r2, r3, #1
    f376:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f37a:	429a      	cmp	r2, r3
    f37c:	d002      	beq.n	f384 <Ftm_Pwm_Ip_InitChannel+0xa8>
        {
            DevAssert(FALSE);
    f37e:	2000      	movs	r0, #0
    f380:	f7f1 fab4 	bl	8ec <DevAssert>
        {
            /* MISRA Rule 15.7 All if...else if constructs shall be terminated with an else statement */
        }
    }

    if ((FTM_PWM_IP_MODE_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    f384:	9b00      	ldr	r3, [sp, #0]
    f386:	685b      	ldr	r3, [r3, #4]
    f388:	2b22      	cmp	r3, #34	; 0x22
    f38a:	d00b      	beq.n	f3a4 <Ftm_Pwm_Ip_InitChannel+0xc8>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    f38c:	9b00      	ldr	r3, [sp, #0]
    f38e:	685b      	ldr	r3, [r3, #4]
    if ((FTM_PWM_IP_MODE_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    f390:	2b62      	cmp	r3, #98	; 0x62
    f392:	d007      	beq.n	f3a4 <Ftm_Pwm_Ip_InitChannel+0xc8>
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW == UserChCfg->ChannelMode) ||
    f394:	9b00      	ldr	r3, [sp, #0]
    f396:	685b      	ldr	r3, [r3, #4]
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == UserChCfg->ChannelMode) ||
    f398:	2b61      	cmp	r3, #97	; 0x61
    f39a:	d003      	beq.n	f3a4 <Ftm_Pwm_Ip_InitChannel+0xc8>
#endif
        (FTM_PWM_IP_MODE_COMBINE_LOW == UserChCfg->ChannelMode))
    f39c:	9b00      	ldr	r3, [sp, #0]
    f39e:	685b      	ldr	r3, [r3, #4]
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW == UserChCfg->ChannelMode) ||
    f3a0:	2b21      	cmp	r3, #33	; 0x21
    f3a2:	d114      	bne.n	f3ce <Ftm_Pwm_Ip_InitChannel+0xf2>

    {
        DevAssert(NULL_PTR != UserChCfg->PairCfg);
    f3a4:	9b00      	ldr	r3, [sp, #0]
    f3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f3a8:	2b00      	cmp	r3, #0
    f3aa:	bf14      	ite	ne
    f3ac:	2301      	movne	r3, #1
    f3ae:	2300      	moveq	r3, #0
    f3b0:	b2db      	uxtb	r3, r3
    f3b2:	4618      	mov	r0, r3
    f3b4:	f7f1 fa9a 	bl	8ec <DevAssert>
        Ftm_Pwm_Ip_aChannelState[Instance][ChannelId + 1U] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    f3b8:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f3bc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f3c0:	3301      	adds	r3, #1
    f3c2:	4947      	ldr	r1, [pc, #284]	; (f4e0 <Ftm_Pwm_Ip_InitChannel+0x204>)
    f3c4:	00d2      	lsls	r2, r2, #3
    f3c6:	4413      	add	r3, r2
    f3c8:	2201      	movs	r2, #1
    f3ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
    Ftm_Pwm_Ip_aNotifIrq[Instance][ChannelId] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
#endif

    Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId] = UserChCfg->DutyCycle;
    f3ce:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f3d2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f3d6:	9900      	ldr	r1, [sp, #0]
    f3d8:	8b48      	ldrh	r0, [r1, #26]
    f3da:	4942      	ldr	r1, [pc, #264]	; (f4e4 <Ftm_Pwm_Ip_InitChannel+0x208>)
    f3dc:	00d2      	lsls	r2, r2, #3
    f3de:	4413      	add	r3, r2
    f3e0:	4602      	mov	r2, r0
    f3e2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    Ftm_Pwm_Ip_aIdleState[Instance][ChannelId] = UserChCfg->InitOut;
    f3e6:	f89d 1007 	ldrb.w	r1, [sp, #7]
    f3ea:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f3ee:	9a00      	ldr	r2, [sp, #0]
    f3f0:	69d2      	ldr	r2, [r2, #28]
    f3f2:	483d      	ldr	r0, [pc, #244]	; (f4e8 <Ftm_Pwm_Ip_InitChannel+0x20c>)
    f3f4:	00c9      	lsls	r1, r1, #3
    f3f6:	440b      	add	r3, r1
    f3f8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

    /* Configure POL bits */
    Ftm_Pwm_Ip_SetChnOutputPolarityCmd(FtmBase, ChannelId, UserChCfg->Polarity);
    f3fc:	9b00      	ldr	r3, [sp, #0]
    f3fe:	6a1a      	ldr	r2, [r3, #32]
    f400:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f404:	4619      	mov	r1, r3
    f406:	9803      	ldr	r0, [sp, #12]
    f408:	f7fe fc94 	bl	dd34 <Ftm_Pwm_Ip_SetChnOutputPolarityCmd>
    /* Configure initial output state */
    Ftm_Pwm_Ip_SetChnOutputInitStateCmd(FtmBase, ChannelId, UserChCfg->InitOut);
    f40c:	9b00      	ldr	r3, [sp, #0]
    f40e:	69da      	ldr	r2, [r3, #28]
    f410:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f414:	4619      	mov	r1, r3
    f416:	9803      	ldr	r0, [sp, #12]
    f418:	f7fe fad9 	bl	d9ce <Ftm_Pwm_Ip_SetChnOutputInitStateCmd>

    /* Configure Channel Mode */
    /* Configure ELSA/ELSB */
    Ftm_Pwm_Ip_SetChnEdgeLevel(FtmBase, ChannelId, UserChCfg->ChannelMode);
    f41c:	9b00      	ldr	r3, [sp, #0]
    f41e:	685a      	ldr	r2, [r3, #4]
    f420:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f424:	4619      	mov	r1, r3
    f426:	9803      	ldr	r0, [sp, #12]
    f428:	f7fe f90a 	bl	d640 <Ftm_Pwm_Ip_SetChnEdgeLevel>
    /* Set MSB and MSA bits*/
    Ftm_Pwm_Ip_SetChnMSBAMode(FtmBase, ChannelId, UserChCfg->ChannelMode);
    f42c:	9b00      	ldr	r3, [sp, #0]
    f42e:	685a      	ldr	r2, [r3, #4]
    f430:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f434:	4619      	mov	r1, r3
    f436:	9803      	ldr	r0, [sp, #12]
    f438:	f7fe f939 	bl	d6ae <Ftm_Pwm_Ip_SetChnMSBAMode>

    Ftm_Pwm_Ip_ConfigurePairedChannel(Instance, UserChCfg);
    f43c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f440:	9900      	ldr	r1, [sp, #0]
    f442:	4618      	mov	r0, r3
    f444:	f7ff fe9a 	bl	f17c <Ftm_Pwm_Ip_ConfigurePairedChannel>

    Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(Instance,
    f448:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f44c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f450:	4924      	ldr	r1, [pc, #144]	; (f4e4 <Ftm_Pwm_Ip_InitChannel+0x208>)
    f452:	00d2      	lsls	r2, r2, #3
    f454:	4413      	add	r3, r2
    f456:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    f45a:	f89d 100b 	ldrb.w	r1, [sp, #11]
    f45e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    f462:	2301      	movs	r3, #1
    f464:	f000 f9f2 	bl	f84c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                         ChannelId,
                                         Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId],
                                         TRUE);

    Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl(Instance, UserChCfg);
    f468:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f46c:	9900      	ldr	r1, [sp, #0]
    f46e:	4618      	mov	r0, r3
    f470:	f7ff fefe 	bl	f270 <Ftm_Pwm_Ip_SetChnTriggerAndSoftwareCtrl>
    }
#endif

#if (defined(FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE) && (FTM_PWM_IP_HAS_CHANNEL_PWM_ENABLE == STD_ON))
    /* Enable PWM output */
    if(TRUE == UserChCfg->ChOutputEn)
    f474:	9b00      	ldr	r3, [sp, #0]
    f476:	7d1b      	ldrb	r3, [r3, #20]
    f478:	2b00      	cmp	r3, #0
    f47a:	d005      	beq.n	f488 <Ftm_Pwm_Ip_InitChannel+0x1ac>
    {
        Ftm_Pwm_Ip_EnablePwmChannelOutputs(FtmBase, ChannelId);
    f47c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f480:	4619      	mov	r1, r3
    f482:	9803      	ldr	r0, [sp, #12]
    f484:	f7fe f87e 	bl	d584 <Ftm_Pwm_Ip_EnablePwmChannelOutputs>
    }
#endif
    Ftm_Pwm_Ip_aChannelState[Instance][ChannelId] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    f488:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f48c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f490:	4913      	ldr	r1, [pc, #76]	; (f4e0 <Ftm_Pwm_Ip_InitChannel+0x204>)
    f492:	00d2      	lsls	r2, r2, #3
    f494:	4413      	add	r3, r2
    f496:	2201      	movs	r2, #1
    f498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if(TRUE == UserChCfg->ChIrqEn)
    f49c:	9b00      	ldr	r3, [sp, #0]
    f49e:	7a1b      	ldrb	r3, [r3, #8]
    f4a0:	2b00      	cmp	r3, #0
    f4a2:	d016      	beq.n	f4d2 <Ftm_Pwm_Ip_InitChannel+0x1f6>
    {
        Ftm_Pwm_Ip_aChIrqCallbacks[Instance][ChannelId].FunctionCallback = UserChCfg->ChannelCb.FunctionCallback;
    f4a4:	f89d 1007 	ldrb.w	r1, [sp, #7]
    f4a8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f4ac:	9a00      	ldr	r2, [sp, #0]
    f4ae:	68d2      	ldr	r2, [r2, #12]
    f4b0:	480e      	ldr	r0, [pc, #56]	; (f4ec <Ftm_Pwm_Ip_InitChannel+0x210>)
    f4b2:	00c9      	lsls	r1, r1, #3
    f4b4:	440b      	add	r3, r1
    f4b6:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
        Ftm_Pwm_Ip_aChIrqCallbacks[Instance][ChannelId].CbParam          = UserChCfg->ChannelCb.CbParam;
    f4ba:	f89d 1007 	ldrb.w	r1, [sp, #7]
    f4be:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f4c2:	9a00      	ldr	r2, [sp, #0]
    f4c4:	6912      	ldr	r2, [r2, #16]
    f4c6:	4809      	ldr	r0, [pc, #36]	; (f4ec <Ftm_Pwm_Ip_InitChannel+0x210>)
    f4c8:	00c9      	lsls	r1, r1, #3
    f4ca:	440b      	add	r3, r1
    f4cc:	00db      	lsls	r3, r3, #3
    f4ce:	4403      	add	r3, r0
    f4d0:	605a      	str	r2, [r3, #4]
    }

}
    f4d2:	bf00      	nop
    f4d4:	b005      	add	sp, #20
    f4d6:	f85d fb04 	ldr.w	pc, [sp], #4
    f4da:	bf00      	nop
    f4dc:	0001a05c 	.word	0x0001a05c
    f4e0:	1fff9004 	.word	0x1fff9004
    f4e4:	1fff8e34 	.word	0x1fff8e34
    f4e8:	1fff90a4 	.word	0x1fff90a4
    f4ec:	1fff8ed4 	.word	0x1fff8ed4

0000f4f0 <Ftm_Pwm_Ip_DeInitInstance>:
 * Function Name : Ftm_Pwm_Ip_DeinitInstance
 * Description   : Stops all PWM channels.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DeInitInstance(uint8 Instance)
{
    f4f0:	b500      	push	{lr}
    f4f2:	b085      	sub	sp, #20
    f4f4:	4603      	mov	r3, r0
    f4f6:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    f4fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f4fe:	4a1c      	ldr	r2, [pc, #112]	; (f570 <Ftm_Pwm_Ip_DeInitInstance+0x80>)
    f500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f504:	9303      	str	r3, [sp, #12]

#if (FTM_PWM_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    f506:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f50a:	2b03      	cmp	r3, #3
    f50c:	bf94      	ite	ls
    f50e:	2301      	movls	r3, #1
    f510:	2300      	movhi	r3, #0
    f512:	b2db      	uxtb	r3, r3
    f514:	4618      	mov	r0, r3
    f516:	f7f1 f9e9 	bl	8ec <DevAssert>
#endif

    /* Stop the FTM counter */
    Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
    f51a:	2100      	movs	r1, #0
    f51c:	9803      	ldr	r0, [sp, #12]
    f51e:	f7fd ffda 	bl	d4d6 <Ftm_Pwm_Ip_SetClockSource>

    /* Clear the dead-time pre-scaler and value */
    Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, 0U);
    f522:	2100      	movs	r1, #0
    f524:	9803      	ldr	r0, [sp, #12]
    f526:	f7fe fbbf 	bl	dca8 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    Ftm_Pwm_Ip_SetDeadtimePrescaler(FtmBase, FTM_PWM_IP_DEADTIME_DIV_1);
    f52a:	2101      	movs	r1, #1
    f52c:	9803      	ldr	r0, [sp, #12]
    f52e:	f7fe fb9d 	bl	dc6c <Ftm_Pwm_Ip_SetDeadtimePrescaler>
    Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, 0U);
    f532:	2100      	movs	r1, #0
    f534:	9803      	ldr	r0, [sp, #12]
    f536:	f7fe fb86 	bl	dc46 <Ftm_Pwm_Ip_SetDeadtimeCount>

    /* Configure debug mode */
    Ftm_Pwm_Ip_SetBdmMode(FtmBase, FTM_PWM_IP_BDM_MODE_00);
    f53a:	2100      	movs	r1, #0
    f53c:	9803      	ldr	r0, [sp, #12]
    f53e:	f7fe fc45 	bl	ddcc <Ftm_Pwm_Ip_SetBdmMode>
    /* Disable overflow interrupt */
    Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, FALSE);
    f542:	2100      	movs	r1, #0
    f544:	9803      	ldr	r0, [sp, #12]
    f546:	f7fd fffb 	bl	d540 <Ftm_Pwm_Ip_SetTimerOverflowInt>
    /* Clear the module value of the registers */
    Ftm_Pwm_Ip_SetMod(FtmBase, 0U);
    f54a:	2100      	movs	r1, #0
    f54c:	9803      	ldr	r0, [sp, #12]
    f54e:	f7fe f83c 	bl	d5ca <Ftm_Pwm_Ip_SetMod>
    Ftm_Pwm_Ip_SetCounter(FtmBase, 0U);
    f552:	2100      	movs	r1, #0
    f554:	9803      	ldr	r0, [sp, #12]
    f556:	f7fe f827 	bl	d5a8 <Ftm_Pwm_Ip_SetCounter>
    /* Confirm the instance is inactive */
    Ftm_Pwm_Ip_aInstanceState[Instance] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_UNINIT;
    f55a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f55e:	4a05      	ldr	r2, [pc, #20]	; (f574 <Ftm_Pwm_Ip_DeInitInstance+0x84>)
    f560:	2100      	movs	r1, #0
    f562:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    /* Clear the UAA bit in REG_PROT */
    OsIf_Trusted_Call1param(Ftm_Pwm_Ip_ClrUserAccessAllowed, Instance);
#endif
#endif

}
    f566:	bf00      	nop
    f568:	b005      	add	sp, #20
    f56a:	f85d fb04 	ldr.w	pc, [sp], #4
    f56e:	bf00      	nop
    f570:	0001a05c 	.word	0x0001a05c
    f574:	1fff8ff4 	.word	0x1fff8ff4

0000f578 <Ftm_Pwm_Ip_DeInitChannel>:
 * Description   : Stops all PWM channels.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_DeInitChannel(uint8 Instance,
                                     uint8 Channel)
{
    f578:	b500      	push	{lr}
    f57a:	b085      	sub	sp, #20
    f57c:	4603      	mov	r3, r0
    f57e:	460a      	mov	r2, r1
    f580:	f88d 3007 	strb.w	r3, [sp, #7]
    f584:	4613      	mov	r3, r2
    f586:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    f58a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f58e:	4a2e      	ldr	r2, [pc, #184]	; (f648 <Ftm_Pwm_Ip_DeInitChannel+0xd0>)
    f590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f594:	9303      	str	r3, [sp, #12]
    uint8 PairId = (uint8)(Channel >> 1U);
    f596:	f89d 3006 	ldrb.w	r3, [sp, #6]
    f59a:	085b      	lsrs	r3, r3, #1
    f59c:	f88d 300b 	strb.w	r3, [sp, #11]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    f5a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f5a4:	2b03      	cmp	r3, #3
    f5a6:	bf94      	ite	ls
    f5a8:	2301      	movls	r3, #1
    f5aa:	2300      	movhi	r3, #0
    f5ac:	b2db      	uxtb	r3, r3
    f5ae:	4618      	mov	r0, r3
    f5b0:	f7f1 f99c 	bl	8ec <DevAssert>
#endif

    /* Disable interrupts for given channel */
    Ftm_Pwm_Ip_DisableCmpIrq(Instance, Channel);
    f5b4:	f89d 2006 	ldrb.w	r2, [sp, #6]
    f5b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f5bc:	4611      	mov	r1, r2
    f5be:	4618      	mov	r0, r3
    f5c0:	f7ff fae2 	bl	eb88 <Ftm_Pwm_Ip_DisableCmpIrq>
    /* Set current channel channels to IDLE */
    Ftm_Pwm_Ip_SwOutputControl(Instance,
    f5c4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f5c8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    f5cc:	491f      	ldr	r1, [pc, #124]	; (f64c <Ftm_Pwm_Ip_DeInitChannel+0xd4>)
    f5ce:	00d2      	lsls	r2, r2, #3
    f5d0:	4413      	add	r3, r2
    f5d2:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    f5d6:	f89d 1006 	ldrb.w	r1, [sp, #6]
    f5da:	f89d 0007 	ldrb.w	r0, [sp, #7]
    f5de:	2301      	movs	r3, #1
    f5e0:	f000 fa92 	bl	fb08 <Ftm_Pwm_Ip_SwOutputControl>
                               Channel,
                               Ftm_Pwm_Ip_aIdleState[Instance][Channel],
                               TRUE);
    /* Clear SWSYNC bit - has to be cleared to generate SW trigger */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, FALSE);
    f5e4:	2100      	movs	r1, #0
    f5e6:	9803      	ldr	r0, [sp, #12]
    f5e8:	f7fe f9db 	bl	d9a2 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    /* OUTMASK register is updated with the value of its buffer only by the PWM synchronization */
    Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd(FtmBase, TRUE);
    f5ec:	2101      	movs	r1, #1
    f5ee:	9803      	ldr	r0, [sp, #12]
    f5f0:	f7fe f99c 	bl	d92c <Ftm_Pwm_Ip_SetOutmaskPwmSyncModeCmd>
    /* The software trigger activates the OUTMASK register synchronization */
    Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd(FtmBase, TRUE);
    f5f4:	2101      	movs	r1, #1
    f5f6:	9803      	ldr	r0, [sp, #12]
    f5f8:	f7fe fcb7 	bl	df6a <Ftm_Pwm_Ip_SetOutmaskSoftwareSyncModeCmd>
    /* Channel output is not masked. It continues to operate normally */
    Ftm_Pwm_Ip_SetChnOutputMask(FtmBase, Channel, FALSE);
    f5fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    f600:	2200      	movs	r2, #0
    f602:	4619      	mov	r1, r3
    f604:	9803      	ldr	r0, [sp, #12]
    f606:	f7fe fa04 	bl	da12 <Ftm_Pwm_Ip_SetChnOutputMask>
    /* set SWSYNC bit - has to be cleared to generate SW trigger */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    f60a:	2101      	movs	r1, #1
    f60c:	9803      	ldr	r0, [sp, #12]
    f60e:	f7fe f9c8 	bl	d9a2 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    /* Clear the type of notification for each channel (n) in paired channel*/
    Ftm_Pwm_Ip_aNotifIrq[Instance][(PairId * 2U)] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
    f612:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f616:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f61a:	005b      	lsls	r3, r3, #1
    f61c:	490c      	ldr	r1, [pc, #48]	; (f650 <Ftm_Pwm_Ip_DeInitChannel+0xd8>)
    f61e:	00d2      	lsls	r2, r2, #3
    f620:	440a      	add	r2, r1
    f622:	4413      	add	r3, r2
    f624:	2200      	movs	r2, #0
    f626:	701a      	strb	r2, [r3, #0]
    /* Clear the type of notification for each channel (n+1) in paired channel*/
    Ftm_Pwm_Ip_aNotifIrq[Instance][((PairId * 2U) + 1U)] = (Ftm_Pwm_Ip_EdgeInterruptType)FTM_PWM_IP_NO_EDGE;
    f628:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f62c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f630:	005b      	lsls	r3, r3, #1
    f632:	3301      	adds	r3, #1
    f634:	4906      	ldr	r1, [pc, #24]	; (f650 <Ftm_Pwm_Ip_DeInitChannel+0xd8>)
    f636:	00d2      	lsls	r2, r2, #3
    f638:	440a      	add	r2, r1
    f63a:	4413      	add	r3, r2
    f63c:	2200      	movs	r2, #0
    f63e:	701a      	strb	r2, [r3, #0]

}
    f640:	bf00      	nop
    f642:	b005      	add	sp, #20
    f644:	f85d fb04 	ldr.w	pc, [sp], #4
    f648:	0001a05c 	.word	0x0001a05c
    f64c:	1fff90a4 	.word	0x1fff90a4
    f650:	1fff9084 	.word	0x1fff9084

0000f654 <Ftm_Pwm_Ip_InitChFault>:
 * Description   : Configures the fault channels are available on the Pwm configuration.
 *
 *END**************************************************************************/
static void Ftm_Pwm_Ip_InitChFault(uint8 Instance,
                                   const Ftm_Pwm_Ip_FaultChCfgType * FaultChCfg)
{
    f654:	b500      	push	{lr}
    f656:	b085      	sub	sp, #20
    f658:	4603      	mov	r3, r0
    f65a:	9100      	str	r1, [sp, #0]
    f65c:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    f660:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f664:	4a15      	ldr	r2, [pc, #84]	; (f6bc <Ftm_Pwm_Ip_InitChFault+0x68>)
    f666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f66a:	9303      	str	r3, [sp, #12]
    /* Set the fault inputs polarity. */
    Ftm_Pwm_Ip_SetFaultPolarity(FtmBase, FaultChCfg->FaultId, FaultChCfg->FaultPol);
    f66c:	9b00      	ldr	r3, [sp, #0]
    f66e:	7819      	ldrb	r1, [r3, #0]
    f670:	9b00      	ldr	r3, [sp, #0]
    f672:	685b      	ldr	r3, [r3, #4]
    f674:	461a      	mov	r2, r3
    f676:	9803      	ldr	r0, [sp, #12]
    f678:	f7ff f890 	bl	e79c <Ftm_Pwm_Ip_SetFaultPolarity>
    /* Enables/Disables the filter for the fault input. */
    Ftm_Pwm_Ip_SetFaultFilterEn(FtmBase, FaultChCfg->FaultId, FaultChCfg->FaultFilEn);
    f67c:	9b00      	ldr	r3, [sp, #0]
    f67e:	7819      	ldrb	r1, [r3, #0]
    f680:	9b00      	ldr	r3, [sp, #0]
    f682:	7a1b      	ldrb	r3, [r3, #8]
    f684:	461a      	mov	r2, r3
    f686:	9803      	ldr	r0, [sp, #12]
    f688:	f7ff f8cf 	bl	e82a <Ftm_Pwm_Ip_SetFaultFilterEn>
    /* Enables/Disables the fault inputs. */
    Ftm_Pwm_Ip_SetFaultInputEn(FtmBase, FaultChCfg->FaultId, TRUE);
    f68c:	9b00      	ldr	r3, [sp, #0]
    f68e:	781b      	ldrb	r3, [r3, #0]
    f690:	2201      	movs	r2, #1
    f692:	4619      	mov	r1, r3
    f694:	9803      	ldr	r0, [sp, #12]
    f696:	f7ff f8a4 	bl	e7e2 <Ftm_Pwm_Ip_SetFaultInputEn>
    /* Fault Irq Callback*/
    Ftm_Pwm_Ip_pFaultIrqCallback[Instance][FaultChCfg->FaultId] = FaultChCfg->FaultCb;
    f69a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f69e:	9a00      	ldr	r2, [sp, #0]
    f6a0:	7812      	ldrb	r2, [r2, #0]
    f6a2:	4610      	mov	r0, r2
    f6a4:	9a00      	ldr	r2, [sp, #0]
    f6a6:	68d2      	ldr	r2, [r2, #12]
    f6a8:	4905      	ldr	r1, [pc, #20]	; (f6c0 <Ftm_Pwm_Ip_InitChFault+0x6c>)
    f6aa:	009b      	lsls	r3, r3, #2
    f6ac:	4403      	add	r3, r0
    f6ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f6b2:	bf00      	nop
    f6b4:	b005      	add	sp, #20
    f6b6:	f85d fb04 	ldr.w	pc, [sp], #4
    f6ba:	bf00      	nop
    f6bc:	0001a05c 	.word	0x0001a05c
    f6c0:	1fff8e94 	.word	0x1fff8e94

0000f6c4 <Ftm_Pwm_Ip_Init>:
 *
 * @implements Ftm_Pwm_Ip_Init_Activity
 */
void Ftm_Pwm_Ip_Init(uint8 Instance,
                     const Ftm_Pwm_Ip_UserCfgType * UserCfg)
{
    f6c4:	b500      	push	{lr}
    f6c6:	b085      	sub	sp, #20
    f6c8:	4603      	mov	r3, r0
    f6ca:	9100      	str	r1, [sp, #0]
    f6cc:	f88d 3007 	strb.w	r3, [sp, #7]

    uint8 Index = 0U;
    f6d0:	2300      	movs	r3, #0
    f6d2:	f88d 300f 	strb.w	r3, [sp, #15]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    f6d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f6da:	2b03      	cmp	r3, #3
    f6dc:	bf94      	ite	ls
    f6de:	2301      	movls	r3, #1
    f6e0:	2300      	movhi	r3, #0
    f6e2:	b2db      	uxtb	r3, r3
    f6e4:	4618      	mov	r0, r3
    f6e6:	f7f1 f901 	bl	8ec <DevAssert>
    DevAssert(NULL_PTR != UserCfg);
    f6ea:	9b00      	ldr	r3, [sp, #0]
    f6ec:	2b00      	cmp	r3, #0
    f6ee:	bf14      	ite	ne
    f6f0:	2301      	movne	r3, #1
    f6f2:	2300      	moveq	r3, #0
    f6f4:	b2db      	uxtb	r3, r3
    f6f6:	4618      	mov	r0, r3
    f6f8:	f7f1 f8f8 	bl	8ec <DevAssert>
#endif

#ifdef ERR_IPV_FTM_ERR010856
#if ((STD_ON == ERR_IPV_FTM_ERR010856) && (STD_ON == FTM_PWM_IP_HAS_FAULT))
    /* Set a variable to indicate that a fault was not detected when initializing */
    Ftm_Pwm_Ip_u8FaultCheck = (uint8)0U;
    f6fc:	4b29      	ldr	r3, [pc, #164]	; (f7a4 <Ftm_Pwm_Ip_Init+0xe0>)
    f6fe:	2200      	movs	r2, #0
    f700:	701a      	strb	r2, [r3, #0]
#endif
#endif
    /* Configure FTM Instance in PWM mode */
    Ftm_Pwm_Ip_InitInstance(Instance, UserCfg->InstanceCfg);
    f702:	9b00      	ldr	r3, [sp, #0]
    f704:	681a      	ldr	r2, [r3, #0]
    f706:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f70a:	4611      	mov	r1, r2
    f70c:	4618      	mov	r0, r3
    f70e:	f7ff fc39 	bl	ef84 <Ftm_Pwm_Ip_InitInstance>

    /* Configure all channels in the user cfg */
    for (Index = 0; Index < UserCfg->NoOfConfiguredCh; Index++)
    f712:	2300      	movs	r3, #0
    f714:	f88d 300f 	strb.w	r3, [sp, #15]
    f718:	e011      	b.n	f73e <Ftm_Pwm_Ip_Init+0x7a>
    {
        /* Configure PWM channels */
        Ftm_Pwm_Ip_InitChannel(Instance, UserCfg->ConfiguredChArray[Index]);
    f71a:	9b00      	ldr	r3, [sp, #0]
    f71c:	685a      	ldr	r2, [r3, #4]
    f71e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f722:	009b      	lsls	r3, r3, #2
    f724:	4413      	add	r3, r2
    f726:	681a      	ldr	r2, [r3, #0]
    f728:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f72c:	4611      	mov	r1, r2
    f72e:	4618      	mov	r0, r3
    f730:	f7ff fdd4 	bl	f2dc <Ftm_Pwm_Ip_InitChannel>
    for (Index = 0; Index < UserCfg->NoOfConfiguredCh; Index++)
    f734:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f738:	3301      	adds	r3, #1
    f73a:	f88d 300f 	strb.w	r3, [sp, #15]
    f73e:	9b00      	ldr	r3, [sp, #0]
    f740:	7a1b      	ldrb	r3, [r3, #8]
    f742:	f89d 200f 	ldrb.w	r2, [sp, #15]
    f746:	429a      	cmp	r2, r3
    f748:	d3e7      	bcc.n	f71a <Ftm_Pwm_Ip_Init+0x56>
    }

#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    if (UserCfg->NoOfFaultCfg > 0U)
    f74a:	9b00      	ldr	r3, [sp, #0]
    f74c:	7c1b      	ldrb	r3, [r3, #16]
    f74e:	2b00      	cmp	r3, #0
    f750:	d01b      	beq.n	f78a <Ftm_Pwm_Ip_Init+0xc6>
    {
        for (Index = 0; Index < UserCfg->NoOfFaultCfg; Index++)
    f752:	2300      	movs	r3, #0
    f754:	f88d 300f 	strb.w	r3, [sp, #15]
    f758:	e011      	b.n	f77e <Ftm_Pwm_Ip_Init+0xba>
        {
            /* Configure fault channels */
            Ftm_Pwm_Ip_InitChFault(Instance, UserCfg->ConfiguredFaultArray[Index]);
    f75a:	9b00      	ldr	r3, [sp, #0]
    f75c:	68da      	ldr	r2, [r3, #12]
    f75e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f762:	009b      	lsls	r3, r3, #2
    f764:	4413      	add	r3, r2
    f766:	681a      	ldr	r2, [r3, #0]
    f768:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f76c:	4611      	mov	r1, r2
    f76e:	4618      	mov	r0, r3
    f770:	f7ff ff70 	bl	f654 <Ftm_Pwm_Ip_InitChFault>
        for (Index = 0; Index < UserCfg->NoOfFaultCfg; Index++)
    f774:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f778:	3301      	adds	r3, #1
    f77a:	f88d 300f 	strb.w	r3, [sp, #15]
    f77e:	9b00      	ldr	r3, [sp, #0]
    f780:	7c1b      	ldrb	r3, [r3, #16]
    f782:	f89d 200f 	ldrb.w	r2, [sp, #15]
    f786:	429a      	cmp	r2, r3
    f788:	d3e7      	bcc.n	f75a <Ftm_Pwm_Ip_Init+0x96>
        }
    }
#endif

    Ftm_Pwm_Ip_InitInstanceStart(Instance, UserCfg->InstanceCfg);
    f78a:	9b00      	ldr	r3, [sp, #0]
    f78c:	681a      	ldr	r2, [r3, #0]
    f78e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f792:	4611      	mov	r1, r2
    f794:	4618      	mov	r0, r3
    f796:	f7ff fc9d 	bl	f0d4 <Ftm_Pwm_Ip_InitInstanceStart>
}
    f79a:	bf00      	nop
    f79c:	b005      	add	sp, #20
    f79e:	f85d fb04 	ldr.w	pc, [sp], #4
    f7a2:	bf00      	nop
    f7a4:	1fff8e28 	.word	0x1fff8e28

0000f7a8 <Ftm_Pwm_Ip_DeInit>:
 * Firstly, Ftm_Pwm_Ip_Init must be called. Then this function will disables the FTM module.
 *
 * @implements Ftm_Pwm_Ip_DeInit_Activity
 */
void Ftm_Pwm_Ip_DeInit(uint8 Instance)
{
    f7a8:	b500      	push	{lr}
    f7aa:	b085      	sub	sp, #20
    f7ac:	4603      	mov	r3, r0
    f7ae:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    f7b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f7b6:	4a23      	ldr	r2, [pc, #140]	; (f844 <Ftm_Pwm_Ip_DeInit+0x9c>)
    f7b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f7bc:	9302      	str	r3, [sp, #8]
    uint8 ChannelId = 0U;
    f7be:	2300      	movs	r3, #0
    f7c0:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    f7c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f7c8:	2b03      	cmp	r3, #3
    f7ca:	bf94      	ite	ls
    f7cc:	2301      	movls	r3, #1
    f7ce:	2300      	movhi	r3, #0
    f7d0:	b2db      	uxtb	r3, r3
    f7d2:	4618      	mov	r0, r3
    f7d4:	f7f1 f88a 	bl	8ec <DevAssert>
#endif
    /* Reset all FTM register */
    Ftm_Pwm_Ip_Reset(FtmBase);
    f7d8:	9802      	ldr	r0, [sp, #8]
    f7da:	f7fe fe87 	bl	e4ec <Ftm_Pwm_Ip_Reset>
    
    /* Configure all channels in the user cfg */
    for (ChannelId = 0U; ChannelId < FTM_PWM_IP_CHANNEL_COUNT; ChannelId++)
    f7de:	2300      	movs	r3, #0
    f7e0:	f88d 300f 	strb.w	r3, [sp, #15]
    f7e4:	e021      	b.n	f82a <Ftm_Pwm_Ip_DeInit+0x82>
    {
        if (FTM_PWM_IP_CHANNEL_UNINIT != Ftm_Pwm_Ip_aChannelState[Instance][ChannelId])
    f7e6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f7ea:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f7ee:	4916      	ldr	r1, [pc, #88]	; (f848 <Ftm_Pwm_Ip_DeInit+0xa0>)
    f7f0:	00d2      	lsls	r2, r2, #3
    f7f2:	4413      	add	r3, r2
    f7f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    f7f8:	2b00      	cmp	r3, #0
    f7fa:	d011      	beq.n	f820 <Ftm_Pwm_Ip_DeInit+0x78>
        {
            /* De-Initialize FTM channels */
            Ftm_Pwm_Ip_DeInitChannel(Instance, ChannelId);
    f7fc:	f89d 200f 	ldrb.w	r2, [sp, #15]
    f800:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f804:	4611      	mov	r1, r2
    f806:	4618      	mov	r0, r3
    f808:	f7ff feb6 	bl	f578 <Ftm_Pwm_Ip_DeInitChannel>
            /* The channels is inactive */
            Ftm_Pwm_Ip_aChannelState[Instance][ChannelId] = FTM_PWM_IP_CHANNEL_UNINIT;
    f80c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    f810:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f814:	490c      	ldr	r1, [pc, #48]	; (f848 <Ftm_Pwm_Ip_DeInit+0xa0>)
    f816:	00d2      	lsls	r2, r2, #3
    f818:	4413      	add	r3, r2
    f81a:	2200      	movs	r2, #0
    f81c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (ChannelId = 0U; ChannelId < FTM_PWM_IP_CHANNEL_COUNT; ChannelId++)
    f820:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f824:	3301      	adds	r3, #1
    f826:	f88d 300f 	strb.w	r3, [sp, #15]
    f82a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f82e:	2b07      	cmp	r3, #7
    f830:	d9d9      	bls.n	f7e6 <Ftm_Pwm_Ip_DeInit+0x3e>
        }
    }
    /* De-Initialize FTM Instance */
    Ftm_Pwm_Ip_DeInitInstance(Instance);
    f832:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f836:	4618      	mov	r0, r3
    f838:	f7ff fe5a 	bl	f4f0 <Ftm_Pwm_Ip_DeInitInstance>
}
    f83c:	bf00      	nop
    f83e:	b005      	add	sp, #20
    f840:	f85d fb04 	ldr.w	pc, [sp], #4
    f844:	0001a05c 	.word	0x0001a05c
    f848:	1fff9004 	.word	0x1fff9004

0000f84c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>:
 *END**************************************************************************/
void Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(uint8 Instance,
                                          uint8 Channel,
                                          uint16 DutyCycle,
                                          boolean SoftwareTrigger)
{
    f84c:	b510      	push	{r4, lr}
    f84e:	b088      	sub	sp, #32
    f850:	4604      	mov	r4, r0
    f852:	4608      	mov	r0, r1
    f854:	4611      	mov	r1, r2
    f856:	461a      	mov	r2, r3
    f858:	4623      	mov	r3, r4
    f85a:	f88d 300f 	strb.w	r3, [sp, #15]
    f85e:	4603      	mov	r3, r0
    f860:	f88d 300e 	strb.w	r3, [sp, #14]
    f864:	460b      	mov	r3, r1
    f866:	f8ad 300c 	strh.w	r3, [sp, #12]
    f86a:	4613      	mov	r3, r2
    f86c:	f88d 300b 	strb.w	r3, [sp, #11]

    const Ftm_Pwm_Ip_HwAddrType *const  FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    f870:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f874:	4a5e      	ldr	r2, [pc, #376]	; (f9f0 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x1a4>)
    f876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f87a:	9307      	str	r3, [sp, #28]
    uint16 FirstEdge = DutyCycle;
    f87c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    f880:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint8 PairId = Channel >> 1U;
    f884:	f89d 300e 	ldrb.w	r3, [sp, #14]
    f888:	085b      	lsrs	r3, r3, #1
    f88a:	f88d 3019 	strb.w	r3, [sp, #25]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    f88e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f892:	2b03      	cmp	r3, #3
    f894:	bf94      	ite	ls
    f896:	2301      	movls	r3, #1
    f898:	2300      	movhi	r3, #0
    f89a:	b2db      	uxtb	r3, r3
    f89c:	4618      	mov	r0, r3
    f89e:	f7f1 f825 	bl	8ec <DevAssert>
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
    f8a2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    f8a6:	2b07      	cmp	r3, #7
    f8a8:	bf94      	ite	ls
    f8aa:	2301      	movls	r3, #1
    f8ac:	2300      	movhi	r3, #0
    f8ae:	b2db      	uxtb	r3, r3
    f8b0:	4618      	mov	r0, r3
    f8b2:	f7f1 f81b 	bl	8ec <DevAssert>
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00();
    f8b6:	f007 f86b 	bl	16990 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00>

    /* Stores the new duty cycle */
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycle;
    f8ba:	f89d 200f 	ldrb.w	r2, [sp, #15]
    f8be:	f89d 300e 	ldrb.w	r3, [sp, #14]
    f8c2:	494c      	ldr	r1, [pc, #304]	; (f9f4 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x1a8>)
    f8c4:	00d2      	lsls	r2, r2, #3
    f8c6:	4413      	add	r3, r2
    f8c8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    f8cc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    f8d0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    f8d4:	4619      	mov	r1, r3
    f8d6:	9807      	ldr	r0, [sp, #28]
    f8d8:	f7fe fd18 	bl	e30c <Ftm_Pwm_Ip_GetChannelMode>
    f8dc:	9005      	str	r0, [sp, #20]

#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
    Ftm_Pwm_Ip_CheckNotification(Instance, Channel);
#endif

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    f8de:	f89d 200f 	ldrb.w	r2, [sp, #15]
    f8e2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    f8e6:	4944      	ldr	r1, [pc, #272]	; (f9f8 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x1ac>)
    f8e8:	00d2      	lsls	r2, r2, #3
    f8ea:	4413      	add	r3, r2
    f8ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    f8f0:	2b02      	cmp	r3, #2
    f8f2:	d111      	bne.n	f918 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xcc>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    f8f4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    f8f8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    f8fc:	493e      	ldr	r1, [pc, #248]	; (f9f8 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x1ac>)
    f8fe:	00d2      	lsls	r2, r2, #3
    f900:	4413      	add	r3, r2
    f902:	2201      	movs	r2, #1
    f904:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
    f908:	f89d 100e 	ldrb.w	r1, [sp, #14]
    f90c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    f910:	2300      	movs	r3, #0
    f912:	2200      	movs	r2, #0
    f914:	f000 f8f8 	bl	fb08 <Ftm_Pwm_Ip_SwOutputControl>
                                   Channel,
                                   FTM_PWM_IP_OUTPUT_STATE_LOW,
                                   FALSE);
    }

    if ((FTM_PWM_IP_MODE_EDGE_ALIGNED_HIGH   == ChMode) ||
    f918:	9b05      	ldr	r3, [sp, #20]
    f91a:	2b0a      	cmp	r3, #10
    f91c:	d008      	beq.n	f930 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xe4>
    f91e:	9b05      	ldr	r3, [sp, #20]
    f920:	2b09      	cmp	r3, #9
    f922:	d005      	beq.n	f930 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xe4>
        (FTM_PWM_IP_MODE_EDGE_ALIGNED_LOW    == ChMode) ||
    f924:	9b05      	ldr	r3, [sp, #20]
    f926:	2b12      	cmp	r3, #18
    f928:	d002      	beq.n	f930 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xe4>
        (FTM_PWM_IP_MODE_CENTER_ALIGNED_HIGH == ChMode) ||
    f92a:	9b05      	ldr	r3, [sp, #20]
    f92c:	2b11      	cmp	r3, #17
    f92e:	d10c      	bne.n	f94a <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0xfe>
        (FTM_PWM_IP_MODE_CENTER_ALIGNED_LOW  == ChMode))
    {
        /* Write CV registers and setup duty cycle and phase values */
        (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    f930:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    f934:	f89d 100e 	ldrb.w	r1, [sp, #14]
    f938:	f89d 000f 	ldrb.w	r0, [sp, #15]
    f93c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f940:	9300      	str	r3, [sp, #0]
    f942:	2300      	movs	r3, #0
    f944:	f000 f9ba 	bl	fcbc <Ftm_Pwm_Ip_UpdatePwmChannel>
    f948:	e04c      	b.n	f9e4 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x198>
                                      Channel,
                                      FirstEdge,
                                      0U,
                                      SoftwareTrigger);
    }
    else if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    f94a:	9b05      	ldr	r3, [sp, #20]
    f94c:	2b22      	cmp	r3, #34	; 0x22
    f94e:	d008      	beq.n	f962 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x116>
    f950:	9b05      	ldr	r3, [sp, #20]
    f952:	2b62      	cmp	r3, #98	; 0x62
    f954:	d005      	beq.n	f962 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x116>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
             ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    f956:	9b05      	ldr	r3, [sp, #20]
    f958:	2b61      	cmp	r3, #97	; 0x61
    f95a:	d002      	beq.n	f962 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x116>
             ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    f95c:	9b05      	ldr	r3, [sp, #20]
    f95e:	2b21      	cmp	r3, #33	; 0x21
    f960:	d140      	bne.n	f9e4 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x198>
#endif
             ( FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))

    {
        if((uint16)0U == Ftm_Pwm_Ip_aPhaseShift[Instance][PairId])
    f962:	f89d 200f 	ldrb.w	r2, [sp, #15]
    f966:	f89d 3019 	ldrb.w	r3, [sp, #25]
    f96a:	4924      	ldr	r1, [pc, #144]	; (f9fc <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x1b0>)
    f96c:	0092      	lsls	r2, r2, #2
    f96e:	4413      	add	r3, r2
    f970:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    f974:	2b00      	cmp	r3, #0
    f976:	d10d      	bne.n	f994 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x148>
        {
            /* Write CV registers and setup duty cycle and phase values */
            (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    f978:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    f97c:	f89d 100e 	ldrb.w	r1, [sp, #14]
    f980:	f89d 000f 	ldrb.w	r0, [sp, #15]
    f984:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f988:	9300      	str	r3, [sp, #0]
    f98a:	4613      	mov	r3, r2
    f98c:	2200      	movs	r2, #0
    f98e:	f000 f995 	bl	fcbc <Ftm_Pwm_Ip_UpdatePwmChannel>
    f992:	e027      	b.n	f9e4 <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x198>
                                               FirstEdge,
                                               SoftwareTrigger);
        }
        else
        {
            FirstEdge = Ftm_Pwm_Ip_CalculatePhaseShift(Instance, DutyCycle, Ftm_Pwm_Ip_aPhaseShift[Instance][PairId]);
    f994:	f89d 200f 	ldrb.w	r2, [sp, #15]
    f998:	f89d 3019 	ldrb.w	r3, [sp, #25]
    f99c:	4917      	ldr	r1, [pc, #92]	; (f9fc <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x1b0>)
    f99e:	0092      	lsls	r2, r2, #2
    f9a0:	4413      	add	r3, r2
    f9a2:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    f9a6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    f9aa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f9ae:	4618      	mov	r0, r3
    f9b0:	f7fe fff6 	bl	e9a0 <Ftm_Pwm_Ip_CalculatePhaseShift>
    f9b4:	4603      	mov	r3, r0
    f9b6:	f8ad 301a 	strh.w	r3, [sp, #26]
            /* Write CV registers and setup duty cycle and phase values */
            (void) Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
    f9ba:	f89d 200f 	ldrb.w	r2, [sp, #15]
    f9be:	f89d 3019 	ldrb.w	r3, [sp, #25]
    f9c2:	490e      	ldr	r1, [pc, #56]	; (f9fc <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel+0x1b0>)
    f9c4:	0092      	lsls	r2, r2, #2
    f9c6:	4413      	add	r3, r2
    f9c8:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    f9cc:	f8bd 401a 	ldrh.w	r4, [sp, #26]
    f9d0:	f89d 100e 	ldrb.w	r1, [sp, #14]
    f9d4:	f89d 000f 	ldrb.w	r0, [sp, #15]
    f9d8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    f9dc:	9300      	str	r3, [sp, #0]
    f9de:	4623      	mov	r3, r4
    f9e0:	f000 f96c 	bl	fcbc <Ftm_Pwm_Ip_UpdatePwmChannel>
    else
    {
        /* Do Nothing */
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00();
    f9e4:	f007 f800 	bl	169e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00>

}
    f9e8:	bf00      	nop
    f9ea:	b008      	add	sp, #32
    f9ec:	bd10      	pop	{r4, pc}
    f9ee:	bf00      	nop
    f9f0:	0001a05c 	.word	0x0001a05c
    f9f4:	1fff8e34 	.word	0x1fff8e34
    f9f8:	1fff9004 	.word	0x1fff9004
    f9fc:	1fff8e74 	.word	0x1fff8e74

0000fa00 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty>:
void Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(uint8 Instance,
                                       uint8 Channel,
                                       uint16 Period,
                                       uint16 DutyCycle,
                                       boolean SoftwareTrigger)
{
    fa00:	b510      	push	{r4, lr}
    fa02:	b084      	sub	sp, #16
    fa04:	4604      	mov	r4, r0
    fa06:	4608      	mov	r0, r1
    fa08:	4611      	mov	r1, r2
    fa0a:	461a      	mov	r2, r3
    fa0c:	4623      	mov	r3, r4
    fa0e:	f88d 3007 	strb.w	r3, [sp, #7]
    fa12:	4603      	mov	r3, r0
    fa14:	f88d 3006 	strb.w	r3, [sp, #6]
    fa18:	460b      	mov	r3, r1
    fa1a:	f8ad 3004 	strh.w	r3, [sp, #4]
    fa1e:	4613      	mov	r3, r2
    fa20:	f8ad 3002 	strh.w	r3, [sp, #2]

    uint16 TempDutyCycle = 0U;
    fa24:	2300      	movs	r3, #0
    fa26:	f8ad 300e 	strh.w	r3, [sp, #14]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    fa2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fa2e:	4a33      	ldr	r2, [pc, #204]	; (fafc <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xfc>)
    fa30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fa34:	9302      	str	r3, [sp, #8]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    fa36:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fa3a:	2b03      	cmp	r3, #3
    fa3c:	bf94      	ite	ls
    fa3e:	2301      	movls	r3, #1
    fa40:	2300      	movhi	r3, #0
    fa42:	b2db      	uxtb	r3, r3
    fa44:	4618      	mov	r0, r3
    fa46:	f7f0 ff51 	bl	8ec <DevAssert>
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
    fa4a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fa4e:	2b07      	cmp	r3, #7
    fa50:	bf94      	ite	ls
    fa52:	2301      	movls	r3, #1
    fa54:	2300      	movhi	r3, #0
    fa56:	b2db      	uxtb	r3, r3
    fa58:	4618      	mov	r0, r3
    fa5a:	f7f0 ff47 	bl	8ec <DevAssert>
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01();
    fa5e:	f006 ffe9 	bl	16a34 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01>

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    fa62:	f89d 2007 	ldrb.w	r2, [sp, #7]
    fa66:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fa6a:	4925      	ldr	r1, [pc, #148]	; (fb00 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0x100>)
    fa6c:	00d2      	lsls	r2, r2, #3
    fa6e:	4413      	add	r3, r2
    fa70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    fa74:	2b02      	cmp	r3, #2
    fa76:	d111      	bne.n	fa9c <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0x9c>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
    fa78:	f89d 2007 	ldrb.w	r2, [sp, #7]
    fa7c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fa80:	491f      	ldr	r1, [pc, #124]	; (fb00 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0x100>)
    fa82:	00d2      	lsls	r2, r2, #3
    fa84:	4413      	add	r3, r2
    fa86:	2201      	movs	r2, #1
    fa88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
    fa8c:	f89d 1006 	ldrb.w	r1, [sp, #6]
    fa90:	f89d 0007 	ldrb.w	r0, [sp, #7]
    fa94:	2300      	movs	r3, #0
    fa96:	2200      	movs	r2, #0
    fa98:	f000 f836 	bl	fb08 <Ftm_Pwm_Ip_SwOutputControl>
    else
    {
        /* Do Nothing */
    }

    (void) Ftm_Pwm_Ip_UpdatePwmPeriod(Instance,
    fa9c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    faa0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    faa4:	2200      	movs	r2, #0
    faa6:	4618      	mov	r0, r3
    faa8:	f000 f9b0 	bl	fe0c <Ftm_Pwm_Ip_UpdatePwmPeriod>
                                      Period,
                                      FALSE);
    Ftm_Pwm_Ip_aPeriod[Instance] = Period;
    faac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fab0:	4914      	ldr	r1, [pc, #80]	; (fb04 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0x104>)
    fab2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    fab6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    if (0U == Period)
    faba:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    fabe:	2b00      	cmp	r3, #0
    fac0:	d103      	bne.n	faca <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xca>
    {
        TempDutyCycle = (uint16)0U;
    fac2:	2300      	movs	r3, #0
    fac4:	f8ad 300e 	strh.w	r3, [sp, #14]
    fac8:	e003      	b.n	fad2 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty+0xd2>
    }
    else
    {
        TempDutyCycle = DutyCycle;
    faca:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    face:	f8ad 300e 	strh.w	r3, [sp, #14]
    }


    Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(Instance,
    fad2:	f89d 3018 	ldrb.w	r3, [sp, #24]
    fad6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    fada:	f89d 1006 	ldrb.w	r1, [sp, #6]
    fade:	f89d 0007 	ldrb.w	r0, [sp, #7]
    fae2:	f7ff feb3 	bl	f84c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                         Channel,
                                         TempDutyCycle,
                                         SoftwareTrigger);

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    fae6:	f89d 3018 	ldrb.w	r3, [sp, #24]
    faea:	4619      	mov	r1, r3
    faec:	9802      	ldr	r0, [sp, #8]
    faee:	f7fd ff58 	bl	d9a2 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01();
    faf2:	f006 ffcb 	bl	16a8c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01>
}
    faf6:	bf00      	nop
    faf8:	b004      	add	sp, #16
    fafa:	bd10      	pop	{r4, pc}
    fafc:	0001a05c 	.word	0x0001a05c
    fb00:	1fff9004 	.word	0x1fff9004
    fb04:	1fff8e2c 	.word	0x1fff8e2c

0000fb08 <Ftm_Pwm_Ip_SwOutputControl>:
 **/
void Ftm_Pwm_Ip_SwOutputControl(uint8 Instance,
                                uint8 Channel,
                                Ftm_Pwm_Ip_OutputStateType OutputState,
                                boolean ActiveState)
{
    fb08:	b500      	push	{lr}
    fb0a:	b089      	sub	sp, #36	; 0x24
    fb0c:	9200      	str	r2, [sp, #0]
    fb0e:	461a      	mov	r2, r3
    fb10:	4603      	mov	r3, r0
    fb12:	f88d 3007 	strb.w	r3, [sp, #7]
    fb16:	460b      	mov	r3, r1
    fb18:	f88d 3006 	strb.w	r3, [sp, #6]
    fb1c:	4613      	mov	r3, r2
    fb1e:	f88d 3005 	strb.w	r3, [sp, #5]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    fb22:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fb26:	4a62      	ldr	r2, [pc, #392]	; (fcb0 <Ftm_Pwm_Ip_SwOutputControl+0x1a8>)
    fb28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fb2c:	9305      	str	r3, [sp, #20]
    uint16 SwoCtrlRegVal = 0U;
    fb2e:	2300      	movs	r3, #0
    fb30:	f8ad 301e 	strh.w	r3, [sp, #30]
    uint16 ChannelMask = 0U;
    fb34:	2300      	movs	r3, #0
    fb36:	f8ad 301c 	strh.w	r3, [sp, #28]
    uint16 SwoCtrlBitMask = 0U;
    fb3a:	2300      	movs	r3, #0
    fb3c:	f8ad 301a 	strh.w	r3, [sp, #26]
    uint16 TempPolVal = 0U;
    fb40:	2300      	movs	r3, #0
    fb42:	f8ad 3012 	strh.w	r3, [sp, #18]
    
    Ftm_Pwm_Ip_ChannelModeType ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
    fb46:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fb4a:	4619      	mov	r1, r3
    fb4c:	9805      	ldr	r0, [sp, #20]
    fb4e:	f7fe fbdd 	bl	e30c <Ftm_Pwm_Ip_GetChannelMode>
    fb52:	9003      	str	r0, [sp, #12]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(FTM_PWM_IP_INSTANCE_COUNT > Instance);
    fb54:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fb58:	2b03      	cmp	r3, #3
    fb5a:	bf94      	ite	ls
    fb5c:	2301      	movls	r3, #1
    fb5e:	2300      	movhi	r3, #0
    fb60:	b2db      	uxtb	r3, r3
    fb62:	4618      	mov	r0, r3
    fb64:	f7f0 fec2 	bl	8ec <DevAssert>
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
    fb68:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fb6c:	2b07      	cmp	r3, #7
    fb6e:	bf94      	ite	ls
    fb70:	2301      	movls	r3, #1
    fb72:	2300      	movhi	r3, #0
    fb74:	b2db      	uxtb	r3, r3
    fb76:	4618      	mov	r0, r3
    fb78:	f7f0 feb8 	bl	8ec <DevAssert>
#endif
    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
    fb7c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    fb80:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fb84:	494b      	ldr	r1, [pc, #300]	; (fcb4 <Ftm_Pwm_Ip_SwOutputControl+0x1ac>)
    fb86:	00d2      	lsls	r2, r2, #3
    fb88:	4413      	add	r3, r2
    fb8a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    fb8e:	2b02      	cmp	r3, #2
    fb90:	d109      	bne.n	fba6 <Ftm_Pwm_Ip_SwOutputControl+0x9e>
    {
        Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = (uint16)0U;
    fb92:	f89d 2007 	ldrb.w	r2, [sp, #7]
    fb96:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fb9a:	4947      	ldr	r1, [pc, #284]	; (fcb8 <Ftm_Pwm_Ip_SwOutputControl+0x1b0>)
    fb9c:	00d2      	lsls	r2, r2, #3
    fb9e:	4413      	add	r3, r2
    fba0:	2200      	movs	r2, #0
    fba2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    else
    {
        /* Do Nothing */
    }

    SwoCtrlRegVal = Ftm_Pwm_Ip_GetSoftwareOutputControl(FtmBase);
    fba6:	9805      	ldr	r0, [sp, #20]
    fba8:	f7fe fb57 	bl	e25a <Ftm_Pwm_Ip_GetSoftwareOutputControl>
    fbac:	4603      	mov	r3, r0
    fbae:	f8ad 301e 	strh.w	r3, [sp, #30]

    if ((FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    fbb2:	9b03      	ldr	r3, [sp, #12]
    fbb4:	2b22      	cmp	r3, #34	; 0x22
    fbb6:	d008      	beq.n	fbca <Ftm_Pwm_Ip_SwOutputControl+0xc2>
    fbb8:	9b03      	ldr	r3, [sp, #12]
    fbba:	2b62      	cmp	r3, #98	; 0x62
    fbbc:	d005      	beq.n	fbca <Ftm_Pwm_Ip_SwOutputControl+0xc2>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    fbbe:	9b03      	ldr	r3, [sp, #12]
    fbc0:	2b61      	cmp	r3, #97	; 0x61
    fbc2:	d002      	beq.n	fbca <Ftm_Pwm_Ip_SwOutputControl+0xc2>
        (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    fbc4:	9b03      	ldr	r3, [sp, #12]
    fbc6:	2b21      	cmp	r3, #33	; 0x21
    fbc8:	d103      	bne.n	fbd2 <Ftm_Pwm_Ip_SwOutputControl+0xca>
#endif
        (FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))
    {
        /* Two consecutive bits (n and n+1) */
        ChannelMask = (uint16)3U;
    fbca:	2303      	movs	r3, #3
    fbcc:	f8ad 301c 	strh.w	r3, [sp, #28]
    fbd0:	e002      	b.n	fbd8 <Ftm_Pwm_Ip_SwOutputControl+0xd0>
    }
    else
    {
        ChannelMask = (uint16)1U;
    fbd2:	2301      	movs	r3, #1
    fbd4:	f8ad 301c 	strh.w	r3, [sp, #28]
    }

    TempPolVal = (uint16)Ftm_Pwm_Ip_GetPolInstance(FtmBase) & (uint16)((uint32)ChannelMask << (uint16)Channel);
    fbd8:	9805      	ldr	r0, [sp, #20]
    fbda:	f7fe fb47 	bl	e26c <Ftm_Pwm_Ip_GetPolInstance>
    fbde:	4603      	mov	r3, r0
    fbe0:	4619      	mov	r1, r3
    fbe2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    fbe6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fbea:	fa02 f303 	lsl.w	r3, r2, r3
    fbee:	b29b      	uxth	r3, r3
    fbf0:	400b      	ands	r3, r1
    fbf2:	f8ad 3012 	strh.w	r3, [sp, #18]

    /* Shift the polarity bit to match the output control value position (CHnOCV) in SWOCTRL register */
    TempPolVal = (uint16)((uint32)TempPolVal << FTM_SWOCTRL_CH0OCV_SHIFT);
    fbf6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    fbfa:	021b      	lsls	r3, r3, #8
    fbfc:	f8ad 3012 	strh.w	r3, [sp, #18]

    /* Clear the CHnOCV bit(s) from the SwoCtrlRegVal for the given channel
       and next odd channel if phase-shifted or combined */
    SwoCtrlRegVal &= (uint16)(~((uint32)ChannelMask << ((uint16)Channel + FTM_SWOCTRL_CH0OCV_SHIFT)));
    fc00:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    fc04:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fc08:	3308      	adds	r3, #8
    fc0a:	fa02 f303 	lsl.w	r3, r2, r3
    fc0e:	b29b      	uxth	r3, r3
    fc10:	43db      	mvns	r3, r3
    fc12:	b29a      	uxth	r2, r3
    fc14:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    fc18:	4013      	ands	r3, r2
    fc1a:	f8ad 301e 	strh.w	r3, [sp, #30]

     /* If software output control is enabled */
    if (TRUE == ActiveState)
    fc1e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    fc22:	2b00      	cmp	r3, #0
    fc24:	d027      	beq.n	fc76 <Ftm_Pwm_Ip_SwOutputControl+0x16e>
    {
        if (FTM_PWM_IP_OUTPUT_STATE_HIGH == OutputState)
    fc26:	9b00      	ldr	r3, [sp, #0]
    fc28:	2b01      	cmp	r3, #1
    fc2a:	d109      	bne.n	fc40 <Ftm_Pwm_Ip_SwOutputControl+0x138>
        {
            /* Sw control on given channel was requested so corresponding channel bits will be set to "1" */
            SwoCtrlBitMask = (uint16)((uint32)ChannelMask << ((uint16)Channel + FTM_SWOCTRL_CH0OCV_SHIFT));
    fc2c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    fc30:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fc34:	3308      	adds	r3, #8
    fc36:	fa02 f303 	lsl.w	r3, r2, r3
    fc3a:	f8ad 301a 	strh.w	r3, [sp, #26]
    fc3e:	e002      	b.n	fc46 <Ftm_Pwm_Ip_SwOutputControl+0x13e>
        }
        else
        {
            SwoCtrlBitMask = (uint16)0U;
    fc40:	2300      	movs	r3, #0
    fc42:	f8ad 301a 	strh.w	r3, [sp, #26]
        }

        /* XOR between polarity bit(s) of the given channel register (shifted left by 8) and the desired sw output value
           will provide the correct values of the SWOCTRL*/
        SwoCtrlRegVal |= (SwoCtrlBitMask ^ TempPolVal);
    fc46:	f8bd 201a 	ldrh.w	r2, [sp, #26]
    fc4a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    fc4e:	4053      	eors	r3, r2
    fc50:	b29a      	uxth	r2, r3
    fc52:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    fc56:	4313      	orrs	r3, r2
    fc58:	f8ad 301e 	strh.w	r3, [sp, #30]

        /* Software output control is requested so CHnOC bit of given channel will be set */
        SwoCtrlRegVal |= (uint16)((uint32)ChannelMask << (uint16)Channel);
    fc5c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    fc60:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fc64:	fa02 f303 	lsl.w	r3, r2, r3
    fc68:	b29a      	uxth	r2, r3
    fc6a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    fc6e:	4313      	orrs	r3, r2
    fc70:	f8ad 301e 	strh.w	r3, [sp, #30]
    fc74:	e00d      	b.n	fc92 <Ftm_Pwm_Ip_SwOutputControl+0x18a>
    }
    else
    {
        /* Software output control is disabled so CHnOC bit of given channel will be cleared */
        SwoCtrlRegVal &= (uint16)(~((uint32)ChannelMask << (uint16)Channel));
    fc76:	f8bd 201c 	ldrh.w	r2, [sp, #28]
    fc7a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fc7e:	fa02 f303 	lsl.w	r3, r2, r3
    fc82:	b29b      	uxth	r3, r3
    fc84:	43db      	mvns	r3, r3
    fc86:	b29a      	uxth	r2, r3
    fc88:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    fc8c:	4013      	ands	r3, r2
    fc8e:	f8ad 301e 	strh.w	r3, [sp, #30]
    }

    /* Write temporary variable into SWOCTRL register */
    Ftm_Pwm_Ip_SoftwareOutputControl(FtmBase, SwoCtrlRegVal);
    fc92:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    fc96:	4619      	mov	r1, r3
    fc98:	9805      	ldr	r0, [sp, #20]
    fc9a:	f7fe fa7e 	bl	e19a <Ftm_Pwm_Ip_SoftwareOutputControl>

    /* Use software synchronization to update SWOCTRL register immediately */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
    fc9e:	2101      	movs	r1, #1
    fca0:	9805      	ldr	r0, [sp, #20]
    fca2:	f7fd fe7e 	bl	d9a2 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
    fca6:	bf00      	nop
    fca8:	b009      	add	sp, #36	; 0x24
    fcaa:	f85d fb04 	ldr.w	pc, [sp], #4
    fcae:	bf00      	nop
    fcb0:	0001a05c 	.word	0x0001a05c
    fcb4:	1fff9004 	.word	0x1fff9004
    fcb8:	1fff8e34 	.word	0x1fff8e34

0000fcbc <Ftm_Pwm_Ip_UpdatePwmChannel>:
Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdatePwmChannel(uint8 Instance,
                                                  uint8 Channel,
                                                  uint16 FirstEdge,
                                                  uint16 SecondEdge,
                                                  boolean SoftwareTrigger)
{
    fcbc:	b510      	push	{r4, lr}
    fcbe:	b086      	sub	sp, #24
    fcc0:	4604      	mov	r4, r0
    fcc2:	4608      	mov	r0, r1
    fcc4:	4611      	mov	r1, r2
    fcc6:	461a      	mov	r2, r3
    fcc8:	4623      	mov	r3, r4
    fcca:	f88d 3007 	strb.w	r3, [sp, #7]
    fcce:	4603      	mov	r3, r0
    fcd0:	f88d 3006 	strb.w	r3, [sp, #6]
    fcd4:	460b      	mov	r3, r1
    fcd6:	f8ad 3004 	strh.w	r3, [sp, #4]
    fcda:	4613      	mov	r3, r2
    fcdc:	f8ad 3002 	strh.w	r3, [sp, #2]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    fce0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fce4:	4a47      	ldr	r2, [pc, #284]	; (fe04 <Ftm_Pwm_Ip_UpdatePwmChannel+0x148>)
    fce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fcea:	9303      	str	r3, [sp, #12]
    Ftm_Pwm_Ip_StatusType RetStatus = FTM_PWM_IP_STATUS_SUCCESS;
    fcec:	2300      	movs	r3, #0
    fcee:	9305      	str	r3, [sp, #20]
    uint16 HwFirstEdge = 0U;
    fcf0:	2300      	movs	r3, #0
    fcf2:	f8ad 3012 	strh.w	r3, [sp, #18]
    uint16 HwSecondEdge = 0U;
    fcf6:	2300      	movs	r3, #0
    fcf8:	f8ad 3010 	strh.w	r3, [sp, #16]
    uint16 FtmPeriod = 0U;
    fcfc:	2300      	movs	r3, #0
    fcfe:	f8ad 300a 	strh.w	r3, [sp, #10]
    uint8 ChPairId = (uint8)(Channel >> 1U);
    fd02:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fd06:	085b      	lsrs	r3, r3, #1
    fd08:	f88d 3009 	strb.w	r3, [sp, #9]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    fd0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fd10:	2b03      	cmp	r3, #3
    fd12:	bf94      	ite	ls
    fd14:	2301      	movls	r3, #1
    fd16:	2300      	movhi	r3, #0
    fd18:	b2db      	uxtb	r3, r3
    fd1a:	4618      	mov	r0, r3
    fd1c:	f7f0 fde6 	bl	8ec <DevAssert>
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
    fd20:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fd24:	2b07      	cmp	r3, #7
    fd26:	bf94      	ite	ls
    fd28:	2301      	movls	r3, #1
    fd2a:	2300      	movhi	r3, #0
    fd2c:	b2db      	uxtb	r3, r3
    fd2e:	4618      	mov	r0, r3
    fd30:	f7f0 fddc 	bl	8ec <DevAssert>
#endif

    /* Get the period in the FTM Instance */
    FtmPeriod = Ftm_Pwm_Ip_aPeriod[Instance];
    fd34:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fd38:	4a33      	ldr	r2, [pc, #204]	; (fe08 <Ftm_Pwm_Ip_UpdatePwmChannel+0x14c>)
    fd3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    fd3e:	f8ad 300a 	strh.w	r3, [sp, #10]

    if (((FirstEdge <= FtmPeriod) && (SecondEdge <= FtmPeriod)) || (0U == FtmPeriod))
    fd42:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    fd46:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    fd4a:	429a      	cmp	r2, r3
    fd4c:	d805      	bhi.n	fd5a <Ftm_Pwm_Ip_UpdatePwmChannel+0x9e>
    fd4e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    fd52:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    fd56:	429a      	cmp	r2, r3
    fd58:	d903      	bls.n	fd62 <Ftm_Pwm_Ip_UpdatePwmChannel+0xa6>
    fd5a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    fd5e:	2b00      	cmp	r3, #0
    fd60:	d108      	bne.n	fd74 <Ftm_Pwm_Ip_UpdatePwmChannel+0xb8>
    {
        HwFirstEdge = FirstEdge;
    fd62:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    fd66:	f8ad 3012 	strh.w	r3, [sp, #18]
        HwSecondEdge = SecondEdge;
    fd6a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    fd6e:	f8ad 3010 	strh.w	r3, [sp, #16]
    fd72:	e001      	b.n	fd78 <Ftm_Pwm_Ip_UpdatePwmChannel+0xbc>
    }
    else
    {
        RetStatus = FTM_PWM_IP_STATUS_ERROR;
    fd74:	2301      	movs	r3, #1
    fd76:	9305      	str	r3, [sp, #20]
    }

    if (FTM_PWM_IP_STATUS_SUCCESS == RetStatus)
    fd78:	9b05      	ldr	r3, [sp, #20]
    fd7a:	2b00      	cmp	r3, #0
    fd7c:	d13e      	bne.n	fdfc <Ftm_Pwm_Ip_UpdatePwmChannel+0x140>
    {
        if (TRUE == Ftm_Pwm_Ip_GetDualChnCombineCmd(FtmBase, ChPairId))
    fd7e:	f89d 3009 	ldrb.w	r3, [sp, #9]
    fd82:	4619      	mov	r1, r3
    fd84:	9803      	ldr	r0, [sp, #12]
    fd86:	f7fd feac 	bl	dae2 <Ftm_Pwm_Ip_GetDualChnCombineCmd>
    fd8a:	4603      	mov	r3, r0
    fd8c:	2b00      	cmp	r3, #0
    fd8e:	d016      	beq.n	fdbe <Ftm_Pwm_Ip_UpdatePwmChannel+0x102>
        {
            /* Modify the initial value in the channel n match edge */
            Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)(ChPairId * 2U), HwFirstEdge);
    fd90:	f89d 3009 	ldrb.w	r3, [sp, #9]
    fd94:	005b      	lsls	r3, r3, #1
    fd96:	b2db      	uxtb	r3, r3
    fd98:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    fd9c:	4619      	mov	r1, r3
    fd9e:	9803      	ldr	r0, [sp, #12]
    fda0:	f7fd fd37 	bl	d812 <Ftm_Pwm_Ip_SetChnCountVal>

            /* Modify the initial value in the channel (n+1) match edge */
            Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)((ChPairId * 2U) + 1U), HwSecondEdge);
    fda4:	f89d 3009 	ldrb.w	r3, [sp, #9]
    fda8:	005b      	lsls	r3, r3, #1
    fdaa:	b2db      	uxtb	r3, r3
    fdac:	3301      	adds	r3, #1
    fdae:	b2db      	uxtb	r3, r3
    fdb0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    fdb4:	4619      	mov	r1, r3
    fdb6:	9803      	ldr	r0, [sp, #12]
    fdb8:	f7fd fd2b 	bl	d812 <Ftm_Pwm_Ip_SetChnCountVal>
    fdbc:	e018      	b.n	fdf0 <Ftm_Pwm_Ip_UpdatePwmChannel+0x134>
        }
        else
        {
            /* Channel value is divided by 2 for up down counter mode to keep same duty */
            if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
    fdbe:	9803      	ldr	r0, [sp, #12]
    fdc0:	f7fd fbb0 	bl	d524 <Ftm_Pwm_Ip_GetCpwms>
    fdc4:	4603      	mov	r3, r0
    fdc6:	2b01      	cmp	r3, #1
    fdc8:	d10a      	bne.n	fde0 <Ftm_Pwm_Ip_UpdatePwmChannel+0x124>
            {
                Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channel, (uint16)(HwFirstEdge >> 1U));
    fdca:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    fdce:	085b      	lsrs	r3, r3, #1
    fdd0:	b29a      	uxth	r2, r3
    fdd2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fdd6:	4619      	mov	r1, r3
    fdd8:	9803      	ldr	r0, [sp, #12]
    fdda:	f7fd fd1a 	bl	d812 <Ftm_Pwm_Ip_SetChnCountVal>
    fdde:	e007      	b.n	fdf0 <Ftm_Pwm_Ip_UpdatePwmChannel+0x134>
            }
            else
            {
                Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channel, HwFirstEdge);
    fde0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
    fde4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fde8:	4619      	mov	r1, r3
    fdea:	9803      	ldr	r0, [sp, #12]
    fdec:	f7fd fd11 	bl	d812 <Ftm_Pwm_Ip_SetChnCountVal>
            }
        }

        /* Software trigger is generated to change CV registers */
        /* Before this please configure sync mechanism to use software trigger */
        Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    fdf0:	f89d 3020 	ldrb.w	r3, [sp, #32]
    fdf4:	4619      	mov	r1, r3
    fdf6:	9803      	ldr	r0, [sp, #12]
    fdf8:	f7fd fdd3 	bl	d9a2 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
    }

    return RetStatus;
    fdfc:	9b05      	ldr	r3, [sp, #20]
}
    fdfe:	4618      	mov	r0, r3
    fe00:	b006      	add	sp, #24
    fe02:	bd10      	pop	{r4, pc}
    fe04:	0001a05c 	.word	0x0001a05c
    fe08:	1fff8e2c 	.word	0x1fff8e2c

0000fe0c <Ftm_Pwm_Ip_UpdatePwmPeriod>:
 * @implements Ftm_Pwm_Ip_UpdatePwmPeriod_Activity
 **/
Ftm_Pwm_Ip_StatusType Ftm_Pwm_Ip_UpdatePwmPeriod(uint8 Instance,
                                                 uint32 NewValue,
                                                 boolean SoftwareTrigger)
{
    fe0c:	b500      	push	{lr}
    fe0e:	b085      	sub	sp, #20
    fe10:	4603      	mov	r3, r0
    fe12:	9100      	str	r1, [sp, #0]
    fe14:	f88d 3007 	strb.w	r3, [sp, #7]
    fe18:	4613      	mov	r3, r2
    fe1a:	f88d 3006 	strb.w	r3, [sp, #6]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    fe1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fe22:	4a1b      	ldr	r2, [pc, #108]	; (fe90 <Ftm_Pwm_Ip_UpdatePwmPeriod+0x84>)
    fe24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    fe28:	9302      	str	r3, [sp, #8]
    uint32 FtmPeriod = 0U;
    fe2a:	2300      	movs	r3, #0
    fe2c:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    fe2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fe32:	2b03      	cmp	r3, #3
    fe34:	bf94      	ite	ls
    fe36:	2301      	movls	r3, #1
    fe38:	2300      	movhi	r3, #0
    fe3a:	b2db      	uxtb	r3, r3
    fe3c:	4618      	mov	r0, r3
    fe3e:	f7f0 fd55 	bl	8ec <DevAssert>
#endif
    FtmPeriod = NewValue;
    fe42:	9b00      	ldr	r3, [sp, #0]
    fe44:	9303      	str	r3, [sp, #12]
    
    /* Store the new period */
    Ftm_Pwm_Ip_aPeriod[Instance] = (uint16)NewValue;
    fe46:	f89d 3007 	ldrb.w	r3, [sp, #7]
    fe4a:	9a00      	ldr	r2, [sp, #0]
    fe4c:	b291      	uxth	r1, r2
    fe4e:	4a11      	ldr	r2, [pc, #68]	; (fe94 <Ftm_Pwm_Ip_UpdatePwmPeriod+0x88>)
    fe50:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    /* Check the signal operation in which PWM mode */
    if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
    fe54:	9802      	ldr	r0, [sp, #8]
    fe56:	f7fd fb65 	bl	d524 <Ftm_Pwm_Ip_GetCpwms>
    fe5a:	4603      	mov	r3, r0
    fe5c:	2b01      	cmp	r3, #1
    fe5e:	d103      	bne.n	fe68 <Ftm_Pwm_Ip_UpdatePwmPeriod+0x5c>
    {
        FtmPeriod = (FtmPeriod >> 1U);
    fe60:	9b03      	ldr	r3, [sp, #12]
    fe62:	085b      	lsrs	r3, r3, #1
    fe64:	9303      	str	r3, [sp, #12]
    fe66:	e002      	b.n	fe6e <Ftm_Pwm_Ip_UpdatePwmPeriod+0x62>
    }
    else
    {
        FtmPeriod = (FtmPeriod - 1U);
    fe68:	9b03      	ldr	r3, [sp, #12]
    fe6a:	3b01      	subs	r3, #1
    fe6c:	9303      	str	r3, [sp, #12]
    }
    /* Set the new modulo value into MOD register */
    Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(FtmPeriod));
    fe6e:	9b03      	ldr	r3, [sp, #12]
    fe70:	b29b      	uxth	r3, r3
    fe72:	4619      	mov	r1, r3
    fe74:	9802      	ldr	r0, [sp, #8]
    fe76:	f7fd fba8 	bl	d5ca <Ftm_Pwm_Ip_SetMod>
    /* Software trigger is generated to change MOD registers */
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
    fe7a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fe7e:	4619      	mov	r1, r3
    fe80:	9802      	ldr	r0, [sp, #8]
    fe82:	f7fd fd8e 	bl	d9a2 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    return FTM_PWM_IP_STATUS_SUCCESS;
    fe86:	2300      	movs	r3, #0
}
    fe88:	4618      	mov	r0, r3
    fe8a:	b005      	add	sp, #20
    fe8c:	f85d fb04 	ldr.w	pc, [sp], #4
    fe90:	0001a05c 	.word	0x0001a05c
    fe94:	1fff8e2c 	.word	0x1fff8e2c

0000fe98 <Ftm_Pwm_Ip_GetOutputState>:
 *
 * @implements Ftm_Pwm_Ip_GetOutputState_Activity
 **/
Ftm_Pwm_Ip_OutputStateType Ftm_Pwm_Ip_GetOutputState(uint8 Instance,
                                                     uint8 Channel)
{
    fe98:	b500      	push	{lr}
    fe9a:	b085      	sub	sp, #20
    fe9c:	4603      	mov	r3, r0
    fe9e:	460a      	mov	r2, r1
    fea0:	f88d 3007 	strb.w	r3, [sp, #7]
    fea4:	4613      	mov	r3, r2
    fea6:	f88d 3006 	strb.w	r3, [sp, #6]

    const Ftm_Pwm_Ip_HwAddrType *const FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    feaa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    feae:	4a17      	ldr	r2, [pc, #92]	; (ff0c <Ftm_Pwm_Ip_GetOutputState+0x74>)
    feb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    feb4:	9302      	str	r3, [sp, #8]
    Ftm_Pwm_Ip_OutputStateType OutputValue;

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    feb6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    feba:	2b03      	cmp	r3, #3
    febc:	bf94      	ite	ls
    febe:	2301      	movls	r3, #1
    fec0:	2300      	movhi	r3, #0
    fec2:	b2db      	uxtb	r3, r3
    fec4:	4618      	mov	r0, r3
    fec6:	f7f0 fd11 	bl	8ec <DevAssert>
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
    feca:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fece:	2b07      	cmp	r3, #7
    fed0:	bf94      	ite	ls
    fed2:	2301      	movls	r3, #1
    fed4:	2300      	movhi	r3, #0
    fed6:	b2db      	uxtb	r3, r3
    fed8:	4618      	mov	r0, r3
    feda:	f7f0 fd07 	bl	8ec <DevAssert>
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03();
    fede:	f006 fe4d 	bl	16b7c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03>

    if (TRUE == Ftm_Pwm_Ip_GetChOutputValue(FtmBase, Channel))
    fee2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fee6:	4619      	mov	r1, r3
    fee8:	9802      	ldr	r0, [sp, #8]
    feea:	f7fd fc7c 	bl	d7e6 <Ftm_Pwm_Ip_GetChOutputValue>
    feee:	4603      	mov	r3, r0
    fef0:	2b00      	cmp	r3, #0
    fef2:	d002      	beq.n	fefa <Ftm_Pwm_Ip_GetOutputState+0x62>
    {
        OutputValue = FTM_PWM_IP_OUTPUT_STATE_HIGH;
    fef4:	2301      	movs	r3, #1
    fef6:	9303      	str	r3, [sp, #12]
    fef8:	e001      	b.n	fefe <Ftm_Pwm_Ip_GetOutputState+0x66>
    }
    else
    {
        OutputValue = FTM_PWM_IP_OUTPUT_STATE_LOW;
    fefa:	2300      	movs	r3, #0
    fefc:	9303      	str	r3, [sp, #12]
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03();
    fefe:	f006 fe69 	bl	16bd4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03>

    return OutputValue;
    ff02:	9b03      	ldr	r3, [sp, #12]
}
    ff04:	4618      	mov	r0, r3
    ff06:	b005      	add	sp, #20
    ff08:	f85d fb04 	ldr.w	pc, [sp], #4
    ff0c:	0001a05c 	.word	0x0001a05c

0000ff10 <Ftm_Pwm_Ip_DisableNotification>:
 * Description   : This function disables the user notifications for the corresponding type of notification
 *
 * @implements Ftm_Pwm_Ip_DisableNotification_Activity
 **/
void Ftm_Pwm_Ip_DisableNotification(uint8 Instance, Ftm_Pwm_Ip_NotifType NotifType)
{
    ff10:	b500      	push	{lr}
    ff12:	b087      	sub	sp, #28
    ff14:	4603      	mov	r3, r0
    ff16:	9100      	str	r1, [sp, #0]
    ff18:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType *const FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
    ff1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ff20:	4a47      	ldr	r2, [pc, #284]	; (10040 <Ftm_Pwm_Ip_DisableNotification+0x130>)
    ff22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ff26:	9305      	str	r3, [sp, #20]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 PairChId;
    uint8 ChannelId = (uint8)NotifType;
    ff28:	9b00      	ldr	r3, [sp, #0]
    ff2a:	f88d 3013 	strb.w	r3, [sp, #19]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
    ff2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ff32:	2b03      	cmp	r3, #3
    ff34:	bf94      	ite	ls
    ff36:	2301      	movls	r3, #1
    ff38:	2300      	movhi	r3, #0
    ff3a:	b2db      	uxtb	r3, r3
    ff3c:	4618      	mov	r0, r3
    ff3e:	f7f0 fcd5 	bl	8ec <DevAssert>
    if((FTM_PWM_IP_OVERFLOW_NOTIFICATION     != NotifType)  &&
    ff42:	9b00      	ldr	r3, [sp, #0]
    ff44:	2b08      	cmp	r3, #8
    ff46:	d00f      	beq.n	ff68 <Ftm_Pwm_Ip_DisableNotification+0x58>
    ff48:	9b00      	ldr	r3, [sp, #0]
    ff4a:	2b09      	cmp	r3, #9
    ff4c:	d00c      	beq.n	ff68 <Ftm_Pwm_Ip_DisableNotification+0x58>
       (FTM_PWM_IP_RELOAD_POINT_NOTIFICATION != NotifType)  &&
    ff4e:	9b00      	ldr	r3, [sp, #0]
    ff50:	2b0a      	cmp	r3, #10
    ff52:	d009      	beq.n	ff68 <Ftm_Pwm_Ip_DisableNotification+0x58>
       (FTM_PWM_IP_FAULT_NOTIFICATION        != NotifType))
    {
        DevAssert(ChannelId < (uint8)FTM_PWM_IP_CHANNEL_COUNT);
    ff54:	f89d 3013 	ldrb.w	r3, [sp, #19]
    ff58:	2b07      	cmp	r3, #7
    ff5a:	bf94      	ite	ls
    ff5c:	2301      	movls	r3, #1
    ff5e:	2300      	movhi	r3, #0
    ff60:	b2db      	uxtb	r3, r3
    ff62:	4618      	mov	r0, r3
    ff64:	f7f0 fcc2 	bl	8ec <DevAssert>
    }
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04();
    ff68:	f006 fe5a 	bl	16c20 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04>

    if((FTM_PWM_IP_CHANNEL_0_NOTIFICATION == NotifType) ||
    ff6c:	9b00      	ldr	r3, [sp, #0]
    ff6e:	2b00      	cmp	r3, #0
    ff70:	d014      	beq.n	ff9c <Ftm_Pwm_Ip_DisableNotification+0x8c>
    ff72:	9b00      	ldr	r3, [sp, #0]
    ff74:	2b01      	cmp	r3, #1
    ff76:	d011      	beq.n	ff9c <Ftm_Pwm_Ip_DisableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_1_NOTIFICATION == NotifType) ||
    ff78:	9b00      	ldr	r3, [sp, #0]
    ff7a:	2b02      	cmp	r3, #2
    ff7c:	d00e      	beq.n	ff9c <Ftm_Pwm_Ip_DisableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_2_NOTIFICATION == NotifType) ||
    ff7e:	9b00      	ldr	r3, [sp, #0]
    ff80:	2b03      	cmp	r3, #3
    ff82:	d00b      	beq.n	ff9c <Ftm_Pwm_Ip_DisableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_3_NOTIFICATION == NotifType) ||
    ff84:	9b00      	ldr	r3, [sp, #0]
    ff86:	2b04      	cmp	r3, #4
    ff88:	d008      	beq.n	ff9c <Ftm_Pwm_Ip_DisableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_4_NOTIFICATION == NotifType) ||
    ff8a:	9b00      	ldr	r3, [sp, #0]
    ff8c:	2b05      	cmp	r3, #5
    ff8e:	d005      	beq.n	ff9c <Ftm_Pwm_Ip_DisableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_5_NOTIFICATION == NotifType) ||
    ff90:	9b00      	ldr	r3, [sp, #0]
    ff92:	2b06      	cmp	r3, #6
    ff94:	d002      	beq.n	ff9c <Ftm_Pwm_Ip_DisableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_6_NOTIFICATION == NotifType) ||
    ff96:	9b00      	ldr	r3, [sp, #0]
    ff98:	2b07      	cmp	r3, #7
    ff9a:	d136      	bne.n	1000a <Ftm_Pwm_Ip_DisableNotification+0xfa>
       (FTM_PWM_IP_CHANNEL_7_NOTIFICATION == NotifType))
    {
        PairChId = (uint8)(ChannelId >> 1U);
    ff9c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    ffa0:	085b      	lsrs	r3, r3, #1
    ffa2:	f88d 3012 	strb.w	r3, [sp, #18]
        /* Get the mode of channels */
        ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, ChannelId);
    ffa6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    ffaa:	4619      	mov	r1, r3
    ffac:	9805      	ldr	r0, [sp, #20]
    ffae:	f7fe f9ad 	bl	e30c <Ftm_Pwm_Ip_GetChannelMode>
    ffb2:	9003      	str	r0, [sp, #12]
#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
        /* Clear notification state of given channel */
        Ftm_Pwm_Ip_aNotifIrq[Instance][ChannelId] = FTM_PWM_IP_NO_EDGE;
#endif
        /* Disable interrupts for given channel */
        Ftm_Pwm_Ip_DisableCmpIrq(Instance, ChannelId);
    ffb4:	f89d 2013 	ldrb.w	r2, [sp, #19]
    ffb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ffbc:	4611      	mov	r1, r2
    ffbe:	4618      	mov	r0, r3
    ffc0:	f7fe fde2 	bl	eb88 <Ftm_Pwm_Ip_DisableCmpIrq>

        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
    ffc4:	9b03      	ldr	r3, [sp, #12]
    ffc6:	2b22      	cmp	r3, #34	; 0x22
    ffc8:	d008      	beq.n	ffdc <Ftm_Pwm_Ip_DisableNotification+0xcc>
    ffca:	9b03      	ldr	r3, [sp, #12]
    ffcc:	2b62      	cmp	r3, #98	; 0x62
    ffce:	d005      	beq.n	ffdc <Ftm_Pwm_Ip_DisableNotification+0xcc>
    #if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
            ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
    ffd0:	9b03      	ldr	r3, [sp, #12]
    ffd2:	2b61      	cmp	r3, #97	; 0x61
    ffd4:	d002      	beq.n	ffdc <Ftm_Pwm_Ip_DisableNotification+0xcc>
            ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
    ffd6:	9b03      	ldr	r3, [sp, #12]
    ffd8:	2b21      	cmp	r3, #33	; 0x21
    ffda:	d129      	bne.n	10030 <Ftm_Pwm_Ip_DisableNotification+0x120>
            Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)(PairChId * 2U)] = FTM_PWM_IP_NO_EDGE;
            /* Clear notification state of an odd channel */
            Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)((PairChId * 2U) + 1U)] = FTM_PWM_IP_NO_EDGE;
#endif
            /* Disable interrupts for an even channel */
            Ftm_Pwm_Ip_DisableCmpIrq(Instance,(uint8)(PairChId * 2U));
    ffdc:	f89d 3012 	ldrb.w	r3, [sp, #18]
    ffe0:	005b      	lsls	r3, r3, #1
    ffe2:	b2da      	uxtb	r2, r3
    ffe4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ffe8:	4611      	mov	r1, r2
    ffea:	4618      	mov	r0, r3
    ffec:	f7fe fdcc 	bl	eb88 <Ftm_Pwm_Ip_DisableCmpIrq>
            /* Disable interrupts for an odd channel */
            Ftm_Pwm_Ip_DisableCmpIrq(Instance,(uint8)((PairChId * 2U) + 1U));
    fff0:	f89d 3012 	ldrb.w	r3, [sp, #18]
    fff4:	005b      	lsls	r3, r3, #1
    fff6:	b2db      	uxtb	r3, r3
    fff8:	3301      	adds	r3, #1
    fffa:	b2da      	uxtb	r2, r3
    fffc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10000:	4611      	mov	r1, r2
   10002:	4618      	mov	r0, r3
   10004:	f7fe fdc0 	bl	eb88 <Ftm_Pwm_Ip_DisableCmpIrq>
        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
   10008:	e012      	b.n	10030 <Ftm_Pwm_Ip_DisableNotification+0x120>
        (void) PairChId;
        (void) ChannelId;
    }
#endif
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    else if(FTM_PWM_IP_FAULT_NOTIFICATION == NotifType)
   1000a:	9b00      	ldr	r3, [sp, #0]
   1000c:	2b0a      	cmp	r3, #10
   1000e:	d107      	bne.n	10020 <Ftm_Pwm_Ip_DisableNotification+0x110>
    {
        /* Disable the generation of an interrupt when a fault is detected by FTM and the FTM fault control is enabled.*/
        Ftm_Pwm_Ip_SetFaultInterruptEnable(FtmBase, FALSE);
   10010:	2100      	movs	r1, #0
   10012:	9805      	ldr	r0, [sp, #20]
   10014:	f7fe fb79 	bl	e70a <Ftm_Pwm_Ip_SetFaultInterruptEnable>

        /* Clear fault interrupt flag of a given FTM module */
        Ftm_Pwm_Ip_ClearFaultFlag(FtmBase);
   10018:	9805      	ldr	r0, [sp, #20]
   1001a:	f7fe fb8c 	bl	e736 <Ftm_Pwm_Ip_ClearFaultFlag>
   1001e:	e008      	b.n	10032 <Ftm_Pwm_Ip_DisableNotification+0x122>
    }
#endif
    else
    {
        /* Clear time-overflow interrupt flag of given module */
        Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
   10020:	9805      	ldr	r0, [sp, #20]
   10022:	f7fd faa4 	bl	d56e <Ftm_Pwm_Ip_ClearTimerOverflow>

        /* Disable time-overflow interrupt */
        Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, FALSE);
   10026:	2100      	movs	r1, #0
   10028:	9805      	ldr	r0, [sp, #20]
   1002a:	f7fd fa89 	bl	d540 <Ftm_Pwm_Ip_SetTimerOverflowInt>
   1002e:	e000      	b.n	10032 <Ftm_Pwm_Ip_DisableNotification+0x122>
        if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
   10030:	bf00      	nop
        (void) ChMode;
        (void) PairChId;
        (void) ChannelId;
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04();
   10032:	f006 fe21 	bl	16c78 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04>
}
   10036:	bf00      	nop
   10038:	b007      	add	sp, #28
   1003a:	f85d fb04 	ldr.w	pc, [sp], #4
   1003e:	bf00      	nop
   10040:	0001a05c 	.word	0x0001a05c

00010044 <Ftm_Pwm_Ip_SetNormalNotificationCase>:

static void Ftm_Pwm_Ip_SetNormalNotificationCase(uint8 Instance, uint8 Channel)
{
   10044:	b500      	push	{lr}
   10046:	b087      	sub	sp, #28
   10048:	4603      	mov	r3, r0
   1004a:	460a      	mov	r2, r1
   1004c:	f88d 3007 	strb.w	r3, [sp, #7]
   10050:	4613      	mov	r3, r2
   10052:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   10056:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1005a:	4a22      	ldr	r2, [pc, #136]	; (100e4 <Ftm_Pwm_Ip_SetNormalNotificationCase+0xa0>)
   1005c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10060:	9305      	str	r3, [sp, #20]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint8 PairChId = (uint8)(Channel >> 1U);
   10062:	f89d 3006 	ldrb.w	r3, [sp, #6]
   10066:	085b      	lsrs	r3, r3, #1
   10068:	f88d 3013 	strb.w	r3, [sp, #19]

    ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
   1006c:	f89d 3006 	ldrb.w	r3, [sp, #6]
   10070:	4619      	mov	r1, r3
   10072:	9805      	ldr	r0, [sp, #20]
   10074:	f7fe f94a 	bl	e30c <Ftm_Pwm_Ip_GetChannelMode>
   10078:	9003      	str	r0, [sp, #12]
    }
    if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][Channel] & FTM_PWM_IP_CHF_IRQ_EDGE))
    {
#endif
        /* Enable match-compare interrupt */
        Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, TRUE);
   1007a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1007e:	2201      	movs	r2, #1
   10080:	4619      	mov	r1, r3
   10082:	9805      	ldr	r0, [sp, #20]
   10084:	f7fd fb74 	bl	d770 <Ftm_Pwm_Ip_UpdateChnInt>
    {
        Ftm_Pwm_Ip_UpdateChnInt(FtmBase, Channel, FALSE);
    }
#endif

    if (( FTM_PWM_IP_MODE_COMBINE_HIGH          == ChMode) ||
   10088:	9b03      	ldr	r3, [sp, #12]
   1008a:	2b22      	cmp	r3, #34	; 0x22
   1008c:	d008      	beq.n	100a0 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
   1008e:	9b03      	ldr	r3, [sp, #12]
   10090:	2b62      	cmp	r3, #98	; 0x62
   10092:	d005      	beq.n	100a0 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
     ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH == ChMode) ||
   10094:	9b03      	ldr	r3, [sp, #12]
   10096:	2b61      	cmp	r3, #97	; 0x61
   10098:	d002      	beq.n	100a0 <Ftm_Pwm_Ip_SetNormalNotificationCase+0x5c>
     ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  == ChMode) ||
   1009a:	9b03      	ldr	r3, [sp, #12]
   1009c:	2b21      	cmp	r3, #33	; 0x21
   1009e:	d11d      	bne.n	100dc <Ftm_Pwm_Ip_SetNormalNotificationCase+0x98>
#endif
     ( FTM_PWM_IP_MODE_COMBINE_LOW           == ChMode))
    {
        /* Clear match-compare interrupt flag of given channel (n+1) */
        Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, ((PairChId * 2U) + 1U));
   100a0:	f89d 3013 	ldrb.w	r3, [sp, #19]
   100a4:	005b      	lsls	r3, r3, #1
   100a6:	b2db      	uxtb	r3, r3
   100a8:	3301      	adds	r3, #1
   100aa:	b2db      	uxtb	r3, r3
   100ac:	4619      	mov	r1, r3
   100ae:	9805      	ldr	r0, [sp, #20]
   100b0:	f7fd fb81 	bl	d7b6 <Ftm_Pwm_Ip_ClearChnEventFlag>
#if (defined(FTM_PWM_IP_NOTIFICATION_SUPPORTED) && (FTM_PWM_IP_NOTIFICATION_SUPPORTED == STD_ON))
        /* Check the edge of interrupt with an even channel */
        if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)(PairChId * 2U)] & FTM_PWM_IP_CHF_IRQ_EDGE))
        {
#endif
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)(PairChId * 2U), TRUE);
   100b4:	f89d 3013 	ldrb.w	r3, [sp, #19]
   100b8:	005b      	lsls	r3, r3, #1
   100ba:	b2db      	uxtb	r3, r3
   100bc:	2201      	movs	r2, #1
   100be:	4619      	mov	r1, r3
   100c0:	9805      	ldr	r0, [sp, #20]
   100c2:	f7fd fb55 	bl	d770 <Ftm_Pwm_Ip_UpdateChnInt>
        }
        /* Check the edge of interrupt with an odd channel */
        if (FTM_PWM_IP_CHF_IRQ_EDGE == (Ftm_Pwm_Ip_aNotifIrq[Instance][(uint8)((PairChId * 2U) + 1U)] & FTM_PWM_IP_CHF_IRQ_EDGE))
        {
#endif
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)((PairChId * 2U) + 1U), TRUE);
   100c6:	f89d 3013 	ldrb.w	r3, [sp, #19]
   100ca:	005b      	lsls	r3, r3, #1
   100cc:	b2db      	uxtb	r3, r3
   100ce:	3301      	adds	r3, #1
   100d0:	b2db      	uxtb	r3, r3
   100d2:	2201      	movs	r2, #1
   100d4:	4619      	mov	r1, r3
   100d6:	9805      	ldr	r0, [sp, #20]
   100d8:	f7fd fb4a 	bl	d770 <Ftm_Pwm_Ip_UpdateChnInt>
        {
            Ftm_Pwm_Ip_UpdateChnInt(FtmBase, (uint8)((PairChId * 2U) + 1U), FALSE);
        }
#endif
    }
}
   100dc:	bf00      	nop
   100de:	b007      	add	sp, #28
   100e0:	f85d fb04 	ldr.w	pc, [sp], #4
   100e4:	0001a05c 	.word	0x0001a05c

000100e8 <Ftm_Pwm_Ip_EnableNotification>:
 *
 * @implements Ftm_Pwm_Ip_EnableNotification_Activity
 **/
void Ftm_Pwm_Ip_EnableNotification(uint8 Instance,
                                   Ftm_Pwm_Ip_NotifType NotifType)
{
   100e8:	b500      	push	{lr}
   100ea:	b085      	sub	sp, #20
   100ec:	4603      	mov	r3, r0
   100ee:	9100      	str	r1, [sp, #0]
   100f0:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   100f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   100f8:	4a32      	ldr	r2, [pc, #200]	; (101c4 <Ftm_Pwm_Ip_EnableNotification+0xdc>)
   100fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   100fe:	9303      	str	r3, [sp, #12]
    uint8 ChannelId = (uint8)NotifType;
   10100:	9b00      	ldr	r3, [sp, #0]
   10102:	f88d 300b 	strb.w	r3, [sp, #11]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   10106:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1010a:	2b03      	cmp	r3, #3
   1010c:	bf94      	ite	ls
   1010e:	2301      	movls	r3, #1
   10110:	2300      	movhi	r3, #0
   10112:	b2db      	uxtb	r3, r3
   10114:	4618      	mov	r0, r3
   10116:	f7f0 fbe9 	bl	8ec <DevAssert>
    if((FTM_PWM_IP_OVERFLOW_NOTIFICATION     != NotifType)  &&
   1011a:	9b00      	ldr	r3, [sp, #0]
   1011c:	2b08      	cmp	r3, #8
   1011e:	d00f      	beq.n	10140 <Ftm_Pwm_Ip_EnableNotification+0x58>
   10120:	9b00      	ldr	r3, [sp, #0]
   10122:	2b09      	cmp	r3, #9
   10124:	d00c      	beq.n	10140 <Ftm_Pwm_Ip_EnableNotification+0x58>
       (FTM_PWM_IP_RELOAD_POINT_NOTIFICATION != NotifType)  &&
   10126:	9b00      	ldr	r3, [sp, #0]
   10128:	2b0a      	cmp	r3, #10
   1012a:	d009      	beq.n	10140 <Ftm_Pwm_Ip_EnableNotification+0x58>
       (FTM_PWM_IP_FAULT_NOTIFICATION        != NotifType))
    {
        DevAssert(ChannelId < (uint8)FTM_PWM_IP_CHANNEL_COUNT);
   1012c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   10130:	2b07      	cmp	r3, #7
   10132:	bf94      	ite	ls
   10134:	2301      	movls	r3, #1
   10136:	2300      	movhi	r3, #0
   10138:	b2db      	uxtb	r3, r3
   1013a:	4618      	mov	r0, r3
   1013c:	f7f0 fbd6 	bl	8ec <DevAssert>
    }
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05();
   10140:	f006 fdc0 	bl	16cc4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05>
    
    if((FTM_PWM_IP_CHANNEL_0_NOTIFICATION == NotifType) ||
   10144:	9b00      	ldr	r3, [sp, #0]
   10146:	2b00      	cmp	r3, #0
   10148:	d014      	beq.n	10174 <Ftm_Pwm_Ip_EnableNotification+0x8c>
   1014a:	9b00      	ldr	r3, [sp, #0]
   1014c:	2b01      	cmp	r3, #1
   1014e:	d011      	beq.n	10174 <Ftm_Pwm_Ip_EnableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_1_NOTIFICATION == NotifType) ||
   10150:	9b00      	ldr	r3, [sp, #0]
   10152:	2b02      	cmp	r3, #2
   10154:	d00e      	beq.n	10174 <Ftm_Pwm_Ip_EnableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_2_NOTIFICATION == NotifType) ||
   10156:	9b00      	ldr	r3, [sp, #0]
   10158:	2b03      	cmp	r3, #3
   1015a:	d00b      	beq.n	10174 <Ftm_Pwm_Ip_EnableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_3_NOTIFICATION == NotifType) ||
   1015c:	9b00      	ldr	r3, [sp, #0]
   1015e:	2b04      	cmp	r3, #4
   10160:	d008      	beq.n	10174 <Ftm_Pwm_Ip_EnableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_4_NOTIFICATION == NotifType) ||
   10162:	9b00      	ldr	r3, [sp, #0]
   10164:	2b05      	cmp	r3, #5
   10166:	d005      	beq.n	10174 <Ftm_Pwm_Ip_EnableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_5_NOTIFICATION == NotifType) ||
   10168:	9b00      	ldr	r3, [sp, #0]
   1016a:	2b06      	cmp	r3, #6
   1016c:	d002      	beq.n	10174 <Ftm_Pwm_Ip_EnableNotification+0x8c>
       (FTM_PWM_IP_CHANNEL_6_NOTIFICATION == NotifType) ||
   1016e:	9b00      	ldr	r3, [sp, #0]
   10170:	2b07      	cmp	r3, #7
   10172:	d10e      	bne.n	10192 <Ftm_Pwm_Ip_EnableNotification+0xaa>
       (FTM_PWM_IP_CHANNEL_7_NOTIFICATION == NotifType))
    {
        /* Clear match-compare interrupt flag of given channel */
        Ftm_Pwm_Ip_ClearChnEventFlag(FtmBase, ChannelId);
   10174:	f89d 300b 	ldrb.w	r3, [sp, #11]
   10178:	4619      	mov	r1, r3
   1017a:	9803      	ldr	r0, [sp, #12]
   1017c:	f7fd fb1b 	bl	d7b6 <Ftm_Pwm_Ip_ClearChnEventFlag>
        /* If duty cycle is not 0% and 100% */
        if ((0U != Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId]) &&
            (Ftm_Pwm_Ip_aPeriod[Instance] != Ftm_Pwm_Ip_aDutyCycle[Instance][ChannelId]))
        {
#endif
            Ftm_Pwm_Ip_SetNormalNotificationCase(Instance, ChannelId);
   10180:	f89d 200b 	ldrb.w	r2, [sp, #11]
   10184:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10188:	4611      	mov	r1, r2
   1018a:	4618      	mov	r0, r3
   1018c:	f7ff ff5a 	bl	10044 <Ftm_Pwm_Ip_SetNormalNotificationCase>
   10190:	e011      	b.n	101b6 <Ftm_Pwm_Ip_EnableNotification+0xce>
        /* Avoid compiler warning */
        (void) ChannelId;
    }
#endif
#if (defined(FTM_PWM_IP_HAS_FAULT) && (FTM_PWM_IP_HAS_FAULT == STD_ON))
    else if(FTM_PWM_IP_FAULT_NOTIFICATION == NotifType)
   10192:	9b00      	ldr	r3, [sp, #0]
   10194:	2b0a      	cmp	r3, #10
   10196:	d107      	bne.n	101a8 <Ftm_Pwm_Ip_EnableNotification+0xc0>
    {
        /* Clear fault interrupt flag of a given FTM module */
        Ftm_Pwm_Ip_ClearFaultFlag(FtmBase);
   10198:	9803      	ldr	r0, [sp, #12]
   1019a:	f7fe facc 	bl	e736 <Ftm_Pwm_Ip_ClearFaultFlag>

        /* Enables the generation of an interrupt when a fault is detected by FTM and the FTM fault control is enabled.*/
        Ftm_Pwm_Ip_SetFaultInterruptEnable(FtmBase, TRUE);
   1019e:	2101      	movs	r1, #1
   101a0:	9803      	ldr	r0, [sp, #12]
   101a2:	f7fe fab2 	bl	e70a <Ftm_Pwm_Ip_SetFaultInterruptEnable>
   101a6:	e006      	b.n	101b6 <Ftm_Pwm_Ip_EnableNotification+0xce>
    }
#endif
    else
    {
        /* Clear time-overflow interrupt flag of given channel */
        Ftm_Pwm_Ip_ClearTimerOverflow(FtmBase);
   101a8:	9803      	ldr	r0, [sp, #12]
   101aa:	f7fd f9e0 	bl	d56e <Ftm_Pwm_Ip_ClearTimerOverflow>

        /* Enable time-overflow interrupt */
        Ftm_Pwm_Ip_SetTimerOverflowInt(FtmBase, TRUE);
   101ae:	2101      	movs	r1, #1
   101b0:	9803      	ldr	r0, [sp, #12]
   101b2:	f7fd f9c5 	bl	d540 <Ftm_Pwm_Ip_SetTimerOverflowInt>
        
        /* Avoid compiler warning */
        (void) ChannelId;
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05();
   101b6:	f006 fdb1 	bl	16d1c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05>
}
   101ba:	bf00      	nop
   101bc:	b005      	add	sp, #20
   101be:	f85d fb04 	ldr.w	pc, [sp], #4
   101c2:	bf00      	nop
   101c4:	0001a05c 	.word	0x0001a05c

000101c8 <Ftm_Pwm_Ip_SetPowerState>:
 *
 * @implements Ftm_Pwm_Ip_SetPowerState_Activity
 **/
void Ftm_Pwm_Ip_SetPowerState(uint8 Instance,
                              Ftm_Pwm_Ip_PowerStateType PowerState)
{
   101c8:	b500      	push	{lr}
   101ca:	b085      	sub	sp, #20
   101cc:	4603      	mov	r3, r0
   101ce:	9100      	str	r1, [sp, #0]
   101d0:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   101d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   101d8:	4a11      	ldr	r2, [pc, #68]	; (10220 <Ftm_Pwm_Ip_SetPowerState+0x58>)
   101da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   101de:	9303      	str	r3, [sp, #12]
    
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   101e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   101e4:	2b03      	cmp	r3, #3
   101e6:	bf94      	ite	ls
   101e8:	2301      	movls	r3, #1
   101ea:	2300      	movhi	r3, #0
   101ec:	b2db      	uxtb	r3, r3
   101ee:	4618      	mov	r0, r3
   101f0:	f7f0 fb7c 	bl	8ec <DevAssert>
#endif

    if (FTM_PWM_IP_LOW_POWER == PowerState)
   101f4:	9b00      	ldr	r3, [sp, #0]
   101f6:	2b01      	cmp	r3, #1
   101f8:	d104      	bne.n	10204 <Ftm_Pwm_Ip_SetPowerState+0x3c>
    {
        /* Disable counter clock */
        Ftm_Pwm_Ip_SetClockSource(FtmBase, FTM_PWM_IP_CLOCK_SOURCE_NONE);
   101fa:	2100      	movs	r1, #0
   101fc:	9803      	ldr	r0, [sp, #12]
   101fe:	f7fd f96a 	bl	d4d6 <Ftm_Pwm_Ip_SetClockSource>
    }
    else
    {
        Ftm_Pwm_Ip_SetClockSource(FtmBase, Ftm_Pwm_Ip_aClockSource[Instance]);
    }
}
   10202:	e008      	b.n	10216 <Ftm_Pwm_Ip_SetPowerState+0x4e>
        Ftm_Pwm_Ip_SetClockSource(FtmBase, Ftm_Pwm_Ip_aClockSource[Instance]);
   10204:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10208:	4a06      	ldr	r2, [pc, #24]	; (10224 <Ftm_Pwm_Ip_SetPowerState+0x5c>)
   1020a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1020e:	4619      	mov	r1, r3
   10210:	9803      	ldr	r0, [sp, #12]
   10212:	f7fd f960 	bl	d4d6 <Ftm_Pwm_Ip_SetClockSource>
}
   10216:	bf00      	nop
   10218:	b005      	add	sp, #20
   1021a:	f85d fb04 	ldr.w	pc, [sp], #4
   1021e:	bf00      	nop
   10220:	0001a05c 	.word	0x0001a05c
   10224:	1fff9124 	.word	0x1fff9124

00010228 <Ftm_Pwm_Ip_SetClockMode>:
 *
 * @implements Ftm_Pwm_Ip_SetClockMode_Activity
 **/
void Ftm_Pwm_Ip_SetClockMode(uint8 Instance,
                             Ftm_Pwm_Ip_PrescalerType Prescaler)
{
   10228:	b500      	push	{lr}
   1022a:	b085      	sub	sp, #20
   1022c:	4603      	mov	r3, r0
   1022e:	9100      	str	r1, [sp, #0]
   10230:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   10234:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10238:	4a13      	ldr	r2, [pc, #76]	; (10288 <Ftm_Pwm_Ip_SetClockMode+0x60>)
   1023a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1023e:	9303      	str	r3, [sp, #12]
    
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   10240:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10244:	2b03      	cmp	r3, #3
   10246:	bf94      	ite	ls
   10248:	2301      	movls	r3, #1
   1024a:	2300      	movhi	r3, #0
   1024c:	b2db      	uxtb	r3, r3
   1024e:	4618      	mov	r0, r3
   10250:	f7f0 fb4c 	bl	8ec <DevAssert>
#endif

    if (FTM_PWM_IP_ALTERNATIVE_PRESCALER == Prescaler)
   10254:	9b00      	ldr	r3, [sp, #0]
   10256:	2b01      	cmp	r3, #1
   10258:	d109      	bne.n	1026e <Ftm_Pwm_Ip_SetClockMode+0x46>
    {
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aAlternateClockPrescaler[Instance]);
   1025a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1025e:	4a0b      	ldr	r2, [pc, #44]	; (1028c <Ftm_Pwm_Ip_SetClockMode+0x64>)
   10260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10264:	4619      	mov	r1, r3
   10266:	9803      	ldr	r0, [sp, #12]
   10268:	f7fd f91a 	bl	d4a0 <Ftm_Pwm_Ip_SetClockPs>
    }
    else
    {
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aClockPrescaler[Instance]);
    }
}
   1026c:	e008      	b.n	10280 <Ftm_Pwm_Ip_SetClockMode+0x58>
        Ftm_Pwm_Ip_SetClockPs(FtmBase, Ftm_Pwm_Ip_aClockPrescaler[Instance]);
   1026e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10272:	4a07      	ldr	r2, [pc, #28]	; (10290 <Ftm_Pwm_Ip_SetClockMode+0x68>)
   10274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10278:	4619      	mov	r1, r3
   1027a:	9803      	ldr	r0, [sp, #12]
   1027c:	f7fd f910 	bl	d4a0 <Ftm_Pwm_Ip_SetClockPs>
}
   10280:	bf00      	nop
   10282:	b005      	add	sp, #20
   10284:	f85d fb04 	ldr.w	pc, [sp], #4
   10288:	0001a05c 	.word	0x0001a05c
   1028c:	1fff9144 	.word	0x1fff9144
   10290:	1fff9134 	.word	0x1fff9134

00010294 <Ftm_Pwm_Ip_ResetCounter>:
 *
 * @implements Ftm_Pwm_Ip_ResetCounter_Activity
 **/
void Ftm_Pwm_Ip_ResetCounter(uint8 Instance,
                             boolean IsResetCnt)
{
   10294:	b500      	push	{lr}
   10296:	b085      	sub	sp, #20
   10298:	4603      	mov	r3, r0
   1029a:	460a      	mov	r2, r1
   1029c:	f88d 3007 	strb.w	r3, [sp, #7]
   102a0:	4613      	mov	r3, r2
   102a2:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   102a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   102aa:	4a0c      	ldr	r2, [pc, #48]	; (102dc <Ftm_Pwm_Ip_ResetCounter+0x48>)
   102ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   102b0:	9303      	str	r3, [sp, #12]

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   102b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   102b6:	2b03      	cmp	r3, #3
   102b8:	bf94      	ite	ls
   102ba:	2301      	movls	r3, #1
   102bc:	2300      	movhi	r3, #0
   102be:	b2db      	uxtb	r3, r3
   102c0:	4618      	mov	r0, r3
   102c2:	f7f0 fb13 	bl	8ec <DevAssert>
#endif

    Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd(FtmBase, IsResetCnt);
   102c6:	f89d 3006 	ldrb.w	r3, [sp, #6]
   102ca:	4619      	mov	r1, r3
   102cc:	9803      	ldr	r0, [sp, #12]
   102ce:	f7fd fe1a 	bl	df06 <Ftm_Pwm_Ip_SetCounterSoftwareSyncModeCmd>

}
   102d2:	bf00      	nop
   102d4:	b005      	add	sp, #20
   102d6:	f85d fb04 	ldr.w	pc, [sp], #4
   102da:	bf00      	nop
   102dc:	0001a05c 	.word	0x0001a05c

000102e0 <Ftm_Pwm_Ip_GetChannelState>:
 * Description   : The function shall return the duty cycle value of the selected channel.
 *
 * @implements  Ftm_Pwm_Ip_GetChannelState_Activity
 **/
uint16 Ftm_Pwm_Ip_GetChannelState(uint8 Instance, uint8 Channel)
{
   102e0:	b500      	push	{lr}
   102e2:	b085      	sub	sp, #20
   102e4:	4603      	mov	r3, r0
   102e6:	460a      	mov	r2, r1
   102e8:	f88d 3007 	strb.w	r3, [sp, #7]
   102ec:	4613      	mov	r3, r2
   102ee:	f88d 3006 	strb.w	r3, [sp, #6]
    uint16 DutyCycle;

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   102f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   102f6:	2b03      	cmp	r3, #3
   102f8:	bf94      	ite	ls
   102fa:	2301      	movls	r3, #1
   102fc:	2300      	movhi	r3, #0
   102fe:	b2db      	uxtb	r3, r3
   10300:	4618      	mov	r0, r3
   10302:	f7f0 faf3 	bl	8ec <DevAssert>
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
   10306:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1030a:	2b07      	cmp	r3, #7
   1030c:	bf94      	ite	ls
   1030e:	2301      	movls	r3, #1
   10310:	2300      	movhi	r3, #0
   10312:	b2db      	uxtb	r3, r3
   10314:	4618      	mov	r0, r3
   10316:	f7f0 fae9 	bl	8ec <DevAssert>
#endif
    DutyCycle = Ftm_Pwm_Ip_aDutyCycle[Instance][Channel];
   1031a:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1031e:	f89d 3006 	ldrb.w	r3, [sp, #6]
   10322:	4906      	ldr	r1, [pc, #24]	; (1033c <Ftm_Pwm_Ip_GetChannelState+0x5c>)
   10324:	00d2      	lsls	r2, r2, #3
   10326:	4413      	add	r3, r2
   10328:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   1032c:	f8ad 300e 	strh.w	r3, [sp, #14]

    return DutyCycle;
   10330:	f8bd 300e 	ldrh.w	r3, [sp, #14]
}
   10334:	4618      	mov	r0, r3
   10336:	b005      	add	sp, #20
   10338:	f85d fb04 	ldr.w	pc, [sp], #4
   1033c:	1fff8e34 	.word	0x1fff8e34

00010340 <Ftm_Pwm_Ip_FastUpdatePwmDuty>:
void Ftm_Pwm_Ip_FastUpdatePwmDuty(uint8 Instance,
                                  uint8 NumberOfChannels,
                                  const uint8 * Channels,
                                  const uint16 * Duty,
                                  boolean SoftwareTrigger)
{
   10340:	b500      	push	{lr}
   10342:	b087      	sub	sp, #28
   10344:	9202      	str	r2, [sp, #8]
   10346:	9301      	str	r3, [sp, #4]
   10348:	4603      	mov	r3, r0
   1034a:	f88d 300f 	strb.w	r3, [sp, #15]
   1034e:	460b      	mov	r3, r1
   10350:	f88d 300e 	strb.w	r3, [sp, #14]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   10354:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10358:	4a29      	ldr	r2, [pc, #164]	; (10400 <Ftm_Pwm_Ip_FastUpdatePwmDuty+0xc0>)
   1035a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1035e:	9304      	str	r3, [sp, #16]
    uint8 Index;

#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   10360:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10364:	2b03      	cmp	r3, #3
   10366:	bf94      	ite	ls
   10368:	2301      	movls	r3, #1
   1036a:	2300      	movhi	r3, #0
   1036c:	b2db      	uxtb	r3, r3
   1036e:	4618      	mov	r0, r3
   10370:	f7f0 fabc 	bl	8ec <DevAssert>
    DevAssert(NumberOfChannels <= FTM_PWM_IP_CHANNEL_COUNT);
   10374:	f89d 300e 	ldrb.w	r3, [sp, #14]
   10378:	2b08      	cmp	r3, #8
   1037a:	bf94      	ite	ls
   1037c:	2301      	movls	r3, #1
   1037e:	2300      	movhi	r3, #0
   10380:	b2db      	uxtb	r3, r3
   10382:	4618      	mov	r0, r3
   10384:	f7f0 fab2 	bl	8ec <DevAssert>
#endif
    for (Index = 0U; Index < NumberOfChannels; Index++)
   10388:	2300      	movs	r3, #0
   1038a:	f88d 3017 	strb.w	r3, [sp, #23]
   1038e:	e026      	b.n	103de <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x9e>
    {
        Ftm_Pwm_Ip_SetChnCountVal(FtmBase, Channels[Index], Duty[Index]);
   10390:	f89d 3017 	ldrb.w	r3, [sp, #23]
   10394:	9a02      	ldr	r2, [sp, #8]
   10396:	4413      	add	r3, r2
   10398:	7819      	ldrb	r1, [r3, #0]
   1039a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1039e:	005b      	lsls	r3, r3, #1
   103a0:	9a01      	ldr	r2, [sp, #4]
   103a2:	4413      	add	r3, r2
   103a4:	881b      	ldrh	r3, [r3, #0]
   103a6:	461a      	mov	r2, r3
   103a8:	9804      	ldr	r0, [sp, #16]
   103aa:	f7fd fa32 	bl	d812 <Ftm_Pwm_Ip_SetChnCountVal>
        Ftm_Pwm_Ip_aDutyCycle[Instance][Channels[Index]] = Duty[Index];
   103ae:	f89d 3017 	ldrb.w	r3, [sp, #23]
   103b2:	005b      	lsls	r3, r3, #1
   103b4:	9a01      	ldr	r2, [sp, #4]
   103b6:	441a      	add	r2, r3
   103b8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   103bc:	f89d 1017 	ldrb.w	r1, [sp, #23]
   103c0:	9802      	ldr	r0, [sp, #8]
   103c2:	4401      	add	r1, r0
   103c4:	7809      	ldrb	r1, [r1, #0]
   103c6:	4608      	mov	r0, r1
   103c8:	8811      	ldrh	r1, [r2, #0]
   103ca:	4a0e      	ldr	r2, [pc, #56]	; (10404 <Ftm_Pwm_Ip_FastUpdatePwmDuty+0xc4>)
   103cc:	00db      	lsls	r3, r3, #3
   103ce:	4403      	add	r3, r0
   103d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (Index = 0U; Index < NumberOfChannels; Index++)
   103d4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   103d8:	3301      	adds	r3, #1
   103da:	f88d 3017 	strb.w	r3, [sp, #23]
   103de:	f89d 2017 	ldrb.w	r2, [sp, #23]
   103e2:	f89d 300e 	ldrb.w	r3, [sp, #14]
   103e6:	429a      	cmp	r2, r3
   103e8:	d3d2      	bcc.n	10390 <Ftm_Pwm_Ip_FastUpdatePwmDuty+0x50>
    }

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
   103ea:	f89d 3020 	ldrb.w	r3, [sp, #32]
   103ee:	4619      	mov	r1, r3
   103f0:	9804      	ldr	r0, [sp, #16]
   103f2:	f7fd fad6 	bl	d9a2 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>
}
   103f6:	bf00      	nop
   103f8:	b007      	add	sp, #28
   103fa:	f85d fb04 	ldr.w	pc, [sp], #4
   103fe:	bf00      	nop
   10400:	0001a05c 	.word	0x0001a05c
   10404:	1fff8e34 	.word	0x1fff8e34

00010408 <Ftm_Pwm_Ip_MaskOutputChannels>:
 * @implements Ftm_Pwm_Ip_MaskOutputChannels_Activity
 */
void Ftm_Pwm_Ip_MaskOutputChannels(uint8 Instance,
                                   uint32 ChannelsMask,
                                   boolean SoftwareTrigger)
{
   10408:	b500      	push	{lr}
   1040a:	b085      	sub	sp, #20
   1040c:	4603      	mov	r3, r0
   1040e:	9100      	str	r1, [sp, #0]
   10410:	f88d 3007 	strb.w	r3, [sp, #7]
   10414:	4613      	mov	r3, r2
   10416:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   1041a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1041e:	4a10      	ldr	r2, [pc, #64]	; (10460 <Ftm_Pwm_Ip_MaskOutputChannels+0x58>)
   10420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10424:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   10426:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1042a:	2b03      	cmp	r3, #3
   1042c:	bf94      	ite	ls
   1042e:	2301      	movls	r3, #1
   10430:	2300      	movhi	r3, #0
   10432:	b2db      	uxtb	r3, r3
   10434:	4618      	mov	r0, r3
   10436:	f7f0 fa59 	bl	8ec <DevAssert>
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07();
   1043a:	f006 fce7 	bl	16e0c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07>

    Ftm_Pwm_Ip_SetOutmaskReg(FtmBase, ChannelsMask);
   1043e:	9900      	ldr	r1, [sp, #0]
   10440:	9803      	ldr	r0, [sp, #12]
   10442:	f7fd fb0b 	bl	da5c <Ftm_Pwm_Ip_SetOutmaskReg>
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
   10446:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1044a:	4619      	mov	r1, r3
   1044c:	9803      	ldr	r0, [sp, #12]
   1044e:	f7fd faa8 	bl	d9a2 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07();
   10452:	f006 fd07 	bl	16e64 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07>
}
   10456:	bf00      	nop
   10458:	b005      	add	sp, #20
   1045a:	f85d fb04 	ldr.w	pc, [sp], #4
   1045e:	bf00      	nop
   10460:	0001a05c 	.word	0x0001a05c

00010464 <Ftm_Pwm_Ip_UnMaskOutputChannels>:
 * @implements Ftm_Pwm_Ip_UnMaskOutputChannels_Activity
 **/
void Ftm_Pwm_Ip_UnMaskOutputChannels(uint8 Instance,
                                     uint32 ChannelsMask,
                                     boolean SoftwareTrigger)
{
   10464:	b500      	push	{lr}
   10466:	b085      	sub	sp, #20
   10468:	4603      	mov	r3, r0
   1046a:	9100      	str	r1, [sp, #0]
   1046c:	f88d 3007 	strb.w	r3, [sp, #7]
   10470:	4613      	mov	r3, r2
   10472:	f88d 3006 	strb.w	r3, [sp, #6]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   10476:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1047a:	4a10      	ldr	r2, [pc, #64]	; (104bc <Ftm_Pwm_Ip_UnMaskOutputChannels+0x58>)
   1047c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10480:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   10482:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10486:	2b03      	cmp	r3, #3
   10488:	bf94      	ite	ls
   1048a:	2301      	movls	r3, #1
   1048c:	2300      	movhi	r3, #0
   1048e:	b2db      	uxtb	r3, r3
   10490:	4618      	mov	r0, r3
   10492:	f7f0 fa2b 	bl	8ec <DevAssert>
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08();
   10496:	f006 fd0b 	bl	16eb0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08>

    Ftm_Pwm_Ip_ClearOutmaskReg(FtmBase, ChannelsMask);
   1049a:	9900      	ldr	r1, [sp, #0]
   1049c:	9803      	ldr	r0, [sp, #12]
   1049e:	f7fd faec 	bl	da7a <Ftm_Pwm_Ip_ClearOutmaskReg>
    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
   104a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
   104a6:	4619      	mov	r1, r3
   104a8:	9803      	ldr	r0, [sp, #12]
   104aa:	f7fd fa7a 	bl	d9a2 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08();
   104ae:	f006 fd2b 	bl	16f08 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08>
}
   104b2:	bf00      	nop
   104b4:	b005      	add	sp, #20
   104b6:	f85d fb04 	ldr.w	pc, [sp], #4
   104ba:	bf00      	nop
   104bc:	0001a05c 	.word	0x0001a05c

000104c0 <Ftm_Pwm_Ip_SetPhaseShift>:
void Ftm_Pwm_Ip_SetPhaseShift(uint8 Instance,
                              uint8 Channel,
                              uint16 Period,
                              uint16 PhaseShift,
                              boolean SoftwareTrigger)
{
   104c0:	b510      	push	{r4, lr}
   104c2:	b088      	sub	sp, #32
   104c4:	4604      	mov	r4, r0
   104c6:	4608      	mov	r0, r1
   104c8:	4611      	mov	r1, r2
   104ca:	461a      	mov	r2, r3
   104cc:	4623      	mov	r3, r4
   104ce:	f88d 3007 	strb.w	r3, [sp, #7]
   104d2:	4603      	mov	r3, r0
   104d4:	f88d 3006 	strb.w	r3, [sp, #6]
   104d8:	460b      	mov	r3, r1
   104da:	f8ad 3004 	strh.w	r3, [sp, #4]
   104de:	4613      	mov	r3, r2
   104e0:	f8ad 3002 	strh.w	r3, [sp, #2]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   104e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   104e8:	4a59      	ldr	r2, [pc, #356]	; (10650 <Ftm_Pwm_Ip_SetPhaseShift+0x190>)
   104ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   104ee:	9306      	str	r3, [sp, #24]
    uint8 PairChId;
    uint16 DutyCycleVal;
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    uint16  CnVValue = 0U;
   104f0:	2300      	movs	r3, #0
   104f2:	f8ad 3016 	strh.w	r3, [sp, #22]
    boolean CheckChMode = TRUE;
   104f6:	2301      	movs	r3, #1
   104f8:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean RetVal = TRUE;
   104fc:	2301      	movs	r3, #1
   104fe:	f88d 301e 	strb.w	r3, [sp, #30]

    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   10502:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10506:	2b03      	cmp	r3, #3
   10508:	bf94      	ite	ls
   1050a:	2301      	movls	r3, #1
   1050c:	2300      	movhi	r3, #0
   1050e:	b2db      	uxtb	r3, r3
   10510:	4618      	mov	r0, r3
   10512:	f7f0 f9eb 	bl	8ec <DevAssert>
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
   10516:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1051a:	2b07      	cmp	r3, #7
   1051c:	bf94      	ite	ls
   1051e:	2301      	movls	r3, #1
   10520:	2300      	movhi	r3, #0
   10522:	b2db      	uxtb	r3, r3
   10524:	4618      	mov	r0, r3
   10526:	f7f0 f9e1 	bl	8ec <DevAssert>
    
    ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
   1052a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1052e:	4619      	mov	r1, r3
   10530:	9806      	ldr	r0, [sp, #24]
   10532:	f7fd feeb 	bl	e30c <Ftm_Pwm_Ip_GetChannelMode>
   10536:	9004      	str	r0, [sp, #16]
    
    if (( FTM_PWM_IP_MODE_COMBINE_HIGH          != ChMode) &&
   10538:	9b04      	ldr	r3, [sp, #16]
   1053a:	2b22      	cmp	r3, #34	; 0x22
   1053c:	d00b      	beq.n	10556 <Ftm_Pwm_Ip_SetPhaseShift+0x96>
   1053e:	9b04      	ldr	r3, [sp, #16]
   10540:	2b62      	cmp	r3, #98	; 0x62
   10542:	d008      	beq.n	10556 <Ftm_Pwm_Ip_SetPhaseShift+0x96>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH != ChMode) &&
   10544:	9b04      	ldr	r3, [sp, #16]
   10546:	2b61      	cmp	r3, #97	; 0x61
   10548:	d005      	beq.n	10556 <Ftm_Pwm_Ip_SetPhaseShift+0x96>
        ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  != ChMode) &&
   1054a:	9b04      	ldr	r3, [sp, #16]
   1054c:	2b21      	cmp	r3, #33	; 0x21
   1054e:	d002      	beq.n	10556 <Ftm_Pwm_Ip_SetPhaseShift+0x96>
#endif
        ( FTM_PWM_IP_MODE_COMBINE_LOW           != ChMode))
    {
        CheckChMode = FALSE;
   10550:	2300      	movs	r3, #0
   10552:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    DevAssert(CheckChMode != FALSE);
   10556:	f89d 301f 	ldrb.w	r3, [sp, #31]
   1055a:	4618      	mov	r0, r3
   1055c:	f7f0 f9c6 	bl	8ec <DevAssert>
    
    CnVValue = PhaseShift + (uint16)(Period >> 1U);
   10560:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   10564:	085b      	lsrs	r3, r3, #1
   10566:	b29a      	uxth	r2, r3
   10568:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1056c:	4413      	add	r3, r2
   1056e:	f8ad 3016 	strh.w	r3, [sp, #22]
    if ((CnVValue <= PhaseShift) || (Period <= CnVValue))
   10572:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   10576:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1057a:	429a      	cmp	r2, r3
   1057c:	d905      	bls.n	1058a <Ftm_Pwm_Ip_SetPhaseShift+0xca>
   1057e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   10582:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   10586:	429a      	cmp	r2, r3
   10588:	d802      	bhi.n	10590 <Ftm_Pwm_Ip_SetPhaseShift+0xd0>
    {
        RetVal = FALSE;
   1058a:	2300      	movs	r3, #0
   1058c:	f88d 301e 	strb.w	r3, [sp, #30]
    }
    DevAssert(RetVal != FALSE);
   10590:	f89d 301e 	ldrb.w	r3, [sp, #30]
   10594:	4618      	mov	r0, r3
   10596:	f7f0 f9a9 	bl	8ec <DevAssert>
#endif
    PairChId = Channel >> 1U;
   1059a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1059e:	085b      	lsrs	r3, r3, #1
   105a0:	f88d 300f 	strb.w	r3, [sp, #15]
    Ftm_Pwm_Ip_aPeriod[Instance] = Period;
   105a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   105a8:	492a      	ldr	r1, [pc, #168]	; (10654 <Ftm_Pwm_Ip_SetPhaseShift+0x194>)
   105aa:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   105ae:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09();
   105b2:	f006 fccf 	bl	16f54 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09>

    if (FTM_PWM_IP_CENTER_ALIGNED == Ftm_Pwm_Ip_GetCpwms(FtmBase))
   105b6:	9806      	ldr	r0, [sp, #24]
   105b8:	f7fc ffb4 	bl	d524 <Ftm_Pwm_Ip_GetCpwms>
   105bc:	4603      	mov	r3, r0
   105be:	2b01      	cmp	r3, #1
   105c0:	d108      	bne.n	105d4 <Ftm_Pwm_Ip_SetPhaseShift+0x114>
    {
        /* For Center Aligned mode MOD register should be divided by 2. Period is 2 * (MOD − CNTIN) */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(Period >> 1U));
   105c2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   105c6:	085b      	lsrs	r3, r3, #1
   105c8:	b29b      	uxth	r3, r3
   105ca:	4619      	mov	r1, r3
   105cc:	9806      	ldr	r0, [sp, #24]
   105ce:	f7fc fffc 	bl	d5ca <Ftm_Pwm_Ip_SetMod>
   105d2:	e007      	b.n	105e4 <Ftm_Pwm_Ip_SetPhaseShift+0x124>
    }
    else
    {
        /* For Edge Aligned mode period is determined by: MOD-CNTIN+1 */
        Ftm_Pwm_Ip_SetMod(FtmBase, (uint16)(Period - 1U));
   105d4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   105d8:	3b01      	subs	r3, #1
   105da:	b29b      	uxth	r3, r3
   105dc:	4619      	mov	r1, r3
   105de:	9806      	ldr	r0, [sp, #24]
   105e0:	f7fc fff3 	bl	d5ca <Ftm_Pwm_Ip_SetMod>
    }

    Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)(PairChId * 2U), PhaseShift);
   105e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   105e8:	005b      	lsls	r3, r3, #1
   105ea:	b2db      	uxtb	r3, r3
   105ec:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   105f0:	4619      	mov	r1, r3
   105f2:	9806      	ldr	r0, [sp, #24]
   105f4:	f7fd f90d 	bl	d812 <Ftm_Pwm_Ip_SetChnCountVal>

    /* Fix duty cycle to 50% */
    DutyCycleVal = (uint16)(Period >> 1U);
   105f8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   105fc:	085b      	lsrs	r3, r3, #1
   105fe:	f8ad 300c 	strh.w	r3, [sp, #12]
    
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycleVal;
   10602:	f89d 2007 	ldrb.w	r2, [sp, #7]
   10606:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1060a:	4913      	ldr	r1, [pc, #76]	; (10658 <Ftm_Pwm_Ip_SetPhaseShift+0x198>)
   1060c:	00d2      	lsls	r2, r2, #3
   1060e:	4413      	add	r3, r2
   10610:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   10614:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    /* Write C(n+1)V register */
    Ftm_Pwm_Ip_SetChnCountVal(FtmBase, (uint8)((PairChId * 2U) + 1U), (PhaseShift + DutyCycleVal));
   10618:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1061c:	005b      	lsls	r3, r3, #1
   1061e:	b2db      	uxtb	r3, r3
   10620:	3301      	adds	r3, #1
   10622:	b2d9      	uxtb	r1, r3
   10624:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   10628:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1062c:	4413      	add	r3, r2
   1062e:	b29b      	uxth	r3, r3
   10630:	461a      	mov	r2, r3
   10632:	9806      	ldr	r0, [sp, #24]
   10634:	f7fd f8ed 	bl	d812 <Ftm_Pwm_Ip_SetChnCountVal>

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, SoftwareTrigger);
   10638:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   1063c:	4619      	mov	r1, r3
   1063e:	9806      	ldr	r0, [sp, #24]
   10640:	f7fd f9af 	bl	d9a2 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09();
   10644:	f006 fcb2 	bl	16fac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09>
}
   10648:	bf00      	nop
   1064a:	b008      	add	sp, #32
   1064c:	bd10      	pop	{r4, pc}
   1064e:	bf00      	nop
   10650:	0001a05c 	.word	0x0001a05c
   10654:	1fff8e2c 	.word	0x1fff8e2c
   10658:	1fff8e34 	.word	0x1fff8e34

0001065c <Ftm_Pwm_Ip_SetDutyPhaseShift>:
void Ftm_Pwm_Ip_SetDutyPhaseShift(uint8 Instance,
                                  uint8 Channel,
                                  uint16 DutyCycle,
                                  uint16 PhaseShift,
                                  boolean SyncUpdate)
{
   1065c:	b510      	push	{r4, lr}
   1065e:	b08a      	sub	sp, #40	; 0x28
   10660:	4604      	mov	r4, r0
   10662:	4608      	mov	r0, r1
   10664:	4611      	mov	r1, r2
   10666:	461a      	mov	r2, r3
   10668:	4623      	mov	r3, r4
   1066a:	f88d 300f 	strb.w	r3, [sp, #15]
   1066e:	4603      	mov	r3, r0
   10670:	f88d 300e 	strb.w	r3, [sp, #14]
   10674:	460b      	mov	r3, r1
   10676:	f8ad 300c 	strh.w	r3, [sp, #12]
   1067a:	4613      	mov	r3, r2
   1067c:	f8ad 300a 	strh.w	r3, [sp, #10]
    uint16 FirstEdge;
    uint16 SecondEdgeEdge;
    uint8 PairId;
    boolean SoftwareTrigger;
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    const Ftm_Pwm_Ip_HwAddrType *const FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   10680:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10684:	4a68      	ldr	r2, [pc, #416]	; (10828 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x1cc>)
   10686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1068a:	9308      	str	r3, [sp, #32]
    Ftm_Pwm_Ip_ChannelModeType ChMode;
    boolean CheckChMode = TRUE;
   1068c:	2301      	movs	r3, #1
   1068e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    boolean RetVal = TRUE;
   10692:	2301      	movs	r3, #1
   10694:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25

    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   10698:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1069c:	2b03      	cmp	r3, #3
   1069e:	bf94      	ite	ls
   106a0:	2301      	movls	r3, #1
   106a2:	2300      	movhi	r3, #0
   106a4:	b2db      	uxtb	r3, r3
   106a6:	4618      	mov	r0, r3
   106a8:	f7f0 f920 	bl	8ec <DevAssert>
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
   106ac:	f89d 300e 	ldrb.w	r3, [sp, #14]
   106b0:	2b07      	cmp	r3, #7
   106b2:	bf94      	ite	ls
   106b4:	2301      	movls	r3, #1
   106b6:	2300      	movhi	r3, #0
   106b8:	b2db      	uxtb	r3, r3
   106ba:	4618      	mov	r0, r3
   106bc:	f7f0 f916 	bl	8ec <DevAssert>
    
    ChMode = (Ftm_Pwm_Ip_ChannelModeType)Ftm_Pwm_Ip_GetChannelMode(FtmBase, Channel);
   106c0:	f89d 300e 	ldrb.w	r3, [sp, #14]
   106c4:	4619      	mov	r1, r3
   106c6:	9808      	ldr	r0, [sp, #32]
   106c8:	f7fd fe20 	bl	e30c <Ftm_Pwm_Ip_GetChannelMode>
   106cc:	9007      	str	r0, [sp, #28]
    
    if (( FTM_PWM_IP_MODE_COMBINE_HIGH          != ChMode) &&
   106ce:	9b07      	ldr	r3, [sp, #28]
   106d0:	2b22      	cmp	r3, #34	; 0x22
   106d2:	d00b      	beq.n	106ec <Ftm_Pwm_Ip_SetDutyPhaseShift+0x90>
   106d4:	9b07      	ldr	r3, [sp, #28]
   106d6:	2b62      	cmp	r3, #98	; 0x62
   106d8:	d008      	beq.n	106ec <Ftm_Pwm_Ip_SetDutyPhaseShift+0x90>
#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
        ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH != ChMode) &&
   106da:	9b07      	ldr	r3, [sp, #28]
   106dc:	2b61      	cmp	r3, #97	; 0x61
   106de:	d005      	beq.n	106ec <Ftm_Pwm_Ip_SetDutyPhaseShift+0x90>
        ( FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW  != ChMode) &&
   106e0:	9b07      	ldr	r3, [sp, #28]
   106e2:	2b21      	cmp	r3, #33	; 0x21
   106e4:	d002      	beq.n	106ec <Ftm_Pwm_Ip_SetDutyPhaseShift+0x90>
#endif
        ( FTM_PWM_IP_MODE_COMBINE_LOW           != ChMode))
    {
        CheckChMode = FALSE;
   106e6:	2300      	movs	r3, #0
   106e8:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    }
    DevAssert(CheckChMode != FALSE);
   106ec:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   106f0:	4618      	mov	r0, r3
   106f2:	f7f0 f8fb 	bl	8ec <DevAssert>

#if (defined(FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE) && (FTM_PWM_IP_HAS_MODIFIED_COMBINE_MODE == STD_ON))
    if (((FTM_PWM_IP_MODE_MODIFIED_COMBINE_HIGH          == ChMode) ||
   106f6:	9b07      	ldr	r3, [sp, #28]
   106f8:	2b62      	cmp	r3, #98	; 0x62
   106fa:	d002      	beq.n	10702 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xa6>
   106fc:	9b07      	ldr	r3, [sp, #28]
   106fe:	2b61      	cmp	r3, #97	; 0x61
   10700:	d106      	bne.n	10710 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xb4>
         (FTM_PWM_IP_MODE_MODIFIED_COMBINE_LOW           == ChMode)) &&
   10702:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   10706:	2b00      	cmp	r3, #0
   10708:	d002      	beq.n	10710 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xb4>
        (TRUE == SyncUpdate))
    {
        RetVal = FALSE;
   1070a:	2300      	movs	r3, #0
   1070c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    }
#endif

    if ((Ftm_Pwm_Ip_aPeriod[Instance] != DutyCycle) && (0U != DutyCycle))
   10710:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10714:	4a45      	ldr	r2, [pc, #276]	; (1082c <Ftm_Pwm_Ip_SetDutyPhaseShift+0x1d0>)
   10716:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   1071a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   1071e:	429a      	cmp	r2, r3
   10720:	d018      	beq.n	10754 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf8>
   10722:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   10726:	2b00      	cmp	r3, #0
   10728:	d014      	beq.n	10754 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf8>
    {
        if ((Ftm_Pwm_Ip_aPeriod[Instance] <= PhaseShift) || (Ftm_Pwm_Ip_aPeriod[Instance] < DutyCycle))
   1072a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1072e:	4a3f      	ldr	r2, [pc, #252]	; (1082c <Ftm_Pwm_Ip_SetDutyPhaseShift+0x1d0>)
   10730:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   10734:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   10738:	429a      	cmp	r2, r3
   1073a:	d208      	bcs.n	1074e <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf2>
   1073c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10740:	4a3a      	ldr	r2, [pc, #232]	; (1082c <Ftm_Pwm_Ip_SetDutyPhaseShift+0x1d0>)
   10742:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   10746:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   1074a:	429a      	cmp	r2, r3
   1074c:	d902      	bls.n	10754 <Ftm_Pwm_Ip_SetDutyPhaseShift+0xf8>
        {
            RetVal = FALSE;
   1074e:	2300      	movs	r3, #0
   10750:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
        }
    }
    DevAssert(RetVal != FALSE);
   10754:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   10758:	4618      	mov	r0, r3
   1075a:	f7f0 f8c7 	bl	8ec <DevAssert>

#endif
    PairId = Channel >> 1U;
   1075e:	f89d 300e 	ldrb.w	r3, [sp, #14]
   10762:	085b      	lsrs	r3, r3, #1
   10764:	f88d 301b 	strb.w	r3, [sp, #27]

    Ftm_Pwm_Ip_aPhaseShift[Instance][PairId] = PhaseShift;
   10768:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1076c:	f89d 301b 	ldrb.w	r3, [sp, #27]
   10770:	492f      	ldr	r1, [pc, #188]	; (10830 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x1d4>)
   10772:	0092      	lsls	r2, r2, #2
   10774:	4413      	add	r3, r2
   10776:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   1077a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    
    Ftm_Pwm_Ip_aDutyCycle[Instance][Channel] = DutyCycle;
   1077e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   10782:	f89d 300e 	ldrb.w	r3, [sp, #14]
   10786:	492b      	ldr	r1, [pc, #172]	; (10834 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x1d8>)
   10788:	00d2      	lsls	r2, r2, #3
   1078a:	4413      	add	r3, r2
   1078c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   10790:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    FirstEdge = PhaseShift;
   10794:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   10798:	f8ad 3018 	strh.w	r3, [sp, #24]

    SecondEdgeEdge = Ftm_Pwm_Ip_CalculatePhaseShift(Instance, DutyCycle, PhaseShift);
   1079c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   107a0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   107a4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   107a8:	4618      	mov	r0, r3
   107aa:	f7fe f8f9 	bl	e9a0 <Ftm_Pwm_Ip_CalculatePhaseShift>
   107ae:	4603      	mov	r3, r0
   107b0:	f8ad 3016 	strh.w	r3, [sp, #22]

    if (TRUE == SyncUpdate)
   107b4:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   107b8:	2b00      	cmp	r3, #0
   107ba:	d003      	beq.n	107c4 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x168>
    {
        SoftwareTrigger = FALSE;
   107bc:	2300      	movs	r3, #0
   107be:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   107c2:	e002      	b.n	107ca <Ftm_Pwm_Ip_SetDutyPhaseShift+0x16e>
    }
    else
    {
        SoftwareTrigger = TRUE;
   107c4:	2301      	movs	r3, #1
   107c6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    }

    if((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
   107ca:	f89d 200f 	ldrb.w	r2, [sp, #15]
   107ce:	f89d 300e 	ldrb.w	r3, [sp, #14]
   107d2:	4919      	ldr	r1, [pc, #100]	; (10838 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x1dc>)
   107d4:	00d2      	lsls	r2, r2, #3
   107d6:	4413      	add	r3, r2
   107d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   107dc:	2b02      	cmp	r3, #2
   107de:	d111      	bne.n	10804 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x1a8>
    {
        /* Update the state of current channel*/
        Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING;
   107e0:	f89d 200f 	ldrb.w	r2, [sp, #15]
   107e4:	f89d 300e 	ldrb.w	r3, [sp, #14]
   107e8:	4913      	ldr	r1, [pc, #76]	; (10838 <Ftm_Pwm_Ip_SetDutyPhaseShift+0x1dc>)
   107ea:	00d2      	lsls	r2, r2, #3
   107ec:	4413      	add	r3, r2
   107ee:	2201      	movs	r2, #1
   107f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        /* Set output for current channel*/
        Ftm_Pwm_Ip_SwOutputControl(Instance,
   107f4:	f89d 100e 	ldrb.w	r1, [sp, #14]
   107f8:	f89d 000f 	ldrb.w	r0, [sp, #15]
   107fc:	2300      	movs	r3, #0
   107fe:	2200      	movs	r2, #0
   10800:	f7ff f982 	bl	fb08 <Ftm_Pwm_Ip_SwOutputControl>
                                   FTM_PWM_IP_OUTPUT_STATE_LOW,
                                   FALSE);
    }

    /* Write CV registers and setup duty cycle and phase values */
    (void)Ftm_Pwm_Ip_UpdatePwmChannel(Instance,
   10804:	f8bd 4016 	ldrh.w	r4, [sp, #22]
   10808:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   1080c:	f89d 100e 	ldrb.w	r1, [sp, #14]
   10810:	f89d 000f 	ldrb.w	r0, [sp, #15]
   10814:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   10818:	9300      	str	r3, [sp, #0]
   1081a:	4623      	mov	r3, r4
   1081c:	f7ff fa4e 	bl	fcbc <Ftm_Pwm_Ip_UpdatePwmChannel>
                                      Channel,
                                      FirstEdge,
                                      SecondEdgeEdge,
                                      SoftwareTrigger);
}
   10820:	bf00      	nop
   10822:	b00a      	add	sp, #40	; 0x28
   10824:	bd10      	pop	{r4, pc}
   10826:	bf00      	nop
   10828:	0001a05c 	.word	0x0001a05c
   1082c:	1fff8e2c 	.word	0x1fff8e2c
   10830:	1fff8e74 	.word	0x1fff8e74
   10834:	1fff8e34 	.word	0x1fff8e34
   10838:	1fff9004 	.word	0x1fff9004

0001083c <Ftm_Pwm_Ip_DisableTrigger>:
*
* @implements Ftm_Pwm_Ip_DisableTrigger_Activity
**/
void  Ftm_Pwm_Ip_DisableTrigger(uint8 Instance,
                                uint32 TriggerMask)
{
   1083c:	b500      	push	{lr}
   1083e:	b085      	sub	sp, #20
   10840:	4603      	mov	r3, r0
   10842:	9100      	str	r1, [sp, #0]
   10844:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   10848:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1084c:	4a0c      	ldr	r2, [pc, #48]	; (10880 <Ftm_Pwm_Ip_DisableTrigger+0x44>)
   1084e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10852:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   10854:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10858:	2b03      	cmp	r3, #3
   1085a:	bf94      	ite	ls
   1085c:	2301      	movls	r3, #1
   1085e:	2300      	movhi	r3, #0
   10860:	b2db      	uxtb	r3, r3
   10862:	4618      	mov	r0, r3
   10864:	f7f0 f842 	bl	8ec <DevAssert>
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10();
   10868:	f006 fbc6 	bl	16ff8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10>

    Ftm_Pwm_Ip_DisableTriggerMask(FtmBase, TriggerMask);
   1086c:	9900      	ldr	r1, [sp, #0]
   1086e:	9803      	ldr	r0, [sp, #12]
   10870:	f7fd fa44 	bl	dcfc <Ftm_Pwm_Ip_DisableTriggerMask>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10();
   10874:	f006 fbec 	bl	17050 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10>
}
   10878:	bf00      	nop
   1087a:	b005      	add	sp, #20
   1087c:	f85d fb04 	ldr.w	pc, [sp], #4
   10880:	0001a05c 	.word	0x0001a05c

00010884 <Ftm_Pwm_Ip_EnableTrigger>:
*
* @implements Ftm_Pwm_Ip_EnableTrigger_Activity
**/
void  Ftm_Pwm_Ip_EnableTrigger(uint8 Instance,
                               uint32 TriggerMask)
{
   10884:	b500      	push	{lr}
   10886:	b085      	sub	sp, #20
   10888:	4603      	mov	r3, r0
   1088a:	9100      	str	r1, [sp, #0]
   1088c:	f88d 3007 	strb.w	r3, [sp, #7]

    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   10890:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10894:	4a0c      	ldr	r2, [pc, #48]	; (108c8 <Ftm_Pwm_Ip_EnableTrigger+0x44>)
   10896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1089a:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   1089c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   108a0:	2b03      	cmp	r3, #3
   108a2:	bf94      	ite	ls
   108a4:	2301      	movls	r3, #1
   108a6:	2300      	movhi	r3, #0
   108a8:	b2db      	uxtb	r3, r3
   108aa:	4618      	mov	r0, r3
   108ac:	f7f0 f81e 	bl	8ec <DevAssert>
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11();
   108b0:	f006 fbf4 	bl	1709c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11>

    Ftm_Pwm_Ip_EnableTriggerMask(FtmBase, TriggerMask);
   108b4:	9900      	ldr	r1, [sp, #0]
   108b6:	9803      	ldr	r0, [sp, #12]
   108b8:	f7fd fa2d 	bl	dd16 <Ftm_Pwm_Ip_EnableTriggerMask>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11();
   108bc:	f006 fc1a 	bl	170f4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11>
}
   108c0:	bf00      	nop
   108c2:	b005      	add	sp, #20
   108c4:	f85d fb04 	ldr.w	pc, [sp], #4
   108c8:	0001a05c 	.word	0x0001a05c

000108cc <Ftm_Pwm_Ip_SyncUpdate>:
 * Description   : This function will allow synchronized loading
 *                of the duty registers for all the channels of a given FTM module
 * @implements Ftm_Pwm_Ip_SyncUpdate_Activity
 **/
void Ftm_Pwm_Ip_SyncUpdate(uint8 Instance)
{
   108cc:	b500      	push	{lr}
   108ce:	b085      	sub	sp, #20
   108d0:	4603      	mov	r3, r0
   108d2:	f88d 3007 	strb.w	r3, [sp, #7]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   108d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   108da:	4a0d      	ldr	r2, [pc, #52]	; (10910 <Ftm_Pwm_Ip_SyncUpdate+0x44>)
   108dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   108e0:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   108e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   108e6:	2b03      	cmp	r3, #3
   108e8:	bf94      	ite	ls
   108ea:	2301      	movls	r3, #1
   108ec:	2300      	movhi	r3, #0
   108ee:	b2db      	uxtb	r3, r3
   108f0:	4618      	mov	r0, r3
   108f2:	f7ef fffb 	bl	8ec <DevAssert>
#endif
    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12();
   108f6:	f006 fc23 	bl	17140 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12>

    Ftm_Pwm_Ip_SetSoftwareTriggerCmd(FtmBase, TRUE);
   108fa:	2101      	movs	r1, #1
   108fc:	9803      	ldr	r0, [sp, #12]
   108fe:	f7fd f850 	bl	d9a2 <Ftm_Pwm_Ip_SetSoftwareTriggerCmd>

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12();
   10902:	f006 fc49 	bl	17198 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12>
}
   10906:	bf00      	nop
   10908:	b005      	add	sp, #20
   1090a:	f85d fb04 	ldr.w	pc, [sp], #4
   1090e:	bf00      	nop
   10910:	0001a05c 	.word	0x0001a05c

00010914 <Ftm_Pwm_Ip_SetChannelDeadTime>:
 * @implements Ftm_Pwm_Ip_SetChannelDeadTime_Activity
 **/
void Ftm_Pwm_Ip_SetChannelDeadTime(uint8 Instance,
                                   uint8 Channel,
                                   uint16 DeadTimeVal)
{
   10914:	b500      	push	{lr}
   10916:	b085      	sub	sp, #20
   10918:	4603      	mov	r3, r0
   1091a:	f88d 3007 	strb.w	r3, [sp, #7]
   1091e:	460b      	mov	r3, r1
   10920:	f88d 3006 	strb.w	r3, [sp, #6]
   10924:	4613      	mov	r3, r2
   10926:	f8ad 3004 	strh.w	r3, [sp, #4]
    Ftm_Pwm_Ip_HwAddrType * FtmBase = Ftm_Pwm_Ip_aFtmBase[Instance];
   1092a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1092e:	4a32      	ldr	r2, [pc, #200]	; (109f8 <Ftm_Pwm_Ip_SetChannelDeadTime+0xe4>)
   10930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   10934:	9303      	str	r3, [sp, #12]
#if (FTM_PWM_IP_DEV_ERROR_DETECT == STD_ON)

    DevAssert(Instance < FTM_PWM_IP_INSTANCE_COUNT);
   10936:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1093a:	2b03      	cmp	r3, #3
   1093c:	bf94      	ite	ls
   1093e:	2301      	movls	r3, #1
   10940:	2300      	movhi	r3, #0
   10942:	b2db      	uxtb	r3, r3
   10944:	4618      	mov	r0, r3
   10946:	f7ef ffd1 	bl	8ec <DevAssert>
    DevAssert(Channel < FTM_PWM_IP_CHANNEL_COUNT);
   1094a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1094e:	2b07      	cmp	r3, #7
   10950:	bf94      	ite	ls
   10952:	2301      	movls	r3, #1
   10954:	2300      	movhi	r3, #0
   10956:	b2db      	uxtb	r3, r3
   10958:	4618      	mov	r0, r3
   1095a:	f7ef ffc7 	bl	8ec <DevAssert>
    DevAssert(TRUE == Ftm_Pwm_Ip_GetDualChnCompCmd(FtmBase, Channel));
   1095e:	f89d 3006 	ldrb.w	r3, [sp, #6]
   10962:	4619      	mov	r1, r3
   10964:	9803      	ldr	r0, [sp, #12]
   10966:	f7fd fc89 	bl	e27c <Ftm_Pwm_Ip_GetDualChnCompCmd>
   1096a:	4603      	mov	r3, r0
   1096c:	4618      	mov	r0, r3
   1096e:	f7ef ffbd 	bl	8ec <DevAssert>
    DevAssert(TRUE == Ftm_Pwm_Ip_GetDualChnDeadtimeCmd(FtmBase, Channel));
   10972:	f89d 3006 	ldrb.w	r3, [sp, #6]
   10976:	4619      	mov	r1, r3
   10978:	9803      	ldr	r0, [sp, #12]
   1097a:	f7fd fca3 	bl	e2c4 <Ftm_Pwm_Ip_GetDualChnDeadtimeCmd>
   1097e:	4603      	mov	r3, r0
   10980:	4618      	mov	r0, r3
   10982:	f7ef ffb3 	bl	8ec <DevAssert>
    DevAssert(TRUE == Ftm_Pwm_Ip_ValidateParamDeadTime(Instance, Channel, DeadTimeVal));
   10986:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1098a:	f89d 1006 	ldrb.w	r1, [sp, #6]
   1098e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10992:	4618      	mov	r0, r3
   10994:	f7fd ff80 	bl	e898 <Ftm_Pwm_Ip_ValidateParamDeadTime>
   10998:	4603      	mov	r3, r0
   1099a:	4618      	mov	r0, r3
   1099c:	f7ef ffa6 	bl	8ec <DevAssert>
   
#else
    (void)Channel;
#endif

    SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13();
   109a0:	f006 fc20 	bl	171e4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13>

    if (DeadTimeVal < 64U)
   109a4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   109a8:	2b3f      	cmp	r3, #63	; 0x3f
   109aa:	d80b      	bhi.n	109c4 <Ftm_Pwm_Ip_SetChannelDeadTime+0xb0>
    {   /* Set the Deadtime Value */
        Ftm_Pwm_Ip_SetDeadtimeCount(FtmBase, (uint8)DeadTimeVal);
   109ac:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   109b0:	b2db      	uxtb	r3, r3
   109b2:	4619      	mov	r1, r3
   109b4:	9803      	ldr	r0, [sp, #12]
   109b6:	f7fd f946 	bl	dc46 <Ftm_Pwm_Ip_SetDeadtimeCount>
        /* Set the Extended Deadtime Value */
        Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, 0U);
   109ba:	2100      	movs	r1, #0
   109bc:	9803      	ldr	r0, [sp, #12]
   109be:	f7fd f973 	bl	dca8 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
   109c2:	e012      	b.n	109ea <Ftm_Pwm_Ip_SetChannelDeadTime+0xd6>
    }
    else
    {
        /* Set the Deadtime Value */
        Ftm_Pwm_Ip_SetDeadtimeCount (FtmBase, (uint8)(DeadTimeVal & (uint8)0x3F));
   109c4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   109c8:	b2db      	uxtb	r3, r3
   109ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   109ce:	b2db      	uxtb	r3, r3
   109d0:	4619      	mov	r1, r3
   109d2:	9803      	ldr	r0, [sp, #12]
   109d4:	f7fd f937 	bl	dc46 <Ftm_Pwm_Ip_SetDeadtimeCount>
        /* Set the Extended Deadtime Value */
        Ftm_Pwm_Ip_SetExtDeadtimeValue(FtmBase, (uint8)(DeadTimeVal >> 6U));
   109d8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   109dc:	099b      	lsrs	r3, r3, #6
   109de:	b29b      	uxth	r3, r3
   109e0:	b2db      	uxtb	r3, r3
   109e2:	4619      	mov	r1, r3
   109e4:	9803      	ldr	r0, [sp, #12]
   109e6:	f7fd f95f 	bl	dca8 <Ftm_Pwm_Ip_SetExtDeadtimeValue>
    }

    SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13();
   109ea:	f006 fc27 	bl	1723c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13>
}
   109ee:	bf00      	nop
   109f0:	b005      	add	sp, #20
   109f2:	f85d fb04 	ldr.w	pc, [sp], #4
   109f6:	bf00      	nop
   109f8:	0001a05c 	.word	0x0001a05c

000109fc <Pwm_GetPartitionChannelIdx>:
     (PWM_FAST_UPDATE_API                   == STD_ON) || \
     (PWM_SET_DUTY_PHASE_SHIFT_API          == STD_ON))

static inline uint8 Pwm_GetPartitionChannelIdx(uint32          CoreId,
                                               Pwm_ChannelType ChannelNumber)
{
   109fc:	b082      	sub	sp, #8
   109fe:	9001      	str	r0, [sp, #4]
   10a00:	460b      	mov	r3, r1
   10a02:	f88d 3003 	strb.w	r3, [sp, #3]
    return (*(Pwm_aState[CoreId].PwmConfig)->PwmLogicalToPartitionMap)[ChannelNumber];
#else
    /* Avoid compiler warning */
    (void)CoreId;

    return ChannelNumber;
   10a06:	f89d 3003 	ldrb.w	r3, [sp, #3]
#endif
}
   10a0a:	4618      	mov	r0, r3
   10a0c:	b002      	add	sp, #8
   10a0e:	4770      	bx	lr

00010a10 <Pwm_ValidateGlobalConfigCall>:
* @retval       E_NOT_OK            Caller of the function should drop execution
*
*/
static Std_ReturnType Pwm_ValidateGlobalConfigCall(uint32   CoreId,
                                                   uint8    ServiceId)
{
   10a10:	b500      	push	{lr}
   10a12:	b085      	sub	sp, #20
   10a14:	9001      	str	r0, [sp, #4]
   10a16:	460b      	mov	r3, r1
   10a18:	f88d 3003 	strb.w	r3, [sp, #3]
    /** @brief  Variable to store the value returned by the function */
    Std_ReturnType                      RetVal = (Std_ReturnType)E_OK;
   10a1c:	2300      	movs	r3, #0
   10a1e:	f88d 300f 	strb.w	r3, [sp, #15]

    if (PWM_STATE_UNINIT == Pwm_aState[CoreId].PwmDriverState)
   10a22:	4916      	ldr	r1, [pc, #88]	; (10a7c <Pwm_ValidateGlobalConfigCall+0x6c>)
   10a24:	9a01      	ldr	r2, [sp, #4]
   10a26:	4613      	mov	r3, r2
   10a28:	005b      	lsls	r3, r3, #1
   10a2a:	4413      	add	r3, r2
   10a2c:	00db      	lsls	r3, r3, #3
   10a2e:	440b      	add	r3, r1
   10a30:	681b      	ldr	r3, [r3, #0]
   10a32:	2b00      	cmp	r3, #0
   10a34:	d10e      	bne.n	10a54 <Pwm_ValidateGlobalConfigCall+0x44>
    {
        if (PWM_INIT_ID != ServiceId)
   10a36:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10a3a:	2b00      	cmp	r3, #0
   10a3c:	d018      	beq.n	10a70 <Pwm_ValidateGlobalConfigCall+0x60>
        {
            (void)Det_ReportError
   10a3e:	f89d 2003 	ldrb.w	r2, [sp, #3]
   10a42:	2311      	movs	r3, #17
   10a44:	2100      	movs	r1, #0
   10a46:	2079      	movs	r0, #121	; 0x79
   10a48:	f008 f940 	bl	18ccc <Det_ReportError>
                (uint8)  PWM_INDEX,
                (uint8)  ServiceId,
                (uint8)  PWM_E_UNINIT
            );

            RetVal = (Std_ReturnType)E_NOT_OK;
   10a4c:	2301      	movs	r3, #1
   10a4e:	f88d 300f 	strb.w	r3, [sp, #15]
   10a52:	e00d      	b.n	10a70 <Pwm_ValidateGlobalConfigCall+0x60>
        }
    }
    else
    {
        if (PWM_INIT_ID == ServiceId)
   10a54:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10a58:	2b00      	cmp	r3, #0
   10a5a:	d109      	bne.n	10a70 <Pwm_ValidateGlobalConfigCall+0x60>
        {
            (void)Det_ReportError
   10a5c:	f89d 2003 	ldrb.w	r2, [sp, #3]
   10a60:	2314      	movs	r3, #20
   10a62:	2100      	movs	r1, #0
   10a64:	2079      	movs	r0, #121	; 0x79
   10a66:	f008 f931 	bl	18ccc <Det_ReportError>
                (uint8)  PWM_INDEX,
                (uint8)  ServiceId,
                (uint8)  PWM_E_ALREADY_INITIALIZED
            );

            RetVal = (Std_ReturnType)E_NOT_OK;
   10a6a:	2301      	movs	r3, #1
   10a6c:	f88d 300f 	strb.w	r3, [sp, #15]
        }
    }

    return RetVal;
   10a70:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   10a74:	4618      	mov	r0, r3
   10a76:	b005      	add	sp, #20
   10a78:	f85d fb04 	ldr.w	pc, [sp], #4
   10a7c:	1fff8b3c 	.word	0x1fff8b3c

00010a80 <Pwm_EndValidateGlobalConfigCall>:
*
*/
static inline void Pwm_EndValidateGlobalConfigCall(uint32           CoreId,
                                                   Std_ReturnType   ValidCall,
                                                   uint8            ServiceId)
{
   10a80:	b082      	sub	sp, #8
   10a82:	9001      	str	r0, [sp, #4]
   10a84:	460b      	mov	r3, r1
   10a86:	f88d 3003 	strb.w	r3, [sp, #3]
   10a8a:	4613      	mov	r3, r2
   10a8c:	f88d 3002 	strb.w	r3, [sp, #2]
    /* Change the state of the driver only if the previous call to
    Pwm_ValidateGlobalConfigCall() stated that the API call is valid */
    if ((Std_ReturnType)E_OK == ValidCall)
   10a90:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10a94:	2b00      	cmp	r3, #0
   10a96:	d116      	bne.n	10ac6 <Pwm_EndValidateGlobalConfigCall+0x46>
    {
        if (PWM_DEINIT_ID == ServiceId)
   10a98:	f89d 3002 	ldrb.w	r3, [sp, #2]
   10a9c:	2b01      	cmp	r3, #1
   10a9e:	d109      	bne.n	10ab4 <Pwm_EndValidateGlobalConfigCall+0x34>
        {
            Pwm_aState[CoreId].PwmDriverState = PWM_STATE_UNINIT;
   10aa0:	490a      	ldr	r1, [pc, #40]	; (10acc <Pwm_EndValidateGlobalConfigCall+0x4c>)
   10aa2:	9a01      	ldr	r2, [sp, #4]
   10aa4:	4613      	mov	r3, r2
   10aa6:	005b      	lsls	r3, r3, #1
   10aa8:	4413      	add	r3, r2
   10aaa:	00db      	lsls	r3, r3, #3
   10aac:	440b      	add	r3, r1
   10aae:	2200      	movs	r2, #0
   10ab0:	601a      	str	r2, [r3, #0]
        else
        {
            Pwm_aState[CoreId].PwmDriverState = PWM_STATE_IDLE;
        }
    }
}
   10ab2:	e008      	b.n	10ac6 <Pwm_EndValidateGlobalConfigCall+0x46>
            Pwm_aState[CoreId].PwmDriverState = PWM_STATE_IDLE;
   10ab4:	4905      	ldr	r1, [pc, #20]	; (10acc <Pwm_EndValidateGlobalConfigCall+0x4c>)
   10ab6:	9a01      	ldr	r2, [sp, #4]
   10ab8:	4613      	mov	r3, r2
   10aba:	005b      	lsls	r3, r3, #1
   10abc:	4413      	add	r3, r2
   10abe:	00db      	lsls	r3, r3, #3
   10ac0:	440b      	add	r3, r1
   10ac2:	2201      	movs	r2, #1
   10ac4:	601a      	str	r2, [r3, #0]
}
   10ac6:	bf00      	nop
   10ac8:	b002      	add	sp, #8
   10aca:	4770      	bx	lr
   10acc:	1fff8b3c 	.word	0x1fff8b3c

00010ad0 <Pwm_ValidateChannelConfigCall>:
*
*/
static inline Std_ReturnType Pwm_ValidateChannelConfigCall(uint32          CoreId,
                                                           Pwm_ChannelType ChannelNumber,
                                                           uint8           ServiceId)
{
   10ad0:	b500      	push	{lr}
   10ad2:	b085      	sub	sp, #20
   10ad4:	9001      	str	r0, [sp, #4]
   10ad6:	460b      	mov	r3, r1
   10ad8:	f88d 3003 	strb.w	r3, [sp, #3]
   10adc:	4613      	mov	r3, r2
   10ade:	f88d 3002 	strb.w	r3, [sp, #2]
    /** @brief  Variable to store the value returned by the function */
    Std_ReturnType          RetVal = (Std_ReturnType)E_OK;
   10ae2:	2300      	movs	r3, #0
   10ae4:	f88d 300f 	strb.w	r3, [sp, #15]
    Pwm_ChannelType         PartitionChannelIdx;

    /* Check if the driver is initialized */
    if (PWM_STATE_UNINIT == Pwm_aState[CoreId].PwmDriverState)
   10ae8:	4925      	ldr	r1, [pc, #148]	; (10b80 <Pwm_ValidateChannelConfigCall+0xb0>)
   10aea:	9a01      	ldr	r2, [sp, #4]
   10aec:	4613      	mov	r3, r2
   10aee:	005b      	lsls	r3, r3, #1
   10af0:	4413      	add	r3, r2
   10af2:	00db      	lsls	r3, r3, #3
   10af4:	440b      	add	r3, r1
   10af6:	681b      	ldr	r3, [r3, #0]
   10af8:	2b00      	cmp	r3, #0
   10afa:	d10a      	bne.n	10b12 <Pwm_ValidateChannelConfigCall+0x42>
    {
        RetVal = (Std_ReturnType)E_NOT_OK;
   10afc:	2301      	movs	r3, #1
   10afe:	f88d 300f 	strb.w	r3, [sp, #15]

        /* Driver not initialized yet */
        (void)Det_ReportError
   10b02:	f89d 2002 	ldrb.w	r2, [sp, #2]
   10b06:	2311      	movs	r3, #17
   10b08:	2100      	movs	r1, #0
   10b0a:	2079      	movs	r0, #121	; 0x79
   10b0c:	f008 f8de 	bl	18ccc <Det_ReportError>
   10b10:	e02f      	b.n	10b72 <Pwm_ValidateChannelConfigCall+0xa2>
        );
    }
    else
    {
        /* Check that the channel is in valid range */
        if (PWM_CONFIG_LOGIC_CHANNELS <= ChannelNumber)
   10b12:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10b16:	2b00      	cmp	r3, #0
   10b18:	d00a      	beq.n	10b30 <Pwm_ValidateChannelConfigCall+0x60>
        {
            RetVal = (Std_ReturnType)E_NOT_OK;
   10b1a:	2301      	movs	r3, #1
   10b1c:	f88d 300f 	strb.w	r3, [sp, #15]

            (void)Det_ReportError
   10b20:	f89d 2002 	ldrb.w	r2, [sp, #2]
   10b24:	2312      	movs	r3, #18
   10b26:	2100      	movs	r1, #0
   10b28:	2079      	movs	r0, #121	; 0x79
   10b2a:	f008 f8cf 	bl	18ccc <Det_ReportError>
   10b2e:	e020      	b.n	10b72 <Pwm_ValidateChannelConfigCall+0xa2>
                (uint8)  PWM_E_PARAM_CHANNEL
            );
        }
        else
        {
            PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
   10b30:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10b34:	4619      	mov	r1, r3
   10b36:	9801      	ldr	r0, [sp, #4]
   10b38:	f7ff ff60 	bl	109fc <Pwm_GetPartitionChannelIdx>
   10b3c:	4603      	mov	r3, r0
   10b3e:	f88d 300e 	strb.w	r3, [sp, #14]

            /* Check that the channel is not in current partition */
            if (PartitionChannelIdx >= Pwm_aState[CoreId].PwmConfig->NumChannels)
   10b42:	490f      	ldr	r1, [pc, #60]	; (10b80 <Pwm_ValidateChannelConfigCall+0xb0>)
   10b44:	9a01      	ldr	r2, [sp, #4]
   10b46:	4613      	mov	r3, r2
   10b48:	005b      	lsls	r3, r3, #1
   10b4a:	4413      	add	r3, r2
   10b4c:	00db      	lsls	r3, r3, #3
   10b4e:	440b      	add	r3, r1
   10b50:	3304      	adds	r3, #4
   10b52:	681b      	ldr	r3, [r3, #0]
   10b54:	781b      	ldrb	r3, [r3, #0]
   10b56:	f89d 200e 	ldrb.w	r2, [sp, #14]
   10b5a:	429a      	cmp	r2, r3
   10b5c:	d309      	bcc.n	10b72 <Pwm_ValidateChannelConfigCall+0xa2>
            {
                RetVal = (Std_ReturnType)E_NOT_OK;
   10b5e:	2301      	movs	r3, #1
   10b60:	f88d 300f 	strb.w	r3, [sp, #15]

                (void)Det_ReportError
   10b64:	f89d 2002 	ldrb.w	r2, [sp, #2]
   10b68:	2340      	movs	r3, #64	; 0x40
   10b6a:	2100      	movs	r1, #0
   10b6c:	2079      	movs	r0, #121	; 0x79
   10b6e:	f008 f8ad 	bl	18ccc <Det_ReportError>
            /* Do nothing */
            }
        }
    }

    return RetVal;
   10b72:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   10b76:	4618      	mov	r0, r3
   10b78:	b005      	add	sp, #20
   10b7a:	f85d fb04 	ldr.w	pc, [sp], #4
   10b7e:	bf00      	nop
   10b80:	1fff8b3c 	.word	0x1fff8b3c

00010b84 <Pwm_EndValidateChannelConfigCall>:
*
* @return       void
*
*/
static inline void Pwm_EndValidateChannelConfigCall(Pwm_ChannelType ChannelNumber)
{
   10b84:	b082      	sub	sp, #8
   10b86:	4603      	mov	r3, r0
   10b88:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Avoid compiler warning */
    (void)ChannelNumber;
}
   10b8c:	bf00      	nop
   10b8e:	b002      	add	sp, #8
   10b90:	4770      	bx	lr

00010b92 <Pwm_ValidateParamPtrInit>:
* @retval       E_NOT_OK        Pointer is invalid
*
*/
static inline Std_ReturnType Pwm_ValidateParamPtrInit(uint32                 CoreId,
                                                      const Pwm_ConfigType * ConfigPtr)
{
   10b92:	b500      	push	{lr}
   10b94:	b085      	sub	sp, #20
   10b96:	9001      	str	r0, [sp, #4]
   10b98:	9100      	str	r1, [sp, #0]
    /** @brief  Variable to store the value returned by the function */
    Std_ReturnType      RetVal = (Std_ReturnType)E_OK;
   10b9a:	2300      	movs	r3, #0
   10b9c:	f88d 300f 	strb.w	r3, [sp, #15]
    /* For pre-compile, check DET error if the received config pointer is not NULL_PTR */
    if (NULL_PTR != ConfigPtr)
    {
#else
    /* For post build, check DET error if the received config pointer is NULL_PTR */
    if (NULL_PTR == ConfigPtr)
   10ba0:	9b00      	ldr	r3, [sp, #0]
   10ba2:	2b00      	cmp	r3, #0
   10ba4:	d108      	bne.n	10bb8 <Pwm_ValidateParamPtrInit+0x26>
    {
#endif
        /* Avoid compiler warning */
        (void)CoreId;

        (void)Det_ReportError
   10ba6:	2310      	movs	r3, #16
   10ba8:	2200      	movs	r2, #0
   10baa:	2100      	movs	r1, #0
   10bac:	2079      	movs	r0, #121	; 0x79
   10bae:	f008 f88d 	bl	18ccc <Det_ReportError>
            (uint8)  PWM_INDEX,
            (uint8)  PWM_INIT_ID,
            (uint8)  PWM_E_INIT_FAILED
        );

        RetVal = (Std_ReturnType)E_NOT_OK;
   10bb2:	2301      	movs	r3, #1
   10bb4:	f88d 300f 	strb.w	r3, [sp, #15]
    #endif
        /* Do nothing */
    }
#endif

    return RetVal;
   10bb8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   10bbc:	4618      	mov	r0, r3
   10bbe:	b005      	add	sp, #20
   10bc0:	f85d fb04 	ldr.w	pc, [sp], #4

00010bc4 <Pwm_ValidateParamDuty>:
* @retval       E_NOT_OK          Duty Cycle is invalid
*
*/
static inline Std_ReturnType Pwm_ValidateParamDuty(uint16   DutyCycle,
                                                   uint8    ServiceId)
{
   10bc4:	b500      	push	{lr}
   10bc6:	b085      	sub	sp, #20
   10bc8:	4603      	mov	r3, r0
   10bca:	460a      	mov	r2, r1
   10bcc:	f8ad 3006 	strh.w	r3, [sp, #6]
   10bd0:	4613      	mov	r3, r2
   10bd2:	f88d 3005 	strb.w	r3, [sp, #5]
    /** @brief  Variable to store the value returned by the function */
    Std_ReturnType                      RetVal = (Std_ReturnType)E_OK;
   10bd6:	2300      	movs	r3, #0
   10bd8:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Check if the DutyCycle is in valid range */
    if (DutyCycle > PWM_DUTY_CYCLE_100)
   10bdc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   10be0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   10be4:	d909      	bls.n	10bfa <Pwm_ValidateParamDuty+0x36>
    {
        (void)Det_ReportError
   10be6:	f89d 2005 	ldrb.w	r2, [sp, #5]
   10bea:	2332      	movs	r3, #50	; 0x32
   10bec:	2100      	movs	r1, #0
   10bee:	2079      	movs	r0, #121	; 0x79
   10bf0:	f008 f86c 	bl	18ccc <Det_ReportError>
            (uint8)  PWM_INDEX,
            (uint8)  ServiceId,
            (uint8)  PWM_E_DUTYCYCLE_RANGE
        );

        RetVal = (Std_ReturnType)E_NOT_OK;
   10bf4:	2301      	movs	r3, #1
   10bf6:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    return RetVal;
   10bfa:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   10bfe:	4618      	mov	r0, r3
   10c00:	b005      	add	sp, #20
   10c02:	f85d fb04 	ldr.w	pc, [sp], #4

00010c06 <Pwm_ValidateParamsPeriodClass>:
static inline Std_ReturnType Pwm_ValidateParamsPeriodClass(uint32                CoreId,
                                                           Pwm_ChannelType       ChannelNumber,
                                                           Pwm_ChannelClassType  ChannelClass,
                                                           Pwm_PeriodType        Period,
                                                           uint8                 ServiceId)
{
   10c06:	b500      	push	{lr}
   10c08:	b087      	sub	sp, #28
   10c0a:	9003      	str	r0, [sp, #12]
   10c0c:	9201      	str	r2, [sp, #4]
   10c0e:	461a      	mov	r2, r3
   10c10:	460b      	mov	r3, r1
   10c12:	f88d 300b 	strb.w	r3, [sp, #11]
   10c16:	4613      	mov	r3, r2
   10c18:	f8ad 3008 	strh.w	r3, [sp, #8]
    /** @brief  Variable to store the value returned by the function */
    Std_ReturnType              RetVal = (Std_ReturnType)E_OK;
   10c1c:	2300      	movs	r3, #0
   10c1e:	f88d 3017 	strb.w	r3, [sp, #23]
#if (PWM_MAX_PERIOD_PLAUSABILITY == STD_ON)
    uint32                      PeriodMaxValue = (uint32)0U;
   10c22:	2300      	movs	r3, #0
   10c24:	9304      	str	r3, [sp, #16]
    (void)ChannelNumber;
    (void)CoreId;
#endif

    /* Check if channel supports updates of the period */
    if (PWM_VARIABLE_PERIOD != ChannelClass)
   10c26:	9b01      	ldr	r3, [sp, #4]
   10c28:	2b00      	cmp	r3, #0
   10c2a:	d00a      	beq.n	10c42 <Pwm_ValidateParamsPeriodClass+0x3c>
    {
        (void)Det_ReportError
   10c2c:	f89d 2020 	ldrb.w	r2, [sp, #32]
   10c30:	2313      	movs	r3, #19
   10c32:	2100      	movs	r1, #0
   10c34:	2079      	movs	r0, #121	; 0x79
   10c36:	f008 f849 	bl	18ccc <Det_ReportError>
            (uint8)  PWM_INDEX,
            (uint8)  ServiceId,
            (uint8)  PWM_E_PERIOD_UNCHANGEABLE
        );

        RetVal = (Std_ReturnType)E_NOT_OK;
   10c3a:	2301      	movs	r3, #1
   10c3c:	f88d 3017 	strb.w	r3, [sp, #23]
   10c40:	e023      	b.n	10c8a <Pwm_ValidateParamsPeriodClass+0x84>
    }
    else
    {
#if (PWM_MAX_PERIOD_PLAUSABILITY == STD_ON)
        PeriodMaxValue = (uint32)Pwm_Ipw_GetMaxPeriodValue(&((*Pwm_aState[CoreId].PwmChannelConfigs)[ChannelNumber].IpwChannelCfg));
   10c42:	4915      	ldr	r1, [pc, #84]	; (10c98 <Pwm_ValidateParamsPeriodClass+0x92>)
   10c44:	9a03      	ldr	r2, [sp, #12]
   10c46:	4613      	mov	r3, r2
   10c48:	005b      	lsls	r3, r3, #1
   10c4a:	4413      	add	r3, r2
   10c4c:	00db      	lsls	r3, r3, #3
   10c4e:	440b      	add	r3, r1
   10c50:	3310      	adds	r3, #16
   10c52:	6819      	ldr	r1, [r3, #0]
   10c54:	f89d 200b 	ldrb.w	r2, [sp, #11]
   10c58:	4613      	mov	r3, r2
   10c5a:	005b      	lsls	r3, r3, #1
   10c5c:	4413      	add	r3, r2
   10c5e:	00db      	lsls	r3, r3, #3
   10c60:	440b      	add	r3, r1
   10c62:	3308      	adds	r3, #8
   10c64:	4618      	mov	r0, r3
   10c66:	f000 fc8b 	bl	11580 <Pwm_Ipw_GetMaxPeriodValue>
   10c6a:	9004      	str	r0, [sp, #16]

        /* Check if period is in range */
        if ((uint32)Period > PeriodMaxValue)
   10c6c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   10c70:	9a04      	ldr	r2, [sp, #16]
   10c72:	429a      	cmp	r2, r3
   10c74:	d209      	bcs.n	10c8a <Pwm_ValidateParamsPeriodClass+0x84>
        {
            (void)Det_ReportError
   10c76:	f89d 2020 	ldrb.w	r2, [sp, #32]
   10c7a:	231a      	movs	r3, #26
   10c7c:	2100      	movs	r1, #0
   10c7e:	2079      	movs	r0, #121	; 0x79
   10c80:	f008 f824 	bl	18ccc <Det_ReportError>
                (uint8)  PWM_INDEX,
                (uint8)  ServiceId,
                (uint8)  PWM_E_PERIODVALUE
            );

            RetVal = (Std_ReturnType)E_NOT_OK;
   10c84:	2301      	movs	r3, #1
   10c86:	f88d 3017 	strb.w	r3, [sp, #23]
#else
        /* Nothing to do in this branch */
#endif
    }

    return RetVal;
   10c8a:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
   10c8e:	4618      	mov	r0, r3
   10c90:	b007      	add	sp, #28
   10c92:	f85d fb04 	ldr.w	pc, [sp], #4
   10c96:	bf00      	nop
   10c98:	1fff8b3c 	.word	0x1fff8b3c

00010c9c <Pwm_ValidateSetOutPutToIdle>:
* @retval           RetVal          E_NOT_OK  Set output to idle is not valid
                                    E_OK      Set output to idle is valid
*/
static inline Std_ReturnType Pwm_ValidateSetOutPutToIdle(uint32            CoreId,
                                                         Pwm_ChannelType   ChannelNumber)
{
   10c9c:	b500      	push	{lr}
   10c9e:	b085      	sub	sp, #20
   10ca0:	9001      	str	r0, [sp, #4]
   10ca2:	460b      	mov	r3, r1
   10ca4:	f88d 3003 	strb.w	r3, [sp, #3]
    
    /** @brief  Variable to store the value returned by the function */
    Std_ReturnType                      RetVal = (Std_ReturnType)E_OK;
   10ca8:	2300      	movs	r3, #0
   10caa:	f88d 300f 	strb.w	r3, [sp, #15]

    RetVal = Pwm_Ipw_ValidateSetOutPutToIdle(&((*Pwm_aState[CoreId].PwmChannelConfigs)[ChannelNumber].IpwChannelCfg));
   10cae:	4913      	ldr	r1, [pc, #76]	; (10cfc <Pwm_ValidateSetOutPutToIdle+0x60>)
   10cb0:	9a01      	ldr	r2, [sp, #4]
   10cb2:	4613      	mov	r3, r2
   10cb4:	005b      	lsls	r3, r3, #1
   10cb6:	4413      	add	r3, r2
   10cb8:	00db      	lsls	r3, r3, #3
   10cba:	440b      	add	r3, r1
   10cbc:	3310      	adds	r3, #16
   10cbe:	6819      	ldr	r1, [r3, #0]
   10cc0:	f89d 2003 	ldrb.w	r2, [sp, #3]
   10cc4:	4613      	mov	r3, r2
   10cc6:	005b      	lsls	r3, r3, #1
   10cc8:	4413      	add	r3, r2
   10cca:	00db      	lsls	r3, r3, #3
   10ccc:	440b      	add	r3, r1
   10cce:	3308      	adds	r3, #8
   10cd0:	4618      	mov	r0, r3
   10cd2:	f000 fc3f 	bl	11554 <Pwm_Ipw_ValidateSetOutPutToIdle>
   10cd6:	4603      	mov	r3, r0
   10cd8:	f88d 300f 	strb.w	r3, [sp, #15]

    if((Std_ReturnType)E_OK != RetVal)
   10cdc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10ce0:	2b00      	cmp	r3, #0
   10ce2:	d005      	beq.n	10cf0 <Pwm_ValidateSetOutPutToIdle+0x54>
    {
        (void)Det_ReportError
   10ce4:	2342      	movs	r3, #66	; 0x42
   10ce6:	2204      	movs	r2, #4
   10ce8:	2100      	movs	r1, #0
   10cea:	2079      	movs	r0, #121	; 0x79
   10cec:	f007 ffee 	bl	18ccc <Det_ReportError>
            (uint8)  PWM_SETOUTPUTTOIDLE_ID,
            (uint8)  PWM_E_SETOUTPUTTOIDLE_NOT_SUPPORTED
        );
    }

    return RetVal;
   10cf0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   10cf4:	4618      	mov	r0, r3
   10cf6:	b005      	add	sp, #20
   10cf8:	f85d fb04 	ldr.w	pc, [sp], #4
   10cfc:	1fff8b3c 	.word	0x1fff8b3c

00010d00 <Pwm_Init>:
*
* @implements   Pwm_Init_Activity
*
*/
void Pwm_Init(const Pwm_ConfigType * ConfigPtr)
{
   10d00:	b510      	push	{r4, lr}
   10d02:	b084      	sub	sp, #16
   10d04:	9001      	str	r0, [sp, #4]
#endif
    uint32                      CoreId;
    uint8                       Index;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
   10d06:	2300      	movs	r3, #0
   10d08:	9302      	str	r3, [sp, #8]

#if (PWM_VALIDATE_GLOBAL_CONFIG_CALL == STD_ON)
    CallIsValid = Pwm_ValidateGlobalConfigCall(CoreId, PWM_INIT_ID);
   10d0a:	2100      	movs	r1, #0
   10d0c:	9802      	ldr	r0, [sp, #8]
   10d0e:	f7ff fe7f 	bl	10a10 <Pwm_ValidateGlobalConfigCall>
   10d12:	4603      	mov	r3, r0
   10d14:	f88d 300f 	strb.w	r3, [sp, #15]

    if ((Std_ReturnType)E_OK == CallIsValid)
   10d18:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10d1c:	2b00      	cmp	r3, #0
   10d1e:	f040 8089 	bne.w	10e34 <Pwm_Init+0x134>
    {
#endif

#if (PWM_PARAM_CHECK == STD_ON)
        CallIsValid = Pwm_ValidateParamPtrInit(CoreId, ConfigPtr);
   10d22:	9901      	ldr	r1, [sp, #4]
   10d24:	9802      	ldr	r0, [sp, #8]
   10d26:	f7ff ff34 	bl	10b92 <Pwm_ValidateParamPtrInit>
   10d2a:	4603      	mov	r3, r0
   10d2c:	f88d 300f 	strb.w	r3, [sp, #15]

        if ((Std_ReturnType)E_OK == CallIsValid)
   10d30:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10d34:	2b00      	cmp	r3, #0
   10d36:	d17d      	bne.n	10e34 <Pwm_Init+0x134>
#else
            Pwm_aState[CoreId].PwmConfig = &Pwm_Config;
#endif
            (void)ConfigPtr;
#else
            Pwm_aState[CoreId].PwmConfig = ConfigPtr;
   10d38:	4943      	ldr	r1, [pc, #268]	; (10e48 <Pwm_Init+0x148>)
   10d3a:	9a02      	ldr	r2, [sp, #8]
   10d3c:	4613      	mov	r3, r2
   10d3e:	005b      	lsls	r3, r3, #1
   10d40:	4413      	add	r3, r2
   10d42:	00db      	lsls	r3, r3, #3
   10d44:	440b      	add	r3, r1
   10d46:	3304      	adds	r3, #4
   10d48:	9a01      	ldr	r2, [sp, #4]
   10d4a:	601a      	str	r2, [r3, #0]
#endif

#if (PWM_HW_INSTANCE_USED == STD_ON)
            /* IPW call to hw instance initialization when PWM controls the entire hw instance */
            for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
   10d4c:	2300      	movs	r3, #0
   10d4e:	f88d 300e 	strb.w	r3, [sp, #14]
   10d52:	e018      	b.n	10d86 <Pwm_Init+0x86>
            {
                Pwm_Ipw_InitInstance(&((*Pwm_aState[CoreId].PwmConfig->PwmInstancesConfig)[Index]));
   10d54:	493c      	ldr	r1, [pc, #240]	; (10e48 <Pwm_Init+0x148>)
   10d56:	9a02      	ldr	r2, [sp, #8]
   10d58:	4613      	mov	r3, r2
   10d5a:	005b      	lsls	r3, r3, #1
   10d5c:	4413      	add	r3, r2
   10d5e:	00db      	lsls	r3, r3, #3
   10d60:	440b      	add	r3, r1
   10d62:	3304      	adds	r3, #4
   10d64:	681b      	ldr	r3, [r3, #0]
   10d66:	68d9      	ldr	r1, [r3, #12]
   10d68:	f89d 200e 	ldrb.w	r2, [sp, #14]
   10d6c:	4613      	mov	r3, r2
   10d6e:	005b      	lsls	r3, r3, #1
   10d70:	4413      	add	r3, r2
   10d72:	009b      	lsls	r3, r3, #2
   10d74:	440b      	add	r3, r1
   10d76:	4618      	mov	r0, r3
   10d78:	f000 fa7a 	bl	11270 <Pwm_Ipw_InitInstance>
            for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
   10d7c:	f89d 300e 	ldrb.w	r3, [sp, #14]
   10d80:	3301      	adds	r3, #1
   10d82:	f88d 300e 	strb.w	r3, [sp, #14]
   10d86:	4930      	ldr	r1, [pc, #192]	; (10e48 <Pwm_Init+0x148>)
   10d88:	9a02      	ldr	r2, [sp, #8]
   10d8a:	4613      	mov	r3, r2
   10d8c:	005b      	lsls	r3, r3, #1
   10d8e:	4413      	add	r3, r2
   10d90:	00db      	lsls	r3, r3, #3
   10d92:	440b      	add	r3, r1
   10d94:	3304      	adds	r3, #4
   10d96:	681b      	ldr	r3, [r3, #0]
   10d98:	7a1b      	ldrb	r3, [r3, #8]
   10d9a:	f89d 200e 	ldrb.w	r2, [sp, #14]
   10d9e:	429a      	cmp	r2, r3
   10da0:	d3d8      	bcc.n	10d54 <Pwm_Init+0x54>
            }
#endif

            /* All validations passed. Here starts the actual functional code of the function */
            for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
   10da2:	2300      	movs	r3, #0
   10da4:	f88d 300e 	strb.w	r3, [sp, #14]
   10da8:	e036      	b.n	10e18 <Pwm_Init+0x118>
            {
                Pwm_aState[CoreId].PwmChannelConfigs[Index] = &((*Pwm_aState[CoreId].PwmConfig->PwmChannelsConfig)[Index]);
   10daa:	4927      	ldr	r1, [pc, #156]	; (10e48 <Pwm_Init+0x148>)
   10dac:	9a02      	ldr	r2, [sp, #8]
   10dae:	4613      	mov	r3, r2
   10db0:	005b      	lsls	r3, r3, #1
   10db2:	4413      	add	r3, r2
   10db4:	00db      	lsls	r3, r3, #3
   10db6:	440b      	add	r3, r1
   10db8:	3304      	adds	r3, #4
   10dba:	681b      	ldr	r3, [r3, #0]
   10dbc:	6859      	ldr	r1, [r3, #4]
   10dbe:	f89d 200e 	ldrb.w	r2, [sp, #14]
   10dc2:	f89d 000e 	ldrb.w	r0, [sp, #14]
   10dc6:	4613      	mov	r3, r2
   10dc8:	005b      	lsls	r3, r3, #1
   10dca:	4413      	add	r3, r2
   10dcc:	00db      	lsls	r3, r3, #3
   10dce:	4419      	add	r1, r3
   10dd0:	4c1d      	ldr	r4, [pc, #116]	; (10e48 <Pwm_Init+0x148>)
   10dd2:	9a02      	ldr	r2, [sp, #8]
   10dd4:	4613      	mov	r3, r2
   10dd6:	005b      	lsls	r3, r3, #1
   10dd8:	4413      	add	r3, r2
   10dda:	005b      	lsls	r3, r3, #1
   10ddc:	4403      	add	r3, r0
   10dde:	3304      	adds	r3, #4
   10de0:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
                /* Continue to hw channel initialization */
                Pwm_Ipw_Init(&((*Pwm_aState[CoreId].PwmConfig->PwmChannelsConfig)[Index].IpwChannelCfg));
   10de4:	4918      	ldr	r1, [pc, #96]	; (10e48 <Pwm_Init+0x148>)
   10de6:	9a02      	ldr	r2, [sp, #8]
   10de8:	4613      	mov	r3, r2
   10dea:	005b      	lsls	r3, r3, #1
   10dec:	4413      	add	r3, r2
   10dee:	00db      	lsls	r3, r3, #3
   10df0:	440b      	add	r3, r1
   10df2:	3304      	adds	r3, #4
   10df4:	681b      	ldr	r3, [r3, #0]
   10df6:	6859      	ldr	r1, [r3, #4]
   10df8:	f89d 200e 	ldrb.w	r2, [sp, #14]
   10dfc:	4613      	mov	r3, r2
   10dfe:	005b      	lsls	r3, r3, #1
   10e00:	4413      	add	r3, r2
   10e02:	00db      	lsls	r3, r3, #3
   10e04:	3308      	adds	r3, #8
   10e06:	440b      	add	r3, r1
   10e08:	4618      	mov	r0, r3
   10e0a:	f000 fa0f 	bl	1122c <Pwm_Ipw_Init>
            for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
   10e0e:	f89d 300e 	ldrb.w	r3, [sp, #14]
   10e12:	3301      	adds	r3, #1
   10e14:	f88d 300e 	strb.w	r3, [sp, #14]
   10e18:	490b      	ldr	r1, [pc, #44]	; (10e48 <Pwm_Init+0x148>)
   10e1a:	9a02      	ldr	r2, [sp, #8]
   10e1c:	4613      	mov	r3, r2
   10e1e:	005b      	lsls	r3, r3, #1
   10e20:	4413      	add	r3, r2
   10e22:	00db      	lsls	r3, r3, #3
   10e24:	440b      	add	r3, r1
   10e26:	3304      	adds	r3, #4
   10e28:	681b      	ldr	r3, [r3, #0]
   10e2a:	781b      	ldrb	r3, [r3, #0]
   10e2c:	f89d 200e 	ldrb.w	r2, [sp, #14]
   10e30:	429a      	cmp	r2, r3
   10e32:	d3ba      	bcc.n	10daa <Pwm_Init+0xaa>
#endif

#if (PWM_VALIDATE_GLOBAL_CONFIG_CALL == STD_ON)
    }

    Pwm_EndValidateGlobalConfigCall(CoreId, CallIsValid, PWM_INIT_ID);
   10e34:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10e38:	2200      	movs	r2, #0
   10e3a:	4619      	mov	r1, r3
   10e3c:	9802      	ldr	r0, [sp, #8]
   10e3e:	f7ff fe1f 	bl	10a80 <Pwm_EndValidateGlobalConfigCall>
#endif
}
   10e42:	bf00      	nop
   10e44:	b004      	add	sp, #16
   10e46:	bd10      	pop	{r4, pc}
   10e48:	1fff8b3c 	.word	0x1fff8b3c

00010e4c <Pwm_DeInit>:
*
* @implements   Pwm_DeInit_Activity
*
*/
void Pwm_DeInit(void)
{
   10e4c:	b500      	push	{lr}
   10e4e:	b085      	sub	sp, #20
#endif
    uint32                      CoreId;
    uint8                       Index;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
   10e50:	2300      	movs	r3, #0
   10e52:	9302      	str	r3, [sp, #8]

#if (PWM_VALIDATE_GLOBAL_CONFIG_CALL == STD_ON)
    CallIsValid = Pwm_ValidateGlobalConfigCall(CoreId, PWM_DEINIT_ID);
   10e54:	2101      	movs	r1, #1
   10e56:	9802      	ldr	r0, [sp, #8]
   10e58:	f7ff fdda 	bl	10a10 <Pwm_ValidateGlobalConfigCall>
   10e5c:	4603      	mov	r3, r0
   10e5e:	f88d 3007 	strb.w	r3, [sp, #7]

    if ((Std_ReturnType)E_OK == CallIsValid)
   10e62:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10e66:	2b00      	cmp	r3, #0
   10e68:	f040 808e 	bne.w	10f88 <Pwm_DeInit+0x13c>
    {
#endif

        /* All validations passed. Here starts the actual functional code of the function */
        /* Deinitialize all channels */
        for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
   10e6c:	2300      	movs	r3, #0
   10e6e:	f88d 300f 	strb.w	r3, [sp, #15]
   10e72:	e02a      	b.n	10eca <Pwm_DeInit+0x7e>
        {
            Pwm_Ipw_DeInit(&((*Pwm_aState[CoreId].PwmChannelConfigs)[Index].IpwChannelCfg), (*Pwm_aState[CoreId].PwmChannelConfigs)[Index].ChannelIdleState);
   10e74:	494a      	ldr	r1, [pc, #296]	; (10fa0 <Pwm_DeInit+0x154>)
   10e76:	9a02      	ldr	r2, [sp, #8]
   10e78:	4613      	mov	r3, r2
   10e7a:	005b      	lsls	r3, r3, #1
   10e7c:	4413      	add	r3, r2
   10e7e:	00db      	lsls	r3, r3, #3
   10e80:	440b      	add	r3, r1
   10e82:	3310      	adds	r3, #16
   10e84:	6819      	ldr	r1, [r3, #0]
   10e86:	f89d 200f 	ldrb.w	r2, [sp, #15]
   10e8a:	4613      	mov	r3, r2
   10e8c:	005b      	lsls	r3, r3, #1
   10e8e:	4413      	add	r3, r2
   10e90:	00db      	lsls	r3, r3, #3
   10e92:	440b      	add	r3, r1
   10e94:	f103 0008 	add.w	r0, r3, #8
   10e98:	4941      	ldr	r1, [pc, #260]	; (10fa0 <Pwm_DeInit+0x154>)
   10e9a:	9a02      	ldr	r2, [sp, #8]
   10e9c:	4613      	mov	r3, r2
   10e9e:	005b      	lsls	r3, r3, #1
   10ea0:	4413      	add	r3, r2
   10ea2:	00db      	lsls	r3, r3, #3
   10ea4:	440b      	add	r3, r1
   10ea6:	3310      	adds	r3, #16
   10ea8:	6819      	ldr	r1, [r3, #0]
   10eaa:	f89d 200f 	ldrb.w	r2, [sp, #15]
   10eae:	4613      	mov	r3, r2
   10eb0:	005b      	lsls	r3, r3, #1
   10eb2:	4413      	add	r3, r2
   10eb4:	00db      	lsls	r3, r3, #3
   10eb6:	440b      	add	r3, r1
   10eb8:	695b      	ldr	r3, [r3, #20]
   10eba:	4619      	mov	r1, r3
   10ebc:	f000 fa2e 	bl	1131c <Pwm_Ipw_DeInit>
        for(Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumChannels; Index++)
   10ec0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10ec4:	3301      	adds	r3, #1
   10ec6:	f88d 300f 	strb.w	r3, [sp, #15]
   10eca:	4935      	ldr	r1, [pc, #212]	; (10fa0 <Pwm_DeInit+0x154>)
   10ecc:	9a02      	ldr	r2, [sp, #8]
   10ece:	4613      	mov	r3, r2
   10ed0:	005b      	lsls	r3, r3, #1
   10ed2:	4413      	add	r3, r2
   10ed4:	00db      	lsls	r3, r3, #3
   10ed6:	440b      	add	r3, r1
   10ed8:	3304      	adds	r3, #4
   10eda:	681b      	ldr	r3, [r3, #0]
   10edc:	781b      	ldrb	r3, [r3, #0]
   10ede:	f89d 200f 	ldrb.w	r2, [sp, #15]
   10ee2:	429a      	cmp	r2, r3
   10ee4:	d3c6      	bcc.n	10e74 <Pwm_DeInit+0x28>
        }

#if (PWM_HW_INSTANCE_USED == STD_ON)
        ConfigPtr =  Pwm_aState[CoreId].PwmConfig;
   10ee6:	492e      	ldr	r1, [pc, #184]	; (10fa0 <Pwm_DeInit+0x154>)
   10ee8:	9a02      	ldr	r2, [sp, #8]
   10eea:	4613      	mov	r3, r2
   10eec:	005b      	lsls	r3, r3, #1
   10eee:	4413      	add	r3, r2
   10ef0:	00db      	lsls	r3, r3, #3
   10ef2:	440b      	add	r3, r1
   10ef4:	3304      	adds	r3, #4
   10ef6:	681b      	ldr	r3, [r3, #0]
   10ef8:	9300      	str	r3, [sp, #0]
        /* IPW call to hw instance initialization when PWM controls the entire hw instance */
        for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
   10efa:	2300      	movs	r3, #0
   10efc:	f88d 300f 	strb.w	r3, [sp, #15]
   10f00:	e010      	b.n	10f24 <Pwm_DeInit+0xd8>
        {
            Pwm_Ipw_DeInitInstance(&((*ConfigPtr->PwmInstancesConfig)[Index]));
   10f02:	9b00      	ldr	r3, [sp, #0]
   10f04:	68d9      	ldr	r1, [r3, #12]
   10f06:	f89d 200f 	ldrb.w	r2, [sp, #15]
   10f0a:	4613      	mov	r3, r2
   10f0c:	005b      	lsls	r3, r3, #1
   10f0e:	4413      	add	r3, r2
   10f10:	009b      	lsls	r3, r3, #2
   10f12:	440b      	add	r3, r1
   10f14:	4618      	mov	r0, r3
   10f16:	f000 fa21 	bl	1135c <Pwm_Ipw_DeInitInstance>
        for (Index = 0; Index < Pwm_aState[CoreId].PwmConfig->NumInstances; Index++)
   10f1a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10f1e:	3301      	adds	r3, #1
   10f20:	f88d 300f 	strb.w	r3, [sp, #15]
   10f24:	491e      	ldr	r1, [pc, #120]	; (10fa0 <Pwm_DeInit+0x154>)
   10f26:	9a02      	ldr	r2, [sp, #8]
   10f28:	4613      	mov	r3, r2
   10f2a:	005b      	lsls	r3, r3, #1
   10f2c:	4413      	add	r3, r2
   10f2e:	00db      	lsls	r3, r3, #3
   10f30:	440b      	add	r3, r1
   10f32:	3304      	adds	r3, #4
   10f34:	681b      	ldr	r3, [r3, #0]
   10f36:	7a1b      	ldrb	r3, [r3, #8]
   10f38:	f89d 200f 	ldrb.w	r2, [sp, #15]
   10f3c:	429a      	cmp	r2, r3
   10f3e:	d3e0      	bcc.n	10f02 <Pwm_DeInit+0xb6>
        }
#endif
        /* Set global configuration pointer back to NULL_PTR */
        Pwm_aState[CoreId].PwmConfig = NULL_PTR;
   10f40:	4917      	ldr	r1, [pc, #92]	; (10fa0 <Pwm_DeInit+0x154>)
   10f42:	9a02      	ldr	r2, [sp, #8]
   10f44:	4613      	mov	r3, r2
   10f46:	005b      	lsls	r3, r3, #1
   10f48:	4413      	add	r3, r2
   10f4a:	00db      	lsls	r3, r3, #3
   10f4c:	440b      	add	r3, r1
   10f4e:	3304      	adds	r3, #4
   10f50:	2200      	movs	r2, #0
   10f52:	601a      	str	r2, [r3, #0]

        /* Set all channels config to NULL_PTR */
        for(Index = 0; Index < PWM_CONFIG_LOGIC_CHANNELS; Index++)
   10f54:	2300      	movs	r3, #0
   10f56:	f88d 300f 	strb.w	r3, [sp, #15]
   10f5a:	e011      	b.n	10f80 <Pwm_DeInit+0x134>
        {
            Pwm_aState[CoreId].PwmChannelConfigs[Index] = NULL_PTR;
   10f5c:	f89d 100f 	ldrb.w	r1, [sp, #15]
   10f60:	480f      	ldr	r0, [pc, #60]	; (10fa0 <Pwm_DeInit+0x154>)
   10f62:	9a02      	ldr	r2, [sp, #8]
   10f64:	4613      	mov	r3, r2
   10f66:	005b      	lsls	r3, r3, #1
   10f68:	4413      	add	r3, r2
   10f6a:	005b      	lsls	r3, r3, #1
   10f6c:	440b      	add	r3, r1
   10f6e:	3304      	adds	r3, #4
   10f70:	2200      	movs	r2, #0
   10f72:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        for(Index = 0; Index < PWM_CONFIG_LOGIC_CHANNELS; Index++)
   10f76:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10f7a:	3301      	adds	r3, #1
   10f7c:	f88d 300f 	strb.w	r3, [sp, #15]
   10f80:	f89d 300f 	ldrb.w	r3, [sp, #15]
   10f84:	2b00      	cmp	r3, #0
   10f86:	d0e9      	beq.n	10f5c <Pwm_DeInit+0x110>
#endif

#if (PWM_VALIDATE_GLOBAL_CONFIG_CALL == STD_ON)
    }

    Pwm_EndValidateGlobalConfigCall(CoreId, CallIsValid, PWM_DEINIT_ID);
   10f88:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10f8c:	2201      	movs	r2, #1
   10f8e:	4619      	mov	r1, r3
   10f90:	9802      	ldr	r0, [sp, #8]
   10f92:	f7ff fd75 	bl	10a80 <Pwm_EndValidateGlobalConfigCall>
#endif

}
   10f96:	bf00      	nop
   10f98:	b005      	add	sp, #20
   10f9a:	f85d fb04 	ldr.w	pc, [sp], #4
   10f9e:	bf00      	nop
   10fa0:	1fff8b3c 	.word	0x1fff8b3c

00010fa4 <Pwm_SetDutyCycle>:
* @implements   Pwm_SetDutyCycle_Activity
*
*/
void Pwm_SetDutyCycle(Pwm_ChannelType   ChannelNumber,
                      uint16            DutyCycle)
{
   10fa4:	b500      	push	{lr}
   10fa6:	b087      	sub	sp, #28
   10fa8:	4603      	mov	r3, r0
   10faa:	460a      	mov	r2, r1
   10fac:	f88d 3007 	strb.w	r3, [sp, #7]
   10fb0:	4613      	mov	r3, r2
   10fb2:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint32          CoreId;
    Pwm_ChannelType PartitionChannelIdx;
    Std_ReturnType  RetVal = (Std_ReturnType)E_OK;
   10fb6:	2300      	movs	r3, #0
   10fb8:	f88d 3017 	strb.w	r3, [sp, #23]

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
   10fbc:	2300      	movs	r3, #0
   10fbe:	9304      	str	r3, [sp, #16]

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    if ((Std_ReturnType)E_OK == Pwm_ValidateChannelConfigCall(CoreId, ChannelNumber, PWM_SETDUTYCYCLE_ID))
   10fc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10fc4:	2202      	movs	r2, #2
   10fc6:	4619      	mov	r1, r3
   10fc8:	9804      	ldr	r0, [sp, #16]
   10fca:	f7ff fd81 	bl	10ad0 <Pwm_ValidateChannelConfigCall>
   10fce:	4603      	mov	r3, r0
   10fd0:	2b00      	cmp	r3, #0
   10fd2:	d136      	bne.n	11042 <Pwm_SetDutyCycle+0x9e>
    {
#endif
        PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
   10fd4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   10fd8:	4619      	mov	r1, r3
   10fda:	9804      	ldr	r0, [sp, #16]
   10fdc:	f7ff fd0e 	bl	109fc <Pwm_GetPartitionChannelIdx>
   10fe0:	4603      	mov	r3, r0
   10fe2:	f88d 300f 	strb.w	r3, [sp, #15]

#if (PWM_PARAM_CHECK == STD_ON)
        if ((Std_ReturnType)E_OK == Pwm_ValidateParamDuty(DutyCycle, PWM_SETDUTYCYCLE_ID))
   10fe6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   10fea:	2102      	movs	r1, #2
   10fec:	4618      	mov	r0, r3
   10fee:	f7ff fde9 	bl	10bc4 <Pwm_ValidateParamDuty>
   10ff2:	4603      	mov	r3, r0
   10ff4:	2b00      	cmp	r3, #0
   10ff6:	d124      	bne.n	11042 <Pwm_SetDutyCycle+0x9e>
        {
#endif
            /* All validations passed. Here starts the actual functional code of the function */
            RetVal = Pwm_Ipw_SetDutyCycle(DutyCycle, &((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].IpwChannelCfg));
   10ff8:	4916      	ldr	r1, [pc, #88]	; (11054 <Pwm_SetDutyCycle+0xb0>)
   10ffa:	9a04      	ldr	r2, [sp, #16]
   10ffc:	4613      	mov	r3, r2
   10ffe:	005b      	lsls	r3, r3, #1
   11000:	4413      	add	r3, r2
   11002:	00db      	lsls	r3, r3, #3
   11004:	440b      	add	r3, r1
   11006:	3310      	adds	r3, #16
   11008:	6819      	ldr	r1, [r3, #0]
   1100a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1100e:	4613      	mov	r3, r2
   11010:	005b      	lsls	r3, r3, #1
   11012:	4413      	add	r3, r2
   11014:	00db      	lsls	r3, r3, #3
   11016:	440b      	add	r3, r1
   11018:	f103 0208 	add.w	r2, r3, #8
   1101c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   11020:	4611      	mov	r1, r2
   11022:	4618      	mov	r0, r3
   11024:	f000 f9b6 	bl	11394 <Pwm_Ipw_SetDutyCycle>
   11028:	4603      	mov	r3, r0
   1102a:	f88d 3017 	strb.w	r3, [sp, #23]

            /* Avoid compiler warning */
            (void)RetVal;

#if (PWM_PARAM_CHECK == STD_ON)
            if ((Std_ReturnType)E_OK != RetVal)
   1102e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11032:	2b00      	cmp	r3, #0
   11034:	d005      	beq.n	11042 <Pwm_SetDutyCycle+0x9e>
            {
                (void)Det_ReportError
   11036:	2334      	movs	r3, #52	; 0x34
   11038:	2202      	movs	r2, #2
   1103a:	2100      	movs	r1, #0
   1103c:	2079      	movs	r0, #121	; 0x79
   1103e:	f007 fe45 	bl	18ccc <Det_ReportError>
#endif

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    }

    Pwm_EndValidateChannelConfigCall(ChannelNumber);
   11042:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11046:	4618      	mov	r0, r3
   11048:	f7ff fd9c 	bl	10b84 <Pwm_EndValidateChannelConfigCall>
#endif

}
   1104c:	bf00      	nop
   1104e:	b007      	add	sp, #28
   11050:	f85d fb04 	ldr.w	pc, [sp], #4
   11054:	1fff8b3c 	.word	0x1fff8b3c

00011058 <Pwm_SetPeriodAndDuty>:
*
*/
void Pwm_SetPeriodAndDuty(Pwm_ChannelType   ChannelNumber,
                          Pwm_PeriodType    Period,
                          uint16            DutyCycle)
{
   11058:	b500      	push	{lr}
   1105a:	b087      	sub	sp, #28
   1105c:	4603      	mov	r3, r0
   1105e:	f88d 300f 	strb.w	r3, [sp, #15]
   11062:	460b      	mov	r3, r1
   11064:	f8ad 300c 	strh.w	r3, [sp, #12]
   11068:	4613      	mov	r3, r2
   1106a:	f8ad 300a 	strh.w	r3, [sp, #10]
    uint32          CoreId;
    Pwm_ChannelType PartitionChannelIdx;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
   1106e:	2300      	movs	r3, #0
   11070:	9305      	str	r3, [sp, #20]

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    if ((Std_ReturnType)E_OK == Pwm_ValidateChannelConfigCall(CoreId, ChannelNumber, PWM_SETPERIODANDDUTY_ID))
   11072:	f89d 300f 	ldrb.w	r3, [sp, #15]
   11076:	2203      	movs	r2, #3
   11078:	4619      	mov	r1, r3
   1107a:	9805      	ldr	r0, [sp, #20]
   1107c:	f7ff fd28 	bl	10ad0 <Pwm_ValidateChannelConfigCall>
   11080:	4603      	mov	r3, r0
   11082:	2b00      	cmp	r3, #0
   11084:	d147      	bne.n	11116 <Pwm_SetPeriodAndDuty+0xbe>
    {
#endif
        PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
   11086:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1108a:	4619      	mov	r1, r3
   1108c:	9805      	ldr	r0, [sp, #20]
   1108e:	f7ff fcb5 	bl	109fc <Pwm_GetPartitionChannelIdx>
   11092:	4603      	mov	r3, r0
   11094:	f88d 3013 	strb.w	r3, [sp, #19]

#if (PWM_PARAM_CHECK == STD_ON)
        if ((Std_ReturnType)E_OK == Pwm_ValidateParamsPeriodClass(CoreId, PartitionChannelIdx, (*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].PwmChannelClass, Period, PWM_SETPERIODANDDUTY_ID))
   11098:	4923      	ldr	r1, [pc, #140]	; (11128 <Pwm_SetPeriodAndDuty+0xd0>)
   1109a:	9a05      	ldr	r2, [sp, #20]
   1109c:	4613      	mov	r3, r2
   1109e:	005b      	lsls	r3, r3, #1
   110a0:	4413      	add	r3, r2
   110a2:	00db      	lsls	r3, r3, #3
   110a4:	440b      	add	r3, r1
   110a6:	3310      	adds	r3, #16
   110a8:	6819      	ldr	r1, [r3, #0]
   110aa:	f89d 2013 	ldrb.w	r2, [sp, #19]
   110ae:	4613      	mov	r3, r2
   110b0:	005b      	lsls	r3, r3, #1
   110b2:	4413      	add	r3, r2
   110b4:	00db      	lsls	r3, r3, #3
   110b6:	440b      	add	r3, r1
   110b8:	685a      	ldr	r2, [r3, #4]
   110ba:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   110be:	f89d 1013 	ldrb.w	r1, [sp, #19]
   110c2:	2003      	movs	r0, #3
   110c4:	9000      	str	r0, [sp, #0]
   110c6:	9805      	ldr	r0, [sp, #20]
   110c8:	f7ff fd9d 	bl	10c06 <Pwm_ValidateParamsPeriodClass>
   110cc:	4603      	mov	r3, r0
   110ce:	2b00      	cmp	r3, #0
   110d0:	d121      	bne.n	11116 <Pwm_SetPeriodAndDuty+0xbe>
        {
            if ((Std_ReturnType)E_OK == Pwm_ValidateParamDuty(DutyCycle, PWM_SETPERIODANDDUTY_ID))
   110d2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   110d6:	2103      	movs	r1, #3
   110d8:	4618      	mov	r0, r3
   110da:	f7ff fd73 	bl	10bc4 <Pwm_ValidateParamDuty>
   110de:	4603      	mov	r3, r0
   110e0:	2b00      	cmp	r3, #0
   110e2:	d118      	bne.n	11116 <Pwm_SetPeriodAndDuty+0xbe>
            {
#endif

                /* All validations passed. Here starts the actual functional code of the function */
                (void)Pwm_Ipw_SetPeriodAndDuty(Period, DutyCycle, &((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].IpwChannelCfg));
   110e4:	4910      	ldr	r1, [pc, #64]	; (11128 <Pwm_SetPeriodAndDuty+0xd0>)
   110e6:	9a05      	ldr	r2, [sp, #20]
   110e8:	4613      	mov	r3, r2
   110ea:	005b      	lsls	r3, r3, #1
   110ec:	4413      	add	r3, r2
   110ee:	00db      	lsls	r3, r3, #3
   110f0:	440b      	add	r3, r1
   110f2:	3310      	adds	r3, #16
   110f4:	6819      	ldr	r1, [r3, #0]
   110f6:	f89d 2013 	ldrb.w	r2, [sp, #19]
   110fa:	4613      	mov	r3, r2
   110fc:	005b      	lsls	r3, r3, #1
   110fe:	4413      	add	r3, r2
   11100:	00db      	lsls	r3, r3, #3
   11102:	440b      	add	r3, r1
   11104:	f103 0208 	add.w	r2, r3, #8
   11108:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   1110c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   11110:	4618      	mov	r0, r3
   11112:	f000 f98b 	bl	1142c <Pwm_Ipw_SetPeriodAndDuty>
#endif

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    }

    Pwm_EndValidateChannelConfigCall(ChannelNumber);
   11116:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1111a:	4618      	mov	r0, r3
   1111c:	f7ff fd32 	bl	10b84 <Pwm_EndValidateChannelConfigCall>
#endif

}
   11120:	bf00      	nop
   11122:	b007      	add	sp, #28
   11124:	f85d fb04 	ldr.w	pc, [sp], #4
   11128:	1fff8b3c 	.word	0x1fff8b3c

0001112c <Pwm_SetOutputToIdle>:
*
* @implements   Pwm_SetOutputToIdle_Activity
*
*/
void Pwm_SetOutputToIdle(Pwm_ChannelType ChannelNumber)
{
   1112c:	b500      	push	{lr}
   1112e:	b085      	sub	sp, #20
   11130:	4603      	mov	r3, r0
   11132:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32          CoreId;
    Pwm_ChannelType PartitionChannelIdx;

    /* Get core ID of current processor */
    CoreId = Pwm_GetCoreID();
   11136:	2300      	movs	r3, #0
   11138:	9303      	str	r3, [sp, #12]

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    if ((Std_ReturnType)E_OK == Pwm_ValidateChannelConfigCall(CoreId, ChannelNumber, PWM_SETOUTPUTTOIDLE_ID))
   1113a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1113e:	2204      	movs	r2, #4
   11140:	4619      	mov	r1, r3
   11142:	9803      	ldr	r0, [sp, #12]
   11144:	f7ff fcc4 	bl	10ad0 <Pwm_ValidateChannelConfigCall>
   11148:	4603      	mov	r3, r0
   1114a:	2b00      	cmp	r3, #0
   1114c:	d143      	bne.n	111d6 <Pwm_SetOutputToIdle+0xaa>
    {
#endif

        PartitionChannelIdx = Pwm_GetPartitionChannelIdx(CoreId, ChannelNumber);
   1114e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11152:	4619      	mov	r1, r3
   11154:	9803      	ldr	r0, [sp, #12]
   11156:	f7ff fc51 	bl	109fc <Pwm_GetPartitionChannelIdx>
   1115a:	4603      	mov	r3, r0
   1115c:	f88d 300b 	strb.w	r3, [sp, #11]

#if (defined(PWM_SETOUTPUTTOIDLE_PLAUSABILITY) && (PWM_SETOUTPUTTOIDLE_PLAUSABILITY == STD_ON) && (PWM_PARAM_CHECK == STD_ON))
        if((Std_ReturnType)E_OK == Pwm_ValidateSetOutPutToIdle(CoreId, PartitionChannelIdx))
   11160:	f89d 300b 	ldrb.w	r3, [sp, #11]
   11164:	4619      	mov	r1, r3
   11166:	9803      	ldr	r0, [sp, #12]
   11168:	f7ff fd98 	bl	10c9c <Pwm_ValidateSetOutPutToIdle>
   1116c:	4603      	mov	r3, r0
   1116e:	2b00      	cmp	r3, #0
   11170:	d131      	bne.n	111d6 <Pwm_SetOutputToIdle+0xaa>
        {
#endif /* PWM_SETOUTPUTTOIDLE_PLAUSABILITY && PWM_PARAM_CHECK */

            /* All validations passed. Here starts the actual functional code of the function */
            Pwm_Ipw_SetOutputToIdle((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].ChannelIdleState, &((*Pwm_aState[CoreId].PwmChannelConfigs)[PartitionChannelIdx].IpwChannelCfg));
   11172:	491d      	ldr	r1, [pc, #116]	; (111e8 <Pwm_SetOutputToIdle+0xbc>)
   11174:	9a03      	ldr	r2, [sp, #12]
   11176:	4613      	mov	r3, r2
   11178:	005b      	lsls	r3, r3, #1
   1117a:	4413      	add	r3, r2
   1117c:	00db      	lsls	r3, r3, #3
   1117e:	440b      	add	r3, r1
   11180:	3310      	adds	r3, #16
   11182:	6819      	ldr	r1, [r3, #0]
   11184:	f89d 200b 	ldrb.w	r2, [sp, #11]
   11188:	4613      	mov	r3, r2
   1118a:	005b      	lsls	r3, r3, #1
   1118c:	4413      	add	r3, r2
   1118e:	00db      	lsls	r3, r3, #3
   11190:	440b      	add	r3, r1
   11192:	6958      	ldr	r0, [r3, #20]
   11194:	4914      	ldr	r1, [pc, #80]	; (111e8 <Pwm_SetOutputToIdle+0xbc>)
   11196:	9a03      	ldr	r2, [sp, #12]
   11198:	4613      	mov	r3, r2
   1119a:	005b      	lsls	r3, r3, #1
   1119c:	4413      	add	r3, r2
   1119e:	00db      	lsls	r3, r3, #3
   111a0:	440b      	add	r3, r1
   111a2:	3310      	adds	r3, #16
   111a4:	6819      	ldr	r1, [r3, #0]
   111a6:	f89d 200b 	ldrb.w	r2, [sp, #11]
   111aa:	4613      	mov	r3, r2
   111ac:	005b      	lsls	r3, r3, #1
   111ae:	4413      	add	r3, r2
   111b0:	00db      	lsls	r3, r3, #3
   111b2:	440b      	add	r3, r1
   111b4:	3308      	adds	r3, #8
   111b6:	4619      	mov	r1, r3
   111b8:	f000 f97e 	bl	114b8 <Pwm_Ipw_SetOutputToIdle>

            /* Mark the channel in idle output mode */
            Pwm_aState[CoreId].PwmChannelIdleState[PartitionChannelIdx] = TRUE;
   111bc:	f89d 100b 	ldrb.w	r1, [sp, #11]
   111c0:	4809      	ldr	r0, [pc, #36]	; (111e8 <Pwm_SetOutputToIdle+0xbc>)
   111c2:	9a03      	ldr	r2, [sp, #12]
   111c4:	4613      	mov	r3, r2
   111c6:	005b      	lsls	r3, r3, #1
   111c8:	4413      	add	r3, r2
   111ca:	00db      	lsls	r3, r3, #3
   111cc:	4403      	add	r3, r0
   111ce:	440b      	add	r3, r1
   111d0:	3314      	adds	r3, #20
   111d2:	2201      	movs	r2, #1
   111d4:	701a      	strb	r2, [r3, #0]
#endif /* PWM_SETOUTPUTTOIDLE_PLAUSABILITY && PWM_PARAM_CHECK */

#if (PWM_VALIDATE_CHANNEL_CONFIG_CALL == STD_ON)
    }

    Pwm_EndValidateChannelConfigCall(ChannelNumber);
   111d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   111da:	4618      	mov	r0, r3
   111dc:	f7ff fcd2 	bl	10b84 <Pwm_EndValidateChannelConfigCall>
#endif

}
   111e0:	bf00      	nop
   111e2:	b005      	add	sp, #20
   111e4:	f85d fb04 	ldr.w	pc, [sp], #4
   111e8:	1fff8b3c 	.word	0x1fff8b3c

000111ec <Pwm_GetVersionInfo>:
*
* @implements   Pwm_GetVersionInfo_Activity
*
*/
void Pwm_GetVersionInfo(Std_VersionInfoType * versioninfo)
{
   111ec:	b500      	push	{lr}
   111ee:	b083      	sub	sp, #12
   111f0:	9001      	str	r0, [sp, #4]
#if (PWM_DEV_ERROR_DETECT == STD_ON)
    if (NULL_PTR != versioninfo)
   111f2:	9b01      	ldr	r3, [sp, #4]
   111f4:	2b00      	cmp	r3, #0
   111f6:	d00f      	beq.n	11218 <Pwm_GetVersionInfo+0x2c>
    {
#endif

        (versioninfo)->vendorID         = (uint16)PWM_VENDOR_ID;
   111f8:	9b01      	ldr	r3, [sp, #4]
   111fa:	222b      	movs	r2, #43	; 0x2b
   111fc:	801a      	strh	r2, [r3, #0]
        (versioninfo)->moduleID         = (uint16)PWM_MODULE_ID;
   111fe:	9b01      	ldr	r3, [sp, #4]
   11200:	2279      	movs	r2, #121	; 0x79
   11202:	805a      	strh	r2, [r3, #2]

        (versioninfo)->sw_major_version = (uint8)PWM_SW_MAJOR_VERSION;
   11204:	9b01      	ldr	r3, [sp, #4]
   11206:	2202      	movs	r2, #2
   11208:	711a      	strb	r2, [r3, #4]
        (versioninfo)->sw_minor_version = (uint8)PWM_SW_MINOR_VERSION;
   1120a:	9b01      	ldr	r3, [sp, #4]
   1120c:	2200      	movs	r2, #0
   1120e:	715a      	strb	r2, [r3, #5]
        (versioninfo)->sw_patch_version = (uint8)PWM_SW_PATCH_VERSION;
   11210:	9b01      	ldr	r3, [sp, #4]
   11212:	2200      	movs	r2, #0
   11214:	719a      	strb	r2, [r3, #6]
            (uint8)  PWM_E_PARAM_POINTER
        );
    }
#endif

}
   11216:	e005      	b.n	11224 <Pwm_GetVersionInfo+0x38>
        (void)Det_ReportError
   11218:	2315      	movs	r3, #21
   1121a:	2208      	movs	r2, #8
   1121c:	2100      	movs	r1, #0
   1121e:	2079      	movs	r0, #121	; 0x79
   11220:	f007 fd54 	bl	18ccc <Det_ReportError>
}
   11224:	bf00      	nop
   11226:	b003      	add	sp, #12
   11228:	f85d fb04 	ldr.w	pc, [sp], #4

0001122c <Pwm_Ipw_Init>:
*
* @return       void
*
*/
void Pwm_Ipw_Init(const Pwm_IpwChannelConfigType * const IpConfig)
{
   1122c:	b410      	push	{r4}
   1122e:	b083      	sub	sp, #12
   11230:	9001      	str	r0, [sp, #4]

    switch(IpConfig->ChannelType)
   11232:	9b01      	ldr	r3, [sp, #4]
   11234:	681b      	ldr	r3, [r3, #0]
   11236:	2b00      	cmp	r3, #0
   11238:	d010      	beq.n	1125c <Pwm_Ipw_Init+0x30>
   1123a:	2b01      	cmp	r3, #1
   1123c:	d110      	bne.n	11260 <Pwm_Ipw_Init+0x34>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            /* Duty cycle of Ftm Ip */
            Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = IpConfig->ChannelDutyCycle;
   1123e:	9b01      	ldr	r3, [sp, #4]
   11240:	7a1b      	ldrb	r3, [r3, #8]
   11242:	461c      	mov	r4, r3
   11244:	9b01      	ldr	r3, [sp, #4]
   11246:	685b      	ldr	r3, [r3, #4]
   11248:	781b      	ldrb	r3, [r3, #0]
   1124a:	4618      	mov	r0, r3
   1124c:	9b01      	ldr	r3, [sp, #4]
   1124e:	8959      	ldrh	r1, [r3, #10]
   11250:	4a06      	ldr	r2, [pc, #24]	; (1126c <Pwm_Ipw_Init+0x40>)
   11252:	00e3      	lsls	r3, r4, #3
   11254:	4403      	add	r3, r0
   11256:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            break;
   1125a:	e002      	b.n	11262 <Pwm_Ipw_Init+0x36>
            }
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
   1125c:	bf00      	nop
   1125e:	e000      	b.n	11262 <Pwm_Ipw_Init+0x36>
        default:
            /* Nothing to do. */
            break;
   11260:	bf00      	nop
    }
}
   11262:	bf00      	nop
   11264:	b003      	add	sp, #12
   11266:	f85d 4b04 	ldr.w	r4, [sp], #4
   1126a:	4770      	bx	lr
   1126c:	1fff91d4 	.word	0x1fff91d4

00011270 <Pwm_Ipw_InitInstance>:
*
* @return       void
*
*/
void Pwm_Ipw_InitInstance(const Pwm_IpwInstanceConfigType * const IpConfig)
{
   11270:	b500      	push	{lr}
   11272:	b085      	sub	sp, #20
   11274:	9001      	str	r0, [sp, #4]
#if (PWM_FTM_USED == STD_ON)
    uint8 Index = 0U;
   11276:	2300      	movs	r3, #0
   11278:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 ChannelId = 0U;
   1127c:	2300      	movs	r3, #0
   1127e:	f88d 300e 	strb.w	r3, [sp, #14]
#endif
    switch(IpConfig->InstanceType)
   11282:	9b01      	ldr	r3, [sp, #4]
   11284:	685b      	ldr	r3, [r3, #4]
   11286:	2b00      	cmp	r3, #0
   11288:	d03c      	beq.n	11304 <Pwm_Ipw_InitInstance+0x94>
   1128a:	2b01      	cmp	r3, #1
   1128c:	d13c      	bne.n	11308 <Pwm_Ipw_InitInstance+0x98>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_INSTANCE_FTM:
            if (NULL_PTR != IpConfig->FtmInsConfig)
   1128e:	9b01      	ldr	r3, [sp, #4]
   11290:	689b      	ldr	r3, [r3, #8]
   11292:	2b00      	cmp	r3, #0
   11294:	d03a      	beq.n	1130c <Pwm_Ipw_InitInstance+0x9c>
            {
                /* Call Ftm IP initialize instances */
                Ftm_Pwm_Ip_Init(IpConfig->InstanceId, (const Ftm_Pwm_Ip_UserCfgType *)IpConfig->FtmInsConfig);
   11296:	9b01      	ldr	r3, [sp, #4]
   11298:	781a      	ldrb	r2, [r3, #0]
   1129a:	9b01      	ldr	r3, [sp, #4]
   1129c:	689b      	ldr	r3, [r3, #8]
   1129e:	4619      	mov	r1, r3
   112a0:	4610      	mov	r0, r2
   112a2:	f7fe fa0f 	bl	f6c4 <Ftm_Pwm_Ip_Init>

                /* Configure all channels in the user cfg */
                for (Index = 0; Index < IpConfig->FtmInsConfig->NoOfConfiguredCh; Index++)
   112a6:	2300      	movs	r3, #0
   112a8:	f88d 300f 	strb.w	r3, [sp, #15]
   112ac:	e022      	b.n	112f4 <Pwm_Ipw_InitInstance+0x84>
                {
                    ChannelId = IpConfig->FtmInsConfig->ConfiguredChArray[Index]->ChannelId;
   112ae:	9b01      	ldr	r3, [sp, #4]
   112b0:	689b      	ldr	r3, [r3, #8]
   112b2:	685a      	ldr	r2, [r3, #4]
   112b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   112b8:	009b      	lsls	r3, r3, #2
   112ba:	4413      	add	r3, r2
   112bc:	681b      	ldr	r3, [r3, #0]
   112be:	781b      	ldrb	r3, [r3, #0]
   112c0:	f88d 300e 	strb.w	r3, [sp, #14]
                    /* Update the polarity of each channel */
                    Ftm_Pwm_Ip_aPolarity[IpConfig->InstanceId][ChannelId] = IpConfig->FtmInsConfig->ConfiguredChArray[Index]->Polarity;
   112c4:	9b01      	ldr	r3, [sp, #4]
   112c6:	689b      	ldr	r3, [r3, #8]
   112c8:	685a      	ldr	r2, [r3, #4]
   112ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
   112ce:	009b      	lsls	r3, r3, #2
   112d0:	4413      	add	r3, r2
   112d2:	681a      	ldr	r2, [r3, #0]
   112d4:	9b01      	ldr	r3, [sp, #4]
   112d6:	781b      	ldrb	r3, [r3, #0]
   112d8:	4619      	mov	r1, r3
   112da:	f89d 300e 	ldrb.w	r3, [sp, #14]
   112de:	6a12      	ldr	r2, [r2, #32]
   112e0:	480d      	ldr	r0, [pc, #52]	; (11318 <Pwm_Ipw_InitInstance+0xa8>)
   112e2:	00c9      	lsls	r1, r1, #3
   112e4:	440b      	add	r3, r1
   112e6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                for (Index = 0; Index < IpConfig->FtmInsConfig->NoOfConfiguredCh; Index++)
   112ea:	f89d 300f 	ldrb.w	r3, [sp, #15]
   112ee:	3301      	adds	r3, #1
   112f0:	f88d 300f 	strb.w	r3, [sp, #15]
   112f4:	9b01      	ldr	r3, [sp, #4]
   112f6:	689b      	ldr	r3, [r3, #8]
   112f8:	7a1b      	ldrb	r3, [r3, #8]
   112fa:	f89d 200f 	ldrb.w	r2, [sp, #15]
   112fe:	429a      	cmp	r2, r3
   11300:	d3d5      	bcc.n	112ae <Pwm_Ipw_InitInstance+0x3e>
                }
            }
            break;
   11302:	e003      	b.n	1130c <Pwm_Ipw_InitInstance+0x9c>
#endif
        case PWM_INSTANCE_NONE:
            /* Nothing to do. No hw instance assigned to the logical instance */
            break;
   11304:	bf00      	nop
   11306:	e002      	b.n	1130e <Pwm_Ipw_InitInstance+0x9e>
        default:
            /* Nothing to do. */
            break;
   11308:	bf00      	nop
   1130a:	e000      	b.n	1130e <Pwm_Ipw_InitInstance+0x9e>
            break;
   1130c:	bf00      	nop
    }
}
   1130e:	bf00      	nop
   11310:	b005      	add	sp, #20
   11312:	f85d fb04 	ldr.w	pc, [sp], #4
   11316:	bf00      	nop
   11318:	1fff9154 	.word	0x1fff9154

0001131c <Pwm_Ipw_DeInit>:
*
* @return       void
*
*/
void Pwm_Ipw_DeInit(const Pwm_IpwChannelConfigType * const IpConfig, Pwm_OutputStateType ChannelIdleState)
{
   1131c:	b082      	sub	sp, #8
   1131e:	9001      	str	r0, [sp, #4]
   11320:	9100      	str	r1, [sp, #0]

    switch(IpConfig->ChannelType)
   11322:	9b01      	ldr	r3, [sp, #4]
   11324:	681b      	ldr	r3, [r3, #0]
   11326:	2b00      	cmp	r3, #0
   11328:	d00f      	beq.n	1134a <Pwm_Ipw_DeInit+0x2e>
   1132a:	2b01      	cmp	r3, #1
   1132c:	d10f      	bne.n	1134e <Pwm_Ipw_DeInit+0x32>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            /* Duty cycle of Ftm Ip */
            Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = 0U;
   1132e:	9b01      	ldr	r3, [sp, #4]
   11330:	7a1b      	ldrb	r3, [r3, #8]
   11332:	4618      	mov	r0, r3
   11334:	9b01      	ldr	r3, [sp, #4]
   11336:	685b      	ldr	r3, [r3, #4]
   11338:	781b      	ldrb	r3, [r3, #0]
   1133a:	4619      	mov	r1, r3
   1133c:	4a06      	ldr	r2, [pc, #24]	; (11358 <Pwm_Ipw_DeInit+0x3c>)
   1133e:	00c3      	lsls	r3, r0, #3
   11340:	440b      	add	r3, r1
   11342:	2100      	movs	r1, #0
   11344:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            break;
   11348:	e002      	b.n	11350 <Pwm_Ipw_DeInit+0x34>
            }
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
   1134a:	bf00      	nop
   1134c:	e000      	b.n	11350 <Pwm_Ipw_DeInit+0x34>
        default:
            /* Nothing to do. */
            break;
   1134e:	bf00      	nop
    }
    (void) ChannelIdleState;

}
   11350:	bf00      	nop
   11352:	b002      	add	sp, #8
   11354:	4770      	bx	lr
   11356:	bf00      	nop
   11358:	1fff91d4 	.word	0x1fff91d4

0001135c <Pwm_Ipw_DeInitInstance>:
*
* @return       void
*
*/
void Pwm_Ipw_DeInitInstance(const Pwm_IpwInstanceConfigType * const IpConfig)
{
   1135c:	b500      	push	{lr}
   1135e:	b083      	sub	sp, #12
   11360:	9001      	str	r0, [sp, #4]

    switch(IpConfig->InstanceType)
   11362:	9b01      	ldr	r3, [sp, #4]
   11364:	685b      	ldr	r3, [r3, #4]
   11366:	2b00      	cmp	r3, #0
   11368:	d00b      	beq.n	11382 <Pwm_Ipw_DeInitInstance+0x26>
   1136a:	2b01      	cmp	r3, #1
   1136c:	d10b      	bne.n	11386 <Pwm_Ipw_DeInitInstance+0x2a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_INSTANCE_FTM:
            if (NULL_PTR != IpConfig->FtmInsConfig)
   1136e:	9b01      	ldr	r3, [sp, #4]
   11370:	689b      	ldr	r3, [r3, #8]
   11372:	2b00      	cmp	r3, #0
   11374:	d009      	beq.n	1138a <Pwm_Ipw_DeInitInstance+0x2e>
            {
                /* Call Ftm IP initialize instances */
                Ftm_Pwm_Ip_DeInit(IpConfig->InstanceId);
   11376:	9b01      	ldr	r3, [sp, #4]
   11378:	781b      	ldrb	r3, [r3, #0]
   1137a:	4618      	mov	r0, r3
   1137c:	f7fe fa14 	bl	f7a8 <Ftm_Pwm_Ip_DeInit>
            }
            break;
   11380:	e003      	b.n	1138a <Pwm_Ipw_DeInitInstance+0x2e>
#endif
        case PWM_INSTANCE_NONE:
            /* Nothing to do. No hw instance assigned to the logical instance */
            break;
   11382:	bf00      	nop
   11384:	e002      	b.n	1138c <Pwm_Ipw_DeInitInstance+0x30>
        default:
            /* Nothing to do. */
            break;
   11386:	bf00      	nop
   11388:	e000      	b.n	1138c <Pwm_Ipw_DeInitInstance+0x30>
            break;
   1138a:	bf00      	nop
    }
}
   1138c:	bf00      	nop
   1138e:	b003      	add	sp, #12
   11390:	f85d fb04 	ldr.w	pc, [sp], #4

00011394 <Pwm_Ipw_SetDutyCycle>:
*               E_OK            The duty cycle is set to the new value
*
*/
Std_ReturnType Pwm_Ipw_SetDutyCycle(uint16                           DutyCycle,
                                    const Pwm_IpwChannelConfigType * const IpConfig)
{
   11394:	b500      	push	{lr}
   11396:	b085      	sub	sp, #20
   11398:	4603      	mov	r3, r0
   1139a:	9100      	str	r1, [sp, #0]
   1139c:	f8ad 3006 	strh.w	r3, [sp, #6]

    Std_ReturnType RetVal = (Std_ReturnType)E_OK;
   113a0:	2300      	movs	r3, #0
   113a2:	f88d 300f 	strb.w	r3, [sp, #15]
#if (PWM_FTM_USED == STD_ON)
    uint16 FtmDutyCycle = 0U;
   113a6:	2300      	movs	r3, #0
   113a8:	f8ad 300c 	strh.w	r3, [sp, #12]
#endif
#if (PWM_FLEXIO_USED == STD_ON)
    uint16 FlexioChDuty = 0U;
    uint16 FlexioPeriod = 0U;
#endif
    switch(IpConfig->ChannelType)
   113ac:	9b00      	ldr	r3, [sp, #0]
   113ae:	681b      	ldr	r3, [r3, #0]
   113b0:	2b00      	cmp	r3, #0
   113b2:	d02c      	beq.n	1140e <Pwm_Ipw_SetDutyCycle+0x7a>
   113b4:	2b01      	cmp	r3, #1
   113b6:	d12c      	bne.n	11412 <Pwm_Ipw_SetDutyCycle+0x7e>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            if (NULL_PTR != IpConfig->FtmChConfig)
   113b8:	9b00      	ldr	r3, [sp, #0]
   113ba:	685b      	ldr	r3, [r3, #4]
   113bc:	2b00      	cmp	r3, #0
   113be:	d02a      	beq.n	11416 <Pwm_Ipw_SetDutyCycle+0x82>
            {
                FtmDutyCycle = (uint16)(((uint32)Ftm_Pwm_Ip_aPeriod[IpConfig->ChannelInstanceId] * DutyCycle) / 0x8000U);
   113c0:	9b00      	ldr	r3, [sp, #0]
   113c2:	7a1b      	ldrb	r3, [r3, #8]
   113c4:	461a      	mov	r2, r3
   113c6:	4b17      	ldr	r3, [pc, #92]	; (11424 <Pwm_Ipw_SetDutyCycle+0x90>)
   113c8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   113cc:	461a      	mov	r2, r3
   113ce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   113d2:	fb02 f303 	mul.w	r3, r2, r3
   113d6:	0bdb      	lsrs	r3, r3, #15
   113d8:	f8ad 300c 	strh.w	r3, [sp, #12]
                /* Call Ftm IP initialize function */
                Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(IpConfig->ChannelInstanceId,
   113dc:	9b00      	ldr	r3, [sp, #0]
   113de:	7a18      	ldrb	r0, [r3, #8]
                                                     ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId,
   113e0:	9b00      	ldr	r3, [sp, #0]
   113e2:	685b      	ldr	r3, [r3, #4]
                Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel(IpConfig->ChannelInstanceId,
   113e4:	7819      	ldrb	r1, [r3, #0]
   113e6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   113ea:	2301      	movs	r3, #1
   113ec:	f7fe fa2e 	bl	f84c <Ftm_Pwm_Ip_UpdatePwmDutyCycleChannel>
                                                     FtmDutyCycle,
                                                     TRUE);
                /* Duty cycle of Ftm Ip */
                Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = DutyCycle;
   113f0:	9b00      	ldr	r3, [sp, #0]
   113f2:	7a1b      	ldrb	r3, [r3, #8]
   113f4:	4618      	mov	r0, r3
   113f6:	9b00      	ldr	r3, [sp, #0]
   113f8:	685b      	ldr	r3, [r3, #4]
   113fa:	781b      	ldrb	r3, [r3, #0]
   113fc:	461a      	mov	r2, r3
   113fe:	490a      	ldr	r1, [pc, #40]	; (11428 <Pwm_Ipw_SetDutyCycle+0x94>)
   11400:	00c3      	lsls	r3, r0, #3
   11402:	4413      	add	r3, r2
   11404:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   11408:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            }
            break;
   1140c:	e003      	b.n	11416 <Pwm_Ipw_SetDutyCycle+0x82>
            Pwm_Ipw_aFlexioDutyCycle[IpConfig->ChannelInstanceId][(IpConfig->FlexioChConfig)->TimerId] = DutyCycle;
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
   1140e:	bf00      	nop
   11410:	e002      	b.n	11418 <Pwm_Ipw_SetDutyCycle+0x84>
        default:
            /* Nothing to do. */
            break;
   11412:	bf00      	nop
   11414:	e000      	b.n	11418 <Pwm_Ipw_SetDutyCycle+0x84>
            break;
   11416:	bf00      	nop
    }

    return RetVal;
   11418:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   1141c:	4618      	mov	r0, r3
   1141e:	b005      	add	sp, #20
   11420:	f85d fb04 	ldr.w	pc, [sp], #4
   11424:	1fff8e2c 	.word	0x1fff8e2c
   11428:	1fff91d4 	.word	0x1fff91d4

0001142c <Pwm_Ipw_SetPeriodAndDuty>:
*
*/
void Pwm_Ipw_SetPeriodAndDuty(Pwm_PeriodType                   Period,
                              uint16                           DutyCycle,
                              const Pwm_IpwChannelConfigType * const IpConfig)
{
   1142c:	b510      	push	{r4, lr}
   1142e:	b086      	sub	sp, #24
   11430:	4603      	mov	r3, r0
   11432:	9202      	str	r2, [sp, #8]
   11434:	f8ad 300e 	strh.w	r3, [sp, #14]
   11438:	460b      	mov	r3, r1
   1143a:	f8ad 300c 	strh.w	r3, [sp, #12]

#if (PWM_FTM_USED == STD_ON)
    uint16 FtmDutyCycle = 0U;
   1143e:	2300      	movs	r3, #0
   11440:	f8ad 3016 	strh.w	r3, [sp, #22]
#endif
#if (PWM_FLEXIO_USED == STD_ON)
    uint16 FlexioChDuty = 0U;
#endif

    switch(IpConfig->ChannelType)
   11444:	9b02      	ldr	r3, [sp, #8]
   11446:	681b      	ldr	r3, [r3, #0]
   11448:	2b00      	cmp	r3, #0
   1144a:	d02a      	beq.n	114a2 <Pwm_Ipw_SetPeriodAndDuty+0x76>
   1144c:	2b01      	cmp	r3, #1
   1144e:	d12a      	bne.n	114a6 <Pwm_Ipw_SetPeriodAndDuty+0x7a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            if (NULL_PTR != IpConfig->FtmChConfig)
   11450:	9b02      	ldr	r3, [sp, #8]
   11452:	685b      	ldr	r3, [r3, #4]
   11454:	2b00      	cmp	r3, #0
   11456:	d028      	beq.n	114aa <Pwm_Ipw_SetPeriodAndDuty+0x7e>
            {
                FtmDutyCycle = (uint16)(((uint32)Period * DutyCycle) / 0x8000U);
   11458:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1145c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   11460:	fb02 f303 	mul.w	r3, r2, r3
   11464:	0bdb      	lsrs	r3, r3, #15
   11466:	f8ad 3016 	strh.w	r3, [sp, #22]
                /* Call Ftm IP initialize function */
                Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(IpConfig->ChannelInstanceId,
   1146a:	9b02      	ldr	r3, [sp, #8]
   1146c:	7a18      	ldrb	r0, [r3, #8]
                                                  ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId,
   1146e:	9b02      	ldr	r3, [sp, #8]
   11470:	685b      	ldr	r3, [r3, #4]
                Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty(IpConfig->ChannelInstanceId,
   11472:	7819      	ldrb	r1, [r3, #0]
   11474:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   11478:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1147c:	2401      	movs	r4, #1
   1147e:	9400      	str	r4, [sp, #0]
   11480:	f7fe fabe 	bl	fa00 <Ftm_Pwm_Ip_UpdatePwmPeriodAndDuty>
                                                  Period,
                                                  FtmDutyCycle,
                                                  TRUE);
                /* Duty cycle of Ftm Ip */
                Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = DutyCycle;
   11484:	9b02      	ldr	r3, [sp, #8]
   11486:	7a1b      	ldrb	r3, [r3, #8]
   11488:	4618      	mov	r0, r3
   1148a:	9b02      	ldr	r3, [sp, #8]
   1148c:	685b      	ldr	r3, [r3, #4]
   1148e:	781b      	ldrb	r3, [r3, #0]
   11490:	461a      	mov	r2, r3
   11492:	4908      	ldr	r1, [pc, #32]	; (114b4 <Pwm_Ipw_SetPeriodAndDuty+0x88>)
   11494:	00c3      	lsls	r3, r0, #3
   11496:	4413      	add	r3, r2
   11498:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   1149c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            }
            break;
   114a0:	e003      	b.n	114aa <Pwm_Ipw_SetPeriodAndDuty+0x7e>
            Pwm_Ipw_aFlexioDutyCycle[IpConfig->ChannelInstanceId][(IpConfig->FlexioChConfig)->TimerId] = DutyCycle;
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
   114a2:	bf00      	nop
   114a4:	e002      	b.n	114ac <Pwm_Ipw_SetPeriodAndDuty+0x80>
        default:
            /* Nothing to do. */
            break;
   114a6:	bf00      	nop
   114a8:	e000      	b.n	114ac <Pwm_Ipw_SetPeriodAndDuty+0x80>
            break;
   114aa:	bf00      	nop
    }
}
   114ac:	bf00      	nop
   114ae:	b006      	add	sp, #24
   114b0:	bd10      	pop	{r4, pc}
   114b2:	bf00      	nop
   114b4:	1fff91d4 	.word	0x1fff91d4

000114b8 <Pwm_Ipw_SetOutputToIdle>:
*
* @return       void
*
*/
void Pwm_Ipw_SetOutputToIdle(const Pwm_OutputStateType IdleState, const Pwm_IpwChannelConfigType * const IpConfig)
{
   114b8:	b500      	push	{lr}
   114ba:	b085      	sub	sp, #20
   114bc:	9001      	str	r0, [sp, #4]
   114be:	9100      	str	r1, [sp, #0]
#if (PWM_FTM_USED == STD_ON)
    uint8 Instance  =  IpConfig->ChannelInstanceId;
   114c0:	9b00      	ldr	r3, [sp, #0]
   114c2:	7a1b      	ldrb	r3, [r3, #8]
   114c4:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 Channel   =  ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId;
   114c8:	9b00      	ldr	r3, [sp, #0]
   114ca:	685b      	ldr	r3, [r3, #4]
   114cc:	781b      	ldrb	r3, [r3, #0]
   114ce:	f88d 300e 	strb.w	r3, [sp, #14]
#endif

    switch(IpConfig->ChannelType)
   114d2:	9b00      	ldr	r3, [sp, #0]
   114d4:	681b      	ldr	r3, [r3, #0]
   114d6:	2b00      	cmp	r3, #0
   114d8:	d02e      	beq.n	11538 <Pwm_Ipw_SetOutputToIdle+0x80>
   114da:	2b01      	cmp	r3, #1
   114dc:	d12e      	bne.n	1153c <Pwm_Ipw_SetOutputToIdle+0x84>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            if ((Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_RUNNING == Ftm_Pwm_Ip_aChannelState[Instance][Channel])
   114de:	f89d 200f 	ldrb.w	r2, [sp, #15]
   114e2:	f89d 300e 	ldrb.w	r3, [sp, #14]
   114e6:	4919      	ldr	r1, [pc, #100]	; (1154c <Pwm_Ipw_SetOutputToIdle+0x94>)
   114e8:	00d2      	lsls	r2, r2, #3
   114ea:	4413      	add	r3, r2
   114ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   114f0:	2b01      	cmp	r3, #1
   114f2:	d125      	bne.n	11540 <Pwm_Ipw_SetOutputToIdle+0x88>
            {
                /* update new state of channel */
                Ftm_Pwm_Ip_aChannelState[Instance][Channel] = (Ftm_Pwm_Ip_ChannelStateType)FTM_PWM_IP_CHANNEL_IDLE;
   114f4:	f89d 200f 	ldrb.w	r2, [sp, #15]
   114f8:	f89d 300e 	ldrb.w	r3, [sp, #14]
   114fc:	4913      	ldr	r1, [pc, #76]	; (1154c <Pwm_Ipw_SetOutputToIdle+0x94>)
   114fe:	00d2      	lsls	r2, r2, #3
   11500:	4413      	add	r3, r2
   11502:	2202      	movs	r2, #2
   11504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                
                Ftm_Pwm_Ip_SwOutputControl(Instance,
                                           Channel,
                                           ((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->InitOut,
   11508:	9b00      	ldr	r3, [sp, #0]
   1150a:	685b      	ldr	r3, [r3, #4]
                Ftm_Pwm_Ip_SwOutputControl(Instance,
   1150c:	69da      	ldr	r2, [r3, #28]
   1150e:	f89d 100e 	ldrb.w	r1, [sp, #14]
   11512:	f89d 000f 	ldrb.w	r0, [sp, #15]
   11516:	2301      	movs	r3, #1
   11518:	f7fe faf6 	bl	fb08 <Ftm_Pwm_Ip_SwOutputControl>
                                           TRUE);
                /* Duty cycle of Ftm Ip */
                Pwm_Ipw_aFtmDutyCycle[IpConfig->ChannelInstanceId][((const Ftm_Pwm_Ip_ChannelConfigType *)IpConfig->FtmChConfig)->ChannelId] = 0U;
   1151c:	9b00      	ldr	r3, [sp, #0]
   1151e:	7a1b      	ldrb	r3, [r3, #8]
   11520:	4618      	mov	r0, r3
   11522:	9b00      	ldr	r3, [sp, #0]
   11524:	685b      	ldr	r3, [r3, #4]
   11526:	781b      	ldrb	r3, [r3, #0]
   11528:	4619      	mov	r1, r3
   1152a:	4a09      	ldr	r2, [pc, #36]	; (11550 <Pwm_Ipw_SetOutputToIdle+0x98>)
   1152c:	00c3      	lsls	r3, r0, #3
   1152e:	440b      	add	r3, r1
   11530:	2100      	movs	r1, #0
   11532:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }
            else
            {
                /* Do Nothing */
            }
            break;
   11536:	e003      	b.n	11540 <Pwm_Ipw_SetOutputToIdle+0x88>
            /* Nothing to do. this feature is not supported for Flexio */
            break;
#endif
        case PWM_CHANNEL_NONE:
            /* Nothing to do. No hw channel assigned to the logical channel */
            break;
   11538:	bf00      	nop
   1153a:	e002      	b.n	11542 <Pwm_Ipw_SetOutputToIdle+0x8a>
        default:
            /* Nothing to do. */
            break;
   1153c:	bf00      	nop
   1153e:	e000      	b.n	11542 <Pwm_Ipw_SetOutputToIdle+0x8a>
            break;
   11540:	bf00      	nop
    }

    (void) IdleState;

}
   11542:	bf00      	nop
   11544:	b005      	add	sp, #20
   11546:	f85d fb04 	ldr.w	pc, [sp], #4
   1154a:	bf00      	nop
   1154c:	1fff9004 	.word	0x1fff9004
   11550:	1fff91d4 	.word	0x1fff91d4

00011554 <Pwm_Ipw_ValidateSetOutPutToIdle>:
*               E_NOT_OK        The Idle state is not ready
*               E_OK            The Idle state is ready
*
*/
Std_ReturnType Pwm_Ipw_ValidateSetOutPutToIdle(const Pwm_IpwChannelConfigType * const IpConfig)
{
   11554:	b084      	sub	sp, #16
   11556:	9001      	str	r0, [sp, #4]
    /** @brief  Variable to store the value returned by the function */
    Std_ReturnType      RetVal = (Std_ReturnType)E_OK;
   11558:	2300      	movs	r3, #0
   1155a:	f88d 300f 	strb.w	r3, [sp, #15]
    
    switch(IpConfig->ChannelType)
   1155e:	9b01      	ldr	r3, [sp, #4]
   11560:	681b      	ldr	r3, [r3, #0]
   11562:	2b01      	cmp	r3, #1
   11564:	d103      	bne.n	1156e <Pwm_Ipw_ValidateSetOutPutToIdle+0x1a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            RetVal = (Std_ReturnType)E_OK;
   11566:	2300      	movs	r3, #0
   11568:	f88d 300f 	strb.w	r3, [sp, #15]
            break;
   1156c:	e003      	b.n	11576 <Pwm_Ipw_ValidateSetOutPutToIdle+0x22>
            RetVal = (Std_ReturnType)E_NOT_OK;
            break;
#endif
        case PWM_CHANNEL_NONE:
        default:
            RetVal = (Std_ReturnType)E_NOT_OK;
   1156e:	2301      	movs	r3, #1
   11570:	f88d 300f 	strb.w	r3, [sp, #15]
            break;
   11574:	bf00      	nop

    }

    return RetVal; 
   11576:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
   1157a:	4618      	mov	r0, r3
   1157c:	b004      	add	sp, #16
   1157e:	4770      	bx	lr

00011580 <Pwm_Ipw_GetMaxPeriodValue>:
*
* @return       uint32
*
*/  
uint32 Pwm_Ipw_GetMaxPeriodValue(const Pwm_IpwChannelConfigType * const IpConfig)
{
   11580:	b084      	sub	sp, #16
   11582:	9001      	str	r0, [sp, #4]
    /** @brief  Store return value */
    uint32               RetVal = (uint32)0xFFFFU;
   11584:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11588:	9303      	str	r3, [sp, #12]

    switch(IpConfig->ChannelType)
   1158a:	9b01      	ldr	r3, [sp, #4]
   1158c:	681b      	ldr	r3, [r3, #0]
   1158e:	2b01      	cmp	r3, #1
   11590:	d103      	bne.n	1159a <Pwm_Ipw_GetMaxPeriodValue+0x1a>
    {
#if (PWM_FTM_USED == STD_ON)
        case PWM_CHANNEL_FTM:
            RetVal = (uint32)0xFFFEU;
   11592:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   11596:	9303      	str	r3, [sp, #12]
            break;
   11598:	e000      	b.n	1159c <Pwm_Ipw_GetMaxPeriodValue+0x1c>
            break;
#endif
        case PWM_CHANNEL_NONE:
        default:
            /* Do Nothing */
            break;
   1159a:	bf00      	nop
    }

    return RetVal;
   1159c:	9b03      	ldr	r3, [sp, #12]
}
   1159e:	4618      	mov	r0, r3
   115a0:	b004      	add	sp, #16
   115a2:	4770      	bx	lr

000115a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
   115a4:	b500      	push	{lr}
   115a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   115a8:	f7f0 f98a 	bl	18c0 <Sys_GetCoreID>
   115ac:	4603      	mov	r3, r0
   115ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId])
   115b0:	4a10      	ldr	r2, [pc, #64]	; (115f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
   115b2:	9b01      	ldr	r3, [sp, #4]
   115b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115b8:	2b00      	cmp	r3, #0
   115ba:	d10d      	bne.n	115d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   115bc:	f7ef f9a4 	bl	908 <Adc_schm_read_msr>
   115c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   115c2:	9b00      	ldr	r3, [sp, #0]
   115c4:	f003 0301 	and.w	r3, r3, #1
   115c8:	2b00      	cmp	r3, #0
   115ca:	d100      	bne.n	115ce <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   115cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   115ce:	490a      	ldr	r1, [pc, #40]	; (115f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x54>)
   115d0:	9b01      	ldr	r3, [sp, #4]
   115d2:	9a00      	ldr	r2, [sp, #0]
   115d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]++;
   115d8:	4a06      	ldr	r2, [pc, #24]	; (115f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
   115da:	9b01      	ldr	r3, [sp, #4]
   115dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   115e0:	1c5a      	adds	r2, r3, #1
   115e2:	4904      	ldr	r1, [pc, #16]	; (115f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_00+0x50>)
   115e4:	9b01      	ldr	r3, [sp, #4]
   115e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   115ea:	bf00      	nop
   115ec:	b003      	add	sp, #12
   115ee:	f85d fb04 	ldr.w	pc, [sp], #4
   115f2:	bf00      	nop
   115f4:	1fff9218 	.word	0x1fff9218
   115f8:	1fff9214 	.word	0x1fff9214

000115fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00(void)
{
   115fc:	b500      	push	{lr}
   115fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11600:	f7f0 f95e 	bl	18c0 <Sys_GetCoreID>
   11604:	4603      	mov	r3, r0
   11606:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]--;
   11608:	4a0d      	ldr	r2, [pc, #52]	; (11640 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
   1160a:	9b01      	ldr	r3, [sp, #4]
   1160c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11610:	1e5a      	subs	r2, r3, #1
   11612:	490b      	ldr	r1, [pc, #44]	; (11640 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
   11614:	9b01      	ldr	r3, [sp, #4]
   11616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   1161a:	4a0a      	ldr	r2, [pc, #40]	; (11644 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x48>)
   1161c:	9b01      	ldr	r3, [sp, #4]
   1161e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11622:	f003 0301 	and.w	r3, r3, #1
   11626:	2b00      	cmp	r3, #0
   11628:	d106      	bne.n	11638 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
   1162a:	4a05      	ldr	r2, [pc, #20]	; (11640 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x44>)
   1162c:	9b01      	ldr	r3, [sp, #4]
   1162e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11632:	2b00      	cmp	r3, #0
   11634:	d100      	bne.n	11638 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11636:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11638:	bf00      	nop
   1163a:	b003      	add	sp, #12
   1163c:	f85d fb04 	ldr.w	pc, [sp], #4
   11640:	1fff9218 	.word	0x1fff9218
   11644:	1fff9214 	.word	0x1fff9214

00011648 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
   11648:	b500      	push	{lr}
   1164a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1164c:	f7f0 f938 	bl	18c0 <Sys_GetCoreID>
   11650:	4603      	mov	r3, r0
   11652:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId])
   11654:	4a10      	ldr	r2, [pc, #64]	; (11698 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
   11656:	9b01      	ldr	r3, [sp, #4]
   11658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1165c:	2b00      	cmp	r3, #0
   1165e:	d10d      	bne.n	1167c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11660:	f7ef f952 	bl	908 <Adc_schm_read_msr>
   11664:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11666:	9b00      	ldr	r3, [sp, #0]
   11668:	f003 0301 	and.w	r3, r3, #1
   1166c:	2b00      	cmp	r3, #0
   1166e:	d100      	bne.n	11672 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11670:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   11672:	490a      	ldr	r1, [pc, #40]	; (1169c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x54>)
   11674:	9b01      	ldr	r3, [sp, #4]
   11676:	9a00      	ldr	r2, [sp, #0]
   11678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]++;
   1167c:	4a06      	ldr	r2, [pc, #24]	; (11698 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
   1167e:	9b01      	ldr	r3, [sp, #4]
   11680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11684:	1c5a      	adds	r2, r3, #1
   11686:	4904      	ldr	r1, [pc, #16]	; (11698 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_01+0x50>)
   11688:	9b01      	ldr	r3, [sp, #4]
   1168a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1168e:	bf00      	nop
   11690:	b003      	add	sp, #12
   11692:	f85d fb04 	ldr.w	pc, [sp], #4
   11696:	bf00      	nop
   11698:	1fff9220 	.word	0x1fff9220
   1169c:	1fff921c 	.word	0x1fff921c

000116a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01(void)
{
   116a0:	b500      	push	{lr}
   116a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   116a4:	f7f0 f90c 	bl	18c0 <Sys_GetCoreID>
   116a8:	4603      	mov	r3, r0
   116aa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]--;
   116ac:	4a0d      	ldr	r2, [pc, #52]	; (116e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
   116ae:	9b01      	ldr	r3, [sp, #4]
   116b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116b4:	1e5a      	subs	r2, r3, #1
   116b6:	490b      	ldr	r1, [pc, #44]	; (116e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
   116b8:	9b01      	ldr	r3, [sp, #4]
   116ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   116be:	4a0a      	ldr	r2, [pc, #40]	; (116e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x48>)
   116c0:	9b01      	ldr	r3, [sp, #4]
   116c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116c6:	f003 0301 	and.w	r3, r3, #1
   116ca:	2b00      	cmp	r3, #0
   116cc:	d106      	bne.n	116dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
   116ce:	4a05      	ldr	r2, [pc, #20]	; (116e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x44>)
   116d0:	9b01      	ldr	r3, [sp, #4]
   116d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   116d6:	2b00      	cmp	r3, #0
   116d8:	d100      	bne.n	116dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   116da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   116dc:	bf00      	nop
   116de:	b003      	add	sp, #12
   116e0:	f85d fb04 	ldr.w	pc, [sp], #4
   116e4:	1fff9220 	.word	0x1fff9220
   116e8:	1fff921c 	.word	0x1fff921c

000116ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
   116ec:	b500      	push	{lr}
   116ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   116f0:	f7f0 f8e6 	bl	18c0 <Sys_GetCoreID>
   116f4:	4603      	mov	r3, r0
   116f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId])
   116f8:	4a10      	ldr	r2, [pc, #64]	; (1173c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
   116fa:	9b01      	ldr	r3, [sp, #4]
   116fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11700:	2b00      	cmp	r3, #0
   11702:	d10d      	bne.n	11720 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11704:	f7ef f900 	bl	908 <Adc_schm_read_msr>
   11708:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1170a:	9b00      	ldr	r3, [sp, #0]
   1170c:	f003 0301 	and.w	r3, r3, #1
   11710:	2b00      	cmp	r3, #0
   11712:	d100      	bne.n	11716 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11714:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   11716:	490a      	ldr	r1, [pc, #40]	; (11740 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x54>)
   11718:	9b01      	ldr	r3, [sp, #4]
   1171a:	9a00      	ldr	r2, [sp, #0]
   1171c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]++;
   11720:	4a06      	ldr	r2, [pc, #24]	; (1173c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
   11722:	9b01      	ldr	r3, [sp, #4]
   11724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11728:	1c5a      	adds	r2, r3, #1
   1172a:	4904      	ldr	r1, [pc, #16]	; (1173c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_02+0x50>)
   1172c:	9b01      	ldr	r3, [sp, #4]
   1172e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11732:	bf00      	nop
   11734:	b003      	add	sp, #12
   11736:	f85d fb04 	ldr.w	pc, [sp], #4
   1173a:	bf00      	nop
   1173c:	1fff9228 	.word	0x1fff9228
   11740:	1fff9224 	.word	0x1fff9224

00011744 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02(void)
{
   11744:	b500      	push	{lr}
   11746:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11748:	f7f0 f8ba 	bl	18c0 <Sys_GetCoreID>
   1174c:	4603      	mov	r3, r0
   1174e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]--;
   11750:	4a0d      	ldr	r2, [pc, #52]	; (11788 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
   11752:	9b01      	ldr	r3, [sp, #4]
   11754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11758:	1e5a      	subs	r2, r3, #1
   1175a:	490b      	ldr	r1, [pc, #44]	; (11788 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
   1175c:	9b01      	ldr	r3, [sp, #4]
   1175e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   11762:	4a0a      	ldr	r2, [pc, #40]	; (1178c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x48>)
   11764:	9b01      	ldr	r3, [sp, #4]
   11766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1176a:	f003 0301 	and.w	r3, r3, #1
   1176e:	2b00      	cmp	r3, #0
   11770:	d106      	bne.n	11780 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
   11772:	4a05      	ldr	r2, [pc, #20]	; (11788 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x44>)
   11774:	9b01      	ldr	r3, [sp, #4]
   11776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1177a:	2b00      	cmp	r3, #0
   1177c:	d100      	bne.n	11780 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1177e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11780:	bf00      	nop
   11782:	b003      	add	sp, #12
   11784:	f85d fb04 	ldr.w	pc, [sp], #4
   11788:	1fff9228 	.word	0x1fff9228
   1178c:	1fff9224 	.word	0x1fff9224

00011790 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
   11790:	b500      	push	{lr}
   11792:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11794:	f7f0 f894 	bl	18c0 <Sys_GetCoreID>
   11798:	4603      	mov	r3, r0
   1179a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId])
   1179c:	4a10      	ldr	r2, [pc, #64]	; (117e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
   1179e:	9b01      	ldr	r3, [sp, #4]
   117a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117a4:	2b00      	cmp	r3, #0
   117a6:	d10d      	bne.n	117c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   117a8:	f7ef f8ae 	bl	908 <Adc_schm_read_msr>
   117ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   117ae:	9b00      	ldr	r3, [sp, #0]
   117b0:	f003 0301 	and.w	r3, r3, #1
   117b4:	2b00      	cmp	r3, #0
   117b6:	d100      	bne.n	117ba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   117b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   117ba:	490a      	ldr	r1, [pc, #40]	; (117e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x54>)
   117bc:	9b01      	ldr	r3, [sp, #4]
   117be:	9a00      	ldr	r2, [sp, #0]
   117c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]++;
   117c4:	4a06      	ldr	r2, [pc, #24]	; (117e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
   117c6:	9b01      	ldr	r3, [sp, #4]
   117c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117cc:	1c5a      	adds	r2, r3, #1
   117ce:	4904      	ldr	r1, [pc, #16]	; (117e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_03+0x50>)
   117d0:	9b01      	ldr	r3, [sp, #4]
   117d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   117d6:	bf00      	nop
   117d8:	b003      	add	sp, #12
   117da:	f85d fb04 	ldr.w	pc, [sp], #4
   117de:	bf00      	nop
   117e0:	1fff9230 	.word	0x1fff9230
   117e4:	1fff922c 	.word	0x1fff922c

000117e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03(void)
{
   117e8:	b500      	push	{lr}
   117ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   117ec:	f7f0 f868 	bl	18c0 <Sys_GetCoreID>
   117f0:	4603      	mov	r3, r0
   117f2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]--;
   117f4:	4a0d      	ldr	r2, [pc, #52]	; (1182c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
   117f6:	9b01      	ldr	r3, [sp, #4]
   117f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   117fc:	1e5a      	subs	r2, r3, #1
   117fe:	490b      	ldr	r1, [pc, #44]	; (1182c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
   11800:	9b01      	ldr	r3, [sp, #4]
   11802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   11806:	4a0a      	ldr	r2, [pc, #40]	; (11830 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x48>)
   11808:	9b01      	ldr	r3, [sp, #4]
   1180a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1180e:	f003 0301 	and.w	r3, r3, #1
   11812:	2b00      	cmp	r3, #0
   11814:	d106      	bne.n	11824 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
   11816:	4a05      	ldr	r2, [pc, #20]	; (1182c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x44>)
   11818:	9b01      	ldr	r3, [sp, #4]
   1181a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1181e:	2b00      	cmp	r3, #0
   11820:	d100      	bne.n	11824 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11822:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11824:	bf00      	nop
   11826:	b003      	add	sp, #12
   11828:	f85d fb04 	ldr.w	pc, [sp], #4
   1182c:	1fff9230 	.word	0x1fff9230
   11830:	1fff922c 	.word	0x1fff922c

00011834 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
   11834:	b500      	push	{lr}
   11836:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11838:	f7f0 f842 	bl	18c0 <Sys_GetCoreID>
   1183c:	4603      	mov	r3, r0
   1183e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId])
   11840:	4a10      	ldr	r2, [pc, #64]	; (11884 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
   11842:	9b01      	ldr	r3, [sp, #4]
   11844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11848:	2b00      	cmp	r3, #0
   1184a:	d10d      	bne.n	11868 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1184c:	f7ef f85c 	bl	908 <Adc_schm_read_msr>
   11850:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11852:	9b00      	ldr	r3, [sp, #0]
   11854:	f003 0301 	and.w	r3, r3, #1
   11858:	2b00      	cmp	r3, #0
   1185a:	d100      	bne.n	1185e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1185c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   1185e:	490a      	ldr	r1, [pc, #40]	; (11888 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x54>)
   11860:	9b01      	ldr	r3, [sp, #4]
   11862:	9a00      	ldr	r2, [sp, #0]
   11864:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]++;
   11868:	4a06      	ldr	r2, [pc, #24]	; (11884 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
   1186a:	9b01      	ldr	r3, [sp, #4]
   1186c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11870:	1c5a      	adds	r2, r3, #1
   11872:	4904      	ldr	r1, [pc, #16]	; (11884 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_04+0x50>)
   11874:	9b01      	ldr	r3, [sp, #4]
   11876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1187a:	bf00      	nop
   1187c:	b003      	add	sp, #12
   1187e:	f85d fb04 	ldr.w	pc, [sp], #4
   11882:	bf00      	nop
   11884:	1fff9238 	.word	0x1fff9238
   11888:	1fff9234 	.word	0x1fff9234

0001188c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04(void)
{
   1188c:	b500      	push	{lr}
   1188e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11890:	f7f0 f816 	bl	18c0 <Sys_GetCoreID>
   11894:	4603      	mov	r3, r0
   11896:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]--;
   11898:	4a0d      	ldr	r2, [pc, #52]	; (118d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
   1189a:	9b01      	ldr	r3, [sp, #4]
   1189c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118a0:	1e5a      	subs	r2, r3, #1
   118a2:	490b      	ldr	r1, [pc, #44]	; (118d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
   118a4:	9b01      	ldr	r3, [sp, #4]
   118a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   118aa:	4a0a      	ldr	r2, [pc, #40]	; (118d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x48>)
   118ac:	9b01      	ldr	r3, [sp, #4]
   118ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118b2:	f003 0301 	and.w	r3, r3, #1
   118b6:	2b00      	cmp	r3, #0
   118b8:	d106      	bne.n	118c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
   118ba:	4a05      	ldr	r2, [pc, #20]	; (118d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x44>)
   118bc:	9b01      	ldr	r3, [sp, #4]
   118be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118c2:	2b00      	cmp	r3, #0
   118c4:	d100      	bne.n	118c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   118c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   118c8:	bf00      	nop
   118ca:	b003      	add	sp, #12
   118cc:	f85d fb04 	ldr.w	pc, [sp], #4
   118d0:	1fff9238 	.word	0x1fff9238
   118d4:	1fff9234 	.word	0x1fff9234

000118d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
   118d8:	b500      	push	{lr}
   118da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   118dc:	f7ef fff0 	bl	18c0 <Sys_GetCoreID>
   118e0:	4603      	mov	r3, r0
   118e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId])
   118e4:	4a10      	ldr	r2, [pc, #64]	; (11928 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
   118e6:	9b01      	ldr	r3, [sp, #4]
   118e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   118ec:	2b00      	cmp	r3, #0
   118ee:	d10d      	bne.n	1190c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   118f0:	f7ef f80a 	bl	908 <Adc_schm_read_msr>
   118f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   118f6:	9b00      	ldr	r3, [sp, #0]
   118f8:	f003 0301 	and.w	r3, r3, #1
   118fc:	2b00      	cmp	r3, #0
   118fe:	d100      	bne.n	11902 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11900:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   11902:	490a      	ldr	r1, [pc, #40]	; (1192c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x54>)
   11904:	9b01      	ldr	r3, [sp, #4]
   11906:	9a00      	ldr	r2, [sp, #0]
   11908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]++;
   1190c:	4a06      	ldr	r2, [pc, #24]	; (11928 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
   1190e:	9b01      	ldr	r3, [sp, #4]
   11910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11914:	1c5a      	adds	r2, r3, #1
   11916:	4904      	ldr	r1, [pc, #16]	; (11928 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_05+0x50>)
   11918:	9b01      	ldr	r3, [sp, #4]
   1191a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1191e:	bf00      	nop
   11920:	b003      	add	sp, #12
   11922:	f85d fb04 	ldr.w	pc, [sp], #4
   11926:	bf00      	nop
   11928:	1fff9240 	.word	0x1fff9240
   1192c:	1fff923c 	.word	0x1fff923c

00011930 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05(void)
{
   11930:	b500      	push	{lr}
   11932:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11934:	f7ef ffc4 	bl	18c0 <Sys_GetCoreID>
   11938:	4603      	mov	r3, r0
   1193a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]--;
   1193c:	4a0d      	ldr	r2, [pc, #52]	; (11974 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
   1193e:	9b01      	ldr	r3, [sp, #4]
   11940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11944:	1e5a      	subs	r2, r3, #1
   11946:	490b      	ldr	r1, [pc, #44]	; (11974 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
   11948:	9b01      	ldr	r3, [sp, #4]
   1194a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   1194e:	4a0a      	ldr	r2, [pc, #40]	; (11978 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x48>)
   11950:	9b01      	ldr	r3, [sp, #4]
   11952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11956:	f003 0301 	and.w	r3, r3, #1
   1195a:	2b00      	cmp	r3, #0
   1195c:	d106      	bne.n	1196c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
   1195e:	4a05      	ldr	r2, [pc, #20]	; (11974 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x44>)
   11960:	9b01      	ldr	r3, [sp, #4]
   11962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11966:	2b00      	cmp	r3, #0
   11968:	d100      	bne.n	1196c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1196a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1196c:	bf00      	nop
   1196e:	b003      	add	sp, #12
   11970:	f85d fb04 	ldr.w	pc, [sp], #4
   11974:	1fff9240 	.word	0x1fff9240
   11978:	1fff923c 	.word	0x1fff923c

0001197c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
   1197c:	b500      	push	{lr}
   1197e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11980:	f7ef ff9e 	bl	18c0 <Sys_GetCoreID>
   11984:	4603      	mov	r3, r0
   11986:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId])
   11988:	4a10      	ldr	r2, [pc, #64]	; (119cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
   1198a:	9b01      	ldr	r3, [sp, #4]
   1198c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11990:	2b00      	cmp	r3, #0
   11992:	d10d      	bne.n	119b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11994:	f7ee ffb8 	bl	908 <Adc_schm_read_msr>
   11998:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1199a:	9b00      	ldr	r3, [sp, #0]
   1199c:	f003 0301 	and.w	r3, r3, #1
   119a0:	2b00      	cmp	r3, #0
   119a2:	d100      	bne.n	119a6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   119a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   119a6:	490a      	ldr	r1, [pc, #40]	; (119d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x54>)
   119a8:	9b01      	ldr	r3, [sp, #4]
   119aa:	9a00      	ldr	r2, [sp, #0]
   119ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]++;
   119b0:	4a06      	ldr	r2, [pc, #24]	; (119cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
   119b2:	9b01      	ldr	r3, [sp, #4]
   119b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119b8:	1c5a      	adds	r2, r3, #1
   119ba:	4904      	ldr	r1, [pc, #16]	; (119cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_10+0x50>)
   119bc:	9b01      	ldr	r3, [sp, #4]
   119be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   119c2:	bf00      	nop
   119c4:	b003      	add	sp, #12
   119c6:	f85d fb04 	ldr.w	pc, [sp], #4
   119ca:	bf00      	nop
   119cc:	1fff9248 	.word	0x1fff9248
   119d0:	1fff9244 	.word	0x1fff9244

000119d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10(void)
{
   119d4:	b500      	push	{lr}
   119d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   119d8:	f7ef ff72 	bl	18c0 <Sys_GetCoreID>
   119dc:	4603      	mov	r3, r0
   119de:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]--;
   119e0:	4a0d      	ldr	r2, [pc, #52]	; (11a18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
   119e2:	9b01      	ldr	r3, [sp, #4]
   119e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119e8:	1e5a      	subs	r2, r3, #1
   119ea:	490b      	ldr	r1, [pc, #44]	; (11a18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
   119ec:	9b01      	ldr	r3, [sp, #4]
   119ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   119f2:	4a0a      	ldr	r2, [pc, #40]	; (11a1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x48>)
   119f4:	9b01      	ldr	r3, [sp, #4]
   119f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   119fa:	f003 0301 	and.w	r3, r3, #1
   119fe:	2b00      	cmp	r3, #0
   11a00:	d106      	bne.n	11a10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
   11a02:	4a05      	ldr	r2, [pc, #20]	; (11a18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x44>)
   11a04:	9b01      	ldr	r3, [sp, #4]
   11a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a0a:	2b00      	cmp	r3, #0
   11a0c:	d100      	bne.n	11a10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11a0e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11a10:	bf00      	nop
   11a12:	b003      	add	sp, #12
   11a14:	f85d fb04 	ldr.w	pc, [sp], #4
   11a18:	1fff9248 	.word	0x1fff9248
   11a1c:	1fff9244 	.word	0x1fff9244

00011a20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
   11a20:	b500      	push	{lr}
   11a22:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11a24:	f7ef ff4c 	bl	18c0 <Sys_GetCoreID>
   11a28:	4603      	mov	r3, r0
   11a2a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId])
   11a2c:	4a10      	ldr	r2, [pc, #64]	; (11a70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
   11a2e:	9b01      	ldr	r3, [sp, #4]
   11a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a34:	2b00      	cmp	r3, #0
   11a36:	d10d      	bne.n	11a54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11a38:	f7ee ff66 	bl	908 <Adc_schm_read_msr>
   11a3c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11a3e:	9b00      	ldr	r3, [sp, #0]
   11a40:	f003 0301 	and.w	r3, r3, #1
   11a44:	2b00      	cmp	r3, #0
   11a46:	d100      	bne.n	11a4a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11a48:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_100[u32CoreId] = msr;
   11a4a:	490a      	ldr	r1, [pc, #40]	; (11a74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x54>)
   11a4c:	9b01      	ldr	r3, [sp, #4]
   11a4e:	9a00      	ldr	r2, [sp, #0]
   11a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]++;
   11a54:	4a06      	ldr	r2, [pc, #24]	; (11a70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
   11a56:	9b01      	ldr	r3, [sp, #4]
   11a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a5c:	1c5a      	adds	r2, r3, #1
   11a5e:	4904      	ldr	r1, [pc, #16]	; (11a70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_100+0x50>)
   11a60:	9b01      	ldr	r3, [sp, #4]
   11a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11a66:	bf00      	nop
   11a68:	b003      	add	sp, #12
   11a6a:	f85d fb04 	ldr.w	pc, [sp], #4
   11a6e:	bf00      	nop
   11a70:	1fff9250 	.word	0x1fff9250
   11a74:	1fff924c 	.word	0x1fff924c

00011a78 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100(void)
{
   11a78:	b500      	push	{lr}
   11a7a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11a7c:	f7ef ff20 	bl	18c0 <Sys_GetCoreID>
   11a80:	4603      	mov	r3, r0
   11a82:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]--;
   11a84:	4a0d      	ldr	r2, [pc, #52]	; (11abc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
   11a86:	9b01      	ldr	r3, [sp, #4]
   11a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a8c:	1e5a      	subs	r2, r3, #1
   11a8e:	490b      	ldr	r1, [pc, #44]	; (11abc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
   11a90:	9b01      	ldr	r3, [sp, #4]
   11a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_100[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_100[u32CoreId]))         /*if interrupts were enabled*/
   11a96:	4a0a      	ldr	r2, [pc, #40]	; (11ac0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x48>)
   11a98:	9b01      	ldr	r3, [sp, #4]
   11a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11a9e:	f003 0301 	and.w	r3, r3, #1
   11aa2:	2b00      	cmp	r3, #0
   11aa4:	d106      	bne.n	11ab4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
   11aa6:	4a05      	ldr	r2, [pc, #20]	; (11abc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x44>)
   11aa8:	9b01      	ldr	r3, [sp, #4]
   11aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11aae:	2b00      	cmp	r3, #0
   11ab0:	d100      	bne.n	11ab4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_100+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11ab2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11ab4:	bf00      	nop
   11ab6:	b003      	add	sp, #12
   11ab8:	f85d fb04 	ldr.w	pc, [sp], #4
   11abc:	1fff9250 	.word	0x1fff9250
   11ac0:	1fff924c 	.word	0x1fff924c

00011ac4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
   11ac4:	b500      	push	{lr}
   11ac6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11ac8:	f7ef fefa 	bl	18c0 <Sys_GetCoreID>
   11acc:	4603      	mov	r3, r0
   11ace:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId])
   11ad0:	4a10      	ldr	r2, [pc, #64]	; (11b14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
   11ad2:	9b01      	ldr	r3, [sp, #4]
   11ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ad8:	2b00      	cmp	r3, #0
   11ada:	d10d      	bne.n	11af8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11adc:	f7ee ff14 	bl	908 <Adc_schm_read_msr>
   11ae0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11ae2:	9b00      	ldr	r3, [sp, #0]
   11ae4:	f003 0301 	and.w	r3, r3, #1
   11ae8:	2b00      	cmp	r3, #0
   11aea:	d100      	bne.n	11aee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11aec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_101[u32CoreId] = msr;
   11aee:	490a      	ldr	r1, [pc, #40]	; (11b18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x54>)
   11af0:	9b01      	ldr	r3, [sp, #4]
   11af2:	9a00      	ldr	r2, [sp, #0]
   11af4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]++;
   11af8:	4a06      	ldr	r2, [pc, #24]	; (11b14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
   11afa:	9b01      	ldr	r3, [sp, #4]
   11afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b00:	1c5a      	adds	r2, r3, #1
   11b02:	4904      	ldr	r1, [pc, #16]	; (11b14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_101+0x50>)
   11b04:	9b01      	ldr	r3, [sp, #4]
   11b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11b0a:	bf00      	nop
   11b0c:	b003      	add	sp, #12
   11b0e:	f85d fb04 	ldr.w	pc, [sp], #4
   11b12:	bf00      	nop
   11b14:	1fff9258 	.word	0x1fff9258
   11b18:	1fff9254 	.word	0x1fff9254

00011b1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101(void)
{
   11b1c:	b500      	push	{lr}
   11b1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11b20:	f7ef fece 	bl	18c0 <Sys_GetCoreID>
   11b24:	4603      	mov	r3, r0
   11b26:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]--;
   11b28:	4a0d      	ldr	r2, [pc, #52]	; (11b60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
   11b2a:	9b01      	ldr	r3, [sp, #4]
   11b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b30:	1e5a      	subs	r2, r3, #1
   11b32:	490b      	ldr	r1, [pc, #44]	; (11b60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
   11b34:	9b01      	ldr	r3, [sp, #4]
   11b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_101[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_101[u32CoreId]))         /*if interrupts were enabled*/
   11b3a:	4a0a      	ldr	r2, [pc, #40]	; (11b64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x48>)
   11b3c:	9b01      	ldr	r3, [sp, #4]
   11b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b42:	f003 0301 	and.w	r3, r3, #1
   11b46:	2b00      	cmp	r3, #0
   11b48:	d106      	bne.n	11b58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
   11b4a:	4a05      	ldr	r2, [pc, #20]	; (11b60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x44>)
   11b4c:	9b01      	ldr	r3, [sp, #4]
   11b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b52:	2b00      	cmp	r3, #0
   11b54:	d100      	bne.n	11b58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_101+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11b56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11b58:	bf00      	nop
   11b5a:	b003      	add	sp, #12
   11b5c:	f85d fb04 	ldr.w	pc, [sp], #4
   11b60:	1fff9258 	.word	0x1fff9258
   11b64:	1fff9254 	.word	0x1fff9254

00011b68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
   11b68:	b500      	push	{lr}
   11b6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11b6c:	f7ef fea8 	bl	18c0 <Sys_GetCoreID>
   11b70:	4603      	mov	r3, r0
   11b72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId])
   11b74:	4a10      	ldr	r2, [pc, #64]	; (11bb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
   11b76:	9b01      	ldr	r3, [sp, #4]
   11b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11b7c:	2b00      	cmp	r3, #0
   11b7e:	d10d      	bne.n	11b9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11b80:	f7ee fec2 	bl	908 <Adc_schm_read_msr>
   11b84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11b86:	9b00      	ldr	r3, [sp, #0]
   11b88:	f003 0301 	and.w	r3, r3, #1
   11b8c:	2b00      	cmp	r3, #0
   11b8e:	d100      	bne.n	11b92 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11b90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_102[u32CoreId] = msr;
   11b92:	490a      	ldr	r1, [pc, #40]	; (11bbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x54>)
   11b94:	9b01      	ldr	r3, [sp, #4]
   11b96:	9a00      	ldr	r2, [sp, #0]
   11b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]++;
   11b9c:	4a06      	ldr	r2, [pc, #24]	; (11bb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
   11b9e:	9b01      	ldr	r3, [sp, #4]
   11ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ba4:	1c5a      	adds	r2, r3, #1
   11ba6:	4904      	ldr	r1, [pc, #16]	; (11bb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_102+0x50>)
   11ba8:	9b01      	ldr	r3, [sp, #4]
   11baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11bae:	bf00      	nop
   11bb0:	b003      	add	sp, #12
   11bb2:	f85d fb04 	ldr.w	pc, [sp], #4
   11bb6:	bf00      	nop
   11bb8:	1fff9260 	.word	0x1fff9260
   11bbc:	1fff925c 	.word	0x1fff925c

00011bc0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102(void)
{
   11bc0:	b500      	push	{lr}
   11bc2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11bc4:	f7ef fe7c 	bl	18c0 <Sys_GetCoreID>
   11bc8:	4603      	mov	r3, r0
   11bca:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]--;
   11bcc:	4a0d      	ldr	r2, [pc, #52]	; (11c04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
   11bce:	9b01      	ldr	r3, [sp, #4]
   11bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11bd4:	1e5a      	subs	r2, r3, #1
   11bd6:	490b      	ldr	r1, [pc, #44]	; (11c04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
   11bd8:	9b01      	ldr	r3, [sp, #4]
   11bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_102[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_102[u32CoreId]))         /*if interrupts were enabled*/
   11bde:	4a0a      	ldr	r2, [pc, #40]	; (11c08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x48>)
   11be0:	9b01      	ldr	r3, [sp, #4]
   11be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11be6:	f003 0301 	and.w	r3, r3, #1
   11bea:	2b00      	cmp	r3, #0
   11bec:	d106      	bne.n	11bfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
   11bee:	4a05      	ldr	r2, [pc, #20]	; (11c04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x44>)
   11bf0:	9b01      	ldr	r3, [sp, #4]
   11bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11bf6:	2b00      	cmp	r3, #0
   11bf8:	d100      	bne.n	11bfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_102+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11bfa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11bfc:	bf00      	nop
   11bfe:	b003      	add	sp, #12
   11c00:	f85d fb04 	ldr.w	pc, [sp], #4
   11c04:	1fff9260 	.word	0x1fff9260
   11c08:	1fff925c 	.word	0x1fff925c

00011c0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
   11c0c:	b500      	push	{lr}
   11c0e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11c10:	f7ef fe56 	bl	18c0 <Sys_GetCoreID>
   11c14:	4603      	mov	r3, r0
   11c16:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId])
   11c18:	4a10      	ldr	r2, [pc, #64]	; (11c5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
   11c1a:	9b01      	ldr	r3, [sp, #4]
   11c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c20:	2b00      	cmp	r3, #0
   11c22:	d10d      	bne.n	11c40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11c24:	f7ee fe70 	bl	908 <Adc_schm_read_msr>
   11c28:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11c2a:	9b00      	ldr	r3, [sp, #0]
   11c2c:	f003 0301 	and.w	r3, r3, #1
   11c30:	2b00      	cmp	r3, #0
   11c32:	d100      	bne.n	11c36 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11c34:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_103[u32CoreId] = msr;
   11c36:	490a      	ldr	r1, [pc, #40]	; (11c60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x54>)
   11c38:	9b01      	ldr	r3, [sp, #4]
   11c3a:	9a00      	ldr	r2, [sp, #0]
   11c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]++;
   11c40:	4a06      	ldr	r2, [pc, #24]	; (11c5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
   11c42:	9b01      	ldr	r3, [sp, #4]
   11c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c48:	1c5a      	adds	r2, r3, #1
   11c4a:	4904      	ldr	r1, [pc, #16]	; (11c5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_103+0x50>)
   11c4c:	9b01      	ldr	r3, [sp, #4]
   11c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11c52:	bf00      	nop
   11c54:	b003      	add	sp, #12
   11c56:	f85d fb04 	ldr.w	pc, [sp], #4
   11c5a:	bf00      	nop
   11c5c:	1fff9268 	.word	0x1fff9268
   11c60:	1fff9264 	.word	0x1fff9264

00011c64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103(void)
{
   11c64:	b500      	push	{lr}
   11c66:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11c68:	f7ef fe2a 	bl	18c0 <Sys_GetCoreID>
   11c6c:	4603      	mov	r3, r0
   11c6e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]--;
   11c70:	4a0d      	ldr	r2, [pc, #52]	; (11ca8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
   11c72:	9b01      	ldr	r3, [sp, #4]
   11c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c78:	1e5a      	subs	r2, r3, #1
   11c7a:	490b      	ldr	r1, [pc, #44]	; (11ca8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
   11c7c:	9b01      	ldr	r3, [sp, #4]
   11c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_103[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_103[u32CoreId]))         /*if interrupts were enabled*/
   11c82:	4a0a      	ldr	r2, [pc, #40]	; (11cac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x48>)
   11c84:	9b01      	ldr	r3, [sp, #4]
   11c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c8a:	f003 0301 	and.w	r3, r3, #1
   11c8e:	2b00      	cmp	r3, #0
   11c90:	d106      	bne.n	11ca0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
   11c92:	4a05      	ldr	r2, [pc, #20]	; (11ca8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x44>)
   11c94:	9b01      	ldr	r3, [sp, #4]
   11c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11c9a:	2b00      	cmp	r3, #0
   11c9c:	d100      	bne.n	11ca0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_103+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11c9e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11ca0:	bf00      	nop
   11ca2:	b003      	add	sp, #12
   11ca4:	f85d fb04 	ldr.w	pc, [sp], #4
   11ca8:	1fff9268 	.word	0x1fff9268
   11cac:	1fff9264 	.word	0x1fff9264

00011cb0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
   11cb0:	b500      	push	{lr}
   11cb2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11cb4:	f7ef fe04 	bl	18c0 <Sys_GetCoreID>
   11cb8:	4603      	mov	r3, r0
   11cba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId])
   11cbc:	4a10      	ldr	r2, [pc, #64]	; (11d00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
   11cbe:	9b01      	ldr	r3, [sp, #4]
   11cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11cc4:	2b00      	cmp	r3, #0
   11cc6:	d10d      	bne.n	11ce4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11cc8:	f7ee fe1e 	bl	908 <Adc_schm_read_msr>
   11ccc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11cce:	9b00      	ldr	r3, [sp, #0]
   11cd0:	f003 0301 	and.w	r3, r3, #1
   11cd4:	2b00      	cmp	r3, #0
   11cd6:	d100      	bne.n	11cda <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11cd8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   11cda:	490a      	ldr	r1, [pc, #40]	; (11d04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x54>)
   11cdc:	9b01      	ldr	r3, [sp, #4]
   11cde:	9a00      	ldr	r2, [sp, #0]
   11ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]++;
   11ce4:	4a06      	ldr	r2, [pc, #24]	; (11d00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
   11ce6:	9b01      	ldr	r3, [sp, #4]
   11ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11cec:	1c5a      	adds	r2, r3, #1
   11cee:	4904      	ldr	r1, [pc, #16]	; (11d00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_11+0x50>)
   11cf0:	9b01      	ldr	r3, [sp, #4]
   11cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11cf6:	bf00      	nop
   11cf8:	b003      	add	sp, #12
   11cfa:	f85d fb04 	ldr.w	pc, [sp], #4
   11cfe:	bf00      	nop
   11d00:	1fff9270 	.word	0x1fff9270
   11d04:	1fff926c 	.word	0x1fff926c

00011d08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11(void)
{
   11d08:	b500      	push	{lr}
   11d0a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11d0c:	f7ef fdd8 	bl	18c0 <Sys_GetCoreID>
   11d10:	4603      	mov	r3, r0
   11d12:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]--;
   11d14:	4a0d      	ldr	r2, [pc, #52]	; (11d4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
   11d16:	9b01      	ldr	r3, [sp, #4]
   11d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d1c:	1e5a      	subs	r2, r3, #1
   11d1e:	490b      	ldr	r1, [pc, #44]	; (11d4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
   11d20:	9b01      	ldr	r3, [sp, #4]
   11d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   11d26:	4a0a      	ldr	r2, [pc, #40]	; (11d50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x48>)
   11d28:	9b01      	ldr	r3, [sp, #4]
   11d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d2e:	f003 0301 	and.w	r3, r3, #1
   11d32:	2b00      	cmp	r3, #0
   11d34:	d106      	bne.n	11d44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
   11d36:	4a05      	ldr	r2, [pc, #20]	; (11d4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x44>)
   11d38:	9b01      	ldr	r3, [sp, #4]
   11d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d3e:	2b00      	cmp	r3, #0
   11d40:	d100      	bne.n	11d44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11d42:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11d44:	bf00      	nop
   11d46:	b003      	add	sp, #12
   11d48:	f85d fb04 	ldr.w	pc, [sp], #4
   11d4c:	1fff9270 	.word	0x1fff9270
   11d50:	1fff926c 	.word	0x1fff926c

00011d54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
   11d54:	b500      	push	{lr}
   11d56:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11d58:	f7ef fdb2 	bl	18c0 <Sys_GetCoreID>
   11d5c:	4603      	mov	r3, r0
   11d5e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId])
   11d60:	4a10      	ldr	r2, [pc, #64]	; (11da4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
   11d62:	9b01      	ldr	r3, [sp, #4]
   11d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d68:	2b00      	cmp	r3, #0
   11d6a:	d10d      	bne.n	11d88 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11d6c:	f7ee fdcc 	bl	908 <Adc_schm_read_msr>
   11d70:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11d72:	9b00      	ldr	r3, [sp, #0]
   11d74:	f003 0301 	and.w	r3, r3, #1
   11d78:	2b00      	cmp	r3, #0
   11d7a:	d100      	bne.n	11d7e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11d7c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   11d7e:	490a      	ldr	r1, [pc, #40]	; (11da8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x54>)
   11d80:	9b01      	ldr	r3, [sp, #4]
   11d82:	9a00      	ldr	r2, [sp, #0]
   11d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]++;
   11d88:	4a06      	ldr	r2, [pc, #24]	; (11da4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
   11d8a:	9b01      	ldr	r3, [sp, #4]
   11d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11d90:	1c5a      	adds	r2, r3, #1
   11d92:	4904      	ldr	r1, [pc, #16]	; (11da4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_12+0x50>)
   11d94:	9b01      	ldr	r3, [sp, #4]
   11d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11d9a:	bf00      	nop
   11d9c:	b003      	add	sp, #12
   11d9e:	f85d fb04 	ldr.w	pc, [sp], #4
   11da2:	bf00      	nop
   11da4:	1fff9278 	.word	0x1fff9278
   11da8:	1fff9274 	.word	0x1fff9274

00011dac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12(void)
{
   11dac:	b500      	push	{lr}
   11dae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11db0:	f7ef fd86 	bl	18c0 <Sys_GetCoreID>
   11db4:	4603      	mov	r3, r0
   11db6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]--;
   11db8:	4a0d      	ldr	r2, [pc, #52]	; (11df0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
   11dba:	9b01      	ldr	r3, [sp, #4]
   11dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11dc0:	1e5a      	subs	r2, r3, #1
   11dc2:	490b      	ldr	r1, [pc, #44]	; (11df0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
   11dc4:	9b01      	ldr	r3, [sp, #4]
   11dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   11dca:	4a0a      	ldr	r2, [pc, #40]	; (11df4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x48>)
   11dcc:	9b01      	ldr	r3, [sp, #4]
   11dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11dd2:	f003 0301 	and.w	r3, r3, #1
   11dd6:	2b00      	cmp	r3, #0
   11dd8:	d106      	bne.n	11de8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
   11dda:	4a05      	ldr	r2, [pc, #20]	; (11df0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x44>)
   11ddc:	9b01      	ldr	r3, [sp, #4]
   11dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11de2:	2b00      	cmp	r3, #0
   11de4:	d100      	bne.n	11de8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11de6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11de8:	bf00      	nop
   11dea:	b003      	add	sp, #12
   11dec:	f85d fb04 	ldr.w	pc, [sp], #4
   11df0:	1fff9278 	.word	0x1fff9278
   11df4:	1fff9274 	.word	0x1fff9274

00011df8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
   11df8:	b500      	push	{lr}
   11dfa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11dfc:	f7ef fd60 	bl	18c0 <Sys_GetCoreID>
   11e00:	4603      	mov	r3, r0
   11e02:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId])
   11e04:	4a10      	ldr	r2, [pc, #64]	; (11e48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
   11e06:	9b01      	ldr	r3, [sp, #4]
   11e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e0c:	2b00      	cmp	r3, #0
   11e0e:	d10d      	bne.n	11e2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11e10:	f7ee fd7a 	bl	908 <Adc_schm_read_msr>
   11e14:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11e16:	9b00      	ldr	r3, [sp, #0]
   11e18:	f003 0301 	and.w	r3, r3, #1
   11e1c:	2b00      	cmp	r3, #0
   11e1e:	d100      	bne.n	11e22 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11e20:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   11e22:	490a      	ldr	r1, [pc, #40]	; (11e4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x54>)
   11e24:	9b01      	ldr	r3, [sp, #4]
   11e26:	9a00      	ldr	r2, [sp, #0]
   11e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]++;
   11e2c:	4a06      	ldr	r2, [pc, #24]	; (11e48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
   11e2e:	9b01      	ldr	r3, [sp, #4]
   11e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e34:	1c5a      	adds	r2, r3, #1
   11e36:	4904      	ldr	r1, [pc, #16]	; (11e48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_13+0x50>)
   11e38:	9b01      	ldr	r3, [sp, #4]
   11e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11e3e:	bf00      	nop
   11e40:	b003      	add	sp, #12
   11e42:	f85d fb04 	ldr.w	pc, [sp], #4
   11e46:	bf00      	nop
   11e48:	1fff9280 	.word	0x1fff9280
   11e4c:	1fff927c 	.word	0x1fff927c

00011e50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13(void)
{
   11e50:	b500      	push	{lr}
   11e52:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11e54:	f7ef fd34 	bl	18c0 <Sys_GetCoreID>
   11e58:	4603      	mov	r3, r0
   11e5a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]--;
   11e5c:	4a0d      	ldr	r2, [pc, #52]	; (11e94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
   11e5e:	9b01      	ldr	r3, [sp, #4]
   11e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e64:	1e5a      	subs	r2, r3, #1
   11e66:	490b      	ldr	r1, [pc, #44]	; (11e94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
   11e68:	9b01      	ldr	r3, [sp, #4]
   11e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   11e6e:	4a0a      	ldr	r2, [pc, #40]	; (11e98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x48>)
   11e70:	9b01      	ldr	r3, [sp, #4]
   11e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e76:	f003 0301 	and.w	r3, r3, #1
   11e7a:	2b00      	cmp	r3, #0
   11e7c:	d106      	bne.n	11e8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
   11e7e:	4a05      	ldr	r2, [pc, #20]	; (11e94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x44>)
   11e80:	9b01      	ldr	r3, [sp, #4]
   11e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11e86:	2b00      	cmp	r3, #0
   11e88:	d100      	bne.n	11e8c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11e8a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11e8c:	bf00      	nop
   11e8e:	b003      	add	sp, #12
   11e90:	f85d fb04 	ldr.w	pc, [sp], #4
   11e94:	1fff9280 	.word	0x1fff9280
   11e98:	1fff927c 	.word	0x1fff927c

00011e9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
   11e9c:	b500      	push	{lr}
   11e9e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11ea0:	f7ef fd0e 	bl	18c0 <Sys_GetCoreID>
   11ea4:	4603      	mov	r3, r0
   11ea6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId])
   11ea8:	4a10      	ldr	r2, [pc, #64]	; (11eec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
   11eaa:	9b01      	ldr	r3, [sp, #4]
   11eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11eb0:	2b00      	cmp	r3, #0
   11eb2:	d10d      	bne.n	11ed0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11eb4:	f7ee fd28 	bl	908 <Adc_schm_read_msr>
   11eb8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11eba:	9b00      	ldr	r3, [sp, #0]
   11ebc:	f003 0301 	and.w	r3, r3, #1
   11ec0:	2b00      	cmp	r3, #0
   11ec2:	d100      	bne.n	11ec6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11ec4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   11ec6:	490a      	ldr	r1, [pc, #40]	; (11ef0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x54>)
   11ec8:	9b01      	ldr	r3, [sp, #4]
   11eca:	9a00      	ldr	r2, [sp, #0]
   11ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]++;
   11ed0:	4a06      	ldr	r2, [pc, #24]	; (11eec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
   11ed2:	9b01      	ldr	r3, [sp, #4]
   11ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ed8:	1c5a      	adds	r2, r3, #1
   11eda:	4904      	ldr	r1, [pc, #16]	; (11eec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_14+0x50>)
   11edc:	9b01      	ldr	r3, [sp, #4]
   11ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11ee2:	bf00      	nop
   11ee4:	b003      	add	sp, #12
   11ee6:	f85d fb04 	ldr.w	pc, [sp], #4
   11eea:	bf00      	nop
   11eec:	1fff9288 	.word	0x1fff9288
   11ef0:	1fff9284 	.word	0x1fff9284

00011ef4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14(void)
{
   11ef4:	b500      	push	{lr}
   11ef6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11ef8:	f7ef fce2 	bl	18c0 <Sys_GetCoreID>
   11efc:	4603      	mov	r3, r0
   11efe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]--;
   11f00:	4a0d      	ldr	r2, [pc, #52]	; (11f38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
   11f02:	9b01      	ldr	r3, [sp, #4]
   11f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f08:	1e5a      	subs	r2, r3, #1
   11f0a:	490b      	ldr	r1, [pc, #44]	; (11f38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
   11f0c:	9b01      	ldr	r3, [sp, #4]
   11f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   11f12:	4a0a      	ldr	r2, [pc, #40]	; (11f3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x48>)
   11f14:	9b01      	ldr	r3, [sp, #4]
   11f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f1a:	f003 0301 	and.w	r3, r3, #1
   11f1e:	2b00      	cmp	r3, #0
   11f20:	d106      	bne.n	11f30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
   11f22:	4a05      	ldr	r2, [pc, #20]	; (11f38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x44>)
   11f24:	9b01      	ldr	r3, [sp, #4]
   11f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f2a:	2b00      	cmp	r3, #0
   11f2c:	d100      	bne.n	11f30 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11f2e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11f30:	bf00      	nop
   11f32:	b003      	add	sp, #12
   11f34:	f85d fb04 	ldr.w	pc, [sp], #4
   11f38:	1fff9288 	.word	0x1fff9288
   11f3c:	1fff9284 	.word	0x1fff9284

00011f40 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
   11f40:	b500      	push	{lr}
   11f42:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11f44:	f7ef fcbc 	bl	18c0 <Sys_GetCoreID>
   11f48:	4603      	mov	r3, r0
   11f4a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId])
   11f4c:	4a10      	ldr	r2, [pc, #64]	; (11f90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
   11f4e:	9b01      	ldr	r3, [sp, #4]
   11f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f54:	2b00      	cmp	r3, #0
   11f56:	d10d      	bne.n	11f74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11f58:	f7ee fcd6 	bl	908 <Adc_schm_read_msr>
   11f5c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   11f5e:	9b00      	ldr	r3, [sp, #0]
   11f60:	f003 0301 	and.w	r3, r3, #1
   11f64:	2b00      	cmp	r3, #0
   11f66:	d100      	bne.n	11f6a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   11f68:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   11f6a:	490a      	ldr	r1, [pc, #40]	; (11f94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x54>)
   11f6c:	9b01      	ldr	r3, [sp, #4]
   11f6e:	9a00      	ldr	r2, [sp, #0]
   11f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]++;
   11f74:	4a06      	ldr	r2, [pc, #24]	; (11f90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
   11f76:	9b01      	ldr	r3, [sp, #4]
   11f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11f7c:	1c5a      	adds	r2, r3, #1
   11f7e:	4904      	ldr	r1, [pc, #16]	; (11f90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_15+0x50>)
   11f80:	9b01      	ldr	r3, [sp, #4]
   11f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   11f86:	bf00      	nop
   11f88:	b003      	add	sp, #12
   11f8a:	f85d fb04 	ldr.w	pc, [sp], #4
   11f8e:	bf00      	nop
   11f90:	1fff9290 	.word	0x1fff9290
   11f94:	1fff928c 	.word	0x1fff928c

00011f98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15(void)
{
   11f98:	b500      	push	{lr}
   11f9a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11f9c:	f7ef fc90 	bl	18c0 <Sys_GetCoreID>
   11fa0:	4603      	mov	r3, r0
   11fa2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]--;
   11fa4:	4a0d      	ldr	r2, [pc, #52]	; (11fdc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
   11fa6:	9b01      	ldr	r3, [sp, #4]
   11fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fac:	1e5a      	subs	r2, r3, #1
   11fae:	490b      	ldr	r1, [pc, #44]	; (11fdc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
   11fb0:	9b01      	ldr	r3, [sp, #4]
   11fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   11fb6:	4a0a      	ldr	r2, [pc, #40]	; (11fe0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x48>)
   11fb8:	9b01      	ldr	r3, [sp, #4]
   11fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fbe:	f003 0301 	and.w	r3, r3, #1
   11fc2:	2b00      	cmp	r3, #0
   11fc4:	d106      	bne.n	11fd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
   11fc6:	4a05      	ldr	r2, [pc, #20]	; (11fdc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x44>)
   11fc8:	9b01      	ldr	r3, [sp, #4]
   11fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11fce:	2b00      	cmp	r3, #0
   11fd0:	d100      	bne.n	11fd4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   11fd2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   11fd4:	bf00      	nop
   11fd6:	b003      	add	sp, #12
   11fd8:	f85d fb04 	ldr.w	pc, [sp], #4
   11fdc:	1fff9290 	.word	0x1fff9290
   11fe0:	1fff928c 	.word	0x1fff928c

00011fe4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
   11fe4:	b500      	push	{lr}
   11fe6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   11fe8:	f7ef fc6a 	bl	18c0 <Sys_GetCoreID>
   11fec:	4603      	mov	r3, r0
   11fee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId])
   11ff0:	4a10      	ldr	r2, [pc, #64]	; (12034 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
   11ff2:	9b01      	ldr	r3, [sp, #4]
   11ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   11ff8:	2b00      	cmp	r3, #0
   11ffa:	d10d      	bne.n	12018 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   11ffc:	f7ee fc84 	bl	908 <Adc_schm_read_msr>
   12000:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12002:	9b00      	ldr	r3, [sp, #0]
   12004:	f003 0301 	and.w	r3, r3, #1
   12008:	2b00      	cmp	r3, #0
   1200a:	d100      	bne.n	1200e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1200c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   1200e:	490a      	ldr	r1, [pc, #40]	; (12038 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x54>)
   12010:	9b01      	ldr	r3, [sp, #4]
   12012:	9a00      	ldr	r2, [sp, #0]
   12014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]++;
   12018:	4a06      	ldr	r2, [pc, #24]	; (12034 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
   1201a:	9b01      	ldr	r3, [sp, #4]
   1201c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12020:	1c5a      	adds	r2, r3, #1
   12022:	4904      	ldr	r1, [pc, #16]	; (12034 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_16+0x50>)
   12024:	9b01      	ldr	r3, [sp, #4]
   12026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1202a:	bf00      	nop
   1202c:	b003      	add	sp, #12
   1202e:	f85d fb04 	ldr.w	pc, [sp], #4
   12032:	bf00      	nop
   12034:	1fff9298 	.word	0x1fff9298
   12038:	1fff9294 	.word	0x1fff9294

0001203c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16(void)
{
   1203c:	b500      	push	{lr}
   1203e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12040:	f7ef fc3e 	bl	18c0 <Sys_GetCoreID>
   12044:	4603      	mov	r3, r0
   12046:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]--;
   12048:	4a0d      	ldr	r2, [pc, #52]	; (12080 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
   1204a:	9b01      	ldr	r3, [sp, #4]
   1204c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12050:	1e5a      	subs	r2, r3, #1
   12052:	490b      	ldr	r1, [pc, #44]	; (12080 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
   12054:	9b01      	ldr	r3, [sp, #4]
   12056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   1205a:	4a0a      	ldr	r2, [pc, #40]	; (12084 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x48>)
   1205c:	9b01      	ldr	r3, [sp, #4]
   1205e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12062:	f003 0301 	and.w	r3, r3, #1
   12066:	2b00      	cmp	r3, #0
   12068:	d106      	bne.n	12078 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
   1206a:	4a05      	ldr	r2, [pc, #20]	; (12080 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x44>)
   1206c:	9b01      	ldr	r3, [sp, #4]
   1206e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12072:	2b00      	cmp	r3, #0
   12074:	d100      	bne.n	12078 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12076:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12078:	bf00      	nop
   1207a:	b003      	add	sp, #12
   1207c:	f85d fb04 	ldr.w	pc, [sp], #4
   12080:	1fff9298 	.word	0x1fff9298
   12084:	1fff9294 	.word	0x1fff9294

00012088 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
   12088:	b500      	push	{lr}
   1208a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1208c:	f7ef fc18 	bl	18c0 <Sys_GetCoreID>
   12090:	4603      	mov	r3, r0
   12092:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId])
   12094:	4a10      	ldr	r2, [pc, #64]	; (120d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
   12096:	9b01      	ldr	r3, [sp, #4]
   12098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1209c:	2b00      	cmp	r3, #0
   1209e:	d10d      	bne.n	120bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   120a0:	f7ee fc32 	bl	908 <Adc_schm_read_msr>
   120a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   120a6:	9b00      	ldr	r3, [sp, #0]
   120a8:	f003 0301 	and.w	r3, r3, #1
   120ac:	2b00      	cmp	r3, #0
   120ae:	d100      	bne.n	120b2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   120b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   120b2:	490a      	ldr	r1, [pc, #40]	; (120dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x54>)
   120b4:	9b01      	ldr	r3, [sp, #4]
   120b6:	9a00      	ldr	r2, [sp, #0]
   120b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]++;
   120bc:	4a06      	ldr	r2, [pc, #24]	; (120d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
   120be:	9b01      	ldr	r3, [sp, #4]
   120c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120c4:	1c5a      	adds	r2, r3, #1
   120c6:	4904      	ldr	r1, [pc, #16]	; (120d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_17+0x50>)
   120c8:	9b01      	ldr	r3, [sp, #4]
   120ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   120ce:	bf00      	nop
   120d0:	b003      	add	sp, #12
   120d2:	f85d fb04 	ldr.w	pc, [sp], #4
   120d6:	bf00      	nop
   120d8:	1fff92a0 	.word	0x1fff92a0
   120dc:	1fff929c 	.word	0x1fff929c

000120e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17(void)
{
   120e0:	b500      	push	{lr}
   120e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   120e4:	f7ef fbec 	bl	18c0 <Sys_GetCoreID>
   120e8:	4603      	mov	r3, r0
   120ea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]--;
   120ec:	4a0d      	ldr	r2, [pc, #52]	; (12124 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
   120ee:	9b01      	ldr	r3, [sp, #4]
   120f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120f4:	1e5a      	subs	r2, r3, #1
   120f6:	490b      	ldr	r1, [pc, #44]	; (12124 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
   120f8:	9b01      	ldr	r3, [sp, #4]
   120fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   120fe:	4a0a      	ldr	r2, [pc, #40]	; (12128 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x48>)
   12100:	9b01      	ldr	r3, [sp, #4]
   12102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12106:	f003 0301 	and.w	r3, r3, #1
   1210a:	2b00      	cmp	r3, #0
   1210c:	d106      	bne.n	1211c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
   1210e:	4a05      	ldr	r2, [pc, #20]	; (12124 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x44>)
   12110:	9b01      	ldr	r3, [sp, #4]
   12112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12116:	2b00      	cmp	r3, #0
   12118:	d100      	bne.n	1211c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1211a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1211c:	bf00      	nop
   1211e:	b003      	add	sp, #12
   12120:	f85d fb04 	ldr.w	pc, [sp], #4
   12124:	1fff92a0 	.word	0x1fff92a0
   12128:	1fff929c 	.word	0x1fff929c

0001212c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
   1212c:	b500      	push	{lr}
   1212e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12130:	f7ef fbc6 	bl	18c0 <Sys_GetCoreID>
   12134:	4603      	mov	r3, r0
   12136:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId])
   12138:	4a10      	ldr	r2, [pc, #64]	; (1217c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
   1213a:	9b01      	ldr	r3, [sp, #4]
   1213c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12140:	2b00      	cmp	r3, #0
   12142:	d10d      	bne.n	12160 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12144:	f7ee fbe0 	bl	908 <Adc_schm_read_msr>
   12148:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1214a:	9b00      	ldr	r3, [sp, #0]
   1214c:	f003 0301 	and.w	r3, r3, #1
   12150:	2b00      	cmp	r3, #0
   12152:	d100      	bne.n	12156 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12154:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   12156:	490a      	ldr	r1, [pc, #40]	; (12180 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x54>)
   12158:	9b01      	ldr	r3, [sp, #4]
   1215a:	9a00      	ldr	r2, [sp, #0]
   1215c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]++;
   12160:	4a06      	ldr	r2, [pc, #24]	; (1217c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
   12162:	9b01      	ldr	r3, [sp, #4]
   12164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12168:	1c5a      	adds	r2, r3, #1
   1216a:	4904      	ldr	r1, [pc, #16]	; (1217c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_18+0x50>)
   1216c:	9b01      	ldr	r3, [sp, #4]
   1216e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12172:	bf00      	nop
   12174:	b003      	add	sp, #12
   12176:	f85d fb04 	ldr.w	pc, [sp], #4
   1217a:	bf00      	nop
   1217c:	1fff92a8 	.word	0x1fff92a8
   12180:	1fff92a4 	.word	0x1fff92a4

00012184 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18(void)
{
   12184:	b500      	push	{lr}
   12186:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12188:	f7ef fb9a 	bl	18c0 <Sys_GetCoreID>
   1218c:	4603      	mov	r3, r0
   1218e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]--;
   12190:	4a0d      	ldr	r2, [pc, #52]	; (121c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
   12192:	9b01      	ldr	r3, [sp, #4]
   12194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12198:	1e5a      	subs	r2, r3, #1
   1219a:	490b      	ldr	r1, [pc, #44]	; (121c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
   1219c:	9b01      	ldr	r3, [sp, #4]
   1219e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   121a2:	4a0a      	ldr	r2, [pc, #40]	; (121cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x48>)
   121a4:	9b01      	ldr	r3, [sp, #4]
   121a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121aa:	f003 0301 	and.w	r3, r3, #1
   121ae:	2b00      	cmp	r3, #0
   121b0:	d106      	bne.n	121c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
   121b2:	4a05      	ldr	r2, [pc, #20]	; (121c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x44>)
   121b4:	9b01      	ldr	r3, [sp, #4]
   121b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121ba:	2b00      	cmp	r3, #0
   121bc:	d100      	bne.n	121c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   121be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   121c0:	bf00      	nop
   121c2:	b003      	add	sp, #12
   121c4:	f85d fb04 	ldr.w	pc, [sp], #4
   121c8:	1fff92a8 	.word	0x1fff92a8
   121cc:	1fff92a4 	.word	0x1fff92a4

000121d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
   121d0:	b500      	push	{lr}
   121d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   121d4:	f7ef fb74 	bl	18c0 <Sys_GetCoreID>
   121d8:	4603      	mov	r3, r0
   121da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId])
   121dc:	4a10      	ldr	r2, [pc, #64]	; (12220 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
   121de:	9b01      	ldr	r3, [sp, #4]
   121e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   121e4:	2b00      	cmp	r3, #0
   121e6:	d10d      	bne.n	12204 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   121e8:	f7ee fb8e 	bl	908 <Adc_schm_read_msr>
   121ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   121ee:	9b00      	ldr	r3, [sp, #0]
   121f0:	f003 0301 	and.w	r3, r3, #1
   121f4:	2b00      	cmp	r3, #0
   121f6:	d100      	bne.n	121fa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   121f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   121fa:	490a      	ldr	r1, [pc, #40]	; (12224 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x54>)
   121fc:	9b01      	ldr	r3, [sp, #4]
   121fe:	9a00      	ldr	r2, [sp, #0]
   12200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]++;
   12204:	4a06      	ldr	r2, [pc, #24]	; (12220 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
   12206:	9b01      	ldr	r3, [sp, #4]
   12208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1220c:	1c5a      	adds	r2, r3, #1
   1220e:	4904      	ldr	r1, [pc, #16]	; (12220 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_19+0x50>)
   12210:	9b01      	ldr	r3, [sp, #4]
   12212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12216:	bf00      	nop
   12218:	b003      	add	sp, #12
   1221a:	f85d fb04 	ldr.w	pc, [sp], #4
   1221e:	bf00      	nop
   12220:	1fff92b0 	.word	0x1fff92b0
   12224:	1fff92ac 	.word	0x1fff92ac

00012228 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19(void)
{
   12228:	b500      	push	{lr}
   1222a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1222c:	f7ef fb48 	bl	18c0 <Sys_GetCoreID>
   12230:	4603      	mov	r3, r0
   12232:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]--;
   12234:	4a0d      	ldr	r2, [pc, #52]	; (1226c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
   12236:	9b01      	ldr	r3, [sp, #4]
   12238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1223c:	1e5a      	subs	r2, r3, #1
   1223e:	490b      	ldr	r1, [pc, #44]	; (1226c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
   12240:	9b01      	ldr	r3, [sp, #4]
   12242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   12246:	4a0a      	ldr	r2, [pc, #40]	; (12270 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x48>)
   12248:	9b01      	ldr	r3, [sp, #4]
   1224a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1224e:	f003 0301 	and.w	r3, r3, #1
   12252:	2b00      	cmp	r3, #0
   12254:	d106      	bne.n	12264 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
   12256:	4a05      	ldr	r2, [pc, #20]	; (1226c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x44>)
   12258:	9b01      	ldr	r3, [sp, #4]
   1225a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1225e:	2b00      	cmp	r3, #0
   12260:	d100      	bne.n	12264 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12262:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12264:	bf00      	nop
   12266:	b003      	add	sp, #12
   12268:	f85d fb04 	ldr.w	pc, [sp], #4
   1226c:	1fff92b0 	.word	0x1fff92b0
   12270:	1fff92ac 	.word	0x1fff92ac

00012274 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
   12274:	b500      	push	{lr}
   12276:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12278:	f7ef fb22 	bl	18c0 <Sys_GetCoreID>
   1227c:	4603      	mov	r3, r0
   1227e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId])
   12280:	4a10      	ldr	r2, [pc, #64]	; (122c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
   12282:	9b01      	ldr	r3, [sp, #4]
   12284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12288:	2b00      	cmp	r3, #0
   1228a:	d10d      	bne.n	122a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1228c:	f7ee fb3c 	bl	908 <Adc_schm_read_msr>
   12290:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12292:	9b00      	ldr	r3, [sp, #0]
   12294:	f003 0301 	and.w	r3, r3, #1
   12298:	2b00      	cmp	r3, #0
   1229a:	d100      	bne.n	1229e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1229c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   1229e:	490a      	ldr	r1, [pc, #40]	; (122c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x54>)
   122a0:	9b01      	ldr	r3, [sp, #4]
   122a2:	9a00      	ldr	r2, [sp, #0]
   122a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]++;
   122a8:	4a06      	ldr	r2, [pc, #24]	; (122c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
   122aa:	9b01      	ldr	r3, [sp, #4]
   122ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122b0:	1c5a      	adds	r2, r3, #1
   122b2:	4904      	ldr	r1, [pc, #16]	; (122c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_20+0x50>)
   122b4:	9b01      	ldr	r3, [sp, #4]
   122b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   122ba:	bf00      	nop
   122bc:	b003      	add	sp, #12
   122be:	f85d fb04 	ldr.w	pc, [sp], #4
   122c2:	bf00      	nop
   122c4:	1fff92b8 	.word	0x1fff92b8
   122c8:	1fff92b4 	.word	0x1fff92b4

000122cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20(void)
{
   122cc:	b500      	push	{lr}
   122ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   122d0:	f7ef faf6 	bl	18c0 <Sys_GetCoreID>
   122d4:	4603      	mov	r3, r0
   122d6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]--;
   122d8:	4a0d      	ldr	r2, [pc, #52]	; (12310 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
   122da:	9b01      	ldr	r3, [sp, #4]
   122dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122e0:	1e5a      	subs	r2, r3, #1
   122e2:	490b      	ldr	r1, [pc, #44]	; (12310 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
   122e4:	9b01      	ldr	r3, [sp, #4]
   122e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   122ea:	4a0a      	ldr	r2, [pc, #40]	; (12314 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x48>)
   122ec:	9b01      	ldr	r3, [sp, #4]
   122ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   122f2:	f003 0301 	and.w	r3, r3, #1
   122f6:	2b00      	cmp	r3, #0
   122f8:	d106      	bne.n	12308 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
   122fa:	4a05      	ldr	r2, [pc, #20]	; (12310 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x44>)
   122fc:	9b01      	ldr	r3, [sp, #4]
   122fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12302:	2b00      	cmp	r3, #0
   12304:	d100      	bne.n	12308 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12306:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12308:	bf00      	nop
   1230a:	b003      	add	sp, #12
   1230c:	f85d fb04 	ldr.w	pc, [sp], #4
   12310:	1fff92b8 	.word	0x1fff92b8
   12314:	1fff92b4 	.word	0x1fff92b4

00012318 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
   12318:	b500      	push	{lr}
   1231a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1231c:	f7ef fad0 	bl	18c0 <Sys_GetCoreID>
   12320:	4603      	mov	r3, r0
   12322:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId])
   12324:	4a10      	ldr	r2, [pc, #64]	; (12368 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
   12326:	9b01      	ldr	r3, [sp, #4]
   12328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1232c:	2b00      	cmp	r3, #0
   1232e:	d10d      	bne.n	1234c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12330:	f7ee faea 	bl	908 <Adc_schm_read_msr>
   12334:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12336:	9b00      	ldr	r3, [sp, #0]
   12338:	f003 0301 	and.w	r3, r3, #1
   1233c:	2b00      	cmp	r3, #0
   1233e:	d100      	bne.n	12342 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12340:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_21[u32CoreId] = msr;
   12342:	490a      	ldr	r1, [pc, #40]	; (1236c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x54>)
   12344:	9b01      	ldr	r3, [sp, #4]
   12346:	9a00      	ldr	r2, [sp, #0]
   12348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]++;
   1234c:	4a06      	ldr	r2, [pc, #24]	; (12368 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
   1234e:	9b01      	ldr	r3, [sp, #4]
   12350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12354:	1c5a      	adds	r2, r3, #1
   12356:	4904      	ldr	r1, [pc, #16]	; (12368 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_21+0x50>)
   12358:	9b01      	ldr	r3, [sp, #4]
   1235a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1235e:	bf00      	nop
   12360:	b003      	add	sp, #12
   12362:	f85d fb04 	ldr.w	pc, [sp], #4
   12366:	bf00      	nop
   12368:	1fff92c0 	.word	0x1fff92c0
   1236c:	1fff92bc 	.word	0x1fff92bc

00012370 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21(void)
{
   12370:	b500      	push	{lr}
   12372:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12374:	f7ef faa4 	bl	18c0 <Sys_GetCoreID>
   12378:	4603      	mov	r3, r0
   1237a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]--;
   1237c:	4a0d      	ldr	r2, [pc, #52]	; (123b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
   1237e:	9b01      	ldr	r3, [sp, #4]
   12380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12384:	1e5a      	subs	r2, r3, #1
   12386:	490b      	ldr	r1, [pc, #44]	; (123b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
   12388:	9b01      	ldr	r3, [sp, #4]
   1238a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
   1238e:	4a0a      	ldr	r2, [pc, #40]	; (123b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x48>)
   12390:	9b01      	ldr	r3, [sp, #4]
   12392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12396:	f003 0301 	and.w	r3, r3, #1
   1239a:	2b00      	cmp	r3, #0
   1239c:	d106      	bne.n	123ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
   1239e:	4a05      	ldr	r2, [pc, #20]	; (123b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x44>)
   123a0:	9b01      	ldr	r3, [sp, #4]
   123a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123a6:	2b00      	cmp	r3, #0
   123a8:	d100      	bne.n	123ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   123aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   123ac:	bf00      	nop
   123ae:	b003      	add	sp, #12
   123b0:	f85d fb04 	ldr.w	pc, [sp], #4
   123b4:	1fff92c0 	.word	0x1fff92c0
   123b8:	1fff92bc 	.word	0x1fff92bc

000123bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
   123bc:	b500      	push	{lr}
   123be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   123c0:	f7ef fa7e 	bl	18c0 <Sys_GetCoreID>
   123c4:	4603      	mov	r3, r0
   123c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId])
   123c8:	4a10      	ldr	r2, [pc, #64]	; (1240c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
   123ca:	9b01      	ldr	r3, [sp, #4]
   123cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123d0:	2b00      	cmp	r3, #0
   123d2:	d10d      	bne.n	123f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   123d4:	f7ee fa98 	bl	908 <Adc_schm_read_msr>
   123d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   123da:	9b00      	ldr	r3, [sp, #0]
   123dc:	f003 0301 	and.w	r3, r3, #1
   123e0:	2b00      	cmp	r3, #0
   123e2:	d100      	bne.n	123e6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   123e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_22[u32CoreId] = msr;
   123e6:	490a      	ldr	r1, [pc, #40]	; (12410 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x54>)
   123e8:	9b01      	ldr	r3, [sp, #4]
   123ea:	9a00      	ldr	r2, [sp, #0]
   123ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]++;
   123f0:	4a06      	ldr	r2, [pc, #24]	; (1240c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
   123f2:	9b01      	ldr	r3, [sp, #4]
   123f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   123f8:	1c5a      	adds	r2, r3, #1
   123fa:	4904      	ldr	r1, [pc, #16]	; (1240c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_22+0x50>)
   123fc:	9b01      	ldr	r3, [sp, #4]
   123fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12402:	bf00      	nop
   12404:	b003      	add	sp, #12
   12406:	f85d fb04 	ldr.w	pc, [sp], #4
   1240a:	bf00      	nop
   1240c:	1fff92c8 	.word	0x1fff92c8
   12410:	1fff92c4 	.word	0x1fff92c4

00012414 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22(void)
{
   12414:	b500      	push	{lr}
   12416:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12418:	f7ef fa52 	bl	18c0 <Sys_GetCoreID>
   1241c:	4603      	mov	r3, r0
   1241e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]--;
   12420:	4a0d      	ldr	r2, [pc, #52]	; (12458 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
   12422:	9b01      	ldr	r3, [sp, #4]
   12424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12428:	1e5a      	subs	r2, r3, #1
   1242a:	490b      	ldr	r1, [pc, #44]	; (12458 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
   1242c:	9b01      	ldr	r3, [sp, #4]
   1242e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
   12432:	4a0a      	ldr	r2, [pc, #40]	; (1245c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x48>)
   12434:	9b01      	ldr	r3, [sp, #4]
   12436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1243a:	f003 0301 	and.w	r3, r3, #1
   1243e:	2b00      	cmp	r3, #0
   12440:	d106      	bne.n	12450 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
   12442:	4a05      	ldr	r2, [pc, #20]	; (12458 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x44>)
   12444:	9b01      	ldr	r3, [sp, #4]
   12446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1244a:	2b00      	cmp	r3, #0
   1244c:	d100      	bne.n	12450 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1244e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12450:	bf00      	nop
   12452:	b003      	add	sp, #12
   12454:	f85d fb04 	ldr.w	pc, [sp], #4
   12458:	1fff92c8 	.word	0x1fff92c8
   1245c:	1fff92c4 	.word	0x1fff92c4

00012460 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
   12460:	b500      	push	{lr}
   12462:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12464:	f7ef fa2c 	bl	18c0 <Sys_GetCoreID>
   12468:	4603      	mov	r3, r0
   1246a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId])
   1246c:	4a10      	ldr	r2, [pc, #64]	; (124b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
   1246e:	9b01      	ldr	r3, [sp, #4]
   12470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12474:	2b00      	cmp	r3, #0
   12476:	d10d      	bne.n	12494 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12478:	f7ee fa46 	bl	908 <Adc_schm_read_msr>
   1247c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1247e:	9b00      	ldr	r3, [sp, #0]
   12480:	f003 0301 	and.w	r3, r3, #1
   12484:	2b00      	cmp	r3, #0
   12486:	d100      	bne.n	1248a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12488:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_23[u32CoreId] = msr;
   1248a:	490a      	ldr	r1, [pc, #40]	; (124b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x54>)
   1248c:	9b01      	ldr	r3, [sp, #4]
   1248e:	9a00      	ldr	r2, [sp, #0]
   12490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]++;
   12494:	4a06      	ldr	r2, [pc, #24]	; (124b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
   12496:	9b01      	ldr	r3, [sp, #4]
   12498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1249c:	1c5a      	adds	r2, r3, #1
   1249e:	4904      	ldr	r1, [pc, #16]	; (124b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_23+0x50>)
   124a0:	9b01      	ldr	r3, [sp, #4]
   124a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   124a6:	bf00      	nop
   124a8:	b003      	add	sp, #12
   124aa:	f85d fb04 	ldr.w	pc, [sp], #4
   124ae:	bf00      	nop
   124b0:	1fff92d0 	.word	0x1fff92d0
   124b4:	1fff92cc 	.word	0x1fff92cc

000124b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23(void)
{
   124b8:	b500      	push	{lr}
   124ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   124bc:	f7ef fa00 	bl	18c0 <Sys_GetCoreID>
   124c0:	4603      	mov	r3, r0
   124c2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]--;
   124c4:	4a0d      	ldr	r2, [pc, #52]	; (124fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
   124c6:	9b01      	ldr	r3, [sp, #4]
   124c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124cc:	1e5a      	subs	r2, r3, #1
   124ce:	490b      	ldr	r1, [pc, #44]	; (124fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
   124d0:	9b01      	ldr	r3, [sp, #4]
   124d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   124d6:	4a0a      	ldr	r2, [pc, #40]	; (12500 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x48>)
   124d8:	9b01      	ldr	r3, [sp, #4]
   124da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124de:	f003 0301 	and.w	r3, r3, #1
   124e2:	2b00      	cmp	r3, #0
   124e4:	d106      	bne.n	124f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
   124e6:	4a05      	ldr	r2, [pc, #20]	; (124fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x44>)
   124e8:	9b01      	ldr	r3, [sp, #4]
   124ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   124ee:	2b00      	cmp	r3, #0
   124f0:	d100      	bne.n	124f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   124f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   124f4:	bf00      	nop
   124f6:	b003      	add	sp, #12
   124f8:	f85d fb04 	ldr.w	pc, [sp], #4
   124fc:	1fff92d0 	.word	0x1fff92d0
   12500:	1fff92cc 	.word	0x1fff92cc

00012504 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
   12504:	b500      	push	{lr}
   12506:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12508:	f7ef f9da 	bl	18c0 <Sys_GetCoreID>
   1250c:	4603      	mov	r3, r0
   1250e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId])
   12510:	4a10      	ldr	r2, [pc, #64]	; (12554 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
   12512:	9b01      	ldr	r3, [sp, #4]
   12514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12518:	2b00      	cmp	r3, #0
   1251a:	d10d      	bne.n	12538 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1251c:	f7ee f9f4 	bl	908 <Adc_schm_read_msr>
   12520:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12522:	9b00      	ldr	r3, [sp, #0]
   12524:	f003 0301 	and.w	r3, r3, #1
   12528:	2b00      	cmp	r3, #0
   1252a:	d100      	bne.n	1252e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1252c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   1252e:	490a      	ldr	r1, [pc, #40]	; (12558 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x54>)
   12530:	9b01      	ldr	r3, [sp, #4]
   12532:	9a00      	ldr	r2, [sp, #0]
   12534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]++;
   12538:	4a06      	ldr	r2, [pc, #24]	; (12554 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
   1253a:	9b01      	ldr	r3, [sp, #4]
   1253c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12540:	1c5a      	adds	r2, r3, #1
   12542:	4904      	ldr	r1, [pc, #16]	; (12554 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_24+0x50>)
   12544:	9b01      	ldr	r3, [sp, #4]
   12546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1254a:	bf00      	nop
   1254c:	b003      	add	sp, #12
   1254e:	f85d fb04 	ldr.w	pc, [sp], #4
   12552:	bf00      	nop
   12554:	1fff92d8 	.word	0x1fff92d8
   12558:	1fff92d4 	.word	0x1fff92d4

0001255c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24(void)
{
   1255c:	b500      	push	{lr}
   1255e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12560:	f7ef f9ae 	bl	18c0 <Sys_GetCoreID>
   12564:	4603      	mov	r3, r0
   12566:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]--;
   12568:	4a0d      	ldr	r2, [pc, #52]	; (125a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
   1256a:	9b01      	ldr	r3, [sp, #4]
   1256c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12570:	1e5a      	subs	r2, r3, #1
   12572:	490b      	ldr	r1, [pc, #44]	; (125a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
   12574:	9b01      	ldr	r3, [sp, #4]
   12576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   1257a:	4a0a      	ldr	r2, [pc, #40]	; (125a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x48>)
   1257c:	9b01      	ldr	r3, [sp, #4]
   1257e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12582:	f003 0301 	and.w	r3, r3, #1
   12586:	2b00      	cmp	r3, #0
   12588:	d106      	bne.n	12598 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
   1258a:	4a05      	ldr	r2, [pc, #20]	; (125a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x44>)
   1258c:	9b01      	ldr	r3, [sp, #4]
   1258e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12592:	2b00      	cmp	r3, #0
   12594:	d100      	bne.n	12598 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12596:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12598:	bf00      	nop
   1259a:	b003      	add	sp, #12
   1259c:	f85d fb04 	ldr.w	pc, [sp], #4
   125a0:	1fff92d8 	.word	0x1fff92d8
   125a4:	1fff92d4 	.word	0x1fff92d4

000125a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
   125a8:	b500      	push	{lr}
   125aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   125ac:	f7ef f988 	bl	18c0 <Sys_GetCoreID>
   125b0:	4603      	mov	r3, r0
   125b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId])
   125b4:	4a10      	ldr	r2, [pc, #64]	; (125f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
   125b6:	9b01      	ldr	r3, [sp, #4]
   125b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125bc:	2b00      	cmp	r3, #0
   125be:	d10d      	bne.n	125dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   125c0:	f7ee f9a2 	bl	908 <Adc_schm_read_msr>
   125c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   125c6:	9b00      	ldr	r3, [sp, #0]
   125c8:	f003 0301 	and.w	r3, r3, #1
   125cc:	2b00      	cmp	r3, #0
   125ce:	d100      	bne.n	125d2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   125d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   125d2:	490a      	ldr	r1, [pc, #40]	; (125fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x54>)
   125d4:	9b01      	ldr	r3, [sp, #4]
   125d6:	9a00      	ldr	r2, [sp, #0]
   125d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]++;
   125dc:	4a06      	ldr	r2, [pc, #24]	; (125f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
   125de:	9b01      	ldr	r3, [sp, #4]
   125e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   125e4:	1c5a      	adds	r2, r3, #1
   125e6:	4904      	ldr	r1, [pc, #16]	; (125f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_25+0x50>)
   125e8:	9b01      	ldr	r3, [sp, #4]
   125ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   125ee:	bf00      	nop
   125f0:	b003      	add	sp, #12
   125f2:	f85d fb04 	ldr.w	pc, [sp], #4
   125f6:	bf00      	nop
   125f8:	1fff92e0 	.word	0x1fff92e0
   125fc:	1fff92dc 	.word	0x1fff92dc

00012600 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25(void)
{
   12600:	b500      	push	{lr}
   12602:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12604:	f7ef f95c 	bl	18c0 <Sys_GetCoreID>
   12608:	4603      	mov	r3, r0
   1260a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]--;
   1260c:	4a0d      	ldr	r2, [pc, #52]	; (12644 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
   1260e:	9b01      	ldr	r3, [sp, #4]
   12610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12614:	1e5a      	subs	r2, r3, #1
   12616:	490b      	ldr	r1, [pc, #44]	; (12644 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
   12618:	9b01      	ldr	r3, [sp, #4]
   1261a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   1261e:	4a0a      	ldr	r2, [pc, #40]	; (12648 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x48>)
   12620:	9b01      	ldr	r3, [sp, #4]
   12622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12626:	f003 0301 	and.w	r3, r3, #1
   1262a:	2b00      	cmp	r3, #0
   1262c:	d106      	bne.n	1263c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
   1262e:	4a05      	ldr	r2, [pc, #20]	; (12644 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x44>)
   12630:	9b01      	ldr	r3, [sp, #4]
   12632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12636:	2b00      	cmp	r3, #0
   12638:	d100      	bne.n	1263c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1263a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1263c:	bf00      	nop
   1263e:	b003      	add	sp, #12
   12640:	f85d fb04 	ldr.w	pc, [sp], #4
   12644:	1fff92e0 	.word	0x1fff92e0
   12648:	1fff92dc 	.word	0x1fff92dc

0001264c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
   1264c:	b500      	push	{lr}
   1264e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12650:	f7ef f936 	bl	18c0 <Sys_GetCoreID>
   12654:	4603      	mov	r3, r0
   12656:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId])
   12658:	4a10      	ldr	r2, [pc, #64]	; (1269c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
   1265a:	9b01      	ldr	r3, [sp, #4]
   1265c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12660:	2b00      	cmp	r3, #0
   12662:	d10d      	bne.n	12680 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12664:	f7ee f950 	bl	908 <Adc_schm_read_msr>
   12668:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1266a:	9b00      	ldr	r3, [sp, #0]
   1266c:	f003 0301 	and.w	r3, r3, #1
   12670:	2b00      	cmp	r3, #0
   12672:	d100      	bne.n	12676 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12674:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   12676:	490a      	ldr	r1, [pc, #40]	; (126a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x54>)
   12678:	9b01      	ldr	r3, [sp, #4]
   1267a:	9a00      	ldr	r2, [sp, #0]
   1267c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]++;
   12680:	4a06      	ldr	r2, [pc, #24]	; (1269c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
   12682:	9b01      	ldr	r3, [sp, #4]
   12684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12688:	1c5a      	adds	r2, r3, #1
   1268a:	4904      	ldr	r1, [pc, #16]	; (1269c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_26+0x50>)
   1268c:	9b01      	ldr	r3, [sp, #4]
   1268e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12692:	bf00      	nop
   12694:	b003      	add	sp, #12
   12696:	f85d fb04 	ldr.w	pc, [sp], #4
   1269a:	bf00      	nop
   1269c:	1fff92e8 	.word	0x1fff92e8
   126a0:	1fff92e4 	.word	0x1fff92e4

000126a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26(void)
{
   126a4:	b500      	push	{lr}
   126a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   126a8:	f7ef f90a 	bl	18c0 <Sys_GetCoreID>
   126ac:	4603      	mov	r3, r0
   126ae:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]--;
   126b0:	4a0d      	ldr	r2, [pc, #52]	; (126e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
   126b2:	9b01      	ldr	r3, [sp, #4]
   126b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126b8:	1e5a      	subs	r2, r3, #1
   126ba:	490b      	ldr	r1, [pc, #44]	; (126e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
   126bc:	9b01      	ldr	r3, [sp, #4]
   126be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   126c2:	4a0a      	ldr	r2, [pc, #40]	; (126ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x48>)
   126c4:	9b01      	ldr	r3, [sp, #4]
   126c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126ca:	f003 0301 	and.w	r3, r3, #1
   126ce:	2b00      	cmp	r3, #0
   126d0:	d106      	bne.n	126e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
   126d2:	4a05      	ldr	r2, [pc, #20]	; (126e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x44>)
   126d4:	9b01      	ldr	r3, [sp, #4]
   126d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   126da:	2b00      	cmp	r3, #0
   126dc:	d100      	bne.n	126e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   126de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   126e0:	bf00      	nop
   126e2:	b003      	add	sp, #12
   126e4:	f85d fb04 	ldr.w	pc, [sp], #4
   126e8:	1fff92e8 	.word	0x1fff92e8
   126ec:	1fff92e4 	.word	0x1fff92e4

000126f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
   126f0:	b500      	push	{lr}
   126f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   126f4:	f7ef f8e4 	bl	18c0 <Sys_GetCoreID>
   126f8:	4603      	mov	r3, r0
   126fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId])
   126fc:	4a10      	ldr	r2, [pc, #64]	; (12740 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
   126fe:	9b01      	ldr	r3, [sp, #4]
   12700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12704:	2b00      	cmp	r3, #0
   12706:	d10d      	bne.n	12724 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12708:	f7ee f8fe 	bl	908 <Adc_schm_read_msr>
   1270c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1270e:	9b00      	ldr	r3, [sp, #0]
   12710:	f003 0301 	and.w	r3, r3, #1
   12714:	2b00      	cmp	r3, #0
   12716:	d100      	bne.n	1271a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12718:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   1271a:	490a      	ldr	r1, [pc, #40]	; (12744 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x54>)
   1271c:	9b01      	ldr	r3, [sp, #4]
   1271e:	9a00      	ldr	r2, [sp, #0]
   12720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]++;
   12724:	4a06      	ldr	r2, [pc, #24]	; (12740 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
   12726:	9b01      	ldr	r3, [sp, #4]
   12728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1272c:	1c5a      	adds	r2, r3, #1
   1272e:	4904      	ldr	r1, [pc, #16]	; (12740 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_27+0x50>)
   12730:	9b01      	ldr	r3, [sp, #4]
   12732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12736:	bf00      	nop
   12738:	b003      	add	sp, #12
   1273a:	f85d fb04 	ldr.w	pc, [sp], #4
   1273e:	bf00      	nop
   12740:	1fff92f0 	.word	0x1fff92f0
   12744:	1fff92ec 	.word	0x1fff92ec

00012748 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27(void)
{
   12748:	b500      	push	{lr}
   1274a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1274c:	f7ef f8b8 	bl	18c0 <Sys_GetCoreID>
   12750:	4603      	mov	r3, r0
   12752:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]--;
   12754:	4a0d      	ldr	r2, [pc, #52]	; (1278c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   12756:	9b01      	ldr	r3, [sp, #4]
   12758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1275c:	1e5a      	subs	r2, r3, #1
   1275e:	490b      	ldr	r1, [pc, #44]	; (1278c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   12760:	9b01      	ldr	r3, [sp, #4]
   12762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   12766:	4a0a      	ldr	r2, [pc, #40]	; (12790 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x48>)
   12768:	9b01      	ldr	r3, [sp, #4]
   1276a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1276e:	f003 0301 	and.w	r3, r3, #1
   12772:	2b00      	cmp	r3, #0
   12774:	d106      	bne.n	12784 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
   12776:	4a05      	ldr	r2, [pc, #20]	; (1278c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x44>)
   12778:	9b01      	ldr	r3, [sp, #4]
   1277a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1277e:	2b00      	cmp	r3, #0
   12780:	d100      	bne.n	12784 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12782:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12784:	bf00      	nop
   12786:	b003      	add	sp, #12
   12788:	f85d fb04 	ldr.w	pc, [sp], #4
   1278c:	1fff92f0 	.word	0x1fff92f0
   12790:	1fff92ec 	.word	0x1fff92ec

00012794 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
   12794:	b500      	push	{lr}
   12796:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12798:	f7ef f892 	bl	18c0 <Sys_GetCoreID>
   1279c:	4603      	mov	r3, r0
   1279e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId])
   127a0:	4a10      	ldr	r2, [pc, #64]	; (127e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   127a2:	9b01      	ldr	r3, [sp, #4]
   127a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127a8:	2b00      	cmp	r3, #0
   127aa:	d10d      	bne.n	127c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   127ac:	f7ee f8ac 	bl	908 <Adc_schm_read_msr>
   127b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   127b2:	9b00      	ldr	r3, [sp, #0]
   127b4:	f003 0301 	and.w	r3, r3, #1
   127b8:	2b00      	cmp	r3, #0
   127ba:	d100      	bne.n	127be <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   127bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_28[u32CoreId] = msr;
   127be:	490a      	ldr	r1, [pc, #40]	; (127e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x54>)
   127c0:	9b01      	ldr	r3, [sp, #4]
   127c2:	9a00      	ldr	r2, [sp, #0]
   127c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]++;
   127c8:	4a06      	ldr	r2, [pc, #24]	; (127e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   127ca:	9b01      	ldr	r3, [sp, #4]
   127cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   127d0:	1c5a      	adds	r2, r3, #1
   127d2:	4904      	ldr	r1, [pc, #16]	; (127e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_28+0x50>)
   127d4:	9b01      	ldr	r3, [sp, #4]
   127d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   127da:	bf00      	nop
   127dc:	b003      	add	sp, #12
   127de:	f85d fb04 	ldr.w	pc, [sp], #4
   127e2:	bf00      	nop
   127e4:	1fff92f8 	.word	0x1fff92f8
   127e8:	1fff92f4 	.word	0x1fff92f4

000127ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28(void)
{
   127ec:	b500      	push	{lr}
   127ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   127f0:	f7ef f866 	bl	18c0 <Sys_GetCoreID>
   127f4:	4603      	mov	r3, r0
   127f6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]--;
   127f8:	4a0d      	ldr	r2, [pc, #52]	; (12830 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   127fa:	9b01      	ldr	r3, [sp, #4]
   127fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12800:	1e5a      	subs	r2, r3, #1
   12802:	490b      	ldr	r1, [pc, #44]	; (12830 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   12804:	9b01      	ldr	r3, [sp, #4]
   12806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_28[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_28[u32CoreId]))         /*if interrupts were enabled*/
   1280a:	4a0a      	ldr	r2, [pc, #40]	; (12834 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x48>)
   1280c:	9b01      	ldr	r3, [sp, #4]
   1280e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12812:	f003 0301 	and.w	r3, r3, #1
   12816:	2b00      	cmp	r3, #0
   12818:	d106      	bne.n	12828 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
   1281a:	4a05      	ldr	r2, [pc, #20]	; (12830 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x44>)
   1281c:	9b01      	ldr	r3, [sp, #4]
   1281e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12822:	2b00      	cmp	r3, #0
   12824:	d100      	bne.n	12828 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_28+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12826:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12828:	bf00      	nop
   1282a:	b003      	add	sp, #12
   1282c:	f85d fb04 	ldr.w	pc, [sp], #4
   12830:	1fff92f8 	.word	0x1fff92f8
   12834:	1fff92f4 	.word	0x1fff92f4

00012838 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
   12838:	b500      	push	{lr}
   1283a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1283c:	f7ef f840 	bl	18c0 <Sys_GetCoreID>
   12840:	4603      	mov	r3, r0
   12842:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId])
   12844:	4a10      	ldr	r2, [pc, #64]	; (12888 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   12846:	9b01      	ldr	r3, [sp, #4]
   12848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1284c:	2b00      	cmp	r3, #0
   1284e:	d10d      	bne.n	1286c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12850:	f7ee f85a 	bl	908 <Adc_schm_read_msr>
   12854:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12856:	9b00      	ldr	r3, [sp, #0]
   12858:	f003 0301 	and.w	r3, r3, #1
   1285c:	2b00      	cmp	r3, #0
   1285e:	d100      	bne.n	12862 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12860:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_29[u32CoreId] = msr;
   12862:	490a      	ldr	r1, [pc, #40]	; (1288c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x54>)
   12864:	9b01      	ldr	r3, [sp, #4]
   12866:	9a00      	ldr	r2, [sp, #0]
   12868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]++;
   1286c:	4a06      	ldr	r2, [pc, #24]	; (12888 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   1286e:	9b01      	ldr	r3, [sp, #4]
   12870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12874:	1c5a      	adds	r2, r3, #1
   12876:	4904      	ldr	r1, [pc, #16]	; (12888 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_29+0x50>)
   12878:	9b01      	ldr	r3, [sp, #4]
   1287a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1287e:	bf00      	nop
   12880:	b003      	add	sp, #12
   12882:	f85d fb04 	ldr.w	pc, [sp], #4
   12886:	bf00      	nop
   12888:	1fff9300 	.word	0x1fff9300
   1288c:	1fff92fc 	.word	0x1fff92fc

00012890 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29(void)
{
   12890:	b500      	push	{lr}
   12892:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12894:	f7ef f814 	bl	18c0 <Sys_GetCoreID>
   12898:	4603      	mov	r3, r0
   1289a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]--;
   1289c:	4a0d      	ldr	r2, [pc, #52]	; (128d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   1289e:	9b01      	ldr	r3, [sp, #4]
   128a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128a4:	1e5a      	subs	r2, r3, #1
   128a6:	490b      	ldr	r1, [pc, #44]	; (128d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   128a8:	9b01      	ldr	r3, [sp, #4]
   128aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
   128ae:	4a0a      	ldr	r2, [pc, #40]	; (128d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x48>)
   128b0:	9b01      	ldr	r3, [sp, #4]
   128b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128b6:	f003 0301 	and.w	r3, r3, #1
   128ba:	2b00      	cmp	r3, #0
   128bc:	d106      	bne.n	128cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
   128be:	4a05      	ldr	r2, [pc, #20]	; (128d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x44>)
   128c0:	9b01      	ldr	r3, [sp, #4]
   128c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128c6:	2b00      	cmp	r3, #0
   128c8:	d100      	bne.n	128cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   128ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   128cc:	bf00      	nop
   128ce:	b003      	add	sp, #12
   128d0:	f85d fb04 	ldr.w	pc, [sp], #4
   128d4:	1fff9300 	.word	0x1fff9300
   128d8:	1fff92fc 	.word	0x1fff92fc

000128dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
   128dc:	b500      	push	{lr}
   128de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   128e0:	f7ee ffee 	bl	18c0 <Sys_GetCoreID>
   128e4:	4603      	mov	r3, r0
   128e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId])
   128e8:	4a10      	ldr	r2, [pc, #64]	; (1292c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   128ea:	9b01      	ldr	r3, [sp, #4]
   128ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   128f0:	2b00      	cmp	r3, #0
   128f2:	d10d      	bne.n	12910 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   128f4:	f7ee f808 	bl	908 <Adc_schm_read_msr>
   128f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   128fa:	9b00      	ldr	r3, [sp, #0]
   128fc:	f003 0301 	and.w	r3, r3, #1
   12900:	2b00      	cmp	r3, #0
   12902:	d100      	bne.n	12906 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12904:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_30[u32CoreId] = msr;
   12906:	490a      	ldr	r1, [pc, #40]	; (12930 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x54>)
   12908:	9b01      	ldr	r3, [sp, #4]
   1290a:	9a00      	ldr	r2, [sp, #0]
   1290c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]++;
   12910:	4a06      	ldr	r2, [pc, #24]	; (1292c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   12912:	9b01      	ldr	r3, [sp, #4]
   12914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12918:	1c5a      	adds	r2, r3, #1
   1291a:	4904      	ldr	r1, [pc, #16]	; (1292c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_30+0x50>)
   1291c:	9b01      	ldr	r3, [sp, #4]
   1291e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12922:	bf00      	nop
   12924:	b003      	add	sp, #12
   12926:	f85d fb04 	ldr.w	pc, [sp], #4
   1292a:	bf00      	nop
   1292c:	1fff9308 	.word	0x1fff9308
   12930:	1fff9304 	.word	0x1fff9304

00012934 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30(void)
{
   12934:	b500      	push	{lr}
   12936:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12938:	f7ee ffc2 	bl	18c0 <Sys_GetCoreID>
   1293c:	4603      	mov	r3, r0
   1293e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]--;
   12940:	4a0d      	ldr	r2, [pc, #52]	; (12978 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   12942:	9b01      	ldr	r3, [sp, #4]
   12944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12948:	1e5a      	subs	r2, r3, #1
   1294a:	490b      	ldr	r1, [pc, #44]	; (12978 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   1294c:	9b01      	ldr	r3, [sp, #4]
   1294e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
   12952:	4a0a      	ldr	r2, [pc, #40]	; (1297c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x48>)
   12954:	9b01      	ldr	r3, [sp, #4]
   12956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1295a:	f003 0301 	and.w	r3, r3, #1
   1295e:	2b00      	cmp	r3, #0
   12960:	d106      	bne.n	12970 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
   12962:	4a05      	ldr	r2, [pc, #20]	; (12978 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x44>)
   12964:	9b01      	ldr	r3, [sp, #4]
   12966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1296a:	2b00      	cmp	r3, #0
   1296c:	d100      	bne.n	12970 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1296e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12970:	bf00      	nop
   12972:	b003      	add	sp, #12
   12974:	f85d fb04 	ldr.w	pc, [sp], #4
   12978:	1fff9308 	.word	0x1fff9308
   1297c:	1fff9304 	.word	0x1fff9304

00012980 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
   12980:	b500      	push	{lr}
   12982:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12984:	f7ee ff9c 	bl	18c0 <Sys_GetCoreID>
   12988:	4603      	mov	r3, r0
   1298a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId])
   1298c:	4a10      	ldr	r2, [pc, #64]	; (129d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   1298e:	9b01      	ldr	r3, [sp, #4]
   12990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12994:	2b00      	cmp	r3, #0
   12996:	d10d      	bne.n	129b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12998:	f7ed ffb6 	bl	908 <Adc_schm_read_msr>
   1299c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1299e:	9b00      	ldr	r3, [sp, #0]
   129a0:	f003 0301 	and.w	r3, r3, #1
   129a4:	2b00      	cmp	r3, #0
   129a6:	d100      	bne.n	129aa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   129a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_31[u32CoreId] = msr;
   129aa:	490a      	ldr	r1, [pc, #40]	; (129d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x54>)
   129ac:	9b01      	ldr	r3, [sp, #4]
   129ae:	9a00      	ldr	r2, [sp, #0]
   129b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]++;
   129b4:	4a06      	ldr	r2, [pc, #24]	; (129d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   129b6:	9b01      	ldr	r3, [sp, #4]
   129b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129bc:	1c5a      	adds	r2, r3, #1
   129be:	4904      	ldr	r1, [pc, #16]	; (129d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_31+0x50>)
   129c0:	9b01      	ldr	r3, [sp, #4]
   129c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   129c6:	bf00      	nop
   129c8:	b003      	add	sp, #12
   129ca:	f85d fb04 	ldr.w	pc, [sp], #4
   129ce:	bf00      	nop
   129d0:	1fff9310 	.word	0x1fff9310
   129d4:	1fff930c 	.word	0x1fff930c

000129d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31(void)
{
   129d8:	b500      	push	{lr}
   129da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   129dc:	f7ee ff70 	bl	18c0 <Sys_GetCoreID>
   129e0:	4603      	mov	r3, r0
   129e2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]--;
   129e4:	4a0d      	ldr	r2, [pc, #52]	; (12a1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   129e6:	9b01      	ldr	r3, [sp, #4]
   129e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129ec:	1e5a      	subs	r2, r3, #1
   129ee:	490b      	ldr	r1, [pc, #44]	; (12a1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   129f0:	9b01      	ldr	r3, [sp, #4]
   129f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
   129f6:	4a0a      	ldr	r2, [pc, #40]	; (12a20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x48>)
   129f8:	9b01      	ldr	r3, [sp, #4]
   129fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   129fe:	f003 0301 	and.w	r3, r3, #1
   12a02:	2b00      	cmp	r3, #0
   12a04:	d106      	bne.n	12a14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
   12a06:	4a05      	ldr	r2, [pc, #20]	; (12a1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x44>)
   12a08:	9b01      	ldr	r3, [sp, #4]
   12a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a0e:	2b00      	cmp	r3, #0
   12a10:	d100      	bne.n	12a14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12a12:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12a14:	bf00      	nop
   12a16:	b003      	add	sp, #12
   12a18:	f85d fb04 	ldr.w	pc, [sp], #4
   12a1c:	1fff9310 	.word	0x1fff9310
   12a20:	1fff930c 	.word	0x1fff930c

00012a24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
   12a24:	b500      	push	{lr}
   12a26:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12a28:	f7ee ff4a 	bl	18c0 <Sys_GetCoreID>
   12a2c:	4603      	mov	r3, r0
   12a2e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId])
   12a30:	4a10      	ldr	r2, [pc, #64]	; (12a74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   12a32:	9b01      	ldr	r3, [sp, #4]
   12a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a38:	2b00      	cmp	r3, #0
   12a3a:	d10d      	bne.n	12a58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12a3c:	f7ed ff64 	bl	908 <Adc_schm_read_msr>
   12a40:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12a42:	9b00      	ldr	r3, [sp, #0]
   12a44:	f003 0301 	and.w	r3, r3, #1
   12a48:	2b00      	cmp	r3, #0
   12a4a:	d100      	bne.n	12a4e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12a4c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_32[u32CoreId] = msr;
   12a4e:	490a      	ldr	r1, [pc, #40]	; (12a78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x54>)
   12a50:	9b01      	ldr	r3, [sp, #4]
   12a52:	9a00      	ldr	r2, [sp, #0]
   12a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]++;
   12a58:	4a06      	ldr	r2, [pc, #24]	; (12a74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   12a5a:	9b01      	ldr	r3, [sp, #4]
   12a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a60:	1c5a      	adds	r2, r3, #1
   12a62:	4904      	ldr	r1, [pc, #16]	; (12a74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_32+0x50>)
   12a64:	9b01      	ldr	r3, [sp, #4]
   12a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12a6a:	bf00      	nop
   12a6c:	b003      	add	sp, #12
   12a6e:	f85d fb04 	ldr.w	pc, [sp], #4
   12a72:	bf00      	nop
   12a74:	1fff9318 	.word	0x1fff9318
   12a78:	1fff9314 	.word	0x1fff9314

00012a7c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32(void)
{
   12a7c:	b500      	push	{lr}
   12a7e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12a80:	f7ee ff1e 	bl	18c0 <Sys_GetCoreID>
   12a84:	4603      	mov	r3, r0
   12a86:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]--;
   12a88:	4a0d      	ldr	r2, [pc, #52]	; (12ac0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   12a8a:	9b01      	ldr	r3, [sp, #4]
   12a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12a90:	1e5a      	subs	r2, r3, #1
   12a92:	490b      	ldr	r1, [pc, #44]	; (12ac0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   12a94:	9b01      	ldr	r3, [sp, #4]
   12a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_32[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_32[u32CoreId]))         /*if interrupts were enabled*/
   12a9a:	4a0a      	ldr	r2, [pc, #40]	; (12ac4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x48>)
   12a9c:	9b01      	ldr	r3, [sp, #4]
   12a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12aa2:	f003 0301 	and.w	r3, r3, #1
   12aa6:	2b00      	cmp	r3, #0
   12aa8:	d106      	bne.n	12ab8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
   12aaa:	4a05      	ldr	r2, [pc, #20]	; (12ac0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x44>)
   12aac:	9b01      	ldr	r3, [sp, #4]
   12aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ab2:	2b00      	cmp	r3, #0
   12ab4:	d100      	bne.n	12ab8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_32+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12ab6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12ab8:	bf00      	nop
   12aba:	b003      	add	sp, #12
   12abc:	f85d fb04 	ldr.w	pc, [sp], #4
   12ac0:	1fff9318 	.word	0x1fff9318
   12ac4:	1fff9314 	.word	0x1fff9314

00012ac8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
   12ac8:	b500      	push	{lr}
   12aca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12acc:	f7ee fef8 	bl	18c0 <Sys_GetCoreID>
   12ad0:	4603      	mov	r3, r0
   12ad2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId])
   12ad4:	4a10      	ldr	r2, [pc, #64]	; (12b18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   12ad6:	9b01      	ldr	r3, [sp, #4]
   12ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12adc:	2b00      	cmp	r3, #0
   12ade:	d10d      	bne.n	12afc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12ae0:	f7ed ff12 	bl	908 <Adc_schm_read_msr>
   12ae4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12ae6:	9b00      	ldr	r3, [sp, #0]
   12ae8:	f003 0301 	and.w	r3, r3, #1
   12aec:	2b00      	cmp	r3, #0
   12aee:	d100      	bne.n	12af2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12af0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_33[u32CoreId] = msr;
   12af2:	490a      	ldr	r1, [pc, #40]	; (12b1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x54>)
   12af4:	9b01      	ldr	r3, [sp, #4]
   12af6:	9a00      	ldr	r2, [sp, #0]
   12af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]++;
   12afc:	4a06      	ldr	r2, [pc, #24]	; (12b18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   12afe:	9b01      	ldr	r3, [sp, #4]
   12b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b04:	1c5a      	adds	r2, r3, #1
   12b06:	4904      	ldr	r1, [pc, #16]	; (12b18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_33+0x50>)
   12b08:	9b01      	ldr	r3, [sp, #4]
   12b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12b0e:	bf00      	nop
   12b10:	b003      	add	sp, #12
   12b12:	f85d fb04 	ldr.w	pc, [sp], #4
   12b16:	bf00      	nop
   12b18:	1fff9320 	.word	0x1fff9320
   12b1c:	1fff931c 	.word	0x1fff931c

00012b20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33(void)
{
   12b20:	b500      	push	{lr}
   12b22:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12b24:	f7ee fecc 	bl	18c0 <Sys_GetCoreID>
   12b28:	4603      	mov	r3, r0
   12b2a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]--;
   12b2c:	4a0d      	ldr	r2, [pc, #52]	; (12b64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   12b2e:	9b01      	ldr	r3, [sp, #4]
   12b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b34:	1e5a      	subs	r2, r3, #1
   12b36:	490b      	ldr	r1, [pc, #44]	; (12b64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   12b38:	9b01      	ldr	r3, [sp, #4]
   12b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_33[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_33[u32CoreId]))         /*if interrupts were enabled*/
   12b3e:	4a0a      	ldr	r2, [pc, #40]	; (12b68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x48>)
   12b40:	9b01      	ldr	r3, [sp, #4]
   12b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b46:	f003 0301 	and.w	r3, r3, #1
   12b4a:	2b00      	cmp	r3, #0
   12b4c:	d106      	bne.n	12b5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
   12b4e:	4a05      	ldr	r2, [pc, #20]	; (12b64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x44>)
   12b50:	9b01      	ldr	r3, [sp, #4]
   12b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b56:	2b00      	cmp	r3, #0
   12b58:	d100      	bne.n	12b5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_33+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12b5a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12b5c:	bf00      	nop
   12b5e:	b003      	add	sp, #12
   12b60:	f85d fb04 	ldr.w	pc, [sp], #4
   12b64:	1fff9320 	.word	0x1fff9320
   12b68:	1fff931c 	.word	0x1fff931c

00012b6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
   12b6c:	b500      	push	{lr}
   12b6e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12b70:	f7ee fea6 	bl	18c0 <Sys_GetCoreID>
   12b74:	4603      	mov	r3, r0
   12b76:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId])
   12b78:	4a10      	ldr	r2, [pc, #64]	; (12bbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   12b7a:	9b01      	ldr	r3, [sp, #4]
   12b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12b80:	2b00      	cmp	r3, #0
   12b82:	d10d      	bne.n	12ba0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12b84:	f7ed fec0 	bl	908 <Adc_schm_read_msr>
   12b88:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12b8a:	9b00      	ldr	r3, [sp, #0]
   12b8c:	f003 0301 	and.w	r3, r3, #1
   12b90:	2b00      	cmp	r3, #0
   12b92:	d100      	bne.n	12b96 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12b94:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_34[u32CoreId] = msr;
   12b96:	490a      	ldr	r1, [pc, #40]	; (12bc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x54>)
   12b98:	9b01      	ldr	r3, [sp, #4]
   12b9a:	9a00      	ldr	r2, [sp, #0]
   12b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]++;
   12ba0:	4a06      	ldr	r2, [pc, #24]	; (12bbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   12ba2:	9b01      	ldr	r3, [sp, #4]
   12ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ba8:	1c5a      	adds	r2, r3, #1
   12baa:	4904      	ldr	r1, [pc, #16]	; (12bbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_34+0x50>)
   12bac:	9b01      	ldr	r3, [sp, #4]
   12bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12bb2:	bf00      	nop
   12bb4:	b003      	add	sp, #12
   12bb6:	f85d fb04 	ldr.w	pc, [sp], #4
   12bba:	bf00      	nop
   12bbc:	1fff9328 	.word	0x1fff9328
   12bc0:	1fff9324 	.word	0x1fff9324

00012bc4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34(void)
{
   12bc4:	b500      	push	{lr}
   12bc6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12bc8:	f7ee fe7a 	bl	18c0 <Sys_GetCoreID>
   12bcc:	4603      	mov	r3, r0
   12bce:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]--;
   12bd0:	4a0d      	ldr	r2, [pc, #52]	; (12c08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   12bd2:	9b01      	ldr	r3, [sp, #4]
   12bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bd8:	1e5a      	subs	r2, r3, #1
   12bda:	490b      	ldr	r1, [pc, #44]	; (12c08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   12bdc:	9b01      	ldr	r3, [sp, #4]
   12bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_34[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_34[u32CoreId]))         /*if interrupts were enabled*/
   12be2:	4a0a      	ldr	r2, [pc, #40]	; (12c0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x48>)
   12be4:	9b01      	ldr	r3, [sp, #4]
   12be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bea:	f003 0301 	and.w	r3, r3, #1
   12bee:	2b00      	cmp	r3, #0
   12bf0:	d106      	bne.n	12c00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
   12bf2:	4a05      	ldr	r2, [pc, #20]	; (12c08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x44>)
   12bf4:	9b01      	ldr	r3, [sp, #4]
   12bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12bfa:	2b00      	cmp	r3, #0
   12bfc:	d100      	bne.n	12c00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_34+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12bfe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12c00:	bf00      	nop
   12c02:	b003      	add	sp, #12
   12c04:	f85d fb04 	ldr.w	pc, [sp], #4
   12c08:	1fff9328 	.word	0x1fff9328
   12c0c:	1fff9324 	.word	0x1fff9324

00012c10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
   12c10:	b500      	push	{lr}
   12c12:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12c14:	f7ee fe54 	bl	18c0 <Sys_GetCoreID>
   12c18:	4603      	mov	r3, r0
   12c1a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId])
   12c1c:	4a10      	ldr	r2, [pc, #64]	; (12c60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   12c1e:	9b01      	ldr	r3, [sp, #4]
   12c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c24:	2b00      	cmp	r3, #0
   12c26:	d10d      	bne.n	12c44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12c28:	f7ed fe6e 	bl	908 <Adc_schm_read_msr>
   12c2c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12c2e:	9b00      	ldr	r3, [sp, #0]
   12c30:	f003 0301 	and.w	r3, r3, #1
   12c34:	2b00      	cmp	r3, #0
   12c36:	d100      	bne.n	12c3a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12c38:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_35[u32CoreId] = msr;
   12c3a:	490a      	ldr	r1, [pc, #40]	; (12c64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x54>)
   12c3c:	9b01      	ldr	r3, [sp, #4]
   12c3e:	9a00      	ldr	r2, [sp, #0]
   12c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]++;
   12c44:	4a06      	ldr	r2, [pc, #24]	; (12c60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   12c46:	9b01      	ldr	r3, [sp, #4]
   12c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c4c:	1c5a      	adds	r2, r3, #1
   12c4e:	4904      	ldr	r1, [pc, #16]	; (12c60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_35+0x50>)
   12c50:	9b01      	ldr	r3, [sp, #4]
   12c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12c56:	bf00      	nop
   12c58:	b003      	add	sp, #12
   12c5a:	f85d fb04 	ldr.w	pc, [sp], #4
   12c5e:	bf00      	nop
   12c60:	1fff9330 	.word	0x1fff9330
   12c64:	1fff932c 	.word	0x1fff932c

00012c68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35(void)
{
   12c68:	b500      	push	{lr}
   12c6a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12c6c:	f7ee fe28 	bl	18c0 <Sys_GetCoreID>
   12c70:	4603      	mov	r3, r0
   12c72:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]--;
   12c74:	4a0d      	ldr	r2, [pc, #52]	; (12cac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   12c76:	9b01      	ldr	r3, [sp, #4]
   12c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c7c:	1e5a      	subs	r2, r3, #1
   12c7e:	490b      	ldr	r1, [pc, #44]	; (12cac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   12c80:	9b01      	ldr	r3, [sp, #4]
   12c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_35[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_35[u32CoreId]))         /*if interrupts were enabled*/
   12c86:	4a0a      	ldr	r2, [pc, #40]	; (12cb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x48>)
   12c88:	9b01      	ldr	r3, [sp, #4]
   12c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c8e:	f003 0301 	and.w	r3, r3, #1
   12c92:	2b00      	cmp	r3, #0
   12c94:	d106      	bne.n	12ca4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
   12c96:	4a05      	ldr	r2, [pc, #20]	; (12cac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x44>)
   12c98:	9b01      	ldr	r3, [sp, #4]
   12c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12c9e:	2b00      	cmp	r3, #0
   12ca0:	d100      	bne.n	12ca4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_35+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12ca2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12ca4:	bf00      	nop
   12ca6:	b003      	add	sp, #12
   12ca8:	f85d fb04 	ldr.w	pc, [sp], #4
   12cac:	1fff9330 	.word	0x1fff9330
   12cb0:	1fff932c 	.word	0x1fff932c

00012cb4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
   12cb4:	b500      	push	{lr}
   12cb6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12cb8:	f7ee fe02 	bl	18c0 <Sys_GetCoreID>
   12cbc:	4603      	mov	r3, r0
   12cbe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId])
   12cc0:	4a10      	ldr	r2, [pc, #64]	; (12d04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   12cc2:	9b01      	ldr	r3, [sp, #4]
   12cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12cc8:	2b00      	cmp	r3, #0
   12cca:	d10d      	bne.n	12ce8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12ccc:	f7ed fe1c 	bl	908 <Adc_schm_read_msr>
   12cd0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12cd2:	9b00      	ldr	r3, [sp, #0]
   12cd4:	f003 0301 	and.w	r3, r3, #1
   12cd8:	2b00      	cmp	r3, #0
   12cda:	d100      	bne.n	12cde <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12cdc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_36[u32CoreId] = msr;
   12cde:	490a      	ldr	r1, [pc, #40]	; (12d08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x54>)
   12ce0:	9b01      	ldr	r3, [sp, #4]
   12ce2:	9a00      	ldr	r2, [sp, #0]
   12ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]++;
   12ce8:	4a06      	ldr	r2, [pc, #24]	; (12d04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   12cea:	9b01      	ldr	r3, [sp, #4]
   12cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12cf0:	1c5a      	adds	r2, r3, #1
   12cf2:	4904      	ldr	r1, [pc, #16]	; (12d04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_36+0x50>)
   12cf4:	9b01      	ldr	r3, [sp, #4]
   12cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12cfa:	bf00      	nop
   12cfc:	b003      	add	sp, #12
   12cfe:	f85d fb04 	ldr.w	pc, [sp], #4
   12d02:	bf00      	nop
   12d04:	1fff9338 	.word	0x1fff9338
   12d08:	1fff9334 	.word	0x1fff9334

00012d0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36(void)
{
   12d0c:	b500      	push	{lr}
   12d0e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12d10:	f7ee fdd6 	bl	18c0 <Sys_GetCoreID>
   12d14:	4603      	mov	r3, r0
   12d16:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]--;
   12d18:	4a0d      	ldr	r2, [pc, #52]	; (12d50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   12d1a:	9b01      	ldr	r3, [sp, #4]
   12d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d20:	1e5a      	subs	r2, r3, #1
   12d22:	490b      	ldr	r1, [pc, #44]	; (12d50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   12d24:	9b01      	ldr	r3, [sp, #4]
   12d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_36[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_36[u32CoreId]))         /*if interrupts were enabled*/
   12d2a:	4a0a      	ldr	r2, [pc, #40]	; (12d54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x48>)
   12d2c:	9b01      	ldr	r3, [sp, #4]
   12d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d32:	f003 0301 	and.w	r3, r3, #1
   12d36:	2b00      	cmp	r3, #0
   12d38:	d106      	bne.n	12d48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
   12d3a:	4a05      	ldr	r2, [pc, #20]	; (12d50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x44>)
   12d3c:	9b01      	ldr	r3, [sp, #4]
   12d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d42:	2b00      	cmp	r3, #0
   12d44:	d100      	bne.n	12d48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_36+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12d46:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12d48:	bf00      	nop
   12d4a:	b003      	add	sp, #12
   12d4c:	f85d fb04 	ldr.w	pc, [sp], #4
   12d50:	1fff9338 	.word	0x1fff9338
   12d54:	1fff9334 	.word	0x1fff9334

00012d58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
   12d58:	b500      	push	{lr}
   12d5a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12d5c:	f7ee fdb0 	bl	18c0 <Sys_GetCoreID>
   12d60:	4603      	mov	r3, r0
   12d62:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId])
   12d64:	4a10      	ldr	r2, [pc, #64]	; (12da8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   12d66:	9b01      	ldr	r3, [sp, #4]
   12d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d6c:	2b00      	cmp	r3, #0
   12d6e:	d10d      	bne.n	12d8c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12d70:	f7ed fdca 	bl	908 <Adc_schm_read_msr>
   12d74:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12d76:	9b00      	ldr	r3, [sp, #0]
   12d78:	f003 0301 	and.w	r3, r3, #1
   12d7c:	2b00      	cmp	r3, #0
   12d7e:	d100      	bne.n	12d82 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12d80:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_37[u32CoreId] = msr;
   12d82:	490a      	ldr	r1, [pc, #40]	; (12dac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x54>)
   12d84:	9b01      	ldr	r3, [sp, #4]
   12d86:	9a00      	ldr	r2, [sp, #0]
   12d88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]++;
   12d8c:	4a06      	ldr	r2, [pc, #24]	; (12da8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   12d8e:	9b01      	ldr	r3, [sp, #4]
   12d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12d94:	1c5a      	adds	r2, r3, #1
   12d96:	4904      	ldr	r1, [pc, #16]	; (12da8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_37+0x50>)
   12d98:	9b01      	ldr	r3, [sp, #4]
   12d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12d9e:	bf00      	nop
   12da0:	b003      	add	sp, #12
   12da2:	f85d fb04 	ldr.w	pc, [sp], #4
   12da6:	bf00      	nop
   12da8:	1fff9340 	.word	0x1fff9340
   12dac:	1fff933c 	.word	0x1fff933c

00012db0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37(void)
{
   12db0:	b500      	push	{lr}
   12db2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12db4:	f7ee fd84 	bl	18c0 <Sys_GetCoreID>
   12db8:	4603      	mov	r3, r0
   12dba:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]--;
   12dbc:	4a0d      	ldr	r2, [pc, #52]	; (12df4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   12dbe:	9b01      	ldr	r3, [sp, #4]
   12dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12dc4:	1e5a      	subs	r2, r3, #1
   12dc6:	490b      	ldr	r1, [pc, #44]	; (12df4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   12dc8:	9b01      	ldr	r3, [sp, #4]
   12dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_37[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_37[u32CoreId]))         /*if interrupts were enabled*/
   12dce:	4a0a      	ldr	r2, [pc, #40]	; (12df8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x48>)
   12dd0:	9b01      	ldr	r3, [sp, #4]
   12dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12dd6:	f003 0301 	and.w	r3, r3, #1
   12dda:	2b00      	cmp	r3, #0
   12ddc:	d106      	bne.n	12dec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
   12dde:	4a05      	ldr	r2, [pc, #20]	; (12df4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x44>)
   12de0:	9b01      	ldr	r3, [sp, #4]
   12de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12de6:	2b00      	cmp	r3, #0
   12de8:	d100      	bne.n	12dec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_37+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12dea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12dec:	bf00      	nop
   12dee:	b003      	add	sp, #12
   12df0:	f85d fb04 	ldr.w	pc, [sp], #4
   12df4:	1fff9340 	.word	0x1fff9340
   12df8:	1fff933c 	.word	0x1fff933c

00012dfc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
   12dfc:	b500      	push	{lr}
   12dfe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12e00:	f7ee fd5e 	bl	18c0 <Sys_GetCoreID>
   12e04:	4603      	mov	r3, r0
   12e06:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId])
   12e08:	4a10      	ldr	r2, [pc, #64]	; (12e4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   12e0a:	9b01      	ldr	r3, [sp, #4]
   12e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e10:	2b00      	cmp	r3, #0
   12e12:	d10d      	bne.n	12e30 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12e14:	f7ed fd78 	bl	908 <Adc_schm_read_msr>
   12e18:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12e1a:	9b00      	ldr	r3, [sp, #0]
   12e1c:	f003 0301 	and.w	r3, r3, #1
   12e20:	2b00      	cmp	r3, #0
   12e22:	d100      	bne.n	12e26 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12e24:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_38[u32CoreId] = msr;
   12e26:	490a      	ldr	r1, [pc, #40]	; (12e50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x54>)
   12e28:	9b01      	ldr	r3, [sp, #4]
   12e2a:	9a00      	ldr	r2, [sp, #0]
   12e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]++;
   12e30:	4a06      	ldr	r2, [pc, #24]	; (12e4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   12e32:	9b01      	ldr	r3, [sp, #4]
   12e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e38:	1c5a      	adds	r2, r3, #1
   12e3a:	4904      	ldr	r1, [pc, #16]	; (12e4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_38+0x50>)
   12e3c:	9b01      	ldr	r3, [sp, #4]
   12e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12e42:	bf00      	nop
   12e44:	b003      	add	sp, #12
   12e46:	f85d fb04 	ldr.w	pc, [sp], #4
   12e4a:	bf00      	nop
   12e4c:	1fff9348 	.word	0x1fff9348
   12e50:	1fff9344 	.word	0x1fff9344

00012e54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38(void)
{
   12e54:	b500      	push	{lr}
   12e56:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12e58:	f7ee fd32 	bl	18c0 <Sys_GetCoreID>
   12e5c:	4603      	mov	r3, r0
   12e5e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]--;
   12e60:	4a0d      	ldr	r2, [pc, #52]	; (12e98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   12e62:	9b01      	ldr	r3, [sp, #4]
   12e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e68:	1e5a      	subs	r2, r3, #1
   12e6a:	490b      	ldr	r1, [pc, #44]	; (12e98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   12e6c:	9b01      	ldr	r3, [sp, #4]
   12e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_38[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_38[u32CoreId]))         /*if interrupts were enabled*/
   12e72:	4a0a      	ldr	r2, [pc, #40]	; (12e9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x48>)
   12e74:	9b01      	ldr	r3, [sp, #4]
   12e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e7a:	f003 0301 	and.w	r3, r3, #1
   12e7e:	2b00      	cmp	r3, #0
   12e80:	d106      	bne.n	12e90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
   12e82:	4a05      	ldr	r2, [pc, #20]	; (12e98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x44>)
   12e84:	9b01      	ldr	r3, [sp, #4]
   12e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12e8a:	2b00      	cmp	r3, #0
   12e8c:	d100      	bne.n	12e90 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_38+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12e8e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12e90:	bf00      	nop
   12e92:	b003      	add	sp, #12
   12e94:	f85d fb04 	ldr.w	pc, [sp], #4
   12e98:	1fff9348 	.word	0x1fff9348
   12e9c:	1fff9344 	.word	0x1fff9344

00012ea0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
   12ea0:	b500      	push	{lr}
   12ea2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12ea4:	f7ee fd0c 	bl	18c0 <Sys_GetCoreID>
   12ea8:	4603      	mov	r3, r0
   12eaa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId])
   12eac:	4a10      	ldr	r2, [pc, #64]	; (12ef0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   12eae:	9b01      	ldr	r3, [sp, #4]
   12eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12eb4:	2b00      	cmp	r3, #0
   12eb6:	d10d      	bne.n	12ed4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12eb8:	f7ed fd26 	bl	908 <Adc_schm_read_msr>
   12ebc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12ebe:	9b00      	ldr	r3, [sp, #0]
   12ec0:	f003 0301 	and.w	r3, r3, #1
   12ec4:	2b00      	cmp	r3, #0
   12ec6:	d100      	bne.n	12eca <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12ec8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_39[u32CoreId] = msr;
   12eca:	490a      	ldr	r1, [pc, #40]	; (12ef4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x54>)
   12ecc:	9b01      	ldr	r3, [sp, #4]
   12ece:	9a00      	ldr	r2, [sp, #0]
   12ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]++;
   12ed4:	4a06      	ldr	r2, [pc, #24]	; (12ef0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   12ed6:	9b01      	ldr	r3, [sp, #4]
   12ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12edc:	1c5a      	adds	r2, r3, #1
   12ede:	4904      	ldr	r1, [pc, #16]	; (12ef0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_39+0x50>)
   12ee0:	9b01      	ldr	r3, [sp, #4]
   12ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12ee6:	bf00      	nop
   12ee8:	b003      	add	sp, #12
   12eea:	f85d fb04 	ldr.w	pc, [sp], #4
   12eee:	bf00      	nop
   12ef0:	1fff9350 	.word	0x1fff9350
   12ef4:	1fff934c 	.word	0x1fff934c

00012ef8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39(void)
{
   12ef8:	b500      	push	{lr}
   12efa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12efc:	f7ee fce0 	bl	18c0 <Sys_GetCoreID>
   12f00:	4603      	mov	r3, r0
   12f02:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]--;
   12f04:	4a0d      	ldr	r2, [pc, #52]	; (12f3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   12f06:	9b01      	ldr	r3, [sp, #4]
   12f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f0c:	1e5a      	subs	r2, r3, #1
   12f0e:	490b      	ldr	r1, [pc, #44]	; (12f3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   12f10:	9b01      	ldr	r3, [sp, #4]
   12f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_39[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_39[u32CoreId]))         /*if interrupts were enabled*/
   12f16:	4a0a      	ldr	r2, [pc, #40]	; (12f40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x48>)
   12f18:	9b01      	ldr	r3, [sp, #4]
   12f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f1e:	f003 0301 	and.w	r3, r3, #1
   12f22:	2b00      	cmp	r3, #0
   12f24:	d106      	bne.n	12f34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
   12f26:	4a05      	ldr	r2, [pc, #20]	; (12f3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x44>)
   12f28:	9b01      	ldr	r3, [sp, #4]
   12f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f2e:	2b00      	cmp	r3, #0
   12f30:	d100      	bne.n	12f34 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_39+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12f32:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12f34:	bf00      	nop
   12f36:	b003      	add	sp, #12
   12f38:	f85d fb04 	ldr.w	pc, [sp], #4
   12f3c:	1fff9350 	.word	0x1fff9350
   12f40:	1fff934c 	.word	0x1fff934c

00012f44 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
   12f44:	b500      	push	{lr}
   12f46:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12f48:	f7ee fcba 	bl	18c0 <Sys_GetCoreID>
   12f4c:	4603      	mov	r3, r0
   12f4e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId])
   12f50:	4a10      	ldr	r2, [pc, #64]	; (12f94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   12f52:	9b01      	ldr	r3, [sp, #4]
   12f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f58:	2b00      	cmp	r3, #0
   12f5a:	d10d      	bne.n	12f78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   12f5c:	f7ed fcd4 	bl	908 <Adc_schm_read_msr>
   12f60:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   12f62:	9b00      	ldr	r3, [sp, #0]
   12f64:	f003 0301 	and.w	r3, r3, #1
   12f68:	2b00      	cmp	r3, #0
   12f6a:	d100      	bne.n	12f6e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   12f6c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_40[u32CoreId] = msr;
   12f6e:	490a      	ldr	r1, [pc, #40]	; (12f98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x54>)
   12f70:	9b01      	ldr	r3, [sp, #4]
   12f72:	9a00      	ldr	r2, [sp, #0]
   12f74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]++;
   12f78:	4a06      	ldr	r2, [pc, #24]	; (12f94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   12f7a:	9b01      	ldr	r3, [sp, #4]
   12f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12f80:	1c5a      	adds	r2, r3, #1
   12f82:	4904      	ldr	r1, [pc, #16]	; (12f94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_40+0x50>)
   12f84:	9b01      	ldr	r3, [sp, #4]
   12f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   12f8a:	bf00      	nop
   12f8c:	b003      	add	sp, #12
   12f8e:	f85d fb04 	ldr.w	pc, [sp], #4
   12f92:	bf00      	nop
   12f94:	1fff9358 	.word	0x1fff9358
   12f98:	1fff9354 	.word	0x1fff9354

00012f9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40(void)
{
   12f9c:	b500      	push	{lr}
   12f9e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12fa0:	f7ee fc8e 	bl	18c0 <Sys_GetCoreID>
   12fa4:	4603      	mov	r3, r0
   12fa6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]--;
   12fa8:	4a0d      	ldr	r2, [pc, #52]	; (12fe0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   12faa:	9b01      	ldr	r3, [sp, #4]
   12fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fb0:	1e5a      	subs	r2, r3, #1
   12fb2:	490b      	ldr	r1, [pc, #44]	; (12fe0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   12fb4:	9b01      	ldr	r3, [sp, #4]
   12fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_40[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_40[u32CoreId]))         /*if interrupts were enabled*/
   12fba:	4a0a      	ldr	r2, [pc, #40]	; (12fe4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x48>)
   12fbc:	9b01      	ldr	r3, [sp, #4]
   12fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fc2:	f003 0301 	and.w	r3, r3, #1
   12fc6:	2b00      	cmp	r3, #0
   12fc8:	d106      	bne.n	12fd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
   12fca:	4a05      	ldr	r2, [pc, #20]	; (12fe0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x44>)
   12fcc:	9b01      	ldr	r3, [sp, #4]
   12fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12fd2:	2b00      	cmp	r3, #0
   12fd4:	d100      	bne.n	12fd8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_40+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   12fd6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   12fd8:	bf00      	nop
   12fda:	b003      	add	sp, #12
   12fdc:	f85d fb04 	ldr.w	pc, [sp], #4
   12fe0:	1fff9358 	.word	0x1fff9358
   12fe4:	1fff9354 	.word	0x1fff9354

00012fe8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
   12fe8:	b500      	push	{lr}
   12fea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   12fec:	f7ee fc68 	bl	18c0 <Sys_GetCoreID>
   12ff0:	4603      	mov	r3, r0
   12ff2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId])
   12ff4:	4a10      	ldr	r2, [pc, #64]	; (13038 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   12ff6:	9b01      	ldr	r3, [sp, #4]
   12ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12ffc:	2b00      	cmp	r3, #0
   12ffe:	d10d      	bne.n	1301c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13000:	f7ed fc82 	bl	908 <Adc_schm_read_msr>
   13004:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13006:	9b00      	ldr	r3, [sp, #0]
   13008:	f003 0301 	and.w	r3, r3, #1
   1300c:	2b00      	cmp	r3, #0
   1300e:	d100      	bne.n	13012 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13010:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_41[u32CoreId] = msr;
   13012:	490a      	ldr	r1, [pc, #40]	; (1303c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x54>)
   13014:	9b01      	ldr	r3, [sp, #4]
   13016:	9a00      	ldr	r2, [sp, #0]
   13018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]++;
   1301c:	4a06      	ldr	r2, [pc, #24]	; (13038 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   1301e:	9b01      	ldr	r3, [sp, #4]
   13020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13024:	1c5a      	adds	r2, r3, #1
   13026:	4904      	ldr	r1, [pc, #16]	; (13038 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_41+0x50>)
   13028:	9b01      	ldr	r3, [sp, #4]
   1302a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1302e:	bf00      	nop
   13030:	b003      	add	sp, #12
   13032:	f85d fb04 	ldr.w	pc, [sp], #4
   13036:	bf00      	nop
   13038:	1fff9360 	.word	0x1fff9360
   1303c:	1fff935c 	.word	0x1fff935c

00013040 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41(void)
{
   13040:	b500      	push	{lr}
   13042:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13044:	f7ee fc3c 	bl	18c0 <Sys_GetCoreID>
   13048:	4603      	mov	r3, r0
   1304a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]--;
   1304c:	4a0d      	ldr	r2, [pc, #52]	; (13084 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   1304e:	9b01      	ldr	r3, [sp, #4]
   13050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13054:	1e5a      	subs	r2, r3, #1
   13056:	490b      	ldr	r1, [pc, #44]	; (13084 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   13058:	9b01      	ldr	r3, [sp, #4]
   1305a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_41[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_41[u32CoreId]))         /*if interrupts were enabled*/
   1305e:	4a0a      	ldr	r2, [pc, #40]	; (13088 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x48>)
   13060:	9b01      	ldr	r3, [sp, #4]
   13062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13066:	f003 0301 	and.w	r3, r3, #1
   1306a:	2b00      	cmp	r3, #0
   1306c:	d106      	bne.n	1307c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
   1306e:	4a05      	ldr	r2, [pc, #20]	; (13084 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x44>)
   13070:	9b01      	ldr	r3, [sp, #4]
   13072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13076:	2b00      	cmp	r3, #0
   13078:	d100      	bne.n	1307c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_41+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1307a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1307c:	bf00      	nop
   1307e:	b003      	add	sp, #12
   13080:	f85d fb04 	ldr.w	pc, [sp], #4
   13084:	1fff9360 	.word	0x1fff9360
   13088:	1fff935c 	.word	0x1fff935c

0001308c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
   1308c:	b500      	push	{lr}
   1308e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13090:	f7ee fc16 	bl	18c0 <Sys_GetCoreID>
   13094:	4603      	mov	r3, r0
   13096:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId])
   13098:	4a10      	ldr	r2, [pc, #64]	; (130dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   1309a:	9b01      	ldr	r3, [sp, #4]
   1309c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130a0:	2b00      	cmp	r3, #0
   130a2:	d10d      	bne.n	130c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   130a4:	f7ed fc30 	bl	908 <Adc_schm_read_msr>
   130a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   130aa:	9b00      	ldr	r3, [sp, #0]
   130ac:	f003 0301 	and.w	r3, r3, #1
   130b0:	2b00      	cmp	r3, #0
   130b2:	d100      	bne.n	130b6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   130b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_42[u32CoreId] = msr;
   130b6:	490a      	ldr	r1, [pc, #40]	; (130e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x54>)
   130b8:	9b01      	ldr	r3, [sp, #4]
   130ba:	9a00      	ldr	r2, [sp, #0]
   130bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]++;
   130c0:	4a06      	ldr	r2, [pc, #24]	; (130dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   130c2:	9b01      	ldr	r3, [sp, #4]
   130c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130c8:	1c5a      	adds	r2, r3, #1
   130ca:	4904      	ldr	r1, [pc, #16]	; (130dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_42+0x50>)
   130cc:	9b01      	ldr	r3, [sp, #4]
   130ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   130d2:	bf00      	nop
   130d4:	b003      	add	sp, #12
   130d6:	f85d fb04 	ldr.w	pc, [sp], #4
   130da:	bf00      	nop
   130dc:	1fff9368 	.word	0x1fff9368
   130e0:	1fff9364 	.word	0x1fff9364

000130e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42(void)
{
   130e4:	b500      	push	{lr}
   130e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   130e8:	f7ee fbea 	bl	18c0 <Sys_GetCoreID>
   130ec:	4603      	mov	r3, r0
   130ee:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]--;
   130f0:	4a0d      	ldr	r2, [pc, #52]	; (13128 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   130f2:	9b01      	ldr	r3, [sp, #4]
   130f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   130f8:	1e5a      	subs	r2, r3, #1
   130fa:	490b      	ldr	r1, [pc, #44]	; (13128 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   130fc:	9b01      	ldr	r3, [sp, #4]
   130fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_42[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_42[u32CoreId]))         /*if interrupts were enabled*/
   13102:	4a0a      	ldr	r2, [pc, #40]	; (1312c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x48>)
   13104:	9b01      	ldr	r3, [sp, #4]
   13106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1310a:	f003 0301 	and.w	r3, r3, #1
   1310e:	2b00      	cmp	r3, #0
   13110:	d106      	bne.n	13120 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
   13112:	4a05      	ldr	r2, [pc, #20]	; (13128 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x44>)
   13114:	9b01      	ldr	r3, [sp, #4]
   13116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1311a:	2b00      	cmp	r3, #0
   1311c:	d100      	bne.n	13120 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_42+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1311e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13120:	bf00      	nop
   13122:	b003      	add	sp, #12
   13124:	f85d fb04 	ldr.w	pc, [sp], #4
   13128:	1fff9368 	.word	0x1fff9368
   1312c:	1fff9364 	.word	0x1fff9364

00013130 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
   13130:	b500      	push	{lr}
   13132:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13134:	f7ee fbc4 	bl	18c0 <Sys_GetCoreID>
   13138:	4603      	mov	r3, r0
   1313a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId])
   1313c:	4a10      	ldr	r2, [pc, #64]	; (13180 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   1313e:	9b01      	ldr	r3, [sp, #4]
   13140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13144:	2b00      	cmp	r3, #0
   13146:	d10d      	bne.n	13164 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13148:	f7ed fbde 	bl	908 <Adc_schm_read_msr>
   1314c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1314e:	9b00      	ldr	r3, [sp, #0]
   13150:	f003 0301 	and.w	r3, r3, #1
   13154:	2b00      	cmp	r3, #0
   13156:	d100      	bne.n	1315a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13158:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_43[u32CoreId] = msr;
   1315a:	490a      	ldr	r1, [pc, #40]	; (13184 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x54>)
   1315c:	9b01      	ldr	r3, [sp, #4]
   1315e:	9a00      	ldr	r2, [sp, #0]
   13160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]++;
   13164:	4a06      	ldr	r2, [pc, #24]	; (13180 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   13166:	9b01      	ldr	r3, [sp, #4]
   13168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1316c:	1c5a      	adds	r2, r3, #1
   1316e:	4904      	ldr	r1, [pc, #16]	; (13180 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_43+0x50>)
   13170:	9b01      	ldr	r3, [sp, #4]
   13172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13176:	bf00      	nop
   13178:	b003      	add	sp, #12
   1317a:	f85d fb04 	ldr.w	pc, [sp], #4
   1317e:	bf00      	nop
   13180:	1fff9370 	.word	0x1fff9370
   13184:	1fff936c 	.word	0x1fff936c

00013188 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43(void)
{
   13188:	b500      	push	{lr}
   1318a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1318c:	f7ee fb98 	bl	18c0 <Sys_GetCoreID>
   13190:	4603      	mov	r3, r0
   13192:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]--;
   13194:	4a0d      	ldr	r2, [pc, #52]	; (131cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   13196:	9b01      	ldr	r3, [sp, #4]
   13198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1319c:	1e5a      	subs	r2, r3, #1
   1319e:	490b      	ldr	r1, [pc, #44]	; (131cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   131a0:	9b01      	ldr	r3, [sp, #4]
   131a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_43[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_43[u32CoreId]))         /*if interrupts were enabled*/
   131a6:	4a0a      	ldr	r2, [pc, #40]	; (131d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x48>)
   131a8:	9b01      	ldr	r3, [sp, #4]
   131aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131ae:	f003 0301 	and.w	r3, r3, #1
   131b2:	2b00      	cmp	r3, #0
   131b4:	d106      	bne.n	131c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
   131b6:	4a05      	ldr	r2, [pc, #20]	; (131cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x44>)
   131b8:	9b01      	ldr	r3, [sp, #4]
   131ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131be:	2b00      	cmp	r3, #0
   131c0:	d100      	bne.n	131c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_43+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   131c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   131c4:	bf00      	nop
   131c6:	b003      	add	sp, #12
   131c8:	f85d fb04 	ldr.w	pc, [sp], #4
   131cc:	1fff9370 	.word	0x1fff9370
   131d0:	1fff936c 	.word	0x1fff936c

000131d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
   131d4:	b500      	push	{lr}
   131d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   131d8:	f7ee fb72 	bl	18c0 <Sys_GetCoreID>
   131dc:	4603      	mov	r3, r0
   131de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId])
   131e0:	4a10      	ldr	r2, [pc, #64]	; (13224 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   131e2:	9b01      	ldr	r3, [sp, #4]
   131e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   131e8:	2b00      	cmp	r3, #0
   131ea:	d10d      	bne.n	13208 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   131ec:	f7ed fb8c 	bl	908 <Adc_schm_read_msr>
   131f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   131f2:	9b00      	ldr	r3, [sp, #0]
   131f4:	f003 0301 	and.w	r3, r3, #1
   131f8:	2b00      	cmp	r3, #0
   131fa:	d100      	bne.n	131fe <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   131fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_44[u32CoreId] = msr;
   131fe:	490a      	ldr	r1, [pc, #40]	; (13228 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x54>)
   13200:	9b01      	ldr	r3, [sp, #4]
   13202:	9a00      	ldr	r2, [sp, #0]
   13204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]++;
   13208:	4a06      	ldr	r2, [pc, #24]	; (13224 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   1320a:	9b01      	ldr	r3, [sp, #4]
   1320c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13210:	1c5a      	adds	r2, r3, #1
   13212:	4904      	ldr	r1, [pc, #16]	; (13224 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_44+0x50>)
   13214:	9b01      	ldr	r3, [sp, #4]
   13216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1321a:	bf00      	nop
   1321c:	b003      	add	sp, #12
   1321e:	f85d fb04 	ldr.w	pc, [sp], #4
   13222:	bf00      	nop
   13224:	1fff9378 	.word	0x1fff9378
   13228:	1fff9374 	.word	0x1fff9374

0001322c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44(void)
{
   1322c:	b500      	push	{lr}
   1322e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13230:	f7ee fb46 	bl	18c0 <Sys_GetCoreID>
   13234:	4603      	mov	r3, r0
   13236:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]--;
   13238:	4a0d      	ldr	r2, [pc, #52]	; (13270 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   1323a:	9b01      	ldr	r3, [sp, #4]
   1323c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13240:	1e5a      	subs	r2, r3, #1
   13242:	490b      	ldr	r1, [pc, #44]	; (13270 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   13244:	9b01      	ldr	r3, [sp, #4]
   13246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_44[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_44[u32CoreId]))         /*if interrupts were enabled*/
   1324a:	4a0a      	ldr	r2, [pc, #40]	; (13274 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x48>)
   1324c:	9b01      	ldr	r3, [sp, #4]
   1324e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13252:	f003 0301 	and.w	r3, r3, #1
   13256:	2b00      	cmp	r3, #0
   13258:	d106      	bne.n	13268 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
   1325a:	4a05      	ldr	r2, [pc, #20]	; (13270 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x44>)
   1325c:	9b01      	ldr	r3, [sp, #4]
   1325e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13262:	2b00      	cmp	r3, #0
   13264:	d100      	bne.n	13268 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_44+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13266:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13268:	bf00      	nop
   1326a:	b003      	add	sp, #12
   1326c:	f85d fb04 	ldr.w	pc, [sp], #4
   13270:	1fff9378 	.word	0x1fff9378
   13274:	1fff9374 	.word	0x1fff9374

00013278 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
   13278:	b500      	push	{lr}
   1327a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1327c:	f7ee fb20 	bl	18c0 <Sys_GetCoreID>
   13280:	4603      	mov	r3, r0
   13282:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId])
   13284:	4a10      	ldr	r2, [pc, #64]	; (132c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   13286:	9b01      	ldr	r3, [sp, #4]
   13288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1328c:	2b00      	cmp	r3, #0
   1328e:	d10d      	bne.n	132ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13290:	f7ed fb3a 	bl	908 <Adc_schm_read_msr>
   13294:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13296:	9b00      	ldr	r3, [sp, #0]
   13298:	f003 0301 	and.w	r3, r3, #1
   1329c:	2b00      	cmp	r3, #0
   1329e:	d100      	bne.n	132a2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   132a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_45[u32CoreId] = msr;
   132a2:	490a      	ldr	r1, [pc, #40]	; (132cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x54>)
   132a4:	9b01      	ldr	r3, [sp, #4]
   132a6:	9a00      	ldr	r2, [sp, #0]
   132a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]++;
   132ac:	4a06      	ldr	r2, [pc, #24]	; (132c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   132ae:	9b01      	ldr	r3, [sp, #4]
   132b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132b4:	1c5a      	adds	r2, r3, #1
   132b6:	4904      	ldr	r1, [pc, #16]	; (132c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_45+0x50>)
   132b8:	9b01      	ldr	r3, [sp, #4]
   132ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   132be:	bf00      	nop
   132c0:	b003      	add	sp, #12
   132c2:	f85d fb04 	ldr.w	pc, [sp], #4
   132c6:	bf00      	nop
   132c8:	1fff9380 	.word	0x1fff9380
   132cc:	1fff937c 	.word	0x1fff937c

000132d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45(void)
{
   132d0:	b500      	push	{lr}
   132d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   132d4:	f7ee faf4 	bl	18c0 <Sys_GetCoreID>
   132d8:	4603      	mov	r3, r0
   132da:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]--;
   132dc:	4a0d      	ldr	r2, [pc, #52]	; (13314 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   132de:	9b01      	ldr	r3, [sp, #4]
   132e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132e4:	1e5a      	subs	r2, r3, #1
   132e6:	490b      	ldr	r1, [pc, #44]	; (13314 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   132e8:	9b01      	ldr	r3, [sp, #4]
   132ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_45[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_45[u32CoreId]))         /*if interrupts were enabled*/
   132ee:	4a0a      	ldr	r2, [pc, #40]	; (13318 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x48>)
   132f0:	9b01      	ldr	r3, [sp, #4]
   132f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132f6:	f003 0301 	and.w	r3, r3, #1
   132fa:	2b00      	cmp	r3, #0
   132fc:	d106      	bne.n	1330c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
   132fe:	4a05      	ldr	r2, [pc, #20]	; (13314 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x44>)
   13300:	9b01      	ldr	r3, [sp, #4]
   13302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13306:	2b00      	cmp	r3, #0
   13308:	d100      	bne.n	1330c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_45+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1330a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1330c:	bf00      	nop
   1330e:	b003      	add	sp, #12
   13310:	f85d fb04 	ldr.w	pc, [sp], #4
   13314:	1fff9380 	.word	0x1fff9380
   13318:	1fff937c 	.word	0x1fff937c

0001331c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
   1331c:	b500      	push	{lr}
   1331e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13320:	f7ee face 	bl	18c0 <Sys_GetCoreID>
   13324:	4603      	mov	r3, r0
   13326:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId])
   13328:	4a10      	ldr	r2, [pc, #64]	; (1336c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   1332a:	9b01      	ldr	r3, [sp, #4]
   1332c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13330:	2b00      	cmp	r3, #0
   13332:	d10d      	bne.n	13350 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13334:	f7ed fae8 	bl	908 <Adc_schm_read_msr>
   13338:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1333a:	9b00      	ldr	r3, [sp, #0]
   1333c:	f003 0301 	and.w	r3, r3, #1
   13340:	2b00      	cmp	r3, #0
   13342:	d100      	bne.n	13346 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13344:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_46[u32CoreId] = msr;
   13346:	490a      	ldr	r1, [pc, #40]	; (13370 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x54>)
   13348:	9b01      	ldr	r3, [sp, #4]
   1334a:	9a00      	ldr	r2, [sp, #0]
   1334c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]++;
   13350:	4a06      	ldr	r2, [pc, #24]	; (1336c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   13352:	9b01      	ldr	r3, [sp, #4]
   13354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13358:	1c5a      	adds	r2, r3, #1
   1335a:	4904      	ldr	r1, [pc, #16]	; (1336c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_46+0x50>)
   1335c:	9b01      	ldr	r3, [sp, #4]
   1335e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13362:	bf00      	nop
   13364:	b003      	add	sp, #12
   13366:	f85d fb04 	ldr.w	pc, [sp], #4
   1336a:	bf00      	nop
   1336c:	1fff9388 	.word	0x1fff9388
   13370:	1fff9384 	.word	0x1fff9384

00013374 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46(void)
{
   13374:	b500      	push	{lr}
   13376:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13378:	f7ee faa2 	bl	18c0 <Sys_GetCoreID>
   1337c:	4603      	mov	r3, r0
   1337e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]--;
   13380:	4a0d      	ldr	r2, [pc, #52]	; (133b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   13382:	9b01      	ldr	r3, [sp, #4]
   13384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13388:	1e5a      	subs	r2, r3, #1
   1338a:	490b      	ldr	r1, [pc, #44]	; (133b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   1338c:	9b01      	ldr	r3, [sp, #4]
   1338e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_46[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_46[u32CoreId]))         /*if interrupts were enabled*/
   13392:	4a0a      	ldr	r2, [pc, #40]	; (133bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x48>)
   13394:	9b01      	ldr	r3, [sp, #4]
   13396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1339a:	f003 0301 	and.w	r3, r3, #1
   1339e:	2b00      	cmp	r3, #0
   133a0:	d106      	bne.n	133b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
   133a2:	4a05      	ldr	r2, [pc, #20]	; (133b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x44>)
   133a4:	9b01      	ldr	r3, [sp, #4]
   133a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133aa:	2b00      	cmp	r3, #0
   133ac:	d100      	bne.n	133b0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_46+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   133ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   133b0:	bf00      	nop
   133b2:	b003      	add	sp, #12
   133b4:	f85d fb04 	ldr.w	pc, [sp], #4
   133b8:	1fff9388 	.word	0x1fff9388
   133bc:	1fff9384 	.word	0x1fff9384

000133c0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
   133c0:	b500      	push	{lr}
   133c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   133c4:	f7ee fa7c 	bl	18c0 <Sys_GetCoreID>
   133c8:	4603      	mov	r3, r0
   133ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId])
   133cc:	4a10      	ldr	r2, [pc, #64]	; (13410 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   133ce:	9b01      	ldr	r3, [sp, #4]
   133d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133d4:	2b00      	cmp	r3, #0
   133d6:	d10d      	bne.n	133f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   133d8:	f7ed fa96 	bl	908 <Adc_schm_read_msr>
   133dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   133de:	9b00      	ldr	r3, [sp, #0]
   133e0:	f003 0301 	and.w	r3, r3, #1
   133e4:	2b00      	cmp	r3, #0
   133e6:	d100      	bne.n	133ea <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   133e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_47[u32CoreId] = msr;
   133ea:	490a      	ldr	r1, [pc, #40]	; (13414 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x54>)
   133ec:	9b01      	ldr	r3, [sp, #4]
   133ee:	9a00      	ldr	r2, [sp, #0]
   133f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]++;
   133f4:	4a06      	ldr	r2, [pc, #24]	; (13410 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   133f6:	9b01      	ldr	r3, [sp, #4]
   133f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133fc:	1c5a      	adds	r2, r3, #1
   133fe:	4904      	ldr	r1, [pc, #16]	; (13410 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_47+0x50>)
   13400:	9b01      	ldr	r3, [sp, #4]
   13402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13406:	bf00      	nop
   13408:	b003      	add	sp, #12
   1340a:	f85d fb04 	ldr.w	pc, [sp], #4
   1340e:	bf00      	nop
   13410:	1fff9390 	.word	0x1fff9390
   13414:	1fff938c 	.word	0x1fff938c

00013418 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47(void)
{
   13418:	b500      	push	{lr}
   1341a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1341c:	f7ee fa50 	bl	18c0 <Sys_GetCoreID>
   13420:	4603      	mov	r3, r0
   13422:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]--;
   13424:	4a0d      	ldr	r2, [pc, #52]	; (1345c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   13426:	9b01      	ldr	r3, [sp, #4]
   13428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1342c:	1e5a      	subs	r2, r3, #1
   1342e:	490b      	ldr	r1, [pc, #44]	; (1345c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   13430:	9b01      	ldr	r3, [sp, #4]
   13432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_47[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_47[u32CoreId]))         /*if interrupts were enabled*/
   13436:	4a0a      	ldr	r2, [pc, #40]	; (13460 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x48>)
   13438:	9b01      	ldr	r3, [sp, #4]
   1343a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1343e:	f003 0301 	and.w	r3, r3, #1
   13442:	2b00      	cmp	r3, #0
   13444:	d106      	bne.n	13454 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
   13446:	4a05      	ldr	r2, [pc, #20]	; (1345c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x44>)
   13448:	9b01      	ldr	r3, [sp, #4]
   1344a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1344e:	2b00      	cmp	r3, #0
   13450:	d100      	bne.n	13454 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_47+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13452:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13454:	bf00      	nop
   13456:	b003      	add	sp, #12
   13458:	f85d fb04 	ldr.w	pc, [sp], #4
   1345c:	1fff9390 	.word	0x1fff9390
   13460:	1fff938c 	.word	0x1fff938c

00013464 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
   13464:	b500      	push	{lr}
   13466:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13468:	f7ee fa2a 	bl	18c0 <Sys_GetCoreID>
   1346c:	4603      	mov	r3, r0
   1346e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId])
   13470:	4a10      	ldr	r2, [pc, #64]	; (134b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   13472:	9b01      	ldr	r3, [sp, #4]
   13474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13478:	2b00      	cmp	r3, #0
   1347a:	d10d      	bne.n	13498 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1347c:	f7ed fa44 	bl	908 <Adc_schm_read_msr>
   13480:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13482:	9b00      	ldr	r3, [sp, #0]
   13484:	f003 0301 	and.w	r3, r3, #1
   13488:	2b00      	cmp	r3, #0
   1348a:	d100      	bne.n	1348e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1348c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_48[u32CoreId] = msr;
   1348e:	490a      	ldr	r1, [pc, #40]	; (134b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x54>)
   13490:	9b01      	ldr	r3, [sp, #4]
   13492:	9a00      	ldr	r2, [sp, #0]
   13494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]++;
   13498:	4a06      	ldr	r2, [pc, #24]	; (134b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   1349a:	9b01      	ldr	r3, [sp, #4]
   1349c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134a0:	1c5a      	adds	r2, r3, #1
   134a2:	4904      	ldr	r1, [pc, #16]	; (134b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_48+0x50>)
   134a4:	9b01      	ldr	r3, [sp, #4]
   134a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   134aa:	bf00      	nop
   134ac:	b003      	add	sp, #12
   134ae:	f85d fb04 	ldr.w	pc, [sp], #4
   134b2:	bf00      	nop
   134b4:	1fff9398 	.word	0x1fff9398
   134b8:	1fff9394 	.word	0x1fff9394

000134bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48(void)
{
   134bc:	b500      	push	{lr}
   134be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   134c0:	f7ee f9fe 	bl	18c0 <Sys_GetCoreID>
   134c4:	4603      	mov	r3, r0
   134c6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]--;
   134c8:	4a0d      	ldr	r2, [pc, #52]	; (13500 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   134ca:	9b01      	ldr	r3, [sp, #4]
   134cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134d0:	1e5a      	subs	r2, r3, #1
   134d2:	490b      	ldr	r1, [pc, #44]	; (13500 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   134d4:	9b01      	ldr	r3, [sp, #4]
   134d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_48[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_48[u32CoreId]))         /*if interrupts were enabled*/
   134da:	4a0a      	ldr	r2, [pc, #40]	; (13504 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x48>)
   134dc:	9b01      	ldr	r3, [sp, #4]
   134de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134e2:	f003 0301 	and.w	r3, r3, #1
   134e6:	2b00      	cmp	r3, #0
   134e8:	d106      	bne.n	134f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
   134ea:	4a05      	ldr	r2, [pc, #20]	; (13500 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x44>)
   134ec:	9b01      	ldr	r3, [sp, #4]
   134ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   134f2:	2b00      	cmp	r3, #0
   134f4:	d100      	bne.n	134f8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_48+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   134f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   134f8:	bf00      	nop
   134fa:	b003      	add	sp, #12
   134fc:	f85d fb04 	ldr.w	pc, [sp], #4
   13500:	1fff9398 	.word	0x1fff9398
   13504:	1fff9394 	.word	0x1fff9394

00013508 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
   13508:	b500      	push	{lr}
   1350a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1350c:	f7ee f9d8 	bl	18c0 <Sys_GetCoreID>
   13510:	4603      	mov	r3, r0
   13512:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId])
   13514:	4a10      	ldr	r2, [pc, #64]	; (13558 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   13516:	9b01      	ldr	r3, [sp, #4]
   13518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1351c:	2b00      	cmp	r3, #0
   1351e:	d10d      	bne.n	1353c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13520:	f7ed f9f2 	bl	908 <Adc_schm_read_msr>
   13524:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13526:	9b00      	ldr	r3, [sp, #0]
   13528:	f003 0301 	and.w	r3, r3, #1
   1352c:	2b00      	cmp	r3, #0
   1352e:	d100      	bne.n	13532 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13530:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_49[u32CoreId] = msr;
   13532:	490a      	ldr	r1, [pc, #40]	; (1355c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x54>)
   13534:	9b01      	ldr	r3, [sp, #4]
   13536:	9a00      	ldr	r2, [sp, #0]
   13538:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]++;
   1353c:	4a06      	ldr	r2, [pc, #24]	; (13558 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   1353e:	9b01      	ldr	r3, [sp, #4]
   13540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13544:	1c5a      	adds	r2, r3, #1
   13546:	4904      	ldr	r1, [pc, #16]	; (13558 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_49+0x50>)
   13548:	9b01      	ldr	r3, [sp, #4]
   1354a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1354e:	bf00      	nop
   13550:	b003      	add	sp, #12
   13552:	f85d fb04 	ldr.w	pc, [sp], #4
   13556:	bf00      	nop
   13558:	1fff93a0 	.word	0x1fff93a0
   1355c:	1fff939c 	.word	0x1fff939c

00013560 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49(void)
{
   13560:	b500      	push	{lr}
   13562:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13564:	f7ee f9ac 	bl	18c0 <Sys_GetCoreID>
   13568:	4603      	mov	r3, r0
   1356a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]--;
   1356c:	4a0d      	ldr	r2, [pc, #52]	; (135a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   1356e:	9b01      	ldr	r3, [sp, #4]
   13570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13574:	1e5a      	subs	r2, r3, #1
   13576:	490b      	ldr	r1, [pc, #44]	; (135a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   13578:	9b01      	ldr	r3, [sp, #4]
   1357a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_49[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_49[u32CoreId]))         /*if interrupts were enabled*/
   1357e:	4a0a      	ldr	r2, [pc, #40]	; (135a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x48>)
   13580:	9b01      	ldr	r3, [sp, #4]
   13582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13586:	f003 0301 	and.w	r3, r3, #1
   1358a:	2b00      	cmp	r3, #0
   1358c:	d106      	bne.n	1359c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
   1358e:	4a05      	ldr	r2, [pc, #20]	; (135a4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x44>)
   13590:	9b01      	ldr	r3, [sp, #4]
   13592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13596:	2b00      	cmp	r3, #0
   13598:	d100      	bne.n	1359c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_49+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1359a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1359c:	bf00      	nop
   1359e:	b003      	add	sp, #12
   135a0:	f85d fb04 	ldr.w	pc, [sp], #4
   135a4:	1fff93a0 	.word	0x1fff93a0
   135a8:	1fff939c 	.word	0x1fff939c

000135ac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
   135ac:	b500      	push	{lr}
   135ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   135b0:	f7ee f986 	bl	18c0 <Sys_GetCoreID>
   135b4:	4603      	mov	r3, r0
   135b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId])
   135b8:	4a10      	ldr	r2, [pc, #64]	; (135fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   135ba:	9b01      	ldr	r3, [sp, #4]
   135bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135c0:	2b00      	cmp	r3, #0
   135c2:	d10d      	bne.n	135e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   135c4:	f7ed f9a0 	bl	908 <Adc_schm_read_msr>
   135c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   135ca:	9b00      	ldr	r3, [sp, #0]
   135cc:	f003 0301 	and.w	r3, r3, #1
   135d0:	2b00      	cmp	r3, #0
   135d2:	d100      	bne.n	135d6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   135d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_50[u32CoreId] = msr;
   135d6:	490a      	ldr	r1, [pc, #40]	; (13600 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x54>)
   135d8:	9b01      	ldr	r3, [sp, #4]
   135da:	9a00      	ldr	r2, [sp, #0]
   135dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]++;
   135e0:	4a06      	ldr	r2, [pc, #24]	; (135fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   135e2:	9b01      	ldr	r3, [sp, #4]
   135e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   135e8:	1c5a      	adds	r2, r3, #1
   135ea:	4904      	ldr	r1, [pc, #16]	; (135fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_50+0x50>)
   135ec:	9b01      	ldr	r3, [sp, #4]
   135ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   135f2:	bf00      	nop
   135f4:	b003      	add	sp, #12
   135f6:	f85d fb04 	ldr.w	pc, [sp], #4
   135fa:	bf00      	nop
   135fc:	1fff93a8 	.word	0x1fff93a8
   13600:	1fff93a4 	.word	0x1fff93a4

00013604 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50(void)
{
   13604:	b500      	push	{lr}
   13606:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13608:	f7ee f95a 	bl	18c0 <Sys_GetCoreID>
   1360c:	4603      	mov	r3, r0
   1360e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]--;
   13610:	4a0d      	ldr	r2, [pc, #52]	; (13648 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   13612:	9b01      	ldr	r3, [sp, #4]
   13614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13618:	1e5a      	subs	r2, r3, #1
   1361a:	490b      	ldr	r1, [pc, #44]	; (13648 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   1361c:	9b01      	ldr	r3, [sp, #4]
   1361e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_50[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_50[u32CoreId]))         /*if interrupts were enabled*/
   13622:	4a0a      	ldr	r2, [pc, #40]	; (1364c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x48>)
   13624:	9b01      	ldr	r3, [sp, #4]
   13626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1362a:	f003 0301 	and.w	r3, r3, #1
   1362e:	2b00      	cmp	r3, #0
   13630:	d106      	bne.n	13640 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
   13632:	4a05      	ldr	r2, [pc, #20]	; (13648 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x44>)
   13634:	9b01      	ldr	r3, [sp, #4]
   13636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1363a:	2b00      	cmp	r3, #0
   1363c:	d100      	bne.n	13640 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_50+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1363e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13640:	bf00      	nop
   13642:	b003      	add	sp, #12
   13644:	f85d fb04 	ldr.w	pc, [sp], #4
   13648:	1fff93a8 	.word	0x1fff93a8
   1364c:	1fff93a4 	.word	0x1fff93a4

00013650 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
   13650:	b500      	push	{lr}
   13652:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13654:	f7ee f934 	bl	18c0 <Sys_GetCoreID>
   13658:	4603      	mov	r3, r0
   1365a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId])
   1365c:	4a10      	ldr	r2, [pc, #64]	; (136a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   1365e:	9b01      	ldr	r3, [sp, #4]
   13660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13664:	2b00      	cmp	r3, #0
   13666:	d10d      	bne.n	13684 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13668:	f7ed f94e 	bl	908 <Adc_schm_read_msr>
   1366c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1366e:	9b00      	ldr	r3, [sp, #0]
   13670:	f003 0301 	and.w	r3, r3, #1
   13674:	2b00      	cmp	r3, #0
   13676:	d100      	bne.n	1367a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13678:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_51[u32CoreId] = msr;
   1367a:	490a      	ldr	r1, [pc, #40]	; (136a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x54>)
   1367c:	9b01      	ldr	r3, [sp, #4]
   1367e:	9a00      	ldr	r2, [sp, #0]
   13680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]++;
   13684:	4a06      	ldr	r2, [pc, #24]	; (136a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   13686:	9b01      	ldr	r3, [sp, #4]
   13688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1368c:	1c5a      	adds	r2, r3, #1
   1368e:	4904      	ldr	r1, [pc, #16]	; (136a0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_51+0x50>)
   13690:	9b01      	ldr	r3, [sp, #4]
   13692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13696:	bf00      	nop
   13698:	b003      	add	sp, #12
   1369a:	f85d fb04 	ldr.w	pc, [sp], #4
   1369e:	bf00      	nop
   136a0:	1fff93b0 	.word	0x1fff93b0
   136a4:	1fff93ac 	.word	0x1fff93ac

000136a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51(void)
{
   136a8:	b500      	push	{lr}
   136aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   136ac:	f7ee f908 	bl	18c0 <Sys_GetCoreID>
   136b0:	4603      	mov	r3, r0
   136b2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]--;
   136b4:	4a0d      	ldr	r2, [pc, #52]	; (136ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   136b6:	9b01      	ldr	r3, [sp, #4]
   136b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136bc:	1e5a      	subs	r2, r3, #1
   136be:	490b      	ldr	r1, [pc, #44]	; (136ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   136c0:	9b01      	ldr	r3, [sp, #4]
   136c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_51[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_51[u32CoreId]))         /*if interrupts were enabled*/
   136c6:	4a0a      	ldr	r2, [pc, #40]	; (136f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x48>)
   136c8:	9b01      	ldr	r3, [sp, #4]
   136ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136ce:	f003 0301 	and.w	r3, r3, #1
   136d2:	2b00      	cmp	r3, #0
   136d4:	d106      	bne.n	136e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
   136d6:	4a05      	ldr	r2, [pc, #20]	; (136ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x44>)
   136d8:	9b01      	ldr	r3, [sp, #4]
   136da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136de:	2b00      	cmp	r3, #0
   136e0:	d100      	bne.n	136e4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_51+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   136e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   136e4:	bf00      	nop
   136e6:	b003      	add	sp, #12
   136e8:	f85d fb04 	ldr.w	pc, [sp], #4
   136ec:	1fff93b0 	.word	0x1fff93b0
   136f0:	1fff93ac 	.word	0x1fff93ac

000136f4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
   136f4:	b500      	push	{lr}
   136f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   136f8:	f7ee f8e2 	bl	18c0 <Sys_GetCoreID>
   136fc:	4603      	mov	r3, r0
   136fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId])
   13700:	4a10      	ldr	r2, [pc, #64]	; (13744 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   13702:	9b01      	ldr	r3, [sp, #4]
   13704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13708:	2b00      	cmp	r3, #0
   1370a:	d10d      	bne.n	13728 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1370c:	f7ed f8fc 	bl	908 <Adc_schm_read_msr>
   13710:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13712:	9b00      	ldr	r3, [sp, #0]
   13714:	f003 0301 	and.w	r3, r3, #1
   13718:	2b00      	cmp	r3, #0
   1371a:	d100      	bne.n	1371e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1371c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_54[u32CoreId] = msr;
   1371e:	490a      	ldr	r1, [pc, #40]	; (13748 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x54>)
   13720:	9b01      	ldr	r3, [sp, #4]
   13722:	9a00      	ldr	r2, [sp, #0]
   13724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]++;
   13728:	4a06      	ldr	r2, [pc, #24]	; (13744 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   1372a:	9b01      	ldr	r3, [sp, #4]
   1372c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13730:	1c5a      	adds	r2, r3, #1
   13732:	4904      	ldr	r1, [pc, #16]	; (13744 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_54+0x50>)
   13734:	9b01      	ldr	r3, [sp, #4]
   13736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1373a:	bf00      	nop
   1373c:	b003      	add	sp, #12
   1373e:	f85d fb04 	ldr.w	pc, [sp], #4
   13742:	bf00      	nop
   13744:	1fff93b8 	.word	0x1fff93b8
   13748:	1fff93b4 	.word	0x1fff93b4

0001374c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54(void)
{
   1374c:	b500      	push	{lr}
   1374e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13750:	f7ee f8b6 	bl	18c0 <Sys_GetCoreID>
   13754:	4603      	mov	r3, r0
   13756:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]--;
   13758:	4a0d      	ldr	r2, [pc, #52]	; (13790 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   1375a:	9b01      	ldr	r3, [sp, #4]
   1375c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13760:	1e5a      	subs	r2, r3, #1
   13762:	490b      	ldr	r1, [pc, #44]	; (13790 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   13764:	9b01      	ldr	r3, [sp, #4]
   13766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_54[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_54[u32CoreId]))         /*if interrupts were enabled*/
   1376a:	4a0a      	ldr	r2, [pc, #40]	; (13794 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x48>)
   1376c:	9b01      	ldr	r3, [sp, #4]
   1376e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13772:	f003 0301 	and.w	r3, r3, #1
   13776:	2b00      	cmp	r3, #0
   13778:	d106      	bne.n	13788 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
   1377a:	4a05      	ldr	r2, [pc, #20]	; (13790 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x44>)
   1377c:	9b01      	ldr	r3, [sp, #4]
   1377e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13782:	2b00      	cmp	r3, #0
   13784:	d100      	bne.n	13788 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_54+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13786:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13788:	bf00      	nop
   1378a:	b003      	add	sp, #12
   1378c:	f85d fb04 	ldr.w	pc, [sp], #4
   13790:	1fff93b8 	.word	0x1fff93b8
   13794:	1fff93b4 	.word	0x1fff93b4

00013798 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
   13798:	b500      	push	{lr}
   1379a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1379c:	f7ee f890 	bl	18c0 <Sys_GetCoreID>
   137a0:	4603      	mov	r3, r0
   137a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId])
   137a4:	4a10      	ldr	r2, [pc, #64]	; (137e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   137a6:	9b01      	ldr	r3, [sp, #4]
   137a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137ac:	2b00      	cmp	r3, #0
   137ae:	d10d      	bne.n	137cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   137b0:	f7ed f8aa 	bl	908 <Adc_schm_read_msr>
   137b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   137b6:	9b00      	ldr	r3, [sp, #0]
   137b8:	f003 0301 	and.w	r3, r3, #1
   137bc:	2b00      	cmp	r3, #0
   137be:	d100      	bne.n	137c2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   137c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_55[u32CoreId] = msr;
   137c2:	490a      	ldr	r1, [pc, #40]	; (137ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x54>)
   137c4:	9b01      	ldr	r3, [sp, #4]
   137c6:	9a00      	ldr	r2, [sp, #0]
   137c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]++;
   137cc:	4a06      	ldr	r2, [pc, #24]	; (137e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   137ce:	9b01      	ldr	r3, [sp, #4]
   137d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   137d4:	1c5a      	adds	r2, r3, #1
   137d6:	4904      	ldr	r1, [pc, #16]	; (137e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_55+0x50>)
   137d8:	9b01      	ldr	r3, [sp, #4]
   137da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   137de:	bf00      	nop
   137e0:	b003      	add	sp, #12
   137e2:	f85d fb04 	ldr.w	pc, [sp], #4
   137e6:	bf00      	nop
   137e8:	1fff93c0 	.word	0x1fff93c0
   137ec:	1fff93bc 	.word	0x1fff93bc

000137f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55(void)
{
   137f0:	b500      	push	{lr}
   137f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   137f4:	f7ee f864 	bl	18c0 <Sys_GetCoreID>
   137f8:	4603      	mov	r3, r0
   137fa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]--;
   137fc:	4a0d      	ldr	r2, [pc, #52]	; (13834 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   137fe:	9b01      	ldr	r3, [sp, #4]
   13800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13804:	1e5a      	subs	r2, r3, #1
   13806:	490b      	ldr	r1, [pc, #44]	; (13834 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   13808:	9b01      	ldr	r3, [sp, #4]
   1380a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_55[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_55[u32CoreId]))         /*if interrupts were enabled*/
   1380e:	4a0a      	ldr	r2, [pc, #40]	; (13838 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x48>)
   13810:	9b01      	ldr	r3, [sp, #4]
   13812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13816:	f003 0301 	and.w	r3, r3, #1
   1381a:	2b00      	cmp	r3, #0
   1381c:	d106      	bne.n	1382c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
   1381e:	4a05      	ldr	r2, [pc, #20]	; (13834 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x44>)
   13820:	9b01      	ldr	r3, [sp, #4]
   13822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13826:	2b00      	cmp	r3, #0
   13828:	d100      	bne.n	1382c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_55+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1382a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1382c:	bf00      	nop
   1382e:	b003      	add	sp, #12
   13830:	f85d fb04 	ldr.w	pc, [sp], #4
   13834:	1fff93c0 	.word	0x1fff93c0
   13838:	1fff93bc 	.word	0x1fff93bc

0001383c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
   1383c:	b500      	push	{lr}
   1383e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13840:	f7ee f83e 	bl	18c0 <Sys_GetCoreID>
   13844:	4603      	mov	r3, r0
   13846:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId])
   13848:	4a10      	ldr	r2, [pc, #64]	; (1388c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   1384a:	9b01      	ldr	r3, [sp, #4]
   1384c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13850:	2b00      	cmp	r3, #0
   13852:	d10d      	bne.n	13870 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13854:	f7ed f858 	bl	908 <Adc_schm_read_msr>
   13858:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1385a:	9b00      	ldr	r3, [sp, #0]
   1385c:	f003 0301 	and.w	r3, r3, #1
   13860:	2b00      	cmp	r3, #0
   13862:	d100      	bne.n	13866 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13864:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_56[u32CoreId] = msr;
   13866:	490a      	ldr	r1, [pc, #40]	; (13890 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x54>)
   13868:	9b01      	ldr	r3, [sp, #4]
   1386a:	9a00      	ldr	r2, [sp, #0]
   1386c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]++;
   13870:	4a06      	ldr	r2, [pc, #24]	; (1388c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   13872:	9b01      	ldr	r3, [sp, #4]
   13874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13878:	1c5a      	adds	r2, r3, #1
   1387a:	4904      	ldr	r1, [pc, #16]	; (1388c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_56+0x50>)
   1387c:	9b01      	ldr	r3, [sp, #4]
   1387e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13882:	bf00      	nop
   13884:	b003      	add	sp, #12
   13886:	f85d fb04 	ldr.w	pc, [sp], #4
   1388a:	bf00      	nop
   1388c:	1fff93c8 	.word	0x1fff93c8
   13890:	1fff93c4 	.word	0x1fff93c4

00013894 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56(void)
{
   13894:	b500      	push	{lr}
   13896:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13898:	f7ee f812 	bl	18c0 <Sys_GetCoreID>
   1389c:	4603      	mov	r3, r0
   1389e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]--;
   138a0:	4a0d      	ldr	r2, [pc, #52]	; (138d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   138a2:	9b01      	ldr	r3, [sp, #4]
   138a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138a8:	1e5a      	subs	r2, r3, #1
   138aa:	490b      	ldr	r1, [pc, #44]	; (138d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   138ac:	9b01      	ldr	r3, [sp, #4]
   138ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_56[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_56[u32CoreId]))         /*if interrupts were enabled*/
   138b2:	4a0a      	ldr	r2, [pc, #40]	; (138dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x48>)
   138b4:	9b01      	ldr	r3, [sp, #4]
   138b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138ba:	f003 0301 	and.w	r3, r3, #1
   138be:	2b00      	cmp	r3, #0
   138c0:	d106      	bne.n	138d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
   138c2:	4a05      	ldr	r2, [pc, #20]	; (138d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x44>)
   138c4:	9b01      	ldr	r3, [sp, #4]
   138c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138ca:	2b00      	cmp	r3, #0
   138cc:	d100      	bne.n	138d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_56+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   138ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   138d0:	bf00      	nop
   138d2:	b003      	add	sp, #12
   138d4:	f85d fb04 	ldr.w	pc, [sp], #4
   138d8:	1fff93c8 	.word	0x1fff93c8
   138dc:	1fff93c4 	.word	0x1fff93c4

000138e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
   138e0:	b500      	push	{lr}
   138e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   138e4:	f7ed ffec 	bl	18c0 <Sys_GetCoreID>
   138e8:	4603      	mov	r3, r0
   138ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId])
   138ec:	4a10      	ldr	r2, [pc, #64]	; (13930 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   138ee:	9b01      	ldr	r3, [sp, #4]
   138f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   138f4:	2b00      	cmp	r3, #0
   138f6:	d10d      	bne.n	13914 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   138f8:	f7ed f806 	bl	908 <Adc_schm_read_msr>
   138fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   138fe:	9b00      	ldr	r3, [sp, #0]
   13900:	f003 0301 	and.w	r3, r3, #1
   13904:	2b00      	cmp	r3, #0
   13906:	d100      	bne.n	1390a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13908:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_57[u32CoreId] = msr;
   1390a:	490a      	ldr	r1, [pc, #40]	; (13934 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x54>)
   1390c:	9b01      	ldr	r3, [sp, #4]
   1390e:	9a00      	ldr	r2, [sp, #0]
   13910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]++;
   13914:	4a06      	ldr	r2, [pc, #24]	; (13930 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   13916:	9b01      	ldr	r3, [sp, #4]
   13918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1391c:	1c5a      	adds	r2, r3, #1
   1391e:	4904      	ldr	r1, [pc, #16]	; (13930 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_57+0x50>)
   13920:	9b01      	ldr	r3, [sp, #4]
   13922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13926:	bf00      	nop
   13928:	b003      	add	sp, #12
   1392a:	f85d fb04 	ldr.w	pc, [sp], #4
   1392e:	bf00      	nop
   13930:	1fff93d0 	.word	0x1fff93d0
   13934:	1fff93cc 	.word	0x1fff93cc

00013938 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57(void)
{
   13938:	b500      	push	{lr}
   1393a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1393c:	f7ed ffc0 	bl	18c0 <Sys_GetCoreID>
   13940:	4603      	mov	r3, r0
   13942:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]--;
   13944:	4a0d      	ldr	r2, [pc, #52]	; (1397c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   13946:	9b01      	ldr	r3, [sp, #4]
   13948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1394c:	1e5a      	subs	r2, r3, #1
   1394e:	490b      	ldr	r1, [pc, #44]	; (1397c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   13950:	9b01      	ldr	r3, [sp, #4]
   13952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_57[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_57[u32CoreId]))         /*if interrupts were enabled*/
   13956:	4a0a      	ldr	r2, [pc, #40]	; (13980 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x48>)
   13958:	9b01      	ldr	r3, [sp, #4]
   1395a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1395e:	f003 0301 	and.w	r3, r3, #1
   13962:	2b00      	cmp	r3, #0
   13964:	d106      	bne.n	13974 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
   13966:	4a05      	ldr	r2, [pc, #20]	; (1397c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x44>)
   13968:	9b01      	ldr	r3, [sp, #4]
   1396a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1396e:	2b00      	cmp	r3, #0
   13970:	d100      	bne.n	13974 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_57+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13972:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13974:	bf00      	nop
   13976:	b003      	add	sp, #12
   13978:	f85d fb04 	ldr.w	pc, [sp], #4
   1397c:	1fff93d0 	.word	0x1fff93d0
   13980:	1fff93cc 	.word	0x1fff93cc

00013984 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
   13984:	b500      	push	{lr}
   13986:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13988:	f7ed ff9a 	bl	18c0 <Sys_GetCoreID>
   1398c:	4603      	mov	r3, r0
   1398e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId])
   13990:	4a10      	ldr	r2, [pc, #64]	; (139d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   13992:	9b01      	ldr	r3, [sp, #4]
   13994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13998:	2b00      	cmp	r3, #0
   1399a:	d10d      	bne.n	139b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1399c:	f7ec ffb4 	bl	908 <Adc_schm_read_msr>
   139a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   139a2:	9b00      	ldr	r3, [sp, #0]
   139a4:	f003 0301 	and.w	r3, r3, #1
   139a8:	2b00      	cmp	r3, #0
   139aa:	d100      	bne.n	139ae <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   139ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_58[u32CoreId] = msr;
   139ae:	490a      	ldr	r1, [pc, #40]	; (139d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x54>)
   139b0:	9b01      	ldr	r3, [sp, #4]
   139b2:	9a00      	ldr	r2, [sp, #0]
   139b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]++;
   139b8:	4a06      	ldr	r2, [pc, #24]	; (139d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   139ba:	9b01      	ldr	r3, [sp, #4]
   139bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139c0:	1c5a      	adds	r2, r3, #1
   139c2:	4904      	ldr	r1, [pc, #16]	; (139d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_58+0x50>)
   139c4:	9b01      	ldr	r3, [sp, #4]
   139c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   139ca:	bf00      	nop
   139cc:	b003      	add	sp, #12
   139ce:	f85d fb04 	ldr.w	pc, [sp], #4
   139d2:	bf00      	nop
   139d4:	1fff93d8 	.word	0x1fff93d8
   139d8:	1fff93d4 	.word	0x1fff93d4

000139dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58(void)
{
   139dc:	b500      	push	{lr}
   139de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   139e0:	f7ed ff6e 	bl	18c0 <Sys_GetCoreID>
   139e4:	4603      	mov	r3, r0
   139e6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]--;
   139e8:	4a0d      	ldr	r2, [pc, #52]	; (13a20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   139ea:	9b01      	ldr	r3, [sp, #4]
   139ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   139f0:	1e5a      	subs	r2, r3, #1
   139f2:	490b      	ldr	r1, [pc, #44]	; (13a20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   139f4:	9b01      	ldr	r3, [sp, #4]
   139f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_58[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_58[u32CoreId]))         /*if interrupts were enabled*/
   139fa:	4a0a      	ldr	r2, [pc, #40]	; (13a24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x48>)
   139fc:	9b01      	ldr	r3, [sp, #4]
   139fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a02:	f003 0301 	and.w	r3, r3, #1
   13a06:	2b00      	cmp	r3, #0
   13a08:	d106      	bne.n	13a18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
   13a0a:	4a05      	ldr	r2, [pc, #20]	; (13a20 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x44>)
   13a0c:	9b01      	ldr	r3, [sp, #4]
   13a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a12:	2b00      	cmp	r3, #0
   13a14:	d100      	bne.n	13a18 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_58+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13a16:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13a18:	bf00      	nop
   13a1a:	b003      	add	sp, #12
   13a1c:	f85d fb04 	ldr.w	pc, [sp], #4
   13a20:	1fff93d8 	.word	0x1fff93d8
   13a24:	1fff93d4 	.word	0x1fff93d4

00013a28 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
   13a28:	b500      	push	{lr}
   13a2a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13a2c:	f7ed ff48 	bl	18c0 <Sys_GetCoreID>
   13a30:	4603      	mov	r3, r0
   13a32:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId])
   13a34:	4a10      	ldr	r2, [pc, #64]	; (13a78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   13a36:	9b01      	ldr	r3, [sp, #4]
   13a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a3c:	2b00      	cmp	r3, #0
   13a3e:	d10d      	bne.n	13a5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13a40:	f7ec ff62 	bl	908 <Adc_schm_read_msr>
   13a44:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13a46:	9b00      	ldr	r3, [sp, #0]
   13a48:	f003 0301 	and.w	r3, r3, #1
   13a4c:	2b00      	cmp	r3, #0
   13a4e:	d100      	bne.n	13a52 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13a50:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_59[u32CoreId] = msr;
   13a52:	490a      	ldr	r1, [pc, #40]	; (13a7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x54>)
   13a54:	9b01      	ldr	r3, [sp, #4]
   13a56:	9a00      	ldr	r2, [sp, #0]
   13a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]++;
   13a5c:	4a06      	ldr	r2, [pc, #24]	; (13a78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   13a5e:	9b01      	ldr	r3, [sp, #4]
   13a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a64:	1c5a      	adds	r2, r3, #1
   13a66:	4904      	ldr	r1, [pc, #16]	; (13a78 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_59+0x50>)
   13a68:	9b01      	ldr	r3, [sp, #4]
   13a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13a6e:	bf00      	nop
   13a70:	b003      	add	sp, #12
   13a72:	f85d fb04 	ldr.w	pc, [sp], #4
   13a76:	bf00      	nop
   13a78:	1fff93e0 	.word	0x1fff93e0
   13a7c:	1fff93dc 	.word	0x1fff93dc

00013a80 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59(void)
{
   13a80:	b500      	push	{lr}
   13a82:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13a84:	f7ed ff1c 	bl	18c0 <Sys_GetCoreID>
   13a88:	4603      	mov	r3, r0
   13a8a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]--;
   13a8c:	4a0d      	ldr	r2, [pc, #52]	; (13ac4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   13a8e:	9b01      	ldr	r3, [sp, #4]
   13a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13a94:	1e5a      	subs	r2, r3, #1
   13a96:	490b      	ldr	r1, [pc, #44]	; (13ac4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   13a98:	9b01      	ldr	r3, [sp, #4]
   13a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_59[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_59[u32CoreId]))         /*if interrupts were enabled*/
   13a9e:	4a0a      	ldr	r2, [pc, #40]	; (13ac8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x48>)
   13aa0:	9b01      	ldr	r3, [sp, #4]
   13aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13aa6:	f003 0301 	and.w	r3, r3, #1
   13aaa:	2b00      	cmp	r3, #0
   13aac:	d106      	bne.n	13abc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
   13aae:	4a05      	ldr	r2, [pc, #20]	; (13ac4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x44>)
   13ab0:	9b01      	ldr	r3, [sp, #4]
   13ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ab6:	2b00      	cmp	r3, #0
   13ab8:	d100      	bne.n	13abc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_59+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13aba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13abc:	bf00      	nop
   13abe:	b003      	add	sp, #12
   13ac0:	f85d fb04 	ldr.w	pc, [sp], #4
   13ac4:	1fff93e0 	.word	0x1fff93e0
   13ac8:	1fff93dc 	.word	0x1fff93dc

00013acc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
   13acc:	b500      	push	{lr}
   13ace:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13ad0:	f7ed fef6 	bl	18c0 <Sys_GetCoreID>
   13ad4:	4603      	mov	r3, r0
   13ad6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId])
   13ad8:	4a10      	ldr	r2, [pc, #64]	; (13b1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   13ada:	9b01      	ldr	r3, [sp, #4]
   13adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ae0:	2b00      	cmp	r3, #0
   13ae2:	d10d      	bne.n	13b00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13ae4:	f7ec ff10 	bl	908 <Adc_schm_read_msr>
   13ae8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13aea:	9b00      	ldr	r3, [sp, #0]
   13aec:	f003 0301 	and.w	r3, r3, #1
   13af0:	2b00      	cmp	r3, #0
   13af2:	d100      	bne.n	13af6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13af4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_60[u32CoreId] = msr;
   13af6:	490a      	ldr	r1, [pc, #40]	; (13b20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x54>)
   13af8:	9b01      	ldr	r3, [sp, #4]
   13afa:	9a00      	ldr	r2, [sp, #0]
   13afc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]++;
   13b00:	4a06      	ldr	r2, [pc, #24]	; (13b1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   13b02:	9b01      	ldr	r3, [sp, #4]
   13b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b08:	1c5a      	adds	r2, r3, #1
   13b0a:	4904      	ldr	r1, [pc, #16]	; (13b1c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_60+0x50>)
   13b0c:	9b01      	ldr	r3, [sp, #4]
   13b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13b12:	bf00      	nop
   13b14:	b003      	add	sp, #12
   13b16:	f85d fb04 	ldr.w	pc, [sp], #4
   13b1a:	bf00      	nop
   13b1c:	1fff93e8 	.word	0x1fff93e8
   13b20:	1fff93e4 	.word	0x1fff93e4

00013b24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60(void)
{
   13b24:	b500      	push	{lr}
   13b26:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13b28:	f7ed feca 	bl	18c0 <Sys_GetCoreID>
   13b2c:	4603      	mov	r3, r0
   13b2e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]--;
   13b30:	4a0d      	ldr	r2, [pc, #52]	; (13b68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   13b32:	9b01      	ldr	r3, [sp, #4]
   13b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b38:	1e5a      	subs	r2, r3, #1
   13b3a:	490b      	ldr	r1, [pc, #44]	; (13b68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   13b3c:	9b01      	ldr	r3, [sp, #4]
   13b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_60[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_60[u32CoreId]))         /*if interrupts were enabled*/
   13b42:	4a0a      	ldr	r2, [pc, #40]	; (13b6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x48>)
   13b44:	9b01      	ldr	r3, [sp, #4]
   13b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b4a:	f003 0301 	and.w	r3, r3, #1
   13b4e:	2b00      	cmp	r3, #0
   13b50:	d106      	bne.n	13b60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
   13b52:	4a05      	ldr	r2, [pc, #20]	; (13b68 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x44>)
   13b54:	9b01      	ldr	r3, [sp, #4]
   13b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b5a:	2b00      	cmp	r3, #0
   13b5c:	d100      	bne.n	13b60 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_60+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13b5e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13b60:	bf00      	nop
   13b62:	b003      	add	sp, #12
   13b64:	f85d fb04 	ldr.w	pc, [sp], #4
   13b68:	1fff93e8 	.word	0x1fff93e8
   13b6c:	1fff93e4 	.word	0x1fff93e4

00013b70 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
   13b70:	b500      	push	{lr}
   13b72:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13b74:	f7ed fea4 	bl	18c0 <Sys_GetCoreID>
   13b78:	4603      	mov	r3, r0
   13b7a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId])
   13b7c:	4a10      	ldr	r2, [pc, #64]	; (13bc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   13b7e:	9b01      	ldr	r3, [sp, #4]
   13b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13b84:	2b00      	cmp	r3, #0
   13b86:	d10d      	bne.n	13ba4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13b88:	f7ec febe 	bl	908 <Adc_schm_read_msr>
   13b8c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13b8e:	9b00      	ldr	r3, [sp, #0]
   13b90:	f003 0301 	and.w	r3, r3, #1
   13b94:	2b00      	cmp	r3, #0
   13b96:	d100      	bne.n	13b9a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13b98:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_61[u32CoreId] = msr;
   13b9a:	490a      	ldr	r1, [pc, #40]	; (13bc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x54>)
   13b9c:	9b01      	ldr	r3, [sp, #4]
   13b9e:	9a00      	ldr	r2, [sp, #0]
   13ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]++;
   13ba4:	4a06      	ldr	r2, [pc, #24]	; (13bc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   13ba6:	9b01      	ldr	r3, [sp, #4]
   13ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bac:	1c5a      	adds	r2, r3, #1
   13bae:	4904      	ldr	r1, [pc, #16]	; (13bc0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_61+0x50>)
   13bb0:	9b01      	ldr	r3, [sp, #4]
   13bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13bb6:	bf00      	nop
   13bb8:	b003      	add	sp, #12
   13bba:	f85d fb04 	ldr.w	pc, [sp], #4
   13bbe:	bf00      	nop
   13bc0:	1fff93f0 	.word	0x1fff93f0
   13bc4:	1fff93ec 	.word	0x1fff93ec

00013bc8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61(void)
{
   13bc8:	b500      	push	{lr}
   13bca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13bcc:	f7ed fe78 	bl	18c0 <Sys_GetCoreID>
   13bd0:	4603      	mov	r3, r0
   13bd2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]--;
   13bd4:	4a0d      	ldr	r2, [pc, #52]	; (13c0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   13bd6:	9b01      	ldr	r3, [sp, #4]
   13bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bdc:	1e5a      	subs	r2, r3, #1
   13bde:	490b      	ldr	r1, [pc, #44]	; (13c0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   13be0:	9b01      	ldr	r3, [sp, #4]
   13be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_61[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_61[u32CoreId]))         /*if interrupts were enabled*/
   13be6:	4a0a      	ldr	r2, [pc, #40]	; (13c10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x48>)
   13be8:	9b01      	ldr	r3, [sp, #4]
   13bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bee:	f003 0301 	and.w	r3, r3, #1
   13bf2:	2b00      	cmp	r3, #0
   13bf4:	d106      	bne.n	13c04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
   13bf6:	4a05      	ldr	r2, [pc, #20]	; (13c0c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x44>)
   13bf8:	9b01      	ldr	r3, [sp, #4]
   13bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13bfe:	2b00      	cmp	r3, #0
   13c00:	d100      	bne.n	13c04 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_61+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13c02:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13c04:	bf00      	nop
   13c06:	b003      	add	sp, #12
   13c08:	f85d fb04 	ldr.w	pc, [sp], #4
   13c0c:	1fff93f0 	.word	0x1fff93f0
   13c10:	1fff93ec 	.word	0x1fff93ec

00013c14 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
   13c14:	b500      	push	{lr}
   13c16:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13c18:	f7ed fe52 	bl	18c0 <Sys_GetCoreID>
   13c1c:	4603      	mov	r3, r0
   13c1e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId])
   13c20:	4a10      	ldr	r2, [pc, #64]	; (13c64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   13c22:	9b01      	ldr	r3, [sp, #4]
   13c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c28:	2b00      	cmp	r3, #0
   13c2a:	d10d      	bne.n	13c48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13c2c:	f7ec fe6c 	bl	908 <Adc_schm_read_msr>
   13c30:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13c32:	9b00      	ldr	r3, [sp, #0]
   13c34:	f003 0301 	and.w	r3, r3, #1
   13c38:	2b00      	cmp	r3, #0
   13c3a:	d100      	bne.n	13c3e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13c3c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_62[u32CoreId] = msr;
   13c3e:	490a      	ldr	r1, [pc, #40]	; (13c68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x54>)
   13c40:	9b01      	ldr	r3, [sp, #4]
   13c42:	9a00      	ldr	r2, [sp, #0]
   13c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]++;
   13c48:	4a06      	ldr	r2, [pc, #24]	; (13c64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   13c4a:	9b01      	ldr	r3, [sp, #4]
   13c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c50:	1c5a      	adds	r2, r3, #1
   13c52:	4904      	ldr	r1, [pc, #16]	; (13c64 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_62+0x50>)
   13c54:	9b01      	ldr	r3, [sp, #4]
   13c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13c5a:	bf00      	nop
   13c5c:	b003      	add	sp, #12
   13c5e:	f85d fb04 	ldr.w	pc, [sp], #4
   13c62:	bf00      	nop
   13c64:	1fff93f8 	.word	0x1fff93f8
   13c68:	1fff93f4 	.word	0x1fff93f4

00013c6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62(void)
{
   13c6c:	b500      	push	{lr}
   13c6e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13c70:	f7ed fe26 	bl	18c0 <Sys_GetCoreID>
   13c74:	4603      	mov	r3, r0
   13c76:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]--;
   13c78:	4a0d      	ldr	r2, [pc, #52]	; (13cb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   13c7a:	9b01      	ldr	r3, [sp, #4]
   13c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c80:	1e5a      	subs	r2, r3, #1
   13c82:	490b      	ldr	r1, [pc, #44]	; (13cb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   13c84:	9b01      	ldr	r3, [sp, #4]
   13c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_62[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_62[u32CoreId]))         /*if interrupts were enabled*/
   13c8a:	4a0a      	ldr	r2, [pc, #40]	; (13cb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x48>)
   13c8c:	9b01      	ldr	r3, [sp, #4]
   13c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13c92:	f003 0301 	and.w	r3, r3, #1
   13c96:	2b00      	cmp	r3, #0
   13c98:	d106      	bne.n	13ca8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
   13c9a:	4a05      	ldr	r2, [pc, #20]	; (13cb0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x44>)
   13c9c:	9b01      	ldr	r3, [sp, #4]
   13c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ca2:	2b00      	cmp	r3, #0
   13ca4:	d100      	bne.n	13ca8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_62+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13ca6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13ca8:	bf00      	nop
   13caa:	b003      	add	sp, #12
   13cac:	f85d fb04 	ldr.w	pc, [sp], #4
   13cb0:	1fff93f8 	.word	0x1fff93f8
   13cb4:	1fff93f4 	.word	0x1fff93f4

00013cb8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
   13cb8:	b500      	push	{lr}
   13cba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13cbc:	f7ed fe00 	bl	18c0 <Sys_GetCoreID>
   13cc0:	4603      	mov	r3, r0
   13cc2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId])
   13cc4:	4a10      	ldr	r2, [pc, #64]	; (13d08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   13cc6:	9b01      	ldr	r3, [sp, #4]
   13cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ccc:	2b00      	cmp	r3, #0
   13cce:	d10d      	bne.n	13cec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13cd0:	f7ec fe1a 	bl	908 <Adc_schm_read_msr>
   13cd4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13cd6:	9b00      	ldr	r3, [sp, #0]
   13cd8:	f003 0301 	and.w	r3, r3, #1
   13cdc:	2b00      	cmp	r3, #0
   13cde:	d100      	bne.n	13ce2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13ce0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_63[u32CoreId] = msr;
   13ce2:	490a      	ldr	r1, [pc, #40]	; (13d0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x54>)
   13ce4:	9b01      	ldr	r3, [sp, #4]
   13ce6:	9a00      	ldr	r2, [sp, #0]
   13ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]++;
   13cec:	4a06      	ldr	r2, [pc, #24]	; (13d08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   13cee:	9b01      	ldr	r3, [sp, #4]
   13cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13cf4:	1c5a      	adds	r2, r3, #1
   13cf6:	4904      	ldr	r1, [pc, #16]	; (13d08 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_63+0x50>)
   13cf8:	9b01      	ldr	r3, [sp, #4]
   13cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13cfe:	bf00      	nop
   13d00:	b003      	add	sp, #12
   13d02:	f85d fb04 	ldr.w	pc, [sp], #4
   13d06:	bf00      	nop
   13d08:	1fff9400 	.word	0x1fff9400
   13d0c:	1fff93fc 	.word	0x1fff93fc

00013d10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63(void)
{
   13d10:	b500      	push	{lr}
   13d12:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13d14:	f7ed fdd4 	bl	18c0 <Sys_GetCoreID>
   13d18:	4603      	mov	r3, r0
   13d1a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]--;
   13d1c:	4a0d      	ldr	r2, [pc, #52]	; (13d54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   13d1e:	9b01      	ldr	r3, [sp, #4]
   13d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d24:	1e5a      	subs	r2, r3, #1
   13d26:	490b      	ldr	r1, [pc, #44]	; (13d54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   13d28:	9b01      	ldr	r3, [sp, #4]
   13d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_63[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_63[u32CoreId]))         /*if interrupts were enabled*/
   13d2e:	4a0a      	ldr	r2, [pc, #40]	; (13d58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x48>)
   13d30:	9b01      	ldr	r3, [sp, #4]
   13d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d36:	f003 0301 	and.w	r3, r3, #1
   13d3a:	2b00      	cmp	r3, #0
   13d3c:	d106      	bne.n	13d4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
   13d3e:	4a05      	ldr	r2, [pc, #20]	; (13d54 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x44>)
   13d40:	9b01      	ldr	r3, [sp, #4]
   13d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d46:	2b00      	cmp	r3, #0
   13d48:	d100      	bne.n	13d4c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_63+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13d4a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13d4c:	bf00      	nop
   13d4e:	b003      	add	sp, #12
   13d50:	f85d fb04 	ldr.w	pc, [sp], #4
   13d54:	1fff9400 	.word	0x1fff9400
   13d58:	1fff93fc 	.word	0x1fff93fc

00013d5c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
   13d5c:	b500      	push	{lr}
   13d5e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13d60:	f7ed fdae 	bl	18c0 <Sys_GetCoreID>
   13d64:	4603      	mov	r3, r0
   13d66:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId])
   13d68:	4a10      	ldr	r2, [pc, #64]	; (13dac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   13d6a:	9b01      	ldr	r3, [sp, #4]
   13d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d70:	2b00      	cmp	r3, #0
   13d72:	d10d      	bne.n	13d90 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13d74:	f7ec fdc8 	bl	908 <Adc_schm_read_msr>
   13d78:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13d7a:	9b00      	ldr	r3, [sp, #0]
   13d7c:	f003 0301 	and.w	r3, r3, #1
   13d80:	2b00      	cmp	r3, #0
   13d82:	d100      	bne.n	13d86 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13d84:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_64[u32CoreId] = msr;
   13d86:	490a      	ldr	r1, [pc, #40]	; (13db0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x54>)
   13d88:	9b01      	ldr	r3, [sp, #4]
   13d8a:	9a00      	ldr	r2, [sp, #0]
   13d8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]++;
   13d90:	4a06      	ldr	r2, [pc, #24]	; (13dac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   13d92:	9b01      	ldr	r3, [sp, #4]
   13d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13d98:	1c5a      	adds	r2, r3, #1
   13d9a:	4904      	ldr	r1, [pc, #16]	; (13dac <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_64+0x50>)
   13d9c:	9b01      	ldr	r3, [sp, #4]
   13d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13da2:	bf00      	nop
   13da4:	b003      	add	sp, #12
   13da6:	f85d fb04 	ldr.w	pc, [sp], #4
   13daa:	bf00      	nop
   13dac:	1fff9408 	.word	0x1fff9408
   13db0:	1fff9404 	.word	0x1fff9404

00013db4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64(void)
{
   13db4:	b500      	push	{lr}
   13db6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13db8:	f7ed fd82 	bl	18c0 <Sys_GetCoreID>
   13dbc:	4603      	mov	r3, r0
   13dbe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]--;
   13dc0:	4a0d      	ldr	r2, [pc, #52]	; (13df8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   13dc2:	9b01      	ldr	r3, [sp, #4]
   13dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13dc8:	1e5a      	subs	r2, r3, #1
   13dca:	490b      	ldr	r1, [pc, #44]	; (13df8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   13dcc:	9b01      	ldr	r3, [sp, #4]
   13dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_64[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_64[u32CoreId]))         /*if interrupts were enabled*/
   13dd2:	4a0a      	ldr	r2, [pc, #40]	; (13dfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x48>)
   13dd4:	9b01      	ldr	r3, [sp, #4]
   13dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13dda:	f003 0301 	and.w	r3, r3, #1
   13dde:	2b00      	cmp	r3, #0
   13de0:	d106      	bne.n	13df0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
   13de2:	4a05      	ldr	r2, [pc, #20]	; (13df8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x44>)
   13de4:	9b01      	ldr	r3, [sp, #4]
   13de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13dea:	2b00      	cmp	r3, #0
   13dec:	d100      	bne.n	13df0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_64+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13dee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13df0:	bf00      	nop
   13df2:	b003      	add	sp, #12
   13df4:	f85d fb04 	ldr.w	pc, [sp], #4
   13df8:	1fff9408 	.word	0x1fff9408
   13dfc:	1fff9404 	.word	0x1fff9404

00013e00 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
   13e00:	b500      	push	{lr}
   13e02:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13e04:	f7ed fd5c 	bl	18c0 <Sys_GetCoreID>
   13e08:	4603      	mov	r3, r0
   13e0a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId])
   13e0c:	4a10      	ldr	r2, [pc, #64]	; (13e50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   13e0e:	9b01      	ldr	r3, [sp, #4]
   13e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e14:	2b00      	cmp	r3, #0
   13e16:	d10d      	bne.n	13e34 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13e18:	f7ec fd76 	bl	908 <Adc_schm_read_msr>
   13e1c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13e1e:	9b00      	ldr	r3, [sp, #0]
   13e20:	f003 0301 	and.w	r3, r3, #1
   13e24:	2b00      	cmp	r3, #0
   13e26:	d100      	bne.n	13e2a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13e28:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_65[u32CoreId] = msr;
   13e2a:	490a      	ldr	r1, [pc, #40]	; (13e54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x54>)
   13e2c:	9b01      	ldr	r3, [sp, #4]
   13e2e:	9a00      	ldr	r2, [sp, #0]
   13e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]++;
   13e34:	4a06      	ldr	r2, [pc, #24]	; (13e50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   13e36:	9b01      	ldr	r3, [sp, #4]
   13e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e3c:	1c5a      	adds	r2, r3, #1
   13e3e:	4904      	ldr	r1, [pc, #16]	; (13e50 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_65+0x50>)
   13e40:	9b01      	ldr	r3, [sp, #4]
   13e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13e46:	bf00      	nop
   13e48:	b003      	add	sp, #12
   13e4a:	f85d fb04 	ldr.w	pc, [sp], #4
   13e4e:	bf00      	nop
   13e50:	1fff9410 	.word	0x1fff9410
   13e54:	1fff940c 	.word	0x1fff940c

00013e58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65(void)
{
   13e58:	b500      	push	{lr}
   13e5a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13e5c:	f7ed fd30 	bl	18c0 <Sys_GetCoreID>
   13e60:	4603      	mov	r3, r0
   13e62:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]--;
   13e64:	4a0d      	ldr	r2, [pc, #52]	; (13e9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   13e66:	9b01      	ldr	r3, [sp, #4]
   13e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e6c:	1e5a      	subs	r2, r3, #1
   13e6e:	490b      	ldr	r1, [pc, #44]	; (13e9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   13e70:	9b01      	ldr	r3, [sp, #4]
   13e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_65[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_65[u32CoreId]))         /*if interrupts were enabled*/
   13e76:	4a0a      	ldr	r2, [pc, #40]	; (13ea0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x48>)
   13e78:	9b01      	ldr	r3, [sp, #4]
   13e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e7e:	f003 0301 	and.w	r3, r3, #1
   13e82:	2b00      	cmp	r3, #0
   13e84:	d106      	bne.n	13e94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
   13e86:	4a05      	ldr	r2, [pc, #20]	; (13e9c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x44>)
   13e88:	9b01      	ldr	r3, [sp, #4]
   13e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13e8e:	2b00      	cmp	r3, #0
   13e90:	d100      	bne.n	13e94 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_65+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13e92:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13e94:	bf00      	nop
   13e96:	b003      	add	sp, #12
   13e98:	f85d fb04 	ldr.w	pc, [sp], #4
   13e9c:	1fff9410 	.word	0x1fff9410
   13ea0:	1fff940c 	.word	0x1fff940c

00013ea4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
   13ea4:	b500      	push	{lr}
   13ea6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13ea8:	f7ed fd0a 	bl	18c0 <Sys_GetCoreID>
   13eac:	4603      	mov	r3, r0
   13eae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId])
   13eb0:	4a10      	ldr	r2, [pc, #64]	; (13ef4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   13eb2:	9b01      	ldr	r3, [sp, #4]
   13eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13eb8:	2b00      	cmp	r3, #0
   13eba:	d10d      	bne.n	13ed8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13ebc:	f7ec fd24 	bl	908 <Adc_schm_read_msr>
   13ec0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13ec2:	9b00      	ldr	r3, [sp, #0]
   13ec4:	f003 0301 	and.w	r3, r3, #1
   13ec8:	2b00      	cmp	r3, #0
   13eca:	d100      	bne.n	13ece <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13ecc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_66[u32CoreId] = msr;
   13ece:	490a      	ldr	r1, [pc, #40]	; (13ef8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x54>)
   13ed0:	9b01      	ldr	r3, [sp, #4]
   13ed2:	9a00      	ldr	r2, [sp, #0]
   13ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]++;
   13ed8:	4a06      	ldr	r2, [pc, #24]	; (13ef4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   13eda:	9b01      	ldr	r3, [sp, #4]
   13edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13ee0:	1c5a      	adds	r2, r3, #1
   13ee2:	4904      	ldr	r1, [pc, #16]	; (13ef4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_66+0x50>)
   13ee4:	9b01      	ldr	r3, [sp, #4]
   13ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13eea:	bf00      	nop
   13eec:	b003      	add	sp, #12
   13eee:	f85d fb04 	ldr.w	pc, [sp], #4
   13ef2:	bf00      	nop
   13ef4:	1fff9418 	.word	0x1fff9418
   13ef8:	1fff9414 	.word	0x1fff9414

00013efc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66(void)
{
   13efc:	b500      	push	{lr}
   13efe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13f00:	f7ed fcde 	bl	18c0 <Sys_GetCoreID>
   13f04:	4603      	mov	r3, r0
   13f06:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]--;
   13f08:	4a0d      	ldr	r2, [pc, #52]	; (13f40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   13f0a:	9b01      	ldr	r3, [sp, #4]
   13f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f10:	1e5a      	subs	r2, r3, #1
   13f12:	490b      	ldr	r1, [pc, #44]	; (13f40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   13f14:	9b01      	ldr	r3, [sp, #4]
   13f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_66[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_66[u32CoreId]))         /*if interrupts were enabled*/
   13f1a:	4a0a      	ldr	r2, [pc, #40]	; (13f44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x48>)
   13f1c:	9b01      	ldr	r3, [sp, #4]
   13f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f22:	f003 0301 	and.w	r3, r3, #1
   13f26:	2b00      	cmp	r3, #0
   13f28:	d106      	bne.n	13f38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
   13f2a:	4a05      	ldr	r2, [pc, #20]	; (13f40 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x44>)
   13f2c:	9b01      	ldr	r3, [sp, #4]
   13f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f32:	2b00      	cmp	r3, #0
   13f34:	d100      	bne.n	13f38 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_66+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13f36:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13f38:	bf00      	nop
   13f3a:	b003      	add	sp, #12
   13f3c:	f85d fb04 	ldr.w	pc, [sp], #4
   13f40:	1fff9418 	.word	0x1fff9418
   13f44:	1fff9414 	.word	0x1fff9414

00013f48 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
   13f48:	b500      	push	{lr}
   13f4a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13f4c:	f7ed fcb8 	bl	18c0 <Sys_GetCoreID>
   13f50:	4603      	mov	r3, r0
   13f52:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId])
   13f54:	4a10      	ldr	r2, [pc, #64]	; (13f98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   13f56:	9b01      	ldr	r3, [sp, #4]
   13f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f5c:	2b00      	cmp	r3, #0
   13f5e:	d10d      	bne.n	13f7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   13f60:	f7ec fcd2 	bl	908 <Adc_schm_read_msr>
   13f64:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   13f66:	9b00      	ldr	r3, [sp, #0]
   13f68:	f003 0301 	and.w	r3, r3, #1
   13f6c:	2b00      	cmp	r3, #0
   13f6e:	d100      	bne.n	13f72 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   13f70:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_67[u32CoreId] = msr;
   13f72:	490a      	ldr	r1, [pc, #40]	; (13f9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x54>)
   13f74:	9b01      	ldr	r3, [sp, #4]
   13f76:	9a00      	ldr	r2, [sp, #0]
   13f78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]++;
   13f7c:	4a06      	ldr	r2, [pc, #24]	; (13f98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   13f7e:	9b01      	ldr	r3, [sp, #4]
   13f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13f84:	1c5a      	adds	r2, r3, #1
   13f86:	4904      	ldr	r1, [pc, #16]	; (13f98 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_67+0x50>)
   13f88:	9b01      	ldr	r3, [sp, #4]
   13f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   13f8e:	bf00      	nop
   13f90:	b003      	add	sp, #12
   13f92:	f85d fb04 	ldr.w	pc, [sp], #4
   13f96:	bf00      	nop
   13f98:	1fff9420 	.word	0x1fff9420
   13f9c:	1fff941c 	.word	0x1fff941c

00013fa0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67(void)
{
   13fa0:	b500      	push	{lr}
   13fa2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13fa4:	f7ed fc8c 	bl	18c0 <Sys_GetCoreID>
   13fa8:	4603      	mov	r3, r0
   13faa:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]--;
   13fac:	4a0d      	ldr	r2, [pc, #52]	; (13fe4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   13fae:	9b01      	ldr	r3, [sp, #4]
   13fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13fb4:	1e5a      	subs	r2, r3, #1
   13fb6:	490b      	ldr	r1, [pc, #44]	; (13fe4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   13fb8:	9b01      	ldr	r3, [sp, #4]
   13fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_67[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_67[u32CoreId]))         /*if interrupts were enabled*/
   13fbe:	4a0a      	ldr	r2, [pc, #40]	; (13fe8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x48>)
   13fc0:	9b01      	ldr	r3, [sp, #4]
   13fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13fc6:	f003 0301 	and.w	r3, r3, #1
   13fca:	2b00      	cmp	r3, #0
   13fcc:	d106      	bne.n	13fdc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
   13fce:	4a05      	ldr	r2, [pc, #20]	; (13fe4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x44>)
   13fd0:	9b01      	ldr	r3, [sp, #4]
   13fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13fd6:	2b00      	cmp	r3, #0
   13fd8:	d100      	bne.n	13fdc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_67+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   13fda:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   13fdc:	bf00      	nop
   13fde:	b003      	add	sp, #12
   13fe0:	f85d fb04 	ldr.w	pc, [sp], #4
   13fe4:	1fff9420 	.word	0x1fff9420
   13fe8:	1fff941c 	.word	0x1fff941c

00013fec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
   13fec:	b500      	push	{lr}
   13fee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   13ff0:	f7ed fc66 	bl	18c0 <Sys_GetCoreID>
   13ff4:	4603      	mov	r3, r0
   13ff6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId])
   13ff8:	4a10      	ldr	r2, [pc, #64]	; (1403c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   13ffa:	9b01      	ldr	r3, [sp, #4]
   13ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14000:	2b00      	cmp	r3, #0
   14002:	d10d      	bne.n	14020 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14004:	f7ec fc80 	bl	908 <Adc_schm_read_msr>
   14008:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1400a:	9b00      	ldr	r3, [sp, #0]
   1400c:	f003 0301 	and.w	r3, r3, #1
   14010:	2b00      	cmp	r3, #0
   14012:	d100      	bne.n	14016 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14014:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_68[u32CoreId] = msr;
   14016:	490a      	ldr	r1, [pc, #40]	; (14040 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x54>)
   14018:	9b01      	ldr	r3, [sp, #4]
   1401a:	9a00      	ldr	r2, [sp, #0]
   1401c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]++;
   14020:	4a06      	ldr	r2, [pc, #24]	; (1403c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   14022:	9b01      	ldr	r3, [sp, #4]
   14024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14028:	1c5a      	adds	r2, r3, #1
   1402a:	4904      	ldr	r1, [pc, #16]	; (1403c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_68+0x50>)
   1402c:	9b01      	ldr	r3, [sp, #4]
   1402e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14032:	bf00      	nop
   14034:	b003      	add	sp, #12
   14036:	f85d fb04 	ldr.w	pc, [sp], #4
   1403a:	bf00      	nop
   1403c:	1fff9428 	.word	0x1fff9428
   14040:	1fff9424 	.word	0x1fff9424

00014044 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68(void)
{
   14044:	b500      	push	{lr}
   14046:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14048:	f7ed fc3a 	bl	18c0 <Sys_GetCoreID>
   1404c:	4603      	mov	r3, r0
   1404e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]--;
   14050:	4a0d      	ldr	r2, [pc, #52]	; (14088 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   14052:	9b01      	ldr	r3, [sp, #4]
   14054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14058:	1e5a      	subs	r2, r3, #1
   1405a:	490b      	ldr	r1, [pc, #44]	; (14088 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   1405c:	9b01      	ldr	r3, [sp, #4]
   1405e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_68[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_68[u32CoreId]))         /*if interrupts were enabled*/
   14062:	4a0a      	ldr	r2, [pc, #40]	; (1408c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x48>)
   14064:	9b01      	ldr	r3, [sp, #4]
   14066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1406a:	f003 0301 	and.w	r3, r3, #1
   1406e:	2b00      	cmp	r3, #0
   14070:	d106      	bne.n	14080 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
   14072:	4a05      	ldr	r2, [pc, #20]	; (14088 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x44>)
   14074:	9b01      	ldr	r3, [sp, #4]
   14076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1407a:	2b00      	cmp	r3, #0
   1407c:	d100      	bne.n	14080 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_68+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1407e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14080:	bf00      	nop
   14082:	b003      	add	sp, #12
   14084:	f85d fb04 	ldr.w	pc, [sp], #4
   14088:	1fff9428 	.word	0x1fff9428
   1408c:	1fff9424 	.word	0x1fff9424

00014090 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
   14090:	b500      	push	{lr}
   14092:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14094:	f7ed fc14 	bl	18c0 <Sys_GetCoreID>
   14098:	4603      	mov	r3, r0
   1409a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId])
   1409c:	4a10      	ldr	r2, [pc, #64]	; (140e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   1409e:	9b01      	ldr	r3, [sp, #4]
   140a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140a4:	2b00      	cmp	r3, #0
   140a6:	d10d      	bne.n	140c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   140a8:	f7ec fc2e 	bl	908 <Adc_schm_read_msr>
   140ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   140ae:	9b00      	ldr	r3, [sp, #0]
   140b0:	f003 0301 	and.w	r3, r3, #1
   140b4:	2b00      	cmp	r3, #0
   140b6:	d100      	bne.n	140ba <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   140b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_69[u32CoreId] = msr;
   140ba:	490a      	ldr	r1, [pc, #40]	; (140e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x54>)
   140bc:	9b01      	ldr	r3, [sp, #4]
   140be:	9a00      	ldr	r2, [sp, #0]
   140c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]++;
   140c4:	4a06      	ldr	r2, [pc, #24]	; (140e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   140c6:	9b01      	ldr	r3, [sp, #4]
   140c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140cc:	1c5a      	adds	r2, r3, #1
   140ce:	4904      	ldr	r1, [pc, #16]	; (140e0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_69+0x50>)
   140d0:	9b01      	ldr	r3, [sp, #4]
   140d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   140d6:	bf00      	nop
   140d8:	b003      	add	sp, #12
   140da:	f85d fb04 	ldr.w	pc, [sp], #4
   140de:	bf00      	nop
   140e0:	1fff9430 	.word	0x1fff9430
   140e4:	1fff942c 	.word	0x1fff942c

000140e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69(void)
{
   140e8:	b500      	push	{lr}
   140ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   140ec:	f7ed fbe8 	bl	18c0 <Sys_GetCoreID>
   140f0:	4603      	mov	r3, r0
   140f2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]--;
   140f4:	4a0d      	ldr	r2, [pc, #52]	; (1412c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   140f6:	9b01      	ldr	r3, [sp, #4]
   140f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   140fc:	1e5a      	subs	r2, r3, #1
   140fe:	490b      	ldr	r1, [pc, #44]	; (1412c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   14100:	9b01      	ldr	r3, [sp, #4]
   14102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_69[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_69[u32CoreId]))         /*if interrupts were enabled*/
   14106:	4a0a      	ldr	r2, [pc, #40]	; (14130 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x48>)
   14108:	9b01      	ldr	r3, [sp, #4]
   1410a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1410e:	f003 0301 	and.w	r3, r3, #1
   14112:	2b00      	cmp	r3, #0
   14114:	d106      	bne.n	14124 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
   14116:	4a05      	ldr	r2, [pc, #20]	; (1412c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x44>)
   14118:	9b01      	ldr	r3, [sp, #4]
   1411a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1411e:	2b00      	cmp	r3, #0
   14120:	d100      	bne.n	14124 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_69+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14122:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14124:	bf00      	nop
   14126:	b003      	add	sp, #12
   14128:	f85d fb04 	ldr.w	pc, [sp], #4
   1412c:	1fff9430 	.word	0x1fff9430
   14130:	1fff942c 	.word	0x1fff942c

00014134 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
   14134:	b500      	push	{lr}
   14136:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14138:	f7ed fbc2 	bl	18c0 <Sys_GetCoreID>
   1413c:	4603      	mov	r3, r0
   1413e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId])
   14140:	4a10      	ldr	r2, [pc, #64]	; (14184 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   14142:	9b01      	ldr	r3, [sp, #4]
   14144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14148:	2b00      	cmp	r3, #0
   1414a:	d10d      	bne.n	14168 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1414c:	f7ec fbdc 	bl	908 <Adc_schm_read_msr>
   14150:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14152:	9b00      	ldr	r3, [sp, #0]
   14154:	f003 0301 	and.w	r3, r3, #1
   14158:	2b00      	cmp	r3, #0
   1415a:	d100      	bne.n	1415e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1415c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_70[u32CoreId] = msr;
   1415e:	490a      	ldr	r1, [pc, #40]	; (14188 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x54>)
   14160:	9b01      	ldr	r3, [sp, #4]
   14162:	9a00      	ldr	r2, [sp, #0]
   14164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]++;
   14168:	4a06      	ldr	r2, [pc, #24]	; (14184 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   1416a:	9b01      	ldr	r3, [sp, #4]
   1416c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14170:	1c5a      	adds	r2, r3, #1
   14172:	4904      	ldr	r1, [pc, #16]	; (14184 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_70+0x50>)
   14174:	9b01      	ldr	r3, [sp, #4]
   14176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1417a:	bf00      	nop
   1417c:	b003      	add	sp, #12
   1417e:	f85d fb04 	ldr.w	pc, [sp], #4
   14182:	bf00      	nop
   14184:	1fff9438 	.word	0x1fff9438
   14188:	1fff9434 	.word	0x1fff9434

0001418c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70(void)
{
   1418c:	b500      	push	{lr}
   1418e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14190:	f7ed fb96 	bl	18c0 <Sys_GetCoreID>
   14194:	4603      	mov	r3, r0
   14196:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]--;
   14198:	4a0d      	ldr	r2, [pc, #52]	; (141d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   1419a:	9b01      	ldr	r3, [sp, #4]
   1419c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141a0:	1e5a      	subs	r2, r3, #1
   141a2:	490b      	ldr	r1, [pc, #44]	; (141d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   141a4:	9b01      	ldr	r3, [sp, #4]
   141a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_70[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_70[u32CoreId]))         /*if interrupts were enabled*/
   141aa:	4a0a      	ldr	r2, [pc, #40]	; (141d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x48>)
   141ac:	9b01      	ldr	r3, [sp, #4]
   141ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141b2:	f003 0301 	and.w	r3, r3, #1
   141b6:	2b00      	cmp	r3, #0
   141b8:	d106      	bne.n	141c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
   141ba:	4a05      	ldr	r2, [pc, #20]	; (141d0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x44>)
   141bc:	9b01      	ldr	r3, [sp, #4]
   141be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141c2:	2b00      	cmp	r3, #0
   141c4:	d100      	bne.n	141c8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_70+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   141c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   141c8:	bf00      	nop
   141ca:	b003      	add	sp, #12
   141cc:	f85d fb04 	ldr.w	pc, [sp], #4
   141d0:	1fff9438 	.word	0x1fff9438
   141d4:	1fff9434 	.word	0x1fff9434

000141d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
   141d8:	b500      	push	{lr}
   141da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   141dc:	f7ed fb70 	bl	18c0 <Sys_GetCoreID>
   141e0:	4603      	mov	r3, r0
   141e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId])
   141e4:	4a10      	ldr	r2, [pc, #64]	; (14228 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   141e6:	9b01      	ldr	r3, [sp, #4]
   141e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   141ec:	2b00      	cmp	r3, #0
   141ee:	d10d      	bne.n	1420c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   141f0:	f7ec fb8a 	bl	908 <Adc_schm_read_msr>
   141f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   141f6:	9b00      	ldr	r3, [sp, #0]
   141f8:	f003 0301 	and.w	r3, r3, #1
   141fc:	2b00      	cmp	r3, #0
   141fe:	d100      	bne.n	14202 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14200:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_71[u32CoreId] = msr;
   14202:	490a      	ldr	r1, [pc, #40]	; (1422c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x54>)
   14204:	9b01      	ldr	r3, [sp, #4]
   14206:	9a00      	ldr	r2, [sp, #0]
   14208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]++;
   1420c:	4a06      	ldr	r2, [pc, #24]	; (14228 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   1420e:	9b01      	ldr	r3, [sp, #4]
   14210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14214:	1c5a      	adds	r2, r3, #1
   14216:	4904      	ldr	r1, [pc, #16]	; (14228 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_71+0x50>)
   14218:	9b01      	ldr	r3, [sp, #4]
   1421a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1421e:	bf00      	nop
   14220:	b003      	add	sp, #12
   14222:	f85d fb04 	ldr.w	pc, [sp], #4
   14226:	bf00      	nop
   14228:	1fff9440 	.word	0x1fff9440
   1422c:	1fff943c 	.word	0x1fff943c

00014230 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71(void)
{
   14230:	b500      	push	{lr}
   14232:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14234:	f7ed fb44 	bl	18c0 <Sys_GetCoreID>
   14238:	4603      	mov	r3, r0
   1423a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]--;
   1423c:	4a0d      	ldr	r2, [pc, #52]	; (14274 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   1423e:	9b01      	ldr	r3, [sp, #4]
   14240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14244:	1e5a      	subs	r2, r3, #1
   14246:	490b      	ldr	r1, [pc, #44]	; (14274 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   14248:	9b01      	ldr	r3, [sp, #4]
   1424a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_71[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_71[u32CoreId]))         /*if interrupts were enabled*/
   1424e:	4a0a      	ldr	r2, [pc, #40]	; (14278 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x48>)
   14250:	9b01      	ldr	r3, [sp, #4]
   14252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14256:	f003 0301 	and.w	r3, r3, #1
   1425a:	2b00      	cmp	r3, #0
   1425c:	d106      	bne.n	1426c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
   1425e:	4a05      	ldr	r2, [pc, #20]	; (14274 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x44>)
   14260:	9b01      	ldr	r3, [sp, #4]
   14262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14266:	2b00      	cmp	r3, #0
   14268:	d100      	bne.n	1426c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_71+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1426a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1426c:	bf00      	nop
   1426e:	b003      	add	sp, #12
   14270:	f85d fb04 	ldr.w	pc, [sp], #4
   14274:	1fff9440 	.word	0x1fff9440
   14278:	1fff943c 	.word	0x1fff943c

0001427c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
   1427c:	b500      	push	{lr}
   1427e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14280:	f7ed fb1e 	bl	18c0 <Sys_GetCoreID>
   14284:	4603      	mov	r3, r0
   14286:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId])
   14288:	4a10      	ldr	r2, [pc, #64]	; (142cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   1428a:	9b01      	ldr	r3, [sp, #4]
   1428c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14290:	2b00      	cmp	r3, #0
   14292:	d10d      	bne.n	142b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14294:	f7ec fb38 	bl	908 <Adc_schm_read_msr>
   14298:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1429a:	9b00      	ldr	r3, [sp, #0]
   1429c:	f003 0301 	and.w	r3, r3, #1
   142a0:	2b00      	cmp	r3, #0
   142a2:	d100      	bne.n	142a6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   142a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_72[u32CoreId] = msr;
   142a6:	490a      	ldr	r1, [pc, #40]	; (142d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x54>)
   142a8:	9b01      	ldr	r3, [sp, #4]
   142aa:	9a00      	ldr	r2, [sp, #0]
   142ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]++;
   142b0:	4a06      	ldr	r2, [pc, #24]	; (142cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   142b2:	9b01      	ldr	r3, [sp, #4]
   142b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142b8:	1c5a      	adds	r2, r3, #1
   142ba:	4904      	ldr	r1, [pc, #16]	; (142cc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_72+0x50>)
   142bc:	9b01      	ldr	r3, [sp, #4]
   142be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   142c2:	bf00      	nop
   142c4:	b003      	add	sp, #12
   142c6:	f85d fb04 	ldr.w	pc, [sp], #4
   142ca:	bf00      	nop
   142cc:	1fff9448 	.word	0x1fff9448
   142d0:	1fff9444 	.word	0x1fff9444

000142d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72(void)
{
   142d4:	b500      	push	{lr}
   142d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   142d8:	f7ed faf2 	bl	18c0 <Sys_GetCoreID>
   142dc:	4603      	mov	r3, r0
   142de:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]--;
   142e0:	4a0d      	ldr	r2, [pc, #52]	; (14318 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   142e2:	9b01      	ldr	r3, [sp, #4]
   142e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142e8:	1e5a      	subs	r2, r3, #1
   142ea:	490b      	ldr	r1, [pc, #44]	; (14318 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   142ec:	9b01      	ldr	r3, [sp, #4]
   142ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_72[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_72[u32CoreId]))         /*if interrupts were enabled*/
   142f2:	4a0a      	ldr	r2, [pc, #40]	; (1431c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x48>)
   142f4:	9b01      	ldr	r3, [sp, #4]
   142f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   142fa:	f003 0301 	and.w	r3, r3, #1
   142fe:	2b00      	cmp	r3, #0
   14300:	d106      	bne.n	14310 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
   14302:	4a05      	ldr	r2, [pc, #20]	; (14318 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x44>)
   14304:	9b01      	ldr	r3, [sp, #4]
   14306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1430a:	2b00      	cmp	r3, #0
   1430c:	d100      	bne.n	14310 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_72+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1430e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14310:	bf00      	nop
   14312:	b003      	add	sp, #12
   14314:	f85d fb04 	ldr.w	pc, [sp], #4
   14318:	1fff9448 	.word	0x1fff9448
   1431c:	1fff9444 	.word	0x1fff9444

00014320 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
   14320:	b500      	push	{lr}
   14322:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14324:	f7ed facc 	bl	18c0 <Sys_GetCoreID>
   14328:	4603      	mov	r3, r0
   1432a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId])
   1432c:	4a10      	ldr	r2, [pc, #64]	; (14370 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   1432e:	9b01      	ldr	r3, [sp, #4]
   14330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14334:	2b00      	cmp	r3, #0
   14336:	d10d      	bne.n	14354 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14338:	f7ec fae6 	bl	908 <Adc_schm_read_msr>
   1433c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1433e:	9b00      	ldr	r3, [sp, #0]
   14340:	f003 0301 	and.w	r3, r3, #1
   14344:	2b00      	cmp	r3, #0
   14346:	d100      	bne.n	1434a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14348:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_73[u32CoreId] = msr;
   1434a:	490a      	ldr	r1, [pc, #40]	; (14374 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x54>)
   1434c:	9b01      	ldr	r3, [sp, #4]
   1434e:	9a00      	ldr	r2, [sp, #0]
   14350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]++;
   14354:	4a06      	ldr	r2, [pc, #24]	; (14370 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   14356:	9b01      	ldr	r3, [sp, #4]
   14358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1435c:	1c5a      	adds	r2, r3, #1
   1435e:	4904      	ldr	r1, [pc, #16]	; (14370 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_73+0x50>)
   14360:	9b01      	ldr	r3, [sp, #4]
   14362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14366:	bf00      	nop
   14368:	b003      	add	sp, #12
   1436a:	f85d fb04 	ldr.w	pc, [sp], #4
   1436e:	bf00      	nop
   14370:	1fff9450 	.word	0x1fff9450
   14374:	1fff944c 	.word	0x1fff944c

00014378 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73(void)
{
   14378:	b500      	push	{lr}
   1437a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1437c:	f7ed faa0 	bl	18c0 <Sys_GetCoreID>
   14380:	4603      	mov	r3, r0
   14382:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]--;
   14384:	4a0d      	ldr	r2, [pc, #52]	; (143bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   14386:	9b01      	ldr	r3, [sp, #4]
   14388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1438c:	1e5a      	subs	r2, r3, #1
   1438e:	490b      	ldr	r1, [pc, #44]	; (143bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   14390:	9b01      	ldr	r3, [sp, #4]
   14392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_73[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_73[u32CoreId]))         /*if interrupts were enabled*/
   14396:	4a0a      	ldr	r2, [pc, #40]	; (143c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x48>)
   14398:	9b01      	ldr	r3, [sp, #4]
   1439a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1439e:	f003 0301 	and.w	r3, r3, #1
   143a2:	2b00      	cmp	r3, #0
   143a4:	d106      	bne.n	143b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
   143a6:	4a05      	ldr	r2, [pc, #20]	; (143bc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x44>)
   143a8:	9b01      	ldr	r3, [sp, #4]
   143aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143ae:	2b00      	cmp	r3, #0
   143b0:	d100      	bne.n	143b4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_73+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   143b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   143b4:	bf00      	nop
   143b6:	b003      	add	sp, #12
   143b8:	f85d fb04 	ldr.w	pc, [sp], #4
   143bc:	1fff9450 	.word	0x1fff9450
   143c0:	1fff944c 	.word	0x1fff944c

000143c4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
   143c4:	b500      	push	{lr}
   143c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   143c8:	f7ed fa7a 	bl	18c0 <Sys_GetCoreID>
   143cc:	4603      	mov	r3, r0
   143ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId])
   143d0:	4a10      	ldr	r2, [pc, #64]	; (14414 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   143d2:	9b01      	ldr	r3, [sp, #4]
   143d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   143d8:	2b00      	cmp	r3, #0
   143da:	d10d      	bne.n	143f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   143dc:	f7ec fa94 	bl	908 <Adc_schm_read_msr>
   143e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   143e2:	9b00      	ldr	r3, [sp, #0]
   143e4:	f003 0301 	and.w	r3, r3, #1
   143e8:	2b00      	cmp	r3, #0
   143ea:	d100      	bne.n	143ee <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   143ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_74[u32CoreId] = msr;
   143ee:	490a      	ldr	r1, [pc, #40]	; (14418 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x54>)
   143f0:	9b01      	ldr	r3, [sp, #4]
   143f2:	9a00      	ldr	r2, [sp, #0]
   143f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]++;
   143f8:	4a06      	ldr	r2, [pc, #24]	; (14414 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   143fa:	9b01      	ldr	r3, [sp, #4]
   143fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14400:	1c5a      	adds	r2, r3, #1
   14402:	4904      	ldr	r1, [pc, #16]	; (14414 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_74+0x50>)
   14404:	9b01      	ldr	r3, [sp, #4]
   14406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1440a:	bf00      	nop
   1440c:	b003      	add	sp, #12
   1440e:	f85d fb04 	ldr.w	pc, [sp], #4
   14412:	bf00      	nop
   14414:	1fff9458 	.word	0x1fff9458
   14418:	1fff9454 	.word	0x1fff9454

0001441c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74(void)
{
   1441c:	b500      	push	{lr}
   1441e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14420:	f7ed fa4e 	bl	18c0 <Sys_GetCoreID>
   14424:	4603      	mov	r3, r0
   14426:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]--;
   14428:	4a0d      	ldr	r2, [pc, #52]	; (14460 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   1442a:	9b01      	ldr	r3, [sp, #4]
   1442c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14430:	1e5a      	subs	r2, r3, #1
   14432:	490b      	ldr	r1, [pc, #44]	; (14460 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   14434:	9b01      	ldr	r3, [sp, #4]
   14436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_74[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_74[u32CoreId]))         /*if interrupts were enabled*/
   1443a:	4a0a      	ldr	r2, [pc, #40]	; (14464 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x48>)
   1443c:	9b01      	ldr	r3, [sp, #4]
   1443e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14442:	f003 0301 	and.w	r3, r3, #1
   14446:	2b00      	cmp	r3, #0
   14448:	d106      	bne.n	14458 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
   1444a:	4a05      	ldr	r2, [pc, #20]	; (14460 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x44>)
   1444c:	9b01      	ldr	r3, [sp, #4]
   1444e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14452:	2b00      	cmp	r3, #0
   14454:	d100      	bne.n	14458 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_74+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14456:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14458:	bf00      	nop
   1445a:	b003      	add	sp, #12
   1445c:	f85d fb04 	ldr.w	pc, [sp], #4
   14460:	1fff9458 	.word	0x1fff9458
   14464:	1fff9454 	.word	0x1fff9454

00014468 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
   14468:	b500      	push	{lr}
   1446a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1446c:	f7ed fa28 	bl	18c0 <Sys_GetCoreID>
   14470:	4603      	mov	r3, r0
   14472:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId])
   14474:	4a10      	ldr	r2, [pc, #64]	; (144b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   14476:	9b01      	ldr	r3, [sp, #4]
   14478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1447c:	2b00      	cmp	r3, #0
   1447e:	d10d      	bne.n	1449c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14480:	f7ec fa42 	bl	908 <Adc_schm_read_msr>
   14484:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14486:	9b00      	ldr	r3, [sp, #0]
   14488:	f003 0301 	and.w	r3, r3, #1
   1448c:	2b00      	cmp	r3, #0
   1448e:	d100      	bne.n	14492 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14490:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_75[u32CoreId] = msr;
   14492:	490a      	ldr	r1, [pc, #40]	; (144bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x54>)
   14494:	9b01      	ldr	r3, [sp, #4]
   14496:	9a00      	ldr	r2, [sp, #0]
   14498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]++;
   1449c:	4a06      	ldr	r2, [pc, #24]	; (144b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   1449e:	9b01      	ldr	r3, [sp, #4]
   144a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144a4:	1c5a      	adds	r2, r3, #1
   144a6:	4904      	ldr	r1, [pc, #16]	; (144b8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_75+0x50>)
   144a8:	9b01      	ldr	r3, [sp, #4]
   144aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   144ae:	bf00      	nop
   144b0:	b003      	add	sp, #12
   144b2:	f85d fb04 	ldr.w	pc, [sp], #4
   144b6:	bf00      	nop
   144b8:	1fff9460 	.word	0x1fff9460
   144bc:	1fff945c 	.word	0x1fff945c

000144c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75(void)
{
   144c0:	b500      	push	{lr}
   144c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   144c4:	f7ed f9fc 	bl	18c0 <Sys_GetCoreID>
   144c8:	4603      	mov	r3, r0
   144ca:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]--;
   144cc:	4a0d      	ldr	r2, [pc, #52]	; (14504 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   144ce:	9b01      	ldr	r3, [sp, #4]
   144d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144d4:	1e5a      	subs	r2, r3, #1
   144d6:	490b      	ldr	r1, [pc, #44]	; (14504 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   144d8:	9b01      	ldr	r3, [sp, #4]
   144da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_75[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_75[u32CoreId]))         /*if interrupts were enabled*/
   144de:	4a0a      	ldr	r2, [pc, #40]	; (14508 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x48>)
   144e0:	9b01      	ldr	r3, [sp, #4]
   144e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144e6:	f003 0301 	and.w	r3, r3, #1
   144ea:	2b00      	cmp	r3, #0
   144ec:	d106      	bne.n	144fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
   144ee:	4a05      	ldr	r2, [pc, #20]	; (14504 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x44>)
   144f0:	9b01      	ldr	r3, [sp, #4]
   144f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   144f6:	2b00      	cmp	r3, #0
   144f8:	d100      	bne.n	144fc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_75+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   144fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   144fc:	bf00      	nop
   144fe:	b003      	add	sp, #12
   14500:	f85d fb04 	ldr.w	pc, [sp], #4
   14504:	1fff9460 	.word	0x1fff9460
   14508:	1fff945c 	.word	0x1fff945c

0001450c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
   1450c:	b500      	push	{lr}
   1450e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14510:	f7ed f9d6 	bl	18c0 <Sys_GetCoreID>
   14514:	4603      	mov	r3, r0
   14516:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId])
   14518:	4a10      	ldr	r2, [pc, #64]	; (1455c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   1451a:	9b01      	ldr	r3, [sp, #4]
   1451c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14520:	2b00      	cmp	r3, #0
   14522:	d10d      	bne.n	14540 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14524:	f7ec f9f0 	bl	908 <Adc_schm_read_msr>
   14528:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1452a:	9b00      	ldr	r3, [sp, #0]
   1452c:	f003 0301 	and.w	r3, r3, #1
   14530:	2b00      	cmp	r3, #0
   14532:	d100      	bne.n	14536 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14534:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_76[u32CoreId] = msr;
   14536:	490a      	ldr	r1, [pc, #40]	; (14560 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x54>)
   14538:	9b01      	ldr	r3, [sp, #4]
   1453a:	9a00      	ldr	r2, [sp, #0]
   1453c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]++;
   14540:	4a06      	ldr	r2, [pc, #24]	; (1455c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   14542:	9b01      	ldr	r3, [sp, #4]
   14544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14548:	1c5a      	adds	r2, r3, #1
   1454a:	4904      	ldr	r1, [pc, #16]	; (1455c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_76+0x50>)
   1454c:	9b01      	ldr	r3, [sp, #4]
   1454e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14552:	bf00      	nop
   14554:	b003      	add	sp, #12
   14556:	f85d fb04 	ldr.w	pc, [sp], #4
   1455a:	bf00      	nop
   1455c:	1fff9468 	.word	0x1fff9468
   14560:	1fff9464 	.word	0x1fff9464

00014564 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76(void)
{
   14564:	b500      	push	{lr}
   14566:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14568:	f7ed f9aa 	bl	18c0 <Sys_GetCoreID>
   1456c:	4603      	mov	r3, r0
   1456e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]--;
   14570:	4a0d      	ldr	r2, [pc, #52]	; (145a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   14572:	9b01      	ldr	r3, [sp, #4]
   14574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14578:	1e5a      	subs	r2, r3, #1
   1457a:	490b      	ldr	r1, [pc, #44]	; (145a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   1457c:	9b01      	ldr	r3, [sp, #4]
   1457e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_76[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_76[u32CoreId]))         /*if interrupts were enabled*/
   14582:	4a0a      	ldr	r2, [pc, #40]	; (145ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x48>)
   14584:	9b01      	ldr	r3, [sp, #4]
   14586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1458a:	f003 0301 	and.w	r3, r3, #1
   1458e:	2b00      	cmp	r3, #0
   14590:	d106      	bne.n	145a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
   14592:	4a05      	ldr	r2, [pc, #20]	; (145a8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x44>)
   14594:	9b01      	ldr	r3, [sp, #4]
   14596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1459a:	2b00      	cmp	r3, #0
   1459c:	d100      	bne.n	145a0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_76+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1459e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   145a0:	bf00      	nop
   145a2:	b003      	add	sp, #12
   145a4:	f85d fb04 	ldr.w	pc, [sp], #4
   145a8:	1fff9468 	.word	0x1fff9468
   145ac:	1fff9464 	.word	0x1fff9464

000145b0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
   145b0:	b500      	push	{lr}
   145b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   145b4:	f7ed f984 	bl	18c0 <Sys_GetCoreID>
   145b8:	4603      	mov	r3, r0
   145ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId])
   145bc:	4a10      	ldr	r2, [pc, #64]	; (14600 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   145be:	9b01      	ldr	r3, [sp, #4]
   145c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145c4:	2b00      	cmp	r3, #0
   145c6:	d10d      	bne.n	145e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   145c8:	f7ec f99e 	bl	908 <Adc_schm_read_msr>
   145cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   145ce:	9b00      	ldr	r3, [sp, #0]
   145d0:	f003 0301 	and.w	r3, r3, #1
   145d4:	2b00      	cmp	r3, #0
   145d6:	d100      	bne.n	145da <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   145d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_77[u32CoreId] = msr;
   145da:	490a      	ldr	r1, [pc, #40]	; (14604 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x54>)
   145dc:	9b01      	ldr	r3, [sp, #4]
   145de:	9a00      	ldr	r2, [sp, #0]
   145e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]++;
   145e4:	4a06      	ldr	r2, [pc, #24]	; (14600 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   145e6:	9b01      	ldr	r3, [sp, #4]
   145e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   145ec:	1c5a      	adds	r2, r3, #1
   145ee:	4904      	ldr	r1, [pc, #16]	; (14600 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_77+0x50>)
   145f0:	9b01      	ldr	r3, [sp, #4]
   145f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   145f6:	bf00      	nop
   145f8:	b003      	add	sp, #12
   145fa:	f85d fb04 	ldr.w	pc, [sp], #4
   145fe:	bf00      	nop
   14600:	1fff9470 	.word	0x1fff9470
   14604:	1fff946c 	.word	0x1fff946c

00014608 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77(void)
{
   14608:	b500      	push	{lr}
   1460a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1460c:	f7ed f958 	bl	18c0 <Sys_GetCoreID>
   14610:	4603      	mov	r3, r0
   14612:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]--;
   14614:	4a0d      	ldr	r2, [pc, #52]	; (1464c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   14616:	9b01      	ldr	r3, [sp, #4]
   14618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1461c:	1e5a      	subs	r2, r3, #1
   1461e:	490b      	ldr	r1, [pc, #44]	; (1464c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   14620:	9b01      	ldr	r3, [sp, #4]
   14622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_77[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_77[u32CoreId]))         /*if interrupts were enabled*/
   14626:	4a0a      	ldr	r2, [pc, #40]	; (14650 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x48>)
   14628:	9b01      	ldr	r3, [sp, #4]
   1462a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1462e:	f003 0301 	and.w	r3, r3, #1
   14632:	2b00      	cmp	r3, #0
   14634:	d106      	bne.n	14644 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
   14636:	4a05      	ldr	r2, [pc, #20]	; (1464c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x44>)
   14638:	9b01      	ldr	r3, [sp, #4]
   1463a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1463e:	2b00      	cmp	r3, #0
   14640:	d100      	bne.n	14644 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_77+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14642:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14644:	bf00      	nop
   14646:	b003      	add	sp, #12
   14648:	f85d fb04 	ldr.w	pc, [sp], #4
   1464c:	1fff9470 	.word	0x1fff9470
   14650:	1fff946c 	.word	0x1fff946c

00014654 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
   14654:	b500      	push	{lr}
   14656:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14658:	f7ed f932 	bl	18c0 <Sys_GetCoreID>
   1465c:	4603      	mov	r3, r0
   1465e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId])
   14660:	4a10      	ldr	r2, [pc, #64]	; (146a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   14662:	9b01      	ldr	r3, [sp, #4]
   14664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14668:	2b00      	cmp	r3, #0
   1466a:	d10d      	bne.n	14688 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1466c:	f7ec f94c 	bl	908 <Adc_schm_read_msr>
   14670:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14672:	9b00      	ldr	r3, [sp, #0]
   14674:	f003 0301 	and.w	r3, r3, #1
   14678:	2b00      	cmp	r3, #0
   1467a:	d100      	bne.n	1467e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1467c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_78[u32CoreId] = msr;
   1467e:	490a      	ldr	r1, [pc, #40]	; (146a8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x54>)
   14680:	9b01      	ldr	r3, [sp, #4]
   14682:	9a00      	ldr	r2, [sp, #0]
   14684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]++;
   14688:	4a06      	ldr	r2, [pc, #24]	; (146a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   1468a:	9b01      	ldr	r3, [sp, #4]
   1468c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14690:	1c5a      	adds	r2, r3, #1
   14692:	4904      	ldr	r1, [pc, #16]	; (146a4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_78+0x50>)
   14694:	9b01      	ldr	r3, [sp, #4]
   14696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1469a:	bf00      	nop
   1469c:	b003      	add	sp, #12
   1469e:	f85d fb04 	ldr.w	pc, [sp], #4
   146a2:	bf00      	nop
   146a4:	1fff9478 	.word	0x1fff9478
   146a8:	1fff9474 	.word	0x1fff9474

000146ac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78(void)
{
   146ac:	b500      	push	{lr}
   146ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   146b0:	f7ed f906 	bl	18c0 <Sys_GetCoreID>
   146b4:	4603      	mov	r3, r0
   146b6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]--;
   146b8:	4a0d      	ldr	r2, [pc, #52]	; (146f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   146ba:	9b01      	ldr	r3, [sp, #4]
   146bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146c0:	1e5a      	subs	r2, r3, #1
   146c2:	490b      	ldr	r1, [pc, #44]	; (146f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   146c4:	9b01      	ldr	r3, [sp, #4]
   146c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_78[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_78[u32CoreId]))         /*if interrupts were enabled*/
   146ca:	4a0a      	ldr	r2, [pc, #40]	; (146f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x48>)
   146cc:	9b01      	ldr	r3, [sp, #4]
   146ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146d2:	f003 0301 	and.w	r3, r3, #1
   146d6:	2b00      	cmp	r3, #0
   146d8:	d106      	bne.n	146e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
   146da:	4a05      	ldr	r2, [pc, #20]	; (146f0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x44>)
   146dc:	9b01      	ldr	r3, [sp, #4]
   146de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   146e2:	2b00      	cmp	r3, #0
   146e4:	d100      	bne.n	146e8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_78+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   146e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   146e8:	bf00      	nop
   146ea:	b003      	add	sp, #12
   146ec:	f85d fb04 	ldr.w	pc, [sp], #4
   146f0:	1fff9478 	.word	0x1fff9478
   146f4:	1fff9474 	.word	0x1fff9474

000146f8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
   146f8:	b500      	push	{lr}
   146fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   146fc:	f7ed f8e0 	bl	18c0 <Sys_GetCoreID>
   14700:	4603      	mov	r3, r0
   14702:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId])
   14704:	4a10      	ldr	r2, [pc, #64]	; (14748 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   14706:	9b01      	ldr	r3, [sp, #4]
   14708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1470c:	2b00      	cmp	r3, #0
   1470e:	d10d      	bne.n	1472c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14710:	f7ec f8fa 	bl	908 <Adc_schm_read_msr>
   14714:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14716:	9b00      	ldr	r3, [sp, #0]
   14718:	f003 0301 	and.w	r3, r3, #1
   1471c:	2b00      	cmp	r3, #0
   1471e:	d100      	bne.n	14722 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14720:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_79[u32CoreId] = msr;
   14722:	490a      	ldr	r1, [pc, #40]	; (1474c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x54>)
   14724:	9b01      	ldr	r3, [sp, #4]
   14726:	9a00      	ldr	r2, [sp, #0]
   14728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]++;
   1472c:	4a06      	ldr	r2, [pc, #24]	; (14748 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   1472e:	9b01      	ldr	r3, [sp, #4]
   14730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14734:	1c5a      	adds	r2, r3, #1
   14736:	4904      	ldr	r1, [pc, #16]	; (14748 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_79+0x50>)
   14738:	9b01      	ldr	r3, [sp, #4]
   1473a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1473e:	bf00      	nop
   14740:	b003      	add	sp, #12
   14742:	f85d fb04 	ldr.w	pc, [sp], #4
   14746:	bf00      	nop
   14748:	1fff9480 	.word	0x1fff9480
   1474c:	1fff947c 	.word	0x1fff947c

00014750 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79(void)
{
   14750:	b500      	push	{lr}
   14752:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14754:	f7ed f8b4 	bl	18c0 <Sys_GetCoreID>
   14758:	4603      	mov	r3, r0
   1475a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]--;
   1475c:	4a0d      	ldr	r2, [pc, #52]	; (14794 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   1475e:	9b01      	ldr	r3, [sp, #4]
   14760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14764:	1e5a      	subs	r2, r3, #1
   14766:	490b      	ldr	r1, [pc, #44]	; (14794 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   14768:	9b01      	ldr	r3, [sp, #4]
   1476a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_79[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_79[u32CoreId]))         /*if interrupts were enabled*/
   1476e:	4a0a      	ldr	r2, [pc, #40]	; (14798 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x48>)
   14770:	9b01      	ldr	r3, [sp, #4]
   14772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14776:	f003 0301 	and.w	r3, r3, #1
   1477a:	2b00      	cmp	r3, #0
   1477c:	d106      	bne.n	1478c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
   1477e:	4a05      	ldr	r2, [pc, #20]	; (14794 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x44>)
   14780:	9b01      	ldr	r3, [sp, #4]
   14782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14786:	2b00      	cmp	r3, #0
   14788:	d100      	bne.n	1478c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_79+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1478a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1478c:	bf00      	nop
   1478e:	b003      	add	sp, #12
   14790:	f85d fb04 	ldr.w	pc, [sp], #4
   14794:	1fff9480 	.word	0x1fff9480
   14798:	1fff947c 	.word	0x1fff947c

0001479c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
   1479c:	b500      	push	{lr}
   1479e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   147a0:	f7ed f88e 	bl	18c0 <Sys_GetCoreID>
   147a4:	4603      	mov	r3, r0
   147a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId])
   147a8:	4a10      	ldr	r2, [pc, #64]	; (147ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   147aa:	9b01      	ldr	r3, [sp, #4]
   147ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147b0:	2b00      	cmp	r3, #0
   147b2:	d10d      	bne.n	147d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   147b4:	f7ec f8a8 	bl	908 <Adc_schm_read_msr>
   147b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   147ba:	9b00      	ldr	r3, [sp, #0]
   147bc:	f003 0301 	and.w	r3, r3, #1
   147c0:	2b00      	cmp	r3, #0
   147c2:	d100      	bne.n	147c6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   147c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_80[u32CoreId] = msr;
   147c6:	490a      	ldr	r1, [pc, #40]	; (147f0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x54>)
   147c8:	9b01      	ldr	r3, [sp, #4]
   147ca:	9a00      	ldr	r2, [sp, #0]
   147cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]++;
   147d0:	4a06      	ldr	r2, [pc, #24]	; (147ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   147d2:	9b01      	ldr	r3, [sp, #4]
   147d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   147d8:	1c5a      	adds	r2, r3, #1
   147da:	4904      	ldr	r1, [pc, #16]	; (147ec <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_80+0x50>)
   147dc:	9b01      	ldr	r3, [sp, #4]
   147de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   147e2:	bf00      	nop
   147e4:	b003      	add	sp, #12
   147e6:	f85d fb04 	ldr.w	pc, [sp], #4
   147ea:	bf00      	nop
   147ec:	1fff9488 	.word	0x1fff9488
   147f0:	1fff9484 	.word	0x1fff9484

000147f4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80(void)
{
   147f4:	b500      	push	{lr}
   147f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   147f8:	f7ed f862 	bl	18c0 <Sys_GetCoreID>
   147fc:	4603      	mov	r3, r0
   147fe:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]--;
   14800:	4a0d      	ldr	r2, [pc, #52]	; (14838 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   14802:	9b01      	ldr	r3, [sp, #4]
   14804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14808:	1e5a      	subs	r2, r3, #1
   1480a:	490b      	ldr	r1, [pc, #44]	; (14838 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   1480c:	9b01      	ldr	r3, [sp, #4]
   1480e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_80[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_80[u32CoreId]))         /*if interrupts were enabled*/
   14812:	4a0a      	ldr	r2, [pc, #40]	; (1483c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x48>)
   14814:	9b01      	ldr	r3, [sp, #4]
   14816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1481a:	f003 0301 	and.w	r3, r3, #1
   1481e:	2b00      	cmp	r3, #0
   14820:	d106      	bne.n	14830 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
   14822:	4a05      	ldr	r2, [pc, #20]	; (14838 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x44>)
   14824:	9b01      	ldr	r3, [sp, #4]
   14826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1482a:	2b00      	cmp	r3, #0
   1482c:	d100      	bne.n	14830 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_80+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1482e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14830:	bf00      	nop
   14832:	b003      	add	sp, #12
   14834:	f85d fb04 	ldr.w	pc, [sp], #4
   14838:	1fff9488 	.word	0x1fff9488
   1483c:	1fff9484 	.word	0x1fff9484

00014840 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
   14840:	b500      	push	{lr}
   14842:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14844:	f7ed f83c 	bl	18c0 <Sys_GetCoreID>
   14848:	4603      	mov	r3, r0
   1484a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId])
   1484c:	4a10      	ldr	r2, [pc, #64]	; (14890 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   1484e:	9b01      	ldr	r3, [sp, #4]
   14850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14854:	2b00      	cmp	r3, #0
   14856:	d10d      	bne.n	14874 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14858:	f7ec f856 	bl	908 <Adc_schm_read_msr>
   1485c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1485e:	9b00      	ldr	r3, [sp, #0]
   14860:	f003 0301 	and.w	r3, r3, #1
   14864:	2b00      	cmp	r3, #0
   14866:	d100      	bne.n	1486a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14868:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_81[u32CoreId] = msr;
   1486a:	490a      	ldr	r1, [pc, #40]	; (14894 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x54>)
   1486c:	9b01      	ldr	r3, [sp, #4]
   1486e:	9a00      	ldr	r2, [sp, #0]
   14870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]++;
   14874:	4a06      	ldr	r2, [pc, #24]	; (14890 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   14876:	9b01      	ldr	r3, [sp, #4]
   14878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1487c:	1c5a      	adds	r2, r3, #1
   1487e:	4904      	ldr	r1, [pc, #16]	; (14890 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_81+0x50>)
   14880:	9b01      	ldr	r3, [sp, #4]
   14882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14886:	bf00      	nop
   14888:	b003      	add	sp, #12
   1488a:	f85d fb04 	ldr.w	pc, [sp], #4
   1488e:	bf00      	nop
   14890:	1fff9490 	.word	0x1fff9490
   14894:	1fff948c 	.word	0x1fff948c

00014898 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81(void)
{
   14898:	b500      	push	{lr}
   1489a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1489c:	f7ed f810 	bl	18c0 <Sys_GetCoreID>
   148a0:	4603      	mov	r3, r0
   148a2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]--;
   148a4:	4a0d      	ldr	r2, [pc, #52]	; (148dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   148a6:	9b01      	ldr	r3, [sp, #4]
   148a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148ac:	1e5a      	subs	r2, r3, #1
   148ae:	490b      	ldr	r1, [pc, #44]	; (148dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   148b0:	9b01      	ldr	r3, [sp, #4]
   148b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_81[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_81[u32CoreId]))         /*if interrupts were enabled*/
   148b6:	4a0a      	ldr	r2, [pc, #40]	; (148e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x48>)
   148b8:	9b01      	ldr	r3, [sp, #4]
   148ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148be:	f003 0301 	and.w	r3, r3, #1
   148c2:	2b00      	cmp	r3, #0
   148c4:	d106      	bne.n	148d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
   148c6:	4a05      	ldr	r2, [pc, #20]	; (148dc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x44>)
   148c8:	9b01      	ldr	r3, [sp, #4]
   148ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148ce:	2b00      	cmp	r3, #0
   148d0:	d100      	bne.n	148d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_81+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   148d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   148d4:	bf00      	nop
   148d6:	b003      	add	sp, #12
   148d8:	f85d fb04 	ldr.w	pc, [sp], #4
   148dc:	1fff9490 	.word	0x1fff9490
   148e0:	1fff948c 	.word	0x1fff948c

000148e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
   148e4:	b500      	push	{lr}
   148e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   148e8:	f7ec ffea 	bl	18c0 <Sys_GetCoreID>
   148ec:	4603      	mov	r3, r0
   148ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId])
   148f0:	4a10      	ldr	r2, [pc, #64]	; (14934 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   148f2:	9b01      	ldr	r3, [sp, #4]
   148f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   148f8:	2b00      	cmp	r3, #0
   148fa:	d10d      	bne.n	14918 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   148fc:	f7ec f804 	bl	908 <Adc_schm_read_msr>
   14900:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14902:	9b00      	ldr	r3, [sp, #0]
   14904:	f003 0301 	and.w	r3, r3, #1
   14908:	2b00      	cmp	r3, #0
   1490a:	d100      	bne.n	1490e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1490c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_82[u32CoreId] = msr;
   1490e:	490a      	ldr	r1, [pc, #40]	; (14938 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x54>)
   14910:	9b01      	ldr	r3, [sp, #4]
   14912:	9a00      	ldr	r2, [sp, #0]
   14914:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]++;
   14918:	4a06      	ldr	r2, [pc, #24]	; (14934 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   1491a:	9b01      	ldr	r3, [sp, #4]
   1491c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14920:	1c5a      	adds	r2, r3, #1
   14922:	4904      	ldr	r1, [pc, #16]	; (14934 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_82+0x50>)
   14924:	9b01      	ldr	r3, [sp, #4]
   14926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1492a:	bf00      	nop
   1492c:	b003      	add	sp, #12
   1492e:	f85d fb04 	ldr.w	pc, [sp], #4
   14932:	bf00      	nop
   14934:	1fff9498 	.word	0x1fff9498
   14938:	1fff9494 	.word	0x1fff9494

0001493c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82(void)
{
   1493c:	b500      	push	{lr}
   1493e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14940:	f7ec ffbe 	bl	18c0 <Sys_GetCoreID>
   14944:	4603      	mov	r3, r0
   14946:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]--;
   14948:	4a0d      	ldr	r2, [pc, #52]	; (14980 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   1494a:	9b01      	ldr	r3, [sp, #4]
   1494c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14950:	1e5a      	subs	r2, r3, #1
   14952:	490b      	ldr	r1, [pc, #44]	; (14980 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   14954:	9b01      	ldr	r3, [sp, #4]
   14956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_82[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_82[u32CoreId]))         /*if interrupts were enabled*/
   1495a:	4a0a      	ldr	r2, [pc, #40]	; (14984 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x48>)
   1495c:	9b01      	ldr	r3, [sp, #4]
   1495e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14962:	f003 0301 	and.w	r3, r3, #1
   14966:	2b00      	cmp	r3, #0
   14968:	d106      	bne.n	14978 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
   1496a:	4a05      	ldr	r2, [pc, #20]	; (14980 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x44>)
   1496c:	9b01      	ldr	r3, [sp, #4]
   1496e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14972:	2b00      	cmp	r3, #0
   14974:	d100      	bne.n	14978 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_82+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14976:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14978:	bf00      	nop
   1497a:	b003      	add	sp, #12
   1497c:	f85d fb04 	ldr.w	pc, [sp], #4
   14980:	1fff9498 	.word	0x1fff9498
   14984:	1fff9494 	.word	0x1fff9494

00014988 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
   14988:	b500      	push	{lr}
   1498a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1498c:	f7ec ff98 	bl	18c0 <Sys_GetCoreID>
   14990:	4603      	mov	r3, r0
   14992:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId])
   14994:	4a10      	ldr	r2, [pc, #64]	; (149d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   14996:	9b01      	ldr	r3, [sp, #4]
   14998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1499c:	2b00      	cmp	r3, #0
   1499e:	d10d      	bne.n	149bc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   149a0:	f7eb ffb2 	bl	908 <Adc_schm_read_msr>
   149a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   149a6:	9b00      	ldr	r3, [sp, #0]
   149a8:	f003 0301 	and.w	r3, r3, #1
   149ac:	2b00      	cmp	r3, #0
   149ae:	d100      	bne.n	149b2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   149b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_83[u32CoreId] = msr;
   149b2:	490a      	ldr	r1, [pc, #40]	; (149dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x54>)
   149b4:	9b01      	ldr	r3, [sp, #4]
   149b6:	9a00      	ldr	r2, [sp, #0]
   149b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]++;
   149bc:	4a06      	ldr	r2, [pc, #24]	; (149d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   149be:	9b01      	ldr	r3, [sp, #4]
   149c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149c4:	1c5a      	adds	r2, r3, #1
   149c6:	4904      	ldr	r1, [pc, #16]	; (149d8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_83+0x50>)
   149c8:	9b01      	ldr	r3, [sp, #4]
   149ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   149ce:	bf00      	nop
   149d0:	b003      	add	sp, #12
   149d2:	f85d fb04 	ldr.w	pc, [sp], #4
   149d6:	bf00      	nop
   149d8:	1fff94a0 	.word	0x1fff94a0
   149dc:	1fff949c 	.word	0x1fff949c

000149e0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83(void)
{
   149e0:	b500      	push	{lr}
   149e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   149e4:	f7ec ff6c 	bl	18c0 <Sys_GetCoreID>
   149e8:	4603      	mov	r3, r0
   149ea:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]--;
   149ec:	4a0d      	ldr	r2, [pc, #52]	; (14a24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   149ee:	9b01      	ldr	r3, [sp, #4]
   149f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   149f4:	1e5a      	subs	r2, r3, #1
   149f6:	490b      	ldr	r1, [pc, #44]	; (14a24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   149f8:	9b01      	ldr	r3, [sp, #4]
   149fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_83[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_83[u32CoreId]))         /*if interrupts were enabled*/
   149fe:	4a0a      	ldr	r2, [pc, #40]	; (14a28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x48>)
   14a00:	9b01      	ldr	r3, [sp, #4]
   14a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a06:	f003 0301 	and.w	r3, r3, #1
   14a0a:	2b00      	cmp	r3, #0
   14a0c:	d106      	bne.n	14a1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
   14a0e:	4a05      	ldr	r2, [pc, #20]	; (14a24 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x44>)
   14a10:	9b01      	ldr	r3, [sp, #4]
   14a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a16:	2b00      	cmp	r3, #0
   14a18:	d100      	bne.n	14a1c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_83+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14a1a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14a1c:	bf00      	nop
   14a1e:	b003      	add	sp, #12
   14a20:	f85d fb04 	ldr.w	pc, [sp], #4
   14a24:	1fff94a0 	.word	0x1fff94a0
   14a28:	1fff949c 	.word	0x1fff949c

00014a2c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
   14a2c:	b500      	push	{lr}
   14a2e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14a30:	f7ec ff46 	bl	18c0 <Sys_GetCoreID>
   14a34:	4603      	mov	r3, r0
   14a36:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId])
   14a38:	4a10      	ldr	r2, [pc, #64]	; (14a7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   14a3a:	9b01      	ldr	r3, [sp, #4]
   14a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a40:	2b00      	cmp	r3, #0
   14a42:	d10d      	bne.n	14a60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14a44:	f7eb ff60 	bl	908 <Adc_schm_read_msr>
   14a48:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14a4a:	9b00      	ldr	r3, [sp, #0]
   14a4c:	f003 0301 	and.w	r3, r3, #1
   14a50:	2b00      	cmp	r3, #0
   14a52:	d100      	bne.n	14a56 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14a54:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_84[u32CoreId] = msr;
   14a56:	490a      	ldr	r1, [pc, #40]	; (14a80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x54>)
   14a58:	9b01      	ldr	r3, [sp, #4]
   14a5a:	9a00      	ldr	r2, [sp, #0]
   14a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]++;
   14a60:	4a06      	ldr	r2, [pc, #24]	; (14a7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   14a62:	9b01      	ldr	r3, [sp, #4]
   14a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a68:	1c5a      	adds	r2, r3, #1
   14a6a:	4904      	ldr	r1, [pc, #16]	; (14a7c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_84+0x50>)
   14a6c:	9b01      	ldr	r3, [sp, #4]
   14a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14a72:	bf00      	nop
   14a74:	b003      	add	sp, #12
   14a76:	f85d fb04 	ldr.w	pc, [sp], #4
   14a7a:	bf00      	nop
   14a7c:	1fff94a8 	.word	0x1fff94a8
   14a80:	1fff94a4 	.word	0x1fff94a4

00014a84 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84(void)
{
   14a84:	b500      	push	{lr}
   14a86:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14a88:	f7ec ff1a 	bl	18c0 <Sys_GetCoreID>
   14a8c:	4603      	mov	r3, r0
   14a8e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]--;
   14a90:	4a0d      	ldr	r2, [pc, #52]	; (14ac8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   14a92:	9b01      	ldr	r3, [sp, #4]
   14a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14a98:	1e5a      	subs	r2, r3, #1
   14a9a:	490b      	ldr	r1, [pc, #44]	; (14ac8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   14a9c:	9b01      	ldr	r3, [sp, #4]
   14a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_84[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_84[u32CoreId]))         /*if interrupts were enabled*/
   14aa2:	4a0a      	ldr	r2, [pc, #40]	; (14acc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x48>)
   14aa4:	9b01      	ldr	r3, [sp, #4]
   14aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14aaa:	f003 0301 	and.w	r3, r3, #1
   14aae:	2b00      	cmp	r3, #0
   14ab0:	d106      	bne.n	14ac0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
   14ab2:	4a05      	ldr	r2, [pc, #20]	; (14ac8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x44>)
   14ab4:	9b01      	ldr	r3, [sp, #4]
   14ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14aba:	2b00      	cmp	r3, #0
   14abc:	d100      	bne.n	14ac0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_84+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14abe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14ac0:	bf00      	nop
   14ac2:	b003      	add	sp, #12
   14ac4:	f85d fb04 	ldr.w	pc, [sp], #4
   14ac8:	1fff94a8 	.word	0x1fff94a8
   14acc:	1fff94a4 	.word	0x1fff94a4

00014ad0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
   14ad0:	b500      	push	{lr}
   14ad2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14ad4:	f7ec fef4 	bl	18c0 <Sys_GetCoreID>
   14ad8:	4603      	mov	r3, r0
   14ada:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId])
   14adc:	4a10      	ldr	r2, [pc, #64]	; (14b20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   14ade:	9b01      	ldr	r3, [sp, #4]
   14ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ae4:	2b00      	cmp	r3, #0
   14ae6:	d10d      	bne.n	14b04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14ae8:	f7eb ff0e 	bl	908 <Adc_schm_read_msr>
   14aec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14aee:	9b00      	ldr	r3, [sp, #0]
   14af0:	f003 0301 	and.w	r3, r3, #1
   14af4:	2b00      	cmp	r3, #0
   14af6:	d100      	bne.n	14afa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14af8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_85[u32CoreId] = msr;
   14afa:	490a      	ldr	r1, [pc, #40]	; (14b24 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x54>)
   14afc:	9b01      	ldr	r3, [sp, #4]
   14afe:	9a00      	ldr	r2, [sp, #0]
   14b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]++;
   14b04:	4a06      	ldr	r2, [pc, #24]	; (14b20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   14b06:	9b01      	ldr	r3, [sp, #4]
   14b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b0c:	1c5a      	adds	r2, r3, #1
   14b0e:	4904      	ldr	r1, [pc, #16]	; (14b20 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_85+0x50>)
   14b10:	9b01      	ldr	r3, [sp, #4]
   14b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14b16:	bf00      	nop
   14b18:	b003      	add	sp, #12
   14b1a:	f85d fb04 	ldr.w	pc, [sp], #4
   14b1e:	bf00      	nop
   14b20:	1fff94b0 	.word	0x1fff94b0
   14b24:	1fff94ac 	.word	0x1fff94ac

00014b28 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85(void)
{
   14b28:	b500      	push	{lr}
   14b2a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14b2c:	f7ec fec8 	bl	18c0 <Sys_GetCoreID>
   14b30:	4603      	mov	r3, r0
   14b32:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]--;
   14b34:	4a0d      	ldr	r2, [pc, #52]	; (14b6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   14b36:	9b01      	ldr	r3, [sp, #4]
   14b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b3c:	1e5a      	subs	r2, r3, #1
   14b3e:	490b      	ldr	r1, [pc, #44]	; (14b6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   14b40:	9b01      	ldr	r3, [sp, #4]
   14b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_85[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_85[u32CoreId]))         /*if interrupts were enabled*/
   14b46:	4a0a      	ldr	r2, [pc, #40]	; (14b70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x48>)
   14b48:	9b01      	ldr	r3, [sp, #4]
   14b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b4e:	f003 0301 	and.w	r3, r3, #1
   14b52:	2b00      	cmp	r3, #0
   14b54:	d106      	bne.n	14b64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
   14b56:	4a05      	ldr	r2, [pc, #20]	; (14b6c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x44>)
   14b58:	9b01      	ldr	r3, [sp, #4]
   14b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b5e:	2b00      	cmp	r3, #0
   14b60:	d100      	bne.n	14b64 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_85+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14b62:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14b64:	bf00      	nop
   14b66:	b003      	add	sp, #12
   14b68:	f85d fb04 	ldr.w	pc, [sp], #4
   14b6c:	1fff94b0 	.word	0x1fff94b0
   14b70:	1fff94ac 	.word	0x1fff94ac

00014b74 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
   14b74:	b500      	push	{lr}
   14b76:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14b78:	f7ec fea2 	bl	18c0 <Sys_GetCoreID>
   14b7c:	4603      	mov	r3, r0
   14b7e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId])
   14b80:	4a10      	ldr	r2, [pc, #64]	; (14bc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   14b82:	9b01      	ldr	r3, [sp, #4]
   14b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14b88:	2b00      	cmp	r3, #0
   14b8a:	d10d      	bne.n	14ba8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14b8c:	f7eb febc 	bl	908 <Adc_schm_read_msr>
   14b90:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14b92:	9b00      	ldr	r3, [sp, #0]
   14b94:	f003 0301 	and.w	r3, r3, #1
   14b98:	2b00      	cmp	r3, #0
   14b9a:	d100      	bne.n	14b9e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14b9c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_86[u32CoreId] = msr;
   14b9e:	490a      	ldr	r1, [pc, #40]	; (14bc8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x54>)
   14ba0:	9b01      	ldr	r3, [sp, #4]
   14ba2:	9a00      	ldr	r2, [sp, #0]
   14ba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]++;
   14ba8:	4a06      	ldr	r2, [pc, #24]	; (14bc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   14baa:	9b01      	ldr	r3, [sp, #4]
   14bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14bb0:	1c5a      	adds	r2, r3, #1
   14bb2:	4904      	ldr	r1, [pc, #16]	; (14bc4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_86+0x50>)
   14bb4:	9b01      	ldr	r3, [sp, #4]
   14bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14bba:	bf00      	nop
   14bbc:	b003      	add	sp, #12
   14bbe:	f85d fb04 	ldr.w	pc, [sp], #4
   14bc2:	bf00      	nop
   14bc4:	1fff94b8 	.word	0x1fff94b8
   14bc8:	1fff94b4 	.word	0x1fff94b4

00014bcc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86(void)
{
   14bcc:	b500      	push	{lr}
   14bce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14bd0:	f7ec fe76 	bl	18c0 <Sys_GetCoreID>
   14bd4:	4603      	mov	r3, r0
   14bd6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]--;
   14bd8:	4a0d      	ldr	r2, [pc, #52]	; (14c10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   14bda:	9b01      	ldr	r3, [sp, #4]
   14bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14be0:	1e5a      	subs	r2, r3, #1
   14be2:	490b      	ldr	r1, [pc, #44]	; (14c10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   14be4:	9b01      	ldr	r3, [sp, #4]
   14be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_86[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_86[u32CoreId]))         /*if interrupts were enabled*/
   14bea:	4a0a      	ldr	r2, [pc, #40]	; (14c14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x48>)
   14bec:	9b01      	ldr	r3, [sp, #4]
   14bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14bf2:	f003 0301 	and.w	r3, r3, #1
   14bf6:	2b00      	cmp	r3, #0
   14bf8:	d106      	bne.n	14c08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
   14bfa:	4a05      	ldr	r2, [pc, #20]	; (14c10 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x44>)
   14bfc:	9b01      	ldr	r3, [sp, #4]
   14bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c02:	2b00      	cmp	r3, #0
   14c04:	d100      	bne.n	14c08 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_86+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14c06:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14c08:	bf00      	nop
   14c0a:	b003      	add	sp, #12
   14c0c:	f85d fb04 	ldr.w	pc, [sp], #4
   14c10:	1fff94b8 	.word	0x1fff94b8
   14c14:	1fff94b4 	.word	0x1fff94b4

00014c18 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
   14c18:	b500      	push	{lr}
   14c1a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14c1c:	f7ec fe50 	bl	18c0 <Sys_GetCoreID>
   14c20:	4603      	mov	r3, r0
   14c22:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId])
   14c24:	4a10      	ldr	r2, [pc, #64]	; (14c68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   14c26:	9b01      	ldr	r3, [sp, #4]
   14c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c2c:	2b00      	cmp	r3, #0
   14c2e:	d10d      	bne.n	14c4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14c30:	f7eb fe6a 	bl	908 <Adc_schm_read_msr>
   14c34:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14c36:	9b00      	ldr	r3, [sp, #0]
   14c38:	f003 0301 	and.w	r3, r3, #1
   14c3c:	2b00      	cmp	r3, #0
   14c3e:	d100      	bne.n	14c42 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14c40:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_87[u32CoreId] = msr;
   14c42:	490a      	ldr	r1, [pc, #40]	; (14c6c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x54>)
   14c44:	9b01      	ldr	r3, [sp, #4]
   14c46:	9a00      	ldr	r2, [sp, #0]
   14c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]++;
   14c4c:	4a06      	ldr	r2, [pc, #24]	; (14c68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   14c4e:	9b01      	ldr	r3, [sp, #4]
   14c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c54:	1c5a      	adds	r2, r3, #1
   14c56:	4904      	ldr	r1, [pc, #16]	; (14c68 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_87+0x50>)
   14c58:	9b01      	ldr	r3, [sp, #4]
   14c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14c5e:	bf00      	nop
   14c60:	b003      	add	sp, #12
   14c62:	f85d fb04 	ldr.w	pc, [sp], #4
   14c66:	bf00      	nop
   14c68:	1fff94c0 	.word	0x1fff94c0
   14c6c:	1fff94bc 	.word	0x1fff94bc

00014c70 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87(void)
{
   14c70:	b500      	push	{lr}
   14c72:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14c74:	f7ec fe24 	bl	18c0 <Sys_GetCoreID>
   14c78:	4603      	mov	r3, r0
   14c7a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]--;
   14c7c:	4a0d      	ldr	r2, [pc, #52]	; (14cb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   14c7e:	9b01      	ldr	r3, [sp, #4]
   14c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c84:	1e5a      	subs	r2, r3, #1
   14c86:	490b      	ldr	r1, [pc, #44]	; (14cb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   14c88:	9b01      	ldr	r3, [sp, #4]
   14c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_87[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_87[u32CoreId]))         /*if interrupts were enabled*/
   14c8e:	4a0a      	ldr	r2, [pc, #40]	; (14cb8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x48>)
   14c90:	9b01      	ldr	r3, [sp, #4]
   14c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14c96:	f003 0301 	and.w	r3, r3, #1
   14c9a:	2b00      	cmp	r3, #0
   14c9c:	d106      	bne.n	14cac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
   14c9e:	4a05      	ldr	r2, [pc, #20]	; (14cb4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x44>)
   14ca0:	9b01      	ldr	r3, [sp, #4]
   14ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ca6:	2b00      	cmp	r3, #0
   14ca8:	d100      	bne.n	14cac <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_87+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14caa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14cac:	bf00      	nop
   14cae:	b003      	add	sp, #12
   14cb0:	f85d fb04 	ldr.w	pc, [sp], #4
   14cb4:	1fff94c0 	.word	0x1fff94c0
   14cb8:	1fff94bc 	.word	0x1fff94bc

00014cbc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
   14cbc:	b500      	push	{lr}
   14cbe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14cc0:	f7ec fdfe 	bl	18c0 <Sys_GetCoreID>
   14cc4:	4603      	mov	r3, r0
   14cc6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId])
   14cc8:	4a10      	ldr	r2, [pc, #64]	; (14d0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   14cca:	9b01      	ldr	r3, [sp, #4]
   14ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14cd0:	2b00      	cmp	r3, #0
   14cd2:	d10d      	bne.n	14cf0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14cd4:	f7eb fe18 	bl	908 <Adc_schm_read_msr>
   14cd8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14cda:	9b00      	ldr	r3, [sp, #0]
   14cdc:	f003 0301 	and.w	r3, r3, #1
   14ce0:	2b00      	cmp	r3, #0
   14ce2:	d100      	bne.n	14ce6 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14ce4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_88[u32CoreId] = msr;
   14ce6:	490a      	ldr	r1, [pc, #40]	; (14d10 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x54>)
   14ce8:	9b01      	ldr	r3, [sp, #4]
   14cea:	9a00      	ldr	r2, [sp, #0]
   14cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]++;
   14cf0:	4a06      	ldr	r2, [pc, #24]	; (14d0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   14cf2:	9b01      	ldr	r3, [sp, #4]
   14cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14cf8:	1c5a      	adds	r2, r3, #1
   14cfa:	4904      	ldr	r1, [pc, #16]	; (14d0c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_88+0x50>)
   14cfc:	9b01      	ldr	r3, [sp, #4]
   14cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14d02:	bf00      	nop
   14d04:	b003      	add	sp, #12
   14d06:	f85d fb04 	ldr.w	pc, [sp], #4
   14d0a:	bf00      	nop
   14d0c:	1fff94c8 	.word	0x1fff94c8
   14d10:	1fff94c4 	.word	0x1fff94c4

00014d14 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88(void)
{
   14d14:	b500      	push	{lr}
   14d16:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14d18:	f7ec fdd2 	bl	18c0 <Sys_GetCoreID>
   14d1c:	4603      	mov	r3, r0
   14d1e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]--;
   14d20:	4a0d      	ldr	r2, [pc, #52]	; (14d58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   14d22:	9b01      	ldr	r3, [sp, #4]
   14d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d28:	1e5a      	subs	r2, r3, #1
   14d2a:	490b      	ldr	r1, [pc, #44]	; (14d58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   14d2c:	9b01      	ldr	r3, [sp, #4]
   14d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_88[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_88[u32CoreId]))         /*if interrupts were enabled*/
   14d32:	4a0a      	ldr	r2, [pc, #40]	; (14d5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x48>)
   14d34:	9b01      	ldr	r3, [sp, #4]
   14d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d3a:	f003 0301 	and.w	r3, r3, #1
   14d3e:	2b00      	cmp	r3, #0
   14d40:	d106      	bne.n	14d50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
   14d42:	4a05      	ldr	r2, [pc, #20]	; (14d58 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x44>)
   14d44:	9b01      	ldr	r3, [sp, #4]
   14d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d4a:	2b00      	cmp	r3, #0
   14d4c:	d100      	bne.n	14d50 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_88+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14d4e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14d50:	bf00      	nop
   14d52:	b003      	add	sp, #12
   14d54:	f85d fb04 	ldr.w	pc, [sp], #4
   14d58:	1fff94c8 	.word	0x1fff94c8
   14d5c:	1fff94c4 	.word	0x1fff94c4

00014d60 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
   14d60:	b500      	push	{lr}
   14d62:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14d64:	f7ec fdac 	bl	18c0 <Sys_GetCoreID>
   14d68:	4603      	mov	r3, r0
   14d6a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId])
   14d6c:	4a10      	ldr	r2, [pc, #64]	; (14db0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   14d6e:	9b01      	ldr	r3, [sp, #4]
   14d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d74:	2b00      	cmp	r3, #0
   14d76:	d10d      	bne.n	14d94 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14d78:	f7eb fdc6 	bl	908 <Adc_schm_read_msr>
   14d7c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14d7e:	9b00      	ldr	r3, [sp, #0]
   14d80:	f003 0301 	and.w	r3, r3, #1
   14d84:	2b00      	cmp	r3, #0
   14d86:	d100      	bne.n	14d8a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14d88:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_89[u32CoreId] = msr;
   14d8a:	490a      	ldr	r1, [pc, #40]	; (14db4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x54>)
   14d8c:	9b01      	ldr	r3, [sp, #4]
   14d8e:	9a00      	ldr	r2, [sp, #0]
   14d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]++;
   14d94:	4a06      	ldr	r2, [pc, #24]	; (14db0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   14d96:	9b01      	ldr	r3, [sp, #4]
   14d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14d9c:	1c5a      	adds	r2, r3, #1
   14d9e:	4904      	ldr	r1, [pc, #16]	; (14db0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_89+0x50>)
   14da0:	9b01      	ldr	r3, [sp, #4]
   14da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14da6:	bf00      	nop
   14da8:	b003      	add	sp, #12
   14daa:	f85d fb04 	ldr.w	pc, [sp], #4
   14dae:	bf00      	nop
   14db0:	1fff94d0 	.word	0x1fff94d0
   14db4:	1fff94cc 	.word	0x1fff94cc

00014db8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89(void)
{
   14db8:	b500      	push	{lr}
   14dba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14dbc:	f7ec fd80 	bl	18c0 <Sys_GetCoreID>
   14dc0:	4603      	mov	r3, r0
   14dc2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]--;
   14dc4:	4a0d      	ldr	r2, [pc, #52]	; (14dfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   14dc6:	9b01      	ldr	r3, [sp, #4]
   14dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14dcc:	1e5a      	subs	r2, r3, #1
   14dce:	490b      	ldr	r1, [pc, #44]	; (14dfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   14dd0:	9b01      	ldr	r3, [sp, #4]
   14dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_89[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_89[u32CoreId]))         /*if interrupts were enabled*/
   14dd6:	4a0a      	ldr	r2, [pc, #40]	; (14e00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x48>)
   14dd8:	9b01      	ldr	r3, [sp, #4]
   14dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14dde:	f003 0301 	and.w	r3, r3, #1
   14de2:	2b00      	cmp	r3, #0
   14de4:	d106      	bne.n	14df4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
   14de6:	4a05      	ldr	r2, [pc, #20]	; (14dfc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x44>)
   14de8:	9b01      	ldr	r3, [sp, #4]
   14dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14dee:	2b00      	cmp	r3, #0
   14df0:	d100      	bne.n	14df4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_89+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14df2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14df4:	bf00      	nop
   14df6:	b003      	add	sp, #12
   14df8:	f85d fb04 	ldr.w	pc, [sp], #4
   14dfc:	1fff94d0 	.word	0x1fff94d0
   14e00:	1fff94cc 	.word	0x1fff94cc

00014e04 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
   14e04:	b500      	push	{lr}
   14e06:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14e08:	f7ec fd5a 	bl	18c0 <Sys_GetCoreID>
   14e0c:	4603      	mov	r3, r0
   14e0e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId])
   14e10:	4a10      	ldr	r2, [pc, #64]	; (14e54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   14e12:	9b01      	ldr	r3, [sp, #4]
   14e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e18:	2b00      	cmp	r3, #0
   14e1a:	d10d      	bne.n	14e38 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14e1c:	f7eb fd74 	bl	908 <Adc_schm_read_msr>
   14e20:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14e22:	9b00      	ldr	r3, [sp, #0]
   14e24:	f003 0301 	and.w	r3, r3, #1
   14e28:	2b00      	cmp	r3, #0
   14e2a:	d100      	bne.n	14e2e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14e2c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_90[u32CoreId] = msr;
   14e2e:	490a      	ldr	r1, [pc, #40]	; (14e58 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x54>)
   14e30:	9b01      	ldr	r3, [sp, #4]
   14e32:	9a00      	ldr	r2, [sp, #0]
   14e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]++;
   14e38:	4a06      	ldr	r2, [pc, #24]	; (14e54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   14e3a:	9b01      	ldr	r3, [sp, #4]
   14e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e40:	1c5a      	adds	r2, r3, #1
   14e42:	4904      	ldr	r1, [pc, #16]	; (14e54 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_90+0x50>)
   14e44:	9b01      	ldr	r3, [sp, #4]
   14e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14e4a:	bf00      	nop
   14e4c:	b003      	add	sp, #12
   14e4e:	f85d fb04 	ldr.w	pc, [sp], #4
   14e52:	bf00      	nop
   14e54:	1fff94d8 	.word	0x1fff94d8
   14e58:	1fff94d4 	.word	0x1fff94d4

00014e5c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90(void)
{
   14e5c:	b500      	push	{lr}
   14e5e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14e60:	f7ec fd2e 	bl	18c0 <Sys_GetCoreID>
   14e64:	4603      	mov	r3, r0
   14e66:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]--;
   14e68:	4a0d      	ldr	r2, [pc, #52]	; (14ea0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   14e6a:	9b01      	ldr	r3, [sp, #4]
   14e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e70:	1e5a      	subs	r2, r3, #1
   14e72:	490b      	ldr	r1, [pc, #44]	; (14ea0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   14e74:	9b01      	ldr	r3, [sp, #4]
   14e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_90[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_90[u32CoreId]))         /*if interrupts were enabled*/
   14e7a:	4a0a      	ldr	r2, [pc, #40]	; (14ea4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x48>)
   14e7c:	9b01      	ldr	r3, [sp, #4]
   14e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e82:	f003 0301 	and.w	r3, r3, #1
   14e86:	2b00      	cmp	r3, #0
   14e88:	d106      	bne.n	14e98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
   14e8a:	4a05      	ldr	r2, [pc, #20]	; (14ea0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x44>)
   14e8c:	9b01      	ldr	r3, [sp, #4]
   14e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14e92:	2b00      	cmp	r3, #0
   14e94:	d100      	bne.n	14e98 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_90+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14e96:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14e98:	bf00      	nop
   14e9a:	b003      	add	sp, #12
   14e9c:	f85d fb04 	ldr.w	pc, [sp], #4
   14ea0:	1fff94d8 	.word	0x1fff94d8
   14ea4:	1fff94d4 	.word	0x1fff94d4

00014ea8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
   14ea8:	b500      	push	{lr}
   14eaa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14eac:	f7ec fd08 	bl	18c0 <Sys_GetCoreID>
   14eb0:	4603      	mov	r3, r0
   14eb2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId])
   14eb4:	4a10      	ldr	r2, [pc, #64]	; (14ef8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   14eb6:	9b01      	ldr	r3, [sp, #4]
   14eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ebc:	2b00      	cmp	r3, #0
   14ebe:	d10d      	bne.n	14edc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14ec0:	f7eb fd22 	bl	908 <Adc_schm_read_msr>
   14ec4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14ec6:	9b00      	ldr	r3, [sp, #0]
   14ec8:	f003 0301 	and.w	r3, r3, #1
   14ecc:	2b00      	cmp	r3, #0
   14ece:	d100      	bne.n	14ed2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14ed0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_91[u32CoreId] = msr;
   14ed2:	490a      	ldr	r1, [pc, #40]	; (14efc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x54>)
   14ed4:	9b01      	ldr	r3, [sp, #4]
   14ed6:	9a00      	ldr	r2, [sp, #0]
   14ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]++;
   14edc:	4a06      	ldr	r2, [pc, #24]	; (14ef8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   14ede:	9b01      	ldr	r3, [sp, #4]
   14ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14ee4:	1c5a      	adds	r2, r3, #1
   14ee6:	4904      	ldr	r1, [pc, #16]	; (14ef8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_91+0x50>)
   14ee8:	9b01      	ldr	r3, [sp, #4]
   14eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14eee:	bf00      	nop
   14ef0:	b003      	add	sp, #12
   14ef2:	f85d fb04 	ldr.w	pc, [sp], #4
   14ef6:	bf00      	nop
   14ef8:	1fff94e0 	.word	0x1fff94e0
   14efc:	1fff94dc 	.word	0x1fff94dc

00014f00 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91(void)
{
   14f00:	b500      	push	{lr}
   14f02:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14f04:	f7ec fcdc 	bl	18c0 <Sys_GetCoreID>
   14f08:	4603      	mov	r3, r0
   14f0a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]--;
   14f0c:	4a0d      	ldr	r2, [pc, #52]	; (14f44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   14f0e:	9b01      	ldr	r3, [sp, #4]
   14f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f14:	1e5a      	subs	r2, r3, #1
   14f16:	490b      	ldr	r1, [pc, #44]	; (14f44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   14f18:	9b01      	ldr	r3, [sp, #4]
   14f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_91[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_91[u32CoreId]))         /*if interrupts were enabled*/
   14f1e:	4a0a      	ldr	r2, [pc, #40]	; (14f48 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x48>)
   14f20:	9b01      	ldr	r3, [sp, #4]
   14f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f26:	f003 0301 	and.w	r3, r3, #1
   14f2a:	2b00      	cmp	r3, #0
   14f2c:	d106      	bne.n	14f3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
   14f2e:	4a05      	ldr	r2, [pc, #20]	; (14f44 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x44>)
   14f30:	9b01      	ldr	r3, [sp, #4]
   14f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f36:	2b00      	cmp	r3, #0
   14f38:	d100      	bne.n	14f3c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_91+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14f3a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14f3c:	bf00      	nop
   14f3e:	b003      	add	sp, #12
   14f40:	f85d fb04 	ldr.w	pc, [sp], #4
   14f44:	1fff94e0 	.word	0x1fff94e0
   14f48:	1fff94dc 	.word	0x1fff94dc

00014f4c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
   14f4c:	b500      	push	{lr}
   14f4e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14f50:	f7ec fcb6 	bl	18c0 <Sys_GetCoreID>
   14f54:	4603      	mov	r3, r0
   14f56:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId])
   14f58:	4a10      	ldr	r2, [pc, #64]	; (14f9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   14f5a:	9b01      	ldr	r3, [sp, #4]
   14f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f60:	2b00      	cmp	r3, #0
   14f62:	d10d      	bne.n	14f80 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   14f64:	f7eb fcd0 	bl	908 <Adc_schm_read_msr>
   14f68:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   14f6a:	9b00      	ldr	r3, [sp, #0]
   14f6c:	f003 0301 	and.w	r3, r3, #1
   14f70:	2b00      	cmp	r3, #0
   14f72:	d100      	bne.n	14f76 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   14f74:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_92[u32CoreId] = msr;
   14f76:	490a      	ldr	r1, [pc, #40]	; (14fa0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x54>)
   14f78:	9b01      	ldr	r3, [sp, #4]
   14f7a:	9a00      	ldr	r2, [sp, #0]
   14f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]++;
   14f80:	4a06      	ldr	r2, [pc, #24]	; (14f9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   14f82:	9b01      	ldr	r3, [sp, #4]
   14f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14f88:	1c5a      	adds	r2, r3, #1
   14f8a:	4904      	ldr	r1, [pc, #16]	; (14f9c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_92+0x50>)
   14f8c:	9b01      	ldr	r3, [sp, #4]
   14f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   14f92:	bf00      	nop
   14f94:	b003      	add	sp, #12
   14f96:	f85d fb04 	ldr.w	pc, [sp], #4
   14f9a:	bf00      	nop
   14f9c:	1fff94e8 	.word	0x1fff94e8
   14fa0:	1fff94e4 	.word	0x1fff94e4

00014fa4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92(void)
{
   14fa4:	b500      	push	{lr}
   14fa6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14fa8:	f7ec fc8a 	bl	18c0 <Sys_GetCoreID>
   14fac:	4603      	mov	r3, r0
   14fae:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]--;
   14fb0:	4a0d      	ldr	r2, [pc, #52]	; (14fe8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   14fb2:	9b01      	ldr	r3, [sp, #4]
   14fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fb8:	1e5a      	subs	r2, r3, #1
   14fba:	490b      	ldr	r1, [pc, #44]	; (14fe8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   14fbc:	9b01      	ldr	r3, [sp, #4]
   14fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_92[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_92[u32CoreId]))         /*if interrupts were enabled*/
   14fc2:	4a0a      	ldr	r2, [pc, #40]	; (14fec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x48>)
   14fc4:	9b01      	ldr	r3, [sp, #4]
   14fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fca:	f003 0301 	and.w	r3, r3, #1
   14fce:	2b00      	cmp	r3, #0
   14fd0:	d106      	bne.n	14fe0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
   14fd2:	4a05      	ldr	r2, [pc, #20]	; (14fe8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x44>)
   14fd4:	9b01      	ldr	r3, [sp, #4]
   14fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   14fda:	2b00      	cmp	r3, #0
   14fdc:	d100      	bne.n	14fe0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_92+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   14fde:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   14fe0:	bf00      	nop
   14fe2:	b003      	add	sp, #12
   14fe4:	f85d fb04 	ldr.w	pc, [sp], #4
   14fe8:	1fff94e8 	.word	0x1fff94e8
   14fec:	1fff94e4 	.word	0x1fff94e4

00014ff0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
   14ff0:	b500      	push	{lr}
   14ff2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   14ff4:	f7ec fc64 	bl	18c0 <Sys_GetCoreID>
   14ff8:	4603      	mov	r3, r0
   14ffa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId])
   14ffc:	4a10      	ldr	r2, [pc, #64]	; (15040 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   14ffe:	9b01      	ldr	r3, [sp, #4]
   15000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15004:	2b00      	cmp	r3, #0
   15006:	d10d      	bne.n	15024 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15008:	f7eb fc7e 	bl	908 <Adc_schm_read_msr>
   1500c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1500e:	9b00      	ldr	r3, [sp, #0]
   15010:	f003 0301 	and.w	r3, r3, #1
   15014:	2b00      	cmp	r3, #0
   15016:	d100      	bne.n	1501a <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15018:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_93[u32CoreId] = msr;
   1501a:	490a      	ldr	r1, [pc, #40]	; (15044 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x54>)
   1501c:	9b01      	ldr	r3, [sp, #4]
   1501e:	9a00      	ldr	r2, [sp, #0]
   15020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]++;
   15024:	4a06      	ldr	r2, [pc, #24]	; (15040 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   15026:	9b01      	ldr	r3, [sp, #4]
   15028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1502c:	1c5a      	adds	r2, r3, #1
   1502e:	4904      	ldr	r1, [pc, #16]	; (15040 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_93+0x50>)
   15030:	9b01      	ldr	r3, [sp, #4]
   15032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15036:	bf00      	nop
   15038:	b003      	add	sp, #12
   1503a:	f85d fb04 	ldr.w	pc, [sp], #4
   1503e:	bf00      	nop
   15040:	1fff94f0 	.word	0x1fff94f0
   15044:	1fff94ec 	.word	0x1fff94ec

00015048 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93(void)
{
   15048:	b500      	push	{lr}
   1504a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1504c:	f7ec fc38 	bl	18c0 <Sys_GetCoreID>
   15050:	4603      	mov	r3, r0
   15052:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]--;
   15054:	4a0d      	ldr	r2, [pc, #52]	; (1508c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   15056:	9b01      	ldr	r3, [sp, #4]
   15058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1505c:	1e5a      	subs	r2, r3, #1
   1505e:	490b      	ldr	r1, [pc, #44]	; (1508c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   15060:	9b01      	ldr	r3, [sp, #4]
   15062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_93[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_93[u32CoreId]))         /*if interrupts were enabled*/
   15066:	4a0a      	ldr	r2, [pc, #40]	; (15090 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x48>)
   15068:	9b01      	ldr	r3, [sp, #4]
   1506a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1506e:	f003 0301 	and.w	r3, r3, #1
   15072:	2b00      	cmp	r3, #0
   15074:	d106      	bne.n	15084 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
   15076:	4a05      	ldr	r2, [pc, #20]	; (1508c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x44>)
   15078:	9b01      	ldr	r3, [sp, #4]
   1507a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1507e:	2b00      	cmp	r3, #0
   15080:	d100      	bne.n	15084 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_93+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15082:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15084:	bf00      	nop
   15086:	b003      	add	sp, #12
   15088:	f85d fb04 	ldr.w	pc, [sp], #4
   1508c:	1fff94f0 	.word	0x1fff94f0
   15090:	1fff94ec 	.word	0x1fff94ec

00015094 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
   15094:	b500      	push	{lr}
   15096:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15098:	f7ec fc12 	bl	18c0 <Sys_GetCoreID>
   1509c:	4603      	mov	r3, r0
   1509e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId])
   150a0:	4a10      	ldr	r2, [pc, #64]	; (150e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   150a2:	9b01      	ldr	r3, [sp, #4]
   150a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150a8:	2b00      	cmp	r3, #0
   150aa:	d10d      	bne.n	150c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   150ac:	f7eb fc2c 	bl	908 <Adc_schm_read_msr>
   150b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   150b2:	9b00      	ldr	r3, [sp, #0]
   150b4:	f003 0301 	and.w	r3, r3, #1
   150b8:	2b00      	cmp	r3, #0
   150ba:	d100      	bne.n	150be <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   150bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_94[u32CoreId] = msr;
   150be:	490a      	ldr	r1, [pc, #40]	; (150e8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x54>)
   150c0:	9b01      	ldr	r3, [sp, #4]
   150c2:	9a00      	ldr	r2, [sp, #0]
   150c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]++;
   150c8:	4a06      	ldr	r2, [pc, #24]	; (150e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   150ca:	9b01      	ldr	r3, [sp, #4]
   150cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   150d0:	1c5a      	adds	r2, r3, #1
   150d2:	4904      	ldr	r1, [pc, #16]	; (150e4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_94+0x50>)
   150d4:	9b01      	ldr	r3, [sp, #4]
   150d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   150da:	bf00      	nop
   150dc:	b003      	add	sp, #12
   150de:	f85d fb04 	ldr.w	pc, [sp], #4
   150e2:	bf00      	nop
   150e4:	1fff94f8 	.word	0x1fff94f8
   150e8:	1fff94f4 	.word	0x1fff94f4

000150ec <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94(void)
{
   150ec:	b500      	push	{lr}
   150ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   150f0:	f7ec fbe6 	bl	18c0 <Sys_GetCoreID>
   150f4:	4603      	mov	r3, r0
   150f6:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]--;
   150f8:	4a0d      	ldr	r2, [pc, #52]	; (15130 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   150fa:	9b01      	ldr	r3, [sp, #4]
   150fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15100:	1e5a      	subs	r2, r3, #1
   15102:	490b      	ldr	r1, [pc, #44]	; (15130 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   15104:	9b01      	ldr	r3, [sp, #4]
   15106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_94[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_94[u32CoreId]))         /*if interrupts were enabled*/
   1510a:	4a0a      	ldr	r2, [pc, #40]	; (15134 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x48>)
   1510c:	9b01      	ldr	r3, [sp, #4]
   1510e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15112:	f003 0301 	and.w	r3, r3, #1
   15116:	2b00      	cmp	r3, #0
   15118:	d106      	bne.n	15128 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
   1511a:	4a05      	ldr	r2, [pc, #20]	; (15130 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x44>)
   1511c:	9b01      	ldr	r3, [sp, #4]
   1511e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15122:	2b00      	cmp	r3, #0
   15124:	d100      	bne.n	15128 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_94+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15126:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15128:	bf00      	nop
   1512a:	b003      	add	sp, #12
   1512c:	f85d fb04 	ldr.w	pc, [sp], #4
   15130:	1fff94f8 	.word	0x1fff94f8
   15134:	1fff94f4 	.word	0x1fff94f4

00015138 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
   15138:	b500      	push	{lr}
   1513a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1513c:	f7ec fbc0 	bl	18c0 <Sys_GetCoreID>
   15140:	4603      	mov	r3, r0
   15142:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId])
   15144:	4a10      	ldr	r2, [pc, #64]	; (15188 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   15146:	9b01      	ldr	r3, [sp, #4]
   15148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1514c:	2b00      	cmp	r3, #0
   1514e:	d10d      	bne.n	1516c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15150:	f7eb fbda 	bl	908 <Adc_schm_read_msr>
   15154:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15156:	9b00      	ldr	r3, [sp, #0]
   15158:	f003 0301 	and.w	r3, r3, #1
   1515c:	2b00      	cmp	r3, #0
   1515e:	d100      	bne.n	15162 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15160:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_95[u32CoreId] = msr;
   15162:	490a      	ldr	r1, [pc, #40]	; (1518c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x54>)
   15164:	9b01      	ldr	r3, [sp, #4]
   15166:	9a00      	ldr	r2, [sp, #0]
   15168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]++;
   1516c:	4a06      	ldr	r2, [pc, #24]	; (15188 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   1516e:	9b01      	ldr	r3, [sp, #4]
   15170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15174:	1c5a      	adds	r2, r3, #1
   15176:	4904      	ldr	r1, [pc, #16]	; (15188 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_95+0x50>)
   15178:	9b01      	ldr	r3, [sp, #4]
   1517a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1517e:	bf00      	nop
   15180:	b003      	add	sp, #12
   15182:	f85d fb04 	ldr.w	pc, [sp], #4
   15186:	bf00      	nop
   15188:	1fff9500 	.word	0x1fff9500
   1518c:	1fff94fc 	.word	0x1fff94fc

00015190 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95(void)
{
   15190:	b500      	push	{lr}
   15192:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15194:	f7ec fb94 	bl	18c0 <Sys_GetCoreID>
   15198:	4603      	mov	r3, r0
   1519a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]--;
   1519c:	4a0d      	ldr	r2, [pc, #52]	; (151d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   1519e:	9b01      	ldr	r3, [sp, #4]
   151a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151a4:	1e5a      	subs	r2, r3, #1
   151a6:	490b      	ldr	r1, [pc, #44]	; (151d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   151a8:	9b01      	ldr	r3, [sp, #4]
   151aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_95[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_95[u32CoreId]))         /*if interrupts were enabled*/
   151ae:	4a0a      	ldr	r2, [pc, #40]	; (151d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x48>)
   151b0:	9b01      	ldr	r3, [sp, #4]
   151b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151b6:	f003 0301 	and.w	r3, r3, #1
   151ba:	2b00      	cmp	r3, #0
   151bc:	d106      	bne.n	151cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
   151be:	4a05      	ldr	r2, [pc, #20]	; (151d4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x44>)
   151c0:	9b01      	ldr	r3, [sp, #4]
   151c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151c6:	2b00      	cmp	r3, #0
   151c8:	d100      	bne.n	151cc <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_95+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   151ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   151cc:	bf00      	nop
   151ce:	b003      	add	sp, #12
   151d0:	f85d fb04 	ldr.w	pc, [sp], #4
   151d4:	1fff9500 	.word	0x1fff9500
   151d8:	1fff94fc 	.word	0x1fff94fc

000151dc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
   151dc:	b500      	push	{lr}
   151de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   151e0:	f7ec fb6e 	bl	18c0 <Sys_GetCoreID>
   151e4:	4603      	mov	r3, r0
   151e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId])
   151e8:	4a10      	ldr	r2, [pc, #64]	; (1522c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   151ea:	9b01      	ldr	r3, [sp, #4]
   151ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   151f0:	2b00      	cmp	r3, #0
   151f2:	d10d      	bne.n	15210 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   151f4:	f7eb fb88 	bl	908 <Adc_schm_read_msr>
   151f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   151fa:	9b00      	ldr	r3, [sp, #0]
   151fc:	f003 0301 	and.w	r3, r3, #1
   15200:	2b00      	cmp	r3, #0
   15202:	d100      	bne.n	15206 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15204:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_96[u32CoreId] = msr;
   15206:	490a      	ldr	r1, [pc, #40]	; (15230 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x54>)
   15208:	9b01      	ldr	r3, [sp, #4]
   1520a:	9a00      	ldr	r2, [sp, #0]
   1520c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]++;
   15210:	4a06      	ldr	r2, [pc, #24]	; (1522c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   15212:	9b01      	ldr	r3, [sp, #4]
   15214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15218:	1c5a      	adds	r2, r3, #1
   1521a:	4904      	ldr	r1, [pc, #16]	; (1522c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_96+0x50>)
   1521c:	9b01      	ldr	r3, [sp, #4]
   1521e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15222:	bf00      	nop
   15224:	b003      	add	sp, #12
   15226:	f85d fb04 	ldr.w	pc, [sp], #4
   1522a:	bf00      	nop
   1522c:	1fff9508 	.word	0x1fff9508
   15230:	1fff9504 	.word	0x1fff9504

00015234 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96(void)
{
   15234:	b500      	push	{lr}
   15236:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15238:	f7ec fb42 	bl	18c0 <Sys_GetCoreID>
   1523c:	4603      	mov	r3, r0
   1523e:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]--;
   15240:	4a0d      	ldr	r2, [pc, #52]	; (15278 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   15242:	9b01      	ldr	r3, [sp, #4]
   15244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15248:	1e5a      	subs	r2, r3, #1
   1524a:	490b      	ldr	r1, [pc, #44]	; (15278 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   1524c:	9b01      	ldr	r3, [sp, #4]
   1524e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_96[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_96[u32CoreId]))         /*if interrupts were enabled*/
   15252:	4a0a      	ldr	r2, [pc, #40]	; (1527c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x48>)
   15254:	9b01      	ldr	r3, [sp, #4]
   15256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1525a:	f003 0301 	and.w	r3, r3, #1
   1525e:	2b00      	cmp	r3, #0
   15260:	d106      	bne.n	15270 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
   15262:	4a05      	ldr	r2, [pc, #20]	; (15278 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x44>)
   15264:	9b01      	ldr	r3, [sp, #4]
   15266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1526a:	2b00      	cmp	r3, #0
   1526c:	d100      	bne.n	15270 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_96+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1526e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15270:	bf00      	nop
   15272:	b003      	add	sp, #12
   15274:	f85d fb04 	ldr.w	pc, [sp], #4
   15278:	1fff9508 	.word	0x1fff9508
   1527c:	1fff9504 	.word	0x1fff9504

00015280 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
   15280:	b500      	push	{lr}
   15282:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15284:	f7ec fb1c 	bl	18c0 <Sys_GetCoreID>
   15288:	4603      	mov	r3, r0
   1528a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId])
   1528c:	4a10      	ldr	r2, [pc, #64]	; (152d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   1528e:	9b01      	ldr	r3, [sp, #4]
   15290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15294:	2b00      	cmp	r3, #0
   15296:	d10d      	bne.n	152b4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15298:	f7eb fb36 	bl	908 <Adc_schm_read_msr>
   1529c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1529e:	9b00      	ldr	r3, [sp, #0]
   152a0:	f003 0301 	and.w	r3, r3, #1
   152a4:	2b00      	cmp	r3, #0
   152a6:	d100      	bne.n	152aa <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   152a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_97[u32CoreId] = msr;
   152aa:	490a      	ldr	r1, [pc, #40]	; (152d4 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x54>)
   152ac:	9b01      	ldr	r3, [sp, #4]
   152ae:	9a00      	ldr	r2, [sp, #0]
   152b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]++;
   152b4:	4a06      	ldr	r2, [pc, #24]	; (152d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   152b6:	9b01      	ldr	r3, [sp, #4]
   152b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152bc:	1c5a      	adds	r2, r3, #1
   152be:	4904      	ldr	r1, [pc, #16]	; (152d0 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_97+0x50>)
   152c0:	9b01      	ldr	r3, [sp, #4]
   152c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   152c6:	bf00      	nop
   152c8:	b003      	add	sp, #12
   152ca:	f85d fb04 	ldr.w	pc, [sp], #4
   152ce:	bf00      	nop
   152d0:	1fff9510 	.word	0x1fff9510
   152d4:	1fff950c 	.word	0x1fff950c

000152d8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97(void)
{
   152d8:	b500      	push	{lr}
   152da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   152dc:	f7ec faf0 	bl	18c0 <Sys_GetCoreID>
   152e0:	4603      	mov	r3, r0
   152e2:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]--;
   152e4:	4a0d      	ldr	r2, [pc, #52]	; (1531c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   152e6:	9b01      	ldr	r3, [sp, #4]
   152e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152ec:	1e5a      	subs	r2, r3, #1
   152ee:	490b      	ldr	r1, [pc, #44]	; (1531c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   152f0:	9b01      	ldr	r3, [sp, #4]
   152f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_97[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_97[u32CoreId]))         /*if interrupts were enabled*/
   152f6:	4a0a      	ldr	r2, [pc, #40]	; (15320 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x48>)
   152f8:	9b01      	ldr	r3, [sp, #4]
   152fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152fe:	f003 0301 	and.w	r3, r3, #1
   15302:	2b00      	cmp	r3, #0
   15304:	d106      	bne.n	15314 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
   15306:	4a05      	ldr	r2, [pc, #20]	; (1531c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x44>)
   15308:	9b01      	ldr	r3, [sp, #4]
   1530a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1530e:	2b00      	cmp	r3, #0
   15310:	d100      	bne.n	15314 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_97+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15312:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15314:	bf00      	nop
   15316:	b003      	add	sp, #12
   15318:	f85d fb04 	ldr.w	pc, [sp], #4
   1531c:	1fff9510 	.word	0x1fff9510
   15320:	1fff950c 	.word	0x1fff950c

00015324 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
   15324:	b500      	push	{lr}
   15326:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15328:	f7ec faca 	bl	18c0 <Sys_GetCoreID>
   1532c:	4603      	mov	r3, r0
   1532e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId])
   15330:	4a10      	ldr	r2, [pc, #64]	; (15374 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   15332:	9b01      	ldr	r3, [sp, #4]
   15334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15338:	2b00      	cmp	r3, #0
   1533a:	d10d      	bne.n	15358 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1533c:	f7eb fae4 	bl	908 <Adc_schm_read_msr>
   15340:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15342:	9b00      	ldr	r3, [sp, #0]
   15344:	f003 0301 	and.w	r3, r3, #1
   15348:	2b00      	cmp	r3, #0
   1534a:	d100      	bne.n	1534e <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1534c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_98[u32CoreId] = msr;
   1534e:	490a      	ldr	r1, [pc, #40]	; (15378 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x54>)
   15350:	9b01      	ldr	r3, [sp, #4]
   15352:	9a00      	ldr	r2, [sp, #0]
   15354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]++;
   15358:	4a06      	ldr	r2, [pc, #24]	; (15374 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   1535a:	9b01      	ldr	r3, [sp, #4]
   1535c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15360:	1c5a      	adds	r2, r3, #1
   15362:	4904      	ldr	r1, [pc, #16]	; (15374 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_98+0x50>)
   15364:	9b01      	ldr	r3, [sp, #4]
   15366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1536a:	bf00      	nop
   1536c:	b003      	add	sp, #12
   1536e:	f85d fb04 	ldr.w	pc, [sp], #4
   15372:	bf00      	nop
   15374:	1fff9518 	.word	0x1fff9518
   15378:	1fff9514 	.word	0x1fff9514

0001537c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98(void)
{
   1537c:	b500      	push	{lr}
   1537e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15380:	f7ec fa9e 	bl	18c0 <Sys_GetCoreID>
   15384:	4603      	mov	r3, r0
   15386:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]--;
   15388:	4a0d      	ldr	r2, [pc, #52]	; (153c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   1538a:	9b01      	ldr	r3, [sp, #4]
   1538c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15390:	1e5a      	subs	r2, r3, #1
   15392:	490b      	ldr	r1, [pc, #44]	; (153c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   15394:	9b01      	ldr	r3, [sp, #4]
   15396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_98[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_98[u32CoreId]))         /*if interrupts were enabled*/
   1539a:	4a0a      	ldr	r2, [pc, #40]	; (153c4 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x48>)
   1539c:	9b01      	ldr	r3, [sp, #4]
   1539e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153a2:	f003 0301 	and.w	r3, r3, #1
   153a6:	2b00      	cmp	r3, #0
   153a8:	d106      	bne.n	153b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
   153aa:	4a05      	ldr	r2, [pc, #20]	; (153c0 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x44>)
   153ac:	9b01      	ldr	r3, [sp, #4]
   153ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153b2:	2b00      	cmp	r3, #0
   153b4:	d100      	bne.n	153b8 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_98+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   153b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   153b8:	bf00      	nop
   153ba:	b003      	add	sp, #12
   153bc:	f85d fb04 	ldr.w	pc, [sp], #4
   153c0:	1fff9518 	.word	0x1fff9518
   153c4:	1fff9514 	.word	0x1fff9514

000153c8 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
   153c8:	b500      	push	{lr}
   153ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   153cc:	f7ec fa78 	bl	18c0 <Sys_GetCoreID>
   153d0:	4603      	mov	r3, r0
   153d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId])
   153d4:	4a10      	ldr	r2, [pc, #64]	; (15418 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   153d6:	9b01      	ldr	r3, [sp, #4]
   153d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   153dc:	2b00      	cmp	r3, #0
   153de:	d10d      	bne.n	153fc <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Adc_schm_read_msr);
#else
        msr = Adc_schm_read_msr();  /*read MSR (to store interrupts state)*/
   153e0:	f7eb fa92 	bl	908 <Adc_schm_read_msr>
   153e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   153e6:	9b00      	ldr	r3, [sp, #0]
   153e8:	f003 0301 	and.w	r3, r3, #1
   153ec:	2b00      	cmp	r3, #0
   153ee:	d100      	bne.n	153f2 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   153f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_ADC_EXCLUSIVE_AREA_99[u32CoreId] = msr;
   153f2:	490a      	ldr	r1, [pc, #40]	; (1541c <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x54>)
   153f4:	9b01      	ldr	r3, [sp, #4]
   153f6:	9a00      	ldr	r2, [sp, #0]
   153f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]++;
   153fc:	4a06      	ldr	r2, [pc, #24]	; (15418 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   153fe:	9b01      	ldr	r3, [sp, #4]
   15400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15404:	1c5a      	adds	r2, r3, #1
   15406:	4904      	ldr	r1, [pc, #16]	; (15418 <SchM_Enter_Adc_ADC_EXCLUSIVE_AREA_99+0x50>)
   15408:	9b01      	ldr	r3, [sp, #4]
   1540a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1540e:	bf00      	nop
   15410:	b003      	add	sp, #12
   15412:	f85d fb04 	ldr.w	pc, [sp], #4
   15416:	bf00      	nop
   15418:	1fff9520 	.word	0x1fff9520
   1541c:	1fff951c 	.word	0x1fff951c

00015420 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99>:

void SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99(void)
{
   15420:	b500      	push	{lr}
   15422:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15424:	f7ec fa4c 	bl	18c0 <Sys_GetCoreID>
   15428:	4603      	mov	r3, r0
   1542a:	9301      	str	r3, [sp, #4]

    reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]--;
   1542c:	4a0d      	ldr	r2, [pc, #52]	; (15464 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   1542e:	9b01      	ldr	r3, [sp, #4]
   15430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15434:	1e5a      	subs	r2, r3, #1
   15436:	490b      	ldr	r1, [pc, #44]	; (15464 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   15438:	9b01      	ldr	r3, [sp, #4]
   1543a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_ADC_EXCLUSIVE_AREA_99[u32CoreId]))&&(0UL == reentry_guard_ADC_EXCLUSIVE_AREA_99[u32CoreId]))         /*if interrupts were enabled*/
   1543e:	4a0a      	ldr	r2, [pc, #40]	; (15468 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x48>)
   15440:	9b01      	ldr	r3, [sp, #4]
   15442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15446:	f003 0301 	and.w	r3, r3, #1
   1544a:	2b00      	cmp	r3, #0
   1544c:	d106      	bne.n	1545c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
   1544e:	4a05      	ldr	r2, [pc, #20]	; (15464 <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x44>)
   15450:	9b01      	ldr	r3, [sp, #4]
   15452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15456:	2b00      	cmp	r3, #0
   15458:	d100      	bne.n	1545c <SchM_Exit_Adc_ADC_EXCLUSIVE_AREA_99+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1545a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1545c:	bf00      	nop
   1545e:	b003      	add	sp, #12
   15460:	f85d fb04 	ldr.w	pc, [sp], #4
   15464:	1fff9520 	.word	0x1fff9520
   15468:	1fff951c 	.word	0x1fff951c

0001546c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
   1546c:	b500      	push	{lr}
   1546e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15470:	f7ec fa26 	bl	18c0 <Sys_GetCoreID>
   15474:	4603      	mov	r3, r0
   15476:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId])
   15478:	4a10      	ldr	r2, [pc, #64]	; (154bc <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
   1547a:	9b01      	ldr	r3, [sp, #4]
   1547c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15480:	2b00      	cmp	r3, #0
   15482:	d10d      	bne.n	154a0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15484:	f7eb fa49 	bl	91a <Dio_schm_read_msr>
   15488:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1548a:	9b00      	ldr	r3, [sp, #0]
   1548c:	f003 0301 	and.w	r3, r3, #1
   15490:	2b00      	cmp	r3, #0
   15492:	d100      	bne.n	15496 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15494:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   15496:	490a      	ldr	r1, [pc, #40]	; (154c0 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x54>)
   15498:	9b01      	ldr	r3, [sp, #4]
   1549a:	9a00      	ldr	r2, [sp, #0]
   1549c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]++;
   154a0:	4a06      	ldr	r2, [pc, #24]	; (154bc <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
   154a2:	9b01      	ldr	r3, [sp, #4]
   154a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154a8:	1c5a      	adds	r2, r3, #1
   154aa:	4904      	ldr	r1, [pc, #16]	; (154bc <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
   154ac:	9b01      	ldr	r3, [sp, #4]
   154ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   154b2:	bf00      	nop
   154b4:	b003      	add	sp, #12
   154b6:	f85d fb04 	ldr.w	pc, [sp], #4
   154ba:	bf00      	nop
   154bc:	1fff9528 	.word	0x1fff9528
   154c0:	1fff9524 	.word	0x1fff9524

000154c4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
   154c4:	b500      	push	{lr}
   154c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   154c8:	f7ec f9fa 	bl	18c0 <Sys_GetCoreID>
   154cc:	4603      	mov	r3, r0
   154ce:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]--;
   154d0:	4a0d      	ldr	r2, [pc, #52]	; (15508 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
   154d2:	9b01      	ldr	r3, [sp, #4]
   154d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154d8:	1e5a      	subs	r2, r3, #1
   154da:	490b      	ldr	r1, [pc, #44]	; (15508 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
   154dc:	9b01      	ldr	r3, [sp, #4]
   154de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   154e2:	4a0a      	ldr	r2, [pc, #40]	; (1550c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x48>)
   154e4:	9b01      	ldr	r3, [sp, #4]
   154e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154ea:	f003 0301 	and.w	r3, r3, #1
   154ee:	2b00      	cmp	r3, #0
   154f0:	d106      	bne.n	15500 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
   154f2:	4a05      	ldr	r2, [pc, #20]	; (15508 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
   154f4:	9b01      	ldr	r3, [sp, #4]
   154f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   154fa:	2b00      	cmp	r3, #0
   154fc:	d100      	bne.n	15500 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   154fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15500:	bf00      	nop
   15502:	b003      	add	sp, #12
   15504:	f85d fb04 	ldr.w	pc, [sp], #4
   15508:	1fff9528 	.word	0x1fff9528
   1550c:	1fff9524 	.word	0x1fff9524

00015510 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
   15510:	b500      	push	{lr}
   15512:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15514:	f7ec f9d4 	bl	18c0 <Sys_GetCoreID>
   15518:	4603      	mov	r3, r0
   1551a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId])
   1551c:	4a10      	ldr	r2, [pc, #64]	; (15560 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
   1551e:	9b01      	ldr	r3, [sp, #4]
   15520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15524:	2b00      	cmp	r3, #0
   15526:	d10d      	bne.n	15544 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15528:	f7eb f9f7 	bl	91a <Dio_schm_read_msr>
   1552c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1552e:	9b00      	ldr	r3, [sp, #0]
   15530:	f003 0301 	and.w	r3, r3, #1
   15534:	2b00      	cmp	r3, #0
   15536:	d100      	bne.n	1553a <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15538:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   1553a:	490a      	ldr	r1, [pc, #40]	; (15564 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x54>)
   1553c:	9b01      	ldr	r3, [sp, #4]
   1553e:	9a00      	ldr	r2, [sp, #0]
   15540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]++;
   15544:	4a06      	ldr	r2, [pc, #24]	; (15560 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
   15546:	9b01      	ldr	r3, [sp, #4]
   15548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1554c:	1c5a      	adds	r2, r3, #1
   1554e:	4904      	ldr	r1, [pc, #16]	; (15560 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
   15550:	9b01      	ldr	r3, [sp, #4]
   15552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15556:	bf00      	nop
   15558:	b003      	add	sp, #12
   1555a:	f85d fb04 	ldr.w	pc, [sp], #4
   1555e:	bf00      	nop
   15560:	1fff9530 	.word	0x1fff9530
   15564:	1fff952c 	.word	0x1fff952c

00015568 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
   15568:	b500      	push	{lr}
   1556a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1556c:	f7ec f9a8 	bl	18c0 <Sys_GetCoreID>
   15570:	4603      	mov	r3, r0
   15572:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]--;
   15574:	4a0d      	ldr	r2, [pc, #52]	; (155ac <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
   15576:	9b01      	ldr	r3, [sp, #4]
   15578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1557c:	1e5a      	subs	r2, r3, #1
   1557e:	490b      	ldr	r1, [pc, #44]	; (155ac <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
   15580:	9b01      	ldr	r3, [sp, #4]
   15582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   15586:	4a0a      	ldr	r2, [pc, #40]	; (155b0 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x48>)
   15588:	9b01      	ldr	r3, [sp, #4]
   1558a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1558e:	f003 0301 	and.w	r3, r3, #1
   15592:	2b00      	cmp	r3, #0
   15594:	d106      	bne.n	155a4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
   15596:	4a05      	ldr	r2, [pc, #20]	; (155ac <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
   15598:	9b01      	ldr	r3, [sp, #4]
   1559a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1559e:	2b00      	cmp	r3, #0
   155a0:	d100      	bne.n	155a4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   155a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   155a4:	bf00      	nop
   155a6:	b003      	add	sp, #12
   155a8:	f85d fb04 	ldr.w	pc, [sp], #4
   155ac:	1fff9530 	.word	0x1fff9530
   155b0:	1fff952c 	.word	0x1fff952c

000155b4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
   155b4:	b500      	push	{lr}
   155b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   155b8:	f7ec f982 	bl	18c0 <Sys_GetCoreID>
   155bc:	4603      	mov	r3, r0
   155be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
   155c0:	4a10      	ldr	r2, [pc, #64]	; (15604 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   155c2:	9b01      	ldr	r3, [sp, #4]
   155c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155c8:	2b00      	cmp	r3, #0
   155ca:	d10d      	bne.n	155e8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   155cc:	f7eb f9ae 	bl	92c <Mcu_schm_read_msr>
   155d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   155d2:	9b00      	ldr	r3, [sp, #0]
   155d4:	f003 0301 	and.w	r3, r3, #1
   155d8:	2b00      	cmp	r3, #0
   155da:	d100      	bne.n	155de <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   155dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   155de:	490a      	ldr	r1, [pc, #40]	; (15608 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
   155e0:	9b01      	ldr	r3, [sp, #4]
   155e2:	9a00      	ldr	r2, [sp, #0]
   155e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
   155e8:	4a06      	ldr	r2, [pc, #24]	; (15604 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   155ea:	9b01      	ldr	r3, [sp, #4]
   155ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   155f0:	1c5a      	adds	r2, r3, #1
   155f2:	4904      	ldr	r1, [pc, #16]	; (15604 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
   155f4:	9b01      	ldr	r3, [sp, #4]
   155f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   155fa:	bf00      	nop
   155fc:	b003      	add	sp, #12
   155fe:	f85d fb04 	ldr.w	pc, [sp], #4
   15602:	bf00      	nop
   15604:	1fff9538 	.word	0x1fff9538
   15608:	1fff9534 	.word	0x1fff9534

0001560c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
   1560c:	b500      	push	{lr}
   1560e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15610:	f7ec f956 	bl	18c0 <Sys_GetCoreID>
   15614:	4603      	mov	r3, r0
   15616:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
   15618:	4a0d      	ldr	r2, [pc, #52]	; (15650 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   1561a:	9b01      	ldr	r3, [sp, #4]
   1561c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15620:	1e5a      	subs	r2, r3, #1
   15622:	490b      	ldr	r1, [pc, #44]	; (15650 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   15624:	9b01      	ldr	r3, [sp, #4]
   15626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   1562a:	4a0a      	ldr	r2, [pc, #40]	; (15654 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
   1562c:	9b01      	ldr	r3, [sp, #4]
   1562e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15632:	f003 0301 	and.w	r3, r3, #1
   15636:	2b00      	cmp	r3, #0
   15638:	d106      	bne.n	15648 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
   1563a:	4a05      	ldr	r2, [pc, #20]	; (15650 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
   1563c:	9b01      	ldr	r3, [sp, #4]
   1563e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15642:	2b00      	cmp	r3, #0
   15644:	d100      	bne.n	15648 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15646:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15648:	bf00      	nop
   1564a:	b003      	add	sp, #12
   1564c:	f85d fb04 	ldr.w	pc, [sp], #4
   15650:	1fff9538 	.word	0x1fff9538
   15654:	1fff9534 	.word	0x1fff9534

00015658 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
   15658:	b500      	push	{lr}
   1565a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1565c:	f7ec f930 	bl	18c0 <Sys_GetCoreID>
   15660:	4603      	mov	r3, r0
   15662:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
   15664:	4a10      	ldr	r2, [pc, #64]	; (156a8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   15666:	9b01      	ldr	r3, [sp, #4]
   15668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1566c:	2b00      	cmp	r3, #0
   1566e:	d10d      	bne.n	1568c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15670:	f7eb f95c 	bl	92c <Mcu_schm_read_msr>
   15674:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15676:	9b00      	ldr	r3, [sp, #0]
   15678:	f003 0301 	and.w	r3, r3, #1
   1567c:	2b00      	cmp	r3, #0
   1567e:	d100      	bne.n	15682 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15680:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   15682:	490a      	ldr	r1, [pc, #40]	; (156ac <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
   15684:	9b01      	ldr	r3, [sp, #4]
   15686:	9a00      	ldr	r2, [sp, #0]
   15688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
   1568c:	4a06      	ldr	r2, [pc, #24]	; (156a8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   1568e:	9b01      	ldr	r3, [sp, #4]
   15690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15694:	1c5a      	adds	r2, r3, #1
   15696:	4904      	ldr	r1, [pc, #16]	; (156a8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
   15698:	9b01      	ldr	r3, [sp, #4]
   1569a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1569e:	bf00      	nop
   156a0:	b003      	add	sp, #12
   156a2:	f85d fb04 	ldr.w	pc, [sp], #4
   156a6:	bf00      	nop
   156a8:	1fff9540 	.word	0x1fff9540
   156ac:	1fff953c 	.word	0x1fff953c

000156b0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
   156b0:	b500      	push	{lr}
   156b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   156b4:	f7ec f904 	bl	18c0 <Sys_GetCoreID>
   156b8:	4603      	mov	r3, r0
   156ba:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
   156bc:	4a0d      	ldr	r2, [pc, #52]	; (156f4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   156be:	9b01      	ldr	r3, [sp, #4]
   156c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156c4:	1e5a      	subs	r2, r3, #1
   156c6:	490b      	ldr	r1, [pc, #44]	; (156f4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   156c8:	9b01      	ldr	r3, [sp, #4]
   156ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   156ce:	4a0a      	ldr	r2, [pc, #40]	; (156f8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
   156d0:	9b01      	ldr	r3, [sp, #4]
   156d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156d6:	f003 0301 	and.w	r3, r3, #1
   156da:	2b00      	cmp	r3, #0
   156dc:	d106      	bne.n	156ec <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
   156de:	4a05      	ldr	r2, [pc, #20]	; (156f4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
   156e0:	9b01      	ldr	r3, [sp, #4]
   156e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   156e6:	2b00      	cmp	r3, #0
   156e8:	d100      	bne.n	156ec <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   156ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   156ec:	bf00      	nop
   156ee:	b003      	add	sp, #12
   156f0:	f85d fb04 	ldr.w	pc, [sp], #4
   156f4:	1fff9540 	.word	0x1fff9540
   156f8:	1fff953c 	.word	0x1fff953c

000156fc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
   156fc:	b500      	push	{lr}
   156fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15700:	f7ec f8de 	bl	18c0 <Sys_GetCoreID>
   15704:	4603      	mov	r3, r0
   15706:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
   15708:	4a10      	ldr	r2, [pc, #64]	; (1574c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   1570a:	9b01      	ldr	r3, [sp, #4]
   1570c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15710:	2b00      	cmp	r3, #0
   15712:	d10d      	bne.n	15730 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15714:	f7eb f90a 	bl	92c <Mcu_schm_read_msr>
   15718:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1571a:	9b00      	ldr	r3, [sp, #0]
   1571c:	f003 0301 	and.w	r3, r3, #1
   15720:	2b00      	cmp	r3, #0
   15722:	d100      	bne.n	15726 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15724:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   15726:	490a      	ldr	r1, [pc, #40]	; (15750 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
   15728:	9b01      	ldr	r3, [sp, #4]
   1572a:	9a00      	ldr	r2, [sp, #0]
   1572c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
   15730:	4a06      	ldr	r2, [pc, #24]	; (1574c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   15732:	9b01      	ldr	r3, [sp, #4]
   15734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15738:	1c5a      	adds	r2, r3, #1
   1573a:	4904      	ldr	r1, [pc, #16]	; (1574c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
   1573c:	9b01      	ldr	r3, [sp, #4]
   1573e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15742:	bf00      	nop
   15744:	b003      	add	sp, #12
   15746:	f85d fb04 	ldr.w	pc, [sp], #4
   1574a:	bf00      	nop
   1574c:	1fff9548 	.word	0x1fff9548
   15750:	1fff9544 	.word	0x1fff9544

00015754 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
   15754:	b500      	push	{lr}
   15756:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15758:	f7ec f8b2 	bl	18c0 <Sys_GetCoreID>
   1575c:	4603      	mov	r3, r0
   1575e:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
   15760:	4a0d      	ldr	r2, [pc, #52]	; (15798 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   15762:	9b01      	ldr	r3, [sp, #4]
   15764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15768:	1e5a      	subs	r2, r3, #1
   1576a:	490b      	ldr	r1, [pc, #44]	; (15798 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   1576c:	9b01      	ldr	r3, [sp, #4]
   1576e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   15772:	4a0a      	ldr	r2, [pc, #40]	; (1579c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
   15774:	9b01      	ldr	r3, [sp, #4]
   15776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1577a:	f003 0301 	and.w	r3, r3, #1
   1577e:	2b00      	cmp	r3, #0
   15780:	d106      	bne.n	15790 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
   15782:	4a05      	ldr	r2, [pc, #20]	; (15798 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
   15784:	9b01      	ldr	r3, [sp, #4]
   15786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1578a:	2b00      	cmp	r3, #0
   1578c:	d100      	bne.n	15790 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1578e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15790:	bf00      	nop
   15792:	b003      	add	sp, #12
   15794:	f85d fb04 	ldr.w	pc, [sp], #4
   15798:	1fff9548 	.word	0x1fff9548
   1579c:	1fff9544 	.word	0x1fff9544

000157a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
   157a0:	b500      	push	{lr}
   157a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   157a4:	f7ec f88c 	bl	18c0 <Sys_GetCoreID>
   157a8:	4603      	mov	r3, r0
   157aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
   157ac:	4a10      	ldr	r2, [pc, #64]	; (157f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   157ae:	9b01      	ldr	r3, [sp, #4]
   157b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157b4:	2b00      	cmp	r3, #0
   157b6:	d10d      	bne.n	157d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   157b8:	f7eb f8c1 	bl	93e <Port_schm_read_msr>
   157bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   157be:	9b00      	ldr	r3, [sp, #0]
   157c0:	f003 0301 	and.w	r3, r3, #1
   157c4:	2b00      	cmp	r3, #0
   157c6:	d100      	bne.n	157ca <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   157c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   157ca:	490a      	ldr	r1, [pc, #40]	; (157f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
   157cc:	9b01      	ldr	r3, [sp, #4]
   157ce:	9a00      	ldr	r2, [sp, #0]
   157d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
   157d4:	4a06      	ldr	r2, [pc, #24]	; (157f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   157d6:	9b01      	ldr	r3, [sp, #4]
   157d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   157dc:	1c5a      	adds	r2, r3, #1
   157de:	4904      	ldr	r1, [pc, #16]	; (157f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
   157e0:	9b01      	ldr	r3, [sp, #4]
   157e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   157e6:	bf00      	nop
   157e8:	b003      	add	sp, #12
   157ea:	f85d fb04 	ldr.w	pc, [sp], #4
   157ee:	bf00      	nop
   157f0:	1fff9550 	.word	0x1fff9550
   157f4:	1fff954c 	.word	0x1fff954c

000157f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
   157f8:	b500      	push	{lr}
   157fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   157fc:	f7ec f860 	bl	18c0 <Sys_GetCoreID>
   15800:	4603      	mov	r3, r0
   15802:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
   15804:	4a0d      	ldr	r2, [pc, #52]	; (1583c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   15806:	9b01      	ldr	r3, [sp, #4]
   15808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1580c:	1e5a      	subs	r2, r3, #1
   1580e:	490b      	ldr	r1, [pc, #44]	; (1583c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   15810:	9b01      	ldr	r3, [sp, #4]
   15812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   15816:	4a0a      	ldr	r2, [pc, #40]	; (15840 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
   15818:	9b01      	ldr	r3, [sp, #4]
   1581a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1581e:	f003 0301 	and.w	r3, r3, #1
   15822:	2b00      	cmp	r3, #0
   15824:	d106      	bne.n	15834 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
   15826:	4a05      	ldr	r2, [pc, #20]	; (1583c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
   15828:	9b01      	ldr	r3, [sp, #4]
   1582a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1582e:	2b00      	cmp	r3, #0
   15830:	d100      	bne.n	15834 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15832:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15834:	bf00      	nop
   15836:	b003      	add	sp, #12
   15838:	f85d fb04 	ldr.w	pc, [sp], #4
   1583c:	1fff9550 	.word	0x1fff9550
   15840:	1fff954c 	.word	0x1fff954c

00015844 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
   15844:	b500      	push	{lr}
   15846:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15848:	f7ec f83a 	bl	18c0 <Sys_GetCoreID>
   1584c:	4603      	mov	r3, r0
   1584e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
   15850:	4a10      	ldr	r2, [pc, #64]	; (15894 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   15852:	9b01      	ldr	r3, [sp, #4]
   15854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15858:	2b00      	cmp	r3, #0
   1585a:	d10d      	bne.n	15878 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1585c:	f7eb f86f 	bl	93e <Port_schm_read_msr>
   15860:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15862:	9b00      	ldr	r3, [sp, #0]
   15864:	f003 0301 	and.w	r3, r3, #1
   15868:	2b00      	cmp	r3, #0
   1586a:	d100      	bne.n	1586e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1586c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   1586e:	490a      	ldr	r1, [pc, #40]	; (15898 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
   15870:	9b01      	ldr	r3, [sp, #4]
   15872:	9a00      	ldr	r2, [sp, #0]
   15874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
   15878:	4a06      	ldr	r2, [pc, #24]	; (15894 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   1587a:	9b01      	ldr	r3, [sp, #4]
   1587c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15880:	1c5a      	adds	r2, r3, #1
   15882:	4904      	ldr	r1, [pc, #16]	; (15894 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
   15884:	9b01      	ldr	r3, [sp, #4]
   15886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1588a:	bf00      	nop
   1588c:	b003      	add	sp, #12
   1588e:	f85d fb04 	ldr.w	pc, [sp], #4
   15892:	bf00      	nop
   15894:	1fff9558 	.word	0x1fff9558
   15898:	1fff9554 	.word	0x1fff9554

0001589c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
   1589c:	b500      	push	{lr}
   1589e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   158a0:	f7ec f80e 	bl	18c0 <Sys_GetCoreID>
   158a4:	4603      	mov	r3, r0
   158a6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
   158a8:	4a0d      	ldr	r2, [pc, #52]	; (158e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   158aa:	9b01      	ldr	r3, [sp, #4]
   158ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158b0:	1e5a      	subs	r2, r3, #1
   158b2:	490b      	ldr	r1, [pc, #44]	; (158e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   158b4:	9b01      	ldr	r3, [sp, #4]
   158b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   158ba:	4a0a      	ldr	r2, [pc, #40]	; (158e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
   158bc:	9b01      	ldr	r3, [sp, #4]
   158be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158c2:	f003 0301 	and.w	r3, r3, #1
   158c6:	2b00      	cmp	r3, #0
   158c8:	d106      	bne.n	158d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
   158ca:	4a05      	ldr	r2, [pc, #20]	; (158e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
   158cc:	9b01      	ldr	r3, [sp, #4]
   158ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158d2:	2b00      	cmp	r3, #0
   158d4:	d100      	bne.n	158d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   158d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   158d8:	bf00      	nop
   158da:	b003      	add	sp, #12
   158dc:	f85d fb04 	ldr.w	pc, [sp], #4
   158e0:	1fff9558 	.word	0x1fff9558
   158e4:	1fff9554 	.word	0x1fff9554

000158e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
   158e8:	b500      	push	{lr}
   158ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   158ec:	f7eb ffe8 	bl	18c0 <Sys_GetCoreID>
   158f0:	4603      	mov	r3, r0
   158f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
   158f4:	4a10      	ldr	r2, [pc, #64]	; (15938 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   158f6:	9b01      	ldr	r3, [sp, #4]
   158f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   158fc:	2b00      	cmp	r3, #0
   158fe:	d10d      	bne.n	1591c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15900:	f7eb f81d 	bl	93e <Port_schm_read_msr>
   15904:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15906:	9b00      	ldr	r3, [sp, #0]
   15908:	f003 0301 	and.w	r3, r3, #1
   1590c:	2b00      	cmp	r3, #0
   1590e:	d100      	bne.n	15912 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15910:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   15912:	490a      	ldr	r1, [pc, #40]	; (1593c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
   15914:	9b01      	ldr	r3, [sp, #4]
   15916:	9a00      	ldr	r2, [sp, #0]
   15918:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
   1591c:	4a06      	ldr	r2, [pc, #24]	; (15938 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   1591e:	9b01      	ldr	r3, [sp, #4]
   15920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15924:	1c5a      	adds	r2, r3, #1
   15926:	4904      	ldr	r1, [pc, #16]	; (15938 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
   15928:	9b01      	ldr	r3, [sp, #4]
   1592a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1592e:	bf00      	nop
   15930:	b003      	add	sp, #12
   15932:	f85d fb04 	ldr.w	pc, [sp], #4
   15936:	bf00      	nop
   15938:	1fff9560 	.word	0x1fff9560
   1593c:	1fff955c 	.word	0x1fff955c

00015940 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
   15940:	b500      	push	{lr}
   15942:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15944:	f7eb ffbc 	bl	18c0 <Sys_GetCoreID>
   15948:	4603      	mov	r3, r0
   1594a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
   1594c:	4a0d      	ldr	r2, [pc, #52]	; (15984 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   1594e:	9b01      	ldr	r3, [sp, #4]
   15950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15954:	1e5a      	subs	r2, r3, #1
   15956:	490b      	ldr	r1, [pc, #44]	; (15984 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   15958:	9b01      	ldr	r3, [sp, #4]
   1595a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   1595e:	4a0a      	ldr	r2, [pc, #40]	; (15988 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
   15960:	9b01      	ldr	r3, [sp, #4]
   15962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15966:	f003 0301 	and.w	r3, r3, #1
   1596a:	2b00      	cmp	r3, #0
   1596c:	d106      	bne.n	1597c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
   1596e:	4a05      	ldr	r2, [pc, #20]	; (15984 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
   15970:	9b01      	ldr	r3, [sp, #4]
   15972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15976:	2b00      	cmp	r3, #0
   15978:	d100      	bne.n	1597c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1597a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1597c:	bf00      	nop
   1597e:	b003      	add	sp, #12
   15980:	f85d fb04 	ldr.w	pc, [sp], #4
   15984:	1fff9560 	.word	0x1fff9560
   15988:	1fff955c 	.word	0x1fff955c

0001598c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
   1598c:	b500      	push	{lr}
   1598e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15990:	f7eb ff96 	bl	18c0 <Sys_GetCoreID>
   15994:	4603      	mov	r3, r0
   15996:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
   15998:	4a10      	ldr	r2, [pc, #64]	; (159dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   1599a:	9b01      	ldr	r3, [sp, #4]
   1599c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159a0:	2b00      	cmp	r3, #0
   159a2:	d10d      	bne.n	159c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   159a4:	f7ea ffcb 	bl	93e <Port_schm_read_msr>
   159a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   159aa:	9b00      	ldr	r3, [sp, #0]
   159ac:	f003 0301 	and.w	r3, r3, #1
   159b0:	2b00      	cmp	r3, #0
   159b2:	d100      	bne.n	159b6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   159b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   159b6:	490a      	ldr	r1, [pc, #40]	; (159e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
   159b8:	9b01      	ldr	r3, [sp, #4]
   159ba:	9a00      	ldr	r2, [sp, #0]
   159bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
   159c0:	4a06      	ldr	r2, [pc, #24]	; (159dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   159c2:	9b01      	ldr	r3, [sp, #4]
   159c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159c8:	1c5a      	adds	r2, r3, #1
   159ca:	4904      	ldr	r1, [pc, #16]	; (159dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
   159cc:	9b01      	ldr	r3, [sp, #4]
   159ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   159d2:	bf00      	nop
   159d4:	b003      	add	sp, #12
   159d6:	f85d fb04 	ldr.w	pc, [sp], #4
   159da:	bf00      	nop
   159dc:	1fff9568 	.word	0x1fff9568
   159e0:	1fff9564 	.word	0x1fff9564

000159e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
   159e4:	b500      	push	{lr}
   159e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   159e8:	f7eb ff6a 	bl	18c0 <Sys_GetCoreID>
   159ec:	4603      	mov	r3, r0
   159ee:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
   159f0:	4a0d      	ldr	r2, [pc, #52]	; (15a28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   159f2:	9b01      	ldr	r3, [sp, #4]
   159f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159f8:	1e5a      	subs	r2, r3, #1
   159fa:	490b      	ldr	r1, [pc, #44]	; (15a28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   159fc:	9b01      	ldr	r3, [sp, #4]
   159fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   15a02:	4a0a      	ldr	r2, [pc, #40]	; (15a2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
   15a04:	9b01      	ldr	r3, [sp, #4]
   15a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a0a:	f003 0301 	and.w	r3, r3, #1
   15a0e:	2b00      	cmp	r3, #0
   15a10:	d106      	bne.n	15a20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
   15a12:	4a05      	ldr	r2, [pc, #20]	; (15a28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
   15a14:	9b01      	ldr	r3, [sp, #4]
   15a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a1a:	2b00      	cmp	r3, #0
   15a1c:	d100      	bne.n	15a20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15a1e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15a20:	bf00      	nop
   15a22:	b003      	add	sp, #12
   15a24:	f85d fb04 	ldr.w	pc, [sp], #4
   15a28:	1fff9568 	.word	0x1fff9568
   15a2c:	1fff9564 	.word	0x1fff9564

00015a30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
   15a30:	b500      	push	{lr}
   15a32:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15a34:	f7eb ff44 	bl	18c0 <Sys_GetCoreID>
   15a38:	4603      	mov	r3, r0
   15a3a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
   15a3c:	4a10      	ldr	r2, [pc, #64]	; (15a80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   15a3e:	9b01      	ldr	r3, [sp, #4]
   15a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a44:	2b00      	cmp	r3, #0
   15a46:	d10d      	bne.n	15a64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15a48:	f7ea ff79 	bl	93e <Port_schm_read_msr>
   15a4c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15a4e:	9b00      	ldr	r3, [sp, #0]
   15a50:	f003 0301 	and.w	r3, r3, #1
   15a54:	2b00      	cmp	r3, #0
   15a56:	d100      	bne.n	15a5a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15a58:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   15a5a:	490a      	ldr	r1, [pc, #40]	; (15a84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
   15a5c:	9b01      	ldr	r3, [sp, #4]
   15a5e:	9a00      	ldr	r2, [sp, #0]
   15a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
   15a64:	4a06      	ldr	r2, [pc, #24]	; (15a80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   15a66:	9b01      	ldr	r3, [sp, #4]
   15a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a6c:	1c5a      	adds	r2, r3, #1
   15a6e:	4904      	ldr	r1, [pc, #16]	; (15a80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
   15a70:	9b01      	ldr	r3, [sp, #4]
   15a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15a76:	bf00      	nop
   15a78:	b003      	add	sp, #12
   15a7a:	f85d fb04 	ldr.w	pc, [sp], #4
   15a7e:	bf00      	nop
   15a80:	1fff9570 	.word	0x1fff9570
   15a84:	1fff956c 	.word	0x1fff956c

00015a88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
   15a88:	b500      	push	{lr}
   15a8a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15a8c:	f7eb ff18 	bl	18c0 <Sys_GetCoreID>
   15a90:	4603      	mov	r3, r0
   15a92:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
   15a94:	4a0d      	ldr	r2, [pc, #52]	; (15acc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   15a96:	9b01      	ldr	r3, [sp, #4]
   15a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15a9c:	1e5a      	subs	r2, r3, #1
   15a9e:	490b      	ldr	r1, [pc, #44]	; (15acc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   15aa0:	9b01      	ldr	r3, [sp, #4]
   15aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   15aa6:	4a0a      	ldr	r2, [pc, #40]	; (15ad0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
   15aa8:	9b01      	ldr	r3, [sp, #4]
   15aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15aae:	f003 0301 	and.w	r3, r3, #1
   15ab2:	2b00      	cmp	r3, #0
   15ab4:	d106      	bne.n	15ac4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
   15ab6:	4a05      	ldr	r2, [pc, #20]	; (15acc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
   15ab8:	9b01      	ldr	r3, [sp, #4]
   15aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15abe:	2b00      	cmp	r3, #0
   15ac0:	d100      	bne.n	15ac4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15ac2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15ac4:	bf00      	nop
   15ac6:	b003      	add	sp, #12
   15ac8:	f85d fb04 	ldr.w	pc, [sp], #4
   15acc:	1fff9570 	.word	0x1fff9570
   15ad0:	1fff956c 	.word	0x1fff956c

00015ad4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
   15ad4:	b500      	push	{lr}
   15ad6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15ad8:	f7eb fef2 	bl	18c0 <Sys_GetCoreID>
   15adc:	4603      	mov	r3, r0
   15ade:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
   15ae0:	4a10      	ldr	r2, [pc, #64]	; (15b24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   15ae2:	9b01      	ldr	r3, [sp, #4]
   15ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ae8:	2b00      	cmp	r3, #0
   15aea:	d10d      	bne.n	15b08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15aec:	f7ea ff27 	bl	93e <Port_schm_read_msr>
   15af0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15af2:	9b00      	ldr	r3, [sp, #0]
   15af4:	f003 0301 	and.w	r3, r3, #1
   15af8:	2b00      	cmp	r3, #0
   15afa:	d100      	bne.n	15afe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15afc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   15afe:	490a      	ldr	r1, [pc, #40]	; (15b28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
   15b00:	9b01      	ldr	r3, [sp, #4]
   15b02:	9a00      	ldr	r2, [sp, #0]
   15b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
   15b08:	4a06      	ldr	r2, [pc, #24]	; (15b24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   15b0a:	9b01      	ldr	r3, [sp, #4]
   15b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b10:	1c5a      	adds	r2, r3, #1
   15b12:	4904      	ldr	r1, [pc, #16]	; (15b24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
   15b14:	9b01      	ldr	r3, [sp, #4]
   15b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15b1a:	bf00      	nop
   15b1c:	b003      	add	sp, #12
   15b1e:	f85d fb04 	ldr.w	pc, [sp], #4
   15b22:	bf00      	nop
   15b24:	1fff9578 	.word	0x1fff9578
   15b28:	1fff9574 	.word	0x1fff9574

00015b2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
   15b2c:	b500      	push	{lr}
   15b2e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15b30:	f7eb fec6 	bl	18c0 <Sys_GetCoreID>
   15b34:	4603      	mov	r3, r0
   15b36:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
   15b38:	4a0d      	ldr	r2, [pc, #52]	; (15b70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   15b3a:	9b01      	ldr	r3, [sp, #4]
   15b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b40:	1e5a      	subs	r2, r3, #1
   15b42:	490b      	ldr	r1, [pc, #44]	; (15b70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   15b44:	9b01      	ldr	r3, [sp, #4]
   15b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   15b4a:	4a0a      	ldr	r2, [pc, #40]	; (15b74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
   15b4c:	9b01      	ldr	r3, [sp, #4]
   15b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b52:	f003 0301 	and.w	r3, r3, #1
   15b56:	2b00      	cmp	r3, #0
   15b58:	d106      	bne.n	15b68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
   15b5a:	4a05      	ldr	r2, [pc, #20]	; (15b70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
   15b5c:	9b01      	ldr	r3, [sp, #4]
   15b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b62:	2b00      	cmp	r3, #0
   15b64:	d100      	bne.n	15b68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15b66:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15b68:	bf00      	nop
   15b6a:	b003      	add	sp, #12
   15b6c:	f85d fb04 	ldr.w	pc, [sp], #4
   15b70:	1fff9578 	.word	0x1fff9578
   15b74:	1fff9574 	.word	0x1fff9574

00015b78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
   15b78:	b500      	push	{lr}
   15b7a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15b7c:	f7eb fea0 	bl	18c0 <Sys_GetCoreID>
   15b80:	4603      	mov	r3, r0
   15b82:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
   15b84:	4a10      	ldr	r2, [pc, #64]	; (15bc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   15b86:	9b01      	ldr	r3, [sp, #4]
   15b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15b8c:	2b00      	cmp	r3, #0
   15b8e:	d10d      	bne.n	15bac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15b90:	f7ea fed5 	bl	93e <Port_schm_read_msr>
   15b94:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15b96:	9b00      	ldr	r3, [sp, #0]
   15b98:	f003 0301 	and.w	r3, r3, #1
   15b9c:	2b00      	cmp	r3, #0
   15b9e:	d100      	bne.n	15ba2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15ba0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
   15ba2:	490a      	ldr	r1, [pc, #40]	; (15bcc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
   15ba4:	9b01      	ldr	r3, [sp, #4]
   15ba6:	9a00      	ldr	r2, [sp, #0]
   15ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
   15bac:	4a06      	ldr	r2, [pc, #24]	; (15bc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   15bae:	9b01      	ldr	r3, [sp, #4]
   15bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15bb4:	1c5a      	adds	r2, r3, #1
   15bb6:	4904      	ldr	r1, [pc, #16]	; (15bc8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
   15bb8:	9b01      	ldr	r3, [sp, #4]
   15bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15bbe:	bf00      	nop
   15bc0:	b003      	add	sp, #12
   15bc2:	f85d fb04 	ldr.w	pc, [sp], #4
   15bc6:	bf00      	nop
   15bc8:	1fff9580 	.word	0x1fff9580
   15bcc:	1fff957c 	.word	0x1fff957c

00015bd0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
   15bd0:	b500      	push	{lr}
   15bd2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15bd4:	f7eb fe74 	bl	18c0 <Sys_GetCoreID>
   15bd8:	4603      	mov	r3, r0
   15bda:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
   15bdc:	4a0d      	ldr	r2, [pc, #52]	; (15c14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   15bde:	9b01      	ldr	r3, [sp, #4]
   15be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15be4:	1e5a      	subs	r2, r3, #1
   15be6:	490b      	ldr	r1, [pc, #44]	; (15c14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   15be8:	9b01      	ldr	r3, [sp, #4]
   15bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
   15bee:	4a0a      	ldr	r2, [pc, #40]	; (15c18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
   15bf0:	9b01      	ldr	r3, [sp, #4]
   15bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15bf6:	f003 0301 	and.w	r3, r3, #1
   15bfa:	2b00      	cmp	r3, #0
   15bfc:	d106      	bne.n	15c0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
   15bfe:	4a05      	ldr	r2, [pc, #20]	; (15c14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
   15c00:	9b01      	ldr	r3, [sp, #4]
   15c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c06:	2b00      	cmp	r3, #0
   15c08:	d100      	bne.n	15c0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15c0a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15c0c:	bf00      	nop
   15c0e:	b003      	add	sp, #12
   15c10:	f85d fb04 	ldr.w	pc, [sp], #4
   15c14:	1fff9580 	.word	0x1fff9580
   15c18:	1fff957c 	.word	0x1fff957c

00015c1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
   15c1c:	b500      	push	{lr}
   15c1e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15c20:	f7eb fe4e 	bl	18c0 <Sys_GetCoreID>
   15c24:	4603      	mov	r3, r0
   15c26:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
   15c28:	4a10      	ldr	r2, [pc, #64]	; (15c6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   15c2a:	9b01      	ldr	r3, [sp, #4]
   15c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c30:	2b00      	cmp	r3, #0
   15c32:	d10d      	bne.n	15c50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15c34:	f7ea fe83 	bl	93e <Port_schm_read_msr>
   15c38:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15c3a:	9b00      	ldr	r3, [sp, #0]
   15c3c:	f003 0301 	and.w	r3, r3, #1
   15c40:	2b00      	cmp	r3, #0
   15c42:	d100      	bne.n	15c46 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15c44:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
   15c46:	490a      	ldr	r1, [pc, #40]	; (15c70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
   15c48:	9b01      	ldr	r3, [sp, #4]
   15c4a:	9a00      	ldr	r2, [sp, #0]
   15c4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
   15c50:	4a06      	ldr	r2, [pc, #24]	; (15c6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   15c52:	9b01      	ldr	r3, [sp, #4]
   15c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c58:	1c5a      	adds	r2, r3, #1
   15c5a:	4904      	ldr	r1, [pc, #16]	; (15c6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
   15c5c:	9b01      	ldr	r3, [sp, #4]
   15c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15c62:	bf00      	nop
   15c64:	b003      	add	sp, #12
   15c66:	f85d fb04 	ldr.w	pc, [sp], #4
   15c6a:	bf00      	nop
   15c6c:	1fff9588 	.word	0x1fff9588
   15c70:	1fff9584 	.word	0x1fff9584

00015c74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
   15c74:	b500      	push	{lr}
   15c76:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15c78:	f7eb fe22 	bl	18c0 <Sys_GetCoreID>
   15c7c:	4603      	mov	r3, r0
   15c7e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
   15c80:	4a0d      	ldr	r2, [pc, #52]	; (15cb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   15c82:	9b01      	ldr	r3, [sp, #4]
   15c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c88:	1e5a      	subs	r2, r3, #1
   15c8a:	490b      	ldr	r1, [pc, #44]	; (15cb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   15c8c:	9b01      	ldr	r3, [sp, #4]
   15c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
   15c92:	4a0a      	ldr	r2, [pc, #40]	; (15cbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
   15c94:	9b01      	ldr	r3, [sp, #4]
   15c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15c9a:	f003 0301 	and.w	r3, r3, #1
   15c9e:	2b00      	cmp	r3, #0
   15ca0:	d106      	bne.n	15cb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
   15ca2:	4a05      	ldr	r2, [pc, #20]	; (15cb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
   15ca4:	9b01      	ldr	r3, [sp, #4]
   15ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15caa:	2b00      	cmp	r3, #0
   15cac:	d100      	bne.n	15cb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15cae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15cb0:	bf00      	nop
   15cb2:	b003      	add	sp, #12
   15cb4:	f85d fb04 	ldr.w	pc, [sp], #4
   15cb8:	1fff9588 	.word	0x1fff9588
   15cbc:	1fff9584 	.word	0x1fff9584

00015cc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
   15cc0:	b500      	push	{lr}
   15cc2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15cc4:	f7eb fdfc 	bl	18c0 <Sys_GetCoreID>
   15cc8:	4603      	mov	r3, r0
   15cca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
   15ccc:	4a10      	ldr	r2, [pc, #64]	; (15d10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   15cce:	9b01      	ldr	r3, [sp, #4]
   15cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15cd4:	2b00      	cmp	r3, #0
   15cd6:	d10d      	bne.n	15cf4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15cd8:	f7ea fe31 	bl	93e <Port_schm_read_msr>
   15cdc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15cde:	9b00      	ldr	r3, [sp, #0]
   15ce0:	f003 0301 	and.w	r3, r3, #1
   15ce4:	2b00      	cmp	r3, #0
   15ce6:	d100      	bne.n	15cea <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15ce8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
   15cea:	490a      	ldr	r1, [pc, #40]	; (15d14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
   15cec:	9b01      	ldr	r3, [sp, #4]
   15cee:	9a00      	ldr	r2, [sp, #0]
   15cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
   15cf4:	4a06      	ldr	r2, [pc, #24]	; (15d10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   15cf6:	9b01      	ldr	r3, [sp, #4]
   15cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15cfc:	1c5a      	adds	r2, r3, #1
   15cfe:	4904      	ldr	r1, [pc, #16]	; (15d10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
   15d00:	9b01      	ldr	r3, [sp, #4]
   15d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15d06:	bf00      	nop
   15d08:	b003      	add	sp, #12
   15d0a:	f85d fb04 	ldr.w	pc, [sp], #4
   15d0e:	bf00      	nop
   15d10:	1fff9590 	.word	0x1fff9590
   15d14:	1fff958c 	.word	0x1fff958c

00015d18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
   15d18:	b500      	push	{lr}
   15d1a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15d1c:	f7eb fdd0 	bl	18c0 <Sys_GetCoreID>
   15d20:	4603      	mov	r3, r0
   15d22:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
   15d24:	4a0d      	ldr	r2, [pc, #52]	; (15d5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   15d26:	9b01      	ldr	r3, [sp, #4]
   15d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d2c:	1e5a      	subs	r2, r3, #1
   15d2e:	490b      	ldr	r1, [pc, #44]	; (15d5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   15d30:	9b01      	ldr	r3, [sp, #4]
   15d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
   15d36:	4a0a      	ldr	r2, [pc, #40]	; (15d60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
   15d38:	9b01      	ldr	r3, [sp, #4]
   15d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d3e:	f003 0301 	and.w	r3, r3, #1
   15d42:	2b00      	cmp	r3, #0
   15d44:	d106      	bne.n	15d54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
   15d46:	4a05      	ldr	r2, [pc, #20]	; (15d5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
   15d48:	9b01      	ldr	r3, [sp, #4]
   15d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d4e:	2b00      	cmp	r3, #0
   15d50:	d100      	bne.n	15d54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15d52:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15d54:	bf00      	nop
   15d56:	b003      	add	sp, #12
   15d58:	f85d fb04 	ldr.w	pc, [sp], #4
   15d5c:	1fff9590 	.word	0x1fff9590
   15d60:	1fff958c 	.word	0x1fff958c

00015d64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
   15d64:	b500      	push	{lr}
   15d66:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15d68:	f7eb fdaa 	bl	18c0 <Sys_GetCoreID>
   15d6c:	4603      	mov	r3, r0
   15d6e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
   15d70:	4a10      	ldr	r2, [pc, #64]	; (15db4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   15d72:	9b01      	ldr	r3, [sp, #4]
   15d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15d78:	2b00      	cmp	r3, #0
   15d7a:	d10d      	bne.n	15d98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15d7c:	f7ea fddf 	bl	93e <Port_schm_read_msr>
   15d80:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15d82:	9b00      	ldr	r3, [sp, #0]
   15d84:	f003 0301 	and.w	r3, r3, #1
   15d88:	2b00      	cmp	r3, #0
   15d8a:	d100      	bne.n	15d8e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15d8c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
   15d8e:	490a      	ldr	r1, [pc, #40]	; (15db8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
   15d90:	9b01      	ldr	r3, [sp, #4]
   15d92:	9a00      	ldr	r2, [sp, #0]
   15d94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
   15d98:	4a06      	ldr	r2, [pc, #24]	; (15db4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   15d9a:	9b01      	ldr	r3, [sp, #4]
   15d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15da0:	1c5a      	adds	r2, r3, #1
   15da2:	4904      	ldr	r1, [pc, #16]	; (15db4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
   15da4:	9b01      	ldr	r3, [sp, #4]
   15da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15daa:	bf00      	nop
   15dac:	b003      	add	sp, #12
   15dae:	f85d fb04 	ldr.w	pc, [sp], #4
   15db2:	bf00      	nop
   15db4:	1fff9598 	.word	0x1fff9598
   15db8:	1fff9594 	.word	0x1fff9594

00015dbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
   15dbc:	b500      	push	{lr}
   15dbe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15dc0:	f7eb fd7e 	bl	18c0 <Sys_GetCoreID>
   15dc4:	4603      	mov	r3, r0
   15dc6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
   15dc8:	4a0d      	ldr	r2, [pc, #52]	; (15e00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   15dca:	9b01      	ldr	r3, [sp, #4]
   15dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15dd0:	1e5a      	subs	r2, r3, #1
   15dd2:	490b      	ldr	r1, [pc, #44]	; (15e00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   15dd4:	9b01      	ldr	r3, [sp, #4]
   15dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
   15dda:	4a0a      	ldr	r2, [pc, #40]	; (15e04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
   15ddc:	9b01      	ldr	r3, [sp, #4]
   15dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15de2:	f003 0301 	and.w	r3, r3, #1
   15de6:	2b00      	cmp	r3, #0
   15de8:	d106      	bne.n	15df8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
   15dea:	4a05      	ldr	r2, [pc, #20]	; (15e00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
   15dec:	9b01      	ldr	r3, [sp, #4]
   15dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15df2:	2b00      	cmp	r3, #0
   15df4:	d100      	bne.n	15df8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15df6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15df8:	bf00      	nop
   15dfa:	b003      	add	sp, #12
   15dfc:	f85d fb04 	ldr.w	pc, [sp], #4
   15e00:	1fff9598 	.word	0x1fff9598
   15e04:	1fff9594 	.word	0x1fff9594

00015e08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
   15e08:	b500      	push	{lr}
   15e0a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15e0c:	f7eb fd58 	bl	18c0 <Sys_GetCoreID>
   15e10:	4603      	mov	r3, r0
   15e12:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
   15e14:	4a10      	ldr	r2, [pc, #64]	; (15e58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   15e16:	9b01      	ldr	r3, [sp, #4]
   15e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e1c:	2b00      	cmp	r3, #0
   15e1e:	d10d      	bne.n	15e3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15e20:	f7ea fd8d 	bl	93e <Port_schm_read_msr>
   15e24:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15e26:	9b00      	ldr	r3, [sp, #0]
   15e28:	f003 0301 	and.w	r3, r3, #1
   15e2c:	2b00      	cmp	r3, #0
   15e2e:	d100      	bne.n	15e32 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15e30:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   15e32:	490a      	ldr	r1, [pc, #40]	; (15e5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
   15e34:	9b01      	ldr	r3, [sp, #4]
   15e36:	9a00      	ldr	r2, [sp, #0]
   15e38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
   15e3c:	4a06      	ldr	r2, [pc, #24]	; (15e58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   15e3e:	9b01      	ldr	r3, [sp, #4]
   15e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e44:	1c5a      	adds	r2, r3, #1
   15e46:	4904      	ldr	r1, [pc, #16]	; (15e58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
   15e48:	9b01      	ldr	r3, [sp, #4]
   15e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15e4e:	bf00      	nop
   15e50:	b003      	add	sp, #12
   15e52:	f85d fb04 	ldr.w	pc, [sp], #4
   15e56:	bf00      	nop
   15e58:	1fff95a0 	.word	0x1fff95a0
   15e5c:	1fff959c 	.word	0x1fff959c

00015e60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
   15e60:	b500      	push	{lr}
   15e62:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15e64:	f7eb fd2c 	bl	18c0 <Sys_GetCoreID>
   15e68:	4603      	mov	r3, r0
   15e6a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
   15e6c:	4a0d      	ldr	r2, [pc, #52]	; (15ea4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   15e6e:	9b01      	ldr	r3, [sp, #4]
   15e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e74:	1e5a      	subs	r2, r3, #1
   15e76:	490b      	ldr	r1, [pc, #44]	; (15ea4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   15e78:	9b01      	ldr	r3, [sp, #4]
   15e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   15e7e:	4a0a      	ldr	r2, [pc, #40]	; (15ea8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
   15e80:	9b01      	ldr	r3, [sp, #4]
   15e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e86:	f003 0301 	and.w	r3, r3, #1
   15e8a:	2b00      	cmp	r3, #0
   15e8c:	d106      	bne.n	15e9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
   15e8e:	4a05      	ldr	r2, [pc, #20]	; (15ea4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
   15e90:	9b01      	ldr	r3, [sp, #4]
   15e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15e96:	2b00      	cmp	r3, #0
   15e98:	d100      	bne.n	15e9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15e9a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15e9c:	bf00      	nop
   15e9e:	b003      	add	sp, #12
   15ea0:	f85d fb04 	ldr.w	pc, [sp], #4
   15ea4:	1fff95a0 	.word	0x1fff95a0
   15ea8:	1fff959c 	.word	0x1fff959c

00015eac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
   15eac:	b500      	push	{lr}
   15eae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15eb0:	f7eb fd06 	bl	18c0 <Sys_GetCoreID>
   15eb4:	4603      	mov	r3, r0
   15eb6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
   15eb8:	4a10      	ldr	r2, [pc, #64]	; (15efc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   15eba:	9b01      	ldr	r3, [sp, #4]
   15ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ec0:	2b00      	cmp	r3, #0
   15ec2:	d10d      	bne.n	15ee0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15ec4:	f7ea fd3b 	bl	93e <Port_schm_read_msr>
   15ec8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15eca:	9b00      	ldr	r3, [sp, #0]
   15ecc:	f003 0301 	and.w	r3, r3, #1
   15ed0:	2b00      	cmp	r3, #0
   15ed2:	d100      	bne.n	15ed6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15ed4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   15ed6:	490a      	ldr	r1, [pc, #40]	; (15f00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
   15ed8:	9b01      	ldr	r3, [sp, #4]
   15eda:	9a00      	ldr	r2, [sp, #0]
   15edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
   15ee0:	4a06      	ldr	r2, [pc, #24]	; (15efc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   15ee2:	9b01      	ldr	r3, [sp, #4]
   15ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ee8:	1c5a      	adds	r2, r3, #1
   15eea:	4904      	ldr	r1, [pc, #16]	; (15efc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
   15eec:	9b01      	ldr	r3, [sp, #4]
   15eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15ef2:	bf00      	nop
   15ef4:	b003      	add	sp, #12
   15ef6:	f85d fb04 	ldr.w	pc, [sp], #4
   15efa:	bf00      	nop
   15efc:	1fff95a8 	.word	0x1fff95a8
   15f00:	1fff95a4 	.word	0x1fff95a4

00015f04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
   15f04:	b500      	push	{lr}
   15f06:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15f08:	f7eb fcda 	bl	18c0 <Sys_GetCoreID>
   15f0c:	4603      	mov	r3, r0
   15f0e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
   15f10:	4a0d      	ldr	r2, [pc, #52]	; (15f48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   15f12:	9b01      	ldr	r3, [sp, #4]
   15f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f18:	1e5a      	subs	r2, r3, #1
   15f1a:	490b      	ldr	r1, [pc, #44]	; (15f48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   15f1c:	9b01      	ldr	r3, [sp, #4]
   15f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   15f22:	4a0a      	ldr	r2, [pc, #40]	; (15f4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
   15f24:	9b01      	ldr	r3, [sp, #4]
   15f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f2a:	f003 0301 	and.w	r3, r3, #1
   15f2e:	2b00      	cmp	r3, #0
   15f30:	d106      	bne.n	15f40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
   15f32:	4a05      	ldr	r2, [pc, #20]	; (15f48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
   15f34:	9b01      	ldr	r3, [sp, #4]
   15f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f3a:	2b00      	cmp	r3, #0
   15f3c:	d100      	bne.n	15f40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15f3e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15f40:	bf00      	nop
   15f42:	b003      	add	sp, #12
   15f44:	f85d fb04 	ldr.w	pc, [sp], #4
   15f48:	1fff95a8 	.word	0x1fff95a8
   15f4c:	1fff95a4 	.word	0x1fff95a4

00015f50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
   15f50:	b500      	push	{lr}
   15f52:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15f54:	f7eb fcb4 	bl	18c0 <Sys_GetCoreID>
   15f58:	4603      	mov	r3, r0
   15f5a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
   15f5c:	4a10      	ldr	r2, [pc, #64]	; (15fa0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   15f5e:	9b01      	ldr	r3, [sp, #4]
   15f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f64:	2b00      	cmp	r3, #0
   15f66:	d10d      	bne.n	15f84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   15f68:	f7ea fce9 	bl	93e <Port_schm_read_msr>
   15f6c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   15f6e:	9b00      	ldr	r3, [sp, #0]
   15f70:	f003 0301 	and.w	r3, r3, #1
   15f74:	2b00      	cmp	r3, #0
   15f76:	d100      	bne.n	15f7a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   15f78:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   15f7a:	490a      	ldr	r1, [pc, #40]	; (15fa4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
   15f7c:	9b01      	ldr	r3, [sp, #4]
   15f7e:	9a00      	ldr	r2, [sp, #0]
   15f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
   15f84:	4a06      	ldr	r2, [pc, #24]	; (15fa0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   15f86:	9b01      	ldr	r3, [sp, #4]
   15f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f8c:	1c5a      	adds	r2, r3, #1
   15f8e:	4904      	ldr	r1, [pc, #16]	; (15fa0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
   15f90:	9b01      	ldr	r3, [sp, #4]
   15f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15f96:	bf00      	nop
   15f98:	b003      	add	sp, #12
   15f9a:	f85d fb04 	ldr.w	pc, [sp], #4
   15f9e:	bf00      	nop
   15fa0:	1fff95b0 	.word	0x1fff95b0
   15fa4:	1fff95ac 	.word	0x1fff95ac

00015fa8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
   15fa8:	b500      	push	{lr}
   15faa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15fac:	f7eb fc88 	bl	18c0 <Sys_GetCoreID>
   15fb0:	4603      	mov	r3, r0
   15fb2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
   15fb4:	4a0d      	ldr	r2, [pc, #52]	; (15fec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   15fb6:	9b01      	ldr	r3, [sp, #4]
   15fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15fbc:	1e5a      	subs	r2, r3, #1
   15fbe:	490b      	ldr	r1, [pc, #44]	; (15fec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   15fc0:	9b01      	ldr	r3, [sp, #4]
   15fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   15fc6:	4a0a      	ldr	r2, [pc, #40]	; (15ff0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
   15fc8:	9b01      	ldr	r3, [sp, #4]
   15fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15fce:	f003 0301 	and.w	r3, r3, #1
   15fd2:	2b00      	cmp	r3, #0
   15fd4:	d106      	bne.n	15fe4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
   15fd6:	4a05      	ldr	r2, [pc, #20]	; (15fec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
   15fd8:	9b01      	ldr	r3, [sp, #4]
   15fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15fde:	2b00      	cmp	r3, #0
   15fe0:	d100      	bne.n	15fe4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   15fe2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   15fe4:	bf00      	nop
   15fe6:	b003      	add	sp, #12
   15fe8:	f85d fb04 	ldr.w	pc, [sp], #4
   15fec:	1fff95b0 	.word	0x1fff95b0
   15ff0:	1fff95ac 	.word	0x1fff95ac

00015ff4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
   15ff4:	b500      	push	{lr}
   15ff6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   15ff8:	f7eb fc62 	bl	18c0 <Sys_GetCoreID>
   15ffc:	4603      	mov	r3, r0
   15ffe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
   16000:	4a10      	ldr	r2, [pc, #64]	; (16044 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   16002:	9b01      	ldr	r3, [sp, #4]
   16004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16008:	2b00      	cmp	r3, #0
   1600a:	d10d      	bne.n	16028 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1600c:	f7ea fc97 	bl	93e <Port_schm_read_msr>
   16010:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16012:	9b00      	ldr	r3, [sp, #0]
   16014:	f003 0301 	and.w	r3, r3, #1
   16018:	2b00      	cmp	r3, #0
   1601a:	d100      	bne.n	1601e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1601c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   1601e:	490a      	ldr	r1, [pc, #40]	; (16048 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
   16020:	9b01      	ldr	r3, [sp, #4]
   16022:	9a00      	ldr	r2, [sp, #0]
   16024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
   16028:	4a06      	ldr	r2, [pc, #24]	; (16044 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   1602a:	9b01      	ldr	r3, [sp, #4]
   1602c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16030:	1c5a      	adds	r2, r3, #1
   16032:	4904      	ldr	r1, [pc, #16]	; (16044 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
   16034:	9b01      	ldr	r3, [sp, #4]
   16036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1603a:	bf00      	nop
   1603c:	b003      	add	sp, #12
   1603e:	f85d fb04 	ldr.w	pc, [sp], #4
   16042:	bf00      	nop
   16044:	1fff95b8 	.word	0x1fff95b8
   16048:	1fff95b4 	.word	0x1fff95b4

0001604c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
   1604c:	b500      	push	{lr}
   1604e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16050:	f7eb fc36 	bl	18c0 <Sys_GetCoreID>
   16054:	4603      	mov	r3, r0
   16056:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
   16058:	4a0d      	ldr	r2, [pc, #52]	; (16090 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   1605a:	9b01      	ldr	r3, [sp, #4]
   1605c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16060:	1e5a      	subs	r2, r3, #1
   16062:	490b      	ldr	r1, [pc, #44]	; (16090 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   16064:	9b01      	ldr	r3, [sp, #4]
   16066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   1606a:	4a0a      	ldr	r2, [pc, #40]	; (16094 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
   1606c:	9b01      	ldr	r3, [sp, #4]
   1606e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16072:	f003 0301 	and.w	r3, r3, #1
   16076:	2b00      	cmp	r3, #0
   16078:	d106      	bne.n	16088 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
   1607a:	4a05      	ldr	r2, [pc, #20]	; (16090 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
   1607c:	9b01      	ldr	r3, [sp, #4]
   1607e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16082:	2b00      	cmp	r3, #0
   16084:	d100      	bne.n	16088 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16086:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16088:	bf00      	nop
   1608a:	b003      	add	sp, #12
   1608c:	f85d fb04 	ldr.w	pc, [sp], #4
   16090:	1fff95b8 	.word	0x1fff95b8
   16094:	1fff95b4 	.word	0x1fff95b4

00016098 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
   16098:	b500      	push	{lr}
   1609a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1609c:	f7eb fc10 	bl	18c0 <Sys_GetCoreID>
   160a0:	4603      	mov	r3, r0
   160a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
   160a4:	4a10      	ldr	r2, [pc, #64]	; (160e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   160a6:	9b01      	ldr	r3, [sp, #4]
   160a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   160ac:	2b00      	cmp	r3, #0
   160ae:	d10d      	bne.n	160cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   160b0:	f7ea fc45 	bl	93e <Port_schm_read_msr>
   160b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   160b6:	9b00      	ldr	r3, [sp, #0]
   160b8:	f003 0301 	and.w	r3, r3, #1
   160bc:	2b00      	cmp	r3, #0
   160be:	d100      	bne.n	160c2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   160c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   160c2:	490a      	ldr	r1, [pc, #40]	; (160ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
   160c4:	9b01      	ldr	r3, [sp, #4]
   160c6:	9a00      	ldr	r2, [sp, #0]
   160c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
   160cc:	4a06      	ldr	r2, [pc, #24]	; (160e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   160ce:	9b01      	ldr	r3, [sp, #4]
   160d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   160d4:	1c5a      	adds	r2, r3, #1
   160d6:	4904      	ldr	r1, [pc, #16]	; (160e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
   160d8:	9b01      	ldr	r3, [sp, #4]
   160da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   160de:	bf00      	nop
   160e0:	b003      	add	sp, #12
   160e2:	f85d fb04 	ldr.w	pc, [sp], #4
   160e6:	bf00      	nop
   160e8:	1fff95c0 	.word	0x1fff95c0
   160ec:	1fff95bc 	.word	0x1fff95bc

000160f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
   160f0:	b500      	push	{lr}
   160f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   160f4:	f7eb fbe4 	bl	18c0 <Sys_GetCoreID>
   160f8:	4603      	mov	r3, r0
   160fa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
   160fc:	4a0d      	ldr	r2, [pc, #52]	; (16134 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   160fe:	9b01      	ldr	r3, [sp, #4]
   16100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16104:	1e5a      	subs	r2, r3, #1
   16106:	490b      	ldr	r1, [pc, #44]	; (16134 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   16108:	9b01      	ldr	r3, [sp, #4]
   1610a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   1610e:	4a0a      	ldr	r2, [pc, #40]	; (16138 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
   16110:	9b01      	ldr	r3, [sp, #4]
   16112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16116:	f003 0301 	and.w	r3, r3, #1
   1611a:	2b00      	cmp	r3, #0
   1611c:	d106      	bne.n	1612c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
   1611e:	4a05      	ldr	r2, [pc, #20]	; (16134 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
   16120:	9b01      	ldr	r3, [sp, #4]
   16122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16126:	2b00      	cmp	r3, #0
   16128:	d100      	bne.n	1612c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1612a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1612c:	bf00      	nop
   1612e:	b003      	add	sp, #12
   16130:	f85d fb04 	ldr.w	pc, [sp], #4
   16134:	1fff95c0 	.word	0x1fff95c0
   16138:	1fff95bc 	.word	0x1fff95bc

0001613c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
   1613c:	b500      	push	{lr}
   1613e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16140:	f7eb fbbe 	bl	18c0 <Sys_GetCoreID>
   16144:	4603      	mov	r3, r0
   16146:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
   16148:	4a10      	ldr	r2, [pc, #64]	; (1618c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   1614a:	9b01      	ldr	r3, [sp, #4]
   1614c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16150:	2b00      	cmp	r3, #0
   16152:	d10d      	bne.n	16170 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16154:	f7ea fbf3 	bl	93e <Port_schm_read_msr>
   16158:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1615a:	9b00      	ldr	r3, [sp, #0]
   1615c:	f003 0301 	and.w	r3, r3, #1
   16160:	2b00      	cmp	r3, #0
   16162:	d100      	bne.n	16166 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16164:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   16166:	490a      	ldr	r1, [pc, #40]	; (16190 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
   16168:	9b01      	ldr	r3, [sp, #4]
   1616a:	9a00      	ldr	r2, [sp, #0]
   1616c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
   16170:	4a06      	ldr	r2, [pc, #24]	; (1618c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   16172:	9b01      	ldr	r3, [sp, #4]
   16174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16178:	1c5a      	adds	r2, r3, #1
   1617a:	4904      	ldr	r1, [pc, #16]	; (1618c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
   1617c:	9b01      	ldr	r3, [sp, #4]
   1617e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16182:	bf00      	nop
   16184:	b003      	add	sp, #12
   16186:	f85d fb04 	ldr.w	pc, [sp], #4
   1618a:	bf00      	nop
   1618c:	1fff95c8 	.word	0x1fff95c8
   16190:	1fff95c4 	.word	0x1fff95c4

00016194 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
   16194:	b500      	push	{lr}
   16196:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16198:	f7eb fb92 	bl	18c0 <Sys_GetCoreID>
   1619c:	4603      	mov	r3, r0
   1619e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
   161a0:	4a0d      	ldr	r2, [pc, #52]	; (161d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   161a2:	9b01      	ldr	r3, [sp, #4]
   161a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   161a8:	1e5a      	subs	r2, r3, #1
   161aa:	490b      	ldr	r1, [pc, #44]	; (161d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   161ac:	9b01      	ldr	r3, [sp, #4]
   161ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   161b2:	4a0a      	ldr	r2, [pc, #40]	; (161dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
   161b4:	9b01      	ldr	r3, [sp, #4]
   161b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   161ba:	f003 0301 	and.w	r3, r3, #1
   161be:	2b00      	cmp	r3, #0
   161c0:	d106      	bne.n	161d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
   161c2:	4a05      	ldr	r2, [pc, #20]	; (161d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
   161c4:	9b01      	ldr	r3, [sp, #4]
   161c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   161ca:	2b00      	cmp	r3, #0
   161cc:	d100      	bne.n	161d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   161ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   161d0:	bf00      	nop
   161d2:	b003      	add	sp, #12
   161d4:	f85d fb04 	ldr.w	pc, [sp], #4
   161d8:	1fff95c8 	.word	0x1fff95c8
   161dc:	1fff95c4 	.word	0x1fff95c4

000161e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
   161e0:	b500      	push	{lr}
   161e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   161e4:	f7eb fb6c 	bl	18c0 <Sys_GetCoreID>
   161e8:	4603      	mov	r3, r0
   161ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
   161ec:	4a10      	ldr	r2, [pc, #64]	; (16230 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   161ee:	9b01      	ldr	r3, [sp, #4]
   161f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   161f4:	2b00      	cmp	r3, #0
   161f6:	d10d      	bne.n	16214 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   161f8:	f7ea fba1 	bl	93e <Port_schm_read_msr>
   161fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   161fe:	9b00      	ldr	r3, [sp, #0]
   16200:	f003 0301 	and.w	r3, r3, #1
   16204:	2b00      	cmp	r3, #0
   16206:	d100      	bne.n	1620a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16208:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   1620a:	490a      	ldr	r1, [pc, #40]	; (16234 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
   1620c:	9b01      	ldr	r3, [sp, #4]
   1620e:	9a00      	ldr	r2, [sp, #0]
   16210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
   16214:	4a06      	ldr	r2, [pc, #24]	; (16230 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   16216:	9b01      	ldr	r3, [sp, #4]
   16218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1621c:	1c5a      	adds	r2, r3, #1
   1621e:	4904      	ldr	r1, [pc, #16]	; (16230 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
   16220:	9b01      	ldr	r3, [sp, #4]
   16222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16226:	bf00      	nop
   16228:	b003      	add	sp, #12
   1622a:	f85d fb04 	ldr.w	pc, [sp], #4
   1622e:	bf00      	nop
   16230:	1fff95d0 	.word	0x1fff95d0
   16234:	1fff95cc 	.word	0x1fff95cc

00016238 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
   16238:	b500      	push	{lr}
   1623a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1623c:	f7eb fb40 	bl	18c0 <Sys_GetCoreID>
   16240:	4603      	mov	r3, r0
   16242:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
   16244:	4a0d      	ldr	r2, [pc, #52]	; (1627c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   16246:	9b01      	ldr	r3, [sp, #4]
   16248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1624c:	1e5a      	subs	r2, r3, #1
   1624e:	490b      	ldr	r1, [pc, #44]	; (1627c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   16250:	9b01      	ldr	r3, [sp, #4]
   16252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   16256:	4a0a      	ldr	r2, [pc, #40]	; (16280 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
   16258:	9b01      	ldr	r3, [sp, #4]
   1625a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1625e:	f003 0301 	and.w	r3, r3, #1
   16262:	2b00      	cmp	r3, #0
   16264:	d106      	bne.n	16274 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
   16266:	4a05      	ldr	r2, [pc, #20]	; (1627c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
   16268:	9b01      	ldr	r3, [sp, #4]
   1626a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1626e:	2b00      	cmp	r3, #0
   16270:	d100      	bne.n	16274 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16272:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16274:	bf00      	nop
   16276:	b003      	add	sp, #12
   16278:	f85d fb04 	ldr.w	pc, [sp], #4
   1627c:	1fff95d0 	.word	0x1fff95d0
   16280:	1fff95cc 	.word	0x1fff95cc

00016284 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
   16284:	b500      	push	{lr}
   16286:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16288:	f7eb fb1a 	bl	18c0 <Sys_GetCoreID>
   1628c:	4603      	mov	r3, r0
   1628e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
   16290:	4a10      	ldr	r2, [pc, #64]	; (162d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   16292:	9b01      	ldr	r3, [sp, #4]
   16294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16298:	2b00      	cmp	r3, #0
   1629a:	d10d      	bne.n	162b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1629c:	f7ea fb4f 	bl	93e <Port_schm_read_msr>
   162a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   162a2:	9b00      	ldr	r3, [sp, #0]
   162a4:	f003 0301 	and.w	r3, r3, #1
   162a8:	2b00      	cmp	r3, #0
   162aa:	d100      	bne.n	162ae <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   162ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   162ae:	490a      	ldr	r1, [pc, #40]	; (162d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
   162b0:	9b01      	ldr	r3, [sp, #4]
   162b2:	9a00      	ldr	r2, [sp, #0]
   162b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
   162b8:	4a06      	ldr	r2, [pc, #24]	; (162d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   162ba:	9b01      	ldr	r3, [sp, #4]
   162bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   162c0:	1c5a      	adds	r2, r3, #1
   162c2:	4904      	ldr	r1, [pc, #16]	; (162d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
   162c4:	9b01      	ldr	r3, [sp, #4]
   162c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   162ca:	bf00      	nop
   162cc:	b003      	add	sp, #12
   162ce:	f85d fb04 	ldr.w	pc, [sp], #4
   162d2:	bf00      	nop
   162d4:	1fff95d8 	.word	0x1fff95d8
   162d8:	1fff95d4 	.word	0x1fff95d4

000162dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
   162dc:	b500      	push	{lr}
   162de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   162e0:	f7eb faee 	bl	18c0 <Sys_GetCoreID>
   162e4:	4603      	mov	r3, r0
   162e6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
   162e8:	4a0d      	ldr	r2, [pc, #52]	; (16320 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   162ea:	9b01      	ldr	r3, [sp, #4]
   162ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   162f0:	1e5a      	subs	r2, r3, #1
   162f2:	490b      	ldr	r1, [pc, #44]	; (16320 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   162f4:	9b01      	ldr	r3, [sp, #4]
   162f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   162fa:	4a0a      	ldr	r2, [pc, #40]	; (16324 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
   162fc:	9b01      	ldr	r3, [sp, #4]
   162fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16302:	f003 0301 	and.w	r3, r3, #1
   16306:	2b00      	cmp	r3, #0
   16308:	d106      	bne.n	16318 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
   1630a:	4a05      	ldr	r2, [pc, #20]	; (16320 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
   1630c:	9b01      	ldr	r3, [sp, #4]
   1630e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16312:	2b00      	cmp	r3, #0
   16314:	d100      	bne.n	16318 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16316:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16318:	bf00      	nop
   1631a:	b003      	add	sp, #12
   1631c:	f85d fb04 	ldr.w	pc, [sp], #4
   16320:	1fff95d8 	.word	0x1fff95d8
   16324:	1fff95d4 	.word	0x1fff95d4

00016328 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
   16328:	b500      	push	{lr}
   1632a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1632c:	f7eb fac8 	bl	18c0 <Sys_GetCoreID>
   16330:	4603      	mov	r3, r0
   16332:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
   16334:	4a10      	ldr	r2, [pc, #64]	; (16378 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   16336:	9b01      	ldr	r3, [sp, #4]
   16338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1633c:	2b00      	cmp	r3, #0
   1633e:	d10d      	bne.n	1635c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16340:	f7ea fafd 	bl	93e <Port_schm_read_msr>
   16344:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16346:	9b00      	ldr	r3, [sp, #0]
   16348:	f003 0301 	and.w	r3, r3, #1
   1634c:	2b00      	cmp	r3, #0
   1634e:	d100      	bne.n	16352 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16350:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   16352:	490a      	ldr	r1, [pc, #40]	; (1637c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
   16354:	9b01      	ldr	r3, [sp, #4]
   16356:	9a00      	ldr	r2, [sp, #0]
   16358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
   1635c:	4a06      	ldr	r2, [pc, #24]	; (16378 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   1635e:	9b01      	ldr	r3, [sp, #4]
   16360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16364:	1c5a      	adds	r2, r3, #1
   16366:	4904      	ldr	r1, [pc, #16]	; (16378 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
   16368:	9b01      	ldr	r3, [sp, #4]
   1636a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1636e:	bf00      	nop
   16370:	b003      	add	sp, #12
   16372:	f85d fb04 	ldr.w	pc, [sp], #4
   16376:	bf00      	nop
   16378:	1fff95e0 	.word	0x1fff95e0
   1637c:	1fff95dc 	.word	0x1fff95dc

00016380 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
   16380:	b500      	push	{lr}
   16382:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16384:	f7eb fa9c 	bl	18c0 <Sys_GetCoreID>
   16388:	4603      	mov	r3, r0
   1638a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
   1638c:	4a0d      	ldr	r2, [pc, #52]	; (163c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   1638e:	9b01      	ldr	r3, [sp, #4]
   16390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16394:	1e5a      	subs	r2, r3, #1
   16396:	490b      	ldr	r1, [pc, #44]	; (163c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   16398:	9b01      	ldr	r3, [sp, #4]
   1639a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   1639e:	4a0a      	ldr	r2, [pc, #40]	; (163c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
   163a0:	9b01      	ldr	r3, [sp, #4]
   163a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   163a6:	f003 0301 	and.w	r3, r3, #1
   163aa:	2b00      	cmp	r3, #0
   163ac:	d106      	bne.n	163bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
   163ae:	4a05      	ldr	r2, [pc, #20]	; (163c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
   163b0:	9b01      	ldr	r3, [sp, #4]
   163b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   163b6:	2b00      	cmp	r3, #0
   163b8:	d100      	bne.n	163bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   163ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   163bc:	bf00      	nop
   163be:	b003      	add	sp, #12
   163c0:	f85d fb04 	ldr.w	pc, [sp], #4
   163c4:	1fff95e0 	.word	0x1fff95e0
   163c8:	1fff95dc 	.word	0x1fff95dc

000163cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
   163cc:	b500      	push	{lr}
   163ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   163d0:	f7eb fa76 	bl	18c0 <Sys_GetCoreID>
   163d4:	4603      	mov	r3, r0
   163d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
   163d8:	4a10      	ldr	r2, [pc, #64]	; (1641c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   163da:	9b01      	ldr	r3, [sp, #4]
   163dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   163e0:	2b00      	cmp	r3, #0
   163e2:	d10d      	bne.n	16400 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   163e4:	f7ea faab 	bl	93e <Port_schm_read_msr>
   163e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   163ea:	9b00      	ldr	r3, [sp, #0]
   163ec:	f003 0301 	and.w	r3, r3, #1
   163f0:	2b00      	cmp	r3, #0
   163f2:	d100      	bne.n	163f6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   163f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   163f6:	490a      	ldr	r1, [pc, #40]	; (16420 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
   163f8:	9b01      	ldr	r3, [sp, #4]
   163fa:	9a00      	ldr	r2, [sp, #0]
   163fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
   16400:	4a06      	ldr	r2, [pc, #24]	; (1641c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   16402:	9b01      	ldr	r3, [sp, #4]
   16404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16408:	1c5a      	adds	r2, r3, #1
   1640a:	4904      	ldr	r1, [pc, #16]	; (1641c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
   1640c:	9b01      	ldr	r3, [sp, #4]
   1640e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16412:	bf00      	nop
   16414:	b003      	add	sp, #12
   16416:	f85d fb04 	ldr.w	pc, [sp], #4
   1641a:	bf00      	nop
   1641c:	1fff95e8 	.word	0x1fff95e8
   16420:	1fff95e4 	.word	0x1fff95e4

00016424 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
   16424:	b500      	push	{lr}
   16426:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16428:	f7eb fa4a 	bl	18c0 <Sys_GetCoreID>
   1642c:	4603      	mov	r3, r0
   1642e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
   16430:	4a0d      	ldr	r2, [pc, #52]	; (16468 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   16432:	9b01      	ldr	r3, [sp, #4]
   16434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16438:	1e5a      	subs	r2, r3, #1
   1643a:	490b      	ldr	r1, [pc, #44]	; (16468 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   1643c:	9b01      	ldr	r3, [sp, #4]
   1643e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   16442:	4a0a      	ldr	r2, [pc, #40]	; (1646c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
   16444:	9b01      	ldr	r3, [sp, #4]
   16446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1644a:	f003 0301 	and.w	r3, r3, #1
   1644e:	2b00      	cmp	r3, #0
   16450:	d106      	bne.n	16460 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
   16452:	4a05      	ldr	r2, [pc, #20]	; (16468 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
   16454:	9b01      	ldr	r3, [sp, #4]
   16456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1645a:	2b00      	cmp	r3, #0
   1645c:	d100      	bne.n	16460 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1645e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16460:	bf00      	nop
   16462:	b003      	add	sp, #12
   16464:	f85d fb04 	ldr.w	pc, [sp], #4
   16468:	1fff95e8 	.word	0x1fff95e8
   1646c:	1fff95e4 	.word	0x1fff95e4

00016470 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
   16470:	b500      	push	{lr}
   16472:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16474:	f7eb fa24 	bl	18c0 <Sys_GetCoreID>
   16478:	4603      	mov	r3, r0
   1647a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
   1647c:	4a10      	ldr	r2, [pc, #64]	; (164c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   1647e:	9b01      	ldr	r3, [sp, #4]
   16480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16484:	2b00      	cmp	r3, #0
   16486:	d10d      	bne.n	164a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16488:	f7ea fa59 	bl	93e <Port_schm_read_msr>
   1648c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1648e:	9b00      	ldr	r3, [sp, #0]
   16490:	f003 0301 	and.w	r3, r3, #1
   16494:	2b00      	cmp	r3, #0
   16496:	d100      	bne.n	1649a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16498:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   1649a:	490a      	ldr	r1, [pc, #40]	; (164c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
   1649c:	9b01      	ldr	r3, [sp, #4]
   1649e:	9a00      	ldr	r2, [sp, #0]
   164a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
   164a4:	4a06      	ldr	r2, [pc, #24]	; (164c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   164a6:	9b01      	ldr	r3, [sp, #4]
   164a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   164ac:	1c5a      	adds	r2, r3, #1
   164ae:	4904      	ldr	r1, [pc, #16]	; (164c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
   164b0:	9b01      	ldr	r3, [sp, #4]
   164b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   164b6:	bf00      	nop
   164b8:	b003      	add	sp, #12
   164ba:	f85d fb04 	ldr.w	pc, [sp], #4
   164be:	bf00      	nop
   164c0:	1fff95f0 	.word	0x1fff95f0
   164c4:	1fff95ec 	.word	0x1fff95ec

000164c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
   164c8:	b500      	push	{lr}
   164ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   164cc:	f7eb f9f8 	bl	18c0 <Sys_GetCoreID>
   164d0:	4603      	mov	r3, r0
   164d2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
   164d4:	4a0d      	ldr	r2, [pc, #52]	; (1650c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   164d6:	9b01      	ldr	r3, [sp, #4]
   164d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   164dc:	1e5a      	subs	r2, r3, #1
   164de:	490b      	ldr	r1, [pc, #44]	; (1650c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   164e0:	9b01      	ldr	r3, [sp, #4]
   164e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   164e6:	4a0a      	ldr	r2, [pc, #40]	; (16510 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
   164e8:	9b01      	ldr	r3, [sp, #4]
   164ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   164ee:	f003 0301 	and.w	r3, r3, #1
   164f2:	2b00      	cmp	r3, #0
   164f4:	d106      	bne.n	16504 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
   164f6:	4a05      	ldr	r2, [pc, #20]	; (1650c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
   164f8:	9b01      	ldr	r3, [sp, #4]
   164fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   164fe:	2b00      	cmp	r3, #0
   16500:	d100      	bne.n	16504 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16502:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16504:	bf00      	nop
   16506:	b003      	add	sp, #12
   16508:	f85d fb04 	ldr.w	pc, [sp], #4
   1650c:	1fff95f0 	.word	0x1fff95f0
   16510:	1fff95ec 	.word	0x1fff95ec

00016514 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
   16514:	b500      	push	{lr}
   16516:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16518:	f7eb f9d2 	bl	18c0 <Sys_GetCoreID>
   1651c:	4603      	mov	r3, r0
   1651e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
   16520:	4a10      	ldr	r2, [pc, #64]	; (16564 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   16522:	9b01      	ldr	r3, [sp, #4]
   16524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16528:	2b00      	cmp	r3, #0
   1652a:	d10d      	bne.n	16548 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1652c:	f7ea fa07 	bl	93e <Port_schm_read_msr>
   16530:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16532:	9b00      	ldr	r3, [sp, #0]
   16534:	f003 0301 	and.w	r3, r3, #1
   16538:	2b00      	cmp	r3, #0
   1653a:	d100      	bne.n	1653e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1653c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
   1653e:	490a      	ldr	r1, [pc, #40]	; (16568 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
   16540:	9b01      	ldr	r3, [sp, #4]
   16542:	9a00      	ldr	r2, [sp, #0]
   16544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
   16548:	4a06      	ldr	r2, [pc, #24]	; (16564 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   1654a:	9b01      	ldr	r3, [sp, #4]
   1654c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16550:	1c5a      	adds	r2, r3, #1
   16552:	4904      	ldr	r1, [pc, #16]	; (16564 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
   16554:	9b01      	ldr	r3, [sp, #4]
   16556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1655a:	bf00      	nop
   1655c:	b003      	add	sp, #12
   1655e:	f85d fb04 	ldr.w	pc, [sp], #4
   16562:	bf00      	nop
   16564:	1fff95f8 	.word	0x1fff95f8
   16568:	1fff95f4 	.word	0x1fff95f4

0001656c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
   1656c:	b500      	push	{lr}
   1656e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16570:	f7eb f9a6 	bl	18c0 <Sys_GetCoreID>
   16574:	4603      	mov	r3, r0
   16576:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
   16578:	4a0d      	ldr	r2, [pc, #52]	; (165b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   1657a:	9b01      	ldr	r3, [sp, #4]
   1657c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16580:	1e5a      	subs	r2, r3, #1
   16582:	490b      	ldr	r1, [pc, #44]	; (165b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   16584:	9b01      	ldr	r3, [sp, #4]
   16586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
   1658a:	4a0a      	ldr	r2, [pc, #40]	; (165b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
   1658c:	9b01      	ldr	r3, [sp, #4]
   1658e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16592:	f003 0301 	and.w	r3, r3, #1
   16596:	2b00      	cmp	r3, #0
   16598:	d106      	bne.n	165a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
   1659a:	4a05      	ldr	r2, [pc, #20]	; (165b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
   1659c:	9b01      	ldr	r3, [sp, #4]
   1659e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   165a2:	2b00      	cmp	r3, #0
   165a4:	d100      	bne.n	165a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   165a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   165a8:	bf00      	nop
   165aa:	b003      	add	sp, #12
   165ac:	f85d fb04 	ldr.w	pc, [sp], #4
   165b0:	1fff95f8 	.word	0x1fff95f8
   165b4:	1fff95f4 	.word	0x1fff95f4

000165b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
   165b8:	b500      	push	{lr}
   165ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   165bc:	f7eb f980 	bl	18c0 <Sys_GetCoreID>
   165c0:	4603      	mov	r3, r0
   165c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
   165c4:	4a10      	ldr	r2, [pc, #64]	; (16608 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   165c6:	9b01      	ldr	r3, [sp, #4]
   165c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   165cc:	2b00      	cmp	r3, #0
   165ce:	d10d      	bne.n	165ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   165d0:	f7ea f9b5 	bl	93e <Port_schm_read_msr>
   165d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   165d6:	9b00      	ldr	r3, [sp, #0]
   165d8:	f003 0301 	and.w	r3, r3, #1
   165dc:	2b00      	cmp	r3, #0
   165de:	d100      	bne.n	165e2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   165e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
   165e2:	490a      	ldr	r1, [pc, #40]	; (1660c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
   165e4:	9b01      	ldr	r3, [sp, #4]
   165e6:	9a00      	ldr	r2, [sp, #0]
   165e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
   165ec:	4a06      	ldr	r2, [pc, #24]	; (16608 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   165ee:	9b01      	ldr	r3, [sp, #4]
   165f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   165f4:	1c5a      	adds	r2, r3, #1
   165f6:	4904      	ldr	r1, [pc, #16]	; (16608 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
   165f8:	9b01      	ldr	r3, [sp, #4]
   165fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   165fe:	bf00      	nop
   16600:	b003      	add	sp, #12
   16602:	f85d fb04 	ldr.w	pc, [sp], #4
   16606:	bf00      	nop
   16608:	1fff9600 	.word	0x1fff9600
   1660c:	1fff95fc 	.word	0x1fff95fc

00016610 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
   16610:	b500      	push	{lr}
   16612:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16614:	f7eb f954 	bl	18c0 <Sys_GetCoreID>
   16618:	4603      	mov	r3, r0
   1661a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
   1661c:	4a0d      	ldr	r2, [pc, #52]	; (16654 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   1661e:	9b01      	ldr	r3, [sp, #4]
   16620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16624:	1e5a      	subs	r2, r3, #1
   16626:	490b      	ldr	r1, [pc, #44]	; (16654 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   16628:	9b01      	ldr	r3, [sp, #4]
   1662a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
   1662e:	4a0a      	ldr	r2, [pc, #40]	; (16658 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
   16630:	9b01      	ldr	r3, [sp, #4]
   16632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16636:	f003 0301 	and.w	r3, r3, #1
   1663a:	2b00      	cmp	r3, #0
   1663c:	d106      	bne.n	1664c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
   1663e:	4a05      	ldr	r2, [pc, #20]	; (16654 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
   16640:	9b01      	ldr	r3, [sp, #4]
   16642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16646:	2b00      	cmp	r3, #0
   16648:	d100      	bne.n	1664c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1664a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1664c:	bf00      	nop
   1664e:	b003      	add	sp, #12
   16650:	f85d fb04 	ldr.w	pc, [sp], #4
   16654:	1fff9600 	.word	0x1fff9600
   16658:	1fff95fc 	.word	0x1fff95fc

0001665c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
   1665c:	b500      	push	{lr}
   1665e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16660:	f7eb f92e 	bl	18c0 <Sys_GetCoreID>
   16664:	4603      	mov	r3, r0
   16666:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
   16668:	4a10      	ldr	r2, [pc, #64]	; (166ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   1666a:	9b01      	ldr	r3, [sp, #4]
   1666c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16670:	2b00      	cmp	r3, #0
   16672:	d10d      	bne.n	16690 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16674:	f7ea f963 	bl	93e <Port_schm_read_msr>
   16678:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1667a:	9b00      	ldr	r3, [sp, #0]
   1667c:	f003 0301 	and.w	r3, r3, #1
   16680:	2b00      	cmp	r3, #0
   16682:	d100      	bne.n	16686 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16684:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
   16686:	490a      	ldr	r1, [pc, #40]	; (166b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
   16688:	9b01      	ldr	r3, [sp, #4]
   1668a:	9a00      	ldr	r2, [sp, #0]
   1668c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
   16690:	4a06      	ldr	r2, [pc, #24]	; (166ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   16692:	9b01      	ldr	r3, [sp, #4]
   16694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16698:	1c5a      	adds	r2, r3, #1
   1669a:	4904      	ldr	r1, [pc, #16]	; (166ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
   1669c:	9b01      	ldr	r3, [sp, #4]
   1669e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   166a2:	bf00      	nop
   166a4:	b003      	add	sp, #12
   166a6:	f85d fb04 	ldr.w	pc, [sp], #4
   166aa:	bf00      	nop
   166ac:	1fff9608 	.word	0x1fff9608
   166b0:	1fff9604 	.word	0x1fff9604

000166b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
   166b4:	b500      	push	{lr}
   166b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   166b8:	f7eb f902 	bl	18c0 <Sys_GetCoreID>
   166bc:	4603      	mov	r3, r0
   166be:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
   166c0:	4a0d      	ldr	r2, [pc, #52]	; (166f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   166c2:	9b01      	ldr	r3, [sp, #4]
   166c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   166c8:	1e5a      	subs	r2, r3, #1
   166ca:	490b      	ldr	r1, [pc, #44]	; (166f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   166cc:	9b01      	ldr	r3, [sp, #4]
   166ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   166d2:	4a0a      	ldr	r2, [pc, #40]	; (166fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
   166d4:	9b01      	ldr	r3, [sp, #4]
   166d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   166da:	f003 0301 	and.w	r3, r3, #1
   166de:	2b00      	cmp	r3, #0
   166e0:	d106      	bne.n	166f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
   166e2:	4a05      	ldr	r2, [pc, #20]	; (166f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
   166e4:	9b01      	ldr	r3, [sp, #4]
   166e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   166ea:	2b00      	cmp	r3, #0
   166ec:	d100      	bne.n	166f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   166ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   166f0:	bf00      	nop
   166f2:	b003      	add	sp, #12
   166f4:	f85d fb04 	ldr.w	pc, [sp], #4
   166f8:	1fff9608 	.word	0x1fff9608
   166fc:	1fff9604 	.word	0x1fff9604

00016700 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   16700:	b500      	push	{lr}
   16702:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16704:	f7eb f8dc 	bl	18c0 <Sys_GetCoreID>
   16708:	4603      	mov	r3, r0
   1670a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
   1670c:	4a10      	ldr	r2, [pc, #64]	; (16750 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   1670e:	9b01      	ldr	r3, [sp, #4]
   16710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16714:	2b00      	cmp	r3, #0
   16716:	d10d      	bne.n	16734 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16718:	f7ea f911 	bl	93e <Port_schm_read_msr>
   1671c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1671e:	9b00      	ldr	r3, [sp, #0]
   16720:	f003 0301 	and.w	r3, r3, #1
   16724:	2b00      	cmp	r3, #0
   16726:	d100      	bne.n	1672a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16728:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   1672a:	490a      	ldr	r1, [pc, #40]	; (16754 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
   1672c:	9b01      	ldr	r3, [sp, #4]
   1672e:	9a00      	ldr	r2, [sp, #0]
   16730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
   16734:	4a06      	ldr	r2, [pc, #24]	; (16750 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   16736:	9b01      	ldr	r3, [sp, #4]
   16738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1673c:	1c5a      	adds	r2, r3, #1
   1673e:	4904      	ldr	r1, [pc, #16]	; (16750 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
   16740:	9b01      	ldr	r3, [sp, #4]
   16742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16746:	bf00      	nop
   16748:	b003      	add	sp, #12
   1674a:	f85d fb04 	ldr.w	pc, [sp], #4
   1674e:	bf00      	nop
   16750:	1fff9610 	.word	0x1fff9610
   16754:	1fff960c 	.word	0x1fff960c

00016758 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
   16758:	b500      	push	{lr}
   1675a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1675c:	f7eb f8b0 	bl	18c0 <Sys_GetCoreID>
   16760:	4603      	mov	r3, r0
   16762:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
   16764:	4a0d      	ldr	r2, [pc, #52]	; (1679c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   16766:	9b01      	ldr	r3, [sp, #4]
   16768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1676c:	1e5a      	subs	r2, r3, #1
   1676e:	490b      	ldr	r1, [pc, #44]	; (1679c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   16770:	9b01      	ldr	r3, [sp, #4]
   16772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   16776:	4a0a      	ldr	r2, [pc, #40]	; (167a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
   16778:	9b01      	ldr	r3, [sp, #4]
   1677a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1677e:	f003 0301 	and.w	r3, r3, #1
   16782:	2b00      	cmp	r3, #0
   16784:	d106      	bne.n	16794 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
   16786:	4a05      	ldr	r2, [pc, #20]	; (1679c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
   16788:	9b01      	ldr	r3, [sp, #4]
   1678a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1678e:	2b00      	cmp	r3, #0
   16790:	d100      	bne.n	16794 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16792:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16794:	bf00      	nop
   16796:	b003      	add	sp, #12
   16798:	f85d fb04 	ldr.w	pc, [sp], #4
   1679c:	1fff9610 	.word	0x1fff9610
   167a0:	1fff960c 	.word	0x1fff960c

000167a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   167a4:	b500      	push	{lr}
   167a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   167a8:	f7eb f88a 	bl	18c0 <Sys_GetCoreID>
   167ac:	4603      	mov	r3, r0
   167ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
   167b0:	4a10      	ldr	r2, [pc, #64]	; (167f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   167b2:	9b01      	ldr	r3, [sp, #4]
   167b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   167b8:	2b00      	cmp	r3, #0
   167ba:	d10d      	bne.n	167d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   167bc:	f7ea f8bf 	bl	93e <Port_schm_read_msr>
   167c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   167c2:	9b00      	ldr	r3, [sp, #0]
   167c4:	f003 0301 	and.w	r3, r3, #1
   167c8:	2b00      	cmp	r3, #0
   167ca:	d100      	bne.n	167ce <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   167cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   167ce:	490a      	ldr	r1, [pc, #40]	; (167f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
   167d0:	9b01      	ldr	r3, [sp, #4]
   167d2:	9a00      	ldr	r2, [sp, #0]
   167d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
   167d8:	4a06      	ldr	r2, [pc, #24]	; (167f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   167da:	9b01      	ldr	r3, [sp, #4]
   167dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   167e0:	1c5a      	adds	r2, r3, #1
   167e2:	4904      	ldr	r1, [pc, #16]	; (167f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
   167e4:	9b01      	ldr	r3, [sp, #4]
   167e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   167ea:	bf00      	nop
   167ec:	b003      	add	sp, #12
   167ee:	f85d fb04 	ldr.w	pc, [sp], #4
   167f2:	bf00      	nop
   167f4:	1fff9618 	.word	0x1fff9618
   167f8:	1fff9614 	.word	0x1fff9614

000167fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
   167fc:	b500      	push	{lr}
   167fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16800:	f7eb f85e 	bl	18c0 <Sys_GetCoreID>
   16804:	4603      	mov	r3, r0
   16806:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
   16808:	4a0d      	ldr	r2, [pc, #52]	; (16840 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   1680a:	9b01      	ldr	r3, [sp, #4]
   1680c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16810:	1e5a      	subs	r2, r3, #1
   16812:	490b      	ldr	r1, [pc, #44]	; (16840 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   16814:	9b01      	ldr	r3, [sp, #4]
   16816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   1681a:	4a0a      	ldr	r2, [pc, #40]	; (16844 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
   1681c:	9b01      	ldr	r3, [sp, #4]
   1681e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16822:	f003 0301 	and.w	r3, r3, #1
   16826:	2b00      	cmp	r3, #0
   16828:	d106      	bne.n	16838 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
   1682a:	4a05      	ldr	r2, [pc, #20]	; (16840 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
   1682c:	9b01      	ldr	r3, [sp, #4]
   1682e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16832:	2b00      	cmp	r3, #0
   16834:	d100      	bne.n	16838 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16836:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16838:	bf00      	nop
   1683a:	b003      	add	sp, #12
   1683c:	f85d fb04 	ldr.w	pc, [sp], #4
   16840:	1fff9618 	.word	0x1fff9618
   16844:	1fff9614 	.word	0x1fff9614

00016848 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   16848:	b500      	push	{lr}
   1684a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1684c:	f7eb f838 	bl	18c0 <Sys_GetCoreID>
   16850:	4603      	mov	r3, r0
   16852:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
   16854:	4a10      	ldr	r2, [pc, #64]	; (16898 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   16856:	9b01      	ldr	r3, [sp, #4]
   16858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1685c:	2b00      	cmp	r3, #0
   1685e:	d10d      	bne.n	1687c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16860:	f7ea f86d 	bl	93e <Port_schm_read_msr>
   16864:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16866:	9b00      	ldr	r3, [sp, #0]
   16868:	f003 0301 	and.w	r3, r3, #1
   1686c:	2b00      	cmp	r3, #0
   1686e:	d100      	bne.n	16872 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16870:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   16872:	490a      	ldr	r1, [pc, #40]	; (1689c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
   16874:	9b01      	ldr	r3, [sp, #4]
   16876:	9a00      	ldr	r2, [sp, #0]
   16878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
   1687c:	4a06      	ldr	r2, [pc, #24]	; (16898 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   1687e:	9b01      	ldr	r3, [sp, #4]
   16880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16884:	1c5a      	adds	r2, r3, #1
   16886:	4904      	ldr	r1, [pc, #16]	; (16898 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
   16888:	9b01      	ldr	r3, [sp, #4]
   1688a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1688e:	bf00      	nop
   16890:	b003      	add	sp, #12
   16892:	f85d fb04 	ldr.w	pc, [sp], #4
   16896:	bf00      	nop
   16898:	1fff9620 	.word	0x1fff9620
   1689c:	1fff961c 	.word	0x1fff961c

000168a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
   168a0:	b500      	push	{lr}
   168a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   168a4:	f7eb f80c 	bl	18c0 <Sys_GetCoreID>
   168a8:	4603      	mov	r3, r0
   168aa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
   168ac:	4a0d      	ldr	r2, [pc, #52]	; (168e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   168ae:	9b01      	ldr	r3, [sp, #4]
   168b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   168b4:	1e5a      	subs	r2, r3, #1
   168b6:	490b      	ldr	r1, [pc, #44]	; (168e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   168b8:	9b01      	ldr	r3, [sp, #4]
   168ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   168be:	4a0a      	ldr	r2, [pc, #40]	; (168e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
   168c0:	9b01      	ldr	r3, [sp, #4]
   168c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   168c6:	f003 0301 	and.w	r3, r3, #1
   168ca:	2b00      	cmp	r3, #0
   168cc:	d106      	bne.n	168dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
   168ce:	4a05      	ldr	r2, [pc, #20]	; (168e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
   168d0:	9b01      	ldr	r3, [sp, #4]
   168d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   168d6:	2b00      	cmp	r3, #0
   168d8:	d100      	bne.n	168dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   168da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   168dc:	bf00      	nop
   168de:	b003      	add	sp, #12
   168e0:	f85d fb04 	ldr.w	pc, [sp], #4
   168e4:	1fff9620 	.word	0x1fff9620
   168e8:	1fff961c 	.word	0x1fff961c

000168ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   168ec:	b500      	push	{lr}
   168ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   168f0:	f7ea ffe6 	bl	18c0 <Sys_GetCoreID>
   168f4:	4603      	mov	r3, r0
   168f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
   168f8:	4a10      	ldr	r2, [pc, #64]	; (1693c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   168fa:	9b01      	ldr	r3, [sp, #4]
   168fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16900:	2b00      	cmp	r3, #0
   16902:	d10d      	bne.n	16920 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16904:	f7ea f81b 	bl	93e <Port_schm_read_msr>
   16908:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1690a:	9b00      	ldr	r3, [sp, #0]
   1690c:	f003 0301 	and.w	r3, r3, #1
   16910:	2b00      	cmp	r3, #0
   16912:	d100      	bne.n	16916 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16914:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   16916:	490a      	ldr	r1, [pc, #40]	; (16940 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
   16918:	9b01      	ldr	r3, [sp, #4]
   1691a:	9a00      	ldr	r2, [sp, #0]
   1691c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
   16920:	4a06      	ldr	r2, [pc, #24]	; (1693c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   16922:	9b01      	ldr	r3, [sp, #4]
   16924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16928:	1c5a      	adds	r2, r3, #1
   1692a:	4904      	ldr	r1, [pc, #16]	; (1693c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
   1692c:	9b01      	ldr	r3, [sp, #4]
   1692e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16932:	bf00      	nop
   16934:	b003      	add	sp, #12
   16936:	f85d fb04 	ldr.w	pc, [sp], #4
   1693a:	bf00      	nop
   1693c:	1fff9628 	.word	0x1fff9628
   16940:	1fff9624 	.word	0x1fff9624

00016944 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
   16944:	b500      	push	{lr}
   16946:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16948:	f7ea ffba 	bl	18c0 <Sys_GetCoreID>
   1694c:	4603      	mov	r3, r0
   1694e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
   16950:	4a0d      	ldr	r2, [pc, #52]	; (16988 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   16952:	9b01      	ldr	r3, [sp, #4]
   16954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16958:	1e5a      	subs	r2, r3, #1
   1695a:	490b      	ldr	r1, [pc, #44]	; (16988 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   1695c:	9b01      	ldr	r3, [sp, #4]
   1695e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   16962:	4a0a      	ldr	r2, [pc, #40]	; (1698c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
   16964:	9b01      	ldr	r3, [sp, #4]
   16966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1696a:	f003 0301 	and.w	r3, r3, #1
   1696e:	2b00      	cmp	r3, #0
   16970:	d106      	bne.n	16980 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
   16972:	4a05      	ldr	r2, [pc, #20]	; (16988 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
   16974:	9b01      	ldr	r3, [sp, #4]
   16976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1697a:	2b00      	cmp	r3, #0
   1697c:	d100      	bne.n	16980 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1697e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16980:	bf00      	nop
   16982:	b003      	add	sp, #12
   16984:	f85d fb04 	ldr.w	pc, [sp], #4
   16988:	1fff9628 	.word	0x1fff9628
   1698c:	1fff9624 	.word	0x1fff9624

00016990 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00(void)
{
   16990:	b500      	push	{lr}
   16992:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16994:	f7ea ff94 	bl	18c0 <Sys_GetCoreID>
   16998:	4603      	mov	r3, r0
   1699a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId])
   1699c:	4a10      	ldr	r2, [pc, #64]	; (169e0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
   1699e:	9b01      	ldr	r3, [sp, #4]
   169a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   169a4:	2b00      	cmp	r3, #0
   169a6:	d10d      	bne.n	169c4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   169a8:	f7e9 ffd2 	bl	950 <Pwm_schm_read_msr>
   169ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   169ae:	9b00      	ldr	r3, [sp, #0]
   169b0:	f003 0301 	and.w	r3, r3, #1
   169b4:	2b00      	cmp	r3, #0
   169b6:	d100      	bne.n	169ba <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   169b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_00[u32CoreId] = msr;
   169ba:	490a      	ldr	r1, [pc, #40]	; (169e4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x54>)
   169bc:	9b01      	ldr	r3, [sp, #4]
   169be:	9a00      	ldr	r2, [sp, #0]
   169c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId]++;
   169c4:	4a06      	ldr	r2, [pc, #24]	; (169e0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
   169c6:	9b01      	ldr	r3, [sp, #4]
   169c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   169cc:	1c5a      	adds	r2, r3, #1
   169ce:	4904      	ldr	r1, [pc, #16]	; (169e0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_00+0x50>)
   169d0:	9b01      	ldr	r3, [sp, #4]
   169d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   169d6:	bf00      	nop
   169d8:	b003      	add	sp, #12
   169da:	f85d fb04 	ldr.w	pc, [sp], #4
   169de:	bf00      	nop
   169e0:	1fff9630 	.word	0x1fff9630
   169e4:	1fff962c 	.word	0x1fff962c

000169e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00(void)
{
   169e8:	b500      	push	{lr}
   169ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   169ec:	f7ea ff68 	bl	18c0 <Sys_GetCoreID>
   169f0:	4603      	mov	r3, r0
   169f2:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId]--;
   169f4:	4a0d      	ldr	r2, [pc, #52]	; (16a2c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
   169f6:	9b01      	ldr	r3, [sp, #4]
   169f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   169fc:	1e5a      	subs	r2, r3, #1
   169fe:	490b      	ldr	r1, [pc, #44]	; (16a2c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
   16a00:	9b01      	ldr	r3, [sp, #4]
   16a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
   16a06:	4a0a      	ldr	r2, [pc, #40]	; (16a30 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x48>)
   16a08:	9b01      	ldr	r3, [sp, #4]
   16a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16a0e:	f003 0301 	and.w	r3, r3, #1
   16a12:	2b00      	cmp	r3, #0
   16a14:	d106      	bne.n	16a24 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x3c>
   16a16:	4a05      	ldr	r2, [pc, #20]	; (16a2c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x44>)
   16a18:	9b01      	ldr	r3, [sp, #4]
   16a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16a1e:	2b00      	cmp	r3, #0
   16a20:	d100      	bne.n	16a24 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16a22:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16a24:	bf00      	nop
   16a26:	b003      	add	sp, #12
   16a28:	f85d fb04 	ldr.w	pc, [sp], #4
   16a2c:	1fff9630 	.word	0x1fff9630
   16a30:	1fff962c 	.word	0x1fff962c

00016a34 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01(void)
{
   16a34:	b500      	push	{lr}
   16a36:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16a38:	f7ea ff42 	bl	18c0 <Sys_GetCoreID>
   16a3c:	4603      	mov	r3, r0
   16a3e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId])
   16a40:	4a10      	ldr	r2, [pc, #64]	; (16a84 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
   16a42:	9b01      	ldr	r3, [sp, #4]
   16a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16a48:	2b00      	cmp	r3, #0
   16a4a:	d10d      	bne.n	16a68 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16a4c:	f7e9 ff80 	bl	950 <Pwm_schm_read_msr>
   16a50:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16a52:	9b00      	ldr	r3, [sp, #0]
   16a54:	f003 0301 	and.w	r3, r3, #1
   16a58:	2b00      	cmp	r3, #0
   16a5a:	d100      	bne.n	16a5e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16a5c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_01[u32CoreId] = msr;
   16a5e:	490a      	ldr	r1, [pc, #40]	; (16a88 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x54>)
   16a60:	9b01      	ldr	r3, [sp, #4]
   16a62:	9a00      	ldr	r2, [sp, #0]
   16a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId]++;
   16a68:	4a06      	ldr	r2, [pc, #24]	; (16a84 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
   16a6a:	9b01      	ldr	r3, [sp, #4]
   16a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16a70:	1c5a      	adds	r2, r3, #1
   16a72:	4904      	ldr	r1, [pc, #16]	; (16a84 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_01+0x50>)
   16a74:	9b01      	ldr	r3, [sp, #4]
   16a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16a7a:	bf00      	nop
   16a7c:	b003      	add	sp, #12
   16a7e:	f85d fb04 	ldr.w	pc, [sp], #4
   16a82:	bf00      	nop
   16a84:	1fff9638 	.word	0x1fff9638
   16a88:	1fff9634 	.word	0x1fff9634

00016a8c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01(void)
{
   16a8c:	b500      	push	{lr}
   16a8e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16a90:	f7ea ff16 	bl	18c0 <Sys_GetCoreID>
   16a94:	4603      	mov	r3, r0
   16a96:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId]--;
   16a98:	4a0d      	ldr	r2, [pc, #52]	; (16ad0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
   16a9a:	9b01      	ldr	r3, [sp, #4]
   16a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16aa0:	1e5a      	subs	r2, r3, #1
   16aa2:	490b      	ldr	r1, [pc, #44]	; (16ad0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
   16aa4:	9b01      	ldr	r3, [sp, #4]
   16aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
   16aaa:	4a0a      	ldr	r2, [pc, #40]	; (16ad4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x48>)
   16aac:	9b01      	ldr	r3, [sp, #4]
   16aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16ab2:	f003 0301 	and.w	r3, r3, #1
   16ab6:	2b00      	cmp	r3, #0
   16ab8:	d106      	bne.n	16ac8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x3c>
   16aba:	4a05      	ldr	r2, [pc, #20]	; (16ad0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x44>)
   16abc:	9b01      	ldr	r3, [sp, #4]
   16abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16ac2:	2b00      	cmp	r3, #0
   16ac4:	d100      	bne.n	16ac8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16ac6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16ac8:	bf00      	nop
   16aca:	b003      	add	sp, #12
   16acc:	f85d fb04 	ldr.w	pc, [sp], #4
   16ad0:	1fff9638 	.word	0x1fff9638
   16ad4:	1fff9634 	.word	0x1fff9634

00016ad8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02(void)
{
   16ad8:	b500      	push	{lr}
   16ada:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16adc:	f7ea fef0 	bl	18c0 <Sys_GetCoreID>
   16ae0:	4603      	mov	r3, r0
   16ae2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId])
   16ae4:	4a10      	ldr	r2, [pc, #64]	; (16b28 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
   16ae6:	9b01      	ldr	r3, [sp, #4]
   16ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16aec:	2b00      	cmp	r3, #0
   16aee:	d10d      	bne.n	16b0c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16af0:	f7e9 ff2e 	bl	950 <Pwm_schm_read_msr>
   16af4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16af6:	9b00      	ldr	r3, [sp, #0]
   16af8:	f003 0301 	and.w	r3, r3, #1
   16afc:	2b00      	cmp	r3, #0
   16afe:	d100      	bne.n	16b02 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16b00:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_02[u32CoreId] = msr;
   16b02:	490a      	ldr	r1, [pc, #40]	; (16b2c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x54>)
   16b04:	9b01      	ldr	r3, [sp, #4]
   16b06:	9a00      	ldr	r2, [sp, #0]
   16b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId]++;
   16b0c:	4a06      	ldr	r2, [pc, #24]	; (16b28 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
   16b0e:	9b01      	ldr	r3, [sp, #4]
   16b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16b14:	1c5a      	adds	r2, r3, #1
   16b16:	4904      	ldr	r1, [pc, #16]	; (16b28 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_02+0x50>)
   16b18:	9b01      	ldr	r3, [sp, #4]
   16b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16b1e:	bf00      	nop
   16b20:	b003      	add	sp, #12
   16b22:	f85d fb04 	ldr.w	pc, [sp], #4
   16b26:	bf00      	nop
   16b28:	1fff9640 	.word	0x1fff9640
   16b2c:	1fff963c 	.word	0x1fff963c

00016b30 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02(void)
{
   16b30:	b500      	push	{lr}
   16b32:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16b34:	f7ea fec4 	bl	18c0 <Sys_GetCoreID>
   16b38:	4603      	mov	r3, r0
   16b3a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId]--;
   16b3c:	4a0d      	ldr	r2, [pc, #52]	; (16b74 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
   16b3e:	9b01      	ldr	r3, [sp, #4]
   16b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16b44:	1e5a      	subs	r2, r3, #1
   16b46:	490b      	ldr	r1, [pc, #44]	; (16b74 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
   16b48:	9b01      	ldr	r3, [sp, #4]
   16b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
   16b4e:	4a0a      	ldr	r2, [pc, #40]	; (16b78 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x48>)
   16b50:	9b01      	ldr	r3, [sp, #4]
   16b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16b56:	f003 0301 	and.w	r3, r3, #1
   16b5a:	2b00      	cmp	r3, #0
   16b5c:	d106      	bne.n	16b6c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x3c>
   16b5e:	4a05      	ldr	r2, [pc, #20]	; (16b74 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x44>)
   16b60:	9b01      	ldr	r3, [sp, #4]
   16b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16b66:	2b00      	cmp	r3, #0
   16b68:	d100      	bne.n	16b6c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16b6a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16b6c:	bf00      	nop
   16b6e:	b003      	add	sp, #12
   16b70:	f85d fb04 	ldr.w	pc, [sp], #4
   16b74:	1fff9640 	.word	0x1fff9640
   16b78:	1fff963c 	.word	0x1fff963c

00016b7c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03(void)
{
   16b7c:	b500      	push	{lr}
   16b7e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16b80:	f7ea fe9e 	bl	18c0 <Sys_GetCoreID>
   16b84:	4603      	mov	r3, r0
   16b86:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId])
   16b88:	4a10      	ldr	r2, [pc, #64]	; (16bcc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
   16b8a:	9b01      	ldr	r3, [sp, #4]
   16b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16b90:	2b00      	cmp	r3, #0
   16b92:	d10d      	bne.n	16bb0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16b94:	f7e9 fedc 	bl	950 <Pwm_schm_read_msr>
   16b98:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16b9a:	9b00      	ldr	r3, [sp, #0]
   16b9c:	f003 0301 	and.w	r3, r3, #1
   16ba0:	2b00      	cmp	r3, #0
   16ba2:	d100      	bne.n	16ba6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16ba4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_03[u32CoreId] = msr;
   16ba6:	490a      	ldr	r1, [pc, #40]	; (16bd0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x54>)
   16ba8:	9b01      	ldr	r3, [sp, #4]
   16baa:	9a00      	ldr	r2, [sp, #0]
   16bac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId]++;
   16bb0:	4a06      	ldr	r2, [pc, #24]	; (16bcc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
   16bb2:	9b01      	ldr	r3, [sp, #4]
   16bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16bb8:	1c5a      	adds	r2, r3, #1
   16bba:	4904      	ldr	r1, [pc, #16]	; (16bcc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_03+0x50>)
   16bbc:	9b01      	ldr	r3, [sp, #4]
   16bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16bc2:	bf00      	nop
   16bc4:	b003      	add	sp, #12
   16bc6:	f85d fb04 	ldr.w	pc, [sp], #4
   16bca:	bf00      	nop
   16bcc:	1fff9648 	.word	0x1fff9648
   16bd0:	1fff9644 	.word	0x1fff9644

00016bd4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03(void)
{
   16bd4:	b500      	push	{lr}
   16bd6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16bd8:	f7ea fe72 	bl	18c0 <Sys_GetCoreID>
   16bdc:	4603      	mov	r3, r0
   16bde:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId]--;
   16be0:	4a0d      	ldr	r2, [pc, #52]	; (16c18 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
   16be2:	9b01      	ldr	r3, [sp, #4]
   16be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16be8:	1e5a      	subs	r2, r3, #1
   16bea:	490b      	ldr	r1, [pc, #44]	; (16c18 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
   16bec:	9b01      	ldr	r3, [sp, #4]
   16bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
   16bf2:	4a0a      	ldr	r2, [pc, #40]	; (16c1c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x48>)
   16bf4:	9b01      	ldr	r3, [sp, #4]
   16bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16bfa:	f003 0301 	and.w	r3, r3, #1
   16bfe:	2b00      	cmp	r3, #0
   16c00:	d106      	bne.n	16c10 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x3c>
   16c02:	4a05      	ldr	r2, [pc, #20]	; (16c18 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x44>)
   16c04:	9b01      	ldr	r3, [sp, #4]
   16c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16c0a:	2b00      	cmp	r3, #0
   16c0c:	d100      	bne.n	16c10 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16c0e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16c10:	bf00      	nop
   16c12:	b003      	add	sp, #12
   16c14:	f85d fb04 	ldr.w	pc, [sp], #4
   16c18:	1fff9648 	.word	0x1fff9648
   16c1c:	1fff9644 	.word	0x1fff9644

00016c20 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04(void)
{
   16c20:	b500      	push	{lr}
   16c22:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16c24:	f7ea fe4c 	bl	18c0 <Sys_GetCoreID>
   16c28:	4603      	mov	r3, r0
   16c2a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId])
   16c2c:	4a10      	ldr	r2, [pc, #64]	; (16c70 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
   16c2e:	9b01      	ldr	r3, [sp, #4]
   16c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16c34:	2b00      	cmp	r3, #0
   16c36:	d10d      	bne.n	16c54 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16c38:	f7e9 fe8a 	bl	950 <Pwm_schm_read_msr>
   16c3c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16c3e:	9b00      	ldr	r3, [sp, #0]
   16c40:	f003 0301 	and.w	r3, r3, #1
   16c44:	2b00      	cmp	r3, #0
   16c46:	d100      	bne.n	16c4a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16c48:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_04[u32CoreId] = msr;
   16c4a:	490a      	ldr	r1, [pc, #40]	; (16c74 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x54>)
   16c4c:	9b01      	ldr	r3, [sp, #4]
   16c4e:	9a00      	ldr	r2, [sp, #0]
   16c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId]++;
   16c54:	4a06      	ldr	r2, [pc, #24]	; (16c70 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
   16c56:	9b01      	ldr	r3, [sp, #4]
   16c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16c5c:	1c5a      	adds	r2, r3, #1
   16c5e:	4904      	ldr	r1, [pc, #16]	; (16c70 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_04+0x50>)
   16c60:	9b01      	ldr	r3, [sp, #4]
   16c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16c66:	bf00      	nop
   16c68:	b003      	add	sp, #12
   16c6a:	f85d fb04 	ldr.w	pc, [sp], #4
   16c6e:	bf00      	nop
   16c70:	1fff9650 	.word	0x1fff9650
   16c74:	1fff964c 	.word	0x1fff964c

00016c78 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04(void)
{
   16c78:	b500      	push	{lr}
   16c7a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16c7c:	f7ea fe20 	bl	18c0 <Sys_GetCoreID>
   16c80:	4603      	mov	r3, r0
   16c82:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId]--;
   16c84:	4a0d      	ldr	r2, [pc, #52]	; (16cbc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
   16c86:	9b01      	ldr	r3, [sp, #4]
   16c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16c8c:	1e5a      	subs	r2, r3, #1
   16c8e:	490b      	ldr	r1, [pc, #44]	; (16cbc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
   16c90:	9b01      	ldr	r3, [sp, #4]
   16c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
   16c96:	4a0a      	ldr	r2, [pc, #40]	; (16cc0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x48>)
   16c98:	9b01      	ldr	r3, [sp, #4]
   16c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16c9e:	f003 0301 	and.w	r3, r3, #1
   16ca2:	2b00      	cmp	r3, #0
   16ca4:	d106      	bne.n	16cb4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x3c>
   16ca6:	4a05      	ldr	r2, [pc, #20]	; (16cbc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x44>)
   16ca8:	9b01      	ldr	r3, [sp, #4]
   16caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16cae:	2b00      	cmp	r3, #0
   16cb0:	d100      	bne.n	16cb4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16cb2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16cb4:	bf00      	nop
   16cb6:	b003      	add	sp, #12
   16cb8:	f85d fb04 	ldr.w	pc, [sp], #4
   16cbc:	1fff9650 	.word	0x1fff9650
   16cc0:	1fff964c 	.word	0x1fff964c

00016cc4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05(void)
{
   16cc4:	b500      	push	{lr}
   16cc6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16cc8:	f7ea fdfa 	bl	18c0 <Sys_GetCoreID>
   16ccc:	4603      	mov	r3, r0
   16cce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId])
   16cd0:	4a10      	ldr	r2, [pc, #64]	; (16d14 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
   16cd2:	9b01      	ldr	r3, [sp, #4]
   16cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16cd8:	2b00      	cmp	r3, #0
   16cda:	d10d      	bne.n	16cf8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16cdc:	f7e9 fe38 	bl	950 <Pwm_schm_read_msr>
   16ce0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16ce2:	9b00      	ldr	r3, [sp, #0]
   16ce4:	f003 0301 	and.w	r3, r3, #1
   16ce8:	2b00      	cmp	r3, #0
   16cea:	d100      	bne.n	16cee <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16cec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_05[u32CoreId] = msr;
   16cee:	490a      	ldr	r1, [pc, #40]	; (16d18 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x54>)
   16cf0:	9b01      	ldr	r3, [sp, #4]
   16cf2:	9a00      	ldr	r2, [sp, #0]
   16cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId]++;
   16cf8:	4a06      	ldr	r2, [pc, #24]	; (16d14 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
   16cfa:	9b01      	ldr	r3, [sp, #4]
   16cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16d00:	1c5a      	adds	r2, r3, #1
   16d02:	4904      	ldr	r1, [pc, #16]	; (16d14 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_05+0x50>)
   16d04:	9b01      	ldr	r3, [sp, #4]
   16d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16d0a:	bf00      	nop
   16d0c:	b003      	add	sp, #12
   16d0e:	f85d fb04 	ldr.w	pc, [sp], #4
   16d12:	bf00      	nop
   16d14:	1fff9658 	.word	0x1fff9658
   16d18:	1fff9654 	.word	0x1fff9654

00016d1c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05(void)
{
   16d1c:	b500      	push	{lr}
   16d1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16d20:	f7ea fdce 	bl	18c0 <Sys_GetCoreID>
   16d24:	4603      	mov	r3, r0
   16d26:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId]--;
   16d28:	4a0d      	ldr	r2, [pc, #52]	; (16d60 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
   16d2a:	9b01      	ldr	r3, [sp, #4]
   16d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16d30:	1e5a      	subs	r2, r3, #1
   16d32:	490b      	ldr	r1, [pc, #44]	; (16d60 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
   16d34:	9b01      	ldr	r3, [sp, #4]
   16d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
   16d3a:	4a0a      	ldr	r2, [pc, #40]	; (16d64 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x48>)
   16d3c:	9b01      	ldr	r3, [sp, #4]
   16d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16d42:	f003 0301 	and.w	r3, r3, #1
   16d46:	2b00      	cmp	r3, #0
   16d48:	d106      	bne.n	16d58 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x3c>
   16d4a:	4a05      	ldr	r2, [pc, #20]	; (16d60 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x44>)
   16d4c:	9b01      	ldr	r3, [sp, #4]
   16d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16d52:	2b00      	cmp	r3, #0
   16d54:	d100      	bne.n	16d58 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16d56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16d58:	bf00      	nop
   16d5a:	b003      	add	sp, #12
   16d5c:	f85d fb04 	ldr.w	pc, [sp], #4
   16d60:	1fff9658 	.word	0x1fff9658
   16d64:	1fff9654 	.word	0x1fff9654

00016d68 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06(void)
{
   16d68:	b500      	push	{lr}
   16d6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16d6c:	f7ea fda8 	bl	18c0 <Sys_GetCoreID>
   16d70:	4603      	mov	r3, r0
   16d72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId])
   16d74:	4a10      	ldr	r2, [pc, #64]	; (16db8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
   16d76:	9b01      	ldr	r3, [sp, #4]
   16d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16d7c:	2b00      	cmp	r3, #0
   16d7e:	d10d      	bne.n	16d9c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16d80:	f7e9 fde6 	bl	950 <Pwm_schm_read_msr>
   16d84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16d86:	9b00      	ldr	r3, [sp, #0]
   16d88:	f003 0301 	and.w	r3, r3, #1
   16d8c:	2b00      	cmp	r3, #0
   16d8e:	d100      	bne.n	16d92 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16d90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_06[u32CoreId] = msr;
   16d92:	490a      	ldr	r1, [pc, #40]	; (16dbc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x54>)
   16d94:	9b01      	ldr	r3, [sp, #4]
   16d96:	9a00      	ldr	r2, [sp, #0]
   16d98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId]++;
   16d9c:	4a06      	ldr	r2, [pc, #24]	; (16db8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
   16d9e:	9b01      	ldr	r3, [sp, #4]
   16da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16da4:	1c5a      	adds	r2, r3, #1
   16da6:	4904      	ldr	r1, [pc, #16]	; (16db8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_06+0x50>)
   16da8:	9b01      	ldr	r3, [sp, #4]
   16daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16dae:	bf00      	nop
   16db0:	b003      	add	sp, #12
   16db2:	f85d fb04 	ldr.w	pc, [sp], #4
   16db6:	bf00      	nop
   16db8:	1fff9660 	.word	0x1fff9660
   16dbc:	1fff965c 	.word	0x1fff965c

00016dc0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06(void)
{
   16dc0:	b500      	push	{lr}
   16dc2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16dc4:	f7ea fd7c 	bl	18c0 <Sys_GetCoreID>
   16dc8:	4603      	mov	r3, r0
   16dca:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId]--;
   16dcc:	4a0d      	ldr	r2, [pc, #52]	; (16e04 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
   16dce:	9b01      	ldr	r3, [sp, #4]
   16dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16dd4:	1e5a      	subs	r2, r3, #1
   16dd6:	490b      	ldr	r1, [pc, #44]	; (16e04 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
   16dd8:	9b01      	ldr	r3, [sp, #4]
   16dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
   16dde:	4a0a      	ldr	r2, [pc, #40]	; (16e08 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x48>)
   16de0:	9b01      	ldr	r3, [sp, #4]
   16de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16de6:	f003 0301 	and.w	r3, r3, #1
   16dea:	2b00      	cmp	r3, #0
   16dec:	d106      	bne.n	16dfc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x3c>
   16dee:	4a05      	ldr	r2, [pc, #20]	; (16e04 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x44>)
   16df0:	9b01      	ldr	r3, [sp, #4]
   16df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16df6:	2b00      	cmp	r3, #0
   16df8:	d100      	bne.n	16dfc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16dfa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16dfc:	bf00      	nop
   16dfe:	b003      	add	sp, #12
   16e00:	f85d fb04 	ldr.w	pc, [sp], #4
   16e04:	1fff9660 	.word	0x1fff9660
   16e08:	1fff965c 	.word	0x1fff965c

00016e0c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07(void)
{
   16e0c:	b500      	push	{lr}
   16e0e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16e10:	f7ea fd56 	bl	18c0 <Sys_GetCoreID>
   16e14:	4603      	mov	r3, r0
   16e16:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId])
   16e18:	4a10      	ldr	r2, [pc, #64]	; (16e5c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
   16e1a:	9b01      	ldr	r3, [sp, #4]
   16e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16e20:	2b00      	cmp	r3, #0
   16e22:	d10d      	bne.n	16e40 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16e24:	f7e9 fd94 	bl	950 <Pwm_schm_read_msr>
   16e28:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16e2a:	9b00      	ldr	r3, [sp, #0]
   16e2c:	f003 0301 	and.w	r3, r3, #1
   16e30:	2b00      	cmp	r3, #0
   16e32:	d100      	bne.n	16e36 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16e34:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_07[u32CoreId] = msr;
   16e36:	490a      	ldr	r1, [pc, #40]	; (16e60 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x54>)
   16e38:	9b01      	ldr	r3, [sp, #4]
   16e3a:	9a00      	ldr	r2, [sp, #0]
   16e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId]++;
   16e40:	4a06      	ldr	r2, [pc, #24]	; (16e5c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
   16e42:	9b01      	ldr	r3, [sp, #4]
   16e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16e48:	1c5a      	adds	r2, r3, #1
   16e4a:	4904      	ldr	r1, [pc, #16]	; (16e5c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_07+0x50>)
   16e4c:	9b01      	ldr	r3, [sp, #4]
   16e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16e52:	bf00      	nop
   16e54:	b003      	add	sp, #12
   16e56:	f85d fb04 	ldr.w	pc, [sp], #4
   16e5a:	bf00      	nop
   16e5c:	1fff9668 	.word	0x1fff9668
   16e60:	1fff9664 	.word	0x1fff9664

00016e64 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07(void)
{
   16e64:	b500      	push	{lr}
   16e66:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16e68:	f7ea fd2a 	bl	18c0 <Sys_GetCoreID>
   16e6c:	4603      	mov	r3, r0
   16e6e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId]--;
   16e70:	4a0d      	ldr	r2, [pc, #52]	; (16ea8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
   16e72:	9b01      	ldr	r3, [sp, #4]
   16e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16e78:	1e5a      	subs	r2, r3, #1
   16e7a:	490b      	ldr	r1, [pc, #44]	; (16ea8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
   16e7c:	9b01      	ldr	r3, [sp, #4]
   16e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
   16e82:	4a0a      	ldr	r2, [pc, #40]	; (16eac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x48>)
   16e84:	9b01      	ldr	r3, [sp, #4]
   16e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16e8a:	f003 0301 	and.w	r3, r3, #1
   16e8e:	2b00      	cmp	r3, #0
   16e90:	d106      	bne.n	16ea0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x3c>
   16e92:	4a05      	ldr	r2, [pc, #20]	; (16ea8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x44>)
   16e94:	9b01      	ldr	r3, [sp, #4]
   16e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16e9a:	2b00      	cmp	r3, #0
   16e9c:	d100      	bne.n	16ea0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16e9e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16ea0:	bf00      	nop
   16ea2:	b003      	add	sp, #12
   16ea4:	f85d fb04 	ldr.w	pc, [sp], #4
   16ea8:	1fff9668 	.word	0x1fff9668
   16eac:	1fff9664 	.word	0x1fff9664

00016eb0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08(void)
{
   16eb0:	b500      	push	{lr}
   16eb2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16eb4:	f7ea fd04 	bl	18c0 <Sys_GetCoreID>
   16eb8:	4603      	mov	r3, r0
   16eba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId])
   16ebc:	4a10      	ldr	r2, [pc, #64]	; (16f00 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
   16ebe:	9b01      	ldr	r3, [sp, #4]
   16ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16ec4:	2b00      	cmp	r3, #0
   16ec6:	d10d      	bne.n	16ee4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16ec8:	f7e9 fd42 	bl	950 <Pwm_schm_read_msr>
   16ecc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16ece:	9b00      	ldr	r3, [sp, #0]
   16ed0:	f003 0301 	and.w	r3, r3, #1
   16ed4:	2b00      	cmp	r3, #0
   16ed6:	d100      	bne.n	16eda <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16ed8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_08[u32CoreId] = msr;
   16eda:	490a      	ldr	r1, [pc, #40]	; (16f04 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x54>)
   16edc:	9b01      	ldr	r3, [sp, #4]
   16ede:	9a00      	ldr	r2, [sp, #0]
   16ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId]++;
   16ee4:	4a06      	ldr	r2, [pc, #24]	; (16f00 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
   16ee6:	9b01      	ldr	r3, [sp, #4]
   16ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16eec:	1c5a      	adds	r2, r3, #1
   16eee:	4904      	ldr	r1, [pc, #16]	; (16f00 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_08+0x50>)
   16ef0:	9b01      	ldr	r3, [sp, #4]
   16ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16ef6:	bf00      	nop
   16ef8:	b003      	add	sp, #12
   16efa:	f85d fb04 	ldr.w	pc, [sp], #4
   16efe:	bf00      	nop
   16f00:	1fff9670 	.word	0x1fff9670
   16f04:	1fff966c 	.word	0x1fff966c

00016f08 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08(void)
{
   16f08:	b500      	push	{lr}
   16f0a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16f0c:	f7ea fcd8 	bl	18c0 <Sys_GetCoreID>
   16f10:	4603      	mov	r3, r0
   16f12:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId]--;
   16f14:	4a0d      	ldr	r2, [pc, #52]	; (16f4c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
   16f16:	9b01      	ldr	r3, [sp, #4]
   16f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16f1c:	1e5a      	subs	r2, r3, #1
   16f1e:	490b      	ldr	r1, [pc, #44]	; (16f4c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
   16f20:	9b01      	ldr	r3, [sp, #4]
   16f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
   16f26:	4a0a      	ldr	r2, [pc, #40]	; (16f50 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x48>)
   16f28:	9b01      	ldr	r3, [sp, #4]
   16f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16f2e:	f003 0301 	and.w	r3, r3, #1
   16f32:	2b00      	cmp	r3, #0
   16f34:	d106      	bne.n	16f44 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x3c>
   16f36:	4a05      	ldr	r2, [pc, #20]	; (16f4c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x44>)
   16f38:	9b01      	ldr	r3, [sp, #4]
   16f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16f3e:	2b00      	cmp	r3, #0
   16f40:	d100      	bne.n	16f44 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16f42:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16f44:	bf00      	nop
   16f46:	b003      	add	sp, #12
   16f48:	f85d fb04 	ldr.w	pc, [sp], #4
   16f4c:	1fff9670 	.word	0x1fff9670
   16f50:	1fff966c 	.word	0x1fff966c

00016f54 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09(void)
{
   16f54:	b500      	push	{lr}
   16f56:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16f58:	f7ea fcb2 	bl	18c0 <Sys_GetCoreID>
   16f5c:	4603      	mov	r3, r0
   16f5e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId])
   16f60:	4a10      	ldr	r2, [pc, #64]	; (16fa4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
   16f62:	9b01      	ldr	r3, [sp, #4]
   16f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16f68:	2b00      	cmp	r3, #0
   16f6a:	d10d      	bne.n	16f88 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   16f6c:	f7e9 fcf0 	bl	950 <Pwm_schm_read_msr>
   16f70:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   16f72:	9b00      	ldr	r3, [sp, #0]
   16f74:	f003 0301 	and.w	r3, r3, #1
   16f78:	2b00      	cmp	r3, #0
   16f7a:	d100      	bne.n	16f7e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   16f7c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_09[u32CoreId] = msr;
   16f7e:	490a      	ldr	r1, [pc, #40]	; (16fa8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x54>)
   16f80:	9b01      	ldr	r3, [sp, #4]
   16f82:	9a00      	ldr	r2, [sp, #0]
   16f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId]++;
   16f88:	4a06      	ldr	r2, [pc, #24]	; (16fa4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
   16f8a:	9b01      	ldr	r3, [sp, #4]
   16f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16f90:	1c5a      	adds	r2, r3, #1
   16f92:	4904      	ldr	r1, [pc, #16]	; (16fa4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_09+0x50>)
   16f94:	9b01      	ldr	r3, [sp, #4]
   16f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   16f9a:	bf00      	nop
   16f9c:	b003      	add	sp, #12
   16f9e:	f85d fb04 	ldr.w	pc, [sp], #4
   16fa2:	bf00      	nop
   16fa4:	1fff9678 	.word	0x1fff9678
   16fa8:	1fff9674 	.word	0x1fff9674

00016fac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09(void)
{
   16fac:	b500      	push	{lr}
   16fae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16fb0:	f7ea fc86 	bl	18c0 <Sys_GetCoreID>
   16fb4:	4603      	mov	r3, r0
   16fb6:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId]--;
   16fb8:	4a0d      	ldr	r2, [pc, #52]	; (16ff0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
   16fba:	9b01      	ldr	r3, [sp, #4]
   16fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16fc0:	1e5a      	subs	r2, r3, #1
   16fc2:	490b      	ldr	r1, [pc, #44]	; (16ff0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
   16fc4:	9b01      	ldr	r3, [sp, #4]
   16fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
   16fca:	4a0a      	ldr	r2, [pc, #40]	; (16ff4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x48>)
   16fcc:	9b01      	ldr	r3, [sp, #4]
   16fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16fd2:	f003 0301 	and.w	r3, r3, #1
   16fd6:	2b00      	cmp	r3, #0
   16fd8:	d106      	bne.n	16fe8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x3c>
   16fda:	4a05      	ldr	r2, [pc, #20]	; (16ff0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x44>)
   16fdc:	9b01      	ldr	r3, [sp, #4]
   16fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16fe2:	2b00      	cmp	r3, #0
   16fe4:	d100      	bne.n	16fe8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   16fe6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   16fe8:	bf00      	nop
   16fea:	b003      	add	sp, #12
   16fec:	f85d fb04 	ldr.w	pc, [sp], #4
   16ff0:	1fff9678 	.word	0x1fff9678
   16ff4:	1fff9674 	.word	0x1fff9674

00016ff8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10(void)
{
   16ff8:	b500      	push	{lr}
   16ffa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   16ffc:	f7ea fc60 	bl	18c0 <Sys_GetCoreID>
   17000:	4603      	mov	r3, r0
   17002:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId])
   17004:	4a10      	ldr	r2, [pc, #64]	; (17048 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
   17006:	9b01      	ldr	r3, [sp, #4]
   17008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1700c:	2b00      	cmp	r3, #0
   1700e:	d10d      	bne.n	1702c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17010:	f7e9 fc9e 	bl	950 <Pwm_schm_read_msr>
   17014:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17016:	9b00      	ldr	r3, [sp, #0]
   17018:	f003 0301 	and.w	r3, r3, #1
   1701c:	2b00      	cmp	r3, #0
   1701e:	d100      	bne.n	17022 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17020:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_10[u32CoreId] = msr;
   17022:	490a      	ldr	r1, [pc, #40]	; (1704c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x54>)
   17024:	9b01      	ldr	r3, [sp, #4]
   17026:	9a00      	ldr	r2, [sp, #0]
   17028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId]++;
   1702c:	4a06      	ldr	r2, [pc, #24]	; (17048 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
   1702e:	9b01      	ldr	r3, [sp, #4]
   17030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17034:	1c5a      	adds	r2, r3, #1
   17036:	4904      	ldr	r1, [pc, #16]	; (17048 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_10+0x50>)
   17038:	9b01      	ldr	r3, [sp, #4]
   1703a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1703e:	bf00      	nop
   17040:	b003      	add	sp, #12
   17042:	f85d fb04 	ldr.w	pc, [sp], #4
   17046:	bf00      	nop
   17048:	1fff9680 	.word	0x1fff9680
   1704c:	1fff967c 	.word	0x1fff967c

00017050 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10(void)
{
   17050:	b500      	push	{lr}
   17052:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17054:	f7ea fc34 	bl	18c0 <Sys_GetCoreID>
   17058:	4603      	mov	r3, r0
   1705a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId]--;
   1705c:	4a0d      	ldr	r2, [pc, #52]	; (17094 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
   1705e:	9b01      	ldr	r3, [sp, #4]
   17060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17064:	1e5a      	subs	r2, r3, #1
   17066:	490b      	ldr	r1, [pc, #44]	; (17094 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
   17068:	9b01      	ldr	r3, [sp, #4]
   1706a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
   1706e:	4a0a      	ldr	r2, [pc, #40]	; (17098 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x48>)
   17070:	9b01      	ldr	r3, [sp, #4]
   17072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17076:	f003 0301 	and.w	r3, r3, #1
   1707a:	2b00      	cmp	r3, #0
   1707c:	d106      	bne.n	1708c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x3c>
   1707e:	4a05      	ldr	r2, [pc, #20]	; (17094 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x44>)
   17080:	9b01      	ldr	r3, [sp, #4]
   17082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17086:	2b00      	cmp	r3, #0
   17088:	d100      	bne.n	1708c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1708a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1708c:	bf00      	nop
   1708e:	b003      	add	sp, #12
   17090:	f85d fb04 	ldr.w	pc, [sp], #4
   17094:	1fff9680 	.word	0x1fff9680
   17098:	1fff967c 	.word	0x1fff967c

0001709c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11(void)
{
   1709c:	b500      	push	{lr}
   1709e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   170a0:	f7ea fc0e 	bl	18c0 <Sys_GetCoreID>
   170a4:	4603      	mov	r3, r0
   170a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId])
   170a8:	4a10      	ldr	r2, [pc, #64]	; (170ec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
   170aa:	9b01      	ldr	r3, [sp, #4]
   170ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   170b0:	2b00      	cmp	r3, #0
   170b2:	d10d      	bne.n	170d0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   170b4:	f7e9 fc4c 	bl	950 <Pwm_schm_read_msr>
   170b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   170ba:	9b00      	ldr	r3, [sp, #0]
   170bc:	f003 0301 	and.w	r3, r3, #1
   170c0:	2b00      	cmp	r3, #0
   170c2:	d100      	bne.n	170c6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   170c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_11[u32CoreId] = msr;
   170c6:	490a      	ldr	r1, [pc, #40]	; (170f0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x54>)
   170c8:	9b01      	ldr	r3, [sp, #4]
   170ca:	9a00      	ldr	r2, [sp, #0]
   170cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId]++;
   170d0:	4a06      	ldr	r2, [pc, #24]	; (170ec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
   170d2:	9b01      	ldr	r3, [sp, #4]
   170d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   170d8:	1c5a      	adds	r2, r3, #1
   170da:	4904      	ldr	r1, [pc, #16]	; (170ec <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_11+0x50>)
   170dc:	9b01      	ldr	r3, [sp, #4]
   170de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   170e2:	bf00      	nop
   170e4:	b003      	add	sp, #12
   170e6:	f85d fb04 	ldr.w	pc, [sp], #4
   170ea:	bf00      	nop
   170ec:	1fff9688 	.word	0x1fff9688
   170f0:	1fff9684 	.word	0x1fff9684

000170f4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11(void)
{
   170f4:	b500      	push	{lr}
   170f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   170f8:	f7ea fbe2 	bl	18c0 <Sys_GetCoreID>
   170fc:	4603      	mov	r3, r0
   170fe:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId]--;
   17100:	4a0d      	ldr	r2, [pc, #52]	; (17138 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
   17102:	9b01      	ldr	r3, [sp, #4]
   17104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17108:	1e5a      	subs	r2, r3, #1
   1710a:	490b      	ldr	r1, [pc, #44]	; (17138 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
   1710c:	9b01      	ldr	r3, [sp, #4]
   1710e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
   17112:	4a0a      	ldr	r2, [pc, #40]	; (1713c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x48>)
   17114:	9b01      	ldr	r3, [sp, #4]
   17116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1711a:	f003 0301 	and.w	r3, r3, #1
   1711e:	2b00      	cmp	r3, #0
   17120:	d106      	bne.n	17130 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x3c>
   17122:	4a05      	ldr	r2, [pc, #20]	; (17138 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x44>)
   17124:	9b01      	ldr	r3, [sp, #4]
   17126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1712a:	2b00      	cmp	r3, #0
   1712c:	d100      	bne.n	17130 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1712e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17130:	bf00      	nop
   17132:	b003      	add	sp, #12
   17134:	f85d fb04 	ldr.w	pc, [sp], #4
   17138:	1fff9688 	.word	0x1fff9688
   1713c:	1fff9684 	.word	0x1fff9684

00017140 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12(void)
{
   17140:	b500      	push	{lr}
   17142:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17144:	f7ea fbbc 	bl	18c0 <Sys_GetCoreID>
   17148:	4603      	mov	r3, r0
   1714a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId])
   1714c:	4a10      	ldr	r2, [pc, #64]	; (17190 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
   1714e:	9b01      	ldr	r3, [sp, #4]
   17150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17154:	2b00      	cmp	r3, #0
   17156:	d10d      	bne.n	17174 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17158:	f7e9 fbfa 	bl	950 <Pwm_schm_read_msr>
   1715c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1715e:	9b00      	ldr	r3, [sp, #0]
   17160:	f003 0301 	and.w	r3, r3, #1
   17164:	2b00      	cmp	r3, #0
   17166:	d100      	bne.n	1716a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17168:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_12[u32CoreId] = msr;
   1716a:	490a      	ldr	r1, [pc, #40]	; (17194 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x54>)
   1716c:	9b01      	ldr	r3, [sp, #4]
   1716e:	9a00      	ldr	r2, [sp, #0]
   17170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId]++;
   17174:	4a06      	ldr	r2, [pc, #24]	; (17190 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
   17176:	9b01      	ldr	r3, [sp, #4]
   17178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1717c:	1c5a      	adds	r2, r3, #1
   1717e:	4904      	ldr	r1, [pc, #16]	; (17190 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_12+0x50>)
   17180:	9b01      	ldr	r3, [sp, #4]
   17182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17186:	bf00      	nop
   17188:	b003      	add	sp, #12
   1718a:	f85d fb04 	ldr.w	pc, [sp], #4
   1718e:	bf00      	nop
   17190:	1fff9690 	.word	0x1fff9690
   17194:	1fff968c 	.word	0x1fff968c

00017198 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12(void)
{
   17198:	b500      	push	{lr}
   1719a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1719c:	f7ea fb90 	bl	18c0 <Sys_GetCoreID>
   171a0:	4603      	mov	r3, r0
   171a2:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId]--;
   171a4:	4a0d      	ldr	r2, [pc, #52]	; (171dc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
   171a6:	9b01      	ldr	r3, [sp, #4]
   171a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   171ac:	1e5a      	subs	r2, r3, #1
   171ae:	490b      	ldr	r1, [pc, #44]	; (171dc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
   171b0:	9b01      	ldr	r3, [sp, #4]
   171b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
   171b6:	4a0a      	ldr	r2, [pc, #40]	; (171e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x48>)
   171b8:	9b01      	ldr	r3, [sp, #4]
   171ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   171be:	f003 0301 	and.w	r3, r3, #1
   171c2:	2b00      	cmp	r3, #0
   171c4:	d106      	bne.n	171d4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x3c>
   171c6:	4a05      	ldr	r2, [pc, #20]	; (171dc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x44>)
   171c8:	9b01      	ldr	r3, [sp, #4]
   171ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   171ce:	2b00      	cmp	r3, #0
   171d0:	d100      	bne.n	171d4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   171d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   171d4:	bf00      	nop
   171d6:	b003      	add	sp, #12
   171d8:	f85d fb04 	ldr.w	pc, [sp], #4
   171dc:	1fff9690 	.word	0x1fff9690
   171e0:	1fff968c 	.word	0x1fff968c

000171e4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13(void)
{
   171e4:	b500      	push	{lr}
   171e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   171e8:	f7ea fb6a 	bl	18c0 <Sys_GetCoreID>
   171ec:	4603      	mov	r3, r0
   171ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId])
   171f0:	4a10      	ldr	r2, [pc, #64]	; (17234 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
   171f2:	9b01      	ldr	r3, [sp, #4]
   171f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   171f8:	2b00      	cmp	r3, #0
   171fa:	d10d      	bne.n	17218 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   171fc:	f7e9 fba8 	bl	950 <Pwm_schm_read_msr>
   17200:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17202:	9b00      	ldr	r3, [sp, #0]
   17204:	f003 0301 	and.w	r3, r3, #1
   17208:	2b00      	cmp	r3, #0
   1720a:	d100      	bne.n	1720e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1720c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_13[u32CoreId] = msr;
   1720e:	490a      	ldr	r1, [pc, #40]	; (17238 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x54>)
   17210:	9b01      	ldr	r3, [sp, #4]
   17212:	9a00      	ldr	r2, [sp, #0]
   17214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId]++;
   17218:	4a06      	ldr	r2, [pc, #24]	; (17234 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
   1721a:	9b01      	ldr	r3, [sp, #4]
   1721c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17220:	1c5a      	adds	r2, r3, #1
   17222:	4904      	ldr	r1, [pc, #16]	; (17234 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_13+0x50>)
   17224:	9b01      	ldr	r3, [sp, #4]
   17226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1722a:	bf00      	nop
   1722c:	b003      	add	sp, #12
   1722e:	f85d fb04 	ldr.w	pc, [sp], #4
   17232:	bf00      	nop
   17234:	1fff9698 	.word	0x1fff9698
   17238:	1fff9694 	.word	0x1fff9694

0001723c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13(void)
{
   1723c:	b500      	push	{lr}
   1723e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17240:	f7ea fb3e 	bl	18c0 <Sys_GetCoreID>
   17244:	4603      	mov	r3, r0
   17246:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId]--;
   17248:	4a0d      	ldr	r2, [pc, #52]	; (17280 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
   1724a:	9b01      	ldr	r3, [sp, #4]
   1724c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17250:	1e5a      	subs	r2, r3, #1
   17252:	490b      	ldr	r1, [pc, #44]	; (17280 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
   17254:	9b01      	ldr	r3, [sp, #4]
   17256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
   1725a:	4a0a      	ldr	r2, [pc, #40]	; (17284 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x48>)
   1725c:	9b01      	ldr	r3, [sp, #4]
   1725e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17262:	f003 0301 	and.w	r3, r3, #1
   17266:	2b00      	cmp	r3, #0
   17268:	d106      	bne.n	17278 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x3c>
   1726a:	4a05      	ldr	r2, [pc, #20]	; (17280 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x44>)
   1726c:	9b01      	ldr	r3, [sp, #4]
   1726e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17272:	2b00      	cmp	r3, #0
   17274:	d100      	bne.n	17278 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17276:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17278:	bf00      	nop
   1727a:	b003      	add	sp, #12
   1727c:	f85d fb04 	ldr.w	pc, [sp], #4
   17280:	1fff9698 	.word	0x1fff9698
   17284:	1fff9694 	.word	0x1fff9694

00017288 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14(void)
{
   17288:	b500      	push	{lr}
   1728a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1728c:	f7ea fb18 	bl	18c0 <Sys_GetCoreID>
   17290:	4603      	mov	r3, r0
   17292:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId])
   17294:	4a10      	ldr	r2, [pc, #64]	; (172d8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
   17296:	9b01      	ldr	r3, [sp, #4]
   17298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1729c:	2b00      	cmp	r3, #0
   1729e:	d10d      	bne.n	172bc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   172a0:	f7e9 fb56 	bl	950 <Pwm_schm_read_msr>
   172a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   172a6:	9b00      	ldr	r3, [sp, #0]
   172a8:	f003 0301 	and.w	r3, r3, #1
   172ac:	2b00      	cmp	r3, #0
   172ae:	d100      	bne.n	172b2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   172b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_14[u32CoreId] = msr;
   172b2:	490a      	ldr	r1, [pc, #40]	; (172dc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x54>)
   172b4:	9b01      	ldr	r3, [sp, #4]
   172b6:	9a00      	ldr	r2, [sp, #0]
   172b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId]++;
   172bc:	4a06      	ldr	r2, [pc, #24]	; (172d8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
   172be:	9b01      	ldr	r3, [sp, #4]
   172c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   172c4:	1c5a      	adds	r2, r3, #1
   172c6:	4904      	ldr	r1, [pc, #16]	; (172d8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_14+0x50>)
   172c8:	9b01      	ldr	r3, [sp, #4]
   172ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   172ce:	bf00      	nop
   172d0:	b003      	add	sp, #12
   172d2:	f85d fb04 	ldr.w	pc, [sp], #4
   172d6:	bf00      	nop
   172d8:	1fff96a0 	.word	0x1fff96a0
   172dc:	1fff969c 	.word	0x1fff969c

000172e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14(void)
{
   172e0:	b500      	push	{lr}
   172e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   172e4:	f7ea faec 	bl	18c0 <Sys_GetCoreID>
   172e8:	4603      	mov	r3, r0
   172ea:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId]--;
   172ec:	4a0d      	ldr	r2, [pc, #52]	; (17324 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
   172ee:	9b01      	ldr	r3, [sp, #4]
   172f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   172f4:	1e5a      	subs	r2, r3, #1
   172f6:	490b      	ldr	r1, [pc, #44]	; (17324 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
   172f8:	9b01      	ldr	r3, [sp, #4]
   172fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
   172fe:	4a0a      	ldr	r2, [pc, #40]	; (17328 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x48>)
   17300:	9b01      	ldr	r3, [sp, #4]
   17302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17306:	f003 0301 	and.w	r3, r3, #1
   1730a:	2b00      	cmp	r3, #0
   1730c:	d106      	bne.n	1731c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x3c>
   1730e:	4a05      	ldr	r2, [pc, #20]	; (17324 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x44>)
   17310:	9b01      	ldr	r3, [sp, #4]
   17312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17316:	2b00      	cmp	r3, #0
   17318:	d100      	bne.n	1731c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1731a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1731c:	bf00      	nop
   1731e:	b003      	add	sp, #12
   17320:	f85d fb04 	ldr.w	pc, [sp], #4
   17324:	1fff96a0 	.word	0x1fff96a0
   17328:	1fff969c 	.word	0x1fff969c

0001732c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15(void)
{
   1732c:	b500      	push	{lr}
   1732e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17330:	f7ea fac6 	bl	18c0 <Sys_GetCoreID>
   17334:	4603      	mov	r3, r0
   17336:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId])
   17338:	4a10      	ldr	r2, [pc, #64]	; (1737c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
   1733a:	9b01      	ldr	r3, [sp, #4]
   1733c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17340:	2b00      	cmp	r3, #0
   17342:	d10d      	bne.n	17360 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17344:	f7e9 fb04 	bl	950 <Pwm_schm_read_msr>
   17348:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1734a:	9b00      	ldr	r3, [sp, #0]
   1734c:	f003 0301 	and.w	r3, r3, #1
   17350:	2b00      	cmp	r3, #0
   17352:	d100      	bne.n	17356 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17354:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_15[u32CoreId] = msr;
   17356:	490a      	ldr	r1, [pc, #40]	; (17380 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x54>)
   17358:	9b01      	ldr	r3, [sp, #4]
   1735a:	9a00      	ldr	r2, [sp, #0]
   1735c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId]++;
   17360:	4a06      	ldr	r2, [pc, #24]	; (1737c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
   17362:	9b01      	ldr	r3, [sp, #4]
   17364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17368:	1c5a      	adds	r2, r3, #1
   1736a:	4904      	ldr	r1, [pc, #16]	; (1737c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_15+0x50>)
   1736c:	9b01      	ldr	r3, [sp, #4]
   1736e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17372:	bf00      	nop
   17374:	b003      	add	sp, #12
   17376:	f85d fb04 	ldr.w	pc, [sp], #4
   1737a:	bf00      	nop
   1737c:	1fff96a8 	.word	0x1fff96a8
   17380:	1fff96a4 	.word	0x1fff96a4

00017384 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15(void)
{
   17384:	b500      	push	{lr}
   17386:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17388:	f7ea fa9a 	bl	18c0 <Sys_GetCoreID>
   1738c:	4603      	mov	r3, r0
   1738e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId]--;
   17390:	4a0d      	ldr	r2, [pc, #52]	; (173c8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
   17392:	9b01      	ldr	r3, [sp, #4]
   17394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17398:	1e5a      	subs	r2, r3, #1
   1739a:	490b      	ldr	r1, [pc, #44]	; (173c8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
   1739c:	9b01      	ldr	r3, [sp, #4]
   1739e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
   173a2:	4a0a      	ldr	r2, [pc, #40]	; (173cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x48>)
   173a4:	9b01      	ldr	r3, [sp, #4]
   173a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   173aa:	f003 0301 	and.w	r3, r3, #1
   173ae:	2b00      	cmp	r3, #0
   173b0:	d106      	bne.n	173c0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x3c>
   173b2:	4a05      	ldr	r2, [pc, #20]	; (173c8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x44>)
   173b4:	9b01      	ldr	r3, [sp, #4]
   173b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   173ba:	2b00      	cmp	r3, #0
   173bc:	d100      	bne.n	173c0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   173be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   173c0:	bf00      	nop
   173c2:	b003      	add	sp, #12
   173c4:	f85d fb04 	ldr.w	pc, [sp], #4
   173c8:	1fff96a8 	.word	0x1fff96a8
   173cc:	1fff96a4 	.word	0x1fff96a4

000173d0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16(void)
{
   173d0:	b500      	push	{lr}
   173d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   173d4:	f7ea fa74 	bl	18c0 <Sys_GetCoreID>
   173d8:	4603      	mov	r3, r0
   173da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId])
   173dc:	4a10      	ldr	r2, [pc, #64]	; (17420 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
   173de:	9b01      	ldr	r3, [sp, #4]
   173e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   173e4:	2b00      	cmp	r3, #0
   173e6:	d10d      	bne.n	17404 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   173e8:	f7e9 fab2 	bl	950 <Pwm_schm_read_msr>
   173ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   173ee:	9b00      	ldr	r3, [sp, #0]
   173f0:	f003 0301 	and.w	r3, r3, #1
   173f4:	2b00      	cmp	r3, #0
   173f6:	d100      	bne.n	173fa <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   173f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_16[u32CoreId] = msr;
   173fa:	490a      	ldr	r1, [pc, #40]	; (17424 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x54>)
   173fc:	9b01      	ldr	r3, [sp, #4]
   173fe:	9a00      	ldr	r2, [sp, #0]
   17400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId]++;
   17404:	4a06      	ldr	r2, [pc, #24]	; (17420 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
   17406:	9b01      	ldr	r3, [sp, #4]
   17408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1740c:	1c5a      	adds	r2, r3, #1
   1740e:	4904      	ldr	r1, [pc, #16]	; (17420 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_16+0x50>)
   17410:	9b01      	ldr	r3, [sp, #4]
   17412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17416:	bf00      	nop
   17418:	b003      	add	sp, #12
   1741a:	f85d fb04 	ldr.w	pc, [sp], #4
   1741e:	bf00      	nop
   17420:	1fff96b0 	.word	0x1fff96b0
   17424:	1fff96ac 	.word	0x1fff96ac

00017428 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16(void)
{
   17428:	b500      	push	{lr}
   1742a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1742c:	f7ea fa48 	bl	18c0 <Sys_GetCoreID>
   17430:	4603      	mov	r3, r0
   17432:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId]--;
   17434:	4a0d      	ldr	r2, [pc, #52]	; (1746c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
   17436:	9b01      	ldr	r3, [sp, #4]
   17438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1743c:	1e5a      	subs	r2, r3, #1
   1743e:	490b      	ldr	r1, [pc, #44]	; (1746c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
   17440:	9b01      	ldr	r3, [sp, #4]
   17442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
   17446:	4a0a      	ldr	r2, [pc, #40]	; (17470 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x48>)
   17448:	9b01      	ldr	r3, [sp, #4]
   1744a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1744e:	f003 0301 	and.w	r3, r3, #1
   17452:	2b00      	cmp	r3, #0
   17454:	d106      	bne.n	17464 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x3c>
   17456:	4a05      	ldr	r2, [pc, #20]	; (1746c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x44>)
   17458:	9b01      	ldr	r3, [sp, #4]
   1745a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1745e:	2b00      	cmp	r3, #0
   17460:	d100      	bne.n	17464 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17462:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17464:	bf00      	nop
   17466:	b003      	add	sp, #12
   17468:	f85d fb04 	ldr.w	pc, [sp], #4
   1746c:	1fff96b0 	.word	0x1fff96b0
   17470:	1fff96ac 	.word	0x1fff96ac

00017474 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17(void)
{
   17474:	b500      	push	{lr}
   17476:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17478:	f7ea fa22 	bl	18c0 <Sys_GetCoreID>
   1747c:	4603      	mov	r3, r0
   1747e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId])
   17480:	4a10      	ldr	r2, [pc, #64]	; (174c4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
   17482:	9b01      	ldr	r3, [sp, #4]
   17484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17488:	2b00      	cmp	r3, #0
   1748a:	d10d      	bne.n	174a8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1748c:	f7e9 fa60 	bl	950 <Pwm_schm_read_msr>
   17490:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17492:	9b00      	ldr	r3, [sp, #0]
   17494:	f003 0301 	and.w	r3, r3, #1
   17498:	2b00      	cmp	r3, #0
   1749a:	d100      	bne.n	1749e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1749c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_17[u32CoreId] = msr;
   1749e:	490a      	ldr	r1, [pc, #40]	; (174c8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x54>)
   174a0:	9b01      	ldr	r3, [sp, #4]
   174a2:	9a00      	ldr	r2, [sp, #0]
   174a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId]++;
   174a8:	4a06      	ldr	r2, [pc, #24]	; (174c4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
   174aa:	9b01      	ldr	r3, [sp, #4]
   174ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   174b0:	1c5a      	adds	r2, r3, #1
   174b2:	4904      	ldr	r1, [pc, #16]	; (174c4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_17+0x50>)
   174b4:	9b01      	ldr	r3, [sp, #4]
   174b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   174ba:	bf00      	nop
   174bc:	b003      	add	sp, #12
   174be:	f85d fb04 	ldr.w	pc, [sp], #4
   174c2:	bf00      	nop
   174c4:	1fff96b8 	.word	0x1fff96b8
   174c8:	1fff96b4 	.word	0x1fff96b4

000174cc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17(void)
{
   174cc:	b500      	push	{lr}
   174ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   174d0:	f7ea f9f6 	bl	18c0 <Sys_GetCoreID>
   174d4:	4603      	mov	r3, r0
   174d6:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId]--;
   174d8:	4a0d      	ldr	r2, [pc, #52]	; (17510 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
   174da:	9b01      	ldr	r3, [sp, #4]
   174dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   174e0:	1e5a      	subs	r2, r3, #1
   174e2:	490b      	ldr	r1, [pc, #44]	; (17510 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
   174e4:	9b01      	ldr	r3, [sp, #4]
   174e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
   174ea:	4a0a      	ldr	r2, [pc, #40]	; (17514 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x48>)
   174ec:	9b01      	ldr	r3, [sp, #4]
   174ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   174f2:	f003 0301 	and.w	r3, r3, #1
   174f6:	2b00      	cmp	r3, #0
   174f8:	d106      	bne.n	17508 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x3c>
   174fa:	4a05      	ldr	r2, [pc, #20]	; (17510 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x44>)
   174fc:	9b01      	ldr	r3, [sp, #4]
   174fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17502:	2b00      	cmp	r3, #0
   17504:	d100      	bne.n	17508 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17506:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17508:	bf00      	nop
   1750a:	b003      	add	sp, #12
   1750c:	f85d fb04 	ldr.w	pc, [sp], #4
   17510:	1fff96b8 	.word	0x1fff96b8
   17514:	1fff96b4 	.word	0x1fff96b4

00017518 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18(void)
{
   17518:	b500      	push	{lr}
   1751a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1751c:	f7ea f9d0 	bl	18c0 <Sys_GetCoreID>
   17520:	4603      	mov	r3, r0
   17522:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId])
   17524:	4a10      	ldr	r2, [pc, #64]	; (17568 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
   17526:	9b01      	ldr	r3, [sp, #4]
   17528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1752c:	2b00      	cmp	r3, #0
   1752e:	d10d      	bne.n	1754c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17530:	f7e9 fa0e 	bl	950 <Pwm_schm_read_msr>
   17534:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17536:	9b00      	ldr	r3, [sp, #0]
   17538:	f003 0301 	and.w	r3, r3, #1
   1753c:	2b00      	cmp	r3, #0
   1753e:	d100      	bne.n	17542 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17540:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_18[u32CoreId] = msr;
   17542:	490a      	ldr	r1, [pc, #40]	; (1756c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x54>)
   17544:	9b01      	ldr	r3, [sp, #4]
   17546:	9a00      	ldr	r2, [sp, #0]
   17548:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId]++;
   1754c:	4a06      	ldr	r2, [pc, #24]	; (17568 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
   1754e:	9b01      	ldr	r3, [sp, #4]
   17550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17554:	1c5a      	adds	r2, r3, #1
   17556:	4904      	ldr	r1, [pc, #16]	; (17568 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_18+0x50>)
   17558:	9b01      	ldr	r3, [sp, #4]
   1755a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1755e:	bf00      	nop
   17560:	b003      	add	sp, #12
   17562:	f85d fb04 	ldr.w	pc, [sp], #4
   17566:	bf00      	nop
   17568:	1fff96c0 	.word	0x1fff96c0
   1756c:	1fff96bc 	.word	0x1fff96bc

00017570 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18(void)
{
   17570:	b500      	push	{lr}
   17572:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17574:	f7ea f9a4 	bl	18c0 <Sys_GetCoreID>
   17578:	4603      	mov	r3, r0
   1757a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId]--;
   1757c:	4a0d      	ldr	r2, [pc, #52]	; (175b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
   1757e:	9b01      	ldr	r3, [sp, #4]
   17580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17584:	1e5a      	subs	r2, r3, #1
   17586:	490b      	ldr	r1, [pc, #44]	; (175b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
   17588:	9b01      	ldr	r3, [sp, #4]
   1758a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
   1758e:	4a0a      	ldr	r2, [pc, #40]	; (175b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x48>)
   17590:	9b01      	ldr	r3, [sp, #4]
   17592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17596:	f003 0301 	and.w	r3, r3, #1
   1759a:	2b00      	cmp	r3, #0
   1759c:	d106      	bne.n	175ac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x3c>
   1759e:	4a05      	ldr	r2, [pc, #20]	; (175b4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x44>)
   175a0:	9b01      	ldr	r3, [sp, #4]
   175a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   175a6:	2b00      	cmp	r3, #0
   175a8:	d100      	bne.n	175ac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   175aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   175ac:	bf00      	nop
   175ae:	b003      	add	sp, #12
   175b0:	f85d fb04 	ldr.w	pc, [sp], #4
   175b4:	1fff96c0 	.word	0x1fff96c0
   175b8:	1fff96bc 	.word	0x1fff96bc

000175bc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19(void)
{
   175bc:	b500      	push	{lr}
   175be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   175c0:	f7ea f97e 	bl	18c0 <Sys_GetCoreID>
   175c4:	4603      	mov	r3, r0
   175c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId])
   175c8:	4a10      	ldr	r2, [pc, #64]	; (1760c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
   175ca:	9b01      	ldr	r3, [sp, #4]
   175cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   175d0:	2b00      	cmp	r3, #0
   175d2:	d10d      	bne.n	175f0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   175d4:	f7e9 f9bc 	bl	950 <Pwm_schm_read_msr>
   175d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   175da:	9b00      	ldr	r3, [sp, #0]
   175dc:	f003 0301 	and.w	r3, r3, #1
   175e0:	2b00      	cmp	r3, #0
   175e2:	d100      	bne.n	175e6 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   175e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_19[u32CoreId] = msr;
   175e6:	490a      	ldr	r1, [pc, #40]	; (17610 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x54>)
   175e8:	9b01      	ldr	r3, [sp, #4]
   175ea:	9a00      	ldr	r2, [sp, #0]
   175ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId]++;
   175f0:	4a06      	ldr	r2, [pc, #24]	; (1760c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
   175f2:	9b01      	ldr	r3, [sp, #4]
   175f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   175f8:	1c5a      	adds	r2, r3, #1
   175fa:	4904      	ldr	r1, [pc, #16]	; (1760c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_19+0x50>)
   175fc:	9b01      	ldr	r3, [sp, #4]
   175fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17602:	bf00      	nop
   17604:	b003      	add	sp, #12
   17606:	f85d fb04 	ldr.w	pc, [sp], #4
   1760a:	bf00      	nop
   1760c:	1fff96c8 	.word	0x1fff96c8
   17610:	1fff96c4 	.word	0x1fff96c4

00017614 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19(void)
{
   17614:	b500      	push	{lr}
   17616:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17618:	f7ea f952 	bl	18c0 <Sys_GetCoreID>
   1761c:	4603      	mov	r3, r0
   1761e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId]--;
   17620:	4a0d      	ldr	r2, [pc, #52]	; (17658 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
   17622:	9b01      	ldr	r3, [sp, #4]
   17624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17628:	1e5a      	subs	r2, r3, #1
   1762a:	490b      	ldr	r1, [pc, #44]	; (17658 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
   1762c:	9b01      	ldr	r3, [sp, #4]
   1762e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
   17632:	4a0a      	ldr	r2, [pc, #40]	; (1765c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x48>)
   17634:	9b01      	ldr	r3, [sp, #4]
   17636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1763a:	f003 0301 	and.w	r3, r3, #1
   1763e:	2b00      	cmp	r3, #0
   17640:	d106      	bne.n	17650 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x3c>
   17642:	4a05      	ldr	r2, [pc, #20]	; (17658 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x44>)
   17644:	9b01      	ldr	r3, [sp, #4]
   17646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1764a:	2b00      	cmp	r3, #0
   1764c:	d100      	bne.n	17650 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1764e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17650:	bf00      	nop
   17652:	b003      	add	sp, #12
   17654:	f85d fb04 	ldr.w	pc, [sp], #4
   17658:	1fff96c8 	.word	0x1fff96c8
   1765c:	1fff96c4 	.word	0x1fff96c4

00017660 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20(void)
{
   17660:	b500      	push	{lr}
   17662:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17664:	f7ea f92c 	bl	18c0 <Sys_GetCoreID>
   17668:	4603      	mov	r3, r0
   1766a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId])
   1766c:	4a10      	ldr	r2, [pc, #64]	; (176b0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
   1766e:	9b01      	ldr	r3, [sp, #4]
   17670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17674:	2b00      	cmp	r3, #0
   17676:	d10d      	bne.n	17694 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17678:	f7e9 f96a 	bl	950 <Pwm_schm_read_msr>
   1767c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1767e:	9b00      	ldr	r3, [sp, #0]
   17680:	f003 0301 	and.w	r3, r3, #1
   17684:	2b00      	cmp	r3, #0
   17686:	d100      	bne.n	1768a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17688:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_20[u32CoreId] = msr;
   1768a:	490a      	ldr	r1, [pc, #40]	; (176b4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x54>)
   1768c:	9b01      	ldr	r3, [sp, #4]
   1768e:	9a00      	ldr	r2, [sp, #0]
   17690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId]++;
   17694:	4a06      	ldr	r2, [pc, #24]	; (176b0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
   17696:	9b01      	ldr	r3, [sp, #4]
   17698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1769c:	1c5a      	adds	r2, r3, #1
   1769e:	4904      	ldr	r1, [pc, #16]	; (176b0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_20+0x50>)
   176a0:	9b01      	ldr	r3, [sp, #4]
   176a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   176a6:	bf00      	nop
   176a8:	b003      	add	sp, #12
   176aa:	f85d fb04 	ldr.w	pc, [sp], #4
   176ae:	bf00      	nop
   176b0:	1fff96d0 	.word	0x1fff96d0
   176b4:	1fff96cc 	.word	0x1fff96cc

000176b8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20(void)
{
   176b8:	b500      	push	{lr}
   176ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   176bc:	f7ea f900 	bl	18c0 <Sys_GetCoreID>
   176c0:	4603      	mov	r3, r0
   176c2:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId]--;
   176c4:	4a0d      	ldr	r2, [pc, #52]	; (176fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
   176c6:	9b01      	ldr	r3, [sp, #4]
   176c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   176cc:	1e5a      	subs	r2, r3, #1
   176ce:	490b      	ldr	r1, [pc, #44]	; (176fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
   176d0:	9b01      	ldr	r3, [sp, #4]
   176d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
   176d6:	4a0a      	ldr	r2, [pc, #40]	; (17700 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x48>)
   176d8:	9b01      	ldr	r3, [sp, #4]
   176da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   176de:	f003 0301 	and.w	r3, r3, #1
   176e2:	2b00      	cmp	r3, #0
   176e4:	d106      	bne.n	176f4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x3c>
   176e6:	4a05      	ldr	r2, [pc, #20]	; (176fc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x44>)
   176e8:	9b01      	ldr	r3, [sp, #4]
   176ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   176ee:	2b00      	cmp	r3, #0
   176f0:	d100      	bne.n	176f4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   176f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   176f4:	bf00      	nop
   176f6:	b003      	add	sp, #12
   176f8:	f85d fb04 	ldr.w	pc, [sp], #4
   176fc:	1fff96d0 	.word	0x1fff96d0
   17700:	1fff96cc 	.word	0x1fff96cc

00017704 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21(void)
{
   17704:	b500      	push	{lr}
   17706:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17708:	f7ea f8da 	bl	18c0 <Sys_GetCoreID>
   1770c:	4603      	mov	r3, r0
   1770e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId])
   17710:	4a10      	ldr	r2, [pc, #64]	; (17754 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
   17712:	9b01      	ldr	r3, [sp, #4]
   17714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17718:	2b00      	cmp	r3, #0
   1771a:	d10d      	bne.n	17738 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   1771c:	f7e9 f918 	bl	950 <Pwm_schm_read_msr>
   17720:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17722:	9b00      	ldr	r3, [sp, #0]
   17724:	f003 0301 	and.w	r3, r3, #1
   17728:	2b00      	cmp	r3, #0
   1772a:	d100      	bne.n	1772e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   1772c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_21[u32CoreId] = msr;
   1772e:	490a      	ldr	r1, [pc, #40]	; (17758 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x54>)
   17730:	9b01      	ldr	r3, [sp, #4]
   17732:	9a00      	ldr	r2, [sp, #0]
   17734:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId]++;
   17738:	4a06      	ldr	r2, [pc, #24]	; (17754 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
   1773a:	9b01      	ldr	r3, [sp, #4]
   1773c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17740:	1c5a      	adds	r2, r3, #1
   17742:	4904      	ldr	r1, [pc, #16]	; (17754 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_21+0x50>)
   17744:	9b01      	ldr	r3, [sp, #4]
   17746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1774a:	bf00      	nop
   1774c:	b003      	add	sp, #12
   1774e:	f85d fb04 	ldr.w	pc, [sp], #4
   17752:	bf00      	nop
   17754:	1fff96d8 	.word	0x1fff96d8
   17758:	1fff96d4 	.word	0x1fff96d4

0001775c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21(void)
{
   1775c:	b500      	push	{lr}
   1775e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17760:	f7ea f8ae 	bl	18c0 <Sys_GetCoreID>
   17764:	4603      	mov	r3, r0
   17766:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId]--;
   17768:	4a0d      	ldr	r2, [pc, #52]	; (177a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
   1776a:	9b01      	ldr	r3, [sp, #4]
   1776c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17770:	1e5a      	subs	r2, r3, #1
   17772:	490b      	ldr	r1, [pc, #44]	; (177a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
   17774:	9b01      	ldr	r3, [sp, #4]
   17776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
   1777a:	4a0a      	ldr	r2, [pc, #40]	; (177a4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x48>)
   1777c:	9b01      	ldr	r3, [sp, #4]
   1777e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17782:	f003 0301 	and.w	r3, r3, #1
   17786:	2b00      	cmp	r3, #0
   17788:	d106      	bne.n	17798 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x3c>
   1778a:	4a05      	ldr	r2, [pc, #20]	; (177a0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x44>)
   1778c:	9b01      	ldr	r3, [sp, #4]
   1778e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17792:	2b00      	cmp	r3, #0
   17794:	d100      	bne.n	17798 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17796:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17798:	bf00      	nop
   1779a:	b003      	add	sp, #12
   1779c:	f85d fb04 	ldr.w	pc, [sp], #4
   177a0:	1fff96d8 	.word	0x1fff96d8
   177a4:	1fff96d4 	.word	0x1fff96d4

000177a8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22(void)
{
   177a8:	b500      	push	{lr}
   177aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   177ac:	f7ea f888 	bl	18c0 <Sys_GetCoreID>
   177b0:	4603      	mov	r3, r0
   177b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId])
   177b4:	4a10      	ldr	r2, [pc, #64]	; (177f8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
   177b6:	9b01      	ldr	r3, [sp, #4]
   177b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   177bc:	2b00      	cmp	r3, #0
   177be:	d10d      	bne.n	177dc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   177c0:	f7e9 f8c6 	bl	950 <Pwm_schm_read_msr>
   177c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   177c6:	9b00      	ldr	r3, [sp, #0]
   177c8:	f003 0301 	and.w	r3, r3, #1
   177cc:	2b00      	cmp	r3, #0
   177ce:	d100      	bne.n	177d2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   177d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_22[u32CoreId] = msr;
   177d2:	490a      	ldr	r1, [pc, #40]	; (177fc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x54>)
   177d4:	9b01      	ldr	r3, [sp, #4]
   177d6:	9a00      	ldr	r2, [sp, #0]
   177d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId]++;
   177dc:	4a06      	ldr	r2, [pc, #24]	; (177f8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
   177de:	9b01      	ldr	r3, [sp, #4]
   177e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   177e4:	1c5a      	adds	r2, r3, #1
   177e6:	4904      	ldr	r1, [pc, #16]	; (177f8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_22+0x50>)
   177e8:	9b01      	ldr	r3, [sp, #4]
   177ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   177ee:	bf00      	nop
   177f0:	b003      	add	sp, #12
   177f2:	f85d fb04 	ldr.w	pc, [sp], #4
   177f6:	bf00      	nop
   177f8:	1fff96e0 	.word	0x1fff96e0
   177fc:	1fff96dc 	.word	0x1fff96dc

00017800 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22(void)
{
   17800:	b500      	push	{lr}
   17802:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17804:	f7ea f85c 	bl	18c0 <Sys_GetCoreID>
   17808:	4603      	mov	r3, r0
   1780a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId]--;
   1780c:	4a0d      	ldr	r2, [pc, #52]	; (17844 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
   1780e:	9b01      	ldr	r3, [sp, #4]
   17810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17814:	1e5a      	subs	r2, r3, #1
   17816:	490b      	ldr	r1, [pc, #44]	; (17844 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
   17818:	9b01      	ldr	r3, [sp, #4]
   1781a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
   1781e:	4a0a      	ldr	r2, [pc, #40]	; (17848 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x48>)
   17820:	9b01      	ldr	r3, [sp, #4]
   17822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17826:	f003 0301 	and.w	r3, r3, #1
   1782a:	2b00      	cmp	r3, #0
   1782c:	d106      	bne.n	1783c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x3c>
   1782e:	4a05      	ldr	r2, [pc, #20]	; (17844 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x44>)
   17830:	9b01      	ldr	r3, [sp, #4]
   17832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17836:	2b00      	cmp	r3, #0
   17838:	d100      	bne.n	1783c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   1783a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   1783c:	bf00      	nop
   1783e:	b003      	add	sp, #12
   17840:	f85d fb04 	ldr.w	pc, [sp], #4
   17844:	1fff96e0 	.word	0x1fff96e0
   17848:	1fff96dc 	.word	0x1fff96dc

0001784c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23(void)
{
   1784c:	b500      	push	{lr}
   1784e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17850:	f7ea f836 	bl	18c0 <Sys_GetCoreID>
   17854:	4603      	mov	r3, r0
   17856:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId])
   17858:	4a10      	ldr	r2, [pc, #64]	; (1789c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
   1785a:	9b01      	ldr	r3, [sp, #4]
   1785c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17860:	2b00      	cmp	r3, #0
   17862:	d10d      	bne.n	17880 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17864:	f7e9 f874 	bl	950 <Pwm_schm_read_msr>
   17868:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1786a:	9b00      	ldr	r3, [sp, #0]
   1786c:	f003 0301 	and.w	r3, r3, #1
   17870:	2b00      	cmp	r3, #0
   17872:	d100      	bne.n	17876 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17874:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_23[u32CoreId] = msr;
   17876:	490a      	ldr	r1, [pc, #40]	; (178a0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x54>)
   17878:	9b01      	ldr	r3, [sp, #4]
   1787a:	9a00      	ldr	r2, [sp, #0]
   1787c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId]++;
   17880:	4a06      	ldr	r2, [pc, #24]	; (1789c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
   17882:	9b01      	ldr	r3, [sp, #4]
   17884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17888:	1c5a      	adds	r2, r3, #1
   1788a:	4904      	ldr	r1, [pc, #16]	; (1789c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_23+0x50>)
   1788c:	9b01      	ldr	r3, [sp, #4]
   1788e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17892:	bf00      	nop
   17894:	b003      	add	sp, #12
   17896:	f85d fb04 	ldr.w	pc, [sp], #4
   1789a:	bf00      	nop
   1789c:	1fff96e8 	.word	0x1fff96e8
   178a0:	1fff96e4 	.word	0x1fff96e4

000178a4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23(void)
{
   178a4:	b500      	push	{lr}
   178a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   178a8:	f7ea f80a 	bl	18c0 <Sys_GetCoreID>
   178ac:	4603      	mov	r3, r0
   178ae:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId]--;
   178b0:	4a0d      	ldr	r2, [pc, #52]	; (178e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
   178b2:	9b01      	ldr	r3, [sp, #4]
   178b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   178b8:	1e5a      	subs	r2, r3, #1
   178ba:	490b      	ldr	r1, [pc, #44]	; (178e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
   178bc:	9b01      	ldr	r3, [sp, #4]
   178be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
   178c2:	4a0a      	ldr	r2, [pc, #40]	; (178ec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x48>)
   178c4:	9b01      	ldr	r3, [sp, #4]
   178c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   178ca:	f003 0301 	and.w	r3, r3, #1
   178ce:	2b00      	cmp	r3, #0
   178d0:	d106      	bne.n	178e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x3c>
   178d2:	4a05      	ldr	r2, [pc, #20]	; (178e8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x44>)
   178d4:	9b01      	ldr	r3, [sp, #4]
   178d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   178da:	2b00      	cmp	r3, #0
   178dc:	d100      	bne.n	178e0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   178de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   178e0:	bf00      	nop
   178e2:	b003      	add	sp, #12
   178e4:	f85d fb04 	ldr.w	pc, [sp], #4
   178e8:	1fff96e8 	.word	0x1fff96e8
   178ec:	1fff96e4 	.word	0x1fff96e4

000178f0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24(void)
{
   178f0:	b500      	push	{lr}
   178f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   178f4:	f7e9 ffe4 	bl	18c0 <Sys_GetCoreID>
   178f8:	4603      	mov	r3, r0
   178fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId])
   178fc:	4a10      	ldr	r2, [pc, #64]	; (17940 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
   178fe:	9b01      	ldr	r3, [sp, #4]
   17900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17904:	2b00      	cmp	r3, #0
   17906:	d10d      	bne.n	17924 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17908:	f7e9 f822 	bl	950 <Pwm_schm_read_msr>
   1790c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   1790e:	9b00      	ldr	r3, [sp, #0]
   17910:	f003 0301 	and.w	r3, r3, #1
   17914:	2b00      	cmp	r3, #0
   17916:	d100      	bne.n	1791a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17918:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_24[u32CoreId] = msr;
   1791a:	490a      	ldr	r1, [pc, #40]	; (17944 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x54>)
   1791c:	9b01      	ldr	r3, [sp, #4]
   1791e:	9a00      	ldr	r2, [sp, #0]
   17920:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId]++;
   17924:	4a06      	ldr	r2, [pc, #24]	; (17940 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
   17926:	9b01      	ldr	r3, [sp, #4]
   17928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1792c:	1c5a      	adds	r2, r3, #1
   1792e:	4904      	ldr	r1, [pc, #16]	; (17940 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_24+0x50>)
   17930:	9b01      	ldr	r3, [sp, #4]
   17932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17936:	bf00      	nop
   17938:	b003      	add	sp, #12
   1793a:	f85d fb04 	ldr.w	pc, [sp], #4
   1793e:	bf00      	nop
   17940:	1fff96f0 	.word	0x1fff96f0
   17944:	1fff96ec 	.word	0x1fff96ec

00017948 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24(void)
{
   17948:	b500      	push	{lr}
   1794a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   1794c:	f7e9 ffb8 	bl	18c0 <Sys_GetCoreID>
   17950:	4603      	mov	r3, r0
   17952:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId]--;
   17954:	4a0d      	ldr	r2, [pc, #52]	; (1798c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
   17956:	9b01      	ldr	r3, [sp, #4]
   17958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1795c:	1e5a      	subs	r2, r3, #1
   1795e:	490b      	ldr	r1, [pc, #44]	; (1798c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
   17960:	9b01      	ldr	r3, [sp, #4]
   17962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
   17966:	4a0a      	ldr	r2, [pc, #40]	; (17990 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x48>)
   17968:	9b01      	ldr	r3, [sp, #4]
   1796a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1796e:	f003 0301 	and.w	r3, r3, #1
   17972:	2b00      	cmp	r3, #0
   17974:	d106      	bne.n	17984 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x3c>
   17976:	4a05      	ldr	r2, [pc, #20]	; (1798c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x44>)
   17978:	9b01      	ldr	r3, [sp, #4]
   1797a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1797e:	2b00      	cmp	r3, #0
   17980:	d100      	bne.n	17984 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17982:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17984:	bf00      	nop
   17986:	b003      	add	sp, #12
   17988:	f85d fb04 	ldr.w	pc, [sp], #4
   1798c:	1fff96f0 	.word	0x1fff96f0
   17990:	1fff96ec 	.word	0x1fff96ec

00017994 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25(void)
{
   17994:	b500      	push	{lr}
   17996:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17998:	f7e9 ff92 	bl	18c0 <Sys_GetCoreID>
   1799c:	4603      	mov	r3, r0
   1799e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId])
   179a0:	4a10      	ldr	r2, [pc, #64]	; (179e4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
   179a2:	9b01      	ldr	r3, [sp, #4]
   179a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   179a8:	2b00      	cmp	r3, #0
   179aa:	d10d      	bne.n	179c8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   179ac:	f7e8 ffd0 	bl	950 <Pwm_schm_read_msr>
   179b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   179b2:	9b00      	ldr	r3, [sp, #0]
   179b4:	f003 0301 	and.w	r3, r3, #1
   179b8:	2b00      	cmp	r3, #0
   179ba:	d100      	bne.n	179be <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   179bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_25[u32CoreId] = msr;
   179be:	490a      	ldr	r1, [pc, #40]	; (179e8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x54>)
   179c0:	9b01      	ldr	r3, [sp, #4]
   179c2:	9a00      	ldr	r2, [sp, #0]
   179c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId]++;
   179c8:	4a06      	ldr	r2, [pc, #24]	; (179e4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
   179ca:	9b01      	ldr	r3, [sp, #4]
   179cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   179d0:	1c5a      	adds	r2, r3, #1
   179d2:	4904      	ldr	r1, [pc, #16]	; (179e4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_25+0x50>)
   179d4:	9b01      	ldr	r3, [sp, #4]
   179d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   179da:	bf00      	nop
   179dc:	b003      	add	sp, #12
   179de:	f85d fb04 	ldr.w	pc, [sp], #4
   179e2:	bf00      	nop
   179e4:	1fff96f8 	.word	0x1fff96f8
   179e8:	1fff96f4 	.word	0x1fff96f4

000179ec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25(void)
{
   179ec:	b500      	push	{lr}
   179ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   179f0:	f7e9 ff66 	bl	18c0 <Sys_GetCoreID>
   179f4:	4603      	mov	r3, r0
   179f6:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId]--;
   179f8:	4a0d      	ldr	r2, [pc, #52]	; (17a30 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
   179fa:	9b01      	ldr	r3, [sp, #4]
   179fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17a00:	1e5a      	subs	r2, r3, #1
   17a02:	490b      	ldr	r1, [pc, #44]	; (17a30 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
   17a04:	9b01      	ldr	r3, [sp, #4]
   17a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
   17a0a:	4a0a      	ldr	r2, [pc, #40]	; (17a34 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x48>)
   17a0c:	9b01      	ldr	r3, [sp, #4]
   17a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17a12:	f003 0301 	and.w	r3, r3, #1
   17a16:	2b00      	cmp	r3, #0
   17a18:	d106      	bne.n	17a28 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x3c>
   17a1a:	4a05      	ldr	r2, [pc, #20]	; (17a30 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x44>)
   17a1c:	9b01      	ldr	r3, [sp, #4]
   17a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17a22:	2b00      	cmp	r3, #0
   17a24:	d100      	bne.n	17a28 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17a26:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17a28:	bf00      	nop
   17a2a:	b003      	add	sp, #12
   17a2c:	f85d fb04 	ldr.w	pc, [sp], #4
   17a30:	1fff96f8 	.word	0x1fff96f8
   17a34:	1fff96f4 	.word	0x1fff96f4

00017a38 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26(void)
{
   17a38:	b500      	push	{lr}
   17a3a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17a3c:	f7e9 ff40 	bl	18c0 <Sys_GetCoreID>
   17a40:	4603      	mov	r3, r0
   17a42:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId])
   17a44:	4a10      	ldr	r2, [pc, #64]	; (17a88 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
   17a46:	9b01      	ldr	r3, [sp, #4]
   17a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17a4c:	2b00      	cmp	r3, #0
   17a4e:	d10d      	bne.n	17a6c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17a50:	f7e8 ff7e 	bl	950 <Pwm_schm_read_msr>
   17a54:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17a56:	9b00      	ldr	r3, [sp, #0]
   17a58:	f003 0301 	and.w	r3, r3, #1
   17a5c:	2b00      	cmp	r3, #0
   17a5e:	d100      	bne.n	17a62 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17a60:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_26[u32CoreId] = msr;
   17a62:	490a      	ldr	r1, [pc, #40]	; (17a8c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x54>)
   17a64:	9b01      	ldr	r3, [sp, #4]
   17a66:	9a00      	ldr	r2, [sp, #0]
   17a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId]++;
   17a6c:	4a06      	ldr	r2, [pc, #24]	; (17a88 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
   17a6e:	9b01      	ldr	r3, [sp, #4]
   17a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17a74:	1c5a      	adds	r2, r3, #1
   17a76:	4904      	ldr	r1, [pc, #16]	; (17a88 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_26+0x50>)
   17a78:	9b01      	ldr	r3, [sp, #4]
   17a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17a7e:	bf00      	nop
   17a80:	b003      	add	sp, #12
   17a82:	f85d fb04 	ldr.w	pc, [sp], #4
   17a86:	bf00      	nop
   17a88:	1fff9700 	.word	0x1fff9700
   17a8c:	1fff96fc 	.word	0x1fff96fc

00017a90 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26(void)
{
   17a90:	b500      	push	{lr}
   17a92:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17a94:	f7e9 ff14 	bl	18c0 <Sys_GetCoreID>
   17a98:	4603      	mov	r3, r0
   17a9a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId]--;
   17a9c:	4a0d      	ldr	r2, [pc, #52]	; (17ad4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
   17a9e:	9b01      	ldr	r3, [sp, #4]
   17aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17aa4:	1e5a      	subs	r2, r3, #1
   17aa6:	490b      	ldr	r1, [pc, #44]	; (17ad4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
   17aa8:	9b01      	ldr	r3, [sp, #4]
   17aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
   17aae:	4a0a      	ldr	r2, [pc, #40]	; (17ad8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x48>)
   17ab0:	9b01      	ldr	r3, [sp, #4]
   17ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17ab6:	f003 0301 	and.w	r3, r3, #1
   17aba:	2b00      	cmp	r3, #0
   17abc:	d106      	bne.n	17acc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x3c>
   17abe:	4a05      	ldr	r2, [pc, #20]	; (17ad4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x44>)
   17ac0:	9b01      	ldr	r3, [sp, #4]
   17ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17ac6:	2b00      	cmp	r3, #0
   17ac8:	d100      	bne.n	17acc <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17aca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17acc:	bf00      	nop
   17ace:	b003      	add	sp, #12
   17ad0:	f85d fb04 	ldr.w	pc, [sp], #4
   17ad4:	1fff9700 	.word	0x1fff9700
   17ad8:	1fff96fc 	.word	0x1fff96fc

00017adc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27(void)
{
   17adc:	b500      	push	{lr}
   17ade:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17ae0:	f7e9 feee 	bl	18c0 <Sys_GetCoreID>
   17ae4:	4603      	mov	r3, r0
   17ae6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId])
   17ae8:	4a10      	ldr	r2, [pc, #64]	; (17b2c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
   17aea:	9b01      	ldr	r3, [sp, #4]
   17aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17af0:	2b00      	cmp	r3, #0
   17af2:	d10d      	bne.n	17b10 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17af4:	f7e8 ff2c 	bl	950 <Pwm_schm_read_msr>
   17af8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17afa:	9b00      	ldr	r3, [sp, #0]
   17afc:	f003 0301 	and.w	r3, r3, #1
   17b00:	2b00      	cmp	r3, #0
   17b02:	d100      	bne.n	17b06 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17b04:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_27[u32CoreId] = msr;
   17b06:	490a      	ldr	r1, [pc, #40]	; (17b30 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x54>)
   17b08:	9b01      	ldr	r3, [sp, #4]
   17b0a:	9a00      	ldr	r2, [sp, #0]
   17b0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId]++;
   17b10:	4a06      	ldr	r2, [pc, #24]	; (17b2c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
   17b12:	9b01      	ldr	r3, [sp, #4]
   17b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17b18:	1c5a      	adds	r2, r3, #1
   17b1a:	4904      	ldr	r1, [pc, #16]	; (17b2c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_27+0x50>)
   17b1c:	9b01      	ldr	r3, [sp, #4]
   17b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17b22:	bf00      	nop
   17b24:	b003      	add	sp, #12
   17b26:	f85d fb04 	ldr.w	pc, [sp], #4
   17b2a:	bf00      	nop
   17b2c:	1fff9708 	.word	0x1fff9708
   17b30:	1fff9704 	.word	0x1fff9704

00017b34 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27(void)
{
   17b34:	b500      	push	{lr}
   17b36:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17b38:	f7e9 fec2 	bl	18c0 <Sys_GetCoreID>
   17b3c:	4603      	mov	r3, r0
   17b3e:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId]--;
   17b40:	4a0d      	ldr	r2, [pc, #52]	; (17b78 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
   17b42:	9b01      	ldr	r3, [sp, #4]
   17b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17b48:	1e5a      	subs	r2, r3, #1
   17b4a:	490b      	ldr	r1, [pc, #44]	; (17b78 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
   17b4c:	9b01      	ldr	r3, [sp, #4]
   17b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
   17b52:	4a0a      	ldr	r2, [pc, #40]	; (17b7c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x48>)
   17b54:	9b01      	ldr	r3, [sp, #4]
   17b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17b5a:	f003 0301 	and.w	r3, r3, #1
   17b5e:	2b00      	cmp	r3, #0
   17b60:	d106      	bne.n	17b70 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x3c>
   17b62:	4a05      	ldr	r2, [pc, #20]	; (17b78 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x44>)
   17b64:	9b01      	ldr	r3, [sp, #4]
   17b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17b6a:	2b00      	cmp	r3, #0
   17b6c:	d100      	bne.n	17b70 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17b6e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17b70:	bf00      	nop
   17b72:	b003      	add	sp, #12
   17b74:	f85d fb04 	ldr.w	pc, [sp], #4
   17b78:	1fff9708 	.word	0x1fff9708
   17b7c:	1fff9704 	.word	0x1fff9704

00017b80 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28(void)
{
   17b80:	b500      	push	{lr}
   17b82:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17b84:	f7e9 fe9c 	bl	18c0 <Sys_GetCoreID>
   17b88:	4603      	mov	r3, r0
   17b8a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId])
   17b8c:	4a10      	ldr	r2, [pc, #64]	; (17bd0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
   17b8e:	9b01      	ldr	r3, [sp, #4]
   17b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17b94:	2b00      	cmp	r3, #0
   17b96:	d10d      	bne.n	17bb4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17b98:	f7e8 feda 	bl	950 <Pwm_schm_read_msr>
   17b9c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17b9e:	9b00      	ldr	r3, [sp, #0]
   17ba0:	f003 0301 	and.w	r3, r3, #1
   17ba4:	2b00      	cmp	r3, #0
   17ba6:	d100      	bne.n	17baa <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17ba8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_28[u32CoreId] = msr;
   17baa:	490a      	ldr	r1, [pc, #40]	; (17bd4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x54>)
   17bac:	9b01      	ldr	r3, [sp, #4]
   17bae:	9a00      	ldr	r2, [sp, #0]
   17bb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId]++;
   17bb4:	4a06      	ldr	r2, [pc, #24]	; (17bd0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
   17bb6:	9b01      	ldr	r3, [sp, #4]
   17bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17bbc:	1c5a      	adds	r2, r3, #1
   17bbe:	4904      	ldr	r1, [pc, #16]	; (17bd0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_28+0x50>)
   17bc0:	9b01      	ldr	r3, [sp, #4]
   17bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17bc6:	bf00      	nop
   17bc8:	b003      	add	sp, #12
   17bca:	f85d fb04 	ldr.w	pc, [sp], #4
   17bce:	bf00      	nop
   17bd0:	1fff9710 	.word	0x1fff9710
   17bd4:	1fff970c 	.word	0x1fff970c

00017bd8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28(void)
{
   17bd8:	b500      	push	{lr}
   17bda:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17bdc:	f7e9 fe70 	bl	18c0 <Sys_GetCoreID>
   17be0:	4603      	mov	r3, r0
   17be2:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId]--;
   17be4:	4a0d      	ldr	r2, [pc, #52]	; (17c1c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
   17be6:	9b01      	ldr	r3, [sp, #4]
   17be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17bec:	1e5a      	subs	r2, r3, #1
   17bee:	490b      	ldr	r1, [pc, #44]	; (17c1c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
   17bf0:	9b01      	ldr	r3, [sp, #4]
   17bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_28[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_28[u32CoreId]))         /*if interrupts were enabled*/
   17bf6:	4a0a      	ldr	r2, [pc, #40]	; (17c20 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x48>)
   17bf8:	9b01      	ldr	r3, [sp, #4]
   17bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17bfe:	f003 0301 	and.w	r3, r3, #1
   17c02:	2b00      	cmp	r3, #0
   17c04:	d106      	bne.n	17c14 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x3c>
   17c06:	4a05      	ldr	r2, [pc, #20]	; (17c1c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x44>)
   17c08:	9b01      	ldr	r3, [sp, #4]
   17c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17c0e:	2b00      	cmp	r3, #0
   17c10:	d100      	bne.n	17c14 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_28+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17c12:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17c14:	bf00      	nop
   17c16:	b003      	add	sp, #12
   17c18:	f85d fb04 	ldr.w	pc, [sp], #4
   17c1c:	1fff9710 	.word	0x1fff9710
   17c20:	1fff970c 	.word	0x1fff970c

00017c24 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29(void)
{
   17c24:	b500      	push	{lr}
   17c26:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17c28:	f7e9 fe4a 	bl	18c0 <Sys_GetCoreID>
   17c2c:	4603      	mov	r3, r0
   17c2e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId])
   17c30:	4a10      	ldr	r2, [pc, #64]	; (17c74 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
   17c32:	9b01      	ldr	r3, [sp, #4]
   17c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17c38:	2b00      	cmp	r3, #0
   17c3a:	d10d      	bne.n	17c58 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17c3c:	f7e8 fe88 	bl	950 <Pwm_schm_read_msr>
   17c40:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17c42:	9b00      	ldr	r3, [sp, #0]
   17c44:	f003 0301 	and.w	r3, r3, #1
   17c48:	2b00      	cmp	r3, #0
   17c4a:	d100      	bne.n	17c4e <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17c4c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_29[u32CoreId] = msr;
   17c4e:	490a      	ldr	r1, [pc, #40]	; (17c78 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x54>)
   17c50:	9b01      	ldr	r3, [sp, #4]
   17c52:	9a00      	ldr	r2, [sp, #0]
   17c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId]++;
   17c58:	4a06      	ldr	r2, [pc, #24]	; (17c74 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
   17c5a:	9b01      	ldr	r3, [sp, #4]
   17c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17c60:	1c5a      	adds	r2, r3, #1
   17c62:	4904      	ldr	r1, [pc, #16]	; (17c74 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_29+0x50>)
   17c64:	9b01      	ldr	r3, [sp, #4]
   17c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17c6a:	bf00      	nop
   17c6c:	b003      	add	sp, #12
   17c6e:	f85d fb04 	ldr.w	pc, [sp], #4
   17c72:	bf00      	nop
   17c74:	1fff9718 	.word	0x1fff9718
   17c78:	1fff9714 	.word	0x1fff9714

00017c7c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29(void)
{
   17c7c:	b500      	push	{lr}
   17c7e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17c80:	f7e9 fe1e 	bl	18c0 <Sys_GetCoreID>
   17c84:	4603      	mov	r3, r0
   17c86:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId]--;
   17c88:	4a0d      	ldr	r2, [pc, #52]	; (17cc0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
   17c8a:	9b01      	ldr	r3, [sp, #4]
   17c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17c90:	1e5a      	subs	r2, r3, #1
   17c92:	490b      	ldr	r1, [pc, #44]	; (17cc0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
   17c94:	9b01      	ldr	r3, [sp, #4]
   17c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_29[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_29[u32CoreId]))         /*if interrupts were enabled*/
   17c9a:	4a0a      	ldr	r2, [pc, #40]	; (17cc4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x48>)
   17c9c:	9b01      	ldr	r3, [sp, #4]
   17c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17ca2:	f003 0301 	and.w	r3, r3, #1
   17ca6:	2b00      	cmp	r3, #0
   17ca8:	d106      	bne.n	17cb8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x3c>
   17caa:	4a05      	ldr	r2, [pc, #20]	; (17cc0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x44>)
   17cac:	9b01      	ldr	r3, [sp, #4]
   17cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17cb2:	2b00      	cmp	r3, #0
   17cb4:	d100      	bne.n	17cb8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_29+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17cb6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17cb8:	bf00      	nop
   17cba:	b003      	add	sp, #12
   17cbc:	f85d fb04 	ldr.w	pc, [sp], #4
   17cc0:	1fff9718 	.word	0x1fff9718
   17cc4:	1fff9714 	.word	0x1fff9714

00017cc8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30(void)
{
   17cc8:	b500      	push	{lr}
   17cca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17ccc:	f7e9 fdf8 	bl	18c0 <Sys_GetCoreID>
   17cd0:	4603      	mov	r3, r0
   17cd2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId])
   17cd4:	4a10      	ldr	r2, [pc, #64]	; (17d18 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
   17cd6:	9b01      	ldr	r3, [sp, #4]
   17cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17cdc:	2b00      	cmp	r3, #0
   17cde:	d10d      	bne.n	17cfc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17ce0:	f7e8 fe36 	bl	950 <Pwm_schm_read_msr>
   17ce4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17ce6:	9b00      	ldr	r3, [sp, #0]
   17ce8:	f003 0301 	and.w	r3, r3, #1
   17cec:	2b00      	cmp	r3, #0
   17cee:	d100      	bne.n	17cf2 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17cf0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_30[u32CoreId] = msr;
   17cf2:	490a      	ldr	r1, [pc, #40]	; (17d1c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x54>)
   17cf4:	9b01      	ldr	r3, [sp, #4]
   17cf6:	9a00      	ldr	r2, [sp, #0]
   17cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId]++;
   17cfc:	4a06      	ldr	r2, [pc, #24]	; (17d18 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
   17cfe:	9b01      	ldr	r3, [sp, #4]
   17d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17d04:	1c5a      	adds	r2, r3, #1
   17d06:	4904      	ldr	r1, [pc, #16]	; (17d18 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_30+0x50>)
   17d08:	9b01      	ldr	r3, [sp, #4]
   17d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17d0e:	bf00      	nop
   17d10:	b003      	add	sp, #12
   17d12:	f85d fb04 	ldr.w	pc, [sp], #4
   17d16:	bf00      	nop
   17d18:	1fff9720 	.word	0x1fff9720
   17d1c:	1fff971c 	.word	0x1fff971c

00017d20 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30(void)
{
   17d20:	b500      	push	{lr}
   17d22:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17d24:	f7e9 fdcc 	bl	18c0 <Sys_GetCoreID>
   17d28:	4603      	mov	r3, r0
   17d2a:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId]--;
   17d2c:	4a0d      	ldr	r2, [pc, #52]	; (17d64 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
   17d2e:	9b01      	ldr	r3, [sp, #4]
   17d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17d34:	1e5a      	subs	r2, r3, #1
   17d36:	490b      	ldr	r1, [pc, #44]	; (17d64 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
   17d38:	9b01      	ldr	r3, [sp, #4]
   17d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_30[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_30[u32CoreId]))         /*if interrupts were enabled*/
   17d3e:	4a0a      	ldr	r2, [pc, #40]	; (17d68 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x48>)
   17d40:	9b01      	ldr	r3, [sp, #4]
   17d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17d46:	f003 0301 	and.w	r3, r3, #1
   17d4a:	2b00      	cmp	r3, #0
   17d4c:	d106      	bne.n	17d5c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x3c>
   17d4e:	4a05      	ldr	r2, [pc, #20]	; (17d64 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x44>)
   17d50:	9b01      	ldr	r3, [sp, #4]
   17d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17d56:	2b00      	cmp	r3, #0
   17d58:	d100      	bne.n	17d5c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_30+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17d5a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17d5c:	bf00      	nop
   17d5e:	b003      	add	sp, #12
   17d60:	f85d fb04 	ldr.w	pc, [sp], #4
   17d64:	1fff9720 	.word	0x1fff9720
   17d68:	1fff971c 	.word	0x1fff971c

00017d6c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31(void)
{
   17d6c:	b500      	push	{lr}
   17d6e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17d70:	f7e9 fda6 	bl	18c0 <Sys_GetCoreID>
   17d74:	4603      	mov	r3, r0
   17d76:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId])
   17d78:	4a10      	ldr	r2, [pc, #64]	; (17dbc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
   17d7a:	9b01      	ldr	r3, [sp, #4]
   17d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17d80:	2b00      	cmp	r3, #0
   17d82:	d10d      	bne.n	17da0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17d84:	f7e8 fde4 	bl	950 <Pwm_schm_read_msr>
   17d88:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17d8a:	9b00      	ldr	r3, [sp, #0]
   17d8c:	f003 0301 	and.w	r3, r3, #1
   17d90:	2b00      	cmp	r3, #0
   17d92:	d100      	bne.n	17d96 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17d94:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_31[u32CoreId] = msr;
   17d96:	490a      	ldr	r1, [pc, #40]	; (17dc0 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x54>)
   17d98:	9b01      	ldr	r3, [sp, #4]
   17d9a:	9a00      	ldr	r2, [sp, #0]
   17d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId]++;
   17da0:	4a06      	ldr	r2, [pc, #24]	; (17dbc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
   17da2:	9b01      	ldr	r3, [sp, #4]
   17da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17da8:	1c5a      	adds	r2, r3, #1
   17daa:	4904      	ldr	r1, [pc, #16]	; (17dbc <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_31+0x50>)
   17dac:	9b01      	ldr	r3, [sp, #4]
   17dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17db2:	bf00      	nop
   17db4:	b003      	add	sp, #12
   17db6:	f85d fb04 	ldr.w	pc, [sp], #4
   17dba:	bf00      	nop
   17dbc:	1fff9728 	.word	0x1fff9728
   17dc0:	1fff9724 	.word	0x1fff9724

00017dc4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31(void)
{
   17dc4:	b500      	push	{lr}
   17dc6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17dc8:	f7e9 fd7a 	bl	18c0 <Sys_GetCoreID>
   17dcc:	4603      	mov	r3, r0
   17dce:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId]--;
   17dd0:	4a0d      	ldr	r2, [pc, #52]	; (17e08 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
   17dd2:	9b01      	ldr	r3, [sp, #4]
   17dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17dd8:	1e5a      	subs	r2, r3, #1
   17dda:	490b      	ldr	r1, [pc, #44]	; (17e08 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
   17ddc:	9b01      	ldr	r3, [sp, #4]
   17dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_31[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_31[u32CoreId]))         /*if interrupts were enabled*/
   17de2:	4a0a      	ldr	r2, [pc, #40]	; (17e0c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x48>)
   17de4:	9b01      	ldr	r3, [sp, #4]
   17de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17dea:	f003 0301 	and.w	r3, r3, #1
   17dee:	2b00      	cmp	r3, #0
   17df0:	d106      	bne.n	17e00 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x3c>
   17df2:	4a05      	ldr	r2, [pc, #20]	; (17e08 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x44>)
   17df4:	9b01      	ldr	r3, [sp, #4]
   17df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17dfa:	2b00      	cmp	r3, #0
   17dfc:	d100      	bne.n	17e00 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_31+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17dfe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17e00:	bf00      	nop
   17e02:	b003      	add	sp, #12
   17e04:	f85d fb04 	ldr.w	pc, [sp], #4
   17e08:	1fff9728 	.word	0x1fff9728
   17e0c:	1fff9724 	.word	0x1fff9724

00017e10 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32(void)
{
   17e10:	b500      	push	{lr}
   17e12:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17e14:	f7e9 fd54 	bl	18c0 <Sys_GetCoreID>
   17e18:	4603      	mov	r3, r0
   17e1a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId])
   17e1c:	4a10      	ldr	r2, [pc, #64]	; (17e60 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
   17e1e:	9b01      	ldr	r3, [sp, #4]
   17e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17e24:	2b00      	cmp	r3, #0
   17e26:	d10d      	bne.n	17e44 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17e28:	f7e8 fd92 	bl	950 <Pwm_schm_read_msr>
   17e2c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17e2e:	9b00      	ldr	r3, [sp, #0]
   17e30:	f003 0301 	and.w	r3, r3, #1
   17e34:	2b00      	cmp	r3, #0
   17e36:	d100      	bne.n	17e3a <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17e38:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_32[u32CoreId] = msr;
   17e3a:	490a      	ldr	r1, [pc, #40]	; (17e64 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x54>)
   17e3c:	9b01      	ldr	r3, [sp, #4]
   17e3e:	9a00      	ldr	r2, [sp, #0]
   17e40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId]++;
   17e44:	4a06      	ldr	r2, [pc, #24]	; (17e60 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
   17e46:	9b01      	ldr	r3, [sp, #4]
   17e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17e4c:	1c5a      	adds	r2, r3, #1
   17e4e:	4904      	ldr	r1, [pc, #16]	; (17e60 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_32+0x50>)
   17e50:	9b01      	ldr	r3, [sp, #4]
   17e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17e56:	bf00      	nop
   17e58:	b003      	add	sp, #12
   17e5a:	f85d fb04 	ldr.w	pc, [sp], #4
   17e5e:	bf00      	nop
   17e60:	1fff9730 	.word	0x1fff9730
   17e64:	1fff972c 	.word	0x1fff972c

00017e68 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32(void)
{
   17e68:	b500      	push	{lr}
   17e6a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17e6c:	f7e9 fd28 	bl	18c0 <Sys_GetCoreID>
   17e70:	4603      	mov	r3, r0
   17e72:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId]--;
   17e74:	4a0d      	ldr	r2, [pc, #52]	; (17eac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
   17e76:	9b01      	ldr	r3, [sp, #4]
   17e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17e7c:	1e5a      	subs	r2, r3, #1
   17e7e:	490b      	ldr	r1, [pc, #44]	; (17eac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
   17e80:	9b01      	ldr	r3, [sp, #4]
   17e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_32[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_32[u32CoreId]))         /*if interrupts were enabled*/
   17e86:	4a0a      	ldr	r2, [pc, #40]	; (17eb0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x48>)
   17e88:	9b01      	ldr	r3, [sp, #4]
   17e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17e8e:	f003 0301 	and.w	r3, r3, #1
   17e92:	2b00      	cmp	r3, #0
   17e94:	d106      	bne.n	17ea4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x3c>
   17e96:	4a05      	ldr	r2, [pc, #20]	; (17eac <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x44>)
   17e98:	9b01      	ldr	r3, [sp, #4]
   17e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17e9e:	2b00      	cmp	r3, #0
   17ea0:	d100      	bne.n	17ea4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_32+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17ea2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17ea4:	bf00      	nop
   17ea6:	b003      	add	sp, #12
   17ea8:	f85d fb04 	ldr.w	pc, [sp], #4
   17eac:	1fff9730 	.word	0x1fff9730
   17eb0:	1fff972c 	.word	0x1fff972c

00017eb4 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33(void)
{
   17eb4:	b500      	push	{lr}
   17eb6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17eb8:	f7e9 fd02 	bl	18c0 <Sys_GetCoreID>
   17ebc:	4603      	mov	r3, r0
   17ebe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId])
   17ec0:	4a10      	ldr	r2, [pc, #64]	; (17f04 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
   17ec2:	9b01      	ldr	r3, [sp, #4]
   17ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17ec8:	2b00      	cmp	r3, #0
   17eca:	d10d      	bne.n	17ee8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17ecc:	f7e8 fd40 	bl	950 <Pwm_schm_read_msr>
   17ed0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17ed2:	9b00      	ldr	r3, [sp, #0]
   17ed4:	f003 0301 	and.w	r3, r3, #1
   17ed8:	2b00      	cmp	r3, #0
   17eda:	d100      	bne.n	17ede <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17edc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_33[u32CoreId] = msr;
   17ede:	490a      	ldr	r1, [pc, #40]	; (17f08 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x54>)
   17ee0:	9b01      	ldr	r3, [sp, #4]
   17ee2:	9a00      	ldr	r2, [sp, #0]
   17ee4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId]++;
   17ee8:	4a06      	ldr	r2, [pc, #24]	; (17f04 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
   17eea:	9b01      	ldr	r3, [sp, #4]
   17eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17ef0:	1c5a      	adds	r2, r3, #1
   17ef2:	4904      	ldr	r1, [pc, #16]	; (17f04 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_33+0x50>)
   17ef4:	9b01      	ldr	r3, [sp, #4]
   17ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17efa:	bf00      	nop
   17efc:	b003      	add	sp, #12
   17efe:	f85d fb04 	ldr.w	pc, [sp], #4
   17f02:	bf00      	nop
   17f04:	1fff9738 	.word	0x1fff9738
   17f08:	1fff9734 	.word	0x1fff9734

00017f0c <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33(void)
{
   17f0c:	b500      	push	{lr}
   17f0e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17f10:	f7e9 fcd6 	bl	18c0 <Sys_GetCoreID>
   17f14:	4603      	mov	r3, r0
   17f16:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId]--;
   17f18:	4a0d      	ldr	r2, [pc, #52]	; (17f50 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
   17f1a:	9b01      	ldr	r3, [sp, #4]
   17f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17f20:	1e5a      	subs	r2, r3, #1
   17f22:	490b      	ldr	r1, [pc, #44]	; (17f50 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
   17f24:	9b01      	ldr	r3, [sp, #4]
   17f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_33[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_33[u32CoreId]))         /*if interrupts were enabled*/
   17f2a:	4a0a      	ldr	r2, [pc, #40]	; (17f54 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x48>)
   17f2c:	9b01      	ldr	r3, [sp, #4]
   17f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17f32:	f003 0301 	and.w	r3, r3, #1
   17f36:	2b00      	cmp	r3, #0
   17f38:	d106      	bne.n	17f48 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x3c>
   17f3a:	4a05      	ldr	r2, [pc, #20]	; (17f50 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x44>)
   17f3c:	9b01      	ldr	r3, [sp, #4]
   17f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17f42:	2b00      	cmp	r3, #0
   17f44:	d100      	bne.n	17f48 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_33+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17f46:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17f48:	bf00      	nop
   17f4a:	b003      	add	sp, #12
   17f4c:	f85d fb04 	ldr.w	pc, [sp], #4
   17f50:	1fff9738 	.word	0x1fff9738
   17f54:	1fff9734 	.word	0x1fff9734

00017f58 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34>:

void SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34(void)
{
   17f58:	b500      	push	{lr}
   17f5a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17f5c:	f7e9 fcb0 	bl	18c0 <Sys_GetCoreID>
   17f60:	4603      	mov	r3, r0
   17f62:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId])
   17f64:	4a10      	ldr	r2, [pc, #64]	; (17fa8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
   17f66:	9b01      	ldr	r3, [sp, #4]
   17f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17f6c:	2b00      	cmp	r3, #0
   17f6e:	d10d      	bne.n	17f8c <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Pwm_schm_read_msr);
#else
        msr = Pwm_schm_read_msr();  /*read MSR (to store interrupts state)*/
   17f70:	f7e8 fcee 	bl	950 <Pwm_schm_read_msr>
   17f74:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
   17f76:	9b00      	ldr	r3, [sp, #0]
   17f78:	f003 0301 	and.w	r3, r3, #1
   17f7c:	2b00      	cmp	r3, #0
   17f7e:	d100      	bne.n	17f82 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x2a>
        {
            OsIf_SuspendAllInterrupts();
   17f80:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PWM_EXCLUSIVE_AREA_34[u32CoreId] = msr;
   17f82:	490a      	ldr	r1, [pc, #40]	; (17fac <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x54>)
   17f84:	9b01      	ldr	r3, [sp, #4]
   17f86:	9a00      	ldr	r2, [sp, #0]
   17f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId]++;
   17f8c:	4a06      	ldr	r2, [pc, #24]	; (17fa8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
   17f8e:	9b01      	ldr	r3, [sp, #4]
   17f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17f94:	1c5a      	adds	r2, r3, #1
   17f96:	4904      	ldr	r1, [pc, #16]	; (17fa8 <SchM_Enter_Pwm_PWM_EXCLUSIVE_AREA_34+0x50>)
   17f98:	9b01      	ldr	r3, [sp, #4]
   17f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   17f9e:	bf00      	nop
   17fa0:	b003      	add	sp, #12
   17fa2:	f85d fb04 	ldr.w	pc, [sp], #4
   17fa6:	bf00      	nop
   17fa8:	1fff9740 	.word	0x1fff9740
   17fac:	1fff973c 	.word	0x1fff973c

00017fb0 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34>:

void SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34(void)
{
   17fb0:	b500      	push	{lr}
   17fb2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   17fb4:	f7e9 fc84 	bl	18c0 <Sys_GetCoreID>
   17fb8:	4603      	mov	r3, r0
   17fba:	9301      	str	r3, [sp, #4]

    reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId]--;
   17fbc:	4a0d      	ldr	r2, [pc, #52]	; (17ff4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
   17fbe:	9b01      	ldr	r3, [sp, #4]
   17fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17fc4:	1e5a      	subs	r2, r3, #1
   17fc6:	490b      	ldr	r1, [pc, #44]	; (17ff4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
   17fc8:	9b01      	ldr	r3, [sp, #4]
   17fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PWM_EXCLUSIVE_AREA_34[u32CoreId]))&&(0UL == reentry_guard_PWM_EXCLUSIVE_AREA_34[u32CoreId]))         /*if interrupts were enabled*/
   17fce:	4a0a      	ldr	r2, [pc, #40]	; (17ff8 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x48>)
   17fd0:	9b01      	ldr	r3, [sp, #4]
   17fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17fd6:	f003 0301 	and.w	r3, r3, #1
   17fda:	2b00      	cmp	r3, #0
   17fdc:	d106      	bne.n	17fec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x3c>
   17fde:	4a05      	ldr	r2, [pc, #20]	; (17ff4 <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x44>)
   17fe0:	9b01      	ldr	r3, [sp, #4]
   17fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17fe6:	2b00      	cmp	r3, #0
   17fe8:	d100      	bne.n	17fec <SchM_Exit_Pwm_PWM_EXCLUSIVE_AREA_34+0x3c>
    {
        OsIf_ResumeAllInterrupts();
   17fea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
   17fec:	bf00      	nop
   17fee:	b003      	add	sp, #12
   17ff0:	f85d fb04 	ldr.w	pc, [sp], #4
   17ff4:	1fff9740 	.word	0x1fff9740
   17ff8:	1fff973c 	.word	0x1fff973c

00017ffc <Det_Init>:
*
*/
void Det_Init(void)
{
    /* Do nothing */
}
   17ffc:	bf00      	nop
   17ffe:	4770      	bx	lr

00018000 <Det_GetModuleName>:
 * @brief This function gets the string name corresponding to a module Id.
 * 
 * @param[in] ModuleId Module Id where error was detected.
 * @return StringPtr Pointer to string module name.
 */
char* Det_GetModuleName( uint16 ModuleId ) {
   18000:	b082      	sub	sp, #8
   18002:	4603      	mov	r3, r0
   18004:	f8ad 3006 	strh.w	r3, [sp, #6]
    switch ( ModuleId ) {
   18008:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1800c:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
   18010:	dc7d      	bgt.n	1810e <Det_GetModuleName+0x10e>
   18012:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   18016:	da04      	bge.n	18022 <Det_GetModuleName+0x22>
   18018:	2b7c      	cmp	r3, #124	; 0x7c
   1801a:	dc49      	bgt.n	180b0 <Det_GetModuleName+0xb0>
   1801c:	2b65      	cmp	r3, #101	; 0x65
   1801e:	da11      	bge.n	18044 <Det_GetModuleName+0x44>
        case SCHEDULER_MODULE_ID: ErrorString_Ptr[0] = "Scheduler module"; break;
        case HWIOAB_BUTTONS_MODULE_ID: ErrorString_Ptr[0] = "Buttons IO abstraction module"; break;
        case HWIOAB_LEDS_MODULE_ID: ErrorString_Ptr[0] = "Leds IO abstraction module"; break;
        case HWIOAB_POTS_MODULE_ID: ErrorString_Ptr[0] = "Pots IO abstraction module"; break;
        case HWIOAB_BUZZER_MODULE_ID: ErrorString_Ptr[0] = "Buzzer IO abstraction module"; break;
        default: break;    //Module ID is not used in aplication.
   18020:	e075      	b.n	1810e <Det_GetModuleName+0x10e>
   18022:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
   18026:	2b04      	cmp	r3, #4
   18028:	d871      	bhi.n	1810e <Det_GetModuleName+0x10e>
   1802a:	a201      	add	r2, pc, #4	; (adr r2, 18030 <Det_GetModuleName+0x30>)
   1802c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18030:	000180e7 	.word	0x000180e7
   18034:	000180ef 	.word	0x000180ef
   18038:	000180f7 	.word	0x000180f7
   1803c:	000180ff 	.word	0x000180ff
   18040:	00018107 	.word	0x00018107
   18044:	3b65      	subs	r3, #101	; 0x65
   18046:	2b17      	cmp	r3, #23
   18048:	d861      	bhi.n	1810e <Det_GetModuleName+0x10e>
   1804a:	a201      	add	r2, pc, #4	; (adr r2, 18050 <Det_GetModuleName+0x50>)
   1804c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18050:	000180b7 	.word	0x000180b7
   18054:	0001810f 	.word	0x0001810f
   18058:	0001810f 	.word	0x0001810f
   1805c:	0001810f 	.word	0x0001810f
   18060:	0001810f 	.word	0x0001810f
   18064:	0001810f 	.word	0x0001810f
   18068:	0001810f 	.word	0x0001810f
   1806c:	0001810f 	.word	0x0001810f
   18070:	0001810f 	.word	0x0001810f
   18074:	0001810f 	.word	0x0001810f
   18078:	0001810f 	.word	0x0001810f
   1807c:	0001810f 	.word	0x0001810f
   18080:	0001810f 	.word	0x0001810f
   18084:	0001810f 	.word	0x0001810f
   18088:	0001810f 	.word	0x0001810f
   1808c:	0001810f 	.word	0x0001810f
   18090:	0001810f 	.word	0x0001810f
   18094:	0001810f 	.word	0x0001810f
   18098:	0001810f 	.word	0x0001810f
   1809c:	000180cf 	.word	0x000180cf
   180a0:	000180d7 	.word	0x000180d7
   180a4:	0001810f 	.word	0x0001810f
   180a8:	000180df 	.word	0x000180df
   180ac:	000180c7 	.word	0x000180c7
    switch ( ModuleId ) {
   180b0:	2bff      	cmp	r3, #255	; 0xff
   180b2:	d004      	beq.n	180be <Det_GetModuleName+0xbe>
        default: break;    //Module ID is not used in aplication.
   180b4:	e02b      	b.n	1810e <Det_GetModuleName+0x10e>
        case MCU_MODULE_ID: ErrorString_Ptr[0] = "Mcu module"; break;
   180b6:	4b19      	ldr	r3, [pc, #100]	; (1811c <Det_GetModuleName+0x11c>)
   180b8:	4a19      	ldr	r2, [pc, #100]	; (18120 <Det_GetModuleName+0x120>)
   180ba:	601a      	str	r2, [r3, #0]
   180bc:	e028      	b.n	18110 <Det_GetModuleName+0x110>
        case CDD_PLATFORM_MODULE_ID: ErrorString_Ptr[0] = "Platform module"; break;
   180be:	4b17      	ldr	r3, [pc, #92]	; (1811c <Det_GetModuleName+0x11c>)
   180c0:	4a18      	ldr	r2, [pc, #96]	; (18124 <Det_GetModuleName+0x124>)
   180c2:	601a      	str	r2, [r3, #0]
   180c4:	e024      	b.n	18110 <Det_GetModuleName+0x110>
        case PORT_MODULE_ID: ErrorString_Ptr[0] = "Port module"; break;
   180c6:	4b15      	ldr	r3, [pc, #84]	; (1811c <Det_GetModuleName+0x11c>)
   180c8:	4a17      	ldr	r2, [pc, #92]	; (18128 <Det_GetModuleName+0x128>)
   180ca:	601a      	str	r2, [r3, #0]
   180cc:	e020      	b.n	18110 <Det_GetModuleName+0x110>
        case DIO_MODULE_ID: ErrorString_Ptr[0] = "Dio module"; break;
   180ce:	4b13      	ldr	r3, [pc, #76]	; (1811c <Det_GetModuleName+0x11c>)
   180d0:	4a16      	ldr	r2, [pc, #88]	; (1812c <Det_GetModuleName+0x12c>)
   180d2:	601a      	str	r2, [r3, #0]
   180d4:	e01c      	b.n	18110 <Det_GetModuleName+0x110>
        case PWM_MODULE_ID: ErrorString_Ptr[0] = "Pwm module"; break;
   180d6:	4b11      	ldr	r3, [pc, #68]	; (1811c <Det_GetModuleName+0x11c>)
   180d8:	4a15      	ldr	r2, [pc, #84]	; (18130 <Det_GetModuleName+0x130>)
   180da:	601a      	str	r2, [r3, #0]
   180dc:	e018      	b.n	18110 <Det_GetModuleName+0x110>
        case ADC_MODULE_ID: ErrorString_Ptr[0] = "Adc module"; break;
   180de:	4b0f      	ldr	r3, [pc, #60]	; (1811c <Det_GetModuleName+0x11c>)
   180e0:	4a14      	ldr	r2, [pc, #80]	; (18134 <Det_GetModuleName+0x134>)
   180e2:	601a      	str	r2, [r3, #0]
   180e4:	e014      	b.n	18110 <Det_GetModuleName+0x110>
        case SCHEDULER_MODULE_ID: ErrorString_Ptr[0] = "Scheduler module"; break;
   180e6:	4b0d      	ldr	r3, [pc, #52]	; (1811c <Det_GetModuleName+0x11c>)
   180e8:	4a13      	ldr	r2, [pc, #76]	; (18138 <Det_GetModuleName+0x138>)
   180ea:	601a      	str	r2, [r3, #0]
   180ec:	e010      	b.n	18110 <Det_GetModuleName+0x110>
        case HWIOAB_BUTTONS_MODULE_ID: ErrorString_Ptr[0] = "Buttons IO abstraction module"; break;
   180ee:	4b0b      	ldr	r3, [pc, #44]	; (1811c <Det_GetModuleName+0x11c>)
   180f0:	4a12      	ldr	r2, [pc, #72]	; (1813c <Det_GetModuleName+0x13c>)
   180f2:	601a      	str	r2, [r3, #0]
   180f4:	e00c      	b.n	18110 <Det_GetModuleName+0x110>
        case HWIOAB_LEDS_MODULE_ID: ErrorString_Ptr[0] = "Leds IO abstraction module"; break;
   180f6:	4b09      	ldr	r3, [pc, #36]	; (1811c <Det_GetModuleName+0x11c>)
   180f8:	4a11      	ldr	r2, [pc, #68]	; (18140 <Det_GetModuleName+0x140>)
   180fa:	601a      	str	r2, [r3, #0]
   180fc:	e008      	b.n	18110 <Det_GetModuleName+0x110>
        case HWIOAB_POTS_MODULE_ID: ErrorString_Ptr[0] = "Pots IO abstraction module"; break;
   180fe:	4b07      	ldr	r3, [pc, #28]	; (1811c <Det_GetModuleName+0x11c>)
   18100:	4a10      	ldr	r2, [pc, #64]	; (18144 <Det_GetModuleName+0x144>)
   18102:	601a      	str	r2, [r3, #0]
   18104:	e004      	b.n	18110 <Det_GetModuleName+0x110>
        case HWIOAB_BUZZER_MODULE_ID: ErrorString_Ptr[0] = "Buzzer IO abstraction module"; break;
   18106:	4b05      	ldr	r3, [pc, #20]	; (1811c <Det_GetModuleName+0x11c>)
   18108:	4a0f      	ldr	r2, [pc, #60]	; (18148 <Det_GetModuleName+0x148>)
   1810a:	601a      	str	r2, [r3, #0]
   1810c:	e000      	b.n	18110 <Det_GetModuleName+0x110>
        default: break;    //Module ID is not used in aplication.
   1810e:	bf00      	nop
    }

    return ErrorString_Ptr[0];
   18110:	4b02      	ldr	r3, [pc, #8]	; (1811c <Det_GetModuleName+0x11c>)
   18112:	681b      	ldr	r3, [r3, #0]
}
   18114:	4618      	mov	r0, r3
   18116:	b002      	add	sp, #8
   18118:	4770      	bx	lr
   1811a:	bf00      	nop
   1811c:	1fff9768 	.word	0x1fff9768
   18120:	00018e80 	.word	0x00018e80
   18124:	00018e8c 	.word	0x00018e8c
   18128:	00018e9c 	.word	0x00018e9c
   1812c:	00018ea8 	.word	0x00018ea8
   18130:	00018eb4 	.word	0x00018eb4
   18134:	00018ec0 	.word	0x00018ec0
   18138:	00018ecc 	.word	0x00018ecc
   1813c:	00018ee0 	.word	0x00018ee0
   18140:	00018f00 	.word	0x00018f00
   18144:	00018f1c 	.word	0x00018f1c
   18148:	00018f38 	.word	0x00018f38

0001814c <Det_GetApiName>:
 * 
 * @param[in] ModuleId Module Id where error was detected. 
 * @param[in] ApiId Api Id where error was detected 
 * @return StringPtr Pointer to string Api name.
 */
char* Det_GetApiName( uint16 ModuleId, uint8 ApiId ) {
   1814c:	b082      	sub	sp, #8
   1814e:	4603      	mov	r3, r0
   18150:	460a      	mov	r2, r1
   18152:	f8ad 3006 	strh.w	r3, [sp, #6]
   18156:	4613      	mov	r3, r2
   18158:	f88d 3005 	strb.w	r3, [sp, #5]

    switch ( ModuleId ) {
   1815c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   18160:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
   18164:	f300 82de 	bgt.w	18724 <Det_GetApiName+0x5d8>
   18168:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1816c:	da04      	bge.n	18178 <Det_GetApiName+0x2c>
   1816e:	2b7c      	cmp	r3, #124	; 0x7c
   18170:	dc4c      	bgt.n	1820c <Det_GetApiName+0xc0>
   18172:	2b65      	cmp	r3, #101	; 0x65
   18174:	da12      	bge.n	1819c <Det_GetApiName+0x50>
                default: break; //Api doesnt report det error or is not used.
            }
        break;

        default: //Module ID is not used in aplication.
        break;
   18176:	e2d5      	b.n	18724 <Det_GetApiName+0x5d8>
   18178:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
   1817c:	2b04      	cmp	r3, #4
   1817e:	f200 82d1 	bhi.w	18724 <Det_GetApiName+0x5d8>
   18182:	a201      	add	r2, pc, #4	; (adr r2, 18188 <Det_GetApiName+0x3c>)
   18184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18188:	000185a5 	.word	0x000185a5
   1818c:	0001864d 	.word	0x0001864d
   18190:	0001867f 	.word	0x0001867f
   18194:	000186c1 	.word	0x000186c1
   18198:	000186f3 	.word	0x000186f3
   1819c:	3b65      	subs	r3, #101	; 0x65
   1819e:	2b17      	cmp	r3, #23
   181a0:	f200 82c0 	bhi.w	18724 <Det_GetApiName+0x5d8>
   181a4:	a201      	add	r2, pc, #4	; (adr r2, 181ac <Det_GetApiName+0x60>)
   181a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   181aa:	bf00      	nop
   181ac:	00018213 	.word	0x00018213
   181b0:	00018725 	.word	0x00018725
   181b4:	00018725 	.word	0x00018725
   181b8:	00018725 	.word	0x00018725
   181bc:	00018725 	.word	0x00018725
   181c0:	00018725 	.word	0x00018725
   181c4:	00018725 	.word	0x00018725
   181c8:	00018725 	.word	0x00018725
   181cc:	00018725 	.word	0x00018725
   181d0:	00018725 	.word	0x00018725
   181d4:	00018725 	.word	0x00018725
   181d8:	00018725 	.word	0x00018725
   181dc:	00018725 	.word	0x00018725
   181e0:	00018725 	.word	0x00018725
   181e4:	00018725 	.word	0x00018725
   181e8:	00018725 	.word	0x00018725
   181ec:	00018725 	.word	0x00018725
   181f0:	00018725 	.word	0x00018725
   181f4:	00018725 	.word	0x00018725
   181f8:	0001830d 	.word	0x0001830d
   181fc:	000183ad 	.word	0x000183ad
   18200:	00018725 	.word	0x00018725
   18204:	00018415 	.word	0x00018415
   18208:	000182bd 	.word	0x000182bd
    switch ( ModuleId ) {
   1820c:	2bff      	cmp	r3, #255	; 0xff
   1820e:	d02d      	beq.n	1826c <Det_GetApiName+0x120>
        break;
   18210:	e288      	b.n	18724 <Det_GetApiName+0x5d8>
            switch( ApiId ) {   //4 Apis that report det errors.
   18212:	f89d 3005 	ldrb.w	r3, [sp, #5]
   18216:	2b09      	cmp	r3, #9
   18218:	d826      	bhi.n	18268 <Det_GetApiName+0x11c>
   1821a:	a201      	add	r2, pc, #4	; (adr r2, 18220 <Det_GetApiName+0xd4>)
   1821c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18220:	00018249 	.word	0x00018249
   18224:	00018269 	.word	0x00018269
   18228:	00018251 	.word	0x00018251
   1822c:	00018269 	.word	0x00018269
   18230:	00018269 	.word	0x00018269
   18234:	00018269 	.word	0x00018269
   18238:	00018269 	.word	0x00018269
   1823c:	00018269 	.word	0x00018269
   18240:	00018259 	.word	0x00018259
   18244:	00018261 	.word	0x00018261
                case MCU_INIT_ID: ErrorString_Ptr[1] = "Mcu_Init()"; break;
   18248:	4bac      	ldr	r3, [pc, #688]	; (184fc <Det_GetApiName+0x3b0>)
   1824a:	4aad      	ldr	r2, [pc, #692]	; (18500 <Det_GetApiName+0x3b4>)
   1824c:	605a      	str	r2, [r3, #4]
   1824e:	e00c      	b.n	1826a <Det_GetApiName+0x11e>
                case MCU_INITCLOCK_ID: ErrorString_Ptr[1] = "Mcu_InitClock()"; break;
   18250:	4baa      	ldr	r3, [pc, #680]	; (184fc <Det_GetApiName+0x3b0>)
   18252:	4aac      	ldr	r2, [pc, #688]	; (18504 <Det_GetApiName+0x3b8>)
   18254:	605a      	str	r2, [r3, #4]
   18256:	e008      	b.n	1826a <Det_GetApiName+0x11e>
                case MCU_SETMODE_ID: ErrorString_Ptr[1] = "Mcu_SetMode()"; break;
   18258:	4ba8      	ldr	r3, [pc, #672]	; (184fc <Det_GetApiName+0x3b0>)
   1825a:	4aab      	ldr	r2, [pc, #684]	; (18508 <Det_GetApiName+0x3bc>)
   1825c:	605a      	str	r2, [r3, #4]
   1825e:	e004      	b.n	1826a <Det_GetApiName+0x11e>
                case MCU_GETVERSIONINFO_ID: ErrorString_Ptr[1] = "Mcu_GetVersionInfo()"; break;
   18260:	4ba6      	ldr	r3, [pc, #664]	; (184fc <Det_GetApiName+0x3b0>)
   18262:	4aaa      	ldr	r2, [pc, #680]	; (1850c <Det_GetApiName+0x3c0>)
   18264:	605a      	str	r2, [r3, #4]
   18266:	e000      	b.n	1826a <Det_GetApiName+0x11e>
                default: break; //Api doesnt report det error or is not used.
   18268:	bf00      	nop
        break;
   1826a:	e25c      	b.n	18726 <Det_GetApiName+0x5da>
            switch ( ApiId ) {  //5 Apis that report det errors.
   1826c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   18270:	3b20      	subs	r3, #32
   18272:	2b04      	cmp	r3, #4
   18274:	d820      	bhi.n	182b8 <Det_GetApiName+0x16c>
   18276:	a201      	add	r2, pc, #4	; (adr r2, 1827c <Det_GetApiName+0x130>)
   18278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1827c:	00018291 	.word	0x00018291
   18280:	00018299 	.word	0x00018299
   18284:	000182a1 	.word	0x000182a1
   18288:	000182a9 	.word	0x000182a9
   1828c:	000182b1 	.word	0x000182b1
                case PLATFORM_INIT_ID: ErrorString_Ptr[1] = "Platform_Init()"; break;
   18290:	4b9a      	ldr	r3, [pc, #616]	; (184fc <Det_GetApiName+0x3b0>)
   18292:	4a9f      	ldr	r2, [pc, #636]	; (18510 <Det_GetApiName+0x3c4>)
   18294:	605a      	str	r2, [r3, #4]
   18296:	e010      	b.n	182ba <Det_GetApiName+0x16e>
                case PLATFORM_SET_IRQ_ID: ErrorString_Ptr[1] = "Platform_SetIrq()"; break;
   18298:	4b98      	ldr	r3, [pc, #608]	; (184fc <Det_GetApiName+0x3b0>)
   1829a:	4a9e      	ldr	r2, [pc, #632]	; (18514 <Det_GetApiName+0x3c8>)
   1829c:	605a      	str	r2, [r3, #4]
   1829e:	e00c      	b.n	182ba <Det_GetApiName+0x16e>
                case PLATFORM_SET_IRQ_PRIO_ID: ErrorString_Ptr[1] = "Platform_SetIrqPriority()"; break;
   182a0:	4b96      	ldr	r3, [pc, #600]	; (184fc <Det_GetApiName+0x3b0>)
   182a2:	4a9d      	ldr	r2, [pc, #628]	; (18518 <Det_GetApiName+0x3cc>)
   182a4:	605a      	str	r2, [r3, #4]
   182a6:	e008      	b.n	182ba <Det_GetApiName+0x16e>
                case PLATFORM_GET_IRQ_PRIO_ID: ErrorString_Ptr[1] = "Platform_GetIrqPriority()"; break;
   182a8:	4b94      	ldr	r3, [pc, #592]	; (184fc <Det_GetApiName+0x3b0>)
   182aa:	4a9c      	ldr	r2, [pc, #624]	; (1851c <Det_GetApiName+0x3d0>)
   182ac:	605a      	str	r2, [r3, #4]
   182ae:	e004      	b.n	182ba <Det_GetApiName+0x16e>
                case PLATFORM_INSTALL_HANDLER_ID: ErrorString_Ptr[1] = "Platform_InstallIrqHandler()"; break;
   182b0:	4b92      	ldr	r3, [pc, #584]	; (184fc <Det_GetApiName+0x3b0>)
   182b2:	4a9b      	ldr	r2, [pc, #620]	; (18520 <Det_GetApiName+0x3d4>)
   182b4:	605a      	str	r2, [r3, #4]
   182b6:	e000      	b.n	182ba <Det_GetApiName+0x16e>
                default: break; //Api doesnt report det error or is not used.
   182b8:	bf00      	nop
        break;
   182ba:	e234      	b.n	18726 <Det_GetApiName+0x5da>
            switch ( ApiId ) {  //5 Apis that report det errors.
   182bc:	f89d 3005 	ldrb.w	r3, [sp, #5]
   182c0:	2b04      	cmp	r3, #4
   182c2:	d821      	bhi.n	18308 <Det_GetApiName+0x1bc>
   182c4:	a201      	add	r2, pc, #4	; (adr r2, 182cc <Det_GetApiName+0x180>)
   182c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   182ca:	bf00      	nop
   182cc:	000182e1 	.word	0x000182e1
   182d0:	000182e9 	.word	0x000182e9
   182d4:	000182f9 	.word	0x000182f9
   182d8:	00018301 	.word	0x00018301
   182dc:	000182f1 	.word	0x000182f1
                case PORT_INIT_ID: ErrorString_Ptr[1] = "Port_Init()"; break;
   182e0:	4b86      	ldr	r3, [pc, #536]	; (184fc <Det_GetApiName+0x3b0>)
   182e2:	4a90      	ldr	r2, [pc, #576]	; (18524 <Det_GetApiName+0x3d8>)
   182e4:	605a      	str	r2, [r3, #4]
   182e6:	e010      	b.n	1830a <Det_GetApiName+0x1be>
                case PORT_SETPINDIRECTION_ID: ErrorString_Ptr[1] = "Port_SetPinDirection()"; break;
   182e8:	4b84      	ldr	r3, [pc, #528]	; (184fc <Det_GetApiName+0x3b0>)
   182ea:	4a8f      	ldr	r2, [pc, #572]	; (18528 <Det_GetApiName+0x3dc>)
   182ec:	605a      	str	r2, [r3, #4]
   182ee:	e00c      	b.n	1830a <Det_GetApiName+0x1be>
                case PORT_SETPINMODE_ID: ErrorString_Ptr[1] = "Port_SetPinMode()"; break;
   182f0:	4b82      	ldr	r3, [pc, #520]	; (184fc <Det_GetApiName+0x3b0>)
   182f2:	4a8e      	ldr	r2, [pc, #568]	; (1852c <Det_GetApiName+0x3e0>)
   182f4:	605a      	str	r2, [r3, #4]
   182f6:	e008      	b.n	1830a <Det_GetApiName+0x1be>
                case PORT_REFRESHPINDIRECTION_ID: ErrorString_Ptr[1] = "Port_RefreshPortDirection()"; break;
   182f8:	4b80      	ldr	r3, [pc, #512]	; (184fc <Det_GetApiName+0x3b0>)
   182fa:	4a8d      	ldr	r2, [pc, #564]	; (18530 <Det_GetApiName+0x3e4>)
   182fc:	605a      	str	r2, [r3, #4]
   182fe:	e004      	b.n	1830a <Det_GetApiName+0x1be>
                case PORT_GETVERSIONINFO_ID: ErrorString_Ptr[1] = "Port_GetVersionInfo()"; break;
   18300:	4b7e      	ldr	r3, [pc, #504]	; (184fc <Det_GetApiName+0x3b0>)
   18302:	4a8c      	ldr	r2, [pc, #560]	; (18534 <Det_GetApiName+0x3e8>)
   18304:	605a      	str	r2, [r3, #4]
   18306:	e000      	b.n	1830a <Det_GetApiName+0x1be>
                default: break; //Api doesnt report det error or is not used.
   18308:	bf00      	nop
        break;
   1830a:	e20c      	b.n	18726 <Det_GetApiName+0x5da>
            switch ( ApiId ) {  //8 Apis that report det errors.
   1830c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   18310:	2b12      	cmp	r3, #18
   18312:	d849      	bhi.n	183a8 <Det_GetApiName+0x25c>
   18314:	a201      	add	r2, pc, #4	; (adr r2, 1831c <Det_GetApiName+0x1d0>)
   18316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1831a:	bf00      	nop
   1831c:	00018371 	.word	0x00018371
   18320:	00018369 	.word	0x00018369
   18324:	00018391 	.word	0x00018391
   18328:	00018399 	.word	0x00018399
   1832c:	00018389 	.word	0x00018389
   18330:	00018381 	.word	0x00018381
   18334:	000183a9 	.word	0x000183a9
   18338:	000183a9 	.word	0x000183a9
   1833c:	000183a9 	.word	0x000183a9
   18340:	000183a9 	.word	0x000183a9
   18344:	000183a9 	.word	0x000183a9
   18348:	000183a9 	.word	0x000183a9
   1834c:	000183a9 	.word	0x000183a9
   18350:	000183a9 	.word	0x000183a9
   18354:	000183a9 	.word	0x000183a9
   18358:	000183a9 	.word	0x000183a9
   1835c:	000183a9 	.word	0x000183a9
   18360:	00018379 	.word	0x00018379
   18364:	000183a1 	.word	0x000183a1
                case DIO_WRITECHANNEL_ID: ErrorString_Ptr[1] = "Dio_WriteChannel()"; break;
   18368:	4b64      	ldr	r3, [pc, #400]	; (184fc <Det_GetApiName+0x3b0>)
   1836a:	4a73      	ldr	r2, [pc, #460]	; (18538 <Det_GetApiName+0x3ec>)
   1836c:	605a      	str	r2, [r3, #4]
   1836e:	e01c      	b.n	183aa <Det_GetApiName+0x25e>
                case DIO_READCHANNEL_ID: ErrorString_Ptr[1] = "Dio_ReadChannel()"; break;
   18370:	4b62      	ldr	r3, [pc, #392]	; (184fc <Det_GetApiName+0x3b0>)
   18372:	4a72      	ldr	r2, [pc, #456]	; (1853c <Det_GetApiName+0x3f0>)
   18374:	605a      	str	r2, [r3, #4]
   18376:	e018      	b.n	183aa <Det_GetApiName+0x25e>
                case DIO_FLIPCHANNEL_ID: ErrorString_Ptr[1] = "Dio_FlipChannel()"; break;
   18378:	4b60      	ldr	r3, [pc, #384]	; (184fc <Det_GetApiName+0x3b0>)
   1837a:	4a71      	ldr	r2, [pc, #452]	; (18540 <Det_GetApiName+0x3f4>)
   1837c:	605a      	str	r2, [r3, #4]
   1837e:	e014      	b.n	183aa <Det_GetApiName+0x25e>
                case DIO_WRITECHANNELGROUP_ID: ErrorString_Ptr[1] = "Dio_WriteChannelGroup()"; break;
   18380:	4b5e      	ldr	r3, [pc, #376]	; (184fc <Det_GetApiName+0x3b0>)
   18382:	4a70      	ldr	r2, [pc, #448]	; (18544 <Det_GetApiName+0x3f8>)
   18384:	605a      	str	r2, [r3, #4]
   18386:	e010      	b.n	183aa <Det_GetApiName+0x25e>
                case DIO_READCHANNELGROUP_ID: ErrorString_Ptr[1] = "Dio_ReadChannelGroup()"; break;
   18388:	4b5c      	ldr	r3, [pc, #368]	; (184fc <Det_GetApiName+0x3b0>)
   1838a:	4a6f      	ldr	r2, [pc, #444]	; (18548 <Det_GetApiName+0x3fc>)
   1838c:	605a      	str	r2, [r3, #4]
   1838e:	e00c      	b.n	183aa <Det_GetApiName+0x25e>
                case DIO_READPORT_ID: ErrorString_Ptr[1] = "Dio_ReadPort()"; break;
   18390:	4b5a      	ldr	r3, [pc, #360]	; (184fc <Det_GetApiName+0x3b0>)
   18392:	4a6e      	ldr	r2, [pc, #440]	; (1854c <Det_GetApiName+0x400>)
   18394:	605a      	str	r2, [r3, #4]
   18396:	e008      	b.n	183aa <Det_GetApiName+0x25e>
                case DIO_WRITEPORT_ID: ErrorString_Ptr[1] = "Dio_WritePort()"; break;
   18398:	4b58      	ldr	r3, [pc, #352]	; (184fc <Det_GetApiName+0x3b0>)
   1839a:	4a6d      	ldr	r2, [pc, #436]	; (18550 <Det_GetApiName+0x404>)
   1839c:	605a      	str	r2, [r3, #4]
   1839e:	e004      	b.n	183aa <Det_GetApiName+0x25e>
                case DIO_GETVERSIONINFO_ID: ErrorString_Ptr[1] = "Dio_GetVersionInfo()"; break;
   183a0:	4b56      	ldr	r3, [pc, #344]	; (184fc <Det_GetApiName+0x3b0>)
   183a2:	4a6c      	ldr	r2, [pc, #432]	; (18554 <Det_GetApiName+0x408>)
   183a4:	605a      	str	r2, [r3, #4]
   183a6:	e000      	b.n	183aa <Det_GetApiName+0x25e>
                default: break; //Api doesnt report det error or is not used.
   183a8:	bf00      	nop
        break;
   183aa:	e1bc      	b.n	18726 <Det_GetApiName+0x5da>
            switch ( ApiId ) {  //6 Apis that report det errors.
   183ac:	f89d 3005 	ldrb.w	r3, [sp, #5]
   183b0:	2b08      	cmp	r3, #8
   183b2:	d82d      	bhi.n	18410 <Det_GetApiName+0x2c4>
   183b4:	a201      	add	r2, pc, #4	; (adr r2, 183bc <Det_GetApiName+0x270>)
   183b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   183ba:	bf00      	nop
   183bc:	000183e1 	.word	0x000183e1
   183c0:	000183e9 	.word	0x000183e9
   183c4:	000183f1 	.word	0x000183f1
   183c8:	000183f9 	.word	0x000183f9
   183cc:	00018401 	.word	0x00018401
   183d0:	00018411 	.word	0x00018411
   183d4:	00018411 	.word	0x00018411
   183d8:	00018411 	.word	0x00018411
   183dc:	00018409 	.word	0x00018409
                case PWM_INIT_ID: ErrorString_Ptr[1] = "Pwm_Init()"; break;
   183e0:	4b46      	ldr	r3, [pc, #280]	; (184fc <Det_GetApiName+0x3b0>)
   183e2:	4a5d      	ldr	r2, [pc, #372]	; (18558 <Det_GetApiName+0x40c>)
   183e4:	605a      	str	r2, [r3, #4]
   183e6:	e014      	b.n	18412 <Det_GetApiName+0x2c6>
                case PWM_DEINIT_ID: ErrorString_Ptr[1] = "Pwm_DeInit()"; break;
   183e8:	4b44      	ldr	r3, [pc, #272]	; (184fc <Det_GetApiName+0x3b0>)
   183ea:	4a5c      	ldr	r2, [pc, #368]	; (1855c <Det_GetApiName+0x410>)
   183ec:	605a      	str	r2, [r3, #4]
   183ee:	e010      	b.n	18412 <Det_GetApiName+0x2c6>
                case PWM_SETDUTYCYCLE_ID: ErrorString_Ptr[1] = "Pwm_SetDutyCycle()"; break;
   183f0:	4b42      	ldr	r3, [pc, #264]	; (184fc <Det_GetApiName+0x3b0>)
   183f2:	4a5b      	ldr	r2, [pc, #364]	; (18560 <Det_GetApiName+0x414>)
   183f4:	605a      	str	r2, [r3, #4]
   183f6:	e00c      	b.n	18412 <Det_GetApiName+0x2c6>
                case PWM_SETPERIODANDDUTY_ID: ErrorString_Ptr[1] = "Pwm_SetPeriodAndDuty()"; break;
   183f8:	4b40      	ldr	r3, [pc, #256]	; (184fc <Det_GetApiName+0x3b0>)
   183fa:	4a5a      	ldr	r2, [pc, #360]	; (18564 <Det_GetApiName+0x418>)
   183fc:	605a      	str	r2, [r3, #4]
   183fe:	e008      	b.n	18412 <Det_GetApiName+0x2c6>
                case PWM_SETOUTPUTTOIDLE_ID: ErrorString_Ptr[1] = "Pwm_SetOutputToIdle()"; break;
   18400:	4b3e      	ldr	r3, [pc, #248]	; (184fc <Det_GetApiName+0x3b0>)
   18402:	4a59      	ldr	r2, [pc, #356]	; (18568 <Det_GetApiName+0x41c>)
   18404:	605a      	str	r2, [r3, #4]
   18406:	e004      	b.n	18412 <Det_GetApiName+0x2c6>
                case PWM_GETVERSIONINFO_ID: ErrorString_Ptr[1] = "Pwm_GetVersionInfo()"; break;
   18408:	4b3c      	ldr	r3, [pc, #240]	; (184fc <Det_GetApiName+0x3b0>)
   1840a:	4a58      	ldr	r2, [pc, #352]	; (1856c <Det_GetApiName+0x420>)
   1840c:	605a      	str	r2, [r3, #4]
   1840e:	e000      	b.n	18412 <Det_GetApiName+0x2c6>
                default: break; //Api doesnt report det error or is not used.
   18410:	bf00      	nop
        break;
   18412:	e188      	b.n	18726 <Det_GetApiName+0x5da>
            switch ( ApiId ) {  //9 Apis that report det errors.
   18414:	f89d 3005 	ldrb.w	r3, [sp, #5]
   18418:	2b29      	cmp	r3, #41	; 0x29
   1841a:	f200 80c1 	bhi.w	185a0 <Det_GetApiName+0x454>
   1841e:	a201      	add	r2, pc, #4	; (adr r2, 18424 <Det_GetApiName+0x2d8>)
   18420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18424:	000184cd 	.word	0x000184cd
   18428:	000184d5 	.word	0x000184d5
   1842c:	000184dd 	.word	0x000184dd
   18430:	000184e5 	.word	0x000184e5
   18434:	000184ed 	.word	0x000184ed
   18438:	000185a1 	.word	0x000185a1
   1843c:	000185a1 	.word	0x000185a1
   18440:	000185a1 	.word	0x000185a1
   18444:	000185a1 	.word	0x000185a1
   18448:	000184f5 	.word	0x000184f5
   1844c:	00018599 	.word	0x00018599
   18450:	000185a1 	.word	0x000185a1
   18454:	00018591 	.word	0x00018591
   18458:	000185a1 	.word	0x000185a1
   1845c:	000185a1 	.word	0x000185a1
   18460:	000185a1 	.word	0x000185a1
   18464:	000185a1 	.word	0x000185a1
   18468:	000185a1 	.word	0x000185a1
   1846c:	000185a1 	.word	0x000185a1
   18470:	000185a1 	.word	0x000185a1
   18474:	000185a1 	.word	0x000185a1
   18478:	000185a1 	.word	0x000185a1
   1847c:	000185a1 	.word	0x000185a1
   18480:	000185a1 	.word	0x000185a1
   18484:	000185a1 	.word	0x000185a1
   18488:	000185a1 	.word	0x000185a1
   1848c:	000185a1 	.word	0x000185a1
   18490:	000185a1 	.word	0x000185a1
   18494:	000185a1 	.word	0x000185a1
   18498:	000185a1 	.word	0x000185a1
   1849c:	000185a1 	.word	0x000185a1
   184a0:	000185a1 	.word	0x000185a1
   184a4:	000185a1 	.word	0x000185a1
   184a8:	000185a1 	.word	0x000185a1
   184ac:	000185a1 	.word	0x000185a1
   184b0:	000185a1 	.word	0x000185a1
   184b4:	000185a1 	.word	0x000185a1
   184b8:	000185a1 	.word	0x000185a1
   184bc:	000185a1 	.word	0x000185a1
   184c0:	000185a1 	.word	0x000185a1
   184c4:	000185a1 	.word	0x000185a1
   184c8:	00018589 	.word	0x00018589
                case ADC_INIT_ID: ErrorString_Ptr[1] = "Adc_Init()"; break;
   184cc:	4b0b      	ldr	r3, [pc, #44]	; (184fc <Det_GetApiName+0x3b0>)
   184ce:	4a28      	ldr	r2, [pc, #160]	; (18570 <Det_GetApiName+0x424>)
   184d0:	605a      	str	r2, [r3, #4]
   184d2:	e066      	b.n	185a2 <Det_GetApiName+0x456>
                case ADC_DEINIT_ID: ErrorString_Ptr[1] = "Adc_DeInit()"; break;
   184d4:	4b09      	ldr	r3, [pc, #36]	; (184fc <Det_GetApiName+0x3b0>)
   184d6:	4a27      	ldr	r2, [pc, #156]	; (18574 <Det_GetApiName+0x428>)
   184d8:	605a      	str	r2, [r3, #4]
   184da:	e062      	b.n	185a2 <Det_GetApiName+0x456>
                case ADC_STARTGROUPCONVERSION_ID: ErrorString_Ptr[1] = "Adc_StartGroupConversion()"; break;
   184dc:	4b07      	ldr	r3, [pc, #28]	; (184fc <Det_GetApiName+0x3b0>)
   184de:	4a26      	ldr	r2, [pc, #152]	; (18578 <Det_GetApiName+0x42c>)
   184e0:	605a      	str	r2, [r3, #4]
   184e2:	e05e      	b.n	185a2 <Det_GetApiName+0x456>
                case ADC_STOPGROUPCONVERSION_ID: ErrorString_Ptr[1] = "Adc_StopGroupConversion()"; break;
   184e4:	4b05      	ldr	r3, [pc, #20]	; (184fc <Det_GetApiName+0x3b0>)
   184e6:	4a25      	ldr	r2, [pc, #148]	; (1857c <Det_GetApiName+0x430>)
   184e8:	605a      	str	r2, [r3, #4]
   184ea:	e05a      	b.n	185a2 <Det_GetApiName+0x456>
                case ADC_VALUEREADGROUP_ID: ErrorString_Ptr[1] = "Adc_ReadGroup()"; break;
   184ec:	4b03      	ldr	r3, [pc, #12]	; (184fc <Det_GetApiName+0x3b0>)
   184ee:	4a24      	ldr	r2, [pc, #144]	; (18580 <Det_GetApiName+0x434>)
   184f0:	605a      	str	r2, [r3, #4]
   184f2:	e056      	b.n	185a2 <Det_GetApiName+0x456>
                case ADC_GETGROUPSTATUS_ID: ErrorString_Ptr[1] = "Adc_GetGroupStatus()"; break;
   184f4:	4b01      	ldr	r3, [pc, #4]	; (184fc <Det_GetApiName+0x3b0>)
   184f6:	4a23      	ldr	r2, [pc, #140]	; (18584 <Det_GetApiName+0x438>)
   184f8:	605a      	str	r2, [r3, #4]
   184fa:	e052      	b.n	185a2 <Det_GetApiName+0x456>
   184fc:	1fff9768 	.word	0x1fff9768
   18500:	00018f58 	.word	0x00018f58
   18504:	00018f64 	.word	0x00018f64
   18508:	00018f74 	.word	0x00018f74
   1850c:	00018f84 	.word	0x00018f84
   18510:	00018f9c 	.word	0x00018f9c
   18514:	00018fac 	.word	0x00018fac
   18518:	00018fc0 	.word	0x00018fc0
   1851c:	00018fdc 	.word	0x00018fdc
   18520:	00018ff8 	.word	0x00018ff8
   18524:	00019018 	.word	0x00019018
   18528:	00019024 	.word	0x00019024
   1852c:	0001903c 	.word	0x0001903c
   18530:	00019050 	.word	0x00019050
   18534:	0001906c 	.word	0x0001906c
   18538:	00019084 	.word	0x00019084
   1853c:	00019098 	.word	0x00019098
   18540:	000190ac 	.word	0x000190ac
   18544:	000190c0 	.word	0x000190c0
   18548:	000190d8 	.word	0x000190d8
   1854c:	000190f0 	.word	0x000190f0
   18550:	00019100 	.word	0x00019100
   18554:	00019110 	.word	0x00019110
   18558:	00019128 	.word	0x00019128
   1855c:	00019134 	.word	0x00019134
   18560:	00019144 	.word	0x00019144
   18564:	00019158 	.word	0x00019158
   18568:	00019170 	.word	0x00019170
   1856c:	00019188 	.word	0x00019188
   18570:	000191a0 	.word	0x000191a0
   18574:	000191ac 	.word	0x000191ac
   18578:	000191bc 	.word	0x000191bc
   1857c:	000191d8 	.word	0x000191d8
   18580:	000191f4 	.word	0x000191f4
   18584:	00019204 	.word	0x00019204
                case ADC_CALIBRATE_ID: ErrorString_Ptr[1] = "Adc_Calibrate()"; break;
   18588:	4b69      	ldr	r3, [pc, #420]	; (18730 <Det_GetApiName+0x5e4>)
   1858a:	4a6a      	ldr	r2, [pc, #424]	; (18734 <Det_GetApiName+0x5e8>)
   1858c:	605a      	str	r2, [r3, #4]
   1858e:	e008      	b.n	185a2 <Det_GetApiName+0x456>
                case ADC_SETUPRESULTBUFFER_ID: ErrorString_Ptr[1] = "Adc_SetupResultBuffer()"; break;
   18590:	4b67      	ldr	r3, [pc, #412]	; (18730 <Det_GetApiName+0x5e4>)
   18592:	4a69      	ldr	r2, [pc, #420]	; (18738 <Det_GetApiName+0x5ec>)
   18594:	605a      	str	r2, [r3, #4]
   18596:	e004      	b.n	185a2 <Det_GetApiName+0x456>
                case ADC_GETVERSIONINFO_ID: ErrorString_Ptr[1] = "Adc_GetVersionInfo()"; break;
   18598:	4b65      	ldr	r3, [pc, #404]	; (18730 <Det_GetApiName+0x5e4>)
   1859a:	4a68      	ldr	r2, [pc, #416]	; (1873c <Det_GetApiName+0x5f0>)
   1859c:	605a      	str	r2, [r3, #4]
   1859e:	e000      	b.n	185a2 <Det_GetApiName+0x456>
                default: break; //Api doesnt report det error or is not used.
   185a0:	bf00      	nop
        break;
   185a2:	e0c0      	b.n	18726 <Det_GetApiName+0x5da>
            switch ( ApiId ) {  //12 Apis that report det errors.
   185a4:	f89d 3005 	ldrb.w	r3, [sp, #5]
   185a8:	2b0c      	cmp	r3, #12
   185aa:	d84d      	bhi.n	18648 <Det_GetApiName+0x4fc>
   185ac:	a201      	add	r2, pc, #4	; (adr r2, 185b4 <Det_GetApiName+0x468>)
   185ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   185b2:	bf00      	nop
   185b4:	000185e9 	.word	0x000185e9
   185b8:	00018649 	.word	0x00018649
   185bc:	000185f1 	.word	0x000185f1
   185c0:	000185f9 	.word	0x000185f9
   185c4:	00018601 	.word	0x00018601
   185c8:	00018609 	.word	0x00018609
   185cc:	00018611 	.word	0x00018611
   185d0:	00018619 	.word	0x00018619
   185d4:	00018621 	.word	0x00018621
   185d8:	00018629 	.word	0x00018629
   185dc:	00018631 	.word	0x00018631
   185e0:	00018639 	.word	0x00018639
   185e4:	00018641 	.word	0x00018641
                case SCHEDULER_INIT_ID: ErrorString_Ptr[1] = "Scheduler_Init()"; break;
   185e8:	4b51      	ldr	r3, [pc, #324]	; (18730 <Det_GetApiName+0x5e4>)
   185ea:	4a55      	ldr	r2, [pc, #340]	; (18740 <Det_GetApiName+0x5f4>)
   185ec:	605a      	str	r2, [r3, #4]
   185ee:	e02c      	b.n	1864a <Det_GetApiName+0x4fe>
                case SCHEDULER_GETSTATUSQUEUE_ID: ErrorString_Ptr[1] = "Scheduler_GetStatusQueue()"; break;
   185f0:	4b4f      	ldr	r3, [pc, #316]	; (18730 <Det_GetApiName+0x5e4>)
   185f2:	4a54      	ldr	r2, [pc, #336]	; (18744 <Det_GetApiName+0x5f8>)
   185f4:	605a      	str	r2, [r3, #4]
   185f6:	e028      	b.n	1864a <Det_GetApiName+0x4fe>
                case SCHEDULER_FLUSHQUEUE_ID: ErrorString_Ptr[1] = "Scheduler_FlushQueue()"; break;
   185f8:	4b4d      	ldr	r3, [pc, #308]	; (18730 <Det_GetApiName+0x5e4>)
   185fa:	4a53      	ldr	r2, [pc, #332]	; (18748 <Det_GetApiName+0x5fc>)
   185fc:	605a      	str	r2, [r3, #4]
   185fe:	e024      	b.n	1864a <Det_GetApiName+0x4fe>
                case SCHEDULER_WRITEQUEUE_ID: ErrorString_Ptr[1] = "Scheduler_WriteQueue()"; break;
   18600:	4b4b      	ldr	r3, [pc, #300]	; (18730 <Det_GetApiName+0x5e4>)
   18602:	4a52      	ldr	r2, [pc, #328]	; (1874c <Det_GetApiName+0x600>)
   18604:	605a      	str	r2, [r3, #4]
   18606:	e020      	b.n	1864a <Det_GetApiName+0x4fe>
                case SCHEDULER_READQUEUE_ID: ErrorString_Ptr[1] = "Scheduler_ReadQueue()"; break;
   18608:	4b49      	ldr	r3, [pc, #292]	; (18730 <Det_GetApiName+0x5e4>)
   1860a:	4a51      	ldr	r2, [pc, #324]	; (18750 <Det_GetApiName+0x604>)
   1860c:	605a      	str	r2, [r3, #4]
   1860e:	e01c      	b.n	1864a <Det_GetApiName+0x4fe>
                case SCHEDULER_STARTTASK_ID: ErrorString_Ptr[1] = "Scheduler_StartTask()"; break;
   18610:	4b47      	ldr	r3, [pc, #284]	; (18730 <Det_GetApiName+0x5e4>)
   18612:	4a50      	ldr	r2, [pc, #320]	; (18754 <Det_GetApiName+0x608>)
   18614:	605a      	str	r2, [r3, #4]
   18616:	e018      	b.n	1864a <Det_GetApiName+0x4fe>
                case SCHEDULER_STOPTASK_ID: ErrorString_Ptr[1] = "Scheduler_StopTask()"; break;
   18618:	4b45      	ldr	r3, [pc, #276]	; (18730 <Det_GetApiName+0x5e4>)
   1861a:	4a4f      	ldr	r2, [pc, #316]	; (18758 <Det_GetApiName+0x60c>)
   1861c:	605a      	str	r2, [r3, #4]
   1861e:	e014      	b.n	1864a <Det_GetApiName+0x4fe>
                case SCHEDULER_PERIODTASK_ID: ErrorString_Ptr[1] = "Scheduler_PeriodTask()"; break;
   18620:	4b43      	ldr	r3, [pc, #268]	; (18730 <Det_GetApiName+0x5e4>)
   18622:	4a4e      	ldr	r2, [pc, #312]	; (1875c <Det_GetApiName+0x610>)
   18624:	605a      	str	r2, [r3, #4]
   18626:	e010      	b.n	1864a <Det_GetApiName+0x4fe>
                case SCHEDULER_STARTTIMER_ID: ErrorString_Ptr[1] = "Scheduler_StartTimer()"; break;
   18628:	4b41      	ldr	r3, [pc, #260]	; (18730 <Det_GetApiName+0x5e4>)
   1862a:	4a4d      	ldr	r2, [pc, #308]	; (18760 <Det_GetApiName+0x614>)
   1862c:	605a      	str	r2, [r3, #4]
   1862e:	e00c      	b.n	1864a <Det_GetApiName+0x4fe>
                case SCHEDULER_STOPTIMER_ID: ErrorString_Ptr[1] = "Scheduler_StopTimer()"; break;
   18630:	4b3f      	ldr	r3, [pc, #252]	; (18730 <Det_GetApiName+0x5e4>)
   18632:	4a4c      	ldr	r2, [pc, #304]	; (18764 <Det_GetApiName+0x618>)
   18634:	605a      	str	r2, [r3, #4]
   18636:	e008      	b.n	1864a <Det_GetApiName+0x4fe>
                case SCHEDULER_GETTIMER_ID: ErrorString_Ptr[1] = "Scheduler_GetTimer()"; break;
   18638:	4b3d      	ldr	r3, [pc, #244]	; (18730 <Det_GetApiName+0x5e4>)
   1863a:	4a4b      	ldr	r2, [pc, #300]	; (18768 <Det_GetApiName+0x61c>)
   1863c:	605a      	str	r2, [r3, #4]
   1863e:	e004      	b.n	1864a <Det_GetApiName+0x4fe>
                case SCHEDULER_RELOADTIMER_ID: ErrorString_Ptr[1] = "Scheduler_ReloadTimer()"; break;
   18640:	4b3b      	ldr	r3, [pc, #236]	; (18730 <Det_GetApiName+0x5e4>)
   18642:	4a4a      	ldr	r2, [pc, #296]	; (1876c <Det_GetApiName+0x620>)
   18644:	605a      	str	r2, [r3, #4]
   18646:	e000      	b.n	1864a <Det_GetApiName+0x4fe>
                default: break; //Api doesnt report det error or is not used.
   18648:	bf00      	nop
        break;
   1864a:	e06c      	b.n	18726 <Det_GetApiName+0x5da>
            switch ( ApiId ) {  //3 Apis that report det errors.
   1864c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   18650:	2b02      	cmp	r3, #2
   18652:	d00e      	beq.n	18672 <Det_GetApiName+0x526>
   18654:	2b02      	cmp	r3, #2
   18656:	dc10      	bgt.n	1867a <Det_GetApiName+0x52e>
   18658:	2b00      	cmp	r3, #0
   1865a:	d002      	beq.n	18662 <Det_GetApiName+0x516>
   1865c:	2b01      	cmp	r3, #1
   1865e:	d004      	beq.n	1866a <Det_GetApiName+0x51e>
                default: break; //Api doesnt report det error or is not used.
   18660:	e00b      	b.n	1867a <Det_GetApiName+0x52e>
                case HWIOAB_BUTTONS_INIT_ID: ErrorString_Ptr[1] = "HwIoAb_Buttons_Init()"; break;
   18662:	4b33      	ldr	r3, [pc, #204]	; (18730 <Det_GetApiName+0x5e4>)
   18664:	4a42      	ldr	r2, [pc, #264]	; (18770 <Det_GetApiName+0x624>)
   18666:	605a      	str	r2, [r3, #4]
   18668:	e008      	b.n	1867c <Det_GetApiName+0x530>
                case HWIOAB_BUTTONS_GETEVENT_ID: ErrorString_Ptr[1] = "HwIoAb_Buttons_GetEvent()"; break;
   1866a:	4b31      	ldr	r3, [pc, #196]	; (18730 <Det_GetApiName+0x5e4>)
   1866c:	4a41      	ldr	r2, [pc, #260]	; (18774 <Det_GetApiName+0x628>)
   1866e:	605a      	str	r2, [r3, #4]
   18670:	e004      	b.n	1867c <Det_GetApiName+0x530>
                case HWIOAB_BUTTONS_MAINFUNCTION_ID: ErrorString_Ptr[1] = "HwIoAb_Buttons_MainFunction()"; break;
   18672:	4b2f      	ldr	r3, [pc, #188]	; (18730 <Det_GetApiName+0x5e4>)
   18674:	4a40      	ldr	r2, [pc, #256]	; (18778 <Det_GetApiName+0x62c>)
   18676:	605a      	str	r2, [r3, #4]
   18678:	e000      	b.n	1867c <Det_GetApiName+0x530>
                default: break; //Api doesnt report det error or is not used.
   1867a:	bf00      	nop
        break;
   1867c:	e053      	b.n	18726 <Det_GetApiName+0x5da>
            switch ( ApiId ) {  //4 Apis that report det errors.
   1867e:	f89d 3005 	ldrb.w	r3, [sp, #5]
   18682:	2b03      	cmp	r3, #3
   18684:	d81a      	bhi.n	186bc <Det_GetApiName+0x570>
   18686:	a201      	add	r2, pc, #4	; (adr r2, 1868c <Det_GetApiName+0x540>)
   18688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1868c:	0001869d 	.word	0x0001869d
   18690:	000186a5 	.word	0x000186a5
   18694:	000186ad 	.word	0x000186ad
   18698:	000186b5 	.word	0x000186b5
                case HWIOAB_LEDS_INIT_ID: ErrorString_Ptr[1] = "HwIoAb_Leds_Init()"; break;
   1869c:	4b24      	ldr	r3, [pc, #144]	; (18730 <Det_GetApiName+0x5e4>)
   1869e:	4a37      	ldr	r2, [pc, #220]	; (1877c <Det_GetApiName+0x630>)
   186a0:	605a      	str	r2, [r3, #4]
   186a2:	e00c      	b.n	186be <Det_GetApiName+0x572>
                case HWIOAB_LEDS_TURNON_ID: ErrorString_Ptr[1] = "HwIoAb_Leds_TurnOn()"; break;
   186a4:	4b22      	ldr	r3, [pc, #136]	; (18730 <Det_GetApiName+0x5e4>)
   186a6:	4a36      	ldr	r2, [pc, #216]	; (18780 <Det_GetApiName+0x634>)
   186a8:	605a      	str	r2, [r3, #4]
   186aa:	e008      	b.n	186be <Det_GetApiName+0x572>
                case HWIOAB_LEDS_TURNOFF_ID: ErrorString_Ptr[1] = "HwIoAb_Leds_TurnOff()"; break;
   186ac:	4b20      	ldr	r3, [pc, #128]	; (18730 <Det_GetApiName+0x5e4>)
   186ae:	4a35      	ldr	r2, [pc, #212]	; (18784 <Det_GetApiName+0x638>)
   186b0:	605a      	str	r2, [r3, #4]
   186b2:	e004      	b.n	186be <Det_GetApiName+0x572>
                case HWIOAB_LEDS_TURNTOGGLE_ID: ErrorString_Ptr[1] = "HwIoAb_Leds_TurnToggle()"; break;
   186b4:	4b1e      	ldr	r3, [pc, #120]	; (18730 <Det_GetApiName+0x5e4>)
   186b6:	4a34      	ldr	r2, [pc, #208]	; (18788 <Det_GetApiName+0x63c>)
   186b8:	605a      	str	r2, [r3, #4]
   186ba:	e000      	b.n	186be <Det_GetApiName+0x572>
                default: break; //Api doesnt report det error or is not used.
   186bc:	bf00      	nop
        break;
   186be:	e032      	b.n	18726 <Det_GetApiName+0x5da>
            switch ( ApiId ) {  //3 Apis that report det errors.
   186c0:	f89d 3005 	ldrb.w	r3, [sp, #5]
   186c4:	2b02      	cmp	r3, #2
   186c6:	d00e      	beq.n	186e6 <Det_GetApiName+0x59a>
   186c8:	2b02      	cmp	r3, #2
   186ca:	dc10      	bgt.n	186ee <Det_GetApiName+0x5a2>
   186cc:	2b00      	cmp	r3, #0
   186ce:	d002      	beq.n	186d6 <Det_GetApiName+0x58a>
   186d0:	2b01      	cmp	r3, #1
   186d2:	d004      	beq.n	186de <Det_GetApiName+0x592>
                default: break; //Api doesnt report det error or is not used.
   186d4:	e00b      	b.n	186ee <Det_GetApiName+0x5a2>
                case HWIOAB_POTS_INIT_ID: ErrorString_Ptr[1] = "HwIoAb_Pots_Init()"; break;
   186d6:	4b16      	ldr	r3, [pc, #88]	; (18730 <Det_GetApiName+0x5e4>)
   186d8:	4a2c      	ldr	r2, [pc, #176]	; (1878c <Det_GetApiName+0x640>)
   186da:	605a      	str	r2, [r3, #4]
   186dc:	e008      	b.n	186f0 <Det_GetApiName+0x5a4>
                case HWIOAB_POTS_GETVALUE_ID: ErrorString_Ptr[1] = "HwIoAb_Pots_GetValue()"; break;
   186de:	4b14      	ldr	r3, [pc, #80]	; (18730 <Det_GetApiName+0x5e4>)
   186e0:	4a2b      	ldr	r2, [pc, #172]	; (18790 <Det_GetApiName+0x644>)
   186e2:	605a      	str	r2, [r3, #4]
   186e4:	e004      	b.n	186f0 <Det_GetApiName+0x5a4>
                case HWIOAB_POTS_GETALTVALUE_ID: ErrorString_Ptr[1] = "HwIoAb_Pots_GetAltValue()"; break;
   186e6:	4b12      	ldr	r3, [pc, #72]	; (18730 <Det_GetApiName+0x5e4>)
   186e8:	4a2a      	ldr	r2, [pc, #168]	; (18794 <Det_GetApiName+0x648>)
   186ea:	605a      	str	r2, [r3, #4]
   186ec:	e000      	b.n	186f0 <Det_GetApiName+0x5a4>
                default: break; //Api doesnt report det error or is not used.
   186ee:	bf00      	nop
        break;
   186f0:	e019      	b.n	18726 <Det_GetApiName+0x5da>
            switch ( ApiId ) {  //3 Apis that report det errors.
   186f2:	f89d 3005 	ldrb.w	r3, [sp, #5]
   186f6:	2b02      	cmp	r3, #2
   186f8:	d00e      	beq.n	18718 <Det_GetApiName+0x5cc>
   186fa:	2b02      	cmp	r3, #2
   186fc:	dc10      	bgt.n	18720 <Det_GetApiName+0x5d4>
   186fe:	2b00      	cmp	r3, #0
   18700:	d002      	beq.n	18708 <Det_GetApiName+0x5bc>
   18702:	2b01      	cmp	r3, #1
   18704:	d004      	beq.n	18710 <Det_GetApiName+0x5c4>
                default: break; //Api doesnt report det error or is not used.
   18706:	e00b      	b.n	18720 <Det_GetApiName+0x5d4>
                case HWIOAB_BUZZER_INIT_ID: ErrorString_Ptr[1] = "HwIoAb_Buzzer_Init()"; break;
   18708:	4b09      	ldr	r3, [pc, #36]	; (18730 <Det_GetApiName+0x5e4>)
   1870a:	4a23      	ldr	r2, [pc, #140]	; (18798 <Det_GetApiName+0x64c>)
   1870c:	605a      	str	r2, [r3, #4]
   1870e:	e008      	b.n	18722 <Det_GetApiName+0x5d6>
                case HWIOAB_BUZZER_BEEP_ID: ErrorString_Ptr[1] = "HwIoAb_Buzzer_Beep()"; break;
   18710:	4b07      	ldr	r3, [pc, #28]	; (18730 <Det_GetApiName+0x5e4>)
   18712:	4a22      	ldr	r2, [pc, #136]	; (1879c <Det_GetApiName+0x650>)
   18714:	605a      	str	r2, [r3, #4]
   18716:	e004      	b.n	18722 <Det_GetApiName+0x5d6>
                case HWIOAB_BUZZER_STOP_ID: ErrorString_Ptr[1] = "HwIoAb_Buzzer_Stop()"; break;
   18718:	4b05      	ldr	r3, [pc, #20]	; (18730 <Det_GetApiName+0x5e4>)
   1871a:	4a21      	ldr	r2, [pc, #132]	; (187a0 <Det_GetApiName+0x654>)
   1871c:	605a      	str	r2, [r3, #4]
   1871e:	e000      	b.n	18722 <Det_GetApiName+0x5d6>
                default: break; //Api doesnt report det error or is not used.
   18720:	bf00      	nop
        break;
   18722:	e000      	b.n	18726 <Det_GetApiName+0x5da>
        break;
   18724:	bf00      	nop
    }

    return ErrorString_Ptr[1];
   18726:	4b02      	ldr	r3, [pc, #8]	; (18730 <Det_GetApiName+0x5e4>)
   18728:	685b      	ldr	r3, [r3, #4]
}
   1872a:	4618      	mov	r0, r3
   1872c:	b002      	add	sp, #8
   1872e:	4770      	bx	lr
   18730:	1fff9768 	.word	0x1fff9768
   18734:	0001921c 	.word	0x0001921c
   18738:	0001922c 	.word	0x0001922c
   1873c:	00019244 	.word	0x00019244
   18740:	0001925c 	.word	0x0001925c
   18744:	00019270 	.word	0x00019270
   18748:	0001928c 	.word	0x0001928c
   1874c:	000192a4 	.word	0x000192a4
   18750:	000192bc 	.word	0x000192bc
   18754:	000192d4 	.word	0x000192d4
   18758:	000192ec 	.word	0x000192ec
   1875c:	00019304 	.word	0x00019304
   18760:	0001931c 	.word	0x0001931c
   18764:	00019334 	.word	0x00019334
   18768:	0001934c 	.word	0x0001934c
   1876c:	00019364 	.word	0x00019364
   18770:	0001937c 	.word	0x0001937c
   18774:	00019394 	.word	0x00019394
   18778:	000193b0 	.word	0x000193b0
   1877c:	000193d0 	.word	0x000193d0
   18780:	000193e4 	.word	0x000193e4
   18784:	000193fc 	.word	0x000193fc
   18788:	00019414 	.word	0x00019414
   1878c:	00019430 	.word	0x00019430
   18790:	00019444 	.word	0x00019444
   18794:	0001945c 	.word	0x0001945c
   18798:	00019478 	.word	0x00019478
   1879c:	00019490 	.word	0x00019490
   187a0:	000194a8 	.word	0x000194a8

000187a4 <Det_GetErrorMeaning>:
 * 
 * @param[in] ModuleId Module Id where error was detected.
 * @param[in] ErrorId Error Id reported. 
 * @return StringPtr Pointer to string Error meaning.
 */
char* Det_GetErrorMeaning( uint16 ModuleId, uint8 ErrorId ) {
   187a4:	b082      	sub	sp, #8
   187a6:	4603      	mov	r3, r0
   187a8:	460a      	mov	r2, r1
   187aa:	f8ad 3006 	strh.w	r3, [sp, #6]
   187ae:	4613      	mov	r3, r2
   187b0:	f88d 3005 	strb.w	r3, [sp, #5]

    switch( ModuleId ) {
   187b4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   187b8:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
   187bc:	f300 8261 	bgt.w	18c82 <Det_GetErrorMeaning+0x4de>
   187c0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   187c4:	da04      	bge.n	187d0 <Det_GetErrorMeaning+0x2c>
   187c6:	2b7c      	cmp	r3, #124	; 0x7c
   187c8:	dc4c      	bgt.n	18864 <Det_GetErrorMeaning+0xc0>
   187ca:	2b65      	cmp	r3, #101	; 0x65
   187cc:	da12      	bge.n	187f4 <Det_GetErrorMeaning+0x50>
                default: break; //Error ID not registered.
            }
        break;

        default:    //Module Id is no used in aplication.
        break;
   187ce:	e258      	b.n	18c82 <Det_GetErrorMeaning+0x4de>
   187d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
   187d4:	2b04      	cmp	r3, #4
   187d6:	f200 8254 	bhi.w	18c82 <Det_GetErrorMeaning+0x4de>
   187da:	a201      	add	r2, pc, #4	; (adr r2, 187e0 <Det_GetErrorMeaning+0x3c>)
   187dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   187e0:	00018bad 	.word	0x00018bad
   187e4:	00018c09 	.word	0x00018c09
   187e8:	00018c3b 	.word	0x00018c3b
   187ec:	00018c5b 	.word	0x00018c5b
   187f0:	00018c6f 	.word	0x00018c6f
   187f4:	3b65      	subs	r3, #101	; 0x65
   187f6:	2b17      	cmp	r3, #23
   187f8:	f200 8243 	bhi.w	18c82 <Det_GetErrorMeaning+0x4de>
   187fc:	a201      	add	r2, pc, #4	; (adr r2, 18804 <Det_GetErrorMeaning+0x60>)
   187fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18802:	bf00      	nop
   18804:	0001886b 	.word	0x0001886b
   18808:	00018c83 	.word	0x00018c83
   1880c:	00018c83 	.word	0x00018c83
   18810:	00018c83 	.word	0x00018c83
   18814:	00018c83 	.word	0x00018c83
   18818:	00018c83 	.word	0x00018c83
   1881c:	00018c83 	.word	0x00018c83
   18820:	00018c83 	.word	0x00018c83
   18824:	00018c83 	.word	0x00018c83
   18828:	00018c83 	.word	0x00018c83
   1882c:	00018c83 	.word	0x00018c83
   18830:	00018c83 	.word	0x00018c83
   18834:	00018c83 	.word	0x00018c83
   18838:	00018c83 	.word	0x00018c83
   1883c:	00018c83 	.word	0x00018c83
   18840:	00018c83 	.word	0x00018c83
   18844:	00018c83 	.word	0x00018c83
   18848:	00018c83 	.word	0x00018c83
   1884c:	00018c83 	.word	0x00018c83
   18850:	0001897f 	.word	0x0001897f
   18854:	00018a33 	.word	0x00018a33
   18858:	00018c83 	.word	0x00018c83
   1885c:	00018a91 	.word	0x00018a91
   18860:	00018907 	.word	0x00018907
    switch( ModuleId ) {
   18864:	2bff      	cmp	r3, #255	; 0xff
   18866:	d035      	beq.n	188d4 <Det_GetErrorMeaning+0x130>
        break;
   18868:	e20b      	b.n	18c82 <Det_GetErrorMeaning+0x4de>
            switch ( ErrorId ) {
   1886a:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1886e:	3b0b      	subs	r3, #11
   18870:	2b08      	cmp	r3, #8
   18872:	d82d      	bhi.n	188d0 <Det_GetErrorMeaning+0x12c>
   18874:	a201      	add	r2, pc, #4	; (adr r2, 1887c <Det_GetErrorMeaning+0xd8>)
   18876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1887a:	bf00      	nop
   1887c:	000188a9 	.word	0x000188a9
   18880:	000188b1 	.word	0x000188b1
   18884:	000188d1 	.word	0x000188d1
   18888:	000188d1 	.word	0x000188d1
   1888c:	000188c1 	.word	0x000188c1
   18890:	000188b9 	.word	0x000188b9
   18894:	000188a1 	.word	0x000188a1
   18898:	000188d1 	.word	0x000188d1
   1889c:	000188c9 	.word	0x000188c9
                case MCU_E_INIT_FAILED: ErrorString_Ptr[2] = "Invalid conf pointer"; break;
   188a0:	4ba8      	ldr	r3, [pc, #672]	; (18b44 <Det_GetErrorMeaning+0x3a0>)
   188a2:	4aa9      	ldr	r2, [pc, #676]	; (18b48 <Det_GetErrorMeaning+0x3a4>)
   188a4:	609a      	str	r2, [r3, #8]
   188a6:	e014      	b.n	188d2 <Det_GetErrorMeaning+0x12e>
                case MCU_E_PARAM_CLOCK: ErrorString_Ptr[2] = "Invalid input parameter"; break;
   188a8:	4ba6      	ldr	r3, [pc, #664]	; (18b44 <Det_GetErrorMeaning+0x3a0>)
   188aa:	4aa8      	ldr	r2, [pc, #672]	; (18b4c <Det_GetErrorMeaning+0x3a8>)
   188ac:	609a      	str	r2, [r3, #8]
   188ae:	e010      	b.n	188d2 <Det_GetErrorMeaning+0x12e>
                case MCU_E_PARAM_MODE: ErrorString_Ptr[2] = "Invalid input parameter"; break;
   188b0:	4ba4      	ldr	r3, [pc, #656]	; (18b44 <Det_GetErrorMeaning+0x3a0>)
   188b2:	4aa6      	ldr	r2, [pc, #664]	; (18b4c <Det_GetErrorMeaning+0x3a8>)
   188b4:	609a      	str	r2, [r3, #8]
   188b6:	e00c      	b.n	188d2 <Det_GetErrorMeaning+0x12e>
                case MCU_E_PARAM_POINTER: ErrorString_Ptr[2] = "Invalid input parameter"; break;
   188b8:	4ba2      	ldr	r3, [pc, #648]	; (18b44 <Det_GetErrorMeaning+0x3a0>)
   188ba:	4aa4      	ldr	r2, [pc, #656]	; (18b4c <Det_GetErrorMeaning+0x3a8>)
   188bc:	609a      	str	r2, [r3, #8]
   188be:	e008      	b.n	188d2 <Det_GetErrorMeaning+0x12e>
                case MCU_E_UNINIT: ErrorString_Ptr[2] = "Driver uninitialized"; break;
   188c0:	4ba0      	ldr	r3, [pc, #640]	; (18b44 <Det_GetErrorMeaning+0x3a0>)
   188c2:	4aa3      	ldr	r2, [pc, #652]	; (18b50 <Det_GetErrorMeaning+0x3ac>)
   188c4:	609a      	str	r2, [r3, #8]
   188c6:	e004      	b.n	188d2 <Det_GetErrorMeaning+0x12e>
                case MCU_E_ALREADY_INITIALIZED: ErrorString_Ptr[2] = "Driver already initialized"; break;
   188c8:	4b9e      	ldr	r3, [pc, #632]	; (18b44 <Det_GetErrorMeaning+0x3a0>)
   188ca:	4aa2      	ldr	r2, [pc, #648]	; (18b54 <Det_GetErrorMeaning+0x3b0>)
   188cc:	609a      	str	r2, [r3, #8]
   188ce:	e000      	b.n	188d2 <Det_GetErrorMeaning+0x12e>
                default: break; //Error ID not registered.
   188d0:	bf00      	nop
        break;
   188d2:	e1d7      	b.n	18c84 <Det_GetErrorMeaning+0x4e0>
            switch ( ErrorId ) {
   188d4:	f89d 3005 	ldrb.w	r3, [sp, #5]
   188d8:	2b04      	cmp	r3, #4
   188da:	d00a      	beq.n	188f2 <Det_GetErrorMeaning+0x14e>
   188dc:	2b04      	cmp	r3, #4
   188de:	dc10      	bgt.n	18902 <Det_GetErrorMeaning+0x15e>
   188e0:	2b01      	cmp	r3, #1
   188e2:	d002      	beq.n	188ea <Det_GetErrorMeaning+0x146>
   188e4:	2b02      	cmp	r3, #2
   188e6:	d008      	beq.n	188fa <Det_GetErrorMeaning+0x156>
                default: break; //Error ID not registered.
   188e8:	e00b      	b.n	18902 <Det_GetErrorMeaning+0x15e>
                case PLATFORM_E_PARAM_POINTER: ErrorString_Ptr[2] = "Invalid pointer"; break;
   188ea:	4b96      	ldr	r3, [pc, #600]	; (18b44 <Det_GetErrorMeaning+0x3a0>)
   188ec:	4a9a      	ldr	r2, [pc, #616]	; (18b58 <Det_GetErrorMeaning+0x3b4>)
   188ee:	609a      	str	r2, [r3, #8]
   188f0:	e008      	b.n	18904 <Det_GetErrorMeaning+0x160>
                case PLATFORM_E_PARAM_CONFIG: ErrorString_Ptr[2] = "Call from wrong mapped partition"; break;
   188f2:	4b94      	ldr	r3, [pc, #592]	; (18b44 <Det_GetErrorMeaning+0x3a0>)
   188f4:	4a99      	ldr	r2, [pc, #612]	; (18b5c <Det_GetErrorMeaning+0x3b8>)
   188f6:	609a      	str	r2, [r3, #8]
   188f8:	e004      	b.n	18904 <Det_GetErrorMeaning+0x160>
                case PLATFORM_E_PARAM_OUT_OF_RANGE: ErrorString_Ptr[2] = "Parameter out of range"; break;
   188fa:	4b92      	ldr	r3, [pc, #584]	; (18b44 <Det_GetErrorMeaning+0x3a0>)
   188fc:	4a98      	ldr	r2, [pc, #608]	; (18b60 <Det_GetErrorMeaning+0x3bc>)
   188fe:	609a      	str	r2, [r3, #8]
   18900:	e000      	b.n	18904 <Det_GetErrorMeaning+0x160>
                default: break; //Error ID not registered.
   18902:	bf00      	nop
        break;
   18904:	e1be      	b.n	18c84 <Det_GetErrorMeaning+0x4e0>
            switch ( ErrorId ) {
   18906:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1890a:	2b10      	cmp	r3, #16
   1890c:	dc16      	bgt.n	1893c <Det_GetErrorMeaning+0x198>
   1890e:	2b0a      	cmp	r3, #10
   18910:	db33      	blt.n	1897a <Det_GetErrorMeaning+0x1d6>
   18912:	3b0a      	subs	r3, #10
   18914:	2b06      	cmp	r3, #6
   18916:	d830      	bhi.n	1897a <Det_GetErrorMeaning+0x1d6>
   18918:	a201      	add	r2, pc, #4	; (adr r2, 18920 <Det_GetErrorMeaning+0x17c>)
   1891a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1891e:	bf00      	nop
   18920:	00018943 	.word	0x00018943
   18924:	0001897b 	.word	0x0001897b
   18928:	00018953 	.word	0x00018953
   1892c:	00018963 	.word	0x00018963
   18930:	0001894b 	.word	0x0001894b
   18934:	0001896b 	.word	0x0001896b
   18938:	00018973 	.word	0x00018973
   1893c:	2bf0      	cmp	r3, #240	; 0xf0
   1893e:	d00c      	beq.n	1895a <Det_GetErrorMeaning+0x1b6>
                default: break; //Error ID not registered.
   18940:	e01b      	b.n	1897a <Det_GetErrorMeaning+0x1d6>
                case PORT_E_PARAM_PIN: ErrorString_Ptr[2] = "Invalid Port Pin ID"; break;
   18942:	4b80      	ldr	r3, [pc, #512]	; (18b44 <Det_GetErrorMeaning+0x3a0>)
   18944:	4a87      	ldr	r2, [pc, #540]	; (18b64 <Det_GetErrorMeaning+0x3c0>)
   18946:	609a      	str	r2, [r3, #8]
   18948:	e018      	b.n	1897c <Det_GetErrorMeaning+0x1d8>
                case PORT_E_MODE_UNCHANGEABLE: ErrorString_Ptr[2] = "Port pin mode is unchangeable"; break;
   1894a:	4b7e      	ldr	r3, [pc, #504]	; (18b44 <Det_GetErrorMeaning+0x3a0>)
   1894c:	4a86      	ldr	r2, [pc, #536]	; (18b68 <Det_GetErrorMeaning+0x3c4>)
   1894e:	609a      	str	r2, [r3, #8]
   18950:	e014      	b.n	1897c <Det_GetErrorMeaning+0x1d8>
                case PORT_E_INIT_FAILED: ErrorString_Ptr[2] = "Invalid conf pointer"; break;
   18952:	4b7c      	ldr	r3, [pc, #496]	; (18b44 <Det_GetErrorMeaning+0x3a0>)
   18954:	4a7c      	ldr	r2, [pc, #496]	; (18b48 <Det_GetErrorMeaning+0x3a4>)
   18956:	609a      	str	r2, [r3, #8]
   18958:	e010      	b.n	1897c <Det_GetErrorMeaning+0x1d8>
                case PORT_E_PARAM_CONFIG: ErrorString_Ptr[2] = "Invalid conf pointer"; break;
   1895a:	4b7a      	ldr	r3, [pc, #488]	; (18b44 <Det_GetErrorMeaning+0x3a0>)
   1895c:	4a7a      	ldr	r2, [pc, #488]	; (18b48 <Det_GetErrorMeaning+0x3a4>)
   1895e:	609a      	str	r2, [r3, #8]
   18960:	e00c      	b.n	1897c <Det_GetErrorMeaning+0x1d8>
                case PORT_E_PARAM_INVALID_MODE: ErrorString_Ptr[2] = "Invalid port pin mode"; break;
   18962:	4b78      	ldr	r3, [pc, #480]	; (18b44 <Det_GetErrorMeaning+0x3a0>)
   18964:	4a81      	ldr	r2, [pc, #516]	; (18b6c <Det_GetErrorMeaning+0x3c8>)
   18966:	609a      	str	r2, [r3, #8]
   18968:	e008      	b.n	1897c <Det_GetErrorMeaning+0x1d8>
                case PORT_E_UNINIT: ErrorString_Ptr[2] = "Driver uninitialized"; break;
   1896a:	4b76      	ldr	r3, [pc, #472]	; (18b44 <Det_GetErrorMeaning+0x3a0>)
   1896c:	4a78      	ldr	r2, [pc, #480]	; (18b50 <Det_GetErrorMeaning+0x3ac>)
   1896e:	609a      	str	r2, [r3, #8]
   18970:	e004      	b.n	1897c <Det_GetErrorMeaning+0x1d8>
                case PORT_E_PARAM_POINTER: ErrorString_Ptr[2] = "Invalid input parameter"; break;
   18972:	4b74      	ldr	r3, [pc, #464]	; (18b44 <Det_GetErrorMeaning+0x3a0>)
   18974:	4a75      	ldr	r2, [pc, #468]	; (18b4c <Det_GetErrorMeaning+0x3a8>)
   18976:	609a      	str	r2, [r3, #8]
   18978:	e000      	b.n	1897c <Det_GetErrorMeaning+0x1d8>
                default: break; //Error ID not registered.
   1897a:	bf00      	nop
        break;
   1897c:	e182      	b.n	18c84 <Det_GetErrorMeaning+0x4e0>
            switch ( ErrorId ) {
   1897e:	f89d 3005 	ldrb.w	r3, [sp, #5]
   18982:	2b21      	cmp	r3, #33	; 0x21
   18984:	dc38      	bgt.n	189f8 <Det_GetErrorMeaning+0x254>
   18986:	2b0a      	cmp	r3, #10
   18988:	db51      	blt.n	18a2e <Det_GetErrorMeaning+0x28a>
   1898a:	3b0a      	subs	r3, #10
   1898c:	2b17      	cmp	r3, #23
   1898e:	d84e      	bhi.n	18a2e <Det_GetErrorMeaning+0x28a>
   18990:	a201      	add	r2, pc, #4	; (adr r2, 18998 <Det_GetErrorMeaning+0x1f4>)
   18992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18996:	bf00      	nop
   18998:	00018a0f 	.word	0x00018a0f
   1899c:	00018a2f 	.word	0x00018a2f
   189a0:	00018a2f 	.word	0x00018a2f
   189a4:	00018a2f 	.word	0x00018a2f
   189a8:	00018a2f 	.word	0x00018a2f
   189ac:	00018a2f 	.word	0x00018a2f
   189b0:	00018a2f 	.word	0x00018a2f
   189b4:	00018a2f 	.word	0x00018a2f
   189b8:	00018a2f 	.word	0x00018a2f
   189bc:	00018a2f 	.word	0x00018a2f
   189c0:	00018a17 	.word	0x00018a17
   189c4:	00018a2f 	.word	0x00018a2f
   189c8:	00018a2f 	.word	0x00018a2f
   189cc:	00018a2f 	.word	0x00018a2f
   189d0:	00018a2f 	.word	0x00018a2f
   189d4:	00018a2f 	.word	0x00018a2f
   189d8:	00018a2f 	.word	0x00018a2f
   189dc:	00018a2f 	.word	0x00018a2f
   189e0:	00018a2f 	.word	0x00018a2f
   189e4:	00018a2f 	.word	0x00018a2f
   189e8:	00018a2f 	.word	0x00018a2f
   189ec:	00018a1f 	.word	0x00018a1f
   189f0:	00018a07 	.word	0x00018a07
   189f4:	000189ff 	.word	0x000189ff
   189f8:	2bf0      	cmp	r3, #240	; 0xf0
   189fa:	d014      	beq.n	18a26 <Det_GetErrorMeaning+0x282>
                default: break; //Error ID not registered.
   189fc:	e017      	b.n	18a2e <Det_GetErrorMeaning+0x28a>
                case DIO_E_PARAM_LEVEL: ErrorString_Ptr[2] = "Invalid dio channel level"; break;
   189fe:	4b51      	ldr	r3, [pc, #324]	; (18b44 <Det_GetErrorMeaning+0x3a0>)
   18a00:	4a5b      	ldr	r2, [pc, #364]	; (18b70 <Det_GetErrorMeaning+0x3cc>)
   18a02:	609a      	str	r2, [r3, #8]
   18a04:	e014      	b.n	18a30 <Det_GetErrorMeaning+0x28c>
                case DIO_E_PARAM_POINTER: ErrorString_Ptr[2] = "Invalid input parameter"; break;
   18a06:	4b4f      	ldr	r3, [pc, #316]	; (18b44 <Det_GetErrorMeaning+0x3a0>)
   18a08:	4a50      	ldr	r2, [pc, #320]	; (18b4c <Det_GetErrorMeaning+0x3a8>)
   18a0a:	609a      	str	r2, [r3, #8]
   18a0c:	e010      	b.n	18a30 <Det_GetErrorMeaning+0x28c>
                case DIO_E_PARAM_INVALID_CHANNEL_ID: ErrorString_Ptr[2] = "Invalid dio channel id"; break;
   18a0e:	4b4d      	ldr	r3, [pc, #308]	; (18b44 <Det_GetErrorMeaning+0x3a0>)
   18a10:	4a58      	ldr	r2, [pc, #352]	; (18b74 <Det_GetErrorMeaning+0x3d0>)
   18a12:	609a      	str	r2, [r3, #8]
   18a14:	e00c      	b.n	18a30 <Det_GetErrorMeaning+0x28c>
                case DIO_E_PARAM_INVALID_PORT_ID: ErrorString_Ptr[2] = "Invalid port id"; break;
   18a16:	4b4b      	ldr	r3, [pc, #300]	; (18b44 <Det_GetErrorMeaning+0x3a0>)
   18a18:	4a57      	ldr	r2, [pc, #348]	; (18b78 <Det_GetErrorMeaning+0x3d4>)
   18a1a:	609a      	str	r2, [r3, #8]
   18a1c:	e008      	b.n	18a30 <Det_GetErrorMeaning+0x28c>
                case DIO_E_PARAM_INVALID_GROUP_ID: ErrorString_Ptr[2] = "Invalid channel group id"; break;
   18a1e:	4b49      	ldr	r3, [pc, #292]	; (18b44 <Det_GetErrorMeaning+0x3a0>)
   18a20:	4a56      	ldr	r2, [pc, #344]	; (18b7c <Det_GetErrorMeaning+0x3d8>)
   18a22:	609a      	str	r2, [r3, #8]
   18a24:	e004      	b.n	18a30 <Det_GetErrorMeaning+0x28c>
                case DIO_E_PARAM_CONFIG: ErrorString_Ptr[2] = "Invalid config parameter"; break;
   18a26:	4b47      	ldr	r3, [pc, #284]	; (18b44 <Det_GetErrorMeaning+0x3a0>)
   18a28:	4a55      	ldr	r2, [pc, #340]	; (18b80 <Det_GetErrorMeaning+0x3dc>)
   18a2a:	609a      	str	r2, [r3, #8]
   18a2c:	e000      	b.n	18a30 <Det_GetErrorMeaning+0x28c>
                default: break; //Error ID not registered.
   18a2e:	bf00      	nop
        break;        
   18a30:	e128      	b.n	18c84 <Det_GetErrorMeaning+0x4e0>
            switch ( ErrorId ) {
   18a32:	f89d 3005 	ldrb.w	r3, [sp, #5]
   18a36:	3b10      	subs	r3, #16
   18a38:	2b05      	cmp	r3, #5
   18a3a:	d827      	bhi.n	18a8c <Det_GetErrorMeaning+0x2e8>
   18a3c:	a201      	add	r2, pc, #4	; (adr r2, 18a44 <Det_GetErrorMeaning+0x2a0>)
   18a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18a42:	bf00      	nop
   18a44:	00018a5d 	.word	0x00018a5d
   18a48:	00018a65 	.word	0x00018a65
   18a4c:	00018a75 	.word	0x00018a75
   18a50:	00018a7d 	.word	0x00018a7d
   18a54:	00018a6d 	.word	0x00018a6d
   18a58:	00018a85 	.word	0x00018a85
                case PWM_E_INIT_FAILED: ErrorString_Ptr[2] = "Invalid config pointer"; break;
   18a5c:	4b39      	ldr	r3, [pc, #228]	; (18b44 <Det_GetErrorMeaning+0x3a0>)
   18a5e:	4a49      	ldr	r2, [pc, #292]	; (18b84 <Det_GetErrorMeaning+0x3e0>)
   18a60:	609a      	str	r2, [r3, #8]
   18a62:	e014      	b.n	18a8e <Det_GetErrorMeaning+0x2ea>
                case PWM_E_UNINIT: ErrorString_Ptr[2] = "Driver uninitialized"; break;
   18a64:	4b37      	ldr	r3, [pc, #220]	; (18b44 <Det_GetErrorMeaning+0x3a0>)
   18a66:	4a3a      	ldr	r2, [pc, #232]	; (18b50 <Det_GetErrorMeaning+0x3ac>)
   18a68:	609a      	str	r2, [r3, #8]
   18a6a:	e010      	b.n	18a8e <Det_GetErrorMeaning+0x2ea>
                case PWM_E_ALREADY_INITIALIZED: ErrorString_Ptr[2] = "Driver already initialized"; break;
   18a6c:	4b35      	ldr	r3, [pc, #212]	; (18b44 <Det_GetErrorMeaning+0x3a0>)
   18a6e:	4a39      	ldr	r2, [pc, #228]	; (18b54 <Det_GetErrorMeaning+0x3b0>)
   18a70:	609a      	str	r2, [r3, #8]
   18a72:	e00c      	b.n	18a8e <Det_GetErrorMeaning+0x2ea>
                case PWM_E_PARAM_CHANNEL: ErrorString_Ptr[2] = "Invalid pwm channel"; break;
   18a74:	4b33      	ldr	r3, [pc, #204]	; (18b44 <Det_GetErrorMeaning+0x3a0>)
   18a76:	4a44      	ldr	r2, [pc, #272]	; (18b88 <Det_GetErrorMeaning+0x3e4>)
   18a78:	609a      	str	r2, [r3, #8]
   18a7a:	e008      	b.n	18a8e <Det_GetErrorMeaning+0x2ea>
                case PWM_E_PERIOD_UNCHANGEABLE: ErrorString_Ptr[2] = "Pwm channel period is unchangeable"; break;
   18a7c:	4b31      	ldr	r3, [pc, #196]	; (18b44 <Det_GetErrorMeaning+0x3a0>)
   18a7e:	4a43      	ldr	r2, [pc, #268]	; (18b8c <Det_GetErrorMeaning+0x3e8>)
   18a80:	609a      	str	r2, [r3, #8]
   18a82:	e004      	b.n	18a8e <Det_GetErrorMeaning+0x2ea>
                case PWM_E_PARAM_POINTER: ErrorString_Ptr[2] = "Invalid input parameter"; break;
   18a84:	4b2f      	ldr	r3, [pc, #188]	; (18b44 <Det_GetErrorMeaning+0x3a0>)
   18a86:	4a31      	ldr	r2, [pc, #196]	; (18b4c <Det_GetErrorMeaning+0x3a8>)
   18a88:	609a      	str	r2, [r3, #8]
   18a8a:	e000      	b.n	18a8e <Det_GetErrorMeaning+0x2ea>
                default: break; //Error ID not registered.
   18a8c:	bf00      	nop
        break;
   18a8e:	e0f9      	b.n	18c84 <Det_GetErrorMeaning+0x4e0>
            switch ( ErrorId ) {
   18a90:	f89d 3005 	ldrb.w	r3, [sp, #5]
   18a94:	3b0a      	subs	r3, #10
   18a96:	2b21      	cmp	r3, #33	; 0x21
   18a98:	f200 8086 	bhi.w	18ba8 <Det_GetErrorMeaning+0x404>
   18a9c:	a201      	add	r2, pc, #4	; (adr r2, 18aa4 <Det_GetErrorMeaning+0x300>)
   18a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18aa2:	bf00      	nop
   18aa4:	00018b2d 	.word	0x00018b2d
   18aa8:	00018ba9 	.word	0x00018ba9
   18aac:	00018ba9 	.word	0x00018ba9
   18ab0:	00018b35 	.word	0x00018b35
   18ab4:	00018ba9 	.word	0x00018ba9
   18ab8:	00018ba9 	.word	0x00018ba9
   18abc:	00018ba9 	.word	0x00018ba9
   18ac0:	00018ba9 	.word	0x00018ba9
   18ac4:	00018ba9 	.word	0x00018ba9
   18ac8:	00018ba9 	.word	0x00018ba9
   18acc:	00018b3d 	.word	0x00018b3d
   18ad0:	00018b91 	.word	0x00018b91
   18ad4:	00018ba9 	.word	0x00018ba9
   18ad8:	00018ba9 	.word	0x00018ba9
   18adc:	00018ba9 	.word	0x00018ba9
   18ae0:	00018b99 	.word	0x00018b99
   18ae4:	00018ba9 	.word	0x00018ba9
   18ae8:	00018ba9 	.word	0x00018ba9
   18aec:	00018ba9 	.word	0x00018ba9
   18af0:	00018ba9 	.word	0x00018ba9
   18af4:	00018ba9 	.word	0x00018ba9
   18af8:	00018ba9 	.word	0x00018ba9
   18afc:	00018ba9 	.word	0x00018ba9
   18b00:	00018ba9 	.word	0x00018ba9
   18b04:	00018ba9 	.word	0x00018ba9
   18b08:	00018ba9 	.word	0x00018ba9
   18b0c:	00018ba9 	.word	0x00018ba9
   18b10:	00018ba9 	.word	0x00018ba9
   18b14:	00018ba9 	.word	0x00018ba9
   18b18:	00018ba9 	.word	0x00018ba9
   18b1c:	00018ba9 	.word	0x00018ba9
   18b20:	00018ba9 	.word	0x00018ba9
   18b24:	00018ba9 	.word	0x00018ba9
   18b28:	00018ba1 	.word	0x00018ba1
                case ADC_E_UNINIT: ErrorString_Ptr[2] = "Driver uninitialized"; break;
   18b2c:	4b05      	ldr	r3, [pc, #20]	; (18b44 <Det_GetErrorMeaning+0x3a0>)
   18b2e:	4a08      	ldr	r2, [pc, #32]	; (18b50 <Det_GetErrorMeaning+0x3ac>)
   18b30:	609a      	str	r2, [r3, #8]
   18b32:	e03a      	b.n	18baa <Det_GetErrorMeaning+0x406>
                case ADC_E_ALREADY_INITIALIZED: ErrorString_Ptr[2] = "Driver already initialized"; break;
   18b34:	4b03      	ldr	r3, [pc, #12]	; (18b44 <Det_GetErrorMeaning+0x3a0>)
   18b36:	4a07      	ldr	r2, [pc, #28]	; (18b54 <Det_GetErrorMeaning+0x3b0>)
   18b38:	609a      	str	r2, [r3, #8]
   18b3a:	e036      	b.n	18baa <Det_GetErrorMeaning+0x406>
                case ADC_E_PARAM_POINTER: ErrorString_Ptr[2] = "Invalid pointer"; break;
   18b3c:	4b01      	ldr	r3, [pc, #4]	; (18b44 <Det_GetErrorMeaning+0x3a0>)
   18b3e:	4a06      	ldr	r2, [pc, #24]	; (18b58 <Det_GetErrorMeaning+0x3b4>)
   18b40:	609a      	str	r2, [r3, #8]
   18b42:	e032      	b.n	18baa <Det_GetErrorMeaning+0x406>
   18b44:	1fff9768 	.word	0x1fff9768
   18b48:	000194c0 	.word	0x000194c0
   18b4c:	000194d8 	.word	0x000194d8
   18b50:	000194f0 	.word	0x000194f0
   18b54:	00019508 	.word	0x00019508
   18b58:	00019524 	.word	0x00019524
   18b5c:	00019534 	.word	0x00019534
   18b60:	00019558 	.word	0x00019558
   18b64:	00019570 	.word	0x00019570
   18b68:	00019584 	.word	0x00019584
   18b6c:	000195a4 	.word	0x000195a4
   18b70:	000195bc 	.word	0x000195bc
   18b74:	000195d8 	.word	0x000195d8
   18b78:	000195f0 	.word	0x000195f0
   18b7c:	00019600 	.word	0x00019600
   18b80:	0001961c 	.word	0x0001961c
   18b84:	00019638 	.word	0x00019638
   18b88:	00019650 	.word	0x00019650
   18b8c:	00019664 	.word	0x00019664
                case ADC_E_PARAM_GROUP: ErrorString_Ptr[2] = "Invalid adc group"; break;
   18b90:	4b3f      	ldr	r3, [pc, #252]	; (18c90 <Det_GetErrorMeaning+0x4ec>)
   18b92:	4a40      	ldr	r2, [pc, #256]	; (18c94 <Det_GetErrorMeaning+0x4f0>)
   18b94:	609a      	str	r2, [r3, #8]
   18b96:	e008      	b.n	18baa <Det_GetErrorMeaning+0x406>
                case ADC_E_BUFFER_UNINIT: ErrorString_Ptr[2] = "Buffer pointer not initialized"; break;
   18b98:	4b3d      	ldr	r3, [pc, #244]	; (18c90 <Det_GetErrorMeaning+0x4ec>)
   18b9a:	4a3f      	ldr	r2, [pc, #252]	; (18c98 <Det_GetErrorMeaning+0x4f4>)
   18b9c:	609a      	str	r2, [r3, #8]
   18b9e:	e004      	b.n	18baa <Det_GetErrorMeaning+0x406>
                case ADC_E_TIMEOUT: ErrorString_Ptr[2] = "Calibration operation timed out"; break;
   18ba0:	4b3b      	ldr	r3, [pc, #236]	; (18c90 <Det_GetErrorMeaning+0x4ec>)
   18ba2:	4a3e      	ldr	r2, [pc, #248]	; (18c9c <Det_GetErrorMeaning+0x4f8>)
   18ba4:	609a      	str	r2, [r3, #8]
   18ba6:	e000      	b.n	18baa <Det_GetErrorMeaning+0x406>
                default: break; //Error ID not registered.
   18ba8:	bf00      	nop
        break;
   18baa:	e06b      	b.n	18c84 <Det_GetErrorMeaning+0x4e0>
            switch ( ErrorId ) {
   18bac:	f89d 3005 	ldrb.w	r3, [sp, #5]
   18bb0:	2b05      	cmp	r3, #5
   18bb2:	d827      	bhi.n	18c04 <Det_GetErrorMeaning+0x460>
   18bb4:	a201      	add	r2, pc, #4	; (adr r2, 18bbc <Det_GetErrorMeaning+0x418>)
   18bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18bba:	bf00      	nop
   18bbc:	00018bd5 	.word	0x00018bd5
   18bc0:	00018bdd 	.word	0x00018bdd
   18bc4:	00018be5 	.word	0x00018be5
   18bc8:	00018bed 	.word	0x00018bed
   18bcc:	00018bf5 	.word	0x00018bf5
   18bd0:	00018bfd 	.word	0x00018bfd
                case SCHEDULER_E_PARAM_CONFIG: ErrorString_Ptr[2] = "Invalid config pointer"; break;
   18bd4:	4b2e      	ldr	r3, [pc, #184]	; (18c90 <Det_GetErrorMeaning+0x4ec>)
   18bd6:	4a32      	ldr	r2, [pc, #200]	; (18ca0 <Det_GetErrorMeaning+0x4fc>)
   18bd8:	609a      	str	r2, [r3, #8]
   18bda:	e014      	b.n	18c06 <Det_GetErrorMeaning+0x462>
                case SCHEDULER_E_QUEUE_ID: ErrorString_Ptr[2] = "Invalid queue id"; break;
   18bdc:	4b2c      	ldr	r3, [pc, #176]	; (18c90 <Det_GetErrorMeaning+0x4ec>)
   18bde:	4a31      	ldr	r2, [pc, #196]	; (18ca4 <Det_GetErrorMeaning+0x500>)
   18be0:	609a      	str	r2, [r3, #8]
   18be2:	e010      	b.n	18c06 <Det_GetErrorMeaning+0x462>
                case SCHEDULER_E_QUEUE_STATUS: ErrorString_Ptr[2] = "Invalid queue status flag"; break;
   18be4:	4b2a      	ldr	r3, [pc, #168]	; (18c90 <Det_GetErrorMeaning+0x4ec>)
   18be6:	4a30      	ldr	r2, [pc, #192]	; (18ca8 <Det_GetErrorMeaning+0x504>)
   18be8:	609a      	str	r2, [r3, #8]
   18bea:	e00c      	b.n	18c06 <Det_GetErrorMeaning+0x462>
                case SCHEDULER_E_TASK_ID: ErrorString_Ptr[2] = "Invalid task id"; break;
   18bec:	4b28      	ldr	r3, [pc, #160]	; (18c90 <Det_GetErrorMeaning+0x4ec>)
   18bee:	4a2f      	ldr	r2, [pc, #188]	; (18cac <Det_GetErrorMeaning+0x508>)
   18bf0:	609a      	str	r2, [r3, #8]
   18bf2:	e008      	b.n	18c06 <Det_GetErrorMeaning+0x462>
                case SCHEDULER_E_PERIODICITY: ErrorString_Ptr[2] = "Invalid task or timer periodicity"; break;
   18bf4:	4b26      	ldr	r3, [pc, #152]	; (18c90 <Det_GetErrorMeaning+0x4ec>)
   18bf6:	4a2e      	ldr	r2, [pc, #184]	; (18cb0 <Det_GetErrorMeaning+0x50c>)
   18bf8:	609a      	str	r2, [r3, #8]
   18bfa:	e004      	b.n	18c06 <Det_GetErrorMeaning+0x462>
                case SCHEDULER_E_TIMER_ID : ErrorString_Ptr[2] = "Invalid timer id"; break;
   18bfc:	4b24      	ldr	r3, [pc, #144]	; (18c90 <Det_GetErrorMeaning+0x4ec>)
   18bfe:	4a2d      	ldr	r2, [pc, #180]	; (18cb4 <Det_GetErrorMeaning+0x510>)
   18c00:	609a      	str	r2, [r3, #8]
   18c02:	e000      	b.n	18c06 <Det_GetErrorMeaning+0x462>
                default: break; //Error ID not registered.
   18c04:	bf00      	nop
        break;
   18c06:	e03d      	b.n	18c84 <Det_GetErrorMeaning+0x4e0>
            switch ( ErrorId ) {
   18c08:	f89d 3005 	ldrb.w	r3, [sp, #5]
   18c0c:	2b02      	cmp	r3, #2
   18c0e:	d00e      	beq.n	18c2e <Det_GetErrorMeaning+0x48a>
   18c10:	2b02      	cmp	r3, #2
   18c12:	dc10      	bgt.n	18c36 <Det_GetErrorMeaning+0x492>
   18c14:	2b00      	cmp	r3, #0
   18c16:	d002      	beq.n	18c1e <Det_GetErrorMeaning+0x47a>
   18c18:	2b01      	cmp	r3, #1
   18c1a:	d004      	beq.n	18c26 <Det_GetErrorMeaning+0x482>
                default: break; //Error ID not registered.
   18c1c:	e00b      	b.n	18c36 <Det_GetErrorMeaning+0x492>
                case HWIOAB_BUTTONS_E_CONFIG: ErrorString_Ptr[2] = "Invalid config pointer"; break;
   18c1e:	4b1c      	ldr	r3, [pc, #112]	; (18c90 <Det_GetErrorMeaning+0x4ec>)
   18c20:	4a1f      	ldr	r2, [pc, #124]	; (18ca0 <Det_GetErrorMeaning+0x4fc>)
   18c22:	609a      	str	r2, [r3, #8]
   18c24:	e008      	b.n	18c38 <Det_GetErrorMeaning+0x494>
                case HWIOAB_BUTTONS_E_BUTTON_ID: ErrorString_Ptr[2] = "Invalid button id"; break;
   18c26:	4b1a      	ldr	r3, [pc, #104]	; (18c90 <Det_GetErrorMeaning+0x4ec>)
   18c28:	4a23      	ldr	r2, [pc, #140]	; (18cb8 <Det_GetErrorMeaning+0x514>)
   18c2a:	609a      	str	r2, [r3, #8]
   18c2c:	e004      	b.n	18c38 <Det_GetErrorMeaning+0x494>
                case HWIOAB_BUTTONS_E_STATE: ErrorString_Ptr[2] = "Invalid button state"; break;
   18c2e:	4b18      	ldr	r3, [pc, #96]	; (18c90 <Det_GetErrorMeaning+0x4ec>)
   18c30:	4a22      	ldr	r2, [pc, #136]	; (18cbc <Det_GetErrorMeaning+0x518>)
   18c32:	609a      	str	r2, [r3, #8]
   18c34:	e000      	b.n	18c38 <Det_GetErrorMeaning+0x494>
                default: break; //Error ID not registered.
   18c36:	bf00      	nop
        break;
   18c38:	e024      	b.n	18c84 <Det_GetErrorMeaning+0x4e0>
            switch ( ErrorId ) {
   18c3a:	f89d 3005 	ldrb.w	r3, [sp, #5]
   18c3e:	2b00      	cmp	r3, #0
   18c40:	d002      	beq.n	18c48 <Det_GetErrorMeaning+0x4a4>
   18c42:	2b01      	cmp	r3, #1
   18c44:	d004      	beq.n	18c50 <Det_GetErrorMeaning+0x4ac>
                default: break; //Error ID not registered.
   18c46:	e007      	b.n	18c58 <Det_GetErrorMeaning+0x4b4>
                case HWIOAB_LEDS_E_CONFIG: ErrorString_Ptr[2] = "Invalid config pointer"; break;
   18c48:	4b11      	ldr	r3, [pc, #68]	; (18c90 <Det_GetErrorMeaning+0x4ec>)
   18c4a:	4a15      	ldr	r2, [pc, #84]	; (18ca0 <Det_GetErrorMeaning+0x4fc>)
   18c4c:	609a      	str	r2, [r3, #8]
   18c4e:	e003      	b.n	18c58 <Det_GetErrorMeaning+0x4b4>
                case HWIOAB_LEDS_E_LED_ID: ErrorString_Ptr[2] = "Invalid led id"; break;
   18c50:	4b0f      	ldr	r3, [pc, #60]	; (18c90 <Det_GetErrorMeaning+0x4ec>)
   18c52:	4a1b      	ldr	r2, [pc, #108]	; (18cc0 <Det_GetErrorMeaning+0x51c>)
   18c54:	609a      	str	r2, [r3, #8]
   18c56:	bf00      	nop
        break;
   18c58:	e014      	b.n	18c84 <Det_GetErrorMeaning+0x4e0>
            switch ( ErrorId ) {
   18c5a:	f89d 3005 	ldrb.w	r3, [sp, #5]
   18c5e:	2b00      	cmp	r3, #0
   18c60:	d103      	bne.n	18c6a <Det_GetErrorMeaning+0x4c6>
                case HWIOAB_POTS_E_PARAM: ErrorString_Ptr[2] = "Invalid input pointer"; break;
   18c62:	4b0b      	ldr	r3, [pc, #44]	; (18c90 <Det_GetErrorMeaning+0x4ec>)
   18c64:	4a17      	ldr	r2, [pc, #92]	; (18cc4 <Det_GetErrorMeaning+0x520>)
   18c66:	609a      	str	r2, [r3, #8]
   18c68:	e000      	b.n	18c6c <Det_GetErrorMeaning+0x4c8>
                default: break; //Error ID not registered.
   18c6a:	bf00      	nop
        break;
   18c6c:	e00a      	b.n	18c84 <Det_GetErrorMeaning+0x4e0>
            switch ( ErrorId ) {
   18c6e:	f89d 3005 	ldrb.w	r3, [sp, #5]
   18c72:	2b00      	cmp	r3, #0
   18c74:	d103      	bne.n	18c7e <Det_GetErrorMeaning+0x4da>
                case HWIOAB_BUZZER_E_TONE: ErrorString_Ptr[2] = "Invalid buzzer tone"; break;
   18c76:	4b06      	ldr	r3, [pc, #24]	; (18c90 <Det_GetErrorMeaning+0x4ec>)
   18c78:	4a13      	ldr	r2, [pc, #76]	; (18cc8 <Det_GetErrorMeaning+0x524>)
   18c7a:	609a      	str	r2, [r3, #8]
   18c7c:	e000      	b.n	18c80 <Det_GetErrorMeaning+0x4dc>
                default: break; //Error ID not registered.
   18c7e:	bf00      	nop
        break;
   18c80:	e000      	b.n	18c84 <Det_GetErrorMeaning+0x4e0>
        break;
   18c82:	bf00      	nop
    }

    return ErrorString_Ptr[2];
   18c84:	4b02      	ldr	r3, [pc, #8]	; (18c90 <Det_GetErrorMeaning+0x4ec>)
   18c86:	689b      	ldr	r3, [r3, #8]
}
   18c88:	4618      	mov	r0, r3
   18c8a:	b002      	add	sp, #8
   18c8c:	4770      	bx	lr
   18c8e:	bf00      	nop
   18c90:	1fff9768 	.word	0x1fff9768
   18c94:	00019688 	.word	0x00019688
   18c98:	0001969c 	.word	0x0001969c
   18c9c:	000196bc 	.word	0x000196bc
   18ca0:	00019638 	.word	0x00019638
   18ca4:	000196dc 	.word	0x000196dc
   18ca8:	000196f0 	.word	0x000196f0
   18cac:	0001970c 	.word	0x0001970c
   18cb0:	0001971c 	.word	0x0001971c
   18cb4:	00019740 	.word	0x00019740
   18cb8:	00019754 	.word	0x00019754
   18cbc:	00019768 	.word	0x00019768
   18cc0:	00019780 	.word	0x00019780
   18cc4:	00019790 	.word	0x00019790
   18cc8:	000197a8 	.word	0x000197a8

00018ccc <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
   18ccc:	b510      	push	{r4, lr}
   18cce:	b088      	sub	sp, #32
   18cd0:	4604      	mov	r4, r0
   18cd2:	4608      	mov	r0, r1
   18cd4:	4611      	mov	r1, r2
   18cd6:	461a      	mov	r2, r3
   18cd8:	4623      	mov	r3, r4
   18cda:	f8ad 300e 	strh.w	r3, [sp, #14]
   18cde:	4603      	mov	r3, r0
   18ce0:	f88d 300d 	strb.w	r3, [sp, #13]
   18ce4:	460b      	mov	r3, r1
   18ce6:	f88d 300c 	strb.w	r3, [sp, #12]
   18cea:	4613      	mov	r3, r2
   18cec:	f88d 300b 	strb.w	r3, [sp, #11]
    //local data.
    char* Strings_error[3]; //Pointer to strings for the error message.

    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   18cf0:	f7e8 fde6 	bl	18c0 <Sys_GetCoreID>
   18cf4:	4603      	mov	r3, r0
   18cf6:	9307      	str	r3, [sp, #28]

    Det_ModuleId[u32CoreId] = ModuleId;
   18cf8:	4921      	ldr	r1, [pc, #132]	; (18d80 <Det_ReportError+0xb4>)
   18cfa:	9b07      	ldr	r3, [sp, #28]
   18cfc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   18d00:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
   18d04:	4a1f      	ldr	r2, [pc, #124]	; (18d84 <Det_ReportError+0xb8>)
   18d06:	9b07      	ldr	r3, [sp, #28]
   18d08:	4413      	add	r3, r2
   18d0a:	f89d 200d 	ldrb.w	r2, [sp, #13]
   18d0e:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
   18d10:	4a1d      	ldr	r2, [pc, #116]	; (18d88 <Det_ReportError+0xbc>)
   18d12:	9b07      	ldr	r3, [sp, #28]
   18d14:	4413      	add	r3, r2
   18d16:	f89d 200c 	ldrb.w	r2, [sp, #12]
   18d1a:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
   18d1c:	4a1b      	ldr	r2, [pc, #108]	; (18d8c <Det_ReportError+0xc0>)
   18d1e:	9b07      	ldr	r3, [sp, #28]
   18d20:	4413      	add	r3, r2
   18d22:	f89d 200b 	ldrb.w	r2, [sp, #11]
   18d26:	701a      	strb	r2, [r3, #0]

    //Obtaining strings for error message.
    Strings_error[0] = Det_GetModuleName( ModuleId );
   18d28:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   18d2c:	4618      	mov	r0, r3
   18d2e:	f7ff f967 	bl	18000 <Det_GetModuleName>
   18d32:	4603      	mov	r3, r0
   18d34:	9304      	str	r3, [sp, #16]
    Strings_error[1] = Det_GetApiName( ModuleId, ApiId );
   18d36:	f89d 200c 	ldrb.w	r2, [sp, #12]
   18d3a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   18d3e:	4611      	mov	r1, r2
   18d40:	4618      	mov	r0, r3
   18d42:	f7ff fa03 	bl	1814c <Det_GetApiName>
   18d46:	4603      	mov	r3, r0
   18d48:	9305      	str	r3, [sp, #20]
    Strings_error[2] = Det_GetErrorMeaning( ModuleId, ErrorId );
   18d4a:	f89d 200b 	ldrb.w	r2, [sp, #11]
   18d4e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   18d52:	4611      	mov	r1, r2
   18d54:	4618      	mov	r0, r3
   18d56:	f7ff fd25 	bl	187a4 <Det_GetErrorMeaning>
   18d5a:	4603      	mov	r3, r0
   18d5c:	9306      	str	r3, [sp, #24]

    SEGGER_RTT_printf( 0, "Error: Error in %s in function %s with the instance %d, %s\n", 
   18d5e:	9904      	ldr	r1, [sp, #16]
   18d60:	9805      	ldr	r0, [sp, #20]
   18d62:	f89d 300d 	ldrb.w	r3, [sp, #13]
   18d66:	9a06      	ldr	r2, [sp, #24]
   18d68:	9201      	str	r2, [sp, #4]
   18d6a:	9300      	str	r3, [sp, #0]
   18d6c:	4603      	mov	r3, r0
   18d6e:	460a      	mov	r2, r1
   18d70:	4907      	ldr	r1, [pc, #28]	; (18d90 <Det_ReportError+0xc4>)
   18d72:	2000      	movs	r0, #0
   18d74:	f7e9 faaa 	bl	22cc <SEGGER_RTT_printf>
    Strings_error[0], Strings_error[1], InstanceId, Strings_error[2] );

    return E_OK;
   18d78:	2300      	movs	r3, #0
}
   18d7a:	4618      	mov	r0, r3
   18d7c:	b008      	add	sp, #32
   18d7e:	bd10      	pop	{r4, pc}
   18d80:	1fff9778 	.word	0x1fff9778
   18d84:	1fff9744 	.word	0x1fff9744
   18d88:	1fff9748 	.word	0x1fff9748
   18d8c:	1fff974c 	.word	0x1fff974c
   18d90:	000197bc 	.word	0x000197bc

00018d94 <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
   18d94:	b510      	push	{r4, lr}
   18d96:	b084      	sub	sp, #16
   18d98:	4604      	mov	r4, r0
   18d9a:	4608      	mov	r0, r1
   18d9c:	4611      	mov	r1, r2
   18d9e:	461a      	mov	r2, r3
   18da0:	4623      	mov	r3, r4
   18da2:	f8ad 3006 	strh.w	r3, [sp, #6]
   18da6:	4603      	mov	r3, r0
   18da8:	f88d 3005 	strb.w	r3, [sp, #5]
   18dac:	460b      	mov	r3, r1
   18dae:	f88d 3004 	strb.w	r3, [sp, #4]
   18db2:	4613      	mov	r3, r2
   18db4:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   18db8:	f7e8 fd82 	bl	18c0 <Sys_GetCoreID>
   18dbc:	4603      	mov	r3, r0
   18dbe:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
   18dc0:	490d      	ldr	r1, [pc, #52]	; (18df8 <Det_ReportRuntimeError+0x64>)
   18dc2:	9b03      	ldr	r3, [sp, #12]
   18dc4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   18dc8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
   18dcc:	4a0b      	ldr	r2, [pc, #44]	; (18dfc <Det_ReportRuntimeError+0x68>)
   18dce:	9b03      	ldr	r3, [sp, #12]
   18dd0:	4413      	add	r3, r2
   18dd2:	f89d 2005 	ldrb.w	r2, [sp, #5]
   18dd6:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
   18dd8:	4a09      	ldr	r2, [pc, #36]	; (18e00 <Det_ReportRuntimeError+0x6c>)
   18dda:	9b03      	ldr	r3, [sp, #12]
   18ddc:	4413      	add	r3, r2
   18dde:	f89d 2004 	ldrb.w	r2, [sp, #4]
   18de2:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
   18de4:	4a07      	ldr	r2, [pc, #28]	; (18e04 <Det_ReportRuntimeError+0x70>)
   18de6:	9b03      	ldr	r3, [sp, #12]
   18de8:	4413      	add	r3, r2
   18dea:	f89d 2003 	ldrb.w	r2, [sp, #3]
   18dee:	701a      	strb	r2, [r3, #0]

    return E_OK;
   18df0:	2300      	movs	r3, #0
}
   18df2:	4618      	mov	r0, r3
   18df4:	b004      	add	sp, #16
   18df6:	bd10      	pop	{r4, pc}
   18df8:	1fff977c 	.word	0x1fff977c
   18dfc:	1fff9750 	.word	0x1fff9750
   18e00:	1fff9754 	.word	0x1fff9754
   18e04:	1fff9758 	.word	0x1fff9758

00018e08 <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
   18e08:	b510      	push	{r4, lr}
   18e0a:	b084      	sub	sp, #16
   18e0c:	4604      	mov	r4, r0
   18e0e:	4608      	mov	r0, r1
   18e10:	4611      	mov	r1, r2
   18e12:	461a      	mov	r2, r3
   18e14:	4623      	mov	r3, r4
   18e16:	f8ad 3006 	strh.w	r3, [sp, #6]
   18e1a:	4603      	mov	r3, r0
   18e1c:	f88d 3005 	strb.w	r3, [sp, #5]
   18e20:	460b      	mov	r3, r1
   18e22:	f88d 3004 	strb.w	r3, [sp, #4]
   18e26:	4613      	mov	r3, r2
   18e28:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
   18e2c:	f7e8 fd48 	bl	18c0 <Sys_GetCoreID>
   18e30:	4603      	mov	r3, r0
   18e32:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
   18e34:	490d      	ldr	r1, [pc, #52]	; (18e6c <Det_ReportTransientFault+0x64>)
   18e36:	9b03      	ldr	r3, [sp, #12]
   18e38:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   18e3c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
   18e40:	4a0b      	ldr	r2, [pc, #44]	; (18e70 <Det_ReportTransientFault+0x68>)
   18e42:	9b03      	ldr	r3, [sp, #12]
   18e44:	4413      	add	r3, r2
   18e46:	f89d 2005 	ldrb.w	r2, [sp, #5]
   18e4a:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
   18e4c:	4a09      	ldr	r2, [pc, #36]	; (18e74 <Det_ReportTransientFault+0x6c>)
   18e4e:	9b03      	ldr	r3, [sp, #12]
   18e50:	4413      	add	r3, r2
   18e52:	f89d 2004 	ldrb.w	r2, [sp, #4]
   18e56:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
   18e58:	4a07      	ldr	r2, [pc, #28]	; (18e78 <Det_ReportTransientFault+0x70>)
   18e5a:	9b03      	ldr	r3, [sp, #12]
   18e5c:	4413      	add	r3, r2
   18e5e:	f89d 2003 	ldrb.w	r2, [sp, #3]
   18e62:	701a      	strb	r2, [r3, #0]

    return E_OK;
   18e64:	2300      	movs	r3, #0
}
   18e66:	4618      	mov	r0, r3
   18e68:	b004      	add	sp, #16
   18e6a:	bd10      	pop	{r4, pc}
   18e6c:	1fff9774 	.word	0x1fff9774
   18e70:	1fff975c 	.word	0x1fff975c
   18e74:	1fff9760 	.word	0x1fff9760
   18e78:	1fff9764 	.word	0x1fff9764

00018e7c <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
   18e7c:	bf00      	nop
   18e7e:	4770      	bx	lr

00018e80 <Fls_ACEraseRomEnd>:
   18e80:	2075634d 	.word	0x2075634d
   18e84:	75646f6d 	.word	0x75646f6d
   18e88:	0000656c 	.word	0x0000656c
   18e8c:	74616c50 	.word	0x74616c50
   18e90:	6d726f66 	.word	0x6d726f66
   18e94:	646f6d20 	.word	0x646f6d20
   18e98:	00656c75 	.word	0x00656c75
   18e9c:	74726f50 	.word	0x74726f50
   18ea0:	646f6d20 	.word	0x646f6d20
   18ea4:	00656c75 	.word	0x00656c75
   18ea8:	206f6944 	.word	0x206f6944
   18eac:	75646f6d 	.word	0x75646f6d
   18eb0:	0000656c 	.word	0x0000656c
   18eb4:	206d7750 	.word	0x206d7750
   18eb8:	75646f6d 	.word	0x75646f6d
   18ebc:	0000656c 	.word	0x0000656c
   18ec0:	20636441 	.word	0x20636441
   18ec4:	75646f6d 	.word	0x75646f6d
   18ec8:	0000656c 	.word	0x0000656c
   18ecc:	65686353 	.word	0x65686353
   18ed0:	656c7564 	.word	0x656c7564
   18ed4:	6f6d2072 	.word	0x6f6d2072
   18ed8:	656c7564 	.word	0x656c7564
   18edc:	00000000 	.word	0x00000000
   18ee0:	74747542 	.word	0x74747542
   18ee4:	20736e6f 	.word	0x20736e6f
   18ee8:	61204f49 	.word	0x61204f49
   18eec:	72747362 	.word	0x72747362
   18ef0:	69746361 	.word	0x69746361
   18ef4:	6d206e6f 	.word	0x6d206e6f
   18ef8:	6c75646f 	.word	0x6c75646f
   18efc:	00000065 	.word	0x00000065
   18f00:	7364654c 	.word	0x7364654c
   18f04:	204f4920 	.word	0x204f4920
   18f08:	74736261 	.word	0x74736261
   18f0c:	74636172 	.word	0x74636172
   18f10:	206e6f69 	.word	0x206e6f69
   18f14:	75646f6d 	.word	0x75646f6d
   18f18:	0000656c 	.word	0x0000656c
   18f1c:	73746f50 	.word	0x73746f50
   18f20:	204f4920 	.word	0x204f4920
   18f24:	74736261 	.word	0x74736261
   18f28:	74636172 	.word	0x74636172
   18f2c:	206e6f69 	.word	0x206e6f69
   18f30:	75646f6d 	.word	0x75646f6d
   18f34:	0000656c 	.word	0x0000656c
   18f38:	7a7a7542 	.word	0x7a7a7542
   18f3c:	49207265 	.word	0x49207265
   18f40:	6261204f 	.word	0x6261204f
   18f44:	61727473 	.word	0x61727473
   18f48:	6f697463 	.word	0x6f697463
   18f4c:	6f6d206e 	.word	0x6f6d206e
   18f50:	656c7564 	.word	0x656c7564
   18f54:	00000000 	.word	0x00000000
   18f58:	5f75634d 	.word	0x5f75634d
   18f5c:	74696e49 	.word	0x74696e49
   18f60:	00002928 	.word	0x00002928
   18f64:	5f75634d 	.word	0x5f75634d
   18f68:	74696e49 	.word	0x74696e49
   18f6c:	636f6c43 	.word	0x636f6c43
   18f70:	0029286b 	.word	0x0029286b
   18f74:	5f75634d 	.word	0x5f75634d
   18f78:	4d746553 	.word	0x4d746553
   18f7c:	2865646f 	.word	0x2865646f
   18f80:	00000029 	.word	0x00000029
   18f84:	5f75634d 	.word	0x5f75634d
   18f88:	56746547 	.word	0x56746547
   18f8c:	69737265 	.word	0x69737265
   18f90:	6e496e6f 	.word	0x6e496e6f
   18f94:	29286f66 	.word	0x29286f66
   18f98:	00000000 	.word	0x00000000
   18f9c:	74616c50 	.word	0x74616c50
   18fa0:	6d726f66 	.word	0x6d726f66
   18fa4:	696e495f 	.word	0x696e495f
   18fa8:	00292874 	.word	0x00292874
   18fac:	74616c50 	.word	0x74616c50
   18fb0:	6d726f66 	.word	0x6d726f66
   18fb4:	7465535f 	.word	0x7465535f
   18fb8:	28717249 	.word	0x28717249
   18fbc:	00000029 	.word	0x00000029
   18fc0:	74616c50 	.word	0x74616c50
   18fc4:	6d726f66 	.word	0x6d726f66
   18fc8:	7465535f 	.word	0x7465535f
   18fcc:	50717249 	.word	0x50717249
   18fd0:	726f6972 	.word	0x726f6972
   18fd4:	28797469 	.word	0x28797469
   18fd8:	00000029 	.word	0x00000029
   18fdc:	74616c50 	.word	0x74616c50
   18fe0:	6d726f66 	.word	0x6d726f66
   18fe4:	7465475f 	.word	0x7465475f
   18fe8:	50717249 	.word	0x50717249
   18fec:	726f6972 	.word	0x726f6972
   18ff0:	28797469 	.word	0x28797469
   18ff4:	00000029 	.word	0x00000029
   18ff8:	74616c50 	.word	0x74616c50
   18ffc:	6d726f66 	.word	0x6d726f66
   19000:	736e495f 	.word	0x736e495f
   19004:	6c6c6174 	.word	0x6c6c6174
   19008:	48717249 	.word	0x48717249
   1900c:	6c646e61 	.word	0x6c646e61
   19010:	29287265 	.word	0x29287265
   19014:	00000000 	.word	0x00000000
   19018:	74726f50 	.word	0x74726f50
   1901c:	696e495f 	.word	0x696e495f
   19020:	00292874 	.word	0x00292874
   19024:	74726f50 	.word	0x74726f50
   19028:	7465535f 	.word	0x7465535f
   1902c:	446e6950 	.word	0x446e6950
   19030:	63657269 	.word	0x63657269
   19034:	6e6f6974 	.word	0x6e6f6974
   19038:	00002928 	.word	0x00002928
   1903c:	74726f50 	.word	0x74726f50
   19040:	7465535f 	.word	0x7465535f
   19044:	4d6e6950 	.word	0x4d6e6950
   19048:	2865646f 	.word	0x2865646f
   1904c:	00000029 	.word	0x00000029
   19050:	74726f50 	.word	0x74726f50
   19054:	6665525f 	.word	0x6665525f
   19058:	68736572 	.word	0x68736572
   1905c:	74726f50 	.word	0x74726f50
   19060:	65726944 	.word	0x65726944
   19064:	6f697463 	.word	0x6f697463
   19068:	0029286e 	.word	0x0029286e
   1906c:	74726f50 	.word	0x74726f50
   19070:	7465475f 	.word	0x7465475f
   19074:	73726556 	.word	0x73726556
   19078:	496e6f69 	.word	0x496e6f69
   1907c:	286f666e 	.word	0x286f666e
   19080:	00000029 	.word	0x00000029
   19084:	5f6f6944 	.word	0x5f6f6944
   19088:	74697257 	.word	0x74697257
   1908c:	61684365 	.word	0x61684365
   19090:	6c656e6e 	.word	0x6c656e6e
   19094:	00002928 	.word	0x00002928
   19098:	5f6f6944 	.word	0x5f6f6944
   1909c:	64616552 	.word	0x64616552
   190a0:	6e616843 	.word	0x6e616843
   190a4:	286c656e 	.word	0x286c656e
   190a8:	00000029 	.word	0x00000029
   190ac:	5f6f6944 	.word	0x5f6f6944
   190b0:	70696c46 	.word	0x70696c46
   190b4:	6e616843 	.word	0x6e616843
   190b8:	286c656e 	.word	0x286c656e
   190bc:	00000029 	.word	0x00000029
   190c0:	5f6f6944 	.word	0x5f6f6944
   190c4:	74697257 	.word	0x74697257
   190c8:	61684365 	.word	0x61684365
   190cc:	6c656e6e 	.word	0x6c656e6e
   190d0:	756f7247 	.word	0x756f7247
   190d4:	00292870 	.word	0x00292870
   190d8:	5f6f6944 	.word	0x5f6f6944
   190dc:	64616552 	.word	0x64616552
   190e0:	6e616843 	.word	0x6e616843
   190e4:	476c656e 	.word	0x476c656e
   190e8:	70756f72 	.word	0x70756f72
   190ec:	00002928 	.word	0x00002928
   190f0:	5f6f6944 	.word	0x5f6f6944
   190f4:	64616552 	.word	0x64616552
   190f8:	74726f50 	.word	0x74726f50
   190fc:	00002928 	.word	0x00002928
   19100:	5f6f6944 	.word	0x5f6f6944
   19104:	74697257 	.word	0x74697257
   19108:	726f5065 	.word	0x726f5065
   1910c:	00292874 	.word	0x00292874
   19110:	5f6f6944 	.word	0x5f6f6944
   19114:	56746547 	.word	0x56746547
   19118:	69737265 	.word	0x69737265
   1911c:	6e496e6f 	.word	0x6e496e6f
   19120:	29286f66 	.word	0x29286f66
   19124:	00000000 	.word	0x00000000
   19128:	5f6d7750 	.word	0x5f6d7750
   1912c:	74696e49 	.word	0x74696e49
   19130:	00002928 	.word	0x00002928
   19134:	5f6d7750 	.word	0x5f6d7750
   19138:	6e496544 	.word	0x6e496544
   1913c:	29287469 	.word	0x29287469
   19140:	00000000 	.word	0x00000000
   19144:	5f6d7750 	.word	0x5f6d7750
   19148:	44746553 	.word	0x44746553
   1914c:	43797475 	.word	0x43797475
   19150:	656c6379 	.word	0x656c6379
   19154:	00002928 	.word	0x00002928
   19158:	5f6d7750 	.word	0x5f6d7750
   1915c:	50746553 	.word	0x50746553
   19160:	6f697265 	.word	0x6f697265
   19164:	646e4164 	.word	0x646e4164
   19168:	79747544 	.word	0x79747544
   1916c:	00002928 	.word	0x00002928
   19170:	5f6d7750 	.word	0x5f6d7750
   19174:	4f746553 	.word	0x4f746553
   19178:	75707475 	.word	0x75707475
   1917c:	496f5474 	.word	0x496f5474
   19180:	28656c64 	.word	0x28656c64
   19184:	00000029 	.word	0x00000029
   19188:	5f6d7750 	.word	0x5f6d7750
   1918c:	56746547 	.word	0x56746547
   19190:	69737265 	.word	0x69737265
   19194:	6e496e6f 	.word	0x6e496e6f
   19198:	29286f66 	.word	0x29286f66
   1919c:	00000000 	.word	0x00000000
   191a0:	5f636441 	.word	0x5f636441
   191a4:	74696e49 	.word	0x74696e49
   191a8:	00002928 	.word	0x00002928
   191ac:	5f636441 	.word	0x5f636441
   191b0:	6e496544 	.word	0x6e496544
   191b4:	29287469 	.word	0x29287469
   191b8:	00000000 	.word	0x00000000
   191bc:	5f636441 	.word	0x5f636441
   191c0:	72617453 	.word	0x72617453
   191c4:	6f724774 	.word	0x6f724774
   191c8:	6f437075 	.word	0x6f437075
   191cc:	7265766e 	.word	0x7265766e
   191d0:	6e6f6973 	.word	0x6e6f6973
   191d4:	00002928 	.word	0x00002928
   191d8:	5f636441 	.word	0x5f636441
   191dc:	706f7453 	.word	0x706f7453
   191e0:	756f7247 	.word	0x756f7247
   191e4:	6e6f4370 	.word	0x6e6f4370
   191e8:	73726576 	.word	0x73726576
   191ec:	286e6f69 	.word	0x286e6f69
   191f0:	00000029 	.word	0x00000029
   191f4:	5f636441 	.word	0x5f636441
   191f8:	64616552 	.word	0x64616552
   191fc:	756f7247 	.word	0x756f7247
   19200:	00292870 	.word	0x00292870
   19204:	5f636441 	.word	0x5f636441
   19208:	47746547 	.word	0x47746547
   1920c:	70756f72 	.word	0x70756f72
   19210:	74617453 	.word	0x74617453
   19214:	29287375 	.word	0x29287375
   19218:	00000000 	.word	0x00000000
   1921c:	5f636441 	.word	0x5f636441
   19220:	696c6143 	.word	0x696c6143
   19224:	74617262 	.word	0x74617262
   19228:	00292865 	.word	0x00292865
   1922c:	5f636441 	.word	0x5f636441
   19230:	75746553 	.word	0x75746553
   19234:	73655270 	.word	0x73655270
   19238:	42746c75 	.word	0x42746c75
   1923c:	65666675 	.word	0x65666675
   19240:	00292872 	.word	0x00292872
   19244:	5f636441 	.word	0x5f636441
   19248:	56746547 	.word	0x56746547
   1924c:	69737265 	.word	0x69737265
   19250:	6e496e6f 	.word	0x6e496e6f
   19254:	29286f66 	.word	0x29286f66
   19258:	00000000 	.word	0x00000000
   1925c:	65686353 	.word	0x65686353
   19260:	656c7564 	.word	0x656c7564
   19264:	6e495f72 	.word	0x6e495f72
   19268:	29287469 	.word	0x29287469
   1926c:	00000000 	.word	0x00000000
   19270:	65686353 	.word	0x65686353
   19274:	656c7564 	.word	0x656c7564
   19278:	65475f72 	.word	0x65475f72
   1927c:	61745374 	.word	0x61745374
   19280:	51737574 	.word	0x51737574
   19284:	65756575 	.word	0x65756575
   19288:	00002928 	.word	0x00002928
   1928c:	65686353 	.word	0x65686353
   19290:	656c7564 	.word	0x656c7564
   19294:	6c465f72 	.word	0x6c465f72
   19298:	51687375 	.word	0x51687375
   1929c:	65756575 	.word	0x65756575
   192a0:	00002928 	.word	0x00002928
   192a4:	65686353 	.word	0x65686353
   192a8:	656c7564 	.word	0x656c7564
   192ac:	72575f72 	.word	0x72575f72
   192b0:	51657469 	.word	0x51657469
   192b4:	65756575 	.word	0x65756575
   192b8:	00002928 	.word	0x00002928
   192bc:	65686353 	.word	0x65686353
   192c0:	656c7564 	.word	0x656c7564
   192c4:	65525f72 	.word	0x65525f72
   192c8:	75516461 	.word	0x75516461
   192cc:	28657565 	.word	0x28657565
   192d0:	00000029 	.word	0x00000029
   192d4:	65686353 	.word	0x65686353
   192d8:	656c7564 	.word	0x656c7564
   192dc:	74535f72 	.word	0x74535f72
   192e0:	54747261 	.word	0x54747261
   192e4:	286b7361 	.word	0x286b7361
   192e8:	00000029 	.word	0x00000029
   192ec:	65686353 	.word	0x65686353
   192f0:	656c7564 	.word	0x656c7564
   192f4:	74535f72 	.word	0x74535f72
   192f8:	6154706f 	.word	0x6154706f
   192fc:	29286b73 	.word	0x29286b73
   19300:	00000000 	.word	0x00000000
   19304:	65686353 	.word	0x65686353
   19308:	656c7564 	.word	0x656c7564
   1930c:	65505f72 	.word	0x65505f72
   19310:	646f6972 	.word	0x646f6972
   19314:	6b736154 	.word	0x6b736154
   19318:	00002928 	.word	0x00002928
   1931c:	65686353 	.word	0x65686353
   19320:	656c7564 	.word	0x656c7564
   19324:	74535f72 	.word	0x74535f72
   19328:	54747261 	.word	0x54747261
   1932c:	72656d69 	.word	0x72656d69
   19330:	00002928 	.word	0x00002928
   19334:	65686353 	.word	0x65686353
   19338:	656c7564 	.word	0x656c7564
   1933c:	74535f72 	.word	0x74535f72
   19340:	6954706f 	.word	0x6954706f
   19344:	2872656d 	.word	0x2872656d
   19348:	00000029 	.word	0x00000029
   1934c:	65686353 	.word	0x65686353
   19350:	656c7564 	.word	0x656c7564
   19354:	65475f72 	.word	0x65475f72
   19358:	6d695474 	.word	0x6d695474
   1935c:	29287265 	.word	0x29287265
   19360:	00000000 	.word	0x00000000
   19364:	65686353 	.word	0x65686353
   19368:	656c7564 	.word	0x656c7564
   1936c:	65525f72 	.word	0x65525f72
   19370:	64616f6c 	.word	0x64616f6c
   19374:	656d6954 	.word	0x656d6954
   19378:	00292872 	.word	0x00292872
   1937c:	6f497748 	.word	0x6f497748
   19380:	425f6241 	.word	0x425f6241
   19384:	6f747475 	.word	0x6f747475
   19388:	495f736e 	.word	0x495f736e
   1938c:	2874696e 	.word	0x2874696e
   19390:	00000029 	.word	0x00000029
   19394:	6f497748 	.word	0x6f497748
   19398:	425f6241 	.word	0x425f6241
   1939c:	6f747475 	.word	0x6f747475
   193a0:	475f736e 	.word	0x475f736e
   193a4:	76457465 	.word	0x76457465
   193a8:	28746e65 	.word	0x28746e65
   193ac:	00000029 	.word	0x00000029
   193b0:	6f497748 	.word	0x6f497748
   193b4:	425f6241 	.word	0x425f6241
   193b8:	6f747475 	.word	0x6f747475
   193bc:	4d5f736e 	.word	0x4d5f736e
   193c0:	466e6961 	.word	0x466e6961
   193c4:	74636e75 	.word	0x74636e75
   193c8:	286e6f69 	.word	0x286e6f69
   193cc:	00000029 	.word	0x00000029
   193d0:	6f497748 	.word	0x6f497748
   193d4:	4c5f6241 	.word	0x4c5f6241
   193d8:	5f736465 	.word	0x5f736465
   193dc:	74696e49 	.word	0x74696e49
   193e0:	00002928 	.word	0x00002928
   193e4:	6f497748 	.word	0x6f497748
   193e8:	4c5f6241 	.word	0x4c5f6241
   193ec:	5f736465 	.word	0x5f736465
   193f0:	6e727554 	.word	0x6e727554
   193f4:	29286e4f 	.word	0x29286e4f
   193f8:	00000000 	.word	0x00000000
   193fc:	6f497748 	.word	0x6f497748
   19400:	4c5f6241 	.word	0x4c5f6241
   19404:	5f736465 	.word	0x5f736465
   19408:	6e727554 	.word	0x6e727554
   1940c:	2866664f 	.word	0x2866664f
   19410:	00000029 	.word	0x00000029
   19414:	6f497748 	.word	0x6f497748
   19418:	4c5f6241 	.word	0x4c5f6241
   1941c:	5f736465 	.word	0x5f736465
   19420:	6e727554 	.word	0x6e727554
   19424:	67676f54 	.word	0x67676f54
   19428:	2928656c 	.word	0x2928656c
   1942c:	00000000 	.word	0x00000000
   19430:	6f497748 	.word	0x6f497748
   19434:	505f6241 	.word	0x505f6241
   19438:	5f73746f 	.word	0x5f73746f
   1943c:	74696e49 	.word	0x74696e49
   19440:	00002928 	.word	0x00002928
   19444:	6f497748 	.word	0x6f497748
   19448:	505f6241 	.word	0x505f6241
   1944c:	5f73746f 	.word	0x5f73746f
   19450:	56746547 	.word	0x56746547
   19454:	65756c61 	.word	0x65756c61
   19458:	00002928 	.word	0x00002928
   1945c:	6f497748 	.word	0x6f497748
   19460:	505f6241 	.word	0x505f6241
   19464:	5f73746f 	.word	0x5f73746f
   19468:	41746547 	.word	0x41746547
   1946c:	6156746c 	.word	0x6156746c
   19470:	2865756c 	.word	0x2865756c
   19474:	00000029 	.word	0x00000029
   19478:	6f497748 	.word	0x6f497748
   1947c:	425f6241 	.word	0x425f6241
   19480:	657a7a75 	.word	0x657a7a75
   19484:	6e495f72 	.word	0x6e495f72
   19488:	29287469 	.word	0x29287469
   1948c:	00000000 	.word	0x00000000
   19490:	6f497748 	.word	0x6f497748
   19494:	425f6241 	.word	0x425f6241
   19498:	657a7a75 	.word	0x657a7a75
   1949c:	65425f72 	.word	0x65425f72
   194a0:	29287065 	.word	0x29287065
   194a4:	00000000 	.word	0x00000000
   194a8:	6f497748 	.word	0x6f497748
   194ac:	425f6241 	.word	0x425f6241
   194b0:	657a7a75 	.word	0x657a7a75
   194b4:	74535f72 	.word	0x74535f72
   194b8:	2928706f 	.word	0x2928706f
   194bc:	00000000 	.word	0x00000000
   194c0:	61766e49 	.word	0x61766e49
   194c4:	2064696c 	.word	0x2064696c
   194c8:	666e6f63 	.word	0x666e6f63
   194cc:	696f7020 	.word	0x696f7020
   194d0:	7265746e 	.word	0x7265746e
   194d4:	00000000 	.word	0x00000000
   194d8:	61766e49 	.word	0x61766e49
   194dc:	2064696c 	.word	0x2064696c
   194e0:	75706e69 	.word	0x75706e69
   194e4:	61702074 	.word	0x61702074
   194e8:	656d6172 	.word	0x656d6172
   194ec:	00726574 	.word	0x00726574
   194f0:	76697244 	.word	0x76697244
   194f4:	75207265 	.word	0x75207265
   194f8:	696e696e 	.word	0x696e696e
   194fc:	6c616974 	.word	0x6c616974
   19500:	64657a69 	.word	0x64657a69
   19504:	00000000 	.word	0x00000000
   19508:	76697244 	.word	0x76697244
   1950c:	61207265 	.word	0x61207265
   19510:	6165726c 	.word	0x6165726c
   19514:	69207964 	.word	0x69207964
   19518:	6974696e 	.word	0x6974696e
   1951c:	7a696c61 	.word	0x7a696c61
   19520:	00006465 	.word	0x00006465
   19524:	61766e49 	.word	0x61766e49
   19528:	2064696c 	.word	0x2064696c
   1952c:	6e696f70 	.word	0x6e696f70
   19530:	00726574 	.word	0x00726574
   19534:	6c6c6143 	.word	0x6c6c6143
   19538:	6f726620 	.word	0x6f726620
   1953c:	7277206d 	.word	0x7277206d
   19540:	20676e6f 	.word	0x20676e6f
   19544:	7070616d 	.word	0x7070616d
   19548:	70206465 	.word	0x70206465
   1954c:	69747261 	.word	0x69747261
   19550:	6e6f6974 	.word	0x6e6f6974
   19554:	00000000 	.word	0x00000000
   19558:	61726150 	.word	0x61726150
   1955c:	6574656d 	.word	0x6574656d
   19560:	756f2072 	.word	0x756f2072
   19564:	666f2074 	.word	0x666f2074
   19568:	6e617220 	.word	0x6e617220
   1956c:	00006567 	.word	0x00006567
   19570:	61766e49 	.word	0x61766e49
   19574:	2064696c 	.word	0x2064696c
   19578:	74726f50 	.word	0x74726f50
   1957c:	6e695020 	.word	0x6e695020
   19580:	00444920 	.word	0x00444920
   19584:	74726f50 	.word	0x74726f50
   19588:	6e697020 	.word	0x6e697020
   1958c:	646f6d20 	.word	0x646f6d20
   19590:	73692065 	.word	0x73692065
   19594:	636e7520 	.word	0x636e7520
   19598:	676e6168 	.word	0x676e6168
   1959c:	6c626165 	.word	0x6c626165
   195a0:	00000065 	.word	0x00000065
   195a4:	61766e49 	.word	0x61766e49
   195a8:	2064696c 	.word	0x2064696c
   195ac:	74726f70 	.word	0x74726f70
   195b0:	6e697020 	.word	0x6e697020
   195b4:	646f6d20 	.word	0x646f6d20
   195b8:	00000065 	.word	0x00000065
   195bc:	61766e49 	.word	0x61766e49
   195c0:	2064696c 	.word	0x2064696c
   195c4:	206f6964 	.word	0x206f6964
   195c8:	6e616863 	.word	0x6e616863
   195cc:	206c656e 	.word	0x206c656e
   195d0:	6576656c 	.word	0x6576656c
   195d4:	0000006c 	.word	0x0000006c
   195d8:	61766e49 	.word	0x61766e49
   195dc:	2064696c 	.word	0x2064696c
   195e0:	206f6964 	.word	0x206f6964
   195e4:	6e616863 	.word	0x6e616863
   195e8:	206c656e 	.word	0x206c656e
   195ec:	00006469 	.word	0x00006469
   195f0:	61766e49 	.word	0x61766e49
   195f4:	2064696c 	.word	0x2064696c
   195f8:	74726f70 	.word	0x74726f70
   195fc:	00646920 	.word	0x00646920
   19600:	61766e49 	.word	0x61766e49
   19604:	2064696c 	.word	0x2064696c
   19608:	6e616863 	.word	0x6e616863
   1960c:	206c656e 	.word	0x206c656e
   19610:	756f7267 	.word	0x756f7267
   19614:	64692070 	.word	0x64692070
   19618:	00000000 	.word	0x00000000
   1961c:	61766e49 	.word	0x61766e49
   19620:	2064696c 	.word	0x2064696c
   19624:	666e6f63 	.word	0x666e6f63
   19628:	70206769 	.word	0x70206769
   1962c:	6d617261 	.word	0x6d617261
   19630:	72657465 	.word	0x72657465
   19634:	00000000 	.word	0x00000000
   19638:	61766e49 	.word	0x61766e49
   1963c:	2064696c 	.word	0x2064696c
   19640:	666e6f63 	.word	0x666e6f63
   19644:	70206769 	.word	0x70206769
   19648:	746e696f 	.word	0x746e696f
   1964c:	00007265 	.word	0x00007265
   19650:	61766e49 	.word	0x61766e49
   19654:	2064696c 	.word	0x2064696c
   19658:	206d7770 	.word	0x206d7770
   1965c:	6e616863 	.word	0x6e616863
   19660:	006c656e 	.word	0x006c656e
   19664:	206d7750 	.word	0x206d7750
   19668:	6e616863 	.word	0x6e616863
   1966c:	206c656e 	.word	0x206c656e
   19670:	69726570 	.word	0x69726570
   19674:	6920646f 	.word	0x6920646f
   19678:	6e752073 	.word	0x6e752073
   1967c:	6e616863 	.word	0x6e616863
   19680:	62616567 	.word	0x62616567
   19684:	0000656c 	.word	0x0000656c
   19688:	61766e49 	.word	0x61766e49
   1968c:	2064696c 	.word	0x2064696c
   19690:	20636461 	.word	0x20636461
   19694:	756f7267 	.word	0x756f7267
   19698:	00000070 	.word	0x00000070
   1969c:	66667542 	.word	0x66667542
   196a0:	70207265 	.word	0x70207265
   196a4:	746e696f 	.word	0x746e696f
   196a8:	6e207265 	.word	0x6e207265
   196ac:	6920746f 	.word	0x6920746f
   196b0:	6974696e 	.word	0x6974696e
   196b4:	7a696c61 	.word	0x7a696c61
   196b8:	00006465 	.word	0x00006465
   196bc:	696c6143 	.word	0x696c6143
   196c0:	74617262 	.word	0x74617262
   196c4:	206e6f69 	.word	0x206e6f69
   196c8:	7265706f 	.word	0x7265706f
   196cc:	6f697461 	.word	0x6f697461
   196d0:	6974206e 	.word	0x6974206e
   196d4:	2064656d 	.word	0x2064656d
   196d8:	0074756f 	.word	0x0074756f
   196dc:	61766e49 	.word	0x61766e49
   196e0:	2064696c 	.word	0x2064696c
   196e4:	75657571 	.word	0x75657571
   196e8:	64692065 	.word	0x64692065
   196ec:	00000000 	.word	0x00000000
   196f0:	61766e49 	.word	0x61766e49
   196f4:	2064696c 	.word	0x2064696c
   196f8:	75657571 	.word	0x75657571
   196fc:	74732065 	.word	0x74732065
   19700:	73757461 	.word	0x73757461
   19704:	616c6620 	.word	0x616c6620
   19708:	00000067 	.word	0x00000067
   1970c:	61766e49 	.word	0x61766e49
   19710:	2064696c 	.word	0x2064696c
   19714:	6b736174 	.word	0x6b736174
   19718:	00646920 	.word	0x00646920
   1971c:	61766e49 	.word	0x61766e49
   19720:	2064696c 	.word	0x2064696c
   19724:	6b736174 	.word	0x6b736174
   19728:	20726f20 	.word	0x20726f20
   1972c:	656d6974 	.word	0x656d6974
   19730:	65702072 	.word	0x65702072
   19734:	646f6972 	.word	0x646f6972
   19738:	74696369 	.word	0x74696369
   1973c:	00000079 	.word	0x00000079
   19740:	61766e49 	.word	0x61766e49
   19744:	2064696c 	.word	0x2064696c
   19748:	656d6974 	.word	0x656d6974
   1974c:	64692072 	.word	0x64692072
   19750:	00000000 	.word	0x00000000
   19754:	61766e49 	.word	0x61766e49
   19758:	2064696c 	.word	0x2064696c
   1975c:	74747562 	.word	0x74747562
   19760:	69206e6f 	.word	0x69206e6f
   19764:	00000064 	.word	0x00000064
   19768:	61766e49 	.word	0x61766e49
   1976c:	2064696c 	.word	0x2064696c
   19770:	74747562 	.word	0x74747562
   19774:	73206e6f 	.word	0x73206e6f
   19778:	65746174 	.word	0x65746174
   1977c:	00000000 	.word	0x00000000
   19780:	61766e49 	.word	0x61766e49
   19784:	2064696c 	.word	0x2064696c
   19788:	2064656c 	.word	0x2064656c
   1978c:	00006469 	.word	0x00006469
   19790:	61766e49 	.word	0x61766e49
   19794:	2064696c 	.word	0x2064696c
   19798:	75706e69 	.word	0x75706e69
   1979c:	6f702074 	.word	0x6f702074
   197a0:	65746e69 	.word	0x65746e69
   197a4:	00000072 	.word	0x00000072
   197a8:	61766e49 	.word	0x61766e49
   197ac:	2064696c 	.word	0x2064696c
   197b0:	7a7a7562 	.word	0x7a7a7562
   197b4:	74207265 	.word	0x74207265
   197b8:	00656e6f 	.word	0x00656e6f
   197bc:	6f727245 	.word	0x6f727245
   197c0:	45203a72 	.word	0x45203a72
   197c4:	726f7272 	.word	0x726f7272
   197c8:	206e6920 	.word	0x206e6920
   197cc:	69207325 	.word	0x69207325
   197d0:	7566206e 	.word	0x7566206e
   197d4:	6974636e 	.word	0x6974636e
   197d8:	25206e6f 	.word	0x25206e6f
   197dc:	69772073 	.word	0x69772073
   197e0:	74206874 	.word	0x74206874
   197e4:	69206568 	.word	0x69206568
   197e8:	6174736e 	.word	0x6174736e
   197ec:	2065636e 	.word	0x2065636e
   197f0:	202c6425 	.word	0x202c6425
   197f4:	000a7325 	.word	0x000a7325
   197f8:	20746f50 	.word	0x20746f50
   197fc:	65722031 	.word	0x65722031
   19800:	74736973 	.word	0x74736973
   19804:	65636e61 	.word	0x65636e61
   19808:	6c617620 	.word	0x6c617620
   1980c:	69206575 	.word	0x69206575
   19810:	686f206e 	.word	0x686f206e
   19814:	203a736d 	.word	0x203a736d
   19818:	000a6425 	.word	0x000a6425
   1981c:	20746f50 	.word	0x20746f50
   19820:	65722032 	.word	0x65722032
   19824:	74736973 	.word	0x74736973
   19828:	65636e61 	.word	0x65636e61
   1982c:	6c617620 	.word	0x6c617620
   19830:	69206575 	.word	0x69206575
   19834:	686f206e 	.word	0x686f206e
   19838:	203a736d 	.word	0x203a736d
   1983c:	000a6425 	.word	0x000a6425
   19840:	20746f50 	.word	0x20746f50
   19844:	65722031 	.word	0x65722031
   19848:	74736973 	.word	0x74736973
   1984c:	65636e61 	.word	0x65636e61
   19850:	6c617620 	.word	0x6c617620
   19854:	69206575 	.word	0x69206575
   19858:	686f206e 	.word	0x686f206e
   1985c:	203a736d 	.word	0x203a736d
   19860:	202c6425 	.word	0x202c6425
   19864:	20746f50 	.word	0x20746f50
   19868:	65722032 	.word	0x65722032
   1986c:	74736973 	.word	0x74736973
   19870:	65636e61 	.word	0x65636e61
   19874:	6c617620 	.word	0x6c617620
   19878:	69206575 	.word	0x69206575
   1987c:	686f206e 	.word	0x686f206e
   19880:	203a736d 	.word	0x203a736d
   19884:	000a6425 	.word	0x000a6425
   19888:	6d726554 	.word	0x6d726554
   1988c:	6c616e69 	.word	0x6c616e69
   19890:	00000000 	.word	0x00000000
   19894:	4c554e28 	.word	0x4c554e28
   19898:	0000294c 	.word	0x0000294c

0001989c <Clock_Ip_au8DividerCallbackIndex>:
   1989c:	0e0d0c00 06030201 0a070409 000b0805     ................

000198ac <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

000198bc <Clock_Ip_au8XoscCallbackIndex>:
   198bc:	00000100 00000000 00000000 00000000     ................

000198cc <Clock_Ip_au8IrcoscCallbackIndex>:
   198cc:	03020100 00000004 00000000 00000000     ................

000198dc <Clock_Ip_au8GateCallbackIndex>:
   198dc:	06010200 01040301 00000500 00000000     ................

000198ec <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

000198fc <Clock_Ip_au8PllCallbackIndex>:
   198fc:	00000100 00000000 00000000 00000000     ................

0001990c <Clock_Ip_au8SelectorCallbackIndex>:
   1990c:	0a090800 03020109 07060504 00000000     ................

0001991c <Clock_Ip_au8PcfsCallbackIndex>:
	...

0001992c <Clock_Ip_au8CmuCallbackIndex>:
	...

0001993c <Clock_Ip_au8ClockFeatures>:
	...
   1994c:	01000000 00000000 00000000 00000002     ................
   1995c:	00000000 00000300 00000000 00040000     ................
   1996c:	00000000 05000000 00000000 00000000     ................
   1997c:	00000006 00000000 00000100 00000000     ................
   1998c:	00010000 00000000 04000000 00000000     ................
   1999c:	00000000 00000005 00000001 00000401     ................
   199ac:	00000200 00050100 00030000 04020000     ................
   199bc:	04000000 02000000 00000005 00000005     ................
   199cc:	00000403 00000600 00050300 00070000     ................
   199dc:	05000000 00000000 00000000 00000006     ................
	...
   19a1c:	00050000 00000000 06000000 00000100     ................
   19a2c:	00000000 00030007 00000000 00000000     ................
   19a3c:	00000000 00060000 00000000 07000000     ................
   19a4c:	00000100 00000000 00030008 00000000     ................
	...
   19a64:	00090000 00000000 0a000000 00000100     ................
   19a74:	00000000 0003000b 00000000 00000000     ................
   19a84:	00000000 000c0000 00000000 0d000000     ................
   19a94:	00000100 00000000 0003000e 00000000     ................
   19aa4:	00000800 00000000 00090000 00000000     ................
   19ab4:	0a000000 00000000 00000000 0000000b     ................
   19ac4:	00000000 00000b01 00000000 000b0200     ................
   19ad4:	00000000 0b030000 00000000 00000000     ................
	...
   19aec:	00000400 003b003b 00040000 27002700     ....;.;......'.'
   19afc:	01000000 00000000 00000000 00000007     ................
   19b0c:	00007300 00000700 00320000 00090000     .s........2.....
   19b1c:	02000000 07000000 00000000 00000021     ............!...
   19b2c:	00000009 00000400 00000900 00030000     ................
   19b3c:	00070000 61000000 07000000 00000000     .......a........
   19b4c:	00000024 00000007 00002500 00000700     $........%......
   19b5c:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
   19b6c:	00000000 00000020 38000004 00003800     .... ......8.8..
   19b7c:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
   19b8c:	04000000 00260000 00000026 66000004     ......&.&......f
   19b9c:	00006600 00000400 00370037 00040000     .f......7.7.....
   19bac:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
   19bbc:	2e000004 00002e00 00000200 00404040     ............@@@.
   19bcc:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
   19bdc:	0000006b 6c000004 00006c00 00000900     k......l.l......
   19bec:	00010000 00090000 00000000 07000000     ................
   19bfc:	00000000 00000036 00000007 00003100     ....6........1..
   19c0c:	00000700 00490000 00070000 4a000000     ......I........J
   19c1c:	07000000 00000000 0000004b 00000007     ........K.......
   19c2c:	00004c00 00000700 004d0000 00070000     .L........M.....
   19c3c:	3d000000 03000000 00000000 00000000     ...=............

00019c4c <Clock_Ip_au16SelectorEntryHardwareValue>:
   19c4c:	01010a03 01010001 04040002 02000603     ................
   19c5c:	00010810 02020100 00000000 00000007     ................
   19c6c:	00000009 00000000 00000c0e 00000000     ................
	...

00019ca4 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
   19ca4:	00020000 00000300 00000601 00000000     ................
	...

00019cd4 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
   19cd4:	00000700 00000000 02020000 01010303     ................
   19ce4:	03020606 00000000 00000000 00000000     ................
	...

00019d04 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
   19d04:	00000001 00000000 02020000 01010303     ................
   19d14:	03020606 00000000 00000000 00000000     ................
	...

00019d34 <Clock_Ip_au8DividerValueHardwareValue>:
   19d34:	00020100 00000003 00000004 00000000     ................
   19d44:	00000005 00000000 00000000 00000000     ................
   19d54:	00000006 00000000 00000000 00000000     ................
	...
   19d74:	00000007                                ....

00019d78 <Clock_Ip_apxScgPeriphAsyncDivs>:
   19d78:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

00019d88 <Clock_Ip_aeSourceTypeClockName>:
   19d88:	00000000 00000001 00000001 00000001     ................
   19d98:	00000001 00000001 00000001 00000001     ................
   19da8:	00000002 00000003 00000001 00000001     ................
   19db8:	00000001 00000001 00000002 00000002     ................
   19dc8:	00000003 00000003 00000001 00000001     ................
   19dd8:	00000004 00000004 00000004 00000004     ................
	...

00019e44 <Clock_Ip_aeHwPllName>:
   19e44:	00000009                                ....

00019e48 <Clock_Ip_aeHwDfsName>:
   19e48:	00000057                                W...

00019e4c <Clock_Ip_axDividerCallbacks>:
   19e4c:	00003b51 00003b5b 00003b75 00003b8f     Q;..[;..u;...;..
   19e5c:	00003ba9 00003bc3 00003bdd 00003bf7     .;...;...;...;..
   19e6c:	00003c11 00003c2b 00003c45 00003c5f     .<..+<..E<.._<..
   19e7c:	00003c79 00003c93 00003cad              y<...<...<..

00019e88 <Clock_Ip_axDividerTriggerCallbacks>:
   19e88:	00004021 00004021                       !@..!@..

00019e90 <Clock_Ip_axExtOscCallbacks>:
   19e90:	0000402d 0000402d 0000402d 00004037     -@..-@..-@..7@..
   19ea0:	0000402d 00004041 0000405b 00004075     -@..A@..[@..u@..
   19eb0:	000040f9 0000410d                       .@...A..

00019eb8 <Clock_Ip_axFracDivCallbacks>:
   19eb8:	000042cd 000042cd 000042d7              .B...B...B..

00019ec4 <Clock_Ip_axGateCallbacks>:
   19ec4:	000042f1 000042fb 000043fb 00004415     .B...B...C...D..
   19ed4:	000043ab 000043c5 0000435b 00004375     .C...C..[C..uC..
   19ee4:	0000430b 00004325 0000444b 00004465     .C..%C..KD..eD..
   19ef4:	0000449b 000044b5                       .D...D..

00019efc <Clock_Ip_axIntOscCallbacks>:
   19efc:	00004661 00004661 0000466b 00004675     aF..aF..kF..uF..
   19f0c:	0000468f 000046a9 000046bd 000046d7     .F...F...F...F..
   19f1c:	000046f1 00004705 0000471f 00004739     .F...G...G..9G..
   19f2c:	000047e1 000047fb 00004815              .G...G...H..

00019f38 <Clock_Ip_axCmuCallbacks>:
   19f38:	00004db1 00004dbb 00004dc7 00004db1     .M...M...M...M..

00019f48 <Clock_Ip_axPllCallbacks>:
   19f48:	00004dd1 00004dd1 00004ddb 00004dd1     .M...M...M...M..
   19f58:	00004de7 00004df1 00004e0b 00004e25     .M...M...N..%N..
   19f68:	00004ec9 00004eb5                       .N...N..

00019f70 <Clock_Ip_axPcfsCallbacks>:
   19f70:	00005025                                %P..

00019f74 <Clock_Ip_axSelectorCallbacks>:
   19f74:	00005031 00005031 0000503b 00005055     1P..1P..;P..UP..
   19f84:	00005031 0000506f 00005089 000050a3     1P..oP...P...P..
   19f94:	000050bd 000050d7 000050f1 0000510b     .P...P...P...Q..
   19fa4:	00005125 0000513f 00005159 00005173     %Q..?Q..YQ..sQ..
   19fb4:	0000518d 000051a7 000051c1 000051db     .Q...Q...Q...Q..
   19fc4:	000051f5 0000520f                       .Q...R..

00019fcc <ClockSource>:
   19fcc:	00000000 00000008 00000002 00000005     ................
	...
   19fe4:	00000009                                ....

00019fe8 <ResetReasonArray>:
   19fe8:	00000000 00000001 00000002 00000003     ................
   19ff8:	00000004 00000005 00000006 00000007     ................
   1a008:	00000008 00000009 0000000a 0000000b     ................
   1a018:	0000000c 0000000d 0000000e              ............

0001a024 <Port_au32PortCiPortBaseAddr>:
   1a024:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
   1a034:	4004d000                                ...@

0001a038 <Port_au32PortCiGpioBaseAddr>:
   1a038:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
   1a048:	400ff100                                ...@

0001a04c <Adc_Ip_apxBase>:
   1a04c:	4003b000 40027000                       ...@.p.@

0001a054 <Pdb_Adc_Ip_apxBase>:
   1a054:	40036000 40031000                       .`.@...@

0001a05c <Ftm_Pwm_Ip_aFtmBase>:
   1a05c:	40038000 40039000 4003a000 40026000     ...@...@...@.`.@

0001a06c <Queue_Config>:
   1a06c:	00000002 00000001 1fff8b70              ........p...

0001a078 <Task_Config>:
   1a078:	00000032 00000001 00000e49 00000064     2.......I...d...
   1a088:	00000001 00000e55                       ....U...

0001a090 <Timer_Config>:
   1a090:	00000064 00000000 00001061              d.......a...

0001a09c <Scheduler_Config>:
   1a09c:	0000000a 00000002 0001a078 00000001     ........x.......
   1a0ac:	0001a090 00000001 0001a06c              ........l...

0001a0b8 <ButtonsCfg>:
   1a0b8:	0000008c 0000012c 00000071 0000012c     ....,...q...,...
   1a0c8:	0000000c 0000012c                       ....,...

0001a0d0 <LedsCfg>:
   1a0d0:	00010048 00010049 0001004a              H...I...J...

0001a0dc <AdcIpChansConfig_0>:
   1a0dc:	00000000 00000005 00000000 00000001     ................
   1a0ec:	00000008 00000000                       ........

0001a0f4 <AdcIpChansConfig_1>:
   1a0f4:	00000000 0000000f 00000000 00000001     ................
   1a104:	00000008 00000000                       ........

0001a10c <AdcIpConfig_0>:
   1a10c:	00000000 00000003 00000000 0000000c     ................
   1a11c:	00000000 00000001 00000001 00000000     ................
	...
   1a134:	00ff0000 00000000 00000000 0001a0dc     ................
   1a144:	0000cab9                                ....

0001a148 <AdcIpConfig_1>:
   1a148:	00000000 00000003 00000000 0000000c     ................
   1a158:	00000000 00000001 00000001 00000000     ................
	...
   1a170:	00ff0000 00000000 00000000 0001a0f4     ................
   1a180:	0000cadb                                ....

0001a184 <AdcIpwCfg>:
   1a184:	0001a10c 0001a148 0001a9e4 0001aa04     ....H...........
   1a194:	01010100 00010001 00020002 0101ffff     ................
   1a1a4:	00000100                                ....

0001a1a8 <AdcIpwGroupConfig_0>:
   1a1a8:	00000001 00000000 000000c8 00010000     ................
   1a1b8:	00000000                                ....

0001a1bc <AdcIpwGroupConfig_1>:
   1a1bc:	00000001 00000000 000000c8 00010000     ................
   1a1cc:	00000000                                ....

0001a1d0 <Adc_Group0_Assignment_0>:
   1a1d0:	00010000                                ....

0001a1d4 <Adc_Group1_Assignment_1>:
   1a1d4:	00010000                                ....

0001a1d8 <Adc_GroupsCfg>:
	...
   1a1f4:	00000001 0001a1d0 00080002 00000005     ................
   1a204:	00000000 0001a1a8 00010001 00000000     ................
	...
   1a228:	00000001 0001a1d4 000f0002 00000008     ................
   1a238:	00000000 0001a1bc                       ........

0001a240 <Adc_au16GroupIdToIndexMap>:
   1a240:	00010000                                ....

0001a244 <Adc_Partition_Assignment>:
   1a244:	00000000                                ....

0001a248 <Adc_Config>:
   1a248:	0001a184 0001a1d8 00000002 0001a240     ............@...
   1a258:	00000000 0001a244 00000001              ....D.......

0001a264 <Mcu_aClockConfigPB>:
	...
   1a26c:	14000002 0400000e 01000020 00000002     ........ .......
   1a27c:	01000001 00000001 00000005 00000001     ................
   1a28c:	00000000 00000057 00000000 00000000     ....W...........
	...
   1a2a4:	00000057 00000000 00000057 00000000     W.......W.......
	...
   1a2cc:	00000019 00000005 0000001a 00000002     ................
   1a2dc:	0000001b 00000005 0000002a 00000002     ........*.......
   1a2ec:	0000003f 0000000a 00000040 0000000a     ?.......@.......
   1a2fc:	00000041 00000000 00000042 00000000     A.......B.......
   1a30c:	00000031 0000000b 00000045 00000000     1.......E.......
   1a31c:	00000046 00000000 00000047 00000000     F.......G.......
   1a32c:	00000044 00000000 00000030 0000000b     D.......0.......
   1a33c:	0000003d 00000000 00000043 00000000     =.......C.......
   1a34c:	00000049 00000000 0000004a 00000000     I.......J.......
   1a35c:	0000004b 00000000 00000048 00000000     K.......H.......
   1a36c:	00000057 00000057 00000057 00000057     W...W...W...W...
   1a37c:	00000057 00000057 00000057 00000057     W...W...W...W...
   1a38c:	00000057 00000057 00000057 00000057     W...W...W...W...
   1a39c:	00000057 00000057 00000057 00000057     W...W...W...W...
   1a3ac:	0000000a 00000001 00000000 0000000b     ................
   1a3bc:	00000001 00000000 0000000c 00000001     ................
   1a3cc:	00000000 0000000d 00000002 00000000     ................
   1a3dc:	0000001d 00000001 00000000 0000001e     ................
   1a3ec:	00000002 00000000 0000001f 00000001     ................
   1a3fc:	00000000 00000021 00000001 00000000     ....!...........
   1a40c:	00000022 00000002 00000000 00000023     "...........#...
   1a41c:	00000001 00000000 00000025 00000002     ........%.......
   1a42c:	00000000 00000026 00000004 00000000     ....&...........
   1a43c:	00000027 00000002 00000000 00000048     '...........H...
   1a44c:	00000001 00000001 00000057 00000000     ........W.......
   1a45c:	00000000 00000057 00000000 00000000     ....W...........
   1a46c:	00000057 00000000 00000000 00000057     W...........W...
	...
   1a484:	00000057 00000000 00000000 00000057     W...........W...
	...
   1a49c:	00000057 00000000 00000057 00000057     W.......W...W...
	...
   1a4b8:	00000014 00007d00 00000015 00007d00     .....}.......}..
   1a4c8:	00000016 00007d00 00000017 00008000     .....}..........
   1a4d8:	00000030 00000001 00000031 00000001     0.......1.......
   1a4e8:	00000033 00000000 00000034 00000000     3.......4.......
   1a4f8:	00000036 00000000 00000039 00000000     6.......9.......
   1a508:	0000003a 00000000 0000003b 00000000     :.......;.......
   1a518:	0000003c 00000000 0000003d 00000000     <.......=.......
   1a528:	0000003e 00000000 0000003f 00000000     >.......?.......
   1a538:	00000040 00000001 00000041 00000000     @.......A.......
   1a548:	00000042 00000000 00000043 00000000     B.......C.......
   1a558:	00000044 00000000 00000045 00000000     D.......E.......
   1a568:	00000046 00000000 00000047 00000000     F.......G.......
   1a578:	00000048 00000000 00000049 00000000     H.......I.......
   1a588:	0000004a 00000000 0000004b 00000000     J.......K.......
   1a598:	0000004e 00000001 0000004f 00000001     N.......O.......
   1a5a8:	00000050 00000001 00000051 00000001     P.......Q.......
   1a5b8:	00000052 00000001 00000053 00000001     R.......S.......
   1a5c8:	00000054 00000001 00000055 00000000     T.......U.......
   1a5d8:	00000057 00000000 00000057 00000000     W.......W.......
   1a5e8:	00000057 00000000 00000057 00000000     W.......W.......
   1a5f8:	00000057 00000000 00000057 00000000     W.......W.......
   1a608:	00000057 00000000 00000057 00000000     W.......W.......
   1a618:	00000057 00000000 00000057 00000000     W.......W.......
   1a628:	00000000 00000057 00000000 00000057     ....W.......W...
	...

0001a65c <Dio_au32ChannelToPartitionMap>:
   1a65c:	00000001 00000001 00000001 00000001     ................
   1a66c:	00000001 00000001 00000001 00000001     ................
   1a67c:	00000001 00000001 00000001 00000001     ................
   1a68c:	00000001 00000001 00000001 00000001     ................
   1a69c:	00000001 00000001 00000001 00000001     ................
   1a6ac:	00000001 00000001 00000001 00000001     ................
   1a6bc:	00000001 00000001 00000001 00000001     ................
   1a6cc:	00000001 00000001 00000001 00000001     ................
   1a6dc:	00000001 00000001 00000001 00000001     ................
   1a6ec:	00000001 00000001 00000001 00000001     ................
   1a6fc:	00000001 00000001 00000001 00000001     ................
   1a70c:	00000001 00000001 00000001 00000001     ................
   1a71c:	00000001 00000001 00000001 00000001     ................
   1a72c:	00000001 00000001 00000001 00000001     ................
   1a73c:	00000001 00000001 00000001 00000001     ................
   1a74c:	00000001 00000001 00000001 00000001     ................
   1a75c:	00000001 00000001 00000001 00000001     ................
   1a76c:	00000001 00000001 00000001 00000001     ................
   1a77c:	00000001 00000001 00000001 00000001     ................
   1a78c:	00000001 00000001 00000001 00000001     ................
   1a79c:	00000001 00000001 00000001 00000001     ................
   1a7ac:	00000001 00000001 00000001 00000001     ................
   1a7bc:	00000001 00000001 00000001 00000001     ................
   1a7cc:	00000001 00000001 00000001 00000001     ................
   1a7dc:	00000001 00000001 00000001 00000001     ................
   1a7ec:	00000001 00000001 00000001 00000001     ................
   1a7fc:	00000001 00000001 00000001 00000001     ................
   1a80c:	00000001 00000001 00000001 00000001     ................
   1a81c:	00000001 00000001 00000001 00000001     ................
   1a82c:	00000001 00000001 00000001 00000001     ................
   1a83c:	00000001 00000001 00000001 00000001     ................
   1a84c:	00000001 00000001 00000001 00000001     ................
   1a85c:	00000001 00000001 00000001 00000001     ................
   1a86c:	00000001 00000001 00000001 00000001     ................
   1a87c:	00000001 00000001 00000001 00000001     ................
   1a88c:	00000001 00000001 00000001 00000001     ................
   1a89c:	00000001                                ....

0001a8a0 <Dio_au32PortToPartitionMap>:
   1a8a0:	00000001 00000001 00000001 00000001     ................
   1a8b0:	00000001                                ....

0001a8b4 <Dio_aAvailablePinsForWrite>:
   1a8b4:	0003ffff 0003ffff 0003ffff 0003ffff     ................
   1a8c4:	0001ffff                                ....

0001a8c8 <Dio_aAvailablePinsForRead>:
   1a8c8:	0003ffff 0003ffff 0003ffff 0003ffff     ................
   1a8d8:	0001ffff                                ....

0001a8dc <Dio_Config>:
	...
   1a8e4:	0001a65c 0001a8a0                       \.......

0001a8ec <Ftm_Pwm_Ip_SyncCfg1>:
	...
   1a908:	00000003 00000003                       ........

0001a910 <Ftm_Pwm_Ip_InstCfg1>:
   1a910:	00000003 00000000 00000000 00000000     ................
	...
   1a944:	000014d5 00000001 00000000 00000000     ................
   1a954:	00000000 0001a8ec                       ........

0001a95c <Ftm_Pwm_Ip_I1_Ch7>:
   1a95c:	00000007 0000000a 00000000 00000000     ................
   1a96c:	00000000 00000001 00000000 00000000     ................
	...

0001a984 <Ftm_Pwm_Ip_I1_ChArray>:
   1a984:	0001a95c                                \...

0001a988 <Ftm_Pwm_Ip_UserCfg1>:
   1a988:	0001a910 0001a984 00000001 00000000     ................
   1a998:	00000000                                ....

0001a99c <aIrqConfiguration>:
   1a99c:	00000027 00000001 0000b3fd 00000028     '...........(...
   1a9ac:	00000001 0000b40d                       ........

0001a9b4 <intCtrlConfig>:
   1a9b4:	00000002 0001a99c                       ........

0001a9bc <Mcu_Config>:
   1a9bc:	0000005a 00000000 00000001 00000001     Z...............
   1a9cc:	0001aea8 0001a264 0001aeb4              ....d.......

0001a9d8 <OsIf_xPredefinedConfig>:
   1a9d8:	00000000 02dc6c00                       .....l..

0001a9e0 <OsIf_apxPredefinedConfig>:
   1a9e0:	0001a9d8                                ....

0001a9e4 <PdbAdcIpConfig_0>:
	...
   1a9f0:	0000000f ffff0000 00000000 00000000     ................
   1aa00:	00000000                                ....

0001aa04 <PdbAdcIpConfig_1>:
	...
   1aa10:	0000000f ffff0000 00000000 00000000     ................
   1aa20:	00000000                                ....

0001aa24 <Platform_uConfiguration>:
   1aa24:	0001aa2c                                ,...

0001aa28 <Platform_Config>:
   1aa28:	0001aa24                                $...

0001aa2c <ipwConfig>:
   1aa2c:	0001a9b4 00000000                       ........

0001aa34 <Port_au16PinDescription>:
   1aa34:	0003ffff 0003ffff 0003ffff 0003ffff     ................
   1aa44:	0001ffff 0003ffff 0003ffff 0003ffff     ................
   1aa54:	0003ffff 0001ffff 0003ffcf 0003ffff     ................
   1aa64:	0003ffff 0003fcff 0001dfef 0003f36f     ............o...
   1aa74:	0003fe3f 0003f3ff 00026e3f 0001bebf     ?.......?n......
   1aa84:	0002cf9f 0000302f 000030cc 000183ef     ..../0...0......
   1aa94:	0001ec7c 00000b1f 00000023 00000010     |.......#.......
   1aaa4:	0001010c 00000033 000072cf 0000003c     ....3....r..<...
   1aab4:	0000cff3 00001b2f 00018c7f 00000433     ..../.......3...
   1aac4:	00000000 00000030 0000600b 00018c38     ....0....`..8...

0001aad4 <g_pin_mux_InitConfigArr>:
   1aad4:	4004b000 400ff080 00000008 00000002     ...@...@........
   1aae4:	00000001 00000002 00000000 00000000     ................
	...
   1aafc:	4004b000 400ff080 00000009 00000002     ...@...@........
   1ab0c:	00000001 00000002 00000000 00000000     ................
	...
   1ab24:	4004b000 400ff080 0000000a 00000002     ...@...@........
   1ab34:	00000001 00000002 00000000 00000000     ................
	...
   1ab4c:	4004b000 400ff080 0000000b 00000002     ...@...@........
   1ab5c:	00000001 00000002 00000000 00000000     ................
	...
   1ab74:	4004b000 400ff080 0000000d 00000002     ...@...@........
   1ab84:	00000001 00000002 00000000 00000000     ................
	...
   1ab9c:	4004b000 400ff080 0000000e 00000002     ...@...@........
   1abac:	00000001 00000002 00000000 00000000     ................
	...
   1abc4:	4004d000 400ff100 0000000c 00000002     ...@...@........
   1abd4:	00000001 00000001 00000000 00000000     ................
	...
   1abec:	4004c000 400ff0c0 00000011 00000002     ...@...@........
   1abfc:	00000001 00000001 00000000 00000000     ................
	...
   1ac14:	40049000 400ff000 0000000c 00000002     ...@...@........
   1ac24:	00000001 00000001 00000000 00000000     ................
	...
   1ac3c:	40049000 00000000 0000000d 00000002     ...@............
   1ac4c:	00000002 00000002 00000000 00000000     ................
	...
   1ac64:	4004a000 00000000 00000001 00000002     ...@............
   1ac74:	00000000 00000001 00000000 00000000     ................
	...
   1ac8c:	4004a000 00000000 0000000d 00000002     ...@............
   1ac9c:	00000000 00000001 00000000 00000000     ................
	...

0001acb4 <au8Port_PartitionList>:
   1acb4:	00000001                                ....

0001acb8 <au32Port_PinToPartitionMap>:
   1acb8:	00000001 00000001 00000001 00000001     ................
   1acc8:	00000001 00000001 00000001 00000001     ................
   1acd8:	00000001 00000001 00000001 00000001     ................

0001ace8 <Port_au16NoUnUsedPadsArrayDefault>:
   1ace8:	00010000 00030002 00070006 00090008     ................
   1acf8:	000e000b 0010000f 00200011 00230022     .......... .".#.
   1ad08:	00250024 00270026 00290028 002b002a     $.%.&.'.(.).*.+.
   1ad18:	002e002c 0030002f 00400031 00420041     ,.../.0.1.@.A.B.
   1ad28:	00460043 004c0047 0050004f 00600051     C.F.G.L.O.P.Q.`.
   1ad38:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
   1ad48:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
   1ad58:	00810080 00830082 00850084 00870086     ................
   1ad68:	00890088 008b008a 008e008d 0090008f     ................

0001ad78 <Port_UnUsedPin>:
   1ad78:	00000000 00000001 00000000              ............

0001ad84 <Port_aPinConfigDefault>:
   1ad84:	00000048 00000100 00000000 00000002     H...............
   1ad94:	00010001 00000049 00000100 00000000     ....I...........
   1ada4:	00000002 00010101 0000004a 00000100     ........J.......
   1adb4:	00000000 00000002 00010101 0000008c     ................
   1adc4:	00000100 00000000 00000001 00010101     ................
   1add4:	0000004b 00000100 00000000 00000002     K...............
   1ade4:	00010101 0000004d 00000100 00000000     ....M...........
   1adf4:	00000002 00010101 0000004e 00000100     ........N.......
   1ae04:	00000000 00000002 00010101 00000071     ............q...
   1ae14:	00000100 00000000 00000001 00010101     ................
   1ae24:	0000000c 00000100 00000000 00000001     ................
   1ae34:	00010101 00000021 00000000 00000002     ....!...........
   1ae44:	00000000 00010000 0000002d 00000000     ........-.......
   1ae54:	00000002 00000000 00010000 0000000d     ................
   1ae64:	00000200 00000000 00000002 00010000     ................

0001ae74 <Port_Config>:
   1ae74:	0048000c 0001ace8 0001ad78 0001ad84     ..H.....x.......
	...
   1ae8c:	0001acb8 0001acb4 0001aad4              ............

0001ae98 <Power_Ip_RCM_ConfigPB>:
	...

0001aea0 <Power_Ip_PMC_ConfigPB>:
   1aea0:	00000000                                ....

0001aea4 <Power_Ip_SMC_ConfigPB>:
   1aea4:	00000000                                ....

0001aea8 <Power_Ip_aModeConfigPB>:
	...

0001aeb4 <Power_Ip_HwIPsConfigPB>:
   1aeb4:	0001ae98 0001aea0 0001aea4              ............

0001aec0 <Pwm_Channels_PB>:
	...
   1aec8:	00000001 0001a95c 00000001 00000001     ....\...........

0001aed8 <Pwm_Instances_PB>:
   1aed8:	00000001 00000001 0001a988              ............

0001aee4 <Pwm_Config>:
   1aee4:	00000001 0001aec0 00000001 0001aed8     ................

0001aef4 <_aInitStr.0>:
   1aef4:	00000000 54540000 45522052 53454747     ......TTR REGGES
   1af04:	00000000                                ....

0001af08 <_aV2C.0>:
   1af08:	33323130 37363534 42413938 46454443     0123456789ABCDEF

0001af18 <__INIT_TABLE>:
   1af18:	00000002 	.word	0x00000002
   1af1c:	1fff8b10 	.word	0x1fff8b10
   1af20:	0001af40 	.word	0x0001af40
   1af24:	0001af9c 	.word	0x0001af9c
   1af28:	1fff8800 	.word	0x1fff8800
   1af2c:	00000000 	.word	0x00000000
   1af30:	00000310 	.word	0x00000310

0001af34 <__ZERO_TABLE>:
   1af34:	00000001 	.word	0x00000001
   1af38:	1fff8b70 	.word	0x1fff8b70
   1af3c:	1fff9cb0 	.word	0x1fff9cb0
